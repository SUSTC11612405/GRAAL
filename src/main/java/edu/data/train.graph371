class C{  public void finish() throws Exception {}  }
class C{  @Override public void interrupt(){  cancel();  super.interrupt();}  }
class C{  public ZipScanner(PathImpl path){  try {    _path=path;    int length=(int)path.length();    ReadStreamOld is=path.openRead();    try {      is.skip(length - 22 - 7);      if (is.read() != 0x50) {        is.skip(6);        if (is.read() != 0x50)         return;      }      if (is.read() == 0x4b && is.read() == 0x05 && is.read() == 0x06) {        _isValid=true;      }      if (_isValid) {        is.skip(6);        _entries=is.read() + (is.read() << 8);        is.skip(4);        _offset=readInt(is);      }    }  finally {      is.close();    }  } catch (  Exception e) {    log().log(Level.FINER,e.toString(),e);  }}  }
class C{  @Override public int hashCode(){  return getValue().hashCode();}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MInOutLineConfirm[] lines=getLines(true);  if (lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  boolean difference=false;  for (int i=0; i < lines.length; i++) {    if (!lines[i].isFullyConfirmed()) {      difference=true;      break;    }  }  setIsInDispute(difference);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  if (!DOCACTION_Complete.equals(getDocAction()))   setDocAction(DOCACTION_Complete);  return DocAction.STATUS_InProgress;}  }
class C{  protected ByteSource createByteSource(byte[] bytes){  return ByteSourceFactory.wrap(bytes);}  }
class C{  public IcalHandler(String methodType){  log.debug("Icalhandler method type : " + methodType);  icsCalendar=new net.fortuna.ical4j.model.Calendar();  icsCalendar.getProperties().add(new ProdId("-//Events Calendar//iCal4j 1.0//EN"));  icsCalendar.getProperties().add(CalScale.GREGORIAN);  icsCalendar.getProperties().add(Version.VERSION_2_0);}  }
class C{  protected static INaviRawModule findRawModule(final int rawModuleId,final List<INaviRawModule> rawModules){  Preconditions.checkArgument(rawModuleId > 0,"Raw module id %s must be positive integer",rawModuleId);  Preconditions.checkNotNull(rawModules,"IE02263: raw modules argument can not be null");  for (  final INaviRawModule rawModule : rawModules) {    if (rawModule.getId() == rawModuleId) {      return rawModule;    }  }  throw new IllegalStateException("IE00160: Could not find raw module");}  }
class C{  @Override public void sessionOpened(NextFilter nextFilter,IoSession session) throws Exception {  if (profileSessionOpened) {    long start=timeNow();    nextFilter.sessionOpened(session);    long end=timeNow();    sessionOpenedTimerWorker.addNewDuration(end - start);  } else {    nextFilter.sessionOpened(session);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static StringBlock read(IntReader reader) throws IOException {  ChunkUtil.readCheckType(reader,CHUNK_TYPE);  int chunkSize=reader.readInt();  int stringCount=reader.readInt();  int styleOffsetCount=reader.readInt();  reader.readInt();  int stringsOffset=reader.readInt();  int stylesOffset=reader.readInt();  StringBlock block=new StringBlock();  block.m_stringOffsets=reader.readIntArray(stringCount);  if (styleOffsetCount != 0) {    block.m_styleOffsets=reader.readIntArray(styleOffsetCount);  }{    int size=((stylesOffset == 0) ? chunkSize : stylesOffset) - stringsOffset;    if ((size % 4) != 0) {      throw new IOException("String data size is not multiple of 4 (" + size + ").");    }    block.m_strings=reader.readIntArray(size / 4);  }  if (stylesOffset != 0) {    int size=(chunkSize - stylesOffset);    if ((size % 4) != 0) {      throw new IOException("Style data size is not multiple of 4 (" + size + ").");    }    block.m_styles=reader.readIntArray(size / 4);  }  return block;}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.test();}  }
class C{  @Override public Range findRangeBounds(CategoryDataset dataset){  return findRangeBounds(dataset,false);}  }
class C{  public UCrop withMaxResultSize(@IntRange(from=100) int width,@IntRange(from=100) int height){  mCropOptionsBundle.putInt(EXTRA_MAX_SIZE_X,width);  mCropOptionsBundle.putInt(EXTRA_MAX_SIZE_Y,height);  return this;}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  protected Change createUndoChange(UndoEdit[] edits,ContentStamp stampToRestore) throws CoreException {  return new MultiStateUndoChange(getName(),fFile,edits,stampToRestore,fSaveMode);}  }
class C{  public void test_ticket_1007_number4() throws Exception {  new TestHelper("ticket-1007-number4","ticket-1007-number4.rq","ticket-1007-custom.trig","ticket-1007-number-integer.srx",false).runTest();}  }
class C{  private void createAircraftSymbols(){  publishProgress("Creating aircraft symbols...");  Random random=new Random(123);  for (int i=0; i < NUM_AIRCRAFT; i++) {    Airport departure=this.airports.get(random.nextInt(NUM_AIRPORTS - 1));    Airport arrival=this.airports.get(random.nextInt(NUM_AIRPORTS - 1));    Position origin=Position.fromDegrees(departure.position.latitude,departure.position.longitude,AIRCRAFT_ALT);    Position destination=Position.fromDegrees(arrival.position.latitude,arrival.position.longitude,AIRCRAFT_ALT);    String symbolCode=createAircraftSymbolCode(departure.country,departure.use);    SparseArray<String> unitModifiers=new SparseArray<>();    unitModifiers.put(ModifiersUnits.H_ADDITIONAL_INFO_1,"ORIG: " + departure.name);    unitModifiers.put(ModifiersUnits.G_STAFF_COMMENTS,"DEST: " + arrival.name);    Placemark placemark=new MilStd2525Placemark(origin,symbolCode,unitModifiers,null);    placemark.setEyeDistanceScalingThreshold(400000);    placemark.setEyeDistanceScaling(true);    placemark.putUserProperty("origin",origin);    placemark.putUserProperty("destination",destination);    this.aircraftLayer.addRenderable(placemark);    PlacemarksMilStd2525DemoActivity.this.aircraftPositions.put(placemark,new Position());  }}  }
class C{  public void restoreValue(){  if (m_isBackupValue) {    if (isParentTabField()) {      if (CLogMgt.isLevelFinest())       log.finest("Restore " + m_vo.WindowNo + "|"+ m_vo.TabNo+ "|"+ m_vo.ColumnName+ "="+ m_backupValue);      Env.setContext(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,m_vo.ColumnName,m_backupValue);    } else {      if (CLogMgt.isLevelFinest())       log.finest("Restore " + m_vo.WindowNo + "|"+ m_vo.ColumnName+ "="+ m_backupValue);      Env.setContext(m_vo.ctx,m_vo.WindowNo,m_vo.ColumnName,m_backupValue);    }  }}  }
class C{  public static QueryStorageProcessors parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryStorageProcessors object=new QueryStorageProcessors();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryStorageProcessors".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryStorageProcessors)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","spUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","spUniqueId").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.setSpUniqueId((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void save(final File file) throws IOException {  try {    Process.checkIfSavable(this);  } catch (  Exception e) {    throw new IOException(e.getMessage());  }  new FileProcessLocation(file).store(this,null);}  }
class C{  private void upgradeSelectedModeIndex(SettingsManager settingsManager,Context context){  int oldGcamIndex=6;  int gcamIndex=context.getResources().getInteger(R.integer.camera_mode_gcam);  int lastUsedCameraIndex=settingsManager.getInteger(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_MODULE_LAST_USED);  if (lastUsedCameraIndex == oldGcamIndex) {    settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_MODULE_LAST_USED,gcamIndex);  }  int startupModuleIndex=settingsManager.getInteger(SettingsManager.SCOPE_GLOBAL,Keys.KEY_STARTUP_MODULE_INDEX);  if (startupModuleIndex == oldGcamIndex) {    settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_STARTUP_MODULE_INDEX,gcamIndex);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode09.class,args);}  }
class C{  private Vector decodeEvents(final Document document){  Vector events=new Vector();  Logger logger;  long timeStamp;  String level;  String threadName;  Object message=null;  String ndc=null;  String[] exception=null;  String className=null;  String methodName=null;  String fileName=null;  String lineNumber=null;  Hashtable properties=null;  NodeList nl=document.getElementsByTagName("log4j:eventSet");  Node eventSet=nl.item(0);  NodeList eventList=eventSet.getChildNodes();  for (int eventIndex=0; eventIndex < eventList.getLength(); eventIndex++) {    Node eventNode=eventList.item(eventIndex);    if (eventNode.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    logger=Logger.getLogger(eventNode.getAttributes().getNamedItem("logger").getNodeValue());    timeStamp=Long.parseLong(eventNode.getAttributes().getNamedItem("timestamp").getNodeValue());    level=eventNode.getAttributes().getNamedItem("level").getNodeValue();    threadName=eventNode.getAttributes().getNamedItem("thread").getNodeValue();    NodeList list=eventNode.getChildNodes();    int listLength=list.getLength();    for (int y=0; y < listLength; y++) {      String tagName=list.item(y).getNodeName();      if (tagName.equalsIgnoreCase("log4j:message")) {        message=getCData(list.item(y));      }      if (tagName.equalsIgnoreCase("log4j:NDC")) {        ndc=getCData(list.item(y));      }      if (tagName.equalsIgnoreCase("log4j:MDC")) {        properties=new Hashtable();        NodeList propertyList=list.item(y).getChildNodes();        int propertyLength=propertyList.getLength();        for (int i=0; i < propertyLength; i++) {          String propertyTag=propertyList.item(i).getNodeName();          if (propertyTag.equalsIgnoreCase("log4j:data")) {            Node property=propertyList.item(i);            String name=property.getAttributes().getNamedItem("name").getNodeValue();            String value=property.getAttributes().getNamedItem("value").getNodeValue();            properties.put(name,value);          }        }      }      if (tagName.equalsIgnoreCase("log4j:throwable")) {        exception=new String[]{getCData(list.item(y))};      }      if (tagName.equalsIgnoreCase("log4j:locationinfo")) {        className=list.item(y).getAttributes().getNamedItem("class").getNodeValue();        methodName=list.item(y).getAttributes().getNamedItem("method").getNodeValue();        fileName=list.item(y).getAttributes().getNamedItem("file").getNodeValue();        lineNumber=list.item(y).getAttributes().getNamedItem("line").getNodeValue();      }      if (tagName.equalsIgnoreCase("log4j:properties")) {        if (properties == null) {          properties=new Hashtable();        }        NodeList propertyList=list.item(y).getChildNodes();        int propertyLength=propertyList.getLength();        for (int i=0; i < propertyLength; i++) {          String propertyTag=propertyList.item(i).getNodeName();          if (propertyTag.equalsIgnoreCase("log4j:data")) {            Node property=propertyList.item(i);            String name=property.getAttributes().getNamedItem("name").getNodeValue();            String value=property.getAttributes().getNamedItem("value").getNodeValue();            properties.put(name,value);          }        }      }      if (additionalProperties.size() > 0) {        if (properties == null) {          properties=new Hashtable(additionalProperties);        } else {          Iterator i=additionalProperties.entrySet().iterator();          while (i.hasNext()) {            Map.Entry e=(Map.Entry)i.next();            if (!(properties.containsKey(e.getKey()))) {              properties.put(e.getKey(),e.getValue());            }          }        }      }    }    Level levelImpl=Level.toLevel(level);    LocationInfo info;    if ((fileName != null) || (className != null) || (methodName != null)|| (lineNumber != null)) {      info=new LocationInfo(fileName,className,methodName,lineNumber);    } else {      info=LocationInfo.NA_LOCATION_INFO;    }    if (exception == null) {      exception=new String[]{""};    }    LoggingEvent loggingEvent=new LoggingEvent(null,logger,timeStamp,levelImpl,message,threadName,new ThrowableInformation(exception),ndc,info,properties);    events.add(loggingEvent);    message=null;    ndc=null;    exception=null;    className=null;    methodName=null;    fileName=null;    lineNumber=null;    properties=null;  }  return events;}  }
class C{  public static byte[] accDecPktOpsModeLegacy(int addr,int cvNum,int data){  if (addr < 1 || addr > 511) {    log.error("invalid address " + addr);    return null;  }  if (cvNum < 1 || cvNum > 1023) {    log.error("invalid CV number " + cvNum);    return null;  }  if (data < 0 || data > 255) {    log.error("invalid data " + data);    return null;  }  int lowAddr=addr & 0x3F;  int highAddr=((~addr) >> 6) & 0x07;  int lowCVnum=(cvNum - 1) & 0xFF;  int highCVnum=((cvNum - 1) >> 8) & 0x03;  byte[] retVal=new byte[5];  retVal[0]=(byte)(0x80 | lowAddr);  retVal[1]=(byte)(0x0C | (highAddr << 4) | highCVnum);  retVal[2]=(byte)(lowCVnum);  retVal[3]=(byte)(0xFF & data);  retVal[4]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]^ retVal[3]);  return retVal;}  }
class C{  public void removeChannel(Channel channel){  if (channel != null) {switch (channel.getChannelType()) {case STANDARD:      int index=mChannels.indexOf(channel);    mChannels.remove(channel);  if (index >= 0) {    fireTableRowsDeleted(index,index);  }break;case TRAFFIC:mTrafficChannels.remove(channel);break;default :break;}broadcast(new ChannelEvent(channel,Event.NOTIFICATION_DELETE));}}  }
class C{  public boolean isEmpty(){  return delegate.isEmpty();}  }
class C{  @Override public synchronized CloseableReference<T> clone(){  Preconditions.checkState(isValid());  return new CloseableReference<T>(mSharedReference);}  }
class C{  public boolean checkEntry(int i,String mfgName,String family,String mfgID,String decoderVersionID,String decoderProductID,String model,String developerID){  DecoderFile r=decoderList.get(i);  if (mfgName != null && !mfgName.equals(r.getMfg())) {    return false;  }  if (family != null && !family.equals(r.getFamily())) {    return false;  }  if (mfgID != null && !mfgID.equals(r.getMfgID())) {    return false;  }  if (model != null && !model.equals(r.getModel())) {    return false;  }  if (decoderVersionID != null) {    int versionID=Integer.parseInt(decoderVersionID);    if (!r.isVersion(versionID)) {      return false;    }  }  if (decoderProductID != null && !("," + r.getProductID() + ",").contains("," + decoderProductID + ",")) {    return false;  }  if (developerID != null && !developerID.equals(r.getDeveloperID())) {    if (!("," + r.getModelElement().getAttribute("developerID").getValue() + ",").contains("," + developerID + ",")) {      return false;    }  }  return true;}  }
class C{  void leftShift(int n){  if (intLen == 0)   return;  int nInts=n >>> 5;  int nBits=n & 0x1F;  int bitsInHighWord=BigInteger.bitLengthForInt(value[offset]);  if (n <= (32 - bitsInHighWord)) {    primitiveLeftShift(nBits);    return;  }  int newLen=intLen + nInts + 1;  if (nBits <= (32 - bitsInHighWord))   newLen--;  if (value.length < newLen) {    int[] result=new int[newLen];    for (int i=0; i < intLen; i++)     result[i]=value[offset + i];    setValue(result,newLen);  } else   if (value.length - offset >= newLen) {    for (int i=0; i < newLen - intLen; i++)     value[offset + intLen + i]=0;  } else {    for (int i=0; i < intLen; i++)     value[i]=value[offset + i];    for (int i=intLen; i < newLen; i++)     value[i]=0;    offset=0;  }  intLen=newLen;  if (nBits == 0)   return;  if (nBits <= (32 - bitsInHighWord))   primitiveLeftShift(nBits); else   primitiveRightShift(32 - nBits);}  }
class C{  public static String extractErrorMessage(ErrorCondition errorCondition){  String message="Received error from remote peer without description";  if (errorCondition != null) {    if (errorCondition.getDescription() != null && !errorCondition.getDescription().isEmpty()) {      message=errorCondition.getDescription();    }    Symbol condition=errorCondition.getCondition();    if (condition != null) {      message=message + " [condition = " + condition+ "]";    }  }  return message;}  }
class C{  public Bundler putSparseParcelableArray(String key,SparseArray<? extends Parcelable> value){  bundle.putSparseParcelableArray(key,value);  return this;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public void tradeOrderFilled(final TradeOrder tradeOrder){  try {    final Tradestrategy tradestrategy=m_tradingdays.getTradestrategy(tradeOrder.getTradestrategyId().getIdTradeStrategy());    if (null == tradestrategy) {      this.setStatusBarMessage("Warning position opened but Tradestrategy not found for Order Key: " + tradeOrder.getOrderKey() + " in the current Tradingday Tab selection.",BasePanel.WARNING);      return;    }    if (!tradestrategy.getTrade()) {      this.setStatusBarMessage("Warning position opened for Symbol: " + tradestrategy.getContract().getSymbol() + "  but this tradestrategy is not set to trade. A manual order was created Key: "+ tradeOrder.getOrderKey(),BasePanel.WARNING);      return;    }    if (tradeOrder.getIsOpenPosition() && null != tradeOrder.getStopPrice()) {      if (tradestrategy.getStrategy().hasStrategyManager()) {        if (!tradingdayPanel.isStrategyWorkerRunning(tradestrategy.getStrategy().getStrategyManager().getClassName() + tradestrategy.getIdTradeStrategy())) {          tradingdayPanel.killStrategyWorker(tradestrategy.getStrategy().getClassName() + tradestrategy.getIdTradeStrategy());          createStrategy(tradestrategy.getStrategy().getStrategyManager().getClassName(),tradestrategy);        }      } else {        String key=tradestrategy.getStrategy().getClassName() + tradestrategy.getIdTradeStrategy();        if (tradingdayPanel.isStrategyWorkerRunning(key)) {          StrategyRule strategy=tradingdayPanel.getStrategyWorker(key);          strategy.tradeOrderFilled(tradeOrder);        }      }    }    tradestrategy.setStatus(tradeOrder.getTradestrategyId().getStatus());    contractPanel.doRefresh(tradestrategy);  } catch (  Exception ex) {    this.setErrorMessage("Error starting PositionManagerRule.",ex.getMessage(),ex);  }}  }
class C{  public OverUnderBox(Box b,Box d,Box script,float kern,boolean over){  base=b;  del=d;  this.script=script;  this.kern=kern;  this.over=over;  width=b.getWidth();  height=b.height + (over ? d.getWidth() : 0) + (over && script != null ? script.height + script.depth + kern : 0);  depth=b.depth + (over ? 0 : d.getWidth()) + (!over && script != null ? script.height + script.depth + kern : 0);}  }
class C{  public void testRegister4(){  Phaser phaser=new Phaser(1);  assertEquals(0,phaser.arrive());  assertEquals(1,phaser.register());  assertEquals(1,phaser.arrive());  assertState(phaser,1,2,1);}  }
class C{  public void testMapSimple() throws Exception {  GridUnsafeMemory mem=new GridUnsafeMemory(0);  Random rnd=new Random();  int mapSize=16 << rnd.nextInt(3);  HadoopTaskContext taskCtx=new TaskContext();  final HadoopHashMultimap m=new HadoopHashMultimap(new JobInfo(),mem,mapSize);  HadoopMultimap.Adder a=m.startAdding(taskCtx);  Multimap<Integer,Integer> mm=ArrayListMultimap.create();  for (int i=0, vals=4 * mapSize + rnd.nextInt(25); i < vals; i++) {    int key=rnd.nextInt(mapSize);    int val=rnd.nextInt();    a.write(new IntWritable(key),new IntWritable(val));    mm.put(key,val);    X.println("k: " + key + " v: "+ val);    a.close();    check(m,mm,taskCtx);    a=m.startAdding(taskCtx);  }  a.close();  X.println("Alloc: " + mem.allocatedSize());  m.close();  assertEquals(0,mem.allocatedSize());}  }
class C{  public void addZipCode(ZipCode zipCode){  if (zipCode != null) {    Set<ZipCode> actualZipCodes=getZipCodes();    if (actualZipCodes == null) {      actualZipCodes=new HashSet<ZipCode>();    }    actualZipCodes.add(zipCode);    this.setZipCodes(actualZipCodes);    zipCode.setGisFeature(this);  }}  }
class C{  public void test_append_null(){  final HardReferenceQueueEvictionListener<String> listener=new MyListener<String>();  final HardReferenceQueue<String> cache=new HardReferenceQueue<String>(listener,100,2);  try {    cache.add(null);    fail("Expecting: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expectedRefs exception: " + ex);  }}  }
class C{  public boolean isAddColumnSupported(){  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  Node entRef;  ProcessingInstruction piNode;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=gender.getFirstChild();  assertNotNull("entRefNotNull",entRef);  piNode=(ProcessingInstruction)entRef.getLastChild();  assertNotNull("piNodeNotNull",piNode);{    boolean success=false;    try {      piNode.setData("newData");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static void addDirectories(ArrayList<File> list){  for (int i=1; i <= 34; i++) {    File dir=new File("srcRootDirectory/chapter" + i);    if (!dir.isDirectory()) {      if (dir.mkdirs())       list.add(dir);    }  }}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void addToResults(Map<String,Double> results,Map<String,List<Double>> cvResults){  for (  Entry<String,Double> entry : results.entrySet()) {    if (cvResults.get(entry.getKey()) != null) {      cvResults.get(entry.getKey()).add(entry.getValue());    } else {      List<Double> d=new ArrayList<Double>();      d.add(entry.getValue());      cvResults.put(entry.getKey(),d);    }  }}  }
class C{  private void check(){  if (getChildCount() != 2) {    throw new RuntimeException("SplitPaneLayout must have exactly two child views.");  }}  }
class C{  public HashCodeBuilder append(double[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (int i=0; i < array.length; i++) {      append(array[i]);    }  }  return this;}  }
class C{  protected KernTable(DirectoryEntry de,RandomAccessFile raf) throws IOException {  raf.seek(de.getOffset());  version=raf.readUnsignedShort();  nTables=raf.readUnsignedShort();  tables=new KernSubtable[nTables];  for (int i=0; i < nTables; i++) {    tables[i]=KernSubtable.read(raf);  }}  }
class C{  @Override public void create(){  assertWritable();  final String name=getNamespace() + "." + NAME_SUBJ_SEARCH;  final IIndexManager indexManager=getIndexManager();  final Properties p=getProperties();  final IndexMetadata indexMetadata=new IndexMetadata(indexManager,p,name,UUID.randomUUID(),IndexTypeEnum.BTree);  final IKeyBuilderFactory keyBuilderFactory;{    final Properties tmp=new Properties(p);    tmp.setProperty(KeyBuilder.Options.STRENGTH,p.getProperty(Options.INDEXER_COLLATOR_STRENGTH,Options.DEFAULT_INDEXER_COLLATOR_STRENGTH));    keyBuilderFactory=new DefaultKeyBuilderFactory(tmp);  }  final boolean fieldsEnabled=Boolean.parseBoolean(p.getProperty(Options.FIELDS_ENABLED,Options.DEFAULT_FIELDS_ENABLED));  if (log.isInfoEnabled())   log.info(Options.FIELDS_ENABLED + "=" + fieldsEnabled);  indexMetadata.setTupleSerializer(new RDFFullTextIndexTupleSerializer(keyBuilderFactory,DefaultTupleSerializer.getDefaultLeafKeysCoder(),SimpleRabaCoder.INSTANCE,fieldsEnabled));  indexManager.registerIndex(indexMetadata);  if (log.isInfoEnabled())   log.info("Registered new subject-centric text index: name=" + name);}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  @Override public void onUIRefreshBegin(PtrFrameLayout frame){  mDrawable.setAlpha(255);  mDrawable.start();}  }
class C{  private String createRequestUrlFromLogoutRequest(LogoutRequest samlRequest,SloRequestSettings requestSettings){  String retval=null;  logger.info("createRequestUrlFromLogoutRequest, IDP: " + requestSettings.getIDPAlias());  Validate.notNull(samlRequest,"samlRequest can't be null");  Validate.notNull(requestSettings,"SloRequestSettings can't be null");  try {    SPConfiguration spConfig=getMetadataSettings().getSPConfiguration(requestSettings.getSPAlias());    if (spConfig == null) {      throw new IllegalArgumentException("service provider setting unavailable for " + requestSettings.getSPAlias());    }    String issuer=SamlUtils.getSpSloLocation(spConfig,SamlNames.HTTP_REDIRECT);    Validate.notEmpty(issuer,"issuer");    SamlUtils samlUtils=new SamlUtils(null,spConfig.getSigningPrivateKey(),spConfig.getSigningAlgorithm(),null,issuer);    String encodedRequest=SamlUtils.encodeSAMLObject(samlRequest,true);    Boolean isSigned=requestSettings.isSigned();    if (isSigned) {      Validate.notNull(spConfig.getSigningAlgorithm(),"signing algorithm");      Validate.notNull(spConfig.getSigningPrivateKey(),"signing key");    }    String toBeSigned=SamlUtils.generateRedirectUrlQueryStringParameters(encodedRequest,null,requestSettings.getRelayState(),isSigned ? spConfig.getSigningAlgorithm() : null,null);    logger.info("Relay State: " + requestSettings.getRelayState());    if (toBeSigned == null || toBeSigned.isEmpty()) {      logger.warn("Message to be signed is null or empty");    }    retval=samlRequest.getDestination();    if (isSigned) {      String signature=samlUtils.signMessage(toBeSigned);      String queryString=SamlUtils.generateRedirectUrlQueryStringParameters(encodedRequest,null,requestSettings.getRelayState(),spConfig.getSigningAlgorithm(),signature);      retval+="?" + queryString;    } else {      retval+="?" + toBeSigned;    }  } catch (  Exception e) {    retval=null;  }  return retval;}  }
class C{  @Override public String toString(){  return "PieSection: " + this.pieIndex + ", "+ this.sectionIndex+ "("+ this.sectionKey.toString()+ ")";}  }
class C{  protected static String escapeDot(String identifierToEscape){  int indexof=identifierToEscape.indexOf(".");  if (indexof == -1) {    return identifierToEscape;  }  StringBuilder builder=new StringBuilder();  for (int i=0; i < identifierToEscape.length(); i++) {    char c=identifierToEscape.charAt(i);    if (c != '.') {      builder.append(c);      continue;    }    if (i > 0) {      if (identifierToEscape.charAt(i - 1) == '\\') {        builder.append('.');        continue;      }    }    builder.append('\\');    builder.append('.');  }  return builder.toString();}  }
class C{  private void validateZoneName(String name){  if (name.matches("[a-zA-Z0-9_]+")) {    return;  }  throw APIException.badRequests.illegalZoneName(name);}  }
class C{  public void Done(){  nextCharBuf=null;  buffer=null;  bufline=null;  bufcolumn=null;}  }
class C{  protected String engineGetURI(){  return implementedTransformURI;}  }
class C{  public Shape3DPortrayal3D(Geometry geometry){  this(geometry,Color.white);}  }
class C{  public HuberLoss(double c){  this.c=c;}  }
class C{  public Interval domMaxSearchSteps(){  return new Interval(1,200);}  }
class C{  @Override public void onEnabled(Context context,Intent intent){  super.onEnabled(context,intent);  Resources resources=context.getResources();  Preference.putString(context,context.getResources().getString(R.string.shared_pref_device_active),resources.getString(R.string.shared_pref_reg_success));  MessageProcessor processor=new MessageProcessor(context);  processor.getMessages();  Toast.makeText(context,R.string.device_admin_enabled,Toast.LENGTH_LONG).show();  LocalNotification.startPolling(context);}  }
class C{  public static boolean isPackageInstalled(String packageName){  try {    App.CONTEXT.getPackageManager().getPackageInfo(packageName,PackageManager.GET_ACTIVITIES);    return true;  } catch (  PackageManager.NameNotFoundException e) {    return false;  }}  }
class C{  private void onJobStateUpdate(PrintJob printJob,JobStateEnum state){  if (state == null) {    mJobs.remove(printJob.getId());    printJob.cancel();  } else {    if (state == JobStateEnum.CANCELED) {      mJobs.remove(printJob.getId());      printJob.cancel();    } else     if (state == JobStateEnum.COMPLETED || state == JobStateEnum.ABORTED) {      mJobs.remove(printJob.getId());      printJob.complete();    }  }}  }
class C{  protected Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new Error("clone failed");  }}  }
class C{  public static List<Initiator> queryInitiators(DbClient dbClient,URI id){  List<Initiator> initiators=new ArrayList<Initiator>();  URIQueryResultList initiatorUris=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getContainedObjectsConstraint(id,Initiator.class,"host"),initiatorUris);  if (initiatorUris.iterator().hasNext()) {    for (    URI initiatorUri : initiatorUris) {      Initiator initiator=dbClient.queryObject(Initiator.class,initiatorUri);      if (initiators != null && !initiator.getInactive()) {        initiators.add(initiator);      }    }  }  return initiators;}  }
class C{  private void initPreds(){  this.preds=new HashMap<DTNHost,Double>();}  }
class C{  public void initializeTopic(String topic){  if (_topics.get(topic) == null) {synchronized (this) {      if (_topics.get(topic) == null) {        _logger.info("Initializing streams for topic: {}",topic);        Properties props=new Properties();        props.setProperty("zookeeper.connect",_configuration.getValue(Property.ZOOKEEPER_CONNECT.getName(),Property.ZOOKEEPER_CONNECT.getDefaultValue()));        props.setProperty("group.id",_configuration.getValue(Property.KAFKA_CONSUMER_GROUPID.getName(),Property.KAFKA_CONSUMER_GROUPID.getDefaultValue()));        props.setProperty("auto.offset.reset","smallest");        props.setProperty("auto.commit.interval.ms","60000");        props.setProperty("fetch.message.max.bytes","2000000");        ConsumerConnector consumer=kafka.consumer.Consumer.createJavaConsumerConnector(new ConsumerConfig(props));        List<KafkaStream<byte[],byte[]>> streams=_createStreams(consumer,topic);        Topic t=new Topic(topic,consumer,streams.size());        _topics.put(topic,t);        _startStreamingMessages(topic,streams);      }    }  }}  }
class C{  public UCIBestMove stop(){  if (!isConnected()) {    throw new IllegalStateException("Engine is not connected.");  }  if (LOG.isDebugEnabled()) {    LOG.debug("Entering stop(...)");  }  UCIBestMove result=null;synchronized (stopSynch) {    if (!isProcessingGo()) {      result=lastBestMove;      lastBestMove=null;    } else {      long totalSleepTime=0;      send("stop");      while (goRunnable != null && totalSleepTime < 2500) {        try {          Thread.sleep(500);          totalSleepTime+=500;        } catch (        InterruptedException ie) {        }      }      result=lastBestMove;      lastBestMove=null;    }  }  return result;}  }
class C{  private void appendToClassPathForInstrumentation(String path){  assert (Thread.holdsLock(this));  super.addURL(getFileURL(new File(path)));}  }
class C{  @Override public void mapOutputTransformationMetadata(OutputCollector<IntWritable,DistinctValue> out,int taskID,TfUtils agents) throws IOException {  mapOutputHelper(taskID,out,null,agents);}  }
class C{  public tr removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static Pointer roundUp(PointerBase that,Unsigned multiple){  return (Pointer)UnsignedUtils.roundUp((Unsigned)that,multiple);}  }
class C{  public boolean contains(String key){  return checkAdd(key,false);}  }
class C{  public void removeStream(IceMediaStream stream){synchronized (mediaStreams) {    mediaStreams.remove(stream.getName());  }  stream.free();}  }
class C{  public void test_startWriteWriteStop2() throws InterruptedException, ExecutionException {  final H masterStats=new H();  final BlockingBuffer<KVO<O>[]> masterBuffer=new BlockingBuffer<KVO<O>[]>(masterQueueCapacity);  final M master=new M(masterStats,masterBuffer,executorService);  final FutureTask<H> ft=new FutureTask<H>(master);  masterBuffer.setFuture(ft);  executorService.submit(ft);{    final KVO<O>[] a=new KVO[]{new KVO<O>(new byte[]{1},new byte[]{2},null),new KVO<O>(new byte[]{2},new byte[]{3},null),new KVO<O>(new byte[]{2},new byte[]{4},null)};    masterBuffer.add(a);  }  awaitChunksOut(master,2,1000,TimeUnit.MILLISECONDS);{    final KVO<O>[] a=new KVO[]{new KVO<O>(new byte[]{1},new byte[]{3},null),new KVO<O>(new byte[]{2},new byte[]{5},null)};    masterBuffer.add(a);  }  masterBuffer.close();  assertTrue(masterStats == masterBuffer.getFuture().get());  assertEquals("elementsIn",5,masterStats.elementsIn.get());  assertEquals("chunksIn",2,masterStats.chunksIn.get());  assertEquals("elementsOut",5,masterStats.elementsOut.get());  assertEquals("chunksOut",4,masterStats.chunksOut.get());  assertEquals("partitionCount",2,masterStats.getMaximumPartitionCount());{    final HS subtaskStats=masterStats.getSubtaskStats(new L(1));    assertNotNull(subtaskStats);    assertEquals("chunksOut",2,subtaskStats.chunksOut.get());    assertEquals("elementsOut",2,subtaskStats.elementsOut.get());  }{    final HS subtaskStats=masterStats.getSubtaskStats(new L(2));    assertNotNull(subtaskStats);    assertEquals("chunksOut",2,subtaskStats.chunksOut.get());    assertEquals("elementsOut",3,subtaskStats.elementsOut.get());  }  assertEquals("subtaskStartCount",2,masterStats.subtaskStartCount.get());  assertEquals("subtaskEndCount",2,masterStats.subtaskEndCount.get());}  }
class C{  protected void welcomeKnownPlayer(){  concreteQuest.getNPC().add(ConversationStates.IDLE,ConversationPhrases.GREETING_MESSAGES,new AndCondition(new GreetingMatchesNameCondition(concreteQuest.getNPC().getName()),new QuestActiveCondition(concreteQuest.getSlotName())),ConversationStates.ATTENDING,concreteQuest.welcomeDuringActiveQuest(),null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static void sumSqAgg(double[] a,double[] c,int[] aix,int ai,final int len,final int n,KahanObject kbuff,KahanPlusSq kplusSq){  sumAggWithFn(a,c,aix,ai,len,n,kbuff,kplusSq);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public List<K> keys(boolean cold,boolean nonResident){  ArrayList<K> keys=new ArrayList<K>();  for (  Segment<K,V> s : segments) {    keys.addAll(s.keys(cold,nonResident));  }  return keys;}  }
class C{  void initFromNode(final Node fromNode,final Node toNode,final double startTime,final RouterPriorityQueue<Node> pendingNodes){  DijkstraNodeData data=getData(fromNode);  visitNode(fromNode,data,pendingNodes,startTime,0,null);}  }
class C{  public static Rectangle computeIntersection(int x,int y,int width,int height,Rectangle dest){  int x1=(x > dest.x) ? x : dest.x;  int x2=((x + width) < (dest.x + dest.width)) ? (x + width) : (dest.x + dest.width);  int y1=(y > dest.y) ? y : dest.y;  int y2=((y + height) < (dest.y + dest.height) ? (y + height) : (dest.y + dest.height));  dest.x=x1;  dest.y=y1;  dest.width=x2 - x1;  dest.height=y2 - y1;  if (dest.width < 0 || dest.height < 0) {    dest.x=dest.y=dest.width=dest.height=0;  }  return dest;}  }
class C{  @After public void tearDown(){  grammar=null;}  }
class C{  public boolean isCleanShutdown(){  return cleanShutdown;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  int docContext=dtm.getDocument();  if (DTM.NULL == docContext)   error(xctxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null);  XObject arg=m_arg0.execute(xctxt);  int argType=arg.getType();  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());  NodeSetDTM nodeSet=nodes.mutableNodeset();  if (XObject.CLASS_NODESET == argType) {    DTMIterator ni=arg.iter();    StringVector usedrefs=null;    int pos=ni.nextNode();    while (DTM.NULL != pos) {      DTM ndtm=ni.getDTM(pos);      String refval=ndtm.getStringValue(pos).toString();      pos=ni.nextNode();      usedrefs=getNodesByID(xctxt,docContext,refval,usedrefs,nodeSet,DTM.NULL != pos);    }  } else   if (XObject.CLASS_NULL == argType) {    return nodes;  } else {    String refval=arg.str();    getNodesByID(xctxt,docContext,refval,null,nodeSet,false);  }  return nodes;}  }
class C{  protected void batch_nearest_neighbor(final int k,CoverTreeNode tree_root,CoverTreeNode query_root,Stack<NeighborList> results) throws Exception {  Stack<Stack<d_node>> cover_sets=new Stack<Stack<d_node>>(100);  Stack<d_node> zero_set=new Stack<d_node>();  MyHeap upper_k=new MyHeap(k);  setter(upper_k,Double.POSITIVE_INFINITY,k);  double treeroot_to_query_dist=Math.sqrt(m_DistanceFunction.distance(query_root.p(),tree_root.p(),Double.POSITIVE_INFINITY));  update(upper_k,treeroot_to_query_dist);  d_node temp=new d_node(treeroot_to_query_dist,tree_root);  getCoverSet(0,cover_sets).push(temp);  if (m_TreeStats != null) {    m_TreeStats.incrPointCount();    if (tree_root.num_children > 0) {      m_TreeStats.incrIntNodeCount();    } else {      m_TreeStats.incrLeafCount();    }  }  internal_batch_nearest_neighbor(k,query_root,cover_sets,zero_set,0,0,upper_k,results);}  }
class C{  @NoInline @Entrypoint static void raiseAbstractMethodError(){  throw new java.lang.AbstractMethodError();}  }
class C{  public String toString(){  try {    return parens(exp1,true) + " " + opString()+ " "+ parens(exp2,false);  } catch (  BadBinaryOpValueExpException ex) {    return "invalid expression";  }}  }
class C{  public void onSaveInstanceState(Bundle outState){  if (activityResultCallback != null) {    String serviceName=activityResultCallback.getServiceName();    outState.putString("callbackService",serviceName);  }}  }
class C{  @RequestMapping(value="/{uname}",method=RequestMethod.GET) @ResponseBody public RestWrapper list(@PathVariable("uname") String username,Principal principal){  RestWrapper restWrapper=null;  try {    List<com.wipro.ats.bdre.md.dao.jpa.UserRoles> jpaUserRolesList=new ArrayList<>();    LOGGER.info("username is " + username + "principal.getname "+ principal.getName());    if (!"cur_user".equals(username))     jpaUserRolesList=userRolesDAO.listByName(username); else {      jpaUserRolesList=userRolesDAO.listByName(principal.getName());    }    List<UserRoles> userRolesList=new ArrayList<UserRoles>();    Integer counter=jpaUserRolesList.size();    for (    com.wipro.ats.bdre.md.dao.jpa.UserRoles userRoles : jpaUserRolesList) {      UserRoles userRole=new UserRoles();      userRole.setUserRoleId(userRoles.getUserRoleId());      userRole.setUsername(userRoles.getUsers().getUsername());      userRole.setRole(userRoles.getRole());      userRole.setCounter(counter);      userRolesList.add(userRole);    }    restWrapper=new RestWrapper(userRolesList,RestWrapper.OK);    LOGGER.info("Records with username:" + username + " selected from  by UserRoles:"+ principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  @Nonnull public BugInstance addString(char c){  add(StringAnnotation.fromRawString(Character.toString(c)));  return this;}  }
class C{  protected void initInfo(int record_id,String value){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (!(record_id == 0)) {    fieldID=record_id;  } else {    if (value != null && value.length() > 0) {      fieldValue.setText(value);    } else {      String aid=Env.getContext(Env.getCtx(),p_WindowNo,"A_Asset_ID");      if (aid != null && aid.length() != 0) {        fieldID=new Integer(aid).intValue();      }      String bp=Env.getContext(Env.getCtx(),p_WindowNo,"C_BPartner_ID");      if (bp != null && bp.length() != 0) {        fBPartner_ID.setValue(new Integer(bp).intValue());      }      String pid=Env.getContext(Env.getCtx(),p_WindowNo,"M_Product_ID");      if (pid != null && pid.length() != 0) {        fProduct_ID.setValue(new Integer(pid).intValue());      }    }  }}  }
class C{  @Override public boolean load(Element shared,Element perNode) throws Exception {  return true;}  }
class C{  public void reset(){  if (mark == -1) {    position=0;  } else {    position=mark;    mark=-1;  }}  }
class C{  public PSPCommunicationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TMember.class) {switch (baseOperationID) {case TypesPackage.TMEMBER___GET_MEMBER_TYPE:      return TypesPackage.TFIELD___GET_MEMBER_TYPE;case TypesPackage.TMEMBER___IS_OPTIONAL:    return TypesPackage.TFIELD___IS_OPTIONAL;case TypesPackage.TMEMBER___IS_READABLE:  return TypesPackage.TFIELD___IS_READABLE;case TypesPackage.TMEMBER___IS_WRITEABLE:return TypesPackage.TFIELD___IS_WRITEABLE;case TypesPackage.TMEMBER___GET_MEMBER_AS_STRING:return TypesPackage.TFIELD___GET_MEMBER_AS_STRING;case TypesPackage.TMEMBER___IS_STATIC:return TypesPackage.TFIELD___IS_STATIC;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Comparable<? super T>>void sort(List<T> list){  Object[] array=list.toArray();  Arrays.sort(array);  int i=0;  ListIterator<T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set((T)array[i++]);  }}  }
class C{  public SnackbarBuilder lowercaseAction(){  actionAllCaps=false;  return this;}  }
class C{  public static VendorModel parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  VendorModel object=new VendorModel();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"VendorModel".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (VendorModel)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","modelId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setModelId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","vendorId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setVendorId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  private AccessorFactory(){}  }
class C{  SpaceEffGraphEdge(){}  }
class C{  public static boolean equals(byte[] a,byte[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length) {    return false;  }  for (int i=0; i < length; i++) {    if (a[i] != a2[i])     return false;  }  return true;}  }
class C{  public static Response createAllocationResponse(Request request,TransportAddress mappedAddress,TransportAddress relayedAddress,int lifetime) throws IllegalArgumentException {  return createAllocationResponse(request,mappedAddress,relayedAddress,null,lifetime);}  }
class C{  @VisibleForTesting protected static void updateBootDiskCapacity(List<AttachedDiskCreateSpec> disks,ImageEntity image,List<Throwable> warnings) throws InvalidVmDisksSpecException, InvalidImageStateException {  for (  AttachedDiskCreateSpec disk : disks) {    if (disk.isBootDisk()) {      if (image.getSize() == null) {        throw new InvalidImageStateException("Image " + image.getId() + " has null size");      }      if (disk.getCapacityGb() != null) {        warnings.add(new InvalidVmDisksSpecException("Specified boot disk capacityGb is not used"));      }      disk.setCapacityGb((int)(image.getSize() / GB_TO_BYTE_CONVERSION_RATIO));      return;    }  }  throw new InvalidVmDisksSpecException("No boot disk is specified in VM create Spec!");}  }
class C{  private static IBean findCachedOrCreateNew(final Class<? extends IBean> theClassType){  IBean cached=LocalBeanCache.INSTANCE.getSerializable(theClassType.getCanonicalName());  if (cached == null) {    try {      cached=theClassType.newInstance();    } catch (    final Exception e) {      throw new RuntimeException("Bean of type " + theClassType + " doesn't have public default constructor, error: "+ e.getMessage());    }  }  return cached;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:21.657 -0500",hash_original_method="4C77C20AE3A5F3CC1A1FB56D13643756",hash_generated_method="3C47A8B9F98A0EC35EE39FB32875C58F") public boolean isCphsVoiceMessageClear(){  return isCphsVoiceMessageIndicatorAddress() && (origBytes[OFFSET_ADDRESS_VALUE] & 0xff) == 0x10;}  }
class C{  public void addToPickingQueue(VisualItem item){  if (pitems.length == psize) {    int capacity=(3 * pitems.length) / 2 + 1;    VisualItem[] q=new VisualItem[capacity];    int[] s=new int[capacity];    System.arraycopy(pitems,0,q,0,psize);    System.arraycopy(pscores,0,s,0,psize);    pitems=q;    pscores=s;  }  pitems[psize]=item;  pscores[psize++]=(sort != null ? sort.score(item) : 0);  psorted=false;}  }
class C{  public StatechartItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public boolean isCurrentSpecial(){  if (!isValidIndex())   return false;  return lcText[pos] == '_' || lcText[pos] == '$' || lcText[pos] == SystemUtil.SYMBOL_EURO || lcText[pos] == SystemUtil.SYMBOL_POUND;}  }
class C{  @Override public Record process(GenericData.Record record,String topic) throws Exception {  GobblinTrackingDistcpNgRecord eventRecord=null;  if (record != null && record.get("namespace") != null && record.get("name") != null && "gobblin.copy.CopyDataPublisher".equals(record.get("namespace").toString())) {    final String name=record.get("name").toString();    if (name.equals("DatasetPublished")) {      final long timestamp=(long)record.get("timestamp");      final Map<String,String> metadata=StringUtil.convertObjectMapToStringMap(record.get("metadata"));      final String jobContext="DistcpNG:" + name;      final String cluster=ClusterUtil.matchClusterCode(metadata.get("clusterIdentifier"));      final String projectName=metadata.get("azkabanProjectName");      final String flowId=metadata.get("azkabanFlowId");      final String jobId=metadata.get("azkabanJobId");      final int execId=StringUtil.parseInteger(metadata.get("azkabanExecId"));      final long upstreamTimestamp=StringUtil.parseLong(metadata.get("upstreamTimestamp"));      final long originTimestamp=StringUtil.parseLong(metadata.get("originTimestamp"));      final String sourcePath=metadata.get("SourcePath");      final String targetPath=metadata.get("TargetPath");      final String dataset=metadata.get("datasetUrn");      String partitionType=null;      String partitionName=null;      if (name.equals("DatasetPublished")) {        partitionName=metadata.get("partition");      } else {        final Matcher m=PathPattern.matcher(targetPath);        if (m.find()) {          partitionType=m.group(3);          partitionName=m.group(4);        }      }      eventRecord=new GobblinTrackingDistcpNgRecord(timestamp,jobContext,cluster,projectName,flowId,jobId,execId);      eventRecord.setDatasetUrn(dataset,partitionType,partitionName);      eventRecord.setEventInfo(upstreamTimestamp,originTimestamp,sourcePath,targetPath);    }  }  return eventRecord;}  }
class C{  public LocaleDateTimeEditor(String dateFormat,boolean allowEmpty){  this.formatter=DateTimeFormat.forPattern(dateFormat);  this.allowEmpty=allowEmpty;}  }
class C{  public static final boolean almostEquals(final double[][] m1,final double[][] m2,final double maxdelta){  if (m1 == m2) {    return true;  }  if (m2 == null) {    return false;  }  if (m1.getClass() != m2.getClass()) {    return false;  }  if (m1.length != m2.length) {    return false;  }  final int columndimension=getColumnDimensionality(m1);  if (columndimension != getColumnDimensionality(m2)) {    return false;  }  for (int i=0; i < m1.length; i++) {    for (int j=0; j < columndimension; j++) {      if (Math.abs(m1[i][j] - m2[i][j]) > maxdelta) {        return false;      }    }  }  return true;}  }
class C{  protected void processUpdates(Queue<DeviceUpdate> updates){  if (updates == null)   return;  DeviceUpdate update=null;  while (null != (update=updates.poll())) {    if (logger.isTraceEnabled()) {      logger.trace("Dispatching device update: {}",update);    }    if (update.change == DeviceUpdate.Change.DELETE) {      deviceSyncManager.removeDevice(update.device);    } else {      deviceSyncManager.storeDevice(update.device);    }    List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();    notifyListeners(listeners,update);  }}  }
class C{  public BufferedImage makeAWTImage(int width,int height) throws TranscoderException {  ThumbnailTranscoder t=new ThumbnailTranscoder();  t.addTranscodingHint(PNGTranscoder.KEY_WIDTH,new Float(width));  t.addTranscodingHint(PNGTranscoder.KEY_HEIGHT,new Float(height));  TranscoderInput input=new TranscoderInput(document);  t.transcode(input,null);  return t.getLastImage();}  }
class C{  @Override protected void internalRender(GL10 gl,PLIRenderer renderer){  PLITexture previewTexture=this.getPreviewTextures()[0], texture=this.getTextures()[0];  boolean textureIsValid=(texture != null && texture.getTextureId(gl) != 0);  if (textureIsValid || (previewTexture != null && previewTexture.getTextureId(gl) != 0)) {    gl.glEnable(GL10.GL_TEXTURE_2D);    int divs;    if (textureIsValid) {      divs=this.getDivs();      gl.glBindTexture(GL10.GL_TEXTURE_2D,texture.getTextureId(gl));      if (previewTexture != null)       this.removePreviewTextureAtIndex(0,true);    } else {      divs=this.getPreviewDivs();      gl.glBindTexture(GL10.GL_TEXTURE_2D,previewTexture.getTextureId(gl));    }    gl.glTranslatef(0.0f,0.0f,-mHalfHeight);    GLUES.gluCylinder(gl,this.getQuadric(),PLConstants.kPanoramaRadius,PLConstants.kPanoramaRadius,mHeight,divs,divs);    gl.glTranslatef(0.0f,0.0f,mHalfHeight);    gl.glDisable(GL10.GL_TEXTURE_2D);  }}  }
class C{  private double logFac(double x){  double result=0;  for (double i=2; i <= x; i++) {    result+=Math.log(i);  }  return result;}  }
class C{  private void createGUIItem(Inventory inventory,int positionInGUI,String level,double statistic,String achName,String achMessage,List<String> rewards,String date,boolean inelligibleSeriesItem){  ItemStack achItem;  if (date != null) {    achItem=new ItemStack(Material.STAINED_CLAY,1,(short)5);  } else   if (Math.round(statistic) > 0) {    achItem=new ItemStack(Material.STAINED_CLAY,1,(short)4);  } else {    achItem=new ItemStack(Material.STAINED_CLAY,1,(short)14);  }  ItemMeta connectionsMeta=achItem.getItemMeta();  if (date != null)   connectionsMeta.setDisplayName(ChatColor.translateAlternateColorCodes('&',StringEscapeUtils.unescapeJava(plugin.getPluginLang().getString("list-achievement-received","&a\u2713&f ")) + achName)); else   if (obfuscateNotReceived || (obfuscateProgressiveAchievements && inelligibleSeriesItem))   connectionsMeta.setDisplayName(ChatColor.translateAlternateColorCodes('&',StringEscapeUtils.unescapeJava(plugin.getPluginLang().getString("list-achievement-not-received","&4\u2717&8 ")) + "&k" + achName.replaceAll(REGEX_PATTERN.pattern(),""))); else   connectionsMeta.setDisplayName(ChatColor.translateAlternateColorCodes('&',StringEscapeUtils.unescapeJava(plugin.getPluginLang().getString("list-achievement-not-received","&4\u2717&8 ") + "&o" + achName.replaceAll(REGEX_PATTERN.pattern(),""))));  ArrayList<String> lore=buildLoreString(achMessage,level,rewards,date,statistic,inelligibleSeriesItem);  connectionsMeta.setLore(lore);  achItem.setItemMeta(connectionsMeta);  inventory.setItem(positionInGUI,achItem);}  }
class C{  protected Vector translateCRFPCoverageBoxes(CRFPCoverageBox[] boxes){  Vector vector=new Vector();  for (int i=0; i < boxes.length; i++) {    CRFPCoverageBox box=boxes[i];    RpfCoverageBox rcb=new RpfCoverageBox();    rcb.nw_lat=box.nw_lat;    rcb.nw_lon=box.nw_lon;    rcb.se_lat=box.se_lat;    rcb.se_lon=box.se_lon;    rcb.subframeLatInterval=box.subframeLatInterval;    rcb.subframeLonInterval=box.subframeLonInterval;    rcb.chartCode=box.chartCode;    rcb.startIndexes=new Point(box.startIndexes.x,box.startIndexes.y);    rcb.endIndexes=new Point(box.endIndexes.x,box.endIndexes.y);    rcb.tocNumber=(int)box.tocNumber;    rcb.entryNumber=(int)box.entryNumber;    rcb.scale=box.scale;    rcb.percentCoverage=box.percentCoverage;    rcb.zone=box.zone;    vector.addElement(rcb);  }  return vector;}  }
class C{  public StrTokenizer(final char[] input){  super();  this.chars=ArrayUtils.clone(input);}  }
class C{  private static boolean testAllInterfaces(int port){  Keeper k=keepAllInterfaces(port);  if (k != null) {    k.release();    return true;  } else {    return false;  }}  }
class C{  public boolean isBranchFile(String filePath){  return filePath.startsWith(myRefsHeadsDirPath);}  }
class C{  private void validateProtection(BlockVirtualPoolProtectionParam protectionParam){  if (protectionParam != null) {    VirtualPoolProtectionRPParam rpParam=protectionParam.getRecoverPoint();    if (rpParam != null) {      if (!CollectionUtils.isEmpty(rpParam.getCopies())) {        throw APIException.badRequests.arrayAffinityPlacementPolicyNotAllowedForRPOrRemoteCopies();      }      ProtectionSourcePolicy rpPolicy=rpParam.getSourcePolicy();      if (rpPolicy != null && (rpPolicy.getJournalSize() != null || rpPolicy.getJournalVarray() != null || rpPolicy.getJournalVpool() != null || rpPolicy.getRemoteCopyMode() != null || rpPolicy.getRpoType() != null || rpPolicy.getRpoValue() != null || rpPolicy.getStandbyJournalVarray() != null || rpPolicy.getStandbyJournalVpool() != null)) {        throw APIException.badRequests.arrayAffinityPlacementPolicyNotAllowedForRPOrRemoteCopies();      }    }    VirtualPoolRemoteMirrorProtectionParam remoteProtection=protectionParam.getRemoteCopies();    if (remoteProtection != null) {      if (!CollectionUtils.isEmpty(remoteProtection.getRemoteCopySettings())) {        throw APIException.badRequests.arrayAffinityPlacementPolicyNotAllowedForRPOrRemoteCopies();      }    }  }}  }
class C{  private static int[] subtract(int[] big,int[] little){  int bigIndex=big.length;  int result[]=new int[bigIndex];  int littleIndex=little.length;  long difference=0;  while (littleIndex > 0) {    difference=(big[--bigIndex] & LONG_MASK) - (little[--littleIndex] & LONG_MASK) + (difference >> 32);    result[bigIndex]=(int)difference;  }  boolean borrow=(difference >> 32 != 0);  while (bigIndex > 0 && borrow)   borrow=((result[--bigIndex]=big[bigIndex] - 1) == -1);  while (bigIndex > 0)   result[--bigIndex]=big[bigIndex];  return result;}  }
class C{  @Reference(authors="Sinnott, R. W.",title="Virtues of the Haversine",booktitle="Sky and telescope, 68-2, 1984") public static double haversineFormulaRad(double lat1,double lon1,double lat2,double lon2){  final double slat=Math.sin((lat1 - lat2) * .5);  final double slon=Math.sin((lon1 - lon2) * .5);  final double a=slat * slat + slon * slon * Math.cos(lat1)* Math.cos(lat2);  return 2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a));}  }
class C{  public void removeOnceFromDamaged(final Collection<Unit> damagedUnits){  m_damaged.removeAll(damagedUnits);}  }
class C{  public void tallyVariant(VcfRecord rec,List<String> sampleNames){  if (mOnlyKnown != null) {    final boolean currentKnown=!VcfRecord.MISSING.equals(rec.getId());    if (currentKnown != mOnlyKnown) {      return;    }  }  if (rec.isFiltered()) {    mTotalFiltered++;    return;  }  mTotalPassed++;  final ArrayList<String> gts=rec.getFormat(VcfUtils.FORMAT_GENOTYPE);  if (gts == null) {    mTotalNoGenotype++;    return;  }  if (VcfUtils.isComplexScored(rec)) {    mComplexCalled++;  }  final String[] alleles=VcfUtils.getAlleleStrings(rec);  final String ref=alleles[0];  final HashSet<Integer> altAlleles=new HashSet<>();  final ArrayList<String> denovo=rec.getFormat(VcfUtils.FORMAT_DENOVO);  final ArrayList<String> somaticstatus=rec.getFormat(VcfUtils.FORMAT_SOMATIC_STATUS);  for (int i=0; i < sampleNames.size(); i++) {    final String sampleName=sampleNames.get(i);    if (mOnlySample == null || mOnlySample.contains(sampleName)) {      final String gtStr=gts.get(i);      final int[] splitGt=VcfUtils.splitGt(gtStr);      if (!VcfUtils.isValidGt(rec,splitGt)) {        Diagnostic.warning("VCF record GT contains allele ID out of range, record: " + rec.toString());        continue;      }      final PerSampleVariantStatistics sampleStats=ensurePerSampleStats(sampleName);      if ((somaticstatus != null) && "2".equals(somaticstatus.get(i))) {        sampleStats.mSomatic++;      }      if ((denovo != null) && "Y".equals(denovo.get(i))) {        sampleStats.mDeNovo++;      }      if (VcfUtils.isPhasedGt(gtStr)) {        sampleStats.mPhased++;      }      if (splitGt.length == 1) {        final int alleleindex=splitGt[0];        if (alleleindex == MISSING_ALLELE) {          sampleStats.mMissingGenotype++;        } else {          tallyNonFiltered(ref,alleles[alleleindex],alleles[alleleindex],Ploidy.HAPLOID,sampleStats);        }      } else       if (splitGt.length == 2) {        if (splitGt[0] == MISSING_ALLELE || splitGt[1] == MISSING_ALLELE) {          if (splitGt[0] == MISSING_ALLELE && splitGt[1] == MISSING_ALLELE) {            sampleStats.mMissingGenotype++;          } else {            sampleStats.mPartialCalls++;          }        } else {          tallyNonFiltered(ref,alleles[splitGt[0]],alleles[splitGt[1]],Ploidy.DIPLOID,sampleStats);        }      } else {        Diagnostic.warning("Unexpected " + splitGt.length + " subfields in fields GT \""+ gtStr+ "\" for sample "+ sampleName+ " in record "+ rec);        sampleStats.mPolyploidCalls++;      }      for (      int alleleId : splitGt) {        if (alleleId != MISSING_ALLELE) {          altAlleles.add(alleleId);        }      }    }  }  if (mShowAlleleCountHistograms) {    mAltAlleleCounts.increment(altAlleles.size());  }}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  private PerformanceVector count(KernelModel model,PerformanceVector performanceCriteria) throws OperatorException {  if (performanceCriteria == null) {    performanceCriteria=new PerformanceVector();  }  this.lastCount=0;  int svNumber=model.getNumberOfSupportVectors();  for (int i=0; i < svNumber; i++) {    SupportVector sv=model.getSupportVector(i);    if (Math.abs(sv.getAlpha()) > 0.0d) {      this.lastCount++;    }  }  EstimatedPerformance svCriterion=new EstimatedPerformance("number_of_support_vectors",lastCount,1,getParameterAsInt(PARAMETER_OPTIMIZATION_DIRECTION) == MDLCriterion.MINIMIZATION);  performanceCriteria.addCriterion(svCriterion);  return performanceCriteria;}  }
class C{  public boolean isFailOnMissingModelValidator(){  Object oo=get_Value(COLUMNNAME_IsFailOnMissingModelValidator);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected BindingImpl<T> annotatedWithInternal(Class<? extends Annotation> annotationType){  checkNotNull(annotationType,"annotationType");  checkNotAnnotated();  return setBinding(binding.withKey(Key.get(this.binding.getKey().getTypeLiteral(),annotationType)));}  }
class C{  public boolean isZoomButtonsVisible(){  return mZoomButtonsVisible;}  }
class C{  public static void saveSerializable(Context context,Object objectToSave,String fileName){  File SettingsFile=new File(Environment.getExternalStorageDirectory(),"/Domoticz/DomoticzSettings.txt");  final String sPath=SettingsFile.getPath().substring(0,SettingsFile.getPath().lastIndexOf("/"));  boolean mkdirsResultIsOk=new File(sPath + "/").mkdirs();  String combinedFilename=sPath + "/" + fileName;  try {    ObjectOutputStream output=new ObjectOutputStream(new FileOutputStream(combinedFilename));    output.writeObject(objectToSave);    output.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private static String findValue(char value){  Set<String> keySet=map.keySet();  Iterator<String> i=keySet.iterator();  String key=i.next();  boolean found=false;  String result=null;  while (i.hasNext() && !found) {    if (map.get(key).charValue() == value) {      found=true;      result=key;    }    key=i.next();  }  return result;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:20.036 -0500",hash_original_method="E957BA4807F1E0C30CA952954DA50144",hash_generated_method="28E9802C1EC3687D9B95807B64B944A8") public static String format(Locale locale,String format,Object... args){  String str=new String();  str.addTaint(format.getTaintInt());  for (  Object arg : args)   str.addTaint(arg.toString().getTaintInt());  return str;}  }
class C{  public static String formatDouble(double number){  return doubleFormat.format(number);}  }
class C{  public static <T>FileWriterFlushConfig<T> newConfig(int cntTuples,long periodMsec,Predicate<T> tuplePredicate){  return new FileWriterFlushConfig<>(cntTuples,periodMsec,tuplePredicate);}  }
class C{  private int adjustAlpha(int color,float factor){  int alpha=Math.round(Color.alpha(color) * factor);  int red=Color.red(color);  int green=Color.green(color);  int blue=Color.blue(color);  return Color.argb(alpha,red,green,blue);}  }
class C{  public void copyToClipboard(){  Action copy;  ActionEvent event;  copy=getActionMap().get("copy");  event=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"");  copy.actionPerformed(event);}  }
class C{  private static URL handleRedirect(URL originalUrl,String location) throws IOException {  if (location == null) {    throw new ProtocolException("Null location redirect");  }  URL url=new URL(originalUrl,location);  String protocol=url.getProtocol();  if (!"https".equals(protocol) && !"http".equals(protocol)) {    throw new ProtocolException("Unsupported protocol redirect: " + protocol);  }  return url;}  }
class C{  public boolean isInitialized(){  return isInitialized;}  }
class C{  public static Angle fromDegrees(double degrees){  return new Angle(degrees,DEGREES_TO_RADIANS * degrees);}  }
class C{  TXEntry(LocalRegion localRegion,KeyInfo key,TXStateInterface tx){  this(localRegion,key,tx,true);}  }
class C{  protected void onSampleRead(MediaChunk mediaChunk,SampleHolder sampleHolder){}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  private int runMetastoreCompareJob(Optional<Path> inputTableListPath,Path outputPath) throws InterruptedException, IOException, ClassNotFoundException, TemplateRenderException {  LOG.info("Starting job for step 1...");  int result;  if (inputTableListPath.isPresent()) {    result=runMetastoreCompareJobWithTextInput(inputTableListPath.get(),outputPath);  } else {    result=runMetastoreCompareJob(outputPath);  }  if (result == 0) {    LOG.info("Job for step 1 finished successfully! To view logging data, run the following " + "commands in Hive: \n\n" + VelocityUtils.renderTemplate(STEP1_HQL_TEMPLATE,velocityContext));  }  return result;}  }
class C{  public boolean renameStringIdEntry(String fromStrId,String toStrId){  if (mNumberToIDMap == null)   return false;  Integer key=mNumberToIDMap.inverse().get(fromStrId);  if (key != null) {    mNumberToIDMap.remove(key);    mNumberToIDMap.put(key,toStrId);    return true;  }  return false;}  }
class C{  public SocketException(String detailMessage){  super(detailMessage);}  }
class C{  public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean itf){  if (api < Opcodes.ASM5) {    if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {      throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces require ASM 5");    }    visitMethodInsn(opcode,owner,name,desc);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc,itf);  }}  }
class C{  public boolean needsCustomLayoutForChildren(){  return false;}  }
class C{  protected void timeoutLinks(){  List<Link> eraseList=new ArrayList<Link>();  Long curTime=System.currentTimeMillis();  boolean unicastTimedOut=false;  lock.writeLock().lock();  try {    Iterator<Entry<Link,LinkInfo>> it=this.links.entrySet().iterator();    while (it.hasNext()) {      Entry<Link,LinkInfo> entry=it.next();      Link lt=entry.getKey();      LinkInfo info=entry.getValue();      if ((info.getUnicastValidTime() != null) && (info.getUnicastValidTime().getTime() + (this.LINK_TIMEOUT * 1000) < curTime)) {        unicastTimedOut=true;        info.setUnicastValidTime(null);      }      if ((info.getMulticastValidTime() != null) && (info.getMulticastValidTime().getTime() + (this.LINK_TIMEOUT * 1000) < curTime)) {        info.setMulticastValidTime(null);      }      if (info.getUnicastValidTime() == null && info.getMulticastValidTime() == null) {        eraseList.add(entry.getKey());      } else       if (unicastTimedOut) {        updates.add(new LDUpdate(lt.getSrc(),lt.getSrcPort(),lt.getDst(),lt.getDstPort(),lt.getLatency(),getLinkType(lt,info),UpdateOperation.LINK_UPDATED));      }    }    if (!eraseList.isEmpty()) {      deleteLinks(eraseList,"LLDP timeout");    }  }  finally {    lock.writeLock().unlock();  }}  }
class C{  @GET public Annotation read(@PathParam(PROJECT_PARAM_NAME) String projectId,@PathParam(ANNOTATION_PARAM_NAME) String annotationId){  return delegate.read(userContext,new AnnotationPK(userContext.getCustomerId(),projectId,annotationId));}  }
class C{  public static void removeNonstaticMethods(SootClass clz){  Iterator<SootMethod> methodIter=clz.getMethods().iterator();  while (methodIter.hasNext()) {    SootMethod method=methodIter.next();    if (!method.isStatic()) {      clz.removeMethod(method);    }  }}  }
class C{  public TDoubleLongHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public Beacon(AnalysisMethod method){  this.method=method;}  }
class C{  public void addEmailDelegate(String user,String delegationEmail) throws IllegalArgumentException, ServiceException, MalformedURLException, IOException {  if (isBlankOrNullString(user) || isBlankOrNullString(delegationEmail)) {    throw new IllegalArgumentException();  }  GenericEntry entry=new GenericEntry();  entry.addProperty(Constants.ADDRESS,delegationEmail);  logger.log(Level.INFO,"Adding " + delegationEmail + " as an email delegate for user "+ user+ " ...");  insertSettings(user,entry,Constants.DELEGATION);  logger.log(Level.INFO,"Successfully added an email delegate.");}  }
class C{  public static Dialog createConfirmationDialog(Context context,String title,String confirmText,String dismissText,Runnable command){  AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(context);  dialogBuilder.setCancelable(true);  dialogBuilder.setIcon(R.drawable.icon);  dialogBuilder.setTitle(title);  dialogBuilder.setInverseBackgroundForced(true);  dialogBuilder.setPositiveButton(confirmText,new DialogCommandWrapper(command));  dialogBuilder.setNegativeButton(dismissText,new DialogCommandWrapper(NO_OP));  return dialogBuilder.create();}  }
class C{  private static final boolean isDecimalType(int type){switch (type) {case Types.BIT:case Types.TINYINT:case Types.SMALLINT:case Types.INTEGER:case Types.BIGINT:case Types.FLOAT:case Types.REAL:case Types.DOUBLE:case Types.NUMERIC:case Types.DECIMAL:    return true;}return false;}  }
class C{  private void shiftFiles(int index){  if (index >= maxFiles - 1) {    new File(makeFile().getAbsolutePath() + "." + index).delete();  } else {    shiftFiles(index + 1);    File srcFile=index == 0 ? makeFile() : new File(makeFile().getAbsolutePath() + "." + index);    File destFile=new File(makeFile().getAbsolutePath() + "." + (index + 1));    srcFile.renameTo(destFile);  }}  }
class C{  public int indexOfTab(String title){  for (int i=0; i < getTabCount(); i++) {    if (getTitleAt(i).equals(title == null ? "" : title)) {      return i;    }  }  return -1;}  }
class C{  public static MHRAttribute forValue(Properties ctx,String value,int C_BPartner_ID,Timestamp startDate,Timestamp endDate){  if (Util.isEmpty(value,true)) {    return null;  }  if (endDate == null) {    return forValue(ctx,value,C_BPartner_ID,startDate);  } else {    int AD_Client_ID=Env.getAD_Client_ID(ctx);    final String whereClause=COLUMNNAME_C_BPartner_ID + "=? AND AD_Client_ID IN (?,?) " + " AND "+ COLUMNNAME_ValidFrom+ "<=? AND "+ COLUMNNAME_ValidTo+ ">=?"+ " AND EXISTS (SELECT 1 FROM HR_Concept c WHERE HR_Attribute.HR_Concept_ID = c.HR_Concept_ID"+ " AND c.Value=?)";    MHRAttribute att=new Query(ctx,Table_Name,whereClause,null).setParameters(new Object[]{C_BPartner_ID,0,AD_Client_ID,startDate,endDate,value}).setOnlyActiveRecords(true).setOrderBy(COLUMNNAME_ValidFrom + " DESC").first();    return att;  }}  }
class C{  protected static final String addEscapes(String str){  StringBuilder retval=new StringBuilder();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public static boolean isImmutable(Object function){  return isImmutableClass(function.getClass());}  }
class C{  private FacetResult drillDown() throws IOException {  DirectoryReader indexReader=DirectoryReader.open(indexDir);  IndexSearcher searcher=new IndexSearcher(indexReader);  SortedSetDocValuesReaderState state=new DefaultSortedSetDocValuesReaderState(indexReader);  DrillDownQuery q=new DrillDownQuery(config);  q.add("Publish Year","2010");  FacetsCollector fc=new FacetsCollector();  FacetsCollector.search(searcher,q,10,fc);  Facets facets=new SortedSetDocValuesFacetCounts(state,fc);  FacetResult result=facets.getTopChildren(10,"Author");  indexReader.close();  return result;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_GUARD_2__MORE_GUARDS_1:    return getMoreGuards_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public MemoryNode(final ConditionNode expression){  super(Lists.newArrayList(expression));}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    System.out.println("Usage: Unzip zipfile");  }  final Path destDir=Paths.get(".");  try (FileSystem zipFileSystem=FileSystems.newFileSystem(Paths.get(args[0]),null)){    Path top=zipFileSystem.getPath("/");    Files.walk(top).skip(1).forEach(null);  } catch (  UncheckedIOException|IOException e) {    e.printStackTrace();    System.exit(1);  }}  }
class C{  public AlchemyService(String apiKey){  this();  setApiKey(apiKey);}  }
class C{  public void testReadZString() throws Exception {  Random rnd=new Random();  int buffSize=0;  byte[] delim=new byte[]{0};  List<String> strs=new ArrayList<>(50);  for (int i=0; i < 50; i++) {    int len=rnd.nextInt(128) + 1;    buffSize+=len + delim.length;    StringBuilder sb=new StringBuilder(len);    for (int j=0; j < len; j++)     sb.append((char)(rnd.nextInt(26) + 'a'));    strs.add(sb.toString());  }  ByteBuffer buff=ByteBuffer.allocate(buffSize);  for (  String str : strs) {    buff.put(str.getBytes(ASCII));    buff.put(delim);  }  buff.flip();  byte[] msg;  GridNioDelimitedBuffer delimBuff=new GridNioDelimitedBuffer(delim);  List<String> res=new ArrayList<>(strs.size());  while ((msg=delimBuff.read(buff)) != null)   res.add(new String(msg,ASCII));  assertEquals(strs,res);}  }
class C{  public void testSetScale(){  BigDecimal x1=new BigDecimal(1.23400);  BigDecimal x2=x1.setScale(75);  assertEquals(0,x1.compareTo(x2));  assertEquals(0,x2.compareTo(x1));  x1.precision();  assertEquals(0,x1.compareTo(x2));  assertEquals(0,x2.compareTo(x1));  x2.precision();  assertEquals(0,x1.compareTo(x2));  assertEquals(0,x2.compareTo(x1));}  }
class C{  public static ColladaMeshShape createLineMesh(List<ColladaLines> geometries,ColladaBindMaterial bindMaterial){  ColladaMeshShape shape=new ColladaMeshShape(geometries);  shape.bindMaterial=bindMaterial;  shape.elementType=GL.GL_LINES;  shape.vertsPerShape=2;  return shape;}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    int s=t.getSort();    if (s == Type.OBJECT) {      return newClassItem(t.getInternalName());    } else     if (s == Type.METHOD) {      return newMethodTypeItem(t.getDescriptor());    } else {      return newClassItem(t.getDescriptor());    }  } else   if (cst instanceof Handle) {    Handle h=(Handle)cst;    return newHandleItem(h.tag,h.owner,h.name,h.desc,h.itf);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  public void stop(){  if (onSyncRequestSubscriber != null) {    onSyncRequestSubscriber.unsubscribe();  }  if (onFdEventSubscriber != null) {    onFdEventSubscriber.unsubscribe();  }  if (onGossipRequestSubscriber != null) {    onGossipRequestSubscriber.unsubscribe();  }  if (onSyncAckResponseSubscriber != null) {    onSyncAckResponseSubscriber.unsubscribe();  }  if (syncTask != null) {    syncTask.cancel(true);  }  for (  String memberId : removeMemberTasks.keySet()) {    ScheduledFuture<?> future=removeMemberTasks.get(memberId);    if (future != null) {      future.cancel(true);    }  }  removeMemberTasks.clear();  executor.shutdown();  subject.onCompleted();}  }
class C{  public void addActionListener(ActionListener a){  m_ColourChangeListeners.add(a);}  }
class C{  private void launchIntent(Intent intent){  if (intent == null) {    return;  }  Log.d(LOG_TAG,"launching " + intent);  try {    getContext().startActivity(intent);    dismiss();  } catch (  RuntimeException ex) {    Log.e(LOG_TAG,"Failed launch activity: " + intent,ex);  }}  }
class C{  public static String[] wordWrap(String str,int firstLineSize,int nonFirstLineSize){  String[] lines=wordWrap(str,firstLineSize);  if (lines.length > 1 && firstLineSize != nonFirstLineSize) {    String notFirstLinesString=StringUtils.join(lines," ",1,lines.length);    String[] nonFirstLines=wordWrap(notFirstLinesString,nonFirstLineSize);    List<String> nonFirstLineCollection=Arrays.asList(nonFirstLines);    ArrayList<String> allLines=new ArrayList<String>();    allLines.add(lines[0]);    allLines.addAll(nonFirstLineCollection);    lines=allLines.toArray(lines);  }  return lines;}  }
class C{  public boolean generateSelected(){  return generateSelected;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public ClientInvocation goBackNClientsInvocation(HttpServletRequest request,int nClients){  ClientInvocation cli=null;  for (int i=0; i < nClients; i++) {    boolean deleteForm=(i < nClients - 1);    cli=popLastClientInvocation(request,deleteForm);  }  return cli;}  }
class C{  public static List<String> readLines(InputStream input,Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return readLines(reader);}  }
class C{  IoBuffer fetchOutNetBuffer(){  IoBuffer answer=outNetBuffer;  if (answer == null) {    return emptyBuffer;  }  outNetBuffer=null;  return answer.shrink();}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  return inflater.inflate(R.layout.fragment_course_unit_empty,container,false);}  }
class C{  protected static String[] uniqueExclusiveSort(String[] values,String[] removeValues){  Set<String> unique=new HashSet<String>();  unique.addAll(Arrays.asList(values));  for (  String removeValue : removeValues) {    unique.remove(removeValue);  }  String[] uniqueArr=unique.toArray(new String[unique.size()]);  Arrays.sort(uniqueArr);  return uniqueArr;}  }
class C{  public EventReader provide(Reader source) throws Exception {  XmlPullParser parser=factory.newPullParser();  if (source != null) {    parser.setInput(source);  }  return new PullReader(parser);}  }
class C{  public static boolean isValidInstance(Resource instanceResources,long minInstanceRam,Resource maxContainerResources,int paddingPercentage){  if (instanceResources.getRam() < minInstanceRam) {    LOG.severe(String.format("Instance requires %d MB ram which is less than the minimum %d MB ram per instance",instanceResources.getRam(),minInstanceRam / Constants.MB));    return false;  }  long instanceRam=PackingUtils.increaseBy(instanceResources.getRam(),paddingPercentage);  if (instanceRam > maxContainerResources.getRam()) {    LOG.severe(String.format("This instance requires containers of at least %d MB ram. The current max container" + "size is %d MB",instanceRam,maxContainerResources.getRam()));    return false;  }  double instanceCpu=Math.round(PackingUtils.increaseBy(instanceResources.getCpu(),paddingPercentage));  if (instanceCpu > maxContainerResources.getCpu()) {    LOG.severe(String.format("This instance requires containers with at least %s cpu cores. The current max container" + "size is %s cores",instanceCpu > maxContainerResources.getCpu(),maxContainerResources.getCpu()));    return false;  }  long instanceDisk=PackingUtils.increaseBy(instanceResources.getDisk(),paddingPercentage);  if (instanceDisk > maxContainerResources.getDisk()) {    LOG.severe(String.format("This instance requires containers of at least %d MB disk. The current max container" + "size is %d MB",instanceDisk,maxContainerResources.getDisk()));    return false;  }  return true;}  }
class C{  public static String toStringExclude(Object object,Collection<?> excludeFieldNames){  return toStringExclude(object,toNoNullStringArray(excludeFieldNames));}  }
class C{  protected final void assertConfigs(final String solrconfigFile,final String schemaFile,final String solrHome,final String errString) throws Exception {  ignoreException(Pattern.quote(errString));  try {    if (null == solrHome) {      initCore(solrconfigFile,schemaFile);    } else {      initCore(solrconfigFile,schemaFile,solrHome);    }    CoreContainer cc=h.getCoreContainer();    for (    Map.Entry<String,CoreContainer.CoreLoadFailure> entry : cc.getCoreInitFailures().entrySet()) {      if (matches(entry.getValue().exception,errString))       return;    }  } catch (  Exception e) {    if (matches(e,errString))     return;    throw e;  } finally {    deleteCore();    resetExceptionIgnores();  }  fail("Did not encounter any exception from: " + solrconfigFile + " using "+ schemaFile);}  }
class C{  private static String map(int i){  if (i < 10)   return Integer.toString(i); else {    char c=(char)('a' + i - 10);    return Character.toString(c);  }}  }
class C{  public void addActionListener(ActionListener l){  if (l != null)   listenerList.add(ActionListener.class,l);}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  protected double computeAverageLocalConditionalEntropyOfObservations() throws Exception {  double meanConditionalEntropy=0;  for (int b=0; b < base; b++) {    double pOfB=(double)entCalcForEachDiscrete[b].getNumObservations() / (double)totalObservations;    meanConditionalEntropy+=pOfB * entCalcForEachDiscrete[b].computeAverageLocalOfObservations();  }  return meanConditionalEntropy;}  }
class C{  public void denyPermission(final TypePermission permission){  addPermission(new NoPermission(permission));}  }
class C{  public DAWGTestResultSetParseException(Throwable cause){  super(cause);}  }
class C{  private boolean holdsExpliciteExtends(PolyfillValidationState state){  final ParameterizedTypeRef filledTypeRef=state.n4Class.getSuperClassRef();  if (filledTypeRef == null) {    final String msg=getMessageForCLF_POLYFILL_EXTEND_MISSING(state.name);    addIssue(state,msg,CLF_POLYFILL_EXTEND_MISSING);    return false;  }  return true;}  }
class C{  public void invalidate(){  this.valid=false;}  }
class C{  public void testAddNull(){  try {    LinkedBlockingDeque q=new LinkedBlockingDeque(1);    q.add(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public void normalize(){  StringBuilder sb=new StringBuilder();  for (  String v : values) {    sb.append(v);  }  values.clear();  values.add(sb.toString());  compacted=false;}  }
class C{  private BenchmarkResult measure(Callable<Integer> callable){  final double NANOS_PER_MS=1000000;  try {    List<Double> times=new ArrayList<>();    for (int i=0; i < warmup + rounds; i++) {      final long start=System.nanoTime();      guard=callable.call().intValue();      times.add((System.nanoTime() - start) / NANOS_PER_MS);    }    return new BenchmarkResult(times,warmup,rounds);  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException(e);  }}  }
class C{  public static void printList(Object[] list){  for (int i=0; i < list.length; i++) {    System.out.print(list[i] + " ");  }  System.out.println();}  }
class C{  private int returnNextNode(int n){  return n;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void notifyClients(InternalCacheEvent event,ClientUpdateMessage cmsg){  CacheClientNotifier instance=ccnSingleton;  if (instance != null) {    instance.singletonNotifyClients(event,cmsg);  }}  }
class C{  public static DLSN deserializeBytes(byte[] data){  ByteBuffer bb=ByteBuffer.wrap(data);  byte version=bb.get();  if (VERSION0 == version) {    if (VERSION0_LEN != data.length) {      throw new IllegalArgumentException("Invalid version zero DLSN " + Hex.encodeHexString(data));    }  } else   if (VERSION1 == version) {    if (VERSION1_LEN != data.length) {      throw new IllegalArgumentException("Invalid version one DLSN " + Hex.encodeHexString(data));    }  } else {    throw new IllegalArgumentException("Invalid DLSN : version = " + version + ", "+ Hex.encodeHexString(data));  }  return new DLSN(bb.getLong(),bb.getLong(),bb.getLong());}  }
class C{  public List<VirtualArrayRestRep> findByConnectedHost(HostRestRep host,ResourceFilter<VirtualArrayRestRep> filter){  return findByConnectedHost(ResourceUtils.id(host),filter);}  }
class C{  private static byte[] mapPrivilege(String firebirdPrivilege){  return PRIVILEGE_MAPPING.get(firebirdPrivilege);}  }
class C{  public PartitionLocator find(byte[] key){  return find_with_indexOf(key);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.EXTRA_CODE___EXTRA_CODE_1:    return getExtraCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void onHttpTransferPausedBySystem(){  removeSession();}  }
class C{  private Table table(){  return this.region.table("domains");}  }
class C{  public void onEachReplicaSet(Consumer<ReplicaSet> function){  this.replicaSetsByName.values().forEach(function);  this.nonReplicaSets.forEach(function);}  }
class C{  public void kick(UserHostmask user,String reason){  if (user == null)   throw new IllegalArgumentException("Can't kick null user");  bot.sendRaw().rawLine("KICK " + channel.getName() + " "+ user.getNick()+ " :"+ reason);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:57.235 -0500",hash_original_method="A46A7B47E3DFA1A951D01F8316BDCB63",hash_generated_method="491CC6FAE4970D8E92826D7160056A71") void connectionDisconnected(CdmaConnection conn){  if (state != State.DISCONNECTED) {    boolean hasOnlyDisconnectedConnections=true;    for (int i=0, s=connections.size(); i < s; i++) {      if (connections.get(i).getState() != State.DISCONNECTED) {        hasOnlyDisconnectedConnections=false;        break;      }    }    if (hasOnlyDisconnectedConnections) {      state=State.DISCONNECTED;    }  }}  }
class C{  public final void handleAdeInternalException(AdeInternalException e){  debugAssist(e);  final int return_value=messageConvertReturnValue(e.getMessage(),102);  systemExitAssist(return_value);}  }
class C{  public boolean verifyElementId(String id){  boolean found=false;  try {    appiumDriver.findElementById(id);    found=true;  } catch (  Exception e) {  }  return found;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_RES_VIEW_FORMAT_NONE:    return "CU_RES_VIEW_FORMAT_NONE";case CU_RES_VIEW_FORMAT_UINT_1X8:  return "CU_RES_VIEW_FORMAT_UINT_1X8";case CU_RES_VIEW_FORMAT_UINT_2X8:return "CU_RES_VIEW_FORMAT_UINT_2X8";case CU_RES_VIEW_FORMAT_UINT_4X8:return "CU_RES_VIEW_FORMAT_UINT_4X8";case CU_RES_VIEW_FORMAT_SINT_1X8:return "CU_RES_VIEW_FORMAT_SINT_1X8";case CU_RES_VIEW_FORMAT_SINT_2X8:return "CU_RES_VIEW_FORMAT_SINT_2X8";case CU_RES_VIEW_FORMAT_SINT_4X8:return "CU_RES_VIEW_FORMAT_SINT_4X8";case CU_RES_VIEW_FORMAT_UINT_1X16:return "CU_RES_VIEW_FORMAT_UINT_1X16";case CU_RES_VIEW_FORMAT_UINT_2X16:return "CU_RES_VIEW_FORMAT_UINT_2X16";case CU_RES_VIEW_FORMAT_UINT_4X16:return "CU_RES_VIEW_FORMAT_UINT_4X16";case CU_RES_VIEW_FORMAT_SINT_1X16:return "CU_RES_VIEW_FORMAT_SINT_1X16";case CU_RES_VIEW_FORMAT_SINT_2X16:return "CU_RES_VIEW_FORMAT_SINT_2X16";case CU_RES_VIEW_FORMAT_SINT_4X16:return "CU_RES_VIEW_FORMAT_SINT_4X16";case CU_RES_VIEW_FORMAT_UINT_1X32:return "CU_RES_VIEW_FORMAT_UINT_1X32";case CU_RES_VIEW_FORMAT_UINT_2X32:return "CU_RES_VIEW_FORMAT_UINT_2X32";case CU_RES_VIEW_FORMAT_UINT_4X32:return "CU_RES_VIEW_FORMAT_UINT_4X32";case CU_RES_VIEW_FORMAT_SINT_1X32:return "CU_RES_VIEW_FORMAT_SINT_1X32";case CU_RES_VIEW_FORMAT_SINT_2X32:return "CU_RES_VIEW_FORMAT_SINT_2X32";case CU_RES_VIEW_FORMAT_SINT_4X32:return "CU_RES_VIEW_FORMAT_SINT_4X32";case CU_RES_VIEW_FORMAT_FLOAT_1X16:return "CU_RES_VIEW_FORMAT_FLOAT_1X16";case CU_RES_VIEW_FORMAT_FLOAT_2X16:return "CU_RES_VIEW_FORMAT_FLOAT_2X16";case CU_RES_VIEW_FORMAT_FLOAT_4X16:return "CU_RES_VIEW_FORMAT_FLOAT_4X16";case CU_RES_VIEW_FORMAT_FLOAT_1X32:return "CU_RES_VIEW_FORMAT_FLOAT_1X32";case CU_RES_VIEW_FORMAT_FLOAT_2X32:return "CU_RES_VIEW_FORMAT_FLOAT_2X32";case CU_RES_VIEW_FORMAT_FLOAT_4X32:return "CU_RES_VIEW_FORMAT_FLOAT_4X32";case CU_RES_VIEW_FORMAT_UNSIGNED_BC1:return "CU_RES_VIEW_FORMAT_UNSIGNED_BC1";case CU_RES_VIEW_FORMAT_UNSIGNED_BC2:return "CU_RES_VIEW_FORMAT_UNSIGNED_BC2";case CU_RES_VIEW_FORMAT_UNSIGNED_BC3:return "CU_RES_VIEW_FORMAT_UNSIGNED_BC3";case CU_RES_VIEW_FORMAT_UNSIGNED_BC4:return "CU_RES_VIEW_FORMAT_UNSIGNED_BC4";case CU_RES_VIEW_FORMAT_SIGNED_BC4:return "CU_RES_VIEW_FORMAT_SIGNED_BC4";case CU_RES_VIEW_FORMAT_UNSIGNED_BC5:return "CU_RES_VIEW_FORMAT_UNSIGNED_BC5";case CU_RES_VIEW_FORMAT_SIGNED_BC5:return "CU_RES_VIEW_FORMAT_SIGNED_BC5";case CU_RES_VIEW_FORMAT_UNSIGNED_BC6H:return "CU_RES_VIEW_FORMAT_UNSIGNED_BC6H";case CU_RES_VIEW_FORMAT_SIGNED_BC6H:return "CU_RES_VIEW_FORMAT_SIGNED_BC6H";case CU_RES_VIEW_FORMAT_UNSIGNED_BC7:return "CU_RES_VIEW_FORMAT_UNSIGNED_BC7";}return "INVALID CUresourceViewFormat: " + n;}  }
class C{  @Override public org.mmtk.harness.scheduler.Lock newLock(String name){  Trace.trace(Item.SCHEDULER,"Creating new lock %s",name);  return new RawLock(this,name);}  }
class C{  @Entrypoint static void unexpectedAbstractMethodCall(){  VM.sysWrite("RuntimeEntrypoints.unexpectedAbstractMethodCall\n");  throw new AbstractMethodError();}  }
class C{  public void validate() throws IllegalStateException {  for (int u=0; u < numVertices; u++) {    VertexStructure struct=info[u];    if (struct.forward.isEmpty()) {      continue;    }    Node<EdgeInfo> n=struct.forward.head();    while (n != null) {      EdgeInfo ei=(EdgeInfo)n.value();      int flow=ei.flow;      int v=ei.start;      assert (flow <= ei.capacity) : "Flow of edge (" + u + ","+ v+ ") is greater than capacity:"+ flow+ ">"+ ei.capacity;      EdgeInfo rei=edge(v,u);      if (rei != null) {        assert (flow == -rei.flow) : "Flow of edge (" + u + ","+ v+ ") is not the opposite of edge ("+ v+ ","+ u+ ")";      }      n=n.next();    }  }  for (int u=0; u < numVertices; u++) {    if (u == sourceIndex || u == sinkIndex) {      continue;    }    VertexStructure struct=info[u];    int totalSum=0;    Node<EdgeInfo> n=struct.forward.head();    while (n != null) {      totalSum+=n.value().flow;      n=n.next();    }    n=struct.backward.head();    while (n != null) {      totalSum-=n.value().flow;      n=n.next();    }    assert (totalSum == 0) : "Flow conservation not maintained by vertex " + u;  }}  }
class C{  public static Complex add(Complex first,Complex second){  return new Complex(first.left() + second.left(),first.right() + second.right());}  }
class C{  public String generateClassNameFor(Class<?> targetClass,boolean vmFormat){  String name=targetClass.getName();  if (targetClass.isArray()) {    int idx=name.lastIndexOf('[');    int bracketCount=idx + 1;    int semiIdx=name.indexOf(';');    if (semiIdx == -1) {      name=PRIM_MAP.get(name.charAt(idx + 1));    } else {      name=name.substring(idx + 2,semiIdx);    }    name+="Array" + bracketCount + 'd';  }  Matcher m=UNDERSCORE_PATTERN.matcher(name);  name=m.replaceAll("$0_");  name=name.replace('.','_');  if (vmFormat) {    return getVMClassName(templateClass).replace("XXXX",name);  } else {    return templateClass.getName().replace("XXXX",name);  }}  }
class C{  RacingThreadsTest(String name,int n_threads,int n_loops,int n_secs){  TEST_NAME=name;  N_THREADS=n_threads;  N_LOOPS=n_loops;  N_SECS=n_secs;  finishBarrier=new CyclicBarrier(N_THREADS + 1);  resetBarrier=new CyclicBarrier(N_THREADS + 1);  startBarrier=new CyclicBarrier(N_THREADS + 1);}  }
class C{  public EnumParameter(OptionID optionID,Class<E> enumClass,boolean optional){  super(optionID,optional);  this.enumClass=enumClass;}  }
class C{  private void validate7ZipSettings(){  boolean flag=controller.is7ZipEnabled();  sevenZipEnableBox.setSelected(flag);  sevenZipLabel.setEnabled(flag);  sevenZipPathField.setEnabled(flag);  sevenZipSearchButton.setEnabled(flag);}  }
class C{  public void enableCGCopy(FunctionalAPIImpl impl,ConsistencyGroupCopyUID cgCopy,boolean waitForLinkState,ImageAccessMode accessMode,String bookmarkName,Date apitTime) throws RecoverPointException {  String cgCopyName=NAME_UNKNOWN;  String cgName=NAME_UNKNOWN;  Snapshot snapshotToEnable=null;  try {    cgCopyName=impl.getGroupCopyName(cgCopy);    cgName=impl.getGroupName(cgCopy.getGroupUID());    if (waitForLinkState) {      waitForCGCopyLinkState(impl,cgCopy,RecoverPointImageManagementUtils.getPipeActiveState(impl,cgCopy.getGroupUID()));    } else {      logger.info("Not waiting on any link states, proceeding with the operation");    }    if (bookmarkName == null) {      if (apitTime == null) {        logger.info("Enable most recent image on RP CG: " + cgName + " for CG copy: "+ cgCopyName);        int numRetries=0;        boolean foundSnap=false;        while (!foundSnap && numRetries++ < MAX_RETRIES) {          ConsistencyGroupCopySnapshots copySnapshots=impl.getGroupCopySnapshots(cgCopy);          Snapshot newestSnapshot=null;          for (          Snapshot snapshot : copySnapshots.getSnapshots()) {            if (newestSnapshot == null) {              newestSnapshot=snapshot;            } else {              if (snapshot.getClosingTimeStamp().getTimeInMicroSeconds() > newestSnapshot.getClosingTimeStamp().getTimeInMicroSeconds()) {                newestSnapshot=snapshot;              }            }          }          if (newestSnapshot != null) {            snapshotToEnable=newestSnapshot;            bookmarkName=newestSnapshot.getDescription();            if (bookmarkName.length() == 0) {              bookmarkName="Internal";            }          }          if (snapshotToEnable == null) {            logger.info("Did not find most recent snapshot. Sleep 15 seconds and retry");            Thread.sleep(15000);          } else {            foundSnap=true;          }        }      } else {        Calendar apitTimeCal=Calendar.getInstance();        apitTimeCal.setTime(apitTime);        Calendar apitTimeStart=Calendar.getInstance();        apitTimeStart.setTime(apitTime);        apitTimeStart.add(Calendar.MINUTE,-SNAPSHOT_QUERY_WINDOW_BUFFER);        Calendar apitTimeEnd=Calendar.getInstance();        apitTimeEnd.setTime(apitTime);        apitTimeEnd.add(Calendar.MINUTE,SNAPSHOT_QUERY_WINDOW_BUFFER);        long apitTimeInMicroSeconds=apitTimeCal.getTimeInMillis() * numMicroSecondsInMilli;        long apitTimeStartInMicroSeconds=apitTimeStart.getTimeInMillis() * numMicroSecondsInMilli;        long apitTimeEndInMicroSeconds=apitTimeEnd.getTimeInMillis() * numMicroSecondsInMilli;        logger.info(String.format("Request to enable a PiT image on RP CG: %s for CG copy: %s. The PiT requested is %s which evaluates to %s microseconds.",cgName,cgCopyName,apitTime,apitTimeInMicroSeconds));        logger.info(String.format("Building snapshot query window between %s and %s.  Evaluates to a microsecond window between %s and %s.",apitTimeStart.getTime(),apitTimeEnd.getTime(),apitTimeStartInMicroSeconds,apitTimeEndInMicroSeconds));        RecoverPointTimeStamp startTime=new RecoverPointTimeStamp();        startTime.setTimeInMicroSeconds(apitTimeStartInMicroSeconds);        RecoverPointTimeStamp endTime=new RecoverPointTimeStamp();        endTime.setTimeInMicroSeconds(apitTimeEndInMicroSeconds);        TimeFrame timeFrame=new TimeFrame();        timeFrame.setStartTime(startTime);        timeFrame.setEndTime(endTime);        ConsistencyGroupCopySnapshots copySnapshots=impl.getGroupCopySnapshotsForTimeFrameAndName(cgCopy,timeFrame,null);        if (copySnapshots != null && copySnapshots.getSnapshots() != null && copySnapshots.getSnapshots().isEmpty()) {          logger.info(String.format("Determined that the protection window is between %s and %s.",copySnapshots.getEarliest().getTimeInMicroSeconds(),copySnapshots.getLatest().getTimeInMicroSeconds()));          if (apitTimeInMicroSeconds < copySnapshots.getEarliest().getTimeInMicroSeconds()) {            logger.info("The specified point-in-time is before the start of the protection window.  As a result, returning the first snapshot in the protection window.");            startTime.setTimeInMicroSeconds(copySnapshots.getEarliest().getTimeInMicroSeconds());            timeFrame.setStartTime(startTime);            timeFrame.setEndTime(startTime);            copySnapshots=impl.getGroupCopySnapshotsForTimeFrameAndName(cgCopy,timeFrame,null);            snapshotToEnable=copySnapshots.getSnapshots().get(0);          } else           if (apitTimeInMicroSeconds > copySnapshots.getLatest().getTimeInMicroSeconds()) {            logger.info("The specified point-in-time is after the end of the protection window.  As a result, returning the most current snapshot in the protection window.");            startTime.setTimeInMicroSeconds(copySnapshots.getLatest().getTimeInMicroSeconds());            timeFrame.setStartTime(startTime);            timeFrame.setEndTime(startTime);            copySnapshots=impl.getGroupCopySnapshotsForTimeFrameAndName(cgCopy,timeFrame,null);            snapshotToEnable=copySnapshots.getSnapshots().get(0);          } else {            int queryAttempt=1;            while (queryAttempt <= NUM_SNAPSHOT_QUERY_ATTEMPTS) {              apitTimeStart.add(Calendar.MINUTE,-SNAPSHOT_QUERY_WINDOW_BUFFER);              apitTimeEnd.add(Calendar.MINUTE,SNAPSHOT_QUERY_WINDOW_BUFFER);              apitTimeStartInMicroSeconds=apitTimeStart.getTimeInMillis() * numMicroSecondsInMilli;              apitTimeEndInMicroSeconds=apitTimeEnd.getTimeInMillis() * numMicroSecondsInMilli;              startTime.setTimeInMicroSeconds(apitTimeStartInMicroSeconds);              endTime.setTimeInMicroSeconds(apitTimeEndInMicroSeconds);              timeFrame.setStartTime(startTime);              timeFrame.setEndTime(endTime);              logger.info(String.format("The PiT falls within the protection window but no results are returned. Attempt %s of %s. Expanding the query window by %s minute(s) in both directions to [%s - %s].",queryAttempt,NUM_SNAPSHOT_QUERY_ATTEMPTS,SNAPSHOT_QUERY_WINDOW_BUFFER,apitTimeStartInMicroSeconds,apitTimeEndInMicroSeconds));              copySnapshots=impl.getGroupCopySnapshotsForTimeFrameAndName(cgCopy,timeFrame,null);              if (!copySnapshots.getSnapshots().isEmpty()) {                snapshotToEnable=findPiTSnapshot(copySnapshots,apitTimeInMicroSeconds);                break;              }              queryAttempt++;            }          }        } else {          snapshotToEnable=findPiTSnapshot(copySnapshots,apitTimeInMicroSeconds);        }      }    } else {      logger.info("Enable bookmark image " + bookmarkName + " on RP CG: "+ cgName+ " for CG copy: "+ cgCopyName);      int numRetries=0;      boolean foundSnap=false;      while (!foundSnap && numRetries++ < MAX_RETRIES) {        ConsistencyGroupCopySnapshots copySnapshots=impl.getGroupCopySnapshots(cgCopy);        for (        Snapshot snapItem : copySnapshots.getSnapshots()) {          if (snapItem.getDescription() != null && !snapItem.getDescription().isEmpty()) {            logger.info("Look at description: " + snapItem.getDescription());            if (snapItem.getDescription().equals(bookmarkName)) {              foundSnap=true;              snapshotToEnable=snapItem;              break;            }          }        }        if (!foundSnap) {          logger.info("Did not find snapshot to enable. Sleep 15 seconds and retry");          Thread.sleep(15000);        }      }    }    if (snapshotToEnable == null) {      throw RecoverPointException.exceptions.failedToFindBookmarkOrAPIT();    }    String bookmarkDate=new java.util.Date(snapshotToEnable.getClosingTimeStamp().getTimeInMicroSeconds() / numMicroSecondsInMilli).toString();    logger.info("Enable snapshot image: " + bookmarkName + " of time "+ bookmarkDate+ " on CG Copy "+ cgCopyName+ " for CG name "+ cgName);    impl.enableImageAccess(cgCopy,snapshotToEnable,accessMode,ImageAccessScenario.NONE);    if (waitForEnableToComplete(impl,cgCopy,accessMode,null)) {      logger.info("Wait for image to be in correct mode");      waitForCGCopyState(impl,cgCopy,false,accessMode);    }  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.failedToEnableCopy(cgCopyName,cgName,e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedToEnableCopy(cgCopyName,cgName,e);  }catch (  InterruptedException e) {    throw RecoverPointException.exceptions.failedToEnableCopy(cgCopyName,cgName,e);  }}  }
class C{  public ChangePropertiesCommand(final TFSRepository repository,final ItemProperties[] properties){  this(repository,properties,RecursionType.NONE,LockLevel.UNCHANGED,PendChangesOptions.NONE,null);}  }
class C{  public void init(){  setSizeUndefined();  createRequiredComponents();  buildLayout();}  }
class C{  @Override public void beforeFirst() throws SQLException {  if (autoClose) {    throw DbException.get(ErrorCode.RESULT_SET_NOT_SCROLLABLE);  }  rowId=-1;  if (source != null) {    source.reset();  }}  }
class C{  @Override public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals("progress")) {    int progress=(Integer)evt.getNewValue();    progressBar.setValue(progress);  }}  }
class C{  public static void putLongValue(ContentResolver cr,long providerId,String name,long value){  ContentValues v=new ContentValues(3);  v.put(PROVIDER,providerId);  v.put(NAME,name);  v.put(VALUE,value);  cr.insert(CONTENT_URI,v);}  }
class C{  protected byte[] stringToByte_8859_1(String str) throws SaslException {  char[] buffer=str.toCharArray();  try {    if (useUTF8) {      for (int i=0; i < buffer.length; i++) {        if (buffer[i] > '\u00FF') {          return str.getBytes("UTF8");        }      }    }    return str.getBytes("8859_1");  } catch (  UnsupportedEncodingException e) {    throw new SaslException("cannot encode string in UTF8 or 8859-1 (Latin-1)",e);  }}  }
class C{  public final void testGetOtherPrimeInfo01(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(checkOtherPrimeInfo(ks.getOtherPrimeInfo()));}  }
class C{  public Polygon2D(){  points=new ArrayList<Point2D>();}  }
class C{  public OverScroller(Context context,Interpolator interpolator){  this(context,interpolator,true);}  }
class C{  public static void restorePanelParent(HTMLPanel panel,HTMLPanelInfo panelInfo){  if (panelInfo.origParent != null) {    panelInfo.origParent.insertBefore(panel.getElement(),panelInfo.origSibling);  } else {    hiddenDiv.removeChild(panel.getElement());  }}  }
class C{  private static String prepareInstruction(String inst){  String tmp=inst;  tmp=tmp.replaceAll(Lop.OPERAND_DELIMITOR," ");  tmp=tmp.replaceAll(Lop.DATATYPE_PREFIX,".");  tmp=tmp.replaceAll(Lop.INSTRUCTION_DELIMITOR,", ");  return tmp;}  }
class C{  @Override public void onDestroy(){  if (mWebView != null) {    mWebView.destroy();    mWebView=null;  }  super.onDestroy();}  }
class C{  public TraitInformation(boolean isAnimatable,int type){  this.isAnimatable=isAnimatable;  this.type=type;  this.percentageInterpretation=-1;}  }
class C{  public static int EKEYEXPIRED(){  return 127;}  }
class C{  public void convertToNumber() throws IOException {  writeCode(CONVERT_TO_NUMBER);}  }
class C{  public String toString(){  String s="CertificatePolicyId: [" + id.toString() + "]\n";  return (s);}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return this.getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected void doFunction(float[] inputs,int inputOffset,float[] outputs,int outputOffset){  float input=inputs[inputOffset];  for (int i=0; i < getNumOutputs(); i++) {    outputs[i + outputOffset]=getC0(i) + (float)(Math.pow(input,getN()) * (getC1(i) - getC0(i)));  }}  }
class C{  public ServerCQProxyImpl(InternalPool pool){  super(pool);}  }
class C{  private CacheClassLoader(ClassLoader classLdr){  super(classLdr != null ? classLdr : U.detectClassLoader(GridCacheDeploymentManager.class));  p2pExclude=cctx.gridConfig().getPeerClassLoadingLocalClassPathExclude();}  }
class C{  protected void writeNonHTMLAttributes(AttributeSet attr) throws IOException {  String style="";  String separator="; ";  if (inFontTag() && fontAttributes.isEqual(attr)) {    return;  }  boolean first=true;  Color color=(Color)attr.getAttribute(StyleConstants.Foreground);  if (color != null) {    style+="color: " + css.styleConstantsValueToCSSValue((StyleConstants)StyleConstants.Foreground,color);    first=false;  }  Integer size=(Integer)attr.getAttribute(StyleConstants.FontSize);  if (size != null) {    if (!first) {      style+=separator;    }    style+="font-size: " + size.intValue() + "pt";    first=false;  }  String family=(String)attr.getAttribute(StyleConstants.FontFamily);  if (family != null) {    if (!first) {      style+=separator;    }    style+="font-family: " + family;    first=false;  }  if (style.length() > 0) {    if (fontMask != 0) {      writeEndMask(fontMask);      fontMask=0;    }    startSpanTag(style);    fontAttributes=attr;  } else   if (fontAttributes != null) {    writeEndMask(fontMask);    fontMask=0;    endSpanTag();  }}  }
class C{  public Line3D(Stack<Vector3> points,float thickness){  this(points,thickness,null);}  }
class C{  public HttpEntity<?> createRequestEntity(){  if (isPost() || isPut()) {    if (!getParameters().isEmpty()) {      getHeaders().setContentType(determineContentType(MediaType.APPLICATION_FORM_URLENCODED));      return new HttpEntity<MultiValueMap<String,Object>>(getParameters(),getHeaders());    } else {      return new HttpEntity<Object>(getContent(),getHeaders());    }  } else {    return new HttpEntity<Object>(getHeaders());  }}  }
class C{  public boolean exists(final Object obj){  return (getRawObjectLocation(obj) != null);}  }
class C{  public static Object valueOf(String type,String value){  return valueOf(fromName(type),value);}  }
class C{  public ASN1Primitive toASN1Primitive(){  return seq;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public synchronized String transfer(final String fromId,final String toId,final int type,final int sum,final String dataId){  if (StringUtils.equals(fromId,toId)) {    return null;  }  final Transaction transaction=pointtransferRepository.beginTransaction();  try {    int fromBalance=0;    if (!Pointtransfer.ID_C_SYS.equals(fromId)) {      final JSONObject fromUser=userRepository.get(fromId);      if (UserExt.USER_STATUS_C_VALID != fromUser.optInt(UserExt.USER_STATUS)) {        throw new Exception("Invalid from user [id=" + fromId + "]");      }      fromBalance=fromUser.optInt(UserExt.USER_POINT) - sum;      if (fromBalance < 0) {        throw new Exception("Insufficient balance");      }      fromUser.put(UserExt.USER_POINT,fromBalance);      fromUser.put(UserExt.USER_USED_POINT,fromUser.optInt(UserExt.USER_USED_POINT) + sum);      userRepository.update(fromId,fromUser);    }    int toBalance=0;    if (!Pointtransfer.ID_C_SYS.equals(toId)) {      final JSONObject toUser=userRepository.get(toId);      if (UserExt.USER_STATUS_C_VALID != toUser.optInt(UserExt.USER_STATUS)) {        throw new Exception("Invalid to user [id=" + toId + "]");      }      toBalance=toUser.optInt(UserExt.USER_POINT) + sum;      toUser.put(UserExt.USER_POINT,toBalance);      userRepository.update(toId,toUser);    }    final JSONObject pointtransfer=new JSONObject();    pointtransfer.put(Pointtransfer.FROM_ID,fromId);    pointtransfer.put(Pointtransfer.TO_ID,toId);    pointtransfer.put(Pointtransfer.SUM,sum);    pointtransfer.put(Pointtransfer.FROM_BALANCE,fromBalance);    pointtransfer.put(Pointtransfer.TO_BALANCE,toBalance);    pointtransfer.put(Pointtransfer.TIME,new Date().getTime());    pointtransfer.put(Pointtransfer.TYPE,type);    pointtransfer.put(Pointtransfer.DATA_ID,dataId);    final String ret=pointtransferRepository.add(pointtransfer);    transaction.commit();    return ret;  } catch (  final Exception e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Transfer [fromId=" + fromId + ", toId="+ toId+ ", sum="+ sum+ ", type="+ type+ ", dataId="+ dataId+ "] error",e);    return null;  }}  }
class C{  public boolean isModify(){  return modify;}  }
class C{  public static boolean isKeyPressed(int keycode){synchronized (keyLock) {    return keysDown.contains(keycode);  }}  }
class C{  public void restoreComponentTreeStructure(TreeStructure treeStructure,UIComponent component){  Iterator kids=treeStructure.getChildren();  while (kids.hasNext()) {    TreeStructure kid=(TreeStructure)kids.next();    UIComponent child=kid.createComponent();    component.getChildren().add(child);    restoreComponentTreeStructure(kid,child);  }  Iterator facets=treeStructure.getFacetNames();  while (facets.hasNext()) {    String facetName=(String)facets.next();    TreeStructure facetTreeStructure=treeStructure.getTreeStructureForFacet(facetName);    UIComponent facetComponent=facetTreeStructure.createComponent();    component.getFacets().put(facetName,facetComponent);    restoreComponentTreeStructure(facetTreeStructure,facetComponent);  }}  }
class C{  public NoSuchObjectException(String s){  super(s);}  }
class C{  private void handleHtmlShowEntryTree(RequestAndResponse requestAndResponse,String paneId,String defaultTitle,String notFoundMessage,String mayNotSeeMessage,String introMessage,String touchIntroMessage,String tooltipNewChild,String buttonNewChild,String titleIfCanSee,Entry root,boolean userCanSee,User user,boolean showDeleteAndExport,String buttonFunction,String paneType,Boolean notEditable) throws IOException, ServletException {  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,defaultTitle,false).setPaneId(paneId);  pageWrapper.addMetaData(new KeyAndValue("paneType",paneType));  pageWrapper.addMetaData(new KeyAndValue("notEditable",notEditable));  pageWrapper.addMetaData(new KeyAndValue("tree",true));  boolean headerAdded=false;  try {    final StringBuilder result=new StringBuilder();    if (root == null) {      if (addTitle(requestAndResponse,defaultTitle)) {        dbLogic.commit();        return;      }      pageWrapper.addHeader();      headerAdded=true;      if (!requestAndResponse.moreThanOneUri) {        requestAndResponse.response.setStatus(HttpServletResponse.SC_NOT_FOUND);      }      if (user == null) {        result.append(servletText.errorRequiresSignIn(false));      } else {        result.append(notFoundMessage);      }    } else     if (!userCanSee) {      if (addTitle(requestAndResponse,defaultTitle)) {        dbLogic.commit();        return;      }      pageWrapper.addHeader();      headerAdded=true;      if (user == null) {        result.append(servletText.errorRequiresSignIn(false));      } else {        result.append(mayNotSeeMessage);      }    } else {      if (addTitle(requestAndResponse,titleIfCanSee)) {        dbLogic.commit();        return;      }      pageWrapper.setTitle(titleIfCanSee);      pageWrapper.setIncludeEdit();      if (showDeleteAndExport) {        pageWrapper.setIncludeExport();        pageWrapper.setIncludeDelete();      }      pageWrapper.addHeader();      pageWrapper.addPageIntroText(introMessage,touchIntroMessage);      headerAdded=true;      result.append("<div class=\"container\"" + "><div class=\"alone fakealone\" id=\"alone_" + root.getId() + "\"></div><div class=\"justchildren fakejustchildren\">");      final ArrayList<EntryInfo> entryInfoList=new ArrayList<EntryInfo>();      addEntryHtmlToTree(root,result,entryInfoList,defaultNoteDisplayDepth,true,null,true,!notEditable);      result.append("</div></div>");      result.append("<div class=\"centered\"><button title=\"" + tooltipNewChild + "\" class=\"centered specialbutton\" onclick=\""+ buttonFunction+ "(event); return false;\">"+ buttonNewChild+ "</button></div>");      result.append("\n<script type=\"application/json\" class=\"entryInfoDictJson\">\n");      addJsonForEntryInfos(result,entryInfoList,null);      result.append("\n</script>\n");    }    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    if (!headerAdded) {      pageWrapper.addHeader();    }    requestAndResponse.print(servletText.errorInternalDatabase());  }  pageWrapper.addFooter();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.CONDITION_RHS___COMPARISON_OPERATOR_1:    return COMPARISON_OPERATOR_1_EDEFAULT == null ? comparison_operator_1 != null : !COMPARISON_OPERATOR_1_EDEFAULT.equals(comparison_operator_1);case UmplePackage.CONDITION_RHS___RHS_1:  return RHS_1_EDEFAULT == null ? rhS_1 != null : !RHS_1_EDEFAULT.equals(rhS_1);}return super.eIsSet(featureID);}  }
class C{  public boolean isRestartRequired(){  return this.isDirty || this.restartRequired;}  }
class C{  protected boolean intersectsFrustum(DrawContext dc){  Extent extent=this.getExtent(dc);  if (extent == null)   return true;  if (dc.isPickingMode())   return dc.getPickFrustums().intersectsAny(extent);  return dc.getView().getFrustumInModelCoordinates().intersects(extent);}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  private void destinationAddressChanged(){  if (m_Exp == null)   return;  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {    m_destinationDatabaseURL=m_ResultsDestinationPathTField.getText();    if (m_Exp.getResultListener() instanceof DatabaseResultListener) {      ((DatabaseResultListener)m_Exp.getResultListener()).setDatabaseURL(m_destinationDatabaseURL);    }  } else {    File resultsFile=null;    m_destinationFilename=m_ResultsDestinationPathTField.getText();    if (m_destinationFilename.equals("")) {      try {        if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {          resultsFile=File.createTempFile("weka_experiment",".arff");        }        if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {          resultsFile=File.createTempFile("weka_experiment",".csv");        }        resultsFile.deleteOnExit();      } catch (      Exception e) {        System.err.println("Cannot create temp file, writing to standard out.");        resultsFile=new File("-");      }    } else {      if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {        if (!m_destinationFilename.endsWith(".arff")) {          m_destinationFilename+=".arff";        }      }      if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {        if (!m_destinationFilename.endsWith(".csv")) {          m_destinationFilename+=".csv";        }      }      resultsFile=new File(m_destinationFilename);    }    ((CSVResultListener)m_Exp.getResultListener()).setOutputFile(resultsFile);    ((CSVResultListener)m_Exp.getResultListener()).setOutputFileName(m_destinationFilename);  }  m_Support.firePropertyChange("",null,null);}  }
class C{  private void savePreferences(){  SharedPreferences prefs=getSharedPreferences(PREFS_NAME,MODE_PRIVATE);  SharedPreferences.Editor editor=prefs.edit();  editor.putInt(DIFFICULTY_KEY,GameActivity.getDifficultyIndex());  editor.putBoolean(NEVER_LOSE_BALL_KEY,GameActivity.getNeverLoseBall());  editor.putBoolean(SOUND_EFFECTS_ENABLED_KEY,GameActivity.getSoundEffectsEnabled());  editor.commit();}  }
class C{  public void addInterface(String interfaceName){  short interfaceIndex=itsConstantPool.addClass(interfaceName);  itsInterfaces.add(Short.valueOf(interfaceIndex));}  }
class C{  @Override public void process(KeyValPair<K,V> tuple){  K key=tuple.getKey();  if (!doprocessKey(key)) {    return;  }  SumEntry val=sums.get(key);  if (val == null) {    val=new SumEntry(new MutableDouble(tuple.getValue().doubleValue()),true);  } else {    val.sum.add(tuple.getValue().doubleValue());    val.changed=true;  }  sums.put(cloneKey(key),val);}  }
class C{  public String name(){  return name;}  }
class C{  public static final HeaderElement[] parseElements(final char[] headerValue){  LOG.trace("enter HeaderElement.parseElements(char[])");  if (headerValue == null) {    return new HeaderElement[]{};  }  final List elements=new ArrayList();  int i=0;  int from=0;  final int len=headerValue.length;  boolean qouted=false;  while (i < len) {    final char ch=headerValue[i];    if (ch == '"') {      qouted=!qouted;    }    HeaderElement element=null;    if ((!qouted) && (ch == ',')) {      element=new HeaderElement(headerValue,from,i);      from=i + 1;    } else     if (i == len - 1) {      element=new HeaderElement(headerValue,from,len);    }    if ((element != null) && (element.getName() != null)) {      elements.add(element);    }    i++;  }  return (HeaderElement[])elements.toArray(new HeaderElement[elements.size()]);}  }
class C{  public void requestAccessibilityFocusPausePlay(){  if (mShowing && mAnchor != null) {    setAccessibilityFocusPausePlay(true);  } else {    mPauseAccessibilityRequestQueued=true;  }}  }
class C{  public static void putLongFromTo(long[] bits,long value,int from,int to){  if (from > to)   return;  final int fromIndex=from >> ADDRESS_BITS_PER_UNIT;  final int toIndex=to >> ADDRESS_BITS_PER_UNIT;  final int fromOffset=from & BIT_INDEX_MASK;  final int toOffset=to & BIT_INDEX_MASK;  long mask;  mask=bitMaskWithBitsSetFromTo(to - from + 1,BIT_INDEX_MASK);  long cleanValue=value & (~mask);  long shiftedValue;  if (fromIndex == toIndex) {    shiftedValue=cleanValue << fromOffset;    mask=bitMaskWithBitsSetFromTo(fromOffset,toOffset);    bits[fromIndex]=(bits[fromIndex] & (~mask)) | shiftedValue;    return;  }  shiftedValue=cleanValue << fromOffset;  mask=bitMaskWithBitsSetFromTo(fromOffset,BIT_INDEX_MASK);  bits[fromIndex]=(bits[fromIndex] & (~mask)) | shiftedValue;  shiftedValue=cleanValue >>> (BITS_PER_UNIT - fromOffset);  mask=bitMaskWithBitsSetFromTo(0,toOffset);  bits[toIndex]=(bits[toIndex] & (~mask)) | shiftedValue;}  }
class C{  public boolean canDelete(){  if (!canWrite() || (RefNames.REFS_CONFIG.equals(refName))) {    return false;  }switch (getUser().getAccessPath()) {case GIT:    return canPushWithForce() || canPerform(Permission.DELETE);case JSON_RPC:case REST_API:case SSH_COMMAND:case UNKNOWN:case WEB_BROWSER:default :  return getUser().getCapabilities().canAdministrateServer() || (isOwner() && !isForceBlocked(Permission.PUSH)) || canPushWithForce()|| canPerform(Permission.DELETE);}}  }
class C{  public SimpleProperties(Object o){  this(o,true);}  }
class C{  public boolean removeNodes(List<Node> newNodes){  boolean changed=false;  for (  Object newNode : newNodes) {    boolean _changed=removeNode((Node)newNode);    changed=changed || _changed;  }  return changed;}  }
class C{  public void putChar(String key,char value){  map.put(key,value);}  }
class C{  public static IntInterval oneTo(int count){  return IntInterval.oneToBy(count,1);}  }
class C{  public CircuitBreakerBuilder counterUpdateIntervalMillis(long counterUpdateIntervalMillis){  counterUpdateInterval(Duration.ofMillis(counterUpdateIntervalMillis));  return this;}  }
class C{  public void installUI(JComponent c){  super.installUI(c);  root=(JRootPane)c;  int style=root.getWindowDecorationStyle();  if (style != JRootPane.NONE) {    installClientDecorations(root);  }}  }
class C{  public static void showErrorDialog(@NotNull final Project project,final Throwable throwable){  if (throwable != null) {    showErrorDialog(project,throwable.getMessage());  } else {    showErrorDialog(project,TfPluginBundle.message(TfPluginBundle.KEY_MESSAGE_TEAM_SERVICES_UNEXPECTED_ERROR));  }}  }
class C{  public void addWarning(String msg,RefactoringStatusContext context){  fEntries.add(new RefactoringStatusEntry(RefactoringStatus.WARNING,msg,context));  fSeverity=Math.max(fSeverity,WARNING);}  }
class C{  public synchronized boolean parseRow(List<Object> retval) throws FormatException {  retval.clear();  try {    for (int i=0; i < columnInfo.length; i++) {      Object newobj=columnInfo[i].parseField(inputFile);      retval.add(newobj);    }    cursorRow++;    return true;  } catch (  FormatException f) {    throw new FormatException("DcwRecordFile: parserow on table " + filename + ": "+ f.getMessage());  }catch (  EOFException e) {    if (!retval.isEmpty()) {      throw new FormatException("DcwRecordFile: hit EOF when list = " + VPFUtil.listToString(retval));    }    try {      if (inputFile.available() > 0) {        throw new FormatException("DcwRecordFile: hit EOF with available = " + inputFile.available() + " when list = "+ VPFUtil.listToString(retval));      }    } catch (    IOException i) {      throw new FormatException("IOException calling available()");    }    return false;  }}  }
class C{  protected void parseFiles(DelphiProject delphiProject,Project project){  List<File> includedDirs=delphiProject.getIncludeDirectories();  List<File> excludedDirs=delphiProjectHelper.getExcludedSources();  List<File> sourceFiles=delphiProject.getSourceFiles();  List<String> definitions=delphiProject.getDefinitions();  DelphiSourceSanitizer.setIncludeDirectories(includedDirs);  DelphiSourceSanitizer.setDefinitions(definitions);  printFileList("Included: ",includedDirs);  printFileList("Excluded: ",excludedDirs);  DelphiUtils.LOG.info("Parsing project " + delphiProject.getName());  ProgressReporter progressReporter=new ProgressReporter(sourceFiles.size(),10,new ProgressReporterLogger(DelphiUtils.LOG));  DelphiUtils.LOG.info("Files to parse: " + sourceFiles.size());  ASTAnalyzer analyser=new DelphiASTAnalyzer(delphiProjectHelper);  for (  File delphiFile : sourceFiles) {    final CodeAnalysisResults results=parseSourceFile(delphiFile,excludedDirs,analyser,project);    if (results != null) {      units.addAll(results.getCachedUnitsAsList());    }    progressReporter.progress();  }  DelphiUtils.LOG.info("Done");}  }
class C{  public boolean shouldMerge(Entity e1,Entity e2){  return true;}  }
class C{  private String load(String resource) throws IOException {  File file=new File(resource);  if (file.exists()) {    return load(file);  } else {    InputStream input=getClass().getResourceAsStream("/" + resource);    if (input == null) {      throw new FileNotFoundException(resource);    } else {      try {        return load(new BufferedReader(new InputStreamReader(input)));      }  finally {        input.close();      }    }  }}  }
class C{  public DoubleMatrix2D subMatrix(DoubleMatrix2D A,int fromRow,int toRow,int fromColumn,int toColumn){  return A.viewPart(fromRow,fromColumn,toRow - fromRow + 1,toColumn - fromColumn + 1);}  }
class C{  public static void main(String[] args){  TestHiddenMembers tester=new TestHiddenMembers();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public static double lnFunc(double num){  if (num <= 0) {    return 0;  } else {    if (num < MAX_INT_FOR_CACHE_PLUS_ONE) {      int n=(int)num;      if ((double)n == num) {        return INT_N_LOG_N_CACHE[n];      }    }    return num * Math.log(num);  }}  }
class C{  private void computeControlAndBarrierDependences(Instruction start,Instruction end){  DepGraphNode lastTotalBarrier=null;  DepGraphNode lastGCBarrier=null;  DepGraphNode lastAcquire=null;  for (DepGraphNode pnode=(DepGraphNode)firstNode(); pnode != null; pnode=(DepGraphNode)pnode.getNext()) {    Instruction p=pnode.instruction();    if (lastTotalBarrier != null) {      lastTotalBarrier.insertOutEdge(pnode,CONTROL);    }    if (lastGCBarrier != null) {      lastGCBarrier.insertOutEdge(pnode,CONTROL);    }    if (lastAcquire != null && p.isImplicitLoad()) {      lastAcquire.insertOutEdge(pnode,CONTROL);    }    Operator pop=p.operator();    if (p.isYieldPoint() || pop == IR_PROLOGUE || pop == UNINT_BEGIN || pop == GET_TIME_BASE || pop == GET_CAUGHT_EXCEPTION) {      lastTotalBarrier=pnode;    }    if (pop == UNINT_END) {      lastGCBarrier=pnode;    }    if (p.isAcquire() || p.isDynamicLinkingPoint()) {      lastAcquire=pnode;    }  }  lastTotalBarrier=null;  lastGCBarrier=null;  DepGraphNode lastRelease=null;  for (DepGraphNode pnode=(DepGraphNode)lastNode(); pnode != null; pnode=(DepGraphNode)pnode.getPrev()) {    Instruction p=pnode.instruction();    if (lastTotalBarrier != null) {      pnode.insertOutEdge(lastTotalBarrier,CONTROL);    }    if (lastGCBarrier != null) {      pnode.insertOutEdge(lastGCBarrier,CONTROL);    }    if (lastRelease != null && p.isImplicitStore()) {      pnode.insertOutEdge(lastRelease,CONTROL);    }    Operator pop=p.operator();    if (p.isBranch() || p.isReturn() || p.isYieldPoint()|| pop == UNINT_END || pop == GET_TIME_BASE || pop == SET_CAUGHT_EXCEPTION) {      lastTotalBarrier=pnode;    }    if (pop == UNINT_BEGIN) {      lastGCBarrier=pnode;    }    if (p.isRelease() || p.isDynamicLinkingPoint()) {      lastRelease=pnode;    }  }}  }
class C{  protected RegisterType mergePreRegisterTypeFromPredecessors(int registerNumber){  RegisterType mergedRegisterType=null;  for (  AnalyzedInstruction predecessor : predecessors) {    RegisterType predecessorRegisterType=predecessor.postRegisterMap[registerNumber];    assert predecessorRegisterType != null;    mergedRegisterType=predecessorRegisterType.merge(mergedRegisterType);  }  return mergedRegisterType;}  }
class C{  private StringBuilder createIndent(){  StringBuilder oneIndent=new StringBuilder();  oneIndent.append('\t');  return oneIndent;}  }
class C{  public ObjectId commitTextFile(String fileNameWithPath,String contents,String message) throws IOException {  this.file=new File(fileNameWithPath);  setCommitMessage(message);  if (this.refName == null) {    setRefName(HEAD);  }  RefHeadFileLock refHeadFileLock=new RefHeadFileLock().invoke(this.refName);  ObjectId commitId=null;  try {    this.objectInserter=this.repository.newObjectInserter();    contents=addEOL(changeLineEnding(contents,findFileLineEnding(repository,fileNameWithPath)));    commitId=createCommitWithNewTree(createGitObjectWithText(contents));    refUpdate(commitId,refName);  } catch (  OverlappingFileLockException e) {    play.Logger.error("Overlapping File Lock Error: " + e.getMessage());  } finally {    objectInserter.release();    repository.close();    refHeadFileLock.release();  }  return commitId;}  }
class C{  public Builder(){}  }
class C{  @Deprecated public static <T>GridIterator<T> emptyIterator(){  return new GridEmptyIterator<>();}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>(1);  newVector.addElement("measureNumRules");  return newVector.elements();}  }
class C{  public static void generate(File inputFile){  Out.resetCounters();  Timer totalTime=new Timer();  Timer time=new Timer();  LexScan scanner=null;  LexParse parser=null;  FileReader inputReader=null;  totalTime.start();  try {    Out.println(ErrorMessages.READING,inputFile.toString());    inputReader=new FileReader(inputFile);    scanner=new LexScan(inputReader);    scanner.setFile(inputFile);    parser=new LexParse(scanner);  } catch (  FileNotFoundException e) {    Out.error(ErrorMessages.CANNOT_OPEN,inputFile.toString());    throw new GeneratorException();  }  try {    NFA nfa=(NFA)parser.parse().value;    Out.checkErrors();    if (Options.dump)     Out.dump(ErrorMessages.get(ErrorMessages.NFA_IS) + Out.NL + nfa+ Out.NL);    if (Options.dot)     nfa.writeDot(Emitter.normalize("nfa.dot",null));    Out.println(ErrorMessages.NFA_STATES,nfa.numStates);    time.start();    DFA dfa=nfa.getDFA();    time.stop();    Out.time(ErrorMessages.DFA_TOOK,time);    dfa.checkActions(scanner,parser);    nfa=null;    if (Options.dump)     Out.dump(ErrorMessages.get(ErrorMessages.DFA_IS) + Out.NL + dfa+ Out.NL);    if (Options.dot)     dfa.writeDot(Emitter.normalize("dfa-big.dot",null));    Out.checkErrors();    time.start();    dfa.minimize();    time.stop();    Out.time(ErrorMessages.MIN_TOOK,time);    if (Options.dump)     Out.dump(ErrorMessages.get(ErrorMessages.MIN_DFA_IS) + Out.NL + dfa);    if (Options.dot)     dfa.writeDot(Emitter.normalize("dfa-min.dot",null));    time.start();    Emitter e=new Emitter(inputFile,parser,dfa);    e.emit();    time.stop();    Out.time(ErrorMessages.WRITE_TOOK,time);    totalTime.stop();    Out.time(ErrorMessages.TOTAL_TIME,totalTime);  } catch (  ScannerException e) {    Out.error(e.file,e.message,e.line,e.column);    throw new GeneratorException();  }catch (  MacroException e) {    Out.error(e.getMessage());    throw new GeneratorException();  }catch (  IOException e) {    Out.error(ErrorMessages.IO_ERROR,e.toString());    throw new GeneratorException();  }catch (  OutOfMemoryError e) {    Out.error(ErrorMessages.OUT_OF_MEMORY);    throw new GeneratorException();  }catch (  GeneratorException e) {    throw new GeneratorException();  }catch (  Exception e) {    e.printStackTrace();    throw new GeneratorException();  }}  }
class C{  public Trie(boolean lowerCaseOnly){  m_Root=new Node();  m_lowerCaseOnly=lowerCaseOnly;}  }
class C{  public InspectContainerParams withContainer(@NotNull String container){  requireNonNull(container);  this.container=container;  return this;}  }
class C{  public ShopCategoryServiceImpl(final GenericDAO<ShopCategory,Long> shopCategoryDao,final GenericDAO<Category,Long> categoryDao,final GenericDAO<Shop,Long> shopDao){  super(shopCategoryDao);  this.shopCategoryDao=shopCategoryDao;  this.categoryDao=categoryDao;  this.shopDao=shopDao;}  }
class C{  public boolean isFixedRowHeight(){  return (rowHeight > 0);}  }
class C{  protected void restoreState(){  double[][] tmp=logProbs;  logProbs=storedLogProbs;  storedLogProbs=tmp;}  }
class C{  private TypeMember(final int id,final BaseType parentType,final BaseType baseType,final String name,final Optional<Integer> offset,final Optional<Integer> numberOfElements,final Optional<Integer> argumentIndex){  this.id=id;  this.name=Preconditions.checkNotNull(name,"IE02622: Member name can not be null.");  this.baseType=Preconditions.checkNotNull(baseType,"IE02623: Base type of member can not be null.");  this.parentType=Preconditions.checkNotNull(parentType,"IE02624: The parent type can not be null.");  Preconditions.checkArgument(parentType != baseType,"Error: Cannot create recursive member declaration.");  this.numberOfElements=Preconditions.checkNotNull(numberOfElements,"Error: number of elements can not be null.");  Preconditions.checkArgument(!numberOfElements.isPresent() || numberOfElements.get() >= 0,"Error: Number of elements for member must either be greater zero or absent.");  this.offset=Preconditions.checkNotNull(offset,"Error: offset argument can not be null.");  this.argumentIndex=Preconditions.checkNotNull(argumentIndex,"Error: argument can not be null.");  Preconditions.checkArgument(!argumentIndex.isPresent() || argumentIndex.get() >= 0,"Error: Argument index member must either be greater zero or absent.");  Preconditions.checkArgument((numberOfElements.isPresent() != offset.isPresent()) ^ argumentIndex.isPresent(),"Error: Either this is a struct member or an array member, or a prototype argument");  Preconditions.checkArgument(!offset.isPresent() || offset.get() >= 0,"Error: Member offset must either be greater zero or absent.");}  }
class C{  public void initializeMetadata() throws HyracksDataException {  if (mdExtensions != null) {    for (    IMetadataExtension mdExtension : mdExtensions) {      try {        mdExtension.initializeMetadata();      } catch (      RemoteException|ACIDException e) {        throw new HyracksDataException(e);      }    }  }}  }
class C{  public void testGetDataLength(){  char expectedReturn=(char)realmValue.length();  char actualReturn=realmAttribute.getDataLength();  assertEquals("getDataLength - failed",expectedReturn,actualReturn);}  }
class C{  @Override protected void deleteMetadata(final SoftwareModule entity,final String key,final String value){  final SoftwareModuleMetadata swMetadata=entityFactory.generateSoftwareModuleMetadata(entity,key,value);  softwareManagement.deleteSoftwareModuleMetadata(entity.getId(),key);  eventBus.publish(this,new MetadataEvent(MetadataUIEvent.DELETE_SOFTWARE_MODULE_METADATA,swMetadata));}  }
class C{  public static void main(String[] args){  Time time1=new Time();  Time time2=new Time(555550000);  System.out.println(time1.getHour() + ":" + time1.getMinute()+ ":"+ time1.getSecond());  System.out.println(time2.getHour() + ":" + time2.getMinute()+ ":"+ time2.getSecond());}  }
class C{  public boolean queueAt(Alarm alarm,long wakeTime){  boolean isEarliest=false;  long prevNextAlarmTime;  do {    prevNextAlarmTime=_nextAlarmTime.get();  } while (wakeTime > 0 && wakeTime < prevNextAlarmTime && !_nextAlarmTime.compareAndSet(prevNextAlarmTime,wakeTime));  if (wakeTime < prevNextAlarmTime) {    isEarliest=true;  }  long oldWakeTime=alarm.getAndSetWakeTime(wakeTime);  if (oldWakeTime == wakeTime) {    return false;  }  if (oldWakeTime > 0) {    if (!dequeueImpl(alarm)) {    }  }  if (wakeTime <= 0) {    return false;  }  long now=_now.get();  if (wakeTime <= now) {    queueCurrent(alarm);    return true;  }synchronized (_lock) {    if (alarm.getBucket() >= 0) {      return false;    }    int bucket=getBucket(wakeTime);    alarm.setBucket(bucket);    Alarm top=_clockArray[bucket];    alarm.setNext(top);    _clockArray[bucket]=alarm;  }  now=_now.get();  long nextWakeTime=alarm.getWakeTime();  if (nextWakeTime != wakeTime || wakeTime < now) {    dequeueImpl(alarm);    queueCurrent(alarm);  }  return isEarliest;}  }
class C{  protected DeserializableList(final int initialCapacity,final String label){  this.list=new ArrayList<>(initialCapacity);  this.label=label;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void loadExternalDirectory(String directoryName){  Set<Class<? extends Annotation>> annoClassSet=loader.loadExternalAnnotationClassesFromDirectory(directoryName);  for (  Class<? extends Annotation> annoClass : annoClassSet) {    addUnitToExternalQualMap(annoClass);  }}  }
class C{  private void mapNext(Motif motif,Set<MotifInstance> instances,int motifNode,Node[] mappedNodes,int nrMapped){  NodeSet nodes=symmetryHandler.mapping[motifNode].getNodeSet();  if (nrMapped == motif.getNrMotifNodes() - 1) {    for (    Node node : nodes.getNodes()) {      mappedNodes[motifNode]=node;      instances.add(new MotifInstance(mappedNodes));    }    mappedNodes[motifNode]=null;  } else {    Iterator<Node> nodeIterator=nodes.iterator();    symmetryHandler.mappedPositions.add(motifNode);    unmappedNodes.remove(motifNode);    while (nodeIterator.hasNext()) {      Node n=nodeIterator.next();      mappedNodes[motifNode]=n;      n.used=true;      boolean succesMapping=symmetryHandler.mapNode(motifNode,n);      if (succesMapping) {        NodeIterator nextIterator=symmetryHandler.getNextBestIterator(unmappedNodes);        if (nextIterator != null) {          symmetryHandler.mapping[nextIterator.motifNodeID]=nextIterator;          mapNext(motif,instances,nextIterator.motifNodeID,mappedNodes,nrMapped + 1);          symmetryHandler.mapping[nextIterator.motifNodeID]=nextIterator.parent;        }      }      symmetryHandler.removeNodeMapping(motifNode,n);      n.used=false;      mappedNodes[motifNode]=null;    }    symmetryHandler.mappedPositions.remove(motifNode);    unmappedNodes.add(motifNode);  }}  }
class C{  public void removeActionListener(ActionListener al){  if (backButton != null && forwardButton != null) {    backButton.removeActionListener(al);    forwardButton.removeActionListener(al);  } else   if (listeners != null) {    listeners.remove(al);  }}  }
class C{  public static void makeDir(IPath path) throws IOException {  Preconditions.checkArgument(path.isAbsolute());  Path directory=FileSystems.getDefault().getPath(path.append("dummy").toOSString());  Files.createDirectories(directory);}  }
class C{  private Optional<FileInfo> openFile(File file){  try {    String nextPath=file.getPath();    PositionTracker tracker=DurablePositionTracker.getInstance(metaFile,nextPath);    if (!tracker.getTarget().equals(nextPath)) {      tracker.close();      deleteMetaFile();      tracker=DurablePositionTracker.getInstance(metaFile,nextPath);    }    Preconditions.checkState(tracker.getTarget().equals(nextPath),"Tracker target %s does not equal expected filename %s",tracker.getTarget(),nextPath);    ResettableInputStream in=new ResettableFileInputStream(file,tracker,ResettableFileInputStream.DEFAULT_BUF_SIZE,inputCharset,decodeErrorPolicy);    EventDeserializer deserializer=EventDeserializerFactory.getInstance(deserializerType,deserializerContext,in);    return Optional.of(new FileInfo(file,deserializer));  } catch (  FileNotFoundException e) {    logger.warn("Could not find file: " + file,e);    return Optional.absent();  }catch (  IOException e) {    logger.error("Exception opening file: " + file,e);    return Optional.absent();  }}  }
class C{  public static void w(String tag,Throwable tr){  w(tag,null,tr);}  }
class C{  public BasicSplitPaneDivider createDefaultDivider(){  return new BESplitPaneDivider(this);}  }
class C{  public void addRequestLocation(String name){  if (name != null) {    this.requestLocationSet.add(name);  }}  }
class C{  public RaptorAliasResult processAlias(ChatConsoleController controller,String command){  RaptorAliasResult result=null;  for (  RaptorAlias alias : aliases) {    result=alias.apply(controller,command);    if (result != null) {      break;    }  }  return result;}  }
class C{  private boolean[] extractBits(BitMatrix matrix) throws FormatException {  boolean[] rawbits;  if (ddata.isCompact()) {    if (ddata.getNbLayers() > NB_BITS_COMPACT.length) {      throw FormatException.getFormatInstance();    }    rawbits=new boolean[NB_BITS_COMPACT[ddata.getNbLayers()]];    numCodewords=NB_DATABLOCK_COMPACT[ddata.getNbLayers()];  } else {    if (ddata.getNbLayers() > NB_BITS.length) {      throw FormatException.getFormatInstance();    }    rawbits=new boolean[NB_BITS[ddata.getNbLayers()]];    numCodewords=NB_DATABLOCK[ddata.getNbLayers()];  }  int layer=ddata.getNbLayers();  int size=matrix.getHeight();  int rawbitsOffset=0;  int matrixOffset=0;  while (layer != 0) {    int flip=0;    for (int i=0; i < 2 * size - 4; i++) {      rawbits[rawbitsOffset + i]=matrix.get(matrixOffset + flip,matrixOffset + i / 2);      rawbits[rawbitsOffset + 2 * size - 4 + i]=matrix.get(matrixOffset + i / 2,matrixOffset + size - 1 - flip);      flip=(flip + 1) % 2;    }    flip=0;    for (int i=2 * size + 1; i > 5; i--) {      rawbits[rawbitsOffset + 4 * size - 8 + (2 * size - i) + 1]=matrix.get(matrixOffset + size - 1 - flip,matrixOffset + i / 2 - 1);      rawbits[rawbitsOffset + 6 * size - 12 + (2 * size - i) + 1]=matrix.get(matrixOffset + i / 2 - 1,matrixOffset + flip);      flip=(flip + 1) % 2;    }    matrixOffset+=2;    rawbitsOffset+=8 * size - 16;    layer--;    size-=4;  }  return rawbits;}  }
class C{  static void onRequestPermissionsResult(AirMapInterface airMapInterface,int requestCode,int[] grantResults){switch (requestCode) {case LOCATION_PERMISSION_REQUEST_CODE:    if (verifyPermissions(grantResults)) {      airMapInterface.onLocationPermissionsGranted();    }  break;default :break;}}  }
class C{  public Date convertDateTime(String isodate) throws ParseException {  Date date=iso8601DateFormat.parse(isodate);  return date;}  }
class C{  private boolean overloadedIn(MethodSymbol m,TypeSymbol c,Types types){  for (Scope.Entry e=c.members().lookup(m.name); e.scope != null; e=e.next()) {    if (isIgnored(e.sym))     continue;    if (!m.overrides(e.sym,(TypeSymbol)m.owner,types,true)) {      return true;    }  }  return false;}  }
class C{  @SuppressWarnings("static-access") @Override protected void parseArgs(String[] args) throws AdeUsageException {  Options options=new Options();  Option helpOpt=new Option("h","help",false,"Print help message and exit");  options.addOption(helpOpt);  Option versionOpt=OptionBuilder.withLongOpt("version").hasArg(false).isRequired(false).withDescription("Print current Ade version (JAR) and exit").create('v');  options.addOption(versionOpt);  Option dbVersionOpt=OptionBuilder.withLongOpt("db-version").withDescription("Print current Ade DB version and exit").create('b');  options.addOption(dbVersionOpt);  Option outputFileOpt=OptionBuilder.withLongOpt("output").hasArg(true).withArgName("FILE").isRequired(false).withDescription("Output file name (where relevant)").create('o');  options.addOption(outputFileOpt);  OptionGroup optGroup=new OptionGroup();  optGroup.setRequired(false);  Option DumpModelDebugOpt=OptionBuilder.withLongOpt("debugPrint").hasArg(true).withArgName("MODEL FILE").isRequired(false).withDescription("Extract a text version of a model debug information and exit").create('d');  optGroup.addOption(DumpModelDebugOpt);  Option verifyFlowOpt=OptionBuilder.withLongOpt("verifyFlow").hasArg(true).withArgName("FLOW FILE").isRequired(false).withDescription("Verify the flow file matches the XSD standard and exit").create('f');  optGroup.addOption(verifyFlowOpt);  options.addOptionGroup(optGroup);  CommandLineParser parser=new GnuParser();  CommandLine line=null;  try {    line=parser.parse(options,args);  } catch (  MissingOptionException exp) {    System.out.println("Command line parsing failed.  Reason: " + exp.getMessage());    System.out.println();    new HelpFormatter().printHelp(ControlDB.class.getName(),options);    System.exit(0);  }catch (  ParseException exp) {    System.err.println("Parsing failed.  Reason: " + exp.getMessage());    throw new AdeUsageException("Argument Parsing failed",exp);  }  if (line.hasOption('h')) {    new HelpFormatter().printHelp(this.getClass().getSimpleName(),options);    System.exit(0);  }  if (line.hasOption(helpOpt.getLongOpt())) {    new HelpFormatter().printHelp(getClass().getSimpleName(),options);  }  if (line.hasOption(outputFileOpt.getLongOpt())) {    m_outputFile=new File(line.getOptionValue(outputFileOpt.getLongOpt()));  }  m_inputFile=null;  m_cmd=null;  if (line.hasOption('v')) {    m_cmd="version";  }  if (line.hasOption('b')) {    m_cmd="db-version";  }  if (line.hasOption('d')) {    m_inputFile=new File(line.getOptionValue(DumpModelDebugOpt.getLongOpt()));    m_cmd="debugPrint";  }  if (line.hasOption('f')) {    m_inputFilename=line.getOptionValue(verifyFlowOpt.getLongOpt());    m_cmd="verifyFlow";  }}  }
class C{  public void actionPerformed(ActionEvent e){  DesktopController.getInstance().exitProgram();}  }
class C{  protected Set<URI> analyzeImportUriCycles(Collection<Delta> deltas){  Digraph<IResourceDescription> diGraph=new Digraph<IResourceDescription>();  Set<IResourceDescription> alreadyVisited=new HashSet<IResourceDescription>();  Set<IResourceDescription> directlyImported=new HashSet<IResourceDescription>();  for (  Delta d : deltas) {    directlyImported.addAll(addToDiGraph(diGraph,d.getNew(),alreadyVisited));    directlyImported.addAll(addToDiGraph(diGraph,d.getOld(),alreadyVisited));  }  while (!directlyImported.isEmpty()) {    Set<IResourceDescription> directlyImportedNextGen=new HashSet<IResourceDescription>();    for (    IResourceDescription iResourceDescription : directlyImported) {      directlyImportedNextGen.addAll(addToDiGraph(diGraph,iResourceDescription,alreadyVisited));    }    directlyImported=directlyImportedNextGen;  }  try {    diGraph.topoSort();  } catch (  HasCyclesException e) {    Set<URI> result=urisFromEdges(diGraph);    Set<URI> urisFromDeltas=new HashSet<URI>();    result.removeAll(urisFromDeltas);    for (    Delta d : deltas) {      urisFromDeltas.add(d.getUri());    }    removeEdgesIntersectingWithDelta(urisFromDeltas,diGraph);    try {      diGraph.topoSort();    } catch (    HasCyclesException inner_e) {      result.removeAll(urisFromEdges(diGraph));    }    return result;  }  return null;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  @SuppressWarnings("raw") public static Type resolveTypeVariable(TypeVariable name,Class declaringClass,Class topClass){  Type type=resolveTypeVariable(name,declaringClass,new HashMap<>(),topClass);  if (type == null) {    type=Object.class;  }  return type;}  }
class C{  private boolean isSmallCounterpart(HTMLFont font){  if (size >= font.getSize()) {    return false;  }  return (isSameFamily(font) && (style == font.getStyle()));}  }
class C{  public boolean thisDeviceSpeaksTo(Peer other) throws NoSuchAlgorithmException, UnsupportedEncodingException {  if (other == null || other.getNetwork() == null || other.getNetwork().getBluetoothDevice() == null) {    log.info("this device not speaking to peer: " + other + " either peer or peer network is null");    return false;  }  return thisDeviceSpeaksTo(other.getNetwork().getBluetoothDevice());}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public Builder append(ImageProcessor processor){  result.processors.add(processor);  return (this);}  }
class C{  public T returnValue(){  return obj.getValue();}  }
class C{  public final void connect() throws RcsPermissionDeniedException {  if (!sApiCompatible) {    try {      sApiCompatible=mRcsServiceControl.isCompatible(this);      if (!sApiCompatible) {        throw new RcsPermissionDeniedException("The TAPI client version of the multimedia service is not compatible with the TAPI service implementation version on this device!");      }    } catch (    RcsServiceException e) {      throw new RcsPermissionDeniedException("The compatibility of TAPI client version with the TAPI service implementation version of this device cannot be checked for the multimedia service!",e);    }  }  Intent serviceIntent=new Intent(IMultimediaSessionService.class.getName());  serviceIntent.setPackage(RcsServiceControl.RCS_STACK_PACKAGENAME);  mCtx.bindService(serviceIntent,apiConnection,0);}  }
class C{  public T dequeue() throws InterruptedException {  return dequeue(0L);}  }
class C{  public boolean isInScroll(){  return mInScroll;}  }
class C{  public Instrumenter attachAll(){  attachAllMetricCollectors();  attachEpsilonProgressCollector();  attachAdaptiveMultimethodVariationCollector();  attachAdaptiveTimeContinuationCollector();  attachElapsedTimeCollector();  attachApproximationSetCollector();  attachPopulationSizeCollector();  return this;}  }
class C{  public void verifyChainOnly(Date atDate){  verifyImpl(null,atDate);}  }
class C{  @Override protected void updateView(){  updateView(false);}  }
class C{  public void readSetOf(ASN1SetOf setOf) throws IOException {  if (tag != ASN1Constants.TAG_C_SETOF) {    throw expected("setOf");  }  decodeValueCollection(setOf);}  }
class C{  protected boolean deleteIcon(){  if (log.isDebugEnabled()) {    log.debug("deleteSensor Action: iconMap.size()= " + _iconMap.size());  }  if (_iconMap.size() < 4) {    return false;  }  String name=MultiSensorItemPanel.POSITION[_iconMap.size() - 4];  _iconMap.remove(name);  return true;}  }
class C{  public void testPlusMathContextPositive(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  int precision=37;  RoundingMode rm=RoundingMode.FLOOR;  MathContext mc=new MathContext(precision,rm);  String c="929487820944884782312124789.8748298842";  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal res=aNumber.plus(mc);  assertEquals("incorrect value",c,res.toString());  assertEquals("incorrect scale",cScale,res.scale());}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void requestPermissionIfNeeded(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    int hasEnableCoarseLocationPerm=checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION);    int hasEnableFineLocationPerm=checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION);    int hasEnableExternalWritePerm=checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE);    List<String> permissionToRequest=new ArrayList<>();    if (hasEnableCoarseLocationPerm == PackageManager.PERMISSION_DENIED) {      permissionToRequest.add(Manifest.permission.ACCESS_COARSE_LOCATION);    }    if (hasEnableFineLocationPerm == PackageManager.PERMISSION_DENIED) {      permissionToRequest.add(Manifest.permission.ACCESS_FINE_LOCATION);    }    if (hasEnableExternalWritePerm == PackageManager.PERMISSION_DENIED) {      permissionToRequest.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);    }    if (!permissionToRequest.isEmpty()) {      requestPermissions(permissionToRequest.toArray(new String[permissionToRequest.size()]),ALLOW_PERMISSIONS);    } else {      initEvent();    }  }}  }
class C{  private void increaseScoreLevel(){  mMatchScore+=(500 * (Math.pow(1.1,mLevelNumber - 1)));  if (mLevelNumber > 2 && mWrongAnswers == 0) {    mViewBonusSnowman.startAnimation(mAnimationSnowman);  }  mScoreText.setText(String.valueOf(mMatchScore));  mTextPlayAgainScore.setText(String.valueOf(mMatchScore));}  }
class C{  public Graph search(List<Node> nodes){  IFas fas=null;  if (initialGraph == null) {    fas=new Fas(getIndependenceTest());  } else {    fas=new Fas(initialGraph,getIndependenceTest());  }  fas.setVerbose(verbose);  return search(fas,nodes);}  }
class C{  public SComp(){  this("");}  }
class C{  private void justify(){  if (adapter == null) {    return;  }  lastScrollY=0;  int offset=scrollingOffset;  int itemHeight=getItemHeight();  boolean needToIncrease=offset > 0 ? currentItem < adapter.getItemsCount() : currentItem > 0;  if ((isCyclic || needToIncrease) && Math.abs((float)offset) > (float)itemHeight / 2) {    if (offset < 0)     offset+=itemHeight + MIN_DELTA_FOR_SCROLLING; else     offset-=itemHeight + MIN_DELTA_FOR_SCROLLING;  }  if (Math.abs(offset) > MIN_DELTA_FOR_SCROLLING) {    scroller.startScroll(0,0,0,offset,SCROLLING_DURATION);    setNextMessage(MESSAGE_JUSTIFY);  } else {    finishScrolling();  }}  }
class C{  @Override public Void visitThrow(ThrowTree node,Void p){  checkThrownExpression(node);  return super.visitThrow(node,p);}  }
class C{  public void putAll(Map m){  for (Iterator it=m.entrySet().iterator(); it.hasNext(); ) {    Map.Entry entry=(Map.Entry)it.next();    this.put((String)entry.getKey(),entry.getValue());  }}  }
class C{  public static UUID timeBased(){  return new UUID(makeMSB(getCurrentTimestamp()),CLOCK_SEQ_AND_NODE);}  }
class C{  private boolean startScrollIfNeeded(final int y){  final int deltaY=y - mMotionY;  final int distance=Math.abs(deltaY);  final boolean overscroll=false;  if (overscroll || distance > mTouchSlop) {    if (overscroll) {      mMotionCorrection=0;    } else {      mTouchMode=TOUCH_MODE_SCROLLING;      mMotionCorrection=deltaY > 0 ? mTouchSlop : -mTouchSlop;    }    setPressed(false);    View motionView=getChildAt(mMotionPosition - mFirstPosition);    if (motionView != null) {      motionView.setPressed(false);    }    final ViewParent parent=getParent();    if (parent != null) {      parent.requestDisallowInterceptTouchEvent(true);    }    scrollIfNeeded(y);    return true;  }  return false;}  }
class C{  public ExportedVariableDeclaration createExportedVariableDeclaration(){  ExportedVariableDeclarationImpl exportedVariableDeclaration=new ExportedVariableDeclarationImpl();  return exportedVariableDeclaration;}  }
class C{  protected static void preparePKCS12TokenAndKey(){  String pkcs12TokenFile=getPathFromResource("/user_a_rsa.p12");  signingToken=new Pkcs12SignatureToken("password",pkcs12TokenFile);  privateKey=signingToken.getKeys().get(0);}  }
class C{  public SimpleArrayMap(){  mHashes=EMPTY_INTS;  mArray=EMPTY_OBJECTS;  mSize=0;}  }
class C{  public void adjustCostDetail(MCostDetail costDetail){  Properties ctx=costDetail.getCtx();  String trxName=costDetail.get_TrxName();  int transactionId=costDetail.getM_Transaction_ID();  int clientId=costDetail.getAD_Client_ID();  MTransaction transaction=new MTransaction(ctx,transactionId,trxName);  MCostType costType=(MCostType)costDetail.getM_CostType();  MCostElement costElement=(MCostElement)costDetail.getM_CostElement();  MAcctSchema accountSchema=(MAcctSchema)costDetail.getC_AcctSchema();  if (MTransaction.MOVEMENTTYPE_VendorReceipts.equals(transaction.getMovementType())) {    MInOutLine line=(MInOutLine)transaction.getDocumentLine();    if (MCostElement.COSTELEMENTTYPE_Material.equals(costElement.getCostElementType())) {      if (costDetail.getM_InOutLine_ID() > 0 && costDetail.getQty().signum() != 0) {        CostEngineFactory.getCostEngine(clientId).createCostDetail(accountSchema,costType,costElement,transaction,line,true);      } else       if (costDetail.getM_InOutLine_ID() > 0 && costDetail.getQty().signum() != 0 && costDetail.getC_OrderLine_ID() > 0) {        List<MMatchPO> orderMatches=MMatchPO.getInOutLine(line);        for (        MMatchPO match : orderMatches) {          if (match.getM_InOutLine_ID() == line.getM_InOutLine_ID() && match.getM_Product_ID() == transaction.getM_Product_ID()) {            CostEngineFactory.getCostEngine(clientId).createCostDetail(accountSchema,costType,costElement,transaction,match,true);          }        }      } else       if (costDetail.getM_InOutLine_ID() > 0 && costDetail.getQty().signum() == 0 && costDetail.getC_InvoiceLine_ID() > 0) {        List<MMatchInv> invoiceMatches=MMatchInv.getInOutLine(line);        for (        MMatchInv match : invoiceMatches) {          if (match.getM_Product_ID() == transaction.getM_Product_ID()) {            CostEngineFactory.getCostEngine(clientId).createCostDetail(accountSchema,costType,costElement,transaction,match,true);          }        }      }    }    for (    MLandedCostAllocation allocation : MLandedCostAllocation.getOfInOuline(line,costElement.getM_CostElement_ID())) {      CostEngineFactory.getCostEngine(clientId).createCostDetail(accountSchema,costType,costElement,transaction,allocation,true);    }  } else   CostEngineFactory.getCostEngine(clientId).createCostDetail(accountSchema,costType,costElement,transaction,transaction.getDocumentLine(),true);}  }
class C{  public static Context createUiContext(final Context context){  try {    Context uiContext=context.createPackageContext("com.android.systemui",Context.CONTEXT_RESTRICTED);    return new ThemedUiContext(uiContext,context.getApplicationContext());  } catch (  PackageManager.NameNotFoundException e) {  }  return null;}  }
class C{  @Deprecated public static synchronized NceConsistRoster instance(){  if (_instance == null) {    if (log.isDebugEnabled()) {      log.debug("ConsistRoster creating instance");    }    _instance=new NceConsistRoster();    if (_instance.checkFile(defaultNceConsistRosterFilename())) {      try {        _instance.readFile(defaultNceConsistRosterFilename());      } catch (      Exception e) {        log.error("Exception during ConsistRoster reading: " + e);      }    }  }  if (log.isDebugEnabled()) {    log.debug("ConsistRoster returns instance " + _instance);  }  return _instance;}  }
class C{  protected void checkStack(sage.Catbert.FastStack inStack) throws ParseException {  if (null == inStack) {    throw new ParseException("Stack argument null");  }}  }
class C{  final boolean indexesDeletedNode(){  return node.value == null;}  }
class C{  protected boolean hasBridge(String localBrokerName,String remoteBrokerName){  final BrokerItem fromBroker=brokers.get(localBrokerName);  if (fromBroker == null) {    throw new IllegalArgumentException("Unknown broker: " + localBrokerName);  }  for (  BrokerInfo peerInfo : fromBroker.broker.getRegionBroker().getPeerBrokerInfos()) {    if (peerInfo.getBrokerName().equals(remoteBrokerName)) {      return true;    }  }  return false;}  }
class C{  public boolean add(byte[] uuid){  node_trie node=root;  byte offset=0;  byte position;  while (true) {    if (offset % 2 == 0) {      position=(byte)(uuid[offset >> 1] >> 4);      if (position < 0)       position=(byte)(-position + 7);    } else     position=(byte)(uuid[offset >> 1] & 0x0F);    if (node.children[position] == null) {      node.count++;      if (offset == 31) {        node.children[position]=THE_LEAF;        return true;      } else {        node=(node_trie)(node.children[position]=new node_trie());        offset++;      }    } else {      if (offset == 31)       return false; else {        node=(node_trie)node.children[position];        offset++;      }    }  }}  }
class C{  @Override public V put(final K key,final V value){  if (key == null) {    throw new NullPointerException("null keys not allowed");  }  if (value == null) {    throw new NullPointerException("null values not allowed");  }  purgeBeforeWrite();  return super.put(key,value);}  }
class C{  public void destroy(){  if (mDomThread != null && mDomThread.isWXThreadAlive()) {    mDomThread.quit();  }  if (mDomRegistries != null) {    mDomRegistries.clear();  }  mDomHandler=null;  mDomThread=null;}  }
class C{  public static void closeQuietly(FileDescriptor fd){  try {    IoUtils.close(fd);  } catch (  IOException ignored) {  }}  }
class C{  private Status(){}  }
class C{  public static Field retrieveField(Class<?> clazz,String regex){  for (  Field field : getListOfFields(clazz))   if (field.getName().equals(regex))   return field;  return null;}  }
class C{  public boolean remove(SimEvent event){  return sortedSet.remove(event);}  }
class C{  public static void write(int x1,int y1,ImageIcon ii,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {  int image_width, image_height;  Image image;  image_width=ii.getIconWidth();  image_height=ii.getIconHeight();  image=ii.getImage();  LinkRaster.write(x1,y1,image,image_width,image_height,properties,dos);}  }
class C{  boolean hasConnections(final Operator op){  for (  Port port : op.getInputPorts().getAllPorts()) {    if (port.isConnected()) {      return true;    }  }  for (  Port port : op.getOutputPorts().getAllPorts()) {    if (port.isConnected()) {      return true;    }  }  return false;}  }
class C{  public void triggerRelayout(){  needsRelayout=true;  requestLayout();}  }
class C{  public void go(OutputStream out) throws IOException {  go(new VCardWriter(out,getVCardWriterConstructorVersion()));}  }
class C{  @Override protected void onSizeChanged(int w,int h,int oldw,int oldh){  super.onSizeChanged(w,h,oldw,oldh);  setupBounds(w,h);  setupPaints();  invalidate();}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if (e.getSource() == splitPane) {    String changeName=e.getPropertyName();    if (changeName == JSplitPane.ORIENTATION_PROPERTY) {      orientation=splitPane.getOrientation();      resetLayoutManager();    } else     if (changeName == JSplitPane.CONTINUOUS_LAYOUT_PROPERTY) {      setContinuousLayout(splitPane.isContinuousLayout());      if (!isContinuousLayout()) {        if (nonContinuousLayoutDivider == null) {          setNonContinuousLayoutDivider(createDefaultNonContinuousLayoutDivider(),true);        } else         if (nonContinuousLayoutDivider.getParent() == null) {          setNonContinuousLayoutDivider(nonContinuousLayoutDivider,true);        }      }    } else     if (changeName == JSplitPane.DIVIDER_SIZE_PROPERTY) {      divider.setDividerSize(splitPane.getDividerSize());      dividerSize=divider.getDividerSize();      splitPane.revalidate();      splitPane.repaint();    }  }}  }
class C{  public static BloomFilter createOptimalFilter(int n,double falsePositiveProbability,UpdateMode update){  return createOptimalFilter(n,falsePositiveProbability,Math.abs(new SecureRandom().nextInt()),update);}  }
class C{  public void registerOutput(String varName) throws DMLRuntimeException {  if (!(DMLScript.rtplatform == RUNTIME_PLATFORM.SPARK || DMLScript.rtplatform == RUNTIME_PLATFORM.HYBRID_SPARK)) {    throw new DMLRuntimeException("The registerOutput functionality only supported for spark runtime. Please use MLContext(sc) instead of default constructor.");  }  if (_outVarnames == null)   _outVarnames=new ArrayList<String>();  _outVarnames.add(varName);  if (_variables == null)   _variables=new LocalVariableMap();}  }
class C{  private void checkConnectivity(State state) throws StopRequest {switch (mService.getNetworkAvailabilityState(mDB)) {case DownloaderService.NETWORK_OK:    return;case DownloaderService.NETWORK_NO_CONNECTION:  throw new StopRequest(DownloaderService.STATUS_WAITING_FOR_NETWORK,"waiting for network to return");case DownloaderService.NETWORK_TYPE_DISALLOWED_BY_REQUESTOR:throw new StopRequest(DownloaderService.STATUS_QUEUED_FOR_WIFI_OR_CELLULAR_PERMISSION,"waiting for wifi or for download over cellular to be authorized");case DownloaderService.NETWORK_CANNOT_USE_ROAMING:throw new StopRequest(DownloaderService.STATUS_WAITING_FOR_NETWORK,"roaming is not allowed");case DownloaderService.NETWORK_UNUSABLE_DUE_TO_SIZE:throw new StopRequest(DownloaderService.STATUS_QUEUED_FOR_WIFI,"waiting for wifi");}}  }
class C{  public void recycle(){synchronized (sPool) {    if (sPool.size() < MAX_POOL_SIZE) {      sPool.add(this);    }  }}  }
class C{  protected void boundsCheck(int i){  if (i < 0)   throw new ArrayIndexOutOfBoundsException("Attempted to access negative index of OVector.");}  }
class C{  public static String leftPad(Object value,int width,String pad) throws Exception {  return pad(1,value,width,pad);}  }
class C{  private void buildClanAndModelModel() throws IOException {  clanData=new PfamClanData();  parsePfamASeed();  parsePfamC();}  }
class C{  public static ModifiableDoubleDBIDList newDistanceDBIDList(){  return DBIDFactory.FACTORY.newDistanceDBIDList();}  }
class C{  public void intentToAppSettings(@NonNull Activity activity){  Intent intent=new Intent(ACTION_APPLICATION_DETAILS_SETTINGS);  intent.setData(Uri.parse("package:" + mContext.getPackageName()));  if (intent.resolveActivity(activity.getPackageManager()) != null) {    activity.startActivity(intent);  } else {    intent=new Intent(ACTION_MANAGE_APPLICATIONS_SETTINGS);    if (intent.resolveActivity(activity.getPackageManager()) != null) {      activity.startActivity(intent);    }  }}  }
class C{  public void addPredicateStatement(MemStatement st){  if (predicateStatements == null) {    predicateStatements=new MemStatementList(4);  }  predicateStatements.add(st);}  }
class C{  public static File createTempDir(String prefix){  File baseDir=new File(System.getProperty("java.io.tmpdir"));  String baseName=prefix + System.currentTimeMillis() + "-";  for (int counter=0; counter < 10000; counter++) {    File tempDir=new File(baseDir,baseName + counter);    if (tempDir.mkdir()) {      return tempDir;    }  }  throw new IllegalStateException("Failed to create directory within " + 10000 + " attempts (tried "+ baseName+ "0 to "+ baseName+ (10000 - 1)+ ')');}  }
class C{  @Override public synchronized void updateInt(int columnIndex,int x) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setInt(columnIndex,x);  } else {    this.inserter.setInt(columnIndex,x);    this.thisRow.setColumnValue(columnIndex - 1,this.inserter.getBytesRepresentation(columnIndex - 1));  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  requestIds=new HashMap<String,String>();  blueSwatch=(Button)findViewById(R.id.blueswatch);  purpleSwatch=(Button)findViewById(R.id.purpleswatch);  greenSwatch=(Button)findViewById(R.id.greenswatch);  clicksLeft=(TextView)findViewById(R.id.numClicks);  centerButton=(Button)findViewById(R.id.button);}  }
class C{  public QRDecomposition(double[][] A){  this(A,A.length,A[0].length);}  }
class C{  public void begin() throws Exception {  if (txContext.isInTransaction()) {    throw new javax.jms.IllegalStateException("Session already has an active transaction");  }  txContext.begin();}  }
class C{  public static float smoothPulse(float a1,float a2,float b1,float b2,float x){  if (x < a1 || x >= b2)   return 0;  if (x >= a2) {    if (x < b1)     return 1.0f;    x=(x - b1) / (b2 - b1);    return 1.0f - (x * x * (3.0f - 2.0f * x));  }  x=(x - a1) / (a2 - a1);  return x * x * (3.0f - 2.0f * x);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public QueryStringQueryBuilder useDisMax(boolean useDisMax){  this.useDisMax=useDisMax;  return this;}  }
class C{  public WindowsProtocolShellAssociation(String executable,String protocol,String name){  super(executable);  this.protocol="Software\\Classes\\" + protocol;  this.name=name;}  }
class C{  private byte[] decode(final String source){  int sLen=source.length();  if (sLen == 0) {    return new byte[0];  }  int sIx=0, eIx=sLen - 1;  while (sIx < eIx && Base64InputStream.IA[source.charAt(sIx) & 0xff] < 0) {    sIx++;  }  while (eIx > 0 && Base64InputStream.IA[source.charAt(eIx) & 0xff] < 0) {    eIx--;  }  int pad=source.charAt(eIx) == '=' ? source.charAt(eIx - 1) == '=' ? 2 : 1 : 0;  int cCnt=eIx - sIx + 1;  int sepCnt=sLen > 76 ? (source.charAt(76) == '\r' ? cCnt / 78 : 0) << 1 : 0;  int len=((cCnt - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  int d=0;  for (int eLen=len / 3 * 3; d < eLen; ) {    int i=Base64InputStream.IA[source.charAt(sIx++)] << 18 | Base64InputStream.IA[source.charAt(sIx++)] << 12 | Base64InputStream.IA[source.charAt(sIx++)] << 6 | Base64InputStream.IA[source.charAt(sIx++)];    dArr[d++]=(byte)(i >> 16);    dArr[d++]=(byte)(i >> 8);    dArr[d++]=(byte)i;  }  if (d < len) {    int i=0;    for (int j=0; sIx <= eIx - pad; j++) {      i|=Base64InputStream.IA[source.charAt(sIx++)] << 18 - j * 6;    }    for (int r=16; d < len; r-=8) {      dArr[d++]=(byte)(i >> r);    }  }  return dArr;}  }
class C{  private static void checkArguments(final Window parent,final IDebugger debugger){  Preconditions.checkNotNull(parent,"IE01434: Parent argument can not be null");  Preconditions.checkNotNull(debugger,"IE01433: Debugger argument can not be null");}  }
class C{  protected XBLOMContentElement(){}  }
class C{  public static int darker(int color,float factor){  int a=Color.alpha(color);  int r=Color.red(color);  int g=Color.green(color);  int b=Color.blue(color);  return Color.argb(a,Math.max((int)(r * factor),0),Math.max((int)(g * factor),0),Math.max((int)(b * factor),0));}  }
class C{  public void xembed(long window){  if (embedder != null) {    embedder.add(window);  }}  }
class C{  private void cancelNotifications(){  final NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  nm.cancel(NOTIFICATION_ID);  final List<BluetoothDevice> managedDevices=getManagedDevices();  for (  final BluetoothDevice device : managedDevices) {    nm.cancel(device.getAddress(),NOTIFICATION_ID);  }}  }
class C{  void checkLocation(Location loc,String label,String expectedSourceName,String expectedSourcePath,int expectedLinenumber) throws Exception {  String sourceName=loc.sourceName();  if (sourceName.equals(expectedSourceName)) {    println(label + " sourceName: " + sourceName);  } else {    failure("FAIL: " + label + " expected sourceName "+ expectedSourceName+ " got - "+ sourceName);  }  String sourcePath=loc.sourcePath();  if (sourcePath.equals(expectedSourcePath)) {    println(label + " sourcePath: " + sourcePath);  } else {    failure("FAIL: " + label + " expected sourcePath "+ expectedSourcePath+ " got - "+ sourcePath);  }  int ln=loc.lineNumber();  if (ln == expectedLinenumber) {    println(label + " line number: " + ln);  } else {    failure("FAIL: " + label + " expected line number "+ expectedLinenumber+ " got - "+ ln);  }}  }
class C{  public BufferedImage paint(final Graphics graphics,boolean buffered,boolean shared){synchronized (Display2D.this.simulation.state.schedule) {    BufferedImage result=null;    Rectangle2D clip=computeClip();    if (!buffered)     paintUnbuffered((Graphics2D)graphics,clip); else     result=paintBuffered((Graphics2D)graphics,clip);    if (!shared)     buffer=null;    if (result != null)     result.flush();    return result;  }}  }
class C{  static public byte[] decode(char[] data){  int tempLen=data.length;  for (  char element : data) {    if ((element > 255) || codes[element] < 0)     --tempLen;  }  int len=(tempLen / 4) * 3;  if ((tempLen % 4) == 3)   len+=2;  if ((tempLen % 4) == 2)   len+=1;  byte[] out=new byte[len];  int shift=0;  int accum=0;  int index=0;  for (  char element : data) {    int value=(element > 255) ? -1 : codes[element];    if (value >= 0) {      accum<<=6;      shift+=6;      accum|=value;      if (shift >= 8) {        shift-=8;        out[index++]=(byte)((accum >> shift) & 0xff);      }    }  }  if (index != out.length) {    throw new Error("Miscalculated data length (wrote " + index + " instead of "+ out.length+ ")");  }  return out;}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  @ObjectiveCName("tupleWithT1:withT2:withT3:withT4:") public static <T1,T2,T3,T4>Promise<Tuple4<T1,T2,T3,T4>> tuple(Promise<T1> t1,Promise<T2> t2,Promise<T3> t3,Promise<T4> t4){  return PromisesArray.ofPromises((Promise<Object>)t1,(Promise<Object>)t2,(Promise<Object>)t3,(Promise<Object>)t4).zip().map(null);}  }
class C{  public boolean exists(){  return scanner != null;}  }
class C{  public void remove(int index){  modCount++;  data.remove(index);}  }
class C{  public int hashCode(){  int myPosition=position;  int hash=0;  while (myPosition < limit) {    hash=hash + get(myPosition++);  }  return hash;}  }
class C{  @Override public StepObject copy(){  return new StepObject(this);}  }
class C{  @Override public boolean isCancelled(){  return cancelled;}  }
class C{  public void update(){  updateColor();  updateText();}  }
class C{  public void fixStatsError(int sendCommand){  for (; this.affectedRows.size() < sendCommand; ) {    this.affectedRows.add(Statement.EXECUTE_FAILED);    this.insertId.add(null);  }}  }
class C{  protected Command createReadFileCommand(@Nullable NodeConfig node) throws AgentException {  if (node == null) {    return CommandLibrary.createTailCommand(getPuppetLogFile(),SELECTION_BYTES_NUMBER,useSudo());  } else {    return CommandLibrary.createTailCommand(getPuppetLogFile(),SELECTION_BYTES_NUMBER,node,useSudo());  }}  }
class C{  public static byte[] decode(final byte[] source,final int off,final int len,final int options){  byte[] DECODABET=Base64.getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= Base64.WHITE_SPACE_ENC) {      if (sbiDecode >= Base64.EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=Base64.decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (sbiCrop == Base64.EQUALS_SIGN) {            break;          }        }      }    } else {      System.err.println("Bad Base64 input character at " + i + ": "+ source[i]+ "(decimal)");      return null;    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public static boolean isFireRockets(final GameData data){  final boolean isFireRockets;  data.acquireReadLock();  try {    final String prop=data.getSequence().getStep().getProperties().getProperty(GameStep.PROPERTY_fireRockets);    if (prop != null) {      isFireRockets=Boolean.parseBoolean(prop);    } else     if (games.strategy.triplea.Properties.getWW2V2(data) || games.strategy.triplea.Properties.getWW2V3(data)) {      isFireRockets=isCombatDelegate(data);    } else {      isFireRockets=isNonCombatDelegate(data);    }  }  finally {    data.releaseReadLock();  }  return isFireRockets;}  }
class C{  public static Name fullName(JCTree tree){  tree=skipParens(tree);switch (tree.getTag()) {case IDENT:    return ((JCIdent)tree).name;case SELECT:  Name sname=fullName(((JCFieldAccess)tree).selected);return sname == null ? null : sname.append('.',name(tree));default :return null;}}  }
class C{  public void showRuntimeStats(){  long f=frames;  long t=System.currentTimeMillis() - startrun;  Runtime r=Runtime.getRuntime();  String this_sim=" trial number      : " + trials + " (counts down)\n"+ " sim time          : "+ sim_time+ " milliseconds\n"+ " timestep          : "+ timestep+ " milliseconds\n"+ " timeout           : "+ timeout+ " milliseconds\n";  if (pause) {    this_sim=this_sim + " frames/second : N/A while paused\n" + " free memory         : "+ r.freeMemory()+ "\n"+ " total memory        : "+ r.totalMemory()+ "\n"+ " os.name             : "+ System.getProperty("os.name")+ "\n"+ " os.version          : "+ System.getProperty("os.version")+ "\n"+ " os.arch             : "+ System.getProperty("os.arch")+ "\n"+ " java.version        : "+ System.getProperty("java.version")+ "\n";  } else {    double rate=1000 * (double)frames / (double)t;    this_sim=this_sim + " frames/second : " + rate+ "\n"+ " free memory : "+ r.freeMemory()+ "\n"+ " total memory        : "+ r.totalMemory()+ "\n"+ " os.name     : "+ System.getProperty("os.name")+ "\n"+ " os.version  : "+ System.getProperty("os.version")+ "\n"+ " os.arch     : "+ System.getProperty("os.arch")+ "\n"+ " java.version        : "+ System.getProperty("java.version")+ "\n";  }  Dialog tmp;  if (graphics_on)   tmp=new DialogMessage(parent,"Runtime Stats",this_sim); else   System.out.println(this_sim);}  }
class C{  @Override public Object clone(){  try {    ZipEntry result=(ZipEntry)super.clone();    result.extra=extra != null ? extra.clone() : null;    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public Unpack(ByteBuffer buf){  this(buf.array(),buf.position(),buf.limit() - buf.position());}  }
class C{  private void updateMemberRegion(ObjectName mbeanName) throws IOException {  try {    String memberName=mbeanName.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);    Cluster.Member member=cluster.getMembersHMap().get(memberName);    AttributeList attributeList=this.mbs.getAttributes(mbeanName,PulseConstants.REGION_MBEAN_ATTRIBUTES);    String regionFullPathKey=null;    for (int i=0; i < attributeList.size(); i++) {      Attribute attribute=(Attribute)attributeList.get(i);      if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_FULLPATH)) {        regionFullPathKey=getStringAttribute(attribute.getValue(),attribute.getName());        break;      }    }    if (null == member) {      member=new Cluster.Member();      member.setName(memberName);      cluster.getMembersHMap().put(memberName,member);    }    Cluster.Region region=member.getMemberRegions().get(regionFullPathKey);    if (null == region) {      region=new Cluster.Region();      member.getMemberRegions().put(regionFullPathKey,region);      member.setTotalRegionCount(member.getTotalRegionCount() + 1);    }    region.setFullPath(regionFullPathKey);    for (int i=0; i < attributeList.size(); i++) {      Attribute attribute=(Attribute)attributeList.get(i);      String name=attribute.getName();switch (name) {case PulseConstants.MBEAN_ATTRIBUTE_FULLPATH:        region.setFullPath(getStringAttribute(attribute.getValue(),attribute.getName()));      break;case PulseConstants.MBEAN_ATTRIBUTE_DISKREADSRATE:    region.setDiskReadsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));  break;case PulseConstants.MBEAN_ATTRIBUTE_DISKWRITESRATE:region.setDiskWritesRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_GETSRATE:region.setGetsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_LRUEVICTIONRATE:region.setLruEvictionRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_PUTSRATE:region.setPutsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_REGIONTYPE:region.setRegionType(getStringAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_MEMBERCOUNT:region.setMemberCount(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_ENTRYSIZE:region.setEntrySize(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_ENTRYCOUNT:region.setSystemRegionEntryCount(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_NAME:region.setName(getStringAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_PERSISTENTENABLED:region.setPersistentEnabled(getBooleanAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_GATEWAYENABLED:region.setWanEnabled(getBooleanAttribute(attribute.getValue(),attribute.getName()));break;}}} catch (InstanceNotFoundException infe) {LOGGER.warning(infe);}catch (ReflectionException re) {LOGGER.warning(re);}}  }
class C{  public JCExpression Select(JCExpression base,Symbol sym){  return new JCFieldAccess(base,sym.name,sym).setPos(pos).setType(sym.type);}  }
class C{  public boolean collides(final double x,final double y,double w,double h){  return getResistance(x,y,w,h) > COLLIDE_THRESHOLD;}  }
class C{  public synchronized void dump(){  for (  Map.Entry<Thread,ThreadStatus> entry : mThreadStatus.entrySet()) {    Log.v(TAG,"[Dump] Thread " + entry.getKey() + " ("+ entry.getKey().getId()+ ")'s status is "+ entry.getValue());  }}  }
class C{  public void resize(int newColumns,int newRows,int newTotalRows,int[] cursor,long currentStyle,boolean altScreen){  if (newColumns == mColumns && newRows <= mTotalRows) {    int shiftDownOfTopRow=mScreenRows - newRows;    if (shiftDownOfTopRow > 0 && shiftDownOfTopRow < mScreenRows) {      for (int i=mScreenRows - 1; i > 0; i--) {        if (cursor[1] >= i)         break;        int r=externalToInternalRow(i);        if (mLines[r] == null || mLines[r].isBlank()) {          if (--shiftDownOfTopRow == 0)           break;        }      }    } else     if (shiftDownOfTopRow < 0) {      int actualShift=Math.max(shiftDownOfTopRow,-mActiveTranscriptRows);      if (shiftDownOfTopRow != actualShift) {        for (int i=0; i < actualShift - shiftDownOfTopRow; i++)         allocateFullLineIfNecessary((mScreenFirstRow + mScreenRows + i) % mTotalRows).clear(currentStyle);        shiftDownOfTopRow=actualShift;      }    }    mScreenFirstRow+=shiftDownOfTopRow;    mScreenFirstRow=(mScreenFirstRow < 0) ? (mScreenFirstRow + mTotalRows) : (mScreenFirstRow % mTotalRows);    mTotalRows=newTotalRows;    mActiveTranscriptRows=altScreen ? 0 : Math.max(0,mActiveTranscriptRows + shiftDownOfTopRow);    cursor[1]-=shiftDownOfTopRow;    mScreenRows=newRows;  } else {    TerminalRow[] oldLines=mLines;    mLines=new TerminalRow[newTotalRows];    for (int i=0; i < newTotalRows; i++)     mLines[i]=new TerminalRow(newColumns,currentStyle);    final int oldActiveTranscriptRows=mActiveTranscriptRows;    final int oldScreenFirstRow=mScreenFirstRow;    final int oldScreenRows=mScreenRows;    final int oldTotalRows=mTotalRows;    mTotalRows=newTotalRows;    mScreenRows=newRows;    mActiveTranscriptRows=mScreenFirstRow=0;    mColumns=newColumns;    int newCursorRow=-1;    int newCursorColumn=-1;    int oldCursorRow=cursor[1];    int oldCursorColumn=cursor[0];    boolean newCursorPlaced=false;    int currentOutputExternalRow=0;    int currentOutputExternalColumn=0;    int skippedBlankLines=0;    for (int externalOldRow=-oldActiveTranscriptRows; externalOldRow < oldScreenRows; externalOldRow++) {      int internalOldRow=oldScreenFirstRow + externalOldRow;      internalOldRow=(internalOldRow < 0) ? (oldTotalRows + internalOldRow) : (internalOldRow % oldTotalRows);      TerminalRow oldLine=oldLines[internalOldRow];      boolean cursorAtThisRow=externalOldRow == oldCursorRow;      if (oldLine == null || (!(!newCursorPlaced && cursorAtThisRow)) && oldLine.isBlank()) {        skippedBlankLines++;        continue;      } else       if (skippedBlankLines > 0) {        for (int i=0; i < skippedBlankLines; i++) {          if (currentOutputExternalRow == mScreenRows - 1) {            scrollDownOneLine(0,mScreenRows,currentStyle);          } else {            currentOutputExternalRow++;          }          currentOutputExternalColumn=0;        }        skippedBlankLines=0;      }      int lastNonSpaceIndex=0;      boolean justToCursor=false;      if (cursorAtThisRow || oldLine.mLineWrap) {        lastNonSpaceIndex=oldLine.getSpaceUsed();        if (cursorAtThisRow)         justToCursor=true;      } else {        for (int i=0; i < oldLine.getSpaceUsed(); i++)         if (oldLine.mText[i] != ' ')         lastNonSpaceIndex=i + 1;      }      int currentOldCol=0;      long styleAtCol=0;      for (int i=0; i < lastNonSpaceIndex; i++) {        char c=oldLine.mText[i];        int codePoint=(Character.isHighSurrogate(c)) ? Character.toCodePoint(c,oldLine.mText[++i]) : c;        int displayWidth=WcWidth.width(codePoint);        if (displayWidth > 0)         styleAtCol=oldLine.getStyle(currentOldCol);        if (currentOutputExternalColumn + displayWidth > mColumns) {          setLineWrap(currentOutputExternalRow);          if (currentOutputExternalRow == mScreenRows - 1) {            if (newCursorPlaced)             newCursorRow--;            scrollDownOneLine(0,mScreenRows,currentStyle);          } else {            currentOutputExternalRow++;          }          currentOutputExternalColumn=0;        }        int offsetDueToCombiningChar=((displayWidth <= 0 && currentOutputExternalColumn > 0) ? 1 : 0);        int outputColumn=currentOutputExternalColumn - offsetDueToCombiningChar;        setChar(outputColumn,currentOutputExternalRow,codePoint,styleAtCol);        if (displayWidth > 0) {          if (oldCursorRow == externalOldRow && oldCursorColumn == currentOldCol) {            newCursorColumn=currentOutputExternalColumn;            newCursorRow=currentOutputExternalRow;            newCursorPlaced=true;          }          currentOldCol+=displayWidth;          currentOutputExternalColumn+=displayWidth;          if (justToCursor && newCursorPlaced)           break;        }      }      if (externalOldRow != (oldScreenRows - 1) && !oldLine.mLineWrap) {        if (currentOutputExternalRow == mScreenRows - 1) {          if (newCursorPlaced)           newCursorRow--;          scrollDownOneLine(0,mScreenRows,currentStyle);        } else {          currentOutputExternalRow++;        }        currentOutputExternalColumn=0;      }    }    cursor[0]=newCursorColumn;    cursor[1]=newCursorRow;  }  if (cursor[0] < 0 || cursor[1] < 0)   cursor[0]=cursor[1]=0;}  }
class C{  public Path createPluginList(){  if (pluginList == null) {    pluginList=new Path(getProject());  }  return pluginList.createPath();}  }
class C{  public void handleKeyPress(XEvent xev){  XKeyEvent xkey=xev.get_xkey();  if (log.isLoggable(PlatformLogger.Level.FINE)) {    log.fine(xkey.toString());  }  if (isEventDisabled(xev)) {    return;  }  final Component currentSource=(Component)getEventSource();  handleKeyPress(xkey);}  }
class C{  private void block(long timeout) throws InterruptedException {  long start=System.currentTimeMillis();  while (!isDone() && !isCancelled()) {    if (timeout > BLOCK_INDEFINITELY) {      long now=System.currentTimeMillis();      if (now > start + timeout) {        break;      }    }    Thread.sleep(checkCompletedInterval);  }}  }
class C{  public static char[] encode(final byte[] data){  final char[] out=new char[((data.length + 2) / 3) * 4];  for (int i=0, index=0; i < data.length; i+=3, index+=4) {    boolean quad=false;    boolean trip=false;    int val=(0xFF & data[i]);    val<<=8;    if ((i + 1) < data.length) {      val|=(0xFF & data[i + 1]);      trip=true;    }    val<<=8;    if ((i + 2) < data.length) {      val|=(0xFF & data[i + 2]);      quad=true;    }    out[index + 3]=alphabet[quad ? (val & 0x3F) : 64];    val>>=6;    out[index + 2]=alphabet[(trip ? (val & 0x3F) : 64)];    val>>=6;    out[index + 1]=alphabet[val & 0x3F];    val>>=6;    out[index]=alphabet[val & 0x3F];  }  return out;}  }
class C{  public double nextDouble(double a){  double u, v, p, q;  int k;  if (a != a_prev) {    a_prev=a;    if (a < 0.97)     t=-a / Math.log(1.0 - a); else     h=Math.log(1.0 - a);  }  u=randomGenerator.nextDouble();  if (a < 0.97) {    k=1;    p=t;    while (u > p) {      u-=p;      k++;      p*=a * (k - 1.0) / (double)k;    }    return k;  }  if (u > a)   return 1;  u=randomGenerator.nextDouble();  v=u;  q=1.0 - Math.exp(v * h);  if (u <= q * q) {    k=(int)(1 + Math.log(u) / Math.log(q));    return k;  }  if (u > q)   return 1;  return 2;}  }
class C{  public void updateTask(){  double distanceToTargetSq=this.entityHost.getDistanceSq(this.attackTarget.posX,this.attackTarget.getEntityBoundingBox().minY,this.attackTarget.posZ);  boolean canSee=this.entityHost.getEntitySenses().canSee(this.attackTarget);  if (canSee) {    lastKnownShootLocation=new Vec3d(attackTarget.prevPosX,attackTarget.prevPosY,attackTarget.prevPosZ);    shootPatienceTime=60;    ++this.pathRetryTimer;  } else {    this.pathRetryTimer=0;  }  manageMovingToLastKnowMoveLocation(distanceToTargetSq);  if (shootPatienceTime == 0) {    lastKnownShootLocation=null;  }  if (lastKnownShootLocation != null) {    manageShooting(canSee,distanceToTargetSq);    shootPatienceTime--;  } else {    this.entityHost.getLookHelper().setLookPosition(attackTarget.posX,attackTarget.posY + attackTarget.getEyeHeight(),attackTarget.posZ,30.0F,30.0F);  }}  }
class C{  private Favorite packFavorite(Cursor c){  Favorite favorite=new Favorite();  favorite.id=c.getLong(ID_INDEX);  favorite.screen=c.getInt(SCREEN_INDEX);  favorite.container=c.getInt(CONTAINER_INDEX);  favorite.cellX=c.getInt(CELLX_INDEX);  favorite.cellY=c.getInt(CELLY_INDEX);  favorite.spanX=c.getInt(SPANX_INDEX);  favorite.spanY=c.getInt(SPANY_INDEX);  favorite.iconType=c.getInt(ICON_TYPE_INDEX);  if (favorite.iconType == Favorites.ICON_TYPE_RESOURCE) {    String iconPackage=c.getString(ICON_PACKAGE_INDEX);    if (!TextUtils.isEmpty(iconPackage)) {      favorite.iconPackage=iconPackage;    }    String iconResource=c.getString(ICON_RESOURCE_INDEX);    if (!TextUtils.isEmpty(iconResource)) {      favorite.iconResource=iconResource;    }  }  if (favorite.iconType == Favorites.ICON_TYPE_BITMAP) {    byte[] blob=c.getBlob(ICON_INDEX);    if (blob != null && blob.length > 0) {      favorite.icon=blob;    }  }  String title=c.getString(TITLE_INDEX);  if (!TextUtils.isEmpty(title)) {    favorite.title=title;  }  String intentDescription=c.getString(INTENT_INDEX);  if (!TextUtils.isEmpty(intentDescription)) {    try {      Intent intent=Intent.parseUri(intentDescription,0);      intent.removeExtra(ItemInfo.EXTRA_PROFILE);      favorite.intent=intent.toUri(0);    } catch (    URISyntaxException e) {      Log.e(TAG,"Invalid intent",e);    }  }  favorite.itemType=c.getInt(ITEM_TYPE_INDEX);  if (favorite.itemType == Favorites.ITEM_TYPE_APPWIDGET) {    favorite.appWidgetId=c.getInt(APPWIDGET_ID_INDEX);    String appWidgetProvider=c.getString(APPWIDGET_PROVIDER_INDEX);    if (!TextUtils.isEmpty(appWidgetProvider)) {      favorite.appWidgetProvider=appWidgetProvider;    }  }  return favorite;}  }
class C{  @Override public int export(ConstantPool target){  int entryIndex=_entry.export(target);  return target.addMethodHandle(_type,target.getEntry(entryIndex)).getIndex();}  }
class C{  @Override @SuppressWarnings("unchecked") public boolean remove(Object o){  if (o == null) {    return false;  }  for (int targetIndex=0; targetIndex < size; targetIndex++) {    if (o.equals(elements[targetIndex])) {      removeAt(targetIndex);      return true;    }  }  return false;}  }
class C{  public void removeYTextLabel(double y){  removeYTextLabel(y,0);}  }
class C{  protected void shutdown(){  alert[0]=0;  alert[1]=0;  recordProtocol=null;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return ERROR;case 3:return TYPE;default :return null;}}  }
class C{  public <T>TSink<T> publish(TStream<T> stream,Function<T,String> topic,Function<T,byte[]> payload,Function<T,Integer> qos,Function<T,Boolean> retain){  return stream.sink(new MqttPublisher<T>(connector,payload,topic,qos,retain));}  }
class C{  public JspIntegration2ITCase(String name){  super(name);}  }
class C{  private void closeConnection(){  disconnect();  if (log.isLoggable(Level.FINE)) {    _dbgId=(port().address() + ":" + port().port()+ "-"+ _connectionId);    Thread.currentThread().setName(_dbgId);  }}  }
class C{  public double doCrossValidation(Iterable<T> data,int dataSize) throws InterruptedException, ExecutionException {  stats=new OneVariableStats();  log.info("Starting cross validation at " + (new Date()));  log.info("Splitting data into " + numFolds + " folds");  List<List<T>> splits=splitData(data,dataSize);  log.info("Splitting complete.");  ExecutorService executor=Executors.newFixedThreadPool(numThreads);  List<FutureTask<Double>> folds=new ArrayList<>();  for (int i=0; i < numFolds; i++) {    List<T> trainingSet=new ArrayList<>();    for (int j=0; j < numFolds; j++) {      if (j != i)       trainingSet.addAll(splits.get(j));    }    List<T> testSet=splits.get(i);    FutureTask<Double> fold=createFoldTask(trainingSet,testSet,i);    executor.execute(fold);    folds.add(fold);  }  executor.shutdown();  executor.awaitTermination(timeoutSeconds,TimeUnit.SECONDS);  for (  FutureTask<Double> fold : folds) {    stats.add(fold.get());  }  log.info("Cross validation complete at " + (new Date()));  return stats.mean();}  }
class C{  public void prepareMatrixOffset(boolean inverted){  mMatrixOffset.reset();  if (!inverted)   mMatrixOffset.postTranslate(mViewPortHandler.offsetLeft(),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom()); else {    mMatrixOffset.setTranslate(-(mViewPortHandler.getChartWidth() - mViewPortHandler.offsetRight()),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom());    mMatrixOffset.postScale(-1.0f,1.0f);  }}  }
class C{  default B addPages(final String... pages){  this.meta().addPages(pages);  return this.getBuilder();}  }
class C{  private void handlePopup(final MouseEvent e){  if (model.getAttribute().isNumerical()) {    popupAttributeNumericalStatPanel.show(e.getComponent(),e.getX(),e.getY());  } else   if (model.getAttribute().isNominal()) {    popupAttributeNominalStatPanel.show(e.getComponent(),e.getX(),e.getY());  } else   if (model.getAttribute().isDateTime()) {    popupAttributeDateTimeStatPanel.show(e.getComponent(),e.getX(),e.getY());  }}  }
class C{  private void removeDir(VirtualFile psiDirectory){  if (!myDirectory2Children.containsKey(psiDirectory)) {    throw new IllegalArgumentException("directory is not in the tree: " + psiDirectory);  }  List<VirtualFile> children=myDirectory2Children.remove(psiDirectory);  if (children == null) {    throw new IllegalArgumentException("directory has no children list: " + psiDirectory);  }  if (children.size() > 0) {    throw new IllegalArgumentException("directory isn't empty: " + psiDirectory);  }  myStrictDirectory2Children.remove(psiDirectory);  List<VirtualFile> dirsToBeRemoved=null;  for (  VirtualFile _directory : myDirectory2Children.keySet()) {    children=myDirectory2Children.get(_directory);    LOG.assertTrue(children != null);    if (children.contains(psiDirectory)) {      children.remove(psiDirectory);      if (children.size() == 0) {        if (dirsToBeRemoved == null) {          dirsToBeRemoved=new ArrayList<VirtualFile>(2);        }        dirsToBeRemoved.add(_directory);      }    }  }  if (dirsToBeRemoved != null) {    for (    VirtualFile dirToBeRemoved : dirsToBeRemoved) {      removeDir(dirToBeRemoved);    }  }}  }
class C{  public boolean moveObject(final Object obj,Int2D from,Int2D to){  return moveObject(obj,from.x,from.y,to.x,to.y);}  }
class C{  public static void gotoEndOfComment(Vector inputVec,IntPair curLoc) throws ParseAlgorithmException {  IntPair originalLoc=curLoc;  boolean found=false;  String curLine=(String)inputVec.elementAt(curLoc.one);  StringBuffer newLine=new StringBuffer(curLine.substring(0,curLoc.two));  curLoc.two=curLoc.two + 2;  while ((!found) && (curLoc.one < inputVec.size())) {    while ((!found) && (curLoc.two < curLine.length())) {      char c=curLine.charAt(curLoc.two);      if ((c == '(') && (curLoc.two + 1 < curLine.length()) && (curLine.charAt(curLoc.two + 1) == '*')) {        gotoEndOfComment(inputVec,curLoc);        curLine=(String)inputVec.elementAt(curLoc.one);      } else       if ((c == '*') && (curLoc.two + 1 < curLine.length()) && (curLine.charAt(curLoc.two + 1) == ')')) {        curLoc.two=curLoc.two + 2;        found=true;      } else {        curLoc.two++;      }    }    if (!found) {      curLoc.one++;      curLoc.two=0;      if (curLoc.one < inputVec.size()) {        curLine=(String)inputVec.elementAt(curLoc.one);      }    }  }  if (!found) {    throw new ParseAlgorithmException("Unterminated comment begun at line " + "\n    line " + (curLoc.one + 1) + ", column "+ (curLoc.two + 1));  }  return;}  }
class C{  void reorderActionPressed(ActionEvent e){  if (alreadyEditingActionOrVariable()) {    return;  }  _showReminder=true;  if (_actionList.size() <= 1) {    javax.swing.JOptionPane.showMessageDialog(editLogixFrame,rbx.getString("Error46"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);    return;  }  _nextInOrder=0;  _inReorderMode=true;  _actionTableModel.fireTableDataChanged();}  }
class C{  public boolean arrowScroll(int direction,boolean horizontal){  View currentFocused=findFocus();  if (currentFocused == this)   currentFocused=null;  View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,direction);  final int maxJump=horizontal ? getMaxScrollAmountHorizontal() : getMaxScrollAmountVertical();  if (!horizontal) {    if (nextFocused != null) {      nextFocused.getDrawingRect(mTempRect);      offsetDescendantRectToMyCoords(nextFocused,mTempRect);      int scrollDelta=computeScrollDeltaToGetChildRectOnScreen(mTempRect);      doScroll(0,scrollDelta);      nextFocused.requestFocus(direction);    } else {      int scrollDelta=maxJump;      if (direction == View.FOCUS_UP && getScrollY() < scrollDelta) {        scrollDelta=getScrollY();      } else       if (direction == View.FOCUS_DOWN) {        if (getChildCount() > 0) {          int daBottom=getChildAt(0).getBottom();          int screenBottom=getScrollY() + getHeight();          if (daBottom - screenBottom < maxJump) {            scrollDelta=daBottom - screenBottom;          }        }      }      if (scrollDelta == 0) {        return false;      }      doScroll(0,direction == View.FOCUS_DOWN ? scrollDelta : -scrollDelta);    }  } else {    if (nextFocused != null) {      nextFocused.getDrawingRect(mTempRect);      offsetDescendantRectToMyCoords(nextFocused,mTempRect);      int scrollDelta=computeScrollDeltaToGetChildRectOnScreen(mTempRect);      doScroll(scrollDelta,0);      nextFocused.requestFocus(direction);    } else {      int scrollDelta=maxJump;      if (direction == View.FOCUS_UP && getScrollY() < scrollDelta) {        scrollDelta=getScrollY();      } else       if (direction == View.FOCUS_DOWN) {        if (getChildCount() > 0) {          int daBottom=getChildAt(0).getBottom();          int screenBottom=getScrollY() + getHeight();          if (daBottom - screenBottom < maxJump) {            scrollDelta=daBottom - screenBottom;          }        }      }      if (scrollDelta == 0) {        return false;      }      doScroll(direction == View.FOCUS_DOWN ? scrollDelta : -scrollDelta,0);    }  }  return true;}  }
class C{  private static SimpleObject orderToJson(Order order){  Order rootOrder=Utils.getRootOrder(order);  order=getLatestVersion(rootOrder);  SimpleObject json=new SimpleObject();  if (order != null) {    json.add(UUID,rootOrder.getUuid());    json.add(VOIDED,order.isVoided());    if (order.isVoided()) {      return json;    }    json.add(PATIENT_UUID,order.getPatient().getUuid());    String instructions=order.getInstructions();    if (instructions != null) {      json.add(INSTRUCTIONS,instructions);    }    Date start=order.getScheduledDate();    if (start != null) {      json.add(START_MILLIS,start.getTime());    }    Date stop=firstNonNull(order.getDateStopped(),order.getAutoExpireDate());    json.add(STOP_MILLIS,stop == null ? null : stop.getTime());  }  return json;}  }
class C{  public TransactionStore(MVStore store,DataType dataType){  this.store=store;  this.dataType=dataType;  preparedTransactions=store.openMap("openTransactions",new MVMap.Builder<Integer,Object[]>());  VersionedValueType oldValueType=new VersionedValueType(dataType);  ArrayType undoLogValueType=new ArrayType(new DataType[]{new ObjectDataType(),dataType,oldValueType});  MVMap.Builder<Long,Object[]> builder=new MVMap.Builder<Long,Object[]>().valueType(undoLogValueType);  undoLog=store.openMap("undoLog",builder);  if (undoLog.getValueType() != undoLogValueType) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_TRANSACTION_CORRUPT,"Undo map open with a different value type");  }}  }
class C{  public void testOneQuery(){  final String TEST_LINE1="test line 1";  final String TEST_LINE2="test line 2";  mSearchHelper.saveRecentQuery(TEST_LINE1,TEST_LINE2);  mSearchHelper.waitForSave();  checkOpenCursorCount(1);  checkResultCounts(null,1,1,TEST_LINE1,TEST_LINE2);  checkResultCounts(TEST_LINE1,1,1,TEST_LINE1,TEST_LINE2);  checkResultCounts(TEST_LINE2,1,1,TEST_LINE1,TEST_LINE2);  checkResultCounts("bad filter",0,0,null,null);}  }
class C{  private void copyFldsDef(ArchiveFldsImpl flds){  ArchiveFldImpl nfld=null;  for (int i=0; i < flds.count(); i++) {    ArchiveFldImpl fld=(ArchiveFldImpl)flds.get(i);    nfld=new ArchiveFldImpl(fld.getId(),fld.getName(),fld.getType(),fld.getLen(),fld.isNullable(),fld.getColName(),fld.isDoc(),fld.isMult(),fld.getRemarks());    try {      _flds.addFld((ArchiveFld)nfld);    } catch (    Exception e) {    }  }}  }
class C{  public MultipartEntity(HttpMultipartMode mode,String boundary,Charset charset){  super();  if (boundary == null) {    boundary=generateBoundary();  }  this.boundary=boundary;  if (mode == null) {    mode=HttpMultipartMode.STRICT;  }  this.charset=charset != null ? charset : MIME.DEFAULT_CHARSET;  this.multipart=new HttpMultipart(multipartSubtype,this.charset,this.boundary,mode);  this.contentType=new BasicHeader(HTTP.CONTENT_TYPE,generateContentType(this.boundary,this.charset));  this.dirty=true;}  }
class C{  public static Motion createEaseOutMotion(int sourceValue,int destinationValue,int duration){  return createCubicBezierMotion(sourceValue,destinationValue,duration,0f,0f,0.58f,1.0f);}  }
class C{  public static int bitCount(int i){  i-=(i >> 1) & 0x55555555;  i=(i & 0x33333333) + ((i >> 2) & 0x33333333);  i=((i >> 4) + i) & 0x0F0F0F0F;  i+=i >> 8;  i+=i >> 16;  return i & 0x0000003F;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:10.868 -0500",hash_original_method="398C6FE70AB96657FEF885B5148F4235",hash_generated_method="DE25C8942CA27F8B6AE59DA6BCB1DAC2") private static synchronized InputStream contentUrlStream(String url){  if (url.startsWith(ANDROID_CONTENT)) {    try {      int mimeIndex=url.lastIndexOf('?');      if (mimeIndex != -1) {        url=url.substring(0,mimeIndex);      }      Uri uri=Uri.parse(url);      return sContext.getContentResolver().openInputStream(uri);    } catch (    Exception e) {      Log.e(LOGTAG,"Exception: " + url);      return null;    }  } else {    return null;  }}  }
class C{  public byte[] postedData(String url) throws IOException {  return getLatestExpectedConnection(url).getPostData();}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xE5959C36,version=271) public int sceUsbCamStillGetInputLength(){  return 0;}  }
class C{  private VarSymbol makeSyntheticVar(long flags,Name name,Type type,Symbol owner){  return new VarSymbol(flags | SYNTHETIC,name,type,owner);}  }
class C{  private void deleteNode(final INaviViewNode node){  for (int i=0; i < getChildCount(); i++) {    if (((CTaggedGraphNodeNode)getChildAt(i)).getGraphNode().getRawNode() == node) {      remove(i);      break;    }  }}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  private static File constructFilePaths(String file1,String file2){  File newPath;  if (file2.startsWith(file1)) {    newPath=new File(file2);  } else {    newPath=new File(file1 + "/" + file2);  }  return newPath;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static CC buildCC(int chain[],Instances D,Classifier g) throws Exception {  CC h=new CC();  h.prepareChain(chain);  h.setClassifier(g);  h.buildClassifier(new Instances(D));  return h;}  }
class C{  public DetallePrevisionVO selectLastRowByProcedimiento(String procedimiento){  StringBuffer qual=new StringBuffer("where ").append(ANO_FIN_EXPEDIENTES_COLUMN_NAME).append("=(").append("select max(").append(ANO_FIN_EXPEDIENTES_COLUMN_NAME).append(") ").append("from ").append(TABLE_NAME).append(" where ").append(DBUtils.generateEQTokenField(PROCEDIMIENTO_FIELD,procedimiento)).append(")");  return getDetallePrevision(qual.toString());}  }
class C{  public void fileChanged(String filename) throws Exception {  redeploy(filename);}  }
class C{  public void testCreateDeployableWhenOnlyLocationSpecified() throws Exception {  String deployableFile="testCreateDeployableWhenOnlyLocationSpecified.war";  Deployable deployableElement=new Deployable();  deployableElement.setLocation(deployableFile);  CargoProject project=createDefaultProject("war",new HashSet<Artifact>());  org.codehaus.cargo.container.deployable.Deployable deployable=deployableElement.createDeployable("whateverId",project);  assertEquals(deployable.getFile(),deployableFile);  assertEquals(project.getGroupId(),deployableElement.getGroupId());  assertEquals(project.getArtifactId(),deployableElement.getArtifactId());  assertEquals(project.getPackaging(),deployableElement.getType());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.DOCLET__LINE_TAGS:    getLineTags().clear();  getLineTags().addAll((Collection<? extends LineTag>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public int optInt(String key,int defaultValue){  try {    return this.getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected void sequence_BooleanLiteral(ISerializationContext context,BooleanLiteral semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isAllow_Info_Product(){  Object oo=get_Value(COLUMNNAME_Allow_Info_Product);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static Object unmaskNull(Object key){  return (key == NULL_KEY) ? null : key;}  }
class C{  public static int createNewFolderFromDistribution(String sessionID,Integer bookID,AxSf axsfNew,List inter,int assignedRegisterID,Integer launchDistOutRegister,BookTypeConf bookTypeConf,Locale locale,String entidad) throws BookException, SessionException, ValidationException {  boolean distributionRegIn=Configurator.getInstance().getPropertyBoolean(ConfigurationKeys.KEY_SERVER_DISTRIBUTION_REGISTER_IN_FROM_DISTRIBUTION);  FolderDataSession data=crearRegistro(sessionID,bookID,axsfNew,inter,assignedRegisterID,launchDistOutRegister,bookTypeConf,locale,entidad,false,false,distributionRegIn,null);  int newRegisterID=0;  if (data != null) {    newRegisterID=data.getNewRegisterID();  }  return newRegisterID;}  }
class C{  public static JsonElement immutable(JsonElement el){  if (el instanceof JsonObject) {    return new IJsonObject(el.getAsJsonObject());  } else   if (el instanceof JsonArray) {    return new IJsonArray(el.getAsJsonArray());  } else   if (el instanceof JsonPrimitive && el.getAsJsonPrimitive().isNumber()) {    return new JsonPrimitive(el.getAsBigDecimal());  }  return el;}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if ((target != null) && (e != null)) {    String[] temp=res.getImageResourceNames();    Arrays.sort(temp,String.CASE_INSENSITIVE_ORDER);    JComboBox jc=new JComboBox(temp);    final com.codename1.ui.Image img=res.getImage((String)jc.getSelectedItem());    JOptionPane.showMessageDialog(HTMLEditor.this,jc,"Pick",JOptionPane.PLAIN_MESSAGE);    if ((!target.isEditable()) || (!target.isEnabled()) && img != null) {      UIManager.getLookAndFeel().provideErrorFeedback(target);      return;    }    try {      ((HTMLEditorKit)wysiwyg.getEditorKit()).insertHTML((HTMLDocument)wysiwyg.getDocument(),wysiwyg.getCaret().getDot(),"<img width=\"" + img.getWidth() + "\" height=\""+ img.getHeight()+ "\" src=\"local://"+ jc.getSelectedItem()+ "\" />",0,0,HTML.Tag.IMG);    } catch (    Exception ex) {      ex.printStackTrace();    }  }}  }
class C{  public MockResultSet(Object beans[]){  if (beans == null) {    throw new NullPointerException();  }  this.beans=beans;  this.clazz=beans.getClass().getComponentType();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.SDISPLAY__NAME:    return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void updateYLocationsFrom(int location){  if (location >= 0 && location < getRowCount()) {    int counter, maxCounter, newYOrigin;    TreeStateNode aNode;    aNode=getNode(location);    newYOrigin=aNode.getYOrigin() + aNode.getPreferredHeight();    for (counter=location + 1, maxCounter=visibleNodes.size(); counter < maxCounter; counter++) {      aNode=(TreeStateNode)visibleNodes.elementAt(counter);      aNode.setYOrigin(newYOrigin);      newYOrigin+=aNode.getPreferredHeight();    }  }}  }
class C{  public long create(Category category){  return mDaoSession.getCategoryDao().insert(category);}  }
class C{  public Table(File file,String options) throws IOException {  init();  parse(PApplet.createInput(file),extensionOptions(true,file.getName(),options));}  }
class C{  public TypeVariable typeVariable(Type type){  return typeVariable(hierarchy.typeNode(type));}  }
class C{  @Override public void onCreate(SQLiteDatabase database){  String createArrivedTableStatement="CREATE TABLE " + ARRIVED_MESSAGE_TABLE_NAME + "("+ MqttServiceConstants.MESSAGE_ID+ " TEXT PRIMARY KEY, "+ MqttServiceConstants.CLIENT_HANDLE+ " TEXT, "+ MqttServiceConstants.DESTINATION_NAME+ " TEXT, "+ MqttServiceConstants.PAYLOAD+ " BLOB, "+ MqttServiceConstants.QOS+ " INTEGER, "+ MqttServiceConstants.RETAINED+ " TEXT, "+ MqttServiceConstants.DUPLICATE+ " TEXT, "+ MTIMESTAMP+ " INTEGER"+ ");";  traceHandler.traceDebug(TAG,"onCreate {" + createArrivedTableStatement + "}");  try {    database.execSQL(createArrivedTableStatement);    traceHandler.traceDebug(TAG,"created the table");  } catch (  SQLException e) {    traceHandler.traceException(TAG,"onCreate",e);    throw e;  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (multiplicity: ");  result.append(multiplicity);  result.append(')');  return result.toString();}  }
class C{  public boolean contains(Object obj){  if (!map.contains(obj))   return false;  int bitNum=map.getInt(obj);  return (bits[bitNum / 32] & (1 << (bitNum % 32))) != 0;}  }
class C{  private boolean isClosed(){  return str == null;}  }
class C{  private static float[] deriveTextBoundsAnchorOffsets(Graphics2D g2,String text,TextAnchor anchor,Rectangle2D textBounds){  float[] result=new float[3];  FontRenderContext frc=g2.getFontRenderContext();  Font f=g2.getFont();  FontMetrics fm=g2.getFontMetrics(f);  Rectangle2D bounds=getTextBounds(text,fm);  LineMetrics metrics=f.getLineMetrics(text,frc);  float ascent=metrics.getAscent();  result[2]=-ascent;  float halfAscent=ascent / 2.0f;  float descent=metrics.getDescent();  float leading=metrics.getLeading();  float xAdj=0.0f;  float yAdj=0.0f;  if (anchor.isHorizontalCenter()) {    xAdj=(float)-bounds.getWidth() / 2.0f;  } else   if (anchor.isRight()) {    xAdj=(float)-bounds.getWidth();  }  if (anchor.isTop()) {    yAdj=-descent - leading + (float)bounds.getHeight();  } else   if (anchor.isHalfAscent()) {    yAdj=halfAscent;  } else   if (anchor.isHorizontalCenter()) {    yAdj=-descent - leading + (float)(bounds.getHeight() / 2.0);  } else   if (anchor.isBaseline()) {    yAdj=0.0f;  } else   if (anchor.isBottom()) {    yAdj=-metrics.getDescent() - metrics.getLeading();  }  if (textBounds != null) {    textBounds.setRect(bounds);  }  result[0]=xAdj;  result[1]=yAdj;  return result;}  }
class C{  public void randomize(){  java.util.Random theRandNum=new java.util.Random();  final int ten=10;  for (int i=0; i < getStimulusDimension(); i++) {    stimulusVector[i]=(theRandNum.nextInt(ten));  }}  }
class C{  public ReasonParser(String reason){  super(reason);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  @Override protected void onPause(){  super.onPause();  mDownloadTask.cancel(true);  mLoadingProgressBar.setVisibility(View.INVISIBLE);}  }
class C{  public Shape createCheckMark(final int x,final int y,final int w,final int h){  double xf=w / 12.0;  double hf=h / 12.0;  path.reset();  path.moveTo(x,y + 7.0 * hf);  path.lineTo(x + 2.0 * xf,y + 7.0 * hf);  path.lineTo(x + 4.75 * xf,y + 10.0 * hf);  path.lineTo(x + 9.0 * xf,y);  path.lineTo(x + 11.0 * xf,y);  path.lineTo(x + 5.0 * xf,y + 12.0 * hf);  path.closePath();  return path;}  }
class C{  public void addCapabilityUniqueId(java.lang.String param){  if (localCapabilityUniqueId == null) {    localCapabilityUniqueId=new java.lang.String[]{};  }  localCapabilityUniqueIdTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localCapabilityUniqueId);  list.add(param);  this.localCapabilityUniqueId=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public static Type resolveTypeVariable(List<Type> context,TypeVariable<?> typeVariable){  GenericDeclaration genericDeclaration=typeVariable.getGenericDeclaration();  if (genericDeclaration instanceof Class<?>) {    Class<?> rawGenericDeclaration=(Class<?>)genericDeclaration;    int contextIndex=context.size();    ParameterizedType parameterizedType=null;    while (parameterizedType == null && --contextIndex >= 0) {      parameterizedType=getSuperParameterizedType(context.get(contextIndex),rawGenericDeclaration);    }    if (parameterizedType != null) {      TypeVariable<?>[] typeParameters=genericDeclaration.getTypeParameters();      int index=0;      for (; index < typeParameters.length; index++) {        TypeVariable<?> typeParameter=typeParameters[index];        if (typeParameter.equals(typeVariable)) {          break;        }      }      Type result=parameterizedType.getActualTypeArguments()[index];      if (result instanceof TypeVariable<?>) {        Type resolve=resolveTypeVariable(context,(TypeVariable<?>)result);        if (resolve != null) {          return resolve;        }      }      return result;    }  }  return null;}  }
class C{  public String graph() throws Exception {  StringBuffer text=new StringBuffer();  assignIDs(-1);  assignLeafModelNumbers(0);  text.append("digraph LMTree {\n");  if (m_isLeaf) {    text.append("N" + m_id + " [label=\"LM_"+ m_leafModelNum+ ":"+ getModelParameters()+ "\" "+ "shape=box style=filled");    text.append("]\n");  } else {    text.append("N" + m_id + " [label=\""+ Utils.backQuoteChars(m_localModel.leftSide(m_train))+ "\" ");    text.append("]\n");    graphTree(text);  }  return text.toString() + "}\n";}  }
class C{  public final void mouseReleased(MouseEvent e){  dragActive=false;  fire();}  }
class C{  public void onAddHostFinish(){  Intent intent=new Intent(this,RemoteActivity.class).addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  startActivity(intent);}  }
class C{  public void testReset(){  LongAdder ai=new LongAdder();  ai.add(2);  assertEquals(2,ai.sum());  ai.reset();  assertEquals(0,ai.sum());}  }
class C{  public void put(String key,ArrayList<File> files) throws FileNotFoundException {  put(key,files,null,null);}  }
class C{  @Override public boolean importData(final TransferSupport support){  if (!support.isDrop() || !canImport(support)) {    return false;  }  try {    @SuppressWarnings("unchecked") final List<TypeMemberTreeNode> draggedNodes=(List<TypeMemberTreeNode>)support.getTransferable().getTransferData(TypeDataFlavor.TYPE_MEMBER_FLAVOR);    final JTree.DropLocation location=typesTree.getDropLocation();    final TypesTree tree=(TypesTree)support.getComponent();    final TypesTreeModel model=tree.getModel();    final int[] selectedRows=new int[tree.getSelectionCount()];    int row=0;    final BaseTypeTreeNode parentNode=determineParentNode(location);    for (    final TypeMemberTreeNode node : getSelectedNodesSorted(tree)) {      selectedRows[row++]=model.getIndexOfChild(parentNode,node);    }    final List<TypeMember> draggedMembers=Lists.newArrayList();    for (    final TypeMemberTreeNode node : draggedNodes) {      draggedMembers.add(node.getTypeMember());    }    final int delta=determineDestinationOffset(location,parentNode) - draggedMembers.get(0).getBitOffset().get();    typeManager.moveMembers(parentNode.getBaseType(),draggedMembers,delta);  } catch (  IOException|UnsupportedFlavorException|CouldntSaveDataException exception) {    CUtilityFunctions.logException(exception);    return false;  }  return true;}  }
class C{  @Deprecated public static String toString(byte[] input,String encoding) throws IOException {  if (encoding == null) {    return new String(input);  } else {    return new String(input,encoding);  }}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  if (dataset instanceof GanttCategoryDataset) {    GanttCategoryDataset gcd=(GanttCategoryDataset)dataset;    drawTasks(g2,state,dataArea,plot,domainAxis,rangeAxis,gcd,row,column);  } else {    super.drawItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,pass);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Video) {    Video other=(Video)obj;    return Objects.equal(name,other.name) && Objects.equal(url,other.url) && duration == other.duration;  } else {    return false;  }}  }
class C{  public static String importReader(BufferedReader in,Database db,String name,String delim,char quote,ImportFilter filter,boolean useExistingTable,boolean header) throws IOException {  String line=in.readLine();  if (DatabaseImpl.isBlank(line)) {    return null;  }  Pattern delimPat=Pattern.compile(delim);  try {    name=TableBuilder.escapeIdentifier(name);    Table table=null;    if (!useExistingTable || ((table=db.getTable(name)) == null)) {      List<ColumnBuilder> columns=new LinkedList<ColumnBuilder>();      Object[] columnNames=splitLine(line,delimPat,quote,in,0);      for (int i=0; i < columnNames.length; i++) {        columns.add(new ColumnBuilder((String)columnNames[i],DataType.TEXT).escapeName().setLength((short)DataType.TEXT.getMaxSize()).toColumn());      }      table=createUniqueTable(db,name,columns,null,filter);      header=true;    }    List<Object[]> rows=new ArrayList<Object[]>(COPY_TABLE_BATCH_SIZE);    int numColumns=table.getColumnCount();    if (!header) {      Object[] data=splitLine(line,delimPat,quote,in,numColumns);      data=filter.filterRow(data);      if (data != null) {        rows.add(data);      }    }    while ((line=in.readLine()) != null) {      Object[] data=splitLine(line,delimPat,quote,in,numColumns);      data=filter.filterRow(data);      if (data == null) {        continue;      }      rows.add(data);      if (rows.size() == COPY_TABLE_BATCH_SIZE) {        table.addRows(rows);        rows.clear();      }    }    if (rows.size() > 0) {      table.addRows(rows);    }    return table.getName();  } catch (  SQLException e) {    throw (IOException)new IOException(e.getMessage()).initCause(e);  }}  }
class C{  public void addSentencesTone(SentenceTone analysis){  sentencesTone.add(analysis);}  }
class C{  private static void applyActivityInfo(Activity activity,ActivityInfo ai){  Window window=activity.getWindow();  window.setSoftInputMode(ai.softInputMode);  activity.setRequestedOrientation(ai.screenOrientation);}  }
class C{  public static double signedPolygonArea(Point2D.Double[] polygon){  int N=polygon.length;  Polygon P;  int i, j;  double area=0;  for (i=0; i < N; i++) {    j=(i + 1) % N;    area+=polygon[i].x * polygon[j].y;    area-=polygon[i].y * polygon[j].x;  }  area/=2.0;  return (area);}  }
class C{  protected void sequence_ArrayTypeRef(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  protected AbstractSiteMap processXml(URL sitemapUrl,byte[] xmlContent) throws UnknownFormatException {  BOMInputStream bomIs=new BOMInputStream(new ByteArrayInputStream(xmlContent));  InputSource is=new InputSource();  try {    is.setCharacterStream(new BufferedReader(new InputStreamReader(bomIs,"UTF-8")));  } catch (  UnsupportedEncodingException e) {    IOUtils.closeQuietly(bomIs);    throw new RuntimeException("Impossible exception",e);  }  return processXml(sitemapUrl,is);}  }
class C{  public CallableStatement prepareCall(String sql,int resultSetType,int resultSetConcurrency) throws SQLException {  return prepareCall(sql,resultSetType,resultSetConcurrency,this.resultSetHoldability);}  }
class C{  protected TrazaAuditoriaVO generateTrazaAccesoRegistro(IsicresAuditEventAccesoRegistroVO eventoAccesoRegistro){  TrazaAuditoriaVO result=new TrazaAuditoriaVO();  populateBasicUserEventTrazaAuditoria(eventoAccesoRegistro,result);  result.setEventType(new Long(IsicresEventAuditTypeEnum.ACCESO_REGISTRO.getValue()));  String eventDescription=IsicresEventAuditTypeEnum.ACCESO_REGISTRO.getName();  result.setEventDescription(eventDescription);  result.setObjectType(String.valueOf(IsicresObjectAuditTypeEnum.REGISTRO.getValue()));  result.setObjectTypeDescription(IsicresObjectAuditTypeEnum.REGISTRO.getName());  String objectId=IsicresAuditEventTrazaBuilderHandlerHelper.generateRegistroObjectID(eventoAccesoRegistro);  result.setObjectId(objectId);  String valorAuditado=IsicresAuditEventTrazaBuilderHandlerHelper.generateRegistroValorAuditado(eventoAccesoRegistro);  result.setNewValue(valorAuditado);  return result;}  }
class C{  public void rewrite(boolean rewrite){  this.rewrite=rewrite;}  }
class C{  public PbrpcClientChannelPool(final Config poolConfig,final PbrpcClientConfiguration clientConfig,final String host,int port,int connTimeout,int readTimeout){  super(poolConfig,new PbrpcClientChannelFactory(clientConfig,host,port,connTimeout,readTimeout));  LOG.info("Init connection pool done but connections will not be established until you start using the pool");}  }
class C{  @Override public void handlePreferences(GenericPreferencesEvent event){  log.debug("Called");  if (event == null) {    log.warn("Received a null event");    return;  }  log.debug("Event class is {}",event.getClass().getSimpleName());  log.debug("Broadcasting to {} listener(s)",listeners.size());  for (  GenericPreferencesEventListener listener : listeners) {    listener.onPreferencesEvent(event);  }}  }
class C{  public NoAvailableServersException(String message){  super(message);}  }
class C{  @Override protected void initData(){}  }
class C{  public void reflectiveScan(Object o){  if (o == null)   return;  if (o instanceof JCTree) {    JCTree tree=(JCTree)o;    expect.add(tree);    for (    Field f : getFields(tree)) {      try {        reflectiveScan(f.get(tree));      } catch (      IllegalAccessException e) {        error(e.toString());      }    }  } else   if (o instanceof List) {    List<?> list=(List<?>)o;    for (    Object item : list)     reflectiveScan(item);  } else   error("unexpected item: " + o);}  }
class C{  public static int[][] makeDelayEmbeddingVector(int[] data,int k,int startKthPoint,int numEmbeddingVectors) throws Exception {  if (startKthPoint < k - 1) {    throw new Exception("Start point t=" + startKthPoint + " is too early for a "+ k+ " length embedding vector");  }  if (numEmbeddingVectors + startKthPoint > data.length) {    throw new Exception("Too many embedding vectors " + numEmbeddingVectors + " requested for the given startPoint "+ startKthPoint+ " and time series length "+ data.length);  }  int[][] embeddingVectors=new int[numEmbeddingVectors][k];  for (int t=startKthPoint; t < numEmbeddingVectors + startKthPoint; t++) {    for (int i=0; i < k; i++) {      embeddingVectors[t - startKthPoint][i]=data[t - i];    }  }  return embeddingVectors;}  }
class C{  public void testClone(){  Trie clone=(Trie)m_Trie.clone();  if (!m_Trie.equals(clone))   fail("Tries differ");}  }
class C{  private void importProjects(){  final Project[] projects=appContext.getProjects();  Set<String> projectNames=new HashSet<>();  String createPolicy=factory.getPolicies() != null ? factory.getPolicies().getCreate() : null;  for (  Project project : projects) {    if (project.getSource() == null || project.getSource().getLocation() == null) {      continue;    }    if (project.exists()) {      if (!("perUser".equals(createPolicy) || "perAccount".equals(createPolicy))) {        notificationManager.notify("Import",locale.projectAlreadyImported(project.getName()),FAIL,FLOAT_MODE);      }      continue;    }    projectNames.add(project.getName());  }  importProjects(projectNames);}  }
class C{  @Override protected void verifyMatch(Object target,Object deserialized){  CronExpression targetCronExpression=(CronExpression)target;  CronExpression deserializedCronExpression=(CronExpression)deserialized;  assertNotNull(deserializedCronExpression);  assertEquals(targetCronExpression.getCronExpression(),deserializedCronExpression.getCronExpression());  assertEquals(targetCronExpression.getTimeZone(),deserializedCronExpression.getTimeZone());}  }
class C{  public final int _exptype(int identity){  return m_exptype.elementAt(identity);}  }
class C{  public Handle(int tag,String owner,String name,String desc){  this.tag=tag;  this.owner=owner;  this.name=name;  this.desc=desc;}  }
class C{  ClassType(String typeSig,Identifier className){  super(TC_CLASS,typeSig);  this.className=className;}  }
class C{  protected boolean isProcessElement(Properties ctx,String entityType){  if ("D".equals(entityType) || "C".equals(entityType)) {    return "true".equalsIgnoreCase(getUpdateMode(ctx));  } else {    return true;  }}  }
class C{  public boolean filterResult(Long result,SmallArrayBasedLongToDoubleMap[] socialProofs){  return resultFilterChain != null && resultFilterChain.filterResult(result,socialProofs);}  }
class C{  public void stopShimmerAnimation(){  if (mAnimator != null) {    mAnimator.end();    mAnimator.removeAllUpdateListeners();    mAnimator.cancel();  }  mAnimator=null;  mAnimationStarted=false;}  }
class C{  private void checkWithKnowledge(String inputGraph,String outputGraph,IKnowledge knowledge){  Graph graph=GraphConverter.convert(inputGraph);  IndependenceTest independence=new IndTestDSep(graph);  Pc pc=new Pc(independence);  pc.setKnowledge(knowledge);  Graph resultGraph=pc.search();  Graph trueGraph=GraphConverter.convert(outputGraph);  assertTrue(resultGraph.equals(trueGraph));}  }
class C{  public boolean addChange(String key,Object value){  Object oldValue=values.get(key);  boolean changed=(oldValue != null && value != null && !value.equals(oldValue));  values.put(key,value);  changes.put(key,changed);  log.trace("oldValue: {} newValue: {} changed: {}",oldValue,value,changed);  return changed;}  }
class C{  @Override public synchronized void flush() throws IOException {  checkNotClosed();  flushInternal();  out.flush();}  }
class C{  public ApplicationDescription[] discoverApplications(String discoverServerEndpointUrl) throws ServiceResultException {  return discoverApplications(discoverServerEndpointUrl,discoverServerEndpointUrl);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  double value;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  polyOrder=Integer.parseInt(args[2]);  if (polyOrder < 0) {    polyOrder=0;  }  if (polyOrder > 10) {    polyOrder=10;  }  if ((inputHeader.isEmpty()) || (outputHeader.isEmpty())) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    int totalNumCells=rows * cols;    double[] x=new double[totalNumCells];    double[] y=new double[totalNumCells];    double[] z=new double[totalNumCells];    double[] data;    int cellNum=0;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          x[cellNum]=image.getXCoordinateFromColumn(col);          y[cellNum]=image.getYCoordinateFromRow(row);          z[cellNum]=data[col];          cellNum++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    String inputHeaderShort=image.getShortHeaderFile();    image.close();    double rsquare=calculateEquation(x,y,z);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        value=getForwardCoordinates(output.getXCoordinateFromColumn(col),output.getYCoordinateFromRow(row));        output.setValue(row,col,value);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);    StringBuilder sb=new StringBuilder();    sb.append("TREND SURFACE ANALYSIS OUTPUT\n\n");    sb.append("Input File:\t").append(inputHeaderShort).append("\n");    sb.append("Polynomial Order:\t").append(polyOrder).append("\n\n");    sb.append("Coefficent #\t").append("Value\n");    for (int a=0; a < regressCoefficents.length; a++) {      sb.append((a + 1)).append("\t").append(regressCoefficents[a]).append("\n");    }    sb.append("\nR-square:\t").append(rsquare);    returnData(sb.toString());  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Criteria OR(){  return this.example.or();}  }
class C{  private void createBackgroundShape(int color){  Drawable roundedBackground=ViewUtils.getRoundedRect(cornerRadius,ColorUtils.adjustBrightness(color,backgroundDarkenPerc));  backgroundView.setBackground(roundedBackground);  setTextColor();}  }
class C{  @SuppressWarnings("try") public static boolean verifyEncoding(StructuredGraph originalGraph,EncodedGraph encodedGraph,Architecture architecture){  StructuredGraph decodedGraph=new StructuredGraph(originalGraph.method(),AllowAssumptions.YES);  GraphDecoder decoder=new GraphDecoder(architecture);  decoder.decode(decodedGraph,encodedGraph);  decodedGraph.verify();  try {    GraphComparison.verifyGraphsEqual(originalGraph,decodedGraph);  } catch (  Throwable ex) {    try (Debug.Scope scope=Debug.scope("GraphEncoder")){      Debug.dump(Debug.INFO_LOG_LEVEL,originalGraph,"Original Graph");      Debug.dump(Debug.INFO_LOG_LEVEL,decodedGraph,"Decoded Graph");    }     throw ex;  }  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void utah(int row,int col,int pos){  module(row - 2,col - 2,pos,1);  module(row - 2,col - 1,pos,2);  module(row - 1,col - 2,pos,3);  module(row - 1,col - 1,pos,4);  module(row - 1,col,pos,5);  module(row,col - 2,pos,6);  module(row,col - 1,pos,7);  module(row,col,pos,8);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static String toASCII(String input,int flag){  int p=0, q=0;  StringBuffer out=new StringBuffer();  if (isRootLabel(input)) {    return ".";  }  while (p < input.length()) {    q=searchDots(input,p);    out.append(toASCIIInternal(input.substring(p,q),flag));    if (q != (input.length())) {      out.append('.');    }    p=q + 1;  }  return out.toString();}  }
class C{  protected void prepare(){}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  @Override public String srandmember(final String key){  checkIsInMultiOrPipeline();  client.srandmember(key);  return client.getBulkReply();}  }
class C{  private void updateAdapterListViewItems(){  int imageResource;  String actionText;  if ((null == mListViewAdapter)) {    Log.w(LOG_TAG,"## updateListViewItemsContent(): list view adapter not initialized");  } else {    mListViewAdapter.clear();    ArrayList<Integer> supportedActionsList=supportedActionsList();    if (supportedActionsList.indexOf(ITEM_ACTION_START_CHAT) >= 0) {      imageResource=R.drawable.ic_person_add_black;      actionText=getResources().getString(R.string.start_chat);      mListViewAdapter.add(new AdapterMemberActionItems(imageResource,actionText,ITEM_ACTION_START_CHAT));    }    if (supportedActionsList.indexOf(ITEM_ACTION_START_VOICE_CALL) >= 0) {      imageResource=R.drawable.voice_call_black;      actionText=getResources().getString(R.string.start_voice_call);      mListViewAdapter.add(new AdapterMemberActionItems(imageResource,actionText,ITEM_ACTION_START_VOICE_CALL));    }    if (supportedActionsList.indexOf(ITEM_ACTION_START_VIDEO_CALL) >= 0) {      imageResource=R.drawable.video_call_black;      actionText=getResources().getString(R.string.start_video_call);      mListViewAdapter.add(new AdapterMemberActionItems(imageResource,actionText,ITEM_ACTION_START_VIDEO_CALL));    }    if (supportedActionsList.indexOf(ITEM_ACTION_INVITE) >= 0) {      imageResource=R.drawable.ic_person_add_black;      actionText=getResources().getString(R.string.room_participants_action_invite);      mListViewAdapter.add(new AdapterMemberActionItems(imageResource,actionText,ITEM_ACTION_INVITE));    }    if (supportedActionsList.indexOf(ITEM_ACTION_LEAVE) >= 0) {      imageResource=R.drawable.vector_leave_room_black;      actionText=getResources().getString(R.string.room_participants_action_leave);      mListViewAdapter.add(new AdapterMemberActionItems(imageResource,actionText,ITEM_ACTION_LEAVE));    }    if (supportedActionsList.indexOf(ITEM_ACTION_SET_DEFAULT_POWER_LEVEL) >= 0) {      imageResource=R.drawable.ic_verified_user_black;      actionText=getResources().getString(R.string.room_participants_action_set_default_power_level);      mListViewAdapter.add(new AdapterMemberActionItems(imageResource,actionText,ITEM_ACTION_SET_DEFAULT_POWER_LEVEL));    }    if (supportedActionsList.indexOf(ITEM_ACTION_SET_MODERATOR) >= 0) {      imageResource=R.drawable.ic_verified_user_black;      actionText=getResources().getString(R.string.room_participants_action_set_moderator);      mListViewAdapter.add(new AdapterMemberActionItems(imageResource,actionText,ITEM_ACTION_SET_MODERATOR));    }    if (supportedActionsList.indexOf(ITEM_ACTION_SET_ADMIN) >= 0) {      imageResource=R.drawable.ic_verified_user_black;      actionText=getResources().getString(R.string.room_participants_action_set_admin);      mListViewAdapter.add(new AdapterMemberActionItems(imageResource,actionText,ITEM_ACTION_SET_ADMIN));    }    if (supportedActionsList.indexOf(ITEM_ACTION_KICK) >= 0) {      imageResource=R.drawable.ic_remove_circle_outline_red;      actionText=getResources().getString(R.string.room_participants_action_remove);      mListViewAdapter.add(new AdapterMemberActionItems(imageResource,actionText,ITEM_ACTION_KICK));    }    if (supportedActionsList.indexOf(ITEM_ACTION_BAN) >= 0) {      imageResource=R.drawable.ic_block_black;      actionText=getResources().getString(R.string.room_participants_action_ban);      mListViewAdapter.add(new AdapterMemberActionItems(imageResource,actionText,ITEM_ACTION_BAN));    }    if (supportedActionsList.indexOf(ITEM_ACTION_UNBAN) >= 0) {      imageResource=R.drawable.ic_block_black;      actionText=getResources().getString(R.string.room_participants_action_unban);      mListViewAdapter.add(new AdapterMemberActionItems(imageResource,actionText,ITEM_ACTION_UNBAN));    }    if (supportedActionsList.indexOf(ITEM_ACTION_IGNORE) >= 0) {      imageResource=R.drawable.ic_person_outline_black;      actionText=getResources().getString(R.string.room_participants_action_ignore);      mListViewAdapter.add(new AdapterMemberActionItems(imageResource,actionText,ITEM_ACTION_IGNORE));    }    if (supportedActionsList.indexOf(ITEM_ACTION_UNIGNORE) >= 0) {      imageResource=R.drawable.ic_person_black;      actionText=getResources().getString(R.string.room_participants_action_unignore);      mListViewAdapter.add(new AdapterMemberActionItems(imageResource,actionText,ITEM_ACTION_UNIGNORE));    }    if (supportedActionsList.indexOf(ITEM_ACTION_MENTION) >= 0) {      imageResource=R.drawable.ic_comment_black;      actionText=getResources().getString(R.string.room_participants_action_mention);      mListViewAdapter.add(new AdapterMemberActionItems(imageResource,actionText,ITEM_ACTION_MENTION));    }  }}  }
class C{  public static synchronized void registerUsagesForMaterials(ItemStack aMat,String aPlate,boolean aRecipeReplacing){  if (aMat == null)   return;  aMat=GT_Utility.copy(aMat);  ItemStack tStack;  ItemData aItemData=GT_OreDictUnificator.getItemData(aMat);  if (aItemData == null || aItemData.mPrefix != OrePrefixes.ingot)   aPlate=null;  if (aPlate != null && GT_OreDictUnificator.getFirstOre(aPlate,1) == null)   aPlate=null;  sMt1.func_150996_a(aMat.getItem());  sMt1.stackSize=1;  Items.feather.setDamage(sMt1,Items.feather.getDamage(aMat));  sMt2.func_150996_a(new ItemStack(Blocks.dirt).getItem());  sMt2.stackSize=1;  Items.feather.setDamage(sMt2,0);  for (  ItemStack[] tRecipe : sShapes1) {    int tAmount1=0;    for (    ItemStack tMat : tRecipe) {      if (tMat == sMt1)       tAmount1++;    }    if (aItemData != null && aItemData.hasValidPrefixMaterialData())     for (    ItemStack tCrafted : GT_ModHandler.getRecipeOutputs(tRecipe)) {      GT_OreDictUnificator.addItemData(tCrafted,new ItemData(aItemData.mMaterial.mMaterial,aItemData.mMaterial.mAmount * tAmount1));    }  }  for (  Materials tMaterial : sRodMaterialList) {    ItemStack tMt2=GT_OreDictUnificator.get(OrePrefixes.stick,tMaterial,1);    if (tMt2 != null) {      sMt2.func_150996_a(tMt2.getItem());      sMt2.stackSize=1;      Items.feather.setDamage(sMt2,Items.feather.getDamage(tMt2));      for (int i=0; i < sShapes1.length; i++) {        ItemStack[] tRecipe=sShapes1[i];        int tAmount1=0, tAmount2=0;        for (        ItemStack tMat : tRecipe) {          if (tMat == sMt1)           tAmount1++;          if (tMat == sMt2)           tAmount2++;        }        for (        ItemStack tCrafted : GT_ModHandler.getVanillyToolRecipeOutputs(tRecipe)) {          if (aItemData != null && aItemData.hasValidPrefixMaterialData())           GT_OreDictUnificator.addItemData(tCrafted,new ItemData(aItemData.mMaterial.mMaterial,aItemData.mMaterial.mAmount * tAmount1,new MaterialStack(tMaterial,OrePrefixes.stick.mMaterialAmount * tAmount2)));          if (aRecipeReplacing && aPlate != null && sShapesA[i] != null && sShapesA[i].length > 1) {            assert aItemData != null;            if (GregTech_API.sRecipeFile.get(ConfigCategories.Recipes.recipereplacements,aItemData.mMaterial.mMaterial + "." + sShapesA[i][0],true)) {              if (null != (tStack=GT_ModHandler.removeRecipe(tRecipe))) {switch (sShapesA[i].length) {case 2:                  GT_ModHandler.addCraftingRecipe(tStack,GT_ModHandler.RecipeBits.BUFFERED,new Object[]{sShapesA[i][1],s_P.charAt(0),aPlate,s_R.charAt(0),OrePrefixes.stick.get(tMaterial),s_I.charAt(0),aItemData});                break;case 3:              GT_ModHandler.addCraftingRecipe(tStack,GT_ModHandler.RecipeBits.BUFFERED,new Object[]{sShapesA[i][1],sShapesA[i][2],s_P.charAt(0),aPlate,s_R.charAt(0),OrePrefixes.stick.get(tMaterial),s_I.charAt(0),aItemData});            break;default :          GT_ModHandler.addCraftingRecipe(tStack,GT_ModHandler.RecipeBits.BUFFERED,new Object[]{sShapesA[i][1],sShapesA[i][2],sShapesA[i][3],s_P.charAt(0),aPlate,s_R.charAt(0),OrePrefixes.stick.get(tMaterial),s_I.charAt(0),aItemData});        break;    }  }}}}}}}}  }
class C{  public final static boolean arrayRegionMatches(char[] source,int sourceStart,char[] target,int targetStart,int len){  int sourceEnd=sourceStart + len;  int delta=targetStart - sourceStart;  for (int i=sourceStart; i < sourceEnd; i++) {    if (source[i] != target[i + delta])     return false;  }  return true;}  }
class C{  public void sendSMS(String phoneNumber,String message,boolean interactive) throws IOException {  impl.sendSMS(phoneNumber,message,interactive);}  }
class C{  public void buildInformEntries(Hashtable<InetAddress,Vector<String>> dest){  if (children != null) {    for (int i=0; i < children.length; ++i) {      SimpleNode n=(SimpleNode)children[i];      if (n != null) {        n.buildInformEntries(dest);      }    }  }}  }
class C{  public ul addElement(String[] element){  li[] li=new li().addElement(element);  addElement(li);  return (this);}  }
class C{  @Override public boolean handleMessage(Message msg){  if (msg.what == 1) {    txtRefundStatus.setText(BCRefundStatus.RefundStatus.getTranslatedRefundStatus(refundStatus));  }  return true;}  }
class C{  public DefaultTableModel(String[] columnNames,Object[][] data){  this(columnNames,data,false);}  }
class C{  public static void calculateAndSetCapacity(Lane lane,boolean isLaneAtLinkEnd,Link link,Network network){  if (isLaneAtLinkEnd) {    double noLanesLink=link.getNumberOfLanes();    double linkFlowCapPerSecondPerLane=link.getCapacity() / network.getCapacityPeriod() / noLanesLink;    double laneFlowCapPerHour=lane.getNumberOfRepresentedLanes() * linkFlowCapPerSecondPerLane * 3600.0;    lane.setCapacityVehiclesPerHour(laneFlowCapPerHour);  } else {    double capacity=link.getCapacity() / network.getCapacityPeriod() * 3600.0;    lane.setCapacityVehiclesPerHour(capacity);  }}  }
class C{  public DateTimeParseException(String message,CharSequence parsedData,int errorIndex,Throwable cause){  super(message,cause);  this.parsedString=parsedData.toString();  this.errorIndex=errorIndex;}  }
class C{  protected void paint(SynthContext context,Graphics g){  JToolTip tip=(JToolTip)context.getComponent();  Insets insets=tip.getInsets();  View v=(View)tip.getClientProperty(BasicHTML.propertyKey);  if (v != null) {    Rectangle paintTextR=new Rectangle(insets.left,insets.top,tip.getWidth() - (insets.left + insets.right),tip.getHeight() - (insets.top + insets.bottom));    v.paint(g,paintTextR);  } else {    g.setColor(context.getStyle().getColor(context,ColorType.TEXT_FOREGROUND));    g.setFont(style.getFont(context));    context.getStyle().getGraphicsUtils(context).paintText(context,g,tip.getTipText(),insets.left,insets.top,-1);  }}  }
class C{  protected void paintBackground(Graphics g){  super.paintBackground(g);  if (!isUseParentPaint()) {    JTextComponent editor=this.getComponent();    BETextFieldUI.paintBg(g,0,0,editor.getWidth(),editor.getHeight(),editor.isEnabled(),bg);  }}  }
class C{  public void insertNode(Node n,int pos){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  insertElementAt(n,pos);}  }
class C{  public void onDown(long time,float x,float y,boolean fromMouse,int buttons){  if (mModelSelectorButton.onDown(x,y))   return;  getActiveStripLayoutHelper().onDown(time,x,y,fromMouse,buttons);}  }
class C{  public void installUI(JComponent c){  this.spinner=(JSpinner)c;  installDefaults();  installListeners();  maybeAdd(createNextButton(),"Next");  maybeAdd(createPreviousButton(),"Previous");  maybeAdd(createEditor(),"Editor");  updateEnabledState();  installKeyboardActions();}  }
class C{  public void print(PrintWriter output,NumberFormat format,int width){  output.println();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      String s=format.format(A[i][j]);      int padding=Math.max(1,width - s.length());      for (int k=0; k < padding; k++)       output.print(' ');      output.print(s);    }    output.println();  }  output.println();}  }
class C{  public char current(){  if (pos >= 0 && pos < chars.length) {    return chars[pos];  } else {    return DONE;  }}  }
class C{  private void parseFuel(Element fuelTag,Entity entity){  String value=fuelTag.getAttribute(LEFT);  try {    int newFuel=Integer.parseInt(value);    ((Aero)entity).setFuel(newFuel);  } catch (  Exception e) {    warning.append("Invalid fuel value in fuel tag.\n");  }}  }
class C{  private boolean bit() throws JSONException {  boolean value;  try {    value=this.bitreader.bit();    if (probe) {      log(value ? 1 : 0);    }    return value;  } catch (  Throwable e) {    throw new JSONException(e);  }}  }
class C{  public Dispatcher(APPlatformService platformService,String instanceId,PropertyHandler paramHandler){  this.platformService=platformService;  this.instanceId=instanceId;  this.paramHandler=paramHandler;}  }
class C{  public PTBTokenizer(Reader r,boolean tokenizeCRs){  this.tokenizeCRs=tokenizeCRs;  setSource(r);}  }
class C{  @Override protected void validate(){  failIf(value <= 0,"Can not have an empty nursery");  boundedNursery.setBytes(this.getBytes());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.FULL_MEMBER_REFERENCE__MEMBER_NAME:    return MEMBER_NAME_EDEFAULT == null ? memberName != null : !MEMBER_NAME_EDEFAULT.equals(memberName);case DomPackage.FULL_MEMBER_REFERENCE__STATIC_MEMBER:  return staticMember != STATIC_MEMBER_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static float[] closestSide(float[] point,float[] corners){  int len=corners.length;  float oldMag=Float.POSITIVE_INFINITY;  float[] bestLine=null;  for (int i=0; i < len; i+=2) {    float[] line={corners[i],corners[(i + 1) % len],corners[(i + 2) % len],corners[(i + 3) % len]};    float mag=GeometryMathUtils.vectorLength(GeometryMathUtils.shortestVectorFromPointToLine(point,line));    if (mag < oldMag) {      oldMag=mag;      bestLine=line;    }  }  return bestLine;}  }
class C{  public boolean showPopupMenu(final MouseEvent e){  if (e == null) {    throw new IllegalArgumentException("e must not be null!");  }  if (!isActive()) {    return false;  }  if (model.getSelected() == null) {    return false;  }  JPopupMenu menu=new JPopupMenu();  menu.add(new JMenuItem(getEditAnnotationAction()));  if (model.getSelected() instanceof OperatorAnnotation) {    menu.add(new JMenuItem(makeDetachOperatorAnnotationAction(((OperatorAnnotation)model.getSelected()).getAttachedTo())));  }  menu.addSeparator();  OperatorTransferHandler.installMenuItems(menu,true);  menu.addSeparator();  JMenu colorMenu=new JMenu(I18N.getGUILabel("workflow.annotation.color_select.label"));  colorMenu.setIcon(SwingTools.createIcon("16/" + I18N.getGUILabel("workflow.annotation.color_select.icon")));  for (  AnnotationColor color : AnnotationColor.values()) {    Action action=color.makeColorChangeAction(model,model.getSelected());    JMenuItem item=new JMenuItem(action);    Color borderColor=color.getColor();    if (color == AnnotationColor.TRANSPARENT) {      borderColor=Color.LIGHT_GRAY;    }    item.setIcon(SwingTools.createIconFromColor(color.getColor(),borderColor,16,16,new Ellipse2D.Double(2,2,12,12)));    item.setMargin(MENU_ITEM_MARGIN);    colorMenu.add(item);  }  menu.add(colorMenu);  JMenu alignmentMenu=new JMenu(I18N.getGUILabel("workflow.annotation.alignment_select.label"));  alignmentMenu.setIcon(SwingTools.createIcon("16/" + I18N.getGUILabel("workflow.annotation.alignment_select.icon")));  for (  AnnotationAlignment align : AnnotationAlignment.values()) {    Action action=align.makeAlignmentChangeAction(model,model.getSelected());    JMenuItem item=new JMenuItem(action);    item.setMargin(MENU_ITEM_MARGIN);    alignmentMenu.add(item);  }  menu.add(alignmentMenu);  if (model.getSelected() instanceof ProcessAnnotation) {    JMenu orderMenu=new JMenu(I18N.getGUILabel("workflow.annotation.order_notes.label"));    orderMenu.setIcon(SwingTools.createIcon("16/" + I18N.getGUILabel("workflow.annotation.order_notes.icon")));    Action action=makeToFrontAction(model.getSelected());    JMenuItem item=new JMenuItem(action);    item.setMargin(MENU_ITEM_MARGIN);    orderMenu.add(item);    action=makeToBackAction(model.getSelected());    item=new JMenuItem(action);    item.setMargin(MENU_ITEM_MARGIN);    orderMenu.add(item);    orderMenu.addSeparator();    action=makeSendForwardAction(model.getSelected());    item=new JMenuItem(action);    item.setMargin(MENU_ITEM_MARGIN);    orderMenu.add(item);    action=makeSendBackAction(model.getSelected());    item=new JMenuItem(action);    item.setMargin(MENU_ITEM_MARGIN);    orderMenu.add(item);    menu.add(orderMenu);  }  menu.addSeparator();  menu.add(getToggleAnnotationsAction().createMenuItem());  menu.show(view,e.getX(),e.getY());  return true;}  }
class C{  public RepositoryImplConfigBase(){  super();}  }
class C{  public static void closeQuietly(AutoCloseable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  private void publishRtf(Resource resource,BigDecimal version) throws PublicationException {  if (isLocked(resource.getShortname())) {    throw new PublicationException(PublicationException.TYPE.LOCKED,"Resource " + resource.getShortname() + " is currently locked by another process");  }  Document doc=new Document();  File rtfFile=dataDir.resourceRtfFile(resource.getShortname(),version);  OutputStream out=null;  try {    out=new FileOutputStream(rtfFile);    RtfWriter2.getInstance(doc,out);    eml2Rtf.writeEmlIntoRtf(doc,resource);  } catch (  FileNotFoundException e) {    throw new PublicationException(PublicationException.TYPE.RTF,"Can't find rtf file to write metadata to: " + rtfFile.getAbsolutePath(),e);  }catch (  DocumentException e) {    throw new PublicationException(PublicationException.TYPE.RTF,"RTF DocumentException while writing to file: " + rtfFile.getAbsolutePath(),e);  }catch (  Exception e) {    throw new PublicationException(PublicationException.TYPE.RTF,"An unexpected error occurred while writing RTF file: " + e.getMessage(),e);  } finally {    if (out != null) {      try {        out.close();      } catch (      IOException e) {        log.warn("FileOutputStream to RTF file could not be closed");      }    }  }}  }
class C{  UsageConfiguration(File configFile) throws IOException {  mProp=new Properties();  try (InputStream is=FileUtils.createInputStream(configFile,false)){    mProp.load(is);  }   mProp.setProperty(ENABLE_USAGE,"true");}  }
class C{  protected void handleElementAdded(CompositeGraphicsNode gn,Node parent,Element childElt){  for (Node n=childElt.getPreviousSibling(); n != null; n=n.getPreviousSibling()) {    if (n == childElt) {      return;    }  }  if (childElt instanceof SVGTests && SVGUtilities.matchUserAgent(childElt,ctx.getUserAgent())) {    if (selectedChild != null) {      gn.remove(0);      disposeTree(selectedChild);    }    selectedChild=childElt;    GVTBuilder builder=ctx.getGVTBuilder();    GraphicsNode refNode=builder.build(ctx,childElt);    if (refNode != null) {      gn.add(refNode);    }  }}  }
class C{  protected Object[] parseArguments(final byte[] theBytes){  Object[] myArguments=new Object[0];  int myTagIndex=0;  int myIndex=0;  myArguments=new Object[_myTypetag.length];  isArray=(_myTypetag.length > 0) ? true : false;  while (myTagIndex < _myTypetag.length) {    if (myTagIndex == 0) {      _myArrayType=_myTypetag[myTagIndex];    } else {      if (_myTypetag[myTagIndex] != _myArrayType) {        isArray=false;      }    }switch (_myTypetag[myTagIndex]) {case (0x63):      myArguments[myTagIndex]=(new Character((char)(Bytes.toInt(Bytes.copy(theBytes,myIndex,4)))));    myIndex+=4;  break;case (0x69):myArguments[myTagIndex]=(new Integer(Bytes.toInt(Bytes.copy(theBytes,myIndex,4))));myIndex+=4;break;case (0x66):myArguments[myTagIndex]=(new Float(Bytes.toFloat(Bytes.copy(theBytes,myIndex,4))));myIndex+=4;break;case (0x6c):case (0x68):myArguments[myTagIndex]=(new Long(Bytes.toLong(Bytes.copy(theBytes,myIndex,8))));myIndex+=8;break;case (0x64):myArguments[myTagIndex]=(new Double(Bytes.toDouble(Bytes.copy(theBytes,myIndex,8))));myIndex+=8;break;case (0x53):case (0x73):int newIndex=myIndex;StringBuffer stringBuffer=new StringBuffer();stringLoop: do {if (theBytes[newIndex] == 0x00) {break stringLoop;} else {stringBuffer.append((char)theBytes[newIndex]);}newIndex++;} while (newIndex < theBytes.length);myArguments[myTagIndex]=(stringBuffer.toString());myIndex=newIndex + align(newIndex);break;case 0x62:int myLen=Bytes.toInt(Bytes.copy(theBytes,myIndex,4));myIndex+=4;myArguments[myTagIndex]=Bytes.copy(theBytes,myIndex,myLen);myIndex+=myLen + (align(myLen) % 4);break;case 0x6d:myArguments[myTagIndex]=Bytes.copy(theBytes,myIndex,4);myIndex+=4;break;}myTagIndex++;}_myData=Bytes.copy(_myData,0,myIndex);return myArguments;}  }
class C{  private static String asHttpDate(long date){  SimpleDateFormat dateFormat=new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z",Locale.US);  return dateFormat.format(new Date(date));}  }
class C{  public ReceptionReport generateReceptionReport(){  ReceptionReport report=new ReceptionReport(ssrc);  updateReceptionReport(report);  return report;}  }
class C{  public SpanManager(String src){  sb=new StringBuilder(src);  managedLists=new ArrayList<List<Span>>();  calculateSrcPositions=false;}  }
class C{  private void prepareProtectionSetWithAllStaleVolumes() throws Exception {  String cgName="staleVolumeTest";  ProtectionSet protectionSet=createProtectionSet(cgName,projectURI);  staleProtectionSetURI=protectionSet.getId();  URI volumeURI1=URIUtil.createId(Volume.class);  URI volumeURI2=URIUtil.createId(Volume.class);  URI volumeURI3=URIUtil.createId(Volume.class);  StringSet volumes=new StringSet();  volumes.add(volumeURI1.toString());  volumes.add(volumeURI2.toString());  volumes.add(volumeURI3.toString());  protectionSet.setVolumes(volumes);  _dbClient.persistObject(protectionSet);}  }
class C{  private void findClassesInApk(String apkPath,String packageName,Set<String> classNames,Set<String> subpackageNames) throws IOException {  DexFile dexFile=null;  try {    dexFile=new DexFile(apkPath);    Enumeration<String> apkClassNames=dexFile.entries();    while (apkClassNames.hasMoreElements()) {      String className=apkClassNames.nextElement();      if (className.startsWith(packageName)) {        String subPackageName=packageName;        int lastPackageSeparator=className.lastIndexOf('.');        if (lastPackageSeparator > 0) {          subPackageName=className.substring(0,lastPackageSeparator);        }        if (subPackageName.length() > packageName.length()) {          subpackageNames.add(subPackageName);        } else         if (isToplevelClass(className)) {          classNames.add(className);        }      }    }  } catch (  IOException e) {    if (false) {      Log.w("ClassPathPackageInfoSource","Error finding classes at apk path: " + apkPath,e);    }  } finally {    if (dexFile != null) {    }  }}  }
class C{  @SuppressWarnings("unchecked") public static int binarySearch(Object[] array,Object object){  return binarySearch(array,0,array.length,object);}  }
class C{  protected void makeGeometry(ShapeData shapeData){  Object cacheKey=new Geometry.CacheKey(this.getClass(),"Cylinder0",this.subdivisions);  Geometry geom=(Geometry)this.getGeometryCache().getObject(cacheKey);  if (geom == null) {    makeUnitCylinder(this.subdivisions,shapeData.getMeshes());    for (int piece=0; piece < getFaceCount(); piece++) {      if (offsets.get(piece) == null)       offsets.put(piece,new OffsetsList());      cacheKey=new Geometry.CacheKey(this.getClass(),"Cylinder" + piece,this.subdivisions);      this.getGeometryCache().add(cacheKey,shapeData.getMesh(piece));    }  } else {    for (int piece=0; piece < getFaceCount(); piece++) {      if (offsets.get(piece) == null)       offsets.put(piece,new OffsetsList());      cacheKey=new Geometry.CacheKey(this.getClass(),"Cylinder" + piece,this.subdivisions);      geom=(Geometry)this.getGeometryCache().getObject(cacheKey);      shapeData.addMesh(piece,geom);    }  }}  }
class C{  @Override public void handleStart(Operation start){  ServiceUtils.logInfo(this,"Starting service %s",getSelfLink());  State startState=start.getBody(State.class);  InitializationUtils.initialize(startState);  validateState(startState);  if (TaskState.TaskStage.CREATED == startState.taskState.stage) {    startState.taskState.stage=TaskState.TaskStage.STARTED;  }  if (startState.documentExpirationTimeMicros <= 0) {    startState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  start.setBody(startState).complete();  try {    if (ControlFlags.isOperationProcessingDisabled(startState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == startState.taskState.stage) {      TaskUtils.sendSelfPatch(this,buildPatch(startState.taskState.stage,null));    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  private void finish(AbstractParseTreeNode n,Mark startMark) throws ParseException {  Mark endMark=tq.mark();  tq.rewind(startMark);  try {    n.setComments(tq.filteredTokens());  }  finally {    tq.rewind(endMark);  }}  }
class C{  public boolean isGreaterThan(Months other){  if (other == null) {    return getValue() > 0;  }  return getValue() > other.getValue();}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<K,V> n=findFirst(); n != null; n=n.next) {    V v=n.getValidValue();    if (v != null) {      s.writeObject(n.key);      s.writeObject(v);    }  }  s.writeObject(null);}  }
class C{  protected void processDataDelete(SimEvent ev,boolean ack){  if (ev == null) {    return;  }  Object[] data=(Object[])ev.getData();  if (data == null) {    return;  }  String filename=(String)data[0];  int req_source=((Integer)data[1]).intValue();  int tag=-1;  int msg=deleteFileFromStorage(filename);  if (msg == DataCloudTags.FILE_DELETE_SUCCESSFUL) {    tag=DataCloudTags.CTLG_DELETE_MASTER;  } else {    tag=DataCloudTags.FILE_DELETE_MASTER_RESULT;  }  if (ack) {    Object pack[]=new Object[2];    pack[0]=filename;    pack[1]=Integer.valueOf(msg);    sendNow(req_source,tag,pack);  }}  }
class C{  @Nonnull public BugInstance addUnknownSourceLine(String className,String sourceFile){  SourceLineAnnotation sourceLineAnnotation=SourceLineAnnotation.createUnknown(className,sourceFile);  if (sourceLineAnnotation != null) {    add(sourceLineAnnotation);  }  return this;}  }
class C{  private static BaseBlock transform(BaseBlock block,Transform transform,BlockRegistry registry,BaseBlock changedBlock){  checkNotNull(block);  checkNotNull(transform);  checkNotNull(registry);  Map<String,? extends State> states=registry.getStates(block);  if (states == null) {    return changedBlock;  }  for (  State state : states.values()) {    if (state.hasDirection()) {      StateValue value=state.getValue(block);      if (value != null && value.getDirection() != null) {        StateValue newValue=getNewStateValue(state,transform,value.getDirection());        if (newValue != null) {          if (changedBlock.hasWildcardData()) {            changedBlock=new BaseBlock(changedBlock.getId(),changedBlock.getData(),changedBlock.getNbtData());          }          newValue.set(changedBlock);        }      }    }  }  return changedBlock;}  }
class C{  public void debug(String s,Object... params){  if (isEnabled(TraceSystem.DEBUG)) {    s=MessageFormat.format(s,params);    traceWriter.write(TraceSystem.DEBUG,module,s,null);  }}  }
class C{  public LabelBlock(String text,Font font,Paint paint){  this.text=text;  this.paint=paint;  this.label=TextUtilities.createTextBlock(text,font,this.paint);  this.font=font;  this.toolTipText=null;  this.urlText=null;  this.contentAlignmentPoint=TextBlockAnchor.CENTER;  this.textAnchor=RectangleAnchor.CENTER;}  }
class C{  @ObjectiveCName("findTextMessagesWithPeer:withQuery:") public Command<List<MessageSearchEntity>> findTextMessages(Peer peer,String query){  return null;}  }
class C{  public void keyPressed(final KeyEvent e){  int keycode=e.getKeyCode();switch (keycode) {case KeyEvent.VK_U:    workspace.iterate();  break;default :break;}}  }
class C{  @SuppressWarnings("static-method") RouterPriorityQueue<? extends Node> createRouterPriorityQueue(){  return new PseudoRemovePriorityQueue<>(500);}  }
class C{  public DynamicColumnData(final TreeColumn treeColumn,final String preferredLength,final String minLength){  this(treeColumn,DynamicLengthFormat.parse(preferredLength),DynamicLengthFormat.parse(minLength));}  }
class C{  protected static void removeJavaProperties(List<InternalEventPropDescriptor> properties){  List<InternalEventPropDescriptor> toRemove=new LinkedList<InternalEventPropDescriptor>();  for (  InternalEventPropDescriptor desc : properties) {    if ((desc.getPropertyName().equals("class")) || (desc.getPropertyName().equals("getClass")) || (desc.getPropertyName().equals("toString"))|| (desc.getPropertyName().equals("hashCode"))) {      toRemove.add(desc);    }  }  for (  InternalEventPropDescriptor desc : toRemove) {    properties.remove(desc);  }}  }
class C{  public static Key createRandomKey(){  Key x=new Key();  ThreadLocalUtils.getThreadLocalRandom().nextBytes(x.hash);  return x;}  }
class C{  public boolean isArmed(){  return this.armed;}  }
class C{  public void testDoCheckWithEmptyElements(){  LOGGER.debug("doCheckWithEmptyElements");  TextOnlyContainsNonAlphanumericalCharactersChecker instance=new TextOnlyContainsNonAlphanumericalCharactersChecker(mockTextElementBuilder,DETECTION_MSG);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case MESSAGE:    return isSetMessage();case TYPE:  return isSetType();}throw new IllegalStateException();}  }
class C{  public void recomposeTemplates(boolean flushFirst) throws TransformerException {}  }
class C{  private void overrideHints(Draft2JobApp parentJob,Draft2JobApp stepJob){  if (parentJob.getRequirement(Draft2ResourceType.CPU_RESOURCE,Draft2CpuResource.class) != null) {    stepJob.setHint(parentJob.getRequirement(Draft2ResourceType.CPU_RESOURCE,Draft2CpuResource.class));  }  if (parentJob.getRequirement(Draft2ResourceType.MEMORY_RESOURCE,Draft2MemoryResource.class) != null) {    stepJob.setHint(parentJob.getRequirement(Draft2ResourceType.MEMORY_RESOURCE,Draft2MemoryResource.class));  }  if (parentJob.getRequirement(Draft2ResourceType.ENV_VAR_REQUIREMENT,Draft2EnvVarRequirement.class) != null) {    stepJob.setHint(parentJob.getRequirement(Draft2ResourceType.ENV_VAR_REQUIREMENT,Draft2EnvVarRequirement.class));  }}  }
class C{  public static BoxDataSet serializableInstance(){  return new BoxDataSet(new ShortDataBox(4,4),null);}  }
class C{  public MP4Atom lookup(long type,int number){  int position=0;  for (int i=0; i < children.size(); i++) {    MP4Atom atom=children.get(i);    if (atom.getType() == type) {      if (position >= number) {        return atom;      }      position++;    }  }  return null;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public DERSet(ASN1Encodable[] a){  super(a,true);}  }
class C{  protected void finalize() throws Throwable {  this.builder=null;  this.reader=null;  this.entityResolver=null;  this.validator=null;  super.finalize();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void createTitle(){  File file;  if (m_Filename.equals("")) {    m_Title="-none-";  } else   if (m_Filename.equals(TAB_INSTANCES)) {    m_Title=TAB_INSTANCES;  } else {    try {      file=new File(m_Filename);      m_Title=file.getName();    } catch (    Exception e) {      m_Title="-none-";    }  }  if (isChanged()) {    m_Title+=" *";  }}  }
class C{  public void addFsUniqueId(java.lang.String param){  if (localFsUniqueId == null) {    localFsUniqueId=new java.lang.String[]{};  }  localFsUniqueIdTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localFsUniqueId);  list.add(param);  this.localFsUniqueId=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public static Writable clone(Writable object,Configuration conf) throws InstantiationException, IllegalAccessException, IOException {  Writable cloned=null;  cloned=object.getClass().newInstance();  ReflectionUtils.copy(conf,object,cloned);  return cloned;}  }
class C{  protected void completeCommandline(Commandline cmd){  super.completeCommandline(cmd);  if (name != null) {    appendOptionArgument(cmd,"--name",name);  }  if (out != null) {    appendOptionArgument(cmd,"--out",out);  }  if (resourceRoot != null) {    appendOptionArgument(cmd,"--resource-root",resourceRoot);  }  if (linkWithCurrentDistribution) {    appendOption(cmd,"--link-with-current-distribution");  }  for (  Exclude exclude : excludeModules) {    appendOptionArgument(cmd,"--exclude-module",exclude.getModule());  }  cmd.createArgument().setValue(module);}  }
class C{  public void onPackageAppeared(String packageName,int reason){}  }
class C{  private void resetDigest(){  if (digestReset == false) {    md.reset();    digestReset=true;  }}  }
class C{  @SuppressWarnings(SUPPRESS_UNCHECKED) public static SortedSet<SystemUnderTest> toSystemUnderTestList(Vector<Object> sutsParams){  SortedSet<SystemUnderTest> suts=new TreeSet<SystemUnderTest>(new SystemUnderTestByNameComparator());  for (  Object sutParams : sutsParams) {    suts.add(toSystemUnderTest((Vector<Object>)sutParams));  }  return suts;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private void convertInstanceNominal(Instance instance){  if (!m_needToTransform) {    push(instance);    return;  }  double[] vals=new double[outputFormatPeek().numAttributes()];  int attSoFar=0;  for (int j=0; j < getInputFormat().numAttributes(); j++) {    Attribute att=getInputFormat().attribute(j);    if ((!att.isNominal()) || (j == getInputFormat().classIndex())) {      vals[attSoFar]=instance.value(j);      attSoFar++;    } else {      if ((att.numValues() <= 2) && (!m_TransformAll)) {        vals[attSoFar]=instance.value(j);        attSoFar++;      } else {        if (instance.isMissing(j)) {          for (int k=0; k < att.numValues(); k++) {            vals[attSoFar + k]=instance.value(j);          }        } else {          for (int k=0; k < att.numValues(); k++) {            if (k == (int)instance.value(j)) {              vals[attSoFar + k]=1;            } else {              vals[attSoFar + k]=0;            }          }        }        attSoFar+=att.numValues();      }    }  }  Instance inst=null;  if (instance instanceof SparseInstance) {    inst=new SparseInstance(instance.weight(),vals);  } else {    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(getOutputFormat());  copyValues(inst,false,instance.dataset(),getOutputFormat());  inst.setDataset(getOutputFormat());  push(inst);}  }
class C{  BufferAllocator allocator(){  Class<?> allocator=reader.getClass(ALLOCATOR,UnpooledHeapAllocator.class);  try {    return (BufferAllocator)allocator.newInstance();  } catch (  InstantiationException|IllegalAccessException e) {    throw new ConfigurationException(e);  }catch (  ClassCastException e) {    throw new ConfigurationException("invalid allocator class: " + allocator.getName());  }}  }
class C{  public final MutableDouble2D resize(double val){  if (val < 0)   throw new IllegalArgumentException("The argument to MutableDouble2D.setLength(...) must be zero or positive");  if (val == 0)   x=y=0; else {    final double len=Math.sqrt(x * x + y * y);    if (len != len || len == infinity || len == -infinity || len == 0)     throw new ArithmeticException("" + this + " length is "+ len+ " cannot change its length");    final double invertedlen=val / len;    x=x * invertedlen;    y=y * invertedlen;  }  return this;}  }
class C{  public void initKeyboardEventNS(String namespaceURIArg,String typeArg,boolean canBubbleArg,boolean cancelableArg,AbstractView viewArg,String keyIdentifierArg,int keyLocationArg,String modifiersList){  initUIEventNS(namespaceURIArg,typeArg,canBubbleArg,cancelableArg,viewArg,0);  keyIdentifier=keyIdentifierArg;  keyLocation=keyLocationArg;  modifierKeys.clear();  String[] modifiers=split(modifiersList);  for (int i=0; i < modifiers.length; i++) {    modifierKeys.add(modifiers[i]);  }}  }
class C{  public void movePrevPosition(boolean smooth){  if (getRealAdapter() == null)   throw new IllegalStateException("You did not set a slider adapter");  simpleViewPager.setCurrentItem(simpleViewPager.getCurrentItem() - 1,smooth);}  }
class C{  public static void main(String[] args){  CovarianceFunction covFunc=new CovSum(6,new CovLINone(),new CovNoise());  GaussianProcess gp=new GaussianProcess(covFunc);  double[][] logtheta0=new double[][]{{0.1},{Math.log(0.1)}};  Matrix params0=new Matrix(logtheta0);  Matrix[] data=CSVtoMatrix.load("../armdata.csv",6,1);  Matrix X=data[0];  Matrix Y=data[1];  gp.train(X,Y,params0,-20);  Matrix[] datastar=CSVtoMatrix.load("../armdatastar.csv",6,1);  Matrix Xstar=datastar[0];  Matrix Ystar=datastar[1];  Matrix[] res=gp.predict(Xstar);  res[0].print(res[0].getColumnDimension(),16);  res[1].print(res[1].getColumnDimension(),16);}  }
class C{  @Override public MapMessage createMapMessage() throws JMSException {  Session session=getSessionInternal();  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createMapMessage(), " + session);  }  return session.createMapMessage();}  }
class C{  public TransferEntropyKernelCounts(int countPast,int countNextPast,int countPastSource,int countNextPastSource){  this.countPast=countPast;  this.countNextPast=countNextPast;  this.countPastSource=countPastSource;  this.countNextPastSource=countNextPastSource;}  }
class C{  @POST @Path("/structdef") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) public AtlasStructDef createStructDef(AtlasStructDef structDef) throws AtlasBaseException {  AtlasStructDef ret=typeDefStore.createStructDef(structDef);  return ret;}  }
class C{  protected void addMessage(T msg){  if (multipleTupleExtractor == null) {    Map.Entry<K,V> e=singleTupleExtractor.extract(msg);    if (e != null)     stmr.addData(e);  } else {    Map<K,V> m=multipleTupleExtractor.extract(msg);    if (m != null)     stmr.addData(m);  }}  }
class C{  public void warn(final String msg){  mCount++;  if (mCount <= mLimit) {    Diagnostic.warning(mMessage + " " + msg);  } else {    if (mLogAll) {      Diagnostic.userLog(mMessage + " " + msg);    }  }}  }
class C{  public void addFreePhysMemory(long freePhysMemory){  this.totalFreePhysMemory+=freePhysMemory;}  }
class C{  private void verifyXmlForModificationType(String xmlString) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  Document document=builder.parse(new InputSource(new StringReader(xmlString)));  assertEquals(1,document.getChildNodes().getLength());  Element root=document.getDocumentElement();  assertEquals("tns:TechnicalServices",root.getNodeName());  List<?> productNodes=XMLConverter.getNodeList(root.getChildNodes(),"tns:TechnicalService");  assertEquals(1,productNodes.size());  Node n=(Node)productNodes.get(0);  List<Node> serviceNode=XMLConverter.getNodeList(n.getChildNodes(),"ParameterDefinition");  assertEquals(1,serviceNode.size());  NamedNodeMap parameterDefinitionAttrs=serviceNode.get(0).getAttributes();  if (currentModificationType == null || currentModificationType.equals(ParameterModificationType.STANDARD)) {    assertNull(parameterDefinitionAttrs.getNamedItem("modificationType"));  } else {    assertEquals(currentModificationType.name(),parameterDefinitionAttrs.getNamedItem("modificationType").getTextContent());  }}  }
class C{  @Override protected Void doTask() throws Exception {  updateEvent.start();  try {    if (resourceManager.isOverflowAllowed())     throw new IllegalStateException();    final SegmentMetadata segmentMetadata=buildResult.segmentMetadata;    if (INFO)     log.info("Begin: name=" + getOnlyResource() + ", newSegment="+ segmentMetadata);    final ILocalBTreeView view=(ILocalBTreeView)getIndex(getOnlyResource());    assertSameIndex(indexUUID,view.getMutableBTree());    if (view instanceof BTree) {      throw new RuntimeException("View is only a B+Tree: name=" + buildResult.name + ", pmd="+ view.getIndexMetadata().getPartitionMetadata());    }    final BTree btree=view.getMutableBTree();    if (INFO)     log.info("src=" + getOnlyResource() + ",counter="+ view.getCounter().get()+ ",checkpoint="+ btree.getCheckpoint());    assert btree != null : "Expecting index: " + getOnlyResource();    final IndexMetadata indexMetadata=btree.getIndexMetadata().clone();    final LocalPartitionMetadata currentpmd=indexMetadata.getPartitionMetadata();    final IResourceMetadata[] currentResources=currentpmd.getResources();{      if (currentpmd == null) {        throw new IllegalStateException("Not an index partition: " + getOnlyResource());      }      if (!currentResources[0].getUUID().equals(getJournal().getRootBlockView().getUUID())) {        throw new IllegalStateException("Expecting live journal to be the first resource: " + currentResources);      }      assert segmentMetadata.getCreateTime() < getJournal().getRootBlockView().getFirstCommitTime() : "segment createTime LT journal 1st commit time" + ": segmentMetadata=" + segmentMetadata + ", journal: "+ getJournal().getRootBlockView();    }    final IResourceMetadata[] newResources=new IResourceMetadata[]{getJournal().getResourceMetadata(),segmentMetadata};    indexMetadata.setPartitionMetadata(new LocalPartitionMetadata(currentpmd.getPartitionId(),currentpmd.getSourcePartitionId(),currentpmd.getLeftSeparatorKey(),currentpmd.getRightSeparatorKey(),newResources,currentpmd.getIndexPartitionCause()));    btree.setIndexMetadata(indexMetadata);    if (INFO)     log.info("Updated view: name=" + getOnlyResource() + ", pmd="+ indexMetadata.getPartitionMetadata());    assert btree.needsCheckpoint();    resourceManager.overflowCounters.indexPartitionMergeCounter.incrementAndGet();    return null;  }  finally {    updateEvent.end();  }}  }
class C{  public static <T>UnaryOperator<T> identity(){  return null;}  }
class C{  public CombinedActiveEntRateLocalSTResults computeLocal(int history,int base,int states[][]){  initialise(history,base);  addObservations(states);  return computeLocalFromPreviousObservations(states);}  }
class C{  public static JarPath create(PathImpl backing){  backing=backing.unwrap();  if (backing instanceof JarPath) {    return (JarPath)backing;  }  JarPath path=_jarCache.get(backing);  if (path == null) {    path=new JarPath(null,"/","/",backing);    _jarCache.put(backing,path);  }  return path;}  }
class C{  public DividerDecoration build(){  return new DividerDecoration(mHeight,mLPadding,mRPadding,mColour);}  }
class C{  public Version smallestNonClientNodeVersion(){  return minNonClientNodeVersion;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'GENERIC_DATA_DB' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'DEVICE_ID' INTEGER NOT NULL ,"+ "'TIMESTAMP' INTEGER NOT NULL ,"+ "'DATA' TEXT NOT NULL ,"+ "'DIRECTORY_ID' INTEGER NOT NULL );");}  }
class C{  @Override public <U>U[] toArray(U[] a){  return toArray(a);}  }
class C{  public void stopContainer(){  try {    if (container != null) {      container.stop();      logger.info("Stopped container");    }  } catch (  LifecycleException exception) {    logger.warn("Cannot Stop Tomcat" + exception.getMessage());  }}  }
class C{  private void enableDeviceCapabilitiesArea(boolean enabled){  mDisableCameraCheckbox.setEnabled(enabled);  mDisableKeyguardWidgetsCheckbox.setEnabled(enabled);  mDisableKeyguardSecureCameraCheckbox.setEnabled(enabled);  mDisableKeyguardNotificationCheckbox.setEnabled(enabled);  mDisableKeyguardUnredactedCheckbox.setEnabled(enabled);  mDisableKeyguardTrustAgentCheckbox.setEnabled(enabled);  mTrustAgentComponent.setEnabled(enabled);  mTrustAgentFeatures.setEnabled(enabled);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddress;  String attrValue;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddress=(Element)elementList.item(2);  attrValue=testAddress.getAttribute("class");  assertEquals("attrValue","No",attrValue);}  }
class C{  @SuppressWarnings("deprecation") public BaseSeed(CropCard crop,int size,int statGrowth,int statGain,int statResistance,int stackSize){  super();  this.crop=crop;  this.id=Crops.instance.getIdFor(crop);  this.size=size;  this.statGrowth=statGrowth;  this.statGain=statGain;  this.statResistance=statResistance;  this.stackSize=stackSize;}  }
class C{  public CRelocationCheckBox(final ZyGraph graph,final IDebugger debugger){  super("Show Relocated Offsets");  Preconditions.checkNotNull(graph,"IE01469: Graph argument can not be null");  Preconditions.checkNotNull(debugger,"IE01470: Debugger argument can not be null");  m_graph=graph;  m_debugger=debugger;  addItemListener(m_internalItemListener);  graph.getSettings().getDisplaySettings().addListener(m_internalSettingsListener);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.HEX_ESCAPE_SEQUENCE__CHARACTER:    return CHARACTER_EDEFAULT == null ? character != null : !CHARACTER_EDEFAULT.equals(character);case RegularExpressionPackage.HEX_ESCAPE_SEQUENCE__SEQUENCE:  return SEQUENCE_EDEFAULT == null ? sequence != null : !SEQUENCE_EDEFAULT.equals(sequence);}return super.eIsSet(featureID);}  }
class C{  public TransformPanel(){  this(new Vector2(),0.0,true,null);}  }
class C{  public WorkingSetDiffBuilder(final WorkingSetManager workingSetManager){  super(workingSetManager);}  }
class C{  public static <T>T eachLine(InputStream stream,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return eachLine(stream,1,closure);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private boolean writeOff(int C_Invoice_ID,String DocumentNo,Timestamp DateInvoiced,int C_Currency_ID,BigDecimal OpenAmt){  if (OpenAmt == null || OpenAmt.signum() == 0)   return false;  if (OpenAmt.abs().compareTo(p_MaxInvWriteOffAmt) >= 0)   return false;  if (p_IsSimulation) {    addLog("@IsSimulation@");    addLog(C_Invoice_ID,DateInvoiced,OpenAmt,DocumentNo);    return true;  }  MInvoice invoice=new MInvoice(getCtx(),C_Invoice_ID,get_TrxName());  if (!invoice.isSOTrx())   OpenAmt=OpenAmt.negate();  if (m_alloc == null || C_Currency_ID != m_alloc.getC_Currency_ID()) {    processAllocation();    m_alloc=new MAllocationHdr(getCtx(),true,p_DateAcct,C_Currency_ID,getProcessInfo().getTitle() + " #" + getAD_PInstance_ID(),get_TrxName());    m_alloc.setAD_Org_ID(invoice.getAD_Org_ID());    if (!m_alloc.save()) {      log.log(Level.SEVERE,"Cannot create allocation header");      return false;    }  }  if (p_CreatePayment && (m_payment == null || invoice.getC_BPartner_ID() != m_payment.getC_BPartner_ID() || C_Currency_ID != m_payment.getC_Currency_ID())) {    processPayment();    m_payment=new MPayment(getCtx(),0,get_TrxName());    m_payment.setAD_Org_ID(invoice.getAD_Org_ID());    m_payment.setC_BankAccount_ID(p_C_BankAccount_ID);    m_payment.setTenderType(MPayment.TENDERTYPE_Check);    m_payment.setDateTrx(p_DateAcct);    m_payment.setDateAcct(p_DateAcct);    m_payment.setDescription(getProcessInfo().getTitle() + " #" + getAD_PInstance_ID());    m_payment.setC_BPartner_ID(invoice.getC_BPartner_ID());    m_payment.setIsReceipt(true);    m_payment.setC_Currency_ID(C_Currency_ID);    if (!m_payment.save()) {      log.log(Level.SEVERE,"Cannot create payment");      return false;    }  }  MAllocationLine aLine=null;  if (p_CreatePayment) {    aLine=new MAllocationLine(m_alloc,OpenAmt,Env.ZERO,Env.ZERO,Env.ZERO);    m_payment.setPayAmt(m_payment.getPayAmt().add(OpenAmt));    aLine.setC_Payment_ID(m_payment.getC_Payment_ID());  } else   aLine=new MAllocationLine(m_alloc,Env.ZERO,Env.ZERO,OpenAmt,Env.ZERO);  aLine.setC_Invoice_ID(C_Invoice_ID);  if (aLine.save()) {    addLog(C_Invoice_ID,DateInvoiced,OpenAmt,DocumentNo);    return true;  }  log.log(Level.SEVERE,"Cannot create allocation line for C_Invoice_ID=" + C_Invoice_ID);  return false;}  }
class C{  public boolean retryRequest(final IOException exception,int executionCount,final HttpContext context){  if (exception == null) {    throw new IllegalArgumentException("Exception parameter may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  if (executionCount > this.retryCount) {    return false;  }  if (exception instanceof NoHttpResponseException) {    return true;  }  if (exception instanceof InterruptedIOException) {    return false;  }  if (exception instanceof UnknownHostException) {    return false;  }  if (exception instanceof SSLHandshakeException) {    return false;  }  Boolean b=(Boolean)context.getAttribute(ExecutionContext.HTTP_REQ_SENT);  boolean sent=(b != null && b.booleanValue());  if (!sent || this.requestSentRetryEnabled) {    return true;  }  return false;}  }
class C{  private final void _writeStringSegmentASCII2(final char[] cbuf,int offset,final int end) throws IOException, JsonGenerationException {  if ((_outputTail + 6 * (end - offset)) > _outputEnd) {    _flushBuffer();  }  int outputPtr=_outputTail;  final byte[] outputBuffer=_outputBuffer;  final int[] escCodes=_outputEscapes;  final int maxUnescaped=_maximumNonEscapedChar;  while (offset < end) {    int ch=cbuf[offset++];    if (ch <= 0x7F) {      if (escCodes[ch] == 0) {        outputBuffer[outputPtr++]=(byte)ch;        continue;      }      int escape=escCodes[ch];      if (escape > 0) {        outputBuffer[outputPtr++]=BYTE_BACKSLASH;        outputBuffer[outputPtr++]=(byte)escape;      } else {        outputPtr=_writeGenericEscape(ch,outputPtr);      }      continue;    }    if (ch > maxUnescaped) {      outputPtr=_writeGenericEscape(ch,outputPtr);      continue;    }    if (ch <= 0x7FF) {      outputBuffer[outputPtr++]=(byte)(0xc0 | (ch >> 6));      outputBuffer[outputPtr++]=(byte)(0x80 | (ch & 0x3f));    } else {      outputPtr=_outputMultiByteChar(ch,outputPtr);    }  }  _outputTail=outputPtr;}  }
class C{  public void xorBit(int i) throws RuntimeException {  if (i < 0 || i > (len - 1)) {    throw new RuntimeException();  }  value[i >>> 5]^=bitMask[i & 0x1f];}  }
class C{  public JSONException(String message){  super(message);}  }
class C{  public static Iterable<Node> toIterable(NodeList nodeList){  List<Node> nodes=new ArrayList<>(nodeList.getLength());  for (int i=0; i < nodeList.getLength(); i++) {    nodes.add(nodeList.item(i));  }  return nodes;}  }
class C{  private Node(ByteArray ba){  super();  if (ba == null) {    throw new IllegalArgumentException("ByteArray must not be null.");  }  this.ba=ba;}  }
class C{  private void tryScrollBackToTopAfterComplete(){  tryScrollBackToTop();}  }
class C{  @Override public boolean put(final Row.Entry row) throws IOException, SpaceExceededException {  assert row.objectsize() <= this.rowdef.objectsize;  final byte[] key=row.getPrimaryKeyBytes();  if (this.tables == null)   return true;  Index keeper=keeperOf(key);  if (keeper != null) synchronized (this) {    return keeper.put(row);  }synchronized (this) {    keeper=keeperOf(key);    if (keeper != null)     return keeper.put(row);    assert this.current == null || this.tables.get(this.current) != null : "this.current = " + this.current;    keeper=(this.current == null) ? newTable() : checkTable(this.tables.get(this.current));    final boolean b=keeper.put(row);    assert b;    return b;  }}  }
class C{  public void appendChild(int newChild,boolean clone,boolean cloneDepth){  boolean sameDoc=((newChild & DOCHANDLE_MASK) == m_docHandle);  if (clone || !sameDoc) {  } else {  }}  }
class C{  public void sort(int runColumn){  for (int i=0; i < m_Datasets.size(); i++) {    m_Datasets.get(i).sort(runColumn);  }}  }
class C{  protected void startupModules(Collection<IFloodlightModule> moduleSet) throws FloodlightModuleException {  for (  IFloodlightModule m : moduleSet) {    if (logger.isDebugEnabled()) {      logger.debug("Starting " + m.getClass().getCanonicalName());    }    m.startUp(floodlightModuleContext);  }}  }
class C{  public ImageTree forwardDWT(int[][] pixels){  Image image=null;  ImageTree tree=null;  image=new Image(this.cols,this.rows);  for (int i=0; i < this.rows; i++) {    for (int j=0; j < this.cols; j++) {      DWTUtil.setPixel(image,j,i,pixels[i][j]);    }  }  tree=DWTUtil.waveletTransform(image,this.level,this.filters,this.method);  return tree;}  }
class C{  protected FocusListener createFocusListener(){  return new AquaTableUI.FocusHandler();}  }
class C{  public static double normalizeLongitude(double degrees){  double lon=degrees % 360;  return lon > 180 ? lon - 360 : (lon < -180 ? 360 + lon : lon);}  }
class C{  protected void deactivateFrame(JInternalFrame f){  setColors(f);  super.deactivateFrame(f);}  }
class C{  public void removeHeader(Header header){  if (header == null) {    return;  }  headers.remove(header);}  }
class C{  VPlexVirtualVolumeInfo createDistributedVirtualVolume(VPlexVirtualVolumeInfo virtualVolume,VolumeInfo newRemoteVolume,boolean discoveryRequired,String clusterId,String transferSize) throws VPlexApiException {  String virtualVolumeName=virtualVolume.getName();  String localDeviceName=virtualVolume.getSupportingDevice();  s_logger.info("Find remote storage volume");  List<VolumeInfo> remoteVolumeInfoList=new ArrayList<VolumeInfo>();  remoteVolumeInfoList.add(newRemoteVolume);  List<VPlexClusterInfo> clusterInfoList=new ArrayList<VPlexClusterInfo>();  Map<VolumeInfo,VPlexStorageVolumeInfo> storageVolumeInfoMap=findStorageVolumes(remoteVolumeInfoList,discoveryRequired,clusterInfoList);  if (storageVolumeInfoMap.isEmpty()) {    throw VPlexApiException.exceptions.cantDiscoverStorageVolume(newRemoteVolume.getVolumeWWN());  }  claimStorageVolumes(storageVolumeInfoMap,false);  s_logger.info("Claimed remote storage volume");  VPlexDeviceInfo remoteDevice, localDevice;  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  try {    List<VPlexStorageVolumeInfo> storageVolumeInfoList=new ArrayList<VPlexStorageVolumeInfo>();    for (    VolumeInfo nativeVolumeInfo : remoteVolumeInfoList) {      storageVolumeInfoList.add(storageVolumeInfoMap.get(nativeVolumeInfo));    }    createExtents(storageVolumeInfoList);    s_logger.info("Created extent on remote storage volume");    List<VPlexExtentInfo> extentInfoList=discoveryMgr.findExtents(storageVolumeInfoList);    if (extentInfoList.isEmpty()) {      throw VPlexApiException.exceptions.cantFindExtentForClaimedVolume(storageVolumeInfoList.get(0).getName());    }    createLocalDevices(extentInfoList);    s_logger.info("Created local devices on extents");    List<VPlexDeviceInfo> remoteDevices=discoveryMgr.findLocalDevices(extentInfoList);    if (remoteDevices.isEmpty()) {      throw VPlexApiException.exceptions.cantFindLocalDeviceForExtent(extentInfoList.get(0).getName());    }    remoteDevice=remoteDevices.get(0);    s_logger.info("Found the remote device {}",remoteDevice.getPath());    localDevice=discoveryMgr.findLocalDevice(localDeviceName);    if (localDevice == null) {      throw VPlexApiException.exceptions.cantFindLocalDevice(localDeviceName);    }    s_logger.info("Found the local device {}",localDevice.getPath());    String rulesetName=VPlexApiConstants.CLUSTER_1_DETACHES;    if (clusterId.equals(VPlexApiConstants.CLUSTER_2_ID)) {      rulesetName=VPlexApiConstants.CLUSTER_2_DETACHES;    }    deviceAttachMirror(localDevice.getPath(),remoteDevice.getPath(),rulesetName);    s_logger.info("Finished device attach-mirror on device {}",localDevice.getPath());  } catch (  Exception e) {    s_logger.info("Exception occurred creating and attaching remote mirror " + " to local VPLEX volume, attempting to cleanup VPLEX artifacts");    throw e;  }  try {    VPlexVirtualVolumeInfo vvInfo=discoveryMgr.findVirtualVolume(localDevice.getCluster(),virtualVolumeName,false);    VPlexDistributedDeviceInfo distDeviceInfo=discoveryMgr.findDistributedDevice(localDevice.getName());    if (transferSize != null) {      String deviceName=distDeviceInfo.getName();      s_logger.info("Rebuild transfer size of {} will be set for device {}",transferSize,deviceName);      setRebuildTransferSize(deviceName,transferSize);    }    if (localDeviceName.length() > VPlexApiConstants.DEVICE_PREFIX.length()) {      List<String> claimedVolumeNames=Arrays.asList(localDeviceName.substring(VPlexApiConstants.DEVICE_PREFIX.length()));      if (VPlexApiUtils.volumeHasDefaultNamingConvention(virtualVolumeName,localDeviceName,false,claimedVolumeNames)) {        String remoteName=remoteDevice.getName().replaceAll(VPlexApiConstants.DEVICE_PREFIX,"");        String newVvName=vvInfo.getName();        newVvName=newVvName.replaceFirst(VPlexApiConstants.DEVICE_PREFIX,VPlexApiConstants.DIST_DEVICE_PREFIX + VPlexApiConstants.DIST_DEVICE_NAME_DELIM);        newVvName=newVvName.replaceFirst(VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX,"");        newVvName=newVvName + VPlexApiConstants.DIST_DEVICE_NAME_DELIM + remoteName+ VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX;        vvInfo=renameVPlexResource(vvInfo,newVvName);        String newDdName=distDeviceInfo.getName();        newDdName=newDdName.replaceFirst(VPlexApiConstants.DEVICE_PREFIX,VPlexApiConstants.DIST_DEVICE_PREFIX + VPlexApiConstants.DIST_DEVICE_NAME_DELIM);        newDdName=newDdName + VPlexApiConstants.DIST_DEVICE_NAME_DELIM + remoteName;        distDeviceInfo=renameVPlexResource(distDeviceInfo,newDdName);      } else       if (VPlexApiUtils.localDeviceHasDefaultNamingConvention(localDeviceName,claimedVolumeNames)) {        String newDdName=distDeviceInfo.getName();        newDdName=newDdName.replaceFirst(VPlexApiConstants.DEVICE_PREFIX,VPlexApiConstants.DIST_DEVICE_PREFIX + VPlexApiConstants.DIST_DEVICE_NAME_DELIM);        String remoteName=remoteDevice.getName().replaceAll(VPlexApiConstants.DEVICE_PREFIX,"");        newDdName=newDdName + VPlexApiConstants.DIST_DEVICE_NAME_DELIM + remoteName;        distDeviceInfo=renameVPlexResource(distDeviceInfo,newDdName);      }    }    return vvInfo;  } catch (  Exception e) {    try {      detachMirrorFromLocalVirtualVolume(virtualVolumeName,remoteDevice.getName(),true);      deleteVirtualVolume(Collections.singletonList(newRemoteVolume));    } catch (    Exception ex) {      s_logger.error("Failed attempting to cleanup VPLEX after failed attempt " + "to find and rename local virtual volume {} after remote mirror attached.",virtualVolume.getPath(),ex);    }    throw e;  }}  }
class C{  public TSIGRecord(Name name,int dclass,long ttl,Name alg,Date timeSigned,int fudge,byte[] signature,int originalID,int error,byte other[]){  super(name,Type.TSIG,dclass,ttl);  this.alg=checkName("alg",alg);  this.timeSigned=timeSigned;  this.fudge=checkU16("fudge",fudge);  this.signature=signature;  this.originalID=checkU16("originalID",originalID);  this.error=checkU16("error",error);  this.other=other;}  }
class C{  public boolean doInsert(DB db,Object threadstate) throws WorkloadException {  int keynum=keysequence.nextInt();  String dbkey=buildKeyName(keynum);  HashMap<String,ByteIterator> values=buildValues();  if (db.insert(table,dbkey,values) == 0) {    actualopcount.addAndGet(1);    return true;  } else {    return false;  }}  }
class C{  public ParameterFile(Reader reader) throws IOException {  super();  if (reader instanceof CommentedLineReader) {    parameters=load((CommentedLineReader)reader);  } else {    parameters=load(new CommentedLineReader(reader));  }}  }
class C{  public boolean isWildcard(){  return isSubtypeWildcard();}  }
class C{  public MAttributeInstance(Properties ctx,int M_Attribute_ID,int M_AttributeSetInstance_ID,String Value,String trxName){  super(ctx,0,trxName);  setM_Attribute_ID(M_Attribute_ID);  setM_AttributeSetInstance_ID(M_AttributeSetInstance_ID);  setValue(Value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.814 -0400",hash_original_method="EC8E61A8079DE5D93B38041B01ED6536",hash_generated_method="EEC6843FBE04C4A8CEB9ED69F88A2C92") private void onDiscoverServicesResult(String deviceObjectPath,boolean result){  String address=mBluetoothService.getAddressFromObjectPath(deviceObjectPath);  if (address == null)   return;  if (result) {    mBluetoothService.updateRemoteDevicePropertiesCache(address);  }  mBluetoothService.sendUuidIntent(address);  mBluetoothService.makeServiceChannelCallbacks(address);}  }
class C{  private DefaultValue(){}  }
class C{  public boolean tryAcquire(Object topicObject){  throw new UnsupportedOperationException(LocalizedStrings.Collaboration_NOT_IMPLEMENTED.toLocalizedString());}  }
class C{  public static Test suite(){  return (new TestSuite(SelectManyCollectionITCase.class));}  }
class C{  public long idleTimeoutMillis(){  return idleTimeoutMillis;}  }
class C{  public static <A>double[] betaPWM(A data,NumberArrayAdapter<?,A> adapter,final int nmom){  final int n=adapter.size(data);  final double[] xmom=new double[nmom];  double weight=1. / n;  for (int i=0; i < n; i++) {    final double val=adapter.getDouble(data,i);    xmom[0]+=weight * val;    for (int j=1; j < nmom; j++) {      weight*=(i - j + 1) / (n - j + 1);      xmom[j]+=weight * val;    }  }  return xmom;}  }
class C{  protected void zoneWasLoaded(View zone){  loadedZones.addElement(zone);  unloadOldZones();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE__AST_ELEMENT:    setAstElement((EObject)null);  return;case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE__MODULE:setModule((TModule)null);return;case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE__DECLARED_DYNAMIC:setDeclaredDynamic(DECLARED_DYNAMIC_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (!getItemVisible(series,item)) {    return;  }  PlotOrientation orientation=plot.getOrientation();  double x=dataset.getXValue(series,item);  double y=dataset.getYValue(series,item);  double z=Double.NaN;  if (dataset instanceof XYZDataset) {    XYZDataset xyzData=(XYZDataset)dataset;    z=xyzData.getZValue(series,item);  }  if (!Double.isNaN(z)) {    RectangleEdge domainAxisLocation=plot.getDomainAxisEdge();    RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();    double transX=domainAxis.valueToJava2D(x,dataArea,domainAxisLocation);    double transY=rangeAxis.valueToJava2D(y,dataArea,rangeAxisLocation);    double transDomain;    double transRange;    double zero;switch (getScaleType()) {case SCALE_ON_DOMAIN_AXIS:      zero=domainAxis.valueToJava2D(0.0,dataArea,domainAxisLocation);    transDomain=domainAxis.valueToJava2D(z,dataArea,domainAxisLocation) - zero;  transRange=transDomain;break;case SCALE_ON_RANGE_AXIS:zero=rangeAxis.valueToJava2D(0.0,dataArea,rangeAxisLocation);transRange=zero - rangeAxis.valueToJava2D(z,dataArea,rangeAxisLocation);transDomain=transRange;break;default :double zero1=domainAxis.valueToJava2D(0.0,dataArea,domainAxisLocation);double zero2=rangeAxis.valueToJava2D(0.0,dataArea,rangeAxisLocation);transDomain=domainAxis.valueToJava2D(z,dataArea,domainAxisLocation) - zero1;transRange=zero2 - rangeAxis.valueToJava2D(z,dataArea,rangeAxisLocation);}transDomain=Math.abs(transDomain);transRange=Math.abs(transRange);Ellipse2D circle=null;if (orientation == PlotOrientation.VERTICAL) {circle=new Ellipse2D.Double(transX - transDomain / 2.0,transY - transRange / 2.0,transDomain,transRange);} else if (orientation == PlotOrientation.HORIZONTAL) {circle=new Ellipse2D.Double(transY - transRange / 2.0,transX - transDomain / 2.0,transRange,transDomain);} else {throw new IllegalStateException();}g2.setPaint(getItemPaint(series,item));g2.fill(circle);g2.setStroke(getItemOutlineStroke(series,item));g2.setPaint(getItemOutlinePaint(series,item));g2.draw(circle);if (isItemLabelVisible(series,item)) {if (orientation == PlotOrientation.VERTICAL) {drawItemLabel(g2,orientation,dataset,series,item,transX,transY,false);} else if (orientation == PlotOrientation.HORIZONTAL) {drawItemLabel(g2,orientation,dataset,series,item,transY,transX,false);}}if (info != null) {EntityCollection entities=info.getOwner().getEntityCollection();if (entities != null && circle.intersects(dataArea)) {addEntity(entities,circle,dataset,series,item,circle.getCenterX(),circle.getCenterY());}}int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);updateCrosshairValues(crosshairState,x,y,domainAxisIndex,rangeAxisIndex,transX,transY,orientation);}}  }
class C{  public SignatureVisitor visitArrayType(){  return this;}  }
class C{  public void putShortArray(String key,short[] value){  unparcel();  mMap.put(key,value);}  }
class C{  String stateToString(int state){switch (state) {case UNKNOWN:    return "UNKNOWN";case EDITED:  return "EDITED";case READ:return "READ";case STORED:return "STORED";case FROMFILE:return "FROMFILE";case SAME:return "SAME";case DIFF:return "DIFF";default :log.error("Inconsistent state: " + _state);return "ERROR!!";}}  }
class C{  private Node<E> nextNode(Node<E> p){  for (; ; ) {    Node<E> s=p.next;    if (s == p)     return head.next;    if (s == null || s.item != null)     return s;    p=s;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrnextsiblingnull.class,args);}  }
class C{  boolean migrateOldEapTlsNative(WifiNative wifiNative,int netId){  String oldPrivateKey=wifiNative.getNetworkVariable(netId,OLD_PRIVATE_KEY_NAME);  if (TextUtils.isEmpty(oldPrivateKey)) {    return false;  } else {    oldPrivateKey=removeDoubleQuotes(oldPrivateKey);    if (TextUtils.isEmpty(oldPrivateKey)) {      return false;    }  }  mFields.put(ENGINE_KEY,ENGINE_ENABLE);  mFields.put(ENGINE_ID_KEY,convertToQuotedString(ENGINE_ID_KEYSTORE));  final String keyName;  if (oldPrivateKey.startsWith(KEYSTORE_URI)) {    keyName=new String(oldPrivateKey.substring(KEYSTORE_URI.length()));  } else {    keyName=oldPrivateKey;  }  mFields.put(PRIVATE_KEY_ID_KEY,convertToQuotedString(keyName));  wifiNative.setNetworkVariable(netId,ENGINE_KEY,mFields.get(ENGINE_KEY));  wifiNative.setNetworkVariable(netId,ENGINE_ID_KEY,mFields.get(ENGINE_ID_KEY));  wifiNative.setNetworkVariable(netId,PRIVATE_KEY_ID_KEY,mFields.get(PRIVATE_KEY_ID_KEY));  wifiNative.setNetworkVariable(netId,OLD_PRIVATE_KEY_NAME,EMPTY_VALUE);  return true;}  }
class C{  public static void auditFile(DbClient dbClient,OperationTypeEnum auditType,boolean operationalStatus,String description,Object... descparams){  AuditLogManager auditMgr=AuditLogManagerFactory.getAuditLogManager();  auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus ? AuditLogManager.AUDITLOG_SUCCESS : AuditLogManager.AUDITLOG_FAILURE,description,descparams);}  }
class C{  public synchronized String printArrivalTime(long arrivalTime){  Calendar time=Calendar.getInstance();  time.setTimeInMillis(arrivalTime);  return format.format(time.getTime());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ParseException(String s,int errorOffset){  super(s);  this.errorOffset=errorOffset;}  }
class C{  public boolean isLocal(){  try {    return InetAddress.getByName(host).isLoopbackAddress();  } catch (  UnknownHostException e) {    return false;  }}  }
class C{  public Task<StorageSystemRestRep> discover(URI id,String type){  UriBuilder builder=client.uriBuilder(getIdUrl() + "/discover");  if (type != null && !type.equals("")) {    builder=builder.queryParam("namespace",type);  }  return postTaskURI(builder.build(id));}  }
class C{  public void tag(final TagParams params) throws ImageNotFoundException, IOException {  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("POST").path(apiVersionPathPrefix + "/images/" + params.getImage()+ "/tag").query("repo",params.getRepository())){    addQueryParamIfNotNull(connection,"force",params.isForce());    addQueryParamIfNotNull(connection,"tag",params.getTag());    final DockerResponse response=connection.request();    final int status=response.getStatus();    if (status == 404) {      throw new ImageNotFoundException(readAndCloseQuietly(response.getInputStream()));    }    if (status / 100 != 2) {      throw getDockerException(response);    }  } }  }
class C{  private String extensionStorageHttpUrl(final String visualStudioHost,final String account,final String collection){  final String host=account + ".extmgmt." + visualStudioHost+ ".com";  final String collectionPath=collection + "/_apis";  final String extensionStoragePath="ExtensionManagement/InstalledExtensions/" + PUBLISHER + "/"+ EXTENSION+ "/Data/Scopes/Default/Current/Collections/$settings/Documents";  return format("%s://%s/%s/%s",PROTOCOL,host,collectionPath,extensionStoragePath);}  }
class C{  public String[] split(String input){  return pattern.split(input);}  }
class C{  private static String convertObsoleteLanguageCodeToNew(String langCode){  if (langCode == null) {    return null;  }  if ("iw".equals(langCode)) {    return "he";  } else   if ("in".equals(langCode)) {    return "id";  } else   if ("ji".equals(langCode)) {    return "yi";  }  return langCode;}  }
class C{  private void removeParticleDenotion(StringBuilder buffer){  if (buffer.length() > 4) {    for (int c=0; c < buffer.length() - 3; c++) {      if (buffer.substring(c,c + 4).equals("gege")) {        buffer.delete(c,c + 2);        return;      }    }  }}  }
class C{  public void testDoubleValuePosInfinity(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+400";  BigDecimal aNumber=new BigDecimal(a);  double result=Double.POSITIVE_INFINITY;  assertEquals("incorrect value",result,aNumber.doubleValue(),0);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public MlBayesIm(BayesPm bayesPm) throws IllegalArgumentException {  this(bayesPm,null,MANUAL);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected Rule parseRuleResult(ResultSet ruleListResultSet) throws SQLException {  int uid=ruleListResultSet.getInt("RULE_INTERNAL_ID");  String name=ruleListResultSet.getString("RULE_NAME");  String description=ruleListResultSet.getString("DESCRIPTION");  String rule=ruleListResultSet.getString("RULE");  return new Rule(uid,name,rule,description);}  }
class C{  public void addVertex(VertexLabelType v){  checkForNewVertex(v);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case BasePackage.NAMED_ELEMENT__NAME:    setName(NAME_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static ConstParameter integer(long i){  return new LongConstParameter(i);}  }
class C{  private void updateCharacterBufferFromModel(){  charBuffer.clear();  charBuffer.setBackgroundColor(java.awt.Color.LIGHT_GRAY.brighter());  currentFirstRow=verticalScrollbar.getValue();  currentFirstCharColumn=horizontalScrollbar.getValue();  int totalCopiedLines=0;  if (codeModel.hasHeaderRow()) {    totalCopiedLines=1;    int currentColumnIndex=0;    for (int fieldIndex=0; fieldIndex < codeModel.getNumberOfColumns(); currentColumnIndex+=codeModel.getColumnWidthInCharacters(fieldIndex), fieldIndex++) {      charBuffer.copyInto(0,currentColumnIndex,codeModel.getHeader(fieldIndex));    }  }  for (int rowIndex=currentFirstRow; rowIndex < Math.min(currentFirstRow + currentlyVisibleLines,codeModel.getNumberOfRows()); rowIndex++) {    for (int lineIndex=(rowIndex == currentFirstRow) ? currentFirstLine : 0; lineIndex < codeModel.getMaximumLinesForRow(rowIndex); lineIndex++) {      int currentColumnIndex=0;      for (int fieldIndex=0; fieldIndex < codeModel.getNumberOfColumns(); currentColumnIndex+=codeModel.getColumnWidthInCharacters(fieldIndex), fieldIndex++) {        if ((caretPosition.getRow() == rowIndex) && (caretPosition.getLine() == lineIndex) && (caretPosition.getColumn() == fieldIndex)) {          caretX=currentColumnIndex + caretPosition.getFieldIndex();          caretY=totalCopiedLines;        }        FormattedCharacterBuffer line=codeModel.getLineFormatted(rowIndex,fieldIndex,lineIndex);        if (line != null) {          charBuffer.copyInto(totalCopiedLines,currentColumnIndex,line);        }        int linestart=totalCopiedLines * fontLineHeight + (fontLineHeight / 2);        if (!yCoordinateToRowAndLine.containsKey(linestart)) {          yCoordinateToRowAndLine.put(linestart,new CodeDisplayCoordinate(rowIndex,lineIndex,0,0));        } else {          CodeDisplayCoordinate coordinate=yCoordinateToRowAndLine.get(linestart);          coordinate.setRow(rowIndex);          coordinate.setLine(lineIndex);        }      }      totalCopiedLines++;    }  }  setScrollBarMaximum();}  }
class C{  public boolean extendMBR(SpatialComparable responsibleMBR){  return this.mbr.extend(responsibleMBR);}  }
class C{  public void decode(InputStream in) throws InvalidKeyException {  DerValue val;  try {    val=new DerValue(in);    if (val.tag != DerValue.tag_Sequence)     throw new InvalidKeyException("invalid key format");    BigInteger version=val.data.getBigInteger();    if (!version.equals(PKCS8Key.version)) {      throw new IOException("version mismatch: (supported: " + Debug.toHexString(PKCS8Key.version) + ", parsed: "+ Debug.toHexString(version));    }    algid=AlgorithmId.parse(val.data.getDerValue());    key=val.data.getOctetString();    parseKeyBits();    if (val.data.available() != 0) {    }  } catch (  IOException e) {    throw new InvalidKeyException("IOException : " + e.getMessage());  }}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public static <T>List<T> plus(List<T> self,int index,Iterable<T> additions){  return plus(self,index,toList(additions));}  }
class C{  public static ZoneRules of(ZoneOffset baseStandardOffset,ZoneOffset baseWallOffset,List<ZoneOffsetTransition> standardOffsetTransitionList,List<ZoneOffsetTransition> transitionList,List<ZoneOffsetTransitionRule> lastRules){  Objects.requireNonNull(baseStandardOffset,"baseStandardOffset");  Objects.requireNonNull(baseWallOffset,"baseWallOffset");  Objects.requireNonNull(standardOffsetTransitionList,"standardOffsetTransitionList");  Objects.requireNonNull(transitionList,"transitionList");  Objects.requireNonNull(lastRules,"lastRules");  return new ZoneRules(baseStandardOffset,baseWallOffset,standardOffsetTransitionList,transitionList,lastRules);}  }
class C{  ConverterSet remove(final int index,Converter[] removed){  Converter[] converters=iConverters;  int length=converters.length;  if (index >= length) {    throw new IndexOutOfBoundsException();  }  if (removed != null) {    removed[0]=converters[index];  }  Converter[] copy=new Converter[length - 1];  int j=0;  for (int i=0; i < length; i++) {    if (i != index) {      copy[j++]=converters[i];    }  }  return new ConverterSet(copy);}  }
class C{  public BlockData(BlockType type){  this.type=type;  this.metadata=0;}  }
class C{  public CacheAtomicUpdateTimeoutCheckedException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public final AssertSubscriber<T> assertTerminated(){  if (cdl.getCount() != 0) {    throw new AssertionError("Not terminated",null);  }  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return new Long(a == null ? 0 : a.getSchedulingDuration());}  }
class C{  public boolean isForward(){  return forward;}  }
class C{  public void init() throws ServletException {}  }
class C{  @Since(CommonParams.VERSION_1) @PUT @Path(CommonParams.PATH_ID + TriggerCommonParams.PATH_TRIGGER_REJECT) @Consumes(MediaType.APPLICATION_JSON) public Response putReject(@Context Request request,ProcessRepresentation content,@InjectParam TriggerParameters params) throws WebApplicationException {  return put(request,processBackend.putReject(),content,params);}  }
class C{  public boolean isReconnect(){  return this == RECONNECT;}  }
class C{  public ObjectiveTouchEvent(Objective objective,Player player){  super(objective);  this.player=player;}  }
class C{  public QuestWithPrefixCompletedCondition(final String questname){  this.questname=checkNotNull(questname);}  }
class C{  public Vector3f interpolate(Vector3f beginVec,Vector3f finalVec,float changeAmnt){  this.x=(1 - changeAmnt) * beginVec.x + changeAmnt * finalVec.x;  this.y=(1 - changeAmnt) * beginVec.y + changeAmnt * finalVec.y;  this.z=(1 - changeAmnt) * beginVec.z + changeAmnt * finalVec.z;  return this;}  }
class C{  private boolean checkRecoveredType(){  if (this.currentElement instanceof RecoveredType) {    if (this.indexOfAssistIdentifier() < 0)     return false;    if (this.lastErrorEndPosition <= this.cursorLocation && ((RecoveredType)this.currentElement).lastMemberEnd() < this.lastErrorEndPosition && Util.getLineNumber(this.lastErrorEndPosition,this.scanner.lineEnds,0,this.scanner.linePtr) == Util.getLineNumber(((CompletionScanner)this.scanner).completedIdentifierStart,this.scanner.lineEnds,0,this.scanner.linePtr)) {      return false;    }    RecoveredType recoveredType=(RecoveredType)this.currentElement;    if (recoveredType.foundOpeningBrace) {      if ((this.genericsIdentifiersLengthPtr < 0 && this.identifierPtr > -1) || (this.genericsIdentifiersLengthStack[this.genericsIdentifiersLengthPtr] <= this.identifierPtr)) {        pushOnGenericsIdentifiersLengthStack(this.identifierLengthStack[this.identifierLengthPtr]);        pushOnGenericsLengthStack(0);      }      this.assistNode=this.getTypeReference(0);      this.lastCheckPoint=this.assistNode.sourceEnd + 1;      this.isOrphanCompletionNode=true;      return true;    } else {      if (recoveredType.typeDeclaration.superclass == null && this.topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_EXTENDS_KEYWORD) {        consumeClassOrInterfaceName();        this.pushOnElementStack(K_NEXT_TYPEREF_IS_CLASS);        this.assistNode=this.getTypeReference(0);        popElement(K_NEXT_TYPEREF_IS_CLASS);        this.lastCheckPoint=this.assistNode.sourceEnd + 1;        this.isOrphanCompletionNode=true;        return true;      }    }  }  return false;}  }
class C{  public SubscriptionStillActiveException(String message,Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  private void QuickSort2(Vector v,int lo0,int hi0){  int lo=lo0;  int hi=hi0;  if (hi0 > lo0) {    ElemTemplateElement midNode=(ElemTemplateElement)v.elementAt((lo0 + hi0) / 2);    while (lo <= hi) {      while ((lo < hi0) && (((ElemTemplateElement)v.elementAt(lo)).compareTo(midNode) < 0)) {        ++lo;      }      while ((hi > lo0) && (((ElemTemplateElement)v.elementAt(hi)).compareTo(midNode) > 0)) {        --hi;      }      if (lo <= hi) {        ElemTemplateElement node=(ElemTemplateElement)v.elementAt(lo);        v.setElementAt(v.elementAt(hi),lo);        v.setElementAt(node,hi);        ++lo;        --hi;      }    }    if (lo0 < hi) {      QuickSort2(v,lo0,hi);    }    if (lo < hi0) {      QuickSort2(v,lo,hi0);    }  }}  }
class C{  public final void testWriteint03() throws IOException {  for (int k=0; k < algorithmName.length; k++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      DigestOutputStream dos=new DigestOutputStream(null,md);      try {        for (int i=0; i < MY_MESSAGE_LEN; i++) {          dos.write(myMessage[i]);        }        fail("OutputStream not set. write(int) must not work");      } catch (      Exception e) {        return;      }    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  private boolean checkMatch(User user,String text){  lastMatchColor=null;  lastMatchNoNotification=false;  lastMatchNoSound=false;  String lowercaseText=text.toLowerCase();  if (highlightUsername && usernamePattern != null && usernamePattern.matcher(text).matches()) {    return true;  }  for (  HighlightItem item : items) {    if (item.matches(user,text,lowercaseText)) {      lastMatchColor=item.getColor();      lastMatchNoNotification=item.noNotification();      lastMatchNoSound=item.noSound();      return true;    }  }  if (highlightNextMessages && user != null && hasRecentMatch(user.nick)) {    return true;  }  return false;}  }
class C{  TestMutator(Collection<T> resultPool,T... items){  this.resultPool=resultPool;  this.items=items;}  }
class C{  public void endDTD() throws SAXException {  m_handler.endDTD();}  }
class C{  public Document createDocument(String uri,Reader r) throws IOException {  Document doc;  InputSource is=new InputSource(r);  is.setSystemId(uri);  try {    doc=super.createDocument(SVGDOMImplementation.SVG_NAMESPACE_URI,"svg",uri,is);    if (uri != null) {      ((SVGOMDocument)doc).setParsedURL(new ParsedURL(uri));    }    AbstractDocument d=(AbstractDocument)doc;    d.setDocumentURI(uri);    d.setXmlStandalone(isStandalone);    d.setXmlVersion(xmlVersion);  } catch (  MalformedURLException e) {    throw new IOException(e.getMessage());  }  return doc;}  }
class C{  public void add(JsonElement element){  if (element == null) {    element=JsonNull.INSTANCE;  }  elements.add(element);}  }
class C{  private void touchLastCorpusLoadTime(){  this.lastCorpusLoadTime=System.currentTimeMillis();}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  static boolean verifyCRL(X509CertImpl certImpl,DistributionPoint point,X509CRL crl,boolean[] reasonsMask,boolean signFlag,PublicKey prevKey,X509Certificate prevCert,String provider,Set<TrustAnchor> trustAnchors,List<CertStore> certStores,Date validity) throws CRLException, IOException {  if (debug != null) {    debug.println("DistributionPointFetcher.verifyCRL: " + "checking revocation status for" + "\n  SN: " + Debug.toHexString(certImpl.getSerialNumber()) + "\n  Subject: "+ certImpl.getSubjectX500Principal()+ "\n  Issuer: "+ certImpl.getIssuerX500Principal());  }  boolean indirectCRL=false;  X509CRLImpl crlImpl=X509CRLImpl.toImpl(crl);  IssuingDistributionPointExtension idpExt=crlImpl.getIssuingDistributionPointExtension();  X500Name certIssuer=(X500Name)certImpl.getIssuerDN();  X500Name crlIssuer=(X500Name)crlImpl.getIssuerDN();  GeneralNames pointCrlIssuers=point.getCRLIssuer();  X500Name pointCrlIssuer=null;  if (pointCrlIssuers != null) {    if (idpExt == null || ((Boolean)idpExt.get(IssuingDistributionPointExtension.INDIRECT_CRL)).equals(Boolean.FALSE)) {      return false;    }    boolean match=false;    for (Iterator<GeneralName> t=pointCrlIssuers.iterator(); !match && t.hasNext(); ) {      GeneralNameInterface name=t.next().getName();      if (crlIssuer.equals(name) == true) {        pointCrlIssuer=(X500Name)name;        match=true;      }    }    if (match == false) {      return false;    }    if (issues(certImpl,crlImpl,provider)) {      prevKey=certImpl.getPublicKey();    } else {      indirectCRL=true;    }  } else   if (crlIssuer.equals(certIssuer) == false) {    if (debug != null) {      debug.println("crl issuer does not equal cert issuer.\n" + "crl issuer: " + crlIssuer + "\n"+ "cert issuer: "+ certIssuer);    }    return false;  } else {    KeyIdentifier certAKID=certImpl.getAuthKeyId();    KeyIdentifier crlAKID=crlImpl.getAuthKeyId();    if (certAKID == null || crlAKID == null) {      if (issues(certImpl,crlImpl,provider)) {        prevKey=certImpl.getPublicKey();      }    } else     if (!certAKID.equals(crlAKID)) {      if (issues(certImpl,crlImpl,provider)) {        prevKey=certImpl.getPublicKey();      } else {        indirectCRL=true;      }    }  }  if (!indirectCRL && !signFlag) {    return false;  }  if (idpExt != null) {    DistributionPointName idpPoint=(DistributionPointName)idpExt.get(IssuingDistributionPointExtension.POINT);    if (idpPoint != null) {      GeneralNames idpNames=idpPoint.getFullName();      if (idpNames == null) {        RDN relativeName=idpPoint.getRelativeName();        if (relativeName == null) {          if (debug != null) {            debug.println("IDP must be relative or full DN");          }          return false;        }        if (debug != null) {          debug.println("IDP relativeName:" + relativeName);        }        idpNames=getFullNames(crlIssuer,relativeName);      }      if (point.getFullName() != null || point.getRelativeName() != null) {        GeneralNames pointNames=point.getFullName();        if (pointNames == null) {          RDN relativeName=point.getRelativeName();          if (relativeName == null) {            if (debug != null) {              debug.println("DP must be relative or full DN");            }            return false;          }          if (debug != null) {            debug.println("DP relativeName:" + relativeName);          }          if (indirectCRL) {            if (pointCrlIssuers.size() != 1) {              if (debug != null) {                debug.println("must only be one CRL " + "issuer when relative name present");              }              return false;            }            pointNames=getFullNames(pointCrlIssuer,relativeName);          } else {            pointNames=getFullNames(certIssuer,relativeName);          }        }        boolean match=false;        for (Iterator<GeneralName> i=idpNames.iterator(); !match && i.hasNext(); ) {          GeneralNameInterface idpName=i.next().getName();          if (debug != null) {            debug.println("idpName: " + idpName);          }          for (Iterator<GeneralName> p=pointNames.iterator(); !match && p.hasNext(); ) {            GeneralNameInterface pointName=p.next().getName();            if (debug != null) {              debug.println("pointName: " + pointName);            }            match=idpName.equals(pointName);          }        }        if (!match) {          if (debug != null) {            debug.println("IDP name does not match DP name");          }          return false;        }      } else {        boolean match=false;        for (Iterator<GeneralName> t=pointCrlIssuers.iterator(); !match && t.hasNext(); ) {          GeneralNameInterface crlIssuerName=t.next().getName();          for (Iterator<GeneralName> i=idpNames.iterator(); !match && i.hasNext(); ) {            GeneralNameInterface idpName=i.next().getName();            match=crlIssuerName.equals(idpName);          }        }        if (!match) {          return false;        }      }    }    Boolean b=(Boolean)idpExt.get(IssuingDistributionPointExtension.ONLY_USER_CERTS);    if (b.equals(Boolean.TRUE) && certImpl.getBasicConstraints() != -1) {      if (debug != null) {        debug.println("cert must be a EE cert");      }      return false;    }    b=(Boolean)idpExt.get(IssuingDistributionPointExtension.ONLY_CA_CERTS);    if (b.equals(Boolean.TRUE) && certImpl.getBasicConstraints() == -1) {      if (debug != null) {        debug.println("cert must be a CA cert");      }      return false;    }    b=(Boolean)idpExt.get(IssuingDistributionPointExtension.ONLY_ATTRIBUTE_CERTS);    if (b.equals(Boolean.TRUE)) {      if (debug != null) {        debug.println("cert must not be an AA cert");      }      return false;    }  }  boolean[] interimReasonsMask=new boolean[9];  ReasonFlags reasons=null;  if (idpExt != null) {    reasons=(ReasonFlags)idpExt.get(IssuingDistributionPointExtension.REASONS);  }  boolean[] pointReasonFlags=point.getReasonFlags();  if (reasons != null) {    if (pointReasonFlags != null) {      boolean[] idpReasonFlags=reasons.getFlags();      for (int i=0; i < interimReasonsMask.length; i++) {        interimReasonsMask[i]=(i < idpReasonFlags.length && idpReasonFlags[i]) && (i < pointReasonFlags.length && pointReasonFlags[i]);      }    } else {      interimReasonsMask=reasons.getFlags().clone();    }  } else   if (idpExt == null || reasons == null) {    if (pointReasonFlags != null) {      interimReasonsMask=pointReasonFlags.clone();    } else {      Arrays.fill(interimReasonsMask,true);    }  }  boolean oneOrMore=false;  for (int i=0; i < interimReasonsMask.length && !oneOrMore; i++) {    if (interimReasonsMask[i] && !(i < reasonsMask.length && reasonsMask[i])) {      oneOrMore=true;    }  }  if (!oneOrMore) {    return false;  }  if (indirectCRL) {    X509CertSelector certSel=new X509CertSelector();    certSel.setSubject(crlIssuer.asX500Principal());    boolean[] crlSign={false,false,false,false,false,false,true};    certSel.setKeyUsage(crlSign);    AuthorityKeyIdentifierExtension akidext=crlImpl.getAuthKeyIdExtension();    if (akidext != null) {      byte[] kid=akidext.getEncodedKeyIdentifier();      if (kid != null) {        certSel.setSubjectKeyIdentifier(kid);      }      SerialNumber asn=(SerialNumber)akidext.get(AuthorityKeyIdentifierExtension.SERIAL_NUMBER);      if (asn != null) {        certSel.setSerialNumber(asn.getNumber());      }    }    Set<TrustAnchor> newTrustAnchors=new HashSet<>(trustAnchors);    if (prevKey != null) {      TrustAnchor temporary;      if (prevCert != null) {        temporary=new TrustAnchor(prevCert,null);      } else {        X500Principal principal=certImpl.getIssuerX500Principal();        temporary=new TrustAnchor(principal,prevKey,null);      }      newTrustAnchors.add(temporary);    }    PKIXBuilderParameters params=null;    try {      params=new PKIXBuilderParameters(newTrustAnchors,certSel);    } catch (    InvalidAlgorithmParameterException iape) {      throw new CRLException(iape);    }    params.setCertStores(certStores);    params.setSigProvider(provider);    params.setDate(validity);    try {      CertPathBuilder builder=CertPathBuilder.getInstance("PKIX");      PKIXCertPathBuilderResult result=(PKIXCertPathBuilderResult)builder.build(params);      prevKey=result.getPublicKey();    } catch (    GeneralSecurityException e) {      throw new CRLException(e);    }  }  try {    AlgorithmChecker.check(prevKey,crl);  } catch (  CertPathValidatorException cpve) {    if (debug != null) {      debug.println("CRL signature algorithm check failed: " + cpve);    }    return false;  }  try {    crl.verify(prevKey,provider);  } catch (  GeneralSecurityException e) {    if (debug != null) {      debug.println("CRL signature failed to verify");    }    return false;  }  Set<String> unresCritExts=crl.getCriticalExtensionOIDs();  if (unresCritExts != null) {    unresCritExts.remove(IssuingDistributionPoint_Id.toString());    if (!unresCritExts.isEmpty()) {      if (debug != null) {        debug.println("Unrecognized critical extension(s) in CRL: " + unresCritExts);        for (        String ext : unresCritExts) {          debug.println(ext);        }      }      return false;    }  }  for (int i=0; i < reasonsMask.length; i++) {    reasonsMask[i]=reasonsMask[i] || (i < interimReasonsMask.length && interimReasonsMask[i]);  }  return true;}  }
class C{  public CLImage2D createImage2D(CLMem.Usage usage,CLImageFormat format,long width,long height,long rowPitch){  return createImage2D(usage,format,width,height,rowPitch,null,false);}  }
class C{  public int atPosition(long pos) throws IgniteCheckedException {  assert first != null;  if (first.contains(pos)) {    byte[] bytes=first.readFut.get();    return bytes[((int)(pos - first.pos))] & 0xFF;  } else {    assert second != null;    assert second.contains(pos);    byte[] bytes=second.readFut.get();    return bytes[((int)(pos - second.pos))] & 0xFF;  }}  }
class C{  private void flush(){  if (ivs != null) {    cache.invalidate(ivs);    reset();  }}  }
class C{  public PrinterException(String msg){  super(msg);}  }
class C{  private static double metersToDegreesLongitude(double distance,double lat){  return distance / APPROXIMATE_METERS_PER_DEGREE_AT_EQUATOR / Math.cos(Math.toRadians(lat));}  }
class C{  public Set<A> minus(A a){  if (isEmpty()) {    return this;  }  int ahc=a.hashCode();switch (Ordering.compare(ahc,hc)) {case EQ:    List<A> newBucket=bucket.minus(a);  if (!newBucket.isEmpty()) {    return withBucket(newBucket);  } else   if (left.isEmpty()) {    return right;  } else   if (right.isEmpty()) {    return left;  } else {    T2<Set<A>,Set<A>> pair=right.removeMin();    return new Set<>(pair._1().hc,pair._1().bucket,left,pair._2());  }case LT:return withLeft(left.minus(a));case GT:return withRight(right.minus(a));default :throw new AssertionError();}}  }
class C{  @Override public void mouseDragged(MouseEvent e){  if (this.popup != null && this.popup.isShowing()) {    return;  }  if (this.panLast != null) {    double dx=e.getX() - this.panLast.getX();    double dy=e.getY() - this.panLast.getY();    if (dx == 0.0 && dy == 0.0) {      return;    }    double wPercent=-dx / this.panW;    double hPercent=dy / this.panH;    boolean old=this.chart.getPlot().isNotify();    this.chart.getPlot().setNotify(false);    Pannable p=(Pannable)this.chart.getPlot();    if (p.getOrientation() == PlotOrientation.VERTICAL) {      p.panDomainAxes(wPercent,this.info.getPlotInfo(),this.panLast);      p.panRangeAxes(hPercent,this.info.getPlotInfo(),this.panLast);    } else {      p.panDomainAxes(hPercent,this.info.getPlotInfo(),this.panLast);      p.panRangeAxes(wPercent,this.info.getPlotInfo(),this.panLast);    }    this.panLast=e.getPoint();    this.chart.getPlot().setNotify(old);    return;  }  if (this.zoomPoint == null) {    return;  }  Graphics2D g2=(Graphics2D)getGraphics();  if (!this.useBuffer) {    drawZoomRectangle(g2,true);  }  boolean hZoom, vZoom;  if (this.orientation == PlotOrientation.HORIZONTAL) {    hZoom=this.rangeZoomable;    vZoom=this.domainZoomable;  } else {    hZoom=this.domainZoomable;    vZoom=this.rangeZoomable;  }  Rectangle2D scaledDataArea=getScreenDataArea((int)this.zoomPoint.getX(),(int)this.zoomPoint.getY());  if (hZoom && vZoom) {    double xmax=Math.min(e.getX(),scaledDataArea.getMaxX());    double ymax=Math.min(e.getY(),scaledDataArea.getMaxY());    this.zoomRectangle=new Rectangle2D.Double(this.zoomPoint.getX(),this.zoomPoint.getY(),xmax - this.zoomPoint.getX(),ymax - this.zoomPoint.getY());  } else   if (hZoom) {    double xmax=Math.min(e.getX(),scaledDataArea.getMaxX());    this.zoomRectangle=new Rectangle2D.Double(this.zoomPoint.getX(),scaledDataArea.getMinY(),xmax - this.zoomPoint.getX(),scaledDataArea.getHeight());  } else   if (vZoom) {    double ymax=Math.min(e.getY(),scaledDataArea.getMaxY());    this.zoomRectangle=new Rectangle2D.Double(scaledDataArea.getMinX(),this.zoomPoint.getY(),scaledDataArea.getWidth(),ymax - this.zoomPoint.getY());  }  if (this.useBuffer) {    repaint();  } else {    drawZoomRectangle(g2,true);  }  g2.dispose();}  }
class C{  public void testDetectLanguageRu(){  LOGGER.debug("detectLanguage ru");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "timeliner.ru_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("ru",instance.detectLanguage(doc.text()).getDetectedLanguage());    LOGGER.debug("detection ended");    doc=Jsoup.parse(new File(PATH + "atrainings.ru_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("ru",instance.detectLanguage(doc.text()).getDetectedLanguage());    LOGGER.debug("detection ended");    doc=Jsoup.parse(new File(PATH + "alpidos.ru-home_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("ru",instance.detectLanguage(doc.text()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  static DecoratorColor decoratorColor(ControlGroup controlGroup){  ControlGroup hydratedControlGroup=(ControlGroup)Retriever.checkRetrieveElement(controlGroup);  int averageMaturity=getAverageMaturity(hydratedControlGroup);  int averageTargetMaturity=getAverageTargetMaturity(hydratedControlGroup);  if (averageTargetMaturity < TargetMaturity.MIN.value()) {    return DecoratorColor.NULL;  }  return computeDecoratorColor(averageMaturity,averageTargetMaturity);}  }
class C{  @Override public void paint(Graphics g){  super.paint(g);  FileTextArea textArea=fileWindow.textArea;  Font font=textArea.getFont();  g.setFont(font);  FontMetrics metrics=getFontMetrics(font);  Rectangle clip=g.getClipBounds();  g.setColor(getBackground());  g.fillRect(clip.x,clip.y,clip.width,clip.height);  int ascent=metrics.getMaxAscent();  int h=metrics.getHeight();  int lineCount=textArea.getLineCount() + 1;  String dummy=Integer.toString(lineCount);  if (dummy.length() < 2) {    dummy="99";  }  int startLine=clip.y / h;  int endLine=(clip.y + clip.height) / h + 1;  int width=getWidth();  if (endLine > lineCount)   endLine=lineCount;  for (int i=startLine; i < endLine; i++) {    String text;    int pos=-2;    try {      pos=textArea.getLineStartOffset(i);    } catch (    BadLocationException ignored) {    }    boolean isBreakPoint=fileWindow.isBreakPoint(i + 1);    text=Integer.toString(i + 1) + " ";    int y=i * h;    g.setColor(Color.blue);    g.drawString(text,0,y + ascent);    int x=width - ascent;    if (isBreakPoint) {      g.setColor(new Color(0x80,0x00,0x00));      int dy=y + ascent - 9;      g.fillOval(x,dy,9,9);      g.drawOval(x,dy,8,8);      g.drawOval(x,dy,9,9);    }    if (pos == fileWindow.currentPos) {      Polygon arrow=new Polygon();      int dx=x;      y+=ascent - 10;      int dy=y;      arrow.addPoint(dx,dy + 3);      arrow.addPoint(dx + 5,dy + 3);      for (x=dx + 5; x <= dx + 10; x++, y++) {        arrow.addPoint(x,y);      }      for (x=dx + 9; x >= dx + 5; x--, y++) {        arrow.addPoint(x,y);      }      arrow.addPoint(dx + 5,dy + 7);      arrow.addPoint(dx,dy + 7);      g.setColor(Color.yellow);      g.fillPolygon(arrow);      g.setColor(Color.black);      g.drawPolygon(arrow);    }  }}  }
class C{  protected void installDefaults(){  dateRenderer=installRendererIfPossible(Date.class,null);  numberRenderer=installRendererIfPossible(Number.class,null);  doubleRender=installRendererIfPossible(Double.class,null);  floatRenderer=installRendererIfPossible(Float.class,null);  iconRenderer=installRendererIfPossible(Icon.class,null);  imageIconRenderer=installRendererIfPossible(ImageIcon.class,null);  booleanRenderer=installRendererIfPossible(Boolean.class,new SeaGlassBooleanTableCellRenderer());  objectRenderer=installRendererIfPossible(Object.class,new SeaGlassTableCellRenderer());  updateStyle(table);}  }
class C{  public void endVisit(QualifiedName node){}  }
class C{  public synchronized void listGotten(PrintWriter p){  Vector vec=new Vector();  Enumeration e=gotten.keys();  while (e.hasMoreElements())   vec.addElement(e.nextElement());  Object[] array=new Object[vec.size()];  vec.copyInto(array);  java.util.Collections.sort(vec);  for (int x=0; x < array.length; x++) {    String s=(String)(array[x]);    String v=null;    if (s != null) {      v=(String)(_get(s));      uncheck();    }    if (v == null)     v=UNKNOWN_VALUE;    p.println(s + " = " + v);  }  p.flush();}  }
class C{  public static void insertInstructionsAfter(Instruction after,BasicBlock temp){  if (temp.isEmpty())   return;  Instruction after_after=after.getNext();  after.linkWithNext(temp.firstRealInstruction());  if (after_after == null) {    temp.lastRealInstruction().setNext(null);  } else {    temp.lastRealInstruction().linkWithNext(after_after);  }}  }
class C{  public final void addInstWithUnknown(Instances source,int attIndex) throws Exception {  double[] probs;  double weight, newWeight;  int classIndex;  Instance instance;  int j;  probs=new double[m_perBag.length];  for (j=0; j < m_perBag.length; j++) {    if (Utils.eq(totaL,0)) {      probs[j]=1.0 / probs.length;    } else {      probs[j]=m_perBag[j] / totaL;    }  }  Enumeration<Instance> enu=source.enumerateInstances();  while (enu.hasMoreElements()) {    instance=enu.nextElement();    if (instance.isMissing(attIndex)) {      classIndex=(int)instance.classValue();      weight=instance.weight();      m_perClass[classIndex]=m_perClass[classIndex] + weight;      totaL=totaL + weight;      for (j=0; j < m_perBag.length; j++) {        newWeight=probs[j] * weight;        m_perClassPerBag[j][classIndex]=m_perClassPerBag[j][classIndex] + newWeight;        m_perBag[j]=m_perBag[j] + newWeight;      }    }  }}  }
class C{  public VNXeNfsShare findNfsShare(String fsId,String shareName){  _logger.info("finding nfsShare id for file system id: {}, and nameKey: {} ",fsId,shareName);  NfsShareRequests req=new NfsShareRequests(_khClient);  VNXeNfsShare share=req.findNfsShare(fsId,shareName,getBasicSystemInfo().getSoftwareVersion());  return share;}  }
class C{  public void respawn(){  setHealth(getMaxHealth());  setFoodLevel(20);  boolean spawnAtBed=true;  Location dest=getBedSpawnLocation();  if (dest == null) {    dest=world.getSpawnLocation();    spawnAtBed=false;    if (bedSpawn != null) {      setBedSpawnLocation(null);      sendMessage("Your home bed was missing or obstructed");    }  }  PlayerRespawnEvent event=new PlayerRespawnEvent(this,dest,spawnAtBed);  EventFactory.callEvent(event);  if (event.getRespawnLocation().getWorld().equals(getWorld()) && !knownEntities.isEmpty()) {    List<Integer> entityIds=new ArrayList<>(knownEntities.size());    entityIds.addAll(knownEntities.stream().map(null).collect(Collectors.toList()));    session.send(new DestroyEntitiesMessage(entityIds));    knownEntities.clear();  }  active=true;  deathTicks=0;  spawnAt(event.getRespawnLocation());  updateInventory();}  }
class C{  public OpenIDToken(Message openidMessage){  setOpenIDMessage(openidMessage);  if (DEBUG)   _log.debug("Created " + _tokenType + " token");}  }
class C{  private void initH2Console(ServletContext servletContext){  log.debug("Initialize H2 console");  ServletRegistration.Dynamic h2ConsoleServlet=servletContext.addServlet("H2Console",new org.h2.server.web.WebServlet());  h2ConsoleServlet.addMapping("/h2-console/*");  h2ConsoleServlet.setInitParameter("-properties","src/main/resources");  h2ConsoleServlet.setLoadOnStartup(1);}  }
class C{  public static LocatorState fromJson(final String json){  try {    final GfJsonObject gfJsonObject=new GfJsonObject(json);    final Status status=Status.valueOfDescription(gfJsonObject.getString(JSON_STATUS));    final List<String> jvmArguments=Arrays.asList(GfJsonArray.toStringArray(gfJsonObject.getJSONArray(JSON_JVMARGUMENTS)));    return new LocatorState(status,gfJsonObject.getString(JSON_STATUSMESSAGE),gfJsonObject.getLong(JSON_TIMESTAMP),gfJsonObject.getString(JSON_LOCATION),gfJsonObject.getInt(JSON_PID),gfJsonObject.getLong(JSON_UPTIME),gfJsonObject.getString(JSON_WORKINGDIRECTORY),jvmArguments,gfJsonObject.getString(JSON_CLASSPATH),gfJsonObject.getString(JSON_GEMFIREVERSION),gfJsonObject.getString(JSON_JAVAVERSION),gfJsonObject.getString(JSON_LOGFILE),gfJsonObject.getString(JSON_HOST),gfJsonObject.getString(JSON_PORT),gfJsonObject.getString(JSON_MEMBERNAME));  } catch (  GfJsonException e) {    throw new IllegalArgumentException("Unable to create LocatorStatus from JSON: ".concat(json),e);  }}  }
class C{  @Override protected void sendFunctionGroup3(){  XNetMessage msg=XNetMessage.getFunctionGroup3OpsMsg(this.getDccAddress(),f9,f10,f11,f12);  queueMessage(msg,THROTTLEFUNCSENT);}  }
class C{  private List<ClassSymbol> enterClassFiles(Map<String,JavaFileObject> classFiles){  ClassReader reader=ClassReader.instance(context);  Names names=Names.instance(context);  List<ClassSymbol> list=List.nil();  for (  Map.Entry<String,JavaFileObject> entry : classFiles.entrySet()) {    Name name=names.fromString(entry.getKey());    JavaFileObject file=entry.getValue();    if (file.getKind() != JavaFileObject.Kind.CLASS)     throw new AssertionError(file);    ClassSymbol cs;    if (isPkgInfo(file,JavaFileObject.Kind.CLASS)) {      Name packageName=Convert.packagePart(name);      PackageSymbol p=reader.enterPackage(packageName);      if (p.package_info == null)       p.package_info=reader.enterClass(Convert.shortName(name),p);      cs=p.package_info;      if (cs.classfile == null)       cs.classfile=file;    } else     cs=reader.enterClass(name,file);    list=list.prepend(cs);  }  return list.reverse();}  }
class C{  public GalicianStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public synchronized void removeNotification(Integer id) throws InstanceNotFoundException {  if (timerTable.containsKey(id) == false) {    throw new InstanceNotFoundException("Timer notification to remove not in the list of notifications");  }  Object[] obj=timerTable.get(id);  TimerAlarmClock alarmClock=(TimerAlarmClock)obj[ALARM_CLOCK_INDEX];  if (alarmClock != null) {    alarmClock.cancel();  }  if (TIMER_LOGGER.isLoggable(Level.FINER)) {    StringBuilder strb=new StringBuilder().append("removing timer notification:").append("\n\tNotification source = ").append(((TimerNotification)obj[TIMER_NOTIF_INDEX]).getSource()).append("\n\tNotification type = ").append(((TimerNotification)obj[TIMER_NOTIF_INDEX]).getType()).append("\n\tNotification ID = ").append(((TimerNotification)obj[TIMER_NOTIF_INDEX]).getNotificationID()).append("\n\tNotification date = ").append(obj[TIMER_DATE_INDEX]).append("\n\tNotification period = ").append(obj[TIMER_PERIOD_INDEX]).append("\n\tNotification nb of occurrences = ").append(obj[TIMER_NB_OCCUR_INDEX]).append("\n\tNotification executes at fixed rate = ").append(obj[FIXED_RATE_INDEX]);    TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"removeNotification",strb.toString());  }  timerTable.remove(id);  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"removeNotification","timer notification removed");}  }
class C{  private void internSchema(boolean DCW){  boolean addSlash=true;  if (tablepath.endsWith("/") || tablepath.endsWith(File.separator)) {    addSlash=false;  }  try {    String filename=tablepath + (addSlash ? "/" : "") + "fcs";    if (!BinaryFile.exists(filename)) {      filename+=".";      appendDot=true;    }    DcwRecordFile fcs=new DcwRecordFile(filename);    int[] fcscols=fcs.lookupSchema(DCW ? fcsColumnsDCW : fcsColumns,true);    for (List<Object> fcsrec=new ArrayList<Object>(fcs.getColumnCount()); fcs.parseRow(fcsrec); ) {      String feature_class=(String)fcsrec.get(fcscols[0]);      String table1=(String)fcsrec.get(fcscols[1]);      String foreign_key=(String)fcsrec.get(fcscols[2]);      String table2=(String)fcsrec.get(fcscols[3]);      String primary_key=(String)fcsrec.get(fcscols[4]);      internSchema(feature_class.toLowerCase(),table1.toLowerCase(),foreign_key.toLowerCase(),table2.toLowerCase(),primary_key.toLowerCase());    }    fcs.close();  } catch (  FormatException f) {    if (!DCW) {      internSchema(true);    } else {      System.out.println("CoverageTable: " + f.getMessage());    }  }}  }
class C{  public T caseAnonymous_invariant_1_(Anonymous_invariant_1_ object){  return null;}  }
class C{  private void clickRow(ActivityController<? extends CourseOutlineActivity> controller,CourseOutlineFragment courseOutlineFragment,int rowIndex){  controller.resume().postResume().visible();  View fragmentView=courseOutlineFragment.getView();  assertNotNull(fragmentView);  View outlineList=fragmentView.findViewById(R.id.outline_list);  assertNotNull(outlineList);  assertThat(outlineList).isInstanceOf(ListView.class);  ListView listView=(ListView)outlineList;  listView.performItemClick(listView.getChildAt(rowIndex),rowIndex,listView.getItemIdAtPosition(rowIndex));}  }
class C{  @RequestMapping(value=USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + "/userIds/{userId}/namespaces/{namespace}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_PUT) public UserNamespaceAuthorization updateUserNamespaceAuthorization(@PathVariable("userId") String userId,@PathVariable("namespace") String namespace,@RequestBody UserNamespaceAuthorizationUpdateRequest request){  return userNamespaceAuthorizationService.updateUserNamespaceAuthorization(new UserNamespaceAuthorizationKey(userId,namespace),request);}  }
class C{  public static boolean isXML11NCNameStart(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NCNAME_START) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  private void drawTicks(Canvas canvas,double min,double max,double minAngle,double maxAngle,int centerX,int centerY,double longRadius,double shortRadius,double ticks,Paint paint,boolean labels){  for (double i=min; i <= max; i+=ticks) {    double angle=getAngleForValue(i,minAngle,maxAngle,min,max);    double sinValue=Math.sin(angle);    double cosValue=Math.cos(angle);    int x1=Math.round(centerX + (float)(shortRadius * sinValue));    int y1=Math.round(centerY + (float)(shortRadius * cosValue));    int x2=Math.round(centerX + (float)(longRadius * sinValue));    int y2=Math.round(centerY + (float)(longRadius * cosValue));    canvas.drawLine(x1,y1,x2,y2,paint);    if (labels) {      paint.setTextAlign(Component.LEFT);      if (x1 <= x2) {        paint.setTextAlign(Component.RIGHT);      }      String text=i + "";      if (Math.round(i) == (long)i) {        text=(long)i + "";      }      canvas.drawText(text,x1,y1,paint);    }  }}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitParameter(name,access);}  }
class C{  @Override public String scrollToPositionAtProgress(float touchFraction){  int rowCount=mApps.getNumAppRows();  if (rowCount == 0) {    return "";  }  stopScroll();  List<AlphabeticalAppsList.FastScrollSectionInfo> fastScrollSections=mApps.getFastScrollerSections();  AlphabeticalAppsList.FastScrollSectionInfo lastInfo=fastScrollSections.get(0);  for (int i=1; i < fastScrollSections.size(); i++) {    AlphabeticalAppsList.FastScrollSectionInfo info=fastScrollSections.get(i);    if (info.touchFraction > touchFraction) {      break;    }    lastInfo=info;  }  int scrollY=getScrollTop(mScrollPosState);  int availableScrollHeight=getAvailableScrollHeight(mApps.getNumAppRows());  mFastScrollHelper.smoothScrollToSection(scrollY,availableScrollHeight,lastInfo);  return lastInfo.sectionName;}  }
class C{  public void addBehavior(String behavior){  if (null == this.behaviors) {    this.behaviors=new ArrayList<String>(5);  }  this.behaviors.add(behavior);}  }
class C{  public void testStutteringLogReadback() throws Exception {  File logDir=prepareLogDir("testStutteringLogReadback");  DiskLog log=openLog(logDir,false);  LogConnection conn=log.connect(false);  for (int i=0; i < 100; i++) {    THLEvent e=this.createTHLEvent(i);    conn.store(e,false);    if (i > 0 && i % 10 == 0) {      log.release();      log=openLog(logDir,false);      log.validate();      conn=log.connect(false);    }  }  conn.commit();  conn.release();  assertEquals("Should have stored 100 events",99,log.getMaxSeqno());  log.release();  log=null;  DiskLog log2=openLog(logDir,true);  assertEquals("Should have stored 100 events",99,log2.getMaxSeqno());  LogConnection conn2=log2.connect(true);  assertTrue("Seeking first event",conn2.seek(0));  for (int i=0; i < 100; i++) {    THLEvent e=conn2.next();    assertNotNull("Returned event must not be null! i=" + i,e);    assertEquals("Test expected seqno",i,e.getSeqno());    assertEquals("Test expected fragno",(short)0,e.getFragno());    assertEquals("Test expected eventId",new Long(i).toString(),e.getEventId());    if (i > 0 && i % 15 == 0) {      log2.release();      log2=openLog(logDir,true);      conn2=log2.connect(true);      assertTrue("Seeking first event",conn2.seek(i + 1));    }  }  log2.release();}  }
class C{  public Task<R> waitFor(long timeoutMillis) throws ViPRException {  doTaskWait(timeoutMillis);  TaskUtil.checkForError(task);  return this;}  }
class C{  public void segmentOOVs(Grammar[] grammars){  Lattice<Token> oldLattice=this.getLattice();  HashSet<Integer> vocabulary=new HashSet<>();  for (  Grammar grammar : grammars) {    Iterator<Integer> iterator=grammar.getTrieRoot().getTerminalExtensionIterator();    while (iterator.hasNext())     vocabulary.add(iterator.next());  }  List<Node<Token>> oldNodes=oldLattice.getNodes();  for (int nodeid=oldNodes.size() - 3; nodeid >= 1; nodeid-=1) {    if (oldNodes.get(nodeid).getOutgoingArcs().size() == 1) {      Arc<Token> arc=oldNodes.get(nodeid).getOutgoingArcs().get(0);      String word=Vocabulary.word(arc.getLabel().getWord());      if (!vocabulary.contains(arc.getLabel())) {        List<Arc<Token>> savedArcs=oldNodes.get(nodeid).getOutgoingArcs();        char[] chars=word.toCharArray();        ChartSpan<Boolean> wordChart=new ChartSpan<>(chars.length + 1,false);        ArrayList<Node<Token>> nodes=new ArrayList<>(chars.length + 1);        nodes.add(oldNodes.get(nodeid));        for (int i=1; i < chars.length; i++)         nodes.add(new Node<>(i));        nodes.add(oldNodes.get(nodeid + 1));        for (int width=1; width <= chars.length; width++) {          for (int i=0; i <= chars.length - width; i++) {            int j=i + width;            if (width != chars.length) {              Token token=new Token(word.substring(i,j),config);              if (vocabulary.contains(id)) {                nodes.get(i).addArc(nodes.get(j),0.0f,token);                wordChart.set(i,j,true);              }            }            for (int k=i + 1; k < j; k++) {              if (wordChart.get(i,k) && wordChart.get(k,j)) {                wordChart.set(i,j,true);              }            }          }        }        if (wordChart.get(0,chars.length)) {          HashSet<Node<Token>> deletedNodes=new HashSet<>();          for (int k=1; k < nodes.size() - 1; k++)           if (!(wordChart.get(0,k) && wordChart.get(k,chars.length)))           nodes.set(k,null);          int delIndex=1;          while (delIndex < nodes.size())           if (nodes.get(delIndex) == null) {            deletedNodes.add(nodes.get(delIndex));            nodes.remove(delIndex);          } else           delIndex++;          for (          Node<Token> node : nodes) {            int arcno=0;            while (arcno != node.getOutgoingArcs().size()) {              Arc<Token> delArc=node.getOutgoingArcs().get(arcno);              if (deletedNodes.contains(delArc.getHead()))               node.getOutgoingArcs().remove(arcno); else {                arcno++;              }            }          }          this.getLattice().insert(nodeid,nodeid + 1,nodes);        } else {          nodes.get(0).setOutgoingArcs(savedArcs);        }      }    }  }}  }
class C{  @Override public void updateClob(String columnLabel,Reader x) throws SQLException {  updateClob(columnLabel,x,-1);}  }
class C{  public SingleValueDistribution(String variable,Value value){  this.variable=variable;  this.value=value;}  }
class C{  public void testMergeFromDynamic() throws Exception {  TestAllTypes result=TestAllTypes.newBuilder(MERGE_DEST).mergeFrom(DynamicMessage.newBuilder(MERGE_SOURCE).build()).build();  assertEquals(MERGE_RESULT_TEXT,result.toString());}  }
class C{  public static char[] utf2chars(byte[] src,int sindex,int len){  char[] dst=new char[len];  int len1=utf2chars(src,sindex,dst,0,len);  char[] result=new char[len1];  System.arraycopy(dst,0,result,0,len1);  return result;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public FJBatchIterableProcedureTask(FJBatchIterableProcedureRunner<T,PT> newFJTaskRunner,ProcedureFactory<PT> newProcedureFactory,BatchIterable<T> iterable,int index,int count){  this.taskRunner=newFJTaskRunner;  this.procedureFactory=newProcedureFactory;  this.iterable=iterable;  this.sectionIndex=index;  this.sectionCount=count;}  }
class C{  protected boolean isEqualValue(Object value1,Object value2){  return (value1 == value2 || value1.equals(value2));}  }
class C{  public SQLSyntaxErrorException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  @PostConstruct void init(){  super.init(smTableHeader,smTable,softwareModuleDetails);}  }
class C{  public void decodeMissing(byte[][] shards,boolean[] shardPresent,final int offset,final int byteCount){  checkBuffersAndSizes(shards,offset,byteCount);  int numberPresent=0;  for (int i=0; i < totalShardCount; i++) {    if (shardPresent[i]) {      numberPresent+=1;    }  }  if (numberPresent == totalShardCount) {    return;  }  if (numberPresent < dataShardCount) {    throw new IllegalArgumentException("Not enough shards present");  }  Matrix subMatrix=new Matrix(dataShardCount,dataShardCount);  byte[][] subShards=new byte[dataShardCount][];{    int subMatrixRow=0;    for (int matrixRow=0; matrixRow < totalShardCount && subMatrixRow < dataShardCount; matrixRow++) {      if (shardPresent[matrixRow]) {        for (int c=0; c < dataShardCount; c++) {          subMatrix.set(subMatrixRow,c,matrix.get(matrixRow,c));        }        subShards[subMatrixRow]=shards[matrixRow];        subMatrixRow+=1;      }    }  }  Matrix dataDecodeMatrix=subMatrix.invert();  byte[][] outputs=new byte[parityShardCount][];  byte[][] matrixRows=new byte[parityShardCount][];  int outputCount=0;  for (int iShard=0; iShard < dataShardCount; iShard++) {    if (!shardPresent[iShard]) {      outputs[outputCount]=shards[iShard];      matrixRows[outputCount]=dataDecodeMatrix.getRow(iShard);      outputCount+=1;    }  }  codingLoop.codeSomeShards(matrixRows,subShards,dataShardCount,outputs,outputCount,offset,byteCount);  outputCount=0;  for (int iShard=dataShardCount; iShard < totalShardCount; iShard++) {    if (!shardPresent[iShard]) {      outputs[outputCount]=shards[iShard];      matrixRows[outputCount]=parityRows[iShard - dataShardCount];      outputCount+=1;    }  }  codingLoop.codeSomeShards(matrixRows,shards,dataShardCount,outputs,outputCount,offset,byteCount);}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,short[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public static Sha256Hash computeHash(byte[] bytes){  MessageDigest digest=getMessageDigest();  return new Sha256Hash(digest.digest(bytes));}  }
class C{  public AuditEvent convertToAuditEvent(PersistentAuditEvent persistentAuditEvent){  Instant instant=persistentAuditEvent.getAuditEventDate().atZone(ZoneId.systemDefault()).toInstant();  return new AuditEvent(Date.from(instant),persistentAuditEvent.getPrincipal(),persistentAuditEvent.getAuditEventType(),convertDataToObjects(persistentAuditEvent.getData()));}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    iterator.visit(v);    iteratedObject.visit(v);  }}  }
class C{  @SuppressWarnings("unused") public long create_track_header_atom(MP4DataStream bitstream) throws IOException {  create_full_atom(bitstream);  log.trace("Version: {}",version);  if (version == 1) {    creationTime=createDate(bitstream.readBytes(8));    modificationTime=createDate(bitstream.readBytes(8));    trackId=bitstream.readBytes(4);    bitstream.skipBytes(4);    duration=bitstream.readBytes(8);    readed+=32;  } else {    creationTime=createDate(bitstream.readBytes(4));    modificationTime=createDate(bitstream.readBytes(4));    trackId=bitstream.readBytes(4);    bitstream.skipBytes(4);    duration=bitstream.readBytes(4);    readed+=20;  }  bitstream.skipBytes(8);  int qt_layer=(int)bitstream.readBytes(2);  int qt_alternateGroup=(int)bitstream.readBytes(2);  int qt_volume=(int)bitstream.readBytes(2);  log.trace("Volume: {}",qt_volume);  bitstream.skipBytes(2);  long qt_matrixA=bitstream.readBytes(4);  long qt_matrixB=bitstream.readBytes(4);  long qt_matrixU=bitstream.readBytes(4);  long qt_matrixC=bitstream.readBytes(4);  long qt_matrixD=bitstream.readBytes(4);  long qt_matrixV=bitstream.readBytes(4);  long qt_matrixX=bitstream.readBytes(4);  long qt_matrixY=bitstream.readBytes(4);  long qt_matrixW=bitstream.readBytes(4);  qt_trackWidth=(int)bitstream.readBytes(4);  width=(qt_trackWidth >> 16);  qt_trackHeight=(int)bitstream.readBytes(4);  height=(qt_trackHeight >> 16);  readed+=60;  return readed;}  }
class C{  public void endSymbolicInterval(Register r,Instruction end){  if (DEBUG) {    System.out.println("endSymbolicInterval " + r + " "+ regAllocState.getDFN(end));  }  SymbolicInterval i=(SymbolicInterval)pending.get(r);  i.end=end;  pending.remove(r);}  }
class C{  public ObjectReference prepareObjectReference(Offset offset){  return null;}  }
class C{  public int put(long key,int value){  int previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  public static boolean updateDriveFile(Drive drive,File driveFile,Context context,MyTracksProviderUtils myTracksProviderUtils,Track track,boolean canRetry) throws IOException {  Log.d(TAG,"Update drive file for track " + track.getName());  java.io.File file=null;  try {    file=SyncUtils.getTempFile(context,myTracksProviderUtils,track,true);    if (file == null) {      Log.e(TAG,"Unable to update drive file. File is null for track " + track.getName());      return false;    }    String title=track.getName() + "." + KmzTrackExporter.KMZ_EXTENSION;    File updatedFile=updateDriveFile(drive,driveFile,title,file,canRetry);    if (updatedFile == null) {      Log.e(TAG,"Unable to update drive file. Updated file is null for track " + track.getName());      return false;    }    long modifiedTime=updatedFile.getModifiedDate().getValue();    if (track.getModifiedTime() != modifiedTime) {      track.setModifiedTime(modifiedTime);      myTracksProviderUtils.updateTrack(track);    }    return true;  }  finally {    if (file != null) {      file.delete();    }  }}  }
class C{  private void QuickSort2(Vector v,int lo0,int hi0){  int lo=lo0;  int hi=hi0;  if (hi0 > lo0) {    ElemTemplateElement midNode=(ElemTemplateElement)v.elementAt((lo0 + hi0) / 2);    while (lo <= hi) {      while ((lo < hi0) && (((ElemTemplateElement)v.elementAt(lo)).compareTo(midNode) < 0)) {        ++lo;      }      while ((hi > lo0) && (((ElemTemplateElement)v.elementAt(hi)).compareTo(midNode) > 0)) {        --hi;      }      if (lo <= hi) {        ElemTemplateElement node=(ElemTemplateElement)v.elementAt(lo);        v.setElementAt(v.elementAt(hi),lo);        v.setElementAt(node,hi);        ++lo;        --hi;      }    }    if (lo0 < hi) {      QuickSort2(v,lo0,hi);    }    if (lo < hi0) {      QuickSort2(v,lo,hi0);    }  }}  }
class C{  private void testSubmitCommand(int nodes) throws Throwable {  createServers(nodes);  CopycatClient client=createClient();  client.submit(new TestCommand()).thenAccept(null);  await(30000);}  }
class C{  public void update(int timeout) throws IOException {  updateThread=Thread.currentThread();synchronized (updateLock) {  }  long startTime=System.currentTimeMillis();  int select=0;  if (timeout > 0) {    select=selector.select(timeout);  } else {    select=selector.selectNow();  }  if (select == 0) {    emptySelects++;    if (emptySelects == 100) {      emptySelects=0;      long elapsedTime=System.currentTimeMillis() - startTime;      try {        if (elapsedTime < 25)         Thread.sleep(25 - elapsedTime);      } catch (      InterruptedException ex) {      }    }  } else {    emptySelects=0;    Set<SelectionKey> keys=selector.selectedKeys();synchronized (keys) {      UdpConnection udp=this.udp;      outer:       for (Iterator<SelectionKey> iter=keys.iterator(); iter.hasNext(); ) {        SelectionKey selectionKey=iter.next();        iter.remove();        Connection fromConnection=(Connection)selectionKey.attachment();        try {          int ops=selectionKey.readyOps();          if (fromConnection != null) {            if (udp != null && fromConnection.udpRemoteAddress == null) {              fromConnection.close();              continue;            }            if ((ops & SelectionKey.OP_READ) == SelectionKey.OP_READ) {              try {                while (true) {                  Object object=fromConnection.tcp.readObject(fromConnection);                  if (object == null)                   break;                  if (DEBUG) {                    String objectString=object == null ? "null" : object.getClass().getSimpleName();                    if (!(object instanceof FrameworkMessage)) {                      debug("kryonet",fromConnection + " received TCP: " + objectString);                    } else                     if (TRACE) {                      trace("kryonet",fromConnection + " received TCP: " + objectString);                    }                  }                  fromConnection.notifyReceived(object);                }              } catch (              IOException ex) {                if (TRACE) {                  trace("kryonet","Unable to read TCP from: " + fromConnection,ex);                } else                 if (DEBUG) {                  debug("kryonet",fromConnection + " update: " + ex.getMessage());                }                fromConnection.close();              }catch (              KryoNetException ex) {                if (ERROR)                 error("kryonet","Error reading TCP from connection: " + fromConnection,ex);                fromConnection.close();              }            }            if ((ops & SelectionKey.OP_WRITE) == SelectionKey.OP_WRITE) {              try {                fromConnection.tcp.writeOperation();              } catch (              IOException ex) {                if (TRACE) {                  trace("kryonet","Unable to write TCP to connection: " + fromConnection,ex);                } else                 if (DEBUG) {                  debug("kryonet",fromConnection + " update: " + ex.getMessage());                }                fromConnection.close();              }            }            continue;          }          if ((ops & SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT) {            ServerSocketChannel serverChannel=this.serverChannel;            if (serverChannel == null)             continue;            try {              SocketChannel socketChannel=serverChannel.accept();              if (socketChannel != null)               acceptOperation(socketChannel);            } catch (            IOException ex) {              if (DEBUG)               debug("kryonet","Unable to accept new connection.",ex);            }            continue;          }          if (udp == null) {            selectionKey.channel().close();            continue;          }          InetSocketAddress fromAddress;          try {            fromAddress=udp.readFromAddress();          } catch (          IOException ex) {            if (WARN)             warn("kryonet","Error reading UDP data.",ex);            continue;          }          if (fromAddress == null)           continue;          Connection[] connections=this.connections;          for (int i=0, n=connections.length; i < n; i++) {            Connection connection=connections[i];            if (fromAddress.equals(connection.udpRemoteAddress)) {              fromConnection=connection;              break;            }          }          Object object;          try {            object=udp.readObject(fromConnection);          } catch (          KryoNetException ex) {            if (WARN) {              if (fromConnection != null) {                if (ERROR)                 error("kryonet","Error reading UDP from connection: " + fromConnection,ex);              } else               warn("kryonet","Error reading UDP from unregistered address: " + fromAddress,ex);            }            continue;          }          if (object instanceof FrameworkMessage) {            if (object instanceof RegisterUDP) {              int fromConnectionID=((RegisterUDP)object).connectionID;              Connection connection=pendingConnections.remove(fromConnectionID);              if (connection != null) {                if (connection.udpRemoteAddress != null)                 continue outer;                connection.udpRemoteAddress=fromAddress;                addConnection(connection);                connection.sendTCP(new RegisterUDP());                if (DEBUG)                 debug("kryonet","Port " + udp.datagramChannel.socket().getLocalPort() + "/UDP connected to: "+ fromAddress);                connection.notifyConnected();                continue;              }              if (DEBUG)               debug("kryonet","Ignoring incoming RegisterUDP with invalid connection ID: " + fromConnectionID);              continue;            }            if (object instanceof DiscoverHost) {              try {                udp.datagramChannel.send(emptyBuffer,fromAddress);                if (DEBUG)                 debug("kryonet","Responded to host discovery from: " + fromAddress);              } catch (              IOException ex) {                if (WARN)                 warn("kryonet","Error replying to host discovery from: " + fromAddress,ex);              }              continue;            }          }          if (fromConnection != null) {            if (DEBUG) {              String objectString=object == null ? "null" : object.getClass().getSimpleName();              if (object instanceof FrameworkMessage) {                if (TRACE)                 trace("kryonet",fromConnection + " received UDP: " + objectString);              } else               debug("kryonet",fromConnection + " received UDP: " + objectString);            }            fromConnection.notifyReceived(object);            continue;          }          if (DEBUG)           debug("kryonet","Ignoring UDP from unregistered address: " + fromAddress);        } catch (        CancelledKeyException ex) {          if (fromConnection != null)           fromConnection.close(); else           selectionKey.channel().close();        }      }    }  }  long time=System.currentTimeMillis();  Connection[] connections=this.connections;  for (int i=0, n=connections.length; i < n; i++) {    Connection connection=connections[i];    if (connection.tcp.isTimedOut(time)) {      if (DEBUG)       debug("kryonet",connection + " timed out.");      connection.close();    } else {      if (connection.tcp.needsKeepAlive(time))       connection.sendTCP(FrameworkMessage.keepAlive);    }    if (connection.isIdle())     connection.notifyIdle();  }}  }
class C{  private Plugin probeNextPlugin(){  Plugin plugin=null;  int i=0;  while (i < listPending.size()) {    plugin=listPending.get(i);    if (isAllDependencyCompleted(plugin)) {      return plugin;    }    i++;  }  return null;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private void createOutput(String outFileName){  try {    this.out=new PrintWriter(new FileWriter(outFileName));  } catch (  IOException e) {    throw new SimError("Couldn't open file '" + outFileName + "' for report output\n"+ e.getMessage(),e);  }}  }
class C{  private static void addToParentGroup(final ConfiguredConnectionGroupDetails groupDetails,final ConfiguredConnectionGroupDetails parent){  groupDetails.setGroup(new ConnectionGroupReference(parent));  parent.getSubgroups().add(new ConnectionGroupReference(groupDetails));}  }
class C{  protected void buildProfiles(){  mCurrentProfileView.setVisibility(View.INVISIBLE);  mAccountHeaderTextSection.setVisibility(View.INVISIBLE);  mAccountSwitcherArrow.setVisibility(View.GONE);  mProfileFirstView.setVisibility(View.GONE);  mProfileFirstView.setOnClickListener(null);  mProfileSecondView.setVisibility(View.GONE);  mProfileSecondView.setOnClickListener(null);  mProfileThirdView.setVisibility(View.GONE);  mProfileThirdView.setOnClickListener(null);  mCurrentProfileName.setText("");  mCurrentProfileEmail.setText("");  if (!mCompactStyle) {    mAccountHeaderTextSection.setPadding(0,0,(int)UIUtils.convertDpToPixel(56,mAccountHeaderTextSection.getContext()),0);  }  handleSelectionView(mCurrentProfile,true);  if (mCurrentProfile != null) {    if ((mProfileImagesVisible || mOnlyMainProfileImageVisible) && !mOnlySmallProfileImagesVisible) {      setImageOrPlaceholder(mCurrentProfileView,mCurrentProfile.getIcon());      if (mProfileImagesClickable) {        mCurrentProfileView.setOnClickListener(onCurrentProfileClickListener);        mCurrentProfileView.setOnLongClickListener(onCurrentProfileLongClickListener);        mCurrentProfileView.disableTouchFeedback(false);      } else {        mCurrentProfileView.disableTouchFeedback(true);      }      mCurrentProfileView.setVisibility(View.VISIBLE);      mCurrentProfileView.invalidate();    } else     if (mCompactStyle) {      mCurrentProfileView.setVisibility(View.GONE);    }    mAccountHeaderTextSection.setVisibility(View.VISIBLE);    handleSelectionView(mCurrentProfile,true);    mAccountSwitcherArrow.setVisibility(View.VISIBLE);    mCurrentProfileView.setTag(R.id.material_drawer_profile_header,mCurrentProfile);    StringHolder.applyTo(mCurrentProfile.getName(),mCurrentProfileName);    StringHolder.applyTo(mCurrentProfile.getEmail(),mCurrentProfileEmail);    if (mProfileFirst != null && mProfileImagesVisible && !mOnlyMainProfileImageVisible) {      setImageOrPlaceholder(mProfileFirstView,mProfileFirst.getIcon());      mProfileFirstView.setTag(R.id.material_drawer_profile_header,mProfileFirst);      if (mProfileImagesClickable) {        mProfileFirstView.setOnClickListener(onProfileClickListener);        mProfileFirstView.setOnLongClickListener(onProfileLongClickListener);        mProfileFirstView.disableTouchFeedback(false);      } else {        mProfileFirstView.disableTouchFeedback(true);      }      mProfileFirstView.setVisibility(View.VISIBLE);      mProfileFirstView.invalidate();    }    if (mProfileSecond != null && mProfileImagesVisible && !mOnlyMainProfileImageVisible) {      setImageOrPlaceholder(mProfileSecondView,mProfileSecond.getIcon());      mProfileSecondView.setTag(R.id.material_drawer_profile_header,mProfileSecond);      if (mProfileImagesClickable) {        mProfileSecondView.setOnClickListener(onProfileClickListener);        mProfileSecondView.setOnLongClickListener(onProfileLongClickListener);        mProfileSecondView.disableTouchFeedback(false);      } else {        mProfileSecondView.disableTouchFeedback(true);      }      mProfileSecondView.setVisibility(View.VISIBLE);      mProfileSecondView.invalidate();    }    if (mProfileThird != null && mThreeSmallProfileImages && mProfileImagesVisible && !mOnlyMainProfileImageVisible) {      setImageOrPlaceholder(mProfileThirdView,mProfileThird.getIcon());      mProfileThirdView.setTag(R.id.material_drawer_profile_header,mProfileThird);      if (mProfileImagesClickable) {        mProfileThirdView.setOnClickListener(onProfileClickListener);        mProfileThirdView.setOnLongClickListener(onProfileLongClickListener);        mProfileThirdView.disableTouchFeedback(false);      } else {        mProfileThirdView.disableTouchFeedback(true);      }      mProfileThirdView.setVisibility(View.VISIBLE);      mProfileThirdView.invalidate();    }  } else   if (mProfiles != null && mProfiles.size() > 0) {    IProfile profile=mProfiles.get(0);    mAccountHeaderTextSection.setTag(R.id.material_drawer_profile_header,profile);    mAccountHeaderTextSection.setVisibility(View.VISIBLE);    handleSelectionView(mCurrentProfile,true);    mAccountSwitcherArrow.setVisibility(View.VISIBLE);    if (mCurrentProfile != null) {      StringHolder.applyTo(mCurrentProfile.getName(),mCurrentProfileName);      StringHolder.applyTo(mCurrentProfile.getEmail(),mCurrentProfileEmail);    }  }  if (!mSelectionFirstLineShown) {    mCurrentProfileName.setVisibility(View.GONE);  }  if (!TextUtils.isEmpty(mSelectionFirstLine)) {    mCurrentProfileName.setText(mSelectionFirstLine);    mAccountHeaderTextSection.setVisibility(View.VISIBLE);  }  if (!mSelectionSecondLineShown) {    mCurrentProfileEmail.setVisibility(View.GONE);  }  if (!TextUtils.isEmpty(mSelectionSecondLine)) {    mCurrentProfileEmail.setText(mSelectionSecondLine);    mAccountHeaderTextSection.setVisibility(View.VISIBLE);  }  if (!mSelectionListEnabled || !mSelectionListEnabledForSingleProfile && mProfileFirst == null && (mProfiles == null || mProfiles.size() == 1)) {    mAccountSwitcherArrow.setVisibility(View.GONE);    handleSelectionView(null,false);    if (!mCompactStyle) {      mAccountHeaderTextSection.setPadding(0,0,(int)UIUtils.convertDpToPixel(16,mAccountHeaderTextSection.getContext()),0);    }  }  if (mOnAccountHeaderSelectionViewClickListener != null) {    handleSelectionView(mCurrentProfile,true);  }}  }
class C{  private boolean isActive(final @NotNull Element mark){  final Object activeProp=mark.getDataset().at(BREAKPOINT_ACTIVE_PROPERTY_NAME);  if (activeProp == null) {    return false;  }  return Boolean.valueOf(activeProp.toString());}  }
class C{  public Configuration(){  super();}  }
class C{  public static void restoreSize(Window window){  ManagedWindowDecorator dec=trackedWindows.get(window);  if (dec == null) {    throw new IllegalArgumentException("Trying to restore a window that is not being tracked");  }  dec.setRestored(true);  WtWindowManager wm=WtWindowManager.getInstance();  if (!"true".equals(wm.getProperty(SAVE_DIMENSIONS_PROPERTY,"true"))) {    return;  }  String maximizedProp=PROP_PREFIX + dec.getName() + ".maximized";  if ("true".equals(wm.getProperty(maximizedProp,"false"))) {    if (window instanceof Frame) {      ((Frame)window).setExtendedState(Frame.MAXIMIZED_BOTH);      return;    } else {      wm.setProperty(maximizedProp,"false");    }  }  int width=wm.getPropertyInt(PROP_PREFIX + dec.getName() + ".width",-1);  int height=wm.getPropertyInt(PROP_PREFIX + dec.getName() + ".height",-1);  if (width != -1 && height != -1) {    window.setSize(width,height);  }}  }
class C{  public static boolean isExplicitlyExtendsBounded(final AnnotatedWildcardType wildcardType){  return ((Type.WildcardType)wildcardType.getUnderlyingType()).isExtendsBound() && !((Type.WildcardType)wildcardType.getUnderlyingType()).isUnbound();}  }
class C{  public PlanRouter(final TripRouter routingHandler,final ActivityFacilities facilities){  this.routingHandler=routingHandler;  this.facilities=facilities;}  }
class C{  public void move(int startLeft,int finalLeft,int milliseconds){  this.startLeft=startLeft;  this.finalLeft=finalLeft;  run(milliseconds);}  }
class C{  public boolean isFinal(){  return this.isDeclaredFinal();}  }
class C{  public void testGetProperty(){  ArbitraryPropertySupport instance=(new UnboundBeanImpl()).aps();  assertEquals(null,instance.getProperty(NOT_A_PROPERTY));  assertEquals(OLD_VALUE,instance.getProperty(STRING_PROPERTY));  assertEquals(OLD_VALUE,instance.getProperty(MAPPED_STRING));}  }
class C{  public boolean shouldReopen(Window window){  StateItem item=windows.get(window);  return mode() >= REOPEN_ON_START && item != null && item.reopen && item.wasOpen;}  }
class C{  @Override public String graph() throws Exception {  return m_root.graph();}  }
class C{  public static DefaultJavaType createUnresolved(TypeDef typeDef,int dimensions,JavaClassParent context){  DefaultJavaType result;  if (typeDef instanceof WildcardTypeDef) {    WildcardTypeDef wildcard=(WildcardTypeDef)typeDef;    if (wildcard.getTypeDef() != null) {      JavaType type=createUnresolved(wildcard.getTypeDef(),context);      DefaultJavaWildcardType.BoundType boundType=null;      if ("extends".equals(wildcard.getWildcardExpressionType())) {        boundType=BoundType.EXTENDS;      } else       if ("super".equals(wildcard.getWildcardExpressionType())) {        boundType=BoundType.SUPER;      }      result=new DefaultJavaWildcardType(type,boundType);    } else {      result=new DefaultJavaWildcardType();    }  } else {    DefaultJavaParameterizedType typeResult=new DefaultJavaParameterizedType(null,typeDef.getName(),typeDef.getDimensions() + dimensions,context);    if (typeDef.getActualArgumentTypes() != null && !typeDef.getActualArgumentTypes().isEmpty()) {      List<JavaType> actualArgumentTypes=new LinkedList<JavaType>();      for (      TypeDef actualArgType : typeDef.getActualArgumentTypes()) {        actualArgumentTypes.add(TypeAssembler.createUnresolved(actualArgType,context));      }      typeResult.setActualArgumentTypes(actualArgumentTypes);    }    result=typeResult;  }  return result;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void rollback(Throwable t){  log.debug("  ROLLBACK: deleting " + tempFile + " due to "+ t);  try {    fileContentStore.delete(tempFile,node);  } catch (  Exception e) {    t.addSuppressed(e);  }}  }
class C{  public static EffectMilk create(Potion... potions){  final EffectMilk eff=new EffectMilk();  return eff.blacklistPotions(potions);}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  this.sendStageProgressPatch(buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  @SuppressWarnings("unchecked") public Iterable<ParameterizedTypeRef> createParameterizedTypeRefIterableFromString(EDataType eDataType,String initialValue){  return (Iterable<ParameterizedTypeRef>)super.createFromString(initialValue);}  }
class C{  private double[] estimateBandwidths(){  double[] stds=getStandardDeviations();  double[] silverman=new double[stds.length];  for (int i=0; i < silverman.length; i++) {    silverman[i]=1.06 * stds[i] * Math.pow(points.length,-1 / (4.0 + silverman.length));    if (silverman[i] == 0.0) {      silverman[i]=0.05;    }  }  return silverman;}  }
class C{  public ScatterPlotSeriesAttributes(ChartGenerator generator,String name,int index,double[][] values,SeriesChangeListener stoppable){  super(generator,name,index,stoppable);  setValues(values);  super.setSeriesName(name);  ((ScatterPlotGenerator)generator).shapeCounter++;  if (((ScatterPlotGenerator)generator).shapeCounter >= shapes.length)   ((ScatterPlotGenerator)generator).shapeCounter=0;  shapeNum=((ScatterPlotGenerator)generator).shapeCounter;  shape=shapes[shapeNum];  XYLineAndShapeRenderer renderer=(XYLineAndShapeRenderer)(((XYPlot)getPlot()).getRenderer());  renderer.setSeriesShape(getSeriesIndex(),shape);  renderer.setAutoPopulateSeriesShape(false);}  }
class C{  public void run(){  if (logger.isDebugEnabled()) {    logger.debug("Monitoring health of {} every {} seconds",this.eval.getDescription(),interval);  }  while (!this.stopRequested) {    SystemFailure.checkFailure();    try {      Thread.sleep(interval * 1000);      List status=new ArrayList();      eval.evaluate(status);      GemFireHealth.Health overallHealth=GemFireHealth.GOOD_HEALTH;      this.okayDiagnoses.clear();      this.poorDiagnoses.clear();      for (Iterator iter=status.iterator(); iter.hasNext(); ) {        AbstractHealthEvaluator.HealthStatus health=(AbstractHealthEvaluator.HealthStatus)iter.next();        if (overallHealth == GemFireHealth.GOOD_HEALTH) {          if ((health.getHealthCode() != GemFireHealth.GOOD_HEALTH)) {            overallHealth=health.getHealthCode();          }        } else         if (overallHealth == GemFireHealth.OKAY_HEALTH) {          if (health.getHealthCode() == GemFireHealth.POOR_HEALTH) {            overallHealth=GemFireHealth.POOR_HEALTH;          }        }        GemFireHealth.Health healthCode=health.getHealthCode();        if (healthCode == GemFireHealth.OKAY_HEALTH) {          this.okayDiagnoses.add(health.getDiagnosis());        } else         if (healthCode == GemFireHealth.POOR_HEALTH) {          this.poorDiagnoses.add(health.getDiagnosis());          break;        }      }      if (overallHealth != prevHealth) {        healthImpl.healthChanged(this,overallHealth);        this.prevHealth=overallHealth;      }    } catch (    InterruptedException ex) {      break;    }  }  eval.close();  if (logger.isDebugEnabled()) {    logger.debug("Stopped checking for distributed system health");  }}  }
class C{  private static int fastComputeChecksum(byte[] buffer,int offset,int length,int initValue,int mask) throws NoSuchAlgorithmException {  AbstractChecksum checksum;  checksum=JacksumAPI.getChecksumInstance("crc:16," + Integer.toHexString(mask) + ","+ Integer.toHexString(initValue)+ ",false,false,0");  checksum.reset();  checksum.update(buffer,offset,length);  return (int)checksum.getValue();}  }
class C{  ChildDrawable addLayer(Drawable dr,int[] themeAttrs,int id,int left,int top,int right,int bottom){  final ChildDrawable childDrawable=createLayer(dr);  childDrawable.mId=id;  childDrawable.mThemeAttrs=themeAttrs;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT)   childDrawable.mDrawable.setAutoMirrored(isAutoMirrored());  childDrawable.mInsetL=left;  childDrawable.mInsetT=top;  childDrawable.mInsetR=right;  childDrawable.mInsetB=bottom;  addLayer(childDrawable);  mLayerState.mChildrenChangingConfigurations|=dr.getChangingConfigurations();  dr.setCallback(this);  return childDrawable;}  }
class C{  public static String geometryToWKB(Geometry g,CoordinateTransformation transformation){  StringBuilder wkb=new StringBuilder(BIG_ENDIAN);  if (g instanceof Point) {    wkb.append(WKB_POINT);  } else   if (g instanceof LineString) {    wkb.append(WKB_LINE_STRING);  } else   if (g instanceof MultiLineString) {    wkb.append(WKB_MULTI_LINE_STRING);  }  for (  Coordinate coordinate : g.getCoordinates()) {    Coord c=transformation.transform(MGC.coordinate2Coord(coordinate));    wkb.append(Long.toHexString(Double.doubleToRawLongBits(c.getX())));    wkb.append(Long.toHexString(Double.doubleToRawLongBits(c.getY())));  }  return wkb.toString();}  }
class C{  public static boolean isInfinite(double v){  return false;}  }
class C{  private void pop(char c) throws JSONException {  if (this.top <= 0) {    throw new JSONException("Nesting error.");  }  char m=this.stack[this.top - 1] == null ? 'a' : 'k';  if (m != c) {    throw new JSONException("Nesting error.");  }  this.top-=1;  this.mode=this.top == 0 ? 'd' : this.stack[this.top - 1] == null ? 'a' : 'k';}  }
class C{  public Object clone() throws CloneNotSupportedException {  Tradestrategy tradestrategy=(Tradestrategy)super.clone();  Contract contract=(Contract)this.getContract().clone();  tradestrategy.setContract(contract);  Tradingday tradingday=(Tradingday)this.getTradingday().clone();  tradestrategy.setTradingday(tradingday);  Portfolio portfolio=(Portfolio)this.getPortfolio().clone();  tradestrategy.setPortfolio(portfolio);  Strategy strategy=(Strategy)this.getStrategy().clone();  tradestrategy.setStrategy(strategy);  List<TradeOrder> tradeOrders=new ArrayList<TradeOrder>(0);  tradestrategy.setTradeOrders(tradeOrders);  return tradestrategy;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void main(String[] args){  runCheck(new CheckAssociator(),args);}  }
class C{  private String createQueryString(final String prefix,final String element,final Map<String,String> attributes){  StringBuilder queryStringBuilder=new StringBuilder();  Iterator<Entry<String,String>> attributeIter=attributes.entrySet().iterator();  queryStringBuilder.append("//").append(prefix).append(':').append(element);  if (attributes.size() > 0) {    queryStringBuilder.append("[");    Entry<String,String> attrEntry=attributeIter.next();    queryStringBuilder.append("@").append(attrEntry.getKey()).append("='").append(attrEntry.getValue()).append("'");    while (attributeIter.hasNext()) {      attrEntry=attributeIter.next();      queryStringBuilder.append(" and @").append(attrEntry.getKey()).append("='").append(attrEntry.getValue()).append("'");    }    queryStringBuilder.append("]");  }  return queryStringBuilder.toString();}  }
class C{  @Override public double finiteDifferenceEpsilon(){  return 1e-6;}  }
class C{  public static String info(String fileName,Writer writer){  PrintWriter pw=new PrintWriter(writer,true);  if (!FilePath.get(fileName).exists()) {    pw.println("File not found: " + fileName);    return "File not found: " + fileName;  }  long fileLength=FileUtils.size(fileName);  MVStore store=new MVStore.Builder().fileName(fileName).readOnly().open();  try {    MVMap<String,String> meta=store.getMetaMap();    Map<String,Object> header=store.getStoreHeader();    long fileCreated=DataUtils.readHexLong(header,"created",0L);    TreeMap<Integer,Chunk> chunks=new TreeMap<Integer,Chunk>();    long chunkLength=0;    long maxLength=0;    long maxLengthLive=0;    long maxLengthNotEmpty=0;    for (    Entry<String,String> e : meta.entrySet()) {      String k=e.getKey();      if (k.startsWith("chunk.")) {        Chunk c=Chunk.fromString(e.getValue());        chunks.put(c.id,c);        chunkLength+=c.len * MVStore.BLOCK_SIZE;        maxLength+=c.maxLen;        maxLengthLive+=c.maxLenLive;        if (c.maxLenLive > 0) {          maxLengthNotEmpty+=c.maxLen;        }      }    }    pw.printf("Created: %s\n",formatTimestamp(fileCreated,fileCreated));    pw.printf("Last modified: %s\n",formatTimestamp(FileUtils.lastModified(fileName),fileCreated));    pw.printf("File length: %d\n",fileLength);    pw.printf("The last chunk is not listed\n");    pw.printf("Chunk length: %d\n",chunkLength);    pw.printf("Chunk count: %d\n",chunks.size());    pw.printf("Used space: %d%%\n",getPercent(chunkLength,fileLength));    pw.printf("Chunk fill rate: %d%%\n",maxLength == 0 ? 100 : getPercent(maxLengthLive,maxLength));    pw.printf("Chunk fill rate excluding empty chunks: %d%%\n",maxLengthNotEmpty == 0 ? 100 : getPercent(maxLengthLive,maxLengthNotEmpty));    for (    Entry<Integer,Chunk> e : chunks.entrySet()) {      Chunk c=e.getValue();      long created=fileCreated + c.time;      pw.printf("  Chunk %d: %s, %d%% used, %d blocks",c.id,formatTimestamp(created,fileCreated),getPercent(c.maxLenLive,c.maxLen),c.len);      if (c.maxLenLive == 0) {        pw.printf(", unused: %s",formatTimestamp(fileCreated + c.unused,fileCreated));      }      pw.printf("\n");    }    pw.printf("\n");  } catch (  Exception e) {    pw.println("ERROR: " + e);    e.printStackTrace(pw);    return e.getMessage();  } finally {    store.close();  }  pw.flush();  return null;}  }
class C{  public static void clearStack(){  lastDistance.clear();}  }
class C{  protected void putUsed(final String name,final String action){  if (name == null)   throw new IllegalArgumentException();  if (action == null)   throw new IllegalArgumentException();  if (used.containsKey(name)) {    throw new IllegalStateException("Already used: " + name);  }  used.put(name,action);}  }
class C{  protected AbstractResource(final ILocatableResource container,final IIndexManager indexManager,final String namespace,final Long timestamp,final Properties properties){  if (indexManager == null)   throw new IllegalArgumentException();  if (namespace == null)   throw new IllegalArgumentException();  if (timestamp == null)   throw new IllegalArgumentException();  if (properties == null)   throw new IllegalArgumentException();  this.container=container;  this.indexManager=indexManager;  this.namespace=namespace;  this.containerNamespace=properties.getProperty(RelationSchema.CONTAINER);  this.timestamp=timestamp;  this.properties=properties;  properties.setProperty(RelationSchema.NAMESPACE,namespace);  properties.setProperty(RelationSchema.CLASS,getClass().getName());  if (log.isInfoEnabled()) {    log.info("namespace=" + namespace + ", timestamp="+ timestamp+ ", container="+ containerNamespace+ ", indexManager="+ indexManager);  }  commitTime=(Long)properties.get(RelationSchema.COMMIT_TIME);  forceSerialExecution=Boolean.parseBoolean(getProperty(Options.FORCE_SERIAL_EXECUTION,Options.DEFAULT_FORCE_SERIAL_EXECUTION));  maxParallelSubqueries=getProperty(Options.MAX_PARALLEL_SUBQUERIES,Options.DEFAULT_MAX_PARALLEL_SUBQUERIES,IntegerValidator.GTE_ZERO);  chunkOfChunksCapacity=getProperty(Options.CHUNK_OF_CHUNKS_CAPACITY,Options.DEFAULT_CHUNK_OF_CHUNKS_CAPACITY,IntegerValidator.GT_ZERO);  chunkCapacity=getProperty(Options.CHUNK_CAPACITY,Options.DEFAULT_CHUNK_CAPACITY,IntegerValidator.GT_ZERO);  chunkTimeout=getProperty(Options.CHUNK_TIMEOUT,Options.DEFAULT_CHUNK_TIMEOUT,LongValidator.GTE_ZERO);  fullyBufferedReadThreshold=getProperty(Options.FULLY_BUFFERED_READ_THRESHOLD,Options.DEFAULT_FULLY_BUFFERED_READ_THRESHOLD,IntegerValidator.GT_ZERO);}  }
class C{  public static boolean isNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0;}  }
class C{  boolean[] compare(Object[] outputs,Record rec){  BreastCancerWRecord r=(BreastCancerWRecord)rec;  boolean[] results=new boolean[outputs.length];  for (int i=0; i < results.length; i++) {    float result=(Float)outputs[i];    boolean compare=r.malignant;    results[i]=compare == (result > 0 ? true : false);  }  return results;}  }
class C{  public boolean hasListener(String listenerTypeName,String listenerName){synchronized (monData) {    if (!monData.hasListeners())     return false;    ListenerType type=getListenerType(listenerTypeName);    if (type == null)     return false; else     return type.hasListener(listenerName);  }}  }
class C{  private E dequeue(){  int n=size - 1;  if (n < 0)   return null; else {    Object[] array=queue;    E result=(E)array[0];    E x=(E)array[n];    array[n]=null;    Comparator<? super E> cmp=comparator;    if (cmp == null)     siftDownComparable(0,x,array,n); else     siftDownUsingComparator(0,x,array,n,cmp);    size=n;    return result;  }}  }
class C{  public boolean isSetAuthScheme(){  return this.authScheme != null;}  }
class C{  public int size(Key lo,Key hi){  if (lo == null)   throw new NullPointerException("first argument to size() is null");  if (hi == null)   throw new NullPointerException("second argument to size() is null");  if (lo.compareTo(hi) > 0)   return 0;  if (contains(hi))   return rank(hi) - rank(lo) + 1; else   return rank(hi) - rank(lo);}  }
class C{  protected void onException(final WroRuntimeException e){  throw e;}  }
class C{  public boolean hasRel(){  return super.hasAttribute(REL);}  }
class C{  @LargeTest public void testThumbnailForMPEG4VGA() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_640x480_30fps_512Kbps_0_23.3gp";  final int atTime=0;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=(mediaVideoItem.getWidth() / 2);  final int outHeight=mediaVideoItem.getHeight();  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  public VisorLogFile(String path,long size,long lastModified){  this.path=path;  this.size=size;  this.lastModified=lastModified;}  }
class C{  public static int numSharedChars(final String str,final String chars){  if (str == null || chars == null) {    return 0;  }  int total=0, pos=-1;  while ((pos=indexOfChars(str,chars,pos + 1)) != -1) {    total++;  }  return total;}  }
class C{  public static Page read(PageBtreeIndex index,Data data,int pageId){  PageBtreeLeaf p=new PageBtreeLeaf(index,pageId,data);  p.read();  return p;}  }
class C{  public void showDialog(String stream){  this.stream=stream;  setTitle(type + " of " + stream+ " (100 most recent)");  if (currentInfo == null || !currentInfo.stream.equals(stream)) {    followers.clear();    total.setText("Total: -");    stats.setText(null);    currentInfo=null;    lastValidInfo=null;    lastUpdated=-1;    updateStats();  }  setVisible(true);  request();  update();}  }
class C{  public static boolean validateHostIOLimit(VirtualPool vpool,UnManagedVolume unManagedVolume){  Set<String> hostIoBws=PropertySetterUtil.extractValuesFromStringSet(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.name(),unManagedVolume.getVolumeInformation());  Set<String> hostIoPs=PropertySetterUtil.extractValuesFromStringSet(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.name(),unManagedVolume.getVolumeInformation());  String vPoolBw="0";  if (vpool.getHostIOLimitBandwidth() != null) {    vPoolBw=String.valueOf(vpool.getHostIOLimitBandwidth());  }  String vPoolIoPs="0";  if (vpool.getHostIOLimitIOPs() != null) {    vPoolIoPs=String.valueOf(vpool.getHostIOLimitIOPs());  }  _logger.info("Volume's bw {} and iops {} --> Virtual Pool's bw {} and iops {}",new Object[]{Joiner.on(",").join(hostIoBws),Joiner.on(",").join(hostIoPs),vPoolBw,vPoolIoPs});  if (hostIoBws.size() > 1) {    if ("0".equalsIgnoreCase(vPoolBw)) {      return false;    }  }  if (hostIoPs.size() > 1) {    if ("0".equalsIgnoreCase(vPoolIoPs)) {      return false;    }  }  return hostIoBws.contains(vPoolBw) && hostIoPs.contains(vPoolIoPs);}  }
class C{  @Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(MainTable.TABLE_NAME);switch (mUriMatcher.match(uri)) {case MAIN:    qb.setProjectionMap(mNotesProjectionMap);  break;case MAIN_ID:qb.setProjectionMap(mNotesProjectionMap);qb.appendWhere(MainTable._ID + "=?");selectionArgs=DatabaseUtils.appendSelectionArgs(selectionArgs,new String[]{uri.getLastPathSegment()});break;default :throw new IllegalArgumentException("Unknown URI " + uri);}if (TextUtils.isEmpty(sortOrder)) {sortOrder=MainTable.DEFAULT_SORT_ORDER;}SQLiteDatabase db=mOpenHelper.getReadableDatabase();Cursor c=qb.query(db,projection,selection,selectionArgs,null,null,sortOrder);c.setNotificationUri(getContext().getContentResolver(),uri);return c;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.rootLayout=(LinearLayout)this.findViewById(R.id.sensor_root_layout);  this.sensorManagerTV=(TextView)this.findViewById(R.id.sensor_count_tv);}  }
class C{  public NounTag(){  super();}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == CharacterClassElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == CharacterClassAtom.class) {switch (baseFeatureID) {case RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER:    return RegularExpressionPackage.CHARACTER_CLASS_ESCAPE_SEQUENCE__CHARACTER;default :  return -1;}}if (baseClass == EscapedCharacterClassAtom.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int row, col;  int nRows, nCols;  double z;  int progress=0;  int i, a;  double noData=-32768;  double outputNoData=-32768;  String inputDataString=null;  int numImages=0;  double sumOfWeights=0;  double d=0;  double weight=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String[] dataSplit=args[0].split(";");  outputHeader=args[1];  if (outputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  ArrayList<String> imageFiles=new ArrayList<>();  ArrayList<Double> weights=new ArrayList<>();  for (a=0; a < dataSplit.length; a+=2) {    if (!dataSplit[a].trim().equals("") && !dataSplit[a].trim().toLowerCase().equals("not specified")) {      imageFiles.add(dataSplit[a]);      weights.add(Double.parseDouble(dataSplit[a + 1]));      sumOfWeights+=weights.get(numImages);      numImages++;    }  }  for (a=0; a < numImages; a++) {    d=weights.get(a) / sumOfWeights;    weights.set(a,d);  }  try {    image=new WhiteboxRaster(imageFiles.get(0),"r");    nRows=image.getNumberRows();    nCols=image.getNumberColumns();    outputNoData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",imageFiles.get(0),WhiteboxRaster.DataType.FLOAT,0);    for (i=0; i < numImages; i++) {      progress=(int)(100f * (i + 1) / numImages);      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      weight=weights.get(i);      if (i > 0) {        image=new WhiteboxRaster(imageFiles.get(i),"r");        noData=image.getNoDataValue();        if (image.getNumberRows() != nRows || image.getNumberColumns() != nCols) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      double[] data=null;      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            z=output.getValue(row,col);            if (z != outputNoData) {              output.setValue(row,col,z + data[col] * weight);            }          } else {            output.setValue(row,col,outputNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public TabbedInspector(TabbableAndGroupable object,GUIState state,String name){  Properties properties=Properties.getProperties(object);  if (properties instanceof SimpleProperties) {    buildTabbedInspector((SimpleProperties)properties,state,name,object.provideTabGroupProperties(),object.provideTabGroups(),object.provideTabNames(),object.provideExtraTab());  } else   throw new RuntimeException("A Tabbable Object must provide SimpleProperties.");}  }
class C{  public List<String> listAttributeValues(){  List<String> list=new ArrayList<String>();  Collection<String> names=listAttributeNames();  for (  String name : names) {    try {      Object val=this.getProperty(name);      if (val != null) {        list.add(name + " : " + val.toString());      }    } catch (    Exception e) {      throwException("Could not list attribute values. Reason: ",e);    }  }  return list;}  }
class C{  private void resetNextInetSocketAddress(Proxy proxy) throws IOException {  inetSocketAddresses=new ArrayList<>();  String socketHost;  int socketPort;  if (proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.SOCKS) {    socketHost=address.url().host();    socketPort=address.url().port();  } else {    SocketAddress proxyAddress=proxy.address();    if (!(proxyAddress instanceof InetSocketAddress)) {      throw new IllegalArgumentException("Proxy.address() is not an " + "InetSocketAddress: " + proxyAddress.getClass());    }    InetSocketAddress proxySocketAddress=(InetSocketAddress)proxyAddress;    socketHost=getHostString(proxySocketAddress);    socketPort=proxySocketAddress.getPort();  }  if (socketPort < 1 || socketPort > 65535) {    throw new SocketException("No route to " + socketHost + ":"+ socketPort+ "; port is out of range");  }  if (proxy.type() == Proxy.Type.SOCKS) {    inetSocketAddresses.add(InetSocketAddress.createUnresolved(socketHost,socketPort));  } else {    List<InetAddress> addresses=address.dns().lookup(socketHost);    for (int i=0, size=addresses.size(); i < size; i++) {      InetAddress inetAddress=addresses.get(i);      inetSocketAddresses.add(new InetSocketAddress(inetAddress,socketPort));    }  }  nextInetSocketAddressIndex=0;}  }
class C{  public LatLong toLatLong(){  if (latLong == null && latitude != 0) {    return this.latLong=new com.lynden.gmapsfx.javascript.object.LatLong(latitude,longitude);  }  return latLong;}  }
class C{  @RequestMapping(value="/test/{id}",consumes="application/json",method=RequestMethod.PUT) public BasicCase update(@PathVariable("id") String id,@RequestBody BasicCase basicCase){  return null;}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof XAResourceTransaction))   return false;  XAResourceTransaction other=(XAResourceTransaction)o;  return this.xid.equals(other.xid);}  }
class C{  final public void enable_tracing(){}  }
class C{  public double elasticityForward(){  final double val=value();  final double del=deltaForward();  if (val > Constants.QL_EPSILON)   return del / val * forward; else   if (Math.abs(del) < Constants.QL_EPSILON)   return 0.0; else   if (del > 0.0)   return Double.MAX_VALUE; else   return Double.MIN_VALUE;}  }
class C{  public static <A>StreamableTValue<A> fromStream(final AnyMValue<Stream<A>> monads){  return new StreamableTValue<>(monads.map(null));}  }
class C{  protected int retrieveStartBlockPosition(int start,int end){  this.scanner.resetTo(start,end);  try {    int token;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameLBRACE:        return this.scanner.startPosition;    }  }} catch (InvalidInputException e) {}return -1;}  }
class C{  public DistributedLogNamespaceBuilder conf(DistributedLogConfiguration conf){  this._conf=conf;  return this;}  }
class C{  public ScrollingSwingTerminalTest(){  initComponents();  scrollingSwingTerminal=new ScrollingSwingTerminal(TerminalEmulatorDeviceConfiguration.getDefault().withLineBufferScrollbackSize(150),SwingTerminalFontConfiguration.getDefault(),TerminalEmulatorColorConfiguration.getDefault());  panelTerminalContainer.add(scrollingSwingTerminal,BorderLayout.CENTER);  pack();}  }
class C{  public Plane(Vector3 normal,float d){  this.normal.set(normal).nor();  this.d=d;}  }
class C{  public void cancelDownloads(){  cancelled=true;  for (  final DownloadFile download : downloadMap.keySet()) {    download.cancelDownload();  }}  }
class C{  private TransactionCommand parseTransactionCommand(){  TransactionCommand command;  if (readIf("ISOLATION")) {    read("LEVEL");    Expression expr=readExpression();    command=new TransactionCommand(session,CommandInterface.TRANSACTION_ISOLATION);    command.setExpression(expr);    return command;  } else   if (readIf("READ")) {    if (readIf("WRITE")) {      return new TransactionCommand(session,CommandInterface.TRANSACTION_READONLY_FALSE);    } else     if (readIf("ONLY")) {      return new TransactionCommand(session,CommandInterface.COMMIT_TRANSACTION);    }  }  throw getSyntaxError();}  }
class C{  FilterNode filterExistsWithVars(final String anonymousVar,final String... varNames){  final StatementPatternNode[] statementPatterns=stmtPatternsWithVars(varNames);  final VarNode askVar=new VarNode(anonymousVar);  askVar.setAnonymous(true);  final FilterNode fn=(FilterNode)new Helper(){{      tmp=filter(notExists(askVar,joinGroupNode((Object[])statementPatterns)));    }  }.getTmp();  return (FilterNode)resolveVEs(fn);}  }
class C{  public EditableOMPoly(GraphicAttributes ga){  createGraphic(ga);}  }
class C{  public void reset(){  digest.reset();  digest.update(inputPad,0,inputPad.length);}  }
class C{  public double interpolate(double x,double y){switch (this.interpolationMethod) {case 0:    return this.biLinearInterpolator.biLinearInterpolation(x,y);case 1:  return this.biCubicInterpolator.biCubicInterpolation(x,y);case 2:return this.inverseDistanceWeighting.inverseDistanceWeighting(x,y,this.exp);}return Double.NaN;}  }
class C{  public MonetaryFormat postfixCode(){  if (!codePrefixed)   return this; else   return new MonetaryFormat(negativeSign,positiveSign,zeroDigit,decimalMark,minDecimals,decimalGroups,shift,roundingMode,codes,codeSeparator,false);}  }
class C{  public void cbz(int size,Register cmp,Label label){  if (label.isBound()) {    int offset=label.position() - position();    super.cbz(size,cmp,offset);  } else {    label.addPatchAt(position());    int regEncoding=cmp.encoding << (PatchLabelKind.INFORMATION_OFFSET + 1);    int sizeEncoding=(size == 64 ? 1 : 0) << PatchLabelKind.INFORMATION_OFFSET;    emitInt(PatchLabelKind.BRANCH_ZERO.encoding | regEncoding | sizeEncoding);  }}  }
class C{  public String lastActionMsg(){  if (m_undoStack.size() == 0) {    return "";  }  return m_undoStack.get(m_undoStack.size() - 1).getRedoMsg();}  }
class C{  public void readData(final File file,final boolean allowRowChanges,final boolean allowColumnChanges) throws TableDataException {  String[][] values=Utils.getStringMatrix(file);  try {    checkData(allowRowChanges,allowColumnChanges,values);    reset(values.length,values[0].length);    for (int i=0; i < values.length; i++) {      for (int j=0; j < values[0].length; j++) {        if ((values[i][j]).length() > 0) {          Double num=new Double(0);          try {            num=Double.valueOf(values[i][j]);          } catch (          NumberFormatException exception) {          } finally {            setLogicalValue(i,j,num,false);          }        }      }    }    fireTableStructureChanged();  } catch (  TableDataException tde) {    throw tde;  }}  }
class C{  public void initWebXWalkEngine(){  Logging.logd("    Web engine and necessary components");  initOmniboxPosition();}  }
class C{  public boolean isSetMessageType(){  return this.messageType != null;}  }
class C{  protected static void initCMYKColorspace(){  if (ICCProfileForRGB == null) {    rgbModel=new ComponentColorModel(rgbCS,new int[]{8,8,8},false,false,ColorModel.OPAQUE,DataBuffer.TYPE_BYTE);  } else {    final int compCount=rgbCS.getNumComponents();    final int[] values=new int[compCount];    for (int i=0; i < compCount; i++) {      values[i]=8;    }    rgbModel=new ComponentColorModel(rgbCS,values,false,false,ColorModel.OPAQUE,DataBuffer.TYPE_BYTE);  }  final FastColorSpaceCMYK cmykCS=new FastColorSpaceCMYK();  CSToRGB=new ColorConvertOp(cmykCS,rgbCS,ColorSpaces.hints);}  }
class C{  public String pack(Iterator<Integer> it){  StringBuilder sb=new StringBuilder("");  while (it.hasNext()) {    sb.append(it.next() + ",");  }  if (sb.length() > 0) {    sb.deleteCharAt(sb.length() - 1);  }  return sb.toString();}  }
class C{  public static StringBuilder leftShift(StringBuilder self,Object value){  if (value instanceof CharSequence)   return self.append((CharSequence)value); else   return self.append(value);}  }
class C{  public void debugWriteFile(String directoryName){  try {    boolean p=stopPruning(true);    writeFile(directoryName);    defrost();    stopPruning(p);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  protected void doUsernameAndPasswordArgs(JvmLauncher java){  String username=getConfiguration().getPropertyValue(RemotePropertySet.USERNAME);  String password=getConfiguration().getPropertyValue(RemotePropertySet.PASSWORD);  if (username != null && !username.trim().isEmpty() && password != null && !password.trim().isEmpty()) {    java.addAppArguments("-username");    java.addAppArguments(username);    java.addAppArguments("-password");    java.addAppArguments(password);  }}  }
class C{  public synchronized boolean isCheckOidActivated(){  return checkOid;}  }
class C{  public static boolean isAudioType(String mime){  return mime.toLowerCase(Locale.getDefault()).startsWith("audio/");}  }
class C{  void addIndifferentAlgorithm(String algorithm){  indifferentAlgorithms.add(algorithm);}  }
class C{  public static SampleFragment newInstance(String param1,int fragCount){  SampleFragment fragment=new SampleFragment();  Bundle args=new Bundle();  args.putString(ARG_FRAG_TEXT,param1);  args.putInt(ARG_FRAG_COUNT,fragCount);  fragment.setArguments(args);  return fragment;}  }
class C{  public static String datasetStats(Map<String,List<double[]>> data,String name){  int globalMinLength=Integer.MAX_VALUE;  int globalMaxLength=Integer.MIN_VALUE;  double globalMinValue=Double.MAX_VALUE;  double globalMaxValue=Double.MIN_VALUE;  for (  Entry<String,List<double[]>> e : data.entrySet()) {    for (    double[] dataEntry : e.getValue()) {      globalMaxLength=(dataEntry.length > globalMaxLength) ? dataEntry.length : globalMaxLength;      globalMinLength=(dataEntry.length < globalMinLength) ? dataEntry.length : globalMinLength;      for (      double value : dataEntry) {        globalMaxValue=(value > globalMaxValue) ? value : globalMaxValue;        globalMinValue=(value < globalMinValue) ? value : globalMinValue;      }    }  }  StringBuffer sb=new StringBuffer();  sb.append(name).append("classes: ").append(data.size());  sb.append(", series length min: ").append(globalMinLength);  sb.append(", max: ").append(globalMaxLength);  sb.append(", min value: ").append(globalMinValue);  sb.append(", max value: ").append(globalMaxValue).append(";");  for (  Entry<String,List<double[]>> e : data.entrySet()) {    sb.append(name).append(" class: ").append(e.getKey());    sb.append(" series: ").append(e.getValue().size()).append(";");  }  return sb.delete(sb.length() - 1,sb.length()).toString();}  }
class C{  public JoinParser(String callID){  super(callID);}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] reverse(T[] self,boolean mutate){  if (!mutate) {    return (T[])toList(new ReverseListIterator<T>(Arrays.asList(self))).toArray();  }  List<T> items=Arrays.asList(self);  Collections.reverse(items);  System.arraycopy(items.toArray(),0,self,0,items.size());  return self;}  }
class C{  protected boolean isDefaultFullDetail(){  return defaultFullDetail;}  }
class C{  public static boolean hasMethod(){  return (Method != null);}  }
class C{  protected void sequence_TFunction(ISerializationContext context,TFunction semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Set<URI> checkForActiveVDCRoleAssignmentsUsingUserGroup(String label){  Set<URI> vdcUsingUserGroup=null;  VirtualDataCenter vdc=VdcUtil.getLocalVdc();  if (vdc == null) {    _log.error("Could not find local VDC");    return vdcUsingUserGroup;  }  if (CollectionUtils.isEmpty(vdc.getRoleAssignments())) {    _log.debug("Role assignments are not configured for vdc {}",vdc.getLabel());    return vdcUsingUserGroup;  }  vdcUsingUserGroup=new HashSet<URI>();  Set<String> roleAssignmentKeys=vdc.getRoleAssignments().keySet();  if (checkUserGroupWithPermissionKeys(label,roleAssignmentKeys)) {    vdcUsingUserGroup.add(vdc.getId());  }  return vdcUsingUserGroup;}  }
class C{  public boolean dequeueContainer(){  if (this.transmissionBuffer == null)   return false;  if (this.indexingTransmissionProcessor.getQueueSize() > this.indexingTransmissionProcessor.getMaxConcurrency())   return false;  String maxtarget=null;  int maxsize=-1;  for (  final Map.Entry<String,Transmission.Chunk> chunk : this.transmissionBuffer.entrySet()) {    if (chunk.getValue().containersSize() > maxsize) {      maxsize=chunk.getValue().containersSize();      maxtarget=chunk.getKey();    }  }  if (maxsize < 0)   return false;  final Transmission.Chunk chunk=this.transmissionBuffer.remove(maxtarget);  this.indexingTransmissionProcessor.enQueue(chunk);  return true;}  }
class C{  public void Done(){  nextCharBuf=null;  buffer=null;  bufline=null;  bufcolumn=null;}  }
class C{  public StreamMetadataResult(String stream,boolean isStreamDeleted,int metastreamVersion,StreamMetadata streamMetadata){  checkArgument(!isNullOrEmpty(stream),"stream");  this.stream=stream;  this.isStreamDeleted=isStreamDeleted;  this.metastreamVersion=metastreamVersion;  this.streamMetadata=streamMetadata;}  }
class C{  public ServletCaller(int responseBufferSize){  mapper=new ObjectMapper();  request=mock(HttpServletRequest.class);  response=mock(HttpServletResponse.class);  when(request.getParameterMap()).thenReturn(paramMap);  when(request.getParameterNames()).thenReturn(Collections.enumeration(paramNames));  outputStream=new BufferServletOutputStream(responseBufferSize);  writer=new PrintWriter(outputStream);  try {    doReturn(writer).when(response).getWriter();    doReturn(outputStream).when(response).getOutputStream();  } catch (  IOException e) {  }}  }
class C{  @Override protected void closeFile(InputStream is) throws IOException {  String fileName=super.currentFile;  if (avroDataStream != null) {    avroDataStream.close();  }  super.closeFile(is);  if (completedFilesPort.isConnected()) {    completedFilesPort.emit(fileName);  }  offset=0;}  }
class C{  public String toLocalizedPattern(){  return ndf.toLocalizedPattern();}  }
class C{  public Matrix4f(float[] v){  this.m00=v[0];  this.m01=v[1];  this.m02=v[2];  this.m03=v[3];  this.m10=v[4];  this.m11=v[5];  this.m12=v[6];  this.m13=v[7];  this.m20=v[8];  this.m21=v[9];  this.m22=v[10];  this.m23=v[11];  this.m30=v[12];  this.m31=v[13];  this.m32=v[14];  this.m33=v[15];}  }
class C{  private static List<ConditionNode> createOperator(final CommonTree ast) throws RecognitionException {  final List<ConditionNode> children=new ArrayList<>();  for (  final Object child : ast.getChildren()) {    children.add(convert((CommonTree)child));  }  return children;}  }
class C{  public void updateParts(Uri uri,PduBody body,HashMap<Uri,InputStream> preOpenedFiles) throws MmsException {  try {    PduCacheEntry cacheEntry;synchronized (PDU_CACHE_INSTANCE) {      if (PDU_CACHE_INSTANCE.isUpdating(uri)) {        if (LOCAL_LOGV)         Log.v(TAG,"updateParts: " + uri + " blocked by isUpdating()");        try {          PDU_CACHE_INSTANCE.wait();        } catch (        InterruptedException e) {          Log.e(TAG,"updateParts: ",e);        }        cacheEntry=PDU_CACHE_INSTANCE.get(uri);        if (cacheEntry != null) {          ((MultimediaMessagePdu)cacheEntry.getPdu()).setBody(body);        }      }      PDU_CACHE_INSTANCE.setUpdating(uri,true);    }    ArrayList<PduPart> toBeCreated=new ArrayList<PduPart>();    HashMap<Uri,PduPart> toBeUpdated=new HashMap<Uri,PduPart>();    int partsNum=body.getPartsNum();    StringBuilder filter=new StringBuilder().append('(');    for (int i=0; i < partsNum; i++) {      PduPart part=body.getPart(i);      Uri partUri=part.getDataUri();      if ((partUri == null) || !partUri.getAuthority().startsWith("mms")) {        toBeCreated.add(part);      } else {        toBeUpdated.put(partUri,part);        if (filter.length() > 1) {          filter.append(" AND ");        }        filter.append("_id");        filter.append("!=");        DatabaseUtils.appendEscapedSQLString(filter,partUri.getLastPathSegment());      }    }    filter.append(')');    long msgId=ContentUris.parseId(uri);    SqliteWrapper.delete(mContext,mContentResolver,Uri.parse(Uri.parse("content://mms") + "/" + msgId+ "/part"),filter.length() > 2 ? filter.toString() : null,null);    for (    PduPart part : toBeCreated) {      persistPart(part,msgId,preOpenedFiles);    }    for (    Entry<Uri,PduPart> e : toBeUpdated.entrySet()) {      updatePart(e.getKey(),e.getValue(),preOpenedFiles);    }  }  finally {synchronized (PDU_CACHE_INSTANCE) {      PDU_CACHE_INSTANCE.setUpdating(uri,false);      PDU_CACHE_INSTANCE.notifyAll();    }  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void putReservedNamespaceURI(String namespaceURI){  if (namespaceURI == null) {    namespaceURI="";  }  if (reservedNamespaceSet == null) {    reservedNamespaceSet=new HashSet();  }  reservedNamespaceSet.add(namespaceURI);}  }
class C{  public String toString(){  return image;}  }
class C{  @Override public boolean equals(Object obj){  final State other=(State)obj;  return is_final == other.is_final && Arrays.equals(this.labels,other.labels) && referenceEquals(this.states,other.states);}  }
class C{  @Override public final boolean accepts(SlingHttpServletRequest request){  return true;}  }
class C{  public static boolean isFieldEmpty(String value){  return value == null || value.isEmpty() || value.replaceAll(UNUSED_POSITION_CODE,"").trim().isEmpty();}  }
class C{  public TObjectHash(){  super();}  }
class C{  public void addPolylineRecord1(EsriLayer layer){  OMGraphicList shapeData=new EsriPolylineList();  double[] part0=new double[]{35.0,-120.0,-25.0,-95.0,56.0,-30.0};  double[] part1=new double[]{-15.0,-110.0,13.0,-80.0,-25.0,10.0};  EsriPolyline poly0=new EsriPolyline(part0,OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB);  EsriPolyline poly1=new EsriPolyline(part1,OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB);  shapeData.add(poly0);  shapeData.add(poly1);  ArrayList tabularData=new ArrayList();  tabularData.add(0,"first value");  tabularData.add(1,new Double(12.54));  layer.addRecord(shapeData,tabularData);}  }
class C{  public void close() throws IOException {  if (inputReader != null) {    inputReader.close();    openCount--;  }}  }
class C{  int atom() throws RESyntaxException {  int ret=node(RE.OP_ATOM,0);  int lenAtom=0;  atomLoop:   while (idx < len) {    if ((idx + 1) < len) {      char c=pattern.charAt(idx + 1);      if (pattern.charAt(idx) == '\\') {        int idxEscape=idx;        escape();        if (idx < len) {          c=pattern.charAt(idx);        }        idx=idxEscape;      }switch (c) {case '{':case '?':case '*':case '+':        if (lenAtom != 0) {          break atomLoop;        }    }  }switch (pattern.charAt(idx)) {case ']':case '^':case '$':case '.':case '[':case '(':case ')':case '|':    break atomLoop;case '{':case '?':case '*':case '+':  if (lenAtom == 0) {    syntaxError("Missing operand to closure");  }break atomLoop;case '\\':{int idxBeforeEscape=idx;int c=escape();if ((c & ESC_MASK) == ESC_MASK) {  idx=idxBeforeEscape;  break atomLoop;}emit((char)c);lenAtom++;}break;default :emit(pattern.charAt(idx++));lenAtom++;break;}}if (lenAtom == 0) {internalError();}instruction[ret + RE.offsetOpdata]=(char)lenAtom;return ret;}  }
class C{  public void resetShipAfterDateIfBefore(Timestamp newShipAfterDate){  if (newShipAfterDate != null) {    if ((this.shipAfterDate == null) || (!this.shipAfterDate.after(newShipAfterDate))) {      this.shipAfterDate=newShipAfterDate;    }  }}  }
class C{  public void startDocument() throws ODataRenderException {  outputStream=new ByteArrayOutputStream();  try {    xmlWriter=xmlOutputFactory.createXMLStreamWriter(outputStream,UTF_8.name());    xmlWriter.writeStartDocument(UTF_8.name(),XML_VERSION);    xmlWriter.setPrefix(METADATA,ODATA_METADATA_NS);  } catch (  XMLStreamException e) {    LOG.error("Not possible to start stream XML");    throw new ODataRenderException("Not possible to start stream XML: ",e);  }}  }
class C{  public Mnemonic(String description,int wordcase){  this.description=description;  this.wordcase=wordcase;  strings=new HashMap();  values=new HashMap();  max=Integer.MAX_VALUE;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  transformer.pushCurrentTemplateRuleIsNull(false);  boolean pushMode=false;  try {    QName mode=transformer.getMode();    if (!m_isDefaultTemplate) {      if (((null == mode) && (null != m_mode)) || ((null != mode) && !mode.equals(m_mode))) {        pushMode=true;        transformer.pushMode(m_mode);      }    }    transformSelectedNodes(transformer);  }  finally {    if (pushMode)     transformer.popMode();    transformer.popCurrentTemplateRuleIsNull();  }}  }
class C{  public <T extends B>MinMaxPriorityQueue<T> create(Iterable<? extends T> initialContents){  MinMaxPriorityQueue<T> queue=new MinMaxPriorityQueue<T>(this,initialQueueSize(expectedSize,maximumSize,initialContents));  for (  T element : initialContents) {    queue.offer(element);  }  return queue;}  }
class C{  public double nextDouble(double degreesOfFreedom){  if (degreesOfFreedom <= 0.0)   throw new IllegalArgumentException();  double u, v, w;  do {    u=2.0 * randomGenerator.raw() - 1.0;    v=2.0 * randomGenerator.raw() - 1.0;  } while ((w=u * u + v * v) > 1.0);  return (u * Math.sqrt(degreesOfFreedom * (Math.exp(-2.0 / degreesOfFreedom * Math.log(w)) - 1.0) / w));}  }
class C{  public void textChanged(String text) throws DOMException {  declaration=cssEngine.parseStyleDeclaration(SVGStylableElement.this,text);  mutate=true;  setAttributeNS(null,SVG_STYLE_ATTRIBUTE,text);  mutate=false;}  }
class C{  public boolean isMarried(){  return false;}  }
class C{  public StringBand append(int i){  return append(Integer.toString(i));}  }
class C{  public List<List<ClusterNode>> prevAssignment(){  return prevAssignment;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return USERID;case 2:  return PASSWD;default :return null;}}  }
class C{  @HLEFunction(nid=0xC68D9437,version=150) public int sceKernelStartVTimer(@CheckArgument("checkVTimerID") int vtimerUid){  SceKernelVTimerInfo sceKernelVTimerInfo=vtimers.get(vtimerUid);  if (sceKernelVTimerInfo.active == SceKernelVTimerInfo.ACTIVE_RUNNING) {    return 1;  }  startVTimer(sceKernelVTimerInfo);  return 0;}  }
class C{  public ExecutionEntryItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static boolean cs_qrsol(int order,Scs A,float[] b){  float x[];  Scss S;  Scsn N;  Scs AT=null;  int k, m, n;  boolean ok;  if (!Scs_util.CS_CSC(A) || b == null)   return (false);  n=A.n;  m=A.m;  if (m >= n) {    S=Scs_sqr.cs_sqr(order,A,true);    N=Scs_qr.cs_qr(A,S);    x=new float[S != null ? S.m2 : 1];    ok=(S != null && N != null);    if (ok) {      Scs_ipvec.cs_ipvec(S.pinv,b,x,m);      for (k=0; k < n; k++) {        Scs_happly.cs_happly(N.L,k,N.B[k],x);      }      Scs_usolve.cs_usolve(N.U,x);      Scs_ipvec.cs_ipvec(S.q,x,b,n);    }  } else {    AT=Scs_transpose.cs_transpose(A,true);    S=Scs_sqr.cs_sqr(order,AT,true);    N=Scs_qr.cs_qr(AT,S);    x=new float[S != null ? S.m2 : 1];    ok=(AT != null && S != null && N != null);    if (ok) {      Scs_pvec.cs_pvec(S.q,b,x,m);      Scs_utsolve.cs_utsolve(N.U,x);      for (k=m - 1; k >= 0; k--) {        Scs_happly.cs_happly(N.L,k,N.B[k],x);      }      Scs_pvec.cs_pvec(S.pinv,x,b,n);    }  }  return (ok);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"loop");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not a loop instruction (invalid number of operand)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  final List<? extends IOperandTree> operands=instruction.getOperands();  final OperandSize archSize=environment.getArchitectureSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(archSize);  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));  final String loopTarget=Helpers.getLeafValue(operands.get(0).getRootNode());  final String tempEcx=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(baseOffset,archSize,"ecx",archSize,"1",archSize,tempEcx));  instructions.add(ReilHelpers.createAnd(baseOffset + 1,resultSize,tempEcx,archSize,truncateMask,archSize,"ecx"));  instructions.add(ReilHelpers.createJcc(baseOffset + 2,archSize,"ecx",archSize,loopTarget));}  }
class C{  @Override public void updateCharacterStream(int columnIndex,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateCharacterStream(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void log(Throwable e){  log(new Status(IStatus.ERROR,getUniqueIdentifier(),IStatus.ERROR,e.getMessage(),e));}  }
class C{  public void writer(RecordWriter writer){  this.writer=writer;}  }
class C{  public void deleteButtonActionPerformed(){  javax.swing.JOptionPane.showMessageDialog(this,rb.getString("NotSupported1") + "\n" + rb.getString("NotSupported2"),rb.getString("NotSupportedTitle"),javax.swing.JOptionPane.INFORMATION_MESSAGE);  resetNotes();  return;}  }
class C{  public static String waitForOutput(List<String> output){  if (!output.isEmpty()) {    String response=output.get(output.size() - 1);    output.clear();    return response;  }synchronized (output) {    try {      output.wait(100000);    } catch (    InterruptedException exception) {    }  }  if (output.isEmpty()) {    fail("No response.");  }  String response=output.get(output.size() - 1);  output.clear();  return response;}  }
class C{  void dispatchOnLauncherTransitionStep(View v,float t){  if (v instanceof LauncherTransitionable) {    ((LauncherTransitionable)v).onLauncherTransitionStep(mLauncher,t);  }}  }
class C{  protected void buildRoles(ApplicationUser applicationUser,Map<String,String> httpHeaders,String headerName){  Set<String> roles=new HashSet<>();  applicationUser.setRoles(roles);  String rolesHeaderValue=getHeaderValueString(headerName,httpHeaders);  if (rolesHeaderValue != null) {    parseRoles(rolesHeaderValue,roles);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ProtocolException(){  super();}  }
class C{  public void addEntry(String entry) throws IOException {  pkt.writeUTF(entry);}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public Object unmarshal(final String xml) throws XMLException {  Object readObject=null;  try {    readObject=unmarshaller.unmarshal(new StreamSource(xml));    if (readObject instanceof JAXBElement) {      readObject=((JAXBElement)readObject).getValue();    }  } catch (  JAXBException e) {    throw new XMLException("Cannot read the XML ",e);  }catch (  IllegalArgumentException e) {    throw new XMLException("Cannot read the XML ",e);  }  return readObject;}  }
class C{  public PotentialProducer createPotentialProducer(Object baseObject,String methodName,Class<?> dataType,Class<?>[] argDataTypes,Object[] argValues){  String description=getDescriptionString(baseObject,methodName,dataType);  return new PotentialProducer(parentComponent,baseObject,methodName,dataType,argDataTypes,argValues,description);}  }
class C{  private static double sumOfSamplesInSketch(HeapDoublesSketch sketch){  double[] combinedBuffer=sketch.getCombinedBuffer();  int bbCount=sketch.getBaseBufferCount();  double total=sumOfDoublesInSubArray(combinedBuffer,0,bbCount);  long bits=sketch.getBitPattern();  int k=sketch.getK();  assert bits == sketch.getN() / (2L * k);  for (int lvl=0; bits != 0L; lvl++, bits>>>=1) {    if ((bits & 1L) > 0L) {      total+=sumOfDoublesInSubArray(combinedBuffer,((2 + lvl) * k),k);    }  }  return total;}  }
class C{  public CSVRow addRow(){  CSVRow row=new CSVRow();  row.setRowNumber(rows.size());  rows.add(row);  return row;}  }
class C{  public String encode(){  String retval=headerName + COLON;  if (optionTag != null)   retval+=SP + optionTag;  retval+=NEWLINE;  return retval;}  }
class C{  public static DumpData toDumpData(Node node,PageContext pageContext,int maxlevel,DumpProperties props){  if (maxlevel <= 0) {    return DumpUtil.MAX_LEVEL_REACHED;  }  maxlevel--;  if (node instanceof Document) {    DumpTable table=new DumpTable("xml","#cc9999","#ffffff","#000000");    table.setTitle("XML Document");    table.appendRow(1,new SimpleDumpData("XmlComment"),new SimpleDumpData(XMLUtil.getProperty(node,XMLUtil.XMLCOMMENT,null).toString()));    table.appendRow(1,new SimpleDumpData("XmlRoot"),DumpUtil.toDumpData(XMLUtil.getProperty(node,XMLUtil.XMLROOT,null),pageContext,maxlevel,props));    return table;  }  if (node instanceof Element) {    DumpTable table=new DumpTable("xml","#cc9999","#ffffff","#000000");    table.setTitle("XML Element");    table.appendRow(1,new SimpleDumpData("xmlName"),new SimpleDumpData(XMLUtil.getProperty(node,XMLUtil.XMLNAME,null).toString()));    table.appendRow(1,new SimpleDumpData("XmlNsPrefix"),new SimpleDumpData(XMLUtil.getProperty(node,XMLUtil.XMLNSPREFIX,null).toString()));    table.appendRow(1,new SimpleDumpData("XmlNsURI"),new SimpleDumpData(XMLUtil.getProperty(node,XMLUtil.XMLNSURI,null).toString()));    table.appendRow(1,new SimpleDumpData("XmlText"),DumpUtil.toDumpData(XMLUtil.getProperty(node,XMLUtil.XMLTEXT,null),pageContext,maxlevel,props));    table.appendRow(1,new SimpleDumpData("XmlComment"),new SimpleDumpData(XMLUtil.getProperty(node,XMLUtil.XMLCOMMENT,null).toString()));    table.appendRow(1,new SimpleDumpData("XmlAttributes"),DumpUtil.toDumpData(XMLUtil.getProperty(node,XMLUtil.XMLATTRIBUTES,null),pageContext,maxlevel,props));    table.appendRow(1,new SimpleDumpData("XmlChildren"),DumpUtil.toDumpData(XMLUtil.getProperty(node,XMLUtil.XMLCHILDREN,null),pageContext,maxlevel,props));    return table;  }  if (node instanceof Text) {    DumpTable table=new DumpTable("xml","#cc9999","#ffffff","#000000");    table.setTitle("XML Text");    Text txt=(Text)node;    table.appendRow(1,new SimpleDumpData("XmlText"),new SimpleDumpData(txt.getData()));    return table;  }  if (node instanceof Attr) {    DumpTable table=new DumpTable("xml","#cc9999","#ffffff","#000000");    table.setTitle("XML Attr");    table.appendRow(1,new SimpleDumpData("xmlName"),new SimpleDumpData(XMLUtil.getProperty(node,XMLUtil.XMLNAME,null).toString()));    table.appendRow(1,new SimpleDumpData("XmlValue"),DumpUtil.toDumpData(((Attr)node).getValue(),pageContext,maxlevel,props));    table.appendRow(1,new SimpleDumpData("XmlType"),new SimpleDumpData(XMLUtil.getTypeAsString(node,true)));    return table;  }  DumpTable table=new DumpTable("xml","#cc9999","#ffffff","#000000");  table.setTitle("XML Node (" + ListLast.call(null,node.getClass().getName(),".") + ")");  table.appendRow(1,new SimpleDumpData("xmlName"),new SimpleDumpData(XMLUtil.getProperty(node,XMLUtil.XMLNAME,null).toString()));  table.appendRow(1,new SimpleDumpData("XmlNsPrefix"),new SimpleDumpData(XMLUtil.getProperty(node,XMLUtil.XMLNSPREFIX,null).toString()));  table.appendRow(1,new SimpleDumpData("XmlNsURI"),new SimpleDumpData(XMLUtil.getProperty(node,XMLUtil.XMLNSURI,null).toString()));  table.appendRow(1,new SimpleDumpData("XmlText"),DumpUtil.toDumpData(XMLUtil.getProperty(node,XMLUtil.XMLTEXT,null),pageContext,maxlevel,props));  table.appendRow(1,new SimpleDumpData("XmlComment"),new SimpleDumpData(XMLUtil.getProperty(node,XMLUtil.XMLCOMMENT,null).toString()));  table.appendRow(1,new SimpleDumpData("XmlAttributes"),DumpUtil.toDumpData(XMLUtil.getProperty(node,XMLUtil.XMLATTRIBUTES,null),pageContext,maxlevel,props));  table.appendRow(1,new SimpleDumpData("XmlChildren"),DumpUtil.toDumpData(XMLUtil.getProperty(node,XMLUtil.XMLCHILDREN,null),pageContext,maxlevel,props));  table.appendRow(1,new SimpleDumpData("XmlType"),new SimpleDumpData(XMLUtil.getTypeAsString(node,true)));  return table;}  }
class C{  public static void startDialActivity(Context context,String phone){  Intent intent=new Intent(Intent.ACTION_DIAL);  intent.setData(Uri.parse("tel:" + clearPhoneText(phone)));  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public byte[] generateSignature() throws CryptoException, DataLengthException {  contentDigest.doFinal(mDash,mDash.length - hLen - sLen);  if (sLen != 0) {    random.nextBytes(salt);    System.arraycopy(salt,0,mDash,mDash.length - sLen,sLen);  }  byte[] h=new byte[hLen];  contentDigest.update(mDash,0,mDash.length);  contentDigest.doFinal(h,0);  block[block.length - sLen - 1- hLen- 1]=0x01;  System.arraycopy(salt,0,block,block.length - sLen - hLen- 1,sLen);  byte[] dbMask=maskGeneratorFunction1(h,0,h.length,block.length - hLen - 1);  for (int i=0; i != dbMask.length; i++) {    block[i]^=dbMask[i];  }  block[0]&=(0xff >> ((block.length * 8) - emBits));  System.arraycopy(h,0,block,block.length - hLen - 1,hLen);  block[block.length - 1]=trailer;  byte[] b=cipher.processBlock(block,0,block.length);  clearBlock(block);  return b;}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw this.syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  private static void createDatabaseInternal(final Window parent,final CDatabaseConfiguration configuration){  final String databaseName=configuration.getName();  try {    CDatabaseConnector.initialize(configuration);    CMessageBox.showInformation(parent,String.format("The database '%s' was created successfully.",databaseName));  } catch (  final CouldntLoadDriverException exception) {    final String message="E00047: " + "Database driver could not be loaded";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not create a database connection because " + "the database driver '%s' could not be loaded",configuration.getDriver()),new String[]{"The database driver string is wrong.","The database driver file could not be found."},new String[]{"BinNavi can not load data from the given database until " + "the problem is resolved."});    NaviErrorDialog.show(parent,message,description,exception);  }catch (  final CouldntConnectException exception) {    if (exception.getSqlState().equalsIgnoreCase(PostgreSQLErrorCodes.INVALID_PASSWORD)) {      CMessageBox.showInformation(parent,String.format("The password for user '%s' on database '%s' is invalid",configuration.getUser(),configuration.getUrl()));      return;    }    final String message="E00048: " + "Database connection could not be established";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not connect to the database '%s'",configuration.getUrl()),new String[]{exception.getMessage()},new String[]{"BinNavi can not load data from the given database until the " + "problem is resolved."});    NaviErrorDialog.show(parent,message,description,exception);  }catch (  final SQLException exception) {    final String message="E00049: " + "Database could not be created";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not create the database '%s'",databaseName),new String[]{exception.getMessage()},new String[]{"There was a problem with the database connection.","The database was not created. Please try creating the database again or " + "create it manually if necessary."});    NaviErrorDialog.show(parent,message,description,exception);  }}  }
class C{  public DD pow(int exp){  if (exp == 0.0)   return valueOf(1.0);  DD r=new DD(this);  DD s=valueOf(1.0);  int n=Math.abs(exp);  if (n > 1) {    while (n > 0) {      if (n % 2 == 1) {        s.selfMultiply(r);      }      n/=2;      if (n > 0)       r=r.sqr();    }  } else {    s=r;  }  if (exp < 0)   return s.reciprocal();  return s;}  }
class C{  private void registerMBean(){  mbean=new SessionStatistics();  try {    InitialContext ctx=new InitialContext();    MBeanServer mbs=MBeanServer.class.cast(ctx.lookup("java:comp/env/jmx/runtime"));    ObjectName oname=new ObjectName(Constants.SESSION_STATISTICS_MBEAN_NAME);    mbs.registerMBean(mbean,oname);  } catch (  Exception ex) {    LOG.warn("Unable to register statistics MBean. Error: {}",ex.getMessage());  }}  }
class C{  public void init() throws ServletException {}  }
class C{  @Override public int hashCode(){  return getPath().hashCode();}  }
class C{  public static ModifiableDBIDs union(DBIDs ids1,DBIDs ids2){  ModifiableDBIDs result=DBIDUtil.newHashSet(Math.max(ids1.size(),ids2.size()));  result.addDBIDs(ids1);  result.addDBIDs(ids2);  return result;}  }
class C{  public Builder facing(Facing facing){  criteria.facing=facing;  return (this);}  }
class C{  @Override public BackgroundMusicSource create(final ConfigurableFactoryContext ctx){  BackgroundMusicSource source;  source=new BackgroundMusicSource(getSound(ctx),getRadius(ctx),getVolume(ctx));  return source;}  }
class C{  protected void zoom(){  log.info("");  int selected=miniTable.getSelectedRow();  if (selected == -1)   return;  int factId=((IDColumn)miniTable.getModel().getValueAt(selected,idColIndex)).getRecord_ID();  AEnv.zoom(270,factId);}  }
class C{  @Override protected void resetEditorFrom(DLangRunAppConfiguration config){  comboModule.fillModules(config.getProject(),DLangModuleType.getInstance());  comboModule.setSelectedModule(config.getConfigurationModule().getModule());  pathWorkingDir.setText(config.getWorkDir());  textParameters.setText(config.getAdditionalParams());  Map<String,String> envVars=config.getEnvVars();  if (envVars != null) {    envVariables.setEnvs(config.getEnvVars());  }  appPathLabel.setText(config.getExecutablePath());}  }
class C{  public DataPoint clone(){  return new DataPoint(numericalValues.clone(),Arrays.copyOf(categoricalValues,categoricalValues.length),CategoricalData.copyOf(categoricalData),weight);}  }
class C{  public K weakHandler(Object handler,String callback){  this.whandler=new WeakReference<Object>(handler);  this.callback=callback;  this.handler=null;  return self();}  }
class C{  public TaskList createHostArrayAffinityTasks(List<URI> hostIds){  TaskList taskList=new TaskList();  String taskId=UUID.randomUUID().toString();  String jobType="";  Map<URI,List<URI>> providerToSystemsMap=new HashMap<URI,List<URI>>();  Map<URI,String> providerToSystemTypeMap=new HashMap<URI,String>();  List<URI> sysURIs=_dbClient.queryByType(StorageSystem.class,true);  Iterator<StorageSystem> storageSystems=_dbClient.queryIterativeObjects(StorageSystem.class,sysURIs);  while (storageSystems.hasNext()) {    StorageSystem systemObj=storageSystems.next();    if (systemObj == null) {      _log.warn("StorageSystem is no longer in the DB. It could have been deleted or decommissioned");      continue;    }    if (systemObj.deviceIsType(Type.vmax) || systemObj.deviceIsType(Type.vnxblock) || systemObj.deviceIsType(Type.xtremio)) {      if (systemObj.getActiveProviderURI() == null || NullColumnValueGetter.getNullURI().equals(systemObj.getActiveProviderURI())) {        _log.info("Skipping {} Job : StorageSystem {} does not have an active provider",jobType,systemObj.getLabel());        continue;      }      StorageProvider provider=_dbClient.queryObject(StorageProvider.class,systemObj.getActiveProviderURI());      if (provider == null || provider.getInactive()) {        _log.info("Skipping {} Job : StorageSystem {} does not have a valid active provider",jobType,systemObj.getLabel());        continue;      }      List<URI> systemIds=providerToSystemsMap.get(provider.getId());      if (systemIds == null) {        systemIds=new ArrayList<URI>();        providerToSystemsMap.put(provider.getId(),systemIds);        providerToSystemTypeMap.put(provider.getId(),systemObj.getSystemType());      }      systemIds.add(systemObj.getId());    } else     if (systemObj.deviceIsType(Type.unity)) {      List<URI> systemIds=new ArrayList<URI>();      systemIds.add(systemObj.getId());      providerToSystemsMap.put(systemObj.getId(),systemIds);      providerToSystemTypeMap.put(systemObj.getId(),systemObj.getSystemType());    } else {      _log.info("Skip unsupported system {}, system type {}",systemObj.getLabel(),systemObj.getSystemType());      continue;    }  }  for (  Map.Entry<URI,List<URI>> entry : providerToSystemsMap.entrySet()) {    List<URI> systemIds=entry.getValue();    BlockController controller=getController(BlockController.class,providerToSystemTypeMap.get(entry.getKey()));    DiscoveredObjectTaskScheduler scheduler=new DiscoveredObjectTaskScheduler(_dbClient,new StorageSystemService.ArrayAffinityJobExec(controller));    ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>();    tasks.add(new ArrayAffinityAsyncTask(StorageSystem.class,systemIds,hostIds,taskId));    taskList.getTaskList().addAll(scheduler.scheduleAsyncTasks(tasks).getTaskList());  }  return taskList;}  }
class C{  synchronized void deliverRoleReply(long xid,OFControllerRole role){  log.debug("DELIVERING ROLE REPLY {}",role.toString());  if (!requestPending) {    String msg=String.format("Switch: [%s], State: [%s], " + "received unexpected RoleReply[%s]. " + "No roles are pending",OFSwitchHandshakeHandler.this.getSwitchInfoString(),OFSwitchHandshakeHandler.this.state.toString(),role);    throw new SwitchStateException(msg);  }  if (pendingXid == xid && pendingRole == role) {    log.debug("[{}] Received role reply message setting role to {}",getDpid(),role);    switchManagerCounters.roleReplyReceived.increment();    setSwitchRole(role,RoleRecvStatus.RECEIVED_REPLY);  } else {    log.debug("[{}] Received stale or unexpected role reply " + "{}, xid={}. Ignoring. " + "Waiting for {}, xid={}",new Object[]{getDpid(),role,xid,pendingRole,pendingXid});  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforenewchildexists.class,args);}  }
class C{  public synchronized void write(int b) throws IOException {  out.write(b);  written++;}  }
class C{  public void addSpecialButton(String key,Command cmd){  addSpecialButton(key,cmd,-1);}  }
class C{  private long hash(final double[] a,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + Double.doubleToRawLongBits(a[i]) * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  private static List<String> parseMultiLineInput(String string){  List<String> result=null;  if ((string == null) || (string.isEmpty())) {    result=Collections.EMPTY_LIST;  } else   if ((StringUtils.isNotEmpty(string)) && StringUtils.contains(string,'\n')) {    result=parseMultiLineString(string);  } else {    List<String> single=new ArrayList();    single.add(0,string);    result=single;  }  return result;}  }
class C{  static public void assertSame(Object expected,Object actual){  assertSame(null,expected,actual);}  }
class C{  protected boolean haveSharedCellsRaw(DoubleMatrix1D other){  if (other instanceof SelectedDenseDoubleMatrix1D) {    SelectedDenseDoubleMatrix1D otherMatrix=(SelectedDenseDoubleMatrix1D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof DenseDoubleMatrix1D) {    DenseDoubleMatrix1D otherMatrix=(DenseDoubleMatrix1D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  private void resolveFunctions(){  final Object selectedParentString=m_parentBox.getSelectedItem();  if (selectedParentString == null) {    return;  }  final Object selectedModule=m_targetModuleBox.getSelectedItem();  if (selectedModule == null) {    return;  }  final INaviModule targetModule=((CModuleWrapper)selectedModule).getObject();  if (!targetModule.isLoaded()) {    if (CMessageBox.showYesNoQuestion(this,"The target module must be loaded before functions can be forwarded.\n\n" + "Do you want to load the target module now?") == JOptionPane.NO_OPTION) {      return;    }    CModuleLoader.loadModule(this,targetModule);  }  int counter=0;  final String parentString=selectedParentString.toString();  for (  final INaviFunction sourceFunction : m_module.getContent().getFunctionContainer().getFunctions()) {    if (sourceFunction.getOriginalModulename().equalsIgnoreCase(parentString) && CFunctionHelpers.isForwardableFunction(sourceFunction)) {      String sourceFunctionName=sourceFunction.getName();      if (sourceFunctionName.startsWith("__imp_")) {        sourceFunctionName=sourceFunctionName.substring("__imp_".length());      }      try {        final INaviFunction targetFunction=targetModule.getContent().getFunctionContainer().getFunction(sourceFunctionName);        sourceFunction.setForwardedFunction(targetFunction);        ++counter;      } catch (      final MaybeNullException exception) {      }catch (      final CouldntSaveDataException exception) {        CUtilityFunctions.logException(exception);        final String message="E00023: " + "Could not save function forwarding";        final String description=CUtilityFunctions.createDescription(String.format("Could not forward the function '%s' from module '%s' to module '%s'",sourceFunction.getName(),m_module.getConfiguration().getName(),targetModule.getConfiguration().getName()),new String[]{"The database connection was dropped while saving."},new String[]{"The changes in function forwarding were not saved. Try saving function " + "forwarding again. If necessary, close the connection to the database and " + "reconnect."});        NaviErrorDialog.show(this,message,description,exception);      }    }  }  if (counter == 0) {    CMessageBox.showInformation(this,"No functions suitable for forwarding were found.");  } else {    CMessageBox.showInformation(this,String.format("%d functions were forwarded from module '%s' to module '%s'",counter,m_module.getConfiguration().getName(),targetModule.getConfiguration().getName()));  }}  }
class C{  public void test_setCharLjava_lang_ObjectC() throws Exception {  TestField x=new TestField();  Field f=null;  char val=0;  try {    f=x.getClass().getDeclaredField("charField");    f.setChar(x,(char)1);    val=f.getChar(x);  } catch (  Exception e) {    fail("Exception during setChar test : " + e.getMessage());  }  assertEquals("Returned incorrect float field value",1,val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setChar(x,Character.MIN_VALUE);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("charPFField");    assertFalse(f.isAccessible());    f.setChar(x,Character.MIN_VALUE);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("charField");    f.setChar(null,Character.MIN_VALUE);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("charSField");  f.setChar(null,Character.MIN_VALUE);  val=f.getChar(x);  assertEquals("Returned incorrect char field value",Character.MIN_VALUE,val);}  }
class C{  public void readOsm(){  try {    if (reader.nextTag() == XMLStreamConstants.START_ELEMENT && reader.getLocalName().equals("osm")) {      String fileVersion;      fileVersion=reader.getAttributeValue(null,ATTRIBUTE_NAME_VERSION);      if (!XmlConstants.OSM_VERSION.equals(fileVersion)) {        LOG.warning("Expected version " + XmlConstants.OSM_VERSION + " but received "+ fileVersion+ ".");      }      reader.nextTag();      if (reader.getEventType() == XMLStreamConstants.START_ELEMENT && reader.getLocalName().equals(ELEMENT_NAME_BOUND)) {        sink.process(new BoundContainer(readBound()));      }      while (reader.getEventType() == XMLStreamConstants.START_ELEMENT) {        if (reader.getLocalName().equals(ELEMENT_NAME_NODE)) {          sink.process(new NodeContainer(readNode()));        } else         if (reader.getLocalName().equals(ELEMENT_NAME_WAY)) {          sink.process(new WayContainer(readWay()));        } else         if (reader.getLocalName().equals(ELEMENT_NAME_RELATION)) {          sink.process(new RelationContainer(readRelation()));        } else {          readUnknownElement();        }      }    } else {      throw new XMLStreamException();    }  } catch (  Exception e) {    throw new OsmosisRuntimeException(e);  }}  }
class C{  private Match checkMatch(final String argName,final Argument arg,final String[] params){  for (  String form : arg.getForms()) {    if (form.equals(argName) && arg.getParameterCount() == params.length) {      return new Match(arg,form,params);    }  }  return null;}  }
class C{  public double nextDouble(double least,double bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextDouble() * (bound - least) + least;}  }
class C{  public static TempCharBuffer allocate(){  TempCharBuffer next=_freeList.allocate();  if (next == null)   return new TempCharBuffer(SIZE);  next._next=null;  next._offset=0;  next._length=0;  next._bufferCount=0;  return next;}  }
class C{  private void swim(int k){  while (k > 1 && less(k / 2,k)) {    exch(k,k / 2);    k=k / 2;  }}  }
class C{  @Override public void resetWatcherTriggers(){  device.resetWatcherTriggers();}  }
class C{  public boolean isLineWithinLoop(int line){  ITreeNode node=editor.getRootNode();  if (node != null) {    if (line > 0) {      TreeNodeLineVisitor visitor=new TreeNodeLineVisitor(line);      node.accept(visitor);      node=visitor.getNode();      while (node != null) {        if (node instanceof Directive) {          Directive directive=(Directive)node;          if (directive.getType() == Directive.TYPE_FOREACH) {            return true;          }        }        node=(ITreeNode)node.getParent();      }    }  }  return false;}  }
class C{  private LocalDate zGetParentSelectedDate(){  if (!hasParent()) {    return null;  }  boolean useDatePicker=(parentDatePicker != null);  return (useDatePicker) ? parentDatePicker.getDate() : parentCalendarPanel.getSelectedDate();}  }
class C{  public TBase<?,?> args(){  return args;}  }
class C{  public AudioTrack createAudio(VideoEditor videoEditor,String audioTrackId,String filename){  AudioTrack audio=null;  try {    audio=new AudioTrack(videoEditor,audioTrackId,filename);    assertNotNull("Cant not create an object of an  AudioTrack " + audioTrackId,audio);  } catch (  IllegalArgumentException e) {    assertTrue("Can not create object of an AudioTrack " + audioTrackId + " Issue = "+ e.toString(),false);  }catch (  IOException e) {    assertTrue("Can not create object of an AudioTrack " + audioTrackId + " Issue = "+ e.toString(),false);  }  return audio;}  }
class C{  @Override public boolean transactAgreedDeal(ItemParserResult res,final EventRaiser seller,final Player player){  final String outfitType=res.getChosenItemName();  if (!player.getOutfit().isCompatibleWithClothes()) {    seller.say("You already have a magic outfit on which just wouldn't look good with another - could you please put yourself in something more conventional and ask again? Thanks!");    return false;  }  int charge=getCharge(res,player);  if (player.isEquipped("money",charge)) {    player.drop("money",charge);    putOnOutfit(player,outfitType);    return true;  } else {    seller.say("Sorry, you don't have enough money!");    return false;  }}  }
class C{  private static int createDoc(AxDochEntity axDochEntity,Integer bookId,Integer folderId,int docID,Integer userId,Timestamp timestamp,String name,String entidad) throws SQLException, Exception {  if (docID == -1) {    docID=DBEntityDAOFactory.getCurrentDBEntityDAO().getNextDocID(bookId,entidad);    AxPKById docPk=new AxPKById(bookId.toString(),folderId.intValue(),docID);    axDochEntity.create(docPk,userId.intValue(),name,timestamp,entidad);    if (log.isDebugEnabled()) {      log.debug("docID creado => " + docID);    }  }  return docID;}  }
class C{  static MediaType createImageType(String subtype){  return create(IMAGE_TYPE,subtype);}  }
class C{  public DocumentConversion(String versionDate,String username,String password){  this(versionDate);  setUsernameAndPassword(username,password);}  }
class C{  public void reset(){  buffer.clear();}  }
class C{  public static float max(float x,float y){  return (x >= y) ? x : y;}  }
class C{  public Introspector(RuntimeLogger logger){  this.rlog=logger;}  }
class C{  public SpreadsheetEntry(BaseEntry sourceEntry){  super(sourceEntry);}  }
class C{  @Override public void start() throws Exception {  startLoading();  block(true);}  }
class C{  private void initialize(){  this.setText(Constant.messages.getString("edit.find.popup"));}  }
class C{  public static int ENOBUFS(){  return Errno.ENOBUFS.intValue();}  }
class C{  public synchronized void onFailure(){  currentFailureCount++;  if (currentFailureCount > maxFailureCount) {    currentFailureCount=maxFailureCount;  }}  }
class C{  public static <T>int binarySearchFloor(List<? extends Comparable<? super T>> list,T key,boolean inclusive,boolean stayInBounds){  int index=Collections.binarySearch(list,key);  index=index < 0 ? -(index + 2) : (inclusive ? index : (index - 1));  return stayInBounds ? Math.max(0,index) : index;}  }
class C{  public static CInstruction createInstruction(final InstructionLine line,final SQLProvider provider){  final ArrayList<COperandTree> operands=new ArrayList<COperandTree>();  final INaviModule module=line.getModule();  for (  final OperandTree rawTree : line.getOperands()) {    operands.add(generateTree(rawTree,provider,module));  }  final IAddress address=line.getAddress();  final String mnemonic=line.getMnemonic();  final String architecture=line.getArchitecture();  final CInstruction instruction=new CInstruction(true,module,address,mnemonic,operands,line.getData(),architecture,provider);  return instruction;}  }
class C{  private void internalWrite(byte[] b,int off,int len,boolean finish) throws IOException {  coder.output=embiggen(coder.output,coder.maxOutputSize(len));  if (!coder.process(b,off,len,finish)) {    throw new Base64DataException("bad base-64");  }  out.write(coder.output,0,coder.op);}  }
class C{  public Feature(long id){  this.id=id;}  }
class C{  public synchronized void put(int taskId,ReplDBMSEvent event) throws InterruptedException, ReplicatorException {  boolean needsSync=false;  if (logger.isDebugEnabled()) {    logger.debug("Received event: seqno=" + event.getSeqno() + " fragno="+ event.getFragno()+ " lastFrag="+ event.getLastFrag()+ " shardId="+ event.getShardId());  }  if (event.getLastFrag())   transactionCount++;  DBMSEvent dbmsEvent=event.getDBMSEvent();  if (dbmsEvent == null | dbmsEvent instanceof DBMSEmptyEvent || (event.getFragno() == 0 && event.getLastFrag() && dbmsEvent.getData().size() == 0)) {    discardCount++;    return;  }  PartitionerResponse response=partitioner.partition(event,taskId);  if (logger.isDebugEnabled()) {    logger.debug("Assigning event to partition: seqno=" + event.getSeqno() + " partition="+ response.getPartition()+ " critical="+ response.isCritical());  }  if (response.isCritical() && (criticalPartition != response.getPartition())) {    serializationCount++;    blockToZero();    criticalPartition=response.getPartition();    if (logger.isDebugEnabled()) {      logger.debug("Enabling critical partition: partition=" + criticalPartition + " seqno="+ event.getSeqno());    }  } else   if (!response.isCritical() && criticalPartition >= 0) {    blockToZero();    criticalPartition=-1;    if (logger.isDebugEnabled()) {      logger.debug("Ending critical partition: seqno=" + event.getSeqno());    }  }  if (event.getFragno() == 0) {    long lastTimestampMillis=event.getExtractedTstamp().getTime();    if (logger.isDebugEnabled()) {      logger.debug("Ensuring threads meet min offline wait: event timestamp=" + lastTimestampMillis + " low seqno="+ intervalGuard.getLowSeqno()+ " low time="+ intervalGuard.getLowTime()+ " high time="+ intervalGuard.getHiTime());    }    long waitStartMillis=System.currentTimeMillis();    while (true) {      long lowSeqnoMillis=intervalGuard.getLowTime();      if (lowSeqnoMillis == -1) {        if (logger.isDebugEnabled())         logger.debug("Proceeding as interval array is empty");        break;      }      long interval=lastTimestampMillis - lowSeqnoMillis;      if (interval <= maxOfflineMillis) {        if (logger.isDebugEnabled())         logger.debug("Proceeding after interval reaches 0");        break;      }      Thread.sleep(100);      long currentTimeMillis=System.currentTimeMillis();      long delayMillis=currentTimeMillis - waitStartMillis;      if (delayMillis > maxDelayMillis || currentTimeMillis < waitStartMillis) {        logger.info("Releasing event to parallel queue after delay interval expired; if this message appears commonly you should consider increasing maxOfflineInterval: seqno=" + event.getSeqno() + " timestamp="+ event.getExtractedTstamp()+ " maxDelayInterval="+ maxDelayInterval+ " maxOfflineInterval="+ maxOfflineInterval);        logger.info("Diagnostic information on interval guard: [" + intervalGuard.toString() + "]");        break;      }    }  }  activeSize.incrAndGetSeqno();  headSeqnoCounter.setSeqno(event.getSeqno());  if (logger.isDebugEnabled()) {    logger.debug("Updating position: headSeqnoCounter=" + headSeqnoCounter.getSeqno() + " activeSize="+ activeSize.getSeqno());  }  lastInsertedEvent=event;  if (event.getLastFrag() && stopRequested) {    putControlEvent(ReplControlEvent.STOP,event);    stopRequested=false;    if (logger.isDebugEnabled()) {      logger.debug("Added stop control event after log event: seqno=" + event.getSeqno());    }  }  if (event.getDBMSEvent().getMetadataOptionValue(ReplOptionParams.HEARTBEAT) != null) {    needsSync=true;  }  if (needsSync) {    putControlEvent(ReplControlEvent.SYNC,event);    if (logger.isDebugEnabled()) {      logger.debug("Added sync control event after log event: seqno=" + event.getSeqno());    }    needsSync=false;  }}  }
class C{  protected IList<E> buildValues(final IScope scope,final IContainer objects){  return (IList<E>)type.cast(scope,objects,null,false);}  }
class C{  public final boolean isFinished(){  return mScrollerX.mFinished && mScrollerY.mFinished;}  }
class C{  public boolean isPassiva(){  String accountType=getAccountType();  return (MElementValue.ACCOUNTTYPE_Liability.equals(accountType) || MElementValue.ACCOUNTTYPE_OwnerSEquity.equals(accountType));}  }
class C{  public boolean isSetOperation(){  return this.operation != null;}  }
class C{  public static <T>LazyPStackX<T> generate(long limit,Supplier<T> s){  return fromStreamS(ReactiveSeq.generate(s).limit(limit));}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) protected void refreshPropertiesIfNeeded(){synchronized (this) {    LOGGER.debug("Checking if properties need to be refreshed. currentTime={} lastRefreshTime={} millisecondsSinceLastPropertiesRefresh={}",System.currentTimeMillis(),lastRefreshTime,System.currentTimeMillis() - lastRefreshTime);    if (System.currentTimeMillis() - lastRefreshTime >= refreshIntervalMillis) {      LOGGER.debug("Refreshing properties...");      Properties properties=ConfigurationConverter.getProperties(configuration);      if (lastConfigurationErrorEvent != null) {        LOGGER.error("An error occurred while retrieving configurations. Previous values are retained. See cause for details.",lastConfigurationErrorEvent.getCause());        lastConfigurationErrorEvent=null;      } else {        if (LOGGER.isDebugEnabled()) {          LOGGER.debug("New properties just retrieved.");          for (          Map.Entry<Object,Object> entry : properties.entrySet()) {            LOGGER.debug("{}=\"{}\"",entry.getKey(),entry.getValue());          }        }        this.source.clear();        this.source.putAll((Map)properties);        if (LOGGER.isDebugEnabled()) {          LOGGER.debug("Updated reloadable properties.");          for (          Object key : source.keySet()) {            LOGGER.debug("{}=\"{}\"",key,properties.get(key));          }        }      }      updateLastRefreshTime();      updateRefreshInterval();      LOGGER.debug("The properties have been refreshed from the configuration.");    }  }}  }
