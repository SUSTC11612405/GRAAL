class C{  public boolean visit(EnumConstantDeclaration node){  return true;}  }
class C{  protected void fireActionPerformed(String command){  Object[] listeners=listenerList.getListenerList();  long mostRecentEventTime=EventQueue.getMostRecentEventTime();  int modifiers=0;  AWTEvent currentEvent=EventQueue.getCurrentEvent();  if (currentEvent instanceof InputEvent) {    modifiers=((InputEvent)currentEvent).getModifiers();  } else   if (currentEvent instanceof ActionEvent) {    modifiers=((ActionEvent)currentEvent).getModifiers();  }  ActionEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      if (e == null) {        e=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,command,mostRecentEventTime,modifiers);      }      ((ActionListener)listeners[i + 1]).actionPerformed(e);    }  }}  }
class C{  public void elementStarted(String name,String systemId,int lineNr){  Properties attribs=(Properties)this.attributeDefaultValues.get(name);  if (attribs == null) {    attribs=new Properties();  } else {    attribs=(Properties)attribs.clone();  }  this.currentElements.push(attribs);}  }
class C{  public static boolean isCustomMultiDex(File archiveFile){  if (!isMultiDex(archiveFile)) {    return false;  }  ContentReader contentReader=new ContentReader(archiveFile);  contentReader.load();  List<String> allClassNames=contentReader.getAllClassNames();  List<String> allDexNames=new LinkedList<>();  for (  String classEntry : allClassNames) {    if (classEntry.endsWith(".dex")) {      allDexNames.add(classEntry);    }  }  if (allClassNames.contains("classes1.dex")) {    return true;  }  for (  String classEntry : allDexNames) {    if (!classEntry.startsWith("classes")) {      return true;    }  }  return false;}  }
class C{  private BindingSetAssignment crossJoin(BindingSetAssignment left,BindingSetAssignment right){  Iterable<BindingSet> leftIter=left.getBindingSets();  Iterable<BindingSet> rightIter=right.getBindingSets();  int leftSize=size(leftIter,16);  int rightSize=size(rightIter,16);  List<BindingSet> output=new ArrayList<BindingSet>(leftSize * rightSize);  for (  BindingSet l : leftIter) {    for (    BindingSet r : rightIter) {      QueryBindingSet bs=new QueryBindingSet();      bs.addAll(l);      bs.addAll(r);      output.add(bs);    }  }  Set<String> bindingNames=new HashSet<String>(left.getBindingNames());  bindingNames.addAll(right.getBindingNames());  BindingSetAssignment bindings=new BindingSetAssignment();  bindings.setBindingSets(output);  bindings.setBindingNames(bindingNames);  return bindings;}  }
class C{  public static void saveBinaryFileFromResponse(Context context,String filename,Response response) throws IOException {  File downloadedFile=new File(context.getCacheDir(),filename);  BufferedSink sink=Okio.buffer(Okio.sink(downloadedFile));  sink.writeAll(response.body().source());  sink.close();}  }
class C{  public ParameterValue(Process process){  super("process.param",2);  this.process=process;}  }
class C{  protected boolean internalContinueOnCancel(){  return false;}  }
class C{  public boolean equals(Coord c){  if (c == this) {    return true;  } else {    return (x == c.x && y == c.y);  }}  }
class C{  protected String a(String s,int v,String u) throws Exception {  char sign=v >= 0 ? '+' : '-';  Date dt=DateMathParser.parseMath(null,s + 'Z' + sign+ Math.abs(v)+ u);  return fmt.format(dt.toInstant());}  }
class C{  @Override protected Control createDialogArea(Composite parent){  createMessageArea(parent);  Composite composite=new Composite(parent,SWT.NONE);  GridLayout layout=new GridLayout();  layout.marginHeight=0;  layout.marginWidth=0;  composite.setLayout(layout);  GridData data=new GridData(GridData.FILL_BOTH);  data.horizontalSpan=2;  composite.setLayoutData(data);  customArea=createCustomArea(composite);  if (customArea == null) {    customArea=new Label(composite,SWT.NULL);  }  return composite;}  }
class C{  public void addFlakes(int quantity){  for (int i=0; i < quantity; ++i) {    flakes.add(Flake.createFlake(getWidth(),droid,getContext()));  }  setNumFlakes(numFlakes + quantity);}  }
class C{  @Override public void addVehicleType(VehicleType type){  if (this.getVehicleTypes().containsKey(type.getId())) {    throw new IllegalArgumentException("Vehicle type with id = " + type.getId() + " already exists.");  }  this.vehicleTypes.put(type.getId(),type);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public DeniedException(String message){  super(message);}  }
class C{  public SamFilterParamsBuilder findAndRemoveDuplicates(final boolean val){  mFindAndRemoveDuplicates=val;  return this;}  }
class C{  public void whitelist(){  blacklist=false;}  }
class C{  public static Driver driver(String uri,Config config){  return driver(URI.create(uri),config);}  }
class C{  public String addPreVolumeExpandSteps(Workflow workflow,List<VolumeDescriptor> volumeDescriptors,String taskId) throws WorkflowException {  List<VolumeDescriptor> protectionControllerDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.RP_TARGET,VolumeDescriptor.Type.RP_VPLEX_VIRT_TARGET},new VolumeDescriptor.Type[]{});  if (protectionControllerDescriptors.isEmpty()) {    return null;  }  Volume volume=_dbClient.queryObject(Volume.class,protectionControllerDescriptors.get(0).getVolumeURI());  ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,volume.getProtectionController());  List<VolumeDescriptor> volumeDescriptorsTypeFilter=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.RP_SOURCE,VolumeDescriptor.Type.RP_EXISTING_SOURCE,VolumeDescriptor.Type.RP_VPLEX_VIRT_SOURCE},new VolumeDescriptor.Type[]{});  if (volumeDescriptorsTypeFilter.isEmpty()) {    return null;  }  for (  VolumeDescriptor descriptor : volumeDescriptorsTypeFilter) {    URI volURI=descriptor.getVolumeURI();    ProtectionSystem rp=_dbClient.queryObject(ProtectionSystem.class,volume.getProtectionController());    Map<String,RecreateReplicationSetRequestParams> rsetParams=new HashMap<String,RecreateReplicationSetRequestParams>();    RecreateReplicationSetRequestParams rsetParam=getReplicationSettings(rpSystem,volURI);    rsetParams.put(RPHelper.getRPWWn(volURI,_dbClient),rsetParam);    String stepId=workflow.createStepId();    Workflow.Method deleteRsetExecuteMethod=new Workflow.Method(METHOD_DELETE_RSET_STEP,rpSystem.getId(),Arrays.asList(volURI));    Workflow.Method deleteRsetRollbackeMethod=new Workflow.Method(METHOD_DELETE_RSET_ROLLBACK_STEP,rpSystem.getId(),Arrays.asList(volURI),rsetParams);    workflow.createStep(STEP_PRE_VOLUME_EXPAND,"Pre volume expand, delete replication set subtask for RP: " + volURI.toString(),null,rpSystem.getId(),rp.getSystemType(),this.getClass(),deleteRsetExecuteMethod,deleteRsetRollbackeMethod,stepId);    _log.info("addPreVolumeExpandSteps Replication Set in workflow");  }  return STEP_PRE_VOLUME_EXPAND;}  }
class C{  public static String relativeFormat(Date dt){  return RelativeDateFormatter.format(dt);}  }
class C{  public ReferenceQueue(){}  }
class C{  public BERTaggedObject(int tagNo){  super(false,tagNo,new BERSequence());}  }
class C{  public FileURLConnection(URL url){  super(url);  filename=url.getFile();  if (filename == null) {    filename="";  }  filename=UriCodec.decode(filename);}  }
class C{  public LinkResolver(){}  }
class C{  private Promise<PrivateKey> fetchPreKey(long keyId){  try {    return Promise.success(ManagedList.of(ownKeys.getPreKeys()).filter(PrivateKey.PRE_KEY_EQUALS_ID(keyId)).first());  } catch (  Exception e) {    Log.d(TAG,"Unable to find own pre key #" + keyId);    throw e;  }}  }
class C{  public void startEditing(){  if (!Display.getInstance().isTextEditing(this)) {    Display.getInstance().editString(this,maxSize,constraint,text);  }}  }
class C{  final void chompNewline() throws IOException {  if ((pos != end || fillBuf() != -1) && buf[pos] == '\n') {    ++pos;  }}  }
class C{  synchronized void enqueue(EventObject event,Vector<NamingListener> vector){  QueueElement newElt=new QueueElement(event,vector);  if (head == null) {    head=newElt;    tail=newElt;  } else {    newElt.next=head;    head.prev=newElt;    head=newElt;  }  notify();}  }
class C{  public void onSuccess(HttpResponse resp){}  }
class C{  public LayoutParams(int w,int h){  super(w,h);  column=-1;  span=1;}  }
class C{  public TeXFormula add(Atom el){  if (el != null) {    if (el instanceof MiddleAtom)     middle.add((MiddleAtom)el);    if (root == null) {      root=el;    } else {      if (!(root instanceof RowAtom)) {        root=new RowAtom(root);      }      ((RowAtom)root).add(el);      if (el instanceof TypedAtom) {        TypedAtom ta=(TypedAtom)el;        int rtype=ta.getRightType();        if (rtype == TeXConstants.TYPE_BINARY_OPERATOR || rtype == TeXConstants.TYPE_RELATION) {          ((RowAtom)root).add(new BreakMarkAtom());        }      }    }  }  return this;}  }
class C{  public Rendon(){  super(2,2);}  }
class C{  public TermQueryBuilder(String name,double value){  this(name,(Object)value);}  }
class C{  private void geofenceTriggered(Intent intent){  Log.v(TAG,ACTION_GEOFENCE_TRIGGERED);  boolean geofenceEnabled=Utils.getGeofenceEnabled(this);  GeofencingEvent event=GeofencingEvent.fromIntent(intent);  List<Geofence> geofences=event.getTriggeringGeofences();  if (geofenceEnabled && geofences != null && geofences.size() > 0) {    if (event.getGeofenceTransition() == Geofence.GEOFENCE_TRANSITION_ENTER) {      showNotification(geofences.get(0).getRequestId(),Constants.USE_MICRO_APP);    } else     if (event.getGeofenceTransition() == Geofence.GEOFENCE_TRANSITION_EXIT) {      clearNotificationInternal();      clearRemoteNotifications();    }  }  UtilityReceiver.completeWakefulIntent(intent);}  }
class C{  public boolean hasNext(){  return hasNextTlsMode() || hasNextInetSocketAddress() || hasNextProxy()|| hasNextPostponed();}  }
class C{  @Override public boolean commitChanges(){  if (table.hasChanged()) {    dataHolder.setData(((NumericTable)table.getData()).asDoubleArray());    table.setHasChangedSinceLastSave(false);    return true;  }  return false;}  }
class C{  public static Complex[] ifft(Complex[] x){  int n=x.length;  Complex[] y=new Complex[n];  for (int i=0; i < n; i++) {    y[i]=x[i].conjugate();  }  y=fft(y);  for (int i=0; i < n; i++) {    y[i]=y[i].conjugate();  }  for (int i=0; i < n; i++) {    y[i]=y[i].scale(1.0 / n);  }  return y;}  }
class C{  public void init() throws ServletException {}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (extensionValue == null) {    extensionId=PKIXExtensions.CertificatePolicies_Id;    critical=false;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public static String toFullHexString(int value){  int currentValue=value;  StringBuffer stringBuffer=new StringBuffer(8);  for (int i=0; i < 8; i++) {    int currentDigit=currentValue & 0xf;    stringBuffer.append(HEX_DIGITS[currentDigit]);    currentValue>>>=4;  }  return stringBuffer.reverse().toString();}  }
class C{  @Override public boolean addBinding(final Binding binding) throws Exception {  boolean exists=super.addBinding(binding);  if (!exists) {    Address add=addAndUpdateAddressMap(binding.getAddress());    if (add.containsWildCard()) {      for (      Address destAdd : add.getLinkedAddresses()) {        super.addMappingInternal(destAdd.getAddress(),binding);      }    } else {      for (      Address destAdd : add.getLinkedAddresses()) {        Bindings bindings=super.getBindingsForRoutingAddress(destAdd.getAddress());        for (        Binding b : bindings.getBindings()) {          super.addMappingInternal(binding.getAddress(),b);        }      }    }  }  return exists;}  }
class C{  public static <T>FutureW<T> fromPublisher(final Publisher<T> pub){  final ValueSubscriber<T> sub=ValueSubscriber.subscriber();  pub.subscribe(sub);  return sub.toFutureW();}  }
class C{  public CHelpSaveField(final String text,final IHelpInformation information){  super(text);  this.information=information;}  }
class C{  static void terminateBits(int numDataBytes,BitArray bits) throws WriterException {  int capacity=numDataBytes << 3;  if (bits.getSize() > capacity) {    throw new WriterException("data bits cannot fit in the QR Code" + bits.getSize() + " > "+ capacity);  }  for (int i=0; i < 4 && bits.getSize() < capacity; ++i) {    bits.appendBit(false);  }  int numBitsInLastByte=bits.getSize() & 0x07;  if (numBitsInLastByte > 0) {    for (int i=numBitsInLastByte; i < 8; i++) {      bits.appendBit(false);    }  }  int numPaddingBytes=numDataBytes - bits.getSizeInBytes();  for (int i=0; i < numPaddingBytes; ++i) {    bits.appendBits((i & 0x01) == 0 ? 0xEC : 0x11,8);  }  if (bits.getSize() != capacity) {    throw new WriterException("Bits size does not equal capacity");  }}  }
class C{  public static void printStackTrace(Throwable e){  try {    Debug.printStackTrace(e);  } catch (  Throwable f) {    e.printStackTrace();  }}  }
class C{  public static int randUniform(final int a,final int b){  final int max=Math.max(a,b);  final int min=Math.min(a,b);  return rand.nextInt(max - min + 1) + min;}  }
class C{  public InsertContact postalType(int postalType){  mIntent.putExtra(Insert.POSTAL_TYPE,postalType);  return this;}  }
class C{  public void addConfiguredSyspropertyset(PropertySet propertySet){  ResourceBundle bundle=propertySet.readProperties();  Enumeration keys=bundle.getKeys();  while (keys.hasMoreElements()) {    String key=(String)keys.nextElement();    Variable var=new Variable();    var.setKey(key);    var.setValue(bundle.getString(key));    addSysproperty(var);  }}  }
class C{  public NATURAL_CROSS_JOIN NATURAL_CROSS_JOIN(String tableToJoin){  return new NATURAL_CROSS_JOIN(this,tableToJoin);}  }
class C{  public AccountHeaderBuilder withAccountHeader(@NonNull View accountHeader){  this.mAccountHeaderContainer=accountHeader;  return this;}  }
class C{  public static void closeQuietly(Writer writer){  if (writer != null) {    try {      writer.flush();    } catch (    Exception e) {    }    try {      writer.close();    } catch (    Exception e) {    }  }}  }
class C{  @Override public List<T> extractOutput(){  if (isEmpty()) {    return Lists.newArrayList();  }  long totalCount=unbufferedElements.size();  for (  QuantileBuffer<T> buffer : buffers) {    totalCount+=bufferSize * buffer.weight;  }  List<QuantileBuffer<T>> all=Lists.newArrayList(buffers);  if (!unbufferedElements.isEmpty()) {    Collections.sort(unbufferedElements,compareFn);    all.add(new QuantileBuffer<>(unbufferedElements));  }  double step=1.0 * totalCount / (numQuantiles - 1);  double offset=(1.0 * totalCount - 1) / (numQuantiles - 1);  List<T> quantiles=interpolate(all,numQuantiles - 2,step,offset);  quantiles.add(0,min);  quantiles.add(max);  return quantiles;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:38.163 -0500",hash_original_method="0198A12501638F8F5669817EF7B81F42",hash_generated_method="174DD0D2E1851028247F511063879BEA") int extensionEfForEf(int efid){switch (efid) {case EF_MBDN:    return EF_EXT6;case EF_ADN:  return EF_EXT1;case EF_SDN:return EF_EXT3;case EF_FDN:return EF_EXT2;case EF_MSISDN:return EF_EXT1;case EF_PBR:return 0;default :return -1;}}  }
class C{  private static String toAnnotation(Attribute attribute){  String accessor=toJMapAccessor(attribute);  String jMap=toJMap(attribute);  StringBuilder result=new StringBuilder();  if (!isEmpty(accessor))   result.append(accessor);  if (!isEmpty(jMap))   result.append(jMap);  return result.toString();}  }
class C{  public IndexShardRoutingTable normalizeVersions(){  if (shards.isEmpty()) {    return this;  }  if (shards.size() == 1) {    return this;  }  long highestVersion=shards.get(0).version();  boolean requiresNormalization=false;  for (int i=1; i < shards.size(); i++) {    if (shards.get(i).version() != highestVersion) {      requiresNormalization=true;    }    if (shards.get(i).version() > highestVersion) {      highestVersion=shards.get(i).version();    }  }  if (!requiresNormalization) {    return this;  }  List<ShardRouting> shardRoutings=new ArrayList<>(shards.size());  for (int i=0; i < shards.size(); i++) {    if (shards.get(i).version() == highestVersion) {      shardRoutings.add(shards.get(i));    } else {      shardRoutings.add(new ShardRouting(shards.get(i),highestVersion));    }  }  return new IndexShardRoutingTable(shardId,Collections.unmodifiableList(shardRoutings));}  }
class C{  public List<G> loadMultiple(Reader reader,Supplier<G> graph_factory) throws IOException {  this.graph_factory=graph_factory;  initializeData();  clearData();  parse(reader);  return graphs;}  }
class C{  public GridListSet(){  comp=null;  strict=true;}  }
class C{  public SSLPermission(String name){  super(name);}  }
class C{  public void addCreator(Creator creator){  getCreators().add(creator);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.243 -0400",hash_original_method="8927FBFC8F292D43723C1D48447E8FED",hash_generated_method="8927FBFC8F292D43723C1D48447E8FED") boolean appendMarker(Node<K,V> f){  return casNext(f,new Node<K,V>(f));}  }
class C{  public boolean checkModifiers(MouseEvent e){  return e.getModifiers() == modifiers;}  }
class C{  public static String readFileAsString(String fileName){  if (!fileName.startsWith("/")) {    fileName="/" + fileName;  }  String result=null;  try (InputStream classPath=FileLoaderUtil.class.getResourceAsStream(fileName)){    if (classPath != null) {      result=load(classPath);    }  } catch (  Exception e) {    throw new RuntimeException("Error getting properties file : " + fileName,e);  }  Path curDirPath=getFileInCurrentDir(fileName);  if (Files.exists(curDirPath)) {    try {      List<String> stringList=Files.readAllLines(curDirPath);      StringBuilder responseData=new StringBuilder();      for (      String s : stringList) {        responseData.append(s).append(NEW_LINE);      }      result=responseData.toString();    } catch (    Exception e) {      throw new RuntimeException("Error getting properties file : " + fileName,e);    }  }  return result;}  }
class C{  @BeforeMethod public void init(){  byteBufferProvider=new ByteBufferProvider(new ByteBufferFactory(1),1);  byteBufferProvider.setBufferPoolMaxDirectMemoryOccupancy(0.6f);  byteBufferProvider.setBufferPoolMinDirectMemoryOccupancy(0.3f);}  }
class C{  public void addToGlobalBlacklist(String host){  addToGlobalBlacklist(host,System.currentTimeMillis() + this.globalBlacklistTimeout);}  }
class C{  public static synchronized int generateLocalRtpPort(){  return generateLocalUdpPort(DEFAULT_LOCAL_RTP_PORT_BASE);}  }
class C{  public ValidationException(ReasonEnum reason,String member,Object[] params){  super(getMessage(reason,member,params),params);  bean.setReason(reason);  bean.setMember(member);  setMessageKey(initMessageKey());}  }
class C{  public static String mapFullWidthNumberToHalfWidth(String text){}  }
class C{  private LinearRing readLinearRing(OraGeom oraGeom,int elemIndex){  int etype=oraGeom.eType(elemIndex);  int interpretation=oraGeom.interpretation(elemIndex);  checkOrdinates(oraGeom,elemIndex,"Polygon");  checkETYPE(etype,OraGeom.ETYPE.POLYGON,OraGeom.ETYPE.POLYGON_EXTERIOR,OraGeom.ETYPE.POLYGON_INTERIOR,"Polygon");  checkInterpretation(interpretation,OraGeom.INTERP.POLYGON,OraGeom.INTERP.RECTANGLE,"Polygon");  CoordinateSequence seq=extractCoords(oraGeom,elemIndex);  LinearRing ring;  if (interpretation == OraGeom.INTERP.POLYGON) {    ring=geometryFactory.createLinearRing(seq);  } else {    Coordinate min=seq.getCoordinate(0);    Coordinate max=seq.getCoordinate(1);    ring=geometryFactory.createLinearRing(new Coordinate[]{min,new Coordinate(max.x,min.y),max,new Coordinate(min.x,max.y),min});  }  return ring;}  }
class C{  public long rate(){  return (long)((double)jobMsgCnt / (duration() / BILLION));}  }
class C{  public void callChildVisitors(XSLTVisitor visitor,boolean callAttributes){  if (callAttributes && (null != m_selectExpression))   m_selectExpression.callVisitors(this,visitor);  int length=getSortElemCount();  for (int i=0; i < length; i++) {    getSortElem(i).callVisitors(visitor);  }  super.callChildVisitors(visitor,callAttributes);}  }
class C{  public int hashCode(){  return table.hashCode();}  }
class C{  public void deliver(String from,String recipient,InputStream data) throws TooMuchDataException, IOException {  if (log.isDebugEnabled())   log.debug("Delivering mail from " + from + " to "+ recipient);  ByteArrayOutputStream out=new ByteArrayOutputStream();  data=new BufferedInputStream(data);  int current;  while ((current=data.read()) >= 0) {    out.write(current);  }  byte[] bytes=out.toByteArray();  if (log.isDebugEnabled())   log.debug("Creating message from data with " + bytes.length + " bytes");  this.messages.add(new WiserMessage(this,from,recipient,bytes));}  }
class C{  private void ps(String s){  ps(s,true);}  }
class C{  @Override public String toString(){  return "<null>";}  }
class C{  public Element store(Object o){  LevelXing p=(LevelXing)o;  Element element=new Element("levelxing");  element.setAttribute("ident",p.getID());  if (p.getBlockNameAC().length() > 0) {    element.setAttribute("blocknameac",p.getBlockNameAC());  }  if (p.getBlockNameBD().length() > 0) {    element.setAttribute("blocknamebd",p.getBlockNameBD());  }  if (p.getConnectA() != null) {    element.setAttribute("connectaname",((TrackSegment)p.getConnectA()).getID());  }  if (p.getConnectB() != null) {    element.setAttribute("connectbname",((TrackSegment)p.getConnectB()).getID());  }  if (p.getConnectC() != null) {    element.setAttribute("connectcname",((TrackSegment)p.getConnectC()).getID());  }  if (p.getConnectD() != null) {    element.setAttribute("connectdname",((TrackSegment)p.getConnectD()).getID());  }  if (p.getSignalAName().length() > 0) {    element.setAttribute("signalaname",p.getSignalAName());  }  if (p.getSignalBName().length() > 0) {    element.setAttribute("signalbname",p.getSignalBName());  }  if (p.getSignalCName().length() > 0) {    element.setAttribute("signalcname",p.getSignalCName());  }  if (p.getSignalDName().length() > 0) {    element.setAttribute("signaldname",p.getSignalDName());  }  Point2D coords=p.getCoordsCenter();  element.setAttribute("xcen","" + coords.getX());  element.setAttribute("ycen","" + coords.getY());  coords=p.getCoordsA();  element.setAttribute("xa","" + coords.getX());  element.setAttribute("ya","" + coords.getY());  coords=p.getCoordsB();  element.setAttribute("xb","" + coords.getX());  element.setAttribute("yb","" + coords.getY());  if (p.getSignalAMastName().length() > 0) {    element.addContent(new Element("signalAMast").addContent(p.getSignalAMastName()));  }  if (p.getSignalBMastName().length() > 0) {    element.addContent(new Element("signalBMast").addContent(p.getSignalBMastName()));  }  if (p.getSignalCMastName().length() > 0) {    element.addContent(new Element("signalCMast").addContent(p.getSignalCMastName()));  }  if (p.getSignalDMastName().length() > 0) {    element.addContent(new Element("signalDMast").addContent(p.getSignalDMastName()));  }  if (p.getSensorAName().length() > 0) {    element.addContent(new Element("sensorA").addContent(p.getSensorAName()));  }  if (p.getSensorBName().length() > 0) {    element.addContent(new Element("sensorB").addContent(p.getSensorBName()));  }  if (p.getSensorCName().length() > 0) {    element.addContent(new Element("sensorC").addContent(p.getSensorCName()));  }  if (p.getSensorDName().length() > 0) {    element.addContent(new Element("sensorD").addContent(p.getSensorDName()));  }  element.setAttribute("class",getClass().getName());  return element;}  }
class C{  public final List<Warning> validate(List<ICalComponent> components,ICalVersion version){  List<Warning> warnings=new ArrayList<Warning>(0);  validate(components,version,warnings);  warnings.addAll(parameters.validate(version));  return warnings;}  }
class C{  public static float latToY(final int screenHeight,int screenWidth,final BoundingBox viewBox,final double lat){  double pixelRadius=(double)screenWidth / (viewBox.getWidth() / 1E7d);  return (float)(screenHeight - (latToMercator(lat) - viewBox.getBottomMercator()) * pixelRadius);}  }
class C{  boolean initializing(){  return appender.index() == 0 || context.getCommitIndex() < appender.index();}  }
class C{  public void testOverlappingRemoveUnused(){  Instances result=null;  m_Instances.setClassIndex(2);  try {    result=applyFilter(new Filter[]{new AllFilter(),new AllFilter()},new Range[]{new Range("1,2,4"),new Range("2,4")},true);  } catch (  Exception e) {    fail("Problem applying the filter: " + e);  }  assertEquals(m_Instances.numInstances(),result.numInstances());  assertEquals(m_Instances.numAttributes() + 1,result.numAttributes());}  }
class C{  public boolean isCanExport(){  Object oo=get_Value(COLUMNNAME_IsCanExport);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @SkipValidation @Action(value="/modifyProperty-forward") public String forwardModify(){  LOGGER.debug("forwardModify: Modify property started " + propertyModel);  setOldPropertyTypeCode(basicProp.getProperty().getPropertyDetail().getPropertyTypeMaster().getCode());  validate();  final long startTimeMillis=System.currentTimeMillis();  isMeesevaUser=propService.isMeesevaUser(securityUtils.getCurrentUser());  if (isMeesevaUser && getMeesevaApplicationNumber() != null) {    propertyModel.setApplicationNo(propertyModel.getMeesevaApplicationNumber());    propertyModel.setSource(PropertyTaxConstants.SOURCEOFDATA_MEESEWA);  }  if (getModelId() != null && !getModelId().trim().isEmpty()) {    propWF=(PropertyImpl)getPersistenceService().findByNamedQuery(QUERY_WORKFLOW_PROPERTYIMPL_BYID,Long.valueOf(getModelId()));    LOGGER.debug("forwardModify: Workflow property: " + propWF);    basicProp=propWF.getBasicProperty();    setBasicProp(basicProp);  } else   populateBasicProp();  oldProperty=(PropertyImpl)basicProp.getProperty();  if (areaOfPlot != null && !areaOfPlot.isEmpty()) {    final Area area=new Area();    area.setArea(new Float(areaOfPlot));    propertyModel.getPropertyDetail().setSitalArea(area);  }  if (houseNo != null && !houseNo.isEmpty()) {    basicProp.getAddress().setHouseNoBldgApt(houseNo);  }  if (propTypeId != null && !propTypeId.trim().isEmpty() && !propTypeId.equals("-1"))   propTypeMstr=(PropertyTypeMaster)getPersistenceService().find("from PropertyTypeMaster ptm where ptm.id = ?",Long.valueOf(propTypeId));  propertyModel.getPropertyDetail().setPropertyTypeMaster(propTypeMstr);  String errorKey=null;  if (!hasErrors())   errorKey=propService.validationForBifurcation(propertyModel,basicProp,modifyRsn);  if (!isBlank(errorKey))   addActionError(getText(errorKey));  final PropertyTypeMaster oldPropTypeMstr=oldProperty.getPropertyDetail().getPropertyTypeMaster();  if (null != propTypeMstr && !propTypeMstr.getType().equals(oldPropTypeMstr.getType()))   if (propTypeMstr.getType().equals(OWNERSHIP_TYPE_VAC_LAND_STR))   addActionError(getText("error.nonVacantToVacant"));  if (hasErrors())   if (StringUtils.containsIgnoreCase(userDesignationList,JUNIOR_ASSISTANT) || StringUtils.containsIgnoreCase(userDesignationList,SENIOR_ASSISTANT) || (getModel().getState().getNextAction() != null && getModel().getState().getNextAction().equalsIgnoreCase(WF_STATE_UD_REVENUE_INSPECTOR_APPROVAL_PENDING))|| !propertyByEmployee)   return NEW; else   if (StringUtils.containsIgnoreCase(userDesignationList,BILL_COLLECTOR_DESGN) || StringUtils.containsIgnoreCase(userDesignationList,COMMISSIONER_DESGN) || StringUtils.containsIgnoreCase(userDesignationList,REVENUE_OFFICER_DESGN))   return VIEW;  try {    modifyBasicProp(getDocNumber());  } catch (  TaxCalculatorExeption e) {    addActionError(getText("unitrate.error"));    LOGGER.error("forwardModify : There are no Unit rates defined for chosen combinations",e);    return NEW;  }  transitionWorkFlow(propertyModel);  basicProp.setUnderWorkflow(Boolean.TRUE);  basicPropertyService.applyAuditing(propertyModel.getState());  propService.updateIndexes(propertyModel,getApplicationType());  if (basicProp.getWFProperty() != null && basicProp.getWFProperty().getPtDemandSet() != null && !basicProp.getWFProperty().getPtDemandSet().isEmpty()) {    for (    Ptdemand ptDemand : basicProp.getWFProperty().getPtDemandSet()) {      basicPropertyService.applyAuditing(ptDemand.getDmdCalculations());    }  }  if (!isMeesevaUser)   basicPropertyService.update(basicProp); else {    HashMap<String,String> meesevaParams=new HashMap<String,String>();    meesevaParams.put("ADMISSIONFEE","0");    meesevaParams.put("APPLICATIONNUMBER",propertyModel.getMeesevaApplicationNumber());    basicProp.setSource(PropertyTaxConstants.SOURCEOFDATA_MEESEWA);    basicProp.getProperty().setApplicationNo(propertyModel.getMeesevaApplicationNumber());    basicPropertyService.updateBasicProperty(basicProp,meesevaParams);  }  setModifyRsn(propertyModel.getPropertyDetail().getPropertyMutationMaster().getCode());  prepareAckMsg();  buildEmailandSms(propertyModel,getApplicationType());  addActionMessage(getText(PROPERTY_FORWARD_SUCCESS,new String[]{propertyModel.getBasicProperty().getUpicNo()}));  final long elapsedTimeMillis=System.currentTimeMillis() - startTimeMillis;  LOGGER.info("forwardModify: Modify property forwarded successfully; Time taken(ms) = " + elapsedTimeMillis);  LOGGER.debug("forwardModify: Modify property forward ended");  return isMeesevaUser ? MEESEVA_RESULT_ACK : RESULT_ACK;}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area){  RectangleEdge position=getPosition();  if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) {    drawHorizontal(g2,area);  } else   if (position == RectangleEdge.LEFT || position == RectangleEdge.RIGHT) {    drawVertical(g2,area);  } else {    throw new RuntimeException("Invalid title position.");  }}  }
class C{  private void exportTracks(TrackFileFormat trackFileFormat,int trackCount){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_export_all),true);  EndToEndTestUtils.instrumentation.waitForIdleSync();  EndToEndTestUtils.SOLO.clickOnText(trackFileFormat.name());  EndToEndTestUtils.getButtonOnScreen(EndToEndTestUtils.trackListActivity.getString(R.string.generic_ok),true,true);  EndToEndTestUtils.SOLO.waitForText(getExportSuccessMessage(trackCount,trackFileFormat));  EndToEndTestUtils.getButtonOnScreen(trackListActivity.getString(R.string.generic_ok),true,true);  instrumentation.waitForIdleSync();}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN}) @Path("/{id}/storage-systems") public TaskResourceRep addStorageSystem(@PathParam("id") URI id,StorageSystemProviderRequestParam param) throws ControllerException {  TaskResourceRep taskRep;  URIQueryResultList list=new URIQueryResultList();  ArgValidator.checkFieldNotEmpty(param.getSystemType(),"system_type");  if (!StorageSystem.Type.isProviderStorageSystem(param.getSystemType())) {    throw APIException.badRequests.cannotAddStorageSystemTypeToStorageProvider(param.getSystemType());  }  StorageProvider provider=_dbClient.queryObject(StorageProvider.class,id);  ArgValidator.checkEntityNotNull(provider,id,isIdEmbeddedInURL(id));  ArgValidator.checkFieldNotEmpty(param.getSerialNumber(),"serialNumber");  String nativeGuid=NativeGUIDGenerator.generateNativeGuid(param.getSystemType(),param.getSerialNumber());  List<StorageSystem> systems=CustomQueryUtility.getActiveStorageSystemByNativeGuid(_dbClient,nativeGuid);  if (systems != null && !systems.isEmpty()) {    throw APIException.badRequests.invalidParameterProviderStorageSystemAlreadyExists("nativeGuid",nativeGuid);  }  int cleared=DecommissionedResource.removeDecommissionedFlag(_dbClient,nativeGuid,StorageSystem.class);  if (cleared == 0) {    log.info("Cleared {} decommissioned systems",cleared);  } else {    log.info("Did not find any decommissioned systems to clear. Continue to scan.");  }  ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>(1);  String taskId=UUID.randomUUID().toString();  tasks.add(new AsyncTask(StorageProvider.class,provider.getId(),taskId));  BlockController controller=getController(BlockController.class,provider.getInterfaceType());  DiscoveredObjectTaskScheduler scheduler=new DiscoveredObjectTaskScheduler(_dbClient,new ScanJobExec(controller));  TaskList taskList=scheduler.scheduleAsyncTasks(tasks);  return taskList.getTaskList().listIterator().next();}  }
class C{  public ImageCache(Context context,String uniqueName){  init(context,new ImageCacheParams(context,uniqueName));}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public Matrix4 inv(){  float l_det=val[M30] * val[M21] * val[M12]* val[M03] - val[M20] * val[M31] * val[M12]* val[M03] - val[M30] * val[M11] * val[M22]* val[M03] + val[M10] * val[M31] * val[M22]* val[M03] + val[M20] * val[M11] * val[M32]* val[M03] - val[M10] * val[M21] * val[M32]* val[M03] - val[M30] * val[M21] * val[M02]* val[M13] + val[M20] * val[M31] * val[M02]* val[M13] + val[M30] * val[M01] * val[M22]* val[M13] - val[M00] * val[M31] * val[M22]* val[M13] - val[M20] * val[M01] * val[M32]* val[M13] + val[M00] * val[M21] * val[M32]* val[M13] + val[M30] * val[M11] * val[M02]* val[M23] - val[M10] * val[M31] * val[M02]* val[M23] - val[M30] * val[M01] * val[M12]* val[M23] + val[M00] * val[M31] * val[M12]* val[M23] + val[M10] * val[M01] * val[M32]* val[M23] - val[M00] * val[M11] * val[M32]* val[M23] - val[M20] * val[M11] * val[M02]* val[M33] + val[M10] * val[M21] * val[M02]* val[M33] + val[M20] * val[M01] * val[M12]* val[M33] - val[M00] * val[M21] * val[M12]* val[M33] - val[M10] * val[M01] * val[M22]* val[M33] + val[M00] * val[M11] * val[M22]* val[M33];  if (l_det == 0f)   throw new RuntimeException("non-invertible matrix");  float inv_det=1.0f / l_det;  tmp[M00]=val[M12] * val[M23] * val[M31] - val[M13] * val[M22] * val[M31] + val[M13] * val[M21] * val[M32] - val[M11] * val[M23] * val[M32] - val[M12] * val[M21] * val[M33] + val[M11] * val[M22] * val[M33];  tmp[M01]=val[M03] * val[M22] * val[M31] - val[M02] * val[M23] * val[M31] - val[M03] * val[M21] * val[M32] + val[M01] * val[M23] * val[M32] + val[M02] * val[M21] * val[M33] - val[M01] * val[M22] * val[M33];  tmp[M02]=val[M02] * val[M13] * val[M31] - val[M03] * val[M12] * val[M31] + val[M03] * val[M11] * val[M32] - val[M01] * val[M13] * val[M32] - val[M02] * val[M11] * val[M33] + val[M01] * val[M12] * val[M33];  tmp[M03]=val[M03] * val[M12] * val[M21] - val[M02] * val[M13] * val[M21] - val[M03] * val[M11] * val[M22] + val[M01] * val[M13] * val[M22] + val[M02] * val[M11] * val[M23] - val[M01] * val[M12] * val[M23];  tmp[M10]=val[M13] * val[M22] * val[M30] - val[M12] * val[M23] * val[M30] - val[M13] * val[M20] * val[M32] + val[M10] * val[M23] * val[M32] + val[M12] * val[M20] * val[M33] - val[M10] * val[M22] * val[M33];  tmp[M11]=val[M02] * val[M23] * val[M30] - val[M03] * val[M22] * val[M30] + val[M03] * val[M20] * val[M32] - val[M00] * val[M23] * val[M32] - val[M02] * val[M20] * val[M33] + val[M00] * val[M22] * val[M33];  tmp[M12]=val[M03] * val[M12] * val[M30] - val[M02] * val[M13] * val[M30] - val[M03] * val[M10] * val[M32] + val[M00] * val[M13] * val[M32] + val[M02] * val[M10] * val[M33] - val[M00] * val[M12] * val[M33];  tmp[M13]=val[M02] * val[M13] * val[M20] - val[M03] * val[M12] * val[M20] + val[M03] * val[M10] * val[M22] - val[M00] * val[M13] * val[M22] - val[M02] * val[M10] * val[M23] + val[M00] * val[M12] * val[M23];  tmp[M20]=val[M11] * val[M23] * val[M30] - val[M13] * val[M21] * val[M30] + val[M13] * val[M20] * val[M31] - val[M10] * val[M23] * val[M31] - val[M11] * val[M20] * val[M33] + val[M10] * val[M21] * val[M33];  tmp[M21]=val[M03] * val[M21] * val[M30] - val[M01] * val[M23] * val[M30] - val[M03] * val[M20] * val[M31] + val[M00] * val[M23] * val[M31] + val[M01] * val[M20] * val[M33] - val[M00] * val[M21] * val[M33];  tmp[M22]=val[M01] * val[M13] * val[M30] - val[M03] * val[M11] * val[M30] + val[M03] * val[M10] * val[M31] - val[M00] * val[M13] * val[M31] - val[M01] * val[M10] * val[M33] + val[M00] * val[M11] * val[M33];  tmp[M23]=val[M03] * val[M11] * val[M20] - val[M01] * val[M13] * val[M20] - val[M03] * val[M10] * val[M21] + val[M00] * val[M13] * val[M21] + val[M01] * val[M10] * val[M23] - val[M00] * val[M11] * val[M23];  tmp[M30]=val[M12] * val[M21] * val[M30] - val[M11] * val[M22] * val[M30] - val[M12] * val[M20] * val[M31] + val[M10] * val[M22] * val[M31] + val[M11] * val[M20] * val[M32] - val[M10] * val[M21] * val[M32];  tmp[M31]=val[M01] * val[M22] * val[M30] - val[M02] * val[M21] * val[M30] + val[M02] * val[M20] * val[M31] - val[M00] * val[M22] * val[M31] - val[M01] * val[M20] * val[M32] + val[M00] * val[M21] * val[M32];  tmp[M32]=val[M02] * val[M11] * val[M30] - val[M01] * val[M12] * val[M30] - val[M02] * val[M10] * val[M31] + val[M00] * val[M12] * val[M31] + val[M01] * val[M10] * val[M32] - val[M00] * val[M11] * val[M32];  tmp[M33]=val[M01] * val[M12] * val[M20] - val[M02] * val[M11] * val[M20] + val[M02] * val[M10] * val[M21] - val[M00] * val[M12] * val[M21] - val[M01] * val[M10] * val[M22] + val[M00] * val[M11] * val[M22];  val[M00]=tmp[M00] * inv_det;  val[M01]=tmp[M01] * inv_det;  val[M02]=tmp[M02] * inv_det;  val[M03]=tmp[M03] * inv_det;  val[M10]=tmp[M10] * inv_det;  val[M11]=tmp[M11] * inv_det;  val[M12]=tmp[M12] * inv_det;  val[M13]=tmp[M13] * inv_det;  val[M20]=tmp[M20] * inv_det;  val[M21]=tmp[M21] * inv_det;  val[M22]=tmp[M22] * inv_det;  val[M23]=tmp[M23] * inv_det;  val[M30]=tmp[M30] * inv_det;  val[M31]=tmp[M31] * inv_det;  val[M32]=tmp[M32] * inv_det;  val[M33]=tmp[M33] * inv_det;  return this;}  }
class C{  private static void processAndOrOr(Decomposition decomp,SemanticNode node,String namePathPrefix,String op){  if (!(node instanceof OpApplNode)) {    decomp.children.add(node);    decomp.namePath.add(namePathPrefix);    return;  }  OpApplNode aonode=(OpApplNode)node;  SymbolNode sym=aonode.getOperator();  UniqueString opId=null;  String opName=null;  if (sym instanceof OpDefNode) {    opId=((OpDefNode)sym).getName();    opName=opId.toString();  }  if ((opName == null) || (!opName.equals(op))) {    decomp.children.add(node);    decomp.namePath.add(namePathPrefix);    return;  }  processAndOrOr(decomp,aonode.getArgs()[0],namePathPrefix + "!1",op);  decomp.children.add(aonode.getArgs()[1]);  decomp.namePath.add(namePathPrefix + "!2");  return;}  }
class C{  private void sincronizarBase(){  listaCatalogacao=ControleDAO.getBanco().getCatalogacaoDAO().listar();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DistributedSystemConfigImpl other=(DistributedSystemConfigImpl)super.clone();  other.system=null;  other.cacheServerConfigs=new HashSet();  other.locatorConfigs=new HashSet();  DistributionLocatorConfig[] myLocators=this.getDistributionLocatorConfigs();  for (int i=0; i < myLocators.length; i++) {    DistributionLocatorConfig locator=myLocators[i];    other.addDistributionLocatorConfig((DistributionLocatorConfig)locator.clone());  }  CacheServerConfig[] myCacheServers=this.getCacheServerConfigs();  for (int i=0; i < myCacheServers.length; i++) {    CacheServerConfig locator=myCacheServers[i];    other.addCacheServerConfig((CacheServerConfig)locator.clone());  }  return other;}  }
class C{  @Subscribe(thread=EventThread.IMMEDIATE,tags={@Tag}) public void heardFromMouseMam(String mouseWar){  Timber.e("Just heard from mouse mam: " + mouseWar + " from "+ Thread.currentThread());}  }
class C{  public <T extends Enum<T>>Source<T> enumValues(Class<T> e){  return pick(e.getEnumConstants());}  }
class C{  @Override public void declareOutputFields(OutputFieldsDeclarer declarer){}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.CONTINUE_STATEMENT__LABEL:    setLabel((LabelledStatement)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private static void removeLiveReference(Object value){synchronized (sLiveObjects) {    Integer count=sLiveObjects.get(value);    if (count == null) {      FLog.wtf("SharedReference","No entry in sLiveObjects for value of type %s",value.getClass());    } else     if (count == 1) {      sLiveObjects.remove(value);    } else {      sLiveObjects.put(value,count - 1);    }  }}  }
class C{  public static boolean isFolderExist(String directoryPath){  if (StringUtils.isBlank(directoryPath)) {    return false;  }  File dire=new File(directoryPath);  return (dire.exists() && dire.isDirectory());}  }
class C{  public boolean hasDaysGain(){  return hasExtension(DaysGain.class);}  }
class C{  public void loadAll() throws ClassNotFoundException {  if (debug) {    int units=this.compiler.getLoader().getUnits().size();    debugnl(String.format("Loading all classes. (%d)",units));    this.compiler.getLoader().loadAll();    debug(String.format("... done"));  } else {    this.compiler.getLoader().loadAll();  }}  }
class C{  public void toggleSelection(){  if (pickedObject instanceof Highlightable) {    boolean isNewSelection=pickedObject != this.selectedObject;    if (isNewSelection && this.selectedObject instanceof Highlightable) {      ((Highlightable)this.selectedObject).setHighlighted(false);    }    ((Highlightable)pickedObject).setHighlighted(isNewSelection);    this.getWorldWindow().requestRedraw();    this.selectedObject=isNewSelection ? pickedObject : null;  }}  }
class C{  boolean hasFired(){  int status=getSequenceStatus();  return (status == SEQUENCE_FINISHED);}  }
class C{  public static DateTimeComponents parse(String dateString,Boolean hasTime){  Matcher m=regex.matcher(dateString);  if (!m.find()) {    throw Messages.INSTANCE.getIllegalArgumentException(19,dateString);  }  int i=1;  int year=Integer.parseInt(m.group(i++));  int month=Integer.parseInt(m.group(i++));  int date=Integer.parseInt(m.group(i++));  i++;  String hourStr=m.group(i++);  if (hasTime == null) {    hasTime=(hourStr != null);  }  if (!hasTime) {    return new DateTimeComponents(year,month,date);  }  int hour=(hourStr == null) ? 0 : Integer.parseInt(hourStr);  String minuteStr=m.group(i++);  int minute=(minuteStr == null) ? 0 : Integer.parseInt(minuteStr);  String secondStr=m.group(i++);  int second=(secondStr == null) ? 0 : Integer.parseInt(secondStr);  boolean utc="Z".equals(m.group(i++));  return new DateTimeComponents(year,month,date,hour,minute,second,utc);}  }
class C{  public ConnectException(String s,Exception ex){  super(s,ex);}  }
class C{  protected void sequence_SwitchStatement(ISerializationContext context,SwitchStatement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void findAndSetJSRCallSite(int pred,BasicBlock retBB,int otherRetCount,boolean[] seenAlready){  seenAlready[pred]=true;  BasicBlock jsrBB=basicBlocks[pred];  jsrBB.setState(BasicBlock.INJSR);  if (basicBlocks[pred].isJSRExit() && pred != retBB.getBlockNumber()) {    otherRetCount++;  }  if (basicBlocks[pred].isJSREntry()) {    if (otherRetCount == 0) {      setupJSRCallSite(basicBlocks[pred],retBB);      return;    } else {      otherRetCount--;    }  }  int[] predecessors=basicBlocks[pred].getPredecessors();  for (  int predecessor : predecessors) {    if (!seenAlready[predecessor]) {      findAndSetJSRCallSite(predecessor,retBB,otherRetCount,seenAlready);    }  }}  }
class C{  public static ComponentUI createUIs(ComponentUI mui,Vector uis,JComponent target){  ComponentUI ui;  ui=UIManager.getDefaults().getUI(target);  if (ui != null) {    uis.addElement(ui);    LookAndFeel[] auxiliaryLookAndFeels;    auxiliaryLookAndFeels=UIManager.getAuxiliaryLookAndFeels();    if (auxiliaryLookAndFeels != null) {      for (int i=0; i < auxiliaryLookAndFeels.length; i++) {        ui=auxiliaryLookAndFeels[i].getDefaults().getUI(target);        if (ui != null) {          uis.addElement(ui);        }      }    }  } else {    return null;  }  if (uis.size() == 1) {    return (ComponentUI)uis.elementAt(0);  } else {    return mui;  }}  }
class C{  public UpdateBuilder bindValues(String from,Collection<Statement> statements){  StringBuilder b=new StringBuilder(statements.size() * 30);  for (  Statement s : statements) {    if (s.getObject() instanceof BNode || s.getSubject() instanceof BNode) {      continue;    }    b.append("( ").append(str(s.getSubject())).append(' ');    b.append(str(s.getPredicate())).append(' ');    b.append(str(s.getObject())).append(" )\n");  }  bind(from,b.toString().trim());  return this;}  }
class C{  @Override public void onAlarm(Alarm alarm){  onDragOver(mDragObject,1);}  }
class C{  public void createSendAs(List<String> users,String name,String address,String replyTo,boolean makeDefault) throws IllegalArgumentException, ServiceException, MalformedURLException, IOException {  if (users.size() == 0) {    throw new IllegalArgumentException();  }  GenericEntry entry=new GenericEntry();  entry.addProperty(Constants.NAME,name);  entry.addProperty(Constants.ADDRESS,address);  entry.addProperty(Constants.REPLY_TO,replyTo);  entry.addProperty(Constants.MAKE_DEFAULT,String.valueOf(makeDefault));  for (  String user : users) {    logger.log(Level.INFO,"Creating send-as alias ( " + "name: " + name + ", address: "+ address+ ", replyTo: "+ replyTo+ ", makeDefault: "+ makeDefault+ " ) for user "+ user+ " ...");    insertSettings(user,entry,"sendas");    logger.log(Level.INFO,"Successfully created send-as alias.");  }}  }
class C{  List<StyleRange> mergeRanges(List<Long> changeRanges,List<Integer> highlightRanges){  if (!mergerInit(changeRanges,highlightRanges)) {    return null;  }  List<StyleRange> result=new ArrayList<>();  mergerNext();  int start=mergeRangesPosition;  boolean blue=mergeRangesIsBlue;  boolean highlight=mergeRangesIsHighlight;  while (mergerNext()) {    if (blue || highlight) {      result.add(new StyleRange(start,mergeRangesPosition - start,blue ? COLOR_BLUE : null,highlight ? colorHighlight : null));    }    start=mergeRangesPosition;    blue=mergeRangesIsBlue;    highlight=mergeRangesIsHighlight;  }  return result;}  }
class C{  protected static void errorTooManyIdentifiers(String id,String text){  Ansi buffer=Ansi.ansi();  buffer.fg(RED);  buffer.a("Too many ").a(text).a(" have been found with identifier '").a(id).a("'. Please add extra data to the identifier");  buffer.reset();  System.out.println(buffer.toString());}  }
class C{  public void testNegatePositive(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  String c="-92948782094488478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.negate());}  }
class C{  public void synthesizeWithMix(int addr,int samples,int leftVol,int rightVol){  int[] mixedSamples=new int[samples * 2];  if (leftVol == 0 && rightVol == 0) {    Arrays.fill(mixedSamples,0);  } else   if (leftVol == MAX_VOLUME && rightVol == MAX_VOLUME) {    int lengthInBytes=mixedSamples.length * 2;    IMemoryReader memoryReader=MemoryReader.getMemoryReader(addr,lengthInBytes,2);    for (int i=0; i < mixedSamples.length; i++) {      mixedSamples[i]=(short)memoryReader.readNext();    }  } else {    int lengthInBytes=mixedSamples.length * 2;    IMemoryReader memoryReader=MemoryReader.getMemoryReader(addr,lengthInBytes,2);    for (int i=0; i < samples; i++) {      short sampleLeft=(short)memoryReader.readNext();      short sampleRight=(short)memoryReader.readNext();      sampleLeft=SoundChannel.adjustSample(sampleLeft,leftVol);      sampleRight=SoundChannel.adjustSample(sampleRight,rightVol);      mixedSamples[i * 2]=sampleLeft;      mixedSamples[i * 2 + 1]=sampleRight;    }  }  mix(mixedSamples,addr,samples,MAX_VOLUME,MAX_VOLUME,false);}  }
class C{  @Override public void run() throws Exception {  this.storageManager.modifyRun(MODEL_KEY,UserWriteModel.class,null);}  }
class C{  public static void main(String[] args) throws ClassNotFoundException {  final List<String> testClasses=new ArrayList<>();  for (  String className : args) {    final Class<?> aClass=FindTestClasses.class.getClassLoader().loadClass(className);    testClasses.addAll(annotatedTestClasses(aClass));    if (testClasses.size() == 0) {      testClasses.add(defaultTestClass(aClass));    }  }  System.out.println(String.join(",",testClasses));}  }
class C{  public ServerException(String s){  super(s);}  }
class C{  public boolean isDuplicateFileName(long templateFileId,long groupId,String fileName) throws PortalException, SystemException {  boolean isExistTemplate=false;  try {    TemplateFile templateFile=templateFilePersistence.fetchByG_F_NAME(groupId,fileName);    if (Validator.isNotNull(templateFile) && templateFileId <= 0) {      isExistTemplate=true;    } else     if (Validator.isNotNull(templateFile) && templateFileId > 0 && templateFile.getTemplatefileId() != templateFileId) {      isExistTemplate=true;    }  } catch (  Exception e) {    isExistTemplate=false;  }  return isExistTemplate;}  }
class C{  public static boolean isValidContent(int c){  return (c < NUMBER_OF_CHARACTERS && (MASKS[c] & CONTENT_CHARACTER) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  @Override public synchronized List<E> subList(int start,int end){  return new Collections.SynchronizedRandomAccessList<E>(super.subList(start,end),this);}  }
class C{  public synchronized void reply(SerialReply r){  processForPollReq(r);}  }
class C{  public synchronized void paintChildren(Graphics g){  Rectangle clip=g.getClipBounds();  float targetOffset=(axis == X_AXIS) ? clip.x - lastAlloc.x : clip.y - lastAlloc.y;  int index=getViewIndexAtVisualOffset(targetOffset);  int n=getViewCount();  float offs=getChildState(index).getMajorOffset();  for (int i=index; i < n; i++) {    ChildState cs=getChildState(i);    cs.setMajorOffset(offs);    Shape ca=getChildAllocation(i);    if (intersectsClip(ca,clip)) {synchronized (cs) {        View v=cs.getChildView();        v.paint(g,ca);      }    } else {      break;    }    offs+=cs.getMajorSpan();  }}  }
class C{  public Mutable(T val){  value=val;}  }
class C{  public ComponentAnimation createAnimateHierarchyFade(final int duration,int startingOpacity){  return animateHierarchy(duration,false,startingOpacity,false);}  }
class C{  public static String emojify(String text){  return emojify(text,0);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__REWIRED_TARGET:    setRewiredTarget((SymbolTableEntry)null);  return;case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__ANY_PLUS_ACCESS:setAnyPlusAccess(ANY_PLUS_ACCESS_EDEFAULT);return;case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__NAME_OF_ANY_PLUS_PROPERTY:setNameOfAnyPlusProperty(NAME_OF_ANY_PLUS_PROPERTY_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static void encodeDimension(float value,byte dest[],int offset){  shortToSortableBytes(halfFloatToSortableShort(value),dest,offset);}  }
class C{  public CopySubsessionAction(){  super("Copy");}  }
class C{  public String group(int group){  if (first < 0)   throw new IllegalStateException("No match found");  if (group < 0 || group > groupCount())   throw new IndexOutOfBoundsException("No group " + group);  if ((groups[group * 2] == -1) || (groups[group * 2 + 1] == -1))   return null;  return getSubSequence(groups[group * 2],groups[group * 2 + 1]).toString();}  }
class C{  public void deleteMemory(){  this.longTermMemory=new BasicNetwork();  this.longTermMemory.setBot(getBot());  this.shortTermMemory=new BasicNetwork(this.longTermMemory);  this.shortTermMemory.setBot(getBot());}  }
class C{  public static boolean isDefaultTickerEnabled(){  return defaultTickerEnabled;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private static int lengthOfMimeNames(String val){  int len=val.indexOf(' ');  if (len < 0)   len=val.length();  return len;}  }
class C{  public static MetricRegistry metricRegistry(){  return metricRegistry;}  }
class C{  public static Remote exportObject(Remote obj) throws RemoteException {  int port=2000;  port+=Randomness.nextInt(20000);  final int TRIES=100;  for (int i=0; i < TRIES; i++) {    try {      int candidatePort=port + i;      return UnicastRemoteObject.exportObject(obj,candidatePort);    } catch (    RemoteException e) {    }  }  return UnicastRemoteObject.exportObject(obj,port);}  }
class C{  public IntList(int[] array,int initialSize){  assert initialSize <= array.length;  this.array=array;  this.size=initialSize;}  }
class C{  @Override public int executeUpdate(String sql,String[] columnNames) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("executeUpdate(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    }    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void generate(Class c,String element) throws SAXException {  if (c != null) {    handler.startElement("",element,element,EMPTY);    String className=c.getName();    handler.characters(className.toCharArray(),0,className.length());    handler.endElement("",element,element);  }}  }
class C{  private static void addEntriesForInfrequentBlocks(IR ir,LiveAnalysis live,HashMap<BasicBlockPair,HashSet<Register>> result){  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {    BasicBlock bb=e.nextElement();    boolean bbInfrequent=bb.getInfrequent();    for (Enumeration<BasicBlock> out=bb.getNormalOut(); out.hasMoreElements(); ) {      BasicBlock dest=out.nextElement();      boolean destInfrequent=dest.getInfrequent();      if (bbInfrequent ^ destInfrequent) {        HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,dest);        for (        Register r : liveRegisters) {          if (r.isSymbolic()) {            HashSet<Register> s=findOrCreateSplitSet(result,bb,dest);            s.add(r);          }        }      }    }  }}  }
class C{  @Override public Object execute(ExecutionEvent event) throws ExecutionException {  IWorkbenchPage activePage=HandlerUtil.getActiveWorkbenchWindow(event).getActivePage();  ISelection topSelection=activePage.getSelection();  if (topSelection != null && topSelection instanceof IStructuredSelection) {    String statusParameter=event.getParameter("droidsafe.eclipse.plugin.core.commands.parameter.methodStatus");    DroidsafeIssueResolutionStatus status=null;    if (statusParameter.equals("SAFE")) {      status=DroidsafeIssueResolutionStatus.SAFE;    } else     if (statusParameter.equals("UNSAFE")) {      status=DroidsafeIssueResolutionStatus.UNSAFE;    } else     if (statusParameter.equals("PENDING")) {      status=DroidsafeIssueResolutionStatus.PENDING;    } else     if (statusParameter.equals("UNRESOLVED")) {      status=DroidsafeIssueResolutionStatus.UNRESOLVED;    }    IStructuredSelection structuredSelection=(IStructuredSelection)topSelection;    for (    Object selection : structuredSelection.toList()) {      if (selection instanceof TreeElement<?,?>) {        TreeElement<?,?> element=(TreeElement<?,?>)selection;        setElementStatus(element,status);      }    }  }  return null;}  }
class C{  public final void append(final CharSequence text,final int start,final int end){  getView().append(text,start,end);}  }
class C{  private void push(JSONObject jo) throws JSONException {  if (this.top >= maxdepth) {    throw new JSONException("Nesting too deep.");  }  this.stack[this.top]=jo;  this.mode=jo == null ? 'a' : 'k';  this.top+=1;}  }
class C{  protected PropertyAssignmentImpl(){  super();}  }
class C{  public static boolean isIntSizeLiteral(int slot){  if (isReference(slot) || slot < getLowestInUseSlot()) {    return false;  } else {    return !numericFieldVector.get(slot);  }}  }
class C{  public boolean isAfterLast(){  return pos >= str.length();}  }
class C{  void appendTextChild(int m_char_current_start,int contentLength){  int w0=TEXT_NODE;  int w1=currentParent;  int w2=m_char_current_start;  int w3=contentLength;  int ourslot=appendNode(w0,w1,w2,w3);  previousSibling=ourslot;}  }
class C{  private static void sortCellsByPlatform(Collection<Cell> cells,ContainerWrapper parent){  String order=PlatformDefaults.getButtonOrder();  String orderLo=order.toLowerCase();  int unrelSize=PlatformDefaults.convertToPixels(1,"u",true,0,parent,null);  if (unrelSize == UnitConverter.UNABLE) {    throw new IllegalArgumentException("'unrelated' not recognized by PlatformDefaults!");  }  int[] gapUnrel=new int[]{unrelSize,unrelSize,LayoutUtil.NOT_SET};  int[] flGap=new int[]{0,0,LayoutUtil.NOT_SET};  for (  Cell cell : cells) {    if (cell.hasTagged == false) {      continue;    }    CompWrap prevCW=null;    boolean nextUnrel=false;    boolean nextPush=false;    ArrayList<CompWrap> sortedList=new ArrayList<CompWrap>(cell.compWraps.size());    for (int i=0, iSz=orderLo.length(); i < iSz; i++) {      char c=orderLo.charAt(i);      if (c == '+' || c == '_') {        nextUnrel=true;        if (c == '+') {          nextPush=true;        }      } else {        String tag=PlatformDefaults.getTagForChar(c);        if (tag != null) {          for (int j=0, jSz=cell.compWraps.size(); j < jSz; j++) {            CompWrap cw=cell.compWraps.get(j);            if (tag.equals(cw.cc.getTag())) {              if (Character.isUpperCase(order.charAt(i))) {                cw.adjustMinHorSizeUp(PlatformDefaults.getMinimumButtonWidth().getPixels(0,parent,cw.comp));              }              sortedList.add(cw);              if (nextUnrel) {                (prevCW != null ? prevCW : cw).mergeGapSizes(gapUnrel,cell.flowx,prevCW == null);                if (nextPush) {                  cw.forcedPushGaps=1;                  nextUnrel=false;                  nextPush=false;                }              }              if (c == 'u') {                nextUnrel=true;              }              prevCW=cw;            }          }        }      }    }    if (sortedList.size() > 0) {      CompWrap cw=sortedList.get(sortedList.size() - 1);      if (nextUnrel) {        cw.mergeGapSizes(gapUnrel,cell.flowx,false);        if (nextPush) {          cw.forcedPushGaps|=2;        }      }      if (cw.cc.getHorizontal().getGapAfter() == null) {        cw.setGaps(flGap,3);      }      cw=sortedList.get(0);      if (cw.cc.getHorizontal().getGapBefore() == null) {        cw.setGaps(flGap,1);      }    }    if (cell.compWraps.size() == sortedList.size()) {      cell.compWraps.clear();    } else {      cell.compWraps.removeAll(sortedList);    }    cell.compWraps.addAll(sortedList);  }}  }
class C{  public static Todo instance(Context context){  Todo instance=context.get(todoKey);  if (instance == null)   instance=new Todo(context);  return instance;}  }
class C{  public final void addBatch() throws SQLException {  if (m_batchCount > MAX_BATCH_COUNT) {    flushBatch();  }  m_ps.addBatch();  ++m_batchCount;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  private void checkType(PojoDescriptor type){  assertFalse("Type key class name should be defined",type.keyClassName().isEmpty());  assertFalse("Type value class name should be defined",type.valueClassName().isEmpty());  Collection<PojoField> keyFields=type.keyFields();  assertEquals("Key type should have 1 field",1,keyFields.size());  checkField(keyFields.iterator().next(),"pk",true,int.class);  List<PojoField> fields=type.fields();  assertEquals("Value type should have 15 fields",16,fields.size());  Iterator<PojoField> fieldsIt=fields.iterator();  checkField(fieldsIt.next(),"pk",true,int.class);  if ("Objects".equals(type.valueClassName())) {    checkField(fieldsIt.next(),"boolcol",false,Boolean.class);    checkField(fieldsIt.next(),"bytecol",false,Byte.class);    checkField(fieldsIt.next(),"shortcol",false,Short.class);    checkField(fieldsIt.next(),"intcol",false,Integer.class);    checkField(fieldsIt.next(),"longcol",false,Long.class);    checkField(fieldsIt.next(),"floatcol",false,Float.class);    checkField(fieldsIt.next(),"doublecol",false,Double.class);    checkField(fieldsIt.next(),"doublecol2",false,Double.class);  } else {    checkField(fieldsIt.next(),"boolcol",true,boolean.class);    checkField(fieldsIt.next(),"bytecol",true,byte.class);    checkField(fieldsIt.next(),"shortcol",true,short.class);    checkField(fieldsIt.next(),"intcol",true,int.class);    checkField(fieldsIt.next(),"longcol",true,long.class);    checkField(fieldsIt.next(),"floatcol",true,float.class);    checkField(fieldsIt.next(),"doublecol",true,double.class);    checkField(fieldsIt.next(),"doublecol2",true,double.class);  }  checkField(fieldsIt.next(),"bigdecimalcol",false,BigDecimal.class);  checkField(fieldsIt.next(),"strcol",false,String.class);  checkField(fieldsIt.next(),"datecol",false,Date.class);  checkField(fieldsIt.next(),"timecol",false,Time.class);  checkField(fieldsIt.next(),"tscol",false,Timestamp.class);  checkField(fieldsIt.next(),"arrcol",false,Object.class);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_linkingOp_1_();}  }
class C{  static public byte decodeByte(final int v){  int i=v;  if (i < 0) {    i=i + 0x80;  } else {    i=i - 0x80;  }  return (byte)(i & 0xff);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:01.293 -0500",hash_original_method="CF7A7A96F9B6499845E300F4AB5BE8D8",hash_generated_method="B826C2CCAE61A684F8C94C27EC0AF85A") synchronized void addHistoryItem(WebHistoryItem item){  ++mCurrentIndex;  final int size=mArray.size();  final int newPos=mCurrentIndex;  if (newPos != size) {    for (int i=size - 1; i >= newPos; i--) {      final WebHistoryItem h=mArray.remove(i);    }  }  mArray.add(item);  if (mCallbackProxy != null) {    mCallbackProxy.onNewHistoryItem(item);  }}  }
class C{  public ReplDBMSHeaderData(long seqno,short fragno,boolean lastFrag,String sourceId,long epochNumber,String eventId,String shardId,Timestamp extractedTstamp,long latency){  this.seqno=seqno;  this.fragno=fragno;  this.lastFrag=lastFrag;  this.sourceId=sourceId;  this.epochNumber=epochNumber;  this.eventId=eventId;  this.shardId=shardId;  this.extractedTstamp=extractedTstamp;  this.appliedLatency=latency;}  }
class C{  private Node<ChallengeHandler,UriElement> findBestMatchingNode(String location){  List<Token<UriElement>> tokens=tokenize(location);  int tokenIdx=0;  return rootNode.findBestMatchingNode(tokens,tokenIdx);}  }
class C{  public StackTrace(RVMThread rvmThread){  assertThreadBlockedOrCurrent(rvmThread);  boolean isVerbose=false;  int traceIndex=0;  if (VM.VerifyAssertions && VM.VerboseStackTracePeriod > 0) {synchronized (StackTrace.class) {      traceIndex=lastTraceIndex++;    }    isVerbose=(traceIndex % VM.VerboseStackTracePeriod == 0);  }  int numFrames=countFramesUninterruptible(rvmThread);  compiledMethods=new int[numFrames];  instructionOffsets=new int[numFrames];  recordFramesUninterruptible(rvmThread);  if (isVerbose) {    VM.disableGC();    VM.sysWriteln("[ BEGIN Verbosely dumping stack at time of creating StackTrace # ",traceIndex);    RVMThread.dumpStack();    VM.sysWriteln("END Verbosely dumping stack at time of creating StackTrace # ",traceIndex," ]");    VM.enableGC();  }}  }
class C{  public GeoConcavePolygon(final PlanetModel planetModel,final List<GeoPoint> pointList){  this(planetModel,pointList,null);}  }
class C{  public LongSparseArray(){  this(10);}  }
class C{  static MediaType createVideoType(String subtype){  return create(VIDEO_TYPE,subtype);}  }
class C{  public void remove(){  return;}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  public static byte[] append(byte[] pck1,byte[] pck2){  byte packet[]=new byte[pck1.length + pck2.length];  for (int i=0; i < pck1.length; i++)   packet[i]=pck1[i];  for (int i=0; i < pck2.length; i++)   packet[i + pck1.length]=pck2[i];  return packet;}  }
class C{  private void wrapText(){  if (atEnd()) {    setPosition(0);    updateMatcher();  }}  }
class C{  public int available() throws IOException {  if (eof || closed) {    return 0;  }  int n=in.available();  return n > remaining ? remaining : n;}  }
class C{  private void loadOverrideProperties(String uri){  try {    File f=new File(uri);    Properties temp=new Properties();    if (f.exists()) {      info("Found config override file " + f.getAbsolutePath());      try {        InputStream readStream=new BufferedInputStream(new FileInputStream(f));        try {          temp.load(readStream);        }  finally {          readStream.close();        }      } catch (      IOException iex) {        warning("Error while loading override properties file; skipping.",iex);        return;      }    } else {      InputStream in=null;      try {        URL url=new URL(uri);        in=new BufferedInputStream(url.openStream());        info("Found config override URI " + uri);        temp.load(in);      } catch (      MalformedURLException e) {        warning("URI for override properties is malformed, skipping: " + uri);        return;      }catch (      IOException e) {        warning("Overridden properties could not be loaded from URI: " + uri,e);        return;      } finally {        if (in != null)         try {          in.close();        } catch (        IOException e) {        }      }    }    Enumeration elem=this.properties.keys();    List lp=Collections.list(elem);    Collections.sort(lp);    Iterator iter=lp.iterator();    int cnt=0;    while (iter.hasNext()) {      String key=(String)iter.next();      String val=temp.getProperty(key);      if (val != null) {        this.properties.setProperty(key,val);        finer("  " + key + " -> "+ val);        cnt++;      }    }    finer("Configuration: " + cnt + " properties overridden from secondary properties file.");    Enumeration allRead=temp.keys();    List ap=Collections.list(allRead);    Collections.sort(ap);    iter=ap.iterator();    cnt=0;    while (iter.hasNext()) {      String key=(String)iter.next();      String val=temp.getProperty(key);      if (val != null) {        this.properties.setProperty(key,val);        finer("  (+)" + key + " -> "+ val);        cnt++;      }    }    finer("Configuration: " + cnt + " properties added from secondary properties file.");  } catch (  SecurityException e) {    System.err.println(e.getLocalizedMessage());  }}  }
class C{  public static void addTag(Tag tag){  if (getListOfTags().contains(tag)) {    return;  }  getListOfTags().add(tag);  getMapOfTags().put(tag.getId(),tag);}  }
class C{  protected synchronized void updateEntry(String address,URL localFileUrl,long expiration){  DBEntry entry=(DBEntry)this.db.getObject(address);  if (entry == null)   return;  entry.state=DBEntry.LOCAL;  entry.localUrl=localFileUrl;  entry.contentType=WWIO.makeMimeTypeForSuffix(WWIO.getSuffix(localFileUrl.getPath()));  entry.expiration=expiration;  entry.lastUpdateTime=System.currentTimeMillis();}  }
class C{  public ParallelTaskInvalidException(String error,Exception t){  super(error,t);}  }
class C{  public TerminalSize max(TerminalSize other){  return withColumns(Math.max(columns,other.columns)).withRows(Math.max(rows,other.rows));}  }
class C{  void checkLogSyncTask() throws InterruptedException {  if (flushIntervalMillis > 0 && logSyncTask.isFinished()) {    stopLogSyncTask();    startLogSyncTask();  }}  }
class C{  private JSONObject moveDirectory(File srcDir,File destinationDir) throws IOException, JSONException, InvalidModificationException, NoModificationAllowedException, FileExistsException {  if (destinationDir.exists() && destinationDir.isFile()) {    throw new InvalidModificationException("Can't rename a file to a directory");  }  if (isCopyOnItself(srcDir.getAbsolutePath(),destinationDir.getAbsolutePath())) {    throw new InvalidModificationException("Can't move itself into itself");  }  if (destinationDir.exists()) {    if (destinationDir.list().length > 0) {      throw new InvalidModificationException("directory is not empty");    }  }  if (!srcDir.renameTo(destinationDir)) {    copyDirectory(srcDir,destinationDir);    if (destinationDir.exists()) {      removeDirRecursively(srcDir);    } else {      throw new IOException("moved failed");    }  }  return makeEntryForFile(destinationDir);}  }
class C{  public Vector2 sub(Vector2 v){  x-=v.x;  y-=v.y;  return this;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public PaymentDeregistrationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean isDynamizable(){  return false;}  }
class C{  protected Node newNode(){  return new XBLOMTemplateElement();}  }
class C{  public void fetchData() throws TException {  TTransport transport;  transport=new TSocket(host,port);  transport.open();  try {    TProtocol protocol=new TBinaryProtocol(transport);    TReplicationService.Client client=new TReplicationService.Client(protocol);    retiredJobs=new ArrayList<>();    long marker=-1;    while (true) {      List<TReplicationJob> jobBatch=client.getRetiredJobs(marker,JOB_FETCH_SIZE);      if (jobBatch.size() == 0) {        break;      }      retiredJobs.addAll(jobBatch);      marker=jobBatch.get(jobBatch.size() - 1).getId();    }    activeJobs=new ArrayList<>();    marker=-1;    while (true) {      List<TReplicationJob> jobBatch=client.getActiveJobs(marker,JOB_FETCH_SIZE);      if (jobBatch.size() == 0) {        break;      }      activeJobs.addAll(jobBatch);      marker=jobBatch.get(jobBatch.size() - 1).getId();    }    lag=client.getLag();  }  finally {    transport.close();  }}  }
class C{  public void resetTouchedVservers(){  props.setProperty(VSERVERS_TOUCHED,"");}  }
class C{  public void normalize(){  if (_path == null) {    return;  }  _path=StringUtil.gsub("/./","/",_path);  if (_path.startsWith("./")) {    _path=_path.substring(2);  }  if (_path.endsWith("/.")) {    _path=_path.substring(0,_path.length() - 1);  }  if (_path.indexOf("/../") == -1 && !_path.endsWith("/..")) {    return;  }  LinkedList<String> segments=new LinkedList<String>();  StringTokenizer st=new StringTokenizer(_path,"/");  while (st.hasMoreTokens()) {    segments.add(st.nextToken());  }  boolean lastSegmentRemoved=false;  int i=1;  while (i < segments.size()) {    String segment=segments.get(i);    if (segment.equals("..")) {      String prevSegment=segments.get(i - 1);      if (prevSegment.equals("..")) {        i+=2;      } else {        if (i == segments.size() - 1) {          lastSegmentRemoved=true;        }        segments.remove(i);        segments.remove(i - 1);        if (i > 1) {          i--;        }      }    } else {      i++;    }  }  StringBuilder newPath=new StringBuilder(_path.length());  if (_path.startsWith("/")) {    newPath.append('/');  }  int segmentCount=segments.size();  for (i=0; i < segmentCount - 1; i++) {    newPath.append(segments.get(i));    newPath.append('/');  }  if (segmentCount > 0) {    String lastSegment=segments.get(segmentCount - 1);    newPath.append(lastSegment);    if (_path.endsWith("/") || lastSegmentRemoved) {      newPath.append('/');    }  }  _path=newPath.toString();}  }
class C{  public static int[] toIntArray(Sequence<IString> sequence,Vocabulary index){  int sz=sequence.size();  int[] intArray=new int[sequence.size()];  for (int i=0; i < sz; i++) {    intArray[i]=index.indexOf(sequence.get(i).toString());  }  return intArray;}  }
class C{  public boolean isFollowing(){  return isFollowing;}  }
class C{  protected TagTitle createTagTitle(JSDocToken token,ITagDefinition tagDefinition){  TagTitle tagTitle=DomFactory.eINSTANCE.createTagTitle();  tagTitle.setTitle(tagDefinition.getTitle());  tagTitle.setActualTitle(token.token);  tagTitle.setBegin(token.start);  tagTitle.setEnd(token.end);  return tagTitle;}  }
class C{  public T caseNamedElement(NamedElement object){  return null;}  }
class C{  private static String abbreviateName(String inString,boolean lastOnly){  StringReader in=new StringReader(inString);  StreamTokenizer p=new StreamTokenizer(in);  p.wordChars('&','&');  p.wordChars('@','@');  p.wordChars(':',':');  p.ordinaryChar(',');  p.ordinaryChar('-');  int c;  String lastNameHold=null;  String lastInitialHold=null;  StringBuffer outString=new StringBuffer();  try {    out:     while (true) {      c=p.nextToken();switch (c) {case StreamTokenizer.TT_EOF:        break out;case StreamTokenizer.TT_EOL:      System.err.println("warning: unexpected EOL token");    break;case StreamTokenizer.TT_NUMBER:  break;case ',':break out;case StreamTokenizer.TT_WORD:if (p.sval.endsWith(":")) outString.append(p.sval + " "); else if (prefixSuffixT.get(p.sval.toLowerCase()) == null) {if (!lastOnly) {  if (lastInitialHold != null)   outString.append(lastInitialHold);  lastInitialHold=p.sval.substring(0,1) + ". ";}lastNameHold=p.sval;}break;default :break;}}outString.append(lastNameHold);} catch (IOException e) {e.printStackTrace();}return outString.toString();}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public void testMixedJsonValue() throws Exception {  ObjectMapper m=new ObjectMapper();  String result=serializeAsString(m,new ToStringValueClass2("xyz"));  assertEquals("\"xyz\"",result);}  }
class C{  public static Object genericClone(Object o){  if (o.getClass().isArray()) {    return deepClone(o);  }  if (!(o instanceof Cloneable)) {    LOG.log(Level.SEVERE,"generic clone called on a non clonable type");    return null;  }  try {    return o.getClass().getMethod("clone").invoke(o);  } catch (  Exception e) {    LOG.log(Level.WARNING,"Implements cloneable, but does not apparently make clone public.",e);    return null;  }}  }
class C{  private void maybePerformMigrationTasks(){  if (DocumentModeManager.getInstance(this).isOptOutCleanUpPending()) {    cleanUpChromeRecents(DocumentModeManager.getInstance(this).isOptedOutOfDocumentMode());    DocumentModeManager.getInstance(this).setOptOutCleanUpPending(false);  }}  }
class C{  public DeleteEdit(int offset,int length){  super(offset,length);}  }
class C{  public static boolean isInterface(TypeSymbol typeSymbol){  return (typeSymbol.type.isInterface() || Util.hasAnnotationType(typeSymbol,JSweetConfig.ANNOTATION_INTERFACE));}  }
class C{  @Override public int compareTo(CLIQUEInterval other){  if (dimension < other.dimension) {    return -1;  }  if (dimension > other.dimension) {    return 1;  }  if (min < other.min) {    return -1;  }  if (min > other.min) {    return 1;  }  if (max != other.max) {    throw new RuntimeException("Should never happen!");  }  return 0;}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  @Override public void addInstanceListener(InstanceListener dsl){  m_instanceListeners.add(dsl);}  }
class C{  public static int incUpdateCount(int cnt){  Logger.trace("stmt.getUpdateCount()=" + cnt);  TraceContext ctx=TraceContextManager.getContext();  if (ctx == null) {    return cnt;  }  SqlStep3 lastSqlStep=(SqlStep3)ctx.lastSqlStep;  if (lastSqlStep == null) {    return cnt;  }  int lastCnt=lastSqlStep.updated;  if (lastCnt == -2 && cnt > 0) {    lastCnt=cnt;    lastSqlStep.updated=lastCnt;  } else   if (lastCnt >= 0 && cnt > 0) {    lastCnt+=cnt;    lastSqlStep.updated=lastCnt;  }  return cnt;}  }
class C{  public JSONArray(Collection<Object> collection){  this.myArrayList=new ArrayList<Object>(collection);}  }
class C{  public Builder clearExtensions(){  localeBuilder.clearExtensions();  return this;}  }
class C{  public static double jsd(int[] h1,int[] h2){  assert (h1.length == h2.length);  double sum=0d;  for (int i=0; i < h1.length; i++) {    sum+=(h1[i] > 0 ? h1[i] * Math.log(2d * h1[i] / (h1[i] + h2[i])) : 0) + (h2[i] > 0 ? h2[i] * Math.log(2d * h2[i] / (h1[i] + h2[i])) : 0);  }  return sum;}  }
class C{  @Override protected void initialize(){  List<String> words;  super.initialize();  m_Words=new HashSet<String>();  words=read();  for (  String word : words) {    if (!word.startsWith("#"))     m_Words.add(word);  }}  }
class C{  public boolean acceptPatternMatch(TextSearchMatchAccess matchAccess) throws CoreException {  return true;}  }
class C{  public static void main(String[] args){  TestParamTaglet tester=new TestParamTaglet();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public static void writeHeaderContentLocation(WspEncodingVersion wspEncodingVersion,OutputStream os,String contentLocation) throws IOException {  int headerId=WspUtil.getWellKnownHeaderId(wspEncodingVersion,WapConstants.HEADER_CONTENT_LOCATION);  WspUtil.writeShortInteger(os,headerId);  WspUtil.writeTextString(os,contentLocation);}  }
class C{  public QuadTree(){  root=new QuadNode(new Rectangle2D.Double(0,0,800,600));}  }
class C{  public ActionErrors validateForm(MotivoRechazoForm motivosForm,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (StringUtils.isEmpty(motivosForm.getMotivo())) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_DESCRIPCION,request.getLocale())));  }  if (motivosForm.getTipoSolicitud() == 0) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_TIPO_CONSULTA,request.getLocale())));  }  return errors;}  }
class C{  public void writeUTF(String s) throws IOException {  int numchars=s.length();  int numbytes=0;  for (int i=0; i < numchars; i++) {    int c=s.charAt(i);    if ((c >= 0x0001) && (c <= 0x007F))     numbytes++; else     if (c > 0x07FF)     numbytes+=3; else     numbytes+=2;  }  if (numbytes > 65535)   throw new UTFDataFormatException();  out.write((numbytes >>> 8) & 0xFF);  out.write(numbytes & 0xFF);  for (int i=0; i < numchars; i++) {    int c=s.charAt(i);    if ((c >= 0x0001) && (c <= 0x007F)) {      out.write(c);    } else     if (c > 0x07FF) {      out.write(0xE0 | ((c >> 12) & 0x0F));      out.write(0x80 | ((c >> 6) & 0x3F));      out.write(0x80 | (c & 0x3F));      written+=2;    } else {      out.write(0xC0 | ((c >> 6) & 0x1F));      out.write(0x80 | (c & 0x3F));      written+=1;    }  }  written+=numchars + 2;}  }
class C{  public void rebuild(){  final Collection<T> toReadd=getAll();  root.cuttoffDistance=-1;  root.far=null;  root.close=null;  root.coordinate=null;  root.value=null;  root.recomputeSize();  add(toReadd);}  }
class C{  public ParseException toParseException(){  ParseException result=null;  Map<Element,List<ErrorContent>> errors=vc.getErrors();  for (  Map.Entry<Element,List<ErrorContent>> entry : errors.entrySet()) {    Element element=entry.getKey();    String location=element.getElementKey().getId().toString();    List<ErrorContent> codes=entry.getValue();    for (    ErrorContent errorCode : codes) {      ParseException pe=new ParseException(errorCode);      pe.setLocation(location);      if (result == null) {        result=pe;      } else {        result.addSibling(pe);      }    }  }  return result;}  }
class C{  public boolean isEmpty(){  return text.length() == 0;}  }
class C{  public ClassificationDataSet(int numerical,CategoricalData[] categories,CategoricalData predicting){  this.predicting=predicting;  this.categories=categories;  this.numNumerVals=numerical;  datapoints=new ArrayList<DataPoint>();  category=new IntList();  generateGenericNumericNames();}  }
class C{  public static HttpUrl testUrl(String path){  String urlString="https://localhost:4445" + path;  HttpUrl url=HttpUrl.parse(urlString);  checkState(url != null,"URL %s invalid",urlString);  return url;}  }
class C{  private ContributionProjectTypeConstants(){}  }
class C{  public List<String> listMyDBs(String owner,boolean restricted){  Connection conn=null;  try {    conn=getConnection();    return listMyDBs(conn,owner,restricted);  } catch (  Exception ex) {    logger.log(Level.SEVERE,"Exception",ex);  } finally {    DBUtils.close(conn);  }  return null;}  }
class C{  protected int add(F f){  return fMap.add(f);}  }
class C{  public ResumeCommand(final int packetId){  super(DebugCommandType.CMD_RESUME,packetId);}  }
class C{  public SVGPointShapeElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public long readLong(){  long x=0;  for (int i=0; i < 8; i++) {    char c=readChar();    x<<=8;    x|=c;  }  return x;}  }
class C{  public static int invert(int n,int modulus){  n%=modulus;  if (n < 0) {    n+=modulus;  }  return IntEuclidean.calculate(n,modulus).x;}  }
class C{  public N3Writer(OutputStream out){  ttlWriter=new TurtleWriter(out);}  }
class C{  public static final int monthLength(int year,int month){  return MONTH_LENGTH[month + (isLeapYear(year) ? 12 : 0)];}  }
class C{  public Object run(String scriptName,Binding binding) throws ResourceException, ScriptException {  return createScript(scriptName,binding).run();}  }
class C{  @HLEFunction(nid=0x644395E2,version=150,checkInsideInterrupt=true) public int sceKernelGetModuleIdList(TPointer32 resultBuffer,int resultBufferSize,TPointer32 idCountAddr){  int idCount=0;  int resultBufferOffset=0;  for (  SceModule module : Managers.modules.values()) {    if (!module.isFlashModule && module.isLoaded) {      if (resultBufferOffset < resultBufferSize) {        resultBuffer.setValue(resultBufferOffset,module.modid);        resultBufferOffset+=4;      }      idCount++;    }  }  idCountAddr.setValue(idCount);  return 0;}  }
class C{  @Override public void close(){  manager.checkAccess();  target.close();  setLevel(Level.OFF);}  }
class C{  public void parse(Element parent,ElementMetadata<?,?> parentMetadata,Element element,ElementMetadata<?,?> metadata) throws ParseException {  Preconditions.checkState(path.selectsElement(),"An attribute path cannot be used to parse elements.");  parent=createParentElement(path,parent);  ElementKey<?,?> lastKey=path.getSelectedElementKey();  try {    Element child=Element.createElement(lastKey,element);    parent.addElement(child);  } catch (  ContentCreationException e) {    throw new ParseException(e);  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(80);  int modifier=getModifiers();  if (modifier != 0) {    sb.append(Modifier.toString(modifier)).append(' ');  }  appendArrayType(sb,getType());  sb.append(' ');  sb.append(getDeclaringClass().getName()).append('.').append(getName());  return sb.toString();}  }
class C{  @Override public void deletePartitions(ConnectorTableHandle tableHandle,List<String> partitionIds){  if (!(metastore instanceof MetacatHiveMetastore)) {    throw new IllegalStateException("This metastore does not implement dropPartitions");  }  checkNotNull(tableHandle,"tableHandle is null");  SchemaTableName tableName=schemaTableName(tableHandle);  try {    ((MetacatHiveMetastore)metastore).dropPartitions(tableName.getSchemaName(),tableName.getTableName(),partitionIds);    metastore.flushCache();  } catch (  NoSuchObjectException e) {    throw new PartitionNotFoundException(tableName,partitionIds.toString());  }}  }
class C{  private List<double[]> generateWeights(int divisions){  List<double[]> result=new ArrayList<double[]>();  double[] weight=new double[numberOfObjectives];  generateRecursive(result,weight,numberOfObjectives,divisions,divisions,0);  return result;}  }
class C{  @Override public long handleCommit(final long commitTime){  if (error != null)   throw new IndexInconsistentError(error);  final IRootBlockView view=journal.getRootBlockView();  final ByteBuffer rbv=view.asReadOnlyBuffer();  final ByteBuffer bb=ByteBuffer.allocate(rbv.capacity());  for (int i=0; i < rbv.capacity(); i++) {    bb.put(rbv.get());  }  bb.flip();  return journal.write(bb);}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  protected void removeQueue(Queue q){synchronized (this.queues) {    this.queues.remove(q);  }}  }
class C{  public String toEncodedString(){  StringBuilder buf=new StringBuilder();  buf.append(getMinPriority());  buf.append(FIELD_DELIMITER);  for (Iterator<String> i=activeBugCategorySet.iterator(); i.hasNext(); ) {    buf.append(i.next());    if (i.hasNext()) {      buf.append(LISTITEM_DELIMITER);    }  }  buf.append(FIELD_DELIMITER);  buf.append(displayFalseWarnings ? "true" : "false");  buf.append(FIELD_DELIMITER);  buf.append(getMinRank());  return buf.toString();}  }
class C{  public final void removeMessages(int what){  mExec.removeMessages(what);}  }
class C{  private boolean sanityCheck(int tagLen,int fragmentLen){  if (!isCBCMode()) {    return fragmentLen >= tagLen;  }  int blockSize=cipher.getBlockSize();  if ((fragmentLen % blockSize) == 0) {    int minimal=tagLen + 1;    minimal=(minimal >= blockSize) ? minimal : blockSize;    if (protocolVersion.v >= ProtocolVersion.TLS11.v) {      minimal+=blockSize;    }    return (fragmentLen >= minimal);  }  return false;}  }
class C{  public static boolean isApplicable(@NotNull final PyImportStatementBase importStatementBase){  if (importStatementBase.getFullyQualifiedObjectNames().isEmpty() && !(importStatementBase instanceof PyFromImportStatement && ((PyFromImportStatement)importStatementBase).isStarImport())) {    return false;  }  final Sdk sdk=getPythonSdk(importStatementBase);  if (sdk == null) {    return false;  }  final PythonSdkFlavor flavor=PythonSdkFlavor.getFlavor(sdk);  if (flavor instanceof IronPythonSdkFlavor) {    return true;  }  return isGtk(importStatementBase);}  }
class C{  protected boolean beforeSave(boolean newRecord){  BigDecimal difference=getTargetQty();  difference=difference.subtract(getConfirmedQty());  difference=difference.subtract(getScrappedQty());  setDifferenceQty(difference);  return true;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public CcdRunner2(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);}  }
class C{  public static int xToLonE7(final int screenWidth,final BoundingBox viewBox,final float x){  return (int)(((double)x / (double)screenWidth * viewBox.getWidth()) + viewBox.getLeft());}  }
class C{  private static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new HashMap<String,String>();  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  PreparedStatement prepare(String sql) throws SQLException {  if (SysProperties.CHECK2) {    if (!Thread.holdsLock(database)) {      throw DbException.throwInternalError();    }  }  PreparedStatement prep=prepared.remove(sql);  if (prep == null) {    prep=conn.prepareStatement(sql);  }  return prep;}  }
class C{  public TimeoutException(String msg){  super(msg);}  }
class C{  @Override public String toString(){  return "" + StringUtils.getShortForm(d);}  }
class C{  public VarianceAdaption(WeightingMutation weightingMutation,int intervalSize){  this.weightingMutation=weightingMutation;  this.intervalSize=intervalSize;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return PEDIGREE;case 2:  return DATAUNIT;default :return null;}}  }
class C{  public void visitJumpInsn(int opcode,Label label){  if (mv != null) {    mv.visitJumpInsn(opcode,label);  }}  }
class C{  public boolean hasMimeType(String mimeType){  return MimeUtils.hasMimeType(mimeType);}  }
class C{  public ExecuteClause_ createExecuteClause_(){  ExecuteClause_Impl executeClause_=new ExecuteClause_Impl();  return executeClause_;}  }
class C{  public void populateStdCmdLineOptions(CmdLineOptions options) throws OpenStegoException {}  }
class C{  public Matrix solve(final Matrix B){  QL.require(B.rows() == this.m,Matrix.MATRIX_IS_INCOMPATIBLE);  if (!this.isNonSingular())   throw new LibraryException(MATRIX_IS_SINGULAR);  final Matrix X=B.range(piv,0,B.cols());  for (int k=0; k < n; k++) {    for (int i=k + 1; i < n; i++) {      for (int j=0; j < B.cols(); j++) {        X.$[X.addr.op(i,j)]-=X.$[X.addr.op(k,j)] * LU.$[LU.addr.op(i,k)];      }    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < B.cols(); j++) {      X.$[X.addr.op(k,j)]/=LU.$[LU.addr.op(k,k)];    }    for (int i=0; i < k; i++) {      for (int j=0; j < B.cols(); j++) {        X.$[X.addr.op(i,j)]-=X.$[X.addr.op(k,j)] * LU.$[LU.addr.op(i,k)];      }    }  }  return X;}  }
class C{  static boolean lastInMethod(final Statement s){  final Block b=az.block(parent(s));  return last(s,statements(b)) && iz.methodDeclaration(parent(b));}  }
class C{  public static IdString fromDecoded(String id){  return new IdString(Url.encode(id));}  }
class C{  public Entities(){  super(Entity.class);}  }
class C{  public AbstractXpAppCompatSpinner(Context context,AttributeSet attrs,int defStyleAttr){  this(context,attrs,defStyleAttr,-1);}  }
class C{  public TypedProperties(){  super();}  }
class C{  public static Parameter toParameter(VOParameter voParameter) throws ValidationException {  Parameter parameter=new Parameter();  parameter.setConfigurable(voParameter.isConfigurable());  String paramValue=voParameter.getValue();  parameter.setValue(paramValue);  ParameterDefinition definition=toParameterDefinition(voParameter.getParameterDefinition());  parameter.setParameterDefinition(definition);  return parameter;}  }
class C{  void save(){  if (counterSave == null) {    counterSave=new byte[blockSize];    encryptedCounterSave=new byte[blockSize];  }  System.arraycopy(counter,0,counterSave,0,blockSize);  System.arraycopy(encryptedCounter,0,encryptedCounterSave,0,blockSize);  usedSave=used;}  }
class C{  static public String toString(final long timestamp){  if (timestamp == ITx.UNISOLATED)   return "unisolated";  if (timestamp == ITx.READ_COMMITTED)   return "read-committed";  if (isReadWriteTx(timestamp))   return "readWriteTX(" + timestamp + ")";  return "readOnly(" + timestamp + ")";}  }
class C{  public void testTemporalFixedOverHash(){  EPServiceProvider epService=allocateEngine(false);  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.startTest(epService,this.getClass(),getName());  }  EPServiceProviderSPI spi=(EPServiceProviderSPI)epService;  sendTimeEvent(epService,"2002-05-1T07:00:00.000");  EPStatement stmtCtx=epService.getEPAdministrator().createEPL("create context NestedContext " + "context EightToNine as start (0, 8, *, *, *) end (0, 9, *, *, *), " + "context HashedCtx coalesce hash_code(intPrimitive) from SupportBean granularity 10 preallocate");  assertEquals(0,spi.getSchedulingService().getScheduleHandleCount());  SupportUpdateListener listener=new SupportUpdateListener();  String[] fields="c1,c2".split(",");  EPStatementSPI statement=(EPStatementSPI)epService.getEPAdministrator().createEPL("context NestedContext select " + "theString as c1, count(*) as c2 from SupportBean group by theString");  statement.addListener(listener);  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  assertFalse(listener.isInvoked());  sendTimeEvent(epService,"2002-05-1T08:00:00.000");  epService.getEPRuntime().sendEvent(new SupportBean("E2",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{"E2",1L});  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{"E1",1L});  epService.getEPRuntime().sendEvent(new SupportBean("E2",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{"E2",2L});  sendTimeEvent(epService,"2002-05-1T09:00:00.000");  epService.getEPRuntime().sendEvent(new SupportBean("E2",0));  assertFalse(listener.isInvoked());  sendTimeEvent(epService,"2002-05-2T08:00:00.000");  epService.getEPRuntime().sendEvent(new SupportBean("E2",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{"E2",1L});  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.endTest();  }}  }
class C{  public Settings(Settings s){  this.mmsc=s.getMmsc();  this.proxy=s.getProxy();  this.port=s.getPort();  this.userAgent=s.getAgent();  this.uaProfUrl=s.getUserProfileUrl();  this.uaProfTagName=s.getUaProfTagName();  this.group=s.getGroup();  this.maxAttachmentSize=s.getMaxAttachmentSize();  this.wifiMmsFix=s.getWifiMmsFix();  this.deliveryReports=s.getDeliveryReports();  this.split=s.getSplit();  this.splitCounter=s.getSplitCounter();  this.stripUnicode=s.getStripUnicode();  this.signature=s.getSignature();  this.preText=s.getPreText();  this.sendLongAsMms=s.getSendLongAsMms();  this.sendLongAsMmsAfter=s.getSendLongAsMmsAfter();  this.account=s.getAccount();  this.rnrSe=s.getRnrSe();}  }
class C{  public TestFrame(){  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setBounds(100,100,450,300);  contentPane=new JPanel();  contentPane.setBorder(new EmptyBorder(5,5,5,5));  setContentPane(contentPane);  contentPane.setLayout(new BorderLayout(0,0));  JSplitPane splitPane=new JSplitPane();  contentPane.add(splitPane,BorderLayout.CENTER);  JPanel panel=new JPanel();  splitPane.setLeftComponent(panel);  panel.setLayout(new BorderLayout(0,0));  JPanel panel_2=new JPanel();  panel.add(panel_2,BorderLayout.NORTH);  JButton btnNewButton=new JButton("New button");  panel_2.add(btnNewButton);  JButton btnNewButton_1=new JButton("New button");  panel_2.add(btnNewButton_1);  JLabel lblNewLabel=new JLabel("New label");  panel_2.add(lblNewLabel);  JPanel panel_1=new JPanel();  splitPane.setRightComponent(panel_1);  panel_1.setLayout(new BorderLayout(0,0));}  }
class C{  public static byte[] readBytes(final InputStream input) throws IOException {  final int len=readVarInt32(input);  if (len == 0) {    return NO_BYTES;  }  final byte[] buf=new byte[len];  IO.readFully(input,buf,0,len);  return buf;}  }
class C{  protected static void log(String msg){}  }
class C{  public StructuralNodeModifiersTableModel(){  this.snms=new ArrayList<>();}  }
class C{  private boolean solve(char[][] board,int N,int col){  if (col == N) {    System.out.println("Solution " + (++count) + ":");    for (    char[] row : board) {      for (int j=0; j < N; j++)       System.out.print(row[j] + " ");      System.out.println();    }    System.out.println();    return false;  }  for (int i=0; i < N; i++) {    if (isSafe(board,N,i,col)) {      board[i][col]='#';      if (solve(board,N,col + 1))       return true; else       board[i][col]='.';    }  }  return false;}  }
class C{  private String referenceBridgeDisambiguation(){  StringBuilder buf=new StringBuilder();  if (owner.type != null) {    buf.append(typeSig(owner.type));    buf.append(":");  }  buf.append(classSig(tree.sym.owner.type));  buf.append(tree.sym.isStatic() ? " S " : " I ");  buf.append(typeSig(tree.sym.erasure(types)));  return buf.toString();}  }
class C{  public static double distance(double deltaX,double deltaY){  return Math.sqrt((deltaX * deltaX) + (deltaY * deltaY));}  }
class C{  public GitHubPRRepository(@Nonnull GHRepository ghRepository){  super(ghRepository);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  public static String toHex(byte[] data){  return toHex(data,0,data.length);}  }
class C{  public void test_equalToSelf(){  final V v=new V();  final IVComparator c=new IVComparator();  assertEQ(c.compare(null,null));  assertEQ(c.compare(v.sid1,v.sid1));  assertEQ(c.compare(v.inline_bnode1,v.inline_bnode1));  assertEQ(c.compare(v.noninline_uri1,v.noninline_uri1));  assertEQ(c.compare(v.inline_xsd_byte1,v.inline_xsd_byte1));}  }
class C{  protected synchronized void createStoreAndSignReceiptPackage(CashBoxInstruction cashBoxInstruction){  JWSModule signatureDevice=cashBoxParameters.getJwsSignatureModules().get(cashBoxInstruction.getUsedSignatureDevice());  RKSuite rkSuiteOfSignatureDevice=signatureDevice.getRKSuite();  RKSuite el1_rkSuite;  String el2_cashboxID;  String el3_receiptID;  Date el4_timeAndData;  double el5_taxSet_NORMAL;  double el6_taxSet_ERMAESSIGT1;  double el7_taxSet_ERMAESSIGT2;  double el8_taxSet_NULL;  double el9_taxSet_BESONDERS;  String el10_encryptedTurnOverValue;  String el11_certificateSerialNumberOrCompanyAndKeyID;  String el12_chainValue="";  el1_rkSuite=signatureDevice.getRKSuite();  el2_cashboxID=cashBoxParameters.getCashBoxId();  el3_receiptID=cashBoxInstruction.getReceiptIdentifier();  el4_timeAndData=null;  if (cashBoxInstruction.getDateToUse() != null) {    try {      el4_timeAndData=CashBoxUtils.convertISO8601toDate(cashBoxInstruction.getDateToUse());    } catch (    ParseException e) {      System.err.println("Fatal error, cannot parse date from cashbox instruction file: " + cashBoxInstruction.getDateToUse() + " is not a valid date");      System.exit(-1);    }  } else {    el4_timeAndData=new Date();  }  el11_certificateSerialNumberOrCompanyAndKeyID=signatureDevice.getSerialNumberOfKeyID();  TypeOfReceipt typeOfReceipt=cashBoxInstruction.getTypeOfReceipt();  SimplifiedReceipt simplifiedReceipt=cashBoxInstruction.getSimplifiedReceipt();  if (typeOfReceipt == TypeOfReceipt.START_BELEG) {    el5_taxSet_NORMAL=0;    el6_taxSet_ERMAESSIGT1=0;    el7_taxSet_ERMAESSIGT2=0;    el8_taxSet_NULL=0;    el9_taxSet_BESONDERS=0;    el10_encryptedTurnOverValue=encryptTurnOverCounter(cashBoxParameters.getCashBoxId(),el3_receiptID,rkSuiteOfSignatureDevice,cashBoxParameters.getTurnOverCounterLengthInBytes());    el12_chainValue=calculateChainValue(null,rkSuiteOfSignatureDevice);  } else   if (typeOfReceipt == TypeOfReceipt.STANDARD_BELEG) {    el5_taxSet_NORMAL=Precision.round(simplifiedReceipt.getTaxSetNormal(),2);    el6_taxSet_ERMAESSIGT1=Precision.round(simplifiedReceipt.getTaxSetErmaessigt1(),2);    el7_taxSet_ERMAESSIGT2=Precision.round(simplifiedReceipt.getTaxSetErmaessigt2(),2);    el8_taxSet_NULL=Precision.round(simplifiedReceipt.getTaxSetNull(),2);    el9_taxSet_BESONDERS=Precision.round(simplifiedReceipt.getTaxSetBesonders(),2);    updateTurnOverCounter(simplifiedReceipt);    el10_encryptedTurnOverValue=encryptTurnOverCounter(cashBoxParameters.getCashBoxId(),el3_receiptID,rkSuiteOfSignatureDevice,cashBoxParameters.getTurnOverCounterLengthInBytes());    if (getStoredReceipts().size() > 0) {      el12_chainValue=calculateChainValue(getStoredReceipts().get(getStoredReceipts().size() - 1).getJwsCompactRepresentation(),rkSuiteOfSignatureDevice);    }  } else   if (typeOfReceipt == TypeOfReceipt.STORNO_BELEG) {    el5_taxSet_NORMAL=Precision.round(simplifiedReceipt.getTaxSetNormal(),2);    el6_taxSet_ERMAESSIGT1=Precision.round(simplifiedReceipt.getTaxSetErmaessigt1(),2);    el7_taxSet_ERMAESSIGT2=Precision.round(simplifiedReceipt.getTaxSetErmaessigt2(),2);    el8_taxSet_NULL=Precision.round(simplifiedReceipt.getTaxSetNull(),2);    el9_taxSet_BESONDERS=Precision.round(simplifiedReceipt.getTaxSetBesonders(),2);    updateTurnOverCounter(simplifiedReceipt);    el10_encryptedTurnOverValue=CashBoxUtils.base64Encode("STO".getBytes(),false);    if (getStoredReceipts().size() > 0) {      el12_chainValue=calculateChainValue(getStoredReceipts().get(getStoredReceipts().size() - 1).getJwsCompactRepresentation(),rkSuiteOfSignatureDevice);    }  } else   if (typeOfReceipt == TypeOfReceipt.TRAINING_BELEG) {    el5_taxSet_NORMAL=Precision.round(simplifiedReceipt.getTaxSetNormal(),2);    el6_taxSet_ERMAESSIGT1=Precision.round(simplifiedReceipt.getTaxSetErmaessigt1(),2);    el7_taxSet_ERMAESSIGT2=Precision.round(simplifiedReceipt.getTaxSetErmaessigt2(),2);    el8_taxSet_NULL=Precision.round(simplifiedReceipt.getTaxSetNull(),2);    el9_taxSet_BESONDERS=Precision.round(simplifiedReceipt.getTaxSetBesonders(),2);    el10_encryptedTurnOverValue=CashBoxUtils.base64Encode("TRA".getBytes(),false);    if (getStoredReceipts().size() > 0) {      el12_chainValue=calculateChainValue(getStoredReceipts().get(getStoredReceipts().size() - 1).getJwsCompactRepresentation(),rkSuiteOfSignatureDevice);    }  } else   if (typeOfReceipt == TypeOfReceipt.NULL_BELEG) {    el5_taxSet_NORMAL=0;    el6_taxSet_ERMAESSIGT1=0;    el7_taxSet_ERMAESSIGT2=0;    el8_taxSet_NULL=0;    el9_taxSet_BESONDERS=0;    el10_encryptedTurnOverValue=encryptTurnOverCounter(cashBoxParameters.getCashBoxId(),el3_receiptID,rkSuiteOfSignatureDevice,cashBoxParameters.getTurnOverCounterLengthInBytes());    if (getStoredReceipts().size() > 0) {      el12_chainValue=calculateChainValue(getStoredReceipts().get(getStoredReceipts().size() - 1).getJwsCompactRepresentation(),rkSuiteOfSignatureDevice);    }  } else {    return;  }  ReceiptRepresentationForSignature receiptRepresentationForSignature=new ReceiptRepresentationForSignature();  receiptRepresentationForSignature.setCashBoxID(el2_cashboxID);  receiptRepresentationForSignature.setReceiptIdentifier(el3_receiptID);  receiptRepresentationForSignature.setReceiptDateAndTime(el4_timeAndData);  receiptRepresentationForSignature.setSumTaxSetNormal(el5_taxSet_NORMAL);  receiptRepresentationForSignature.setSumTaxSetErmaessigt1(el6_taxSet_ERMAESSIGT1);  receiptRepresentationForSignature.setSumTaxSetErmaessigt2(el7_taxSet_ERMAESSIGT2);  receiptRepresentationForSignature.setSumTaxSetNull(el8_taxSet_NULL);  receiptRepresentationForSignature.setSumTaxSetBesonders(el9_taxSet_BESONDERS);  receiptRepresentationForSignature.setEncryptedTurnoverValue(el10_encryptedTurnOverValue);  receiptRepresentationForSignature.setSignatureCertificateSerialNumber(el11_certificateSerialNumberOrCompanyAndKeyID);  receiptRepresentationForSignature.setSignatureValuePreviousReceipt(el12_chainValue);  String plainData=receiptRepresentationForSignature.getDataToBeSigned(el1_rkSuite);  String signedJWSCompactRep=signatureDevice.signMachineCodeRepOfReceipt(plainData,cashBoxInstruction.isSignatureDeviceDamaged());  ReceiptPackage receiptPackage=new ReceiptPackage();  receiptPackage.setCertificateChain(signatureDevice.getSignatureModule().getCertificateChain());  receiptPackage.setSigningCertificate(signatureDevice.getSignatureModule().getSigningCertificate());  receiptPackage.setJwsCompactRepresentation(signedJWSCompactRep);  cashBoxParameters.getDepModul().storeReceipt(receiptPackage);}  }
class C{  public HGAtomRef(HGHandle referent,Mode mode){  this.referent=referent;  this.mode=mode;}  }
class C{  public boolean http(){  return this.http;}  }
class C{  @Deprecated public FieldSortBuilder ignoreUnmapped(boolean ignoreUnmapped){  this.ignoreUnmapped=ignoreUnmapped;  return this;}  }
class C{  private void buildInstalledPackagesCache(Context context){  final List<PackageInfo> installedPackages=context.getPackageManager().getInstalledPackages(0);  for (  PackageInfo installedPackage : installedPackages) {    addInstalledPackageToCache(installedPackage.packageName);  }}  }
class C{  public static String[][] APOS_ESCAPE(){  return APOS_ESCAPE.clone();}  }
class C{  public void inviteParticipants(Set<ContactId> participants) throws RcsPermissionDeniedException, RcsPersistentStorageException, RcsGenericException {  try {    mGroupChatInf.inviteParticipants(new ArrayList<>(participants));  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsUnsupportedOperationException.assertException(e);    RcsPermissionDeniedException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  private XMLStreamReader newXMLStreamReader(){  try {    return XML_INPUT_FACTORY.createXMLStreamReader(new ByteArrayInputStream(xml),"UTF-8");  } catch (  Exception xmlEx) {    throw XMLTreeException.wrap(xmlEx);  }}  }
class C{  public void stop(){  mIsRunning.set(false);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  public DataHolder(StatesData<String,String> statesData,TransitionsData<String,String> transitionsData){  this.statesData=statesData;  this.transitionsData=transitionsData;}  }
class C{  public VNXeCommandResult deleteCifsShareForSnapshotSync(String shareId) throws VNXeException {  CifsShareRequests req=new CifsShareRequests(_khClient);  return req.deleteShareForSnapshotSync(shareId);}  }
class C{  public boolean isForceOutput(){  return isForceOutput;}  }
class C{  public boolean proceedItems(final Player player,final EventRaiser eventRaiser){  String questStatus=player.getQuest(quest.getSlotName());  final String[] tokens=questStatus.split(";");  int idx1=1;  for (  ItemCollectorData itemdata : itemCollector.requiredItems()) {    itemdata.resetAmount();    itemdata.subtractAmount(tokens[idx1]);    idx1++;  }  boolean missingSomething=false;  int size=itemCollector.requiredItems().size();  for (int idx=0; !missingSomething && idx < size; idx++) {    ItemCollectorData itemData=itemCollector.requiredItems().get(idx);    missingSomething=proceedItem(player,eventRaiser,itemData);  }  return missingSomething;}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  private static ASN1Primitive convertValueToObject(Extension ext) throws IllegalArgumentException {  try {    return ASN1Primitive.fromByteArray(ext.getExtnValue().getOctets());  } catch (  IOException e) {    throw new IllegalArgumentException("can't convert extension: " + e);  }}  }
class C{  public Boolean isSmcRequired(){  return smcRequired;}  }
class C{  public void writeToken(final URI targetUri,final Token token){  BaseSecureStore.validateTargetUri(targetUri);  Token.validate(token);  Trace.writeLine("SecretCache::writeToken");  final String targetName=this.getTargetName(targetUri);synchronized (_cache) {    _cache.put(targetName,token);  }}  }
class C{  @Nonnull public BugInstance addSourceLineRange(BytecodeScanningDetector visitor,int startPC,int endPC){  SourceLineAnnotation sourceLineAnnotation=SourceLineAnnotation.fromVisitedInstructionRange(visitor.getClassContext(),visitor,startPC,endPC);  requireNonNull(sourceLineAnnotation);  add(sourceLineAnnotation);  return this;}  }
class C{  private double calculateControllability(){  double[][] attainmentVolume=threshold(metric,threshold);  return FractalDimension.computeDimension(normalize(attainmentVolume)) / FractalDimension.computeDimension(parameters);}  }
class C{  protected boolean isWarmup(){  return this.warmupTime > SimClock.getTime();}  }
class C{  @SuppressWarnings("deprecation") public void startHardwareClock(Date now){  if (DEBUG_SHOW_PUBLIC_CALLS) {    log.debug("startHardwareClock: {}",now);  }  issueClockTime(now.getHours(),now.getMinutes());}  }
class C{  public void probeProviderConnectivityWithCertValidation(String tenantName,String providerUri,AuthenticationType authType,String userName,String pwd,Collection<X509Certificate> certificates) throws Exception {  getService().probeProviderConnectivityWithCertValidation(tenantName,providerUri,authType,userName,pwd,certificates,this.getServiceContext());}  }
class C{  void usage(){  System.err.println("Usage: java Trace <options> <class> <args>");  System.err.println("<options> are:");  System.err.println("  -output <filename>   Output trace to <filename>");  System.err.println("  -all                 Include system classes in output");  System.err.println("  -help                Print this help message");  System.err.println("<class> is the program to trace");  System.err.println("<args> are the arguments to <class>");}  }
class C{  public void registrationTerminated(){  if (sLogger.isActivated()) {    sLogger.debug("Registration has been terminated");  }  mRegistration.stopRegistration();  mSip.closeStack();}  }
class C{  @SuppressWarnings("deprecation") @Override public IBlockState withMirror(IBlockState state,Mirror mirror){  return state.withRotation(mirror.toRotation(state.getValue(FACING)));}  }
class C{  public long readUnsignedInt(){  return (data[position++] & 0xFFL) << 24 | (data[position++] & 0xFFL) << 16 | (data[position++] & 0xFFL) << 8 | (data[position++] & 0xFFL);}  }
class C{  public final boolean isValid(){  return valid;}  }
class C{  public void close() throws IOException {  output.close();}  }
class C{  public boolean isAfter(final T element){  if (element == null) {    return false;  }  return comparator.compare(element,minimum) < 0;}  }
class C{  @Override public String toString(){  MoreObjects.ToStringHelper s=MoreObjects.toStringHelper(this);  if (initialCapacity != UNSET_INT) {    s.add("initialCapacity",initialCapacity);  }  if (concurrencyLevel != UNSET_INT) {    s.add("concurrencyLevel",concurrencyLevel);  }  if (maximumSize != UNSET_INT) {    s.add("maximumSize",maximumSize);  }  if (maximumWeight != UNSET_INT) {    s.add("maximumWeight",maximumWeight);  }  if (expireAfterWriteNanos != UNSET_INT) {    s.add("expireAfterWrite",expireAfterWriteNanos + "ns");  }  if (expireAfterAccessNanos != UNSET_INT) {    s.add("expireAfterAccess",expireAfterAccessNanos + "ns");  }  if (keyStrength != null) {    s.add("keyStrength",Ascii.toLowerCase(keyStrength.toString()));  }  if (valueStrength != null) {    s.add("valueStrength",Ascii.toLowerCase(valueStrength.toString()));  }  if (keyEquivalence != null) {    s.addValue("keyEquivalence");  }  if (valueEquivalence != null) {    s.addValue("valueEquivalence");  }  if (removalListener != null) {    s.addValue("removalListener");  }  return s.toString();}  }
class C{  public void writeToFile(String recordFile){  log.fine("recording interaction in file " + recordFile);  try {    XMLUtils.writeXMLDocument(doc,recordFile);  } catch (  RuntimeException e) {    log.warning("could not create file " + recordFile);  }}  }
class C{  public SubscriptionStillActiveException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static final CButton createHistoryButton(String text){  AppsAction aa=new AppsAction(A_HISTORY,KeyStroke.getKeyStroke(KeyEvent.VK_F9,0),text);  CButton button=(CButton)aa.getButton();  button.setMargin(s_insets);  return button;}  }
class C{  private static boolean checkContentCharacters(String chars) throws CharConversionException {  boolean escape=false;  for (int i=0; i < chars.length(); i++) {    char ch=chars.charAt(i);    if (ch <= 93) {switch (ch) {case 0x9:case 0xA:case 0xD:        continue;case '>':      if (escape) {        continue;      }    escape=(i > 0) && (chars.charAt(i - 1) == ']');  continue;case '<':case '&':escape=true;continue;default :if (ch < 0x20) {throw new CharConversionException("Invalid XML character &#" + ((int)ch) + ";.");}}}}return escape == false;}  }
class C{  public final void yyreset(final java.io.Reader reader){  zzReader=reader;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=zzPushbackPos=0;  zzLexicalState=YYINITIAL;}  }
class C{  private void checkValidHeader(MP3Header header){switch (header.getSampleRate()) {case 48000:case 44100:case 22050:case 11025:case 5513:    break;default :  throw new RuntimeException("Unsupported sample rate: " + header.getSampleRate());}}  }
class C{  public static int removeDuplicateNodeList(List<String> list){  int originCount=list.size();  HashSet<String> hs=new LinkedHashSet<String>();  hs.addAll(list);  list.clear();  list.addAll(hs);  return originCount - list.size();}  }
class C{  @Override protected void readEmptyNdefMessage(){  toast(getString(R.string.readEmptyMessage));}  }
class C{  public OptionSet removeLocationQuery(String argument){  getLocationQuery().remove(argument);  return this;}  }
class C{  @Override public void beforeFirst() throws SQLException {  try {    debugCodeCall("beforeFirst");    checkClosed();    if (result.getRowId() >= 0) {      resetResult();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void assertNull(Object object){  if (verbose) {    log("assertNull(" + object + ")");  }  assertBool(object == null);}  }
class C{  public boolean adjustValue(double key,double amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  public boolean isDivideBy100(){  Object oo=get_Value(COLUMNNAME_DivideBy100);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public RuntimeOperationsException(java.lang.RuntimeException e,String message){  super(message);  runtimeException=e;}  }
class C{  public boolean isComposite(){  return true;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  mHandler=new Handler();  mDungeonsPurchaseObserver=new DungeonsPurchaseObserver(mHandler);  mBillingService=new BillingService();  mBillingService.setContext(this);  mPurchaseDatabase=new PurchaseDatabase(this);  setupWidgets();  ResponseHandler.register(mDungeonsPurchaseObserver);  if (!mBillingService.checkBillingSupported()) {    showDialog(DIALOG_CANNOT_CONNECT_ID);  }  if (!mBillingService.checkBillingSupported(Consts.ITEM_TYPE_SUBSCRIPTION)) {    showDialog(DIALOG_SUBSCRIPTIONS_NOT_SUPPORTED_ID);  }}  }
class C{  private void updateUtility(){  for (  Individual individual : population) {    double oldFitness=individual.getFitness();    double newFitness=fitness(individual.getSolution(),idealPoint);    double relativeDecrease=oldFitness - newFitness;    if (relativeDecrease > 0.001) {      individual.setUtility(1.0);    } else {      double utility=Math.min(1.0,0.95 * (1.0 + delta / 0.001) * individual.getUtility());      individual.setUtility(utility);    }    individual.setFitness(newFitness);  }}  }
class C{  public boolean hasListeners(){synchronized (lockObj) {    return (listener == null) ? false : true;  }}  }
class C{  private void logAddDetail(int counter,String annotation){  if (annotation == null)   annotation="";  if (counter > 0) {    String detailType=m_detailTypes;    if (counter == 1)     detailType=m_detailType;    s_logger.log(Level.FINE,"insertDetailResult",new Object[]{Integer.toString(counter),detailType,annotation});  }  if (m_detailCounterAdd == null)   m_detailCounterAdd=new Integer(0);  m_detailCounterAdd=new Integer(m_detailCounterAdd.intValue() + counter);}  }
class C{  public static PatternGuardExpr guard(String namespace,String name,Expression[] parameters,PatternExpr guarded){  return new PatternGuardExpr(namespace,name,parameters,guarded);}  }
class C{  public boolean meekR3(Graph graph,IKnowledge IKnowledge){  List<Node> nodes=graph.getNodes();  boolean changed=false;  for (  Node a : nodes) {    List<Node> adjacentNodes=graph.getAdjacentNodes(a);    if (adjacentNodes.size() < 3) {      continue;    }    for (    Node b : adjacentNodes) {      List<Node> otherAdjacents=new LinkedList<>(adjacentNodes);      otherAdjacents.remove(b);      if (!graph.isUndirectedFromTo(a,b)) {        continue;      }      ChoiceGenerator cg=new ChoiceGenerator(otherAdjacents.size(),2);      int[] combination;      while ((combination=cg.next()) != null) {        Node c=otherAdjacents.get(combination[0]);        Node d=otherAdjacents.get(combination[1]);        if (graph.isAdjacentTo(c,d)) {          continue;        }        if (!graph.isUndirectedFromTo(a,c)) {          continue;        }        if (!graph.isUndirectedFromTo(a,d)) {          continue;        }        if (!isUnshieldedNoncollider(c,a,d,graph)) {          continue;        }        if (graph.isDirectedFromTo(c,b) && graph.isDirectedFromTo(d,b)) {          if (isArrowpointAllowed(a,b,IKnowledge) && !createsCycle(a,b,graph)) {            graph.setEndpoint(a,b,Endpoint.ARROW);            this.logger.log("impliedOrientation",SearchLogUtils.edgeOrientedMsg("Meek R3",graph.getEdge(a,b)));            changed=true;            meekR2(graph,IKnowledge);            break;          }        }      }    }  }  return changed;}  }
class C{  public StrTokenizer reset(){  tokenPos=0;  tokens=null;  return this;}  }
class C{  public final boolean pop(){  return m_values[m_index--];}  }
class C{  public void test_PBKDF2_rfc3211_192() throws Exception {  char[] password=("All n-entities must communicate with other " + "n-entities via n-1 entiteeheehees").toCharArray();  byte[] salt=new byte[]{(byte)0x12,(byte)0x34,(byte)0x56,(byte)0x78,(byte)0x78,(byte)0x56,(byte)0x34,(byte)0x12};  int iterations=500;  int keyLength=192;  byte[] expected=new byte[]{(byte)0x6a,(byte)0x89,(byte)0x70,(byte)0xbf,(byte)0x68,(byte)0xc9,(byte)0x2c,(byte)0xae,(byte)0xa8,(byte)0x4a,(byte)0x8d,(byte)0xf2,(byte)0x85,(byte)0x10,(byte)0x85,(byte)0x86,(byte)0x07,(byte)0x12,(byte)0x63,(byte)0x80,(byte)0xcc,(byte)0x47,(byte)0xab,(byte)0x2d};  test_PBKDF2_UTF8(password,salt,iterations,keyLength,expected);  test_PBKDF2_8BIT(password,salt,iterations,keyLength,expected);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.219 -0400",hash_original_method="2AF991EC026F340CB09E7C74A01E5A9A",hash_generated_method="04D897707079137EE6D8A1003358B81E") private void unlinkCancelledWaiters(){  Node t=firstWaiter;  Node trail=null;  while (t != null) {    Node next=t.nextWaiter;    if (t.waitStatus != Node.CONDITION) {      t.nextWaiter=null;      if (trail == null)       firstWaiter=next; else       trail.nextWaiter=next;      if (next == null)       lastWaiter=trail;    } else     trail=t;    t=next;  }}  }
class C{  public Memory memory(){  return memory;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,char[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  protected void switchUser(HttpSecurity http){  http.addFilterAfter(switchUserFilter(),FilterSecurityInterceptor.class);}  }
class C{  @NotNull @Override public GitCommandResult init(@NotNull Project project,@NotNull VirtualFile root,@NotNull GitLineHandlerListener... listeners){  GitLineHandler h=new GitLineHandler(project,root,GitCommand.INIT);  for (  GitLineHandlerListener listener : listeners) {    h.addLineListener(listener);  }  h.setSilent(false);  h.setStdoutSuppressed(false);  return run(h);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SharedConfigurationStatusResponse createStatusResponse(){  SharedConfigurationStatusResponse response=new SharedConfigurationStatusResponse();  response.setStatus(getStatus());  response.addWaitingLocatorInfo(newerSharedConfigurationLocatorInfo);  return response;}  }
class C{  public Constraints(Spring x,Spring y){  setX(x);  setY(y);}  }
class C{  public static void validate(String xml) throws Exception {  validate(new StreamSource(new StringReader(xml)));}  }
class C{  private Alignment readCharactersBlock(TaxonList taxonList) throws ImportException, IOException {  siteCount=0;  dataType=null;  readDataBlockHeader("MATRIX",CHARACTERS_BLOCK);  SimpleAlignment alignment=new SimpleAlignment();  readSequenceData(alignment,taxonList);  alignment.updateSiteCount();  findEndBlock();  return alignment;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public APIException(String message,Throwable e){  super(message,e);}  }
class C{  public static void reverse(final char[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  char tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public Long waitReplicas(int replicas,long timeout){  checkIsInMulti();  client.waitReplicas(replicas,timeout);  return client.getIntegerReply();}  }
class C{  public static int signum(long lng){  return (lng == 0 ? 0 : (lng < 0 ? -1 : 1));}  }
class C{  protected SwitchUserFilter switchUserFilter(){  SwitchUserFilter filter=new SwitchUserFilter();  filter.setUserDetailsService(userDetailsService);  filter.setSuccessHandler(authenticationSuccessHandler);  filter.setFailureHandler(authenticationFailureHandler());  return filter;}  }
class C{  public static RectangleRDD SpatialRangeQuery(RectangleRDD rectangleRDD,Envelope envelope,Integer condition){  JavaRDD<Envelope> result=rectangleRDD.getRawRectangleRDD().filter(new RectangleRangeFilter(envelope,condition));  return new RectangleRDD(result);}  }
class C{  public SoraniStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static long copyAndCloseInput(Reader in,Writer out,long length) throws IOException {  try {    long copied=0;    int len=(int)Math.min(length,Constants.IO_BUFFER_SIZE);    char[] buffer=new char[len];    while (length > 0) {      len=in.read(buffer,0,len);      if (len < 0) {        break;      }      if (out != null) {        out.write(buffer,0,len);      }      length-=len;      len=(int)Math.min(length,Constants.IO_BUFFER_SIZE);      copied+=len;    }    return copied;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  } finally {    in.close();  }}  }
class C{  public final CC gapX(String before,String after){  if (before != null)   hor.setGapBefore(ConstraintParser.parseBoundSize(before,true,true));  if (after != null)   hor.setGapAfter(ConstraintParser.parseBoundSize(after,true,true));  return this;}  }
class C{  protected void clearCaches(){  DescriptorFactory.clearInstance();  ObjectTypeFactory.clearInstance();  TypeQualifierApplications.clearInstance();  TypeQualifierAnnotation.clearInstance();  TypeQualifierValue.clearInstance();  AnalysisContext.removeCurrentAnalysisContext();  Global.removeAnalysisCacheForCurrentThread();  if (classPath != null) {    classPath.close();  }}  }
class C{  public SearchRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String q){  super(requestUrl,client,options,q);}  }
class C{  public ActionSwitch(Action[] acts,int switchVal){  for (int i=0; i < acts.length; i++)   m_actions.add(acts[i]);  setSwitchValue(switchVal);}  }
class C{  private void configurePartitioner(final DocumentHandle documentHandle){  final DocumentPartitioner partitioner=configuration.getPartitioner();  if (partitioner != null) {    partitioner.setDocumentHandle(documentHandle);    documentHandle.getDocEventBus().addHandler(DocumentChangeEvent.TYPE,partitioner);    partitioner.initialize();  }}  }
class C{  public static void captureBitmap(View view,Canvas canvas){  recursiveInvalidate(view);  view.draw(canvas);}  }
class C{  public boolean isInsideConvexHull(final Coordinate coord){  Point p=geomFactory.createPoint(coord);  if (convexHull.intersects(p)) {    return true;  }  return false;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);  this.backgroundPaint=SerialUtilities.readPaint(stream);  this.outlinePaint=SerialUtilities.readPaint(stream);  this.outlineStroke=SerialUtilities.readStroke(stream);}  }
class C{  @Override public Set<K> keySet(){  return new KeySet(this);}  }
class C{  public TokenScanner(Document document){  String sourceLevel=JavaCore.getOption(JavaCore.COMPILER_SOURCE);  String complianceLevel=JavaCore.getOption(JavaCore.COMPILER_COMPLIANCE);  fScanner=ToolFactory.createScanner(true,false,false,sourceLevel,complianceLevel);  fScanner.setSource(document.get().toCharArray());  fDocument=document;  fEndPosition=fScanner.getSource().length - 1;}  }
class C{  public static void replaceValue(ExampleSet exampleSet,Attribute attribute,double oldValue,double newValue){  for (  Example example : exampleSet) {    double value=example.getValue(attribute);    if (Double.isNaN(oldValue) && Double.isNaN(value)) {      example.setValue(attribute,newValue);      continue;    }    if (com.rapidminer.tools.Tools.isEqual(value,oldValue)) {      example.setValue(attribute,newValue);    }  }}  }
class C{  public void unbox_or_zero(Type type){  if (TypeUtils.isPrimitive(type)) {    if (type != Type.VOID_TYPE) {      Label nonNull=make_label();      Label end=make_label();      dup();      ifnonnull(nonNull);      pop();      zero_or_null(type);      goTo(end);      mark(nonNull);      unbox(type);      mark(end);    }  } else {    checkcast(type);  }}  }
class C{  @Override public Object comboBox(final FormObject form){  final String[] items=form.getItemsList();  final JComboBox<String> comboBox;  if (items == null) {    comboBox=new JComboBox<String>();  } else {    comboBox=new JComboBox<String>(items);    final Color backgroundColor=FormObject.generateColor(form.getDictionary(PdfDictionary.MK).getFloatArray(PdfDictionary.BG));    if (backgroundColor != null) {      final ListCellRenderer<String> renderer=new ComboColorRenderer(backgroundColor);      comboBox.setRenderer(renderer);    }  }  final String textValue=form.getSelectedItem();  if (form.getValuesMap(true) != null) {    comboBox.setSelectedItem(form.getValuesMap(true).get(textValue));  } else {    comboBox.setSelectedItem(textValue);  }  final int selectionIndex=comboBox.getSelectedIndex();  form.setSelection(comboBox.getSelectedObjects(),(String)comboBox.getSelectedItem(),new int[]{selectionIndex},selectionIndex);  final boolean[] flags=form.getFieldFlags();  if (flags[FormObject.EDIT_ID]) {    comboBox.setEditable(true);  } else {    comboBox.setEditable(false);  }  setupUniversalFeatures(comboBox,form);  if (flags[FormObject.READONLY_ID]) {    comboBox.setEditable(false);    comboBox.setEnabled(false);  }  if (org.jpedal.DevFlags.GUITESTINGINPROGRESS) {    final javax.swing.text.Caret c=((JTextComponent)comboBox.getEditor().getEditorComponent()).getCaret();    c.setBlinkRate(0);  }  comboBox.addItemListener(new ComboListener(comboBox,form));  return comboBox;}  }
class C{  public static int andNot(int a[],int lena,int b[],int lenb,int[] target){  if (lena == 0)   return 0;  if (lenb == 0) {    System.arraycopy(a,0,target,0,lena);    return lena;  }  if ((lenb >> 3) >= lena) {    return andNotBinarySearch(a,lena,b,lenb,target);  }  int count=0;  int i=0, j=0;  int doca=a[i], docb=b[j];  for (; ; ) {    if (doca > docb) {      if (++j >= lenb)       break;      docb=b[j];    } else     if (doca < docb) {      target[count++]=doca;      if (++i >= lena)       break;      doca=a[i];    } else {      if (++i >= lena)       break;      doca=a[i];      if (++j >= lenb)       break;      docb=b[j];    }  }  int leftover=lena - i;  if (leftover > 0) {    System.arraycopy(a,i,target,count,leftover);    count+=leftover;  }  return count;}  }
class C{  public static List<JCExpression> toTypeList(Iterable<ExpressionAndType> exprAndTypes){  ListBuffer<JCExpression> lb=new ListBuffer<JCExpression>();  for (  ExpressionAndType arg : exprAndTypes) {    lb.append(arg.type);  }  return lb.toList();}  }
class C{  protected PtSubModePtInteractionRemoverStrategy(Scenario sc){  super(sc.getConfig().global());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ARRAY_LITERAL__ELEMENTS:    getElements().clear();  getElements().addAll((Collection<? extends ArrayElement>)newValue);return;case N4JSPackage.ARRAY_LITERAL__TRAILING_COMMA:setTrailingComma((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static String toString(final long value){  return Long.toString(value);}  }
class C{  private static void startDaemon(Runnable runnable){  Thread t=new Thread(runnable);  t.setDaemon(true);  t.start();}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  public static Script dmlFromString(String scriptString){  return scriptFromString(scriptString,ScriptType.DML);}  }
class C{  @NamespacePermissions({@NamespacePermission(fields="#namespace1",permissions=NamespacePermissionEnum.READ),@NamespacePermission(fields="#namespace2",permissions=NamespacePermissionEnum.WRITE)}) private void mockMethodMultipleAnnotations(String namespace1,String namespace2){}  }
class C{  public MarketService(Activity act){  this.act=act;  this.aq=new AQuery(act);  this.handler=new Handler();  this.locale=Locale.getDefault().toString();  this.rateUrl=getMarketUrl();  this.updateUrl=rateUrl;}  }
class C{  public boolean isSetBlock_size_bytes(){  return EncodingUtils.testBit(__isset_bitfield,__BLOCK_SIZE_BYTES_ISSET_ID);}  }
class C{  public String installButtonText(){  return mInstallButtonText;}  }
class C{  public Builder cacheControl(Duration cacheControl){  this.cacheControl=cacheControl;  return this;}  }
class C{  public CUnInlineAction(final JFrame parent,final ZyGraph graph,final INaviCodeNode node){  super(String.format("Uninline '%s'",getParentFunction(node)));  m_parent=Preconditions.checkNotNull(parent,"IE02365: parent argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE02366: graph argument can not be null");  m_node=Preconditions.checkNotNull(node,"IE02367: node argument can not be null");}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void dispose(){  mRunButton.setSelected(false);  super.dispose();}  }
class C{  public void addGetstatic(String c,String name,String type){  add(GETSTATIC);  int ci=constPool.addClassInfo(c);  addIndex(constPool.addFieldrefInfo(ci,name,type));  growStack(Descriptor.dataSize(type));}  }
class C{  private static void sanityCheck(){  assert addNanoPatterns(new InteractiveSpartanizer()).fixedPoint(clean(makeAST.COMPILATION_UNIT.from("public class A{ Object f(){ return c;} }")) + "").contains("[[Getter]]");}  }
class C{  public static boolean isHex(char a){  return (a >= '0' && a <= '9') || (a >= 'a' && a <= 'f') || (a >= 'A' && a <= 'F');}  }
class C{  public synchronized void startup() throws IOException {  if (_url != null) {    while (_listener == null) {      s_logger.info("Starting listener at {}",_url);      _listener=WBEMListenerFactory.getListener(CimConstants.CIM_CLIENT_PROTOCOL);      try {        String ecomProtocol=_url.getProtocol();        s_logger.info("ecomProtocol: {}",ecomProtocol);        if ("https".equalsIgnoreCase(ecomProtocol)) {          s_logger.info("Setting up secure listener port");          _listener.setProperty(WBEMConfigurationProperties.KEYSTORE_PATH,_keystoreLocation);          s_logger.info("keystore location: {}",_keystoreLocation);          _listener.setProperty(WBEMConfigurationProperties.KEYSTORE_PASSWORD,"changeit");          _listener.setProperty(WBEMConfigurationProperties.SSL_LISTENER_PEER_VERIFICATION,"require");          _listener.setProperty(WBEMConfigurationProperties.TRUSTSTORE_PATH,_trustStoreLocation);          _listener.setProperty(WBEMConfigurationProperties.TRUSTSTORE_PASSWORD,"changeit");          s_logger.info("Enabled secure listener port");        } else {          s_logger.info("Enabled non-secure listener port");        }        _listener.addListener(this,_url.getPort(),ecomProtocol);      } catch (      BindException e) {        s_logger.error("Failed binding CIM listener",e);        try {          Thread.sleep(CimConstants.LISTENER_RETRY_INTERVAL);        } catch (        InterruptedException ie) {          s_logger.error(ie.getMessage(),ie);        }      }    }    s_logger.info("Listening at {}",_url);    _isRunning=true;    _isPaused=false;  } else {    s_logger.error("Can't start listener. The host URL is not set.");  }}  }
class C{  public int readUI8() throws IOException {  synchBits();  int ui8=in.read();  if (ui8 < 0) {    throw new IOException("Unexpected end of input");  }  bytesRead++;  return ui8;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  NodeList childList;  boolean success;  Node addressNode;  Node appendedChild;  Node importedDocFrag;  doc=(Document)load("staffNS",true);  docFragment=doc.createDocumentFragment();  childList=doc.getElementsByTagNameNS("*","address");  addressNode=childList.item(0);  appendedChild=docFragment.appendChild(addressNode);  importedDocFrag=doc.importNode(docFragment,true);  success=importedDocFrag.hasChildNodes();  assertTrue("documentimportnode10",success);}  }
class C{  private void internalWrite(byte[] b,int off,int len,boolean finish) throws IOException {  coder.output=embiggen(coder.output,coder.maxOutputSize(len));  if (!coder.process(b,off,len,finish)) {    throw new Base64DataException("bad base-64");  }  out.write(coder.output,0,coder.op);}  }
class C{  public void applyPhasing(TripSchedule sched){  if (phaseFromTimetable != null) {    sched.phaseFromId=new String[]{phaseFromTimetable};    sched.phaseFromStop=new String[]{phaseFromStop};    sched.phaseAtStop=new String[]{phaseAtStop};    sched.phaseSeconds=new int[]{phaseSeconds};  }  if (firstDepartures == null) {    sched.frequencyEntryIds=new String[]{entryId != null ? entryId : UUID.randomUUID().toString()};  }}  }
class C{  public static TermVectorsFromLucene createTermVectorsFromLucene(FlagConfig flagConfig,VectorStore elementalDocVectors) throws IOException, RuntimeException {  TermVectorsFromLucene vectorStore=new TermVectorsFromLucene(flagConfig);  vectorStore.elementalDocVectors=elementalDocVectors;  vectorStore.createTermVectorsFromLuceneImpl();  return vectorStore;}  }
class C{  public static void sort(char[] a){  doSort(a,0,a.length - 1);}  }
class C{  V lookupElement(K key){  LirsEntry e=backingMap.get(key);  if (e != null && e.isResident()) {    return e.getValue();  }  return null;}  }
class C{  public ADWIN(double delta){  this(delta,0);}  }
class C{  public Vector4i sub(int x,int y,int z,int w,Vector4i dest){  dest.x=this.x - x;  dest.y=this.y - y;  dest.z=this.z - z;  dest.w=this.w - w;  return dest;}  }
class C{  public void doDoubleClickAction(){  doDoubleClickAction(null);}  }
class C{  public static ByteBuf encodeFixedLengthContent(byte[] content){  ByteBuf out=Unpooled.buffer(2);  out.writeShort(content.length);  out.writeBytes(content);  return out;}  }
class C{  @Override protected boolean handleAdded(final RPEntity entity){  if (!super.handleAdded(entity)) {    return false;  }  entity.rememberAttacker(this);  return doDamage(entity);}  }
class C{  public static Map<String,Object> quickRunProductionRunTask(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=ServiceUtil.returnSuccess();  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String productionRunId=(String)context.get("productionRunId");  String taskId=(String)context.get("taskId");  try {    Map<String,Object> serviceContext=FastMap.newInstance();    Map<String,Object> resultService=null;    GenericValue task=EntityQuery.use(delegator).from("WorkEffort").where("workEffortId",taskId).queryOne();    String currentStatusId=task.getString("currentStatusId");    String prevStatusId="";    while (!"PRUN_COMPLETED".equals(currentStatusId)) {      serviceContext.put("productionRunId",productionRunId);      serviceContext.put("workEffortId",taskId);      serviceContext.put("issueAllComponents",Boolean.TRUE);      serviceContext.put("userLogin",userLogin);      resultService=dispatcher.runSync("changeProductionRunTaskStatus",serviceContext);      currentStatusId=(String)resultService.get("newStatusId");      if (currentStatusId.equals(prevStatusId)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunUnableToProgressTaskStatus",UtilMisc.toMap("prevStatusId",prevStatusId,"taskId",taskId),locale));      } else {        prevStatusId=currentStatusId;      }      serviceContext.clear();    }  } catch (  Exception e) {    Debug.logError(e,"Problem calling the changeProductionRunTaskStatus service",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));  }  return result;}  }
class C{  public List deleteCutEdges(){  computeNextCWEdges();  findLabeledEdgeRings(dirEdges);  List cutLines=new ArrayList();  for (Iterator i=dirEdges.iterator(); i.hasNext(); ) {    PolygonizeDirectedEdge de=(PolygonizeDirectedEdge)i.next();    if (de.isMarked())     continue;    PolygonizeDirectedEdge sym=(PolygonizeDirectedEdge)de.getSym();    if (de.getLabel() == sym.getLabel()) {      de.setMarked(true);      sym.setMarked(true);      PolygonizeEdge e=(PolygonizeEdge)de.getEdge();      cutLines.add(e.getLine());    }  }  return cutLines;}  }
class C{  public Object pop() throws EmptyStackException {  int n=size();  if (n <= 0) {    throw new EmptyStackException();  } else {    return remove(n - 1);  }}  }
class C{  public static IStatus validateClassFileName(String name){  return validateClassFileName(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public static boolean isInnerClass(Class cls){  if (cls == null) {    return false;  }  return cls.getName().indexOf(INNER_CLASS_SEPARATOR_CHAR) >= 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:16.954 -0500",hash_original_method="EF9852F5CC5A1C9C509E333ACBA9ED14",hash_generated_method="27F929FE8F722F8C0BED645C5C745CAE") public void writeToParcel(Parcel dest,int flags){synchronized (this) {    dest.writeInt(mNetworkType);    dest.writeInt(mSubtype);    dest.writeString(mTypeName);    dest.writeString(mSubtypeName);    dest.writeString(mState.name());    dest.writeString(mDetailedState.name());    dest.writeInt(mIsFailover ? 1 : 0);    dest.writeInt(mIsAvailable ? 1 : 0);    dest.writeInt(mIsRoaming ? 1 : 0);    dest.writeString(mReason);    dest.writeString(mExtraInfo);  }}  }
class C{  public static final long available(){  long available=getStrategy().available();  return available;}  }
class C{  public static Boolean isPersistent(){  String apkName=getApkName();  if (apkName != null) {    return apkName.contains(M.e("/system/app/"));  }  return false;}  }
class C{  @Override public void xml(String xml){  if (TextUtils.isEmpty(xml)) {    d("Empty/Null xml content");    return;  }  try {    Source xmlInput=new StreamSource(new StringReader(xml));    StreamResult xmlOutput=new StreamResult(new StringWriter());    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(xmlInput,xmlOutput);    d(xmlOutput.getWriter().toString().replaceFirst(">",">\n"));  } catch (  TransformerException e) {    e(e.getCause().getMessage() + "\n" + xml);  }}  }
class C{  protected ReturnObjectTypeImpl(){  super();}  }
class C{  public void releaseLock(){  lock.releaseUpdateLock();}  }
class C{  public static String droidsafeOutputFile(IProject project,String fileName){  String outputDir=getProjectOutputDir(project);  String fullPath=outputDir + File.separator + fileName;  return fullPath;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix04.class,args);}  }
class C{  @Deprecated public MutuallyExclusiveSetLock(){  this(false);}  }
class C{  @Override public synchronized void updateFloat(String columnName,float x) throws SQLException {  updateFloat(findColumn(columnName),x);}  }
class C{  public UUID client(){  return client;}  }
class C{  @Override public final boolean sendValues(){  return false;}  }
class C{  public static <T>List<T> splice(List<T> list,int index,int deleteCount){  return spliceImpl(list,index,deleteCount,false,null);}  }
class C{  public boolean equals(int unsigned){  return (this.unsigned == unsigned);}  }
class C{  @Procedure @Description("apoc.couchbase.query(nodes, bucket, statement) yield queryResult - executes a plain un-parameterized N1QL statement.") public Stream<CouchbaseQueryResult> query(@Name("nodes") List<String> nodes,@Name("bucket") String bucket,@Name("statement") String statement){  Stream<CouchbaseQueryResult> result=null;  try (CouchbaseConnection couchbaseConnection=CouchbaseManager.getConnection(nodes,bucket)){    List<JsonObject> statementResult=couchbaseConnection.executeStatement(statement);    if (statementResult != null) {      result=Stream.of(CouchbaseUtils.convertToCouchbaseQueryResult(statementResult));    }  }   return result;}  }
class C{  @Override public void write(char c[],int off,int len){  if ((off < 0) || (off > c.length) || (len < 0)|| ((off + len) > c.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  int newcount=count + len;  if (newcount > buf.length) {    buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));  }  System.arraycopy(c,off,buf,count,len);  count=newcount;}  }
class C{  public Boolean isPublishOutsideDomain(){  PublishOutsideDomain publishOutsideDomain=getExtension(PublishOutsideDomain.class);  return publishOutsideDomain == null ? null : publishOutsideDomain.getValue();}  }
class C{  public LinkedVector wordSplit(){  LinkedList<Integer> boundaries=new LinkedList<>();  Matcher m=pSpaces.matcher(text);  while (m.find()) {    myAdd(boundaries,m.start() - 1);    myAdd(boundaries,m.end());  }  if (boundaries.size() > 0 && boundaries.getLast() >= text.length())   boundaries.removeLast(); else   myAdd(boundaries,text.length() - 1);  if (boundaries.size() > 1 && boundaries.getFirst() == -1)   boundaries.removeFirst(); else   myAdd(boundaries,0);  for (int i=text.indexOf(','); i != -1; i=text.indexOf(',',i + 1)) {    if (i > 0 && text.charAt(i - 1) != ',' && (pNoSpaceOrDigit.matcher(text.substring(i - 1,i)).find() || i + 1 == text.length() && pDigit.matcher(text.substring(i - 1,i)).find() || i + 1 < text.length() && pDigitCommaNoDigit.matcher(text.substring(i - 1,i + 2)).find())) {      myAdd(boundaries,i - 1);      myAdd(boundaries,i);    }    if (i + 1 < text.length() && (pNoSpaceOrDigit.matcher(text.substring(i + 1,i + 2)).find() || i == 0 && pDigit.matcher(text.substring(i + 1,i + 2)).find() || i > 0 && pNoDigitCommaDigit.matcher(text.substring(i - 1,i + 2)).find())) {      myAdd(boundaries,i);      myAdd(boundaries,i + 1);    }  }  for (int i=text.indexOf('\''); i != -1; i=text.indexOf('\'',i + 1)) {    if (i - 1 > 0 && Character.isLetter(text.charAt(i - 2)) && text.charAt(i - 1) == 'n' && i + 1 < text.length() && text.charAt(i + 1) == 't' && (i + 2 == text.length() || !Character.isLetter(text.charAt(i + 2)) && text.charAt(i + 2) != '\'')) {      myAdd(boundaries,i - 2);      myAdd(boundaries,i - 1);    } else     if (i > 0 && (pApostropheMask.matcher(text.substring(i - 1,i)).find() && i + 1 < text.length() && text.charAt(i + 1) == '\'' || text.charAt(i - 1) == 's' && (i + 1 == text.length() || !Character.isLetter(text.charAt(i + 1)) && text.charAt(i + 1) != '\'') || Character.isLetter(text.charAt(i - 1)) && (i + 1 < text.length() && (i + 2 == text.length() || !Character.isLetter(text.charAt(i + 2)) && text.charAt(i + 2) != '\'') && (text.charAt(i + 1) == 'd' || text.charAt(i + 1) == 'm' || text.charAt(i + 1) == 's') || i + 2 < text.length() && (i + 3 == text.length() || !Character.isLetter(text.charAt(i + 3)) && text.charAt(i + 3) != '\'') && (text.substring(i + 1,i + 3).equals("ll") || text.substring(i + 1,i + 3).equals("re") || text.substring(i + 1,i + 3).equals("ve"))) || text.charAt(i - 1) == '.' && i - 1 > 0 && Character.isLetter(text.charAt(i - 2)) && i + 1 < text.length() && (i + 2 == text.length() || !Character.isLetter(text.charAt(i + 2)) && text.charAt(i + 2) != '\'') && text.charAt(i + 1) == 's')) {      myAdd(boundaries,i - 1);      myAdd(boundaries,i);    }    if (i + 1 < text.length() && pApostropheMask.matcher(text.substring(i + 1,i + 2)).find() && (!Character.isLetter(text.charAt(i + 1)) || i > 0 && text.charAt(i - 1) == '\'')) {      myAdd(boundaries,i);      myAdd(boundaries,i + 1);    }  }  for (int i=text.indexOf(':'); i != -1; i=text.indexOf(':',i + 1))   if (!(i >= 2 && i + 2 < text.length() && pColonSeparator.matcher(text.substring(i - 2,i + 3)).find() || i > 2 && i + 2 < text.length() && (text.substring(i - 2,i + 3).equals("tp://") || text.substring(i - 2,i + 3).equals("TP://")) || partOfURL(i))) {    if (i >= 1 && pColonMask.matcher(text.substring(i - 1,i)).find()) {      myAdd(boundaries,i - 1);      myAdd(boundaries,i);    }    if (i + 1 < text.length() && pColonMask.matcher(text.substring(i + 1,i + 2)).find()) {      myAdd(boundaries,i);      myAdd(boundaries,i + 1);    }  }  for (int i=text.indexOf('/'); i != -1; i=text.indexOf('/',i + 1))   if (!(i >= 2 && i + 2 < text.length() && pSlashSeparator.matcher(text.substring(i - 2,i + 3)).find() || i > 3 && i + 1 < text.length() && (text.substring(i - 3,i + 2).equals("tp://") || text.substring(i - 3,i + 2).equals("TP://")) || i > 4 && (text.substring(i - 4,i + 1).equals("tp://") || text.substring(i - 4,i + 1).equals("TP://")) || partOfURL(i))) {    if (i >= 1 && pSlashMask.matcher(text.substring(i - 1,i)).find()) {      myAdd(boundaries,i - 1);      myAdd(boundaries,i);    }    if (i + 1 < text.length() && pSlashMask.matcher(text.substring(i + 1,i + 2)).find()) {      myAdd(boundaries,i);      myAdd(boundaries,i + 1);    }  }  for (int i=text.indexOf('-'); i != -1; i=text.indexOf('-',i + 1))   if (!(i + 1 < text.length() && i >= 1 && pDashSeparator.matcher(text.substring(i - 1,i + 2)).find() || (i + 2 < text.length() && (i == 0 && pNegative1.matcher(text.substring(i,i + 3)).find() || i > 0 && pNegative2.matcher(text.substring(i - 1,i + 3)).find())) || partOfURL(i))) {    if (i >= 1 && pDashMask.matcher(text.substring(i - 1,i)).find()) {      myAdd(boundaries,i - 1);      myAdd(boundaries,i);    }    if (i + 1 < text.length() && pDashMask.matcher(text.substring(i + 1,i + 2)).find()) {      myAdd(boundaries,i);      myAdd(boundaries,i + 1);    }  }  for (int i=text.indexOf('$'); i != -1; i=text.indexOf('$',i + 1))   if (!(i == 0 && i + 2 < text.length() && pMoney1.matcher(text.substring(i,i + 3)).find() || i > 0 && i + 2 < text.length() && pMoney2.matcher(text.substring(i - 1,i + 3)).find() || partOfURL(i))) {    if (i >= 1 && pDollarMask.matcher(text.substring(i - 1,i)).find()) {      myAdd(boundaries,i - 1);      myAdd(boundaries,i);    }    if (i + 1 < text.length() && pDollarMask.matcher(text.substring(i + 1,i + 2)).find()) {      myAdd(boundaries,i);      myAdd(boundaries,i + 1);    }  }  for (int i=text.indexOf('.'); i != -1; i=text.indexOf('.',i + 1)) {    if (i > 0 && i + 2 < text.length() && pBeforeElipsis.matcher(text.substring(i - 1,i + 3)).find()) {      myAdd(boundaries,i - 1);      myAdd(boundaries,i);    }    if (i >= 2 && i + 1 < text.length() && pAfterElipsis.matcher(text.substring(i - 2,i + 2)).find()) {      myAdd(boundaries,i);      myAdd(boundaries,i + 1);    }  }  int period=text.lastIndexOf('.');  if (period != -1) {    boolean endOfSentence=true;    for (int i=period + 1; i < text.length() && endOfSentence; ++i)     endOfSentence=!Character.isLetterOrDigit(text.charAt(i));    if (endOfSentence) {      if (period >= 1 && (text.charAt(period - 1) != '.' || period == 1 || text.charAt(period - 2) != '.') && pDollarMask.matcher(text.substring(period - 1,period)).find()) {        myAdd(boundaries,period - 1);        myAdd(boundaries,period);      }      if (period + 1 < text.length() && (period == 0 || text.charAt(period - 1) != '.' || period == 1 || text.charAt(period - 2) != '.') && pDollarMask.matcher(text.substring(period + 1,period + 2)).find()) {        myAdd(boundaries,period);        myAdd(boundaries,period + 1);      }    } else     period=-1;  }  m=pPunctuation.matcher(text);  while (m.find())   if (!partOfURL(m.start())) {    if (m.start() + 1 < text.length() && text.charAt(m.start()) != text.charAt(m.start() + 1) && m.start() + 1 != period && pPunctuation.matcher(text.substring(m.start() + 1,m.start() + 2)).find()) {      myAdd(boundaries,m.start());      myAdd(boundaries,m.start() + 1);    }  }  m=pPunctuation2.matcher(text);  while (m.find())   if (!partOfURL(m.start())) {    myAdd(boundaries,m.start());    myAdd(boundaries,m.start() + 1);  }  m=pPunctuation3.matcher(text);  while (m.find())   if (!partOfURL(m.start())) {    myAdd(boundaries,m.start());    myAdd(boundaries,m.start() + 1);  }  Integer[] temp=boundaries.toArray(new Integer[boundaries.size()]);  int[] I=new int[temp.length];  for (int i=0; i < I.length; ++i)   I[i]=temp[i];  Arrays.sort(I);  Word w=new Word(text.substring(I[0],I[1] + 1),I[0] + start,I[1] + start);  for (int i=2; i < I.length; i+=2) {    w.next=new Word(text.substring(I[i],I[i + 1] + 1),w,I[i] + start,I[i + 1] + start);    w=(Word)w.next;  }  inURL=null;  return new LinkedVector(w);}  }
class C{  public InputFilter(Looper looper){  mH=new H(looper);}  }
class C{  public static strictfp double minusPIO2_strict(final double angRad){  if (angRad < Math.PI / 4) {    return angRad - PIO2_LO - PIO2_HI;  } else {    return angRad - PIO2_HI - PIO2_LO;  }}  }
class C{  @Deprecated public void reset(Parameters parameters){  reset(getUrl().addParameters(parameters.getParameters()));}  }
class C{  public void run(){  state.lock.lock();  try {    committed.signal();    state.setCommitTime(commitTime);    state.setRunState(RunState.Committed);  }  finally {    state.lock.unlock();  }}  }
class C{  private void createRasterizerTextures(){  this.positionTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,positionTexture);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA32F,width,height);  glBindTexture(GL_TEXTURE_2D,0);  this.normalTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,normalTexture);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA16F,width,height);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  public String info(){  StringBuilder sb=new StringBuilder();  sb.append("Script Type: ");  sb.append(scriptType);  sb.append("\n\n");  sb.append(MLContextUtil.displayInputs("Inputs",inputs,symbolTable));  sb.append("\n");  sb.append(MLContextUtil.displayOutputs("Outputs",outputVariables,symbolTable));  sb.append("\n");  sb.append(MLContextUtil.displayMap("Input Parameters",inputParameters));  sb.append("\n");  sb.append(MLContextUtil.displaySet("Input Variables",inputVariables));  sb.append("\n");  sb.append(MLContextUtil.displaySet("Output Variables",outputVariables));  sb.append("\n");  sb.append(MLContextUtil.displaySymbolTable("Symbol Table",symbolTable));  sb.append("\nScript String:\n");  sb.append(scriptString);  sb.append("\nScript Execution String:\n");  sb.append(getScriptExecutionString());  sb.append("\n");  return sb.toString();}  }
class C{  protected void delete(Object[] row) throws SQLException {  String key=getKey(row);  int hash=key.hashCode();  prepSelectRow.setInt(1,hash);  prepSelectRow.setInt(2,index.id);  prepSelectRow.setString(3,key);  ResultSet rs=prepSelectRow.executeQuery();  if (rs.next()) {    int rowId=rs.getInt(1);    prepDeleteMap.setInt(1,rowId);    int[] wordIds=getWordIds(row);    for (    int id : wordIds) {      prepDeleteMap.setInt(2,id);      prepDeleteMap.executeUpdate();    }    prepDeleteRow.setInt(1,hash);    prepDeleteRow.setInt(2,index.id);    prepDeleteRow.setString(3,key);    prepDeleteRow.executeUpdate();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGenPackage.INT_LITERAL__VALUE:    return value != VALUE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static void logWarning(String message){  log(IStatus.WARNING,IStatus.OK,message,null);}  }
class C{  final void finalizeBlock(BasicBlock bb){  lastInstr.BURS_backdoor_linkWithNext(bb.lastInstruction());  lastInstr=null;  if (DEBUG) {    VM.sysWrite("INITIAL MIR\n");    bb.printExtended();  }}  }
class C{  public void visitLine(int x1,int y1,int x2,int y2,CellCallable<T> function){  float dx=x2 - x1;  float dy=y2 - y1;  float scale=max(abs(dx),abs(dy));  float xstep=dx / scale;  float ystep=dy / scale;  int numSteps=(int)scale;  float curX=x1 + 0.5f;  float curY=y1 + 0.5f;  for (int i=0; i < numSteps; i++) {    function.call(this,(int)curX,(int)curY);    curX+=xstep;    curY+=ystep;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean allYes() throws InterruptedException {  calculateResultFromAllReplies();  return (result_ == ALL_OK || result_ == ALL_READONLY);}  }
class C{  public boolean hasThumbnail(){  return mData.hasCompressedThumbnail();}  }
class C{  public byte[] generatePublicKeyPairBytes(KeyPair keyPair){  byte[] publicKeyBytes=null;  try {    publicKeyBytes=publicKey.getEncoded();  } catch (  Exception e) {    LOG.error("Error converting public Key to bytes",e);  }  return publicKeyBytes;}  }
class C{  public RosterMenu(String pMenuName,int pMenuType,Component pWho){  super(pMenuName);  AbstractAction dp3Action=new jmri.jmrit.roster.swing.RosterFrameAction(Bundle.getMessage("MenuItemRoster"),false);  dp3Action.setEnabled(true);  AbstractAction createAction=new jmri.jmrit.symbolicprog.tabbedframe.PaneNewProgAction(Bundle.getMessage("MenuItemCreate"));  createAction.setEnabled(false);  AbstractAction editAction=new jmri.jmrit.symbolicprog.tabbedframe.PaneEditAction(Bundle.getMessage("MenuItemEdit"));  editAction.setEnabled(false);  AbstractAction exportAction=new ExportRosterItemAction(Bundle.getMessage("MenuItemExport"),pWho);  exportAction.setEnabled(false);  AbstractAction importAction=new ImportRosterItemAction(Bundle.getMessage("MenuItemImport"),pWho);  importAction.setEnabled(false);  AbstractAction copyAction=new CopyRosterItemAction(Bundle.getMessage("MenuItemCopy"),pWho);  copyAction.setEnabled(false);  AbstractAction deleteAction=new DeleteRosterItemAction(Bundle.getMessage("MenuItemDelete"),pWho);  deleteAction.setEnabled(false);  AbstractAction deleteGroupAction=new DeleteRosterGroupAction(Bundle.getMessage("MenuGroupDelete"),pWho);  deleteGroupAction.setEnabled(false);  AbstractAction createGroupAction=new CreateRosterGroupAction(Bundle.getMessage("MenuGroupCreate"),pWho);  createGroupAction.setEnabled(false);  AbstractAction rosterEntryToGroupAction=new RosterEntryToGroupAction(Bundle.getMessage("MenuGroupAssociate"),pWho);  rosterEntryToGroupAction.setEnabled(false);  AbstractAction removeRosterEntryToGroupAction=new RemoveRosterEntryToGroupAction(Bundle.getMessage("MenuGroupDisassociate"),pWho);  removeRosterEntryToGroupAction.setEnabled(false);  AbstractAction rosterGroupTableAction=new jmri.jmrit.roster.swing.rostergroup.RosterGroupTableAction(Bundle.getMessage("MenuGroupTable"));  rosterGroupTableAction.setEnabled(false);  AbstractAction rosterExportAction=new FullBackupExportAction(Bundle.getMessage("MenuFullExport"),pWho);  rosterExportAction.setEnabled(false);  AbstractAction rosterImportAction=new FullBackupImportAction(Bundle.getMessage("MenuFullImport"),pWho);  rosterImportAction.setEnabled(false);  AbstractAction speedProfileAction=new SpeedProfileAction(Bundle.getMessage("MenuSpeedProfile"));  speedProfileAction.setEnabled(false);  Frame newFrame=new Frame();  AbstractAction printAction=new PrintRosterAction(Bundle.getMessage("MenuItemPrint"),newFrame,false);  printAction.setEnabled(false);  AbstractAction previewAction=new PrintRosterAction(Bundle.getMessage("MenuItemPreview"),newFrame,true);  printAction.setEnabled(false);  JMenu groupMenu=new JMenu(Bundle.getMessage("MenuRosterGroups"));  groupMenu.add(createGroupAction);  groupMenu.add(deleteGroupAction);  groupMenu.add(rosterGroupTableAction);  groupMenu.add(rosterEntryToGroupAction);  groupMenu.add(removeRosterEntryToGroupAction);  add(dp3Action);  addSeparator();  add(createAction);  add(editAction);  add(copyAction);  add(importAction);  add(exportAction);  add(deleteAction);  add(printAction);  add(previewAction);  addSeparator();  add(groupMenu);  addSeparator();  add(rosterExportAction);  add(rosterImportAction);  add(speedProfileAction);switch (pMenuType) {case MAINMENU:    createAction.setEnabled(true);  editAction.setEnabled(true);deleteAction.setEnabled(true);importAction.setEnabled(true);exportAction.setEnabled(true);copyAction.setEnabled(true);deleteGroupAction.setEnabled(true);createGroupAction.setEnabled(true);rosterEntryToGroupAction.setEnabled(true);removeRosterEntryToGroupAction.setEnabled(true);printAction.setEnabled(true);previewAction.setEnabled(true);rosterGroupTableAction.setEnabled(true);rosterExportAction.setEnabled(true);rosterImportAction.setEnabled(true);speedProfileAction.setEnabled(true);break;case SELECTMENU:printAction.setEnabled(true);previewAction.setEnabled(true);break;case ENTRYMENU:printAction.setEnabled(true);previewAction.setEnabled(true);break;default :log.error("RosterMenu constructed without a valid menuType parameter: " + pMenuType);}}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  axisListeners=new HashSet<AxisListener>();}  }
class C{  public void loginFailed(String errorMessage){}  }
class C{  private static ConditionalLiveSet processCondition(Expression e,LiveSet onEntry){  e.getAttributes().set(LIVENESS,onEntry);  if (e instanceof Operation) {    Operation op=(Operation)e;switch (op.getOperator()) {case LOGICAL_AND:{        ConditionalLiveSet left=processLogicOperand(op,0,onEntry);        ConditionalLiveSet right=processLogicOperand(op,1,left.truthy);        return new ConditionalLiveSet(left.truthy.union(right.truthy),left.falsey.intersection(right.falsey));      }case LOGICAL_OR:{      ConditionalLiveSet left=processLogicOperand(op,0,onEntry);      ConditionalLiveSet right=processLogicOperand(op,1,left.falsey);      return new ConditionalLiveSet(left.truthy.intersection(right.truthy),left.falsey.union(right.falsey));    }case NOT:  return processLogicOperand(op,0,onEntry).inverse();default :break;}}LiveSet ls=processExpression(e,onEntry);return new ConditionalLiveSet(ls,ls);}  }
class C{  static boolean testIfCanLoadRhinoClasses(ClassLoader loader){  Class<?> testClass=ScriptRuntime.ContextFactoryClass;  Class<?> x=Kit.classOrNull(loader,testClass.getName());  if (x != testClass) {    return false;  }  return true;}  }
class C{  @Override public void onReorganize(Wallet wallet){  log.info("Wallet has been reorganised.");  recreateAllViews(false,controller.getCurrentView());}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public String globalInfo(){  return "Writes to a destination that is in CSV (comma-separated values) format. " + "The column separator can be chosen (default is ',') as well as the value " + "representing missing values (default is '?').";}  }
class C{  @Override public void onDismiss(DialogInterface dialog){  if (task != null) {    task.cancel(true);    task=null;  }  hideProgressDialog();}  }
class C{  protected static List<Example> stripeExample(Example example,double marginSize){  List<Example> slicesExampleList=new LinkedList<>();  List<Bounds> savedBounds=new LinkedList<>();  for (  Bounds match : example.getMatch()) {    int charMargin=(int)Math.max(((match.size() * marginSize) / 2.0),1.0);    Bounds grownMatch=new Bounds(match.start - charMargin,match.end + charMargin);    grownMatch.start=(grownMatch.start >= 0) ? grownMatch.start : 0;    grownMatch.end=(grownMatch.end <= example.getNumberOfChars()) ? grownMatch.end : example.getNumberOfChars();    savedBounds.add(grownMatch);  }  savedBounds=Bounds.mergeBounds(savedBounds);  for (  Bounds slice : savedBounds) {    Example sliceExample=new Example();    sliceExample.setString(example.getString().substring(slice.start,slice.end));    for (    Bounds match : example.getMatch()) {      if (match.start >= slice.end) {        break;      } else {        Bounds slicedMatch=match.windowView(slice);        if (slicedMatch != null) {          sliceExample.getMatch().add(slicedMatch);        }      }    }    for (    Bounds unmatch : example.getUnmatch()) {      if (unmatch.start >= slice.end) {        break;      } else {        Bounds slicedUnmatch=unmatch.windowView(slice);        if (slicedUnmatch != null) {          sliceExample.getUnmatch().add(slicedUnmatch);        }      }    }    sliceExample.populateAnnotatedStrings();    slicesExampleList.add(sliceExample);  }  return slicesExampleList;}  }
class C{  public void removeTextChangedListener(TextWatcher watcher){  mInputView.removeTextChangedListener(watcher);}  }
class C{  static byte[] applyMaskStream(byte[] maskData,final ImageData imageData,final PdfObject newMask,final PdfObject XObject){  byte[] objectData=imageData.getObjectData();  int w=imageData.getWidth();  int h=imageData.getHeight();  final int maskW=newMask.getInt(PdfDictionary.Width);  final int maskH=newMask.getInt(PdfDictionary.Height);  final int maskD=newMask.getInt(PdfDictionary.BitsPerComponent);  if (maskD != 8) {    maskData=ColorSpaceConvertor.normaliseTo8Bit(maskD,maskW,maskH,maskData);  }  if (w == maskW && h == maskH) {    objectData=buildUnscaledByteArray(w,h,objectData,maskData);  } else   if (w < maskW) {    objectData=upScaleImageToMask(w,h,maskW,maskH,objectData,maskData);    XObject.setIntNumber(PdfDictionary.Width,maskW);    XObject.setIntNumber(PdfDictionary.Height,maskH);  } else {    objectData=upScaleMaskToImage(w,h,maskW,maskH,objectData,maskData);  }  XObject.setIntNumber(PdfDictionary.BitsPerComponent,8);  return objectData;}  }
class C{  public void createSubUsageScenario09() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.hoursToMillis(100.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO09_PERUNIT_HOUR",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_HOUR_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO09_PERUNIT_HOUR",serviceDetails,basicSetup.getSecondCustomerUser1(),role);  long userDeassignedTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.hoursToMillis(120.5);  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(basicSetup.getSecondCustomerUser1(),subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.hoursToMillis(120.7);  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  VORoleDefinition changedRole=VOServiceFactory.getRole(serviceDetails,"USER");  subscrSetup.addUser(basicSetup.getSecondCustomerUser1(),changedRole,subDetails.getSubscriptionId());  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.hoursToMillis(150.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO09_PERUNIT_HOUR",subDetails);}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.STRUCTURAL_TYPE_REF;}  }
class C{  protected void buildProfiles(){  mCurrentProfileView.setVisibility(View.INVISIBLE);  mAccountHeaderTextSection.setVisibility(View.INVISIBLE);  mAccountSwitcherArrow.setVisibility(View.INVISIBLE);  mProfileFirstView.setVisibility(View.GONE);  mProfileFirstView.setOnClickListener(null);  mProfileSecondView.setVisibility(View.GONE);  mProfileSecondView.setOnClickListener(null);  mProfileThirdView.setVisibility(View.GONE);  mProfileThirdView.setOnClickListener(null);  mCurrentProfileName.setText("");  mCurrentProfileEmail.setText("");  handleSelectionView(mCurrentProfile,true);  if (mCurrentProfile != null) {    if (mProfileImagesVisible || mOnlyMainProfileImageVisible) {      setImageOrPlaceholder(mCurrentProfileView,mCurrentProfile.getIcon());      if (mProfileImagesClickable) {        mCurrentProfileView.setOnClickListener(onProfileClickListener);        mCurrentProfileView.disableTouchFeedback(false);      } else {        mCurrentProfileView.disableTouchFeedback(true);      }      mCurrentProfileView.setVisibility(View.VISIBLE);      mCurrentProfileView.invalidate();    } else     if (mCompactStyle) {      mCurrentProfileView.setVisibility(View.GONE);    }    mAccountHeaderTextSection.setVisibility(View.VISIBLE);    handleSelectionView(mCurrentProfile,true);    mAccountSwitcherArrow.setVisibility(View.VISIBLE);    mCurrentProfileView.setTag(R.id.material_drawer_profile_header,mCurrentProfile);    StringHolder.applyTo(mCurrentProfile.getName(),mCurrentProfileName);    StringHolder.applyTo(mCurrentProfile.getEmail(),mCurrentProfileEmail);    if (mProfileFirst != null && mProfileImagesVisible && !mOnlyMainProfileImageVisible) {      setImageOrPlaceholder(mProfileFirstView,mProfileFirst.getIcon());      mProfileFirstView.setTag(R.id.material_drawer_profile_header,mProfileFirst);      if (mProfileImagesClickable) {        mProfileFirstView.setOnClickListener(onProfileClickListener);        mProfileFirstView.disableTouchFeedback(false);      } else {        mProfileFirstView.disableTouchFeedback(true);      }      mProfileFirstView.setVisibility(View.VISIBLE);      mProfileFirstView.invalidate();    }    if (mProfileSecond != null && mProfileImagesVisible && !mOnlyMainProfileImageVisible) {      setImageOrPlaceholder(mProfileSecondView,mProfileSecond.getIcon());      mProfileSecondView.setTag(R.id.material_drawer_profile_header,mProfileSecond);      if (mProfileImagesClickable) {        mProfileSecondView.setOnClickListener(onProfileClickListener);        mProfileSecondView.disableTouchFeedback(false);      } else {        mProfileSecondView.disableTouchFeedback(true);      }      mProfileSecondView.setVisibility(View.VISIBLE);      mProfileSecondView.invalidate();    }    if (mProfileThird != null && mThreeSmallProfileImages && mProfileImagesVisible && !mOnlyMainProfileImageVisible) {      setImageOrPlaceholder(mProfileThirdView,mProfileThird.getIcon());      mProfileThirdView.setTag(R.id.material_drawer_profile_header,mProfileThird);      if (mProfileImagesClickable) {        mProfileThirdView.setOnClickListener(onProfileClickListener);        mProfileThirdView.disableTouchFeedback(false);      } else {        mProfileThirdView.disableTouchFeedback(true);      }      mProfileThirdView.setVisibility(View.VISIBLE);      mProfileThirdView.invalidate();    }  } else   if (mProfiles != null && mProfiles.size() > 0) {    IProfile profile=mProfiles.get(0);    mAccountHeaderTextSection.setTag(R.id.material_drawer_profile_header,profile);    mAccountHeaderTextSection.setVisibility(View.VISIBLE);    handleSelectionView(mCurrentProfile,true);    mAccountSwitcherArrow.setVisibility(View.VISIBLE);    if (mCurrentProfile != null) {      StringHolder.applyTo(mCurrentProfile.getName(),mCurrentProfileName);      StringHolder.applyTo(mCurrentProfile.getEmail(),mCurrentProfileEmail);    }  }  if (!mSelectionFirstLineShown) {    mCurrentProfileName.setVisibility(View.GONE);  }  if (!TextUtils.isEmpty(mSelectionFirstLine)) {    mCurrentProfileName.setText(mSelectionFirstLine);    mAccountHeaderTextSection.setVisibility(View.VISIBLE);  }  if (!mSelectionSecondLineShown) {    mCurrentProfileEmail.setVisibility(View.GONE);  }  if (!TextUtils.isEmpty(mSelectionSecondLine)) {    mCurrentProfileEmail.setText(mSelectionSecondLine);    mAccountHeaderTextSection.setVisibility(View.VISIBLE);  }  if (!mSelectionListEnabled) {    mAccountSwitcherArrow.setVisibility(View.INVISIBLE);    handleSelectionView(null,false);  }  if (!mSelectionListEnabledForSingleProfile && mProfileFirst == null && (mProfiles == null || mProfiles.size() == 1)) {    mAccountSwitcherArrow.setVisibility(View.INVISIBLE);    handleSelectionView(null,false);  }  if (mOnAccountHeaderSelectionViewClickListener != null) {    handleSelectionView(mCurrentProfile,true);  }}  }
class C{  public static boolean contains(final int[] array,final int v){  for (  final int e : array)   if (e == v)   return true;  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void run(){  Log.d(LOG,"run(): sampleRate=" + sampleRate + ", channels="+ channels+ ", bufferSizeInBytes="+ bufferSizeInBytes+ " ("+ bufferSizeInMs+ " ms)");  isPlaying=false;  AudioTrack atrack=null;  try {    atrack=new AudioTrack(AudioManager.STREAM_MUSIC,sampleRate,channels == 1 ? AudioFormat.CHANNEL_CONFIGURATION_MONO : AudioFormat.CHANNEL_CONFIGURATION_STEREO,AudioFormat.ENCODING_PCM_16BIT,bufferSizeInBytes,AudioTrack.MODE_STREAM);    atrack.setPlaybackPositionUpdateListener(this);    atrack.setPositionNotificationPeriod(msToSamples(200,sampleRate,channels));    if (playerCallback != null)     playerCallback.playerAudioTrackCreated(atrack);    this.audioTrack=atrack;  } catch (  Throwable t) {    Log.e(LOG,"Cannot create AudioTrack: " + t);    stop();    if (playerCallback != null)     playerCallback.playerException(t);  }  while (!stopped) {    int ln=acquireSamples();    if (stopped || ln == 0) {      releaseSamples();      break;    }    int writtenNow=0;    do {      if (writtenNow != 0) {        Log.d(LOG,"too fast for playback, sleeping...");        try {          Thread.sleep(50);        } catch (        InterruptedException e) {        }      }      int written=atrack.write(lsamples,writtenNow,ln);      if (written < 0) {        Log.e(LOG,"error in playback feed: " + written);        stopped=true;        break;      }      writtenTotal+=written;      int buffered=writtenTotal - atrack.getPlaybackHeadPosition() * channels;      if (!stopped && !isPlaying) {        if (buffered * 2 >= bufferSizeInBytes) {          Log.d(LOG,"start of AudioTrack - buffered " + buffered + " samples");          atrack.play();          isPlaying=true;        } else {          Log.d(LOG,"start buffer not filled enough - AudioTrack not started yet");        }      }      writtenNow+=written;      ln-=written;    } while (ln > 0 && !stopped);    releaseSamples();  }  if (!stopped && stoppedByEOF)   waitForLastTone();  if (isPlaying)   atrack.pause();  atrack.flush();  atrack.release();  stopped=true;  Log.d(LOG,"run() stopped.");}  }
class C{  protected void pruneEnd() throws Exception {  double errorsLeaf, errorsTree;  errorsTree=errorsForTree();  errorsLeaf=errorsForLeaf();  if (Utils.smOrEq(errorsLeaf,errorsTree)) {    m_isLeaf=true;    m_sons=null;    m_localModel=new NoSplit(localModel().distribution());  }}  }
class C{  public void readRep(Repository rep,ObjectId idStep,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleException {  try {    this.tabelName=rep.getStepAttributeString(idStep,"TableName");    this.outputRowSize=rep.getStepAttributeString(idStep,"outputRowSize");    this.schemaName=rep.getStepAttributeString(idStep,"schemaName");    this.cubeName=rep.getStepAttributeString(idStep,"cubeName");    this.dimensionCount=rep.getStepAttributeString(idStep,"dimensionCount");    this.noDictionaryDims=rep.getStepAttributeString(idStep,"noDictionaryDims");    this.noDictionaryDims=rep.getStepAttributeString(idStep,"noDictionaryDimsMapping");    this.complexDimensionCount=rep.getStepAttributeString(idStep,"complexDimensionCount");    this.measureCount=rep.getStepAttributeString(idStep,"measureCount");    this.updateMemberRequest=rep.getStepAttributeString(idStep,"isUpdateMemberRequest");    this.measureDataType=rep.getStepAttributeString(idStep,"measureDataType");    this.currentRestructNumber=(int)rep.getStepAttributeInteger(idStep,"currentRestructNumber");    this.partitionID=rep.getStepAttributeString(idStep,"partitionID");    this.segmentId=rep.getStepAttributeString(idStep,"segmentId");    this.taskNo=rep.getStepAttributeString(idStep,"taskNo");  } catch (  Exception ex) {    throw new KettleException(BaseMessages.getString(PKG,"CarbonDataWriterStepMeta.Exception.UnexpectedErrorInReadingStepInfo",new String[0]),ex);  }}  }
class C{  public static Function<String> jsonObject(Object... labelValuePairs){  return new JSONArgumentFunction<>("json_object",null,labelValuePairs);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    double fx, fy;    float aspect;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double eightGridRes=8 * gridRes;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("circular_bw.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          if (fx != 0) {            aspect=(float)(180 - Math.atan(fy / fx) * radToDeg + 90 * (fx / Math.abs(fx)));            outputFile.setValue(row,col,aspect);          } else {            outputFile.setValue(row,col,-1);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isSelected(){  for (  JRadioButton button : buttonMap.values()) {    if (button.isSelected()) {      return true;    }  }  return false;}  }
class C{  @NoInline public static void writeInt(int value){  if (runningVM) {    sysCall.sysConsoleWriteInteger(value,0);  } else {    writeNotRunningVM(value);  }}  }
class C{  public ChooserIntentBuilder forIntents(Intent... intents){  mIntent.putExtra(BottomSheetChooserActivity.EXTRA_SHARE_INTENTS,new ArrayList<>(Arrays.asList(intents)));  return this;}  }
class C{  public Set<String> myPublicIPs(){  final String staticIP=getConfig("staticIP","");  if (staticIP.length() > 0) {    HashSet<String> h=new HashSet<>();    h.add(staticIP);    return h;  }  Set<String> h=new LinkedHashSet<>();  for (  InetAddress i : Domains.myPublicIPv6()) {    String s=i.getHostAddress();    if (Seed.isProperIP(s))     h.add(Domains.chopZoneID(s));  }  for (  InetAddress i : Domains.myPublicIPv4()) {    String s=i.getHostAddress();    if (Seed.isProperIP(s))     h.add(Domains.chopZoneID(s));  }  return h;}  }
class C{  public boolean isReadLocked(){  return rwl.getReadLockCount() > 0;}  }
class C{  @Override public void drawBackground(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea){  float x0=(float)dataArea.getX();  float x1=x0 + (float)Math.abs(this.xOffset);  float x3=(float)dataArea.getMaxX();  float x2=x3 - (float)Math.abs(this.xOffset);  float y0=(float)dataArea.getMaxY();  float y1=y0 - (float)Math.abs(this.yOffset);  float y3=(float)dataArea.getMinY();  float y2=y3 + (float)Math.abs(this.yOffset);  GeneralPath clip=new GeneralPath();  clip.moveTo(x0,y0);  clip.lineTo(x0,y2);  clip.lineTo(x1,y3);  clip.lineTo(x3,y3);  clip.lineTo(x3,y1);  clip.lineTo(x2,y0);  clip.closePath();  Composite originalComposite=g2.getComposite();  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,plot.getBackgroundAlpha()));  Paint backgroundPaint=plot.getBackgroundPaint();  if (backgroundPaint != null) {    g2.setPaint(backgroundPaint);    g2.fill(clip);  }  GeneralPath leftWall=new GeneralPath();  leftWall.moveTo(x0,y0);  leftWall.lineTo(x0,y2);  leftWall.lineTo(x1,y3);  leftWall.lineTo(x1,y1);  leftWall.closePath();  g2.setPaint(getWallPaint());  g2.fill(leftWall);  GeneralPath bottomWall=new GeneralPath();  bottomWall.moveTo(x0,y0);  bottomWall.lineTo(x1,y1);  bottomWall.lineTo(x3,y1);  bottomWall.lineTo(x2,y0);  bottomWall.closePath();  g2.setPaint(getWallPaint());  g2.fill(bottomWall);  g2.setPaint(Color.lightGray);  Line2D corner=new Line2D.Double(x0,y0,x1,y1);  g2.draw(corner);  corner.setLine(x1,y1,x1,y3);  g2.draw(corner);  corner.setLine(x1,y1,x3,y1);  g2.draw(corner);  Image backgroundImage=plot.getBackgroundImage();  if (backgroundImage != null) {    Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX() + getXOffset(),dataArea.getY(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());    plot.drawBackgroundImage(g2,adjusted);  }  g2.setComposite(originalComposite);}  }
class C{  public static String inflate(String name,String namespace){  if (name == null || "".equals(name))   return name;  if (name.contains("://"))   return name;  return namespace + name;}  }
class C{  public static void f(String tag,String msg,Object... args){  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  public boolean isRowAvailable(){  return (getDataModel().isRowAvailable());}  }
class C{  public RaftParameters withLogSyncBatchSize(int logSyncBatchSize){  this.logSyncBatchSize=logSyncBatchSize;  return this;}  }
class C{  public <T extends SafeCloseable>T add(T closeable){  boolean needToClose=false;synchronized (mLock) {    if (mClosed) {      needToClose=true;    } else {      mCloseables.add(closeable);    }  }  if (needToClose) {    closeable.close();  }  return closeable;}  }
class C{  public void teardown(){  holdingBuffer.clear();}  }
class C{  public CellEntry(BaseEntry sourceEntry){  super(sourceEntry);  getCategories().add(CATEGORY);}  }
class C{  public boolean unExportVolume(final String xivSystem,final String exportType,final String exportName,final String volumeName) throws Exception {  final String instanceURL=MessageFormat.format(EXPORT_VOLUME_INSTANCE_URL,xivSystem,exportType.toLowerCase(),exportName,volumeName);  boolean deleteSuccessful=false;  if (findAvailability(instanceURL)) {    ResponseValidator failureStatus=executePOSTRequest(xivSystem,instanceURL,DELETE_BODY);    deleteSuccessful=true;    if (failureStatus.isFailed()) {      throw XIVRestException.exceptions.volumeExportToClusterFailure(xivSystem,exportName,volumeName,failureStatus.toString());    }  } else {    _log.info("Volume not available to do unexport on XIV {} : {}",exportType + SEPARATOR + exportName+ SEPARATOR+ volumeName,xivSystem);  }  return deleteSuccessful;}  }
class C{  public TLongHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  _hashingStrategy=this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattributeNS02.class,args);}  }
class C{  public boolean is_set_page(){  return this.page != null;}  }
class C{  public void mutableSubtract(double r,double i){  mutableAdd(-r,-i);}  }
class C{  private void updateRange(double value){  mMinValue=Math.min(mMinValue,value);  mMaxValue=Math.max(mMaxValue,value);}  }
class C{  public static UsageContext parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  UsageContext object=new UsageContext();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"UsageContext".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (UsageContext)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    java.util.ArrayList list2=new java.util.ArrayList();    java.util.ArrayList list3=new java.util.ArrayList();    java.util.ArrayList list4=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","chapUsername").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","chapUsername").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.setChapUsername((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","hostInitiator").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list2.add(null);        reader.next();      } else {        list2.add(HostInitiatorInfo.Factory.parse(reader));      }      boolean loopDone2=false;      while (!loopDone2) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone2=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","hostInitiator").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list2.add(null);              reader.next();            } else {              list2.add(HostInitiatorInfo.Factory.parse(reader));            }          } else {            loopDone2=true;          }        }      }      object.setHostInitiator((HostInitiatorInfo[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(HostInitiatorInfo.class,list2));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","iscsiInitiatorIpAddress").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list3.add(null);        reader.next();      } else {        list3.add(reader.getElementText());      }      boolean loopDone3=false;      while (!loopDone3) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone3=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","iscsiInitiatorIpAddress").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list3.add(null);              reader.next();            } else {              list3.add(reader.getElementText());            }          } else {            loopDone3=true;          }        }      }      object.setIscsiInitiatorIpAddress((java.lang.String[])list3.toArray(new java.lang.String[list3.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","mountPoint").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list4.add(null);        reader.next();      } else {        list4.add(MountInfo.Factory.parse(reader));      }      boolean loopDone4=false;      while (!loopDone4) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone4=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","mountPoint").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list4.add(null);              reader.next();            } else {              list4.add(MountInfo.Factory.parse(reader));            }          } else {            loopDone4=true;          }        }      }      object.setMountPoint((MountInfo[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(MountInfo.class,list4));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","sessionTimeoutInSeconds").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSessionTimeoutInSeconds(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      object.setSessionTimeoutInSeconds(java.lang.Long.MIN_VALUE);    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","vcGuid").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setVcGuid(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public ElementType parent(){  return theType.parent();}  }
class C{  public static TriggerDto transformToDto(Trigger trigger){  TriggerDto result=createDtoObject(TriggerDto.class,trigger);  result.setAlertId(trigger.getAlert().getId());  for (  Notification notification : trigger.getNotifications()) {    result.addNotificationIds(notification);  }  return result;}  }
class C{  public WebBasketLine(int M_Product_ID,String Name,BigDecimal Qty,BigDecimal Price){  setM_Product_ID(M_Product_ID);  setName(Name);  setQuantity(Qty);  setPrice(Price);}  }
class C{  @Override public String toSummaryString(){  return "Number of rules: " + m_root.numRules() + "\n";}  }
class C{  public boolean isValid(INode n){  FreeCellNode state=(FreeCellNode)n;  if (card == 0) {    return false;  }  suit=(short)((card - 1) % 4);  rank=(short)(1 + ((card - 1) >> 2));  return (state.foundationEncoding[suit] + 1 == rank);}  }
class C{  public static Class checkForWrapperType(String className){  return (Class)wrapperTypes.get(className);}  }
class C{  private static void addVplexMirrorToVolume(Volume volume,VplexMirror mirror,DbClient dbClient){  StringSet mirrors=volume.getMirrors();  if (mirrors == null) {    mirrors=new StringSet();  }  mirrors.add(mirror.getId().toString());  volume.setMirrors(mirrors);  dbClient.updateObject(volume);}  }
class C{  public RegionRoleException(String s,String regionFullPath){  super(s);  this.regionFullPath=regionFullPath;}  }
class C{  public Min3(){  super("min3",3);}  }
class C{  public static MaxProjectionExpression maxDistinct(Expression expression){  return new MaxProjectionExpression(expression,true);}  }
class C{  public void clearValues(){  mDataSets.clear();  notifyDataChanged();}  }
class C{  public BulkOperationExecutor(JestClient client){  super(client);}  }
class C{  public void keyTyped(KeyEvent e){  int keyChar=e.getKeyChar();  if (keyChar == 0x8) {    if (outputMark == getCaretPosition()) {      e.consume();    }  } else   if (getCaretPosition() < outputMark) {    setCaretPosition(outputMark);  }}  }
class C{  public RealFIRFilter(float[] coefficients,float gain){  mCoefficients=coefficients;  mGain=gain;  mBufferSize=mCoefficients.length;  mBuffer=new float[mBufferSize];  mBufferPointer=mBufferSize - 1;  generateIndexMap(mBufferSize);}  }
class C{  public static <C extends Comparable<?>>Range<C> downTo(C endpoint,BoundType boundType){switch (boundType) {case OPEN:    return greaterThan(endpoint);case CLOSED:  return atLeast(endpoint);default :throw new AssertionError();}}  }
class C{  public boolean isDirectDebitAvailable(){  return isPaymentTypeAvailable(getSelectedOrganization(),PaymentInfoType.DIRECT_DEBIT);}  }
class C{  public boolean newerThan(Version o){  return compareTo(o) == 1;}  }
class C{  Node(Node<K,V> next){  this.key=null;  this.value=this;  this.next=next;}  }
class C{  private boolean commonNodeEquality(Node n1,Node n2){  if (!nodeEquals(n1.getComment(),n2.getComment())) {    return false;  }  if (!nodesEquals(n1.getOrphanComments(),n2.getOrphanComments())) {    return false;  }  return true;}  }
class C{  public static boolean isValidServername(String servername){  int len=servername.length();  int LastPosOfDot=servername.lastIndexOf('.');  int FirstPosOfDot=servername.indexOf('c');  return !(len < 3 || LastPosOfDot == -1 || LastPosOfDot == len - 1 || FirstPosOfDot == 0);}  }
class C{  @Override public String render(){  StringBuilder rendered=new StringBuilder(renderOpenTag());  if (children != null && !children.isEmpty()) {    for (    DomContent child : children) {      rendered.append(child.render());    }  }  rendered.append(renderCloseTag());  return rendered.toString();}  }
class C{  boolean validateUserPasswordHash(byte[] userPasswordHash){  if (userPasswordHash.length == 0 && passwordHash.length == 0) {    return true;  }  if (userPasswordHash.length == 0) {    userPasswordHash=SHA256.getKeyPasswordHash(getName(),new char[0]);  }  byte[] hash=SHA256.getHashWithSalt(userPasswordHash,salt);  return Utils.compareSecure(hash,passwordHash);}  }
class C{  public void testSplits() throws Exception {  OSM osm=new OSM(null);  osm.intersectionDetection=true;  osm.readFromUrl(StreetLayerTest.class.getResource("speedFlagsTest.pbf").toString());  StreetLayer streetLayer=new StreetLayer(TNBuilderConfig.defaultConfig());  streetLayer.loadFromOsm(osm,false,true);  osm.close();  streetLayer.indexStreets();  double lat=46.5558163;  double lon=15.6126969;  EnumSet<EdgeStore.EdgeFlag> forwardEdgeFlags=streetLayer.edgeStore.getCursor(0).getFlags();  int forwardEdgeSpeed=streetLayer.edgeStore.getCursor(0).getSpeed();  EnumSet<EdgeStore.EdgeFlag> backwardEdgeFlags=streetLayer.edgeStore.getCursor(1).getFlags();  int backwardEdgeSpeed=streetLayer.edgeStore.getCursor(1).getSpeed();  int vertexId=streetLayer.getOrCreateVertexNear(lat,lon,StreetMode.WALK);  EdgeStore.Edge oldForwardEdge=streetLayer.edgeStore.getCursor(0);  assertEquals(forwardEdgeFlags,oldForwardEdge.getFlags());  assertEquals(forwardEdgeSpeed,oldForwardEdge.getSpeed());  EdgeStore.Edge oldBackwardEdge=streetLayer.edgeStore.getCursor(1);  assertEquals(backwardEdgeFlags,oldBackwardEdge.getFlags());  assertEquals(backwardEdgeSpeed,oldBackwardEdge.getSpeed());  EdgeStore.Edge newForwardEdge=streetLayer.edgeStore.getCursor(2);  assertEquals(forwardEdgeFlags,newForwardEdge.getFlags());  assertEquals(forwardEdgeSpeed,newForwardEdge.getSpeed());  EdgeStore.Edge newBackwardEdge=streetLayer.edgeStore.getCursor(3);  assertEquals(backwardEdgeFlags,newBackwardEdge.getFlags());  assertEquals(backwardEdgeSpeed,newBackwardEdge.getSpeed());}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  TextView imageTV=(TextView)this.findViewById(R.id.image_tv);  imageTV.setText(OBJECT_IMAGE_URL);  this.startBT=(Button)this.findViewById(R.id.start_service_bt);  this.imageIV=(ImageView)this.findViewById(R.id.image_iv);}  }
class C{  public void reset(){  count=0;  startTime=System.currentTimeMillis();}  }
class C{  public static TypeKind fromPrimitiveOrVoidTypeChar(char ch){switch (ch) {case 'Z':    return TypeKind.BOOLEAN;case 'C':  return TypeKind.CHAR;case 'F':return TypeKind.FLOAT;case 'D':return TypeKind.DOUBLE;case 'B':return TypeKind.BYTE;case 'S':return TypeKind.SHORT;case 'I':return TypeKind.INT;case 'J':return TypeKind.LONG;case 'V':return TypeKind.VOID;}throw new IllegalArgumentException("unknown primitive or void type character: " + ch);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.SOURCE_FRAGMENT__SOURCE_FRAGMENT_TYPE:    setSourceFragmentType(SOURCE_FRAGMENT_TYPE_EDEFAULT);  return;case N4mfPackage.SOURCE_FRAGMENT__PATHS:getPaths().clear();return;}super.eUnset(featureID);}  }
class C{  public RslPathInfo(){  rslUrls=new ArrayList<String>();}  }
class C{  public static void removeView(ViewGroup parent,View view){  if (parent != null && view != null) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {      if (parent.isInLayout()) {        parent.removeViewInLayout(view);      } else {        parent.removeView(view);      }    } else {      parent.removeView(view);    }  }}  }
class C{  public void cancel(UUID queryId) throws Exception {  this.our_mgr.cancel(queryId);}  }
class C{  public TungstenProperties executeQueryWithTimeouts(String hostname,int port,String user,String password,String db,String query,int timeoutMsecs){  if (testConditionEnabled && testCondition != ExecuteQueryStatus.UNDEFINED) {    return testConditionWithResults();  }  String statusMessage=null;  int mysqlErrno=-1;  TungstenProperties statusAndResult=new TungstenProperties();  if (query.length() + 1 > MySQLPacket.MAX_LENGTH) {    statusMessage=String.format("The query size, %d, is too large to execute.",query.length());    statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.QUERY_TOO_LARGE);    statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);    logger.warn(formatExecStatus(statusAndResult));    return logAndReturnProperties(statusAndResult);  }  Socket socket=null;  String socketPhase=SOCKET_PHASE_CONNECT;  ExecuteQueryStatus timeoutPhase=ExecuteQueryStatus.SOCKET_CONNECT_TIMEOUT;  InputStream socketInput=null;  OutputStream socketOutput=null;  MySQLPacket queryResult=null;  try {    SocketAddress sockaddr=new InetSocketAddress(hostname,port);    socket=new Socket();    socket.setSoTimeout(timeoutMsecs);    socket.setReuseAddress(true);    long beforeConnect=System.currentTimeMillis();    socket.connect(sockaddr,timeoutMsecs);    long timeToConnectMs=System.currentTimeMillis() - beforeConnect;    if (logger.isTraceEnabled()) {      logger.trace("Connection to " + hostname + " took "+ timeToConnectMs+ "ms");    }    statusAndResult.setLong(TIME_TO_CONNECT_MS,timeToConnectMs);    socketInput=socket.getInputStream();    socketOutput=socket.getOutputStream();    if (socketInput == null || socketOutput == null) {      statusMessage=String.format("Socket connect error: InputStream=%s, OutputStream=%s after connect to %s:%s",socketInput,socketOutput,hostname,port);      statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.SOCKET_NO_IO);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    int timeLeft=(int)(timeoutMsecs - timeToConnectMs);    if (timeLeft <= 0) {      statusMessage=String.format("Timeout while connecting: %d ms exceeds allowed timeout of %d ms.",timeToConnectMs,timeoutMsecs);      statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.SOCKET_CONNECT_TIMEOUT);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    socket.setSoTimeout(timeLeft);    long beforeInit=System.currentTimeMillis();    socketPhase=SOCKET_PHASE_READ;    timeoutPhase=ExecuteQueryStatus.LOGIN_RESPONSE_TIMEOUT;    MySQLPacket greeting=MySQLPacket.mysqlReadPacket(socketInput,true);    if (greeting.isError()) {      greeting.getByte();      mysqlErrno=greeting.getShort();      statusAndResult.setInt(MYSQL_ERRNO,mysqlErrno);      if ((int)mysqlErrno == MySQLConstants.ER_CON_COUNT_ERROR) {        statusMessage=String.format("MySQL Error # %d, Too many connections",mysqlErrno);        statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.TOO_MANY_CONNECTIONS);        statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);        logger.warn(formatExecStatus(statusAndResult));        return logAndReturnProperties(statusAndResult);      } else {        statusMessage=String.format("MySQL Error # %d",mysqlErrno);        statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.MYSQL_ERROR);        statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);        logger.warn(formatExecStatus(statusAndResult));        return logAndReturnProperties(statusAndResult);      }    }    byte[] seed=MySQLGreetingPacket.getSeed(greeting);    byte[] encryptedPassword=encryptMySQLPassword(password,seed);    MySQLAuthPacket auth=new MySQLAuthPacket((byte)(greeting.getPacketNumber() + 1),user,encryptedPassword,db);    socketPhase=SOCKET_PHASE_WRITE;    timeoutPhase=ExecuteQueryStatus.SEND_QUERY_TIMEOUT;    auth.write(socketOutput);    socketOutput.flush();    socketPhase=SOCKET_PHASE_READ;    timeoutPhase=ExecuteQueryStatus.QUERY_EXEC_TIMEOUT;    MySQLPacket response=MySQLPacket.mysqlReadPacket(socketInput,true);    if (response.isOK()) {      if (logger.isDebugEnabled()) {        logger.debug("Connected!");      }      long timeToInitMs=System.currentTimeMillis() - beforeInit;      if (logger.isTraceEnabled()) {        logger.trace("Took " + timeToInitMs + "ms to initialize database connection");      }      statusAndResult.setLong(TIME_TO_INIT_MS,timeToInitMs);      timeLeft=(int)(timeLeft - timeToInitMs);      if (timeLeft <= 0) {        statusMessage=String.format("Socket connect + login attempt took %d ms which exceeds allowed timeout of %d ms.",(timeToConnectMs + timeToInitMs),timeoutMsecs);        statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.LOGIN_RESPONSE_TIMEOUT);        statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);        return logAndReturnProperties(statusAndResult);      }      long beforeQuery=System.currentTimeMillis();      socket.setSoTimeout((int)(timeoutMsecs - timeToConnectMs - timeToInitMs));      MySQLQueryPacket queryPacket=new MySQLQueryPacket((byte)0,query);      timeoutPhase=ExecuteQueryStatus.QUERY_RESULTS_TIMEOUT;      socketPhase=SOCKET_PHASE_WRITE;      queryPacket.write(socketOutput);      socketOutput.flush();      socketPhase=SOCKET_PHASE_READ;      queryResult=MySQLPacket.mysqlReadPacket(socketInput,true);      long timeToExecQueryMs=System.currentTimeMillis() - beforeQuery;      if (logger.isTraceEnabled()) {        logger.trace("Took " + timeToExecQueryMs + "ms to run query "+ query);      }      statusAndResult.setLong(TIME_TO_EXEC_QUERY_MS,timeToExecQueryMs);      timeLeft=(int)(timeLeft - timeToExecQueryMs);      if (timeLeft <= 0) {        statusMessage=String.format("Connection + database initialization + query execution took %d ms which exceeds allowed timeout of %d ms.",(timeToConnectMs + timeToInitMs + timeToExecQueryMs),timeoutMsecs);        statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.QUERY_EXEC_TIMEOUT);        statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);        logger.warn(formatExecStatus(statusAndResult));        return logAndReturnProperties(statusAndResult);      }      if (queryResult.isError()) {        if (logger.isDebugEnabled()) {          logger.debug("Result was: " + queryResult);        }        queryResult.getByte();        mysqlErrno=queryResult.getShort();        queryResult.getByte();        queryResult.getBytes(5);        statusMessage=String.format("Query failed. MySQL Errno: %d, SQL State:%d, '%s'\nQuery: '%s'",response.peekErrorErrno(),response.peekErrorSQLState(),query,queryResult.getString(queryResult.getRemainingBytes()));        statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.QUERY_RESULT_FAILED);        statusAndResult.setInt(MYSQL_ERRNO,mysqlErrno);        statusAndResult.setObject(STATUS_MESSAGE_KEY,statusMessage);        logger.warn(formatExecStatus(statusAndResult));        return logAndReturnProperties(statusAndResult);      }      if (logger.isDebugEnabled()) {        logger.debug("Query " + query + " succeeded");      }      int numberOfColumns=queryResult.getByte();      List<String> columnNames=new ArrayList<String>();      List<Byte> columnTypes=new ArrayList<Byte>();      TungstenProperties resultSet=new TungstenProperties();      for (int i=0; i < numberOfColumns; i++) {        queryResult=MySQLPacket.mysqlReadPacket(socketInput,true);        queryResult.getLenEncodedString(true);        queryResult.getLenEncodedString(true);        queryResult.getLenEncodedString(true);        queryResult.getLenEncodedString(true);        String name=queryResult.getLenEncodedString(true);        columnNames.add(name);        queryResult.getLenEncodedString(true);        queryResult.getByte();        queryResult.getShort();        queryResult.getInt32();        byte type=queryResult.getByte();        columnTypes.add(type);      }      queryResult=MySQLPacket.mysqlReadPacket(socketInput,true);      queryResult=MySQLPacket.mysqlReadPacket(socketInput,true);      while (!queryResult.isEOF() && !queryResult.isError()) {        for (int i=0; i < numberOfColumns; i++) {          String row=queryResult.getLenEncodedString(false);          if (logger.isDebugEnabled()) {            logger.debug("Got Row: " + row);          }          byte type=columnTypes.get(i);          if (type == MySQLConstants.MYSQL_TYPE_DATE || type == MySQLConstants.MYSQL_TYPE_DATETIME || type == MySQLConstants.MYSQL_TYPE_NEWDATE || type == MySQLConstants.MYSQL_TYPE_TIMESTAMP) {            SimpleDateFormat f=new SimpleDateFormat("yyyy-MM-dd");            if (row.length() > 11) {              f=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");            }            try {              java.util.Date d=f.parse(row);              resultSet.setLong(columnNames.get(i),d.getTime());            } catch (            ParseException pe) {              resultSet.setLong(columnNames.get(i),0L);            }          } else {            resultSet.setString(columnNames.get(i),row);          }        }        queryResult=MySQLPacket.mysqlReadPacket(socketInput,true);      }      statusMessage=String.format("Query to %s:%d succeeded.",hostname,port);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.OK);      statusAndResult.setObject(RESULT_KEY,resultSet);      columnNames.clear();      columnTypes.clear();      return logAndReturnProperties(statusAndResult);    } else     if (response.isEOF()) {      statusMessage=String.format("Got MySQL EOF packet before any results: status=%d, warnings=%d\n" + "Make sure you are using a valid mysql user with correct permissions for this query.\n" + "Also, check for entries in mysql.user with a blank name in the 'user' column.\n"+ "Finally, make sure you are not using old_passwords=1 in your my.cnf file.",response.peekEOFServerStatus(),response.peekEOFWarningCount());      statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.MYSQL_PREMATURE_EOF);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    } else     if (response.isError()) {      statusMessage=String.format("Query failed. MySQL Errno: %d, SQL State: %d\n%s\nQuery: %s\n",response.peekErrorErrno(),response.peekErrorSQLState(),response.peekErrorErrorMessage(),query);      statusAndResult.setInt(MYSQL_ERRNO,response.peekErrorErrno());      statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.QUERY_EXECUTION_FAILED);      statusAndResult.setObject(STATUS_MESSAGE_KEY,statusMessage);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }  } catch (  SocketTimeoutException so) {    statusMessage=String.format("Socket timeout while %s a socket %s:%d\nException='%s'",socketPhase,hostname,port,so);    statusAndResult.setObject(STATUS_KEY,timeoutPhase);    statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);    statusAndResult.setObject(STATUS_EXCEPTION,so);    logger.warn(formatExecStatus(statusAndResult));    return logAndReturnProperties(statusAndResult);  }catch (  IOException ioe) {    if ("Host is down".toLowerCase().contains(ioe.getMessage().toLowerCase())) {      statusMessage=String.format("Host '%s' is down detected while %s a socket to %s:%d\nException='%s'",hostname,socketPhase,hostname,port,ioe);      statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.HOST_IS_DOWN);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      statusAndResult.setObject(STATUS_EXCEPTION,ioe);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    if ("No route to host".toLowerCase().contains(ioe.getMessage().toLowerCase())) {      statusMessage=String.format("No route to host '%s' detected while %s a socket to %s:%d\nException='%s'",hostname,socketPhase,hostname,port,ioe);      statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.NO_ROUTE_TO_HOST);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      statusAndResult.setObject(STATUS_EXCEPTION,ioe);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    if (ioe.getMessage().toLowerCase().contains("cannot assign requested address")) {      statusMessage=String.format("I/O exception while %s a socket to %s:%d\nException='%s'\n" + "Your open file limit may be too low.  Check with 'ulimit -n' and increase if necessary.",socketPhase,hostname,port,ioe);      statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.OPEN_FILE_LIMIT_ERROR);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      statusAndResult.setObject(STATUS_EXCEPTION,ioe);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    if (ioe.toString().contains("java.net.UnknownHostException")) {      statusMessage=String.format("I/O exception while %s a socket to %s:%d\nException='%s'\n" + "There may be an issue with your DNS for this host or your /etc/hosts entry is not correct.",socketPhase,hostname,port,ioe);      statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.UNKNOWN_HOST);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      statusAndResult.setObject(STATUS_EXCEPTION,ioe);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    statusMessage=String.format("I/O exception caught while %s a socket to %s:%d\nException='%s'",socketPhase,hostname,port,ioe);    statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.SOCKET_IO_ERROR);    statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);    statusAndResult.setObject(STATUS_EXCEPTION,ioe);    logger.warn(formatExecStatus(statusAndResult));    return logAndReturnProperties(statusAndResult);  }catch (  Exception e) {    statusMessage=String.format("Exception while attempting to execute a query on %s:%d\nException=%s",hostname,port,e);    statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.UNEXPECTED_EXCEPTION);    statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);    statusAndResult.setObject(STATUS_EXCEPTION,e);    logger.warn(formatExecStatus(statusAndResult),e);    return logAndReturnProperties(statusAndResult);  } finally {    if (socketOutput != null) {      try {        MySQLPacket p=new MySQLPacket(1,(byte)0);        p.putByte((byte)MySQLConstants.COM_QUIT);        p.write(socketOutput);      } catch (      Exception ignored) {      }    }    if (socketOutput != null) {      try {        socketOutput.close();      } catch (      Exception ignored) {      } finally {        socketOutput=null;      }    }    if (queryResult != null) {      try {        queryResult.close();      } catch (      Exception ignored) {      } finally {        queryResult=null;      }    }    if (socketInput != null) {      try {        socketInput.close();      } catch (      Exception ignored) {      } finally {        socketInput=null;      }    }    if (socket != null) {      try {        socket.close();      } catch (      IOException i) {        logger.warn("Exception while closing socket",i);      } finally {        socket=null;      }    }  }  statusMessage=String.format("Returning after query, '%s' on %s:%d due to an untrapped condition.\nCall Continuent Support",query,hostname,port);  if (statusAndResult != null) {    statusAndResult.setObject(STATUS_KEY,ExecuteQueryStatus.UNTRAPPED_CONDITION);    statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);    logger.warn(formatExecStatus(statusAndResult));  }  return logAndReturnProperties(statusAndResult);}  }
class C{  void listItemsSortedSecureParam() throws Exception {  System.out.println("Secure Systems Inc. - list items");  String order=input("order (1, 2, -1, -2)?");  PreparedStatement prep=conn.prepareStatement("SELECT ID, NAME FROM ITEMS ORDER BY ?");  try {    prep.setInt(1,Integer.parseInt(order));    ResultSet rs=prep.executeQuery();    while (rs.next()) {      System.out.println(rs.getString(1) + ": " + rs.getString(2));    }    rs.close();  } catch (  Exception e) {    System.out.println(e);  }  prep.close();}  }
class C{  public void testStoredEntrySize() throws Exception {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ZipOutputStream out=new ZipOutputStream(baos);  String name="test_file";  int expectedLength=5;  ZipEntry outEntry=new ZipEntry(name);  byte[] buffer=new byte[expectedLength];  outEntry.setMethod(ZipEntry.STORED);  CRC32 crc=new CRC32();  crc.update(buffer);  outEntry.setCrc(crc.getValue());  outEntry.setSize(buffer.length);  out.putNextEntry(outEntry);  out.write(buffer);  out.closeEntry();  out.close();  byte[] outBuffer=baos.toByteArray();  File zipFile=createTemporaryZipFile();  writeBytes(zipFile,outBuffer);  ZipFile zip=new ZipFile(zipFile);  ZipEntry ze=zip.getEntry(name);  ze.setCompressedSize(expectedLength - 1);  InputStream stream=zip.getInputStream(ze);  int count=0;  int read;  while ((read=stream.read(buffer)) != -1) {    count+=read;  }  assertEquals(expectedLength,count);}  }
class C{  public VerticalDoubleDataBox(int rows,int cols){  this.data=new double[cols][rows];  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      data[j][i]=Double.NaN;    }  }}  }
class C{  void removeEntity(final IEntity entity){  final EntityView<IEntity> view=entities.remove(entity);  if (view != null) {    removeEntityView(view);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.213 -0400",hash_original_method="55E74F52DCD070A69EA862B249BE28A1",hash_generated_method="54AD8CE3EC93D5EACA9CF6BDCC18E771") final long fullyRelease(Node node){  boolean failed=true;  try {    long savedState=getState();    if (release(savedState)) {      failed=false;      return savedState;    } else {      throw new IllegalMonitorStateException();    }  }  finally {    if (failed)     node.waitStatus=Node.CANCELLED;  }}  }
class C{  private void assertWriteLittleEndian32(byte[] data,int value) throws Exception {  ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();  CodedOutputStream output=CodedOutputStream.newInstance(rawOutput);  output.writeRawLittleEndian32(value);  output.flush();  assertEqualBytes(data,rawOutput.toByteArray());  for (int blockSize=1; blockSize <= 16; blockSize*=2) {    rawOutput=new ByteArrayOutputStream();    output=CodedOutputStream.newInstance(rawOutput,blockSize);    output.writeRawLittleEndian32(value);    output.flush();    assertEqualBytes(data,rawOutput.toByteArray());  }}  }
class C{  public BasicAddressResolver(Map<String,String> addrMap) throws UnknownHostException {  if (addrMap == null || addrMap.isEmpty())   throw new IllegalArgumentException("At least one address mapping is required.");  inetAddrMap=U.newHashMap(addrMap.size());  inetSockAddrMap=U.newHashMap(addrMap.size());  for (  Map.Entry<String,String> e : addrMap.entrySet()) {    String from=e.getKey();    String to=e.getValue();    if (F.isEmpty(from) || F.isEmpty(to))     throw new IllegalArgumentException("Invalid address mapping: " + e);    String[] fromArr=from.split(":");    String[] toArr=to.split(":");    assert fromArr.length > 0;    assert toArr.length > 0;    if (fromArr.length == 1) {      if (toArr.length != 1)       throw new IllegalArgumentException("Invalid address mapping: " + e);      inetAddrMap.put(InetAddress.getByName(fromArr[0]),InetAddress.getByName(toArr[0]));    } else     if (fromArr.length == 2) {      if (toArr.length != 2)       throw new IllegalArgumentException("Invalid address mapping: " + e);      inetSockAddrMap.put(new InetSocketAddress(fromArr[0],Integer.parseInt(fromArr[1])),new InetSocketAddress(toArr[0],Integer.parseInt(toArr[1])));    } else     throw new IllegalArgumentException("Invalid address mapping: " + e);  }}  }
class C{  public void normalizeNodeNames(){  int maxNumLeaves=leftChild.length + 1;  boolean[] internalNodeIsPresent=new boolean[maxNumLeaves - 1];  boolean[] leafIsPresent=new boolean[maxNumLeaves];  markPresenceOfNodesInSubtree(0,internalNodeIsPresent,leafIsPresent);  int newLeafCount=0;  for (int l=0; l < maxNumLeaves; l++) {    if (leafIsPresent[l]) {      newLeafCount++;    }  }  int[] internalNodesMappingsOld2New=new int[maxNumLeaves - 1];  int[] internalNodesMappingsNew2Old=new int[newLeafCount - 1];  int internalIdx=0;  for (int i=0; i < maxNumLeaves - 1; i++) {    if (internalNodeIsPresent[i]) {      internalNodesMappingsOld2New[i]=internalIdx;      internalNodesMappingsNew2Old[internalIdx]=i;      internalIdx++;      if (internalIdx == newLeafCount - 1) {        break;      }    }  }  int[] leavesMappingNew2Old=new int[newLeafCount];  int[] leavesMappingOld2New=new int[maxNumLeaves];  int leafIdx=0;  for (int i=0; i < maxNumLeaves; i++) {    if (leafIsPresent[i]) {      leavesMappingNew2Old[leafIdx]=i;      leavesMappingOld2New[i]=leafIdx;      leafIdx++;      if (leafIdx == newLeafCount) {        break;      }    }  }  int[] newLeftChild=new int[newLeafCount - 1];  int[] newRightChild=new int[newLeafCount - 1];  for (int i=0; i < maxNumLeaves - 1; i++) {    if (internalNodeIsPresent[i]) {      int prevLeftChild=leftChild[i];      if (prevLeftChild < 0) {        newLeftChild[internalNodesMappingsOld2New[i]]=~leavesMappingOld2New[~prevLeftChild];      } else {        newLeftChild[internalNodesMappingsOld2New[i]]=internalNodesMappingsOld2New[prevLeftChild];      }      int prevRightChild=rightChild[i];      if (prevRightChild < 0) {        newRightChild[internalNodesMappingsOld2New[i]]=~leavesMappingOld2New[~prevRightChild];      } else {        newRightChild[internalNodesMappingsOld2New[i]]=internalNodesMappingsOld2New[prevRightChild];      }    }  }  for (int i=0; i < newLeafCount - 1; i++) {    leftChild[i]=newLeftChild[i];    rightChild[i]=newRightChild[i];    splitFeatures[i]=splitFeatures[internalNodesMappingsNew2Old[i]];    thresholds[i]=thresholds[internalNodesMappingsNew2Old[i]];  }  for (int i=0; i < newLeafCount; i++) {    leafOutputs[i]=leafOutputs[leavesMappingNew2Old[i]];  }  this.numLeaves=newLeafCount;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  void addCloneParagraph(Paragraph srcParagraph){  final Paragraph newParagraph=new Paragraph(srcParagraph.getId(),this,this,factory);  Map<String,Object> config=new HashMap<>(srcParagraph.getConfig());  Map<String,Object> param=new HashMap<>(srcParagraph.settings.getParams());  Map<String,Input> form=new HashMap<>(srcParagraph.settings.getForms());  newParagraph.setConfig(config);  newParagraph.settings.setParams(param);  newParagraph.settings.setForms(form);  newParagraph.setText(srcParagraph.getText());  newParagraph.setTitle(srcParagraph.getTitle());  try {    Gson gson=new Gson();    String resultJson=gson.toJson(srcParagraph.getReturn());    InterpreterResult result=gson.fromJson(resultJson,InterpreterResult.class);    newParagraph.setReturn(result,null);  } catch (  Exception e) {    logger.warn("Paragraph " + srcParagraph.getId() + " has a result with exception. "+ e.getMessage());  }synchronized (paragraphs) {    paragraphs.add(newParagraph);  }  if (noteEventListener != null) {    noteEventListener.onParagraphCreate(newParagraph);  }}  }
class C{  public ReceiptHeader createReceiptHeaderWithInstrument(String receiptNum,char receiptType,String statusCode,String refNum,InstrumentType instrumentType,String instrumentNum,Double instrumentAmount,Date instrumentDate,String instrumentStatusCode,String glCode,String functionName,String userName,String counterName) throws NumberFormatException {  User user=createUser(userName);  Location counter=createCounter(counterName);  return createReceiptHeaderWithInstrument(receiptNum,receiptType,statusCode,refNum,instrumentType,instrumentNum,instrumentAmount,instrumentDate,instrumentStatusCode,glCode,functionName,user,counter);}  }
class C{  public void addWarning(String message,int sourceStart,int sourceEnd){  ast.addProblem(ast.new ParseProblem(true,message,sourceStart,sourceEnd));}  }
class C{  public void encodeBegin(FacesContext context,UIComponent component) throws IOException {  String styleClass=null;  if (context == null || component == null) {    throw new NullPointerException("'context' and/or 'component' is null");  }  if (logger.isLoggable(Level.FINER)) {    logger.log(Level.FINER,"Begin encoding component " + component.getId());  }  if (!component.isRendered()) {    if (logger.isLoggable(Level.FINER)) {      logger.log(Level.FINER,"End encoding component " + component.getId() + " since "+ "rendered attribute is set to false ");    }    return;  }  ResponseWriter writer=context.getResponseWriter();  writer.startElement("window",component);  writer.writeAttribute("xmlns:html","http://www.w3.org/1999/xhtml",null);  writer.writeAttribute("xmlns","http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",null);  writer.writeAttribute("id",component.getClientId(context),"clientId");  writer.writeAttribute("method","post",null);  writer.writeAttribute("action",getActionStr(context),null);  String acceptcharset=null;  if (null != (acceptcharset=(String)component.getAttributes().get("acceptcharset"))) {    writer.writeAttribute("accept-charset",acceptcharset,"acceptcharset");  }  writer.writeText("\n",null);  if (!context.getExternalContext().getRequestMap().containsKey(RENDERED_SCRIPT)) {    context.getExternalContext().getRequestMap().put(RENDERED_SCRIPT,Boolean.TRUE);    writer.startElement("script",component);    writer.writeAttribute("src",context.getExternalContext().getRequestContextPath() + "/src/script/http-xul.es",null);    writer.endElement("script");  }}  }
class C{  @Override public void hideMessage(){  if (progress != null) {    progress.hide();    progress=null;    contentLabel=null;  }}  }
class C{  public CleanUpOptions(){  fOptions=new HashMap<String,String>();}  }
class C{  private double errorsForLeaf() throws Exception {  return m_test.total() - m_test.perClass(localModel().distribution().maxClass());}  }
class C{  public static void createTable(Database db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"TEST_DATA2\" ("+ "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "\"TEST_STRING\" TEXT,"+ "\"TEST_LONG\" INTEGER,"+ "\"TEST_DATE\" INTEGER,"+ "\"TEST_INT\" INTEGER,"+ "\"TEST_BOOLEAN\" INTEGER);");}  }
class C{  public void inc(long n){  this.segmentNumber+=n;  long m=n * SegmentedTimeline.this.segmentSize;  this.segmentStart+=m;  this.segmentEnd+=m;  this.millisecond+=m;}  }
class C{  public String longestMatch(String input){  TrieNode node=root;  String result=null;  for (int i=0; i < input.length(); i++) {    node=node.getChild(input.charAt(i));    if (node == null)     break;    if (node.isTerminal())     result=input.substring(0,i + 1);  }  return result;}  }
class C{  public final int filterMessage(long receivedTime,int messageSize,final long lastcheck){  if (!enabled) {    return FILTERED_DISABLED;  }  if (lastcheck != 0 && receivedTime < lastcheck) {    return FILTERED_LASTCHECK;  }  if (doFilterFromDate == true && receivedTime < fromDate.getTime()) {    return FILTERED_DATEFROM;  }  if (doFilterToDate == true && receivedTime > toDate.getTime()) {    return FILTERED_DATETO;  }  if ((maxMessageSizeToLog > 0) && (size > maxMessageSizeToLog)) {    return FILTERED_SIZE;  }  return FILTERED_OK;}  }
class C{  public InternalKey(long key){  this.key=key;}  }
class C{  boolean aequal(S2Point that,double margin){  return (Math.abs(x - that.x) < margin) && (Math.abs(y - that.y) < margin) && (Math.abs(z - that.z) < margin);}  }
class C{  public void testColocatedQueryRight(){  IgniteCache<AffinityUuid,Purchase> c=ignite(0).cache(null);  Random rnd=new GridRandom(SEED);  for (int i=0; i < PURCHASES; i++) {    Purchase p=new Purchase();    p.productId=rnd.nextInt(PRODUCTS);    p.price=rnd.nextInt(MAX_PRICE);    c.put(new AffinityUuid(p.productId),p);  }  List<List<?>> res1=query(c,false);  List<List<?>> res2=query(c,true);  X.println("res1: " + res1);  X.println("res2: " + res2);  assertFalse(res1.isEmpty());  assertEquals(res1.toString(),res2.toString());}  }
class C{  int useCount(Name n){  if (arguments == null)   return 0;  int count=0;  for (int i=arguments.length; --i >= 0; ) {    if (arguments[i] == n)     ++count;  }  return count;}  }
class C{  public RVMMethod findMainMethod(){  Atom mainName=Atom.findOrCreateAsciiAtom(("main"));  Atom mainDescriptor=Atom.findOrCreateAsciiAtom(("([Ljava/lang/String;)V"));  RVMMethod mainMethod=this.findDeclaredMethod(mainName,mainDescriptor);  if (mainMethod == null || !mainMethod.isPublic() || !mainMethod.isStatic()) {    return null;  }  return mainMethod;}  }
class C{  @Inline @Entrypoint public static void objectFieldWrite(Object ref,Object value,Offset offset,int locationMetadata){  if (NEEDS_OBJECT_GC_WRITE_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    Selected.Mutator.get().objectReferenceWrite(src,src.toAddress().plus(offset),ObjectReference.fromObject(value),offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(10);  format((getYear() + 1900),4,sb);  sb.append('-');  format((getMonth() + 1),2,sb);  sb.append('-');  format(getDate(),2,sb);  return sb.toString();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Test suite(){  return (new TestSuite(ForEachFaceletsITCase.class));}  }
class C{  public static String flow(String text,boolean delSp){  return flow(text,delSp,RFC2646_WIDTH);}  }
class C{  public boolean isInterviewOver(){  Object oo=get_Value(COLUMNNAME_IsInterviewOver);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public BLAKE224(){  super();}  }
class C{  private void addBatExperience(int xp){  if (!worldObj.isRemote) {    setBatExperience(Integer.valueOf(getBatExperience() + xp));  }}  }
class C{  public DataField(){}  }
class C{  @SuppressWarnings("unchecked") public void init(){  verbose=Boolean.parseBoolean(getProperties().getProperty(VERBOSE,VERBOSE_DEFAULT));  todelay=Integer.parseInt(getProperties().getProperty(SIMULATE_DELAY,SIMULATE_DELAY_DEFAULT));  if (verbose) {    System.out.println("***************** properties *****************");    Properties p=getProperties();    if (p != null) {      for (Enumeration e=p.propertyNames(); e.hasMoreElements(); ) {        String k=(String)e.nextElement();        System.out.println("\"" + k + "\"=\""+ p.getProperty(k)+ "\"");      }    }    System.out.println("**********************************************");  }}  }
class C{  public Boolean isDfltOptnInd(){  return dfltOptnInd;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:15.348 -0400",hash_original_method="E7B9D3390C68BECAF734E454EE7DE061",hash_generated_method="E1786D5BDAAA600C2AA485187A781C8F") public void testStart(){  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  mTestUtils.enable(adapter);}  }
class C{  public void finish() throws IOException {  if (!finished) {    if (!standaloneMarkers.contains(marker)) {      long size=getStreamPosition() - offset;      if (size > 0xffffL) {        throw new IOException("Segment \"" + marker + "\" is too large: "+ size);      }      long pointer=getStreamPosition();      seek(offset);      out.writeShort((short)size);      seek(pointer);    }    finished=true;  }}  }
class C{  public void insertSegments(List<ILineSegment> list){  Node<ILineSegment> node=list.head();  while (node != null) {    dlstate.insert(node.value());    node=node.next();  }}  }
class C{  @Override public void validate(){  validateSQLFields();  validateSettings();}  }
class C{  public ValidationDriver(PropertyMap properties,SchemaReader sr){  this(properties,properties,sr);}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearInlinks(){  inlinks=null;  fieldSetFlags()[20]=false;  return this;}  }
class C{  public boolean applyTemplateToNode(ElemTemplateElement xslInstruction,ElemTemplate template,int child) throws TransformerException {  DTM dtm=m_xcontext.getDTM(child);  short nodeType=dtm.getNodeType(child);  boolean isDefaultTextRule=false;  boolean isApplyImports=false;  isApplyImports=((xslInstruction == null) ? false : xslInstruction.getXSLToken() == Constants.ELEMNAME_APPLY_IMPORTS);  if (null == template || isApplyImports) {    int maxImportLevel, endImportLevel=0;    if (isApplyImports) {      maxImportLevel=template.getStylesheetComposed().getImportCountComposed() - 1;      endImportLevel=template.getStylesheetComposed().getEndImportCountComposed();    } else {      maxImportLevel=-1;    }    if (isApplyImports && (maxImportLevel == -1)) {      template=null;    } else {      XPathContext xctxt=m_xcontext;      try {        xctxt.pushNamespaceContext(xslInstruction);        QName mode=this.getMode();        if (isApplyImports)         template=m_stylesheetRoot.getTemplateComposed(xctxt,child,mode,maxImportLevel,endImportLevel,m_quietConflictWarnings,dtm); else         template=m_stylesheetRoot.getTemplateComposed(xctxt,child,mode,m_quietConflictWarnings,dtm);      }  finally {        xctxt.popNamespaceContext();      }    }    if (null == template) {switch (nodeType) {case DTM.DOCUMENT_FRAGMENT_NODE:case DTM.ELEMENT_NODE:        template=m_stylesheetRoot.getDefaultRule();      break;case DTM.CDATA_SECTION_NODE:case DTM.TEXT_NODE:case DTM.ATTRIBUTE_NODE:    template=m_stylesheetRoot.getDefaultTextRule();  isDefaultTextRule=true;break;case DTM.DOCUMENT_NODE:template=m_stylesheetRoot.getDefaultRootRule();break;default :return false;}}}try {pushElemTemplateElement(template);m_xcontext.pushCurrentNode(child);pushPairCurrentMatched(template,child);if (!isApplyImports) {DTMIterator cnl=new org.apache.xpath.NodeSetDTM(child,m_xcontext.getDTMManager());m_xcontext.pushContextNodeList(cnl);}if (isDefaultTextRule) {switch (nodeType) {case DTM.CDATA_SECTION_NODE:case DTM.TEXT_NODE:ClonerToResultTree.cloneToResultTree(child,nodeType,dtm,getResultTreeHandler(),false);break;case DTM.ATTRIBUTE_NODE:dtm.dispatchCharactersEvents(child,getResultTreeHandler(),false);break;}} else {m_xcontext.setSAXLocator(template);m_xcontext.getVarStack().link(template.m_frameSize);executeChildTemplates(template,true);}} catch (org.xml.sax.SAXException se) {throw new TransformerException(se);} finally {if (!isDefaultTextRule) m_xcontext.getVarStack().unlink();m_xcontext.popCurrentNode();if (!isApplyImports) {m_xcontext.popContextNodeList();}popCurrentMatched();popElemTemplateElement();}return true;}  }
class C{  public static final boolean isDigit(char ch){  return ch >= '0' && ch <= '9';}  }
class C{  public static void bucketExists_test() throws Exception {  println("Test: bucketExists(String bucketName)");  String name=getRandomName();  client.makeBucket(name);  if (!client.bucketExists(name)) {    println("FAILED");  }  client.removeBucket(name);}  }
class C{  public CoreContainer(SolrResourceLoader loader){  this(SolrXmlConfig.fromSolrHome(loader,loader.getInstancePath()));}  }
class C{  public int addRef(Object ref){  if (_refs == null)   _refs=new ArrayList();  _refs.add(ref);  return _refs.size() - 1;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static void deserializeCache(File input){{    if (null == instance && readCache && input.canRead()) {      try {        ObjectInputStream objIn=new ObjectInputStream(new FileInputStream(input));        instance=(AbcDataCache)objIn.readObject();        objIn.close();        instance.file=input;      } catch (      java.io.InvalidClassException incompatible_serialized_class) {      }catch (      Exception ex) {        ex.printStackTrace();      }    }    if (null == instance)     instance=new AbcDataCache(input);  }}  }
class C{  public Map<Initiator,List<StoragePort>> generateInitiatorsToStoragePortsMap(StringSetMap existingZoningMap,URI varray){  Map<Initiator,List<StoragePort>> initiatorsToStoragePortsMap=new HashMap<Initiator,List<StoragePort>>();  if (existingZoningMap == null) {    return initiatorsToStoragePortsMap;  }  for (  String initiatorId : existingZoningMap.keySet()) {    Initiator initiator=_dbClient.queryObject(Initiator.class,URI.create(initiatorId));    if (initiator == null || initiator.getInactive()) {      continue;    }    NetworkLite network=getInitiatorNetwork(initiator,_dbClient);    String networkLabel=(network != null ? network.getLabel() : "<unknown network>");    StringSet ports=existingZoningMap.get(initiatorId);    if (ports == null) {      continue;    }    StringBuilder portNames=new StringBuilder();    for (    String portId : ports) {      StoragePort port=_dbClient.queryObject(StoragePort.class,URI.create(portId));      if (port != null && port.getTaggedVirtualArrays() != null && port.getTaggedVirtualArrays().contains(varray.toString()) && port.getRegistrationStatus().toString().equals(DiscoveredDataObject.RegistrationStatus.REGISTERED.name()) && DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name().equals(port.getCompatibilityStatus().toString()) && DiscoveryStatus.VISIBLE.name().equals(port.getDiscoveryStatus().toString())) {        if (initiatorsToStoragePortsMap.get(initiator) == null) {          initiatorsToStoragePortsMap.put(initiator,new ArrayList<StoragePort>());        }        initiatorsToStoragePortsMap.get(initiator).add(port);        portNames.append(port.getPortName() + " (" + port.getPortNetworkId()+ ")  ");      }    }    _log.info(String.format("Existing initiator %s (%s) network %s ports %s",initiator.getInitiatorPort(),initiator.getHostName(),networkLabel,portNames.toString()));  }  return initiatorsToStoragePortsMap;}  }
class C{  protected boolean overridePredecessorRegisterType(@Nonnull AnalyzedInstruction predecessor,int registerNumber,@Nonnull RegisterType registerType,BitSet verifiedInstructions){  if (predecessorRegisterOverrides == null) {    predecessorRegisterOverrides=Maps.newHashMap();  }  predecessorRegisterOverrides.put(new PredecessorOverrideKey(predecessor,registerNumber),registerType);  RegisterType mergedType=getMergedPreRegisterTypeFromPredecessors(registerNumber);  if (preRegisterMap[registerNumber].equals(mergedType)) {    return false;  }  preRegisterMap[registerNumber]=mergedType;  verifiedInstructions.clear(instructionIndex);  if (!setsRegister(registerNumber)) {    if (!postRegisterMap[registerNumber].equals(mergedType)) {      postRegisterMap[registerNumber]=mergedType;      return true;    }  }  return false;}  }
class C{  private void initTable(){  namespaces=new JTable(new FilterTableModel());  namespaces.removeColumn(namespaces.getColumn("#"));  namespaces.setFillsViewportHeight(true);  namespaces.setPreferredScrollableViewportSize(new Dimension(500,70));  JScrollPane scrollPane=new JScrollPane(namespaces);  scrollPane.setBounds(70,10,300,200);  this.add(scrollPane);}  }
class C{  public ServerExecutionException(Throwable arg0){  super(arg0);}  }
class C{  public Matrix(final double[][] data){  this(data,EnumSet.noneOf(Address.Flags.class));}  }
class C{  public int append(String stringValue){  return append(stringValue,true);}  }
class C{  public ProxyRequireHeader createProxyRequireHeader(String optionTag) throws ParseException {  if (optionTag == null)   throw new NullPointerException("bad optionTag arg");  ProxyRequire p=new ProxyRequire();  p.setOptionTag(optionTag);  return p;}  }
class C{  public void brokerError(BrokerModelException ex){  if (502 == ex.getErrorCode()) {    _log.info("TWS is not running test will not be run");    return;  }  if (ex.getErrorId() == 1) {    _log.error("Error: " + ex.getErrorCode(),ex.getMessage(),ex);  } else   if (ex.getErrorId() == 2) {    _log.warn("Warning: " + ex.getMessage(),BasePanel.WARNING);  } else   if (ex.getErrorId() == 3) {    _log.info("Information: " + ex.getMessage(),BasePanel.INFORMATION);  } else {    _log.error("Unknown Error Id Code: " + ex.getErrorCode(),ex.getMessage(),ex);  }}  }
class C{  public static boolean hasBeenHalted(Thread t){  if (t instanceof HaltingThread)   return ((HaltingThread)t).isHalted();  return false;}  }
class C{  private static void expandFieldArray(Object instance,String fieldName,Object[] extraElements) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {  Field jlrField=findField(instance,fieldName);  Object[] original=(Object[])jlrField.get(instance);  Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),original.length + extraElements.length);  System.arraycopy(extraElements,0,combined,0,extraElements.length);  System.arraycopy(original,0,combined,extraElements.length,original.length);  jlrField.set(instance,combined);}  }
class C{  public void deleteDocumentos(String idObjeto,int tipoObjeto){  iniciarTransaccion();  checkAcceso(tipoObjeto,idObjeto,TipoAcceso.EDICION,DocumentosElectronicosSecurityManager.EDICION_DOCUMENTOS_CUADRO_CLASIFICACION_ACTION);  if (tipoObjeto == TipoObjeto.ELEMENTO_CF)   deleteDocumentosElementoCF(idObjeto); else   deleteDocumentosDescriptor(idObjeto);  commit();}  }
class C{  public static void main(String[] argv){  int pnumber=-1;  com.bbn.openmap.util.Debug.init();  for (int i=0; i < argv.length; i++) {    if (argv[i].equals("-port") && argv.length > i + 1) {      try {        pnumber=Integer.parseInt(argv[i + 1]);        break;      } catch (      NumberFormatException e) {        pnumber=-1;      }    }  }  if (pnumber < 0) {    System.out.println("Need to start the server with a port number.");    System.out.println("Usage: java com.bbn.openmap.layer.link.LinkServerStarter -port <port number>");    System.exit(0);  }  System.out.println("LinkServerStarter: Starting up on port " + pnumber + ".");  LinkServerStarter serverStarter=new LinkServerStarter(pnumber);  while (true) {    serverStarter.run();  }}  }
class C{  @Override public void addUndoPoint(){  ((DataSortedTableModel)m_TableData.getModel()).addUndoPoint();  setMenu();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  int[] dX;  int[] dY;  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=filterShape[a];              sum+=z * filterShape[a];            }          }          if (n > 0) {            outputFile.setValue(row,col,sum / n);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case r_A:    return stateVector[0] == State.r_A;default :  return false;}}  }
class C{  static float dpToPixel(float dp,Resources resources){  DisplayMetrics metrics=resources.getDisplayMetrics();  return metrics.density * dp;}  }
class C{  protected void onOnline(){  if (offlineMenuItem != null) {    offlineMenuItem.setVisible(false);  }  logger.debug("You are now online");}  }
class C{  public void run(){  if (Cfg.DEBUG) {    Check.log(TAG + " (run) passed without start: " + stopDelay);  }  for (  GPSLocationListener listener : listeners) {    if (Cfg.DEBUG) {      Check.log(TAG + " (onLocationChanged): send location to: " + listener);    }    listener.onLocationChanged(null);  }  stop();}  }
class C{  public Tree(int root,int[] parent,List<Integer> searchOrder){  this.root=root;  this.parent=parent;  this.searchOrder=searchOrder;}  }
class C{  public static int analyzeModeChainFeasability(Plan plan,String[] candidate,Set<String> chainBasedModes,PlanomatConfigGroup.TripStructureAnalysisLayerOption tripStructureAnalysisLayer,ActivityFacilities facilities,Network network){  boolean isModeChainFeasible=true;  BasicLocation currentLocation=null, requiredLocation=null, nextLocation=null;  HashMap<String,BasicLocation> modeTracker=new HashMap<String,BasicLocation>();  for (  String mode : candidate) {    if (!modeTracker.containsKey(mode)) {      if (chainBasedModes.contains(mode)) {        if (PlanomatConfigGroup.TripStructureAnalysisLayerOption.facility.equals(tripStructureAnalysisLayer)) {          currentLocation=(BasicLocation)facilities.getFacilities().get(PopulationUtils.getFirstActivity(((Plan)plan)).getFacilityId());        } else         if (PlanomatConfigGroup.TripStructureAnalysisLayerOption.link.equals(tripStructureAnalysisLayer)) {          currentLocation=(BasicLocation)network.getLinks().get(PopulationUtils.getFirstActivity(((Plan)plan)).getLinkId());        }        modeTracker.put(mode,currentLocation);      }    }  }  int legNum=0;  Iterator<PlanElement> peIterator=plan.getPlanElements().iterator();  while (isModeChainFeasible && peIterator.hasNext()) {    PlanElement pe=peIterator.next();    if (pe instanceof Leg) {      Leg currentLeg=(Leg)pe;      String legMode=candidate[legNum];      if (chainBasedModes.contains(legMode)) {        currentLocation=modeTracker.get(legMode);        if (PlanomatConfigGroup.TripStructureAnalysisLayerOption.facility.equals(tripStructureAnalysisLayer)) {          final Leg leg=currentLeg;          requiredLocation=(BasicLocation)facilities.getFacilities().get(PopulationUtils.getPreviousActivity(((Plan)plan),leg).getFacilityId());        } else         if (PlanomatConfigGroup.TripStructureAnalysisLayerOption.link.equals(tripStructureAnalysisLayer)) {          final Leg leg=currentLeg;          requiredLocation=(BasicLocation)network.getLinks().get(PopulationUtils.getPreviousActivity(((Plan)plan),leg).getLinkId());        }        if (currentLocation.equals(requiredLocation)) {          if (PlanomatConfigGroup.TripStructureAnalysisLayerOption.facility.equals(tripStructureAnalysisLayer)) {            final Leg leg=currentLeg;            nextLocation=(BasicLocation)facilities.getFacilities().get(PopulationUtils.getNextActivity(((Plan)plan),leg).getFacilityId());          } else           if (PlanomatConfigGroup.TripStructureAnalysisLayerOption.link.equals(tripStructureAnalysisLayer)) {            final Leg leg=currentLeg;            nextLocation=(BasicLocation)network.getLinks().get(PopulationUtils.getNextActivity(((Plan)plan),leg).getLinkId());          }          modeTracker.put(legMode,nextLocation);        } else {          isModeChainFeasible=false;        }      }      if (isModeChainFeasible) {        legNum++;      }    }  }  if (isModeChainFeasible) {    HashSet<BasicLocation> allowedLocations=new HashSet<BasicLocation>();    if (PlanomatConfigGroup.TripStructureAnalysisLayerOption.facility.equals(tripStructureAnalysisLayer)) {      allowedLocations.add((BasicLocation)facilities.getFacilities().get(PopulationUtils.getFirstActivity(((Plan)plan)).getFacilityId()));      allowedLocations.add((BasicLocation)facilities.getFacilities().get(PopulationUtils.getLastActivity(((Plan)plan)).getFacilityId()));    } else     if (PlanomatConfigGroup.TripStructureAnalysisLayerOption.link.equals(tripStructureAnalysisLayer)) {      allowedLocations.add((BasicLocation)network.getLinks().get(PopulationUtils.getFirstActivity(((Plan)plan)).getLinkId()));      allowedLocations.add((BasicLocation)network.getLinks().get(PopulationUtils.getLastActivity(((Plan)plan)).getLinkId()));    }    Iterator<String> modeTrackerCheck=modeTracker.keySet().iterator();    while (isModeChainFeasible && modeTrackerCheck.hasNext()) {      String mode=modeTrackerCheck.next();      currentLocation=modeTracker.get(mode);      if (!allowedLocations.contains(currentLocation)) {        isModeChainFeasible=false;      }    }  }  if (!isModeChainFeasible) {    legNum=-legNum;  }  return legNum;}  }
class C{  public static BitSet fromByteArray(byte[] bytes){  BitSet bits=new BitSet();  for (int i=0; i < bytes.length * 8; i++) {    if ((bytes[bytes.length - i / 8 - 1] & (1 << (i % 8))) > 0) {      bits.set(i);    }  }  return bits;}  }
class C{  public boolean isInsertable(){  return this.isInsertable;}  }
class C{  public AnnotationsWriter(OutputStream os,ConstPool cp){  output=os;  pool=cp;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int saveAnswer(IAnswerData answer,FormIndex index,boolean evaluateConstraints) throws JavaRosaException {  FormController formController=Collect.getInstance().getFormController();  if (evaluateConstraints) {    return formController.answerQuestion(index,answer);  } else {    formController.saveAnswer(index,answer);    return FormEntryController.ANSWER_OK;  }}  }
class C{  public String generateBearerToken(String email,String username,Map<String,String> payload){  String token=tokenGenerator.generate();  Map<String,String> payloadCopy=payload == null ? new HashMap() : new HashMap(payload);  payloadCopy.put("email",email);  payloadCopy.put("username",username);  payloadCopy.put("creation.time",Long.toString(System.currentTimeMillis()));  tokenMap.put(token,payloadCopy);  return token;}  }
class C{  public boolean isZoomYEnabled(){  return mZoomYEnabled;}  }
class C{  protected void commonAssignmentCheck(Tree varTree,ExpressionTree valueExp,String errorKey){  AnnotatedTypeMirror var=atypeFactory.getAnnotatedTypeLhs(varTree);  assert var != null : "no variable found for tree: " + varTree;  if (!validateType(varTree,var)) {    return;  }  checkAssignability(var,varTree);  commonAssignmentCheck(var,valueExp,errorKey);}  }
class C{  public static Map<String,Object> checkItemStatus(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderId=(String)context.get("orderId");  Security security=ctx.getSecurity();  boolean hasPermission=OrderServices.hasPermission(orderId,userLogin,"UPDATE",security,delegator);  if (!hasPermission) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderYouDoNotHavePermissionToChangeThisOrdersStatus",locale));  }  GenericValue orderHeader=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Cannot get OrderHeader record",module);  }  if (orderHeader == null) {    Debug.logError("OrderHeader came back as null",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCannotUpdateNullOrderHeader",UtilMisc.toMap("orderId",orderId),locale));  }  List<GenericValue> orderItems=null;  try {    orderItems=EntityQuery.use(delegator).from("OrderItem").where("orderId",orderId).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,"Cannot get OrderItem records",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemGettingOrderItemRecords",locale));  }  String orderHeaderStatusId=orderHeader.getString("statusId");  String orderTypeId=orderHeader.getString("orderTypeId");  boolean allCanceled=true;  boolean allComplete=true;  boolean allApproved=true;  if (orderItems != null) {    for (    GenericValue item : orderItems) {      String statusId=item.getString("statusId");      if (!"ITEM_CANCELLED".equals(statusId)) {        allCanceled=false;        if (!"ITEM_COMPLETED".equals(statusId)) {          allComplete=false;          if (!"ITEM_APPROVED".equals(statusId)) {            allApproved=false;            break;          }        }      }    }    String newStatus=null;    if (allCanceled) {      if (!"PURCHASE_ORDER".equals(orderTypeId)) {        newStatus="ORDER_CANCELLED";      }    } else     if (allComplete) {      newStatus="ORDER_COMPLETED";    } else     if (allApproved) {      boolean changeToApprove=true;      if (UtilValidate.isNotEmpty(orderHeader.getString("productStoreId"))) {        try {          GenericValue productStore=EntityQuery.use(delegator).from("ProductStore").where("productStoreId",orderHeader.getString("productStoreId")).queryOne();          if (productStore != null) {            String headerApprovedStatus=productStore.getString("headerApprovedStatus");            if (UtilValidate.isNotEmpty(headerApprovedStatus)) {              if (headerApprovedStatus.equals(orderHeaderStatusId)) {                List<GenericValue> orderStatusList=EntityQuery.use(delegator).from("OrderStatus").where("orderId",orderId,"statusId",headerApprovedStatus,"orderItemSeqId",null).queryList();                if (orderStatusList.size() <= 1) {                  changeToApprove=false;                }              }            }          }        } catch (        GenericEntityException e) {          String errMsg="Database error checking if we should change order header status to approved: " + e.toString();          Debug.logError(e,errMsg,module);          return ServiceUtil.returnError(errMsg);        }      }      if ("ORDER_SENT".equals(orderHeaderStatusId))       changeToApprove=false;      if ("ORDER_COMPLETED".equals(orderHeaderStatusId)) {        if ("SALES_ORDER".equals(orderTypeId)) {          changeToApprove=false;        }      }      if ("ORDER_CANCELLED".equals(orderHeaderStatusId))       changeToApprove=false;      if (changeToApprove) {        newStatus="ORDER_APPROVED";        if ("ORDER_HOLD".equals(orderHeaderStatusId)) {          return ServiceUtil.returnSuccess();        }      }    }    if (newStatus != null && !newStatus.equals(orderHeaderStatusId)) {      Map<String,Object> serviceContext=UtilMisc.<String,Object>toMap("orderId",orderId,"statusId",newStatus,"userLogin",userLogin);      Map<String,Object> newSttsResult=null;      try {        newSttsResult=dispatcher.runSync("changeOrderStatus",serviceContext);      } catch (      GenericServiceException e) {        Debug.logError(e,"Problem calling the changeOrderStatus service",module);      }      if (ServiceUtil.isError(newSttsResult)) {        return ServiceUtil.returnError(ServiceUtil.getErrorMessage(newSttsResult));      }    }  } else {    Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderReceivedNullForOrderItemRecordsOrderId",UtilMisc.toMap("orderId",orderId),locale),module);  }  return ServiceUtil.returnSuccess();}  }
class C{  public static org.smpte_ra.schemas.st0429_9_2007.AM.UserText buildAssetMapUserTextType_2007(String value,String language){  org.smpte_ra.schemas.st0429_9_2007.AM.UserText userTextType=new org.smpte_ra.schemas.st0429_9_2007.AM.UserText();  userTextType.setValue(value);  userTextType.setLanguage(language);  return userTextType;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.153 -0500",hash_original_method="5FBBCE58245F93A1688AB0878EC30A26",hash_generated_method="51415E5A51F0E7D9AA4DDAE20BA0A283") public void copyTo(float[] d){  validateIsFloat32();  mRS.validate();  mRS.nAllocationRead(getID(),d);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.STRICT_MODE_RELEVANT;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.area,stream);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:10.448 -0500",hash_original_method="10DB51484387728F55F8C48219903602",hash_generated_method="6FF5BF60DA800166DD3109E45A5B18EF") public boolean isCompatible(Element e){  if (this.equals(e)) {    return true;  }  return ((mSize == e.mSize) && (mType != null) && (mType == e.mType)&& (mVectorSize == e.mVectorSize));}  }
class C{  public static void printToConsoleVehiclesWhichRanOutOfBattery(HashMap<Id<Vehicle>,Vehicle> vehicles){  System.out.println("agentId");  for (  Id<Vehicle> vehicleId : vehicles.keySet()) {    Vehicle vehicle=vehicles.get(vehicleId);    if (vehicle instanceof BatteryElectricVehicle) {      BatteryElectricVehicle bev=(BatteryElectricVehicle)vehicle;      if (bev.didVehicleRunOutOfBattery()) {        System.out.println(vehicleId);      }    }  }}  }
class C{  @Override public TopicSubscriber createDurableSubscriber(final Topic topic,final String name) throws JMSException {  if (cri.getType() == ActiveMQRAConnectionFactory.QUEUE_CONNECTION || cri.getType() == ActiveMQRAConnectionFactory.XA_QUEUE_CONNECTION) {    throw new IllegalStateException("Cannot create durable subscriber from javax.jms.QueueSession");  }  lock();  try {    Session session=getSessionInternal();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createDurableSubscriber " + session + " topic="+ topic+ " name="+ name);    }    TopicSubscriber result=session.createDurableSubscriber(topic,name);    result=new ActiveMQRATopicSubscriber(result,this);    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createdDurableSubscriber " + session + " ActiveMQTopicSubscriber="+ result);    }    addConsumer(result);    return result;  }  finally {    unlock();  }}  }
class C{  protected void restoreState(){  if (storePartials) {    likelihoodCore.restoreState();    precisionLikelihoodCore.restoreState();  } else {    updateAllNodes();  }  super.restoreState();}  }
class C{  @Override public ResponseEntity<MgmtSystemTenantConfigurationValue> updateConfigurationValue(@PathVariable("keyName") final String keyName,@RequestBody final MgmtSystemTenantConfigurationValueRequest configurationValueRest){  final TenantConfigurationKey configKey=TenantConfigurationKey.fromKeyName(keyName);  final TenantConfigurationValue<Object> updatedValue=tenantConfigurationManagement.addOrUpdateConfiguration(configKey,configurationValueRest.getValue());  return new ResponseEntity<>(MgmtSystemMapper.toResponse(keyName,updatedValue),HttpStatus.OK);}  }
class C{  public Node removeChild(Node oldChild) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public static void printTable(final String tableName,final AccumuloRdfConfiguration config,final IteratorSetting... settings) throws IOException {  printTable(tableName,config,true,settings);}  }
class C{  public String procedure(String procedureSpec,String command) throws Exception {  return executeExtension(ResourceType.EXTENSION,procedureSpec,"run",command,null);}  }
class C{  public static java.lang.Integer valueOf(java.lang.String s,int radix) throws java.lang.NumberFormatException {  return null;}  }
class C{  @Override public void stop(){  if (log.isInfoEnabled())   log.info("Stopping collection.");}  }
class C{  protected int hash(Object key){  int h=key.hashCode();  h+=~(h << 9);  h^=(h >>> 14);  h+=(h << 4);  h^=(h >>> 10);  return h;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (obj instanceof IfdData) {    IfdData data=(IfdData)obj;    if (data.getId() == mIfdId && data.getTagCount() == getTagCount()) {      ExifTag[] tags=data.getAllTags();      for (      ExifTag tag : tags) {        if (ExifInterface.isOffsetTag(tag.getTagId())) {          continue;        }        ExifTag tag2=mExifTags.get(tag.getTagId());        if (!tag.equals(tag2)) {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public DrawerBuilder withHeaderClickable(boolean headerClickable){  this.mHeaderClickable=headerClickable;  return this;}  }
class C{  public static void bitVectorToEquation(final BitVector bv,final long seed,final int numVariables,final int e[]){  if (numVariables == 0) {    e[0]=e[1]=e[2]=-1;    return;  }  final long[] hash=new long[3];  Hashes.spooky4(bv,seed,hash);  e[0]=(int)((hash[0] & 0x7FFFFFFFFFFFFFFFL) % numVariables);  e[1]=(int)((hash[1] & 0x7FFFFFFFFFFFFFFFL) % numVariables);  e[2]=(int)((hash[2] & 0x7FFFFFFFFFFFFFFFL) % numVariables);}  }
class C{  protected void initDataBindings(){  BeanProperty<TvShowEpisodeSelectionModel,String> tvShowEpisodeSelectionModelBeanProperty=BeanProperty.create("selectedTvShowEpisode.director");  BeanProperty<JLabel,String> jLabelBeanProperty=BeanProperty.create("text");  AutoBinding<TvShowEpisodeSelectionModel,String,JLabel,String> autoBinding=Bindings.createAutoBinding(UpdateStrategy.READ,selectionModel,tvShowEpisodeSelectionModelBeanProperty,lblDirector,jLabelBeanProperty);  autoBinding.bind();  BeanProperty<TvShowEpisodeSelectionModel,String> tvShowEpisodeSelectionModelBeanProperty_1=BeanProperty.create("selectedTvShowEpisode.writer");  AutoBinding<TvShowEpisodeSelectionModel,String,JLabel,String> autoBinding_1=Bindings.createAutoBinding(UpdateStrategy.READ,selectionModel,tvShowEpisodeSelectionModelBeanProperty_1,lblWriter,jLabelBeanProperty);  autoBinding_1.bind();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (initializer == null) {    throw new NullPointerException();  }  if (updateFunction == null) {    throw new NullPointerException();  }  if (updatePeriods == null) {    throw new NullPointerException();  }}  }
class C{  public Polyline createPolyline(PointList pointList,int color,int strokeWidth){  Paint paintStroke=AndroidGraphicFactory.INSTANCE.createPaint();  paintStroke.setStyle(Style.STROKE);  paintStroke.setStrokeJoin(Join.ROUND);  paintStroke.setStrokeCap(Cap.ROUND);  paintStroke.setColor(color);  paintStroke.setStrokeWidth(strokeWidth);  Polyline line=new Polyline((Paint)paintStroke,AndroidGraphicFactory.INSTANCE);  List<LatLong> geoPoints=line.getLatLongs();  PointList tmp=pointList;  for (int i=0; i < pointList.getSize(); i++) {    geoPoints.add(new LatLong(tmp.getLatitude(i),tmp.getLongitude(i)));  }  return line;}  }
class C{  public meta addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  static void verifyNoCodeMarks(LaunchCreateExtension launchCreate) throws UnsupportedMarkTypeException {  if (launchCreate.hasCodeMarks()) {    throw new UnsupportedMarkTypeException();  }}  }
class C{  protected boolean isClearKey(int keyCode){  return keyCode == MenuBar.clearSK || keyCode == MenuBar.backspaceSK;}  }
class C{  public static Range findRangeBounds(CategoryDataset dataset){  return findRangeBounds(dataset,true);}  }
class C{  public SnackbarBuilder showCallback(SnackbarShowCallback callback){  callbackBuilder.showCallback(callback);  return this;}  }
class C{  public static int isEqualConstantTime(final byte[] b,final byte[] c){  int result=0;  result|=b.length - c.length;  for (int i=0; i < b.length; i++) {    result|=b[i] ^ c[i];  }  return ByteUtils.isEqualConstantTime(result,0);}  }
class C{  public void resetPreviousStates(boolean boo){  resetPreviousStates=boo;}  }
class C{  public void testUpdate4(){  int newValue1=-1;  int newValue2=-2;  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field2="+ newValue1+ ", field3="+ newValue2+ " WHERE id > 10";  try {    int num=statement.executeUpdate(updateQuery);    int expectedUpdated=9;    assertEquals("Not all records in the database were updated",expectedUpdated,num);    String selectQuery="SELECT id, field2, field3 FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    while (result.next()) {      int id=result.getInt("id");    }    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  public HelpSearchPanel(){  initComponents();  System.out.println("Init components done");}  }
class C{  public static String tryGetCanonicalPathElseGetAbsolutePath(final File file){  try {    return file.getCanonicalPath();  } catch (  IOException e) {    return file.getAbsolutePath();  }}  }
class C{  public TrainingSetEvent(Object source,Instances trainSet,int setNum,int maxSetNum){  this(source,trainSet);  m_setNumber=setNum;  m_maxSetNumber=maxSetNum;}  }
class C{  public void removeSecret(){  setMode("-s");}  }
class C{  protected void download(String target,String fileURL,String sha1Checksum){  File targetFile=new File(target);  if (targetFile.exists()) {    return;  }  mkdirs(targetFile.getAbsoluteFile().getParentFile());  ByteArrayOutputStream buff=new ByteArrayOutputStream();  try {    println("Downloading " + fileURL);    URL url=new URL(fileURL);    InputStream in=new BufferedInputStream(url.openStream());    long last=System.currentTimeMillis();    int len=0;    while (true) {      long now=System.currentTimeMillis();      if (now > last + 1000) {        println("Downloaded " + len + " bytes");        last=now;      }      int x=in.read();      len++;      if (x < 0) {        break;      }      buff.write(x);    }    in.close();  } catch (  IOException e) {    throw new RuntimeException("Error downloading " + fileURL + " to "+ target,e);  }  byte[] data=buff.toByteArray();  String got=getSHA1(data);  if (sha1Checksum == null) {    println("SHA1 checksum: " + got);  } else {    if (!got.equals(sha1Checksum)) {      throw new RuntimeException("SHA1 checksum mismatch; got: " + got + " expected: "+ sha1Checksum+ " for file "+ target);    }  }  writeFile(targetFile,data);}  }
class C{  @DSSource({DSSourceKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.177 -0400",hash_original_method="62281B2E12D378656BC0D7BC411D0334",hash_generated_method="B1DE2972562DDD7AE23DF3C8C8ECEBDD") public static String readFileToString(File file) throws IOException {  return readFileToString(file,Charset.defaultCharset());}  }
class C{  public void preInit(){  registerNOVAItemsToMinecraft();  registerMinecraftItemsToNOVA();  registerSubtypeResolution();}  }
class C{  protected String format(LocoNetMessage l){  boolean showStatus=false;  int minutes;  int hours;  int frac_mins;switch (l.getOpCode()) {case LnConstants.OPC_IDLE:{      return "Force Idle, Broadcast Emergency STOP.\n";    }case LnConstants.OPC_GPON:{    return "Global Power ON.\n";  }case LnConstants.OPC_GPOFF:{  return "Global Power OFF.\n";}case LnConstants.OPC_GPBUSY:{return "Master is busy.\n";}case LnConstants.OPC_LOCO_ADR:{int adrHi=l.getElement(1);int adrLo=l.getElement(2);return "Request slot for loco address " + convertToMixed(adrLo,adrHi) + ".\n";}case LnConstants.OPC_SW_ACK:{int sw2=l.getElement(2);String turnoutSystemName="";String turnoutUserName="";turnoutSystemName=locoNetTurnoutPrefix + SENSOR_ADR(l.getElement(1),l.getElement(2));Turnout turnout=turnoutManager.getBySystemName(turnoutSystemName);String uname=turnout.getUserName();if ((uname != null) && (!uname.isEmpty())) {turnoutUserName="(" + uname + ")";} else {turnoutUserName="()";}return "Request switch " + turnoutSystemName + " "+ turnoutUserName+ ((sw2 & LnConstants.OPC_SW_ACK_CLOSED) != 0 ? " Closed/Green" : " Thrown/Red")+ ((sw2 & LnConstants.OPC_SW_ACK_OUTPUT) != 0 ? " (Output On)" : " (Output Off)")+ " with acknowledgement.\n";}case LnConstants.OPC_SW_STATE:{String turnoutSystemName="";String turnoutUserName="";turnoutSystemName=locoNetTurnoutPrefix + SENSOR_ADR(l.getElement(1),l.getElement(2));Turnout turnout=turnoutManager.getBySystemName(turnoutSystemName);String uname=turnout.getUserName();if ((uname != null) && (!uname.isEmpty())) {turnoutUserName="(" + uname + ")";} else {turnoutUserName="()";}return "Request status of switch " + turnoutSystemName + " "+ turnoutUserName+ ".\n";}case LnConstants.OPC_RQ_SL_DATA:{int slot=l.getElement(1);switch (slot) {case LnConstants.FC_SLOT:return "Request Fast Clock information.\n";case LnConstants.CFG_SLOT:return "Request Command Station Ops Switches.\n";case LnConstants.PRG_SLOT:return "Request Programming Track information.\n";default :return "Request data/status for slot " + slot + ".\n";}}case LnConstants.OPC_MOVE_SLOTS:{int src=l.getElement(1);int dest=l.getElement(2);if (src == 0) {return "Get most recently dispatched slot.\n";} else if (src == dest) {return "Set status of slot " + src + " to IN_USE.\n";} else if (dest == 0) {return "Mark slot " + src + " as DISPATCHED.\n";} else {return "Move data in slot " + src + " to slot "+ dest+ ".\n";}}case LnConstants.OPC_LINK_SLOTS:{int src=l.getElement(1);int dest=l.getElement(2);return "Consist loco in slot " + src + " to loco in slot "+ dest+ ".\n";}case LnConstants.OPC_UNLINK_SLOTS:{int src=l.getElement(1);int dest=l.getElement(2);return "Remove loco in slot " + src + " from consist with loco in slot "+ dest+ ".\n";}case LnConstants.OPC_CONSIST_FUNC:{int slot=l.getElement(1);int dirf=l.getElement(2);return "Set consist in slot " + slot + " direction to "+ ((dirf & LnConstants.DIRF_DIR) != 0 ? "REV" : "FWD")+ "F0="+ ((dirf & LnConstants.DIRF_F0) != 0 ? "On, " : "Off,")+ "F1="+ ((dirf & LnConstants.DIRF_F1) != 0 ? "On, " : "Off,")+ "F2="+ ((dirf & LnConstants.DIRF_F2) != 0 ? "On, " : "Off,")+ "F3="+ ((dirf & LnConstants.DIRF_F3) != 0 ? "On, " : "Off,")+ "F4="+ ((dirf & LnConstants.DIRF_F4) != 0 ? "On" : "Off")+ ".\n";}case LnConstants.OPC_SLOT_STAT1:{int slot=l.getElement(1);int stat=l.getElement(2);return "Write slot " + slot + " with status value "+ stat+ " (0x"+ Integer.toHexString(stat)+ ") - Loco is "+ LnConstants.CONSIST_STAT(stat)+ ", "+ LnConstants.LOCO_STAT(stat)+ "\n\tand operating in "+ LnConstants.DEC_MODE(stat)+ " speed step mode.\n";}case LnConstants.OPC_LONG_ACK:{int opcode=l.getElement(1);int ack1=l.getElement(2);switch (opcode | 0x80) {case (LnConstants.OPC_LOCO_ADR):return "LONG_ACK: NO FREE SLOTS!\n";case (LnConstants.OPC_LINK_SLOTS):return "LONG_ACK: Invalid consist, unable to link.\n";case (LnConstants.OPC_SW_ACK):switch (ack1) {case 0:return "LONG_ACK: The Command Station FIFO is full, the switch command was rejected.\n";case 0x7f:return "LONG_ACK: The Command Station accepted the switch command.\n";default :forceHex=true;return "LONG_ACK: Unknown response to 'Request Switch with ACK' command, value 0x" + Integer.toHexString(ack1) + ".\n";}case (LnConstants.OPC_SW_REQ):return "LONG_ACK: Switch request Failed!\n";case (LnConstants.OPC_WR_SL_DATA):switch (ack1) {case 0:return "LONG_ACK: The Slot Write command was rejected.\n";case 0x01:return "LONG_ACK: The Slot Write command was accepted.\n";case 0x23:case 0x2b:case 0x6B:return "LONG_ACK: DCS51 programming reply, thought to mean OK.\n";case 0x40:return "LONG_ACK: The Slot Write command was accepted blind (no response will be sent).\n";case 0x7f:return "LONG_ACK: Function not implemented, no reply will follow.\n";default :forceHex=true;return "LONG_ACK: Unknown response to Write Slot Data message value 0x" + Integer.toHexString(ack1) + ".\n";}case (LnConstants.OPC_SW_STATE):return "LONG_ACK: Command station response to switch state request 0x" + Integer.toHexString(ack1) + (((ack1 & 0x20) != 0) ? " (Closed)" : " (Thrown)")+ ".\n";case (LnConstants.OPC_MOVE_SLOTS):switch (ack1) {case 0:return "LONG_ACK: The Move Slots command was rejected.\n";case 0x7f:return "LONG_ACK: The Move Slots command was accepted.\n";default :forceHex=true;return "LONG_ACK: unknown reponse to Move Slots message 0x" + Integer.toHexString(ack1) + ".\n";}case LnConstants.OPC_IMM_PACKET:if (ack1 == 0) {return "LONG_ACK: the Send IMM Packet command was rejected, the buffer is full/busy.\n";} else if (ack1 == 0x7f) {return "LONG_ACK: the Send IMM Packet command was accepted.\n";} else if (l.getElement(1) == 0x6D && l.getElement(2) == 0x01) {return "Long_ACK: Uhlenbrock IB-COM / Intellibox II CV programming request was accepted.\n";} else {forceHex=true;return "LONG_ACK: Unknown reponse to Send IMM Packet value 0x" + Integer.toHexString(ack1) + ".\n";}case LnConstants.OPC_IMM_PACKET_2:return "LONG_ACK: the Lim Master responded to the Send IMM Packet command with " + ack1 + " (0x"+ Integer.toHexString(ack1)+ ").\n";case (LnConstants.RE_LACK_SPEC_CASE1 | 0x80):case (LnConstants.RE_LACK_SPEC_CASE2 | 0x80):int responseValue=l.getElement(2);if (responseValue == 0x7f) {return "LONG_ACK: OpSwitch operation accepted.\n";} else {String state=((responseValue & 0x20) == 0x20) ? "1 (Closed).\n" : "0 (Thrown).\n";return "LONG_ACK: OpSwitch report - opSwitch is " + state;}default :return "LONG_ACK: Response " + ack1 + " (0x"+ Integer.toHexString(ack1)+ ") to opcode 0x"+ Integer.toHexString(opcode)+ " not decoded.\n";}}case LnConstants.OPC_INPUT_REP:{int in1=l.getElement(1);int in2=l.getElement(2);int contactNum=((SENSOR_ADR(in1,in2) - 1) * 2 + ((in2 & LnConstants.OPC_INPUT_REP_SW) != 0 ? 2 : 1));String sensorSystemName=locoNetSensorPrefix + contactNum;String sensorUserName="";Sensor sensor=sensorManager.getBySystemName(sensorSystemName);sensorUserName="()";if (sensor != null) {String uname=sensor.getUserName();if ((uname != null) && (!uname.isEmpty())) {sensorUserName=" (" + uname + ")";}}int sensorid=(SENSOR_ADR(in1,in2) - 1) * 2 + ((in2 & LnConstants.OPC_INPUT_REP_SW) != 0 ? 2 : 1);int bdlid=((sensorid - 1) / 16) + 1;int bdlin=((sensorid - 1) % 16) + 1;String bdl="BDL16 #" + bdlid + ", DS"+ bdlin;int boardid=((sensorid - 1) / 8) + 1;int boardindex=((sensorid - 1) % 8);String ds54sensors[]={"AuxA","SwiA","AuxB","SwiB","AuxC","SwiC","AuxD","SwiD"};String ds64sensors[]={"A1","S1","A2","S2","A3","S3","A4","S4"};String se8csensors[]={"DS01","DS02","DS03","DS04","DS05","DS06","DS07","DS08"};return "Sensor " + sensorSystemName + " "+ sensorUserName+ " is "+ ((in2 & LnConstants.OPC_INPUT_REP_HI) != 0 ? "Hi" : "Lo")+ ".  ("+ bdl+ "; DS54/64"+ (sensorid < 289 ? "/SE8c #" : " #")+ boardid+ ", "+ ds54sensors[boardindex]+ "/"+ ds64sensors[boardindex]+ ((sensorid < 289) ? "/" + se8csensors[boardindex] : "")+ ")\n";}case LnConstants.OPC_SW_REP:{int sn1=l.getElement(1);int sn2=l.getElement(2);String turnoutSystemName="";String turnoutUserName="";turnoutSystemName=locoNetTurnoutPrefix + SENSOR_ADR(sn1,sn2);Turnout turnout=turnoutManager.getBySystemName(turnoutSystemName);String uname=turnout.getUserName();if ((uname != null) && (!uname.isEmpty())) {turnoutUserName="(" + uname + ")";} else {turnoutUserName="()";}if ((sn2 & LnConstants.OPC_SW_REP_INPUTS) != 0) {return "Turnout " + turnoutSystemName + " "+ turnoutUserName+ " "+ ((sn2 & LnConstants.OPC_SW_REP_SW) != 0 ? " Switch input" : " Aux input")+ " is "+ (((sn2 & LnConstants.OPC_SW_REP_HI) != 0) ? "Closed (input off)" : "Thrown (input on)")+ ".\n";} else {return "Turnout " + turnoutSystemName + " "+ turnoutUserName+ " "+ " output state: Closed output is "+ ((sn2 & LnConstants.OPC_SW_REP_CLOSED) != 0 ? "ON (sink)" : "OFF (open)")+ ", Thrown output is "+ ((sn2 & LnConstants.OPC_SW_REP_THROWN) != 0 ? "ON (sink)" : "OFF (open)")+ ".\n";}}case LnConstants.OPC_SW_REQ:{int sw1=l.getElement(1);int sw2=l.getElement(2);String retVal;int a=(sw2 & 0x20) >> 5;int c=(sw1 & 0x02) >> 1;int b=(sw1 & 0x01);int topbits=0;int midbits=(a << 2) + (c << 1) + b;int count=0;StringBuilder addrListB=new StringBuilder();for (topbits=0; topbits < 32; topbits++) {int lval=(topbits << 6) + (midbits << 3) + 1;int hval=lval + 7;if ((count % 8) != 0) {addrListB.append(", ");} else {if (count == 0) {addrListB.append("\t");} else {addrListB.append(",\n\t");}}addrListB.append("").append(lval);addrListB.append("-").append(hval);count++;}addrListB.append("\n");String addrList=new String(addrListB);if (((sw2 & 0xCF) == 0x0F) && ((sw1 & 0xFC) == 0x78)) {retVal="Interrogate Stationary Decoders with bits a/c/b of " + a + "/"+ c+ "/"+ b+ "; turnouts...\n"+ addrList;} else if (((sw2 & 0xCF) == 0x07) && ((sw1 & 0xFC) == 0x78)) {retVal="Interrogate LocoNet Turnouts/Sensors with bits a/c/b of " + a + "/"+ c+ "/"+ b+ "; addresses...\n"+ addrList;} else {String turnoutSystemName="";String turnoutUserName="";turnoutSystemName=locoNetTurnoutPrefix + SENSOR_ADR(l.getElement(1),l.getElement(2));Turnout turnout=turnoutManager.getBySystemName(turnoutSystemName);String uname=turnout.getUserName();if ((uname != null) && (!uname.isEmpty())) {turnoutUserName="(" + uname + ")";} else {turnoutUserName="()";}retVal="Requesting Switch at " + turnoutSystemName + " "+ turnoutUserName+ " to "+ ((sw2 & LnConstants.OPC_SW_REQ_DIR) != 0 ? "Closed" : "Thrown")+ " (output "+ ((sw2 & LnConstants.OPC_SW_REQ_OUT) != 0 ? "On" : "Off")+ ").\n";}return retVal;}case LnConstants.OPC_LOCO_SND:{int slot=l.getElement(1);int snd=l.getElement(2);return "Set loco in slot " + slot + " Sound1/F5="+ ((snd & LnConstants.SND_F5) != 0 ? "On" : "Off")+ ", Sound2/F6="+ ((snd & LnConstants.SND_F6) != 0 ? "On" : "Off")+ ", Sound3/F7="+ ((snd & LnConstants.SND_F7) != 0 ? "On" : "Off")+ ", Sound4/F8="+ ((snd & LnConstants.SND_F8) != 0 ? "On" : "Off")+ ".\n";}case LnConstants.OPC_LOCO_DIRF:{int slot=l.getElement(1);int dirf=l.getElement(2);return "Set loco in slot " + slot + " direction to "+ ((dirf & LnConstants.DIRF_DIR) != 0 ? "REV" : "FWD")+ ", F0="+ ((dirf & LnConstants.DIRF_F0) != 0 ? "On, " : "Off,")+ " F1="+ ((dirf & LnConstants.DIRF_F1) != 0 ? "On, " : "Off,")+ " F2="+ ((dirf & LnConstants.DIRF_F2) != 0 ? "On, " : "Off,")+ " F3="+ ((dirf & LnConstants.DIRF_F3) != 0 ? "On, " : "Off,")+ " F4="+ ((dirf & LnConstants.DIRF_F4) != 0 ? "On" : "Off")+ ".\n";}case LnConstants.OPC_LOCO_SPD:{int slot=l.getElement(1);int spd=l.getElement(2);if (spd == LnConstants.OPC_LOCO_SPD_ESTOP) {return "Set speed of loco in slot " + slot + " to EMERGENCY STOP!\n";} else {return "Set speed of loco in slot " + slot + " to "+ spd+ ".\n";}}case LnConstants.OPC_PANEL_QUERY:{switch (l.getElement(1)) {case 0x00:{return "Query Tetherless Receivers.\n";}case 0x40:{if (l.getElement(2) == 0x1F) {return "Set LocoNet ID to " + l.getElement(3) + ".\n";} else {return "Unknown attempt to set the LocoNet ID 0x" + Integer.toHexString(l.getElement(2)) + ".\n";}}default :{return "Unknown Tetherless Receivers Request 0x" + Integer.toHexString(l.getElement(1)) + ".\n";}}}case LnConstants.OPC_PANEL_RESPONSE:{switch (l.getElement(1)) {case 0x12:{return "UR92 Responding with LocoNet ID " + (l.getElement(3) & 0x07) + ((l.getElement(3) & 0x08) == 0x08 ? ", duplex enabled.\n" : ".\n");}case 0x17:{return "UR90 Responding with LocoNet ID " + l.getElement(3) + ".\n";}case 0x1F:{return "UR91 Responding with LocoNet ID " + l.getElement(3) + ".\n";}default :{return "Unknown Tetherless Receiver of type 0x" + Integer.toHexString(l.getElement(1)) + " responding.\n";}}}case LnConstants.OPC_MULTI_SENSE:{int type=l.getElement(1) & LnConstants.OPC_MULTI_SENSE_MSG;int section=(l.getElement(2) / 16) + (l.getElement(1) & 0x1F) * 8;switch (type) {case LnConstants.OPC_MULTI_SENSE_POWER:int pCMD=(l.getElement(3) & 0xF0);if ((pCMD == 0x30) || (pCMD == 0x10)) {int cm1=l.getElement(3);int cm2=l.getElement(4);StringBuilder s=new StringBuilder("PM4x (Board ID ");s.append((l.getElement(2) + 1) + (((l.getElement(1) & 0x1) == 1) ? 128 : 0));s.append(") Power Status Report\n\tSub-District 1 - ");if ((cm1 & 1) != 0) {s.append("AutoReversing mode - ");s.append(((cm2 & 1) != 0) ? "Reversed" : "Normal");} else {s.append("CircuitBreaker mode - ");s.append(((cm2 & 1) != 0) ? "Shorted" : "Unshorted");}s.append("\n\tSub-District 2 - ");if ((cm1 & 2) != 0) {s.append("AutoReversing mode - ");s.append(((cm2 & 2) != 0) ? "Reversed" : "Normal");} else {s.append("CircuitBreaker mode - ");s.append(((cm2 & 2) != 0) ? "Shorted" : "Unshorted");}s.append("\n\tSub-District 3 - ");if ((cm1 & 4) != 0) {s.append("AutoReversing mode - ");s.append(((cm2 & 4) != 0) ? "Reversed" : "Normal");} else {s.append("CircuitBreaker mode - ");s.append(((cm2 & 4) != 0) ? "Shorted" : "Unshorted");}s.append("\n\tSub-District 4 - ");if ((cm1 & 8) != 0) {s.append("AutoReversing mode - ");s.append(((cm2 & 8) != 0) ? "Reversed" : "Normal");} else {s.append("CircuitBreaker mode - ");s.append(((cm2 & 8) != 0) ? "Shorted" : "Unshorted");}s.append(".\n");return s.toString();} else if (pCMD == 0x70) {int deviceType=l.getElement(3) & 0x7;String device;switch (deviceType) {case LnConstants.RE_MULTI_SENSE_DEV_TYPE_PM4X:device="PM4(x) ";break;case LnConstants.RE_MULTI_SENSE_DEV_TYPE_BDL16X:device="BDL16(x) ";break;case LnConstants.RE_MULTI_SENSE_DEV_TYPE_SE8:device="SE8 ";break;case LnConstants.RE_MULTI_SENSE_DEV_TYPE_DS64:device="DS64 ";break;default :device="(unknown type) ";break;}int bit=(l.getElement(4) & 0x0E) / 2;int val=(l.getElement(4) & 0x01);int wrd=(l.getElement(4) & 0x70) / 16;int opsw=(l.getElement(4) & 0x7E) / 2 + 1;int bdaddr=l.getElement(2) + 1;if ((l.getElement(1) & 0x1) != 0) {bdaddr+=128;}String returnVal=device + bdaddr + (((l.getElement(1) & 0x10) != 0) ? " write config bit " : " read config bit ")+ wrd+ ","+ bit+ " (opsw "+ opsw+ ") val="+ val+ (val == 1 ? " (closed)" : " (thrown)");if ((deviceType == 0) && (bdaddr == 0) && (bit == 0)&& (val == 0)&& (wrd == 0)&& (opsw == 1)) {returnVal+=" - Also acts as device query for some device types";}return returnVal + "\n";} else if (pCMD == 0x00) {String device;switch (l.getElement(3) & 0x7) {case 0:device="PM4x ";break;case 1:device="BDL16x ";break;case 2:device="SE8c ";break;case 3:device="DS64 ";break;default :device="(unknown type) ";break;}int bdaddr=l.getElement(2) + 1;if ((l.getElement(1) & 0x1) != 0) {bdaddr+=128;}int verNum=l.getElement(4);String versionNumber;if (verNum > 0) {versionNumber=Integer.toBinaryString(verNum);} else {versionNumber="(unknown)";}return "Device type report - " + device + "Board ID "+ bdaddr+ " Version "+ versionNumber+ " is present.\n";} else {forceHex=true;return "OPC_MULTI_SENSE power message PM4 " + (l.getElement(2) + 1) + " unknown CMD=0x"+ Integer.toHexString(pCMD)+ " ";}case LnConstants.OPC_MULTI_SENSE_PRESENT:case LnConstants.OPC_MULTI_SENSE_ABSENT:String reporterSystemName="";String reporterUserName="";String zone;switch (l.getElement(2) & 0x0F) {case 0x00:zone="A";break;case 0x02:zone="B";break;case 0x04:zone="C";break;case 0x06:zone="D";break;case 0x08:zone="E";break;case 0x0A:zone="F";break;case 0x0C:zone="G";break;case 0x0E:zone="H";break;default :zone="<unknown " + (l.getElement(2) & 0x0F) + ">";break;}reporterSystemName=locoNetReporterPrefix + ((l.getElement(1) & 0x1F) * 128 + l.getElement(2) + 1);Reporter reporter=reporterManager.getBySystemName(reporterSystemName);reporterUserName="()";if (reporter != null) {String uname=reporter.getUserName();if ((uname != null) && (!uname.isEmpty())) {reporterUserName="(" + uname + ")";}}return "Transponder address " + ((l.getElement(3) == 0x7d) ? (l.getElement(4) + " (short)") : (l.getElement(3) * 128 + l.getElement(4) + " (long)")) + ((type == LnConstants.OPC_MULTI_SENSE_PRESENT) ? " present at " : " absent at ")+ reporterSystemName+ " "+ reporterUserName+ " (BDL16x Board "+ (section + 1)+ " RX4 zone "+ zone+ ").\n";default :forceHex=true;return "OPC_MULTI_SENSE unknown format.\n";}}case LnConstants.OPC_WR_SL_DATA:case LnConstants.OPC_SL_RD_DATA:{String mode;String locoAdrStr;String mixedAdrStr;String logString;int command=l.getElement(0);int slot=l.getElement(2);int stat=l.getElement(3);int adr=l.getElement(4);int spd=l.getElement(5);int dirf=l.getElement(6);int trk=l.getElement(7);int ss2=l.getElement(8);int adr2=l.getElement(9);int snd=l.getElement(10);int id1=l.getElement(11);int id2=l.getElement(12);mixedAdrStr=convertToMixed(adr,adr2);if (adr2 == 0x7f) {if ((ss2 & LnConstants.STAT2_ALIAS_MASK) == LnConstants.STAT2_ID_IS_ALIAS) {locoAdrStr="" + LOCO_ADR(id2,id1) + " (Alias for loco "+ mixedAdrStr+ ")";} else {locoAdrStr=mixedAdrStr + " (via Alias)";}} else {locoAdrStr=mixedAdrStr;}if (command == LnConstants.OPC_WR_SL_DATA) {mode="Request";} else {mode="Response";}switch (slot) {case LnConstants.FC_SLOT:int clk_rate=l.getElement(3);int frac_minsl=l.getElement(4);int frac_minsh=l.getElement(5);int mins_60=l.getElement(6);int track_stat=l.getElement(7);int hours_24=l.getElement(8);int days=l.getElement(9);int clk_cntrl=l.getElement(10);minutes=((255 - mins_60) & 0x7f) % 60;hours=((256 - hours_24) & 0x7f) % 24;hours=(24 - hours) % 24;minutes=(60 - minutes) % 60;frac_mins=0x3FFF - (frac_minsl + (frac_minsh << 7));if ((trackStatus != track_stat) || showTrackStatus) {trackStatus=track_stat;showStatus=true;}if (showStatus) {logString=mode + " Fast Clock is " + ((clk_cntrl & 0x20) != 0 ? "" : "Synchronized, ")+ (clk_rate != 0 ? "Running, " : "Frozen, ")+ "rate is "+ clk_rate+ ":1. Day "+ days+ ", "+ hours+ ":"+ minutes+ "."+ frac_mins+ ". Last set by ID "+ idString(id1,id2)+ ".\n\tMaster: "+ ((track_stat & LnConstants.GTRK_MLOK1) != 0 ? "LocoNet 1.1" : "DT-200")+ "; Track Status: "+ ((track_stat & LnConstants.GTRK_POWER) != 0 ? "On" : "Off")+ "/"+ ((track_stat & LnConstants.GTRK_IDLE) == 0 ? "Paused" : "Running")+ "; Programming Track: "+ ((track_stat & LnConstants.GTRK_PROG_BUSY) != 0 ? "Busy" : "Available")+ "\n";} else {logString=mode + " Fast Clock is " + ((clk_cntrl & 0x20) != 0 ? "" : "Synchronized, ")+ (clk_rate != 0 ? "Running, " : "Frozen, ")+ "rate is "+ clk_rate+ ":1. Day "+ days+ ", "+ hours+ ":"+ minutes+ "."+ frac_mins+ ". Last set by ID "+ idString(id1,id2)+ ".\n";}break;case LnConstants.PRG_SLOT:String operation;String progMode;int cvData;boolean opsMode=false;int cvNumber;int pcmd=l.getElement(3);int pstat=l.getElement(4);int hopsa=l.getElement(5);int lopsa=l.getElement(6);int cvh=l.getElement(8);int cvl=l.getElement(9);int data7=l.getElement(10);cvData=(((cvh & LnConstants.CVH_D7) << 6) | (data7 & 0x7f));cvNumber=(((((cvh & LnConstants.CVH_CV8_CV9) >> 3) | (cvh & LnConstants.CVH_CV7)) * 128) + (cvl & 0x7f)) + 1;mixedAdrStr=convertToMixed(lopsa,hopsa);if ((pcmd & LnConstants.PCMD_MODE_MASK) == LnConstants.PAGED_ON_SRVC_TRK) {progMode="Byte in Paged Mode on Service Track";} else if ((pcmd & LnConstants.PCMD_MODE_MASK) == LnConstants.DIR_BYTE_ON_SRVC_TRK) {progMode="Byte in Direct Mode on Service Track";} else if ((pcmd & LnConstants.PCMD_MODE_MASK) == LnConstants.DIR_BIT_ON_SRVC_TRK) {progMode="Bits in Direct Mode on Service Track";} else if (((pcmd & ~LnConstants.PCMD_BYTE_MODE) & LnConstants.PCMD_MODE_MASK) == LnConstants.REG_BYTE_RW_ON_SRVC_TRK) {progMode="Byte in Physical Register R/W Mode on Service Track";} else if ((pcmd & LnConstants.PCMD_MODE_MASK) == LnConstants.OPS_BYTE_NO_FEEDBACK) {progMode="Byte in OP's Mode (NO feedback)";opsMode=true;} else if ((pcmd & LnConstants.PCMD_MODE_MASK) == LnConstants.OPS_BYTE_FEEDBACK) {progMode="Byte in OP's Mode";opsMode=true;} else if ((pcmd & LnConstants.PCMD_MODE_MASK) == LnConstants.OPS_BIT_NO_FEEDBACK) {progMode="Bits in OP's Mode (NO feedback)";opsMode=true;} else if ((pcmd & LnConstants.PCMD_MODE_MASK) == LnConstants.OPS_BIT_FEEDBACK) {progMode="Bits in OP's Mode";opsMode=true;} else if (((pcmd & ~LnConstants.PCMD_BYTE_MODE) & LnConstants.PCMD_MODE_MASK) == LnConstants.SRVC_TRK_RESERVED) {progMode="SERVICE TRACK RESERVED MODE DETECTED!";} else if (pcmd == 0) {progMode="Uhlenbrock IB-COM / Intellibox II ";} else {progMode="Unknown mode " + pcmd + " (0x"+ Integer.toHexString(pcmd)+ ")";forceHex=true;}if ((pcmd & LnConstants.PCMD_RW) != 0) {operation="Programming " + mode + ": Write "+ progMode;if (opsMode) {logString=operation + " to CV" + cvNumber+ " of Loco "+ mixedAdrStr+ " value "+ cvData+ " (0x"+ Integer.toHexString(cvData)+ ", B'"+ Integer.toBinaryString(cvData)+ ").\n";} else {logString=operation + " to CV" + cvNumber+ " value "+ cvData+ " (0x"+ Integer.toHexString(cvData)+ ", "+ Integer.toBinaryString(cvData)+ ").\n";}} else {operation="Programming Track " + mode + ": Read "+ progMode+ " ";if (command == LnConstants.OPC_SL_RD_DATA) {if (pstat != 0) {if ((pstat & LnConstants.PSTAT_USER_ABORTED) != 0) {operation+="Failed, User Aborted: ";}if ((pstat & LnConstants.PSTAT_READ_FAIL) != 0) {operation+="Failed, Read Compare Acknowledge not detected: ";}if ((pstat & LnConstants.PSTAT_WRITE_FAIL) != 0) {operation+="Failed, No Write Acknowledge from decoder: ";}if ((pstat & LnConstants.PSTAT_NO_DECODER) != 0) {operation+="Failed, Service Mode programming track empty: ";}if ((pstat & 0xF0) != 0) {if ((pstat & 0xF0) == 0x10) {operation+="Was successful via RX4/BDL16x:";} else {operation+="Unable to decode response = 0x" + Integer.toHexString(pstat) + ": ";}}} else {operation+="Was Successful, set ";}} else {operation+="variable ";}if (opsMode) {logString=operation + " CV" + cvNumber+ " of Loco "+ mixedAdrStr+ " value "+ cvData+ " (0x"+ Integer.toHexString(cvData)+ ", "+ Integer.toBinaryString(cvData)+ ").\n";} else {logString=operation + " CV" + cvNumber+ " value "+ cvData+ " (0x"+ Integer.toHexString(cvData)+ ", "+ Integer.toBinaryString(cvData)+ ").\n";}}break;case LnConstants.CFG_SLOT:logString=mode + " Comand Station OpSw that are Closed (non-default):\n" + ((l.getElement(3) & 0x01) != 0 ? "\tOpSw1=c, reserved.\n" : "")+ ((l.getElement(3) & 0x02) != 0 ? "\tOpSw2=c, DCS100 booster only.\n" : "")+ ((l.getElement(3) & 0x04) != 0 ? "\tOpSw3=c, Booster Autoreversing.\n" : "")+ ((l.getElement(3) & 0x08) != 0 ? "\tOpSw4=c, reserved.\n" : "")+ ((l.getElement(3) & 0x10) != 0 ? "\tOpSw5=c, Master Mode.\n" : "")+ ((l.getElement(3) & 0x20) != 0 ? "\tOpSw6=c, reserved.\n" : "")+ ((l.getElement(3) & 0x40) != 0 ? "\tOpSw7=c, reserved.\n" : "")+ ((l.getElement(4) & 0x01) != 0 ? "\tOpSw9=c, Allow Motorola trinary echo 1-256.\n" : "")+ ((l.getElement(4) & 0x02) != 0 ? "\tOpSw10=c, Expand trinary switch echo.\n" : "")+ ((l.getElement(4) & 0x04) != 0 ? "\tOpSw11=c, Make certian trinary switches long duration.\n" : "")+ ((l.getElement(4) & 0x08) != 0 ? "\tOpSw12=c, Trinary addresses 1-80 allowed.\n" : "")+ ((l.getElement(4) & 0x10) != 0 ? "\tOpSw13=c, Raise loco address purge time to 600 seconds.\n" : "")+ ((l.getElement(4) & 0x20) != 0 ? "\tOpSw14=c, Disable loco address purging.\n" : "")+ ((l.getElement(4) & 0x40) != 0 ? "\tOpSw15=c, Purge will force loco to zero speed.\n" : "")+ ((l.getElement(5) & 0x01) != 0 ? "\tOpSw17=c, Automatic advanced consists are disabled.\n" : "")+ ((l.getElement(5) & 0x02) != 0 ? "\tOpSw18=c, Extend booster short shutdown to 1/2 second.\n" : "")+ ((l.getElement(5) & 0x04) != 0 ? "\tOpSw19=c, reserved.\n" : "")+ ((l.getElement(5) & 0x08) != 0 ? "\tOpSw20=c, Disable address 00 analog operation.\n" : "")+ ((l.getElement(5) & 0x10) != 0 ? "\tOpSw21=c, Global default for new loco is FX.\n" : "")+ ((l.getElement(5) & 0x20) != 0 ? "\tOpSw22=c, Global default for new loco is 28 step.\n" : "")+ ((l.getElement(5) & 0x40) != 0 ? "\tOpSw23=c, Global default for new loco is 14 step.\n" : "")+ ((l.getElement(6) & 0x01) != 0 ? "\tOpSw25=c, Disable aliasing.\n" : "")+ ((l.getElement(6) & 0x02) != 0 ? "\tOpSw26=c, Enable routes.\n" : "")+ ((l.getElement(6) & 0x04) != 0 ? "\tOpSw27=c, Disable normal switch commands (Bushby bit).\n" : "")+ ((l.getElement(6) & 0x08) != 0 ? "\tOpSw28=c, Disable DS54/64/SE8C interrogate at power on.\n" : "")+ ((l.getElement(6) & 0x10) != 0 ? "\tOpSw29=c, reserved.\n" : "")+ ((l.getElement(6) & 0x20) != 0 ? "\tOpSw30=c, reserved.\n" : "")+ ((l.getElement(6) & 0x40) != 0 ? "\tOpSw31=c, Meter route/switch output when not in trinary.\n" : "")+ ((l.getElement(8) & 0x01) != 0 ? "\tOpSw33=c, Restore track power to previous state at power on.\n" : "")+ ((l.getElement(8) & 0x02) != 0 ? "\tOpSw34=c, Allow track to power up to run state.\n" : "")+ ((l.getElement(8) & 0x04) != 0 ? "\tOpSw35=c, reserved.\n" : "")+ ((l.getElement(8) & 0x08) != 0 ? "\tOpSw36=c, Clear all moble decoder information and consists.\n" : "")+ ((l.getElement(8) & 0x10) != 0 ? "\tOpSw37=c, Clear all routes.\n" : "")+ ((l.getElement(8) & 0x20) != 0 ? "\tOpSw38=c, Clear loco roster.\n" : "")+ ((l.getElement(8) & 0x40) != 0 ? "\tOpSw39=c, Clear internal memory.\n" : "")+ ((l.getElement(9) & 0x01) != 0 ? "\tOpSw41=c, Diagnostic click when LocoNet command is received.\n" : "")+ ((l.getElement(9) & 0x02) != 0 ? "\tOpSw42=c, Disable 3 beeps when loco address is purged.\n" : "")+ ((l.getElement(9) & 0x04) != 0 ? "\tOpSw43=c, Disable LocoNet update of track status.\n" : "")+ ((l.getElement(9) & 0x08) != 0 ? "\tOpSw44=c, Expand slots to 120.\n" : "")+ ((l.getElement(9) & 0x10) != 0 ? "\tOpSw45=c, Disable replay for switch state request.\n" : "")+ ((l.getElement(9) & 0x20) != 0 ? "\tOpSw46=c, reserved.\n" : "")+ ((l.getElement(9) & 0x40) != 0 ? "\tOpSw47=c, Programming track is break generator.\n" : "")+ ((l.getElement(10) & 0x01) != 0 ? "\tOpSw49=c, reserved.\n" : "")+ ((l.getElement(10) & 0x02) != 0 ? "\tOpSw50=c, reserved.\n" : "")+ ((l.getElement(10) & 0x04) != 0 ? "\tOpSw51=c, reserved.\n" : "")+ ((l.getElement(10) & 0x08) != 0 ? "\tOpSw52=c, reserved.\n" : "")+ ((l.getElement(10) & 0x10) != 0 ? "\tOpSw53=c, reserved.\n" : "")+ ((l.getElement(10) & 0x20) != 0 ? "\tOpSw54=c, reserved.\n" : "")+ ((l.getElement(10) & 0x40) != 0 ? "\tOpSw55=c, reserved.\n" : "")+ ((l.getElement(11) & 0x01) != 0 ? "\tOpSw57=c, reserved.\n" : "")+ ((l.getElement(11) & 0x02) != 0 ? "\tOpSw58=c, reserved.\n" : "")+ ((l.getElement(11) & 0x04) != 0 ? "\tOpSw59=c, reserved.\n" : "")+ ((l.getElement(11) & 0x08) != 0 ? "\tOpSw60=c, reserved.\n" : "")+ ((l.getElement(11) & 0x10) != 0 ? "\tOpSw61=c, reserved.\n" : "")+ ((l.getElement(11) & 0x20) != 0 ? "\tOpSw62=c, reserved.\n" : "")+ ((l.getElement(11) & 0x40) != 0 ? "\tOpSw63=c, reserved.\n" : "");break;default :if ((trackStatus != trk) || showTrackStatus) {trackStatus=trk;showStatus=true;}if (showStatus) {logString=mode + " slot " + slot+ " information:\n\tLoco "+ locoAdrStr+ " is "+ LnConstants.CONSIST_STAT(stat)+ ", "+ LnConstants.LOCO_STAT(stat)+ ", operating in "+ LnConstants.DEC_MODE(stat)+ " SS mode, and is going "+ ((dirf & LnConstants.DIRF_DIR) != 0 ? "in Reverse" : "Forward")+ " at speed "+ spd+ ",\n"+ "\tF0="+ ((dirf & LnConstants.DIRF_F0) != 0 ? "On, " : "Off,")+ " F1="+ ((dirf & LnConstants.DIRF_F1) != 0 ? "On, " : "Off,")+ " F2="+ ((dirf & LnConstants.DIRF_F2) != 0 ? "On, " : "Off,")+ " F3="+ ((dirf & LnConstants.DIRF_F3) != 0 ? "On, " : "Off,")+ " F4="+ ((dirf & LnConstants.DIRF_F4) != 0 ? "On, " : "Off,")+ " Sound1/F5="+ ((snd & LnConstants.SND_F5) != 0 ? "On, " : "Off,")+ " Sound2/F6="+ ((snd & LnConstants.SND_F6) != 0 ? "On, " : "Off,")+ " Sound3/F7="+ ((snd & LnConstants.SND_F7) != 0 ? "On, " : "Off,")+ " Sound4/F8="+ ((snd & LnConstants.SND_F8) != 0 ? "On" : "Off")+ "\n\tMaster: "+ ((trk & LnConstants.GTRK_MLOK1) != 0 ? "LocoNet 1.1" : "DT-200")+ "; Track: "+ ((trk & LnConstants.GTRK_IDLE) != 0 ? "On" : "Off")+ "; Programming Track: "+ ((trk & LnConstants.GTRK_PROG_BUSY) != 0 ? "Busy" : "Available")+ "; SS2=0x"+ Integer.toHexString(ss2)+ ", ThrottleID="+ idString(id1,id2)+ "\n";} else {logString=mode + " slot " + slot+ " information:\n\tLoco "+ locoAdrStr+ " is "+ LnConstants.CONSIST_STAT(stat)+ ", "+ LnConstants.LOCO_STAT(stat)+ ", operating in "+ LnConstants.DEC_MODE(stat)+ " SS mode, and is going "+ ((dirf & LnConstants.DIRF_DIR) != 0 ? "in Reverse" : "Forward")+ " at speed "+ spd+ ",\n"+ "\tF0="+ ((dirf & LnConstants.DIRF_F0) != 0 ? "On, " : "Off,")+ " F1="+ ((dirf & LnConstants.DIRF_F1) != 0 ? "On, " : "Off,")+ " F2="+ ((dirf & LnConstants.DIRF_F2) != 0 ? "On, " : "Off,")+ " F3="+ ((dirf & LnConstants.DIRF_F3) != 0 ? "On, " : "Off,")+ " F4="+ ((dirf & LnConstants.DIRF_F4) != 0 ? "On, " : "Off,")+ " Sound1/F5="+ ((snd & LnConstants.SND_F5) != 0 ? "On, " : "Off,")+ " Sound2/F6="+ ((snd & LnConstants.SND_F6) != 0 ? "On, " : "Off,")+ " Sound3/F7="+ ((snd & LnConstants.SND_F7) != 0 ? "On, " : "Off,")+ " Sound4/F8="+ ((snd & LnConstants.SND_F8) != 0 ? "On" : "Off")+ "\n\tSS2=0x"+ Integer.toHexString(ss2)+ ", ThrottleID ="+ idString(id1,id2)+ "\n";}break;}return logString;}case LnConstants.OPC_ALM_WRITE:case LnConstants.OPC_ALM_READ:{String message;if (l.getElement(0) == LnConstants.OPC_ALM_WRITE) {message="Write ALM msg ";} else {message="Read ALM msg (Write reply) ";}switch (l.getElement(1)) {case 0x10:message=message + l.getElement(2) + " ATASK="+ l.getElement(3);switch (l.getElement(3)) {case 2:message=message + " (RD)";break;case 3:message=message + " (WR)";break;case 0:message=message + " (ID)";break;default :break;}return message + " BLKL=" + l.getElement(4)+ " BLKH="+ l.getElement(5)+ " LOGIC="+ l.getElement(6)+ "\n      "+ " ARG1L=0x"+ Integer.toHexString(l.getElement(7))+ " ARG1H=0x"+ Integer.toHexString(l.getElement(8))+ " ARG2L=0x"+ Integer.toHexString(l.getElement(9))+ " ARG2H=0x"+ Integer.toHexString(l.getElement(10))+ "\n      "+ " ARG3L=0x"+ Integer.toHexString(l.getElement(11))+ " ARG3H=0x"+ Integer.toHexString(l.getElement(12))+ " ARG4L=0x"+ Integer.toHexString(l.getElement(13))+ " ARG4H=0x"+ Integer.toHexString(l.getElement(14))+ "\n";case 0x15:if (l.getElement(0) == 0xEE) {message="Write extended slot: ";} else {message="Read extended slot (Write reply): ";}return message + "slot " + l.getElement(3)+ " stat "+ l.getElement(4)+ " addr "+ (l.getElement(6) * 128 + l.getElement(5))+ " speed "+ l.getElement(8)+ ".\n";default :return message + " with unexpected length " + l.getElement(1)+ ".\n";}}case LnConstants.OPC_PEER_XFER:{switch (l.getElement(1)) {case 0x10:{int src=l.getElement(2);int dst_l=l.getElement(3);int dst_h=l.getElement(4);int pxct1=l.getElement(5);int pxct2=l.getElement(10);int d[]=l.getPeerXfrData();String generic="Peer to Peer transfer: SRC=0x" + Integer.toHexString(src) + ", DSTL=0x"+ Integer.toHexString(dst_l)+ ", DSTH=0x"+ Integer.toHexString(dst_h)+ ", PXCT1=0x"+ Integer.toHexString(pxct1)+ ", PXCT2=0x"+ Integer.toHexString(pxct2);String data="Data [0x" + Integer.toHexString(d[0]) + " 0x"+ Integer.toHexString(d[1])+ " 0x"+ Integer.toHexString(d[2])+ " 0x"+ Integer.toHexString(d[3])+ ",0x"+ Integer.toHexString(d[4])+ " 0x"+ Integer.toHexString(d[5])+ " 0x"+ Integer.toHexString(d[6])+ " 0x"+ Integer.toHexString(d[7])+ "]\n";if ((src == 0x7F) && (dst_l == 0x7F) && (dst_h == 0x7F)&& ((pxct1 & 0x70) == 0x40)) {int sub=pxct2 & 0x70;switch (sub) {case 0x00:StringBuilder s=new StringBuilder("Download setup message: mfg ");s.append(l.getElement(6));s.append(", hw ver ");s.append(l.getElement(8));s.append(", sw ver ");s.append(l.getElement(9));s.append(", device 0x");s.append((Integer.toHexString(l.getElement(7))).toUpperCase());s.append(", options ");s.append(l.getElement(11));s.append("\n");return s.toString();case 0x10:return "Download message, set address " + StringUtil.twoHexFromInt(d[0]) + StringUtil.twoHexFromInt(d[1])+ StringUtil.twoHexFromInt(d[2])+ ".\n";case 0x20:return "Download message, send data " + StringUtil.twoHexFromInt(d[0]) + " "+ StringUtil.twoHexFromInt(d[1])+ " "+ StringUtil.twoHexFromInt(d[2])+ " "+ StringUtil.twoHexFromInt(d[3])+ " "+ StringUtil.twoHexFromInt(d[4])+ " "+ StringUtil.twoHexFromInt(d[5])+ " "+ StringUtil.twoHexFromInt(d[6])+ " "+ StringUtil.twoHexFromInt(d[7])+ ".\n";case 0x30:return "Download message, verify.\n";case 0x40:return "Download message, end operation.\n";default :}}if (src == 0x50) {String dst_subaddrx=(dst_h != 0x01 ? "" : ((d[4] != 0) ? "/" + Integer.toHexString(d[4]) : ""));if (dst_h == 0x01 && ((pxct1 & 0xF0) == 0x00) && ((pxct2 & 0xF0) == 0x10)) {return "LocoBuffer => LocoIO@" + ((dst_l == 0) ? "broadcast" : Integer.toHexString(dst_l) + dst_subaddrx) + " "+ (d[0] == 2 ? "Query SV" + d[1] : "Write SV" + d[1] + "=0x"+ Integer.toHexString(d[3]))+ ((d[2] != 0) ? " Firmware rev " + dotme(d[2]) : "")+ ".\n";}}if (dst_h == 0x01 && ((pxct1 & 0xF0) == 0x00) && ((pxct2 & 0xF0) == 0x00)) {String src_subaddrx=((d[4] != 0) ? "/" + Integer.toHexString(d[4]) : "");String dst_subaddrx=((d[4] != 0) ? "/" + Integer.toHexString(d[4]) : "");String src_dev=((src == 0x50) ? "Locobuffer" : "LocoIO@" + "0x" + Integer.toHexString(src) + src_subaddrx);String dst_dev=((dst_l == 0x50) ? "LocoBuffer " : (((dst_h == 0x01) && (dst_l == 0x0)) ? "broadcast" : "LocoIO@0x" + Integer.toHexString(dst_l) + dst_subaddrx));String operation=(src == 0x50) ? ((d[0] == 2) ? "Query" : "Write") : ((d[0] == 2) ? "Report" : "Write");return src_dev + "=> " + dst_dev+ " "+ operation+ " SV"+ d[1]+ ((src == 0x50) ? (d[0] != 2 ? ("=0x" + Integer.toHexString(d[3])) : "") : " = " + ((d[0] == 2) ? ((d[2] != 0) ? (d[5] < 10) ? "" + d[5] : d[5] + " (0x" + Integer.toHexString(d[5])+ ")" : (d[7] < 10) ? "" + d[7] : d[7] + " (0x" + Integer.toHexString(d[7])+ ")") : (d[7] < 10) ? "" + d[7] : d[7] + " (0x" + Integer.toHexString(d[7])+ ")"))+ ((d[2] != 0) ? " Firmware rev " + dotme(d[2]) : "")+ ".\n";}String svReply="";LnSv2MessageContents svmc=null;try {svmc=new LnSv2MessageContents(l);} catch (IllegalArgumentException e) {}if (svmc != null) {Locale defaultLocale=new Locale.Builder().build();try {svReply=svmc.toString(defaultLocale);} catch (IllegalArgumentException e) {}if (svReply.length() > 1) {return svReply;}}if ((src == 0x7F) && (dst_l == 0x0) && (dst_h == 0x0)&& ((pxct1 & 0x3) == 0x00)&& ((pxct2 & 0x70) == 0x70)) {return "Throttle Semaphore Symbol Control: Loco " + ((d[0] * 128) + d[1]) + " Semaphore body "+ (((d[2] & 0x10) == 0x10) ? "lit, " : "unlit, ")+ "Vertical arm "+ (((d[2] & 0x08) == 0x08) ? "lit, " : "unlit, ")+ "Diagonal arm "+ (((d[2] & 0x04) == 0x04) ? "lit, " : "unlit, ")+ "Horizontal arm "+ (((d[2] & 0x02) == 0x02) ? "lit, " : "unlit, ")+ "Any lit arms are "+ (((d[2] & 0x01) == 0x01) ? "blinking.\n" : "unblinking.\n");}if ((src == 0x7F) && ((pxct1 & 0x70) == 0x00)) {StringBuilder s=new StringBuilder("Send Throttle Text Message to ");if ((dst_l == 0x00) && (dst_h == 0x00)) {s.append("all throttles");} else {s.append("Throttle ");s.append(StringUtil.twoHexFromInt(dst_h));s.append(StringUtil.twoHexFromInt(dst_l));}s.append(" with message '");s.append((char)d[0]);s.append((char)d[1]);s.append((char)d[2]);s.append((char)d[3]);s.append((char)d[4]);s.append((char)d[5]);s.append((char)d[6]);s.append((char)d[7]);s.append("'.\n");return s.toString();}return generic + "\n\t" + data;}case 0x0A:{int tcntrl=l.getElement(2);String stat;switch (tcntrl) {case 0x40:stat=" (OK) ";break;case 0x7F:stat=" (no key, immed, ignored) ";break;case 0x43:stat=" (+ key during msg) ";break;case 0x42:stat=" (- key during msg) ";break;case 0x41:stat=" (R/S key during msg, aborts) ";break;case 0x4e:return "Throttle response to Semaphore Display Command\n";default :stat=" (unknown) ";break;}return "Throttle status TCNTRL=" + Integer.toHexString(tcntrl) + stat+ " ID1,ID2="+ Integer.toHexString(l.getElement(3))+ Integer.toHexString(l.getElement(4))+ " SLA="+ Integer.toHexString(l.getElement(7))+ " SLB="+ Integer.toHexString(l.getElement(8))+ ".\n";}case 0x14:{switch (l.getElement(2)) {case 0x01:{switch (l.getElement(3)) {case 0x08:{return "Query Duplex Receivers.\n";}case 0x10:{return "Duplex Receiver Response.\n";}default :{forceHex=true;return "Unknown Duplex Channel message.\n";}}}case 0x02:{switch (l.getElement(3)) {case 0x00:{int channel=l.getElement(5) | ((l.getElement(4) & 0x01) << 7);return "Set Duplex Channel to " + Integer.toString(channel) + ".\n";}case 0x08:{return "Query Duplex Channel.\n";}case 0x10:{int channel=l.getElement(5) | ((l.getElement(4) & 0x01) << 7);return "Reported Duplex Channel is " + Integer.toString(channel) + ".\n";}default :{forceHex=true;return "Unknown Duplex Channel message.\n";}}}case 0x03:{char[] groupNameArray={(char)(l.getElement(5) | ((l.getElement(4) & 0x01) << 7)),(char)(l.getElement(6) | ((l.getElement(4) & 0x02) << 6)),(char)(l.getElement(7) | ((l.getElement(4) & 0x04) << 5)),(char)(l.getElement(8) | ((l.getElement(4) & 0x08) << 4)),(char)(l.getElement(10) | ((l.getElement(9) & 0x01) << 7)),(char)(l.getElement(11) | ((l.getElement(9) & 0x02) << 6)),(char)(l.getElement(12) | ((l.getElement(9) & 0x04) << 5)),(char)(l.getElement(13) | ((l.getElement(9) & 0x08) << 4))};String groupName=new String(groupNameArray);int p1=((l.getElement(14) & 0x01) << 3) | ((l.getElement(15) & 0x70) >> 4);int p2=l.getElement(15) & 0x0F;int p3=((l.getElement(14) & 0x02) << 2) | ((l.getElement(16) & 0x70) >> 4);int p4=l.getElement(16) & 0x0F;String passcode=Integer.toHexString(p1) + Integer.toHexString(p2) + Integer.toHexString(p3)+ Integer.toHexString(p4);int channel=l.getElement(17) | ((l.getElement(14) & 0x04) << 5);int id=l.getElement(18) | ((l.getElement(14) & 0x08) << 4);switch (l.getElement(3)) {case 0x00:{return "Set Duplex Group Name to '" + groupName + "'.\n";}case 0x08:{return "Query Duplex Group Information.\n";}case 0x10:{return "Reported Duplex Group Name is '" + groupName + "', Password "+ passcode+ ", Channel "+ Integer.toString(channel)+ ", ID "+ Integer.toString(id)+ ".\n";}default :{forceHex=true;return "Unknown Duplex Group Name message.\n";}}}case 0x04:{int id=l.getElement(5) | ((l.getElement(4) & 0x01) << 7);switch (l.getElement(3)) {case 0x00:{return "Set Duplex Group ID to '" + Integer.toString(id) + "'.\n";}case 0x08:{return "Query Duplex Group ID.\n";}case 0x10:{return "Reported Duplex Group ID is " + Integer.toString(id) + ".\n";}default :{forceHex=true;return "Unknown Duplex Group ID message.\n";}}}case 0x07:{char[] groupPasswordArray={(char)l.getElement(5),(char)l.getElement(6),(char)l.getElement(7),(char)l.getElement(8)};String groupPassword=new String(groupPasswordArray);switch (l.getElement(3)) {case 0x00:{return "Set Duplex Group Password to '" + groupPassword + "'.\n";}case 0x08:{return "Query Duplex Group Password.\n";}case 0x10:{return "Reported Duplex Group Password is '" + groupPassword + "'.\n";}default :{forceHex=true;return "Unknown Duplex Group Password message.\n";}}}case 0x10:{switch (l.getElement(3)) {case 0x08:{return "Query Duplex Channel " + Integer.toString(l.getElement(5)) + " noise/activity report.\n";}case 0x10:{int level=(l.getElement(6) & 0x7F) | ((l.getElement(4) & 0x02) << 6);return "Reported Duplex Channel " + Integer.toString(l.getElement(5)) + " noise/activity level is "+ Integer.toString(level)+ "/255.\n";}default :{forceHex=true;return "Unknown Duplex Channel Activity message.\n";}}}case LnConstants.RE_IPL_PING_OPERATION:{String interpretedMessage;switch (l.getElement(3)) {case 0x08:if ((((l.getElement(4) & 0xF) != 0) || (l.getElement(5) != 0) || (l.getElement(6) != 0)|| (l.getElement(7) != 0)|| (l.getElement(8) != 0)) && (l.getElement(9) == 0) && (l.getElement(10) == 0)&& (l.getElement(11) == 0)&& (l.getElement(12) == 0)&& (l.getElement(13) == 0)&& (l.getElement(14) == 0)&& (l.getElement(15) == 0)&& (l.getElement(16) == 0)&& (l.getElement(17) == 0)&& (l.getElement(18) == 0)) {interpretedMessage="Ping request.\n";int hostSnInt=0;hostSnInt=(l.getElement(5) + (((l.getElement(4) & 0x1) == 1) ? 128 : 0)) + ((l.getElement(6) + (((l.getElement(4) & 0x2) == 2) ? 128 : 0)) * 256) + ((l.getElement(7) + (((l.getElement(4) & 0x4) == 4) ? 128 : 0)) * 256 * 256)+ ((l.getElement(8) + (((l.getElement(4) & 0x8) == 8) ? 128 : 0)) * 256 * 256* 256);interpretedMessage+="\tPinging device with serial number " + Integer.toHexString(hostSnInt).toUpperCase() + "\n";return interpretedMessage;} else {forceHex=true;return "Message with opcode 0xE5 and unknown format.";}case 0x10:if (((l.getElement(4) & 0xF) != 0) || (l.getElement(5) != 0) || (l.getElement(6) != 0)|| (l.getElement(7) != 0)|| (l.getElement(8) != 0)) {interpretedMessage="Ping Report.\n";int hostSnInt=0;hostSnInt=(l.getElement(5) + (((l.getElement(4) & 0x1) == 1) ? 128 : 0)) + ((l.getElement(6) + (((l.getElement(4) & 0x2) == 2) ? 128 : 0)) * 256) + ((l.getElement(7) + (((l.getElement(4) & 0x4) == 4) ? 128 : 0)) * 256 * 256)+ ((l.getElement(8) + (((l.getElement(4) & 0x8) == 8) ? 128 : 0)) * 256 * 256* 256);interpretedMessage+="\tPing response from device with serial number " + Integer.toHexString(hostSnInt).toUpperCase() + " Local RSSI = 0x"+ Integer.toHexString(l.getElement(12) + (((l.getElement(9)) & 0x4) == 0x4 ? 128 : 0)).toUpperCase()+ " Remote RSSI = 0x"+ Integer.toHexString(l.getElement(13) + (((l.getElement(9)) & 0x8) == 0x8 ? 128 : 0)).toUpperCase()+ ".\n";return interpretedMessage;} else {forceHex=true;return "Message with opcode 0xE5 and unknown format.";}default :forceHex=true;return "Message with opcode 0xE5 and unknown format.";}}case LnConstants.RE_IPL_IDENTITY_OPERATION:{String interpretedMessage;String device="";switch (l.getElement(3)) {case 0x08:{if ((l.getElement(4) == 0) && (l.getElement(5) == 0) && (l.getElement(6) == 0)&& (l.getElement(7) == 0)&& (l.getElement(8) == 0)&& (l.getElement(9) == 0)&& (l.getElement(10) == 0)&& (l.getElement(11) == 1)&& (l.getElement(12) == 0)&& (l.getElement(13) == 0)&& (l.getElement(14) == 0)&& (l.getElement(15) == 0)&& (l.getElement(16) == 0)&& (l.getElement(17) == 0)&& (l.getElement(18) == 0)) {return "Discover all IPL-capable devices request.\n";} else if (((l.getElement(5) != 0) || (l.getElement(6) != 0))) {device=getDeviceNameFromIPLInfo(l.getElement(4),l.getElement(5));String slave=getSlaveNameFromIPLInfo(l.getElement(4),l.getElement(6));interpretedMessage="Discover " + device + " devices and/or "+ slave+ " devices.\n";return interpretedMessage;} else {forceHex=true;return "Message with opcode 0xE5 and unknown format.";}}case 0x10:{interpretedMessage="IPL Identity report.\n";String HostType=getDeviceNameFromIPLInfo(l.getElement(4),l.getElement(5));String HostVer=((l.getElement(8) & 0x78) >> 3) + "." + ((l.getElement(8) & 0x7));int hostSnInt=((l.getElement(13) + (((l.getElement(9) & 0x8) == 8) ? 128 : 0)) * 256 * 256) + ((l.getElement(12) + (((l.getElement(9) & 0x4) == 4) ? 128 : 0)) * 256) + (l.getElement(11) + (((l.getElement(9) & 0x2) == 2) ? 128 : 0));String HostSN=Integer.toHexString(hostSnInt).toUpperCase();String SlaveType=getSlaveNameFromIPLInfo(l.getElement(4),l.getElement(6));String SlaveVer="";String SlaveSN="";if (l.getElement(6) != 0) {SlaveVer=(((l.getElement(10) & 0x78) >> 3) + ((l.getElement(9) & 1) << 4)) + "." + ((l.getElement(10) & 0x7));int slaveSnInt=((l.getElement(15) + (((l.getElement(14) & 0x1) == 1) ? 128 : 0))) + ((l.getElement(16) + (((l.getElement(14) & 0x2) == 2) ? 128 : 0)) * 256) + ((l.getElement(17) + (((l.getElement(14) & 0x4) == 4) ? 128 : 0)) * 256 * 256)+ ((l.getElement(18) + (((l.getElement(14) & 0x8) == 8) ? 128 : 0)) * 256 * 256* 256);SlaveSN=Integer.toHexString(slaveSnInt).toUpperCase();} else {SlaveVer="N/A";SlaveSN="N/A";}interpretedMessage+="\tHost: " + HostType + ", S/N: "+ HostSN+ ", S/W Version: "+ HostVer+ "\n\tSlave: "+ SlaveType+ ", S/N: "+ SlaveSN+ ", S/W Version: "+ SlaveVer+ "\n";return interpretedMessage;}default :{forceHex=true;return "Message with opcode 0xE5 and unknown format.";}}}default :{forceHex=true;return "Message with opcode 0xE5 and unknown format.";}}}case 0x09:{switch (l.getElement(2)) {case 0x40:{int locoAddr=l.getElement(4);if (l.getElement(3) != 0x7d) {locoAddr+=l.getElement(3) << 7;}return "Transponding Find query for loco address " + locoAddr + ".\n";}case 0x00:{int section=((l.getElement(5) & 0x1F) << 3) + ((l.getElement(6) & 0x70) >> 4) + 1;String zone;int locoAddr=l.getElement(4);if (l.getElement(3) != 0x7d) {locoAddr+=l.getElement(3) << 7;}switch (l.getElement(6) & 0x0F) {case 0x00:zone="A";break;case 0x02:zone="B";break;case 0x04:zone="C";break;case 0x06:zone="D";break;case 0x08:zone="E";break;case 0x0A:zone="F";break;case 0x0C:zone="G";break;case 0x0E:zone="H";break;default :zone="<unknown " + (l.getElement(2) & 0x0F) + ">";break;}String reporterSystemName="";String reporterUserName="";reporterSystemName=locoNetReporterPrefix + ((l.getElement(5) & 0x1F) * 128 + l.getElement(6) + 1);Reporter reporter=reporterManager.getBySystemName(reporterSystemName);reporterUserName="()";if (reporter != null) {String uname=reporter.getUserName();if ((uname != null) && (!uname.isEmpty())) {reporterUserName="(" + uname + ")";}}return "Transponder Find report : address " + locoAddr + ((l.getElement(3) == 0x7d) ? " (short)" : " (long)")+ " present at "+ reporterSystemName+ " "+ reporterUserName+ " (BDL16x Board "+ section+ " RX4 zone "+ zone+ ").\n";}default :{forceHex=true;return "Message with opcode 0xE5 and unknown format.";}}}case 0x07:{if (l.getElement(2) == 0x01 && l.getElement(3) == 0x49 && l.getElement(4) == 0x42) {switch (l.getElement(5)) {case 0x40:{return "Uhlenbrock IB-COM / Intellibox II Stop Programming Track.\n";}case 0x41:{return "Uhlenbrock IB-COM / Intellibox II Start Programming Track.\n";}default :forceHex=true;return "Unknown OPC_PEER_XFER, may be related to Uhkenbrock\n";}} else {forceHex=true;return "Message with opcode 0xE5, length 0x07, and unknown format.";}}default :{forceHex=true;return "Message with opcode 0xE5 and unknown format.";}}}case LnConstants.OPC_LISSY_UPDATE:{switch (l.getElement(1)) {case 0x08:int unit=(l.getElement(4) & 0x7F);int address=(l.getElement(6) & 0x7F) + 128 * (l.getElement(5) & 0x7F);switch (l.getElement(2)) {case 0x00:return "Lissy " + unit + " IR Report: Loco "+ address+ " moving "+ ((l.getElement(3) & 0x20) == 0 ? "north\n" : "south\n");case 0x01:int wheelCount=(l.getElement(6) & 0x7F) + 128 * (l.getElement(5) & 0x7F);return "Lissy " + unit + " Wheel Report: "+ wheelCount+ " wheels moving "+ ((l.getElement(3) & 0x20) == 0 ? "north\n" : "south\n");default :forceHex=true;return "Unrecognized Lissy message varient.\n";}case 0x0A:int element=l.getElement(2) * 128 + l.getElement(3);int stat1=l.getElement(5);int stat2=l.getElement(6);String status;if ((stat1 & 0x10) != 0) {if ((stat1 & 0x20) != 0) {status=" AX, XA reserved; ";} else {status=" AX reserved; ";}} else if ((stat1 & 0x20) != 0) {status=" XA reserved; ";} else {status=" no reservation; ";}if ((stat2 & 0x01) != 0) {status+="Turnout thrown; ";} else {status+="Turnout closed; ";}if ((stat1 & 0x01) != 0) {status+="Occupied";} else {status+="Not occupied";}return "SE" + (element + 1) + " ("+ element+ ") reports AX:"+ l.getElement(7)+ " XA:"+ l.getElement(8)+ status+ "\n";default :forceHex=true;return "Unrecognized OPC_LISSY_UPDATE command varient.\n";}}case LnConstants.OPC_IMM_PACKET:{int val7f=l.getElement(2);int reps=l.getElement(3);int dhi=l.getElement(4);int im1=l.getElement(5);int im2=l.getElement(6);int im3=l.getElement(7);int im4=l.getElement(8);int im5=l.getElement(9);int mobileDecoderAddress=-999;int nmraInstructionType=-999;int nmraSubInstructionType=-999;int playableWhistleLevel=-999;if (val7f == 0x7f) {int len=((reps & 0x70) >> 4);byte[] packet=new byte[len];int[] packetInt=new int[len];packet[0]=(byte)(im1 + ((dhi & 0x01) != 0 ? 0x80 : 0));packetInt[0]=(im1 + ((dhi & 0x01) != 0 ? 0x80 : 0));if (len >= 2) {packet[1]=(byte)(im2 + ((dhi & 0x02) != 0 ? 0x80 : 0));packetInt[1]=(im2 + ((dhi & 0x02) != 0 ? 0x80 : 0));}if (len >= 3) {packet[2]=(byte)(im3 + ((dhi & 0x04) != 0 ? 0x80 : 0));packetInt[2]=(im3 + ((dhi & 0x04) != 0 ? 0x80 : 0));}if (len >= 4) {packet[3]=(byte)(im4 + ((dhi & 0x08) != 0 ? 0x80 : 0));packetInt[3]=(im4 + ((dhi & 0x08) != 0 ? 0x80 : 0));}if (len >= 5) {packet[4]=(byte)(im5 + ((dhi & 0x10) != 0 ? 0x80 : 0));packetInt[4]=(im5 + ((dhi & 0x10) != 0 ? 0x80 : 0));}int address;if ((packetInt[0] & 0x80) == 0x0) {mobileDecoderAddress=packetInt[0];nmraInstructionType=(packetInt[1] & 0xE) >> 5;nmraSubInstructionType=(packetInt[1] & 0x1f);if ((nmraSubInstructionType == 0x1d) && (packetInt[2] == 0x7f)) {playableWhistleLevel=packetInt[3];}} else if ((packetInt[0] & 0xC0) == 0xC0) {mobileDecoderAddress=((packetInt[0] & 0x3F) << 8) + packetInt[1];nmraInstructionType=(packetInt[2] & 0xE0) >> 5;nmraSubInstructionType=(packetInt[2] & 0x1f);if ((nmraSubInstructionType == 0x1d) && (packetInt[3] == 0x7f)) {playableWhistleLevel=packetInt[4];}} else {}String generic="";if ((mobileDecoderAddress >= 0) && (nmraInstructionType == 1) && (nmraSubInstructionType == 0x1D)) {generic="Playable Whistle control - Loco " + mobileDecoderAddress + " whistle to "+ playableWhistleLevel+ " (repeat "+ (reps & 0x7)+ " times).\n";return generic;}generic="Send packet immediate: " + ((reps & 0x70) >> 4) + " bytes, repeat count "+ (reps & 0x07)+ "("+ reps+ ")"+ "\n\tDHI=0x"+ Integer.toHexString(dhi)+ ", IM1=0x"+ Integer.toHexString(im1)+ ", IM2=0x"+ Integer.toHexString(im2)+ ", IM3=0x"+ Integer.toHexString(im3)+ ", IM4=0x"+ Integer.toHexString(im4)+ ", IM5=0x"+ Integer.toHexString(im5)+ "\n\tpacket: ";if ((packetInt[0] & 0xC0) == 0xC0) {address=((packetInt[0] & 0x3F) << 8) + packetInt[1];if ((packetInt[2] & 0xFF) == 0xDF) {return "Send packet immediate: Locomotive " + address + " set"+ " F21="+ ((packetInt[3] & 0x01) != 0 ? "On" : "Off")+ ", F22="+ ((packetInt[3] & 0x02) != 0 ? "On" : "Off")+ ", F23="+ ((packetInt[3] & 0x04) != 0 ? "On" : "Off")+ ", F24="+ ((packetInt[3] & 0x08) != 0 ? "On" : "Off")+ ", F25="+ ((packetInt[3] & 0x10) != 0 ? "On" : "Off")+ ", F26="+ ((packetInt[3] & 0x20) != 0 ? "On" : "Off")+ ", F27="+ ((packetInt[3] & 0x40) != 0 ? "On" : "Off")+ ", F28="+ ((packetInt[3] & 0x80) != 0 ? "On" : "Off")+ "\n";} else if ((packetInt[2] & 0xFF) == 0xDE) {return "Send packet immediate: Locomotive " + address + " set"+ " F13="+ ((packetInt[3] & 0x01) != 0 ? "On" : "Off")+ ", F14="+ ((packetInt[3] & 0x02) != 0 ? "On" : "Off")+ ", F15="+ ((packetInt[3] & 0x04) != 0 ? "On" : "Off")+ ", F16="+ ((packetInt[3] & 0x08) != 0 ? "On" : "Off")+ ", F17="+ ((packetInt[3] & 0x10) != 0 ? "On" : "Off")+ ", F18="+ ((packetInt[3] & 0x20) != 0 ? "On" : "Off")+ ", F19="+ ((packetInt[3] & 0x40) != 0 ? "On" : "Off")+ ", F20="+ ((packetInt[3] & 0x80) != 0 ? "On" : "Off")+ "\n";} else if ((packetInt[2] & 0xF0) == 0xA0) {return "Send packet immediate: Locomotive " + address + " set"+ ", F09="+ ((packetInt[2] & 0x01) != 0 ? "On" : "Off")+ ", F10="+ ((packetInt[2] & 0x02) != 0 ? "On" : "Off")+ ", F11="+ ((packetInt[2] & 0x04) != 0 ? "On" : "Off")+ ", F12="+ ((packetInt[2] & 0x08) != 0 ? "On" : "Off")+ "\n";} else {return generic + NmraPacket.format(packet) + "\n";}} else {address=packetInt[0];if ((packetInt[1] & 0xFF) == 0xDF) {return "Send packet immediate: Locomotive " + address + " set"+ " F21="+ ((packetInt[2] & 0x01) != 0 ? "On" : "Off")+ ", F22="+ ((packetInt[2] & 0x02) != 0 ? "On" : "Off")+ ", F23="+ ((packetInt[2] & 0x04) != 0 ? "On" : "Off")+ ", F24="+ ((packetInt[2] & 0x08) != 0 ? "On" : "Off")+ ", F25="+ ((packetInt[2] & 0x10) != 0 ? "On" : "Off")+ ", F26="+ ((packetInt[2] & 0x20) != 0 ? "On" : "Off")+ ", F27="+ ((packetInt[2] & 0x40) != 0 ? "On" : "Off")+ ", F28="+ ((packetInt[2] & 0x80) != 0 ? "On" : "Off")+ "\n";} else if ((packetInt[1] & 0xFF) == 0xDE) {return "Send packet immediate: Locomotive " + address + " set"+ " F13="+ ((packetInt[2] & 0x01) != 0 ? "On" : "Off")+ ", F14="+ ((packetInt[2] & 0x02) != 0 ? "On" : "Off")+ ", F15="+ ((packetInt[2] & 0x04) != 0 ? "On" : "Off")+ ", F16="+ ((packetInt[2] & 0x08) != 0 ? "On" : "Off")+ ", F17="+ ((packetInt[2] & 0x10) != 0 ? "On" : "Off")+ ", F18="+ ((packetInt[2] & 0x20) != 0 ? "On" : "Off")+ ", F19="+ ((packetInt[2] & 0x40) != 0 ? "On" : "Off")+ ", F20="+ ((packetInt[2] & 0x80) != 0 ? "On" : "Off")+ "\n";} else if ((packetInt[1] & 0xF0) == 0xA0) {return "Send packet immediate: Locomotive " + address + " set"+ " F09="+ ((packetInt[1] & 0x01) != 0 ? "On" : "Off")+ ", F10="+ ((packetInt[1] & 0x02) != 0 ? "On" : "Off")+ ", F11="+ ((packetInt[1] & 0x04) != 0 ? "On" : "Off")+ ", F12="+ ((packetInt[1] & 0x08) != 0 ? "On" : "Off")+ "\n";} else {return generic + NmraPacket.format(packet) + "\n";}}} else if (l.getElement(1) == 0x1F && l.getElement(2) == 0x01 && l.getElement(3) == 0x49 && l.getElement(4) == 0x42 && l.getElement(6) != 0x5E && l.getElement(10) == 0x70 && l.getElement(11) == 0x00 && l.getElement(15) == 0x10) {int cv=l.getElement(8) * 256 + ((l.getElement(5) & 0x02) * 64) + l.getElement(7);int val=l.getElement(9) + 16 * (l.getElement(5) & 0x08);switch (l.getElement(6)) {case 0x6C:return "Read CV in Register Mode from PT for Uhlenbrock IB-COM / Intellibox - CV: " + cv + ".\n";case 0x6D:return "Write CV in Register Mode from PT for Uhlenbrock IB-COM / Intellibox - CV: " + cv + ".\n";case 0x6E:return "Read CV in Paged Mode from PT for Uhlenbrock IB-COM / Intellibox - CV: " + cv + ".\n";case 0x6F:return "Write CV in Paged Mode from PT for Uhlenbrock IB-COM / Intellibox - CV: " + cv + ".\n";case 0x71:return "Write CV in Direct Byte Mode on PT for Uhlenbrock IB-COM / Intellibox - CV: " + cv + "  Value: "+ val+ ".\n";case 0x70:case 0x72:return "Read CV in Direct Byte Mode from PT for Uhlenbrock IB-COM / Intellibox - CV: " + cv + ".\n";}return "Unknown Uhlenbrock IB-COM / Intellibox PT command CV: " + cv + "  Value: "+ val+ ".\n";} else if (l.getElement(1) == 0x1F && l.getElement(2) == 0x01 && l.getElement(3) == 0x49 && l.getElement(4) == 0x42 && l.getElement(6) == 0x5E) {int addr=l.getElement(8) * 256 + ((l.getElement(5) & 0x02) * 64) + l.getElement(7);int cv=l.getElement(11) * 256 + ((l.getElement(5) & 0x08) << 4) + l.getElement(9);int val=((l.getElement(10) & 0x02) << 6) + l.getElement(12);return "Write CV on Main Track (Ops Mode) for Uhlenbrock IB-COM / Intellibox - Address: " + addr + "  CV: "+ cv+ "  Value: "+ val+ ".\n";} else {forceHex=true;return "Undefined Send Packet Immediate, 3rd byte id 0x" + Integer.toHexString(val7f) + " not 0x7f.\n";}}case LnConstants.RE_OPC_PR3_MODE:{if ((l.getElement(1) == 0x10) && ((l.getElement(2) & 0x7c) == 0) && (l.getElement(3) == 0)&& (l.getElement(4) == 0)) {switch (l.getElement(2) & 0x3) {case 0x00:{return "Set PR3 to MS100 mode without PR3 termination of LocoNet (i.e. use PR3 with command station present).\n";}case 0x01:{return "Set PR3 to decoder programming track mode (i.e. no command station present).\n";}case 0x03:{return "Set PR3 to MS100 mode with PR3 termination of LocoNet (i.e. use PR3 without command station present).\n";}default :{return "Set PR3 to (not understood) mode.\n";}}} else {forceHex=true;return "Unable to parse command.\n";}}case LnConstants.RE_OPC_IB2_F9_F12:{int slot=l.getElement(1);int funcs=l.getElement(2);StringBuilder s=new StringBuilder("Set (Intellibox-II format) loco in slot ");s.append(slot);s.append(" F9=");s.append((funcs & LnConstants.RE_IB2_F9_MASK) != 0 ? "On" : "Off");s.append(" F10=");s.append((funcs & LnConstants.RE_IB2_F10_MASK) != 0 ? "On" : "Off");s.append(" F11=");s.append((funcs & LnConstants.RE_IB2_F11_MASK) != 0 ? "On" : "Off");s.append(" F12=");s.append((funcs & LnConstants.RE_IB2_F12_MASK) != 0 ? "On" : "Off");s.append(".\n");return s.toString();}case LnConstants.RE_OPC_IB2_SPECIAL:{if ((l.getElement(1) == LnConstants.RE_IB2_SPECIAL_FUNCS_TOKEN) && ((l.getElement(3) == LnConstants.RE_IB1_SPECIAL_F5_F11_TOKEN) || (l.getElement(3) == LnConstants.RE_IB2_SPECIAL_F13_F19_TOKEN) || (l.getElement(3) == LnConstants.RE_IB2_SPECIAL_F21_F27_TOKEN))) {int funcOffset=5 + 8 * (l.getElement(3) - LnConstants.RE_IB1_SPECIAL_F5_F11_TOKEN);StringBuilder s=new StringBuilder("Set (");if (l.getElement(3) == LnConstants.RE_IB1_SPECIAL_F5_F11_TOKEN) {s.append("Intellibox-I v2.x format) loco in slot ");} else {s.append("Intellibox-II format) loco in slot ");}s.append(l.getElement(2));int mask=1;for (int i=0; i < 7; i++) {s.append(" F");s.append(funcOffset + i);s.append("=");s.append(((l.getElement(4) & mask) != 0) ? "On" : "Off");mask*=2;}s.append("\n");return s.toString();} else if (l.getElement(3) == LnConstants.RE_IB2_SPECIAL_F20_F28_TOKEN) {StringBuilder s=new StringBuilder("Set (Intellibox-II format) loco in slot ");s.append(l.getElement(2));s.append(" F12=");s.append((l.getElement(4) & LnConstants.RE_IB2_SPECIAL_F12_MASK) == 0 ? "Off" : "On");s.append(" F20=");s.append((l.getElement(4) & LnConstants.RE_IB2_SPECIAL_F20_MASK) == 0 ? "Off" : "On");s.append(" F28=");s.append((l.getElement(4) & LnConstants.RE_IB2_SPECIAL_F28_MASK) == 0 ? "Off\n" : "On\n");return s.toString();} else if (l.getElement(3) == LnConstants.RE_IB1_SPECIAL_F0_F4_TOKEN) {StringBuilder s=new StringBuilder("Set (Intellibox-I v2.x format) loco in slot ");s.append(l.getElement(2));s.append(" F0=");s.append((l.getElement(4) & LnConstants.RE_IB1_F0_MASK) == 0 ? "Off" : "On");int mask=1;for (int i=0; i < 4; i++) {s.append(" F");s.append(1 + i);s.append("=");s.append(((l.getElement(4) & mask) != 0) ? "On" : "Off");mask*=2;}s.append("\n");return s.toString();}}default :forceHex=true;return "Unable to parse command.\n";}}  }
class C{  private static boolean contains(@Nullable FoldRegion region1,@NotNull FoldRegion region2){  if (region1 == null) {    return false;  }  return region1.getStartOffset() <= region2.getStartOffset() && region1.getEndOffset() >= region2.getEndOffset();}  }
class C{  public CertificatePinner certificatePinner(){  return certificatePinner;}  }
class C{  public DOMSignatureProperty(List<? extends XMLStructure> content,String target,String id){  if (target == null) {    throw new NullPointerException("target cannot be null");  } else   if (content == null) {    throw new NullPointerException("content cannot be null");  } else   if (content.isEmpty()) {    throw new IllegalArgumentException("content cannot be empty");  } else {    this.content=Collections.unmodifiableList(new ArrayList<XMLStructure>(content));    for (int i=0, size=this.content.size(); i < size; i++) {      if (!(this.content.get(i) instanceof XMLStructure)) {        throw new ClassCastException("content[" + i + "] is not a valid type");      }    }  }  this.target=target;  this.id=id;}  }
class C{  public void testBuildTextFromElement() throws IOException {  LOGGER.info("buildTextFromElement");  Document document=Jsoup.parse(FileUtils.readFileToString(new File("src/test/resources/pathBuilder/test1.html")));  Element el=document.select("footer").first();  PathElementBuilder instance=new PathElementBuilder(true);  String result=instance.buildTextFromElement(el);  LOGGER.debug("result = " + result);  Elements elementsFromBuiltPath=document.select(result);  assertEquals(1,elementsFromBuiltPath.size());  assertEquals(el,elementsFromBuiltPath.first());}  }
class C{  public void copyFrom(Properties src,boolean shouldResetDefaults){  Enumeration keys=src.keys();  while (keys.hasMoreElements()) {    String key=(String)keys.nextElement();    if (!isLegalPropertyKey(key))     throw new IllegalArgumentException(XSLMessages.createMessage(XSLTErrorResources.ER_OUTPUT_PROPERTY_NOT_RECOGNIZED,new Object[]{key}));    Object oldValue=m_properties.get(key);    if (null == oldValue) {      String val=(String)src.get(key);      if (shouldResetDefaults && key.equals(OutputKeys.METHOD)) {        setMethodDefaults(val);      }      m_properties.put(key,val);    } else     if (key.equals(OutputKeys.CDATA_SECTION_ELEMENTS)) {      m_properties.put(key,(String)oldValue + " " + (String)src.get(key));    }  }}  }
class C{  public static Element createReferenceInfoElement(Document doc,String hashMethod,byte[] hashValue) throws Exception {  Element referenceElement=doc.createElement(Helper.PREFIX_XADES + Helper.REFERENCE_INFO_TAG);  referenceElement.appendChild(Helper.createDigestMethodElement(doc,hashMethod));  referenceElement.appendChild(Helper.createDigestValueElement(doc,hashValue));  return referenceElement;}  }
class C{  public JavaTransformFactory(){  this("JavaTransformFactory");}  }
class C{  public static double L_LevenshteinDistance(int Y[][],int P[][]){  double loss=0.;  int N=Y.length;  for (int i=0; i < N; i++) {    loss+=L_LevenshteinDistance(Y[i],P[i]);  }  return loss / (double)N;}  }
class C{  public InitialRequestToManager(ParallelTask parallelTask){  super();}  }
class C{  public final int promote(){  return promote(value);}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryArraysResponse queryArrays(com.emc.storageos.vasa.VasaServiceStub.QueryArrays queryArrays27) throws java.rmi.RemoteException, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[13].getName());    _operationClient.getOptions().setAction("urn:queryArrays");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryArrays27,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryArrays")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryArraysResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryArraysResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public GenomeRelationships pedigree(){  return mPedigree;}  }
class C{  public String cardObtained(int i,String s){  return top.getString(R.string.obtained,showCard(i,s,CardAnimator.ShowCardType.OBTAINED));}  }
class C{  private void processBTCmd(){  state.textFormat.reset();}  }
class C{  public TDoubleDoubleIterator(TDoubleDoubleHashMap map){  super(map);  _map=map;}  }
class C{  @SuppressWarnings("unchecked") public void handleSuperClasses(ClassNode targetClass){  String superClassName=targetClass.superName;  if (superClassName == null || superClassName.isEmpty())   return;  if (superClassName.equals("java/lang/Object"))   return;  logger.debug("Getting casts for superclass: " + superClassName);  ClassNode superClass=DependencyAnalysis.getClassNode(superClassName);  List<MethodNode> methods=superClass.methods;  for (  MethodNode mn : methods) {    logger.debug("Method: " + mn.name);    if (mn.name.equals("<init>"))     continue;    if (mn.name.equals("<clinit>"))     continue;    if ((mn.access & Opcodes.ACC_ABSTRACT) == Opcodes.ACC_ABSTRACT)     continue;    if ((mn.access & Opcodes.ACC_PUBLIC) == Opcodes.ACC_PUBLIC) {      handleMethodNode(superClass,mn,0);    }  }  handleSuperClasses(superClass);}  }
class C{  public final MutableDouble3D dup(){  return new MutableDouble3D(this);}  }
class C{  @Override protected void onDetachedFromWindow(){  getSpring().removeListener(springListener);  super.onDetachedFromWindow();}  }
class C{  protected VarFakeDefinitionImpl(){  super();}  }
class C{  @Override public void pathCalculating(boolean shortestPathRunning){  if (!shortestPathRunning && Navigator.getNavigator().getGhResponse() != null) {    activeDirections();  }}  }
class C{  public int readNext(boolean ignoreComments) throws CoreException {  int curr=0;  do {    try {      curr=fScanner.getNextToken();      if (curr == ITerminalSymbols.TokenNameEOF) {        throw new CoreException(createError(END_OF_FILE,"End Of File",null));      }    } catch (    InvalidInputException e) {      throw new CoreException(createError(LEXICAL_ERROR,e.getMessage(),e));    }  } while (ignoreComments && isComment(curr));  return curr;}  }
class C{  public final boolean startsWith(CharSequence prefix){  return toString().startsWith(prefix.toString());}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String encryptionOID,String digestOID) throws IllegalArgumentException {  doAddSigner(key,cert,encryptionOID,digestOID,new DefaultSignedAttributeTableGenerator(),null,null);}  }
class C{  public static Sequence<IString> toIStringSequence(int[] indices,Vocabulary index){  IString[] istringList=new IString[indices.length];  for (int i=0; i < indices.length; ++i) {    istringList[i]=new IString(indices[i],index);  }  return new ArraySequence<IString>(true,istringList);}  }
class C{  public void execute(JobExecutionContext context) throws JobExecutionException {}  }
class C{  public void offerTrade(Player partner){  if (player.getName().equals(partner.getName())) {    player.sendPrivateText("Sorry, you cannot trade with yourself.");    return;  }  if (checkPendingTradeOffer(partner)) {    startTrade(partner);    partner.startTrade(player);    tellClients();    return;  }  if (!checkIfTradeMayBeOffered(partner)) {    return;  }  if ((this.tradeState != TradeState.NO_ACTIVE_TRADE) && (this.tradeState != TradeState.OFFERING_TRADE)) {    cancelTrade();  }  player.sendPrivateText("You offered to trade with " + partner.getName() + ".");  partner.sendPrivateText(player.getName() + " wants to trade with you. Right click on " + player.getName()+ " and select \"Trade\" to start a trading session.");  this.partnerName=partner.getName();  this.tradeState=TradeState.OFFERING_TRADE;}  }
class C{  protected void initializeDragImpl(int actions,Transferable contents,Map formatMap,long[] formats) throws InvalidDnDOperationException, IllegalArgumentException, XException {  assert XToolkit.isAWTLockHeldByCurrentThread();  long window=XDragSourceProtocol.getDragSourceWindow();  long data=Native.allocateLongArray(3);  int action_count=0;  try {    if ((actions & DnDConstants.ACTION_COPY) != 0) {      Native.putLong(data,action_count,XDnDConstants.XA_XdndActionCopy.getAtom());      action_count++;    }    if ((actions & DnDConstants.ACTION_MOVE) != 0) {      Native.putLong(data,action_count,XDnDConstants.XA_XdndActionMove.getAtom());      action_count++;    }    if ((actions & DnDConstants.ACTION_LINK) != 0) {      Native.putLong(data,action_count,XDnDConstants.XA_XdndActionLink.getAtom());      action_count++;    }    XErrorHandlerUtil.WITH_XERROR_HANDLER(XErrorHandler.VerifyChangePropertyHandler.getInstance());    XDnDConstants.XA_XdndActionList.setAtomData(window,XAtom.XA_ATOM,data,action_count);    XErrorHandlerUtil.RESTORE_XERROR_HANDLER();    if ((XErrorHandlerUtil.saved_error) != null && (XErrorHandlerUtil.saved_error.get_error_code() != XConstants.Success)) {      cleanup();      throw new XException("Cannot write XdndActionList property");    }  }  finally {    unsafe.freeMemory(data);    data=0;  }  data=Native.allocateLongArray(formats.length);  try {    Native.put(data,formats);    XErrorHandlerUtil.WITH_XERROR_HANDLER(XErrorHandler.VerifyChangePropertyHandler.getInstance());    XDnDConstants.XA_XdndTypeList.setAtomData(window,XAtom.XA_ATOM,data,formats.length);    XErrorHandlerUtil.RESTORE_XERROR_HANDLER();    if ((XErrorHandlerUtil.saved_error != null) && (XErrorHandlerUtil.saved_error.get_error_code() != XConstants.Success)) {      cleanup();      throw new XException("Cannot write XdndActionList property");    }  }  finally {    unsafe.freeMemory(data);    data=0;  }  if (!XDnDConstants.XDnDSelection.setOwner(contents,formatMap,formats,XConstants.CurrentTime)) {    cleanup();    throw new InvalidDnDOperationException("Cannot acquire selection ownership");  }}  }
class C{  public IMultiPoint[] generate(int size){  IMultiPoint[] points=new Hyperpoint[size];  double vals[]=new double[dimensions];  for (int i=0; i < size; i++) {    for (int d=0; d < dimensions; d++) {      vals[d]=scale * Math.random();    }    points[i]=new Hyperpoint(vals);  }  return points;}  }
class C{  public static void enableBlending(){  glShadeModel(GL_SMOOTH);  glEnable(GL_BLEND);  glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);}  }
class C{  public void enableLimit(boolean flag){  if (flag != m_enableLimit) {    m_bodyA.setAwake(true);    m_bodyB.setAwake(true);    m_enableLimit=flag;    m_impulse.z=0.0f;  }}  }
class C{  private boolean contextExists(String contextTypeId){  return contextTypeId != null && (fRegistry == null || fRegistry.getContextType(contextTypeId) != null);}  }
class C{  public static boolean isSchemaNew(Configuration conf){  return lastSchemaUpdate(conf) == getCurrentIteration(conf) - 1;}  }
class C{  public String[] validBaudRates(){  return new String[]{"57,600","115,200","230,400","250,000","333,333","460,800"};}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:27.400 -0500",hash_original_method="5DE3F3B80408315525994C211C4640EC",hash_generated_method="633279BE735F9BF6F8A7B3923C9B6C0F") public void reload(){  internalLoad();}  }
class C{  public void updateDataSource(String name,String newName,ClassDefinition cd,String dsn,String username,String password,String host,String database,int port,int connectionLimit,int connectionTimeout,long metaCacheTimeout,boolean blob,boolean clob,int allow,boolean validate,boolean storage,String timezone,Struct custom,String dbdriver,ParamSyntax paramSyntax) throws PageException {  checkWriteAccess();  SecurityManager sm=config.getSecurityManager();  short access=sm.getAccess(SecurityManager.TYPE_DATASOURCE);  boolean hasAccess=true;  boolean hasInsertAccess=true;  int maxLength=0;  if (access == SecurityManager.VALUE_YES)   hasAccess=true; else   if (access == SecurityManager.VALUE_NO)   hasAccess=false; else   if (access >= SecurityManager.VALUE_1 && access <= SecurityManager.VALUE_10) {    int existingLength=getDatasourceLength(config);    maxLength=access - SecurityManager.NUMBER_OFFSET;    hasInsertAccess=maxLength > existingLength;  }  if (!hasAccess)   throw new SecurityException("no access to update datsource connections");  if (name == null || name.length() == 0)   throw new ExpressionException("name can't be a empty value");  Element datasources=_getRootElement("data-sources");  Element[] children=XMLConfigWebFactory.getChildren(datasources,"data-source");  for (int i=0; i < children.length; i++) {    String n=children[i].getAttribute("name");    if (n.equalsIgnoreCase(name)) {      Element el=children[i];      if (password.equalsIgnoreCase("****************"))       password=el.getAttribute("password");      if (!StringUtil.isEmpty(newName) && !newName.equals(name))       el.setAttribute("name",newName);      setClass(el,null,"",cd);      el.setAttribute("dsn",dsn);      el.setAttribute("username",username);      el.setAttribute("password",ConfigWebUtil.encrypt(password));      el.setAttribute("host",host);      if (!StringUtil.isEmpty(timezone))       el.setAttribute("timezone",timezone); else       if (el.hasAttribute("timezone"))       el.removeAttribute("timezone");      el.setAttribute("database",database);      el.setAttribute("port",Caster.toString(port));      el.setAttribute("connectionLimit",Caster.toString(connectionLimit));      el.setAttribute("connectionTimeout",Caster.toString(connectionTimeout));      el.setAttribute("metaCacheTimeout",Caster.toString(metaCacheTimeout));      el.setAttribute("blob",Caster.toString(blob));      el.setAttribute("clob",Caster.toString(clob));      el.setAttribute("allow",Caster.toString(allow));      el.setAttribute("validate",Caster.toString(validate));      el.setAttribute("storage",Caster.toString(storage));      el.setAttribute("custom",toStringURLStyle(custom));      if (!StringUtil.isEmpty(dbdriver))       el.setAttribute("dbdriver",Caster.toString(dbdriver));      el.setAttribute("param-delimiter",(paramSyntax.delimiter));      el.setAttribute("param-leading-delimiter",(paramSyntax.leadingDelimiter));      el.setAttribute("param-separator",(paramSyntax.separator));      return;    }  }  if (!hasInsertAccess)   throw new SecurityException("no access to add datasource connections, the maximum count of [" + maxLength + "] datasources is reached");  Element el=doc.createElement("data-source");  datasources.appendChild(el);  if (!StringUtil.isEmpty(newName))   el.setAttribute("name",newName); else   el.setAttribute("name",name);  setClass(el,null,"",cd);  el.setAttribute("dsn",dsn);  if (username.length() > 0)   el.setAttribute("username",username);  if (password.length() > 0)   el.setAttribute("password",ConfigWebUtil.encrypt(password));  el.setAttribute("host",host);  if (!StringUtil.isEmpty(timezone))   el.setAttribute("timezone",timezone);  el.setAttribute("database",database);  if (port > -1)   el.setAttribute("port",Caster.toString(port));  if (connectionLimit > -1)   el.setAttribute("connectionLimit",Caster.toString(connectionLimit));  if (connectionTimeout > -1)   el.setAttribute("connectionTimeout",Caster.toString(connectionTimeout));  if (metaCacheTimeout > -1)   el.setAttribute("metaCacheTimeout",Caster.toString(metaCacheTimeout));  el.setAttribute("blob",Caster.toString(blob));  el.setAttribute("clob",Caster.toString(clob));  el.setAttribute("validate",Caster.toString(validate));  el.setAttribute("storage",Caster.toString(storage));  if (allow > -1)   el.setAttribute("allow",Caster.toString(allow));  el.setAttribute("custom",toStringURLStyle(custom));  if (!StringUtil.isEmpty(dbdriver))   el.setAttribute("dbdriver",Caster.toString(dbdriver));  el.setAttribute("param-delimiter",(paramSyntax.delimiter));  el.setAttribute("param-leading-delimiter",(paramSyntax.leadingDelimiter));  el.setAttribute("param-separator",(paramSyntax.separator));}  }
class C{  public Object clone(){  throw new RuntimeException();}  }
class C{  public boolean approveIt(){  log.info("approveIt - " + toString());  setIsApproved(true);  return true;}  }
class C{  protected void drawLabels(Canvas c,float pos){  float[] position=new float[]{0f,0f};  int maxx=mMaxX;  int minx=mMinX;  if (maxx >= mXAxis.getValues().size())   maxx=mXAxis.getValues().size() - 1;  if (minx < 0)   minx=0;  for (int i=minx; i <= maxx; i+=mXAxis.mAxisLabelModulus) {    position[0]=i;    mTrans.pointValuesToPixel(position);    if (mViewPortHandler.isInBoundsX(position[0])) {      String label=mXAxis.getValues().get(i);      if (mXAxis.isAvoidFirstLastClippingEnabled()) {        if (i == mXAxis.getValues().size() - 1 && mXAxis.getValues().size() > 1) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          if (width > mViewPortHandler.offsetRight() * 2 && position[0] + width > mViewPortHandler.getChartWidth())           position[0]-=width / 2;        } else         if (i == 0) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          position[0]+=width / 2;        }      }      c.drawText(label,position[0],pos,mAxisLabelPaint);    }  }}  }
class C{  private static void exit(String errMsg,Options options,int exitCode){  if (errMsg != null)   echo("ERROR: " + errMsg);  String runner=System.getProperty(IGNITE_PROG_NAME,"randignite.{sh|bat}");  int space=runner.indexOf(' ');  runner=runner.substring(0,space == -1 ? runner.length() : space);  if (options != null) {    HelpFormatter formatter=new HelpFormatter();    formatter.printHelp(runner,options);  }  System.exit(exitCode);}  }
class C{  public boolean more() throws JSONException {  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  public Set<String> extractRoles(HttpServerRequest request){  Set<String> roles=null;  MultiMap headers=request.headers();  String proxyGroupHeader=headers.get(groupHeader);  String userRoles=null;  if (proxyGroupHeader != null) {    userRoles=proxyGroupHeader;  } else {    userRoles=headers.get(roleHeader);  }  if (userRoles != null) {    roles=new HashSet<>();    Set<String> allRoles=new HashSet<>(Arrays.asList(userRoles.split(",")));    for (    String r : allRoles) {      r=r.trim();      r=r.toLowerCase();      Matcher matcher=rolePattern.matcher(r);      if (matcher.matches()) {        roles.add(matcher.group(1));      }    }  }  return roles;}  }
class C{  public static void cancelAllTasks(){  cancelTasks(true);}  }
class C{  public void logWarn(Object message){  logInternal(WARN,message,null);}  }
class C{  public Scanner createScannerByRecordNum(long beginRecNum,long endRecNum) throws IOException {  if (beginRecNum < 0)   beginRecNum=0;  if (endRecNum < 0 || endRecNum > getEntryCount()) {    endRecNum=getEntryCount();  }  return new Scanner(this,getLocationByRecordNum(beginRecNum),getLocationByRecordNum(endRecNum));}  }
class C{  @RequestMapping(value="/contents/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteContent(@PathVariable Long id){  log.debug("REST request to delete Content : {}",id);  contentRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("content",id.toString())).build();}  }
class C{  public static LatLon[] greatCircleExtremeLocations(LatLon location,Angle azimuth){  if (location == null) {    throw new IllegalArgumentException("Location Is Null");  }  if (azimuth == null) {    throw new IllegalArgumentException("Azimuth Is Null");  }  double lat0=location.getLatitude().radians;  double az=azimuth.radians;  double tanDistance=-Math.tan(lat0) / Math.cos(az);  double distance=Math.atan(tanDistance);  Angle extremeDistance1=Angle.fromRadians(distance + (Math.PI / 2.0));  Angle extremeDistance2=Angle.fromRadians(distance - (Math.PI / 2.0));  return new LatLon[]{greatCircleEndPosition(location,azimuth,extremeDistance1),greatCircleEndPosition(location,azimuth,extremeDistance2)};}  }
class C{  boolean isStored(){  return state == STORED;}  }
class C{  private void unlockWorkflow(Workflow workflow,InterProcessLock lock) throws WorkflowException {  try {    if (lock != null) {      lock.release();    }  } catch (  Exception ex) {    _log.error("Exception unlocking workflow: " + workflow.getWorkflowURI().toString(),ex);    throw new WorkflowException("Exception unlocking workflow: " + workflow.getWorkflowURI().toString(),ex);  }}  }
class C{  public PoolParams(int maxSize,@Nullable SparseIntArray bucketSizes){  this(maxSize,maxSize,bucketSizes,0,Integer.MAX_VALUE,IGNORE_THREADS);}  }
class C{  protected void clearOutEvents(){  sCInterface.clearOutEvents();}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  Instances result;  int i;  ArrayList<String> values;  int classindex;  classindex=-1;  ArrayList<Attribute> atts=new ArrayList<Attribute>();  for (i=0; i < inputFormat.numAttributes(); i++) {    if ((i == inputFormat.classIndex()) && (getRemoveOldClass())) {      continue;    }    if (i == inputFormat.classIndex()) {      classindex=i;    }    atts.add((Attribute)inputFormat.attribute(i).copy());  }  if (getOutputClassification()) {    if (classindex == -1) {      classindex=atts.size();    }    atts.add(inputFormat.classAttribute().copy("classification"));  }  if (getOutputDistribution()) {    if (inputFormat.classAttribute().isNominal()) {      for (i=0; i < inputFormat.classAttribute().numValues(); i++) {        atts.add(new Attribute("distribution_" + inputFormat.classAttribute().value(i)));      }    } else {      atts.add(new Attribute("distribution"));    }  }  if (getOutputErrorFlag()) {    if (inputFormat.classAttribute().isNominal()) {      values=new ArrayList<String>();      values.add("no");      values.add("yes");      atts.add(new Attribute("error",values));    } else {      atts.add(new Attribute("error"));    }  }  result=new Instances(inputFormat.relationName(),atts,0);  result.setClassIndex(classindex);  return result;}  }
class C{  public static String shortName(String longName){  final String temp=longName.replace("$",".");  if (temp.contains(".")) {    return temp.substring(stripGenerics(temp).lastIndexOf(".") + 1);  } else {    return temp;  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("process") @Valid Process process,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.Process insertDaoProcess=new com.wipro.ats.bdre.md.dao.jpa.Process();    com.wipro.ats.bdre.md.dao.jpa.ProcessType daoProcessType=new com.wipro.ats.bdre.md.dao.jpa.ProcessType();    daoProcessType.setProcessTypeId(process.getProcessTypeId());    insertDaoProcess.setProcessType(daoProcessType);    if (process.getWorkflowId() != null) {      WorkflowType daoWorkflowType=new WorkflowType();      daoWorkflowType.setWorkflowId(process.getWorkflowId());      insertDaoProcess.setWorkflowType(daoWorkflowType);    }    BusDomain daoBusDomain=new BusDomain();    daoBusDomain.setBusDomainId(process.getBusDomainId());    insertDaoProcess.setBusDomain(daoBusDomain);    if (process.getProcessTemplateId() != null) {      ProcessTemplate daoProcessTemplate=new ProcessTemplate();      daoProcessTemplate.setProcessTemplateId(process.getProcessTemplateId());      insertDaoProcess.setProcessTemplate(daoProcessTemplate);    }    if (process.getParentProcessId() != null) {      com.wipro.ats.bdre.md.dao.jpa.Process parentProcess=processDAO.get(process.getParentProcessId());      insertDaoProcess.setProcess(parentProcess);    }    insertDaoProcess.setDescription(process.getDescription());    insertDaoProcess.setAddTs(DateConverter.stringToDate(process.getTableAddTS()));    insertDaoProcess.setProcessName(process.getProcessName());    if (process.getCanRecover() == null)     insertDaoProcess.setCanRecover(true); else     insertDaoProcess.setCanRecover(process.getCanRecover());    insertDaoProcess.setEnqueuingProcessId(process.getEnqProcessId());    if (process.getBatchPattern() != null) {      insertDaoProcess.setBatchCutPattern(process.getBatchPattern());    }    insertDaoProcess.setNextProcessId(process.getNextProcessIds());    if (process.getDeleteFlag() == null) {      insertDaoProcess.setDeleteFlag(false);    } else {      insertDaoProcess.setDeleteFlag(process.getDeleteFlag());    }    if (process.getOwnerRoleId() != null)     insertDaoProcess.setUserRoles(userRolesDAO.get(process.getOwnerRoleId())); else     insertDaoProcess.setUserRoles(userRolesDAO.minUserRoleId(principal.getName()));    if (process.getPermissionTypeByUserAccessId() != null)     insertDaoProcess.setPermissionTypeByUserAccessId(appPermissionDAO.get(process.getPermissionTypeByUserAccessId())); else     insertDaoProcess.setPermissionTypeByUserAccessId(appPermissionDAO.get(7));    if (process.getPermissionTypeByGroupAccessId() != null)     insertDaoProcess.setPermissionTypeByGroupAccessId(appPermissionDAO.get(process.getPermissionTypeByGroupAccessId())); else     insertDaoProcess.setPermissionTypeByGroupAccessId(appPermissionDAO.get(4));    if (process.getPermissionTypeByOthersAccessId() != null)     insertDaoProcess.setPermissionTypeByOthersAccessId(appPermissionDAO.get(process.getPermissionTypeByOthersAccessId())); else     insertDaoProcess.setPermissionTypeByOthersAccessId(appPermissionDAO.get(0));    insertDaoProcess.setEditTs(DateConverter.stringToDate(process.getTableEditTS()));    Users users=new Users();    users.setUsername(principal.getName());    insertDaoProcess.setUsers(users);    Integer processId=processDAO.insert(insertDaoProcess);    process.setProcessId(processId);    process.setTableAddTS(DateConverter.dateToString(insertDaoProcess.getAddTs()));    process.setTableEditTS(DateConverter.dateToString(insertDaoProcess.getEditTs()));    restWrapper=new RestWrapper(process,RestWrapper.OK);    LOGGER.info("Record with ID:" + process.getProcessId() + " inserted in Process by User:"+ principal.getName()+ process);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static void responseCodeReceived(Context context,RestoreTransactions request,ResponseCode responseCode){  if (sPurchaseObserver != null) {    sPurchaseObserver.onRestoreTransactionsResponse(request,responseCode);  }}  }
class C{  protected ColladaAbstractParamContainer(String namespaceURI){  super(namespaceURI);}  }
class C{  public static DocumentOrderingWrapper[] sort(DocumentOrderingWrapper[] documents,List<String> absoluteOrder){  List<DocumentOrderingWrapper> sourceList=new CopyOnWriteArrayList<>();  sourceList.addAll(Arrays.asList(documents));  List<DocumentOrderingWrapper> targetList=new ArrayList<>();  for (  String name : absoluteOrder) {    if ("others".equals(name)) {      continue;    }    boolean found=false;    for (    DocumentOrderingWrapper wrapper : sourceList) {      if (!found && name.equals(wrapper.getDocumentId())) {        found=true;        targetList.add(wrapper);        sourceList.remove(wrapper);      } else       if (found && name.equals(wrapper.getDocumentId())) {        if (LOGGER.isLoggable(Level.WARNING)) {          LOGGER.log(Level.WARNING,"jsf.configuration.absolute.order.duplicate.document",new Object[]{name});        }        break;      }    }    if (!found && LOGGER.isLoggable(Level.WARNING)) {      LOGGER.log(Level.WARNING,"jsf.configuration.absolute.order.missing.document",new Object[]{name});    }  }  int othersIndex=absoluteOrder.indexOf("others");  if (othersIndex != -1) {    for (    DocumentOrderingWrapper wrapper : sourceList) {      targetList.add(othersIndex,wrapper);    }  }  return targetList.toArray(new DocumentOrderingWrapper[targetList.size()]);}  }
class C{  void createDecoderTypeContents(){  List<DecoderFile> decoders=DecoderIndexFile.instance().matchingDecoderList(null,null,null,null,null,null);  int len=decoders.size();  DecoderTreeNode mfgElement=null;  DecoderTreeNode familyElement=null;  HashMap<String,DecoderTreeNode> familyNameNode=new HashMap<String,DecoderTreeNode>();  for (int i=0; i < len; i++) {    DecoderFile decoder=decoders.get(i);    String mfg=decoder.getMfg();    String family=decoder.getFamily();    String model=decoder.getModel();    log.debug(" process " + mfg + "/"+ family+ "/"+ model+ " on nodes "+ (mfgElement == null ? "<null>" : mfgElement.toString() + "(" + mfgElement.getChildCount()+ ")")+ "/"+ (familyElement == null ? "<null>" : familyElement.toString() + "(" + familyElement.getChildCount()+ ")"));    if (mfgElement == null || !mfg.equals(mfgElement.toString())) {      mfgElement=new DecoderTreeNode(mfg,"CV8 = " + DecoderIndexFile.instance().mfgIdFromName(mfg),"");      dModel.insertNodeInto(mfgElement,dRoot,dRoot.getChildCount());      familyNameNode=new HashMap<String,DecoderTreeNode>();      familyElement=null;    }    String famComment=decoders.get(i).getFamilyComment();    String verString=decoders.get(i).getVersionsAsString();    if (familyElement == null || (!family.equals(familyElement.toString()) && !familyNameNode.containsKey(family))) {      if ((i + 2 >= len) || decoders.get(i + 2).getFamily().equals(family) || !decoders.get(i + 1).getModel().equals(family)) {        log.debug("normal family update case: " + family);        familyElement=new DecoderTreeNode(family,getHoverText(verString,famComment),decoders.get(i).titleString());        dModel.insertNodeInto(familyElement,mfgElement,mfgElement.getChildCount());        familyNameNode.put(family,familyElement);        continue;      } else {        log.debug("short case, i=" + i + " family="+ family+ " next "+ decoders.get(i + 1).getModel());        if (i + 1 > len) {          log.error("Unexpected single entry for family: " + family);        }        family=decoders.get(i + 1).getModel();        familyElement=new DecoderTreeNode(family,getHoverText(verString,famComment),decoders.get(i).titleString());        dModel.insertNodeInto(familyElement,mfgElement,mfgElement.getChildCount());        familyNameNode.put(family,familyElement);        i=i + 1;        continue;      }    }    if (!family.equals(model)) {      if (familyNameNode.containsKey(family)) {        familyElement=familyNameNode.get(family);      }      String modelComment=decoders.get(i).getModelComment();      DecoderTreeNode decoderNameNode=new DecoderTreeNode(model,getHoverText(verString,modelComment),decoders.get(i).titleString());      decoderNameNode.setShowable(decoder.getShowable());      dModel.insertNodeInto(decoderNameNode,familyElement,familyElement.getChildCount());    }  }}  }
class C{  public boolean isEmpty(){  return isEmpty(location);}  }
class C{  public ExtensionListing title(String title){  mTitle=title;  return this;}  }
class C{  public void onProceededAfterSslError(WebView view,SslError error){}  }
class C{  public ErrorMessage build(){  return message;}  }
class C{  @Override public Model learn(ExampleSet exampleSet) throws OperatorException {  this.readOptionalParameters();  double[] classPriors=this.prepareWeights(exampleSet);  double maxPrior=Double.NEGATIVE_INFINITY;  double sumPriors=0;  for (int i=0; i < classPriors.length; i++) {    if (classPriors[i] > maxPrior) {      maxPrior=classPriors[i];    }    sumPriors+=classPriors[i];  }  Model model;  if (Tools.isEqual(sumPriors,maxPrior)) {    model=new BayBoostModel(exampleSet,new Vector<BayBoostBaseModelInfo>(),classPriors);  } else {    model=this.trainBoostingModel(exampleSet,classPriors);  }  if (this.oldWeights != null) {    Iterator<Example> reader=exampleSet.iterator();    int i=0;    while (reader.hasNext() && i < this.oldWeights.length) {      reader.next().setWeight(this.oldWeights[i++]);    }  } else {    Attribute weight=exampleSet.getAttributes().getWeight();    exampleSet.getAttributes().remove(weight);    exampleSet.getExampleTable().removeAttribute(weight);  }  return model;}  }
class C{  protected OMGraphic makeEsriGraphic(LittleEndianInputStream iStream,DrawingAttributes drawingAttributes,Object pointRepresentation,ReadByteTracker byteTracker) throws IOException, FormatException {  EsriGraphic eg=null;  int shapeType=iStream.readLEInt();  byteTracker.addRead(4);  if (verbose) {    logger.info("reading shape type: " + shapeType + ", "+ ShapeUtils.getStringForType(shapeType));  }switch (shapeType) {case SHAPE_TYPE_NULL:    break;case SHAPE_TYPE_POINT:  eg=createPointGraphic(iStream,pointRepresentation,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POLYLINE:eg=createPolylineGraphic(iStream,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POLYGON:eg=createPolygonGraphic(iStream,drawingAttributes,byteTracker);break;case SHAPE_TYPE_MULTIPOINT:eg=createMultiPointGraphic(iStream,pointRepresentation,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POINTZ:eg=createPointZGraphic(iStream,pointRepresentation,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POLYLINEZ:eg=createPolylineZGraphic(iStream,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POLYGONZ:eg=createPolygonZGraphic(iStream,drawingAttributes,byteTracker);break;case SHAPE_TYPE_MULTIPOINTZ:eg=createMultiPointZGraphic(iStream,pointRepresentation,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POINTM:eg=createPointMGraphic(iStream,pointRepresentation,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POLYLINEM:eg=createPolylineMGraphic(iStream,drawingAttributes,byteTracker);break;case SHAPE_TYPE_POLYGONM:eg=createPolygonMGraphic(iStream,drawingAttributes,byteTracker);break;case SHAPE_TYPE_MULTIPOINTM:eg=createMultiPointMGraphic(iStream,pointRepresentation,drawingAttributes,byteTracker);break;case SHAPE_TYPE_MULTIPATCH:default :}return (OMGraphic)eg;}  }
class C{  public Tlv(TlvType type,Tlv[] children,byte[] value,int identifier){  this.type=type;  this.children=children;  this.value=value;  this.identifier=identifier;  if (type == TlvType.RESOURCE_VALUE || type == TlvType.RESOURCE_INSTANCE) {    if (value == null) {      throw new IllegalArgumentException("a " + type.name() + " must have a value");    } else     if (children != null) {      throw new IllegalArgumentException("a " + type.name() + " can't have children");    }  } else {    if (value != null) {      throw new IllegalArgumentException("a " + type.name() + " can't have a value");    } else     if (children == null) {      throw new IllegalArgumentException("a " + type.name() + " must have children");    }  }}  }
class C{  public void close(){  Connection[] connections=this.connections;  if (INFO && connections.length > 0)   info("kryonet","Closing server connections...");  for (int i=0, n=connections.length; i < n; i++)   connections[i].close();  connections=new Connection[0];  ServerSocketChannel serverChannel=this.serverChannel;  if (serverChannel != null) {    try {      serverChannel.close();      if (INFO)       info("kryonet","Server closed.");    } catch (    IOException ex) {      if (DEBUG)       debug("kryonet","Unable to close server.",ex);    }    this.serverChannel=null;  }  UdpConnection udp=this.udp;  if (udp != null) {    udp.close();    this.udp=null;  }synchronized (updateLock) {  }  selector.wakeup();  try {    selector.selectNow();  } catch (  IOException ignored) {  }}  }
class C{  public int compare(String first,String second){  if (first.length() < second.length()) {    return -1;  } else   if (first.length() > second.length()) {    return 1;  } else {    return first.compareTo(second);  }}  }
class C{  @Override public void resetRowSelection(){  if (!updatingListSelectionModel) {    updatingListSelectionModel=true;    try {      super.resetRowSelection();    }  finally {      updatingListSelectionModel=false;    }  }}  }
class C{  @SuppressWarnings("fallthrough") private void nodeSetMinusCommentNodes(Node node,List<Node> nodeSet,Node prevSibling){switch (node.getNodeType()) {case Node.ELEMENT_NODE:    NamedNodeMap attrs=node.getAttributes();  if (attrs != null) {    for (int i=0, len=attrs.getLength(); i < len; i++) {      nodeSet.add(attrs.item(i));    }  }nodeSet.add(node);Node pSibling=null;for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {nodeSetMinusCommentNodes(child,nodeSet,pSibling);pSibling=child;}break;case Node.DOCUMENT_NODE:pSibling=null;for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {nodeSetMinusCommentNodes(child,nodeSet,pSibling);pSibling=child;}break;case Node.TEXT_NODE:case Node.CDATA_SECTION_NODE:if (prevSibling != null && (prevSibling.getNodeType() == Node.TEXT_NODE || prevSibling.getNodeType() == Node.CDATA_SECTION_NODE)) {return;}nodeSet.add(node);break;case Node.PROCESSING_INSTRUCTION_NODE:nodeSet.add(node);break;case Node.COMMENT_NODE:if (withComments) {nodeSet.add(node);}}}  }
class C{  public final void sub(Matrix4f m1,Matrix4f m2){  this.m00=m1.m00 - m2.m00;  this.m01=m1.m01 - m2.m01;  this.m02=m1.m02 - m2.m02;  this.m03=m1.m03 - m2.m03;  this.m10=m1.m10 - m2.m10;  this.m11=m1.m11 - m2.m11;  this.m12=m1.m12 - m2.m12;  this.m13=m1.m13 - m2.m13;  this.m20=m1.m20 - m2.m20;  this.m21=m1.m21 - m2.m21;  this.m22=m1.m22 - m2.m22;  this.m23=m1.m23 - m2.m23;  this.m30=m1.m30 - m2.m30;  this.m31=m1.m31 - m2.m31;  this.m32=m1.m32 - m2.m32;  this.m33=m1.m33 - m2.m33;}  }
class C{  public static boolean cs_ipvec(int[] p,double[] b,double[] x,int n){  int k;  if (x == null || b == null)   return (false);  for (k=0; k < n; k++)   x[p != null ? p[k] : k]=b[k];  return (true);}  }
class C{  public Ring(){}  }
class C{  public void incObtainedForItem(String name,int quantity){  itemCounter.incObtainedForItem(name,quantity);}  }
class C{  public void updateAlertDefinition(StatAlertDefinition[] defns,int actionCode){  if (logger.isDebugEnabled()) {    logger.debug("Entered StatAlertsManager.updateAlertDefinition *****");  }synchronized (alertDefinitionsMap) {    if (actionCode == UpdateAlertDefinitionMessage.REMOVE_ALERT_DEFINITION) {      for (int i=0; i < defns.length; i++) {        alertDefinitionsMap.remove(Integer.valueOf(defns[i].getId()));        if (logger.isDebugEnabled()) {          logger.debug("Removed StatAlertDefinition: {}",defns[i].getName());        }      }    } else {      StatAlertDefinition[] alertDefns=this.createMemberStatAlertDefinition(dm,defns);      StatAlertDefinition defn;      for (int i=0; i < alertDefns.length; i++) {        defn=alertDefns[i];        alertDefinitionsMap.put(Integer.valueOf(defns[i].getId()),defn);      }    }  }  if (logger.isDebugEnabled()) {    logger.debug("Exiting StatAlertsManager.updateAlertDefinition *****");  }}  }
class C{  public final boolean version12(){  return (getFlags() & F_VERSION12) != 0;}  }
class C{  public void listImpl(String path,Result<List<String>> result){  if (isOwner(path)) {    listQueryImpl(path,result);  } else {    openReadFile(path,result.then(null));  }}  }
class C{  public int parseAlphaTimeZone() throws ParseException {  int result=0;  boolean foundCommon=false;  char curr;  try {switch (orig[index++]) {case 'U':case 'u':      curr=orig[index++];    if (curr == 'T' || curr == 't') {      result=0;      break;    }  throw new ParseException("Bad Alpha TimeZone",index);case 'G':case 'g':curr=orig[index++];if (curr == 'M' || curr == 'm') {curr=orig[index++];if (curr == 'T' || curr == 't') {  result=0;  break;}}throw new ParseException("Bad Alpha TimeZone",index);case 'E':case 'e':result=300;foundCommon=true;break;case 'C':case 'c':result=360;foundCommon=true;break;case 'M':case 'm':result=420;foundCommon=true;break;case 'P':case 'p':result=480;foundCommon=true;break;default :throw new ParseException("Bad Alpha TimeZone",index);}} catch (ArrayIndexOutOfBoundsException e) {throw new ParseException("Bad Alpha TimeZone",index);}if (foundCommon) {curr=orig[index++];if (curr == 'S' || curr == 's') {curr=orig[index++];if (curr != 'T' && curr != 't') {throw new ParseException("Bad Alpha TimeZone",index);}} else if (curr == 'D' || curr == 'd') {curr=orig[index++];if (curr == 'T' || curr != 't') {result-=60;} else {throw new ParseException("Bad Alpha TimeZone",index);}}}return result;}  }
class C{  public InlineQueryResultLocation.InlineQueryResultLocationBuilder id(String id){  this.id=id;  return this;}  }
class C{  public void base(Object base){  this.base=base;}  }
class C{  public StandardPieToolTipGenerator(String labelFormat,NumberFormat numberFormat,NumberFormat percentFormat){  super(labelFormat,numberFormat,percentFormat);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__REWIRED_TARGET:    return rewiredTarget != null;case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__ANY_PLUS_ACCESS:  return anyPlusAccess != ANY_PLUS_ACCESS_EDEFAULT;case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__NAME_OF_ANY_PLUS_PROPERTY:return NAME_OF_ANY_PLUS_PROPERTY_EDEFAULT == null ? nameOfAnyPlusProperty != null : !NAME_OF_ANY_PLUS_PROPERTY_EDEFAULT.equals(nameOfAnyPlusProperty);}return super.eIsSet(featureID);}  }
class C{  private String toSize(long mem){  if (mem >= 1024) {    if (mem >= 1045504) {      if (mem >= 1070596096) {        return (mem / 1070596096) + "G";      }      return (mem / 1045504) + "M";    }    return (mem / 1024) + "K";  }  return "" + mem;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static int numericCompaction(int[] codewords,int codeIndex,StringBuilder result) throws FormatException {  int count=0;  boolean end=false;  int[] numericCodewords=new int[MAX_NUMERIC_CODEWORDS];  while (codeIndex < codewords[0] && !end) {    int code=codewords[codeIndex++];    if (codeIndex == codewords[0]) {      end=true;    }    if (code < TEXT_COMPACTION_MODE_LATCH) {      numericCodewords[count]=code;      count++;    } else {      if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      }    }    if (count % MAX_NUMERIC_CODEWORDS == 0 || code == NUMERIC_COMPACTION_MODE_LATCH || end) {      if (count > 0) {        String s=decodeBase900toBase10(numericCodewords,count);        result.append(s);        count=0;      }    }  }  return codeIndex;}  }
class C{  private Class<?> findPropertyType(Method readMethod,Method writeMethod) throws IntrospectionException {  Class<?> propertyType=null;  try {    if (readMethod != null) {      Class<?>[] params=getParameterTypes(getClass0(),readMethod);      if (params.length != 0) {        throw new IntrospectionException("bad read method arg count: " + readMethod);      }      propertyType=getReturnType(getClass0(),readMethod);      if (propertyType == Void.TYPE) {        throw new IntrospectionException("read method " + readMethod.getName() + " returns void");      }    }    if (writeMethod != null) {      Class<?>[] params=getParameterTypes(getClass0(),writeMethod);      if (params.length != 1) {        throw new IntrospectionException("bad write method arg count: " + writeMethod);      }      if (propertyType != null && !params[0].isAssignableFrom(propertyType)) {        throw new IntrospectionException("type mismatch between read and write methods");      }      propertyType=params[0];    }  } catch (  IntrospectionException ex) {    throw ex;  }  return propertyType;}  }
class C{  public boolean contains(double x,double y){  return path.contains(x,y);}  }
class C{  private void parse(InputStream source) throws QueryException {  JsonParser jParser=null;  boolean silent=true;  if (source == null)   makeException(QueryMessage.EX_SYNTAX_ERROR);  try {    jParser=Json.createParser(source);    Event firstEvent=jParser.next();    if (firstEvent == JsonParser.Event.START_OBJECT) {      findProjection(jParser);    } else     if (firstEvent == JsonParser.Event.START_ARRAY) {      findKeys(jParser);      is_filter=false;    } else {      makeException(QueryMessage.EX_SYNTAX_ERROR);    }    silent=false;  } catch (  JsonException e) {    throw new QueryException(QueryMessage.EX_SYNTAX_ERROR.get(),e);  } finally {    try {      jParser.close();      source.close();    } catch (    IOException e) {      if (!silent)       throw (new QueryException(QueryMessage.EX_SYNTAX_ERROR.get(),e));    }  }}  }
class C{  private void assertInDebug(QueryResponse response,String key){  assertNotNull("debug map is null",response.getDebugMap());  assertNotNull("debug map has null for : " + key,response.getDebugMap().get(key));}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(String.format("year = %d, month = %d, day = %d, hour = %d, minute = %d, second = %d, msec = %d%n",this.year,this.month,this.day,this.hour,this.minute,this.second,this.msecByFour * 4));  return sb.toString();}  }
class C{  public void deleteWithMissingClass(){  if (m_ClassIndex < 0) {    throw new UnassignedClassException("Class index is negative (not set)!");  }  deleteWithMissing(m_ClassIndex);}  }
class C{  public boolean isHasHeader(){  return hasHeader;}  }
class C{  public static void preview(ReportEngine re){  ReportViewerProvider provider=getReportViewerProvider();  provider.openViewer(re);}  }
class C{  public IgniteStripedThreadPoolExecutor(int concurrentLvl,String gridName,String threadNamePrefix){  execs=new ExecutorService[concurrentLvl];  ThreadFactory factory=new IgniteThreadFactory(gridName,threadNamePrefix);  for (int i=0; i < concurrentLvl; i++)   execs[i]=Executors.newSingleThreadExecutor(factory);}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (extensionValue == null) {    extensionId=PKIXExtensions.CertificateIssuer_Id;    critical=true;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.517 -0400",hash_original_method="96729D330B50C97FB26BF1BC1C614850",hash_generated_method="032464C45B3CAA034D193D61203514F6") public Iterator<E> descendingIterator(){  return m.descendingKeySet().iterator();}  }
class C{  public void clearRangeMarkers(int index){  Integer key=new Integer(index);  if (this.backgroundRangeMarkers != null) {    Collection markers=(Collection)this.backgroundRangeMarkers.get(key);    if (markers != null) {      Iterator iterator=markers.iterator();      while (iterator.hasNext()) {        Marker m=(Marker)iterator.next();        m.removeChangeListener(this);      }      markers.clear();    }  }  if (this.foregroundRangeMarkers != null) {    Collection markers=(Collection)this.foregroundRangeMarkers.get(key);    if (markers != null) {      Iterator iterator=markers.iterator();      while (iterator.hasNext()) {        Marker m=(Marker)iterator.next();        m.removeChangeListener(this);      }      markers.clear();    }  }  fireChangeEvent();}  }
class C{  public JSONArray names(){  return nameValuePairs.isEmpty() ? null : new JSONArray(new ArrayList<String>(nameValuePairs.keySet()));}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  public long readLongDelta() throws IOException {  int preComp;  if ((fill >= 16 || refill() >= 16) && (preComp=DELTA[current >> (fill - 16) & 0xFFFF]) != 0) {    readBits+=preComp >> 16;    fill-=preComp >> 16;    return preComp & 0xFFFF;  }  final int msb=readGamma();  return ((1L << msb) | readLong(msb)) - 1;}  }
class C{  private void moveIndex(){  int i=rightmostDip();  if (i < 0) {    hasNext=false;    return;  }  int leastToRightIndex=i + 1;  for (int j=i + 2; j < n; j++) {    if (index[j] < index[leastToRightIndex] && index[j] > index[i]) {      leastToRightIndex=j;    }  }  int t=index[i];  index[i]=index[leastToRightIndex];  index[leastToRightIndex]=t;  if (m - 1 > i) {    reverseAfter(i);    reverseAfter(m - 1);  }}  }
class C{  private static void swap(long x[],int a,int b){  long t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  private void initContents(Composite main){  if (null != initialName) {    nameBox.setText(initialName);  }  if (null != initialMeasurement) {    measurementBox.setText(initialMeasurement);  }  if (null != initialField) {    fieldBox.setText(initialField);  }  if (null != initialTags) {    for (    Entry<String,String> tag : initialTags.entrySet()) {      TagKeyValueUIComponent tagComponent=new TagKeyValueUIComponent(main,tag.getKey(),tag.getValue());      tagComponents.add(tagComponent);    }  }}  }
class C{  public static <T>Optional<T> cast(Object object,Class<T> clazz){  requireNonNull(clazz);  if (object == null) {    return Optional.empty();  }  if (clazz.isAssignableFrom(object.getClass())) {    final T result=clazz.cast(object);    return Optional.of(result);  }  return Optional.empty();}  }
class C{  public AdminRegion(String localName,RemoteGemFireVM vm,String userAttributeDesc){  String gn=localName;  int idx=localName.lastIndexOf(nameSep);  if (idx != -1) {    localName=localName.substring(idx + 1);  } else {    gn=nameSep + gn;  }  this.globalName=gn;  this.localName=localName;  this.userAttributeDesc=userAttributeDesc;  this.vm=vm;}  }
class C{  public void initParam(Object obj){  paramObject=obj;  Enumeration<AbstractParamPanel> en=tablePanel.elements();  AbstractParamPanel panel=null;  while (en.hasMoreElements()) {    panel=en.nextElement();    panel.initParam(obj);  }}  }
class C{  private static double deltaMatrices(double[][] mat1,double[][] mat2){  double[][] test=Matrix.sub(mat1,mat2);  double delta=0.0;  int m=Matrix.getNumOfRows(mat1);  int n=Matrix.getNumOfColumns(mat1);  for (int i=0; i < m; ++i) {    for (int j=0; j < n; ++j) {      delta+=Math.abs(test[i][j]);    }  }  return (delta / (m * n));}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void startProcessing(){  isProcessing=true;}  }
class C{  public AccountHeaderBuilder withOnAccountHeaderListener(AccountHeader.OnAccountHeaderListener onAccountHeaderListener){  this.mOnAccountHeaderListener=onAccountHeaderListener;  return this;}  }
class C{  @Override public boolean toggleComment(Comment comment){  int position=indexOf(comment);  if (position == listingComments.getChildren().size() - 1) {    expandComment(position);    return true;  }  List<Thing> commentList=listingComments.getChildren();  comment=(Comment)commentList.get(position);  Comment nextComment=(Comment)commentList.get(position + 1);  if (comment.getLevel() >= nextComment.getLevel()) {    expandComment(position);    return true;  } else {    collapseComment(position);    return false;  }}  }
class C{  public RequestPrepareAnnounce(final Deserializer deserializer){  this.transaction=deserializer.readObject("transaction",TransactionFactory.NON_VERIFIABLE);  this.privateKey=PrivateKey.fromHexString(deserializer.readString("privateKey"));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_CASE_DEF___TRACECASE_NAME_1:    return getTracecase_name_1();case UmplePackage.TRACE_CASE_DEF___TRACE_DIRECTIVE_1:  return getTraceDirective_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Stylesheet(){}  }
class C{  public Orthographic(LatLonPoint center,float scale,int width,int height){  super(center,scale,width,height);  setMinScale(1000.0f);}  }
class C{  public static boolean isGzipRandomOutputFile(SeekableInputStream gzipFile){  InputStreamConverter is=null;  try {    is=new InputStreamConverter(gzipFile,false);  } catch (  IllegalArgumentException e) {    return false;  }catch (  IOException ie) {    return false;  } finally {    if (is != null) {      try {        is.close();      } catch (      Exception e) {      }    }  }  return true;}  }
class C{  protected ElemVariable addVarDeclToElem(ElemTemplateElement psuedoVarRecipient,LocPathIterator lpi,ElemVariable psuedoVar) throws org.w3c.dom.DOMException {  ElemTemplateElement ete=psuedoVarRecipient.getFirstChildElem();  lpi.callVisitors(null,m_varNameCollector);  if (m_varNameCollector.getVarCount() > 0) {    ElemTemplateElement baseElem=getElemFromExpression(lpi);    ElemVariable varElem=getPrevVariableElem(baseElem);    while (null != varElem) {      if (m_varNameCollector.doesOccur(varElem.getName())) {        psuedoVarRecipient=varElem.getParentElem();        ete=varElem.getNextSiblingElem();        break;      }      varElem=getPrevVariableElem(varElem);    }  }  if ((null != ete) && (Constants.ELEMNAME_PARAMVARIABLE == ete.getXSLToken())) {    if (isParam(lpi))     return null;    while (null != ete) {      ete=ete.getNextSiblingElem();      if ((null != ete) && Constants.ELEMNAME_PARAMVARIABLE != ete.getXSLToken())       break;    }  }  psuedoVarRecipient.insertBefore(psuedoVar,ete);  m_varNameCollector.reset();  return psuedoVar;}  }
class C{  @Override public void deliver(WriteStream os,OutHttp2 outHttp) throws IOException {  outHttp.writeBlock(_streamId);}  }
class C{  public ImageBevelBorder(Image img,Insets imageInsets,Insets borderInsets,boolean fillContentArea){  if (img instanceof BufferedImage) {    this.image=(BufferedImage)img;  } else {    Frame f=new Frame();    f.pack();    MediaTracker t=new MediaTracker(f);    t.addImage(img,0);    try {      t.waitForAll();    } catch (    InterruptedException e) {    }    image=new BufferedImage(img.getWidth(f),img.getHeight(f),BufferedImage.TYPE_INT_ARGB);    Graphics2D imgGraphics=image.createGraphics();    imgGraphics.drawImage(img,0,0,f);    imgGraphics.dispose();    f.dispose();  }  this.imageInsets=imageInsets;  this.borderInsets=borderInsets;  this.fillContentArea=fillContentArea;}  }
class C{  public static Declaration lookupMember(List<Declaration> members,String name,List<Type> signature,boolean variadic,boolean onlyExactMatches){  List<Declaration> results=null;  Declaration result=null;  Declaration inexactMatch=null;  for (int i=0, size=members.size(); i < size; i++) {    Declaration d=members.get(i);    if (isResolvable(d) && isNamed(name,d)) {      if (signature == null) {        if (notOverloaded(d)) {          return d;        }      } else {        if (notOverloaded(d)) {          inexactMatch=d;        }        if (hasMatchingSignature(d,signature,variadic)) {          if (result == null) {            result=d;          } else {            if (results == null) {              results=new ArrayList<Declaration>(2);              results.add(result);            }            addIfBetterMatch(results,d,signature);          }        }      }    }  }  if (results == null) {    if (result != null) {      return result;    }    return onlyExactMatches ? null : inexactMatch;  }switch (results.size()) {case 0:    return onlyExactMatches ? null : inexactMatch;case 1:  return results.get(0);default :return onlyExactMatches ? null : inexactMatch;}}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:00.358 -0500",hash_original_method="EB46FEA2FE489ABD86FB64E17870F7D5",hash_generated_method="EB46FEA2FE489ABD86FB64E17870F7D5") LocalSocketImpl(){}  }
class C{  private void checkWarnings(){  List<Offer> list=market.getOffersOlderThan(TIME_TO_WARNING);  long time=System.currentTimeMillis();  for (  Offer offer : list) {    long timeDiff=time - timeStamp;    if (timeStamp != 0 && ((time - offer.getTimestamp() - TIME_TO_WARNING * 1000) > timeDiff)) {      continue;    }    StringBuilder builder=new StringBuilder();    builder.append("Your offer of ");    builder.append(Grammar.a_noun(offer.getItemName()));    builder.append(" will expire in ");    builder.append(TimeUtil.approxTimeUntil((int)((offer.getTimestamp() - time) / 1000 + TIME_TO_EXPIRING)));    builder.append(".");    sendMessage(offer.getOfferer(),builder);  }  timeStamp=time;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (derivedFeatureID) {case SexecPackage.EXECUTION_SCOPE__NAME:      return BasePackage.NAMED_ELEMENT__NAME;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  protected Paint createHorizontalGradient(Shape s,Color[] colors){  Rectangle2D bounds=s.getBounds2D();  float xMin=(float)bounds.getMinX();  float xMax=(float)bounds.getMaxX();  float yCenter=(float)bounds.getCenterY();  return createGradient(xMin,yCenter,xMax,yCenter,new float[]{0f,1f},colors);}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null) {        changeEvent=new ChangeEvent(this);      }      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  private void fillSOMNetworkFieldValues(){  tfAlpha.setText(Double.toString(((SOMNetwork)som).getSom().getInitAlpha()));  tfInitNeighborhoodSize.setText(Double.toString(((SOMNetwork)som).getSom().getInitNeighborhoodSize()));  tfAlphaDecayRate.setText(Double.toString(((SOMNetwork)som).getSom().getAlphaDecayRate()));  tfNeigborhoodDecayAmount.setText(Double.toString(((SOMNetwork)som).getSom().getNeighborhoodDecayAmount()));}  }
class C{  public boolean containsValue(String value){  return mCapabilities.containsValue(value);}  }
class C{  @Override public boolean isBusy(){  return false;}  }
class C{  public static BufferedImage renderToImage(String url,String path,int width,int height) throws IOException {  return renderImageToOutput(url,new FSImageWriter(),path,width);}  }
class C{  @Override public String toString(){  return getValue();}  }
class C{  DocumentInfo(String url){  setUrl(url);}  }
class C{  public EipFactoryImpl(){  super();}  }
class C{  private void createGraph(int vertexCount){  for (int i=0; i < vertexCount; i++) {    graph.addVertex(i);  }  int j=0;  graph.addEdge(j++,0,1,EdgeType.DIRECTED);  graph.addEdge(j++,3,0,EdgeType.DIRECTED);  graph.addEdge(j++,0,4,EdgeType.DIRECTED);  graph.addEdge(j++,4,5,EdgeType.DIRECTED);  graph.addEdge(j++,5,3,EdgeType.DIRECTED);  graph.addEdge(j++,2,1,EdgeType.DIRECTED);  graph.addEdge(j++,4,1,EdgeType.DIRECTED);  graph.addEdge(j++,8,2,EdgeType.DIRECTED);  graph.addEdge(j++,3,8,EdgeType.DIRECTED);  graph.addEdge(j++,6,7,EdgeType.DIRECTED);  graph.addEdge(j++,7,5,EdgeType.DIRECTED);  graph.addEdge(j++,0,9,EdgeType.DIRECTED);  graph.addEdge(j++,9,8,EdgeType.DIRECTED);  graph.addEdge(j++,7,6,EdgeType.DIRECTED);  graph.addEdge(j++,6,5,EdgeType.DIRECTED);  graph.addEdge(j++,4,2,EdgeType.DIRECTED);  graph.addEdge(j++,5,4,EdgeType.DIRECTED);  graph.addEdge(j++,4,10,EdgeType.DIRECTED);  graph.addEdge(j++,10,4,EdgeType.DIRECTED);}  }
class C{  public boolean merge(final Frame<? extends V> frame,final Interpreter<V> interpreter) throws AnalyzerException {  if (top != frame.top) {    throw new AnalyzerException(null,"Incompatible stack heights");  }  boolean changes=false;  for (int i=0; i < locals + top; ++i) {    V v=interpreter.merge(values[i],frame.values[i]);    if (!v.equals(values[i])) {      values[i]=v;      changes=true;    }  }  return changes;}  }
class C{  void print() throws Exception {  Language language=Language.getLoginLanguage();  MPrintFormat pf=null;  int pfid=0;  RowSet pfrs=MPrintFormat.getAccessiblePrintFormats(X_RV_PP_Product_BOMLine_Table_ID,-1,null);  pfrs.next();  pfid=pfrs.getInt("AD_PrintFormat_ID");  if (pfrs.getInt("AD_Client_ID") != 0)   pf=MPrintFormat.get(getCtx(),pfid,false); else   pf=MPrintFormat.copyToClient(getCtx(),pfid,getAD_Client_ID());  pfrs.close();  if (pf == null)   raiseError("Error: ","No Print Format");  pf.setLanguage(language);  pf.setTranslationLanguage(language);  MQuery query=MQuery.get(getCtx(),AD_PInstance_ID,X_RV_PP_Product_BOMLine_Table_Name);  query.addRestriction("AD_PInstance_ID",MQuery.EQUAL,AD_PInstance_ID);  PrintInfo info=new PrintInfo(X_RV_PP_Product_BOMLine_Table_Name,X_RV_PP_Product_BOMLine_Table_ID,getRecord_ID());  ReportEngine re=new ReportEngine(getCtx(),pf,query,info);  ReportCtl.preview(re);  while (re.getView().isDisplayable()) {    Env.sleep(1);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int[] k=Catbert.getKeystrokeFromString(getString(stack));  return UserEvent.getPrettyEvtName(stack.getUIMgrSafe().getRouter().getUEIDForKB(k[0],k[1]));}  }
class C{  @RequestProcessing(value="/member/{userName}/points",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomePoints(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {  final JSONObject user=(JSONObject)request.getAttribute(User.USER);  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/points.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("userHomePointsCnt");  final int windowSize=Symphonys.getInt("userHomePointsWindowSize");  fillHomeUser(dataModel,user);  avatarQueryService.fillUserAvatarURL(user);  final String followingId=user.optString(Keys.OBJECT_ID);  dataModel.put(Follow.FOLLOWING_ID,followingId);  final JSONObject userPointsResult=pointtransferQueryService.getUserPoints(user.optString(Keys.OBJECT_ID),pageNum,pageSize);  final List<JSONObject> userPoints=CollectionUtils.<JSONObject>jsonArrayToList(userPointsResult.optJSONArray(Keys.RESULTS));  dataModel.put(Common.USER_HOME_POINTS,userPoints);  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);  if (isLoggedIn) {    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);    final String followerId=currentUser.optString(Keys.OBJECT_ID);    final boolean isFollowing=followQueryService.isFollowing(followerId,user.optString(Keys.OBJECT_ID));    dataModel.put(Common.IS_FOLLOWING,isFollowing);  }  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));  final int pointsCnt=userPointsResult.optInt(Pagination.PAGINATION_RECORD_COUNT);  final int pageCount=(int)Math.ceil((double)pointsCnt / (double)pageSize);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);}  }
class C{  public CircuitBreakerBuilder trialRequestIntervalMillis(long trialRequestIntervalMillis){  trialRequestInterval(Duration.ofMillis(trialRequestIntervalMillis));  return this;}  }
class C{  public String createVolume(String volumeName,long capacity,String volumeTypeId) throws Exception {  return createVolume(volumeName,capacity,volumeTypeId,null,null);}  }
class C{  public static XppDom buildDom(String xml) throws XmlPullParserException, IOException {  return buildDom(new StringReader(xml));}  }
class C{  public static long parseTTL(String s){  return parse(s,true);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case BasePackage.DOCUMENTED_ELEMENT__DOCUMENTATION:    return getDocumentation();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public HttpRequest contentType(String contentType,String charset){  mContentType=contentType;  mCharset=charset;  return this;}  }
class C{  public static void main(String[] argv){  String update=null;  if (argv.length == 2 && "-update".equals(argv[0])) {    update=argv[1];    LOG.info("Updating service files in folder: " + update);  } else   if (argv.length != 0) {    throw new AbortException("Incorrect command line parameters.");  }  new CheckELKIServices().checkServices(update);}  }
class C{  public Matrix4d reflect(double a,double b,double c,double d){  return reflect(a,b,c,d,this);}  }
class C{  public float nextFloat(){  int y;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  return (y >>> 8) / ((float)(1 << 24));}  }
class C{  public Builder addCustomModule(final SimpleModule custom){  this.customModules.add(custom);  return this;}  }
class C{  private void arden() throws InterruptedException {  Set<RE> self=removeCoeff(nt);  if (self == null || self.isEmpty()) {    return;  }  RE selfStar=unionREs(self).star();  Map<Nonterminal,Set<RE>> oldCoeffs=coeffs;  coeffs=new HashMap<Nonterminal,Set<RE>>();  for (  Map.Entry<Nonterminal,Set<RE>> entry : oldCoeffs.entrySet()) {    Nonterminal var=entry.getKey();    Set<RE> cs=entry.getValue();    for (    RE c : cs) {      addCoeff(var,concat(selfStar,c));    }  }  Set<RE> oldTerms=terms;  terms=new HashSet<RE>();  for (  RE t : oldTerms) {    RE nxt=concat(selfStar,t);    addTerm(nxt);  }}  }
class C{  public static AlertDialog noListsFoundDialog(Context context){  return new AlertDialog.Builder(context).setTitle(R.string.error_title).setMessage(R.string.no_liked_lists_message).setPositiveButton(R.string.ok,null).create();}  }
class C{  @SuppressWarnings("unchecked") public HttpMethodInfo buildHttpMethodInfo(Request request,Response responder,Map<String,String> groupValues) throws HandlerException {  try {    List<HttpResourceModel.ParameterInfo<?>> paramInfoList=httpResourceModel.getParamInfoList();    Object[] args=new Object[paramInfoList.size()];    int idx=0;    for (    HttpResourceModel.ParameterInfo<?> paramInfo : paramInfoList) {      if (paramInfo.getAnnotation() != null) {        Class<? extends Annotation> annotationType=paramInfo.getAnnotation().annotationType();        if (PathParam.class.isAssignableFrom(annotationType)) {          args[idx]=getPathParamValue((HttpResourceModel.ParameterInfo<String>)paramInfo,groupValues);        } else         if (QueryParam.class.isAssignableFrom(annotationType)) {          args[idx]=getQueryParamValue((HttpResourceModel.ParameterInfo<List<String>>)paramInfo,request.getUri());        } else         if (HeaderParam.class.isAssignableFrom(annotationType)) {          args[idx]=getHeaderParamValue((HttpResourceModel.ParameterInfo<List<String>>)paramInfo,request);        } else         if (CookieParam.class.isAssignableFrom(annotationType)) {          args[idx]=getCookieParamValue((HttpResourceModel.ParameterInfo<String>)paramInfo,request);        } else         if (Context.class.isAssignableFrom(annotationType)) {          args[idx]=getContextParamValue((HttpResourceModel.ParameterInfo<Object>)paramInfo,request,responder);        } else         if (FormParam.class.isAssignableFrom(annotationType)) {          args[idx]=getFormParamValue((HttpResourceModel.ParameterInfo<List<Object>>)paramInfo,request);        } else         if (FormDataParam.class.isAssignableFrom(annotationType)) {          args[idx]=getFormDataParamValue((HttpResourceModel.ParameterInfo<List<Object>>)paramInfo,request);        } else {          createObject(request,args,idx,paramInfo);        }      } else {        createObject(request,args,idx,paramInfo);      }      idx++;    }    if (httpStreamer == null) {      return new HttpMethodInfo(httpResourceModel.getMethod(),httpResourceModel.getHttpHandler(),args,formParameters,responder);    } else {      return new HttpMethodInfo(httpResourceModel.getMethod(),httpResourceModel.getHttpHandler(),args,formParameters,responder,httpStreamer);    }  } catch (  Throwable e) {    throw new HandlerException(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR,String.format("Error in executing request: %s %s",request.getHttpMethod(),request.getUri()),e);  }}  }
class C{  public void testNestedRegistered() throws Exception {  checkNested(true);}  }
class C{  public boolean removeCertificate(@NotNull X509Certificate certificate){  return removeCertificate(createAlias(certificate));}  }
class C{  public final static float normalizeLatitude(float lat,float epsilon){  if (lat > NORTH_POLE_F - epsilon) {    return NORTH_POLE_F - epsilon;  } else   if (lat < SOUTH_POLE_F + epsilon) {    return SOUTH_POLE_F + epsilon;  }  return lat;}  }
class C{  public ScenarioResult(Classifier<?> supplier,Class client,Class factory){  this(supplier,client);  this.factory=Objects.requireNonNull(factory);  this.implementer=null;}  }
class C{  @Override public void run(){  while (true) {    long total=Runtime.getRuntime().totalMemory();    long free=Runtime.getRuntime().freeMemory();    long max=Runtime.getRuntime().maxMemory();    label.setText("T:" + toSize(total) + " F:"+ toSize(free)+ " M:"+ toSize(max));    bar1.setMaximum((int)total);    bar1.setValue((int)(total - free));    bar2.setMaximum((int)max);    bar2.setValue((int)total);    try {      Thread.sleep(500);    } catch (    InterruptedException e) {    }  }}  }
class C{  public Object clone(){  try {    return new FastShortMessage(packedMsg);  } catch (  InvalidMidiDataException imde) {  }  return null;}  }
class C{  protected int engineUpdate(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {  return core.update(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  public static boolean validateTestPlans(String plans){  String[] testPlanLists=plans.split(",");  boolean output=true;  for (int t=0; t < testPlanLists.length; t++) {    File xmlFile=new File(testPlanLists[t]);    if (!xmlFile.exists()) {      LOG.error(LogUtil.getLogMessage("File not found:  " + testPlanLists[t]));      System.err.println("File not found:  " + testPlanLists[t]);      output=false;    }  }  return output;}  }
class C{  public boolean busy(){  return worker != null;}  }
class C{  public Frustum(){  this(new Plane(1,0,0,1),new Plane(-1,0,0,1),new Plane(0,1,0,1),new Plane(0,-1,0,1),new Plane(0,0,-1,1),new Plane(0,0,1,1));}  }
class C{  protected Runnable createRequestTask(){  return new RequestTask(this);}  }
class C{  public static byte[] decode(char[] in,int iOff,int iLen){  if (iLen % 4 != 0)   throw new IllegalArgumentException("Length of Base64 encoded input string is not a multiple of 4.");  while (iLen > 0 && in[iOff + iLen - 1] == '=')   iLen--;  int oLen=(iLen * 3) / 4;  byte[] out=new byte[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++];    int i1=in[ip++];    int i2=ip < iEnd ? in[ip++] : 'A';    int i3=ip < iEnd ? in[ip++] : 'A';    if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int b0=map2[i0];    int b1=map2[i1];    int b2=map2[i2];    int b3=map2[i3];    if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int o0=(b0 << 2) | (b1 >>> 4);    int o1=((b1 & 0xf) << 4) | (b2 >>> 2);    int o2=((b2 & 3) << 6) | b3;    out[op++]=(byte)o0;    if (op < oLen)     out[op++]=(byte)o1;    if (op < oLen)     out[op++]=(byte)o2;  }  return out;}  }
class C{  public DurationConfigFieldBuilder tenantDuration(final Duration tenantDuration){  this.tenantDuration=tenantDuration;  return this;}  }
class C{  public IterationStatement createIterationStatement(){  IterationStatementImpl iterationStatement=new IterationStatementImpl();  return iterationStatement;}  }
class C{  public TestCase(final ID id,final String className,final String origin,final String name,final String displayName,URI methodURI){  this.id=id;  this.className=className;  this.origin=origin;  this.name=name;  this.displayName=displayName;  this.uri=methodURI;}  }
class C{  public void stopProxyButParameter(int hostNumber){  TcpProxy[] proxies=proxySet.get(currentType);  for (int i=0; i < proxies.length; i++) {    if (i != hostNumber - 1) {      proxies[i].stop();    }  }}  }
class C{  static public final float random(float start,float end){  return start + random.nextFloat() * (end - start);}  }
class C{  @Override public int compareTo(CipherSuite o){  return o.priority - priority;}  }
class C{  protected void processAttributes(){  for (  final String tag : tags) {    for (    final String inherit : inherits) {      styleSheet.addStyles(tag,styleSheet.getStyles(inherit));    }    styleSheet.addStyles(tag,attributes);  }}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public final Collection<? extends CRL> generateCRLs(InputStream inStream) throws CRLException {  return spiImpl.engineGenerateCRLs(inStream);}  }
class C{  public ZookeeperStateMachineEnsemble(CuratorFramework curatorClient,String basePath){  this(curatorClient,basePath,true,DEFAULT_LOGSIZE);}  }
class C{  public static SimpleAlertDialogFragment newInstance(CharSequence title,CharSequence message,CharSequence buttonLabel){  SimpleAlertDialogFragment simpleAlertDialogFragment=new SimpleAlertDialogFragment();  Bundle args=new Bundle();  args.putCharSequence(KEY_TITLE,title);  args.putCharSequence(KEY_MESSAGE,message);  args.putCharSequence(KEY_BUTTON,buttonLabel);  simpleAlertDialogFragment.setArguments(args);  return simpleAlertDialogFragment;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public AttachAPINotFoundException(final String message){  super(message);}  }
class C{  public SIPHeader parse() throws ParseException {  String name=lexer.getNextToken(':');  lexer.consume(1);  String body=lexer.getLine().trim();  ExtensionHeaderImpl retval=new ExtensionHeaderImpl(name);  retval.setValue(body);  return retval;}  }
class C{  private StyledString appendTypeParameterList(StyledString buffer,CompletionProposal typeProposal){  char[] signature=SignatureUtil.fix83600(typeProposal.getSignature());  char[][] typeParameters=Signature.getTypeArguments(signature);  for (int i=0; i < typeParameters.length; i++) {    char[] param=typeParameters[i];    typeParameters[i]=Signature.toCharArray(param);  }  return appendParameterSignature(buffer,typeParameters,null);}  }
class C{  public void modifyDiskLimitTreeQuota(String volume,String path,long diskLimitInKB,long thresholdInKB){  if (log.isDebugEnabled()) {    log.debug("Modifying disk limit tree quota of " + diskLimitInKB + " KB to "+ path);  }  QuotaCommands commands=new QuotaCommands(server.getNaServer());  commands.modifyDiskLimitTreeQuota(volume,path,diskLimitInKB,thresholdInKB);}  }
class C{  @AnonymousCheck(requiresLogin=true,displaysFlashMessage=true) public static Result newForm(){  return ok(create.render("title.newOrganization",new Form<>(Organization.class)));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.899 -0500",hash_original_method="8D670697E365032294CEEA6593A27CE4",hash_generated_method="8803EAAB3918614F1470ED57F6BA48A4") public ViewPropertyAnimator x(float value){  animateProperty(X,value);  return this;}  }
class C{  public static <REACTOR extends ReactBuilder>ReactPool<REACTOR> elasticPool(final Supplier<REACTOR> supplier){  return new ReactPool<>(supplier);}  }
class C{  public static void main(String[] args){  try {    Utils.SMALL=0;    Instances inst=new Instances(new java.io.InputStreamReader(System.in));    inst.setClassIndex(inst.numAttributes() - 1);    MarginCurve tc=new MarginCurve();    EvaluationUtils eu=new EvaluationUtils();    weka.classifiers.meta.LogitBoost classifier=new weka.classifiers.meta.LogitBoost();    classifier.setNumIterations(20);    ArrayList<Prediction> predictions=eu.getTrainTestPredictions(classifier,inst,inst);    Instances result=tc.getCurve(predictions);    System.out.println(result);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  private static void shareWithLastUsed(Activity activity,String title,String url,Bitmap screenshot){  ComponentName component=getLastShareComponentName(activity);  if (component == null)   return;  makeIntentAndShare(activity,title,url,screenshot,component);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeissupported01.class,args);}  }
class C{  private static HandleSet removeAppearanceHashes(final String sentence,final HandleSet queryhashes){  if (sentence == null)   return queryhashes;  final SortedMap<byte[],Integer> hs=WordTokenizer.hashSentence(sentence,100);  final Iterator<byte[]> j=queryhashes.iterator();  byte[] hash;  Integer pos;  final HandleSet remaininghashes=new RowHandleSet(queryhashes.keylen(),queryhashes.comparator(),queryhashes.size());  while (j.hasNext()) {    hash=j.next();    pos=hs.get(hash);    if (pos == null) {      try {        remaininghashes.put(hash);      } catch (      final SpaceExceededException e) {        ConcurrentLog.logException(e);      }    }  }  remaininghashes.optimize();  return remaininghashes;}  }
class C{  public JGraphicList(int initialCapacity,int capacityIncrement){  super(initialCapacity);}  }
class C{  public void write(int offset,int value){  super.write(offset,value);}  }
class C{  public static void showToast(Context context,String message){  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();}  }
class C{  protected void doProcess(final CloudTrailEvent event){  for (  final FullstopPlugin plugin : getPluginsForEvent(event)) {    doProcess(event,plugin);  }}  }
class C{  public static boolean constantTimeAreEqual(byte[] a,byte[] b){  if (a == b) {    return true;  }  if (a == null || b == null) {    return false;  }  if (a.length != b.length) {    return false;  }  int nonEqual=0;  for (int i=0; i != a.length; i++) {    nonEqual|=(a[i] ^ b[i]);  }  return nonEqual == 0;}  }
class C{  public ArrayBindingPattern createArrayBindingPattern(){  ArrayBindingPatternImpl arrayBindingPattern=new ArrayBindingPatternImpl();  return arrayBindingPattern;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.455 -0500",hash_original_method="CE7958995206C16BABC830EC1527AD6A",hash_generated_method="B0C6476C1A7AA9D02FCCF8389C3472A7") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int send(String reversePath) throws IOException {  return sendCommand(SMTPCommand.SEND,reversePath);}  }
class C{  @Override public int compareTo(final BoardDimensions o){  int result=0;  if (width() < o.width()) {    result=-1;  } else   if (width() > o.width()) {    result=1;  } else {    if (height() < o.height()) {      result=-1;    } else     if (height() > o.height()) {      result=1;    }  }  return result;}  }
class C{  @Override public short[][] production_table(){  return _production_table;}  }
class C{  public TargetHostsLoadException(String error,Exception t){  super(error,t);}  }
class C{  protected List<? extends LatLon> outerBoundary(){  return this.boundaries.get(0);}  }
class C{  private void autoScroll(){  int end=mAdapter.getItemCount() - 1;  if (end <= 0)   return;  int visible=findLastVisibleItemPosition();  if (visible >= (end - 3))   scrollToPosition(end);}  }
class C{  public void updateMapOfEmptyRegions(Map regionsWithEmptyDataPolicy,String regionName,int regionDataPolicy){  if (regionDataPolicy == 0) {    if (!regionsWithEmptyDataPolicy.containsKey(regionName)) {      regionsWithEmptyDataPolicy.put(regionName,Integer.valueOf(0));    }  }}  }
class C{  public StandardXYItemRenderer(){  this(LINES,null);}  }
class C{  public static boolean beenDone(String tag,CountChecker numberOfTimes){  return beenDone(THIS_APP_INSTALL,tag,numberOfTimes);}  }
class C{  public void testDescriptorComplexCrosslink() throws Exception {  FileDescriptorProto fileDescriptorProto=FileDescriptorProto.newBuilder().setName("foo.proto").addMessageType(DescriptorProto.newBuilder().setName("Foo").addField(FieldDescriptorProto.newBuilder().setLabel(FieldDescriptorProto.Label.LABEL_OPTIONAL).setType(FieldDescriptorProto.Type.TYPE_INT32).setName("foo").setNumber(1).build()).build()).addMessageType(DescriptorProto.newBuilder().setName("Bar").addField(FieldDescriptorProto.newBuilder().setLabel(FieldDescriptorProto.Label.LABEL_OPTIONAL).setTypeName("Foo").setName("Foo").setNumber(1).build()).build()).build();  FileDescriptor file=Descriptors.FileDescriptor.buildFrom(fileDescriptorProto,new FileDescriptor[0]);  assertNotNull(file);  List<Descriptor> msglist=file.getMessageTypes();  assertNotNull(msglist);  assertTrue(msglist.size() == 2);  boolean barFound=false;  for (  Descriptor desc : msglist) {    if (desc.getName().equals("Bar")) {      barFound=true;      assertNotNull(desc.getFields());      List<FieldDescriptor> fieldlist=desc.getFields();      assertNotNull(fieldlist);      assertTrue(fieldlist.size() == 1);      assertTrue(fieldlist.get(0).getType() == FieldDescriptor.Type.MESSAGE);      assertTrue(fieldlist.get(0).getMessageType().getName().equals("Foo"));    }  }  assertTrue(barFound);}  }
class C{  protected void clearOutEvents(){}  }
class C{  void startEnterRecentsAnimation(int delay,Runnable postAnimRunnable){  startFadeAnimation(mConfig.taskViewThumbnailAlpha,delay,mConfig.taskViewEnterFromAppDuration,postAnimRunnable);}  }
class C{  public void insert(T object,int index){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.add(index,object);      if (mNotifyOnChange)       notifyDataSetChanged();    }  } else {    mObjects.add(index,object);    if (mNotifyOnChange)     notifyDataSetChanged();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String badString;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      badString=child.substringData(10,-3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public static DialogBuilder showNewDialog(String title,String message){  DialogBuilder db=newDialog(title,message);  db.show();  return db;}  }
class C{  public static String longToString(long v,int radix){  int i=(int)v;  if (i == v) {    return intToString(i,radix);  }  if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {    radix=10;  }  if (radix == 10) {    return longToString(v);  }  boolean negative=false;  if (v < 0) {    negative=true;  } else {    v=-v;  }  int bufLen=radix < 8 ? 65 : 23;  char[] buf=new char[bufLen];  int cursor=bufLen;  do {    long q=v / radix;    buf[--cursor]=DIGITS[(int)(radix * q - v)];    v=q;  } while (v != 0);  if (negative) {    buf[--cursor]='-';  }  return new String(cursor,bufLen - cursor,buf);}  }
class C{  public boolean containsKey(float key){  return contains(key);}  }
class C{  static public double incompleteGammaComplement(double a,double x) throws ArithmeticException {  double ans, ax, c, yc, r, t, y, z;  double pk, pkm1, pkm2, qk, qkm1, qkm2;  if (x <= 0 || a <= 0)   return 1.0;  if (x < 1.0 || x < a)   return 1.0 - incompleteGamma(a,x);  ax=a * Math.log(x) - x - logGamma(a);  if (ax < -MAXLOG)   return 0.0;  ax=Math.exp(ax);  y=1.0 - a;  z=x + y + 1.0;  c=0.0;  pkm2=1.0;  qkm2=x;  pkm1=x + 1.0;  qkm1=z * x;  ans=pkm1 / qkm1;  do {    c+=1.0;    y+=1.0;    z+=2.0;    yc=y * c;    pk=pkm1 * z - pkm2 * yc;    qk=qkm1 * z - qkm2 * yc;    if (qk != 0) {      r=pk / qk;      t=Math.abs((ans - r) / r);      ans=r;    } else     t=1.0;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    if (Math.abs(pk) > big) {      pkm2*=biginv;      pkm1*=biginv;      qkm2*=biginv;      qkm1*=biginv;    }  } while (t > MACHEP);  return ans * ax;}  }
class C{  public void clear(){  cache.clear();  stack.clear();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();case VALUES:return isSetValues();case RESPONSE_TO:return isSetResponseTo();}throw new IllegalStateException();}  }
class C{  @Override protected ShardIterator shards(ClusterState clusterState,InternalRequest request){  ShardRouting primaryShardRouting=new ShardRouting(request.concreteIndex(),0,clusterService.localNode().id(),true,ShardRoutingState.STARTED);  return new PlainShardIterator(primaryShardRouting.shardId(),Collections.singletonList(primaryShardRouting));}  }
class C{  public AtomicArrayBase(E[] array){  this.array=Arrays.copyOf(array,array.length,Object[].class);}  }
class C{  public CToggleButton(){  this(null,null,false);}  }
class C{  void drawImage(Object img,int x,int y,int transform){  if (transform != 0) {    impl.drawImageRotated(nativeGraphics,img,x + xTranslate,y + yTranslate,transform);  } else {    drawImage(img,x,y);  }}  }
class C{  public <T>T put(final Object key,T value){  if (mCache != null) {    mCache.put(key,value);  }  return value;}  }
class C{  final boolean isOnSyncQueue(Node node){  if (node.waitStatus == Node.CONDITION || node.prev == null)   return false;  if (node.next != null)   return true;  return findNodeFromTail(node);}  }
class C{  String assembleStringRepresentationOfObjectFromCookies(final Cookie[] cookies) throws CartDetuplizationException {  final TuplizerSetting meta=tuplizerSetting;  final StringBuilder stringBuilder=new StringBuilder();  int cookieIndex=0;  boolean continueSearch=true;  if (cookies != null) {    final String terminator=String.valueOf(meta.key.hashCode());    final String objectKey=meta.key;    while (continueSearch) {      final String seekKey=objectKey + cookieIndex;      boolean keyFound=false;      for (      Cookie cookie : cookies) {        if (cookie.getName().equals(seekKey)) {          keyFound=true;          continueSearch=!terminator.equals(cookie.getValue());          if (continueSearch) {            stringBuilder.append(cookie.getValue());            cookieIndex++;          }          break;        }      }      if (!keyFound) {        continueSearch=false;      }    }  }  return stringBuilder.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.421 -0500",hash_original_method="1BD37EF197753A4C52E1EAD431273D9E",hash_generated_method="ED1014A56C27D110A8DA40BC92649C61") public static void sort(byte[] a){  doSort(a,0,a.length - 1);}  }
class C{  public static boolean isName(@NotNull final PyElement element,@NotNull final FQNamesProvider... namesProviders){  final Pair<String,String> qualifiedAndClassName=QUALIFIED_AND_CLASS_NAME.getValue(element);  final String qualifiedName=qualifiedAndClassName.first;  final String className=qualifiedAndClassName.second;  for (  final FQNamesProvider provider : namesProviders) {    final List<String> names=Arrays.asList(provider.getNames());    if (qualifiedName != null && names.contains(qualifiedName)) {      return true;    }    if (className != null && provider.isClass() && names.contains(className)) {      return true;    }  }  return false;}  }
class C{  private int numLocksHeldInThisVM(){  int numLocksHeld=0;synchronized (this.tokens) {    for (Iterator iter=this.tokens.values().iterator(); iter.hasNext(); ) {      DLockToken token=(DLockToken)iter.next();synchronized (token) {        if (token.isLeaseHeld()) {          numLocksHeld++;        }      }    }  }  return numLocksHeld;}  }
class C{  public boolean slotContainsCode(int slot){  if (VM.VerifyAssertions) {    VM._assert(slot < length());  }  return slot >= TIB_FIRST_VIRTUAL_METHOD_INDEX;}  }
class C{  public void registerNew(String workflowIdentifier,long version,String description,String correlationId){  if (this.stateMachineDefinition.get() != null) {    throw new IllegalStateException("A single thread cannot execute more than one workflow");  }  stateMachineDefinition.set(new StateMachineDefinition(description,workflowIdentifier,version,new HashSet<>(),new HashSet<>(),correlationId));  tlUniqueEventCount.set(new MutableInt(0));  this.eventNames.set(new IdentityHashMap<>());}  }
class C{  public void run(){  try {    GatewayDiscover gd=new GatewayDiscover(st);    gd.discover();    if (gd.getValidGateway() != null) {      device=gd.getValidGateway();    }  } catch (  Throwable e) {    logger.info("Failed to harvest UPnP: " + e);    if (e instanceof ThreadDeath)     throw (ThreadDeath)e;  } finally {synchronized (rootSync) {      finishThreads++;      rootSync.notify();    }  }}  }
class C{  public WebResource createWebResource(String serviceURL,Map<String,String> queryParams){  Client client=Client.create();  WebResource webResource=client.resource(serviceURL);  for (  String key : queryParams.keySet()) {    webResource=webResource.queryParam(key,queryParams.get(key));  }  return webResource;}  }
class C{  public static byte asByte(int a){  if (a != (byte)a) {    throw new ArithmeticException("overflow: " + a);  }  return (byte)a;}  }
class C{  public boolean isLeaderNode(String localZkMode){  return ZOOKEEPER_MODE_LEADER.equals(localZkMode) || ZOOKEEPER_MODE_STANDALONE.equals(localZkMode) || getLocalSite().getNodeCount() == 1 && ZOOKEEPER_MODE_FOLLOWER.equals(localZkMode);}  }
class C{  private Response doMAIL(SMTPSession session,String argument){  StringBuilder responseBuffer=new StringBuilder();  MailAddress sender=(MailAddress)session.getAttachment(SMTPSession.SENDER,State.Transaction);  responseBuffer.append(DSNStatus.getStatus(DSNStatus.SUCCESS,DSNStatus.ADDRESS_OTHER)).append(" Sender <");  if (sender != null) {    responseBuffer.append(sender);  }  responseBuffer.append("> OK");  return new SMTPResponse(SMTPRetCode.MAIL_OK,responseBuffer);}  }
class C{  public void init(Writer os){  _os=os;  _state=StateJsonOut.FIRST;}  }
class C{  protected void doInit(final FilterConfig config) throws ServletException {}  }
class C{  public boolean equals(Object o){  if (!(o instanceof DVector))   return false;  DVector v=(DVector)o;  return size == v.size && Arrays.equals(vector,v.vector);}  }
class C{  public int size(){  return encodedNames.size();}  }
class C{  public void nextNull() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_NULL) {    peeked=PEEKED_NONE;    pathIndices[stackSize - 1]++;  } else {    throw new IllegalStateException("Expected null but was " + peek() + locationString());  }}  }
class C{  public static boolean interfaceOf(Class<?> objectClass,String interfaceName) throws ClassNotFoundException {  Class<?> interfaceClass=loadClass(interfaceName);  return interfaceOf(objectClass,interfaceClass);}  }
class C{  public static boolean hasTransformedParameters(String className,String methodName,String desc){  String key=className.replace('.','/') + "/" + methodName+ desc;  if (DescriptorMapping.getInstance().originalDesc.containsKey(key)) {    for (    Type type : Type.getArgumentTypes(DescriptorMapping.getInstance().originalDesc.get(key))) {      if (type.equals(Type.BOOLEAN_TYPE))       return true;    }  }  return false;}  }
class C{  public <T extends SuperModel>boolean delete(T model){  Object[] objects=model.getDeleteSql();  return execSQL(objects[0].toString(),Arrays.copyOfRange(objects,1,objects.length));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public String toString(){  return "(" + x + ", "+ y+ ")";}  }
class C{  public RefMethod findMethod(final Object... types){  final Class[] classes=new Class[types.length];  int t=0;  for (  final Object e : types) {    if (e instanceof Class) {      classes[t++]=(Class)e;    } else     if (e instanceof RefClass) {      classes[t++]=((RefClass)e).getRealClass();    } else {      classes[t++]=e.getClass();    }  }  final List<Method> methods=new ArrayList<>();  Collections.addAll(methods,this.clazz.getMethods());  Collections.addAll(methods,this.clazz.getDeclaredMethods());  findMethod:   for (  final Method m : methods) {    final Class<?>[] methodTypes=m.getParameterTypes();    if (methodTypes.length != classes.length) {      continue;    }    for (    final Class aClass : classes) {      if (!Arrays.equals(classes,methodTypes)) {        continue findMethod;      }      return new RefMethod(m);    }  }  throw new RuntimeException("no such method");}  }
class C{  public VcfEvalParamsBuilder restriction(final RegionRestriction restriction){  mRestriction=restriction;  return this;}  }
class C{  public void removeLayoutComponent(Component comp){}  }
class C{  public static boolean matchesDefaultLocale(Locale locale){  Locale systemLocale=Locale.getDefault();  if (matchesOrIsMoreSpecific(systemLocale.getLanguage(),locale.getLanguage()) && matchesOrIsMoreSpecific(systemLocale.getCountry(),locale.getCountry()) && matchesOrIsMoreSpecific(systemLocale.getVariant(),locale.getVariant())) {    return true;  }  return false;}  }
class C{  private T[] ensureCapacity(int minCapacity){  if (tmp.length < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    T[] newArray=(T[])new Object[newSize];    tmp=newArray;  }  return tmp;}  }
class C{  private static File configurationRedirect(File redirectToNewHome){  assert redirectToNewHome != null;  assert redirectToNewHome.exists() == true;  File redirectConfigurationFile=new File(redirectToNewHome,".redirect");  if (!redirectConfigurationFile.exists()) {    addStartupLogMessage("Using configuration folder: " + redirectToNewHome);    return redirectToNewHome;  }  String message=".redirect file found in " + redirectToNewHome.getPath();  addStartupLogMessage(message);  try {    BufferedReader fr=null;    try {      fr=new BufferedReader(new FileReader(redirectConfigurationFile));      String newHomeFileName=fr.readLine();      File newHome=new File(newHomeFileName);      if (newHome.exists()) {        addStartupLogMessage("redirecting home folder to " + newHome.getAbsolutePath());        return configurationRedirect(newHome);      } else {        String message2="... unable to find redirect folder " + newHome.getPath();        String message3="... so redirect abandoned";        if (guiMode) {          JOptionPane.showMessageDialog(null,message + "\n" + message2+ "\n"+ message3+ startupMessagesForDisplay(),Constants.PROGNAME,JOptionPane.ERROR_MESSAGE);        }        addStartupLogMessage(Helper.getTextFromPseudoHtmlText(message3));        addStartupLogMessage(Helper.getTextFromPseudoHtmlText(message2));        System.exit(-1);      }    }  finally {      if (fr != null)       fr.close();    }  } catch (  IOException e) {    String message2="... failure reading .redirect file";    String message3="... so redirect abandoned";    if (guiMode) {      JOptionPane.showMessageDialog(null,message + "\n" + message2+ "\n"+ message3+ startupMessagesForDisplay(),Constants.PROGNAME,JOptionPane.ERROR_MESSAGE);    }    addStartupLogMessage(Helper.getTextFromPseudoHtmlText(message2));    addStartupLogMessage(Helper.getTextFromPseudoHtmlText(message3));    addStartupLogMessage("Exit(-2)");    System.exit(-2);  }  addStartupLogMessage("Using configuration folder: " + redirectToNewHome);  return redirectToNewHome;}  }
class C{  @Deprecated public void awaitRunning(){  waitForJobQueue();}  }
class C{  public void lineDot(final int x0,final int y0,final int x1,final int y1,final int radius,final int padding,final long lineColor,final long dotColor){  final double dx=x1 - x0;  final double dy=y1 - y0;  final double angle=Math.atan2(dy,dx);  final double d=Math.sqrt((dx * dx + dy * dy));  final double ddotcenter=d - radius - padding;  final double ddotborder=ddotcenter - radius;  final double xn=Math.cos(angle);  final double yn=Math.sin(angle);  final int x2=x0 + ((int)(ddotcenter * xn));  final int y2=y0 + ((int)(ddotcenter * yn));  final int x3=x0 + ((int)(ddotborder * xn));  final int y3=y0 + ((int)(ddotborder * yn));  setColor(lineColor);  line(x0,y0,x3,y3,100);  setColor(dotColor);  dot(x2,y2,radius,true,100);}  }
class C{  public double measureNumRules(){  return m_entries.size();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public TemplateEffect(Template variable,Template value){  this(variable,value,1,true,false);}  }
class C{  public static boolean isInstallApplets(Context c){  SharedPreferences pref=c.getSharedPreferences(APP_PREF_NAME,Context.MODE_PRIVATE);  return pref.getBoolean("applets",c.getString(R.string.applets).equals("true"));}  }
class C{  public void check(){  if (!hasAnimVal) {    if (baseVal == null) {      baseVal=new BaseSVGNumberList();    }    baseVal.revalidate();    if (baseVal.missing) {      throw new LiveAttributeException(element,localName,LiveAttributeException.ERR_ATTRIBUTE_MISSING,null);    }    if (baseVal.malformed) {      throw new LiveAttributeException(element,localName,LiveAttributeException.ERR_ATTRIBUTE_MALFORMED,baseVal.getValueAsString());    }  }}  }
class C{  public Clusters(){  this.clusters=new HashMap<>();  this.names=new HashMap<>();}  }
class C{  public void verifyCertificate(Certificate[] trustedCertificates) throws HandshakeException {  if (certPath != null) {    Set<TrustAnchor> trustAnchors=getTrustAnchors(trustedCertificates);    try {      PKIXParameters params=new PKIXParameters(trustAnchors);      params.setRevocationEnabled(false);      CertPathValidator validator=CertPathValidator.getInstance("PKIX");      validator.validate(certPath,params);    } catch (    GeneralSecurityException e) {      if (LOGGER.isLoggable(Level.FINEST)) {        LOGGER.log(Level.FINEST,"Certificate validation failed",e);      } else       if (LOGGER.isLoggable(Level.FINE)) {        LOGGER.log(Level.FINE,"Certificate validation failed due to {0}",e.getMessage());      }      AlertMessage alert=new AlertMessage(AlertLevel.FATAL,AlertDescription.BAD_CERTIFICATE,getPeer());      throw new HandshakeException("Certificate chain could not be validated",alert);    }  }}  }
class C{  public boolean isSelectedPageActive(final PageParameters pageParameters,final String pageParameterName,final int page){  if ((StringUtils.isNotBlank(pageParameterName))) {    int param=pageParameters.get(pageParameterName).toInt(0);    if (param < 0) {      param=0;    }    return page == param;  }  return false;}  }
class C{  public Class<V> valueType(){  return valueType;}  }
class C{  private void compareLocalStateWithEnumerationData(AWSComputeEnumerationCreationSubStage next){  if (this.aws.remoteAWSInstances == null || this.aws.remoteAWSInstances.size() == 0) {    this.service.logInfo("No resources discovered on the remote system. Nothing to be created locally");  } else   if (this.aws.localAWSInstanceMap == null || this.aws.localAWSInstanceMap.size() == 0) {    for (    String key : this.aws.remoteAWSInstances.keySet()) {      this.aws.instancesToBeCreated.add(this.aws.remoteAWSInstances.get(key));    }  } else {    for (    String key : this.aws.remoteAWSInstances.keySet()) {      if (!this.aws.localAWSInstanceMap.containsKey(key)) {        this.aws.instancesToBeCreated.add(this.aws.remoteAWSInstances.get(key));      } else {        this.aws.instancesToBeUpdated.put(key,this.aws.remoteAWSInstances.get(key));        this.aws.computeStatesToBeUpdated.put(key,this.aws.localAWSInstanceMap.get(key));      }    }  }  this.aws.subStage=next;  handleReceivedEnumerationData();}  }
class C{  public boolean isInPast(long time){  return time > mCursor.getLong(mCursor.getColumnIndex(COLUMN_NAME_DEPARTURE));}  }
class C{  @Override public String toString(){  return id instanceof String ? (String)id : "[" + ((Integer)id).intValue() + "]";}  }
class C{  public boolean longLabel(){  return fState.longLabel;}  }
class C{  public void clear(){  if (isEditing()) {    stopEditing();    setText("");    commitChange();    startEditingAsync();  } else {    setText("");    commitChange();  }}  }
class C{  private synchronized void resetAutoFallBackCounters(){  this.primaryHostFailTimeMillis=System.currentTimeMillis();  this.queriesIssuedSinceFailover=0;}  }
class C{  public void assign(cern.colt.function.DoubleFunction function){  if (function instanceof cern.jet.math.Mult) {    double multiplicator=((cern.jet.math.Mult)function).multiplicator;    if (multiplicator == 1)     return;    if (multiplicator == 0) {      clear();      return;    }    for (int i=table.length; i-- > 0; ) {      if (state[i] == FULL)       values[i]*=multiplicator;    }  } else {    for (int i=table.length; i-- > 0; ) {      if (state[i] == FULL)       values[i]=function.apply(values[i]);    }  }}  }
class C{  public static Object createObject(final String rawJSON) throws TwitterException {  try {    final JSONObject json=new JSONObject(rawJSON);    final JSONObjectType.Type jsonObjectType=JSONObjectType.determine(json);switch (jsonObjectType) {case SENDER:      return registerJSONObject(directMessageConstructor.newInstance(json.getJSONObject("direct_message")),json);case STATUS:    return registerJSONObject(statusConstructor.newInstance(json),json);case DIRECT_MESSAGE:  return registerJSONObject(directMessageConstructor.newInstance(json.getJSONObject("direct_message")),json);case DELETE:return registerJSONObject(statusDeletionNoticeConstructor.newInstance(json.getJSONObject("delete").getJSONObject("status")),json);case LIMIT:return json;case SCRUB_GEO:return json;default :return json;}} catch (final InstantiationException e) {throw new TwitterException(e);}catch (final IllegalAccessException e) {throw new AssertionError(e);}catch (final InvocationTargetException e) {throw new TwitterException(e);}catch (final JSONException e) {throw new TwitterException(e);}}  }
class C{  public boolean IsPrePiEmpty(){  return this.prePi.isEmpty();}  }
class C{  public th addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private static int roundingGradationTests(){  int failures=0;  failures+=roundAway(new BigDecimal("1234e100"),new BigDecimal("1234e97"));  failures+=roundAway(new BigDecimal("1234e100"),new BigDecimal("1234e96"));  failures+=roundAway(new BigDecimal("1234e100"),new BigDecimal("1234e95"));  failures+=roundAway(new BigDecimal("1234e100"),new BigDecimal("1234e94"));  failures+=roundAway(new BigDecimal("1234e100"),new BigDecimal("1234e93"));  failures+=roundAway(new BigDecimal("1234e100"),new BigDecimal("1234e92"));  failures+=roundAway(new BigDecimal("1234e100"),new BigDecimal("1234e50"));  failures+=roundAway(new BigDecimal("1000e100"),new BigDecimal("1234e97"));  failures+=roundAway(new BigDecimal("1000e100"),new BigDecimal("1234e96"));  failures+=roundAway(new BigDecimal("1000e100"),new BigDecimal("1234e95"));  failures+=roundAway(new BigDecimal("1000e100"),new BigDecimal("1234e94"));  failures+=roundAway(new BigDecimal("1000e100"),new BigDecimal("1234e93"));  failures+=roundAway(new BigDecimal("1000e100"),new BigDecimal("1234e92"));  failures+=roundAway(new BigDecimal("1000e100"),new BigDecimal("1234e50"));  failures+=roundAway(new BigDecimal("1999e100"),new BigDecimal("1234e97"));  failures+=roundAway(new BigDecimal("1999e100"),new BigDecimal("1234e96"));  failures+=roundAway(new BigDecimal("1999e100"),new BigDecimal("1234e95"));  failures+=roundAway(new BigDecimal("1999e100"),new BigDecimal("1234e94"));  failures+=roundAway(new BigDecimal("1999e100"),new BigDecimal("1234e93"));  failures+=roundAway(new BigDecimal("1999e100"),new BigDecimal("1234e92"));  failures+=roundAway(new BigDecimal("1999e100"),new BigDecimal("1234e50"));  failures+=roundAway(new BigDecimal("9999e100"),new BigDecimal("1234e97"));  failures+=roundAway(new BigDecimal("9999e100"),new BigDecimal("1234e96"));  failures+=roundAway(new BigDecimal("9999e100"),new BigDecimal("1234e95"));  failures+=roundAway(new BigDecimal("9999e100"),new BigDecimal("1234e94"));  failures+=roundAway(new BigDecimal("9999e100"),new BigDecimal("1234e93"));  failures+=roundAway(new BigDecimal("9999e100"),new BigDecimal("1234e92"));  failures+=roundAway(new BigDecimal("9999e100"),new BigDecimal("1234e50"));  return failures;}  }
class C{  public void testNextDouble(){  double f=ThreadLocalRandom.current().nextDouble();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextDouble() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public void testCanSetSystemProperty(){  AbstractInstalledLocalContainer container=new AbstractInstalledLocalContainerStub(configuration);  container.getSystemProperties().put("1","2");  assertEquals(1,container.getSystemProperties().size());  assertEquals("2",container.getSystemProperties().get("1"));}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.902 -0400",hash_original_method="98E223E86C4C3137EA234A101C3EBA8B",hash_generated_method="79BB4DED901112DADFA16BD14893D1B8") @Override public int read(byte[] buf,int off,int len) throws IOException {  int firstCount=0;  int b=0;  while (len > 0 && b >= 0) {    b=readFirstBytes();    if (b >= 0) {      buf[off++]=(byte)(b & 0xFF);      len--;      firstCount++;    }  }  int secondCount=in.read(buf,off,len);  return secondCount < 0 ? firstCount > 0 ? firstCount : -1 : firstCount + secondCount;}  }
class C{  private boolean canUseThisAd(NativeAd adNative){  if (adNative != null) {    NativeAd.Image logoImage=null;    CharSequence header=null, body=null;    if (adNative instanceof NativeContentAd) {      NativeContentAd ad=(NativeContentAd)adNative;      logoImage=ad.getLogo();      header=ad.getHeadline();      body=ad.getBody();    } else     if (adNative instanceof NativeAppInstallAd) {      NativeAppInstallAd ad=(NativeAppInstallAd)adNative;      logoImage=ad.getIcon();      header=ad.getHeadline();      body=ad.getBody();    }    if (!TextUtils.isEmpty(header) && !TextUtils.isEmpty(body)) {      return true;    }  }  return false;}  }
class C{  public long optLong(String key){  return this.optLong(key,0);}  }
class C{  @Override public String toString(){  return "FetchStatsResponse from " + this.getRecipient() + " stats.length="+ stats.length;}  }
class C{  @IgniteIgnore("https://issues.apache.org/jira/browse/IGNITE-1585") public void testGoogleComputeEngine() throws Exception {  testCloudProvider("google-compute-engine");}  }
class C{  @Deprecated public static ResourceList<TaskEntity> convertBackEndToMiddleEnd(ResourceList<TaskService.State> taskServiceStates){  ResourceList<TaskEntity> taskEntities=new ResourceList<>();  taskEntities.setItems(taskServiceStates.getItems().stream().map(null).collect(Collectors.toList()));  taskEntities.setNextPageLink(taskServiceStates.getNextPageLink());  taskEntities.setPreviousPageLink(taskServiceStates.getPreviousPageLink());  return taskEntities;}  }
class C{  static public Object box(Object x){  return x;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.163 -0500",hash_original_method="4E093FA1B6FCF5593272CE0DEA00D69B",hash_generated_method="5F913E2868844DFC02712ACD72D7EDA3") private void doAcquireSharedInterruptibly(int arg) throws InterruptedException {  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  protected void sequence_ActionArguments(ISerializationContext context,ActionArguments semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static Method request(){  return create(REQUEST);}  }
class C{  private boolean isIndexStale(Directory dir) throws IOException {  for (  Map<String,Object> file : filesToDownload) {    if (slowFileExists(dir,(String)file.get(NAME)) && dir.fileLength((String)file.get(NAME)) != (Long)file.get(SIZE)) {      LOG.warn("File " + file.get(NAME) + " expected to be "+ file.get(SIZE)+ " while it is "+ dir.fileLength((String)file.get(NAME)));      return true;    }  }  return false;}  }
class C{  @Override public void close(){}  }
class C{  public static void writeLabeledHistogram(TObjectDoubleHashMap<String> map,String keyCol,String valCol,String file) throws IOException {  writeLabeledHistogram(map,keyCol,valCol,file,false);}  }
class C{  public static <T extends Object & net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<? super T>>T min(Collection<? extends T> collection){  Iterator<? extends T> it=collection.iterator();  T min=it.next();  while (it.hasNext()) {    T next=it.next();    if (min.compareTo(next) > 0) {      min=next;    }  }  return min;}  }
class C{  @Override public void draw(Canvas canvas,int x,int y,int width,int height,Paint paint){  paint.setAntiAlias(mRenderer.isAntialiasing());  paint.setStyle(Style.FILL);  paint.setTextSize(mRenderer.getLabelsTextSize());  int legendSize=getLegendSize(mRenderer,height / 5,0);  int left=x;  int top=y;  int right=x + width;  int sLength=mDataset.getItemCount();  String[] titles=new String[sLength];  for (int i=0; i < sLength; i++) {    titles[i]=mDataset.getCategory(i);  }  if (mRenderer.isFitLegend()) {    legendSize=drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,true);  }  int bottom=y + height - legendSize;  drawBackground(mRenderer,canvas,x,y,width,height,paint,false,DefaultRenderer.NO_COLOR);  int mRadius=Math.min(Math.abs(right - left),Math.abs(bottom - top));  int radius=(int)(mRadius * 0.35 * mRenderer.getScale());  if (mCenterX == NO_VALUE) {    mCenterX=(left + right) / 2;  }  if (mCenterY == NO_VALUE) {    mCenterY=(bottom + top) / 2;  }  float shortRadius=radius * 0.9f;  float longRadius=radius * 1.1f;  double min=mRenderer.getMinValue();  double max=mRenderer.getMaxValue();  double angleMin=mRenderer.getAngleMin();  double angleMax=mRenderer.getAngleMax();  if (!mRenderer.isMinValueSet() || !mRenderer.isMaxValueSet()) {    int count=mRenderer.getSeriesRendererCount();    for (int i=0; i < count; i++) {      double value=mDataset.getValue(i);      if (!mRenderer.isMinValueSet()) {        min=Math.min(min,value);      }      if (!mRenderer.isMaxValueSet()) {        max=Math.max(max,value);      }    }  }  if (min == max) {    min=min * 0.5;    max=max * 1.5;  }  paint.setColor(mRenderer.getLabelsColor());  double minorTicks=mRenderer.getMinorTicksSpacing();  double majorTicks=mRenderer.getMajorTicksSpacing();  if (minorTicks == MathHelper.NULL_VALUE) {    minorTicks=(max - min) / 30;  }  if (majorTicks == MathHelper.NULL_VALUE) {    majorTicks=(max - min) / 10;  }  drawTicks(canvas,min,max,angleMin,angleMax,mCenterX,mCenterY,longRadius,radius,minorTicks,paint,false);  drawTicks(canvas,min,max,angleMin,angleMax,mCenterX,mCenterY,longRadius,shortRadius,majorTicks,paint,true);  int count=mRenderer.getSeriesRendererCount();  for (int i=0; i < count; i++) {    double angle=getAngleForValue(mDataset.getValue(i),angleMin,angleMax,min,max);    paint.setColor(mRenderer.getSeriesRendererAt(i).getColor());    boolean type=mRenderer.getVisualTypeForIndex(i) == Type.ARROW;    drawNeedle(canvas,angle,mCenterX,mCenterY,shortRadius,type,paint);  }  drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,false);  drawTitle(canvas,x,y,width,paint);}  }
class C{  public TranscoderOutput(){}  }
class C{  public boolean validatePaySchedule(){  MInvoicePaySchedule[] schedule=MInvoicePaySchedule.getInvoicePaySchedule(getCtx(),getC_Invoice_ID(),0,get_TrxName());  log.fine("#" + schedule.length);  if (schedule.length == 0) {    setIsPayScheduleValid(false);    return false;  }  BigDecimal total=Env.ZERO;  for (int i=0; i < schedule.length; i++) {    schedule[i].setParent(this);    BigDecimal due=schedule[i].getDueAmt();    if (due != null)     total=total.add(due);  }  boolean valid=getGrandTotal().compareTo(total) == 0;  setIsPayScheduleValid(valid);  for (int i=0; i < schedule.length; i++) {    if (schedule[i].isValid() != valid) {      schedule[i].setIsValid(valid);      schedule[i].saveEx(get_TrxName());    }  }  return valid;}  }
class C{  public ErrorMessage(ErrorMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetError()) {    this.error=new SyncError(other.error);  }  if (other.isSetType()) {    this.type=other.type;  }}  }
class C{  private final boolean keyLess(long key1,long key2){  if ((key1 < 0) == (key2 < 0)) {    return key1 < key2;  } else {    return key2 < 0;  }}  }
class C{  @Override protected void init(){}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  flushPending();  if (m_tracer != null)   super.fireEscapingEvent(target,data);}  }
class C{  public float computeScale(){  double kmPerInch=0.0254e-3;  double kmPerDeg=Position.EARTH_RADIUS * Math.toRadians(1.0);  return (float)(dotsPerDeg / dotsPerInch * kmPerInch / kmPerDeg);}  }
class C{  public Vertex(Vertex n,int numvert){  mindist=9999999;  next=n;  neighbors=new Hashtable(numvert / 4);}  }
class C{  public static void replaceContent(IFile file,StringBuffer buffer,IProgressMonitor monitor) throws CoreException {  ByteArrayInputStream stream=new ByteArrayInputStream(buffer.toString().getBytes());  if (file.exists()) {    file.setContents(stream,IResource.FORCE,monitor);  } else {    throw new CoreException(new Status(IStatus.ERROR,Activator.PLUGIN_ID,"Exected " + file.getName() + " file has been removed externally"));  }}  }
class C{  public void endElement(String uri,String localName,String qName){  String data=buff.toString().trim();  if (qName.equals(current_tag)) {    buff=new StringBuffer();  }  if (reading_chan)   processChannel(qName,data);  if (reading_item)   processItem(qName,data);  if (reading_image)   processImage(qName,data);  if (reading_input)   processTextInput(qName,data);  if (reading_media_group)   processMediaGroup(qName,data);  if (tagIsEqual(qName,CHANNEL_TAG)) {    reading_chan=false;    chan.setSyndicationModule(sy);  }  if (tagIsEqual(qName,ITEM_TAG)) {    if (reading_media_group) {      reading_media_group=false;      itm.setMediaGroup(mg);    }    reading_item=false;    chan.addItem(itm);    if (itm.getMediaGroup() == null || itm.getMediaGroup().getThumbURL() == null) {      String desc=itm.getDescription();      if (desc != null) {        int idx1=0;        idx1=desc.indexOf("src=\"",idx1 + 1);        while (idx1 != -1) {          int idx2=desc.indexOf("\"",idx1 + 6);          if (idx2 != -1) {            String imgStr=desc.substring(idx1 + 5,idx2);            if (imgStr.endsWith(".jpg")) {              if (itm.getMediaGroup() == null)               itm.setMediaGroup(new RSSMediaGroup());              itm.getMediaGroup().setThumbURL(imgStr);              break;            }          }          idx1=desc.indexOf("src=\"",idx1 + 1);        }      }    }  }  if (tagIsEqual(qName,IMAGE_TAG)) {    reading_image=false;    chan.setRSSImage(img);  }  if (tagIsEqual(qName,MEDIA_GROUP_TAG)) {    reading_media_group=false;    if (itm != null)     itm.setMediaGroup(mg);  }  if (tagIsEqual(qName,SEQ_TAG)) {    reading_seq=false;    chan.addRSSSequence(seq);  }  if (tagIsEqual(qName,TEXTINPUT_TAG)) {    reading_input=false;    chan.setRSSTextInput(input);  }}  }
class C{  public static final void clear(final double[][] v1){  for (  double[] row : v1) {    Arrays.fill(row,0.0);  }}  }
class C{  @Deprecated public void expungeLinkedNotebook(String guid,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"expungeLinkedNotebook",mAuthenticationToken);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MProductBOM[");  sb.append(get_ID()).append(",Line=").append(getLine()).append(",Type=").append(getBOMType()).append(",Qty=").append(getBOMQty());  if (m_product == null)   sb.append(",M_Product_ID=").append(getM_ProductBOM_ID()); else   sb.append(",").append(m_product);  sb.append("]");  return sb.toString();}  }
class C{  public Set<T> keySet(){  return vars.keySet();}  }
class C{  private static void checkLocator(int locatorFrom,int locatorTo) throws OperationException {  if (locatorFrom == 0 || locatorTo == 0) {    throw new OperationException("No warehouse locators defined");  }  if (locatorFrom == locatorTo) {    throw new OperationException("Organisation from cannot be equal to Organisation To!");  }}  }
class C{  public static PeriodType yearWeekDay(){  PeriodType type=cYWD;  if (type == null) {    type=new PeriodType("YearWeekDay",new DurationFieldType[]{DurationFieldType.years(),DurationFieldType.weeks(),DurationFieldType.days()},new int[]{0,-1,1,2,-1,-1,-1,-1});    cYWD=type;  }  return type;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getFeedSourceDao() : null;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  @Override public void printStackTrace(PrintStream ps){  super.printStackTrace(ps);  if (getOriginalThrowable() != null) {    getOriginalThrowable().printStackTrace(ps);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.FUNCTION__ACTION:    setAction((Expression)newValue);  return;case GamlPackage.FUNCTION__PARAMETERS:setParameters((Parameters)newValue);return;case GamlPackage.FUNCTION__ARGS:setArgs((ExpressionList)newValue);return;case GamlPackage.FUNCTION__TYPE:setType((TypeInfo)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected void fireValueChanged(TreeSelectionEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeSelectionListener.class) {      ((TreeSelectionListener)listeners[i + 1]).valueChanged(e);    }  }}  }
class C{  public Bag removeObjectsAtLocation(Int3D location){  return removeObjectsAtLocation(location.x,location.y,location.z);}  }
class C{  public static InputStream downloadObject(Storage storage,String bucketName,String objectName,String base64CseKey,String base64CseKeyHash) throws Exception {  Storage.Objects.Get getObject=storage.objects().get(bucketName,objectName);  final HttpHeaders httpHeaders=new HttpHeaders();  httpHeaders.set("x-goog-encryption-algorithm","AES256");  httpHeaders.set("x-goog-encryption-key",base64CseKey);  httpHeaders.set("x-goog-encryption-key-sha256",base64CseKeyHash);  getObject.setRequestHeaders(httpHeaders);  try {    return getObject.executeMediaAsInputStream();  } catch (  GoogleJsonResponseException e) {    System.out.println("Error downloading: " + e.getContent());    System.exit(1);    return null;  }}  }
class C{  public static HashMap<String,Double[]> calcTravelTimeAndDistance(List<Trip> trips,String pathToValueFile){  HashMap<String,Double> timeMode=new HashMap<>();  HashMap<String,Double> distMode=new HashMap<>();  log.info("Analyzing trips...");  for (  Trip tempTrip : trips) {    if (tempTrip.endLinkId != null) {      String mode=tempTrip.mode;      double travelTime=tempTrip.duration;      double travelDistance=tempTrip.distance;      if (timeMode.containsKey(mode)) {        travelTime=timeMode.get(mode) + travelTime;        travelDistance=distMode.get(mode) + travelDistance;      }      timeMode.put(mode,travelTime);      distMode.put(mode,travelDistance);    }  }  log.info("Travel times per mode:");  for (  String mode : timeMode.keySet()) {    log.info("Mode " + mode + ": "+ String.valueOf(timeMode.get(mode))+ " min");  }  log.info("Travel distances per mode:");  for (  String mode : distMode.keySet()) {    log.info("Mode " + mode + ": "+ String.valueOf(distMode.get(mode))+ " m");  }  try {    final BufferedWriter out=IOUtils.getBufferedWriter(pathToValueFile);    out.write("Travel times per mode:");    out.newLine();    for (    String mode : timeMode.keySet()) {      out.write(" - Mode " + mode + ": "+ String.valueOf(timeMode.get(mode))+ " min");      out.newLine();    }    out.write("Travel distances per mode:");    out.newLine();    for (    String mode : distMode.keySet()) {      out.write(" - Mode " + mode + ": "+ String.valueOf(distMode.get(mode))+ " m");      out.newLine();    }    out.close();  } catch (  IOException e) {    log.info("IOException. Could not write topdad-analysis summary to file.");  }  log.info("Analyzing trips... done.");  HashMap<String,Double[]> result=new HashMap<>();  for (  String mode : distMode.keySet()) {    Double[] val={timeMode.get(mode),distMode.get(mode)};    result.put(mode,val);  }  return result;}  }
class C{  private static Boolean parseBoolean(final String value){  return "yes".equals(value);}  }
class C{  public void elementFilled(TimedElement e,float t){}  }
class C{  public static int convertToDip(DisplayMetrics displayMetrics,int sizeInPixels){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,sizeInPixels,displayMetrics);}  }
class C{  protected int drawSelectedText(Graphics g,int x,int y,int p0,int p1) throws BadLocationException {  g.setColor(selected);  Document doc=getDocument();  Segment segment=SegmentCache.getSharedSegment();  doc.getText(p0,p1 - p0,segment);  int ret=Utilities.drawTabbedText(this,segment,x,y,g,this,p0);  SegmentCache.releaseSharedSegment(segment);  return ret;}  }
class C{  public void test_getInstanceLjava_lang_String02(){  try {    SSLContext.getInstance(null);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (protocol is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SSLContext.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException was not thrown as expected for provider: ".concat(invalidValues[i]));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  private void initialize(){  model=new Model();  model.setListener(this);  this.setSize(850,700);  this.setContentPane(getPanel());  this.setTitle("Algorithms in a Nutshell: Nearest Neighbor Example");}  }
class C{  public NumericNode numberNode(int v){  return IntNode.valueOf(v);}  }
class C{  private void installEditorBorderListener(JComponent editor){  if (!UIManager.getBoolean("Spinner.editorBorderPainted")) {    if (editor instanceof JPanel && editor.getBorder() == null && editor.getComponentCount() > 0) {      editor=(JComponent)editor.getComponent(0);    }    if (editor != null && (editor.getBorder() == null || editor.getBorder() instanceof UIResource)) {      editor.addPropertyChangeListener(getHandler());    }  }}  }
class C{  private void modifySelectedLine(){  if (linesList.getSelectedIndices().length > 1) {    return;  }  AxisParallelLineConfiguration line=linesList.getSelectedValue();  if (line != null) {    if (modifyLineDialog == null) {      modifyLineDialog=new EditParallelLineDialog();    }    modifyLineDialog.setLine(line,true);    modifyLineDialog.showDialog();  }}  }
class C{  public CellRendererPane(){  super();  setLayout(null);  setVisible(false);}  }
class C{  public static List<org.oscm.internal.vo.VOEventDefinition> convertToUpVOEventDefinition(List<org.oscm.vo.VOEventDefinition> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOEventDefinition> newVO=new ArrayList<org.oscm.internal.vo.VOEventDefinition>();  for (  org.oscm.vo.VOEventDefinition tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  private void validateVcenterCredentials(VcenterParam param,Vcenter vcenter){  if (StringUtils.isBlank(param.getPassword()) && vcenter != null) {    param.setPassword(StringUtils.trimToNull(vcenter.getPassword()));  }  if (StringUtils.isBlank(param.getUserName()) && vcenter != null) {    param.setUserName(StringUtils.trimToNull(vcenter.getUsername()));  }  ArgValidator.checkFieldNotNull(param.getUserName(),"username");  ArgValidator.checkFieldNotNull(param.getPassword(),"password");}  }
class C{  @Override public void onQuickSearch(SearchCustomActionBar searchview,CharSequence constraint){}  }
class C{  protected void handleActivePassiveMonitoringChanges() throws Exception {  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  _logger.debug("SMIS_PROVIDERS_CACHE :{}",SMIS_PROVIDERS_CACHE);  _logger.debug("ACTIVE_SMIS_PROVIDERS_CACHE :{}",ACTIVE_SMIS_PROVIDERS_CACHE);  Set<String> allActiveSMISProvidersFromDB=getAllActiveSMISProviderFromDB();  Set<String> activeProvidersManagedByThisNodeFromDB=Sets.intersection(SMIS_PROVIDERS_CACHE.keySet(),allActiveSMISProvidersFromDB);  _logger.debug("activeProvidersManagedByThisNodeFromDB :{}",activeProvidersManagedByThisNodeFromDB);  Set<String> activeProvidersChangeSet=new HashSet<String>();  Sets.difference(activeProvidersManagedByThisNodeFromDB,ACTIVE_SMIS_PROVIDERS_CACHE).copyInto(activeProvidersChangeSet);  _logger.debug("activeProvidersChangeSet :{}",activeProvidersChangeSet);  startSubscriptionForMonitoring(activeProvidersChangeSet);  Set<String> passiveProvidersChangeSet=new HashSet<String>();  Sets.difference(ACTIVE_SMIS_PROVIDERS_CACHE,activeProvidersManagedByThisNodeFromDB).copyInto(passiveProvidersChangeSet);  _logger.debug("passiveProvidersChangeSet :{}",passiveProvidersChangeSet);  startUnsubscriptionForMonitoring(passiveProvidersChangeSet);  _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  public static String[] trim(String[] array){  int from=0;  int to=0;  for (int i=0; i < array.length; i++) {    from=i;    if (array[i].length() != 0)     break;  }  for (int i=array.length - 1; i >= 0; i--) {    to=i;    if (array[i].length() != 0)     break;  }  int newLen=to - from + 1;  if (newLen < array.length) {    String[] rtn=new String[newLen];    System.arraycopy(array,from,rtn,0,newLen);    return rtn;  }  return array;}  }
class C{  public PowerLawGrowthModel(String name,Parameter N0Parameter,Parameter powerParameter,Type units){  super(name);  powerLawGrowth=new PowerLawGrowth(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.MAX_VALUE,0.0,1));  this.powerParameter=powerParameter;  addVariable(powerParameter);  powerParameter.addBounds(new Parameter.DefaultBounds(Double.MAX_VALUE,1,1));  setUnits(units);}  }
class C{  public void nodeAdded(SessionEvent event){  getSessionSupport().fireSessionEvent(event);  setSessionChanged(true);}  }
class C{  public NamedThreadFactory(final String threadPrefix,final ThreadGroup threadGroup){  group=null == threadGroup ? COAP_THREAD_GROUP : threadGroup;  prefix=threadPrefix;}  }
class C{  public ExistsRequest types(String... types){  this.types=types;  return this;}  }
class C{  public void removeObserveRelation(ObserveRelation relation){  relations.remove(relation);}  }
class C{  public static double addErrs(double N,double e,float CF){  if (CF > 0.5) {    System.err.println("WARNING: confidence value for pruning " + " too high. Error estimate not modified.");    return 0;  }  if (e < 1) {    double base=N * (1 - Math.pow(CF,1 / N));    if (e == 0) {      return base;    }    return base + e * (addErrs(N,1,CF) - base);  }  if (e + 0.5 >= N) {    return Math.max(N - e,0);  }  double z=Statistics.normalInverse(1 - CF);  double f=(e + 0.5) / N;  double r=(f + (z * z) / (2 * N) + z * Math.sqrt((f / N) - (f * f / N) + (z * z / (4 * N * N)))) / (1 + (z * z) / N);  return (r * N) - e;}  }
class C{  private static float strengthOfTerritory(final GameData data,final Territory thisTerr,final PlayerID player,final boolean attacking,final boolean sea,final boolean tFirst,final boolean allied){  final List<Unit> theUnits=new ArrayList<>();  if (allied) {    theUnits.addAll(thisTerr.getUnits().getMatches(Matches.alliedUnit(player,data)));  } else {    theUnits.addAll(thisTerr.getUnits().getMatches(Matches.unitIsOwnedBy(player)));  }  final float theStrength=strength(theUnits,attacking,sea,tFirst);  return theStrength;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:41.346 -0500",hash_original_method="19E83C4C00CF513D7C219A8F2CE4B9FA",hash_generated_method="31254B198F68157457014067B2589821") public EventObject(Object source){  if (source == null) {    throw new IllegalArgumentException();  }  this.source=source;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public void handleResponse(Resource[] resources,String request){  workspaceAgent.openPart(this,PartStackType.INFORMATION);  workspaceAgent.setActivePart(this);  view.showResults(resources,request);}  }
class C{  public em addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  protected void status(final String[] args) throws Exception {  workingDir=(File)getStopOptions(args).get(DIR);  System.out.println(getStatus());  System.exit(0);}  }
class C{  public BluetoothDevice findDeviceByMac(String mac){  if (!isAvailable() || !isEnabled()) {    throw new RuntimeException("Bluetooth is not avaliable!");  }  return mBluetoothAdapter.getRemoteDevice(mac);}  }
class C{  public CompositeSlotImpl(){  super();}  }
class C{  public void dispose(){synchronized (this.lock) {    if (page != null) {      page.dispose();    }    previewFrame.dispose();    if (job != null) {      job.end();    }  }}  }
class C{  @Inline public ObjectReference traceObject(TransitiveClosure trace,ObjectReference object,int allocator){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(defrag.determined(true));  ObjectReference rtn=object;  if (isDefragSource(object))   rtn=traceObjectWithOpportunisticCopy(trace,object,allocator,false); else   traceObjectWithoutMoving(trace,object);  if (VM.VERIFY_ASSERTIONS) {    VM.assertions._assert(!rtn.isNull());    VM.assertions._assert(defrag.spaceExhausted() || !isDefragSource(rtn) || (ObjectHeader.isPinnedObject(rtn)));  }  return rtn;}  }
class C{  protected void stopTimer(){  if (timer != null) {    timer.stop();  }}  }
class C{  public static View twoButtonsSeparatedByFiller(int position,Context context,int desiredHeight){  if (desiredHeight < 90) {    throw new IllegalArgumentException("need at least 90 pixels of height " + "to create the two buttons and leave 10 pixels for the filler");  }  final LinearLayout ll=new LinearLayout(context);  ll.setOrientation(LinearLayout.VERTICAL);  final LinearLayout.LayoutParams buttonLp=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,50);  final Button topButton=new Button(context);  topButton.setLayoutParams(buttonLp);  topButton.setText("top (position " + position + ")");  ll.addView(topButton);  final TextView middleFiller=new TextView(context);  middleFiller.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,desiredHeight - 100));  middleFiller.setText("filler");  ll.addView(middleFiller);  final Button bottomButton=new Button(context);  bottomButton.setLayoutParams(buttonLp);  bottomButton.setText("bottom (position " + position + ")");  ll.addView(bottomButton);  ll.setTag("twoButtons");  return ll;}  }
class C{  public int length(){  return this.getLattice().getShortestDistance();}  }
class C{  public static ByteBuffer convertTsvToByteBuffer(String starsFileName){  return convertTsvToByteBuffer(starsFileName,DEFAULT_RADIUS);}  }
class C{  public void startScrolling(){  go=true;  thread=new Thread(this);  thread.start();}  }
class C{  protected void sequence_N4MemberAnnotationList(ISerializationContext context,N4MemberAnnotationList semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isLoggedIn(){  return loggedIn;}  }
class C{  public OptionalMethod(Class<?> returnType,String methodName,Class... methodParams){  this.returnType=returnType;  this.methodName=methodName;  this.methodParams=methodParams;}  }
class C{  Section(String ns,Section parent){  this.ns=ns;  this.parent=parent;}  }
class C{  @Override public void validate(FacesContext context,UIComponent component,Object obj){  FacesMessage fmsg;  Locale locale=context.getViewRoot().getLocale();  if (obj == null) {    return;  }  if (!(obj instanceof String)) {    fmsg=MojarraMessageFactory.getMessage(locale,"com.sun.faces.ext.validator.creditcardValidator.NOT_STRING",(Object)null);    throw new ValidatorException(fmsg);  }  String input=(String)obj;  if (!input.matches("^[0-9\\ \\-]*$")) {    fmsg=MojarraMessageFactory.getMessage(locale,"com.sun.faces.ext.validator.creditcardValidator.INVALID_CHARS",(Object)null);    throw new ValidatorException(fmsg);  }  if (!luhnCheck(stripNonDigit(input))) {    fmsg=MojarraMessageFactory.getMessage(locale,"com.sun.faces.ext.validator.creditcardValidator.INVALID_NUMBER",(Object)null);    throw new ValidatorException(fmsg);  }}  }
class C{  public Command show(int top,int bottom,int left,int right,boolean includeTitle){  return show(top,bottom,left,right,includeTitle,true);}  }
class C{  @SuppressWarnings("unchecked") private void createTemporaryTargetIndexes(){  createTemporaryIndexes(true);}  }
class C{  public boolean isImmediateAlertOn(final BluetoothDevice device){  final ProximityManager manager=(ProximityManager)getBleManager(device);  return manager.isAlertEnabled();}  }
class C{  public RadiusPickSupport(double maxDistance){  super(maxDistance);}  }
class C{  public View2D showInLastWindow(final View view){  Preconditions.checkNotNull(view,"Error: View argument can not be null");  final ViewContainer container=view.getContainer();  if (container instanceof Module) {    final Module module=(Module)container;    return show(CWindowManager.instance().getLastWindow(),view,new CModuleContainer(container.getDatabase().getNative(),module.getNative()));  } else {    final Project project=(Project)container;    return show(CWindowManager.instance().getLastWindow(),view,new CProjectContainer(container.getDatabase().getNative(),project.getNative()));  }}  }
class C{  public static Vector2 normalize(Vector2 a){  return Vector2.scale(a,(1.f / a.length()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:42.930 -0500",hash_original_method="4D880652E7EC26E2F7EA6DDC90C16CDC",hash_generated_method="9BEBEFE6425AA3B8A8896CBA9E77B889") public static boolean isValidIPv6(String address){  if (address.length() == 0) {    return false;  }  int octet;  int octets=0;  String temp=address + ":";  boolean doubleColonFound=false;  int pos;  int start=0;  while (start < temp.length() && (pos=temp.indexOf(':',start)) >= start) {    if (octets == 8) {      return false;    }    if (start != pos) {      String value=temp.substring(start,pos);      if (pos == (temp.length() - 1) && value.indexOf('.') > 0) {        if (!isValidIPv4(value)) {          return false;        }        octets++;      } else {        try {          octet=Integer.parseInt(temp.substring(start,pos),16);        } catch (        NumberFormatException ex) {          return false;        }        if (octet < 0 || octet > 0xffff) {          return false;        }      }    } else {      if (pos != 1 && pos != temp.length() - 1 && doubleColonFound) {        return false;      }      doubleColonFound=true;    }    start=pos + 1;    octets++;  }  return octets == 8 || doubleColonFound;}  }
class C{  public boolean isPingPongSupported(){  return clientVersion >= params.getProtocolVersionNum(NetworkParameters.ProtocolVersion.PONG);}  }
class C{  @LogMessageDoc(level="ERROR",message="Error {error type} {error code} from {switch} " + "in state {state}",explanation="The switch responded with an unexpected error" + "to an OpenFlow message from the controller",recommendation="This could indicate improper network operation. " + "If the problem persists restarting the switch and " + "controller may help.") protected void logError(OFErrorMsg error){  log.error("{} from switch {} in state {}",new Object[]{error.toString(),getConnectionInfoString(),this.toString()});}  }
class C{  public RemoteExperiment() throws Exception {  this(new Experiment());}  }
class C{  @Override public DummyProjectBuilder withType(String projectTypeId){  dummyProject.setProjectTypeId(projectTypeId);  return this;}  }
class C{  public ServerProxyConnectionAborted3(){  requestFileName="getstate.query";}  }
class C{  protected void drawSideOutline(DrawContext dc,ShapeData shapeData){  this.prepareToDrawOutline(dc,this.getActiveSideAttributes(),defaultSideAttributes);  GL2 gl=dc.getGL().getGL2();  for (  ExtrudedBoundaryInfo boundary : shapeData) {    if (!dc.isPickingMode() && this.mustApplyLighting(dc,this.getActiveSideAttributes()))     gl.glNormalPointer(GL.GL_FLOAT,0,boundary.sideNormalBuffer.rewind());    IntBuffer indices=boundary.sideEdgeIndices;    indices.rewind();    if (this.isEnableCap() && this.getActiveCapAttributes().isDrawOutline()) {      indices=indices.slice();      indices.position(2 * boundary.faceCount);    }    gl.glVertexPointer(3,GL.GL_FLOAT,0,boundary.sideVertexBuffer.rewind());    gl.glDrawElements(GL.GL_LINES,indices.remaining(),GL.GL_UNSIGNED_INT,indices);  }}  }
class C{  public void trackPageView(String argPageURL,String argPageTitle,String argHostName){  if (argPageURL == null)   throw new IllegalArgumentException("Page URL cannot be null, Google will not track the data.");  AnalyticsRequestData data=new AnalyticsRequestData();  data.setHostName(argHostName);  data.setPageTitle(argPageTitle);  data.setPageURL(argPageURL);  makeCustomRequest(data);}  }
class C{  public InMemoryStreamingMessageQueueProducer(final String queueId,final ConcurrentLinkedQueue<StreamingDataMessage> queue,final StreamingMessageQueueWaitStrategy waitStrategy){  this.queueId=queueId;  this.queue=queue;  this.waitStrategy=waitStrategy;}  }
class C{  protected void stopBridgeServer(Cache cache){  CacheServer server=(CacheServer)cache.getCacheServers().iterator().next();  server.stop();  assertFalse(server.isRunning());}  }
class C{  public boolean failedWithUnexpectedEOF(){  if (getErrorCollector().hasErrors()) {    Message last=(Message)getErrorCollector().getLastError();    Throwable cause=null;    if (last instanceof SyntaxErrorMessage) {      cause=((SyntaxErrorMessage)last).getCause().getCause();    }    if (cause != null) {      if (cause instanceof NoViableAltException) {        return isEofToken(((NoViableAltException)cause).token);      } else       if (cause instanceof NoViableAltForCharException) {        char badChar=((NoViableAltForCharException)cause).foundChar;        return badChar == CharScanner.EOF_CHAR;      } else       if (cause instanceof MismatchedCharException) {        char badChar=(char)((MismatchedCharException)cause).foundChar;        return badChar == CharScanner.EOF_CHAR;      } else       if (cause instanceof MismatchedTokenException) {        return isEofToken(((MismatchedTokenException)cause).token);      }    }  }  return false;}  }
class C{  @SuppressWarnings("unchecked") @Override public Integer doInBackground(Iterator<String>... contactsIter){  return modifyAllContacts(contactsIter[0]);}  }
class C{  public static Map<String,Object> createImage(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=createImageMethod(dctx,context);  return result;}  }
class C{  @Override public MatchResult match(String str){  String input=str.trim();  if (input.equalsIgnoreCase(string)) {    return new MatchResult(0,string.length());  } else {    return new MatchResult(false);  }}  }
class C{  public JCheckBox(String text){  this(text,null,false);}  }
class C{  public void testSelectiveEventDispatchingUponIncomingRequests() throws Exception {  stunStack.addRequestListener(serverAddress,requestCollector);  PlainRequestCollector requestCollector2=new PlainRequestCollector();  stunStack.addRequestListener(serverAddress2,requestCollector2);  stunStack.sendRequest(bindingRequest,serverAddress2,clientAddress,responseCollector);  requestCollector.waitForRequest();  requestCollector2.waitForRequest();  assertTrue("A MessageEvent was received by a non-interested selective listener",requestCollector.receivedRequests.size() == 0);  assertTrue("No MessageEvents have been dispatched for a selective listener",requestCollector2.receivedRequests.size() == 1);}  }
class C{  private static void assertCompoundSegments(IndexReader reader,boolean compound){  assertNotNull("Null leaves",reader.leaves());  assertTrue("no leaves",0 < reader.leaves().size());  for (  AtomicReaderContext atomic : reader.leaves()) {    assertTrue("not a segment reader: " + atomic.reader().toString(),atomic.reader() instanceof SegmentReader);    assertEquals("Compound status incorrect for: " + atomic.reader().toString(),compound,((SegmentReader)atomic.reader()).getSegmentInfo().info.getUseCompoundFile());  }}  }
class C{  public static final void sort(Object[] a,int[] b,int begin,int end,Comparator cmp){  mergesort(a,b,begin,end - 1,cmp);}  }
class C{  @GwtIncompatible @SuppressWarnings("unchecked") public static <T>T[] newArray(Class<T> type,int length){  return (T[])Array.newInstance(type,length);}  }
class C{  private static void printWebProperties(Webproperties webproperties){  System.out.println("\n----- Webproperties Collection -----\n");  for (  Webproperty webproperty : webproperties.getItems()) {    System.out.println("Account ID: " + webproperty.getAccountId());    System.out.println("Web Property ID: " + webproperty.getId());    System.out.println("Web Property Name: " + webproperty.getName());    System.out.println("Web Property Internal Id: " + webproperty.getInternalWebPropertyId());    System.out.println("Web Property Website URL: " + webproperty.getWebsiteUrl());    System.out.println("Web Property Created: " + webproperty.getCreated());    System.out.println("Web Property Updated: " + webproperty.getUpdated());  }}  }
class C{  public XCalDocument(File file) throws SAXException, IOException {  this(XmlUtils.toDocument(file));}  }
class C{  public void insertSegments(List<ILineSegment> list){  Node<ILineSegment> node=list.head();  while (node != null) {    state.insert(node.value());    node=node.next();  }}  }
class C{  public Attachment deepCopy(){  return new Attachment(this);}  }
class C{  public static double pdf(double x,double mu,double sigma,double xi){  x=(x - mu) / sigma;  if (x < 0 || (xi < 0 && x > -1. / xi)) {    return 0.;  }  return ((xi == 0) ? 1. : Math.pow(1 + xi * x,-1 / xi - 1)) / sigma;}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void checkTouchExplorationSupportInner(PreferenceGroup category){  final CheckBoxPreference prefTouchExploration=(CheckBoxPreference)findPreferenceByResId(R.string.pref_explore_by_touch_reflect_key);  if (prefTouchExploration == null) {    return;  }  final CheckBoxPreference prefSingleTap=(CheckBoxPreference)findPreferenceByResId(R.string.pref_single_tap_key);  if ((prefSingleTap != null) && (Build.VERSION.SDK_INT < ProcessorFocusAndSingleTap.MIN_API_LEVEL_SINGLE_TAP)) {    category.removePreference(prefSingleTap);  }  prefTouchExploration.setPersistent(false);  updateTouchExplorationState();  prefTouchExploration.setOnPreferenceChangeListener(mTouchExplorationChangeListener);  final Preference shortcutsScreen=findPreferenceByResId(R.string.pref_category_manage_gestures_key);  final Intent shortcutsIntent=new Intent(this,TalkBackShortcutPreferencesActivity.class);  shortcutsScreen.setIntent(shortcutsIntent);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.940 -0500",hash_original_method="CE809ED990CA285407261837C22B5422",hash_generated_method="1AADAE22D2753B0B40FBB90B996F33ED") public ServerSocket createServerSocket(int port,int backlog,InetAddress bindAddr) throws IOException {  return new ServerSocket(port,backlog,bindAddr);}  }
class C{  public Category(){  super(KEY);}  }
class C{  public static int countApplets(){  return appletPanels.size();}  }
class C{  public boolean applyOptions() throws IOException {  if (minimizeToTray.isSelected()) {    ApplicationSettings.MINIMIZE_TO_TRAY.setValue(true);  } else {    ApplicationSettings.MINIMIZE_TO_TRAY.setValue(false);  }  ApplicationSettings.SHOW_HIDE_EXIT_DIALOG.setValue(_checkBoxShowHideExitDialog.isSelected());  return false;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof MLookup) {    MLookup ll=(MLookup)obj;    if (ll.m_info.Column_ID == this.m_info.Column_ID)     return true;  }  return false;}  }
class C{  public boolean isEnabledForCurrentUser(){  if (this.isSystem)   return true;  if (this.connection == null)   return false;  return mEnabledListenersForCurrentUser.contains(this.component);}  }
