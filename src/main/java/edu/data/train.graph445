class C{  protected boolean isInstant(){  return false;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int n=s.readInt();  values=new Vector<>(n);  while (--n >= 0) {    values.addElement(s.readObject());  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static CacheSpan createCacheEntry(File file){  Matcher matcher=CACHE_FILE_PATTERN_V2.matcher(file.getName());  if (!matcher.matches()) {    return null;  }  String key=Util.unescapeFileName(matcher.group(1));  return key == null ? null : createCacheEntry(key,Long.parseLong(matcher.group(2)),Long.parseLong(matcher.group(4)),file);}  }
class C{  public Pagination evaluate(int defaultLimit,int maxLimit){  if (pageData.containsKey(PaginationKey.size) || pageData.containsKey(PaginationKey.number)) {    if (pageData.containsKey(PaginationKey.limit) || pageData.containsKey(PaginationKey.offset)) {      throw new InvalidValueException("Invalid usage of pagination parameters.");    }    limit=pageData.containsKey(PaginationKey.size) ? pageData.get(PaginationKey.size) : defaultLimit;    if (limit > maxLimit) {      throw new InvalidValueException("page[size] value must be less than or equal to " + maxLimit);    } else     if (limit < 0) {      throw new InvalidValueException("page[size] must contain a positive value.");    }    int pageNumber=pageData.containsKey(PaginationKey.number) ? pageData.get(PaginationKey.number) : 1;    if (pageNumber < 1) {      throw new InvalidValueException("page[number] must contain a positive value.");    }    offset=pageNumber > 0 ? (pageNumber - 1) * limit : 0;  } else   if (pageData.containsKey(PaginationKey.limit) || pageData.containsKey(PaginationKey.offset)) {    limit=pageData.containsKey(PaginationKey.limit) ? pageData.get(PaginationKey.limit) : defaultLimit;    if (limit > maxLimit) {      throw new InvalidValueException("page[limit] value must be less than or equal to " + maxLimit);    }    offset=pageData.containsKey(PaginationKey.offset) ? pageData.get(PaginationKey.offset) : 0;    if (limit < 0 || offset < 0) {      throw new InvalidValueException("page[offset] and page[limit] must contain positive values.");    }  } else {    limit=defaultLimit;    offset=0;  }  generateTotals=pageData.containsKey(PaginationKey.totals);  return this;}  }
class C{  public boolean isChatWarnSF() throws RcsGenericException {  try {    return mIConfig.isChatWarnSF();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public void stopMonitoring(){synchronized (stopped) {    if (this.monitoringThread != null) {      this.monitoringThread.interrupt();    }    stopped.set(Boolean.TRUE);  }}  }
class C{  static void accumMultiSeg(int counts[],SortedSetDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  final int segCounts[];  if (map == null) {    segCounts=counts;  } else {    segCounts=new int[1 + (int)si.getValueCount()];  }  int doc;  while ((doc=disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {    if (si.advanceExact(doc)) {      int term=(int)si.nextOrd();      do {        segCounts[1 + term]++;      } while ((term=(int)si.nextOrd()) >= 0);    } else {      counts[0]++;    }  }  if (map != null) {    migrateGlobal(counts,segCounts,subIndex,map);  }}  }
class C{  public X509CertInfo(){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void addInstanceInfo(Instance instance){  m_EuclideanDistance.updateRanges(instance);}  }
class C{  public static int count(String source,char character){  int result=0;  for (int i=0; i < source.length(); i++) {    if (source.charAt(i) == character) {      result++;    }  }  return result;}  }
class C{  protected void trace(String message,Object... args){  if (logger != null && logger.isTraceEnabled()) {    if (args.length > 0) {      logger.trace(String.format(message,args));    } else {      logger.trace(message);    }  }}  }
class C{  public void initializeParentInheritance(ClassDescriptor parentDescriptor,ClassDescriptor childDescriptor,AbstractSession session) throws DescriptorException {  ClassDescriptor clonedParentDescriptor=(ClassDescriptor)parentDescriptor.clone();  if (clonedParentDescriptor.getInheritancePolicy().isChildDescriptor()) {    ClassDescriptor parentToParentDescriptor=session.getDescriptor(clonedParentDescriptor.getJavaClass());    initializeParentInheritance(parentToParentDescriptor,parentDescriptor,session);  }  initializeReferenceDescriptor(clonedParentDescriptor,session);  Vector children=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance(1);  children.addElement(childDescriptor);  clonedParentDescriptor.getInheritancePolicy().setChildDescriptors(children);  clonedParentDescriptor.preInitialize(session);  clonedParentDescriptor.initialize(session);  translateFields(clonedParentDescriptor,session);}  }
class C{  @Override public Double zincrby(final byte[] key,final double score,final byte[] member){  checkIsInMultiOrPipeline();  client.zincrby(key,score,member);  String newscore=client.getBulkReply();  return Double.valueOf(newscore);}  }
class C{  protected void addDomainIDPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_DomainElement_domainID_feature"),getString("_UI_PropertyDescriptor_description","_UI_DomainElement_domainID_feature","_UI_DomainElement_type"),BasePackage.Literals.DOMAIN_ELEMENT__DOMAIN_ID,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  protected synchronized void loadValue(String sValue){  value=encode(sValue);}  }
class C{  public void run(String classname,String[] args) throws Throwable {  Class c=loadClass(classname);  try {    c.getDeclaredMethod("main",new Class[]{String[].class}).invoke(null,new Object[]{args});  } catch (  java.lang.reflect.InvocationTargetException e) {    throw e.getTargetException();  }}  }
class C{  @Override public void handlePatch(Operation patch){  State currentState=getState(patch);  State patchState=patch.getBody(State.class);  URI referer=patch.getReferer();  try {    validateStatePatch(currentState,patchState,referer);    applyPatch(currentState,patchState);    validateState(currentState);    patch.complete();switch (currentState.taskInfo.stage) {case CREATED:      break;case STARTED:    handleStartedStage(currentState);  break;case FAILED:case FINISHED:case CANCELLED:break;default :throw new IllegalStateException(String.format("Invalid stage %s",currentState.taskInfo.stage));}} catch (Throwable e) {ServiceUtils.logSevere(this,e);if (!OperationUtils.isCompleted(patch)) {patch.fail(e);}}}  }
class C{  public NotificationChain basicSetPattern(Pattern newPattern,NotificationChain msgs){  Pattern oldPattern=pattern;  pattern=newPattern;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,RegularExpressionPackage.LOOK_AHEAD__PATTERN,oldPattern,newPattern);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected static long readDelayTime(){  long delayTime=50;  String propertyString=System.getProperty(DELAY_PROPERTY);  if (propertyString != null && propertyString.length() != 0) {    try {      long propertyValue=Long.parseLong(propertyString);      if (propertyValue >= 0) {        delayTime=propertyValue;      }    } catch (    NumberFormatException ex) {      logger.logWarn(Log4jLogger.SYSTEM_LOG,LogMessageIdentifier.WARN_INVALID_PROPERTY_VALUE,propertyString,DELAY_PROPERTY,Long.toString(delayTime));    }  }  logger.logDebug("onMessage delay time is set to " + delayTime + " milli seconds",Log4jLogger.SYSTEM_LOG);  return delayTime;}  }
class C{  private int translateToModelColumn(int plotColumn){  if (!createFromModel) {    return dataTableModelColumnMap.get(dataTable.getColumnName(plotColumn));  }  return plotColumn;}  }
class C{  protected void evaluateRotationAngle(Projection proj){  renderRotationAngle=null;  double projRotation=proj.getRotationAngle();  if (projRotation != 0.0) {    Object noRotationAtt=getAttribute(OMGraphicConstants.NO_ROTATE);    boolean compensateForProjRot=noRotationAtt != null && !noRotationAtt.equals(Boolean.FALSE);    if (compensateForProjRot) {      renderRotationAngle=rotationAngle - projRotation;      return;    }  }  if (rotationAngle != DEFAULT_ROTATIONANGLE) {    renderRotationAngle=rotationAngle;  }}  }
class C{  @Override public BKSyncLogWriter startLogSegmentNonPartitioned() throws IOException {  checkClosedOrInError("startLogSegmentNonPartitioned");  BKSyncLogWriter writer=new BKSyncLogWriter(conf,dynConf,this);  boolean success=false;  try {    writer.createAndCacheWriteHandler();    BKLogWriteHandler writeHandler=writer.getWriteHandler();    FutureUtils.result(writeHandler.lockHandler());    success=true;    return writer;  }  finally {    if (!success) {      writer.abort();    }  }}  }
class C{  public void paintToolBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static Coordinate[] createSineStar(double basex,double basey,double size,double armLen,int nArms,int nPts){  double armBaseLen=size / 2 - armLen;  if (armBaseLen < 0)   armBaseLen=0.5;  double angInc=2 * Math.PI / nArms;  int nArmPt=nPts / nArms;  if (nArmPt < 5)   nArmPt=5;  int nPts2=nArmPt * nArms;  Coordinate[] pts=new Coordinate[nPts2 + 1];  int iPt=0;  double starAng=0.0;  for (int iArm=0; iArm < nArms; iArm++) {    for (int iArmPt=0; iArmPt < nArmPt; iArmPt++) {      double ang=iArmPt * (2 * Math.PI / nArmPt);      double len=armLen * (1 - Math.cos(ang) / 2) + armBaseLen;      double x=len * Math.cos(starAng + iArmPt * angInc / nArmPt) + basex;      double y=len * Math.sin(starAng + iArmPt * angInc / nArmPt) + basey;      Coordinate pt=new Coordinate(x,y);      pts[iPt++]=pt;    }    starAng+=angInc;  }  pts[iPt]=pts[0];  return pts;}  }
class C{  private static double[] WFG_calculate_f(double[] x,double[] h){  assert Misc.vector_in_01(x);  assert Misc.vector_in_01(h);  assert x.length == h.length;  int M=h.length;  double[] S=new double[M];  for (int m=1; m <= M; m++) {    S[m - 1]=m * 2.0;  }  return FrameworkFunctions.calculate_f(1.0,x,h,S);}  }
class C{  public void editButtonActionPerformed(){  if (nodeAddr64Field.getText().equals("") && nodeAddrField.getText().equals("")) {    return;  }  XBee64BitAddress guid;  if (!(nodeAddr64Field.getText().equals(""))) {    byte GUID[]=jmri.util.StringUtil.bytesFromHexString(nodeAddr64Field.getText());    guid=new XBee64BitAddress(GUID);  } else {    guid=XBee64BitAddress.UNKNOWN_ADDRESS;  }  XBee16BitAddress address;  if (!(nodeAddrField.getText().equals(""))) {    byte addr[]=jmri.util.StringUtil.bytesFromHexString(nodeAddrField.getText());    address=new XBee16BitAddress(addr);  } else {    address=XBee16BitAddress.UNKNOWN_ADDRESS;  }  String Identifier=nodeIdentifierField.getText();  RemoteXBeeDevice remoteDevice=new RemoteXBeeDevice(xtc.getXBee(),guid,address,Identifier);  XBeeNode existingNode=(XBeeNode)xtc.getNodeFromXBeeDevice(remoteDevice);  if (existingNode != null) {    javax.swing.JOptionPane.showMessageDialog(this,Bundle.getMessage("Error1",remoteDevice),Bundle.getMessage("EditNodeErrorTitle"),JOptionPane.ERROR_MESSAGE);    return;  }  RemoteXBeeDevice oldDevice=((XBeeNode)curNode).getXBee();  xtc.getXBee().getNetwork().addRemoteDevice(remoteDevice);  xtc.getXBee().getNetwork().removeRemoteDevice(oldDevice);  ((XBeeNode)curNode).setXBee(remoteDevice);  parent.nodeListChanged();  this.dispatchEvent(new WindowEvent(this,WindowEvent.WINDOW_CLOSING));}  }
class C{  public void printRuleSetForHumans(final EvolutionState state,final int log,final int verbosity){  state.output.println("Ruleset contains " + numRules + " rules",log);  for (int i=0; i < numRules; i++) {    state.output.println("Rule " + i + ":",log);    rules[i].printRuleForHumans(state,log);  }}  }
class C{  private void doReleaseShared(){  for (; ; ) {    Node h=head;    if (h != null && h != tail) {      int ws=h.waitStatus;      if (ws == Node.SIGNAL) {        if (!compareAndSetWaitStatus(h,Node.SIGNAL,0))         continue;        unparkSuccessor(h);      } else       if (ws == 0 && !compareAndSetWaitStatus(h,0,Node.PROPAGATE))       continue;    }    if (h == head)     break;  }}  }
class C{  public TreeMap<K,V> deleteMax(){  return new TreeMap<>(ord,root.deleteMax());}  }
class C{  public void remove(){  if (parent != null) {    parent.removeComponent(this);  }}  }
class C{  public static int dp2px(Context context,float dipValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(dipValue * scale + 0.5f);}  }
class C{  public long guest_time(){  return Long.parseLong(fields[42]);}  }
class C{  public int[] read(int size){  int[] block=new int[size];  System.arraycopy(source,pos,block,0,size);  pos+=size;  return block;}  }
class C{  public int executeAddedHooks(){  List<Thread> list=removeNewHooks();  if (list == null || list.isEmpty()) {    return 0;  }  for (  Thread t : list) {    t.run();  }  return list.size();}  }
class C{  Edge createSplitEdge(EdgeIntersection ei0,EdgeIntersection ei1){  int npts=ei1.segmentIndex - ei0.segmentIndex + 2;  Coordinate lastSegStartPt=edge.pts[ei1.segmentIndex];  boolean useIntPt1=ei1.dist > 0.0 || !ei1.coord.equals2D(lastSegStartPt);  if (!useIntPt1) {    npts--;  }  Coordinate[] pts=new Coordinate[npts];  int ipt=0;  pts[ipt++]=new Coordinate(ei0.coord);  for (int i=ei0.segmentIndex + 1; i <= ei1.segmentIndex; i++) {    pts[ipt++]=edge.pts[i];  }  if (useIntPt1)   pts[ipt]=ei1.coord;  return new Edge(pts,new Label(edge.label));}  }
class C{  @Override public SecureDirectoryStream<Path> newDirectoryStream(Path obj,LinkOption... options) throws IOException {  UnixPath file=getName(obj);  UnixPath child=ds.directory().resolve(file);  boolean followLinks=Util.followLinks(options);  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    child.checkRead();  }  ds.readLock().lock();  try {    if (!ds.isOpen())     throw new ClosedDirectoryStreamException();    int newdfd1=-1;    int newdfd2=-1;    long ptr=0L;    try {      int flags=O_RDONLY;      if (!followLinks)       flags|=O_NOFOLLOW;      newdfd1=openat(dfd,file.asByteArray(),flags,0);      newdfd2=dup(newdfd1);      ptr=fdopendir(newdfd1);    } catch (    UnixException x) {      if (newdfd1 != -1)       UnixNativeDispatcher.close(newdfd1);      if (newdfd2 != -1)       UnixNativeDispatcher.close(newdfd2);      if (x.errno() == UnixConstants.ENOTDIR)       throw new NotDirectoryException(file.toString());      x.rethrowAsIOException(file);    }    return new UnixSecureDirectoryStream(child,ptr,newdfd2,null);  }  finally {    ds.readLock().unlock();  }}  }
class C{  @Override public boolean optimize(ParForStatementBlock sb,ParForProgramBlock pb,OptTree plan,CostEstimator est,ExecutionContext ec) throws DMLRuntimeException {  LOG.debug("--- " + getOptMode() + " OPTIMIZER -------");  OptNode pn=plan.getRoot();  double M0=-1, M1=-1, M2=-1;  if (pn.isLeaf())   return true;  super.analyzeProblemAndInfrastructure(pn);  _cost=est;  LOG.debug(getOptMode() + " OPT: Optimize with local_max_mem=" + toMB(_lm)+ " and remote_max_mem="+ toMB(_rm)+ ").");  if (_rnk <= 0 || _rk <= 0)   LOG.warn(getOptMode() + " OPT: Optimize for inactive cluster (num_nodes=" + _rnk+ ", num_map_slots="+ _rk+ ").");  ExecType oldET=pn.getExecType();  int oldK=pn.getK();  pn.setSerialParFor();  M0=_cost.getEstimate(TestMeasure.MEMORY_USAGE,pn);  pn.setExecType(oldET);  pn.setK(oldK);  LOG.debug(getOptMode() + " OPT: estimated mem (serial exec) M=" + toMB(M0));  HashMap<String,PDataPartitionFormat> partitionedMatrices=new HashMap<String,PDataPartitionFormat>();  rewriteSetDataPartitioner(pn,ec.getVariables(),partitionedMatrices);  M1=_cost.getEstimate(TestMeasure.MEMORY_USAGE,pn);  rewriteRemoveUnnecessaryCompareMatrix(pn,ec);  boolean flagLIX=super.rewriteSetResultPartitioning(pn,M1,ec.getVariables());  M1=_cost.getEstimate(TestMeasure.MEMORY_USAGE,pn);  M2=_cost.getEstimate(TestMeasure.MEMORY_USAGE,pn,LopProperties.ExecType.CP);  LOG.debug(getOptMode() + " OPT: estimated new mem (serial exec) M=" + toMB(M1));  LOG.debug(getOptMode() + " OPT: estimated new mem (serial exec, all CP) M=" + toMB(M2));  PExecMode tmpmode=getPExecMode(pn);  boolean flagRecompMR=rewriteSetExecutionStategy(pn,M0,M1,M2,flagLIX);  if (pn.getExecType() == ExecType.MR || pn.getExecType() == ExecType.SPARK) {    if (flagRecompMR) {      rewriteSetOperationsExecType(pn,flagRecompMR);      M1=_cost.getEstimate(TestMeasure.MEMORY_USAGE,pn);    }    super.rewriteDataColocation(pn,ec.getVariables());    super.rewriteSetPartitionReplicationFactor(pn,partitionedMatrices,ec.getVariables());    super.rewriteSetExportReplicationFactor(pn,ec.getVariables());    boolean flagNested=super.rewriteNestedParallelism(pn,M1,flagLIX);    rewriteSetDegreeOfParallelism(pn,M1,flagNested);    rewriteSetTaskPartitioner(pn,flagNested,flagLIX);    rewriteSetFusedDataPartitioningExecution(pn,M1,flagLIX,partitionedMatrices,ec.getVariables(),tmpmode);    super.rewriteSetTranposeSparseVectorOperations(pn,partitionedMatrices,ec.getVariables());    HashSet<String> inplaceResultVars=new HashSet<String>();    super.rewriteSetInPlaceResultIndexing(pn,M1,ec.getVariables(),inplaceResultVars,ec);    super.rewriteDisableCPCaching(pn,inplaceResultVars,ec.getVariables());  } else {    rewriteSetDegreeOfParallelism(pn,M1,false);    rewriteSetTaskPartitioner(pn,false,false);    HashSet<String> inplaceResultVars=new HashSet<String>();    super.rewriteSetInPlaceResultIndexing(pn,M1,ec.getVariables(),inplaceResultVars,ec);    if (!OptimizerUtils.isSparkExecutionMode()) {      super.rewriteEnableRuntimePiggybacking(pn,ec.getVariables(),partitionedMatrices);    } else {      super.rewriteInjectSparkLoopCheckpointing(pn);      super.rewriteInjectSparkRepartition(pn,ec.getVariables());      super.rewriteSetSparkEagerRDDCaching(pn,ec.getVariables());    }  }  rewriteSetResultMerge(pn,ec.getVariables(),true);  super.rewriteSetRecompileMemoryBudget(pn);  super.rewriteRemoveRecursiveParFor(pn,ec.getVariables());  super.rewriteRemoveUnnecessaryParFor(pn);  _numEvaluatedPlans=1;  return true;}  }
class C{  @Override public void postProcess(ResultProducer rp) throws Exception {  if (m_RP != rp) {    throw new Error("Unrecognized ResultProducer sending results!!");  }  String[] keyNames=m_RP.getKeyNames();  String[] resultNames=m_RP.getResultNames();  ArrayList<Attribute> attribInfo=new ArrayList<Attribute>();  for (int i=0; i < m_AttributeTypes.length; i++) {    String attribName="Unknown";    if (i < keyNames.length) {      attribName="Key_" + keyNames[i];    } else {      attribName=resultNames[i - keyNames.length];    }switch (m_AttributeTypes[i]) {case Attribute.NOMINAL:      if (m_NominalStrings[i].size() > 0) {        attribInfo.add(new Attribute(attribName,m_NominalStrings[i]));      } else {        attribInfo.add(new Attribute(attribName,(ArrayList<String>)null));      }    break;case Attribute.NUMERIC:  attribInfo.add(new Attribute(attribName));break;case Attribute.STRING:attribInfo.add(new Attribute(attribName,(ArrayList<String>)null));break;default :throw new Exception("Unknown attribute type");}}Instances result=new Instances("InstanceResultListener",attribInfo,m_Instances.size());for (int i=0; i < m_Instances.size(); i++) {result.add(m_Instances.get(i));}m_Out.println(new Instances(result,0));for (int i=0; i < result.numInstances(); i++) {m_Out.println(result.instance(i));}if (!(m_OutputFile == null) && !(m_OutputFile.getName().equals("-"))) {m_Out.close();}}  }
class C{  public MockClock incrementBySeconds(long seconds){  return incrementByMicroseconds(1000 * 1000 * seconds);}  }
class C{  public RatNum(int n,int d){  if (d == 0) {    numer=n;    denom=0;    checkRep();    approx=this.approx();    return;  }  int g=gcd(n,d);  numer=n / g;  denom=d / g;  if (denom < 0) {    numer=-numer;    denom=-denom;    checkRep();  }  approx=this.approx();}  }
class C{  public void analyse(int analysis,String xmlFolder,String input,String output){  File folder=new File(xmlFolder);  if (!folder.exists() || !folder.canRead() || !folder.isDirectory()) {    throw new IllegalArgumentException("Cannot read from " + xmlFolder);  }  List<File> vehicleFiles=null;  if (input == null) {    vehicleFiles=FileUtils.sampleFiles(folder,Integer.MAX_VALUE,FileUtils.getFileFilter(".xml.gz"));  } else {    File f=new File(input);    if (input.equalsIgnoreCase("null") || !f.exists() || !f.isFile()|| !f.canRead()) {      vehicleFiles=FileUtils.sampleFiles(folder,Integer.MAX_VALUE,FileUtils.getFileFilter(".xml.gz"));    } else {      try {        vehicleFiles=DigicoreUtils.readDigicoreVehicleIds(input,xmlFolder);      } catch (      IOException e) {        e.printStackTrace();        throw new RuntimeException("Could not read vehicle Ids from " + input);      }    }  }switch (analysis) {case 1:    runMinorActivityStartTimeAnalysis(vehicleFiles,output);  break;case 2:runActivitiesWithFacilityIdAnalysis(vehicleFiles,output);break;case 3:runMinorActivityDurationAnalysis(vehicleFiles,output);break;default :LOG.error("Cannot resolve '" + analysis + " to a valid analysis.");throw new IllegalArgumentException("Invalid analysis parameter.");}}  }
class C{  private void flatMapMovies(List<Movie> movies){  String[] action=new String[]{"Mission Impossible","Sky Fall"};  String[] comedy=new String[]{"Johnny English","Gods Must Be Crazy"};  String[] thriller=new String[]{"Bourne Identity","The Ghost Writer","Clear and Present Danger"};  List<String> actionMoviesList=Arrays.asList(action);  List<String> comedyMoviesList=Arrays.asList(comedy);  List<String> thrillerMoviesList=Arrays.asList(thriller);  Stream<List<String>> actionMoviesStream=Stream.of(actionMoviesList,comedyMoviesList,thrillerMoviesList);  actionMoviesStream.flatMap(null).forEach(null);}  }
class C{  public BootstrapMethod(int method,int[] args){  methodRef=method;  arguments=args;}  }
class C{  public void readSkyLight(ByteBuf input){  byte[] handle=new byte[LIGHT_LENGTH];  input.readBytes(handle);  if (skyLight != null) {    skyLight.setHandle(handle);    return;  }  this.skyLight=new NibbleArray(handle);}  }
class C{  public void paintCheckBoxMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private void httpClientTest(){  HttpClient client=new DefaultHttpClient();  try {    HttpGet request=new HttpGet("http://www.google.com");    HttpResponse response=client.execute(request);    if (response.getStatusLine().getStatusCode() == 200) {      mHttpClientTestResult="Pass";    } else {      mHttpClientTestResult="Fail: Code: " + String.valueOf(response);    }    request.abort();  } catch (  IOException e) {    mHttpClientTestResult="Fail: IOException";  }}  }
class C{  void mutate(){  do {    int iBit;    do {      iBit=m_random.nextInt(m_nNodes * m_nNodes);    } while (isSquare(iBit));    m_bits[iBit]=!m_bits[iBit];  } while (hasCycles());  calcScore();}  }
class C{  protected boolean mustRefreshIcon(){  String mode;  long retrievalTime;  if (this.isHighlighted()) {    mode=KMLConstants.HIGHLIGHT;    retrievalTime=this.highlightIconRetrievalTime;  } else {    mode=KMLConstants.NORMAL;    retrievalTime=this.iconRetrievalTime;  }  KMLIconStyle iconStyle=(KMLIconStyle)this.parent.getSubStyle(new KMLIconStyle(null),mode);  KMLIcon icon=iconStyle.getIcon();  return icon != null && icon.getUpdateTime() > retrievalTime;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isImageDefined(){  return imageDefined;}  }
class C{  public void logVelocityMessage(int level,String message){switch (level) {case LogSystem.WARN_ID:    logger.warn(RuntimeConstants.WARN_PREFIX + message);  break;case LogSystem.INFO_ID:logger.info(RuntimeConstants.INFO_PREFIX + message);break;case LogSystem.DEBUG_ID:logger.debug(RuntimeConstants.DEBUG_PREFIX + message);break;case LogSystem.ERROR_ID:logger.error(RuntimeConstants.ERROR_PREFIX + message);break;default :logger.info(message);break;}}  }
class C{  public static int minimumObjectSize(){  return SCALAR_HEADER_SIZE;}  }
class C{  public void inc(C condition,V sample){  List<V> samples=new ArrayList<V>();  samples.add(sample);  incAll(condition,samples);}  }
class C{  private void renderHtml(final HttpServletResponse resp,final String htmContent){  renderReport(resp,htmContent.getBytes(),FileFormat.HTM);}  }
class C{  public StatementBuilder append(long x){  builder.append(x);  return this;}  }
class C{  public final byte[] doFinal() throws IllegalBlockSizeException, BadPaddingException {  checkCipherState();  chooseFirstProvider();  return spi.engineDoFinal(null,0,0);}  }
class C{  public Hashtable(int initialCapacity,float loadFactor){  if (initialCapacity < 0) {    throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  }  if (loadFactor <= 0 || Float.isNaN(loadFactor)) {    throw new IllegalArgumentException("Illegal Load: " + loadFactor);  }  if (initialCapacity == 0)   initialCapacity=1;  this.loadFactor=loadFactor;  table=new Entry[initialCapacity];  threshold=(int)(initialCapacity * loadFactor);}  }
class C{  private void feedMockMailboxManager() throws MailboxException, UnsupportedEncodingException {  MailboxPath mailboxPath=null;  for (int i=0; i < DOMAIN_COUNT; i++) {    for (int j=0; j < USER_COUNT; j++) {      String user="user" + j + "@localhost"+ i;      String folderName="INBOX";      MailboxSession mailboxSession=getMockMailboxManager().createSystemSession(user,LoggerFactory.getLogger("mailboxmanager-test"));      mailboxPath=new MailboxPath("#private",user,folderName);      createMailbox(mailboxSession,mailboxPath);      for (int k=0; k < SUB_MAILBOXES_COUNT; k++) {        String subFolderName=folderName + ".SUB_FOLDER_" + k;        mailboxPath=new MailboxPath("#private",user,subFolderName);        createMailbox(mailboxSession,mailboxPath);        for (int l=0; l < SUB_SUB_MAILBOXES_COUNT; l++) {          String subSubfolderName=subFolderName + ".SUBSUB_FOLDER_" + l;          mailboxPath=new MailboxPath("#private",user,subSubfolderName);          createMailbox(mailboxSession,mailboxPath);        }      }      getMockMailboxManager().logout(mailboxSession,true);    }  }}  }
class C{  public boolean acceptAgreement(Registration reg,URI agreement) throws AcmeException {  int option=JOptionPane.showConfirmDialog(null,"Do you accept the Terms of Service?\n\n" + agreement,"Accept T&C",JOptionPane.YES_NO_OPTION);  if (option == JOptionPane.NO_OPTION) {    LOG.error("User did not accept Terms of Service");    return false;  }  reg.modify().setAgreement(agreement).commit();  LOG.info("Updated user's ToS");  return true;}  }
class C{  public void addValue(Number value,Comparable rowKey,Comparable columnKey){  setValue(value,rowKey,columnKey);}  }
class C{  public T caseDeActivateFor_(DeActivateFor_ object){  return null;}  }
class C{  private void addEvent(){  if (_inTag) {    ensureCapacity(EVENT_INFO_LEN);    _out[_outLen]=EVENT_KIND;    _out[_outLen + EVENT_FIRST]=_eventAttrFirst;    _out[_outLen + EVENT_LAST]=_eventAttrLast;    _outLen+=EVENT_INFO_LEN;    _inEventAttr=false;    _eventAttrFirst=(-1);    _eventAttrLast=(-1);  }}  }
class C{  public SmallGraphProblem() throws Exception {  final RAMGraph g=getGraphFixture().getGraph();  final ValueFactory vf=g.getValueFactory();  rdfType=vf.createURI(RDF.TYPE.stringValue());  rdfsLabel=vf.createURI(RDFS.LABEL.stringValue());  foafKnows=vf.createURI("http://xmlns.com/foaf/0.1/knows");  foafPerson=vf.createURI("http://xmlns.com/foaf/0.1/Person");  mike=vf.createURI("http://www.bigdata.com/Mike");  bryan=vf.createURI("http://www.bigdata.com/Bryan");  martyn=vf.createURI("http://www.bigdata.com/Martyn");  dc=vf.createURI("http://www.bigdata.com/DC");  g.add(vf.createStatement(mike,rdfType,foafPerson));  g.add(vf.createStatement(bryan,rdfType,foafPerson));  g.add(vf.createStatement(martyn,rdfType,foafPerson));  g.add(vf.createStatement(mike,rdfsLabel,vf.createLiteral("Mike")));  g.add(vf.createStatement(bryan,rdfsLabel,vf.createLiteral("Bryan")));  g.add(vf.createStatement(dc,rdfsLabel,vf.createLiteral("DC")));  g.add(vf.createStatement(mike,foafKnows,bryan));  g.add(vf.createStatement(bryan,foafKnows,mike));  g.add(vf.createStatement(bryan,foafKnows,martyn));  g.add(vf.createStatement(martyn,foafKnows,bryan));}  }
class C{  public RemoteFileChannel(String hostname,String name,int uploadId) throws IOException {  this.hostname=hostname;  remoteFilename=name;  this.readonly=false;  this.uploadId=uploadId;  connect();}  }
class C{  public boolean isCompletelyCollapsed(){  if (collapsedUnder == null) {    return false;  }  if (Math.abs(positionX - collapsedUnder.positionX) < COLLAPSE_TOLERANCE && Math.abs(positionY - collapsedUnder.positionY) < COLLAPSE_TOLERANCE) {    return true;  }  return false;}  }
class C{  public void writeUint32(long n){  check(4);  buffer[write_pos++]=(byte)((n & 0x00ff000000) >> 24);  buffer[write_pos++]=(byte)((n & 0x00ff0000) >> 16);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  @Override public void writeNewStateDescription(ParcelFileDescriptor newState){  writeJournal(newState,getCurrentStateJournal());}  }
class C{  protected void onSetModerated(String channel,String sourceNick,String sourceLogin,String sourceHostname){}  }
class C{  public Gradient(int[] x,int[] rgb){  this(x,rgb,null);}  }
class C{  void replaceEdge(int a,int b,int ol,int ne){  if (this.a == a && this.b == b) {    assert (this.ab == ol) : "Edge doesn't match: " + this + " "+ a+ " "+ b+ " "+ ol+ " "+ ne;    this.ab=ne;    return;  }  if (this.b == a && this.c == b) {    assert (this.bc == ol) : "Edge doesn't match: " + this + " "+ a+ " "+ b+ " "+ ol+ " "+ ne;    this.bc=ne;    return;  }  if (this.c == a && this.a == b) {    assert (this.ca == ol) : "Edge doesn't match: " + this + " "+ a+ " "+ b+ " "+ ol+ " "+ ne;    this.ca=ne;    return;  }}  }
class C{  private static String calculateLaunchConfigName(String startupUrl,boolean isExternal,IResource resource){  String launchConfigName="";  if ("".equals(startupUrl)) {    launchConfigName=resource.getProject().getName();  } else {    try {      URL url=new URL(startupUrl);      String path=url.getPath();      String hostPageName=new Path(path).lastSegment();      if (hostPageName != null) {        launchConfigName=hostPageName;      } else {        launchConfigName=url.getHost();      }    } catch (    MalformedURLException e) {      launchConfigName=new Path(startupUrl).lastSegment();    }  }  if (isExternal) {    return launchConfigName + "-external";  }  return launchConfigName;}  }
class C{  private boolean initOneNAL(){  byte[] nal=NativeH264Encoder.getNAL();  if ((nal != null) && (nal.length > 0)) {    int type=(nal[0] & 0x1f);    if (type == JavaPacketizer.AVC_NALTYPE_SPS) {      mSps=nal;      return true;    } else     if (type == JavaPacketizer.AVC_NALTYPE_PPS) {      mPps=nal;      return true;    }  }  return false;}  }
class C{  public void reject(int errorCode) throws IllegalStateException, IOException {  lock.lock();  try {    if (done) {      throw new IllegalStateException("Response already initiated");    } else {      done=true;      try {        responseHandler.sendNegativeResponse(bindType.commandId(),errorCode,originalSequenceNumber);      }  finally {        condition.signal();      }    }  }  finally {    lock.unlock();  }}  }
class C{  private String calculateDimPercentage(int maxDimLevel,int level){  float percentage=((float)level / (float)maxDimLevel) * 100;  return String.format("%.0f",percentage) + "%";}  }
class C{  public void test_ASK() throws Exception {  final String queryStr="ASK where {?s ?p ?o}";{    final IPreparedBooleanQuery query=m_repo.prepareBooleanQuery(queryStr);    assertEquals(false,query.evaluate());  }{    final IPreparedBooleanQuery query=m_repo.prepareBooleanQuery(queryStr);    query.setHeader("Accept",BooleanQueryResultFormat.SPARQL.getDefaultMIMEType());    assertEquals(false,query.evaluate());  }{    final IPreparedBooleanQuery query=m_repo.prepareBooleanQuery(queryStr);    query.setHeader("Accept",BooleanQueryResultFormat.TEXT.getDefaultMIMEType());    assertEquals(false,query.evaluate());  }{    final IPreparedBooleanQuery query=m_repo.prepareBooleanQuery(queryStr);    query.setHeader("Accept","application/sparql-results+json");    assertEquals(false,query.evaluate());  }}  }
class C{  public int addPoint(int x,int y){  return addPoint(x,y,Integer.MAX_VALUE);}  }
class C{  private void init_key(){  P=(int[])P_orig.clone();  S=(int[])S_orig.clone();}  }
class C{  private boolean entityCollides(final Player player,final StendhalRPZone zone,final int x,final int y,final PassiveEntity entity){  boolean res=zone.simpleCollides(entity,x,y,entity.getWidth(),entity.getHeight());  if (res) {    player.sendPrivateText("There is no space there.");  }  return res;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:17.804 -0500",hash_original_method="C08A411708B1C45834DF498B4B831402",hash_generated_method="8348D54380A8F9D9486E166033DC9D2B") public CertificateVerify(HandshakeIODataStream in,int length) throws IOException {  if (length == 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateVerify");  } else {    if (in.readUint16() != length - 2) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateVerify");    }    signedHash=in.read(length - 2);  }  this.length=length;}  }
class C{  private void updateGui(){  final IDebugger activeDebugger=m_debugPerspectiveModel.getCurrentSelectedDebugger();  final TargetProcessThread activeThread=activeDebugger == null ? null : activeDebugger.getProcessManager().getActiveThread();  m_registerView.setEnabled(activeThread != null && activeDebugger != null && activeDebugger.isConnected());}  }
class C{  public void addModule(final MemoryModule module){  m_cachedValuesSemaphore.acquireUninterruptibly();  m_modules.add(module);  m_cachedValues=null;  m_cachedValuesSemaphore.release();  fireTableDataChanged();}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public void unread(int c) throws IOException {synchronized (lock) {    ensureOpen();    if (pos == 0)     throw new IOException("Pushback buffer overflow");    buf[--pos]=(char)c;  }}  }
class C{  public BinLogPosition(int binLogPosition,String binLogFileName){  this.binLogPosition=binLogPosition;  this.binLogFileName=binLogFileName;}  }
class C{  public QueryStringDecoderUtil(String uri,Charset charset,boolean hasPath,int maxParams){  if (uri == null) {    throw new NullPointerException("getUri");  }  if (charset == null) {    throw new NullPointerException("charset");  }  if (maxParams <= 0) {    throw new IllegalArgumentException("maxParams: " + maxParams + " (expected: a positive integer)");  }  this.uri=uri;  this.charset=charset;  this.maxParams=maxParams;  this.hasPath=hasPath;}  }
class C{  @Override public Statement apply(Statement statement,Description description){  return new RunSetUpHqlStatement(statement,testingHiveServer,setUpHql);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(DataSourceTest.class);}  }
class C{  private List<StoragePort> eliminatePortsOverCeiling(List<StoragePort> ports,StorageSystem system,boolean updatePortUsages){  List<StoragePort> portList=new ArrayList<StoragePort>();  for (  StoragePort sp : ports) {    boolean overCeiling=isPortOverCeiling(sp,system,updatePortUsages);    if (!overCeiling) {      portList.add(sp);    }  }  return portList;}  }
class C{  public void deactivate(){  out=null;}  }
class C{  public LoadStats loadData(final Reader reader,final String baseURL,final RDFFormat rdfFormat) throws IOException {  final MyLoadStats totals=newLoadStats();  loadData4_ParserErrors_Trapped(totals,reader,baseURL,baseURL,rdfFormat,null,true);  doCommit(totals);  return totals;}  }
class C{  public static TypeReference newFormalParameterReference(int paramIndex){  return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));}  }
class C{  public String delimiter(){  return delimiter;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Override public String toString(){  return "CUdevprop[" + createString(",") + "]";}  }
class C{  private void cmd_displayCashScrutiny(){  cInitial.setVisible(false);  c.setVisible(false);  cScrutiny.setVisible(true);  Timestamp today=TimeUtil.getDay(System.currentTimeMillis());  MCash cash=MCash.get(p_pos.getCtx(),p_pos.getC_CashBook_ID(),today,null);  v_previousBalance.setValue(cash.getEndingBalance());}  }
class C{  public String minTermFreqTipText(){  return "Sets the minimum term frequency. This is enforced " + "on a per-class basis.";}  }
class C{  public static void createData(CasIdmClient idmClient) throws Exception {  logger.debug("IdmDataCreator.createData called");  Validate.notNull(idmClient);  if (forceCleanup) {    int i=0;    String tenantName=ServerConfig.getTenant(i);    while (tenantName != null) {      IdmDataRemover.addTenant(tenantName);      i++;      tenantName=ServerConfig.getTenant(i);    }    try {      IdmDataRemover.removeData(idmClient);    } catch (    Exception e) {      logger.debug("Caught exception while removing data {}",e.toString());    }    forceCleanup=false;  }  int i=0;  String tenantName=ServerConfig.getTenant(i);  while (tenantName != null) {    processTenant(idmClient,tenantName);    i++;    tenantName=ServerConfig.getTenant(i);  }  String defaultTenant=ServerConfig.getDefaultTenant();  idmClient.setDefaultTenant(defaultTenant);}  }
class C{  public Graph search(){  this.logger.log("info","Starting VCCPC algorithm");  final IndependenceTest independenceTest=getIndependenceTest();  this.logger.log("info","Independence test = " + independenceTest + ".");  this.allTriples=new HashSet<>();  this.ambiguousTriples=new HashSet<>();  this.colliderTriples=new HashSet<>();  this.noncolliderTriples=new HashSet<>();  Vcfas fas=new Vcfas(independenceTest);  definitelyNonadjacencies=new HashSet<>();  markovInAllPatterns=new HashSet<>();  long startTime=System.currentTimeMillis();  if (independenceTest == null) {    throw new NullPointerException();  }  List<Node> allNodes=independenceTest.getVariables();  fas.setKnowledge(getKnowledge());  fas.setDepth(getDepth());  fas.setVerbose(verbose);  graph=fas.search();  apparentlyNonadjacencies=fas.getApparentlyNonadjacencies();  if (isDoOrientation()) {    if (verbose) {      System.out.println("CPC orientation...");    }    SearchGraphUtils.pcOrientbk(knowledge,graph,allNodes);    orientUnshieldedTriples(knowledge,independenceTest,getDepth());    MeekRules meekRules=new MeekRules();    meekRules.setAggressivelyPreventCycles(this.aggressivelyPreventCycles);    meekRules.setKnowledge(knowledge);    meekRules.orientImplied(graph);  }  List<Triple> ambiguousTriples=new ArrayList(graph.getAmbiguousTriples());  int[] dims=new int[ambiguousTriples.size()];  for (int i=0; i < ambiguousTriples.size(); i++) {    dims[i]=2;  }  List<Graph> patterns=new ArrayList<>();  Map<Graph,List<Triple>> newColliders=new IdentityHashMap<>();  Map<Graph,List<Triple>> newNonColliders=new IdentityHashMap<>();  CombinationGenerator generator=new CombinationGenerator(dims);  int[] combination;  while ((combination=generator.next()) != null) {    Graph _graph=new EdgeListGraph(graph);    newColliders.put(_graph,new ArrayList<Triple>());    newNonColliders.put(_graph,new ArrayList<Triple>());    for (    Graph graph : newColliders.keySet()) {    }    for (int k=0; k < combination.length; k++) {      Triple triple=ambiguousTriples.get(k);      _graph.removeAmbiguousTriple(triple.getX(),triple.getY(),triple.getZ());      if (combination[k] == 0) {        newColliders.get(_graph).add(triple);        Node x=triple.getX();        Node y=triple.getY();        Node z=triple.getZ();        _graph.setEndpoint(x,y,Endpoint.ARROW);        _graph.setEndpoint(z,y,Endpoint.ARROW);      }      if (combination[k] == 1) {        newNonColliders.get(_graph).add(triple);      }    }    patterns.add(_graph);  }  List<Graph> _patterns=new ArrayList<>(patterns);  GRAPH:   for (  Graph graph : new ArrayList<>(patterns)) {    List<Triple> colliders=newColliders.get(graph);    List<Triple> nonColliders=newNonColliders.get(graph);    for (    Triple triple : colliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      if (graph.getEdge(x,y).pointsTowards(x) || (graph.getEdge(y,z).pointsTowards(z))) {        patterns.remove(graph);        continue GRAPH;      }    }    for (    Triple triple : colliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      graph.setEndpoint(x,y,Endpoint.ARROW);      graph.setEndpoint(z,y,Endpoint.ARROW);    }    for (    Triple triple : nonColliders) {      Node x=triple.getX();      Node y=triple.getY();      Node z=triple.getZ();      if (graph.getEdge(x,y).pointsTowards(y)) {        graph.removeEdge(y,z);        graph.addDirectedEdge(y,z);      }      if (graph.getEdge(y,z).pointsTowards(y)) {        graph.removeEdge(x,y);        graph.addDirectedEdge(y,x);      }    }    for (    Edge edge : graph.getEdges()) {      Node x=edge.getNode1();      Node y=edge.getNode2();      if (Edges.isBidirectedEdge(edge)) {        graph.removeEdge(x,y);        graph.addUndirectedEdge(x,y);      }    }    MeekRules rules=new MeekRules();    rules.orientImplied(graph);    if (graph.existsDirectedCycle()) {      patterns.remove(graph);      continue GRAPH;    }  }  MARKOV:   for (  Edge edge : apparentlyNonadjacencies.keySet()) {    Node x=edge.getNode1();    Node y=edge.getNode2();    for (    Graph _graph : new ArrayList<>(patterns)) {      List<Node> boundaryX=new ArrayList<>(boundary(x,_graph));      List<Node> boundaryY=new ArrayList<>(boundary(y,_graph));      List<Node> futureX=new ArrayList<>(future(x,_graph));      List<Node> futureY=new ArrayList<>(future(y,_graph));      if (y == x) {        continue;      }      if (boundaryX.contains(y) || boundaryY.contains(x)) {        continue;      }      IndependenceTest test=this.independenceTest;      if (!futureX.contains(y)) {        if (!test.isIndependent(x,y,boundaryX)) {          continue MARKOV;        }      }      if (!futureY.contains(x)) {        if (!test.isIndependent(y,x,boundaryY)) {          continue MARKOV;        }      }    }    definitelyNonadjacencies.add(edge);  }  for (  Edge edge : definitelyNonadjacencies) {    if (apparentlyNonadjacencies.keySet().contains(edge)) {      apparentlyNonadjacencies.keySet().remove(edge);    }  }  System.out.println("VCPC:");  long endTime=System.currentTimeMillis();  this.elapsedTime=endTime - startTime;  System.out.println("Search Time (seconds):" + (elapsedTime) / 1000 + " s");  System.out.println("Search Time (milli):" + elapsedTime + " ms");  System.out.println("# of Apparent Nonadj: " + apparentlyNonadjacencies.size());  System.out.println("# of Definite Nonadj: " + definitelyNonadjacencies.size());  TetradLogger.getInstance().log("apparentlyNonadjacencies","\n Apparent Non-adjacencies" + apparentlyNonadjacencies);  TetradLogger.getInstance().log("definitelyNonadjacencies","\n Definite Non-adjacencies" + definitelyNonadjacencies);  TetradLogger.getInstance().log("graph","\nReturning this graph: " + graph);  TetradLogger.getInstance().log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  TetradLogger.getInstance().log("info","Finishing CPC algorithm.");  TetradLogger.getInstance().flush();  return graph;}  }
class C{  public String sqlObjectDetail_prepareColumnNotNullable(String vendorName,String catalogName,String schemaName,String tableName,String columnName,String dataType,String defaultValue){  columnName=normalizeColumnName(vendorName,columnName);  if (defaultValue == null || defaultValue.length() == 0 || defaultValue.toUpperCase().startsWith("NULL"))   defaultValue=normalizeColumnValue(vendorName,getDataTypeID(vendorName,dataType));  return m_interfaces.get(getDBVendorID(vendorName)).sqlObjectDetail_prepareColumnNotNullable(catalogName,schemaName,tableName,columnName,dataType,defaultValue);}  }
class C{  private void assertImportBucketAndFilename(RdeHostReader reader){  assertThat(reader.importBucketName).isEqualTo("import-bucket");  assertThat(reader.importFileName).isEqualTo("escrow-file.xml");}  }
class C{  static MemoryUsage forClass(String className){  MeasureWithTimeout measurer=new MeasureWithTimeout(className);  new Thread(measurer).start();synchronized (measurer) {    if (measurer.memoryUsage == null) {      try {        measurer.wait(30000);      } catch (      InterruptedException e) {        System.err.println("Interrupted waiting for measurement.");        e.printStackTrace();        return NOT_AVAILABLE;      }      if (measurer.memoryUsage == null) {        System.err.println("Timed out while measuring " + className + ".");        return NOT_AVAILABLE;      }    }    System.err.println("Got memory usage for " + className + ".");    return measurer.memoryUsage;  }}  }
class C{  public static void main(String[] args) throws TranscoderException {  if (args.length < 1) {    System.out.println("Usage : WMFTranscoder.main <file 1> ... <file n>");    System.exit(1);  }  WMFTranscoder transcoder=new WMFTranscoder();  int nFiles=args.length;  for (int i=0; i < nFiles; i++) {    String fileName=args[i];    if (!fileName.toLowerCase().endsWith(WMF_EXTENSION)) {      System.err.println(args[i] + " does not have the " + WMF_EXTENSION+ " extension. It is ignored");    } else {      System.out.print("Processing : " + args[i] + "...");      String outputFileName=fileName.substring(0,fileName.toLowerCase().indexOf(WMF_EXTENSION)) + SVG_EXTENSION;      File inputFile=new File(fileName);      File outputFile=new File(outputFileName);      try {        TranscoderInput input=new TranscoderInput(inputFile.toURL().toString());        TranscoderOutput output=new TranscoderOutput(new FileOutputStream(outputFile));        transcoder.transcode(input,output);      } catch (      MalformedURLException e) {        throw new TranscoderException(e);      }catch (      IOException e) {        throw new TranscoderException(e);      }      System.out.println(".... Done");    }  }  System.exit(0);}  }
class C{  public PointRDD(JavaSparkContext spark,String InputLocation,Integer Offset,String Splitter,Integer partitions){  this.setRawPointRDD(spark.textFile(InputLocation,partitions).map(new PointFormatMapper(Offset,Splitter)));}  }
class C{  public void treeNodesChanged(TreeModelEvent e){  if (e != null) {    int changedIndexs[];    FHTreeStateNode changedParent=getNodeForPath(SwingUtilities2.getTreePath(e,getModel()),false,false);    int maxCounter;    changedIndexs=e.getChildIndices();    if (changedParent != null) {      if (changedIndexs != null && (maxCounter=changedIndexs.length) > 0) {        Object parentValue=changedParent.getUserObject();        for (int counter=0; counter < maxCounter; counter++) {          FHTreeStateNode child=changedParent.getChildAtModelIndex(changedIndexs[counter]);          if (child != null) {            child.setUserObject(treeModel.getChild(parentValue,changedIndexs[counter]));          }        }        if (changedParent.isVisible() && changedParent.isExpanded())         visibleNodesChanged();      } else       if (changedParent == root && changedParent.isVisible() && changedParent.isExpanded()) {        visibleNodesChanged();      }    }  }}  }
class C{  private void astar(int s){}  }
class C{  public void removeUpdate(DocumentEvent e){  try {    int offs=e.getOffset();    if (firstOffsetModded == null || offs < firstOffsetModded.getOffset()) {      firstOffsetModded=e.getDocument().createPosition(offs);    }    if (lastOffsetModded == null || offs > lastOffsetModded.getOffset()) {      lastOffsetModded=e.getDocument().createPosition(offs);    }  } catch (  BadLocationException ble) {    ble.printStackTrace();  }  handleDocumentEvent(e);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.FULL_TYPE_REFERENCE__MODULE_NAME:    return getModuleName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private String parseFunctionName(String script,String scriptName){  StringTokenizer st=new StringTokenizer(script," \t\n\r\f(){}",false);  if (!st.hasMoreTokens()) {    throw new ScriptException("The word \"function\" was not found in script: " + scriptName);  }  String fx=st.nextToken();  if (!"function".equals(fx)) {    throw new ScriptException("The word \"function\" was not found in script: " + scriptName);  }  if (!st.hasMoreTokens()) {    throw new ScriptException("Invalid syntax in: " + scriptName + "\n No function name.");  }  return st.nextToken();}  }
class C{  @Override public AxisSpace reserveSpace(Graphics2D g2,Plot plot,Rectangle2D plotArea,RectangleEdge edge,AxisSpace space){  if (space == null) {    space=new AxisSpace();  }  if (!isVisible()) {    return space;  }  double dimension=getFixedDimension();  if (dimension > 0.0) {    space.ensureAtLeast(dimension,edge);  }  Rectangle2D labelEnclosure=getLabelEnclosure(g2,edge);  double labelHeight, labelWidth;  double tickLabelBandsDimension=0.0;  for (int i=0; i < this.labelInfo.length; i++) {    PeriodAxisLabelInfo info=this.labelInfo[i];    FontMetrics fm=g2.getFontMetrics(info.getLabelFont());    tickLabelBandsDimension+=info.getPadding().extendHeight(fm.getHeight());  }  if (RectangleEdge.isTopOrBottom(edge)) {    labelHeight=labelEnclosure.getHeight();    space.add(labelHeight + tickLabelBandsDimension,edge);  } else   if (RectangleEdge.isLeftOrRight(edge)) {    labelWidth=labelEnclosure.getWidth();    space.add(labelWidth + tickLabelBandsDimension,edge);  }  double tickMarkSpace=0.0;  if (isTickMarksVisible()) {    tickMarkSpace=getTickMarkOutsideLength();  }  if (this.minorTickMarksVisible) {    tickMarkSpace=Math.max(tickMarkSpace,this.minorTickMarkOutsideLength);  }  space.add(tickMarkSpace,edge);  return space;}  }
class C{  public void addProperty(ICalProperty property){  properties.put(property.getClass(),property);}  }
class C{  private static void checkPlanMappers(HadoopMapReducePlan plan,List<HadoopInputSplit> splits,Collection<ClusterNode> nodes,boolean expectUniformity){  assertEquals(splits.size(),plan.mappers());  if (expectUniformity) {    assertEquals(nodes.size(),plan.mapperNodeIds().size());    assertEquals(allIds(nodes),plan.mapperNodeIds());  }  Set<HadoopInputSplit> set=new HashSet<>();  for (  UUID id : plan.mapperNodeIds()) {    Collection<HadoopInputSplit> sp=plan.mappers(id);    assert sp != null;    for (    HadoopInputSplit s : sp)     assertTrue(set.add(s));  }  assertEquals(set,new HashSet<>(splits));}  }
class C{  @Override public double evaluate(Recommendation<U,I> recommendation){  UserIdealRelevanceModel<U,I> userRelModel=relModel.getModel(recommendation.getUser());  double ap=0;  int relCount=0;  int rank=0;  for (  Tuple2od<I> pair : recommendation.getItems()) {    rank++;    if (userRelModel.isRelevant(pair.v1)) {      relCount++;      ap+=relCount / (double)rank;    }    if (rank == cutoff) {      break;    }  }  return ap / (double)min(cutoff,userRelModel.getRelevantItems().size());}  }
class C{  public static void addSearchAlgorithm(String name,Search algo){  SEARCH_NAMES.add(name);  SEARCH_ALGOS.add(algo);}  }
class C{  public boolean isMandatory(){  return m_text.isMandatory();}  }
class C{  public static <K,V>String map2String(Map<K,V> in,String sepKey,String sepEntry){  if (in == null) {    return null;  }  StringBuilder out=new StringBuilder();  Iterator<Entry<K,V>> it=in.entrySet().iterator();  while (it.hasNext()) {    if (out.length() > 0) {      out.append(sepEntry);    }    Entry<K,V> entry=it.next();    out.append(entry.getKey() + sepKey + entry.getValue());  }  return out.toString();}  }
class C{  static int bitWidth(int i){  if (i < 0)   i=~i;  int w=0;  int lo=i;  if (lo < byteBitWidths.length)   return byteBitWidths[lo];  int hi;  hi=(lo >>> 16);  if (hi != 0) {    lo=hi;    w+=16;  }  hi=(lo >>> 8);  if (hi != 0) {    lo=hi;    w+=8;  }  w+=byteBitWidths[lo];  return w;}  }
class C{  public double centroidLongitude(){  return 0.5 * (this.minLongitude + this.maxLongitude);}  }
class C{  public void lock(final T tx) throws InterruptedException, DeadlockException {  lock(tx,0L);}  }
class C{  public String invertSelectionTipText(){  return "Determines whether action is to select or delete." + " If set to true, only the specified attributes will be kept;" + " If set to false, specified attributes will be deleted.";}  }
class C{  public void addColumn(double min,double pref,double max,Priority hgrow){  ColumnConstraints cc=new ColumnConstraints(min,pref,max);  cc.setHgrow(hgrow);  getColumnConstraints().add(cc);}  }
class C{  private static void normalizeOrder(final WindowInfoImpl[] infos){  for (int i=0; i < infos.length; i++) {    infos[i].setOrder(i);  }}  }
class C{  public Transaction seen(Transaction tx,PeerAddress byPeer){  lock.lock();  try {    final Transaction interned=intern(tx);    markBroadcast(byPeer,interned);    return interned;  }  finally {    lock.unlock();  }}  }
class C{  public boolean delete(){  if (getState() < 300)   return deleteEntryFiles(); else   return deleteResultFiles();}  }
class C{  public List<T> applyTo(List<T> target) throws PatchFailedException {  List<T> result=new LinkedList<T>(target);  ListIterator<Delta<T>> it=getDeltas().listIterator(deltas.size());  while (it.hasPrevious()) {    Delta<T> delta=(Delta<T>)it.previous();    delta.applyTo(result);  }  return result;}  }
class C{  public List<Map<String,String>> listVolumeInfo(String volume,Collection<String> attrs){  if (log.isDebugEnabled()) {    log.debug("List all volumes with attributes");  }  FlexVolume vol=new FlexVolume(server.getNaServer(),volume);  return vol.listVolumeInfo(attrs);}  }
class C{  @Override protected void finalize() throws Throwable {  if (mQuadric != null) {    GLUES.gluDeleteQuadric(mQuadric);    mQuadric=null;  }  super.finalize();}  }
class C{  public Iterator keys(){  return this.map.keySet().iterator();}  }
class C{  public SortedList(){  this(10);}  }
class C{  @Override public boolean isRecycled(){  return impl.isRecycled();}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  Set<RawProtein<ProSiteProfileRawMatch>> rawMatches=rawMatchDAO.getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);  Map<String,RawProtein<ProSiteProfileRawMatch>> proteinIdToRawProteinMap=new HashMap<String,RawProtein<ProSiteProfileRawMatch>>(rawMatches.size());  for (  RawProtein<ProSiteProfileRawMatch> rawMatch : rawMatches) {    proteinIdToRawProteinMap.put(rawMatch.getProteinIdentifier(),rawMatch);  }  Map<String,RawProtein<ProSiteProfileRawMatch>> filteredMatches=postProcessor.process(proteinIdToRawProteinMap);  filteredMatchDAO.persist(filteredMatches.values());}  }
class C{  protected final void eatIdentifier(String errorMessage) throws ParserException, IOException {  assertIdentifier(errorMessage);  getToken();}  }
class C{  public JMenuItem(Icon icon){  this(null,icon);}  }
class C{  public static String toString(char[] array){  StringBuffer buf=new StringBuffer();  buf.append("[");  int maxIndex=array.length - 1;  for (int i=0; i <= maxIndex; i++) {    buf.append(array[i]);    if (i < maxIndex)     buf.append(", ");  }  buf.append("]");  return buf.toString();}  }
class C{  public void encode(final OutputStream out,double smallGeometryThreshold,Map<Integer,Double> genFactors,double fallBackGen) throws IOException {  int zoomLevel=getZoomLevel(this.mapContent.getScaleDenominator());  double genFactor;  if (zoomLevel >= 1 && zoomLevel <= 20) {    genFactor=genFactors.get(zoomLevel);  } else {    genFactor=fallBackGen;    LOGGER.warning("computed zoom level (" + zoomLevel + ") is out of range, using default generalisation ("+ fallBackGen+ ")");  }  this.encode(out,smallGeometryThreshold,genFactor);}  }
class C{  public SizeVariantSpinnerAdapter(Context context){  super(context,layoutID);  this.productSizeList=new ArrayList<>();  this.layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);}  }
class C{  private int compareRelationships(RelationInfo a,RelationInfo b){  int ownership=0;  if (a.getRelationTraits() != null && b.getRelationTraits() != null) {    for (    final Map.Entry<String,String> entry : b.getRelationTraits().entrySet()) {      String keyB=entry.getKey();      String valueB=entry.getValue();      String valueA=a.getRelationTraits().get(keyB);      if ("ownership".equals(keyB)) {        Ownership ownA=Ownership.getByName(valueA);        Ownership ownB=Ownership.getByName(valueB);        if (ownA.getLevel() > ownB.getLevel()) {          ownership=1;        } else         if (ownA.getLevel() < ownB.getLevel()) {          ownership=-1;        }      } else       if (!Strings.isNullOrEmpty(valueB) && !valueB.equals(valueA)) {        return -1;      }    }  }  return ownership;}  }
class C{  int readCount(StringTokenizer t){  int cnt=1;  if (t.hasMoreTokens()) {    String idToken=t.nextToken();    try {      cnt=Integer.valueOf(idToken).intValue();    } catch (    NumberFormatException e) {      cnt=-1;    }  }  return cnt;}  }
class C{  public double cdf(double x){  if (x <= min)   return 0.0;  if (x >= max)   return 1.0;  return (x - min) / (max - min);}  }
class C{  public final AC fill(){  return fill(curIx);}  }
class C{  public void updateSize(int width,int height){}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  if (m_dtdHandler != null) {    m_dtdHandler.unparsedEntityDecl(name,publicId,systemId,notationName);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementhasattribute02.class,args);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  mContext=context;  mAccount=account;  mAuthTokenType=authTokenType;  mNotifyAuthFailure=notifyAuthFailure;}  }
class C{  private static InsnNode convertFieldArith(MethodNode mth,InsnNode insn){  InsnArg arg=insn.getArg(0);  if (!arg.isInsnWrap()) {    return null;  }  InsnNode wrap=((InsnWrapArg)arg).getWrapInsn();  InsnType wrapType=wrap.getType();  if (wrapType != InsnType.ARITH && wrapType != InsnType.STR_CONCAT || !wrap.getArg(0).isInsnWrap()) {    return null;  }  InsnNode get=((InsnWrapArg)wrap.getArg(0)).getWrapInsn();  InsnType getType=get.getType();  if (getType != InsnType.IGET && getType != InsnType.SGET) {    return null;  }  FieldInfo field=(FieldInfo)((IndexInsnNode)insn).getIndex();  FieldInfo innerField=(FieldInfo)((IndexInsnNode)get).getIndex();  if (!field.equals(innerField)) {    return null;  }  try {    InsnArg reg=null;    if (getType == InsnType.IGET) {      reg=get.getArg(0);      InsnArg putReg=insn.getArg(1);      if (!reg.equals(putReg)) {        return null;      }    }    FieldArg fArg=new FieldArg(field,reg);    if (reg != null) {      fArg.setType(get.getArg(0).getType());    }    if (wrapType == InsnType.ARITH) {      ArithNode ar=(ArithNode)wrap;      return new ArithNode(ar.getOp(),fArg,ar.getArg(1));    } else {      int argsCount=wrap.getArgsCount();      InsnNode concat=new InsnNode(InsnType.STR_CONCAT,argsCount - 1);      for (int i=1; i < argsCount; i++) {        concat.addArg(wrap.getArg(i));      }      return new ArithNode(ArithOp.ADD,fArg,InsnArg.wrapArg(concat));    }  } catch (  Exception e) {    LOG.debug("Can't convert field arith insn: {}, mth: {}",insn,mth,e);  }  return null;}  }
class C{  public void writeTo(VirtualFile file) throws ServerException, ForbiddenException {  file.updateContent(new ByteArrayInputStream(tree.getBytes()),null);}  }
class C{  public boolean hasMoreWork(){  return !workList.isEmpty();}  }
class C{  public boolean equals(Object obj){  return (this == obj);}  }
class C{  public static void intersection(double rrX,double rrY,double rrW,double rrH,double rtx1,double rty1,double rtw2,double rth2,Rectangle2D dest){  double tx1=rtx1;  double ty1=rty1;  double rx1=rrX;  double ry1=rrY;  double tx2=tx1;  tx2+=rtw2;  double ty2=ty1;  ty2+=rth2;  double rx2=rx1;  rx2+=rrW;  double ry2=ry1;  ry2+=rrH;  if (tx1 < rx1) {    tx1=rx1;  }  if (ty1 < ry1) {    ty1=ry1;  }  if (tx2 > rx2) {    tx2=rx2;  }  if (ty2 > ry2) {    ty2=ry2;  }  tx2-=tx1;  ty2-=ty1;  if (tx2 < Integer.MIN_VALUE) {    tx2=Integer.MIN_VALUE;  }  if (ty2 < Integer.MIN_VALUE) {    ty2=Integer.MIN_VALUE;  }  dest.x=tx1;  dest.y=ty1;  dest.size.setWidth(tx2);  dest.size.setHeight(ty2);}  }
class C{  public void handleSelection(int row){  BTDownloadDataLine dataLine=DATA_MODEL.get(row);  boolean pausable=dataLine.getInitializeObject().isPausable();  boolean resumable=dataLine.getInitializeObject().isResumable();  boolean isTransferFinished=dataLine.getInitializeObject().isCompleted();  File saveLocation=dataLine.getInitializeObject().getSaveLocation();  boolean hasMediaFiles=selectionHasMediaFiles(dataLine.getInitializeObject());  boolean hasMP4s=selectionHasMP4s(saveLocation);  boolean isSingleFile=selectionIsSingleFile(saveLocation);  removeAction.putValue(Action.NAME,I18n.tr("Cancel Download"));  removeAction.putValue(LimeAction.SHORT_NAME,I18n.tr("Cancel"));  removeAction.putValue(Action.SHORT_DESCRIPTION,I18n.tr("Cancel Selected Downloads"));  BTDownload dl=dataLine.getInitializeObject();  exploreAction.setEnabled(dl.isCompleted());  showInLibraryAction.setEnabled(dl.isCompleted());  removeAction.setEnabled(true);  resumeAction.setEnabled(resumable);  pauseAction.setEnabled(pausable);  copyMagnetAction.setEnabled(!isHttpTransfer(dataLine.getInitializeObject()));  copyHashAction.setEnabled(!isHttpTransfer(dataLine.getInitializeObject()));  sendToItunesAction.setEnabled(isTransferFinished && (hasMediaFiles || hasMP4s));  shareTorrentAction.setEnabled(getSelectedDownloaders().length == 1 && dataLine.getInitializeObject().isPausable());  playSingleMediaFileAction.setEnabled(getSelectedDownloaders().length == 1 && hasMediaFiles && isSingleFile);  removeYouTubeAction.setEnabled(isHttpTransfer(dataLine.getInitializeObject()));  BTDownloadActions.REMOVE_TORRENT_ACTION.setEnabled(!isHttpTransfer(dataLine.getInitializeObject()));  BTDownloadActions.REMOVE_TORRENT_AND_DATA_ACTION.setEnabled(!isHttpTransfer(dataLine.getInitializeObject()));}  }
class C{  public int countLines(String fileName) throws IOException {  DataInputStream in=null;  BufferedReader br=null;  int count=0;  try {    FileInputStream fstream=new FileInputStream(fileName);    in=new DataInputStream(fstream);    br=new BufferedReader(new InputStreamReader(in));    String line=null;    while ((line=br.readLine().trim()) != null) {      count++;    }    fstream.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    try {      if (in != null || br != null) {        in.close();        br.close();      }    } catch (    java.io.IOException ex) {    }    return count;  }}  }
class C{  public void columnSelectionChanged(ListSelectionEvent e){}  }
class C{  @Override protected void start(){  if (Cfg.DEBUG) {    Check.log(TAG + " (actualStart)");  }  readChatMessages();}  }
class C{  static public FunctionNode OR(final ValueExpressionNode t1,final ValueExpressionNode t2){  return new FunctionNode(FunctionRegistry.OR,null,new ValueExpressionNode[]{t1,t2});}  }
class C{  public void removeSelectionChangedListener(SelectionChangedListener l){  listenerList.remove(SelectionChangedListener.class,l);}  }
class C{  public String toClassDetailsString() throws Exception {  return toClassDetailsString("=== Detailed Accuracy By Class ===\n");}  }
class C{  public static List<SocketAddress> toSocketAddresses(String endpointUrl) throws IllegalArgumentException {  return toSocketAddresses(endpointUrl,false);}  }
class C{  public void testGetMutlipleSecurityConstraints() throws Exception {  String xml=WEBAPP_TEST_HEADER + "" + "  <security-constraint>"+ "    <web-resource-collection>"+ "      <web-resource-name>wr1</web-resource-name>"+ "      <url-pattern>/url1</url-pattern>"+ "    </web-resource-collection>"+ "  </security-constraint>"+ "  <security-constraint>"+ "    <web-resource-collection>"+ "      <web-resource-name>wr2</web-resource-name>"+ "      <url-pattern>/url2</url-pattern>"+ "    </web-resource-collection>"+ "  </security-constraint>"+ "  <security-constraint>"+ "    <web-resource-collection>"+ "      <web-resource-name>wr3</web-resource-name>"+ "      <url-pattern>/url3</url-pattern>"+ "    </web-resource-collection>"+ "  </security-constraint>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertTrue(WebXmlUtils.hasSecurityConstraint(webXml,"/url1"));  assertTrue(WebXmlUtils.hasSecurityConstraint(webXml,"/url2"));  assertTrue(WebXmlUtils.hasSecurityConstraint(webXml,"/url3"));  List<Element> securityConstraints=webXml.getTags(WebXmlType.SECURITY_CONSTRAINT);  assertEquals(3,securityConstraints.size());}  }
class C{  public TriplesAction(Graph graph,TripleClassifier classifier){  super("Underlinings");  this.graph=graph;  this.classifier=classifier;}  }
class C{  @Nullable public byte[] read(SwapKey key) throws IgniteSpiException {  assert key != null;  final Map<SwapKey,SwapValue> part=partition(key.partition(),false);  if (part == null)   return null;  SwapValue swapVal=part.get(key);  if (swapVal == null)   return null;  return swapVal.value(this);}  }
class C{  public Builder withConnectTimeout(int timeout){  properties.setProperty(NettyOptions.CONNECT_TIMEOUT,String.valueOf(Assert.argNot(timeout,timeout <= 0,"timeout must be positive")));  return this;}  }
class C{  public boolean isDraft(){  return state.pubControl != null ? state.pubControl.isDraft() : false;}  }
class C{  protected void addQueryFuture(long reqId,GridCacheDistributedQueryFuture<?,?,?> fut){  futs.put(reqId,fut);  if (cctx.kernalContext().clientDisconnected()) {    IgniteClientDisconnectedCheckedException err=new IgniteClientDisconnectedCheckedException(cctx.kernalContext().cluster().clientReconnectFuture(),"Query was cancelled, client node disconnected.");    fut.onDone(err);  }}  }
class C{  private void connectToRoomInternal(){  this.roomState=ConnectionState.NEW;  String endpoint=connectionParameters.roomId;  Matcher matcher=IP_PATTERN.matcher(endpoint);  if (!matcher.matches()) {    reportError("roomId must match IP_PATTERN for DirectRTCClient.");    return;  }  String ip=matcher.group(1);  String portStr=matcher.group(matcher.groupCount());  int port;  if (portStr != null) {    try {      port=Integer.parseInt(portStr);    } catch (    NumberFormatException e) {      reportError("Invalid port number: " + portStr);      return;    }  } else {    port=DEFAULT_PORT;  }  tcpClient=new TCPChannelClient(executor,this,ip,port);}  }
class C{  public CommonsExecuter(int connectionTimeout,int readTimeout){  super(connectionTimeout,readTimeout);}  }
class C{  public void throttled(int tenantClass,long latency){  super.finished(Operation.READ,tenantClass,0,latency);}  }
class C{  public BMW224(){  super();}  }
class C{  public void resolveUrls(){  try {    pool=Executors.newFixedThreadPool(numThreads);    BufferedReader buffRead=new BufferedReader(new FileReader(new File(urlsFile)));    String urlStr=null;    while ((urlStr=buffRead.readLine()) != null) {      LOG.info("Starting: " + urlStr);      pool.execute(new ResolverThread(urlStr));    }    buffRead.close();    pool.awaitTermination(60,TimeUnit.SECONDS);  } catch (  Exception e) {    pool.shutdownNow();    LOG.info(StringUtils.stringifyException(e));  }  pool.shutdown();  LOG.info("Total: " + numTotal.get() + ", Resovled: "+ numResolved.get()+ ", Errored: "+ numErrored.get()+ ", Average Time: "+ totalTime.get() / numTotal.get());}  }
class C{  protected TreeMaker(JCCompilationUnit toplevel,Names names,Types types,Symtab syms){  this.pos=Position.FIRSTPOS;  this.toplevel=toplevel;  this.names=names;  this.types=types;  this.syms=syms;}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  @Override public void nodeChanged(){  log.info("Property info changed. Waking up the property manager...");  wakeup();}  }
class C{  public boolean containsLong(long value){  for (int i=1; i < maxPoolSize; i++) {    if (types[i] == LONG && readLong(i) == value)     return true;  }  return false;}  }
class C{  private void updateRange(double x,double y){  mMinX=Math.min(mMinX,x);  mMaxX=Math.max(mMaxX,x);  mMinY=Math.min(mMinY,y);  mMaxY=Math.max(mMaxY,y);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.373 -0500",hash_original_method="6F4F1101C93AB1BC6C07B08D53A20694",hash_generated_method="709122F3FC3CBE9DAF24DE329B626AA2") public void disableLogging(){  this.getStackLogger().disableLogging();}  }
class C{  @SuppressWarnings("unchecked") static private <T>T newInstance(final String className,final Class<T> iface){  if (iface == null)   throw new IllegalArgumentException();  if (className == null) {    return null;  }  try {    final Class cls=Class.forName(className);    if (!iface.isAssignableFrom(cls)) {      throw new IllegalArgumentException("Does not implement " + cls + " : "+ className);    }    return (T)cls.getConstructor(new Class[]{}).newInstance(new Object[]{});  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public int nextIntFromTo(int from,int to){  return (int)((long)from + (long)((1L + (long)to - (long)from) * randomGenerator.nextDouble()));}  }
class C{  public String toString(){  return "Action (priority " + priority + ", lookahead "+ kind+ ") :"+ Out.NL+ content;}  }
class C{  @Get("json") public DebugEventInfoOutput handleEventInfoQuery(){  Option choice=Option.ERROR_BAD_PARAM;  DebugEventInfoOutput output;  String laststr=getQueryValue("last");  int last=Integer.MAX_VALUE;  try {    if (laststr != null)     last=Integer.valueOf(laststr);    if (last < 1)     last=Integer.MAX_VALUE;  } catch (  NumberFormatException e) {    output=new DebugEventInfoOutput(false);    output.error="Expected an integer requesting last X events;" + " received " + laststr;    return output;  }  String param1=(String)getRequestAttributes().get("param1");  String param2=(String)getRequestAttributes().get("param2");  if (param1 == null) {    output=new DebugEventInfoOutput(true);    return listEvents(output);  } else   if (param1.equals("all")) {    output=new DebugEventInfoOutput(false);    output.error="Cannot retrieve all events - please select a specific event";    return output;  }  if (param2 == null) {    output=new DebugEventInfoOutput(true);    boolean isRegistered=debugEvent.containsModuleName(param1);    if (isRegistered) {      return listEvents(param1,output);    } else {      choice=Option.ERROR_BAD_MODULE_NAME;    }  } else   if (param2.equals("all")) {    output=new DebugEventInfoOutput(false);    output.error="Cannot retrieve all events - please select a specific event";    return output;  } else {    boolean isRegistered=debugEvent.containsModuleEventName(param1,param2);    if (isRegistered) {      choice=Option.ONE_MODULE_EVENT;    } else {      choice=Option.ERROR_BAD_MODULE_EVENT_NAME;    }  }  output=new DebugEventInfoOutput(false);switch (choice) {case ONE_MODULE:    populateEvents(debugEvent.getModuleEventHistory(param1),output);  break;case ONE_MODULE_EVENT:populateSingleEvent(debugEvent.getSingleEventHistory(param1,param2,last),output);break;case ERROR_BAD_MODULE_NAME:output.error="Module name has no corresponding registered events";break;case ERROR_BAD_MODULE_EVENT_NAME:output.error="Event not registered";break;case ERROR_BAD_PARAM:default :output.error="Bad param";}return output;}  }
class C{  public NokiaPictureMessage(byte[] bitmapData,String msg,boolean asUnicode){  addBitmap(bitmapData);  addText(msg,asUnicode);}  }
class C{  final boolean shouldMapTextChar(int value){  if (value < ASCII_MAX)   return shouldMapTextChar_ASCII[value];  return get(value);}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public void updateBytes(String columnName,byte[] x) throws SQLException {  updateBytes(findColumn(columnName),x);}  }
class C{  @android.view.RemotableViewMethod public void showPrevious(){  setDisplayedChild(mWhichChild - 1);}  }
class C{  public static String startEditor(Container jc,String header,String text,boolean editable){  JFrame frame=Env.getFrame(jc);  HTMLEditor ed=new HTMLEditor(frame,header,text,editable);  String s=ed.getHtmlText();  ed=null;  return s;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public ReplicationJob createJobForCopyTable(long auditLogId,long auditLogEntryCreateTime,Table table) throws StateUpdateException {  ReplicationOperation replicationOperation=HiveUtils.isPartitioned(table) ? ReplicationOperation.COPY_PARTITIONED_TABLE : ReplicationOperation.COPY_UNPARTITIONED_TABLE;  Map<String,String> extras=new HashMap<>();  extras.put(PersistedJobInfo.AUDIT_LOG_ID_EXTRAS_KEY,Long.toString(auditLogId));  extras.put(PersistedJobInfo.AUDIT_LOG_ENTRY_CREATE_TIME_KEY,Long.toString(auditLogEntryCreateTime));  PersistedJobInfo persistedJobInfo=jobInfoStore.resilientCreate(replicationOperation,ReplicationStatus.PENDING,ReplicationUtils.getLocation(table),srcCluster.getName(),new HiveObjectSpec(table),Collections.emptyList(),ReplicationUtils.getTldt(table),Optional.empty(),Optional.empty(),extras);  HiveObjectSpec spec=new HiveObjectSpec(table);  Optional<Path> tableLocation=ReplicationUtils.getLocation(table);switch (replicationOperation) {case COPY_UNPARTITIONED_TABLE:    return new ReplicationJob(conf,new CopyUnpartitionedTableTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,spec,tableLocation,directoryCopier,true),onStateChangeHandler,persistedJobInfo);case COPY_PARTITIONED_TABLE:  return new ReplicationJob(conf,new CopyPartitionedTableTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,spec,tableLocation),onStateChangeHandler,persistedJobInfo);default :throw new RuntimeException("Unhandled operation " + replicationOperation);}}  }
class C{  protected Object clone(){  MarkerSegment newGuy=null;  try {    newGuy=(MarkerSegment)super.clone();  } catch (  CloneNotSupportedException e) {  }  if (this.data != null) {    newGuy.data=(byte[])data.clone();  }  return newGuy;}  }
class C{  protected void drawContentTiles(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  try {    gl.glPolygonMode(GL2.GL_FRONT,GL2.GL_FILL);    gl.glEnable(GL.GL_TEXTURE_2D);    OGLUtil.applyBlending(gl,true);    Texture texture=dc.getTextureCache().getTexture(this.textureCacheKey);    if (texture == null)     return;    texture.bind(gl);    for (    ContentTile tile : tiles) {      TextureTile textureTile=this.getTextureTile(tile);      if (textureTile == null) {        continue;      }      int tileX=textureTile.column * this.textureTileDimension;      int tileY=textureTile.row * this.textureTileDimension;      Rectangle tileScreenBounds=this.getContentTileBounds(tile.row,tile.column);      Rectangle clippedTileBounds=tileScreenBounds.intersection(this.contentBounds);      if (clippedTileBounds.isEmpty()) {        continue;      }      Rectangle subTileBounds=new Rectangle(tileX + clippedTileBounds.x - tileScreenBounds.x,tileY + clippedTileBounds.y - tileScreenBounds.y,clippedTileBounds.width,clippedTileBounds.height);      gl.glPushMatrix();      try {        gl.glTranslated(clippedTileBounds.x,clippedTileBounds.y,0.0f);        gl.glColor4f(1,1,1,(float)this.getActiveAttributes().getForegroundOpacity());        TextureCoords texCoords=texture.getSubImageTexCoords((int)subTileBounds.getMinX(),(int)subTileBounds.getMinY(),(int)subTileBounds.getMaxX(),(int)subTileBounds.getMaxY());        gl.glScaled(subTileBounds.width,subTileBounds.height,1d);        dc.drawUnitQuad(texCoords);      }  finally {        gl.glPopMatrix();      }    }  }  finally {    gl.glDisable(GL.GL_TEXTURE_2D);    gl.glBindTexture(GL.GL_TEXTURE_2D,0);  }}  }
class C{  public static double min(double x,double y){  return Double.isNaN(x) ? y : Double.isNaN(y) ? x : Math.min(x,y);}  }
class C{  public static String constructConfigName(String configName,StringMap scope){  StringBuilder builder=new StringBuilder();  for (  Map.Entry<String,String> entry : scope.entrySet()) {    builder.append(entry.getKey());    builder.append(".");    builder.append(entry.getValue());    builder.append(".");  }  builder.append(configName);  return builder.toString();}  }
class C{  public synchronized boolean cancelUpload(String username,String submissionID){  TransferObject obj=userToUploadMap.get(username);  if (obj == null || submissionID != null && !obj.getStruct().getSubmissionID().equals(submissionID)) {    return false;  }  uploadTimeoutQueue.remove(obj);  userToUploadMap.remove(obj.getStruct().getUsername());  obj.getFile().delete();  return true;}  }
class C{  public void prepare(){  prepare(null);}  }
class C{  public final boolean isAutoExpand(){  return autoExpand;}  }
class C{  protected List<String> parseRobotsTxt(InputStream is) throws IOException {  List<String> disallows=new ArrayList<>();  BufferedReader r=new BufferedReader(new InputStreamReader(is,StandardCharsets.UTF_8));  String l;  while ((l=r.readLine()) != null) {    String[] arr=l.split("#");    if (arr.length == 0)     continue;    l=arr[0].trim();    if (l.startsWith(DISALLOW)) {      l=l.substring(DISALLOW.length()).trim();      if (l.length() == 0)       continue;      disallows.add(l);    }  }  is.close();  return disallows;}  }
class C{  public static boolean isEqualMethod(IMethodBinding method,String methodName,String[] parameters){  if (!method.getName().equals(methodName))   return false;  ITypeBinding[] methodParameters=method.getParameterTypes();  if (methodParameters.length != parameters.length)   return false;  String first, second;  int index;  for (int i=0; i < parameters.length; i++) {    first=parameters[i];    index=first.indexOf('<');    if (index > 0)     first=first.substring(0,index);    second=methodParameters[i].getErasure().getQualifiedName();    index=second.indexOf('<');    if (index > 0)     second=second.substring(0,index);    if (!first.equals(second))     return false;  }  return true;}  }
class C{  private IResourceRuleFactory factoryFor(IResource destination){  IResourceRuleFactory fac=projectsToRules.get(destination.getFullPath().segment(0));  if (fac == null) {    if (!destination.getProject().isAccessible())     return defaultFactory;    fac=teamHook.getRuleFactory(destination.getProject());    projectsToRules.put(destination.getFullPath().segment(0),fac);  }  return fac;}  }
class C{  public HttpURL(final String host,final int port,final String path) throws URIException {  this(null,null,host,port,path,null,null);}  }
class C{  public final boolean playerBlack(){switch (modeNr) {case PLAYER_BLACK:case TWO_PLAYERS:case ANALYSIS:case EDIT_GAME:    return true;default :  return false;}}  }
class C{  @ObjectiveCName("rawPersistentRequestWithService:withMethod:WithParams:") public void rawPersistentRequest(String service,String method,ApiRawValue params){  modules.getExternalModule().rawPersistentRequest(service,method,params);}  }
class C{  public ChangeASIAction(JTree tree,JFrame window){  super(COMMAND,window);  this.tree=tree;}  }
class C{  FastShortMessage(ShortMessage msg){  this.packedMsg=msg.getStatus() | (msg.getData1() << 8) | (msg.getData2() << 16);}  }
class C{  private void initializeLiveAttributes(){  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);  edgeMode=createLiveAnimatedEnumeration(null,SVG_EDGE_MODE_ATTRIBUTE,EDGE_MODE_VALUES,(short)1);  bias=createLiveAnimatedNumber(null,SVG_BIAS_ATTRIBUTE,0f);  preserveAlpha=createLiveAnimatedBoolean(null,SVG_PRESERVE_ALPHA_ATTRIBUTE,false);}  }
class C{  public static MemberDialog createEditMemberDialog(final JFrame owner,final TypeManager typeManager,final TypeMember member){  return new MemberDialog(owner,typeManager,member);}  }
class C{  public boolean isEmulated(){  return mIsEmulated;}  }
class C{  VcfFilterStripper(Set<String> filterList,boolean keep){  mRemoveAll=false;  mKeepMode=keep;  mFilters=filterList;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.PROPERTY__CONST:    setConst(CONST_EDEFAULT);  return;case TypesPackage.PROPERTY__READONLY:setReadonly(READONLY_EDEFAULT);return;case TypesPackage.PROPERTY__EXTERNAL:setExternal(EXTERNAL_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public boolean hasStartDate(){  return hasExtension(StartDate.class);}  }
class C{  public static StringBuilder navurl(final RequestHeader.FileType ext,final int page,final QueryParams theQuery,final String newQueryString,boolean newModifierReplacesOld){  final StringBuilder sb=navurlBase(ext,theQuery,newQueryString,newModifierReplacesOld);  sb.append("&startRecord=");  sb.append(page * theQuery.itemsPerPage());  return sb;}  }
class C{  public static String urlDecode(String str){  try {    return (URLDecoder.decode(str,"utf-8"));  } catch (  Exception e) {    return ("Decoding error");  }}  }
class C{  public static double PPVNPVfitness(boolean useTrainingData,GEPIndividual ind){  double PPVNPV=PPVNPVrawFitness(useTrainingData,ind,0);  return (1000.0 * PPVNPV);}  }
class C{  public static DetachedBaggage deserialize(byte[] bytes){  return wrap(BaggageImpl.deserialize(bytes));}  }
class C{  public void addFoundErrors(final int errorsToAdd){  isTrue(errorsToAdd > 0,"Cannot add negative number of errors");  totalResourcesWithErrors++;  totalFoundErrors+=errorsToAdd;}  }
class C{  public DbException addSQL(String sql){  SQLException e=getSQLException();  if (e instanceof JdbcSQLException) {    JdbcSQLException j=(JdbcSQLException)e;    if (j.getSQL() == null) {      j.setSQL(sql);    }    return this;  }  e=new JdbcSQLException(e.getMessage(),sql,e.getSQLState(),e.getErrorCode(),e,null);  return new DbException(e);}  }
class C{  public Attribute(String name,String value){  this(null,name,value);}  }
class C{  public boolean isCurrentServiceInvalidNow(){  return invalidateRefs;}  }
class C{  public boolean isId(Attr node){  if (node.getNamespaceURI() == null) {    return SVG_ID_ATTRIBUTE.equals(node.getNodeName());  }  return node.getNodeName().equals(XML_ID_QNAME);}  }
class C{  public static Range findRangeBounds(XYDataset dataset,List visibleSeriesKeys,Range xRange,boolean includeInterval){  ParamChecks.nullNotPermitted(dataset,"dataset");  Range result;  if (dataset instanceof XYRangeInfo) {    XYRangeInfo info=(XYRangeInfo)dataset;    result=info.getRangeBounds(visibleSeriesKeys,xRange,includeInterval);  } else {    result=iterateToFindRangeBounds(dataset,visibleSeriesKeys,xRange,includeInterval);  }  return result;}  }
class C{  public JSweetTranspiler(File tsOutputDir,File jsOutputDir,File extractedCandiesJavascriptDir,String classPath){  this(new File(TMP_WORKING_DIR_NAME),tsOutputDir,jsOutputDir,extractedCandiesJavascriptDir,classPath);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.950 -0400",hash_original_method="1A943425CA4F660D14F7D119D0C80385",hash_generated_method="C892A85E8A4B335D66BDBCBB39D56DF6") @Override protected void afterRead(int n) throws IOException {  if (n == -1) {    close();  }}  }
class C{  protected ArrayLikeImpl(){  super();}  }
class C{  public String globalInfo(){  return "A filter that removes instances which are incorrectly classified. " + "Useful for removing outliers.";}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator){  float density;  if (keys.length == 0) {    density=0;  } else {    density=(float)keys.length / (keys[keys.length - 1] - keys[0] + 1);  }  tableSwitch(keys,generator,density >= 0.5f);}  }
class C{  public void removeSuperClass(ClassType type){  if (null == superClasses) {    return;  }  superClasses.remove(type);}  }
class C{  public boolean isShowAxes(){  return mShowAxes;}  }
class C{  public static int pickFromDistribution(final double[] probabilities,final double prob){  return pickFromDistribution(probabilities,prob,CHECKBOUNDARY);}  }
class C{  @HystrixCommand void bottle(Wort wort,String processId){  log.info("I'm inside bottling");  Span span=tracer.createSpan("inside_bottling");  try {    notifyPresenting(processId);    bottlingWorker.bottleBeer(wort.getWort(),processId,TEST_CONFIG.get());  }  finally {    tracer.close(span);  }}  }
class C{  public void cancelAll(){synchronized (mUnFinishQueue) {    for (    Request<?> request : mUnFinishQueue)     request.cancel();  }}  }
class C{  public JMRIClientTurnout(int number,JMRIClientSystemConnectionMemo memo){  super(memo.getSystemPrefix() + "t" + number);  _number=number;  tc=memo.getJMRIClientTrafficController();  prefix=memo.getSystemPrefix();  transmitName=memo.getTransmitPrefix() + "T" + number;  _validFeedbackTypes|=MONITORING;  _activeFeedbackType=MONITORING;  setModeInformation(_validFeedbackNames,_validFeedbackModes);  _validFeedbackNames=getModeNames();  _validFeedbackModes=getModeValues();  tc.addJMRIClientListener(this);  requestUpdateFromLayout();}  }
class C{  public B genome(final ReaderParams params){  mGenome=params;  return self();}  }
class C{  public Object clone(){  return new AttributedCharacterSpanIterator((AttributedCharacterIterator)aci.clone(),begin,end);}  }
class C{  protected int index(char val){  int hash, probe, index, length;  final byte[] states=_states;  final char[] set=_set;  length=states.length;  hash=HashFunctions.hash(val) & 0x7fffffff;  index=hash % length;  byte state=states[index];  if (state == FREE)   return -1;  if (state == FULL && set[index] == val)   return index;  return indexRehashed(val,index,hash,state);}  }
class C{  public static void localVarValueChanged(Object newValue,String localVar,int lineNumber){  instance.localVarValueChanged(localVar,lineNumber,newValue);}  }
class C{  public void init(Source.Context context,String groupName,String prefix,List<Stage.ConfigIssue> issues){  List<String> elConfigs=ImmutableList.of("resourceUrl","requestBody");  for (  String configName : elConfigs) {    ELVars vars=context.createELVars();    vars.addVariable(START_AT,0);    ELEval eval=context.createELEval(configName);    try {      eval.eval(vars,(String)getClass().getField(configName).get(this),String.class);    } catch (    ELEvalException|NoSuchFieldException|IllegalAccessException e) {      LOG.error(Errors.HTTP_06.getMessage(),e.toString(),e);      issues.add(context.createConfigIssue(groupName,prefix + configName,Errors.HTTP_06,e.toString()));    }  }  client.init(context,Groups.PROXY.name(),prefix + "client.",issues);  ELVars headerVars=context.createELVars();  ELEval headerEval=context.createELEval("headers");  for (  String headerValue : headers.values()) {    try {      headerEval.eval(headerVars,headerValue,String.class);    } catch (    ELEvalException e) {      LOG.error(Errors.HTTP_06.getMessage(),e.toString(),e);      issues.add(context.createConfigIssue(groupName,prefix + "headers",Errors.HTTP_06,e.toString()));    }  }}  }
class C{  private boolean prepareTx(final long txId) throws RemoteTransactionNotFoundException {  if (!isReadWriteTx(txId)) {    return true;  }  final ConnectOptions opts=new ConnectOptions(mgr.getBaseServiceURL() + "/tx/" + Long.toString(txId));  opts.method="POST";  opts.addRequestParam("PREPARE");  JettyResponseListener response=null;  try {    final JettyResponseListener listener=RemoteRepository.checkResponseCode(response=mgr.doConnect(opts));switch (listener.getStatus()) {case 200:      return true;default :    throw new HttpException(listener.getStatus(),"status=" + listener.getStatus() + ", reason"+ listener.getReason());}} catch (HttpException ex) {switch (ex.getStatusCode()) {case 404:  throw new RemoteTransactionNotFoundException(txId,mgr.getBaseServiceURL());case 409:return false;default :throw new RuntimeException(ex);}}catch (Exception t) {throw new RuntimeException(t);} finally {if (response != null) response.abort();}}  }
class C{  public NumberCellRenderer(NumberFormat nf){  if (nf == null) {    throw new NullPointerException();  }  this.nf=nf;  setHorizontalAlignment(JLabel.RIGHT);  setFont(new Font("Serif",Font.PLAIN,12));}  }
class C{  public Boolean isVmDirectPathGen2Supported(){  return vmDirectPathGen2Supported;}  }
class C{  public final String join(Object first,Object second,Object... rest){  return join(iterable(first,second,rest));}  }
class C{  private boolean checkIfRuleWorksInSwitch(int ruleId,String dpid){  return ruleId2Dpid.containsKey(ruleId) && ruleId2Dpid.get(ruleId).contains(dpid);}  }
class C{  public XPathException(String message){  super(message);  if (message == null) {    throw new NullPointerException("message == null");  }  this.cause=null;}  }
class C{  public int scanBuiltInGroovySciClasses(String jarFileName) throws IOException {  String groovySciDir="groovySci";  int libPathLen=groovySciDir.length();  int numGroovyLoadedClasses=0;  int numGroovyMethods=0;  JarEntry je;  JarInputStream jis=new JarInputStream(new BufferedInputStream(new FileInputStream(jarFileName)));  while ((je=jis.getNextJarEntry()) != null) {    String nameOfEntry=je.toString();    if (nameOfEntry.toLowerCase().contains("javafx") == false) {      int strLen=nameOfEntry.length();      if (strLen > libPathLen) {        int idxSeparator=nameOfEntry.indexOf('/');        if (idxSeparator != -1) {          nameOfEntry=nameOfEntry.substring(0,idxSeparator);          if (nameOfEntry.equalsIgnoreCase(groovySciDir)) {            String name='/' + je.getName().replace('\\','/');            int pathLen=libPathLen;            String remainingClassName=name.substring(pathLen + 1,name.length());            String javaName=name.replace('/','.');            int idx=javaName.lastIndexOf(".class");            if (idx != -1) {              int javaNameLen=javaName.length();              boolean classStringIsWithinName=javaNameLen > (idx + ".class".length());              if (!classStringIsWithinName) {                javaName=javaName.substring(1,idx);                Class foundClass=null;                try {                  foundClass=foundClass=GlobalValues.GroovyShell.getClassLoader().loadClass(javaName);                } catch (                ClassNotFoundException e) {                  foundClass=null;                }                if (foundClass != null) {                  Method[] classMethods=foundClass.getDeclaredMethods();                  for (                  Method currentMethod : classMethods) {                    if (Modifier.isPublic(currentMethod.getModifiers())) {                      String methodName=currentMethod.getName();                      Class<?>[] methodArgs=currentMethod.getParameterTypes();                      StringBuilder args=new StringBuilder();                      int nargs=methodArgs.length;                      int argcnt=0;                      for (                      Class arg : methodArgs) {                        args.append(arg.getName());                        if (++argcnt < nargs)                         args.append(", ");                      }                      methodName=methodName + "(" + args.toString()+ ")";                      if (AutoCompletionGroovySci.scanMethodsGroovySci.indexOf(methodName) == -1) {                        AutoCompletionGroovySci.scanMethodsGroovySci.add(methodName);                        numGroovyMethods++;                      }                    }                  }                }              }              if (javaName.indexOf("$") == -1) {                String smallName=javaName.substring(javaName.lastIndexOf(".") + 1,javaName.length());                String nameToInsert=smallName + GlobalValues.smallNameFullPackageSeparator + javaName;                AutoCompletionGroovySci.scanMethodsGroovySci.add(nameToInsert);                numGroovyLoadedClasses++;              }            }          }        }      }    }  }  jis.close();  System.out.println("GroovySci  LoadedClasses = " + numGroovyLoadedClasses + ", GroovySci Methods = "+ numGroovyMethods);  System.out.println("Groovy Classes = " + numGroovyLoadedClasses);  System.out.println("Groovy Methods = " + numGroovyMethods);  return numGroovyLoadedClasses;}  }
class C{  private void changeSelectedModsEnabled(final Boolean enabled){  final InstExtModConfsBean confsBean=LEnv.LAUNCHER_SETTINGS.get(LSettings.INST_EXT_MOD_CONFS).cloneBean();  for (  final int row : table.getSelectedModelRows())   confsBean.getModuleConfForFolder(((ExtModManifestBean)table.getModel().getValueAt(row,manifestBeanColIdx)).getFolder(),true).setEnabled(enabled);  LEnv.LAUNCHER_SETTINGS.set(LSettings.INST_EXT_MOD_CONFS,confsBean);  rebuildTable();}  }
class C{  public void addLinkedPositionProposal(String groupID,ITypeBinding type){  getLinkedProposalModel().getPositionGroup(groupID,true).addProposal(type,getCompilationUnit(),10);}  }
class C{  public static String spiAttribute(IgniteSpi spi,String attrName){  assert spi != null;  assert spi.getName() != null;  return spi.getName() + '.' + attrName;}  }
class C{  public void test_equalsLjava_lang_Object(){  try {    MockAttributedCharacterIteratorAttribute mac1=new MockAttributedCharacterIteratorAttribute("test1");    MockAttributedCharacterIteratorAttribute mac2=new MockAttributedCharacterIteratorAttribute("test2");    assertFalse("Attributes are equal",mac2.equals(mac1));    TestAttributedCharacterIteratorAttribute mac3=new TestAttributedCharacterIteratorAttribute("test1");    assertFalse("Attributes are equal",mac3.equals(mac1));    AttributedCharacterIterator.Attribute mac4=mac1;    assertTrue("Attributes are non-equal",mac4.equals(mac1));  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public int initialCapacity(){  return (_freeBuffer == null) ? 0 : _freeBuffer.length;}  }
class C{  private void resumeCurrentTrack(){  if (!isRecording() || !isPaused()) {    Log.d(TAG,"Ignore resumeCurrentTrack. Not recording or not paused.");    return;  }  recordingTrackPaused=false;  PreferencesUtils.setBoolean(this,R.string.recording_track_paused_key,false);  Track track=myTracksProviderUtils.getTrack(recordingTrackId);  if (track != null) {    Location resume=new Location(LocationManager.GPS_PROVIDER);    resume.setLongitude(0);    resume.setLatitude(RESUME_LATITUDE);    resume.setTime(System.currentTimeMillis());    insertLocation(track,resume,null);  }  startRecording(false);}  }
class C{  private int compare50(IType m1,IType m2){  IJavaElement firstAncestor1=getFirstAncestor(m1);  IJavaElement firstAncestor2=getFirstAncestor(m2);  int compilePrio1=getCompilePrio(m1,firstAncestor1);  int compilePrio2=getCompilePrio(m2,firstAncestor2);  if (compilePrio1 > compilePrio2) {    return -1;  } else   if (compilePrio1 < compilePrio2) {    return 1;  } else {    return sourceComparator.compare(m1,m2);  }}  }
class C{  private void persistStatsInDB(List<Stat> stats) throws BaseCollectionException {  if (!stats.isEmpty()) {    _keyMap.put(Constants._Stats,stats);    dumpStatRecords();    injectStats();    stats.clear();  }}  }
class C{  public ReferenceBinding askForType(char[][] compoundName){  NameEnvironmentAnswer answer=this.nameEnvironment.findType(compoundName);  if (answer == null)   return null;  if (answer.isBinaryType()) {    this.typeRequestor.accept(answer.getBinaryType(),computePackageFrom(compoundName,false),answer.getAccessRestriction());  } else   if (answer.isCompilationUnit()) {    this.typeRequestor.accept(answer.getCompilationUnit(),answer.getAccessRestriction());  } else   if (answer.isSourceType()) {    this.typeRequestor.accept(answer.getSourceTypes(),computePackageFrom(compoundName,false),answer.getAccessRestriction());  }  return getCachedType(compoundName);}  }
class C{  private void ensureResultLength(FloatMatrix other,FloatMatrix result){  if (!sameLength(result)) {    if (result == this || result == other) {      throw new SizeException("Cannot resize result matrix because it is used in-place.");    }    result.resize(rows,columns);  }}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  UserDao.createTable(db,ifNotExists);}  }
class C{  public void removeAll(){  handlers.clear();  genericHandlers.clear();}  }
class C{  public static void preLoadImages(final Picasso imageLoader,final List<? extends ShopifyObject> objects,final int lastVisibleIndex,final int numberToLoad,int parentWidth,int parentHeight,final boolean crop){  if (CollectionUtils.isEmpty(objects)) {    return;  }  List<String> imageUrls=new ArrayList<>();  for (int i=lastVisibleIndex + 1; i < (lastVisibleIndex + 1 + numberToLoad) && i < objects.size(); i++) {    ShopifyObject object=objects.get(i);    String url=null;    if (object instanceof Collection) {      url=com.shopify.buy.utils.ImageUtility.stripQueryFromUrl(((Collection)object).getImageUrl());    } else     if (object instanceof Product) {      url=com.shopify.buy.utils.ImageUtility.stripQueryFromUrl(((Product)object).getFirstImageUrl());    }    if (!TextUtils.isEmpty(url)) {      imageUrls.add(url);    }  }  for (  String imageUrl : imageUrls) {    imageUrl=getSizedImageUrl(imageUrl,parentWidth,parentHeight);    RequestCreator c=imageLoader.load(imageUrl).resize(parentWidth,parentHeight);    if (crop) {      c=c.centerCrop();    } else {      c=c.centerInside();    }    c.fetch();  }}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  this.changeSupport.removePropertyChangeListener(listener);}  }
class C{  public Credentials withStoreOnlyToken(boolean storeOnlyToken){  this.storeOnlyToken=storeOnlyToken;  return this;}  }
class C{  public GF2Polynomial shiftRight(){  GF2Polynomial result=new GF2Polynomial(len - 1);  int i;  System.arraycopy(value,0,result.value,0,result.blocks);  for (i=0; i <= result.blocks - 2; i++) {    result.value[i]>>>=1;    result.value[i]|=result.value[i + 1] << 31;  }  result.value[result.blocks - 1]>>>=1;  if (result.blocks < blocks) {    result.value[result.blocks - 1]|=value[result.blocks] << 31;  }  return result;}  }
class C{  public final Vec2D snapToAxis(){  if (MathUtils.abs(x) < 0.5f) {    x=0;  } else {    x=x < 0 ? -1 : 1;    y=0;  }  if (MathUtils.abs(y) < 0.5f) {    y=0;  } else {    y=y < 0 ? -1 : 1;    x=0;  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:54.552 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="74B066602ECC20A74FD97E770D65E8BD") public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public void logSdkEvent(String eventName,Double valueToSum,Bundle parameters){  logEvent(eventName,valueToSum,parameters,true);}  }
class C{  private Point2D calculateLabelAnchorPoint(ItemLabelAnchor anchor,Rectangle2D bar,PlotOrientation orientation){  Point2D result=null;  double offset=getItemLabelAnchorOffset();  double x0=bar.getX() - offset;  double x1=bar.getX();  double x2=bar.getX() + offset;  double x3=bar.getCenterX();  double x4=bar.getMaxX() - offset;  double x5=bar.getMaxX();  double x6=bar.getMaxX() + offset;  double y0=bar.getMaxY() + offset;  double y1=bar.getMaxY();  double y2=bar.getMaxY() - offset;  double y3=bar.getCenterY();  double y4=bar.getMinY() + offset;  double y5=bar.getMinY();  double y6=bar.getMinY() - offset;  if (anchor == ItemLabelAnchor.CENTER) {    result=new Point2D.Double(x3,y3);  } else   if (anchor == ItemLabelAnchor.INSIDE1) {    result=new Point2D.Double(x4,y4);  } else   if (anchor == ItemLabelAnchor.INSIDE2) {    result=new Point2D.Double(x4,y4);  } else   if (anchor == ItemLabelAnchor.INSIDE3) {    result=new Point2D.Double(x4,y3);  } else   if (anchor == ItemLabelAnchor.INSIDE4) {    result=new Point2D.Double(x4,y2);  } else   if (anchor == ItemLabelAnchor.INSIDE5) {    result=new Point2D.Double(x4,y2);  } else   if (anchor == ItemLabelAnchor.INSIDE6) {    result=new Point2D.Double(x3,y2);  } else   if (anchor == ItemLabelAnchor.INSIDE7) {    result=new Point2D.Double(x2,y2);  } else   if (anchor == ItemLabelAnchor.INSIDE8) {    result=new Point2D.Double(x2,y2);  } else   if (anchor == ItemLabelAnchor.INSIDE9) {    result=new Point2D.Double(x2,y3);  } else   if (anchor == ItemLabelAnchor.INSIDE10) {    result=new Point2D.Double(x2,y4);  } else   if (anchor == ItemLabelAnchor.INSIDE11) {    result=new Point2D.Double(x2,y4);  } else   if (anchor == ItemLabelAnchor.INSIDE12) {    result=new Point2D.Double(x3,y4);  } else   if (anchor == ItemLabelAnchor.OUTSIDE1) {    result=new Point2D.Double(x5,y6);  } else   if (anchor == ItemLabelAnchor.OUTSIDE2) {    result=new Point2D.Double(x6,y5);  } else   if (anchor == ItemLabelAnchor.OUTSIDE3) {    result=new Point2D.Double(x6,y3);  } else   if (anchor == ItemLabelAnchor.OUTSIDE4) {    result=new Point2D.Double(x6,y1);  } else   if (anchor == ItemLabelAnchor.OUTSIDE5) {    result=new Point2D.Double(x5,y0);  } else   if (anchor == ItemLabelAnchor.OUTSIDE6) {    result=new Point2D.Double(x3,y0);  } else   if (anchor == ItemLabelAnchor.OUTSIDE7) {    result=new Point2D.Double(x1,y0);  } else   if (anchor == ItemLabelAnchor.OUTSIDE8) {    result=new Point2D.Double(x0,y1);  } else   if (anchor == ItemLabelAnchor.OUTSIDE9) {    result=new Point2D.Double(x0,y3);  } else   if (anchor == ItemLabelAnchor.OUTSIDE10) {    result=new Point2D.Double(x0,y5);  } else   if (anchor == ItemLabelAnchor.OUTSIDE11) {    result=new Point2D.Double(x1,y6);  } else   if (anchor == ItemLabelAnchor.OUTSIDE12) {    result=new Point2D.Double(x3,y6);  }  return result;}  }
class C{  public void testCountEmptyResult(){  cleanTable();  populateTable();  From from=new Select().from(MockModel.class).where("intField = ?",3);  final List<MockModel> list=from.execute();  final int count=from.count();  assertEquals(0,count);  assertEquals(list.size(),count);}  }
class C{  final boolean shouldMapAttrChar(int value){  if (value < ASCII_MAX)   return shouldMapAttrChar_ASCII[value];  return get(value);}  }
class C{  public void shutdown(){  if (!service.isTerminated()) {    shutdownIn(0,TimeUnit.SECONDS);  }  try {    shutdownCountDownLatch.await();  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearScore(){  fieldSetFlags()[16]=false;  return this;}  }
class C{  private static InputStream checkGZipped(InputStream stream) throws IOException {  PushbackInputStream pb=new PushbackInputStream(stream,2);  byte[] signature=new byte[2];  pb.read(signature);  pb.unread(signature);  if (signature[0] == (byte)0x1f && signature[1] == (byte)0x8b)   return new GZIPInputStream(pb);  return pb;}  }
class C{  protected void engineInit(int keysize,SecureRandom random){  this.keysize=(keysize + 7) / 8;  this.engineInit(random);}  }
class C{  public static String stringFor(int m){switch (m) {case cudaFormatModeForced:    return "cudaFormatModeForced";case cudaFormatModeAuto:  return "cudaFormatModeAuto";}return "INVALID cudaSurfaceFormatMode: " + m;}  }
class C{  public static float[] nullToEmpty(final float[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_FLOAT_ARRAY;  }  return array;}  }
class C{  final void advance(){  if (next == null)   throw new NoSuchElementException();  lastReturned=next;  for (; ; ) {    next=next.next;    if (next == null)     break;    Object x=next.value;    if (x != null && x != next) {      nextValue=(V)x;      break;    }  }}  }
class C{  MemberHealthEvaluator(GemFireHealthConfig config,DM dm){  super(config,dm);  this.config=config;  InternalDistributedSystem system=dm.getSystem();  GemFireStatSampler sampler=system.getStatSampler();  if (sampler != null) {    this.processStats=sampler.getProcessStats();  }  this.dmStats=dm.getStats();  StringBuffer sb=new StringBuffer();  sb.append("Application VM member ");  sb.append(dm.getId());  int pid=OSProcess.getId();  if (pid != 0) {    sb.append(" with pid ");    sb.append(pid);  }  this.description=sb.toString();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.264 -0500",hash_original_method="8E684FA0ECF2833FC98AE584F5004E57",hash_generated_method="0C6BC82ACD7D70E8489D62B197489044") public ParserConfigurationException(){}  }
class C{  public double optDouble(int index){  return this.optDouble(index,Double.NaN);}  }
class C{  public void close(){}  }
class C{  private void cmd_EFT(){  if (fPaymentRule.getSelectedItem() == null)   return;  String PaymentRule=fPaymentRule.getSelectedItem().toValueNamePair().getValue();  log.info(PaymentRule);  if (!getChecks(PaymentRule))   return;  dispose();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TYPE_ALIAS__TYPE_SPECIFIER:    setTypeSpecifier((TypeSpecifier)null);  return;case TypesPackage.TYPE_ALIAS__NAME:setName(NAME_EDEFAULT);return;case TypesPackage.TYPE_ALIAS__ANNOTATIONS:getAnnotations().clear();return;case TypesPackage.TYPE_ALIAS__CONSTRAINT:getConstraint().clear();return;case TypesPackage.TYPE_ALIAS__ABSTRACT:setAbstract(ABSTRACT_EDEFAULT);return;case TypesPackage.TYPE_ALIAS__VISIBLE:setVisible(VISIBLE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:26.003 -0500",hash_original_method="DAC56CE9E9B1E4D46C67382001476B7D",hash_generated_method="03203CD5DF79291B20C6273EBC2A10F1") protected boolean isOnSameScreenAsChildren(){  return true;}  }
class C{  public FastStringBuffer append(boolean b){  append(String.valueOf(b));  return this;}  }
class C{  public static void gc(){  RUNTIME.gc();}  }
class C{  static void successCancellation(final JpaAction action,final ActionRepository actionRepository,final TargetManagement targetManagement,final TargetInfoRepository targetInfoRepository,final EntityManager entityManager){  action.setActive(false);  action.setStatus(Status.CANCELED);  final JpaTarget target=(JpaTarget)action.getTarget();  final List<Action> nextActiveActions=actionRepository.findByTargetAndActiveOrderByIdAsc(target,true).stream().filter(null).collect(Collectors.toList());  if (nextActiveActions.isEmpty()) {    target.setAssignedDistributionSet(target.getTargetInfo().getInstalledDistributionSet());    updateTargetInfo(target,TargetUpdateStatus.IN_SYNC,false,targetInfoRepository,entityManager);  } else {    target.setAssignedDistributionSet(nextActiveActions.get(0).getDistributionSet());  }  targetManagement.updateTarget(target);}  }
class C{  public boolean add(K key){  Integer value=refSet.get(key);  if (value == null) {    refSet.put(key,1);    numValues++;    return true;  }  value++;  numValues++;  refSet.put(key,value);  return false;}  }
class C{  public SaaSApplicationException(String message,Throwable cause){  super(message,cause);  init();  this.setCauseStackTrace(cause);}  }
class C{  public Solution copy(){  List<String> newRepresentation=new ArrayList<String>(this.representation.size());  for (  String id : this.representation) {    newRepresentation.add(id);  }  Solution ss=new Solution(newRepresentation,this.getObjective());  Map<String,String> newAllocation=new HashMap<String,String>();  for (  String id : this.allocation.keySet()) {    newAllocation.put(id,this.allocation.get(id));  }  ss.allocation=newAllocation;  return ss;}  }
class C{  public static void compare(final InputStream expected,final InputStream actual) throws IOException {  Assert.assertNotNull(expected);  Assert.assertNotNull(actual);  final String encoding=Context.get().getConfig().getEncoding();  compare(IOUtils.toString(expected,encoding),IOUtils.toString(actual,encoding));  expected.close();  actual.close();}  }
class C{  public void writeTo(OutputStream out) throws IOException {  out.write(buf,0,position);}  }
class C{  @ObjectiveCName("sendAnimationWithPeer:withName:withW:withH:withThumb:withDescriptor:") public void sendAnimation(@NotNull Peer peer,@NotNull String fileName,int w,int h,@Nullable FastThumb fastThumb,@NotNull String descriptor){  modules.getMessagesModule().sendAnimation(peer,fileName,w,h,fastThumb,descriptor);}  }
class C{  @Override public Range findRangeBounds(XYDataset dataset){  if (dataset != null) {    Range r=DatasetUtilities.findRangeBounds(dataset,false);    if (r == null) {      return null;    } else {      return new Range(r.getLowerBound() + this.yOffset,r.getUpperBound() + this.blockHeight + this.yOffset);    }  } else {    return null;  }}  }
class C{  public static ECKey fromPrivate(BigInteger privKey,boolean compressed){  ECPoint point=publicPointFromPrivate(privKey);  return new ECKey(privKey,getPointWithCompression(point,compressed));}  }
class C{  public void testSendLargeInFlight(){  PseudoTcpTestTransfer test=new PseudoTcpTestTransfer();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setRemoteOptRcvBuf(100000);  test.setLocalOptRcvBuf(100000);  test.setOptSndBuf(150000);  test.doTestTransfer(1000000);}  }
class C{  public DExportPublicKeyOpenSsl(JFrame parent,String entryAlias){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.entryAlias=entryAlias;  initComponents();}  }
class C{  public final byte[] wrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  if (mode != WRAP_MODE) {    throw new IllegalStateException();  }  return spiImpl.engineWrap(key);}  }
class C{  public static void v(String tag,String msg){  v(tag,msg,null);}  }
class C{  public String str(){  return m_val ? "true" : "false";}  }
class C{  public GetRequestMessage(GetRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }}  }
class C{  synchronized void remove(PgServerThread t){  running.remove(t);}  }
class C{  void startSetupActivityLocked(){  if (mCheckedForSetup) {    return;  }  final ContentResolver resolver=mContext.getContentResolver();  if (mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL && Settings.Global.getInt(resolver,Settings.Global.DEVICE_PROVISIONED,0) != 0) {    mCheckedForSetup=true;    Intent intent=new Intent(Intent.ACTION_UPGRADE_SETUP);    List<ResolveInfo> ris=mSelf.mContext.getPackageManager().queryIntentActivities(intent,PackageManager.GET_META_DATA);    ResolveInfo ri=null;    for (int i=0; ris != null && i < ris.size(); i++) {      if ((ris.get(i).activityInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {        ri=ris.get(i);        break;      }    }    if (ri != null) {      String vers=ri.activityInfo.metaData != null ? ri.activityInfo.metaData.getString(Intent.METADATA_SETUP_VERSION) : null;      if (vers == null && ri.activityInfo.applicationInfo.metaData != null) {        vers=ri.activityInfo.applicationInfo.metaData.getString(Intent.METADATA_SETUP_VERSION);      }      String lastVers=Settings.Secure.getString(resolver,Settings.Secure.LAST_SETUP_SHOWN);      if (vers != null && !vers.equals(lastVers)) {        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);        intent.setComponent(new ComponentName(ri.activityInfo.packageName,ri.activityInfo.name));        mMainStack.startActivityLocked(null,intent,null,ri.activityInfo,null,null,0,0,0,null,0,null,false,null);      }    }  }}  }
class C{  public synchronized void removeNetMapListener(NetMapListener l){  if (listeners == null) {    return;  }  listeners.removeElement(l);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  return si == null ? null : si.getPersonObjList();}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(DataSourceTest.class);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.STRUCTURED_TEXT__ROOT_ELEMENT:    return basicSetRootElement(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public NamedList(){  nvPairs=new ArrayList<>();}  }
class C{  @Override public void run(int connId,String[] args){  try {    IPlayer player=server.getPlayer(connId);    player.setAllowTeamChange(true);    if (!server.isTeamChangeRequestInProgress()) {      server.sendServerChat(connId,"No vote to change " + "teams in progress!");      return;    }    boolean changeTeam=true;    int voteCount=0;    int eligiblePlayerCount=0;    for (    IPlayer p : server.getGame().getPlayersVector()) {      if (p.getTeam() != IPlayer.TEAM_UNASSIGNED) {        changeTeam&=p.isAllowingTeamChange();        if (p.isAllowingTeamChange()) {          voteCount++;        }        eligiblePlayerCount++;      }    }    server.sendServerChat(player.getName() + " has voted to allow " + server.getPlayerRequestingTeamChange().getName()+ " to join Team "+ server.getRequestedTeam()+ ", "+ voteCount+ " vote(s) received out of "+ eligiblePlayerCount+ " vote(s) needed");    if (changeTeam) {      server.sendServerChat("All votes received, " + server.getPlayerRequestingTeamChange().getName() + " will join Team "+ server.getRequestedTeam()+ " at the end of the turn.");      server.allowTeamChange();    }  } catch (  NumberFormatException nfe) {    server.sendServerChat(connId,"Failed to parse team number!");  }}  }
class C{  public FluentSupplier<R> around(final Function<Advice0<R>,R> around){  return withFn(null);}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  public static String[] split(String src,char delim,int limit){  final ArrayList<String> output=new ArrayList<>();  int index;  int lindex=0;  final boolean limited=limit > 0;  while ((index=src.indexOf(delim,lindex)) != -1 && (!limited || output.size() < limit - 1)) {    output.add(src.substring(lindex,index));    lindex=index + 1;  }  output.add(src.substring(lindex));  return output.toArray(new String[output.size()]);}  }
class C{  private void saveTouchStart(MotionEvent event){  mSavedMatrix.set(mMatrix);  mTouchStartPoint.set(event.getX(),event.getY());  mClosestDataSetToTouch=mChart.getDataSetByTouchPoint(event.getX(),event.getY());}  }
class C{  public void removeItem(Object item){  model.remove(item);}  }
class C{  public boolean containsKey(Object key){  for (int i=0; i < p_data.size(); i++) {    Object oo=p_data.get(i);    if (oo != null && oo instanceof NamePair) {      NamePair pp=(NamePair)oo;      if (pp.getID().equals(key))       return true;    }  }  return false;}  }
class C{  private ProtectionSet createProtectionSet(String cgName,URI projectURI) throws Exception {  ProtectionSet protectionSet=new ProtectionSet();  URI protectionSetURI=URIUtil.createId(ProtectionSet.class);  protectionSet.setId(protectionSetURI);  protectionSet.setLabel("ViPR-" + cgName);  protectionSet.setProtectionId("790520997");  protectionSet.setProtectionStatus("ENABLED");  protectionSet.setProject(projectURI);  protectionSet.setProtectionSystem(protectionSystemURI);  _dbClient.createObject(protectionSet);  return protectionSet;}  }
class C{  public boolean validate(final String recaptchaResponse,final String remoteIP){  final String charset=StandardCharsets.UTF_8.name();  final String secretKey=getSecretKey();  URLConnection connection=null;  InputStream is=null;  boolean validated=false;  if (getEnabled() && StringUtils.isNotEmpty(secretKey) && StringUtils.isNotEmpty(recaptchaResponse)&& StringUtils.isNotEmpty(remoteIP)) {    try {      String query=String.format(RECAPTCHA_SERVICE_QUERYSTRING,URLEncoder.encode(secretKey,charset),URLEncoder.encode(recaptchaResponse,charset),URLEncoder.encode(remoteIP,charset));      connection=new URL(RECAPTCHA_SERVICE_URL + query).openConnection();      is=connection.getInputStream();      StringWriter writer=new StringWriter();      IOUtils.copy(is,writer,charset);      String responseString=writer.toString();      JSONObject jsonObject=new JSONObject(responseString);      if (jsonObject.getBoolean(RECAPTCHA_SUCCESS)) {        validated=true;      }    } catch (    IOException e) {      LOGGER.error("Could not validate recaptcha.",e);    }catch (    JSONException e) {      LOGGER.error("Could not create JSON.",e);    } finally {      if (is != null) {        try {          is.close();        } catch (        IOException e) {          LOGGER.error("Could not close Input Stream.",e);        }      }    }  }  return validated;}  }
class C{  public void testNonDiscriminatingConsumer() throws Exception {  consumerConnection=createConnection();  consumerConnection.start();  LOG.info("consumerConnection = " + consumerConnection);  try {    Thread.sleep(1000);  } catch (  Exception e) {  }  Consumer consumer=new Consumer(consumerConnection,null);  Thread consumerThread=new Thread(consumer);  consumerThread.start();  producerConnection=createConnection();  producerConnection.start();  LOG.info("producerConnection = " + producerConnection);  try {    Thread.sleep(3000);  } catch (  Exception e) {  }  Producer producer=new Producer(producerConnection);  Thread producerThread=new Thread(producer);  producerThread.start();  consumerThread.join();  producer.stop=true;  if (consumer.getCount() == testSize)   LOG.info("test complete .... all messsages consumed!!"); else   LOG.info("test failed .... Sent " + (testSize / 1) + " messages intended to be consumed ( "+ testSize+ " total), but only consumed "+ consumer.getCount());  assertTrue("Sent " + testSize + " messages intended to be consumed, but only consumed "+ consumer.getCount(),(consumer.getCount() == testSize));  assertFalse("Delivery of messages to consumer was halted during this test",consumer.deliveryHalted());}  }
class C{  @DSComment("Layout parameters") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:06.269 -0500",hash_original_method="AC2D690BD2E1EA15E67B11BD37629B19",hash_generated_method="BDCFB1C39D92852469B62C81C5EE92DE") public LayoutParams(int w,int h,float initWeight){  super(w,h,initWeight);  column=-1;  span=1;}  }
class C{  @Override public void free(){  debugCodeCall("free");  value=null;}  }
class C{  public TypeDefinition createTypeDefinition(){  TypeDefinitionImpl typeDefinition=new TypeDefinitionImpl();  return typeDefinition;}  }
class C{  public static @Nullable Pair<Integer,Integer> decodeDimensions(byte[] bytes){  return decodeDimensions(new ByteArrayInputStream(bytes));}  }
class C{  PermissionsHash(){  permsMap=new HashMap<Permission,Permission>(11);}  }
class C{  protected void addPartPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Enricher_part_feature"),getString("_UI_PropertyDescriptor_description","_UI_Enricher_part_feature","_UI_Enricher_type"),EipPackage.Literals.ENRICHER__PART,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public ContextSensitiveImportRewriteContext(ASTNode node,ImportRewrite importRewrite){  this((CompilationUnit)node.getRoot(),node.getStartPosition(),importRewrite);}  }
class C{  private ArrayList<ActivityFacilityImpl> removeMostFarAwayFacility(Coord coord,ArrayList<ActivityFacilityImpl> list){  double maxDistance=Double.MIN_VALUE;  int maxDistanceIndex=-1;  for (int i=0; i < list.size(); i++) {    double distance=GeneralLib.getDistance(coord,list.get(i).getCoord());    if (distance > maxDistance) {      maxDistance=distance;      maxDistanceIndex=i;    }  }  list.remove(maxDistanceIndex);  return list;}  }
class C{  public long index(){  return index;}  }
class C{  public static boolean isDebugging(String option){  return getDefault().getDebugOptions().getBooleanOption(PLUGIN_ID + option,false);}  }
class C{  @Override protected void keyTyped(char par1,int par2){  prevMenu.setKey(Keyboard.getKeyName(par2));  mc.displayGuiScreen((GuiScreen)prevMenu);}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public static int computeLazyFieldMessageSetExtensionSize(final int fieldNumber,final LazyFieldLite value){  return computeTagSize(WireFormat.MESSAGE_SET_ITEM) * 2 + computeUInt32Size(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber) + computeLazyFieldSize(WireFormat.MESSAGE_SET_MESSAGE,value);}  }
class C{  public void test_Provider_getServices() throws Exception {  Map<String,Set<String>> remaining=new HashMap<String,Set<String>>(StandardNames.PROVIDER_ALGORITHMS);  for (  Entry<String,Set<String>> entry : remaining.entrySet()) {    entry.setValue(new HashSet<String>(entry.getValue()));  }  List<String> extra=new ArrayList();  List<String> missing=new ArrayList();  Provider[] providers=Security.getProviders();  for (  Provider provider : providers) {    String providerName=provider.getName();    if (StandardNames.IS_RI && providerName.equals("BC")) {      continue;    }    Set<Provider.Service> services=provider.getServices();    assertNotNull(services);    assertFalse(services.isEmpty());    for (    Provider.Service service : services) {      String type=service.getType();      String algorithm=service.getAlgorithm().toUpperCase();      String className=service.getClassName();      if (false) {        System.out.println(providerName + " " + type+ " "+ algorithm+ " "+ className);      }      Set<String> algorithms=remaining.get(type);      if (algorithms == null || !algorithms.remove(algorithm)) {        if (!(StandardNames.PROVIDER_ALGORITHMS.containsKey(type) && StandardNames.PROVIDER_ALGORITHMS.get(type).contains(algorithm))) {          extra.add("Unknown " + type + " "+ algorithm+ " "+ providerName+ "\n");        }      }      if (algorithms != null && algorithms.isEmpty()) {        remaining.remove(type);      }      try {        assertNotNull(Class.forName(className,true,provider.getClass().getClassLoader()));      } catch (      ClassNotFoundException e) {        if (!className.equals("sun.security.pkcs11.P11MAC")) {          missing.add(className);        }      }    }  }  Collections.sort(extra);  assertEquals("Extra algorithms",Collections.EMPTY_LIST,extra);  assertEquals("Missing algorithms",Collections.EMPTY_MAP,remaining);  Collections.sort(missing);  assertEquals("Missing classes",Collections.EMPTY_LIST,missing);}  }
class C{  public void takeKeyEvents(boolean get){  getWindow().takeKeyEvents(get);}  }
class C{  public Item removeFromWorld(){  if (quantity != 0) {    final StackableItem newItem=((StackableItem)item).splitOff(quantity);    new ItemLogger().splitOff(player,item,newItem,quantity);    return newItem;  } else {    item.removeFromWorld();    return item;  }}  }
class C{  private void scalarReplacement(){  for (  EscapeSet escSet : latticeValues) {    if (!escSet.replaceableArray || escSet.escape != EscapeState.NONE) {      continue;    }    int e=escSet.regSet.nextSetBit(0);    SsaInsn def=ssaMeth.getDefinitionForRegister(e);    SsaInsn prev=getInsnForMove(def);    TypeBearer lengthReg=prev.getSources().get(0).getTypeBearer();    int length=((CstLiteralBits)lengthReg).getIntBits();    ArrayList<RegisterSpec> newRegs=new ArrayList<RegisterSpec>(length);    HashSet<SsaInsn> deletedInsns=new HashSet<SsaInsn>();    replaceDef(def,prev,length,newRegs);    deletedInsns.add(prev);    deletedInsns.add(def);    List<SsaInsn> useList=ssaMeth.getUseListForRegister(e);    for (    SsaInsn use : useList) {      replaceUse(use,prev,newRegs,deletedInsns);      deletedInsns.add(use);    }    ssaMeth.deleteInsns(deletedInsns);    ssaMeth.onInsnsChanged();    SsaConverter.updateSsaMethod(ssaMeth,regCount);    movePropagate();  }}  }
class C{  public boolean save(){  throw new IllegalStateException(EXCEPTION_MSG);}  }
class C{  public static Integer composeCodeError(int archivoModule,int codeError){  Integer codeErrorModule=(Integer)mapCodeErrorModules.get(new Integer(archivoModule));  if (codeErrorModule != null) {    StringBuffer buff=new StringBuffer().append(String.valueOf(codeErrorModule)).append(StringUtils.leftPad(String.valueOf(codeError),3,'0'));    return new Integer(buff.toString());  }  return new Integer(ERROR_DESCONOCIDO);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private static void toggleDateOneButtonClicked(){  datePicker1.togglePopup();  String message="The datePicker1 calendar popup is ";  message+=(datePicker1.isPopupOpen()) ? "open!" : "closed!";  panel.messageTextArea.setText(message);}  }
class C{  public void addService(Class<? extends IFloodlightService> clazz,IFloodlightService service){  serviceMap.put(clazz,service);}  }
class C{  public Holder(GeneralNames entityName){  this(entityName,V2_CERTIFICATE_HOLDER);}  }
class C{  public static void main(String[] argv){  runClassifier(new ClassificationViaRegression(),argv);}  }
class C{  public void copy(){  invokeAction(TransferHandler.getCopyAction());}  }
class C{  private void interpretXor(final ReilInstruction instruction){  final Pair<Boolean,BigInteger> firstValue=loadLongValue(instruction.getFirstOperand());  final Pair<Boolean,BigInteger> secondValue=loadLongValue(instruction.getSecondOperand());  if (firstValue.first() && secondValue.first()) {    final BigInteger result=firstValue.second().xor(secondValue.second());    final String targetRegister=instruction.getThirdOperand().getValue();    final OperandSize targetSize=instruction.getThirdOperand().getSize();    setRegister(targetRegister,result,targetSize,ReilRegisterStatus.DEFINED);  } else   if (instruction.getFirstOperand().getValue().equals(instruction.getSecondOperand().getValue())) {    final String targetRegister=instruction.getThirdOperand().getValue();    final OperandSize targetSize=instruction.getThirdOperand().getSize();    setRegister(targetRegister,BigInteger.ZERO,targetSize,ReilRegisterStatus.DEFINED);  } else {    assert false;  }}  }
class C{  private long addInputFilesRecursively(Path path,Writer writer,FileSystem fs,PathFilter pathFilter) throws IOException {  long numFiles=0;  for (  FileStatus stat : fs.listStatus(path,pathFilter)) {    LOG.debug("Adding path {}",stat.getPath());    if (stat.isDirectory()) {      numFiles+=addInputFilesRecursively(stat.getPath(),writer,fs,pathFilter);    } else {      writer.write(stat.getPath().toString() + "\n");      numFiles++;    }  }  return numFiles;}  }
class C{  protected void modify(){  ++m_modCount;  m_cur=-1;}  }
class C{  public void addDependency(Dependency dependency){  if (dependencies == null) {    dependencies=new ArrayList<Dependency>();    nodeDependencies=new ArrayList<Node>();  }  dependencies.add(dependency);  if (!nodeDependencies.contains(dependency.node)) {    nodeDependencies.add(dependency.node);  }  Node dependencyNode=dependency.node;  if (dependencyNode.nodeDependents == null) {    dependencyNode.nodeDependents=new ArrayList<Node>();  }  dependencyNode.nodeDependents.add(this);}  }
class C{  public SearchObject(String keyword,String link,Object o){  this.keyword=keyword;  this.link=link;  this.o=o;}  }
class C{  private void parseHeaders() throws IOException {  _ws.flush();  CharBuffer line=new CharBuffer();  int count=0;  do {    line.clear();    if (!_rs.readln(line)) {      _isKeepalive=false;      return;    }  } while (line.length() == 0 && ++count < 10);  if (line.length() == 0) {    _isKeepalive=false;    return;  }  if (line.startsWith("HTTP/1.1 100")) {    count=100;    do {      line.clear();      if (!_rs.readln(line)) {        _isKeepalive=false;        return;      }    } while (line.length() != 0 && count-- > 0);    count=100;    do {      line.clear();      if (!_rs.readln(line)) {        _isKeepalive=false;        return;      }    } while (line.length() == 0 && count-- > 0);  }  if (line.length() == 0) {    _isKeepalive=false;    return;  }  int i=0;  for (i=0; i < line.length() && line.charAt(i) != ' '; i++) {  }  for (; i < line.length() && line.charAt(i) == ' '; i++) {  }  int status=0;  for (; i < line.length(); i++) {    char ch=line.charAt(i);    if (ch >= '0' && ch <= '9')     status=10 * status + ch - '0'; else     break;  }  if (status != 200)   _isKeepalive=false; else   if (!line.startsWith("HTTP/1.1 "))   _isKeepalive=false;  _attributes.put("status",String.valueOf(status));  _attributes.put("status-message",line.toString());  CharBuffer key=new CharBuffer();  while (true) {    line.clear();    if (!_rs.readln(line) || line.length() == 0)     break;    int lineLength=line.length();    for (i=0; i < lineLength && Character.isWhitespace(line.charAt(i)); i++) {    }    key.clear();    for (; i < lineLength && !Character.isWhitespace(line.charAt(i)) && line.charAt(i) != ':'; i++) {      key.append((char)line.charAt(i));    }    for (; i < lineLength && Character.isWhitespace(line.charAt(i)); i++) {    }    if (key.length() == 0 || lineLength <= i || line.charAt(i) != ':')     continue;    for (i++; i < lineLength && Character.isWhitespace(line.charAt(i)); i++) {    }    key.toLowerCase();    String value=line.substring(i);    if (log.isLoggable(Level.FINE))     log.fine(key + ": " + value);    if (key.matchesIgnoreCase("content-length")) {      _contentLength=Integer.parseInt(value.trim());    } else     if (key.matchesIgnoreCase("connection") && value.equalsIgnoreCase("close")) {      _isKeepalive=false;    } else     if (key.matchesIgnoreCase("transfer-encoding") && value.equalsIgnoreCase("chunked")) {      _isChunked=true;      _chunkLength=0;    }    String keyString=key.toLowerCase().toString();    String oldValue=(String)_attributes.put(keyString,value);    if (oldValue != null) {      value=oldValue + '\n' + value;    }    _attributes.put(keyString,value);  }}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (propertyName == "text" || ((propertyName == "font" || propertyName == "foreground") && oldValue != newValue && getClientProperty(javax.swing.plaf.basic.BasicHTML.propertyKey) != null)) {    super.firePropertyChange(propertyName,oldValue,newValue);  }}  }
class C{  private void submitScore(int resId,int score){  PlayGamesActivity act=Utils.getPlayGamesActivity(this);  if (act != null) {    act.postSubmitScore(resId,score);  }}  }
class C{  private void drawOpAnno(final Operator operator,final Graphics2D g2,final ProcessRendererModel rendererModel,final boolean printing){  WorkflowAnnotations annotations=rendererModel.getOperatorAnnotations(operator);  if (annotations == null) {    return;  }  for (  WorkflowAnnotation anno : annotations.getAnnotationsDrawOrder()) {    if (anno.equals(model.getSelected())) {      continue;    }    Graphics2D g2P=(Graphics2D)g2.create();    drawer.drawAnnotation(anno,g2P,printing);    g2P.dispose();  }}  }
class C{  private synchronized void drawSprites(Graphics g,Collection<? extends Sprite> spriteArrayList){  for (  Sprite sprite : spriteArrayList) {    drawSprite(g,sprite);  }}  }
class C{  private void createTree(final ITreeNode<CTag> tag){  tree.put(tag,new CTagFilterNode(tag));  for (  final ITreeNode<CTag> child : tag.getChildren()) {    createTree(child);  }}  }
class C{  public void foo() throws IOException {}  }
class C{  public int hashCode(){  if (getId() == null) {    return -1;  }  return getId().hashCode();}  }
class C{  public void write(byte[] b) throws IOException {  write(b,0,b.length);}  }
class C{  @Deprecated public RegionFactory(Properties distributedSystemProperties) throws CacheWriterException, RegionExistsException, TimeoutException {  this((GemFireCacheImpl)new CacheFactory(distributedSystemProperties).create());}  }
class C{  public VersionManager(final PropertyFileLoader propertyLoader) throws XMLException {  super(PACKAGE,SCHEMA);  this.propertyLoader=propertyLoader;  this.versions=new SpyVersions();}  }
class C{  public Bitmap decodeFileDescriptor(FileDescriptor fd,BitmapFactory.Options options){  if (options.mCancel) {    return null;  }  Thread thread=Thread.currentThread();  if (!canThreadDecoding(thread)) {    Log.d(TAG,"Thread " + thread + " is not allowed to decode.");    return null;  }  setDecodingOptions(thread,options);  Bitmap b=BitmapFactory.decodeFileDescriptor(fd,null,options);  removeDecodingOptions(thread);  return b;}  }
class C{  public FBStatisticsManager(String gdsType){  super(gdsType);}  }
class C{  public void accept(final ClassVisitor cv){  cv.visitInnerClass(name,outerName,innerName,access);}  }
class C{  static String exists(int AD_Table_ID,int Record_ID,String trxName){  for (int i=0; i < s_restricts.length; i++) {    StringBuffer sql=new StringBuffer("SELECT COUNT(*) FROM ").append(s_restrictNames[i]).append(" WHERE AD_Table_ID=? AND Record_ID=?");    int no=DB.getSQLValue(trxName,sql.toString(),AD_Table_ID,Record_ID);    if (no > 0)     return s_restrictNames[i];  }  return null;}  }
class C{  public static Wildcards ofMatches(Wildcards.Flag setFlag,Wildcards.Flag setFlag2){  return Wildcards.of(setFlag.matchOn(setFlag2.matchOn(FULL_INT)));}  }
class C{  private void displayAllStringDefinedInStringXml(){  SimpleIconFontTextView textView=(SimpleIconFontTextView)findViewById(R.id.text_view_2);  List<String> list=new ArrayList<>();  list.add(getString(R.string.cubeicon_gems_logo));  list.add(getString(R.string.cubeicon_android));  list.add(getString(R.string.cubeicon_heart));  String text=TextUtils.join(" ",list);  textView.setText(text);}  }
class C{  public static void delete(File f){  if (!f.exists() || f.delete())   return;  File mv=new File(f.getParentFile(),"deleteme" + ((int)(Math.random() * 100000.d)));  if (f.renameTo(mv)) {    if (!mv.delete())     mv.deleteOnExit();    return;  }  Log.warning("Couldn't delete file! If there's any problems, please try to remove it yourself. Path: %s",f.getAbsolutePath());}  }
class C{  public JCriteriumTree(final CCriteriumTree ctree,final List<ICriteriumCreator> criteria){  m_model=new JCriteriumTreeModel(this,ctree,criteria);  setRootVisible(true);  setModel(m_model);  setCellRenderer(new CTreeNodeRenderer());  addMouseListener(m_mouseListener);}  }
class C{  public SaaSApplicationException(){  this.init();}  }
class C{  public void component(int M_Product_ID,BigDecimal qtyRequiered) throws Exception {  if (LevelNo == p_LevelNo)   return;  String value=DB.getSQLValueString(get_TrxName(),"SELECT Value FROM M_Product WHERE M_Product_ID=?",M_Product_ID);  final StringBuilder whereClause=new StringBuilder(MPPProductBOM.COLUMNNAME_Value).append("=? AND ").append(MPPProductBOM.COLUMNNAME_M_Product_ID).append("=?");  List<MPPProductBOM> boms=new Query(getCtx(),MPPProductBOM.Table_Name,whereClause.toString(),get_TrxName()).setClient_ID().setOnlyActiveRecords(true).setParameters(value,M_Product_ID).list();  boolean level=false;  for (  MPPProductBOM bom : boms) {    if (bom.isValidFromTo(p_DateTrx)) {      if (!level)       LevelNo+=1;      level=true;      parentExplotion(bom.get_ID(),qtyRequiered);      LevelNo-=1;    }  }}  }
class C{  private DocumentRepository instantiateDocumentRepository(){  DocumentRepository documentRepository=ClassUtils.createInstanceFromClassNameWithArguments(classLoader,documentRepositoryClass,DocumentRepository.class);  return documentRepository;}  }
class C{  void forcePoke(){  mHandler.removeCallbacks(mDozeRunnable);  mHandler.postDelayed(mDozeRunnable,mDozeDurationSeconds * 1000);  mIsDozing=true;}  }
class C{  public static SslError SslErrorFromChromiumErrorCode(int error,SslCertificate cert,String url){  assert (error >= -299 && error <= -200);  if (error == -200)   return new SslError(SSL_IDMISMATCH,cert,url);  if (error == -201)   return new SslError(SSL_DATE_INVALID,cert,url);  if (error == -202)   return new SslError(SSL_UNTRUSTED,cert,url);  return new SslError(SSL_INVALID,cert,url);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public void flush() throws IOException {  closeStartIfNecessary();}  }
class C{  public static String formatNumber(float number,int digitCount,boolean separateThousands){  return formatNumber(number,digitCount,separateThousands,'.');}  }
class C{  private void collectReferences(final IOperandTreeNode node,final Set<IAddress> references){  for (  final IReference reference : node.getReferences()) {    if (ReferenceType.isCodeReference(reference.getType())) {      references.add(reference.getTarget());    }  }  for (  final IOperandTreeNode child : node.getChildren()) {    collectReferences(child,references);  }}  }
class C{  public JavaType _constructType(Type type,TypeBindings context){  JavaType resultType;  if (type instanceof Class<?>) {    Class<?> cls=(Class<?>)type;    if (context == null) {      context=new TypeBindings(this,cls);    }    resultType=_fromClass(cls,context);  } else   if (type instanceof ParameterizedType) {    resultType=_fromParamType((ParameterizedType)type,context);  } else   if (type instanceof GenericArrayType) {    resultType=_fromArrayType((GenericArrayType)type,context);  } else   if (type instanceof TypeVariable<?>) {    resultType=_fromVariable((TypeVariable<?>)type,context);  } else   if (type instanceof WildcardType) {    resultType=_fromWildcard((WildcardType)type,context);  } else {    throw new IllegalArgumentException("Unrecognized Type: " + type.toString());  }  if (_modifiers != null && !resultType.isContainerType()) {    for (    TypeModifier mod : _modifiers) {      resultType=mod.modifyType(resultType,type,context,this);    }  }  return resultType;}  }
class C{  private static int max(int[] list,int index,int max){  if (index < 0)   return max; else   if (list[index] > max) {    return max(list,index - 1,list[index]);  } else   return max(list,index - 1,max);}  }
class C{  public static final Cursor query(ContentResolver cr,long eventId,String[] projection){  String[] attArgs={Long.toString(eventId)};  return cr.query(CONTENT_URI,projection,ATTENDEES_WHERE,attArgs,null);}  }
class C{  protected StringBuilder processLine(String nextElement){  StringBuilder sb=new StringBuilder(INITIAL_STRING_SIZE);  for (int j=0; j < nextElement.length(); j++) {    char nextChar=nextElement.charAt(j);    processCharacter(sb,nextChar);  }  return sb;}  }
class C{  public static void copyFile(File sourceFile,File targetFile) throws IOException {  if (sourceFile == null || targetFile == null) {    throw new NullPointerException("sourceFile and targetFile must not be null");  }  final File directory=targetFile.getParentFile();  if (!directory.exists() && !directory.mkdirs()) {    throw new IOException(JavaCvsSrcBundle.message("could.not.create.directory.error.message",directory));  }  InputStream inputStream=null;  OutputStream outputStream=null;  try {    inputStream=new BufferedInputStream(new FileInputStream(sourceFile));    outputStream=new BufferedOutputStream(new FileOutputStream(targetFile));    final byte[] buffer=new byte[32768];    for (int readBytes=inputStream.read(buffer); readBytes > 0; readBytes=inputStream.read(buffer)) {      outputStream.write(buffer,0,readBytes);    }  }  finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException ex) {      }    }    if (outputStream != null) {      try {        outputStream.close();      } catch (      IOException ex) {      }    }  }}  }
class C{  public static String convertEOLToLF(String input){  StringBuilder res=new StringBuilder(input.length());  char[] s=input.toCharArray();  int from=0;  final int end=s.length;  for (int i=0; i < end; i++) {    if (s[i] == '\r') {      res.append(s,from,i - from);      res.append('\n');      if (i + 1 < end && s[i + 1] == '\n') {        i++;      }      from=i + 1;    }  }  if (from == 0) {    return input;  }  res.append(s,from,end - from);  return res.toString();}  }
class C{  public Rule resolveToRule(String x){  if (ruleRefs.get(x) != null)   return rule.g.getRule(x);  LabelElementPair anyLabelDef=getAnyLabelDef(x);  if (anyLabelDef != null && anyLabelDef.type == LabelType.RULE_LABEL) {    return rule.g.getRule(anyLabelDef.element.getText());  }  return null;}  }
class C{  @Override public long bytes(){  return mNameBytes.bytes() + mPointers.bytes();}  }
class C{  public void open(){}  }
class C{  public String mediumFormat(final Date dt){  if (dt == null) {    return "";  }  return dtfmt.format(new Date(dt.getTime()));}  }
class C{  public Builder withPositionIncrementGap(int posIncGap){  if (posIncGap < 0) {    throw new IllegalArgumentException("posIncGap must be >= 0");  }  this.posIncGap.set(posIncGap);  return this;}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=(bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        logger.error(e.getMessage(),e);      } finally {        try {          if (baos != null)           baos.close();        } catch (        Exception e) {        }        try {          if (gzis != null)           gzis.close();        } catch (        Exception e) {        }        try {          if (bais != null)           bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public static void addOption(Vector options,String text,String defValue,char option){  addOption(options,text,defValue,"" + option);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  public static void main(String[] args){  Eights game=new Eights();  game.playGame();}  }
class C{  static CryptoData fromString(EncodingProvider encodingProvider,String input) throws CryptoDataException {  verifyCryptoDataString(input);  String[] inputParams=input.split(SEPARATOR);  return new CryptoData(encodingProvider,inputParams[0],inputParams[1]);}  }
class C{  Optional<? extends AttributeDescriptor> referencingAttribute(AttributeDescriptor attribute,EntityDescriptor referenced){  String referencedColumn=attribute.referencedColumn();  if (Names.isEmpty(referencedColumn)) {    List<AttributeDescriptor> keys=referenced.attributes().values().stream().filter(null).collect(Collectors.toList());    if (keys.size() == 1) {      return Optional.of(keys.get(0));    } else {      return keys.stream().filter(null).findFirst();    }  } else {    return referenced.attributes().values().stream().filter(null).findFirst();  }}  }
class C{  public Element store(Object o){  MultiSensorIcon p=(MultiSensorIcon)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("multisensoricon");  storeCommonAttributes(p,element);  element.setAttribute("updown",p.getUpDown() ? "true" : "false");  for (int i=0; i < p.getNumEntries(); i++) {    Element e=storeIcon("active",p.getSensorIcon(i));    e.setAttribute("sensor",p.getSensorName(i));    element.addContent(e);  }  element.addContent(storeIcon("inactive",p.getInactiveIcon()));  element.addContent(storeIcon("unknown",p.getUnknownIcon()));  element.addContent(storeIcon("inconsistent",p.getInconsistentIcon()));  element.setAttribute("class","jmri.jmrit.display.configurexml.MultiSensorIconXml");  return element;}  }
class C{  public NetworkGroupDataType clone(){  NetworkGroupDataType result=new NetworkGroupDataType();  result.ServerUri=ServerUri;  if (NetworkPaths != null) {    result.NetworkPaths=new EndpointUrlListDataType[NetworkPaths.length];    for (int i=0; i < NetworkPaths.length; i++)     result.NetworkPaths[i]=NetworkPaths[i].clone();  }  return result;}  }
class C{  public void testNearClose() throws Exception {  fail("https://issues.apache.org/jira/browse/IGNITE-2189");  IgniteCache<String,String> cache0=grid(0).getOrCreateCache(getNearConfig());  CountingTxRequestsToClientNodeTcpCommunicationSpi.nodeFilter=grid(2).context().localNodeId();  IgniteCache<String,String> cache1=grid(1).cache(CACHE_NAME_NEAR);  IgniteCache<String,String> cache2=grid(2).createNearCache(CACHE_NAME_NEAR,new NearCacheConfiguration());  assert cache2.get(KEY_VAL) == null;  cache2.put(KEY_VAL,KEY_VAL);  CountingTxRequestsToClientNodeTcpCommunicationSpi.cnt.set(0);  cache0.put(KEY_VAL,"near-test");  U.sleep(1000);  assert CountingTxRequestsToClientNodeTcpCommunicationSpi.cnt.get() != 0;  assert cache2.localPeek(KEY_VAL).equals("near-test");  cache2.close();  CountingTxRequestsToClientNodeTcpCommunicationSpi.cnt.set(0);  cache0.put(KEY_VAL,KEY_VAL + 0);  U.sleep(1000);  assert CountingTxRequestsToClientNodeTcpCommunicationSpi.cnt.get() == 0;  assert cache0.get(KEY_VAL).equals(KEY_VAL + 0);  assert cache1.get(KEY_VAL).equals(KEY_VAL + 0);  try {    cache2.get(KEY_VAL);    assert false;  } catch (  IllegalArgumentException|IllegalStateException ignored) {  }  IgniteCache<String,String> cache2New=grid(2).createNearCache(CACHE_NAME_NEAR,new NearCacheConfiguration());  assertNotSame(cache2,cache2New);  cache2New.put(KEY_VAL,KEY_VAL);  assert cache2New.localPeek(KEY_VAL).equals(KEY_VAL);  cache0.put(KEY_VAL,KEY_VAL + "recreated");  assert cache0.get(KEY_VAL).equals(KEY_VAL + "recreated");  assert cache1.get(KEY_VAL).equals(KEY_VAL + "recreated");  assert cache2New.localPeek(KEY_VAL).equals(KEY_VAL + "recreated");}  }
class C{  public SnmpEntryOid(long[] oid,int start){  final int subLength=oid.length - start;  final long[] subOid=new long[subLength];  java.lang.System.arraycopy(oid,start,subOid,0,subLength);  components=subOid;  componentCount=subLength;}  }
class C{  public Builder diskCacheExtraOptions(int maxImageWidthForDiskCache,int maxImageHeightForDiskCache,BitmapProcessor processorForDiskCache){  this.maxImageWidthForDiskCache=maxImageWidthForDiskCache;  this.maxImageHeightForDiskCache=maxImageHeightForDiskCache;  this.processorForDiskCache=processorForDiskCache;  return this;}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  NodeSetDTM clone=(NodeSetDTM)clone();  clone.reset();  return clone;}  }
class C{  private static int computeHashCode(int seed,Object... objects){  if (objects == null || objects.length == 0) {    return seed * HashCode.PRIME;  }  int hc=seed;  for (  Object object : objects) {    hc=HashCode.PRIME * hc;    if (object instanceof byte[]) {      hc+=Arrays.hashCode((byte[])object);    } else     if (object instanceof boolean[]) {      hc+=Arrays.hashCode((boolean[])object);    } else     if (object instanceof short[]) {      hc+=Arrays.hashCode((short[])object);    } else     if (object instanceof int[]) {      hc+=Arrays.hashCode((int[])object);    } else     if (object instanceof long[]) {      hc+=Arrays.hashCode((long[])object);    } else     if (object instanceof float[]) {      hc+=Arrays.hashCode((float[])object);    } else     if (object instanceof double[]) {      hc+=Arrays.hashCode((double[])object);    } else     if (object instanceof char[]) {      hc+=Arrays.hashCode((char[])object);    } else     if (object instanceof Object[]) {      hc+=Arrays.hashCode((Object[])object);    } else     if (object != null) {      hc+=object.hashCode();    }  }  return hc;}  }
class C{  private void autoFit(ExecutionUnit process,boolean balance){  double w=0;  double h=0;  for (  Operator op : process.getOperators()) {    Rectangle2D bounds=model.getOperatorRect(op);    if (bounds.getMaxX() > w) {      w=bounds.getMaxX();    }    if (bounds.getMaxY() > h) {      h=bounds.getMaxY();    }    WorkflowAnnotations annotations=model.getOperatorAnnotations(op);    if (annotations != null) {      for (      WorkflowAnnotation anno : annotations.getAnnotationsDrawOrder()) {        bounds=anno.getLocation();        if (bounds.getMaxX() > w) {          w=bounds.getMaxX();        }        if (bounds.getMaxY() > h) {          h=bounds.getMaxY();        }      }    }  }  WorkflowAnnotations annotations=model.getProcessAnnotations(process);  if (annotations != null) {    for (    WorkflowAnnotation anno : annotations.getAnnotationsDrawOrder()) {      Rectangle2D bounds=anno.getLocation();      if (bounds.getMaxX() > w) {        w=bounds.getMaxX();      }      if (bounds.getMaxY() > h) {        h=bounds.getMaxY();      }    }  }  for (  Port port : process.getInnerSources().getAllPorts()) {    Point pLoc=ProcessDrawUtils.createPortLocation(port,model);    if (pLoc != null) {      h=Math.max(h,pLoc.getY());    }  }  for (  Port port : process.getInnerSinks().getAllPorts()) {    Point pLoc=ProcessDrawUtils.createPortLocation(port,model);    if (pLoc != null) {      h=Math.max(h,pLoc.getY());    }  }  double minWidth=ProcessDrawer.OPERATOR_WIDTH * 2;  double subprocessWidth=w + ProcessDrawer.GRID_X_OFFSET;  double subprocessHeight=h + ProcessDrawer.GRID_Y_OFFSET;  if (model.getZoomFactor() < 1) {    subprocessWidth*=model.getZoomFactor();    subprocessHeight*=model.getZoomFactor();  }  double height=subprocessHeight;  double width=subprocessWidth > minWidth ? subprocessWidth : minWidth;  Dimension initialSize=createInitialSize(process);  if (width < initialSize.getWidth()) {    width=initialSize.getWidth();  }  if (height < initialSize.getHeight()) {    height=initialSize.getHeight();  }  if (JScrollPane.class.isAssignableFrom(view.getParent().getParent().getClass())) {    JScrollPane sp=(JScrollPane)view.getParent().getParent();    if (sp.getHorizontalScrollBar().isVisible() && sp.getVerticalScrollBar().isVisible()) {      double targetWidth=sp.getSize().getWidth() / model.getProcesses().size();      double targetHeight=sp.getSize().getHeight();      double sbWidth=sp.getVerticalScrollBar().getSize().getWidth() / model.getProcesses().size();      double sbHeight=sp.getHorizontalScrollBar().getSize().getHeight();      if (width < targetWidth && subprocessWidth < targetWidth) {        width+=sbWidth;      }      if (height < targetHeight && subprocessHeight < targetHeight) {        height+=sbHeight;      }    }  }  Dimension newDim=new Dimension();  newDim.setSize(width,height);  model.setProcessSize(process,newDim);  if (balance) {    balance();  }  model.fireProcessSizeChanged();}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(GridTab.PROPERTY)) {    int row=((Integer)evt.getNewValue()).intValue();    int selRow=getSelectedRow();    if (row == selRow)     return;    log.config(GridTab.PROPERTY + "=" + row+ " from "+ selRow);    setRowSelectionInterval(row,row);    setColumnSelectionInterval(0,0);    Rectangle cellRect=getCellRect(row,0,false);    if (cellRect != null)     scrollRectToVisible(cellRect);    log.config(GridTab.PROPERTY + "=" + row+ " from "+ selRow);  }}  }
class C{  public Job findJob(GenericClusterRequest task){  Job job=findJob(task.jobId);  if (job != null) {    return job;  }  job=new Job(task.jobId);  job.workerCategory=new WorkerCategory(task.graphId,task.workerVersion);  jobs.insertAtTail(job);  return job;}  }
class C{  @Override public void doRender(Entity par1Entity,double par2,double par4,double par6,float par8,float par9){  this.renderArrow((EntityFragments)par1Entity,par2,par4,par6,par8,par9);}  }
class C{  public boolean equals(Object o){  if ((o == null) || !(o instanceof ImageTypeSpecifier)) {    return false;  }  ImageTypeSpecifier that=(ImageTypeSpecifier)o;  return (colorModel.equals(that.colorModel)) && (sampleModel.equals(that.sampleModel));}  }
class C{  private ViewNode removeElement(final INaviViewNode element){  for (  final ViewNode viewNode : m_elements) {    if (viewNode.getNative() == element) {      m_elements.remove(viewNode);      return viewNode;    }  }  return null;}  }
class C{  public Vec3 add(Vec3 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec3","add","missingVector"));  }  this.x+=vector.x;  this.y+=vector.y;  this.z+=vector.z;  return this;}  }
class C{  public void registerInput(String varName,RDD<String> rdd,String format,boolean hasHeader,String delim,boolean fill,double fillValue,long rlen,long clen,long nnz) throws DMLRuntimeException {  registerInput(varName,rdd.toJavaRDD(),format,hasHeader,delim,fill,fillValue,-1,-1,-1);}  }
class C{  public int delete(){  return DELETE().deleteByExample(this.example);}  }
class C{  public void testSubListAndNonStructuralChanges(){  CopyOnWriteArrayList<String> list=new CopyOnWriteArrayList<String>();  list.addAll(Arrays.asList("a","b","c","d","e"));  List<String> bcd=list.subList(1,4);  list.set(2,"C");  try {    bcd.get(1);    fail();  } catch (  ConcurrentModificationException expected) {  }}  }
class C{  public static boolean removeAll(Collection self,Object[] items){  Collection pickFrom=new TreeSet(new NumberAwareComparator());  pickFrom.addAll(Arrays.asList(items));  return self.removeAll(pickFrom);}  }
class C{  private String secondsToTime(int seconds){  String time="";  String minutesText=String.valueOf(seconds / 60);  if (minutesText.length() == 1)   minutesText="0" + minutesText;  String secondsText=String.valueOf(seconds % 60);  if (secondsText.length() == 1)   secondsText="0" + secondsText;  time=minutesText + ":" + secondsText;  return time;}  }
class C{  @Override public void write(byte[] buf,int offset,int byteCount) throws IOException {  BlockGuard.getThreadPolicy().onNetwork();synchronized (writeLock) {    checkOpen();    Arrays.checkOffsetAndCount(buf.length,offset,byteCount);    if (byteCount == 0) {      return;    }    NativeCrypto.SSL_write(sslNativePointer,socket.getFileDescriptor$(),OpenSSLSocketImpl.this,buf,offset,byteCount,writeTimeoutMilliseconds);  }}  }
class C{  private BlockSnapshotSessionApi determinePlatformSpecificImplForSource(BlockObject sourceObj){  BlockSnapshotSessionApi snapSessionApi=null;  if (BlockObject.checkForRP(_dbClient,sourceObj.getId())) {    snapSessionApi=_snapshotSessionImpls.get(SnapshotSessionImpl.rp.name());  } else {    VirtualPool vpool=BlockSnapshotSessionUtils.querySnapshotSessionSourceVPool(sourceObj,_dbClient);    if (VirtualPool.vPoolSpecifiesHighAvailability(vpool) && sourceObj.isVPlexVolume(_dbClient)) {      snapSessionApi=_snapshotSessionImpls.get(SnapshotSessionImpl.vplex.name());    } else {      URI systemURI=sourceObj.getStorageController();      StorageSystem system=_dbClient.queryObject(StorageSystem.class,systemURI);      snapSessionApi=getPlatformSpecificImplForSystem(system);    }  }  return snapSessionApi;}  }
class C{  public Response deleteRosterEntry(String username,String jid){  return restClient.delete("users/" + username + "/roster/"+ jid,new HashMap<String,String>());}  }
class C{  public boolean checkAndGrab(boolean prompt){  boolean ret=true;  for (  LimeAssociationOption association : associations) {    if (association.isAllowed()) {      if (association.isAvailable())       association.setEnabled(true); else       if (!association.isEnabled())       ret=false;    }  }  if (!ret && prompt) {    DialogOption answer=GUIMediator.showYesNoOtherMessage(I18n.tr("One or more files or protocols that FrostWire uses are no longer associated with FrostWire. Would you like FrostWire to re-associate them?"),QuestionsHandler.GRAB_ASSOCIATIONS,I18n.tr("Details"));    if (answer == DialogOption.YES) {      for (      LimeAssociationOption association : associations) {        if (association.isAllowed() && !association.isEnabled())         association.setEnabled(true);      }    } else     if (answer == DialogOption.OTHER) {      new ConfigureOptionsAction(I18n.tr("File Associations")).actionPerformed(null);    }  }  return ret;}  }
class C{  public void clear(){  modCount++;  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   tab[i]=null;  size=0;}  }
class C{  public void testBFS_directed_forward() throws Exception {  final SmallGraphProblem p=setupSmallGraphProblem();  final IGASEngine gasEngine=getGraphFixture().newGASEngine(1);  try {    final SailConnection cxn=getGraphFixture().getSail().getConnection();    try {      final IGraphAccessor graphAccessor=getGraphFixture().newGraphAccessor(cxn);      final IGASContext<BFS.VS,BFS.ES,Void> gasContext=gasEngine.newGASContext(graphAccessor,new BFS());      final IGASState<BFS.VS,BFS.ES,Void> gasState=gasContext.getGASState();      gasState.setFrontier(gasContext,p.getFoafPerson());      gasContext.setTraversalDirection(TraversalDirectionEnum.Forward);      gasContext.call();      assertEquals(0,gasState.getState(p.getFoafPerson()).depth());      assertEquals(null,gasState.getState(p.getFoafPerson()).predecessor());      assertEquals(-1,gasState.getState(p.getMike()).depth());      assertEquals(null,gasState.getState(p.getMike()).predecessor());      assertEquals(-1,gasState.getState(p.getBryan()).depth());      assertEquals(null,gasState.getState(p.getBryan()).predecessor());      assertEquals(-1,gasState.getState(p.getMartyn()).depth());      assertEquals(null,gasState.getState(p.getMartyn()).predecessor());    }  finally {      try {        cxn.rollback();      }  finally {        cxn.close();      }    }  }  finally {    gasEngine.shutdownNow();  }}  }
class C{  public boolean hasThrowable(){  return throwable != null;}  }
class C{  public String underscore(String word){  StringBuilder sb=new StringBuilder(word.length() + 5);  boolean uncapitalize=false;  for (int i=0; i < word.length(); i++) {    char ch=word.charAt(i);    if (uncapitalize) {      sb.append(Character.toLowerCase(ch));      uncapitalize=false;    } else     if (ch == '.') {      sb.append('/');      uncapitalize=true;    } else     if (Character.isUpperCase(ch)) {      if (i > 0) {        sb.append('_');      }      sb.append(Character.toLowerCase(ch));    } else {      sb.append(ch);    }  }  return sb.toString();}  }
class C{  public boolean isGroupFunction(){  Object oo=get_Value(COLUMNNAME_IsGroupFunction);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public CertificateHandlerTest(String testName){  super(testName);  PropertyConfigurator.configure(LOG_FILE);}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  try {    if (qName.equals("packages") && packages.size() > 0) {      throw new RuntimeException("packages can not be specified in ASDoc_Config.xml and as a Flex parameter");    }    writer.newLine();    writer.write("<" + qName);    for (int i=0; i < attributes.getLength(); i++) {      writer.write(" " + attributes.getQName(i) + "=\""+ attributes.getValue(i)+ "\"");    }    writer.write(">");  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  public static String encodeNumericKeyIdShort(long keyId){  String longKeyId=encodeNumericKeyId(keyId);  return longKeyId.substring(8);}  }
class C{  static <K,V>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException {  stream.writeInt(map.size());  for (  Map.Entry<K,V> entry : map.entrySet()) {    stream.writeObject(entry.getKey());    stream.writeObject(entry.getValue());  }}  }
class C{  public double computeAverageInfoDistanceOfObservations(){  throw new RuntimeException("Not implemented yet");}  }
class C{  public void addForce(Force f){  if (f.isItemForce()) {    if (iforces.length == iflen) {      Force[] newf=new Force[iflen + 10];      System.arraycopy(iforces,0,newf,0,iforces.length);      iforces=newf;    }    iforces[iflen++]=f;  }  if (f.isSpringForce()) {    if (sforces.length == sflen) {      Force[] newf=new Force[sflen + 10];      System.arraycopy(sforces,0,newf,0,sforces.length);      sforces=newf;    }    sforces[sflen++]=f;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @SuppressWarnings("unchecked") private static <T>Iterable<T> cast(Collection<? extends T> c){  return (Iterable<T>)c;}  }
class C{  public static <T>org.hamcrest.Matcher<T> sameInstance(T target){  return org.hamcrest.core.IsSame.sameInstance(target);}  }
class C{  @Override public Iterator iterator(){  return new StructBagIterator(fieldValuesIterator());}  }
class C{  public Boolean isVmfsExtentExpansionSupported(){  return vmfsExtentExpansionSupported;}  }
class C{  public ConfigReader(InputStream in,ConfigReaderListener listener){  this.in=in;  this.listener=listener;}  }
class C{  @Override public void addNotify(){  super.addNotify();  updatePresentation();  KeymapManagerEx.getInstanceEx().addWeakListener(myWeakKeymapManagerListener);  if (ScreenUtil.isStandardAddRemoveNotify(this)) {    UISettings.getInstance().addUISettingsListener(myUISettingsListener,myDisposable);  }}  }
class C{  private CCallgraphCombiner(){}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 != z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 != constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 != constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void AddToSuppressLLDPs(long sw,short port){  NodePortTuple npt=new NodePortTuple(sw,port);  this.suppressLinkDiscovery.add(npt);  deleteLinksOnPort(npt,"LLDP suppressed.");}  }
class C{  private static long parseTimeExpression(String time,int frameRate,int subframeRate,int tickRate){  Matcher matcher=CLOCK_TIME.matcher(time);  if (matcher.matches()) {    String hours=matcher.group(1);    double durationSeconds=Long.parseLong(hours) * 3600;    String minutes=matcher.group(2);    durationSeconds+=Long.parseLong(minutes) * 60;    String seconds=matcher.group(3);    durationSeconds+=Long.parseLong(seconds);    String fraction=matcher.group(4);    durationSeconds+=(fraction != null) ? Double.parseDouble(fraction) : 0;    String frames=matcher.group(5);    durationSeconds+=(frames != null) ? ((double)Long.parseLong(frames)) / frameRate : 0;    String subframes=matcher.group(6);    durationSeconds+=(subframes != null) ? ((double)Long.parseLong(subframes)) / subframeRate / frameRate : 0;    return (long)(durationSeconds * 1000000);  }  matcher=OFFSET_TIME.matcher(time);  if (matcher.matches()) {    String timeValue=matcher.group(1);    double value=Double.parseDouble(timeValue);    String unit=matcher.group(2);    if (unit.equals("h")) {      value*=3600L * 1000000L;    } else     if (unit.equals("m")) {      value*=60 * 1000000;    } else     if (unit.equals("s")) {      value*=1000000;    } else     if (unit.equals("ms")) {      value*=1000;    } else     if (unit.equals("f")) {      value=value / frameRate * 1000000;    } else     if (unit.equals("t")) {      value=value / tickRate * 1000000;    }    return (long)value;  }  throw new NumberFormatException("Malformed time expression: " + time);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 164) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @Override public Automaton<LR1Item,LR1State> createAutomaton() throws GeneratorException {  return new LALR1SCCAutomatonFactory().createAutomaton(this,grammarInfo);}  }
class C{  private void wakeApp(){  ManageWakeLock.acquireFull(getApplicationContext());  ManageWakeLock.releasePartial();  replying=false;  inbox=false;  SmsMmsMessage notifyMessage=smsPopupPager.shouldNotify();  if (notifyMessage != null) {    ReminderService.scheduleReminder(this,notifyMessage);    ManageNotification.show(this,notifyMessage,smsPopupPager.getPageCount());    hasNotified=true;  }}  }
class C{  protected static FrequencySet<String> combineMax(FrequencySet<String> a,FrequencySet<String> b){  FrequencySet<String> result=combineAndClip(a,b,1);  for (  Map.Entry<String,MutableInt> entry : a.entrySet()) {    result.get(entry.getKey()).v=entry.getValue().v;  }  for (  Map.Entry<String,MutableInt> entry : b.entrySet()) {    MutableInt slot=result.get(entry.getKey());    slot.v=Math.max(slot.v,entry.getValue().v);  }  return result;}  }
class C{  private void sendSelfPatch(State s){  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(s);  sendRequest(patch);}  }
class C{  public JTextField(String text){  this(null,text,0);}  }
class C{  public boolean isValidIp(String ip){  return INET_ADDRESS_VALIDATOR.isValid(ip);}  }
class C{  private void deactivateToolWindowImpl(final String id,final boolean shouldHide,final List<FinalizableCommand> commandsList){  if (LOG.isDebugEnabled()) {    LOG.debug("enter: deactivateToolWindowImpl(" + id + ","+ shouldHide+ ")");  }  final WindowInfoImpl info=getInfo(id);  if (shouldHide && info.isVisible()) {    info.setVisible(false);    if (info.isFloating()) {      appendRemoveFloatingDecoratorCmd(info,commandsList);    } else     if (info.isWindowed()) {      appendRemoveWindowedDecoratorCmd(info,commandsList);    } else {      appendRemoveDecoratorCmd(id,false,commandsList);    }  }  info.setActive(false);  appendApplyWindowInfoCmd(info,commandsList);}  }
class C{  protected void removeFromMarkedPosition(){  System.arraycopy(buffer,read_pos,buffer,marked_pos,read_pos_end - read_pos);  read_pos_end-=(read_pos - marked_pos);  read_pos=marked_pos;}  }
class C{  public void displayMessage(final SimpleMqttMessage message){  if (message == null) {    publicationTopicText.setValue("");    publicationTopicText.setPromptText("(cannot be empty)");    publicationQosChoice.getSelectionModel().select(0);    publicationData.clear();    retainedBox.setSelected(false);  } else {    publicationTopicText.setValue(message.getTopic());    publicationQosChoice.getSelectionModel().select(message.getQos());    publicationData.clear();    publicationData.appendText(message.getValue());    retainedBox.setSelected(message.isRetained());  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public void launch(View view){  WebMediumConfig config=null;  if (launchType == LaunchType.Bot) {    config=new InstanceConfig();  } else   if (launchType == LaunchType.Forum) {    config=new ForumConfig();  } else   if (launchType == LaunchType.Channel) {    config=new ChannelConfig();  }  config.id=launchInstanceId;  config.name=launchInstanceName;  HttpAction action=new HttpFetchAction(this,config,true);  action.execute();}  }
class C{  public String sqlAD_getUnsequencedDocuments(String vendorName,String catalogName,String schemaName){  String tableName="AD_Table";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("TableName");  ArrayList<String> aliasNames=null;  ArrayList<String> conditions=new ArrayList<String>();  conditions.add("t.IsView = 'N'");  String subQuery=sql_select(vendorName,catalogName,schemaName,"AD_Column","t0",new ArrayList<String>(Arrays.asList("AD_Table_ID")),null,new ArrayList<String>(Arrays.asList("t0.ColumnName LIKE 'DocumentNo' OR t0.ColumnName LIKE 'Value'")),null,false);  conditions.add(new StringBuffer("AD_Table_ID IN (").append(subQuery).append(")").toString());  subQuery=sql_select(vendorName,catalogName,schemaName,"AD_Sequence","t1",new ArrayList<String>(Arrays.asList("Name")),null,new ArrayList<String>(Arrays.asList("t1.AD_Client_ID = ?")),null,false);  conditions.add(new StringBuffer("'DocumentNo_'||t.TableName NOT IN (").append(subQuery).append(")").toString());  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  return sql_select(vendorName,catalogName,schemaName,tableName,null,columnNames,aliasNames,conditions,sortColumns,false);}  }
class C{  public static boolean isZTE(){  return sBuildModel.startsWith("zte");}  }
class C{  public long appendBlock(String id,int version,byte[] b,int off,int len){  if (id == null || id.length() == 0)   throw new IllegalArgumentException();  if (version < 0)   throw new IllegalArgumentException();  if (b == null)   throw new IllegalArgumentException();  if (off < 0 || off > b.length)   throw new IllegalArgumentException("off=" + off + ", b.length="+ b.length);  if (len < 0 || off + len > b.length)   throw new IllegalArgumentException("off=" + off + ", len="+ len+ ", b.length="+ b.length);  if (len > blockSize) {    throw new IllegalArgumentException();  }  final ISimpleIndexProcedure proc=new AtomicBlockAppendProc(this,id,version,b,off,len);  final IKeyBuilder keyBuilder=getFileDataIndex().getIndexMetadata().getKeyBuilder();  final byte[] key=keyBuilder.reset().appendText(id,true,true).append(version).append(-1L).getKey();  return (Long)getFileDataIndex().submit(key,proc);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static boolean isRedirect(String text){  boolean result=false;  String pattern;  for (int i=0; i < redirectPatterns.size() && !result; i++) {    pattern=redirectPatterns.get(i);    result=text.regionMatches(true,0,pattern,0,pattern.length());  }  return result;}  }
class C{  public StrBuilder replaceAll(char search,char replace){  if (search != replace) {    for (int i=0; i < size; i++) {      if (buffer[i] == search) {        buffer[i]=replace;      }    }  }  return this;}  }
class C{  private static StepPattern createDefaultStepPattern(Compiler compiler,int opPos,MatchPatternIterator mpi,int analysis,StepPattern tail,StepPattern head) throws javax.xml.transform.TransformerException {  int stepType=compiler.getOp(opPos);  boolean simpleInit=false;  boolean prevIsOneStepDown=true;  int whatToShow=compiler.getWhatToShow(opPos);  StepPattern ai=null;  int axis, predicateAxis;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:    prevIsOneStepDown=false;  Expression expr;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:  expr=compiler.compile(opPos);break;default :expr=compiler.compile(opPos + 2);}axis=Axis.FILTEREDLIST;predicateAxis=Axis.FILTEREDLIST;ai=new FunctionPattern(expr,axis,predicateAxis);simpleInit=true;break;case OpCodes.FROM_ROOT:whatToShow=DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT;axis=Axis.ROOT;predicateAxis=Axis.ROOT;ai=new StepPattern(DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT,axis,predicateAxis);break;case OpCodes.FROM_ATTRIBUTES:whatToShow=DTMFilter.SHOW_ATTRIBUTE;axis=Axis.PARENT;predicateAxis=Axis.ATTRIBUTE;break;case OpCodes.FROM_NAMESPACE:whatToShow=DTMFilter.SHOW_NAMESPACE;axis=Axis.PARENT;predicateAxis=Axis.NAMESPACE;break;case OpCodes.FROM_ANCESTORS:axis=Axis.DESCENDANT;predicateAxis=Axis.ANCESTOR;break;case OpCodes.FROM_CHILDREN:axis=Axis.PARENT;predicateAxis=Axis.CHILD;break;case OpCodes.FROM_ANCESTORS_OR_SELF:axis=Axis.DESCENDANTORSELF;predicateAxis=Axis.ANCESTORORSELF;break;case OpCodes.FROM_SELF:axis=Axis.SELF;predicateAxis=Axis.SELF;break;case OpCodes.FROM_PARENT:axis=Axis.CHILD;predicateAxis=Axis.PARENT;break;case OpCodes.FROM_PRECEDING_SIBLINGS:axis=Axis.FOLLOWINGSIBLING;predicateAxis=Axis.PRECEDINGSIBLING;break;case OpCodes.FROM_PRECEDING:axis=Axis.FOLLOWING;predicateAxis=Axis.PRECEDING;break;case OpCodes.FROM_FOLLOWING_SIBLINGS:axis=Axis.PRECEDINGSIBLING;predicateAxis=Axis.FOLLOWINGSIBLING;break;case OpCodes.FROM_FOLLOWING:axis=Axis.PRECEDING;predicateAxis=Axis.FOLLOWING;break;case OpCodes.FROM_DESCENDANTS_OR_SELF:axis=Axis.ANCESTORORSELF;predicateAxis=Axis.DESCENDANTORSELF;break;case OpCodes.FROM_DESCENDANTS:axis=Axis.ANCESTOR;predicateAxis=Axis.DESCENDANT;break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}if (null == ai) {whatToShow=compiler.getWhatToShow(opPos);ai=new StepPattern(whatToShow,compiler.getStepNS(opPos),compiler.getStepLocalName(opPos),axis,predicateAxis);}if (false || DEBUG_PATTERN_CREATION) {System.out.print("new step: " + ai);System.out.print(", axis: " + Axis.getNames(ai.getAxis()));System.out.print(", predAxis: " + Axis.getNames(ai.getAxis()));System.out.print(", what: ");System.out.print("    ");ai.debugWhatToShow(ai.getWhatToShow());}int argLen=compiler.getFirstPredicateOpPos(opPos);ai.setPredicates(compiler.getCompiledPredicates(argLen));return ai;}  }
class C{  private String nameFor(String namePattern,int index,Object[] parameters){  String finalPattern=namePattern.replaceAll("\\{index\\}",Integer.toString(index));  String name=MessageFormat.format(finalPattern,parameters);  return "[" + name + "]";}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public Dollar(){  super("dollar",TextTemplateMessages.MESSAGES.variableDescriptionDollar());  setEvaluationString("$");}  }
class C{  public void onAnimationCancel(Animator animation){}  }
class C{  @Override public void clear(){  super.clear();  int[] set=_set;  byte[] states=_states;  for (int i=set.length; i-- > 0; ) {    set[i]=(int)0;    states[i]=FREE;  }}  }
class C{  public static void extractExifInfo(MediaDetails details,String filePath){  ExifInterface exif=new ExifInterface();  try {    exif.readExif(filePath);  } catch (  FileNotFoundException e) {    Log.w(TAG,"Could not find file to read exif: " + filePath,e);  }catch (  IOException e) {    Log.w(TAG,"Could not read exif from file: " + filePath,e);  }  setExifData(details,exif.getTag(ExifInterface.TAG_FLASH),MediaDetails.INDEX_FLASH);  setExifData(details,exif.getTag(ExifInterface.TAG_IMAGE_WIDTH),MediaDetails.INDEX_WIDTH);  setExifData(details,exif.getTag(ExifInterface.TAG_IMAGE_LENGTH),MediaDetails.INDEX_HEIGHT);  setExifData(details,exif.getTag(ExifInterface.TAG_MAKE),MediaDetails.INDEX_MAKE);  setExifData(details,exif.getTag(ExifInterface.TAG_MODEL),MediaDetails.INDEX_MODEL);  setExifData(details,exif.getTag(ExifInterface.TAG_APERTURE_VALUE),MediaDetails.INDEX_APERTURE);  setExifData(details,exif.getTag(ExifInterface.TAG_ISO_SPEED_RATINGS),MediaDetails.INDEX_ISO);  setExifData(details,exif.getTag(ExifInterface.TAG_WHITE_BALANCE),MediaDetails.INDEX_WHITE_BALANCE);  setExifData(details,exif.getTag(ExifInterface.TAG_EXPOSURE_TIME),MediaDetails.INDEX_EXPOSURE_TIME);  ExifTag focalTag=exif.getTag(ExifInterface.TAG_FOCAL_LENGTH);  if (focalTag != null) {    details.addDetail(MediaDetails.INDEX_FOCAL_LENGTH,focalTag.getValueAsRational(0).toDouble());    details.setUnit(MediaDetails.INDEX_FOCAL_LENGTH,R.string.unit_mm);  }}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  @Override public void close(){}  }
class C{  @Override public boolean isDataCenterSynced(String dcName){  log.info("Check if data synced with Cassandra data center {}",dcName);  try {    StorageService.instance.forceKeyspaceCompaction("system",SystemKeyspace.HINTS_CF);  } catch (  Exception ex) {    log.warn("Fail to compact system HINTS_CF",ex);  }  List<InetAddress> allNodes=new ArrayList<>();  Set<InetAddress> liveNodes=Gossiper.instance.getLiveMembers();  allNodes.addAll(liveNodes);  Set<InetAddress> unreachableNodes=Gossiper.instance.getUnreachableMembers();  allNodes.addAll(unreachableNodes);  for (  InetAddress nodeIp : allNodes) {    IEndpointSnitch snitch=DatabaseDescriptor.getEndpointSnitch();    String dc=snitch.getDatacenter(nodeIp);    if (dc.equals(dcName)) {      log.info("Checking hinted handoff logs for node {} in data center {} ",nodeIp,dc);      if (hasPendingHintedHandoff(nodeIp)) {        return false;      }    }  }  return true;}  }
class C{  public static void closeSilently(Closeable out){  if (out != null) {    try {      trace("closeSilently",null,out);      out.close();    } catch (    Exception e) {    }  }}  }
class C{  @SuppressWarnings("restriction") @ParameterParser(syntax="('ambiguous' arg0=STRING)?") @Xpect @ConsumedIssues({Severity.INFO,Severity.ERROR,Severity.WARNING}) public void organizeImports(String ambiguous,@StringDiffExpectation(whitespaceSensitive=false,allowSingleSegmentDiff=false,allowSingleLineDiff=false) IStringDiffExpectation expectation,@ThisResource XtextResource resource) throws Exception {  logger.info("organize imports ...");  boolean bAmbiguityCheck=ambiguous != null && ambiguous.trim().length() > 0;  Interaction iaMode=bAmbiguityCheck ? Interaction.breakBuild : Interaction.takeFirst;  try {    if (expectation == null) {      throw new AssertionFailedError("The test is missing a diff: // XPECT organizeImports --> [old string replaced|new string expected] ");    }    String beforeApplication=resource.getParseResult().getRootNode().getText();    N4ContentAssistProcessorTestBuilder fixture=n4ContentAssistProcessorTestBuilderHelper.createTestBuilderForResource(resource);    IXtextDocument xtextDoc=fixture.getDocument(resource,beforeApplication);    final ResourceSet resSet=resource.getResourceSet();    for (    Resource currRes : new ArrayList<>(resSet.getResources())) {      N4JSResource.postProcess(currRes);    }    Display.getDefault().syncExec(null);    if (bAmbiguityCheck) {      assertEquals("Expected ambiguous resolution to break the organize import command.",ambiguous,"");    }    String textAfterApplication=xtextDoc.get();    String before=XpectCommentRemovalUtil.removeAllXpectComments(beforeApplication);    String after=XpectCommentRemovalUtil.removeAllXpectComments(textAfterApplication);    expectation.assertDiffEquals(before,after);  } catch (  Exception exc) {    if (exc instanceof RuntimeException && exc.getCause() instanceof BreakException) {      String breakMessage=exc.getCause().getMessage();      assertEquals(ambiguous,breakMessage);    } else {      throw exc;    }  }}  }
class C{  public TileImageFilter(int width,int height){  this.width=width;  this.height=height;}  }
class C{  public String toFormattedString(){  return "Parameters for cudaMemcopy3DPeer:\n    " + createString("\n    ");}  }
class C{  @Before public void beforeEach(){  mConnector=new MqttSourceConnector();  mSourceProperties=new HashMap<>();  mSourceProperties.put(MqttSourceConstant.KAFKA_TOPIC,"kafka_topic");  mSourceProperties.put(MqttSourceConstant.MQTT_CLEAN_SESSION,"true");  mSourceProperties.put(MqttSourceConstant.MQTT_CLIENT_ID,"TesetClientId");  mSourceProperties.put(MqttSourceConstant.MQTT_CONNECTION_TIMEOUT,"15");  mSourceProperties.put(MqttSourceConstant.MQTT_KEEP_ALIVE_INTERVAL,"30");  mSourceProperties.put(MqttSourceConstant.MQTT_QUALITY_OF_SERVICE,"2");  mSourceProperties.put(MqttSourceConstant.MQTT_SERVER_URIS,"tcp://127.0.0.1:1883");  mSourceProperties.put(MqttSourceConstant.MQTT_TOPIC,"mqtt_topic");}  }
class C{  public BufferedReader(Reader in){  this(in,defaultCharBufferSize);}  }
class C{  public boolean isAlterAdd(){  return columnsToAdd.size() > 0;}  }
class C{  public double[] normalize(double[] v){  double n=Math.sqrt(v[0] * v[0] + v[1] * v[1]);  v[0]/=n;  v[1]/=n;  return v;}  }
class C{  public HeapDataOutputStream(String s){  int maxStrBytes;  if (ASCII_STRINGS) {    maxStrBytes=s.length();  } else {    maxStrBytes=s.length() * 3;  }  this.MIN_CHUNK_SIZE=INITIAL_CAPACITY;  this.buffer=ByteBuffer.allocate(maxStrBytes);  this.doNotCopy=false;  writeUTFNoLength(s);}  }
class C{  @Override public void process(K tuple){  inputSet.add(tuple);  processTuple(tuple);}  }
class C{  @Override public boolean isEdgeLabelDecorating(){  return false;}  }
class C{  public void handleClient() throws IOException {  boolean validQuery;  while (true) {    link.readAndParse();    validQuery=false;    if (!validQuery) {      huh(link);    }  }}  }
class C{  @Override public boolean canProvideImageForSize(ResizeOptions resizeOptions){  return ThumbnailSizeChecker.isImageBigEnough(COMMON_EXIF_THUMBNAIL_MAX_DIMENSION,COMMON_EXIF_THUMBNAIL_MAX_DIMENSION,resizeOptions);}  }
class C{  public List<NGramModel> find(String aGram){  return find(aGram.split(" "));}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final byte value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (!isFirstBatchDone()) {    createSubsample();  }  flushInput();  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  public void addVolume(Volume volume){  this.volume=volume;}  }
class C{  public boolean isCpuStatistics(){  return cpuStatistics;}  }
class C{  public void createTable(Table t,boolean replace) throws SQLException {  createTable(t,replace,null);}  }
class C{  private static <T>void siftUpComparable(int k,T x,Object[] array){  Comparable<? super T> key=(Comparable<? super T>)x;  while (k > 0) {    int parent=(k - 1) >>> 1;    Object e=array[parent];    if (key.compareTo((T)e) >= 0)     break;    array[k]=e;    k=parent;  }  array[k]=key;}  }
class C{  public GenericObject next(ListIterator li){  return (NetObject)super.next(li);}  }
class C{  public static StoreReader createReader(InputStream stream,Configuration config){  return StoreImpl.createReader(stream,config);}  }
class C{  protected State(double zoom,double x,double y,Font font,float lineWidth,int[] lineDash,Pattern background,Pattern foreground){  this.zoom=zoom;  this.appliedX=x;  this.appliedY=y;  this.font=font;  this.lineWidth=lineWidth;  this.lineDash=lineDash;  this.background=background;  this.foreground=foreground;}  }
class C{  public void reset(){  initialTime=0;  previousFramePercentage=0;  changeState(State.NOT_STARTED);  ViewCompat.postInvalidateOnAnimation(this);}  }
class C{  @ObjectiveCName("sendMessageWithPeer:withText:withMarkdownText:") public void sendMessage(@NotNull Peer peer,@NotNull String text,@Nullable String markDownText){  sendMessage(peer,text,markDownText,null,false);}  }
class C{  void foo(){}  }
class C{  public XMLString toLowerCase(Locale locale){  return new XMLStringDefault(m_str.toLowerCase(locale));}  }
class C{  public void addRoleName(String roleName){  if (roleNames == null) {    roleNames=New.arrayList();  }  roleNames.add(roleName);}  }
class C{  protected void init(String owner,MethodNode m) throws AnalyzerException {}  }
class C{  public void testPop(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.pop());  }  try {    q.pop();    shouldThrow();  } catch (  NoSuchElementException success) {  }}  }
class C{  public void tryToMarkQueuedGroupChatMessagesAndGroupFileTransfersAsFailed(String chatId){  mImOperationHandler.post(new GroupChatTerminalExceptionTask(chatId,mChatService,mFileTransferService,mHistoryLog));}  }
class C{  public boolean isSingular(){  return determinant() == 0;}  }
class C{  public static List<PossibleDConnectingPath> findDConnectingPaths(Graph pag,Node x,Node y,Collection<Node> z){  if (!pag.containsNode(x) || !pag.containsNode(y) || x.equals(y)) {    return Collections.emptyList();  }  for (  Node node : z) {    if (!pag.containsNode(node)) {      return Collections.emptyList();    }  }  if (pag.isAdjacentTo(x,y)) {    return Collections.singletonList(new PossibleDConnectingPath(pag,new HashSet<>(z),Arrays.asList(x,y)));  }  List<PossibleDConnectingPath> connectingPaths=new LinkedList<>();  Set<Node> conditions=new HashSet<>(z);  Set<Node> closure=getConditioningClosure(pag,z);  Set<List<Node>> paths=new HashSet<>();  findPaths(pag,paths,null,x,y,conditions,closure,new LinkedList<Node>());  for (  List<Node> path : paths) {    connectingPaths.add(new PossibleDConnectingPath(pag,conditions,path));  }  return connectingPaths;}  }
class C{  public void init() throws ServletException {}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private void enforceStrictlySequential(boolean b){  this.enforceStrictlySequential=b;}  }
class C{  public static boolean reflectionEquals(Object lhs,Object rhs){  return reflectionEquals(lhs,rhs,false,null,null);}  }
class C{  public static boolean uninstallNormal(Context context,String packageName){  if (packageName == null || packageName.length() == 0) {    return false;  }  Intent i=new Intent(Intent.ACTION_DELETE,Uri.parse(new StringBuilder(32).append("package:").append(packageName).toString()));  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(i);  return true;}  }
class C{  public static boolean isMmsCapable(Context context){  TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephonyManager == null) {    return false;  }  try {    Class<?> partypes[]=new Class[0];    Method sIsVoiceCapable=TelephonyManager.class.getMethod("isVoiceCapable",partypes);    Object arglist[]=new Object[0];    Object retobj=sIsVoiceCapable.invoke(telephonyManager,arglist);    return (Boolean)retobj;  } catch (  java.lang.reflect.InvocationTargetException ite) {  }catch (  IllegalAccessException iae) {  }catch (  NoSuchMethodException nsme) {  }  return true;}  }
class C{  public static Scs cs_load(String fileName){  int i, j;  float x;  Scs T;  BufferedReader in;  try {    in=new BufferedReader(new FileReader(fileName));  } catch (  FileNotFoundException e1) {    return (null);  }  T=Scs_util.cs_spalloc(0,0,1,true,true);  String line;  try {    while ((line=in.readLine()) != null) {      String[] tokens=line.trim().split("\\s+");      if (tokens.length != 3) {        return null;      }      i=Integer.parseInt(tokens[0]);      j=Integer.parseInt(tokens[1]);      x=Float.parseFloat(tokens[2]);      if (!Scs_entry.cs_entry(T,i,j,x))       return (null);    }  } catch (  IOException e) {    return (null);  }  return (T);}  }
class C{  @SuppressWarnings("unchecked") public void mouseReleased(MouseEvent e){  if (checkModifiers(e)) {    final VisualizationViewer<V,E> vv=(VisualizationViewer<V,E>)e.getSource();    final Point2D p=e.getPoint();    Layout<V,E> layout=vv.getGraphLayout();    if (createMode == Creating.EDGE) {      GraphElementAccessor<V,E> pickSupport=vv.getPickSupport();      V vertex=null;      if (pickSupport != null) {        vertex=pickSupport.getVertex(layout,p.getX(),p.getY());      }      edgeSupport.endEdgeCreate(vv,vertex);    } else     if (createMode == Creating.VERTEX) {      vertexSupport.endVertexCreate(vv,e.getPoint());    }  }  createMode=Creating.UNDETERMINED;}  }
class C{  public void testCase11(){  byte aBytes[]={0};  byte bBytes[]={15,48,-29,7,98,-1,39,-128};  int aSign=0;  int bSign=-1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public void redrawMap(){  if (mapController != null)   mapController.queueEvent(notifyScreenChangeRunnable);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isPaddy(Block block){  return GrowthCraftRice.blocks.paddyField.equals(block);}  }
class C{  public void initializeDelegate(MembersInjector<T> delegate){  checkState(this.delegate == null,"delegate already initialized");  this.delegate=checkNotNull(delegate,"delegate");}  }
class C{  public String classifierTipText(){  return "The classifier to use.";}  }
class C{  private void deleteCommits(){  int size=commitsToDelete.size();  if (size > 0) {    Throwable firstThrowable=null;    for (int i=0; i < size; i++) {      CommitPoint commit=commitsToDelete.get(i);      if (infoStream.isEnabled("IFD")) {        infoStream.message("IFD","deleteCommits: now decRef commit \"" + commit.getSegmentsFileName() + "\"");      }      try {        decRef(commit.files);      } catch (      Throwable t) {        if (firstThrowable == null) {          firstThrowable=t;        }      }    }    commitsToDelete.clear();    IOUtils.reThrowUnchecked(firstThrowable);    size=commits.size();    int readFrom=0;    int writeTo=0;    while (readFrom < size) {      CommitPoint commit=commits.get(readFrom);      if (!commit.deleted) {        if (writeTo != readFrom) {          commits.set(writeTo,commits.get(readFrom));        }        writeTo++;      }      readFrom++;    }    while (size > writeTo) {      commits.remove(size - 1);      size--;    }  }}  }
class C{  private BigDecimal determineUsageCostsForPeriod(PeriodFeeType periodFee,PriceModelHistory referenceHistory,double factor){  BigDecimal pFee=ZERO_NORMALIZED;  if (referenceHistory.isChargeable()) {    final BigDecimal pricePerPeriod=referenceHistory.getDataContainer().getPricePerPeriod();    pFee=pricePerPeriod.multiply(BigDecimal.valueOf(factor)).setScale(PriceConverter.NORMALIZED_PRICE_SCALING,RoundingMode.HALF_UP);    periodFee.setFactor(BigDecimal.valueOf(factor));    periodFee.setPrice(pFee);  }  return pFee;}  }
class C{  @Override public void serialize(String name,byte[] message,OutputStream out) throws IOException {  byte[] header=new byte[4 + COMMAND_LEN + 4+ 4];  uint32ToByteArrayBE(params.getPacketMagic(),header,0);  for (int i=0; i < name.length() && i < COMMAND_LEN; i++) {    header[4 + i]=(byte)(name.codePointAt(i) & 0xFF);  }  Utils.uint32ToByteArrayLE(message.length,header,4 + COMMAND_LEN);  byte[] hash=Sha256Hash.hashTwice(message);  System.arraycopy(hash,0,header,4 + COMMAND_LEN + 4,4);  out.write(header);  out.write(message);  if (log.isDebugEnabled())   log.debug("Sending {} message: {}",name,HEX.encode(header) + HEX.encode(message));}  }
class C{  public final int calcMobilityTools(){  double[] utils=new double[6];  utils[0]=this.calcCARneverPTnoUtil();  utils[1]=this.calcCARsometimesPTnoUtil();  utils[2]=this.calcCARalwaysPTnoUtil();  utils[3]=this.calcCARneverPTyesUtil();  utils[4]=this.calcCARsometimesPTyesUtil();  utils[5]=this.calcCARalwaysPTyesUtil();  double[] probs=this.calcLogitProbability(utils);  double r=MatsimRandom.getRandom().nextDouble();  double prob_sum=0.0;  for (int i=0; i < probs.length; i++) {    prob_sum+=probs[i];    if (r < prob_sum) {      return i;    }  }  System.out.println("r=" + r);  System.out.println("age=" + age);  System.out.println("sex=" + sex);  System.out.println("nat=" + nat);  System.out.println("nump=" + nump);  System.out.println("numk=" + numk);  System.out.println("inc=" + inc);  System.out.println("udeg=" + udeg);  System.out.println("license=" + license);  System.out.println("disthw=" + disthw);  System.out.println("fuelcost=" + fuelcost);  System.out.println("language=" + language);  for (int i=0; i < utils.length; i++) {    System.out.println("utils[" + i + "]="+ utils[i]);  }  for (int i=0; i < probs.length; i++) {    System.out.println("probs[" + i + "]="+ probs[i]);  }  throw new RuntimeException("It should never reach this line!");}  }
class C{  public static final int hash32(final byte[] data,int offset,int len){  return MurmurHash2.hash(data,0x9747b28c,offset,len);}  }
class C{  public Subscription registerDolphinContext(DolphinSession session,GarbageCollector garbageCollector){  Assert.requireNonNull(session,"session");  Assert.requireNonNull(garbageCollector,"garbageCollector");  DolphinSessionInfoMBean mBean=new DolphinSessionInfo(session,garbageCollector);  return MBeanRegistry.getInstance().register(mBean,new MBeanDescription("com.canoo.dolphin","DolphinSession","session"));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.DIRECTIVE___GLOSSARY_1:    getGlossary_1().clear();  return;case UmplePackage.DIRECTIVE___GENERATE_1:getGenerate_1().clear();return;case UmplePackage.DIRECTIVE___GENERATE_PATH_1:getGenerate_path_1().clear();return;case UmplePackage.DIRECTIVE___USE_STATEMENT_1:getUseStatement_1().clear();return;case UmplePackage.DIRECTIVE___NAMESPACE_1:getNamespace_1().clear();return;case UmplePackage.DIRECTIVE___TRACE_TYPE_1:getTraceType_1().clear();return;case UmplePackage.DIRECTIVE___ENTITY_1:getEntity_1().clear();return;case UmplePackage.DIRECTIVE___DEBUG_1:getDebug_1().clear();return;case UmplePackage.DIRECTIVE___STRICTNESS_1:getStrictness_1().clear();return;}super.eUnset(featureID);}  }
class C{  @Nullable public static String directoryMd5(@Nullable File dir,@Nullable IgniteLogger log){  if (dir != null) {    if (!dir.isDirectory()) {      U.warn(log,"Failed to find directory for md5 calculation: " + dir);      return null;    }    try {      MessageDigest digest=MessageDigest.getInstance("MD5");      return addDirectoryDigest(dir,digest,log) ? Hex.encodeHexString(digest.digest()) : null;    } catch (    NoSuchAlgorithmException e) {      throw new IgniteException("MD5 digest algorithm not found.",e);    }  }  return null;}  }
class C{  @SuppressWarnings("EmptyTryBlock") public static void create(IgfsImpl igfs,@Nullable IgfsPath[] dirs,@Nullable IgfsPath[] files) throws Exception {  if (dirs != null) {    for (    IgfsPath dir : dirs)     igfs.mkdirs(dir);  }  if (files != null) {    for (    IgfsPath file : files) {      try (OutputStream ignored=igfs.create(file,true)){      }       igfs.await(file);    }  }}  }
class C{  public boolean isEOF(){  return (type == TokenType.EOF);}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  @Override public boolean isValidJoin(@NotNull Map<String,Object> row1,Map<String,Object> row2){  assert (false);  return false;}  }
class C{  public boolean markSupported(){  return true;}  }
class C{  public ExceptionQueuedEventContext(FacesContext context,Throwable thrown,UIComponent component){  this(context,thrown,component,null);}  }
class C{  public int compareTo(Object obj){  if (!(obj instanceof Rdn)) {    throw new ClassCastException("The obj is not a Rdn");  }  if (obj == this) {    return 0;  }  Rdn that=(Rdn)obj;  int minSize=Math.min(entries.size(),that.entries.size());  for (int i=0; i < minSize; i++) {    int diff=entries.get(i).compareTo(that.entries.get(i));    if (diff != 0) {      return diff;    }  }  return (entries.size() - that.entries.size());}  }
class C{  public JobStateReasons(){  super();}  }
class C{  protected void processTextEvent(TextEvent e){  TextListener listener=textListener;  if (listener != null) {    int id=e.getID();switch (id) {case TextEvent.TEXT_VALUE_CHANGED:      listener.textValueChanged(e);    break;}}}  }
class C{  public byte[] toByteArray(){  writeCurrentByte();  byte[] byteArray=byteStream.toByteArray();  byteStream.reset();  return byteArray;}  }
class C{  public PushParams withTag(String tag){  this.tag=tag;  return this;}  }
class C{  public void clear(){synchronized (mLock) {    mObjects.clear();  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  DepGraphStats(DepGraph dg,String bbName){  int _numNodes=0;  boolean containsLoadOrStore=false;  for (DepGraphNode n=(DepGraphNode)dg.firstNode(); n != null; n=(DepGraphNode)n.getNext()) {    _numNodes++;    Instruction instr=n.instruction();    if (instr.isImplicitStore() || instr.isImplicitLoad()) {      containsLoadOrStore=true;    }  }  DepGraphNode[] nodes=new DepGraphNode[_numNodes];  int[] ECT=new int[_numNodes];  int _totalTime=0;  int _critPathLength=0;  int i=0;  for (DepGraphNode n=(DepGraphNode)dg.firstNode(); n != null; n=(DepGraphNode)n.getNext()) {    nodes[i]=n;    ECT[i]=0;    for (DepGraphEdge e=(DepGraphEdge)n.firstInEdge(); e != null; e=(DepGraphEdge)e.getNextIn()) {      DepGraphNode pred=(DepGraphNode)e.fromNode();      int j;      for (j=0; j < i; j++) {        if (nodes[j] == pred) {          break;        }      }      if (j == i) {        throw new OptimizingCompilerException("DepGraphStats: dep graph is not topologically sorted ???");      }      ECT[i]=Math.max(ECT[i],ECT[j]);    }    Instruction instr=n.instruction();    int curTime=estimateExecutionTime(instr);    _totalTime+=curTime;    ECT[i]+=curTime;    _critPathLength=Math.max(_critPathLength,ECT[i]);    i++;  }  System.out.println("@@@@ BB " + bbName + "; totalTime = "+ _totalTime+ "; containsLoadOrStore = "+ containsLoadOrStore+ "; critPathLength = "+ _critPathLength);}  }
class C{  public static String encodeQueryString(String value){  return encodeValue(value,queryStringEncoding);}  }
class C{  public static String[] initPathsFromProperties(Properties p,String propName){  return initPathsFromProperties(p,propName,null);}  }
class C{  public SoftCache(){  hash=new HashMap();}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader;  String inputViewingStation;  String outputHeader;  int row, col, rows, cols;  int progress=0;  double z, noData, outputNoData;  double stationHeight;  double[] data;  double vertCount=1;  double horizCount;  double t1, t2, tva;  int stationRow;  int stationCol;  double x, y, dist, dZ, viewAngleValue;  double va;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  inputViewingStation=args[1];  outputHeader=args[2];  stationHeight=Double.parseDouble(args[3]);  if (demHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(demHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=DEM.getNoDataValue();    double stationX;    double stationY;    double stationZ;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    WhiteboxRaster viewAngle=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    viewAngle.isTemporaryFile=true;    WhiteboxRaster maxViewAngle=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    maxViewAngle.isTemporaryFile=true;    ArrayList<Double> stationXs=new ArrayList<>();    ArrayList<Double> stationYs=new ArrayList<>();    if (inputViewingStation.toLowerCase().endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputViewingStation);      if (input.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The input viewing station vector should be \n" + "of a Point or MultiPoint ShapeType.");        return;      }      for (      ShapeFileRecord record : input.records) {        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      stationXs.add(vertices[0][0]);    stationYs.add(vertices[0][1]);  break;case POINTZ:PointZ recPointZ=(PointZ)(record.getGeometry());vertices=recPointZ.getPoints();stationXs.add(vertices[0][0]);stationYs.add(vertices[0][1]);break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());vertices=recPointM.getPoints();stationXs.add(vertices[0][0]);stationYs.add(vertices[0][1]);break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)(record.getGeometry());vertices=recMultiPoint.getPoints();for (int i=0; i < vertices.length; i++) {stationXs.add(vertices[i][0]);stationYs.add(vertices[i][1]);}break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)(record.getGeometry());vertices=recMultiPointZ.getPoints();for (int i=0; i < vertices.length; i++) {stationXs.add(vertices[i][0]);stationYs.add(vertices[i][1]);}break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)(record.getGeometry());vertices=recMultiPointM.getPoints();for (int i=0; i < vertices.length; i++) {stationXs.add(vertices[i][0]);stationYs.add(vertices[i][1]);}break;}}} else if (inputViewingStation.toLowerCase().endsWith(".dep")) {WhiteboxRaster viewStation=new WhiteboxRaster(inputViewingStation,"r");int vsRows=viewStation.getNumberRows();int vsCols=viewStation.getNumberColumns();double vsNoData=viewStation.getNoDataValue();for (row=0; row < vsRows; row++) {data=viewStation.getRowValues(row);for (col=0; col < vsCols; col++) {z=data[col];if (z != vsNoData & z != 0) {stationXs.add(viewStation.getXCoordinateFromColumn(col));stationYs.add(viewStation.getXCoordinateFromColumn(row));}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (vsRows - 1));updateProgress(progress);}} else {showFeedback("Unrecognized input viewing station file type.");return;}int numStations=stationXs.size();for (int a=0; a < numStations; a++) {stationX=stationXs.get(a);stationY=stationYs.get(a);stationRow=DEM.getRowFromYCoordinate(stationY);stationCol=DEM.getColumnFromXCoordinate(stationX);stationZ=DEM.getValue(stationRow,stationCol) + stationHeight;for (row=0; row < rows; row++) {data=DEM.getRowValues(row);for (col=0; col < cols; col++) {z=data[col];if (z != noData) {x=DEM.getXCoordinateFromColumn(col);y=DEM.getYCoordinateFromRow(row);dZ=z - stationZ;dist=Math.sqrt((x - stationX) * (x - stationX) + (y - stationY) * (y - stationY));if (dist != 0.0) {viewAngleValue=dZ / dist * 1000;viewAngle.setValue(row,col,viewAngleValue);}} else {viewAngle.setValue(row,col,outputNoData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}for (row=stationRow - 1; row <= stationRow + 1; row++) {for (col=stationCol - 1; col <= stationCol + 1; col++) {maxViewAngle.setValue(row,col,viewAngle.getValue(row,col));}}double maxVA=viewAngle.getValue(stationRow - 1,stationCol);for (row=stationRow - 2; row >= 0; row--) {z=viewAngle.getValue(row,stationCol);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(row,stationCol,maxVA);}maxVA=viewAngle.getValue(stationRow + 1,stationCol);for (row=stationRow + 2; row < rows; row++) {z=viewAngle.getValue(row,stationCol);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(row,stationCol,maxVA);}maxVA=viewAngle.getValue(stationRow,stationCol + 1);for (col=stationCol + 2; col < cols - 1; col++) {z=viewAngle.getValue(stationRow,col);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(stationRow,col,maxVA);}maxVA=viewAngle.getValue(stationRow,stationCol - 1);for (col=stationCol - 2; col >= 0; col--) {z=viewAngle.getValue(stationRow,col);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(stationRow,col,maxVA);}for (row=stationRow - 2; row >= 0; row--) {vertCount++;horizCount=0;for (col=stationCol + 1; col <= stationCol + vertCount; col++) {if (col <= cols) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col - 1);t2=maxViewAngle.getValue(row + 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (row=stationRow - 2; row >= 0; row--) {vertCount++;horizCount=0;for (col=stationCol - 1; col >= stationCol - vertCount; col--) {if (col >= 0) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col + 1);t2=maxViewAngle.getValue(row + 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (row=stationRow + 2; row < rows; row++) {vertCount++;horizCount=0;for (col=stationCol - 1; col >= stationCol - vertCount; col--) {if (col >= 0) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col + 1);t2=maxViewAngle.getValue(row - 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (row=stationRow + 2; row < rows; row++) {vertCount++;horizCount=0;for (col=stationCol + 1; col <= stationCol + vertCount; col++) {if (col < cols) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col - 1);t2=maxViewAngle.getValue(row - 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol + 2; col < cols; col++) {vertCount++;horizCount=0;for (row=stationRow - 1; row >= stationRow - vertCount; row--) {if (row >= 0) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col - 1);t2=maxViewAngle.getValue(row,col - 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol + 2; col < cols; col++) {vertCount++;horizCount=0;for (row=stationRow + 1; row <= stationRow + vertCount; row++) {if (row < rows) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col - 1);t2=maxViewAngle.getValue(row,col - 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol - 2; col >= 0; col--) {vertCount++;horizCount=0;for (row=stationRow + 1; row <= stationRow + vertCount; row++) {if (row < rows) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col + 1);t2=maxViewAngle.getValue(row,col + 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol - 2; col >= 0; col--) {vertCount++;horizCount=0;for (row=stationRow - 1; row >= stationRow - vertCount; row--) {if (row < rows) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col + 1);t2=maxViewAngle.getValue(row,col + 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}viewAngle.flush();maxViewAngle.flush();double[] dataVA;for (row=0; row < rows; row++) {dataVA=viewAngle.getRowValues(row);data=maxViewAngle.getRowValues(row);for (col=0; col < cols; col++) {if (data[col] <= dataVA[col] && dataVA[col] != outputNoData) {output.setValue(row,col,output.getValue(row,col) + 1);} else if (dataVA[col] == outputNoData) {output.setValue(row,col,outputNoData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}}viewAngle.close();maxViewAngle.close();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());DEM.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void removeUserInfo(){  this.userInfo=null;}  }
class C{  @Override public boolean validate(List<String> warnings){  return true;}  }
class C{  public boolean declaresFieldByName(String name){  checkLevel(SIGNATURES);  Iterator<SootField> fieldIt=getFields().iterator();  while (fieldIt.hasNext()) {    SootField field=fieldIt.next();    if (field.name.equals(name))     return true;  }  return false;}  }
class C{  public CopyOnWriteArraySet(){  al=new CopyOnWriteArrayList<E>();}  }
class C{  public boolean testAllocation(){  boolean change=false;  if (isProcessed()) {    BigDecimal alloc=getAllocatedAmt();    if (alloc == null)     alloc=Env.ZERO;    BigDecimal total=getGrandTotal();    if (!isSOTrx())     total=total.negate();    if (isCreditMemo())     total=total.negate();    boolean test=total.compareTo(alloc) == 0;    change=test != isPaid();    if (change)     setIsPaid(test);    log.fine("Paid=" + test + " ("+ alloc+ "="+ total+ ")");  }  return change;}  }
class C{  @Provides @Config("rdeInterval") public static Duration provideRdeInterval(){  return Duration.standardDays(1);}  }
class C{  public UnweightedShortestPath(Hypergraph<V,E> g){  mDistanceMap=new HashMap<V,Map<V,Number>>();  mIncomingEdgeMap=new HashMap<V,Map<V,E>>();  mGraph=g;}  }
class C{  public static String fetchVersionToUpdate() throws GitAPIException {  Version current=Version.valueOf(Config.semverize(Config.getCurrentVersion()));  Version latest=current;  boolean isUpdateRequired=false;  Collection<Ref> refs;  refs=Git.lsRemoteRepository().setRemote(UPDATE_REPOSITORY_URL).setHeads(false).setTags(true).call();  for (  Ref ref : refs) {    String tag=ref.getName().replaceFirst("^refs/tags/","");    if (tag.charAt(0) == 'v') {      String versionString=Config.semverize(tag);      try {        Version ver=Version.valueOf(versionString);        if (ver.greaterThan(latest)) {          isUpdateRequired=true;          latest=ver;        }      } catch (      UnexpectedElementTypeException e) {        play.Logger.warn("Failed to parse a version: " + versionString);      }    }  }  if (isUpdateRequired) {    return latest.toString();  } else {    return null;  }}  }
class C{  private boolean hasMarketplaceOwnerRights(ProductReview reviewToBeRemoved){  if (getMarketplaceOwned(reviewToBeRemoved) != null)   return true; else   return false;}  }
class C{  private static void fillBaseFields(final Product product,final LocalizerFacade facade,final VOService voProduct,PerformanceHint scope){  fillIdentifyingFields(product,voProduct);  voProduct.setAutoAssignUserEnabled(product.isAutoAssignUserEnabled());  voProduct.setStatus(product.getStatus());  voProduct.setSellerKey(product.getVendorKey());  ProductFeedback feedback=product.getProductTemplate().getProductFeedback();  if (feedback != null) {    voProduct.setAverageRating(feedback.getAverageRating());    voProduct.setNumberOfReviews(feedback.getProductReviews().size());  } else {    voProduct.setAverageRating(BigDecimal.ZERO);  }  final Organization supplier=getSupplier(product);  if (supplier != null) {    if (supplier.getGrantedRoleTypes().contains(OrganizationRoleType.SUPPLIER)) {      voProduct.setOfferingType(OfferingType.DIRECT);    } else     if (supplier.getGrantedRoleTypes().contains(OrganizationRoleType.BROKER)) {      voProduct.setOfferingType(OfferingType.BROKER);    } else     if (supplier.getGrantedRoleTypes().contains(OrganizationRoleType.RESELLER)) {      voProduct.setOfferingType(OfferingType.RESELLER);    }    voProduct.setSellerId(supplier.getOrganizationId());    voProduct.setSellerName(supplier.getName() != null && supplier.getName().trim().length() > 0 ? supplier.getName() : supplier.getOrganizationId());  }  long key=getKeyForLocalizedResource(product);  String name=getServiceName(product,facade);  voProduct.setName(name);  String shortDescription=facade.getText(key,LocalizedObjectTypes.PRODUCT_SHORT_DESCRIPTION);  voProduct.setShortDescription(shortDescription);  PriceModel pm;  if (ServiceType.isTemplate(product.getType()) && supplier != null && (supplier.getGrantedRoleTypes().contains(OrganizationRoleType.RESELLER) || supplier.getGrantedRoleTypes().contains(OrganizationRoleType.BROKER)) && product.getTemplate() != null) {    pm=product.getTemplate().getPriceModel();  } else {    pm=product.getPriceModel();  }  VOPriceModel voPM=PriceModelAssembler.toVOPriceModel(pm,facade,scope);  if (ServiceType.isTemplate(product.getType()) && voPM != null && supplier != null && supplier.getGrantedRoleTypes().contains(OrganizationRoleType.RESELLER)) {    final String license=facade.getText(product.getKey(),LocalizedObjectTypes.RESELLER_PRICEMODEL_LICENSE);    voPM.setLicense(license);  }  voProduct.setPriceModel(voPM);  TechnicalProduct technicalProduct=product.getTechnicalProduct();  voProduct.setTechnicalId(technicalProduct.getTechnicalProductId());  voProduct.setTags(TagAssembler.toStrings(technicalProduct.getTags(),facade.getLocale()));  voProduct.setAccessType(technicalProduct.getAccessType());  voProduct.setBaseURL(technicalProduct.getBaseURL());  voProduct.setBillingIdentifier(technicalProduct.getBillingIdentifier());}  }
class C{  public TemplateModelException(Throwable cause){  this((String)null,cause);}  }
class C{  public void close(){  try {    openReplicator.stop(100,TimeUnit.MILLISECONDS);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private void appendPointTaggedText(Coordinate coordinate,int level,Writer writer,PrecisionModel precisionModel) throws IOException {  writer.write("POINT ");  appendPointText(coordinate,level,writer,precisionModel);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    setDisplay();    createQuery();    dispose();  } else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {    m_query=null;    m_display=null;    dispose();  }}  }
class C{  private void weightedMedian(int iteration,mxGraphHierarchyModel model){  boolean downwardSweep=(iteration % 2 == 0);  if (downwardSweep) {    for (int j=model.maxRank - 1; j >= 0; j--) {      medianRank(j,downwardSweep);    }  } else {    for (int j=1; j < model.maxRank; j++) {      medianRank(j,downwardSweep);    }  }}  }
class C{  public boolean match(TimePattern other,boolean strongComparison){  if (!possibleMatch(other,strongComparison))   return false;  return getDays().equals(other.getDays()) && getTimes().equals(other.getTimes());}  }
class C{  public boolean isWrapperFor(Class iface) throws SQLException {  return false;}  }
class C{  public ReadWriteMultipleRequest(int unit,int readRef,int readCount,int writeRef,int writeCount){  super();  setUnitID(unit);  setFunctionCode(Modbus.READ_WRITE_MULTIPLE);  setDataLength(9 + writeCount * 2);  readReference=readRef;  this.readCount=readCount;  writeReference=writeRef;  this.writeCount=writeCount;  registers=new Register[writeCount];  for (int i=0; i < writeCount; i++) {    registers[i]=new SimpleRegister(0);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void unsetTriggerId(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,TRIGGERID_ISSET_ID);}  }
class C{  public Context join(Context other,List<ContextualDatum> data,double tau){  List<Integer> newDimensions=new ArrayList<Integer>();  List<Interval> newIntervals=new ArrayList<Interval>();  List<Integer> dimensions1=dimensions;  List<Integer> dimensions2=other.dimensions;  if (dimensions1.size() != dimensions2.size())   return null;  for (int i=0; i < dimensions1.size(); i++) {    int dimension1=dimensions1.get(i);    int dimension2=dimensions2.get(i);    Interval interval1=intervals.get(i);    Interval interval2=other.intervals.get(i);    if (i != dimensions1.size() - 1) {      if (dimension1 != dimension2)       return null;      if (interval1 != interval2)       return null;      newDimensions.add(dimension1);      newIntervals.add(interval1);    } else {      newDimensions.add(dimension1);      newIntervals.add(interval1);      newDimensions.add(dimension2);      newIntervals.add(interval2);    }  }  Context newUnit=new Context(newDimensions,newIntervals,this,other);  if (densityPruning(newUnit,tau)) {    return null;  }  if (dependencyPruning(newUnit)) {    return null;  }  return newUnit;}  }
class C{  public TableLayout(int rows,int columns){  this.rows=rows;  this.columns=columns;  tablePositions=new Constraint[rows * columns];}  }
class C{  public void fireProjectorColorsChanged(){  for (  ProjectorListener listener : listeners) {    listener.projectorColorsChanged();  }}  }
class C{  public static boolean nullEquals(Object o1,Object o2){  return o1 == o2 || o1 != null && o2 != null && o1.equals(o2);}  }
class C{  @Override @Deprecated public Condition duplicate(){  return this;}  }
class C{  public boolean isPrimary(){synchronized (this) {    return this.primaryState == IS_PRIMARY_HOSTING;  }}  }
class C{  public DateTime toDateTime(){  return toDateTime((DateTimeZone)null);}  }
class C{  public LookupFilter(Colormap colormap){  canFilterIndexColorModel=true;  this.colormap=colormap;}  }
class C{  public LazyArray(final LazyArray<? extends Type> array){  super(array);  this.provider=array.provider;}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  private void createReview(ProductReview review,Product product) throws OperationNotPermittedException, NonUniqueBusinessKeyException {  checkIfAllowedToCreate(product);  review.setPlatformUser(getLoggedInUser());  review.setProductFeedback(product.getProductFeedback());  dm.persist(review);  product.getProductFeedback().getProductReviews().add(review);}  }
class C{  @Override public void play() throws IllegalStateException {  log.i("play");  trackHandlerGate.close();  Message msg=trackHandler.obtainMessage(MSG_PLAY_TRACK);  if (log.allowDebug()) {    log.d("Sending play to DirectTrack handler thread");  }  trackHandler.sendMessage(msg);  trackHandlerGate.block();  if (log.allowDebug()) {    log.d("DirectTrack Play done");  }}  }
class C{  public boolean isTop(){  return isTop;}  }
class C{  public void addParentPriorityPackages(String[] pkg){  for (int i=0; pkg != null && i < pkg.length; i++) {    addParentPriorityPackage(pkg[i]);  }}  }
class C{  public boolean consistentWith(Assignment a,Set<String> subvars){  for (  String subvar : subvars) {    Value v2=map.get(subvar);    Value v1=a.getValue(subvar);    if (v1 == null || v2 == null || !v1.equals(v2)) {      return false;    }  }  return true;}  }
class C{  public void printEntryDetails(Writer w){  int linesadded=-1;  String title;  try {    HardcopyWriter ww=(HardcopyWriter)w;    int textSpace=ww.getCharactersPerLine() - indentWidth - 1;    title="   ID:                ";    if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {      linesadded=writeWrappedComment(w,_id,title,textSpaceWithIcon) + linesadded;    } else {      linesadded=writeWrappedComment(w,_id,title,textSpace) + linesadded;    }    title="   Filename:          ";    if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {      linesadded=writeWrappedComment(w,_fileName != null ? _fileName : "<null>",title,textSpaceWithIcon) + linesadded;    } else {      linesadded=writeWrappedComment(w,_fileName != null ? _fileName : "<null>",title,textSpace) + linesadded;    }    if (!(_roadName.isEmpty())) {      title="   Road name:         ";      if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {        linesadded=writeWrappedComment(w,_roadName,title,textSpaceWithIcon) + linesadded;      } else {        linesadded=writeWrappedComment(w,_roadName,title,textSpace) + linesadded;      }    }    if (!(_roadNumber.isEmpty())) {      title="   Road number:       ";      if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {        linesadded=writeWrappedComment(w,_roadNumber,title,textSpaceWithIcon) + linesadded;      } else {        linesadded=writeWrappedComment(w,_roadNumber,title,textSpace) + linesadded;      }    }    if (!(_mfg.isEmpty())) {      title="   Manufacturer:      ";      if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {        linesadded=writeWrappedComment(w,_mfg,title,textSpaceWithIcon) + linesadded;      } else {        linesadded=writeWrappedComment(w,_mfg,title,textSpace) + linesadded;      }    }    if (!(_owner.isEmpty())) {      title="   Owner:             ";      if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {        linesadded=writeWrappedComment(w,_owner,title,textSpaceWithIcon) + linesadded;      } else {        linesadded=writeWrappedComment(w,_owner,title,textSpace) + linesadded;      }    }    if (!(_model.isEmpty())) {      title="   Model:             ";      if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {        linesadded=writeWrappedComment(w,_model,title,textSpaceWithIcon) + linesadded;      } else {        linesadded=writeWrappedComment(w,_model,title,textSpace) + linesadded;      }    }    if (!(_dccAddress.isEmpty())) {      w.write(newLine,0,1);      String s="   DCC Address:       " + _dccAddress;      w.write(s,0,s.length());      linesadded++;    }    if (!(_comment.isEmpty())) {      for (int i=0; i < (blanks - linesadded); i++) {        w.write(newLine,0,1);      }      if (blanks != 0) {        blanks=0;      }      title="   Comment:           ";      linesadded=writeWrappedComment(w,_comment,title,textSpace) + linesadded;    }    if (!(_decoderModel.isEmpty())) {      title="   Decoder Model:     ";      if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {        linesadded=writeWrappedComment(w,_decoderModel,title,textSpaceWithIcon) + linesadded;      } else {        linesadded=writeWrappedComment(w,_decoderModel,title,textSpace) + linesadded;      }    }    if (!(_decoderFamily.isEmpty())) {      title="   Decoder Family:    ";      if ((textSpaceWithIcon != 0) && (linesadded < blanks)) {        linesadded=writeWrappedComment(w,_decoderFamily,title,textSpaceWithIcon) + linesadded;      } else {        linesadded=writeWrappedComment(w,_decoderFamily,title,textSpace) + linesadded;      }    }    if (!(_decoderComment.isEmpty())) {      for (int i=0; i < (blanks - linesadded); i++) {        w.write(newLine,0,1);      }      if (blanks != 0) {        blanks=0;      }      title="   Decoder Comment:   ";      linesadded=writeWrappedComment(w,_decoderComment,title,textSpace) + linesadded;    }    w.write(newLine,0,1);    for (int i=-1; i < (blanks - linesadded); i++) {      w.write(newLine,0,1);    }  } catch (  IOException e) {    log.error("Error printing RosterEntry: " + e);  }}  }
class C{  public void testSendMomentaryFunctionGroup2(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.sendMomentaryFunctionGroup2();}  }
class C{  private void loadMetaData(){  s_logger.log(Level.INFO,"");  s_logger.log(Level.INFO,"migrateLoadMetaData");  if (m_source != null)   m_source.loadMetaData();  if (m_target != null) {    if (m_source != null)     m_target.loadMetaData(m_source.getCustomPrefixes(),m_source.getCustomEntities()); else     m_target.loadMetaData();  }}  }
class C{  public boolean isEmpty(){  return first == null;}  }
class C{  private int lastCategoryIndex(){  if (this.maximumCategoryCount == 0) {    return -1;  }  return Math.min(this.firstCategoryIndex + this.maximumCategoryCount,this.underlying.getColumnCount()) - 1;}  }
class C{  private DoubleFactor sumOutDependent(String nodeId,DoubleFactor factor){  DoubleFactor sumFactor=new DoubleFactor();  for (  Assignment a : factor.getValues()) {    Assignment reducedA=new Assignment(a);    reducedA.removePair(nodeId);    double[] entry=factor.getEntry(a);    double prob=entry[0];    double util=entry[1];    sumFactor.incrementEntry(reducedA,prob,prob * util);  }  sumFactor.normaliseUtil();  return sumFactor;}  }
class C{  public static byte[] decodeBase64(final String base64String){  return new Base64().decode(base64String);}  }
class C{  public void store(short value,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void init() throws ServletException {  ServletContext sc=this.getServletContext();  VideoThumbnailThread videoThumbnailThread=new VideoThumbnailThread(sc);  videoThumbnailThread.start();  VideoTranscoderThread videoConvertThread=new VideoTranscoderThread(sc);  videoConvertThread.start();}  }
class C{  public void disableCarMode(int flags){  if (mService != null) {    try {      mService.disableCarMode(flags);    } catch (    RemoteException e) {      Log.e(TAG,"disableCarMode: RemoteException",e);    }  }}  }
class C{  public Migrator(final Session session){  this.session=session;  this.versioner=new CassandraVersioner(session);}  }
class C{  public ActionServiceImpl(){}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  public static File locateReplicatorConfDir(){  if (replicatorConfDir == null) {    String replicatorConf=System.getProperty(CONF_DIR);    if (replicatorConf == null)     replicatorConfDir=new File(locateReplicatorHomeDir(),"conf"); else     replicatorConfDir=new File(replicatorConf);    if (!replicatorConfDir.isDirectory()) {      throw new ServerRuntimeException("Replicator conf directory does not exist or is invalid: " + replicatorConfDir);    }  }  return replicatorConfDir;}  }
class C{  protected void assertHasData(ResultSet rs) throws SQLException {  if (rs == null) {    throw new SQLException("Current statement has no data to return.",SQLStateConstants.SQL_STATE_NO_RESULT_SET);  }  if (rs.getRow() == 0) {    rs.next();  } else {    return;  }  if (rs.getRow() == 0) {    throw new SQLException("Current statement has no data to return.",SQLStateConstants.SQL_STATE_NO_RESULT_SET);  }}  }
class C{  public final TestSubscriber<T> assertNonFuseableSource(){  if (qs != null) {    assertionError("Upstream was Fuseable");  }  return this;}  }
class C{  public boolean hasPlayer(String playerName){  return gameData.getPlayers().contains(playerName);}  }
class C{  public void testLongsCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.longs(size).parallel().forEach(null);    assertEquals(size,counter.sum());    size+=524959;  }}  }
class C{  public boolean RM2Send(String mac,String sendData){  JsonObject initJsonObjectParams=broadlinkStandardParams(BroadlinkConstants.CMD_RM2_SEND_ID,BroadlinkConstants.CMD_RM2_SEND);  initJsonObjectParams.addProperty("mac",mac);  initJsonObjectParams.addProperty("data",sendData);  JsonObject out=broadlinkExecuteCommand(initJsonObjectParams);  int code=out.get(BroadlinkConstants.CODE).getAsInt();  return code == 0;}  }
class C{  @Override public void onActivityStopped(Activity activity){}  }
class C{  protected void write(){}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public Class loadClass(String name) throws ClassNotFoundException {  try {    return loadClass(name,false);  } catch (  NoClassDefFoundError e) {    throw new ClassNotFoundException(name);  }}  }
class C{  protected void handleHREF(RenderedImage image,Element imageElement,SVGGeneratorContext generatorContext) throws SVGGraphics2DIOException {  imageElement.setAttributeNS(XLINK_NAMESPACE_URI,XLINK_HREF_QNAME,image.toString());}  }
class C{  public PackedCoordinateSequenceFactory(){  this(DOUBLE);}  }
class C{  private void outputTextToWriter(String text) throws IOException {  if (text == null) {    return;  }  int length=text.length();  for (int i=0; i < length; i++) {    char c=text.charAt(i);switch (c) {case '&':      this.writer.write("&amp;amp;");    break;case '<':  this.writer.write("&amp;lt;");break;case '>':this.writer.write("&amp;gt;");break;case 0xD:this.writer.write("&amp;#xD;");break;case ' ':this.writer.write("&middot;");break;case '\n':this.writer.write("&para;\n");break;default :this.writer.write(c);break;}}}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  public static void syncMediaFiles(List<MediaFile> mfsFromEditor,List<MediaFile> mfsFromMediaEntity){  for (  MediaFile mfEditor : mfsFromEditor) {    for (    MediaFile mfOriginal : mfsFromMediaEntity) {      if (mfEditor.equals(mfOriginal)) {        if (!mfEditor.getVideoCodec().equals(mfOriginal.getVideoCodec())) {          mfOriginal.setVideoCodec(mfEditor.getVideoCodec());        }        if (!mfEditor.getContainerFormat().equals(mfOriginal.getContainerFormat())) {          mfOriginal.setContainerFormat(mfEditor.getContainerFormat());        }        if (mfEditor.getVideoWidth() != mfOriginal.getVideoWidth()) {          mfOriginal.setVideoWidth(mfEditor.getVideoWidth());        }        if (mfEditor.getVideoHeight() != mfOriginal.getVideoHeight()) {          mfOriginal.setVideoHeight(mfEditor.getVideoHeight());        }        if (!mfEditor.getVideo3DFormat().equals(mfOriginal.getVideo3DFormat())) {          mfOriginal.setVideo3DFormat(mfEditor.getVideo3DFormat());        }        mfOriginal.setAudioStreams(mfEditor.getAudioStreams());        mfOriginal.setSubtitles(mfEditor.getSubtitles());        break;      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:35.641 -0500",hash_original_method="D170EED829DCE544127E74E1BD3E45CA",hash_generated_method="30AEC1A9B9DFA1C178954384FBDA7648") public Request createRequest(javax.sip.address.URI requestURI,String method,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,ContentTypeHeader contentType,Object content) throws ParseException {  if (requestURI == null || method == null || callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("Null parameters");  SIPRequest sipRequest=new SIPRequest();  sipRequest.setRequestURI(requestURI);  sipRequest.setMethod(method);  sipRequest.setCallId(callId);  sipRequest.setCSeq(cSeq);  sipRequest.setFrom(from);  sipRequest.setTo(to);  sipRequest.setVia(via);  sipRequest.setMaxForwards(maxForwards);  sipRequest.setContent(content,contentType);  if (userAgent != null) {    sipRequest.setHeader(userAgent);  }  return sipRequest;}  }
class C{  public boolean addNondirectedEdge(Node node1,Node node2){  throw new UnsupportedOperationException();}  }
class C{  protected long nextTriggerPosition(int j,long W){  long nextTriggerPosition;  if (W % 2L != 0) {    nextTriggerPosition=j * W + (W + 1) / 2;  } else {    if (nextTriggerCalculationState) {      nextTriggerPosition=j * W + W / 2;    } else {      nextTriggerPosition=j * W + (W + 2) / 2;    }  }  return nextTriggerPosition;}  }
class C{  public boolean isTiltEnabled(){  return mTiltEnabled;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static synchronized Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  protected boolean isGLContextCreated(){  return mIsGLContextCreated;}  }
class C{  public ZeroLengthPath(Var subject,Var object){  this(Scope.DEFAULT_CONTEXTS,subject,object);}  }
class C{  @Override public void onSuccess(IMqttToken asyncActionToken){switch (action) {case CONNECT:    connect();  break;case DISCONNECT:disconnect();break;case SUBSCRIBE:subscribe();break;case PUBLISH:publish();break;}}  }
class C{  public JFXDrawersStack(){  super();  clip.widthProperty().bind(this.widthProperty());  clip.heightProperty().bind(this.heightProperty());  this.setClip(clip);}  }
class C{  public List fetchRowsByUInstalacion(String idUnidadInstalacion){  StringBuffer qual=new StringBuffer("where ").append(DBUtils.generateEQTokenField(UINSTALACION_RELACION_FIELD,idUnidadInstalacion));  StringBuffer orderBy=new StringBuffer(" order by ").append(POSUDOC_COLUMN_NAME);  return getPartesUnidadDocumental(qual.toString(),orderBy.toString());}  }
class C{  public void start(){  if (!started) {    started=true;    deltaUs=elapsedRealtimeMinus(timeUs);  }}  }
class C{  public static synchronized TwoDTree generate(IPoint[] points){  if (points.length == 0) {    return null;  }  TwoDTree tree=new TwoDTree();  VerticalNode root=(VerticalNode)generate(1,points,0,points.length - 1);  tree.setRoot(root);  tree.updateRectangles();  return tree;}  }
class C{  private int addPattern(int[] pattern,int weight){  for (int i=0; i < patternCount; i++) {    if (unique && comparePatterns(patterns[i],pattern)) {      weights[i]+=weight;      return i;    }  }  if (isInvariant(pattern)) {    invariantCount+=weight;  }  int index=patternCount;  patterns[index]=pattern;  weights[index]=weight;  patternCount++;  return index;}  }
class C{  public static StringBuilder formatTo(StringBuilder buf,double[] d,String sep,NumberFormat nf){  if (d == null) {    return buf.append("null");  }  if (d.length == 0) {    return buf;  }  buf.append(nf.format(d[0]));  for (int i=1; i < d.length; i++) {    buf.append(sep);    buf.append(nf.format(d[i]));  }  return buf;}  }
class C{  public static void sendFeedback(Context context,String feedback){  init(context);  if (TextUtils.isEmpty(feedback)) {    Ln.e("sendFeedback","the content of feedback is empty");    return;  }  startLogService(MessageUtils.CONTENT_DATA,getFBJSON(feedback));}  }
class C{  protected void finalize() throws Throwable {  try {    disconnect();  } catch (  Exception ex) {  }  super.finalize();}  }
class C{  public StreamHandler(InputStream inStream,OutputStream outStream){  setStreams(inStream,outStream);}  }
class C{  public void appendText(String line){  appendConsoleRaw(String.format("%s%n",line));}  }
class C{  public boolean addIgnore(final String name,final int duration,final String reply){  final StringBuilder sbuf=new StringBuilder();  if (duration != 0) {    sbuf.append(System.currentTimeMillis() + duration * 60000L);  }  sbuf.append(';');  if (reply != null) {    sbuf.append(reply);  }  return setKeyedSlot("!ignore","_" + name,sbuf.toString());}  }
class C{  public StampedLock(){  state=ORIGIN;}  }
class C{  public long nanoTime(){  return nanoTime;}  }
class C{  public PacketACTION(String actionmessage,byte actiontype){  super(PT_ACTION);  appendPayload(actionmessage,actiontype);}  }
class C{  public ShapeFile(File file) throws IOException {  this(file.getPath());}  }
class C{  @IgniteInstanceResource private void injectResources(Ignite ignite){  if (ignite != null) {    gridName=ignite.name();    locNodeId=ignite.configuration().getNodeId();  } else {    gridName=null;    locNodeId=null;  }}  }
class C{  public static <U,I,O>SimpleFastPreferenceData<U,I> load(Stream<Tuple4<U,I,Double,O>> tuples,Function4<Integer,Integer,Double,O,? extends IdxPref> uIdxPrefFun,Function4<Integer,Integer,Double,O,? extends IdxPref> iIdxPrefFun,FastUserIndex<U> uIndex,FastItemIndex<I> iIndex,Function<IdxPref,IdPref<I>> uIdPrefFun,Function<IdxPref,IdPref<U>> iIdPrefFun){  AtomicInteger numPreferences=new AtomicInteger();  List<List<IdxPref>> uidxList=new ArrayList<>();  for (int uidx=0; uidx < uIndex.numUsers(); uidx++) {    uidxList.add(null);  }  List<List<IdxPref>> iidxList=new ArrayList<>();  for (int iidx=0; iidx < iIndex.numItems(); iidx++) {    iidxList.add(null);  }  tuples.forEach(null);  return new SimpleFastPreferenceData<>(numPreferences.intValue(),uidxList,iidxList,uIndex,iIndex,uIdPrefFun,iIdPrefFun);}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  public void write(ByteBuffer f){  writeHalf(f,keyOffset);  writeByte(f,unknown1);  writeByte(f,dataType);  writeWord(f,dataSize);  writeWord(f,dataSizePadded);  writeWord(f,valueOffset);}  }
class C{  @Override public boolean canRead(){  return exists();}  }
class C{  public static int arraycode(Type type){switch (type.getTag()) {case BYTE:    return 8;case BOOLEAN:  return 4;case SHORT:return 9;case CHAR:return 5;case INT:return 10;case LONG:return 11;case FLOAT:return 6;case DOUBLE:return 7;case CLASS:return 0;case ARRAY:return 1;default :throw new AssertionError("arraycode " + type);}}  }
class C{  public AddOnChangesResult calculateInstallChanges(AddOn addOn){  Set<AddOn> addOns=new HashSet<>();  addOns.add(addOn);  return calculateInstallChanges(addOns);}  }
class C{  public CommandLine add(List<String> args){  if (args != null && !args.isEmpty()) {    line.addAll(args);  }  return this;}  }
class C{  protected AbstractResourceDescription(IResource resource){  super();  parent=resource.getParent();  if (resource.isAccessible()) {    modificationStamp=resource.getModificationStamp();    localTimeStamp=resource.getLocalTimeStamp();    resourceAttributes=resource.getResourceAttributes();    try {      IMarker[] markers=resource.findMarkers(null,true,IResource.DEPTH_INFINITE);      markerDescriptions=new MarkerDescription[markers.length];      for (int i=0; i < markers.length; i++) {        markerDescriptions[i]=new MarkerDescription(markers[i]);      }    } catch (    CoreException e) {    }  }}  }
class C{  @Override public E putIfAbsent(Integer key,E value){  return putIfAbsent(key.intValue(),value);}  }
class C{  public GeneralName(int tag,ASN1Encodable name){  this.obj=name;  this.tag=tag;}  }
class C{  public static double uniform(){  return random.nextDouble();}  }
class C{  public boolean supportsSubqueriesInExists() throws SQLException {  return true;}  }
class C{  private void validateNoAdditionalInitiators(VPlexStorageViewInfo storageView){  Set<String> storageViewPwwns=new HashSet<String>(storageView.getInitiatorPwwns());  if (ExportMaskUtils.isBackendExportMask(getDbClient(),mask)) {    log.info("validation against RP masks is disabled.");    return;  }  for (  Initiator initiator : initiatorsToValidate) {    if (initiator == null || initiator.getInactive()) {      continue;    }    String initiatorPwwn=Initiator.normalizePort(initiator.getInitiatorPort());    if (storageViewPwwns.contains(initiatorPwwn)) {      storageViewPwwns.remove(initiatorPwwn);    } else {      log.info(String.format("Database initiator %s (%s) not in StorageView",initiator.getId(),initiatorPwwn));    }  }  for (  String wwn : storageViewPwwns) {    getValidatorLogger().logDiff(id,"initiator port WWN",ValidatorLogger.NO_MATCHING_ENTRY,wwn);  }}  }
class C{  private static double distance(Point p1,Point p2){  double d;  d=(p1.x - p2.x) * (p1.x - p2.x);  d+=(p1.y - p2.y) * (p1.y - p2.y);  d=Math.sqrt(d);  return d;}  }
class C{  public <T>T withTransaction(@NotNull Propagation propagation,@NotNull TransactionCallback<T> callback){  return withTransaction(propagation,Isolation.DEFAULT,callback);}  }
class C{  public void propertyChange(PropertyChangeEvent e){  MTreeNode nd=(MTreeNode)e.getNewValue();  log.info(nd.getNode_ID() + " - " + nd.toString());  if (m_startingItem || nd.isSummary())   return;  String sta=nd.toString();  progressBar.setString(sta);  int cmd=nd.getNode_ID();  (new AMenuStartItem(cmd,true,sta,this)).start();}  }
class C{  protected static Config overrideConfigs(String overrideConfigPath){  Config config=Config.newBuilder().putAll(ClusterConfig.loadOverrideConfig(overrideConfigPath)).build();  return config;}  }
class C{  public int update(String table,String key,HashMap<String,ByteIterator> values){  long st=System.nanoTime();  int res=_db.update(table,key,values);  long en=System.nanoTime();  _measurements.measure("UPDATE",(int)((en - st) / 1000));  _measurements.reportReturnCode("UPDATE",res);  return res;}  }
class C{  public static Character toCharacter(boolean b){  return new Character(toCharValue(b));}  }
class C{  public void removeEventFromPrev(EventBean[] oldEvents){  if (randomAccess != null) {    randomAccess.remove(oldEvents);  }}  }
class C{  private void drawHexLayer(Point p,Graphics g,Color col,boolean outOfFOV,double pad){  Graphics2D g2D=(Graphics2D)g;  g.setColor(col);  int fogStripes=GUIPreferences.getInstance().getFovStripes();  if (outOfFOV && (fogStripes > 0) && (g instanceof Graphics2D)) {    float lineSpacing=fogStripes;    Color c2=new Color(col.getRed() / 2,col.getGreen() / 2,col.getBlue() / 2,col.getAlpha() / 2);    GradientPaint gp=new GradientPaint(42.0f / lineSpacing,0.0f,col,104.0f / lineSpacing,106.0f / lineSpacing,c2,true);    g2D.setPaint(gp);  }  Composite svComposite=g2D.getComposite();  g2D.setComposite(AlphaComposite.SrcAtop);  g2D.fillRect(0,0,hex_size.width,hex_size.height);  g2D.setComposite(svComposite);}  }
class C{  public static DelaunayVertex circumcenter(DelaunayVertex[] simplex){  int dim=simplex[0].dimension();  if (simplex.length - 1 != dim) {    throw new IllegalArgumentException("Dimension mismatch");  }  DelaunayVertex[] matrix=new DelaunayVertex[dim];  for (int i=0; i < dim; i++) {    matrix[i]=simplex[i].bisector(simplex[i + 1]);  }  DelaunayVertex hCenter=cross(matrix);  double last=hCenter.coordinates[dim];  double[] result=new double[dim];  for (int i=0; i < dim; i++) {    result[i]=hCenter.coordinates[i] / last;  }  return new DelaunayVertex(result);}  }
class C{  public String toString(){  return super.toString() + "[" + index()+ "]"+ (nullable() ? "*" : "");}  }
class C{  public AVTPartXPath(String val,org.apache.xml.utils.PrefixResolver nsNode,XPathParser xpathProcessor,XPathFactory factory,XPathContext liaison) throws javax.xml.transform.TransformerException {  m_xpath=new XPath(val,null,nsNode,XPath.SELECT,liaison.getErrorListener());}  }
class C{  public static void checkRowDimension(double[][] M,int m){  if (M.length != m)   throwError("columns have " + M.length + " rows instead of "+ m+ " rows expected.");}  }
class C{  public IntArray2D(int rows,int columns){  this.rows=rows;  this.columns=columns;  numCells=rows * columns;  data=new int[numCells];  for (int i=0; i < numCells; i++) {    data[i]=noData;  }}  }
class C{  private List<FilePath> listSeqnoFiles(){  LinkedList<FilePath> children=new LinkedList<FilePath>();  for (  String fileName : listSeqnoFileNames()) {    FilePath fp=new FilePath(serviceDir,fileName);    children.add(fp);  }  return children;}  }
class C{  public static <V>CaseInsensitiveMap<V> createCaseInsensitiveMap(Map<? extends String,? extends V> map){  return new CaseInsensitiveMapImpl<>(map);}  }
class C{  public void testProximityPositive(){  assertTrue(sh.isDefaultSuggestion("peiple","people"));  assertTrue(sh.isDefaultSuggestion("peoole","people"));  assertTrue(sh.isDefaultSuggestion("pwpple","people"));}  }
class C{  public DependencyStructure compose2(DependencyStructure other,final List<UnlabelledDependency> newResolvedDependencies){  other=other.standardizeApart(coindexation.getMaxID() + 1);  final UnifyingSubstitution substitution=UnifyingSubstitution.make(coindexation.right,other.coindexation.left.left,false);  final Set<UnresolvedDependency> newUnresolvedDependencies=new HashSet<>();  updateResolvedDependencies(other,substitution,newUnresolvedDependencies,newResolvedDependencies);  final Set<UnresolvedDependency> normalizedUnresolvedDependencies=new HashSet<>(newUnresolvedDependencies.size());  final Coindexation normalizedCoindexation;  if (coindexation.isModifier()) {    normalizedCoindexation=normalize(substitution.applyTo(other.coindexation),newUnresolvedDependencies,normalizedUnresolvedDependencies,newResolvedDependencies,1);  } else {    final Coindexation leftWithSubstitution=substitution.applyTo(coindexation);    final Coindexation rightWithSubstitution=substitution.applyTo(other.coindexation);    normalizedCoindexation=normalize(new Coindexation(new Coindexation(leftWithSubstitution.left,rightWithSubstitution.left.right,leftWithSubstitution.idOrHead),rightWithSubstitution.right,leftWithSubstitution.idOrHead),newUnresolvedDependencies,normalizedUnresolvedDependencies,newResolvedDependencies,1);  }  return new DependencyStructure(normalizedCoindexation,normalizedUnresolvedDependencies);}  }
class C{  public boolean forEach(TObjectProcedure<T> procedure){  Object[] set=_set;  for (int i=set.length; i-- > 0; ) {    if (set[i] != null && set[i] != REMOVED && !procedure.execute((T)set[i])) {      return false;    }  }  return true;}  }
class C{  public void addDataChangeListener(DataChangedListener l){  mv.addDataChangeListener(l);}  }
class C{  public boolean isNullAsDefaultValueRequired(){  return nullAsDefaultValueRequired;}  }
class C{  public void awaitStart(){  try {    mutex.await();  } catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  public void write(final byte[] data){  final Packet p=new Packet(unique);  p.setCommand(LOG_WRITE);  p.setData(data);  send(p);  hasData=true;  return;}  }
class C{  public boolean isRetry(){  return this.isRetry;}  }
class C{  public boolean isQuoteDelimiter(String character){  return (m_QuoteDelimiters.indexOf(character.charAt(0)) > -1);}  }
class C{  private GenID generateGenID(TreeNode syntaxTreeNode,ModuleNode mn) throws AbortException {  return generateGenID(syntaxTreeNode,mn,false);}  }
class C{  public int encodeBase64Chunk(int b24,byte[] buffer,int ptr){  buffer[ptr++]=_base64ToAsciiB[(b24 >> 18) & 0x3F];  buffer[ptr++]=_base64ToAsciiB[(b24 >> 12) & 0x3F];  buffer[ptr++]=_base64ToAsciiB[(b24 >> 6) & 0x3F];  buffer[ptr++]=_base64ToAsciiB[b24 & 0x3F];  return ptr;}  }
class C{  public int read() throws IOException {  int out=0;  int xb=0;  int yb=0;  int coeffNum=0;  for (int count=0; count < 8; count++) {    if (this.n >= (this.imgWidth * this.imgHeight * 8)) {      return -1;    }    do {      xb=Math.abs(this.rand.nextInt()) % (this.imgWidth / DCT.NJPEG);      yb=Math.abs(this.rand.nextInt()) % (this.imgHeight / DCT.NJPEG);    } while (!this.coord.add(xb,yb));    this.dct.fwdDctBlock8x8(this.y,xb * DCT.NJPEG,yb * DCT.NJPEG,this.dcts);    do {      coeffNum=(Math.abs(this.rand.nextInt()) % (DCT.NJPEG * DCT.NJPEG - 2)) + 1;    } while (this.dct.isMidFreqCoeff8x8(coeffNum) == 0);    this.dct.quantize8x8(this.dcts);    out=(out << 1) + (((int)this.dcts[coeffNum / DCT.NJPEG][coeffNum % DCT.NJPEG]) & 1);    this.n++;  }  return out;}  }
class C{  protected int addColumn(final String name,final Class<?> class_){  return addColumn(name,class_,false);}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  private byte encryptByte(byte data,int blockOff){  return (byte)(FRE[blockOff] ^ data);}  }
class C{  public PriorityQueue(PriorityQueue<? extends E> c){  getFromPriorityQueue(c);}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  public Contact(final String phoneNumber){  this.phoneNumber=phoneNumber;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:46.995 -0500",hash_original_method="D16D4F9A4DF133858001870C6413D65C",hash_generated_method="9EE73FDB0C546D60128128DD662DBF63") public IOException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void testCompositeAttributeDefaults() throws Exception {  HtmlPage page=getPage("/faces/composite/defaultAttributeValueExpression_1966.xhtml");  HtmlElement dataTable=page.getElementById("WithValueEmptyList:DataTable");  List<DomText> content=(List<DomText>)dataTable.getByXPath("./tbody/tr/td/text()");  assertTrue("Table should conain max. 1 empty cell.",content.size() <= 1);  for (  DomText text : content) {    assertTrue("Cells should be empty",text.asText().length() == 0);  }  dataTable=page.getElementById("WithValueNull:DataTable");  content=(List<DomText>)dataTable.getByXPath("./tbody/tr/td/text()");  assertEquals("Table should contain 2 cells",2,content.size());  for (int i=0; i < 2; i++) {    assertEquals("---Item " + (i + 1) + "---",content.get(i).toString());  }}  }
class C{  private boolean unpackZip(String presetDir,String zipname){  InputStream is;  ZipInputStream zis;  try {    String filename;    is=new FileInputStream(presetDir + zipname);    zis=new ZipInputStream(new BufferedInputStream(is));    ZipEntry ze;    byte[] buffer=new byte[1024];    int count;    while ((ze=zis.getNextEntry()) != null) {      filename=ze.getName();      if (ze.isDirectory()) {        File fmd=new File(presetDir + filename);        fmd.mkdirs();        continue;      }      FileOutputStream fout=new FileOutputStream(presetDir + filename);      while ((count=zis.read(buffer)) != -1) {        fout.write(buffer,0,count);      }      fout.close();      zis.closeEntry();    }    zis.close();  } catch (  IOException e) {    e.printStackTrace();    return false;  }  return true;}  }
class C{  private void calculateLongestLine(){  Component c=getContainer();  font=c.getFont();  metrics=c.getFontMetrics(font);  Document doc=getDocument();  Element lines=getElement();  int n=lines.getElementCount();  int maxWidth=-1;  for (int i=0; i < n; i++) {    Element line=lines.getElement(i);    int w=getLineWidth(line);    if (w > maxWidth) {      maxWidth=w;      longLine=line;    }  }}  }
class C{  public boolean isKey(){  Object oo=get_Value(COLUMNNAME_IsKey);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Faker targetViews(Integer... ids){  mIds=new HashSet<>(Arrays.asList(ids));  return this;}  }
class C{  protected String handleDate(ResultSet rs,int columnIndex,String dateFormatString) throws SQLException {  java.sql.Date date=rs.getDate(columnIndex);  String value=null;  if (date != null) {    SimpleDateFormat dateFormat=new SimpleDateFormat(dateFormatString);    value=dateFormat.format(date);  }  return value;}  }
class C{  public int size(){  return isNull() ? 0 : this.end - this.start + 1;}  }
class C{  public void removeTagDefinition(int tagId){  getTagInfo().delete(tagId);}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 3:case 2:    return true;default :  break;}return false;}  }
class C{  private void onSearchEnd(int tabIndex,int nbrMessages){  if (mCurrentTabIndex == tabIndex) {    Log.d(LOG_TAG,"## onSearchEnd() nbrMsg=" + nbrMessages);    mWaitWhileSearchInProgressView.setVisibility(View.GONE);  }}  }
class C{  public void shiftLeftAddThis(GF2Polynomial b,int k){  if (k == 0) {    addToThis(b);    return;  }  int i;  expandN(b.len + k);  int d=k >>> 5;  for (i=b.blocks - 1; i >= 0; i--) {    if ((i + d + 1 < blocks) && ((k & 0x1f) != 0)) {      value[i + d + 1]^=b.value[i] >>> (32 - (k & 0x1f));    }    value[i + d]^=b.value[i] << (k & 0x1f);  }}  }
class C{  private boolean hasParameters(){  CompletionProposal proposal=((MemberProposalInfo)getProposalInfo()).fProposal;  return Signature.getParameterCount(proposal.getSignature()) > 0;}  }
class C{  public static void copyDirectoryAndOverwriteFilesIfNeeded(File srcDir,File destDir) throws IllegalArgumentException, IOException {  if (srcDir == null || destDir == null) {    throw new IllegalArgumentException("Null inputs");  }  if (!srcDir.exists()) {    throw new IllegalArgumentException("Source folder does not exist: " + srcDir.getAbsolutePath());  }  recursiveCopy(srcDir,destDir);}  }
class C{  public void mouseClicked(MouseEvent e){  m_adaptee.mouseClicked(e);}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiButtonUI();  return MultiLookAndFeel.createUIs(mui,((MultiButtonUI)mui).uis,a);}  }
class C{  public void addListener(String namespaceURI,Object group,EventListener listener){  for (Entry e=head; e != null; e=e.next) {    if ((namespaceURI != null && namespaceURI.equals(e.namespaceURI) || namespaceURI == null && e.namespaceURI == null) && e.listener == listener) {      return;    }  }  head=new Entry(listener,namespaceURI,group,head);  counts.inc(namespaceURI);  n++;  listeners=null;  listenersNS.remove(namespaceURI);}  }
class C{  public Model lookup(String name,int index){  return models.lookup(name,index);}  }
class C{  private String buildAuthHeaderString(String httpsURL,String requestMethod,OAuthParameters params){  generateAndSignSignature(httpsURL,requestMethod,params);  StringBuffer buffer=new StringBuffer();  buffer.append(OAUTH_START_STRING);  Map<String,SortedSet<String>> paramMap=params.getBaseParameters();  buffer=parseParameters(buffer,paramMap);  this.authHeader=buffer.toString();  return buffer.toString();}  }
class C{  protected ExampleSetMetaData applyEffects(ExampleSetMetaData emd,InputPort inputPort){  return emd;}  }
class C{  public static void applyActionsFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Apply Actions Instruction not supported in OpenFlow 1.0");    return;  }  OFFlowMod.Builder tmpFmb=OFFactories.getFactory(fmb.getVersion()).buildFlowModify();  OFInstructionApplyActions.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildApplyActions();  ActionUtils.fromString(tmpFmb,inst,log);  ib.setActions(tmpFmb.getActions());  log.debug("Appending ApplyActions instruction: {}",ib.build());  appendInstruction(fmb,ib.build());  log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  public int length(){  return m_length;}  }
class C{  public final OperatorHook<T> doOnLifecycle(Consumer<? super Subscription> onSubscribeCall,LongConsumer onRequestCall,Runnable onCancelCall){  return doOnSignal(onSubscribeCall,null,null,null,null,onRequestCall,onCancelCall);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("AssetServlet.init");}  }
class C{  private Project createClientProject(Module clientModule,String vendorId,Project supplierProject){  Project clientProject=new Project("ClientProject",vendorId,vendorId + "_name");  clientProject.addProjectDependency(supplierProject);  clientProject.createSourceFolder("src").addModule(clientModule);  return clientProject;}  }
class C{  protected SelectedDenseObjectMatrix2D(int rows,int columns,Object[] elements,int rowZero,int columnZero,int rowStride,int columnStride,int[] rowOffsets,int[] columnOffsets,int offset){  setUp(rows,columns,rowZero,columnZero,rowStride,columnStride);  this.elements=elements;  this.rowOffsets=rowOffsets;  this.columnOffsets=columnOffsets;  this.offset=offset;  this.isNoView=false;}  }
class C{  private void removeFromZone(){  ent.getZone().remove(ent);}  }
class C{  private static void copy(InputStream i,OutputStream o) throws IOException {  copy(i,o,8192);}  }
class C{  private String liveness(){  boolean isClosed=false;  try {    if (isClosed()) {      isClosed=true;    }  } catch (  SQLException s) {    isClosed=true;  }  if (isClosed) {    return "CLOSED";  }  return "OPEN";}  }
class C{  public static boolean isWWDotNetLayerSetConfigDocument(Element domElement){  if (domElement == null) {    String message=Logging.getMessage("nullValue.DocumentIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  XPath xpath=WWXML.makeXPath();  Element[] elements=WWXML.getElements(domElement,"/LayerSet",xpath);  return elements != null && elements.length > 0;}  }
class C{  @Override public void execute(String taskId,Map<String,Object> parameter){  if (parameter != null) {    String assignee=(String)parameter.get(IIsaQmProcess.VAR_IQM_ASSIGNEE);    if (assignee != null) {      getTaskParameter().put(IGenericProcess.VAR_ASSIGNEE_NAME,assignee);    }  }}  }
class C{  public AbRotate3dAnimation2(float fromDegree,float toDegree,float left,float top,float centerX,float centerY){  this.mFromDegree=fromDegree;  this.mToDegree=toDegree;  this.mLeft=left;  this.mTop=top;  this.mCenterX=centerX;  this.mCenterY=centerY;}  }
class C{  private void ekskey(byte data[],byte key[]){  int i;  int koffp[]={0}, doffp[]={0};  int lr[]={0,0};  int plen=P.length, slen=S.length;  for (i=0; i < plen; i++) {    P[i]=P[i] ^ streamtoword(key,koffp);  }  for (i=0; i < plen; i+=2) {    lr[0]^=streamtoword(data,doffp);    lr[1]^=streamtoword(data,doffp);    encipher(lr,0);    P[i]=lr[0];    P[i + 1]=lr[1];  }  for (i=0; i < slen; i+=2) {    lr[0]^=streamtoword(data,doffp);    lr[1]^=streamtoword(data,doffp);    encipher(lr,0);    S[i]=lr[0];    S[i + 1]=lr[1];  }}  }
class C{  private static String concatWildcardTypes(Type[] types){  StringBuilder sb=new StringBuilder();  int elementNum=0;  for (  Type t : types) {    sb.append(typeToString(t));    if (++elementNum < types.length) {      sb.append(" & ");    }  }  return sb.toString();}  }
class C{  public RegionUpdaterChange(String name,TextFileChange compilationUnitChange,List<RegionUpdater> regionUpdaters,ReferenceUpdater referenceUpdater){  super(name);  assert compilationUnitChange.getModifiedElement() instanceof ICompilationUnit;  this.compilationUnitChange=compilationUnitChange;  this.regionUpdaters=regionUpdaters;  this.referenceUpdater=referenceUpdater;  markAsSynthetic();  add(compilationUnitChange);}  }
class C{  private String quotedAV() throws IOException {  pos++;  beg=pos;  end=beg;  while (true) {    if (pos == chars.length) {      throw new IOException("Invalid distinguished name string");    }    if (chars[pos] == '"') {      pos++;      break;    } else     if (chars[pos] == '\\') {      chars[end]=getEscaped();    } else {      chars[end]=chars[pos];    }    pos++;    end++;  }  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  return new String(chars,beg,end - beg);}  }
class C{  public void addExceptionMessage(ExceptionCode code,String message){  addExceptionMessage(new ExceptionMessage(code,message));}  }
class C{  public boolean authenticateUser(String username,String candidatePassword) throws ConfigurationException {  boolean authOK=false;  String goodPassword=this.getClearTextPasswordForUser(username);  if (goodPassword == null)   throw new ServerRuntimeException(MessageFormat.format("Cannot find password for user= {0}",username));  if (goodPassword.equals(candidatePassword))   authOK=true;  return authOK;}  }
class C{  public static final List<Vector2> cleanse(List<Vector2> points){  if (points == null)   throw new NullPointerException(Messages.getString("geometry.nullPointList"));  int size=points.size();  if (size == 0)   return points;  List<Vector2> result=new ArrayList<Vector2>(size);  double winding=0.0;  for (int i=0; i < size; i++) {    Vector2 point=points.get(i);    Vector2 prev=points.get(i - 1 < 0 ? size - 1 : i - 1);    Vector2 next=points.get(i + 1 == size ? 0 : i + 1);    if (point == null || prev == null || next == null)     throw new NullPointerException(Messages.getString("geometry.nullPointListElements"));    Vector2 diff=point.difference(next);    if (diff.isZero()) {      continue;    }    Vector2 prevToPoint=prev.to(point);    Vector2 pointToNext=point.to(next);    if (!prevToPoint.isZero()) {      double cross=prevToPoint.cross(pointToNext);      if (Math.abs(cross) <= Epsilon.E) {        continue;      }    }    winding+=point.cross(next);    result.add(point);  }  if (winding < 0.0) {    Geometry.reverseWinding(result);  }  return result;}  }
class C{  public Vehicle(int id){  this.vehId=id;  this.homeLocation=new ArrayList<Activity>();  this.chains=new ArrayList<Chain>();  this.studyAreaActivities=new ArrayList<Activity>();  this.averageActivitesPerChain=0;  this.averageChainDuration=0;  this.averageChainDistance=0;  this.numberOfStudyAreaActivities=0;  this.percentageStudyAreaActivities=0;  this.totalActivities=0;}  }
class C{  public static void registerFunction(Resource resource){  FunctionFactory arqFunction=SPINFunctionDrivers.get().create(resource);  if (arqFunction != null) {    FunctionFactory oldFF=FunctionRegistry.get().get(resource.getURI());    if (oldFF == null || oldFF instanceof SPINFunctionFactory) {      FunctionRegistry.get().put(resource.getURI(),arqFunction);    }  }}  }
class C{  private void writeIndex(int entryAddress,byte[] entryBuffer,int offset,int length){  long address=_segment.getAddress() + entryAddress;  if (_segment.length() < entryAddress + length) {    throw new IllegalStateException(L.l("offset=0x{0} length={1}",entryAddress,length));  }  _sOut.write(address,entryBuffer,offset,length);  _isDirty=true;}  }
class C{  public MultiKeyMap(){  super();  map=new HashedMap();}  }
class C{  public int codeLength(int i){  return ByteArray.readU16bit(info,i * 10 + 4);}  }
class C{  public boolean contains(final byte[] a){  int i=d, l=a.length;  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(a,l,i)))   return false;  return true;}  }
class C{  protected void onDataChange(){}  }
class C{  private static AttachISOResponse checkAttachISOResponse(AttachISOResponse attachISOResponse) throws RpcException {  logger.info("Checking {}",attachISOResponse);switch (attachISOResponse.getResult()) {case OK:    break;case SYSTEM_ERROR:  throw new SystemErrorException(attachISOResponse.getError());case VM_NOT_FOUND:throw new VmNotFoundException(attachISOResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",attachISOResponse.getResult()));}return attachISOResponse;}  }
class C{  public BridgeException(BridgeContext ctx,Element e,String message){  this.e=e;  this.message=message;  if (e != null && ctx != null) {    this.line=ctx.getDocumentLoader().getLineNumber(e);  }}  }
class C{  public TimeCounter start(){switch (state) {case UNSTARTED:    startTimeMillis=System.currentTimeMillis();  break;case RUNNING:throw new IllegalStateException("Already started");case STOPPED:startTimeMillis+=System.currentTimeMillis() - stopTimeMillis;break;default :throw new IllegalStateException("Unrecognized state " + state);}state=State.RUNNING;return this;}  }
class C{  @Override public ImmutableSetMultimap<K,V> build(){  return copyOf(builderMultimap);}  }
class C{  @SuppressWarnings("deprecation") private final void operationTimeout(){  cancelCancellable();  if (asyncWorker != null && !asyncWorker.isTerminated()) {    asyncWorker.tell(RequestWorkerMsgType.PROCESS_ON_TIMEOUT,getSelf());  } else {    logger.info("asyncWorker has been killed or uninitialized (null). " + "Not send PROCESS ON TIMEOUT.\nREQ: " + request.toString());    replyErrors(PcConstants.OPERATION_TIMEOUT,PcConstants.OPERATION_TIMEOUT,PcConstants.NA,PcConstants.NA_INT);  }}  }
class C{  public void printStackTrace(){  super.printStackTrace();  if (cause != null) {    cause.printStackTrace();  }}  }
class C{  public static void gotoTableFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (inst == null || inst.equals("")) {    return;  }  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Goto Table Instruction not supported in OpenFlow 1.0");    return;  }  OFInstructionGotoTable.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildGotoTable();  if (inst.startsWith("0x")) {    ib.setTableId(TableId.of(Integer.parseInt(inst.replaceFirst("0x",""),16)));  } else {    ib.setTableId(TableId.of(Integer.parseInt(inst))).build();  }  log.debug("Appending GotoTable instruction: {}",ib.build());  appendInstruction(fmb,ib.build());  log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  public Collaboration(CancelCriterion stopper){  this.stopper=stopper;}  }
class C{  private boolean holdPolyfillName(PolyfillValidationState state){  if (!state.name.equals(state.filledType.getName())) {    final String msg=getMessageForCLF_POLYFILL_DIFFERENT_NAME(state.name,state.filledType.getName());    addIssue(state,msg,CLF_POLYFILL_DIFFERENT_NAME);    return false;  }  final boolean isGlobalFilled=GLOBAL.hasAnnotation(state.filledType);  final boolean isGlobalPoly=GLOBAL.hasAnnotation(state.polyType);  if (isGlobalFilled != isGlobalPoly) {    final String msg=getMessageForCLF_POLYFILL_DIFFERENT_GLOBALS(state.name,isGlobalPoly ? "global" : "not global",isGlobalFilled ? "global" : "not global");    addIssue(state,msg,CLF_POLYFILL_DIFFERENT_GLOBALS);    return false;  }  if (!isGlobalFilled) {    final TModule polyModule=state.polyType.getContainingModule();    final TModule filledModule=state.filledType.getContainingModule();    if (polyModule != null && filledModule != null) {      if (!polyModule.getModuleSpecifier().equals(filledModule.getModuleSpecifier())) {        final String msg=getMessageForCLF_POLYFILL_DIFFERENT_MODULE_SPECIFIER(state.name,polyModule.getModuleSpecifier(),filledModule.getModuleSpecifier());        addIssue(state,msg,CLF_POLYFILL_DIFFERENT_MODULE_SPECIFIER);        return false;      }    }  }  return true;}  }
class C{  public void deviceCollapse(String sourceDeviceNameOrPath,String collapseType){  ClientResponse response=null;  try {    VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();    VPlexResourceInfo sourceDevice=null;    String devicePath=null;    if (VPlexApiConstants.DISTRIBUTED_DEVICE.equalsIgnoreCase(collapseType)) {      sourceDevice=discoveryMgr.findDistributedDevice(sourceDeviceNameOrPath);      if (sourceDevice != null) {        devicePath=sourceDevice.getPath();      }    } else     if (VPlexApiConstants.LOCAL_DEVICE.equalsIgnoreCase(collapseType)) {      sourceDevice=discoveryMgr.findLocalDevice(sourceDeviceNameOrPath);      if (sourceDevice != null) {        devicePath=sourceDevice.getPath();      }    } else     if (VPlexApiConstants.COLLAPSE_BY_PATH.equalsIgnoreCase(collapseType)) {      devicePath=sourceDeviceNameOrPath;    } else {      throw new Exception("invalid collapse type: " + collapseType);    }    if (devicePath == null) {      throw VPlexApiException.exceptions.cantFindLocalDevice(sourceDeviceNameOrPath);    }    s_logger.info("Found the device path to collapse {}",devicePath);    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_DEVICE_COLLAPSE);    s_logger.info("Device collapse URI is {}",requestURI.toString());    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_D,devicePath);    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);    s_logger.info("Device collapse POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Device collapse response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Device collapse completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.failedDeviceCollapseStatus(sourceDeviceNameOrPath,String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully did device collapse for device {}",devicePath);  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedDeviceCollapse(sourceDeviceNameOrPath,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public static void saveNonvolatilesAroundSysCall(Instruction call,IR ir){  saveNonvolatilesBeforeSysCall(call,ir);  restoreNonvolatilesAfterSysCall(call,ir);  call.changeOperatorTo(IA32_CALL);}  }
class C{  protected Notification(String payload,String token,String topic){  this.payload=payload;  this.token=token;  this.topic=topic;}  }
class C{  public MBeanServerNotification(String type,Object source,long sequenceNumber,ObjectName objectName){  super(type,source,sequenceNumber);  this.objectName=objectName;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  private boolean needLayout(Container parent){  Point p00=new Point(0,0);  for (int i=0; i < parent.getComponentCount(); i++) {    Component comp=parent.getComponent(i);    if (comp instanceof WFNode && comp.getLocation().equals(p00)) {      log.fine(comp.toString());      return true;    }  }  return false;}  }
class C{  public static Map<String,Integer> parseStopIdFromGtfs(String filename){  Map<String,Integer> stopMap=new TreeMap<>();  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=br.readLine();    while ((line=br.readLine()) != null) {      String[] sa=line.split(",");      int stopId=Integer.parseInt(sa[5]);      String stopName=sa[6];      stopMap.put(stopName,stopId);    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot read from " + filename);  } finally {    try {      br.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close " + filename);    }  }  return stopMap;}  }
class C{  private void validateMultiVolumeConsistency(VirtualPool virtualPool){  if (VirtualPool.vPoolSpecifiesProtection(virtualPool) && (virtualPool.getMultivolumeConsistency() == null || !virtualPool.getMultivolumeConsistency())) {    throw APIException.badRequests.multiVolumeConsistencyMustBeEnabledWithRP();  }}  }
class C{  @Nullable public N node(@Nullable Object key,@Nullable Collection<N> inc){  return node(key,inc,null);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_GUARD_1__CODE_LANG_1:    return codeLang_1 != null && !codeLang_1.isEmpty();case UmplePackage.ANONYMOUS_GUARD_1__CODE_LANGS_1:  return codeLangs_1 != null && !codeLangs_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static <K1,V1,K2,V2,R extends Map<K2,V2>>R collect(Map<K1,V1> map,Function2<? super K1,? super V1,Pair<K2,V2>> function,R target){  MapIterate.forEachKeyValue(map,null);  return target;}  }
class C{  @NoInline private static void raiseNegativeArraySizeException() throws NegativeArraySizeException {  throw new NegativeArraySizeException();}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public String validateAntecedent(String ant,ArrayList<ConditionalVariable> variableList){  char[] ch=ant.toCharArray();  int n=0;  for (int j=0; j < ch.length; j++) {    if (ch[j] != ' ') {      if (ch[j] == '{' || ch[j] == '[') {        ch[j]='(';      } else       if (ch[j] == '}' || ch[j] == ']') {        ch[j]=')';      }      ch[n++]=ch[j];    }  }  int count=0;  for (int j=0; j < n; j++) {    if (ch[j] == '(') {      count++;    }    if (ch[j] == ')') {      count--;    }  }  if (count > 0) {    return java.text.MessageFormat.format(rbx.getString("ParseError7"),new Object[]{')'});  }  if (count < 0) {    return java.text.MessageFormat.format(rbx.getString("ParseError7"),new Object[]{'('});  }  try {    DataPair dp=parseCalculate(new String(ch,0,n),variableList);    if (n != dp.indexCount) {      return java.text.MessageFormat.format(rbx.getString("ParseError4"),new Object[]{ch[dp.indexCount - 1]});    }    int index=dp.argsUsed.nextClearBit(0);    if (index >= 0 && index < variableList.size()) {      return java.text.MessageFormat.format(rbx.getString("ParseError5"),new Object[]{Integer.valueOf(variableList.size()),Integer.valueOf(index + 1)});    }  } catch (  NumberFormatException nfe) {    return rbx.getString("ParseError6") + nfe.getMessage();  }catch (  IndexOutOfBoundsException ioob) {    return rbx.getString("ParseError6") + ioob.getMessage();  }catch (  JmriException je) {    return rbx.getString("ParseError6") + je.getMessage();  }  return null;}  }
class C{  public BasicDiagnosticFormatter(Options options,JavacMessages msgs){  super(msgs,new BasicConfiguration(options));}  }
class C{  public AbstractMethodDeclaration_ createAbstractMethodDeclaration_(){  AbstractMethodDeclaration_Impl abstractMethodDeclaration_=new AbstractMethodDeclaration_Impl();  return abstractMethodDeclaration_;}  }
class C{  public void testGet(){  Metadata meta=new Metadata();  assertNull(meta.get("a-name"));  meta.add("a-name","value-1");  assertEquals("value-1",meta.get("a-name"));  meta.add("a-name","value-2");  assertEquals("value-1",meta.get("a-name"));}  }
class C{  @Override public boolean remove(Object value){  return _set.remove(unwrap(value));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.139 -0500",hash_original_method="1786D2BB317EEE60820821018E6A39A2",hash_generated_method="092E6E17D3E94A3774E469ED31E8F789") public static short parseShort(String string) throws NumberFormatException {  return parseShort(string,10);}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.206 -0500",hash_original_method="944A08161D308B286B46AD616F2EEC05",hash_generated_method="A285847CD23F2C7C711C4A57F7E4A09F") @Override public int read() throws IOException {  int res=in.read();  if (res < 0) {    throw new EndOfSourceException();  }  return res;}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  @RequestMapping(value="/emrOozieWorkflows",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_EMR_OOZIE_STEPS_POST) public OozieWorkflowJob runOozieJobToEmrCluster(@RequestBody RunOozieWorkflowRequest request) throws Exception {  return emrService.runOozieWorkflow(request);}  }
class C{  private static void err(String message){  if (!LOGGER.isErrorEnabled()) {    System.err.println(message);  } else {    LOGGER.error(message);  }}  }
class C{  private void cutToSize(){  if (MAX_CACHE_SIZE < cache.size()) synchronized (cache) {    Vector keyList=new Vector(cache.keySet());    Collections.shuffle(keyList);    while (MAX_CACHE_SIZE < cache.size()) {      cache.remove(keyList.get(0));      keyList.remove(0);    }  }  if (MAX_COMMANDS_SIZE < commands.size()) synchronized (commands) {    Vector keyList=new Vector(commands.keySet());    Collections.shuffle(keyList);    while (MAX_COMMANDS_SIZE < commands.size()) {      commands.remove(keyList.get(0));      keyList.remove(0);    }  }}  }
class C{  public Accessor(String className,ClassLoader classLoader,Class[] constructorTypes,Object[] constructorArgs){  try {    fClass=Class.forName(className,true,classLoader);  } catch (  ClassNotFoundException e) {    fail();  }catch (  ExceptionInInitializerError e) {    fail();  }  Constructor constructor=null;  try {    constructor=fClass.getDeclaredConstructor(constructorTypes);  } catch (  SecurityException e2) {    fail();  }catch (  NoSuchMethodException e2) {    fail();  }  Assert.isNotNull(constructor);  constructor.setAccessible(true);  try {    fInstance=constructor.newInstance(constructorArgs);  } catch (  IllegalArgumentException e) {    fail();  }catch (  InvocationTargetException e) {    fail();  }catch (  InstantiationException e) {    fail();  }catch (  IllegalAccessException e) {    fail();  }}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 anchorA,Vector2 anchorB){  this.bodyA=bodyA;  this.bodyB=bodyB;  this.localAnchorA.set(bodyA.getLocalPoint(anchorA));  this.localAnchorB.set(bodyB.getLocalPoint(anchorB));  this.length=anchorA.dst(anchorB);}  }
class C{  public boolean isBuffered(){  return false;}  }
class C{  public PlayAction(NineSwitchesGameBoard board){  this.board=board;}  }
class C{  void rescheduleMin(long newTime){  queue[1].nextExecutionTime=newTime;  fixDown(1);}  }
class C{  public void addRow(Expression[] expr){  list.add(expr);}  }
class C{  @Override public Properties trackUserLogout(){  SegmentAnalyticsEvent aEvent=new SegmentAnalyticsEvent();  aEvent.properties.putValue(Keys.NAME,Values.USERLOGOUT);  aEvent.setAppNameContext();  tracker.track(Events.USER_LOGOUT,aEvent.properties);  return aEvent.properties;}  }
class C{  public void processRoot(Node node,URL url,Network network){  Vertex vertex=createURL(url,network);  processHeaders(node,vertex,network);}  }
class C{  private Object readResolve() throws ObjectStreamException {  return INSTANCE;}  }
class C{  private String formatNode(SegmentTreeNode<?> node){  StringBuilder response=new StringBuilder("(");  if (node.lson != null) {    response.append(formatNode(node.lson));  }  response.append(node.toString());  if (node.rson != null) {    response.append(formatNode(node.rson));  }  response.append(")");  return response.toString();}  }
class C{  private void closeAllOpenStatements() throws SQLException {  SQLException postponedException=null;  for (  Statement stmt : this.openStatements) {    try {      ((StatementImpl)stmt).realClose(false,true);    } catch (    SQLException sqlEx) {      postponedException=sqlEx;    }  }  if (postponedException != null) {    throw postponedException;  }}  }
class C{  protected int indexFirstOf(final String s,final String delims){  return indexFirstOf(s,delims,-1);}  }
class C{  public void ifNonNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNONNULL,label);}  }
class C{  public void displayMyItems(String token) throws MalformedURLException, IOException {  HttpURLConnection connection=(HttpURLConnection)(new URL(ITEMS_FEED)).openConnection();  connection.setRequestMethod("GET");  connection.setRequestProperty("Authorization","GoogleLogin auth=" + token);  int responseCode=connection.getResponseCode();  InputStream inputStream;  if (responseCode == HttpURLConnection.HTTP_OK) {    inputStream=connection.getInputStream();  } else {    inputStream=connection.getErrorStream();  }  System.out.println(toString(inputStream));}  }
class C{  @Override public void show(){  if (mShow) {    super.show();  }}  }
class C{  private void onTrigger0(){  addInstruction(R.string.accessibility_tutorial_lesson_1_text_1,true);  mAllApps.setAccessibilityDelegate(mFirstIconFocusDelegate);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static <E extends Identifiable>List<E> findEntitiesMarkedForDeletion(EntityManager em,Class<E> type){  requireArgument(em != null,"Entity Manager cannot be null");  TypedQuery<E> query=em.createNamedQuery("JPAEntity.findByDeleteMarker",type);  query.setHint("javax.persistence.cache.storeMode","REFRESH");  try {    query.setParameter("deleted",true);    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<>(0);  }}  }
class C{  public void addSpIdentifier(java.lang.String param){  if (localSpIdentifier == null) {    localSpIdentifier=new java.lang.String[]{};  }  localSpIdentifierTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localSpIdentifier);  list.add(param);  this.localSpIdentifier=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public void closeGUI(){  String fullNameOfPropsFile="Glab.props";  try {    File outPropFile=new File(fullNameOfPropsFile);    FileOutputStream outFile=new FileOutputStream(outPropFile);    GlobalValues.passPropertiesFromWorkspaceToSettings(GlobalValues.settings);    GlobalValues.settings.store(outFile,"Saved GroovyLab global conf parameters");    outFile.close();  } catch (  Exception fnfe) {    JOptionPane.showMessageDialog(null,"Cannot write configuration file. Perhaps you do not have access rights for write, try making a shortcut to gLab using a proper \"Start in\" directory ","Cannot write configuration file",JOptionPane.INFORMATION_MESSAGE);    System.out.println("error opening file for writing configuration");    fnfe.printStackTrace();  }  int userOption=JOptionPane.CANCEL_OPTION;  if (GlobalValues.myGEdit.editorTextSaved == false)   userOption=JOptionPane.showConfirmDialog(null,"File: " + GlobalValues.myGEdit.editedFileName + " not saved. Proceed? ","Warning: Exit without Save?",JOptionPane.CANCEL_OPTION); else   userOption=JOptionPane.YES_OPTION;  if (userOption == JOptionPane.YES_OPTION) {    GlobalValues.myGEdit.saveRecentPaneFiles();    try {      GlobalValues.writeUserPaths();      gExec.gLab.commandHistory.saveCommandHistory(gExec.Interpreter.GlobalValues.GroovyLabCommandHistoryFile,GlobalValues.userConsole.previousCommands);      gExec.gLab.favouritePaths.saveFavouritePaths(gExec.Interpreter.GlobalValues.GroovyLabFavoritePathsFile,gExec.Interpreter.GlobalValues.gLabMainFrame.explorerPanel.favouritePathsCB);      System.exit(0);    } catch (    Exception fnfe) {      JOptionPane.showMessageDialog(null,"Cannot write user paths");      System.out.println("error opening file for writing configuration");      fnfe.printStackTrace();      System.exit(0);    }  }}  }
class C{  public SnmpNull(){  tag=NullTag;}  }
class C{  public final void addAll(int[] elements){  int free=(length & 0x3FF);  int bite=free == 0 ? 0 : Math.min(elements.length,0x400 - free);  if (bite > 0) {    System.arraycopy(elements,0,pages.get(length >> 10),length & 0x3FF,bite);    length+=bite;  }  int copied=bite;  while (copied < elements.length) {    pages.add(page=new int[0x400]);    bite=Math.min(elements.length - copied,0x400);    System.arraycopy(elements,copied,page,0,bite);    copied+=bite;    length+=bite;  }}  }
class C{  public static void disableAll(final BackEndDebuggerProvider debuggerProvider){  Preconditions.checkNotNull(debuggerProvider,"IE01887: Debugger provider argument can not be null");  for (  final IDebugger debugger : debuggerProvider) {    final BreakpointManager manager=debugger.getBreakpointManager();    for (int i=0; i < manager.getNumberOfBreakpoints(BreakpointType.REGULAR); i++) {      manager.setBreakpointStatus(BreakpointType.REGULAR,BreakpointStatus.BREAKPOINT_DISABLED,i);    }  }}  }
class C{  public void writeToPacketNBT(NBTTagCompound nbt){  this.writeToNBT(nbt);}  }
class C{  protected void loadValue(String sValue){  try {    value=Long.parseLong(sValue.trim());  } catch (  NumberFormatException nfe) {    revertToDefault();  }}  }
class C{  public boolean isText(){  return label.isText();}  }
class C{  public void testArriveAndDeregister5(){  Phaser root=new Phaser();  Phaser parent=new Phaser(root);  Phaser child=new Phaser(parent);  assertState(root,0,0,0);  assertState(parent,0,0,0);  assertState(child,0,0,0);  assertEquals(0,child.register());  assertState(root,0,1,1);  assertState(parent,0,1,1);  assertState(child,0,1,1);  assertEquals(0,child.arriveAndDeregister());  assertTerminated(child,1);  assertTerminated(parent,1);  assertTerminated(root,1);}  }
class C{  public LanesWriter(Lanes lanedefs){  log.info("Using LaneDefinitionWriter20...");  this.laneDefinitions=lanedefs;}  }
class C{  public static NSObject parse(byte[] bytes) throws IOException, PropertyListFormatException, ParseException, ParserConfigurationException, SAXException {switch (determineType(bytes)) {case TYPE_BINARY:    return BinaryPropertyListParser.parse(bytes);case TYPE_XML:  return XMLPropertyListParser.parse(bytes);case TYPE_ASCII:return ASCIIPropertyListParser.parse(bytes);default :throw new PropertyListFormatException("The given data is not a property list of a supported format.");}}  }
class C{  @Deprecated public void untagAll(String guid,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"untagAll",mAuthenticationToken,guid);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mHandler=new Handler();  setContentView(R.layout.voice_recognition);  Button speakButton=(Button)findViewById(R.id.btn_speak);  mList=(ListView)findViewById(R.id.list);  mSupportedLanguageView=(Spinner)findViewById(R.id.supported_languages);  PackageManager pm=getPackageManager();  List<ResolveInfo> activities=pm.queryIntentActivities(new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH),0);  if (activities.size() != 0) {    speakButton.setOnClickListener(this);  } else {    speakButton.setEnabled(false);    speakButton.setText("Recognizer not present");  }  refreshVoiceSettings();}  }
class C{  protected WroConfiguration newConfiguration(){  return new ServletContextPropertyWroConfigurationFactory(servletContext).create();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long dur=getLong(stack);  long start=getLong(stack);  int statID=getInt(stack);  return Wizard.getInstance().addAiring(getString(stack),statID,start,dur,(byte)0,(byte)0,(byte)0,(byte)0);}  }
class C{  public boolean isAlphaSupported(){  return impl.isAlphaGlobal();}  }
class C{  public AudioSynthesizerPropertyInfo(String name,Object value){  this.name=name;  if (value instanceof Class)   valueClass=(Class)value; else {    this.value=value;    if (value != null)     valueClass=value.getClass();  }}  }
class C{  void addMapping(String javaName,Collection<String> xmlNames){  final LinkedHashSet<String> aliasNames=new LinkedHashSet<>();  aliasNames.add(javaName);  aliasNames.addAll(xmlNames);  final String[] aliases=aliasNames.toArray(new String[aliasNames.size()]);  final String cs=findCharsetNameFor(aliases);  if (cs != null) {    registerCharsetNameFor(cs,aliases);    if (xmlNames.size() > 0) {      String preferred=xmlNames.iterator().next();      String cachedPreferred=preferredMime.get(cs.toUpperCase());      if (cachedPreferred != null && !cachedPreferred.equals(preferred)) {        throw new ConflictingPreferredMimeNameError(cs,cachedPreferred,preferred);      }      preferredMime.put(cs.toUpperCase(),preferred);    }  } else {    registerUnresolvedNamesFor(aliases,aliasNames);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void intializeMasterPlan(ArrayList<OptimizationPlanElement> temp){  LIR2MIR(temp);  MIROptimizations(temp);  MIR2MC(temp);}  }
class C{  protected Object readResolve() throws ObjectStreamException {  return set;}  }
class C{  private static int compareUlpDifference(double expected,double computed,double threshold){  if (!doubleIsFinite(expected)) {    if (Double.compare(expected,computed) == 0)     return 0; else {      System.err.printf("Unexpected sum, %g rather than %g.%n",computed,expected);      return 1;    }  }  double ulpDifference=Math.abs(expected - computed) / Math.ulp(expected);  if (ulpDifference > threshold) {    System.err.printf("Numerical summation error too large, %g ulps rather than %g.%n",ulpDifference,threshold);    return 1;  } else   return 0;}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  @Override public Instruction createEventCounterInstruction(int handle,int index,double incrementValue){  Instruction c=InstrumentedCounter.create(INSTRUMENTED_EVENT_COUNTER,new IntConstantOperand(handle),new IntConstantOperand(index),new DoubleConstantOperand(incrementValue,Offset.zero()));  c.setBytecodeIndex(INSTRUMENTATION_BCI);  return c;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(DateTest.class);}  }
class C{  @GET @Path("/{id}/refresh-matched-pools") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public StoragePoolList refreshMatchedStoragePools(@PathParam("id") URI id){  return refreshMatchedPools(VirtualPool.Type.object,id);}  }
class C{  public void switchMemory(String location){}  }
class C{  public boolean isFullyZoomedOut(){  if (isFullyZoomedOutX() && isFullyZoomedOutY())   return true; else   return false;}  }
class C{  public Change[] clear(){  Change[] result=(Change[])fChanges.toArray(new Change[fChanges.size()]);  fChanges.clear();  return result;}  }
class C{  private void rebuildTableData(){  final Vector<Vector<Object>> data=new Vector<>();  data.add(Utils.vector("Map name",repProc.replay.details.title));  final MapInfo mapInfo=repProc.getMapInfo();  if (mapInfo != null) {    data.add(Utils.vector("Map size",mapInfo.getSizeString()));    data.add(Utils.vector("Map playable size",mapInfo.getPlayableSizeString()));    data.add(Utils.vector("Tile set",mapInfo.tileSet));    if (SkillLevel.ADVANCED.isAtLeast()) {      data.add(Utils.vector("Fog type",mapInfo.fogType));      data.add(Utils.vector("Boundary left",mapInfo.boundaryLeft));      data.add(Utils.vector("Boundary right",mapInfo.boundaryRight));      data.add(Utils.vector("Boundary bottom",mapInfo.boundaryBottom));      data.add(Utils.vector("Boundary top",mapInfo.boundaryTop));    }    if (SkillLevel.DEVELOPER.isAtLeast())     data.add(Utils.vector("File format version",mapInfo.version));  }  table.getXTableModel().setDataVector(data,Utils.vector("Property","Value"));  table.pack();}  }
class C{  private String generateServicePmFileName(Map<ContextKey,ContextValue<?>> context){  Map<String,String> parameterMap=((ContextValueParameterMap)context.get(ContextKey.SERVICE_PARAMETERS)).getValue();  String instanceType=parameterMap.get(SERVICE_PARAMETER_INSTANCE_TYPE);  String region=parameterMap.get(SERVICE_PARAMETER_REGION);  String os=parameterMap.get(SERVICE_PARAMETER_OS);  return instanceType.replace('.','_') + "_" + region+ "_"+ os;}  }
class C{  public WrongClassTypeException(){  super();}  }
class C{  public static ETC2Texture createTexture(InputStream input) throws IOException {  int width=0;  int height=0;  int format=-1;  byte[] ioBuffer=new byte[4096];  if (input.read(ioBuffer,0,ETC1.ETC_PKM_HEADER_SIZE) != ETC1.ETC_PKM_HEADER_SIZE) {    throw new IOException("Unable to read PKM file header.");  }  final ByteBuffer headerBuffer=ByteBuffer.allocateDirect(ETC1.ETC_PKM_HEADER_SIZE).order(ByteOrder.BIG_ENDIAN);  headerBuffer.put(ioBuffer,0,ETC1.ETC_PKM_HEADER_SIZE).position(0);  if (!ETC2.isValid(headerBuffer)) {    throw new IOException("Not a PKM file.");  }  width=ETC2.getWidth(headerBuffer);  height=ETC2.getHeight(headerBuffer);  format=ETC2.getETC2CompressionType(headerBuffer);  final int encodedSize=ETC2.getEncodedDataSize(width,height);  final ByteBuffer dataBuffer=ByteBuffer.allocateDirect(encodedSize).order(ByteOrder.BIG_ENDIAN);  for (int i=0; i < encodedSize; ) {    int chunkSize=Math.min(ioBuffer.length,encodedSize - i);    if (input.read(ioBuffer,0,chunkSize) != chunkSize) {      throw new IOException("Unable to read PKM file data.");    }    dataBuffer.put(ioBuffer,0,chunkSize);    i+=chunkSize;  }  dataBuffer.position(0);  return new ETC2Texture(format,width,height,dataBuffer);}  }
class C{  public void addTriggersIds(Trigger trigger){  this.getTriggersIds().add(trigger.getId());}  }
class C{  public void mov(Register dst,long imm){  assert dst.getRegisterCategory().equals(CPU);  if (imm == 0L) {    movx(dst,zr);  } else   if (LogicalImmediateTable.isRepresentable(true,imm) != LogicalImmediateTable.Representable.NO) {    or(64,dst,zr,imm);  } else   if (imm >> 32 == -1L && (int)imm < 0 && LogicalImmediateTable.isRepresentable((int)imm) != LogicalImmediateTable.Representable.NO) {    mov(dst,(int)imm);    sxt(64,32,dst,dst);  } else {    mov64(dst,imm);  }}  }
class C{  public void removeUnidirectionalLink(String fromLocation,String toLocation){  links.remove(fromLocation,toLocation);}  }
class C{  public FilterQuery follow(final long[] follow){  this.follow=follow;  return this;}  }
class C{  private boolean cgPoolsHaveAvailableCapacity(Volume sourceVolume,VirtualPoolCapabilityValuesWrapper capabilities,VirtualPool vpool,List<VirtualArray> protectionVarrays){  boolean cgPoolsHaveAvailableCapacity=true;  Map<URI,Long> storagePoolRequiredCapacity=new HashMap<URI,Long>();  Map<URI,StoragePool> storagePoolCache=new HashMap<URI,StoragePool>();  Map<URI,String> storagePoolErrorDetail=new HashMap<URI,String>();  _log.info(String.format("Checking if the existing storage pools used have sufficient capacity to satisfy the placement request..."));  if (sourceVolume != null) {    long sourceVolumesRequiredCapacity=getSizeInKB(capabilities.getSize() * capabilities.getResourceCount());    if (RPHelper.isVPlexVolume(sourceVolume,dbClient)) {      if (null == sourceVolume.getAssociatedVolumes() || sourceVolume.getAssociatedVolumes().isEmpty()) {        _log.error("VPLEX volume {} has no backend volumes.",sourceVolume.forDisplay());        throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(sourceVolume.forDisplay());      }      for (      String backingVolumeId : sourceVolume.getAssociatedVolumes()) {        Volume backingVolume=dbClient.queryObject(Volume.class,URI.create(backingVolumeId));        StoragePool backingVolumePool=dbClient.queryObject(StoragePool.class,backingVolume.getPool());        storagePoolCache.put(backingVolumePool.getId(),backingVolumePool);        updateStoragePoolRequiredCapacityMap(storagePoolRequiredCapacity,backingVolumePool.getId(),sourceVolumesRequiredCapacity);        storagePoolErrorDetail.put(backingVolumePool.getId(),sourceVolume.getPersonality());      }    } else {      StoragePool sourcePool=dbClient.queryObject(StoragePool.class,sourceVolume.getPool());      storagePoolCache.put(sourcePool.getId(),sourcePool);      updateStoragePoolRequiredCapacityMap(storagePoolRequiredCapacity,sourcePool.getId(),sourceVolumesRequiredCapacity);      storagePoolErrorDetail.put(sourcePool.getId(),sourceVolume.getPersonality());    }    List<Volume> sourceJournals=RPHelper.findExistingJournalsForCopy(dbClient,sourceVolume.getConsistencyGroup(),sourceVolume.getRpCopyName());    Volume sourceJournal=sourceJournals.get(0);    if (sourceJournal == null) {      _log.error(String.format("No existing source journal found in CG [%s] for copy [%s], returning false",sourceVolume.getConsistencyGroup(),sourceVolume.getRpCopyName()));      throw APIException.badRequests.unableToFindSuitableJournalRecommendation();    }    long sourceJournalSizePerPolicy=RPHelper.getJournalSizeGivenPolicy(String.valueOf(capabilities.getSize()),vpool.getJournalSize(),capabilities.getResourceCount());    long sourceJournalVolumesRequiredCapacity=getSizeInKB(sourceJournalSizePerPolicy);    if (RPHelper.isVPlexVolume(sourceJournal,dbClient)) {      for (      String backingVolumeId : sourceJournal.getAssociatedVolumes()) {        Volume backingVolume=dbClient.queryObject(Volume.class,URI.create(backingVolumeId));        StoragePool backingVolumePool=dbClient.queryObject(StoragePool.class,backingVolume.getPool());        storagePoolCache.put(backingVolumePool.getId(),backingVolumePool);        updateStoragePoolRequiredCapacityMap(storagePoolRequiredCapacity,backingVolumePool.getId(),sourceJournalVolumesRequiredCapacity);        storagePoolErrorDetail.put(backingVolumePool.getId(),sourceVolume.getPersonality() + " " + sourceJournal.getPersonality());      }    } else {      StoragePool sourceJournalPool=dbClient.queryObject(StoragePool.class,sourceJournal.getPool());      storagePoolCache.put(sourceJournalPool.getId(),sourceJournalPool);      updateStoragePoolRequiredCapacityMap(storagePoolRequiredCapacity,sourceJournalPool.getId(),sourceJournalVolumesRequiredCapacity);      storagePoolErrorDetail.put(sourceJournalPool.getId(),sourceVolume.getPersonality() + " " + sourceJournal.getPersonality());    }    if (sourceVolume.getRpTargets() != null) {      for (      VirtualArray protectionVarray : protectionVarrays) {        VpoolProtectionVarraySettings settings=rpHelper.getProtectionSettings(vpool,protectionVarray);        VirtualPool protectionVpool=vpool;        if (settings.getVirtualPool() != null) {          protectionVpool=dbClient.queryObject(VirtualPool.class,settings.getVirtualPool());        }        Volume targetVolume=getTargetVolumeForProtectionVirtualArray(sourceVolume,protectionVarray);        long targetVolumeRequiredCapacity=getSizeInKB(capabilities.getSize());        if (RPHelper.isVPlexVolume(targetVolume,dbClient)) {          for (          String backingVolumeId : targetVolume.getAssociatedVolumes()) {            Volume backingVolume=dbClient.queryObject(Volume.class,URI.create(backingVolumeId));            StoragePool backingVolumePool=dbClient.queryObject(StoragePool.class,backingVolume.getPool());            storagePoolCache.put(backingVolumePool.getId(),backingVolumePool);            updateStoragePoolRequiredCapacityMap(storagePoolRequiredCapacity,backingVolumePool.getId(),targetVolumeRequiredCapacity);            storagePoolErrorDetail.put(backingVolumePool.getId(),targetVolume.getPersonality());          }        } else {          StoragePool targetPool=dbClient.queryObject(StoragePool.class,targetVolume.getPool());          storagePoolCache.put(targetPool.getId(),targetPool);          updateStoragePoolRequiredCapacityMap(storagePoolRequiredCapacity,targetPool.getId(),targetVolumeRequiredCapacity);          storagePoolErrorDetail.put(targetPool.getId(),targetVolume.getPersonality());        }        List<Volume> targetJournals=RPHelper.findExistingJournalsForCopy(dbClient,targetVolume.getConsistencyGroup(),targetVolume.getRpCopyName());        Volume targetJournalVolume=targetJournals.get(0);        if (targetJournalVolume == null) {          _log.error(String.format("No existing target journal found in CG [%s] for copy [%s], returning false",targetVolume.getConsistencyGroup(),targetVolume.getRpCopyName()));          throw APIException.badRequests.unableToFindSuitableJournalRecommendation();        }        long targetJournalSizePerPolicy=RPHelper.getJournalSizeGivenPolicy(String.valueOf(capabilities.getSize()),protectionVpool.getJournalSize(),capabilities.getResourceCount());        long targetJournalVolumeRequiredCapacity=getSizeInKB(targetJournalSizePerPolicy);        if (RPHelper.isVPlexVolume(targetJournalVolume,dbClient)) {          for (          String backingVolumeId : targetJournalVolume.getAssociatedVolumes()) {            Volume backingVolume=dbClient.queryObject(Volume.class,URI.create(backingVolumeId));            StoragePool backingVolumePool=dbClient.queryObject(StoragePool.class,backingVolume.getPool());            storagePoolCache.put(backingVolumePool.getId(),backingVolumePool);            updateStoragePoolRequiredCapacityMap(storagePoolRequiredCapacity,backingVolumePool.getId(),targetJournalVolumeRequiredCapacity);            storagePoolErrorDetail.put(backingVolumePool.getId(),targetVolume.getPersonality() + " " + targetJournalVolume.getPersonality());          }        } else {          StoragePool targetJournalPool=dbClient.queryObject(StoragePool.class,targetJournalVolume.getPool());          storagePoolCache.put(targetJournalPool.getId(),targetJournalPool);          updateStoragePoolRequiredCapacityMap(storagePoolRequiredCapacity,targetJournalPool.getId(),targetJournalVolumeRequiredCapacity);          storagePoolErrorDetail.put(targetJournalPool.getId(),targetVolume.getPersonality() + " " + targetJournalVolume.getPersonality());        }      }    }    BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,capabilities.getBlockConsistencyGroup());    for (    Map.Entry<URI,Long> storagePoolEntry : storagePoolRequiredCapacity.entrySet()) {      StoragePool storagePool=storagePoolCache.get(storagePoolEntry.getKey());      long freeCapacity=storagePool.getFreeCapacity();      long requiredCapacity=storagePoolEntry.getValue().longValue();      if (requiredCapacity > freeCapacity) {        cgPoolsHaveAvailableCapacity=false;        _log.info(String.format("Unable to fully align placement with existing %s volume from " + "RecoverPoint consistency group [%s]. Required capacity is %s and we can't re-use storage pool [%s] " + "as it only has %s free capacity.",storagePoolErrorDetail.get(storagePool.getId()),sourceVolume.getLabel(),cg.getLabel(),SizeUtil.translateSize(requiredCapacity,SizeUtil.SIZE_GB),storagePool.getLabel(),SizeUtil.translateSize(freeCapacity,SizeUtil.SIZE_GB)));        break;      } else {        _log.info(String.format("Storage pool [%s], used by consistency group [%s], has the required capacity and will be " + "used for this placement request.",storagePool.getLabel(),cg.getLabel()));      }    }  }  return cgPoolsHaveAvailableCapacity;}  }
class C{  public Map<String,Object> iterate(int agentInstanceId){  Map<String,Object> values=new HashMap<String,Object>();  int count=0;  for (  VariableTriggerSetDesc assignment : assignments) {    Object value;    if (readersForGlobalVars[count] == null) {      VariableReader reader=variableService.getReader(assignment.variableName,agentInstanceId);      if (reader == null) {        continue;      }      value=reader.getValue();    } else {      value=readersForGlobalVars[count].getValue();    }    if (value == null) {      values.put(assignment.variableName,null);    } else     if (writers[count] != null) {      EventBean current=(EventBean)value;      values.put(assignment.variableName,writers[count].getGetter().get(current));    } else     if (value instanceof EventBean) {      values.put(assignment.variableName,((EventBean)value).getUnderlying());    } else {      values.put(assignment.variableName,value);    }    count++;  }  return values;}  }
class C{  private static boolean accepts(String accept_header,String to_accept){  String[] acceptValues=accept_header.split("\\s*(,|;)\\s*");  Arrays.sort(acceptValues);  return Arrays.binarySearch(acceptValues,to_accept) > -1 || Arrays.binarySearch(acceptValues,to_accept.replaceAll("/.*$","/*")) > -1 || Arrays.binarySearch(acceptValues,"*/*") > -1;}  }
class C{  public CreateWindowClause insert(boolean insert){  this.insert=insert;  return this;}  }
class C{  public void actionPerformed(ActionEvent e){  String action=e.getActionCommand();  if (action == null || action.length() == 0 || keymap == null)   return;  log.info("PosSubFunctionKeys - actionPerformed: " + action);  HashMap<Integer,MPOSKey> currentKeymap=keymap.get(currentLayout);  try {    int C_POSKey_ID=Integer.parseInt(action);    MPOSKey key=currentKeymap.get(C_POSKey_ID);    if (key.getSubKeyLayout_ID() > 0) {      currentLayout=key.getSubKeyLayout_ID();      cardLayout.show(this,Integer.toString(key.getSubKeyLayout_ID()));    } else {      caller.keyReturned(key);    }  } catch (  Exception ex) {  }}  }
class C{  public static boolean isMaybeBISFunction(String varName){  String bis="BIS_";  return varName.startsWith(bis);}  }
class C{  public static MethodAnnotation fromCalledMethod(DismantleBytecode visitor){  String className=visitor.getDottedClassConstantOperand();  String methodName=visitor.getNameConstantOperand();  String methodSig=visitor.getSigConstantOperand();  if (visitor instanceof OpcodeStackDetector && visitor.getOpcode() != Constants.INVOKESTATIC) {    int params=PreorderVisitor.getNumberArguments(methodSig);    OpcodeStackDetector oVisitor=(OpcodeStackDetector)visitor;    if (!oVisitor.getStack().isTop() && oVisitor.getStack().getStackDepth() > params) {      OpcodeStack.Item item=oVisitor.getStack().getStackItem(params);      String cName=ClassName.fromFieldSignature(item.getSignature());      if (cName != null) {        className=cName;      }    }  }  return fromCalledMethod(className,methodName,methodSig,visitor.getOpcode() == Constants.INVOKESTATIC);}  }
class C{  public boolean read(BinaryFile binFile){  try {    binFile.seek(0);    FHDR=binFile.readFixedLengthString(9);    if (!FHDR.startsWith("NITF"))     return false;    CLEVEL=binFile.readFixedLengthString(2);    STYPE=binFile.readFixedLengthString(4);    OSTAID=binFile.readFixedLengthString(10);    FDT=binFile.readFixedLengthString(14);    FTITLE=binFile.readFixedLengthString(80);    FSCLAS=binFile.readFixedLengthString(1);    FSCODE=binFile.readFixedLengthString(40);    FSCTLH=binFile.readFixedLengthString(40);    FSREL=binFile.readFixedLengthString(40);    FSCAUT=binFile.readFixedLengthString(20);    FSCTLN=binFile.readFixedLengthString(20);    FSDWNG=binFile.readFixedLengthString(6);    if (FSDWNG.startsWith("999998"))     FSDEVT=binFile.readFixedLengthString(40);    FSCOP=binFile.readFixedLengthString(5);    FSCPYS=binFile.readFixedLengthString(5);    ENCRYP=binFile.readFixedLengthString(1);    ONAME=binFile.readFixedLengthString(27);    OPHONE=binFile.readFixedLengthString(18);    FL=binFile.readFixedLengthString(12);    HL=binFile.readFixedLengthString(6);    nha=readSectionInfo(binFile);    nud.UDHDL=binFile.readFixedLengthString(5);    nud.UDHOFL=binFile.readFixedLengthString(3);    nud.RETAG=binFile.readFixedLengthString(6);    nud.REL=binFile.readFixedLengthString(5);  } catch (  IOException e) {    System.err.println("NitfHeader: File IO Error while reading header information:");    System.err.println(e);    return false;  }catch (  FormatException f) {    System.err.println("NitfHeader: File IO Format error while reading header information:");    System.err.println(f);    return false;  }  return true;}  }
class C{  public static void addFunctionDoc(PageExceptionImpl pe,FunctionLibFunction flf){  ArrayList<FunctionLibFunctionArg> args=flf.getArg();  Iterator<FunctionLibFunctionArg> it=args.iterator();  StringBuilder pattern=new StringBuilder(flf.getName());  StringBuilder end=new StringBuilder();  pattern.append("(");  FunctionLibFunctionArg arg;  int c=0;  while (it.hasNext()) {    arg=it.next();    if (!arg.isRequired()) {      pattern.append(" [");      end.append("]");    }    if (c++ > 0)     pattern.append(", ");    pattern.append(arg.getName());    pattern.append(":");    pattern.append(arg.getTypeAsString());  }  pattern.append(end);  pattern.append("):");  pattern.append(flf.getReturnTypeAsString());  pe.setAdditional(KeyConstants._Pattern,pattern);  StringBuilder doc=new StringBuilder(flf.getDescription());  StringBuilder req=new StringBuilder();  StringBuilder opt=new StringBuilder();  StringBuilder tmp;  doc.append("\n");  it=args.iterator();  while (it.hasNext()) {    arg=it.next();    tmp=arg.isRequired() ? req : opt;    tmp.append("- ");    tmp.append(arg.getName());    tmp.append(" (");    tmp.append(arg.getTypeAsString());    tmp.append("): ");    tmp.append(arg.getDescription());    tmp.append("\n");  }  if (req.length() > 0)   doc.append("\nRequired:\n").append(req);  if (opt.length() > 0)   doc.append("\nOptional:\n").append(opt);  pe.setAdditional(KeyImpl.init("Documentation"),doc);}  }
class C{  private CellInfoGsm(Parcel in){  super(in);  mCellIdentityGsm=CellIdentityGsm.CREATOR.createFromParcel(in);  mCellSignalStrengthGsm=CellSignalStrengthGsm.CREATOR.createFromParcel(in);}  }
class C{  public static void sort(char[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public boolean isAssociatedRcsRawContact(long rawContactId,final ContactId contact){  long rcsRawContactId=getAssociatedRcsRawContact(rawContactId,contact);  return (ContactManager.INVALID_ID != rcsRawContactId);}  }
class C{  protected String doIt() throws Exception {  log.info("C_InvoicePaySchedule_ID=" + getRecord_ID());  MInvoicePaySchedule[] schedule=MInvoicePaySchedule.getInvoicePaySchedule(getCtx(),0,getRecord_ID(),null);  if (schedule.length == 0)   throw new IllegalArgumentException("InvoicePayScheduleValidate - No Schedule");  MInvoice invoice=new MInvoice(getCtx(),schedule[0].getC_Invoice_ID(),null);  if (invoice.get_ID() == 0)   throw new IllegalArgumentException("InvoicePayScheduleValidate - No Invoice");  BigDecimal total=Env.ZERO;  for (int i=0; i < schedule.length; i++) {    BigDecimal due=schedule[i].getDueAmt();    if (due != null)     total=total.add(due);  }  boolean valid=invoice.getGrandTotal().compareTo(total) == 0;  invoice.setIsPayScheduleValid(valid);  invoice.saveEx();  for (int i=0; i < schedule.length; i++) {    if (schedule[i].isValid() != valid) {      schedule[i].setIsValid(valid);      schedule[i].saveEx();    }  }  String msg="@OK@";  if (!valid)   msg="@GrandTotal@ = " + invoice.getGrandTotal() + " <> @Total@ = "+ total+ "  - @Difference@ = "+ invoice.getGrandTotal().subtract(total);  return Msg.parseTranslation(getCtx(),msg);}  }
class C{  public boolean hasSignificantEdits(){  return hasSignificantEdits;}  }
class C{  private int yearLength(){  int year=internalGet(YEAR);  if (internalGetEra() == BCE) {    year=1 - year;  }  return yearLength(year);}  }
class C{  static public void main(String[] args){  System.out.println(name());}  }
class C{  public void insertWait(String id){  try {    new WebDriverWait(appiumDriver,downloadWaitTime).until(ExpectedConditions.invisibilityOfElementLocated(By.id(id)));  } catch (  Throwable e) {    Reporter.log("Element found: " + e.toString());    captureScreenshot();    throw e;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:30.672 -0500",hash_original_method="1C0993C098E9F3E04F29E582E3A28E0E",hash_generated_method="32CB958E44C866934BC578A28B4E816D") public boolean isConnected(){  return (((getTaintInt() + mSocketState.getTaintInt())) == 1);}  }
class C{  public OrganizationRemovedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void printTypeParameters(List<JCTypeParameter> trees) throws IOException {  if (trees.nonEmpty()) {    print("<");    printExprs(trees);    print(">");  }}  }
class C{  public boolean lockEnabled(){  return getModelEntity().lock();}  }
class C{  public BufferList(String[] header,int bufferSize){  this.header=header;  this.bufferSize=bufferSize;  this.bufferHolder=new FIFOBufferHolder();}  }
class C{  static String decodeGSMPackedString(byte[] input){  final char PADDING_CHAR=0x00;  int lengthBytes=input.length;  int lengthSeptets=(lengthBytes * 8) / 7;  String decoded;  if (lengthBytes % 7 == 0) {    if (lengthBytes > 0) {      if ((input[lengthBytes - 1] >> 1) == PADDING_CHAR) {        lengthSeptets=lengthSeptets - 1;      }    }  }  decoded=GsmAlphabet.gsm7BitPackedToString(input,0,lengthSeptets);  if (null == decoded) {    Log.e(TAG,"Decoding of GSM packed string failed");    decoded="";  }  return decoded;}  }
class C{  public char readLEChar() throws IOException {  int byte1=in.read();  int byte2=in.read();  if (byte2 == -1)   throw new EOFException();  return (char)((byte2 << 8) + byte1);}  }
class C{  public ProposalPosition(IDocument document,int offset,int length,ICompletionProposal[] proposals){  super(document,offset,length,LinkedPositionGroup.NO_STOP);  fProposals=copy(proposals);}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,long value){  if (extras == null) {    extras=new Bundle();  }  extras.putLong(name,value);  return this;}  }
class C{  public CModuleViewFinder(final AbstractSQLProvider provider){  m_provider=provider;}  }
class C{  public <D>AttributeMetadata<D> bind(ElementKey<?,?> parent,AttributeKey<D> attribute){  return bind(parent,attribute,null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testAbnormalInvokeAll3(){  testAbnormalInvokeAll3(mainPool());}  }
class C{  @Override public Settings overrideSettings(final Settings settings){  final String nameOfTest=name.getMethodName();switch (nameOfTest) {case "shouldHaveTheSessionTimeout":case "shouldCloseSessionOnceOnRequest":    settings.processors.clear();  final Settings.ProcessorSettings processorSettings=new Settings.ProcessorSettings();processorSettings.className=SessionOpProcessor.class.getCanonicalName();processorSettings.config=new HashMap<>();processorSettings.config.put(SessionOpProcessor.CONFIG_SESSION_TIMEOUT,3000L);settings.processors.add(processorSettings);Logger.getRootLogger().setLevel(Level.INFO);break;case "shouldEnsureSessionBindingsAreThreadSafe":settings.threadPoolWorker=2;break;case "shouldExecuteInSessionAndSessionlessWithoutOpeningTransactionWithSingleClient":case "shouldExecuteInSessionWithTransactionManagement":case "shouldRollbackOnEvalExceptionForManagedTransaction":deleteDirectory(new File("/tmp/neo4j"));settings.graphs.put("graph","conf/neo4j-empty.properties");break;}return settings;}  }
class C{  public static boolean checkEmailSettings(){  final boolean missing=Env.APP_SETTINGS.get(Settings.SMTP_HOST).trim().isEmpty() || Env.APP_SETTINGS.get(Settings.SMTP_USER).trim().isEmpty();  if (missing)   GuiUtils.showInfoMsg("Before sending emails you have to configure your email server and account."," ",SettingsGui.createSettingLink(Settings.NODE_EMAIL));  return !missing;}  }
class C{  public void testDataSourceSupport(){  AbstractLocalConfiguration configuration=new LocalConfigurationThatSupportsProperty(Arrays.asList(new String[]{DatasourcePropertySet.DATASOURCE}));  configuration.getDataSources().add(ConfigurationFixtureFactory.createDataSource().buildDataSource());  configuration.collectUnsupportedDataSourcesAndThrowException();  assertEquals(1,configuration.getDataSources().size());}  }
class C{  private boolean alreadyInRequestedMode(final Player player,final RPAction action){  if (!action.has("mode")) {    return false;  }  boolean requestedMode=Boolean.parseBoolean(action.get("mode"));  return (requestedMode == player.isGhost());}  }
class C{  public static double SACCmaxFitness(GEPIndividual ind){  return (1000.0);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssVolInfo[");  buffer.append("m_repType = ").append(m_repType);  buffer.append(", m_path = ").append(m_path);  buffer.append(", m_maxSize = ").append(m_maxSize);  buffer.append(", m_flags = ").append(m_flags);  buffer.append("]");  return buffer.toString();}  }
class C{  public static boolean areServicesReady(ServiceHost host,String serviceLinkFieldName,Class... services) throws NoSuchFieldException, IllegalAccessException {  checkArgument(host != null,"host cannot be null");  checkArgument(serviceLinkFieldName != null,"serviceLinkFieldName cannot be null");  boolean areReady=true;  for (  Class service : services) {    boolean isServiceReady=isServiceReady(host,serviceLinkFieldName,service);    if (!isServiceReady) {      logger.info("%s is not ready.",getServiceSelfLink(serviceLinkFieldName,service));    }    areReady&=isServiceReady(host,serviceLinkFieldName,service);  }  return areReady;}  }
class C{  public static Set execute(ExecutablePool pool,String region){  AbstractOp op=new KeySetOpImpl(region);  return (Set)pool.execute(op);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static Object convert(Object source,Class<?> target){  if (target == null) {  }  if (source == null) {    if (target.isPrimitive()) {    }    return source;  } else   if ((source instanceof Float && ((Float)source).isNaN()) || (source instanceof Double && ((Double)source).isNaN())) {    return source;  }  if (IConnection.class.isAssignableFrom(source.getClass()) && (!target.equals(IConnection.class))) {  }  if (target.isInstance(source)) {    return source;  }  if (target.isAssignableFrom(source.getClass())) {    return source;  }  if (target.isArray()) {  }  if (target.equals(String.class)) {    return source.toString();  }  if (target.isPrimitive()) {    return convertToWrappedPrimitive(source,primitiveMap.get(target));  }  if (wrapperMap.containsKey(target)) {    return convertToWrappedPrimitive(source,target);  }  if (target.equals(Map.class)) {    return convertBeanToMap(source);  }  if (target.equals(List.class) || target.equals(Collection.class)) {    if (source.getClass().equals(LinkedHashMap.class)) {      return convertMapToList((LinkedHashMap<?,?>)source);    } else     if (source.getClass().isArray()) {    }  }  if (target.equals(Set.class) && source.getClass().isArray()) {    return convertArrayToSet((Object[])source);  }  if (target.equals(Set.class) && source instanceof List) {    return new HashSet((List)source);  }  if (source instanceof Map) {  }  return null;}  }
class C{  public IBlockState withMirror(IBlockState state,Mirror mirrorIn){  return state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING)));}  }
class C{  public void dump(Printer printer,boolean verbose){  Printer indentedPrinter=PrefixPrinter.create(printer,"    ");synchronized (mLock) {    printer.println("Connection pool for " + mConfiguration.path + ":");    printer.println("  Open: " + mIsOpen);    printer.println("  Max connections: " + mMaxConnectionPoolSize);    printer.println("  Available primary connection:");    if (mAvailablePrimaryConnection != null) {      mAvailablePrimaryConnection.dump(indentedPrinter,verbose);    } else {      indentedPrinter.println("<none>");    }    printer.println("  Available non-primary connections:");    if (!mAvailableNonPrimaryConnections.isEmpty()) {      final int count=mAvailableNonPrimaryConnections.size();      for (int i=0; i < count; i++) {        mAvailableNonPrimaryConnections.get(i).dump(indentedPrinter,verbose);      }    } else {      indentedPrinter.println("<none>");    }    printer.println("  Acquired connections:");    if (!mAcquiredConnections.isEmpty()) {      for (      Map.Entry<SQLiteConnection,AcquiredConnectionStatus> entry : mAcquiredConnections.entrySet()) {        final SQLiteConnection connection=entry.getKey();        connection.dumpUnsafe(indentedPrinter,verbose);        indentedPrinter.println("  Status: " + entry.getValue());      }    } else {      indentedPrinter.println("<none>");    }    printer.println("  Connection waiters:");    if (mConnectionWaiterQueue != null) {      int i=0;      final long now=SystemClock.uptimeMillis();      for (ConnectionWaiter waiter=mConnectionWaiterQueue; waiter != null; waiter=waiter.mNext, i++) {        indentedPrinter.println(i + ": waited for " + ((now - waiter.mStartTime) * 0.001f)+ " ms - thread="+ waiter.mThread+ ", priority="+ waiter.mPriority+ ", sql='"+ waiter.mSql+ "'");      }    } else {      indentedPrinter.println("<none>");    }  }}  }
class C{  public void removeControl(Control control){  controls.remove(control);}  }
class C{  public StartExecParams withTty(boolean tty){  this.tty=tty;  return this;}  }
class C{  @Override public void disableScreen(){  if (currentDisplay != null) {    final Group FXpane=((FXDisplay)currentDisplay).getFXPane();    if (pdf.getChildren().contains(FXpane)) {      final int count=pdf.getChildren().size();      for (int i=0; i < count; i++) {        pdf.getChildren().remove(0);      }    }  }}  }
class C{  public SymMatrixF(String fname) throws FileNotFoundException, IOException {  super(fname);}  }
class C{  public static void main(String[] args){  try {    GenericObjectEditor.registerEditors();    Object rp=new weka.experiment.AveragingResultProducer();    final PropertySelectorDialog jd=new PropertySelectorDialog(null,rp);    int result=jd.showDialog();    if (result == PropertySelectorDialog.APPROVE_OPTION) {      System.err.println("Property Selected");      PropertyNode[] path=jd.getPath();      for (int i=0; i < path.length; i++) {        PropertyNode pn=path[i];        System.err.println("" + (i + 1) + "  "+ pn.toString()+ " "+ pn.value.toString());      }    } else {      System.err.println("Cancelled");    }    System.exit(0);  } catch (  Exception ex) {    ex.printStackTrace();    System.err.println(ex.getMessage());  }}  }
class C{  public final void testNextBytesbyteArray04() throws NoSuchAlgorithmException, NoSuchProviderException {  SecureRandom sr1;  SecureRandom sr2;  byte[] myBytes;  byte[] myBytes1;  byte[] myBytes2;  for (int i=1; i < LENGTH / 2; i+=INCR) {    sr1=SecureRandom.getInstance(algorithm,provider);    sr2=SecureRandom.getInstance(algorithm,provider);    sr1.nextBytes(new byte[0]);    sr2.nextBytes(new byte[0]);    boolean flag=true;    myBytes1=new byte[i];    myBytes2=new byte[i];    sr1.nextBytes(myBytes1);    sr2.nextBytes(myBytes2);    for (int j=0; j < i; j++) {      flag&=myBytes1[j] == myBytes2[j];    }    sr1.nextBytes(myBytes1);    sr2.nextBytes(myBytes2);    for (int j=0; j < i; j++) {      flag&=myBytes1[j] == myBytes2[j];    }    if (flag) {      fail("TESTING RANDOM NUMBER GENERATOR QUALITY: IGNORE THIS FAILURE IF INTERMITTENT :: i=" + i);    }  }  myBytes=new byte[]{(byte)0};  for (int n=1; n < LENGTH; n+=INCR) {    byte[][] bytes1=new byte[2][n];    byte[][] bytes2=new byte[2][n];    sr1=SecureRandom.getInstance(algorithm,provider);    sr2=SecureRandom.getInstance(algorithm,provider);    sr1.setSeed(myBytes);    sr2.setSeed(myBytes);    sr1.nextBytes(bytes1[0]);    sr1.nextBytes(bytes1[1]);    sr2.nextBytes(bytes2[0]);    sr2.nextBytes(new byte[0]);    sr2.nextBytes(bytes2[1]);    for (int k=0; k < 2; k++) {      for (int j=0; j < n; j++) {        assertTrue("non-equality: k=" + k + " j="+ j+ " bytes1[k][j]="+ bytes1[k][j]+ " bytes2[k][j]="+ bytes2[k][j],bytes1[k][j] == bytes2[k][j]);      }    }  }}  }
class C{  public LongArrayBitVector fast(){  return this;}  }
class C{  public static void simpleDataExchange(DatagramSocket s1,InetAddress ia1,DatagramSocket s2,InetAddress ia2) throws Exception {  SocketAddress dest1=new InetSocketAddress(ia1,s1.getLocalPort());  dprintln("dest1 = " + dest1);  SocketAddress dest2=new InetSocketAddress(ia2,s2.getLocalPort());  dprintln("dest2 = " + dest2);  byte[] ba="Hello world".getBytes();  byte[] bb="HELLO WORLD1".getBytes();  DatagramPacket p1=new DatagramPacket(ba,ba.length,dest1);  DatagramPacket p2=new DatagramPacket(ba,ba.length,dest2);  DatagramPacket r1=new DatagramPacket(new byte[256],256);  DatagramPacket r2=new DatagramPacket(new byte[256],256);  s2.send(p1);  s1.send(p2);  s1.receive(r1);  s2.receive(r2);  comparePackets(p1,r1);  comparePackets(p2,r2);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case FunctionblockPackage.FUNCTION_BLOCK__CONFIGURATION:    return getConfiguration();case FunctionblockPackage.FUNCTION_BLOCK__STATUS:  return getStatus();case FunctionblockPackage.FUNCTION_BLOCK__FAULT:return getFault();case FunctionblockPackage.FUNCTION_BLOCK__EVENTS:return getEvents();case FunctionblockPackage.FUNCTION_BLOCK__OPERATIONS:return getOperations();}return super.eGet(featureID,resolve,coreType);}  }
class C{  void processOFMessage(OFMessage m){  roleChanger.checkTimeout();switch (m.getType()) {case BARRIER_REPLY:    processOFBarrierReply((OFBarrierReply)m);  break;case ERROR:processOFError((OFErrorMsg)m);break;case FLOW_REMOVED:processOFFlowRemoved((OFFlowRemoved)m);break;case GET_CONFIG_REPLY:processOFGetConfigReply((OFGetConfigReply)m);break;case PACKET_IN:processOFPacketIn((OFPacketIn)m);break;case PORT_STATUS:processOFPortStatus((OFPortStatus)m);break;case QUEUE_GET_CONFIG_REPLY:processOFQueueGetConfigReply((OFQueueGetConfigReply)m);break;case STATS_REPLY:processOFStatsReply((OFStatsReply)m);break;case ROLE_REPLY:processOFRoleReply((OFRoleReply)m);break;case EXPERIMENTER:processOFExperimenter((OFExperimenter)m);break;default :illegalMessageReceived(m);break;}}  }
class C{  public String nominalColsTipText(){  return "The range of attributes to generate as nominal ones.";}  }
class C{  boolean readEndOfLine(int ch) throws IOException {  if (ch == CR && in.lookAhead() == LF) {    ch=in.read();  }  return ch == LF || ch == CR;}  }
class C{  public List<HadoopComponent> components(){  return components;}  }
class C{  private void createPipelineExecutionEnvironment(){  if (options.isStreaming()) {    createStreamExecutionEnvironment();  } else {    createBatchExecutionEnvironment();  }}  }
class C{  public boolean isClassNameMatch(String className){  int activeCount=0;  for (int i=_listeners.length - 1; i >= 0; i--) {    ScanListenerByteCode listener=_listeners[i];    if (listener == null)     continue;    if (listener.isScanClassName(className)) {      return true;    }  }  return false;}  }
class C{  public __<M,Either<A,T2<E,ProducerT<E,M,A>>>> run(MonadRec<M> mMonadRec){  return mMonadRec.map(null,toFreeT().resume(mMonadRec,YieldF.functor()));}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  private void showDatePickerDialog(){  Calendar c=Util.calFromString(tvDate.getText().toString());  DatePickerDialog dpd=DatePickerDialog.newInstance(this,c.get(Calendar.YEAR),c.get(Calendar.MONTH),c.get(Calendar.DAY_OF_MONTH));  dpd.setThemeDark(theme == RuqusTheme.DARK);  dpd.autoDismiss(true);  dpd.show(((Activity)getContext()).getFragmentManager(),"RuqusDPD");}  }
class C{  private static void addLiveReference(Object value){synchronized (sLiveObjects) {    Integer count=sLiveObjects.get(value);    if (count == null) {      sLiveObjects.put(value,1);    } else {      sLiveObjects.put(value,count + 1);    }  }}  }
class C{  private void findSrl(String text,Map<Integer,Integer> ranges,Map<Integer,MutableAttributeSet> rangesStyle){  srlMatcher.reset(text);  while (srlMatcher.find()) {    int start=srlMatcher.start();    int end=srlMatcher.end() - 1;    if (!inRanges(start,ranges) && !inRanges(end,ranges)) {      String foundSrl=srlMatcher.group();      String url=SRL_URL + foundSrl;      ranges.put(start,end);      rangesStyle.put(start,url(url));    }  }}  }
class C{  public void onScriptInitialized(){synchronized (rScriptInitializeNotifier) {    rScriptInitialized=true;    rScriptInitializeNotifier.notifyAll();  }}  }
class C{  public void becomeDelegateFor(BranchLabel otherLabel){  otherLabel.delegate=this;  final int otherCount=otherLabel.forwardReferenceCount;  if (otherCount == 0)   return;  int[] mergedForwardReferences=new int[this.forwardReferenceCount + otherCount];  int indexInMerge=0;  int j=0;  int i=0;  int max=this.forwardReferenceCount;  int max2=otherLabel.forwardReferenceCount;  loop1:   for (; i < max; i++) {    final int value1=this.forwardReferences[i];    for (; j < max2; j++) {      final int value2=otherLabel.forwardReferences[j];      if (value1 < value2) {        mergedForwardReferences[indexInMerge++]=value1;        continue loop1;      } else       if (value1 == value2) {        mergedForwardReferences[indexInMerge++]=value1;        j++;        continue loop1;      } else {        mergedForwardReferences[indexInMerge++]=value2;      }    }    mergedForwardReferences[indexInMerge++]=value1;  }  for (; j < max2; j++) {    mergedForwardReferences[indexInMerge++]=otherLabel.forwardReferences[j];  }  this.forwardReferences=mergedForwardReferences;  this.forwardReferenceCount=indexInMerge;}  }
class C{  public ConfigurationException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public DatagramSocket socket(){  return _myDatagramSocket;}  }
class C{  public SparseCharArray(int initialCapacity){  initialCapacity=ArrayUtils.idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new char[initialCapacity];  mSize=0;}  }
class C{  @Override public void initHelper(){  if (iapHelper != null) {    iapHelper.initHelper();  }}  }
class C{  private ProviderList(){  List<ProviderConfig> configList=new ArrayList<>();  for (int i=1; true; i++) {    String entry=Security.getProperty("security.provider." + i);    if (entry == null) {      break;    }    entry=entry.trim();    if (entry.length() == 0) {      System.err.println("invalid entry for " + "security.provider." + i);      break;    }    int k=entry.indexOf(' ');    ProviderConfig config;    if (k == -1) {      config=new ProviderConfig(entry);    } else {      String className=entry.substring(0,k);      String argument=entry.substring(k + 1).trim();      config=new ProviderConfig(className,argument);    }    if (configList.contains(config) == false) {      configList.add(config);    }  }  configs=configList.toArray(PC0);  if (debug != null) {    debug.println("provider configuration: " + configList);  }}  }
class C{  public BlockTreeTermsWriter(SegmentWriteState state,PostingsWriterBase postingsWriter,int minItemsInBlock,int maxItemsInBlock) throws IOException {  validateSettings(minItemsInBlock,maxItemsInBlock);  this.minItemsInBlock=minItemsInBlock;  this.maxItemsInBlock=maxItemsInBlock;  this.maxDoc=state.segmentInfo.maxDoc();  this.fieldInfos=state.fieldInfos;  this.postingsWriter=postingsWriter;  final String termsName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,BlockTreeTermsReader.TERMS_EXTENSION);  termsOut=state.directory.createOutput(termsName,state.context);  boolean success=false;  IndexOutput indexOut=null;  try {    CodecUtil.writeIndexHeader(termsOut,BlockTreeTermsReader.TERMS_CODEC_NAME,BlockTreeTermsReader.VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);    final String indexName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,BlockTreeTermsReader.TERMS_INDEX_EXTENSION);    indexOut=state.directory.createOutput(indexName,state.context);    CodecUtil.writeIndexHeader(indexOut,BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME,BlockTreeTermsReader.VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);    postingsWriter.init(termsOut,state);    this.indexOut=indexOut;    success=true;  }  finally {    if (!success) {      IOUtils.closeWhileHandlingException(termsOut,indexOut);    }  }}  }
class C{  public static Subscription createSubscription(DataService mgr,String customerId,Product product) throws NonUniqueBusinessKeyException {  Organization supplier=product.getVendor();  return createSubscription(mgr,customerId,product.getProductId(),"mySub" + subscriptionId++,supplier);}  }
class C{  public void fireHyperlinkUpdate(HyperlinkEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == HyperlinkListener.class) {      ((HyperlinkListener)listeners[i + 1]).hyperlinkUpdate(e);    }  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (rest: ");  result.append(rest);  result.append(')');  return result.toString();}  }
class C{  public static WaveletCodec encode(BufferedImage image) throws IllegalArgumentException {  if (image == null)   throw new IllegalArgumentException("WaveletCodec.encode: null image");  int xRes=image.getWidth();  int yRes=image.getHeight();  if (!WWMath.isPowerOfTwo(xRes) || !WWMath.isPowerOfTwo(yRes))   throw new IllegalArgumentException("Image dimensions are not a power of 2");  SampleModel sampleModel=image.getSampleModel();  int numBands=sampleModel.getNumBands();  if (!(numBands == 1 || numBands == 3 || numBands == 4) || sampleModel.getDataType() != DataBuffer.TYPE_BYTE)   throw new IllegalArgumentException("Image is not of BYTE type, or not recognized as grayscale, RGB, or ARGB");  int type=getWaveletType(image);  if (!isTypeValid(type))   throw new IllegalArgumentException("Image is not recognized as grayscale, RGB, or ARGB");  int bandSize=xRes * yRes;  Raster rast=image.getRaster();  float[][] imageData=new float[numBands][bandSize];  for (int k=0; k < numBands; k++) {    rast.getSamples(0,0,xRes,yRes,k,imageData[k]);  }  float[][] workspace=new float[numBands][bandSize];  int level=0;  int xformXres=xRes;  int xformYres=yRes;  while (true) {    ++level;    if (!(xformXres > 0 || xformYres > 0))     break;    int halfXformXres=xformXres / 2;    int halfXformYres=xformYres / 2;    for (int j=0; j < xformYres; j++) {      int offset=j * yRes;      for (int i=0; i < halfXformXres; i++) {        int indx1=offset + i * 2;        int indx2=offset + i * 2 + 1;        for (int k=0; k < numBands; k++) {          float average=(imageData[k][indx1] + imageData[k][indx2]) / 2f;          float detail=imageData[k][indx1] - average;          workspace[k][offset + i]=average;          workspace[k][offset + i + halfXformXres]=detail;        }      }    }    for (int k=0; k < numBands; k++)     System.arraycopy(workspace[k],0,imageData[k],0,workspace[k].length);    for (int j=0; j < xformXres; j++) {      for (int i=0; i < halfXformYres; i++) {        int indx1=j + (i * 2) * yRes;        int indx2=j + (i * 2 + 1) * yRes;        for (int k=0; k < numBands; k++) {          float average=(imageData[k][indx1] + imageData[k][indx2]) / 2f;          float detail=imageData[k][indx1] - average;          workspace[k][j + i * yRes]=average;          workspace[k][j + (i + halfXformYres) * yRes]=detail;        }      }    }    xformXres/=2;    xformYres/=2;    for (int k=0; k < numBands; k++)     System.arraycopy(workspace[k],0,imageData[k],0,workspace[k].length);  }  WaveletCodec codec=new WaveletCodec(type,xRes,yRes);  codec.xform=new byte[numBands][bandSize];  for (int k=0; k < numBands; k++)   codec.xform[k][0]=(byte)Math.min(255,Math.max(0,Math.round(imageData[k][0])));  int scale=1;  int next=1;  while (scale < xRes) {    for (int subBlock=0; subBlock < 3; subBlock++) {      int colOffset=((subBlock % 2) == 0) ? scale : 0;      int rowOffset=(subBlock > 0) ? scale * xRes : 0;      for (int j=0; j < scale; j++) {        for (int i=0; i < scale; i++, next++) {          int indx=rowOffset + colOffset + j * xRes + i;          for (int k=0; k < numBands; k++) {            codec.xform[k][next]=(byte)Math.max(Byte.MIN_VALUE,Math.min(Byte.MAX_VALUE,Math.round(imageData[k][indx])));          }        }      }    }    scale*=2;  }  return codec;}  }
class C{  public void willCodeArguments(Environment env,Context ctx){  if (!isClientOuterField()) {    ctx.noteReference(env,target);  }  if (next != null) {    next.willCodeArguments(env,ctx);  }}  }
class C{  @Override public final short readShort() throws IOException {  dis.readFully(work,0,2);  return (short)((work[1] & 0xff) << 8 | (work[0] & 0xff));}  }
class C{  public void populate(GHPullRequest remotePR,GitHubPRPullRequest localPR,GitHubPRTrigger gitHubPRTrigger){  try {    for (    GHIssueComment remoteComment : remotePR.getComments()) {      String remoteCommentBody=remoteComment.getBody();      if (localPR.getLastCommentCreatedAt().compareTo(remoteComment.getCreatedAt()) < 0) {        GHUser remoteCommentAuthor=remoteComment.getUser();        if (!isMyselfUser(remoteCommentAuthor) && whitelistUserPattern.matcher(remoteCommentBody).matches()) {          addUserToWhitelist(remotePR.getUser().getName(),gitHubPRTrigger);        }      }    }  } catch (  IOException e) {    LOGGER.error("Can't connect retrieve comment data from GitHub",e);  }}  }
class C{  public void dispose(){  runner.clear();}  }
class C{  public void put(E item) throws InterruptedException {  if (!done.get()) {    queue.put(item);  }}  }
class C{  static void ensureProjectNameIsFree(OmniEclipseProject project,Set<OmniEclipseProject> allProjects,IProgressMonitor monitor){  String name=normalizeProjectName(project);  ensureProjectNameIsFree(name,allProjects,monitor);}  }
class C{  public Log commit(long index){  assertIsOpen();  if (index > 0) {    assertValidIndex(index);    segments.commitIndex(index);    if (storage.flushOnCommit()) {      segments.currentSegment().flush();    }  }  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void unpack() throws IOException {  File targetDir=new File(getExtractDir());  File sourceFile=new File(getDownloadDir(),getSourceFileName());  getLogger().info("Installing container [" + sourceFile + "] in ["+ targetDir.getPath()+ "]",getClass().getName());  Expand expandTask=createExpandTask();  expandTask.setSrc(sourceFile);  expandTask.setDest(targetDir);  expandTask.execute();  if (!targetDir.isDirectory()) {    throw new IOException("The file [" + sourceFile + "] is broken");  }}  }
class C{  @LogMessageDoc(level="ERROR",message="Failed to queue hint for store {storeName}",explanation="There was an error synchronizing data to " + "remote nodes",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) public void queueHint(String storeName,ByteArray key,Versioned<byte[]> value){  try {    HintKey hk=new HintKey(storeName,key);    hintLock.lock();    try {      boolean needed=!hints.containsKey(hk);      needed&=hints.doput(hk,value);      if (needed) {        hintQueue.add(hk);        hintsAvailable.signal();      }    }  finally {      hintLock.unlock();    }  } catch (  SyncException e) {    logger.error("Failed to queue hint for store " + storeName,e);  }}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  ConfigDao.dropTable(db,ifExists);  UserActionDao.dropTable(db,ifExists);  ParentDao.dropTable(db,ifExists);}  }
class C{  public static <S extends HasDragStopHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DragStopEvent event=new DragStopEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  boolean cancel(int propertyConstant){  if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {    int count=mNameValuesHolder.size();    for (int i=0; i < count; ++i) {      NameValuesHolder nameValuesHolder=mNameValuesHolder.get(i);      if (nameValuesHolder.mNameConstant == propertyConstant) {        mNameValuesHolder.remove(i);        mPropertyMask&=~propertyConstant;        return true;      }    }  }  return false;}  }
class C{  public void emitDirect(int taskId,String streamId,List<Object> tuple){  emitDirect(taskId,streamId,tuple,null);}  }
class C{  public Cut(){  super("text_transformation.cut",3,Ontology.NOMINAL);}  }
class C{  public static CompiledMethod compile(NormalMethod method){  if (VM.BuildForAdaptiveSystem) {    CompiledMethod cm;    if (!Controller.enabled) {      cm=baselineCompile(method);      ControllerMemory.incrementNumBase();    } else {      if (Controller.options.optIRC()) {        if (method.isClassInitializer() || RVMThread.getCurrentThread().getExceptionRegisters().getInUse()) {          cm=baselineCompile(method);          ControllerMemory.incrementNumBase();        } else {          AOSInstrumentationPlan instrumentationPlan=new AOSInstrumentationPlan(Controller.options,method);          CompilationPlan compPlan=new CompilationPlan(method,(OptimizationPlanElement[])optimizationPlan,instrumentationPlan,(OptOptions)options);          cm=optCompileWithFallBack(method,compPlan);        }      } else {        if ((Controller.options.BACKGROUND_RECOMPILATION && !Controller.options.ENABLE_PRECOMPILE)) {          cm=baselineCompile(method);          ControllerMemory.incrementNumBase();        } else {          if (CompilerAdviceAttribute.hasAdvice()) {            CompilerAdviceAttribute attr=CompilerAdviceAttribute.getCompilerAdviceInfo(method);            if (attr.getCompiler() != CompiledMethod.OPT) {              cm=fallback(method);              AOSLogging.logger.recordCompileTime(cm,0.0);              return cm;            }            int newCMID=-2;            CompilationPlan compPlan;            if (Controller.options.counters()) {              compPlan=InvocationCounts.createCompilationPlan(method);            } else {              compPlan=Controller.recompilationStrategy.createCompilationPlan(method,attr.getOptLevel(),null);            }            AOSLogging.logger.recompilationStarted(compPlan);            newCMID=recompileWithOpt(compPlan);            cm=newCMID == -1 ? null : CompiledMethods.getCompiledMethod(newCMID);            if (newCMID == -1) {              AOSLogging.logger.recompilationAborted(compPlan);            } else             if (newCMID > 0) {              AOSLogging.logger.recompilationCompleted(compPlan);            }            if (cm == null) {              cm=baselineCompile(method);              ControllerMemory.incrementNumBase();            }          } else {            ControllerPlan plan=ControllerMemory.findLatestPlan(method);            if (plan == null || plan.getStatus() != ControllerPlan.IN_PROGRESS) {              cm=baselineCompile(method);              ControllerMemory.incrementNumBase();            } else {              cm=plan.doRecompile();              if (cm == null) {                cm=baselineCompile(method);              }            }          }        }      }    }    if ((Controller.options.ENABLE_ADVICE_GENERATION) && (cm.getCompilerType() == CompiledMethod.BASELINE) && Controller.enabled) {      AOSGenerator.baseCompilationCompleted(cm);    }    AOSLogging.logger.recordCompileTime(cm,0.0);    return cm;  } else {    return baselineCompile(method);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void showPopupUnchecked(int maxActivityCount){  if (mAdapter.getDataModel() == null) {    throw new IllegalStateException("No data model. Did you call #setDataModel?");  }  getViewTreeObserver().addOnGlobalLayoutListener(mOnGlobalLayoutListener);  final boolean defaultActivityButtonShown=mDefaultActivityButton.getVisibility() == VISIBLE;  final int activityCount=mAdapter.getActivityCount();  final int maxActivityCountOffset=defaultActivityButtonShown ? 1 : 0;  if (maxActivityCount != ActivityChooserViewAdapter.MAX_ACTIVITY_COUNT_UNLIMITED && activityCount > maxActivityCount + maxActivityCountOffset) {    mAdapter.setShowFooterView(true);    mAdapter.setMaxActivityCount(maxActivityCount - 1);  } else {    mAdapter.setShowFooterView(false);    mAdapter.setMaxActivityCount(maxActivityCount);  }  ListPopupWindow popupWindow=getListPopupWindow();  if (!popupWindow.isShowing()) {    if (mIsSelectingDefaultActivity || !defaultActivityButtonShown) {      mAdapter.setShowDefaultActivity(true,defaultActivityButtonShown);    } else {      mAdapter.setShowDefaultActivity(false,false);    }    final int contentWidth=Math.min(mAdapter.measureContentWidth(),mListPopupMaxWidth);    popupWindow.setContentWidth(contentWidth);    popupWindow.show();    if (mProvider != null) {      mProvider.subUiVisibilityChanged(true);    }    popupWindow.getListView().setContentDescription(mContext.getString(R.string.activitychooserview_choose_application));  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:52.574 -0400",hash_original_method="148392FC8CA03B9EFECB202A68AE28AE",hash_generated_method="CE0EE09920B5212A4945C1129DC818D5") @Override public void changeCursor(Cursor c){  if (DBG)   Log.d(LOG_TAG,"changeCursor(" + c + ")");  if (mClosed) {    Log.w(LOG_TAG,"Tried to change cursor after adapter was closed.");    if (c != null)     c.close();    return;  }  try {    super.changeCursor(c);    if (c != null) {      mText1Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_1);      mText2Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2);      mText2UrlCol=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2_URL);      mIconName1Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_ICON_1);      mIconName2Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_ICON_2);      mFlagsCol=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_FLAGS);    }  } catch (  Exception e) {    Log.e(LOG_TAG,"error changing cursor and caching columns",e);  }}  }
class C{  public static void moveToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!src.exists()) {    throw new FileNotFoundException("Source '" + src + "' does not exist");  }  if (src.isDirectory()) {    moveDirectoryToDirectory(src,destDir,createDestDir);  } else {    moveFileToDirectory(src,destDir,createDestDir);  }}  }
class C{  public boolean isDefaultNamespace(String namespaceURI){  return false;}  }
class C{  public AsyncResult CancelAsync(CancelRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public SrvParameter(String name,QName qname,ParameterMode mode,Object value){  this.name=name;  this.qname=qname;  this.mode=mode;  this.value=value;}  }
class C{  public Wine runForeground(String workingDirectory,String executableToRun,List<String> arguments,Map<String,String> environment) throws CancelException {  return runForeground(new File(workingDirectory),executableToRun,arguments,environment);}  }
class C{  public static boolean isXMLNSDecl(String attRawName){  return (attRawName.startsWith("xmlns") && (attRawName.equals("xmlns") || attRawName.startsWith("xmlns:")));}  }
class C{  public IRole build() throws MissingPermissionsException, RateLimitException, DiscordException {  if (guild == null)   throw new RuntimeException("A guild must be set to create a role.");  IRole role=guild.createRole();  if (color != null)   role.changeColor(color);  if (name != null)   role.changeName(name);  if (permissions != null)   role.changePermissions(permissions);  role.changeHoist(hoist);  role.changeMentionable(mentionable);  return role;}  }
class C{  public void stateChanged(ChangeEvent ce){  currentSize=slider.getValue() * 25;  transition.start();}  }
class C{  public void pad(int byte_size){  for (int i=0; i < byte_size; i++)   bb.put(--space,(byte)0);}  }
class C{  public void discoverStorageSystem(URI uri,boolean unmanaged){  try {    Task<StorageSystemRestRep> rep=client.storageSystems().discover(uri,(unmanaged ? "UNMANAGED_VOLUMES" : "ALL"));    log.info(String.format("Last discovery %s at %s status %s",rep.get().getNativeGuid(),rep.get().getLastMeteringRunTime(),rep.get().getLastDiscoveryStatusMessage()));  } catch (  ServiceErrorException ex) {    log.error("Exception discovering storage system " + ex.getMessage(),ex);    throw ex;  }}  }
class C{  public static boolean isReadDataCache(Context context,String cachefile){  return readObject(context,cachefile) != null;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean inPaintedArea(Point2D pt){  Shape painted=getPaintedArea();  if (painted == null)   return false;  return painted.contains(pt);}  }
class C{  @Override public void seek(long pos) throws IOException {  throw new IOException("not supported");}  }
class C{  public static boolean isThereWorkAtLocation(Train train,Location location){  if (isThereWorkAtLocation(train,location,CarManager.instance().getList(train))) {    return true;  }  if (isThereWorkAtLocation(train,location,EngineManager.instance().getList(train))) {    return true;  }  return false;}  }
class C{  EntityView<IEntity> addEntity(final IEntity entity){  final EntityView<IEntity> view=EntityViewFactory.create(entity);  if (view != null) {    entities.put(entity,view);    addEntityView(view);  }  return view;}  }
class C{  public boolean eventOccured(SpecEvent event){  if (event.getType() != SpecEvent.TYPE_PARSE) {    return true;  }  if (!Activator.getDefault().getPreferenceStore().getBoolean(EditorPreferencePage.CLEAR_DECLARATION_USE_MARKERS_ON_PARSE)) {    return true;  }  Spec spec=event.getSpec();  String moduleName=spec.getModuleToShow();  if (moduleName == null) {    return true;  }  IResource resource=ResourceHelper.getResourceByModuleName(moduleName);  if (resource == null) {    return true;  }  try {    resource.deleteMarkers(ShowUsesHandler.SHOW_USE_MARKER_TYPE,false,99);  } catch (  CoreException e) {  }  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @LargeTest public void testThumbnailListMPEG4QCIF() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";  final int tnCount=10;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=mediaVideoItem.getWidth() / 2;  final int outHeight=mediaVideoItem.getHeight() / 2;  final long startTime=mediaVideoItem.getDuration() / 2;  final long endTime=mediaVideoItem.getDuration();  final Bitmap thumbNailBmp[]=mediaVideoItem.getThumbnailList(outWidth,outHeight,startTime,endTime,tnCount);  assertNotNull("Thumbnail Retrived is Null",thumbNailBmp);  assertEquals("Thumbnail Count",tnCount,thumbNailBmp.length);  for (int i=0; i < thumbNailBmp.length; i++) {    validateThumbnail(thumbNailBmp[i],outWidth,outHeight);    thumbNailBmp[i]=null;  }}  }
class C{  private static boolean isOverridable(Method method,Class targetClass){  if (Modifier.isPrivate(method.getModifiers())) {    return false;  }  if (Modifier.isPublic(method.getModifiers()) || Modifier.isProtected(method.getModifiers())) {    return true;  }  return getPackageName(method.getDeclaringClass()).equals(getPackageName(targetClass));}  }
class C{  public static double blackFormulaImpliedStdDev(final Option.Type optionType,@Real double strike,@Real double forward,@Real final double blackPrice,@DiscountFactor final double discount,@Real double guess,@Real final double accuracy,@Real final double displacement){  final int maxIterations=100;  QL.require(strike >= 0.0,"strike must be non-negative");  QL.require(forward > 0.0,"forward must be positive");  QL.require(displacement >= 0.0,"displacement must be non-negative");  QL.require(blackPrice >= 0.0,"blackPrice must be non-negative");  QL.require(discount > 0.0,"discount must be positive");  strike=strike + displacement;  forward=forward + displacement;  if (Double.isNaN(guess))   guess=blackFormulaImpliedStdDevApproximation(optionType,strike,forward,blackPrice,discount,displacement); else   if (guess < 0.0)   throw new IllegalArgumentException("stddev guess (" + guess + ") must be non-negative");  final BlackImpliedStdDevHelper f=new BlackImpliedStdDevHelper(optionType,strike,forward,blackPrice / discount);  final NewtonSafe solver=new NewtonSafe();  solver.setMaxEvaluations(maxIterations);  final double minSdtDev=0.0, maxstddev=3.0;  final double stddev=solver.solve(f,accuracy,guess,minSdtDev,maxstddev);  if (stddev >= 0.0)   return stddev;  throw new ArithmeticException("a negative value was calculated");}  }
class C{  public FastAdapterDialog<Item> withOnScrollListener(RecyclerView.OnScrollListener listener){  mRecyclerView.addOnScrollListener(listener);  return this;}  }
class C{  private void resortLinks(){  if (this.resorted)   return;synchronized (this) {    if (this.resorted)     return;    String u;    int extpos, qpos;    String ext=null;    final String thishost=this.source.getHost();    this.inboundlinks=new LinkedHashMap<DigestURL,String>();    this.outboundlinks=new LinkedHashMap<DigestURL,String>();    this.hyperlinks=new LinkedHashMap<AnchorURL,String>();    this.videolinks=new LinkedHashMap<AnchorURL,String>();    this.audiolinks=new LinkedHashMap<AnchorURL,String>();    this.applinks=new LinkedHashMap<AnchorURL,String>();    this.emaillinks=new LinkedHashSet<AnchorURL>();    final Map<AnchorURL,ImageEntry> collectedImages=new HashMap<AnchorURL,ImageEntry>();    for (    final Map.Entry<DigestURL,ImageEntry> entry : this.images.entrySet()) {      if (entry.getKey() != null && entry.getKey().getHost() != null && entry.getKey().getHost().equals(thishost))       this.inboundlinks.put(entry.getKey(),"image"); else       this.outboundlinks.put(entry.getKey(),"image");    }    for (    final AnchorURL url : this.anchors) {      if (url == null)       continue;      u=url.toNormalform(true);      final String name=url.getNameProperty();      if (url.getProtocol().equals("mailto")) {        this.emaillinks.add(url);        continue;      }      final boolean noindex=url.getRelProperty().toLowerCase().indexOf("noindex",0) >= 0;      final boolean nofollow=url.getRelProperty().toLowerCase().indexOf("nofollow",0) >= 0;      if ((thishost == null && url.getHost() == null) || ((thishost != null && url.getHost() != null) && (url.getHost().endsWith(thishost) || (thishost.startsWith("www.") && url.getHost().endsWith(thishost.substring(4)))))) {        this.inboundlinks.put(url,"anchor" + (noindex ? " noindex" : "") + (nofollow ? " nofollow" : ""));      } else {        this.outboundlinks.put(url,"anchor" + (noindex ? " noindex" : "") + (nofollow ? " nofollow" : ""));      }      extpos=u.lastIndexOf('.');      if (extpos > 0) {        if (((qpos=u.indexOf('?')) >= 0) && (qpos > extpos)) {          ext=u.substring(extpos + 1,qpos).toLowerCase();        } else {          ext=u.substring(extpos + 1).toLowerCase();        }        if (Classification.isMediaExtension(ext)) {          if (Classification.isImageExtension(ext)) {            collectedImages.put(url,new ImageEntry(url,name,-1,-1,-1));          } else           if (Classification.isAudioExtension(ext))           this.audiolinks.put(url,name); else           if (Classification.isVideoExtension(ext))           this.videolinks.put(url,name); else           if (Classification.isApplicationExtension(ext))           this.applinks.put(url,name);        }      }      this.hyperlinks.put(url,name);    }    this.images.putAll(collectedImages);    this.hyperlinks.putAll(allReflinks(this.images.values()));    this.hyperlinks.putAll(allReflinks(this.audiolinks.keySet()));    this.hyperlinks.putAll(allReflinks(this.videolinks.keySet()));    this.hyperlinks.putAll(allReflinks(this.applinks.keySet()));    this.resorted=true;  }}  }
class C{  public VfsStream(OutputStream os){  init(null,os);}  }
class C{  public void testReceive_UnconnectedBufNotEmpty() throws Exception {  assertFalse(this.channel1.isConnected());  ByteBuffer dst=ByteBuffer.allocateDirect(CAPACITY_NORMAL);  dst.put((byte)88);  assertEquals(dst.position() + CAPACITY_NORMAL - 1,dst.limit());  assertNull(this.channel1.receive(dst));}  }
class C{  private void validatePatch(State current,State patch){  ValidationUtils.validatePatch(current,patch);}  }
class C{  public static String toDecimal(boolean value){  if (value)   return "1.00";  return "0.00";}  }
class C{  public static File resolveWorkDirectory(String path,boolean delIfExist) throws IgniteCheckedException {  File dir=new File(path);  if (!dir.isAbsolute()) {    String ggWork0=igniteWork;    if (F.isEmpty(ggWork0))     throw new IgniteCheckedException("Failed to resolve path (work directory has not been set): " + path);    dir=new File(ggWork0,dir.getPath());  }  if (delIfExist && dir.exists()) {    if (!U.delete(dir))     throw new IgniteCheckedException("Failed to delete directory: " + dir);  }  if (!mkdirs(dir))   throw new IgniteCheckedException("Directory does not exist and cannot be created: " + dir);  if (!dir.canRead())   throw new IgniteCheckedException("Cannot read from directory: " + dir);  if (!dir.canWrite())   throw new IgniteCheckedException("Cannot write to directory: " + dir);  return dir;}  }
class C{  public static int compile(String[] args,PrintWriter out){  com.sun.tools.javac.main.Main compiler=new com.sun.tools.javac.main.Main("javac",out);  return compiler.compile(args).exitCode;}  }
class C{  public void createMessage(Message message){  messageRepository.save(message);  if (message.getToUser() != null) {    incUserUnreadMessages(message.getToUser().getId());  }}  }
class C{  protected RowView createTableRow(Element elem){  Object o=elem.getAttributes().getAttribute(StyleConstants.NameAttribute);  if (o == HTML.Tag.TR) {    return new RowView(elem);  }  return null;}  }
class C{  public static JMenu createMoreOptions(TableSettings settings){  JMenu options=new SkinMenu(MORE_OPTIONS);  addSetting(options,SORTING,settings.REAL_TIME_SORT);  addSetting(options,TOOLTIPS,settings.DISPLAY_TOOLTIPS);  return options;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    int s=t.getSort();    if (s == Type.OBJECT) {      return newClassItem(t.getInternalName());    } else     if (s == Type.METHOD) {      return newMethodTypeItem(t.getDescriptor());    } else {      return newClassItem(t.getDescriptor());    }  } else   if (cst instanceof Handle) {    Handle h=(Handle)cst;    return newHandleItem(h.tag,h.owner,h.name,h.desc);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < length()) {    set(index,value);  } else {    while (index != length()) {      put(JSONObject.NULL);    }    put(value);  }  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.FUNCTION_BLOCK_MAPPING_RULE;}  }
class C{  public void addRenderingHints(Map hints){  gc.addRenderingHints(hints);}  }
class C{  private void updateSnapshot(Snapshot snapObj,DbClient dbClient,StringBuilder logMsgBuilder,VNXeApiClient vnxeApiClient){  VNXeFileSystemSnap vnxeSnap=null;  vnxeSnap=vnxeApiClient.getSnapshotByName(snapObj.getName());  if (vnxeSnap != null) {    snapObj.setInactive(false);    snapObj.setCreationTime(Calendar.getInstance());    snapObj.setNativeId(vnxeSnap.getId());    String path="/" + snapObj.getName();    snapObj.setMountPath(path);    snapObj.setPath(path);    try {      snapObj.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(dbClient,snapObj));    } catch (    IOException e) {      logMsgBuilder.append("/n");      logMsgBuilder.append("Exception while setting snapshot's nativeGuid");      logMsgBuilder.append(e.getMessage());    }    logMsgBuilder.append("/n");    logMsgBuilder.append(String.format("Create file system snapshot successfully for NativeId: %s, URI: %s",snapObj.getNativeId(),getTaskCompleter().getId()));    dbClient.persistObject(snapObj);  } else {    logMsgBuilder.append("Could not get newly created snapshot in the VNXe, using the snapshot name: ");    logMsgBuilder.append(snapObj.getName());  }}  }
class C{  private static void MIROptimizations(ArrayList<OptimizationPlanElement> p){  composeComponents(p,"Register Mapping",new Object[]{new RewriteMemoryOperandsWithOversizedDisplacements(),new MIRSplitRanges(),new ExpandCallingConvention(),new ExpandFPRStackConvention(),new LiveAnalysis(true,false),new RegisterAllocator(),new PrologueEpilogueCreator()});  addComponent(p,new MIRBranchOptimizations(1));}  }
class C{  private static void applyRlimitSecurityPolicy(Arguments args,Credentials peer,String peerSecurityContext) throws ZygoteSecurityException {  int peerUid=peer.getUid();  if (!(peerUid == 0 || peerUid == Process.SYSTEM_UID)) {    if (args.rlimits != null) {      throw new ZygoteSecurityException("This UID may not specify rlimits.");    }  }  if (args.rlimits != null) {    boolean allowed=SELinux.checkSELinuxAccess(peerSecurityContext,peerSecurityContext,"zygote","specifyrlimits");    if (!allowed) {      throw new ZygoteSecurityException("Peer may not specify rlimits");    }  }}  }
class C{  private void updateTypes(@Nonnull TurnoutOperation op){  if (!initialized)   initialize();  LinkedList<TurnoutOperation> newTypes=new LinkedList<TurnoutOperation>();  Iterator<TurnoutOperation> iter=operationTypes.iterator();  boolean found=false;  while (iter.hasNext()) {    TurnoutOperation item=iter.next();    if (item.getClass() == op.getClass()) {      newTypes.add(op);      found=true;      log.debug("replacing definitive instance of " + item.getClass());    } else {      newTypes.add(item);    }  }  if (!found) {    newTypes.add(op);    log.debug("adding definitive instance of " + op.getClass());  }  operationTypes=newTypes;}  }
class C{  @Override public void updateBlob(int columnIndex,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBlob(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createBlob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void addObservations(int[] source,int[] dest,int startTime,int endTime){  if ((endTime - startTime) - startObservationTime + 1 <= 0) {    return;  }  if ((endTime >= dest.length) || (endTime >= source.length)) {    throw new ArrayIndexOutOfBoundsException(String.format("endTime (%d) must be <= length of input arrays (dest: %d, source: %d)",endTime,dest.length,source.length));  }  observations+=(endTime - startTime) - startObservationTime + 1;  int[] pastVal=new int[destEmbeddingDelay];  for (int d=0; d < destEmbeddingDelay; d++) {    pastVal[d]=0;    for (int p=0; p < k - 1; p++) {      pastVal[d]+=dest[startTime + startObservationTime + d - 1 - (k - 1) * destEmbeddingDelay + p * destEmbeddingDelay];      pastVal[d]*=base;    }  }  int[] sourcePastVal=new int[sourceEmbeddingDelay];  for (int d=0; d < sourceEmbeddingDelay; d++) {    sourcePastVal[d]=0;    for (int p=0; p < sourceHistoryEmbedLength - 1; p++) {      sourcePastVal[d]+=source[startTime + startObservationTime + d - delay - (sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay + p * sourceEmbeddingDelay];      sourcePastVal[d]*=base;    }  }  int destVal, destEmbeddingPhase=0, sourceEmbeddingPhase=0;  for (int r=startTime + startObservationTime; r <= endTime; r++) {    if (k > 0) {      pastVal[destEmbeddingPhase]+=dest[r - 1];    }    sourcePastVal[sourceEmbeddingPhase]+=source[r - delay];    destVal=dest[r];    int thisPastVal=pastVal[destEmbeddingPhase];    int thisSourceVal=sourcePastVal[sourceEmbeddingPhase];    sourceNextPastCount[thisSourceVal][destVal][thisPastVal]++;    sourcePastCount[thisSourceVal][thisPastVal]++;    nextPastCount[destVal][thisPastVal]++;    pastCount[thisPastVal]++;    nextCount[destVal]++;    if (k > 0) {      pastVal[destEmbeddingPhase]-=maxShiftedValue[dest[r - 1 - (k - 1) * destEmbeddingDelay]];      pastVal[destEmbeddingPhase]*=base;    }    sourcePastVal[sourceEmbeddingPhase]-=maxShiftedSourceValue[source[r - delay - (sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay]];    sourcePastVal[sourceEmbeddingPhase]*=base;    destEmbeddingPhase=(destEmbeddingPhase + 1) % destEmbeddingDelay;    sourceEmbeddingPhase=(sourceEmbeddingPhase + 1) % sourceEmbeddingDelay;  }}  }
class C{  private static void insertionSortReverse(double[] keys,int[] vals,final int start,final int end){  for (int i=start + 1; i < end; i++) {    for (int j=i; j > start; j--) {      if (keys[j] <= keys[j - 1]) {        break;      }      swap(keys,vals,j,j - 1);    }  }}  }
class C{  private void tearDown(){  pendingMessages.add("*************************Tear Down*************************");  ExamplePubsubTopicAndSubscriptionOptions pubsubOptions=options.as(ExamplePubsubTopicAndSubscriptionOptions.class);  if (!pubsubOptions.getPubsubTopic().isEmpty()) {    try {      deletePubsubTopic(pubsubOptions.getPubsubTopic());      pendingMessages.add("The Pub/Sub topic has been deleted: " + pubsubOptions.getPubsubTopic());    } catch (    IOException e) {      pendingMessages.add("Failed to delete the Pub/Sub topic : " + pubsubOptions.getPubsubTopic());    }    if (!pubsubOptions.getPubsubSubscription().isEmpty()) {      try {        deletePubsubSubscription(pubsubOptions.getPubsubSubscription());        pendingMessages.add("The Pub/Sub subscription has been deleted: " + pubsubOptions.getPubsubSubscription());      } catch (      IOException e) {        pendingMessages.add("Failed to delete the Pub/Sub subscription : " + pubsubOptions.getPubsubSubscription());      }    }  }  ExampleBigQueryTableOptions bigQueryTableOptions=options.as(ExampleBigQueryTableOptions.class);  if (bigQueryTableOptions.getBigQueryDataset() != null && bigQueryTableOptions.getBigQueryTable() != null && bigQueryTableOptions.getBigQuerySchema() != null) {    pendingMessages.add("The BigQuery table might contain the example's output, " + "and it is not deleted automatically: " + bigQueryTableOptions.getProject() + ":"+ bigQueryTableOptions.getBigQueryDataset()+ "."+ bigQueryTableOptions.getBigQueryTable());    pendingMessages.add("Please go to the Developers Console to delete it manually." + " Otherwise, you may be charged for its usage.");  }}  }
class C{  public static float svgOtherCoordinateToUserSpace(String s,String attr,Context ctx){  return svgToUserSpace(s,attr,OTHER_LENGTH,ctx);}  }
class C{  public void waitForExit() throws IOException {  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  try {    thread.setContextClassLoader(_systemManager.getClassLoader());    _waitForExitService=new WaitForExitService(this,_systemManager);    _waitForExitService.waitForExit();  }  finally {    thread.setContextClassLoader(oldLoader);  }}  }
class C{  protected double[] distributionForInstanceMax(Instance instance) throws Exception {  double[] probs=new double[instance.numClasses()];  double numPredictions=0;  for (int i=0; i < m_Classifiers.length; i++) {    double[] dist=getClassifier(i).distributionForInstance(instance);    if (!instance.classAttribute().isNumeric() || !Utils.isMissingValue(dist[0])) {      for (int j=0; j < dist.length; j++) {        if ((probs[j] < dist[j]) || (numPredictions == 0)) {          probs[j]=dist[j];        }      }      numPredictions++;    }  }  for (int i=0; i < m_preBuiltClassifiers.size(); i++) {    double[] dist=m_preBuiltClassifiers.get(i).distributionForInstance(instance);    if (!instance.classAttribute().isNumeric() || !Utils.isMissingValue(dist[0])) {      for (int j=0; j < dist.length; j++) {        if ((probs[j] < dist[j]) || (numPredictions == 0)) {          probs[j]=dist[j];        }      }      numPredictions++;    }  }  if (instance.classAttribute().isNumeric()) {    if (numPredictions == 0) {      probs[0]=Utils.missingValue();    }  } else {    if (Utils.sum(probs) > 0) {      Utils.normalize(probs);    }  }  return probs;}  }
class C{  public static boolean isConnectedMobile(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tWhether to use K2 prior.\n","k2",0,"-k2"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public void loadBuiltinStrings(){  loadBuiltinStrings("us");}  }
class C{  public String toString(){  return name;}  }
class C{  public static void handleCrashesOnThisThread(){  Thread.currentThread().setUncaughtExceptionHandler(null);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case NODE_ID:  return isSetNodeId();case AUTH_SCHEME:return isSetAuthScheme();case AUTH_CHALLENGE_RESPONSE:return isSetAuthChallengeResponse();}throw new IllegalStateException();}  }
class C{  public static void printLine(){  if (!isDisabled()) {    print(LINE_SEPARATOR);  }}  }
class C{  public final static String base64Encode(String str){  if (str == null) {    return null;  }  return new String(base64Encode(str.getBytes()));}  }
class C{  public Jerry add(String selector){  return new Jerry(this,nodes,root().find(selector).nodes);}  }
class C{  public Name findName(int firstQuad,int secondQuad){  int hash=calcHash(firstQuad,secondQuad);  int ix=(hash & _mainHashMask);  int val=_mainHash[ix];  if ((((val >> 8) ^ hash) << 8) == 0) {    Name name=_mainNames[ix];    if (name == null) {      return null;    }    if (name.equals(firstQuad,secondQuad)) {      return name;    }  } else   if (val == 0) {    return null;  }  val&=0xFF;  if (val > 0) {    val-=1;    Bucket bucket=_collList[val];    if (bucket != null) {      return bucket.find(hash,firstQuad,secondQuad);    }  }  return null;}  }
class C{  public static Gender other(){  return new Gender(OTHER);}  }
class C{  public static NumericEntityEscaper above(final int codepoint){  return outsideOf(0,codepoint);}  }
class C{  public List<Event> serialize(Node data){  SilentEmitter emitter=new SilentEmitter();  Serializer serializer=new Serializer(emitter,resolver,dumperOptions,null);  try {    serializer.open();    serializer.serialize(data);    serializer.close();  } catch (  IOException e) {    throw new YAMLException(e);  }  return emitter.getEvents();}  }
class C{  private void updateStatus(int status,String action){  if (status != mStatus) {    int old=mStatus;    mStatus=status;    mXmppStatus.setState(status);    mStatusAction=action;    Log.i("broadcasting state transition from " + statusAsString(old) + " to "+ statusAsString(status)+ " via Intent "+ MainService.ACTION_XMPP_CONNECTION_CHANGED);    broadcastStatus(mContext,old,status,action);  }}  }
class C{  public ProcessTerminatedAbnormallyException(final int exitValue,final String message){  super(message);  this.exitValue=exitValue;}  }
class C{  static String add_escapes(String str){  StringBuilder retval=new StringBuilder();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  private boolean processRedirectResponse(final HttpMethod method) throws RedirectException {  Header locationHeader=method.getResponseHeader("location");  if (locationHeader == null) {    LOG.error("Received redirect response " + method.getStatusCode() + " but no location header");    return false;  }  String location=locationHeader.getValue();  if (LOG.isDebugEnabled()) {    LOG.debug("Redirect requested to location '" + location + "'");  }  URI redirectUri=null;  URI currentUri=null;  try {    currentUri=new URI(this.conn.getProtocol().getScheme(),null,this.conn.getHost(),this.conn.getPort(),method.getPath());    String charset=method.getParams().getUriCharset();    redirectUri=new URI(location,true,charset);    if (redirectUri.isRelativeURI()) {      if (this.params.isParameterTrue(HttpClientParams.REJECT_RELATIVE_REDIRECT)) {        LOG.warn("Relative redirect location '" + location + "' not allowed");        return false;      } else {        LOG.debug("Redirect URI is not absolute - parsing as relative");        redirectUri=new URI(currentUri,redirectUri);      }    } else {      method.getParams().setDefaults(this.params);    }    method.setURI(redirectUri);    hostConfiguration.setHost(redirectUri);  } catch (  URIException ex) {    throw new InvalidRedirectLocationException("Invalid redirect location: " + location,location,ex);  }  if (this.params.isParameterFalse(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS)) {    if (this.redirectLocations == null) {      this.redirectLocations=new HashSet<URI>();    }    this.redirectLocations.add(currentUri);    try {      if (redirectUri.hasQuery()) {        redirectUri.setQuery(null);      }    } catch (    URIException e) {      return false;    }    if (this.redirectLocations.contains(redirectUri)) {      throw new CircularRedirectException("Circular redirect to '" + redirectUri + "'");    }  }  if (LOG.isDebugEnabled()) {    LOG.debug("Redirecting from '" + currentUri.getEscapedURI() + "' to '"+ redirectUri.getEscapedURI());  }  method.getHostAuthState().invalidate();  method.getProxyAuthState().invalidate();  return true;}  }
class C{  public SymmetryHandler(NodeIterator[] mapping,Motif motif,Node[] mappedNodes){  PQmap=new PriorityQueueMap(mapping.length);  this.mapping=mapping;  this.motif=motif;  mappedPositions=new HashSet<Integer>(mappedNodes.length);  this.mappedNodes=mappedNodes;  smaller=new HashMap<Integer,Set<Integer>>();  larger=new HashMap<Integer,Set<Integer>>();  SymProp sp=analyseMotif(motif);}  }
class C{  public static ContentValues values(ContentValues vals,User user){  vals.put(GLOBAL_ID,user.globalId);  vals.put(EMAIL_HASH,user.emailHash);  vals.put(FOLLOWING,user.isFollowing ? 1 : 0);  vals.put(COLOR,defaultColor());  vals.put(STATUS_ID,user.status.id);  vals.put(DIRTY,0);  return vals;}  }
class C{  private void addLoader(ClassLoader loader){  for (int i=_loaders.size() - 1; i >= 0; i--) {    WeakReference<ClassLoader> ref=_loaders.get(i);    ClassLoader refLoader=ref.get();    if (refLoader == null)     _loaders.remove(i);    if (refLoader == loader)     return;  }  _loaders.add(new WeakReference<ClassLoader>(loader));  EnvLoader.addClassLoaderListener(this,loader);}  }
class C{  public static String replaceStrings(String properties,String property,String value){  StringBuilder sb=new StringBuilder();  int start=0;  int index=properties.indexOf(property);  while (index != -1) {    sb.append(properties.substring(start,index));    sb.append(value);    start=index + property.length();    index=properties.indexOf(property,start);  }  sb.append(properties.substring(start));  return sb.toString();}  }
class C{  public int run(String[] argv) throws Exception {  Args args=new Args();  CmdLineParser parser=new CmdLineParser(args,ParserProperties.defaults().withUsageWidth(100));  try {    parser.parseArgument(argv);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    parser.printUsage(System.err);    return -1;  }  LOG.info("Tool: " + ComputeCooccurrenceMatrixPairs.class.getSimpleName());  LOG.info(" - input path: " + args.input);  LOG.info(" - output path: " + args.output);  LOG.info(" - window: " + args.window);  LOG.info(" - number of reducers: " + args.numReducers);  Job job=Job.getInstance(getConf());  job.setJobName(ComputeCooccurrenceMatrixPairs.class.getSimpleName());  job.setJarByClass(ComputeCooccurrenceMatrixPairs.class);  Path outputDir=new Path(args.output);  FileSystem.get(getConf()).delete(outputDir,true);  job.getConfiguration().setInt("window",args.window);  job.setNumReduceTasks(args.numReducers);  FileInputFormat.setInputPaths(job,new Path(args.input));  FileOutputFormat.setOutputPath(job,new Path(args.output));  job.setMapOutputKeyClass(PairOfStrings.class);  job.setMapOutputValueClass(IntWritable.class);  job.setOutputKeyClass(PairOfStrings.class);  job.setOutputValueClass(IntWritable.class);  job.setMapperClass(MyMapper.class);  job.setCombinerClass(MyReducer.class);  job.setReducerClass(MyReducer.class);  job.setPartitionerClass(MyPartitioner.class);  long startTime=System.currentTimeMillis();  job.waitForCompletion(true);  System.out.println("Job Finished in " + (System.currentTimeMillis() - startTime) / 1000.0 + " seconds");  return 0;}  }
class C{  public StringPropertyMatcherBuilder message(){  return new StringPropertyMatcherBuilder(this,"message",null);}  }
class C{  public void testCase3(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3};  int aSign=1;  int bSign=-1;  byte rBytes[]={11,22,33,44,55,66,77,11,22,33};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public static PageRankNode create(byte[] bytes) throws IOException {  return create(new DataInputStream(new ByteArrayInputStream(bytes)));}  }
class C{  public Object allocateConnection(ManagedConnectionFactory mcf,ConnectionRequestInfo cxRequestInfo) throws ResourceException {  FBManagedConnection mc=(FBManagedConnection)mcf.createManagedConnection(null,cxRequestInfo);  mc.setManagedEnvironment(false);  mc.setConnectionSharing(false);  mc.addConnectionEventListener(this);  return mc.getConnection(null,cxRequestInfo);}  }
class C{  public HistoryReadRequest clone(){  HistoryReadRequest result=new HistoryReadRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.HistoryReadDetails=HistoryReadDetails;  result.TimestampsToReturn=TimestampsToReturn;  result.ReleaseContinuationPoints=ReleaseContinuationPoints;  if (NodesToRead != null) {    result.NodesToRead=new HistoryReadValueId[NodesToRead.length];    for (int i=0; i < NodesToRead.length; i++)     result.NodesToRead[i]=NodesToRead[i].clone();  }  return result;}  }
class C{  public JsonObject add(String name,long value){  add(name,Json.value(value));  return this;}  }
class C{  protected void addNewDocument(String name,int parentId,String fileExt,int sortOrder,String pathDocumentFile,String pathDocAnnFile) throws Exception {  FolderTokenDocument doc;  int id;  id=super.generateNextNewNodeId();  doc=new FolderTokenDocument(id,name,parentId,id,fileExt,sortOrder,pathDocumentFile,pathDocAnnFile,FolderEditFlag.NEW);  super.add(doc);}  }
class C{  public XBeeAddress64(int b1,int b2,int b3,int b4,int b5,int b6,int b7,int b8){  address=new int[8];  address[0]=b1;  address[1]=b2;  address[2]=b3;  address[3]=b4;  address[4]=b5;  address[5]=b6;  address[6]=b7;  address[7]=b8;}  }
class C{  public void resume(boolean withAnimation){  if (mState == STATE_PAUSE) {    mState=STATE_PLAYING;    return;  }  mState=STATE_PLAYING;  if (!withAnimation) {    for (int i=0; i < mBlockNumber; i++) {      mDestinationValues[i].setPosition(mContentHeight * mBlockValues[i][mDrawPass]);      changeDynamicsTarget(i,mContentHeight * mBlockValues[i][mDrawPass]);    }  }}  }
class C{  protected HttpCookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  HttpCookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableHttpCookie)objectInputStream.readObject()).getCookie();  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in decodeCookie",e);  }catch (  ClassNotFoundException e) {    Log.d(LOG_TAG,"ClassNotFoundException in decodeCookie",e);  }  return cookie;}  }
class C{  private int extractInt(String key,CSVRecord record) throws FormatException {  if (record.isMapped(key) == false) {    throw new FormatException("Field not used but expected: " + key);  }  try {    return Integer.parseInt(record.get(key));  } catch (  NumberFormatException e) {    throw new FormatException("Failed to parse field: " + key,e);  }}  }
class C{  public static boolean reflectionEquals(Object lhs,Object rhs,boolean testTransients,Class reflectUpToClass){  return reflectionEquals(lhs,rhs,testTransients,reflectUpToClass,null);}  }
class C{  private boolean hasValidData(){  validateData();  return canLeave();}  }
class C{  public static String readFromFile(File file) throws IOException {  BufferedReader bufferedReader=new BufferedReader(new FileReader(file));  StringBuilder content=new StringBuilder();  String line;  while ((line=bufferedReader.readLine()) != null) {    content.append(line).append("\n");  }  bufferedReader.close();  return content.toString().trim();}  }
class C{  public boolean shouldShowPrimingMessage(){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(safeActivity());  boolean value=sharedPreferences.getBoolean(ALLOWME_SHOULD_SHOW_PRIMING_KEY,true);  sharedPreferences.edit().putBoolean(ALLOWME_SHOULD_SHOW_PRIMING_KEY,false).apply();  return value;}  }
class C{  private static Request eclipseClassRequest(Class<?> clazz){  return Request.classes(clazz);}  }
class C{  private static String toStringValue(Object headerValue){  return headerValue instanceof Enum<?> ? FieldInfo.of((Enum<?>)headerValue).getName() : headerValue.toString();}  }
class C{  public void testManufacturerIntentFilter(){  boolean result=false;  Context context=mSettings.getApplicationContext();  PackageManager pm=context.getPackageManager();  Intent intent=new Intent(INTENT_MANUFACTURER_HOOK);  List<ResolveInfo> list=pm.queryIntentActivities(intent,0);  for (  ResolveInfo resolveInfo : list) {    if (resolveInfo.activityInfo.packageName.equals(PACKAGE_NAME)) {      result=true;    }  }  assertTrue("Intent-filter not found",result);}  }
class C{  public void computeDKN(int dk,int n,Operator operator) throws ProcessStoppedException {  Vector<SearchObject> listofDKNcandidates=new Vector<>();  int minDKNdistindex=0;  double minD=0;  int sumCardinality;  int k;  int kMax=dk;  double minDistInList=0;  for (int i=0; i < this.getNumberOfObjects(); i++) {    if (operator != null) {      operator.checkForStop();    }    SearchObject so=this.listOfObjects.elementAt(i);    sumCardinality=0;    k=1;    ListIterator li=so.getKdContainerListIterator();    while (li.hasNext() && k <= kMax) {      KdistanceContainer container=(KdistanceContainer)li.next();      sumCardinality=sumCardinality + container.getNumberOfObjects();      while (k <= sumCardinality && k <= kMax) {        so.setKDistance(k,container.getDistance());        so.setCardN(k,sumCardinality);        k++;      }    }  }  for (int i=0; i < this.getNumberOfObjects(); i++) {    if (operator != null) {      operator.checkForStop();    }    SearchObject so=this.listOfObjects.elementAt(i);    if (listofDKNcandidates.size() == 0) {      listofDKNcandidates.add(so);    } else {      if (listofDKNcandidates.size() <= n + 1) {        listofDKNcandidates.add(so);      } else {        if (so.getKDistance(dk) > minDistInList) {          listofDKNcandidates.remove(minDKNdistindex);          listofDKNcandidates.add(so);        }      }    }    for (int j=0; j < listofDKNcandidates.size(); j++) {      SearchObject sobj=listofDKNcandidates.elementAt(j);      minD=sobj.getKDistance(dk);      if (j == 0) {        minDistInList=minD;        minDKNdistindex=j;      } else {        if (minDistInList > minD) {          minDistInList=minD;          minDKNdistindex=j;        }      }    }  }  for (int z=0; z < listofDKNcandidates.size(); z++) {    SearchObject sobj2=listofDKNcandidates.elementAt(z);    sobj2.setOutlierStatus(true);  }}  }
class C{  @Override public int aggregateData(AbstractScannedResult scannedResult){  this.listBasedResult=new ArrayList<>(limit == -1 ? scannedResult.numberOfOutputRows() : limit);  boolean isMsrsPresent=measureDatatypes.length > 0;  ByteArrayWrapper wrapper=null;  ListBasedResultWrapper resultWrapper;  while (scannedResult.hasNext() && (limit == -1 || rowCounter < limit)) {    resultWrapper=new ListBasedResultWrapper();    if (tableBlockExecutionInfos.isDimensionsExistInQuery()) {      wrapper=new ByteArrayWrapper();      wrapper.setDictionaryKey(scannedResult.getDictionaryKeyArray());      wrapper.setNoDictionaryKeys(scannedResult.getNoDictionaryKeyArray());      wrapper.setComplexTypesKeys(scannedResult.getComplexTypeKeyArray());      resultWrapper.setKey(wrapper);    } else {      scannedResult.incrementCounter();    }    if (isMsrsPresent) {      Object[] msrValues=new Object[measureDatatypes.length];      fillMeasureData(msrValues,scannedResult);      resultWrapper.setValue(msrValues);    }    listBasedResult.add(resultWrapper);    rowCounter++;  }  return rowCounter;}  }
class C{  public void write(int data) throws IOException {  for (int bit=0; bit < 8; bit++) {    this.bitSet[this.currBit]=(byte)((data >> (7 - bit)) & 1);    this.currBit++;    if (this.currBit == this.bitSet.length) {      this.currBit=0;      writeCurrentBitSet();      nextPixel();    }  }}  }
class C{  public void deAllocate(){  for (int i=0; i < _orders.size(); i++) {    OBlock block=_orders.get(i).getBlock();    block.deAllocate(this);  }  _allocated=false;  _totalAllocated=false;  _routeSet=false;  _message=null;  if (log.isDebugEnabled()) {    log.debug("deallocated Route for warrant \"" + getDisplayName() + "\".");  }}  }
class C{  private void putWithSystemPropertyDefault(String key,String defaultValue){  properties.put(key,System.getProperty("paldb." + key,defaultValue));}  }
class C{  public VacuumEnvironment(LocationState locAState,LocationState locBState){  envState=new VacuumEnvironmentState(locAState,locBState);}  }
class C{  private static boolean earlierLine(Location loc1,Location loc2){  return loc1.beginLine() < loc2.beginLine();}  }
class C{  public static JSONObject executeGet(String restUrl,String username,String password) throws Exception {  HttpGet get;  JSONObject result=new JSONObject();  CloseableHttpResponse response=null;  try {    CloseableHttpClient httpclient=HttpClients.createDefault();    HttpPost post=new HttpPost(restUrl);    String auth=new StringBuffer(username).append(":").append(password).toString();    byte[] encodedAuth=Base64.encodeBase64(auth.getBytes(Charset.forName("US-ASCII")));    String authHeader="Basic " + new String(encodedAuth);    post.addHeader("Authorization",authHeader);    post.addHeader("Content-Type","application/json");    response=httpclient.execute(post);    BufferedReader rd=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));    StringBuffer res=new StringBuffer();    String line="";    while ((line=rd.readLine()) != null) {      res.append(line);    }    result=new JSONObject(res.toString());  } catch (  IOException e) {    LOG.debug("Failed to execute http get request ",e);  } finally {    if (response != null)     response.close();  }  return result;}  }
class C{  void compact(ConstPool cp){  name=cp.addUtf8Info(getName());  descriptor=cp.addUtf8Info(getDescriptor());  attribute=AttributeInfo.copyAll(attribute,cp);  constPool=cp;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private boolean notBoundAlwaysSatisifed(final IValueExpressionNode vexp,final Set<IVariable<?>> maybeVars){  if (!(vexp instanceof FunctionNode)) {    return false;  }  final FunctionNode functionNode=(FunctionNode)vexp;  final URI functionURI=functionNode.getFunctionURI();  if (functionURI.equals(FunctionRegistry.NOT)) {    final ValueExpressionNode innerVexp=(ValueExpressionNode)functionNode.get(0);    if (!(innerVexp instanceof FunctionNode)) {      return false;    }    final FunctionNode innerFunctionNode=(FunctionNode)innerVexp;    final URI innerFunctionURI=innerFunctionNode.getFunctionURI();    if (innerFunctionURI.equals(FunctionRegistry.BOUND)) {      if (innerFunctionNode.arity() == 1) {        BOp varBop=innerFunctionNode.get(0);        if (varBop instanceof VarNode) {          VarNode varNode=(VarNode)varBop;          return !maybeVars.contains(varNode.getValueExpression());        }      }    }  }  return false;}  }
class C{  protected TrustManagerFactory(TrustManagerFactorySpi factorySpi,Provider provider,String algorithm){  this.factorySpi=factorySpi;  this.provider=provider;  this.algorithm=algorithm;}  }
class C{  private static TokenSpec createTokenSpec(boolean useDelegation,boolean renewable) throws InvalidTokenException, ParserException, SsoKeyStoreOperationException {  DelegationSpec ds=useDelegation ? new DelegationSpec(true,DELEGATE) : null;  return new TokenSpec.Builder(TimeUnit.HOURS.toSeconds(1L)).delegationSpec(ds).renewable(renewable).createTokenSpec();}  }
class C{  public boolean hasStatus(final StatusID status){  return statuses.contains(status);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String availLangCodes=Sage.get("i18n_options","en,fr,it,de,es,nl");  java.util.StringTokenizer toker=new java.util.StringTokenizer(availLangCodes,",;");  String[] langNames=new String[toker.countTokens()];  for (int i=0; i < langNames.length; i++) {    String currLangCode=toker.nextToken();    String currContCode="";    int undIdx=currLangCode.indexOf("_");    if (undIdx != -1) {      currContCode=currLangCode.substring(undIdx + 1);      currLangCode=currLangCode.substring(0,undIdx);    }    java.util.Locale testLocale=new java.util.Locale(currLangCode,currContCode);    langNames[i]=testLocale.getDisplayName(testLocale);    langNames[i]=(langNames[i] == null || langNames[i].length() < 3) ? langNames[i] : ((langNames[i].substring(0,1).toUpperCase()) + langNames[i].substring(1));  }  return langNames;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private Key makeKey(final IBindingSet bset){  final IConstant<?>[] vals=new IConstant<?>[keyVars.length];  for (int i=0; i < keyVars.length; i++) {    final IVariable<?> v=keyVars[i];    vals[i]=bset.get(v);  }  int h=ONE;  for (int i=0; i < keyVars.length; i++) {    final IVariable<?> v=keyVars[i];    final IConstant<?> c=vals[i];    if (c == null) {      if (!indexSolutionsHavingUnboundJoinVars) {        if (log.isDebugEnabled())         log.debug("Join variable is not bound: var=" + v + ", solution="+ bset);        return null;      }      continue;    }    h=31 * h + c.hashCode();  }  if (log.isTraceEnabled())   log.trace("hashCode=" + h + ", joinVars="+ Arrays.toString(keyVars)+ " : "+ bset);  return new Key(h,vals);}  }
class C{  boolean addDisjoint(OwlClass c){  return disjointClasses.add(c);}  }
