class C{  public synchronized long bytes(){  return bytes;}  }
class C{  public IPsecStatus checkStatus(){  return client.get(IPsecStatus.class,PathConstants.IPSEC_URL);}  }
class C{  private boolean qualifiesRootNode(final IAbstractCriteriumTreeNode node,final NaviNode naviNode){  final List<? extends IAbstractCriteriumTreeNode> children=node.getChildren();  if (children.isEmpty()) {    throw new IllegalStateException("IE00469: Root node no child criterion.");  }  if (children.size() > 1) {    throw new IllegalStateException("IE01112: Root node has more than one child criterion.");  }  return qualifies(children.get(0),naviNode);}  }
class C{  @Override protected RemoteOperationResult run(OwnCloudClient client){  RemoteOperationResult result=null;  if (mTargetParentPath.startsWith(mSrcPath)) {    return new RemoteOperationResult(ResultCode.INVALID_MOVE_INTO_DESCENDANT);  }  mFile=getStorageManager().getFileByPath(mSrcPath);  if (mFile == null) {    return new RemoteOperationResult(ResultCode.FILE_NOT_FOUND);  }  String targetPath=mTargetParentPath + mFile.getFileName();  if (mFile.isFolder()) {    targetPath+=OCFile.PATH_SEPARATOR;  }  MoveRemoteFileOperation operation=new MoveRemoteFileOperation(mSrcPath,targetPath,false);  result=operation.execute(client);  if (result.isSuccess()) {    getStorageManager().moveLocalFile(mFile,targetPath,mTargetParentPath);  }  return result;}  }
class C{  public void show(View anchorView){  int width=mWrapView.getMeasuredWidth();  if (width == 0) {    width=mWrapView.getMinimumWidth();  }  int height=mWrapView.getMeasuredHeight();  if (height == 0) {    height=mWrapView.getMinimumHeight();  }  setWidth(width);  setHeight(height);  showAsDropDown(anchorView,0,0);}  }
class C{  public static Type intersection(List<Type> types,Unit unit){  if (types.size() == 1) {    return types.get(0);  }  IntersectionType it=new IntersectionType(unit);  it.setSatisfiedTypes(types);  return it.getType();}  }
class C{  public static ObjectAnimator ofPropertyValuesHolder(Object target,PropertyValuesHolder... values){  ObjectAnimator anim=new ObjectAnimator();  anim.mTarget=target;  anim.setValues(values);  return anim;}  }
class C{  public static <T>String extractTableName(Class<T> clazz){  DatabaseTable databaseTable=clazz.getAnnotation(DatabaseTable.class);  String name=null;  if (databaseTable != null && databaseTable.tableName() != null && databaseTable.tableName().length() > 0) {    name=databaseTable.tableName();  } else {    name=JavaxPersistence.getEntityName(clazz);    if (name == null) {      name=clazz.getSimpleName().toLowerCase();    }  }  return name;}  }
class C{  GenericTrackBO(KLVPacket.Header header){  super(header);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:55.196 -0500",hash_original_method="825D6C1D97F576BD7D887B295C793809",hash_generated_method="285DCA988B4614C883FFF0F662B28DF3") public void notify(String tag,int id,Notification notification){  int[] idOut=new int[1];  INotificationManager service=getService();  String pkg=mContext.getPackageName();  if (localLOGV)   Log.v(TAG,pkg + ": notify(" + id+ ", "+ notification+ ")");  try {    service.enqueueNotificationWithTag(pkg,tag,id,notification,idOut);    if (id != idOut[0]) {      Log.w(TAG,"notify: id corrupted: sent " + id + ", got back "+ idOut[0]);    }  } catch (  RemoteException e) {  }}  }
class C{  @Override public void onSearchClick(SearchCustomActionBar componenet,CharSequence query){  if (query.toString().equalsIgnoreCase("")) {    Log.d("log","please enter your query for the search");  } else {    onSearch(componenet,query);  }}  }
class C{  public void checkStateErrors(MediaPlayerStateErrors stateErrors){  assertTrue(!stateErrors.errorInStartedState);  assertTrue(!stateErrors.errorInStartedStateAfterPause);  assertTrue(!stateErrors.errorInStoppedState);  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(!stateErrors.errorInPreparedStateAfterStop);  assertTrue(!stateErrors.errorInPlaybackCompletedState);  assertTrue(!stateErrors.errorInPausedState);  assertTrue(stateErrors.errorInIdleState);  assertTrue(stateErrors.errorInIdleStateAfterReset);  assertTrue(stateErrors.errorInInitializedState);  assertTrue(stateErrors.errorInErrorState);}  }
class C{  public int hashCode(){  return (attribute.hashCode() ^ value.hashCode());}  }
class C{  @RequestMapping(value=ApiUrl.CITIZEN_ACTIVATE,method=RequestMethod.POST) public ResponseEntity<String> activate(@RequestParam("userName") String userName,@RequestParam("activationCode") String activationCode){  ApiResponse res=ApiResponse.newInstance();  try {    Citizen citizen=citizenService.getCitizenByUserName(userName);    if (citizen == null) {      citizen=citizenService.getCitizenByEmailId(userName);    }    if (citizen == null) {      return res.error(getMessage("citizen.not.found"));    } else     if (activationCode == null) {      return res.error(getMessage("citizen.valid.activationCode"));    } else     if (citizen.isActive()) {      return res.success("",getMessage("citizen.activated"));    } else     if (citizen.getActivationCode().equals(activationCode)) {      citizen.setActive(true);      citizenService.update(citizen);      return res.success("",getMessage("citizen.success.activated"));    } else {      return res.error(getMessage("citizen.valid.activationCode"));    }  } catch (  Exception e) {    LOGGER.error("EGOV-API ERROR ",e);    return res.error(getMessage("server.error"));  }}  }
class C{  public void addImplicitMap(final Class<?> ownerType,final String fieldName,final String itemName,final Class<?> itemType,final String keyFieldName){  if (implicitCollectionMapper == null) {    throw new InitializationException("No " + ImplicitCollectionMapper.class.getName() + " available");  }  implicitCollectionMapper.add(ownerType,fieldName,itemName,itemType,keyFieldName);}  }
class C{  boolean addParent(O parent){  if (parents == EMPTY) {    parents=new Object[1];    parents[0]=parent;    nump=1;    return true;  }  for (int i=0; i < nump; i++) {    if (parent.equals(parents[i])) {      return false;    }  }  if (parents.length == nump) {    final int newsize=Math.max(5,(parents.length << 1) + 1);    parents=Arrays.copyOf(parents,newsize);  }  parents[nump++]=parent;  return true;}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source){  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,true);}  }
class C{  public static String prettyPrintHex(String sToConvert){  HexCharset hde=null;  try {    hde=(HexCharset)HexCharset.forName("HEX");  } catch (  UnsupportedCharsetException uce) {    hde=new HexCharset(true);  }  return new String(hde.encode(sToConvert).array());}  }
class C{  public EditorHighlightingSynchronizer(TypeScriptEditor editor){  Assert.isLegal(editor != null);  fEditor=editor;  fWasOccurrencesOn=fEditor.isMarkingOccurrences();  if (fWasOccurrencesOn && !isEditorDisposed())   fEditor.uninstallOccurrencesFinder();}  }
class C{  @Override public Instance generateExample() throws Exception {  Instance result;  Random rand;  double x;  double y;  double[] atts;  Instance inst;  result=null;  rand=getRandom();  if (m_DatasetFormat == null) {    throw new Exception("Dataset format not defined.");  }  x=rand.nextDouble();  x=x * (getMaxRange() - getMinRange()) + getMinRange();  atts=new double[1];  atts[0]=x;  inst=new DenseInstance(1.0,atts);  m_Filter.input(inst);  m_Filter.batchFinished();  inst=m_Filter.output();  y=inst.value(1) + getAmplitude() * m_NoiseRandom.nextGaussian() * getNoiseRate()* getNoiseVariance();  atts=new double[m_DatasetFormat.numAttributes()];  atts[0]=x;  atts[1]=y;  result=new DenseInstance(1.0,atts);  result.setDataset(m_DatasetFormat);  return result;}  }
class C{  private void processTable(MTable table,int AD_Client_ID){  StringBuffer sql=new StringBuffer();  MColumn[] columns=table.getColumns(false);  for (int i=0; i < columns.length; i++) {    MColumn column=columns[i];    if (column.getAD_Reference_ID() == DisplayType.String || column.getAD_Reference_ID() == DisplayType.Text) {      String columnName=column.getColumnName();      if (sql.length() != 0)       sql.append(",");      sql.append(columnName);    }  }  String baseTable=table.getTableName();  baseTable=baseTable.substring(0,baseTable.length() - 4);  log.config(baseTable + ": " + sql);  String columnNames=sql.toString();  sql=new StringBuffer();  sql.append("UPDATE ").append(table.getTableName()).append(" t SET (").append(columnNames).append(") = (SELECT ").append(columnNames).append(" FROM ").append(baseTable).append(" b WHERE t.").append(baseTable).append("_ID=b.").append(baseTable).append("_ID) WHERE AD_Client_ID=").append(AD_Client_ID);  int no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),baseTable);}  }
class C{  protected Boolean send() throws PropagationException {  Participant part=getParticipant();  int ret=0;  Boolean result=null;  try {    ret=part.prepare();    if (ret == Participant.READ_ONLY)     result=null; else     result=new Boolean(true);  } catch (  HeurHazardException heurh) {    throw new PropagationException(heurh,false);  }catch (  RollbackException jtr) {    result=new Boolean(false);  }catch (  Exception e) {    HeurHazardException heurh=new HeurHazardException();    throw new PropagationException(heurh,false);  }  return result;}  }
class C{  public static int findIndexOf(String str,char search1,char search2){  if (str == null)   return -1;  int endIndex=-1;  int parCount=0;  boolean ignoringText=false;  int size=str.length();  while (++endIndex < size) {    char c=str.charAt(endIndex);    if (c == '\'')     ignoringText=!ignoringText; else     if (!ignoringText) {      if (parCount == 0 && (c == search1 || c == search2))       return endIndex; else       if (c == ')')       parCount--; else       if (c == '(')       parCount++;    }  }  return -1;}  }
class C{  public static boolean isUsingUncheckedGenerics(ClassNode node){  if (node.isArray())   return isUsingUncheckedGenerics(node.getComponentType());  if (node.isUsingGenerics()) {    GenericsType[] genericsTypes=node.getGenericsTypes();    if (genericsTypes != null) {      for (      GenericsType genericsType : genericsTypes) {        if (genericsType.isPlaceholder()) {          return true;        } else {          if (isUsingUncheckedGenerics(genericsType.getType())) {            return true;          }        }      }    }  } else {    return false;  }  return false;}  }
class C{  public SearchSourceBuilder aggregations(byte[] aggregationsBinary){  return aggregations(aggregationsBinary,0,aggregationsBinary.length);}  }
class C{  public void pause(){  thread.suspend();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  protected void addAllDependentJars(WarArchiveMerger wam) throws MojoExecutionException {  for (  Object artifactObject : getProject().getArtifacts()) {    Artifact artifact=(Artifact)artifactObject;    ScopeArtifactFilter filter=new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME);    if (!artifact.isOptional() && filter.include(artifact)) {      String type=artifact.getType();      if ("jar".equals(type)) {        try {          wam.addMergeItem(artifact.getFile());        } catch (        MergeException e) {          throw new MojoExecutionException("Problem merging WAR",e);        }      }    }  }}  }
class C{  public boolean start(String serverID){  AdempiereServer server=getServer(serverID);  if (server == null)   return false;  if (server.isAlive())   return true;  try {    int index=m_servers.indexOf(server);    server=AdempiereServer.create(server.getModel());    if (server == null)     m_servers.remove(index); else     m_servers.set(index,server);    server.start();    server.setPriority(Thread.NORM_PRIORITY - 2);    Thread.yield();  } catch (  Exception e) {    log.log(Level.SEVERE,"Server=" + serverID,e);    return false;  }  log.info(server.toString());  AdempiereServerGroup.get().dump();  if (server == null)   return false;  return server.isAlive();}  }
class C{  public MonitoredHostProvider(HostIdentifier hostId) throws MonitorException {  this.hostId=hostId;  this.listeners=new ArrayList<HostListener>();  this.interval=DEFAULT_POLLING_INTERVAL;  this.activeVms=new HashSet<Integer>();  String rmiName;  String sn=serverName;  String path=hostId.getPath();  if ((path != null) && (path.length() > 0)) {    sn=path;  }  if (hostId.getPort() != -1) {    rmiName="rmi://" + hostId.getHost() + ":"+ hostId.getPort()+ sn;  } else {    rmiName="rmi://" + hostId.getHost() + sn;  }  try {    remoteHost=(RemoteHost)Naming.lookup(rmiName);  } catch (  RemoteException e) {    String message="RMI Registry not available at " + hostId.getHost();    if (hostId.getPort() == -1) {      message=message + ":" + java.rmi.registry.Registry.REGISTRY_PORT;    } else {      message=message + ":" + hostId.getPort();    }    if (e.getMessage() != null) {      throw new MonitorException(message + "\n" + e.getMessage(),e);    } else {      throw new MonitorException(message,e);    }  }catch (  NotBoundException e) {    String message=e.getMessage();    if (message == null)     message=rmiName;    throw new MonitorException("RMI Server " + message + " not available",e);  }catch (  MalformedURLException e) {    e.printStackTrace();    throw new IllegalArgumentException("Malformed URL: " + rmiName);  }  this.vmManager=new RemoteVmManager(remoteHost);  this.timer=new Timer(true);}  }
class C{  public Builder withTerm(long term){  request.term=Assert.arg(term,term > 0,"term must be positive");  return this;}  }
class C{  public ReplyToHeader createReplyToHeader(Address address){  if (address == null)   throw new NullPointerException("null address");  ReplyTo replyTo=new ReplyTo();  replyTo.setAddress(address);  return replyTo;}  }
class C{  protected boolean beforeDelete(){  if (isConfirmed())   return false;  return true;}  }
class C{  public void checkpoint(SegmentInfos segmentInfos,boolean isCommit) throws IOException {  assert locked();  assert Thread.holdsLock(writer);  long t0=0;  if (infoStream.isEnabled("IFD")) {    t0=System.nanoTime();    infoStream.message("IFD","now checkpoint \"" + writer.segString(writer.toLiveInfos(segmentInfos)) + "\" ["+ segmentInfos.size()+ " segments "+ "; isCommit = "+ isCommit+ "]");  }  incRef(segmentInfos,isCommit);  if (isCommit) {    commits.add(new CommitPoint(commitsToDelete,directoryOrig,segmentInfos));    policy.onCommit(commits);    deleteCommits();  } else {    try {      decRef(lastFiles);    }  finally {      lastFiles.clear();    }    lastFiles.addAll(segmentInfos.files(false));  }  if (infoStream.isEnabled("IFD")) {    long t1=System.nanoTime();    infoStream.message("IFD",((t1 - t0) / 1000000) + " msec to checkpoint");  }}  }
class C{  public boolean isIsTestRun(){  return isTestRun;}  }
class C{  boolean isInputComplete(StringBuilder missing){  boolean checkOnly=missing == null;  if (checkOnly) {    missing=new StringBuilder();  }  for (  WidgetPort widget : portWidgets()) {    if (widget.port.input && widget.value() == null) {      if (missing.length() > 0) {        missing.append(", ");      }      missing.append(widget.port.name());    }  }  return missing.length() == 0;}  }
class C{  public void cancelActiveDownloads(){  for (  Component c : this.monitorPanel.getComponents()) {    if (c instanceof DownloadMonitorPanel) {      if (((DownloadMonitorPanel)c).thread.isAlive()) {        DownloadMonitorPanel panel=(DownloadMonitorPanel)c;        panel.cancelButtonActionPerformed(null);        try {          long t0=System.currentTimeMillis();          while (panel.thread.isAlive() && System.currentTimeMillis() - t0 < 500) {            Thread.sleep(10);          }        } catch (        Exception ignore) {        }      }    }  }}  }
class C{  protected static void quickSort(Instances insts,int[] indices,int attidx,int left,int right){  if (left < right) {    int middle=partition(insts,indices,attidx,left,right);    quickSort(insts,indices,attidx,left,middle);    quickSort(insts,indices,attidx,middle + 1,right);  }}  }
class C{  @Override public void dispose(){  m_synchronizer.dispose();  m_resultsPanel.dispose();  m_optionsPanel.dispose();}  }
class C{  public void addObject(String s) throws Exception {  inspect(Class.forName(s));}  }
class C{  public void testXformSubmitFailed_ShowsErrorMessage(){  mController.init();  mFakeGlobalEventBus.post(new SubmitXformFailedEvent(SubmitXformFailedEvent.Reason.UNKNOWN));  verify(mMockUi).showError(R.string.submit_xform_failed_unknown_reason);}  }
class C{  public void init() throws ServletException {}  }
class C{  public ServiceCompatibilityExceptionBean(ApplicationExceptionBean sup,Reason reason){  super(sup);  setReason(reason);}  }
class C{  protected static void renameTable(ReviewDb db,String from,String to) throws OrmException {  JdbcSchema s=(JdbcSchema)db;  try (JdbcExecutor e=new JdbcExecutor(s)){    s.renameTable(e,from,to);  } }  }
class C{  public AcceptAllCondition(ExampleSet exampleSet,String parameterString){}  }
class C{  public UserGroupExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public boolean isSetEchoReply(){  return this.echoReply != null;}  }
class C{  private synchronized void refresh(){  pendingRefresh.set(null);  if (LOG.isDebuggingFine()) {    LOG.debugFine("Refresh in thread " + Thread.currentThread().getName());  }  boolean updateStyle=false;  Iterator<Map.Entry<VisualizationTask,Visualization>> it=taskmap.entrySet().iterator();  while (it.hasNext()) {    Entry<VisualizationTask,Visualization> ent=it.next();    VisualizationTask task=ent.getKey();    Visualization vis=ent.getValue();    if (vis == null) {      vis=instantiateVisualization(task);      ent.setValue(vis);    }    Element prevlayer=layermap.get(vis);    Element layer=vis.getLayer();    if (prevlayer == layer) {      boolean isVisible=!SVGConstants.CSS_HIDDEN_VALUE.equals(layer.getAttribute(SVGConstants.CSS_VISIBILITY_PROPERTY));      if (task.visible != isVisible) {        layer.setAttribute(SVGConstants.CSS_VISIBILITY_PROPERTY,task.visible ? SVGConstants.CSS_VISIBLE_VALUE : SVGConstants.CSS_HIDDEN_VALUE);      }    } else {      if (task.hasAnyFlags(VisualizationTask.FLAG_NO_EXPORT)) {        layer.setAttribute(NO_EXPORT_ATTRIBUTE,NO_EXPORT_ATTRIBUTE);      }      if (prevlayer == null) {        if (LOG.isDebuggingFine()) {          LOG.debugFine("New layer: " + task);        }        getRoot().appendChild(layer);      } else {        if (LOG.isDebuggingFine()) {          LOG.debugFine("Updated layer: " + task);        }        final Node parent=prevlayer.getParentNode();        if (parent != null) {          parent.replaceChild(layer,prevlayer);        }      }      layermap.put(vis,layer);      updateStyle=true;    }  }  if (updateStyle) {    updateStyleElement();  }}  }
class C{  void readTOL() throws IOException {  int[] header=new int[1];  while (true) {    String S=isr.readLine();    if (S == null)     break;    parseString(S,header,10);    if (header[0] == -1)     break;  }}  }
class C{  public int size(){  if (mListeners != null) {    return mListeners.size();  } else {    return 0;  }}  }
class C{  public Query query(){  return this.query;}  }
class C{  Main(){  this(null);}  }
class C{  @Override public String globalInfo(){  return "Filter that can set and unset the class index.";}  }
class C{  @Override protected final void process(final DistributionManager dm){  dmProcess(dm);}  }
class C{  protected JvmRTBootClassPathEntryMeta createJvmRTBootClassPathEntryMetaNode(String snmpEntryName,String tableName,SnmpMib mib,MBeanServer server){  return new JvmRTBootClassPathEntryMeta(mib,objectserver);}  }
class C{  public void desvincularProcedimiento(){  setProcedimiento(null,null);  this.definicion=null;  this.normativa=null;  this.docsBasicosUnidadDocumental=null;  this.tramites=null;  deleteProductoresSerie();}  }
class C{  public ImportTrustedCertificateAction(KseFrame kseFrame,X509Certificate trustCert){  super(kseFrame);  this.trustCertFromConstructor=trustCert;  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("ImportTrustedCertificateAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("ImportTrustedCertificateAction.statusbar"));  putValue(NAME,res.getString("ImportTrustedCertificateAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ImportTrustedCertificateAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("ImportTrustedCertificateAction.image")))));}  }
class C{  public void content(String content){  escapeString(content);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  telegram=getIntent();  if (telegram.hasExtra(INTENT_EXTRA_ACTION)) {    isEdit=telegram.getStringExtra(INTENT_EXTRA_ACTION).equals(INTENT_EDIT);  }  if (DEBUG) {    Log.d(TAG,"Initialized");  }}  }
class C{  protected boolean isSupported(Element element){  return (((HTMLElement)element).getTagId() != HTMLElement.TAG_UNSUPPORTED);}  }
class C{  public void updateStateAndSendEvent(){  updateStateAndSendEvent(testBytesUsedForThresholdSet != -1 ? testBytesUsedForThresholdSet : getBytesUsed());}  }
class C{  private void centerOnScreen(){  Dimension screen=Toolkit.getDefaultToolkit().getScreenSize();  Dimension window=getSize();  Point pos=new Point((screen.width - window.width) / 2,(screen.height - window.height) / 2);  setLocation(pos);}  }
class C{  public static String toHex(byte[] bytes,int bytesPerRow){  if (bytes == null)   return "(null)";  StringBuffer sb=new StringBuffer();  sb.append("[" + bytes.length + "] 0x");  int i=0;  while (i < bytes.length) {    if (bytesPerRow > 0 && i % bytesPerRow == 0)     sb.append("\n");    sb.append(HEX_CHARS[(bytes[i] >> 4) & 0x0F]);    sb.append(HEX_CHARS[bytes[i] & 0x0F]);    i++;  }  return sb.toString();}  }
class C{  public PatternParameter(OptionID optionID,String defaultValue){  super(optionID,Pattern.compile(defaultValue,Pattern.CASE_INSENSITIVE));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.JS_DOC_NODE__MARKERS:    return markers != null && !markers.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public ImageSize scale(float scale){  return new ImageSize((int)(width * scale),(int)(height * scale));}  }
class C{  public void putMapPropertyType(String property,Class<? extends Object> key,Class<? extends Object> value){  keyProperties.put(property,key);  valueProperties.put(property,value);}  }
class C{  public void createSitemapForPodcastsWithFrequency(UpdateFrequencyType updateFrequency,String sitemapsDirectoryPath) throws MalformedURLException {  int nrOfURLs=0;  File targetDirectory=new File(sitemapsDirectoryPath);  int fileCounter=0;  WebSitemapGenerator wsg=WebSitemapGenerator.builder("https://www.podcastpedia.org",targetDirectory).fileNamePrefix("sitemap_" + updateFrequency.toString()).gzip(true).build();  List<Podcast> podcasts=readDao.getPodcastsAndEpisodeWithUpdateFrequency(updateFrequency);  for (  Podcast podcast : podcasts) {    String url;    WebSitemapUrl wsmUrl;    if (podcast.getIdentifier() != null) {      url="https://www.podcastpedia.org/" + podcast.getIdentifier();      wsmUrl=new WebSitemapUrl.Options(url).lastMod(podcast.getPublicationDate()).priority(0.9).changeFreq(changeFrequencyFromUpdateFrequency(updateFrequency)).build();      wsg.addUrl(wsmUrl);      nrOfURLs++;    } else {      url="https://www.podcastpedia.org" + "/podcasts/" + podcast.getPodcastId() + "/"+ podcast.getTitleInUrl();      wsmUrl=new WebSitemapUrl.Options(url).lastMod(podcast.getPublicationDate()).priority(0.9).changeFreq(changeFrequencyFromUpdateFrequency(updateFrequency)).build();      wsg.addUrl(wsmUrl);      nrOfURLs++;    }    for (    Episode episode : podcast.getEpisodes()) {      url="https://www.podcastpedia.org" + "/podcasts/" + podcast.getPodcastId() + "/"+ podcast.getTitleInUrl()+ "/episodes/"+ episode.getEpisodeId()+ "/"+ episode.getTitleInUrl();      wsmUrl=new WebSitemapUrl.Options(url).lastMod(episode.getPublicationDate()).priority(0.8).changeFreq(changeFrequencyFromUpdateFrequency(UpdateFrequencyType.TERMINATED)).build();      wsg.addUrl(wsmUrl);      nrOfURLs++;    }    if (nrOfURLs <= 30000) {      continue;    } else {      wsg.write();      nrOfURLs=0;      fileCounter++;      wsg=WebSitemapGenerator.builder("https://www.podcastpedia.org",targetDirectory).fileNamePrefix("sitemap_" + updateFrequency.toString() + "_"+ fileCounter).gzip(true).build();    }  }  if (nrOfURLs > 0) {    wsg.write();  }}  }
class C{  public void initialize(){  float t=owner.getRoot().convertWallclockTime(time);  instance=new InstanceTime(this,t,false);  owner.addInstanceTime(instance,isBegin);}  }
class C{  public int idxOfField(final ServiceMapping mapping){  if (mapping != null) {    for (int i=0; i < getFields().size(); i++) {      if (mapping == fields.get(i).getServiceMapping()) {        return i;      }    }  }  return -1;}  }
class C{  private String seekSubDocumentRoot() throws XMLStreamException, IOException {  String docTag=null;  if (xmlReader.isStartElement() && xmlReader.getDepth() > 1) {    docTag=xmlReader.getName().getLocalPart();  } else {    while (xmlReader.hasNext() && xmlReader.getDepth() < 2) {      xmlReader.next();    }    while (xmlReader.hasNext() && !xmlReader.isStartElement()) {      xmlReader.next();    }    if (xmlReader.getDepth() == 2 && xmlReader.isStartElement()) {      docTag=xmlReader.getName().getLocalPart();    } else {      throw new IOException("file is empty: " + xmlFiles.get(currentParsedFile));    }  }  return docTag;}  }
class C{  @SuppressWarnings("unchecked") @Test public void innerEnum(){  Class<?> pc=PlayingCard.class;  List<Enum<?>> include=new ArrayList<>();  List<Enum<?>> exclude=new ArrayList<>();  for (  Class<?> c : pc.getDeclaredClasses()) {    int mods=c.getModifiers();    if (c.isEnum()) {      if (Modifier.isPublic(mods)) {        include.addAll(asList(c.getEnumConstants()));      } else {        exclude.addAll(asList(c.getEnumConstants()));      }    }  }  Set<TypedOperation> actual=getConcreteOperations(pc);  assertEquals("number of statements",include.size() + 5,actual.size());  for (  Enum<?> e : include) {    assertTrue("enum constant " + e.name() + " should occur",actual.contains(createEnumOperation(e)));  }  for (  Enum<?> e : exclude) {    assertFalse("enum constant " + e.name() + " should not occur",actual.contains(createEnumOperation(e)));  }}  }
class C{  private boolean isMethodValid(int method){switch (method) {case POSITION_INDEX:    return true;case VALUE_INDEX:  return true;default :return false;}}  }
class C{  public static boolean isServiceEnabled(Connection connection,String userID){  try {    DiscoverInfo result=ServiceDiscoveryManager.getInstanceFor(connection).discoverInfo(userID);    return result.containsFeature(namespace);  } catch (  XMPPException e) {    e.printStackTrace();    return false;  }}  }
class C{  public void registerSensorsForNode(SerialNode node){  java.util.Iterator<String> iter=getSystemNameList().iterator();  while (iter.hasNext()) {    String sName=iter.next();    if (sName == null) {      log.error("System name null during register Sensor");    } else {      log.debug("system name is " + sName);      if ((sName.charAt(0) == 'K') && (sName.charAt(1) == 'S')) {        InputBits.instance().registerSensor(getBySystemName(sName),(SerialAddress.getBitFromSystemName(sName) - 1));      }    }  }}  }
class C{  private static <T>int countRunAndMakeAscending(T[] a,int lo,int hi,Comparator<? super T> c){  if (DEBUG)   assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (c.compare(a[runHi++],a[lo]) < 0) {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  public DelayInformation(Date stamp){  super();  this.stamp=stamp;}  }
class C{  protected void initializeDynamicSupport(BridgeContext ctx,Element e,GraphicsNode node){  if (ctx.isInteractive()) {    ImageNode imgNode=(ImageNode)node;    ctx.bind(e,imgNode.getImage());  }}  }
class C{  private int indexOfF(AlignmentTemplate alTemp,boolean add){  return fIndex.indexOf(Sequences.toIntArray(alTemp.f()),add);}  }
class C{  private boolean checkIfVolumeAlreadyExistsOnHSD(String devNum,HostStorageDomain hsd){  boolean isVolumeFound=false;  List<Path> pathList=hsd.getPathList();  if (null != pathList && !pathList.isEmpty()) {    for (    Path path : pathList) {      if (path.getDevNum().equalsIgnoreCase(devNum)) {        isVolumeFound=true;        break;      }    }  }  return isVolumeFound;}  }
class C{  public static LongIndex createIndex(final long length){  if (length < 0) {    throw new NegativeArraySizeException("Negative length=" + length);  }  if (length <= Integer.MAX_VALUE - 5) {    return new LongArray(length);  } else {    return new LongChunks(length);  }}  }
class C{  public void repaint(RectListManager devRLM){  if (devRLM == null)   return;  updateWorkingBuffers();  if ((rootGN == null) || (workImg == null))   return;  try {synchronized (workImg) {      Graphics2D g2d=GraphicsUtil.createGraphics(workImg,renderingHints);      Rectangle dr;      dr=new Rectangle(0,0,offScreenWidth,offScreenHeight);      if ((isDoubleBuffered) && (currImg != null) && (damagedAreas != null)) {        damagedAreas.subtract(devRLM,COPY_OVERHEAD,COPY_LINE_OVERHEAD);        damagedAreas.mergeRects(COPY_OVERHEAD,COPY_LINE_OVERHEAD);        Iterator iter=damagedAreas.iterator();        g2d.setComposite(AlphaComposite.Src);        while (iter.hasNext()) {          Rectangle r=(Rectangle)iter.next();          if (!dr.intersects(r))           continue;          r=dr.intersection(r);          g2d.setClip(r.x,r.y,r.width,r.height);          g2d.setComposite(AlphaComposite.Clear);          g2d.fillRect(r.x,r.y,r.width,r.height);          g2d.setComposite(AlphaComposite.SrcOver);          g2d.drawImage(currImg,0,0,null);        }      }      Iterator iter=devRLM.iterator();      while (iter.hasNext()) {        Rectangle r=(Rectangle)iter.next();        if (!dr.intersects(r))         continue;        r=dr.intersection(r);        g2d.setTransform(IDENTITY);        g2d.setClip(r.x,r.y,r.width,r.height);        g2d.setComposite(AlphaComposite.Clear);        g2d.fillRect(r.x,r.y,r.width,r.height);        g2d.setComposite(AlphaComposite.SrcOver);        g2d.transform(usr2dev);        rootGN.paint(g2d);      }      g2d.dispose();    }  } catch (  Throwable t) {    t.printStackTrace();  }  if (HaltingThread.hasBeenHalted())   return;  if (isDoubleBuffered) {    BufferedImage tmpImg=workImg;    workImg=currImg;    currImg=tmpImg;    damagedAreas=devRLM;  }}  }
class C{  public CTrackOperandAction(final CTrackingResultContainer resultsContainer,final INaviInstruction instruction,final String register,final RegisterTrackingOptions options){  super(generateName(options));  m_resultsContainer=Preconditions.checkNotNull(resultsContainer,"IE01696: Container argument can not be null");  m_instruction=Preconditions.checkNotNull(instruction,"IE01697: Instruction argument can not be null");  m_register=Preconditions.checkNotNull(register,"IE01698: Register argument can not be null");  m_options=Preconditions.checkNotNull(options,"IE02307: options argument can not be null");}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  super.firePropertyChange(propertyName,oldValue,newValue);  if (propertyName.equals(EnableWindowBlit)) {    if (newValue != null) {      setScrollMode(BLIT_SCROLL_MODE);    } else {      setScrollMode(SIMPLE_SCROLL_MODE);    }  }}  }
class C{  private void hideLoadingAndUpdate(){  photo.setVisibility(View.VISIBLE);  shareBtn.setVisibility(shareBtnVisibility);  mAttacher.update();}  }
class C{  private static void renderPassThruAttributesOptimized(FacesContext context,ResponseWriter writer,UIComponent component,Attribute[] knownAttributes,List<String> setAttributes,Map<String,List<ClientBehavior>> behaviors) throws IOException {  assert ((behaviors != null) && (behaviors.size() < 2));  String behaviorEventName=getSingleBehaviorEventName(behaviors);  boolean renderedBehavior=false;  Collections.sort(setAttributes);  boolean isXhtml=RIConstants.XHTML_CONTENT_TYPE.equals(writer.getContentType());  Map<String,Object> attrMap=component.getAttributes();  for (  String name : setAttributes) {    int index=Arrays.binarySearch(knownAttributes,Attribute.attr(name));    if (index >= 0) {      Object value=attrMap.get(name);      if (value != null && shouldRenderAttribute(value)) {        Attribute attr=knownAttributes[index];        if (isBehaviorEventAttribute(attr,behaviorEventName)) {          renderHandler(context,component,null,name,value,behaviorEventName,null,false,false);          renderedBehavior=true;        } else {          writer.writeAttribute(prefixAttribute(name,isXhtml),value,name);        }      }    }  }  if ((behaviorEventName != null) && !renderedBehavior) {    for (int i=0; i < knownAttributes.length; i++) {      Attribute attr=knownAttributes[i];      String[] events=attr.getEvents();      if ((events != null) && (events.length > 0) && (behaviorEventName.equals(events[0]))) {        renderHandler(context,component,null,attr.getName(),null,behaviorEventName,null,false,false);      }    }  }}  }
class C{  public static boolean isSameType(Object array1,Object array2){  if (array1 == null || array2 == null) {    throw new IllegalArgumentException("The Array must not be null");  }  return array1.getClass().getName().equals(array2.getClass().getName());}  }
class C{  public void removeFromCss() throws IOException {  byte[] removeFromCss=_context.configData.removeFromCss;  if (removeFromCss == null || removeFromCss.length == 0 || (!_isCss))   return;  getUngzipedResponseContent();  if (_responseStatus == 200 && _bytes != null && _bytes.length > removeFromCss.length) {    ByteArrayOutputStream baos=null;    int bytesOffset=0;    int removeLen=removeFromCss.length;    for (int i=0; i + removeLen < _bytes.length; i++) {      if (_bytes[i] == removeFromCss[0]) {        boolean found=true;        for (int j=1; j < removeLen; j++) {          if (_bytes[i + j] != removeFromCss[j]) {            found=false;            break;          }        }        if (found) {          int len=i - bytesOffset;          if (baos == null)           baos=new ByteArrayOutputStream(_bytes.length);          baos.write(_bytes,bytesOffset,len);          bytesOffset+=len;          bytesOffset+=removeLen;          i=bytesOffset;        }        continue;      }    }    if (baos != null) {      int len=_bytes.length - bytesOffset;      baos.write(_bytes,bytesOffset,len);      bytesOffset+=len;      _bytes=baos.toByteArray();      if (_isGziped || _isDeflated) {        try {          ByteArrayOutputStream oByteArr=new ByteArrayOutputStream(_bytes.length * 3 / 4);          OutputStream oGzip=new GZIPOutputStream(oByteArr);          oGzip.write(_bytes);          oGzip.close();          _gzipedBytes=oByteArr.toByteArray();          _isGziped=true;          _isDeflated=false;        } catch (        IOException exc) {          _gzipedBytes=null;          _isGziped=false;          _isDeflated=false;          throw exc;        }      }    }  }  if (_context.isRouter && _bytes != null && _bytes.length > 0) {    OutputStream out=_context.response.getOutputStream();    if (_isGziped || _isDeflated)     out.write(_gzipedBytes); else     out.write(_bytes);  }}  }
class C{  public static Date rollMockClock(int seconds){  return rollMockClockMillis(seconds * 1000);}  }
class C{  private void boardSaveImage(){  if (curfileBoardImage == null) {    boardSaveAsImage();    return;  }  JDialog waitD=new JDialog(frame,Messages.getString("BoardEditor.waitDialog.title"));  waitD.add(new JLabel(Messages.getString("BoardEditor.waitDialog.message")));  waitD.setSize(250,130);  waitD.setLocation((frame.getSize().width / 2) - (waitD.getSize().width / 2),(frame.getSize().height / 2) - (waitD.getSize().height / 2));  waitD.setVisible(true);  frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  waitD.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  try {    ImageIO.write(bv.getEntireBoardImage(),"png",curfileBoardImage);  } catch (  IOException e) {    e.printStackTrace();  }  waitD.setVisible(false);  frame.setCursor(Cursor.getDefaultCursor());}  }
class C{  public DefaultRequest pageLoadTime(Integer value){  setInteger(PAGE_LOAD_TIME,value);  return this;}  }
class C{  public static void CF2(double[] x,double[] f,double[] c,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double yj;  double N=2.0;  double a=1.0;  double t;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    if (j % 2 == 1) {      yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);      sum1+=yj * yj;      count1++;    } else {      yj=x[j - 1] - Math.cos(6.0 * PI * x[0] + j * PI / nx);      sum2+=yj * yj;      count2++;    }  }  f[0]=x[0] + 2.0 * sum1 / (double)count1;  f[1]=1.0 - Math.sqrt(x[0]) + 2.0 * sum2 / (double)count2;  t=f[1] + Math.sqrt(f[0]) - a * Math.sin(N * PI * (Math.sqrt(f[0]) - f[1] + 1.0)) - 1.0;  c[0]=MYSIGN(t) * Math.abs(t) / (1 + Math.exp(4.0 * Math.abs(t)));}  }
class C{  public static boolean isValidNmtoken(String nmtoken){  if (nmtoken.length() == 0)   return false;  for (int i=0; i < nmtoken.length(); i++) {    char ch=nmtoken.charAt(i);    if (!isName(ch)) {      return false;    }  }  return true;}  }
class C{  public String encode(){  return headerName + COLON + SP+ encodeBody()+ NEWLINE;}  }
class C{  public static void updatePosition(Game game,Style12Message style12){  for (int i=0; i < style12.position.length; i++) {    for (int j=0; j < style12.position[i].length; j++) {      if (style12.position[i][j] != EMPTY) {        int square=GameUtils.getSquare(i,j);        int pieceColor=ChessBoardUtils.isWhitePiece(style12.position[i][j]) ? WHITE : BLACK;        int piece=ChessBoardUtils.pieceFromColoredPiece(style12.position[i][j]);        long squareBB=GameUtils.getBitboard(square);        game.setPieceCount(pieceColor,piece,game.getPieceCount(pieceColor,piece) + 1);        game.getBoard()[square]=piece;        game.setColorBB(pieceColor,game.getColorBB(pieceColor) | squareBB);        game.setOccupiedBB(game.getOccupiedBB() | squareBB);        game.setPieceBB(pieceColor,piece,game.getPieceBB(pieceColor,piece) | squareBB);      }    }  }  game.setEmptyBB(~game.getOccupiedBB());  game.setNotColorToMoveBB(~game.getColorBB(game.getColorToMove()));  game.setZobristPositionHash(ZobristUtils.zobristHashPositionOnly(game));  game.setZobristGameHash(game.getZobristPositionHash() ^ ZobristUtils.zobrist(game.getColorToMove(),game.getEpSquare(),game.getCastling(WHITE),game.getCastling(BLACK)));  if (game.isInState(Game.SETUP_STATE)) {    game.setPieceCount(WHITE,PAWN,1);    game.setPieceCount(WHITE,KNIGHT,1);    game.setPieceCount(WHITE,BISHOP,1);    game.setPieceCount(WHITE,ROOK,1);    game.setPieceCount(WHITE,QUEEN,1);    game.setPieceCount(WHITE,KING,1);    game.setPieceCount(BLACK,PAWN,1);    game.setPieceCount(BLACK,KNIGHT,1);    game.setPieceCount(BLACK,BISHOP,1);    game.setPieceCount(BLACK,ROOK,1);    game.setPieceCount(BLACK,QUEEN,1);    game.setPieceCount(BLACK,KING,1);  }}  }
class C{  public int compareTo(IntBuffer otherBuffer){  int compareRemaining=(remaining() < otherBuffer.remaining()) ? remaining() : otherBuffer.remaining();  int thisPos=position;  int otherPos=otherBuffer.position;  int thisInt, otherInt;  while (compareRemaining > 0) {    thisInt=get(thisPos);    otherInt=otherBuffer.get(otherPos);    if (thisInt != otherInt) {      return thisInt < otherInt ? -1 : 1;    }    thisPos++;    otherPos++;    compareRemaining--;  }  return remaining() - otherBuffer.remaining();}  }
class C{  public static String replaceAll(String source){  int regionStart=0;  for (String entity=getNextEntity(source,regionStart); entity != null; entity=getNextEntity(source,regionStart)) {    String replacement=EntityMap.get(entity);    if (replacement == null) {      regionStart+=entity.length();      continue;    }    source=source.replace(entity,replacement);    regionStart+=replacement.length();  }  return source;}  }
class C{  private static void printPropertiesJSON(Map<String,String> props){  printPropertiesJSON(props,-1);}  }
class C{  public static void printDateRangeQueryResults(BloggerService myService,DateTime startTime,DateTime endTime) throws ServiceException, IOException {  URL feedUrl=new URL(feedUri + POSTS_FEED_URI_SUFFIX);  Query myQuery=new Query(feedUrl);  myQuery.setUpdatedMin(startTime);  myQuery.setUpdatedMax(endTime);  Feed resultFeed=myService.query(myQuery,Feed.class);  System.out.println(resultFeed.getTitle().getPlainText() + " posts between " + startTime+ " and "+ endTime);  for (int i=0; i < resultFeed.getEntries().size(); i++) {    Entry entry=resultFeed.getEntries().get(i);    System.out.println("\t" + entry.getTitle().getPlainText());    System.out.println("\t" + entry.getUpdated().toStringRfc822());  }  System.out.println();}  }
class C{  private static Bitmap createPaddedBitmap(Bitmap bitmapIn,XMPMeta xmp,int intermediateWidth){  try {    int croppedAreaWidth=getInt(xmp,CROPPED_AREA_IMAGE_WIDTH_PIXELS);    int croppedAreaHeight=getInt(xmp,CROPPED_AREA_IMAGE_HEIGHT_PIXELS);    int fullPanoWidth=getInt(xmp,CROPPED_AREA_FULL_PANO_WIDTH_PIXELS);    int fullPanoHeight=getInt(xmp,CROPPED_AREA_FULL_PANO_HEIGHT_PIXELS);    int left=getInt(xmp,CROPPED_AREA_LEFT);    int top=getInt(xmp,CROPPED_AREA_TOP);    if (fullPanoWidth == 0 || fullPanoHeight == 0) {      return bitmapIn;    }    Bitmap paddedBitmap=null;    float scale=intermediateWidth / (float)fullPanoWidth;    while (paddedBitmap == null) {      try {        paddedBitmap=Bitmap.createBitmap((int)(fullPanoWidth * scale),(int)(fullPanoHeight * scale),Bitmap.Config.ARGB_8888);      } catch (      OutOfMemoryError e) {        System.gc();        scale/=2;      }    }    Canvas paddedCanvas=new Canvas(paddedBitmap);    int right=left + croppedAreaWidth;    int bottom=top + croppedAreaHeight;    RectF destRect=new RectF(left * scale,top * scale,right * scale,bottom * scale);    paddedCanvas.drawBitmap(bitmapIn,null,destRect,null);    return paddedBitmap;  } catch (  XMPException ex) {  }  return bitmapIn;}  }
class C{  public TXTRecord(Name name,int dclass,long ttl,List strings){  super(name,Type.TXT,dclass,ttl,strings);}  }
class C{  public void removePropertyChangeListener(final PropertyChangeListener listener){  propertyChangeSupport.removePropertyChangeListener(listener);}  }
class C{  public Formatter(String alignment){  setAlignment(alignment);}  }
class C{  public void addItemFromInflater(Preference preference){  addPreference(preference);}  }
class C{  protected int assignIDs(int lastID){  int currLastID=lastID + 1;  m_id=currLastID;  if (m_left != null) {    currLastID=m_left.assignIDs(currLastID);  }  if (m_right != null) {    currLastID=m_right.assignIDs(currLastID);  }  return currLastID;}  }
class C{  public boolean remove(int value){  int index=value % this.numBuckets;  Bucket bucket=this.buckets[index];  if (bucket == null || bucket.length == 0)   return false;  int i;  for (i=0; i < bucket.length; i++) {    if (bucket.values[i] == value)     break;  }  if (i == bucket.length)   return false;  if (i < bucket.length - 1) {    System.arraycopy(bucket.values,i + 1,bucket.values,i,bucket.length - i - 1);  }  bucket.length--;  this.size--;  return true;}  }
class C{  public void forceStop(){synchronized (this.eventMutex) {    this.isStopped=true;    this.refCount=0;    this.eventMutex.notify();  }}  }
class C{  public static Date translateTime(Date date,TimeZone src,TimeZone dest){  Date newDate=new Date();  int offset=(dest.getOffset(date.getTime()) - src.getOffset(date.getTime()));  newDate.setTime(date.getTime() - offset);  return newDate;}  }
class C{  public static float[] convertColor(@ColorInt int color){  return new float[]{Color.red(color) / 255f,Color.green(color) / 255f,Color.blue(color) / 255f,Color.alpha(color) / 255f};}  }
class C{  static public String crypt(final String password,String salt,final String magic){  if (password == null) {    throw new IllegalArgumentException("Null password!");  }  if (salt == null) {    throw new IllegalArgumentException("Null salt!");  }  if (magic == null) {    throw new IllegalArgumentException("Null salt!");  }  byte finalState[];  long l;  MessageDigest ctx, ctx1;  try {    ctx=MessageDigest.getInstance("md5");    ctx1=MessageDigest.getInstance("md5");  } catch (  final NoSuchAlgorithmException ex) {    ex.printStackTrace();    return null;  }  if (salt.startsWith(magic)) {    salt=salt.substring(magic.length());  }  if (salt.indexOf('$') != -1) {    salt=salt.substring(0,salt.indexOf('$'));  }  if (salt.length() > 8) {    salt=salt.substring(0,8);  }  ctx.update(password.getBytes());  ctx.update(magic.getBytes());  ctx.update(salt.getBytes());  ctx1.update(password.getBytes());  ctx1.update(salt.getBytes());  ctx1.update(password.getBytes());  finalState=ctx1.digest();  for (int pl=password.length(); pl > 0; pl-=16) {    ctx.update(finalState,0,pl > 16 ? 16 : pl);  }  clearbits(finalState);  for (int i=password.length(); i != 0; i>>>=1) {    if ((i & 1) != 0) {      ctx.update(finalState,0,1);    } else {      ctx.update(password.getBytes(),0,1);    }  }  finalState=ctx.digest();  for (int i=0; i < 1000; i++) {    try {      ctx1=MessageDigest.getInstance("md5");    } catch (    final NoSuchAlgorithmException e0) {      return null;    }    if ((i & 1) != 0) {      ctx1.update(password.getBytes());    } else {      ctx1.update(finalState,0,16);    }    if ((i % 3) != 0) {      ctx1.update(salt.getBytes());    }    if ((i % 7) != 0) {      ctx1.update(password.getBytes());    }    if ((i & 1) != 0) {      ctx1.update(finalState,0,16);    } else {      ctx1.update(password.getBytes());    }    finalState=ctx1.digest();  }  final StringBuffer result=new StringBuffer();  result.append(magic);  result.append(salt);  result.append("$");  l=(bytes2u(finalState[0]) << 16) | (bytes2u(finalState[6]) << 8) | bytes2u(finalState[12]);  result.append(to64(l,4));  l=(bytes2u(finalState[1]) << 16) | (bytes2u(finalState[7]) << 8) | bytes2u(finalState[13]);  result.append(to64(l,4));  l=(bytes2u(finalState[2]) << 16) | (bytes2u(finalState[8]) << 8) | bytes2u(finalState[14]);  result.append(to64(l,4));  l=(bytes2u(finalState[3]) << 16) | (bytes2u(finalState[9]) << 8) | bytes2u(finalState[15]);  result.append(to64(l,4));  l=(bytes2u(finalState[4]) << 16) | (bytes2u(finalState[10]) << 8) | bytes2u(finalState[5]);  result.append(to64(l,4));  l=bytes2u(finalState[11]);  result.append(to64(l,2));  clearbits(finalState);  return result.toString();}  }
class C{  @RequestMapping(value="/SsoClient/SLO/{tenant:.*}",method=RequestMethod.GET) public void slo(@PathVariable(value="tenant") final String tenant,final HttpServletRequest request,final HttpServletResponse httpResponse){  logger.info("You sent a GET message to " + "Websso client library! ");  LogoutProcessor processor=this.getLogoutProcessor();  Validate.notNull(processor,"LogoutProcessor is not set");  this.setTenant(tenant);  if (request != null) {    String samlResponseStr=request.getParameter(SamlUtils.SAML_RESPONSE_PARAMETER);    String samlRequestStr=request.getParameter(SamlUtils.SAML_REQUEST_PARAMETER);    if (samlResponseStr != null) {      this.sloResponse(request,httpResponse);    } else     if (samlRequestStr != null) {      this.sloRequest(request,httpResponse);    } else {      logger.error("Null request or response.");      ValidationState validator=new SloRequestValidationState(request,this);      this.validationState=validator;      validator.setValidationResult(new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,Error.BAD_REQUEST,"No request string!"));      Message errorMessage=this.createMessage(validator,true);      processor.logoutError(errorMessage,request,httpResponse);    }  }}  }
class C{  public void verifyLock(long curTimeInMicros) throws Exception, BusyLockException, StaleLockException {  if (lockColumn == null) {    throw new IllegalStateException("verifyLock() called without attempting to take the lock");  }  Map<String,Long> lockResult=readLockColumns(readDataColumns);  for (  Entry<String,Long> entry : lockResult.entrySet()) {    if (entry.getValue() != 0 && curTimeInMicros > entry.getValue()) {      if (failOnStaleLock) {        throw new StaleLockException("Stale lock on row '" + key + "'.  Manual cleanup requried.");      }      locksToDelete.add(entry.getKey());    } else     if (!entry.getKey().equals(lockColumn)) {      throw new BusyLockException("Lock already acquired for row '" + key + "' with lock column "+ entry.getKey());    }  }}  }
class C{  private RandomData createRandom(){  final JDKRandomGenerator randomGen=new JDKRandomGenerator();  randomGen.setSeed(1234567890);  return new RandomDataImpl(randomGen);}  }
class C{  @Deprecated public ObjectInputStream deserialize(String className,ObjectName loaderName,byte[] data) throws InstanceNotFoundException, OperationsException, ReflectionException {  loaderName=cloneObjectName(loaderName);  try {    getClassLoader(loaderName);  } catch (  SecurityException e) {    throw e;  }catch (  Exception e) {  }  ClassLoader myLoader=outerShell.getClass().getClassLoader();  return instantiator.deserialize(className,loaderName,data,myLoader);}  }
class C{  public int size(){  return count;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (id: ");  result.append(id);  result.append(", inputCnt: ");  result.append(inputCnt);  result.append(", outputCnt: ");  result.append(outputCnt);  result.append(')');  return result.toString();}  }
class C{  public JSONArray put(int index,Collection value) throws JSONException {  this.put(index,new JSONArray(value));  return this;}  }
class C{  public void put(NumberVector val,double weight){  assert (val.getDimensionality() == elements.length);  if (weight == 0) {    return;  }  final double nwsum=weight + wsum;  for (int i=0; i < elements.length; i++) {    final double delta=val.doubleValue(i) - elements[i];    final double rval=delta * weight / nwsum;    elements[i]+=rval;  }  wsum=nwsum;}  }
class C{  public AlchemyVision(String apiKey){  super(apiKey);}  }
class C{  public WarnData(Instant date,UUID warner,String reason,Instant endtimestamp){  this(date,warner,reason);  this.endtimestamp=endtimestamp.getEpochSecond();  this.date=date.toEpochMilli();}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  AppLog.v(this,"onActivityResult(): " + requestCode);  super.onActivityResult(requestCode,resultCode,data);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.714 -0500",hash_original_method="A9D59C5CAA6AEFC931B2439A85EC8214",hash_generated_method="EA80EA3709A8C01338A8B5642E17C8F1") private DexFile(String sourceName,String outputName,int flags) throws IOException {  mCookie=openDexFile(sourceName,outputName,flags);  mFileName=sourceName;  guard.open("close");}  }
class C{  public MongoHistory(){}  }
class C{  private WindowsHackReader(InputStream is){  this.is=is;}  }
class C{  public boolean isYahoo(){  return isProtocol(YAHOO);}  }
class C{  public static org.apache.nutch.storage.Host.Builder newBuilder(org.apache.nutch.storage.Host other){  return new org.apache.nutch.storage.Host.Builder(other);}  }
class C{  protected AssignmentExpressionImpl(){  super();}  }
class C{  private void checkLeakyEpsilon(){  if (cbUseLeakyLearning.isSelected()) {    tfLeakyEpsilon.setEnabled(true);  } else {    tfLeakyEpsilon.setEnabled(false);  }}  }
class C{  public final String toString(byte[] buffer,int startPos,int length){  char[] charArray=new char[length];  int readpoint=startPos;  for (int i=0; i < length; i++) {    charArray[i]=this.byteToChars[buffer[readpoint] - Byte.MIN_VALUE];    readpoint++;  }  return new String(charArray);}  }
class C{  public void done(){  if (distinct) {    rows=distinctRows.values();  }  if (sort != null) {    if (offset > 0 || limit > 0) {      sort.sort(rows,offset,limit < 0 ? rows.size() : limit);    } else {      sort.sort(rows);    }  }  applyOffset();  applyLimit();  reset();}  }
class C{  public int size(){  return m_Methods.size();}  }
class C{  @Override protected boolean isAllowed(final RPEntity user){  if (user instanceof Player) {    return ((Player)user).isQuestCompleted(questslot);  } else {    return false;  }}  }
class C{  public ParsableBitArray(byte[] data){  this.data=data;}  }
class C{  protected boolean osCreateDirIfNeccessary(File destDirFolder){  return destDirFolder.mkdirs() || destDirFolder.isDirectory();}  }
class C{  public static void add(List<String> options,char option,File value){  add(options,"" + option,value);}  }
class C{  public int rank(){  double eps=Math.pow(2.0,-52.0);  double tol=Math.max(m,n) * s[0] * eps;  int r=0;  for (int i=0; i < s.length; i++) {    if (s[i] > tol) {      r++;    }  }  return r;}  }
class C{  public boolean isSetBinary_annotations(){  return this.binary_annotations != null;}  }
class C{  void determineNextPagingUrl(String docUrl){  if (!mNextPagingUrl.isEmpty() || mAllPageInfo.isEmpty())   return;  boolean hasDocUrl=false;  for (  PageInfo page : mAllPageInfo) {    if (hasDocUrl) {      mNextPagingUrl=page.mUrl;      return;    }    if (page.mUrl.equals(docUrl))     hasDocUrl=true;  }}  }
class C{  public CommitDistributionException(String s){  super(s);}  }
class C{  protected Object readResolve() throws ObjectStreamException {  return prj.services();}  }
class C{  public void trainModels(String trainingData){  Parser parser=new CoNLL2000Parser(trainingData);  trainModelsWithParser(parser);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public void addExposedNodes(Collection<GraphNode> result,Collection<GraphNode> availNodes){  for (  GraphNode candidate : availNodes) {    if (false == hiddenNodes.containsKey(candidate)) {      result.add(candidate);    }  }}  }
class C{  public final Map<AnchorURL,String> loadLinks(final DigestURL url,final CacheStrategy cacheStrategy,BlacklistType blacklistType,final ClientIdentification.Agent agent,final int timezoneOffset) throws IOException {  final Response response=load(request(url,true,false),cacheStrategy,Integer.MAX_VALUE,blacklistType,agent);  if (response == null)   throw new IOException("response == null");  final ResponseHeader responseHeader=response.getResponseHeader();  if (response.getContent() == null)   throw new IOException("resource == null");  if (responseHeader == null)   throw new IOException("responseHeader == null");  Document[] documents=null;  final String supportError=TextParser.supports(url,responseHeader.getContentType());  if (supportError != null)   throw new IOException("no parser support: " + supportError);  try {    documents=TextParser.parseSource(url,responseHeader.getContentType(),responseHeader.getCharacterEncoding(),response.profile().scraper(),timezoneOffset,response.depth(),response.getContent());    if (documents == null)     throw new IOException("document == null");  } catch (  final Exception e) {    throw new IOException("parser error: " + e.getMessage());  }  return Document.getHyperlinks(documents,true);}  }
class C{  @Override public long skip(long bytes){  if (closed) {    throw new FormItem.ItemSkippedException();  }  int av=available();  if (av == 0) {    av=makeAvailable();    if (av == 0) {      return 0;    }  }  long res=Math.min(av,bytes);  head+=res;  return res;}  }
class C{  public RegionClearedException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static <T>List<T> eachWithIndex(List<T> self,@ClosureParams(value=FromString.class,options="T,java.lang.Integer") Closure closure){  return (List<T>)eachWithIndex((Iterable<T>)self,closure);}  }
class C{  public Future<HttpResponse> performAsync(final Method method,final String path,final HttpEntity payload,final FutureCallback<HttpResponse> responseHandler) throws IOException {  HttpUriRequest request=createHttpRequest(method,path,payload);  return asyncClient.execute(request,new BasicHttpContext(),responseHandler);}  }
class C{  @SuppressWarnings("unchecked") public static <T>T unmarshal(String xml) throws JAXBException, IOException {  ByteArrayInputStream input=new ByteArrayInputStream(xml.getBytes());  Object obj=JAXBUtils.getJAXBContext().createUnmarshaller().unmarshal(input);  input.close();  return (T)obj;}  }
class C{  public Hyphenation hyphenate(char[] w,int offset,int len,int remainCharCount,int pushCharCount){  int i;  char[] word=new char[len + 3];  char[] c=new char[2];  int iIgnoreAtBeginning=0;  int iLength=len;  boolean bEndOfLetters=false;  for (i=1; i <= len; i++) {    c[0]=w[offset + i - 1];    int nc=classmap.find(c,0);    if (nc < 0) {      if (i == (1 + iIgnoreAtBeginning)) {        iIgnoreAtBeginning++;      } else {        bEndOfLetters=true;      }      iLength--;    } else {      if (!bEndOfLetters) {        word[i - iIgnoreAtBeginning]=(char)nc;      } else {        return null;      }    }  }  len=iLength;  if (len < (remainCharCount + pushCharCount)) {    return null;  }  int[] result=new int[len + 1];  int k=0;  String sw=new String(word,1,len);  if (stoplist.containsKey(sw)) {    ArrayList<Object> hw=stoplist.get(sw);    int j=0;    for (i=0; i < hw.size(); i++) {      Object o=hw.get(i);      if (o instanceof String) {        j+=((String)o).length();        if (j >= remainCharCount && j < (len - pushCharCount)) {          result[k++]=j + iIgnoreAtBeginning;        }      }    }  } else {    word[0]='.';    word[len + 1]='.';    word[len + 2]=0;    byte[] il=new byte[len + 3];    for (i=0; i < len + 1; i++) {      searchPatterns(word,i,il);    }    for (i=0; i < len; i++) {      if (((il[i + 1] & 1) == 1) && i >= remainCharCount && i <= (len - pushCharCount)) {        result[k++]=i + iIgnoreAtBeginning;      }    }  }  if (k > 0) {    int[] res=new int[k + 2];    System.arraycopy(result,0,res,1,k);    res[0]=0;    res[k + 1]=len;    return new Hyphenation(res);  } else {    return null;  }}  }
class C{  public static ProcessResult executeNativeCommandZeroReturn(String... command){  ProcessResult result;  if (command.length == 1) {    result=executeNativeCommand(command[0]);  } else {    result=executeNativeCommand(concatCommand(command));  }  checkNoError(result);  return result;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  static int[] roundSizes(float[] sizes){  int[] retInts=new int[sizes.length];  float posD=0;  for (int i=0; i < retInts.length; i++) {    int posI=(int)(posD + 0.5f);    posD+=sizes[i];    retInts[i]=(int)(posD + 0.5f) - posI;  }  return retInts;}  }
class C{  @Override public boolean isLive(ObjectReference object){  if (object.isNull())   return false;  if (Space.isInSpace(CopyMS.NURSERY,object)) {    return CopyMS.nurserySpace.isLive(object);  }  if (Space.isInSpace(CopyMS.MARK_SWEEP,object)) {    return CopyMS.msSpace.isLive(object);  }  return super.isLive(object);}  }
class C{  private void copyFldsDef(ArchiveFldsImpl flds){  ArchiveFldImpl nfld=null;  for (int i=0; i < flds.count(); i++) {    ArchiveFldImpl fld=(ArchiveFldImpl)flds.get(i);    nfld=new ArchiveFldImpl(fld.getId(),fld.getName(),fld.getType(),fld.getLen(),fld.isNullable(),fld.getColName(),fld.isDoc(),fld.isMult(),fld.getRemarks());    try {      _flds.addFld((ArchiveFld)nfld);    } catch (    Exception e) {    }  }}  }
class C{  private float calculateScale(int x,int y){  final float centerX=getWidth() / 2f;  final float centerY=getHeight() / 2f;  final float maxDistance=(float)Math.sqrt(centerX * centerX + centerY * centerY);  final float deltaX=centerX - x;  final float deltaY=centerY - y;  final float distance=(float)Math.sqrt(deltaX * deltaX + deltaY * deltaY);  final float scale=0.5f + (distance / maxDistance) * 0.5f;  return scale;}  }
class C{  protected AbstractContinousDistribution(){}  }
class C{  public static void updateComponentTreeUI(Component c){  updateComponentTreeUI0(c);  c.invalidate();  c.validate();  c.repaint();}  }
class C{  public static SemProposition serializableInstance(){  return new SemProposition(SemIm.serializableInstance());}  }
class C{  public boolean shouldUpdateStyleOnAncestorChanged(){  return false;}  }
class C{  public void checkVersionDownloadable(final SoftwareVersion version){  URL imageUrl=getImageURL(version);  HttpURLConnection urlConnection;  InputStream is;  try {    urlConnection=invokeRequest(imageUrl);    is=urlConnection.getInputStream();  } catch (  RemoteRepositoryException e) {    throw e;  }catch (  Exception e) {    _log.error("Caught an exception trying to access " + version.toString() + " at url "+ imageUrl.toString(),e);    throw BadRequestException.badRequests.invalidImageUrl(version.toString(),imageUrl.toString());  }  try {    if (null != urlConnection.getContentType() && urlConnection.getContentType().contains("html")) {      byte[] buffer=new byte[256];      try {        if (is.read(buffer) > -1) {          _log.error("Downloaded error page when attempting to get version " + version.toString() + " from url "+ imageUrl.toString()+ " error page contents: "+ new String(buffer,"UTF-8"));        }      } catch (      Exception e) {      }      throw BadRequestException.badRequests.downloadFailed(version.toString(),imageUrl.toString());    }  }  finally {    try {      is.close();    } catch (    Exception e) {    }  }}  }
class C{  protected String validContent(String content){  String result;  result=content;  result=result.replaceAll("&","&amp;").replaceAll("\"","&quot;").replaceAll("'","&apos;").replaceAll("<","&lt;").replaceAll(">","&gt;");  result=result.replaceAll("\n","&#10;").replaceAll("\r","&#13;").replaceAll("\t","&#9;");  return result;}  }
class C{  public RoutingTable routingTable(){  return routingNodes.routingTable();}  }
class C{  public Servlet createServletElement(DescriptorType docType,String theServletName,String theServletClass){  Servlet servletElement=(Servlet)docType.getTagByName(WebXmlType.SERVLET).create();  servletElement.setServletName(theServletName);  servletElement.setServletClass(theServletClass);  return servletElement;}  }
class C{  @Override public MeanVariance put(double[] vals){  if (vals.length <= 2) {    final int l=vals.length;    int i=0;    while (i < l) {      put(vals[l]);    }    return this;  }  double sum=0.;  final int l=vals.length;  int i=0;  while (i < l) {    sum+=vals[l];  }  double om1=sum / vals.length;  double om2=0.;  i=0;  while (i < l) {    final double v=vals[l] - om1;    om2+=v * v;  }  final double nwsum=vals.length + this.n;  final double delta=om1 - this.m1;  final double rval=delta * vals.length / nwsum;  this.m1=(this.n * this.m1 + sum) / nwsum;  this.m2+=om2 + delta * this.n * rval;  this.n=nwsum;  return this;}  }
class C{  public TestPingedEvent(final String sessionId,final String testId,final long timeout){  this(sessionId,testId,timeout,null);}  }
class C{  public AcronymDataArrayAdapter(Context context){  super(context,R.layout.acronym_data_row);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void purgeLocalStreamsState(Properties streamsConfiguration) throws IOException {  String path=streamsConfiguration.getProperty(StreamsConfig.STATE_DIR_CONFIG);  if (path != null) {    File node=Paths.get(path).normalize().toFile();    if (node.getAbsolutePath().startsWith("/tmp")) {      List<String> nodes=Collections.singletonList(node.getAbsolutePath());      CoreUtils.delete(scala.collection.JavaConversions.asScalaBuffer(nodes).seq());    }  }}  }
class C{  public void memberValuePair(String memberName) throws IOException {  memberValuePair(pool.addUtf8Info(memberName));}  }
class C{  void cancelTrade(){  RPAction action=makeAction();  action.put("action","cancel");  ClientSingletonRepository.getClientFramework().send(action);}  }
class C{  public boolean excludeUnmated(){  return mExcludeUnmated;}  }
class C{  public static boolean isSystemBarOnBottom(Context ctxt){  Resources res=ctxt.getResources();  Configuration cfg=res.getConfiguration();  DisplayMetrics dm=res.getDisplayMetrics();  boolean canMove=(dm.widthPixels != dm.heightPixels && cfg.smallestScreenWidthDp < 600);  return (!canMove || dm.widthPixels < dm.heightPixels);}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public T screenResolution(String value){  setString(SCREEN_RESOLUTION,value);  return (T)this;}  }
class C{  public boolean isSetTriggerId(){  return EncodingUtils.testBit(issetBitfield,TRIGGERID_ISSET_ID);}  }
class C{  public SearchSourceBuilder noFields(){  this.fieldNames=Collections.emptyList();  return this;}  }
class C{  public void writeAttribute(String name,Object value,String componentPropertyName) throws IOException {  if (name == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"name"));  }  if (value == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"value"));  }  Class valueClass=value.getClass();  if (valueClass == Boolean.class) {    if (Boolean.TRUE.equals(value)) {      writer.write(" ");      writer.write(name);    } else {    }  } else {    writer.write(" ");    writer.write(name);    writer.write("=\"");    ensureTextBufferCapacity(value.toString());    HtmlUtils.writeAttribute(writer,true,true,buffer,value.toString(),textBuffer,true);    writer.write("\"");  }}  }
class C{  public static int parseFullAtomFlags(int fullAtomInt){  return 0x00FFFFFF & fullAtomInt;}  }
class C{  public static int binarySearch(char[] array,char value){  return binarySearch(array,0,array.length,value);}  }
class C{  public static Geometry reducePointwise(Geometry g,PrecisionModel precModel){  GeometryPrecisionReducer reducer=new GeometryPrecisionReducer(precModel);  reducer.setPointwise(true);  return reducer.reduce(g);}  }
class C{  public DTMException(short code,String message){  super(code,message);}  }
class C{  private boolean isPeriod(String period){  return period.contains(RANGE_SEP);}  }
class C{  public final void applyFXStroke(final Shape shape){  if (shape == null) {    return;  }  float w=current_line_width;  if (w < 0) {    w=-w;  }  if (mitre_limit < 1) {    mitre_limit=1;  }  final int dashCount=current_line_dash_array.length;  if (dashCount > 0) {    final float[] dash=new float[dashCount];    for (int aa=0; aa < dashCount; aa++) {      if (dash[aa] < 0) {        dash[aa]=-dash[aa];      }      if (dash[aa] < 0.05f) {        dash[aa]=0.05f;      }    }    shape.getStrokeDashArray().clear();    for (    final double value : dash) {      shape.getStrokeDashArray().add(value);    }    shape.setStrokeDashOffset(Math.abs(current_line_dash_phase));  }  shape.setStrokeWidth(w);switch (current_line_cap_style) {case 0:    shape.setStrokeLineCap(StrokeLineCap.BUTT);  break;case 1:shape.setStrokeLineCap(StrokeLineCap.ROUND);break;case 2:shape.setStrokeLineCap(StrokeLineCap.SQUARE);break;}switch (current_line_join_style) {case 0:shape.setStrokeLineJoin(StrokeLineJoin.MITER);break;case 1:shape.setStrokeLineJoin(StrokeLineJoin.ROUND);break;case 2:shape.setStrokeLineJoin(StrokeLineJoin.BEVEL);break;}shape.setStrokeMiterLimit(mitre_limit);}  }
class C{  public Builder id(long id){  event.id=id;  return this;}  }
class C{  public void updatePresence(boolean isIdle,Optional<Long> gameID){  String json="{\"op\":3,\"d\":{\"idle_since\":" + (isIdle ? System.currentTimeMillis() : "null") + ",\"game_id\":"+ (gameID.isPresent() ? gameID.get() : "null")+ "}}";  Discord4J.logger.debug(json);  ws.send(json);  getOurUser().setPresence(isIdle ? Presences.IDLE : Presences.ONLINE);  getOurUser().setGameID(gameID.orElse(null));}  }
class C{  protected void verUnidadDocumentalExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String idUdoc=request.getParameter("idUdoc");  ServiceRepository services=getServiceRepository(request);  GestionUnidadDocumentalBI udocBI=services.lookupGestionUnidadDocumentalBI();  UnidadDocumentalVO udoc=udocBI.getUnidadDocumental(idUdoc);  ActionRedirect vistaUdoc=null;  vistaUdoc=new ActionRedirect(mapping.findForward("ver_en_cuadro_clasificacion"));  vistaUdoc.addParameter(Constants.ID,idUdoc);  if (udoc != null && udoc.isSubtipoCaja()) {    saveCurrentInvocation(KeysClientsInvocations.CUADRO_VER_FRACCION_SERIE,request);  } else {    saveCurrentInvocation(KeysClientsInvocations.CUADRO_VER_UNIDAD_DOCUMENTAL,request);  }  vistaUdoc.setRedirect(true);  setReturnActionFordward(request,vistaUdoc);}  }
class C{  public static boolean isDisableStaticDialogScrolling(){  return disableStaticDialogScrolling;}  }
class C{  public static boolean isNumericNonFP(Class clazz){  if ((clazz == Short.class) || (clazz == short.class) || (clazz == Integer.class)|| (clazz == int.class)|| (clazz == Long.class)|| (clazz == long.class)|| (clazz == Byte.class)|| (clazz == byte.class)) {    return true;  }  return false;}  }
class C{  void createHorScrollbar(){  hsb=new XHorizontalScrollbar(this);  hsb.setValues(0,0,0,0,HORIZ_SCROLL_AMT,HORIZ_SCROLL_AMT);}  }
class C{  private static String normalizeParameters(String httpUrl,Map<String,SortedSet<String>> requestParameters){  if (httpUrl.indexOf(QUESTION_MARK) > 0) {    Map<String,SortedSet<String>> queryParameters=parseQuerystring(httpUrl.substring(httpUrl.indexOf(QUESTION_MARK) + 1));    for (    Map.Entry<String,SortedSet<String>> e : queryParameters.entrySet()) {      TreeSet<String> elementsToAddBack=new TreeSet<String>();      for (      String value : e.getValue()) {        elementsToAddBack.add(encode(value));      }      queryParameters.put(e.getKey(),elementsToAddBack);    }    requestParameters.putAll(queryParameters);  }  StringBuilder paramString=new StringBuilder();  for (  Map.Entry<String,SortedSet<String>> e : requestParameters.entrySet()) {    if (e.getValue().size() == 0) {      continue;    }    if (paramString.length() > 0) {      paramString.append(AMP);    }    int tempCounter=0;    for (    String value : e.getValue()) {      paramString.append(encode(e.getKey())).append(EQUALS).append((value));      if (tempCounter != e.getValue().size() - 1) {        paramString.append(AMP);      }      tempCounter++;    }  }  return paramString.toString();}  }
class C{  public boolean isDockedOnRecurse(DockWrapper w){  if (this.equals(w)) {    return true;  }  for (Iterator iter=dockedWrappers.iterator(); iter.hasNext(); ) {    DockWrapper dw=(DockWrapper)iter.next();    if (dw.isDockedOnRecurse(w)) {      return true;    }  }  return false;}  }
class C{  @Override public final String processString(String in){  try {    if (Ade.getAde().getConfigProperties().debug().isDebugMessageIdGeneration() >= 0) {      logger.trace("Input Message: " + in);    }  } catch (  AdeException e) {    logger.error("Error encountered tracing the input message: " + in,e);  }  return processStringWithoutTrace(in);}  }
class C{  private MethodDoc findImplMethod(MethodDoc interfaceMethod){  String name=interfaceMethod.name();  String desc=Util.methodDescriptorOf(interfaceMethod);  for (  MethodDoc implMethod : implClass.methods()) {    if (name.equals(implMethod.name()) && desc.equals(Util.methodDescriptorOf(implMethod))) {      return implMethod;    }  }  return null;}  }
class C{  protected Finishings(int value){  super(value);}  }
class C{  private synchronized void runScripts(List<String> scripts){  if (scripts.size() > 0) {    setOldStatusCode(getStatusCode());    setStatusCode(CODE_RUN_SCRIPTS);    JmriScriptEngineManager.getDefault().initializeAllEngines();    ThreadGroup root=Thread.currentThread().getThreadGroup();    int numberOfThreads=root.activeCount();    for (    String scriptPathname : scripts) {      try {        JmriScriptEngineManager.getDefault().runScript(new File(jmri.util.FileUtil.getExternalFilename(scriptPathname)));      } catch (      Exception e) {        log.error("Problem with script: {}",scriptPathname);      }    }    int count=0;    while (root.activeCount() > numberOfThreads) {      log.debug("Number of active threads: {}, at start: {}",root.activeCount(),numberOfThreads);      try {        wait(40);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();      }      if (count++ > 100) {        break;      }    }    setStatusCode(getOldStatusCode());  }}  }
class C{  public void assertNotEqual(Object expected,Object actual){  TestUtils.assertNotEqual(expected,actual);}  }
class C{  public JSONObject put(String key,double value,int round){  super.put(key,Math.round(value * Math.pow(10,round)) / Math.pow(10,round));  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public BeanEditItem(JComponent component,String description,String help){  this.component=component;  this.description=description;  this.help=help;}  }
class C{  public LocalTime toLocalTime(){  return new LocalTime(getMillis(),getChronology());}  }
class C{  private void disablePahoLogging(){  LogManager.getLogManager().reset();  logging=false;  HashMap<String,Connection> connections=(HashMap<String,Connection>)Connections.getInstance(context).getConnections();  if (!connections.isEmpty()) {    Entry<String,Connection> entry=connections.entrySet().iterator().next();    Connection connection=(Connection)entry.getValue();    connection.getClient().setTraceEnabled(false);    clientConnections.invalidateOptionsMenu();  } else {    Log.i("SampleListener","No connection to disable log in service");  }  clientConnections.invalidateOptionsMenu();}  }
class C{  public static boolean isNotEmpty(CharSequence string){  return string != null && string.length() > 0;}  }
class C{  public void unbox(final Type type){  Type t=NUMBER_TYPE;  Method sig=null;switch (type.getSort()) {case Type.VOID:    return;case Type.CHAR:  t=CHARACTER_TYPE;sig=CHAR_VALUE;break;case Type.BOOLEAN:t=BOOLEAN_TYPE;sig=BOOLEAN_VALUE;break;case Type.DOUBLE:sig=DOUBLE_VALUE;break;case Type.FLOAT:sig=FLOAT_VALUE;break;case Type.LONG:sig=LONG_VALUE;break;case Type.INT:case Type.SHORT:case Type.BYTE:sig=INT_VALUE;}if (sig == null) {checkCast(type);} else {checkCast(t);invokeVirtual(t,sig);}}  }
class C{  private List<MatchingDocs> createSampledDocs(List<MatchingDocs> matchingDocsList){  List<MatchingDocs> sampledDocsList=new ArrayList<>(matchingDocsList.size());  for (  MatchingDocs docs : matchingDocsList) {    sampledDocsList.add(createSample(docs));  }  return sampledDocsList;}  }
class C{  public FrameDecryptionHandler(final SecretKey decryptionKey,final short nonceLen,final CryptoAlgorithm cryptoAlgo,final byte[] messageId,final int frameLen){  decryptionKey_=decryptionKey;  nonceLen_=nonceLen;  cryptoAlgo_=cryptoAlgo;  messageId_=messageId;  frameSize_=frameLen;}  }
class C{  protected int calculateNewCapacity(final int proposedCapacity){  int newCapacity=1;  if (proposedCapacity > MAXIMUM_CAPACITY) {    newCapacity=MAXIMUM_CAPACITY;  } else {    while (newCapacity < proposedCapacity) {      newCapacity<<=1;    }    if (newCapacity > MAXIMUM_CAPACITY) {      newCapacity=MAXIMUM_CAPACITY;    }  }  return newCapacity;}  }
class C{  public boolean canDockSouth(){  List constraints=dockPanel.getConstraints(getChildren());  return DockConstraint.canDockSouth(constraints);}  }
class C{  private void sendAccessibilityEvent(int type){  AccessibilityManager accessibilityManager=AccessibilityManager.getInstance(mContext);  if (accessibilityManager.isEnabled()) {    AccessibilityEvent event=AccessibilityEvent.obtain(type);    accessibilityManager.sendAccessibilityEvent(event);switch (type) {case AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_START:{        mTouchExplorationInProgress=true;      }    break;case AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_END:{    mTouchExplorationInProgress=false;  }break;}}}  }
class C{  public DeleteReferencesResponse DeleteReferences(DeleteReferencesRequest req) throws ServiceFaultException, ServiceResultException {  return (DeleteReferencesResponse)channel.serviceRequest(req);}  }
class C{  public void logRowLimitExceeded(){  log(ActionStatisticsCollector.TYPE_ROW_LIMIT,ActionStatisticsCollector.VALUE_ROW_LIMIT_EXCEEDED,ActionStatisticsCollector.ARG_ROW_LIMIT_CHECK);  if (!rowLimitExceeded) {    rowLimitExceeded=true;    UsageStatistics.getInstance().scheduleTransmissionSoon();  }}  }
class C{  public ColumnArg(String columnName){  this.tableName=null;  this.columnName=columnName;}  }
class C{  public static void text(double x,double y,String s,double degrees){  double xs=scaleX(x);  double ys=scaleY(y);  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  text(x,y,s);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);}  }
class C{  private static boolean isMultiple(final Element element){  final String maxOccurs=getAttribute(element,"maxOccurs");  if (null != maxOccurs && !maxOccurs.equals("1")) {    return true;  }  return false;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  @SuppressWarnings("cast") static private final int bytes2u(byte inp){  return ((int)inp) & 0xff;}  }
class C{  public AsyncResult SetPublishingModeAsync(SetPublishingModeRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  public static vec3 r_add(vec3 a,vec3 b){  float x=a.m[0] + b.m[0];  float y=a.m[1] + b.m[1];  float z=a.m[2] + b.m[2];  vec3 result=new vec3(x,y,z);  return result;}  }
class C{  public HexLiteral createHexLiteral(){  HexLiteralImpl hexLiteral=new HexLiteralImpl();  return hexLiteral;}  }
class C{  public static final String stackStraceAsString(final Throwable exception){  final StringWriter stringWriter=new StringWriter();  exception.printStackTrace(new PrintWriter(stringWriter));  return stringWriter.toString();}  }
class C{  public static FormatTask createTask(Consumer<FormatExtension> test) throws Exception {  Project project=ProjectBuilder.builder().build();  SpotlessPlugin plugin=project.getPlugins().apply(SpotlessPlugin.class);  AtomicReference<FormatExtension> ref=new AtomicReference<>();  plugin.getExtension().format("underTest",null);  boolean check=false;  return plugin.createTask("underTest",ref.get(),check);}  }
class C{  protected RowValue readSqlData() throws SQLException, IOException {  final RowDescriptor rowDescriptor=getFieldDescriptor();  final RowValue rowValue=rowDescriptor.createDefaultFieldValues();  final BlrCalculator blrCalculator=getDatabase().getBlrCalculator();  final XdrInputStream xdrIn=getXdrIn();  final int nullBitsLen=(rowDescriptor.getCount() + 7) / 8;  final byte[] nullBitsBytes=xdrIn.readRawBuffer(nullBitsLen);  xdrIn.skipPadding(nullBitsLen);  final BitSet nullBits=BitSet.valueOf(nullBitsBytes);  for (int idx=0; idx < rowDescriptor.getCount(); idx++) {    final FieldDescriptor fieldDescriptor=rowDescriptor.getFieldDescriptor(idx);    final FieldValue fieldValue=rowValue.getFieldValue(idx);    if (nullBits.get(idx)) {      fieldValue.setFieldData(null);      continue;    }    final int len=blrCalculator.calculateIoLength(fieldDescriptor);    final byte[] buffer=readColumnData(xdrIn,len);    fieldValue.setFieldData(buffer);  }  return rowValue;}  }
class C{  public void updateOffScreen(int width,int height){  offScreenWidth=width;  offScreenHeight=height;}  }
class C{  public static Validator<CharSequence> notEmpty(@NonNull final Context context,@StringRes final int resourceId){  return new NotEmptyValidator(context,resourceId);}  }
class C{  public static ValueTimestampTimeZone parse(String s){  try {    return parseTry(s);  } catch (  Exception e) {    throw DbException.get(ErrorCode.INVALID_DATETIME_CONSTANT_2,e,"TIMESTAMP WITH TIMEZONE",s);  }}  }
class C{  public LongArray grow(LongArray array,long minSize){  if (minSize <= array.size()) {    return array;  }  final long newSize=overSize(minSize,LONG_PAGE_SIZE,RamUsageEstimator.NUM_BYTES_LONG);  return resize(array,newSize);}  }
class C{  protected AttributeSplitSuggestion searchForBestSplitOption(Node currentNode,AttributeSplitSuggestion currentBestOption,SplitCriterion criterion,int attIndex){  if (currentNode == null || countRightTotal == 0.0) {    return currentBestOption;  }  if (currentNode.left != null) {    currentBestOption=searchForBestSplitOption(currentNode.left,currentBestOption,criterion,attIndex);  }  sumTotalLeft+=currentNode.leftStatistics.getValue(1);  sumTotalRight-=currentNode.leftStatistics.getValue(1);  sumSqTotalLeft+=currentNode.leftStatistics.getValue(2);  sumSqTotalRight-=currentNode.leftStatistics.getValue(2);  countLeftTotal+=currentNode.leftStatistics.getValue(0);  countRightTotal-=currentNode.leftStatistics.getValue(0);  double[][] postSplitDists=new double[][]{{countLeftTotal,sumTotalLeft,sumSqTotalLeft},{countRightTotal,sumTotalRight,sumSqTotalRight}};  double[] preSplitDist=new double[]{(countLeftTotal + countRightTotal),(sumTotalLeft + sumTotalRight),(sumSqTotalLeft + sumSqTotalRight)};  double merit=criterion.getMeritOfSplit(preSplitDist,postSplitDists);  if ((currentBestOption == null) || (merit > currentBestOption.merit)) {    currentBestOption=new AttributeSplitSuggestion(new NumericAttributeBinaryTest(attIndex,currentNode.cut_point,true),postSplitDists,merit);  }  if (currentNode.right != null) {    currentBestOption=searchForBestSplitOption(currentNode.right,currentBestOption,criterion,attIndex);  }  sumTotalLeft-=currentNode.leftStatistics.getValue(1);  sumTotalRight+=currentNode.leftStatistics.getValue(1);  sumSqTotalLeft-=currentNode.leftStatistics.getValue(2);  sumSqTotalRight+=currentNode.leftStatistics.getValue(2);  countLeftTotal-=currentNode.leftStatistics.getValue(0);  countRightTotal+=currentNode.leftStatistics.getValue(0);  return currentBestOption;}  }
class C{  public double eval(double params[]){  return (1.0 / Math.sin(params[0]));}  }
class C{  public LongArrayList bottom(int n){  LongArrayList bottom=new LongArrayList();  long[] values=data.toLongArray();  LongArrays.parallelQuickSort(values);  for (int i=0; i < n && i < values.length; i++) {    bottom.add(values[i]);  }  return bottom;}  }
class C{  protected int addressToValue2(LocoIOMode lim,int address){  if (lim == null) {    return 0;  }  return (addressToValues(lim.getOpcode(),lim.getSV(),lim.getV2(),address) / 256) & 0x7F;}  }
class C{  public static boolean isMacOs(){  return mac;}  }
class C{  public void addActionListener(ActionListener al){  projListeners.add(al);}  }
class C{  private int encryptBlock(byte[] in,int inOff,byte[] out,int outOff){  int A=bytesToWord(in,inOff) + _S[0];  int B=bytesToWord(in,inOff + 4) + _S[1];  for (int i=1; i <= _noRounds; i++) {    A=rotateLeft(A ^ B,B) + _S[2 * i];    B=rotateLeft(B ^ A,A) + _S[2 * i + 1];  }  wordToBytes(A,out,outOff);  wordToBytes(B,out,outOff + 4);  return 2 * 4;}  }
class C{  public boolean isWriter(){  return opcode == Opcode.PUTFIELD || opcode == Opcode.PUTSTATIC;}  }
class C{  public static void main(String[] args) throws Exception {  ArrayList<File> directories=new ArrayList<>();  addDirectories(directories);  makeFiles(directories);}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public OptionScanNode buildTreeFromNodeTree(SwitchAccessNodeCompat root,OptionScanNode treeToBuildOn){  OptionScanNode tree=(treeToBuildOn != null) ? treeToBuildOn : new ClearFocusNode();  SortedMap<RowBounds,SortedMap<Integer,SwitchAccessNodeCompat>> nodesByXYCoordinate=getMapOfNodesByXYCoordinate(root);  for (  SortedMap<Integer,SwitchAccessNodeCompat> nodesInThisRow : nodesByXYCoordinate.values()) {    if (nodesInThisRow.size() < MIN_NODES_PER_ROW) {      for (      SwitchAccessNodeCompat node : nodesInThisRow.values()) {        tree=TreeBuilderUtils.addCompatToTree(node,tree);        node.recycle();      }    } else {      OptionScanNode rowTree=new ClearFocusNode();      for (      SwitchAccessNodeCompat node : nodesInThisRow.values()) {        rowTree=TreeBuilderUtils.addCompatToTree(node,rowTree);        node.recycle();      }      tree=new OptionScanSelectionNode(rowTree,tree);    }  }  return tree;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 168) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final char value){  buffer.append(value);}  }
class C{  public org.smpte_ra.schemas.st2067_2_2013.ContentVersionType buildContentVersionType(String id,org.smpte_ra.schemas.st2067_2_2013.UserTextType value){  ContentVersionType contentVersionType=new ContentVersionType();  contentVersionType.setId(id);  contentVersionType.setLabelText(value);  return contentVersionType;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  courseNbr="";  instructionalOfferings=null;  subjectAreas=new ArrayList();  divSec=new Boolean(false);  demand=new Boolean(false);  projectedDemand=new Boolean(false);  minPerWk=new Boolean(false);  limit=new Boolean(false);  roomLimit=new Boolean(false);  manager=new Boolean(false);  datePattern=new Boolean(false);  timePattern=new Boolean(false);  preferences=new Boolean(false);  instructor=new Boolean(false);  timetable=new Boolean(false);  credit=new Boolean(false);  subpartCredit=new Boolean(false);  schedulePrintNote=new Boolean(false);  note=new Boolean(false);  title=new Boolean(false);  consent=new Boolean(false);  exams=new Boolean(false);  sortBy=ClassCourseComparator.getName(ClassCourseComparator.SortBy.NAME);}  }
class C{  @Override public Adapter adapt(Notifier notifier,Object type){  return super.adapt(notifier,this);}  }
class C{  public BatchInterrupted(Throwable cause,int totalCount,int successCount,int errorCount){  this(getReasonFromException(cause),totalCount,successCount,errorCount);  if (cause instanceof ServiceException) {    ServiceException se=(ServiceException)cause;    content=se.getResponseBody();    contentType=se.getResponseContentType();  }}  }
class C{  public BaleenPipelineManager(){  super("Pipeline","pipelines");}  }
class C{  protected void test(String problemName){  Problem problem=ProblemFactory.getInstance().getProblem(problemName);  NondominatedPopulation referenceSet=ProblemFactory.getInstance().getReferenceSet(problemName);  NondominatedPopulation approximationSet=generateApproximationSet(problemName,100);  AdditiveEpsilonIndicator myIndicator=new AdditiveEpsilonIndicator(problem,referenceSet);  jmetal.qualityIndicator.Epsilon theirIndicator=new jmetal.qualityIndicator.Epsilon();  Normalizer normalizer=new Normalizer(problem,referenceSet);  double actual=myIndicator.evaluate(approximationSet);  double expected=theirIndicator.epsilon(toArray(normalizer.normalize(approximationSet)),toArray(normalizer.normalize(referenceSet)),problem.getNumberOfObjectives());  Assert.assertEquals(expected,actual,Settings.EPS);  actual=myIndicator.evaluate(referenceSet);  Assert.assertEquals(0.0,actual,Settings.EPS);}  }
class C{  private static int filterToInteger(final certFilters filter){switch (filter) {case ACTIVE_CERTIFICATES:    return 0;case REVOKED_CERTIFICATES:  return 1;case EXPIRED_CERTIFICATES:return 2;case ALL_CERTIFICATES:return 4;}return 0;}  }
class C{  @Override public void releaseNewVersionLock(){}  }
class C{  public void clearLock(boolean isFallback){  if (!isFallback)   deleteGallery();  saveLockPassword(null,DevicePolicyManager.PASSWORD_QUALITY_SOMETHING);  setLockPatternEnabled(false);  saveLockPattern(null);  setLong(PASSWORD_TYPE_KEY,DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);  setLong(PASSWORD_TYPE_ALTERNATE_KEY,DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public List fetchRowsByUInstalacion(String idRelacion,String idUnidadInstalacion){  StringBuffer qual=new StringBuffer(DBUtils.WHERE).append(ID_COLUMN_NAME);  if (idUnidadInstalacion != null) {    qual.append(" in (select ").append(UdocEnUIDBEntityImpl.UDOC_COLUMN_NAME).append(" from ").append(UdocEnUIDBEntityImpl.TABLE_NAME).append(DBUtils.WHERE).append(DBUtils.generateEQTokenField(UdocEnUIDBEntityImpl.UINSTALACION_RELACION_FIELD,idUnidadInstalacion));  } else {    qual.append(" not in (select ").append(UdocEnUIDBEntityImpl.UDOC_COLUMN_NAME).append(" from ").append(UdocEnUIDBEntityImpl.TABLE_NAME).append(DBUtils.WHERE).append(DBUtils.generateEQTokenField(UdocEnUIDBEntityImpl.ID_RELACION_FIELD,idRelacion));  }  return getUnidadesDocumentales(qual.toString());}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public Object postMessage(String id,Object data){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      Object obj=plugin.onMessage(id,data);      if (obj != null) {        return obj;      }    }  }  return ctx.onMessage(id,data);}  }
class C{  public boolean contains(final int[] a){  int i=d, l=a.length;  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(a,l,i)))   return false;  return true;}  }
class C{  public boolean testSphere(Vector3fc center,float radius){  return testSphere(center.x(),center.y(),center.z(),radius);}  }
class C{  public static RedisQueue create(final String name){  return create(new Config().useSingleServer().setAddress("127.0.0.1:6379"),name);}  }
class C{  public void testLikeEscapeSequence() throws Exception {  check("ESCAPE '\\'","{'\\'}");  check("ESCAPE '\\'","{escape '\\'}");  check("ESCAPE ''","{''}");  check("ESCAPE ''","{escape ''}");  check("select * from t where value LIKE '\\%AAA%' ESCAPE '\\'","select * from t where value LIKE '\\%AAA%' {'\\'}");  check("select * from t where value LIKE '\\%AAA%' ESCAPE '\\'","select * from t where value LIKE '\\%AAA%' {escape '\\'}");  check("select * from t where value LIKE '\\%AAA%' ESCAPE '\\' ORDER BY id;","select * from t where value LIKE '\\%AAA%' {'\\'} ORDER BY id;");  check("select * from t where value LIKE '\\%AAA%' ESCAPE '\\' ORDER BY id;","select * from t where value LIKE '\\%AAA%' {escape '\\'} ORDER BY id;");  check("select * from t where value LIKE '\\%AAA''s%' ESCAPE '\\'","select * from t where value LIKE '\\%AAA''s%' {escape '\\'}");}  }
class C{  @Override public void onCompletion(int token,int result){  getArgs().getCounter().add(result);  executeImpl();}  }
class C{  public int add(GL10 gl,Drawable background,String text,Paint textPaint,int minWidth,int minHeight){  checkState(STATE_ADDING,STATE_ADDING);  boolean drawBackground=background != null;  boolean drawText=(text != null) && (textPaint != null);  Rect padding=new Rect();  if (drawBackground) {    background.getPadding(padding);    minWidth=Math.max(minWidth,background.getMinimumWidth());    minHeight=Math.max(minHeight,background.getMinimumHeight());  }  int ascent=0;  int descent=0;  int measuredTextWidth=0;  if (drawText) {    ascent=(int)Math.ceil(-textPaint.ascent());    descent=(int)Math.ceil(textPaint.descent());    measuredTextWidth=(int)Math.ceil(textPaint.measureText(text));  }  int textHeight=ascent + descent;  int textWidth=Math.min(mStrikeWidth,measuredTextWidth);  int padHeight=padding.top + padding.bottom;  int padWidth=padding.left + padding.right;  int height=Math.max(minHeight,textHeight + padHeight);  int width=Math.max(minWidth,textWidth + padWidth);  int effectiveTextHeight=height - padHeight;  int effectiveTextWidth=width - padWidth;  int centerOffsetHeight=(effectiveTextHeight - textHeight) / 2;  int centerOffsetWidth=(effectiveTextWidth - textWidth) / 2;  int u=mU;  int v=mV;  int lineHeight=mLineHeight;  if (width > mStrikeWidth) {    width=mStrikeWidth;  }  if (u + width > mStrikeWidth) {    u=0;    v+=lineHeight;    lineHeight=0;  }  lineHeight=Math.max(lineHeight,height);  if (v + lineHeight > mStrikeHeight) {    throw new IllegalArgumentException("Out of texture space.");  }  int u2=u + width;  int vBase=v + ascent;  int v2=v + height;  if (drawBackground) {    background.setBounds(u,v,u + width,v + height);    background.draw(mCanvas);  }  if (drawText) {    mCanvas.drawText(text,u + padding.left + centerOffsetWidth,vBase + padding.top + centerOffsetHeight,textPaint);  }  Grid grid=new Grid(2,2);  float texU=u * mTexelWidth;  float texU2=u2 * mTexelWidth;  float texV=1.0f - v * mTexelHeight;  float texV2=1.0f - v2 * mTexelHeight;  grid.set(0,0,0.0f,0.0f,0.0f,texU,texV2);  grid.set(1,0,width,0.0f,0.0f,texU2,texV2);  grid.set(0,1,0.0f,height,0.0f,texU,texV);  grid.set(1,1,width,height,0.0f,texU2,texV);  mU=u + width;  mV=v;  mLineHeight=lineHeight;  mLabels.add(new Label(grid,width,height,ascent,u,v + height,width,-height));  return mLabels.size() - 1;}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public static long floorDiv(final long x,final int y){  return floorDiv(x,(long)y);}  }
class C{  public String text(){  if (value instanceof String) {    return (String)value;  }  if (value instanceof NodeList) {    return ((NodeList)value).text();  }  if (value instanceof Collection) {    Collection coll=(Collection)value;    String previousText=null;    StringBuilder sb=null;    for (    Object child : coll) {      String childText=null;      if (child instanceof String) {        childText=(String)child;      } else       if (child instanceof Node) {        childText=((Node)child).text();      }      if (childText != null) {        if (previousText == null) {          previousText=childText;        } else {          if (sb == null) {            sb=new StringBuilder();            sb.append(previousText);          }          sb.append(childText);        }      }    }    if (sb != null) {      return sb.toString();    } else {      if (previousText != null) {        return previousText;      }      return "";    }  }  return "" + value;}  }
class C{  public void writeMessage(final int fieldNumber,final MessageLite value) throws IOException {  writeTag(fieldNumber,WireFormat.WIRETYPE_LENGTH_DELIMITED);  writeMessageNoTag(value);}  }
class C{  public UniversalClock(Parameter rateParameter,Parameter massParameter,Parameter temperatureParameter,Parameter scaleParameter){  super(UNIVERSAL_CLOCK);  this.rateParameter=rateParameter;  this.massParameter=massParameter;  this.temperatureParameter=temperatureParameter;  this.scaleParameter=scaleParameter;  addVariable(massParameter);  addVariable(temperatureParameter);  addVariable(scaleParameter);}  }
class C{  private void sendGroupChangeEvent(){  StendhalRPRuleProcessor ruleProcessor=SingletonRepository.getRuleProcessor();  List<String> members=new LinkedList<String>(membersAndLastSeen.keySet());  RPEvent event=new GroupChangeEvent(leader,members,lootmode);  for (  String playerName : membersAndLastSeen.keySet()) {    Player player=ruleProcessor.getPlayer(playerName);    if (player != null) {      player.addEvent(event);      player.notifyWorldAboutChanges();    }  }}  }
class C{  private void updateSubtree(){  CnATreeElement element=getCnaTreeElementDao().findById(getElementId());  update(element,getScopeId());}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_LOCAL_DEVICE_DB'";  db.execSQL(sql);}  }
class C{  private static @Nullable View findTouchTargetViewWithPointerEvents(float eventCoords[],View view){  PointerEvents pointerEvents=view instanceof ReactPointerEventsView ? ((ReactPointerEventsView)view).getPointerEvents() : PointerEvents.AUTO;  if (pointerEvents == PointerEvents.NONE) {    return null;  } else   if (pointerEvents == PointerEvents.BOX_ONLY) {    return view;  } else   if (pointerEvents == PointerEvents.BOX_NONE) {    if (view instanceof ViewGroup) {      View targetView=findTouchTargetView(eventCoords,(ViewGroup)view);      if (targetView != view) {        return targetView;      }      if (view instanceof ReactCompoundView) {        int reactTag=((ReactCompoundView)view).reactTagForTouch(eventCoords[0],eventCoords[1]);        if (reactTag != view.getId()) {          return view;        }      }    }    return null;  } else   if (pointerEvents == PointerEvents.AUTO) {    if (view instanceof ReactCompoundViewGroup) {      if (((ReactCompoundViewGroup)view).interceptsTouchEvent(eventCoords[0],eventCoords[1])) {        return view;      }    }    if (view instanceof ViewGroup) {      return findTouchTargetView(eventCoords,(ViewGroup)view);    }    return view;  } else {    throw new JSApplicationIllegalArgumentException("Unknown pointer event type: " + pointerEvents.toString());  }}  }
class C{  private void importLocalIDStore(Element extEle) throws Exception {  if (extEle == null) {    return;  }  NodeList nodes=extEle.getElementsByTagName(SAMLNames.LOCALOSIDSTORE);  if (nodes.getLength() == 0) {    return;  }  Element localStoreEle=(Element)nodes.item(0);  if (this.tenantName.equalsIgnoreCase(this.idmClient.getDefaultTenant())) {    if (!localStoreEle.hasAttribute(SAMLNames.IDNAME)) {      throw new IDMException("SAML medadata error: !" + SAMLNames.LOCALOSIDSTORE + " expect name attribute.");    }    String localOsDomainName=localStoreEle.getAttribute(SAMLNames.IDNAME);    IIdentityStoreData localOsProvider=IdentityStoreData.CreateLocalOSIdentityStoreData(localOsDomainName);    Collection<IIdentityStoreData> existLocalOsDomainName=idmClient.getProviders(this.tenantName,EnumSet.of(DomainType.LOCAL_OS_DOMAIN));    if (existLocalOsDomainName != null && !existLocalOsDomainName.isEmpty()) {      this.idmClient.deleteProvider(this.tenantName,existLocalOsDomainName.iterator().next().getName());    }    this.idmClient.addProvider(this.tenantName,localOsProvider);  }}  }
class C{  public MarketplaceRemovedException(){}  }
class C{  private Set intersectIPRange(byte[] ipWithSubmask1,byte[] ipWithSubmask2){  if (ipWithSubmask1.length != ipWithSubmask2.length) {    return Collections.EMPTY_SET;  }  byte[][] temp=extractIPsAndSubnetMasks(ipWithSubmask1,ipWithSubmask2);  byte ip1[]=temp[0];  byte subnetmask1[]=temp[1];  byte ip2[]=temp[2];  byte subnetmask2[]=temp[3];  byte minMax[][]=minMaxIPs(ip1,subnetmask1,ip2,subnetmask2);  byte[] min;  byte[] max;  max=min(minMax[1],minMax[3]);  min=max(minMax[0],minMax[2]);  if (compareTo(min,max) == 1) {    return Collections.EMPTY_SET;  }  byte[] ip=or(minMax[0],minMax[2]);  byte[] subnetmask=or(subnetmask1,subnetmask2);  return Collections.singleton(ipWithSubnetMask(ip,subnetmask));}  }
class C{  public void put(ByteBuffer buffer){  if (value.length() > 0) {    FIXTags.put(buffer,tag);    value.put(buffer);  }}  }
class C{  public static void createParentDirs(File file) throws IOException {  checkNotNull(file);  File parent=file.getCanonicalFile().getParentFile();  if (parent == null) {    return;  }  parent.mkdirs();  if (!parent.isDirectory()) {    throw new IOException("Unable to create parent directories of " + file);  }}  }
class C{  private void readBinary(final LittleEndianDataInputStream dis) throws IOException {  RajLog.i("StlPaser: Reading Binary");  dis.skip(80);  int facetCount=dis.readInt();  float[] verticesArr=new float[facetCount * 9];  float[] normalsArr=new float[facetCount * 9];  int[] indicesArr=new int[facetCount * 3];  float[] tempNorms=new float[3];  int vertPos=0, normPos=0;  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;  while (dis.available() > 0) {    for (int j=0; j < 3; j++) {      tempNorms[j]=dis.readFloat();      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {        RajLog.w("STL contains bad normals of NaN or Infinite!");        tempNorms[0]=0;        tempNorms[1]=0;        tempNorms[2]=0;        break;      }    }    for (int j=0; j < 3; j++) {      normalsArr[normPos++]=tempNorms[0];      normalsArr[normPos++]=tempNorms[1];      normalsArr[normPos++]=tempNorms[2];    }    for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dis.readFloat();    dis.skip(2);  }  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);}  }
class C{  private void stopTimer(){  timer.cancel();}  }
class C{  @Override public int showFeedback(String message){  host.showFeedback(message);  return -1;}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  private View findFocusableViewInBounds(boolean leftFocus,int left,int right){  List<View> focusables=getFocusables(View.FOCUS_FORWARD);  View focusCandidate=null;  boolean foundFullyContainedFocusable=false;  int count=focusables.size();  for (int i=0; i < count; i++) {    View view=focusables.get(i);    int viewLeft=view.getLeft();    int viewRight=view.getRight();    if (left < viewRight && viewLeft < right) {      final boolean viewIsFullyContained=(left < viewLeft) && (viewRight < right);      if (focusCandidate == null) {        focusCandidate=view;        foundFullyContainedFocusable=viewIsFullyContained;      } else {        final boolean viewIsCloserToBoundary=(leftFocus && viewLeft < focusCandidate.getLeft()) || (!leftFocus && viewRight > focusCandidate.getRight());        if (foundFullyContainedFocusable) {          if (viewIsFullyContained && viewIsCloserToBoundary) {            focusCandidate=view;          }        } else {          if (viewIsFullyContained) {            focusCandidate=view;            foundFullyContainedFocusable=true;          } else           if (viewIsCloserToBoundary) {            focusCandidate=view;          }        }      }    }  }  return focusCandidate;}  }
class C{  public String entityDataHttps(){  return entityDataHttps;}  }
class C{  public SimpleProvider(){  mUriMatcher=new UriMatcher(UriMatcher.NO_MATCH);  mUriMatcher.addURI(AUTHORITY,MainTable.TABLE_NAME,MAIN);  mUriMatcher.addURI(AUTHORITY,MainTable.TABLE_NAME + "/#",MAIN_ID);  mNotesProjectionMap=new HashMap<String,String>();  mNotesProjectionMap.put(MainTable._ID,MainTable._ID);  mNotesProjectionMap.put(MainTable.COLUMN_NAME_DATA,MainTable.COLUMN_NAME_DATA);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static State parseLogoutResponse(Map<String,String> parameterMap) throws OIDCClientException, OIDCServerException {  Validate.notNull(parameterMap,"parameterMap");  return parseLogoutResponse(httpRequestFromMap(parameterMap));}  }
class C{  private void removeVolumesFromStorageViewAndMask(VPlexApiClient client,ExportMask exportMask,List<URI> volumeURIList) throws Exception {  List<Initiator> initiators=new ArrayList<Initiator>();  if (exportMask.getUserAddedInitiators() != null && !exportMask.getUserAddedInitiators().isEmpty()) {    Iterator<Initiator> initItr=_dbClient.queryIterativeObjects(Initiator.class,URIUtil.toURIList(exportMask.getUserAddedInitiators().values()),true);    while (initItr.hasNext()) {      initiators.add(initItr.next());    }  }  StorageSystem vplex=_dbClient.queryObject(StorageSystem.class,exportMask.getStorageDevice());  validator.removeVolumes(vplex,exportMask.getId(),initiators).validate();  if (volumeURIList.isEmpty()) {    return;  }  Map<URI,BlockObject> blockObjectCache=new HashMap<URI,BlockObject>();  List<String> blockObjectNames=new ArrayList<String>();  for (  URI boURI : volumeURIList) {    BlockObject blockObject=Volume.fetchExportMaskBlockObject(_dbClient,boURI);    blockObjectNames.add(blockObject.getDeviceLabel());    blockObjectCache.put(blockObject.getId(),blockObject);  }  String vplexClusterName=VPlexUtil.getVplexClusterName(exportMask,vplex.getId(),client,_dbClient);  _log.info("about to remove {} from StorageView {} on cluster {}",blockObjectNames,exportMask.getMaskName(),vplexClusterName);  client.removeVirtualVolumesFromStorageView(exportMask.getMaskName(),vplexClusterName,blockObjectNames);  exportMask.removeVolumes(volumeURIList);  for (  URI volumeURI : volumeURIList) {    BlockObject blockObject=blockObjectCache.get(volumeURI);    if (blockObject != null) {      if (blockObject.getWWN() != null) {        exportMask.removeFromUserCreatedVolumes(blockObject);      } else {        _log.warn("Could not remove volume " + blockObject.getId() + " from export mask "+ exportMask.getLabel()+ " because it does not have a WWN.  Assumed not in mask, likely part of a rollback operation");      }    }  }  if (!exportMask.hasAnyUserAddedVolumes()) {    _log.info("updating ExportGroups containing this ExportMask");    List<ExportGroup> exportGroups=ExportMaskUtils.getExportGroups(_dbClient,exportMask);    for (    ExportGroup exportGroup : exportGroups) {      _log.info("Removing mask from ExportGroup " + exportGroup.getGeneratedName());      exportGroup.removeExportMask(exportMask.getId());      _dbClient.updateObject(exportGroup);    }    _log.info("marking this mask for deletion from ViPR: " + exportMask.getMaskName());    _dbClient.markForDeletion(exportMask);  }  _dbClient.updateObject(exportMask);  _log.info("successfully removed " + blockObjectNames + " from StorageView "+ exportMask.getMaskName());}  }
class C{  public TabbedInspector(SimpleProperties properties,GUIState state,String name,String[][][] tabGroupProperties,String[][] tabGroups,String[] tabNames,String extraTab){  buildTabbedInspector(properties,state,name,tabGroupProperties,tabGroups,tabNames,extraTab);}  }
class C{  public RegistrationLink(String url,String browserTarget){  this.url=url;  this.browserTarget=browserTarget;}  }
class C{  int partner(int tokenIndex){  int bracketIndex=bracketIndexForToken(tokenIndex);  if (bracketIndex < 0) {    return -1;  }  return brackets[(bracketIndex << 1) + 1];}  }
class C{  public SkeinEngine(SkeinEngine engine){  this(engine.getBlockSize() * 8,engine.getOutputSize() * 8);  copyIn(engine);}  }
class C{  void sendMouseEventCode(MotionEvent e,int button,boolean pressed){  int x=(int)(e.getX() / mRenderer.mFontWidth) + 1;  int y=(int)((e.getY() - mRenderer.mFontLineSpacingAndAscent) / mRenderer.mFontLineSpacing) + 1;  if (pressed && (button == TerminalEmulator.MOUSE_WHEELDOWN_BUTTON || button == TerminalEmulator.MOUSE_WHEELUP_BUTTON)) {    if (mMouseStartDownTime == e.getDownTime()) {      x=mMouseScrollStartX;      y=mMouseScrollStartY;    } else {      mMouseStartDownTime=e.getDownTime();      mMouseScrollStartX=x;      mMouseScrollStartY=y;    }  }  mEmulator.sendMouseEvent(button,x,y,pressed);}  }
class C{  public boolean match(ArrayInitializer node,Object other){  if (!(other instanceof ArrayInitializer)) {    return false;  }  ArrayInitializer o=(ArrayInitializer)other;  return safeSubtreeListMatch(node.expressions(),o.expressions());}  }
class C{  AlertService(ArgusHttpClient client){  super(client);}  }
class C{  public static String formatRateString(float rate){  return String.format(Locale.US,"%.2fx",rate);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.OPERATION__PARAMETERS:    return parameters != null && !parameters.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private static void s_uarsqkp(SparseBlock a,double[] c,int m,int n,KahanObject kbuff,KahanPlusSq kplusSq,int rl,int ru){  for (int i=rl, cix=rl * 2; i < ru; i++, cix+=2) {    if (!a.isEmpty(i)) {      kbuff.set(0,0);      sumSq(a.values(i),a.pos(i),a.size(i),kbuff,kplusSq);      c[cix + 0]=kbuff._sum;      c[cix + 1]=kbuff._correction;    }  }}  }
class C{  public TomcatManagerException(Throwable cause){  super(cause);}  }
class C{  public void visit(TagHandler handler){  if (code == stagDefineFont2)   handler.defineFont2(this);}  }
class C{  public Endpoint withDefaultPort(int defaultPort){  ensureSingle();  validatePort("defaultPort",defaultPort);  return port != 0 ? this : new Endpoint(host(),defaultPort,weight());}  }
class C{  private long parseLong(String longAsString) throws ReplicatorException {  try {    return Long.parseLong(longAsString);  } catch (  NumberFormatException e) {    throw new ReplicatorException("Malformed event ID; unable to parse number value: eventId=" + eventId + " number="+ longAsString);  }}  }
class C{  protected void onSetChannelBan(String channel,String sourceNick,String sourceLogin,String sourceHostname,String hostmask){}  }
class C{  private boolean addEntryHelper(TestEntry testEntry,User user,long createTime,String parentId,TestEntrySet testEntrySet,Errors errors){  if (testEntry == null) {    return false;  }  if (testEntry.getValue() == null) {    return false;  }  long entryCreateTime=createTime;  if (testEntry.getCreateTime() != -1) {    entryCreateTime=testEntry.getCreateTime();  }  Entry entry=null;  if (testEntry.getIsSource()) {    entry=updateOrCreateSource(user,null,testEntry.getValue(),testEntry.getValue(),entryCreateTime,entryCreateTime,false,errors);  } else {    if (testEntry.getRootValue() != null) {      entry=createEntryNoteBook(user,testEntry.getValue(),entryCreateTime,parentId,parentId == null ? null : TreeRelType.Parent,false,false,false,false,false,errors);      if (entry != null) {        Entry root=getEntryById(entry.getRootId());        root.setNote(testEntry.getRootValue());      }    } else     if (testEntry.getNotebookValue() != null) {      Entry notebook=getEntryById(testEntrySet.getRootEntryByValue(testEntry.getNotebookValue()).getId());      if (notebook != null) {        entry=getEntryById(notebook.getRootId());      }    } else {      Entry source=null;      String type=parentId == null ? DbLogic.Constants.root : null;      if (testEntry.getSourceValue() != null) {        type=DbLogic.Constants.quotation;        source=getEntryById(testEntrySet.getRootEntryByValue(testEntry.getSourceValue()).getId());      }      entry=createSimpleEntry(user,testEntry.getValue(),entryCreateTime,parentId,parentId == null ? null : TreeRelType.Parent,false,false,false,false,type,errors,source);    }  }  if (entry == null) {    return false;  }  if (entry.getId() == null) {    return false;  }  testEntry.setId(entry.getId());  if (testEntry.getChildren() != null) {    for (    final TestEntry child : testEntry.getChildren()) {      if (child == null) {        return false;      }      if (!addEntryHelper(child,user,createTime,entry.getId(),testEntrySet,errors)) {        return false;      }    }  }  return true;}  }
class C{  public void render(DrawContext dc,Matrix matrix){  this.currentData=(AbstractShapeData)this.shapeDataCache.getEntry(dc.getGlobe());  if (this.currentData == null) {    this.currentData=this.createCacheEntry(dc);    this.shapeDataCache.addEntry(this.currentData);  }  ShapeData current=(ShapeData)this.currentData;  current.renderMatrix=matrix;  ExtentCacheKey extentCacheKey=new ExtentCacheKey(dc.getGlobe(),matrix);  Extent extent=this.extentCache.get(extentCacheKey);  if (extent == null) {    extent=this.computeExtent(dc);    this.extentCache.put(extentCacheKey,extent);  }  current.setExtent(extent);  this.render(dc);}  }
class C{  public static ExecutionContext createDeepCopyExecutionContext(ExecutionContext ec) throws CloneNotSupportedException, DMLRuntimeException {  ExecutionContext cpec=ExecutionContextFactory.createContext(false,ec.getProgram());  cpec.setVariables((LocalVariableMap)ec.getVariables().clone());  for (  String var : cpec.getVariables().keySet()) {    Data dat=cpec.getVariables().get(var);    if (dat instanceof MatrixObject && ((MatrixObject)dat).getUpdateType().isInPlace()) {      MatrixObject mo=(MatrixObject)dat;      MatrixObject moNew=new MatrixObject(mo);      if (mo.getNnz() != 0) {        MatrixBlock mbVar=mo.acquireRead();        moNew.acquireModify(new MatrixBlock(mbVar));        mo.release();      } else {        moNew.acquireModify(new MatrixBlock((int)mo.getNumRows(),(int)mo.getNumColumns(),false));      }      moNew.release();      cpec.setVariable(var,moNew);    }  }  return cpec;}  }
class C{  public RegionBounds complement(Collection<Region> complement){  Cuboid result=Cuboid.between(this.cuboid.minimum(),this.cuboid.maximum());  for (  Region substract : complement) {    result=Cuboid.complement(result,substract.getBounds().getCuboid());  }  return new RegionBounds(match,result);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tSpecify the expression to apply. Eg. pow(A,6)/(MEAN+MAX)" + "\n\tSupported operators are +, -, *, /, pow, log," + "\n\tabs, cos, exp, sqrt, tan, sin, ceil, floor, rint, (, ), "+ "\n\tMEAN, MAX, MIN, SD, COUNT, SUM, SUMSQUARED, ifelse. The 'A'"+ "\n\tletter refers to the value of the attribute being processed."+ "\n\tOther attribute values (numeric only) can be accessed through"+ "\n\tthe variables A1, A2, A3, ...","E",1,"-E <expression>"));  result.addElement(new Option("\tSpecify list of columns to ignore. First and last are valid\n" + "\tindexes. (default none)","R",1,"-R <index1,index2-index4,...>"));  result.addElement(new Option("\tInvert matching sense (i.e. only modify specified columns)","V",0,"-V"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public void testSupportsRefCursors() throws Exception {  assertFalse(this.conn.getMetaData().supportsRefCursors());}  }
class C{  public boolean hasDuplicateRings(){  for (Iterator nodeIt=nodeGraph.getNodeIterator(); nodeIt.hasNext(); ) {    RelateNode node=(RelateNode)nodeIt.next();    for (Iterator i=node.getEdges().iterator(); i.hasNext(); ) {      EdgeEndBundle eeb=(EdgeEndBundle)i.next();      if (eeb.getEdgeEnds().size() > 1) {        invalidPoint=eeb.getEdge().getCoordinate(0);        return true;      }    }  }  return false;}  }
class C{  public void showFloatingActionButton(){  if (mHidden) {    ObjectAnimator scaleX=ObjectAnimator.ofFloat(this,"scaleX",0,1);    ObjectAnimator scaleY=ObjectAnimator.ofFloat(this,"scaleY",0,1);    AnimatorSet animSetXY=new AnimatorSet();    animSetXY.playTogether(scaleX,scaleY);    animSetXY.setInterpolator(overshootInterpolator);    animSetXY.setDuration(200);    animSetXY.start();    mHidden=false;  }}  }
class C{  public ON ON(String columns){  return new ON(this,columns);}  }
class C{  public static SymbolTable makeLocalSymtab(IonSystem system,String[] localSymbols,SymbolTable... imports){  SymbolTable localSymtab=system.newLocalSymbolTable(imports);  for (  String localSymbol : localSymbols) {    localSymtab.intern(localSymbol);  }  return localSymtab;}  }
class C{  public static void removeNotUsedStopFacilities(TransitSchedule schedule){  log.info("... Removing not used stop facilities");  int removed=0;  Set<Id<TransitStopFacility>> usedStopFacilities=new HashSet<>();  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      for (      TransitRouteStop stop : route.getStops()) {        usedStopFacilities.add(stop.getStopFacility().getId());      }    }  }  Set<TransitStopFacility> unusedStopFacilites=new HashSet<>();  for (  Id<TransitStopFacility> facilityId : schedule.getFacilities().keySet()) {    if (!usedStopFacilities.contains(facilityId)) {      unusedStopFacilites.add(schedule.getFacilities().get(facilityId));    }  }  for (  TransitStopFacility facility : unusedStopFacilites) {    schedule.removeStopFacility(facility);    removed++;  }  log.info("    " + removed + " stop facilities removed");}  }
class C{  private void handleHtmlDoCheckForErrors(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,servletText.pageTitleCheckDbForErrors(),true).setPaneId("checkForErrors");  pageWrapper.addHeader();  final String csrft=requestAndResponse.getParameter("csrft");  if (isTheCsrftWrong(requestAndResponse,csrft)) {    requestAndResponse.print(servletText.errorRequiresSignIn(false));  } else   if (!isUserAnAdmin(requestAndResponse)) {    requestAndResponse.print(servletText.errorPageNotAllowed());  } else {    final Errors errors=new Errors();    final boolean hasErrors=dbLogic.hasErrors(errors);    requestAndResponse.print(hasErrors ? servletText.sentenceTheDatabaseHasErrors() : servletText.sentenceTheDatabaseHasNoErrors());    errorsToHTML(errors,requestAndResponse.response.getWriter());  }  pageWrapper.addFooter();}  }
class C{  public static void redirect(InputStream inputStream,OutputStream outputStream){  new RedirectStream(inputStream,outputStream).start();}  }
class C{  private boolean intersectsToleranceSquare(Coordinate p0,Coordinate p1){  boolean intersectsLeft=false;  boolean intersectsBottom=false;  li.computeIntersection(p0,p1,corner[0],corner[1]);  if (li.isProper())   return true;  li.computeIntersection(p0,p1,corner[1],corner[2]);  if (li.isProper())   return true;  if (li.hasIntersection())   intersectsLeft=true;  li.computeIntersection(p0,p1,corner[2],corner[3]);  if (li.isProper())   return true;  if (li.hasIntersection())   intersectsBottom=true;  li.computeIntersection(p0,p1,corner[3],corner[0]);  if (li.isProper())   return true;  if (intersectsLeft && intersectsBottom)   return true;  if (p0.equals(pt))   return true;  if (p1.equals(pt))   return true;  return false;}  }
class C{  public void createScheduler(String schedulerName,String schedulerInstanceId,ThreadPool threadPool,ThreadExecutor threadExecutor,JobStore jobStore,Map<String,SchedulerPlugin> schedulerPluginMap,String rmiRegistryHost,int rmiRegistryPort,long idleWaitTime,long dbFailureRetryInterval,boolean jmxExport,String jmxObjectName,int maxBatchSize,long batchTimeWindow) throws SchedulerException {  JobRunShellFactory jrsf=new StdJobRunShellFactory();  threadPool.initialize();  QuartzSchedulerResources qrs=new QuartzSchedulerResources();  qrs.setName(schedulerName);  qrs.setInstanceId(schedulerInstanceId);  SchedulerDetailsSetter.setDetails(threadPool,schedulerName,schedulerInstanceId);  qrs.setJobRunShellFactory(jrsf);  qrs.setThreadPool(threadPool);  qrs.setThreadExecutor(threadExecutor);  qrs.setJobStore(jobStore);  qrs.setMaxBatchSize(maxBatchSize);  qrs.setBatchTimeWindow(batchTimeWindow);  qrs.setRMIRegistryHost(rmiRegistryHost);  qrs.setRMIRegistryPort(rmiRegistryPort);  qrs.setJMXExport(jmxExport);  if (jmxObjectName != null) {    qrs.setJMXObjectName(jmxObjectName);  }  if (schedulerPluginMap != null) {    for (Iterator<SchedulerPlugin> pluginIter=schedulerPluginMap.values().iterator(); pluginIter.hasNext(); ) {      qrs.addSchedulerPlugin(pluginIter.next());    }  }  QuartzScheduler qs=new QuartzScheduler(qrs,idleWaitTime,dbFailureRetryInterval);  ClassLoadHelper cch=new CascadingClassLoadHelper();  cch.initialize();  SchedulerDetailsSetter.setDetails(jobStore,schedulerName,schedulerInstanceId);  jobStore.initialize(cch,qs.getSchedulerSignaler());  Scheduler scheduler=new StdScheduler(qs);  jrsf.initialize(scheduler);  qs.initialize();  if (schedulerPluginMap != null) {    for (Iterator<Entry<String,SchedulerPlugin>> pluginEntryIter=schedulerPluginMap.entrySet().iterator(); pluginEntryIter.hasNext(); ) {      Entry<String,SchedulerPlugin> pluginEntry=pluginEntryIter.next();      pluginEntry.getValue().initialize(pluginEntry.getKey(),scheduler,cch);    }  }  getLog().info("Quartz scheduler '" + scheduler.getSchedulerName());  getLog().info("Quartz scheduler version: " + qs.getVersion());  SchedulerRepository schedRep=SchedulerRepository.getInstance();  qs.addNoGCObject(schedRep);  schedRep.bind(scheduler);  initialized=true;}  }
class C{  public static boolean isBuiltInDatatype(IRI datatype){  return isPrimitiveDatatype(datatype) || isDerivedDatatype(datatype);}  }
class C{  public boolean saveAnswer(FormIndex index,IAnswerData data) throws JavaRosaException {  try {    return mFormEntryController.saveAnswer(index,data,true);  } catch (  Exception e) {    throw new JavaRosaException(e);  }}  }
class C{  protected void applyColorTheme(){  getTheme().applyStyle(new FontPreferences(this).getCommentFontStyle().getResId(),true);  getTheme().applyStyle(new FontPreferences(this).getPostFontStyle().getResId(),true);  getTheme().applyStyle(new ColorPreferences(this).getFontStyle().getBaseId(),true);}  }
class C{  @Field(1) public int image_channel_data_type(){  return this.io.getIntField(this,1);}  }
class C{  public RegionData(DrawContext dc,long minExpiryTime,long maxExpiryTime){  super(dc,minExpiryTime,maxExpiryTime);}  }
class C{  @Hidden static Object invoke__V(MethodHandle mh,Object[] a) throws Throwable {  assert (arityCheck(0,void.class,mh,a));  mh.invokeBasic();  return null;}  }
class C{  public void deleteModule(final Module module) throws CouldntDeleteException {  Preconditions.checkNotNull(module,"Error: Module argument can not be null");  try {    m_database.getContent().delete(module.getNative());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntDeleteException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  public static Enumeration sortEnumeration(java.util.Enumeration e,java.util.Comparator c){  Vector v=new Vector();  for (; e.hasMoreElements(); ) {    v.addElement(e.nextElement());  }  Collections.sort(v,c);  return v.elements();}  }
class C{  public boolean isDeviationCalc(){  Object oo=get_Value(COLUMNNAME_IsDeviationCalc);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DnsSdTxtRecord(byte[] data){  mData=(byte[])data.clone();}  }
class C{  public void charToAscii() throws IOException {  writeCode(CHAR_TO_ASCII);}  }
class C{  public boolean isOK(){  return (this.byteBuffer[4] == (byte)0x00) && getDataLength() > 3;}  }
class C{  @Deprecated public UpdateRequest addScriptParam(String name,Object value){  Script script=script();  if (script == null) {    HashMap<String,Object> scriptParams=new HashMap<>();    scriptParams.put(name,value);    updateOrCreateScript(null,null,null,scriptParams);  } else {    Map<String,Object> scriptParams=script.getParams();    if (scriptParams == null) {      scriptParams=new HashMap<>();      scriptParams.put(name,value);      updateOrCreateScript(null,null,null,scriptParams);    } else {      scriptParams.put(name,value);    }  }  return this;}  }
class C{  public static <K,V>Map<K,V> singletonMap(K key,V value){  return new SingletonMap<K,V>(key,value);}  }
class C{  public void testSignature(){  Resources r=getContext().getResources();  try {    start(r.getXml(ToTest.VERSION));  } catch (  Exception e) {    mResultObserver.notifyFailure(FAILURE_TYPE.CAUGHT_EXCEPTION,e.getMessage(),e.getMessage());  }  if (mResultObserver.mDidFail) {    fail(mResultObserver.mErrorString.toString());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public int lastIndexOf(Object o){  return 0;}  }
class C{  public static LogWriterLogger createLogWriterLogger(final String name,final String connectionName,final boolean isSecure){  return LogWriterLogger.create(name,connectionName,isSecure);}  }
class C{  int crossOverUp(int index,E x){  if (index == 0) {    queue[0]=x;    return 0;  }  int parentIndex=getParentIndex(index);  E parentElement=elementData(parentIndex);  if (parentIndex != 0) {    int grandparentIndex=getParentIndex(parentIndex);    int uncleIndex=getRightChildIndex(grandparentIndex);    if (uncleIndex != parentIndex && getLeftChildIndex(uncleIndex) >= size) {      E uncleElement=elementData(uncleIndex);      if (ordering.compare(uncleElement,parentElement) < 0) {        parentIndex=uncleIndex;        parentElement=uncleElement;      }    }  }  if (ordering.compare(parentElement,x) < 0) {    queue[index]=parentElement;    queue[parentIndex]=x;    return parentIndex;  }  queue[index]=x;  return index;}  }
class C{  public void start() throws IOException, ConfigurationException, InterruptedException, GeneralSecurityException {  logger.info("Binding server: host=" + host + " port="+ port+ " useSSL="+ useSSL);  socketService=new ServerSocketService();  socketService.setAddress(new InetSocketAddress(host,port));  socketService.setUseSSL(useSSL,keystoreAlias,securityInfo);  socketService.bind();  logger.info("Spawning server thread");  serverThread=new Thread(this);  serverThread.start();  boolean ready=awaitReady(3000);  if (!ready) {    throw new IOException("Server did not become ready!");  }}  }
class C{  public XMLEditorKit(){  this(null);}  }
class C{  @AfterMethod(alwaysRun=true) public void recoveryScenario(ITestResult rs) throws Throwable {  if (rs.getStatus() == 2) {    Reporter.log("Test case " + rs.getTestName() + " failed");    driver.launchApp();  }}  }
class C{  public void testBug5188() throws Exception {  String implClass="com.sun.rowset.CachedRowSetImpl";  Class<?> c;  Method populate;  try {    c=Class.forName(implClass);  } catch (  ClassNotFoundException e) {    System.out.println("skipping testBug5188. Requires: " + implClass);    return;  }  populate=c.getMethod("populate",new Class[]{ResultSet.class});  createTable("testBug5188","(ID int NOT NULL AUTO_INCREMENT, datafield VARCHAR(64), PRIMARY KEY(ID))");  this.stmt.executeUpdate("INSERT INTO testBug5188(datafield) values('test data stuff !')");  String sql="SELECT * FROM testBug5188 where ID = ?";  this.pstmt=this.conn.prepareStatement(sql);  this.pstmt.setString(1,"1");  this.rs=this.pstmt.executeQuery();  RowSet cachedRowSet=(RowSet)c.newInstance();  populate.invoke(cachedRowSet,new Object[]{this.rs});  assertTrue(cachedRowSet.next());  assertEquals("1",cachedRowSet.getString("ID"));  assertEquals("test data stuff !",cachedRowSet.getString("datafield"));  assertFalse(cachedRowSet.next());}  }
class C{  public FatalError(JCDiagnostic d){  super(d.toString());}  }
class C{  public Builder addConnection(Type t,Script.KernelID from,Script.KernelID to){  Node nf=findNode(from);  if (nf == null) {    throw new RSInvalidStateException("From script not found.");  }  Node nt=findNode(to);  if (nt == null) {    throw new RSInvalidStateException("To script not found.");  }  ConnectLine cl=new ConnectLine(t,from,to);  mLines.add(new ConnectLine(t,from,to));  nf.mOutputs.add(cl);  nt.mInputs.add(cl);  validateCycle(nf,nf);  return this;}  }
class C{  private void updateIndex(final RevisionPetition objection){  final ApplicationIndex applicationIndex=applicationIndexService.findByApplicationNumber(objection.getObjectionNumber());  final User user=securityUtils.getCurrentUser();  final String url="/ptis/view/viewProperty-viewForm.action?applicationNo=" + objection.getObjectionNumber();  if (null == applicationIndex) {    final ApplicationIndexBuilder applicationIndexBuilder=new ApplicationIndexBuilder(PropertyTaxConstants.PTMODULENAME,objection.getObjectionNumber(),objection.getCreatedDate() != null ? objection.getCreatedDate() : new Date(),PropertyTaxConstants.APPLICATION_TYPE_REVISION_PETITION,objection.getBasicProperty().getFullOwnerName(),objection.getState().getValue(),url,objection.getBasicProperty().getAddress().toString(),user.getUsername() + "::" + user.getName(),Source.SYSTEM.toString());    applicationIndexService.createApplicationIndex(applicationIndexBuilder.build());  } else {    applicationIndex.setStatus(objection.getState().getValue());    applicationIndexService.updateApplicationIndex(applicationIndex);  }}  }
class C{  public static void main(String[] args) throws Exception {  Main main=new Main();  main.setConfigClass(MyApplication.class);  main.run();}  }
class C{  public String toString(){  return this.encode();}  }
class C{  public MessageOnlyLogFilter(LogNode next){  mNext=next;}  }
class C{  public boolean canTraverseOutsideSubtree(){  int n=getPredicateCount();  for (int i=0; i < n; i++) {    if (getPredicate(i).canTraverseOutsideSubtree())     return true;  }  return false;}  }
class C{  final boolean removeTreeNode(TreeNode<K> p){  TreeNode<K> next=(TreeNode<K>)p.next;  TreeNode<K> pred=p.prev;  TreeNode<K> r, rl;  if (pred == null)   first=next; else   pred.next=next;  if (next != null)   next.prev=pred;  if (first == null) {    root=null;    return true;  }  if ((r=root) == null || r.right == null || (rl=r.left) == null || rl.left == null)   return true;  lockRoot();  try {    TreeNode<K> replacement;    TreeNode<K> pl=p.left;    TreeNode<K> pr=p.right;    if (pl != null && pr != null) {      TreeNode<K> s=pr, sl;      while ((sl=s.left) != null)       s=sl;      boolean c=s.red;      s.red=p.red;      p.red=c;      TreeNode<K> sr=s.right;      TreeNode<K> pp=p.parent;      if (s == pr) {        p.parent=s;        s.right=p;      } else {        TreeNode<K> sp=s.parent;        if ((p.parent=sp) != null) {          if (s == sp.left)           sp.left=p; else           sp.right=p;        }        if ((s.right=pr) != null)         pr.parent=s;      }      p.left=null;      if ((p.right=sr) != null)       sr.parent=p;      if ((s.left=pl) != null)       pl.parent=s;      if ((s.parent=pp) == null)       r=s; else       if (p == pp.left)       pp.left=s; else       pp.right=s;      if (sr != null)       replacement=sr; else       replacement=p;    } else     if (pl != null)     replacement=pl; else     if (pr != null)     replacement=pr; else     replacement=p;    if (replacement != p) {      TreeNode<K> pp=replacement.parent=p.parent;      if (pp == null)       r=replacement; else       if (p == pp.left)       pp.left=replacement; else       pp.right=replacement;      p.left=p.right=p.parent=null;    }    root=(p.red) ? r : balanceDeletion(r,replacement);    if (p == replacement) {      TreeNode<K> pp;      if ((pp=p.parent) != null) {        if (p == pp.left)         pp.left=null; else         if (p == pp.right)         pp.right=null;        p.parent=null;      }    }  }  finally {    unlockRoot();  }  assert checkInvariants(root);  return false;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return MSG;default :  return null;}}  }
class C{  public int readUShort() throws IOException {  return 0xffff & (this.read() << 8 | this.read());}  }
class C{  void writeUnsavedRecursive(Chunk chunk,WriteBuffer buff){  if (pos != 0) {    return;  }  int patch=write(chunk,buff);  if (!isLeaf()) {    int len=children.length;    for (int i=0; i < len; i++) {      Page p=children[i].page;      if (p != null) {        p.writeUnsavedRecursive(chunk,buff);        children[i]=new PageReference(p,p.getPos(),p.totalCount);      }    }    int old=buff.position();    buff.position(patch);    writeChildren(buff);    buff.position(old);  }}  }
class C{  public SyntheticAttribute(ConstPool cp){  super(cp,tag,new byte[0]);}  }
class C{  void handleOnChange(File logFile){  try {    long lastModif=logFile.lastModified();    if (lastModif > logFileLastModified) {      logFileLastModified=lastModif;      LOGGER.debug("Reload log4j configuration from " + logFile.getAbsolutePath());      new PropertyConfigurator().doConfigure(logFile.getAbsolutePath(),LogManager.getLoggerRepository());      logFileWarning=false;    }  } catch (  Exception e) {    if (!logFileWarning) {      logFileWarning=true;      LOGGER.error(logFile.getAbsolutePath(),e);    }  }}  }
class C{  public void addDigest(byte[] x509certificateDigestBytes,String algorithmURI){  this.add(new XMLX509Digest(this.doc,x509certificateDigestBytes,algorithmURI));}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:39.838 -0500",hash_original_method="3144D6BF2066D661F792BBA409558AA4",hash_generated_method="743A6DC2556A7FDAC6C726598DD2E01D") public AndroidHandler(){  setFormatter(THE_FORMATTER);}  }
class C{  private Ontology(int[] parents,String[] names){  this.parentId=parents;  this.names=names;}  }
class C{  public UsedClass methodInC6(UsedClass p){  return p;}  }
class C{  @Nullable protected WearPreference parsePreference(@NonNull final Context context,@NonNull final String preferenceType,@NonNull final AttributeSet attrs){  return null;}  }
class C{  private void validateTechnicalProductCompatibility(Product referenceProduct,Product compatibleProd) throws ServiceCompatibilityException {  if (compatibleProd.getTechnicalProduct().getKey() != referenceProduct.getTechnicalProduct().getKey()) {    ServiceCompatibilityException ipc=new ServiceCompatibilityException("Definition of product compatibility failed, related technical products do not match",ServiceCompatibilityException.Reason.TECH_SERVICE);    logger.logWarn(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,ipc,LogMessageIdentifier.WARN_DEFINE_COMPATIBILITY_FOR_PRODUCTS_FAILED_NOT_SAME_BASE,dm.getCurrentUser().getUserId(),Long.toString(compatibleProd.getKey()),Long.toString(referenceProduct.getKey()));    throw ipc;  }}  }
class C{  public boolean shouldMeterInput(URL url,String method){  return false;}  }
class C{  public Boolean isAuthnRequestsSigned(){  return authnRequestsSigned;}  }
class C{  @Override public SolrPingResponse ping() throws SolrServerException, IOException {  if (this.solr0 != null)   return this.solr0.ping();  if (this.solr1 != null)   return this.solr1.ping();  return null;}  }
class C{  public void stubFromMethod(Element elt){  if (!(elt.getKind() == ElementKind.CONSTRUCTOR || elt.getKind() == ElementKind.METHOD)) {    return;  }  String newPackage=ElementUtils.getVerboseName(ElementUtils.enclosingPackage(elt));  if (!newPackage.equals("")) {    currentPackage=newPackage;    currentIndention="    ";    indent();  }  ExecutableElement method=(ExecutableElement)elt;  printMethodDecl(method);}  }
class C{  protected static byte[] parseContentType(ByteArrayInputStream pduDataStream,HashMap<Integer,Object> map){  assert (null != pduDataStream);  byte[] contentType=null;  pduDataStream.mark(1);  int temp=pduDataStream.read();  assert (-1 != temp);  pduDataStream.reset();  int cur=(temp & 0xFF);  if (cur < TEXT_MIN) {    int length=parseValueLength(pduDataStream);    int startPos=pduDataStream.available();    pduDataStream.mark(1);    temp=pduDataStream.read();    assert (-1 != temp);    pduDataStream.reset();    int first=(temp & 0xFF);    if ((first >= TEXT_MIN) && (first <= TEXT_MAX)) {      contentType=parseWapString(pduDataStream,TYPE_TEXT_STRING);    } else     if (first > TEXT_MAX) {      int index=parseShortInteger(pduDataStream);      if (index < PduContentTypes.contentTypes.length) {        contentType=(PduContentTypes.contentTypes[index]).getBytes();      } else {        pduDataStream.reset();        contentType=parseWapString(pduDataStream,TYPE_TEXT_STRING);      }    } else {      Log.e(LOG_TAG,"Corrupt content-type");      return (PduContentTypes.contentTypes[0]).getBytes();    }    int endPos=pduDataStream.available();    int parameterLen=length - (startPos - endPos);    if (parameterLen > 0) {      parseContentTypeParams(pduDataStream,map,parameterLen);    }    if (parameterLen < 0) {      Log.e(LOG_TAG,"Corrupt MMS message");      return (PduContentTypes.contentTypes[0]).getBytes();    }  } else   if (cur <= TEXT_MAX) {    contentType=parseWapString(pduDataStream,TYPE_TEXT_STRING);  } else {    contentType=(PduContentTypes.contentTypes[parseShortInteger(pduDataStream)]).getBytes();  }  return contentType;}  }
class C{  public boolean isFooterPartition(){  return (this.partitionPackType == PartitionPackType.FooterPartitionPack);}  }
class C{  private boolean needsRepaintAfterBlit(){  Component heavyParent=getParent();  while (heavyParent != null && heavyParent.isLightweight()) {    heavyParent=heavyParent.getParent();  }  if (heavyParent != null) {    ComponentPeer peer=heavyParent.getPeer();    if (peer != null && peer.canDetermineObscurity() && !peer.isObscured()) {      return false;    }  }  return true;}  }
class C{  public static void removePropertyChangeListener(PropertyChangeListener listener){synchronized (classLock) {    getLAFState().getPropertyChangeSupport(true).removePropertyChangeListener(listener);  }}  }
class C{  @Deprecated public CronTriggerImpl(String name,String group,String cronExpression) throws ParseException {  super(name,group);  setCronExpression(cronExpression);  setStartTime(new Date());  setTimeZone(TimeZone.getDefault());}  }
class C{  protected GenericHandler(ContextStore store,String context){  this(store,context,false);}  }
class C{  public static boolean isAllContactsFast(){  return Display.getInstance().isGetAllContactsFast();}  }
class C{  public boolean voidIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  if (DOCSTATUS_Closed.equals(getDocStatus()) || DOCSTATUS_Reversed.equals(getDocStatus()) || DOCSTATUS_Voided.equals(getDocStatus())) {    m_processMsg="Document Closed: " + getDocStatus();    return false;  }  if (DOCSTATUS_Drafted.equals(getDocStatus()) || DOCSTATUS_Invalid.equals(getDocStatus()) || DOCSTATUS_InProgress.equals(getDocStatus())|| DOCSTATUS_Approved.equals(getDocStatus())|| DOCSTATUS_NotApproved.equals(getDocStatus())) {    MInventoryLine[] lines=getLines(false);    for (int i=0; i < lines.length; i++) {      MInventoryLine line=lines[i];      BigDecimal oldCount=line.getQtyCount();      BigDecimal oldInternal=line.getQtyInternalUse();      if (oldCount.compareTo(line.getQtyBook()) != 0 || oldInternal.signum() != 0) {        line.setQtyInternalUse(Env.ZERO);        line.setQtyCount(line.getQtyBook());        line.addDescription("Void (" + oldCount + "/"+ oldInternal+ ")");        line.save(get_TrxName());      }    }  } else {    return reverseCorrectIt();  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  setProcessed(true);  setDocAction(DOCACTION_None);  return true;}  }
class C{  public TimingHit userTimingVariableName(String value){  setString(USER_TIMING_VARIABLE_NAME,value);  return this;}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitByteMemberValue(this);}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public void delete(TemplatePersistenceData data){  if (data.isUserAdded())   fTemplates.remove(data); else   data.setDeleted(true);}  }
class C{  private void buildPathsTitle(){  if (config.getPathsGroupedBy() == GroupBy.AS_IS) {    buildPathsTitle(PATHS);  } else {    buildPathsTitle(RESOURCES);  }}  }
class C{  @SuppressWarnings("unused") private void doUnload(MarkedProject markedProject,N4ProgressStateRecorder rec) throws N4JSCompileErrorException {  if (createDebugOutput) {    println("# unloading " + markedProject.project);  }  rec.markStartUnloading(markedProject);  for (  Resource res : markedProject.resources) {    rec.markUnloadingOf(res);    res.unload();  }  rec.markFinishedUnloading(markedProject);}  }
class C{  @Override public synchronized Restlet createInboundRoot(){  log.info("createInboundRoot started for /schema");  router.attachDefault(RestManager.ManagedEndpoint.class);  RestManager.getRestManager(SolrRequestInfo.getRequestInfo()).attachManagedResources(RestManager.SCHEMA_BASE_PATH,router);  log.info("createInboundRoot complete for /schema");  return router;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMDefinitionSrcElement(prefix,(AbstractDocument)doc);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.856 -0500",hash_original_method="ED2086285AC52BF0F96F27196507174B",hash_generated_method="9D5086139D65F6BC1FBFA408C4EC6E59") @Override public final String toString(){  StringBuilder cab=new StringBuilder(50 + getHopCount() * 30);  cab.append("HttpRoute[");  if (this.localAddress != null) {    cab.append(this.localAddress);    cab.append("->");  }  cab.append('{');  if (this.tunnelled == TunnelType.TUNNELLED)   cab.append('t');  if (this.layered == LayerType.LAYERED)   cab.append('l');  if (this.secure)   cab.append('s');  cab.append("}->");  if (this.proxyChain != null) {    for (    HttpHost aProxyChain : this.proxyChain) {      cab.append(aProxyChain);      cab.append("->");    }  }  cab.append(this.targetHost);  cab.append(']');  return cab.toString();}  }
class C{  public boolean isOneTimeParameter(){  return (parameterDefinition.getModificationType() == ParameterModificationType.ONE_TIME);}  }
class C{  public final void createTestData(int nbody){  MathVector cmr=new MathVector();  MathVector cmv=new MathVector();  Body head=new Body();  Body prev=head;  double rsc=3.0 * Math.PI / 16.0;  double vsc=Math.sqrt(1.0 / rsc);  double seed=123.0;  for (int i=0; i < nbody; i++) {    Body p=new Body();    prev.setNext(p);    prev=p;    p.mass=1.0 / nbody;    seed=BH.myRand(seed);    double t1=BH.xRand(0.0,0.999,seed);    t1=Math.pow(t1,(-2.0 / 3.0)) - 1.0;    double r=1.0 / Math.sqrt(t1);    double coeff=4.0;    for (int k=0; k < MathVector.NDIM; k++) {      seed=BH.myRand(seed);      r=BH.xRand(0.0,0.999,seed);      p.pos.value(k,coeff * r);    }    cmr.addition(p.pos);    double x, y;    do {      seed=BH.myRand(seed);      x=BH.xRand(0.0,1.0,seed);      seed=BH.myRand(seed);      y=BH.xRand(0.0,0.1,seed);    } while (y > x * x * Math.pow(1.0 - x * x,3.5));    double v=Math.sqrt(2.0) * x / Math.pow(1 + r * r,0.25);    double rad=vsc * v;    double rsq;    do {      for (int k=0; k < MathVector.NDIM; k++) {        seed=BH.myRand(seed);        p.vel.value(k,BH.xRand(-1.0,1.0,seed));      }      rsq=p.vel.dotProduct();    } while (rsq > 1.0);    double rsc1=rad / Math.sqrt(rsq);    p.vel.multScalar(rsc1);    cmv.addition(p.vel);  }  prev.setNext(null);  bodyTab=head.getNext();  cmr.divScalar(nbody);  cmv.divScalar(nbody);  prev=null;  for (Enumeration<Body> e=bodyTab.elements(); e.hasMoreElements(); ) {    Body b=e.nextElement();    b.pos.subtraction(cmr);    b.vel.subtraction(cmv);    b.setProcNext(prev);    prev=b;  }  bodyTabRev=prev;}  }
class C{  public KafkaTopicConsumer(final OneToOneConcurrentArrayQueue3<byte[]> message,final MessageWaitStrategy<byte[]> messageWaitStrategy,final ExecutorService executorService){  this.messages=message;  this.executorService=executorService;  this.messageWaitStrategy=messageWaitStrategy;}  }
class C{  public boolean byPassControlToProcessor(boolean flag){  return true;}  }
class C{  public <T>SuggestRequestBuilder addSuggestion(SuggestionBuilder<T> suggestion){  suggest.addSuggestion(suggestion);  return this;}  }
class C{  public void rotateRight(int startIndex,int endIndex){  boolean wrapBit=get(endIndex);  for (int x=endIndex - 1; x >= startIndex; x--) {    if (get(x)) {      set(x + 1);    } else {      clear(x + 1);    }  }  if (wrapBit) {    set(startIndex);  } else {    clear(startIndex);  }}  }
class C{  public Compiler(){  FunctionArgumentSignatureFactory functionArgumentSignatureFactory=new FunctionArgumentSignatureFactory();  FunctionWrapperFactory functionWrapperFactory=new FunctionWrapperFactory(functionArgumentSignatureFactory);  adapter=new NativeAdapter(functionWrapperFactory);}  }
class C{  public Texture(int width,int height,int pixelFormat) throws Exception {  this.id=glGenTextures();  this.width=width;  this.height=height;  glBindTexture(GL_TEXTURE_2D,this.id);  glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH_COMPONENT,this.width,this.height,0,pixelFormat,GL_FLOAT,(ByteBuffer)null);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);}  }
class C{  private static int quantizeBy2(int value){  return (value / 2) * 2;}  }
class C{  public script addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void addConfigParam(IFloodlightModule mod,String key,String value){  Map<String,String> moduleParams=configParams.get(mod.getClass());  if (moduleParams == null) {    moduleParams=new HashMap<String,String>();    configParams.put(mod.getClass(),moduleParams);  }  moduleParams.put(key,value);}  }
class C{  public static boolean isValidEUIPortName(String portName){  return portName.matches(EUI_PATTERN);}  }
class C{  public void awake(){synchronized (this) {    notifyAll();  }}  }
class C{  public ProposalPosition(IDocument document,int offset,int length,int sequence,ICompletionProposal[] proposals){  super(document,offset,length,sequence);  fProposals=copy(proposals);}  }
class C{  public static List<SequenceIndex> collapseIndexes(SequenceIndex[][] indexesSquared,String[][] sequenceNames){  final ArrayList<SequenceIndex> ret=new ArrayList<>();  assert indexesSquared.length > 0 && sequenceNames.length == indexesSquared.length;  SequenceIndex[] mergeMaster=indexesSquared[0];  String[] nameMaster=sequenceNames[0];  for (int i=1; i < indexesSquared.length; i++) {    final String[] mergeName=collapseNames(nameMaster,sequenceNames[i]);    mergeMaster=collapse(mergeMaster,indexesSquared[i],mergeName,nameMaster,sequenceNames[i]);    nameMaster=mergeName;  }  ret.addAll(Arrays.asList(mergeMaster));  return ret;}  }
class C{  private int findBeginPosition(@NonNull String tmpTotal,@NonNull SpannableStringBuilder ssb,@NonNull SpannableStringBuilder tmp){  String tmpTmpTotal=tmpTotal;  int position=tmpTmpTotal.indexOf(KEY_0_FOOTNOTE);  if (position == -1) {    return -1;  } else {    if (checkInInlineCode(ssb,tmp.length() + position,KEY_0_FOOTNOTE.length())) {      StringBuilder sb=new StringBuilder(tmpTmpTotal.substring(0,position)).append("$$").append(tmpTmpTotal.substring(position + KEY_0_FOOTNOTE.length(),tmpTmpTotal.length()));      return findBeginPosition(sb.toString(),ssb,tmp);    } else {      return position;    }  }}  }
class C{  public final GVector addSelf(GVector vector){  if (length != vector.length) {    throw new MatrixSizeException();  }  for (int i=0; i < length; i++) {    this.values[i]+=vector.values[i];  }  return this;}  }
class C{  public byte[] readRawBuffer(int len) throws IOException {  byte[] buffer=new byte[len];  readFully(buffer,0,len);  return buffer;}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Property<?>>T oldValueOf(T property){  return (T)property.as(OLD,property.getExpression());}  }
class C{  public void info(Object message){}  }
class C{  private void fillEntityForeignKeys(final ImportTuple tuple,final Object object,final Collection<ImportColumn> importColumns,final Object masterObject,final ImportDescriptor importDescriptor,final Map<String,Object> entityCache) throws Exception {  ImportColumn currentColumn=null;  final Class clz=object.getClass();  Object singleObjectValue=null;  PropertyDescriptor propertyDescriptor=null;  try {    for (    ImportColumn importColumn : importColumns) {      currentColumn=importColumn;      if (importColumn.isUseMasterObject()) {        singleObjectValue=masterObject;      } else {        singleObjectValue=getEntity(tuple,importColumn,masterObject,importDescriptor,entityCache);      }      propertyDescriptor=new PropertyDescriptor(importColumn.getName(),clz);      final Object oldValue=propertyDescriptor.getReadMethod().invoke(object);      if (oldValue instanceof Identifiable || singleObjectValue instanceof Identifiable) {        final Object oldValuePK=oldValue != null ? genericDAO.getEntityIdentifier(oldValue) : null;        final Object newValuePK=singleObjectValue != null ? genericDAO.getEntityIdentifier(singleObjectValue) : null;        if (oldValuePK == null || !oldValuePK.equals(newValuePK)) {          propertyDescriptor.getWriteMethod().invoke(object,singleObjectValue);        }      } else {        propertyDescriptor.getWriteMethod().invoke(object,singleObjectValue);      }    }  } catch (  Exception exp) {    final String propName=propertyDescriptor != null ? propertyDescriptor.getName() : null;    final String propType=propertyDescriptor != null ? propertyDescriptor.getPropertyType().getName() : null;    throw new Exception(MessageFormat.format("Failed to process property name {0} type {1} object is {2} caused by column {0} with value {1}",propName,propType,object,currentColumn,singleObjectValue),exp);  }}  }
class C{  long cleanup(long now){  int inUseConnectionCount=0;  int idleConnectionCount=0;  RealConnection longestIdleConnection=null;  long longestIdleDurationNs=Long.MIN_VALUE;synchronized (this) {    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {      RealConnection connection=i.next();      if (pruneAndGetAllocationCount(connection,now) > 0) {        inUseConnectionCount++;        continue;      }      idleConnectionCount++;      long idleDurationNs=now - connection.idleAtNanos;      if (idleDurationNs > longestIdleDurationNs) {        longestIdleDurationNs=idleDurationNs;        longestIdleConnection=connection;      }    }    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {      connections.remove(longestIdleConnection);    } else     if (idleConnectionCount > 0) {      return keepAliveDurationNs - longestIdleDurationNs;    } else     if (inUseConnectionCount > 0) {      return keepAliveDurationNs;    } else {      return -1;    }  }  Util.closeQuietly(longestIdleConnection.getSocket());  return 0;}  }
class C{  private String exceptionToLogString(Exception e){  if (e.getClass().getName().endsWith(".SMTPSendFailedException")) {    return "RemoteHost said: " + e.getMessage();  } else   if (e instanceof SendFailedException) {    SendFailedException exception=(SendFailedException)e;    if (exception.getInvalidAddresses().length == 0 && exception.getValidUnsentAddresses().length == 0)     return null;    Exception ex;    StringBuilder sb=new StringBuilder();    boolean smtpExFound=false;    sb.append("RemoteHost said:");    if (e instanceof MessagingException)     while ((ex=((MessagingException)e).getNextException()) != null && ex instanceof MessagingException) {      e=ex;      if (ex.getClass().getName().endsWith(".SMTPAddressFailedException")) {        try {          InternetAddress ia=(InternetAddress)invokeGetter(ex,"getAddress");          sb.append(" ( ").append(ia).append(" - [").append(ex.getMessage().replaceAll("\\n","")).append("] )");          smtpExFound=true;        } catch (        IllegalStateException ise) {        }catch (        ClassCastException cce) {        }      }    }    if (!smtpExFound) {      boolean invalidAddr=false;      sb.append(" ( ");      if (exception.getInvalidAddresses().length > 0) {        sb.append(Arrays.toString(exception.getInvalidAddresses()));        invalidAddr=true;      }      if (exception.getValidUnsentAddresses().length > 0) {        if (invalidAddr)         sb.append(" ");        sb.append(Arrays.toString(exception.getValidUnsentAddresses()));      }      sb.append(" - [");      sb.append(exception.getMessage().replaceAll("\\n",""));      sb.append("] )");    }    return sb.toString();  }  return null;}  }
class C{  public MockContentResolver(Context context){  super(context);  mProviders=Maps.newHashMap();}  }
class C{  public void writeString(String s){  int len=s.length();  writeVarInt(len);  writeStringWithoutLength(s,len);}  }
class C{  private boolean checkCDATA(StringBuffer buf){  char ch=this.readChar();  if (ch != '[') {    this.unreadChar(ch);    this.skipSpecialTag(0);    return false;  } else   if (!this.checkLiteral("CDATA[")) {    this.skipSpecialTag(1);    return false;  } else {    int delimiterCharsSkipped=0;    while (delimiterCharsSkipped < 3) {      ch=this.readChar();switch (ch) {case ']':        if (delimiterCharsSkipped < 2) {          delimiterCharsSkipped+=1;        } else {          buf.append(']');          buf.append(']');          delimiterCharsSkipped=0;        }      break;case '>':    if (delimiterCharsSkipped < 2) {      for (int i=0; i < delimiterCharsSkipped; i++) {        buf.append(']');      }      delimiterCharsSkipped=0;      buf.append('>');    } else {      delimiterCharsSkipped=3;    }  break;default :for (int i=0; i < delimiterCharsSkipped; i+=1) {  buf.append(']');}buf.append(ch);delimiterCharsSkipped=0;}}return true;}}  }
class C{  public Synapse instantiateTemplateSynapse(Neuron source,Neuron target,Network parent){  this.source=source;  this.target=target;  this.parentNetwork=parent;  return new Synapse(this);}  }
class C{  public void modifyNFSACL(String fspath,IsilonNFSACL acl) throws IsilonException {  try {    fspath=fspath.substring(1);    fspath=URLEncoder.encode(fspath,"UTF-8");    fspath=fspath.concat("?acl");  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }  put(_baseUrl.resolve(URI_IFS),fspath,"ACL",acl);}  }
class C{  public CInliningMenu(final CGraphModel model,final NaviNode node,final List<Pair<INaviInstruction,INaviFunction>> functions,final boolean allowUninlining){  super("Inline Subfunction");  final List<INaviEdge> outgoingEdges=node.getRawNode().getOutgoingEdges();  if (allowUninlining) {    add(CActionProxy.proxy(new CUnInlineAction(model.getParent(),model.getGraph(),(INaviCodeNode)node.getRawNode())));  }  boolean alreadyInlined=false;  if (outgoingEdges.size() == 1) {    alreadyInlined=outgoingEdges.get(outgoingEdges.size() - 1).getType() == EdgeType.ENTER_INLINED_FUNCTION;  }  int functionCounter=0;  for (  final Pair<INaviInstruction,INaviFunction> p : functions) {    if (functionCounter == functions.size() - 1 && alreadyInlined) {      break;    }    if (functionCounter == 0 && allowUninlining) {      addSeparator();    }    add(new JMenuItem(CActionProxy.proxy(new CInlineFunctionAction(model,(INaviCodeNode)node.getRawNode(),p.first(),p.second()))));    functionCounter++;  }  setEnabled(getMenuComponentCount() != 0);}  }
class C{  public String buildS3KeyPrefix(StorageEntity storageEntity,BusinessObjectFormatEntity businessObjectFormatEntity,BusinessObjectDataKey businessObjectDataKey){  Assert.isTrue(StoragePlatformEntity.S3.equals(storageEntity.getStoragePlatform().getName()),String.format("The specified storage \"%s\" is not an S3 storage platform.",storageEntity.getName()));  String s3KeyPrefixVelocityTemplate=storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_KEY_PREFIX_VELOCITY_TEMPLATE),storageEntity,false);  Assert.isTrue(StringUtils.isNotBlank(s3KeyPrefixVelocityTemplate),String.format("Storage \"%s\" has no S3 key prefix velocity template configured.",storageEntity.getName()));  return buildS3KeyPrefix(s3KeyPrefixVelocityTemplate,businessObjectFormatEntity,businessObjectDataKey,storageEntity.getName());}  }
class C{  private Object _deserializeComponent(Element elComp) throws ConverterException {  String name=elComp.getAttribute("name");  String md5=elComp.getAttribute("md5");  PageContext pc=ThreadLocalPageContext.get();  Component comp=null;  try {    comp=pc.loadComponent(name);    if (!ComponentUtil.md5(comp).equals(md5)) {      throw new ConverterException("component [" + name + "] in this enviroment has not the same interface as the component to load, it is possible that one off the components has Functions added dynamicly.");    }  } catch (  ConverterException e) {    throw e;  }catch (  Exception e) {    throw new ConverterException(e.getMessage());  }  NodeList list=elComp.getChildNodes();  ComponentScope scope=comp.getComponentScope();  int len=list.getLength();  String scopeName;  Element var, value;  Collection.Key key;  for (int i=0; i < len; i++) {    Node node=list.item(i);    if (node instanceof Element) {      var=(Element)node;      value=getChildElement((Element)node);      scopeName=var.getAttribute("scope");      if (value != null) {        key=Caster.toKey(var.getAttribute("name"),null);        if (key == null)         continue;        if ("variables".equalsIgnoreCase(scopeName))         scope.setEL(key,_deserialize(value)); else         comp.setEL(key,_deserialize(value));      }    }  }  return comp;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported04.class,args);}  }
class C{  protected final boolean hasAccessRole(){  for (  final String role : this.roles) {    if (this.shopFederationStrategy.isCurrentUser(role)) {      return true;    }  }  return false;}  }
class C{  public static GraphRequest newUploadPhotoRequest(AccessToken accessToken,File file,Callback callback) throws FileNotFoundException {  ParcelFileDescriptor descriptor=ParcelFileDescriptor.open(file,ParcelFileDescriptor.MODE_READ_ONLY);  Bundle parameters=new Bundle(1);  parameters.putParcelable(PICTURE_PARAM,descriptor);  return new GraphRequest(accessToken,MY_PHOTOS,parameters,HttpMethod.POST,callback);}  }
class C{  synchronized public boolean hasItems(){  return !this.items.isEmpty();}  }
class C{  public void testGetF4Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF4Momentary();  assertEquals(expResult,result);}  }
class C{  public String centerDataTipText(){  return "Center (rather than standardize) the data. PCA will " + "be computed from the covariance (rather than correlation) " + "matrix";}  }
class C{  public Long addRoomWithModerationAndExternalTypeAndStartEnd(String SID,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Boolean appointment,Boolean isDemoRoom,Integer demoTime,Boolean isModeratedRoom,String externalRoomType,String validFromDate,String validFromTime,String validToDate,String validToTime,Boolean isPasswordProtected,String password,Long reminderTypeId,String redirectURL) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      Date dFrom=null;      Date dTo=null;      Integer validFromHour=Integer.valueOf(validFromTime.substring(0,2)).intValue();      Integer validFromMinute=Integer.valueOf(validFromTime.substring(3,5)).intValue();      Integer validToHour=Integer.valueOf(validToTime.substring(0,2)).intValue();      Integer validToMinute=Integer.valueOf(validToTime.substring(3,5)).intValue();      log.info("validFromHour: " + validFromHour);      log.info("validFromMinute: " + validFromMinute);      Date fromDate=CalendarPatterns.parseDateBySeparator(validFromDate);      Date toDate=CalendarPatterns.parseDateBySeparator(validToDate);      Calendar calFrom=Calendar.getInstance();      calFrom.setTime(fromDate);      calFrom.set(calFrom.get(Calendar.YEAR),calFrom.get(Calendar.MONTH),calFrom.get(Calendar.DATE),validFromHour,validFromMinute,0);      Calendar calTo=Calendar.getInstance();      calTo.setTime(toDate);      calTo.set(calTo.get(Calendar.YEAR),calTo.get(Calendar.MONTH),calTo.get(Calendar.DATE),validToHour,validToMinute,0);      dFrom=calFrom.getTime();      dTo=calTo.getTime();      log.info("validFromDate: " + CalendarPatterns.getDateWithTimeByMiliSeconds(dFrom));      log.info("validToDate: " + CalendarPatterns.getDateWithTimeByMiliSeconds(dTo));      Long rooms_id=roommanagement.addExternalRoom(name,roomtypes_id,comment,numberOfPartizipants,ispublic,null,appointment,isDemoRoom,demoTime,isModeratedRoom,null,null,externalRoomType,false,false,false,redirectURL,false,true,false);      if (rooms_id <= 0) {        return rooms_id;      }      Users us=userManagement.getUserById(users_id);      appointmentDao.addAppointment("appointmentName",users_id,"appointmentLocation","appointmentDescription",dFrom,dTo,false,false,false,false,1L,reminderTypeId,roommanagement.getRoomById(rooms_id),1L,isPasswordProtected,password,false,us.getOmTimeZone().getJname());      return rooms_id;    } else {      return -2L;    }  } catch (  Exception err) {    log.error("[addRoomWithModeration] ",err);    throw new AxisFault(err.getMessage());  }}  }
class C{  public NdefMessage(NdefRecord record,NdefRecord... records){  if (record == null)   throw new NullPointerException("record cannot be null");  for (  NdefRecord r : records) {    if (r == null) {      throw new NullPointerException("record cannot be null");    }  }  mRecords=new NdefRecord[1 + records.length];  mRecords[0]=record;  System.arraycopy(records,0,mRecords,1,records.length);}  }
class C{  public boolean isIncremental(){  return m_Incremental;}  }
class C{  @NoWarning("GC") public void test1(){  Map<String,String> map1=new HashMap<String,String>();  Map<String,String> map2=new HashMap<String,String>();  for (  Map.Entry<String,String> entry : map1.entrySet()) {    String s2=map2.get(entry.getKey());    System.out.println(s2);  }}  }
class C{  public static boolean createEXCEL_HTML(ReportEngine re,Properties m_ctx,Writer writer,boolean onlyTable,Language language){  PrintData m_printData=re.getPrintData();  MPrintFormat m_printFormat=re.getPrintFormat();  MQuery m_query=re.getQuery();  try {    table table=new table();    for (int row=-1; row < m_printData.getRowCount(); row++) {      tr tr=new tr();      table.addElement(tr);      if (row != -1)       m_printData.setRowIndex(row);      for (int col=0; col < m_printFormat.getItemCount(); col++) {        MPrintFormatItem item=m_printFormat.getItem(col);        if (item.isPrinted()) {          if (row == -1) {            th th=new th();            tr.addElement(th);            th.addElement(Util.maskHTML(item.getPrintName(language)));            th.setClass("xl_head");          } else {            td td=new td();            tr.addElement(td);            Object obj=m_printData.getNode(new Integer(item.getAD_Column_ID()));            if (obj == null)             td.addElement("&nbsp;"); else             if (obj instanceof PrintDataElement) {              String value=((PrintDataElement)obj).getValueDisplay(null);              int displayType=((PrintDataElement)obj).getDisplayType();              if (((PrintDataElement)obj).isNumeric()) {                if (displayType == DisplayType.Integer) {                  td.addAttribute("x:num",value);                  td.addElement(Util.maskHTML(value));                } else                 if (displayType == DisplayType.Quantity) {                  td.addAttribute("x:num",value);                  td.addElement(Util.maskHTML(value));                } else                 if (displayType == DisplayType.Amount) {                  td.addAttribute("x:num",value);                  td.addElement(Util.maskHTML(value));                } else                 if (displayType == DisplayType.CostPrice) {                  td.addAttribute("x:num","");                  td.addAttribute("u1:num",value);                  td.setClass("xl25");                  td.addElement(Util.maskHTML(value));                } else {                  td.addElement(Util.maskHTML(value));                }              } else               if (((PrintDataElement)obj).isDate()) {                if (displayType == DisplayType.Date) {                  td.setClass("xl24");                  td.addElement(Util.maskHTML(value));                } else                 if (displayType == DisplayType.DateTime) {                  td.setClass("xl26");                  td.addElement(Util.maskHTML(value));                } else {                  td.addElement(Util.maskHTML(value));                }              } else               td.addElement(Util.maskHTML(value));            } else             if (obj instanceof PrintData) {            } else             log.log(Level.SEVERE,"createHTML - Element not PrintData(Element) " + obj.getClass());          }        }      }    }    table table1=new table();    table1.setBorder(0).setCols(10).setCellPadding(0).setCellSpacing(2);    table1.addElement(new tr().addElement(new td().setColSpan(10).addElement(new h1(re.getName())).setStyle("border:none;")));    tr tr1;    String tmp="Jednostka: ";    MOrg o=MOrg.get(m_ctx,Env.getAD_Org_ID(m_ctx));    tmp+=o.getName();    tr1=new tr();    tr1.addElement(new td().addElement(tmp).setColSpan(10).setStyle("border:none;"));    table1.addElement(tr1);    java.text.DateFormat dateFormat=java.text.DateFormat.getDateInstance(java.text.DateFormat.FULL,new Locale("pl_PL"));    String dateData="Czas wygenerowania: " + dateFormat.format(new java.util.Date());    tr1=new tr();    tr1.addElement(new td().addElement(dateData).setColSpan(10).setStyle("border:none;"));    table1.addElement(tr1);    for (int r=0; r < m_query.getRestrictionCount(); r++) {      tr1=new tr();      td td1=new td().addElement(new i(m_query.getInfoName(r)));      td1.addElement("   " + m_query.getInfoOperator(r) + "   "+ m_query.getInfoDisplayAll(r)).setColSpan(10);      td1.setStyle("border:none;");      tr1.addElement(td1);      table1.addElement(tr1);    }    tr1=new tr();    tr1.addElement(new td().addElement("&nbsp;").setColSpan(10).setStyle("border:none;height:20px;"));    table1.addElement(tr1);    PrintWriter w=new PrintWriter(writer);    if (onlyTable)     table.output(w); else {      XhtmlDocument doc=new XhtmlDocument();      String st="<!--table " + "	{mso-displayed-decimal-separator:\".\"; " + "	mso-displayed-thousand-separator:\" \";} "+ "@page "+ "	{margin:.98in .79in .98in .79in; "+ "	mso-header-margin:.5in; "+ "	mso-footer-margin:.5in;} "+ "tr "+ "	{mso-height-source:auto;} "+ "col "+ "	{mso-width-source:auto;} "+ "br "+ "	{mso-data-placement:same-cell;} "+ ".style0 "+ "	{mso-number-format:General; "+ "	text-align:general; "+ "	vertical-align:bottom; "+ "	white-space:nowrap; "+ "	mso-rotate:0; "+ "	mso-background-source:auto; "+ "	mso-pattern:auto; "+ "	color:windowtext; "+ "	font-size:10.0pt; "+ "	font-weight:400; "+ "	font-style:normal; "+ "	text-decoration:none; "+ "	font-family:Arial; "+ "	mso-generic-font-family:auto; "+ "	mso-font-charset:238; "+ "	border:none; "+ "	mso-protection:locked visible; "+ "	mso-style-name:Normalny; "+ "	mso-style-id:0;} "+ "td "+ "	{mso-style-parent:style0; "+ "	padding-top:1px; "+ "	padding-right:1px; "+ "	padding-left:1px; "+ "	mso-ignore:padding; "+ "	color:windowtext; "+ "	font-size:10.0pt; "+ "	font-weight:400; "+ "	font-style:normal; "+ "	text-decoration:none; "+ "	font-family:Arial; "+ "	mso-generic-font-family:auto; "+ "	mso-font-charset:238; "+ "	mso-number-format:General; "+ "	text-align:general; "+ "	vertical-align:bottom; "+ "border:.5pt solid #a0a0a0; "+ "	mso-background-source:auto; "+ "	mso-pattern:auto; "+ "	mso-protection:locked visible; "+ "	white-space:nowrap; "+ "	mso-rotate:0;} "+ ".xl24 "+ "{mso-style-parent:style0; "+ "mso-number-format:\"Short Date\";} "+ ".xl25 "+ "{mso-style-parent:style0; "+ "mso-number-format:Fixed;} "+ ".xl26 "+ "{mso-style-parent:style0; "+ "mso-number-format:\"yy\\/mm\\/dd\\ h\\:mm\\;\\@\";} "+ ".xl_head "+ "{text-align:center; mso-style-parent:style0; "+ "font-weight:700; "+ "font-family:Arial, sans-serif; "+ "mso-font-charset:238; "+ "border:.5pt solid windowtext; "+ "background:silver; "+ "mso-pattern:auto none;} "+ "-->  ";      doc.appendHead(new style().addElement(st));      doc.appendBody(table1);      doc.appendBody(table);      doc.output(w);    }    w.flush();    w.close();  } catch (  Exception e) {    log.log(Level.SEVERE,"createHTML(w)",e);  }  return false;}  }
class C{  protected void addIncomingTransitionsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Vertex_incomingTransitions_feature"),getString("_UI_PropertyDescriptor_description","_UI_Vertex_incomingTransitions_feature","_UI_Vertex_type"),SGraphPackage.Literals.VERTEX__INCOMING_TRANSITIONS,true,false,true,null,null,null));}  }
class C{  public static DayOfWeek asDay(String day){  DayOfWeek dayOfWeek=DAYMAP.get(day.toLowerCase());  if (dayOfWeek == null)   LOGGER.warn("Couldn't parse month {}",day);  return dayOfWeek;}  }
class C{  public static SimEvent select(int src,Predicate p){  SimEvent ev=null;  Iterator<SimEvent> iterator=deferred.iterator();  while (iterator.hasNext()) {    ev=iterator.next();    if (ev.getDestination() == src && p.match(ev)) {      iterator.remove();      break;    }  }  return ev;}  }
class C{  public boolean attachInView(View view,float ration){  return initOpenGLViewWithView(view,getAppFrameRect(ration));}  }
class C{  private static void moveFilesFromTmp(FileSystem fs,String tmpPath,String txMtdPath) throws IllegalArgumentException, IOException {  MapReduceTool.renameFileOnHDFS(tmpPath + "/" + TfUtils.TXMTD_COLNAMES,txMtdPath + "/" + TfUtils.TXMTD_COLNAMES);  MapReduceTool.renameFileOnHDFS(tmpPath + "/" + TfUtils.TXMTD_DC_COLNAMES,txMtdPath + "/" + TfUtils.TXMTD_DC_COLNAMES);  MapReduceTool.renameFileOnHDFS(tmpPath + "/" + TfUtils.TXMTD_COLTYPES,txMtdPath + "/" + TfUtils.TXMTD_COLTYPES);  if (fs.exists(new Path(tmpPath + "/Dummycode/" + TfUtils.DCD_FILE_NAME))) {    if (!fs.exists(new Path(txMtdPath + "/Dummycode/")))     fs.mkdirs(new Path(txMtdPath + "/Dummycode/"));    MapReduceTool.renameFileOnHDFS(tmpPath + "/Dummycode/" + TfUtils.DCD_FILE_NAME,txMtdPath + "/Dummycode/" + TfUtils.DCD_FILE_NAME);  }}  }
class C{  public NamedImportSpecifier createNamedImportSpecifier(){  NamedImportSpecifierImpl namedImportSpecifier=new NamedImportSpecifierImpl();  return namedImportSpecifier;}  }
class C{  protected void paintClock(){  double clockRadius=Math.min(w,h) * 0.8 * 0.5;  double centerX=w / 2;  double centerY=h / 2;  Circle circle=new Circle(centerX,centerY,clockRadius);  circle.setFill(Color.WHITE);  circle.setStroke(Color.BLACK);  Text t1=new Text(centerX - 5,centerY - clockRadius + 12,"12");  Text t2=new Text(centerX - clockRadius + 3,centerY + 5,"9");  Text t3=new Text(centerX + clockRadius - 10,centerY + 3,"3");  Text t4=new Text(centerX - 3,centerY + clockRadius - 3,"6");  double sLength=clockRadius * 0.8;  double secondX=centerX + sLength * Math.sin(second * (2 * Math.PI / 60));  double secondY=centerY - sLength * Math.cos(second * (2 * Math.PI / 60));  Line sLine=new Line(centerX,centerY,secondX,secondY);  sLine.setStroke(Color.RED);  double mLength=clockRadius * 0.65;  double xMinute=centerX + mLength * Math.sin(minute * (2 * Math.PI / 60));  double minuteY=centerY - mLength * Math.cos(minute * (2 * Math.PI / 60));  Line mLine=new Line(centerX,centerY,xMinute,minuteY);  mLine.setStroke(Color.BLUE);  double hLength=clockRadius * 0.5;  double hourX=centerX + hLength * Math.sin((hour % 12 + minute / 60.0) * (2 * Math.PI / 12));  double hourY=centerY - hLength * Math.cos((hour % 12 + minute / 60.0) * (2 * Math.PI / 12));  Line hLine=new Line(centerX,centerY,hourX,hourY);  hLine.setStroke(Color.GREEN);  getChildren().clear();  getChildren().addAll(circle,t1,t2,t3,t4,sLine,mLine,hLine);}  }
class C{  synchronized private Writer finishWorker() throws IOException {  try {    if (!f.isDone())     q.put(TERMINATOR);    return f.get();  } catch (  InterruptedException e) {    throw new IOException(e.getMessage());  }catch (  ExecutionException e) {    throw new IOException(e.getMessage());  }}  }
class C{  public static void putUnplacedVolumesIntoAlternativeMask(ExportMaskPlacementDescriptor descriptor){  if (!descriptor.hasUnPlacedVolumes()) {    return;  }  log.info("Trying to see if there are any alternative exports that can be used for unplaced volumes...");  Map<URI,Volume> volumes=descriptor.getVolumesToPlace();  Map<URI,Map<URI,Volume>> replaceMap=new HashMap<>();  for (  URI volumeURI : descriptor.getUnplacedVolumes().keySet()) {    Set<URI> equivalentExportsForVolume=descriptor.getAlternativeExportsForVolume(volumeURI);    log.info("Found these ExportMasks are alternatives for volume {}: {}",volumeURI,collectionString(equivalentExportsForVolume));    if (!equivalentExportsForVolume.isEmpty()) {      URI selectedURI=getExportMaskWithLeastVolumes(descriptor,equivalentExportsForVolume);      log.info("Alternatives: {} - mask with least volumes: {}",collectionString(equivalentExportsForVolume),selectedURI);      Map<URI,Volume> volumeMap=replaceMap.get(selectedURI);      if (volumeMap == null) {        volumeMap=new HashMap<>();        replaceMap.put(selectedURI,volumeMap);      }      volumeMap.put(volumeURI,volumes.get(volumeURI));    }  }  for (  Map.Entry<URI,Map<URI,Volume>> replaceEntry : replaceMap.entrySet()) {    descriptor.placeVolumes(replaceEntry.getKey(),replaceEntry.getValue());  }  log.info("After trying to find mask alternatives:\n{}",descriptor);}  }
class C{  @Override public void disconnectionNotification(String eventName,Object source){  m_listenees.remove(source);}  }
class C{  public void addSnapshots(int numSnapshots,Volume volume,BlockConsistencyGroup cg,ProtectionSet ps,String name){  for (int i=1; i <= numSnapshots; i++) {    BlockSnapshot blockSnapshot=new BlockSnapshot();    URI blockSnapshotURI=URIUtil.createId(BlockSnapshot.class);    blockSnapshotURIs.add(blockSnapshotURI);    blockSnapshot.setId(blockSnapshotURI);    blockSnapshot.setLabel(name + i);    blockSnapshot.setSnapsetLabel(name + i);    blockSnapshot.setParent(new NamedURI(volume.getId(),name + i));    blockSnapshot.addConsistencyGroup(cg.getId().toString());    blockSnapshot.setProtectionSet(ps.getId());    _dbClient.createObject(blockSnapshot);  }}  }
class C{  public void test_class_hierarchy() throws Exception {  new TestHelper("subclass-725","subclass-725.rq","subclass-725.ttl","subclass-725.srx").runTest();}  }
class C{  public void reset() throws IOException {  m_structure=null;  m_XMLInstances=null;  setRetrieval(NONE);  if (m_File != null) {    setFile(new File(m_File));  } else   if ((m_URL != null) && !m_URL.equals("http://")) {    setURL(m_URL);  }}  }
class C{  @Override public boolean isResultRequired(ResultProducer rp,Object[] key) throws Exception {  if (m_ResultProducer != rp) {    throw new Error("Unrecognized ResultProducer sending results!!");  }  Object[] newKey=new Object[key.length + 1];  System.arraycopy(key,0,newKey,0,key.length);  newKey[key.length]=new String("" + m_CurrentSize);  return m_ResultListener.isResultRequired(this,newKey);}  }
class C{  private static char toLowerCase(char value){  return Character.toLowerCase(value);}  }
class C{  @Override public String toString(){  StringBuilder stringBuilder=new StringBuilder("Parents: [");  for (  NodeCollection parent : parents) {    stringBuilder.append(parent.getId() + " ");  }  stringBuilder.append("];Children: [");  for (  NodeCollection child : children) {    stringBuilder.append(child.getId() + " ");  }  stringBuilder.append("]");  return stringBuilder.toString();}  }
class C{  public static char combine2bytesToU16(byte high,byte low){  char highU8=convertByte2Uint8(high);  char lowU8=convertByte2Uint8(low);  return (char)(highU8 << 8 | lowU8);}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public TStructuralType basicGetStructuralType(){  return structuralType;}  }
class C{  public StringTokenizer(){}  }
class C{  public int recordParams(CtClass[] params,boolean isStatic) throws CompileError {  return gen.recordParams(params,isStatic,"$","$args","$$",stable);}  }
class C{  public UserFeed retrieveAllUsers() throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Retrieving all users.");  URL retrieveUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/");  UserFeed allUsers=new UserFeed();  UserFeed currentPage;  Link nextLink;  do {    currentPage=userService.getFeed(retrieveUrl,UserFeed.class);    allUsers.getEntries().addAll(currentPage.getEntries());    nextLink=currentPage.getLink(Link.Rel.NEXT,Link.Type.ATOM);    if (nextLink != null) {      retrieveUrl=new URL(nextLink.getHref());    }  } while (nextLink != null);  return allUsers;}  }
class C{  public void printFrameInformation(){  System.out.println("Frame STACK:");  for (int i=0; i < frame.getStackSize(); i++) {    SourceValue v=(SourceValue)frame.getStack(i);    System.out.print(" " + i + "("+ v.insns.size()+ "): ");    for (    Object n : v.insns) {      AbstractInsnNode node=(AbstractInsnNode)n;      BytecodeInstruction ins=BytecodeInstructionPool.getInstance(classLoader).getInstruction(className,methodName,node);      System.out.print(ins.toString() + ", ");    }    System.out.println();  }  System.out.println("Frame LOCALS:");  for (int i=1; i < frame.getLocals(); i++) {    SourceValue v=(SourceValue)frame.getLocal(i);    System.out.print(" " + i + "("+ v.insns.size()+ "): ");    for (    Object n : v.insns) {      AbstractInsnNode node=(AbstractInsnNode)n;      BytecodeInstruction ins=BytecodeInstructionPool.getInstance(classLoader).getInstruction(className,methodName,node);      System.out.print(ins.toString() + ", ");    }    System.out.println();  }}  }
class C{  public final void forceFinished(boolean finished){  mFinished=finished;}  }
class C{  protected void reset(){  try {    changing=true;    valid=true;    String value;    if (baseEnumerationVal == SVGMarkerElement.SVG_MARKER_ORIENT_ANGLE) {      value=getValueAsString();    } else     if (baseEnumerationVal == SVGMarkerElement.SVG_MARKER_ORIENT_AUTO) {      value=SVGConstants.SVG_AUTO_VALUE;    } else {      return;    }    element.setAttributeNS(namespaceURI,localName,value);  }  finally {    changing=false;  }}  }
class C{  public boolean isAdjective(){  return typeString.startsWith(ADJECTIVE);}  }
class C{  public boolean isFull(){  return values.size() == k;}  }
class C{  public static void upto(Float self,Number to,@ClosureParams(FirstParam.class) Closure closure){  float to1=to.floatValue();  if (self <= to1) {    for (float i=self; i <= to1; i++) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to upto() cannot be less than the value ("+ self+ ") it's called on.");}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  @Override public TermQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public static RegExp createRegExpForWildcardPattern(String wildcardPattern,String flags){  return RegExp.compile(createRegExpStringForWildcardPattern(wildcardPattern),flags);}  }
class C{  public boolean isShowLabels(){  return mShowLabels;}  }
class C{  public LegacyOctalIntLiteral createLegacyOctalIntLiteral(){  LegacyOctalIntLiteralImpl legacyOctalIntLiteral=new LegacyOctalIntLiteralImpl();  return legacyOctalIntLiteral;}  }
class C{  private void init(){  if (initLatch.getCount() > 0) {    if (initGuard.compareAndSet(false,true)) {      if (log.isDebugEnabled())       log.debug("Initializing cache store.");      if (F.isEmpty(connUrl))       throw new IgniteException("Failed to initialize cache store (connection URL is not provided).");      if (!initSchema) {        initLatch.countDown();        return;      }      if (F.isEmpty(createTblQry))       throw new IgniteException("Failed to initialize cache store (create table query is not provided).");      Connection conn=null;      Statement stmt=null;      try {        conn=openConnection(false);        stmt=conn.createStatement();        stmt.execute(createTblQry);        conn.commit();        initOk=true;      } catch (      SQLException e) {        throw new IgniteException("Failed to create database table.",e);      } finally {        U.closeQuiet(stmt);        closeConnection(conn);        initLatch.countDown();      }    } else {      try {        U.await(initLatch);      } catch (      IgniteInterruptedCheckedException e) {        throw new IgniteException(e);      }    }  }  if (!initOk)   throw new IgniteException("Cache store was not properly initialized.");}  }
class C{  @Override public void validate(final StatementDescription description){  IDescription superDesc=description.getEnclosingDescription();  while (superDesc != null && superDesc instanceof StatementWithChildrenDescription) {    if (((StatementWithChildrenDescription)superDesc).isBreakable()) {      return;    }    superDesc=superDesc.getEnclosingDescription();  }  description.error("'break' must be used in the context of a loop, a switch or an ask statement",IGamlIssue.WRONG_CONTEXT);}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  public PcdRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  public MailOperationException(){}  }
class C{  void updatePressed(ActionEvent e,boolean newSignalGroup,boolean close){  if (curSignalGroup == null) {    if (!checkNewNamesOK()) {      return;    }  }  if (!checkValidSignalMast()) {    return;  }  String uName=_userName.getText();  SignalGroup g=checkNamesOK();  if (g == null) {    return;  }  curSignalGroup=g;  g.setUserName(uName);  initializeIncludedList();  setSignalInformation(g);  setMastAppearanceInformation(g);  g.setSignalMast((SignalMast)mainSignal.getSelectedBean(),mainSignal.getSelectedDisplayName());  SignalGroupDirty=true;  if (close) {    finishUpdate();  }}  }
class C{  public synchronized void add(double x,double y,double value){  super.add(x,y);  mValue.add(value);  updateRange(value);}  }
class C{  public static int dueDays(int p_C_PaymentTerm_ID,Timestamp p_DocDate,Timestamp p_PayDate) throws SQLException {  if (p_C_PaymentTerm_ID == 0 || p_DocDate == null)   return 0;  Timestamp PayDate=p_PayDate;  if (PayDate == null)   PayDate=new Timestamp(System.currentTimeMillis());  PayDate=Adempiere.trunc(PayDate);  Timestamp DueDate=null;  String sql="SELECT * " + "FROM C_PaymentTerm " + "WHERE C_PaymentTerm_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_C_PaymentTerm_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    boolean IsDueFixed="Y".equals(rs.getString("IsDueFixed"));    if (IsDueFixed) {      int FixMonthDay=rs.getInt("FixMonthDay");      int FixMonthOffset=rs.getInt("FixMonthOffset");      int FixMonthCutoff=rs.getInt("FixMonthCutoff");      DueDate=calculateDateDue(p_DocDate,FixMonthDay,FixMonthOffset,FixMonthCutoff);    } else {      int NetDays=rs.getInt("NetDays");      DueDate=Adempiere.addDays(p_DocDate,NetDays);    }  }  rs.close();  pstmt.close();  if (DueDate == null)   return 0;  return Adempiere.getDaysBetween(DueDate,PayDate);}  }
class C{  private void cmd_save(boolean saveQuery){  StringBuffer code=codeUserQuery();  String name=fQueryName.getValue();  if (name == null) {    return;  }  if (name.equals(m_sNew) || name.equals(m_sLast) || name.equals(m_sTipText)|| Util.isEmpty(name,true)) {  } else {    MUserQuery uq=MUserQuery.get(Env.getCtx(),m_AD_Tab_ID,name);    if (code.length() > 0) {      if (uq == null) {        uq=new MUserQuery(Env.getCtx(),0,null);        uq.setName(name);        uq.setAD_Table_ID(m_AD_Table_ID);        uq.setAD_Tab_ID(m_AD_Tab_ID);        uq.setAD_User_ID(Env.getAD_User_ID(Env.getCtx()));      }      uq.setCode(code.toString());    } else     if (code.length() <= 0) {      if (uq.delete(true)) {        FDialog.info(m_targetWindowNo,this,"Deleted",name);        refreshUserQueries();      } else       FDialog.warn(m_targetWindowNo,this,"DeleteError",name);      return;    }    if (uq.save()) {      refreshUserQueries();    } else     FDialog.warn(m_targetWindowNo,this,"SaveError",name);  }  if (saveQuery) {    MUserQuery last=MUserQuery.get(Env.getCtx(),m_AD_Tab_ID,m_sLast);    if (code.length() > 0) {      if (last == null) {        last=new MUserQuery(Env.getCtx(),0,null);        last.setName(m_sLast);        last.setAD_Table_ID(m_AD_Table_ID);        last.setAD_Tab_ID(m_AD_Tab_ID);        last.setAD_User_ID(Env.getAD_User_ID(Env.getCtx()));      }      last.setCode(code.toString());    } else     if (code.length() <= 0) {      if (last != null && !last.delete(true))       FDialog.warn(m_targetWindowNo,this,"DeleteError",name);      return;    }    if (!last.save())     FDialog.warn(m_targetWindowNo,this,"SaveError",name);  }}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.COMPOSITE;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getDateWorkStart() != null && getDeliveryDays() != 0)   setDateWorkComplete(TimeUtil.addDays(getDateWorkStart(),getDeliveryDays())); else   if (getDateWorkStart() != null && getDeliveryDays() == 0 && getDateWorkComplete() != null)   setDeliveryDays(TimeUtil.getDaysBetween(getDateWorkStart(),getDateWorkComplete())); else   if (getDateWorkStart() == null && getDeliveryDays() != 0 && getDateWorkComplete() != null)   setDateWorkStart(TimeUtil.addDays(getDateWorkComplete(),getDeliveryDays() * -1));  if (!isActive())   setIsSelectedWinner(false);  return true;}  }
class C{  protected void reportError(String key){  reportError(key,null);}  }
class C{  protected void handleModelChangedEvent(Model model,Object object,int index){  if (model == treeModel) {    if (object instanceof TreeModel.TreeChangedEvent) {      if (((TreeModel.TreeChangedEvent)object).isNodeChanged()) {        updateNodeAndChildren(((TreeModel.TreeChangedEvent)object).getNode());      } else {        updateAllNodes();      }    }    updateRates=true;  } else   if (model == frequencyModel) {    updateAllNodes();  } else   if (model instanceof SiteModel) {    updateAllNodes();  } else {    throw new RuntimeException("Unknown componentChangedEvent");  }  super.handleModelChangedEvent(model,object,index);}  }
class C{  public static View horizontalButtonSlots(Context context,int desiredHeight,Slot... slots){  final LinearLayout ll=new LinearLayout(context);  ll.setOrientation(LinearLayout.HORIZONTAL);  final LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(0,desiredHeight);  lp.setMargins(10,0,10,0);  lp.weight=0.33f;  boolean left=false;  boolean middle=false;  boolean right=false;  for (  Slot slot : slots) {switch (slot) {case Left:      left=true;    break;case Middle:  middle=true;break;case Right:right=true;break;}}if (left) {final Button button=new Button(context);button.setText("left");ll.addView(button,lp);} else {ll.addView(new View(context),lp);}if (middle) {final Button button=new Button(context);button.setText("center");ll.addView(button,lp);} else {ll.addView(new View(context),lp);}if (right) {final Button button=new Button(context);button.setText("right");ll.addView(button,lp);} else {ll.addView(new View(context),lp);}return ll;}  }
class C{  public static boolean recoverStatement(PsiBuilder b,int l){  assert b instanceof PerlBuilder;  IElementType currentTokenType=b.getTokenType();  return !(currentTokenType == null || !((PerlBuilder)b).getPerlParser().getStatementRecoveryConsumableTokenSet().contains(currentTokenType));}  }
class C{  public boolean addOldMessage(Message message,int messageAndHeadersCount,StringBuilder lastHolderId){  if (!lastHolderId.toString().equals(message.getIdForHolder()) || lastHolderId.toString().equals("")) {    MessageHeaderParent messageHeaderParent=new MessageHeaderParent((message.getStream() == null) ? null : message.getStream().getName(),message.getSubject(),message.getIdForHolder(),message);    messageHeaderParent.setMessageType(message.getType());    messageHeaderParent.setDisplayRecipent(message.getDisplayRecipient(zulipApp));    if (message.getType() == MessageType.STREAM_MESSAGE) {      messageHeaderParent.setMute(mMutedTopics.isTopicMute(message));    }    messageHeaderParent.setColor((message.getStream() == null) ? mDefaultStreamHeaderColor : message.getStream().getParsedColor());    items.add(messageAndHeadersCount + 1,messageHeaderParent);    notifyItemInserted(messageAndHeadersCount + 1);    items.add(messageAndHeadersCount + 2,message);    notifyItemInserted(messageAndHeadersCount + 2);    lastHolderId.setLength(0);    lastHolderId.append(messageHeaderParent.getId());    return true;  } else {    items.add(messageAndHeadersCount + 1,message);    notifyItemInserted(messageAndHeadersCount + 1);    return false;  }}  }
class C{  protected void loadDataset(final String datasetFile) throws UpdateExecutionException, MalformedQueryException, RepositoryException {  final String updateStr="LOAD <" + datasetFile + ">";  con.prepareUpdate(QueryLanguage.SPARQL,updateStr).execute();}  }
class C{  private void calculateContextWithinParseUnit(ModulePointer currentModule){  ModuleContext currentContext=getContext(currentModule);  if (getParent(currentModule) != null) {    currentContext.union(getParent(currentModule).getContext());  }  ModulePointer ancestorModule=currentModule;  while (getParent(ancestorModule) != null) {    currentContext.union(getParent(ancestorModule).getContext());    Vector peers=getPeers(ancestorModule);    for (int i=0; i < peers.size() - 1; i++) {      ModulePointer nextPeer=(ModulePointer)peers.elementAt(i);      currentContext.bindIfNotBound(nextPeer.getName(),nextPeer);    }    ancestorModule=getParent(ancestorModule);  }  handleExtensions(currentModule,currentModule);}  }
class C{  public Element makeElement(Document document){  Element elem=SVGUtil.svgElement(document,SVGConstants.SVG_PATH_TAG);  elem.setAttribute(SVGConstants.SVG_D_ATTRIBUTE,buf.toString());  return elem;}  }
class C{  static Root fromFile(String fileName) throws IOException, ClassNotFoundException {  FileInputStream fin=new FileInputStream(fileName);  ObjectInputStream oin=new ObjectInputStream(new BufferedInputStream(fin));  Root root=(Root)oin.readObject();  oin.close();  return root;}  }
class C{  protected boolean matchFound(Part part) throws Exception {  if (part.getContentType() == null || part.getContentType().startsWith("multipart/alternative")) {    return false;  }  Object content;  try {    content=part.getContent();  } catch (  UnsupportedEncodingException uee) {    return false;  }  Exception anException=null;  if (content instanceof Multipart) {    Multipart multipart=(Multipart)content;    for (int i=0; i < multipart.getCount(); i++) {      try {        Part bodyPart=multipart.getBodyPart(i);        if (matchFound(bodyPart)) {          return true;        }      } catch (      MessagingException e) {        anException=e;      }    }  } else {    String fileName=part.getFileName();    if (fileName != null) {      fileName=cleanFileName(fileName);      if (matchFound(fileName)) {        if (isDebug) {          log("matched " + fileName);        }        return true;      }      if (unzipIsRequested && fileName.endsWith(ZIP_SUFFIX) && matchFoundInZip(part)) {        return true;      }    }  }  if (anException != null) {    throw anException;  }  return false;}  }
class C{  protected static String createIdFromJndiLocation(String jndiLocation){  int[] delimeters=new int[]{jndiLocation.lastIndexOf('/'),jndiLocation.lastIndexOf('.'),jndiLocation.lastIndexOf(':')};  Arrays.sort(delimeters);  int highestIndex=delimeters[2];  return jndiLocation.substring(highestIndex + 1);}  }
class C{  public String toString(){  return textArea.toString();}  }
class C{  public static boolean isGoRight(KeyEvent event){  return isActionDown(event) && (event.getKeyCode() == KeyEvent.KEYCODE_DPAD_RIGHT || (!event.isNumLockOn() && event.getKeyCode() == KeyEvent.KEYCODE_NUMPAD_6));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void resetAnalysisBounds(Size frameSize){  this.bounds=new Rectangle(new Point(frameSize.width / 2,frameSize.height / 2),frameSize.width,frameSize.height);}  }
class C{  public static void write(char x,int r){  if (r == 8) {    write(x);    return;  }  if (r < 1 || r > 16)   throw new IllegalArgumentException("Illegal value for r = " + r);  if (x >= (1 << r))   throw new IllegalArgumentException("Illegal " + r + "-bit char = "+ x);  for (int i=0; i < r; i++) {    boolean bit=((x >>> (r - i - 1)) & 1) == 1;    writeBit(bit);  }}  }
class C{  public static void main(String args[]){  logger.info("-test and demo of the converter ");  String str="Niko";  byte[] ba=str.getBytes();  logger.info("to convert: " + str);  logger.info("converted1: " + byteArrayToHexString(ba));  logger.info("converted1: " + byteArrayToHexString(ba,0,ba.length));  logger.info("converted3: " + stringToHexString(str));  logger.info("----Convert integer to hexString...");  int i=-2;  logger.info("to convert: " + i + " -> "+ intToHexString(i));  logger.info("----Convert byte[] to binary String...");  byte[] baToConvert={(byte)0xff,(byte)0x00,(byte)0x33,(byte)0x11,(byte)0xff,(byte)0x5f,(byte)0x5f,(byte)0x4f,(byte)0x1f,(byte)0xff};  logger.info("to convert: " + toHexString(baToConvert) + " -> "+ byteArrayToBinaryString(baToConvert));  setByteSeparator('-');  logger.info("to convert: " + toHexString(baToConvert) + " -> "+ byteArrayToBinaryString(baToConvert));  setByteSeparator('*');  setWithByteSeparator(true);  logger.info("to convert: " + toHexString(baToConvert) + " -> "+ byteArrayToBinaryString(baToConvert));  char[] bd={'a','b'};  try {    setBitDigits(bd);  } catch (  Exception ex) {    logger.debug("",ex);  }  logger.info("to convert: " + toHexString(baToConvert) + " -> "+ byteArrayToBinaryString(baToConvert));  setBitDigits('0','1');  logger.info("---- Convert.toByteArray(int) ");  for (int iToConvert=-10; iToConvert < 10; iToConvert++) {    logger.info("to convert = " + iToConvert + " = "+ HexDump.toBinaryString(iToConvert));    byte[] baConvInt=new byte[4];    baConvInt=HexDump.toByteArray(iToConvert);    logger.info("convertet byteArray = " + HexDump.toBinaryString(baConvInt));  }  logger.info("---- toHexString(int) ");  i=-1;  logger.info(i + " = 0x" + toHexString(i)+ " = "+ toBinaryString(i));  i++;  logger.info(i + " = 0x" + toHexString(i)+ " = "+ toBinaryString(i));  logger.info("---- toHexString(long) ");  long l=100;  logger.info(l + " = 0x" + toHexString(l)+ " = "+ toBinaryString(l));  java.util.Random rnd=new java.util.Random();  l=rnd.nextLong();  logger.info(l + " = 0x" + toHexString(l)+ " = "+ toBinaryString(l));  logger.info("---- toHexString(short) ");  short s=100;  logger.info(s + " = 0x" + toHexString(s)+ " = "+ toBinaryString(s));  rnd=new java.util.Random();  s=(short)rnd.nextInt();  logger.info(s + " = 0x" + toHexString(s)+ " = "+ toBinaryString(s));  logger.info("---- read file in Hex-Format ");  String strToConvert="12345654321";  logger.info(strToConvert + " = " + stringToHexString(strToConvert));  logger.info("Das ist die Hex-Darstellung des obigen Strings");  logger.info("ba = " + toHexString(ba));}  }
class C{  public String toString(){  return super.toString();}  }
class C{  public static void putUnsignedInt(ByteBuffer bb,long v){  bb.putInt((int)(v & 0xffffffffL));}  }
class C{  public String toString(){  final String TAB="    ";  String retValue="";  retValue="MMDocument ( " + "csvLineNo = " + this.csvLineNo + TAB+ "DocBaseType = "+ this.DocBaseType+ TAB+ "DocumentNo = "+ this.DocumentNo+ TAB+ "LocatorValue = "+ this.LocatorValue+ TAB+ "LocatorValueTo = "+ this.LocatorValueTo+ TAB+ "ProductValue = "+ this.ProductValue+ TAB+ "Price = "+ this.Price+ TAB+ "Qty = "+ this.Qty+ TAB+ "QtyOrdered = "+ this.QtyOrdered+ TAB+ "QtyReserved = "+ this.QtyReserved+ TAB+ "Cost = "+ this.Cost+ TAB+ "ASI = "+ this.ASI+ TAB+ "Date = "+ this.Date+ TAB+ "PODocumentNo = "+ this.PODocumentNo+ TAB+ "IsReversal = "+ this.IsReversal+ TAB+ "document = "+ this.document+ TAB+ " )";  return retValue;}  }
class C{  public static void test2(int size,AbstractDistribution distribution){  System.out.println("FIXME:  Should this test exist without hep.aida");  System.out.println("\n\nGood bye.\n");}  }
class C{  @Override public void updateRemove(Offer offer){  planAdapter.removeOffer(offer);}  }
class C{  public boolean isDownloadTxDependencies(){  return vDownloadTxDependencyDepth > 0;}  }
class C{  public final int lastIndexOf(int elem){  for (int i=(m_firstFree - 1); i >= 0; i--) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  Object addParserHighlight(ParserNotice notice,HighlightPainter p) throws BadLocationException {  Document doc=textArea.getDocument();  TextUI mapper=textArea.getUI();  int start=notice.getOffset();  int end=0;  if (start == -1) {    int line=notice.getLine();    Element root=doc.getDefaultRootElement();    if (line >= 0 && line < root.getElementCount()) {      Element elem=root.getElement(line);      start=elem.getStartOffset();      end=elem.getEndOffset();    }  } else {    end=start + notice.getLength();  }  HighlightInfo i=new LayeredHighlightInfo();  i.painter=p;  i.p0=doc.createPosition(start);  i.p1=doc.createPosition(end);  i.notice=notice;  parserHighlights.add(i);  mapper.damageRange(textArea,start,end);  return i;}  }
class C{  protected void handleColumnChanged(Column c,int start,int end){  for (; !isValidRow(start) && start <= end; ++start)   ;  if (start > end)   return;  int idx;  if (m_lastCol != -1 && c == getColumn(m_lastCol)) {    idx=m_lastCol;  } else {    idx=getColumnNumber(c);  }  if (idx >= 0) {    fireTableEvent(start,end,idx,TableModelEvent.UPDATE);  }}  }
class C{  public T value(){  ensurePresence();  return value;}  }
class C{  @Modifying @Transactional public void deleteDiagnostic(Long chequeID,Long diagnosticID){  diagnosticRepository.delete(diagnosticID);}  }
class C{  public long commitIndex(){  return commitIndex;}  }
class C{  public void printScalarVariable(LocalVariableMap variables,String varname){  if (varname == null) {    System.err.println("No scalar variable name entered.");    return;  }  if (variables != null && !variables.keySet().isEmpty()) {    if (variables.get(varname) != null) {      if (variables.get(varname).getDataType() == DataType.SCALAR)       System.out.println(varname + " = " + variables.get(varname).toString()); else       System.out.println("Variable \"" + varname + "\" is not scalar variable.");    } else     System.out.println("DML scalar variable \"" + varname + "\" is not in the current frame scope. Try \"a\" to list all variables within current frame scope.");  } else   System.out.println("Symbol table for current frame is empty");}  }
class C{  public void saveAsSVG(File file) throws IOException, TransformerFactoryConfigurationError, TransformerException {  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));  javax.xml.transform.Result result=new StreamResult(out);  SVGDocument doc=cloneDocument();  Transformer xformer=TransformerFactory.newInstance().newTransformer();  xformer.setOutputProperty(OutputKeys.INDENT,"yes");  xformer.transform(new DOMSource(doc),result);  out.flush();  out.close();}  }
class C{  public static void save(String filename){  File file=new File(filename);  String suffix=filename.substring(filename.lastIndexOf('.') + 1);  if (suffix.toLowerCase().equals("png")) {    try {      ImageIO.write(onscreenImage,suffix,file);    } catch (    IOException e) {      e.printStackTrace();    }  } else   if (suffix.toLowerCase().equals("jpg")) {    WritableRaster raster=onscreenImage.getRaster();    WritableRaster newRaster;    newRaster=raster.createWritableChild(0,0,width,height,0,0,new int[]{0,1,2});    DirectColorModel cm=(DirectColorModel)onscreenImage.getColorModel();    DirectColorModel newCM=new DirectColorModel(cm.getPixelSize(),cm.getRedMask(),cm.getGreenMask(),cm.getBlueMask());    BufferedImage rgbBuffer=new BufferedImage(newCM,newRaster,false,null);    try {      ImageIO.write(rgbBuffer,suffix,file);    } catch (    IOException e) {      e.printStackTrace();    }  } else {    System.out.println("Invalid image file type: " + suffix);  }}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 >= z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 >= constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 >= constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Boolean isBooleanAttribute(){  return booleanAttribute;}  }
class C{  public SoftValueHashMap(Map t){  this(Math.max(2 * t.size(),11),0.75f);  putAll(t);}  }
class C{  public GlobalWrapper(Context context){  super(context);  String[] names={"startMouseCapture","stopMouseCapture"};  this.defineFunctionProperties(names,GlobalWrapper.class,ScriptableObject.DONTENUM);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return (a == null) ? "" : a.getPartialString();}  }
class C{  private void launchSearchActivity(){  Intent intent=new Intent(VectorRoomCreationActivity.this,VectorRoomInviteMembersActivity.class);  intent.putExtra(VectorRoomInviteMembersActivity.EXTRA_MATRIX_ID,mSession.getMyUserId());  intent.putExtra(VectorRoomInviteMembersActivity.EXTRA_HIDDEN_PARTICIPANT_ITEMS,mParticipants);  VectorRoomCreationActivity.this.startActivityForResult(intent,INVITE_USER_REQUEST_CODE);}  }
class C{  public boolean isXRoundedLabels(){  return mXRoundedLabels;}  }
class C{  public boolean showEvent(){  return this.show.isSelected();}  }
class C{  @Override public void close(){synchronized (lock) {    if (isOpen()) {      buf=null;    }  }}  }
class C{  public FieldAccess newFieldAccess(){  FieldAccess result=new FieldAccess(this);  return result;}  }
class C{  public LabelNode gotoLabel(final LabelNode l){  Instantiation owner=findOwner(instructions.indexOf(l));  return owner.rangeTable.get(l);}  }
class C{  public boolean forwardRaw(float[] rawllpts,int rawoff,float[] xcoords,float[] ycoords,boolean[] visible,int copyoff,int copylen){  Point2D temp=new Point2D.Float();  int end=copylen + copyoff;  for (int i=copyoff, j=rawoff; i < end; i++, j+=2) {    forward(rawllpts[j],rawllpts[j + 1],temp,true);    xcoords[i]=(float)temp.getX();    ycoords[i]=(float)temp.getY();    visible[i]=true;  }  return true;}  }
class C{  public void paintSpinnerBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public FeatureManifest(String path) throws Exception {  this(IOUtils.lsResources(FeatureManifest.class,path).get(0).openStream());}  }
class C{  public static CCWavesTiles3D action(int wav,float amp,ccGridSize gridSize,float d){  return new CCWavesTiles3D(wav,amp,gridSize,d);}  }
class C{  public static ArrayModifiableDBIDs newArray(int size){  return DBIDFactory.FACTORY.newArray(size);}  }
class C{  public short[][] action_table(){  return _action_table;}  }
class C{  public SlackIntegration slack(){  return slackIntegration;}  }
class C{  public String verbosityTipText(){  return "The verbosity option.";}  }
class C{  public static void logDiffProcessed(final Logger logger,final Task<Diff> diff,final long time){  logger.logMessage(Level.INFO,"Generated Entry\t" + Time.toClock(time) + "\t"+ diff.toString());}  }
class C{  public synchronized void reassertRole(OFSwitchHandshakeHandler ofSwitchHandshakeHandler,HARole role){  if (this.getRole() != role)   return;  ofSwitchHandshakeHandler.sendRoleRequestIfNotPending(this.getRole().getOFRole());}  }
class C{  protected void instantiateAndConfigurePipeline(String name) throws ReplicatorException {  Pipeline newPipeline=new Pipeline();  newPipeline.setName(name);  boolean autoSync=false;  if ("master".equals(name))   autoSync=true;  String autoSyncProperty=ReplicatorConf.PIPELINE_ROOT + "." + name+ ".autoSync";  if (properties.get(autoSyncProperty) != null)   autoSync=properties.getBoolean(autoSyncProperty);  newPipeline.setAutoSync(autoSync);  boolean syncTHLWithExtractor=true;  if ("slave".equals(name))   syncTHLWithExtractor=false;  String syncTHLProperty=ReplicatorConf.PIPELINE_ROOT + "." + name+ ".syncTHLWithExtractor";  if (properties.get(syncTHLProperty) != null)   syncTHLWithExtractor=properties.getBoolean(syncTHLProperty);  newPipeline.setSyncTHLWithExtractor(syncTHLWithExtractor);  String servicesProperty=ReplicatorConf.PIPELINE_ROOT + "." + name+ ".services";  List<String> services=properties.getStringList(servicesProperty);  for (  String serviceName : services) {    PipelineService service=(PipelineService)loadAndConfigurePlugin(ReplicatorConf.SERVICE_ROOT,serviceName);    service.setName(serviceName);    newPipeline.addService(serviceName,service);  }  String storesProperty=ReplicatorConf.PIPELINE_ROOT + "." + name+ ".stores";  List<String> stores=properties.getStringList(storesProperty);  for (  String storeName : stores) {    Store store=(Store)loadAndConfigurePlugin(ReplicatorConf.STORE_ROOT,storeName);    store.setName(storeName);    newPipeline.addStore(storeName,store);  }  String stagesProperty=ReplicatorConf.PIPELINE_ROOT + "." + name;  List<String> stages=properties.getStringList(stagesProperty);  if (stages.size() == 0) {    throw new ReplicatorException("Pipeline does not exist or has no stages: " + name);  }  for (  String stageName : stages) {    String stageProperty=ReplicatorConf.STAGE_ROOT + "." + stageName+ ".";    TungstenProperties stageProps=properties.subset(stageProperty,true);    Stage stage=new Stage(newPipeline);    stage.setName(stageName);    newPipeline.addStage(stage);    String extractorName=stageProps.remove(ReplicatorConf.EXTRACTOR);    if (extractorName == null) {      throw new ReplicatorException("No extractor specified for stage: " + stageName);    } else {      PluginSpecification extractorSpecification=specifyPlugin(ReplicatorConf.EXTRACTOR_ROOT,extractorName);      stage.setExtractorSpec(extractorSpecification);    }    List<String> filterNames=stageProps.getStringList(ReplicatorConf.FILTERS);    stageProps.remove(ReplicatorConf.FILTERS);    List<PluginSpecification> filterSpecs=new ArrayList<PluginSpecification>();    for (    String filterName : filterNames) {      PluginSpecification fps=specifyPlugin(ReplicatorConf.FILTER_ROOT,filterName);      filterSpecs.add(fps);    }    stage.setFilterSpecs(filterSpecs);    String applierName=stageProps.remove(ReplicatorConf.APPLIER);    if (applierName == null) {      throw new ReplicatorException("No applier specified for stage: " + stageName);    } else {      PluginSpecification applierSpec=specifyPlugin(ReplicatorConf.APPLIER_ROOT,applierName);      stage.setApplierSpec(applierSpec);    }    stageProps.applyProperties(stage);  }  try {    newPipeline.configure(this);  } catch (  InterruptedException e) {    throw new ReplicatorException("Pipeline configuration was interrupted");  }  pipeline=newPipeline;}  }
class C{  public CipherInputStream(InputStream is,StreamCipher cipher){  this(is,cipher,INPUT_BUF_SIZE);}  }
class C{  public void error(Element e,String msg){  messager.printMessage(Diagnostic.Kind.ERROR,msg,e);}  }
class C{  public void addTransform(DataTransform transform){  transformSource.add(transform);}  }
class C{  protected void completeCommandline(Commandline cmd){  super.completeCommandline(cmd);  if (compileFlags != null) {    appendOptionArgument(cmd,"--compile",compileFlags);  }  if (version != null) {    appendOptionArgument(cmd,"--version",version);  }  if (nodeExe != null) {    appendOptionArgument(cmd,"--node-exe",nodeExe);  }  if (debug != null) {    appendOptionArgument(cmd,"--debug",debug.toString());  }  if (tap != null) {    if (tap.isEmpty()) {      appendOption(cmd,"--tap");    } else {      appendOption(cmd,"--tap=" + tap);    }  }  if (report) {    appendOption(cmd,"--report");  }  for (  Test test : tests) {    appendOptionArgument(cmd,"--test",test.getTest());  }  for (  Module module : moduleSet.getModules()) {    log("Adding module: " + module,Project.MSG_VERBOSE);    cmd.createArgument().setValue(module.toSpec());  }}  }
class C{  public ClosedDirectoryStreamException(){}  }
class C{  void list(InputStream in,String files[]) throws IOException {  ZipInputStream zis=new ZipInputStream(in);  ZipEntry e;  while ((e=zis.getNextEntry()) != null) {    zis.closeEntry();    printEntry(e,files);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Item pop(){  if (isEmpty())   throw new NoSuchElementException("Stack underflow");  Item item=first.item;  first=first.next;  n--;  assert check();  return item;}  }
class C{  public synchronized void writeToRemote(byte b){  remoteBuffer.add(b);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  @Override public void onDragStart(){  hideActionBar();}  }
class C{  static public double log2(double value){  return Math.log(value) * 1.4426950408889634;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void push(Namespace namespace){  namespaceStack.add(namespace);  namespaceCacheList.add(null);  currentNamespaceCache=null;  String prefix=namespace.getPrefix();  if ((prefix == null) || (prefix.length() == 0)) {    defaultNamespace=namespace;  }}  }
class C{  public HttpBusinessException(HttpStatus pHttpStatus){  super();  this.httpStatus=pHttpStatus;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("SingleItem");}  }
class C{  public boolean isDirectBuffer(){  return directBuf;}  }
class C{  public static Geometry combine(Geometry g0,Geometry g1){  GeometryCombiner combiner=new GeometryCombiner(createList(g0,g1));  return combiner.combine();}  }
class C{  private void suffix() throws Exception {  if (useBehavior) {    writer.fwrite("private static final Collection<String> EVENT_NAMES = Collections.unmodifiableCollection(Arrays.asList(");    boolean first=true;    String defaultEventName=null;    for (    PropertyBean property : cb.getProperties()) {      if (null != property.getBehaviors() && !property.getBehaviors().isEmpty()) {        String behaviorName=null;        for (        String behavior : property.getBehaviors()) {          if (!first) {            writer.write(",");          } else {            first=false;          }          writer.write("\"");          if (0 == behavior.length()) {            behaviorName=property.getPropertyName();            if (behaviorName.length() > 2 && behaviorName.startsWith("on")) {              StringBuilder buffer=new StringBuilder(behaviorName.substring(2,3).toLowerCase());              buffer.append(behaviorName.substring(3));              behaviorName=buffer.toString();            }          } else {            behaviorName=behavior;          }          writer.write(behaviorName);          writer.write("\"");        }        if (property.isDefaultBehavior()) {          defaultEventName=behaviorName;        }      }    }    writer.write("));\n\n");    writer.fwrite("public Collection<String> getEventNames() {\n");    writer.indent();    writer.fwrite("return EVENT_NAMES;");    writer.outdent();    writer.fwrite("}\n\n\n");    writer.fwrite("public String getDefaultEventName() {\n");    writer.indent();    if (null == defaultEventName) {      writer.fwrite("return null;");    } else {      writer.fwrite("return \"" + defaultEventName + "\";");    }    writer.outdent();    writer.fwrite("}\n\n\n");  }  writer.fwrite("private void handleAttribute(String name, Object value) {\n");  writer.indent();  writer.fwrite("List<String> setAttributes = (List<String>) this.getAttributes().get(\"javax.faces.component.UIComponentBase.attributesThatAreSet\");\n");  writer.fwrite("if (setAttributes == null) {\n");  writer.indent();  writer.fwrite("String cname = this.getClass().getName();\n");  writer.fwrite("if (cname != null && cname.startsWith(OPTIMIZED_PACKAGE)) {\n");  writer.indent();  writer.fwrite("setAttributes = new ArrayList<String>(6);\n");  writer.fwrite("this.getAttributes().put(\"javax.faces.component.UIComponentBase.attributesThatAreSet\", setAttributes);\n");  writer.outdent();  writer.fwrite("}\n");  writer.outdent();  writer.fwrite("}\n");  writer.fwrite("if (setAttributes != null) {\n");  writer.indent();  writer.fwrite("if (value == null) {\n");  writer.indent();  writer.fwrite("ValueExpression ve = getValueExpression(name);\n");  writer.fwrite("if (ve == null) {\n");  writer.indent();  writer.fwrite("setAttributes.remove(name);\n");  writer.outdent();  writer.fwrite("}\n");  writer.outdent();  writer.fwrite("} else if (!setAttributes.contains(name)) {\n");  writer.indent();  writer.fwrite("setAttributes.add(name);\n");  writer.outdent();  writer.fwrite("}\n");  writer.outdent();  writer.fwrite("}\n");  writer.outdent();  writer.fwrite("}\n\n");  writer.outdent();  writer.write("}\n");}  }
class C{  public Builder<K> busyloop(boolean busyloop){  this.busyloop=busyloop;  return this;}  }
class C{  public CachingMetadataIndex(final AbstractScaleOutFederation<?> fed,final String name,final long timestamp,final MetadataIndexMetadata mdmd){  super(fed,name,timestamp,mdmd);  this.delegate=new NoCacheMetadataIndexView(fed,name,timestamp,mdmd);}  }
class C{  public DefaultContainerFactory(ClassLoader classLoader){  super();  AbstractFactoryRegistry.register(classLoader,this);}  }
class C{  public boolean match(ReturnStatement node,Object other){  if (!(other instanceof ReturnStatement)) {    return false;  }  ReturnStatement o=(ReturnStatement)other;  return safeSubtreeMatch(node.getExpression(),o.getExpression());}  }
class C{  public static void assertArrayEquals(Object[] expected,Object[] actual){  assertArrayEquals("",expected,actual);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    target.copy();  }}  }
class C{  public void onItemClick(U holder,T item){  return;}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  void createEntry(int hash,Object key,Object value,int bucketIndex){  Entry e=new Entry(hash,key,value,table[bucketIndex]);  table[bucketIndex]=e;  e.addBefore(header);  size++;}  }
class C{  @PostConstruct protected void init(){  setStyleName("sp-table");  setSizeFull();  setSelectable(true);  setMultiSelect(false);  setImmediate(true);  addStyleName(ValoTheme.TABLE_NO_VERTICAL_LINES);  addStyleName(ValoTheme.TABLE_SMALL);  populateTableData();  setColumnCollapsingAllowed(false);  setColumnProperties();  setId(UIComponentIdProvider.DIST_SET_SELECT_TABLE_ID);  eventBus.subscribe(this);}  }
class C{  @Override protected void fireTableEvent(int row0,int row1,int col,int type){  if (type == EventConstants.UPDATE) {    if (col != VisualItem.IDX_VALIDATED) {      for (int r=row0; r <= row1; ++r) {        setValidated(r,false);      }    } else {      for (int r=row0; r <= row1; ++r) {        if (!isValidated(r)) {          m_vis.damageReport(getItem(r),getBounds(r));        }      }    }  } else   if (type == EventConstants.DELETE && col == EventConstants.ALL_COLUMNS) {    for (int r=row0; r <= row1; ++r) {      if (isVisible(r) && isValidated(r)) {        VisualItem item=(VisualItem)getTuple(r);        m_vis.damageReport(item,getBounds(r));      }    }  }  super.fireTableEvent(row0,row1,col,type);}  }
class C{  public void addShort(short x){  prep(2,0);  putShort(x);}  }
class C{  protected void cleanUnusedStyles(){  Hashtable<String,Style> usedStyles=new Hashtable<String,Style>();  Iterator<Caption> itrC=captions.values().iterator();  while (itrC.hasNext()) {    Caption current=itrC.next();    if (current.style != null) {      String iD=current.style.iD;      if (!usedStyles.containsKey(iD))       usedStyles.put(iD,current.style);    }  }  this.styling=usedStyles;}  }
class C{  public double weightedTruePositiveRate(){  return m_delegate.weightedTruePositiveRate();}  }
class C{  public static RetainFragment findOrCreateRetainFragment(FragmentManager fm){  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);  if (mRetainFragment == null) {    mRetainFragment=new RetainFragment();    fm.beginTransaction().add(mRetainFragment,TAG).commit();  }  return mRetainFragment;}  }
class C{  public Set<String> keySet(){  return this.map.keySet();}  }
class C{  public static DalvikMethodStruct of(Method method){  return new DalvikMethodStruct(method);}  }
class C{  public static DecodeConfiguration copy(DecodeConfiguration config){  if (config != null) {switch (config.getDecoderType()) {case AM:      DecodeConfigAM originalAM=(DecodeConfigAM)config;    DecodeConfigAM copyAM=new DecodeConfigAM();  copyAM.setAFC(originalAM.getAFC());copyAM.setAFCMaximumCorrection(originalAM.getAFCMaximumCorrection());return copyAM;case LTR_NET:DecodeConfigLTRNet originalLTRNet=(DecodeConfigLTRNet)config;DecodeConfigLTRNet copyLTRNet=new DecodeConfigLTRNet();copyLTRNet.setAFC(originalLTRNet.getAFC());copyLTRNet.setAFCMaximumCorrection(originalLTRNet.getAFCMaximumCorrection());copyLTRNet.setMessageDirection(originalLTRNet.getMessageDirection());return copyLTRNet;case LTR_STANDARD:DecodeConfigLTRStandard originalLTRStandard=(DecodeConfigLTRStandard)config;DecodeConfigLTRStandard copyLTRStandard=new DecodeConfigLTRStandard();copyLTRStandard.setAFC(originalLTRStandard.getAFC());copyLTRStandard.setAFCMaximumCorrection(originalLTRStandard.getAFCMaximumCorrection());copyLTRStandard.setMessageDirection(originalLTRStandard.getMessageDirection());return copyLTRStandard;case MPT1327:DecodeConfigMPT1327 originalMPT=(DecodeConfigMPT1327)config;DecodeConfigMPT1327 copyMPT=new DecodeConfigMPT1327();copyMPT.setAFC(originalMPT.getAFC());copyMPT.setAFCMaximumCorrection(originalMPT.getAFCMaximumCorrection());copyMPT.setCallTimeout(originalMPT.getCallTimeout());copyMPT.setChannelMapName(originalMPT.getChannelMapName());copyMPT.setSync(originalMPT.getSync());copyMPT.setTrafficChannelPoolSize(originalMPT.getTrafficChannelPoolSize());return copyMPT;case NBFM:DecodeConfigNBFM originalNBFM=(DecodeConfigNBFM)config;DecodeConfigNBFM copyNBFM=new DecodeConfigNBFM();copyNBFM.setAFC(originalNBFM.getAFC());copyNBFM.setAFCMaximumCorrection(originalNBFM.getAFCMaximumCorrection());return copyNBFM;case P25_PHASE1:DecodeConfigP25Phase1 originalP25=(DecodeConfigP25Phase1)config;DecodeConfigP25Phase1 copyP25=new DecodeConfigP25Phase1();copyP25.setAFC(originalP25.getAFC());copyP25.setAFCMaximumCorrection(originalP25.getAFCMaximumCorrection());copyP25.setIgnoreDataCalls(originalP25.getIgnoreDataCalls());copyP25.setModulation(originalP25.getModulation());copyP25.setTrafficChannelPoolSize(originalP25.getTrafficChannelPoolSize());return copyP25;case PASSPORT:DecodeConfigPassport originalPass=(DecodeConfigPassport)config;DecodeConfigPassport copyPass=new DecodeConfigPassport();copyPass.setAFC(originalPass.getAFC());copyPass.setAFCMaximumCorrection(originalPass.getAFCMaximumCorrection());return copyPass;default :throw new IllegalArgumentException("Unrecognized decoder " + "configuration type:" + config.getDecoderType());}}return null;}  }
class C{  private Socket enableProtocols(Socket socket){  if (socket instanceof SSLSocket) {    SSLSocket sslSocket=(SSLSocket)socket;    ArrayList<String> protocols=new ArrayList<String>();    for (    String protocol : sslSocket.getEnabledProtocols()) {      if (!protocol.startsWith(SSLV2)) {        protocols.add(protocol);      }    }    sslSocket.setEnabledProtocols((String[])protocols.toArray(new String[protocols.size()]));  }  return socket;}  }
class C{  public void run(int condition){  if (condition == C_STARTED_FRESH) {    startFresh();  } else {    startFromCheckpoint();  }  int result=R_NOTDONE;  while (result == R_NOTDONE) {    result=evolve();  }  finish(result);}  }
class C{  public boolean isRenderPoints(SimpleSeriesRenderer renderer){  return ((XYSeriesRenderer)renderer).getPointStyle() != PointStyle.POINT;}  }
class C{  private RegisterOperand nullCheckPerformedInLoopPredecessors(BasicBlock header,Instruction instr){  if (VM.VerifyAssertions)   VM._assert(NullCheck.conforms(instr));  BasicBlock block=header;  do {    block=ir.HIRInfo.dominatorTree.getParent(block);    Instruction lastInst=block.lastInstruction();    for (Instruction itrInst=block.firstInstruction(); itrInst != lastInst; itrInst=itrInst.nextInstructionInCodeOrder()) {      if (NullCheck.conforms(itrInst) && NullCheck.getRef(itrInst).similar(NullCheck.getRef(instr))) {        return NullCheck.getGuardResult(itrInst);      }    }  } while (block != ir.cfg.entry());  return null;}  }
class C{  public boolean isDownloadToStyles(){  return downloadToStyles;}  }
class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new OutputLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    bufOff=0;    len-=gapLen;    inOff+=gapLen;    while (len > buf.length) {      resultLen+=cipher.processBlock(in,inOff,out,outOff + resultLen);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  if (bufOff == buf.length) {    resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);    bufOff=0;  }  return resultLen;}  }
class C{  private final boolean checkFloat(float in,Condition condition){  String value=condition.getValue();  float v;  try {    v=Float.parseFloat(value);  } catch (  NumberFormatException e) {    return false;  }switch (condition.getConditionType()) {case EQUALS:{      return (in == v);    }case NOT_EQUALS:{    return (in != v);  }case GREATER:{  return (in > v);}case GREATER_EQ:{return (in >= v);}case LESS:{return (in < v);}case LESS_EQ:{return (in <= v);}default :{return false;}}}  }
class C{  public static <K,V>MutableList<V> toSortedList(Map<K,V> map,Comparator<? super V> comparator){  return Iterate.toSortedList(map.values(),comparator);}  }
class C{  public IsActiveException(Throwable cause){  super(cause);}  }
class C{  public static String indent(String text){  return tab + text.replaceAll("\\r?\\n",nl + tab);}  }
class C{  public void addEventType(String eventTypeName,Properties typeMap){  mapNames.put(eventTypeName,typeMap);}  }
class C{  public Word(String lemma,POS pos){  this.lemma=lemma;  this.pos=pos;}  }
class C{  public FollowerInfo(Follower.Type type,String stream,List<Follower> followers,int total){  this.type=type;  this.followers=followers;  this.total=total;  this.time=System.currentTimeMillis();  this.stream=stream;  this.requestError=false;  this.requestErrorDescription=null;}  }
class C{  public boolean isConnectionBased(){  return false;}  }
class C{  public double[] computeLocalUsingPreviousObservations(double states1[][],double states2[][]){  return computeLocalUsingPreviousObservations(states1,states2,false);}  }
class C{  public static void logError(String msg,Throwable ex){  getDefault().getLog().log(new Status(IStatus.ERROR,PLUGIN_ID,IStatus.OK,msg,ex));}  }
class C{  public <T>T fromXML(final InputStream input){  return unmarshal(hierarchicalStreamDriver.createReader(input),null);}  }
class C{  public static boolean testRayCircle(Vector2fc origin,Vector2fc dir,Vector2fc center,float radiusSquared){  return testRayCircle(origin.x(),origin.y(),dir.x(),dir.y(),center.x(),center.y(),radiusSquared);}  }
class C{  public void dumpCurrentRow(){  dumpRow(this,m_row);}  }
class C{  private void paintVerticalLine(Graphics2D g,JComponent c,int x,int y,int width,int height){  paintLine(g,width,height);}  }
class C{  public EdgeSample(final SampleBase sourceSample,final int inputCount,final long tuplesRead,final long sumRangeCount,final long outputCount,final long adjustedCard,final double f,final long estCard,final long estRead,final int limit,final EstimateEnum estimateEnum,final IBindingSet[] sample){  super(estCard,limit,estimateEnum,sample);  if (sourceSample == null)   throw new IllegalArgumentException();  this.sourceSample=sourceSample;  this.inputCount=inputCount;  this.tuplesRead=tuplesRead;  this.sumRangeCount=sumRangeCount;  this.outputCount=outputCount;  this.adjCard=adjustedCard;  this.f=f;  this.estRead=estRead;}  }
class C{  public JSONObject sendHarbormasterMessage(String phid,boolean pass,UnitResults unitResults,Map<String,String> coverage,LintResults lintResults) throws ConduitAPIException, IOException {  return new HarbormasterClient(conduit).sendHarbormasterMessage(phid,pass,unitResults,coverage,lintResults);}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  public boolean tcpKeepAlive(){  return reader.getBoolean(TCP_KEEP_ALIVE,DEFAULT_TCP_KEEP_ALIVE);}  }
class C{  public IntentBuilder durationLimit(int limit){  result.putExtra(MediaStore.EXTRA_DURATION_LIMIT,limit);  return (this);}  }
class C{  public void testLowerCaseTokenizer() throws Exception {  Reader reader=new StringReader("What's this thing do?");  Tokenizer stream=tokenizerFactory("LowerCase").create(newAttributeFactory());  stream.setReader(reader);  assertTokenStreamContents(stream,new String[]{"what","s","this","thing","do"});}  }
class C{  public static void create(Context context,CharSequence title,CharSequence content,int smallIcon){  create(context,0,title,content,smallIcon,getPendingIntentForActivity(context));}  }
class C{  public void addFieldToTextIndex(String field){  if (fullTextIdx == null) {    fullTextIdx=new IndexDescriptor(FULLTEXT);    indexes.put(null,fullTextIdx);  }  fullTextIdx.addField(field,0,false);}  }
class C{  public Builder config(Bitmap.Config config){  this.config=config;  return this;}  }
class C{  @Nullable public String toHexString(){  return seed != null ? HEX.encode(seed) : null;}  }
class C{  public T caseExpression(Expression object){  return null;}  }
class C{  public void addParameter(IntParameter param,int... initialSearchValues){  searchParams.add(param);  DoubleList dl=new DoubleList(initialSearchValues.length);  for (  double d : initialSearchValues)   dl.add(d);  Arrays.sort(dl.getBackingArray());  if (param.isWarmParameter() && !param.preferredLowToHigh())   Collections.reverse(dl);  if (param.isWarmParameter())   searchValues.add(0,dl); else   searchValues.add(dl);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected static String createName(long num,String threadName,String gridName){  return threadName + "-#" + num+ '%'+ gridName+ '%';}  }
class C{  private Object executeExp(PageContext pc,SQL sql,Query qr,Expression exp,int row) throws PageException {  if (exp instanceof Value)   return ((Value)exp).getValue();  if (exp instanceof Column)   return executeColumn(sql,qr,(Column)exp,row);  if (exp instanceof Operation)   return executeOperation(pc,sql,qr,(Operation)exp,row);  if (exp instanceof BracketExpression)   return executeBracked(pc,sql,qr,(BracketExpression)exp,row);  throw new DatabaseException("unsupported sql statement [" + exp + "]",null,sql,null);}  }
class C{  public boolean isRepeatDownload() throws IllegalAccessException {  return mRepeatDownload.getBoolean(mRepeatWrapper);}  }
class C{  public void resume(Object target){  assert target != null : "target must be non nil";  tHashSelectorEntry element=hashForSelectors.get(target);  if (element != null)   element.paused=false;  tHashSelectorEntry elementUpdate=hashForUpdates.get(target);  if (elementUpdate != null) {    assert elementUpdate.target != null : "resumeTarget: unknown error";    elementUpdate.setPaused(false);  }}  }
class C{  public static void main(String[] args){  ArrayList<Double> list=new ArrayList<>();  try {    java.net.URL url=new java.net.URL("http://cs.armstrong.edu/liang/data/Scores.txt");    Scanner input=new Scanner(url.openStream());    while (input.hasNext()) {      list.add(input.nextDouble());    }    double total=sum(list);    System.out.printf("Total scores: %.0f\n",total);    System.out.printf("Average score: %.0f\n",(total / list.size()));  } catch (  java.net.MalformedURLException ex) {    System.out.println("Invalid URL");  }catch (  java.io.IOException ex) {    System.out.println("I/O Errors: so such file");  }}  }
class C{  protected TreeCellEditor createDefaultCellEditor(){  if (currentCellRenderer != null && (currentCellRenderer instanceof DefaultTreeCellRenderer)) {    DefaultTreeCellEditor editor=new DefaultTreeCellEditor(tree,(DefaultTreeCellRenderer)currentCellRenderer);    return editor;  }  return new DefaultTreeCellEditor(tree,null);}  }
class C{  public BaseDateTime(Chronology chronology){  this(DateTimeUtils.currentTimeMillis(),chronology);}  }
class C{  @Override public synchronized boolean isEmpty(){  return elementCount == 0;}  }
class C{  @Override public void work(){  for (  IWork worker : _list_workers) {    worker.work();  }}  }
class C{  public void addItem(T item){  this.mItemList.add(item);  mScrollAdapter.addItem(item);}  }
class C{  protected void visitChild(ExtensionVisitor ev,Extension child) throws ExtensionVisitor.StoppedException {  if (child instanceof ExtensionPoint) {    ((ExtensionPoint)child).visit(ev,this);  } else {    ev.visit(this,child);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:34:30.662 -0500",hash_original_method="F6B041BF98EA41D5C441E6A872FA253A",hash_generated_method="E993F9B1F2E513B14E60C12881C9E59B") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public static char[] toAsciiChars(byte[] raw){  if (raw == null || raw.length == 0) {    return EMPTY_CHAR_ARRAY;  }  char[] l_ascii=new char[raw.length << 3];  l_ascii.addTaint(raw.getTaint());  return l_ascii;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public final StringProperty titleProperty(){  return titleProperty;}  }
class C{  private void cleanMapping(){  ArrayList<Integer> toRemove=new ArrayList<Integer>();  int size=mListMapping.size();  for (int i=0; i < size; ++i) {    if (mListMapping.keyAt(i) == mListMapping.valueAt(i)) {      toRemove.add(mListMapping.keyAt(i));    }  }  size=toRemove.size();  for (int i=0; i < size; ++i) {    mListMapping.delete(toRemove.get(i));  }}  }
class C{  private Flags(){}  }
class C{  @Override public boolean canFlipArms(){  boolean canFlip=true;  if (hasSystem(Mech.ACTUATOR_HAND,Mech.LOC_LARM)) {    canFlip=false;  } else   if (hasSystem(Mech.ACTUATOR_LOWER_ARM,Mech.LOC_LARM)) {    canFlip=false;  } else   if (hasSystem(Mech.ACTUATOR_HAND,Mech.LOC_RARM)) {    canFlip=false;  } else   if (hasSystem(Mech.ACTUATOR_LOWER_ARM,Mech.LOC_RARM)) {    canFlip=false;  }  if (hasQuirk(OptionsConstants.QUIRK_POS_HYPER_ACTUATOR)) {    canFlip=true;  }  if (isProne()) {    canFlip=false;  }  return canFlip;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.397 -0500",hash_original_method="7ECE87C8E0B6AC612BF4B05EB3BE89DA",hash_generated_method="5061C51BA9AB55A45A330545ECB336D2") public void disconnected(){}  }
class C{  @Override public void onUpdateComplete(int taskId,Object cookie,int updateCount){  if (taskId == AppConstants.QueryTokens.UPDATE_WALLPOST) {    Logger.i(TAG,"%s","Wall Post update count =" + updateCount);  }}  }
class C{  public static void main(String[] args){  new Main().doMain(args);}  }
class C{  public GeometryLocation locateVertex(Coordinate testPt,double tolerance){  Geometry geom=getGeometry();  if (geom == null)   return null;  return GeometryPointLocater.locateVertex(getGeometry(),testPt,tolerance);}  }
class C{  public boolean canUseDiamond(CompletionContext coreContext){  return false;}  }
class C{  public boolean isSetError(){  return this.error != null;}  }
class C{  public void saveRelations(DBTransaction transaction,String charname,Player player) throws SQLException {  Multimap<String,String> oldList=loadRelations(transaction,charname);  Set<String> buddies=player.getBuddies();  buddies.add(charname);  syncBuddyListToDB(transaction,charname,"buddy",oldList.get("buddy"),buddies);  syncBuddyListToDB(transaction,charname,"ignore",oldList.get("ignore"),player.getIgnores());}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  public VPFFeatureLayer(){  setProjectionChangePolicy(new com.bbn.openmap.layer.policy.ListResetPCPolicy(this));  setMouseModeIDsForEvents(new String[]{"Gestures"});  warehouse=new VPFAutoFeatureGraphicWarehouse();}  }
class C{  public StringBuffer insert(int index,long l){  return insert(index,Long.toString(l));}  }
class C{  @Nonnull public BugInstance addMethod(MethodDescriptor method){  addMethod(MethodAnnotation.fromMethodDescriptor(method));  return this;}  }
class C{  protected void init(Document sqlDoc,String sqlDefsSection,Connection conn,Map<String,String> configParameters) throws SQLException {  Element dbMatcherElement=(Element)(sqlDoc.getElementsByTagName("dbMatchers").item(0));  String dbProduct=null;  if (dbMatcherElement != null) {    dbProduct=matchDbConnection(conn,dbMatcherElement);  }  Element dbOptionsElement=(Element)(sqlDoc.getElementsByTagName("dbOptions").item(0));  if (dbOptionsElement != null) {    populateDbOptions("",dbOptionsElement,m_dbOptions);    if (dbProduct != null) {      populateDbOptions(dbProduct,dbOptionsElement,m_dbOptions);    }  }  NodeList sections=sqlDoc.getElementsByTagName("sqlDefs");  int sectionsCount=sections.getLength();  Element sectionElement=null;  boolean found=false;  for (int i=0; i < sectionsCount; i++) {    sectionElement=(Element)(sections.item(i));    String sectionName=sectionElement.getAttribute("name");    if (sectionName != null && sectionName.equals(sqlDefsSection)) {      found=true;      break;    }  }  if (!found) {    String exceptionBuffer="Error loading sql definition file. " + "The element named \'" + sqlDefsSection + "\' does not exist.";    throw new RuntimeException(exceptionBuffer);  }  Map<String,String> parameters=new HashMap<String,String>();  Element parametersElement=(Element)(sectionElement.getElementsByTagName("parameters").item(0));  if (parametersElement != null) {    NamedNodeMap params=parametersElement.getAttributes();    int paramCount=params.getLength();    for (int i=0; i < paramCount; i++) {      Attr param=(Attr)params.item(i);      String paramName=param.getName();      String paramValue=param.getValue();      parameters.put(paramName,paramValue);    }  }  parameters.putAll(configParameters);  Map<String,String> defaultSqlStatements=new HashMap<String,String>();  Map<String,String> dbProductSqlStatements=new HashMap<String,String>();  NodeList sqlDefs=sectionElement.getElementsByTagName("sql");  int sqlCount=sqlDefs.getLength();  for (int i=0; i < sqlCount; i++) {    Element sqlElement=(Element)(sqlDefs.item(i));    String sqlDb=sqlElement.getAttribute("db");    Map<String,String> sqlMap;    if (sqlDb.equals("")) {      sqlMap=defaultSqlStatements;    } else     if (sqlDb.equals(dbProduct)) {      sqlMap=dbProductSqlStatements;    } else {      continue;    }    String sqlKey=sqlElement.getAttribute("name");    if (sqlKey == null) {      continue;    }    String sqlString=sqlElement.getFirstChild().getNodeValue();    StringBuilder replaceBuffer=new StringBuilder(64);    for (    Map.Entry<String,String> entry : parameters.entrySet()) {      replaceBuffer.setLength(0);      replaceBuffer.append("${").append(entry.getKey()).append("}");      sqlString=substituteSubString(sqlString,replaceBuffer.toString(),entry.getValue());    }    String shared=stringTable.get(sqlString);    if (shared == null) {      stringTable.put(sqlString,sqlString);    } else {      sqlString=shared;    }    sqlMap.put(sqlKey,sqlString);  }  m_sql.putAll(defaultSqlStatements);  m_sql.putAll(dbProductSqlStatements);}  }
class C{  static void configureAccumuloInput(Job job) throws AccumuloSecurityException {  Configuration conf=job.getConfiguration();  String username=conf.get(MRUtils.AC_USERNAME_PROP,"root");  String password=conf.get(MRUtils.AC_PWD_PROP,"");  String instance=conf.get(MRUtils.AC_INSTANCE_PROP,"instance");  String zookeepers=conf.get(MRUtils.AC_ZK_PROP,"zoo");  Authorizations auths;  String auth=conf.get(MRUtils.AC_AUTH_PROP);  if (auth != null) {    auths=new Authorizations(auth.split(","));  } else {    auths=AccumuloRdfConstants.ALL_AUTHORIZATIONS;  }  AccumuloInputFormat.setZooKeeperInstance(job,ClientConfiguration.loadDefault().withInstance(instance).withZkHosts(zookeepers));  AccumuloInputFormat.setConnectorInfo(job,username,new PasswordToken(password));  AccumuloInputFormat.setInputTableName(job,getTableName(conf));  AccumuloInputFormat.setScanAuthorizations(job,auths);}  }
class C{  private void onCreateSwipeToRefresh(SwipeRefreshLayout refreshLayout){  refreshLayout.setColorSchemeResources(R.color.accent,R.color.primary,R.color.primary_dark);  refreshLayout.setOnRefreshListener(this);}  }
class C{  private void doMakeNotOffered(HttpServletRequest request,InstructionalOfferingDetailForm frm) throws Exception {  sessionContext.checkPermission(frm.getInstrOfferingId(),"InstructionalOffering",Right.OfferingMakeNotOffered);  org.hibernate.Session hibSession=null;  try {    InstructionalOfferingDAO idao=new InstructionalOfferingDAO();    hibSession=idao.getSession();    InstructionalOffering io=idao.get(frm.getInstrOfferingId());    io.deleteAllDistributionPreferences(hibSession);    io.deleteAllClasses(hibSession);    for (Iterator i=io.getCourseOfferings().iterator(); i.hasNext(); ) {      CourseOffering co=(CourseOffering)i.next();      Event.deleteFromEvents(hibSession,co);      Exam.deleteFromExams(hibSession,co);    }    Event.deleteFromEvents(hibSession,io);    Exam.deleteFromExams(hibSession,io);    for (Iterator<Reservation> i=io.getReservations().iterator(); i.hasNext(); ) {      Reservation r=i.next();      hibSession.delete(r);      i.remove();    }    io.setNotOffered(new Boolean(true));    idao.saveOrUpdate(io);    ChangeLog.addChange(hibSession,sessionContext,io,ChangeLog.Source.MAKE_NOT_OFFERED,ChangeLog.Operation.UPDATE,io.getControllingCourseOffering().getSubjectArea(),null);    if (sessionContext.hasPermission(io,Right.OfferingCanUnlock))     io.getSession().unlockOffering(io,sessionContext.getUser());    hibSession.flush();    hibSession.clear();    String className=ApplicationProperty.ExternalActionInstructionalOfferingNotOffered.value();    if (className != null && className.trim().length() > 0) {      ExternalInstructionalOfferingNotOfferedAction notOfferedAction=(ExternalInstructionalOfferingNotOfferedAction)(Class.forName(className).newInstance());      notOfferedAction.performExternalInstructionalOfferingNotOfferedAction(io,hibSession);    }    frm.setNotOffered(io.isNotOffered());  } catch (  Exception e) {    Debug.error(e);    throw (e);  }}  }
class C{  public static InputStream decrypt(InputStream encryptedInputStream,char[] password) throws EncryptionException, IOException {  InputStream decryptedInputStream=null;  PBEKeySpec pbeKeySpec=new PBEKeySpec(password);  PBEParameterSpec pbeParameterSpec=new PBEParameterSpec(SALT,ITERATION_COUNT);  try {    SecretKeyFactory secretKeyFactory=SecretKeyFactory.getInstance(ENCRYPTION_ALGORITHM,CRYPTOPROVIDER);    SecretKey pbeKey=secretKeyFactory.generateSecret(pbeKeySpec);    Cipher cipher=Cipher.getInstance(ENCRYPTION_ALGORITHM,CRYPTOPROVIDER);    cipher.init(Cipher.DECRYPT_MODE,pbeKey,pbeParameterSpec);    decryptedInputStream=new CipherInputStream(encryptedInputStream,cipher);  } catch (  GeneralSecurityException e) {    throw new EncryptionException("There was a problem during the decryption process. See the stacktrace for details.",e);  }  return decryptedInputStream;}  }
class C{  public static Angle fromDegrees(double degrees){  return new Angle(degrees,DEGREES_TO_RADIANS * degrees);}  }
class C{  public NonUniqueBusinessKeyException(String message,DomainObjectExceptionBean bean){  super(message,bean);}  }
class C{  public static void PP_Order(MPPOrder o){  Properties ctx=o.getCtx();  String trxName=o.get_TrxName();  MPPMRP mrpSupply=getQuery(o,TYPEMRP_Supply,ORDERTYPE_ManufacturingOrder).firstOnly();  if (mrpSupply == null) {    mrpSupply=new MPPMRP(ctx,0,trxName);    mrpSupply.setAD_Org_ID(o.getAD_Org_ID());    mrpSupply.setTypeMRP(MPPMRP.TYPEMRP_Supply);  }  mrpSupply.setPP_Order(o);  mrpSupply.setPriority(o.getPriorityRule());  mrpSupply.setPlanner_ID(o.getPlanner_ID());  mrpSupply.setM_Product_ID(o.getM_Product_ID());  mrpSupply.setM_Warehouse_ID(o.getM_Warehouse_ID());  mrpSupply.setQty(o.getQtyOrdered().subtract(o.getQtyDelivered()));  mrpSupply.saveEx();  List<MPPMRP> mrpDemandList=getQuery(o,TYPEMRP_Demand,ORDERTYPE_ManufacturingOrder).list();  for (  MPPMRP mrpDemand : mrpDemandList) {    mrpDemand.setPP_Order(o);    mrpDemand.saveEx();  }}  }
class C{  private static boolean isMemoryAccess(final String value){  return value.equals("[");}  }
class C{  public boolean isPrimitiveArray(){  return primitiveArray;}  }
class C{  public boolean omitArticle(Article.ArticleField field,Article a){  boolean ret=false;switch (field) {case id:case updated:    if (a.id > 0 && a.updated != null) {      Long updated=idUpdatedMap.get(a.id);      if (updated != null && a.updated.getTime() <= updated) {        omittedArticles.add(a.id);        ret=true;      }    }default :  break;}return ret;}  }
class C{  public static DataWrapper serializableInstance(){  return new DataWrapper(new Parameters());}  }
class C{  private void updateContactHeaderPort(int localPort,SIPMessage message){  if (message != null && message.getContactHeader() != null) {    ContactHeader contactHeader=message.getContactHeader();    Address contactAddress=contactHeader.getAddress();    contactAddress.setPort(localPort);  }}  }
class C{  default boolean isTerminated(){  return false;}  }
class C{  private List<StoragePort> createSCSIStoragePorts(StorageSystem storageSystem,String protectionDomainName,DiscoveredDataObject.CompatibilityStatus compatibilityStatus,Network network,List<ScaleIOSDC> allSDCs) throws IOException {  List<StoragePort> ports=new ArrayList<>();  List<String> endpoints=new ArrayList<>();  String fixedProtectionDomainName=protectionDomainName.replaceAll("\\s+","").toLowerCase();  for (  ScaleIOSDC sdc : allSDCs) {    String sdcGUID=sdc.getSdcGuid();    String sdcIP=sdc.getSdcIp();    String generatedTargetName=String.format("iqn.2010-12.com.ecs.%s:%s",fixedProtectionDomainName,sdcGUID.toLowerCase());    StoragePort port;    List<StoragePort> results=CustomQueryUtility.queryActiveResourcesByAltId(_dbClient,StoragePort.class,"portNetworkId",generatedTargetName);    if (results == null || results.isEmpty()) {      String nativeGUID=NativeGUIDGenerator.generateNativeGuid(storageSystem,sdcIP,NativeGUIDGenerator.ADAPTER);      StorageHADomain adapter=new StorageHADomain();      adapter.setStorageDeviceURI(storageSystem.getId());      adapter.setId(URIUtil.createId(StorageHADomain.class));      adapter.setAdapterName(sdcIP);      adapter.setLabel(sdcIP);      adapter.setNativeGuid(nativeGUID);      adapter.setNumberofPorts("1");      adapter.setAdapterType(StorageHADomain.HADomainType.FRONTEND.name());      adapter.setInactive(false);      _dbClient.createObject(adapter);      port=new StoragePort();      port.setId(URIUtil.createId(StoragePort.class));      port.setPortNetworkId(generatedTargetName);      port.setLabel(generatedTargetName);      port.setStorageDevice(storageSystem.getId());      port.setCompatibilityStatus(compatibilityStatus.name());      port.setOperationalStatus(OperationalStatus.OK.name());      port.setIpAddress(sdcIP);      port.setNetwork(network.getId());      port.setPortGroup("");      port.setPortName(generatedTargetName);      port.setPortType(StoragePort.PortType.frontend.name());      port.setStorageHADomain(adapter.getId());      port.setTransportType(StorageProtocol.Transport.IP.name());      port.setInactive(false);      port.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());      _dbClient.createObject(port);      endpoints.add(port.getPortNetworkId());    } else {      port=results.get(0);    }    ports.add(port);  }  network.addEndpoints(endpoints,true);  _dbClient.updateAndReindexObject(network);  return ports;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.387 -0400",hash_original_method="8C409C50276DC5FFF073C17593B975AC",hash_generated_method="253D44827C6A185BCD712DA99FC5ECAC") public String decode(String pString) throws DecoderException {  if (pString == null) {    return null;  }  try {    return decode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  public CombinedCoordPanel(ActionListener closeButtonListener){  setup(i18n.get(CombinedCoordPanel.class,"defaultComment","Set Center of Map to Coordinates:"),closeButtonListener);}  }
class C{  public boolean isBridgeOperation(){  return this.isBridgeOp;}  }
class C{  protected int partition(double[] array,int[] index,int l,int r,final int indexStart){  double pivot=array[(l + r) / 2];  int help;  while (l < r) {    while ((array[l] < pivot) && (l < r)) {      l++;    }    while ((array[r] > pivot) && (l < r)) {      r--;    }    if (l < r) {      help=index[indexStart + l];      index[indexStart + l]=index[indexStart + r];      index[indexStart + r]=help;      l++;      r--;    }  }  if ((l == r) && (array[r] > pivot)) {    r--;  }  return r;}  }
class C{  public Date estimateLockTime(AbstractBlockChain chain){  if (lockTime < LOCKTIME_THRESHOLD)   return chain.estimateBlockTime((int)getLockTime()); else   return new Date(getLockTime() * 1000);}  }
class C{  public void run(String outputFolder){  LOG.info("Start running...");  Counter counter=new Counter("   person # ");  Map<Id<Household>,Tuple<Double,Integer>> householdScoreMap=new TreeMap<Id<Household>,Tuple<Double,Integer>>();  String bwName=outputFolder + "accessibility.txt";  BufferedWriter bw=IOUtils.getBufferedWriter(bwName);  try {    for (    Person person : this.sc.getPopulation().getPersons().values()) {      double accessibility=calculateAccessibility(person);      Id<Household> householdId=Id.create(person.getCustomAttributes().get("householdId").toString(),Household.class);      if (!householdScoreMap.containsKey(householdId)) {        householdScoreMap.put(householdId,new Tuple<Double,Integer>(accessibility,1));      } else {        double oldScore=householdScoreMap.get(householdId).getFirst();        int oldCount=householdScoreMap.get(householdId).getSecond();        householdScoreMap.put(householdId,new Tuple<Double,Integer>(oldScore + accessibility,oldCount + 1));      }      bw.write(String.valueOf(accessibility));      bw.newLine();      counter.incCounter();    }    counter.printCounter();  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + bwName);  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + bwName);    }  }  LOG.info("----------------------------------------------------");  LOG.info("Number of persons in different classes:");  for (int i=0; i < numberInClasses.size(); i++) {    LOG.info("   " + i + ": "+ numberInClasses.get(i));  }  LOG.info("----------------------------------------------------");  LOG.info("Number of households observed: " + householdScoreMap.size());  bwName=outputFolder + "householdAccessibility.txt";  bw=IOUtils.getBufferedWriter(bwName);  try {    bw.write("Id,Long,Lat,AccessScore");    bw.newLine();    for (    Id<Household> householdId : householdScoreMap.keySet()) {      Tuple<Double,Integer> tuple=householdScoreMap.get(householdId);      double householdAverage=tuple.getFirst() / ((double)tuple.getSecond());      List<Id<Person>> members=hhs.getHouseholds().get(householdId).getMemberIds();      Person person=null;      int index=0;      while (person == null && index < members.size()) {        person=sc.getPopulation().getPersons().get(members.get(index));        index++;      }      if (person != null) {        Coord homeCoord=((Activity)person.getSelectedPlan().getPlanElements().get(0)).getCoord();        bw.write(String.format("%s,%.0f,%.0f,%.2f\n",householdId,homeCoord.getX(),homeCoord.getY(),householdAverage));      } else {        LOG.warn("Couldn't find any members for household " + householdId + " - household is ignored.");      }    }  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + bwName);  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + bwName);    }  }}  }
class C{  public MariaDbServerPreparedStatement clone() throws CloneNotSupportedException {  MariaDbServerPreparedStatement clone=(MariaDbServerPreparedStatement)super.clone();  clone.metadata=metadata;  clone.parameterMetaData=parameterMetaData;  clone.queryParameters=new ArrayList<>();  clone.mustExecuteOnMaster=mustExecuteOnMaster;  try {    clone.prepare(sql);  } catch (  SQLException e) {    throw new CloneNotSupportedException("PrepareStatement not ");  }  return clone;}  }
class C{  public WFG6(int k,int l,int M){  super(k,l,M);}  }
class C{  public CSVPrinter(Writer out,CSVStrategy strategy){  this.out=out;  this.strategy=strategy == null ? CSVStrategy.DEFAULT_STRATEGY : strategy;}  }
class C{  public ScriptAction(final SimbrainDesktop desktop,final String scriptName){  super(scriptName,desktop.getWorkspace());  this.scriptName=scriptName;  this.desktop=desktop;  this.workspace=desktop.getWorkspace();}  }
class C{  public AbstractShortList partFromTo(int from,int to){  if (size == 0)   return new ShortArrayList(0);  checkRangeFromTo(from,to,size);  short[] part=new short[to - from + 1];  System.arraycopy(elements,from,part,0,to - from + 1);  return new ShortArrayList(part);}  }
class C{  public LineIterator(final FastBufferedReader fastBufferedReader){  this(fastBufferedReader,null);}  }
class C{  public KeyTable(int doc,PrefixResolver nscontext,QName name,Vector keyDeclarations,XPathContext xctxt) throws javax.xml.transform.TransformerException {  m_docKey=doc;  m_keyDeclarations=keyDeclarations;  KeyIterator ki=new KeyIterator(name,keyDeclarations);  m_keyNodes=new XNodeSet(ki);  m_keyNodes.allowDetachToRelease(false);  m_keyNodes.setRoot(doc,xctxt);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.COMPOSITE_PROCESSOR__NAME:    return getName();case EipPackage.COMPOSITE_PROCESSOR__TO_CHANNELS:  return getToChannels();case EipPackage.COMPOSITE_PROCESSOR__FROM_CHANNELS:return getFromChannels();case EipPackage.COMPOSITE_PROCESSOR__OWNED_ENDPOINTS:return getOwnedEndpoints();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isInternal(){  verifyValidState(true);  return findCurrentRoot().getSourceSection().getSource().isInternal();}  }
class C{  public void cleanRCSEntries() throws ContactManagerException {synchronized (mContactInfoCache) {    cleanRCSRawContactsInAB();    cleanEntriesInRcsContactProvider();  }}  }
class C{  public synchronized boolean isTransportServiceAvailable(int transport){  int available=getAvailableTransportServices();  if ((available & transport) > 0)   return true; else   return false;}  }
class C{  static String scanIdentifier(IXMLReader reader) throws IOException, XMLParseException {  StringBuffer result=new StringBuffer();  for (; ; ) {    char ch=reader.read();    if ((ch == '_') || (ch == ':') || (ch == '-')|| (ch == '.')|| ((ch >= 'a') && (ch <= 'z'))|| ((ch >= 'A') && (ch <= 'Z'))|| ((ch >= '0') && (ch <= '9'))|| (ch > '\u007E')) {      result.append(ch);    } else {      reader.unread(ch);      break;    }  }  return result.toString();}  }
class C{  @Override public boolean canWriteEntryData(ArchiveEntry ae){  if (ae instanceof ZipArchiveEntry) {    return ZipUtil.canHandleEntryData((ZipArchiveEntry)ae);  }  return false;}  }
class C{  public double value(){  return _map._values[_index];}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private double calculateNodeRates(TreeModel tree,NodeRef node,double mu,double p,double lambda){  NodeRef parent=tree.getParent(node);  double time0=0.0;  if (!tree.isExternal(node)) {    NodeRef child1=tree.getChild(node,0);    double t1=calculateNodeRates(tree,child1,mu,p,lambda);    NodeRef child2=tree.getChild(node,1);    double t2=calculateNodeRates(tree,child2,mu,p,lambda);    if (useAveraging) {      time0=(t1 + t2) / 2.0;    } else {      if (t1 > t2) {        time0=t1;      } else {        time0=t2;      }    }  }  if (parent == null)   return 0;  double branchTime=tree.getNodeHeight(parent) - tree.getNodeHeight(node);  double time1=time0 + branchTime;  double branchRate=rateIntegral(time1,mu,p,lambda);  if (time0 > 0.0) {    branchRate-=rateIntegral(time0,mu,p,lambda);  }  if (branchRate != tree.getNodeRate(node)) {    updateNode(node);    nodeTimes[node.getNumber()]=branchRate;  }  return time1;}  }
class C{  protected boolean hasUncompressedStrip(){  return mStripBytes.size() != 0;}  }
class C{  public static CCTouchHandler makeHandler(CCTouchDelegateProtocol delegate,int priority){  return new CCTouchHandler(delegate,priority);}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  int cost=4;  if (init != null) {    cost+=init.costInline(thresh,env,ctx);    if (cost >= thresh)     return cost;  }  if (body != null) {    cost+=body.costInline(thresh,env,ctx);    if (cost >= thresh)     return cost;  }  if (finalbody != null) {    cost+=finalbody.costInline(thresh,env,ctx);  }  return cost;}  }
class C{  public static void main(String[] args){  runFilter(new Normalize(),args);}  }
class C{  public long decrementAndGet(){  return atomicLong.decrementAndGet();}  }
class C{  public IntVector subvector(int i0,int i1){  IntVector v=new IntVector(i1 - i0 + 1);  v.set(0,i1 - i0,this,i0);  return v;}  }
class C{  private void addItem(List<Map<String,Object>> data,String className,String description,Intent intent){  Map<String,Object> temp=new HashMap<>();  temp.put(TAG_CLASS_NAME,className);  temp.put(TAG_DESCRIPTION,description);  temp.put(TAG_INTENT,intent);  data.add(temp);}  }
class C{  public boolean futureRound(int testRound){  if (NO_ROUND == round) {    return true;  }  return testRound > round;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Boolean containsKey(String key){  return hmAllRePattern.containsKey(key);}  }
class C{  public boolean isRelative(){  return (type == RELATIVE);}  }
class C{  public void removeNotificationGroup(NotificationGroup group){  try {    getService().removeNotificationGroup(group);  } catch (  RemoteException e) {    Log.e(TAG,e.getLocalizedMessage(),e);  }}  }
class C{  public String toString(){  String sType="";  if (type != null)   sType=type.toString() + " ";  String sLine;  if (getLine() == null) {    sLine="null";  } else {    sLine=getLine().toString();  }  return new String(sType + "event from line " + sLine);}  }
class C{  public DomainContent loadDomainContent(Space space){  Universe univ=space.getUniverse();  Domain domain=space.getDomain();  List<Dimension> dimensions=dimensionDAO.findByDomain(univ.getContext(),domain.getId());  List<Metric> metrics=metricDAO.findByDomain(univ.getContext(),domain.getId());  DomainContent content=new DomainContent(domain,dimensions,metrics);  loadDomainDynamicContent(space,content);  return content;}  }
class C{  public RoleVO(){}  }
class C{  @NotNull public static CommentContext tryParseCommentContext(@NotNull PsiFile file,@NotNull CharSequence chars,int offset,int lineStartOffset){  Commenter langCommenter=LanguageCommenters.INSTANCE.forLanguage(PsiUtilCore.getLanguageAtOffset(file,offset));  final boolean isInsideCommentLikeCode=langCommenter instanceof CodeDocumentationAwareCommenter;  if (!isInsideCommentLikeCode) {    return new CommentContext();  }  final CodeDocumentationAwareCommenter commenter=(CodeDocumentationAwareCommenter)langCommenter;  int commentStartOffset=CharArrayUtil.shiftForward(chars,lineStartOffset," \t");  boolean docStart=commenter.getDocumentationCommentPrefix() != null && CharArrayUtil.regionMatches(chars,commentStartOffset,commenter.getDocumentationCommentPrefix());  boolean cStyleStart=commenter.getBlockCommentPrefix() != null && CharArrayUtil.regionMatches(chars,commentStartOffset,commenter.getBlockCommentPrefix());  boolean docAsterisk=commenter.getDocumentationCommentLinePrefix() != null && CharArrayUtil.regionMatches(chars,commentStartOffset,commenter.getDocumentationCommentLinePrefix());  final int firstNonSpaceInLine=CharArrayUtil.shiftForward(chars,offset," \t");  boolean slashSlash=commenter.getLineCommentPrefix() != null && CharArrayUtil.regionMatches(chars,commentStartOffset,commenter.getLineCommentPrefix()) && firstNonSpaceInLine < chars.length() && chars.charAt(firstNonSpaceInLine) != '\n';  return new CommentContext(commenter,docStart,cStyleStart,docAsterisk,slashSlash,commentStartOffset);}  }
class C{  public static File fluffImagesDir(){  return new File(imagesDir(),DEFAULT_DIR_NAME_FLUFF_IMAGES);}  }
class C{  @SuppressWarnings("unchecked") Map<Installment,DCBRecord> iterateDCB(final List dcbList,final Map<Installment,DCBRecord> dcbReportMap,final List<String> fieldNames,final EgDemand dmd){  if (dcbList != null && fieldNames != null && !fieldNames.isEmpty()) {    Installment installment=null;    Map<String,BigDecimal> demands=null;    Map<String,BigDecimal> collections=null;    Map<String,BigDecimal> rebates=null;    for (int i=0; i < dcbList.size(); ) {      final Object[] dcbData=(Object[])dcbList.get(i);      installment=(Installment)installmentDAO.findById(Integer.parseInt(dcbData[0].toString()),false);      DCBRecord dcbRecord=null;      demands=new HashMap<String,BigDecimal>();      collections=new HashMap<String,BigDecimal>();      rebates=new HashMap<String,BigDecimal>();      initDemandAndCollectionMap(fieldNames,demands,collections,rebates);      for (int j=i; j < dcbList.size(); j++, i++) {        final Object[] dcbData2=(Object[])dcbList.get(i);        if (dcbData[0].equals(dcbData2[0]))         dcbRecord=prepareDCMap(dcbData2,dcbRecord,demands,collections,rebates,dmd,fieldNames); else         break;        dcbReportMap.put(installment,dcbRecord);      }    }  }  return dcbReportMap;}  }
class C{  public IntegerOrPercentage maxMatedAlignmentScore(){  return mMaxASMatedValue;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean good=evalBool(stack.pop());  String lineup=getString(stack);  EPG.getInstance().getEPGDSForEPGDSName(lineup).setCanViewStation(getChannel(stack).getStationID(),good);  return null;}  }
class C{  private Collection<AnchorURL>[] extractPdfLinks(final PDDocument pdf){  Collection<AnchorURL>[] linkCollections=(Collection<AnchorURL>[])new Collection<?>[pdf.getNumberOfPages()];  int pagecount=0;  for (  PDPage page : pdf.getPages()) {    final Collection<AnchorURL> pdflinks=new ArrayList<AnchorURL>();    try {      List<PDAnnotation> annotations=page.getAnnotations();      if (annotations != null) {        for (        PDAnnotation pdfannotation : annotations) {          if (pdfannotation instanceof PDAnnotationLink) {            PDAction link=((PDAnnotationLink)pdfannotation).getAction();            if (link != null && link instanceof PDActionURI) {              PDActionURI pdflinkuri=(PDActionURI)link;              String uristr=pdflinkuri.getURI();              AnchorURL url=new AnchorURL(uristr);              pdflinks.add(url);            }          }        }      }    } catch (    IOException ex) {    }    linkCollections[pagecount++]=pdflinks;  }  return linkCollections;}  }
class C{  public boolean hasDefaultValueFor(String value){  return defaultValueMap.containsKey(value);}  }
class C{  public void update(double newValue){  double prevUtil=average;  nbValues++;  average=prevUtil + (newValue - prevUtil) / (nbValues);}  }
class C{  public okhttp3.Response response(){  return rawResponse;}  }
class C{  public void test_bnodes(){  final BNode a=new BNodeImpl(UUID.randomUUID().toString());  assertEquals(a,roundTrip_tuned(a));}  }
class C{  private void prefetchRequiredObject(Category category){  final List<CategoryToCatalogEntry> categoryToCatalogEntries=category.getCategoryToCatalogEntry();  for (  CategoryToCatalogEntry categoryToCatalogEntry : categoryToCatalogEntries) {    categoryToCatalogEntry.getCatalogEntry().getProduct();  }}  }
class C{  private static ConditionFlag toFloatConditionFlag(Condition cond,boolean unorderedIsTrue){switch (cond) {case LT:    return unorderedIsTrue ? ConditionFlag.LT : ConditionFlag.LO;case LE:  return unorderedIsTrue ? ConditionFlag.LE : ConditionFlag.LS;case GE:return unorderedIsTrue ? ConditionFlag.PL : ConditionFlag.GE;case GT:return unorderedIsTrue ? ConditionFlag.HI : ConditionFlag.GT;case EQ:return ConditionFlag.EQ;case NE:return ConditionFlag.NE;default :throw GraalError.shouldNotReachHere();}}  }
class C{  public <T>T fromXML(final Reader reader){  return unmarshal(hierarchicalStreamDriver.createReader(reader),null);}  }
class C{  private StringEntity loadResponse(FakeHttpStack fakeHttpStack,String fileName) throws IOException {  InputStream stream=fakeHttpStack.getClass().getClassLoader().getResourceAsStream(fileName);  StringBuilder sb=new StringBuilder();  copy(new InputStreamReader(stream,"UTF-8"),sb);  String string=sb.toString();  return new StringEntity(string);}  }
class C{  public void addItem(Object item){  model.add(item);}  }
class C{  public DrawerBuilder withOnDrawerItemLongClickListener(@NonNull Drawer.OnDrawerItemLongClickListener onDrawerItemLongClickListener){  this.mOnDrawerItemLongClickListener=onDrawerItemLongClickListener;  return this;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  Iterator<Map.Entry<K,V>> i=(size > 0) ? entrySet0().iterator() : null;  s.defaultWriteObject();  s.writeInt(table.length);  s.writeInt(size);  if (size > 0) {    for (    Map.Entry<K,V> e : entrySet0()) {      s.writeObject(e.getKey());      s.writeObject(e.getValue());    }  }}  }
class C{  public static int lastIndexOfIgnoreCase(String src,String subS,int startIndex){  return lastIndexOfIgnoreCase(src,subS,startIndex,0);}  }
class C{  public SmartItem(int type,String text,String path,int depth,List<SmartItem> children){  super(type,text,path,UUID.randomUUID().toString(),depth,children);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodelistindexnotzero.class,args);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYDataItem)) {    return false;  }  XYDataItem that=(XYDataItem)obj;  if (!this.x.equals(that.x)) {    return false;  }  if (!ObjectUtilities.equal(this.y,that.y)) {    return false;  }  return true;}  }
class C{  public static int hash(float value){  assert !Float.isNaN(value) : "Values of NaN are not supported.";  return Float.floatToIntBits(value * 663608941.737f);}  }
class C{  public void resetNetworkState(){  mStateDepository.clear();  mTransitionDirection=StateTransitionDirection.DO_NOTHING;  mTransitionTarget=State.UNKNOWN;}  }
class C{  public TitleEntity(Shape area,Title title){  this(area,title,null);}  }
class C{  public static double calculateIntervalLikelihood(DemographicFunction demogFunction,double width,double timeOfPrevCoal,int lineageCount,CoalescentEventType type){  final double timeOfThisCoal=width + timeOfPrevCoal;  final double intervalArea=demogFunction.getIntegral(timeOfPrevCoal,timeOfThisCoal);  final double kchoose2=Binomial.choose2(lineageCount);  double like=-kchoose2 * intervalArea;switch (type) {case COALESCENT:    final double demographic=demogFunction.getLogDemographic(timeOfThisCoal);  like+=-demographic;break;case NEW_SAMPLE:break;}return like;}  }
class C{  public HashTableStack(){}  }
class C{  private synchronized String readInputStream(InputStreamReader inputStreamReader) throws IOException, BadLocationException {  BufferedReader bufferedReader=null;  try {    bufferedReader=new BufferedReader(inputStreamReader);    String newLine="\n";    StringBuffer sb=new StringBuffer();    String line;    while ((line=bufferedReader.readLine()) != null) {      sb.append(line + newLine);    }    return sb.toString();  }  finally {    if (null != bufferedReader)     bufferedReader.close();    if (null != inputStreamReader)     inputStreamReader.close();  }}  }
class C{  public String sqlAction_enforceCheckConstraints(String vendorName,String catalogName,String schemaName,String tableName,String checkExpression){  if (checkExpression != null)   return m_interfaces.get(getDBVendorID(vendorName)).sqlAction_enforceCheckConstraints(catalogName,schemaName,tableName,checkExpression); else   return null;}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  bufferInput(instance);  int numReturnedFromParser=0;  if (isFirstBatchDone()) {    Instances inst=new Instances(getInputFormat());    inst=process(inst);    numReturnedFromParser=inst.numInstances();    for (int i=0; i < inst.numInstances(); i++) {      push(inst.instance(i));    }    flushInput();  }  return (numReturnedFromParser > 0);}  }
class C{  public Control createControl(final Composite parent,final CoordinateReferenceSystem crs){  final Control control=createControl(parent);  selectedCRS=crs;  gotoCRS(selectedCRS);  return control;}  }
class C{  protected String readAndSortFile(String fileName) throws Exception {  return readAndSortFile(fileName,null);}  }
class C{  public Collection<DiskStoreImpl> listDiskStores(){  return this.diskStores.values();}  }
class C{  public static String stripTags(String html){  if (html == null) {    return "";  }  if ((html.indexOf('<') == -1) || (html.indexOf('>') == -1)) {    return html;  }  StringWriter writer=new StringWriter();  TextStream stream=new TextStream(html);  while (!stream.atEnd()) {    String text=stream.upTo('<');    writer.write(text);    int position=stream.getPosition();    stream.skip();    String word=stream.nextWord();    if (word != null) {      if (word.equals("p")) {        writer.write("\n\n");      } else       if (word.equals("br")) {        writer.write("\n");      } else       if (word.equals("div")) {        writer.write("\n");      }      stream.skipTo('>');      if (stream.atEnd()) {        stream.setPosition(position);        writer.write(stream.upToEnd());      } else {        stream.skip();      }    }  }  return writer.toString();}  }
class C{  public boolean checkParity(){  int len=getNumDataElements();  int chksum=0x0000;  int loop;  for (loop=0; loop < len - 1; loop=loop + 2) {    chksum^=(getElement(loop) << 8);    chksum^=getElement(loop + 1);  }  return ((chksum & 0xFFFF) == ((getElement(len - 2) << 8) + getElement(len - 1)));}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public InhibitAnyPolicyExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.InhibitAnyPolicy_Id;  if (!critical.booleanValue())   throw new IOException("Criticality cannot be false for " + "InhibitAnyPolicy");  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  if (val.tag != DerValue.tag_Integer)   throw new IOException("Invalid encoding of InhibitAnyPolicy: " + "data not integer");  if (val.data == null)   throw new IOException("Invalid encoding of InhibitAnyPolicy: " + "null data");  int skipCertsValue=val.getInteger();  if (skipCertsValue < -1)   throw new IOException("Invalid value for skipCerts");  if (skipCertsValue == -1) {    this.skipCerts=Integer.MAX_VALUE;  } else {    this.skipCerts=skipCertsValue;  }}  }
class C{  public void run(){  JScrollBar jsb=scroller.getVerticalScrollBar();  while (running) {    try {synchronized (histData) {        histData.wait();      }      Thread.sleep(100);    } catch (    Exception e) {    }    jsb.setValue(jsb.getMaximum());  }}  }
class C{  private void allocParens(){  startn=new int[maxParen];  endn=new int[maxParen];  for (int i=0; i < maxParen; i++) {    startn[i]=-1;    endn[i]=-1;  }}  }
class C{  public QuadTreeNode child(QuadTreeNode node){  return node.getNorthWest();}  }
class C{  @Override public String amplitudeTipText(){  return "The amplitude to multiply the y value with.";}  }
class C{  public void testBitLengthZero(){  BigInteger aNumber=new BigInteger("0");  assertEquals(0,aNumber.bitLength());}  }
class C{  private boolean isMap(Class type){  return Map.class.isAssignableFrom(type);}  }
class C{  public static GaplessInfo createFromComment(String name,String data){  if (!GAPLESS_COMMENT_ID.equals(name)) {    return null;  }  Matcher matcher=GAPLESS_COMMENT_PATTERN.matcher(data);  if (matcher.find()) {    try {      int encoderDelay=Integer.parseInt(matcher.group(1),16);      int encoderPadding=Integer.parseInt(matcher.group(2),16);      return encoderDelay == 0 && encoderPadding == 0 ? null : new GaplessInfo(encoderDelay,encoderPadding);    } catch (    NumberFormatException e) {    }  }  return null;}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    in.close();  }}  }
class C{  private Optional<Bitmap> thumbnail(List<Api.Message> messages){  Api.Message message=messages.get(0);  boolean allForTheSamePost=FluentIterable.from(messages).transform(null).toSet().size() == 1;  if (allForTheSamePost && message.getItemId() != 0 && !isNullOrEmpty(message.thumbnail())) {    return loadThumbnail(message);  }  boolean allForTheSameUser=FluentIterable.from(messages).transform(null).toSet().size() == 1;  if (allForTheSameUser && message.getItemId() == 0 && !isNullOrEmpty(message.getName())) {    int width=context.getResources().getDimensionPixelSize(android.R.dimen.notification_large_icon_width);    int height=context.getResources().getDimensionPixelSize(android.R.dimen.notification_large_icon_height);    SenderDrawableProvider provider=new SenderDrawableProvider(context);    return Optional.of(provider.makeSenderBitmap(message,width,height));  }  return Optional.absent();}  }
class C{  @Before public void before(){  r=new Resource();  Eml eml=new Eml();  r.setEml(eml);  r.setTitle("Ants");  r.setShortname("ants");  eml.setTitle("Ants");  Citation citation=new Citation();  citation.setCitation("Smith J (2013). Ants. GBIF. Dataset");  r.getEml().setCitation(citation);  Calendar cal=Calendar.getInstance();  cal.set(2013,Calendar.JANUARY,9);  Date date=cal.getTime();  eml.setDateStamp(date);  Agent creator=new Agent();  creator.setFirstName("John");  creator.setLastName("Smith");  eml.addCreator(creator);  Organisation o=new Organisation();  o.setName("GBIF");  o.setKey(UUID.randomUUID().toString());  r.setOrganisation(o);  r.setStatus(PublicationStatus.PUBLIC);  action.setResource(r);  assertNull(r.getDoi());  assertEquals(IdentifierStatus.UNRESERVED,r.getIdentifierStatus());  assertNotNull(r.getEml().getCitation());  assertNull(r.getEml().getCitation().getIdentifier());}  }
class C{  private String buildText(boolean useCurrentValue){  StringBuilder itemsText=new StringBuilder();  int addItems=visibleItems / 2 + 1;  for (int i=currentItem - addItems; i <= currentItem + addItems; i++) {    if (useCurrentValue || i != currentItem) {      String text=getTextItem(i);      if (text != null) {        itemsText.append(text);      }    }    if (i < currentItem + addItems) {      itemsText.append("\n");    }  }  return itemsText.toString();}  }
class C{  public void notifyIgnoredExecutionOf(Description description){  testsExecutionStatus.executionIgnored(description);  testTreeViewer.setInput(this.dataRoot);}  }
class C{  public NullNode nullNode(){  return NullNode.getInstance();}  }
class C{  private Address baseAddress(int i){  Address base=baseAddress.plus(BYTES_IN_PAGE);  return base.plus((stackSize + 1) * BYTES_IN_PAGE * i);}  }
class C{  public void shuffle(ec.util.MersenneTwisterFast random){  Object[] objs=this.objs;  int numObjs=this.numObjs;  Object obj;  int rand;  for (int x=numObjs - 1; x >= 1; x--) {    rand=random.nextInt(x + 1);    obj=objs[x];    objs[x]=objs[rand];    objs[rand]=obj;  }}  }
class C{  public Builder addX509Certificate(X509Certificate x509Certificate){  if (x509Certificate != null) {    this.x509Certificates.add(new X509Certificate.Builder(x509Certificate).build());  }  return this;}  }
class C{  public AssignmentOperator createAssignmentOperatorFromString(EDataType eDataType,String initialValue){  AssignmentOperator result=AssignmentOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public NumericalToHistogram(int n){  setNumberOfBins(n);}  }
class C{  public InputStream locate(final String uri) throws IOException {  final UriLocator locator=getInstance(uri);  if (locator == null) {    return getDecoratedObject().locate(uri);  }  return locator.locate(uri);}  }
class C{  public void updateStage(Stage stage){  this.stage=stage;}  }
class C{  public void reverse(int from,int to){  if (from == to) {    return;  }  if (from > to) {    throw new IllegalArgumentException("from cannot be greater than to");  }  for (int i=from, j=to - 1; i < j; i++, j--) {    swap(i,j);  }}  }
class C{  @SuppressWarnings("deprecation") public IBlockState withMirror(IBlockState state,Mirror mirrorIn){switch (mirrorIn) {case LEFT_RIGHT:    return state.withProperty(NORTH,state.getValue(SOUTH)).withProperty(SOUTH,state.getValue(NORTH));case FRONT_BACK:  return state.withProperty(EAST,state.getValue(WEST)).withProperty(WEST,state.getValue(EAST));default :return super.withMirror(state,mirrorIn);}}  }
class C{  public Webserver(int port) throws IOException {  socket=new ServerSocket(port);  classPool=null;  translator=null;}  }
class C{  public static String unescape(String subject,SubstitutionFilterChain nextFilter,SubstitutionContext ctx){  String encoding="UTF-8";  if (FIND_ENCODING_PATTERN.matcher(subject).find()) {    encoding=subject.substring(0,subject.indexOf(':'));    subject=subject.substring(subject.indexOf(':') + 1);    if (!Charset.isSupported(encoding))     encoding="UTF-8";  }  subject=nextFilter.substitute(subject,ctx);  try {    return URLDecoder.decode(subject,encoding);  } catch (  UnsupportedEncodingException e) {    log.error(e,e);  }  return "";}  }
class C{  protected void processPI() throws Exception {  XMLUtil.skipWhitespace(this.reader,null);  String target=XMLUtil.scanIdentifier(this.reader);  XMLUtil.skipWhitespace(this.reader,null);  Reader reader=new PIReader(this.reader);  if (!target.equalsIgnoreCase("xml")) {    this.builder.newProcessingInstruction(target,reader);  }  reader.close();}  }
class C{  public void wrExtAddr(int addr){  write(0,EXT_ADDR,new byte[]{(byte)(addr / 256),(byte)(addr & 0xff)});}  }
class C{  public void registerReceivers(Receivers receivers,MqttCallback mqttCallback,boolean shouldClearConnection){  if (shouldClearConnection) {    receiverMap.forEach(null);    receiverMap.clear();  }  for (  Receiver receiver : receivers.getReceiverList()) {    try {      ReceiverAsync receiverAsync=new ReceiverAsync(receiver);      if (mqttCallback == null) {        mqttCallback=new LogMqttCallback();      }      receiverAsync.subscribe(mqttCallback);      receiverMap.put(receiver.getClientId(),receiverAsync);    } catch (    MqttException e) {      e.printStackTrace();    }  }}  }
class C{  @Override public void addComment(String comment){}  }
class C{  public static int howManyHoursOld(long time){  return (int)((System.currentTimeMillis() - time) / DateUtils.HOUR_IN_MILLIS);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.260 -0500",hash_original_method="4F86C73792633F9CAFFD2414652E6044",hash_generated_method="4F86C73792633F9CAFFD2414652E6044") void parseDocument(InputStream in) throws IOException, SAXException {  startDocument();  parseFragment(in);  finish();  endDocument();}  }
class C{  public void about(){  WebMediumConfig config=null;  if (launchType == LaunchType.Bot) {    config=new InstanceConfig();  } else   if (launchType == LaunchType.Forum) {    config=new ForumConfig();  } else   if (launchType == LaunchType.Channel) {    config=new ChannelConfig();  }  config.id=launchInstanceId;  config.name=launchInstanceName;  HttpAction action=new HttpFetchAction(this,config,false);  action.execute();}  }
class C{  public void updateCursorPosition(final TextPosition position){  if (position != null) {    cursorPosition.getElement().setInnerText("" + (position.getLine() + 1) + ":"+ (position.getCharacter() + 1));  } else {    cursorPosition.getElement().setInnerText("");  }}  }
class C{  static public void float2int(int source,int result){  int addr=getRegisterValue((source >> 21) & 31) + (int)(short)(source & 0xFFFC);  int value1=(int)(Float.intBitsToFloat(getMemory().read32(addr)) * 255f);  value1=Math.min(255,Math.max(0,value1));  int value2=(int)(Float.intBitsToFloat(getMemory().read32(addr + 4)) * 255f);  value2=Math.min(255,Math.max(0,value2));  int value3=(int)(Float.intBitsToFloat(getMemory().read32(addr + 8)) * 255f);  value3=Math.min(255,Math.max(0,value3));  int value4=(int)(Float.intBitsToFloat(getMemory().read32(addr + 12)) * 255f);  value4=Math.min(255,Math.max(0,value4));  int value=value1 | (value2 << 8) | (value3 << 16)| (value4 << 24);  setRegisterValue((result >> 16) & 31,value);}  }
class C{  public static void writeToFileReal_1D(String format,float[] x,String filename){  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename));    for (int j=0; j < x.length; j++) {      out.write(String.format(format,x[j]));      out.newLine();    }    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private void createVertices(){  for (  String city : map.keySet()) {    graph.addVertex(city);  }}  }
class C{  private static AbstractWidget[] remove(AbstractWidget[] conz,AbstractWidget widget,int[] wasIndexOf){  int length=conz.length;  int indexOf=-1;  for (int i=0; i < length; i++) {    if (conz[i] == widget) {      indexOf=i;      break;    }  }  if (wasIndexOf != null)   wasIndexOf[0]=indexOf;  if (indexOf == -1)   return (conz);  if (length > 1) {    AbstractWidget[] newConz=new AbstractWidget[length - 1];    for (int i=0; i < indexOf; i++)     newConz[i]=conz[i];    for (int i=indexOf; i < length - 1; i++)     newConz[i]=conz[i + 1];    return (newConz);  } else   return (new AbstractWidget[0]);}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  push((Instance)instance.copy());  return true;}  }
class C{  private boolean addedClientWindowListeners(){  return clientWindowListened != null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.900 -0400",hash_original_method="64D36B57D71FC274E4DB32E2B8B74584",hash_generated_method="FFE7C30F37DD29F4CD5A755E2174E9B5") private boolean matches(ByteOrderMark bom){  for (int i=0; i < bom.length(); i++) {    if (bom.get(i) != firstBytes[i]) {      return false;    }  }  return true;}  }
class C{  public static void testNetworkXMLParser(){  Network network=new BasicNetwork();  File file=new File("test.xml");  NetworkXMLParser.instance().toXML(network,file);  System.out.println(network);  System.out.println(NetworkXMLParser.instance().toXML(network));  Network parsedNetwork=NetworkXMLParser.instance().parse(file);  System.out.println(parsedNetwork);}  }
class C{  public void capturePhoto() throws Exception {  mCamera.takePicture(shutterCallback,rawCallback,jpegCallback);  Thread.sleep(WAIT_GENERIC);  mCamera.stopPreview();  mCamera.release();}  }
class C{  private TextImpl nextTextNode(){  Node nextSibling=getNextSibling();  if (nextSibling == null) {    return null;  }  short nodeType=nextSibling.getNodeType();  return nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE ? (TextImpl)nextSibling : null;}  }
class C{  public void animateLayoutAndWait(final int duration){  animateLayout(duration,true,255,true);}  }
class C{  private MachineInfoAveragingPrerequisitesOperator addAverageCalculation(DAG dag,Configuration conf){  MachineInfoAveragingPrerequisitesOperator prereqAverageOper=dag.addOperator("Aggregator",MachineInfoAveragingPrerequisitesOperator.class);  MachineInfoAveragingOperator averageOperator=dag.addOperator("AverageCalculator",MachineInfoAveragingOperator.class);  RedisKeyValPairOutputOperator<MachineKey,Map<String,String>> redisAvgOperator=dag.addOperator("Persister",new RedisKeyValPairOutputOperator<MachineKey,Map<String,String>>());  dag.addStream("Average",averageOperator.outputPort,redisAvgOperator.input);  SmtpOutputOperator smtpOutputOperator=dag.addOperator("Alerter",new SmtpOutputOperator());  dag.addStream("Aggregates",prereqAverageOper.outputPort,averageOperator.inputPort);  dag.addStream("Alerts",averageOperator.smtpAlert,smtpOutputOperator.input);  return prereqAverageOper;}  }
class C{  public static float multiplyInphase(float inphaseA,float quadratureA,float inphaseB,float quadratureB){  return (inphaseA * inphaseB) - (quadratureA * quadratureB);}  }
class C{  static BitSet randomBitSet(int size,int cardinality,Random rnd){  BitSet result=new BitSet(size);  int[] chosen=new int[cardinality];  int i;  for (i=0; i < cardinality; ++i) {    chosen[i]=i;    result.set(i);  }  for (; i < size; ++i) {    int j=rnd.nextInt(i + 1);    if (j < cardinality) {      result.clear(chosen[j]);      result.set(i);      chosen[j]=i;    }  }  return result;}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public void paint(Graphics g){  boolean shouldClearPaintFlags=false;  if ((getWidth() <= 0) || (getHeight() <= 0)) {    return;  }  Graphics componentGraphics=getComponentGraphics(g);  Graphics co=componentGraphics.create();  try {    RepaintManager repaintManager=RepaintManager.currentManager(this);    Rectangle clipRect=co.getClipBounds();    int clipX;    int clipY;    int clipW;    int clipH;    if (clipRect == null) {      clipX=clipY=0;      clipW=getWidth();      clipH=getHeight();    } else {      clipX=clipRect.x;      clipY=clipRect.y;      clipW=clipRect.width;      clipH=clipRect.height;    }    if (clipW > getWidth()) {      clipW=getWidth();    }    if (clipH > getHeight()) {      clipH=getHeight();    }    if (getParent() != null && !(getParent() instanceof JComponent)) {      adjustPaintFlags();      shouldClearPaintFlags=true;    }    int bw, bh;    boolean printing=getFlag(IS_PRINTING);    if (!printing && repaintManager.isDoubleBufferingEnabled() && !getFlag(ANCESTOR_USING_BUFFER)&& isDoubleBuffered()&& (getFlag(IS_REPAINTING) || repaintManager.isPainting())) {      repaintManager.beginPaint();      try {        repaintManager.paint(this,this,co,clipX,clipY,clipW,clipH);      }  finally {        repaintManager.endPaint();      }    } else {      if (clipRect == null) {        co.setClip(clipX,clipY,clipW,clipH);      }      if (!rectangleIsObscured(clipX,clipY,clipW,clipH)) {        if (!printing) {          paintComponent(co);          paintBorder(co);        } else {          printComponent(co);          printBorder(co);        }      }      if (!printing) {        paintChildren(co);      } else {        printChildren(co);      }    }  }  finally {    co.dispose();    if (shouldClearPaintFlags) {      setFlag(ANCESTOR_USING_BUFFER,false);      setFlag(IS_PAINTING_TILE,false);      setFlag(IS_PRINTING,false);      setFlag(IS_PRINTING_ALL,false);    }  }}  }
class C{  static TemporalInstant makeInstant(final int secondsMakeMeUnique){  return new TemporalInstantRfc3339(2015,12,30,12,00,secondsMakeMeUnique);}  }
class C{  public boolean isIPv4address(){  return _is_IPv4address;}  }
class C{  private void updateLists(LinkedList<Hypothesis> hypothesisList,int n,double totalExampleWeight,double totalPositiveWeight,double delta_h_m){  this.bestList=new LinkedList<Hypothesis>();  LinkedList<Result> bestList=new LinkedList<Result>();  LinkedList<Result> restList=new LinkedList<Result>();  this.minBest=null;  this.maxRest=null;  Iterator it=hypothesisList.iterator();  while (it.hasNext()) {    Hypothesis hypo=(Hypothesis)it.next();    if (hypo.getCoveredWeight() > 0.0d) {      if (bestList.size() < n) {        if (bestList.isEmpty()) {          double util=theUtility.utility(totalExampleWeight,totalPositiveWeight,hypo);          double conf=theUtility.confidenceIntervall(totalExampleWeight,totalPositiveWeight,hypo,delta_h_m);          bestList.addLast(new Result(hypo,totalExampleWeight,totalPositiveWeight,util,conf));        } else {          double util=theUtility.utility(totalExampleWeight,totalPositiveWeight,hypo);          double conf=theUtility.confidenceIntervall(totalExampleWeight,totalPositiveWeight,hypo,delta_h_m);          ListIterator<Result> listIterator=bestList.listIterator(0);          while (listIterator.hasNext()) {            Result current=listIterator.next();            if (util > current.getUtility()) {              listIterator.previous();              break;            }          }          listIterator.add(new Result(hypo,totalExampleWeight,totalPositiveWeight,util,conf));        }      } else {        double util=theUtility.utility(totalExampleWeight,totalPositiveWeight,hypo);        double conf=theUtility.confidenceIntervall(totalExampleWeight,totalPositiveWeight,hypo,delta_h_m);        if (util > bestList.getLast().getUtility()) {          ListIterator<Result> listIterator=bestList.listIterator(0);          while (listIterator.hasNext()) {            Result current=listIterator.next();            if (util > current.getUtility()) {              listIterator.previous();              break;            }          }          listIterator.add(new Result(hypo,totalExampleWeight,totalPositiveWeight,util,conf));          restList.addLast(bestList.removeLast());        } else {          restList.addLast(new Result(hypo,totalExampleWeight,totalPositiveWeight,util,conf));        }      }    } else {      double util=theUtility.utility(totalExampleWeight,totalPositiveWeight,hypo);      double conf=theUtility.confidenceIntervall(totalExampleWeight,totalPositiveWeight,hypo,delta_h_m);      restList.addLast(new Result(hypo,totalExampleWeight,totalPositiveWeight,util,conf));    }  }  Result r=bestList.getLast();  double minimum=r.getUtility() - r.getConfidence();  this.minBest=r;  it=bestList.iterator();  while (it.hasNext()) {    r=(Result)it.next();    double current=r.getUtility() - r.getConfidence();    if (current < minimum) {      minimum=current;      this.minBest=r;    }  }  r=restList.getLast();  double maximum=r.getUtility() + r.getConfidence();  this.maxRest=r;  it=restList.iterator();  while (it.hasNext()) {    r=(Result)it.next();    double current=r.getUtility() + r.getConfidence();    if (current > maximum) {      maximum=current;      this.maxRest=r;    }  }  it=bestList.iterator();  while (it.hasNext()) {    this.bestList.addLast(((Result)it.next()).getHypothesis());  }}  }
class C{  protected synchronized void write(final String data){  final OutputStream outputStream=m_outputStream;  if (null == outputStream) {    final String message="Attempted to write data '" + data + "' to Null OutputStream";    getErrorHandler().error(message,null,null);    return;  }  try {    byte[] bytes;    if (m_encoding == null) {      bytes=data.getBytes();    } else {      bytes=data.getBytes(m_encoding);    }    outputStream.write(bytes);    outputStream.flush();  } catch (  final IOException ioe) {    final String message="Error writing data '" + data + "' to OutputStream";    getErrorHandler().error(message,ioe,null);  }}  }
class C{  public static byte[] writeTextFile(FileSystem fs,Path path,String text,boolean overwrite) throws IOException {  FSDataOutputStream stream=fs.create(path,overwrite);  byte[] bytes=new byte[0];  if (text != null) {    bytes=toAsciiByteArray(text);    stream.write(bytes);  }  stream.close();  return bytes;}  }
class C{  private void handleStartCommand(Intent intent,int startId){  if (intent != null && intent.getBooleanExtra(RESUME_TRACK_EXTRA_NAME,false)) {    if (!shouldResumeTrack()) {      Log.i(TAG,"Stop resume track.");      updateRecordingState(PreferencesUtils.RECORDING_TRACK_ID_DEFAULT,true);      stopSelfResult(startId);      return;    }  }}  }
class C{  @SuppressWarnings("deprecation") @Override public void writeTo(Object value,Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> httpHeaders,OutputStream entityStream) throws IOException {  ObjectMapper mapper=locateMapper(type,mediaType);  JsonEncoding enc=findEncoding(mediaType,httpHeaders);  JsonGenerator jg=mapper.getJsonFactory().createJsonGenerator(entityStream,enc);  jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);  if (mapper.getSerializationConfig().isEnabled(SerializationConfig.Feature.INDENT_OUTPUT)) {    jg.useDefaultPrettyPrinter();  }  JavaType rootType=null;  if (genericType != null && value != null) {    if (genericType.getClass() != Class.class) {      rootType=mapper.getTypeFactory().constructType(genericType);      if (rootType.getRawClass() == Object.class) {        rootType=null;      }    }  }  Class<?> viewToUse=null;  if (annotations != null && annotations.length > 0) {    viewToUse=_findView(mapper,annotations);  }  if (viewToUse != null) {    ObjectWriter viewWriter=mapper.viewWriter(viewToUse);    if (_jsonpFunctionName != null) {      viewWriter.writeValue(jg,new JSONPObject(this._jsonpFunctionName,value,rootType));    } else     if (rootType != null) {      mapper.typedWriter(rootType).withView(viewToUse).writeValue(jg,value);    } else {      viewWriter.writeValue(jg,value);    }  } else {    if (_jsonpFunctionName != null) {      mapper.writeValue(jg,new JSONPObject(this._jsonpFunctionName,value,rootType));    } else     if (rootType != null) {      mapper.typedWriter(rootType).writeValue(jg,value);    } else {      mapper.writeValue(jg,value);    }  }}  }
class C{  public final void copyFrom(final Plan in){  this.getPlanElements().clear();  setScore(in.getScore());  this.setType(in.getType());  for (  PlanElement pe : in.getPlanElements()) {    if (pe instanceof Activity) {      Activity a=(Activity)pe;      getPlanElements().add(PopulationUtils.createActivity(a));    } else     if (pe instanceof Leg) {      Leg l=(Leg)pe;      Leg l2=createAndAddLeg(l.getMode());      l2.setDepartureTime(l.getDepartureTime());      l2.setTravelTime(l.getTravelTime());      if (pe instanceof Leg) {        Leg r=((Leg)pe);        l2.setTravelTime(r.getDepartureTime() + r.getTravelTime() - l2.getDepartureTime());      }      if (l.getRoute() != null) {        l2.setRoute(l.getRoute().clone());      }    } else {      throw new IllegalArgumentException("unrecognized plan element type discovered");    }  }}  }
class C{  protected void sequence_StringLiteral(ISerializationContext context,StringLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.STRING_LITERAL__VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.STRING_LITERAL__VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0(),semanticObject.getValue());  feeder.finish();}  }
class C{  private void loadFiles(String inputPath){  this.root=inputPath;  try {    log.info("Loading GTFS files from " + root);    loadStops();    loadCalendar();    loadCalendarDates();    loadShapes();    loadRoutes();    loadTrips();    loadStopTimes();    loadFrequencies();    log.info("All files loaded");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public double intercept(){  return m_intercept;}  }
class C{  public static String normalize(CharSequence src,java.text.Normalizer.Form form,int option){  return NormalizerBase.normalize(src.toString(),form,option);}  }
class C{  @Override public void handlePatch(Operation patch){  ServiceUtils.logInfo(this,"Handling patch for service %s",getSelfLink());  State startState=getState(patch);  State patchState=patch.getBody(State.class);  validatePatchState(startState,patchState);  State currentState=applyPatch(startState,patchState);  validateState(currentState);  patch.complete();  try {    if (ControlFlags.isOperationProcessingDisabled(currentState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping patch operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == currentState.taskState.stage) {      queryDatastores(currentState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  public static StaticBipartiteGraph buildRandomBipartiteGraph(int leftSize,int rightSize,double edgeProbability,Random random){  Long2ObjectMap<LongList> leftSideGraph=new Long2ObjectOpenHashMap<LongList>(leftSize);  Long2ObjectMap<LongList> rightSideGraph=new Long2ObjectOpenHashMap<LongList>(rightSize);  int averageLeftDegree=(int)(rightSize * edgeProbability);  int averageRightDegree=(int)(leftSize * edgeProbability);  for (int i=0; i < leftSize; i++) {    leftSideGraph.put(i,new LongArrayList(averageLeftDegree));    for (int j=0; j < rightSize; j++) {      if (random.nextDouble() < edgeProbability) {        leftSideGraph.get(i).add(j);        if (rightSideGraph.containsKey(j)) {          rightSideGraph.get(j).add(i);        } else {          LongList rightSideList=new LongArrayList(averageRightDegree);          rightSideList.add(i);          rightSideGraph.put(j,rightSideList);        }      }    }  }  return new StaticBipartiteGraph(leftSideGraph,rightSideGraph);}  }
class C{  public boolean hasAttribute(String name,String namespace){  return this.findAttribute(name,namespace) != null;}  }
class C{  public void boil(int temperature){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void doWaitForDownloadsOrTimeout(Query query,long poll,long timeoutMillis) throws TimeoutException {  int currentWaitTime=0;  while (true) {    query.setFilterByStatus(DownloadManager.STATUS_PENDING | DownloadManager.STATUS_PAUSED | DownloadManager.STATUS_RUNNING);    Cursor cursor=mDownloadManager.query(query);    try {      if (cursor.getCount() == 0) {        Log.i(LOG_TAG,"All downloads should be done...");        break;      }      currentWaitTime=timeoutWait(currentWaitTime,poll,timeoutMillis,"Timed out waiting for all downloads to finish");    }  finally {      cursor.close();    }  }}  }
class C{  public void testConstructorPartiesExceedsLimit(){  new Phaser(maxParties);  try {    new Phaser(maxParties + 1);    shouldThrow();  } catch (  IllegalArgumentException success) {  }  new Phaser(new Phaser(),maxParties);  try {    new Phaser(new Phaser(),maxParties + 1);    shouldThrow();  } catch (  IllegalArgumentException success) {  }}  }
class C{  public CrawlerPack addCookie(String domain,String name,String value,String path,Date expires,boolean secure){  if (null == name) {    log.warn("addCookie: Cookie name null.");    return this;  }  cookies.add(new Cookie(domain,name,value,path,expires,secure));  return this;}  }
class C{  public boolean contains(String subtype){  return subtype != null && this.containsKey(subtype.toLowerCase());}  }
class C{  public static boolean isFileOlder(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileOlder(file,reference.lastModified());}  }
class C{  private void doWatchdogCheck(){  mHaveWatchdogScheduled=false;  if (!mIsRunning) {    return;  }  long now=mMonotonicClock.now();  boolean hasNotDrawnWithinTimeout=mWaitingForDraw && now - mLastInvalidateTimeMs > WATCH_DOG_TIMER_MIN_TIMEOUT_MS;  boolean hasNotAdvancedFrameWithinTimeout=mNextFrameTaskMs != -1 && now - mNextFrameTaskMs > WATCH_DOG_TIMER_MIN_TIMEOUT_MS;  if (hasNotDrawnWithinTimeout || hasNotAdvancedFrameWithinTimeout) {    dropCaches();    doInvalidateSelf();  } else {    mScheduledExecutorServiceForUiThread.schedule(mWatchdogTask,WATCH_DOG_TIMER_POLL_INTERVAL_MS,TimeUnit.MILLISECONDS);    mHaveWatchdogScheduled=true;  }}  }
class C{  @Override public void startCDATA() throws IOException {  if (writingCdata) {    throw new IllegalStateException("CDATA tags may not nest");  }  closeStartIfNecessary();  writingCdata=true;  writer.write("<![CDATA[");  closeStart=false;}  }
class C{  public void notifyZoomListeners(){  Object[] listeners=zoomListeners.getListeners();  for (  Object listener : listeners) {    ((ZoomListener)listener).zoomOccured();  }}  }
class C{  public EdgeData(int size,EdgeDataFormat format){  super();  this.size=size;  this.format=format;  edges=new ArrayList<Edge>();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return NODE;default :return null;}}  }
class C{  public void sendTestMessage(DCCppReply m){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyReply(m,null);  return;}  }
class C{  public FloatColumn neg(){  FloatColumn newColumn=FloatColumn.create(name() + "[neg]",size());  for (  float value : this) {    newColumn.add(value * -1);  }  return newColumn;}  }
class C{  protected void sendTestMessage(AcelaMessage m,AcelaListener l){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage  [" + m + "]");  }  notifyMessage(m,l);  return;}  }
class C{  private void updateAction(){  setAction((Action)actions.get(index));  setText("");}  }
class C{  private void tryConnect(InetSocketAddress dest,int timeout) throws IOException {  if (isConnected()) {    disconnect();  }  server=doConnect(dest,timeout);  try {    out=new PrintStream(new BufferedOutputStream(server.getOutputStream()),true,encoding);  } catch (  UnsupportedEncodingException e) {    throw new InternalError(encoding + "encoding not found",e);  }  in=new BufferedInputStream(server.getInputStream());}  }
class C{  private void ensureInitialized(){  if (!mInitialized) {    lock.lock();    try {      if (!mInitialized) {        mInternalPath=Environment.getDataDirectory();        mExternalPath=Environment.getExternalStorageDirectory();        updateStats();        mInitialized=true;      }    }  finally {      lock.unlock();    }  }}  }
class C{  private List<StreamHost> determineStreamHostInfos(List<String> proxies){  List<StreamHost> streamHosts=new ArrayList<StreamHost>();  List<StreamHost> localProxies=getLocalStreamHost();  if (localProxies != null) {    streamHosts.addAll(localProxies);  }  for (  String proxy : proxies) {    Bytestream streamHostRequest=createStreamHostRequest(proxy);    try {      Bytestream response=(Bytestream)SyncPacketSend.getReply(this.connection,streamHostRequest);      streamHosts.addAll(response.getStreamHosts());    } catch (    XMPPException e) {      this.proxyBlacklist.add(proxy);    }  }  return streamHosts;}  }
class C{  public static Transparency transparent(){  return create(TRANSPARENT);}  }
class C{  public static boolean isArrowpointAllowed1(Node from,Node to,IKnowledge knowledge){  if (knowledge == null) {    return true;  }  return !knowledge.isRequired(to.toString(),from.toString()) && !knowledge.isForbidden(from.toString(),to.toString());}  }
class C{  public static BorderFormatter createBorderFormatter(){  return new DefaultBorderFormatter();}  }
class C{  private void writeNewlineOnDebug(XMLStreamWriter out) throws XMLStreamException {  if (LOG.isDebugging()) {    out.writeCharacters("\n");  }}  }
class C{  private void scope(OutputNode node){  NamespaceMap map=node.getNamespaces();  for (  Namespace next : scope) {    String reference=next.reference();    String prefix=next.prefix();    map.setReference(reference,prefix);  }}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  @Inline public static void clearNextRegion(Address region){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!region.isZero());  region.store(Address.zero(),NEXT_REGION_OFFSET);}  }
class C{  public void run(){  String name=null;  try {    name=InetAddress.getByName(hostAddress).getHostName();  } catch (  java.net.UnknownHostException e) {  } finally {synchronized (this) {      reverseLookup=name;      this.notify();    }  }}  }
class C{  @Override public String toString(){  return "VarNode(" + getValueExpression() + ")"+ (isAnonymous() ? "[anonymous]" : "")+ (isSolutionSet() ? "[solutionSet]" : "");}  }
class C{  int readCorner2(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 4,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  private String checkSharedTO(){  List<HashMap<OBlock,List<OPath>>> blockList=_sharedTO.get(_pathName);  if (blockList != null) {    Iterator<HashMap<OBlock,List<OPath>>> iter=blockList.iterator();    if (log.isDebugEnabled()) {      log.debug("Path " + _pathName + " in block \""+ getDisplayName()+ "\" has turnouts thrown from "+ blockList.size()+ " other blocks");    }    while (iter.hasNext()) {      HashMap<OBlock,List<OPath>> map=iter.next();      Iterator<Entry<OBlock,List<OPath>>> it=map.entrySet().iterator();      while (it.hasNext()) {        Entry<OBlock,List<OPath>> entry=it.next();        OBlock block=entry.getKey();        Iterator<OPath> i=entry.getValue().iterator();        while (i.hasNext()) {          OPath path=i.next();          if (log.isDebugEnabled()) {            log.debug("Path " + _pathName + " in block \""+ getDisplayName()+ "\" has turnouts shared with path "+ path.getName()+ " in block "+ block.getDisplayName());          }          String name=block.isPathSet(path.getName());          if (name != null) {            _warrant.setShareTOBlock(block);            return Bundle.getMessage("pathIsSet",_pathName,getDisplayName(),_warrant.getDisplayName(),path.getName(),block.getDisplayName(),name);          } else {            _ownsTOs=true;          }        }      }    }  }  return null;}  }
class C{  @NonNull public AuthorizationRequest build(){  return new AuthorizationRequest(mConfiguration,mClientId,mResponseType,mRedirectUri,mDisplay,mLoginHint,mPrompt,mScope,mState,mCodeVerifier,mCodeVerifierChallenge,mCodeVerifierChallengeMethod,mResponseMode,Collections.unmodifiableMap(new HashMap<>(mAdditionalParameters)));}  }
class C{  private boolean hasPrimary(){synchronized (this) {    return this.primaryState == OTHER_PRIMARY_NOT_HOSTING || this.primaryState == OTHER_PRIMARY_HOSTING || this.primaryState == IS_PRIMARY_HOSTING;  }}  }
class C{  public DataInputStream openDataInputStream() throws IOException {  return new DataInputStream(openInputStream());}  }
class C{  public static ZyInfoEdge insertProximityEdge(final Graph2D graph,final ZyGraphNode<?> sourceNode,final ZyGraphNode<?> targetNode){  Preconditions.checkNotNull(graph,"Graph argument can not be null");  Preconditions.checkNotNull(sourceNode,"Source node argument can not be null");  Preconditions.checkNotNull(targetNode,"Target node argument can not be null");  Preconditions.checkArgument((sourceNode instanceof ZyProximityNode<?>) || (targetNode instanceof ZyProximityNode<?>),"One of the two arguments must be a proximity browsing node");  final ZyEdgeRealizer<ZyInfoEdge> r=new ZyEdgeRealizer<ZyInfoEdge>(new ZyLabelContent(null),null);  r.setLineType(LineType.LINE_2);  final Edge edge=graph.createEdge(sourceNode.getNode(),targetNode.getNode(),r);  final ZyInfoEdge infoEdge=new ZyInfoEdge(sourceNode,targetNode,edge,r);  final ZyEdgeData<ZyInfoEdge> data=new ZyEdgeData<ZyInfoEdge>(infoEdge);  r.setUserData(data);  return infoEdge;}  }
class C{  public final boolean within(Element element){  return within(element,false);}  }
class C{  void checkEndCode(){  if (endCode) {    throw new IllegalStateException("Cannot visit instructions after visitMaxs has been called.");  }}  }
class C{  protected IfStatementImpl(){  super();}  }
class C{  @Nullable private CountDownLatch ensureGet() throws IgniteFutureCancelledException {synchronized (mux) {    if (cancelled)     throw new IgniteFutureCancelledException("Scheduling has been cancelled: " + this);    if (done)     return null;    return resLatch;  }}  }
class C{  public String toZString(){  StringBuilder buffer=new StringBuilder(32);  try {    printZ(buffer);  } catch (  IOException e) {    throw new RuntimeException("Exception printing to StringBuilder",e);  }  return buffer.toString();}  }
class C{  @Override public long ramBytesUsed(){  return (fst == null) ? 0 : fst.ramBytesUsed();}  }
class C{  public BaseXMLParser(){  stringer=new Stringer();}  }
class C{  public int size(){  return size;}  }
class C{  private void onBuildStatusUpdated(BuildTaskDescriptor descriptor){switch (descriptor.getStatus()) {case SUCCESSFUL:    isBuildInProgress=false;  stopCheckingStatus();stopCheckingOutput();notification.setStatus(FINISHED);notification.setType(INFO);notification.setMessage(constant.buildFinished(activeProject.getName()));console.setCurrentBuilderStatus(BuilderStatus.DONE);console.print("[INFO] " + notification.getMessage());console.print("[MAVEN] " + getTargetFolderURL(descriptor));buildContext.setBuilding(false);break;case FAILED:isBuildInProgress=false;stopCheckingStatus();stopCheckingOutput();notification.setStatus(FINISHED);notification.setType(ERROR);notification.setMessage(constant.buildFailed());console.setCurrentBuilderStatus(BuilderStatus.FAILED);console.print("[ERROR] " + notification.getMessage());console.print("[MAVEN] " + getTargetFolderURL(descriptor));buildContext.setBuilding(false);break;case CANCELLED:isBuildInProgress=false;stopCheckingStatus();stopCheckingOutput();notification.setStatus(FINISHED);notification.setType(ERROR);notification.setMessage(constant.buildCanceled(activeProject.getName()));console.setCurrentBuilderStatus(BuilderStatus.FAILED);console.print("[ERROR] " + notification.getMessage());buildContext.setBuilding(false);break;}}  }
class C{  private void handle200OK(SipTransactionContext ctx){  if (sLogger.isActivated()) {    sLogger.info("200 OK response received");  }  mSubscribed=true;  SipResponse resp=ctx.getSipResponse();  Vector<String> newRoute=SipUtils.routeProcessing(resp,true);  mDialogPath.setRoute(newRoute);  mDialogPath.setRemoteTag(resp.getToTag());  mDialogPath.setTarget(resp.getContactURI());  mAuthenticationAgent.readProxyAuthenticateHeader(resp);  retrieveExpirePeriod(resp);  startTimer(System.currentTimeMillis(),mExpirePeriod,0.5);  Core.getInstance().getImService().addGroupChatConferenceSubscriber(mDialogPath.getCallId(),mSession);}  }
class C{  public double optDouble(String key,double defaultValue){  try {    Object o=opt(key);    return o instanceof Number ? ((Number)o).doubleValue() : new Double((String)o).doubleValue();  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Override public String globalInfo(){  return "This kernel is based on a static kernel matrix that is read from a file. " + "Instances must have a single nominal attribute (excluding the class). " + "This attribute must be the first attribute in the file and its values are "+ "used to reference rows/columns in the kernel matrix. The second attribute "+ "must be the class attribute.";}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm uses a hill climbing algorithm " + "adding, deleting and reversing arcs. The search is not restricted by an order " + "on the variables (unlike K2). The difference with B and B2 is that this hill "+ "climber also considers arrows part of the naive Bayes structure for deletion.";}  }
class C{  public static boolean zArrayGet(boolean[] a,int i){  try {    return a[i];  } catch (  Throwable t) {    return a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)];  }}  }
class C{  @Override public void ICONST_M1(){  env.topFrame().operandStack.pushBv32(ExpressionFactory.ICONST_M1);}  }
class C{  private void initializeHex(int x,int y){  initializeHex(x,y,true);}  }
class C{  private double[] initKnnDistanceList(){  double[] knnDistances=new double[getKmax()];  return knnDistances;}  }
class C{  public DocumentCharSequence(IDocument document){  fDocument=document;}  }
class C{  public void proceed(String username,String password){  this.handler.proceed(username,password);}  }
class C{  public static File updateDriveFile(Drive drive,File driveFile,String driveTitle,java.io.File file,boolean canRetry) throws IOException {  try {    driveFile.setTitle(driveTitle);    driveFile.setMimeType(KMZ_MIME_TYPE);    if (file != null) {      FileContent fileContent=new FileContent(KMZ_MIME_TYPE,file);      return drive.files().update(driveFile.getId(),driveFile,fileContent).execute();    } else {      return drive.files().update(driveFile.getId(),driveFile).execute();    }  } catch (  UserRecoverableAuthIOException e) {    throw e;  }catch (  IOException e) {    if (canRetry) {      return updateDriveFile(drive,driveFile,driveTitle,file,false);    }    throw e;  }}  }
class C{  public final boolean isStopCodon(int state){  return geneticCode.isStopCodon(stateMap[state]);}  }
class C{  public MergedBitVectorIterator(final Iterator<? extends BitVector> it0,final Iterator<? extends BitVector> it1){  this.it0=it0;  this.it1=it1;  result=LongArrayBitVector.getInstance();  if (it0.hasNext())   curr0=it0.next();  if (it1.hasNext())   curr1=it1.next();}  }
class C{  public Analyzer includeR3(){  includeR3=true;  return this;}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  addValidationException(e);}  }
class C{  public Object clone() throws CloneNotSupportedException {  InternationalFormatter formatter=(InternationalFormatter)super.clone();  formatter.literalMask=null;  formatter.iterator=null;  formatter.validMask=false;  formatter.string=null;  return formatter;}  }
class C{  public void fireIndexedPropertyChange(String propertyName,int index,boolean oldValue,boolean newValue){  if (oldValue != newValue) {    fireIndexedPropertyChange(propertyName,index,Boolean.valueOf(oldValue),Boolean.valueOf(newValue));  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void clear(Container self){  self.removeAll();}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone()) {    push(instance);    return true;  } else {    bufferInput(instance);    return false;  }}  }
class C{  public void testCrashRecover() throws Throwable {  List<CopycatServer> servers=createServers(3);  CopycatClient client=createClient();  submit(client,0,1000);  await(30000);  servers.get(0).shutdown().get(10,TimeUnit.SECONDS);  CopycatServer server=createServer(members.get(0));  server.join(members.stream().map(null).collect(Collectors.toList())).thenRun(null);  await(30000);  submit(client,0,1000);  await(30000);}  }
class C{  public static boolean isPresentOn(IProject project){  if (project == null) {    return false;  }  if (!project.isOpen()) {    return false;  }  try {    return project.hasNature(ID);  } catch (  CoreException e) {    return false;  }}  }
class C{  public LocatorProxy(XMLLocator locator){  fLocator=locator;}  }
class C{  private void clean(final Table table){  if (table == null) {    return;  }  for (  final TableItem item : table.getItems()) {    item.dispose();  }}  }
class C{  public int hashCode(){  return alignment ^ leader ^ Math.round(position);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public Builder uri(final URI uri){  checkNotNull(uri,"uri");  checkArgument(uri.getRawQuery() == null,"illegal service uri: %s",uri);  checkArgument(uri.getRawFragment() == null,"illegal service uri: %s",uri);  this.uri=uri;  return this;}  }
class C{  static public boolean checkUidPurpose(int uid,Object purpose,boolean allowUnknown){  SceUid found=uidMap.get(uid);  if (found == null) {    if (!allowUnknown) {      Emulator.log.warn("Attempt to use unknown SceUID (purpose='" + purpose.toString() + "')");      return false;    }  } else   if (!purpose.equals(found.getPurpose())) {    Emulator.log.error("Attempt to use SceUID for different purpose (purpose='" + purpose.toString() + "',original='"+ found.getPurpose().toString()+ "')");    return false;  }  return true;}  }
class C{  public static String decode(String s,boolean convertPlus){  if (!convertPlus && s.indexOf('%') == -1)   return s;  StringBuffer result=new StringBuffer(s.length());  ByteArrayOutputStream out=new ByteArrayOutputStream();  for (int i=0; i < s.length(); ) {    char c=s.charAt(i);    if (convertPlus && c == '+')     result.append(' '); else     if (c == '%') {      out.reset();      do {        if (i + 2 >= s.length())         throw new IllegalArgumentException(Msg.getString("K01fe",i));        int d1=Character.digit(s.charAt(i + 1),16);        int d2=Character.digit(s.charAt(i + 2),16);        if (d1 == -1 || d2 == -1)         throw new IllegalArgumentException(Msg.getString("K01ff",s.substring(i,i + 3),String.valueOf(i)));        out.write((byte)((d1 << 4) + d2));        i+=3;      } while (i < s.length() && s.charAt(i) == '%');      result.append(out.toString());      continue;    } else     result.append(c);    i++;  }  return result.toString();}  }
class C{  public void apply(){  SimulationData.currentState=this.state;  repaint();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:18.800 -0500",hash_original_method="94E6DD980D252AA320ADEF879614EDE5",hash_generated_method="838942D4CF7C1958BF7C064541CBB8E5") void removeAt(int i){  final Object[] items=this.items;  if (i == takeIndex) {    items[takeIndex]=null;    takeIndex=inc(takeIndex);  } else {    for (; ; ) {      int nexti=inc(i);      if (nexti != putIndex) {        items[i]=items[nexti];        i=nexti;      } else {        items[i]=null;        putIndex=i;        break;      }    }  }  --count;  notFull.signal();}  }
class C{  public JParamsComposed(){  initComponents();}  }
class C{  public boolean hasSourceNode(Value v){  return v instanceof Resource && sourceNodes.contains((Resource)v);}  }
class C{  public FolderTokenDocument findById(int id) throws Exception {  int idx;  FolderTokenDocument doc=null;  idx=super.findIndexById(id);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  doc=get(idx);  return doc;}  }
class C{  public Builder newBuilder(){  return new Builder(this);}  }
class C{  public Laumanns(){  super(2,2);}  }
class C{  public void checkPendingCall(){  IMXCall call=VectorCallViewActivity.getActiveCall();  if (null == call) {    if (null != mCall) {      mCall.removeListener(mCallListener);    }    mCall=null;    setVisibility(View.GONE);  } else {    if (mCall != call) {      if (null != mCall) {        mCall.removeListener(mCallListener);      }      mCall=call;      call.addListener(mCallListener);      setVisibility(View.VISIBLE);    }    refresh();  }}  }
class C{  public void reset(){  endRange=set.getRangeCount() - 1;  range=0;  endElement=-1;  nextElement=0;  if (endRange >= 0) {    loadRange(range);  }  stringIterator=null;  if (set.strings != null) {    stringIterator=set.strings.iterator();    if (!stringIterator.hasNext())     stringIterator=null;  }}  }
class C{  @Override public void putAll(Map<? extends Long,? extends Integer> map){  Iterator<? extends Entry<? extends Long,? extends Integer>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Long,? extends Integer> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  @Deprecated public static Source fromNamedAppendableText(String name){  CompilerAsserts.neverPartOfCompilation("do not call Source.fromNamedAppendable from compiled code");  final Content content=new AppendableLiteralSourceImpl(name);  final Source source=new SourceImpl(content);  return source;}  }
class C{  public void math(final int op,final Type type){  mv.visitInsn(type.getOpcode(op));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public long[] toLongArray(){  trim();  return bits;}  }
class C{  public static String xmlNode(String name,String attributes,String content,boolean indent){  String start=attributes == null ? name : name + attributes;  if (content == null) {    return "<" + start + "/>\n";  }  if (indent && content.indexOf('\n') >= 0) {    content="\n" + indent(content);  }  return "<" + start + ">"+ content+ "</"+ name+ ">\n";}  }
class C{  public Session driverSession(){  return ses;}  }
class C{  public RegexpChunkRule(Regex regexp,String repl,String descr){  this._repl=repl;  this._descr=descr;  this._regexp=regexp;}  }
class C{  public void mark(long n){  count.addAndGet(n);  m1Rate.update(n);  m5Rate.update(n);  m15Rate.update(n);}  }
class C{  public Token createToken(final Segment line,final int beg,final int end,final int startOffset,final int type){  return createToken(line.array,beg,end,startOffset,type);}  }
class C{  public FileProcessController(final FileControllerParameters arguments,final int pid,final long timeout,final TimeUnit units){  if (pid < 1) {    throw new IllegalArgumentException("Invalid pid '" + pid + "' specified");  }  this.pid=pid;  this.arguments=arguments;  this.statusTimeoutMillis=units.toMillis(timeout);}  }
class C{  public void freeHessian2StreamingInput(Hessian2StreamingInput in){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void commonPrecheck(){  commonPrecheck(new ArrayList<String>());}  }
class C{  public static void dropAll(Connection conn) throws SQLException {  Statement stat=conn.createStatement();  stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA);  removeAllTriggers(conn,TRIGGER_PREFIX);  removeIndexFiles(conn);}  }
class C{  public void stop(){  try {    mCurrentMediaPlayer.reset();    mIsInitialized=false;  } catch (  Throwable t) {  }}  }
class C{  @Override public double calculateDistance(double[] x1,double[] x2){  double expression=norm2(x1,x2) / sigma;  if (expression > 1) {    return 0.0d;  } else {    double minus=1.0d - expression;    return Math.pow(minus,degree);  }}  }
class C{  public void attachWithNoClear(){  throw new UnsupportedOperationException("Required method instantiateItem was not overridden");}  }
class C{  protected void skip(){  do {    readBlock();  } while ((blockSize > 0) && !err());}  }
class C{  private void gaincLocMode1(AtracGainInfo dst){  if (dst.numPoints > 0) {    dst.locCode[0]=br.read(5);    for (int i=1; i < dst.numPoints; i++) {      VLC tab=(dst.levCode[i] <= dst.levCode[i - 1] ? gain_vlc_tabs[7] : gain_vlc_tabs[9]);      dst.locCode[i]=dst.locCode[i - 1] + tab.getVLC2(br);    }  }}  }
class C{  private void closeInjectorResource(ShardId shardId,Injector shardInjector,Class<? extends Closeable>... toClose){  for (  Class<? extends Closeable> closeable : toClose) {    if (closeInjectorOptionalResource(shardId,shardInjector,closeable) == false) {      logger.warn("[{}] no instance available for [{}], ignoring... ",shardId,closeable.getSimpleName());    }  }}  }
class C{  public boolean havePendingRequests(){  boolean havePending=false;  clientsLock.lock();  Iterator<Entry<Integer,ClientData>> it=clientsData.entrySet().iterator();  while (it.hasNext() && !havePending) {    ClientData clientData=it.next().getValue();    clientData.clientLock.lock();    RequestList reqs=clientData.getPendingRequests();    if (!reqs.isEmpty()) {      for (      TOMMessage msg : reqs) {        if (!msg.alreadyProposed) {          havePending=true;          break;        }      }    }    clientData.clientLock.unlock();  }  clientsLock.unlock();  return havePending;}  }
class C{  public static String safeToString(final Object source){  return source == null ? "" : source.toString().trim();}  }
class C{  public final void testAddAllHelperTextsFromCollection(){  CharSequence helperText1="helperText1";  CharSequence helperText2="helperText2";  Collection<CharSequence> helperTexts1=new LinkedList<>();  helperTexts1.add(helperText1);  helperTexts1.add(helperText2);  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTexts(helperTexts1);  passwordEditText.addAllHelperTexts(helperTexts1);  Collection<CharSequence> helperTexts2=passwordEditText.getHelperTexts();  assertEquals(helperTexts1.size(),helperTexts2.size());  Iterator<CharSequence> iterator=helperTexts2.iterator();  assertEquals(helperText1,iterator.next());  assertEquals(helperText2,iterator.next());}  }
class C{  private static void addReceiverObjectType(WarningPropertySet<WarningProperty> propertySet,ClassContext classContext,Method method,Location location){  try {    Instruction ins=location.getHandle().getInstruction();    if (!receiverObjectInstructionSet.get(ins.getOpcode())) {      return;    }    TypeDataflow typeDataflow=classContext.getTypeDataflow(method);    TypeFrame frame=typeDataflow.getFactAtLocation(location);    if (frame.isValid()) {      Type type=frame.getInstance(ins,classContext.getConstantPoolGen());      if (type instanceof ReferenceType) {        propertySet.setProperty(GeneralWarningProperty.RECEIVER_OBJECT_TYPE,type.toString());      }    }  } catch (  DataflowAnalysisException e) {  }catch (  CFGBuilderException e) {  }}  }
class C{  int parseHour(String source,char patternChar,int offset) throws ParseException {  int min=(patternChar == HOUR_1_LETTER || patternChar == HOUR12_1_LETTER) ? 1 : 0;  int max=((patternChar == HOUR_LETTER || patternChar == HOUR_1_LETTER) ? 23 : 11) + min;  return parseNumber(source,offset,"hour",min,max) - min;}  }
class C{  protected static void isort(int level[],float BC[]){  float temp;  int temp2;  for (int i=0; i < BC.length - 1; i++) {    int j=i;    temp=BC[j + 1];    temp2=level[j + 1];    if (temp == 0) {      continue;    }    int prej=j + 1;    while (j > -1 && (temp < BC[j] || BC[j] == 0)) {      if (BC[j] == 0) {        j--;        continue;      } else {        BC[prej]=BC[j];        level[prej]=level[j];        prej=j;        j--;      }    }    BC[prej]=temp;    level[prej]=temp2;  }}  }
class C{  public void drawRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){  mGraphics.drawRoundRect(x,y,width,height,arcWidth,arcHeight);}  }
class C{  public static PhraseSuggestionBuilder phraseSuggestion(String name){  return new PhraseSuggestionBuilder(name);}  }
class C{  public Rules(){  super();  returnType=Void.class;  maxInitializationDepth=5;  maxVariationDepth=10;  functionCrossoverProbability=0.5;  availableNodes=new ArrayList<Node>();}  }
class C{  public Builder(String baseSolrUrl){  this.baseSolrUrl=baseSolrUrl;  this.responseParser=new BinaryResponseParser();}  }
class C{  protected AttributedString buildAttributedString(BridgeContext ctx,Element element){  AttributedStringBuffer asb=new AttributedStringBuffer();  fillAttributedStringBuffer(ctx,element,true,null,null,null,asb);  return asb.toAttributedString();}  }
class C{  void writeAdditionalComments() throws IOException {  Object comments=getDocument().getProperty(HTMLDocument.AdditionalComments);  if (comments instanceof Vector) {    Vector v=(Vector)comments;    for (int counter=0, maxCounter=v.size(); counter < maxCounter; counter++) {      writeComment(v.elementAt(counter).toString());    }  }}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    e.writeHeader(fos);    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  @SuppressWarnings("unchecked") private static int find(Object[] arr,java.lang.Comparable val,int bnd,int l,int r){  int m=l;  int d=1;  while (m <= r) {    if (val.compareTo(arr[m]) > bnd) {      l=m + 1;    } else {      r=m - 1;      break;    }    m+=d;    d<<=1;  }  while (l <= r) {    m=(l + r) >>> 1;    if (val.compareTo(arr[m]) > bnd) {      l=m + 1;    } else {      r=m - 1;    }  }  return l - 1;}  }
class C{  private void validateRecords(List<SourceRecord> records,Schema expectedFieldSchema,Object expectedValue){  assertEquals(1,records.size());  Object objValue=records.get(0).value();  assertTrue(objValue instanceof Struct);  Struct value=(Struct)objValue;  Schema schema=value.schema();  assertEquals(Type.STRUCT,schema.type());  List<Field> fields=schema.fields();  assertEquals(1,fields.size());  Schema fieldSchema=fields.get(0).schema();  assertEquals(expectedFieldSchema,fieldSchema);  if (expectedValue instanceof byte[]) {    assertTrue(value.get(fields.get(0)) instanceof byte[]);    assertEquals(ByteBuffer.wrap((byte[])expectedValue),ByteBuffer.wrap((byte[])value.get(fields.get(0))));  } else {    assertEquals(expectedValue,value.get(fields.get(0)));  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void update(){  float anglePerSample=(float)(2.0d * Math.PI * mFrequency / mSampleRate);  mAnglePerSample=Complex.fromAngle(anglePerSample);}  }
class C{  public TransportNetwork scenarioCopy(Scenario scenario){  TransportNetwork copy=new TransportNetwork();  copy.networkId=scenario.id;  copy.gridPointSet=this.gridPointSet;  if (scenario.affectsTransitLayer()) {    copy.transitLayer=this.transitLayer.scenarioCopy(copy);  } else {    copy.transitLayer=this.transitLayer;  }  if (scenario.affectsStreetLayer()) {    copy.streetLayer=this.streetLayer.scenarioCopy(copy);  } else {    copy.streetLayer=this.streetLayer;  }  copy.fareCalculator=this.fareCalculator;  return copy;}  }
class C{  public LocalDateTime roundCeilingCopy(){  return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));}  }
class C{  public void testConstrDoubleNaN(){  double a=Double.NaN;  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public T caseN4TypeDefinition(N4TypeDefinition object){  return null;}  }
class C{  @Override public QueryResult<List<RoleVO>> findGridResult(SearchValue searchValue,PageOf pageOf) throws ServiceException, Exception {  if (searchValue == null || pageOf == null) {    throw new ServiceException(SysMessageUtil.get(GreenStepSysMsgConstants.SEARCH_NO_DATA));  }  Map<String,Object> params=this.getQueryGridParameter(searchValue);  int limit=Integer.parseInt(pageOf.getShowRow());  int offset=(Integer.parseInt(pageOf.getSelect()) - 1) * limit;  QueryResult<List<RoleVO>> result=this.roleDAO.findPageQueryResultByQueryName("findRolePageGrid",params,offset,limit);  pageOf.setCountSize(String.valueOf(result.getRowCount()));  pageOf.toCalculateSize();  return result;}  }
class C{  private void notifyStreamLoaded(boolean success){  Intent intent=new Intent(STREAM_DONE_LOADING_INTENT);  intent.putExtra(STREAM_DONE_LOADING_SUCCESS,success);  broadcastManager.sendBroadcast(intent);}  }
class C{  public void init(ModeledAuthenticatedUser currentUser){  setCurrentUser(currentUser);}  }
class C{  public @Test final void testCreationNegative4(){  thrown.expect(IllegalArgumentException.class);  new Role(null,"TEST");}  }
class C{  public VOParameter(VOParameterDefinition paramDef){  super();  if (paramDef == null) {    throw new IllegalArgumentException("VOParameterDefinition must not be null");  }  parameterDefinition=paramDef;}  }
class C{  public void initDB(){  wasAccessed=true;  if (factory == null) {    factory=new EvoEntityManagerFactory();    createNewEntityManager();  } else {    factory.clearAllEntityManagers();    if (!factory.isOpen()) {      factory=new EvoEntityManagerFactory();    }    createNewEntityManager();    clearDatabase();  }}  }
class C{  public double eval(double params[]){  boolean p1=params[0] == 0.0 ? false : true;  boolean p2=params[1] == 0.0 ? false : true;  return (((p1 && p2) == true) ? 0.0 : 1.0);}  }
class C{  @Override public int size(){  return weightMap.size();}  }
class C{  public void addTone(ToneScore score){  tones.add(score);}  }
class C{  public static void startPeriodicSync(Account account){  ContentResolver.addPeriodicSync(account,SyncConstants.AUTHORITY,Bundle.EMPTY,SYNC_INTERVAL);}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  public CActionGraphExportSVG(final JFrame parent,final ZyGraph graph){  super("Export as SVG");  m_parent=parent;  m_graph=graph;}  }
class C{  public Statement(TypedOperation operation,List<RelativeNegativeIndex> inputVariables){  this.operation=operation;  this.inputs=new ArrayList<>(inputVariables);}  }
class C{  public static void previewNinePatchWithDraw9PatchTool(InputStream is,String fileName){  MainFrame frame=new MainFrame(is,FileSystemView.getFileSystemView().getDefaultDirectory().getAbsolutePath() + File.separator + fileName);  frame.setDefaultCloseOperation(MainFrame.DISPOSE_ON_CLOSE);  frame.setSize(700,500);  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  protected Pair<Class<? extends Page>,PageParameters> determineRedirectTarget(boolean isCheckout){  final Class<? extends Page> successfulPage;  final PageParameters parameters=new PageParameters();  if (isCheckout) {    successfulPage=(Class)wicketPagesMounter.getPageProviderByUri("/checkout").get();    parameters.set(CheckoutPage.THREE_STEPS_PROCESS,"true").set(CheckoutPage.STEP,CheckoutPage.STEP_ADDR);  } else {    successfulPage=(Class)wicketPagesMounter.getPageProviderByUri("/profile").get();  }  return new Pair<Class<? extends Page>,PageParameters>(successfulPage,parameters);}  }
class C{  public Token readToken(){  reader.sp=0;  name=null;  radix=0;  int pos=0;  int endPos=0;  List<Comment> comments=null;  try {    loop:     while (true) {      pos=reader.bp;switch (reader.ch) {case ' ':case '\t':case FF:        do {          reader.scanChar();        } while (reader.ch == ' ' || reader.ch == '\t' || reader.ch == FF);      processWhiteSpace(pos,reader.bp);    break;case LF:  reader.scanChar();processLineTerminator(pos,reader.bp);break;case CR:reader.scanChar();if (reader.ch == LF) {reader.scanChar();}processLineTerminator(pos,reader.bp);break;case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':case '$':case '_':scanIdent();break loop;case '0':reader.scanChar();if (reader.ch == 'x' || reader.ch == 'X') {reader.scanChar();skipIllegalUnderscores();if (reader.ch == '.') {scanHexFractionAndSuffix(pos,false);} else if (reader.digit(pos,16) < 0) {lexError(pos,"invalid.hex.number");} else {scanNumber(pos,16);}} else if (reader.ch == 'b' || reader.ch == 'B') {if (!allowBinaryLiterals) {lexError(pos,"unsupported.binary.lit",source.name);allowBinaryLiterals=true;}reader.scanChar();skipIllegalUnderscores();if (reader.digit(pos,2) < 0) {lexError(pos,"invalid.binary.number");} else {scanNumber(pos,2);}} else {reader.putChar('0');if (reader.ch == '_') {int savePos=reader.bp;do {reader.scanChar();} while (reader.ch == '_');if (reader.digit(pos,10) < 0) {lexError(savePos,"illegal.underscore");}}scanNumber(pos,8);}break loop;case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':scanNumber(pos,10);break loop;case '.':reader.scanChar();if ('0' <= reader.ch && reader.ch <= '9') {reader.putChar('.');scanFractionAndSuffix(pos);} else if (reader.ch == '.') {int savePos=reader.bp;reader.putChar('.');reader.putChar('.',true);if (reader.ch == '.') {reader.scanChar();reader.putChar('.');tk=TokenKind.ELLIPSIS;} else {lexError(savePos,"illegal.dot");}} else {tk=TokenKind.DOT;}break loop;case ',':reader.scanChar();tk=TokenKind.COMMA;break loop;case ';':reader.scanChar();tk=TokenKind.SEMI;break loop;case '(':reader.scanChar();tk=TokenKind.LPAREN;break loop;case ')':reader.scanChar();tk=TokenKind.RPAREN;break loop;case '[':reader.scanChar();tk=TokenKind.LBRACKET;break loop;case ']':reader.scanChar();tk=TokenKind.RBRACKET;break loop;case '{':reader.scanChar();tk=TokenKind.LBRACE;break loop;case '}':reader.scanChar();tk=TokenKind.RBRACE;break loop;case '/':reader.scanChar();if (reader.ch == '/') {do {reader.scanCommentChar();} while (reader.ch != CR && reader.ch != LF && reader.bp < reader.buflen);if (reader.bp < reader.buflen) {comments=addComment(comments,processComment(pos,reader.bp,CommentStyle.LINE));}break;} else if (reader.ch == '*') {boolean isEmpty=false;reader.scanChar();CommentStyle style;if (reader.ch == '*') {style=CommentStyle.JAVADOC;reader.scanCommentChar();if (reader.ch == '/') {isEmpty=true;}} else {style=CommentStyle.BLOCK;}while (!isEmpty && reader.bp < reader.buflen) {if (reader.ch == '*') {reader.scanChar();if (reader.ch == '/') break;} else {reader.scanCommentChar();}}if (reader.ch == '/') {reader.scanChar();comments=addComment(comments,processComment(pos,reader.bp,style));break;} else {lexError(pos,"unclosed.comment");break loop;}} else if (reader.ch == '=') {tk=TokenKind.SLASHEQ;reader.scanChar();} else {tk=TokenKind.SLASH;}break loop;case '\'':reader.scanChar();if (reader.ch == '\'') {lexError(pos,"empty.char.lit");} else {if (reader.ch == CR || reader.ch == LF) lexError(pos,"illegal.line.end.in.char.lit");scanLitChar(pos);char ch2=reader.ch;if (reader.ch == '\'') {reader.scanChar();tk=TokenKind.CHARLITERAL;} else {lexError(pos,"unclosed.char.lit");}}break loop;case '\"':reader.scanChar();while (reader.ch != '\"' && reader.ch != CR && reader.ch != LF && reader.bp < reader.buflen) scanLitChar(pos);if (reader.ch == '\"') {tk=TokenKind.STRINGLITERAL;reader.scanChar();} else {lexError(pos,"unclosed.str.lit");}break loop;default :if (isSpecial(reader.ch)) {scanOperator();} else {boolean isJavaIdentifierStart;if (reader.ch < '\u0080') {isJavaIdentifierStart=false;} else {char high=reader.scanSurrogates();if (high != 0) {reader.putChar(high);isJavaIdentifierStart=Character.isJavaIdentifierStart(Character.toCodePoint(high,reader.ch));} else {isJavaIdentifierStart=Character.isJavaIdentifierStart(reader.ch);}}if (isJavaIdentifierStart) {scanIdent();} else if (reader.bp == reader.buflen || reader.ch == EOI && reader.bp + 1 == reader.buflen) {tk=TokenKind.EOF;pos=reader.buflen;} else {String arg=(32 < reader.ch && reader.ch < 127) ? String.format("%s",reader.ch) : String.format("\\u%04x",(int)reader.ch);lexError(pos,"illegal.char",arg);reader.scanChar();}}break loop;}}endPos=reader.bp;switch (tk.tag) {case DEFAULT:return new Token(tk,pos,endPos,comments);case NAMED:return new NamedToken(tk,pos,endPos,name,comments);case STRING:return new StringToken(tk,pos,endPos,reader.chars(),comments);case NUMERIC:return new NumericToken(tk,pos,endPos,reader.chars(),radix,comments);default :throw new AssertionError();}}  finally {if (scannerDebug) {System.out.println("nextToken(" + pos + ","+ endPos+ ")=|"+ new String(reader.getRawCharacters(pos,endPos))+ "|");}}}  }
class C{  private void forceOverflow(){  forceOverflow();}  }
class C{  public PaymentDataException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  @Override public void respond(String response){  channel.send().message(response);}  }
class C{  public static <T>Flux<T> removeAll(Flux<T> flux,Iterable<? extends T> iterable){  return Flux.fromIterable(null);}  }
class C{  public ThumbnailRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  static void emitDynamicLinkingSequence(Assembler asm,GPR reg,MemberReference ref,boolean couldBeZero){  int memberId=ref.getId();  Offset memberOffset=Offset.fromIntZeroExtend(memberId << 2);  Offset tableOffset=Entrypoints.memberOffsetsField.getOffset();  if (couldBeZero) {    int retryLabel=asm.getMachineCodeIndex();    asm.generateJTOCloadWord(reg,tableOffset);    if (VM.BuildFor32Addr) {      asm.emitMOV_Reg_RegDisp(reg,reg,memberOffset);    } else {      asm.emitMOVSXDQ_Reg_RegDisp(reg,reg,memberOffset);    }    if (NEEDS_DYNAMIC_LINK == 0) {      asm.emitTEST_Reg_Reg(reg,reg);    } else {      asm.emitCMP_Reg_Imm(reg,NEEDS_DYNAMIC_LINK);    }    ForwardReference fr=asm.forwardJcc(NE);    asm.emitPUSH_Imm(memberId);    genParameterRegisterLoad(asm,1);    Offset resolverOffset=Entrypoints.resolveMemberMethod.getOffset();    asm.generateJTOCcall(resolverOffset);    asm.emitJMP_Imm(retryLabel);    fr.resolve(asm);  } else {    asm.generateJTOCloadWord(reg,tableOffset);    asm.emitMOV_Reg_RegDisp(reg,reg,memberOffset);  }}  }
class C{  public void keyTyped(GraphicsNodeKeyEvent evt){  dispatchTextEvent(evt);}  }
class C{  public static Media createMedia(InputStream stream,String mimeType) throws IOException {  return createMedia(stream,mimeType,null);}  }
class C{  public static void checkPRQLocalSize(String senderId,final int numQueueEntries){  GatewaySender sender=null;  for (  GatewaySender s : cache.getGatewaySenders()) {    if (s.getId().equals(senderId)) {      sender=s;      break;    }  }  if (sender.isParallel()) {    final Set<RegionQueue> queues=((AbstractGatewaySender)sender).getQueues();    Awaitility.await().atMost(120,TimeUnit.SECONDS).until(null);  }}  }
class C{  public int damageDropped(IBlockState state){  return state.getValue(TYPE).getMeta();}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public boolean nextStringEquals(String str) throws NoSuchElementException {  int offset=mCurrentOffset;  int length=advance();  if (str.length() != length) {    return false;  }  for (int i=0; i < str.length(); i++) {    if (str.charAt(i) != mData[offset]) {      return false;    }    offset++;  }  return true;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  setEnabled(false);  try {    if (fileChooser == null) {      JFileChooser.setDefaultLocale(controller.getLocaliser().getLocale());      fileChooser=new JFileChooser();      fileChooser.setLocale(controller.getLocaliser().getLocale());      fileChooser.setDialogTitle(controller.getLocaliser().getString("openWalletAction.tooltip"));      adjustedFont=FontSizer.INSTANCE.getAdjustedDefaultFont();      if (adjustedFont != null) {        setFileChooserFont(new Container[]{fileChooser});      }      fileChooser.applyComponentOrientation(ComponentOrientation.getOrientation(controller.getLocaliser().getLocale()));      if (controller.getModel() != null && this.bitcoinController.getModel().getActiveWalletFilename() != null) {        fileChooser.setCurrentDirectory(new File(this.bitcoinController.getModel().getActiveWalletFilename()));      }      fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);      fileChooser.setFileFilter(new WalletFileFilter(controller));    }    fileChooser.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    int returnVal=fileChooser.showOpenDialog(mainFrame);    mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    if (returnVal == JFileChooser.APPROVE_OPTION) {      File file=fileChooser.getSelectedFile();      if (file != null) {        if (!file.isDirectory()) {          String selectedWalletFilename=file.getAbsolutePath();          boolean walletIsAlreadyOpen=false;          if (controller != null && controller.getModel() != null) {            List<WalletData> perWalletDataModels=this.bitcoinController.getModel().getPerWalletModelDataList();            if (perWalletDataModels != null) {              Iterator<WalletData> iterator=perWalletDataModels.iterator();              while (iterator.hasNext()) {                WalletData perWalletModelData=iterator.next();                if (perWalletModelData != null && perWalletModelData.getWalletFilename() != null) {                  if (perWalletModelData.getWalletFilename().equals(selectedWalletFilename)) {                    walletIsAlreadyOpen=true;                    this.bitcoinController.getModel().setActiveWalletByFilename(selectedWalletFilename);                    controller.fireDataChangedUpdateNow();                    break;                  } else {                    if ((perWalletModelData.getWalletFilename() + "." + BackupManager.FILE_ENCRYPTED_WALLET_SUFFIX).equals(selectedWalletFilename)) {                      walletIsAlreadyOpen=true;                      this.bitcoinController.getModel().setActiveWalletByFilename(perWalletModelData.getWalletFilename());                      controller.fireDataChangedUpdateNow();                      break;                    }                  }                }              }            }          }          if (!walletIsAlreadyOpen) {            if (selectedWalletFilename.matches(BackupManager.REGEX_FOR_TIMESTAMP_AND_WALLET_AND_CIPHER_SUFFIX)) {              String decryptedWalletFileName=selectedWalletFilename.substring(0,selectedWalletFilename.length() - ("." + BackupManager.FILE_ENCRYPTED_WALLET_SUFFIX).length());              if ((new File(decryptedWalletFileName).exists())) {                selectedWalletFilename=decryptedWalletFileName;              } else {                CharSequence passwordToUse=getPasswordFromUser();                if (passwordToUse == null) {                  return;                }                try {                  byte[] walletBytes=BackupManager.INSTANCE.readFileAndDecrypt(new File(selectedWalletFilename),passwordToUse);                  FileHandler.writeFile(walletBytes,new File(decryptedWalletFileName));                  selectedWalletFilename=decryptedWalletFileName;                } catch (                IOException e1) {                  MessageManager.INSTANCE.addMessage(new Message(controller.getLocaliser().getString("openWalletSubmitAction.walletNotLoaded",new Object[]{selectedWalletFilename,e1.getMessage()})));                  return;                }catch (                KeyCrypterException e2) {                  MessageManager.INSTANCE.addMessage(new Message(controller.getLocaliser().getString("openWalletSubmitAction.walletNotLoaded",new Object[]{selectedWalletFilename,e2.getMessage()})));                  return;                }              }            }            Message openMessage=new Message(controller.getLocaliser().getString("multiBit.openingWallet",new Object[]{selectedWalletFilename}));            openMessage.setShowInStatusBar(false);            MessageManager.INSTANCE.addMessage(openMessage);            openWalletInBackground(selectedWalletFilename);          }        }      } else {        fileChooser=null;      }    } else {      fileChooser=null;    }  }  finally {    setEnabled(true);    mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  }}  }
class C{  public static void writeln(char c){  writeln(c,true);}  }
class C{  public SingularValueDecomposition svd(){  return new SingularValueDecomposition(this);}  }
class C{  public String typeName(){  return "class";}  }
class C{  public static String[] splitString(String string,char delimiter){  final int count=occurrenceCount(string,delimiter);  String[] segments=new String[count + 1];  int startIx=0;  for (int i=0; i < count; i++) {    int endIx=string.indexOf(delimiter,startIx);    segments[i]=string.substring(startIx,endIx);    startIx=endIx + 1;  }  segments[count]=string.substring(startIx);  return segments;}  }
class C{  @Override public void requestLocationSuccess(String locationName){  weatherUtils.requestWeather(locationName,this);  getLocation().realLocation=locationName;  DatabaseHelper.getInstance(this).insertLocation(getLocation());}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  private DiffPart decodeFullRevision(final int blockSize_L) throws UnsupportedEncodingException, DecodingException {  if (blockSize_L < 1) {    throw new DecodingException("Invalid value for blockSize_L: " + blockSize_L);  }  int l=r.read(blockSize_L);  ByteArrayOutputStream output=new ByteArrayOutputStream();  for (int i=0; i < l; i++) {    output.write(r.readByte());  }  DiffPart part=new DiffPart(DiffAction.FULL_REVISION_UNCOMPRESSED);  part.setText(output.toString(WIKIPEDIA_ENCODING));  return part;}  }
class C{  public AudioQuality(int samplingRate,int bitRate){  this.samplingRate=samplingRate;  this.bitRate=bitRate;}  }
class C{  public final Object invoke(Method invokedMethod,Object[] args) throws Throwable {  if (serviceThread == null) {    return handleDirectInvocation(invokedMethod,args);  } else   if (invokedMethod.getReturnType().equals(Void.TYPE)) {    handleVoidOnWorkerThread(invokedMethod,args);    return null;  } else   if (invokedMethod.getReturnType().equals(Observable.class)) {    return handleObservableOnWorkerThread(invokedMethod,args);  } else {    return handleDirectInvocation(invokedMethod,args);  }}  }
class C{  public <T>List<T> testOneThreadOneItem(T a){  Trace.trace(Item.SCHEDULER,"testOneThreadOneItem: in");  List<T> results=new ArrayList<T>(1);  Scheduler.scheduleMutator(new TestMutator<T>(results,a));  Scheduler.schedule();  Trace.trace(Item.SCHEDULER,"testOneThreadOneItem: out");  return results;}  }
class C{  public static boolean isEqual(byte[] digesta,byte[] digestb){  if (digesta == digestb)   return true;  if (digesta == null || digestb == null) {    return false;  }  if (digesta.length != digestb.length) {    return false;  }  int result=0;  for (int i=0; i < digesta.length; i++) {    result|=digesta[i] ^ digestb[i];  }  return result == 0;}  }
class C{  public boolean isCategory1(){switch (basicType) {case BT_LONG:case BT_DOUBLE:{      return false;    }}return true;}  }
class C{  public static void removeTestHook(DistributedSystem sys,org.apache.geode.distributed.internal.membership.MembershipTestHook hook){  getMembershipManager(sys).unregisterTestHook(hook);}  }
class C{  public JMenuItem createMenuItem(JMenu menu,String label,String mnemonic,String accessibleDescription,Action action){  JMenuItem mi=(JMenuItem)menu.add(new JMenuItem(getString(label)));  mi.setMnemonic(getMnemonic(mnemonic));  mi.getAccessibleContext().setAccessibleDescription(getString(accessibleDescription));  mi.addActionListener(action);  if (action == null) {    mi.setEnabled(false);  }  return mi;}  }
class C{  @Override protected Map<String,List<URI>> mapInitiatorsToComputeResource(ExportGroup exportGroup,Collection<URI> initiatorURIs){  Map<String,List<URI>> result=new HashMap<String,List<URI>>();  if (exportGroup.forCluster()) {    Cluster singleCluster=null;    if (exportGroup.getClusters() != null && exportGroup.getClusters().size() == 1) {      String clusterUriString=exportGroup.getClusters().iterator().next();      singleCluster=_dbClient.queryObject(Cluster.class,URI.create(clusterUriString));    }    for (    URI newExportMaskInitiator : initiatorURIs) {      Initiator initiator=_dbClient.queryObject(Initiator.class,newExportMaskInitiator);      String clusterName=getClusterName(singleCluster,initiator);      List<URI> initiatorSet=result.get(clusterName);      if (initiatorSet == null) {        initiatorSet=new ArrayList<URI>();        result.put(clusterName,initiatorSet);      }      initiatorSet.add(newExportMaskInitiator);      _log.info(String.format("cluster = %s, initiators to add to map: %s, ",clusterName,newExportMaskInitiator.toString()));    }  } else {    URI fillerHostURI=NullColumnValueGetter.getNullURI();    for (    URI newExportMaskInitiator : initiatorURIs) {      Initiator initiator=_dbClient.queryObject(Initiator.class,newExportMaskInitiator);      URI hostURI=initiator.getHost();      if (hostURI == null) {        hostURI=fillerHostURI;      }      List<URI> initiatorSet=result.get(hostURI.toString());      if (initiatorSet == null) {        initiatorSet=new ArrayList<URI>();        result.put(hostURI.toString(),initiatorSet);      }      initiatorSet.add(initiator.getId());      _log.info(String.format("host = %s, initiators to add to map: %d, ",hostURI,result.get(hostURI.toString()).size()));    }  }  return result;}  }
class C{  @Override public void initialize(final RPObject object){  super.initialize(object);  if (object.has("amount")) {    working=object.getInt("amount") > 0;  } else {    working=true;  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public void initialize(int singleGroupIrritants){  if (singleGroupIrritants == 0)   return;  int group=(singleGroupIrritants & GROUP_MASK) >> GROUP_SHIFT;  this.bits[group]=singleGroupIrritants & ~GROUP_MASK;}  }
class C{  public void updatedChannel(final StoredServerChannel channel){  log.info("Stored server channel {} was updated",channel.hashCode());  wallet.addOrUpdateExtension(this);}  }
class C{  public EgDemandDetails createDemandDetails(final EgDemandReason egDemandReason,final BigDecimal amtCollected,final BigDecimal dmdAmount){  return EgDemandDetails.fromReasonAndAmounts(dmdAmount,egDemandReason,amtCollected);}  }
class C{  private void completarPotigol(){  CompletionProvider provedor=new AutocompletarPotigol().criar();  AutoCompletion ac=new AutoCompletion(provedor);  ac.setAutoActivationDelay(300);  ac.setAutoActivationEnabled(true);  ac.setAutoCompleteSingleChoices(false);  ac.setParameterAssistanceEnabled(true);  ac.setShowDescWindow(true);  ac.install(lista.get(arquivos.getSelectedIndex()).getRSyntax());}  }
class C{  public Set<DominatorNode> siblingsOf(DominatorNode node){  Stack<DominatorNode> stack=new Stack<DominatorNode>();  for (  DominatorNode head : getHeads()) {    stack.push(head);  }  Set<DominatorNode> nodes=new HashSet<DominatorNode>();  boolean addSiblings=false;  while (!stack.isEmpty()) {    DominatorNode nextNode=stack.pop();    if (nextNode == node) {      addSiblings=true;      stack.clear();      DominatorNode parent=nextNode.getParent();      assert (parent != null);      stack.addAll(parent.getChildren());      stack.remove(nextNode);      nodes.addAll(stack);    } else {      for (      DominatorNode child : nextNode.getChildren()) {        stack.push(child);        if (addSiblings)         nodes.add(child);      }    }  }  return nodes;}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedConcurrentMap(Comparator<V> comparator){  return new ByValueSortingConcurrentSkipListMap<>(ByValueComparator.<K,V>create(comparator));}  }
class C{  public boolean reportOffline(boolean offline,Date dt){  if ("OFFLINE".equals(this.lastAlertType) && !offline) {    updateAlert(true,dt,"OFFLINE","OFFLINE",false);    return true;  } else   if (!"OFFLINE".equals(this.lastAlertType) && offline) {    updateAlert(false,dt,"OFFLINE","OFFLINE",false);    return true;  }  return false;}  }
class C{  public IdentifiedUser parseId(String id) throws AuthException, OrmException {  return parseIdOnBehalfOf(null,id);}  }
class C{  private void playVideo(){  isStarting=true;  extractUrlAndPlay();}  }
class C{  private String parseRegionFromZone(String name){  String[] split=name.split("_");  if (split.length > 1) {    return RegionNameSubstitutionHelper.get().replaceRegionName(split[1]);  }  return RegionNameSubstitutionHelper.get().getDefaultRegion();}  }
class C{  public static Text valueOf(int i,int radix){  TextBuilder tb=new TextBuilder();  return tb.append(i,radix).toText();}  }
class C{  public boolean isConversionSupported(AudioFormat targetFormat,AudioFormat sourceFormat){  targetFormat=replaceNotSpecified(sourceFormat,targetFormat);  boolean res=AudioFormats.matches(sourceFormat,targetFormat) || (doMatch(targetFormat.getFrameRate(),sourceFormat.getFrameRate()) && doMatch(targetFormat.getSampleRate(),sourceFormat.getSampleRate()) && getConversionType(getFormatType(sourceFormat),sourceFormat.getChannels(),getFormatType(targetFormat),targetFormat.getChannels()) != CONVERT_NOT_POSSIBLE);  if (TDebug.TraceAudioConverter) {    TDebug.out(">PCM2PCM: isConversionSupported(AudioFormat, AudioFormat):");    TDebug.out("checking if conversion possible");    TDebug.out("from: " + sourceFormat);    TDebug.out("to  : " + targetFormat);    TDebug.out("< result : " + res);  }  return res;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  @Deprecated public ConcurrentUpdateSolrClient(String solrServerUrl,HttpClient client,int queueSize,int threadCount,ExecutorService es,boolean streamDeletes){  this.internalHttpClient=(client == null);  this.client=new HttpSolrClient.Builder(solrServerUrl).withHttpClient(client).build();  this.client.setFollowRedirects(false);  queue=new LinkedBlockingQueue<>(queueSize);  this.threadCount=threadCount;  runners=new LinkedList<>();  this.streamDeletes=streamDeletes;  if (es != null) {    scheduler=es;    shutdownExecutor=false;  } else {    scheduler=ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory("concurrentUpdateScheduler"));    shutdownExecutor=true;  }}  }
class C{  public LinkedList<Patch> patch_make(LinkedList<Diff> diffs){  if (diffs == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  String text1=diff_text1(diffs);  return patch_make(text1,diffs);}  }
class C{  public SafeAsyncTask(Executor executor){  this.executor=executor;}  }
class C{  private void initH2Console(ServletContext servletContext){  log.debug("Initialize H2 console");  ServletRegistration.Dynamic h2ConsoleServlet=servletContext.addServlet("H2Console",new org.h2.server.web.WebServlet());  h2ConsoleServlet.addMapping("/console/*");  h2ConsoleServlet.setInitParameter("-properties","src/main/resources");  h2ConsoleServlet.setLoadOnStartup(1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.142 -0500",hash_original_method="D9D80F00CDC581AABA98D597BEF7F07B",hash_generated_method="D545C6CD7078B9627401CC616CC84A69") public int article() throws IOException {  return sendCommand(NNTPCommand.ARTICLE);}  }
class C{  private void updateUnManagedVolumeInfo(LogicalUnit logicalUnit,StorageSystem system,StoragePool pool,UnManagedVolume unManagedVolume,DbClient dbClient){  Map<String,StringSet> unManagedVolumeInformation=new HashMap<String,StringSet>();  Map<String,String> unManagedVolumeCharacteristics=new HashMap<String,String>();  StringSet systemTypes=new StringSet();  systemTypes.add(system.getSystemType());  StringSet provCapacity=new StringSet();  provCapacity.add(String.valueOf(Long.parseLong(logicalUnit.getCapacityInKB()) * 1024));  unManagedVolumeInformation.put(SupportedVolumeInformation.PROVISIONED_CAPACITY.toString(),provCapacity);  StringSet allocatedCapacity=new StringSet();  allocatedCapacity.add(String.valueOf(Long.parseLong(logicalUnit.getCapacityInKB()) * 1024));  unManagedVolumeInformation.put(SupportedVolumeInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  unManagedVolumeInformation.put(SupportedVolumeInformation.SYSTEM_TYPE.toString(),systemTypes);  StringSet deviceLabel=new StringSet();  String luLabel=getLabelFromLogicalUnit(logicalUnit);  if (null != luLabel) {    deviceLabel.add(luLabel);  }  unManagedVolumeInformation.put(SupportedVolumeInformation.DEVICE_LABEL.toString(),deviceLabel);  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_INGESTABLE.toString(),Boolean.TRUE.toString());  if (logicalUnit.getPath() == 1) {    unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),Boolean.TRUE.toString());  } else {    unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),Boolean.FALSE.toString());  }  if (logicalUnit.getDpType().equals(HDSConstants.DPTYPE_THIN)) {    unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString(),Boolean.TRUE.toString());  } else   if (logicalUnit.getDpType().equals(HDSConstants.DPTYPE_THICK)) {    unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString(),Boolean.FALSE.toString());  } else {    log.info("Provisioning type not found for volume: {}",logicalUnit.getObjectID());  }  String raidType=logicalUnit.getRaidType();  if (null != raidType) {    StringSet raidLevels=new StringSet();    raidLevels.add(raidType);    unManagedVolumeInformation.put(SupportedVolumeInformation.RAID_LEVEL.toString(),raidLevels);  }  StringSet pools=new StringSet();  pools.add(pool.getId().toString());  unManagedVolumeInformation.put(SupportedVolumeInformation.STORAGE_POOL.toString(),pools);  unManagedVolume.setWwn(HDSUtils.generateHitachiWWN(logicalUnit.getObjectID(),String.valueOf(logicalUnit.getDevNum())));  StringSet nativeId=new StringSet();  nativeId.add(String.valueOf(logicalUnit.getDevNum()));  unManagedVolumeInformation.put(SupportedVolumeInformation.NATIVE_ID.toString(),nativeId);  String luTieringPolicy=fetchLogicalUnitTieringPolicy(system,logicalUnit,dbClient);  if (null != luTieringPolicy) {    StringSet volumeTieringPolicy=new StringSet();    volumeTieringPolicy.add(luTieringPolicy);    unManagedVolumeInformation.put(SupportedVolumeInformation.AUTO_TIERING_POLICIES.toString(),volumeTieringPolicy);    unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_AUTO_TIERING_ENABLED.toString(),Boolean.TRUE.toString());  } else {    unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_AUTO_TIERING_ENABLED.toString(),Boolean.FALSE.toString());  }  StringSet driveTypes=pool.getSupportedDriveTypes();  if (null != driveTypes) {    unManagedVolumeInformation.put(SupportedVolumeInformation.DISK_TECHNOLOGY.toString(),driveTypes);  }  StringSet matchedVPools=DiscoveryUtils.getMatchedVirtualPoolsForPool(dbClient,pool.getId(),unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.name()).toString());  log.debug("Matched Pools : {}",Joiner.on("\t").join(matchedVPools));  if (null == matchedVPools || matchedVPools.isEmpty()) {    unManagedVolume.getSupportedVpoolUris().clear();  } else {    unManagedVolume.getSupportedVpoolUris().replace(matchedVPools);    log.info("Replaced Pools : {}",Joiner.on("\t").join(unManagedVolume.getSupportedVpoolUris()));  }  unManagedVolume.addVolumeInformation(unManagedVolumeInformation);  if (unManagedVolume.getVolumeCharacterstics() == null) {    unManagedVolume.setVolumeCharacterstics(new StringMap());  }  unManagedVolume.getVolumeCharacterstics().replace(unManagedVolumeCharacteristics);}  }
class C{  public void viewBox(float x,float y,float width,float height) throws ParseException {}  }
class C{  @DSSafe(DSCat.SAFE_LIST) private byte skipTagBackward(){  int initialCharIndex=charIndex;  while (charIndex > 0) {    lastChar=text.charAt(--charIndex);    if (lastChar == '<') {      return Character.DIRECTIONALITY_WHITESPACE;    }    if (lastChar == '>') {      break;    }    if (lastChar == '"' || lastChar == '\'') {      char quote=lastChar;      while (charIndex > 0 && (lastChar=text.charAt(--charIndex)) != quote) {      }    }  }  charIndex=initialCharIndex;  lastChar='>';  return Character.DIRECTIONALITY_OTHER_NEUTRALS;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public int[] executeBatch() throws SQLException {  try {    int id=getNextId(TraceObject.PREPARED_STATEMENT);    debugCodeCall("executeBatch");    if (batchParameters == null) {      batchParameters=New.arrayList();    }    batchIdentities=New.arrayList();    int size=batchParameters.size();    int[] result=new int[size];    boolean error=false;    SQLException next=null;    checkClosedForWrite();    try {      for (int i=0; i < size; i++) {        Value[] set=batchParameters.get(i);        ArrayList<? extends ParameterInterface> parameters=command.getParameters();        for (int j=0; j < set.length; j++) {          Value value=set[j];          ParameterInterface param=parameters.get(j);          param.setValue(value,false);        }        try {          result[i]=executeUpdateInternal();          ResultSet rs=conn.getGeneratedKeys(this,id);          while (rs.next()) {            batchIdentities.add(rs.getObject(1));          }        } catch (        Exception re) {          SQLException e=logAndConvert(re);          if (next == null) {            next=e;          } else {            e.setNextException(next);            next=e;          }          result[i]=Statement.EXECUTE_FAILED;          error=true;        }      }      batchParameters=null;      if (error) {        JdbcBatchUpdateException e=new JdbcBatchUpdateException(next,result);        throw e;      }      return result;    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public PeriodType withHoursRemoved(){  return withFieldRemoved(4,"NoHours");}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  if (getControllerNodeIPLookupMap() != null && (getControllerNodeIPLookupMap().size() > 0)) {    Iterator<String> itr=getControllerNodeIPLookupMap().keySet().iterator();    while (itr.hasNext()) {      String key=itr.next().toString();      DualInetAddress record=getControllerNodeIPLookupMap().get(key);      if (StringUtils.isNotBlank(key)) {        sb.append(key).append("-").append(record.toString()).append("\n");      }    }  }  return sb.toString();}  }
class C{  public boolean isAdjustXLegendEnabled(){  return mAdjustXLegend;}  }
class C{  protected static boolean skipFile(@SuppressWarnings("unused") @NotNull Path path,@NotNull Long modificationTime,Long lastModificationTime) throws IOException {  return (!(lastModificationTime == null || modificationTime > lastModificationTime));}  }
class C{  public PrepareClickedForDrag(Collection<DefaultNode> nodes,GraphPanel component){  this.nodes=nodes;  this.component=component;}  }
class C{  public static byte[] encode(int[] freq,byte[] data){  scaleFrequencies(freq,1 << SHIFT);  int[] cumulativeFreq=generateCumulativeFrequencies(freq);  ByteBuffer buff=ByteBuffer.allocate(data.length * 2);  buff=encode(data,freq,cumulativeFreq,buff);  return Arrays.copyOfRange(buff.array(),buff.arrayOffset() + buff.position(),buff.arrayOffset() + buff.limit());}  }
class C{  public static String eol(){  return eol;}  }
class C{  public ByteArrayInputStream(byte buf[]){  this.buf=buf;  this.pos=0;  this.count=buf.length;}  }
class C{  private boolean analyzeTraces(List<ExecutionResult> results,Map<String,Integer> callCount){  boolean hasTimeoutOrTestException=false;  for (  ExecutionResult result : results) {    if (result.hasTimeout() || result.hasTestException()) {      hasTimeoutOrTestException=true;    }    for (    Integer line : result.getTrace().getCoveredLines()) {      if (linesCoverageMap.containsKey(line)) {        if (!lines.contains(line) || removedLines.contains(line))         continue;        result.test.addCoveredGoal(linesCoverageMap.get(line));        if (Properties.TEST_ARCHIVE) {          toRemoveLines.add(line);          TestsArchive.instance.putTest(this,linesCoverageMap.get(line),result);        }      }    }  }  return hasTimeoutOrTestException;}  }
class C{  public void addDispatchPolicy(EjbDef ejb,String policy){  Element ejbElement=getEjb(ejb.getName());  if (ejbElement == null) {    throw new IllegalArgumentException("No ejb named " + ejb.getName() + " found.");  } else {    ejbElement.addContent(createNestedText(getDescriptorType().getTagByName(WeblogicEjbJarXmlTag.DISPATCH_POLICY),policy));  }}  }
class C{  public void addProtocols(final Set<String> protocols){  if (null == _protocols) {    setProtocols(new StringSet());  }  if (!protocols.isEmpty()) {    _protocols.addAll(protocols);  }}  }
class C{  @SuppressWarnings("all") public void reset(JComponent component,Region region,SynthStyle style,int state){  this.component=component;  this.region=region;  this.style=style;  this.state=state;}  }
class C{  public void removeOverlay(Overlay overlay){  ParamChecks.nullNotPermitted(overlay,"overlay");  boolean removed=this.overlays.remove(overlay);  if (removed) {    overlay.removeChangeListener(this);    repaint();  }}  }
class C{  public void testCaseInsensitive() throws Exception {  Reader reader=new StringReader("L'avion");  TokenStream stream=new MockTokenizer(MockTokenizer.WHITESPACE,false);  ((Tokenizer)stream).setReader(reader);  stream=tokenFilterFactory("Elision","articles","frenchArticles.txt","ignoreCase","true").create(stream);  assertTokenStreamContents(stream,new String[]{"avion"});}  }
class C{  public String format(final LogEvent event){  final StringBuffer sb=new StringBuffer(400);  sb.append("<log-entry>");  sb.append(EOL);  if (m_printTime) {    sb.append("  <time>");    if (m_printNumericTime) {      sb.append(event.getTime());    } else {      sb.append(new Date(event.getTime()));    }    sb.append("</time>");    sb.append(EOL);  }  if (m_printRelativeTime) {    sb.append("  <relative-time>");    sb.append(event.getRelativeTime());    sb.append("</relative-time>");    sb.append(EOL);  }  if (m_printPriority) {    sb.append("  <priority>");    sb.append(event.getPriority().getName());    sb.append("</priority>");    sb.append(EOL);  }  if (m_printCategory) {    sb.append("  <category>");    sb.append(event.getCategory());    sb.append("</category>");    sb.append(EOL);  }  if (m_printContext && null != event.getContextMap()) {    sb.append("  <context-map>");    sb.append(event.getContextMap());    sb.append("</context-map>");    sb.append(EOL);  }  if (m_printMessage && null != event.getMessage()) {    sb.append("  <message><![CDATA[");    sb.append(event.getMessage());    sb.append("]]></message>");    sb.append(EOL);  }  if (m_printException && null != event.getThrowable()) {    sb.append("  <exception><![CDATA[");    sb.append("]]></exception>");    sb.append(EOL);  }  sb.append("</log-entry>");  sb.append(EOL);  return sb.toString();}  }
class C{  public GridTcpRestNioListener(IgniteLogger log,GridTcpRestProtocol proto,GridRestProtocolHandler hnd,GridKernalContext ctx){  memcachedLsnr=new GridTcpMemcachedNioListener(log,hnd,ctx);  this.log=log;  this.proto=proto;  this.hnd=hnd;}  }
class C{  @Override public boolean isEnabled(){  return super.isEnabled();}  }
class C{  public static MockGyroscope gyroscope(){  return new MockGyroscope();}  }
class C{  @Override public void emitList(ArrayList<HashMap<K,Integer>> tlist){  list.emit(tlist);}  }
class C{  public void addHeader(String header,String value){  clientHeaderMap.put(header,value);}  }
class C{  private String createConfigPath(String solrClusterId,String configName){  Validator.isTrue((solrClusterId != null) && !solrClusterId.isEmpty(),"solrClusterId cannot be null or empty");  Validator.isTrue((configName != null) && !configName.isEmpty(),"configName cannot be null or empty");  return String.format(PATH_SOLR_CLUSTERS_CONFIGS,solrClusterId,configName);}  }
class C{  public TechnologyDelegate(){}  }
class C{  public SmsPdu(SmsUdhElement[] udhElements,byte[] ud,int udLength,SmsDcs dcs){  setUserDataHeaders(udhElements);  setUserData(ud,udLength,dcs);}  }
class C{  public void transform(Source xmlSource,Result outputTarget,boolean shouldRelease) throws TransformerException {synchronized (m_reentryGuard) {    SerializationHandler xoh=createSerializationHandler(outputTarget);    this.setSerializationHandler(xoh);    m_outputTarget=outputTarget;    transform(xmlSource,shouldRelease);  }}  }
class C{  @SuppressForbidden(reason="Legitimate log4j access") static boolean muteConsole(){  try {    if (!isLog4jActive()) {      logNotSupported("Could not mute logging to console.");      return false;    }    org.apache.log4j.Logger rootLogger=LogManager.getRootLogger();    Enumeration appenders=rootLogger.getAllAppenders();    while (appenders.hasMoreElements()) {      Appender appender=(Appender)appenders.nextElement();      if (appender instanceof ConsoleAppender) {        log.info("Property solr.log.muteconsole given. Muting ConsoleAppender named " + appender.getName());        rootLogger.removeAppender(appender);      }    }    return true;  } catch (  Exception e) {    logNotSupported("Could not mute logging to console.");    return false;  }}  }
class C{  public void collapse(Component body){  for (  Component cc : this) {    AccordionContent c=(AccordionContent)cc;    if (body == c.body) {      c.openClose(false);    }  }}  }
class C{  public static CopyObjectResult parseCopyObjectResult(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    CopyObjectResult result=new CopyObjectResult();    result.setLastModified(DateUtil.parseIso8601Date(root.getChildText("LastModified")));    result.setEtag(trimQuotes(root.getChildText("ETag")));    return result;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  @Override public void write(List<byte[]> valueList) throws IOException {  if (isFirstTime) {    init();    isFirstTime=false;  }  for (  byte[] value : valueList) {    oneDictionaryChunkList.add(ByteBuffer.wrap(value));    totalRecordCount++;  }}  }
class C{  static int darker(int color,float factor){  return Color.argb(Color.alpha(color),Math.max((int)(Color.red(color) * factor),0),Math.max((int)(Color.green(color) * factor),0),Math.max((int)(Color.blue(color) * factor),0));}  }
class C{  private XYDataset createDataset1(){  XYSeries series1=new XYSeries("Series 1");  series1.add(10.0,12353.3);  series1.add(20.0,13734.4);  series1.add(30.0,14525.3);  series1.add(40.0,13984.3);  series1.add(50.0,12999.4);  series1.add(60.0,14274.3);  series1.add(70.0,15943.5);  series1.add(80.0,14845.3);  series1.add(90.0,14645.4);  series1.add(100.0,16234.6);  series1.add(110.0,17232.3);  series1.add(120.0,14232.2);  series1.add(130.0,13102.2);  series1.add(140.0,14230.2);  series1.add(150.0,11235.2);  XYSeries series2=new XYSeries("Series 2");  series2.add(10.0,15000.3);  series2.add(20.0,11000.4);  series2.add(30.0,17000.3);  series2.add(40.0,15000.3);  series2.add(50.0,14000.4);  series2.add(60.0,12000.3);  series2.add(70.0,11000.5);  series2.add(80.0,12000.3);  series2.add(90.0,13000.4);  series2.add(100.0,12000.6);  series2.add(110.0,13000.3);  series2.add(120.0,17000.2);  series2.add(130.0,18000.2);  series2.add(140.0,16000.2);  series2.add(150.0,17000.2);  XYSeriesCollection collection=new XYSeriesCollection();  collection.addSeries(series1);  collection.addSeries(series2);  return collection;}  }
class C{  public static boolean isNonterminal(int id){  return id < 0;}  }
class C{  public ClassMemberValue(ConstPool cp){  super('c',cp);  setValue("java.lang.Class");}  }
class C{  public static Executor createTaskDistributor(){  return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,"uil-pool-d-"));}  }
class C{  @RequestMapping(value="/templates",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Transactional @JsonView(Template.WithText.class) public ResponseEntity<Template> create(@Valid @RequestBody Template template) throws URISyntaxException, JsonProcessingException {  log.debug("REST request to save Template : {}",template);  if (template.getId() != null) {    throw new MustNotHaveIdException();  }  Operation operation=new Operation();  operation.setOperationType("POST");  operation.setOperationUrl("/api/templates");  operation.setOperationBody(mapper.writerWithView(Template.WithText.class).writeValueAsString(template));  template=templateRepository.save(template);  operation.setRollbackType("DELETE");  operation.setRollbackUrl("/api/templates/" + template.getId().toString());  operationRepository.save(operation);  return new ResponseEntity<>(template,HttpStatus.OK);}  }
class C{  public GPUImageSmoothToonFilter(){  blurFilter=new GPUImageGaussianBlurFilter();  addFilter(blurFilter);  toonFilter=new GPUImageToonFilter();  addFilter(toonFilter);  getFilters().add(blurFilter);  setBlurSize(0.5f);  setThreshold(0.2f);  setQuantizationLevels(10.0f);}  }
class C{  private boolean readyToConnect(){  long now=System.currentTimeMillis();  long lastExchangeMillis=mStore.getLong(LAST_EXCHANGE_TIME_KEY,-1);  boolean timeSinceLastOK;  if (lastExchangeMillis == -1) {    timeSinceLastOK=true;  } else   if (now - lastExchangeMillis < TIME_BETWEEN_EXCHANGES_MILLIS) {    timeSinceLastOK=false;  } else {    timeSinceLastOK=true;  }  Log.v(TAG,"Ready to connect? " + (timeSinceLastOK && !getConnecting()));  Log.v(TAG,"Connecting: " + getConnecting());  Log.v(TAG,"timeSinceLastOK: " + timeSinceLastOK);  return timeSinceLastOK && !getConnecting();}  }
class C{  private void checkShutdownAccess(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkPermission(shutdownPerm);    final ReentrantLock mainLock=this.mainLock;    mainLock.lock();    try {      for (      Worker w : workers)       security.checkAccess(w.thread);    }  finally {      mainLock.unlock();    }  }}  }
