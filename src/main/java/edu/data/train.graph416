class C{  public CompositeReactPackage(ReactPackage arg1,ReactPackage arg2,ReactPackage... args){  mChildReactPackages.add(arg1);  mChildReactPackages.add(arg2);  for (  ReactPackage reactPackage : args) {    mChildReactPackages.add(reactPackage);  }}  }
class C{  public int readAllPageReferences(final boolean ignoreRecursion,final PdfObject pdfObject,final Map<String,Integer> rotations,final Map<String,String> parents,int tempPageCount,final AcroRenderer formRenderer,final PdfResources res,final int insetW,final int insetH){  final String currentPageOffset=pdfObject.getObjectRefAsString();  final boolean debug=false;  int rotation=0;  int type=pdfObject.getParameterConstant(PdfDictionary.Type);  if (debug) {    System.out.println("currentPageOffset=" + currentPageOffset + " type="+ type+ ' '+ PdfDictionary.showAsConstant(type));  }  if (type == PdfDictionary.Unknown) {    if (pdfObject.getKeyArray(PdfDictionary.Kids) != null) {      type=PdfDictionary.Pages;    } else {      type=PdfDictionary.Page;    }  }  int rawRotation=pdfObject.getInt(PdfDictionary.Rotate);  String parent=pdfObject.getStringKey(PdfDictionary.Parent);  if (rawRotation == -1) {    while (parent != null && rawRotation == -1) {      if (parent != null) {        final Integer savedRotation=rotations.get(parent);        if (savedRotation != null) {          rawRotation=savedRotation;        }      }      if (rawRotation == -1) {        parent=parents.get(parent);      }    }    if (rawRotation != -1) {      rotations.put(currentPageOffset,rawRotation);      parents.put(currentPageOffset,parent);    }  } else {    rotations.put(currentPageOffset,rawRotation);    parents.put(currentPageOffset,parent);  }  if (rawRotation != -1) {    rotation=rawRotation;  }  final PdfPageData pageData=this.pageData;  pageData.setPageRotation(rotation,tempPageCount);  float[] mediaBox=pdfObject.getFloatArray(PdfDictionary.MediaBox);  float[] cropBox=pdfObject.getFloatArray(PdfDictionary.CropBox);  if (mediaBox == null) {    mediaBox=defaultMediaSize;  }  if (cropBox == null) {    cropBox=defaultCropSize;  }  if (mediaBox != null) {    pageData.setMediaBox(mediaBox);  }  if (cropBox != null) {    pageData.setCropBox(cropBox);  }  if (type == PdfDictionary.Pages) {    if (pdfObject.getDictionary(PdfDictionary.Resources) != null) {      res.setPdfObject(PdfResources.GlobalResources,pdfObject.getDictionary(PdfDictionary.Resources));    }    final byte[][] kidList=pdfObject.getKeyArray(PdfDictionary.Kids);    int kidCount=0;    if (kidList != null) {      kidCount=kidList.length;    }    if (debug) {      System.out.println("PAGES---------------------currentPageOffset=" + currentPageOffset + " kidCount="+ kidCount);    }    if (kidCount > 0) {      if (debug) {        System.out.println("KIDS---------------------currentPageOffset=" + currentPageOffset);      }      PdfObject nextObject;      for (int ii=0; ii < kidCount; ii++) {        nextObject=new PageObject(new String(kidList[ii]));        nextObject.ignoreRecursion(ignoreRecursion);        nextObject.ignoreStream(true);        final float[] lastMediaBox=defaultMediaSize;        defaultMediaSize=mediaBox;        final float[] lastCropBox=defaultCropSize;        defaultCropSize=cropBox;        currentPdfFile.readObject(nextObject);        tempPageCount=readAllPageReferences(ignoreRecursion,nextObject,rotations,parents,tempPageCount,formRenderer,res,insetW,insetH);        defaultMediaSize=lastMediaBox;        defaultCropSize=lastCropBox;      }    }  } else   if (type == PdfDictionary.Page) {    if (debug) {      System.out.println("PAGE---------------------currentPageOffset=" + currentPageOffset);    }    currentPdfFile.setLookup(currentPageOffset,tempPageCount);    pageData.checkSizeSet(tempPageCount);    if (formRenderer != null) {      byte[][] annotList=pdfObject.getKeyArray(PdfDictionary.Annots);      if (annotList != null && annotList.length == 1 && annotList[0] == null) {        annotList=null;      }      if (annotList != null) {        formRenderer.resetAnnotData(insetW,insetH,this.pageData,tempPageCount,currentPdfFile,annotList);      }    }    tempPageCount++;  }  return tempPageCount;}  }
class C{  @SuppressWarnings("unchecked") @Override public <T>T deserialize(byte[] data,Class<T> clazz){  return (T)new String(data);}  }
class C{  public static boolean isPortAvailable(int port){  if (port < 1 || port > 65535) {    throw new IllegalArgumentException("Invalid start port: " + port);  }  ServerSocket ss=null;  DatagramSocket ds=null;  try {    ss=new ServerSocket(port);    ss.setReuseAddress(true);    ds=new DatagramSocket(port);    ds.setReuseAddress(true);    return true;  } catch (  IOException e) {  } finally {    if (ds != null) {      ds.close();    }    if (ss != null) {      try {        ss.close();      } catch (      IOException e) {      }    }  }  return false;}  }
class C{  public void paintArrowButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void testOsPingToLocalHost() throws Exception {  HostAddressService has=new HostAddressService(true);  has.setTimeout(3000);  HostAddress address=HostAddressService.getByName(InetAddress.getLocalHost().getHostName());  PingResponse response=has.isReachableByMethod(HostAddressService.PING,address);  assertTrue("Can ping localhost",response.isReachable());}  }
class C{  public boolean isSource(){  return isSource;}  }
class C{  static public PVector sub(PVector v1,PVector v2,PVector target){  if (target == null) {    target=new PVector(v1.x - v2.x,v1.y - v2.y,v1.z - v2.z);  } else {    target.set(v1.x - v2.x,v1.y - v2.y,v1.z - v2.z);  }  return target;}  }
class C{  public FactLine createLine(DocLine docLine,MAccount account,int C_Currency_ID,BigDecimal Amt){  if (Amt.signum() < 0)   return createLine(docLine,account,C_Currency_ID,null,Amt.abs()); else   return createLine(docLine,account,C_Currency_ID,Amt,null);}  }
class C{  public IntColumn(int nrows,int capacity,int defaultValue){  super(int.class,new Integer(defaultValue));  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_values=new int[capacity];  Arrays.fill(m_values,defaultValue);  m_size=nrows;}  }
class C{  static <K,V>RegularImmutableMap<K,V> fromEntryArray(int n,Entry<K,V>[] entryArray){  checkPositionIndex(n,entryArray.length);  Entry<K,V>[] entries;  if (n == entryArray.length) {    entries=entryArray;  } else {    entries=createEntryArray(n);  }  int tableSize=Hashing.closedTableSize(n,MAX_LOAD_FACTOR);  ImmutableMapEntry<K,V>[] table=createEntryArray(tableSize);  int mask=tableSize - 1;  for (int entryIndex=0; entryIndex < n; entryIndex++) {    Entry<K,V> entry=entryArray[entryIndex];    K key=entry.getKey();    V value=entry.getValue();    checkEntryNotNull(key,value);    int tableIndex=Hashing.smear(key.hashCode()) & mask;    @Nullable ImmutableMapEntry<K,V> existing=table[tableIndex];    ImmutableMapEntry<K,V> newEntry;    if (existing == null) {      boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();      newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);    } else {      newEntry=new NonTerminalImmutableMapEntry<K,V>(key,value,existing);    }    table[tableIndex]=newEntry;    entries[entryIndex]=newEntry;    checkNoConflictInKeyBucket(key,newEntry,existing);  }  return new RegularImmutableMap<K,V>(entries,table,mask);}  }
class C{  public Saltelli(){  super();  sobol=new Sobol();}  }
class C{  private static void _trustAllHostnames(){  if (_hostnameVerifier == null) {    _hostnameVerifier=new FakeHostnameVerifier();  }  HttpsURLConnection.setDefaultHostnameVerifier(_hostnameVerifier);}  }
class C{  public static ChannelData decode(byte binMessage[],char offset) throws StunException {  char msgLen=0;  char channelNumber=0;  ChannelData channelData=null;  byte data[]=null;  if ((binMessage.length - offset) < HEADER_LENGTH) {    throw new StunException(StunException.ILLEGAL_ARGUMENT,"Size too short");  }  channelNumber=(char)((binMessage[offset++] << 8) | (binMessage[offset++] & 0xFF));  if (!validateChannelNumber(channelNumber)) {    throw new StunException(StunException.ILLEGAL_ARGUMENT,"Channel number invalid");  }  msgLen=(char)((binMessage[offset++] << 8) | (binMessage[offset++] & 0xFF));  if (msgLen > (binMessage.length - offset)) {    throw new StunException(StunException.ILLEGAL_ARGUMENT,"Size mismatch");  }  data=new byte[msgLen];  System.arraycopy(binMessage,offset,data,0,msgLen);  channelData=new ChannelData();  channelData.setData(data);  channelData.setChannelNumber(channelNumber);  return channelData;}  }
class C{  public StreamMetadata build(){  if (maxCount != null) {    checkArgument(isPositive(maxCount),"maxCount should be positive");  }  if (maxAge != null) {    checkArgument(!Duration.ZERO.equals(maxAge),"maxAge cannot be zero");  }  if (truncateBefore != null) {    checkArgument(!isNegative(truncateBefore),"truncateBefore should not be negative");  }  if (cacheControl != null) {    checkArgument(!Duration.ZERO.equals(cacheControl),"cacheControl cannot be zero");  }  return new StreamMetadata(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.403 -0500",hash_original_method="EB9857D021AE5F251F44C2032AC6D5E3",hash_generated_method="C6064836CD5AA019E7038ECC6C074414") public SIPHeader parse() throws ParseException {  dbg_enter("parse");  try {    headerName(TokenTypes.AUTHORIZATION);    Authorization auth=new Authorization();    super.parse(auth);    return auth;  }  finally {    dbg_leave("parse");  }}  }
class C{  public BreitWignerMeanSquare(double mean,double gamma,double cut,RandomEngine randomGenerator){  super(mean,gamma,cut,randomGenerator);  this.uniform=new Uniform(randomGenerator);}  }
class C{  public JSONArray put(int index,Map<String,Object> value) throws JSONException {  this.put(index,new JSONObject(value));  return this;}  }
class C{  public Set adviseControllers(){  Set result=this.cachedControllerAdvise;  if (result == null) {synchronized (this.cacheLock) {      result=this.cachedControllerAdvise;      if (result == null) {        result=Collections.unmodifiableSet(adviseFilter(CONTROLLER_FILTER));        this.cachedControllerAdvise=result;      }    }  }  return result;}  }
class C{  public int radix(){  return R;}  }
class C{  @Override public boolean isValid(byte[] buffer){  return packetValid(buffer,0);}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  @Override public boolean isEmpty(){  return top == null;}  }
class C{  public void sendMessage(AbstractWebsocketMessage msg){synchronized (messagesToSend) {    if (!isClosing) {      if (msg instanceof CloseWebsocketMessage) {        isClosing=true;      }      if (isSendingMessage) {        if (messagesToSend.size() >= 1000 || messagesToSendLength >= 1000000) {          isClosing=true;          CloseReason cr=new CloseReason(CloseCodes.VIOLATED_POLICY,"Send Buffer exceeded");          try {            session.close(cr);          } catch (          IOException e) {          }        } else {          if (msg instanceof StringWebsocketMessage && !messagesToSend.isEmpty() && messagesToSend.getLast() instanceof StringWebsocketMessage) {            StringWebsocketMessage ms=(StringWebsocketMessage)messagesToSend.removeLast();            messagesToSendLength-=calculateMessageLength(ms);            String concatenated=ms.getString() + ";" + ((StringWebsocketMessage)msg).getString();            msg=new StringWebsocketMessage(concatenated);          }          messagesToSend.add(msg);          messagesToSendLength+=calculateMessageLength(msg);        }      } else {        isSendingMessage=true;        internalSendMessageAsync(msg);      }    }  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  String inputHeader2=args[1];  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0) {            z1=1;          }          if (z2 != 0) {            z2=1;          }          outputFile.setValue(row,col,z1 * z2);        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void disconnectionNotification(String eventName,Object source){  m_listenee=null;}  }
class C{  public final void replaceAll(Object from,Object to){  replaceAll(from,to,false);}  }
class C{  public double var(){  return total / (n - 1);}  }
class C{  private void cancelCurrentSound(Clip clip){  Clip lastClip=null;synchronized (audioLock) {    if (clip == null || clip == clipPlaying) {      lastClip=clipPlaying;      clipPlaying=null;    }  }  if (lastClip != null) {    lastClip.removeLineListener(this);    lastClip.close();  }}  }
class C{  private Object writeReplace(){  return new Ser(Ser.LOCAL_TIME_TYPE,this);}  }
class C{  public static StringBuffer replaceOne(StringBuffer original,String search,String replace){  if (original.toString().indexOf(search) >= 0) {    original.replace(original.toString().indexOf(search),original.toString().indexOf(search) + search.length(),replace);  }  return original;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  PrintWriter out=null;  try {    String returnString=processPostRequest(request);    response.setContentType("application/json");    out=response.getWriter();    out.println(returnString);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:29.664 -0400",hash_original_method="F56B7C8CA328FB1ED7ED79921B024825",hash_generated_method="860C1816E42A5EB18B9FDE5948E4A5A8") public void onSupportContentChanged(){}  }
class C{  public int skipDomains(int numberOfDomains){  return skipElements(numberOfDomains,RDE_DOMAIN_URI,"domain");}  }
class C{  public Boolean isRTPRTSPTCP(){  return rtprtsptcp;}  }
class C{  private static <T>void assertCollectionEqualsNoOrder(Collection<T> expected,Collection<T> actual){  String msg=String.format("expected=%s, actual=%s",expected,actual);  assertEquals(msg,expected.size(),actual.size());  for (  T e : expected) {    if (!actual.contains(e)) {      msg=String.format("Expected element %s not found in " + "actual. expected=%s, actual=%s",e,expected,actual);      fail(msg);    }  }}  }
class C{  public boolean isCached(){  return cache != null;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=activity.getCameraManager().buildLuminanceSource(rotatedData,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,fakeR.getId("id","decode_succeeded"),rawResult);      Bundle bundle=new Bundle();      Bitmap grayscaleBitmap=toBitmap(source,source.renderCroppedGreyscaleBitmap());      bundle.putParcelable(DecodeThread.BARCODE_BITMAP,grayscaleBitmap);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,fakeR.getId("id","decode_failed"));      message.sendToTarget();    }  }}  }
class C{  public static BaseComponent compress(@NonNull BaseComponent[] components){  if (components.length == 0) {    throw new IllegalArgumentException("Array of components cannot be empty");  }  BaseComponent component=components[0];  for (int i=1; i < components.length; i++) {    component.addExtra(components[i]);  }  return component;}  }
class C{  public QueryException(final String message,final int errorCode,final String sqlState){  super(message);  this.message=message;  this.errorCode=errorCode;  this.sqlState=sqlState;}  }
class C{  @Override public void write(char cbuf[],int off,int len) throws IOException {  final int off_plus_len=off + len;  for (int i=off; i < off_plus_len; ) {    char c=cbuf[i++];    if (c < 0x80) {      _bytes[_index]=(byte)c;      if (++_index >= _bytes.length) {        flushBuffer();      }    } else {      write(c);    }  }}  }
class C{  public void update(Number x,Number y){  int index=indexOf(x);  if (index < 0) {    throw new SeriesException("No observation for x = " + x);  }  updateByIndex(index,y);}  }
class C{  public void run(){  Thread currentThread=Thread.currentThread();  String oldName=currentThread.getName();  if (newName != null) {    setName(currentThread,newName);  }  try {    runnable.run();  }  finally {    setName(currentThread,oldName);  }}  }
class C{  public InlineQueryResultCachedAudioBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public void init() throws ServletException {}  }
class C{  private boolean isPasswordValid(String password){  return password.length() > 4;}  }
class C{  public MalformedLinkException(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.388 -0500",hash_original_method="BEE1BC405D1C6F3176E5E5958D511DC6",hash_generated_method="6DDD3E77E754B24ABCE6477E9CAFF9CD") public void addExtensionMethod(String extensionMethod){  if (extensionMethod.equals(Request.NOTIFY)) {    if (stackLogger.isLoggingEnabled())     stackLogger.logDebug("NOTIFY Supported Natively");  } else {    dialogCreatingMethods.add(extensionMethod.trim().toUpperCase());  }}  }
class C{  private void doOnPostCommentSuccess(){  Intent intent=new Intent(getString(R.string.send_action));  LocalBroadcastManager.getInstance(getContext()).sendBroadcast(intent);}  }
class C{  public static void main(String[] args){  TestRunner.run(ServiceRefTest.class);}  }
class C{  public TransportAddress address(){  return address;}  }
class C{  public static ArtifactElement buildDefinition(String groupId,String artifactId,String version,String packaging,String classifier){  if (Strings.isNullOrEmpty(classifier)) {    classifier=null;  }  if (Strings.isNullOrEmpty(packaging)) {    packaging=DEFAULT_PACKAGING;  }  return new ArtifactElement(groupId,artifactId,version,packaging,classifier);}  }
class C{  public static int pixelRange(int p){  return ((p > 255) ? 255 : (p < 0) ? 0 : p);}  }
class C{  public DiscardPolicy(){}  }
class C{  public boolean isAutoWidth(){  return this.intervalDelegate.isAutoWidth();}  }
class C{  protected void generateExtensions(XmlWriter w,ExtensionProfile extProfile) throws IOException {  for (  Extension ext : nonRepeatingExtensionMap.values()) {    ext.generate(w,extProfile);  }  for (  List<Extension> extList : repeatingExtensionMap.values()) {    w.startRepeatingElement();    for (    Extension ext : extList) {      ext.generate(w,extProfile);    }    w.endRepeatingElement();  }  if (xmlBlob != null) {    w.innerXml(xmlBlob.getBlob());  }}  }
class C{  public static String constructQueueNamesRedisKey(String shardName){  return String.format("%s_%s",PINLATER_QUEUE_NAMES_KEY_PREFIX,shardName);}  }
class C{  public EuropeanExercise(final Date date){  super(Exercise.Type.European);  QL.require(date != null,"empty exercise date");  super.dates.add(date.clone());}  }
class C{  public void testContextProps(){  EPServiceProvider epService=allocateEngine(false);  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.startTest(epService,this.getClass(),getName());  }  EPServiceProviderSPI spi=(EPServiceProviderSPI)epService;  FilterServiceSPI filterSPI=(FilterServiceSPI)spi.getFilterService();  sendTimeEvent(epService,"2002-05-1T08:30:00.000");  EPStatement stmtCtx=epService.getEPAdministrator().createEPL("create context NestedContext " + "context EightToNine as start (0, 8, *, *, *) end (0, 9, *, *, *), " + "context SegmentedByAString partition by theString from SupportBean");  SupportUpdateListener listener=new SupportUpdateListener();  String[] fields="c0,c1,c2,c3,c4,c5,c6".split(",");  EPStatementSPI statement=(EPStatementSPI)epService.getEPAdministrator().createEPL("context NestedContext select " + "context.EightToNine.name as c0, " + "context.EightToNine.startTime as c1, "+ "context.SegmentedByAString.name as c2, "+ "context.SegmentedByAString.key1 as c3, "+ "context.name as c4, "+ "intPrimitive as c5,"+ "count(*) as c6 "+ "from SupportBean");  statement.addListener(listener);  assertEquals(1,filterSPI.getFilterCountApprox());  epService.getEPRuntime().sendEvent(new SupportBean("E1",10));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{"EightToNine",DateTime.parseDefaultMSec("2002-05-1T08:30:00.000"),"SegmentedByAString","E1","NestedContext",10,1L});  assertEquals(2,filterSPI.getFilterCountApprox());  epService.getEPRuntime().sendEvent(new SupportBean("E2",20));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{"EightToNine",DateTime.parseDefaultMSec("2002-05-1T08:30:00.000"),"SegmentedByAString","E2","NestedContext",20,1L});  assertEquals(1,spi.getSchedulingService().getScheduleHandleCount());  assertEquals(3,filterSPI.getFilterCountApprox());  AgentInstanceAssertionUtil.assertInstanceCounts(statement.getStatementContext(),2,0,0,0);  statement.stop();  assertEquals(0,spi.getSchedulingService().getScheduleHandleCount());  assertEquals(0,filterSPI.getFilterCountApprox());  statement.start();  epService.getEPRuntime().sendEvent(new SupportBean("E2",30));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{"EightToNine",DateTime.parseDefaultMSec("2002-05-1T08:30:00.000"),"SegmentedByAString","E2","NestedContext",30,1L});  assertEquals(1,spi.getSchedulingService().getScheduleHandleCount());  assertEquals(2,filterSPI.getFilterCountApprox());  AgentInstanceAssertionUtil.assertInstanceCounts(statement.getStatementContext(),1,0,0,0);  statement.destroy();  stmtCtx.destroy();  epService.getEPRuntime().sendEvent(new SupportBean("E2",30));  assertFalse(listener.isInvoked());  assertEquals(0,spi.getSchedulingService().getScheduleHandleCount());  assertEquals(0,filterSPI.getFilterCountApprox());  AgentInstanceAssertionUtil.assertInstanceCounts(statement.getStatementContext(),0,0,0,0);  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.endTest();  }}  }
class C{  protected boolean redirectOutgoingEdges(V oldNode,V newNode){  Set<E> outgoings=outgoingEdgesOf(oldNode);  for (  E outgoingEdge : outgoings) {    if (!redirectEdgeSource(outgoingEdge,newNode))     return false;  }  return true;}  }
class C{  private void updateQueue(AugmentedNode<ILineSegment> left,AugmentedNode<ILineSegment> right){  IPoint p=left.key().intersection(right.key());  if (p != null && EventPoint.pointSorter.compare(p,lineState.getSweepPoint()) > 0) {    EventPoint new_ep=new EventPoint(p);    if (!eq.contains(new_ep)) {      eq.insert(new_ep);    }  }}  }
class C{  public void removeListener(final T listener){  Preconditions.checkNotNull(listener,"Internal Error: Listener cannot be null");  if (m_listeners != null) {synchronized (m_listeners) {      if (!m_listeners.remove(new ComparableReference(listener))) {      }    }  }}  }
class C{  public String toString(){  return "[previous: " + previous + ", forward: "+ forward+ "]";}  }
class C{  public void createProcessPage(HttpServletRequest request,HttpServletResponse response,int AD_Process_ID,int AD_Window_ID){  MobileSessionCtx wsc=MobileSessionCtx.get(request);  MProcess process=MProcess.get(wsc.ctx,AD_Process_ID);  log.info("PI table id " + process.get_Table_ID());  log.info("PI table name id " + process.get_TableName());  log.info("PI table client id " + process.getAD_Client_ID());  log.info("PI table process id " + process.getAD_Process_ID());  log.info("PI  process class name " + process.getClassname());  MobileDoc doc=null;  if (process == null) {    doc=MobileDoc.createWindow("Process Not Found");  } else {    doc=MobileDoc.createWindow(process.getName());    fieldset center=new fieldset();    doc.getBody().addElement(center);    if (process.getDescription() != null)     center.addElement(new p(new i(process.getDescription())));    if (process.getHelp() != null)     center.addElement(new p(process.getHelp(),AlignType.LEFT));    MPInstance pInstance=fillParameter(request,process);    int AD_Table_ID=MobileUtil.getParameterAsInt(request,"AD_Table_ID");    int AD_Record_ID=MobileUtil.getParameterAsInt(request,"AD_Record_ID");    ProcessInfo pi=new ProcessInfo(process.getName(),process.getAD_Process_ID(),AD_Table_ID,AD_Record_ID);    pi.setAD_User_ID(Env.getAD_User_ID(wsc.ctx));    pi.setAD_Client_ID(Env.getAD_Client_ID(wsc.ctx));    pi.setClassName(process.getClassname());    log.info("PI client id " + pi.getAD_Client_ID());    pi.setAD_PInstance_ID(pInstance.getAD_PInstance_ID());    p p=new p();    p.addElement(Msg.translate(wsc.ctx,"AD_PInstance_ID") + ": " + pInstance.getAD_PInstance_ID());    center.addElement(p);    boolean processOK=false;    if (process.isWorkflow()) {      Trx trx=Trx.get(Trx.createTrxName("WebPrc"),true);      try {        WProcessCtl.process(this,AD_Window_ID,pi,trx,request);        trx.commit();        trx.close();      } catch (      Throwable t) {        trx.rollback();        trx.close();      }      if (pi.isError()) {        center.addElement(new p("Error:" + pi.getSummary(),AlignType.LEFT).setClass("Cerror"));        processOK=false;      } else {        center.addElement(new p("OK: Workflow Started",AlignType.LEFT));        processOK=true;      }      center.addElement(new p().addElement(pi.getSummary()));      center.addElement(pi.getLogInfo(true));    }    String jasper=process.getJasperReport();    if (process.isJavaProcess()) {      if (jasper != null) {        pi.setPrintPreview(false);        pi.setIsBatch(true);      }      Trx trx=Trx.get(Trx.createTrxName("WebPrc"),true);      try {        processOK=process.processIt(pi,trx);        trx.commit();        trx.close();      } catch (      Throwable t) {        trx.rollback();        trx.close();      }      if (!processOK || pi.isError()) {        center.addElement(new p("Error:" + pi.getSummary(),AlignType.LEFT).setClass("Cerror"));        processOK=false;      } else {        if (jasper != null) {          String error=MobileUtil.streamFile(response,pi.getPDFReport());          if (error == null)           return;          doc=MobileDoc.create(error);          wsc.ctx.put("AD_PInstance_ID=" + pInstance.getAD_PInstance_ID(),"ok");        } else {          center.addElement(new p().addElement(pi.getSummary()));          center.addElement(pi.getLogInfo(true));        }      }    }    if (process.isReport()) {      if (jasper == null) {        log.info(response.toString());        ReportEngine re=ReportEngine.get(wsc.ctx,pi);        if (re == null) {          center.addElement(new p("Could not start ReportEngine",AlignType.LEFT).setClass("Cerror"));        } else {          try {            File file=File.createTempFile("WProcess",".pdf");            boolean ok=re.createPDF(file);            if (ok) {              String error=MobileUtil.streamFile(response,file);              if (error == null)               return;              doc=MobileDoc.create(error);              wsc.ctx.put("AD_PInstance_ID=" + pInstance.getAD_PInstance_ID(),"ok");            } else             center.addElement(new p("Could not create Report",AlignType.LEFT).setClass("Cerror"));          } catch (          Exception e) {            center.addElement(new p("Could not create Report:",AlignType.LEFT).setClass("Cerror"));            center.addElement(e.toString());          }        }      }    }  }  try {    MobileUtil.createResponse(request,response,this,null,doc,false);  } catch (  IOException e) {    log.info(e.toString());  }}  }
class C{  @Override public int delete(Uri uri,String whereStatement,String[] whereStatementArgs){  int rowsDeleted;  final SQLiteDatabase db=mDatabaseHelper.getWritableDatabase();switch (sUriMatcher.match(uri)) {case WEATHER_VALUES_ITEMS:    rowsDeleted=db.delete(WEATHER_VALUES_TABLE_NAME,whereStatement,whereStatementArgs);  break;case WEATHER_VALUES_ITEM:rowsDeleted=db.delete(WEATHER_VALUES_TABLE_NAME,addKeyIdCheckToWhereStatement(whereStatement,ContentUris.parseId(uri)),whereStatementArgs);break;case WEATHER_CONDITIONS_ITEMS:rowsDeleted=db.delete(WEATHER_CONDITIONS_TABLE_NAME,whereStatement,whereStatementArgs);break;case WEATHER_CONDITIONS_ITEM:rowsDeleted=db.delete(WEATHER_CONDITIONS_TABLE_NAME,addKeyIdCheckToWhereStatement(whereStatement,ContentUris.parseId(uri)),whereStatementArgs);break;default :throw new IllegalArgumentException("Unknown URI " + uri);}getContext().getContentResolver().notifyChange(uri,null);getContext().getContentResolver().notifyChange(WeatherContract.ACCESS_ALL_DATA_FOR_LOCATION_URI,null);return rowsDeleted;}  }
class C{  public PlanModifier(LogicalPlan logicalPlan){  this.logicalPlan=logicalPlan;  this.physicalPlan=null;  init();}  }
class C{  public MultiInputStream(Iterator<? extends ByteSource> it) throws IOException {  this.it=checkNotNull(it);  advance();}  }
class C{  public boolean isAce(){  return (rank == ACE);}  }
class C{  @Override public boolean isResetted(){  return (width == 0 && height == 0);}  }
class C{  public static void addPort(PortAllocationContext context,StoragePort port,String switchName){  port.setRegistrationStatus(RegistrationStatus.REGISTERED.name());  port.setNetwork(context._initiatorNetwork.getId());  String portName=port.getPortName();  String portGroup=port.getPortGroup();  StorageHADomain haDomain=new StorageHADomain();  StorageSystem.Type type=StorageSystem.Type.vnxblock;  if (port.getPortName().startsWith("FA-")) {    haDomain.setNativeGuid("SYMMETRIX+" + portName);  } else   if (portGroup != null && portGroup.startsWith("director-")) {    haDomain.setNativeGuid("VPLEX+" + port.getPortGroup());  } else   if (portGroup.startsWith("X")) {    haDomain.setNativeGuid("XTREMIO+" + port.getPortGroup());  } else {    haDomain.setNativeGuid("VNX+" + portName);  }  if (portName.startsWith("SP_A")) {    haDomain.setSlotNumber("1");  } else   if (portName.startsWith("SP_B")) {    haDomain.setSlotNumber("2");  } else   if (portName.startsWith("SP_C")) {    haDomain.setSlotNumber("3");  } else   if (portName.startsWith("SP_D")) {    haDomain.setSlotNumber("4");  } else   if (portName.startsWith("FA-")) {    type=StorageSystem.Type.vmax;    int index;    for (index=3; index < portName.length(); index++) {      if (Character.isDigit(portName.charAt(index)) == false) {        break;      }    }    haDomain.setSlotNumber(portName.substring(3,index));  } else   if (portName.startsWith("X")) {    haDomain.setAdapterName(portGroup);    type=StorageSystem.Type.xtremio;  } else {    haDomain.setSlotNumber("0");  }  if (portGroup != null) {    if (portGroup.equals("director-1-1-A")) {      haDomain.setSlotNumber("0");      type=StorageSystem.Type.vplex;    } else     if (portGroup.equals("director-1-1-B")) {      haDomain.setSlotNumber("1");      type=StorageSystem.Type.vplex;    } else     if (portGroup.equals("director-1-2-A")) {      haDomain.setSlotNumber("2");      type=StorageSystem.Type.vplex;    } else     if (portGroup.equals("director-1-2-B")) {      haDomain.setSlotNumber("3");      type=StorageSystem.Type.vplex;    } else     if (portGroup.equals("director-2-1-A")) {      haDomain.setSlotNumber("8");      type=StorageSystem.Type.vplex;    } else     if (portGroup.equals("director-2-1-B")) {      haDomain.setSlotNumber("9");      type=StorageSystem.Type.vplex;    } else     if (portGroup.equals("director-2-2-A")) {      haDomain.setSlotNumber("10");      type=StorageSystem.Type.vplex;    } else     if (portGroup.equals("director-2-2-B")) {      haDomain.setSlotNumber("11");      type=StorageSystem.Type.vplex;    }    haDomain.setName(portGroup);  }  String digits=port.getPortName().replaceAll("[^0-9]","");  Long usage=new Long(digits);  context.addPort(port,haDomain,type,switchName,usage);}  }
class C{  protected static void printHelp(){  System.out.println("Help for the Indexor class.\n" + "===========================\n" + "This help text is shown if you start the Indexor with the '-h' option.\n"+ "\n"+ "Usage\n"+ "=====\n"+ "$> Indexor -i <input-file> -l <index-directory>\n"+ "\n"+ "or \n"+ "\n"+ "$> Indexor -c <file-list> -l <index-directory>\n"+ "\n"+ "with \n"+ "\n"+ "<input-file> ... \t\ta single output file of Extractor.\n"+ "<index-directory> ...\tthe index to write the data to (it's appended).\n"+ "<file-list> ...\t\t\ta file containing data files one per line.\n");}  }
class C{  public int hashCode(){  return type.hashCode();}  }
class C{  public void startServingGIIRequest(){  if (this.owningQueue == null) {    if (logger.isDebugEnabled()) {      logger.debug("found that owningQueue was null during GII of {} which could lead to event loss (see #41681)",this);    }    return;  }  this.owningQueue.startGiiQueueing();}  }
class C{  public static boolean hasHoneycomb(){  return Build.VERSION.SDK_INT >= 11;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (quantifier: ");  result.append(quantifier);  result.append(')');  return result.toString();}  }
class C{  public static double[] fromNationalGrid(String ng){  String trimmed=ng.trim();  String ref=trimmed.substring(0,2);  GridSquare gridSquare=GRID_SQUARES.get(ref);  if (gridSquare == null) {    throw new IllegalArgumentException("Invalid NG: " + trimmed);  }  List<String> list=WHITESPACE_SPLITTER.splitToList(trimmed.substring(2));  Double n=null;  Double e=null;  if (list.size() >= 2) {    e=parseDoubleWithCoordPrecision(list.get(0));    n=parseDoubleWithCoordPrecision(list.get(1));  } else   if (list.size() == 1) {    String[] ret=splitConsolidated(list.get(0));    e=parseDoubleWithCoordPrecision(ret[0]);    n=parseDoubleWithCoordPrecision(ret[1]);  } else {    throw new IllegalArgumentException("Invalid NG coords " + ng);  }  if (n == null || e == null) {    throw new IllegalArgumentException("Unable to extract NE from " + ng);  }  return gridSquare.toEastingNorthing(e,n);}  }
class C{  public boolean isPropertyValuePattern(){  return _property_value_pattern;}  }
class C{  @Override public String parse(WbXmlParser parser,byte[] data) throws IOException {  BASE64Encoder enc=new BASE64Encoder();  return enc.encode(data).replaceAll(System.getProperty("line.separator"),"");}  }
class C{  protected void sequence_IntersectionTypeExpressionOLD_TypeRefWithModifiers(ISerializationContext context,IntersectionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public SecurityCheckException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public RequestHandle head(Context context,String url,ResponseHandlerInterface responseHandler){  return head(context,url,null,responseHandler);}  }
class C{  public static void UNREACHABLE(String module) throws OptimizingCompilerException {  throw new OptimizingCompilerException(module,"Executed UNREACHABLE code");}  }
class C{  private OutputAnalyzer runJps() throws Exception {  JDKToolLauncher launcher=JDKToolLauncher.createUsingTestJDK("jps");  launcher.addVMArg("-XX:+UsePerfData");  launcher.addToolArg("-v");  launcher.addToolArg(getDestination());  String[] cmd=launcher.getCommand();  log("Start jps",cmd);  ProcessBuilder processBuilder=new ProcessBuilder(cmd);  OutputAnalyzer output=new OutputAnalyzer(processBuilder.start());  System.out.println(output.getOutput());  return output;}  }
class C{  private BackupStatus performBaseline(){  return baseline(Host.getHost(0).getVM(1));}  }
class C{  protected AbstractMatrix2D vDice(){  int tmp;  tmp=rows;  rows=columns;  columns=tmp;  tmp=rowStride;  rowStride=columnStride;  columnStride=tmp;  tmp=rowZero;  rowZero=columnZero;  columnZero=tmp;  this.isNoView=false;  return this;}  }
class C{  public boolean lt(final Period another){  if (this.length == 0)   return (another.length > 0);  if (another.length == 0)   return (this.length < 0);  if (this.units() == another.units())   return this.length() < another.length();  if (this.units() == TimeUnit.Months && another.units() == TimeUnit.Years)   return this.length() < 12 * another.length();  if (this.units() == TimeUnit.Years && another.units() == TimeUnit.Months)   return 12 * this.length() < another.length();  if (this.units() == TimeUnit.Days && another.units() == TimeUnit.Weeks)   return this.length() < 7 * another.length();  if (this.units() == TimeUnit.Weeks && another.units() == TimeUnit.Days)   return 7 * this.length() < another.length();  final int period1MinDays=this.getMinDays();  final int period1MaxDays=this.getMaxDays();  final int period2MinDays=another.getMinDays();  final int period2MaxDays=another.getMaxDays();  if (period1MaxDays < period2MinDays)   return true; else   if (period1MinDays > period2MaxDays)   return false; else   throw new LibraryException(UNDECIDABLE_COMPARISON);}  }
class C{  public static int firstStatPos(JCTree tree){  if (tree.hasTag(BLOCK) && ((JCBlock)tree).stats.nonEmpty())   return ((JCBlock)tree).stats.head.pos; else   return tree.pos;}  }
class C{  public boolean canBeLongAddress(int address){  return isLongAddress(address);}  }
class C{  public String sslTrustStorePassword(){  return reader.getString(SSL_TRUST_STORE_PASSWORD,null);}  }
class C{  public int[][] toArray(){  int[][] result=new int[sizes.size()][];  for (int i=0; i < result.length; ++i) {    result[i]=new int[sizes.get(i)];    System.arraycopy(vector[i],0,result[i],0,result[i].length);  }  return result;}  }
class C{  private ResourcePoolQueryHelper(ServiceHost host){  this.host=host;}  }
class C{  public static String join(Iterator<Object> self,String separator){  return join((Iterable)toList(self),separator);}  }
class C{  public static void main(String[] args){  testDoesParsedDateMatchTextFunction();}  }
class C{  public TransformVariablesAsymmetric(BBOBFunction function,double beta){  super(function);  this.beta=beta;}  }
class C{  protected String defaultFilterString(){  return "weka.filters.supervised.attribute.Discretize";}  }
class C{  public HttpAuthenticationException(String message){  super(message);}  }
class C{  private void createLDAPConfigFiles() throws FileOperationFailedException, DirectoryOrFileNotFoundException, IOException {  createLdifFilesDirectory();  if (CollectionUtils.isEmpty(_configLdifList)) {    _log.info("Using default config ldif files");    InputStream configExportStream=LDAPServer.class.getResourceAsStream(DEFAULT_LDAP_CONFIG_EXPORT);    BufferedReader configExportReader=new BufferedReader(new InputStreamReader(configExportStream));    String ldapConfigExportFileName="%s" + DEFAULT_LDAP_CONFIG_EXPORT;    ldapConfigExportFileName=String.format(ldapConfigExportFileName,getConfigFilesDirectory());    _log.debug("Config export file name {}",ldapConfigExportFileName);    createLdifFile(configExportReader,ldapConfigExportFileName);  } else {    _log.info("Using configured config ldif files");    for (    String file : _configLdifList) {      File fileObject=new File(file);      if (!fileObject.exists()) {        throw new DirectoryOrFileNotFoundException("File",file);      }      InputStream configExportStream=new FileInputStream(file);      BufferedReader configExportReader=new BufferedReader(new InputStreamReader(configExportStream));      String ldapConfigExportFileName="%s/" + fileObject.getName();      ldapConfigExportFileName=String.format(ldapConfigExportFileName,getConfigFilesDirectory());      _log.debug("Config export file name {}",ldapConfigExportFileName);      createLdifFile(configExportReader,ldapConfigExportFileName);    }  }}  }
class C{  public static void printStackTrace(Throwable t){  printStackTrace(t,null);}  }
class C{  void add(AlgorithmResult result){  algorithmResults.add(result);}  }
class C{  public void stop(){  for (  Gondola g : gondolas) {    boolean status=g.stop();    if (!status) {      logger.warn("Failed to properly stop Gondola instance for host " + g.getHostId());    }  }  extras.clear();  members.clear();}  }
class C{  private void addFonts(char[] chars,Map<? extends Attribute,?> attributes,int start,int limit){  FontResolver resolver=FontResolver.getInstance();  CodePointIterator iter=CodePointIterator.create(chars,start,limit);  for (int runStart=iter.charIndex(); runStart < limit; runStart=iter.charIndex()) {    int fontIndex=resolver.nextFontRunIndex(iter);    addFont(resolver.getFont(fontIndex,attributes),runStart);  }}  }
class C{  public Object parseXMLObject(XMLObject xo) throws XMLParseException {  PatternList patternList=(PatternList)xo.getChild(0);  Patterns patterns=new Patterns(patternList);  for (int i=1; i < xo.getChildCount(); i++) {    patterns.addPatterns((PatternList)xo.getChild(i));  }  if (xo.hasAttribute(XMLParser.ID)) {    final Logger logger=Logger.getLogger("dr.evoxml");    logger.info("Site patterns '" + xo.getId() + "' created by merging "+ xo.getChildCount()+ " pattern lists");    logger.info("  pattern count = " + patterns.getPatternCount());  }  return patterns;}  }
class C{  public final boolean next(Element element){  if (m_nextCodepoint_ > UCharacter.MAX_VALUE) {    return false;  }  if (m_nextCodepoint_ < UCharacter.SUPPLEMENTARY_MIN_VALUE && calculateNextBMPElement(element)) {    return true;  }  calculateNextSupplementaryElement(element);  return true;}  }
class C{  public Object clone(){  return new GF2nONBElement(this);}  }
class C{  @Override public Long renamenx(final String oldkey,final String newkey){  checkIsInMultiOrPipeline();  client.renamenx(oldkey,newkey);  return client.getIntegerReply();}  }
class C{  public static Composite createComposite(Composite parent,Font font,int columns,int hspan,int fill,int marginwidth,int marginheight){  Composite g=new Composite(parent,SWT.NONE);  GridLayout layout=new GridLayout(columns,false);  layout.marginWidth=marginwidth;  layout.marginHeight=marginheight;  g.setLayout(layout);  g.setFont(font);  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  g.setLayoutData(gd);  return g;}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    System.err.println("Usage : URLUtil <url>");    return;  }  String url=args[0];  try {    System.out.println(URLUtil.getDomainName(new URL(url)));  } catch (  MalformedURLException ex) {    ex.printStackTrace();  }}  }
class C{  static public boolean isForkHappening(){  String processes=null;  try {    processes=getCurrentProcesses();    return getJavaCmdCount(processes) > 0;  } catch (  IOException e) {    e.printStackTrace();  }catch (  InterruptedException e) {    e.printStackTrace();  }  return true;}  }
class C{  public OpenLongObjectHashMap(int initialCapacity,double minLoadFactor,double maxLoadFactor){  setUp(initialCapacity,minLoadFactor,maxLoadFactor);}  }
class C{  public KafkaAvroGenericRecordWriter(Producer<String,GenericRecord> producer,String topic){  this.producer=producer;  this.topic=topic;}  }
class C{  public void addToBottom(Map<K,V> existingMap){  if (existingMap == null) {    throw new IllegalArgumentException("Error: cannot add null existing Map to bottom of a MapContext");  }  this.stackList.add(existingMap);}  }
class C{  public void close(){  Preconditions.checkState(channel != null,"File not open.");  try {    if (channel.isOpen())     channel.close();  } catch (  IOException e) {    LOGGER.error("Failed to closed file channel for {}",path,e);  } finally {    channel=null;  }}  }
class C{  public static String generateHitachiVolumeWWN(StorageSystem storage,String volumeNativeId){  String arraySerialNumInHex=null;  String serialNum=storage.getSerialNumber();  if (storage.getModel().equalsIgnoreCase(HDSConstants.HUSVM_ARRAYFAMILY_MODEL)) {    arraySerialNumInHex=Integer.toHexString(Integer.parseInt(serialNum.substring(1)));  } else   if (storage.getModel().contains(HDSConstants.VSP_G1000_ARRAYFAMILY_MODEL)) {    arraySerialNumInHex=Integer.toHexString(Integer.parseInt(serialNum));  } else {    arraySerialNumInHex=String.format("%08x",Integer.parseInt(serialNum));  }  StringBuffer generatedWWN=new StringBuffer(arraySerialNumInHex);  String volumeIdInHexa=String.format("%08x",Integer.parseInt(volumeNativeId));  generatedWWN.append(volumeIdInHexa);  return generatedWWN.toString().toUpperCase();}  }
class C{  public static Angle ellipsoidalForwardAzimuth(LatLon p1,LatLon p2,double equatorialRadius,double polarRadius){  if (p1 == null || p2 == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  final double f=(equatorialRadius - polarRadius) / equatorialRadius;  final double U1=Math.atan((1.0 - f) * Math.tan(p1.latitude.radians));  final double cU1=Math.cos(U1);  final double sU1=Math.sin(U1);  final double U2=Math.atan((1.0 - f) * Math.tan(p2.latitude.radians));  final double cU2=Math.cos(U2);  final double sU2=Math.sin(U2);  final double L=p2.longitude.subtract(p1.longitude).radians;  double lambda=L;  double sLambda=Math.sin(lambda);  double cLambda=Math.cos(lambda);  double lambda_prev=Double.MAX_VALUE;  int count=0;  while (Math.abs(lambda - lambda_prev) > 1e-12 && count++ < 100) {    lambda_prev=lambda;    double sSigma=Math.sqrt(Math.pow(cU2 * sLambda,2) + Math.pow(cU1 * sU2 - sU1 * cU2 * cLambda,2));    double cSigma=sU1 * sU2 + cU1 * cU2 * cLambda;    double sigma=Math.atan2(sSigma,cSigma);    double sAlpha=cU1 * cU2 * sLambda / sSigma;    double cAlpha2=1 - sAlpha * sAlpha;    double cSigmam2;    if (Math.abs(cAlpha2) < 1e-6) {      cSigmam2=0;    } else {      cSigmam2=cSigma - 2 * sU1 * sU2 / cAlpha2;    }    double c=f / 16 * cAlpha2 * (4 + f * (4 - 3 * cAlpha2));    lambda=L + (1 - c) * f * sAlpha* (sigma + c * sSigma * (cSigmam2 + c * cSigma * (-1 + 2 * cSigmam2)));    sLambda=Math.sin(lambda);    cLambda=Math.cos(lambda);  }  return Angle.fromRadians(Math.atan2(cU2 * sLambda,cU1 * sU2 - sU1 * cU2 * cLambda));}  }
class C{  private void eliminate(RegisterOperand op){  int i=0;  loop_over_expressions:   while (i < cache.size()) {    AvailableExpression ae=cache.get(i);    if (ae.ops != null) {      for (      Operand opx : ae.ops) {        if (opx instanceof RegisterOperand && ((RegisterOperand)opx).getRegister() == op.getRegister()) {          cache.remove(i);          continue loop_over_expressions;        }      }    }    i++;  }}  }
class C{  List<Integer> segmentSizes(){  if (head == null)   return Collections.emptyList();  List<Integer> result=new ArrayList<>();  result.add(head.limit - head.pos);  for (Segment s=head.next; s != head; s=s.next) {    result.add(s.limit - s.pos);  }  return result;}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=propertiesDAO.totalRecordCount();    List<Properties> getProperties=new ArrayList<Properties>();    for (    Integer processId : propertiesDAO.list(startPage,pageSize)) {      com.wipro.ats.bdre.md.beans.table.Properties returnProperties=new com.wipro.ats.bdre.md.beans.table.Properties();      returnProperties.setProcessId(processId);      returnProperties.setCounter(counter);      getProperties.add(returnProperties);    }    restWrapper=new RestWrapper(getProperties,RestWrapper.OK);    LOGGER.info("All records listed from Properties by User:" + principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  @Nullable private static byte[][] toBytes(Charset charset,@Nullable String... delims){  byte[][] res=null;  if (delims != null) {    res=new byte[delims.length][];    for (int i=0; i < delims.length; i++)     res[i]=delims[i].getBytes(charset);  }  return res;}  }
class C{  public static String toHex(byte[] bytes){  BigInteger bi=new BigInteger(1,bytes);  return String.format("%0" + (bytes.length << 1) + "X",bi);}  }
class C{  public static byte[] createMultiSigOutputScript(int threshold,List<ECKey> pubkeys){  checkArgument(threshold > 0);  checkArgument(threshold <= pubkeys.size());  checkArgument(pubkeys.size() <= 16);  if (pubkeys.size() > 3) {    log.warn("Creating a multi-signature output that is non-standard: {} pubkeys, should be <= 3",pubkeys.size());  }  try {    ByteArrayOutputStream bits=new ByteArrayOutputStream();    bits.write(encodeToOpN(threshold));    for (    ECKey key : pubkeys) {      writeBytes(bits,key.getPubKey());    }    bits.write(encodeToOpN(pubkeys.size()));    bits.write(OP_CHECKMULTISIG);    return bits.toByteArray();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public AttachTodoObject(){  super();}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=97 * hash + this.token;  hash=97 * hash + this.pageCode;  return hash;}  }
class C{  public Query execute(PageContext pc,SQL sql,Selects selects,int maxrows) throws PageException {  Column[] orders=selects.getOrderbys();  Select[] arrSelects=selects.getSelects();  QueryImpl target=new QueryImpl(new Collection.Key[0],0,"query",sql);  for (int i=0; i < arrSelects.length; i++) {    arrSelects[i].getFroms();    Column[] froms=arrSelects[i].getFroms();    if (froms.length > 1)     throw new DatabaseException("can only work with single tables yet",null,sql,null);    executeSingle(pc,arrSelects[i],getSingleTable(pc,froms[0]),target,arrSelects.length > 1 ? -1 : maxrows,sql,orders.length > 0);  }  if (orders.length > 0) {    order(target,orders);    if (maxrows > -1)     target.cutRowsTo(maxrows);  }  if (selects.isDistinct()) {    order(target,selects.getDistincts());    Key[] _keys=target.getColumnNames();    QueryColumn[] columns=new QueryColumn[_keys.length];    for (int i=0; i < columns.length; i++) {      columns[i]=target.getColumn(_keys[i]);    }    int i;    Object l, r;    outer:     for (int row=target.getRecordcount(); row > 1; row--) {      for (i=0; i < columns.length; i++) {        l=columns[i].get(row,null);        r=columns[i].get(row - 1,null);        if (l == null || r == null) {          if (l != r)           continue outer;        } else         if (!Operator.equals(l,r,true))         continue outer;      }      target.removeRow(row);    }  }  order(target,orders);  return target;}  }
class C{  public void insertPushEquals(int opcode,JumpInsnNode position,InsnList list){  MethodInsnNode equalCheck=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(BooleanHelper.class),"isEqual",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(Object.class),Type.getType(Object.class),Type.INT_TYPE}),false);  list.insertBefore(position,new InsnNode(Opcodes.DUP2));  list.insertBefore(position,new LdcInsnNode(opcode));  list.insertBefore(position,equalCheck);  insertBranchIdPlaceholder(currentMethodNode,position);  MethodInsnNode push=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(BooleanHelper.class),"pushPredicate",Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{Type.INT_TYPE,Type.INT_TYPE}),false);  list.insertBefore(position,push);}  }
class C{  public boolean hasRef(){  return getRef() != null;}  }
class C{  public static Iterable<Object[]> findTests(){  YamlTestFinder finder;  String resourceDirName=System.getProperty(RESOURCE_DIR_PROPERTY);  if (resourceDirName != null) {    File resourceDir=new File(resourceDirName);    boolean recursive=Boolean.valueOf(System.getProperty(RECURSIVE_PROPERTY,"true"));    try {      finder=new YamlTestFinder(resourceDir.toURI().toURL());    } catch (    MalformedURLException ex) {      throw new RuntimeException(ex);    }    finder.collectFiles(resourceDir,recursive);  } else {    URL url=YamlTestFinder.class.getResource(RESOURCE_MARKER);    if (url == null) {      throw new RuntimeException("Problem finding tests: " + RESOURCE_MARKER);    }    try {      finder=new YamlTestFinder(new URL(url,"."));    } catch (    MalformedURLException ex) {      throw new RuntimeException(ex);    }    if ("file".equals(url.getProtocol())) {      finder.collectFiles(new File(url.getPath()).getParentFile(),true);    } else {      finder.collectResources(url);    }  }  return finder.params;}  }
class C{  public void removeMoreListener(){  mOnMoreListener=null;}  }
class C{  private String readName() throws IOException, XmlPullParserException {  if (position >= limit && !fillBuffer(1)) {    checkRelaxed("name expected");    return "";  }  int start=position;  StringBuilder result=null;  char c=buffer[position];  if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || c == ':' || c >= '\u00c0' || relaxed) {    position++;  } else {    checkRelaxed("name expected");    return "";  }  while (true) {    if (position >= limit) {      if (result == null) {        result=new StringBuilder();      }      result.append(buffer,start,position - start);      if (!fillBuffer(1)) {        return result.toString();      }      start=position;    }    c=buffer[position];    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| c == '_' || c == '-' || c == ':' || c == '.' || c >= '\u00b7') {      position++;      continue;    }    if (result == null) {      return stringPool.get(buffer,start,position - start);    } else {      result.append(buffer,start,position - start);      return result.toString();    }  }}  }
class C{  public SwingTerminalFontConfiguration(boolean useAntiAliasing,BoldMode boldMode,Font... fontsInOrderOfPriority){  super(useAntiAliasing,boldMode,fontsInOrderOfPriority);}  }
class C{  public void emitDirect(int taskId,Collection<Tuple> anchors,List<Object> tuple){  emitDirect(taskId,Utils.DEFAULT_STREAM_ID,anchors,tuple);}  }
class C{  public ConfigException(String msg){  super(msg);}  }
class C{  protected void computeBalloonPoints(DrawContext dc,OrderedBrowserBalloon obb){  this.screenOffset=null;  obb.screenRect=null;  obb.screenExtent=null;  obb.screenPickExtent=null;  obb.webViewRect=null;  obb.eyeDistance=0;  BalloonAttributes activeAttrs=this.getActiveAttributes();  Dimension size=this.computeSize(dc,activeAttrs);  this.screenOffset=this.computeOffset(dc,activeAttrs,size.width,size.height);  int y=dc.getView().getViewport().height - this.screenLocation.y;  obb.screenRect=new Rectangle(this.screenLocation.x - this.screenOffset.x,y - this.screenOffset.y,size.width,size.height);  obb.screenExtent=new Rectangle(obb.screenRect);  obb.screenExtent.add(this.screenLocation.x,y);  obb.screenPickExtent=this.computeFramePickRect(obb.screenExtent);  obb.webViewRect=this.computeWebViewRectForFrameRect(activeAttrs,obb.screenRect);  obb.eyeDistance=0;}  }
class C{  private void fireChangedRemoved(final RPObject object,final RPObject changes){  listener.onChangedRemoved(object,changes);  userListener.onChangedRemoved(object,changes);  for (  final RPSlot cslot : changes.slots()) {    if (cslot.size() != 0) {      fireChangedRemoved(object,cslot);    }  }}  }
class C{  Object read(OptimizedObjectInputStream in) throws ClassNotFoundException, IOException {switch (type) {case ENUM:    return enumVals[in.readInt()];case EXTERNALIZABLE:  verifyChecksum(in.readShort());return in.readExternalizable(constructor,readResolveMtd);case SERIALIZABLE:verifyChecksum(in.readShort());return in.readSerializable(cls,readObjMtds,readResolveMtd,fields);default :assert false : "Unexpected type: " + type;return null;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:23.267 -0400",hash_original_method="8B4DC9506BFF677670C5FDC2A32AE870",hash_generated_method="2B9DCEAA015D0A93F4E173501EE4F614") public AtomicLongArray(int length){  array=new long[length];}  }
class C{  public void launch(String urlString){  browserLauncher.openURLinBrowser(urlString);}  }
class C{  private static String createConfig(String configResource,String rootDir) throws IOException {  URL configURL=LocalCassandraService.class.getResource(configResource);  if (configURL == null) {    throw new IllegalStateException("Could not find " + configResource);  }  File path=FileUtils.toFile(configURL);  String data=FileUtils.readFileToString(path,"UTF-8");  StrSubstitutor substitutor=new StrSubstitutor(Collections.singletonMap("rootDir",rootDir));  String contents=substitutor.replace(data);  File configFile=File.createTempFile("config",".yaml");  configFile.deleteOnExit();  FileUtils.writeStringToFile(configFile,contents,"UTF-8");  return "file:" + configFile.getAbsolutePath();}  }
class C{  public StraightMovement(RotatingEntity parent,String label){  super(parent,label);}  }
class C{  public void testIgnoreOver() throws Exception {  ObjectMapper m=new ObjectMapper();  Map<String,Object> result=writeAndMap(m,new BaseClassIgnore());  assertEquals(1,result.size());  assertEquals(Integer.valueOf(2),result.get("y"));  result=writeAndMap(m,new SubClassNonIgnore());  assertEquals(2,result.size());  assertEquals(Integer.valueOf(3),result.get("x"));  assertEquals(Integer.valueOf(2),result.get("y"));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testIsConsistentModelClass(){  SessionNode node1=new SessionNode(Type1.class);  SessionNode node2=new SessionNode(Type2.class);  SessionNode node3=new SessionNode(Type3.class);  SessionNode node4=new SessionNode(new Class[]{Type1.class,Type2.class});  SessionNode node6=new SessionNode(new Class[]{Type1.class,Type2.class,Type3.class});  SessionNode node7=new SessionNode(new Class[]{Type1.class,Type4.class});  List parents=new ArrayList();  parents.add(node1);  parents.add(node2);  parents.add(node3);  parents.remove(node1);  parents.remove(node2);  parents.remove(node3);  parents.add(node4);  assertTrue(node1.isConsistentModelClass(Type1.class,parents,false));  parents.add(node6);  assertTrue(node1.isConsistentModelClass(Type1.class,parents,false));  parents.remove(node6);  parents.add(node7);  assertTrue(!node1.isConsistentModelClass(Type1.class,parents,false));}  }
class C{  public static void fill(Object[] array,int start,int end,Object value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  @Override public void close() throws IOException {}  }
class C{  private void showErrorMessage(@StringRes int errorMsg,@NonNull Icon errorIcon){  if (!pageIsLoaded) {    tryToClearWebView();    Context context=getContext();    errorTextView.setVisibility(View.VISIBLE);    errorTextView.setText(errorMsg);    errorTextView.setCompoundDrawablesWithIntrinsicBounds(null,new IconDrawable(context,errorIcon).sizeRes(context,R.dimen.content_unavailable_error_icon_size).colorRes(context,R.color.edx_brand_gray_back),null,null);  }}  }
class C{  protected Host findHostByUuid(String uuid){  return getModelClient().hosts().findByUuid(uuid);}  }
class C{  public static boolean write(String filename,Object o) throws Exception {  return write(new FileOutputStream(filename),o);}  }
class C{  public Collection<Address> members(){  return members;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SIF;}  }
class C{  public KeyValueTableView(List<Pair<K,V>> items,List<K> skipKeys){  this(FXCollections.observableArrayList(items),FXCollections.observableArrayList(skipKeys),null,null);}  }
class C{  public T caseAnonymous_extendedStateMachine_1_(Anonymous_extendedStateMachine_1_ object){  return null;}  }
class C{  @Override public final int size(){  int s=0;  for (  final ARC<K,V> a : this.arc)   s+=a.size();  return s;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("doPost from " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  String url="/notes.jsp";  HttpSession session=request.getSession(false);  if (session == null || session.getAttribute(WebInfo.NAME) == null)   url="/login.jsp"; else {    session.removeAttribute(WebSessionCtx.HDR_MESSAGE);    Properties ctx=JSPEnv.getCtx(request);    WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);    if (wu == null) {      log.warning("doPost - no web user");      if (!response.isCommitted())       response.sendRedirect("loginServlet?ForwardTo=note.jsp");      return;    }    int AD_WF_Activity_ID=WebUtil.getParameterAsInt(request,P_WF_Activity_ID);    boolean isConfirmed=WebUtil.getParameterAsBoolean(request,"IsConfirmed");    boolean isApproved=WebUtil.getParameterAsBoolean(request,"IsApproved");    boolean isRejected=WebUtil.getParameterAsBoolean(request,"IsApproved");    String textMsg=WebUtil.getParameter(request,"textMsg");    log.fine("doPost - TextMsg=" + textMsg);    MWFActivity act=new MWFActivity(ctx,AD_WF_Activity_ID,null);    log.fine("doPost - " + act);    if (AD_WF_Activity_ID == 0 || act == null || act.getAD_WF_Activity_ID() != AD_WF_Activity_ID)     session.setAttribute(WebSessionCtx.HDR_MESSAGE,"Activity not found"); else {      if (act.isUserApproval() && (isApproved || isRejected)) {        try {          act.setUserChoice(wu.getAD_User_ID(),isApproved ? "Y" : "N",DisplayType.YesNo,textMsg);          act.saveEx();        } catch (        Exception e) {        }      } else       if (act.isUserManual() && isConfirmed) {        act.setUserConfirmation(wu.getAD_User_ID(),textMsg);        act.saveEx();      } else       if (textMsg != null && textMsg.length() > 0) {        act.setTextMsg(textMsg);        act.saveEx();      }    }  }  log.info("doGet - Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  public void testGetF15(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF15();  assertEquals(expResult,result);}  }
class C{  public Set<Map.Entry<K,V>> entrySet(){  throw new java.lang.UnsupportedOperationException("Method entrySet() not implemented.");}  }
class C{  public synchronized void remove(final IProgressOperation operation){  m_operations.remove(operation);  for (  final IGlobalProgressManagerListener listener : m_listeners) {    try {      listener.removed(operation);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public SymbolTableEntryInternal steFor_$makeEnum(){  return getSymbolTableEntryInternal("$makeEnum",true);}  }
class C{  private static String mergeTypeEx(String a,String b){  if (a.equals(b)) {    return a;  }  int as=countArrayDim(a);  int bs=countArrayDim(b);  if (as > bs) {    return a;  } else   if (bs > as) {    return b;  } else {    String elementTypeA=a.substring(as);    String elementTypeB=a.substring(bs);    TypeClass ta=TypeClass.clzOf(elementTypeA);    TypeClass tb=TypeClass.clzOf(elementTypeB);    if (ta.fixed && !tb.fixed) {      return a;    } else     if (!ta.fixed && tb.fixed) {      return b;    } else     if (ta.fixed && tb.fixed) {      if (ta != tb) {        if (as == 0) {          throw new RuntimeException();        }        return buildArray(as - 1,"L");      }      if (ta == TypeClass.INT) {        String chooseType="I";        for (int i=possibleIntTypes.length - 1; i >= 0; i--) {          String t=possibleIntTypes[i];          if (a.equals(t) || b.equals(t)) {            chooseType=t;            break;          }        }        return buildArray(as,chooseType);      } else {        return buildArray(as,"L");      }    } else {      return buildArray(as,TypeClass.merge(ta,tb).name);    }  }}  }
class C{  private static void displayMessageAndExit(String message){  MegaMek.displayMessage(message);  TimerSingleton.getInstance().killTimer();  System.exit(1);}  }
class C{  public final boolean isIsolatable(){  return deleteMarkers && versionTimestamps;}  }
class C{  public void init(Drawer drawer){  if (drawer.getDrawerItems() != null) {    init(drawer.getRecyclerView(),drawer.getDrawerItems().toArray(new IDrawerItem[drawer.getDrawerItems().size()]));  }}  }
class C{  public short[] array(int index){  return buffers[index];}  }
class C{  public static void removeAllChildren(ASTNode node,ChildListPropertyDescriptor childListProperty,ASTRewrite rewrite,TextEditGroup editGroup){  ListRewrite listRewrite=rewrite.getListRewrite(node,childListProperty);  @SuppressWarnings("unchecked") List<? extends ASTNode> children=(List<? extends ASTNode>)node.getStructuralProperty(childListProperty);  for (  ASTNode child : children) {    listRewrite.remove(child,editGroup);  }}  }
class C{  public static void main(String[] args){  if (args.length == 0) {    System.out.println("Usage: java Search n target");    System.out.println("   n is the number of random permutations of " + baseString + " to use as collection.");    System.out.println("   target is ideally a string of six characters\n");    System.exit(-1);  }  int n=Integer.valueOf(args[0]);  String target=args[1];  String[] els=buildInput(n);  long now=System.currentTimeMillis();  boolean b=search(els,target);  long time=System.currentTimeMillis() - now;  System.out.println("search time in ms:" + time);  System.out.println("search result:" + b);}  }
class C{  public static int cs_ereach(Dcs A,int k,int[] parent,int[] s,int s_offset,int[] w){  int i, p, n, len, top, Ap[], Ai[];  if (!Dcs_util.CS_CSC(A) || parent == null || s == null || w == null)   return (-1);  top=n=A.n;  Ap=A.p;  Ai=A.i;  Dcs_util.CS_MARK(w,k);  for (p=Ap[k]; p < Ap[k + 1]; p++) {    i=Ai[p];    if (i > k)     continue;    for (len=0; !Dcs_util.CS_MARKED(w,i); i=parent[i]) {      s[s_offset + len++]=i;      Dcs_util.CS_MARK(w,i);    }    while (len > 0)     s[s_offset + --top]=s[s_offset + --len];  }  for (p=top; p < n; p++)   Dcs_util.CS_MARK(w,s[s_offset + p]);  Dcs_util.CS_MARK(w,k);  return (top);}  }
class C{  private void addDeclAnnotations(Map<String,Set<AnnotationMirror>> declAnnos,Element elt){  if (fromStubFile != null) {    Set<AnnotationMirror> annos=declAnnos.get(ElementUtils.getVerboseName(elt));    if (annos == null) {      annos=AnnotationUtils.createAnnotationSet();      putOrAddToMap(declAnnos,ElementUtils.getVerboseName(elt),annos);    }    annos.add(fromStubFile);  }}  }
class C{  public SubsystemSuspensionLevels(PrincipalUser creator,SubSystem subSystem,Map<Integer,Long> levels){  super(creator);  setSubSystem(subSystem);  setLevels(levels);}  }
class C{  public HtmlCode addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public DataBufferShort(int size){  super(STABLE,TYPE_SHORT,size);  data=new short[size];  bankdata=new short[1][];  bankdata[0]=data;}  }
class C{  public JavaNumberFormatter(double min,double max,double multiplier,boolean allowsNullValue,@Nullable String unit){  super();  initFormats();  setMinimum(min);  setMaximum(max);  setMultiplier(multiplier);  setAllowsNullValue(allowsNullValue);  setOverwriteMode(false);  setUnit(unit);}  }
class C{  public SecP521R1Point(ECCurve curve,ECFieldElement x,ECFieldElement y,boolean withCompression){  super(curve,x,y);  if ((x == null) != (y == null)) {    throw new IllegalArgumentException("Exactly one of the field elements is null");  }  this.withCompression=withCompression;}  }
class C{  public boolean zip(File[] src,File dest){  return false;}  }
class C{  public static UserDTO findById(Integer id){  for (  UserDTO userDTO : users) {    if (userDTO.getId().equals(id)) {      return userDTO;    }  }  return null;}  }
class C{  public int currentAsTarget(){  return currentAsTarget.get();}  }
class C{  private List<UnManagedFileExportRule> applyAllSecurityRules(DDExportInfoDetail export,URI fileSystemId){  List<UnManagedFileExportRule> expRules=new ArrayList<UnManagedFileExportRule>();  Map<String,Map<String,StringSet>> ruleMap=new HashMap<>();  Map<String,DDOptionInfo> ddClients=new HashMap<>();  for (  DDExportClient ddExpClient : export.getClients()) {    String clientName=ddExpClient.getName();    String clientOptions=ddExpClient.getOptions();    DDOptionInfo optionInfo=DDOptionInfo.parseOptions(clientOptions);    ddClients.put(clientName,optionInfo);    if (ruleMap.get(optionInfo.security) == null) {      ruleMap.put(optionInfo.security,new HashMap<String,StringSet>());    }    if (optionInfo.permission.equals(DataDomainApiConstants.PERMISSION_RO)) {      if (ruleMap.get(optionInfo.security).get(DataDomainApiConstants.PERMISSION_RO) == null) {        ruleMap.get(optionInfo.security).put(DataDomainApiConstants.PERMISSION_RO,new StringSet());      }      ruleMap.get(optionInfo.security).get(DataDomainApiConstants.PERMISSION_RO).add(clientName);    }    if (optionInfo.permission.equals(DataDomainApiConstants.PERMISSION_RW)) {      if (ruleMap.get(optionInfo.security).get(DataDomainApiConstants.PERMISSION_RW) == null) {        ruleMap.get(optionInfo.security).put(DataDomainApiConstants.PERMISSION_RW,new StringSet());      }      ruleMap.get(optionInfo.security).get(DataDomainApiConstants.PERMISSION_RW).add(clientName);    }  }  Set<String> securityTypes=ruleMap.keySet();  for (  String secType : securityTypes) {    UnManagedFileExportRule expRule=new UnManagedFileExportRule();    expRule.setDeviceExportId(export.getId());    expRule.setFileSystemId(fileSystemId);    expRule.setExportPath(export.getPath());    expRule.setMountPoint(export.getPath());    expRule.setSecFlavor(secType);    expRule.setAnon(DataDomainApiConstants.ROOT);    if (ruleMap.get(secType).get(DataDomainApiConstants.PERMISSION_RO) != null) {      StringSet roHosts=ruleMap.get(secType).get(DataDomainApiConstants.PERMISSION_RO);      for (      String client : roHosts) {        if (ddClients.get(client).rootMapping.equals(DataDomainApiConstants.ROOT_SQUASH)) {          expRule.setAnon(DataDomainApiConstants.ROOT_SQUASH);        }      }      expRule.setReadOnlyHosts(roHosts);    }    if (ruleMap.get(secType).get(DataDomainApiConstants.PERMISSION_RW) != null) {      StringSet rwHosts=ruleMap.get(secType).get(DataDomainApiConstants.PERMISSION_RW);      for (      String client : rwHosts) {        if (ddClients.get(client).rootMapping.equals(DataDomainApiConstants.ROOT_SQUASH)) {          expRule.setAnon(DataDomainApiConstants.ROOT_SQUASH);        }      }      expRule.setReadWriteHosts(rwHosts);    }    expRules.add(expRule);  }  return expRules;}  }
class C{  public static Address fromP2SHHash(NetworkParameters params,byte[] hash160){  try {    return new Address(params,params.getP2SHHeader(),hash160);  } catch (  WrongNetworkException e) {    throw new RuntimeException(e);  }}  }
class C{  public EasyDccTurnout(int number){  super("ET" + number);  _number=number;}  }
class C{  @Override public void onNewItem(int faceId,Face item){  mFaceGraphic.setId(faceId);}  }
class C{  private String genericTypeAsString(GenericsType genericsType){  String ret=genericsType.getName();  if (genericsType.getUpperBounds() != null) {    ret+=" extends ";    for (int i=0; i < genericsType.getUpperBounds().length; i++) {      ClassNode classNode=genericsType.getUpperBounds()[i];      if (classNode.equals(this)) {        ret+=classNode.getName();      } else {        ret+=classNode.toString(false);      }      if (i + 1 < genericsType.getUpperBounds().length)       ret+=" & ";    }  } else   if (genericsType.getLowerBound() != null) {    ClassNode classNode=genericsType.getLowerBound();    if (classNode.equals(this)) {      ret+=" super " + classNode.getName();    } else {      ret+=" super " + classNode;    }  }  return ret;}  }
class C{  public WebShoppingCartPersisterImpl(final TargetSource tuplizerPool){  this.tuplizerPool=tuplizerPool;}  }
class C{  private static boolean isPartitionTag(String[] partitions,String tagName){  if (partitions != null) {    for (    String partition : partitions) {      if (partition.equals(tagName)) {        return true;      }    }  }  return false;}  }
class C{  public void addDependency(Dependency dependency){  if (dependencies == null) {    dependencies=new ArrayList<Dependency>();    nodeDependencies=new ArrayList<Node>();  }  dependencies.add(dependency);  if (!nodeDependencies.contains(dependency.node)) {    nodeDependencies.add(dependency.node);  }  Node dependencyNode=dependency.node;  if (dependencyNode.nodeDependents == null) {    dependencyNode.nodeDependents=new ArrayList<Node>();  }  dependencyNode.nodeDependents.add(this);}  }
class C{  public boolean isLocked(Iterable<T> items){  for (  T t : items) {    ReentrantLock lock=syncMap.getUnchecked(t);    if (!lock.isHeldByCurrentThread())     return false;  }  return true;}  }
class C{  public Vec3D constrain(AABB box){  return constrain(box.getMin(),box.getMax());}  }
class C{  public ResolvedJavaType instanceClass(){  return instanceClass;}  }
class C{  public CompactSketch<S> compact(){  final long[] keys=new long[getRetainedEntries()];  @SuppressWarnings("unchecked") final S[] summaries=(S[])Array.newInstance(summaries_.getClass().getComponentType(),getRetainedEntries());  int i=0;  for (int j=0; j < keys_.length; j++) {    if (summaries_[j] != null) {      keys[i]=keys_[j];      summaries[i]=summaries_[j].copy();      i++;    }  }  return new CompactSketch<S>(keys,summaries,theta_,isEmpty_);}  }
class C{  public int capacity(){  return internal.capacity();}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  public String toString(int numSets){  if (m_sets.size() == 0) {    return "No frequent items sets found!";  }  StringBuffer result=new StringBuffer();  result.append("" + m_sets.size() + " frequent item sets found");  if (numSets > 0) {    result.append(" , displaying " + numSets);  }  result.append(":\n\n");  int count=0;  for (  FrequentBinaryItemSet i : m_sets) {    if (numSets > 0 && count > numSets) {      break;    }    result.append(i.toString() + "\n");    count++;  }  return result.toString();}  }
class C{  @Inline @Entrypoint public static int intFieldRead(Object ref,Offset offset,int locationMetadata){  if (NEEDS_INT_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().intRead(src,src.toAddress().plus(offset),offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  public void removeListener(INotifyChangedListener notifyChangedListener){  changeNotifier.removeListener(notifyChangedListener);}  }
class C{  private static char toHex(int nibble){  return hexDigit[(nibble & 0xF)];}  }
class C{  public String toString(){  return m_name;}  }
class C{  public RegistrationExceptionBean(ApplicationExceptionBean sup,Reason reason){  super(sup);  setReason(reason);}  }
class C{  private Collection<ScriptCommand> createJvmPropertiesScripts(WebSphere85xInstalledLocalContainer container){  Collection<ScriptCommand> jvmCommands=new ArrayList<ScriptCommand>();  String jvmArgs=getPropertyValue(GeneralPropertySet.JVMARGS);  JvmArguments parsedArguments=JvmArguments.parseArguments(jvmArgs);  jvmCommands.add(factory.setJvmPropertyScript("initialHeapSize",Long.toString(parsedArguments.getInitialHeap(ByteUnit.MEGABYTES))));  jvmCommands.add(factory.setJvmPropertyScript("maximumHeapSize",Long.toString(parsedArguments.getMaxHeap(ByteUnit.MEGABYTES))));  jvmCommands.add(factory.setJvmPropertyScript("genericJvmArguments",parsedArguments.getGenericArgs()));  return jvmCommands;}  }
class C{  static String escapeHtmlData(String s){  return escapeHtml(s,false);}  }
class C{  boolean isBOTTOM(){  return !TOP && (size == 0);}  }
class C{  public static GenericKeyczar createKey(DefaultKeyType type,KeyPurpose purpose,int size) throws KeyczarException {  KeyMetadata metadata=new KeyMetadata("Key",purpose,type);  KeyczarReader reader=new MemoryKeyReader(metadata,null);  GenericKeyczar keyczar=new GenericKeyczar(reader);  keyczar.addVersion(KeyStatus.PRIMARY,size);  return keyczar;}  }
class C{  public String toString(){  return getSchedulingSubpartLabel();}  }
class C{  public void opc_ifnonnull(Label l){  short instrBCI=getLength();  emitByte(opc_ifnonnull);  l.add(this,instrBCI,getLength(),getStack() - 1);  emitShort((short)-1);  decStack();}  }
class C{  public InternalStatisticsDisabledException(String msg){  super(msg);}  }
class C{  public double incrementCount(final E key,final double increment){  final double newVal=getCount(key) + increment;  setCount(key,newVal);  dirty=true;  return newVal;}  }
class C{  public boolean isDeclaredCovariant(){  return declaredCovariant;}  }
class C{  public void onStatusChanged(String provider,int status,Bundle extras){  if (doDebugLogging()) {    mTrackerData.writeEntry(provider,"status change: " + status);  }}  }
class C{  public Collection<DocumentListEntry> uploadFiles(String url,List<String> files,int chunkSize) throws IOException, ServiceException, InterruptedException {  FileUploadProgressListener listener=new FileUploadProgressListener();  ExecutorService executor=Executors.newFixedThreadPool(MAX_CONCURRENT_UPLOADS);  List<ResumableGDataFileUploader> uploaders=Lists.newArrayList();  for (  String fileName : files) {    MediaFileSource mediaFile=getMediaFileSource(fileName);    ResumableGDataFileUploader uploader=new ResumableGDataFileUploader.Builder(docs.service,new URL(url),mediaFile,null).title(mediaFile.getName()).chunkSize(chunkSize).executor(executor).trackProgress(listener,PROGRESS_UPDATE_INTERVAL).build();    uploaders.add(uploader);  }  listener.listenTo(uploaders);  for (  ResumableGDataFileUploader uploader : uploaders) {    uploader.start();  }  while (!listener.isDone()) {    try {      Thread.sleep(100);    } catch (    InterruptedException ie) {      listener.printResults();      throw ie;    }  }  listener.printResults();  return listener.getUploaded();}  }
class C{  public void addUtilizationHistoryValue(final double utilization){  getUtilizationHistory().add(0,utilization);  if (getUtilizationHistory().size() > HISTORY_LENGTH) {    getUtilizationHistory().remove(HISTORY_LENGTH);  }}  }
class C{  private static int convertSQLTypeToValueType(int sqlType,String sqlTypeName){  return convertSQLTypeToValueType(sqlType);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public SimpleThresholdSetter(){  this(DEFAULT_FACTOR);}  }
class C{  public OwnedObjectiveScoreboardEntry(OwnedObjective objective,ScoreboardDisplay display,Team attacker){  super(display,"",display.getEntry(" " + ChatColor.WHITE + objective.getComponent().toPlainText(),null));  this.objective=objective;  this.attacker=attacker;  if (objective instanceof EntryUpdater) {    ((EntryUpdater)objective).getEntryHolder().addEntry(this);  }}  }
class C{  public Flow addTask(int waveSeq,Task task){  if (task != null) {    Wave wave=mWaveMap.get(waveSeq);    if (wave == null) {      wave=new Wave(waveSeq,ProcessUtils.myProcessName());      mWaveMap.put(waveSeq,wave);    }    wave.addTask(task);    mTaskToWaveMap.put(task.getName(),waveSeq);  }  return this;}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    int zzAttributes=zzAttrL[zzState];    if ((zzAttributes & 1) == 1) {      zzAction=zzState;    }    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL) {          zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL);          zzCurrentPosL+=Character.charCount(zzInput);        } else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL);            zzCurrentPosL+=Character.charCount(zzInput);          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {      zzAtEOF=true;      return null;    } else {switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 1:{          return com.intellij.psi.TokenType.BAD_CHARACTER;        }case 76:      break;case 2:{      return com.intellij.psi.TokenType.WHITE_SPACE;    }case 77:  break;case 3:{  return DIVISION;}case 78:break;case 4:{return DOUBLE_QUOTED_STRING;}case 79:break;case 5:{return SINGLE_QUOTED_STRING;}case 80:break;case 6:{return ID;}case 81:break;case 7:{return COLON;}case 82:break;case 8:{return AND;}case 83:break;case 9:{return OR;}case 84:break;case 10:{return INTEGER_LITERAL;}case 85:break;case 11:{return PLUS;}case 86:break;case 12:{return MINUS;}case 87:break;case 13:{return L_BRACKET;}case 88:break;case 14:{return R_BRACKET;}case 89:break;case 15:{return L_PARREN;}case 90:break;case 16:{return R_PARREN;}case 91:break;case 17:{return L_CURLY;}case 92:break;case 18:{return R_CURLY;}case 93:break;case 19:{return COMMA;}case 94:break;case 20:{return LESS;}case 95:break;case 21:{return GREATER;}case 96:break;case 22:{return ESCLAMATION;}case 97:break;case 23:{return EQ;}case 98:break;case 24:{return MULTIPLY;}case 99:break;case 25:{return MODULO;}case 100:break;case 26:{return AT;}case 101:break;case 27:{return QUESTION;}case 102:break;case 28:{return DOLLAR;}case 103:break;case 29:{return HASH;}case 104:break;case 30:{return XOR;}case 105:break;case 31:{return LINE_COMMENT;}case 106:break;case 32:{return RULE_TYPE_ID;}case 107:break;case 33:{return AND_AND;}case 108:break;case 34:{return OR_OR;}case 109:break;case 35:{return DOUBLE_LITERAL;}case 110:break;case 36:{return RULE_BINARY_OPERATORS;}case 111:break;case 37:{return ARROW_TOKEN;}case 112:break;case 38:{return AS;}case 113:break;case 39:{return IS;}case 114:break;case 40:{return OR_KEYWORD;}case 115:break;case 41:{return SHIFT_LEFT;}case 116:break;case 42:{return LESS_EQUAL;}case 117:break;case 43:{return SHIFT_RIGHT;}case 118:break;case 44:{return GREATER_EQUAL;}case 119:break;case 45:{return NOT_EQUAL;}case 120:break;case 46:{return EQUAL;}case 121:break;case 47:{return SIMILAR;}case 122:break;case 48:{return RULE_ANY_REGEX;}case 123:break;case 49:{return RULE_MIME_TYPE;}case 124:break;case 50:{return RULE_UNARY_OPERATOS;}case 125:break;case 51:{return RULE_ANY_DATE;}case 126:break;case 52:{return DOCUMENT_SEPARATOR;}case 127:break;case 53:{return RULE_BINARY_CLOJURE_OPERATORS;}case 128:break;case 54:{return AND_KEYWORD;}case 129:break;case 55:{return SHIFT_RIGHT_LOGICAL;}case 130:break;case 56:{return VERSION_DIRECTIVE_KEYWORD;}case 131:break;case 57:{return RULE_NULL_LITERAL;}case 132:break;case 58:{return TRUE_LITERAL;}case 133:break;case 59:{return WITH;}case 134:break;case 60:{return WHEN;}case 135:break;case 61:{return VAR_DIRECTIVE_KEYWORD;}case 136:break;case 62:{return NAMESPACE_URI;}case 137:break;case 63:{return USING;}case 138:break;case 64:{return RULE_MATCH_LITERAL;}case 139:break;case 65:{return FALSE_LITERAL;}case 140:break;case 66:{return TYPE_DIRECTIVE_KEYWORD;}case 141:break;case 67:{return UNLESS;}case 142:break;case 68:{return RULE_RANGE_LITERAL;}case 143:break;case 69:{return INPUT_DIRECTIVE_KEYWORD;}case 144:break;case 70:{return REPLACE;}case 145:break;case 71:{return DEFAULT;}case 146:break;case 72:{return OUTPUT_DIRECTIVE_KEYWORD;}case 147:break;case 73:{return OTHERWISE;}case 148:break;case 74:{return FUNCTION_DIRECTIVE_KEYWORD;}case 149:break;case 75:{return NAMESPACE_DIRECTIVE_KEYWORD;}case 150:break;default :zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static char[] encode(byte[] in,int iOff,int iLen){  int oDataLen=(iLen * 4 + 2) / 3;  int oLen=((iLen + 2) / 3) * 4;  char[] out=new char[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++] & 0xff;    int i1=ip < iEnd ? in[ip++] & 0xff : 0;    int i2=ip < iEnd ? in[ip++] & 0xff : 0;    int o0=i0 >>> 2;    int o1=((i0 & 3) << 4) | (i1 >>> 4);    int o2=((i1 & 0xf) << 2) | (i2 >>> 6);    int o3=i2 & 0x3F;    out[op++]=map1[o0];    out[op++]=map1[o1];    out[op]=op < oDataLen ? map1[o2] : '=';    op++;    out[op]=op < oDataLen ? map1[o3] : '=';    op++;  }  return out;}  }
class C{  public static Map<String,String> deserialize(final byte[] b){  try {    if (b == null) {      return null;    }    if (b.length == 0) {      return (Collections.<String,String>emptyMap());    }    final ByteBuffer encryptionContextBytes=ByteBuffer.wrap(b);    final int entryCount=encryptionContextBytes.getShort();    if (entryCount <= 0 || entryCount > Short.MAX_VALUE) {      throw new AwsCryptoException("The number of entries in encryption context must be greater than 0 and smaller than " + Short.MAX_VALUE);    }    final CharsetDecoder decoder=StandardCharsets.UTF_8.newDecoder();    decoder.onMalformedInput(CodingErrorAction.REPORT);    decoder.onUnmappableCharacter(CodingErrorAction.REPORT);    final Map<String,String> result=new HashMap<>(entryCount);    for (int i=0; i < entryCount; i++) {      final int keyLen=encryptionContextBytes.getShort();      if (keyLen <= 0 || keyLen > Short.MAX_VALUE) {        throw new AwsCryptoException("Key length must be greater than 0 and smaller than " + Short.MAX_VALUE);      }      final ByteBuffer keyBytes=encryptionContextBytes.slice();      keyBytes.limit(keyLen);      encryptionContextBytes.position(encryptionContextBytes.position() + keyLen);      final int valueLen=encryptionContextBytes.getShort();      if (valueLen <= 0 || valueLen > Short.MAX_VALUE) {        throw new AwsCryptoException("Value length must be greater than 0 and smaller than " + Short.MAX_VALUE);      }      final ByteBuffer valueBytes=encryptionContextBytes.slice();      valueBytes.limit(valueLen);      encryptionContextBytes.position(encryptionContextBytes.position() + valueLen);      final CharBuffer keyChars=decoder.decode(keyBytes);      final CharBuffer valueChars=decoder.decode(valueBytes);      if (result.put(keyChars.toString(),valueChars.toString()) != null) {        throw new AwsCryptoException("Encryption context contains duplicate entries.");      }    }    return result;  } catch (  CharacterCodingException e) {    throw new IllegalArgumentException("Encryption context contains an invalid unicode character");  }catch (  BufferUnderflowException e) {    throw new AwsCryptoException("Invalid encryption context. Expected more bytes.",e);  }}  }
class C{  public static Text createText(Composite parent,int style,int hspan){  Text t=new Text(parent,style);  t.setFont(parent.getFont());  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  t.setLayoutData(gd);  return t;}  }
class C{  public static AddHealthListenerResponse create(DistributionManager dm,InternalDistributedMember recipient,GemFireHealthConfig cfg){  AddHealthListenerResponse m=new AddHealthListenerResponse();  m.setRecipient(recipient);  dm.createHealthMonitor(recipient,cfg);  m.listenerId=dm.getHealthMonitor(recipient).getId();  return m;}  }
class C{  public void addHypothesis(Candidate complete){  Hypothesis added=new Hypothesis(complete);  String taskName;  if (deduper.containsKey(added)) {    taskName="recombining hypothesis";    Hypothesis existing=deduper.get(added);    existing.absorb(added);  } else {    taskName="creating new hypothesis";    add(added);    deduper.put(added,added);  }  if (LOG.isDebugEnabled()) {    LOG.debug("{} from ( ... {} )",taskName,complete.getHypothesis().getRule().getEnglishWords());    LOG.debug("        base score {}",complete.computeResult().getBaseCost());    LOG.debug("        covering {}-{}",complete.getSpan().start - 1,complete.getSpan().end - 2);    LOG.debug("        translated as: {}",complete.getPhraseRule().getEnglishWords());    LOG.debug("        score {} + future cost {} = {}",complete.computeResult().getTransitionCost(),complete.getFutureEstimate(),complete.computeResult().getTransitionCost() + complete.getFutureEstimate());  }}  }
class C{  public void decThreadIdentifiers(){  this._stats.incInt(_threadIdentifiersId,-1);}  }
class C{  private void drawHorizontalDividers(Canvas canvas,RecyclerView parent){  int parentTop=parent.getPaddingTop();  int parentBottom=parent.getHeight() - parent.getPaddingBottom();  for (int i=0; i < mNumColumns; i++) {    View child=parent.getChildAt(i);    RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();    int parentLeft=child.getRight() + params.rightMargin;    int parentRight=parentLeft + mHorizontalDivider.getIntrinsicWidth();    mHorizontalDivider.setBounds(parentLeft,parentTop,parentRight,parentBottom);    mHorizontalDivider.draw(canvas);  }}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  StoragePoolList response=client.get(StoragePoolList.class,baseUrl);  return defaultList(response.getPools());}  }
class C{  public TodolistExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  private ExpressionException invalidPosition(int pos){  return new ExpressionException("Element at position [" + pos + "] doesn't exist in array");}  }
class C{  public static void main(String... args) throws Exception {  new LinkChecker().run(args);}  }
class C{  public OutputAnalyzer(Process process) throws IOException {  OutputBuffer output=ProcessTools.getOutput(process);  exitValue=process.exitValue();  this.stdout=output.getStdout();  this.stderr=output.getStderr();}  }
class C{  public void runTest(){  sawCacheDump=false;  try {    VelocityContext vc=new VelocityContext();    Object foo=null;    TestClassloader cl=new TestClassloader();    Class fooclass=cl.loadClass("Foo");    foo=fooclass.newInstance();    vc.put("foo",foo);    StringWriter writer=new StringWriter();    ve.evaluate(vc,writer,"test","$foo.doIt()");    if (!writer.toString().equals(OUTPUT)) {      fail("Output from doIt() incorrect");    }    cl=new TestClassloader();    fooclass=cl.loadClass("Foo");    foo=fooclass.newInstance();    vc.put("foo",foo);    writer=new StringWriter();    ve.evaluate(vc,writer,"test","$foo.doIt()");    if (!writer.toString().equals(OUTPUT)) {      fail("Output from doIt() incorrect");    }  } catch (  Exception ee) {    System.out.println("ClassloaderChangeTest : " + ee);  }  if (!sawCacheDump) {    fail("Didn't see introspector cache dump.");  }}  }
class C{  public static FileFooter convertFileFooter(List<BlockletInfoColumnar> infoList,int numCols,int[] cardinalities,List<ColumnSchema> columnSchemaList,SegmentProperties segmentProperties) throws IOException {  SegmentInfo segmentInfo=new SegmentInfo();  segmentInfo.setNum_cols(columnSchemaList.size());  segmentInfo.setColumn_cardinalities(CarbonUtil.convertToIntegerList(cardinalities));  FileFooter footer=new FileFooter();  footer.setNum_rows(getTotalNumberOfRows(infoList));  footer.setSegment_info(segmentInfo);  for (  BlockletInfoColumnar info : infoList) {    footer.addToBlocklet_index_list(getBlockletIndex(info));  }  footer.setTable_columns(columnSchemaList);  for (  BlockletInfoColumnar info : infoList) {    footer.addToBlocklet_info_list(getBlockletInfo(info,columnSchemaList,segmentProperties));  }  return footer;}  }
class C{  public static boolean hasJellyBeanMr2(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2;}  }
class C{  @Override public Void visitConditionalExpression(ConditionalExpressionTree node,Void p){  AnnotatedTypeMirror cond=atypeFactory.getAnnotatedType(node);  this.commonAssignmentCheck(cond,node.getTrueExpression(),"conditional.type.incompatible");  this.commonAssignmentCheck(cond,node.getFalseExpression(),"conditional.type.incompatible");  return super.visitConditionalExpression(node,p);}  }
class C{  static public void assertLeftAligned(View first,View second){  int[] xy=new int[2];  first.getLocationOnScreen(xy);  int firstLeft=xy[0];  second.getLocationOnScreen(xy);  int secondLeft=xy[0];  assertEquals("views are not left aligned",firstLeft,secondLeft);}  }
class C{  @Override public int compare(byte[] bterm1,int offset1,int length1,byte[] bterm2,int offset2,int length2){  if (USE_HADOOP_TEXT) {    try {      return Text.decode(bterm1,offset1,length1).trim().compareTo(Text.decode(bterm2,offset2,length2).trim());    } catch (    CharacterCodingException e) {      return 0;    }  } else {    try {      DataInputStream b1S=new DataInputStream(new ByteArrayInputStream(bterm1,offset1,length1));      DataInputStream b2S=new DataInputStream(new ByteArrayInputStream(bterm2,offset2,length2));      String term1=b1S.readUTF();      String term2=b2S.readUTF();      return term1.trim().compareTo(term2.trim());    } catch (    IOException e) {      System.err.println("ERROR during raw comparision of term objects, unable to read input streams.");      e.printStackTrace();    }    return 0;  }}  }
class C{  protected int countSteps(LocPathIterator lpi){  if (lpi instanceof WalkingIterator) {    WalkingIterator wi=(WalkingIterator)lpi;    AxesWalker aw=wi.getFirstWalker();    int count=0;    while (null != aw) {      count++;      aw=aw.getNextWalker();    }    return count;  } else   return 1;}  }
class C{  int[] randomPermutation(int length){  int[] permutation=new int[length];  for (int i=0; i < length; i++) {    permutation[i]=i;  }  PRNG.shuffle(permutation);  return permutation;}  }
class C{  @Override public Range findDomainBounds(XYDataset dataset){  return findDomainBounds(dataset,false);}  }
class C{  public final void walkGraph(Hashtable semNodesTable){  Integer uid=new Integer(myUID);  if (semNodesTable.get(uid) != null)   return;  semNodesTable.put(new Integer(myUID),this);}  }
class C{  public void focusLost(FocusEvent e){  m_setting=true;  try {    Timestamp ts=getTimestamp();    if (ts == null)     fireVetoableChange(m_columnName,m_oldText,null); else     fireVetoableChange(m_columnName,m_oldText,ts);  } catch (  PropertyVetoException pve) {  }  m_setting=false;  if (e.isTemporary())   return;  if (m_text == null || m_text.getText() == null)   return;  Object value=getValue();  if (value == null && isMandatory()) {    Timestamp ts=startCalendar(this,getTimestamp(),m_format,m_displayType,m_title);    if (ts != null) {      setValue(ts);    } else {      setValue(m_oldText);    }  } else   setValue(value);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void removeFromPortMap(IOFSwitch sw,MacAddress mac,VlanVid vlan){  if (vlan == VlanVid.FULL_MASK) {    vlan=VlanVid.ofVlan(0);  }  Map<MacVlanPair,OFPort> swMap=macVlanToSwitchPortMap.get(sw);  if (swMap != null) {    swMap.remove(new MacVlanPair(mac,vlan));  }}  }
class C{  private boolean showGroupCounter(){  return true;}  }
class C{  private Instances makeHeader(){  ArrayList<Attribute> fv=new ArrayList<Attribute>();  fv.add(new Attribute(TRUE_POS_NAME));  fv.add(new Attribute(FALSE_NEG_NAME));  fv.add(new Attribute(FALSE_POS_NAME));  fv.add(new Attribute(TRUE_NEG_NAME));  fv.add(new Attribute(FP_RATE_NAME));  fv.add(new Attribute(TP_RATE_NAME));  fv.add(new Attribute(PRECISION_NAME));  fv.add(new Attribute(RECALL_NAME));  fv.add(new Attribute(FALLOUT_NAME));  fv.add(new Attribute(FMEASURE_NAME));  fv.add(new Attribute(SAMPLE_SIZE_NAME));  fv.add(new Attribute(LIFT_NAME));  fv.add(new Attribute(THRESHOLD_NAME));  return new Instances(RELATION_NAME,fv,100);}  }
class C{  public Paint createPaint(BridgeContext ctx,Element paintElement,Element paintedElement,GraphicsNode paintedNode,float opacity){  opacity=extractOpacity(paintElement,opacity,ctx);  return extractColor(paintElement,opacity,ctx);}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  boolean isSocketScheme(String scheme){  return false;}  }
class C{  private void stopTimer(Timer timer){  if (timer != null && timer.isRunning()) {    timer.stop();  }}  }
class C{  public boolean appliesOnlyToBlockScopedElements(){  return false;}  }
class C{  protected boolean startDBProcess(String ProcedureName){  log.fine(ProcedureName + "(" + m_pi.getAD_PInstance_ID()+ ")");  boolean started=false;  String trxName=m_trx != null ? m_trx.getTrxName() : null;  if (m_IsServerProcess) {    Server server=CConnection.get().getServer();    try {      if (server != null) {        m_pi=server.dbProcess(m_pi,ProcedureName);        log.finest("server => " + m_pi);        started=true;      }    } catch (    UndeclaredThrowableException ex) {      Throwable cause=ex.getCause();      if (cause != null) {        if (cause instanceof InvalidClassException)         log.log(Level.SEVERE,"Version Server <> Client: " + cause.toString() + " - "+ m_pi,ex); else         log.log(Level.SEVERE,"AppsServer error(1b): " + cause.toString() + " - "+ m_pi,ex);      } else {        log.log(Level.SEVERE," AppsServer error(1) - " + m_pi,ex);        cause=ex;      }      m_pi.setSummary(Msg.getMsg(Env.getCtx(),"ProcessRunError") + " " + cause.getLocalizedMessage());      m_pi.setError(true);      return false;    }catch (    Exception ex) {      Throwable cause=ex.getCause();      if (cause == null)       cause=ex;      log.log(Level.SEVERE,"AppsServer error - " + m_pi,cause);      m_pi.setSummary(Msg.getMsg(Env.getCtx(),"ProcessRunError") + " " + cause.getLocalizedMessage());      m_pi.setError(true);      return false;    }  }  if (!started) {    return ProcessUtil.startDatabaseProcedure(m_pi,ProcedureName,m_trx);  }  return true;}  }
class C{  protected void init(String uri) throws MalformedURLException {  this.uri=uri;  parse(uri);}  }
class C{  @Deprecated public void readFields(DataInput in) throws IOException {  this.comparator=new BooleanExpressionComparator();  this.comparator.readFields(in);}  }
class C{  public String toString(){  return source.toString();}  }
class C{  public void add(final String clazz,final String subclazz,final boolean blocked){  entries.add(new Entry(clazz,subclazz,blocked));}  }
class C{  private static int[] computeContiguousOrder(int[] values,int start,int limit){  int[] result=new int[limit - start];  for (int i=0; i < result.length; i++) {    result[i]=i + start;  }  for (int i=0; i < result.length - 1; i++) {    int minIndex=i;    int currentValue=values[result[minIndex]];    for (int j=i; j < result.length; j++) {      if (values[result[j]] < currentValue) {        minIndex=j;        currentValue=values[result[minIndex]];      }    }    int temp=result[i];    result[i]=result[minIndex];    result[minIndex]=temp;  }  if (start != 0) {    for (int i=0; i < result.length; i++) {      result[i]-=start;    }  }  int k;  for (k=0; k < result.length; k++) {    if (result[k] != k) {      break;    }  }  if (k == result.length) {    return null;  }  return createInverseMap(result);}  }
class C{  @Override protected void buildSprites(IEntity entity,final Map<Object,Sprite> map){  final SpriteStore store=SpriteStore.get();  ZoneInfo info=ZoneInfo.get();  final Sprite tiles=store.getModifiedSprite("data/sprites/combat/blood_" + entity.getEntityClass() + ".png",info.getZoneColor(),info.getColorMethod());  final int theight=tiles.getHeight();  int i=0;  for (int y=0; y < theight; y+=IGameScreen.SIZE_UNIT_PIXELS) {    map.put(Integer.valueOf(i++),store.getTile(tiles,0,y,IGameScreen.SIZE_UNIT_PIXELS,IGameScreen.SIZE_UNIT_PIXELS));  }}  }
class C{  public final boolean isEditable(){  return editable;}  }
class C{  public boolean isAscending(){  return this.ascending;}  }
class C{  public byte[] encrypt(byte[] bytes){  byte[] resp=null;  try {    resp=crypt(bytes,Cipher.ENCRYPT_MODE);  } catch (  Exception e) {    return null;  }  return resp;}  }
class C{  public static OptionalParameter.Short newSarMsgRefNum(int value){  return newSarMsgRefNum((byte)value);}  }
class C{  public IntIterator outEdgeRows(int node){  return edgeRows(node,OUTEDGES);}  }
class C{  private Mutable<ILogicalOperator> copyAndReinitProbeSubTree(OptimizableOperatorSubTree probeSubTree,ILogicalExpression joinCond,IOptimizableFuncExpr optFuncExpr,List<LogicalVariable> originalSubTreePKs,List<LogicalVariable> surrogateSubTreePKs,IOptimizationContext context) throws AlgebricksException {  probeSubTree.getPrimaryKeyVars(originalSubTreePKs);  LinkedHashMap<LogicalVariable,LogicalVariable> newProbeSubTreeVarMap=new LinkedHashMap<>();  LinkedHashMap<LogicalVariable,LogicalVariable> joinInputSubTreeVarMap=new LinkedHashMap<>();  List<LogicalVariable> liveVars=new ArrayList<LogicalVariable>();  VariableUtilities.getLiveVariables(probeSubTree.getRoot(),liveVars);  for (  LogicalVariable var : liveVars) {    joinInputSubTreeVarMap.put(var,var);  }  for (int i=0; i < optFuncExpr.getNumLogicalVars(); i++) {    joinInputSubTreeVarMap.put(optFuncExpr.getLogicalVar(i),context.newVar());    newProbeSubTreeVarMap.put(optFuncExpr.getLogicalVar(i),optFuncExpr.getLogicalVar(i));  }  for (int i=0; i < originalSubTreePKs.size(); i++) {    LogicalVariable newPKVar=context.newVar();    surrogateSubTreePKs.add(newPKVar);    joinInputSubTreeVarMap.put(originalSubTreePKs.get(i),newPKVar);    newProbeSubTreeVarMap.put(originalSubTreePKs.get(i),originalSubTreePKs.get(i));  }  LogicalOperatorDeepCopyWithNewVariablesVisitor firstDeepCopyVisitor=new LogicalOperatorDeepCopyWithNewVariablesVisitor(context,context,newProbeSubTreeVarMap);  ILogicalOperator newProbeSubTree=firstDeepCopyVisitor.deepCopy(probeSubTree.getRoot());  inferTypes(newProbeSubTree,context);  Mutable<ILogicalOperator> newProbeSubTreeRootRef=new MutableObject<ILogicalOperator>(newProbeSubTree);  LogicalOperatorDeepCopyWithNewVariablesVisitor secondDeepCopyVisitor=new LogicalOperatorDeepCopyWithNewVariablesVisitor(context,context,joinInputSubTreeVarMap);  ILogicalOperator joinInputSubTree=secondDeepCopyVisitor.deepCopy(probeSubTree.getRoot());  inferTypes(joinInputSubTree,context);  probeSubTree.getRootRef().setValue(joinInputSubTree);  Mutable<ILogicalOperator> originalProbeSubTreeRootRef=probeSubTree.getRootRef();  Dataset origDataset=probeSubTree.getDataset();  ARecordType origRecordType=probeSubTree.getRecordType();  probeSubTree.initFromSubTree(newProbeSubTreeRootRef);  probeSubTree.setDataset(origDataset);  probeSubTree.setRecordType(origRecordType);  Map<LogicalVariable,LogicalVariable> varMapping=firstDeepCopyVisitor.getInputToOutputVariableMapping();  for (  Map.Entry<LogicalVariable,LogicalVariable> varMapEntry : varMapping.entrySet()) {    if (varMapEntry.getKey() != varMapEntry.getValue()) {      joinCond.substituteVar(varMapEntry.getKey(),varMapEntry.getValue());    }  }  return originalProbeSubTreeRootRef;}  }
class C{  public synchronized int size(){  return count;}  }
class C{  protected void notify(Intent intent){  LocalBroadcastManager.getInstance(getContext()).sendBroadcast(intent);}  }
class C{  @Override public Long lrem(final String key,final long count,final String value){  checkIsInMultiOrPipeline();  client.lrem(key,count,value);  return client.getIntegerReply();}  }
class C{  public boolean isInit(){synchronized (mInitLock) {    return mConfiguration != null;  }}  }
class C{  public StringUtilsTest(String name){  super(name);}  }
class C{  public void appendToDocNoFG(String text,Font f,Color bg,boolean underline){  appendToDoc(text,f,null,bg,underline,false);}  }
class C{  public GetRequest fields(String... fields){  this.fields=fields;  return this;}  }
class C{  public Address toAddress(NetworkParameters params){  byte[] hash160=Utils.sha256hash160(pub);  return new Address(params,hash160);}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  @Override public ArrayList<StaticCluster> clusterer(MapView mapView){  ArrayList<StaticCluster> clusters=new ArrayList<StaticCluster>();  convertRadiusToMeters(mapView);  mClonedMarkers=new ArrayList<Marker>(mItems);  while (!mClonedMarkers.isEmpty()) {    Marker m=mClonedMarkers.get(0);    StaticCluster cluster=createCluster(m,mapView);    clusters.add(cluster);  }  return clusters;}  }
class C{  protected RectangleConstraint toContentConstraint(RectangleConstraint c){  ParamChecks.nullNotPermitted(c,"c");  if (c.equals(RectangleConstraint.NONE)) {    return c;  }  double w=c.getWidth();  Range wr=c.getWidthRange();  double h=c.getHeight();  Range hr=c.getHeightRange();  double ww=trimToContentWidth(w);  double hh=trimToContentHeight(h);  Range wwr=trimToContentWidth(wr);  Range hhr=trimToContentHeight(hr);  return new RectangleConstraint(ww,wwr,c.getWidthConstraintType(),hh,hhr,c.getHeightConstraintType());}  }
class C{  final synchronized boolean updateClosure(final int t,final int u,final boolean insert){  final int[] order=(insert ? getOrder(t,u) : getOrder());  final int n=order.length;  if (DEBUG) {    log.debug("W:: t(" + t + ") -> u("+ u+ "), insert="+ insert+ ", size="+ n);  }  final int max=Integer.MAX_VALUE;  for (int s=0; s < n; s++) {    final int os=order[s];    if (os == t)     continue;    for (int v=0; v < n; v++) {      final int ov=order[v];      if (ov == u)       continue;      if (DEBUG) {        log.debug("M[s=" + os + ",v="+ ov+ "] := "+ "M[s="+ os+ ",v="+ ov+ "]("+ M[os][ov]+ ") +/- "+ "M[s="+ os+ ",t="+ t+ "]("+ M[os][t]+ ") . "+ "M[u="+ u+ ",v="+ ov+ "]("+ M[u][ov]+ ")");      }      if (insert) {        long val=M[os][ov] + (M[os][t] * M[u][ov]);        if (val > max)         throw new ArithmeticException("overflow");        M[os][ov]=(int)val;      } else {        M[os][ov]-=M[os][t] * M[u][ov];      }    }    if (DEBUG) {      log.debug("M[s=" + os + ",u="+ u+ "] := "+ "M[s="+ os+ ",u="+ u+ "]("+ M[os][u]+ ") +/- "+ "M[s="+ os+ ",t="+ t+ "]("+ M[os][t]+ ")");    }    if (insert) {      long val=M[os][u] + M[os][t];      if (val > max)       throw new ArithmeticException("overflow");      M[os][u]=(int)val;    } else {      M[os][u]-=M[os][t];    }  }  for (int v=0; v < n; v++) {    final int ov=order[v];    if (ov == u)     continue;    if (DEBUG) {      log.debug("M[t=" + t + ",v="+ ov+ "] := "+ "M[t="+ t+ ",v="+ ov+ "]("+ M[t][ov]+ ") +/- "+ "M[u="+ u+ ",v="+ ov+ "]("+ M[t][ov]+ ")");    }    if (insert) {      long val=M[t][ov] + M[u][ov];      if (val > max)       throw new ArithmeticException("overflow");      M[t][ov]=(int)val;    } else {      M[t][ov]-=M[u][ov];    }  }  if (DEBUG) {    log.debug("M[t=" + t + ",u="+ u+ "] := "+ "M[t="+ t+ ",u="+ u+ "]("+ M[t][u]+ ") +/- 1");  }  if (insert) {    if (M[t][u] == max)     throw new ArithmeticException("overflow");    M[t][u]+=1;  } else {    M[t][u]-=1;  }  for (int s=0; s < n; s++) {    final int os=order[s];    if (M[os][os] > 0) {      if (DEBUG) {        log.debug("deadlock: M[" + os + ","+ os+ "]="+ M[os][os]);      }      return false;    }  }  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void createSampler(){  this.sampler=glGenSamplers();  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);}  }
class C{  public boolean isApproved(){  return STATUS_Approved.equals(m_status);}  }
class C{  public CloseFileAction(Application app,@Nullable View view){  super(app,view);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public static AlignedImage alignImage(BufferedImage sourceImage,float[] latitudes,float[] longitudes) throws InterruptedException {  return alignImage(sourceImage,latitudes,longitudes,null,null);}  }
class C{  public boolean monthAfter(DateOnlyCalendar other){  int day=other.get(DAY_OF_MONTH);  other.set(DAY_OF_MONTH,other.getActualMaximum(DAY_OF_MONTH));  boolean after=getTimeInMillis() > other.getTimeInMillis();  other.set(DAY_OF_MONTH,day);  return after;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(localName03.class,args);}  }
class C{  public static final void showGUIMessage(final String message_string,final String title){  StringBuilder output_string=new StringBuilder("<HTML><BODY><CENTER><FONT COLOR=black>");  final StringTokenizer lines=new StringTokenizer(message_string,"\n");  while (lines.hasMoreTokens()) {    output_string.append(lines.nextToken()).append("</FONT></CENTER><CENTER><FONT COLOR=black>");  }  output_string.append("</FONT></CENTER></BODY></HTML>");  final JLabel text_message=new JLabel(output_string.toString());  text_message.setBackground(Color.white);  final JPanel display=new JPanel();  display.setLayout(new BorderLayout());  display.add(text_message,BorderLayout.CENTER);  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);  contentPane.setVisible(true);}  }
class C{  public double distance(Coord other){  double dx=this.x - other.x;  double dy=this.y - other.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  @Deprecated public static Favicon create(String encodedString){  return new Favicon(encodedString);}  }
class C{  protected void buildActions(final List<String> list){  if (entity.getRPObject().has("menu")) {    list.add(entity.getRPObject().get("menu"));  }  list.add(ActionType.LOOK.getRepresentation());}  }
class C{  public int updateAndGetDistance(String name,int distance,String type){  int newDistance=0;  Connection conn=getSQLConnection();  try (Statement st=conn.createStatement()){    if (distance == 0) {      ResultSet rs=st.executeQuery("SELECT " + type + " FROM "+ tablePrefix+ type+ " WHERE playername = '"+ name+ "'");      while (rs.next()) {        newDistance=rs.getInt(type);      }    } else {      if (databaseType == POSTGRESQL) {        st.execute("INSERT INTO " + tablePrefix + type+ " VALUES ('"+ name+ "', "+ distance+ ")"+ " ON CONFLICT (playername) DO UPDATE SET ("+ type+ ")=('"+ distance+ "')");      } else {        st.execute("REPLACE INTO " + tablePrefix + type+ " VALUES ('"+ name+ "', "+ distance+ ")");      }    }  } catch (  SQLException e) {    plugin.getLogger().log(Level.SEVERE,"SQL error while handling " + type + " registration: ",e);  }  return newDistance;}  }
class C{  @Override protected boolean afterDelete(boolean success){  if (success && getC_OrderLine_ID() != 0) {    MOrderLine orderLine=new MOrderLine(getCtx(),getC_OrderLine_ID(),get_TrxName());    if (getM_InOutLine_ID() != 0)     orderLine.setQtyDelivered(orderLine.getQtyDelivered().subtract(getQty()));    if (getC_InvoiceLine_ID() != 0)     orderLine.setQtyInvoiced(orderLine.getQtyInvoiced().subtract(getQty()));    return orderLine.save(get_TrxName());  }  return success;}  }
class C{  public FactoryConfigurationError(Exception e,String msg){  super(msg);  this.exception=e;}  }
class C{  public boolean hasMajorCode(){  return fieldSetFlags()[0];}  }
class C{  public boolean isStreaming(){  return false;}  }
class C{  public IndexColumn(String columnName){  name=columnName;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 42) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private void replacePackageName(String filePath){  try {    Path path=Paths.get(filePath);    Charset charset=StandardCharsets.UTF_8;    String content=new String(Files.readAllBytes(path),charset);    content=content.replaceAll("com.fujitsu.bss.app","org.oscm.app");    Files.write(path,content.getBytes(charset));  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void addAnyTransition(int source,int dest){  builder.addTransition(source,dest,getTermID(null));}  }
class C{  public void assignPersistenceId(long id){  persistenceId=id;}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (encoder != null) {      drainEncoder();      flushBytes(false);      out.close();      encoder=null;      bytes=null;    }  }}  }
class C{  public void upsert(final String key){  upsert(key,1);}  }
class C{  private double calculateRelation(MutableCoord P1,MutableCoord P2,MutableCoord P3){  double d=distancePointLinesegment(P1,P2,P3);  double r=calcEuclideanDistance(P1,P3);  double dist1=Math.sqrt((r * r) - (d * d));  double dist2=calcEuclideanDistance(P1,P2);  double rel=dist1 / dist2;  return rel;}  }
class C{  public JSONTokener(String s){  this.myIndex=0;  this.mySource=s;}  }
class C{  private void readAndVerifyVector(byte[] oracle,InputStream testInput) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  int c;  while ((c=testInput.read()) != -1) {    baos.write(c);  }  baos.flush();  byte[] testBytes=baos.toByteArray();  Assert.assertArrayEquals("Checking bit vector contents",oracle,testBytes);}  }
class C{  private static String[] moveToTrashCommand(File file){  String path=null;  try {    path=file.getCanonicalPath();  } catch (  IOException err) {    LOG.error("IOException",err);    path=file.getAbsolutePath();  }  String fileOrFolder=(file.isFile() ? "file" : "folder");  String[] command=new String[]{"osascript","-e","set unixPath to \"" + path + "\"","-e","set hfsPath to POSIX file unixPath","-e","tell application \"Finder\"","-e","if " + fileOrFolder + " hfsPath exists then","-e","move " + fileOrFolder + " hfsPath to trash","-e","end if","-e","end tell"};  return command;}  }
class C{  boolean isDuplicateNameColumn(int column){  return duplicateNameColumn.contains(column);}  }
class C{  public static long remainder(long dividend,long divisor){  if (divisor < 0) {    if (compare(dividend,divisor) < 0) {      return dividend;    } else {      return dividend - divisor;    }  }  if (dividend >= 0) {    return dividend % divisor;  }  long quotient=((dividend >>> 1) / divisor) << 1;  long rem=dividend - quotient * divisor;  return rem - (compare(rem,divisor) >= 0 ? divisor : 0);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.227 -0500",hash_original_method="57D106C9A5F0931B48EF6F0A7020131B",hash_generated_method="E6DC0239745199AB2318C248A870A99E") private static void invokeStaticMain(String className,String[] argv) throws ZygoteInit.MethodAndArgsCaller {  Class<?> cl;  try {    cl=Class.forName(className);  } catch (  ClassNotFoundException ex) {    throw new RuntimeException("Missing class when invoking static main " + className,ex);  }  Method m;  try {    m=cl.getMethod("main",new Class[]{String[].class});  } catch (  NoSuchMethodException ex) {    throw new RuntimeException("Missing static main on " + className,ex);  }catch (  SecurityException ex) {    throw new RuntimeException("Problem getting static main on " + className,ex);  }  int modifiers=m.getModifiers();  if (!(Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers))) {    throw new RuntimeException("Main method is not public and static on " + className);  }  throw new ZygoteInit.MethodAndArgsCaller(m,argv);}  }
class C{  public static boolean push(String[] hoststubs,Timeline timeline,boolean peerMessage){  String data=timeline.toJSON(false,"search_metadata","statuses").toString();  assert data != null;  boolean transmittedToAtLeastOnePeer=false;  for (  String hoststub : hoststubs) {    ClientConnection connection=null;    try {      if (hoststub.endsWith("/"))       hoststub=hoststub.substring(0,hoststub.length() - 1);      Map<String,byte[]> post=new HashMap<String,byte[]>();      post.put("data",UTF8.getBytes(data));      JsonSignature.addSignature(post,DAO.private_settings.getPrivateKey());      connection=new ClientConnection(hoststub + "/api/push.json",post,!"peers".equals(DAO.getConfig("httpsclient.trustselfsignedcerts","peers")));      transmittedToAtLeastOnePeer=true;    } catch (    IOException|JSONException|SignatureException|InvalidKeyException e) {      DAO.log("FAILED to push " + timeline.size() + " messages to backend "+ hoststub);      Log.getLog().warn(e);    } finally {      if (connection != null)       connection.close();    }  }  return transmittedToAtLeastOnePeer;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double sum;  int[] dX;  int[] dY;  double[] weights;  int numPixelsInFilter;  boolean reflectAtBorders=true;  double centreValue;  String direction="n";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      direction=args[i].toLowerCase();    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (direction.equals("n")) {      weights=new double[]{0,-1,0,0,0,0,0,1,0};    } else     if (direction.equals("s")) {      weights=new double[]{0,1,0,0,0,0,0,-1,0};    } else     if (direction.equals("e")) {      weights=new double[]{0,0,0,1,0,-1,0,0,0};    } else     if (direction.equals("w")) {      weights=new double[]{0,0,0,-1,0,1,0,0,0};    } else     if (direction.equals("ne")) {      weights=new double[]{0,0,-1,0,0,0,1,0,0};    } else     if (direction.equals("nw")) {      weights=new double[]{-1,0,0,0,0,0,0,0,1};    } else     if (direction.equals("se")) {      weights=new double[]{1,0,0,0,0,0,0,0,-1};    } else {      weights=new double[]{0,0,1,0,0,0,-1,0,0};    }    dX=new int[]{-1,0,1,-1,0,1,-1,0,1};    dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    numPixelsInFilter=dX.length;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z == noData) {              z=centreValue;            }            sum+=z * weights[a];          }          outputFile.setValue(row,col,sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void sendSelfPatch(State s){  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(s);  sendRequest(patch);}  }
class C{  public static boolean isPermissionDeclined(@NonNull Context context,@NonNull String permission){  return ActivityCompat.checkSelfPermission(context,permission) != PackageManager.PERMISSION_GRANTED;}  }
class C{  private BlockConsistencyGroup isVPlexVolumeInCgWithLocalType(List<Volume> volumes){  BlockConsistencyGroup cg=null;  for (  Volume volume : volumes) {    URI systemURI=volume.getStorageController();    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,systemURI);    String systemType=storageSystem.getSystemType();    if (DiscoveredDataObject.Type.vplex.name().equals(systemType)) {      URI cgURI=volume.getConsistencyGroup();      if (!NullColumnValueGetter.isNullURI(cgURI)) {        BlockConsistencyGroup volCG=_dbClient.queryObject(BlockConsistencyGroup.class,cgURI);        if (volCG.checkForType(Types.LOCAL)) {          cg=volCG;          break;        }      }    }  }  return cg;}  }
class C{  public int start_production(){  return 0;}  }
class C{  public boolean match(Element e,String pseudoE){  if (!(e instanceof CSSStylableElement))   return false;  String attr=((CSSStylableElement)e).getCSSClass();  String val=getValue();  int attrLen=attr.length();  int valLen=val.length();  int i=attr.indexOf(val);  while (i != -1) {    if (i == 0 || Character.isSpaceChar(attr.charAt(i - 1))) {      if (i + valLen == attrLen || Character.isSpaceChar(attr.charAt(i + valLen))) {        return true;      }    }    i=attr.indexOf(val,i + valLen);  }  return false;}  }
class C{  public boolean isConnected(){  return this.getSession().isConnected();}  }
class C{  public static void main(String[] args) throws FormatException {  for (int argsi=0; argsi < args.length; argsi++) {    String rootpath=args[argsi];    LibrarySelectionTable lst=new LibrarySelectionTable(rootpath);    println("Path to database: " + rootpath);    println("Database Name: " + lst.getDatabaseName());    println("Database Description: " + lst.getDatabaseDescription());    List<String> libraries=lst.getLibraryNames();    print("Database Libraries: ");    for (    String libraryName : libraries) {      print(libraryName," ");    }    println();    println();    for (    String libraryName : libraries) {      String prefix=libraryName + ":";      printLibrary(prefix,lst.getCAT(libraryName));      println();    }  }}  }
class C{  public void reset(boolean directed){  clear();  this.directed=directed;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public BigInteger[] generateSignature(byte[] digest){  if (!this.forSigning) {    throw new IllegalStateException("not initialised for signing");  }  BigInteger n=((ECPrivateKeyParameters)this.key).getParameters().getN();  int nBitLength=n.bitLength();  BigInteger e=new BigInteger(1,digest);  int eBitLength=e.bitLength();  ECPrivateKeyParameters privKey=(ECPrivateKeyParameters)key;  if (eBitLength > nBitLength) {    throw new DataLengthException("input too large for ECNR key.");  }  BigInteger r=null;  BigInteger s=null;  AsymmetricCipherKeyPair tempPair;  do {    ECKeyPairGenerator keyGen=new ECKeyPairGenerator();    keyGen.init(new ECKeyGenerationParameters(privKey.getParameters(),this.random));    tempPair=keyGen.generateKeyPair();    ECPublicKeyParameters V=(ECPublicKeyParameters)tempPair.getPublic();    BigInteger Vx=V.getQ().getAffineXCoord().toBigInteger();    r=Vx.add(e).mod(n);  } while (r.equals(ECConstants.ZERO));  BigInteger x=privKey.getD();  BigInteger u=((ECPrivateKeyParameters)tempPair.getPrivate()).getD();  s=u.subtract(r.multiply(x)).mod(n);  BigInteger[] res=new BigInteger[2];  res[0]=r;  res[1]=s;  return res;}  }
class C{  public int numChildren(){  return mChildren.size();}  }
class C{  public CopyDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.COPY,project,description,comment,arguments,flags);}  }
class C{  public boolean isNotIn(){  return isNotIn;}  }
class C{  public static <T>List<T> intersection(final Collection<T> c1,final Collection<T> c2){  if (c1 == null || c2 == null) {    return new ArrayList<>();  }  if (c1.size() == 0 || c2.size() == 0) {    return new ArrayList<>();  }  final List<T> intersection=new ArrayList<>();  for (  final T current : c1) {    if (c2.contains(current)) {      intersection.add(current);    }  }  return intersection;}  }
class C{  protected boolean isPrefix(String prefix,String string){  if (prefix == null || string == null || prefix.length() > string.length())   return false;  String start=string.substring(0,prefix.length());  return start.equalsIgnoreCase(prefix) || isCamelCaseMatching() && CharOperation.camelCaseMatch(prefix.toCharArray(),string.toCharArray());}  }
class C{  private void moveSizeWithFixedAspectRatio(RectF rect,float x,float y,RectF bounds,int viewWidth,int viewHeight,float snapMargin,float aspectRatio){switch (mType) {case TOP_LEFT:    if (calculateAspectRatio(x,y,rect.right,rect.bottom) < aspectRatio) {      adjustTop(rect,y,bounds,snapMargin,aspectRatio,true,false);      adjustLeftByAspectRatio(rect,aspectRatio);    } else {      adjustLeft(rect,x,bounds,snapMargin,aspectRatio,true,false);      adjustTopByAspectRatio(rect,aspectRatio);    }  break;case TOP_RIGHT:if (calculateAspectRatio(rect.left,y,x,rect.bottom) < aspectRatio) {  adjustTop(rect,y,bounds,snapMargin,aspectRatio,false,true);  adjustRightByAspectRatio(rect,aspectRatio);} else {  adjustRight(rect,x,bounds,viewWidth,snapMargin,aspectRatio,true,false);  adjustTopByAspectRatio(rect,aspectRatio);}break;case BOTTOM_LEFT:if (calculateAspectRatio(x,rect.top,rect.right,y) < aspectRatio) {adjustBottom(rect,y,bounds,viewHeight,snapMargin,aspectRatio,true,false);adjustLeftByAspectRatio(rect,aspectRatio);} else {adjustLeft(rect,x,bounds,snapMargin,aspectRatio,false,true);adjustBottomByAspectRatio(rect,aspectRatio);}break;case BOTTOM_RIGHT:if (calculateAspectRatio(rect.left,rect.top,x,y) < aspectRatio) {adjustBottom(rect,y,bounds,viewHeight,snapMargin,aspectRatio,false,true);adjustRightByAspectRatio(rect,aspectRatio);} else {adjustRight(rect,x,bounds,viewWidth,snapMargin,aspectRatio,false,true);adjustBottomByAspectRatio(rect,aspectRatio);}break;case LEFT:adjustLeft(rect,x,bounds,snapMargin,aspectRatio,true,true);adjustTopBottomByAspectRatio(rect,bounds,aspectRatio);break;case TOP:adjustTop(rect,y,bounds,snapMargin,aspectRatio,true,true);adjustLeftRightByAspectRatio(rect,bounds,aspectRatio);break;case RIGHT:adjustRight(rect,x,bounds,viewWidth,snapMargin,aspectRatio,true,true);adjustTopBottomByAspectRatio(rect,bounds,aspectRatio);break;case BOTTOM:adjustBottom(rect,y,bounds,viewHeight,snapMargin,aspectRatio,true,true);adjustLeftRightByAspectRatio(rect,bounds,aspectRatio);break;default :break;}}  }
class C{  public Iterator iterator(){  return this.outlierLists.iterator();}  }
class C{  public void writeUInt24(int ui) throws IOException {  this.write((byte)((ui >> 16) & 0xff));  this.write((byte)((ui >> 8) & 0xff));  this.write((byte)(ui & 0xff));}  }
class C{  public double updateTexture(){  if (mConnectedTextureId != getTextureId()) {    mConnectedTextureId=connectTangoTexture();  }  if (mConnectedTextureId != -1) {    return mTango.updateTexture(this.mCameraId);  }  return -1.0;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region__final_:    return stateVector[0] == State.main_region__final_;case main_region_Composite_s1_s2:  return stateVector[0].ordinal() >= State.main_region_Composite_s1_s2.ordinal() && stateVector[0].ordinal() <= State.main_region_Composite_s1_s2_inner_region_s2.ordinal();case main_region_Composite_s1_s2_inner_region_s1:return stateVector[0] == State.main_region_Composite_s1_s2_inner_region_s1;case main_region_Composite_s1_s2_inner_region_s2:return stateVector[0] == State.main_region_Composite_s1_s2_inner_region_s2;default :return false;}}  }
class C{  ArrayType(String typeSig,Type elemType){  super(TC_ARRAY,typeSig);  this.elemType=elemType;}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (eventName.compareTo("instance") == 0) {    if (!(m_Loader instanceof weka.core.converters.IncrementalConverter)) {      return false;    }    if (m_dataSetEventTargets > 0) {      return false;    }  }  if (eventName.compareTo("dataSet") == 0) {    if (!(m_Loader instanceof weka.core.converters.BatchConverter)) {      return false;    }    if (m_instanceEventTargets > 0) {      return false;    }  }  return true;}  }
class C{  public void display() throws IOException {  ExternalPriceModelDisplayHandler displayHandler=new ExternalPriceModelDisplayHandler();  displayHandler.setContent(model.getPriceModelContent().getContent());  displayHandler.setContentType(model.getPriceModelContent().getContentType());  displayHandler.setFilename(model.getPriceModelContent().getFilename());  displayHandler.display();}  }
class C{  @At("/admin/frame/project/main") @Ok("fm:template.admin.project.frame.main") public void project_main(){}  }
class C{  protected void fireDocumentChanged(DocumentEvent event){  updateDocumentStructures(event);  if (fStoppedListenerNotification == 0)   doFireDocumentChanged(event); else   fDeferredDocumentEvent=event;}  }
class C{  public IdeaJHelp(HelpSet hs){  super(new DefaultHelpModel(hs));  navigators=new Vector();  navDisplayed=true;  this.contentViewer=new IdeaJHelpContentViewer(helpModel);  setModel(helpModel);  if (helpModel != null) {    setupNavigators();  }  updateUI();}  }
class C{  private static <T>Entry<T> mergeLists(Entry<T> one,Entry<T> two){  if (one == null && two == null) {    return null;  } else   if (one != null && two == null) {    return one;  } else   if (one == null && two != null) {    return two;  } else {    Entry<T> oneNext=one.mNext;    one.mNext=two.mNext;    one.mNext.mPrev=one;    two.mNext=oneNext;    two.mNext.mPrev=two;    return one.mPriority < two.mPriority ? one : two;  }}  }
class C{  public CeylonRepoManagerBuilder isJDKIncluded(boolean include){  this.jdkIncluded=include;  return this;}  }
class C{  public T dismiss(Dialog dialog){  try {    if (dialog != null) {      dialogs.remove(dialog);      dialog.dismiss();    }  } catch (  Exception e) {  }  return self();}  }
class C{  public void lock(){  buffer.writeBoolean(43,true).flush();  locked=true;}  }
class C{  protected void illegalMessageReceived(OFMessage m){  String msg=getSwitchStateMessage(m,"Switch should never send this message in the current state");  throw new SwitchStateException(msg);}  }
class C{  protected void onStateTransition(StateType oldState,StateType newState){}  }
class C{  public static void main(String[] argv){  Debug.init();  boolean toUpper=true;  ArgParser ap=new ArgParser("ChangeCase");  ap.add("upper","Change file and directory names to UPPER CASE (default). <path> <path> ...",ArgParser.TO_END);  ap.add("lower","Change file and directory names to lower case. <path> <path> ...",ArgParser.TO_END);  if (argv.length == 0) {    ap.bail("",true);  }  ap.parse(argv);  String[] dirs;  dirs=ap.getArgValues("lower");  if (dirs != null) {    Debug.output("Converting to lower case names...");    toUpper=false;  } else {    dirs=ap.getArgValues("upper");    if (dirs == null) {      dirs=argv;    }    Debug.output("Converting to UPPER CASE names...");  }  for (int i=0; i < dirs.length; i++) {    handleEntry(new File(dirs[i]),toUpper);  }}  }
class C{  public void testBug28689() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  createTable("testBug28689","(" + "`id` int(11) NOT NULL auto_increment,`usuario` varchar(255) default NULL,PRIMARY KEY  (`id`))");  this.stmt.executeUpdate("INSERT INTO testBug28689 (usuario) VALUES ('AAAAAA')");  createProcedure("sp_testBug28689","(tid INT)\nBEGIN\nUPDATE testBug28689 SET usuario = 'BBBBBB' WHERE id = tid;\nEND");  Connection noProcedureBodiesConn=getConnectionWithProps("noAccessToProcedureBodies=true");  CallableStatement cStmt=null;  try {    cStmt=noProcedureBodiesConn.prepareCall("{CALL sp_testBug28689(?)}");    cStmt.setInt(1,1);    cStmt.addBatch();    cStmt.executeBatch();    assertEquals("BBBBBB",getSingleIndexedValueWithQuery(noProcedureBodiesConn,1,"SELECT `usuario` FROM testBug28689 WHERE id=1"));  }  finally {    if (cStmt != null) {      cStmt.close();    }    if (noProcedureBodiesConn != null) {      noProcedureBodiesConn.close();    }  }}  }
class C{  public void createOffscreenSurface(int width,int height){  if (mEGLSurface != EGL14.EGL_NO_SURFACE) {    throw new IllegalStateException("surface already created");  }  mEGLSurface=mEglCore.createOffscreenSurface(width,height);  mWidth=width;  mHeight=height;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.TRACE_TYPE___ANONYMOUS_TRACE_TYPE_11:    return ((InternalEList<?>)getAnonymous_traceType_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.TRACE_TYPE___ANONYMOUS_TRACE_TYPE_21:  return ((InternalEList<?>)getAnonymous_traceType_2_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void findRulesQuickly() throws Exception {  ArrayList<Object>[] rules;  for (int j=1; j < m_Ls.size(); j++) {    ArrayList<Object> currentItemSets=m_Ls.get(j);    Enumeration<Object> enumItemSets=new WekaEnumeration<Object>(currentItemSets);    while (enumItemSets.hasMoreElements()) {      AprioriItemSet currentItemSet=(AprioriItemSet)enumItemSets.nextElement();      rules=currentItemSet.generateRules(m_minMetric,m_hashtables,j + 1);      for (int k=0; k < rules[0].size(); k++) {        m_allTheRules[0].add(rules[0].get(k));        m_allTheRules[1].add(rules[1].get(k));        m_allTheRules[2].add(rules[2].get(k));        if (rules.length > 3) {          m_allTheRules[3].add(rules[3].get(k));          m_allTheRules[4].add(rules[4].get(k));          m_allTheRules[5].add(rules[5].get(k));        }      }    }  }}  }
class C{  public AmazonSQSExtendedClient(AmazonSQS sqsClient,ExtendedClientConfiguration extendedClientConfig){  super(sqsClient);  this.clientConfiguration=new ExtendedClientConfiguration(extendedClientConfig);}  }
class C{  public ProxyConnector(final SocketConnector connector){  this(connector,new DefaultSocketSessionConfig(),null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowTVPlayer.setDscalerOddFieldFirst(evalBool(stack.pop()));  return null;}  }
class C{  public static double[] toPrimitive(Double[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_DOUBLE_ARRAY;  }  final double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].doubleValue();  }  return result;}  }
class C{  public void assertNotEqual(short expected,short actual){  TestUtils.assertNotEqual(expected,actual);}  }
class C{  private void deleteLogFile(int ver) throws IOException {  if (ver == 0)   return;  deleteFile(versionName(logfilePrefix,ver));}  }
class C{  public PowerAsFunction(){  super("mathematical.pow",2,Ontology.NUMERICAL);}  }
class C{  long highMask(){  return _highMask;}  }
class C{  private void inferParameterTypesDirectly(Declaration dec,Tree.PositionalArgumentList pal,Tree.MemberOrTypeExpression mte){  Reference pr=getInvokedProducedReference(dec,mte);  Functional fun=(Functional)dec;  List<ParameterList> pls=fun.getParameterLists();  if (!pls.isEmpty()) {    ParameterList pl=pls.get(0);    List<Parameter> params=pl.getParameters();    List<Tree.PositionalArgument> args=pal.getPositionalArguments();    int j=0;    int argCount=args.size();    int paramsSize=params.size();    for (int i=0; i < argCount && j < paramsSize; i++) {      Parameter param=params.get(j);      Tree.PositionalArgument arg=args.get(i);      arg.setParameter(param);      if (arg instanceof Tree.ListedArgument) {        Tree.ListedArgument la=(Tree.ListedArgument)arg;        inferParameterTypes(pr,param,la.getExpression(),param.isSequenced());      }      if (!param.isSequenced()) {        j++;      }    }  }}  }
class C{  private void segment() throws Exception {  char first=data[off];  if (first == '/') {    throw new PathException("Invalid path expression '%s' in %s",path,type);  }  if (first == '@') {    attribute();  } else {    element();  }  align();}  }
class C{  public BitArray(int length,byte[] a) throws IllegalArgumentException {  if (length < 0) {    throw new IllegalArgumentException("Negative length for BitArray");  }  if (a.length * BITS_PER_UNIT < length) {    throw new IllegalArgumentException("Byte array too short to represent " + "bit array of given length");  }  this.length=length;  int repLength=((length + BITS_PER_UNIT - 1) / BITS_PER_UNIT);  int unusedBits=repLength * BITS_PER_UNIT - length;  byte bitMask=(byte)(0xFF << unusedBits);  repn=new byte[repLength];  System.arraycopy(a,0,repn,0,repLength);  if (repLength > 0) {    repn[repLength - 1]&=bitMask;  }}  }
class C{  public final MutableDouble2D dup(){  return new MutableDouble2D(this);}  }
class C{  private static MMultMethod optFindMMultMethodMR(long m1_rows,long m1_cols,long m1_rpb,long m1_cpb,long m1_nnz,long m2_rows,long m2_cols,long m2_rpb,long m2_cpb,long m2_nnz,MMTSJType mmtsj,ChainType chainType,boolean leftPMInput){  double memBudget=MAPMULT_MEM_MULTIPLIER * OptimizerUtils.getRemoteMemBudgetMap(true);  if (FORCED_MMULT_METHOD != null)   return FORCED_MMULT_METHOD;  if ((mmtsj == MMTSJType.LEFT && m2_cols >= 0 && m2_cols <= m2_cpb) || (mmtsj == MMTSJType.RIGHT && m1_rows >= 0 && m1_rows <= m1_rpb)) {    return MMultMethod.TSMM;  }  if (OptimizerUtils.ALLOW_SUM_PRODUCT_REWRITES) {    if (chainType != ChainType.NONE && m1_rows >= 0 && m1_rows <= m1_rpb && m2_cols == 1) {      if (chainType == ChainType.XtXv && m1_rows >= 0 && m2_cols >= 0 && OptimizerUtils.estimateSize(m1_rows,m2_cols) < memBudget) {        return MMultMethod.MAPMM_CHAIN;      } else       if ((chainType == ChainType.XtwXv || chainType == ChainType.XtXvy) && m1_rows >= 0 && m2_cols >= 0 && m1_cols >= 0 && OptimizerUtils.estimateSize(m1_rows,m2_cols) + OptimizerUtils.estimateSize(m1_cols,m2_cols) < memBudget) {        return MMultMethod.MAPMM_CHAIN;      }    }  }  double footprintPM1=getMapmmMemEstimate(m1_rows,1,m1_rpb,m1_cpb,m1_nnz,m2_rows,m2_cols,m2_rpb,m2_cpb,m2_nnz,1,true);  double footprintPM2=getMapmmMemEstimate(m2_rows,1,m1_rpb,m1_cpb,m1_nnz,m2_rows,m2_cols,m2_rpb,m2_cpb,m2_nnz,1,true);  if ((footprintPM1 < memBudget && m1_rows >= 0 || footprintPM2 < memBudget && m2_rows >= 0) && leftPMInput) {    return MMultMethod.PMM;  }  double m1SizeP=OptimizerUtils.estimatePartitionedSizeExactSparsity(m1_rows,m1_cols,m1_rpb,m1_cpb,m1_nnz);  double m2SizeP=OptimizerUtils.estimatePartitionedSizeExactSparsity(m2_rows,m2_cols,m2_rpb,m2_cpb,m2_nnz);  double footprint1=getMapmmMemEstimate(m1_rows,m1_cols,m1_rpb,m1_cpb,m1_nnz,m2_rows,m2_cols,m2_rpb,m2_cpb,m2_nnz,1,false);  double footprint2=getMapmmMemEstimate(m1_rows,m1_cols,m1_rpb,m1_cpb,m1_nnz,m2_rows,m2_cols,m2_rpb,m2_cpb,m2_nnz,2,false);  if ((footprint1 < memBudget && m1_rows >= 0 && m1_cols >= 0) || (footprint2 < memBudget && m2_rows >= 0 && m2_cols >= 0)) {    if (m1SizeP < m2SizeP && m1_rows >= 0 && m1_cols >= 0)     return MMultMethod.MAPMM_L; else     return MMultMethod.MAPMM_R;  }  if (m1_rows == -1 || m1_cols == -1 || m2_rows == -1 || m2_cols == -1)   return MMultMethod.CPMM;  double rmm_costs=getRMMCostEstimate(m1_rows,m1_cols,m1_rpb,m1_cpb,m2_rows,m2_cols,m2_rpb,m2_cpb);  double cpmm_costs=getCPMMCostEstimate(m1_rows,m1_cols,m1_rpb,m1_cpb,m2_rows,m2_cols,m2_rpb,m2_cpb);  if (cpmm_costs < rmm_costs)   return MMultMethod.CPMM; else   return MMultMethod.RMM;}  }
class C{  public static void useInternalFrames(JRootPane rootPane){  if (rootPane != null) {    useInternalFrames(rootPane.getLayeredPane());  } else {    useInternalFrames((JLayeredPane)null);  }}  }
class C{  public void visit(TagHandler handler){  if (code == stagDefineFont)   handler.defineFont(this);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Matrix times(double s){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=s * A[i][j];    }  }  return X;}  }
class C{  private static RMIServer objectToBind(RMIServerImpl rmiServer,Map<String,?> env) throws IOException {  return RMIConnector.connectStub((RMIServer)rmiServer.toStub(),env);}  }
class C{  private int[] makeBatch(int[] indices,int t,int batchSize){  final int start=t * batchSize;  assert start < indices.length;  final int end=Math.min((t + 1) * batchSize,indices.length);  int[] batch=new int[end - start];  System.arraycopy(indices,start,batch,0,batch.length);  return batch;}  }
class C{  public State state(){  return state;}  }
class C{  public static boolean intToBoolean(int x){  return x > 0;}  }
class C{  private boolean matchDomain(String testDomain,String tailDomain){  if (!testDomain.endsWith(tailDomain)) {    return false;  }  if (testDomain.length() == tailDomain.length()) {    return true;  }  if (tailDomain.charAt(0) == '.') {    return true;  }  return testDomain.charAt(testDomain.length() - tailDomain.length() - 1) == '.';}  }
class C{  public void release() throws ReplicatorException, InterruptedException {  connectionManager.releaseAll();  if (!readOnly)   writeLock.release();  stopLogSyncTask();}  }
class C{  public void present(Record record){  newPrereq(record);}  }
class C{  public V pop() throws IndexOutOfBoundsException {  if (top == 0) {    throw new IndexOutOfBoundsException("Cannot pop operand off an empty stack.");  }  return values[--top + locals];}  }
class C{  public void testCustomFactoryNormal(){  Map<String,Object> props=new HashMap<>();  props.put("fBoolean",true);  props.put("fByte",(byte)1);  props.put("fShort",(short)2);  props.put("fChar",'3');  props.put("fInt",4);  props.put("fLong",5L);  props.put("fFloat",6.6f);  props.put("fDouble",7.7d);  UUID obj=UUID.randomUUID();  props.put("fObj",obj);  props.put("fIntBoxed",10);  PlatformJavaObjectFactoryProxy proxy=proxyForCustom(NO_DFLT_CTOR_FACTORY_CLS_NAME,props);  TestJavaObjectNoDefaultCtor val=(TestJavaObjectNoDefaultCtor)proxy.factory(ctx).create();  TestJavaObject expVal=new TestJavaObject().setBoolean(true).setByte((byte)1).setShort((short)2).setChar('3').setInt(4).setLong(5L).setFloat(6.6f).setDouble(7.7d).setObject(obj).setIntBoxed(10);  assertEquals(expVal,val);  assertNotNull(val.node);  assertEquals(val.node.name(),ctx.gridName());}  }
class C{  private static void createParsers() throws AdeInternalException {  AdeExtOperatingSystemType m_osType;  AdeExtProperties linuxProperties;  AdeExtPropertiesFactory adeExtPropertiesFactory=new AdeExtPropertiesFactory();  m_osType=AdeExtOperatingSystemType.LINUX;  linuxProperties=adeExtPropertiesFactory.getAdeExtProperties(m_osType);  try {    mLineParsers=new LinuxSyslogLineParser[]{new LinuxSyslog5424ParserBase(),new LinuxSyslog3164ParserWithMark(),new LinuxSyslog3164ParserWithCompAndPid(),new LinuxSyslog3164ParserFreeForm()};  } catch (  AdeException e) {    logger.error("Failure during parser construction",e);    throw new AdeInternalException("Parser construction failure");  }  LinuxSyslog3164ParserBase.setAdeExtProperties((LinuxAdeExtProperties)linuxProperties);  ((LinuxAdeExtProperties)linuxProperties).setYear(java.util.Calendar.getInstance().get(Calendar.YEAR));}  }
class C{  public MimSearchEditor2(BuildPureClustersRunner pureClustersRunner){  this(pureClustersRunner,"Result MAG");}  }
class C{  public boolean isPrefixOf(Path path){  if (this.getLength() > path.getLength()) {    return false;  }  for (int i=0; i < getLength(); i++) {    if (this.getBlockIdAt(i) != path.getBlockIdAt(i)) {      return false;    }  }  return true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.876 -0500",hash_original_method="9D04458788C457FA55EEFE59B9790011",hash_generated_method="F9160B47FE25D2E57A379C9F1C1F8D67") public boolean equals(Object other){  if (!this.getClass().equals(other.getClass()))   return false;  SIPRequest that=(SIPRequest)other;  return requestLine.equals(that.requestLine) && super.equals(other);}  }
class C{  public void clearAll(){synchronized (actionList) {    actionList.clear();  }}  }
class C{  public Vector(int initialCapacity){  this(initialCapacity,0);}  }
class C{  protected void logDiagnostic(String msg){  if (isDiagnosticsEnabled()) {    logRawDiagnostic(diagnosticPrefix + msg);  }}  }
class C{  private void doStressTest(final int addressBits,final int writeRetentionQueueCapacity){  final IRawStore store=new MemStore(DirectBufferPool.INSTANCE);  try {    final HTree htree=getHTree(store,addressBits,false,writeRetentionQueueCapacity);    try {      assertTrue("store",store == htree.getStore());      assertEquals("addressBits",addressBits,htree.getAddressBits());      final IKeyBuilder keyBuilder=new KeyBuilder();      final byte[][] keys=new byte[s_limit][];      for (int i=0; i < s_limit; i++) {        keys[i]=keyBuilder.reset().append(new Integer(i).hashCode()).getKey();      }      final byte[] badkey=keyBuilder.reset().append(new Integer(s_limit * 32).hashCode()).getKey();      final long begin=System.currentTimeMillis();      for (int i=0; i < s_limit; i++) {        final byte[] key=keys[i];        htree.insert(key,key);        try {        } catch (        HTreePageStateException spe) {          System.err.println("Problem on " + i + "th insert, with key: "+ BytesUtil.toString(keys[0]));          System.out.println(htree.PP());          throw spe;        }        if (log.isTraceEnabled())         log.trace("after key=" + i + "\n"+ htree.PP());      }      final long elapsedInsertMillis=System.currentTimeMillis() - begin;      assertEquals(s_limit,htree.getEntryCount());      final long beginLookupFirst=System.currentTimeMillis();      for (int i=0; i < s_limit; i++) {        final byte[] key=keys[i];        final byte[] firstVal=htree.lookupFirst(key);        if (!BytesUtil.bytesEqual(key,firstVal))         fail("Expected: " + BytesUtil.toString(key) + ", actual="+ Arrays.toString(htree.lookupFirst(key)));      }      final long elapsedLookupFirstTime=System.currentTimeMillis() - beginLookupFirst;      final long beginValueIterator=System.currentTimeMillis();      AbstractHTreeTestCase.assertSameIteratorAnyOrder(keys,htree.values());      final long elapsedValueIteratorTime=System.currentTimeMillis() - beginValueIterator;      if (log.isInfoEnabled()) {        log.info("Inserted: " + s_limit + " tuples in "+ elapsedInsertMillis+ "ms, lookupFirst(all)="+ elapsedLookupFirstTime+ ", valueScan(all)="+ elapsedValueIteratorTime+ ", addressBits="+ htree.getAddressBits()+ ", nnodes="+ htree.getNodeCount()+ ", nleaves="+ htree.getLeafCount()+ ", allocation count="+ ((MemStore)store).getMemoryManager().getAllocationCount());      }      assertTrue(htree.lookupFirst(badkey) == null);      assertFalse(htree.lookupAll(badkey).hasNext());      if (true) {        htree.writeCheckpoint();        final BaseIndexStats stats=htree.dumpPages(true,true);        if (log.isInfoEnabled())         log.info(stats.toString());        System.err.println(stats);      }    } catch (    Throwable t) {      log.error(t);      throw new RuntimeException(t);    }  }  finally {    store.destroy();  }}  }
class C{  public LegHistogram(final int binSize,final int nofBins){  super();  this.binSize=binSize;  this.nofBins=nofBins;  reset(0);}  }
class C{  @Override public Iterator<E> iterator(){  return new PriorityIterator();}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  void processOFMessage(OFMessage m) throws IOException {  if (!state.channelHandshakeComplete) {switch (m.getType()) {case HELLO:      processOFHello((OFHello)m);    break;case ERROR:  processOFError((OFErrorMsg)m);break;case FEATURES_REPLY:processOFFeaturesReply((OFFeaturesReply)m);break;case EXPERIMENTER:processOFExperimenter((OFExperimenter)m);break;case ECHO_REPLY:processOFEchoReply((OFEchoReply)m);break;case ECHO_REQUEST:processOFEchoRequest((OFEchoRequest)m);break;case PORT_STATUS:processOFPortStatus((OFPortStatus)m);break;default :illegalMessageReceived(m);break;}} else {switch (m.getType()) {case ECHO_REPLY:processOFEchoReply((OFEchoReply)m);break;case ECHO_REQUEST:processOFEchoRequest((OFEchoRequest)m);break;default :sendMessageToConnection(m);break;}}}  }
class C{  static void writeXMLObject(OutputStream os,Object o,ExceptionListener listener){  ClassLoader oldClassLoader=Thread.currentThread().getContextClassLoader();  Thread.currentThread().setContextClassLoader(LayoutUtil.class.getClassLoader());  XMLEncoder encoder=new XMLEncoder(os);  if (listener != null)   encoder.setExceptionListener(listener);  encoder.writeObject(o);  encoder.close();  Thread.currentThread().setContextClassLoader(oldClassLoader);}  }
class C{  public static void logPingSignal(final Logger logger){  logger.logMessage(Level.INFO,"Consumer received PING Signal");}  }
class C{  public Boolean isDirectProvisionedSwitch(){  return directProvisionedSwitch;}  }
class C{  final boolean tryMatchData(){  Object x=item;  if (x != null && x != this && casItem(x,null)) {    LockSupport.unpark(waiter);    return true;  }  return false;}  }
class C{  public static void notifyCredit(final TransactionObserver observer,final Account account,final Amount amount){  observer.notify(new BalanceAdjustmentNotification(NotificationType.BalanceCredit,account,amount));}  }
class C{  public static Coordinate findPtNotNode(Coordinate[] testCoords,LinearRing searchRing,GeometryGraph graph){  Edge searchEdge=graph.findEdge(searchRing);  EdgeIntersectionList eiList=searchEdge.getEdgeIntersectionList();  for (int i=0; i < testCoords.length; i++) {    Coordinate pt=testCoords[i];    if (!eiList.isIntersection(pt))     return pt;  }  return null;}  }
class C{  private static void parseLabel(final Matcher matcher,final MachineState state,final int lineNumber) throws ParseException {  final String label=matcher.group("label");  if (label == null) {    return;  }  if (state.labels.containsKey(label)) {    throw new ParseException(Constants.MESSAGE_DUPLICATE_LABEL,lineNumber,matcher.start("label"),matcher.end("label"));  }  state.labels.put(label,state.instructions.size());}  }
class C{  public float convertPixelsToDp(Context ctx,float px){  DisplayMetrics metrics=ctx.getResources().getDisplayMetrics();  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  private static int transpositions(final CharSequence first,final CharSequence second){  int transpositions=0;  for (int i=0; i < first.length(); i++) {    if (first.charAt(i) != second.charAt(i)) {      transpositions++;    }  }  return transpositions / 2;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Iterator<Item> iterator(){  return new ListIterator();}  }
class C{  private Map<String,List<VolumeDescriptor>> groupDescriptorsByReplicationGroup(List<VolumeDescriptor> volumeDescriptors){  _log.info("Group the given desciptors based on backend Replication Group");  Map<String,List<VolumeDescriptor>> repGroupToVolumeDescriptors=new HashMap<String,List<VolumeDescriptor>>();  List<VolumeDescriptor> vplexVolumeDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{Type.VPLEX_VIRT_VOLUME},new VolumeDescriptor.Type[]{});  List<VolumeDescriptor> vplexSrcVolumeDescrs=getDescriptorsForFullCopySrcVolumes(vplexVolumeDescriptors);  vplexVolumeDescriptors.removeAll(vplexSrcVolumeDescrs);  List<URI> vplexSrcVolumeURIs=VolumeDescriptor.getVolumeURIs(vplexSrcVolumeDescrs);  if (!vplexSrcVolumeURIs.isEmpty()) {    List<Volume> vplexSrcVolumes=ControllerUtils.queryVolumesByIterativeQuery(_dbClient,vplexSrcVolumeURIs);    Map<String,List<Volume>> arrayGroupToVolumesMap=ControllerUtils.groupVolumesByArrayGroup(vplexSrcVolumes,_dbClient);    if (arrayGroupToVolumesMap.size() == 1) {      String arrayGroupName=arrayGroupToVolumesMap.keySet().iterator().next();      _log.info("Single entry: Replication Group {}, Volume descriptors {}",arrayGroupName,Joiner.on(',').join(VolumeDescriptor.getVolumeURIs(volumeDescriptors)));      repGroupToVolumeDescriptors.put(arrayGroupName,volumeDescriptors);    } else {      for (      String arrayGroupName : arrayGroupToVolumesMap.keySet()) {        _log.debug("Processing Replication Group {}",arrayGroupName);        List<Volume> vplexSrcVolumesAG=arrayGroupToVolumesMap.get(arrayGroupName);        List<VolumeDescriptor> descriptorsForAG=new ArrayList<VolumeDescriptor>();        Collection<URI> vplexSrcVolumesUrisAG=transform(vplexSrcVolumesAG,fctnDataObjectToID());        descriptorsForAG.addAll(getDescriptorsForURIsFromGivenList(vplexSrcVolumeDescrs,vplexSrcVolumesUrisAG));        for (        VolumeDescriptor vplexCopyVolumeDesc : vplexVolumeDescriptors) {          URI vplexCopyVolumeURI=vplexCopyVolumeDesc.getVolumeURI();          Volume vplexCopyVolume=getDataObject(Volume.class,vplexCopyVolumeURI,_dbClient);          if (vplexSrcVolumesUrisAG.contains(vplexCopyVolume.getAssociatedSourceVolume())) {            _log.debug("Adding VPLEX copy volume descriptor for {}",vplexCopyVolumeURI);            descriptorsForAG.add(vplexCopyVolumeDesc);            List<VolumeDescriptor> assocDescriptors=getDescriptorsForAssociatedVolumes(vplexCopyVolumeURI,volumeDescriptors);            descriptorsForAG.addAll(assocDescriptors);          }        }        _log.info("Entry: Replication Group {}, Volume descriptors {}",arrayGroupName,Joiner.on(',').join(VolumeDescriptor.getVolumeURIs(descriptorsForAG)));        repGroupToVolumeDescriptors.put(arrayGroupName,descriptorsForAG);      }    }  } else {    _log.info("Request is not for VPLEX volume, returning all.");    repGroupToVolumeDescriptors.put("SNAPSHOT_GROUP",volumeDescriptors);  }  return repGroupToVolumeDescriptors;}  }
class C{  static void extract(String s,int start,ExtractFloatResult result){  int currentIndex=start;  boolean foundSeparator=false;  result.mEndWithNegOrDot=false;  boolean secondDot=false;  boolean isExponential=false;  for (; currentIndex < s.length(); currentIndex++) {    boolean isPrevExponential=isExponential;    isExponential=false;    char currentChar=s.charAt(currentIndex);switch (currentChar) {case ' ':case ',':      foundSeparator=true;    break;case '-':  if (currentIndex != start && !isPrevExponential) {    foundSeparator=true;    result.mEndWithNegOrDot=true;  }break;case '.':if (!secondDot) {secondDot=true;} else {foundSeparator=true;result.mEndWithNegOrDot=true;}break;case 'e':case 'E':isExponential=true;break;}if (foundSeparator) {break;}}result.mEndPosition=currentIndex;}  }
class C{  @Override public boolean isListenerForSource(Object source){  return source instanceof UIViewRoot;}  }
class C{  public CCachedExpressionTreeNode(final ICachedCriterium criterium){  m_criterium=criterium;}  }
class C{  public TestCase readJUnitTestCase(String qualifiedTestMethod){  String clazz=qualifiedTestMethod.substring(0,qualifiedTestMethod.indexOf("#"));  String method=qualifiedTestMethod.substring(qualifiedTestMethod.indexOf("#") + 1);  CompoundTestCase testCase=new CompoundTestCase(clazz,method);  TestExtractingVisitor testExtractingVisitor=new TestExtractingVisitor(testCase,clazz,method,this);  String javaFile=findTestFile(clazz);  String fileContents=readJavaFile(javaFile);  compilationUnit=parseJavaFile(javaFile,fileContents);  compilationUnit.accept(testExtractingVisitor);  TestCase result=testCase.finalizeTestCase();  return result;}  }
class C{  public static String[] splitString(final String str,final char splitChar){  final int length=str.length();  final StringBuilder bulder=new StringBuilder(Math.max(8,length));  int counter=1;  for (int i=0; i < length; i++) {    if (str.charAt(i) == splitChar) {      counter++;    }  }  final String[] result=new String[counter];  int position=0;  for (int i=0; i < length; i++) {    final char chr=str.charAt(i);    if (chr == splitChar) {      result[position++]=bulder.toString();      bulder.setLength(0);    } else {      bulder.append(chr);    }  }  if (position < result.length) {    result[position]=bulder.toString();  }  return result;}  }
class C{  public void magnify(int delta){  camera.magnify(delta);  updateCrosshair();  updateGeometricState(0);  changed.set(true);  updateStatus();}  }
class C{  public static byte convertUint8toByte(char uint8){  if (uint8 > Byte.MAX_VALUE - Byte.MIN_VALUE) {    throw new RuntimeException("Out of Boundary");  }  return (byte)uint8;}  }
class C{  @Override public int read(final byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  public boolean global_nodes_in_natives(){  return soot.PhaseOptions.getBoolean(options,"global-nodes-in-natives");}  }
class C{  public static final boolean isDigit(char ch){  return ch >= '0' && ch <= '9';}  }
class C{  public ModbusException(String message){  super(message);}  }
class C{  public SecureRandomPool(String algorithm,int poolSize,SecureRandom seed){  if (algorithm == null) {    throw new IllegalArgumentException("algorithm is null");  }  pool=new ArrayList<SecureRandom>(poolSize);  seedSource=getSeedSource(algorithm,(seed != null) ? seed : new SecureRandom());  try {    for (int i=0; i < poolSize; i++) {      byte[] seedBytes=new byte[20];      seedSource.nextBytes(seedBytes);      SecureRandom random=SecureRandom.getInstance(algorithm);      random.setSeed(seedBytes);      pool.add(random);    }  } catch (  NoSuchAlgorithmException e) {    String msg="Error getting SecureRandom using " + algorithm + " algorithm.";    log.error(msg,e);    throw new RuntimeException(msg,e);  }}  }
class C{  public Crossfader withFirst(View first,int width){  this.mFirst=first;  this.mFirstWidth=width;  return this;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public String toString(){  return getConfigName().toUpperCase();}  }
class C{  protected final void _writePPFieldName(String name,boolean commaBefore) throws IOException, JsonGenerationException {  if (commaBefore) {    _cfgPrettyPrinter.writeObjectEntrySeparator(this);  } else {    _cfgPrettyPrinter.beforeObjectEntries(this);  }  if (isEnabled(Feature.QUOTE_FIELD_NAMES)) {    if (_outputTail >= _outputEnd) {      _flushBuffer();    }    _outputBuffer[_outputTail++]='"';    _writeString(name);    if (_outputTail >= _outputEnd) {      _flushBuffer();    }    _outputBuffer[_outputTail++]='"';  } else {    _writeString(name);  }}  }
class C{  public static boolean isSuccess(Map<String,? extends Object> results){  if (ServiceUtil.isError(results) || ServiceUtil.isFailure(results)) {    return false;  }  return true;}  }
class C{  public String toPattern(){  StringBuffer buffer=new StringBuffer();  for (int i=0; i <= maxOffset; i++) {    appendQuoted(buffer,strings[i]);    buffer.append('{');    buffer.append(argumentNumbers[i]);    Format format=formats[i];    String pattern=null;    if (format instanceof ChoiceFormat) {      buffer.append(",choice,");      pattern=((ChoiceFormat)format).toPattern();    } else     if (format instanceof DecimalFormat) {      pattern=decodeDecimalFormat(buffer,format);    } else     if (format instanceof SimpleDateFormat) {      pattern=decodeSimpleDateFormat(buffer,format);    } else     if (format != null) {      throw new IllegalArgumentException("Unknown format");    }    if (pattern != null) {      boolean quote=false;      int index=0, length=pattern.length(), count=0;      while (index < length) {        char ch=pattern.charAt(index++);        if (ch == '\'') {          quote=!quote;        }        if (!quote) {          if (ch == '{') {            count++;          }          if (ch == '}') {            if (count > 0) {              count--;            } else {              buffer.append("'}");              ch='\'';            }          }        }        buffer.append(ch);      }    }    buffer.append('}');  }  if (maxOffset + 1 < strings.length) {    appendQuoted(buffer,strings[maxOffset + 1]);  }  return buffer.toString();}  }
class C{  public long upperBound(){  return upperBound;}  }
class C{  public void pauseJobs(GroupMatcher<JobKey> matcher) throws SchedulerException {  try {    getRemoteScheduler().pauseJobs(matcher);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public static void v(String msg,Throwable cause){  if (BuildConfig.DEBUG) {    Log.v(LOG_TAG,msg,cause);  }}  }
class C{  public Chronology withZone(DateTimeZone zone){  if (zone == null) {    zone=DateTimeZone.getDefault();  }  if (zone == getZone()) {    return this;  }  return getInstance(zone);}  }
class C{  void onType(Resource type,Fact fact){  if (!possibleInferences.containsKey(type)) {    possibleInferences.put(type,new LinkedList<Fact>());  }  possibleInferences.get(type).add(fact);  if (knownTypes.containsKey(type)) {    Fact join=fact.clone();    join.addSource(knownTypes.get(type));    collect(join);  }}  }
class C{  public boolean isReadOnly(){  Object oo=get_Value(COLUMNNAME_IsReadOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Interruptible("Only called during boot iamge creation") public static void initializeHeader(BootImageInterface bootImage,Address ref,TIB tib,int size,boolean isScalar){  if (GENERATE_GC_TRACE) {    bootImage.setAddressWord(ref.plus(OBJECT_OID_OFFSET),oid,false,false);    bootImage.setAddressWord(ref.plus(OBJECT_DEATH_OFFSET),time,false,false);    bootImage.setAddressWord(ref.plus(OBJECT_LINK_OFFSET),prevAddress,false,false);    prevAddress=ref.toWord();    oid=oid.plus(Word.fromIntSignExtend((size - GC_TRACING_HEADER_BYTES) >> LOG_BYTES_IN_ADDRESS));  }}  }
class C{  public void createGraphic(GraphicAttributes ga){  init();  stateMachine.setUndefined();  int renderType=OMGraphic.RENDERTYPE_LATLON;  int lineType=OMGraphic.LINETYPE_GREATCIRCLE;  if (ga != null) {    renderType=ga.getRenderType();    lineType=ga.getLineType();  }  if (Debug.debugging("eomg")) {    Debug.output("EditableOMDistance.createGraphic(): rendertype = " + renderType);  }  if (lineType == OMGraphic.LINETYPE_UNKNOWN) {    lineType=OMGraphic.LINETYPE_GREATCIRCLE;    if (ga != null) {      ga.setLineType(OMGraphic.LINETYPE_GREATCIRCLE);    }  }  this.poly=(OMDistance)createGraphic(renderType,lineType);  if (ga != null) {    ga.setRenderType(poly.getRenderType());    ga.setTo(poly,true);  }}  }
class C{  public void add(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (last == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.first;    last.next=elem;    elem.prev=last;    last=insns.last;  }  cache=null;  insns.removeAll(false);}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (getClass() != o.getClass()) {    return false;  }  final CoverageCharVdt civ=(CoverageCharVdt)o;  return ((table == civ.table) && (attribute == civ.attribute) && (value == civ.value));}  }
class C{  protected SVGOMFEColorMatrixElement(){}  }
class C{  public static void checkFieldValidIPV4(final String ip,final String fieldName){  checkFieldNotEmpty(ip,fieldName);  if (!isValidIPV4(ip)) {    throw APIException.badRequests.invalidParameterInvalidIPV4(fieldName,ip);  }}  }
class C{  public boolean isNamespaceRepairingMode(){  return namespaceRepairingMode;}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public long ramBytesUsed(){  return RamUsageEstimator.alignObjectSize(Integer.BYTES * 3 + RamUsageEstimator.NUM_BYTES_OBJECT_REF) + RamUsageEstimator.sizeOf(keys);}  }
class C{  @Override public String toString(){  StringBuilder resultString=new StringBuilder();  if (info.containsKey("Verbosity")) {    int V=MLUtils.getIntegerOption(info.get("Verbosity"),1);    if (V > 4) {      resultString.append("== Individual Errors\n\n");      resultString.append(Result.getResultAsString(this,V - 5) + "\n\n");    }  }  if (model.size() > 0)   resultString.append("== Model info\n\n" + MLUtils.hashMapToString(model));  resultString.append("== Evaluation Info\n\n" + MLUtils.hashMapToString(info));  resultString.append("\n\n== Predictive Performance\n\n" + MLUtils.hashMapToString(output,3));  String note="";  if (info.containsKey("Type") && info.get("Type").endsWith("CV")) {    note=" (averaged across folds)";  }  resultString.append("\n\n== Additional Measurements" + note + "\n\n"+ MLUtils.hashMapToString(vals,3));  resultString.append("\n\n");  return resultString.toString();}  }
class C{  private int applySegments(NewElement newElement,Element relatedToNew,int prevElementCloseRight,int level){  final int levelTextLength=level * SPACES_IN_TAB;  final int beforeOpenLeft=1 + prevElementCloseRight + levelTextLength;  final Element parent=relatedToNew.getParent();  if (parent.text == null) {    parent.text=new LinkedList<>();  }  parent.text.add(new Segment(prevElementCloseRight + 1,beforeOpenLeft));  final int openRight=beforeOpenLeft + openTagLength(newElement);  relatedToNew.start=new Segment(beforeOpenLeft + 1,openRight);  if (relatedToNew.isVoid()) {    relatedToNew.end=relatedToNew.start;    return openRight;  }  int childRight=openRight;  if (newElement.hasChildren()) {    final Iterator<NewElement> newChIt=newElement.getChildren().iterator();    final Iterator<Element> chIt=relatedToNew.getChildren().iterator();    while (newChIt.hasNext()) {      childRight=applySegments(newChIt.next(),chIt.next(),childRight,level + 1);    }  } else {    relatedToNew.text=new LinkedList<>();  }  int beforeCloseLeft;  if (newElement.hasChildren()) {    beforeCloseLeft=childRight + levelTextLength + 1;  } else {    beforeCloseLeft=childRight + newElement.getText().length();  }  relatedToNew.text.add(new Segment(childRight + 1,beforeCloseLeft));  relatedToNew.end=new Segment(beforeCloseLeft + 1,beforeCloseLeft + closeTagLength(newElement));  return relatedToNew.end.right;}  }
class C{  public void assignFuture(AggregationResultFuture service){  aggregationNode.setAggregationResultFuture(service,columnNum);  if (equivalentNodes == null) {    return;  }  for (  ExprAggregateNode equivalentAggNode : equivalentNodes) {    equivalentAggNode.setAggregationResultFuture(service,columnNum);  }}  }
class C{  public DBFWriter(){  this.header=new DBFHeader();}  }
class C{  @Override public GraphQuery has(final String key,final Object value){  criteria.add(new Has(key,value));  return this;}  }
class C{  public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  return new Builder<K,V>(Ordering.natural()).put(k1,v1).put(k2,v2).put(k3,v3).put(k4,v4).put(k5,v5).build();}  }
class C{  public SimpleInspector(Properties properties,GUIState state,String name,int maxProperties){  numElements=new JLabel();  this.maxProperties=maxProperties;  setLayout(new BorderLayout());  this.state=state;  listName=name;  add(getHeader(),BorderLayout.NORTH);  this.properties=properties;  generateProperties(0);  setTitle("" + properties.getObject());}  }
class C{  public boolean addNeighbours(List<Triangle> triangles){  return getNeighbours().addAll(triangles);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.SubjectAreas);  SubjectAreaEditForm frm=(SubjectAreaEditForm)form;  MessageResources rsc=getResources(request);  ActionMessages errors=null;  String op=(frm.getOp() != null ? frm.getOp() : request.getParameter("op"));  if (op.equals(rsc.getMessage("button.addSubjectArea"))) {    sessionContext.checkPermission(Right.SubjectAreaAdd);    LookupTables.setupNonExternalDepts(request,sessionContext.getUser().getCurrentAcademicSessionId());    return mapping.findForward("addSubjectArea");  }  if (op.equals(rsc.getMessage("op.edit"))) {    doLoad(request,frm);    LookupTables.setupNonExternalDepts(request,sessionContext.getUser().getCurrentAcademicSessionId());    return mapping.findForward("editSubjectArea");  }  if (op.equals(rsc.getMessage("button.updateSubjectArea")) || op.equals(rsc.getMessage("button.saveSubjectArea"))) {    errors=frm.validate(mapping,request);    if (errors.size() == 0) {      doUpdate(request,frm);    }  }  if (op.equals(rsc.getMessage("button.deleteSubjectArea"))) {    errors=frm.validate(mapping,request);    if (errors.size() == 0) {      doDelete(request,frm);    }  }  if (frm.getUniqueId() != null)   request.setAttribute(Constants.JUMP_TO_ATTR_NAME,frm.getUniqueId().toString());  if (errors != null && errors.size() > 0) {    saveErrors(request,errors);    LookupTables.setupNonExternalDepts(request,sessionContext.getUser().getCurrentAcademicSessionId());    if (frm.getUniqueId() != null)     return mapping.findForward("editSubjectArea"); else     return mapping.findForward("addSubjectArea");  }  return mapping.findForward("back");}  }
class C{  public IteratedFilter(BufferedImageOp filter,int iterations){  this.filter=filter;  this.iterations=iterations;}  }
class C{  public boolean add(String suffix){  boolean result;  Character c;  String newSuffix;  TrieNode child;  result=false;  c=suffix.charAt(0);  newSuffix=suffix.substring(1);  child=m_Children.get(c);  if (child == null) {    result=true;    child=add(c);  }  if (newSuffix.length() > 0) {    result=child.add(newSuffix) || result;  }  return result;}  }
class C{  @Override public synchronized boolean isBeforeFirst() throws SQLException {  return super.isBeforeFirst();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public RemoteConnection port(int port){  this.port="" + port;  return this;}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.197 -0400",hash_original_method="7B966E73ED9336BE4B4A8DBC17BBD644",hash_generated_method="743F342384183D60C7D3F3C49847D58F") public static void forceDeleteOnExit(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectoryOnExit(file);  } else {    file.deleteOnExit();  }}  }
class C{  @Deprecated public boolean isAssignableFrom(Type from){  if (from == null) {    return false;  }  if (type.equals(from)) {    return true;  }  if (type instanceof Class<?>) {    return rawType.isAssignableFrom($Type$Types.getRawType(from));  } else   if (type instanceof ParameterizedType) {    return isAssignableFrom(from,(ParameterizedType)type,new HashMap<String,Type>());  } else   if (type instanceof GenericArrayType) {    return rawType.isAssignableFrom($Type$Types.getRawType(from)) && isAssignableFrom(from,(GenericArrayType)type);  } else {    throw buildUnexpectedTypeError(type,Class.class,ParameterizedType.class,GenericArrayType.class);  }}  }
class C{  public boolean isNoCache(){  return noCache;}  }
class C{  public boolean onRedirect(String url){  return false;}  }
class C{  public void addAttribute(Attribute attr){  _attributes.add(attr);}  }
class C{  public void testFieldSortSingleSearcher() throws Exception {  Sort custSort=new Sort(new SortField("publicationDate_",SortField.Type.STRING),SortField.FIELD_SCORE);  IndexSearcher searcher=new CustomSearcher(reader,2);  matchHits(searcher,custSort);}  }
class C{  public void dup(){  mv.visitInsn(Opcodes.DUP);}  }
class C{  public void close() throws IOException {  finish();  super.close();}  }
class C{  public TObjectDoubleHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public static String cleanLeadingAndTrailingNewLineAndChars(String input){  if (!StringUtils.hasText(input)) {    return input;  }  String output=input;  output=output.replaceAll("[\\s]+\\*[\\s]+"," ");  while (output.startsWith("/") || output.startsWith("\n") || output.startsWith("*")|| output.startsWith("-")|| output.startsWith("\t")|| output.startsWith(" ")|| output.startsWith("\\")) {    output=output.substring(1);  }  while (output.endsWith("/") || output.endsWith("\n") || output.endsWith(" ")|| output.endsWith(",")|| output.endsWith("\t")|| output.endsWith("-")|| output.endsWith("*")) {    output=output.substring(0,output.length() - 1);  }  return output;}  }
class C{  private static int indexForStackSlot(FrameMap frameMap,StackSlot slot){  assert frameMap.offsetForStackSlot(slot) % frameMap.getTarget().wordSize == 0;  int value=frameMap.offsetForStackSlot(slot) / frameMap.getTarget().wordSize;  return value;}  }
class C{  public CampoDatoVO updateCampoDato(CampoDatoVO campoDatoVO){  Locale locale=getServiceClient().getLocale();  iniciarTransaccion();  campoDatoVO=campoDatoDbEntity.updateCampoDato(campoDatoVO);  AuditoriaDescripcion.auditaModificacionCampo(locale,this,campoDatoVO);  UsoObjetoVO usoObjetoVO=new UsoObjetoVO();  usoObjetoVO.setIdObj(campoDatoVO.getIdArea());  usoObjetoVO.setIdObjUsuario(campoDatoVO.getId());  usoObjetoVO.setTipoObj(TipoObjetoUsado.AREA);  usoObjetoVO.setTipoObjUsuario(TipoObjetoUsuario.CAMPO_DATO);  UsoObjetoVO antiguoUsoObjetoVO=(UsoObjetoVO)usoObjetoDbEntity.getXIdObjUsuarioYTipoObj(usoObjetoVO.getIdObjUsuario(),usoObjetoVO.getTipoObj());  if (antiguoUsoObjetoVO == null) {    if (campoDatoVO.getIdArea() != null)     usoObjetoDbEntity.create(usoObjetoVO);  } else {    if (campoDatoVO.getIdArea() != null)     usoObjetoDbEntity.update(usoObjetoVO); else     usoObjetoDbEntity.deleteByIdObjUsuario(campoDatoVO.getId());  }  commit();  return campoDatoVO;}  }
class C{  public void animateProgress(int end,int duration,int delay){  mProgress=end;  ViewGroup parent=(ViewGroup)getParent();  int heightToReach=(parent.getMeasuredHeight() * end) / 102;  int initialHeight=(int)mBarWidth;  heightToReach=(heightToReach < initialHeight) ? initialHeight : heightToReach;  if (end == -1) {    heightToReach=0;  }  setVisibility(View.INVISIBLE);  setPivotY(heightToReach);  setMinimumHeight(heightToReach);  AnimatorSet set=new AnimatorSet();  setVisibility(VISIBLE);  set.playTogether(Glider.glide(Skill.BounceEaseOut,duration,ObjectAnimator.ofFloat(this,"scaleY",0,1)));  set.setDuration(duration);  set.setStartDelay(delay);  set=addListenersToSet(set);  set.start();}  }
class C{  private State buildPatch(TaskState.TaskStage stage,Throwable e){  State s=new State();  s.taskState=new TaskState();  s.taskState.stage=stage;  if (e != null) {    s.taskState.failure=Utils.toServiceErrorResponse(e);  }  return s;}  }
class C{  public static int launchIOSApp(String appName,boolean wait,long launchTimeout){  Process p=null;  int ret=-1;  try {    String[] cmdOpenUrl={"ssh","-p","2222","root@localhost","openURL",appName + ".app:/"};    p=Runtime.getRuntime().exec(cmdOpenUrl);    p.waitFor();    if (wait) {      ret=MobileUtil.getIOSProcessId(appName,true,launchTimeout);    }  } catch (  Exception e) {    e.printStackTrace();  }  return ret;}  }
class C{  public static boolean compareLoosely(String a,String b){  int ia, ib;  int matched;  int numNonDialableCharsInA=0;  int numNonDialableCharsInB=0;  if (a == null || b == null)   return a == b;  if (a.length() == 0 || b.length() == 0) {    return false;  }  ia=indexOfLastNetworkChar(a);  ib=indexOfLastNetworkChar(b);  matched=0;  while (ia >= 0 && ib >= 0) {    char ca, cb;    boolean skipCmp=false;    ca=a.charAt(ia);    if (!isDialable(ca)) {      ia--;      skipCmp=true;      numNonDialableCharsInA++;    }    cb=b.charAt(ib);    if (!isDialable(cb)) {      ib--;      skipCmp=true;      numNonDialableCharsInB++;    }    if (!skipCmp) {      if (cb != ca && ca != WILD && cb != WILD) {        break;      }      ia--;      ib--;      matched++;    }  }  if (matched < MIN_MATCH) {    int effectiveALen=a.length() - numNonDialableCharsInA;    int effectiveBLen=b.length() - numNonDialableCharsInB;    return effectiveALen == effectiveBLen && effectiveALen == matched;  }  if (matched >= MIN_MATCH && (ia < 0 || ib < 0)) {    return true;  }  if (matchIntlPrefix(a,ia + 1) && matchIntlPrefix(b,ib + 1)) {    return true;  }  if (matchTrunkPrefix(a,ia + 1) && matchIntlPrefixAndCC(b,ib + 1)) {    return true;  }  return matchTrunkPrefix(b,ib + 1) && matchIntlPrefixAndCC(a,ia + 1);}  }
class C{  public static final byte[] zip(byte[] in){  try {    ByteArrayOutputStream byteOut=new ByteArrayOutputStream(in.length / EXPECTED_COMPRESSION_RATIO);    GZIPOutputStream outStream=new GZIPOutputStream(byteOut);    try {      outStream.write(in);    } catch (    Exception e) {      LOG.error("Failed to get outStream.write input",e);    }    try {      outStream.close();    } catch (    IOException e) {      LOG.error("Failed to implement outStream.close",e);    }    return byteOut.toByteArray();  } catch (  IOException e) {    LOG.error("Failed with IOException",e);    return null;  }}  }
class C{  private Response errorSafeCallMethod(String methodName,Object args[]) throws FabricCommunicationException {  List<?> responseData=this.methodCaller.call(methodName,args);  Response response=new Response(responseData);  if (response.getErrorMessage() != null) {    throw new FabricCommunicationException("Call failed to method `" + methodName + "':\n"+ response.getErrorMessage());  }  return response;}  }
class C{  public void moveTo(float x,float y){  mPoints.add(PathPoint.moveTo(x,y));}  }
class C{  public void init() throws ServletException {}  }
class C{  private void initMetaData(RowSetMetaDataImpl md,ResultSetMetaData rsmd) throws SQLException {  int numCols=rsmd.getColumnCount();  md.setColumnCount(numCols);  for (int col=1; col <= numCols; col++) {    md.setAutoIncrement(col,rsmd.isAutoIncrement(col));    if (rsmd.isAutoIncrement(col))     updateOnInsert=true;    md.setCaseSensitive(col,rsmd.isCaseSensitive(col));    md.setCurrency(col,rsmd.isCurrency(col));    md.setNullable(col,rsmd.isNullable(col));    md.setSigned(col,rsmd.isSigned(col));    md.setSearchable(col,rsmd.isSearchable(col));    int size=rsmd.getColumnDisplaySize(col);    if (size < 0) {      size=0;    }    md.setColumnDisplaySize(col,size);    md.setColumnLabel(col,rsmd.getColumnLabel(col));    md.setColumnName(col,rsmd.getColumnName(col));    md.setSchemaName(col,rsmd.getSchemaName(col));    int precision=rsmd.getPrecision(col);    if (precision < 0) {      precision=0;    }    md.setPrecision(col,precision);    int scale=rsmd.getScale(col);    if (scale < 0) {      scale=0;    }    md.setScale(col,scale);    md.setTableName(col,rsmd.getTableName(col));    md.setCatalogName(col,rsmd.getCatalogName(col));    md.setColumnType(col,rsmd.getColumnType(col));    md.setColumnTypeName(col,rsmd.getColumnTypeName(col));  }  if (conn != null) {    dbmslocatorsUpdateCopy=conn.getMetaData().locatorsUpdateCopy();  }}  }
class C{  public int compareTo(DurationField durationField){  return 0;}  }
class C{  @Override protected void drawLabels(Canvas c,float pos){  float[] position=new float[]{0f,0f};  BarData bd=mChart.getData();  int step=bd.getDataSetCount();  for (int i=mMinX; i <= mMaxX; i+=mXAxis.mAxisLabelModulus) {    position[1]=i * step + i * bd.getGroupSpace() + bd.getGroupSpace() / 2f;    if (step > 1) {      position[1]+=((float)step - 1f) / 2f;    }    mTrans.pointValuesToPixel(position);    if (mViewPortHandler.isInBoundsY(position[1])) {      String label=mXAxis.getValues().get(i);      c.drawText(label,pos,position[1] + mXAxis.mLabelHeight / 2f,mAxisLabelPaint);    }  }}  }
class C{  protected void moveOneSlotToTop(ImageTile[] selectedTiles2){  OMGraphicList list=getList();  if (list != null && selectedTiles != null && selectedTiles.length > 0) {    for (int i=0; i < selectedTiles2.length; i++) {      ImageTile tile=selectedTiles2[i];      list.moveIndexedOneToTop(list.indexOf(tile));    }    rebuildListModel();  }}  }
class C{  public void draw(Canvas canvas){  if (drawable != null) {    drawable.draw(canvas);  }}  }
class C{  public String toString(){  return super.toString() + extensionName + " [\n  "+ distributionPoints+ "]\n";}  }
class C{  public void pred_8x16_motion(int n,int list,int ref,int[] mxmy){  if (n == 0) {    int left_ref=this.ref_cache[list][scan8[0] - 1];    int[] A=this.mv_cache[list][scan8[0] - 1];    if (left_ref == ref) {      mxmy[0]=A[0];      mxmy[1]=A[1];      return;    }  } else {    int[] C=null;    int diagonal_ref;    int[][] pC=new int[][]{C};    diagonal_ref=fetch_diagonal_mv(pC,(int)scan8[4],list,2);    C=pC[0];    if (diagonal_ref == ref) {      mxmy[0]=C[0];      mxmy[1]=C[1];      return;    }  }  pred_motion(n,2,list,ref,mxmy);}  }
class C{  public AuthenticationRequiredException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Image(String formatType,File file) throws IOException {  super(file);  setFormatType(formatType);}  }
class C{  public void testGetWarContextWhenContextAlreadySetupAndNoJBossWebXml() throws Exception {  JBossWAR war=new JBossWAR(getResourcePath(PACKAGE_PATH + "jboss-empty.war"));  war.setContext("context");  assertEquals("context",war.getContext());}  }
class C{  public static IBlock normalizeCourseStructure(CourseStructureV1Model courseStructureV1Model,String courseId){  BlockModel topBlock=courseStructureV1Model.getBlockById(courseStructureV1Model.root);  CourseComponent course=new CourseComponent(topBlock,null);  course.setCourseId(courseId);  for (  BlockModel m : courseStructureV1Model.getDescendants(topBlock)) {    normalizeCourseStructure(courseStructureV1Model,m,course);  }  return course;}  }
class C{  public int viewToModel(JTextComponent a,Point b){  int returnValue=((TextUI)(uis.elementAt(0))).viewToModel(a,b);  for (int i=1; i < uis.size(); i++) {    ((TextUI)(uis.elementAt(i))).viewToModel(a,b);  }  return returnValue;}  }
class C{  public void cancel(SendPacket packet){synchronized (mQueue) {    mQueue.remove(packet);  }}  }
class C{  @Override public int hashCode(){  int retval=0;  for (int i=0; i < sessionId.length; i++)   retval+=sessionId[i];  return retval;}  }
class C{  @Override public ExampleSet performPrediction(ExampleSet exampleSet,Attribute predictedLabelAttribute) throws OperatorException {  PrintStream predOut=null;  if (this.predictionsFile != null) {    try {      predOut=new PrintStream(new BufferedOutputStream(new FileOutputStream(this.predictionsFile)));    } catch (    IOException e) {      throw new UserError(null,303,this.predictionsFile.getName(),e.getMessage());    } finally {      if (predOut != null) {        predOut.close();      }    }  }  ExampleSet[] eSet=new ExampleSet[this.getNumberOfModels()];  for (int i=0; i < this.getNumberOfModels(); i++) {    Model model=this.getModel(i);    eSet[i]=(ExampleSet)exampleSet.clone();    eSet[i]=model.apply(eSet[i]);  }  List<Iterator<Example>> reader=new ArrayList<Iterator<Example>>(eSet.length);  for (int r=0; r < eSet.length; r++) {    reader.add(eSet[r].iterator());  }  Iterator<Example> originalReader=exampleSet.iterator();  final int posIndex=SDRulesetInduction.getPosIndex(exampleSet.getAttributes().getLabel());  int[] numCovered=new int[this.getNumberOfModels()];  int[] posCovered=new int[this.getNumberOfModels()];  while (originalReader.hasNext()) {    Example example=originalReader.next();    double sumPos=0;    double sumTotal=0;    for (int k=0; k < reader.size(); k++) {      Example e=reader.get(k).next();      if (predOut != null) {        predOut.print(e.getPredictedLabel() + " ");      }      double[] modelWeights;      int predicted=(int)e.getPredictedLabel();      modelWeights=this.getWeightsForModel(k,predicted);      for (int i=0; i < modelWeights.length; i++) {        sumTotal+=modelWeights[i];      }      sumPos+=modelWeights[posIndex];      if (this.print_to_stdout) {        int label=(int)e.getLabel();        if (predicted == posIndex) {          numCovered[k]++;          if (label == predicted) {            posCovered[k]++;          }        }      }    }    if (predOut != null) {      predOut.println(example.getLabel());    }    if (sumTotal > 0) {      sumPos/=sumTotal;    } else {      sumPos=this.getPriorOfClass(posIndex);    }    example.setPredictedLabel(sumPos);  }  if (predOut != null) {    predOut.close();  }  return exampleSet;}  }
class C{  public void add(int position,SoundCloudTrack track){  if (mCurrentTrackIndex == -1) {    mCurrentTrackIndex=0;  }  mSoundCloudPlaylist.addTrack(position,track);}  }
class C{  private void cmd_file(){  Media file=null;  try {    file=Fileupload.get(true);    if (file == null)     return;  } catch (  InterruptedException e) {    log.warning(e.getLocalizedMessage());    return;  }  FileOutputStream fos=null;  String fileName=null;  try {    File tempFile=File.createTempFile("adempiere_","_" + file.getName());    fileName=tempFile.getAbsolutePath();    fos=new FileOutputStream(tempFile);    byte[] bytes=null;    if (file.inMemory()) {      bytes=file.getByteData();    } else {      InputStream is=file.getStreamData();      ByteArrayOutputStream baos=new ByteArrayOutputStream();      byte[] buf=new byte[1000];      int byteread=0;      while ((byteread=is.read(buf)) != -1)       baos.write(buf,0,byteread);      bytes=baos.toByteArray();    }    fos.write(bytes);    fos.flush();    fos.close();  } catch (  IOException e) {    log.log(Level.SEVERE,e.getLocalizedMessage(),e);    return;  } finally {    if (fos != null)     try {      fos.close();    } catch (    IOException e) {    }  }  getComponent().setText(fileName);}  }
class C{  public int compareTo(final ChronoIndexData info){  long value;  if (chronoSort) {    value=this.time - info.time;  } else {    value=this.revisionCounter - info.revisionCounter;  }  if (value == 0) {    return 0;  } else   if (value > 0) {    return 1;  } else {    return -1;  }}  }
class C{  protected void generatePDFTable() throws JspException, BadElementException {  if (this.header) {    generateHeaders();  }  tablePDF.endHeaders();  generateRows();}  }
class C{  public void help(final Command command){  if (Command.isUnspecified(command)) {    usage();  } else {    info(StringUtils.wrap(helpMap.get(command.getName()),80,""));    info("\n\nusage: \n\n");    info(StringUtils.wrap("> java ... " + getClass().getName() + " "+ usageMap.get(command),80,"\t\t"));    info("\n\noptions: \n\n");    for (    final String option : command.getOptions()) {      info(StringUtils.wrap("--" + option + ": "+ helpMap.get(option)+ "\n",80,"\t"));    }    info("\n\n");  }}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    FileInputStream fis=null;    try {      fis=new FileInputStream(file);      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public Vector2 mul(float scalar){  x*=scalar;  y*=scalar;  return this;}  }
class C{  protected static int toDigit(char ch,int index) throws DecoderException {  int digit=Character.digit(ch,16);  if (digit == -1) {    throw new DecoderException("Illegal hexadecimal charcter " + ch + " at index "+ index);  }  return digit;}  }
class C{  void checkProjectRunners(RunnersDescriptor runnersDescriptor) throws BadRequestException {  if (runnersDescriptor != null && runnersDescriptor.getConfigs() != null && !runnersDescriptor.getConfigs().isEmpty()) {    for (    String runnerName : runnersDescriptor.getConfigs().keySet()) {      if (!runnerName.startsWith("system:") && !RUNNER_NAME_VALIDATOR.matcher(runnerName).matches()) {        throw new BadRequestException("Runner name " + runnerName + " is invalid");      }    }  }}  }
class C{  public static int showInternalConfirmDialog(Component parentComponent,Object message,String title,int optionType){  return showInternalConfirmDialog(parentComponent,message,title,optionType,QUESTION_MESSAGE);}  }
class C{  public void put(String fieldName,Float value){  if (value == null) {    _put(fieldName,nullNode());  } else {    _put(fieldName,numberNode(value.floatValue()));  }}  }
class C{  private static void insertMoveAfter(RegisterOperand r2,RegisterOperand r1,Instruction s){  Instruction m=PhysicalRegisterTools.makeMoveInstruction(r2,r1);  s.insertAfter(m);}  }
class C{  public HashCodeBuilder(int initialNonZeroOddNumber,int multiplierNonZeroOddNumber){  if (initialNonZeroOddNumber == 0) {    throw new IllegalArgumentException("HashCodeBuilder requires a non zero initial value");  }  if (initialNonZeroOddNumber % 2 == 0) {    throw new IllegalArgumentException("HashCodeBuilder requires an odd initial value");  }  if (multiplierNonZeroOddNumber == 0) {    throw new IllegalArgumentException("HashCodeBuilder requires a non zero multiplier");  }  if (multiplierNonZeroOddNumber % 2 == 0) {    throw new IllegalArgumentException("HashCodeBuilder requires an odd multiplier");  }  iConstant=multiplierNonZeroOddNumber;  iTotal=initialNonZeroOddNumber;}  }
class C{  protected void cleanStationsAndNetwork(){  log.info("Clean Stations and Network...");  cleanSchedule();  prepareNetwork();  removeNonUsedStopFacilities();  setConnectedStopFacilitiesToIsBlocking();  log.info("Clean Stations and Network... done.");}  }
class C{  private void loadConfig(Context ctx) throws Exception {  SocialAuthConfig config=new SocialAuthConfig();  Resources resources=ctx.getResources();  AssetManager assetManager=resources.getAssets();  InputStream inputStream=null;  boolean fileExist;  try {    inputStream=assetManager.open("oauth_consumer.properties");    fileExist=true;  } catch (  Exception e) {    fileExist=false;    Log.d("SocialAuthAdapter","oauth_consumer.properties not found");  }  if (fileExist) {    config.load(inputStream);    socialAuthManager.setSocialAuthConfig(config);  } else {    for (    String key : authMap.keySet()) {      config.addProviderConfig(key,authMap.get(key));    }    socialAuthManager.setSocialAuthConfig(config);  }}  }
class C{  @Override public void endOverlay(){}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.LOGICAL_AND_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)newValue);  return;case ExpressionsPackage.LOGICAL_AND_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void errorNoLog(final ErrorType type,final String... params){  if (type != null && type.getNumberOfParameters() == params.length) {    final ErrorEvent event=new ErrorEvent(type,params);    notifyAll(event);  }}  }
class C{  public String code(){  return code;}  }
class C{  public void testGetLenEncodedBytes(){  byte[] expectedResult1=null;  byte[] expectedResult2={1,2,3};  byte[] expectedResult3={};  byte[] bytes1={1,0,0,1,-5};  byte[] bytes2={4,0,0,1,3,1,2,3};  byte[] bytes3={1,0,0,1,0};  MySQLPacket array1=new MySQLPacket(bytes1.length - MySQLPacket.HEADER_LENGTH,bytes1,(byte)1);  MySQLPacket array2=new MySQLPacket(bytes2.length - MySQLPacket.HEADER_LENGTH,bytes2,(byte)1);  MySQLPacket array3=new MySQLPacket(bytes3.length - MySQLPacket.HEADER_LENGTH,bytes3,(byte)1);  compareBytes(expectedResult1,array1.getLenEncodedBytes());  compareBytes(expectedResult2,array2.getLenEncodedBytes());  compareBytes(expectedResult3,array3.getLenEncodedBytes());}  }
class C{  public double measureMaxDepth(){  return m_MaxDepth;}  }
class C{  public void loadLocal(final int local){  loadInsn(getLocalType(local),local);}  }
class C{  public boolean operationThreaded(){  return threadedOperation;}  }
class C{  public static String generateRandomString(int length){  char[] chars="abcdefghijklmnopqrstuvwxyz1234567890".toCharArray();  StringBuilder sb=new StringBuilder();  Random random=new Random();  for (int i=0; i < 20; i++) {    char c=chars[random.nextInt(chars.length)];    sb.append(c);  }  return sb.toString();}  }
class C{  public static String decryptText(byte[] password,byte[] data){  byte[] plain=decryptData(password,data);  int len=((plain[0] & 0xff) << 24) + ((plain[1] & 0xff) << 16) + ((plain[2] & 0xff) << 8)+ (plain[3] & 0xff);  if (len < 0 || len > plain.length - 4) {    throw new IllegalStateException("Unmatched password is used");  }  return new String(plain,4,len,CharsetToolkit.UTF8_CHARSET);}  }
class C{  protected void onPart(String channel,String sender,String login,String hostname){}  }
class C{  public void test_filter_host_01(){  doMatchTest("/hostname/CPU/Foo",true);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.BITWISE_OR_EXPRESSION__LEFT_OPERAND:    return basicSetLeftOperand(null,msgs);case ExpressionsPackage.BITWISE_OR_EXPRESSION__RIGHT_OPERAND:  return basicSetRightOperand(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void loadRotate(float rot){  float c, s;  rot*=(float)(java.lang.Math.PI / 180.0f);  c=(float)java.lang.Math.cos(rot);  s=(float)java.lang.Math.sin(rot);  mMat[0]=c;  mMat[1]=-s;  mMat[2]=s;  mMat[3]=c;}  }
class C{  public String toString(){  if (myToString == null) {    final StringBuilder result=new StringBuilder().append(this.getClass().getName()).append("(name=").append(getTypeName()).append(",rowType=").append(rowType.toString()).append(",indexNames=(");    String sep="";    for (    String index : indexNames) {      result.append(sep).append(index);      sep=",";    }    result.append("))");    myToString=result.toString();  }  return myToString;}  }
class C{  public void addDefaultAction(Runnable rable){  if (defaultActions == null)   defaultActions=new ArrayList();  defaultActions.add(rable);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  BufferedSink writer=Okio.buffer(fileSystem.sink(journalFileTmp));  try {    writer.writeUtf8(MAGIC).writeByte('\n');    writer.writeUtf8(VERSION_1).writeByte('\n');    writer.writeDecimalLong(appVersion).writeByte('\n');    writer.writeDecimalLong(valueCount).writeByte('\n');    writer.writeByte('\n');    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.writeUtf8(DIRTY).writeByte(' ');        writer.writeUtf8(entry.key);        writer.writeByte('\n');      } else {        writer.writeUtf8(CLEAN).writeByte(' ');        writer.writeUtf8(entry.key);        entry.writeLengths(writer);        writer.writeByte('\n');      }    }  }  finally {    writer.close();  }  if (fileSystem.exists(journalFile)) {    fileSystem.rename(journalFile,journalFileBackup);  }  fileSystem.rename(journalFileTmp,journalFile);  fileSystem.delete(journalFileBackup);  journalWriter=newJournalWriter();  hasJournalErrors=false;}  }
class C{  public static void main(String[] args){  PrintStream ps=System.out;  ps.print("Welcome to Codehaus Cargo");  String version=Uberjar.class.getPackage().getImplementationVersion();  if (version != null && !version.isEmpty()) {    ps.print(" version " + version);  }  ps.println(".");  ps.println();  ps.println("Cargo is a thin wrapper that allows you to manipulate Java EE containers in a");  ps.println("standard way. Cargo can be used from a \"classic\" Java program, as a set of ANT");  ps.println("tasks and even Maven 2 / Maven 3 goals.");  ps.println();  ps.println("See our website for the full documentation: https://codehaus-cargo.github.io/");}  }
class C{  @Category(FlakyTest.class) @Test public void testReplicatedSerialPropagationWithRemoteReceiverStopped() throws Exception {  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2);  vm2.invoke(null);  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  vm4.invoke(null);  vm5.invoke(null);  vm2.invoke(null);  startSenderInVMs("ln",vm4,vm5);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  AsyncInvocation inv1=vm4.invokeAsync(null);  vm2.invoke(null);  inv1.join();  vm4.invoke(null);  vm4.invoke(null);}  }
class C{  private void populateRsetsMap(Map<String,CreateRSetParams> rsetParamsMap,CreateVolumeParams volumeParams,Volume volume){  String key=volume.getRSetName();  if (rsetParamsMap.containsKey(key)) {    rsetParamsMap.get(key).getVolumes().add(volumeParams);  } else {    CreateRSetParams rsetParams=new CreateRSetParams();    rsetParams.setName(key);    rsetParams.setVolumes(new ArrayList<CreateVolumeParams>());    rsetParams.getVolumes().add(volumeParams);    rsetParamsMap.put(key,rsetParams);  }}  }
class C{  public ExecutionResult runTest(TestChromosome testChromosome){  if (testChromosome.getLastExecutionResult() != null && !testChromosome.isChanged()) {    return testChromosome.getLastExecutionResult();  }  TestCase test=testChromosome.getTestCase();  ExecutionResult result=new ExecutionResult(test,null);  try {    result=TestCaseExecutor.getInstance().execute(test);    int num=test.size();    if (!result.noThrownExceptions()) {      num=result.getFirstPositionOfThrownException();    }    MaxStatementsStoppingCondition.statementsExecuted(num);  } catch (  Exception e) {    logger.error("TG: Exception caught: ",e);    throw new RuntimeException(e);  }  return result;}  }
class C{  public PaymentPage(final PageParameters params){  super(params);  addOrReplace(new FeedbackPanel(FEEDBACK));  final Map<String,Object> resultParam=new HashMap<String,Object>();  try {    final Map param=getWicketUtil().getHttpServletRequest().getParameterMap();    final Map mparam=new HashMap();    mparam.putAll(param);    mparam.put(PaymentMiscParam.CLIENT_IP,ApplicationDirector.getShopperIPAddress());    final ShoppingCart cart=ApplicationDirector.getShoppingCart();    if (cart.getCartItemsCount() > 0) {      result=paymentProcessFacade.pay(cart,mparam);      resultParam.put("order",checkoutServiceFacade.findByReference(cart.getGuid()));      resultParam.put("result",result);    } else {      resultParam.put("result",false);    }  } catch (  OrderItemAllocationException e) {    final ProductSku productSku=productServiceFacade.getProductSkuBySkuCode(e.getProductSkuCode());    resultParam.put("product",getI18NSupport().getFailoverModel(productSku.getDisplayName(),productSku.getName()).getValue(getLocale().getLanguage()));    resultParam.put("sku",e.getProductSkuCode());    resultParam.put("result",false);    resultParam.put("missingStock",e.getProductSkuCode());    resultParam.put("exception",null);    result=false;  }catch (  OrderException e) {    resultParam.put("result",false);    resultParam.put("exception",e.getMessage());    resultParam.put("missingStock",null);    result=false;  }  addOrReplace(new Label("paymentMessage",contentServiceFacade.getDynamicContentBody("paymentpage_message",ShopCodeContext.getShopId(),getLocale().getLanguage(),resultParam)).setEscapeModelStrings(false));  if (result) {    shoppingCartCommandFactory.execute(ShoppingCartCommand.CMD_CLEAN,ApplicationDirector.getShoppingCart(),Collections.singletonMap(ShoppingCartCommand.CMD_CLEAN,null));  }}  }
class C{  static final public String hex(char what){  return hex(what,4);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.472 -0400",hash_original_method="5E316A44D1D2B85B5A94898151BCE074",hash_generated_method="D7EA21AECB525C7025CA280400CBE298") public String next(){  return nextLine();}  }
class C{  public void textLeading(float leading){  g.textLeading(leading);}  }
class C{  public boolean contains(Rectangle rect){  return contains(rect.x,rect.y,rect.size.getWidth(),rect.size.getHeight());}  }
class C{  public void handle(jmri.configurexml.ErrorMemo e){  super.handle(e);  try {    String m="<html>" + e.description;    if (e.systemName != null) {      m+=" System name \"" + e.systemName + "\"";    }    if (e.userName != null && !e.userName.equals("")) {      m+="<br> User name \"" + e.userName + "\"";    }    if (e.operation != null) {      m+="<br> while " + e.operation;    }    if (e.adapter != null) {      m+="<br> in adaptor of type " + e.adapter.getClass().getName();    }    if (e.exception != null) {      m+="<br> Exception: " + e.exception.toString();    }    m+="</html>";    jmri.InstanceManager.getDefault(jmri.UserPreferencesManager.class).showErrorMessage("Error during " + e.title,m,e.description,"",true,false);  } catch (  HeadlessException ex) {  }}  }
class C{  public static PttCommentFragment newInstance(ArrayList<Article> articleList){  PttCommentFragment fragment=new PttCommentFragment();  Bundle args=new Bundle();  args.putParcelableArrayList(EXTRA_PTT_COMMENTS,articleList);  fragment.setArguments(args);  return fragment;}  }
class C{  public Map<String,Double> memoryPoolUsage(){  final Map<String,Double> pools=new TreeMap<String,Double>();  for (  MemoryPoolMXBean pool : memoryPools) {    final double max=pool.getUsage().getMax() == -1 ? pool.getUsage().getCommitted() : pool.getUsage().getMax();    pools.put(pool.getName(),pool.getUsage().getUsed() / max);  }  return Collections.unmodifiableMap(pools);}  }
class C{  public double impliedVolatility(final double price,final GeneralizedBlackScholesProcess process,final double accuracy,final int maxEvaluations){  return impliedVolatility(price,process,accuracy,maxEvaluations,1.0e-7,4.0);}  }
class C{  public BlockStatement(List<Statement> statements,VariableScope scope){  this.statements=statements;  this.scope=scope;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private boolean isSortOrderAscending(final Optional<String> sortBy){  if (sortBy.isPresent()) {    String sortColumn=sortBy.get();    return !sortColumn.startsWith(SORT_ORDER_DESC);  } else {    return false;  }}  }
class C{  public void push(String value){  append(value);}  }
class C{  private LoggerFactory(){}  }
class C{  private void filterObjects(List<ReplicationFilter> filters,List<Table> tables,List<NamedPartition> partitions,Map<HiveObjectSpec,Table> tableLookupMap){  Set<HiveObjectSpec> tablesToNotReplicate=new HashSet<>();  for (  NamedPartition pwn : partitions) {    Partition partition=pwn.getPartition();    HiveObjectSpec tableSpec=new HiveObjectSpec(partition.getDbName(),partition.getTableName());    tablesToNotReplicate.add(tableSpec);  }  Iterator<NamedPartition> partitionIterator=partitions.iterator();  while (partitionIterator.hasNext()) {    NamedPartition pwn=partitionIterator.next();    Partition partition=pwn.getPartition();    HiveObjectSpec partitionSpec=new HiveObjectSpec(pwn);    Table table=tableLookupMap.get(new HiveObjectSpec(partition.getDbName(),partition.getTableName()));    for (    ReplicationFilter filter : filters) {      if (!filter.accept(table,pwn)) {        LOG.debug(String.format("%s filtering out: %s",filter.getClass().getName(),partitionSpec));        partitionIterator.remove();        break;      }    }  }  Iterator<Table> tableIterator=tables.iterator();  while (tableIterator.hasNext()) {    Table table=tableIterator.next();    HiveObjectSpec tableSpec=new HiveObjectSpec(table);    for (    ReplicationFilter filter : filters) {      if (!filter.accept(table)) {        LOG.debug(String.format("%s filtering out: %s",filter.getClass().getName(),tableSpec));        tableIterator.remove();        break;      }    }  }}  }
class C{  public AccessibleJTableHeaderEntry(int c,JTableHeader p,JTable t){  parent=p;  column=c;  table=t;  this.setAccessibleParent(parent);}  }
class C{  public void write(byte[] b,int start,int length) throws IOException {  this.os.write(b,start,length);}  }
class C{  static public boolean doesFileExist(Context c,String fileName,long fileSize,boolean deleteFileOnMismatch){  File fileForNewFile=new File(Helpers.generateSaveFileName(c,fileName));  if (fileForNewFile.exists()) {    if (fileForNewFile.length() == fileSize) {      return true;    }    if (deleteFileOnMismatch) {      fileForNewFile.delete();    }  }  return false;}  }
class C{  public Builder deletePreferredLanguage(){  deleteFields.add("preferredLanguage");  return this;}  }
class C{  public void killApplication(String applicationId) throws IOException, YarnException {  log.info("killing job with application id: " + applicationId);  yarnClient.killApplication(getApplicationIDFromString(applicationId));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_PROGRAM_1__COMMENT_1:    return ((InternalEList<?>)getComment_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_PROGRAM_1__DIRECTIVE_1:  return ((InternalEList<?>)getDirective_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static double normalPdf(double[] deviationsFromMean,double[][] covariance) throws Exception {  if (deviationsFromMean.length != covariance.length) {    throw new Exception("Vector length of deviations does not " + "match the size of the covariance matrix");  }  double det=MatrixUtils.determinant(covariance);  double[][] invCovariance=MatrixUtils.invertSymmPosDefMatrix(covariance);  double expArg=MatrixUtils.dotProduct(MatrixUtils.matrixProduct(deviationsFromMean,invCovariance),deviationsFromMean);  double pdf=Math.pow(2.0 * Math.PI,-deviationsFromMean.length / 2.0) / Math.sqrt(det) * Math.exp(-0.5 * expArg);  return pdf;}  }
class C{  protected void expandFor(int index,int d){  if (index < size)   return;  int oldSize=size, capacity=vector.length;  size=index + 1;  if (capacity >= size)   return;  while (capacity < size)   capacity*=2;  int[] t=new int[capacity];  System.arraycopy(vector,0,t,0,oldSize);  if (d != 0)   Arrays.fill(t,oldSize,size,d);  vector=t;}  }
class C{  private HashMap<String,DBIDs> multipleAssignment(Relation<?> data){  HashMap<String,DBIDs> labelMap=new HashMap<>();  for (DBIDIter iditer=data.iterDBIDs(); iditer.valid(); iditer.advance()) {    String[] labels=data.get(iditer).toString().split(" ");    for (    String label : labels) {      assign(labelMap,label,iditer);    }  }  return labelMap;}  }
class C{  public static Input<String,IOException> text(final File source){  return text(source,"UTF-8");}  }
class C{  public ConcurrentSkipListMap(SortedMap<K,? extends V> m){  this.comparator=m.comparator();  initialize();  buildFromSorted(m);}  }
class C{  public static Timestamp addMonths(Timestamp refDate,int nrOfMonthsToAdd){  Calendar calendar=Calendar.getInstance();  calendar.setTime(refDate);  calendar.add(Calendar.MONTH,nrOfMonthsToAdd);  Timestamp resultDate=new Timestamp(calendar.getTimeInMillis());  resultDate.setNanos(refDate.getNanos());  return resultDate;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static ASTList append(ASTList a,ASTree b){  return concat(a,new ASTList(b));}  }
class C{  public nobr addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  protected ReactionTriggerImpl(){  super();}  }
class C{  public static int allMajorDiagonal(int[][] m){  int[] count=new int[2];  count[0]=0;  count[1]=0;  for (int i=0; i < m.length; i++) {    count[m[i][i]]++;    if (count[0] == m.length)     return 0;    if (count[1] == m.length)     return 1;  }  return -1;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void iterator(){  Iterator<List<SubscriptionHistory>> i=data.iterator();  List<SubscriptionHistory> subList=i.next();  assertEquals(2,subList.size());  List<SubscriptionHistory> subList2=i.next();  assertEquals(1,subList2.size());}  }
class C{  public List<JCTypeParameter> translateTypeParams(List<JCTypeParameter> trees){  for (List<JCTypeParameter> l=trees; l.nonEmpty(); l=l.tail)   l.head=translate(l.head);  return trees;}  }
class C{  public static int bytesToMs(int bytes,int sampleRate,int channels){  return (int)(500L * bytes / (sampleRate * channels));}  }
class C{  @SuppressForbidden(reason="We need Unsafe to actually crush :-)") public void crashJRE(){  final String vendor=Constants.JAVA_VENDOR;  final boolean supportsUnsafeNpeDereference=vendor.startsWith("Oracle") || vendor.startsWith("Sun") || vendor.startsWith("Apple");  try {    if (supportsUnsafeNpeDereference) {      try {        Class<?> clazz=Class.forName("sun.misc.Unsafe");        Field field=clazz.getDeclaredField("theUnsafe");        field.setAccessible(true);        Object o=field.get(null);        Method m=clazz.getMethod("putAddress",long.class,long.class);        m.invoke(o,0L,0L);      } catch (      Throwable e) {        System.out.println("Couldn't kill the JVM via Unsafe.");        e.printStackTrace(System.out);      }    }    Runtime.getRuntime().halt(-1);  } catch (  Exception e) {    System.out.println("Couldn't kill the JVM.");    e.printStackTrace(System.out);  }  fail();}  }
class C{  public static FieldAnnotation convertFieldAnnotation(ClassNameRewriter classNameRewriter,FieldAnnotation annotation){  if (classNameRewriter != IdentityClassNameRewriter.instance()) {    annotation=new FieldAnnotation(classNameRewriter.rewriteClassName(annotation.getClassName()),annotation.getFieldName(),rewriteSignature(classNameRewriter,annotation.getFieldSignature()),annotation.isStatic());  }  return annotation;}  }
class C{  public static Test suite(){  final TestSuite suite=new TestSuite("Iterators");  suite.addTestSuite(TestBTreeLeafCursors.class);  suite.addTestSuite(TestIterators.class);  suite.addTestSuite(TestReadOnlyBTreeCursors.class);  suite.addTestSuite(TestMutableBTreeCursors.class);  suite.addTest(com.bigdata.btree.filter.TestAll.suite());  suite.addTestSuite(TestChunkedIterators.class);  return suite;}  }
class C{  private void initSchemaPartition(){  SchemaPartition schemaPartition=service.getSchemaService().getSchemaPartition();  LdifPartition ldifPartition=new LdifPartition();  String workingDirectory=service.getWorkingDirectory().getPath();  ldifPartition.setWorkingDirectory(workingDirectory + "/schema");  File schemaRepository=new File(workingDirectory,"schema");  File wd=new File(workingDirectory);  SchemaLdifExtractor extractor=new DefaultSchemaLdifExtractor(wd);  try {    extractor.extractOrCopy(true);  } catch (  Exception e) {  }  schemaPartition.setWrappedPartition(ldifPartition);  try {    SchemaLoader loader=new LdifSchemaLoader(schemaRepository);    SchemaManager schemaManager=new DefaultSchemaManager(loader);    service.setSchemaManager(schemaManager);    schemaManager.loadAllEnabled();    schemaPartition.setSchemaManager(schemaManager);    List<Throwable> errors=schemaManager.getErrors();    if (errors.size() != 0) {      throw new Exception("Schema load failed : " + errors);    }  } catch (  Exception e) {  }}  }
class C{  public void attributeAdded(String key,String value,String systemId,int lineNr) throws Exception {  this.delegate.attributeAdded(key,value,systemId,lineNr);}  }
class C{  public void unbind(){  getWrappedPath().unbind();}  }
class C{  protected static int parseShortInteger(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int temp=pduDataStream.read();  assert (-1 != temp);  return temp & 0x7F;}  }
class C{  public void testImageSharingLogQuery() throws RemoteException {  Cursor cursor=null;  try {    String where=ImageSharingLog.SHARING_ID.concat("=?");    String[] whereArgs=new String[]{"123456789"};    cursor=mProvider.query(ImageSharingLog.CONTENT_URI,IMAGE_SHARING_LOG_PROJECTION,where,whereArgs,null);    assertNotNull(cursor);  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public void sort(){  Arrays.sort(data,0,size);}  }
class C{  public static void createStatusBarTiles(Context context,boolean nowStatus){  Intent intent=new Intent();  intent.setAction(TileReceiver.ACTION_UPDATE_STATUS);  intent.putExtra(C.EXTRA_ACTION,nowStatus ? C.ACTION_STOP : C.ACTION_START);  CustomTile customTile=new CustomTile.Builder(context).shouldCollapsePanel(false).setLabel(nowStatus ? R.string.notification_action_turn_off : R.string.app_name).setIcon(nowStatus ? R.drawable.ic_brightness_2_white_36dp : R.drawable.ic_wb_sunny_white_36dp).setOnClickIntent(PendingIntent.getBroadcast(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT)).build();  CMStatusBarManager.getInstance(context).publishTile(CM_TILE_CODE,customTile);}  }
class C{  protected static Class<?> resultType(final Object left,final Object right){  Class<?> type=void.class;  if (left instanceof String || right instanceof String) {    type=String.class;  } else   if (left instanceof Number && right instanceof Number) {    if (left instanceof Double || right instanceof Double) {      type=Double.class;    } else     if (left instanceof Float || right instanceof Float) {      type=Float.class;    } else     if (left instanceof Long || right instanceof Long) {      type=Long.class;    } else {      type=Integer.class;    }  }  return type;}  }
class C{  public String rules(){  return "Rules:\n======\nThe regular rules of Tic Tac Toe apply.";}  }
class C{  @Deprecated public void send() throws Exception {  if (!isCancelled()) {    ByteBuf output=inputBuffer == null ? Unpooled.buffer() : inputBuffer.alloc().buffer();    writeToBuffer(output);    user().sendRawPacket(output);  }}  }
class C{  public void clear(){  stopAndClear(0);}  }
class C{  public PSPCommunicationException(String message){  super(message);}  }
class C{  public Object invoke(Object receiver,Object... args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {  return VMCommonLibrarySupport.invoke(receiver,args,vmMethod,this,RVMClass.getClassFromStackFrame(1),invoker);}  }
class C{  public void updateScannedFlag(String filePath){  String selection=SONG_FILE_PATH + "=" + "'"+ filePath.replace("'","''")+ "'";  ContentValues values=new ContentValues();  values.put(SONG_SCANNED,"TRUE");  getDatabase().update(MUSIC_LIBRARY_TABLE,values,selection,null);}  }
class C{  public synchronized void removeTextListener(TextListener cl){  m_textListeners.remove(cl);}  }
class C{  protected Document readRTF(Resource resource) throws IOException, BadLocationException {  Document document=rtfParser.createDefaultDocument();  rtfParser.read(resource.getInputStream(),document,0);  return document;}  }
class C{  public static boolean isSameLength(short[] array1,short[] array2){  if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {    return false;  }  return true;}  }
class C{  private void fillExampleTable(DataSet dataSet,ProgressListener listener,int[] attributeColumns,MemoryExampleTable exampleTable) throws DataSetException, ProcessStoppedException, ParseException {  Attribute[] attributes=exampleTable.getAttributes();  dataSet.reset();  int numberOfRows=dataSet.getNumberOfRows();  DataRowFactory factory=new DataRowFactory(dataManagementType,DataRowFactory.POINT_AS_DECIMAL_CHARACTER);  boolean isRunningInProcess=isOperatorRunning();  while (dataSet.hasNext()) {    if (isRunningInProcess) {      operator.checkForStop();    }    if (shouldStop) {      throw new ProcessStoppedException();    }    DataSetRow currentRow=dataSet.nextRow();    if (listener != null) {      updateProcess(listener,dataSet.getCurrentRowIndex(),numberOfRows);    }    DataRow row=factory.create(attributes.length);    exampleTable.addDataRow(row);    int attributeIndex=0;    for (    Attribute attribute : attributes) {      if (currentRow.isMissing(attributeColumns[attributeIndex])) {        row.set(attribute,Double.NaN);      } else {switch (attribute.getValueType()) {case Ontology.INTEGER:case Ontology.NUMERICAL:case Ontology.REAL:          row.set(attribute,getNumber(currentRow,attributeColumns[attributeIndex]));        break;case Ontology.DATE_TIME:case Ontology.TIME:case Ontology.DATE:      row.set(attribute,getDate(currentRow,attributeColumns[attributeIndex]));    break;default :  row.set(attribute,getStringIndex(attribute,currentRow,attributeColumns[attributeIndex]));}}attributeIndex++;}}}  }
class C{  public RepositoriesImpl(){  _list=new ArrayList();}  }
class C{  protected boolean prepareDeployment(@Nullable Project project,@Nullable final DataContext dataContext,final ProgressHandler progressHandler){  boolean isVerified=true;  if (project != null) {    isVerified=doVerify(project,dataContext,progressHandler);    if (isVerified) {      final SlingServerTreeSelectionHandler selectionHandler=getSelectionHandler(project);      ServerConfiguration serverConfiguration=selectionHandler.getCurrentConfiguration();      if (serverConfiguration != null) {        AEMPluginConfiguration pluginConfiguration=ComponentProvider.getComponent(project,AEMPluginConfiguration.class);        String lastUsedServerConfiguration=pluginConfiguration != null ? pluginConfiguration.getLastUsedServerConfiguration() : "";        if (lastUsedServerConfiguration != null && lastUsedServerConfiguration.length() > 0 && !lastUsedServerConfiguration.equals(serverConfiguration.getName())) {          doPurge(project,progressHandler);          if (pluginConfiguration != null) {            pluginConfiguration.setLastUsedServerConfiguration(serverConfiguration.getName());          }        } else         if (lastUsedServerConfiguration == null || lastUsedServerConfiguration.length() == 0) {          if (pluginConfiguration != null) {            pluginConfiguration.setLastUsedServerConfiguration(serverConfiguration.getName());          }        }      }    }  }  return isVerified;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  void didSucceed(final Callable task){  nended.incrementAndGet();  try {    final boolean waiting=false;    releaseLocks(waiting);  } catch (  Throwable t) {    log.warn("Problem(s) releasing locks: " + t,t);  }  if (INFO)   log.info("Ended: nended=" + nended);}  }
class C{  public void prepareRecommendedVolumes(Long size,String task,TaskList taskList,Project project,VirtualArray neighborhood,VirtualPool vPool,Integer volumeCount,List<Recommendation> recommendations,BlockConsistencyGroup consistencyGroup,int volumeCounter,String volumeLabel,List<Volume> preparedVolumes,VirtualPoolCapabilityValuesWrapper cosCapabilities,Boolean createInactive){  Iterator<Recommendation> recommendationsIter=recommendations.iterator();  while (recommendationsIter.hasNext()) {    VolumeRecommendation recommendation=(VolumeRecommendation)recommendationsIter.next();    if (recommendation.getId() != null) {      continue;    }    if (recommendation.getType().toString().equals(VolumeRecommendation.VolumeType.BLOCK_VOLUME.toString())) {      String newVolumeLabel=AbstractBlockServiceApiImpl.generateDefaultVolumeLabel(volumeLabel,volumeCounter++,volumeCount);      Volume volume=getPrecreatedVolume(_dbClient,taskList,newVolumeLabel);      boolean volumePrecreated=false;      if (volume != null) {        volumePrecreated=true;      }      long thinVolumePreAllocationSize=0;      if (null != vPool.getThinVolumePreAllocationPercentage()) {        thinVolumePreAllocationSize=VirtualPoolUtil.getThinVolumePreAllocationSize(vPool.getThinVolumePreAllocationPercentage(),size);      }      volume=prepareVolume(_dbClient,volume,size,thinVolumePreAllocationSize,project,neighborhood,vPool,recommendation,newVolumeLabel,consistencyGroup,cosCapabilities,createInactive);      recommendation.setId(volume.getId());      addVolumeCapacityToReservedCapacityMap(_dbClient,volume);      preparedVolumes.add(volume);      if (!volumePrecreated) {        Operation op=_dbClient.createTaskOpStatus(Volume.class,volume.getId(),task,ResourceOperationTypeEnum.CREATE_BLOCK_VOLUME);        volume.getOpStatus().put(task,op);        TaskResourceRep volumeTask=toTask(volume,task,op);        taskList.getTaskList().add(volumeTask);      }    } else     if (recommendation.getType().toString().equals(VolumeRecommendation.VolumeType.BLOCK_LOCAL_MIRROR.toString())) {      VolumeRecommendation volumeRecommendation=(VolumeRecommendation)recommendation.getParameter(VolumeRecommendation.BLOCK_VOLUME);      URI volumeId=volumeRecommendation.getId();      Volume volume=_dbClient.queryObject(Volume.class,volumeId);      String mirrorLabel=volumeLabel;      if (volume.isInCG()) {        mirrorLabel=ControllerUtils.getMirrorLabel(volume.getLabel(),volumeLabel);      }      if (volumeCount > 1) {        mirrorLabel=ControllerUtils.getMirrorLabel(mirrorLabel,volumeCounter++);      }      BlockMirror mirror=initializeMirror(volume,vPool,recommendation.getCandidatePools().get(0),mirrorLabel,_dbClient);      recommendation.setId(mirror.getId());      preparedVolumes.add(mirror);      addVolumeCapacityToReservedCapacityMap(_dbClient,mirror);    }  }}  }
class C{  private static boolean isLocalUdpPortFree(int port){  boolean res=false;  try {    DatagramConnection conn=NetworkFactory.getFactory().createDatagramConnection();    conn.open(port);    conn.close();    res=true;  } catch (  IOException e) {    res=false;  }  return res;}  }
class C{  public void put(String key,float value){  Editor edit=context.getSharedPreferences(prefName,Context.MODE_PRIVATE).edit();  edit.putFloat(key,value).commit();}  }
class C{  public WPAttributeEditor(GridTab gridTab,boolean mandatory,boolean isReadOnly,boolean isUpdateable,int WindowNo,MPAttributeLookup lookup,boolean searchOnly){  super(new PAttributebox(),m_columnName,null,null,mandatory,isReadOnly,isUpdateable);  if (lookup == null) {    throw new IllegalArgumentException("Lookup cannot be null");  }  m_GridTab=gridTab;  m_WindowNo=WindowNo;  m_mPAttribute=lookup;  m_searchOnly=searchOnly;  m_mandatory=mandatory;  m_readWrite=!isReadOnly && isUpdateable;  if (m_GridTab != null) {    GridField gridField=m_GridTab.getField(m_columnName);    if (gridField != null)     m_AD_Column_ID=gridField.getAD_Column_ID();  }  initComponents();}  }
class C{  @Nullable @Override public SyntaxHighlighter create(@NotNull FileType fileType,@Nullable Project project,@Nullable VirtualFile file){  if (project != null && file != null) {    PsiFile psiFile=PsiManager.getInstance(project).findFile(file);    if (fileType == JavaClassFileType.INSTANCE && psiFile != null) {      Language language=psiFile.getLanguage();      if (language != JavaLanguage.INSTANCE) {        return SyntaxHighlighterFactory.getSyntaxHighlighter(language,project,file);      }    }    if (psiFile instanceof ClsFileImpl) {      LanguageLevel sourceLevel=((ClsFileImpl)psiFile).getLanguageLevel();      return new JavaFileHighlighter(sourceLevel);    }  }  return new JavaFileHighlighter();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void onPublicKeysGroupAdded(int uid,ApiEncryptionKeyGroup keyGroup){  UserKeys userKeys=getCachedUserKeys(uid);  if (userKeys == null) {    return;  }  UserKeysGroup validatedKeysGroup=validateUserKeysGroup(uid,keyGroup);  if (validatedKeysGroup != null) {    UserKeys updatedUserKeys=userKeys.addUserKeyGroup(validatedKeysGroup);    cacheUserKeys(updatedUserKeys);    context().getEncryption().getEncryptedChatManager(uid).send(new EncryptedPeerActor.KeyGroupUpdated(userKeys));  }}  }
class C{  public boolean hasTag(){  return hasParameter(ParameterNames.TAG);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  public T lang(String value){  return attr("lang",value);}  }
class C{  public String forceGetValueAsString(){  if (mValue == null) {    return "";  } else   if (mValue instanceof byte[]) {    if (mDataType == TYPE_ASCII) {      return new String((byte[])mValue,US_ASCII);    } else {      return Arrays.toString((byte[])mValue);    }  } else   if (mValue instanceof long[]) {    if (((long[])mValue).length == 1) {      return String.valueOf(((long[])mValue)[0]);    } else {      return Arrays.toString((long[])mValue);    }  } else   if (mValue instanceof Object[]) {    if (((Object[])mValue).length == 1) {      Object val=((Object[])mValue)[0];      if (val == null) {        return "";      } else {        return val.toString();      }    } else {      return Arrays.toString((Object[])mValue);    }  } else {    return mValue.toString();  }}  }
class C{  public BloomFilter(double c,int n,int k){  this.expectedNumberOfFilterElements=n;  this.k=k;  this.bitsPerElement=c;  this.bitSetSize=(int)Math.ceil(c * n);  numberOfAddedElements=0;  this.bitset=new BitSet(bitSetSize);}  }
class C{  @Override protected void createItemsLayout(){  if (mItemsLayout == null) {    mItemsLayout=new LinearLayout(getContext());    mItemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  @Override public boolean hasValueDeserializerFor(DeserializationConfig config,JavaType type){  JsonDeserializer<Object> deser=_findCachedDeserializer(type);  if (deser == null) {    try {      deser=_createAndCacheValueDeserializer(config,type,null);    } catch (    Exception e) {      return false;    }  }  return (deser != null);}  }
class C{  public void buildTreeStructureToSave(FacesContext context,UIComponent component,TreeStructure treeStructure,Set componentIds){  if (null == componentIds) {    componentIds=new HashSet();  }  Iterator kids=component.getChildren().iterator();  String id;  while (kids.hasNext()) {    UIComponent kid=(UIComponent)kids.next();    id=kid.getClientId(context);    if (id != null && !componentIds.add(id)) {      throw new IllegalStateException(MessageUtils.getExceptionMessageString(MessageUtils.DUPLICATE_COMPONENT_ID_ERROR_ID,new Object[]{id}));    }    if (!kid.isTransient()) {      TreeStructure treeStructureChild=new TreeStructure(kid);      treeStructure.addChild(treeStructureChild);      buildTreeStructureToSave(context,kid,treeStructureChild,componentIds);    }  }  Iterator facets=component.getFacets().keySet().iterator();  while (facets.hasNext()) {    String facetName=(String)facets.next();    UIComponent facetComponent=(UIComponent)component.getFacets().get(facetName);    id=facetComponent.getClientId(context);    if (id != null && !componentIds.add(id)) {      throw new IllegalStateException(MessageUtils.getExceptionMessageString(MessageUtils.DUPLICATE_COMPONENT_ID_ERROR_ID,new Object[]{id}));    }    if (!(facetComponent.isTransient())) {      TreeStructure treeStructureFacet=new TreeStructure(facetComponent);      treeStructure.addFacet(facetName,treeStructureFacet);      buildTreeStructureToSave(context,facetComponent,treeStructureFacet,componentIds);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected Tasks<T> doDeactivateWithTasks(URI id){  return postTasks(getDeactivateUrl(),id);}  }
class C{  private void performPredictionRecursivly(ExampleSet applySet,Node node,double[] confidences,int[] outcomes,int[] depths,int depth,int numberOfPartitions) throws OperatorException {  if (!node.isLeaf()) {    SplittedExampleSet splittedSet=new SplittedExampleSet(applySet,new Partition(outcomes,numberOfPartitions));    splittedSet.selectSingleSubset(node.getPartitionId());    ExampleSet currentResultSet=node.getModel().apply(splittedSet);    int resultIndex=0;    Attribute predictionAttribute=currentResultSet.getAttributes().getPredictedLabel();    for (    Example example : currentResultSet) {      int parentIndex=splittedSet.getActualParentIndex(resultIndex);      String label=example.getValueAsString(predictionAttribute);      confidences[parentIndex]*=example.getConfidence(label);      outcomes[parentIndex]=node.getChild(label).getPartitionId();      depths[parentIndex]=depth;      resultIndex++;    }    PredictionModel.removePredictedLabel(currentResultSet);    for (    Node child : node.getChildren()) {      performPredictionRecursivly(applySet,child,confidences,outcomes,depths,depth + 1,numberOfPartitions);    }  }}  }
class C{  public static String encodeBinaryFile(String filePath) throws IOException {  InputStream stream=null;  String base64encodedValue=null;  try {    stream=new FileInputStream(filePath);    byte[] bytes=new byte[stream.available()];    stream.read(bytes);    base64encodedValue=Base64.encode(bytes);  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    stream.close();  }  return base64encodedValue;}  }
class C{  void resourceMessage(Throwable ex){  out.println(getLocalizedString("msg.resource"));  ex.printStackTrace(out);}  }
class C{  @Override public boolean onJsPrompt(WebView view,String url,String message,String defaultValue,JsPromptResult result){  if (defaultValue != null && defaultValue.startsWith("gap")) {    if (defaultValue.startsWith("gap-iab://")) {      PluginResult scriptResult;      String scriptCallbackId=defaultValue.substring(10);      if (scriptCallbackId.startsWith("InAppBrowser")) {        if (message == null || message.length() == 0) {          scriptResult=new PluginResult(PluginResult.Status.OK,new JSONArray());        } else {          try {            scriptResult=new PluginResult(PluginResult.Status.OK,new JSONArray(message));          } catch (          JSONException e) {            scriptResult=new PluginResult(PluginResult.Status.JSON_EXCEPTION,e.getMessage());          }        }        this.webView.sendPluginResult(scriptResult,scriptCallbackId);        result.confirm("");        return true;      }    } else {      LOG.w(LOG_TAG,"InAppBrowser does not support Cordova API calls: " + url + " "+ defaultValue);      result.cancel();      return true;    }  }  return false;}  }
class C{  public void close(boolean keepAlive){  boolean foundClientPool=false;synchronized (poolLock) {    for (Iterator<Map.Entry<String,Pool>> itr=pools.entrySet().iterator(); itr.hasNext(); ) {      Map.Entry<String,Pool> entry=itr.next();      PoolImpl pool=(PoolImpl)entry.getValue();      pool.basicDestroy(keepAlive);      foundClientPool=true;    }    pools=Collections.emptyMap();    itrForEmergencyClose=null;    if (foundClientPool) {      ServerConnection.emptyCommBufferPool();    }  }}  }
class C{  private static ValueAnimator loadAnimator(Context context,AttributeSet attrs,ValueAnimator anim) throws NotFoundException {  TypedArray a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.Animator);  long duration=a.getInt(com.android.internal.R.styleable.Animator_duration,300);  long startDelay=a.getInt(com.android.internal.R.styleable.Animator_startOffset,0);  int valueType=a.getInt(com.android.internal.R.styleable.Animator_valueType,VALUE_TYPE_FLOAT);  if (anim == null) {    anim=new ValueAnimator();  }  TypeEvaluator evaluator=null;  int valueFromIndex=com.android.internal.R.styleable.Animator_valueFrom;  int valueToIndex=com.android.internal.R.styleable.Animator_valueTo;  boolean getFloats=(valueType == VALUE_TYPE_FLOAT);  TypedValue tvFrom=a.peekValue(valueFromIndex);  boolean hasFrom=(tvFrom != null);  int fromType=hasFrom ? tvFrom.type : 0;  TypedValue tvTo=a.peekValue(valueToIndex);  boolean hasTo=(tvTo != null);  int toType=hasTo ? tvTo.type : 0;  if ((hasFrom && (fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) || (hasTo && (toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT))) {    getFloats=false;    anim.setEvaluator(new ArgbEvaluator());  }  if (getFloats) {    float valueFrom;    float valueTo;    if (hasFrom) {      if (fromType == TypedValue.TYPE_DIMENSION) {        valueFrom=a.getDimension(valueFromIndex,0f);      } else {        valueFrom=a.getFloat(valueFromIndex,0f);      }      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=a.getDimension(valueToIndex,0f);        } else {          valueTo=a.getFloat(valueToIndex,0f);        }        anim.setFloatValues(valueFrom,valueTo);      } else {        anim.setFloatValues(valueFrom);      }    } else {      if (toType == TypedValue.TYPE_DIMENSION) {        valueTo=a.getDimension(valueToIndex,0f);      } else {        valueTo=a.getFloat(valueToIndex,0f);      }      anim.setFloatValues(valueTo);    }  } else {    int valueFrom;    int valueTo;    if (hasFrom) {      if (fromType == TypedValue.TYPE_DIMENSION) {        valueFrom=(int)a.getDimension(valueFromIndex,0f);      } else       if ((fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) {        valueFrom=a.getColor(valueFromIndex,0);      } else {        valueFrom=a.getInt(valueFromIndex,0);      }      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=(int)a.getDimension(valueToIndex,0f);        } else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {          valueTo=a.getColor(valueToIndex,0);        } else {          valueTo=a.getInt(valueToIndex,0);        }        anim.setIntValues(valueFrom,valueTo);      } else {        anim.setIntValues(valueFrom);      }    } else {      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=(int)a.getDimension(valueToIndex,0f);        } else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {          valueTo=a.getColor(valueToIndex,0);        } else {          valueTo=a.getInt(valueToIndex,0);        }        anim.setIntValues(valueTo);      }    }  }  anim.setDuration(duration);  anim.setStartDelay(startDelay);  if (a.hasValue(com.android.internal.R.styleable.Animator_repeatCount)) {    anim.setRepeatCount(a.getInt(com.android.internal.R.styleable.Animator_repeatCount,0));  }  if (a.hasValue(com.android.internal.R.styleable.Animator_repeatMode)) {    anim.setRepeatMode(a.getInt(com.android.internal.R.styleable.Animator_repeatMode,ValueAnimator.RESTART));  }  if (evaluator != null) {    anim.setEvaluator(evaluator);  }  final int resID=a.getResourceId(com.android.internal.R.styleable.Animator_interpolator,0);  if (resID > 0) {    anim.setInterpolator(AnimationUtils.loadInterpolator(context,resID));  }  a.recycle();  return anim;}  }
class C{  public boolean isDescending(){  return descending;}  }
class C{  public ObjectState(S id,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions){  super(id,deferred,entryActions,exitActions);}  }
class C{  public String requestWiktionary(String message,String botid,String server,String apikey,int limit,String hint,Network network) throws Exception {  try {    log("WIKTIONARY",Level.INFO,message);    Vertex word=network.createWord(message);    Vertex result=getBot().awareness().getSense(Wiktionary.class).define(word,word);    if (result != null) {      Vertex description=result.getRelationship(Primitive.SENTENCE);      if (description != null) {        return description.printString();      }    }  } catch (  Exception exception) {    log(exception);  }  return null;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceWhen_();}  }
class C{  public boolean hasGlobalBlock(RestStatus status){  for (  ClusterBlock clusterBlock : global) {    if (clusterBlock.status().equals(status)) {      return true;    }  }  return false;}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  private void trimFormat(String tail){  if (uriFormat.endsWith(tail)) {    uriFormat=uriFormat.substring(0,uriFormat.lastIndexOf(tail));  } else {    System.err.println(uriFormat + " has no " + tail);  }}  }
class C{  public IElementType captureString(){  CharSequence buffer=getBuffer();  int currentPosition=getTokenEnd();  setTokenStart(currentPosition);  int bufferEnd=getBufferEnd();  char openQuote=buffer.charAt(currentPosition);  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);  boolean quotesDiffer=openQuote != closeQuote;  boolean isEscaped=false;  int quotesDepth=0;  currentPosition++;  while (currentPosition < bufferEnd) {    char currentChar=buffer.charAt(currentPosition);    if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) {      break;    }    if (!isEscaped && quotesDiffer) {      if (currentChar == openQuote) {        quotesDepth++;      } else       if (currentChar == closeQuote) {        quotesDepth--;      }    }    isEscaped=!isEscaped && currentChar == '\\';    currentPosition++;  }  if (currentPosition < bufferEnd) {    currentPosition++;  }  setTokenEnd(currentPosition);  PerlStringLexer stringLexer=getStringLexer();  popState();  preparsedTokensList.addAll(lexCurrentToken(stringLexer));  return getPreParsedToken();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  DocumentType doc1Type;  NamedNodeMap entityList;  Entity entity2;  Entity entity1;  Document ownerDocument;  DocumentType docType;  String system;  String entityName;  String publicVal;  String notationName;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  docType=aNewDoc.getDoctype();  entityList=docType.getEntities();  assertNotNull("entitiesNotNull",entityList);  entity2=(Entity)entityList.getNamedItem("ent6");  entity1=(Entity)doc.importNode(entity2,false);  ownerDocument=entity1.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("dtdSystemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  entityName=entity1.getNodeName();  assertEquals("entityName","ent6",entityName);  publicVal=entity1.getPublicId();  assertEquals("entityPublicId","uri",publicVal);  system=entity1.getSystemId();  assertURIEquals("entitySystemId",null,null,null,"file",null,null,null,null,system);  notationName=entity1.getNotationName();  assertEquals("notationName","notation2",notationName);}  }
class C{  private void autoSize(){  log.config("");  final int SLACK=8;  final int MAXSIZE=300;  TableColumnModel tcm=getColumnModel();  for (int col=0; col < tcm.getColumnCount(); col++) {    TableColumn tc=tcm.getColumn(col);    int width=0;    TableCellRenderer renderer=tc.getHeaderRenderer();    if (renderer == null)     renderer=new DefaultTableCellRenderer();    Component comp=renderer.getTableCellRendererComponent(this,tc.getHeaderValue(),false,false,0,0);    width=comp.getPreferredSize().width + SLACK;    int maxRow=Math.min(30,getRowCount());    for (int row=0; row < maxRow; row++) {      renderer=getCellRenderer(row,col);      comp=renderer.getTableCellRendererComponent(this,getValueAt(row,col),false,false,row,col);      int rowWidth=comp.getPreferredSize().width + SLACK;      width=Math.max(width,rowWidth);    }    width=Math.min(MAXSIZE,width);    tc.setPreferredWidth(width);  }}  }
class C{  private boolean checkCMSKeyChecksum(byte[] key,byte[] checksum){  return Arrays.constantTimeAreEqual(calculateCMSKeyChecksum(key),checksum);}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  protected double alpha(FrequencyCounter<S> Ns,S s){  return alpha;}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  public static String _getPropertyDescription(String prop){  if (prop.equals(AUTO_CONNECT_NAME)) {    return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_AUTOMATICALLY_CONNECT_TO_THE_DISTRIBUTED_SYSTEM.toLocalizedString();  } else   if (prop.equals(HTTP_ENABLED_NAME)) {    return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_START_THE_HTTP_JMX_ADAPTER.toLocalizedString();  } else   if (prop.equals(HTTP_BIND_ADDRESS_NAME)) {    return LocalizedStrings.AgentConfigImpl_BIND_ADDRESS_OF_HTTP_ADAPTERS_SOCKETS.toLocalizedString();  } else   if (prop.equals(HTTP_PORT_NAME)) {    return LocalizedStrings.AgentConfigImpl_THE_PORT_ON_WHICH_THE_HTTP_ADAPTER_WILL_BE_STARTED.toLocalizedString();  } else   if (prop.equals(RMI_ENABLED_NAME)) {    return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_START_THE_RMI_JMX_ADAPTER.toLocalizedString();  } else   if (prop.equals(RMI_REGISTRY_ENABLED_NAME)) {    return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_HOST_AN_RMI_REGISTRY.toLocalizedString();  } else   if (prop.equals(RMI_BIND_ADDRESS_NAME)) {    return LocalizedStrings.AgentConfigImpl_BIND_ADDRESS_OF_RMI_ADAPTERS_SOCKETS.toLocalizedString();  } else   if (prop.equals(RMI_PORT_NAME)) {    return LocalizedStrings.AgentConfigImpl_THE_PORT_ON_WHICH_TO_CONTACT_THE_RMI_REGISTER.toLocalizedString();  } else   if (prop.equals(RMI_SERVER_PORT_NAME)) {    return LocalizedStrings.AgentConfigImpl_THE_PORT_USED_TO_CONFIGURE_RMI_CONNECTOR_SERVER.toLocalizedString();  } else   if (prop.equals(SNMP_ENABLED_NAME)) {    return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_START_THE_SNMP_JMX_ADAPTER.toLocalizedString();  } else   if (prop.equals(SNMP_BIND_ADDRESS_NAME)) {    return LocalizedStrings.AgentConfigImpl_BIND_ADDRESS_OF_SNMP_ADAPTERS_SOCKETS.toLocalizedString();  } else   if (prop.equals(SNMP_DIRECTORY_NAME)) {    return LocalizedStrings.AgentConfigImpl_THE_DIRECTORY_IN_WHICH_SNMP_CONFIGURATION_RESIDES.toLocalizedString();  } else   if (prop.equals(AGENT_SSL_ENABLED_NAME)) {    return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_COMMUNICATE_USING_SSL.toLocalizedString();  } else   if (prop.equals(AGENT_SSL_PROTOCOLS_NAME)) {    return LocalizedStrings.AgentConfigImpl_THE_SSL_PROTOCOLS_USED_BY_THE_AGENT.toLocalizedString();  } else   if (prop.equals(AGENT_SSL_CIPHERS_NAME)) {    return LocalizedStrings.AgentConfigImpl_THE_SSL_CIPHERS_USED_BY_THE_AGENT.toLocalizedString();  } else   if (prop.equals(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME)) {    return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_REQUIRE_SSL_AUTHENTICATION.toLocalizedString();  } else   if (prop.equals(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME)) {    return LocalizedStrings.AgentConfigImpl_WILL_THE_HTTP_ADAPTER_REQUIRE_SSL_AUTHENTICATION.toLocalizedString();  } else   if (prop.equals(HTTP_AUTHENTICATION_ENABLED_NAME)) {    return LocalizedStrings.AgentConfigImpl_WILL_THE_HTTP_JMX_ADAPTER_USE_HTTP_AUTHENTICATION.toLocalizedString();  } else   if (prop.equals(HTTP_AUTHENTICATION_USER_NAME)) {    return LocalizedStrings.AgentConfigImpl_THE_USER_NAME_FOR_AUTHENTICATION_IN_THE_HTTP_JMX_ADAPTER.toLocalizedString();  } else   if (prop.equals(HTTP_AUTHENTICATION_PASSWORD_NAME)) {    return LocalizedStrings.AgentConfigImpl_THE_PASSWORD_FOR_AUTHENTICATION_IN_THE_HTTP_JMX_ADAPTER.toLocalizedString();  } else   if (prop.equals(PROPERTY_FILE_NAME)) {    return LocalizedStrings.AgentConfigImpl_PROPERTY_FILE_FROM_WHICH_AGENT_READS_CONFIGURATION.toLocalizedString();  } else   if (prop.equals(LOCATOR_HOST_NAME)) {    return LocalizedStrings.AgentConfigImpl_HOST_ON_WHICH_THE_DISTRIBUTED_SYSTEMS_LOCATOR_RUNS.toLocalizedString();  } else   if (prop.equals(LOCATOR_PORT_NAME)) {    return LocalizedStrings.AgentConfigImpl_HOST_ON_WHICH_THE_DISTRIBUTED_SYSTEMS_LOCATOR_RUNS.toLocalizedString();  } else   if (prop.equals(LOCATOR_PRODUCT_DIRECTORY_NAME)) {    return LocalizedStrings.AgentConfigImpl_GEMFIRE_PRODUCT_DIRECTORY_USED_TO_LAUNCH_A_LOCATOR.toLocalizedString();  } else   if (prop.equals(LOCATOR_WORKING_DIRECTORY_NAME)) {    return LocalizedStrings.AgentConfigImpl_DIRECTORY_IN_WHICH_A_LOCATOR_WILL_BE_LAUNCHED.toLocalizedString();  } else   if (prop.equals(LOCATOR_REMOTE_COMMAND)) {    return LocalizedStrings.AgentConfigImpl_COMMAND_PREFIX_USED_WHEN_LAUNCHING_A_LOCATOR.toLocalizedString();  } else   if (prop.equals(LOCATOR_BIND_ADDRESS)) {    return LocalizedStrings.AgentConfigImpl_IP_ADDRESS_TO_USE_WHEN_CONTACTING_LOCATOR.toLocalizedString();  } else   if (prop.equals(LOCATOR_DS_PROPERTIES)) {    return LocalizedStrings.AgentConfigImpl_PROPERTIES_FOR_CONFIGURING_A_LOCATORS_DISTRIBUTED_SYSTEM.toLocalizedString();  } else   if (prop.equals(EMAIL_NOTIFICATIONS_ENABLED_NAME)) {    return LocalizedStrings.AgentConfigImpl_IDENTIFY_IF_EMAIL_NOTIFICATIONS_ARE_ENABLED_OR_NOT.toLocalizedString();  } else   if (prop.equals(EMAIL_NOTIFICATIONS_FROM_NAME)) {    return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_EMAIL_ADDRESS_USING_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT.toLocalizedString();  } else   if (prop.equals(EMAIL_NOTIFICATIONS_HOST_NAME)) {    return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_EMAIL_SERVER_HOST_USING_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT.toLocalizedString();  } else   if (prop.equals(EMAIL_NOTIFICATIONS_TO_LIST_NAME)) {    return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_COMMA_SEPARATED_EMAIL_ADDRESSES_LIST_TO_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT.toLocalizedString();  } else   if (prop.equals(STATE_SAVE_FILE_NAME)) {    return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_NAME_OF_THE_FILE_TO_BE_USED_FOR_SAVING_AGENT_STATE.toLocalizedString();  } else {    return null;  }}  }
class C{  protected void sequence_LeftHandSideExpression_MemberExpression(ISerializationContext context,TaggedTemplateString semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public synchronized void reset() throws IOException {  super.reset();  if (cacheRequest != null) {    marked=false;    inCache+=markCount;  }}  }
class C{  public BytesReference internalSourceRef(){  return source;}  }
class C{  public ObjIdMap(ObjIdMap oldMap,int addKey,Object addValue){  this.loadFactor=oldMap.loadFactor;  rehash(oldMap.table,oldMap.count,oldMap.count + 2);  put(addKey,addValue);}  }
class C{  public NotificationChain basicSetKeyType(PropertyType newKeyType,NotificationChain msgs){  PropertyType oldKeyType=keyType;  keyType=newKeyType;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,DatatypePackage.DICTIONARY_PROPERTY_TYPE__KEY_TYPE,oldKeyType,newKeyType);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public String toString(){  return super.toString() + "[charsetName=" + CHARSET+ "]";}  }
class C{  public DefaultAmountCalculationStrategy(final TaxProvider taxProvider,final DeliveryCostCalculationStrategy deliveryCostCalculationStrategy,final PromotionContextFactory promotionContextFactory,final CustomerService customerService,final ShopService shopService){  this.taxProvider=taxProvider;  this.deliveryCostCalculationStrategy=deliveryCostCalculationStrategy;  this.promotionContextFactory=promotionContextFactory;  this.customerService=customerService;  this.shopService=shopService;}  }
class C{  private static EmitterSet buildSetForOpcode(Method[] emitters,String opcode){  EmitterSet s=new EmitterSet();  for (int i=0; i < emitters.length; i++) {    Method m=emitters[i];    if (m.getName().startsWith("emit" + opcode + "_") || m.getName().equals("emit" + opcode)) {      s.add(new EmitterDescriptor(m.getName(),m.getParameterTypes()));    }  }  return s;}  }
class C{  public void attachMirror(String locality,String sourceVirtualVolumeName,String mirrorDeviceName) throws VPlexApiException {  _virtualVolumeMgr.attachMirror(locality,sourceVirtualVolumeName,mirrorDeviceName);}  }
class C{  private void createHuffmanDecodingTables(final int alphaSize,final int nGroups){  final Data dataShadow=this.mData;  final char[][] len=dataShadow.mTemp_charArray2d;  final int[] minLens=dataShadow.mMinLens;  final int[][] limit=dataShadow.mLimit;  final int[][] base=dataShadow.mBase;  final int[][] perm=dataShadow.mPerm;  for (int t=0; t < nGroups; t++) {    int minLen=32;    int maxLen=0;    final char[] lenT=len[t];    for (int i=alphaSize; --i >= 0; ) {      final char lent=lenT[i];      if (lent > maxLen) {        maxLen=lent;      }      if (lent < minLen) {        minLen=lent;      }    }    hbCreateDecodeTables(limit[t],base[t],perm[t],len[t],minLen,maxLen,alphaSize);    minLens[t]=minLen;  }}  }
class C{  public void processMappingAccessors(){  for (  MappingAccessor accessor : m_mappingAccessors.values()) {    if (!accessor.isProcessed()) {      if (accessor.isMappedKeyMapAccessor()) {        MappedKeyMapAccessor mapAccessor=(MappedKeyMapAccessor)accessor;        EmbeddableAccessor mapKeyEmbeddableAccessor=getProject().getEmbeddableAccessor(mapAccessor.getMapKeyClass());        if (mapKeyEmbeddableAccessor != null && !mapKeyEmbeddableAccessor.isProcessed()) {          mapKeyEmbeddableAccessor.process();        }      }      if (accessor.isDirectEmbeddableCollection() || accessor.isEmbedded()) {        EmbeddableAccessor embeddableAccessor=getProject().getEmbeddableAccessor(accessor.getReferenceClass());        if (embeddableAccessor == null) {          throw ValidationException.invalidEmbeddedAttribute(getJavaClass(),accessor.getAttributeName(),accessor.getReferenceClass());        } else {          if (!embeddableAccessor.isProcessed()) {            embeddableAccessor.process();          }          addEmbeddableDescriptor(embeddableAccessor.getDescriptor());          if (accessor.isEmbeddedId() || accessor.isDerivedIdClass()) {            accessor.process();          } else {            getProject().addEmbeddableMappingAccessor(accessor);          }        }      } else       if (accessor.isDirectCollection()) {        getProject().addDirectCollectionAccessor(accessor);      } else       if (accessor.isRelationship()) {        if (accessor.derivesId()) {          m_derivedIdAccessors.add((ObjectAccessor)accessor);          getProject().addAccessorWithDerivedId(m_classAccessor);        } else {          addRelationshipAccessor((RelationshipAccessor)accessor);        }      } else {        accessor.process();      }    }  }}  }
class C{  private void drawShadows(Canvas canvas){  int height=(int)(3 * getItemHeight());  topShadow.setBounds(0,0,getWidth(),height);  topShadow.draw(canvas);  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());  bottomShadow.draw(canvas);}  }
class C{  public void deleteWithMissing(Attribute att){  deleteWithMissing(att.index());}  }
class C{  private static boolean overflowInParse(long current,int digit){  return overflowInParse(current,digit,10);}  }
class C{  private boolean scrollAndFocusVertically(int direction,int top,int bottom){  boolean handled=true;  int height=getHeight();  int containerTop=getScrollY();  int containerBottom=containerTop + height;  boolean up=direction == View.FOCUS_UP;  View newFocused=findFocusableViewInBoundsVertically(up,top,bottom);  if (newFocused == null) {    newFocused=this;  }  if (top >= containerTop && bottom <= containerBottom) {    handled=false;  } else {    int delta=up ? (top - containerTop) : (bottom - containerBottom);    doScrollY(delta);  }  if (newFocused != findFocus())   newFocused.requestFocus(direction);  return handled;}  }
class C{  private void showStatusAdapter(final StatusAdapter statusAdapter){  if (!PlatformUI.isWorkbenchRunning()) {    ToolkitPlugin.getDefault().getLog().log(statusAdapter.getStatus());    return;  }  statusQueue.add(statusAdapter);  if (currentDialog == null) {    currentDialog=showErrorDialogFor(statusAdapter);  }  if (((Boolean)statusAdapter.getProperty(BLOCK)).booleanValue()) {    Display display=Display.getCurrent();    if (display != null && !display.isDisposed()) {      while (statusQueue.contains(statusAdapter) && !display.isDisposed()) {        if (!display.readAndDispatch()) {          display.sleep();        }      }    }  }}  }
class C{  public void ensureContains(FilterField field){  for (  FilterField f : getFilterLines()) {    if (f.getId().equals(field.getId())) {      return;    }  }  addFilterField(field);}  }
class C{  public boolean isClosed(){  return mc == null;}  }
class C{  public Builder addGroup(final UnknownFieldSet value){  if (result.group == null) {    result.group=new ArrayList<UnknownFieldSet>();  }  result.group.add(value);  return this;}  }
class C{  public boolean isExportedAsDefault(){  return (this.isExported() && ((ExportDeclaration)this.eContainer()).isDefaultExport());}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  Stylesheet thisSheet=handler.getStylesheet();  WhitespaceInfoPaths paths=new WhitespaceInfoPaths(thisSheet);  setPropertiesFromAttributes(handler,rawName,attributes,paths);  Vector xpaths=paths.getElements();  for (int i=0; i < xpaths.size(); i++) {    WhiteSpaceInfo wsi=new WhiteSpaceInfo((XPath)xpaths.elementAt(i),true,thisSheet);    wsi.setUid(handler.nextUid());    thisSheet.setStripSpaces(wsi);  }  paths.clearElements();}  }
class C{  public int format(float val,byte[] array){  return format(val,array,0,array.length);}  }
class C{  public boolean isAtSourceHost(){  return atSourceHost;}  }
class C{  public Bundler putParcelableArrayList(String key,ArrayList<? extends Parcelable> value){  bundle.putParcelableArrayList(key,value);  return this;}  }
class C{  public String amount(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive())   return "";  BigDecimal ExpenseAmt=(BigDecimal)mTab.getValue("ExpenseAmt");  Integer C_Currency_From_ID=(Integer)mTab.getValue("C_Currency_ID");  int C_Currency_To_ID=Env.getContextAsInt(ctx,"$C_Currency_ID");  Timestamp DateExpense=Env.getContextAsDate(ctx,WindowNo,"DateExpense");  log.fine("Amt=" + ExpenseAmt + ", C_Currency_ID="+ C_Currency_From_ID);  BigDecimal ConvertedAmt=ExpenseAmt;  if (ConvertedAmt.compareTo(Env.ZERO) != 0 && C_Currency_To_ID != C_Currency_From_ID.intValue()) {    int AD_Client_ID=Env.getContextAsInt(ctx,WindowNo,"AD_Client_ID");    int AD_Org_ID=Env.getContextAsInt(ctx,WindowNo,"AD_Org_ID");    ConvertedAmt=MConversionRate.convert(ctx,ConvertedAmt,C_Currency_From_ID.intValue(),C_Currency_To_ID,DateExpense,0,AD_Client_ID,AD_Org_ID);  }  mTab.setValue("ConvertedAmt",ConvertedAmt);  log.fine("= ConvertedAmt=" + ConvertedAmt);  return "";}  }
class C{  private static int readFully(InputStream in,byte[] buffer,int max) throws IOException {  int result=0, len=Math.min(max,buffer.length);  while (len > 0) {    int l=in.read(buffer,result,len);    if (l < 0) {      break;    }    result+=l;    len-=l;  }  return result;}  }
class C{  public static String createCodeVerifier(){  char[] chars="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890".toCharArray();  StringBuilder sb=new StringBuilder();  Random random=new Random();  for (int i=0; i < 128; i++) {    char c=chars[random.nextInt(chars.length)];    sb.append(c);  }  String verifier=sb.toString();  return verifier;}  }
class C{  protected boolean beforeDelete(){  log.saveError("Error",Msg.getMsg(getCtx(),"CannotDelete"));  return false;}  }
class C{  protected void makeShadowShape(){  Renderable shadowShape=this.doMakeShadowShape();  if (shadowShape == null)   return;  if (this.getShape() instanceof Airspace)   ((Airspace)this.getShape()).setAlwaysOnTop(true);  this.originalAttributes=((Attributable)this.getShape()).getAttributes();  this.originalHighlightAttributes=((Attributable)this.getShape()).getHighlightAttributes();  ShapeAttributes editingAttributes=new BasicShapeAttributes(this.originalAttributes);  if (editingAttributes.getInteriorOpacity() == 1)   editingAttributes.setInteriorOpacity(0.7);  ((Attributable)this.getShape()).setAttributes(editingAttributes);  ((Attributable)this.getShape()).setHighlightAttributes(editingAttributes);  this.getShadowLayer().addRenderable(shadowShape);  if (this.getShape() instanceof Airspace) {    double[] altitudes=((Airspace)shadowShape).getAltitudes();    ((Airspace)shadowShape).setAltitudes(altitudes[0],0.95 * altitudes[1]);  }}  }
class C{  @TruffleBoundary private static int toPos(int[] a,int[] dim){  int pos=a[0];  for (int i=1; i < a.length; i++) {    int dimSizeBefore=1;    for (int j=i - 1; j >= 0; j--) {      dimSizeBefore*=dim[j];    }    pos+=a[i] * dimSizeBefore;  }  return pos;}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length <= 0) {    System.out.println("Usage: patdroid path/to/apk");    return;  }  SmaliClassDetailLoader.getFrameworkClassLoader(19).loadAll();  ZipFile apkFile=new ZipFile(new File(args[0]));  new SmaliClassDetailLoader(apkFile,true).loadAll();  for (  ClassInfo c : ClassInfo.getAllClasses()) {    if (!c.isFrameworkClass()) {      System.out.println(c.fullName);      for (      MethodInfo m : c.getAllMethods()) {        System.out.println("\t" + m.name);      }    }  }}  }
class C{  private void updateView(){  Map<String,List<String>> attributes=dataObject.getProject().getAttributes();  final String artifactId=getAttribute(ARTIFACT_ID);  if (!artifactId.isEmpty()) {    view.setArtifactId(artifactId);  }  if (attributes.get(GROUP_ID) != null) {    view.setGroupId(getAttribute(GROUP_ID));  } else {    view.setGroupId(getAttribute(PARENT_GROUP_ID));  }  if (attributes.get(VERSION) != null) {    view.setVersion(getAttribute(VERSION));  } else {    view.setVersion(getAttribute(PARENT_VERSION));  }  final String packaging=getAttribute(PACKAGING);  if (!packaging.isEmpty()) {    view.setPackaging(packaging);  }}  }
class C{  public ResourceFixture(String name,String type,String className,String parameters){  super();  this.name=name;  this.type=type;  this.className=className;  this.parameters=parameters;}  }
class C{  public CSVParserBuilder withFieldAsNull(final CSVReaderNullFieldIndicator fieldIndicator){  this.nullFieldIndicator=fieldIndicator;  return this;}  }
class C{  public SettingNotFoundException(){}  }
class C{  @Override public void addTreeModelListener(TreeModelListener l){  listenerList.add(TreeModelListener.class,l);}  }
class C{  public Object execute(Object o) throws IllegalAccessException, InvocationTargetException {  if (method == null)   return null;  return method.invoke(o,args);}  }
class C{  public boolean isEmpty(){  return head == tail;}  }
class C{  public void downloadImageToStorage(String storageFile,final SuccessCallback<Image> onSuccess,FailureCallback<Image> onFail,boolean useCache){  setDestinationStorage(storageFile);  downloadImage(onSuccess,onFail,useCache);}  }
class C{  public XObject eval(Node contextNode,String str,Node namespaceNode) throws TransformerException {  PrefixResolverDefault prefixResolver=new PrefixResolverDefault((namespaceNode.getNodeType() == Node.DOCUMENT_NODE) ? ((Document)namespaceNode).getDocumentElement() : namespaceNode);  XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);  int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);  return xpath.execute(xpathSupport,ctxtNode,prefixResolver);}  }
class C{  public void addIfNotPresent(Annotation ann){  if (_annotations == null || !_annotations.containsKey(ann.annotationType())) {    _add(ann);  }}  }
class C{  protected void startup(final Exception whatToThrow) throws Exception {  mockConfiguration(2);  mockStore();  EasyMock.expect(store.getTransactionManager()).andThrow(whatToThrow);  replay();  storage.startup(store,configuration);}  }
class C{  private void computeImplicitForwardDependencesUse(Register r,DepGraphNode destNode){  DepGraphNode sourceNode=getDepGraphNode(r);  if (sourceNode != null) {    for (Enumeration<Register> e=GenericPhysicalDefUse.enumerate(GenericPhysicalDefUse.getMaskTSPDefs(),ir); e.hasMoreElements(); ) {      Register r2=e.nextElement();      if (r == r2) {        sourceNode.insertOutEdge(destNode,REG_MAY_DEF);        return;      }    }    sourceNode.insertOutEdge(destNode,REG_TRUE);  }}  }
class C{  public void add(final T value,final int index){  checkWidget();  checkNullElement();  if (value == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  checkRange(index);  this.elements.add(index,value);  refresh();}  }
class C{  public BindException(String detailMessage){  super(detailMessage);}  }
class C{  public void createReversalVoucher(final ReceiptVoucher receiptVoucher,final String instrumentType){  final List<HashMap<String,Object>> reversalVoucherInfoList=new ArrayList<HashMap<String,Object>>(0);  final HashMap<String,Object> reversalVoucherInfo=new HashMap<String,Object>(0);  if (receiptVoucher.getVoucherheader() != null) {    reversalVoucherInfo.put(CollectionConstants.FINANCIALS_VOUCHERREVERSAL_ORIGINALVOUCHERID,receiptVoucher.getVoucherheader().getId());    reversalVoucherInfo.put(CollectionConstants.FINANCIALS_VOUCHERREVERSAL_DATE,new Date());    if (receiptVoucher.getVoucherheader().getType().equals(CollectionConstants.FINANCIAL_JOURNALVOUCHER_VOUCHERTYPE)) {      reversalVoucherInfo.put(CollectionConstants.FINANCIALS_VOUCHERREVERSAL_TYPE,CollectionConstants.FINANCIAL_JOURNALVOUCHER_VOUCHERTYPE);      reversalVoucherInfo.put(CollectionConstants.FINANCIALS_VOUCHERREVERSAL_NAME,CollectionConstants.FINANCIAL_JOURNALVOUCHER_VOUCHERNAME);    } else     if (receiptVoucher.getVoucherheader().getType().equals(CollectionConstants.FINANCIAL_RECEIPTS_VOUCHERTYPE)) {      reversalVoucherInfo.put(CollectionConstants.FINANCIALS_VOUCHERREVERSAL_TYPE,CollectionConstants.FINANCIAL_PAYMENTVOUCHER_VOUCHERTYPE);      reversalVoucherInfo.put(CollectionConstants.FINANCIALS_VOUCHERREVERSAL_NAME,CollectionConstants.FINANCIAL_PAYMENTVOUCHER_VOUCHERNAME);    }  }  reversalVoucherInfoList.add(reversalVoucherInfo);  try {    financialsUtil.getReversalVoucher(reversalVoucherInfoList);  } catch (  final Exception exp) {    final String errorMsg="Receipt Service Exception while creating reversal voucher!";    LOGGER.error(errorMsg,exp);    throw new ApplicationRuntimeException(errorMsg,exp);  }}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  protected <Type>void addIfNotNull(final Array<Type> array,final Type object){  if (object != null) {    array.add(object);  }}  }
class C{  private void utah(int row,int col,int pos){  module(row - 2,col - 2,pos,1);  module(row - 2,col - 1,pos,2);  module(row - 1,col - 2,pos,3);  module(row - 1,col - 1,pos,4);  module(row - 1,col,pos,5);  module(row,col - 2,pos,6);  module(row,col - 1,pos,7);  module(row,col,pos,8);}  }
class C{  public static Text createText(Composite parent,int style,int hspan,int width,int height,int fill){  Text t=new Text(parent,style);  t.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  gd.widthHint=width;  gd.heightHint=height;  t.setLayoutData(gd);  return t;}  }
class C{  private static boolean[] createSafeOctets(String safeChars){  int maxChar=-1;  char[] safeCharArray=safeChars.toCharArray();  for (  char c : safeCharArray) {    maxChar=Math.max(c,maxChar);  }  boolean[] octets=new boolean[maxChar + 1];  for (  char c : safeCharArray) {    octets[c]=true;  }  return octets;}  }
class C{  public FixedMillisecond(long millisecond){  this.time=millisecond;}  }
class C{  protected double max_set(Stack<DistanceNode> v){  double max=0.0;  for (int i=0; i < v.length; i++) {    DistanceNode n=v.element(i);    if (max < n.dist.element(n.dist.length - 1).floatValue()) {      max=n.dist.element(n.dist.length - 1).floatValue();    }  }  return max;}  }
class C{  public static IType findAnonymous(IType parentType,String name){  for (int i=0; i < name.length(); i++) {    if (!Character.isDigit(name.charAt(i))) {      return null;    }  }  int anonIndex=Integer.parseInt(name) - 1;  if (anonIndex < 0) {    return null;  }  List<IType> list=new ArrayList<IType>();  boolean allowNested=!is50OrHigher(parentType);  IParent declaringType;  if (allowNested) {    declaringType=(IType)getLastAncestor(parentType,IJavaElement.TYPE);  } else {    declaringType=parentType.getDeclaringType();  }  if (declaringType == null) {    declaringType=parentType;  }  try {    collectAllAnonymous(list,declaringType,allowNested);  } catch (  JavaModelException e) {    FindbugsPlugin.getDefault().logException(e,"collectAllAnonymous() failed");  }  if (list.size() <= anonIndex) {    return null;  }  sortAnonymous(list,parentType);  return list.get(anonIndex);}  }
class C{  public boolean isBeforeFirst() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    return this.rowData.isBeforeFirst();  }}  }
class C{  final Node<K,V>[] resize(){  Node<K,V>[] oldTab=table;  int oldCap=(oldTab == null) ? 0 : oldTab.length;  int oldThr=threshold;  int newCap, newThr=0;  if (oldCap > 0) {    if (oldCap >= MAXIMUM_CAPACITY) {      threshold=Integer.MAX_VALUE;      return oldTab;    } else     if ((newCap=oldCap << 1) < MAXIMUM_CAPACITY && oldCap >= DEFAULT_INITIAL_CAPACITY)     newThr=oldThr << 1;  } else   if (oldThr > 0)   newCap=oldThr; else {    newCap=DEFAULT_INITIAL_CAPACITY;    newThr=(int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);  }  if (newThr == 0) {    float ft=(float)newCap * loadFactor;    newThr=(newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE);  }  threshold=newThr;  @SuppressWarnings({"rawtypes","unchecked"}) Node<K,V>[] newTab=(Node<K,V>[])new Node[newCap];  table=newTab;  if (oldTab != null) {    for (int j=0; j < oldCap; ++j) {      Node<K,V> e;      if ((e=oldTab[j]) != null) {        oldTab[j]=null;        if (e.next == null)         newTab[e.hash & (newCap - 1)]=e; else         if (e instanceof TreeNode)         ((TreeNode<K,V>)e).split(this,newTab,j,oldCap); else {          Node<K,V> loHead=null, loTail=null;          Node<K,V> hiHead=null, hiTail=null;          Node<K,V> next;          do {            next=e.next;            if ((e.hash & oldCap) == 0) {              if (loTail == null)               loHead=e; else               loTail.next=e;              loTail=e;            } else {              if (hiTail == null)               hiHead=e; else               hiTail.next=e;              hiTail=e;            }          } while ((e=next) != null);          if (loTail != null) {            loTail.next=null;            newTab[j]=loHead;          }          if (hiTail != null) {            hiTail.next=null;            newTab[j + oldCap]=hiHead;          }        }      }    }  }  return newTab;}  }
class C{  public double readDouble() throws EOFException, FormatException {  return Double.longBitsToDouble(readLong());}  }
class C{  public static Long toLong(String str) throws PageException {  return Long.valueOf(toLongValue(str));}  }
class C{  public CharacterRunAutomaton(Automaton a){  this(a,Operations.DEFAULT_MAX_DETERMINIZED_STATES);}  }
class C{  final public SyntaxTreeNode LetIn() throws ParseException {  SyntaxTreeNode zn[]=new SyntaxTreeNode[4];  SyntaxTreeNode tn;  Token t;  bpa("Case Other Arm");  t=jj_consume_token(LET);  zn[0]=new SyntaxTreeNode(mn,t);  zn[1]=LetDefinitions();  t=jj_consume_token(LETIN);  zn[2]=new SyntaxTreeNode(mn,t);  zn[3]=Expression();  epa();{    if (true)     return new SyntaxTreeNode(mn,N_LetIn,zn);  }  throw new Error("Missing return statement in function");}  }
class C{  protected boolean reclassifyDevice(Device device){  if (device == null) {    logger.debug("In reclassify for null device");    return false;  }  boolean needToReclassify=false;  for (  Entity entity : device.entities) {    IEntityClass entityClass=this.entityClassifier.classifyEntity(entity);    if (entityClass == null || device.getEntityClass() == null) {      needToReclassify=true;      break;    }    if (!entityClass.getName().equals(device.getEntityClass().getName())) {      needToReclassify=true;      break;    }  }  if (needToReclassify == false) {    return false;  }  cntDeviceReclassifyDelete.increment();  LinkedList<DeviceUpdate> deviceUpdates=new LinkedList<DeviceUpdate>();  this.deleteDevice(device);  deviceUpdates.add(new DeviceUpdate(device,DeviceUpdate.Change.DELETE,null));  if (!deviceUpdates.isEmpty())   processUpdates(deviceUpdates);  for (  Entity entity : device.entities) {    this.learnDeviceByEntity(entity);  }  debugEventService.flushEvents();  return true;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  for (int k=0; k < segments.length; ++k)   ensureSegment(k);  s.defaultWriteObject();  final Segment<K,V>[] segments=this.segments;  for (int k=0; k < segments.length; ++k) {    Segment<K,V> seg=segmentAt(segments,k);    seg.lock();    try {      HashEntry<K,V>[] tab=seg.table;      for (int i=0; i < tab.length; ++i) {        HashEntry<K,V> e;        for (e=entryAt(tab,i); e != null; e=e.next) {          s.writeObject(e.key);          s.writeObject(e.value);        }      }    }  finally {      seg.unlock();    }  }  s.writeObject(null);  s.writeObject(null);}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public ImmutableSet<String> aliases(){  return aliases;}  }
class C{  private static String ordinalSuffix(int n){  int penultimate=(n % 100) / 10;  if (penultimate == 1) {    return "th";  }  int last=n % 10;  if (last == 1) {    return "st";  } else   if (last == 2) {    return "nd";  } else   if (last == 3) {    return "rd";  }  return "th";}  }
class C{  public static void createDirectory(IProject project,String relativePath) throws IOException {  IPath root=getSourceLocation(project);  IPath path=Path.fromOSString(relativePath);  Preconditions.checkArgument(!path.isAbsolute());  PathTestUtil.makeDir(root.append(path));}  }
class C{  public void messageAcked(MessageType type,Short nodeId){  if (nodeId == null)   return;  if (!windowedTypes.contains(type))   return;  MessageWindow mw=messageWindows.get(nodeId);  if (mw == null)   return;  int pending=mw.pending.decrementAndGet();  if (pending < MAX_PENDING_MESSAGES) {    mw.lock.lock();    try {      mw.full.signalAll();    }  finally {      mw.lock.unlock();    }  }}  }
class C{  public static void copy(URL from,OutputStream to) throws IOException {  asByteSource(from).copyTo(to);}  }
class C{  public ExprNode removeEntry(FilterSpecParam param){  ExprNode exprNode=specParams.get(param);  if (exprNode == null) {    throw new IllegalStateException("Not found in collection param: " + param);  }  specParams.remove(param);  exprNodes.remove(exprNode);  return exprNode;}  }
class C{  public Throwable(Throwable throwable){  this();  this.detailMessage=throwable == null ? null : throwable.toString();  cause=throwable;}  }
class C{  public ServiceCompatibilityException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static double pdf(double x,double mu,double beta){  final double z=(x - mu) / beta;  if (x == Double.NEGATIVE_INFINITY) {    return 0.;  }  return Math.exp(-z - Math.exp(-z)) / beta;}  }
class C{  public void addArrayName(String name){  filter.add(name);}  }
class C{  public ComposeEnvironmentImpl parse(String recipeContent,String contentType) throws IllegalArgumentException, ServerException {  ComposeEnvironmentImpl composeEnvironment;switch (contentType) {case "application/x-yaml":case "text/yaml":case "text/x-yaml":    try {      composeEnvironment=YAML_PARSER.readValue(recipeContent,ComposeEnvironmentImpl.class);    } catch (    IOException e) {      throw new IllegalArgumentException("Parsing of environment configuration failed. " + e.getLocalizedMessage());    }  break;default :throw new IllegalArgumentException("Provided environment recipe content type '" + contentType + "' is unsupported. Supported values are: application/x-yaml");}return composeEnvironment;}  }
class C{  public void drawRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){  g.drawRoundRect(x,y,width,height,arcWidth,arcHeight);}  }
class C{  private void generateRequiredEdgeSet(){  this.allRequiredEdges.clear();  for (  KnowledgeGroup group : this.knowledgeGroups) {    if (group.getType() == KnowledgeGroup.REQUIRED) {      this.allRequiredEdges.addAll(group.getEdges());    }  }  this.allRequiredEdges.addAll(this.requiredEdges);}  }
class C{  @Override protected long lengthOfData(){  LOG.trace("enter lengthOfData()");  return getContent().length;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public NumberFormatException(){  super();}  }
class C{  private Object topic(UUID nodeId,long reqId){  return TOPIC_CACHE.topic(TOPIC_PREFIX,nodeId,reqId);}  }
class C{  private void performNextTask(){  if (!mOnScreenRemoveMarkerTasks.isEmpty()) {    removeMarker(mOnScreenRemoveMarkerTasks.poll());  } else   if (!mAnimationTasks.isEmpty()) {    mAnimationTasks.poll().perform();  } else   if (!mOnScreenCreateMarkerTasks.isEmpty()) {    mOnScreenCreateMarkerTasks.poll().perform(this);  } else   if (!mCreateMarkerTasks.isEmpty()) {    mCreateMarkerTasks.poll().perform(this);  } else   if (!mRemoveMarkerTasks.isEmpty()) {    removeMarker(mRemoveMarkerTasks.poll());  }}  }
class C{  protected void createFunctionUseBlock(Event event){  ToplevelPane toplevel=this.getToplevel();  LocalDefUse funRef=new LocalDefUse(this);  this.allDefinitionUsers.add(funRef);  Block block=new FunApplyBlock(toplevel,funRef);  toplevel.addBlock(block);  Bounds bounds=this.getBoundsInParent();  block.relocate(bounds.getMinX() - 20,bounds.getMaxY() + 10);  block.refreshContainer();  block.initiateConnectionChanges();  event.consume();}  }
class C{  @Override public CollectionObject copy(){  return new CollectionObject(this);}  }
class C{  public HasChildQueryBuilder scoreMode(String scoreMode){  this.scoreMode=scoreMode;  return this;}  }
class C{  public NoRouteToHostException(){}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchildnewchilddiffdocument.class,args);}  }
class C{  public Object eval(CallStack callstack,Interpreter interpreter) throws EvalError {  return eval(false,callstack,interpreter);}  }
class C{  public void doSave(){  try {    if (this.currentRule == null) {      this.setStatusBarMessage("Please select a rule to be saved.",BasePanel.INFORMATION);      return;    }    if (this.currentRule.getRule().length > 0) {      if ((new String(this.currentRule.getRule())).equals(getContent())) {        if (null != this.currentRule.getComment() && this.currentRule.getComment().equals(getComments())) {          if (null != this.currentRule.getIdRule()) {            return;          }        }      }    }    String fileName=m_strategyDir + "/" + StrategyRule.PACKAGE.replace('.','/');    String fileNameSource=fileName + this.currentRule.getStrategy().getClassName() + ".java";    String fileNameComments=fileName + this.currentRule.getStrategy().getClassName() + ".txt";    int result=JOptionPane.NO_OPTION;    if (null != this.currentRule.getId()) {      result=JOptionPane.showConfirmDialog(this.getFrame(),"Do you want to version this strategy","Information",JOptionPane.YES_NO_OPTION);    }    if (result == JOptionPane.YES_OPTION) {      Integer version=this.tradePersistentModel.findRuleByMaxVersion(this.currentRule.getStrategy());      Rule nextRule=new Rule(this.currentRule.getStrategy(),(version + 1),commentText.getText(),TradingCalendar.getDateTimeNowMarketTimeZone(),getContent().getBytes(),TradingCalendar.getDateTimeNowMarketTimeZone());      this.currentRule.getStrategy().add(nextRule);      this.tradePersistentModel.persistAspect(nextRule);      doSaveFile(fileNameSource,getContent());      doSaveFile(fileNameComments,getComments());      Rule orginalRule=tradePersistentModel.findRuleById(this.currentRule.getId());      this.currentRule.setComment(orginalRule.getComment());      this.currentRule.setCreateDate(orginalRule.getCreateDate());      this.currentRule.setRule(orginalRule.getRule());      this.setContent(new String(this.currentRule.getRule()));      commentText.setText(this.currentRule.getComment());    } else {      if (getComments().length() > 0)       this.currentRule.setComment(getComments());      this.currentRule.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());      this.currentRule.setRule(getContent().getBytes());      this.tradePersistentModel.persistAspect(this.currentRule);      doSaveFile(fileNameSource,getContent());      doSaveFile(fileNameComments,getComments());    }    refreshTree();    this.currentRule.setDirty(false);  } catch (  Exception ex) {    setErrorMessage("Error saving strategy",ex.getMessage(),ex);  } finally {    this.getFrame().setCursor(Cursor.getDefaultCursor());  }}  }
class C{  public Entry(String tag,long millis,byte[] data,int flags){  if (tag == null)   throw new NullPointerException("tag == null");  if (((flags & IS_EMPTY) != 0) != (data == null)) {    throw new IllegalArgumentException("Bad flags: " + flags);  }  mTag=tag;  mTimeMillis=millis;  mData=data;  mFileDescriptor=null;  mFlags=flags;}  }
class C{  public boolean haveAllAtLeastOneAction(EList<Transition> transitions){  if (transitions.isEmpty())   return false;  for (  Transition transition : transitions) {    if (!hasAtLeastOneAction(transition)) {      return false;    }  }  return true;}  }
class C{  public T caseAnnotatableElement(AnnotatableElement object){  return null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      arcFile=whiteboxHeaderFile.replace(".dep",".txt");      (new File(arcFile)).delete();      fw=new FileWriter(arcFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="NCOLS         " + String.valueOf(wbr.getNumberColumns());      out.println(str1);      str1="NROWS         " + String.valueOf(wbr.getNumberRows());      out.println(str1);      str1="XLLCORNER     " + String.valueOf(wbr.getWest());      out.println(str1);      str1="YLLCORNER     " + String.valueOf(wbr.getSouth());      out.println(str1);      str1="CELLSIZE      " + String.valueOf((wbr.getCellSizeX() + wbr.getCellSizeY()) / 2);      out.println(str1);      str1="NODATA_VALUE  -9999";      out.println(str1);      double[] data;      String line;      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((float)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      } else {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((int)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void print(boolean x){  m_Owner.append("" + x);}  }
class C{  public void testMapCache() throws IOException {  String mmbClass="movement.MapBasedMovement";  writeToNewFile();  assertEquals("1",new TestSettings(MapBasedMovement.MAP_BASE_MOVEMENT_NS).getSetting(MapBasedMovement.NROF_FILES_S));  mbm=(MapBasedMovement)s.createIntializedObject(mmbClass);  SimMap firstMap=mbm.getMap();  mbm=(MapBasedMovement)s.createIntializedObject(mmbClass);  SimMap secondMap=mbm.getMap();  assertTrue(firstMap == secondMap);  writeToNewFile();  mbm=(MapBasedMovement)s.createIntializedObject(mmbClass);  SimMap thirdMap=mbm.getMap();  assertTrue(firstMap != thirdMap);  mbm=(MapBasedMovement)s.createIntializedObject(mmbClass);  SimMap fourthMap=mbm.getMap();  assertTrue(thirdMap == fourthMap);}  }
class C{  public static boolean isEmoji(String code){  return getEmoji(code) == null ? false : true;}  }
class C{  @SuppressWarnings("unchecked") public E navigate() throws ODataException {  try {    if (collection.getName().equals(V1Model.COLLECTION.getName())) {      getFirstCollection(collecKp);    } else     if (collection.getName().equals(V1Model.PRODUCT.getName())) {      getFirstProduct(collecKp);    } else     if (collection.getName().equals(V1Model.CLASS.getName())) {      getFirstClass(collecKp);    } else     if (collection.getName().equals(V1Model.SYNCHRONIZER.getName())) {      getFirstSynchronizer(collecKp);    } else     if (collection.getName().equals(V1Model.USER.getName())) {      getFirstUser(collecKp);    } else     if (collection.getName().equals(V1Model.CONNECTION.getName())) {      getFirstConnection(collecKp);    } else     if (collection.getName().equals(V1Model.NETWORK.getName())) {      getFirstNetwork(collecKp);    } else     if (collection.getName().equals(V1Model.USER_SYNCHRONIZER.getName())) {      getFirstUserSynchronizer(collecKp);    }  } catch (  NullPointerException e) {    throw new ODataException(e);  }  if (result == null)   throw new ODataException("Navigation failed (result is null)");  try {    if (returnType != null)     return returnType.cast(result);    return (E)result;  } catch (  ClassCastException e) {    throw new ODataException(e);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:10.744 -0500",hash_original_method="40B9B88AE9C997D470FB8A7E1F30A2A6",hash_generated_method="4DA799B304D2EBD5CA034D9B03546CD7") static double checkDouble(double d) throws JSONException {  if (Double.isInfinite(d) || Double.isNaN(d)) {    throw new JSONException("Forbidden numeric value: " + d);  }  return d;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SRuntimePackage.EXECUTION_EVENT__RAISED:    setRaised(RAISED_EDEFAULT);  return;case SRuntimePackage.EXECUTION_EVENT__SCHEDULED:setScheduled(SCHEDULED_EDEFAULT);return;case SRuntimePackage.EXECUTION_EVENT__DIRECTION:setDirection(DIRECTION_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void test_DELETE_accessPath_delete_p_o_URI() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(null,RDF.TYPE,new URIImpl("http://xmlns.com/foaf/0.1/Person"));  assertEquals(3,mutationResult);}  }
class C{  public IThumbnailSetRequest buildRequest(){  return buildRequest(getOptions());}  }
class C{  void switchToApp(){  CharSequence from=getIntent().getCharSequenceExtra(IncomingMessageView.KEY_FROM);  CharSequence msg=getIntent().getCharSequenceExtra(IncomingMessageView.KEY_MESSAGE);  Intent[] stack=IncomingMessage.makeMessageIntentStack(this,from,msg);  startActivities(stack);  finish();}  }
class C{  public NameConstraintsExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.NameConstraints_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding for" + " NameConstraintsExtension.");  }  if (val.data == null)   return;  while (val.data.available() != 0) {    DerValue opt=val.data.getDerValue();    if (opt.isContextSpecific(TAG_PERMITTED) && opt.isConstructed()) {      if (permitted != null) {        throw new IOException("Duplicate permitted " + "GeneralSubtrees in NameConstraintsExtension.");      }      opt.resetTag(DerValue.tag_Sequence);      permitted=new GeneralSubtrees(opt);    } else     if (opt.isContextSpecific(TAG_EXCLUDED) && opt.isConstructed()) {      if (excluded != null) {        throw new IOException("Duplicate excluded " + "GeneralSubtrees in NameConstraintsExtension.");      }      opt.resetTag(DerValue.tag_Sequence);      excluded=new GeneralSubtrees(opt);    } else     throw new IOException("Invalid encoding of " + "NameConstraintsExtension.");  }  minMaxValid=false;}  }
class C{  public boolean hasFormats(){  return hasRepeatingExtension(Format.class);}  }
class C{  public void onBatchComplete(){  mTagsWithLayoutVisited.clear();}  }
class C{  public String sigmaTipText(){  return "Set influence of nearest neighbours. Used in an exp function to " + "control how quickly weights decrease for more distant instances. " + "Use in conjunction with weightByDistance. Sensible values = 1/5 to "+ "1/10 the number of nearest neighbours.";}  }
class C{  public CommitConflictException(String msg){  super(msg);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public MapNode selectDestination(){  double random=rng.nextDouble();  double acc=0;  for (  Tuple<Double,Integer> t : poiProbs) {    acc+=t.getKey();    if (acc > random) {      List<MapNode> pois=poiLists.get(t.getValue());      return pois.get(rng.nextInt(pois.size()));    }  }  List<MapNode> allNodes=map.getNodes();  MapNode node;  do {    node=allNodes.get(rng.nextInt(allNodes.size()));  } while (okMapNodeTypes != null && !node.isType(okMapNodeTypes));  return node;}  }
class C{  public MosaicPaneSkin(){}  }
class C{  private Figure readCircleElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  readTransformAttribute(elem,a);  readOpacityAttribute(elem,a);  readShapeAttributes(elem,a);  double cx=toWidth(elem,readAttribute(elem,"cx","0"));  double cy=toHeight(elem,readAttribute(elem,"cy","0"));  double r=toWidth(elem,readAttribute(elem,"r","0"));  Figure figure=factory.createCircle(cx,cy,r,a);  elementObjects.put(elem,figure);  return figure;}  }
class C{  public NamedThreadFactory(String prefix){  SecurityManager s=System.getSecurityManager();  group=(s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();  namePrefix=prefix + "-" + poolNumber.getAndIncrement()+ "-thread-";}  }
class C{  public WhitenedPCA(DataSet dataSet,double regularization){  setRegularization(regularization);  SingularValueDecomposition svd=getSVD(dataSet);  setDimensions(svd.getRank());  setUpTransform(svd);}  }
class C{  void reset(){  view.scrollTo(0,0);}  }
class C{  @Override public void run(){  startProcessor();  try {    pollActiveWindows();  }  finally {    stopProcessor();  }}  }
class C{  public void messageTransferStarted(Message m,DTNHost from,DTNHost to){}  }
class C{  public Builder model(String model){  this.model=model;  return this;}  }
class C{  public boolean isEstablished(){  return mIsEstablished && !mCancelTransfer;}  }
class C{  public void changeKey(int i,Key key){  if (i < 0 || i >= nmax)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new NoSuchElementException("Specified index is not in the queue");  Key tmp=keys[i + d];  keys[i + d]=key;  if (comp.compare(key,tmp) <= 0) {    swim(qp[i + d]);  } else {    sink(qp[i + d]);  }}  }
class C{  FactPurchase(int id,int productId,int storeId,int price){  this.id=id;  this.productId=productId;  this.storeId=storeId;  this.price=price;}  }
class C{  public static TriggerBuilder<Trigger> newTrigger(){  return new TriggerBuilder<Trigger>();}  }
class C{  @NoInline private void coalescingWriteBarrierSlow(ObjectReference srcObj){  if (RCHeader.attemptToLog(srcObj)) {    modBuffer.push(srcObj);    decBuffer.processChildren(srcObj);    RCHeader.makeLogged(srcObj);  }}  }
class C{  public static void assertNotNull(Object object){  if (verbose) {    log("assertNotNull(" + object + ")");  }  assertBool(object != null);}  }
class C{  private void executeRpQueries(){  List<Operation> queryOperations=new ArrayList<>(this.result.resourcesPools.size());  Map<Long,String> rpLinkByOperationId=new HashMap<>();  for (  ResourcePoolData rpData : this.result.resourcesPools.values()) {    String rpLink=rpData.resourcePoolState.documentSelfLink;    Query rpQuery=rpData.resourcePoolState.query;    Query.Builder queryBuilder=Query.Builder.create().addClause(rpQuery);    if (this.computeLinks != null && !this.computeLinks.isEmpty()) {      queryBuilder.addInClause(ServiceDocument.FIELD_NAME_SELF_LINK,this.computeLinks);    } else     if (this.additionalQueryClausesProvider != null) {      this.additionalQueryClausesProvider.accept(queryBuilder);    }    QueryTask.Builder queryTaskBuilder=QueryTask.Builder.createDirectTask().setQuery(queryBuilder.build());    if (this.expandComputes) {      queryTaskBuilder.addOption(QueryOption.EXPAND_CONTENT);    }    Operation queryOperation=Operation.createPost(this.host,ServiceUriPaths.CORE_QUERY_TASKS).setBody(queryTaskBuilder.build()).setReferer(this.host.getUri());    rpLinkByOperationId.put(queryOperation.getId(),rpLink);    queryOperations.add(queryOperation);  }  OperationJoin.create(queryOperations).setCompletion(null).sendWith(this.host);}  }
class C{  public JavaRefactoringArguments(String project,Map<String,String> arguments){  fProject=project;  fAttributes=arguments;}  }
class C{  public boolean isWillingToCommit(){  Object oo=get_Value(COLUMNNAME_IsWillingToCommit);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  private void moveView(int ypos){  int modelPos=yViewToDocument(ypos - dragOffset);  int lineNum=getDocument().getDefaultRootElement().getElementIndex(modelPos);  lineNum=Math.max(0,lineNum);  int totalLines=getDocument().getDefaultRootElement().getElementCount();  int totalAmt=scrollBar.getMaximum() - scrollBar.getMinimum();  int pos=lineNum * totalAmt / totalLines + scrollBar.getMinimum();  scrollBar.setValue(pos);}  }
class C{  public void fail(RecoveryFailedException e,boolean sendShardFailure){  if (finished.compareAndSet(false,true)) {    try {      listener.onRecoveryFailure(state(),e,sendShardFailure);    }  finally {      try {        cancellableThreads.cancel("failed recovery [" + e.getMessage() + "]");      }  finally {        decRef();      }    }  }}  }
class C{  public MSF4JSecurityException(SecurityErrorCode errorCode,String message){  super(message);  this.errorCode=errorCode;}  }
class C{  public void removePacketWriterInterceptor(PacketInterceptor packetInterceptor){  removePacketInterceptor(packetInterceptor);}  }
class C{  public AbstractConfigTest(String name){  super(name);}  }
class C{  @Override public void parseAtom(ExtensionProfile extProfile,InputStream input) throws IOException, ParseException {  FeedHandler handler=new FeedHandler(extProfile);  new XmlParser().parse(input,handler,Namespaces.atom,"feed");}  }
class C{  public Value poll(String queue_name){  Value element=null;  if (has_queue(queue_name)) {    element=queue_map.get(queue_name).pollFirst();  }  return element;}  }
class C{  private AppPrefHelper(Context context){  mPreferences=context.getSharedPreferences(PREFERENCES,0);}  }
class C{  public static Combo createCombo(Composite parent,int style,int hspan,int fill,String[] items){  Combo c=new Combo(parent,style);  c.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  c.setLayoutData(gd);  if (items != null) {    c.setItems(items);  }  c.setVisibleItemCount(30);  c.select(0);  return c;}  }
class C{  private Map<Integer,Portfolio> createPortfolioObjects(int numToCreate,int startID){  Map<Integer,Portfolio> portfoliosMap=new HashMap<>();  IntStream.range(0,numToCreate).forEach(null);  return portfoliosMap;}  }
class C{  private void testBug71396PrepStatementClose(PreparedStatement[] testPStmt) throws SQLException {  for (  Statement testStmt : testPStmt) {    testStmt.close();  }}  }
class C{  public Object deserializeFromDouble(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {switch (jp.getNumberType()) {case FLOAT:case DOUBLE:    if (_delegateDeserializer != null) {      if (!_valueInstantiator.canCreateFromDouble()) {        Object bean=_valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp,ctxt));        if (_injectables != null) {          injectValues(ctxt,bean);        }        return bean;      }    }  return _valueInstantiator.createFromDouble(jp.getDoubleValue());}if (_delegateDeserializer != null) {return _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp,ctxt));}throw ctxt.instantiationException(getBeanClass(),"no suitable creator method found to deserialize from JSON floating-point number");}  }
class C{  public Resources addResources(String... resources){  Resources prop=new Resources(resources);  addResources(prop);  return prop;}  }
class C{  protected static DHPublicKeyParameters decodeDHPublicKey(byte[] encoded){  BigInteger i=new BigInteger(encoded);  return new DHPublicKeyParameters(i,DH_GROUP_PARAMETERS);}  }
class C{  protected ActiveStateReferenceExpressionImpl(){  super();}  }
class C{  void resetMaxBuf(){  this.maxAllowedPacket=this.connection.getMaxAllowedPacket();}  }
class C{  static <T>T registerJSONObject(final T key,final Object json){  rawJsonMap.get().put(key,json);  return key;}  }
class C{  @SuppressWarnings("unchecked") public JsonDeserializer<Object> buildBeanDeserializer(DeserializationConfig config,JavaType type,BasicBeanDescription beanDesc,BeanProperty property) throws JsonMappingException {  ValueInstantiator valueInstantiator=findValueInstantiator(config,beanDesc);  if (type.isAbstract()) {    if (!valueInstantiator.canInstantiate()) {      return new AbstractDeserializer(type);    }  }  BeanDeserializerBuilder builder=constructBeanDeserializerBuilder(beanDesc);  builder.setValueInstantiator(valueInstantiator);  addBeanProps(config,beanDesc,builder);  addReferenceProperties(config,beanDesc,builder);  addInjectables(config,beanDesc,builder);  if (_factoryConfig.hasDeserializerModifiers()) {    for (    BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {      builder=mod.updateBuilder(config,beanDesc,builder);    }  }  JsonDeserializer<?> deserializer=builder.build(property);  if (_factoryConfig.hasDeserializerModifiers()) {    for (    BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {      deserializer=mod.modifyDeserializer(config,beanDesc,deserializer);    }  }  return (JsonDeserializer<Object>)deserializer;}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final boolean value){  buffer.append(value);}  }
class C{  public RegisterSpecList subset(BitSet exclusionSet){  int newSize=size() - exclusionSet.cardinality();  if (newSize == 0) {    return EMPTY;  }  RegisterSpecList result=new RegisterSpecList(newSize);  int newIndex=0;  for (int oldIndex=0; oldIndex < size(); oldIndex++) {    if (!exclusionSet.get(oldIndex)) {      result.set0(newIndex,get0(oldIndex));      newIndex++;    }  }  if (isImmutable()) {    result.setImmutable();  }  return result;}  }
class C{  public long numCqsStopped(){  return this.cqService.getCqServiceVsdStats().getNumCqsStopped();}  }
class C{  private static void validateNumberField(CatalogServiceRestRep catalogService,ServiceFieldRestRep field,String fieldName,String value){  if (StringUtils.isNotBlank(value)) {    validateNumber(fieldName,value);    validateRange(fieldName,value,field.getMin(),field.getMax());  }}  }
class C{  private void initializeLiveAttributes(){  externalResourcesRequired=createLiveAnimatedBoolean(null,SVG_EXTERNAL_RESOURCES_REQUIRED_ATTRIBUTE,false);}  }
class C{  public vec3 transformVector(vec3 v){  vec3 result=new vec3();  result.m[0]=this.m[0] * v.m[0] + this.m[4] * v.m[1] + this.m[8] * v.m[2];  result.m[1]=this.m[1] * v.m[0] + this.m[5] * v.m[1] + this.m[9] * v.m[2];  result.m[2]=this.m[2] * v.m[0] + this.m[6] * v.m[1] + this.m[10] * v.m[2];  return result;}  }
class C{  public NativeAsset(int index){  this.txid=TID.INVALID;  this.index=index;}  }
class C{  public final void testIsStatePreserved2(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  byte[] encodedKeyCopy=encodedKey.clone();  X509EncodedKeySpec meks=new X509EncodedKeySpec(encodedKeyCopy);  byte[] ek=meks.getEncoded();  ek[3]=(byte)5;  byte[] ek1=meks.getEncoded();  assertTrue(Arrays.equals(encodedKey,ek1));}  }
class C{  public static String formatDoubleToPercent(double percentage){  return doubleFormat.format(percentage * 100D) + " %";}  }
class C{  public static <T,K,A,D>Flux<Tuple2<K,D>> grouped(Flux<T> flux,Function<? super T,? extends K> classifier,Collector<? super T,A,D> downstream){  return Flux.fromIterable(null);}  }
class C{  public final void pushIteratorRoot(int n){  m_iteratorRoots.push(n);}  }
class C{  public OverScroller(Context context,Interpolator interpolator,boolean flywheel){  mInterpolator=interpolator;  mFlywheel=flywheel;  mScrollerX=new SplineOverScroller(context);  mScrollerY=new SplineOverScroller(context);  mPm=(PowerManager)context.getSystemService(Context.POWER_SERVICE);}  }
class C{  public void printStats(List<? extends JCTree> trees) throws IOException {  for (List<? extends JCTree> l=trees; l.nonEmpty(); l=l.tail) {    align();    printStat(l.head);    println();  }}  }
class C{  public void addPart(int index,PduPart part){  if (null == part) {    throw new NullPointerException();  }  putPartToMaps(part);  mParts.add(index,part);}  }
class C{  public ConstantScoreQueryBuilder(QueryBuilder filterBuilder){  this.filterBuilder=Objects.requireNonNull(filterBuilder);}  }
class C{  public void audit(){  System.out.println(getAuditReport());}  }
class C{  public void reset(){  System.arraycopy(IV,0,cfbV,0,IV.length);  cipher.reset();}  }
class C{  private TamsMessage loadChars() throws java.io.IOException {  int nchars;  byte[] rcvBuffer=new byte[32];  nchars=inpipe.read(rcvBuffer,0,32);  TamsMessage msg=new TamsMessage(nchars);  for (int i=0; i < nchars; i++) {    msg.setElement(i,rcvBuffer[i] & 0xFF);  }  return msg;}  }
class C{  public void removePendingTransaction(SIPServerTransaction tr){  if (isLoggingEnabled()) {    stackLogger.logDebug("removePendingTx: " + tr.getTransactionId());  }  this.pendingTransactions.remove(tr.getTransactionId());}  }
class C{  private void connectionFailed(){  handler.sendEmptyMessage(BLUETOOTH_IS_CONNECT_FAIL);  BluetoothPresenter.this.start();}  }
class C{  public CustomDdlCreateRequest createCustomDdlCreateRequest(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion,String customDdlName,String ddl){  CustomDdlCreateRequest request=new CustomDdlCreateRequest();  request.setCustomDdlKey(new CustomDdlKey(namespaceCode,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,customDdlName));  request.setDdl(ddl);  return request;}  }
class C{  public static double decodeYValue(final long docValue){  return decodeY(((int)(docValue >> 21)) & 0x1FFFFF);}  }
class C{  public static MagnetOptions[] parseMagnets(String magnets){  List<MagnetOptions> list=new ArrayList<MagnetOptions>();  StringTokenizer tokens=new StringTokenizer(magnets,System.getProperty("line.separator"));  while (tokens.hasMoreTokens()) {    String next=tokens.nextToken();    MagnetOptions[] options=MagnetOptions.parseMagnet(next);    if (options.length > 0) {      list.addAll(Arrays.asList(options));    }  }  return list.toArray(new MagnetOptions[0]);}  }
class C{  public void createResourceTicketAsync(String tenantId,ResourceTicketCreateSpec resourceTicketCreateSpec,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/resource-tickets",getBasePath(),tenantId);  createObjectAsync(path,serializeObjectAsJson(resourceTicketCreateSpec),responseCallback);}  }
class C{  public void finish() throws Exception {}  }
class C{  public static ControlGroup transformToGroup(IItem item){  ControlGroup controlGroup=new ControlGroup();  if (item.getName() != null) {    controlGroup.setTitel(item.getName().replaceAll("\\s"," "));  }  return controlGroup;}  }
class C{  private void persist(DomainObject<?> object){  try {    dm.persist(object);  } catch (  NonUniqueBusinessKeyException e) {    throw new SaaSSystemException(e);  }}  }
class C{  public Entry(BaseEntry<?> sourceEntry){  super(sourceEntry);}  }
class C{  private DocLine[] loadLines(MInventory inventory){  ArrayList<DocLine> list=new ArrayList<DocLine>();  MInventoryLine[] lines=inventory.getLines(false);  for (int i=0; i < lines.length; i++) {    MInventoryLine line=lines[i];    if (line.getQtyBook().compareTo(line.getQtyCount()) == 0 && line.getQtyInternalUse().signum() == 0)     continue;    DocLine docLine=new DocLine(line,this);    BigDecimal Qty=line.getQtyInternalUse();    if (Qty.signum() != 0)     Qty=Qty.negate(); else {      BigDecimal QtyBook=line.getQtyBook();      BigDecimal QtyCount=line.getQtyCount();      Qty=QtyCount.subtract(QtyBook);    }    docLine.setQty(Qty,false);    docLine.setReversalLine_ID(line.getReversalLine_ID());    log.fine(docLine.toString());    list.add(docLine);  }  DocLine[] dls=new DocLine[list.size()];  list.toArray(dls);  return dls;}  }
class C{  public static boolean isSystemApplication(PackageManager packageManager,String packageName){  if (packageManager == null || packageName == null || packageName.length() == 0) {    return false;  }  try {    ApplicationInfo app=packageManager.getApplicationInfo(packageName,0);    return (app != null && (app.flags & ApplicationInfo.FLAG_SYSTEM) > 0);  } catch (  PackageManager.NameNotFoundException e) {    e.printStackTrace();  }  return false;}  }
class C{  private void addSocketToComponent(Socket socket,Component component,DatagramPacket datagramPacket) throws IOException, IllegalStateException {  IceProcessingState state=component.getParentStream().getParentAgent().getState();  if (!IceProcessingState.WAITING.equals(state) && !IceProcessingState.RUNNING.equals(state)) {    throw new IllegalStateException("The associated Agent is in state " + state);  }  IceSocketWrapper candidateSocket=null;  IceSocketWrapper stunSocket=null;  MultiplexingSocket multiplexing=new MultiplexingSocket(socket);  candidateSocket=new IceTcpSocketWrapper(multiplexing);  stunSocket=new IceTcpSocketWrapper(multiplexing.getSocket(new StunDatagramPacketFilter()));  stunSocket=new PushBackIceSocketWrapper(stunSocket,datagramPacket);  TcpHostCandidate candidate=findCandidate(component,socket);  if (candidate == null) {    throw new IOException("Failed to find the local candidate for socket: " + socket);  }  component.getParentStream().getParentAgent().getStunStack().addSocket(stunSocket);  candidate.addSocket(candidateSocket);}  }
class C{  public Offset diff(Address addr2){  return new Offset(value.diff(addr2.value));}  }
class C{  public void write(int b) throws IOException {  if (out == null)   out=owner.writeNotify();  out.write(b);}  }
class C{  public void putCharSequenceArrayList(String key,ArrayList<CharSequence> value){  unparcel();  mMap.put(key,value);}  }
class C{  public OMPoly(double[] llPoints,int units,int lType,int nsegs){  super(RENDERTYPE_LATLON,lType,DECLUTTERTYPE_NONE);  setLocation(llPoints,units);  this.nsegs=nsegs;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static boolean slowFileExists(Directory dir,String fileName) throws IOException {  try {    dir.openInput(fileName,IOContext.DEFAULT).close();    return true;  } catch (  NoSuchFileException|FileNotFoundException e) {    return false;  }}  }
class C{  private static boolean isFourBytesSequence(byte b){  return -16 <= b && b <= -9;}  }
class C{  public boolean isJRebelActive(){  if (MapUtils.isNotEmpty(getParameters())) {    Object jRebelValue=getParameters().get("jRebel");    if ("true".equals(jRebelValue)) {      return true;    }  }  return false;}  }
class C{  public static void dTraceWhole(){  if (LOGGING_LEVEL_FILTER >= ERRORS_WARNINGS_INFO_DEBUG) {    Throwable t=new Throwable();    StackTraceElement[] elements=t.getStackTrace();    StringBuilder builder=new StringBuilder();    for (    StackTraceElement e : elements) {      builder.append("\n\t");      builder.append(e);    }    Log.d(XLog.class.getSimpleName(),getTrace().trace + builder.toString());  }}  }
class C{  private void resetCounters(){  offheapedCnt.set(0);  onheapedCnt.set(0);  swappedCnt.set(0);  unswapedCnt.set(0);}  }
class C{  static MenuItemTitleMatcher withTitle(String title){  return new MenuItemTitleMatcher(title);}  }
class C{  public double inferenceByGibbsSampling(Document d,double[] pzd,int numBurnIn,int numSampling){  Arrays.fill(pzd,0);  double loglikelihood=0.0;  for (int i=0; i < numBurnIn + numSampling; i++) {    loglikelihood+=gibbsSampling(d);    if (i >= numBurnIn) {      for (      int topic : d.topics) {        if (topic != NO_TOPIC)         pzd[topic]++;      }    } else {      loglikelihood=0;    }  }  normalize(pzd,alpha);  return loglikelihood / numSampling;}  }
class C{  public VOPricedParameter(VOParameterDefinition voParameterDef){  this.voParameterDef=voParameterDef;}  }
class C{  private void ensureRowCorrect() throws SQLException {  if (row != resultSet.getRow()) {    throw new RuntimeException("DatabaseDataRow: ResultSet was modified since creation of row!");  }}  }
class C{  protected AnimatableValue[] parseValues(short type,AnimationTarget target){  String valuesString=element.getAttributeNS(null,SVG_VALUES_ATTRIBUTE);  int len=valuesString.length();  if (len == 0) {    return null;  }  ArrayList values=new ArrayList(7);  int i=0, start=0, end;  char c;  outer:   while (i < len) {    while (valuesString.charAt(i) == ' ') {      i++;      if (i == len) {        break outer;      }    }    start=i++;    if (i < len) {      c=valuesString.charAt(i);      while (c != ';') {        i++;        if (i == len) {          break;        }        c=valuesString.charAt(i);      }    }    end=i++;    String valueString=valuesString.substring(start,end);    AnimatableValue value=parseValue(valueString,type,target);    if (value == null) {      throw new BridgeException(ctx,element,ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_VALUES_ATTRIBUTE,valuesString});    }    values.add(value);  }  AnimatableValue[] ret=new AnimatableValue[values.size()];  return (AnimatableValue[])values.toArray(ret);}  }
class C{  public InputStreamRequestEntity(final InputStream content,final long contentLength,final String contentType){  if (content == null) {    throw new IllegalArgumentException("The content cannot be null");  }  this.content=content;  this.contentLength=contentLength;  this.contentType=contentType;}  }
class C{  public MimeVersionHeader createMimeVersionHeader(int majorVersion,int minorVersion) throws InvalidArgumentException {  if (majorVersion < 0 || minorVersion < 0)   throw new javax2.sip.InvalidArgumentException("bad major/minor version");  MimeVersion m=new MimeVersion();  m.setMajorVersion(majorVersion);  m.setMinorVersion(minorVersion);  return m;}  }
class C{  public SQLSyntaxErrorException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  private void enableCheckBoxes(){  jHeaderRead.setEnabled(false);  jImport.setEnabled(false);  jComboReference.setEnabled(true);  jComboName.setEnabled(true);  jComboBarcode.setEnabled(true);  jComboBuy.setEnabled(true);  jComboSell.setEnabled(true);  jComboCategory.setEnabled(true);  jComboSecurity.setEnabled(true);  jComboMaximum.setEnabled(true);  jComboDefaultCategory.setEnabled(true);  jComboTax.setEnabled(true);  jCheckInCatalogue.setEnabled(true);  jCheckSellIncTax.setEnabled(true);  jCheckAddStockLevels.setEnabled(true);  jComboBoxButtonText.setEnabled(true);  jComboBoxRemotePrint.setEnabled(true);  jComboBoxService.setEnabled(true);  jComboBoxVarPrice.setEnabled(true);  jComboBoxWarranty.setEnabled(true);  jComboBoxTextTip.setEnabled(true);  jComboBoxProp.setEnabled(true);  jComboBoxAux.setEnabled(true);  jComboBoxShortName.setEnabled(true);  jComboBoxIspack.setEnabled(true);  jComboBoxPackSize.setEnabled(true);  jComboBoxPackOf.setEnabled(true);}  }
class C{  private void query(IgniteCache<Integer,CacheValue> cache,int lowerBound,int upperBound) throws Exception {  resetCounters();  Collection<Cache.Entry<Integer,CacheValue>> res=cache.query(new SqlQuery(CacheValue.class,"val >= ? and val < ?").setArgs(lowerBound,upperBound)).getAll();  assert res.size() == upperBound - lowerBound;  for (  Cache.Entry<Integer,CacheValue> entry : res) {    assert entry != null;    assert entry.getKey() != null;    assert entry.getValue() != null;    assert entry.getKey() == entry.getValue().value();  }  assert swapCnt.get() == 0;  assert unswapCnt.get() == 0;  checkEntries(cache,lowerBound,upperBound);  assert swapCnt.get() == 0;  assert unswapCnt.get() == upperBound - lowerBound;}  }
class C{  private void respondError(AdHocCommandData response,XMPPError.Condition condition){  respondError(response,new XMPPError(condition));}  }
class C{  private void checkOrientation(int orientation){  final boolean isHorizontal=LinearLayout.HORIZONTAL == getOrientation();  final boolean isPortrait=Configuration.ORIENTATION_PORTRAIT == orientation;  if (isPortrait && !isHorizontal) {    fixGravityAndPadding(LinearLayout.HORIZONTAL);    setOrientation(LinearLayout.HORIZONTAL);    reverseChildren();    requestLayout();  } else   if (!isPortrait && isHorizontal) {    fixGravityAndPadding(LinearLayout.VERTICAL);    setOrientation(LinearLayout.VERTICAL);    reverseChildren();    requestLayout();  }}  }
class C{  public void init(SolrResourceLoader loader,NamedList<String> initArgs,StorageIO storageIO) throws SolrException {  log.debug("Initializing RestManager with initArgs: " + initArgs);  if (storageIO == null)   throw new IllegalArgumentException("Must provide a valid StorageIO implementation to the RestManager!");  this.storageIO=storageIO;  this.loader=loader;  registry=loader.getManagedResourceRegistry();  endpoint=new RestManagerManagedResource(this);  endpoint.loadManagedDataAndNotify(null);  managed.put(SCHEMA_BASE_PATH + MANAGED_ENDPOINT,endpoint);  log.debug("Initializing {} registered ManagedResources",registry.registered.size());  for (  ManagedResourceRegistration reg : registry.registered.values()) {    managed.put(reg.resourceId,createManagedResource(reg));  }  registry.initializedRestManager=this;}  }
class C{  public long addWrapField(long instant,int years){  return add(instant,years);}  }
class C{  protected void crearExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  AppUser userVO=getAppUser(request);  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(userVO));  GestionConsultasBI consultasService=services.lookupGestionConsultasBI();  ConsultaForm consultaForm=(ConsultaForm)form;  ActionErrors errors=new ActionErrors();  try {    ConsultaVO consultaVO=(ConsultaVO)getFromTemporalSession(request,ConsultasConstants.CONSULTA_KEY);    consultaForm.populate(userVO.getId(),consultaVO);    errors=consultaForm.validate(request,true);    if (!errors.isEmpty()) {      ErrorsTag.saveErrors(request,errors);      goForwardConsulta(mapping,consultaForm,request);    } else {      ServiceClient usuarioCreador=ServiceClient.create(userVO);      usuarioCreador.setId(consultaForm.getIdusrsolicitante());      usuarioCreador.getProperties().put(ConsultasConstants.PROPERTY_NOMBRE,consultaVO.getNusrconsultor());      usuarioCreador.getProperties().put(ConsultasConstants.PROPERTY_TIPO_SOLICITANTE,request.getParameter("solicitante"));      List listaDetalles=(List)getFromTemporalSession(request,SolicitudesConstants.LISTA_DETALLES_UDOCS_SOLICITUD_KEY);      if (ListUtils.isNotEmpty(listaDetalles)) {        consultaVO.setFromBusqueda(true);        consultaVO.setDetallesConsulta(listaDetalles);      }      consultaVO.setFestado(DateUtils.getFechaActual());      consultaVO.setEstado(ConsultasConstants.ESTADO_CONSULTA_ABIERTA);      try {        consultasService.insertConsulta(consultaVO,usuarioCreador);        removeInTemporalSession(request,ConsultasConstants.CONSULTA_KEY);        if (consultaVO.isFromBusqueda()) {          getInvocationStack(request).reset(request);        } else {          popLastInvocation(request);        }        setReturnActionFordward(request,verConsultaBeforeCreate(consultaVO.getId()));      } catch (      ConsultaActionNotAllowedException canae) {        errors=ExceptionMapper.getErrorsExcepcion(request,canae);        ErrorsTag.saveErrors(request,errors);        goForwardConsulta(mapping,consultaForm,request);      }    }  } catch (  Exception e) {    errors.add(common.Constants.ERROR_GENERAL_MESSAGE,new ActionError(SolicitudesConstants.ERROR_AL_GUARDAR_CONSULTA,e.toString(),request.getLocale()));    ErrorsTag.saveErrors(request,errors);    goForwardConsulta(mapping,consultaForm,request);  }}  }
class C{  public double computeAverageLocalOfObservations() throws Exception {  double te=0.0;  if (debug) {    MatrixUtils.printMatrix(System.out,destNextPastSourceVectors);  }  for (int b=0; b < totalObservations; b++) {    double countPast=mvkeDestinationPast.getCount(destPastVectors[b],b);    double countNextPast=mvkeDestinationNextPast.getCount(destNextPastVectors[b],b);    double countPastSource=mvkeDestinationPastSource.getCount(destPastSourceVectors[b],b);    double countNextPastSource=mvkeDestinationNextPastSource.getCount(destNextPastSourceVectors[b],b);    double logTerm=0.0;    double cont=0.0;    if (countNextPastSource > 0) {      logTerm=(countNextPastSource / countPastSource) / (countNextPast / countPast);      cont=Math.log(logTerm);    }    te+=cont;    if (debug) {      System.out.println(b + ": " + destPastVectors[b][0]+ " ("+ countNextPastSource+ " / "+ countPastSource+ ") / ("+ countNextPast+ " / "+ countPast+ ") = "+ logTerm+ " -> "+ (cont / Math.log(2.0))+ " -> sum: "+ (te / Math.log(2.0)));    }  }  lastAverage=te / (double)totalObservations / Math.log(2.0);  return lastAverage;}  }
class C{  public StackedBarChartExample(final String title){  super(title);  final CategoryDataset dataset=createDataset();  final JFreeChart chart=createChart(dataset);  final ChartPanel chartPanel=new ChartPanel(chart);  chartPanel.setPreferredSize(new java.awt.Dimension(590,350));  setContentPane(chartPanel);}  }
class C{  @Override public int keylength(){  return this.keylength;}  }
class C{  public void testNextIntBounded2(){  for (int least=-15485863; least < MAX_INT_BOUND; least+=524959) {    for (int bound=least + 2; bound > least && bound < MAX_INT_BOUND; bound+=49979687) {      int f=ThreadLocalRandom.current().nextInt(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      int j;      while (i < NCALLS && (j=ThreadLocalRandom.current().nextInt(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  private void emitTailCompares(SPARCMacroAssembler masm,Register result,Register array1,Register array2,Label trueLabel,Label falseLabel){  Label compare2Bytes=new Label();  Label compare1Byte=new Label();  Register tempReg1=asRegister(temp3);  Register tempReg2=asRegister(temp4);  if (kind.getByteCount() <= 4) {    masm.compareBranch(result,4,Less,Xcc,compare2Bytes,PREDICT_NOT_TAKEN,null);    masm.lduw(new SPARCAddress(array1,0),tempReg1);    masm.lduw(new SPARCAddress(array2,0),tempReg2);    masm.compareBranch(tempReg1,tempReg2,NotEqual,Xcc,falseLabel,PREDICT_NOT_TAKEN,null);    if (kind.getByteCount() <= 2) {      masm.add(array1,4,array1);      masm.add(array2,4,array2);      masm.sub(result,4,result);      masm.bind(compare2Bytes);      masm.compareBranch(result,2,Less,Xcc,compare1Byte,PREDICT_TAKEN,null);      masm.lduh(new SPARCAddress(array1,0),tempReg1);      masm.lduh(new SPARCAddress(array2,0),tempReg2);      masm.compareBranch(tempReg1,tempReg2,NotEqual,Xcc,falseLabel,PREDICT_TAKEN,null);      if (kind.getByteCount() <= 1) {        masm.add(array1,2,array1);        masm.add(array2,2,array2);        masm.sub(result,2,result);        masm.bind(compare1Byte);        masm.compareBranch(result,1,NotEqual,Xcc,trueLabel,PREDICT_TAKEN,null);        masm.ldub(new SPARCAddress(array1,0),tempReg1);        masm.ldub(new SPARCAddress(array2,0),tempReg2);        masm.compareBranch(tempReg1,tempReg2,NotEqual,Xcc,falseLabel,PREDICT_TAKEN,null);      } else {        masm.bind(compare1Byte);      }    } else {      masm.bind(compare2Bytes);    }  }}  }
class C{  @Override public boolean add(Object obj){  if (!(obj instanceof StructImpl)) {    throw new IllegalArgumentException(LocalizedStrings.StructSet_THIS_SET_ONLY_ACCEPTS_STRUCTIMPL.toLocalizedString());  }  StructImpl s=(StructImpl)obj;  if (!s.getStructType().equals(this.structType)) {    throw new IllegalArgumentException(LocalizedStrings.StructSet_OBJ_DOES_NOT_HAVE_THE_SAME_STRUCTTYPE_REQUIRED_0_ACTUAL_1.toLocalizedString(new Object[]{this.structType,s.getStructType()}));  }  return addFieldValues(s.getFieldValues());}  }
class C{  private boolean checkClassLiteralAccess(){  if (this.identifierLengthPtr >= 1 && this.previousToken == TokenNameDOT) {    int length;    if ((length=this.identifierLengthStack[this.identifierLengthPtr - 1]) < 0) {      int dim=isAfterArrayType() ? this.intStack[this.intPtr--] : 0;      SingleTypeReference typeRef=(SingleTypeReference)TypeReference.baseTypeReference(-length,dim);      typeRef.sourceStart=this.intStack[this.intPtr--];      if (dim == 0) {        typeRef.sourceEnd=this.intStack[this.intPtr--];      } else {        this.intPtr--;        typeRef.sourceEnd=this.endPosition;      }      char[] source=this.identifierStack[this.identifierPtr];      long pos=this.identifierPositionStack[this.identifierPtr--];      this.identifierLengthPtr--;      CompletionOnClassLiteralAccess access=new CompletionOnClassLiteralAccess(pos,typeRef);      access.completionIdentifier=source;      this.identifierLengthPtr--;      this.assistNode=access;      this.isOrphanCompletionNode=true;      return true;    }    if (isAfterArrayType()) {      char[] source=this.identifierStack[this.identifierPtr];      long pos=this.identifierPositionStack[this.identifierPtr--];      this.identifierLengthPtr--;      pushOnGenericsIdentifiersLengthStack(this.identifierLengthStack[this.identifierLengthPtr]);      pushOnGenericsLengthStack(0);      TypeReference typeRef=getTypeReference(this.intStack[this.intPtr--]);      CompletionOnClassLiteralAccess access=new CompletionOnClassLiteralAccess(pos,typeRef);      access.completionIdentifier=source;      this.assistNode=access;      this.isOrphanCompletionNode=true;      return true;    }  }  return false;}  }
class C{  private void applyDefaultsElement(final Element annotationScope,final AnnotatedTypeMirror type){  DefaultSet defaults=defaultsAt(annotationScope);  DefaultApplierElement applier=new DefaultApplierElement(atypeFactory,annotationScope,type,applyToTypeVar);  for (  Default def : defaults) {    applier.applyDefault(def);  }  if (applyUncheckedCodeDefaults(annotationScope)) {    for (    Default def : uncheckedCodeDefaults) {      applier.applyDefault(def);    }  }  for (  Default def : checkedCodeDefaults) {    applier.applyDefault(def);  }}  }
class C{  static float[] checkSize(float[] array,final int currentItem){  final int size=array.length;  if (size <= currentItem) {    final int newSize=size * 2;    final float[] newArray=new float[newSize];    System.arraycopy(array,0,newArray,0,size);    array=newArray;  }  return array;}  }
class C{  private double computeExplainedVariance(SortedEigenPairs eigenPairs,int filteredEigenPairs){  double strongsum=0.0;  double weaksum=0.0;  for (int i=0; i < eigenPairs.size(); i++) {    if (i <= filteredEigenPairs) {      strongsum+=eigenPairs.eigenValue(i);    } else {      weaksum+=eigenPairs.eigenValue(i);    }  }  return strongsum / (strongsum / weaksum);}  }
class C{  public T caseImportDeclaration(ImportDeclaration object){  return null;}  }
class C{  public void addDependency(ClassDeclaration c){  if ((c != null) && !dependencies.contains(c)) {    dependencies.addElement(c);  }}  }
class C{  @Inline public final boolean isEmpty(){  return !checkDequeue(1);}  }
class C{  private PluginClassLoader makeInitialClassloader(){  URL url;  try {    url=this.file.toURI().toURL();  } catch (  MalformedURLException e) {    throw new RuntimeException("Cannot make classloader for plugin: " + e,e);  }  final PluginClassLoader cl=new PluginClassLoader(new URL[]{url});  return cl;}  }
class C{  public static BufferedImage toBufferedImage(Image image){  if (image instanceof BufferedImage) {    return (BufferedImage)image;  }  image=new ImageIcon(image).getImage();  boolean hasAlpha=hasAlpha(image);  BufferedImage bimage;  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();  try {    int transparency=Transparency.OPAQUE;    if (hasAlpha) {      transparency=Transparency.TRANSLUCENT;    }    GraphicsDevice gs=ge.getDefaultScreenDevice();    GraphicsConfiguration gc=gs.getDefaultConfiguration();    bimage=gc.createCompatibleImage(image.getWidth(null),image.getHeight(null),transparency);  } catch (  HeadlessException e) {    bimage=null;  }  if (bimage == null) {    int type=BufferedImage.TYPE_INT_RGB;    if (hasAlpha) {      type=BufferedImage.TYPE_INT_ARGB;    }    bimage=new BufferedImage(image.getWidth(null),image.getHeight(null),type);  }  Graphics g=bimage.createGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return bimage;}  }
class C{  public static int[] toIntArray(Sequence<IString> sequence){  int sz=sequence.size();  int[] intArray=new int[sequence.size()];  for (int i=0; i < sz; i++) {    intArray[i]=sequence.get(i).getId();  }  return intArray;}  }
class C{  public MethodNotSupportedException(final String message){  super(message);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void showDialog(){  setLocationRelativeTo(main);  setVisible(true);  getNews(false);}  }
class C{  public static boolean isWindows(){  String os=System.getProperty("os.name").toLowerCase();  return (os.contains("win"));}  }
class C{  protected MpoTag addTag(MpoTag tag,int ifdId){  if (tag != null && MpoTag.isValidIfd(ifdId)) {    return getMpIfdData(ifdId).setTag(tag);  }  return null;}  }
class C{  public CTagNodeMenuBuilder(final JTree projectTree,final IDatabase database,final TreeNode<CTag> tag){  super(projectTree);  m_database=database;  m_tag=tag;}  }
class C{  private void computeTabScaleAlphaDepthHelper(RectF stackRect){  final float stackScale=getStackScale(stackRect);  final float discardRange=getDiscardRange();  for (int i=0; i < mStackTabs.length; ++i) {    assert mStackTabs[i] != null;    StackTab stackTab=mStackTabs[i];    LayoutTab layoutTab=stackTab.getLayoutTab();    final float discard=stackTab.getDiscardAmount();    float discardScale=computeDiscardScale(discard,discardRange,stackTab.getDiscardFromClick());    layoutTab.setScale(stackTab.getScale() * discardScale * stackScale);    layoutTab.setBorderScale(discardScale);    float discardAlpha=computeDiscardAlpha(discard,discardRange);    layoutTab.setAlpha(stackTab.getAlpha() * discardAlpha);  }}  }
class C{  public CSVReader(Reader reader,char separator){  this(reader,separator,CSVParser.DEFAULT_QUOTE_CHARACTER,CSVParser.DEFAULT_ESCAPE_CHARACTER);}  }
class C{  public static EWMA oneMinuteEWMA(){  return new EWMA(M1_ALPHA,INTERVAL,TimeUnit.SECONDS);}  }
class C{  public void testPutInt32(){  byte[] expectedResult={12,0,0,1,1,0,0,0,2,0,0,0,3,0,0,0};  MySQLPacket array=new MySQLPacket(16,(byte)1);  ByteArrayOutputStream output=new ByteArrayOutputStream();  try {    array.putInt32(1);    array.putInt32(2);    array.putInt32(3);    array.write(output);    compareBytes(expectedResult,output.toByteArray());  } catch (  IOException e) {    fail("This should not happen!");  }}  }
class C{  public static org.oscm.vo.VOService convertToApi(org.oscm.internal.vo.VOService oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOService newVO=new org.oscm.vo.VOService();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameters(convertToApiVOParameter(oldVO.getParameters()));  newVO.setDescription(oldVO.getDescription());  newVO.setName(oldVO.getName());  newVO.setServiceId(oldVO.getServiceId());  newVO.setTechnicalId(oldVO.getTechnicalId());  newVO.setFeatureURL(oldVO.getFeatureURL());  newVO.setBaseURL(oldVO.getBaseURL());  newVO.setPriceModel(convertToApi(oldVO.getPriceModel()));  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.types.enumtypes.ServiceStatus.class));  newVO.setAccessType(EnumConverter.convert(oldVO.getAccessType(),org.oscm.types.enumtypes.ServiceAccessType.class));  newVO.setSellerId(oldVO.getSellerId());  newVO.setSellerName(oldVO.getSellerName());  newVO.setSellerKey(oldVO.getSellerKey());  newVO.setTags(oldVO.getTags());  newVO.setShortDescription(oldVO.getShortDescription());  newVO.setAverageRating(oldVO.getAverageRating());  newVO.setNumberOfReviews(oldVO.getNumberOfReviews());  newVO.setOfferingType(EnumConverter.convert(oldVO.getOfferingType(),org.oscm.types.enumtypes.OfferingType.class));  newVO.setConfiguratorUrl(oldVO.getConfiguratorUrl());  newVO.setCustomTabUrl(oldVO.getCustomTabUrl());  newVO.setCustomTabName(oldVO.getCustomTabName());  return newVO;}  }
class C{  public SQLFeatureNotSupportedException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public void start(){  timerQueue().addTimer(this,getInitialDelay());}  }
class C{  public String toString(){  return ("GSSException: " + getMessage());}  }
class C{  public static boolean isInteropAnnotationClass(ClassOrInterface annotationClass){  return annotationClass.getName().endsWith("$Proxy");}  }
class C{  public final void rotZ(double angle){  double sinAngle, cosAngle;  sinAngle=Math.sin(angle);  cosAngle=Math.cos(angle);  this.m00=cosAngle;  this.m01=-sinAngle;  this.m02=0.0;  this.m10=sinAngle;  this.m11=cosAngle;  this.m12=0.0;  this.m20=0.0;  this.m21=0.0;  this.m22=1.0;}  }
class C{  void startDelete(final int taskId,final Object tag,final Object cookie,final String table,final String selection,final String[] selectionArgs,final boolean autoNotify,final AsyncDbQueryCallback callback){  final QueryTask task=new QueryTask(Type.DELETE,taskId,tag,cookie,callback);  task.mTableName=table;  task.mSelection=selection;  task.mSelectionArgs=selectionArgs;  task.mAutoNotify=autoNotify;  mTaskQueue.add(task);  new QueryAsyncTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR,task);}  }
class C{  public VersioningTestV1(VersioningTestV1 other){  __isset_bitfield=other.__isset_bitfield;  this.begin_in_both=other.begin_in_both;  if (other.isSetOld_string()) {    this.old_string=other.old_string;  }  this.end_in_both=other.end_in_both;}  }
class C{  private synchronized static void removeChildren(Node node,short type,boolean deep){  NodeList list=node.getChildNodes();  for (int i=list.getLength(); i >= 0; i--) {    Node n=list.item(i);    if (n == null)     continue;    if (n.getNodeType() == type || type == UNDEFINED_NODE)     node.removeChild(XMLCaster.toRawNode(n)); else     if (deep)     removeChildren(n,type,deep);  }}  }
class C{  private void onLoadMoreClick(View view){  if (checkPaginator()) {    getPagePaginator().loadMore();  }}  }
class C{  public Object clone(){  ColorTransformNode copy=null;  try {    copy=(ColorTransformNode)super.clone();    copy.alphaMultiplier=alphaMultiplier;    copy.redMultiplier=redMultiplier;    copy.blueMultiplier=blueMultiplier;    copy.greenMultiplier=greenMultiplier;    copy.alphaOffset=alphaOffset;    copy.redOffset=redOffset;    copy.blueOffset=blueOffset;    copy.greenOffset=greenOffset;  } catch (  CloneNotSupportedException e) {    throw new FXGException(getStartLine(),getStartColumn(),"InternalProcessingError",e);  }  return copy;}  }
class C{  public void resetBase(){  init();}  }
class C{  public boolean checkResettingOptions(){  boolean result;  String[] defaultOptions;  String[] defaultOptionsCheck;  OptionHandler handler;  print("Resetting options...");  try {    if (getDebug()) {      println("\n  Setting user options");    }    handler=getDefaultHandler();    handler.setOptions(getUserOptions());    defaultOptions=getDefaultOptions();    if (getDebug()) {      println("  Resetting to default options");    }    handler.setOptions(getCopy(defaultOptions));    if (getDebug()) {      println("  Checking default options match previous default");    }    defaultOptionsCheck=handler.getOptions();    compareOptions(defaultOptions,defaultOptionsCheck);    println("yes");    result=true;  } catch (  Exception e) {    println("no");    result=false;    if (getDebug()) {      println(e);    }  }  return result;}  }
class C{  protected RefParamImpl(){  super();}  }
class C{  public void init() throws Exception {}  }
class C{  private List<String> generateServicePriceModelData(List<ServicePriceModelTableEntry> tableEntries){  List<String> priceModelData=new ArrayList<String>();  if (tableEntries.size() == 0) {    return priceModelData;  }  String pmUuid="";  for (  ServicePriceModelTableEntry entry : tableEntries) {    String uuid=entry.getPriceModelUUID();    if (pmUuid.isEmpty() && !uuid.isEmpty()) {      pmUuid=uuid;      priceModelData.add(pmUuid);    }    String locale=entry.getLocale();    String fileType=entry.getFileType();    String fileName=entry.getFileName();    String tag=entry.getTag();    if (!uuid.isEmpty() && uuid.equals(pmUuid) && !locale.isEmpty()&& !fileType.isEmpty()&& !fileName.isEmpty()&& !tag.isEmpty()) {      priceModelData.add(locale);      priceModelData.add(fileType);      priceModelData.add(fileName);      priceModelData.add(tag);    }  }  return priceModelData;}  }
class C{  public boolean isDetectorClassSubtypeOf(Class<?> otherClass){  if (FindBugs.isNoAnalysis()) {    throw new IllegalStateException("No analysis specified");  }  return otherClass.isAssignableFrom(detectorCreator.getDetectorClass());}  }
class C{  @Override public List<NamedRelatedVirtualPoolRep> list(){  return getList(baseUrl);}  }
class C{  protected void layoutTextModifiers(DrawContext dc,AVList modifiers,OrderedSymbol osym){}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGenPackage.FEATURE_CONFIGURATION__TYPE:    setType((FeatureType)newValue);  return;case SGenPackage.FEATURE_CONFIGURATION__PARAMETER_VALUES:getParameterValues().clear();getParameterValues().addAll((Collection<? extends FeatureParameterValue>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isExternalEntity(String name){  Object obj=this.entities.get(name);  return !(obj instanceof java.lang.String);}  }
class C{  @Override public void saveComponent(){  int result;  JComponentWriter writer;  File file;  JComponentWriterFileFilter filter;  m_FileChooserPanel.setDialogTitle(getSaveDialogTitle());  do {    result=m_FileChooserPanel.showSaveDialog(getComponent());    if (result != JFileChooser.APPROVE_OPTION) {      return;    }  } while (m_FileChooserPanel.getSelectedFile() == null);  try {    filter=(JComponentWriterFileFilter)m_FileChooserPanel.getFileFilter();    file=m_FileChooserPanel.getSelectedFile();    writer=filter.getWriter();    if (!file.getAbsolutePath().toLowerCase().endsWith(writer.getExtension().toLowerCase())) {      file=new File(file.getAbsolutePath() + writer.getExtension());    }    writer.setComponent(getComponent());    writer.setFile(file);    writer.setScale(getXScale(),getYScale());    writer.setUseCustomDimensions(m_CustomDimensionsCheckBox.isSelected());    if (m_CustomDimensionsCheckBox.isSelected()) {      writer.setCustomWidth(Integer.parseInt(m_CustomWidthText.getText()));      writer.setCustomHeight(Integer.parseInt(m_CustomHeightText.getText()));    } else {      writer.setCustomWidth(-1);      writer.setCustomHeight(-1);    }    writer.toOutput();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private PubsubFuture<Topic> createTopic(final String canonicalTopic,final Topic req){  validateCanonicalTopic(canonicalTopic);  return put("create topic",canonicalTopic,req,Topic.class);}  }
class C{  public MotifPopupMenuBorder(Font titleFont,Color bgColor,Color fgColor,Color shadow,Color highlight){  this.font=titleFont;  this.background=bgColor;  this.foreground=fgColor;  this.shadowColor=shadow;  this.highlightColor=highlight;}  }
class C{  public static boolean isMinimizeOnEnd(){  return minimizeOnEnd;}  }
class C{  @LargeTest public void testThumbnailForImage() throws Exception {  final String imageItemFilename=INPUT_FILE_PATH + "IMG_640x480.jpg";  final int mediaDuration=1000;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  int outWidth=0;  int outHeight=0;  final MediaImageItem mii=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",imageItemFilename,mediaDuration,renderingMode);  assertNotNull("Media Image Item is Null",mii);  outWidth=mii.getWidth() / 2;  outHeight=mii.getHeight() / 2;  final Bitmap thumbNailBmp=mii.getThumbnail(outWidth,outHeight,mediaDuration);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  private boolean init(){  if (!initialized) {    mParser=OpenGraphProtocolParser.parse(mRoot,mTimingInfo);    initialized=true;  }  return mParser != null;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TYPE_CONSTRAINT;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public CharSequence readSource(JavaFileObject filename){  try {    inputFiles.add(filename);    return filename.getCharContent(false);  } catch (  IOException e) {    log.error("error.reading.file",filename,JavacFileManager.getMessage(e));    return null;  }}  }
class C{  public PubSubServer(String hostname,int port) throws IOException {  log.info("Creating server hostname {}, port {}",hostname,port);  serverSocketChannel=ServerSocketChannel.open();  serverSocketChannel.socket().bind(new InetSocketAddress(hostname,port));  serverSocketChannel.configureBlocking(false);  log.debug("Creating and registering selector");  selector=Selector.open();  serverKey=serverSocketChannel.register(selector,SelectionKey.OP_ACCEPT);}  }
class C{  @Override protected boolean hasUnderflow(FlatRStarTreeNode node){  if (node.isLeaf()) {    return node.getNumEntries() < leafMinimum;  } else {    return false;  }}  }
class C{  public boolean isContainer(){  return this.container;}  }
class C{  public byte[] execute(String className) throws TransformerException {  PageSource optionalPS=sourceCode instanceof PageSourceCode ? ((PageSourceCode)sourceCode).getPageSource() : null;  List<LitString> keys=new ArrayList<LitString>();  ClassWriter cw=ASMUtil.getClassWriter();  ArrayList<String> imports=new ArrayList<String>();  getImports(imports,this);  TagCIObject comp=getTagCFObject(null);  if (className == null) {    if (optionalPS == null)     throw new IllegalArgumentException("when Page object has no PageSource, a className is necessary");    className=optionalPS.getClassName();  }  if (comp != null)   className=createSubClass(className,comp.getName(),sourceCode.getDialect());  className=className.replace('.','/');  this.className=className;  String parent=lucee.runtime.Page.class.getName();  if (isComponent(comp))   parent=ComponentPageImpl.class.getName(); else   if (isInterface(comp))   parent=InterfacePageImpl.class.getName();  parent=parent.replace('.','/');  cw.visit(Opcodes.V1_6,Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL,className,null,parent,null);  if (optionalPS != null) {    cw.visitSource(optionalPS.getRealpathWithVirtual(),null);  } else {  }  GeneratorAdapter constrAdapter=new GeneratorAdapter(Opcodes.ACC_PUBLIC,CONSTRUCTOR_PS,null,null,cw);  ConstrBytecodeContext constr=new ConstrBytecodeContext(optionalPS,this,keys,cw,className,constrAdapter,CONSTRUCTOR_PS,writeLog(),suppressWSbeforeArg,output,returnValue);  constrAdapter.loadThis();  Type t;  if (isComponent(comp)) {    t=Types.COMPONENT_PAGE_IMPL;    constrAdapter.invokeConstructor(t,CONSTRUCTOR);  } else   if (isInterface(comp)) {    t=Types.INTERFACE_PAGE_IMPL;    constrAdapter.invokeConstructor(t,CONSTRUCTOR);  } else {    t=Types.PAGE;    constrAdapter.invokeConstructor(t,CONSTRUCTOR);  }  constrAdapter.visitVarInsn(Opcodes.ALOAD,0);  constrAdapter.visitMethodInsn(Opcodes.INVOKEVIRTUAL,constr.getClassName(),"initKeys","()V");{    FieldVisitor fv=cw.visitField(Opcodes.ACC_PRIVATE + Opcodes.ACC_FINAL,"imports","[Llucee/runtime/component/ImportDefintion;",null,null);    fv.visitEnd();    constrAdapter.visitVarInsn(Opcodes.ALOAD,0);    ArrayVisitor av=new ArrayVisitor();    av.visitBegin(constrAdapter,Types.IMPORT_DEFINITIONS,imports.size());    int index=0;    Iterator<String> it=imports.iterator();    while (it.hasNext()) {      av.visitBeginItem(constrAdapter,index++);      constrAdapter.push(it.next());      ASMConstants.NULL(constrAdapter);      constrAdapter.invokeStatic(Types.IMPORT_DEFINITIONS_IMPL,ID_GET_INSTANCE);      av.visitEndItem(constrAdapter);    }    av.visitEnd();    constrAdapter.visitFieldInsn(Opcodes.PUTFIELD,className,"imports","[Llucee/runtime/component/ImportDefintion;");  }  GeneratorAdapter adapter=new GeneratorAdapter(Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL,VERSION,null,null,cw);  adapter.push(version);  adapter.returnValue();  adapter.endMethod();  if (imports.size() > 0) {    adapter=new GeneratorAdapter(Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL,GET_IMPORT_DEFINITIONS,null,null,cw);    adapter.visitVarInsn(Opcodes.ALOAD,0);    adapter.visitFieldInsn(Opcodes.GETFIELD,className,"imports","[Llucee/runtime/component/ImportDefintion;");    adapter.returnValue();    adapter.endMethod();  } else {    adapter=new GeneratorAdapter(Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL,GET_IMPORT_DEFINITIONS,null,null,cw);    adapter.visitInsn(Opcodes.ICONST_0);    adapter.visitTypeInsn(Opcodes.ANEWARRAY,"lucee/runtime/component/ImportDefintion");    adapter.returnValue();    adapter.endMethod();  }  adapter=new GeneratorAdapter(Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL,LAST_MOD,null,null,cw);  adapter.push(lastModifed);  adapter.returnValue();  adapter.endMethod();  adapter=new GeneratorAdapter(Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL,COMPILE_TIME,null,null,cw);  adapter.push(System.currentTimeMillis());  adapter.returnValue();  adapter.endMethod();  if (comp != null) {    writeOutStaticConstructor(constr,keys,cw,comp,className);  }  if (isComponent()) {    writeOutNewComponent(constr,keys,cw,comp,className);    writeOutInitComponent(constr,keys,cw,comp,className);  } else   if (isInterface()) {    writeOutNewInterface(constr,keys,cw,comp,className);    writeOutInitInterface(constr,keys,cw,comp,className);  } else {    writeOutCall(constr,keys,cw,className);  }  Function[] functions=getFunctions();  ConditionVisitor cv;  DecisionIntVisitor div;  if (isInterface()) {  } else   if (functions.length <= 10) {    adapter=new GeneratorAdapter(Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL,UDF_CALL,null,new Type[]{Types.THROWABLE},cw);    BytecodeContext bc=new BytecodeContext(optionalPS,constr,this,keys,cw,className,adapter,UDF_CALL,writeLog(),suppressWSbeforeArg,output,returnValue);    if (functions.length == 0) {    } else     if (functions.length == 1) {      ExpressionUtil.visitLine(bc,functions[0].getStart());      functions[0].getBody().writeOut(bc);      ExpressionUtil.visitLine(bc,functions[0].getEnd());    } else     writeOutUdfCallInner(bc,functions,0,functions.length);    adapter.visitInsn(Opcodes.ACONST_NULL);    adapter.returnValue();    adapter.endMethod();  } else {    adapter=new GeneratorAdapter(Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL,UDF_CALL,null,new Type[]{Types.THROWABLE},cw);    BytecodeContext bc=new BytecodeContext(optionalPS,constr,this,keys,cw,className,adapter,UDF_CALL,writeLog(),suppressWSbeforeArg,output,returnValue);    cv=new ConditionVisitor();    cv.visitBefore();    int count=0;    for (int i=0; i < functions.length; i+=10) {      cv.visitWhenBeforeExpr();      div=new DecisionIntVisitor();      div.visitBegin();      adapter.loadArg(2);      div.visitLT();      adapter.push(i + 10);      div.visitEnd(bc);      cv.visitWhenAfterExprBeforeBody(bc);      adapter.visitVarInsn(Opcodes.ALOAD,0);      adapter.visitVarInsn(Opcodes.ALOAD,1);      adapter.visitVarInsn(Opcodes.ALOAD,2);      adapter.visitVarInsn(Opcodes.ILOAD,3);      adapter.visitMethodInsn(Opcodes.INVOKEVIRTUAL,className,createFunctionName(++count),"(Llucee/runtime/PageContext;Llucee/runtime/type/UDF;I)Ljava/lang/Object;");      adapter.visitInsn(Opcodes.ARETURN);      cv.visitWhenAfterBody(bc);    }    cv.visitAfter(bc);    adapter.visitInsn(Opcodes.ACONST_NULL);    adapter.returnValue();    adapter.endMethod();    count=0;    Method innerCall;    for (int i=0; i < functions.length; i+=10) {      innerCall=new Method(createFunctionName(++count),Types.OBJECT,new Type[]{Types.PAGE_CONTEXT,USER_DEFINED_FUNCTION,Types.INT_VALUE});      adapter=new GeneratorAdapter(Opcodes.ACC_PRIVATE + Opcodes.ACC_FINAL,innerCall,null,new Type[]{Types.THROWABLE},cw);      writeOutUdfCallInner(new BytecodeContext(optionalPS,constr,this,keys,cw,className,adapter,innerCall,writeLog(),suppressWSbeforeArg,output,returnValue),functions,i,i + 10 > functions.length ? functions.length : i + 10);      adapter.visitInsn(Opcodes.ACONST_NULL);      adapter.returnValue();      adapter.endMethod();    }  }  TagThread[] threads=getThreads();  if (true) {    adapter=new GeneratorAdapter(Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL,THREAD_CALL,null,new Type[]{Types.THROWABLE},cw);    if (threads.length > 0)     writeOutThreadCallInner(new BytecodeContext(optionalPS,constr,this,keys,cw,className,adapter,THREAD_CALL,writeLog(),suppressWSbeforeArg,output,returnValue),threads,0,threads.length);    adapter.returnValue();    adapter.endMethod();  }  if (isInterface()) {  } else   if (functions.length <= 10) {    adapter=new GeneratorAdapter(Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL,UDF_DEFAULT_VALUE,null,new Type[]{Types.PAGE_EXCEPTION},cw);    if (functions.length > 0)     writeUdfDefaultValueInner(new BytecodeContext(optionalPS,constr,this,keys,cw,className,adapter,UDF_DEFAULT_VALUE,writeLog(),suppressWSbeforeArg,output,returnValue),functions,0,functions.length);    adapter.loadArg(DEFAULT_VALUE);    adapter.returnValue();    adapter.endMethod();  } else {    adapter=new GeneratorAdapter(Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL,UDF_DEFAULT_VALUE,null,new Type[]{Types.PAGE_EXCEPTION},cw);    BytecodeContext bc=new BytecodeContext(optionalPS,constr,this,keys,cw,className,adapter,UDF_DEFAULT_VALUE,writeLog(),suppressWSbeforeArg,output,returnValue);    cv=new ConditionVisitor();    cv.visitBefore();    int count=0;    for (int i=0; i < functions.length; i+=10) {      cv.visitWhenBeforeExpr();      div=new DecisionIntVisitor();      div.visitBegin();      adapter.loadArg(1);      div.visitLT();      adapter.push(i + 10);      div.visitEnd(bc);      cv.visitWhenAfterExprBeforeBody(bc);      adapter.visitVarInsn(Opcodes.ALOAD,0);      adapter.visitVarInsn(Opcodes.ALOAD,1);      adapter.visitVarInsn(Opcodes.ILOAD,2);      adapter.visitVarInsn(Opcodes.ILOAD,3);      adapter.visitVarInsn(Opcodes.ALOAD,4);      adapter.visitMethodInsn(Opcodes.INVOKEVIRTUAL,className,"udfDefaultValue" + (++count),"(Llucee/runtime/PageContext;IILjava/lang/Object;)Ljava/lang/Object;");      adapter.visitInsn(Opcodes.ARETURN);      cv.visitWhenAfterBody(bc);    }    cv.visitAfter(bc);    adapter.visitInsn(Opcodes.ACONST_NULL);    adapter.returnValue();    adapter.endMethod();    count=0;    Method innerDefaultValue;    for (int i=0; i < functions.length; i+=10) {      innerDefaultValue=new Method("udfDefaultValue" + (++count),Types.OBJECT,new Type[]{Types.PAGE_CONTEXT,Types.INT_VALUE,Types.INT_VALUE,Types.OBJECT});      adapter=new GeneratorAdapter(Opcodes.ACC_PRIVATE + Opcodes.ACC_FINAL,innerDefaultValue,null,new Type[]{Types.PAGE_EXCEPTION},cw);      writeUdfDefaultValueInner(new BytecodeContext(optionalPS,constr,this,keys,cw,className,adapter,innerDefaultValue,writeLog(),suppressWSbeforeArg,output,returnValue),functions,i,i + 10 > functions.length ? functions.length : i + 10);      adapter.loadArg(DEFAULT_VALUE);      adapter.returnValue();      adapter.endMethod();    }  }  List<Data> udfProperties=constr.getUDFProperties();  Iterator<Data> it=udfProperties.iterator();  String udfpropsClassName=Types.UDF_PROPERTIES_ARRAY.toString();  constrAdapter.visitVarInsn(Opcodes.ALOAD,0);  constrAdapter.push(udfProperties.size());  constrAdapter.newArray(Types.UDF_PROPERTIES);  constrAdapter.visitFieldInsn(Opcodes.PUTFIELD,getClassName(),"udfs",udfpropsClassName);  Data data;  while (it.hasNext()) {    data=it.next();    constrAdapter.visitVarInsn(Opcodes.ALOAD,0);    constrAdapter.visitFieldInsn(Opcodes.GETFIELD,constr.getClassName(),"udfs",Types.UDF_PROPERTIES_ARRAY.toString());    constrAdapter.push(data.arrayIndex);    data.function.createUDFProperties(constr,data.valueIndex,data.type);    constrAdapter.visitInsn(Opcodes.AASTORE);  }  constrAdapter.visitVarInsn(Opcodes.ALOAD,0);  constrAdapter.visitVarInsn(Opcodes.ALOAD,1);  constrAdapter.invokeVirtual(t,SET_PAGE_SOURCE);  constrAdapter.returnValue();  constrAdapter.endMethod();{    GeneratorAdapter aInit=new GeneratorAdapter(Opcodes.ACC_PRIVATE + Opcodes.ACC_FINAL,INIT_KEYS,null,null,cw);    BytecodeContext bcInit=new BytecodeContext(optionalPS,constr,this,keys,cw,className,aInit,INIT_KEYS,writeLog(),suppressWSbeforeArg,output,returnValue);    registerFields(bcInit,keys);    aInit.returnValue();    aInit.endMethod();  }  FieldVisitor fv=cw.visitField(Opcodes.ACC_PRIVATE + Opcodes.ACC_FINAL,"subs","[Llucee/runtime/CIPage;",null,null);  fv.visitEnd();  if (comp != null && comp.isMain()) {    List<TagCIObject> subs=getSubs(null);    if (!ArrayUtil.isEmpty(subs)) {      Iterator<TagCIObject> _it=subs.iterator();      TagCIObject tc;      while (_it.hasNext()) {        tc=_it.next();        tc.writeOut(this);      }      writeGetSubPages(cw,className,subs,sourceCode.getDialect());    }  }  return cw.toByteArray();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String valueFor(String key){  Configuration conf=instance();  String val=conf.properties.getProperty(key);  if (val == null) {    conf.warning("CONFIGURATION: no value found for key " + key);  }  return val;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @PostConstruct public void postConstruct(){  if (log.isInfoEnabled()) {    log.info("|-Registration Service active...");  }}  }
class C{  protected Command createCommand(String commandName,Image icon,int commandId,String action){  return new Command(commandName,icon,commandId);}  }
class C{  public void prepareContinue(){  getDebugger().getLegacySession().resumeAll();}  }
class C{  public Executor resetCheckpointFile() throws IOException {  if (checkpointFile != null) {    FileUtils.delete(checkpointFile);  }  return this;}  }
class C{  protected Anonymous_multipleIsA_1_Impl(){  super();}  }
class C{  @Nullable private static PsiClass findClass(final PsiElement element){  final PsiClass psiClass=element instanceof PsiClass ? (PsiClass)element : PsiTreeUtil.getParentOfType(element,PsiClass.class);  if (psiClass instanceof PsiAnonymousClass) {    return findClass(psiClass.getParent());  }  return psiClass;}  }
class C{  private void readFixedSites(String filename){  if (filename != null) {    File f=new File(filename);    if (f.exists() && f.isFile() && f.canRead()) {      BufferedReader br=IOUtils.getBufferedReader(filename);      try {        String line=null;        while ((line=br.readLine()) != null) {          String id=line;          if (!this.sites.contains(id)) {            LOG.warn("Site " + line + " was indicated as a fixed site, but doesn't occur in the distance matrix. It will be ignored.");          } else {            this.fixedSites.add(id);          }        }      } catch (      IOException e) {        e.printStackTrace();        throw new RuntimeException("Cannot read from " + filename);      } finally {        try {          br.close();        } catch (        IOException e) {          e.printStackTrace();          throw new RuntimeException("Cannot close " + filename);        }      }    }  }  LOG.info("... found " + this.fixedSites.size() + " fixed sites.");}  }
class C{  private static int oneOf(String s,String... list) throws Exception {  int[] match=new int[list.length];  int nmatch=0;  int experiment=Integer.MAX_VALUE;  for (int i=0; i < list.length; i++) {    String one=list[i];    if (one == null) {      experiment=i;      continue;    }    if (one.toLowerCase(Locale.ENGLISH).startsWith(s.toLowerCase(Locale.ENGLISH))) {      match[nmatch++]=i;    } else {      StringBuffer sb=new StringBuffer();      boolean first=true;      for (      char c : one.toCharArray()) {        if (first) {          sb.append(c);          first=false;        } else {          if (!Character.isLowerCase(c)) {            sb.append(c);          }        }      }      if (sb.toString().equalsIgnoreCase(s)) {        match[nmatch++]=i;      }    }  }  if (nmatch == 0) {    return -1;  } else   if (nmatch == 1) {    return match[0];  } else {    if (match[1] > experiment) {      return match[0];    }    StringBuffer sb=new StringBuffer();    MessageFormat form=new MessageFormat(rb.getString("command.{0}.is.ambiguous."));    Object[] source={s};    sb.append(form.format(source));    sb.append("\n    ");    for (int i=0; i < nmatch && match[i] < experiment; i++) {      sb.append(' ');      sb.append(list[match[i]]);    }    throw new Exception(sb.toString());  }}  }
class C{  public void pause(List<String> urls){  getDownloadTaskManager().pause(urls,null);}  }
class C{  protected Statement parseLocalClass(int mod) throws SyntaxError, IOException {  long p=pos;  ClassDefinition body=parseNamedClass(M_LOCAL | mod,STAT,null);  Statement ds[]={new VarDeclarationStatement(p,new LocalMember(body),null)};  Expression type=new TypeExpression(p,body.getType());  return new DeclarationStatement(p,0,type,ds);}  }
class C{  public InteriorIntersectionFinderAdder(LineIntersector li){  this.li=li;  interiorIntersections=new ArrayList();}  }
class C{  public void applyMatrix(float n00,float n01,float n02,float n10,float n11,float n12){  g.applyMatrix(n00,n01,n02,n10,n11,n12);}  }
class C{  public void testRpcException() throws Exception {  socketRpcServer.registerService(new FakeServiceImpl(REQUEST).throwsException(new RuntimeException()));  FakeSocket socket=new FakeSocket(false).withRequest(RPC_REQUEST);  runHandler(socket);  assertFalse(socket.getResponse().getCallback());  assertTrue(socket.getResponse().hasError());  assertEquals(ErrorReason.RPC_ERROR,socket.getResponse().getErrorReason());}  }
class C{  public PersonUser(PrincipalId id,PersonDetail detail,boolean disabled,boolean locked){  this(id,null,null,detail,disabled,locked);}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){switch (requestCode) {case REQUEST_CODE__ACCESS_EXTERNAL_STORAGE:    if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {      AppLog.i(this,"onRequestPermissionsResult: Permission to access external storage granted");      Toast.makeText(this,R.string.permission_granted_try_again,Toast.LENGTH_SHORT).show();    } else {      AppLog.w(this,"onRequestPermissionsResult: Permission to access external storage denied");      Toast.makeText(this,R.string.permission_denied,Toast.LENGTH_SHORT).show();    }  return;default :super.onRequestPermissionsResult(requestCode,permissions,grantResults);}}  }
class C{  public synchronized void clearSeriesValues(){  mXY.clear();  initRange();}  }
class C{  public boolean canEditHashtags(){  return isOwner() || getRefControl().isOwner() || getProjectControl().isOwner()|| getUser().getCapabilities().canAdministrateServer()|| getRefControl().canEditHashtags();}  }
class C{  private int computeNetworkPrefixFromMask(IPAddress mask){  int result=0;  int tmp=mask.getIPAddress();  while ((tmp & 0x00000001) == 0x00000001) {    result++;    tmp=tmp >>> 1;  }  if (tmp != 0) {    return -1;  }  return result;}  }
class C{  private void processMapping(Map<String,String> stringMapping) throws FBResourceException {  for (  Map.Entry<String,String> entry : stringMapping.entrySet()) {    String jdbcTxIsolation=entry.getKey();    Integer isolationLevel;    try {      isolationLevel=getTransactionIsolationLevel(jdbcTxIsolation);    } catch (    IllegalArgumentException ex) {      throw new FBResourceException("Transaction isolation " + jdbcTxIsolation + " is not supported.");    }    TransactionParameterBuffer tpb=processMapping(entry.getValue());    mapping.put(isolationLevel,tpb);  }}  }
class C{  public void put(int key,boolean value){  int i=ContainerHelpers.binarySearch(mKeys,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    mKeys=GrowingArrayUtils.insert(mKeys,mSize,i,key);    mValues=GrowingArrayUtils.insert(mValues,mSize,i,value);    mSize++;  }}  }
class C{  public TestCertPath(Certificate[] certs){  super("testCertPath");  this.certs=certs;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.GETTER_DECLARATION__DECLARED_TYPE_REF:    return basicSetDeclaredTypeRef(null,msgs);case N4JSPackage.GETTER_DECLARATION__BOGUS_TYPE_REF:  return basicSetBogusTypeRef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private Node rotateRight(Node h){  Node x=h.left;  h.left=x.right;  x.right=h;  x.color=x.right.color;  x.right.color=RED;  x.size=h.size;  h.size=size(h.left) + size(h.right) + 1;  return x;}  }
class C{  public col addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public KMLAlias(String namespaceURI){  super(namespaceURI);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final byte[] readStream(final PdfObject pdfObject,final boolean cacheValue,final boolean decompress,final boolean keepRaw,final boolean isMetaData,final boolean isCompressedStream,final String cacheName){  final boolean debugStream=false;  boolean isCachedOnDisk=pdfObject.isCached();  byte[] data=null;  if (!isCachedOnDisk) {    data=pdfObject.getDecodedStream();  }  byte[] stream;  if (data == null) {    stream=pdfObject.stream;    if (isCachedOnDisk) {      try {        if (decryption != null && !isCompressedStream && (decryption.getBooleanValue(PDFflags.IS_METADATA_ENCRYPTED) || !isMetaData)) {          decryption.decrypt(null,pdfObject.getObjectRefAsString(),false,cacheName,false,false);        }      } catch (      final Exception e) {        stream=null;        LogWriter.writeLog("Exception " + e);      }    }    if (stream != null) {      try {        if (decryption != null && !isCompressedStream && (decryption.getBooleanValue(PDFflags.IS_METADATA_ENCRYPTED) || !isMetaData)) {          stream=decryption.decrypt(stream,pdfObject.getObjectRefAsString(),false,null,false,false);        }      } catch (      final PdfSecurityException e) {        stream=null;        LogWriter.writeLog("Exception " + e + " with "+ pdfObject.getObjectRefAsString());      }    }    if (keepRaw) {      pdfObject.stream=null;    }    int length=1;    if (stream != null || isCachedOnDisk) {      int height=1, width=1;      final int newH=pdfObject.getInt(PdfDictionary.Height);      if (newH != -1) {        height=newH;      }      final int newW=pdfObject.getInt(PdfDictionary.Width);      if (newW != -1) {        width=newW;      }      final int newLength=pdfObject.getInt(PdfDictionary.Length);      if (newLength != -1) {        length=newLength;      }      if (height * width == 1) {        width=length;      }      final PdfArrayIterator filters=pdfObject.getMixedArray(PdfDictionary.Filter);      int firstValue=PdfDictionary.Unknown;      if (filters != null && filters.hasMoreTokens()) {        firstValue=filters.getNextValueAsConstant(false);      }      if (debugStream) {        System.out.println("First filter=" + firstValue);      }      if (filters != null && firstValue != PdfDictionary.Unknown && firstValue != PdfFilteredReader.JPXDecode && firstValue != PdfFilteredReader.DCTDecode) {        if (debugStream) {          System.out.println("Decoding stream " + Arrays.toString(stream) + ' '+ pdfObject.isCached()+ ' '+ pdfObject.getObjectRefAsString());        }        try {          final PdfFilteredReader filter=new PdfFilteredReader();          stream=filter.decodeFilters(ObjectUtils.setupDecodeParms(pdfObject,this),stream,filters,width,height,cacheName);          if (cacheName != null && encryptionPassword != null) {            File f=new File(cacheName);            FileInputStream fis=new FileInputStream(f);            byte[] temp=new byte[(int)f.length()];            fis.read(temp);            CryptoAES aes=new CryptoAES();            temp=aes.encrypt(encryptionPassword,temp);            FileOutputStream fos=new FileOutputStream(f);            fos.write(temp);            fos.close();          }          pdfObject.setStreamMayBeCorrupt(filter.hasError());        } catch (        final Exception e) {          LogWriter.writeLog("[PDF] Problem " + e + " decompressing stream ");          stream=null;          isCachedOnDisk=false;        }        length=1;      } else       if (stream != null && length != -1 && length < stream.length) {        if (stream.length != length && length > 0) {          final byte[] newStream=new byte[length];          System.arraycopy(stream,0,newStream,0,length);          stream=newStream;        } else         if (stream.length == 1 && length == 0) {          stream=new byte[0];        }      }    }    if (stream != null && cacheValue) {      pdfObject.setDecodedStream(stream);    }    if (decompress && isCachedOnDisk) {      final int streamLength=(int)new File(cacheName).length();      byte[] bytes=new byte[streamLength];      try {        new BufferedInputStream(new FileInputStream(cacheName)).read(bytes);        if (encryptionPassword != null) {          CryptoAES aes=new CryptoAES();          bytes=aes.decrypt(encryptionPassword,bytes);        }      } catch (      final Exception e) {        LogWriter.writeLog("Exception: " + e.getMessage());      }      if (length != 1 && length < streamLength) {        final byte[] newStream=new byte[length];        System.arraycopy(bytes,0,newStream,0,length);        bytes=newStream;      }      return bytes;    }  } else {    stream=data;  }  if (stream == null) {    return null;  }  final int len=stream.length;  final byte[] copy=new byte[len];  System.arraycopy(stream,0,copy,0,len);  return copy;}  }
class C{  @VisibleForTesting public ProjectNameFilterWorkingSet(final Pattern filter,final String id,final WorkingSetManager manager){  super(id,manager);  this.filter=filter;}  }
class C{  public ListenableFuture<BigInteger> incrementPayment(BigInteger size) throws ValueOutOfRangeException, IllegalStateException {  return channelClient.incrementPayment(size);}  }
class C{  protected MultistepExprHolder createMultistepExprList(Vector paths){  MultistepExprHolder first=null;  int n=paths.size();  for (int i=0; i < n; i++) {    ExpressionOwner eo=(ExpressionOwner)paths.elementAt(i);    if (null == eo)     continue;    LocPathIterator lpi=(LocPathIterator)eo.getExpression();    int numPaths=countSteps(lpi);    if (numPaths > 1) {      if (null == first)       first=new MultistepExprHolder(eo,numPaths,null); else       first=first.addInSortedOrder(eo,numPaths);    }  }  if ((null == first) || (first.getLength() <= 1))   return null; else   return first;}  }
class C{  public final Vec3D rotateX(float theta){  final float co=(float)Math.cos(theta);  final float si=(float)Math.sin(theta);  final float zz=co * z - si * y;  y=si * z + co * y;  z=zz;  return this;}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public CDisableAction(final BackEndDebuggerProvider debuggerProvider,final int[] rows){  super(rows.length == 1 ? "Disable Breakpoint" : "Disable Breakpoints");  m_debuggerProvider=Preconditions.checkNotNull(debuggerProvider,"IE01345: Debugger provider argument can not be null");  m_rows=rows.clone();}  }
class C{  private void resize(int rows,int cols){  TetradMatrix _data=new TetradMatrix(rows,cols);  for (int i=0; i < _data.rows(); i++) {    for (int j=0; j < _data.columns(); j++) {      if (i < tetradMatrix.rows() && j < tetradMatrix.columns()) {        _data.set(i,j,tetradMatrix.get(i,j));      } else {        _data.set(i,j,Double.NaN);      }    }  }  tetradMatrix=_data;}  }
class C{  static Skeleton createSkeleton(Remote object) throws SkeletonNotFoundException {  Class<?> cl;  try {    cl=getRemoteClass(object.getClass());  } catch (  ClassNotFoundException ex) {    throw new SkeletonNotFoundException("object does not implement a remote interface: " + object.getClass().getName());  }  String skelname=cl.getName() + "_Skel";  try {    Class<?> skelcl=Class.forName(skelname,false,cl.getClassLoader());    return (Skeleton)skelcl.newInstance();  } catch (  ClassNotFoundException ex) {    throw new SkeletonNotFoundException("Skeleton class not found: " + skelname,ex);  }catch (  InstantiationException ex) {    throw new SkeletonNotFoundException("Can't create skeleton: " + skelname,ex);  }catch (  IllegalAccessException ex) {    throw new SkeletonNotFoundException("No public constructor: " + skelname,ex);  }catch (  ClassCastException ex) {    throw new SkeletonNotFoundException("Skeleton not of correct class: " + skelname,ex);  }}  }
class C{  public void addJobGroupToNeverDelete(String group){  if (group != null)   jobGroupsToNeverDelete.add(group);}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    workingKey=((KeyParameter)params).getKey();    setKey(workingKey);    return;  }  throw new IllegalArgumentException("invalid parameter passed to RC4 init - " + params.getClass().getName());}  }
class C{  @Override public void drawRadialGridLines(Graphics2D g2,PolarPlot plot,ValueAxis radialAxis,List ticks,Rectangle2D dataArea){  ParamChecks.nullNotPermitted(radialAxis,"radialAxis");  g2.setFont(radialAxis.getTickLabelFont());  g2.setPaint(plot.getRadiusGridlinePaint());  g2.setStroke(plot.getRadiusGridlineStroke());  double centerValue;  if (radialAxis.isInverted()) {    centerValue=radialAxis.getUpperBound();  } else {    centerValue=radialAxis.getLowerBound();  }  Point center=plot.translateToJava2D(0,centerValue,radialAxis,dataArea);  Iterator iterator=ticks.iterator();  while (iterator.hasNext()) {    NumberTick tick=(NumberTick)iterator.next();    double angleDegrees=plot.isCounterClockwise() ? plot.getAngleOffset() : -plot.getAngleOffset();    Point p=plot.translateToJava2D(angleDegrees,tick.getNumber().doubleValue(),radialAxis,dataArea);    int r=p.x - center.x;    int upperLeftX=center.x - r;    int upperLeftY=center.y - r;    int d=2 * r;    Ellipse2D ring=new Ellipse2D.Double(upperLeftX,upperLeftY,d,d);    g2.setPaint(plot.getRadiusGridlinePaint());    g2.draw(ring);  }}  }
class C{  public static void checkSettingsLoadSaveFailure(){  String msg=null;  if (FrostWireUtils.hasSettingsLoadSaveFailures()) {    msg=I18n.tr("FrostWire has encountered problems in managing your settings.  Your settings changes may not be saved on shutdown.");    FrostWireUtils.resetSettingsLoadSaveFailures();  } else   if (ResourceManager.hasLoadFailure()) {    msg=I18n.tr("FrostWire has encountered problems in loading your settings.  FrostWire will attempt to use the default values; however, may behave unexpectedly.");    ResourceManager.resetLoadFailure();  }  if (msg != null) {    NotifyUserProxy.instance().showMessage(new Notification(msg));  }}  }
class C{  public boolean equals(RatTermVec other){  if (other.size() != this.size()) {    return false;  }  for (int i=0; i < this.size(); i++) {    if (!this.get(i).equals(other.get(i))) {      return false;    }  }  return true;}  }
class C{  @LargeTest public void testThumbnailListH264WVGAWithStartGreaterEnd() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_800x480_15fps_512kbps_AACLC_24KHz_38Kbps_s_1_17.mp4";  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final int tnCount=10;  boolean flagForException=false;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=(mediaVideoItem.getWidth() / 2);  final int outHeight=(mediaVideoItem.getHeight() / 2);  final long thumbNailStartTime=mediaVideoItem.getDuration() / 2;  final long thumbNailEndTime=thumbNailStartTime - 1000;  try {    mediaVideoItem.getThumbnailList(outWidth,outHeight,thumbNailStartTime,thumbNailEndTime,tnCount);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Thumbnail Extraction where start time > end time",flagForException);}  }
class C{  public static double[] plus(double[] v1,double v){  double[] array=new double[v1.length];  for (int i=0; i < v1.length; i++)   array[i]=v1[i] + v;  return array;}  }
class C{  public ValueUnitPair(Value value,Unit unit){  setValue(value);  setUnit(unit);}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  private Rule(final String uri,final String method,T target){  this(uri,singletonList(method),target);}  }
class C{  @Override public boolean validateStorageProviderConnection(String ipAddress,Integer portNumber){  boolean connectionValid;  try {    StringBuffer providerId=new StringBuffer(ipAddress).append(HYPHEN_OPERATOR).append(portNumber);    URIQueryResultList providerUriList=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageProviderByProviderIDConstraint(providerId.toString()),providerUriList);    if (providerUriList.iterator().hasNext()) {      StorageProvider provider=_dbClient.queryObject(StorageProvider.class,providerUriList.iterator().next());      VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,provider,_dbClient);      if (client != null) {        client.verifyConnectivity();        _log.info("VPLEX Storage Provider connection at {} is valid.",providerId);        connectionValid=true;      } else {        _log.error("a VplexApiClient could not be created for provider {}.",provider.getLabel());        connectionValid=false;      }    } else {      _log.error("Could not find a VPLEX Storage Provider " + "with address-port {} in ViPR.",providerId);      connectionValid=false;    }  } catch (  Exception ex) {    _log.error("Connection to VPLEX Storage Provider {} is invalid.",ipAddress,ex);    connectionValid=false;  }  return connectionValid;}  }
class C{  protected void onTopic(String channel,String topic,String setBy,long date,boolean changed){}  }
class C{  @Provides public ResourceService resourceService(){  resourceServiceMock=mock(ResourceService.class);  return resourceServiceMock;}  }
class C{  public static <A>MaybeError<A> error(Throwable error){  return new MaybeError<>(false,error);}  }
class C{  public static String createLink(String uri,String label){  return "<a href='" + uri + "'>"+ label+ "</a>";}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Override public String toParsableString(Type declaringType,TypeTuple inputTypes,Type outputType){  return declaringType.getName() + ".<set>(" + field.getName()+ ")";}  }
class C{  public static float calculateHeight(float left,float right,float targetAspectRatio){  final float width=right - left;  final float height=width / targetAspectRatio;  return height;}  }
class C{  public TriggerDefinitionDataException(){}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public void multiplyVector3fByMatrix(Vector3f vector){  if (matrixValid && matrix.length == 9) {    float x=0;    float y=0;    float z=0;    float[] vectorArray=vector.toArray();    if (!colMaj) {      for (int i=0; i < 3; i++) {        int k=i * 3;        x+=this.matrix[k + 0] * vectorArray[i];        y+=this.matrix[k + 1] * vectorArray[i];        z+=this.matrix[k + 2] * vectorArray[i];      }    } else {      for (int i=0; i < 3; i++) {        x+=this.matrix[0 + i] * vectorArray[i];        y+=this.matrix[3 + i] * vectorArray[i];        z+=this.matrix[6 + i] * vectorArray[i];      }    }    vector.setX(x);    vector.setY(y);    vector.setZ(z);  } else   Log.e("matrix","Matrix is invalid, is " + matrix.length + " long, this function expects the internal matrix to be of size 9");}  }
class C{  public PlaneSide testPoint(Vector3 point){  float dist=normal.dot(point) + d;  if (dist == 0)   return PlaneSide.OnPlane; else   if (dist < 0)   return PlaneSide.Back; else   return PlaneSide.Front;}  }
class C{  public ModelFactoryImpl(){  super();}  }
class C{  protected void resetOptions(){  m_trainInstances=null;  m_missing_merge=true;}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  public void remove(GlowSession session){  sessions.remove(session);}  }
class C{  private void zoom(){  if (m_WF_Window_ID <= 0) {    m_WF_Window_ID=MTable.get(m_ctx,MWorkflow.Table_ID).getAD_Window_ID();  }  if (m_WF_Window_ID <= 0) {    throw new AdempiereException("@NotFound@ @AD_Window_ID@");  }  MQuery query=null;  if (m_wf != null)   query=MQuery.getEqualQuery("AD_Workflow_ID",m_wf.getAD_Workflow_ID());  AWindow frame=new AWindow();  if (!frame.initWindow(m_WF_Window_ID,query))   return;  AEnv.addToWindowManager(frame);  AEnv.showCenterScreen(frame);  frame=null;}  }
class C{  public TeXFormula(String s,Map<String,String> map) throws ParseException {  this.jlmXMLMap=map;  this.textStyle=textStyle;  parser=new TeXParser(s,this);  parser.parse();}  }
class C{  public void denyTypeHierarchy(final Class<?> type){  denyPermission(new TypeHierarchyPermission(type));}  }
class C{  public boolean isReadTimedOut(){  return StringUtils.contains(content,"timed out");}  }
class C{  public void createView(int tag,String className,int rootViewTag,ReadableMap props){  ReactShadowNode cssNode=createShadowNode(className);  ReactShadowNode rootNode=mShadowNodeRegistry.getNode(rootViewTag);  cssNode.setReactTag(tag);  cssNode.setViewClassName(className);  cssNode.setRootNode(rootNode);  cssNode.setThemedContext(rootNode.getThemedContext());  mShadowNodeRegistry.addNode(cssNode);  ReactStylesDiffMap styles=null;  if (props != null) {    styles=new ReactStylesDiffMap(props);    cssNode.updateProperties(styles);  }  handleCreateView(cssNode,rootViewTag,styles);}  }
class C{  @Override public String toString(){  return "status: " + getStatus() + ", next Fire = "+ getNextFireTime();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.REACTION_EFFECT__ACTIONS:    getActions().clear();  getActions().addAll((Collection<? extends Expression>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void stopHttpServer(Server httpServer) throws Exception {  httpServer.stop();  httpServer.join();}  }
class C{  public AnimatedPickingGraphMousePlugin(){  this(InputEvent.BUTTON1_MASK | InputEvent.CTRL_MASK);}  }
class C{  public void paint(Graphics g,Shape a){  Shape originalA=a;  a=adjustPaintRegion(a);  Rectangle alloc=(Rectangle)a;  tabBase=alloc.x;  JTextComponent host=(JTextComponent)getContainer();  Highlighter h=host.getHighlighter();  g.setFont(host.getFont());  sel0=host.getSelectionStart();  sel1=host.getSelectionEnd();  unselected=(host.isEnabled()) ? host.getForeground() : host.getDisabledTextColor();  Caret c=host.getCaret();  selected=c.isSelectionVisible() && h != null ? host.getSelectedTextColor() : unselected;  updateMetrics();  Rectangle clip=g.getClipBounds();  int fontHeight=metrics.getHeight();  int heightBelow=(alloc.y + alloc.height) - (clip.y + clip.height);  int heightAbove=clip.y - alloc.y;  int linesBelow, linesAbove, linesTotal;  if (fontHeight > 0) {    linesBelow=Math.max(0,heightBelow / fontHeight);    linesAbove=Math.max(0,heightAbove / fontHeight);    linesTotal=alloc.height / fontHeight;    if (alloc.height % fontHeight != 0) {      linesTotal++;    }  } else {    linesBelow=linesAbove=linesTotal=0;  }  Rectangle lineArea=lineToRect(a,linesAbove);  int y=lineArea.y + metrics.getAscent();  int x=lineArea.x;  Element map=getElement();  int lineCount=map.getElementCount();  int endLine=Math.min(lineCount,linesTotal - linesBelow);  lineCount--;  LayeredHighlighter dh=(h instanceof LayeredHighlighter) ? (LayeredHighlighter)h : null;  for (int line=linesAbove; line < endLine; line++) {    if (dh != null) {      Element lineElement=map.getElement(line);      if (line == lineCount) {        dh.paintLayeredHighlights(g,lineElement.getStartOffset(),lineElement.getEndOffset(),originalA,host,this);      } else {        dh.paintLayeredHighlights(g,lineElement.getStartOffset(),lineElement.getEndOffset() - 1,originalA,host,this);      }    }    drawLine(line,g,x,y);    y+=fontHeight;    if (line == 0) {      x-=firstLineOffset;    }  }}  }
class C{  private void initCachingHttpHeadersFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering Caching HTTP Headers Filter");  FilterRegistration.Dynamic cachingHttpHeadersFilter=servletContext.addFilter("cachingHttpHeadersFilter",new CachingHttpHeadersFilter(env));  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/assets/*");  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/scripts/*");  cachingHttpHeadersFilter.setAsyncSupported(true);}  }
class C{  public boolean isSetStrings(){  return this.strings != null;}  }
class C{  public static void main(String[] args,String serverIni) throws FileNotFoundException {  filename=serverIni;  main(args);}  }
class C{  public MarkedProject(IN4JSProject project){  this.project=project;}  }
class C{  @LargeTest public void testKeyScrolling(){  Instrumentation inst=getInstrumentation();  int firstVisiblePosition=arrowScroll(inst);  inst.sendCharacterSync(KeyEvent.KEYCODE_BACK);  inst.waitForIdleSync();  assertTrue("List changed to touch mode",!mListView.isInTouchMode());  assertTrue("List did not preserve scroll position",firstVisiblePosition == mListView.getFirstVisiblePosition());}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4){  return construct(e1,e2,e3,e4);}  }
class C{  private static boolean backtrackForMonotoneWithPreviousFast(Featurizable<IString,String> f){  int indexPreviousForeign=fStart(f) - 1;  if (indexPreviousForeign < 0) {    return (f.prior == null);  } else   if (f.prior == null) {    return false;  }  CoverageSet fCoverage=f.derivation.sourceCoverage;  if (!fCoverage.get(indexPreviousForeign)) {    return false;  }  Featurizable<IString,String> tmp_f=f.prior;  int indexLeftmostForeign=indexPreviousForeign;  while (fEnd(tmp_f) != indexPreviousForeign) {    int fStart=fStart(tmp_f);    if (fStart > indexPreviousForeign) {      return false;    }    if (fStart < indexLeftmostForeign)     indexLeftmostForeign=fStart;    tmp_f=tmp_f.prior;    if (tmp_f == null)     return false;  }  for (int i=indexLeftmostForeign; i <= indexPreviousForeign; ++i) {    if (!fCoverage.get(i))     return false;  }  return true;}  }
class C{  public IdentityWrapper(Object object){  this.object=object;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:31.601 -0500",hash_original_method="785A21683DF02537913C025154B975A6",hash_generated_method="A5F7E4770C244FAC926968A50E89781D") public static boolean isEtwsPopupAlert(int messageCode){  return (messageCode & MESSAGE_CODE_ETWS_ACTIVATE_POPUP) != 0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public LetterboxingViewport(){  this(GdxUtilities.isMobile() ? 160f : 96f);}  }
class C{  @Override public void clear(){  super.clear();  header.before=header.after=header;}  }
class C{  public NSAPRecord(Name name,int dclass,long ttl,String address){  super(name,Type.NSAP,dclass,ttl);  this.address=checkAndConvertAddress(address);  if (this.address == null) {    throw new IllegalArgumentException("invalid NSAP address " + address);  }}  }
class C{  public void add(E element){  append(element);}  }
class C{  public static boolean is50OrHigherJRE(IJavaProject project) throws CoreException {  return true;}  }
class C{  public boolean isChangeLog(){  Object oo=get_Value(COLUMNNAME_IsChangeLog);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean sameAs(Region other){  if (other == null) {    return false;  }  if (!this.getName().equals(other.getName())) {    throw new RuntimeException(LocalizedStrings.RegionCreation_REGION_NAMES_DIFFER_THIS_0_OTHER_1.toLocalizedString(new Object[]{this.getName(),other.getName()}));  }  if (!this.attrs.sameAs(other.getAttributes())) {    throw new RuntimeException(LocalizedStrings.RegionCreation_REGION_ATTRIBUTES_DIFFER_THIS_0_OTHER_1.toLocalizedString(new Object[]{this.attrs,other.getAttributes()}));  }  Collection myEntries=this.basicEntries(false);  Collection otherEntries=((LocalRegion)other).basicEntries(false);  if (myEntries.size() != otherEntries.size()) {    return false;  }  for (Iterator iter=myEntries.iterator(); iter.hasNext(); ) {    Region.Entry myEntry=(Region.Entry)iter.next();    Region.Entry otherEntry=other.getEntry(myEntry.getKey());    if (otherEntry == null) {      return false;    } else     if (!myEntry.getValue().equals(otherEntry.getValue())) {      return false;    }  }  return true;}  }
class C{  public static TypeValue defineTypeValue(Context cx,Builder builder,QName name,int type_id){  String fullname=name.toString();  TypeValue type=cx.userDefined(fullname);  if (type == null) {    type=new TypeValue(cx,builder,name,type_id);    cx.setUserDefined(fullname,type);    type.resolved=true;  } else {    type.resolved=true;    type.clearInstance(cx,builder,null,fullname.intern(),false);    type.type_id=type_id;    type.name=name;    type.type=null;    type.baseclass=null;    if (type.default_typeinfo != null) {      type.default_typeinfo.clearInstance();    }    if (type.explicit_nonnullable_typeinfo != null) {      type.explicit_nonnullable_typeinfo.clearInstance();    }    if (type.explicit_nullable_typeinfo != null) {      type.explicit_nullable_typeinfo.clearInstance();    }  }  return type;}  }
class C{  public void testIPv6() throws Exception {  if (!versionMeetsMinimum(5,6)) {    return;  }  Properties connProps=getPropertiesFromTestsuiteUrl();  String host="::1";  int port=Integer.parseInt(connProps.getProperty(NonRegisteringDriver.PORT_PROPERTY_KEY));  String username=connProps.getProperty(NonRegisteringDriver.USER_PROPERTY_KEY);  String ipv6Url=String.format("jdbc:mysql://address=(protocol=tcp)(host=%s)(port=%d)",host,port);  Connection testConn=null;  Statement testStmt=null;  ResultSet testRS=null;  connProps=getHostFreePropertiesFromTestsuiteUrl();  testConn=DriverManager.getConnection(ipv6Url,connProps);  testStmt=testConn.createStatement();  testRS=testStmt.executeQuery("SELECT USER()");  assertTrue(testRS.next());  assertTrue(testRS.getString(1).startsWith(username));  testRS.close();  testStmt.close();  testConn.close();}  }
class C{  public void addDataToStore(Object[] row) throws CarbonDataWriterException {  dataRows.add(row);  this.entryCount++;  if (this.entryCount == this.blockletSize) {    try {      semaphore.acquire();      producerExecutorServiceTaskList.add(producerExecutorService.submit(new Producer(blockletDataHolder,dataRows,++writerTaskSequenceCounter)));      blockletProcessingCount.incrementAndGet();      processedDataCount+=entryCount;      LOGGER.info("Total Number Of records added to store: " + processedDataCount);      dataRows=new ArrayList<>(this.blockletSize);      this.entryCount=0;    } catch (    InterruptedException e) {      LOGGER.error(e,e.getMessage());      throw new CarbonDataWriterException(e.getMessage());    }  }}  }
class C{  protected UnManagedFileExportRule checkUnManagedFsExportRuleExistsInDB(DbClient dbClient,String fsExportRuleNativeId){  UnManagedFileExportRule unManagedExportRule=null;  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileExporRuleNativeGUIdConstraint(fsExportRuleNativeId),result);  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI unExportRuleURI=iter.next();    unManagedExportRule=dbClient.queryObject(UnManagedFileExportRule.class,unExportRuleURI);    return unManagedExportRule;  }  return unManagedExportRule;}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  public int readBits(final JBBPBitNumber numOfBitsToRead) throws IOException {  int result;  final int numOfBitsAsNumber=numOfBitsToRead.getBitNumber();  if (this.bitsInBuffer == 0 && numOfBitsAsNumber == 8) {    result=this.readByteFromStream();    if (result >= 0) {      this.byteCounter++;    }    return result;  } else {    result=0;    if (numOfBitsAsNumber == this.bitsInBuffer) {      result=this.bitBuffer;      this.bitBuffer=0;      this.bitsInBuffer=0;      this.byteCounter++;      return result;    }    int i=numOfBitsAsNumber;    int theBitBuffer=this.bitBuffer;    int theBitBufferCounter=this.bitsInBuffer;    final boolean doIncCounter=theBitBufferCounter != 0;    while (i > 0) {      if (theBitBufferCounter == 0) {        if (doIncCounter) {          this.byteCounter++;        }        final int nextByte=this.readByteFromStream();        if (nextByte < 0) {          if (i == numOfBitsAsNumber) {            return nextByte;          } else {            break;          }        } else {          theBitBuffer=nextByte;          theBitBufferCounter=8;        }      }      result=(result << 1) | (theBitBuffer & 1);      theBitBuffer>>=1;      theBitBufferCounter--;      i--;    }    this.bitBuffer=theBitBuffer;    this.bitsInBuffer=theBitBufferCounter;    return JBBPUtils.reverseBitsInByte(JBBPBitNumber.decode(numOfBitsAsNumber - i),(byte)result) & 0xFF;  }}  }
class C{  private void verifyDeleteExportRule(List<ExportRule> listExportRule) throws Exception {  if (listExportRule == null) {    return;  }  _log.info("{} Export Rule(s) Requested to Delete {} - Iterating ..",listExportRule.size());  for (  ExportRule exportRule : listExportRule) {    exportRule.setIsToProceed(true,ExportOperationErrorType.NO_ERROR);    _log.info("Verifying Export Rule {}",exportRule.toString());    scanForDuplicateSecFlavor(exportRule);    if (!exportRule.isToProceed()) {      _log.info("Same Security Flavor found across the exports {}",exportRule.toString());      break;    }    FileExportRule rule=validateInputAndQueryDB(exportRule);    if (rule != null) {      exportRule.setIsToProceed(true,ExportOperationErrorType.NO_ERROR);    } else {      _log.info("Export not found to delete");      exportRule.setIsToProceed(false,ExportOperationErrorType.EXPORT_NOT_FOUND);    }  }}  }
class C{  public void none() throws ParseException {  align=SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_NONE;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double slope;  double z, z2;  int c, i;  int progress;  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX={1,1,1,0,-1,-1,-1,0};  int row, col, x, y;  double dist;  double minSlope=0;  double minZChange=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=true;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          minSlope=99999999;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            dist=gridLengths[c];            z2=DEM.getValue(y,x);            if (z2 != noData) {              slope=(z - z2) / dist;              if (slope >= 0 && slope < minSlope) {                minSlope=slope;                minZChange=z - z2;              }            }          }          if (minSlope < 99999999) {            output.setValue(row,col,minZChange);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  final void constructSubst(Vector instanceeDecls,SymbolTable instancerST,TreeNode treeNode) throws AbortException {  Vector vtemp=new Vector();  for (int i=0; i < instanceeDecls.size(); i++) {    OpDeclNode decl=(OpDeclNode)instanceeDecls.elementAt(i);    SymbolNode symb=instancerST.resolveSymbol(decl.getName());    if (symb != null) {      if (decl.getKind() == VariableDeclKind || (decl.getKind() == ConstantDeclKind && decl.getArity() == 0)) {        vtemp.addElement(new Subst(decl,new OpApplNode(symb,new ExprOrOpArgNode[0],treeNode,instantiatingModule),null,true));      } else {        vtemp.addElement(new Subst(decl,new OpArgNode(symb,treeNode,instantiatingModule),null,true));      }    }  }  this.substs=new Subst[vtemp.size()];  for (int i=0; i < vtemp.size(); i++) {    this.substs[i]=(Subst)vtemp.elementAt(i);  }}  }
class C{  public static int readU16bit(byte[] code,int index){  return ((code[index] & 0xff) << 8) | (code[index + 1] & 0xff);}  }
class C{  public BillingApplicationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public int indexOfComponent(Component component){  for (int i=0; i < getTabCount(); i++) {    Component c=getComponentAt(i);    if ((c != null && c.equals(component)) || (c == null && c == component)) {      return i;    }  }  return -1;}  }
class C{  private void addError(String qName,String message){  throw new SaaSSystemException(message + " caused by attribute '" + qName+ "'.");}  }
class C{  public static void waitForCondition(String condition){  BValue cond=getCond(condition);synchronized (cond) {    if (!cond.v) {      try {        cond.wait();      } catch (      InterruptedException e) {      }    }  }}  }
class C{  private TestRichNode(UUID nodeId,int replicas){  this.nodeId=nodeId;  this.replicas=replicas;}  }
class C{  public MessageFormatException(String description,int mid,int code,boolean confirmable){  super(description);  this.mid=mid;  this.code=code;  this.confirmable=confirmable;}  }
class C{  public GuacamoleTunnel createTunnel(TunnelRequest request) throws GuacamoleException {  String authToken=request.getAuthenticationToken();  String id=request.getIdentifier();  TunnelRequest.Type type=request.getType();  String authProviderIdentifier=request.getAuthenticationProviderIdentifier();  GuacamoleClientInformation info=getClientInformation(request);  GuacamoleSession session=authenticationService.getGuacamoleSession(authToken);  UserContext userContext=session.getUserContext(authProviderIdentifier);  try {    GuacamoleTunnel tunnel=createConnectedTunnel(userContext,type,id,info);    return createAssociatedTunnel(tunnel,authToken,session,userContext,type,id);  } catch (  GuacamoleUnauthorizedException e) {    if (authenticationService.destroyGuacamoleSession(authToken))     logger.debug("Implicitly invalidated session for token \"{}\".",authToken);    throw e;  }}  }
class C{  public void testConstructorSignBytesNegative3(){  byte aBytes[]={-12,56,100};  int aSign=-1;  byte rBytes[]={-1,11,-57,-100};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public MsrpSession createMsrpClientSession(String remoteHost,int remotePort,String remoteMsrpPath,MsrpEventListener listener,String fingerprint){  if (logger.isActivated()) {    logger.info("Create MSRP client end point at " + remoteHost + ":"+ remotePort);  }  mMsrpSession=new MsrpSession(mRcsSettings);  mMsrpSession.setFrom(getLocalMsrpPath());  mMsrpSession.setTo(remoteMsrpPath);  MsrpConnection connection=new MsrpClientConnection(mMsrpSession,remoteHost,remotePort,mSecured,fingerprint);  mMsrpSession.setConnection(connection);  mMsrpSession.addMsrpEventListener(listener);  return mMsrpSession;}  }
class C{  public ISelectPiece select(ExpressionAST expression) throws SQLScopeException, ScopeException {  ISelectPiece selectPiece=super.select(expression);  this.insert.setInsertFromSelect(getStatement());  return selectPiece;}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length == 0) {    System.err.println("Usage: java tools.SwfxPrinter [-encode] [-asm] [-abc] [-showbytecode] [-noactions] [-showdebugsource] [-showoffset] [-noglyphs] [-external] [-save file.swf] [-nofunctions] [-out file.swfx] file1.swf ...");    System.exit(1);  }  int index=0;  PrintWriter out=null;  String outfile=null;  while ((index < args.length) && (args[index].startsWith("-"))) {    if (args[index].equals("-encode")) {      encodeOption=true;      ++index;    } else     if (args[index].equals("-save")) {      ++index;      saveOption=true;      outfile=args[index++];    } else     if (args[index].equals("-decompile")) {      decompileOption=true;      ++index;    } else     if (args[index].equals("-nofunctions")) {      defuncOption=false;      ++index;    } else     if (args[index].equals("-asm")) {      decompileOption=false;      ++index;    } else     if (args[index].equals("-abc")) {      abcOption=true;      ++index;    } else     if (args[index].equals("-noactions")) {      showActionsOption=false;      ++index;    } else     if (args[index].equals("-showoffset")) {      showOffsetOption=true;      ++index;    } else     if (args[index].equals("-showbytecode")) {      showByteCodeOption=true;      ++index;    } else     if (args[index].equals("-showdebugsource")) {      showDebugSourceOption=true;      ++index;    } else     if (args[index].equals("-noglyphs")) {      glyphsOption=false;      ++index;    } else     if (args[index].equals("-out")) {      if (index + 1 == args.length) {        System.err.println("-out requires a filename or - for stdout");        System.exit(1);      }      if (!args[index + 1].equals("-")) {        outfile=args[index + 1];        out=new PrintWriter(new FileOutputStream(outfile,false));      }      index+=2;    } else     if (args[index].equals("-external")) {      externalOption=true;      ++index;    } else     if (args[index].equalsIgnoreCase("-tabbedGlyphs")) {      tabbedGlyphsOption=true;      ++index;    } else {      System.err.println("unknown argument " + args[index]);      ++index;    }  }  if (out == null)   out=new PrintWriter(System.out,true);  File f=new File(args[index]);  URL[] urls;  if (!f.exists()) {    urls=new URL[]{new URL(args[index])};  } else {    if (f.isDirectory()) {      File[] list=FileUtils.listFiles(f);      urls=new URL[list.length];      for (int i=0; i < list.length; i++) {        urls[i]=FileUtils.toURL(list[i]);      }    } else {      urls=new URL[]{FileUtils.toURL(f)};    }  }  for (int i=0; i < urls.length; i++) {    try {      URL url=urls[i];      if (saveOption) {        InputStream in=new BufferedInputStream(url.openStream());        try {          OutputStream fileOut=new BufferedOutputStream(new FileOutputStream(outfile));          try {            int c;            while ((c=in.read()) != -1) {              fileOut.write(c);            }          }  finally {            fileOut.close();          }        }  finally {          in.close();        }      }      if (isSwf(url)) {        dumpSwf(out,url,outfile);      } else       if (isZip(url) && !url.toString().endsWith(".abj")) {        dumpZip(out,url,outfile);      } else {        out.println("<!-- Parsing actions from " + url + " -->");        URLConnection connection=url.openConnection();        ActionDecoder actionDecoder=new ActionDecoder(new SwfDecoder(connection.getInputStream(),7));        actionDecoder.setKeepOffsets(true);        ActionList actions=actionDecoder.decode(connection.getContentLength());        SwfxPrinter printer=new SwfxPrinter(out);        printer.decompile=decompileOption;        printer.defunc=defuncOption;        printer.printActions(actions);      }      out.flush();    } catch (    Error e) {      if (Trace.error)       e.printStackTrace();      System.err.println("");      System.err.println("An unrecoverable error occurred.  The given file " + urls[i] + " may not be");      System.err.println("a valid swf.");    }catch (    FileNotFoundException e) {      System.err.println("Error: " + e.getMessage());      System.exit(1);    }  }}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public Bytecode(ConstPool cp,int stacksize,int localvars){  constPool=cp;  maxStack=stacksize;  maxLocals=localvars;  tryblocks=new ExceptionTable(cp);  stackDepth=0;}  }
class C{  public ThumbnailParameter(Dimension thumbnailSize,Region sourceRegion,boolean keepAspectRatio,String outputFormat,String outputFormatType,float outputQuality,int imageType,List<ImageFilter> filters,Resizer resizer,boolean fitWithinDimensions,boolean useExifOrientation){  this(thumbnailSize,Double.NaN,Double.NaN,sourceRegion,keepAspectRatio,outputFormat,outputFormatType,outputQuality,imageType,filters,new FixedResizerFactory(resizer),fitWithinDimensions,useExifOrientation);  validateThumbnailSize();}  }
class C{  @SuppressWarnings("unchecked") private ElementH _smallest(){  ElementH el=new ElementH();  ElementH root=(ElementH)_elements[1];  el.id=root.id;  el.priority=root.priority;  int pIdx;  ElementH last=(ElementH)_elements[_n];  _n--;  root.id=last.id;  root.priority=last.priority;  pIdx=1;  int child=pIdx * 2;  while (child <= _n) {    ElementH sm=(ElementH)_elements[child];    if (child < _n) {      if (sm.priority.compareTo((E)((ElementH)_elements[child + 1]).priority) > 0) {        sm=(ElementH)_elements[++child];      }    }    if (last.priority.compareTo((E)sm.priority) <= 0) {      break;    }    ElementH eIdx=(ElementH)_elements[pIdx];    eIdx.id=sm.id;    eIdx.priority=sm.priority;    _pos[sm.id]=pIdx;    pIdx=child;    child=2 * pIdx;  }  ElementH eIdx=(ElementH)_elements[pIdx];  eIdx.id=last.id;  eIdx.priority=last.priority;  _pos[last.id]=pIdx;  return el;}  }
class C{  public static byte[] hexStringToByteArray(String s){  byte[] b=new byte[s.length() / 2];  for (int i=0; i < b.length; i++) {    int index=i * 2;    int v=Integer.parseInt(s.substring(index,index + 2),16);    b[i]=(byte)v;  }  return b;}  }
class C{  private static List createList(Object obj0,Object obj1,Object obj2){  List list=new ArrayList();  list.add(obj0);  list.add(obj1);  list.add(obj2);  return list;}  }
class C{  static String validateRequest(RPC.CreateOrganizationRequest request){  if (Strings.isNullOrEmpty(request.name)) {    return "name cannot be empty";  }  if (Strings.isNullOrEmpty(request.publicKey)) {    return "publicKey cannot be empty";  }  if (request.adminEncryptedKeys == null || request.adminEncryptedKeys.isEmpty()) {    return "adminEncryptedKeys cannot be empty";  }  if (request.memberGroupKeys == null || request.memberGroupKeys.isEmpty()) {    return "memberGroupKeys cannot be empty";  }  SetView<String> adminsNotInMembers=Sets.difference(request.adminEncryptedKeys.keySet(),request.memberGroupKeys.keySet());  if (!adminsNotInMembers.isEmpty()) {    return "each admin must be a member";  }  return null;}  }
class C{  public static MosaicDefinition createMosaicDefinition(final Account creator,final MosaicId mosaicId,final MosaicProperties properties,final MosaicLevy levy){  return new MosaicDefinition(creator,mosaicId,new MosaicDescriptor("precious vouchers"),properties,levy);}  }
class C{  public PLLexer(String inputString){  setInput(inputString);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double slopeX;  double slopeY;  double val;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  double[] maskX={1,1,1,0,-1,-1,-1,0};  double[] maskY={1,0,-1,-1,-1,0,1,1};  int numPixelsInFilter;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    numPixelsInFilter=8;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          slopeX=0;          slopeY=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            val=inputFile.getValue(y,x);            if (val == noData) {              val=z;            }            slopeX+=val * maskX[a];            slopeY+=val * maskY[a];          }          val=Math.sqrt(slopeX * slopeX + slopeY * slopeY);          outputFile.setValue(row,col,val);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void generateReturnCode(String returnType,CodeVisitor cv){  if (returnType.equals("V")) {    cv.visitInsn(POP);    cv.visitInsn(RETURN);  } else   if (isPrimitive(returnType)) {    int opcode=IRETURN;    String type;    String meth;    if (returnType.equals("B")) {      type="java/lang/Byte";      meth="byteValue";    } else     if (returnType.equals("I")) {      type="java/lang/Integer";      meth="intValue";    } else     if (returnType.equals("Z")) {      type="java/lang/Boolean";      meth="booleanValue";    } else     if (returnType.equals("D")) {      opcode=DRETURN;      type="java/lang/Double";      meth="doubleValue";    } else     if (returnType.equals("F")) {      opcode=FRETURN;      type="java/lang/Float";      meth="floatValue";    } else     if (returnType.equals("J")) {      opcode=LRETURN;      type="java/lang/Long";      meth="longValue";    } else     if (returnType.equals("C")) {      type="java/lang/Character";      meth="charValue";    } else {      type="java/lang/Short";      meth="shortValue";    }    String desc=returnType;    cv.visitTypeInsn(CHECKCAST,type);    cv.visitMethodInsn(INVOKEVIRTUAL,type,meth,"()" + desc);    cv.visitInsn(opcode);  } else {    cv.visitTypeInsn(CHECKCAST,descriptorToClassName(returnType));    cv.visitInsn(ARETURN);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private CaseStruct findImplicitMatch(FacesContext context,String viewId,String fromAction,String outcome,String flowDefiningDocumentId){  String viewIdToTest=outcome;  String currentViewId=viewId;  Map<String,List<String>> parameters=null;  boolean isRedirect=false;  boolean isIncludeViewParams=false;  CaseStruct result=null;  int questionMark=viewIdToTest.indexOf('?');  String queryString;  if (-1 != questionMark) {    int viewIdLen=viewIdToTest.length();    if (viewIdLen <= (questionMark + 1)) {      if (LOGGER.isLoggable(Level.SEVERE)) {        LOGGER.log(Level.SEVERE,"jsf.navigation_invalid_query_string",viewIdToTest);      }      if (development) {        String key;        Object[] params;        key=MessageUtils.NAVIGATION_INVALID_QUERY_STRING_ID;        params=new Object[]{viewIdToTest};        FacesMessage m=MessageUtils.getExceptionMessage(key,params);        m.setSeverity(FacesMessage.SEVERITY_WARN);        context.addMessage(null,m);      }      queryString=null;      viewIdToTest=viewIdToTest.substring(0,questionMark);    } else {      queryString=viewIdToTest.substring(questionMark + 1);      viewIdToTest=viewIdToTest.substring(0,questionMark);      Matcher m=REDIRECT_EQUALS_TRUE.matcher(queryString);      if (m.find()) {        isRedirect=true;        queryString=queryString.replace(m.group(2),"");      }      m=INCLUDE_VIEW_PARAMS_EQUALS_TRUE.matcher(queryString);      if (m.find()) {        isIncludeViewParams=true;        queryString=queryString.replace(m.group(2),"");      }    }    if (queryString != null && queryString.length() > 0) {      Map<String,Object> appMap=context.getExternalContext().getApplicationMap();      String[] queryElements=Util.split(appMap,queryString,"&amp;|&");      for (int i=0, len=queryElements.length; i < len; i++) {        String[] elements=Util.split(appMap,queryElements[i],"=");        if (elements.length == 2) {          String rightHandSide=elements[1];          String sanitized=null != rightHandSide && 2 < rightHandSide.length() ? rightHandSide.trim() : "";          if (sanitized.contains("#{") || sanitized.contains("${")) {            if (LOGGER.isLoggable(Level.INFO)) {              LOGGER.log(Level.INFO,"jsf.navigation_invalid_query_string",rightHandSide);            }            rightHandSide="";          }          if (parameters == null) {            parameters=new LinkedHashMap<>(len / 2,1.0f);            List<String> values=new ArrayList<>(2);            values.add(rightHandSide);            parameters.put(elements[0],values);          } else {            List<String> values=parameters.get(elements[0]);            if (values == null) {              values=new ArrayList<>(2);              parameters.put(elements[0],values);            }            values.add(rightHandSide);          }        }      }    }  }  StringBuilder viewIdBuf=new StringBuilder(viewIdToTest);  if (viewIdToTest.lastIndexOf('.') == -1) {    int idx=currentViewId.lastIndexOf('.');    if (idx != -1) {      viewIdBuf.append(currentViewId.substring(idx));    }  }  if (viewIdToTest.charAt(0) != '/') {    int lastSlash=currentViewId.lastIndexOf('/');    if (lastSlash != -1) {      currentViewId=currentViewId.substring(0,lastSlash + 1);      viewIdBuf.insert(0,currentViewId);    } else {      viewIdBuf.insert(0,"/");    }  }  viewIdToTest=viewIdBuf.toString();  ViewHandler viewHandler=Util.getViewHandler(context);  FlowHandler flowHandler=context.getApplication().getFlowHandler();  Flow currentFlow=null;  Flow newFlow=null;  if (null != flowHandler) {    currentFlow=flowHandler.getCurrentFlow(context);    newFlow=currentFlow;    if (null != currentFlow && null != viewIdToTest && !viewIdToTest.startsWith("/" + currentFlow.getId())) {      if (FlowHandler.NULL_FLOW.equals(flowDefiningDocumentId)) {        newFlow=null;        viewIdToTest=null;      } else {        newFlow=FlowImpl.ABANDONED_FLOW;      }    }  }  if (null != viewIdToTest) {    viewIdToTest=viewHandler.deriveViewId(context,viewIdToTest);  }  if (null == result && null != viewIdToTest) {    result=new CaseStruct();    result.viewId=viewIdToTest;    if (null == newFlow && null == currentFlow && !FlowHandlerImpl.NULL_FLOW.equals(flowDefiningDocumentId)) {      flowDefiningDocumentId=null;    }    result.navCase=new NavigationCase(currentViewId,fromAction,outcome,null,viewIdToTest,flowDefiningDocumentId,parameters,isRedirect,isIncludeViewParams);  }  if (null != result) {    result.currentFlow=currentFlow;    result.newFlow=newFlow;  }  return result;}  }
class C{  static String cosNameToInsString(NameComponent[] cname){  StringBuffer str=new StringBuffer();  for (int i=0; i < cname.length; i++) {    if (i > 0) {      str.append(compSeparator);    }    str.append(stringifyComponent(cname[i]));  }  return str.toString();}  }
class C{  public static void makeCastlingMove(ClassicGame game,Move move,int initialKingFile,int initialShortRookFile,int initialLongRookFile){  int kingFromSquare=move.getColor() == WHITE ? getSquare(0,initialKingFile) : getSquare(7,initialKingFile);  long kingFromBB=getBitboard(kingFromSquare);  long kingToBB, rookFromBB, rookToBB;  int rookFromSquare;  if (move.getColor() == WHITE) {    if (move.getMoveCharacteristic() == Move.SHORT_CASTLING_CHARACTERISTIC) {      rookFromSquare=getSquare(0,initialShortRookFile);      kingToBB=G1;      rookFromBB=getBitboard(rookFromSquare);      rookToBB=F1;      updateZobristCastle(game,WHITE,kingFromSquare,rookFromSquare,SQUARE_G1,SQUARE_F1);    } else {      rookFromSquare=getSquare(0,initialLongRookFile);      kingToBB=C1;      rookFromBB=getBitboard(rookFromSquare);      rookToBB=D1;      updateZobristCastle(game,WHITE,kingFromSquare,rookFromSquare,SQUARE_C1,SQUARE_D1);    }  } else {    if (move.getMoveCharacteristic() == Move.SHORT_CASTLING_CHARACTERISTIC) {      rookFromSquare=getSquare(7,initialShortRookFile);      kingToBB=G8;      rookFromBB=getBitboard(rookFromSquare);      rookToBB=F8;      updateZobristCastle(game,BLACK,kingFromSquare,rookFromSquare,SQUARE_G8,SQUARE_F8);    } else {      rookFromSquare=getSquare(7,initialLongRookFile);      kingToBB=C8;      rookFromBB=getBitboard(rookFromSquare);      rookToBB=D8;      updateZobristCastle(game,BLACK,kingFromSquare,rookFromSquare,SQUARE_C8,SQUARE_D8);    }  }  if (kingToBB != kingFromBB) {    long kingFromTo=kingToBB | kingFromBB;    game.setPiece(bitscanForward(kingToBB),KING);    game.setPiece(kingFromSquare,EMPTY);    game.xor(move.getColor(),KING,kingFromTo);    game.xor(move.getColor(),kingFromTo);    game.setOccupiedBB(game.getOccupiedBB() ^ kingFromTo);    game.setEmptyBB(game.getEmptyBB() ^ kingFromTo);  }  if (rookFromBB != rookToBB) {    long rookFromTo=rookToBB | rookFromBB;    game.setPiece(bitscanForward(rookToBB),ROOK);    if (rookFromBB != kingToBB) {      game.setPiece(rookFromSquare,EMPTY);    }    game.xor(move.getColor(),ROOK,rookFromTo);    game.xor(move.getColor(),rookFromTo);    game.setOccupiedBB(game.getOccupiedBB() ^ rookFromTo);    game.setEmptyBB(game.getEmptyBB() ^ rookFromTo);  }  game.setCastling(game.getColorToMove(),CASTLE_NONE);  game.setEpSquare(EMPTY_SQUARE);}  }
class C{  @Override public void onRefresh(boolean ignoreETag){  mRefreshListLayout.setRefreshing(false);  if (mOnRefreshListener != null) {    mOnRefreshListener.onRefresh();  }}  }
class C{  public void focusGained(FocusEvent e){}  }
class C{  public void addQuestion(DNSQuestion rec) throws IOException {  MessageOutputStream record=new MessageOutputStream(512,this);  record.writeQuestion(rec);  byte[] byteArray=record.toByteArray();  if (byteArray.length < this.availableSpace()) {    _questions.add(rec);    _questionsBytes.write(byteArray,0,byteArray.length);  } else {    throw new IOException("message full");  }}  }
class C{  private boolean moveIndexFiles(Directory tmpIdxDir,Directory indexDir){  if (LOG.isDebugEnabled()) {    try {      LOG.info("From dir files:" + Arrays.asList(tmpIdxDir.listAll()));      LOG.info("To dir files:" + Arrays.asList(indexDir.listAll()));    } catch (    IOException e) {      throw new RuntimeException(e);    }  }  String segmentsFile=null;  List<String> movedfiles=new ArrayList<>();  for (  Map<String,Object> f : filesDownloaded) {    String fname=(String)f.get(NAME);    if (fname.startsWith("segments_")) {      segmentsFile=fname;      continue;    }    if (!moveAFile(tmpIdxDir,indexDir,fname,movedfiles))     return false;    movedfiles.add(fname);  }  if (segmentsFile != null) {    if (!moveAFile(tmpIdxDir,indexDir,segmentsFile,movedfiles))     return false;  }  return true;}  }
class C{  private void createItemTable(){  itemTable=new JTable(controller.getConfigErrors());  itemTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  itemScrollPane=new JScrollPane(itemTable);  itemScrollPane.setBounds(10,10,470,180);  this.add(itemScrollPane);}  }
