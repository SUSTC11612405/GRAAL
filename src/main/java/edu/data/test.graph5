class C{  public void addHandler(String name,Handler handler){  if (handlers.containsKey(name)) {    throw new IllegalArgumentException("handler \"" + name + "\" is already defined");  }  handlers.put(name,handler);}  }
class C{  public static <T extends Enum<T>>T readEnum(DataInput in,Class<T> enumType) throws IOException {  return T.valueOf(enumType,Text.readString(in));}  }
class C{  public boolean isEmpty(){  return _pos == 0;}  }
class C{  public SegmentedReentrantReadWriteLock(int numOfSegments,boolean fair){  if (numOfSegments < 1)   throw new IllegalArgumentException("Illegal argument 'numOfSegments' - cannot be less than 1.");  this._numOfSegments=numOfSegments;  this._locks=new ReadWriteLock[numOfSegments];  this._readLocks=new Lock[numOfSegments];  this._writeLocks=new Lock[numOfSegments];  for (int i=0; i < numOfSegments; i++) {    this._locks[i]=new ReentrantReadWriteLock(fair);    this._readLocks[i]=_locks[i].readLock();    this._writeLocks[i]=_locks[i].writeLock();  }}  }
class C{  public void putSampleColor(String sampleName,Color color){  put(sampleName,SampleAttributeTable.HiddenAttribute.Color,color != null ? color.getRGB() : null);}  }
class C{  private static boolean hasSecurityManager(){  return (System.getSecurityManager() != null);}  }
class C{  static String parseMethodDesc_params(String s){  int i, j;  i=s.indexOf('(');  if (i >= 0) {    j=s.indexOf(')',i + 1);    if (j >= 0) {      return parseDesc(s.substring(i + 1,j),",");    }  }  return "<parse error>";}  }
class C{  private void invalidShellParameter(){  Platform.runLater(null);}  }
class C{  public static FeatureProcessorManager determineBestFeatureProcessorManager(Locale locale){  FeatureProcessorManager mgr=getFeatureProcessorManager(locale);  if (mgr == null) {    Locale lang=new Locale(locale.getLanguage());    mgr=getFeatureProcessorManager(lang);  }  if (mgr == null) {    mgr=getFallbackFeatureProcessorManager();  }  assert mgr != null;  return mgr;}  }
class C{  public static boolean isWellFormedIPv4Address(String address){  int addrLength=address.length();  char testChar;  int numDots=0;  int numDigits=0;  for (int i=0; i < addrLength; i++) {    testChar=address.charAt(i);    if (testChar == '.') {      if ((i > 0 && !isDigit(address.charAt(i - 1))) || (i + 1 < addrLength && !isDigit(address.charAt(i + 1)))) {        return false;      }      numDigits=0;      if (++numDots > 3) {        return false;      }    } else     if (!isDigit(testChar)) {      return false;    } else     if (++numDigits > 3) {      return false;    } else     if (numDigits == 3) {      char first=address.charAt(i - 2);      char second=address.charAt(i - 1);      if (!(first < '2' || (first == '2' && (second < '5' || (second == '5' && testChar <= '5'))))) {        return false;      }    }  }  return (numDots == 3);}  }
class C{  private void drawCurve(Canvas canvas){  mPath.reset();  mPath.moveTo(0,getCurveYStart());  mPath.lineTo(getCurveXStart(),getCurveYStart());  mPath.quadTo(getCurveTargetPointX(),getCurveTargetPointY(),getCurveXEnd(),getCurveYEnd());  mPath.lineTo(getCurveXEnd(),canvas.getWidth());  mPath.lineTo(canvas.getWidth(),canvas.getHeight());  mPath.lineTo(0,canvas.getHeight());  mPath.close();  canvas.clipPath(mPath,Region.Op.DIFFERENCE);}  }
class C{  public JForcePanel(ForceSimulator fsim){  this.fsim=fsim;  this.setBackground(Color.WHITE);  initUI();}  }
class C{  public CannotCommitException(){  super();}  }
class C{  public static void registerVoice(Voice voice){  Log.d(Mary.LOG,"registerVoice=" + voice);  if (voice == null)   throw new NullPointerException("Cannot register null voice.");  if (!allVoices.contains(voice)) {    Log.i(Mary.LOG,"Registering voice `" + voice.getName() + "': "+ voice.gender()+ ", locale "+ voice.getLocale());    allVoices.add(voice);    try {      Log.d(Mary.LOG,"FROM registerVoice ... ");      FreeTTSVoices.load(voice);    } catch (    NoClassDefFoundError err) {      Log.d("ooooooupsss",err.getMessage());    }  }  checkIfDefaultVoice(voice);}  }
class C{  public Color(Color color){  set(color);}  }
class C{  @Override public boolean onTouch(final View v,final MotionEvent event){  if (!lollipopAndAbove()) switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    gradientDrawable=new GradientDrawable();  gradientDrawable.setShape(GradientDrawable.OVAL);gradientDrawable.setSize(mOriginalThumbHeight / 2,mOriginalThumbHeight / 2);gradientDrawable.setColor(mIsEnabled ? mThumbColor : Color.LTGRAY);gradientDrawable.setDither(true);gradientDrawable.setAlpha(mThumbAlpha);setThumb(gradientDrawable);break;case MotionEvent.ACTION_UP:gradientDrawable=new GradientDrawable();gradientDrawable.setShape(GradientDrawable.OVAL);gradientDrawable.setSize(mOriginalThumbHeight / 3,mOriginalThumbHeight / 3);gradientDrawable.setColor(mIsEnabled ? mThumbColor : Color.LTGRAY);gradientDrawable.setDither(true);gradientDrawable.setAlpha(mThumbAlpha);setThumb(gradientDrawable);break;}return false;}  }
class C{  public Popup(Context context){  init(context);}  }
class C{  public static int compareBytes(byte[] b1,int s1,int l1,byte[] b2,int s2,int l2){  return WritableComparator.compareBytes(b1,s1,l1,b2,s2,l2);}  }
class C{  public final TObjectType filter(TObjectType obj){  return obj;}  }
class C{  public final void testOpenOutputStream(){  FallbackFileController fFileController=new FallbackFileController(PATH);  try {    fFileController.openFallbackOutputStream();  } catch (  DataFallbackException e) {    fail("The OutputStream could not be opened");  }  assertNotNull(fFileController.getOutput());}  }
class C{  public static <T extends Object>Republisher<T> createRepublisher(Publisher<T> publisher,String eventName){  return new RepublisherImpl<T>(publisher,eventName);}  }
class C{  private static double toDoublePow2(long m,int n){  assert m >= 0;  if (m == 0)   return 0.0;  int bitLength=Long.SIZE - Long.numberOfLeadingZeros(m);  int shift=bitLength - 53;  long exp=1023L + 52 + n+ shift;  if (exp >= 0x7FF)   return Double.POSITIVE_INFINITY;  if (exp <= 0) {    if (exp <= -54)     return 0.0;    return toDoublePow2(m,n + 54) / 18014398509481984L;  }  long bits=(shift > 0) ? (m >> shift) + ((m >> (shift - 1)) & 1) : m << -shift;  if (((bits >> 52) != 1) && (++exp >= 0x7FF))   return Double.POSITIVE_INFINITY;  bits&=0x000fffffffffffffL;  bits|=exp << 52;  return Double.longBitsToDouble(bits);}  }
class C{  private static DrillDownQuery addDrillDowns(long timestampSec,IndexState state,Request r,Query q,Map<String,FieldDef> dynamicFields){  DrillDownQuery ddq=new DrillDownQuery(state.facetsConfig,q);  if (r.hasParam("drillDowns")) {    List<Object> drillDownList=r.getList("drillDowns");    if (!drillDownList.isEmpty()) {      for (      Object o : drillDownList) {        Request fr=(Request)o;        String f=fr.getString("field");        FieldDef fd=dynamicFields.get(f);        if (fd == null) {          fr.fail("field","field \"" + f + "\" was not registered and was not specified as a dynamicField");          fd=null;        }        if (fr.hasParam("query")) {          ddq.add(fd.name,parseQuery(timestampSec,null,state,r.getStruct("query"),fd.name,null,dynamicFields));        } else         if (fr.hasParam("numericRange")) {          Request rr=fr.getStruct("numericRange");          Range range;          if (fd.valueType == FieldDef.FieldValueType.INT || fd.valueType == FieldDef.FieldValueType.LONG) {            range=new LongRange(rr.getString("label"),rr.getLong("min"),rr.getBoolean("minInclusive"),rr.getLong("max"),rr.getBoolean("maxInclusive"));          } else           if (fd.valueType == FieldDef.FieldValueType.FLOAT || fd.valueType == FieldDef.FieldValueType.DOUBLE || fd.valueType == FieldDef.FieldValueType.VIRTUAL) {            range=new DoubleRange(rr.getString("label"),rr.getDouble("min"),rr.getBoolean("minInclusive"),rr.getDouble("max"),rr.getBoolean("maxInclusive"));          } else {            fr.fail("numericRange","field \"" + fd.name + "\" is not numeric");            range=null;          }          ValueSource valueSource;          if (fd.valueSource == null) {            if (fd.valueType == FieldDef.FieldValueType.INT) {              valueSource=new IntFieldSource(fd.name);            } else             if (fd.valueType == FieldDef.FieldValueType.LONG) {              valueSource=new LongFieldSource(fd.name);            } else             if (fd.valueType == FieldDef.FieldValueType.DOUBLE) {              valueSource=new DoubleFieldSource(fd.name);            } else             if (fd.valueType == FieldDef.FieldValueType.FLOAT) {              valueSource=new FloatFieldSource(fd.name);            } else {              fr.fail("numericRange","currently only supported for virtual and numeric fields");              valueSource=null;            }          } else {            valueSource=fd.valueSource;          }          ddq.add(fd.name,range.getQuery(null,valueSource));        } else {          String[] path;          if (fr.isString("value")) {            path=new String[]{fr.getString("value")};          } else {            List<Object> values=fr.getList("value");            path=new String[values.size()];            for (int i=0; i < path.length; i++) {              path[i]=(String)values.get(i);            }          }          ddq.add(fd.name,path);        }      }    }  }  return ddq;}  }
class C{  public RMA3File(String fileName,String mode) throws IOException {  this.fileName=fileName;  this.reader=new InputOutputReaderWriter(fileName,mode);  fileHeader=new FileHeaderRMA3();  try {    fileHeader.read(reader,0L);  } catch (  IOException ex) {    System.err.println("File name: " + fileName);    throw ex;  }  fileFooter=new FileFooterRMA3();  reader.seek(reader.length() - 8L);  long footerPosition=reader.readLong();  fileFooter.read(reader,footerPosition);  matchFooter=new MatchFooterRMA3();  matchFooter.read(reader,fileFooter.getMatchesFooter());  classificationsFooter=new ClassificationsFooterRMA3();  classificationsFooter.read(reader,fileFooter.getClassificationsFooter());  auxBlocksFooter=new AuxBlocksFooterRMA3();  auxBlocksFooter.read(reader,fileFooter.getAuxFooter());}  }
class C{  public void rotateY(double theta){  Matrix3D tmp=new Matrix3D();  double c=Math.cos(theta);  double s=Math.sin(theta);  tmp.set(2,2,c);  tmp.set(2,0,-s);  tmp.set(0,2,s);  tmp.set(0,0,c);  preMultiply(tmp);}  }
class C{  public AirMapPowerPlantProperties(JSONObject propertiesJson){  constructFromJson(propertiesJson);}  }
class C{  public void normalizeToSum(){  double dMax=0;  Iterator iValIter=hDistro.values().iterator();  while (iValIter.hasNext()) {    dMax+=(Double)iValIter.next();  }  Iterator<TKeyType> iKeyIter=hDistro.keySet().iterator();  while (iKeyIter.hasNext()) {    TKeyType oKey=iKeyIter.next();    Double dVal=(Double)hDistro.get(oKey);    dVal/=dMax;    hDistro.put(oKey,dVal);  }}  }
class C{  public VideoReorderAlbumsQuery reorderAlbums(UserActor actor,int albumId){  return new VideoReorderAlbumsQuery(getClient(),actor,albumId);}  }
class C{  public DocumentWordHistogram(){  MinSize=1;  MaxSize=2;}  }
class C{  public CatalogException(int type,String message){  super(message);  this.exceptionType=type;  this.exception=null;}  }
class C{  public void write(IOutputWriter writer) throws IOException {  writer.writeInt(RMA6File.MAGIC_NUMBER);  writer.writeInt(RMA6File.VERSION);  writer.writeInt(RMA6File.MINOR_VERSION);  writer.writeString(creator);  if (creationDate == 0)   creationDate=System.currentTimeMillis();  writer.writeLong(creationDate);  writer.writeString(blastMode.toString());  writer.write(pairedReads ? 1 : 0);  writer.writeInt(matchClassNames.length);  for (  String name : matchClassNames)   writer.writeString(name);}  }
class C{  static public void syncFormattingFromViewer2Summary(ClassificationViewer classificationViewer,DataTable table){  final String classificationName=classificationViewer.getClassName();  if (classificationViewer.getDirtyNodeIds().size() > 0) {    StringBuilder buf=new StringBuilder();    for (    Integer fviewerId : classificationViewer.getDirtyNodeIds()) {      try {        Node v=classificationViewer.getANode(fviewerId);        if (v != null) {          String format=classificationViewer.getNV(v).toString(false);          buf.append(fviewerId).append(":").append(format);        }      } catch (      NotOwnerException ex) {      }    }    table.setNodeFormats(classificationName,buf.toString());  } else   table.setNodeFormats(classificationName,null);  if (classificationViewer.getDirtyEdgeIds().size() > 0) {    StringBuilder buf=new StringBuilder();    for (    Pair<Integer,Integer> pair : classificationViewer.getDirtyEdgeIds()) {      Edge e=null;      Set<Node> nodes=classificationViewer.getNodes(pair.getFirst());      if (nodes != null) {        for (        Node v : nodes) {          for (          Node w : classificationViewer.getNodes(pair.getSecond())) {            e=v.getCommonEdge(w);            if (e != null)             break;          }          if (e != null)           break;        }      }      if (e != null) {        String format=classificationViewer.getEV(e).toString(false);        buf.append(pair.getFirst()).append(",").append(pair.getSecond()).append(":").append(format);      }    }    table.setEdgeFormats(classificationName,buf.toString());  } else   table.setEdgeFormats(classificationName,null);  table.setNodeStyle(classificationName,classificationViewer.getNodeDrawer().getStyle().toString());  Set<Integer> collapsed=new HashSet<>();  collapsed.addAll(classificationViewer.getCollapsedIds());  if (collapsed.size() == 0)   collapsed.add(-1);  table.setCollapsed(classificationName,collapsed);}  }
class C{  public void exit(Context context){  exit(context,true);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SUBMIT_GM_PETITION_FAILED_ALREADY_SUBMITTED(String value0){  return new SM_SYSTEM_MESSAGE(1300549,value0);}  }
class C{  public static String encodeLines(byte[] in){  return encodeLines(in,0,in.length,76,systemLineSeparator);}  }
class C{  public static double mglsadf(double x,double b[],int m,double a,int n,double d[]){  for (int i=0; i < n; i++)   x=mglsadff(x,b,m,a,d,(i * (m + 1)));  return x;}  }
class C{  private String printXFormat(int x){  String sx=null;  if (x == Integer.MIN_VALUE)   sx="80000000"; else   if (x < 0) {    String t=Integer.toString((~(-x - 1)) ^ Integer.MIN_VALUE,16);switch (t.length()) {case 1:      sx="8000000" + t;    break;case 2:  sx="800000" + t;break;case 3:sx="80000" + t;break;case 4:sx="8000" + t;break;case 5:sx="800" + t;break;case 6:sx="80" + t;break;case 7:sx="8" + t;break;case 8:switch (t.charAt(0)) {case '1':sx="9" + t.substring(1,8);break;case '2':sx="a" + t.substring(1,8);break;case '3':sx="b" + t.substring(1,8);break;case '4':sx="c" + t.substring(1,8);break;case '5':sx="d" + t.substring(1,8);break;case '6':sx="e" + t.substring(1,8);break;case '7':sx="f" + t.substring(1,8);break;}break;}} else sx=Integer.toString(x,16);return printXFormat(sx);}  }
class C{  public synchronized static int insertLuaState(LuaState L){  int i;  for (i=0; i < states.size(); i++) {    LuaState state=(LuaState)states.get(i);    if (state != null) {      if (state.getCPtrPeer() == L.getCPtrPeer())       return i;    }  }  i=getNextStateIndex();  states.set(i,L);  return i;}  }
class C{  public static boolean hasDataType(DataType dataType,DataType[] dataTypes){  for (int i=0; i < dataTypes.length; i++) {    if (dataType.equals(dataTypes[i])) {      return true;    }  }  return false;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public CastExpr fullCopy(){  CastExpr tree=(CastExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  private static double expm1(double x,double hiPrecOut[]){  if (Double.isNaN(x) || x == 0.0) {    return x;  }  if (x <= -1.0 || x >= 1.0) {    double hiPrec[]=new double[2];    exp(x,0.0,hiPrec);    if (x > 0.0) {      return -1.0 + hiPrec[0] + hiPrec[1];    } else {      final double ra=-1.0 + hiPrec[0];      double rb=-(ra + 1.0 - hiPrec[0]);      rb+=hiPrec[1];      return ra + rb;    }  }  double baseA;  double baseB;  double epsilon;  boolean negative=false;  if (x < 0.0) {    x=-x;    negative=true;  }{    int intFrac=(int)(x * 1024.0);    double tempA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;    double tempB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];    double temp=tempA + tempB;    tempB=-(temp - tempA - tempB);    tempA=temp;    temp=tempA * HEX_40000000;    baseA=tempA + temp - temp;    baseB=tempB + (tempA - baseA);    epsilon=x - intFrac / 1024.0;  }  double zb=0.008336750013465571;  zb=zb * epsilon + 0.041666663879186654;  zb=zb * epsilon + 0.16666666666745392;  zb=zb * epsilon + 0.49999999999999994;  zb*=epsilon;  zb*=epsilon;  double za=epsilon;  double temp=za + zb;  zb=-(temp - za - zb);  za=temp;  temp=za * HEX_40000000;  temp=za + temp - temp;  zb+=za - temp;  za=temp;  double ya=za * baseA;  temp=ya + za * baseB;  double yb=-(temp - ya - za * baseB);  ya=temp;  temp=ya + zb * baseA;  yb+=-(temp - ya - zb * baseA);  ya=temp;  temp=ya + zb * baseB;  yb+=-(temp - ya - zb * baseB);  ya=temp;  temp=ya + baseA;  yb+=-(temp - baseA - ya);  ya=temp;  temp=ya + za;  yb+=-(temp - ya - za);  ya=temp;  temp=ya + baseB;  yb+=-(temp - ya - baseB);  ya=temp;  temp=ya + zb;  yb+=-(temp - ya - zb);  ya=temp;  if (negative) {    double denom=1.0 + ya;    double denomr=1.0 / denom;    double denomb=-(denom - 1.0 - ya) + yb;    double ratio=ya * denomr;    temp=ratio * HEX_40000000;    final double ra=ratio + temp - temp;    double rb=ratio - ra;    temp=denom * HEX_40000000;    za=denom + temp - temp;    zb=denom - za;    rb+=(ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;    rb+=yb * denomr;    rb+=-ya * denomb * denomr* denomr;    ya=-ra;    yb=-rb;  }  if (hiPrecOut != null) {    hiPrecOut[0]=ya;    hiPrecOut[1]=yb;  }  return ya + yb;}  }
class C{  public GroupsEditLinkQuery editLink(UserActor actor,int groupId,int linkId){  return new GroupsEditLinkQuery(getClient(),actor,groupId,linkId);}  }
class C{  public static final boolean isValidQName(String prefix,String local,boolean xml11Version){  if (local == null)   return false;  boolean validNCName=false;  if (!xml11Version) {    validNCName=(prefix == null || XMLChar.isValidNCName(prefix)) && XMLChar.isValidNCName(local);  } else {    validNCName=(prefix == null || XML11Char.isXML11ValidNCName(prefix)) && XML11Char.isXML11ValidNCName(local);  }  return validNCName;}  }
class C{  public void constructEntryArrivedPacket(OperationID operationID,IEntryHolder entryHolder,ServerTransaction xtn,boolean notifyListeners,IEntryHolder entryValueToNotify,boolean fromReplication){  super.constructBusPacket(operationID,entryHolder,xtn,0);  _shouldNotifyListeners=notifyListeners;  _entryValueToNotify=entryValueToNotify;  _fromReplication=fromReplication;}  }
class C{  public Builder errorTileUrl(String errorTileUrl){  this.errorTileUrl=errorTileUrl;  return this;}  }
class C{  public DocumentSet(String sBaseDir,double dTrainingPercent){  TrainingPercent=dTrainingPercent;  BaseDir=sBaseDir;  TrainingFiles=new ArrayList();  TestFiles=new ArrayList();  Categories=new ArrayList();}  }
class C{  @Deployment public void testParentActivationOnNonJoiningEnd() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("parentActivationOnNonJoiningEnd");  List<Execution> executionsBefore=runtimeService.createExecutionQuery().list();  assertEquals(3,executionsBefore.size());  List<Task> firstTasks=taskService.createTaskQuery().processInstanceId(processInstance.getId()).list();  assertEquals(2,firstTasks.size());  for (  Task t : firstTasks) {    taskService.complete(t.getId());  }  List<Task> secondTasks=taskService.createTaskQuery().processInstanceId(processInstance.getId()).list();  assertEquals(2,secondTasks.size());  Task task=secondTasks.get(0);  taskService.complete(task.getId());  List<Execution> executionsAfter=runtimeService.createExecutionQuery().list();  assertEquals(2,executionsAfter.size());  Execution execution=null;  for (  Execution e : executionsAfter) {    if (e.getParentId() != null) {      execution=e;    }  }  List<String> activeActivityIds=runtimeService.getActiveActivityIds(execution.getId());  assertEquals(1,activeActivityIds.size());  Task lastTask=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  taskService.complete(lastTask.getId());  assertEquals(0l,runtimeService.createProcessInstanceQuery().active().count());}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  @RequestMapping(value=ClientUris.CONFIG_FETCH,method=RequestMethod.GET) public ConfigItem fetch(@RequestParam("name") String name){  ClientSession client=ClientContext.get();  assert client != null;  Response<Config> configResp=configService.findByName(client.getAppId(),name);  if (!configResp.isSuccess()) {    Logs.error("failed to find config(name={}), cause: {}",name,configResp.getErr());    return null;  }  return ConfigItemFactory.create(configResp.getData());}  }
class C{  void clearStorage(@NonNull Context context){  final File rootDir=new File(getRootDir(context) + File.separator + belvedereConfig.getDirectoryName());  if (rootDir.isDirectory()) {    clearDirectory(rootDir);  }}  }
class C{  public Builder considerExifParams(boolean considerExifParams){  this.considerExifParams=considerExifParams;  return this;}  }
class C{  public void copyText(){  int end, start;  end=selectedCharField.getSelectionEnd();  start=selectedCharField.getSelectionStart();  selectedCharField.selectAll();  selectedCharField.copy();  selectedCharField.select(start,end);}  }
class C{  public void testSetValueAndroidAttribute(){  VirtualFile file=myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_2.xml","res/values/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_3.xml","res/values-v21/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_2.xml","res/values-night/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_2.xml","res/values-port/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_2.xml","res/values-port-v21/styles.xml");  ItemResourceValue item=new ItemResourceValue("colorAccent",true,"#000000",false,null);  checkSetValue(file,item,"-night-v21","-v21","-port-v21");}  }
class C{  void offsetChildToAnchor(View child,int layoutDirection){  final LayoutParams lp=(LayoutParams)child.getLayoutParams();  if (lp.mAnchorView != null) {    final Rect anchorRect=mTempRect1;    final Rect childRect=mTempRect2;    final Rect desiredChildRect=mTempRect3;    getDescendantRect(lp.mAnchorView,anchorRect);    getChildRect(child,false,childRect);    getDesiredAnchoredChildRect(child,layoutDirection,anchorRect,desiredChildRect);    final int dx=desiredChildRect.left - childRect.left;    final int dy=desiredChildRect.top - childRect.top;    if (dx != 0) {      child.offsetLeftAndRight(dx);    }    if (dy != 0) {      child.offsetTopAndBottom(dy);    }    if (dx != 0 || dy != 0) {      final Behavior b=lp.getBehavior();      if (b != null) {        b.onDependentViewChanged(this,child,lp.mAnchorView);      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_PICKUP_ITEM_ALL_ACCEPT_HIM(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300216,value0,value1);}  }
class C{  public PlacesSearchQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public Bucket(String label,Experiment experiment,double allocationPercent,boolean isControl,String description){  this(label,experiment.id,allocationPercent,isControl,description,null);}  }
class C{  public static String readFileToString(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toString(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public static void save(File destinationFolder,String filename,List<SLDDataInterface> sldDataList,Color backgroundColour){  if (!destinationFolder.exists()) {    destinationFolder.mkdirs();  }  InputStream inputStream=ExportHTML.class.getResourceAsStream(HTML_TEMPLATE);  if (inputStream == null) {    ConsoleManager.getInstance().error(ExportHTML.class,"Failed to find html template");  } else {    String htmlTemplate=null;    BufferedReader reader=null;    File file=null;    try {      file=stream2file(inputStream);      reader=new BufferedReader(new FileReader(file));      String line=null;      StringBuilder stringBuilder=new StringBuilder();      String ls=System.getProperty("line.separator");      while ((line=reader.readLine()) != null) {        stringBuilder.append(line);        stringBuilder.append(ls);      }      htmlTemplate=stringBuilder.toString();    } catch (    Exception e) {      ConsoleManager.getInstance().exception(ExportHTML.class,e);    } finally {      if (reader != null) {        try {          reader.close();        } catch (        IOException e) {          ConsoleManager.getInstance().exception(ExportHTML.class,e);        }      }    }    StringBuilder sb=new StringBuilder();    sb.append("  <tr>\n");    sb.append("    <th>Layer Name</th>\n");    sb.append("    <th>Legend</th>\n");    sb.append("  </tr>\n");    for (    SLDDataInterface sldData : sldDataList) {      StyleWrapper styleWrapper=sldData.getStyle();      String layerName=styleWrapper.getStyle();      sb.append("  <tr>\n");      sb.append(String.format("    <td>%s</td>\n",layerName));      StyledLayerDescriptor sld=SLDUtils.createSLDFromString(sldData);      if (sld != null) {        String showHeading=null;        String showFilename=null;        List<String> legendFileNameList=new ArrayList<String>();        boolean result=LegendManager.getInstance().saveLegendImage(sld,destinationFolder,layerName,showHeading,showFilename,legendFileNameList);        if (result) {          String legendFilename=legendFileNameList.get(0);          sb.append(String.format("    <td><img src=\"%s\" alt=\"%s\" ></td>\n",legendFilename,layerName));        }      }      sb.append("  </tr>\n");    }    if (htmlTemplate != null) {      htmlTemplate=htmlTemplate.replace(TEMPLATE_INSERT_CODE,sb.toString());      PrintWriter out;      try {        File f=new File(destinationFolder,filename);        out=new PrintWriter(f);        out.println(htmlTemplate);        out.close();      } catch (      FileNotFoundException e) {        ConsoleManager.getInstance().exception(ExportHTML.class,e);      }    }    if (file != null) {      file.delete();    }  }}  }
class C{  public void addDataSource(DataSource added){  registerDataSource(added);}  }
class C{  public boolean assignFromViewIfValid(View child,RecyclerView.State state){  RecyclerView.LayoutParams lp=(RecyclerView.LayoutParams)child.getLayoutParams();  if (!lp.isItemRemoved() && lp.getViewPosition() >= 0 && lp.getViewPosition() < state.getItemCount()) {    assignFromView(child);    return true;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_FAIL_5_FORESTRY(String value0){  return new SM_SYSTEM_MESSAGE(1330025,value0);}  }
class C{  private void signInWithGPlus(){  Intent signInIntent=Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);  startActivityForResult(signInIntent,RC_SIGN_IN);}  }
class C{  public void testDataTagCompletion() throws Throwable {  doTestCompletion();}  }
class C{  public boolean equals(Object obj){  return (obj instanceof ClientMinPrincipal && Constraint.equal(principals,((ClientMinPrincipal)obj).principals));}  }
class C{  private static QueryTask buildAllRegistriesQuery(){  return buildRegistryQuery(null);}  }
class C{  public ArtifactLocation jarForIntellijLibrary(){  if (interfaceJar != null) {    return interfaceJar;  }  return classJar;}  }
class C{  private void loadCustomPermissions(File file){  Yaml yaml=new Yaml(new SafeConstructor());  try (FileInputStream stream=new FileInputStream(file)){    @SuppressWarnings("unchecked") Map<String,Map<String,Object>> perms=(Map<String,Map<String,Object>>)yaml.load(stream);    if (perms == null) {      getLogger().log(Level.INFO,"Server permissions file " + file + " is empty, ignoring it");      return;    }    List<Permission> permsList=Permission.loadPermissions(perms,"Permission node '%s' in " + file + " is invalid",Permission.DEFAULT_PERMISSION);    for (    Permission perm : permsList) {      try {        Bukkit.getPluginManager().addPermission(perm);      } catch (      IllegalArgumentException ex) {        getLogger().log(Level.SEVERE,"Permission in " + file + " was already defined",ex);      }    }  } catch (  FileNotFoundException ex) {    try {      file.createNewFile();    } catch (    IOException e) {      getLogger().log(Level.SEVERE,"Cannot create server permisisons file " + file,e);    }  }catch (  MarkedYAMLException ex) {    getLogger().log(Level.WARNING,"Server permissions file " + file + " is not valid YAML: "+ ex.toString());  }catch (  Throwable ex) {    getLogger().log(Level.WARNING,"Server permissions file " + file + " is not valid YAML.",ex);  }}  }
class C{  protected PhotosReportCommentQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  private String bufferSlice(int start,int end){  return new String(this.buffer,start,end - start);}  }
class C{  public static boolean isAnonymousPrincipal(Object principal){  return principal == ANONYMOUS;}  }
class C{  public void process(int direction,IReplicationFilterEntry replicationFilterEntry,String remoteSpaceMemberName){  if (!isInitialized())   return;  _filter.process(direction,replicationFilterEntry,remoteSpaceMemberName);}  }
class C{  private static void copy(InputStream inputStream,OutputStream outputStream) throws IOException {  byte[] b=new byte[1024];  int len;  while ((len=inputStream.read(b)) != -1) {    outputStream.write(b,0,len);  }}  }
class C{  public int size(){  return v.length;}  }
class C{  @Override public void populateExpression(Object objValue){  if (objValue instanceof String) {    populateField((String)objValue);  }}  }
class C{  public MarketReportCommentQuery reportComment(UserActor actor,int ownerId,int commentId,ReportReason reason){  return new MarketReportCommentQuery(getClient(),actor,ownerId,commentId,reason);}  }
class C{  void update(@NonNull Bitmap icon,@NonNull String description){  mIcon=icon;  mDescription=description;}  }
class C{  public FriendsGetByPhonesQuery phones(String... value){  return unsafeParam("phones",value);}  }
class C{  protected void createImageDescriptor(String id,URL baseURL){  URL url=null;  try {    url=new URL(baseURL,ISVNUIConstants.ICON_PATH + id);  } catch (  MalformedURLException e) {  }  ImageDescriptor desc=ImageDescriptor.createFromURL(url);  imageDescriptors.put(id,desc);}  }
class C{  public void clear(){  removeChildListeners();  m_clauses.clear();  fireExpressionChange();}  }
class C{  private static File stream2file(InputStream in,String suffix) throws IOException {  final File tempFile=File.createTempFile(PREFIX,suffix);  try (FileOutputStream out=new FileOutputStream(tempFile)){    IOUtils.copy(in,out);  }   return tempFile;}  }
class C{  public void assertion(AssertionError e){  currentTest.get().assertion(e);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sleep_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200449,skilltarget);}  }
class C{  private static double[] computeSimpsonReciprocal(MainViewer mainViewer,ProgressListener progressListener) throws IOException, CanceledException {  progressListener.setMaximum(2 * mainViewer.getSelectedNodes().size());  progressListener.setProgress(0);  int numberOfDatasets=mainViewer.getDir().getDocument().getNumberOfSamples();  double[] total=new double[numberOfDatasets];  for (  Node v : mainViewer.getSelectedNodes()) {    int[] summarized=mainViewer.getNodeData(v).getSummarized();    for (int i=0; i < summarized.length; i++)     total[i]+=summarized[i];    progressListener.incrementProgress();  }  double[] result=new double[numberOfDatasets];  for (  Node v : mainViewer.getSelectedNodes()) {    int[] summarized=mainViewer.getNodeData(v).getSummarized();    for (int i=0; i < summarized.length; i++) {      double p=summarized[i] / total[i];      result[i]+=p * p;    }    progressListener.incrementProgress();  }  for (int i=0; i < result.length; i++)   result[i]=result[i] > 0 ? 1.0 / result[i] : 0;  return result;}  }
class C{  public WallSearchQuery search(){  return new WallSearchQuery(getClient());}  }
class C{  public CSVRecordReader(int skipNumLines){  this(skipNumLines,DEFAULT_DELIMITER);}  }
class C{  public Vector3D intersection(final Line line){  final Vector3D direction=line.getDirection();  final double dot=w.dotProduct(direction);  if (FastMath.abs(dot) < 1.0e-10) {    return null;  }  final Vector3D point=line.toSpace((Point<Euclidean1D>)Vector1D.ZERO);  final double k=-(originOffset + w.dotProduct(point)) / dot;  return new Vector3D(1.0,point,k,direction);}  }
class C{  public Quaternion multiply(final Quaternion q){  return multiply(this,q);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelBuff_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200354,skillname);}  }
class C{  public DatabaseGetChairsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public ColumnExpression(String field){  m_field=field;}  }
class C{  public VideoDeleteAlbumQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public void storeClassBytes(String className,byte[] definition){synchronized (_stateLock) {    if (_classBytesByName.containsKey(className)) {      String msg=toString() + ": attempting to add class bytes for class name " + className+ " which already has mapped class bytes";      if (_logger.isLoggable(Level.SEVERE)) {        _logger.severe(msg);        _logger.showGlobalTrace();      }      if (_disableDuplicateLoadProtection)       _logger.warning(toString() + ": duplicate remote class loading protection is disabled, exception ignored"); else       throw new IllegalArgumentException(msg);    }    if (_logger.isLoggable(Level.FINEST))     _logger.finest("Storing class bytes of class: " + className + " in "+ this);    _classBytesByName.put(className,definition);  }}  }
class C{  public static String byteCountToDisplaySize(BigInteger size){  String displaySize;  if (size.divide(ONE_EB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_EB_BI)) + " EB";  } else   if (size.divide(ONE_PB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_PB_BI)) + " PB";  } else   if (size.divide(ONE_TB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_TB_BI)) + " TB";  } else   if (size.divide(ONE_GB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_GB_BI)) + " GB";  } else   if (size.divide(ONE_MB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_MB_BI)) + " MB";  } else   if (size.divide(ONE_KB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_KB_BI)) + " KB";  } else {    displaySize=String.valueOf(size) + " bytes";  }  return displaySize;}  }
class C{  @Override public int compareTo(Pair<F,S> o){  return new DefaultLexicographicPairComparator().compare(this,o);}  }
class C{  public void popContext(){  fMatchersCount=fContextStack.pop();}  }
class C{  public GroupsGetCatalogQuery subcategoryId(Integer value){  return unsafeParam("subcategory_id",value);}  }
class C{  private void validateBlockletSize(){  String blockletSizeStr=carbonProperties.getProperty(CarbonCommonConstants.BLOCKLET_SIZE,CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);  try {    int blockletSize=Integer.parseInt(blockletSizeStr);    if (blockletSize < CarbonCommonConstants.BLOCKLET_SIZE_MIN_VAL || blockletSize > CarbonCommonConstants.BLOCKLET_SIZE_MAX_VAL) {      LOGGER.info("The blocklet size value \"" + blockletSizeStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);      carbonProperties.setProperty(CarbonCommonConstants.BLOCKLET_SIZE,CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);    }  } catch (  NumberFormatException e) {    LOGGER.info("The blocklet size value \"" + blockletSizeStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);    carbonProperties.setProperty(CarbonCommonConstants.BLOCKLET_SIZE,CarbonCommonConstants.BLOCKLET_SIZE_DEFAULT_VAL);  }}  }
class C{  public boolean shouldContinue(){  return !hasErrors() && !isCancelled();}  }
class C{  public static Drawable bitmapToDrawable(Bitmap bitmap){  return bitmap == null ? null : new BitmapDrawable(bitmap);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  boolean isDirty(CoordinatorLayout parent,View child){  return mBehavior != null && mBehavior.isDirty(parent,child);}  }
class C{  @Override public Throwable fillInStackTrace(){  return null;}  }
class C{  public boolean popDirname(){  mDirectories.remove(mDirectories.getItem(0));  return !mDirectories.isEmpty();}  }
class C{  public ZWaveControllerReplicationCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public static Zmat ua(Z1 u,Zmat A,int r1,int r2,int c1,int c2) throws JampackException {  if (c1 > c2) {    return A;  }  return ua(u,A,r1,r2,c1,c2,new Z1(c2 - c1 + 1));}  }
class C{  public static String removeHtml(String text){  try {    int idx=text.indexOf("<");    if (idx == -1) {      return text;    }    String plainText="";    String htmlText=text;    int htmlStartIndex=htmlText.indexOf("<",0);    if (htmlStartIndex == -1) {      return text;    }    while (htmlStartIndex >= 0) {      plainText+=htmlText.substring(0,htmlStartIndex);      int htmlEndIndex=htmlText.indexOf(">",htmlStartIndex);      htmlText=htmlText.substring(htmlEndIndex + 1);      htmlStartIndex=htmlText.indexOf("<",0);    }    plainText=plainText.trim();    return plainText;  } catch (  Exception e) {    System.err.println("Error while removing HTML: " + e.toString());    return text;  }}  }
class C{  static public void closeAllDatabase(){  Log.i(tag,"closeAllDatabase");  if (mInstance != null) {    for (int i=0; i < mInstance.databases.size(); ++i) {      if (mInstance.databases.get(i) != null) {        mInstance.databases.get(i).close();      }    }    mInstance.databases.clear();  }}  }
class C{  public K key(){  return (K)_map._set[_index];}  }
class C{  public static String removeExtraSpaces(String text){  text=text.replace(ChineseLanguageConstants.SPACE[0],ChineseLanguageConstants.SPACE[1]);  text=text.replaceAll("[ \t\u000B\u000C\u00A0\uE5F1]+"," ");  text=text.replaceAll("(^ +)|( +$)","");  return text;}  }
class C{  public static void removeAllUserBookmarks(Context context){  chromeBrowserProviderCall(BookmarkNode.class,ChromeBrowserProvider.CLIENT_API_DELETE_ALL_USER_BOOKMARKS,context,argsToBundle());}  }
class C{  @Override public Histogram histogram(){  return p.histogram();}  }
class C{  public int indexOf(String name){  Integer index=name2index.get(name);  if (index == null)   return -1; else   return index;}  }
class C{  public Lexer(String s){  initKeywords();  tok=new StreamTokenizer(new StringReader(s));  tok.wordChars('_','_');  tok.ordinaryChar('.');  tok.lowerCaseMode(true);  nextToken();}  }
class C{  public String toString(){  String s="";  s+=String.format("%.2f N + %.2f",slope(),intercept());  return s + "  (R^2 = " + String.format("%.3f",R2())+ ")";}  }
class C{  private float calcAngle(float value,float yValueSum){  return value / yValueSum * mMaxAngle;}  }
class C{  private void eliminateDeadCode(ISourceSinkManager sourcesSinks){  for (QueueReader<MethodOrMethodContext> rdr=Scene.v().getReachableMethods().listener(); rdr.hasNext(); ) {    MethodOrMethodContext sm=rdr.next();    if (sm.method() == null || !sm.method().hasActiveBody())     continue;    if (Scene.v().getEntryPoints().contains(sm.method()))     continue;    List<Unit> callSites=getCallsInMethod(sm.method());    ConstantPropagatorAndFolder.v().transform(sm.method().getActiveBody());    DeadAssignmentEliminator.v().transform(sm.method().getActiveBody());    List<Unit> newCallSites=getCallsInMethod(sm.method());    if (callSites != null)     for (    Unit u : callSites)     if (newCallSites == null || !newCallSites.contains(u))     Scene.v().getCallGraph().removeAllEdgesOutOf(u);  }  InterproceduralConstantValuePropagator ipcvp=new InterproceduralConstantValuePropagator(new InfoflowCFG(),Scene.v().getEntryPoints(),sourcesSinks,taintWrapper);  ipcvp.setRemoveSideEffectFreeMethods(codeEliminationMode == CodeEliminationMode.RemoveSideEffectFreeCode && !enableImplicitFlows);  ipcvp.transform();  for (QueueReader<MethodOrMethodContext> rdr=Scene.v().getReachableMethods().listener(); rdr.hasNext(); ) {    MethodOrMethodContext sm=rdr.next();    if (sm.method() == null || !sm.method().hasActiveBody())     continue;    if (SystemClassHandler.isClassInSystemPackage(sm.method().getDeclaringClass().getName()))     continue;    ConditionalBranchFolder.v().transform(sm.method().getActiveBody());    List<Unit> callSites=getCallsInMethod(sm.method());    UnreachableCodeEliminator.v().transform(sm.method().getActiveBody());    List<Unit> newCallSites=getCallsInMethod(sm.method());    if (callSites != null)     for (    Unit u : callSites)     if (newCallSites == null || !newCallSites.contains(u))     Scene.v().getCallGraph().removeAllEdgesOutOf(u);  }}  }
class C{  public void addArg(Expr node){  List<Expr> list=(parent == null || state == null) ? getArgListNoTransform() : getArgList();  list.addChild(node);}  }
class C{  @Override protected FlowSet<N> newInitialFlow(){  return (FlowSet<N>)fullSet.clone();}  }
class C{  public Complex[] transform(final UnivariateFunction f,final double min,final double max,final int n,final TransformType type){  final double[] data=FunctionUtils.sample(f,min,max,n);  return transform(data,type);}  }
class C{  public LandlordProxyVerifier(Landlord landlord,Uuid landlordUuid){  if (landlord == null)   throw new NullPointerException("landlord must not be null");  if (landlordUuid == null)   throw new NullPointerException("landlordUuid must not be null");  if (!(landlord instanceof RemoteMethodControl)) {    throw new UnsupportedOperationException("cannot construct verifier - server reference does not " + "implement RemoteMethodControl");  }  if (!(landlord instanceof TrustEquivalence)) {    throw new UnsupportedOperationException("cannot construct verifier - server reference does not " + "implement TrustEquivalence");  }  this.landlord=(RemoteMethodControl)landlord;  this.landlordUuid=landlordUuid;}  }
class C{  public static boolean deleteQuietly(File file){  if (file == null) {    return false;  }  try {    if (file.isDirectory()) {      cleanDirectory(file);    }  } catch (  Exception ignored) {  }  try {    return file.delete();  } catch (  Exception ignored) {    return false;  }}  }
class C{  public void register(String key,ItemStack... values){  for (  ItemStack value : values) {    register(key,value);  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (id == null) {    throw new InvalidObjectException("id is null");  } else {    if (!hasConsistentConstraints()) {      throw new InvalidObjectException("inconsistent constraints between underlying proxy and invocation handler");    }  }}  }
class C{  public static void e(String tag,String msg){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  public static void createRMA6FileFromSAM(String creator,String samFile,String queryFile,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throws IOException, CanceledException {  final RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(creator,BlastFileFormat.SAM,doc.getBlastMode(),new String[]{samFile},new String[]{queryFile},rma6FileName,useCompression,doc,maxMatchesPerRead,hasMagnitudes);  rma6Creator.parseFiles(progressListener);}  }
class C{  private void createLookAndFeelMenuItems(JMenu menu){  LookAndFeel current=UIManager.getLookAndFeel();  for (  LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {    JMenuItem mnuLaF=new JMenuItem(info.getName());    if (current.getClass().getName().equals(info.getClassName())) {      mnuLaF.setIcon(Icons.CHECK);    }    mnuLaF.setActionCommand("laf+" + info.getClassName());    mnuLaF.addActionListener(this);    menu.add(mnuLaF);  }}  }
class C{  static <T,R>ForNext forComp(AnyVal<T> any,Iterable<? extends R> iterator){  return new ForImpl(any,iterator);}  }
class C{  public void addMutualEdge(Object from,Object to){  if (!super.containsNode(from))   super.addNode(from);  if (!super.containsNode(to))   super.addNode(to);  super.addEdge(from,to);  super.addEdge(to,from);}  }
class C{  private static int perturb(final int hash){  return hash & 0x7fffffff;}  }
class C{  @deprecated public RuleBasedBreakIterator(){}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public Sigmoid(double lo,double hi){  this.lo=lo;  this.hi=hi;}  }
class C{  private boolean isAlphaUsedForScale(){  return android.os.Build.VERSION.SDK_INT < 11;}  }
class C{  private FastConcurrentSkipListMap.Node<K,V> hiNode(){  if (hi == null)   return m.findLast(); else   if (hiInclusive)   return m.findNear(hi,m.LT | m.EQ); else   return m.findNear(hi,m.LT);}  }
class C{  public void noop() throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    try {      communication.sendFTPCommand("NOOP");      FTPReply r=communication.readFTPReply();      if (!r.isSuccessCode()) {        throw new FTPException(r);      }    }  finally {      touchAutoNoopTimer();    }  }}  }
class C{  public boolean contains(T obj){  return contains_impl(obj);}  }
class C{  protected void doPing(@NotNull String app,@NotNull String version,@Nullable final Map<String,String> extras){  final String nApp=normalizeAppName(app);  final String nVersion=normalizeVersion(version);  if (!mStore.isPingOptIn()) {    return;  }  long now=System.currentTimeMillis();  long then=mStore.getPingTime(app);  if (now - then < PING_INTERVAL_MSEC) {    return;  }  mStore.setPingTime(app,now);  try {    URL url=createPingUrl(nApp,nVersion,INSTALLATION_ID,extras);    actuallySendPing(url);  } catch (  Exception e) {    LOG.warn("AndroidSdk.SendPing failed",e);  }}  }
class C{  public void removeAllActionFireListeners(){  mActionFiredListeners.clear();}  }
class C{  public PresenterLayout(Context context,AttributeSet attrs){  super(context,attrs);  initializedDefaultsFromXml();  collectAttributes(attrs);  initLayout();  if (mInflateDefaultViews) {    inflateDefaultOverlappingViews();  }}  }
class C{  public WallGetQueryWithExtended ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public void dispose(){}  }
class C{  public AttributesImpl atts(){  return theAtts;}  }
class C{  private boolean canKickPlayer(Player activePlayer,String charName){  LegionMemberEx legionMember=getLegionMemberEx(charName);  if (legionMember == null) {    log.error("Char name does not exist in legion member table: " + charName);    return false;  }  Legion legion=activePlayer.getLegion();  if (isSelf(activePlayer,legionMember.getObjectId())) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_BANISH_CANT_BANISH_SELF);    return false;  } else   if (legionMember.isBrigadeGeneral()) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_BANISH_CAN_BANISH_MASTER);    return false;  } else   if (legionMember.getRank() == activePlayer.getLegionMember().getRank()) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_BANISH_DONT_HAVE_RIGHT_TO_BANISH);    return false;  } else   if (!legion.isMember(legionMember.getObjectId())) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_BANISH_DONT_HAVE_RIGHT_TO_BANISH);    return false;  } else   if (!activePlayer.getLegionMember().hasRights(LegionPermissionsMask.KICK)) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_BANISH_DONT_HAVE_RIGHT_TO_BANISH);    return false;  }  return true;}  }
class C{  @Override public void write(DataOutput out) throws IOException {  out.writeLong(duration);  out.writeInt(getLength());  for (int i=0; i < coeffs.length; i++) {    out.writeFloat(coeffs[i]);  }}  }
class C{  public XMLStreamException(String msg,Throwable th){  super(msg,th);  nested=th;}  }
class C{  public BatchResponsePacket sendPreparedStatementBatch(String statement,PreparedValuesCollection preparedValuesCollection) throws SQLException {  RequestPacket packet=new RequestPacket();  packet.setType(RequestPacket.Type.PREPARED_VALUES_BATCH);  packet.setStatement(statement);  packet.setModifiers(readModifiers);  packet.setPreparedValuesCollection(preparedValuesCollection);  return (BatchResponsePacket)writeRequestPacket(packet);}  }
class C{  public Jws<Claims> parseClaims(String signingKey){  try {    return Jwts.parser().setSigningKey(signingKey).parseClaimsJws(this.token);  } catch (  UnsupportedJwtException|MalformedJwtException|IllegalArgumentException|SignatureException ex) {    logger.error("Invalid JWT Token",ex);    throw new BadCredentialsException("Invalid JWT token: ",ex);  }catch (  ExpiredJwtException expiredEx) {    logger.info("JWT Token is expired",expiredEx);    throw new JwtExpiredTokenException(this,"JWT Token expired",expiredEx);  }}  }
class C{  @Override public void update(){}  }
class C{  private List<ProcessChange> removeSubEquipmentTags(SubEquipment subEquipment,ConfigurationElementReport subEquipmentReport){  List<ProcessChange> processChanges=new ArrayList<>();  for (  Long dataTagId : subEquipmentFacade.getDataTagIds(subEquipment.getId())) {    ConfigurationElementReport tagReport=new ConfigurationElementReport(Action.REMOVE,Entity.DATATAG,dataTagId);    subEquipmentReport.addSubReport(tagReport);    ProcessChange change=dataTagConfigHandler.removeDataTag(dataTagId,tagReport);    if (change.processActionRequired()) {      change.setNestedSubReport(tagReport);      processChanges.add(change);    } else {      subEquipmentReport.addSubReport(tagReport);    }  }  return processChanges;}  }
class C{  void updateCursor(@SwingCoordinate int x,@SwingCoordinate int y){  ScreenView screenView=mySurface.getScreenView(x,y);  if (screenView == null) {    mySurface.setCursor(null);    return;  }  SelectionModel selectionModel=screenView.getSelectionModel();  if (!selectionModel.isEmpty()) {    int mx=Coordinates.getAndroidX(screenView,x);    int my=Coordinates.getAndroidY(screenView,y);    if (!selectionModel.isEmpty()) {      NlComponent primary=selectionModel.getPrimary();      NlComponent parent=primary != null ? primary.getParent() : null;      if (parent != null) {        ViewGroupHandler handler=parent.getViewGroupHandler();        if (handler != null) {          if (handler.updateCursor(screenView,mx,my)) {            return;          }        }      }    }    for (    NlComponent component : selectionModel.getSelection()) {      ViewGroupHandler viewGroupHandler=component.getViewGroupHandler();      if (viewGroupHandler != null) {        if (viewGroupHandler.updateCursor(screenView,mx,my)) {          return;        }      }    }    int max=Coordinates.getAndroidDimension(screenView,PIXEL_RADIUS + PIXEL_MARGIN);    SelectionHandle handle=selectionModel.findHandle(mx,my,max);    if (handle != null) {      Cursor cursor=handle.getCursor();      if (cursor != mySurface.getCursor()) {        mySurface.setCursor(cursor);      }      return;    }    NlComponent component=selectionModel.findComponent(mx,my);    if (component == null || component.isRoot()) {      component=screenView.getModel().findLeafAt(mx,my,false);    }    if (component != null && !component.isRoot()) {      Cursor cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);      if (cursor != mySurface.getCursor()) {        mySurface.setCursor(cursor);      }      return;    }  } else {    NlComponent component=Coordinates.findComponent(screenView,x,y);    if (component != null) {      ViewGroupHandler viewGroupHandler=component.getViewGroupHandler();      if (viewGroupHandler != null) {        int mx=Coordinates.getAndroidX(screenView,x);        int my=Coordinates.getAndroidY(screenView,y);        if (viewGroupHandler.updateCursor(screenView,mx,my)) {          mySurface.repaint();        }      }    }    if (mySurface.getScreenMode() != DesignSurface.ScreenMode.BOTH || screenView.getScreenViewType() == ScreenView.ScreenViewType.NORMAL) {      Dimension size=screenView.getSize();      Rectangle resizeZone=new Rectangle(screenView.getX() + size.width,screenView.getY() + size.height,RESIZING_HOVERING_SIZE,RESIZING_HOVERING_SIZE);      if (resizeZone.contains(x,y)) {        mySurface.setCursor(Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR));        return;      }    }  }  mySurface.setCursor(null);}  }
class C{  private synchronized void addChildNode(DefaultMutableTreeNode parent,DefaultMutableTreeNode child,int index){  DefaultTreeModel model=(DefaultTreeModel)getModel();  boolean isRootLeaf=(parent == model.getRoot()) && parent.isLeaf();  model.insertNodeInto(child,parent,index);  if (isRootLeaf) {    model.nodeStructureChanged(parent);  }}  }
class C{  public GtExpr newGtExpr(Value op1,Value op2){  return new GGtExpr(op1,op2);}  }
class C{  public ResourcesPoet addPlurals(String name,@NotNull List<Plural> plurals){  Element element=document.createElement("plurals");  element.setAttribute("name",name);  for (  Plural plural : plurals) {    Element valueElement=document.createElement("item");    valueElement.setAttribute("quantity",plural.quantity.toString());    valueElement.appendChild(document.createTextNode(plural.value));    element.appendChild(valueElement);  }  resourceElement.appendChild(element);  return this;}  }
class C{  private SLDTextArea(){  RenderPanelFactory.addSLDOutputListener(this);  SLDEditorFile.getInstance().addSLDEditorFileUpdateListener(this);}  }
class C{  protected Object prepareInput(IProgressMonitor monitor) throws InterruptedException {  initLabels();  if (resource instanceof LocalFolder) {    try {      if (monitor == null) {        monitor=new NullProgressMonitor();      }      monitor.beginTask(Policy.bind("SVNCompareEditorInput.comparing"),30);      IProgressMonitor sub=new SubProgressMonitor(monitor,30);      sub.beginTask(Policy.bind("SVNCompareEditorInput.comparing"),100);      Object[] result=new Object[]{null};      ArrayList resourceSummaryNodeList=new ArrayList();      ArrayList summaryEditionNodeList=new ArrayList();      ISVNClientAdapter client=null;      if (resources == null) {        resources=new ISVNLocalResource[]{resource};      }      if (remoteFolders == null) {        remoteFolders=new ISVNRemoteFolder[]{(ISVNRemoteFolder)remoteResource};      }      try {        for (int i=0; i < resources.length; i++) {          ISVNLocalResource resource=resources[i];          ISVNRemoteFolder remoteFolder=remoteFolders[i];          SVNDiffSummary[] diffSummary=null;          client=SVNProviderPlugin.getPlugin().getSVNClientManager().getSVNClient();          File file=new File(resource.getResource().getLocation().toString());          getUnadded(client,resource,file);          IResource[] unaddedResources=new IResource[unaddedList.size()];          unaddedList.toArray(unaddedResources);          SVNWorkspaceRoot workspaceRoot=new SVNWorkspaceRoot(resource.getResource().getProject());          AddResourcesCommand command=new AddResourcesCommand(workspaceRoot,unaddedResources,IResource.DEPTH_INFINITE);          command.run(monitor);          diffSummary=client.diffSummarize(file,remoteFolder.getUrl(),remoteFolder.getRevision(),true);          for (          IResource unaddedResource : unaddedResources) {            try {              SVNWorkspaceRoot.getSVNResourceFor(unaddedResource).revert();            } catch (            Exception e) {            }          }          SVNProviderPlugin.getPlugin().getSVNClientManager().returnSVNClient(client);          client=null;          if (diffSummary != null && diffSummary.length > 0) {            diffSummary=getDiffSummaryWithSubfolders(diffSummary);            ITypedElement left=new SVNLocalResourceSummaryNode(resource,diffSummary,resource.getResource().getLocation().toString());            SummaryEditionNode right=new SummaryEditionNode(remoteFolder);            right.setName(resource.getFile().getName());            right.setRootFolder((RemoteFolder)remoteFolder);            right.setNodeType(SummaryEditionNode.RIGHT);            right.setRoot(true);            right.setDiffSummary(diffSummary);            String localCharset=Utilities.getCharset(resource.getIResource());            try {              right.setCharset(localCharset);            } catch (            CoreException e) {              SVNUIPlugin.log(IStatus.ERROR,e.getMessage(),e);            }            resourceSummaryNodeList.add(left);            summaryEditionNodeList.add(right);          }        }        if (resourceSummaryNodeList.size() == 0) {          result[0]=null;        } else {          Object[] resourceSummaryNodes=new Object[resourceSummaryNodeList.size()];          resourceSummaryNodeList.toArray(resourceSummaryNodes);          Object[] summaryEditionNodes=new Object[summaryEditionNodeList.size()];          summaryEditionNodeList.toArray(summaryEditionNodes);          MultipleSelectionNode left=new MultipleSelectionNode(resourceSummaryNodes);          MultipleSelectionNode right=new MultipleSelectionNode(summaryEditionNodes);          result[0]=new SummaryDifferencer().findDifferences(false,monitor,null,null,left,right);          fRoot=result[0];        }      }  finally {        sub.done();        if (client != null) {          SVNProviderPlugin.getPlugin().getSVNClientManager().returnSVNClient(client);        }      }      if (result[0] instanceof DiffNode) {        DiffNode diffNode=(DiffNode)result[0];        if (!diffNode.hasChildren()) {          return null;        }      }      return result[0];    } catch (    OperationCanceledException e) {      throw new InterruptedException(e.getMessage());    }catch (    Exception e) {      return e.getMessage();    } finally {      monitor.done();    }  } else {    ITypedElement left=new SVNLocalResourceNode(resource);    ResourceEditionNode right=new ResourceEditionNode(remoteResource,pegRevision);    if (left.getType() == ITypedElement.FOLDER_TYPE) {      right.setLocalResource((SVNLocalResourceNode)left);    }    if (right.getType() == ITypedElement.FOLDER_TYPE) {      ((SVNLocalResourceNode)left).setRemoteResource((ResourceEditionNode)right);    }    String localCharset=Utilities.getCharset(resource.getIResource());    try {      right.setCharset(localCharset);    } catch (    CoreException e) {      SVNUIPlugin.log(IStatus.ERROR,e.getMessage(),e);    }    if (SVNRevision.BASE.equals(remoteRevision)) {      fRoot=new StatusAwareDifferencer().findDifferences(false,monitor,null,null,left,right);      return fRoot;    }    fRoot=new RevisionAwareDifferencer((SVNLocalResourceNode)left,right,diffFile,pegRevision).findDifferences(false,monitor,null,null,left,right);    return fRoot;  }}  }
class C{  public boolean isBiasCorrected(){  return biasCorrected;}  }
class C{  public void step(float deltaTime,int layer){  for (int n=0; n < tracks.length; n++) {    tracks[n].step(deltaTime,0);  }}  }
class C{  public LockableFileWriter(String fileName,boolean append,String lockDir) throws IOException {  this(new File(fileName),append,lockDir);}  }
class C{  public static void assertContains(String msg,double[] values,double x,double epsilon){  for (  double value : values) {    if (Precision.equals(value,x,epsilon)) {      return;    }  }  Assert.fail(msg + " Unable to find " + x);}  }
class C{  protected void deleteStorePath(){  FileFactory.FileType fileType=FileFactory.getFileType(this.carbonStorePath);  CarbonFile carbonFile=FileFactory.getCarbonFile(this.carbonStorePath,fileType);  deleteRecursiveSilent(carbonFile);}  }
class C{  public static int readInt(InputStream in) throws IOException {  int ch1=in.read();  int ch2=in.read();  int ch3=in.read();  int ch4=in.read();  if ((ch1 | ch2 | ch3| ch4) < 0) {    throw new EOFException();  }  return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8)+ (ch4 << 0));}  }
class C{  protected UnitGraph(Body body){  this.body=body;  unitChain=body.getUnits();  method=body.getMethod();  if (Options.v().verbose())   G.v().out.println("[" + method.getName() + "]     Constructing "+ this.getClass().getName()+ "...");}  }
class C{  public void addJar(String name){  try {    if (name.endsWith(".jar")) {      JarFile f=new JarFile(name);      jarFiles.add(f);    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean containsBody(Body body){  return this.bodies.contains(body);}  }
class C{  public boolean establishStage(Key<?> key){  Deque<Key<?>> computing=Queues.newArrayDeque();  return establishStage(computing,key);}  }
class C{  private void calcActualRenews(){  calcActualRenews(SystemTime.timeMillis());}  }
class C{  public Builder iconRetinaUrl(String iconRetinaUrl){  this.iconRetinaUrl=iconRetinaUrl;  return this;}  }
class C{  private void removeExtentEntry(){  extentModel.removeEntries(extentTable.getSelectionModel().getMinSelectionIndex(),extentTable.getSelectionModel().getMaxSelectionIndex());  removeExtentButton.setEnabled(false);}  }
class C{  public boolean onReceivedClientCertRequest(CordovaWebView view,ICordovaClientCertRequest request){  return false;}  }
class C{  public static int dip2px(Context context,float dpValue){  return (int)(dpValue * getDensity(context) + 0.5f);}  }
class C{  private void Move(){  if (isDead && (sKind != 5 || sNum != 0))   return;switch (status) {case ENTER:    enter_Enemy();  break;case BEGINPOS:begin_Pos();break;case POSITION:position();break;case SYNC:make_Sync();break;case ATTACK:attack();break;case BEGINBACK:begin_Back_Pos();break;case BACKPOS:back_Position();}}  }
class C{  private boolean canUploadEmblem(Player activePlayer){  if (!isBrigadeGeneral(activePlayer)) {    return false;  } else   if (activePlayer.getLegion().getLegionLevel() < 3) {    return false;  } else   if (!activePlayer.getLegion().getLegionEmblem().isUploading()) {    return false;  }  return true;}  }
class C{  public SecurityContext(String username,String password){  setUsername(username);  setPassword(password);}  }
class C{  public MarketAddQuery add(UserActor actor,int ownerId,String name,String description,int categoryId,float price,int mainPhotoId){  return new MarketAddQuery(getClient(),actor,ownerId,name,description,categoryId,price,mainPhotoId);}  }
class C{  public static String createRGBAString(Color c,double opacity){  return "rgba(" + (c.getRed() * 255) + ","+ (c.getGreen() * 255)+ ","+ (c.getBlue() * 255)+ ", "+ opacity+ ");";}  }
class C{  private int assignThreads(int splitIndex,int splitCount){  if (threadsPerSplit > 0) {    return threadsPerSplit;  }  if (splitCount == 1) {    return threadCount;  }  if (splitCount * minThreads > threadCount) {    return minThreads;  }  if (splitIndex % threadCount < threadCount % splitCount) {    return threadCount / splitCount + 1;  } else {    return threadCount / splitCount;  }}  }
class C{  private List<Segment> followLoop(final ConnectableSegment defining){  final List<Segment> loop=new ArrayList<Segment>();  loop.add(defining);  defining.setProcessed(true);  ConnectableSegment next=defining.getNext();  while (next != defining && next != null) {    loop.add(next);    next.setProcessed(true);    next=next.getNext();  }  if (next == null) {    ConnectableSegment previous=defining.getPrevious();    while (previous != null) {      loop.add(0,previous);      previous.setProcessed(true);      previous=previous.getPrevious();    }  }  filterSpuriousVertices(loop);  if (loop.size() == 2 && loop.get(0).getStart() != null) {    return null;  } else {    return loop;  }}  }
class C{  @Override public void populateField(Font font){  if ((textField != null) && (font != null)) {    int styleIndex=0;    int weightIndex=0;    String familyName=font.getFamily().get(0).toString();    String styleName=((Literal)font.getStyle()).getValue().toString();    for (int index=0; index < styles.length; index++) {      if (styles[index].equalsIgnoreCase(styleName)) {        styleIndex=index;        break;      }    }    String weightName=((Literal)font.getWeight()).getValue().toString();    for (int index=0; index < weights.length; index++) {      if (weights[index].equalsIgnoreCase(weightName)) {        weightIndex=index;        break;      }    }    StringBuilder sb=new StringBuilder(familyName);    if (weightIndex == 0) {      if (styleIndex == 0) {        sb.append("-PLAIN-");      } else {        sb.append("-ITALIC-");      }    } else {      if (styleIndex == 0) {        sb.append("-BOLD-");      } else {        sb.append("-BOLDITALIC-");      }    }    int size=12;    Literal sizeExpression=(Literal)font.getSize();    Object obj=sizeExpression.getValue();    if (obj instanceof Number) {      Number number=(Number)obj;      size=number.intValue();    } else     if (obj instanceof String) {      size=Integer.valueOf((String)obj);    }    sb.append(size);    java.awt.Font sampleFont=java.awt.Font.decode(sb.toString());    textField.setFont(sampleFont);  }}  }
class C{  public FriendsGetQueryWithFields order(FriendsGetOrder value){  return unsafeParam("order",value);}  }
class C{  @Override public void append(LogEvent logEvent){  if (!isStarted()) {    throw new IllegalStateException("AsyncAppender " + getName() + " is not active");  }  if (!(logEvent instanceof Log4jLogEvent)) {    if (!(logEvent instanceof RingBufferLogEvent)) {      return;    }    logEvent=((RingBufferLogEvent)logEvent).createMemento();  }  logEvent.getMessage().getFormattedMessage();  final Log4jLogEvent coreEvent=(Log4jLogEvent)logEvent;  boolean appendSuccessful=false;  if (blocking) {    if (isAppenderThread.get() == Boolean.TRUE && queue.remainingCapacity() == 0) {      coreEvent.setEndOfBatch(false);      appendSuccessful=thread.callAppenders(coreEvent);    } else {      try {        queue.put(Log4jLogEvent.serialize(coreEvent,includeLocation));        appendSuccessful=true;      } catch (      final InterruptedException e) {        LOGGER.warn("Interrupted while waiting for a free slot in the AsyncAppender LogEvent-queue {}",getName());      }    }  } else {    appendSuccessful=queue.offer(Log4jLogEvent.serialize(coreEvent,includeLocation));    if (!appendSuccessful) {      error("Appender " + getName() + " is unable to write primary appenders. queue is full");    }  }  if (!appendSuccessful && errorAppender != null) {    errorAppender.callAppender(coreEvent);  }}  }
class C{  public String graql(String template,File file){  checkBatchSize();  try (CSVReader reader=new CSVReader(new FileReader(file),delimiter,'"',0)){    return resolve(template,reader).collect(joining(NEWLINE));  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public WallReportCommentQuery reportComment(UserActor actor,int ownerId,int commentId){  return new WallReportCommentQuery(getClient(),actor,ownerId,commentId);}  }
class C{  ConsoleEntry(String message){  this(ConsoleLogType.LOG,message,"");}  }
class C{  public PokeSpam(int candyPlayerHas,int candyEvolutionCost,int bonus){  calculatePokeSpam(candyPlayerHas,candyEvolutionCost,bonus);}  }
class C{  @Override public int[] makeDensityTestPoints(){  return new int[]{-1,0,1,2,3,4,5,6,7,8,9,10,11};}  }
class C{  public BTreeLeaf(String dataFileName,BlockId blk,Type keyType,ConstantRange searchRange,Transaction tx){  this.dataFileName=dataFileName;  this.schema=schema(keyType);  this.keyType=keyType;  this.searchRange=searchRange;  this.tx=tx;  this.currentPage=new BTreePage(blk,NUM_FLAGS,schema,tx);  ccMgr=tx.concurrencyMgr();  moveSlotBefore();}  }
class C{  public boolean addDataSetElement(DataElement dataElement){  DataSetElement element=new DataSetElement(this,dataElement,null);  dataElement.getDataSetElements().add(element);  return dataSetElements.add(element);}  }
class C{  public static DataSourcePropertiesInterface decodeXML(Document document,String elementName){  if ((document == null) || (elementName == null)) {    return null;  }  Map<String,String> map=new LinkedHashMap<String,String>();  NodeList nodeList=document.getElementsByTagName(elementName);  if (nodeList.getLength() > 0) {    Node node=nodeList.item(0);    Node child=node.getFirstChild();    while (child != null) {      if (child.getNodeType() == Node.ELEMENT_NODE) {        map.put(child.getNodeName(),child.getTextContent());      }      child=child.getNextSibling();    }    return DataSourceConnectorFactory.getDataSourceProperties(map);  } else {    return DataSourceConnectorFactory.getNoDataSource();  }}  }
class C{  public DefaultDeploymentCache(){  this.cache=Collections.synchronizedMap(new HashMap<String,T>());}  }
class C{  public static void createXmlFile(AnnotatedString input,String encoding,String fileName){  Document doc=createXmlDocument(input);  try {    Writer out=new OutputStreamWriter(new FileOutputStream(fileName),encoding);    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty(OutputKeys.ENCODING,encoding);    DOMSource source=new DOMSource(doc);    StreamResult result=new StreamResult(out);    transformer.transform(source,result);    out.close();  } catch (  TransformerException te) {    throw new ProcessingException(te.getLocalizedMessage(),te);  }catch (  IOException ioe) {    throw new ProcessingException(ioe.getLocalizedMessage(),ioe);  }}  }
class C{  public static BigInteger formBitMask(int partitionSize){  BigInteger mask;  if (partitionSize < 32) {    mask=BigInteger.valueOf((1 << partitionSize) - 1);  } else {    mask=BigInteger.valueOf(2).pow(partitionSize).subtract(BigInteger.ONE);  }  return mask;}  }
class C{  public void addDeviceCommands(List<DeviceCommand> deviceCommands){  this.deviceCommands.addAll(deviceCommands);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public FlipImageTransform(Random random){  super(random);  converter=new OpenCVFrameConverter.ToMat();}  }
class C{  static public URL findContainerXML(String _containerName){  URL _containerNameURL=null;  String _containerNameFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + _containerName+ ".xml";  _containerNameURL=getResourceURL(_containerNameFilePath);  if (_containerNameURL != null) {    if (_logger.isLoggable(Level.INFO)) {      _logger.info("Loaded the container xml file < " + _containerNameURL + " >.");    }  }  return _containerNameURL;}  }
class C{  public void reset(){  _count=0;}  }
class C{  public boolean hasTrackedEntityInstance(){  return trackedEntityInstance != null;}  }
class C{  public static String createBgRGBString(Color c,double opacity){  return "-fx-control-inner-background: " + createRGBAString(c,opacity);}  }
class C{  public List<String> sortFields(){  return sortFields;}  }
class C{  protected String formatTitle(String title){  if (this.isNoFormat()) {    return title;  } else {    int colourCode=Utils.ansiColorCodes().get(this.titleColour);    return "\033[0;" + colourCode + "m"+ title+ "\033[0m";  }}  }
class C{  public static boolean isLowSurrogate(int c){  return (0xDC00 <= c && c <= 0xDFFF);}  }
class C{  public boolean removeChildEdge(int edge){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  @Override public final void storeData(final List data) throws IDBPersistenceException {  for (int i=0; i < data.size(); i++) {    if (data.get(i) instanceof FallbackImpl) {      if (!((FallbackImpl)data.get(i)).toString().equals(FallbackImpl.ERROR)) {        storage.add(data.get(i));      } else {        throw new IDBPersistenceException("Connection to the DB has been lost",0);      }    }  }}  }
class C{  public static void parseLitePalConfiguration(){  if (parser == null) {    parser=new LitePalParser();  }  parser.useSAXParser();}  }
class C{  String[] removeInvalidEmails(String[] emails){  Set<String> cleanAddresses=new HashSet<>();  for (  String emailTo : emails) {    if (emailVal.isValid(emailTo)) {      cleanAddresses.add(emailTo);    } else {      LOGGER.warn("Remove email address: [" + emailTo + "] from email recipients, because it is not valid");    }  }  return cleanAddresses.toArray(new String[cleanAddresses.size()]);}  }
class C{  public boolean selectComponent(MouseEvent event){  SelectionGraphics<String[]> selectionGraphics=new SelectionGraphics<>(getGraphics());  selectionGraphics.setMouseLocation(event.getPoint());  if (transpose)   drawChartTransposed(selectionGraphics); else   drawChart(selectionGraphics);  Set<String> seriesToSelect=new HashSet<>();  Set<String> classesToSelect=new HashSet<>();  int count=0;  int size=selectionGraphics.getSelectedItems().size();  for (  String[] pair : selectionGraphics.getSelectedItems()) {    if (selectionGraphics.getUseWhich() == SelectionGraphics.Which.Last && count++ < size - 1)     continue;    if (pair[0] != null) {      seriesToSelect.add(pair[0]);    }    if (pair[1] != null) {      classesToSelect.add(pair[1]);    }    if (selectionGraphics.getUseWhich() == SelectionGraphics.Which.First)     break;  }  if (transpose) {  } else {    Set<Node> toVisit=new HashSet<>();    for (Node v=graph.getFirstNode(); v != null; v=v.getNext()) {      NodeData nodeData=(NodeData)v.getData();      if (classesToSelect.contains(nodeData.getLabel())) {        toVisit.add(v);      }    }    while (toVisit.size() > 0) {      Node v=toVisit.iterator().next();      toVisit.remove(v);      selectRec(v,classesToSelect);    }  }  if (seriesToSelect.size() > 0)   getChartData().getChartSelection().setSelectedSeries(seriesToSelect,true);  if (classesToSelect.size() > 0)   getChartData().getChartSelection().setSelectedClass(classesToSelect,true);  return seriesToSelect.size() > 0 || classesToSelect.size() > 0;}  }
class C{  public static void onRequestPermissionsResult(Object o,int requestCode,String[] permissions,int[] grantResults){  onRequestPermissionsResult(o,requestCode,permissions,grantResults,null);}  }
class C{  public PluginEntry(String service,CordovaPlugin plugin){  this(service,plugin.getClass().getName(),true,plugin);}  }
class C{  private Configuration(Configuration other,boolean storeResource){  this(other);  this.loadDefaults=other.loadDefaults;  this.storeResource=storeResource;  if (storeResource) {    updatingResource=new HashMap<>();  }}  }
class C{  private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {  ois.defaultReadObject();  needsSyncChildren(false);}  }
class C{  public ZWaveMeterPulseCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if ((spinner != null) && (undoRedoObject != null)) {    if (undoRedoObject.getOldValue() instanceof Double) {      Double oldValue=(Double)undoRedoObject.getOldValue();      internalSetValue(oldValue);    }  }}  }
class C{  public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set index=");  String method=np.getWordMatchesIgnoringCase(METHODS);  np.matchIgnoreCase(";");  ClusterViewer viewer=getViewer();  viewer.setEcologicalIndex(method);  execute("sync;");}  }
class C{  public void zoomCenteredTo(float zoom,PointF pivot){  float dzoom=zoom / this.zoom;  zoomTo(zoom);  float baseX=currentXOffset * dzoom;  float baseY=currentYOffset * dzoom;  baseX+=(pivot.x - pivot.x * dzoom);  baseY+=(pivot.y - pivot.y * dzoom);  moveTo(baseX,baseY);}  }
class C{  private void createBranch(polyglot.ast.Branch branchStmt){  if (tryStack != null && !tryStack.isEmpty()) {    polyglot.ast.Try currentTry=tryStack.pop();    if (currentTry.finallyBlock() != null) {      createBlock(currentTry.finallyBlock());      tryStack.push(currentTry);    } else {      tryStack.push(currentTry);    }  }  if (catchStack != null && !catchStack.isEmpty()) {    polyglot.ast.Try currentTry=catchStack.pop();    if (currentTry.finallyBlock() != null) {      createBlock(currentTry.finallyBlock());      catchStack.push(currentTry);    } else {      catchStack.push(currentTry);    }  }  body.getUnits().add(soot.jimple.Jimple.v().newNopStmt());  if (branchStmt.kind() == polyglot.ast.Branch.BREAK) {    if (branchStmt.label() == null) {      soot.jimple.Stmt gotoEndNoop=endControlNoop.pop();      if (monitorStack != null) {        Stack<Local> putBack=new Stack<Local>();        while (!monitorStack.isEmpty()) {          soot.Local exitVal=(soot.Local)monitorStack.pop();          putBack.push(exitVal);          soot.jimple.ExitMonitorStmt emStmt=soot.jimple.Jimple.v().newExitMonitorStmt(exitVal);          body.getUnits().add(emStmt);        }        while (!putBack.isEmpty()) {          monitorStack.push(putBack.pop());        }      }      soot.jimple.Stmt gotoEnd=soot.jimple.Jimple.v().newGotoStmt(gotoEndNoop);      endControlNoop.push(gotoEndNoop);      body.getUnits().add(gotoEnd);      Util.addLnPosTags(gotoEnd,branchStmt.position());    } else {      soot.jimple.Stmt gotoLabel=soot.jimple.Jimple.v().newGotoStmt(labelBreakMap.get(branchStmt.label()));      body.getUnits().add(gotoLabel);      Util.addLnPosTags(gotoLabel,branchStmt.position());    }  } else   if (branchStmt.kind() == polyglot.ast.Branch.CONTINUE) {    if (branchStmt.label() == null) {      soot.jimple.Stmt gotoCondNoop=condControlNoop.pop();      if (monitorStack != null) {        Stack<Local> putBack=new Stack<Local>();        while (!monitorStack.isEmpty()) {          soot.Local exitVal=(soot.Local)monitorStack.pop();          putBack.push(exitVal);          soot.jimple.ExitMonitorStmt emStmt=soot.jimple.Jimple.v().newExitMonitorStmt(exitVal);          body.getUnits().add(emStmt);        }        while (!putBack.isEmpty()) {          monitorStack.push(putBack.pop());        }      }      soot.jimple.Stmt gotoCond=soot.jimple.Jimple.v().newGotoStmt(gotoCondNoop);      condControlNoop.push(gotoCondNoop);      body.getUnits().add(gotoCond);      Util.addLnPosTags(gotoCond,branchStmt.position());    } else {      soot.jimple.Stmt gotoLabel=soot.jimple.Jimple.v().newGotoStmt(labelContinueMap.get(branchStmt.label()));      body.getUnits().add(gotoLabel);      Util.addLnPosTags(gotoLabel,branchStmt.position());    }  }}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if ((objBytes == null) && ((hash != 13) || (locBytes != null)))   throw new InvalidObjectException("Bad hash or annotation");}  }
class C{  public boolean shouldBypassFilter(SecurityContext securityContext){  return (isTrusted(securityContext.getUserDetails()) || trustInterceptor.verifyTrust(securityContext));}  }
class C{  public final void onAttack(Creature creature,int skillId,final int damage,boolean notifyAttack){  this.onAttack(creature,skillId,TYPE.REGULAR,damage,notifyAttack,LOG.REGULAR);}  }
class C{  private void calculateNewAverage(final long removedValue,final long timeDifference,final boolean increaseUsedFields){  float oldSum=currentAverage * usedFields;  if (increaseUsedFields)   usedFields++;  currentAverage=(oldSum - removedValue + timeDifference) / usedFields;}  }
class C{  private float calcAngle(float value){  return calcAngle(value,mData.getYValueSum());}  }
class C{  @Override public void destroy(){  mInitialized=false;  if (mWebChromeClient != null) {    mWebChromeClient.destroy();  }  if (mWebViewClient != null) {    mWebViewClient.destroy();  }  mContext=null;  mWebSettings=null;  mWebViewClient=null;  mWebChromeClient=null;  super.destroy();}  }
class C{  public static JsonArray array(int... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JsonArray array=new JsonArray();  for (  int value : values) {    array.add(value);  }  return array;}  }
class C{  public static void v(String msg){  if (LOG_ENABLE) {    Log.v(TAG,buildMsg(msg));  }}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public static int write(AudioInputStream stream,AudioFileFormat.Type fileType,OutputStream out) throws IOException {  List providers=getAudioFileWriters();  int bytesWritten=0;  boolean flag=false;  for (int i=0; i < providers.size(); i++) {    AudioFileWriter writer=(AudioFileWriter)providers.get(i);    try {      bytesWritten=writer.write(stream,fileType,out);      flag=true;      break;    } catch (    IllegalArgumentException e) {      continue;    }  }  if (!flag) {    throw new IllegalArgumentException("could not write audio file: file type not supported: " + fileType);  } else {    return bytesWritten;  }}  }
class C{  public void rootRemoved(ISVNRepositoryLocation root){  Iterator it=listeners.iterator();  while (it.hasNext()) {    IRepositoryListener listener=(IRepositoryListener)it.next();    listener.repositoryRemoved(root);  }}  }
class C{  protected int estimateProtocolVersionLen(final SaveProtocolVersion version){  return version.getProtocol().length() + 4;}  }
class C{  @Override public void close() throws IOException {  try {    out.close();  }  finally {    lockFile.delete();  }}  }
class C{  @Before public void beforeTest() throws IOException {  ((AbstractApplicationContext)context).start();  processFacade.start(50L,"hostname",new Timestamp(System.currentTimeMillis()));  reset(mockManager);}  }
class C{  @Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){  View view=inflater.inflate(R.layout.fragment_timeline_about,container,false);  timelineAbout=(TextView)view.findViewById(R.id.timeline_about);  if (aboutText != null) {    setTimelineAbout(aboutText);  }  return view;}  }
class C{  public void prepareMatrixOffset(boolean inverted){  mMatrixOffset.reset();  if (!inverted)   mMatrixOffset.postTranslate(mViewPortHandler.offsetLeft(),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom()); else {    mMatrixOffset.setTranslate(mViewPortHandler.offsetLeft(),-mViewPortHandler.offsetTop());    mMatrixOffset.postScale(1.0f,-1.0f);  }}  }
class C{  public void stop(boolean force){  getProcess().destroy();  try {    if (!force)     waitFor(60 * 1000);  } catch (  InterruptedException e1) {  }  getCommand().destroy(force);  try {    boolean destroyed=waitFor(1500);    if (!destroyed)     throw new IllegalStateException("Timeout of 1 minute occurred while waiting for the process to terminate. (force=" + force + ")");  } catch (  InterruptedException e) {  }}  }
class C{  public SimpleLiveLocals(UnitGraph graph){  if (Options.v().time())   Timers.v().liveTimer.start();  if (Options.v().verbose())   G.v().out.println("[" + graph.getBody().getMethod().getName() + "]     Constructing SimpleLiveLocals...");  analysis=new Analysis(graph);  if (Options.v().time())   Timers.v().liveAnalysisTimer.start();  analysis.doAnalysis();  if (Options.v().time())   Timers.v().liveAnalysisTimer.end();  if (Options.v().time())   Timers.v().liveTimer.end();}  }
class C{  public TreeDepthItemSorter(){  this(false);}  }
class C{  private boolean expungeStaleEntries(){  if (size == 0)   return false;  Object r;  boolean result=false;  while ((r=queue.poll()) != null) {    result=true;    Entry e=(Entry)r;    int h=e.hash;    int i=indexFor(h,table.length);    Entry prev=table[i];    Entry p=prev;    while (p != null) {      Entry next=p.next;      if (p == e) {        if (prev == e)         table[i]=next; else         prev.next=next;        e.next=null;        size--;        break;      }      prev=p;      p=next;    }  }  return result;}  }
class C{  @Override public void refresh(int year,int month){  selectedYear=year;  selectedMonth=month;  selectedIndex=-1;  calendar.set(Calendar.YEAR,selectedYear);  calendar.set(Calendar.MONTH,selectedMonth - 1);  calendar.set(Calendar.DAY_OF_MONTH,1);  initial();  invalidate();  if (onRefreshListener != null) {    onRefreshListener.onRefresh();  }}  }
class C{  private String printOFormat(long x){  String sx=null;  if (x == Long.MIN_VALUE)   sx="1000000000000000000000"; else   if (x < 0) {    String t=Long.toString((~(-x - 1)) ^ Long.MIN_VALUE,8);switch (t.length()) {case 1:      sx="100000000000000000000" + t;    break;case 2:  sx="10000000000000000000" + t;break;case 3:sx="1000000000000000000" + t;break;case 4:sx="100000000000000000" + t;break;case 5:sx="10000000000000000" + t;break;case 6:sx="1000000000000000" + t;break;case 7:sx="100000000000000" + t;break;case 8:sx="10000000000000" + t;break;case 9:sx="1000000000000" + t;break;case 10:sx="100000000000" + t;break;case 11:sx="10000000000" + t;break;case 12:sx="1000000000" + t;break;case 13:sx="100000000" + t;break;case 14:sx="10000000" + t;break;case 15:sx="1000000" + t;break;case 16:sx="100000" + t;break;case 17:sx="10000" + t;break;case 18:sx="1000" + t;break;case 19:sx="100" + t;break;case 20:sx="10" + t;break;case 21:sx="1" + t;break;}} else sx=Long.toString(x,8);return printOFormat(sx);}  }
class C{  public WakeupManager(ThreadDesc desc){  if (desc == null)   throw new NullPointerException("desc must be non-null");  kickerDesc=desc;  queueThreadTimeout=DEFAULT_QUEUE_THREAD_TIMEOUT;}  }
class C{  public boolean optimizeScanForSingleObject(){  return size() <= 1;}  }
class C{  public PagesGetTitlesQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public FilenameUtils(){  super();}  }
class C{  private void sendAfterTextChanged(Editable s){  if (mListeners != null) {    for (int i=0; i < mListeners.size(); i++) {      mListeners.get(i).afterTextChanged(s);    }  }}  }
class C{  private boolean isAndroidNamespace(String ns){  if (ns == null)   return false;  ns=ns.trim();  if (ns.startsWith("*"))   ns=ns.substring(1);  if (!ns.equals("http://schemas.android.com/apk/res/android"))   return false;  return true;}  }
class C{  @Override public synchronized boolean isRunning(){  return running;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public IfStmt fullCopy(){  IfStmt tree=(IfStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public Preference inflate(XmlPullParser parser,PreferenceGroup root){synchronized (mConstructorArgs) {    final AttributeSet attrs=Xml.asAttributeSet(parser);    mConstructorArgs[0]=mContext;    final Preference result;    try {      int type;      do {        type=parser.next();      } while (type != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT);      if (type != XmlPullParser.START_TAG) {        throw new InflateException(parser.getPositionDescription() + ": No start tag found!");      }      Preference xmlRoot=createItemFromTag(parser.getName(),attrs);      result=onMergeRoots(root,(PreferenceGroup)xmlRoot);      rInflate(parser,result,attrs);    } catch (    InflateException e) {      throw e;    }catch (    XmlPullParserException e) {      final InflateException ex=new InflateException(e.getMessage());      ex.initCause(e);      throw ex;    }catch (    IOException e) {      final InflateException ex=new InflateException(parser.getPositionDescription() + ": " + e.getMessage());      ex.initCause(e);      throw ex;    }    return result;  }}  }
class C{  private AudioOption generateAudioOption(Object xmlOpt,String lang,boolean isMainAudio){  AudioOption option=null;  ArrayList<ChannelType> channels=channelMapper.getChannels(getMapperLayoutOption(xmlOpt,lang)).stream().map(null).collect(Collectors.toCollection(null));  if (channels.isEmpty()) {    if (isMainAudio) {      throw new ConversionException("Main audio can't be processed. " + "Please check CPL or audiomap.xml, it may contain inappropriate layout or essence descriptors.");    } else {      logger.warn("Alternative audio for {} locale can't be processed.",lang);    }    return null;  }  if (xmlOpt instanceof Option1AType) {    option=createOption1A(channels.toArray(new ChannelType[0]));  } else   if (xmlOpt instanceof Option2Type) {    option=createOption2(channels.toArray(new ChannelType[0]));  } else   if (xmlOpt instanceof Option3Type) {    option=createOption3(channels.toArray(new ChannelType[0]));  } else   if (xmlOpt instanceof Option4Type) {    option=createOption4(channels.toArray(new ChannelType[0]));  } else   if (xmlOpt instanceof Option5Type) {    option=createOption5(channels.toArray(new ChannelType[0]));  } else   if (xmlOpt instanceof Option6Type) {    option=createOption6(channels.toArray(new ChannelType[0]));  } else {  }  return option;}  }
class C{  public Fraction(int num){  this(num,1);}  }
class C{  @Override protected void reset() throws XNIException {  super.reset();  fInDTD=false;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  private void trimToSize(int maxSize){  while (true) {    String key;    Bitmap value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();      if (toEvict == null) {        break;      }      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=sizeOf(key,value);    }  }}  }
class C{  boolean isContextualSearchUrl(String url){  return url.equals(getSearchUrl());}  }
class C{  public static boolean validate(String ruleName){  return validate(ruleName,null);}  }
class C{  public boolean contains(String name){  return indexOf(name) != -1;}  }
class C{  public static JSONArray toJSONArray(XMLTokener x) throws JSONException {  return (JSONArray)parse(x,true,null);}  }
class C{  private void createUI(){  panel=new JPanel();  panel.setLayout(null);  createField(FIELD_DATABASE,Localisation.getField(DataSourceConnectorFileGDB.class,"DataSourceConnectorFileGDB.database"));  panel.setPreferredSize(new Dimension(FIELD_X + FIELD_WIDTH,textFieldMap.size() * ROW_HEIGHT));}  }
class C{  public int hashCode(){  if (A.nextSetBit(0) < B.nextSetBit(0))   return A.hashCode() + 37 * B.hashCode(); else   return B.hashCode() + 37 * A.hashCode();}  }
class C{  public StringDataType(byte[] buf){  this.s=new String(buf,Charset.forName("UTF-8"));}  }
class C{  public void shuffleTestSet(){  utils.shuffleList(TestFiles);}  }
class C{  public float[] toFloatArray(){  float[] faRes=new float[3];  faRes[0]=(float)ValueSimilarity;  faRes[1]=(float)ContainmentSimilarity;  faRes[2]=(float)SizeSimilarity;  return faRes;}  }
class C{  public static final String[] splitToWords(String sStr,boolean bStem){  PorterStemmer sStem=new PorterStemmer();  String[] sRes=sStr.split("(\\s|\\p{Punct})+");  if (bStem)   for (int iCnt=0; iCnt < sRes.length; iCnt++)   if (!sRes[iCnt].trim().equals(""))   try {    sRes[iCnt]=sStem.stem(sRes[iCnt]);  } catch (  Exception e) {  }  return sRes;}  }
class C{  public MarketSearchQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_HE_ENTERED_FORCE(String value0){  return new SM_SYSTEM_MESSAGE(1400013,value0);}  }
class C{  public void discardRecording(){  if (recorder != null) {    try {      recorder.stop();      recorder.release();      recorder=null;      if (file != null && file.exists() && !file.isDirectory()) {        file.delete();      }    } catch (    IllegalStateException e) {    }catch (    RuntimeException e) {    }    isRecording=false;  }}  }
class C{  public void init(){  if (stateGenerator != null && CollectionUtils.isNotEmpty(resourceItems)) {    stateGenerator.generatorStates(resourceItems);  }}  }
class C{  @Override public void handleMessage(final SoapMessage msg) throws Fault {  if (mode.isCheckOnly()) {    logger.warn("Running in " + mode + " mode, no response signature verification available!");  } else   if (isErrorResponse(msg)) {    logger.warn("Validation error, no response signature verification available!");  } else {    super.handleMessage(msg);  }}  }
class C{  public void addDereference(VarNode base){  dereferences.add(base);}  }
class C{  private static void maintainNonActivatableReferences(Result[] results){  logger.entering(ServiceStarter.class.getName(),"maintainNonActivatableReferences",(Object[])results);  if (results.length == 0)   return;  transient_service_refs=new ArrayList();  for (int i=0; i < results.length; i++) {    if (results[i] != null && results[i].result != null && NonActivatableServiceDescriptor.class.equals(results[i].descriptor.getClass())) {      logger.log(Level.FINEST,"Storing ref to: {0}",results[i].result);      transient_service_refs.add(results[i].result);    }  }  logger.exiting(ServiceStarter.class.getName(),"maintainNonActivatableReferences");  return;}  }
class C{  public void writeString(BufferedByteWriter dos,String s) throws IOException {  dos.putNullTerminatedString(s);}  }
class C{  public static Map<String,Object> returnError(String errorMessage,List<? extends Object> errorMessageList,Map<String,? extends Object> errorMessageMap,Map<String,? extends Object> nestedResult){  return returnProblem(ModelService.RESPOND_ERROR,errorMessage,errorMessageList,errorMessageMap,nestedResult);}  }
class C{  public static int[] convertIntegers(List<Integer> integers){  int[] ret=new int[integers.size()];  for (int i=0; i < ret.length; i++) {    ret[i]=integers.get(i).intValue();  }  return ret;}  }
class C{  private static void streamCopy(InputStream inStream,OutputStream outStream) throws IOException {  byte[] temp=new byte[4096];  int bytesRead=inStream.read(temp);  while (bytesRead >= 0) {    outStream.write(temp,0,bytesRead);    bytesRead=inStream.read(temp);  }  inStream.close();  outStream.close();}  }
class C{  public ZWaveConfigurationCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public void loadUrl(String url,Map<String,String> additionalHttpHeaders){  loadUrl(url,additionalHttpHeaders,null);}  }
class C{  public static void loadPlugins(final Plugins plugins) throws RuntimeException {  for (  final PluginDescription plugin : plugins.getPluginDescriptions()) {    if (plugin instanceof PhasePluginDescription) {      handlePhasePlugin((PhasePluginDescription)plugin);    } else {      G.v().out.println("[Warning] Unhandled plugin of type '" + plugin.getClass() + "'");    }  }}  }
class C{  public ArrayList<Entry> process(File[] files,File outputRoot) throws Exception {  if (outputRoot == null)   outputRoot=new File("");  outputFiles.clear();  LinkedHashMap<File,ArrayList<Entry>> dirToEntries=new LinkedHashMap();  process(files,outputRoot,outputRoot,dirToEntries,0);  ArrayList<Entry> allEntries=new ArrayList();  for (  java.util.Map.Entry<File,ArrayList<Entry>> mapEntry : dirToEntries.entrySet()) {    ArrayList<Entry> dirEntries=mapEntry.getValue();    if (comparator != null)     Collections.sort(dirEntries,entryComparator);    File inputDir=mapEntry.getKey();    File newOutputDir=null;    if (flattenOutput)     newOutputDir=outputRoot; else     if (!dirEntries.isEmpty())     newOutputDir=dirEntries.get(0).outputDir;    String outputName=inputDir.getName();    if (outputSuffix != null)     outputName=outputName.replaceAll("(.*)\\..*","$1") + outputSuffix;    Entry entry=new Entry();    entry.inputFile=mapEntry.getKey();    entry.outputDir=newOutputDir;    if (newOutputDir != null)     entry.outputFile=newOutputDir.length() == 0 ? new File(outputName) : new File(newOutputDir,outputName);    try {      processDir(entry,dirEntries);    } catch (    Exception ex) {      throw new Exception("Error processing directory: " + entry.inputFile.getAbsolutePath(),ex);    }    allEntries.addAll(dirEntries);  }  if (comparator != null)   Collections.sort(allEntries,entryComparator);  for (  Entry entry : allEntries) {    try {      processFile(entry);    } catch (    Exception ex) {      throw new Exception("Error processing file: " + entry.inputFile.getAbsolutePath(),ex);    }  }  return outputFiles;}  }
class C{  public WallGetCommentsQueryWithExtended(VkApiClient client,int postId){  super(client,"wall.getComments",GetCommentsExtendedResponse.class);  postId(postId);  extended(true);}  }
class C{  protected String fixSlashes(String sysid){  return sysid.replace('\\','/');}  }
class C{  private void updateTabsVisibility(StackTab[] sortedPriorityArray){  mVisibilityArray.clear();  for (int i=0; i < sortedPriorityArray.length; i++) {    mVisibilityArray.add(sortedPriorityArray[i].getId());  }  updateCacheVisibleIds(mVisibilityArray);}  }
class C{  public VelocityScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY){  this(context,interpolator,true);}  }
class C{  public VideoGetQueryWithExtended albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  protected void applyParseHandlers(){  sequenceFlows=new HashMap<String,SequenceFlow>();  for (  Process process : bpmnModel.getProcesses()) {    currentProcess=process;    if (process.isExecutable()) {      bpmnParserHandlers.parseElement(this,process);    }  }}  }
class C{  public Iterator keys(){  return this.map.keySet().iterator();}  }
class C{  public static <V>int distinctList(List<V> sourceList){  if (isEmpty(sourceList)) {    return 0;  }  int sourceCount=sourceList.size();  int sourceListSize=sourceList.size();  for (int i=0; i < sourceListSize; i++) {    for (int j=(i + 1); j < sourceListSize; j++) {      if (sourceList.get(i).equals(sourceList.get(j))) {        sourceList.remove(j);        sourceListSize=sourceList.size();        j--;      }    }  }  return sourceCount - sourceList.size();}  }
class C{  public static void main(String[] args){  for (int i=1; i < 152; i++) {    for (    Locale l : supportedLocales) {      try {        System.out.println(String.format(l,"%s: Pokedex #%d is %s\n    %s",l.getDisplayName(l),i,PokeDictionary.getDisplayName(i,l),PokeDictionary.getDisplayDescription(i,l)));      } catch (      MissingResourceException e) {        Log.e("Main","Unable to find Pokemon name with given Pokedex: " + i,e);      }    }    try {      System.out.println(String.format("%s: Pokedex# %d is %s\n    %s","Fallback",i,PokeDictionary.getDisplayName(i,new Locale("xx")),PokeDictionary.getDisplayDescription(i,new Locale("xx"))));    } catch (    MissingResourceException e) {      Log.e("Main","Unable to find Pokemon name with given Pokedex: ",e);    }    System.out.println();  }}  }
class C{  public Builder withOutputRoot(@NotNull File outputRoot){  myOutputRoot=outputRoot;  return this;}  }
class C{  static void alwaysScheduleAfter(Activity before,Activity after){  getInstance()._alwaysScheduleAfter(before,after);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelBuff_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200660,skillcaster,skillname);}  }
class C{  @Override public void close() throws PulsarServerException {  mutex.lock();  try {    if (state == State.Closed) {      return;    }    if (this.webService != null) {      this.webService.close();      this.webService=null;    }    if (this.brokerService != null) {      this.brokerService.close();      this.brokerService=null;    }    if (this.managedLedgerClientFactory != null) {      this.managedLedgerClientFactory.close();      this.managedLedgerClientFactory=null;    }    if (this.leaderElectionService != null) {      this.leaderElectionService.stop();      this.leaderElectionService=null;    }    if (loadManagerExecutor != null) {      loadManagerExecutor.shutdownNow();    }    loadManager=null;    if (globalZkCache != null) {      globalZkCache.close();      globalZkCache=null;      localZooKeeperConnectionProvider.close();      localZooKeeperConnectionProvider=null;    }    configurationCacheService=null;    localZkCacheService=null;    localZkCache=null;    if (adminClient != null) {      adminClient.close();      adminClient=null;    }    nsservice=null;    if (executor != null) {      executor.shutdown();    }    orderedExecutor.shutdown();    state=State.Closed;  } catch (  Exception e) {    throw new PulsarServerException(e);  } finally {    mutex.unlock();  }}  }
class C{  protected void resetCommon() throws XNIException {  int count=fCommonComponents.size();  for (int i=0; i < count; i++) {    XMLComponent c=(XMLComponent)fCommonComponents.get(i);    c.reset(this);  }}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  private InputStream downloadUrl(final URL url) throws IOException {  HttpURLConnection conn=(HttpURLConnection)url.openConnection();  conn.setReadTimeout(NET_READ_TIMEOUT_MILLIS);  conn.setConnectTimeout(NET_CONNECT_TIMEOUT_MILLIS);  conn.setRequestMethod("GET");  conn.setDoInput(true);  conn.connect();  return conn.getInputStream();}  }
class C{  public Optional<Double> median(){  if (isEmpty())   return Optional.empty();  return Optional.of(percentile(50));}  }
class C{  public static boolean isBuildWithGradle(@NotNull Module module){  return AndroidGradleFacet.getInstance(module) != null;}  }
class C{  public static SimplifiedIntervalList collectBucketedIntervalsNotInIntervalList(SimplifiedIntervalList supplyIntervals,SimplifiedIntervalList bucketedIntervals,Granularity granularity){  Iterable<Interval> bucketIterable=granularity.intervalsIterable(bucketedIntervals);  Predicate<Interval> notIn=new SimplifiedIntervalList.IsSubinterval(supplyIntervals).negate();  return StreamSupport.stream(bucketIterable.spliterator(),false).filter(notIn).collect(SimplifiedIntervalList.getCollector());}  }
class C{  public <R>Plan<R> then(BiFunction<T1,T2,R> selector){  if (selector == null) {    throw new NullPointerException();  }  return new Plan2<T1,T2,R>(this,selector);}  }
class C{  public static int calculateDeviceSpeedRank(Context context){  return 150;}  }
class C{  public boolean canStoreType(Type child,Type parent){  if (child.equals(parent))   return true;  if (parent instanceof NullType) {    return false;  }  if (child instanceof NullType) {    return parent instanceof RefLikeType;  }  if (child instanceof RefType) {    if (parent.equals(Scene.v().getObjectType()))     return true;    if (parent instanceof RefType) {      return canStoreClass(((RefType)child).getSootClass(),((RefType)parent).getSootClass());    } else {      return false;    }  } else   if (child instanceof AnySubType) {    if (!(parent instanceof RefLikeType)) {      throw new RuntimeException("Unhandled type " + parent);    } else     if (parent instanceof ArrayType) {      Type base=((AnySubType)child).getBase();      return base.equals(RefType.v("java.lang.Object")) || base.equals(RefType.v("java.io.Serializable")) || base.equals(RefType.v("java.lang.Cloneable"));    } else {      SootClass base=((AnySubType)child).getBase().getSootClass();      SootClass parentClass=((RefType)parent).getSootClass();      LinkedList<SootClass> worklist=new LinkedList<SootClass>();      if (base.isInterface())       worklist.addAll(getAllImplementersOfInterface(base)); else       worklist.add(base);      Set<SootClass> workset=new HashSet<SootClass>();      while (!worklist.isEmpty()) {        SootClass cl=(SootClass)worklist.removeFirst();        if (!workset.add(cl))         continue;        if (cl.isConcrete() && canStoreClass(cl,parentClass))         return true;        worklist.addAll(getSubclassesOf(cl));      }      return false;    }  } else   if (child instanceof ArrayType) {    ArrayType achild=(ArrayType)child;    if (parent instanceof RefType) {      return parent.equals(RefType.v("java.lang.Object")) || parent.equals(RefType.v("java.io.Serializable")) || parent.equals(RefType.v("java.lang.Cloneable"));    }    if (!(parent instanceof ArrayType))     return false;    ArrayType aparent=(ArrayType)parent;    if (achild.numDimensions == aparent.numDimensions) {      if (achild.baseType.equals(aparent.baseType))       return true;      if (!(achild.baseType instanceof RefType))       return false;      if (!(aparent.baseType instanceof RefType))       return false;      return canStoreType(achild.baseType,aparent.baseType);    } else     if (achild.numDimensions > aparent.numDimensions) {      if (aparent.baseType.equals(RefType.v("java.lang.Object")))       return true;      if (aparent.baseType.equals(RefType.v("java.io.Serializable")))       return true;      if (aparent.baseType.equals(RefType.v("java.lang.Cloneable")))       return true;      return false;    } else     return false;  } else   return false;}  }
class C{  public IdsQuery(Class<T> type,Object[] ids,QueryResultType queryResultType){  this(type.getName(),ids,null,null,queryResultType);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Object newInstance(java.lang.Object[])")) {    java_lang_reflect_Constructor_newInstance(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public static <T>List<Slice<T>> split(List<Slice<T>> input){  List<Slice<T>> slices=new ArrayList<>();  Queue<Slice<T>> tails=new PriorityQueue<>(input.size(),Comparator.comparingLong(null));  input.forEach(null);  Queue<Slice<T>> heads=new PriorityQueue<>(input.size(),Comparator.comparingLong(null));  heads.offer(tails.poll());  long slicepoint=heads.peek().begin;  while (!heads.isEmpty() || !tails.isEmpty()) {    Slice head=heads.peek();    Slice tail=tails.peek();    boolean headEnd=tail == null || tail.begin > head.end;    long begin=Math.max(slicepoint,head.begin);    long end=headEnd ? head.end : tail.begin;    if (begin != end) {      Slice<T> slice=new Slice<>(begin,end);      heads.stream().sorted(Comparator.comparingInt(null)).flatMap(null).forEach(null);      slices.add(slice);      slicepoint=slice.end;    }    if (headEnd) {      heads.poll();    }    if (!headEnd || heads.isEmpty()) {      if (tail != null) {        heads.offer(tails.poll());      }    }  }  return slices;}  }
class C{  public void damageReport(VisualItem item,Rectangle2D region){  for (int i=0; i < m_displays.size(); ++i) {    Display d=getDisplay(i);    if (d.getPredicate().getBoolean(item)) {      d.damageReport(region);    }  }}  }
class C{  public synchronized void resetTimeLimit(){  if (customer == Thread.currentThread()) {    doResetTimeLimit();    notify();  }}  }
class C{  protected int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_ENTER_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1400011,value0);}  }
class C{  public Element createElementNS(String namespaceURI,String qualifiedName,String localpart) throws DOMException {  return new ElementNSImpl(this,namespaceURI,qualifiedName,localpart);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  String choice=ProgramProperties.get("AminoAcidColorScheme",ColorSchemeAminoAcids.NAMES.Default.toString());  String result=(String)JOptionPane.showInputDialog(getViewer().getFrame(),"Choose amino acid color scheme","Choose colors",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),ColorSchemeAminoAcids.getNames(),choice);  if (result != null) {    result=result.trim();    if (result.length() > 0) {      ProgramProperties.put("AminoAcidColorScheme",result);      execute("set aminoAcidColors='" + result + "';");    }  }}  }
class C{  public void close() throws IOException {  infoSection.updateModificationDate();  infoSection.write(io);}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  private void _schedule(Activity a,long startTime){  if (a.isScheduled()) {    try {      notifyAll();    } catch (    Exception e) {    }    return;  }  a.setStartTime(startTime);synchronized (this) {    m_activities.add(a);    a.setScheduled(true);    if (startTime < m_nextTime) {      m_nextTime=startTime;      notify();    }  }}  }
class C{  public double distinctValues(ConstantRange range){  ConstantRange overlap=valRange.intersect(range);  if (!overlap.isValid())   return 0.0;  if (overlap.isConstant())   return 1.0;  double ret=distVals;  if (pcts != null)   ret*=pcts.percentage(range); else {    if (valRange.isLowInclusive() && (overlap.low().compareTo(valRange.low()) > 0 || !range.isLowInclusive()))     ret-=1.0;    if (valRange.isHighInclusive() && (overlap.high().compareTo(valRange.high()) < 0 || !range.isHighInclusive()))     ret-=1.0;    ret*=overlap.length() / valRange.length();  }  return Math.max(ret,1.0);}  }
class C{  public boolean isIgnoreCheck(){  if (ignoreCheck == null) {    return false;  } else {    return ignoreCheck;  }}  }
class C{  private void enqueueEvaluateParameters(){  if (myEvaluationState == EvaluationState.REQUEST_ENQUEUED) {    return;  }  myEvaluationState=EvaluationState.REQUEST_ENQUEUED;  ApplicationManager.getApplication().invokeLater(null,ModalityState.any());}  }
class C{  protected GroupsIsMemberQueryWithUserIdsExtended userIds(List<Integer> value){  return unsafeParam("user_ids",value);}  }
class C{  public ColourTableCellRenderer(ColourMapModel colourMapModel){  this.colourMapModel=colourMapModel;}  }
class C{  public LinkedList<Patch> patch_deepCopy(LinkedList<Patch> patches){  LinkedList<Patch> patchesCopy=new LinkedList<Patch>();  for (  Patch aPatch : patches) {    Patch patchCopy=new Patch();    for (    Diff aDiff : aPatch.diffs) {      Diff diffCopy=new Diff(aDiff.operation,aDiff.text);      patchCopy.diffs.add(diffCopy);    }    patchCopy.start1=aPatch.start1;    patchCopy.start2=aPatch.start2;    patchCopy.length1=aPatch.length1;    patchCopy.length2=aPatch.length2;    patchesCopy.add(patchCopy);  }  return patchesCopy;}  }
class C{  public boolean isPresent(String name){  return featureMap.containsKey(name);}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY,int overX,int overY){  if (mFlywheel && !isFinished()) {    float oldVelocityX=mScrollerX.mCurrVelocity;    float oldVelocityY=mScrollerY.mCurrVelocity;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mScrollerX.fling(startX,velocityX,minX,maxX,overX);  mScrollerY.fling(startY,velocityY,minY,maxY,overY);}  }
class C{  private void drawRec(DrawWhat what,Graphics2D gc,PhyloTree tree,Point2D center,double radiusFactor,Node v,double level,double maxLevel,double angleV,double extentV,double barFactor,double maxValue){  if (v.getOutDegree() > 0) {    int countV=((NodeData)v.getData()).getCountSummarized() - ((NodeData)v.getData()).getCountAssigned();    if (countV > 0) {      double factor=extentV / countV;      double used=0;      for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {        Node w=e.getTarget();        int countW=((NodeData)w.getData()).getCountSummarized();        double angleW=angleV + used;        double extentW=factor * countW;        drawRec(what,gc,tree,center,radiusFactor,w,level + 1,maxLevel,angleW,extentW,barFactor,maxValue);        used+=extentW;      }    }  }  if (v.getInDegree() > 0) {    SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);    String className=tree.getLabel(v);    if (getChartData().getClassNames().contains(className)) {      boolean classIsSelected=(getChartData().getChartSelection().isSelected(null,className));      if (what == DrawWhat.RegionsAndBars) {        double radius=(v.getOutDegree() > 0 ? level : maxLevel) * radiusFactor;        Rectangle2D rect=new Rectangle2D.Double(center.getX() - radius,center.getY() - radius,2 * radius,2 * radius);        Arc2D arc=new Arc2D.Double(rect,modulo360(angleV + angleOffset),extentV,Arc2D.PIE);        if (isTranspose() && chartData.getNumberOfSeries() == 1) {          String series=chartData.getSeriesNames().iterator().next();          Color color;          if (scalingType == ChartViewer.ScalingType.PERCENT) {            double total=getChartData().getTotalForSeriesIncludingDisabledAttributes(series);            double value;            if (total == 0)             value=0; else             value=100 * getChartData().getValueAsDouble(series,className) / total;            color=RedGradient.getColor((int)value,(int)maxValue);          } else           if (scalingType == ChartViewer.ScalingType.LOG) {            double value=getChartData().getValueAsDouble(series,className);            double inverseMaxValueLog=1 / Math.log(maxValue);            color=RedGradient.getColorLogScale((int)value,inverseMaxValueLog);          } else           if (scalingType == ChartViewer.ScalingType.SQRT) {            double value=Math.sqrt(getChartData().getValueAsDouble(series,className));            color=RedGradient.getColor((int)value,(int)maxValue);          } else {            double value=getChartData().getValueAsDouble(series,className);            color=RedGradient.getColor((int)value,(int)maxValue);          }          gc.setColor(color);        } else {          if (colorByClasses)           gc.setColor(getChartColors().getClassColor(class2HigherClassMapper.get(className),255)); else           gc.setColor(Color.WHITE);        }        if (sgc != null)         sgc.setCurrentItem(new String[]{null,className});        gc.fill(arc);        gc.setColor(Color.LIGHT_GRAY);        gc.draw(arc);        if (sgc != null)         sgc.clearCurrentItem();      }      if (what == DrawWhat.RegionsAndBars) {        int numberOfBars=getChartData().getNumberOfSeries();        if (numberOfBars > 1) {          double part=extentV / numberOfBars;          double used=0;          for (          String series : chartData.getSeriesNames()) {            double value;            if (scalingType == ChartViewer.ScalingType.PERCENT) {              double total=getChartData().getTotalForSeriesIncludingDisabledAttributes(series);              if (total == 0)               value=0; else               value=100 * getChartData().getValueAsDouble(series,className) / total;            } else             if (scalingType == ChartViewer.ScalingType.LOG) {              value=getChartData().getValueAsDouble(series,className);              if (value > 0)               value=Math.log10(value);            } else             if (scalingType == ChartViewer.ScalingType.SQRT) {              value=getChartData().getValueAsDouble(series,className);              if (value > 0)               value=Math.sqrt(value);            } else             value=getChartData().getValueAsDouble(series,className);            double radius=(level - 1) * radiusFactor + value * barFactor;            Rectangle2D rect=new Rectangle2D.Double(center.getX() - radius,center.getY() - radius,2 * radius,2 * radius);            Arc2D arc=new Arc2D.Double(rect,modulo360(angleV + used + angleOffset),part,Arc2D.PIE);            used+=part;            if (colorBySeries) {              gc.setColor(getChartColors().getSampleColor(series));            } else {              Color color=getChartColors().getClassColor(class2HigherClassMapper.get(className));              gc.setColor(color.brighter());            }            if (sgc != null)             sgc.setCurrentItem(new String[]{series,className});            gc.fill(arc);            gc.setColor(Color.GRAY);            gc.draw(arc);            if (sgc != null)             sgc.clearCurrentItem();            if (getChartData().getChartSelection().isSelected(series,null)) {              gc.setStroke(HEAVY_STROKE);              gc.setColor(ProgramProperties.SELECTION_COLOR);              gc.draw(arc);              double textAngle=Geometry.deg2rad(360 - (arc.getAngleStart() + arc.getAngleExtent() / 2));              Point2D apt=Geometry.translateByAngle(center,textAngle,radius + 2);              String label="" + getChartData().getValueAsDouble(series,className);              gc.setColor(ProgramProperties.SELECTION_COLOR_ADDITIONAL_TEXT);              drawString(gc,label,apt.getX(),apt.getY(),textAngle);              radius=(level - 1) * radiusFactor + 2;              rect.setRect(center.getX() - radius,center.getY() - radius,2 * radius,2 * radius);              arc.setFrame(rect);              gc.setColor(ProgramProperties.SELECTION_COLOR);              arc.setArcType(Arc2D.OPEN);              gc.draw(arc);              gc.setColor(Color.BLACK);              gc.setStroke(NORMAL_STROKE);            }          }        }      }      if (what == DrawWhat.RegionsAndBars && classIsSelected) {        double radius=(v.getOutDegree() > 0 ? level : maxLevel) * radiusFactor;        Rectangle2D rect=new Rectangle2D.Double(center.getX() - radius,center.getY() - radius,2 * radius,2 * radius);        Arc2D arc=new Arc2D.Double(rect,modulo360(angleV + angleOffset),extentV,Arc2D.PIE);        gc.setStroke(HEAVY_STROKE);        gc.setColor(ProgramProperties.SELECTION_COLOR);        gc.draw(arc);        radius=(level - 1) * radiusFactor + 2;        rect.setRect(center.getX() - radius,center.getY() - radius,2 * radius,2 * radius);        arc.setFrame(rect);        arc.setArcType(Arc2D.OPEN);        gc.draw(arc);        gc.setColor(Color.BLACK);        gc.setStroke(NORMAL_STROKE);      }      if (what == DrawWhat.Names || what == DrawWhat.Selection) {        if (v.getOutDegree() > 0) {          if (showInternalLabels) {            Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();            double angleInDeg=modulo360(angleV + angleOffset + extentV / 2.0);            double angleInRad=Geometry.deg2rad(270.0 - (angleV + angleOffset + extentV / 2.0));            double top=2;            for (double shift=0.3; shift < top; shift+=0.1) {              Point2D apt=Geometry.translateByAngle(center,Geometry.deg2rad(angleInDeg),(level - (1 - shift)) * radiusFactor);              apt.setLocation(apt.getX(),2 * center.getY() - apt.getY());              apt=Geometry.translateByAngle(apt,angleInRad,-labelSize.width / 2);              angleInRad=Geometry.deg2rad(270.0 - (angleV + angleOffset + extentV / 2.0));              if (shift < top - 0.05) {                Shape shape=getLabelShape(apt,labelSize,angleInRad);                boolean collision=false;                for (                Area aArea : areas) {                  Area area=new Area(shape);                  if (area.getBounds().intersects(aArea.getBounds())) {                    area.intersect(aArea);                    if (!area.isEmpty()) {                      collision=true;                      break;                    }                  }                }                if (collision)                 continue;              } else {                shift=0.3;                apt=Geometry.translateByAngle(center,Geometry.deg2rad(angleInDeg),(level - shift) * radiusFactor);                apt.setLocation(apt.getX(),2 * center.getY() - apt.getY());                apt=Geometry.translateByAngle(apt,angleInRad,-labelSize.width / 2);                angleInRad=Geometry.deg2rad(270.0 - (angleV + angleOffset + extentV / 2.0));              }              areas.add(new Area(getLabelShape(apt,labelSize,angleInRad)));              if ((what == DrawWhat.Names && extentV > 2) || classIsSelected) {                if (sgc != null)                 sgc.setCurrentItem(new String[]{null,className});                if (classIsSelected) {                  gc.setColor(ProgramProperties.SELECTION_COLOR);                  fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,angleInRad,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);                }                gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));                drawString(gc,className,apt.getX(),apt.getY(),angleInRad);                if (classIsSelected)                 gc.setColor(Color.BLACK);                if (sgc != null)                 sgc.clearCurrentItem();              }              break;            }          }        } else {          if ((extentV > 2 && what == DrawWhat.Names) || classIsSelected) {            double angleInRad=Geometry.deg2rad(360.0 - (angleV + angleOffset + extentV / 2.0));            Point2D apt=Geometry.translateByAngle(center,angleInRad,(maxLevel - 0.5) * radiusFactor + 5);            Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();            if (sgc != null)             sgc.setCurrentItem(new String[]{null,className});            if (classIsSelected) {              gc.setColor(ProgramProperties.SELECTION_COLOR);              fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,angleInRad,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);            }            gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));            drawString(gc,className,apt.getX(),apt.getY(),angleInRad);            if (classIsSelected)             gc.setColor(Color.BLACK);            if (sgc != null)             sgc.clearCurrentItem();          }        }      }      if ((what == DrawWhat.Values && !classIsSelected) || (what == DrawWhat.Selection && classIsSelected)) {        if (extentV > 2 || classIsSelected) {          Point2D apt=Geometry.translateByAngle(center,Geometry.deg2rad(angleV + angleOffset + extentV / 2),(level - 0.5) * radiusFactor);          apt.setLocation(apt.getX(),2 * center.getY() - apt.getY());          String label="" + (int)getChartData().getTotalForClass(className);          Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();          if (classIsSelected)           gc.setColor(ProgramProperties.SELECTION_COLOR_ADDITIONAL_TEXT);          gc.drawString(label,(int)(apt.getX() - labelSize.width / 2),(int)apt.getY() + labelSize.height + 3);          if (classIsSelected)           gc.setColor(Color.BLACK);        }      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Protect_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200855,skillcaster,num0,skillname);}  }
class C{  public void writeString(String value) throws JMSException {  initializeWriting();  try {    if (value == null) {      this.dataOut.write(_NULL);    } else {      this.dataOut.write(_STRING);      this.dataOut.writeUTF(value);    }  } catch (  IOException ioe) {    raise(ioe);  }}  }
class C{  public EquipmentConfiguration createEquipmentConfiguration(final Element equipmentUnit) throws Exception {  String eqID=equipmentUnit.getAttribute(ID_ATTRIBUTE);  log.debug("EQ ID : " + eqID);  String eqName=equipmentUnit.getAttribute(NAME_ATTRIBUTE);  EquipmentConfiguration equipmentConfiguration=new EquipmentConfiguration();  try {    equipmentConfiguration.setId(Long.parseLong(eqID));    equipmentConfiguration.setName(eqName);    equipmentConfiguration.setHandlerClassName(getTagValue(equipmentUnit,HANDLER_CLASS_NAME_ELEMENT).trim());    equipmentConfiguration.setCommFaultTagId(Long.parseLong(getTagValue(equipmentUnit,COMMFAULT_TAG_ID_ELEMENT)));    equipmentConfiguration.setCommFaultTagValue(Boolean.parseBoolean(getTagValue(equipmentUnit,COMMFAULT_TAG_VALUE_ELEMENT)));    try {      equipmentConfiguration.setAliveTagId(Long.parseLong(getTagValue(equipmentUnit,ALIVE_TAG_ID_ELEMENT)));    } catch (    NullPointerException ex) {      log.debug("Equipment {} has no alive Tag id.",equipmentConfiguration.getName());    }    try {      equipmentConfiguration.setAliveTagInterval(Long.parseLong(getTagValue(equipmentUnit,ALIVE_INTERVAL_ELEMENT)));    } catch (    NullPointerException ex) {      log.debug("Equipment {} has no alive Tag interval.",equipmentConfiguration.getName());    }    try {      equipmentConfiguration.setEquipmentAddress(getTagValue(equipmentUnit,ADDRESS_ELEMENT));    } catch (    NullPointerException ex) {      equipmentConfiguration.setEquipmentAddress(null);    }  }  finally {  }  processSubEquipmentUnits(equipmentUnit,equipmentConfiguration);  processDataTags(equipmentUnit,equipmentConfiguration);  processCommandTags(equipmentUnit,equipmentConfiguration);  return equipmentConfiguration;}  }
class C{  public MultipartParser(HttpRequest req,int maxSize) throws IOException {  this(req,maxSize,true,true);}  }
class C{  private double calculateMaxMembershipChange(final double[][] matrix){  double maxMembership=0.0;  for (int i=0; i < points.size(); i++) {    for (int j=0; j < clusters.size(); j++) {      double v=FastMath.abs(membershipMatrix[i][j] - matrix[i][j]);      maxMembership=FastMath.max(v,maxMembership);    }  }  return maxMembership;}  }
class C{  XSParticleDecl traverseChoice(Element choiceDecl,XSDocumentInfo schemaDoc,SchemaGrammar grammar,int allContextFlags,XSObject parent){  return traverseSeqChoice(choiceDecl,schemaDoc,grammar,allContextFlags,true,parent);}  }
class C{  private Target determineInitialTargetLocation(Element rulePart,Element syllable,boolean isFirstInPhrase,char prevTone,Element prevToneSyllable){  if (rulePart == null || !rulePart.getTagName().equals("target") || syllable == null || !syllable.getTagName().equals(MaryXML.SYLLABLE)) {    return null;  }  if (rulePart.hasAttribute("condition")) {    String condition=rulePart.getAttribute("condition");    if (condition.equals("first_in_IP") && !isFirstInPhrase) {      return null;    } else     if (condition.equals("prevtone_H") && prevTone != 'H') {      return null;    } else     if (condition.equals("prevtone_L") && prevTone != 'L') {      return null;    }  }  Element segment=null;  int timing=-1;  String tCode=rulePart.getAttribute("t_code");  if (tCode.equals("0")) {    Element phrase=(Element)DomUtils.getAncestor(syllable,MaryXML.PHRASE);    segment=DomUtils.getFirstElementByTagName(phrase,MaryXML.PHONE);    timing=0;  } else   if (tCode.equals("12")) {    Element prevSyl=getPreviousSyllable(syllable);    if (prevSyl == null) {    } else {      Element nucleus=getNucleus(prevSyl);      if (nucleus == null)       segment=DomUtils.getFirstElementByTagName(prevSyl,MaryXML.PHONE); else       segment=nucleus;      timing=0;    }  } else   if (tCode.equals("21")) {    segment=DomUtils.getFirstElementByTagName(syllable,MaryXML.PHONE);    timing=0;  } else   if (tCode.equals("22")) {    Element nucleus=getNucleus(syllable);    if (nucleus == null)     segment=DomUtils.getFirstElementByTagName(syllable,MaryXML.PHONE); else     segment=nucleus;    timing=0;  } else   if (tCode.equals("23")) {    Element nucleus=getNucleus(syllable);    if (nucleus == null)     segment=DomUtils.getFirstElementByTagName(syllable,MaryXML.PHONE); else     segment=nucleus;    timing=50;  } else   if (tCode.equals("24")) {    Element nucleus=getNucleus(syllable);    if (nucleus == null)     segment=DomUtils.getLastElementByTagName(syllable,MaryXML.PHONE); else     segment=nucleus;    timing=100;  } else   if (tCode.equals("25")) {    segment=DomUtils.getLastElementByTagName(syllable,MaryXML.PHONE);    timing=100;  } else   if (tCode.equals("34")) {    Element nextSyl=getNextSyllable(syllable);    if (nextSyl == null) {    } else {      Element nucleus=getNucleus(nextSyl);      if (nucleus == null)       segment=DomUtils.getLastElementByTagName(nextSyl,MaryXML.PHONE); else       segment=nucleus;      timing=100;    }  } else   if (tCode.equals("99")) {    Element syl=getNextSyllable(prevToneSyllable);    if (syl == null) {    } else {      Element nucleus=getNucleus(syl);      if (nucleus == null)       segment=DomUtils.getFirstElementByTagName(syl,MaryXML.PHONE); else       segment=nucleus;      timing=50;    }  } else   if (tCode.equals("98")) {    Element syl=getNextSyllable(prevToneSyllable);    if (syl == null) {    } else {      syl=getNextSyllable(syl);      if (syl == null) {      } else {        Element fallback=syl;        while (syl != null && !(syl.getAttribute("stress").equals("1") || syl.getAttribute("stress").equals("2"))) {          syl=getNextSyllable(syl);        }        if (syl == null)         syl=fallback;        Element nucleus=getNucleus(syl);        if (nucleus == null)         segment=DomUtils.getFirstElementByTagName(syl,MaryXML.PHONE); else         segment=nucleus;        timing=50;      }    }  }  if (segment == null || timing == -1) {    Log.d(Mary.LOG,"  Target (" + rulePart.getAttribute("f0") + ") could not be attached. skipping.");    return null;  }  return new Target(rulePart,segment,timing,0);}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public int put(final int key,final int value){  if (key == FREE_KEY) {    final int ret=m_freeValue;    if (!m_hasFreeKey)     ++m_size;    m_hasFreeKey=true;    m_freeValue=value;    return ret;  }  int ptr=(Tools.phiMix(key) & m_mask) << 1;  int k=m_data[ptr];  if (k == FREE_KEY) {    m_data[ptr]=key;    m_data[ptr + 1]=value;    if (m_size >= m_threshold)     rehash(m_data.length * 2); else     ++m_size;    return NO_VALUE;  } else   if (k == key) {    final int ret=m_data[ptr + 1];    m_data[ptr + 1]=value;    return ret;  }  while (true) {    ptr=(ptr + 2) & m_mask2;    k=m_data[ptr];    if (k == FREE_KEY) {      m_data[ptr]=key;      m_data[ptr + 1]=value;      if (m_size >= m_threshold)       rehash(m_data.length * 2); else       ++m_size;      return NO_VALUE;    } else     if (k == key) {      final int ret=m_data[ptr + 1];      m_data[ptr + 1]=value;      return ret;    }  }}  }
class C{  public void unloadDataStore(){  if (dataStore != null) {    dataStore.dispose();  }}  }
class C{  public static boolean strictlyBetween(Date baseDate,Date startDate,Date endDate){  if (startDate.equals(endDate) || endDate.before(startDate)) {    return false;  }  if (startDate.before(baseDate) && endDate.after(baseDate)) {    return true;  }  return false;}  }
class C{  public TestConfig(TestDataLocator testDataLocator,String tempDir,List<String> protoFiles){  this.testDataLocator=testDataLocator;  this.protoFiles=ImmutableList.copyOf(protoFiles);  this.tempDir=tempDir;  Set<String> extracted=Sets.newHashSet();  for (  String source : protoFiles) {    extractProtoSources(extracted,source);  }  this.descriptorFile=Paths.get(tempDir,"_descriptor.dsc");  compileProtos(tempDir,protoFiles,descriptorFile.toString());}  }
class C{  @Override public Text splitText(int offset) throws DOMException {  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");}  }
class C{  private InputStream saveTmp(InputStream in) throws IOException {  File tmpFile=File.createTempFile("dvs",null);  tmpFile.deleteOnExit();  try (FileOutputStream out=new FileOutputStream(tmpFile)){    IOUtils.copy(in,out);  }   return new BufferedInputStream(new FileInputStream(tmpFile));}  }
class C{  public NGramSizeEstimator(final Distribution tmSymbolsPerRank,final Distribution tmNonSymbolsPerRank){  SymbolsPerRank=new Distribution();  SymbolsPerRank.asTreeMap().putAll(tmSymbolsPerRank.asTreeMap());  NonSymbolsPerRank=new Distribution();  NonSymbolsPerRank.asTreeMap().putAll(tmNonSymbolsPerRank.asTreeMap());  MinRank=Math.min((Integer)tmSymbolsPerRank.asTreeMap().firstKey(),(Integer)tmNonSymbolsPerRank.asTreeMap().firstKey());  MaxRank=Math.max((Integer)tmSymbolsPerRank.asTreeMap().lastKey(),(Integer)tmNonSymbolsPerRank.asTreeMap().lastKey());}  }
class C{  public SQLQuery(String typeName,String sqlExpression){  this(sqlExpression,typeName,null,DEFAULT_QUERY_RESULT_TYPE,null);}  }
class C{  public static RemoteMethodCache createRemoteMethodCache(List<Class<?>> remoteInterfaces,Map<String,Integer> methodMapping,Map<String,LRMIMethodMetadata> overrideMethodsMetadata){  List<IMethod> sortedMethodList=getSortedMethodList(remoteInterfaces);  LRMIMethod[] lrmiMethodList=wrapAsRemoteLRMIMethods(methodMapping,overrideMethodsMetadata,sortedMethodList);  return new RemoteMethodCache(lrmiMethodList);}  }
class C{  public ReadTakeEntriesSpaceOperationResult(){}  }
class C{  public Builder name(final String name){  this.name=name;  return this;}  }
class C{  private static void populateInternal(UILayoutInterface layout){  String className=layout.getClass().getName();  uiLayoutMap.put(className,layout);}  }
class C{  public static String fromChar(int value){  if (value > 0xffff)   return null;  String name;  initialize();  name=(String)_byChar.get(new Integer(value));  return name;}  }
class C{  int next() throws IOException, UnterminatedCommentException {  int c=get();  if (c == '/') {switch (peek()) {case '/':      for (; ; ) {        c=get();        if (c <= '\n') {          return c;        }      }case '*':    get();  for (; ; ) {switch (get()) {case '*':      if (peek() == '/') {        get();        return ' ';      }    break;case EOF:  throw new UnterminatedCommentException();}}default :return c;}}return c;}  }
class C{  public static boolean ensureInlinability(SootMethod target,Stmt toInline,SootMethod container,String modifierOptions){  if (!InlinerSafetyManager.canSafelyInlineInto(target,toInline,container)) {    return false;  }  if (!AccessManager.ensureAccess(container,target,modifierOptions)) {    return false;  }  if (!checkSpecialInlineRestrictions(container,target,modifierOptions)) {    return false;  }  if (!checkAccessRestrictions(container,target,modifierOptions)) {    return false;  }  return true;}  }
class C{  @RequestMapping(value="profiles",method=RequestMethod.POST) public Profile create(final @Validated @RequestBody Profile profile,final Principal principal){  logger.info("create invoked");  printGrantedAuthorities((Auth0JWTToken)principal);  if ("ROLES".equals(appConfig.getAuthorityStrategy())) {    final String username=usernameService.getUsername();    logger.info("User with email: " + username + " creating new profile");  }  return profileService.create(profile);}  }
class C{  @deprecated public boolean isAlias(){  return ICUResourceBundleReader.RES_GET_TYPE(this.resource) == 3;}  }
class C{  public static StorableLocationFence in(double latitude,double longitude,double radius,long dwellTimeMillis){  return new StorableLocationFence(IN_TYPE,latitude,longitude,radius,dwellTimeMillis);}  }
class C{  public static short readSignedShort(byte[] bytes){  return ByteBuffer.wrap(bytes).getShort();}  }
class C{  private static void addFieldNamesToMap(Map<String,FlagField<?>> map,Set<FlagField<?>> fields,Function<FlagField<?>,String> fieldNameGetter) throws FlagException.NameConflict {  for (  FlagField field : fields) {    String name=fieldNameGetter.apply(field);    if (Strings.isNullOrEmpty(name)) {      continue;    }    FlagField previousExisted=map.put(name,field);    if (previousExisted != null) {      throw new FlagException.NameConflict(previousExisted,field);    }  }}  }
class C{  public void cipher(byte[] data){  cipher(data,0,data.length);}  }
class C{  public boolean isOrganisationUnitMode(OrganisationUnitSelectionMode mode){  return organisationUnitMode != null && organisationUnitMode.equals(mode);}  }
class C{  public void endDocument(){  int count=fValueStores.size();  for (int i=0; i < count; i++) {    ValueStoreBase valueStore=(ValueStoreBase)fValueStores.get(i);    valueStore.endDocument();  }}  }
class C{  public Distribution centroid(){  if (isEmpty())   return null;  Distribution dRes=new Distribution();  Iterator iVectorIter=iterator();  while (iVectorIter.hasNext()) {    Distribution dCurVector=(Distribution)iVectorIter.next();    Iterator iFeatures=dCurVector.asTreeMap().keySet().iterator();    while (iFeatures.hasNext()) {      Object oFeatureKey=iFeatures.next();    }  }  return null;}  }
class C{  private void generateActivityLifecycle(Set<String> entryPoints,SootClass currentClass,JNopStmt endClassStmt,Local classLocal){  createIfStmt(endClassStmt);  Set<SootClass> referenceClasses=new HashSet<SootClass>();  if (applicationClass != null)   referenceClasses.add(applicationClass);  for (  SootClass callbackClass : this.applicationCallbackClasses)   referenceClasses.add(callbackClass);  referenceClasses.add(currentClass);  Stmt onCreateStmt=new JNopStmt();  body.getUnits().add(onCreateStmt);{    Stmt onCreateStmt2=searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONCREATE,currentClass,entryPoints,classLocal);    boolean found=addCallbackMethods(applicationClass,referenceClasses,AndroidEntryPointConstants.APPLIFECYCLECALLBACK_ONACTIVITYCREATED);    if (found && onCreateStmt2 != null)     createIfStmt(onCreateStmt2);  }  Stmt onStartStmt=new JNopStmt();  body.getUnits().add(onStartStmt);{    Stmt onStartStmt2=searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONSTART,currentClass,entryPoints,classLocal);    boolean found=addCallbackMethods(applicationClass,referenceClasses,AndroidEntryPointConstants.APPLIFECYCLECALLBACK_ONACTIVITYSTARTED);    if (found && onStartStmt2 != null)     createIfStmt(onStartStmt2);  }  searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONRESTOREINSTANCESTATE,currentClass,entryPoints,classLocal);  searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONPOSTCREATE,currentClass,entryPoints,classLocal);  Stmt onResumeStmt=new JNopStmt();  body.getUnits().add(onResumeStmt);{    Stmt onResumeStmt2=searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONRESUME,currentClass,entryPoints,classLocal);    boolean found=addCallbackMethods(applicationClass,referenceClasses,AndroidEntryPointConstants.APPLIFECYCLECALLBACK_ONACTIVITYRESUMED);    if (found && onResumeStmt2 != null)     createIfStmt(onResumeStmt2);  }  searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONPOSTRESUME,currentClass,entryPoints,classLocal);  searchAndBuildMethodWithGetIntent(AndroidEntryPointConstants.ACTIVITY_ONNEWINTENT,currentClass,entryPoints,classLocal);  Set<SootMethod> methodsToInvoke=new HashSet<SootMethod>();  if (modelAdditionalMethods)   for (  SootMethod currentMethod : currentClass.getMethods())   if (entryPoints.contains(currentMethod.toString()) && !AndroidEntryPointConstants.getActivityLifecycleMethods().contains(currentMethod.getSubSignature()))   methodsToInvoke.add(currentMethod);  if (!JadeCfg.isEnhance_callback_body()) {    System.out.println("jade body enhancement not enabled, fallback to default callback impl.");    boolean hasCallbacks=this.callbackFunctions.containsKey(currentClass.getName());    if (!methodsToInvoke.isEmpty() || hasCallbacks) {      JNopStmt startWhileStmt=new JNopStmt();      JNopStmt endWhileStmt=new JNopStmt();      body.getUnits().add(startWhileStmt);      createIfStmt(endWhileStmt);      addCallbackMethods(currentClass);      boolean hasAdditionalMethods=false;      for (      SootMethod currentMethod : currentClass.getMethods())       if (entryPoints.contains(currentMethod.toString()))       hasAdditionalMethods|=createPlainMethodCall(classLocal,currentMethod);      body.getUnits().add(endWhileStmt);      if (hasAdditionalMethods)       createIfStmt(startWhileStmt);    }  } else {    System.out.println("jade body enhancement enabled, not enabling default callback impl in dummyMain.");  }  Stmt onPause=searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONPAUSE,currentClass,entryPoints,classLocal);  boolean hasAppOnPause=addCallbackMethods(applicationClass,referenceClasses,AndroidEntryPointConstants.APPLIFECYCLECALLBACK_ONACTIVITYPAUSED);  if (hasAppOnPause && onPause != null)   createIfStmt(onPause);  searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONCREATEDESCRIPTION,currentClass,entryPoints,classLocal);  Stmt onSaveInstance=searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONSAVEINSTANCESTATE,currentClass,entryPoints,classLocal);  boolean hasAppOnSaveInstance=addCallbackMethods(applicationClass,referenceClasses,AndroidEntryPointConstants.APPLIFECYCLECALLBACK_ONACTIVITYSAVEINSTANCESTATE);  if (hasAppOnSaveInstance && onSaveInstance != null)   createIfStmt(onSaveInstance);  createIfStmt(onResumeStmt);  Stmt onStop=searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONSTOP,currentClass,entryPoints,classLocal);  boolean hasAppOnStop=addCallbackMethods(applicationClass,referenceClasses,AndroidEntryPointConstants.APPLIFECYCLECALLBACK_ONACTIVITYSTOPPED);  if (hasAppOnStop && onStop != null)   createIfStmt(onStop);  JNopStmt stopToDestroyStmt=new JNopStmt();  createIfStmt(stopToDestroyStmt);  searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONRESTART,currentClass,entryPoints,classLocal);  createIfStmt(onStartStmt);  body.getUnits().add(stopToDestroyStmt);  Stmt onDestroy=searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONDESTROY,currentClass,entryPoints,classLocal);  boolean hasAppOnDestroy=addCallbackMethods(applicationClass,referenceClasses,AndroidEntryPointConstants.APPLIFECYCLECALLBACK_ONACTIVITYDESTROYED);  if (hasAppOnDestroy && onDestroy != null)   createIfStmt(onDestroy);  createIfStmt(endClassStmt);}  }
class C{  public ReadModifiers(){}  }
class C{  protected final void fireColumnEvent(int idx,long prev){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);}  }
class C{  public static StorableTimeFence inSaturdayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){  return new StorableTimeFence(SATURDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);}  }
class C{  @Override public boolean containsAll(Collection<?> collection){  Iterator<?> it=collection.iterator();  while (it.hasNext()) {    if (!contains(it.next())) {      return false;    }  }  return true;}  }
class C{  public Builder withVerbosity(){  this.verbose=true;  return this;}  }
class C{  @Override public boolean treeExpanded(Object selectedItem){  return false;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  @Override public boolean checkCondition(){  return !group.hasMember(enteredPlayer.getObjectId());}  }
class C{  @Override public void onSensorSelectionClosed(DialogFragment dialog){  Log.d(TAG,"Sensor selection closed");  sensorSelectionDialog=null;}  }
class C{  @Override public void actionPerformed(ActionEvent event){  final ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();  importBlastDialog.apply();  try {    importBlastDialog.destroyView();  } catch (  CanceledException e) {    Basic.caught(e);  }}  }
class C{  private void initializePreferredResources() throws IOException {  assert Thread.holdsLock(this);  assert preferredResources == null;  if (firstURL != null) {    InputStream prefIn=getPreferredInputStream(firstURL);    if (prefIn != null) {      try {        preferredResources=new PreferredResources(prefIn);      }  finally {        try {          prefIn.close();        } catch (        IOException e) {        }      }    }  }}  }
class C{  public Builder bkConf(ServerConfiguration bkConf){  this._bkConf=bkConf;  return this;}  }
class C{  @Deployment public void testWhitespaceInExpression(){  runtimeService.startProcessInstanceByKey("whiteSpaceInExpression",CollectionUtil.singletonMap("input",1));}  }
class C{  public String toString(){  return getName();}  }
class C{  @Override public void revertToDefaultValue(){  if (this.checkBox != null) {    checkBox.setSelected(defaultValue);  }}  }
class C{  @NotNull private static List<IDevice> findDevices(@Nullable Project project){  if (project == null) {    return Collections.emptyList();  }  List<RunContentDescriptor> runningProcesses=ExecutionManager.getInstance(project).getContentManager().getAllDescriptors();  if (runningProcesses.isEmpty()) {    return Collections.emptyList();  }  List<IDevice> devices=Lists.newArrayList();  for (  RunContentDescriptor descriptor : runningProcesses) {    ProcessHandler processHandler=descriptor.getProcessHandler();    if (processHandler == null || processHandler.isProcessTerminated() || processHandler.isProcessTerminating()) {      continue;    }    devices.addAll(getConnectedDevices(processHandler));  }  return devices;}  }
class C{  @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  public PopulatedRoleAuthority(String role,Authority[] authorities){  super(role);  this.authorities=authorities;}  }
class C{  protected String distanceAlign(String in,String out){  String[] istr=in.split(Pattern.quote(entrySeparator));  String[] ostr=out.split(Pattern.quote(entrySeparator));  String delim="#";  int[] p_d=new int[ostr.length + 1];  int[] d=new int[ostr.length + 1];  int[] _d;  boolean[] p_sk=new boolean[ostr.length + 1];  boolean[] sk=new boolean[ostr.length + 1];  boolean[] _sk;  String[] p_al=new String[ostr.length + 1];  String[] al=new String[ostr.length + 1];  String[] _al;  p_d[0]=0;  p_al[0]="";  p_sk[0]=true;  for (int j=1; j < ostr.length + 1; j++) {    p_al[j]=p_al[j - 1] + " " + ostr[j - 1];    p_d[j]=p_d[j - 1] + symDist(istr[0],ostr[j - 1]);    p_sk[j]=false;  }  int skConst=this.skipcost;  for (int i=1; i < istr.length; i++) {    d[0]=p_d[0] + skConst;    al[0]=p_al[0] + " " + delim;    sk[0]=true;    for (int j=1; j < ostr.length + 1; j++) {      int tr_cost=symDist(istr[i],ostr[j - 1]);      int sk_cost=p_sk[j] ? skConst : 0;      if (sk_cost + p_d[j] < tr_cost + d[j - 1]) {        d[j]=sk_cost + p_d[j];        al[j]=p_al[j] + " " + delim;        sk[j]=true;      } else {        d[j]=tr_cost + d[j - 1];        al[j]=al[j - 1] + " " + ostr[j - 1];        sk[j]=false;      }    }    _d=p_d;    p_d=d;    d=_d;    _sk=p_sk;    p_sk=sk;    sk=_sk;    _al=p_al;    p_al=al;    al=_al;  }  return p_al[ostr.length];}  }
class C{  @Override public void updateValue(String key,List<String> stringList){  StringBuilder sb=new StringBuilder();  for (  String string : stringList) {    if (sb.length() > 0) {      sb.append(LIST_DELIMETER);    }    sb.append(string);  }  updateValue(key,sb.toString());}  }
class C{  public VideoEditAlbumQuery editAlbum(UserActor actor,int albumId,String title){  return new VideoEditAlbumQuery(getClient(),actor,albumId,title);}  }
class C{  @Override public Vector2D toSubSpace(final Point<Euclidean3D> point){  final Vector3D p3D=(Vector3D)point;  return new Vector2D(p3D.dotProduct(u),p3D.dotProduct(v));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_FPHeal_TO_OTHER(String value0,int num1){  return new SM_SYSTEM_MESSAGE(1201200,value0,num1);}  }
class C{  public static double max(final double... values) throws MathIllegalArgumentException {  return MAX.evaluate(values);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set index=" + UniFrac.TOPOLOGICAL_UNIFRAC + ";");}  }
class C{  public static Object objectFromByteBuffer(byte[] buffer) throws Exception {  if (buffer == null)   return null;  ByteArrayInputStream inStream=new ByteArrayInputStream(buffer);  ObjectInputStream in=new ObjectInputStream(inStream);  Object retval=in.readObject();  in.close();  return retval;}  }
class C{  public static <T>CompletableSubject<T> create(){  return new CompletableSubject<T>();}  }
class C{  public <T>Future execute(int times,CompletionCallback<List<T>> callback){  if (callback == null)   throw new IllegalArgumentException("Callback cannot be null");  TaskManagerImpl<T> taskManager=new TaskManagerImpl(this.executor_,this.task_,times,callback);  this.executor_.execute(taskManager);  return new Future(taskManager);}  }
class C{  public boolean update(final TagUpdate tagUpdate) throws RuleFormatException {  Tag clone=null;  boolean valid=false;  updateTagLock.writeLock().lock();  try {    valid=isValidUpdate(tagUpdate);    if (valid) {      if (tagUpdate.getRuleExpression() != null) {        ruleExpression=RuleExpression.createExpression(tagUpdate.getRuleExpression());      }      doUpdateValues(tagUpdate);      Map<Long,SupervisionEvent> updatedProcessMap=new HashMap<Long,SupervisionEvent>();      for (      Long processId : tagUpdate.getProcessIds()) {        updatedProcessMap.put(processId,processSupervisionStatus.get(processId));      }      processSupervisionStatus=updatedProcessMap;      Map<Long,SupervisionEvent> updatedEquipmentMap=new HashMap<Long,SupervisionEvent>();      for (      Long equipmentId : tagUpdate.getEquipmentIds()) {        updatedEquipmentMap.put(equipmentId,equipmentSupervisionStatus.get(equipmentId));      }      equipmentSupervisionStatus=updatedEquipmentMap;      Map<Long,SupervisionEvent> updatedSubEquipmentMap=new HashMap<Long,SupervisionEvent>();      for (      Long subEquipmentId : tagUpdate.getSubEquipmentIds()) {        updatedSubEquipmentMap.put(subEquipmentId,subEquipmentSupervisionStatus.get(subEquipmentId));      }      subEquipmentSupervisionStatus=updatedSubEquipmentMap;      tagName=tagUpdate.getName();      topicName=tagUpdate.getTopicName();      unit=tagUpdate.getUnit();      aliveTagFlag=tagUpdate.isAliveTag();      controlTagFlag=tagUpdate.isControlTag();      this.metadata=tagUpdate.getMetadata();      clone=this.clone();    }  }  finally {    updateTagLock.writeLock().unlock();  }  if (clone != null) {    notifyListeners(clone);  }  return valid;}  }
class C{  public static List<QueryResponseJSON> readResultsFile(File file) throws IOException {  List<QueryResponseJSON> results=new ArrayList<>();  try (BufferedReader br=new BufferedReader(new FileReader(file))){    String line;    while ((line=br.readLine()) != null) {      QueryResponseJSON jsonResult=new QueryResponseJSON(line);      results.add(jsonResult);    }  }   return results;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIND_POS_NO_NPC_IN_THIS_WORLD(String value0){  return new SM_SYSTEM_MESSAGE(1300752,value0);}  }
class C{  @SubscribeEvent public void saveFoodSystem(PlayerLoggedOutEvent event){  if (!(event.player.getFoodStats() instanceof BWMFoodStats))   return;  event.player.getFoodStats().writeNBT(event.player.getEntityData());}  }
class C{  public static <T>void publishService(ProviderConfig<T> providerConfig) throws RpcException {  if (StringUtils.isBlank(providerConfig.getUrl())) {    providerConfig.setUrl(getServiceUrl(providerConfig));  }  try {    ServicePublisher.publishService(providerConfig,true);  } catch (  RegistryException t) {    throw new RpcException("error while publishing service:" + providerConfig,t);  }}  }
class C{  private void drawTitle(Graphics2D gc,Dimension size){  gc.setFont(getFont(ChartViewer.FontKeys.TitleFont.toString()));  if (chartTitle != null) {    Dimension labelSize=Basic.getStringSize(gc,chartTitle,gc.getFont()).getSize();    if (size != null) {      size.setSize(labelSize.getWidth(),labelSize.getHeight() + 20);      return;    }    int x=(getWidth() - labelSize.width) / 2;    int y=labelSize.height;    gc.setColor(getFontColor(ChartViewer.FontKeys.TitleFont.toString(),Color.BLACK));    gc.drawString(chartTitle,x,y);  } else   if (size != null)   size.setSize(0,20);}  }
class C{  public static Dfp pow(Dfp base,int a){  boolean invert=false;  Dfp result=base.getOne();  if (a == 0) {    return result;  }  if (a < 0) {    invert=true;    a=-a;  }  do {    Dfp r=new Dfp(base);    Dfp prevr;    int trial=1;    int prevtrial;    do {      prevr=new Dfp(r);      prevtrial=trial;      r=r.multiply(r);      trial*=2;    } while (a > trial);    r=prevr;    trial=prevtrial;    a-=trial;    result=result.multiply(r);  } while (a >= 1);  if (invert) {    result=base.getOne().divide(result);  }  return base.newInstance(result);}  }
class C{  public boolean sendEquipmentAlive(final SourceDataTag aliveTag,ValueUpdate update){  if (TypeConverter.isConvertible(update.getValue(),aliveTag.getDataType())) {    Object convertedTagValue=TypeConverter.cast(update.getValue(),aliveTag.getDataType());    update.setValue(convertedTagValue);    SourceDataTagValue aliveTagValue=aliveTag.update(update);    this.equipmentLogger.debug("sendEquipmentAlive() - Sending equipment alive message with source timestamp " + update.getSourceTimestamp());    return sendEquipmentAliveFiltered(aliveTagValue,update.getSourceTimestamp());  } else {    this.equipmentLogger.warn("sendEquipmentAlive() - Value [" + update.getValue() + "] received for alive tag #"+ aliveTag.getId()+ " is not convertible to data type "+ aliveTag.getDataType()+ ". Trying to send the current timestamp as number instead.");    return sendEquipmentAlive(aliveTag);  }}  }
class C{  public JSONWriter(Writer w){  this.comma=false;  this.mode='i';  this.stack=new JSONObject[maxdepth];  this.top=0;  this.writer=w;}  }
class C{  public void seek(final long offset) throws IOException {  pos=(int)offset;}  }
class C{  public void addToken(ClipboardToken token){  tokens.add(token);  saveTokenChanges();}  }
class C{  public synchronized void progressStop(){  if (this.progressDialog != null) {    this.progressDialog.dismiss();    this.progressDialog=null;  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set colorMatchesVsConsensus=" + (!isSelected()) + ";");}  }
class C{  public void update(LineEvent event){  if (event.getType().equals(LineEvent.Type.START)) {    debugPrint("Event  START");  } else   if (event.getType().equals(LineEvent.Type.STOP)) {    debugPrint("Event  STOP");synchronized (JavaClipAudioPlayer.this) {      JavaClipAudioPlayer.this.notifyAll();    }  } else   if (event.getType().equals(LineEvent.Type.OPEN)) {    debugPrint("Event OPEN");  } else   if (event.getType().equals(LineEvent.Type.CLOSE)) {    debugPrint("EVNT CLOSE");synchronized (JavaClipAudioPlayer.this) {      JavaClipAudioPlayer.this.notifyAll();    }  }}  }
class C{  private void initialize(String roots) throws BindException {  initialize(roots,null);}  }
class C{  private void drawHorizontal(Canvas c,RecyclerView parent){  final int top=parent.getPaddingTop();  final int bottom=parent.getHeight() - parent.getPaddingBottom();  final int childCount=parent.getChildCount();  for (int i=0; i < childCount; i++) {    final View child=parent.getChildAt(i);    final RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();    final int left=child.getRight() + params.rightMargin;    final int right=left + divider.getIntrinsicHeight();    divider.setBounds(left,top,right,bottom);    divider.draw(c);  }}  }
class C{  public boolean isPersistent(){  return persistent;}  }
class C{  private Elem parseExpr(TokenStream tokens){  Elem expr=parsePrimaryExpr(tokens);  Operator.Kind operator=parseOperator(tokens);  if (operator != null) {    Elem right=parsePrimaryExpr(tokens);    if (expr != null && right != null) {      expr=Elem.Operator.create(input.location(),operator,expr,right);    }  }  return expr;}  }
class C{  public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> originalConstraints){  List<LinearConstraint> normalized=new ArrayList<LinearConstraint>(originalConstraints.size());  for (  LinearConstraint constraint : originalConstraints) {    normalized.add(normalize(constraint));  }  return normalized;}  }
class C{  private void createLabeled(polyglot.ast.Labeled labeledStmt){  String label=labeledStmt.label();  polyglot.ast.Stmt stmt=labeledStmt.statement();  soot.jimple.Stmt noop=soot.jimple.Jimple.v().newNopStmt();  if (!(stmt instanceof polyglot.ast.For) && !(stmt instanceof polyglot.ast.Do)) {    body.getUnits().add(noop);  }  if (labelMap == null) {    labelMap=new HashMap<polyglot.ast.Stmt,Stmt>();  }  labelMap.put(stmt,noop);  if (labelBreakMap == null) {    labelBreakMap=new HashMap<String,Stmt>();  }  if (labelContinueMap == null) {    labelContinueMap=new HashMap<String,Stmt>();  }  labelContinueMap.put(label,noop);  soot.jimple.Stmt noop2=soot.jimple.Jimple.v().newNopStmt();  labelBreakMap.put(label,noop2);  createStmt(stmt);  body.getUnits().add(noop2);}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent intent){}  }
class C{  protected HashMap<Value,Object> newInitialFlow(){  HashMap<Value,Object> m=new HashMap<Value,Object>();  for (  Value l : (Collection<Value>)localsAndFieldRefs) {    m.put(l,NOTHING);  }  return m;}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.i(TAG,"onResume");  startPreview();}  }
class C{  public AxisLayout(String group,String field){  super(group);  m_field=field;}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (obj == null || !(obj.getClass().equals(GroupValue.class)))   return false;  GroupValue gv=(GroupValue)obj;  for (  String fldname : vals.keySet()) {    Constant v1=vals.get(fldname);    Constant v2=gv.getVal(fldname);    if (!v1.equals(v2))     return false;  }  return true;}  }
class C{  public boolean declaresMethodByName(String name){  checkLevel(SIGNATURES);  for (  SootMethod method : methodList) {    if (method.getName().equals(name))     return true;  }  return false;}  }
class C{  public void onProcessDisconnection(){  LOGGER.info("Disconnection");  LOGGER.info("{}",this.processConnectionRequest);  this.supervisionManager.onProcessDisconnection(this.processDisconnectionRequest);}  }
class C{  public static Object parseUIFile(String resourceString,String schemaResource,Class<?> classToParse){  return parseFile(UI_RESOURCE_FOLDER,resourceString,schemaResource,classToParse);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_PET_TAME_COMPLETE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400697,value0,value1);}  }
class C{  public MarketSearchQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public void addProperty(String key,String value){  carbonProperties.setProperty(key,value);}  }
class C{  public static boolean isGTKLookAndFeel(){  return UIUtils.isGTKLookAndFeel();}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeFooter(v)) {      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  @Override public void parse(String systemId) throws IOException, SAXException {  setupParse(systemId);  try {    parser.parse(systemId);  } catch (  InternalError ie) {    explain(systemId);    throw ie;  }}  }
class C{  public static IOFileFilter notFileFilter(IOFileFilter filter){  return new NotFileFilter(filter);}  }
class C{  public void initCrashUploadPreference(boolean allowCrashUpload){  SharedPreferences.Editor ed=mSharedPreferences.edit();  if (isMobileNetworkCapable()) {    if (allowCrashUpload) {      ed.putString(PREF_CRASH_DUMP_UPLOAD,mCrashDumpWifiOnlyUpload);    } else {      ed.putString(PREF_CRASH_DUMP_UPLOAD,mCrashDumpNeverUpload);    }  } else {    ed.putString(PREF_CRASH_DUMP_UPLOAD,mCrashDumpNeverUpload);    ed.putBoolean(PREF_CRASH_DUMP_UPLOAD_NO_CELLULAR,allowCrashUpload);  }  ed.apply();  PrefServiceBridge.getInstance().setCrashReporting(allowCrashUpload);}  }
class C{  private String newStableId(int length){  Random random=new Random();  StringBuilder builder=new StringBuilder(length);  for (int index=0; index < length; index++) {    builder.append(STABLE_ID_CHARS.charAt(random.nextInt(STABLE_ID_CHARS.length())));  }  return builder.toString();}  }
class C{  public EnhancedBookmarkRecyclerView(Context context,AttributeSet attrs){  super(context,attrs);  setLayoutManager(new LinearLayoutManager(context));  setHasFixedSize(true);}  }
class C{  public static String base64EncodeByteArray(byte[] bytes){  try {    byte[] encodeBase64=Base64.encodeBase64(bytes);    return new String(encodeBase64,"UTF-8");  } catch (  Exception e) {    throw new RuntimeException("Exception while encoding bytes: " + Arrays.toString(bytes));  }}  }
class C{  public static boolean isUIdContainedInSetOfOpenFiles(String name,long uId){  final Pair<String,Long> pair=new Pair<>(name,uId);  Integer count=openFiles.get(pair);  return count != null && count > 0;}  }
class C{  public DelimitedTextTableReader(String delimiterRegex,ParserFactory pf){  super(pf);  m_delim=delimiterRegex;}  }
class C{  public boolean isValid(String email){  if (email == null) {    return false;  }  if (email.endsWith(".")) {    return false;  }  Matcher emailMatcher=EMAIL_PATTERN.matcher(email);  if (!emailMatcher.matches()) {    return false;  }  if (!isValidUser(emailMatcher.group(1))) {    return false;  }  if (!isValidDomain(emailMatcher.group(2))) {    return false;  }  return true;}  }
class C{  public ClusterUnit(ClusterUnitDatabase db,String name,int start,int end){  this.db=db;  this.start=start;  this.end=end;  this.name=name;}  }
class C{  public Builder imperial(Boolean imperial){  this.imperial=imperial;  return this;}  }
class C{  public Peek with(PeekViewOptions options){  this.options=options;  return this;}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  private void notifyFailsInFavourites(){  if (mFailedResultsCounter > 0) {    NotificationCompat.Builder notificationBuilder=createNotificationBuilder();    notificationBuilder.setTicker(i18n(R.string.sync_fail_in_favourites_ticker));    notificationBuilder.setContentIntent(PendingIntent.getActivity(getContext(),(int)System.currentTimeMillis(),new Intent(),0)).setContentTitle(i18n(R.string.sync_fail_in_favourites_ticker)).setContentText(i18n(R.string.sync_fail_in_favourites_content,mFailedResultsCounter + mConflictsFound,mConflictsFound));    showNotification(R.string.sync_fail_in_favourites_ticker,notificationBuilder);  } else {    NotificationCompat.Builder notificationBuilder=createNotificationBuilder();    notificationBuilder.setTicker(i18n(R.string.sync_conflicts_in_favourites_ticker));    notificationBuilder.setContentIntent(PendingIntent.getActivity(getContext(),(int)System.currentTimeMillis(),new Intent(),0)).setContentTitle(i18n(R.string.sync_conflicts_in_favourites_ticker)).setContentText(i18n(R.string.sync_conflicts_in_favourites_ticker,mConflictsFound));    showNotification(R.string.sync_conflicts_in_favourites_ticker,notificationBuilder);  }}  }
class C{  public boolean addStyleKey(String styleKey){  return styleKeys.add(styleKey);}  }
class C{  public static String formatTimeDiff(long finishTime,long startTime){  long timeDiff=finishTime - startTime;  return formatTime(timeDiff);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UI_COMBAT_NPC_RETURN_ORG(String value0){  return new SM_SYSTEM_MESSAGE(1300133,value0);}  }
class C{  public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;  return this;}  }
class C{  private void unrollConditions(Block block){  if (visitedBlocks.contains(block))   return;  visitedBlocks.add(block);  visitingSuccs.add(block);  for (  Block succ : block.getSuccs()) {    if (visitedBlocks.contains(succ)) {      if (succ != block && visitingSuccs.contains(succ)) {        if (succ.getPreds().size() >= 2 && succ.getSuccs().size() == 2) {          Block condition=succ;          Block loopTailBlock=block;          if (getSize(condition) <= maxSize) {            Unit copiedHead=copyBlock(condition);            Unit loopTail=loopTailBlock.getTail();            if (loopTail instanceof GotoStmt)             ((GotoStmt)loopTail).setTarget(copiedHead); else             if (loopTail instanceof IfStmt) {              if (((IfStmt)loopTail).getTarget() == condition.getHead())               ((IfStmt)loopTail).setTarget(copiedHead); else               insertGotoAfter(loopTail,copiedHead);            } else             insertGotoAfter(loopTail,copiedHead);          }        }      }    } else {      unrollConditions(succ);    }  }  visitingSuccs.remove(block);}  }
class C{  public static ObjectAnimator startNewAnimator(ProgressBar bar,double ratio,long duration){  bar.setMax(MAX_PROGRESS);  final int progress=scaleRatio(ratio);  ObjectAnimator animator=ObjectAnimator.ofInt(bar,"progress",progress,0);  animator.setDuration(duration < 0 ? 0 : duration);  animator.setInterpolator(null);  animator.start();  return animator;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  @JsonIgnore @Override public SketchEstimatePostAggregation withFields(List<PostAggregation> fields){  if (fields.size() != 1) {    LOG.error(INVALID_NUMBER_OF_FIELDS.logFormat(fields));    throw new IllegalArgumentException(INVALID_NUMBER_OF_FIELDS.format(fields));  }  return withField(fields.get(0));}  }
class C{  public void writeMapping(Writer w) throws IOException {  w.write("# Mapping file, generated " + (new Date()) + "\n");  for (  Integer key : id2name.keySet()) {    w.write(key + "\t" + id2name.get(key)+ "\n");  }}  }
class C{  public void add(long x){  Cell[] as;  long b, v;  HashCode hc;  Cell a;  int n;  if ((as=cells) != null || !casBase(b=base,b + x)) {    boolean uncontended=true;    int h=(hc=threadHashCode.get()).code;    if (as == null || (n=as.length) < 1 || (a=as[(n - 1) & h]) == null || !(uncontended=a.cas(v=a.value,v + x)))     retryUpdate(x,hc,uncontended);  }}  }
class C{  protected boolean doesSessionIdInCookieStoreExistAndMatchLatestSessionId(){  logger.debug("Check to see if session id in cookie store matches the session id used to get the latest CSRF token");  String sessionId=getAuthenticationSessionIdFromCookieStore();  return sessionId != null && sessionId.equals(latestSessionIdForLatestCsrfToken);}  }
class C{  protected void scavenge(){  if (isStopping() || isStopped())   return;  Thread thread=Thread.currentThread();  ClassLoader origClassLoader=thread.getContextClassLoader();  _scavengeCount++;  try {    if (_loader != null)     thread.setContextClassLoader(_loader);    long now=System.currentTimeMillis();    if (Log.getLog().isDebugEnabled())     Log.getLog().debug("Scavenging old sessions, expiring before: " + (now));    Object[] expiredSessions;    do {      expiredSessions=gigaSpace.readMultiple(new SQLQuery<SessionData>(SessionData.class,"expiryTime < ?",now),100);      for (int i=0; i < expiredSessions.length; i++) {        if (Log.getLog().isDebugEnabled())         Log.getLog().debug("Timing out expired session " + expiredSessions[i]);        Session expiredSession=new Session((SessionData)expiredSessions[i]);        expiredSession.timeout();        if (Log.getLog().isDebugEnabled())         Log.getLog().debug("Expiring old session " + expiredSession._data);      }    } while (expiredSessions.length > 0);    lastSessionCount=-1;  } catch (  Throwable t) {    if (t instanceof ThreadDeath)     throw ((ThreadDeath)t);    Log.getLog().warn("Problem scavenging sessions",t);  } finally {    thread.setContextClassLoader(origClassLoader);  }}  }
class C{  public UrlValidator(){  this(null);}  }
class C{  public static BigDecimal byteToBigDecimal(byte[] raw){  int scale=(raw[0] & 0xFF);  byte[] unscale=new byte[raw.length - 1];  System.arraycopy(raw,1,unscale,0,unscale.length);  BigInteger sig=new BigInteger(unscale);  return new BigDecimal(sig,scale);}  }
class C{  public boolean isEmpty(){  return state == State.EMPTY;}  }
class C{  public FloatColumn logN(){  FloatColumn newColumn=FloatColumn.create(name() + "[logN]",size());  for (  float value : this) {    newColumn.add((float)Math.log(value));  }  return newColumn;}  }
class C{  public void assertTrue(String errorMessage,boolean condition){  if (condition) {    return;  }  fail(errorMessage);}  }
class C{  public AdsGetTargetingStatsQuery adId(Integer value){  return unsafeParam("ad_id",value);}  }
class C{  public boolean isApplicable(){  ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();  return importBlastDialog.isAppliable();}  }
class C{  private <T>T send(String method,Class<T> responseType,@Nullable Object entity){  if (responseType == EmoResponse.class) {    return (T)toEmoResponse(entity == null ? builder().method(method,ClientResponse.class) : builder().method(method,ClientResponse.class,shadingSafeEntity(entity)));  }  try {    ClientResponse response=entity == null ? builder().method(method,ClientResponse.class) : builder().method(method,ClientResponse.class,entity);    if (response.getStatus() >= 300) {      throw new UniformInterfaceException(response);    }    if (!response.getType().equals(MediaType.APPLICATION_JSON_TYPE)) {      return response.getEntity(responseType);    }    return EntityHelper.getEntity(response.getEntity(InputStream.class),responseType);  } catch (  UniformInterfaceException e) {    throw asEmoClientException(e);  }}  }
class C{  public TagKeyValueMapConverter(boolean nullIfEmpty){  this.nullIfEmpty=nullIfEmpty;  this.addId=false;  this.idKey=null;}  }
class C{  @Override public void removeDataTag(final SourceDataTag sourceDataTag){  dataTagTable.remove(sourceDataTag.getId());  sourceDataTag.getAddress().setTimeDeadband(0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ALARM_REMAIN_PLAYTIME_WITH_RESERVATION(String value0){  return new SM_SYSTEM_MESSAGE(1400050,value0);}  }
class C{  public static void writePlistFile(Map<String,Object> eoModelMap,String eomodeldFullPath,String filename,boolean useXml) throws FileNotFoundException, UnsupportedEncodingException {  PrintWriter plistWriter=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(eomodeldFullPath,filename)),"UTF-8")));  if (useXml) {    plistWriter.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");    plistWriter.println("<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">");    plistWriter.println("<plist version=\"1.0\">");    writePlistPropertyMapXml(eoModelMap,0,plistWriter);    plistWriter.println("</plist>");  } else {    writePlistPropertyMap(eoModelMap,0,plistWriter,false);  }  plistWriter.close();}  }
class C{  private void readChangeLogRowNode(XmlPullParser parser,ChangeLog changeLog,String versionName,int versionCode) throws Exception {  if (parser == null)   return;  String tag=parser.getName();  ChangeLogRow row=new ChangeLogRow();  row.setVersionName(versionName);  row.setVersionCode(versionCode);  String changeLogTextTitle=parser.getAttributeValue(null,ATTRIBUTE_CHANGETEXTTITLE);  if (changeLogTextTitle != null)   row.setChangeTextTitle(changeLogTextTitle);  String bulletedList=parser.getAttributeValue(null,ATTRIBUTE_BULLETEDLIST);  if (bulletedList != null) {    if (bulletedList.equals("true")) {      row.setBulletedList(true);    } else {      row.setBulletedList(false);    }  } else {    row.setBulletedList(super.bulletedList);  }  if (parser.next() == XmlPullParser.TEXT) {    String changeLogText=parser.getText();    if (changeLogText == null)     throw new ChangeLogException("ChangeLogText required in changeLogText node");    row.parseChangeText(changeLogText);    row.setType(tag.equalsIgnoreCase(TAG_CHANGELOGBUG) ? ChangeLogRow.BUGFIX : tag.equalsIgnoreCase(TAG_CHANGELOGIMPROVEMENT) ? ChangeLogRow.IMPROVEMENT : ChangeLogRow.DEFAULT);    parser.nextTag();  }  changeLog.addRow(row);}  }
class C{  private BigFraction minor(final BigFraction[] c1,final BigFraction[] c2,final BigFraction[] c3){  return c2[0].multiply(c3[1]).multiply(c1[2].subtract(c1[3])).add(c2[0].multiply(c3[2]).multiply(c1[3].subtract(c1[1]))).add(c2[0].multiply(c3[3]).multiply(c1[1].subtract(c1[2]))).add(c2[1].multiply(c3[0]).multiply(c1[3].subtract(c1[2]))).add(c2[1].multiply(c3[2]).multiply(c1[0].subtract(c1[3]))).add(c2[1].multiply(c3[3]).multiply(c1[2].subtract(c1[0]))).add(c2[2].multiply(c3[0]).multiply(c1[1].subtract(c1[3]))).add(c2[2].multiply(c3[1]).multiply(c1[3].subtract(c1[0]))).add(c2[2].multiply(c3[3]).multiply(c1[0].subtract(c1[1]))).add(c2[3].multiply(c3[0]).multiply(c1[2].subtract(c1[1]))).add(c2[3].multiply(c3[1]).multiply(c1[0].subtract(c1[2]))).add(c2[3].multiply(c3[2]).multiply(c1[1].subtract(c1[0])));}  }
class C{  protected void garbageCollect(VisualTable labels){  Iterator iter=labels.tuples();  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    if (!item.isStartVisible() && !item.isEndVisible()) {      labels.removeTuple(item);    }  }}  }
class C{  public void expand(TreePath[] paths){  for (  TreePath path : paths) {    expand((DefaultMutableTreeNode)path.getLastPathComponent());  }}  }
class C{  public void addUserPresenceListener(UserPresenceListener userPresenceListener){  userPresenceListeners.add(userPresenceListener);}  }
class C{  @Override public void startPrefixMapping(String prefix,String uri) throws SAXException {  if (saxParser != null) {    saxParser.startPrefixMapping(prefix,uri);  }}  }
class C{  static void forceShowBadge(RelativeLayout view,BadgeItem badgeItem,boolean shouldShowBadgeWithNinePlus){  Utils.changeViewVisibilityVisible(view);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    view.setBackground(makeShapeDrawable(badgeItem.getBadgeColor()));  } else {    view.setBackgroundDrawable(makeShapeDrawable(badgeItem.getBadgeColor()));  }  TextView badgeTextView=(TextView)view.findViewById(R.id.badge_text_view);  if (shouldShowBadgeWithNinePlus)   badgeTextView.setText(badgeItem.getBadgeText()); else   badgeTextView.setText(badgeItem.getFullBadgeText());}  }
class C{  public Shape triangle_left(float x,float y,float height){  m_path.reset();  m_path.moveTo(x + height,y);  m_path.lineTo(x + height,y + height);  m_path.lineTo(x,y + height / 2);  m_path.closePath();  return m_path;}  }
class C{  public synchronized void replicateCompactionDeltas(){  _onlyReplicateDeletesUponCompaction=false;  while (!_addCompactQueue.isEmpty()) {    _addCompactQueue.remove().run();  }}  }
class C{  public int depth(){  return depth;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMPOUND_ERROR_NOT_AVAILABLE(int i){  return new SM_SYSTEM_MESSAGE(1400289,new DescriptionId(i));}  }
class C{  @Override public boolean isElementContentWhitespace(){  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");}  }
class C{  public BaseViewHolder linkify(int viewId){  TextView view=getView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  void action(int d) throws IOException, UnterminatedRegExpLiteralException, UnterminatedCommentException, UnterminatedStringLiteralException {switch (d) {case 1:    out.write(theA);case 2:  theA=theB;if (theA == '\'' || theA == '"') {  for (; ; ) {    out.write(theA);    theA=get();    if (theA == theB) {      break;    }    if (theA <= '\n') {      throw new UnterminatedStringLiteralException();    }    if (theA == '\\') {      out.write(theA);      theA=get();    }  }}case 3:theB=next();if (theB == '/' && (theA == '(' || theA == ',' || theA == '=')) {out.write(theA);out.write(theB);for (; ; ) {theA=get();if (theA == '/') {  break;} else if (theA == '\\') {  out.write(theA);  theA=get();} else if (theA <= '\n') {  throw new UnterminatedRegExpLiteralException();}out.write(theA);}theB=next();}}}  }
class C{  protected void processBytes(byte[] bytes,int offset,int length){}  }
class C{  public double predict(final double x){  final double b1=getSlope();  if (hasIntercept) {    return getIntercept(b1) + b1 * x;  }  return b1 * x;}  }
class C{  private static boolean isViewDescendantOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewDescendantOf((View)theParent,parent);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_INTERVAL_HEAL_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201066,skilltarget,num0,skillname);}  }
class C{  public int length(){  return bytes.length;}  }
class C{  public static String decrypt(final String password,String base64EncodedCipherText) throws GeneralSecurityException {  try {    final SecretKeySpec key=generateKey(password);    byte[] decodedCipherText=Base64.decode(base64EncodedCipherText,Base64.NO_WRAP);    byte[] decryptedBytes=decrypt(key,ivBytes,decodedCipherText);    String message=new String(decryptedBytes,CHARSET);    return message;  } catch (  UnsupportedEncodingException e) {    throw new GeneralSecurityException(e);  }}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public static Zmat bahi(Zmat B,Zltmat L) throws JampackException {  int i, j, k;  Z x=new Z();  L.getProperties();  B.getProperties();  if (L.nr != L.nc)   throw new JampackException("Rectangular matrix.");  if (L.nc != B.nc)   throw new JampackException("Inconsistent dimensions.");  return H.o(Solve.aib(L,H.o(B)));}  }
class C{  public PollsGetVotersQuery nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public boolean safe_forname(){  return soot.PhaseOptions.getBoolean(options,"safe-forname");}  }
class C{  public static int interp(int c1,int c2,double frac){  double ifrac=1 - frac;  return rgba((int)Math.round(frac * red(c2) + ifrac * red(c1)),(int)Math.round(frac * green(c2) + ifrac * green(c1)),(int)Math.round(frac * blue(c2) + ifrac * blue(c1)),(int)Math.round(frac * alpha(c2) + ifrac * alpha(c1)));}  }
class C{  @Override public boolean isInterrupted(){  return interrupted;}  }
class C{  private Token token(TokenType type){  return new Token(type,yychar,yylength());}  }
class C{  public void putObject(String key,Object obj){  putObject(key,obj,new Gson());}  }
class C{  public boolean canLoot(){  return canLoot(false);}  }
class C{  public IfStmt newIfStmt(Value condition,UnitBox target){  return new JIfStmt(condition,target);}  }
class C{  private static void writeData(File f,String layerName,SLDDataInterface sldData){  System.out.println("Writing : " + f.getName());  BufferedWriter bufferedWriter=null;  try {    bufferedWriter=new BufferedWriter(new FileWriter(f));    bufferedWriter.write(sldData.getSld());  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      if (bufferedWriter != null) {        bufferedWriter.close();      }    } catch (    Exception ex) {      ex.printStackTrace();    }  }}  }
class C{  public CollectionsObject(Activity a){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(a);  this.adapter=new CollectionAdapter(a,new ArrayList<Collection>());  this.service=CollectionService.getService();  this.collectionsType=sharedPreferences.getString(a.getString(R.string.key_default_collection_type),a.getResources().getStringArray(R.array.collection_type_values)[2]);  this.collectionsPage=0;  this.refreshing=false;  this.loading=false;  this.over=false;}  }
class C{  public IntListNode(int val){  this.val=val;  next=null;}  }
class C{  public SpaceTypeDescriptorBuilder supportsDynamicProperties(boolean supportsDynamicProperties){  this._supportsDynamicProperties=supportsDynamicProperties;  return this;}  }
class C{  public static final float[] resize(float[] a,int size){  if (a.length >= size)   return a;  float[] b=new float[size];  System.arraycopy(a,0,b,0,a.length);  return b;}  }
class C{  public void triangulateYMonotonePolygons(){  List<MonotonePolygon<DoubleEdgeListVertex>> monotonePolygons=this.getYMonotonePolygons();  int size=monotonePolygons.size();  for (int i=0; i < size; i++) {    this.triangulateYMonotonePolygon(monotonePolygons.get(i));  }}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  protected boolean isObjectLikeType(Type tp){  if (!(tp instanceof RefType))   return false;  RefType rt=(RefType)tp;  return rt.getSootClass().getName().equals("java.lang.Object") || rt.getSootClass().getName().equals("java.io.Serializable") || rt.getSootClass().getName().equals("java.lang.Cloneable");}  }
class C{  public EmailBuilder withHeader(String key,String val){  this.headers.put(key,val);  return this;}  }
class C{  public boolean isMatchByID(){  return (_uidToOperateBy != null && (_templateOperation == SpaceOperations.UPDATE || (ReadModifiers.isMatchByID(_operationModifiers))));}  }
class C{  public boolean isEmptyViewShown(){  return emptyView != null && emptyView.getVisibility() == VISIBLE;}  }
class C{  public static void writeInt(OutputStream out,int value) throws IOException {  out.write((value >>> 24) & 0xFF);  out.write((value >>> 16) & 0xFF);  out.write((value >>> 8) & 0xFF);  out.write((value >>> 0) & 0xFF);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_IMMUNED_MAGIC_TARGET(String skilltarget){  return new SM_SYSTEM_MESSAGE(1210228,skilltarget);}  }
class C{  public void updateProperties(DataElement dataElement,DataElementCategoryOptionCombo categoryOptionCombo){  this.dataElementId=dataElement.getUid();  this.optionComboId=categoryOptionCombo.getUid();  this.operandId=dataElementId + SEPARATOR + optionComboId;  this.operandName=getPrettyName(dataElement,categoryOptionCombo);  this.legendSet=dataElement.getLegendSet();  this.aggregationType=dataElement.getAggregationType();  this.valueType=dataElement.getValueType();  this.frequencyOrder=dataElement.getFrequencyOrder();  this.aggregationLevels=new ArrayList<>(dataElement.getAggregationLevels());  this.uid=dataElementId + SEPARATOR + optionComboId;  this.name=getPrettyName(dataElement,categoryOptionCombo);}  }
class C{  private int compareTemplates(@NotNull File file1,@NotNull File file2){  TemplateMetadata template1=getTemplateMetadata(file1);  TemplateMetadata template2=getTemplateMetadata(file2);  if (template1 == null) {    return 1;  } else   if (template2 == null) {    return -1;  } else {    int delta=template2.getRevision() - template1.getRevision();    if (delta == 0) {      delta=(int)(file2.lastModified() - file1.lastModified());    }    return delta;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PetOrderUseUltraSkill_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200694,skillcaster,skillname);}  }
class C{  public ConstantValue_attribute findConstantValue_attribute(){  int i;  for (i=0; i < attributes_count; i++) {    if ((attributes[i]) instanceof ConstantValue_attribute)     return (ConstantValue_attribute)(attributes[i]);  }  return null;}  }
class C{  public boolean contains(float value){  return value > from && value <= to;}  }
class C{  public ClassSource find(String className){  Map<String,File> index=SourceLocator.v().dexClassIndex();  if (index == null) {    index=new HashMap<String,File>();    buildDexIndex(index,SourceLocator.v().classPath());    SourceLocator.v().setDexClassIndex(index);  }  File file=index.get(className);  if (file == null)   return null;  return new DexClassSource(className,file);}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public CallableTaskAdapter(Callable<T> callable){  this.callable=callable;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_EDIT_NAME_ERROR_DEFAULT(String value0){  return new SM_SYSTEM_MESSAGE(1400159,value0);}  }
class C{  @Override public ASAttributeDeclaration createASAttributeDeclaration(String namespaceURI,String name) throws DOMException {  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);}  }
class C{  private void notifyActionListeners(String command){  ActionListener[] listeners=this.getListeners(ActionListener.class);  int size=listeners.length;  ActionEvent event=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,command);  for (int i=0; i < size; i++) {    listeners[i].actionPerformed(event);  }}  }
class C{  private boolean belongToTheSamePackage(TypeElement class1,TypeElement class2){  Name package1=elementUtils.getPackageOf(class1).getQualifiedName();  Name package2=elementUtils.getPackageOf(class2).getQualifiedName();  return package1.equals(package2);}  }
class C{  public static boolean isBool(String value){  return value != null && (value.equals("true") || value.equals("false"));}  }
class C{  public int hashCode(){  return (int)(DelegationAbsoluteTime.class.hashCode() + minStart + maxStart+ minStop+ maxStop);}  }
class C{  @Override public void maybeStartTrackingJob(JobStatus taskStatus){  if (taskStatus.hasIdleConstraint()) {synchronized (mTrackedTasks) {      mTrackedTasks.add(taskStatus);      taskStatus.idleConstraintSatisfied.set(mIdleTracker.isIdle());    }  }}  }
class C{  public static boolean isCarbonDataFile(String fileNameWithPath){  int pos=fileNameWithPath.lastIndexOf('.');  if (pos != -1) {    return fileNameWithPath.substring(pos).startsWith(CARBON_DATA_EXT);  }  return false;}  }
class C{  public Iterator<E> inOrderIterator(){  return new BinarySearchTreeIterator<E>(this.root,true);}  }
class C{  public boolean forEachEntry(TIntObjectProcedure<V> procedure){  byte[] states=_states;  int[] keys=_set;  V[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public IDirectableViewer addViewer(IDirectableViewer viewer){  if (viewer instanceof MainViewer)   this.viewer=(MainViewer)viewer;  viewers.add(viewer);  directorListeners.add(viewer);  ProjectManager.projectWindowChanged(this,viewer,true);  return viewer;}  }
class C{  public void removeChangeReport(final ChangeReport changeReport){  changeReports.remove(changeReport);}  }
class C{  public void hide(){  mContentView.setVisibility(View.GONE);}  }
class C{  public static void redirectToPreds(Body body,Unit remove){  boolean debug=Options.v().debug();  if (body instanceof ShimpleBody)   debug|=((ShimpleBody)body).getOptions().debug();  Chain<Unit> units=body.getUnits();  List<UnitBox> boxesPointingToThis=remove.getBoxesPointingToThis();  if (boxesPointingToThis.isEmpty())   return;  for (  UnitBox pointer : boxesPointingToThis) {    if (!pointer.isBranchTarget())     break;  }  Set<Unit> preds=new HashSet<Unit>();  Set<PhiExpr> phis=new HashSet<PhiExpr>();  if (!remove.equals(units.getFirst())) {    Unit possiblePred=(Unit)units.getPredOf(remove);    if (possiblePred.fallsThrough())     preds.add(possiblePred);  }  for (  Unit unit : units) {    for (    UnitBox targetBox : unit.getUnitBoxes()) {      if (remove.equals(targetBox.getUnit())) {        if (targetBox.isBranchTarget())         preds.add(unit); else {          PhiExpr phiExpr=Shimple.getPhiExpr(unit);          if (phiExpr != null)           phis.add(phiExpr);        }      }    }  }  if (phis.size() == 0) {    if (debug)     G.v().out.println("Warning: Orphaned UnitBoxes to " + remove + "? Shimple.redirectToPreds is giving up.");    return;  }  if (preds.size() == 0) {    if (debug)     G.v().out.println("Warning: Shimple.redirectToPreds couldn't find any predecessors for " + remove + " in "+ body.getMethod()+ ".");    if (!remove.equals(units.getFirst())) {      Unit pred=(Unit)units.getPredOf(remove);      if (debug)       G.v().out.println("Warning: Falling back to immediate chain predecessor: " + pred + ".");      preds.add(pred);    } else     if (!remove.equals(units.getLast())) {      Unit succ=(Unit)units.getSuccOf(remove);      if (debug)       G.v().out.println("Warning: Falling back to immediate chain successor: " + succ + ".");      preds.add(succ);    } else     throw new RuntimeException("Assertion failed.");  }  Iterator<PhiExpr> phiIt=phis.iterator();  while (phiIt.hasNext()) {    PhiExpr phiExpr=phiIt.next();    ValueUnitPair argBox=phiExpr.getArgBox(remove);    if (argBox == null)     throw new RuntimeException("Assertion failed.");    Value arg=argBox.getValue();    phiExpr.removeArg(argBox);    Iterator<Unit> predsIt=preds.iterator();    while (predsIt.hasNext()) {      Unit pred=predsIt.next();      phiExpr.addArg(arg,pred);    }  }}  }
class C{  public static final String digitsAndPlusOnly(Matcher matcher){  StringBuilder buffer=new StringBuilder();  String matchingRegion=matcher.group();  for (int i=0, size=matchingRegion.length(); i < size; i++) {    char character=matchingRegion.charAt(i);    if (character == '+' || Character.isDigit(character)) {      buffer.append(character);    }  }  return buffer.toString();}  }
class C{  private void asyncOpenLedger(LedgerDescriptor ledgerDesc,AsyncCallback.OpenCallback callback,Object ctx){  try {    if (!ledgerDesc.isFenced()) {      bkc.get().asyncOpenLedgerNoRecovery(ledgerDesc.getLedgerId(),BookKeeper.DigestType.CRC32,digestpw.getBytes(UTF_8),callback,ctx);    } else {      bkc.get().asyncOpenLedger(ledgerDesc.getLedgerId(),BookKeeper.DigestType.CRC32,digestpw.getBytes(UTF_8),callback,ctx);    }  } catch (  IOException ace) {    callback.openComplete(BKException.Code.BookieHandleNotAvailableException,null,ctx);  }}  }
class C{  @Override public IntegerDistribution makeDistribution(){  return new PascalDistribution(10,0.70);}  }
class C{  public static void resetDimensionConstants(Context context){  Resources res=context.getResources();  sDpToPx=res.getDisplayMetrics().density;  sPxToDp=1.0f / sDpToPx;  sCompositorButtonSlop=res.getDimension(R.dimen.compositor_button_slop) * sPxToDp;}  }
class C{  public AndFileFilter(IOFileFilter filter1,IOFileFilter filter2){  if (filter1 == null || filter2 == null) {    throw new IllegalArgumentException("The filters must not be null");  }  this.fileFilters=new ArrayList<IOFileFilter>(2);  addFileFilter(filter1);  addFileFilter(filter2);}  }
class C{  public static void installTinker(ApplicationLike appLike){  if (isInstalled) {    TinkerLog.w(TAG,"install tinker, but has installed, ignore");    return;  }  LoadReporter loadReporter=new SampleLoadReporter(appLike.getApplication());  PatchReporter patchReporter=new SamplePatchReporter(appLike.getApplication());  PatchListener patchListener=new SamplePatchListener(appLike.getApplication());  AbstractPatch upgradePatchProcessor=new UpgradePatch();  AbstractPatch repairPatchProcessor=new RepairPatch();  TinkerInstaller.install(appLike,loadReporter,patchReporter,patchListener,SampleResultService.class,upgradePatchProcessor,repairPatchProcessor);  isInstalled=true;}  }
class C{  public PhotosSaveOwnerPhotoQuery(VkApiClient client,UserActor actor){  super(client,"photos.saveOwnerPhoto",SaveOwnerPhotoResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public AdsGetSuggestionsQueryWithSchools(VkApiClient client,UserActor actor,AdsGetSuggestionsSection section){  super(client,"ads.getSuggestions",Utils.buildParametrizedType(List.class,TargSuggestionsSchools.class));  accessToken(actor.getAccessToken());  section(section);}  }
class C{  public GSMessageConsumerImpl(GSSessionImpl session,Destination dest,String consumerID,String subsriptionName,String selector,boolean noLocal) throws JMSException {  if (session == null) {    throw new IllegalArgumentException("Argument 'session' is null");  }  if (dest == null) {    throw new InvalidDestinationException("Argument 'dest' is null");  }  m_session=session;  m_dest=dest;  m_destName=m_dest.toString();  m_consumerID=consumerID;  m_durableSubscriptionName=subsriptionName;  m_selector=selector;  m_space=m_session.getConn().getSpace();  connectionKey=m_session.getConn().getCnxKey();  m_noLocal=noLocal;  initTemplates();  try {    m_space.snapshot(m_jmsMessageTemplate);  } catch (  RemoteException re) {    JMSException e=new JMSException("RemoteException while space.snapshot(): ",re.toString());    e.setLinkedException(re);    throw e;  }catch (  Exception e) {    JMSException jmse=new JMSException("Exception while space.snapshot(): ",e.toString());    jmse.setLinkedException(e);    throw jmse;  }  if (m_dest instanceof GSTopicImpl) {    m_isQueue=false;    onMessageEventListener=new OnMessageEventListener();    try {      createEventSessionConfig();    } catch (    IOException e) {      if (_logger.isLoggable(Level.FINE)) {        _logger.log(Level.FINE,toString2() + "IOException inside GSMessageConsumerImpl: Failed to create DataEventSession configuration",e);      }      JMSException e1=new JMSException("Failed to create DataEventSession configuration: " + e.toString());      e1.setLinkedException(e);      throw e1;    }    registerToNotifications();  } else   if (m_dest instanceof GSQueueImpl) {    m_isQueue=true;  }  if (m_dest instanceof GSTemporaryQueueImpl) {    String tempQueueSrcID=((GSTemporaryQueueImpl)m_dest).getSourceID();    if (StringsUtils.isEmpty(tempQueueSrcID) || !tempQueueSrcID.equals(m_session.getSessionID()))     throw new JMSSecurityException("Forbidden consumer with SessionID " + m_session.getSessionID() + " on this "+ "temporary queue with the session src id  "+ tempQueueSrcID+ " |  queueName: "+ m_destName);  } else   if (m_dest instanceof GSTemporaryTopicImpl) {    String tempTopicSrcID=((GSTemporaryTopicImpl)m_dest).getSourceID();    if (StringsUtils.isEmpty(tempTopicSrcID) || !tempTopicSrcID.equals(m_session.getSessionID()))     throw new JMSSecurityException("Forbidden consumer with SessionID " + m_session.getSessionID() + " on this "+ "temporary topic with the session src id  "+ tempTopicSrcID+ " |  topicName: "+ m_destName);    m_isQueue=false;  }}  }
class C{  @DELETE @Path("{experimentID}/buckets/{bucketLabel}") @Produces(APPLICATION_JSON) @ApiOperation(value="Delete a bucket in an experiment",notes="Can only delete a bucket for experiment that is in DRAFT state.  The default call is " + "safe to use, but other than that please only delete buckets which you have created.") @Timed public Response deleteBucket(@PathParam("experimentID") @ApiParam(value="Experiment ID") final Experiment.ID experimentID,@PathParam("bucketLabel") @ApiParam(value="Bucket Label") final Bucket.Label bucketLabel,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  Username userName=authorization.getUser(authorizationHeader);  Experiment experiment=experiments.getExperiment(experimentID);  if (experiment == null) {    throw new ExperimentNotFoundException(experimentID);  }  authorization.checkUserPermissions(userName,experiment.getApplicationName(),Permission.DELETE);  UserInfo user=authorization.getUserInfo(userName);  buckets.deleteBucket(experimentID,bucketLabel,user);  return httpHeader.headers(NO_CONTENT).build();}  }
class C{  public CrossesExtended(){  super(null,null);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  this.doPost(request,response);}  }
class C{  public final void finalize(){  this.fFileController.finalize();}  }
class C{  public static int addAndCheck(int x,int y){  long s=(long)x + (long)y;  if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {    throw new ArithmeticException("overflow: add");  }  return (int)s;}  }
class C{  public static <T>String join(List<T> list,String separator,T nullReplacement){  if (list == null) {    return null;  }  List<T> objects=new ArrayList<>(list);  if (nullReplacement != null) {    Collections.replaceAll(objects,null,nullReplacement);  }  return StringUtils.join(objects,separator);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public void showUpdateInfobarIfNecessary(ChromeActivity activity){  if (mMustShowInfoBar)   showUpdateInfoBar(activity);}  }
class C{  public static FunktionConfig load() throws IOException {  return findFromFolder(new File("."));}  }
class C{  public void dragAndDrop(ConstraintWidget widget,int x,int y){  mMouseMode=MouseMode.MOVE;  mWidgetMotion.dragWidget(new Point(x,y),new Selection.Element(widget),x,y,true,isShiftDown(),mViewTransform);}  }
class C{  public Timer(String threadName){  super(threadName);  this.setDaemon(true);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_START_BROADCAST(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300136,value0,value1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_WARNING_START(String value0){  return new SM_SYSTEM_MESSAGE(1400809,value0);}  }
class C{  private void run_implementation_(PushProcessor p) throws Exception {  final Map<GroupName,Alert> alerts=registry_.getCollectionAlerts();  final TimeSeriesCollection tsdata=registry_.getCollectionData();  p.accept(tsdata,unmodifiableMap(alerts),registry_.getFailedCollections());}  }
class C{  private void addHullFixtureAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      BodyFixture fixture=AddConvexHullFixtureDialog.show(ControlUtilities.getParentWindow(this));      SandboxBody body=(SandboxBody)node.getUserObject();      if (fixture != null) {synchronized (Simulation.LOCK) {          body.addFixture(fixture);          if (!body.isMassExplicit()) {            body.updateMass();          }        }        DefaultMutableTreeNode fixtureNode=new DefaultMutableTreeNode(fixture);        this.model.insertNodeInto(fixtureNode,node,node.getChildCount());        this.tree.expandPath(new TreePath(fixtureNode.getPath()).getParentPath());      }    }  }}  }
class C{  public static LineSymbolizer createDefaultLineSymbolizer(){  Stroke stroke=styleFactory.createStroke(ff.literal(DEFAULT_LINE_COLOUR),ff.literal(2));  LineSymbolizer lineSymbolizer=styleFactory.createLineSymbolizer();  lineSymbolizer.setStroke(stroke);  return lineSymbolizer;}  }
class C{  private boolean isValidSelection(String selection){  return isValidSelection(selection,getBaseContentView());}  }
class C{  public synchronized void removeAll(){  list.clear();}  }
class C{  protected void postProcessEntities(List<T> entityList){}  }
class C{  @Override public WeibullDistribution makeDistribution(){  return new WeibullDistribution(1.2,2.1);}  }
class C{  public static boolean checkIfRightExpressionRequireEvaluation(Expression expression){  if (expression.getFilterExpressionType() == ExpressionType.UNKNOWN || !(expression instanceof LiteralExpression) && !(expression instanceof ListExpression)) {    return true;  }  for (  Expression child : expression.getChildren()) {    if (checkIfRightExpressionRequireEvaluation(child)) {      return true;    }  }  return false;}  }
class C{  public void addGeneratedSourceFolder(@NotNull String path){  File directory=myFileStructure.createProjectDir(path);  myGeneratedSourceFolders.add(directory);}  }
class C{  public static <V>boolean addListNotNullValue(List<V> sourceList,V value){  return (sourceList != null && value != null) ? sourceList.add(value) : false;}  }
class C{  public static boolean isUnsignedNumber(String string){  String s=string.trim();  if (s.length() < 1)   return false;  if (s.charAt(0) != '+' && s.charAt(0) != '-') {    double value=0;    try {      value=Double.parseDouble(s);    } catch (    NumberFormatException e) {      return false;    }    return true;  }  return false;}  }
class C{  @Override public void emptyElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  startElement(element,attributes,augs);  endElement(element,augs);}  }
class C{  @Override public synchronized String format(LogRecord record){  StringBuffer text=new StringBuffer();  setArgsWithRecordData(record);  messageFormat.format(_args,text,null);  Throwable thrown=record.getThrown();  if (thrown != null) {    Logger exceptionLogger=Logger.getLogger(com.gigaspaces.logger.Constants.LOGGER_EXCEPTIONS);    if (exceptionLogger.isLoggable(record.getLevel()) || thrown instanceof RuntimeException) {      try {        StringWriter sw=new StringWriter();        PrintWriter pw=new PrintWriter(sw);        thrown.printStackTrace(pw);        pw.close();        text.append("; Caused by: ").append(sw.toString());      } catch (      Exception ex) {        text.append("; Caused by: ").append(record.getThrown().toString());        text.append(" - Unable to parse stack trace; Caught: ").append(ex);      }    } else {      text.append("; Caused by: ").append(record.getThrown().toString());    }  }  text.append(lineSeparator);  return text.toString();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  if (hostIp != null) {    sb.append(hostIp);    sb.append(":");  }  if (hostPort != null) {    sb.append(hostPort);  }  if (sb.length() > 0) {    sb.append(":");  }  sb.append(containerPort);  if (protocol != null) {    sb.append("/");    sb.append(protocol.toString());  }  return sb.toString();}  }
class C{  private Locale determineLocale(MaryData data){  Locale locale=null;  if (data.getType().isXMLType()) {    Document doc=data.getDocument();    if (doc != null) {      Element docEl=doc.getDocumentElement();      if (docEl != null) {        String langCode=docEl.getAttribute("xml:lang");        if (!langCode.equals("")) {          locale=MaryUtils.string2locale(langCode);        }      }    }  }  assert defaultLocale != null;  return locale != null ? locale : defaultLocale;}  }
class C{  public DocumentNGramGaussNormSymWinGraph(){  InitGraphs();}  }
class C{  @Override protected SubjectContext createSubjectContext(){  SubjectContext subjectContext=super.createSubjectContext();  subjectContext.setSecurityManager(this);  return subjectContext;}  }
class C{  @Override public void cancel(){  bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(cancelButton));}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately("set sortreads=" + (isSelected() ? "no" : "alphabetically") + ";");}  }
class C{  public static void hideToast(){  if (null != toast) {    toast.cancel();  }}  }
class C{  public void addGroup(OptionGroup group){  if (group != null) {    this.optionMap.put(group.getId().toString(),group);    this.optionList.add(group);  }}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),1);  setChild(new List(),2);}  }
class C{  @Override public Document parse(LSInput is) throws LSException {  XMLInputSource xmlInputSource=dom2xmlInputSource(is);  if (fBusy) {    throw newInvalidStateError();  }  try {    currentThread=Thread.currentThread();    fBusy=true;    parse(xmlInputSource);    fBusy=false;    if (abortNow && currentThread.isInterrupted()) {      abortNow=false;      Thread.interrupted();    }  } catch (  Exception e) {    fBusy=false;    if (abortNow && currentThread.isInterrupted()) {      Thread.interrupted();    }    if (abortNow) {      abortNow=false;      restoreHandlers();      return null;    }    if (e != Abort.INSTANCE) {      if (!(e instanceof XMLParseException) && fErrorHandler != null) {        DOMErrorImpl error=new DOMErrorImpl();        error.fException=e;        error.fMessage=e.getMessage();        error.fSeverity=DOMError.SEVERITY_FATAL_ERROR;        fErrorHandler.getErrorHandler().handleError(error);      }      if (DEBUG) {        e.printStackTrace();      }      throw (LSException)DOMUtil.createLSException(LSException.PARSE_ERR,e).fillInStackTrace();    }  }  Document doc=getDocument();  dropDocumentReferences();  return doc;}  }
class C{  public static S2CellId fromLatLng(S2LatLng ll){  return fromPoint(ll.toPoint());}  }
class C{  public void init$Children(){  children=new ASTNode[5];  setChild(new Opt(),1);  setChild(new List(),2);  setChild(new List(),3);  setChild(new List(),4);}  }
class C{  public void clearCache(){  mInternalCache.clear();  mInternalCache=new InternalCache();  mInternalHtmlCache.clear();}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  private File createCaptureFile(int encodingType,String fileName){  if (fileName.isEmpty()) {    fileName=".Pic";  }  if (encodingType == JPEG) {    fileName=fileName + ".jpg";  } else   if (encodingType == PNG) {    fileName=fileName + ".png";  } else {    throw new IllegalArgumentException("Invalid Encoding Type: " + encodingType);  }  return new File(getTempDirectoryPath(),fileName);}  }
class C{  public void put(long key,int value){  maps[(int)(key & MASK)].put((int)(key >>> BITS),value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_Recall_DUPLICATE_EFFECT(String value0){  return new SM_SYSTEM_MESSAGE(1400102,value0);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static String toSystemDependentPath(String path){  if (File.separatorChar != '/') {    path=path.replace('/',File.separatorChar);  }  return path;}  }
class C{  static boolean isJavaVersionMatch(final String version,final String versionPrefix){  if (version == null) {    return false;  }  return version.startsWith(versionPrefix);}  }
class C{  public void removeParalyzeEffects(){  for (  Effect effect : abnormalEffectMap.values()) {    if (effect.isParalyzeEffect()) {      effect.endEffect();      abnormalEffectMap.remove(effect.getStack());    }  }}  }
class C{  private void failOnElapsedTimeout(long now){  if (_timestamp > 0 && (now - _timestamp > RESOURCE_TIMEOUT)) {    throw new ResourceTimeoutException("Resource of type: " + this.getClass().getName() + " has exceeded its timeout of "+ RESOURCE_TIMEOUT+ " ms"+ " by "+ (now - _timestamp)+ " ms",_stackTrace);  }}  }
class C{  public static Link valueOf(String val){  Matcher matcher=parse.matcher(val);  if (!matcher.matches())   throw new RuntimeException("Failed to parse link: " + val);  Link link=new Link();  link.href=matcher.group(1);  String[] props=matcher.group(2).split(";");  HashMap<String,String> map=new HashMap();  for (  String prop : props) {    String[] split=prop.split("=");    map.put(split[0].trim(),split[1].trim());  }  if (map.containsKey("rel")) {    link.relationship=map.get("rel");  }  if (map.containsKey("type")) {    link.type=map.get("type");  }  return link;}  }
class C{  private boolean scanExpr(SymbolTable symbolTable,Tokens tokens,String data,int currentOffset,int endOffset) throws XNIException {  int ch;  int nameOffset;  String nameHandle=null;  while (true) {    if (currentOffset == endOffset) {      break;    }    ch=data.charAt(currentOffset);    byte chartype=(ch >= 0x80) ? CHARTYPE_NONASCII : fASCIICharMap[ch];switch (chartype) {case CHARTYPE_SLASH:      if (++currentOffset == endOffset) {        return false;      }    addToken(tokens,Tokens.XPTRTOKEN_ELEM_CHILD);  ch=data.charAt(currentOffset);int child=0;while (ch >= '0' && ch <= '9') {child=(child * 10) + (ch - '0');if (++currentOffset == endOffset) {  break;}ch=data.charAt(currentOffset);}if (child == 0) {reportError("InvalidChildSequenceCharacter",new Object[]{new Character((char)ch)});return false;}tokens.addToken(child);break;case CHARTYPE_DIGIT:case CHARTYPE_LETTER:case CHARTYPE_MINUS:case CHARTYPE_NONASCII:case CHARTYPE_OTHER:case CHARTYPE_PERIOD:case CHARTYPE_UNDERSCORE:nameOffset=currentOffset;currentOffset=scanNCName(data,endOffset,currentOffset);if (currentOffset == nameOffset) {reportError("InvalidNCNameInElementSchemeData",new Object[]{data});return false;}if (currentOffset < endOffset) {ch=data.charAt(currentOffset);} else {ch=-1;}nameHandle=symbolTable.addSymbol(data.substring(nameOffset,currentOffset));addToken(tokens,Tokens.XPTRTOKEN_ELEM_NCNAME);tokens.addToken(nameHandle);break;}}return true;}  }
class C{  public static double[] convolve_FD(final double[] signal1,final double[] fft2,double deltaT){  double[] result=convolve_FD(signal1,fft2);  for (int i=0; i < result.length; i++) {    result[i]*=deltaT;  }  return result;}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/task/TaskQueryTest.testProcessDefinition.bpmn20.xml"}) public void testIncludeBinaryVariablesOr() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",Collections.singletonMap("binaryVariable",(Object)"It is I, le binary".getBytes()));  Task task=taskService.createTaskQuery().or().taskName("invalid").processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  taskService.setVariableLocal(task.getId(),"binaryTaskVariable",(Object)"It is I, le binary".getBytes());  task=taskService.createTaskQuery().or().taskName("invalid").taskId(task.getId()).includeProcessVariables().singleResult();  assertNotNull(task);  assertNotNull(task.getProcessVariables());  byte[] bytes=(byte[])task.getProcessVariables().get("binaryVariable");  assertEquals("It is I, le binary",new String(bytes));  task=taskService.createTaskQuery().or().taskName("invalid").taskId(task.getId()).includeTaskLocalVariables().singleResult();  assertNotNull(task);  assertNotNull(task.getTaskLocalVariables());  bytes=(byte[])task.getTaskLocalVariables().get("binaryTaskVariable");  assertEquals("It is I, le binary",new String(bytes));}  }
class C{  public void addBottomResourceBundle(ResourceBundle topResourceBundle){  this.rbmwStack.addToBottom(new InternalRbmWrapper(topResourceBundle));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_CRITICAL(String value0,int num2,String value1){  return new SM_SYSTEM_MESSAGE(1220001,value0,num2,value1);}  }
class C{  private static void buildFileDirectoryContent(int leafCount,String sourceDir,StringBuilder destStrBuffer){  File dir=new File(sourceDir);  File[] files=BootIOUtils.listFiles(dir);  for (int i=0; i < files.length; i++) {    if (files[i].isFile()) {      String fileName=files[i].getName();      if (fileName.endsWith(".properties") || fileName.endsWith(".xml") || fileName.endsWith(".config")) {        destStrBuffer.append("\n\t");        for (int z=0; z < leafCount; z++)         destStrBuffer.append("\t");        destStrBuffer.append("- " + fileName);      }    } else {      leafCount++;      destStrBuffer.append("\n");      for (int z=0; z < leafCount; z++)       destStrBuffer.append("\t");      destStrBuffer.append("-/" + files[i].getName());      buildFileDirectoryContent(leafCount,files[i].getPath(),destStrBuffer);      leafCount--;    }  }}  }
class C{  @Override public boolean hasMoreData(){  if (inputSource == null)   return false;  return inputSource.hasMoreData();}  }
class C{  public static ITemplateHolder createUpdateTemplateHolder(IServerTypeDesc typeDesc,IEntryPacket template,String uid,long expirationTime,XtnEntry xidOriginated,long SCN,IResponseContext respContext,int operationModifiers){  return new TemplateHolder(typeDesc,template,uid,expirationTime,xidOriginated,SCN,SpaceOperations.UPDATE,respContext,operationModifiers);}  }
class C{  public boolean supportsThreadDump(Application application){  if (application.getState() != Stateful.STATE_AVAILABLE)   return false;  return JvmFactory.getJVMFor(application).isTakeThreadDumpSupported();}  }
class C{  public int createDeferredCDATASection(String data){  int nodeIndex=createNode(Node.CDATA_SECTION_NODE);  int chunk=nodeIndex >> CHUNK_SHIFT;  int index=nodeIndex & CHUNK_MASK;  setChunkValue(fNodeValue,data,chunk,index);  return nodeIndex;}  }
class C{  public static <L,R>Either<L,R> left(L left){  return new Either<>(left,null,true);}  }
class C{  public MPPointF[] newArray(int size){  return new MPPointF[size];}  }
class C{  public static RxJavaCallAdapterFactory create(){  return new RxJavaCallAdapterFactory(null);}  }
class C{  public static <T extends Bean>T load(String collection,Bson query,T b){  try {    MongoCollection<Document> db=MongoHelper.getCollection(collection);    if (db != null) {      FindIterable<Document> d=db.find(query);      if (d != null) {        Document d1=d.first();        if (d1 != null) {          b.load(d1);          return b;        }      }    }  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(e.getMessage(),e);  }  return null;}  }
class C{  public static final MediaFormat createSubtitleFormat(String title,String language){  MediaFormat format=new MediaFormat();  format.setString(KEY_TITLE,title);  format.setString(KEY_LANGUAGE,language);  return format;}  }
class C{  protected void sanityChecks(final FieldODEState<T> initialState,final T t) throws MathIllegalArgumentException {  final double threshold=1000 * FastMath.ulp(FastMath.max(FastMath.abs(initialState.getTime().getReal()),FastMath.abs(t.getReal())));  final double dt=initialState.getTime().subtract(t).abs().getReal();  if (dt <= threshold) {    throw new MathIllegalArgumentException(LocalizedODEFormats.TOO_SMALL_INTEGRATION_INTERVAL,dt,threshold,false);  }}  }
class C{  public void resetPropertyValue(Object property){}  }
class C{  public static String removeEmptyLines(String text){  text=text.replaceAll("^[ " + ChineseLanguageConstants.SPACE[0] + "\t\u000B\u000C\u00A0\uE5F1\r\n]*\n","");  text=text.replaceAll("[\r\n][ " + ChineseLanguageConstants.SPACE[0] + "\t\u000B\u000C\u00A0\uE5F1\r\n]*\n","\n");  return text;}  }
class C{  private byte[] concateByteArray(byte[] firstarray,byte[] secondarray){  byte[] output=new byte[firstarray.length + secondarray.length];  int i=0;  for (i=0; i < firstarray.length; i++) {    output[i]=firstarray[i];  }  int index=i;  for (i=0; i < secondarray.length; i++) {    output[index]=secondarray[i];    index++;  }  return output;}  }
class C{  public int size(){  return size;}  }
class C{  public Date localCurrentTime(){  return new Date(System.currentTimeMillis());}  }
class C{  public SwipeBackManageImplementor(SwipeBackManageView view){  this.view=view;}  }
class C{  public synchronized void pause(){  if (!isPaused()) {    setPaused(true);    if (line != null) {      line.stop();    }  }}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  private Line(final double angle,final double cos,final double sin,final double originOffset,final double tolerance){  this.angle=angle;  this.cos=cos;  this.sin=sin;  this.originOffset=originOffset;  this.tolerance=tolerance;  this.reverse=null;}  }
class C{  public void invoke(ObjectInputStream in,Context context,Object service,MethodResolver methodResolver,String remoteAddress,RequestId requestId) throws Exception {  boolean continueInvocation=true;synchronized (context) {    this.abortInvocation=false;    if (context.isInvokingMethod()) {      continueInvocation=false;      context.wait();    } else     if (context.isInvocationFinished()) {      continueInvocation=false;    } else {      context.setReadingParametersState(this);    }  }  String methodName=(String)in.readObject();  Method method=methodResolver.getMethodFromMangledName(methodName);  if (method == null) {    throw new IOException("No server method matching:" + methodName);  }  Class[] args=method.getParameterTypes();  Object[] values=new Object[args.length];  for (int i=0; i < args.length; i++) {    values[i]=in.readObject();  }  if (continueInvocation) {    context.setInvokingMethodState(this);    if (!this.abortInvocation) {      long start=System.currentTimeMillis();      try {        Object result=method.invoke(service,values);        context.setReturnValue(result,false);      } catch (      Throwable e) {        if (e instanceof InvocationTargetException) {          e=((InvocationTargetException)e).getTargetException();        }        LOGGER.error("an exception occured while invoking {}",method.getName(),e);        context.setReturnValue(e,true);      } finally {        long currentTime=System.currentTimeMillis();        if (LOGGER.isDebugEnabled()) {          LOGGER.debug("Invoking method " + method.getDeclaringClass().getName() + "."+ method.getName()+ " took "+ (currentTime - start)+ ") ms");        }      }    }  }}  }
class C{  public static boolean contentEquals(File file1,File file2) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.length() != file2.length()) {    return false;  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  InputStream input1=null;  InputStream input2=null;  try {    input1=new FileInputStream(file1);    input2=new FileInputStream(file2);    return IOUtils.contentEquals(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  public void put(String key,String value){  if (key != null && value != null) {    urlParams.put(key,value);  }}  }
class C{  public boolean hasValue(){  return observers.get() == TERMINATED && value != null;}  }
class C{  private boolean checkImplicit(DAbruptStmt ab){  SETNodeLabel label=ab.getLabel();  if (label == null)   return true;  if (label.toString() == null)   return true;  return false;}  }
class C{  ImmutableMap<String,GitReference> showRef() throws RepoException {  ImmutableMap.Builder<String,GitReference> result=ImmutableMap.builder();  CommandOutput commandOutput=gitAllowNonZeroExit(ImmutableList.of("show-ref"));  if (!commandOutput.getStderr().isEmpty()) {    throw new RepoException(String.format("Error executing show-ref on %s git repo:\n%s",getGitDir(),commandOutput.getStderr()));  }  for (  String line : Splitter.on('\n').split(commandOutput.getStdout())) {    if (line.isEmpty()) {      continue;    }    List<String> strings=Splitter.on(' ').splitToList(line);    Preconditions.checkState(strings.size() == 2 && SHA1_PATTERN.matcher(strings.get(0)).matches(),"Cannot parse line: '%s'",line);    result.put(strings.get(1),new GitReference(this,strings.get(0)));  }  return result.build();}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  public void applyInverseTo(final T[] in,final T[] out){  final T x=in[0];  final T y=in[1];  final T z=in[2];  final T s=q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));  final T m0=q0.negate();  out[0]=m0.multiply(x.multiply(m0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x);  out[1]=m0.multiply(y.multiply(m0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y);  out[2]=m0.multiply(z.multiply(m0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z);}  }
class C{  static VersionNumber identifyBSDVersion(final String userAgent){  VersionNumber version=VersionNumber.UNKNOWN;  final Pattern pattern=Pattern.compile("\\w+bsd\\s?((\\d+)((\\.\\d+)+)?((\\-|_)[\\w\\d\\-]+)?)",Pattern.CASE_INSENSITIVE);  final Matcher m=pattern.matcher(userAgent);  if (m.find()) {    version=parseFirstVersionNumber(m.group(MAJOR_INDEX));  }  return version;}  }
class C{  public void close(){  assertOnNonUIThread();  trimToSizeAndCount();  mJournal.rebuild();}  }
class C{  @RequestMapping(value="/authenticate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public String isAuthenticated(HttpServletRequest request){  log.debug("REST request to check if the current user is authenticated");  return request.getRemoteUser();}  }
class C{  public void changeProgram(Texture2dProgram program){  this.program.release();  this.program=program;}  }
class C{  public static RoutingService.Builder buildRoutingService(String finagleNameStr){  if (!finagleNameStr.startsWith("serverset!") && !finagleNameStr.startsWith("inet!") && !finagleNameStr.startsWith("zk!")) {    throw new UnsupportedOperationException("Finagle Name format not supported for name: " + finagleNameStr);  }  return buildRoutingService(new NameServerSet(finagleNameStr),true);}  }
class C{  private void updateConnectionType(){  ConnectivityManager cm=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);  try {    connectionType=cm.getActiveNetworkInfo().getType();  } catch (  Exception e) {    showToast("Can't connect: no active network");    return;  }  ((TextView)findViewById(R.id.connection_type)).setText(cm.getActiveNetworkInfo().getTypeName() + " " + cm.getActiveNetworkInfo().getSubtypeName());}  }
class C{  public void clear(){  _outgoingEvents.clear();  _alreadyTriggeredEvents.clear();}  }
class C{  public final boolean isFinished(){  return mScrollerX.mFinished && mScrollerY.mFinished;}  }
class C{  public static void d(String msg){  if (isDebug) {    Log.d(TAG,msg);  }}  }
class C{  public Attr(String name,@Nullable Format format){  this.name=name;  if (format != null) {    formats=Collections.singletonList(format);  }}  }
class C{  private int computePerfectOverlapLength(MatchData iMatch,MatchData jMatch){  try {    int first=Math.max(iMatch.getFirstPosInRef(),jMatch.getFirstPosInRef());    int last=Math.min(iMatch.getLastPosInRef(),jMatch.getLastPosInRef());    int count=0;    for (int refPos=first; refPos <= last; refPos++) {      for (int k=0; k < 3; k++) {        int iPos=3 * (refPos - iMatch.getFirstPosInRef()) + k;        int jPos=3 * (refPos - jMatch.getFirstPosInRef()) + k;        char iChar=Character.toLowerCase(iMatch.getRead().getSegment().charAt(iPos));        char jChar=Character.toLowerCase(jMatch.getRead().getSegment().charAt(jPos));        if (iChar != jChar && iChar != 'n' && jChar != 'n')         return 0; else         if (Character.isLetter(iMatch.getRead().getSegment().charAt(iPos)))         count++;      }    }    return count;  } catch (  Exception ex) {    return 0;  }}  }
class C{  public void onResume(){}  }
class C{  public boolean hasAggregationLevels(){  return aggregationLevels != null && aggregationLevels.size() > 0;}  }
class C{  public boolean isValid(String value){  if (value == null) {    return false;  }  Matcher urlMatcher=URL_PATTERN.matcher(value);  if (!urlMatcher.matches()) {    return false;  }  String scheme=urlMatcher.group(PARSE_URL_SCHEME);  if (!isValidScheme(scheme)) {    return false;  }  String authority=urlMatcher.group(PARSE_URL_AUTHORITY);  if ("file".equals(scheme) && "".equals(authority)) {  } else {    if (!isValidAuthority(authority)) {      return false;    }  }  if (!isValidPath(urlMatcher.group(PARSE_URL_PATH))) {    return false;  }  if (!isValidQuery(urlMatcher.group(PARSE_URL_QUERY))) {    return false;  }  if (!isValidFragment(urlMatcher.group(PARSE_URL_FRAGMENT))) {    return false;  }  return true;}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  public byte[] generateMwk(SecretKey mwkdes3){  byte[] zeros={0,0,0,0,0,0,0,0};  byte[] random=new byte[8];  Random ran=new SecureRandom();  ran.nextBytes(random);  Cipher cipher=this.getCipher(mwkdes3,Cipher.ENCRYPT_MODE);  byte[] encryptedZeros=new byte[0];  try {    encryptedZeros=cipher.doFinal(zeros);  } catch (  IllegalStateException e) {    Debug.logError(e,module);  }catch (  IllegalBlockSizeException e) {    Debug.logError(e,module);  }catch (  BadPaddingException e) {    Debug.logError(e,module);  }  byte[] newMwk=copyBytes(mwkdes3.getEncoded(),encryptedZeros,0);  newMwk=copyBytes(random,newMwk,0);  if (debug) {    Debug.logInfo("Random 8 byte : " + StringUtil.toHexString(random),module);    Debug.logInfo("Encrypted 0's : " + StringUtil.toHexString(encryptedZeros),module);    Debug.logInfo("Decrypted MWK : " + StringUtil.toHexString(mwkdes3.getEncoded()) + " / "+ mwkdes3.getEncoded().length,module);    Debug.logInfo("Encrypted MWK : " + StringUtil.toHexString(newMwk) + " / "+ newMwk.length,module);  }  return newMwk;}  }
class C{  protected void addUnparsedEntity(String name,XMLResourceIdentifier identifier,String notation,Augmentations augmentations){  UnparsedEntity ent=new UnparsedEntity();  ent.name=name;  ent.systemId=identifier.getLiteralSystemId();  ent.publicId=identifier.getPublicId();  ent.baseURI=identifier.getBaseSystemId();  ent.expandedSystemId=identifier.getExpandedSystemId();  ent.notation=notation;  ent.augmentations=augmentations;  fUnparsedEntities.add(ent);}  }
class C{  public static List<String> readLines(File file,String encoding) throws IOException {  return readLines(file,Charsets.toCharset(encoding));}  }
class C{  public void addSpaceItem(SpaceItem spaceItem){  spaceItems.add(spaceItem);}  }
class C{  public static int screenWidthPixel(Context context){  WindowManager windowManager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=windowManager.getDefaultDisplay();  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {    Point outPoint=new Point();    display.getRealSize(outPoint);    sScreenWidthPixels=outPoint.x;  } else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {    Point outPoint=new Point();    display.getSize(outPoint);    sScreenWidthPixels=outPoint.x;  } else {    sScreenWidthPixels=display.getWidth();  }  return sScreenWidthPixels;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_BARRIER_ATSTAKE(String value0value){  return new SM_SYSTEM_MESSAGE(1400326,value0value);}  }
class C{  public static boolean isNumber(Object s){  if (s == null) {    return false;  }  if (s instanceof Number) {    return true;  }  String s1=s.toString();  if (s1.length() == 0) {    return false;  }  int dot=0;  for (int i=0; i < s1.length(); i++) {    char c=s1.charAt(i);    if (c == '.') {      dot++;      if (dot > 1) {        return false;      }    } else     if (c == '-' && i == 0) {      continue;    } else     if (c < '0' || c > '9') {      return false;    }  }  return true;}  }
class C{  public static void cleanupParagraphs(RTEditText editor,Effect... exclude){  cleanupParagraphs(editor,Effects.ALIGNMENT,exclude);  cleanupParagraphs(editor,Effects.INDENTATION,exclude);  cleanupParagraphs(editor,Effects.BULLET,exclude);  cleanupParagraphs(editor,Effects.NUMBER,exclude);}  }
class C{  public static double factorialDouble(final int n){  if (n < 0) {    throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}",n);  }  if (n < 21) {    return factorial(n);  }  return Math.floor(Math.exp(factorialLog(n)) + 0.5);}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  if (false) {    StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();    String caller="<unknown>";    for (int i=2; i < trace.length; i++) {      Class<?> clazz=trace[i].getClass();      if (!clazz.equals(WebcacheLog.class)) {        String callingClass=trace[i].getClassName();        callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);        callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);        caller=callingClass + "." + trace[i].getMethodName();        break;      }    }    return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);  } else {    return msg;  }}  }
class C{  public NoSuchEntryException(String s){  super(s);}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_GUILD_LEVEL_UP_CHALLENGE_TASK(int currentLevel){  return new SM_SYSTEM_MESSAGE(904452,currentLevel);}  }
class C{  private void debugLogCandidates(Target targetUnit,VocalizationCandidate[] suitableCandidates,VocalizationCandidate[] suitableF0Candidates){  FeatureVector targetFeatures=targetUnit.getFeatureVector();  FeatureDefinition fd=featureFileReader.getFeatureDefinition();  int fiName=fd.getFeatureIndex("name");  int fiIntonation=fd.getFeatureIndex("intonation");  int fiVQ=fd.getFeatureIndex("voicequality");  for (int i=0; i < suitableCandidates.length; i++) {    int unitIndex=suitableCandidates[i].unitIndex;    double unitCost=suitableCandidates[i].cost;    FeatureVector fv=featureFileReader.getFeatureVector(unitIndex);    StringBuilder sb=new StringBuilder();    sb.append("Candidate ").append(i).append(": ").append(unitIndex).append(" ( " + unitCost + " ) ").append(" -- ");    byte bName=fv.getByteFeature(fiName);    if (fv.getByteFeature(fiName) != 0 && targetFeatures.getByteFeature(fiName) != 0) {      sb.append(" ").append(fv.getFeatureAsString(fiName,fd));    }    if (fv.getByteFeature(fiVQ) != 0 && targetFeatures.getByteFeature(fiName) != 0) {      sb.append(" ").append(fv.getFeatureAsString(fiVQ,fd));    }    if (fv.getByteFeature(fiIntonation) != 0 && targetFeatures.getByteFeature(fiIntonation) != 0) {      sb.append(" ").append(fv.getFeatureAsString(fiIntonation,fd));    }    for (int j=0; j < targetFeatures.getLength(); j++) {      if (targetFeatures.isContinuousFeature(j) && !Float.isNaN((Float)targetFeatures.getFeature(j)) && !Float.isNaN((Float)fv.getFeature(j))) {        String featureName=fd.getFeatureName(j);        sb.append(" ").append(featureName).append("=").append(fv.getFeature(j));      }    }    Log.d(Mary.LOG,sb.toString());  }  for (int i=0; i < suitableF0Candidates.length; i++) {    int unitIndex=suitableF0Candidates[i].unitIndex;    double unitCost=suitableF0Candidates[i].cost;    FeatureVector fv=featureFileReader.getFeatureVector(unitIndex);    StringBuilder sb=new StringBuilder();    sb.append("F0 Candidate ").append(i).append(": ").append(unitIndex).append(" ( " + unitCost + " ) ").append(" -- ");    byte bName=fv.getByteFeature(fiName);    if (fv.getByteFeature(fiName) != 0 && targetFeatures.getByteFeature(fiName) != 0) {      sb.append(" ").append(fv.getFeatureAsString(fiName,fd));    }    if (fv.getByteFeature(fiVQ) != 0 && targetFeatures.getByteFeature(fiName) != 0) {      sb.append(" ").append(fv.getFeatureAsString(fiVQ,fd));    }    if (fv.getByteFeature(fiIntonation) != 0 && targetFeatures.getByteFeature(fiIntonation) != 0) {      sb.append(" ").append(fv.getFeatureAsString(fiIntonation,fd));    }    for (int j=0; j < targetFeatures.getLength(); j++) {      if (targetFeatures.isContinuousFeature(j) && !Float.isNaN((Float)targetFeatures.getFeature(j)) && !Float.isNaN((Float)fv.getFeature(j))) {        String featureName=fd.getFeatureName(j);        sb.append(" ").append(featureName).append("=").append(fv.getFeature(j));      }    }    Log.d(Mary.LOG,sb.toString());  }}  }
class C{  private static final List<AttackResult> splitPhysicalDamage(final Creature attacker,final Creature attacked,int hitCount,int damage,AttackStatus status,List<AttackResult> attackList){  WeaponType weaponType;switch (AttackStatus.getBaseStatus(status)) {case BLOCK:    int reduce=damage - attacked.getGameStats().getPositiveReverseStat(StatEnum.DAMAGE_REDUCE,damage);  if (attacked instanceof Player) {    Item shield=((Player)attacked).getEquipment().getEquippedShield();    if (shield != null) {      int reduceMax=shield.getItemTemplate().getWeaponStats().getReduceMax();      if (reduceMax > 0 && reduceMax < reduce) {        reduce=reduceMax;      }    }  }damage-=reduce;break;case DODGE:damage=0;break;case PARRY:damage*=0.6;break;default :break;}if (status.isCritical()) {if (attacker instanceof Player) {weaponType=((Player)attacker).getEquipment().getMainHandWeaponType();damage=(int)calculateWeaponCritical(attacked,damage,weaponType,StatEnum.PHYSICAL_CRITICAL_DAMAGE_REDUCE);applyEffectOnCritical((Player)attacker,attacked);} else {damage=(int)calculateWeaponCritical(attacked,damage,null,StatEnum.PHYSICAL_CRITICAL_DAMAGE_REDUCE);}}if (damage < 1) {damage=0;}int firstHit=(int)(damage * (1f - (0.1f * (hitCount - 1))));int otherHits=Math.round(damage * 0.1f);for (int i=0; i < hitCount; i++) {int dmg=(i == 0 ? firstHit : otherHits);attackList.add(new AttackResult(dmg,status,HitType.PHHIT));}return attackList;}  }
class C{  public JsonParser(){  this(StandardCharsets.UTF_8);}  }
class C{  public SootClass resolveClass(String className,int desiredLevel){  SootClass resolvedClass=null;  try {    resolvedClass=makeClassRef(className);    addToResolveWorklist(resolvedClass,desiredLevel);    processResolveWorklist();    return resolvedClass;  } catch (  SootClassNotFoundException e) {    if (resolvedClass != null) {      assert resolvedClass.resolvingLevel() == SootClass.DANGLING;      Scene.v().removeClass(resolvedClass);    }    throw e;  }}  }
class C{  public DefaultVocabCache(int minWordFrequency){  this.minWordFrequency=minWordFrequency;}  }
class C{  public void removeEntries(int minSelectionIndex,int maxSelectionIndex){  if ((minSelectionIndex < 0) || (maxSelectionIndex < minSelectionIndex) || (maxSelectionIndex >= extentList.size())) {    return;  }  int index=maxSelectionIndex;  while (index >= minSelectionIndex) {    extentList.remove(index);    index--;  }  this.fireTableDataChanged();  if (parentObj != null) {    parentObj.extentUpdated();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_SUCCESS_4_FISHING(String value0){  return new SM_SYSTEM_MESSAGE(1330019,value0);}  }
class C{  public void stem(){  k=i - 1;  if (k > 1) {    step1();    step2();    step3();    step4();    step5();    step6();  }  i_end=k + 1;  i=0;}  }
class C{  @Override public boolean equals(Object o){  if (o == null)   return false;  if (o == this)   return true;  if (!(o instanceof Attribute))   return false;  final Attribute attribute=(Attribute)o;  if (name != null ? !name.equals(attribute.name) : attribute.name != null)   return false;  if (compareValue)   if (value != null ? !value.equals(attribute.value) : attribute.value != null)   return false;  return true;}  }
class C{  protected void doOptimizedEval(final Semaphore sSem,PrintStream pOverallResultsOutStream,int WordNGramSize_Min,int WordNGramSize_Max,int Word_Dmax,int CharacterNGramSize_Min,int CharacterNGramSize_Max,int Character_Dmax,boolean bDoCharNGrams,boolean bDoWordNGrams,String sSummaryDir,String sModelDir,int iThreads,boolean bSilent,boolean bProgress){  if (pOverallResultsOutStream == null)   pOverallResultsOutStream=System.out;  ThreadList tqRobin=new ThreadList(iThreads);  DocumentSet dsSummarySet=new DocumentSet(sSummaryDir,1.0);  final DocumentSet dsModelSet=new DocumentSet(sModelDir,1.0);  dsSummarySet.createSets();  dsModelSet.createSets();  HashMap hmCategoryResults=new HashMap();  if (dsSummarySet.getTrainingSet().size() * dsModelSet.getTrainingSet().size() == 0) {    System.err.println("Empty document set...");    System.exit(-1);  }  pOverallResultsOutStream.print("Theme\t");  pOverallResultsOutStream.print("SystemID\t");  if (bDoWordNGrams) {    pOverallResultsOutStream.print("GraphCooccurence\t");    pOverallResultsOutStream.print("GraphValue\t");    pOverallResultsOutStream.print("GraphSize\t");    pOverallResultsOutStream.print("HistoContainmentSimilarity\t");    pOverallResultsOutStream.print("HistoValue\t");    pOverallResultsOutStream.print("HistoSize\t");    pOverallResultsOutStream.print("OverallSimil\t");  }  if (bDoCharNGrams) {    pOverallResultsOutStream.print("CharGraphCooccurence\t");    pOverallResultsOutStream.print("CharGraphValue\t");    pOverallResultsOutStream.print("CharGraphSize\t");    pOverallResultsOutStream.print("NHistoContainmentSimilarity\t");    pOverallResultsOutStream.print("NHistoValue\t");    pOverallResultsOutStream.print("NHistoSize\t");    pOverallResultsOutStream.print("NOverallSimil\t");  }  pOverallResultsOutStream.println();  int iTotal=dsSummarySet.getTrainingSet().size();  int iCur=0;  Iterator iCatIter=dsModelSet.getCategories().iterator();  Date dStart=new Date();  while (iCatIter.hasNext()) {    String sCurCategory=(String)iCatIter.next();    if (!bSilent)     System.err.println("Processing category:" + sCurCategory);    hModelCache.clear();    hNModelCache.clear();    List lModelFiles=dsModelSet.getFilesFromCategory(sCurCategory);    Iterator iIter=dsSummarySet.getFilesFromCategory(sCurCategory,dsSummarySet.FROM_TRAINING_SET).iterator();    while (iIter.hasNext()) {      final CategorizedFileEntry cfeCur=(CategorizedFileEntry)iIter.next();      Runnable r=new GaussCalcSimilRunner(WordNGramSize_Min,WordNGramSize_Max,Word_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,cfeCur,lModelFiles,sSem,bDoCharNGrams,bDoWordNGrams,pOverallResultsOutStream,bSilent,this,WeightMethod,Progress);      while (!tqRobin.addThreadFor(r))       Thread.yield();      Date dCurTime=new Date();      long lRemaining=(iTotal - iCur + 1) * (long)((double)(dCurTime.getTime() - dStart.getTime()) / iCur);      if (!bSilent || (bProgress))       System.err.print("Completed " + String.format("%7.4f",(double)iCur++ / iTotal * 100) + "%"+ String.format(" - Remaining %50s\r",gr.demokritos.iit.jinsect.utils.millisToMinSecString(lRemaining)));    }  }  try {    tqRobin.waitUntilCompletion();  } catch (  InterruptedException ex) {    System.err.println("Could not complete execution of all tasks.");    ex.printStackTrace(System.err);  }  System.err.println("Completed 100%. A total of " + iTotal + " comparisons were "+ "performed.");}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  public <T>T inject(Class<T> clazz,String framePath){  return inject(clazz,FramePath.parsePath(framePath));}  }
class C{  public QRDecomposition(RealMatrix matrix,double threshold){  this.threshold=threshold;  final int m=matrix.getRowDimension();  final int n=matrix.getColumnDimension();  qrt=matrix.transpose().getData();  rDiag=new double[FastMath.min(m,n)];  cachedQ=null;  cachedQT=null;  cachedR=null;  cachedH=null;  decompose(qrt);}  }
class C{  public static String formatCurrency(double price,String isoCode,Locale locale,int maximumFractionDigits){  com.ibm.icu.text.NumberFormat nf=com.ibm.icu.text.NumberFormat.getCurrencyInstance(locale);  if (isoCode != null && isoCode.length() > 1) {    nf.setCurrency(com.ibm.icu.util.Currency.getInstance(isoCode));  } else {    if (Debug.verboseOn())     Debug.logVerbose("No isoCode specified to format currency value:" + price,module);  }  if (maximumFractionDigits >= 0) {    nf.setMaximumFractionDigits(maximumFractionDigits);  }  return nf.format(price);}  }
class C{  public boolean lessThan(DMatch it){  return distance < it.distance;}  }
class C{  int readCorner3(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public TextMessage createTextMessage(String text) throws JMSException {  ensureOpen();  GSTextMessageImpl textMsg=new GSTextMessageImpl(this,text);  return textMsg;}  }
class C{  @SafeVarargs public static final <T>List<T> distinctUnion(final List<T>... lists){  final List<T> union=new UniqueArrayList<>();  for (  List<T> list : lists) {    union.addAll(list);  }  return union;}  }
class C{  @Override public void startConditional(short type,Augmentations augs) throws XNIException {}  }
class C{  public SpaceTypeDescriptorBuilder addFixedProperty(String propertyName,Class<?> propertyType,SpaceDocumentSupport documentSupport){  return addFixedProperty(propertyName,propertyType,documentSupport,StorageType.DEFAULT);}  }
class C{  public void enqueue(RemoteEvent theEvent){  EntryArrivedRemoteEvent event=(EntryArrivedRemoteEvent)theEvent;  SingleProducer producer=getProducer(event);  while (!_interrupted && !tryInsert(event)) {    Thread currentThread=Thread.currentThread();    producer.orderedThreadEventsMap.put(theEvent.getSequenceNumber(),currentThread);    if (tryInsert(event)) {      producer.orderedThreadEventsMap.remove(theEvent.getSequenceNumber());      break;    }    if (!_interrupted)     LockSupport.park();  }}  }
class C{  public LongAdder(){}  }
class C{  protected LogicalTable generateTable(String tableName,Granularity granularity,LogicalTableDictionary tableDictionary) throws BadApiRequestException {  LogicalTable generated=tableDictionary.get(new TableIdentifier(tableName,granularity));  if (generated == null) {    String msg=TABLE_GRANULARITY_MISMATCH.logFormat(granularity,tableName);    LOG.error(msg);    throw new BadApiRequestException(msg);  }  LOG.trace("Generated logical table: {} with granularity {}",generated,granularity);  return generated;}  }
class C{  public void update(){  if (classificationViewer.getTree().getNumberOfNodes() > 1) {    removeAll();    id2node.clear();    inducedTree.clear();    id2NodesInInducedTree.clear();    if (classificationViewer.getDocument().getNumberOfReads() > 0)     classificationViewer.computeInduceTreeWithNoCollapsedNodes(inducedTree,id2NodesInInducedTree);    final Node root=classificationViewer.getClassification().getFullTree().getRoot();    final int id=(Integer)root.getInfo();    final MyJTreeNode node=new MyJTreeNode(root);    final DefaultTreeModel model=(DefaultTreeModel)getModel();    model.setRoot(node);    id2node.put(id,node);    setRootVisible(true);    setShowsRootHandles(true);    addChildren(node);  }}  }
class C{  public static ServiceItem[] toServiceItem(ArrayList reps){  ServiceItem[] items=null;  if (reps != null) {    items=new ServiceItem[reps.size()];    for (int i=items.length; --i >= 0; ) {      items[i]=((Item)reps.get(i)).get();    }  }  return items;}  }
class C{  public Builder dlConf(DistributedLogConfiguration dlConf){  this._dlConf=dlConf;  return this;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AssignPlusExpr fullCopy(){  AssignPlusExpr tree=(AssignPlusExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public boolean contains(Split split){  return split2index.keySet().contains(split);}  }
class C{  public void removeTable(String tableUniquName){  tableInfoMap.remove(convertToLowerCase(tableUniquName));}  }
class C{  private void validateMergingLaunches(List<Launch> launches,User user,Project project){  expect(launches.size(),not(equalTo(0))).verify(BAD_REQUEST_ERROR,launches);  boolean isUserValidate=!(user.getRole().equals(ADMINISTRATOR) || project.getUsers().get(user.getId()).getProjectRole().getRoleLevel() >= LEAD.getRoleLevel());  launches.stream().forEach(null);}  }
class C{  private void sendBroadcastNewOperation(Target target,RemoteOperation operation){  Intent intent=new Intent(ACTION_OPERATION_ADDED);  if (target.mAccount != null) {    intent.putExtra(EXTRA_ACCOUNT,target.mAccount);  } else {    intent.putExtra(EXTRA_SERVER_URL,target.mServerUrl);  }  sendStickyBroadcast(intent);}  }
class C{  public void initializeLogging(){  LogWrapper logWrapper=new LogWrapper();  Log.setLogNode(logWrapper);  Log.i(TAG,"Ready");}  }
class C{  public final void removePropertyChangeListener(String propertyName,PropertyChangeListener listener){  getChangeSupport().removePropertyChangeListener(propertyName,listener);}  }
class C{  EventOccurrence(final Action action,final FieldODEState<T> newState,final T stopTime){  this.action=action;  this.newState=newState;  this.stopTime=stopTime;}  }
class C{  public void init$Children(){  children=new ASTNode[6];  setChild(new List(),2);  setChild(new List(),3);  setChild(new Opt(),4);  setChild(new Opt(),5);}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  private void resize(){  Entry[] oldTab=table;  int oldLen=oldTab.length;  int newLen=oldLen * 2;  Entry[] newTab=new Entry[newLen];  int count=0;  for (int j=0; j < oldLen; ++j) {    Entry e=oldTab[j];    if (e != null) {      int h=e.key.hashCode & (newLen - 1);      while (newTab[h] != null)       h=nextIndex(h,newLen);      newTab[h]=e;      count++;    }  }  setThreshold(newLen);  size=count;  table=newTab;}  }
class C{  public void processReadHits() throws CanceledException {  if (getMeganFile().hasDataConnector()) {    try {      final int readsFound=DataProcessor.apply(this);{        getSampleAttributeTable().addAttribute("Size",numberReads,true);      }      try {        saveAuxiliaryData();      } catch (      IOException e) {        Basic.caught(e);      }      if (readsFound > getNumberOfReads())       setNumberReads(readsFound);      if (getNumberOfReads() == 0 && getDir() != null)       getDir().getMainViewer().collapseToDefault();      if (sampleAttributeTable.getSampleOrder().size() == 0)       sampleAttributeTable.setSampleOrder(getSampleNames());    }  finally {      getProgressListener().setCancelable(true);    }  }  lastRecomputeTime=System.currentTimeMillis();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_protect_PROTECT_SKILL_HEAL_A_to_ME(String protector,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201179,protector,num0,skillcaster,skillname);}  }
class C{  public ResponsePacket visit(SetAutoCommitRequest request,QuerySession session) throws LeaseDeniedException, RemoteException, TransactionException {  ResponsePacket response=new ResponsePacket();  if (request.isAutoCommit() == session.isAutoCommit())   return response;  if (request.isAutoCommit()) {    if (session.getTransaction() != null)     try {      session.getTransaction().abort();    } catch (    Exception e) {      if (_logger.isLoggable(Level.FINE)) {        _logger.log(Level.FINE,"Failed to abort transaction.",e);      }    }    session.setTransaction(null);    session.clearUnderTransaction();  } else {    session.setTransaction(createTransaction());  }  session.setAutoCommit(request.isAutoCommit());  session.setSelectedForUpdate(null);  response.setIntResult(0);  return response;}  }
class C{  protected int doSocketRead(ByteBuffer destinationBuffer) throws IOException {  return this.socketChannel.read(destinationBuffer);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  private void initCleanerThreadIfNeeded(){  if (_entryVersionCleanerThread == null) {synchronized (this) {      if (!_cleanerThreadInitialized) {        ClassLoader origClassLoader=Thread.currentThread().getContextClassLoader();        if (SystemBoot.isRunningWithinGSC()) {          ClassLoaderHelper.setContextClassLoader(CommonClassLoader.getInstance(),true);        }        _entryVersionCleanerThread=new EntryVersionCleaner<V>(this.getClass().getSimpleName(),_freeEntryQueue,_entryInfos);        _entryVersionCleanerThread.start();        _cleanerThreadInitialized=true;        if (SystemBoot.isRunningWithinGSC()) {          ClassLoaderHelper.setContextClassLoader(origClassLoader,true);        }      }    }  }}  }
class C{  public void abort(){  checkReady();  state=DONE;  LIB.mdb_txn_abort(ptr);}  }
class C{  public RoleDataAccessException(String message,Throwable cause){  super(message,cause);}  }
class C{  public char next(){  char c=more() ? this.mySource.charAt(this.myIndex) : 0;  this.myIndex+=1;  return c;}  }
class C{  public void load(String fileName) throws IOException, MaryConfigurationException {  DataInputStream dis=null;  try {    dis=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));  } catch (  FileNotFoundException e) {    throw new RuntimeException("File [" + fileName + "] was not found.");  }  try {    hdr=new MaryHeader(dis);    if (hdr.getType() != MaryHeader.LISTENERFEATS) {      throw new RuntimeException("File [" + fileName + "] is not a valid Mary Units file.");    }    windowSize=dis.readFloat();    if (this.windowSize <= 0) {      throw new RuntimeException("File [" + fileName + "] has a negative number for window size. Aborting.");    }    skipSize=dis.readFloat();    if (this.skipSize <= 0) {      throw new RuntimeException("File [" + fileName + "] has a negative number for window size. Aborting.");    }    numberOfUnits=dis.readInt();    if (numberOfUnits < 0) {      throw new RuntimeException("File [" + fileName + "] has a negative number of units. Aborting.");    }    contours=new double[numberOfUnits][];    coeffs=new double[numberOfUnits][];    voiced=new boolean[numberOfUnits][];    for (int i=0; i < numberOfUnits; i++) {      int polyOrder=dis.readInt();      coeffs[i]=new double[polyOrder];      for (int j=0; j < polyOrder; j++) {        coeffs[i][j]=dis.readFloat();      }      int f0ContourLength=dis.readInt();      contours[i]=new double[f0ContourLength];      voiced[i]=new boolean[f0ContourLength];      Arrays.fill(voiced[i],false);      for (int j=0; j < f0ContourLength; j++) {        contours[i][j]=dis.readFloat();        if (contours[i][j] > 0) {          voiced[i][j]=true;        }      }    }  } catch (  IOException e) {    throw new RuntimeException("Reading the Mary header from file [" + fileName + "] failed.",e);  }}  }
class C{  public boolean permitCallingEvictionStrategy(){  if (_needToRemoveFromEvictionStrategy || !isInEvictionStrategy())   return false;  int res=_numOfCurrentEvictionStrategyCallersUpdater.incrementAndGet(this);  return res > 0;}  }
class C{  private void fireUpdateReceivedEvent(){  try {    listenersLock.readLock().lock();    for (    BaseTagListener listener : listeners) {      listener.onUpdate(this);    }  }  finally {    listenersLock.readLock().unlock();  }}  }
class C{  public Circle(final S2Point first,final S2Point second,final double tolerance){  reset(first.getVector().crossProduct(second.getVector()));  this.tolerance=tolerance;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void pushTemplateFolder(@NotNull String folderName) throws IOException {  myLastTemplateFolders.push(resolveName(folderName));}  }
class C{  public static XorSpacePredicate xor(ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){  return new XorSpacePredicate(leftPredicate,rightPredicate);}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("Taxa (").append(size()).append("):\n");  for (Iterator it=iterator(); it.hasNext(); ) {    String name=(String)it.next();    buf.append(name).append("\n");  }  return buf.toString();}  }
class C{  private void startWaveWesternShieldGenerator2(){  sp(284844,258.37912f,176.03621f,325.59268f,(byte)30,1000,"WesternShieldGenerator1");  sp(284845,255.55922f,176.17963f,325.49332f,(byte)29,1000,"WesternShieldGenerator2");  sp(284846,252.49738f,176.27466f,325.52942f,(byte)29,1000,"WesternShieldGenerator3");}  }
class C{  public static boolean needsAnnotationsJarInClasspath(@NotNull IAndroidTarget target){  return target.getVersion().getApiLevel() <= 15;}  }
class C{  public KeywordSearchTupleSet(){  m_lucene=new LuceneSearcher();}  }
class C{  public static java.sql.Timestamp toTimestamp(int month,int day,int year,int hour,int minute,int second){  java.util.Date newDate=toDate(month,day,year,hour,minute,second);  if (newDate != null) {    return new java.sql.Timestamp(newDate.getTime());  } else {    return null;  }}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public Iterator neighbors(Node n){  return new NeighborIterator(n,edges(n));}  }
class C{  public UseItemEggIncubatorResponse.Result incubate(EggIncubator incubator) throws LoginFailedException, RemoteServerException {  if (incubator.isInUse()) {    throw new IllegalArgumentException("Incubator already used");  }  return incubator.hatchEgg(this);}  }
class C{  public void addHeaderView(View view,int viewHeight){  addHeaderView(view,viewHeight,-1);}  }
class C{  public NGramDistroDocument(){  Graph=new DocumentNGramDistroGraph();  Histogram=new DocumentNGramHistogram();}  }
class C{  public String makeStringLiteral(String value){  if (value == null) {    return this.literalDQStringDefault;  } else   if (value.isEmpty()) {    return "\"\"";  } else   if (!value.contains("\"")) {    return "r\"" + value + "\"";  } else {    return "\"" + makeStringValue(value) + "\"";  }}  }
class C{  private Options createOptions(){  Options options=new Options();  Option optionHelp=new Option("h","help",false,"Print out the help documentation for this command line execution");  optionHelp.setRequired(false);  options.addOption(optionHelp);  Option optionJar=new Option("j","jar",true,"required -- Fully qualified jar file");  optionJar.setRequired(false);  options.addOption(optionJar);  String tests="testNum = 1: Wideskies Tests\n";  tests+="Subtests:\n";  tests+="E - Elasticsearch MapReduce\n";  tests+="J - JSON/HDFS MapReduce\n";  tests+="ES - Elasticsearch Spark \n";  tests+="JS - JSON/HDFS Spark \n";  tests+="SS - Spark Streaming Tests \n";  tests+="JSS - JSON/HDFS Spark Streaming \n";  tests+="ESS - Elasticsearch Spark Streaming \n";  Option optionTestSelection=new Option("t","tests",true,"optional -- Select which tests to execute: \n" + tests);  optionTestSelection.setRequired(false);  optionTestSelection.setArgName("<testNum>:<subtestDesignator>");  optionTestSelection.setType(String.class);  options.addOption(optionTestSelection);  return options;}  }
class C{  public static Patterns jars(String[] includes){  return new Patterns(includes,new String[]{});}  }
class C{  public ChangeSet addAllToCollection(String path,Collection<? extends Serializable> newItems){  return add(new AddAllToCollectionSpaceEntryMutator(path,newItems));}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  @Deprecated public short toDamageValue(){  return 0;}  }
class C{  public static boolean checkPermission(Context context,String... permissions){  return PermissionUtils.getDeniedPermissions(context,permissions).length <= 0;}  }
class C{  public Base64OutputStream(OutputStream outputStream,int wrapAt){  this.outputStream=outputStream;  this.linelength=wrapAt;}  }
class C{  public void inverseRotateVect(Vector3f vec){  float vx=vec.x, vy=vec.y, vz=vec.z;  vec.x=vx * m00 + vy * m10 + vz * m20;  vec.y=vx * m01 + vy * m11 + vz * m21;  vec.z=vx * m02 + vy * m12 + vz * m22;}  }
class C{  public static String toStringUnpacked(byte[] unpacked){  StringBuilder buf=new StringBuilder();  for (  byte a : unpacked)   buf.append(String.format("%d",a));  return buf.toString();}  }
class C{  public boolean zip(File[] src,File dest){  return false;}  }
class C{  public boolean naive(){  return soot.PhaseOptions.getBoolean(options,"naive");}  }
class C{  public static byte[] hash(byte[] data,int offset,int len){  try {    MessageDigest a=MessageDigest.getInstance("SHA-256");    a.update(data,offset,len);    return a.digest();  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }}  }
class C{  public Row(String json){  set(json);}  }
class C{  public void addSample(String sample,Document docToAdd){  getDataTable().addSample(sample,docToAdd.getDataTable());  Set<String> samples=new HashSet<>();  samples.add(sample);  getSampleAttributeTable().addTable(docToAdd.getSampleAttributeTable().extractTable(samples),false,true);}  }
class C{  private double[] computeMedians(int[] sample1,int[] sample2,int resamplingSize,int repeats) throws CanceledException {  assert (sample1.length == sample2.length);  int length=sample1.length;  int[][] diff=new int[repeats][length];  progressListener.setSubtask("random sampling");  progressListener.setMaximum(repeats);  for (int i=0; i < repeats; i++) {    int[] N1=getRandomSample(sample1,resamplingSize);    int[] N2=getRandomSample(sample2,resamplingSize);    diff[i]=getAbsoluteDifference(N1,N2);    progressListener.setProgress(i);  }  progressListener.setSubtask("computing medians");  progressListener.setMaximum(-1);  progressListener.setProgress(-1);  double[] median=new double[length];  for (int j=0; j < length; j++) {    int[] row=extractRow(diff,j);    median[j]=getMedian(row);    progressListener.setProgress(j);  }  return median;}  }
class C{  public String indexName(){  return idxName;}  }
class C{  public static DataFrame normalize(DataFrame dataFrame,double min,double max){  return normalize(dataFrame,min,max,Collections.<String>emptyList());}  }
class C{  public static void d(String tag,String s,Object... args){  if (LOG.DEBUG >= LOGLEVEL)   Log.d(tag,String.format(s,args));}  }
class C{  public static boolean isMultiTenantEnabled(){  return "Y".equalsIgnoreCase(UtilProperties.getPropertyValue("general.properties","multitenant"));}  }
class C{  public boolean usedDevice(@NotNull IDevice device){  return myDevicesUsedInLaunch.contains(device.getSerialNumber());}  }
class C{  public static void addPattern(String emojiText,Object icon){  emoticons.put(Pattern.compile(Pattern.quote(emojiText)),icon);}  }
class C{  public ListModel(final Object[] items){  for (int i=0; i < items.length; ++i)   m_items.add(items[i]);}  }
class C{  private Point estimateContentSize(){  Point screenSize=new Point();  WindowManager wm=(WindowManager)mApplication.getSystemService(Context.WINDOW_SERVICE);  wm.getDefaultDisplay().getSize(screenSize);  Resources resources=mApplication.getResources();  int statusBarId=resources.getIdentifier("status_bar_height","dimen","android");  try {    screenSize.y-=resources.getDimensionPixelSize(R.dimen.custom_tabs_control_container_height);    screenSize.y-=resources.getDimensionPixelSize(statusBarId);  } catch (  Resources.NotFoundException e) {  }  float density=resources.getDisplayMetrics().density;  screenSize.x/=density;  screenSize.y/=density;  return screenSize;}  }
class C{  public static boolean isConcreteType(@NotNull TypeMirror typeMirror){  if (typeMirror.getKind() == TypeKind.TYPEVAR) {    return false;  }  if (isPrimitive(typeMirror,sTypeUtils)) {    return true;  }  if (typeMirror instanceof DeclaredType) {    List<? extends TypeMirror> typeMirrors=((DeclaredType)typeMirror).getTypeArguments();    for (    TypeMirror type : typeMirrors) {      if (type.getKind() == TypeKind.TYPEVAR) {        return false;      }    }  }  return true;}  }
class C{  public boolean hasAny(){  return partitions != null && !partitions.isEmpty();}  }
class C{  @Override public boolean hasField(String fldName){  return prodScan.hasField(fldName);}  }
class C{  public static int indexOfLastSeparator(String filename){  if (filename == null) {    return -1;  }  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);  return Math.max(lastUnixPos,lastWindowsPos);}  }
class C{  public String assignIfPossible(VariableRef value){  if (setter() != null) {    return format(setter(),cast(value));  } else {    return "";  }}  }
class C{  protected void maximise(PointList samplePoints,double[] p_ij) throws CovarianceSingularityException {  double p_i=0;  for (int j=0; j < samplePoints.size(); j++)   p_i+=p_ij[j];  Matrix mean=new Matrix(dimension,1);  for (int j=0; j < samplePoints.size(); j++) {    Matrix x=samplePoints.get(j);    x=x.times(p_ij[j]);    mean.plusEquals(x);  }  mean.timesEquals(1 / p_i);  Matrix covariances=new Matrix(dimension,dimension);  for (int j=0; j < samplePoints.size(); j++) {    Matrix x=samplePoints.get(j);    Matrix diff=x.minus(mean);    diff=diff.times(diff.transpose());    diff.timesEquals(p_ij[j]);    covariances.plusEquals(diff);  }  covariances.timesEquals(1 / p_i);  this.covariances=covariances;  this.mean=mean;  componentWeight=p_i / samplePoints.size();  actualizeOptimizationFields();}  }
class C{  private void moveTo(long blkNum,int slot){  moveFrom=currentPage.currentBlk().number();  BlockId blk=new BlockId(currentPage.currentBlk().fileName(),blkNum);  try {    ccMgr.readLeafBlock(blk);  } catch (  LockAbortException e) {    tx.rollback();    throw e;  }  currentPage.close();  currentPage=new BTreePage(blk,NUM_FLAGS,schema,tx);  currentSlot=slot;}  }
class C{  @Override public synchronized void add(Vertex v) throws Exception {  if (UniqueVertices.containsKey(v.getLabel()))   return; else   super.add(v);  UniqueVertices.put(v.getLabel(),v);}  }
class C{  private void cancelDownloadsForAccount(Account account){  mPendingDownloads.remove(account.name);}  }
class C{  public AbstractResource findResource(int resourceId){  ResourceId id=parseResourceId(resourceId);  for (  ResPackage resPackage : this.packages)   if (resPackage.packageId == id.packageId) {    for (    ResType resType : resPackage.types)     if (resType.id == id.typeId) {      return resType.getFirstResource(resourceId);    }    break;  }  return null;}  }
class C{  private boolean needGestureDetector(String type){  if (mHost != null) {    for (    WXGestureType gesture : WXGestureType.LowLevelGesture.values()) {      if (type.equals(gesture.toString())) {        return true;      }    }    for (    WXGestureType gesture : WXGestureType.HighLevelGesture.values()) {      if (type.equals(gesture.toString())) {        return true;      }    }  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANNOT_OPEN_DOOR_NEED_NAMED_KEY_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300722,value0);}  }
class C{  @RequestMapping(value="/rest/activiti/decision-tables",method=RequestMethod.GET,produces="application/json") public JsonNode listDecisionTables(HttpServletRequest request){  ServerConfig serverConfig=retrieveServerConfig();  Map<String,String[]> parameterMap=getRequestParametersWithoutServerId(request);  return clientService.listDecisionTables(serverConfig,parameterMap);}  }
class C{  public int compareTo(Issue otherIssue){  return this.getKey().compareTo(otherIssue.getKey());}  }
class C{  public void clearLineConfigs(){  mLinesConfig.clear();}  }
class C{  @Deployment public void testActivityMessageBoundaryEventsOnSubProcess() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("messageOnSubProcess");  assertNotNull(processInstance);  Execution executionWithMessage=runtimeService.createExecutionQuery().activityId("boundaryMessageEventCatching").singleResult();  assertNotNull(executionWithMessage);  runtimeService.messageEventReceived("message_1",executionWithMessage.getId());  assertEquals(4,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiMessageEvent);  ActivitiMessageEvent messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_WAITING,messageEvent.getType());  assertEquals("boundaryMessageEventCatching",messageEvent.getActivityId());  assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());  assertEquals("message_1",messageEvent.getMessageName());  assertNull(messageEvent.getMessageData());  assertTrue(listener.getEventsReceived().get(1) instanceof ActivitiMessageEvent);  messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_RECEIVED,messageEvent.getType());  assertEquals("boundaryMessageEventCatching",messageEvent.getActivityId());  assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());  assertEquals("message_1",messageEvent.getMessageName());  assertNull(messageEvent.getMessageData());  assertTrue(listener.getEventsReceived().get(2) instanceof ActivitiActivityCancelledEvent);  ActivitiActivityCancelledEvent signalEvent=(ActivitiActivityCancelledEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.ACTIVITY_CANCELLED,signalEvent.getType());  assertEquals("subProcess",signalEvent.getActivityId());  assertEquals(executionWithMessage.getProcessInstanceId(),signalEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),signalEvent.getProcessDefinitionId());  assertNotNull(signalEvent.getCause());  assertTrue(signalEvent.getCause() instanceof MessageEventSubscriptionEntity);  MessageEventSubscriptionEntity cause=(MessageEventSubscriptionEntity)signalEvent.getCause();  assertEquals("message_1",cause.getEventName());  assertTrue(listener.getEventsReceived().get(3) instanceof ActivitiActivityCancelledEvent);  signalEvent=(ActivitiActivityCancelledEvent)listener.getEventsReceived().get(3);  assertEquals(ActivitiEventType.ACTIVITY_CANCELLED,signalEvent.getType());  assertEquals("cloudformtask1",signalEvent.getActivityId());  assertEquals(executionWithMessage.getProcessInstanceId(),signalEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),signalEvent.getProcessDefinitionId());  assertNotNull(signalEvent.getCause());  assertTrue(signalEvent.getCause() instanceof MessageEventSubscriptionEntity);  cause=(MessageEventSubscriptionEntity)signalEvent.getCause();  assertEquals("message_1",cause.getEventName());  assertDatabaseEventPresent(ActivitiEventType.ACTIVITY_MESSAGE_WAITING);  assertDatabaseEventPresent(ActivitiEventType.ACTIVITY_MESSAGE_RECEIVED);}  }
class C{  public static String toDateString(java.util.Date date){  return toDateString(date,"MM/dd/yyyy");}  }
class C{  private static boolean isInHorizontalTargetZone(float x,float y,float handleXStart,float handleXEnd,float handleY,float targetRadius){  if (x > handleXStart && x < handleXEnd && Math.abs(y - handleY) <= targetRadius) {    return true;  }  return false;}  }
class C{  public static void copyPropertiesExclude(Object from,Object to,String[] excludsArray) throws Exception {  List<String> excludesList=null;  if (excludsArray != null && excludsArray.length > 0) {    excludesList=Arrays.asList(excludsArray);  }  Method[] fromMethods=from.getClass().getDeclaredMethods();  Method[] toMethods=to.getClass().getDeclaredMethods();  Method fromMethod=null, toMethod=null;  String fromMethodName=null, toMethodName=null;  for (int i=0; i < fromMethods.length; i++) {    fromMethod=fromMethods[i];    fromMethodName=fromMethod.getName();    if (!fromMethodName.contains("get")) {      if (!fromMethodName.startsWith("is")) {        continue;      }    }    if (excludesList != null && excludesList.contains(fromMethodName.substring(fromMethodName.startsWith("is") ? 2 : 3).toLowerCase())) {      continue;    }    toMethodName="set" + fromMethodName.substring(fromMethodName.startsWith("is") ? 2 : 3);    toMethod=findMethodByName(toMethods,toMethodName);    if (toMethod == null) {      continue;    }    Object value=fromMethod.invoke(from,new Object[0]);    if (value == null) {      continue;    }    if (value instanceof Collection) {      @SuppressWarnings("rawtypes") Collection newValue=(Collection)value;      if (newValue.size() <= 0) {        continue;      }    }    toMethod.invoke(to,new Object[]{value});  }}  }
class C{  public Split reciprocal(){  final double approximateInv=1.0 / full;  final Split splitInv=new Split(approximateInv);  final Split product=multiply(splitInv);  final double error=(product.high - 1) + product.low;  return Double.isNaN(error) ? splitInv : new Split(splitInv.high,splitInv.low - error / full);}  }
class C{  private void createDiskResources(ComputeAllocationTaskState state,ComputeDescription cd,String parentLink,String computeResourceId,String computeResourceLink,String computeName,List<String> networkLinks,ServiceTaskCallback taskCallback){  String diskDescLink=state.getCustomProperty(ComputeConstants.CUSTOM_PROP_DISK_LINK);  if (diskDescLink == null) {    createComputeResource(state,cd,parentLink,computeResourceId,computeResourceLink,computeName,new ArrayList<>(),networkLinks,taskCallback);    return;  }  ConcurrentLinkedQueue<String> diskLinks=new ConcurrentLinkedQueue<>();  int expected=1;  AtomicInteger counter=new AtomicInteger();  CompletionHandler diskCreateCompletion=null;  sendRequest(Operation.createGet(this,diskDescLink).setCompletion(null));}  }
class C{  public void output(Source input,Result destination) throws TransformerException {  transformer.transform(input,destination);}  }
class C{  public EqDataTagException(final String descr){  super(descr);}  }
class C{  public static final Object eval(String expression,Map<String,Object> context) throws EvalError {  Object o=null;  if (expression == null || expression.equals("")) {    Debug.logError("BSH Evaluation error. Empty expression",module);    return null;  }  if (Debug.verboseOn())   Debug.logVerbose("Evaluating -- " + expression,module);  if (Debug.verboseOn())   Debug.logVerbose("Using Context -- " + context,module);  try {    Interpreter bsh=makeInterpreter(context);    o=bsh.eval(expression);    if (Debug.verboseOn())     Debug.logVerbose("Evaluated to -- " + o,module);    NameSpace ns=bsh.getNameSpace();    String[] varNames=ns.getVariableNames();    for (    String varName : varNames) {      context.put(varName,bsh.get(varName));    }  } catch (  EvalError e) {    Debug.logError(e,"BSH Evaluation error.",module);    throw e;  }  return o;}  }
class C{  public Map cancelAll(Uuid[] cookies){  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerImpl.class.getName(),"cancelAll");  }  readyState.check();  Map results=LandlordUtil.cancelAll(this,cookies);  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TxnManagerImpl.class.getName(),"cancelAll");  }  return results;}  }
class C{  public UpdateLeasesSpaceOperationResult(){}  }
class C{  private void refillBuffer() throws IOException {  int nBytesToRead, nBytesRead;  for (nBytesToRead=0; pos < bytesInBuffer; nBytesToRead++, pos++)   inputBuffer[nBytesToRead]=inputBuffer[pos];  pos=nBytesToRead;  nBytesToRead=(inputBuffer.length - nBytesToRead) - frameSize;  nBytesRead=read(nBytesToRead,pos);  bytesInBuffer=pos + nBytesRead;  pos=0;}  }
class C{  public boolean isPointInChildBounds(View child,int x,int y){  final Rect r=mTempRect1;  getDescendantRect(child,r);  return r.contains(x,y);}  }
class C{  public void removeGroupPropertiesListener(GroupPropertiesListener groupPropertiesListener){  groupPropertiesListeners.remove(groupPropertiesListener);}  }
class C{  public static void expandDigits(String numberString,WordRelation wordRelation,Item tokenItem){  int numberDigits=numberString.length();  for (int i=0; i < numberDigits; i++) {    char digit=numberString.charAt(i);    if (isDigit(digit)) {      wordRelation.addWord(tokenItem,digit2num[numberString.charAt(i) - '0']);    } else {      wordRelation.addWord(tokenItem,"umpty");    }  }}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public static boolean isControl(long flags){  return ((flags & LOGRECORD_FLAGS_CONTROL_MESSAGE) != 0);}  }
class C{  public static void loadPropsFromFile(String filename,FileSystem fs) throws IOException {  Path p=new Path(filename);  loadPropsFromFile(p,fs);}  }
class C{  protected void checkVectorDimensions(int n) throws MathIllegalArgumentException {  if (getDimension() != n) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,getDimension(),n);  }}  }
class C{  public static boolean isOnScreen(float x,float y,OrthoCamera camera,float centerX,float centerY){  float startX=centerX - (Settings.getWidth() / 2);  float startY=centerY - (Settings.getHeight() / 2);  return x >= startX - (TILE_SIZE * 2) && y >= startY - (TILE_SIZE * 2) && x <= startX + Settings.getWidth() + TILE_SIZE && y <= startY + Settings.getHeight() + TILE_SIZE;}  }
class C{  @Override public boolean hasErrors(){  return getErrorCount() > 0;}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  protected long unScaleTime(int reqSampleRate,long timelineTimeInSamples){  if (reqSampleRate == sampleRate)   return (timelineTimeInSamples);  return (Math.round((double)(sampleRate) * (double)(timelineTimeInSamples) / (reqSampleRate)));}  }
class C{  private boolean sendUpdatedConfigsIfPossible(Long appId,Map<String,String> configItems,HttpServletResponse resp){  Response<Set<String>> findResp=localService.checkUpdatedConfigs(appId,configItems);  if (!findResp.isSuccess()) {    Logs.error("failed to check updated configs: {}",findResp.getErr());    return false;  }  return sendUpdatedConfigs(resp,findResp.getData());}  }
class C{  @Override public void onSupervisionUpdate(SupervisionEvent supervisionEvent){  if (supervisionEvent == null) {    return;  }  if (isControlTag() && !isAliveTag()) {    return;  }  Tag clone=null;  updateTagLock.writeLock().lock();  try {    boolean validUpdate=false;    validUpdate|=equipmentSupervisionStatus.containsKey(supervisionEvent.getEntityId());    validUpdate|=subEquipmentSupervisionStatus.containsKey(supervisionEvent.getEntityId());    validUpdate|=processSupervisionStatus.containsKey(supervisionEvent.getEntityId());    if (validUpdate) {      SupervisionEvent oldEvent;switch (supervisionEvent.getEntity()) {case PROCESS:        oldEvent=processSupervisionStatus.put(supervisionEvent.getEntityId(),supervisionEvent);      updateProcessStatus();    break;case EQUIPMENT:  oldEvent=equipmentSupervisionStatus.put(supervisionEvent.getEntityId(),supervisionEvent);updateEquipmentStatus();break;case SUBEQUIPMENT:oldEvent=subEquipmentSupervisionStatus.put(supervisionEvent.getEntityId(),supervisionEvent);updateSubEquipmentStatus();break;default :String errorMsg="The supervision event type " + supervisionEvent.getEntity() + " is not supported.";LOG.error("update(SupervisionEvent) - " + errorMsg);throw new IllegalArgumentException(errorMsg);}if (oldEvent == null || !supervisionEvent.equals(oldEvent)) {clone=this.clone();}}}  finally {updateTagLock.writeLock().unlock();}if (clone != null) {notifyListeners(clone);}}  }
class C{  @Override public void populateExpression(Object objValue){  if (objValue instanceof String) {    String sValue=(String)objValue;    populateField(sValue);  }}  }
class C{  public void remove(final String id){  this.speakers.remove(id);}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding,boolean append) throws IOException {  writeLines(file,null,lines,lineEnding,append);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  @Override public void finish(){  CarbonUtil.closeStreams(stream);}  }
class C{  public Vector2f negateLocal(){  x=-x;  y=-y;  return this;}  }
class C{  protected PhotosPutTagQuery photoId(int value){  return unsafeParam("photo_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LEAVE_INSTANCE(String value0){  return new SM_SYSTEM_MESSAGE(1400044,value0);}  }
class C{  public static String libType(){  if (OS_NAME.indexOf("mac") >= 0) {    return "jnilib";  } else   if (OS_NAME.indexOf("nix") >= 0 || OS_NAME.indexOf("nux") >= 0 || OS_NAME.indexOf("aix") > 0) {    return "so";  } else   if (OS_NAME.indexOf("win") >= 0) {    return "dll";  }  throw new TypeNotPresentException(OS_NAME + " not supported",null);}  }
class C{  public static void text(double x,double y,String text){  if (text == null)   throw new NullPointerException();  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int ws=metrics.stringWidth(text);  int hs=metrics.getDescent();  offscreen.drawString(text,(float)(xs - ws / 2.0),(float)(ys + hs));  draw();}  }
class C{  public String toStringTree(boolean interpolate){  ConfigurationNodeVisitor visitor=new ToStringTreeVisitor();  visit(visitor,interpolate);  return visitor.toString();}  }
class C{  public boolean contains(byte entryCode){  return this.optionsTable.containsKey(new Byte(entryCode));}  }
class C{  public void jGoogleAnalyticsTracker(final String eventType,final String version,final String trackerId){  final JGoogleAnalyticsTracker tracker=new JGoogleAnalyticsTracker("vdi_calculator",version,trackerId);  final FocusPoint focusPoint=new FocusPoint(eventType.toLowerCase());  tracker.trackAsynchronously(focusPoint);}  }
class C{  @Override public int read() throws IOException {  if (eof) {    throw new IOException("Read after end of file");  }  if (position == size) {    return doEndOfFile();  }  position++;  return processByte();}  }
class C{  private float[] matrixFromPointNormalUp(double[] point,double[] normal,float[] up){  float[] zAxis=new float[]{(float)normal[0],(float)normal[1],(float)normal[2]};  normalize(zAxis);  float[] xAxis=crossProduct(zAxis,up);  normalize(xAxis);  float[] yAxis=crossProduct(zAxis,xAxis);  normalize(yAxis);  float[] m=new float[16];  Matrix.setIdentityM(m,0);  m[0]=xAxis[0];  m[1]=xAxis[1];  m[2]=xAxis[2];  m[4]=yAxis[0];  m[5]=yAxis[1];  m[6]=yAxis[2];  m[8]=zAxis[0];  m[9]=zAxis[1];  m[10]=zAxis[2];  m[12]=(float)point[0];  m[13]=(float)point[1];  m[14]=(float)point[2];  return m;}  }
class C{  private static void doCopyFile(File srcFile,File destFile,boolean preserveFileDate) throws IOException {  if (destFile.exists() && destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' exists but is a directory");  }  FileInputStream fis=null;  FileOutputStream fos=null;  FileChannel input=null;  FileChannel output=null;  try {    fis=new FileInputStream(srcFile);    fos=new FileOutputStream(destFile);    input=fis.getChannel();    output=fos.getChannel();    long size=input.size();    long pos=0;    long count=0;    while (pos < size) {      count=size - pos > FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;      pos+=output.transferFrom(input,pos,count);    }  }  finally {    IOUtils.closeQuietly(output);    IOUtils.closeQuietly(fos);    IOUtils.closeQuietly(input);    IOUtils.closeQuietly(fis);  }  if (srcFile.length() != destFile.length()) {    throw new IOException("Failed to copy full contents from '" + srcFile + "' to '"+ destFile+ "'");  }  if (preserveFileDate) {    destFile.setLastModified(srcFile.lastModified());  }}  }
class C{  @Override protected List<Target> createTargets(List<Element> segmentsAndBoundaries){  List<Target> targets=new ArrayList<Target>();  String silenceSymbol="_";  HalfPhoneTarget prev=new HalfPhoneTarget(silenceSymbol + "_R",null,false);  for (  Element sOrB : segmentsAndBoundaries) {    String phone=getPhoneSymbol(sOrB);    HalfPhoneTarget leftHalfPhone=new HalfPhoneTarget(phone + "_L",sOrB,true);    HalfPhoneTarget rightHalfPhone=new HalfPhoneTarget(phone + "_R",sOrB,false);    targets.add(new DiphoneTarget(prev,leftHalfPhone));    prev=rightHalfPhone;  }  if (!prev.isSilence()) {    HalfPhoneTarget silence=new HalfPhoneTarget(silenceSymbol + "_L",null,true);    targets.add(new DiphoneTarget(prev,silence));  }  return targets;}  }
class C{  public DynamicTemplateParameterContext addParameter(DynamicContextParameters param,String paramValue){  return addParameter(param,paramValue,ContextInfo.EMPTY);}  }
class C{  public FaveGetMarketItemsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void initColumns(){  columns.clear();  final ArrayList<ColumnId> columnOrder=getColumnOrderFromConfig();  columnOrder.forEach(null);}  }
class C{  public static double sum(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {  return SUM.evaluate(values,begin,length);}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public void addResource(URL url){  addResourceObject(url);}  }
class C{  private void removeAnyUnneededPeriodTypes(){  Set<PeriodTypeExtended> periodTypeXs=new HashSet<>(periodTypeExtendedMap.values());  for (  PeriodTypeExtended periodTypeX : periodTypeXs) {    if (periodTypeX.getRules().isEmpty()) {      periodTypeExtendedMap.remove(periodTypeX.getPeriodType());    }  }}  }
class C{  private Result rowNumMap(Result result,MetricColumn metricColumn,int rowNum){  Map<MetricColumn,Object> metricValues=new LinkedHashMap<>(result.getMetricValues());  metricValues.put(metricColumn,BigDecimal.valueOf(rowNum));  return new Result(result.getDimensionRows(),metricValues,result.getTimeStamp());}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public SoftAssertionFailedEntry(String message){  super();  this.message=message;}  }
class C{  public static boolean hasICS(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;}  }
class C{  @Override public RuleTagCacheObject clone() throws CloneNotSupportedException {  RuleTagCacheObject ruleTagCacheObject=(RuleTagCacheObject)super.clone();  if (this.parentEquipments != null) {    ruleTagCacheObject.parentEquipments=new HashSet<Long>();    for (    Long eqId : this.parentEquipments) {      ruleTagCacheObject.parentEquipments.add(eqId);    }  }  if (this.parentSubEquipments != null) {    ruleTagCacheObject.parentSubEquipments=new HashSet<Long>();    for (    Long subEqId : this.parentSubEquipments) {      ruleTagCacheObject.parentSubEquipments.add(subEqId);    }  }  if (this.parentProcesses != null) {    ruleTagCacheObject.parentProcesses=new HashSet<Long>();    for (    Long procId : this.parentProcesses) {      ruleTagCacheObject.parentProcesses.add(procId);    }  }  ruleTagCacheObject.ruleExpression=null;  if (this.ruleExpression != null && ruleText != null) {    ruleTagCacheObject.setRuleText(ruleText);  }  return ruleTagCacheObject;}  }
class C{  public static boolean isFloatLike(Type t){  return t.equals(FloatType.v()) || t.equals(DoubleType.v()) || t.equals(RefType.v("java.lang.Float"))|| t.equals(RefType.v("java.lang.Double"));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_INTERVAL_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200650,skillcaster,num0,skillname);}  }
class C{  public static String createRGBString(Color c){  return "rgb(" + (c.getRed() * 255) + ","+ (c.getGreen() * 255)+ ","+ (c.getBlue() * 255)+ ");";}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public DHCPMessage(int inPort){  initialize();  this.destination_IP=BROADCAST_ADDR;  this.gPort=inPort;}  }
class C{  protected Decision suggestCategory(DocumentNGramGraph dDoc){  HashMap hResults=new HashMap();  Iterator iIter=Arrays.asList(getAvailableCategories()).iterator();  int iCnt=0;  String sSelectedCategory=null;  double dMaxSimilarity=-1.0;  Distribution<String> dEvidence=new Distribution<String>();  while (iIter.hasNext()) {    NamedDocumentNGramGraph ic=(NamedDocumentNGramGraph)Repository.loadObject((String)iIter.next(),INSECTDB.CATEGORY_TYPE);    if (ic != null) {      NamedDocumentNGramGraph stdTemp=new NamedDocumentNGramGraph();      stdTemp.setDataString(filterDataString(dDoc.getDataString(),ic));      double dCurSimilarity=finalSimilarityToCategory(stdTemp,ic);      hResults.put(ic.getName(),dCurSimilarity);      if (dCurSimilarity > dMaxSimilarity) {        sSelectedCategory=ic.getName();        dMaxSimilarity=dCurSimilarity;      }      dEvidence.setValue(ic.getName(),dCurSimilarity);    }  }  double dEntropy=statisticalCalculation.entropy(dEvidence.getProbabilityDistribution());  return new Decision(dDoc,sSelectedCategory,dEntropy == 0 ? 1.0 : Math.min(1.0,1.0 / (Math.pow(2,dEntropy))),hResults);}  }
class C{  public static boolean isProductInventoryAvailableByFacility(ProductConfigWrapper productConfig,String inventoryFacilityId,BigDecimal quantity,LocalDispatcher dispatcher){  boolean available=true;  List<ConfigOption> options=productConfig.getSelectedOptions();  for (  ConfigOption ci : options) {    List<GenericValue> products=ci.getComponents();    for (    GenericValue product : products) {      String productId=product.getString("productId");      BigDecimal cmpQuantity=product.getBigDecimal("quantity");      BigDecimal neededQty=BigDecimal.ZERO;      if (cmpQuantity != null) {        neededQty=quantity.multiply(cmpQuantity);      }      if (!isProductInventoryAvailableByFacility(productId,inventoryFacilityId,neededQty,dispatcher)) {        ci.setAvailable(false);      }    }    if (!ci.isAvailable()) {      available=false;    }  }  return available;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  @Override public void run(){  while (!isInterrupted()) {    try {      ValueHolder<K,V> ref=(ValueHolder<K,V>)_queue.remove();      _table.remove(ref.getKey());    } catch (    InterruptedException e) {      interrupt();      break;    }  }}  }
class C{  public boolean isValid(String email){  if (email == null) {    return false;  }  if (email.endsWith(".")) {    return false;  }  Matcher emailMatcher=EMAIL_PATTERN.matcher(email);  if (!emailMatcher.matches()) {    return false;  }  if (!isValidUser(emailMatcher.group(1))) {    return false;  }  if (!isValidDomain(emailMatcher.group(2))) {    return false;  }  return true;}  }
class C{  private String saveCatchInfo2File(Throwable ex){  StringBuffer sb=new StringBuffer();  for (  Map.Entry<String,String> entry : infos.entrySet()) {    String key=entry.getKey();    String value=entry.getValue();    sb.append(key + "=" + value+ "\n");  }  Writer writer=new StringWriter();  PrintWriter printWriter=new PrintWriter(writer);  ex.printStackTrace(printWriter);  Throwable cause=ex.getCause();  while (cause != null) {    cause.printStackTrace(printWriter);    cause=cause.getCause();  }  printWriter.close();  String result=writer.toString();  sb.append(result);  try {    long timestamp=System.currentTimeMillis();    String time=formatter.format(new Date());    String fileName="crash-" + time + "-"+ timestamp+ ".log";    if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {      File dir=new File(ExternalPath);      if (!dir.exists()) {        dir.mkdirs();      }      FileOutputStream fos=new FileOutputStream(ExternalPath + fileName);      fos.write(sb.toString().getBytes());      fos.close();    }    return fileName;  } catch (  Exception e) {    Log.e(TAG,"an error occured while writing file...",e);  }  return null;}  }
class C{  public RuleTagCacheObject(Long id){  super(id);}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public In(File file){  if (file == null)   throw new NullPointerException("argument is null");  try {    FileInputStream fis=new FileInputStream(file);    scanner=new Scanner(new BufferedInputStream(fis),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    throw new IllegalArgumentException("Could not open " + file);  }}  }
class C{  @Override public void close() throws IOException {  try {    out.close();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  protected void doOptimizedEval(final Semaphore sSem,PrintStream pOverallResultsOutStream,int NGramSize_Min,int NGramSize_Max,int Dmax,String sSummaryDir,String sModelDir,int iThreads,String DocumentClass,String ComparatorClass,boolean bSilent,boolean bProgress){  if (pOverallResultsOutStream == null)   pOverallResultsOutStream=System.out;  ThreadList tqRobin=new ThreadList(iThreads);  DocumentSet dsSummarySet=new DocumentSet(sSummaryDir,1.0);  final DocumentSet dsModelSet=new DocumentSet(sModelDir,1.0);  dsSummarySet.createSets();  dsModelSet.createSets();  HashMap hmCategoryResults=new HashMap();  if (dsSummarySet.getTrainingSet().size() * dsModelSet.getTrainingSet().size() == 0) {    System.err.println("Empty document set...");    System.exit(-1);  }  pOverallResultsOutStream.print("Theme\t");  pOverallResultsOutStream.print("SystemID\t");  pOverallResultsOutStream.print("GraphCooccurence\t");  pOverallResultsOutStream.print("GraphValue\t");  pOverallResultsOutStream.print("GraphSize\t");  pOverallResultsOutStream.print("HistoContainmentSimilarity\t");  pOverallResultsOutStream.print("HistoValue\t");  pOverallResultsOutStream.print("HistoSize\t");  pOverallResultsOutStream.print("OverallSimil\t");  pOverallResultsOutStream.println();  int iTotal=dsSummarySet.getTrainingSet().size();  int iCur=0;  Iterator iCatIter=dsModelSet.getCategories().iterator();  Date dStart=new Date();  while (iCatIter.hasNext()) {    String sCurCategory=(String)iCatIter.next();    if (!bSilent)     System.err.println("Processing category:" + sCurCategory);    hModelCache.clear();    hNModelCache.clear();    List lModelFiles=dsModelSet.getFilesFromCategory(sCurCategory);    Iterator iIter=dsSummarySet.getFilesFromCategory(sCurCategory,dsSummarySet.FROM_TRAINING_SET).iterator();    while (iIter.hasNext()) {      final CategorizedFileEntry cfeCur=(CategorizedFileEntry)iIter.next();      Runnable r=new GenericCalcSimilRunner(NGramSize_Min,NGramSize_Max,Dmax,cfeCur,lModelFiles,sSem,pOverallResultsOutStream,bSilent,this,DocumentClass,ComparatorClass,Progress);      while (!tqRobin.addThreadFor(r))       Thread.yield();      Date dCurTime=new Date();      long lRemaining=(iTotal - iCur + 1) * (long)((double)(dCurTime.getTime() - dStart.getTime()) / iCur);      if (!bSilent || (bProgress))       System.err.print("Completed " + String.format("%7.4f",(double)iCur++ / iTotal * 100) + "%"+ String.format(" - Remaining %50s\r",gr.demokritos.iit.jinsect.utils.millisToMinSecString(lRemaining)));    }  }  try {    tqRobin.waitUntilCompletion();  } catch (  InterruptedException ex) {    System.err.println("Could not complete execution of all tasks.");    ex.printStackTrace(System.err);  }  System.err.println("Completed 100%. A total of " + iTotal + " comparisons were "+ "performed.");}  }
class C{  public static boolean storageDirectoryExists(){  return new File(HostsSupportImpl.getStorageDirectoryString()).isDirectory();}  }
class C{  public void commitToProject(Project project){  BlazeWizardUserSettingsStorage.getInstance().commit(userSettings);  BlazeImportSettings importSettings=new BlazeImportSettings(workspaceRoot.directory().getPath(),projectName,projectDataDirectory,createLocationHash(projectName),projectViewFile.getPath(),buildSystem);  BlazeImportSettingsManager.getInstance(project).setImportSettings(importSettings);  PluginDependencyHelper.addDependencyOnSyncPlugin(project);}  }
class C{  public void addAll(X509TrustManager[] mgrs){  for (  X509TrustManager mgr : mgrs) {    add(mgr);  }}  }
class C{  public boolean readBoolean() throws JMSException {  initializeReading();  try {    this.dataIn.mark(Integer.MAX_VALUE);    return this.dataIn.readBoolean();  } catch (  EOFException eof) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageEOFException(eof.toString());    jmsEx.setLinkedException(eof);    throw jmsEx;  }catch (  IOException ioe) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageFormatException("Format error occurred" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  public static String makeLinkAuto(ServletContext servletContext,HttpServletRequest request,HttpServletResponse response,String uri){  RequestHandler rh=RequestHandler.getRequestHandler(servletContext);  return rh.makeLinkAuto(request,response,uri,null,null,null,null,null,null,null);}  }
class C{  public static Configuration createCommandTag(){  Configuration configuration=new Configuration();  CommandTag commandTag=CommandTag.create("CommandTag",Integer.class,new SimpleHardwareAddressImpl("testAddress"),30000,6000,200,2,"RBAC class","RBAC device","RBAC property").id(500L).equipmentId(15L).build();  configuration.addEntity(commandTag);  return configuration;}  }
class C{  public void upDateProgress(int progress){  upDateProgress((float)progress / 100);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Hide_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200834,skillcaster,skillname);}  }
class C{  @Override public boolean hasFill(Symbolizer symbolizer){  return false;}  }
class C{  private static UInteger valueOfUnchecked(long value){  UInteger cached;  if ((cached=getCached(value)) != null)   return cached;  return new UInteger(value,true);}  }
class C{  public Matrix solveTranspose(Matrix B){  return transpose().solve(B.transpose());}  }
class C{  public T remove(HttpSession session,Map<String,Object> expandContext){  AttributeAccessor<T> aa=new AttributeAccessor<T>(name,expandContext,this.attributeName,this.fma,this.needsExpand);  return aa.remove(session);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static JSON fromObject(Object json){  JSON j=null;  if (json instanceof JSON) {    j=(JSON)json;  } else   if (json instanceof Map) {    j=JSON.create((Map)json);  } else   if (json instanceof String) {    Gson g=new Gson();    j=g.fromJson((String)json,JSON.class);  } else   if (json instanceof Reader) {    Gson g=new Gson();    j=g.fromJson((Reader)json,JSON.class);  } else   if (json instanceof byte[]) {    Gson g=new Gson();    byte[] b1=(byte[])json;    j=g.fromJson(new String(b1),JSON.class);  }  _refine(j);  if (j != null) {    for (    String name : j.keySet().toArray(new String[j.size()])) {      Object o=j.get(name);      if (o == null) {        j.remove(name);      } else       if (o instanceof List) {        j.put(name,fromObjects(o));      } else       if (o instanceof Map) {        j.put(name,fromObject(o));      }    }  }  return j;}  }
class C{  public final void sendPacket(GsServerPacket bp){synchronized (guard) {    if (isWriteDisabled()) {      return;    }    sendMsgQueue.addLast(bp);    enableWriteInterest();  }}  }
class C{  public static void destroyInstance(){  instance=null;}  }
class C{  private static boolean permissionExists(String permission){  Integer minVersion=MIN_SDK_PERMISSIONS.get(permission);  return minVersion == null || Build.VERSION.SDK_INT >= minVersion;}  }
class C{  protected AbstractLeaseMap(Map map){  this.map=map;}  }
class C{  public GroupsEditQuery links(Boolean value){  return unsafeParam("links",value);}  }
class C{  static boolean isLaidOut(View view){  if (Build.VERSION.SDK_INT >= 19) {    return view.isLaidOut();  }  return view.getWidth() > 0 && view.getHeight() > 0;}  }
class C{  public void showNotification(int id,String tickerText,String contentText,Intent intent){  String title=mApplicationContext.getString(R.string.app_name);  PendingIntent contentIntent=PendingIntent.getActivity(mApplicationContext,0,intent,0);  NotificationCompat.Builder builder=new NotificationCompat.Builder(mApplicationContext).setAutoCancel(true).setContentIntent(contentIntent).setContentTitle(title).setContentText(contentText).setSmallIcon(R.drawable.ic_chrome).setTicker(tickerText).setLocalOnly(true);  Notification notification=new NotificationCompat.BigTextStyle(builder).bigText(contentText).build();  mNotificationManager.notify(id,notification);}  }
class C{  public static void printToFile(File file,String message,boolean append){  FileWriter fw;  PrintWriter pw=null;  try {    fw=new FileWriter(file,append);    pw=new PrintWriter(fw);    pw.print(message);  } catch (  Exception e) {    System.out.println("Exception: in printToFile " + file.getAbsolutePath() + " "+ message);    e.printStackTrace();  } finally {    if (pw != null) {      pw.close();    }  }}  }
class C{  public void addFocusGroup(String group,TupleSet tset){  checkGroupExists(group);  m_focus.put(group,tset);}  }
class C{  public void drawConnection(ViewTransform transform,Graphics2D g,ColorSet colorSet,boolean isSelected,Point target){  ConnectionDrawing drawing=new ConnectionDrawing();  addPathConnection(transform,g,isSelected,false,drawing,colorSet,(int)target.getX(),(int)target.getY(),false,false);  boolean drawShadow=isSelected && mAnchor.getConnectionCreator() != ConstraintAnchor.AUTO_CONSTRAINT_CREATOR;  if (drawShadow) {    Color pre=g.getColor();    Stroke s=g.getStroke();    g.setColor(sShadowColor);    g.setStroke(sShadowStroke);    drawing.draw(g);    g.setColor(pre);    g.setStroke(s);  }  drawing.draw(g);}  }
class C{  @Override public void extendWithOperation(JPAEdmSchemaView view){  view.registerOperations(CustomerProcessor.class,null);  view.registerOperations(SalesOrderProcessor.class,null);  view.registerOperations(CustomerReviewProcessor.class,null);}  }
class C{  protected void updateClientIDInternally(final String updatedClientID) throws JMSException {  if (closed)   throw new IllegalStateException("Forbidden call on a closed connection.");  this.m_clientID=updatedClientID;}  }
class C{  protected PhotosGetByIdQuery photos(List<String> value){  return unsafeParam("photos",value);}  }
class C{  @Override public Node item(int index){  Node thisNode;  if (rootNode.changes() != changes) {    nodes=new ArrayList();    changes=rootNode.changes();  }  final int currentSize=nodes.size();  if (index < currentSize) {    return (Node)nodes.get(index);  } else {    if (currentSize == 0) {      thisNode=rootNode;    } else {      thisNode=(NodeImpl)(nodes.get(currentSize - 1));    }    while (thisNode != null && index >= nodes.size()) {      thisNode=nextMatchingElementAfter(thisNode);      if (thisNode != null) {        nodes.add(thisNode);      }    }    return thisNode;  }}  }
class C{  public void readBytes(int position,int num,byte[] buf){  if (Page.pageSize < position + num) {    throw new PageException("readBytes is out of bounds");  }  if (buf.length < num) {    throw new PageException("num bytes to read is longer than buffer");  }  pageData.position(position);  pageData.get(buf,0,num);}  }
class C{  public static String[] commaDelimitedListToStringArray(String str){  return delimitedListToStringArray(str,",");}  }
class C{  public void remove(String key){  urlParams.remove(key);  streamParams.remove(key);  fileParams.remove(key);  urlParamsWithObjects.remove(key);}  }
class C{  private boolean sendMessage(){  if (msgQueue.isEmpty() == true) {    return false;  }  if (freeToSend == true) {    SerialMessage msg=msgQueue.peek();    if (msg != null) {      freeToSend=false;      logger.debug("NODE {}: Node advancer - queued packet. Queue length is {}",node.getNodeId(),msgQueue.size());      if (msg.getMessageClass() == SerialMessageClass.SendData) {        controller.sendData(msg);      } else {        controller.enqueue(msg);      }    }  }  return true;}  }
class C{  private double[] applyContourSpecifications(NodeList nl,double[] baseF0Contour,String contourAttribute){  if ("".equals(contourAttribute)) {    return baseF0Contour;  }  Map<String,String> f0Specifications=getContourSpecifications(contourAttribute);  Iterator<String> it=f0Specifications.keySet().iterator();  double[] modifiedF0Values=new double[F0CONTOUR_LENGTH];  Arrays.fill(modifiedF0Values,0.0);  if (baseF0Contour.length != modifiedF0Values.length) {    throw new RuntimeException("The lengths of two arrays are not same!");  }  modifiedF0Values[0]=baseF0Contour[0];  modifiedF0Values[modifiedF0Values.length - 1]=baseF0Contour[modifiedF0Values.length - 1];  while (it.hasNext()) {    String percent=it.next();    String f0Value=f0Specifications.get(percent);    boolean hasLabel=f0Value.equals("x-low") || f0Value.equals("low") || f0Value.equals("medium")|| f0Value.equals("high")|| f0Value.equals("x-high")|| f0Value.equals("default");    if (hasLabel) {      f0Value=pitchLabels2RelativeValues(f0Value);    }    if ((!f0Value.startsWith("+") && !f0Value.startsWith("-")) && (!f0Value.endsWith("Hz"))) {      f0Value="+" + f0Value;    }    int percentDuration=Math.round((new Float(percent.substring(0,percent.length() - 1))).floatValue());    if (percentDuration > 100) {      throw new RuntimeException("Given percentage of duration ( " + percentDuration + "%"+ " ) is illegal.. ");    }    if (f0Value.startsWith("+")) {      if (f0Value.endsWith("%")) {        double f0Mod=(new Double(f0Value.substring(1,f0Value.length() - 1))).doubleValue();        modifiedF0Values[percentDuration]=baseF0Contour[percentDuration] + (baseF0Contour[percentDuration] * (f0Mod / 100.0));      } else       if (f0Value.endsWith("Hz")) {        float f0Mod=(new Float(f0Value.substring(1,f0Value.length() - 2))).floatValue();        modifiedF0Values[percentDuration]=baseF0Contour[percentDuration] + f0Mod;      } else       if (f0Value.endsWith("st")) {        float semiTone=(new Float(f0Value.substring(1,f0Value.length() - 2))).floatValue();        modifiedF0Values[percentDuration]=Math.exp(semiTone * Math.log(2) / 12) * baseF0Contour[percentDuration];      }    } else     if (f0Value.startsWith("-")) {      if (f0Value.endsWith("%")) {        double f0Mod=(new Double(f0Value.substring(1,f0Value.length() - 1))).doubleValue();        modifiedF0Values[percentDuration]=baseF0Contour[percentDuration] - (baseF0Contour[percentDuration] * (f0Mod / 100.0));      } else       if (f0Value.endsWith("Hz")) {        float f0Mod=(new Float(f0Value.substring(1,f0Value.length() - 2))).floatValue();        modifiedF0Values[percentDuration]=baseF0Contour[percentDuration] - f0Mod;      } else       if (f0Value.endsWith("st")) {        float semiTone=(new Float(f0Value.substring(1,f0Value.length() - 2))).floatValue();        modifiedF0Values[percentDuration]=Math.exp(-1 * semiTone * Math.log(2) / 12) * baseF0Contour[percentDuration];      }    } else {      if (f0Value.endsWith("Hz")) {        float f0Mod=(new Float(f0Value.substring(0,f0Value.length() - 2))).floatValue();        modifiedF0Values[percentDuration]=f0Mod;      }    }  }  return MathUtils.interpolateNonZeroValues(modifiedF0Values);}  }
class C{  public static Class<?> loadClass(String className) throws ClassNotFoundException {  return loadClass(className,null);}  }
class C{  @Override public void touchNavigatorIcon(){  view.touchNavigationIcon();}  }
class C{  @SuppressWarnings("unused") public void hideBackButton(){  backButton.setVisibility(View.INVISIBLE);  skipButton.setVisibility(View.GONE);}  }
class C{  public boolean debug(){  return soot.PhaseOptions.getBoolean(options,"debug");}  }
class C{  public static Map<String,Object> productsSearch(DispatchContext dctx,Map<String,Object> context){  Map<String,Object> result;  LocalDispatcher dispatcher=dctx.getDispatcher();  try {    Map<String,Object> dispatchMap=FastMap.newInstance();    if (UtilValidate.isNotEmpty(context.get("productCategoryId"))) {      String productCategoryId=(String)context.get("productCategoryId");      dispatchMap.put("query","cat:*" + productCategoryId + "*");    } else     return ServiceUtil.returnError("Missing product category id");    Integer viewSize=null;    if (context.get("viewSize") != null) {      viewSize=Integer.parseInt((String)context.get("viewSize"));      dispatchMap.put("viewSize",viewSize);    }    Integer viewIndex=null;    if (context.get("viewIndex") != null) {      viewIndex=Integer.parseInt((String)context.get("viewIndex"));      dispatchMap.put("viewIndex",viewIndex);    }    if (context.get("queryFilter") != null) {      dispatchMap.put("queryFilter",context.get("queryFilter"));    }    dispatchMap.put("facet",false);    dispatchMap.put("spellcheck",true);    dispatchMap.put("highlight",true);    Map<String,Object> searchResult=dispatcher.runSync("runSolrQuery",dispatchMap);    QueryResponse queryResult=(QueryResponse)searchResult.get("queryResult");    result=ServiceUtil.returnSuccess();    result.put("results",queryResult.getResults());    result.put("listSize",queryResult.getResults().getNumFound());    result.put("start",queryResult.getResults().getStart());    result.put("viewIndex",SolrUtil.calcResultViewIndex(queryResult.getResults(),viewSize));    result.put("viewSize",viewSize);  } catch (  Exception e) {    Debug.logError(e,e.getMessage(),module);    result=ServiceUtil.returnError(e.toString());  }  return result;}  }
class C{  public void comment(String comment){  spacing();  m_out.print("<!-- ");  m_out.print(comment);  m_out.print(" -->");  println();}  }
class C{  public boolean isAlive(){  if (hasSentData) {    if (System.currentTimeMillis() - lastSendTime < TIMEOUT)     return true;    return hasReceivedData && lastReceiveTime > lastSendTime;  }  return true;}  }
class C{  private static boolean isAppropriateDevice(MidiDevice device,Class deviceClass,boolean allowSynthesizer,boolean allowSequencer){  if (deviceClass.isInstance(device)) {    return true;  } else {    if ((!(device instanceof Sequencer) && !(device instanceof Synthesizer)) || ((device instanceof Sequencer) && allowSequencer) || ((device instanceof Synthesizer) && allowSynthesizer)) {      if ((deviceClass == Receiver.class && device.getMaxReceivers() != 0) || (deviceClass == Transmitter.class && device.getMaxTransmitters() != 0)) {        return true;      }    }  }  return false;}  }
class C{  protected boolean checkSpecialPosition(Element currentRulePart,String specialPositionType){  NamedNodeMap attNodes=currentRulePart.getAttributes();  for (int z=0; z < attNodes.getLength(); z++) {    Node el=attNodes.item(z);    String currentAtt=el.getNodeName();    String currentVal=el.getNodeValue();    if (currentAtt.equals("type")) {      if (!currentVal.startsWith("!")) {        if (!specialPositionType.equals(currentVal))         return false;      } else {        currentVal=currentVal.substring(1,currentVal.length());        if (specialPositionType.equals(currentVal))         return false;      }    }  }  return true;}  }
class C{  public void populate(Map<String,List<StyleWrapper>> styleMap,List<GeoServerLayer> layerList){  this.layerMap.clear();  this.layerList=layerList;  if (layerList != null) {    for (    GeoServerLayer layer : layerList) {      this.layerMap.put(layer,Boolean.FALSE);    }  }}  }
class C{  protected ReverbType(String name,int earlyReflectionDelay,float earlyReflectionIntensity,int lateReflectionDelay,float lateReflectionIntensity,int decayTime){  this.name=name;  this.earlyReflectionDelay=earlyReflectionDelay;  this.earlyReflectionIntensity=earlyReflectionIntensity;  this.lateReflectionDelay=lateReflectionDelay;  this.lateReflectionIntensity=lateReflectionIntensity;  this.decayTime=decayTime;}  }
class C{  public CachedEntity newEntity(ServerSpawnMobPacket packet){  EntityType peType=EntityType.convertToPE(packet.getType());  if (peType == null) {    return null;  }  CachedEntity e=new CachedEntity(packet.getEntityId(),MagicValues.value(Integer.class,packet.getType()),peType,null,false,null);  e.x=packet.getX();  e.y=packet.getY();  e.z=packet.getZ();  e.motionX=packet.getMotionX();  e.motionY=packet.getMotionY();  e.motionZ=packet.getMotionZ();  e.yaw=packet.getYaw();  e.pitch=packet.getPitch();  e.pcMeta=packet.getMetadata();  e.spawned=true;  entities.put(e.eid,e);  return e;}  }
class C{  private boolean isLongPulling(HttpServletRequest req){  return req.getHeader(Constants.PULLING_TIMEOUT_HEADER) != null;}  }
class C{  public void upload(File zippedFile){  throw new UnsupportedOperationException();}  }
class C{  public SiteAdminPage deactivatePageLater(String title,String day,String time){  grid.selectPageByTitle(title);  bobcatWait.withTimeout(Timeouts.MEDIUM).until(null);  grid.getActionBar().clickDropDownOption(SiteAdminButtons.DEACTIVATE_LATER);  replicateLaterWindow.fillDay(day);  replicateLaterWindow.fillTime(time);  replicateLaterWindow.confirm();  grid.waitForLoaderNotPresent();  waitForPageStatus(title,PageStatus.SCHEDULED_DEACTIVATION);  return this;}  }
class C{  public static void initAndStartProfiler(){  profiler=new Profiler();  profiler.startCollecting();}  }
class C{  public final boolean isLoading(){  return (mLoadFooter == getChildAt(getChildCount() - 1) && mLoadFooter.getHeight() > 0);}  }
class C{  public void stop(){  this.run=false;}  }
class C{  private FormBody bodyFromMap(Map<String,String> map){  FormBody.Builder formBody=new FormBody.Builder();  if (map != null) {    for (    final Map.Entry<String,String> entrySet : map.entrySet()) {      if (entrySet.getValue() != null) {        formBody.add(entrySet.getKey(),entrySet.getValue());      }    }  }  return formBody.build();}  }
class C{  public static AlarmCacheObject createTestAlarm1(){  AlarmCacheObject alarm1=new AlarmCacheObject();  alarm1.setId(Long.valueOf(1));  alarm1.setFaultFamily("fault family");  alarm1.setFaultMember("fault member");  alarm1.setFaultCode(0);  AlarmCondition condition=AlarmCondition.fromConfigXML("<AlarmCondition class=\"cern.c2mon.server.common.alarm.ValueAlarmCondition\">" + "<alarm-value type=\"String\">DOWN</alarm-value></AlarmCondition>");  alarm1.setCondition(condition);  alarm1.setInfo("alarm info");  alarm1.setState(AlarmCondition.TERMINATE);  alarm1.setTimestamp(new Timestamp(System.currentTimeMillis() - 2000));  alarm1.setDataTagId(100003L);  return alarm1;}  }
class C{  public static float limit(float number,float between,float and){  if (number <= between) {    return between;  }  if (number >= and) {    return and;  }  return number;}  }
class C{  public boolean number_nodes(){  return soot.PhaseOptions.getBoolean(options,"number-nodes");}  }
class C{  public int context(){  String s=soot.PhaseOptions.getString(options,"context");  if (s.equalsIgnoreCase("insens"))   return context_insens;  if (s.equalsIgnoreCase("1cfa"))   return context_1cfa;  if (s.equalsIgnoreCase("kcfa"))   return context_kcfa;  if (s.equalsIgnoreCase("objsens"))   return context_objsens;  if (s.equalsIgnoreCase("kobjsens"))   return context_kobjsens;  if (s.equalsIgnoreCase("uniqkobjsens"))   return context_uniqkobjsens;  if (s.equalsIgnoreCase("threadkobjsens"))   return context_threadkobjsens;  throw new RuntimeException("Invalid value " + s + " of phase option context");}  }
class C{  @Override public void attributeDecl(String elementName,String attributeName,String type,String[] enumeration,String defaultType,XMLString defaultValue,XMLString nonNormalizedDefaultValue,Augmentations augmentations) throws XNIException {}  }
class C{  public TShortArrayList subList(int begin,int end){  if (end < begin)   throw new IllegalArgumentException("end index " + end + " greater than begin index "+ begin);  if (begin < 0)   throw new IndexOutOfBoundsException("begin index can not be < 0");  if (end > _data.length)   throw new IndexOutOfBoundsException("end index < " + _data.length);  TShortArrayList list=new TShortArrayList(end - begin);  for (int i=begin; i < end; i++) {    list.add(_data[i]);  }  return list;}  }
class C{  @RequestMapping(value="/account/reset_password/init",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<?> requestPasswordReset(@RequestBody String mail,HttpServletRequest request){  return userService.requestPasswordReset(mail).map(null).orElse(new ResponseEntity<>("e-mail address not registered",HttpStatus.BAD_REQUEST));}  }
class C{  public AdsCreateClientsQuery(VkApiClient client,UserActor actor,int accountId,String data){  super(client,"ads.createClients",Utils.buildParametrizedType(List.class,Integer.class));  accessToken(actor.getAccessToken());  accountId(accountId);  data(data);}  }
class C{  public Vector3f mult(Vector3f vec){  return mult(vec,null);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();  viewer.setMethod(TaxonomicProfileDialog.ProfileMethod.Projection);}  }
class C{  public BaseEntityEventListener(boolean failOnException){  this(failOnException,null);}  }
class C{  public static Map<String,Object> quickRunProductionRunTask(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=ServiceUtil.returnSuccess();  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String productionRunId=(String)context.get("productionRunId");  String taskId=(String)context.get("taskId");  try {    Map<String,Object> serviceContext=FastMap.newInstance();    Map<String,Object> resultService=null;    GenericValue task=EntityQuery.use(delegator).from("WorkEffort").where("workEffortId",taskId).queryOne();    String currentStatusId=task.getString("currentStatusId");    String prevStatusId="";    while (!"PRUN_COMPLETED".equals(currentStatusId)) {      serviceContext.put("productionRunId",productionRunId);      serviceContext.put("workEffortId",taskId);      serviceContext.put("issueAllComponents",Boolean.TRUE);      serviceContext.put("userLogin",userLogin);      resultService=dispatcher.runSync("changeProductionRunTaskStatus",serviceContext);      currentStatusId=(String)resultService.get("newStatusId");      if (currentStatusId.equals(prevStatusId)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunUnableToProgressTaskStatus",UtilMisc.toMap("prevStatusId",prevStatusId,"taskId",taskId),locale));      } else {        prevStatusId=currentStatusId;      }      serviceContext.clear();    }  } catch (  Exception e) {    Debug.logError(e,"Problem calling the changeProductionRunTaskStatus service",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));  }  return result;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public void updateAttributeSelection(boolean isRasterSymbol){  List<String> allowedItemList=new ArrayList<String>();  allowedItemList.add(ValueSubPanel.getPanelName());  if (!isRasterSymbol) {    allowedItemList.add(DataSourceAttributePanel.getPanelName());  }  allowedItemList.add(ExpressionSubPanel.getPanelName());  if (attributeChooserComboBox != null) {    attributeChooserComboBox.setModel(new DefaultComboBoxModel(allowedItemList.toArray()));  }}  }
class C{  public static String encode(String s,Type t,boolean template){  return _encode(s,t,template,false);}  }
class C{  public static Intent makeObservedFileIntent(Context context,OCFile file,Account account,boolean watchIt){  Intent intent=new Intent(context,FileObserverService.class);  intent.setAction(watchIt ? FileObserverService.ACTION_ADD_OBSERVED_FILE : FileObserverService.ACTION_DEL_OBSERVED_FILE);  intent.putExtra(FileObserverService.ARG_FILE,file);  intent.putExtra(FileObserverService.ARG_ACCOUNT,account);  return intent;}  }
class C{  public Matrix transpose(){  Matrix X=new Matrix(n,m);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[j][i]=A[i][j];    }  }  return X;}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case R.id.activity_update_me_closeBtn:    finish();  break;case R.id.container_update_me_saveBtn:updateProfile();break;}}  }
class C{  @Override public void fatalError(String domain,String key,XMLParseException exception) throws XNIException {  if (fErrorHandler != null) {    SAXParseException saxException=createSAXParseException(exception);    try {      fErrorHandler.fatalError(saxException);    } catch (    SAXParseException e) {      throw createXMLParseException(e);    }catch (    SAXException e) {      throw createXNIException(e);    }  }}  }
class C{  public boolean isSetSpanId(){  return this.spanId != null;}  }
class C{  public void reset(){  this.normalizedValue=null;  this.actualValue=null;  this.actualValueType=XSConstants.UNAVAILABLE_DT;  this.actualType=null;  this.memberType=null;  this.memberTypes=null;  this.itemValueTypes=null;}  }
class C{  private void initData(Context context){  scroller=new WheelScroller(getContext(),scrollingListener);}  }
class C{  @deprecated public static int indexOf(CharSequence s,int codePoint){  int cp;  for (int i=0; i < s.length(); i+=Character.charCount(cp)) {    cp=Character.codePointAt(s,i);    if (cp == codePoint) {      return i;    }  }  return -1;}  }
class C{  public static double[] generatePolynomialValues(double[] coeffs,int numSamples,double a,double b){  if (numSamples <= 0)   throw new IllegalArgumentException("Need positive number of samples");  if (a >= b)   throw new IllegalArgumentException("Not a valid interval: [" + a + ","+ b+ "[");  double[] pred=new double[numSamples];  double step=(b - a) / numSamples;  double t=a;  for (int i=0; i < numSamples; i++) {    pred[i]=getValueAt(coeffs,t);    t+=step;  }  return pred;}  }
class C{  public SubmissionsExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  private boolean coordIsCalendarCell(float y){  return y > cellHeight;}  }
class C{  private void removeLiveCacheInvalidation(final TagQualityStatus statusToRemove){  LOG.debug("removeLiveCacheInvalidation() - removing " + statusToRemove + " from "+ liveCache.size()+ " tag entries.");  for (  ClientDataTagImpl cdt : liveCache.values()) {    cdt.validate(statusToRemove);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PvPZONE_HOSTILE_DEATH_TO_ME(String value0){  return new SM_SYSTEM_MESSAGE(1360001,value0);}  }
class C{  public FractionFormat(){}  }
class C{  @Override public void updateValue(String key,Color backgroundColour){  String value=String.format("%03d%s%03d%s%03d%s%03d",backgroundColour.getRed(),DELIMETER,backgroundColour.getGreen(),DELIMETER,backgroundColour.getBlue(),DELIMETER,backgroundColour.getAlpha());  updateValue(key,value);}  }
class C{  public NotResetException(){  super("Transaction has not been reset");}  }
class C{  public NumericLiteral(double x){  m_number=new Double(x);  m_type=double.class;}  }
class C{  @Nonnull public <T>WorkUnit with(@Nonnull Class<T> type,@Nullable T val){  return this;}  }
class C{  public static boolean isPrimitiveWrapper(Class clazz){  Assert.notNull(clazz,"Class must not be null");  return primitiveWrapperTypeMap.containsKey(clazz);}  }
class C{  public void addObserver(FindToolbarObserver observer){  mObservers.addObserver(observer);}  }
class C{  @NotNull public static ResizePolicy full(){  return ourAny;}  }
class C{  public ReceiveResultBehaviour(ResultsAgent a,long lInterval){  super(a,lInterval);  myAgent=a;  Interval=lInterval;  if (myAgent.OutFile.length() != 0) {    try {      pOut=new PrintStream(myAgent.OutFile);    } catch (    FileNotFoundException fnfe) {      System.err.println("Cannot output to selected file:\n" + fnfe.getMessage());      System.exit(1);    }  }  if (pOut == null)   pOut=System.err;}  }
class C{  public static boolean templatesAreValid(){  try {    File templateRootFolder=getTemplateRootFolder();    if (templateRootFolder == null) {      return false;    }    return templateRootIsValid(templateRootFolder);  } catch (  Exception e) {    return false;  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return AVERAGE_LOAD;case 2:  return OLD_GC;case 3:return THREAD_NUM;case 4:return QUEUE_SIZE;case 5:return METHOD_QPS_MAP;default :return null;}}  }
class C{  public static int distanceFinderZValue(double[] vector){  StringBuilder binaryBuffer=new StringBuilder();  List<String> binaryReps=new ArrayList<>(vector.length);  for (  double d : vector) {    int j=(int)d;    String binary=Integer.toBinaryString(j);    binaryReps.add(binary);  }  while (!binaryReps.isEmpty()) {    for (int j=0; j < binaryReps.size(); j++) {      String curr=binaryReps.get(j);      if (!curr.isEmpty()) {        char first=curr.charAt(0);        binaryBuffer.append(first);        curr=curr.substring(1);        binaryReps.set(j,curr);      } else       binaryReps.remove(j);    }  }  return Integer.parseInt(binaryBuffer.toString(),2);}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public String validate(String value){  if (value == null) {    return null;  }  for (int i=0; i < patterns.length; i++) {    Matcher matcher=patterns[i].matcher(value);    if (matcher.matches()) {      int count=matcher.groupCount();      if (count == 1) {        return matcher.group(1);      }      StringBuffer buffer=new StringBuffer();      for (int j=0; j < count; j++) {        String component=matcher.group(j + 1);        if (component != null) {          buffer.append(component);        }      }      return buffer.toString();    }  }  return null;}  }
class C{  public SecurityException(String s){  super(s);}  }
class C{  public Iterator tuplesReversed(){  return m_tuples.iterator(rows(true));}  }
class C{  public String toString(final int decimals){  final DecimalFormat decimalFormat=new DecimalFormat("#." + StringUtils.repeat("#",decimals));  return decimalFormat.format(latitude).replace(',','.') + StringLiterals.CONCAT_SEPARATOR + decimalFormat.format(longitude).replace(',','.');}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (!(obj instanceof CarbonMeasure)) {    return false;  }  CarbonMeasure other=(CarbonMeasure)obj;  if (columnSchema == null) {    if (other.columnSchema != null) {      return false;    }  } else   if (!columnSchema.equals(other.columnSchema)) {    return false;  }  return true;}  }
class C{  @Override public void destroy() throws Exception {  if (this.infinispanCache != null) {    this.infinispanCache.stop();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_INTERVAL_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201052,skilltarget,num0,skillname);}  }
class C{  @Override public long skip(long n) throws IOException {  return super.skip(n * inputChannels) / inputChannels;}  }
class C{  @Override public int[] makeInverseCumulativeTestValues(){  return new int[]{0,0,0,0,1,1,14,11,10,9,8,Integer.MAX_VALUE};}  }
class C{  public static IOFileFilter trueFileFilter(){  return TrueFileFilter.TRUE;}  }
class C{  public static InputStream toInputStream(CharSequence input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  @Nullable private static Integer determineIndent(PsiFile file,Editor editor,int offset,IndentOptions indentOptions){  if (offset == 0) {    return null;  }  Document doc=editor.getDocument();  PsiElement element=getRelevantElement(file,doc,offset);  PsiElement parent=element != null ? element.getParent() : null;  if (parent == null) {    return null;  }  if (endsBlock(element)) {    return Math.max(0,getIndent(doc,element) - indentOptions.INDENT_SIZE);  }  if (parent instanceof BuildListType) {    BuildListType list=(BuildListType)parent;    if (endsList(list,element) && element.getTextOffset() < offset) {      return null;    }    int listOffset=list.getStartOffset();    LogicalPosition caretPosition=editor.getCaretModel().getLogicalPosition();    LogicalPosition listStart=editor.offsetToLogicalPosition(listOffset);    if (listStart.line != caretPosition.line) {      return indentOfLineUpToCaret(doc,caretPosition.line,offset);    }    BuildElement firstChild=((BuildListType)parent).getFirstElement();    if (firstChild != null && firstChild.getNode().getStartOffset() < offset) {      return getIndent(doc,firstChild);    }    return lineIndent(doc,listStart.line) + additionalIndent(parent,indentOptions);  }  if (parent instanceof StatementListContainer && afterColon(doc,offset)) {    return getIndent(doc,parent) + additionalIndent(parent,indentOptions);  }  return null;}  }
class C{  public DataSource(){  this(null);}  }
class C{  @Override public boolean onLayoutChild(CoordinatorLayout parent,V child,int layoutDirection){  child.layout(0,-child.getMeasuredHeight(),child.getMeasuredWidth(),0);  return true;}  }
class C{  public NotesGetQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  protected LogRecordWithDLSN recoverLastRecordInLedger(LogSegmentMetadata l,boolean fence,boolean includeControl,boolean includeEndOfStream) throws IOException {  return FutureUtils.result(asyncReadLastRecord(l,fence,includeControl,includeEndOfStream));}  }
class C{  public static ProductConfigWrapper loadProductConfigWrapper(Delegator delegator,LocalDispatcher dispatcher,String configId,String productId,String productStoreId,String catalogId,String webSiteId,String currencyUomId,Locale locale,GenericValue autoUserLogin){  ProductConfigWrapper configWrapper=null;  try {    configWrapper=new ProductConfigWrapper(delegator,dispatcher,productId,productStoreId,catalogId,webSiteId,currencyUomId,locale,autoUserLogin);    if (configWrapper != null && UtilValidate.isNotEmpty(configId)) {      configWrapper.loadConfig(delegator,configId);    }  } catch (  Exception e) {    Debug.logWarning(e.getMessage(),module);    configWrapper=null;  }  return configWrapper;}  }
class C{  protected Token token(TokenType type,int tStart,int tLength,int newStart,int newLength){  tokenStart=newStart;  tokenLength=newLength;  return new Token(type,tStart,tLength);}  }
class C{  static int sp(Context context,int val){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,val,context.getResources().getDisplayMetrics());}  }
class C{  public NamespaceSupport(NamespaceContext context){  pushContext();  Enumeration prefixes=context.getAllPrefixes();  while (prefixes.hasMoreElements()) {    String prefix=(String)prefixes.nextElement();    String uri=context.getURI(prefix);    declarePrefix(prefix,uri);  }}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static void pickImage(Context context,Fragment fragment,int requestCode){  try {    fragment.startActivityForResult(getImagePicker(),requestCode);  } catch (  ActivityNotFoundException e) {    showImagePickerError(context);  }}  }
class C{  public NavigationPopup(Profile profile,Context context,NavigationController navigationController,boolean isForward){  super(context,null,android.R.attr.popupMenuStyle);  mProfile=profile;  mContext=context;  mNavigationController=navigationController;  mHistory=mNavigationController.getDirectedNavigationHistory(isForward,MAXIMUM_HISTORY_ITEMS);  mAdapter=new NavigationAdapter();  mFaviconSize=mContext.getResources().getDimensionPixelSize(R.dimen.default_favicon_size);  setModal(true);  setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);  setHeight(ViewGroup.LayoutParams.WRAP_CONTENT);  setOnItemClickListener(this);  setAdapter(new HeaderViewListAdapter(null,null,mAdapter));  mListItemFactory=new ListItemFactory(context);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysDodge_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200785,skillcaster,skillname);}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (prefixes != null) {    for (int i=0; i < prefixes.length; i++) {      if (i > 0) {        buffer.append(",");      }      buffer.append(prefixes[i]);    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  public DatatypeException(String key,Object[] args){  super(key);  this.key=key;  this.args=args;}  }
class C{  public <T>T constructObject(Class<T> newClass,Args mode) throws InstantiationException {  return constructObject(newClass,mode,new Stack<>());}  }
class C{  private URLConnection connectURL(String strURL){  URLConnection conn=null;  try {    URL inputURL=new URL(strURL);    conn=inputURL.openConnection();  } catch (  MalformedURLException e) {    System.out.println("Please input a valid URL");  }catch (  IOException ioe) {    System.out.println("Can not connect to the URL");  }  return conn;}  }
class C{  public synchronized void changeRegionWeather(int mapId,int weatherCode){  WeatherKey key=new WeatherKey(null,mapId);  WeatherEntry[] weatherEntries=worldZoneWeathers.get(key);  if (weatherEntries == null) {    return;  }  for (int i=0; i < weatherEntries.length; i++) {    WeatherEntry oldEntry=weatherEntries[i];    if (oldEntry == null) {      weatherEntries[i]=new WeatherEntry(0,weatherCode);    } else {      weatherEntries[i]=new WeatherEntry(oldEntry.getZoneId(),weatherCode);    }  }  onWeatherChange(mapId,null);}  }
class C{  public static float convertPixelsToDp(float px){  if (mMetrics == null) {    Log.e("MPChartLib-Utils","Utils NOT INITIALIZED. You need to call Utils.init(...) at least once before" + " calling Utils.convertPixelsToDp(...). Otherwise conversion does not" + " take place.");    return px;  }  DisplayMetrics metrics=mMetrics;  return px / (metrics.densityDpi / 160f);}  }
class C{  public double polynomialSquaredDistance(Polynomial other){  return polynomialSquaredDistance(this.coeffs,other.coeffs);}  }
class C{  protected void removeExecutionLink(JobEntity jobEntity){  if (jobEntity.getExecutionId() != null) {    ExecutionEntity execution=getExecutionEntityManager().findById(jobEntity.getExecutionId());    if (execution != null) {      execution.getJobs().remove(jobEntity);    }  }}  }
class C{  public boolean add(Object o){  throw new UnsupportedOperationException();}  }
class C{  public String lexiconLookup(String text,String pos){  if (text == null || text.length() == 0)   return null;  String[] entries;  entries=lexiconLookupPrimitive(text,pos);  if (entries.length == 0) {    text=text.toLowerCase(getLocale());    entries=lexiconLookupPrimitive(text,pos);  }  if (entries.length == 0) {    text=text.substring(0,1).toUpperCase(getLocale()) + text.substring(1);    entries=lexiconLookupPrimitive(text,pos);  }  if (entries.length == 0)   return null;  return entries[0];}  }
class C{  public ReturnVoidStmt newReturnVoidStmt(){  return Jimple.v().newReturnVoidStmt();}  }
class C{  private void updateHashes(UpdateOpHelper updateOpHelper){  int modelCount=adapter.models.size();  if (modelCount != currentStateList.size()) {    throw new IllegalStateException("State list does not match current models");  }  for (int i=0; i < modelCount; i++) {    EpoxyModel<?> model=adapter.models.get(i);    ModelState state=currentStateList.get(i);    int newHash=model.hashCode();    if (state.hashCode != newHash) {      updateOpHelper.update(i);      state.hashCode=newHash;    }  }}  }
class C{  public static double variance(final double[] values){  final int length=values.length;  final double mean=mean(values);  double var=Double.NaN;  if (length == 1) {    var=0.0;  } else   if (length > 1) {    double accum=0.0;    double dev=0.0;    double accum2=0.0;    for (int i=0; i < length; i++) {      dev=values[i] - mean;      accum+=dev * dev;      accum2+=dev;    }    final double len=length;    var=(accum - (accum2 * accum2 / len)) / (len - 1.0);  }  return var;}  }
class C{  protected double ScalingFunction(int iDistance){  return Math.exp(-Math.pow((iDistance),2.0) / (2.0 * Math.pow(CorrelationWindow,2.0)));}  }
class C{  public ExtendedIndexIterator<TemplateCacheInfo> establishScan(K startPos,short relation,K endPos,boolean endPosInclusive,boolean ordered){  if (isEmpty())   return null;  ordered|=_FORCE_ORDERED_SCAN;  return ordered ? establishScanOrdered(startPos,relation,endPos,endPosInclusive) : establishScanUnOrdered(startPos,relation,endPos,endPosInclusive);}  }
class C{  private void findStaleWebappDirectories(Context context,Set<File> directoriesToDelete){  File webappBaseDirectory=getBaseWebappDirectory(context);  Set<String> liveWebapps=new HashSet<String>();  Set<Intent> baseIntents=getBaseIntentsForAllTasks();  for (  Intent intent : baseIntents) {    Uri data=intent.getData();    if (data != null && TextUtils.equals(WebappActivity.WEBAPP_SCHEME,data.getScheme())) {      liveWebapps.add(data.getHost());    }    ComponentName component=intent.getComponent();    if (component != null) {      String fullClassName=component.getClassName();      int lastPeriodIndex=fullClassName.lastIndexOf(".");      if (lastPeriodIndex != -1) {        String className=fullClassName.substring(lastPeriodIndex + 1);        if (className.startsWith(WEBAPP_DIRECTORY_NAME) && className.length() > WEBAPP_DIRECTORY_NAME.length()) {          String activityIndex=className.substring(WEBAPP_DIRECTORY_NAME.length());          liveWebapps.add(activityIndex);        }      }    }  }  if (webappBaseDirectory != null) {    File appDirectory=new File(context.getApplicationInfo().dataDir);    String webappDirectoryAppBaseName=webappBaseDirectory.getName();    File[] files=appDirectory.listFiles();    if (files != null) {      for (      File file : files) {        String filename=file.getName();        if (!filename.startsWith(webappDirectoryAppBaseName))         continue;        if (filename.length() == webappDirectoryAppBaseName.length())         continue;        directoriesToDelete.add(file);      }    }    if (webappBaseDirectory.exists()) {      files=webappBaseDirectory.listFiles();      if (files != null) {        for (        File file : files) {          if (!liveWebapps.contains(file.getName()))           directoriesToDelete.add(file);        }      }    }  }}  }
class C{  @Override public void createUI(){  FieldPanel fieldPanel=createFieldPanel(getXPos(),getLabel());  createUIPanel(fieldPanel,start,0,Localisation.getString(FieldConfigBase.class,"FieldConfigTimePeriod.from"));  createUIPanel(fieldPanel,end,1,Localisation.getString(FieldConfigBase.class,"FieldConfigTimePeriod.to"));  Dimension preferredSize=new Dimension((int)fieldPanel.getPreferredSize().getWidth(),end.panel.getY() + end.panel.getHeight());  fieldPanel.setPreferredSize(preferredSize);  if (!isValueOnly()) {    setAttributeSelectionPanel(fieldPanel.internalCreateAttrButton(Double.class,this,isRasterSymbol()));  }}  }
class C{  public double[] guess(){  return new double[]{a,omega,phi};}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0.001,0.01,0.025,0.05,0.1,0.999,0.990,0.975,0.950,0.900};}  }
class C{  public void sendTo(EntityPlayer player){  if (isUpdating) {    return;  }  if (world == null && player != null) {    world=player.worldObj;  }  NotifyImplementation.instance.doSend(player,where,world,style,item,message,messageParameters);  changed=false;  changedItem=false;  if (updater != null && !addedToRecurList) {    NotifyImplementation.instance.addRecuringNotification(this);    targetPlayer=player;    addedToRecurList=true;  }}  }
class C{  @Override public boolean addAll(Collection<? extends T> c){  for (  T t : c)   add(t);  return true;}  }
class C{  public WeightEvaluationQuery makeWeightEvaluationQuery(DruidAggregationQuery<?> druidQuery){  return WeightEvaluationQuery.makeWeightEvaluationQuery(druidQuery);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public WidgetsGetCommentsQuery(VkApiClient client,UserActor actor){  super(client,"widgets.getComments",GetCommentsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static File createSLDFilename(File file){  File newFile=null;  if (file != null) {    String filename=file.getAbsolutePath();    String fileExtension=getFileExtension(filename);    if (SLD_FILE_EXTENSION.compareToIgnoreCase(fileExtension) == 0) {      return file;    }    int endIndex=filename.length() - fileExtension.length();    filename=filename.substring(0,endIndex);    newFile=new File(filename + SLD_FILE_EXTENSION);  }  return newFile;}  }
class C{  private String populateASGName(String region,String instanceId){  GetASGName getASGName=new GetASGName(region,instanceId);  try {    return getASGName.call();  } catch (  Exception e) {    logger.error("Failed to determine ASG name.",e);    return null;  }}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  private void parseAndAdd(String line,BufferedReader reader) throws IOException {  try {    StringTokenizer tokenizer=new StringTokenizer(line," ");    String tag=tokenizer.nextToken();    if (tag.equals("CONTINUITY_WEIGHT")) {      continuityWeight=Integer.parseInt(tokenizer.nextToken());    } else     if (tag.equals("OPTIMAL_COUPLING")) {      optimalCoupling=Integer.parseInt(tokenizer.nextToken());    } else     if (tag.equals("EXTEND_SELECTIONS")) {      extendSelections=Integer.parseInt(tokenizer.nextToken());    } else     if (tag.equals("JOIN_METHOD")) {      joinMethod=Integer.parseInt(tokenizer.nextToken());    } else     if (tag.equals("JOIN_WEIGHTS")) {      int numWeights=Integer.parseInt(tokenizer.nextToken());      joinWeights=new int[numWeights];      for (int i=0; i < numWeights; i++) {        joinWeights[i]=Integer.parseInt(tokenizer.nextToken());      }      joinWeightShift=calcJoinWeightShift(joinWeights);    } else     if (tag.equals("STS")) {      String name=tokenizer.nextToken();      if (name.equals("STS")) {        sts=new SampleSet(tokenizer,reader);      } else {        mcep=new SampleSet(tokenizer,reader);      }    } else     if (tag.equals("UNITS")) {      int type=Integer.parseInt(tokenizer.nextToken());      int phone=Integer.parseInt(tokenizer.nextToken());      int start=Integer.parseInt(tokenizer.nextToken());      int end=Integer.parseInt(tokenizer.nextToken());      int prev=Integer.parseInt(tokenizer.nextToken());      int next=Integer.parseInt(tokenizer.nextToken());      DatabaseClusterUnit unit=new DatabaseClusterUnit(type,phone,start,end,prev,next);      unitList.add(unit);    } else     if (tag.equals("CART")) {      String name=tokenizer.nextToken();      int nodes=Integer.parseInt(tokenizer.nextToken());      CART cart=new CARTImpl(reader,nodes);      cartMap.put(name,cart);      if (defaultCart == null) {        defaultCart=cart;      }    } else     if (tag.equals("UNIT_TYPE")) {      String name=tokenizer.nextToken();      int start=Integer.parseInt(tokenizer.nextToken());      int count=Integer.parseInt(tokenizer.nextToken());      UnitType unitType=new UnitType(name,start,count);      unitTypesList.add(unitType);    } else {      throw new Error("Unsupported tag " + tag + " in db line `"+ line+ "'");    }  } catch (  NoSuchElementException nse) {    throw new Error("Error parsing db " + nse.getMessage());  }catch (  NumberFormatException nfe) {    throw new Error("Error parsing numbers in db line `" + line + "':"+ nfe.getMessage());  }}  }
class C{  public PollsGetVotersQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public double distanceFrom(Map hNewEstimations,String sCategory){  if (!SuggestedCategory.equals(sCategory))   return Double.MAX_VALUE;  double dRes=0;  Iterator iIter=hNewEstimations.keySet().iterator();  while (iIter.hasNext()) {    String sCategoryName=(String)iIter.next();    double dCategoryEstimation=((Double)hNewEstimations.get(sCategoryName)).doubleValue();    double dLocal=0.0;    if (CategoryEstimations.containsKey(sCategoryName))     dLocal=((Double)CategoryEstimations.get(sCategoryName)).doubleValue(); else     return Double.MAX_VALUE;    dRes+=Math.pow((dLocal - dCategoryEstimation),2);  }  return dRes;}  }
class C{  @Override public void prepareAsync(){  Log.d(SBMP_TAG,"prepareAsync() 469");  if (pmInterface == null) {    if (!ConnectPlayMediaService()) {      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);    }  }  try {    pmInterface.prepareAsync(ServiceBackedMediaPlayer.this.sessionId);  } catch (  RemoteException e) {    e.printStackTrace();    ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);  }}  }
class C{  private int queryVerbosity(){  String defaultVerbStr=Integer.toString(defaultVerbosity);  String verbStr=System.getProperty(pVerbosity);  if (verbStr == null) {    if (resources == null)     readProperties();    if (resources != null) {      try {        verbStr=resources.getString("verbosity");      } catch (      MissingResourceException e) {        verbStr=defaultVerbStr;      }    } else {      verbStr=defaultVerbStr;    }  }  int verb=defaultVerbosity;  try {    verb=Integer.parseInt(verbStr.trim());  } catch (  Exception e) {    System.err.println("Cannot parse verbosity: \"" + verbStr + "\"");  }  if (verbosity == null) {    debug.setDebug(verb);    verbosity=new Integer(verb);  }  return verb;}  }
class C{  public ObjectFactory(){}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public void rebuildResourceHandlerEntities(){  resourceHandlerEntities=new HashMap<ResourceHandler,Collection<String>>();  Iterator<Map.Entry<String,ResourceHandler>> entityResourceIter=entityResourceHandlerMap.entrySet().iterator();  while (entityResourceIter.hasNext()) {    Map.Entry<String,ResourceHandler> entry=entityResourceIter.next();    Collection<String> resourceHandlerEntityNames=resourceHandlerEntities.get(entry.getValue());    if (resourceHandlerEntityNames == null) {      resourceHandlerEntityNames=new LinkedList<String>();      resourceHandlerEntities.put(entry.getValue(),resourceHandlerEntityNames);    }    resourceHandlerEntityNames.add(entry.getKey());  }}  }
class C{  public void reset(){  fScope=XSConstants.SCOPE_ABSENT;  fName=null;  fTargetNamespace=null;  fType=null;  fUnresolvedTypeName=null;  fMiscFlags=0;  fBlock=XSConstants.DERIVATION_NONE;  fFinal=XSConstants.DERIVATION_NONE;  fDefault=null;  fAnnotations=null;  fSubGroup=null;  for (int i=0; i < fIDCPos; i++) {    fIDConstraints[i]=null;  }  fIDCPos=0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Hide_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200375,skillname);}  }
class C{  public UserFeedback(String username){  this.username=username;}  }
class C{  private static boolean instantiateLoadConstraint(FullSensitiveNode objn,FullSensitiveNode qn,SegmentNode pts,int code){  int ret_type=GeometricManager.Undefined_Mapping;  if ((code >> 8) == GeometricManager.ONE_TO_ONE) {    pres.I1=pts.I2;    pres.I2=pts.I1;switch (code & 255) {case GeometricManager.ONE_TO_ONE:      pres.L=pts.L;    ret_type=GeometricManager.ONE_TO_ONE;  break;case GeometricManager.MANY_TO_MANY:pres.L=((RectangleNode)pts).L_prime;pres.L_prime=pts.L;ret_type=GeometricManager.MANY_TO_MANY;break;}} else {pres.I1=pts.I2;pres.I2=1;pres.L_prime=1;switch (code & 255) {case GeometricManager.ONE_TO_ONE:pres.L=pts.L;ret_type=GeometricManager.MANY_TO_MANY;break;case GeometricManager.MANY_TO_MANY:pres.L=((RectangleNode)pts).L_prime;ret_type=GeometricManager.MANY_TO_MANY;break;}}return objn.addFlowsTo(ret_type,qn);}  }
class C{  @Override public void startDTD(XMLLocator locator,Augmentations augs) throws XNIException {  fOpStack=null;  fNodeIndexStack=null;  fPrevNodeIndexStack=null;}  }
class C{  public ExtensionFileComparator(){  this.caseSensitivity=IOCase.SENSITIVE;}  }
class C{  public static byte[] convertObjectToJsonBytes(Object object) throws IOException {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  JavaTimeModule module=new JavaTimeModule();  module.addSerializer(OffsetDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(ZonedDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(LocalDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(Instant.class,JSR310DateTimeSerializer.INSTANCE);  module.addDeserializer(LocalDate.class,JSR310LocalDateDeserializer.INSTANCE);  mapper.registerModule(module);  return mapper.writeValueAsBytes(object);}  }
class C{  final public void copyToBuffer(ByteBuffer buffer){  buffer.put(_buffer,0,_count);}  }
class C{  @Override public void selectionChanged(@Nullable ApkEntry entry){  if (myCurrentEditor != null) {    Disposer.dispose(myCurrentEditor);  }  VirtualFile file=entry == null ? null : entry.getFile();  myCurrentEditor=getEditor(file);  mySplitter.setSecondComponent(myCurrentEditor.getComponent());}  }
class C{  @Override public boolean shouldVisit(WebURL url){  String href=url.getURL().toLowerCase();  return !FILTERS.matcher(href).matches() && href.startsWith("http://www.vottakskidka.ru");}  }
class C{  public boolean hasContent(){  return (content != null && content.size() > 0);}  }
class C{  public Path createClasspath(){  if (classpath == null) {    classpath=new Path(getProject());  }  return classpath.createPath();}  }
class C{  public FriendsGetQuery order(FriendsGetOrder value){  return unsafeParam("order",value);}  }
class C{  public float length(){  return (float)waveHeader.getSubChunk2Size() / waveHeader.getByteRate();}  }
class C{  @Override public void run(){  boolean ok=true;  try {  } catch (  Exception e) {    String message="Problem reading input";    Log.w(Mary.LOG,message,e);    ok=false;  }  boolean streamingOutput=false;  StreamingOutputWriter rw=null;  if (ok)   try {    if (request.getOutputType().equals(MaryDataType.get("AUDIO")) && request.getStreamAudio()) {      streamingOutput=true;      rw=new StreamingOutputWriter(request,dataSocket.getOutputStream());      rw.start();    }    request.process();  } catch (  Throwable e) {    String message="Processing failed.";    Log.e(Mary.LOG,e.toString());    ok=false;  }  try {    infoSocket.close();  } catch (  IOException e) {    Log.w(Mary.LOG,"Couldn't close info socket properly.",e);    ok=false;  }  if (ok) {    if (!streamingOutput) {      try {        request.writeOutputData(dataSocket.getOutputStream());      } catch (      Exception e) {        String message="Cannot write output, client seems to have disconnected.";        Log.w(message,e);        ok=false;      }    } else {      try {        rw.join();      } catch (      InterruptedException ie) {        Log.w(Mary.LOG,ie);      }    }  }  try {    dataSocket.close();  } catch (  IOException e) {    Log.w(Mary.LOG,"Couldn't close data socket properly.",e);    ok=false;  }  if (ok)   Log.i(Mary.LOG,"Request handled successfully."); else   Log.i(Mary.LOG,"Request couldn't be handled successfully.");  if (MaryRuntimeUtils.lowMemoryCondition()) {    Log.i(Mary.LOG,"Low memory condition detected (only " + MaryUtils.availableMemory() + " bytes left). Triggering garbage collection.");    Runtime.getRuntime().gc();    Log.i(Mary.LOG,"After garbage collection: " + MaryUtils.availableMemory() + " bytes available.");  }}  }
class C{  public JSONWriter object() throws JSONException {  if (this.mode == 'i') {    this.mode='o';  }  if (this.mode == 'o' || this.mode == 'a') {    this.append("{");    this.push(new JSONObject());    this.comma=false;    return this;  }  throw new JSONException("Misplaced object.");}  }
class C{  private void unboxParameter(Local argsArrayLocal,int paramIndex,Local[] paramLocals,Type paramType,Chain<Unit> newUnits,LocalGenerator localGen){  ArrayRef arrayRef=Jimple.v().newArrayRef(argsArrayLocal,IntConstant.v(paramIndex));  AssignStmt assignStmt;  if (paramType instanceof PrimType) {    PrimType primType=(PrimType)paramType;    RefType boxedType=primType.boxedType();    SootMethodRef ref=Scene.v().makeMethodRef(boxedType.getSootClass(),paramType + "Value",Collections.<Type>emptyList(),paramType,false);    Local boxedLocal=localGen.generateLocal(RefType.v("java.lang.Object"));    AssignStmt arrayLoad=Jimple.v().newAssignStmt(boxedLocal,arrayRef);    newUnits.add(arrayLoad);    Local castedLocal=localGen.generateLocal(boxedType);    AssignStmt cast=Jimple.v().newAssignStmt(castedLocal,Jimple.v().newCastExpr(boxedLocal,boxedType));    newUnits.add(cast);    VirtualInvokeExpr unboxInvokeExpr=Jimple.v().newVirtualInvokeExpr(castedLocal,ref);    assignStmt=Jimple.v().newAssignStmt(paramLocals[paramIndex],unboxInvokeExpr);  } else {    Local boxedLocal=localGen.generateLocal(RefType.v("java.lang.Object"));    AssignStmt arrayLoad=Jimple.v().newAssignStmt(boxedLocal,arrayRef);    newUnits.add(arrayLoad);    Local castedLocal=localGen.generateLocal(paramType);    AssignStmt cast=Jimple.v().newAssignStmt(castedLocal,Jimple.v().newCastExpr(boxedLocal,paramType));    newUnits.add(cast);    assignStmt=Jimple.v().newAssignStmt(paramLocals[paramIndex],castedLocal);  }  newUnits.add(assignStmt);}  }
class C{  public SiteAdminPage pastePage(String parentPath){  open(parentPath);  grid.getActionBar().clickOnButton(SiteAdminButtons.PASTE,pastePageWindow);  pastePageWindow.confirm();  grid.waitForLoaderNotPresent();  return this;}  }
class C{  public static void main(String[] args) throws Exception {  String[] s="This is a test. 1 2 3 4-5.".split("(\\s|\\p{Punct})+");  List<String> alTest=Arrays.asList(s);  shuffleList(alTest);  System.out.println(alTest.toString());}  }
class C{  public static float convertDpToPixel(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * ((float)metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);  return px;}  }
class C{  public void updateViewport(){  setToOrtho(false,virtualViewport.getWidth(),virtualViewport.getHeight());}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bleed_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201139,value0);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public MarketGetAlbumByIdQuery(VkApiClient client,UserActor actor,int ownerId,int... albumIds){  super(client,"market.getAlbumById",GetAlbumByIdResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  albumIds(albumIds);}  }
class C{  public static String toTimeString(java.util.Date date){  if (date == null)   return "";  Calendar calendar=Calendar.getInstance();  calendar.setTime(date);  return (toTimeString(calendar.get(Calendar.HOUR_OF_DAY),calendar.get(Calendar.MINUTE),calendar.get(Calendar.SECOND)));}  }
class C{  void put(final ByteVector out){  out.putShort(access).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0 && (cw.version & 0xffff) < Opcodes.V1_5) {    ++attributeCount;  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0 && (cw.version & 0xffff) < Opcodes.V1_5) {    out.putShort(cw.newUTF8("Synthetic")).putInt(0);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  @Override public boolean isAlreadyMatched(){  return false;}  }
class C{  @Override protected String dateToString(DateTimeData date){  StringBuffer message=new StringBuffer(5);  message.append('-');  message.append('-');  append(message,date.month,2);  append(message,(char)date.utc,0);  return message.toString();}  }
class C{  public SizeFileFilter(long size){  this(size,true);}  }
class C{  @Override public void onPatchResult(PatchResult result){  if (result == null) {    TinkerLog.e(TAG,"DefaultTinkerResultService received null result!!!!");    return;  }  TinkerLog.i(TAG,"DefaultTinkerResultService received a result:%s ",result.toString());  TinkerServiceInternals.killTinkerPatchServiceProcess(getApplicationContext());  if (result.isSuccess && result.isUpgradePatch) {    File rawFile=new File(result.rawPatchFilePath);    if (rawFile.exists()) {      TinkerLog.i(TAG,"save delete raw patch file");      SharePatchFileUtil.safeDeleteFile(rawFile);    }    if (checkIfNeedKill(result)) {      android.os.Process.killProcess(android.os.Process.myPid());    } else {      TinkerLog.i(TAG,"I have already install the newly patch version!");    }  }  if (!result.isSuccess && !result.isUpgradePatch) {    Tinker.with(getApplicationContext()).cleanPatch();  }}  }
class C{  public String timerString(int level,String message){  StringBuilder retStringBuf=new StringBuilder();  for (int i=0; i < level; i++) {    retStringBuf.append("| ");  }  retStringBuf.append("(");  String timeSinceStartStr=String.valueOf(timeSinceStart());  retStringBuf.append(timeSinceStartStr + ",");  String timeSinceLastStr=String.valueOf(timeSinceLast());  retStringBuf.append(timeSinceLastStr);  retStringBuf.append(")");  int spacecount=12 + (2 * level) - retStringBuf.length();  for (int i=0; i < spacecount; i++) {    retStringBuf.append(' ');  }  retStringBuf.append(message);  lastMessageTime=System.currentTimeMillis();  String retString=retStringBuf.toString();  if (log && Debug.timingOn())   Debug.logTiming(retString,module);  return retString;}  }
class C{  public void removeNodeProperty(String nodePath,String propertyName) throws RepositoryException {  LOG.debug("Removing property '{}' from node '{}'",propertyName,nodePath);  session.refresh(true);  session.getNode(nodePath).getProperty(propertyName).setValue((String)null);  session.save();}  }
class C{  public Leaves(final Material type){  this(type,DEFAULT_SPECIES,DEFAULT_DECAYABLE);}  }
class C{  public int search(byte[] text){  int M=pattern.length;  int N=text.length;  int skip;  for (int i=0; i <= N - M; i+=skip) {    skip=0;    for (int j=M - 1; j >= 0; j--) {      if (pattern[j] != text[i + j]) {        skip=Math.max(1,j - right[text[i + j]]);        break;      }    }    if (skip == 0)     return i;  }  return N;}  }
class C{  public void angleRotation(Vector3f angles){  float angle;  float sr, sp, sy, cr, cp, cy;  angle=(angles.z * FastMath.DEG_TO_RAD);  sy=FastMath.sin(angle);  cy=FastMath.cos(angle);  angle=(angles.y * FastMath.DEG_TO_RAD);  sp=FastMath.sin(angle);  cp=FastMath.cos(angle);  angle=(angles.x * FastMath.DEG_TO_RAD);  sr=FastMath.sin(angle);  cr=FastMath.cos(angle);  m00=cp * cy;  m10=cp * sy;  m20=-sp;  m01=sr * sp * cy + cr * -sy;  m11=sr * sp * sy + cr * cy;  m21=sr * cp;  m02=(cr * sp * cy + -sr * -sy);  m12=(cr * sp * sy + -sr * cy);  m22=cr * cp;  m03=0.0f;  m13=0.0f;  m23=0.0f;}  }
class C{  public int renderedMenuItemCount(Map<String,Object> context){  int count=0;  for (  ModelMenuItem item : this.menuItemList) {    MenuRenderState renderState=MenuRenderState.retrieve(context);    Object prevItemContext=item.prepareItemContext(context,renderState);    if (item.shouldBeRendered(context))     count++;    item.restoreItemContext(context,prevItemContext,renderState);  }  return count;}  }
class C{  protected void performDefaults(){  super.performDefaults();  IPreferenceStore store=getPreferenceStore();  Preferences corePreferences=SVNProviderPlugin.getPlugin().getPluginPreferences();  fileTextFormat.setText(store.getDefaultString(ISVNUIConstants.PREF_FILETEXT_DECORATION));  folderTextFormat.setText(store.getDefaultString(ISVNUIConstants.PREF_FOLDERTEXT_DECORATION));  projectTextFormat.setText(store.getDefaultString(ISVNUIConstants.PREF_PROJECTTEXT_DECORATION));  dateFormatText.setText("");  addedFlag.setText(store.getDefaultString(ISVNUIConstants.PREF_ADDED_FLAG));  dirtyFlag.setText(store.getDefaultString(ISVNUIConstants.PREF_DIRTY_FLAG));  externalFlag.setText(store.getDefaultString(ISVNUIConstants.PREF_EXTERNAL_FLAG));  imageShowDirty.setSelection(store.getDefaultBoolean(ISVNUIConstants.PREF_SHOW_DIRTY_DECORATION));  imageShowAdded.setSelection(store.getDefaultBoolean(ISVNUIConstants.PREF_SHOW_ADDED_DECORATION));  imageShowHasRemote.setSelection(store.getDefaultBoolean(ISVNUIConstants.PREF_SHOW_HASREMOTE_DECORATION));  imageShowNewResource.setSelection(store.getDefaultBoolean(ISVNUIConstants.PREF_SHOW_NEWRESOURCE_DECORATION));  imageShowExternal.setSelection(store.getDefaultBoolean(ISVNUIConstants.PREF_SHOW_EXTERNAL_DECORATION));  imageShowReadOnly.setSelection(false);  showDirty.setSelection(store.getDefaultBoolean(ISVNUIConstants.PREF_CALCULATE_DIRTY));  enableFontDecorators.setSelection(store.getDefaultBoolean(ISVNUIConstants.PREF_USE_FONT_DECORATORS));  setValid(true);}  }
class C{  Vertex(final S2Point location){  this.location=location;  this.incoming=null;  this.outgoing=null;  this.circles=new ArrayList<Circle>();}  }
class C{  public static boolean performSellForKinahToShop(Player player,TradeList tradeList,TradeListTemplate purchaseTemplate){  if (!RestrictionsManager.canTrade(player)) {    return false;  }  Storage inventory=player.getInventory();  for (  TradeItem tradeItem : tradeList.getTradeItems()) {    int itemObjectId=tradeItem.getItemId();    long count=tradeItem.getCount();    Item item=inventory.getItemByObjId(itemObjectId);    if (item == null) {      return false;    }    long purchaseListPrice=PricesService.getKinahForSell(item.getItemTemplate().getPrice(),player.getRace());    int itemId=item.getItemId();    boolean valid=false;    for (    TradeTab tab : purchaseTemplate.getTradeTablist()) {      GoodsList goodList=goodsListData.getGoodsPurchaseListById(tab.getId());      if (goodList.getItemIdList().contains(itemId)) {        valid=true;        break;      }    }    if (!valid)     return false;    if (inventory.decreaseByObjectId(itemObjectId,count)) {      inventory.increaseKinah(purchaseListPrice);    }  }  return true;}  }
