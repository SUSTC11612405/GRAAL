class C{  public static SetExpression contains(String propertyName,Object[] values){  return new SetExpression(Operator.CONTAINS,propertyName,values);}  }
class C{  public Vector3 round(){  x=Math.round(x);  y=Math.round(y);  z=Math.round(z);  return this;}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    int count=mViewPager.getAdapter().getCount();    if (mViewPager.getAdapter() instanceof InfinitePagerAdapter) {      count=((InfinitePagerAdapter)mViewPager.getAdapter()).getRealCount();    }    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public void inc(Collection<KeyType> container,long delta){  for (  KeyType key : container) {    inc(key,delta);  }}  }
class C{  public void println(){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).println();  flush();}  }
class C{  protected void resetTransformedFieldType(TransformationMapping mapping){  Iterator transIter=mapping.getFieldTransformations().iterator();  while (transIter.hasNext()) {    FieldTransformation transformation=(FieldTransformation)transIter.next();    if (transformation instanceof MethodBasedFieldTransformation) {      MethodBasedFieldTransformation methodTransformation=(MethodBasedFieldTransformation)transformation;      try {        Class returnType=Helper.getDeclaredMethod(mapping.getDescriptor().getJavaClass(),methodTransformation.getMethodName(),null).getReturnType();        getFieldDefFromDBField(methodTransformation.getField()).setType(returnType);      } catch (      NoSuchMethodException ex) {      }    } else {      TransformerBasedFieldTransformation classTransformation=(TransformerBasedFieldTransformation)transformation;      String methodName="buildFieldValue";      Class[] params=new Class[]{Object.class,String.class,Session.class};      try {        Class returnType=Helper.getDeclaredMethod(classTransformation.getTransformerClass(),methodName,params).getReturnType();        if (returnType.equals(Object.class)) {          throw ValidationException.missingFieldTypeForDDLGenerationOfClassTransformation(mapping.getDescriptor(),mapping.getAttributeName(),methodName);        }        getFieldDefFromDBField(classTransformation.getField()).setType(returnType);      } catch (      NoSuchMethodException ex) {        throw ValidationException.missingTransformerMethodForDDLGenerationOfClassTransformation(mapping.getDescriptor(),mapping.getAttributeName(),methodName);      }    }  }}  }
class C{  public BiosCommandResult doFailBack(StorageSystem primarySystem,StorageSystem secondarySystem,String policyName,TaskCompleter taskCompleter){  String mirrorPolicyName=policyName.concat("_mirror");  BiosCommandResult result;  try {    result=isiResyncPrep(primarySystem,secondarySystem,policyName,null);    if (!result.isCommandSuccess()) {      return result;    }    result=doStartReplicationPolicy(secondarySystem,mirrorPolicyName,null);    if (!result.isCommandSuccess()) {      return result;    }    result=doFailover(primarySystem,mirrorPolicyName,null);    if (!result.isCommandSuccess()) {      return result;    }    result=isiResyncPrep(secondarySystem,primarySystem,mirrorPolicyName,null);    if (!result.isCommandSuccess()) {      return result;    }    _log.info("Failback from cluster {} to cluster {} successfully finished",secondarySystem.getIpAddress(),primarySystem.getIpAddress());    return BiosCommandResult.createSuccessfulResult();  } catch (  IsilonException e) {    return BiosCommandResult.createErrorResult(e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:24.294 -0500",hash_original_method="D1D435DBB100F2E004D61A3172BCBED6",hash_generated_method="ED7DE1B2185580D0B770863787D22FDF") @SuppressWarnings("unchecked") private void mergeAt(int i){  if (DEBUG)   assert stackSize >= 2;  if (DEBUG)   assert i >= 0;  if (DEBUG)   assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  if (DEBUG)   assert len1 > 0 && len2 > 0;  if (DEBUG)   assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight((Comparable<Object>)a[base2],a,base1,len1,0);  if (DEBUG)   assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft((Comparable<Object>)a[base1 + len1 - 1],a,base2,len2,len2 - 1);  if (DEBUG)   assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  public boolean sameColor(Card c){  if (c == null)   return false;  return sameColor(c.getSuit());}  }
class C{  @Override public synchronized void instantiate(){  if (isInstantiated())   return;  if (VM.VerifyAssertions)   VM._assert(state == CLASS_RESOLVED);  if (VM.TraceClassLoading && VM.runningVM) {    VM.sysWrite("RVMArray: instantiate " + this + "\n");  }  RVMType objectType=RVMType.JavaLangObjectType;  if (VM.VerifyAssertions)   VM._assert(objectType.isInstantiated());  TIB javaLangObjectTIB=objectType.getTypeInformationBlock();  for (int i=0; i < javaLangObjectTIB.numVirtualMethods(); i++) {    typeInformationBlock.setVirtualMethod(i,javaLangObjectTIB.getVirtualMethod(i));  }  SpecializedMethodManager.notifyTypeInstantiated(this);  state=CLASS_INITIALIZED;}  }
class C{  @Override public QueryStringQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public void testNoneNumeric(){  performTest(true,false,false,false,false);}  }
class C{  public void testDeployWhenWarWithDefaultContext() throws Exception {  WAR war=new WAR("ram:///some/warfile.war");  this.fsManager.resolveFile(war.getFile()).createFile();  AbstractCopyingInstalledLocalDeployer deployer=new TestableCopyingDeployer(createContainer(createContainerCapability(DeployableType.WAR),null));  assertFalse(this.fsManager.resolveFile("ram:///webapps/warfile.war").exists());  deployer.deploy(war);  assertTrue(this.fsManager.resolveFile("ram:///webapps/warfile.war").exists());}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  MessageResources rsc=getResources(request);  InstructionalOfferingDetailForm frm=(InstructionalOfferingDetailForm)form;  String op=(request.getAttribute("op") != null ? request.getAttribute("op").toString() : request.getParameter("op") != null ? request.getParameter("op") : frm.getOp() != null && !frm.getOp().isEmpty() ? frm.getOp() : request.getParameter("hdnOp"));  if (op == null || op.trim().length() == 0)   throw new Exception(MSG.exceptionOperationNotInterpreted() + op);  if ("n".equals(request.getParameter("confirm")))   op=rsc.getMessage("op.view");  Debug.debug("Op: " + op);  if (op.equals(MSG.actionDeleteIO()) && request.getAttribute("cfgDelete") == null) {    sessionContext.checkPermission(frm.getInstrOfferingId(),"InstructionalOffering",Right.OfferingDelete);    doDelete(request,frm);    sessionContext.removeAttribute(SessionAttribute.OfferingsCourseNumber);    return mapping.findForward("showInstructionalOfferings");  }  if (op.equals(rsc.getMessage("op.view")) || op.equals(MSG.actionUpdateConfiguration()) || op.equals(MSG.actionSaveConfiguration())|| op.equals(MSG.actionDeleteConfiguration())|| op.equals(MSG.actionUnassignAllInstructorsFromConfig())) {    String instrOfferingId=(request.getParameter("io") == null) ? (request.getAttribute("io") == null) ? null : request.getAttribute("io").toString() : request.getParameter("io");    if (instrOfferingId == null && frm.getInstrOfferingId() != null)     instrOfferingId=frm.getInstrOfferingId().toString();    if (instrOfferingId == null || instrOfferingId.trim().length() == 0)     throw new Exception(MSG.exceptionIODataNotCorrect() + instrOfferingId); else {      sessionContext.checkPermission(instrOfferingId,"InstructionalOffering",Right.InstructionalOfferingDetail);      doLoad(request,frm,instrOfferingId);    }    BackTracker.markForBack(request,"instructionalOfferingDetail.do?io=" + frm.getInstrOfferingId(),MSG.backInstructionalOffering(frm.getInstrOfferingNameNoTitle()),true,false);    return mapping.findForward("showConfigDetail");  }  if (op.equals(MSG.actionAddConfiguration())) {    sessionContext.checkPermission(frm.getInstrOfferingId(),"InstructionalOffering",Right.InstrOfferingConfigAdd);    InstructionalOfferingDAO idao=new InstructionalOfferingDAO();    InstructionalOffering io=idao.get(frm.getInstrOfferingId());    request.setAttribute("uid",io.getControllingCourseOffering().getUniqueId().toString());    return mapping.findForward("modifyConfig");  }  if (op.equals(MSG.actionMakeOffered())) {    sessionContext.checkPermission(frm.getInstrOfferingId(),"InstructionalOffering",Right.OfferingMakeOffered);    doMakeOffered(request,frm);    InstructionalOfferingDAO idao=new InstructionalOfferingDAO();    InstructionalOffering io=idao.get(frm.getInstrOfferingId());    request.setAttribute("uid",io.getControllingCourseOffering().getUniqueId().toString());    return mapping.findForward("modifyConfig");  }  if (op.equals(MSG.actionMakeNotOffered())) {    sessionContext.checkPermission(frm.getInstrOfferingId(),"InstructionalOffering",Right.OfferingMakeNotOffered);    doMakeNotOffered(request,frm);    if (ApplicationProperty.MakeNotOfferedStaysOnDetail.isFalse()) {      ActionRedirect redirect=new ActionRedirect(mapping.findForward("showInstructionalOfferings"));      redirect.setAnchor("A" + frm.getInstrOfferingId());      return redirect;    } else {      response.sendRedirect(response.encodeURL("instructionalOfferingDetail.do?io=" + frm.getInstrOfferingId()));      return null;    }  }  if (op.equals(MSG.actionCrossLists())) {    sessionContext.checkPermission(frm.getInstrOfferingId(),"InstructionalOffering",Right.InstructionalOfferingCrossLists);    InstructionalOfferingDAO idao=new InstructionalOfferingDAO();    InstructionalOffering io=idao.get(frm.getInstrOfferingId());    request.setAttribute("uid",io.getControllingCourseOffering().getUniqueId().toString());    return mapping.findForward("modifyCrossLists");  }  if (op.equals(MSG.actionNextIO())) {    response.sendRedirect(response.encodeURL("instructionalOfferingDetail.do?io=" + frm.getNextId()));    return null;  }  if (op.equals(MSG.actionPreviousIO())) {    response.sendRedirect(response.encodeURL("instructionalOfferingDetail.do?io=" + frm.getPreviousId()));    return null;  }  if (op.equals(MSG.actionLockIO())) {    InstructionalOfferingDAO idao=new InstructionalOfferingDAO();    InstructionalOffering io=idao.get(frm.getInstrOfferingId());    sessionContext.checkPermission(io,Right.OfferingCanLock);    io.getSession().lockOffering(io.getUniqueId());    response.sendRedirect(response.encodeURL("instructionalOfferingDetail.do?io=" + io.getUniqueId()));    return null;  }  if (op.equals(MSG.actionUnlockIO())) {    InstructionalOfferingDAO idao=new InstructionalOfferingDAO();    InstructionalOffering io=idao.get(frm.getInstrOfferingId());    sessionContext.checkPermission(io,Right.OfferingCanUnlock);    io.getSession().unlockOffering(io,sessionContext.getUser());    response.sendRedirect(response.encodeURL("instructionalOfferingDetail.do?io=" + io.getUniqueId()));    return null;  }  sessionContext.checkPermission(frm.getInstrOfferingId(),"InstructionalOffering",Right.InstructionalOfferingDetail);  BackTracker.markForBack(request,"instructionalOfferingDetail.do?io=" + frm.getInstrOfferingId(),MSG.backInstructionalOffering(frm.getInstrOfferingName()),true,false);  return mapping.findForward("showInstructionalOfferings");}  }
class C{  private static int NewObjectA(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: NewObjectA  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Class<?> cls=(Class<?>)env.getJNIRef(classJREF);    RVMClass vmcls=java.lang.JikesRVMSupport.getTypeForClass(cls).asClass();    if (vmcls.isAbstract() || vmcls.isInterface()) {      env.recordException(new InstantiationException());      return 0;    }    Object newobj=JNIHelpers.invokeInitializer(cls,methodID,argAddress,true,false);    return env.pushJNIRef(newobj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public Isolate(int queueCapacity){  tuples=new LinkedBlockingQueue<>(queueCapacity);}  }
class C{  public static boolean isCrashBound(){  return crashBound;}  }
class C{  public static Method methodFromName(String fullyQualifiedMethodName) throws ClassNotFoundException, NoSuchMethodException, SecurityException {  return methodFromName(fullyQualifiedMethodName,(Class[])null);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.677 -0500",hash_original_method="3A92950E40C3C85A49E393646C27AEA9",hash_generated_method="3A92950E40C3C85A49E393646C27AEA9") void clearBindingLocked(){  clearConnectionLocked();  mBindSequence=-1;  mCurId=null;  mCurMethod=null;}  }
class C{  public void init() throws ServletException {}  }
class C{  public static void main(String[] args){}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tSpecifies if inverse of selection is to be output.\n","V",0,"-V"));  newVector.addElement(new Option("\tSpecifies number of folds dataset is split into. \n" + "\t(default 10)\n","N",1,"-N <number of folds>"));  newVector.addElement(new Option("\tSpecifies which fold is selected. (default 1)\n","F",1,"-F <fold>"));  newVector.addElement(new Option("\tSpecifies random number seed. (default 0, no randomizing)\n","S",1,"-S <seed>"));  return newVector.elements();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(Seeker.getInstance().getUsedVideoDiskspace());}  }
class C{  private IoBuffer encodeInitialGreetingPacket(final SocksProxyRequest request){  byte nbMethods=(byte)SocksProxyConstants.SUPPORTED_AUTH_METHODS.length;  IoBuffer buf=IoBuffer.allocate(2 + nbMethods);  buf.put(request.getProtocolVersion());  buf.put(nbMethods);  buf.put(SocksProxyConstants.SUPPORTED_AUTH_METHODS);  return buf;}  }
class C{  public static long checkSum(byte[] b,int offset,int length){  long checkSum=0;  for (int i=offset; i < length; i+=4) {    for (int j=0; j < 4; j++) {      if (j + i < length) {        checkSum+=(b[j + i] & 0xff) << (24 - 8 * j);      }    }  }  return checkSum & 0xffffffffL;}  }
class C{  @Override public PageException execute(String id){  SpoolerTask task=getTaskById(openDirectory,id);  if (task == null)   task=getTaskById(closedDirectory,id);  if (task != null) {    return execute(task);  }  return null;}  }
class C{  public static void startActionBaz(Context context,String param1,String param2){  Intent intent=new Intent(context,MyIntentService.class);  intent.setAction(ACTION_BAZ);  intent.putExtra(EXTRA_PARAM1,param1);  intent.putExtra(EXTRA_PARAM2,param2);  context.startService(intent);}  }
class C{  public static void runOnUIThread(final Display display,final boolean asynch,final Runnable runnable){  if (display == null) {    throw new IllegalArgumentException("display is null");  }  if (asynch) {    display.asyncExec(runnable);  } else {    display.syncExec(runnable);  }}  }
class C{  public Path(final Vertex v0,final Vertex v1,final EdgeSample edgeSample){  if (v0 == null)   throw new IllegalArgumentException();  if (v1 == null)   throw new IllegalArgumentException();  if (v0.sample == null)   throw new IllegalArgumentException();  if (edgeSample == null)   throw new IllegalArgumentException();  if (edgeSample.getSample() == null)   throw new IllegalArgumentException();  this.vertices=new Vertex[]{v0,v1};  this.preds=getPredicates(vertices);  this.edgeSample=edgeSample;  this.sumEstRead=v0.sample.estCard + edgeSample.estRead;  this.sumEstCard=edgeSample.estCard;  this.sumEstCost=getCost(this.sumEstRead,this.sumEstCard);}  }
class C{  public void clearViewCached(int viewId){  mCacheView.clearViewCached(viewId);}  }
class C{  public BaseAlertDialog(Context context){  super(context);  widthScale(0.88f);  mLlContainer=new LinearLayout(context);  mLlContainer.setOrientation(LinearLayout.VERTICAL);  mTvTitle=new TextView(context);  mTvContent=new TextView(context);  mLlBtns=new LinearLayout(context);  mLlBtns.setOrientation(LinearLayout.HORIZONTAL);  mTvBtnLeft=new TextView(context);  mTvBtnLeft.setGravity(Gravity.CENTER);  mTvBtnMiddle=new TextView(context);  mTvBtnMiddle.setGravity(Gravity.CENTER);  mTvBtnRight=new TextView(context);  mTvBtnRight.setGravity(Gravity.CENTER);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.VARIABLE__NAME:    return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static String reflectionToString(Object object,ToStringStyle style,boolean outputTransients){  return ReflectionToStringBuilder.toString(object,style,outputTransients,false,null);}  }
class C{  static boolean isInTouchMode(){  IWindowSession windowSession=WindowManagerGlobal.peekWindowSession();  if (windowSession != null) {    try {      return windowSession.getInTouchMode();    } catch (    RemoteException e) {    }  }  return false;}  }
class C{  private static final long fromDMY(final int d,final int m,final int y){  QL.require(y > 1900 && y <= 2199,"year(" + y + ") out of bound. It must be in [1901,2199]");  QL.require(m > 0 && m < 13,"month outside JANUARY-December range [1,12]");  final boolean leap=isLeap(y);  final int len=monthLength(m,leap);  final int offset=monthOffset(m,leap);  QL.ensure(d > 0 && d <= len,"day outside month day-range");  final long result=d + offset + yearOffset(y);  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void verifyBlockMirrorMigration() throws Exception {  log.info("Verifying BlockMirror migration.");  Iterator<BlockMirror> blockMirrorItr=_dbClient.queryIterativeObjects(BlockMirror.class,blockMirrorURIs);  List<BlockObject> blockObjects=new ArrayList<BlockObject>();  while (blockMirrorItr.hasNext()) {    blockObjects.add(blockMirrorItr.next());  }  verifyBlockObjects(blockObjects);}  }
class C{  public boolean isGlobal(){  return telephoneNumber.isGlobal();}  }
class C{  @SuppressWarnings("unchecked") public SingleFieldBuilder<MType,BType,IType> clear(){  message=(MType)(message != null ? message.getDefaultInstanceForType() : builder.getDefaultInstanceForType());  if (builder != null) {    builder.dispose();    builder=null;  }  onChanged();  return this;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public ValueType findLast(KeyType key){  checkOpen();  DatabaseEntry keyEntry=new DatabaseEntry(keyConverter.toByteArray(key));  DatabaseEntry value=new DatabaseEntry();  ValueType result=null;  Cursor cursor=null;  try {    cursor=db.openCursor(txn().getBJETransaction(),cursorConfig);    OperationStatus status=cursor.getLast(keyEntry,value,LockMode.DEFAULT);    if (status == OperationStatus.SUCCESS)     result=valueConverter.fromByteArray(value.getData(),value.getOffset(),value.getSize());  } catch (  Exception ex) {    throw new HGException("Failed to lookup index '" + name + "': "+ ex.toString(),ex);  } finally {    if (cursor != null) {      try {        cursor.close();      } catch (      Throwable t) {      }    }  }  return result;}  }
class C{  public double localScore(int i,int parent){  return localScore(i,new int[]{parent});}  }
class C{  public void unmaximiseComponent(){  if (maximisedComponent == null) {    return;  }  container.remove(maximisedComponent);  container.add(containerChild);  parentMaximisedComponent.add(maximisedComponent);  container.validate();  containerChild=null;  parentMaximisedComponent=null;  maximisedComponent=null;}  }
class C{  public static boolean sameLine(double[][] points){  for (int i=0; i < points.length - 2; i+=3) {    if (pointPosition(points[i][0],points[i][1],points[i + 1][0],points[i + 1][1],points[i + 2][0],points[i + 2][1]) != 0) {      return false;    }  }  return true;}  }
class C{  public int hashCode(){  return com + (int)(quiteUniqueID ^ (quiteUniqueID >>> 32));}  }
class C{  public Bundler putParcelable(String key,Parcelable value){  bundle.putParcelable(key,value);  return this;}  }
class C{  @Override public Element store(){  Element e=new Element("locomotive");  e.setAttribute("id",getId());  e.setAttribute("fileName",getFileName());  e.setAttribute("roadNumber",getRoadNumber());  e.setAttribute("roadName",getRoadName());  e.setAttribute("mfg",getMfg());  e.setAttribute("owner",getOwner());  e.setAttribute("model",getModel());  e.setAttribute("dccAddress",getDccAddress());  e.setAttribute("comment",getComment());  e.setAttribute(RosterEntry.MAX_SPEED,(Integer.toString(getMaxSpeedPCT())));  e.setAttribute("imageFilePath",(this.getImagePath() != null) ? FileUtil.getPortableFilename(this.getImagePath()) : "");  e.setAttribute("iconFilePath",(this.getIconPath() != null) ? FileUtil.getPortableFilename(this.getIconPath()) : "");  e.setAttribute("URL",getURL());  e.setAttribute(RosterEntry.SHUNTING_FUNCTION,getShuntingFunction());  if (!_dateUpdated.isEmpty()) {    e.addContent(new Element("dateUpdated").addContent(getDateUpdated()));  }  Element d=new Element("decoder");  d.setAttribute("model",getDecoderModel());  d.setAttribute("family",getDecoderFamily());  d.setAttribute("comment",getDecoderComment());  e.addContent(d);  if (_dccAddress.isEmpty()) {    e.addContent((new jmri.configurexml.LocoAddressXml()).store(null));  } else {    e.addContent((new jmri.configurexml.LocoAddressXml()).store(new DccLocoAddress(Integer.parseInt(_dccAddress),_protocol)));  }  if (functionLabels != null) {    d=new Element("functionlabels");    for (int i=0; i <= MAXFNNUM; i++) {      if (functionLabels[i] != null && !functionLabels[i].isEmpty()) {        Element fne=new Element(RosterEntry.FUNCTION_LABEL);        fne.setAttribute("num","" + i);        boolean lockable=false;        if (functionLockables != null) {          lockable=functionLockables[i];        }        fne.setAttribute("lockable",lockable ? "true" : "false");        if ((functionImages != null)) {          fne.setAttribute("functionImage",(functionImages[i] != null) ? FileUtil.getPortableFilename(functionImages[i]) : "");        }        if ((functionSelectedImages != null)) {          fne.setAttribute("functionImageSelected",(functionSelectedImages[i] != null) ? FileUtil.getPortableFilename(functionSelectedImages[i]) : "");        }        fne.addContent(functionLabels[i]);        d.addContent(fne);      }    }    e.addContent(d);  }  if (soundLabels != null) {    d=new Element("soundlabels");    for (int i=0; i < MAXSOUNDNUM; i++) {      if (soundLabels[i] != null && !soundLabels[i].isEmpty()) {        Element fne=new Element(RosterEntry.SOUND_LABEL);        fne.setAttribute("num","" + i);        fne.addContent(soundLabels[i]);        d.addContent(fne);      }    }    e.addContent(d);  }  if (!getAttributes().isEmpty()) {    d=new Element("attributepairs");    for (    String key : getAttributes()) {      d.addContent(new Element("keyvaluepair").addContent(new Element("key").addContent(key)).addContent(new Element("value").addContent(getAttribute(key))));    }    e.addContent(d);  }  if (_sp != null) {    _sp.store(e);  }  return e;}  }
class C{  public static InlineQueryResultPhotoBuilder builder(){  return new InlineQueryResultPhotoBuilder();}  }
class C{  public boolean mouseDragged(MouseEvent e){  Projection proj=getProjection();  int w=proj.getWidth();  int h=proj.getHeight();  int x=e.getX();  int y=e.getY();  if (x < 0)   x=0;  if (y < 0)   y=0;  if (x > w)   x=w;  if (y > h)   y=h;  int dx=x - dragX;  int dy=y - dragY;  if (dragging) {    dragX=x;    dragY=y;    text.setX(text.getX() + dx);    text.setY(text.getY() + dy);    repaint();    return true;  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public CLIOutputResponse merge(final MergeRequest request) throws IOException, SubversionException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  final List<String> cliArgs=defaultArgs();  cliArgs.add("merge");  cliArgs.add(request.getSourceURL());  List<String> paths=new ArrayList<String>();  paths.add(request.getTarget());  final CommandLineResult result=runCommand(null,cliArgs,projectPath,paths);  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  public boolean isExpDateRequired(){  return expDateRequired;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.027 -0500",hash_original_method="40C13EAB5470D8D1FC8D6DE9CC466037",hash_generated_method="A75F5A1D74EFBDCC42E1E7CDB0133394") @Override protected void shutdownOutput() throws IOException {  try {    Libcore.os.shutdown(fd,SHUT_WR);  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsSocketException();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:54.172 -0500",hash_original_method="6E7F8FDCB456B5F7602153AE8EC6838E",hash_generated_method="37AAD6DF9A3A307FA4E62A57169C5DDB") public static ServiceState newFromBundle(Bundle m){  ServiceState ret;  ret=new ServiceState();  ret.setFromNotifierBundle(m);  return ret;}  }
class C{  public void updateTimeType(){  timeType=TimeType.DISCRETE;  for (  Neuron n : getFlatNeuronList()) {    if (n.getTimeType() == TimeType.CONTINUOUS) {      timeType=TimeType.CONTINUOUS;    }  }}  }
class C{  private void beginMyTurn(){  p=clientgui.getClient().getLocalPlayer();  setConventionalEnabled(p.getNbrMFConventional());  setCommandEnabled(p.getNbrMFCommand());  setVibrabombEnabled(p.getNbrMFVibra());  setActiveEnabled(p.getNbrMFActive());  setInfernoEnabled(p.getNbrMFInferno());  setRemoveMineEnabled(true);  if (!p.hasMinefields()) {    butDone.setEnabled(true);  }}  }
class C{  public static void refresh(){  CommonViewer instance=getViewer();  if (instance != null) {    instance.refresh();  }}  }
class C{  private void addUpperPlotData(List<ClassLoadingInformationData> classLoadingData){  for (  ClassLoadingInformationData data : classLoadingData) {    int loadedClassAverage=data.getTotalLoadedClassCount() / data.getCount();    long totalLoadedClassAverage=data.getTotalTotalLoadedClassCount() / data.getCount();    loadedClasses.add(data.getTimeStamp().getTime(),loadedClassAverage,data.getMinLoadedClassCount(),data.getMaxLoadedClassCount(),false);    totalLoadedClasses.add(data.getTimeStamp().getTime(),totalLoadedClassAverage,data.getMinTotalLoadedClassCount(),data.getMaxTotalLoadedClassCount(),false);  }  loadedClasses.fireSeriesChanged();  totalLoadedClasses.fireSeriesChanged();}  }
class C{  @DELETE @Path("/{solnName}") @RequiresRole(role=Role.ADMINISTRATOR) public void delete(@PathParam("solnName") String name){  try {    getIDMClient().deletePrincipal(tenant,name);  } catch (  InvalidPrincipalException|NoSuchTenantException e) {    log.debug("Failed to delete solution user '{}' from tenant '{}'",name,tenant);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidArgumentException e) {    log.error("Failed to delete solution user '{}' from tenant '{}' due to a client side error",name,tenant,e);    throw new BadRequestException(sm.getString("res.soln.delete.failed",name,tenant),e);  }catch (  Exception e) {    log.error("Failed to delete solution user '{}' from tenant '{}' due to a server side error",name,tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  @Override public boolean removeIf(Predicate<? super E> filter){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  @NoInline @NoOptCompile @BaselineSaveLSRegisters @Unpreemptible public static int writeBytes(int fd,byte[] buf,int off,int cnt){  RVMThread.saveThreadState();  RVMThread.enterNative();  int result=sysCall.sysWriteBytes(fd,Magic.objectAsAddress(buf).plus(off),cnt);  RVMThread.leaveNative();  return result;}  }
class C{  public static byte toByte(NibbleArray nibbles){  return toByte(nibbles.get(0),nibbles.get(1));}  }
class C{  public static void initDefaultFlowMod(OFFlowMod.Builder fmb,String entryName){  fmb.setIdleTimeout(INFINITE_TIMEOUT).setHardTimeout(INFINITE_TIMEOUT).setBufferId(OFBufferId.NO_BUFFER).setOutPort(OFPort.ANY).setCookie(computeEntryCookie(0,entryName)).setPriority(Integer.MAX_VALUE).setFlags(Collections.singleton(OFFlowModFlags.SEND_FLOW_REM));  return;}  }
class C{  @Override public final void addBezierCurveC(final float x,final float y,final float x2,final float y2,final float x3,final float y3){  shape_primitives.addElement(C);  shape_primitive_x.addElement(x);  shape_primitive_y.addElement(y);  shape_primitive_x2.addElement(x2);  shape_primitive_y2.addElement(y2);  shape_primitive_x3.addElement(x3);  shape_primitive_y3.addElement(y3);}  }
class C{  protected AnimatablePaintValue(AnimationTarget target){  super(target);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:05.485 -0500",hash_original_method="386D1A4CE5F28E1920F878E4D6E46D78",hash_generated_method="13FCC9F1C8F20B4AA75AF0A3B7E0605B") public int diff(Configuration delta){  int changed=0;  if (delta.fontScale > 0 && fontScale != delta.fontScale) {    changed|=ActivityInfo.CONFIG_FONT_SCALE;  }  if (delta.mcc != 0 && mcc != delta.mcc) {    changed|=ActivityInfo.CONFIG_MCC;  }  if (delta.mnc != 0 && mnc != delta.mnc) {    changed|=ActivityInfo.CONFIG_MNC;  }  if (delta.locale != null && (locale == null || !locale.equals(delta.locale))) {    changed|=ActivityInfo.CONFIG_LOCALE;  }  if (delta.touchscreen != TOUCHSCREEN_UNDEFINED && touchscreen != delta.touchscreen) {    changed|=ActivityInfo.CONFIG_TOUCHSCREEN;  }  if (delta.keyboard != KEYBOARD_UNDEFINED && keyboard != delta.keyboard) {    changed|=ActivityInfo.CONFIG_KEYBOARD;  }  if (delta.keyboardHidden != KEYBOARDHIDDEN_UNDEFINED && keyboardHidden != delta.keyboardHidden) {    changed|=ActivityInfo.CONFIG_KEYBOARD_HIDDEN;  }  if (delta.hardKeyboardHidden != HARDKEYBOARDHIDDEN_UNDEFINED && hardKeyboardHidden != delta.hardKeyboardHidden) {    changed|=ActivityInfo.CONFIG_KEYBOARD_HIDDEN;  }  if (delta.navigation != NAVIGATION_UNDEFINED && navigation != delta.navigation) {    changed|=ActivityInfo.CONFIG_NAVIGATION;  }  if (delta.navigationHidden != NAVIGATIONHIDDEN_UNDEFINED && navigationHidden != delta.navigationHidden) {    changed|=ActivityInfo.CONFIG_KEYBOARD_HIDDEN;  }  if (delta.orientation != ORIENTATION_UNDEFINED && orientation != delta.orientation) {    changed|=ActivityInfo.CONFIG_ORIENTATION;  }  if (delta.screenLayout != SCREENLAYOUT_SIZE_UNDEFINED && screenLayout != delta.screenLayout) {    changed|=ActivityInfo.CONFIG_SCREEN_LAYOUT;  }  if (delta.uiMode != (UI_MODE_TYPE_UNDEFINED | UI_MODE_NIGHT_UNDEFINED) && uiMode != delta.uiMode) {    changed|=ActivityInfo.CONFIG_UI_MODE;  }  if (delta.screenWidthDp != SCREEN_WIDTH_DP_UNDEFINED && screenWidthDp != delta.screenWidthDp) {    changed|=ActivityInfo.CONFIG_SCREEN_SIZE;  }  if (delta.screenHeightDp != SCREEN_HEIGHT_DP_UNDEFINED && screenHeightDp != delta.screenHeightDp) {    changed|=ActivityInfo.CONFIG_SCREEN_SIZE;  }  if (delta.smallestScreenWidthDp != SMALLEST_SCREEN_WIDTH_DP_UNDEFINED && smallestScreenWidthDp != delta.smallestScreenWidthDp) {    changed|=ActivityInfo.CONFIG_SMALLEST_SCREEN_SIZE;  }  return changed;}  }
class C{  public DbSchemaChanger addAnnotation(String methodName,String annotationName,Map<String,Object> values) throws Exception {  CtMethod methodDescriptor=cc.getDeclaredMethod(methodName);  ClassFile ccFile=cc.getClassFile();  ccFile.setVersionToJava5();  ConstPool constpool=ccFile.getConstPool();  MethodInfo minfo=methodDescriptor.getMethodInfo();  AnnotationsAttribute attr=(AnnotationsAttribute)minfo.getAttribute(AnnotationsAttribute.visibleTag);  if (attr == null) {    attr=new AnnotationsAttribute(constpool,AnnotationsAttribute.visibleTag);  }  Annotation annot=new Annotation(annotationName,constpool);  Set<Map.Entry<String,Object>> entries=values.entrySet();  for (  Map.Entry<String,Object> entry : entries) {    String attrName=entry.getKey();    Object attrValue=entry.getValue();    if (attrValue instanceof String) {      annot.addMemberValue(attrName,new StringMemberValue((String)attrValue,ccFile.getConstPool()));    } else {      throw new RuntimeException(String.format("Unsupported attribute type %s of %s",attrName,attrValue));    }  }  attr.addAnnotation(annot);  minfo.addAttribute(attr);  log.info("add {} to method {}",attr,methodDescriptor);  return this;}  }
class C{  public static void cancelNotificationsForRoomId(String accountId,String roomId){  if (null != mActiveEventStreamService) {    mActiveEventStreamService.cancelNotifications(accountId,roomId);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.796 -0500",hash_original_method="383432538F005F982D316492CCCB0325",hash_generated_method="F9919C39AE93CC0FEAFC8BF6BBA4B875") public int flags(){  return theType.flags();}  }
class C{  public void testDoublesCount(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.doubles(size).parallel().forEach(null);    assertEquals(counter.sum(),size);    size+=524959;  }}  }
class C{  private boolean containsUnresolvedElement(BasicBlock block,Register reg){  if (DEBUG) {    System.out.println("containsUnresolvedElement called, block: " + block + " register: "+ reg);    printLiveIntervalList(block);  }  for (LiveIntervalElement elem=getFirstLiveIntervalElement(block); elem != null; elem=elem.getNext()) {    if (elem.getRegister() == reg && elem.getBegin() == null) {      return true;    }  }  return false;}  }
class C{  public void configure(){  setCommandStationType(getOptionState(option2Name));  setTurnoutHandling(getOptionState(option3Name));  LnPacketizer packets=new LnPacketizer();  packets.connectPort(this);  this.getSystemConnectionMemo().setLnTrafficController(packets);  this.getSystemConnectionMemo().configureCommandStation(commandStationType,mTurnoutNoRetry,mTurnoutExtraSpace);  this.getSystemConnectionMemo().configureManagers();  packets.startThreads();}  }
class C{  public void testBottomUpSemanticsExplainHint04() throws Exception {  final ASTContainer container=new TestHelper("explainHints-bottomup04","explainHints-bottomup04.rq","explainHints.trig","explainHints-bottomup12345.srx").runTest();  assertCarriesExactlyOneExplainHintOfType(container.getOptimizedAST(),BottomUpSemanticsExplainHint.class);}  }
class C{  public void testRepeatedKeepAlive() throws IOException {  fetch("www.fortify.net",443,true,"/sslcheck.html",1,10,0,60);  fetch("mail.google.com",443,true,"/mail/",1,10,0,60);}  }
class C{  public void removeAllRenderers(){  mRenderers.clear();}  }
class C{  public void endPreserving() throws org.xml.sax.SAXException {  m_ispreserve=m_preserves.isEmpty() ? false : m_preserves.pop();}  }
class C{  public void visitAttribute(Attribute attr){  if (mv != null) {    mv.visitAttribute(attr);  }}  }
class C{  public static void urlOptionsToProperties(String urlOptions,Properties p) throws SQLException {  String key;  StringTokenizer st=new StringTokenizer(urlOptions,URL_OPTIONS_DELIMITERS);  while (st.hasMoreTokens()) {    key=st.nextToken();    if (!st.hasMoreTokens()) {      throw new SQLException("Invalid empty value for property '" + key + "' in URL: "+ urlOptions);    }    String value=st.nextToken();    p.setProperty(key,value);  }}  }
class C{  protected BoundaryCrossing(Geo p,GeoRegion r,boolean goinin){  geo=p;  if (goinin) {    in=r;  } else {    out=r;  }}  }
class C{  @NamespacePermission(fields="#request?.businessObjectFormatDdlRequests?.![namespace]",permissions=NamespacePermissionEnum.READ) @Override @Transactional(propagation=Propagation.REQUIRES_NEW) public BusinessObjectFormatDdlCollectionResponse generateBusinessObjectFormatDdlCollection(BusinessObjectFormatDdlCollectionRequest request){  return generateBusinessObjectFormatDdlCollectionImpl(request);}  }
class C{  public void removeFragments(FragmentManager fragmentManager){  if (getActivity().isFinishing()) {    return;  }  FragmentTransaction ft=fragmentManager.beginTransaction();  Fragment f=fragmentManager.findFragmentById(R.id.agenda_event_info);  if (f != null) {    ft.remove(f);  }  ft.commit();}  }
class C{  private boolean shouldShowRationale(){  for (  String permission : CAMERA_PERMISSIONS) {    if (FragmentCompat.shouldShowRequestPermissionRationale(this,permission)) {      return true;    }  }  return false;}  }
class C{  @Override public boolean hasAttribute(String key){  return channel.hasAttribute(key);}  }
class C{  @Override public int hashCode(){  return head;}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public void finer(String msg,Throwable thrown){  log(Level.FINER,thrown,msg,thrown);}  }
class C{  private void paintComponentWrapped(Graphics g){  RTextAreaUI ui=(RTextAreaUI)textArea.getUI();  View v=ui.getRootView(textArea).getView(0);  Document doc=textArea.getDocument();  Element root=doc.getDefaultRootElement();  int lineCount=root.getElementCount();  int topPosition=textArea.viewToModel(new Point(visibleRect.x,visibleRect.y));  int topLine=root.getElementIndex(topPosition);  Rectangle visibleEditorRect=ui.getVisibleEditorRect();  Rectangle r=IconRowHeader.getChildViewBounds(v,topLine,visibleEditorRect);  int y=r.y;  int visibleBottom=visibleRect.y + visibleRect.height;  int currentIcon=-1;  if (trackingIcons != null) {    for (int i=0; i < trackingIcons.size(); i++) {      GutterIconImpl icon=getTrackingIcon(i);      int offs=icon.getMarkedOffset();      if (offs >= 0 && offs <= doc.getLength()) {        int line=root.getElementIndex(offs);        if (line >= topLine) {          currentIcon=i;          break;        }      }    }  }  g.setColor(getForeground());  int cellHeight=textArea.getLineHeight();  while (y < visibleBottom) {    r=LineNumberList.getChildViewBounds(v,topLine,visibleEditorRect);    if (currentIcon > -1) {      GutterIconImpl toPaint=null;      while (currentIcon < trackingIcons.size()) {        GutterIconImpl ti=getTrackingIcon(currentIcon);        int offs=ti.getMarkedOffset();        if (offs >= 0 && offs <= doc.getLength()) {          int line=root.getElementIndex(offs);          if (line == topLine) {            toPaint=ti;          } else           if (line > topLine) {            break;          }        }        currentIcon++;      }      if (toPaint != null) {        Icon icon=toPaint.getIcon();        if (icon != null) {          int y2=y + (cellHeight - icon.getIconHeight()) / 2;          icon.paintIcon(this,g,0,y2);        }      }    }    y+=r.height;    topLine++;    if (topLine >= lineCount)     break;  }}  }
class C{  public CheckBoxListModel(Vector listData){  for (int i=0; i < listData.size(); i++) {    addElement(listData.get(i));  }}  }
class C{  public OperationAbortedException(Throwable cause){  super(cause);}  }
class C{  public static Float toFloat(double d){  return new Float(toFloatValue(d));}  }
class C{  public boolean canBeLongAddress(int address){  return isLongAddress(address);}  }
class C{  public Value read(Type type,NodeMap<InputNode> node,Map map) throws Exception {  if (visitor != null) {    visitor.read(type,node);  }  return strategy.read(type,node,map);}  }
class C{  public static void register(QueryLanguage ql){  QUERY_LANGUAGES.add(ql);}  }
class C{  final public SyntaxTreeNode ClosedExpressionOnly() throws ParseException {  SyntaxTreeNode tn;  tn=ClosedExpressionOrOp();  if (isGenOp(tn)) {    if (true)     throw new ParseException("Encountered unexpected Operator");  } else {    if (true)     return tn;  }  throw new Error("Missing return statement in function");}  }
class C{  private Attribute parseAttribute(){  final int attrNSIdx=getLEWord(mParserOffset);  final int attrNameIdx=getLEWord(mParserOffset + (1 * WORD_SIZE));  final int attrValueIdx=getLEWord(mParserOffset + (2 * WORD_SIZE));  final int attrType=getLEWord(mParserOffset + (3 * WORD_SIZE));  final int attrData=getLEWord(mParserOffset + (4 * WORD_SIZE));  final Attribute attr=new Attribute();  attr.setName(getString(attrNameIdx));  if (attrNSIdx == 0xFFFFFFFF) {    attr.setNamespace(null);    attr.setPrefix(null);  } else {    String uri=getString(attrNSIdx);    if (mNamespaces.containsKey(uri)) {      attr.setNamespace(uri);      attr.setPrefix(mNamespaces.get(uri));    }  }  if (attrValueIdx == 0xFFFFFFFF) {    attr.setValue(getAttributeValue(attrType,attrData));  } else {    attr.setValue(getString(attrValueIdx));  }  return attr;}  }
class C{  private void startAtt(){  att=new TagLibTagAttr(tag);  insideAtt=true;}  }
class C{  public synchronized void cachePackageInstallInfo(String packageName,UserHandleCompat user,Bitmap icon,CharSequence title){  removeFromMemCacheLocked(packageName,user);  ComponentKey cacheKey=getPackageKey(packageName,user);  CacheEntry entry=mCache.get(cacheKey);  if (entry == null) {    entry=new CacheEntry();    mCache.put(cacheKey,entry);  }  if (!TextUtils.isEmpty(title)) {    entry.title=title;  }  if (icon != null) {    entry.icon=Utilities.createIconBitmap(icon,mContext);  }}  }
class C{  public boolean canSpawnWorkers(){  boolean canSpawnWorker=false;  if (verboseLogLevel > 5) {    Utilities.verboseLog("canSpawnWorkers - gridName: " + gridName + " tier : "+ tier+ " maxTierDepth: "+ maxTierDepth+ " lifeRemaing: "+ lifeRemaining()+ " maximumLifeMillis: "+ maximumLifeMillis);  }  if (!gridName.equals("lsf")) {    return false;  }  if (clusterState != null) {    Long timeSinceClusterLastUpdatedClusterState=System.currentTimeMillis() - clusterState.getLastUpdated();    Utilities.verboseLog("timeSinceClusterLastUpdatedClusterState: " + timeSinceClusterLastUpdatedClusterState);    if (timeSinceClusterLastUpdatedClusterState > 2 * gridCheckInterval * 1000) {      Utilities.verboseLog("ClusterState is not uptodate:" + clusterState.toString());      return false;    }  } else {    return false;  }  if (tier == maxTierDepth) {    return false;  }  if (lifeRemaining() < (maximumLifeMillis * 0.25)) {    return false;  }switch (tier) {case 1:    canSpawnWorker=true;  break;case 2:canSpawnWorker=true;break;case 3:canSpawnWorker=true;break;case 4:canSpawnWorker=true;break;default :if (gridThrottle) {canSpawnWorker=false;} else {canSpawnWorker=true;}}return canSpawnWorker;}  }
class C{  public void rotate(int[][] matrix){  if (matrix == null || matrix.length == 0 || matrix[0].length == 0)   return;  int n=matrix.length;  for (int i=0; i < n / 2; i++) {    for (int j=i; j < n - i - 1; j++) {      int tmp=matrix[i][j];      matrix[i][j]=matrix[n - j - 1][i];      matrix[n - j - 1][i]=matrix[n - i - 1][n - j - 1];      matrix[n - i - 1][n - j - 1]=matrix[j][n - i - 1];      matrix[j][n - i - 1]=tmp;    }  }}  }
class C{  public ConfusionMatrixEvaluationResult(ConfusionMatrix confusionmatrix,String evaluationName){  super();  this.confusionmatrix=confusionmatrix;  this.evaluationName=evaluationName;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public boolean matches(HttpServletRequest request){  boolean match=false;  if (getStartRange() != null && getEndRange() != null) {    String ip=request.getRemoteAddr();    match=(ip.compareTo(getStartRange()) >= 0 && ip.compareTo(getEndRange()) <= 0);  }  return match;}  }
class C{  public void dispose(){  if (ffmpeg != null) {    try {      ffmpeg.flush();      ffmpeg.close();    } catch (    Exception e) {      e.printStackTrace();    }  }  if (process != null) {    try {      Thread.sleep(1000);      process.destroy();      process.waitFor();    } catch (    InterruptedException e) {      PApplet.println("Waiting for ffmpeg timed out!");      e.printStackTrace();    }  }  processBuilder=null;  process=null;  img=null;  parent=null;  ffmpeg=null;  ffmpegOutputMsg=null;  settings=null;  PApplet.println(outputFilePath,"saved.");}  }
class C{  public void repaint(java.awt.Rectangle r){}  }
class C{  public void destroySelf(){}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzPushbackPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead < 0) {    return true;  } else {    zzEndRead+=numRead;    return false;  }}  }
class C{  public V remove(Object key){  return doRemove(key,null);}  }
class C{  private void sendBroadcastOperationFinished(Target target,RemoteOperation operation,RemoteOperationResult result){  Intent intent=new Intent(ACTION_OPERATION_FINISHED);  intent.putExtra(EXTRA_RESULT,result);  if (target.mAccount != null) {    intent.putExtra(EXTRA_ACCOUNT,target.mAccount);  } else {    intent.putExtra(EXTRA_SERVER_URL,target.mServerUrl);  }  sendStickyBroadcast(intent);}  }
class C{  public void remove(Object key){  if (key == null) {    Logging.logger().finer("nullValue.KeyIsNull");    return;  }synchronized (this.lock) {    CacheEntry entry=this.entries.get(key);    if (entry != null)     this.removeEntry(entry);  }}  }
class C{  public static AsymmetricKeyParameter createKey(SubjectPublicKeyInfo keyInfo) throws IOException {  AlgorithmIdentifier algId=keyInfo.getAlgorithm();  if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.rsaEncryption) || algId.getAlgorithm().equals(X509ObjectIdentifiers.id_ea_rsa)) {    RSAPublicKey pubKey=RSAPublicKey.getInstance(keyInfo.parsePublicKey());    return new RSAKeyParameters(false,pubKey.getModulus(),pubKey.getPublicExponent());  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.dhpublicnumber)) {    DHPublicKey dhPublicKey=DHPublicKey.getInstance(keyInfo.parsePublicKey());    BigInteger y=dhPublicKey.getY().getValue();    DHDomainParameters dhParams=DHDomainParameters.getInstance(algId.getParameters());    BigInteger p=dhParams.getP().getValue();    BigInteger g=dhParams.getG().getValue();    BigInteger q=dhParams.getQ().getValue();    BigInteger j=null;    if (dhParams.getJ() != null) {      j=dhParams.getJ().getValue();    }    DHValidationParameters validation=null;    DHValidationParms dhValidationParms=dhParams.getValidationParms();    if (dhValidationParms != null) {      byte[] seed=dhValidationParms.getSeed().getBytes();      BigInteger pgenCounter=dhValidationParms.getPgenCounter().getValue();      validation=new DHValidationParameters(seed,pgenCounter.intValue());    }    return new DHPublicKeyParameters(y,new DHParameters(p,g,q,j,validation));  } else   if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.dhKeyAgreement)) {    DHParameter params=DHParameter.getInstance(algId.getParameters());    ASN1Integer derY=(ASN1Integer)keyInfo.parsePublicKey();    BigInteger lVal=params.getL();    int l=lVal == null ? 0 : lVal.intValue();    DHParameters dhParams=new DHParameters(params.getP(),params.getG(),null,l);    return new DHPublicKeyParameters(derY.getValue(),dhParams);  } else   if (algId.getAlgorithm().equals(OIWObjectIdentifiers.elGamalAlgorithm)) {    ElGamalParameter params=ElGamalParameter.getInstance(algId.getParameters());    ASN1Integer derY=(ASN1Integer)keyInfo.parsePublicKey();    return new ElGamalPublicKeyParameters(derY.getValue(),new ElGamalParameters(params.getP(),params.getG()));  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_dsa) || algId.getAlgorithm().equals(OIWObjectIdentifiers.dsaWithSHA1)) {    ASN1Integer derY=(ASN1Integer)keyInfo.parsePublicKey();    ASN1Encodable de=algId.getParameters();    DSAParameters parameters=null;    if (de != null) {      DSAParameter params=DSAParameter.getInstance(de.toASN1Primitive());      parameters=new DSAParameters(params.getP(),params.getQ(),params.getG());    }    return new DSAPublicKeyParameters(derY.getValue(),parameters);  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_ecPublicKey)) {    X962Parameters params=X962Parameters.getInstance(algId.getParameters());    X9ECParameters x9;    ECDomainParameters dParams;    if (params.isNamedCurve()) {      ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)params.getParameters();      x9=CustomNamedCurves.getByOID(oid);      if (x9 == null) {        x9=ECNamedCurveTable.getByOID(oid);      }      dParams=new ECNamedDomainParameters(oid,x9.getCurve(),x9.getG(),x9.getN(),x9.getH(),x9.getSeed());    } else {      x9=X9ECParameters.getInstance(params.getParameters());      dParams=new ECDomainParameters(x9.getCurve(),x9.getG(),x9.getN(),x9.getH(),x9.getSeed());    }    ASN1OctetString key=new DEROctetString(keyInfo.getPublicKeyData().getBytes());    X9ECPoint derQ=new X9ECPoint(x9.getCurve(),key);    return new ECPublicKeyParameters(derQ.getPoint(),dParams);  } else {    throw new RuntimeException("algorithm identifier in key not recognised");  }}  }
class C{  public static void deleteVMsOnThisEndpoint(VerificationHost host,URI peerURI,boolean isMock,String parentComputeLink,List<String> instanceIdsToDelete,List<String> tenantLinks) throws Throwable {  host.testStart(1);  ResourceRemovalTaskState deletionState=new ResourceRemovalTaskState();  deletionState.tenantLinks=tenantLinks;  QuerySpecification compositeQuery=new QueryTask.QuerySpecification();  QueryTask.Query awsComputeStatesQuery=new QueryTask.Query();  awsComputeStatesQuery=Query.Builder.create().addKindFieldClause(ComputeService.ComputeState.class).addFieldClause(ComputeState.FIELD_NAME_PARENT_LINK,parentComputeLink).build();  compositeQuery.query.addBooleanClause(awsComputeStatesQuery);  if (instanceIdsToDelete != null && instanceIdsToDelete.size() > 0) {    QueryTask.Query instanceIdFilterParentQuery=new QueryTask.Query();    for (    String instanceId : instanceIdsToDelete) {      if (!instanceId.startsWith(AWS_INSTANCE_PREFIX)) {        continue;      }      QueryTask.Query instanceIdFilter=new QueryTask.Query().setTermPropertyName(ComputeState.FIELD_NAME_ID).setTermMatchValue(instanceId);      instanceIdFilter.occurance=QueryTask.Query.Occurance.SHOULD_OCCUR;      instanceIdFilterParentQuery.addBooleanClause(instanceIdFilter);    }    instanceIdFilterParentQuery.occurance=Occurance.MUST_OCCUR;    compositeQuery.query.addBooleanClause(instanceIdFilterParentQuery);  }  deletionState.resourceQuerySpec=compositeQuery;  deletionState.isMockRequest=isMock;  host.send(Operation.createPost(createServiceURI(host,peerURI,ResourceRemovalTaskService.FACTORY_LINK)).setBody(deletionState).setCompletion(host.getCompletion()));  host.setTimeoutSeconds(500);  host.testWait();}  }
class C{  public void testXXPermSizeMemoryArgumentOverride() throws Exception {  AbstractInstalledLocalContainerStub container=new AbstractInstalledLocalContainerStub(configuration);  container.getConfiguration().setProperty(GeneralPropertySet.JVMARGS,"-XX:PermSize=256m");  container.startInternal();  JvmLauncher java=container.getJava();  String commandLine=java.getCommandLine();  checkString(commandLine,"-Xms128m");  checkString(commandLine,"-Xmx512m");  checkString(commandLine,"-XX:PermSize=256m");}  }
class C{  @Override public void init(){}  }
class C{  public void signal(){synchronized (mInternalLock) {    mTriggerState=true;    mInternalLock.notifyAll();  }}  }
class C{  public void clear(){  lock.lock();  try {    cache.clear();    mostRecentlyUsedQueries.clear();    onClear();  }  finally {    lock.unlock();  }}  }
class C{  public List<String> qualifications(){  return qualifications;}  }
class C{  public void testQuantization() throws Exception {  Random random=random();  for (int i=0; i < 10000; i++) {    int encoded=random.nextInt();    if (encoded < Geo3DUtil.MIN_ENCODED_VALUE) {      continue;    }    if (encoded > Geo3DUtil.MAX_ENCODED_VALUE) {      continue;    }    double min=encoded * Geo3DUtil.DECODE;    double decoded=Geo3DUtil.decodeValueFloor(encoded);    assertEquals(min,decoded,0.0D);    assertEquals(encoded,Geo3DUtil.encodeValue(decoded));    if (encoded != Integer.MAX_VALUE) {      double max=min + Geo3DUtil.DECODE;      assertEquals(max,Geo3DUtil.decodeValueFloor(encoded + 1),0.0D);      assertEquals(encoded + 1,Geo3DUtil.encodeValue(max));      double minEdge=Math.nextUp(min);      double maxEdge=Math.nextDown(max);      assertEquals(encoded,Geo3DUtil.encodeValue(minEdge));      assertEquals(encoded,Geo3DUtil.encodeValue(maxEdge));      long minBits=NumericUtils.doubleToSortableLong(minEdge);      long maxBits=NumericUtils.doubleToSortableLong(maxEdge);      for (int j=0; j < 100; j++) {        double value=NumericUtils.sortableLongToDouble(TestUtil.nextLong(random,minBits,maxBits));        assertEquals(encoded,Geo3DUtil.encodeValue(value));      }    }  }}  }
class C{  @Override public void collect(int doc) throws IOException {  parent.collectRange(doc,facetName,facetValue);}  }
class C{  public boolean isConnected(){  if (vertexCount() < 2)   return true;  V start=getRandomVertex();  Set<V> connectedToStart=determineConnectedVertices(start);  return connectedToStart.size() == vertexSet().size();}  }
class C{  public static void generate_applist_from_system(PackageManager pacman){  if (pacman == null) {    Log.e(MainActivity.TAG,"[InstalledApp.generate_applist_from_system] pacman is null. " + "Cannot obtain app information.");    return;  }  List<PackageInfo> list=pacman.getInstalledPackages(PackageManager.GET_SIGNATURES);  for (  PackageInfo pi : list) {    _create_application(pacman,pi);  }}  }
class C{  private Element createSingleLogOutForCastleAsIDP(String binding) throws Exception {  String entityID=idmClient.getEntityID(tenantName);  String ssoLoc=convertToIPV6ShortForm(entityID);  if (ssoLoc == null) {    ssoLoc=tenantName;  }  String sloLoc=ssoLoc.replaceAll("/Metadata/","/SLO/");  Element slosEle=createEndPoint(SAMLNames.SLOS,binding,sloLoc,null);  return slosEle;}  }
class C{  public static int translateCategoryToCWE(String category){switch (category) {case "cmdi":    return 78;case "xss":  return 79;case "ldapi":return 90;case "securecookie":return 614;case "pathtraver":return 22;case "crypto":return 327;case "hash":return 328;case "weakrand":return 330;case "sqli":return 89;case "hqli":return 564;case "trustbound":return 501;case "xpathi":return 643;default :return 0;}}  }
class C{  @Override public synchronized Transaction onReadWrite(final Consumer<Transaction> consumer){  throw new UnsupportedOperationException("Threaded transactions are open when created and in manual mode");}  }
class C{  protected ByteArrayList(){  header=new Node();}  }
class C{  public DomainRestoreInfo compactify(){  affectedVariables=null;  return this;}  }
class C{  public static String guessMimeTypeFromExtension(String extension){  if (extension == null || extension.isEmpty()) {    return null;  }  return extensionToMimeTypeMap.get(extension);}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public ServiceOperationException(Reason reason){  super("Service operation failed");  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  protected void resetStoreState() throws Exception {  checkConfiguration();  File rootFile=new File(baseStateStoreDirectory + "/FSRMStateRoot/RMMyriadRoot");  FileUtils.deleteDirectory(rootFile);  FileUtils.forceMkdir(rootFile);  File storeFile=new File(rootFile.getAbsolutePath() + "/MyriadState");  if (!storeFile.createNewFile()) {    throw new IllegalStateException(rootFile.getAbsolutePath() + "/MyriadState could not be created");  }}  }
class C{  @Override public int hashCode(){  int result=17;  final int mult=37;  result=mult * result + this.severity;  result=mult * result + (this.name == null ? 0 : this.name.hashCode());  return result;}  }
class C{  private int[] maxKadane(int[] A){  int beginTemp=0;  int begin=0;  int end=0;  int maxSoFar=A[0];  int maxEndingHere=A[0];  for (int i=1; i < A.length; i++) {    if (maxEndingHere < 0) {      maxEndingHere=A[i];      beginTemp=i;    } else     maxEndingHere+=A[i];    if (maxEndingHere >= maxSoFar) {      maxSoFar=maxEndingHere;      begin=beginTemp;      end=i;    }  }  return new int[]{begin,end};}  }
class C{  public TableInfo(String tableName){  this(tableName,null);}  }
class C{  public boolean editFriend(String key,String name,String number){  SQLiteDatabase db=getWritableDatabase();  if (db == null)   return false;  db.execSQL("UPDATE " + TABLE + " SET "+ COL_DISPLAY_NAME+ "='"+ Utils.makeTextSafeForSQL(name)+ "',"+ COL_NUMBER+ "='"+ Utils.makeTextSafeForSQL(number)+ "' WHERE "+ COL_PUBLIC_KEY+ "='"+ key+ "';");  return true;}  }
class C{  private void sampleResources(List<MarkableSampleHandler> handlers){  final boolean isDebugEnabled_STATISTICS=logger.isTraceEnabled(LogMarker.STATISTICS);  if (isDebugEnabled_STATISTICS) {    logger.trace(LogMarker.STATISTICS,"SampleCollector#sampleResources handlers={}",handlers);  }  int newModCount=this.sampler.getStatisticsModCount();  if (this.statResourcesModCount != newModCount) {    this.statResourcesModCount=newModCount;    int ignoreCount=0;    Statistics[] resources=this.sampler.getStatistics();    for (int i=0; i < resources.length; i++) {      Statistics statistics=resources[i];      if (!this.resourceInstMap.containsKey(statistics)) {        try {          ResourceType type=getResourceType(handlers,statistics);          ResourceInstance resource=allocateResourceInstance(type,statistics);          notifyOldHandlersOfResource(handlers,resource);        } catch (        IgnoreResourceException ex) {          ignoreCount++;        }      }    }    if (isDebugEnabled_STATISTICS) {      logger.trace(LogMarker.STATISTICS,"SampleCollector#sampleResources resources.length={}, ignoreCount={}",resources.length,ignoreCount);    }    List<ResourceInstance> ri=cleanupResources(resources,ignoreCount);    notifyOldHandlers(handlers,ri);  }  notifyNewHandlersOfResources(handlers,this.resourceInstMap.values());}  }
class C{  public void addDays(int days){  super.addField(DurationFieldType.days(),days);}  }
class C{  private void showQuote(int index){  Quote quote=quotes.get(index);  Toast.makeText(this,quote.getQuote(),Toast.LENGTH_LONG).show();}  }
class C{  public Iterator<E> iterator(){  return new DoubleLinkedListIterator<E>(this);}  }
class C{  private Object fixBoxing(Object value,Class<?> expectedType){  if (!expectedType.isPrimitive()) {    return value;  }  Class<?> valuesClass=value.getClass();  assert !valuesClass.isPrimitive();  if (expectedType.equals(Integer.TYPE)) {    if (valuesClass.equals(Character.class)) {      value=(int)((Character)value).charValue();    } else     if (valuesClass.equals(Byte.class)) {      value=(int)((Byte)value).intValue();    } else     if (valuesClass.equals(Short.class)) {      value=(int)((Short)value).intValue();    }  }  if (expectedType.equals(Double.TYPE)) {    if (valuesClass.equals(Integer.class)) {      value=(double)((Integer)value).intValue();    } else     if (valuesClass.equals(Byte.class)) {      value=(double)((Byte)value).intValue();    } else     if (valuesClass.equals(Character.class)) {      value=(double)((Character)value).charValue();    } else     if (valuesClass.equals(Short.class)) {      value=(double)((Short)value).intValue();    } else     if (valuesClass.equals(Long.class)) {      value=(double)((Long)value).longValue();    } else     if (valuesClass.equals(Float.class)) {      value=(double)((Float)value).floatValue();    }  }  if (expectedType.equals(Float.TYPE)) {    if (valuesClass.equals(Integer.class)) {      value=(float)((Integer)value).intValue();    } else     if (valuesClass.equals(Byte.class)) {      value=(float)((Byte)value).intValue();    } else     if (valuesClass.equals(Character.class)) {      value=(float)((Character)value).charValue();    } else     if (valuesClass.equals(Short.class)) {      value=(float)((Short)value).intValue();    } else     if (valuesClass.equals(Long.class)) {      value=(float)((Long)value).longValue();    }  }  if (expectedType.equals(Long.TYPE)) {    if (valuesClass.equals(Integer.class)) {      value=(long)((Integer)value).intValue();    } else     if (valuesClass.equals(Byte.class)) {      value=(long)((Byte)value).intValue();    } else     if (valuesClass.equals(Character.class)) {      value=(long)((Character)value).charValue();    } else     if (valuesClass.equals(Short.class)) {      value=(long)((Short)value).intValue();    }  }  return value;}  }
class C{  public static List<String> tokenize(String source,String separator){  if (separator.length() == 1) {    return tokenize(source,separator.charAt(0));  }  ArrayList<String> tokenized=new ArrayList<String>();  int len=source.length();  StringBuilder buf=new StringBuilder();  for (int iter=0; iter < len; iter++) {    char current=source.charAt(iter);    if (separator.indexOf(current) > -1) {      if (buf.length() > 0) {        tokenized.add(buf.toString());        buf=new StringBuilder();      }    } else {      buf.append(current);    }  }  if (buf.length() > 0) {    tokenized.add(buf.toString());  }  return tokenized;}  }
class C{  public CSVWriter(Writer writer,char separator){  this(writer,separator,DEFAULT_QUOTE_CHARACTER);}  }
class C{  private int skipDelimiters(int startPos){  if (delimiters == null)   throw new NullPointerException();  int position=startPos;  while (!retDelims && position < maxPosition) {    if (!hasSurrogates) {      char c=str.charAt(position);      if ((c > maxDelimCodePoint) || (delimiters.indexOf(c) < 0))       break;      position++;    } else {      int c=str.codePointAt(position);      if ((c > maxDelimCodePoint) || !isDelimiter(c)) {        break;      }      position+=Character.charCount(c);    }  }  return position;}  }
class C{  public TvShowEpisodeScrapeTask(List<TvShowEpisode> episodes,MediaScraper mediaScraper,boolean scrapeThumb){  super(BUNDLE.getString("tvshow.scraping"),episodes.size(),TaskType.BACKGROUND_TASK);  this.episodes=episodes;  this.mediaScraper=mediaScraper;  this.scrapeThumb=scrapeThumb;}  }
class C{  private void moveCursorToNextLine(){  cursorPosition=cursorPosition.withColumn(0).withRelativeRow(1);  if (cursorPosition.getRow() >= currentTextBuffer.getLineCount()) {    currentTextBuffer.newLine();  }  trimBufferBacklog();  correctCursor();}  }
class C{  public double value(){  return value;}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new JSONTokener(string));}  }
class C{  public static ReferenceRanges<String> createSingleReferenceRange(SAMFileHeader header,SamRegionRestriction regionRestriction){  final ReferenceRanges<String> rangeMap=new ReferenceRanges<>(false);  final SequenceNameLocus resolved=resolveRestriction(header.getSequenceDictionary(),regionRestriction);  rangeMap.put(resolved.getSequenceName(),new RangeList<>(new RangeList.RangeData<>(resolved,regionRestriction.toString())));  rangeMap.setIdMap(SamUtils.getSequenceIdLookup(header.getSequenceDictionary()));  return rangeMap;}  }
class C{  public static String toGetUrl(String url,Bundle params){  if (params != null) {    if (!url.endsWith("?")) {      url=url + "?";    }    for (    String key : params.keySet()) {      url=url + key + "="+ params.getString(key)+ "&";    }  }  return url;}  }
class C{  public void removeBackTestBroker(Integer idTradestrategy){synchronized (m_backTestBroker) {    Broker worker=m_backTestBroker.get(idTradestrategy);    if (null != worker) {      if (worker.isDone() || worker.isCancelled()) {        m_backTestBroker.remove(idTradestrategy);      }    }  }}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  public Style(Color fg,Color bg,Font font,boolean underline){  foreground=fg;  background=bg;  this.font=font;  this.underline=underline;  this.fontMetrics=font == null ? null : new JPanel().getFontMetrics(font);}  }
class C{  private Object readResolve(){  return this;}  }
class C{  public static byte[] loadSmd(String file){  String data=loadString(file);  return base64().decode(whitespace().removeFrom(data.substring(data.indexOf(BEGIN_ENCODED_SMD) + BEGIN_ENCODED_SMD.length(),data.indexOf(END_ENCODED_SMD))));}  }
class C{  public static ODataRequest createODataRequest(ODataRequest.Method method,MediaType... mediaTypes) throws UnsupportedEncodingException {  return new ODataRequest.Builder().setBodyText("test","UTF-8").setUri(SERVICE_ROOT).setAccept(mediaTypes).setMethod(method).build();}  }
class C{  public static Long convertWWNtoLong(String wwn){  String norm=wwn.replaceAll(":","").replaceAll("-","");  Long wwnLong=Long.valueOf(norm,16);  return wwnLong;}  }
class C{  public final PdfObject readReferenceTable(final PdfObject linearObj,final PdfFileReader pdfFileReader) throws PdfException {  final PdfObject rootObj=refTable.readReferenceTable(linearObj,this,objectReader);  final PdfObject encryptObj=refTable.getEncryptionObject();  if (encryptObj != null) {    setupDecryption(encryptObj,pdfFileReader);  }  ObjLengthTable=offset.calculateObjectLength((int)eof);  return rootObj;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:56.534 -0500",hash_original_method="44CE70ED19752223312271876AB6E98A",hash_generated_method="60098B8EA8C1658DCED988BF485B1C85") public GridLayoutAnimationController(Context context,AttributeSet attrs){  super(context,attrs);  TypedArray a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.GridLayoutAnimation);  Animation.Description d=Animation.Description.parseValue(a.peekValue(com.android.internal.R.styleable.GridLayoutAnimation_columnDelay));  mColumnDelay=d.value;  d=Animation.Description.parseValue(a.peekValue(com.android.internal.R.styleable.GridLayoutAnimation_rowDelay));  mRowDelay=d.value;  mDirection=a.getInt(com.android.internal.R.styleable.GridLayoutAnimation_direction,DIRECTION_LEFT_TO_RIGHT | DIRECTION_TOP_TO_BOTTOM);  mDirectionPriority=a.getInt(com.android.internal.R.styleable.GridLayoutAnimation_directionPriority,PRIORITY_NONE);  a.recycle();}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public void startWithNewArray(Intent[] array){  if (Build.VERSION.SDK_INT < HONEYCOMB) {    Log.e("TheActivityManager","This method is not supported before HONEYCOMB (Api Level 11)");    return;  }  toLanding();  getCurrentActivity().startActivities(array);  ActivityHolder landing=getLanding();  landing.getActivity().finish();synchronized (activities) {    activities.remove(landing);  }}  }
class C{  private void addOnScrollListener(){  view.cardsLayout.getViewTreeObserver().addOnScrollChangedListener(null);}  }
class C{  private int appendHeader(int field){switch (field) {case PduHeaders.MMS_VERSION:    appendOctet(field);  int version=mPduHeader.getOctet(field);if (0 == version) {  appendShortInteger(PduHeaders.CURRENT_MMS_VERSION);} else {  appendShortInteger(version);}break;case PduHeaders.MESSAGE_ID:case PduHeaders.TRANSACTION_ID:byte[] textString=mPduHeader.getTextString(field);if (null == textString) {return PDU_COMPOSE_FIELD_NOT_SET;}appendOctet(field);appendTextString(textString);break;case PduHeaders.TO:case PduHeaders.BCC:case PduHeaders.CC:EncodedStringValue[] addr=mPduHeader.getEncodedStringValues(field);if (null == addr) {return PDU_COMPOSE_FIELD_NOT_SET;}EncodedStringValue temp;for (int i=0; i < addr.length; i++) {temp=appendAddressType(addr[i]);if (temp == null) {return PDU_COMPOSE_CONTENT_ERROR;}appendOctet(field);appendEncodedString(temp);}break;case PduHeaders.FROM:appendOctet(field);EncodedStringValue from=mPduHeader.getEncodedStringValue(field);if ((from == null) || TextUtils.isEmpty(from.getString()) || new String(from.getTextString()).equals(PduHeaders.FROM_INSERT_ADDRESS_TOKEN_STR)) {append(1);append(PduHeaders.FROM_INSERT_ADDRESS_TOKEN);} else {mStack.newbuf();PositionMarker fstart=mStack.mark();append(PduHeaders.FROM_ADDRESS_PRESENT_TOKEN);temp=appendAddressType(from);if (temp == null) {return PDU_COMPOSE_CONTENT_ERROR;}appendEncodedString(temp);int flen=fstart.getLength();mStack.pop();appendValueLength(flen);mStack.copy();}break;case PduHeaders.READ_STATUS:case PduHeaders.STATUS:case PduHeaders.REPORT_ALLOWED:case PduHeaders.PRIORITY:case PduHeaders.DELIVERY_REPORT:case PduHeaders.READ_REPORT:int octet=mPduHeader.getOctet(field);if (0 == octet) {return PDU_COMPOSE_FIELD_NOT_SET;}appendOctet(field);appendOctet(octet);break;case PduHeaders.DATE:long date=mPduHeader.getLongInteger(field);if (-1 == date) {return PDU_COMPOSE_FIELD_NOT_SET;}appendOctet(field);appendDateValue(date);break;case PduHeaders.SUBJECT:EncodedStringValue enString=mPduHeader.getEncodedStringValue(field);if (null == enString) {return PDU_COMPOSE_FIELD_NOT_SET;}appendOctet(field);appendEncodedString(enString);break;case PduHeaders.MESSAGE_CLASS:byte[] messageClass=mPduHeader.getTextString(field);if (null == messageClass) {return PDU_COMPOSE_FIELD_NOT_SET;}appendOctet(field);if (Arrays.equals(messageClass,PduHeaders.MESSAGE_CLASS_ADVERTISEMENT_STR.getBytes())) {appendOctet(PduHeaders.MESSAGE_CLASS_ADVERTISEMENT);} else if (Arrays.equals(messageClass,PduHeaders.MESSAGE_CLASS_AUTO_STR.getBytes())) {appendOctet(PduHeaders.MESSAGE_CLASS_AUTO);} else if (Arrays.equals(messageClass,PduHeaders.MESSAGE_CLASS_PERSONAL_STR.getBytes())) {appendOctet(PduHeaders.MESSAGE_CLASS_PERSONAL);} else if (Arrays.equals(messageClass,PduHeaders.MESSAGE_CLASS_INFORMATIONAL_STR.getBytes())) {appendOctet(PduHeaders.MESSAGE_CLASS_INFORMATIONAL);} else {appendTextString(messageClass);}break;case PduHeaders.EXPIRY:long expiry=mPduHeader.getLongInteger(field);if (-1 == expiry) {return PDU_COMPOSE_FIELD_NOT_SET;}appendOctet(field);mStack.newbuf();PositionMarker expiryStart=mStack.mark();append(PduHeaders.VALUE_RELATIVE_TOKEN);appendLongInteger(expiry);int expiryLength=expiryStart.getLength();mStack.pop();appendValueLength(expiryLength);mStack.copy();break;default :return PDU_COMPOSE_FIELD_NOT_SUPPORTED;}return PDU_COMPOSE_SUCCESS;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TINTERFACE__EXTERNAL:    setExternal(EXTERNAL_EDEFAULT);  return;case TypesPackage.TINTERFACE__SUPER_INTERFACE_REFS:getSuperInterfaceRefs().clear();return;}super.eUnset(featureID);}  }
class C{  public static Response createAllocationErrorResponse(char errorCode,String reasonPhrase){  Response allocationErrorResponse=new Response();  allocationErrorResponse.setMessageType(Message.ALLOCATE_ERROR_RESPONSE);  ErrorCodeAttribute errorCodeAttribute=AttributeFactory.createErrorCodeAttribute(errorCode,reasonPhrase);  allocationErrorResponse.putAttribute(errorCodeAttribute);  return allocationErrorResponse;}  }
class C{  static ClassLoader callerClassLoader(){  if (org.jikesrvm.VM.runningVM) {    ClassLoader ans=RVMClass.getClassLoaderFromStackFrame(1);    if (ans == BootstrapClassLoader.getBootstrapClassLoader()) {      return null;    } else {      return ans;    }  } else {    return null;  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Video) {    Video other=(Video)obj;    return Objects.equal(name,other.name) && Objects.equal(url,other.url) && duration == other.duration;  } else {    return false;  }}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_DOWN) {    cancelAllAnimations();  }  if (event.getPointerCount() > 1) {    mMidPntX=(event.getX(0) + event.getX(1)) / 2;    mMidPntY=(event.getY(0) + event.getY(1)) / 2;  }  mGestureDetector.onTouchEvent(event);  if (mIsScaleEnabled) {    mScaleDetector.onTouchEvent(event);  }  if (mIsRotateEnabled) {    mRotateDetector.onTouchEvent(event);  }  if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP) {    setImageToWrapCropBounds();  }  return true;}  }
class C{  public boolean deleteEntry(int index){  System.arraycopy(entries,index + 1,entries,index,numEntries - index - 1);  entries[--numEntries]=null;  return true;}  }
class C{  static int[] buildDoesImplement(RVMArray t){  if (arrayDoesImplement == null) {    int cloneIdx=RVMType.JavaLangCloneableType.getDoesImplementIndex();    int serialIdx=RVMType.JavaIoSerializableType.getDoesImplementIndex();    int size=Math.max(cloneIdx,serialIdx);    size=Math.max(MIN_DOES_IMPLEMENT_SIZE,size + 1);    int[] tmp=MemoryManager.newNonMovingIntArray(size);    tmp[cloneIdx]=RVMType.JavaLangCloneableType.getDoesImplementBitMask();    tmp[serialIdx]|=RVMType.JavaIoSerializableType.getDoesImplementBitMask();    arrayDoesImplement=tmp;  }  return arrayDoesImplement;}  }
class C{  public static void appendToOid(SnmpOid source,SnmpOid dest){  if (source.getLength() != 4) {    throw new IllegalArgumentException();  }  dest.append(source);}  }
class C{  public <A>void methodThatHasTypeParmaters(A... a){}  }
class C{  public String executeLocal(String cmd){  log.config(cmd);  if (m_task != null && m_task.isAlive())   m_task.interrupt();  m_task=new Task(cmd);  m_task.start();  StringBuffer sb=new StringBuffer();  while (true) {    try {      Thread.sleep(500);    } catch (    InterruptedException ioe) {      log.log(Level.SEVERE,cmd,ioe);    }    sb.append(m_task.getOut()).append("\n-----------\n").append(m_task.getErr()).append("\n-----------");    if (!m_task.isAlive())     break;  }  log.config("done");  return sb.toString();}  }
class C{  public void java_util_jar_JarFile_getMetaInfoEntryNames(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getStringObject());}  }
class C{  public TimeParser(){  this(DateFormat.getTimeInstance(DateFormat.SHORT));}  }
class C{  public Token peekNextToken() throws ParseException {  return (Token)peekNextToken(1)[0];}  }
class C{  public void modifyNFSShare(String fsName,String qtreeName,String exportPath,ExportRule oldRule,ExportRule newRule){  FlexFileShare share=new FlexFileShare(server.getNaServer(),exportPath);  share.changeNFSShare(fsName,qtreeName,oldRule,newRule,exportPath);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public SensorMatrixEditorsComboBoxModel(){  super();  selection=SensorMatrixEditors.VALUES.get(0);}  }
class C{  public void addAll(Iterable<? extends Number> values){  for (  Number value : values) {    add(value.doubleValue());  }}  }
class C{  public T acquire(){  if (closed)   throw new IllegalStateException("pool closed");  T reference=pool.poll();  if (reference == null) {    reference=factory.createReference(this);  }  reference.acquire();  return reference;}  }
class C{  static double fromMeters(final double meters){  return meters * RADIANS_PER_METER;}  }
class C{  public static int testSimpleSnippet(){  try {    return container.a;  }  finally {    container.a=15;  }}  }
class C{  private void configureWidget(Context context){  AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(context);  Widget_GraphWidget_WidgetProvider.updateAppWidget(context,appWidgetManager,mAppWidgetId,true);}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public void logInfo(String message){  getLog().log(new Status(IStatus.INFO,PLUGIN_ID,message));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TYPE_SPECIFIER__TYPE_ARGUMENTS:    return ((InternalEList<?>)getTypeArguments()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public IProjectFacetVersion findFacetVersion(IMavenProjectFacade arg0,Map<?,?> arg1,IProgressMonitor arg2) throws CoreException {  return null;}  }
class C{  public void clear(){  this.parameterMap.clear();  this.archives.clear();}  }
class C{  public BillReceiptInfoImpl(final ReceiptHeader receiptHeader,final ChartOfAccountsHibernateDAO chartOfAccountsHibernateDAO,final PersistenceService persistenceService,final InstrumentHeader bouncedInstrumentInfo){  this.receiptHeader=receiptHeader;  receiptURL=CollectionConstants.RECEIPT_VIEW_SOURCEPATH + receiptHeader.getId();  additionalInfo=null;  final String receiptStatus=receiptHeader.getStatus().getCode();  for (  final ReceiptDetail receiptDetail : receiptHeader.getReceiptDetails())   accountDetails.add(new ReceiptAccountInfoImpl(receiptDetail,chartOfAccountsHibernateDAO,persistenceService));  if (!CollectionConstants.RECEIPT_STATUS_CODE_INSTRUMENT_BOUNCED.equals(receiptStatus))   for (  final InstrumentHeader instrumentHeader : receiptHeader.getReceiptInstrument())   instrumentDetails.add(new ReceiptInstrumentInfoImpl(instrumentHeader)); else   if (bouncedInstrumentInfo != null)   instrumentDetails.add(new ReceiptInstrumentInfoImpl(bouncedInstrumentInfo));  if (CollectionConstants.RECEIPT_STATUS_CODE_INSTRUMENT_BOUNCED.equals(receiptStatus)) {    event=BillingIntegrationService.EVENT_INSTRUMENT_BOUNCED;    if (bouncedInstrumentInfo != null)     findBouncedInstrument();  } else   if (CollectionConstants.RECEIPT_STATUS_CODE_TO_BE_SUBMITTED.equals(receiptStatus) || CollectionConstants.RECEIPT_STATUS_CODE_APPROVED.equals(receiptStatus) || CollectionConstants.RECEIPT_STATUS_CODE_SUBMITTED.equals(receiptStatus))   event=BillingIntegrationService.EVENT_RECEIPT_CREATED; else   if (CollectionConstants.RECEIPT_STATUS_CODE_CANCELLED.equals(receiptStatus))   event=BillingIntegrationService.EVENT_RECEIPT_CANCELLED;}  }
class C{  public Configurator emptyBackground(int color){  if (color != 0) {    viewEmptyBackgroundColor=color;  }  return this;}  }
class C{  public void addX509Certificate(X509CertificateEntity x509Certificate){  x509Certificates.add(x509Certificate);}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.185 -0400",hash_original_method="5D5891067305793B1BFB385E46628F87",hash_generated_method="FEA09886E15EE34CF4A6F329B896DBA7") public static void writeStringToFile(File file,String data,boolean append) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),append);}  }
class C{  public ResourceFilter regex(){  isRegex=true;  return this;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  @SuppressWarnings("deprecation") @Override public void onShowCustomView(View view,int requestedOrientation,CustomViewCallback callback){  onShowCustomView(view,callback);}  }
class C{  public TermsByQueryRequest query(XContentBuilder builder){  this.querySource=builder == null ? null : builder.bytes();  return this;}  }
class C{  @Override public List<Map<String,String>> taskConfigs(int maxTasks){  ArrayList<Map<String,String>> configs=new ArrayList<>();  List<String> dbs=Arrays.asList(databases.split(","));  int numGroups=Math.min(dbs.size(),maxTasks);  List<List<String>> dbsGrouped=ConnectorUtils.groupPartitions(dbs,numGroups);  for (int i=0; i < numGroups; i++) {    Map<String,String> config=new HashMap<>();    config.put(PORT,port);    config.put(HOST,host);    config.put(SCHEMA_NAME,schemaName);    config.put(BATCH_SIZE,batchSize);    config.put(TOPIC_PREFIX,topicPrefix);    config.put(DATABASES,StringUtils.join(dbsGrouped.get(i),","));    configs.add(config);  }  return configs;}  }
class C{  public static String runFreeCmd() throws IOException, InterruptedException {  Vector<String> commands=new Vector<String>();  commands.add("free -m");  String output=runBashCommand(commands);  if (output != null) {    System.out.println("free -m output: \n" + output);  }  return "";}  }
class C{  private byte[] decryptKeyedChecksum(byte[] enc_cksum,byte[] key) throws KrbCryptoException {  byte[] new_key=new byte[keySize()];  System.arraycopy(key,0,new_key,0,key.length);  for (int i=0; i < new_key.length; i++)   new_key[i]=(byte)(new_key[i] ^ 0xf0);  try {    if (DESKeySpec.isWeak(new_key,0)) {      new_key[7]=(byte)(new_key[7] ^ 0xF0);    }  } catch (  InvalidKeyException ex) {  }  byte[] ivec=new byte[new_key.length];  byte[] cksum=new byte[enc_cksum.length];  Des.cbc_encrypt(enc_cksum,cksum,new_key,ivec,false);  return cksum;}  }
class C{  public boolean isForOf(){  return forOf;}  }
class C{  public static String formatAlertOutput(JsonObject alertObj,String wellId,String alertType){  return "Well" + wellId + " alert, "+ alertType+ " value is "+ alertObj.get(alertType).getAsInt();}  }
class C{  public static void main(String... args) throws Exception {  String baseDir="src/main";  process(new File(baseDir),true);}  }
class C{  public void managedAccounts(String accountNumbers){  try {    _log.debug("Managed accounts: " + accountNumbers);    this.fireManagedAccountsUpdated(accountNumbers);  } catch (  Exception ex) {    error(0,3315,"Error updating Managed Accounts: " + ex.getMessage());  } finally {    onReqFinancialAccount();  }}  }
class C{  public boolean equals(Object o){  if (!(o instanceof Vector2f)) {    return false;  }  if (this == o) {    return true;  }  Vector2f comp=(Vector2f)o;  if (Float.compare(x,comp.x) != 0)   return false;  if (Float.compare(y,comp.y) != 0)   return false;  return true;}  }
class C{  public Object contents(Object contents){  return m_Contents=contents;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void testInputFormat(Instances instanceInfo) throws Exception {  getCapabilities(instanceInfo).testWithFail(instanceInfo);}  }
class C{  public static <E extends Comparable<E>>void recursiveQuickSort(List<E> array,int startIdx,int endIdx){  int idx=partition(array,startIdx,endIdx);  if (startIdx < idx - 1) {    recursiveQuickSort(array,startIdx,idx - 1);  }  if (endIdx > idx) {    recursiveQuickSort(array,idx,endIdx);  }}  }
class C{  public void check(Stack stack) throws BadRequestException, ServerException {  if (stack == null) {    throw new BadRequestException("Required non-null stack");  }  if (stack.getName() == null || stack.getName().isEmpty()) {    throw new BadRequestException("Required non-null and non-empty stack name");  }  if (stack.getScope() == null || !stack.getScope().equals("general") && !stack.getScope().equals("advanced")) {    throw new BadRequestException("Required non-null scope value: 'general' or 'advanced'");  }  if (stack.getSource() == null && stack.getWorkspaceConfig() == null) {    throw new BadRequestException("Stack source required. You must specify either 'workspaceConfig' or 'stackSource'");  }  if (stack.getWorkspaceConfig() == null) {    throw new BadRequestException("Workspace config required");  }  wsValidator.validateConfig(stack.getWorkspaceConfig());}  }
class C{  private String determineCallType(){  Object[] arguments=(Object[])_args.get(0);  CIMArgument<?>[] argsArray=(CIMArgument<?>[])arguments[2];  CIMArgument<?> elementType=argsArray[4];  return elementType.getValue().toString();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=MadMc.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="mad";  String vmSelectionPolicy="mc";  String parameter="2.5";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  private void end(@Nullable Transaction tx,Connection conn,Statement st){  U.closeQuiet(st);  if (tx == null)   closeConnection(conn);}  }
class C{  public static int bitValue(long value,int bit){  return (int)(1L & (value >> bit));}  }
class C{  public boolean isFatalEnabled(){  return true;}  }
class C{  public static OFPacketIn DhcpDiscoveryRequestOFPacketIn(IOFSwitch sw,MacAddress hostMac){  byte[] serializedPacket=DhcpDiscoveryRequestEthernet(hostMac).serialize();  OFFactory factory=sw.getOFFactory();  OFPacketIn.Builder packetInBuilder=factory.buildPacketIn();  if (factory.getVersion() == OFVersion.OF_10) {    packetInBuilder.setInPort(OFPort.of(1)).setData(serializedPacket).setReason(OFPacketInReason.NO_MATCH);  } else {    packetInBuilder.setMatch(factory.buildMatch().setExact(MatchField.IN_PORT,OFPort.of(1)).build()).setData(serializedPacket).setReason(OFPacketInReason.NO_MATCH);  }  return packetInBuilder.build();}  }
class C{  public Matrix4d mulAffineR(Matrix4x3fc right){  return mulAffineR(right,this);}  }
class C{  public MultiMatchQueryBuilder slop(int slop){  this.slop=slop;  return this;}  }
class C{  public void dispose(){  Container root=getRoot();  if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {    LOGGER.finer("disposed BufferInfo for: " + root);  }  if (root != null) {    root.removeComponentListener(this);    if (root instanceof Window) {      ((Window)root).removeWindowListener(this);    }    BufferStrategy bs=getBufferStrategy(false);    if (bs != null) {      bs.dispose();    }  }  this.root=null;  weakBS=null;}  }
class C{  public void addToIndependentRuntimeItrMap(CompiledIteratorDef itrDef) throws AmbiguousNameException, TypeMismatchException, NameResolutionException {  Set set=new HashSet();  this.computeUtlimateDependencies(itrDef,set);  RuntimeIterator itr=null;  String rgnPath=null;  if (set.isEmpty()) {    itr=itrDef.getRuntimeIterator(this);    set.add(itr);    CompiledValue startVal=QueryUtils.obtainTheBottomMostCompiledValue(itrDef.getCollectionExpr());    if (startVal.getType() == OQLLexerTokenTypes.RegionPath) {      rgnPath=((QRegion)((CompiledRegion)startVal).evaluate(this)).getFullPath();      this.indpndtItrToRgnMap.put(itr,rgnPath);    } else     if (startVal.getType() == OQLLexerTokenTypes.QUERY_PARAM) {      Object rgn;      CompiledBindArgument cba=(CompiledBindArgument)startVal;      if ((rgn=cba.evaluate(this)) instanceof Region) {        this.indpndtItrToRgnMap.put(itr,rgnPath=((Region)rgn).getFullPath());      }    }  }  this.itrDefToIndpndtRuntimeItrMap.put(itrDef,set);  IndexManager mgr=null;  if (set.size() == 1) {    if (itr == null) {      itr=(RuntimeIterator)set.iterator().next();      if (itr.getScopeID() == this.currentScope().getScopeID()) {        rgnPath=(String)this.indpndtItrToRgnMap.get(itr);      }    }    if (rgnPath != null) {      mgr=IndexUtils.getIndexManager(this.cache.getRegion(rgnPath),false);      if ((null == mgr) && (null != this.bukRgn)) {        mgr=IndexUtils.getIndexManager(this.cache.getRegion(this.bukRgn.getFullPath()),false);      }    }  }  String tempIndexID=null;  RuntimeIterator currItr=itrDef.getRuntimeIterator(this);  currItr.setIndexInternalID((mgr == null || (tempIndexID=mgr.getCanonicalizedIteratorName(itrDef.genFromClause(this))) == null) ? currItr.getInternalId() : tempIndexID);}  }
class C{  public HashMap createPRMessages(){  HashMap prMsgMap=new HashMap();  final EntryEventImpl event=getBaseEvent();  for (int i=0; i < putAllDataSize; i++) {    Integer bucketId=putAllData[i].bucketId;    PutAllPRMessage prMsg=(PutAllPRMessage)prMsgMap.get(bucketId);    if (prMsg == null) {      prMsg=new PutAllPRMessage(bucketId.intValue(),putAllDataSize,false,event.isPossibleDuplicate(),!event.isGenerateCallbacks(),event.getCallbackArgument());      prMsg.setTransactionDistributed(event.getRegion().getCache().getTxManager().isDistributed());      if (event.getContext() != null) {        prMsg.setBridgeContext(event.getContext());      }    }    putAllData[i].setFakeEventID();    prMsg.addEntry(putAllData[i]);    prMsgMap.put(bucketId,prMsg);  }  return prMsgMap;}  }
class C{  public void addOption(String option,String value){  this.options.put(option,value);}  }
class C{  public static boolean doubleArrayEquals(double[] x,double[] y,double tol){  for (int i=0; i < x.length; i+=1) {    if (x[i] == 0) {      return y[i] == 0;    }    if (Math.abs((y[i] - x[i]) / x[i]) > tol) {      return false;    }  }  return true;}  }
class C{  public BitSequence appended(int bit){  BitSequence bscopy=new BitSequence(this);  bscopy.append(bit);  return bscopy;}  }
class C{  public static MoreOptionsFragment newInstance(){  MoreOptionsFragment fragment=new MoreOptionsFragment();  return fragment;}  }
class C{  public OsmNetworkReaderWithPT(final Network network,final CoordinateTransformation transformation,final boolean useHighwayDefaults){  this.network=network;  this.transform=transformation;  if (useHighwayDefaults) {    log.info("Falling back to default values.");    this.setHighwayDefaults("motorway",2,120.0 / 3.6,1.0,2000,true);    this.setHighwayDefaults("motorway_link",1,80.0 / 3.6,1.0,1500,true);    this.setHighwayDefaults("trunk",1,80.0 / 3.6,1.0,2000);    this.setHighwayDefaults("trunk_link",1,50.0 / 3.6,1.0,1500);    this.setHighwayDefaults("primary",1,80.0 / 3.6,1.0,1500);    this.setHighwayDefaults("primary_link",1,60.0 / 3.6,1.0,1500);    this.setHighwayDefaults("secondary",1,60.0 / 3.6,1.0,1000);    this.setHighwayDefaults("tertiary",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults("minor",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults("unclassified",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults("residential",1,30.0 / 3.6,1.0,600);    this.setHighwayDefaults("living_street",1,15.0 / 3.6,1.0,300);    this.setRailwayDefaults("tram",1,80.0 / 3.6,1.0,100,true);    this.setPTFilter("bus");    this.setPTFilter("trolleybus");    this.setPTFilter("tram");  }}  }
class C{  public MapRequestFormatException(){  super();}  }
class C{  protected final void buildSourcePath(ArrayList<String> cp){  ClassLoader parent=getParent();  if (parent instanceof DynamicClassLoader) {    ((DynamicClassLoader)parent).buildSourcePath(cp);  } else {    cp.addAll(getClassPathList());  }  ArrayList<Loader> loaders=getLoaders();  for (int i=0; i < loaders.size(); i++) {    Loader loader=loaders.get(i);    loader.buildSourcePath(cp);  }}  }
class C{  @SuppressWarnings("unchecked") public String exportRecord(PO po,Integer ReplicationMode,String ReplicationType,Integer ReplicationEvent) throws Exception {  MClient client=MClient.get(po.getCtx(),m_AD_Client_ID);  log.info("Client = " + client.toString());  log.info("po.getAD_Org_ID() = " + po.getAD_Org_ID());  log.info("po.get_TrxName() = " + po.get_TrxName());  if (po.get_TrxName() == null || po.get_TrxName().equals("")) {    po.set_TrxName("exportRecord");  }  log.info("Table = " + po.get_TableName());  if (po.get_KeyColumns().length < 1) {    throw new Exception(Msg.getMsg(po.getCtx(),"ExportNoneColumnKeyNotSupported"));  }  String version="3.2.0";  MEXPFormat exportFormat=null;  exportFormat=MEXPFormat.getFormatByAD_Client_IDAD_Table_IDAndVersion(po.getCtx(),m_AD_Client_ID,po.get_Table_ID(),version,po.get_TrxName());  log.fine("exportFormat = " + exportFormat);  if (exportFormat == null || exportFormat.getEXP_Format_ID() == 0) {    MClient systemClient=MClient.get(po.getCtx(),0);    log.info(systemClient.toString());    exportFormat=MEXPFormat.getFormatByAD_Client_IDAD_Table_IDAndVersion(po.getCtx(),0,po.get_Table_ID(),version,po.get_TrxName());    if (exportFormat == null || exportFormat.getEXP_Format_ID() == 0) {      throw new Exception(Msg.getMsg(po.getCtx(),"EXPFormatNotFound"));    }  }  outDocument=createNewDocument();  HashMap<String,Integer> variableMap=new HashMap<String,Integer>();  Element rootElement=outDocument.createElement(exportFormat.getValue());  if (exportFormat.getDescription() != null && !"".equals(exportFormat.getDescription())) {    rootElement.appendChild(outDocument.createComment(exportFormat.getDescription()));  }  rootElement.setAttribute("AD_Client_Value",client.getValue());  rootElement.setAttribute("Version",exportFormat.getVersion());  rootElement.setAttribute("ReplicationMode",ReplicationMode.toString());  rootElement.setAttribute("ReplicationType",ReplicationType);  rootElement.setAttribute("ReplicationEvent",ReplicationEvent.toString());  outDocument.appendChild(rootElement);  generateExportFormat(rootElement,exportFormat,po,po.get_ID(),variableMap);  MEXPProcessor mExportProcessor=null;  mExportProcessor=new MEXPProcessor(po.getCtx(),m_rplStrategy.getEXP_Processor_ID(),po.get_TrxName());  log.fine("ExportProcessor = " + mExportProcessor);  int EXP_ProcessorType_ID=0;  EXP_ProcessorType_ID=mExportProcessor.getEXP_Processor_Type_ID();  MEXPProcessorType expProcessor_Type=new MEXPProcessorType(po.getCtx(),EXP_ProcessorType_ID,po.get_TrxName());  String javaClass=expProcessor_Type.getJavaClass();  try {    Class clazz=Class.forName(javaClass);    IExportProcessor exportProcessor=(IExportProcessor)clazz.newInstance();    exportProcessor.process(po.getCtx(),mExportProcessor,outDocument,Trx.get(po.get_TrxName(),false));  } catch (  Exception e) {    log.severe(e.toString());    throw e;  }  return outDocument.toString();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FlushFdrField[");  buffer.append("fldid = ").append(fldid);  buffer.append(", value = ").append(value);  buffer.append(", ctrlid = ").append(ctrlid);  buffer.append("]");  return buffer.toString();}  }
class C{  public static <S extends HasOkClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    OkClickEvent event=new OkClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  @Override protected void onProgressUpdate(String... strings){  super.onProgressUpdate(strings);  statusText.setText(strings[0]);}  }
class C{  static void processFullBaseBuffer(final HeapDoublesSketch sketch){  final int bbCount=sketch.getBaseBufferCount();  final int k=sketch.getK();  final long newN=sketch.getN();  assert bbCount == 2 * k;  maybeGrowLevels(newN,sketch);  final double[] baseBuffer=sketch.getCombinedBuffer();  Arrays.sort(baseBuffer,0,bbCount);  inPlacePropagateCarry(0,null,0,baseBuffer,0,true,sketch);  sketch.baseBufferCount_=0;  assert newN / (2 * k) == sketch.getBitPattern();}  }
class C{  public void addAdditionalPartyRole(String partyId,String roleTypeId){  List<String> parties=additionalPartyRole.get(roleTypeId);  if (parties != null) {    for (    String pi : parties) {      if (pi.equals(partyId)) {        return;      }    }  } else {    parties=new LinkedList<String>();    additionalPartyRole.put(roleTypeId,parties);  }  parties.add(0,partyId);}  }
class C{  public static String testMethod(Env env,int x,boolean y,String string,ObjectValue val){  return String.format("successfully called testMethod(%d,%b,%s,%s)",x,y,string,val.toString());}  }
class C{  public static int dpToPixels(Context context,int dp){  DisplayMetrics displayMetrics=context.getResources().getDisplayMetrics();  return Math.round(dp * (displayMetrics.xdpi / DisplayMetrics.DENSITY_DEFAULT));}  }
class C{  public void commit(){  return;}  }
class C{  public void fetchNextPage(){  throw new CacheException("Failed to fetch data from node: " + src);}  }
class C{  public DateDue(ICalDate dueDate){  super(dueDate);}  }
class C{  public MockContext withBaggageItem(String key,String val){  Map<String,String> newBaggage=new HashMap<>(this.baggage);  newBaggage.put(key,val);  return new MockContext(this.traceId,this.spanId,newBaggage);}  }
class C{  private String mergeDataWithCentral() throws Exception {  ProcessInfo pi=getProcessInfo();  RemoteMergeDataVO data=(RemoteMergeDataVO)pi.getSerializableObject();  log.info("mergeDataWithCentral Start (" + pi + ") "+ data);  RowSet sourceRS=data.CentralData;  if (sourceRS == null)   log.log(Level.SEVERE,"mergeDataWithCentral - No Data - " + data); else   if (!data.Test.booleanValue()) {    RowSet targetRS=ReplicationLocal.getRowSet(data.Sql,null);    Object result=doIt(ReplicationLocal.START,"sync",new Object[]{data.TableName,data.KeyColumns,sourceRS,targetRS,data.Test,Boolean.TRUE});    log.fine("receiveUpdateFromCentral - " + data.TableName + " - "+ result);    pi.setSerializableObject(null);    boolean replicated=ReplicationLocal.isReplicated(result);    if (!replicated)     pi.setError(true);    if (result != null)     pi.addLog(0,null,null,result.toString());    if (Boolean.FALSE.equals(result))     throw new Exception("receiveUpdateFromCentral - " + data.TableName + " - "+ result);  }  RowSet rowset=ReplicationLocal.getRowSet(data.Sql,null);  pi.setSerializableObject((Serializable)rowset);  log.info("mergeDataWithCentral End (" + pi + ") "+ data);  return "Remote MergeDataWithCentral - " + data.TableName;}  }
class C{  private void outputCampaigns(Properties ctx,PrintWriter out,int campaignID,boolean includeAny){  out.println("<campaigns>");  if (includeAny) {    out.println("<campaign id='-1'");    if (campaignID == 0)     out.println(" selected='selected'");    out.println(">ANY</campaign>");  }  out.println("<campaign id='1'>Rose Festival</campaign>");  out.println("</campaigns>");}  }
class C{  public boolean isConverted(){  return m_converted;}  }
class C{  public static long tick2microsecond(Sequence seq,long tick,TempoCache cache){  if (seq.getDivisionType() != Sequence.PPQ) {    double seconds=((double)tick / (double)(seq.getDivisionType() * seq.getResolution()));    return (long)(1000000 * seconds);  }  if (cache == null) {    cache=new TempoCache(seq);  }  int resolution=seq.getResolution();  long[] ticks=cache.ticks;  int[] tempos=cache.tempos;  int cacheCount=tempos.length;  int snapshotIndex=cache.snapshotIndex;  int snapshotMicro=cache.snapshotMicro;  long us=0;  if (snapshotIndex <= 0 || snapshotIndex >= cacheCount || ticks[snapshotIndex] > tick) {    snapshotMicro=0;    snapshotIndex=0;  }  if (cacheCount > 0) {    int i=snapshotIndex + 1;    while (i < cacheCount && ticks[i] <= tick) {      snapshotMicro+=ticks2microsec(ticks[i] - ticks[i - 1],tempos[i - 1],resolution);      snapshotIndex=i;      i++;    }    us=snapshotMicro + ticks2microsec(tick - ticks[snapshotIndex],tempos[snapshotIndex],resolution);  }  cache.snapshotIndex=snapshotIndex;  cache.snapshotMicro=snapshotMicro;  return us;}  }
class C{  void finish(DownloadRequest request){synchronized (currentRequests) {    currentRequests.remove(request);  }}  }
class C{  @After public void tearDown() throws Exception {  this.cache.close();  this.system.disconnect();}  }
class C{  private void zkInit() throws Exception {  form.setWidth("99%");  form.setHeight("100%");  form.setStyle("position: absolute; padding: 0; margin: 0");  form.appendChild(mainLayout);  mainLayout.setWidth("100%");  mainLayout.setHeight("100%");  mainLayout.setStyle("position: absolute");  labelProcess.setText(Msg.translate(Env.getCtx(),"HR_Process_ID"));  fieldProcess.addActionListener(this);  labelBPartner.setText(Msg.translate(Env.getCtx(),"C_BPartner_ID"));  fieldEmployee.addActionListener(this);  labelValidFrom.setText(Msg.translate(Env.getCtx(),"Date"));  fieldValidFrom.addValueChangeListener(this);  labelConcept.setText(Msg.translate(Env.getCtx(),"HR_Concept_ID"));  fieldConcept.addActionListener(this);  labelColumnType.setText(Msg.translate(Env.getCtx(),"ColumnType"));  labelDescription.setText(Msg.translate(Env.getCtx(),"Description"));  fieldDate.setVisible(false);  fieldDate.addValueChangeListener(this);  fieldQty.setVisible(false);  fieldQty.addValueChangeListener(this);  fieldAmount.setVisible(false);  fieldAmount.addValueChangeListener(this);  fieldText.setVisible(false);  fieldText.addValueChangeListener(this);  fieldDescription.addValueChangeListener(this);  bOk.setLabel(Msg.getMsg(Env.getCtx(),"Process"));  bOk.addActionListener(this);  North north=new North();  north.setStyle("border: none");  mainLayout.appendChild(north);  north.appendChild(parameterPanel);  Rows rows=new Rows();  rows.setParent(parameterPanel);  Row row=rows.newRow();  row.appendChild(labelProcess.rightAlign());  row.appendChild(fieldProcess);  fieldProcess.setWidth("100%");  row.appendChild(labelBPartner.rightAlign());  row.appendChild(fieldEmployee);  fieldEmployee.setWidth("100%");  row=rows.newRow();  row.appendChild(labelValidFrom.rightAlign());  row.appendChild(fieldValidFrom.getComponent());  row.appendChild(labelConcept.rightAlign());  row.appendChild(fieldConcept);  fieldConcept.setWidth("100%");  row=rows.newRow();  row.appendChild(labelColumnType.rightAlign());  row.appendChild(fieldDate.getComponent());  row.appendChild(fieldQty.getComponent());  row.appendChild(fieldAmount.getComponent());  row.appendChild(fieldText.getComponent());  row=rows.newRow();  row.appendChild(labelDescription.rightAlign());  row.appendChild(fieldDescription.getComponent());  row.appendChild(new Space());  row.appendChild(bOk);  Center center=new Center();  center.setFlex(true);  center.appendChild(miniTable);  mainLayout.appendChild(center);  miniTable.setVflex(true);  miniTable.setFixedLayout(true);  miniTable.setWidth("99%");  miniTable.setHeight("99%");  configureMiniTable();}  }
class C{  static private void preReadSavedConfigandInit(File dataHome){  File lockFile=new File(dataHome,"DATA/yacy.running");  final String conf="DATA/SETTINGS/yacy.conf";  File configFile=new File(dataHome,conf);  if (configFile.exists()) {    Properties p=new Properties();    try {      FileInputStream fis=new FileInputStream(configFile);      p.load(fis);      fis.close();      String teststr=p.getProperty("serverClient","*");      if (!teststr.equals("*")) {        System.setProperty("java.net.preferIPv6Addresses","false");        System.setProperty("java.net.preferIPv4Stack","true");        teststr=System.getProperty("java.net.preferIPv4Stack");        System.out.println("set system property java.net.preferIP4Stack=" + teststr);      }      if (lockFile.exists()) {        System.out.println("WARNING: the file " + lockFile + " exists, this usually means that a YaCy instance is still running. If you want to restart YaCy, try first ./stopYACY.sh, then ./startYACY.sh. If ./stopYACY.sh fails, try ./killYACY.sh");        int port=Integer.parseInt(p.getProperty("port","8090"));        if (TimeoutRequest.ping("127.0.0.1",port,1000)) {          Browser.openBrowser("http://localhost:" + port + "/"+ p.getProperty(SwitchboardConstants.BROWSER_POP_UP_PAGE,"index.html"));          System.out.println("WARNING: YaCy instance was still running; just opening the browser and exit.");          System.exit(0);        } else {          System.err.println("INFO: delete old yacy.running file; likely previous YaCy session was not orderly shutdown!");          delete(lockFile);        }      }    } catch (    IOException ex) {      System.err.println("ERROR: config file seems to be corrupt");      System.err.println("ERROR: if problem persists, delete file");      System.err.println(configFile.getAbsolutePath());      ConcurrentLog.logException(ex);      ConcurrentLog.severe("Startup","cannot read " + configFile.toString() + ", please delete the corrupted file if problem persits");    }  }}  }
class C{  public CRefreshAction(final JFrame parent,final IFrontEndDebuggerProvider debugPerspectiveModel,final IRefreshRangeProvider rangeProvider,final IRefreshRangeProvider stackRangeProvider){  Preconditions.checkNotNull(parent,"IE01448: Parent argument can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE01449: Debug perspective model argument can not be null");  m_parent=parent;  m_debugPerspectiveModel=debugPerspectiveModel;  m_rangeProvider=rangeProvider;  m_stackRangeProvider=stackRangeProvider;  putValue(Action.SMALL_ICON,new ImageIcon(CMain.class.getResource("data/memoryupdate_up.jpg")));  putValue(Action.SHORT_DESCRIPTION,"Refresh Memory");}  }
class C{  public final boolean[] signature(final SparseIntegerVector vector){  boolean[] sig=new boolean[this.hyperplanes.length];  for (int i=0; i < this.hyperplanes.length; i++) {    sig[i]=(vector.dotProduct(this.hyperplanes[i]) >= 0);  }  return sig;}  }
class C{  public boolean isBorderAnimation(){  return isBorderAnimation;}  }
class C{  public void visitTryCatchBlock(Label start,Label end,Label handler,String type){  if (mv != null) {    mv.visitTryCatchBlock(start,end,handler,type);  }}  }
class C{  public static GapPolicy parse(SearchContext context,String text,XContentLocation tokenLocation){  GapPolicy result=null;  for (  GapPolicy policy : values()) {    if (context.parseFieldMatcher().match(text,policy.parseField)) {      if (result == null) {        result=policy;      } else {        throw new IllegalStateException("Text can be parsed to 2 different gap policies: text=[" + text + "], "+ "policies="+ Arrays.asList(result,policy));      }    }  }  if (result == null) {    final List<String> validNames=new ArrayList<>();    for (    GapPolicy policy : values()) {      validNames.add(policy.getName());    }    throw new SearchParseException(context,"Invalid gap policy: [" + text + "], accepted values: "+ validNames,tokenLocation);  }  return result;}  }
class C{  public void createConsistencyGroup(String cgName,String clusterName,boolean isDistributed) throws VPlexApiException {  s_logger.info("Request to create consistency group on VPlex at {}",_baseURI);  _cgMgr.createConsistencyGroup(cgName,clusterName,isDistributed);}  }
class C{  public Object clone(){  StyledEditorKit o=(StyledEditorKit)super.clone();  o.currentRun=o.currentParagraph=null;  o.createInputAttributeUpdated();  o.createInputAttributes();  return o;}  }
class C{  private void populateProviders(Element controlNode){  includesProviders=true;  for (  Provider provider : Context.getProviderService().getAllProviders()) {    Integer providerId=provider.getId();    addSelectOption(controlNode,customizer.getLabel(provider),providerId.toString());  }}  }
class C{  public void paintScrollBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  private void jbInit() throws Exception {  CompiereColor.setBackground(this);  bFile.setText(Msg.getMsg(Env.getCtx(),"FileImportFile"));  bFile.setToolTipText(Msg.getMsg(Env.getCtx(),"FileImportFileInfo"));  bFile.addActionListener(this);  fCharset.setToolTipText(Msg.getMsg(Env.getCtx(),"Charset",false));  info.setText("   ");  labelFormat.setText(Msg.translate(Env.getCtx(),"AD_ImpFormat_ID"));  bNext.setToolTipText(Msg.getMsg(Env.getCtx(),"Next"));  bNext.setMargin(new Insets(2,2,2,2));  bNext.setText(">");  bNext.addActionListener(this);  record.setText("------");  bPrevious.setToolTipText(Msg.getMsg(Env.getCtx(),"Previous"));  bPrevious.setMargin(new Insets(2,2,2,2));  bPrevious.setText("<");  bPrevious.addActionListener(this);  northPanel.setBorder(BorderFactory.createEtchedBorder());  northPanel.add(bFile,null);  northPanel.add(fCharset);  northPanel.add(info,null);  northPanel.add(labelFormat,null);  northPanel.add(pickFormat,null);  northPanel.add(bPrevious,null);  northPanel.add(record,null);  northPanel.add(bNext,null);  centerPanel.setLayout(centerLayout);  rawData.setFont(new java.awt.Font("Monospaced",0,10));  rawData.setColumns(80);  rawData.setRows(MAX_SHOWN_LINES);  rawDataPane.getViewport().add(rawData,null);  centerPanel.add(rawDataPane,BorderLayout.CENTER);  centerPanel.add(previewPane,BorderLayout.SOUTH);  previewPanel.setLayout(previewLayout);  previewPane.getViewport().add(previewPanel,null);  previewPane.setPreferredSize(new Dimension(700,80));  confirmPanel.addActionListener(this);}  }
class C{  protected OSXAdapter(String proxySignature,ActionListener handler){  this.proxySignature=proxySignature;  this.targetAction=handler;}  }
class C{  public boolean lessThan(DMatch it){  return distance < it.distance;}  }
class C{  public static TopologyBuilder build(String zookeeperUrl,String brokerUrl,String sensorType,SpoutConfig.Offset offset,int spoutParallelism,int spoutNumTasks,int parserParallelism,int parserNumTasks,int invalidWriterParallelism,int invalidWriterNumTasks,int errorWriterParallelism,int errorWriterNumTasks,EnumMap<SpoutConfigOptions,Object> kafkaSpoutConfig) throws Exception {  ParserConfigurations configs=new ParserConfigurations();  SensorParserConfig parserConfig=getSensorParserConfig(zookeeperUrl,sensorType,configs);  TopologyBuilder builder=new TopologyBuilder();  KafkaSpout kafkaSpout=createKafkaSpout(zookeeperUrl,sensorType,offset,kafkaSpoutConfig,parserConfig);  builder.setSpout("kafkaSpout",kafkaSpout,spoutParallelism).setNumTasks(spoutNumTasks);  ParserBolt parserBolt=createParserBolt(zookeeperUrl,brokerUrl,sensorType,configs,parserConfig);  builder.setBolt("parserBolt",parserBolt,parserParallelism).setNumTasks(parserNumTasks).shuffleGrouping("kafkaSpout");  if (errorWriterNumTasks > 0) {    WriterBolt errorBolt=createErrorBolt(brokerUrl,sensorType,configs,parserConfig);    builder.setBolt("errorMessageWriter",errorBolt,errorWriterParallelism).setNumTasks(errorWriterNumTasks).shuffleGrouping("parserBolt",Constants.ERROR_STREAM);  }  if (invalidWriterNumTasks > 0) {    WriterBolt invalidBolt=createInvalidBolt(brokerUrl,sensorType,configs,parserConfig);    builder.setBolt("invalidMessageWriter",invalidBolt,invalidWriterParallelism).setNumTasks(invalidWriterNumTasks).shuffleGrouping("parserBolt",Constants.INVALID_STREAM);  }  return builder;}  }
class C{  protected void receiveBoard(Packet c){  Board newBoard=(Board)c.getObject(0);  game.setBoard(newBoard);}  }
class C{  static void generateNetwork(final Scenario scenario,String fromCrs,String toCrs,String osmFile,boolean cleanNetwork){  generateNetwork(scenario,fromCrs,toCrs,osmFile,cleanNetwork,null);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void estimateCPTs(BayesNet bayesNet) throws Exception {  initCPTs(bayesNet);  Instances instances=bayesNet.m_Instances;  for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {    if (bayesNet.getParentSet(iAttribute).getNrOfParents() > 1) {      throw new Exception("Cannot handle networks with nodes with more than 1 parent (yet).");    }  }  BayesNet EmptyNet=new BayesNet();  K2 oSearchAlgorithm=new K2();  oSearchAlgorithm.setInitAsNaiveBayes(false);  oSearchAlgorithm.setMaxNrOfParents(0);  EmptyNet.setSearchAlgorithm(oSearchAlgorithm);  EmptyNet.buildClassifier(instances);  BayesNet NBNet=new BayesNet();  oSearchAlgorithm.setInitAsNaiveBayes(true);  oSearchAlgorithm.setMaxNrOfParents(1);  NBNet.setSearchAlgorithm(oSearchAlgorithm);  NBNet.buildClassifier(instances);  for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {    if (iAttribute != instances.classIndex()) {      double w1=0.0, w2=0.0;      int nAttValues=instances.attribute(iAttribute).numValues();      if (m_bUseK2Prior == true) {        for (int iAttValue=0; iAttValue < nAttValues; iAttValue++) {          w1+=Statistics.lnGamma(1 + ((DiscreteEstimatorBayes)EmptyNet.m_Distributions[iAttribute][0]).getCount(iAttValue)) - Statistics.lnGamma(1);        }        w1+=Statistics.lnGamma(nAttValues) - Statistics.lnGamma(nAttValues + instances.numInstances());        for (int iParent=0; iParent < bayesNet.getParentSet(iAttribute).getCardinalityOfParents(); iParent++) {          int nTotal=0;          for (int iAttValue=0; iAttValue < nAttValues; iAttValue++) {            double nCount=((DiscreteEstimatorBayes)NBNet.m_Distributions[iAttribute][iParent]).getCount(iAttValue);            w2+=Statistics.lnGamma(1 + nCount) - Statistics.lnGamma(1);            nTotal+=nCount;          }          w2+=Statistics.lnGamma(nAttValues) - Statistics.lnGamma(nAttValues + nTotal);        }      } else {        for (int iAttValue=0; iAttValue < nAttValues; iAttValue++) {          w1+=Statistics.lnGamma(1.0 / nAttValues + ((DiscreteEstimatorBayes)EmptyNet.m_Distributions[iAttribute][0]).getCount(iAttValue)) - Statistics.lnGamma(1.0 / nAttValues);        }        w1+=Statistics.lnGamma(1) - Statistics.lnGamma(1 + instances.numInstances());        int nParentValues=bayesNet.getParentSet(iAttribute).getCardinalityOfParents();        for (int iParent=0; iParent < nParentValues; iParent++) {          int nTotal=0;          for (int iAttValue=0; iAttValue < nAttValues; iAttValue++) {            double nCount=((DiscreteEstimatorBayes)NBNet.m_Distributions[iAttribute][iParent]).getCount(iAttValue);            w2+=Statistics.lnGamma(1.0 / (nAttValues * nParentValues) + nCount) - Statistics.lnGamma(1.0 / (nAttValues * nParentValues));            nTotal+=nCount;          }          w2+=Statistics.lnGamma(1) - Statistics.lnGamma(1 + nTotal);        }      }      if (w1 < w2) {        w2=w2 - w1;        w1=0;        w1=1 / (1 + Math.exp(w2));        w2=Math.exp(w2) / (1 + Math.exp(w2));      } else {        w1=w1 - w2;        w2=0;        w2=1 / (1 + Math.exp(w1));        w1=Math.exp(w1) / (1 + Math.exp(w1));      }      for (int iParent=0; iParent < bayesNet.getParentSet(iAttribute).getCardinalityOfParents(); iParent++) {        bayesNet.m_Distributions[iAttribute][iParent]=new DiscreteEstimatorFullBayes(instances.attribute(iAttribute).numValues(),w1,w2,(DiscreteEstimatorBayes)EmptyNet.m_Distributions[iAttribute][0],(DiscreteEstimatorBayes)NBNet.m_Distributions[iAttribute][iParent],m_fAlpha);      }    }  }  int iAttribute=instances.classIndex();  bayesNet.m_Distributions[iAttribute][0]=EmptyNet.m_Distributions[iAttribute][0];}  }
class C{  public TableEntry(String counter,String protocol,String token,IHttpRequestResponsePersisted requestResponse,IBurpExtenderCallbacks callbacks){  this.callbacks=callbacks;  this.helpers=callbacks.getHelpers();  this.counter=counter;  this.protocol=protocol;  this.host=helpers.analyzeRequest(requestResponse).getUrl().getHost();  this.method=helpers.analyzeRequest(requestResponse).getMethod();  this.url=helpers.analyzeRequest(requestResponse).getUrl().getPath();  this.token=token;  LocalTime t=LocalTime.now();  this.timestamp=t;  this.time=t.toString().substring(0,t.toString().length() - 2);  this.length=(new Integer(requestResponse.getResponse().length)).toString();  this.comment=requestResponse.getComment();  this.fullMessage=requestResponse;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public boolean hasEntry(){  return super.hasElement(RecurrenceExceptionEntry.KEY);}  }
class C{  public DocumentAdapter(IOpenable owner,IFile file){  fOwner=owner;  fFile=file;  fPath=fFile.getFullPath();  initialize();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGenPackage.GENERATOR_CONFIGURATION__CONFIGURATIONS:    getConfigurations().clear();  getConfigurations().addAll((Collection<? extends FeatureConfiguration>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private String buildBooleanStatus(boolean state){  if (state) {    return "open";  }  return "closed";}  }
class C{  public int storeValue(Value value) throws IOException {  boolean isOwnValue=isOwnValue(value);  if (isOwnValue) {    NativeValue nativeValue=(NativeValue)value;    if (revisionIsCurrent(nativeValue)) {      int id=nativeValue.getInternalID();      if (id != NativeValue.UNKNOWN_ID) {        return id;      }    }  }  Integer cachedID=valueIDCache.get(value);  if (cachedID != null) {    int id=cachedID.intValue();    if (isOwnValue) {      ((NativeValue)value).setInternalID(id,revision);    }    return id;  }  byte[] valueData=value2data(value,true);  int id=dataStore.storeData(valueData);  NativeValue nv=isOwnValue ? (NativeValue)value : getNativeValue(value);  nv.setInternalID(id,revision);  valueIDCache.put(nv,new Integer(id));  return id;}  }
class C{  public boolean read() throws FileReadException {  boolean notFound=false;  try {    properties.getProperties().loadFromXML(new FileInputStream(filename));  } catch (  final FileNotFoundException e) {    notFound=true;  }catch (  final IOException e) {    throw new FileReadException(e);  }  generalSettings.load(properties);  for (int i=0; i < properties.getInteger(DATABASES_COUNT,DATABASES_COUNT_DEFAULT); i++) {    final DatabaseConfigItem database=new DatabaseConfigItem();    database.loadWithKeyPrefix(properties,DATABASES_PREFIX + i + ".");    databases.add(database);  }  callGraphSettings.loadWithKeyPrefix(properties,"CallGraphSettings.");  flowGraphSettings.loadWithKeyPrefix(properties,"FlowGraphSettings.");  colors.loadWithKeyPrefix(properties,"Colors.");  debuggerColors.loadWithKeyPrefix(properties,"Debugger.Colors.");  if (notFound) {    flowGraphSettings.setDefaultGraphLayout(1);    flowGraphSettings.setProximityBrowsingThreshold(50);    flowGraphSettings.setAutoLayoutDeactivationThreshold(70);    flowGraphSettings.setLayoutCalculationThreshold(250);    return false;  }  return true;}  }
class C{  public Tab addItem(Item item){  mItems.add(item);  return this;}  }
class C{  public void ignoreBytestreamRequestOnce(String sessionID){  this.ignoredBytestreamRequests.add(sessionID);}  }
class C{  public void uninstallAll(){  PivotTracingCommand.Builder b=PivotTracingCommand.newBuilder();  b.getUpdateBuilder().setRemoveAll(true);  PubSub.publish(PivotTracingConfig.COMMANDS_TOPIC,b.build());  installedQueries.clear();  if (resultsSubscriber != null) {    resultsSubscriber.unsubscribeAll();  }}  }
class C{  private JMenuItem createMenuItem(Action action){  JMenuItem menuItem=new JMenuItem(action);  return menuItem;}  }
class C{  @Override public void clear(){  Arrays.fill(elements,null);  size=0;}  }
class C{  public LessGlobalConstraint(NumberParameter<?,T> first,NumberParameter<?,T> second){  this.first=first;  this.second=second;}  }
class C{  public void writeField(final String name,final double value) throws java.io.IOException {  writeField(name,Double.toString(value));}  }
class C{  protected void updateSelectionPositions(){  if (mHasSelectedDay) {    int selectedPosition=mSelectedDay - mWeekStart;    if (selectedPosition < 0) {      selectedPosition+=7;    }    mSelectedLeft=selectedPosition * (mWidth - mPadding * 2) / mNumCells + mPadding;    mSelectedRight=(selectedPosition + 1) * (mWidth - mPadding * 2) / mNumCells + mPadding;  }}  }
class C{  public static final boolean isLetter(char ch){  return (ch <= 'z') && (dataTable[ch] & LETTER_MASK) > 0;}  }
class C{  public static String left(String str,int count){  if (str == null) {    return null;  }  if (str.length() < count) {    return str;  }  return str.substring(0,count);}  }
class C{  public void destroy(Contextual contextual){  String scopeId=(String)request.getAttribute(SCOPE_ID);  if (null != scopeId) {    HttpSession session=request.getSession();    if (contextual instanceof PassivationCapable == false) {      throw new RuntimeException("Unexpected type for contextual");    }    PassivationCapable pc=(PassivationCapable)contextual;    final String sessionKey=SCOPE_ID + "-" + scopeId;    Map<String,Object> scopeMap=(Map<String,Object>)session.getAttribute(sessionKey);    if (null != scopeMap) {      Object instance=scopeMap.get(INSTANCE + pc.getId());      CreationalContext<?> creational=(CreationalContext<?>)scopeMap.get(CREATIONAL + pc.getId());      if (null != instance && null != creational) {        contextual.destroy(instance,creational);        creational.release();      }    }  }}  }
class C{  public static double pareto(){  return pareto(1.0);}  }
class C{  public static double[] scalarMul(double scalar,double[] x){  double[] val=new double[x.length];  for (int i=0; i < x.length; i++)   val[i]=x[i] * scalar;  return val;}  }
class C{  void checkExpired(int expected){  checkEventCount(expected,expiredListenerFiredCount);}  }
class C{  protected String findMappedName(String name){  return params.get(MAP_PREFIX + name,name);}  }
class C{  public void inviteParticipants(Set<ContactId> contacts) throws PayloadException, NetworkException {  try {    int nbrOfContacts=contacts.size();    if (sLogger.isActivated()) {      sLogger.debug("Add " + nbrOfContacts + " participants to the session");    }    updateParticipants(contacts,ParticipantStatus.INVITING);    SessionAuthenticationAgent authenticationAgent=getAuthenticationAgent();    getDialogPath().incrementCseq();    if (sLogger.isActivated()) {      sLogger.debug("Send REFER");    }    SipRequest refer;    if (nbrOfContacts == 1) {      Uri singleContact=PhoneUtils.formatContactIdToUri(contacts.iterator().next());      refer=SipMessageFactory.createRefer(getDialogPath(),singleContact,getSubject(),getContributionID());    } else {      refer=SipMessageFactory.createRefer(getDialogPath(),contacts,getSubject(),getContributionID());    }    SipTransactionContext ctx=mImsModule.getSipManager().sendSubsequentRequest(getDialogPath(),refer);    int statusCode=ctx.getStatusCode();    if (statusCode == 407) {      if (sLogger.isActivated()) {        sLogger.debug("407 response received");      }      authenticationAgent.readProxyAuthenticateHeader(ctx.getSipResponse());      getDialogPath().incrementCseq();      if (sLogger.isActivated()) {        sLogger.info("Send second REFER");      }      if (nbrOfContacts == 1) {        Uri singleContact=PhoneUtils.formatContactIdToUri(contacts.iterator().next());        refer=SipMessageFactory.createRefer(getDialogPath(),singleContact,getSubject(),getContributionID());      } else {        refer=SipMessageFactory.createRefer(getDialogPath(),contacts,getSubject(),getContributionID());      }      authenticationAgent.setProxyAuthorizationHeader(refer);      ctx=mImsModule.getSipManager().sendSubsequentRequest(getDialogPath(),refer);      statusCode=ctx.getStatusCode();      if ((statusCode >= 200) && (statusCode < 300)) {        if (sLogger.isActivated()) {          sLogger.debug("20x OK response received");        }        updateParticipants(contacts,ParticipantStatus.INVITED);      } else {        if (sLogger.isActivated()) {          sLogger.debug("REFER has failed (" + statusCode + ")");        }        updateParticipants(contacts,ParticipantStatus.FAILED);      }    } else     if ((statusCode >= 200) && (statusCode < 300)) {      if (sLogger.isActivated()) {        sLogger.debug("20x OK response received");      }      updateParticipants(contacts,ParticipantStatus.INVITED);    } else {      if (sLogger.isActivated()) {        sLogger.debug("No response received");      }      updateParticipants(contacts,ParticipantStatus.FAILED);    }  } catch (  InvalidArgumentException|ParseException e) {    throw new PayloadException("REFER request has failed for contacts : " + contacts,e);  }}  }
class C{  public ParseException(Exception e){  this(e.toString(),e);}  }
class C{  public void config(String msg,Object... params){  log(Level.CONFIG,msg,params);}  }
class C{  private void handleUpdateWidgets(Intent intent){  AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(this);  int appWidgetIds[];  if (intent.hasExtra(EXTRA_APPWIDGET_ID)) {    appWidgetIds=new int[]{intent.getIntExtra(EXTRA_APPWIDGET_ID,-1)};  } else {    appWidgetIds=appWidgetManager.getAppWidgetIds(new ComponentName(this,WidgetProvider.class));  }  StringBuilder sb=new StringBuilder();  for (  int appWidgetId : appWidgetIds) {    sb.append(appWidgetId).append(" ");  }  LOGD(TAG,"Rendering widgets with appWidgetId(s): " + sb);  WidgetRenderer.renderWidgets(this,appWidgetIds);}  }
class C{  public void flushReplace(){}  }
class C{  private boolean compareDeprecatedComment(Javadoc first,Javadoc second){  if (first.getAST().apiLevel == AST.JLS2_INTERNAL) {    return safeEquals(first.getComment(),second.getComment());  } else {    return true;  }}  }
class C{  public View findNearestTouchable(ViewGroup root,int x,int y,int direction,int[] deltas){  ArrayList<View> touchables=root.getTouchables();  int minDistance=Integer.MAX_VALUE;  View closest=null;  int numTouchables=touchables.size();  int edgeSlop=ViewConfiguration.get(root.mContext).getScaledEdgeSlop();  Rect closestBounds=new Rect();  Rect touchableBounds=mOtherRect;  for (int i=0; i < numTouchables; i++) {    View touchable=touchables.get(i);    touchable.getDrawingRect(touchableBounds);    root.offsetRectBetweenParentAndChild(touchable,touchableBounds,true,true);    if (!isTouchCandidate(x,y,touchableBounds,direction)) {      continue;    }    int distance=Integer.MAX_VALUE;switch (direction) {case View.FOCUS_LEFT:      distance=x - touchableBounds.right + 1;    break;case View.FOCUS_RIGHT:  distance=touchableBounds.left;break;case View.FOCUS_UP:distance=y - touchableBounds.bottom + 1;break;case View.FOCUS_DOWN:distance=touchableBounds.top;break;}if (distance < edgeSlop) {if (closest == null || closestBounds.contains(touchableBounds) || (!touchableBounds.contains(closestBounds) && distance < minDistance)) {minDistance=distance;closest=touchable;closestBounds.set(touchableBounds);switch (direction) {case View.FOCUS_LEFT:deltas[0]=-distance;break;case View.FOCUS_RIGHT:deltas[0]=distance;break;case View.FOCUS_UP:deltas[1]=-distance;break;case View.FOCUS_DOWN:deltas[1]=distance;break;}}}}return closest;}  }
class C{  public void testmodInverseNonInvertible(){  byte aBytes[]={-15,24,123,56,-11,-112,-34,-98,8,10,12,14,25,125,-15,28,-127};  byte mBytes[]={-12,1,0,0,0,23,44,55,66};  int aSign=1;  int mSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  try {    aNumber.modInverse(modulus);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  public void sort(){  Arrays.sort(_data,0,_pos);}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  public SimpleString(String s){  this.chars=s.toCharArray();}  }
class C{  private void init(){  home=new Coord(150.,500.);  work=new Coord(900.,100.);  pt1a=new Coord(200.,550.);  pt1b=new Coord(200.,900.);  pt2a=new Coord(100.,450.);  pt2b=new Coord(900.,450.);  pt3a=new Coord(150.,420.);  pt3b=new Coord(880.,100.);  double minX=0.;  double maxX=1000.;  double minY=0.;  double maxY=1000.;  qTree=new QuadTree<String>(minX,minY,maxX,maxY);  qTree.put(pt1a.getX(),pt1a.getY(),"pt1a");  qTree.put(pt1b.getX(),pt1b.getY(),"pt1b");  qTree.put(pt2a.getX(),pt2a.getY(),"pt2a");  qTree.put(pt2b.getX(),pt2b.getY(),"pt2b");  qTree.put(pt3a.getX(),pt3a.getY(),"pt3a");  qTree.put(pt3b.getX(),pt3b.getY(),"pt3b");}  }
class C{  private void writeFiltersFile(){  Writer writer=null;  try {    FileOutputStream outputStream=new FileOutputStream(mavenDependenciesFiltersFile);    writer=new OutputStreamWriter(outputStream,StandardCharsets.ISO_8859_1);    allProperties.store(writer,null);  } catch (  FileNotFoundException e) {    throw new BuildException("Can't find file: '" + mavenDependenciesFiltersFile.getPath() + "'",e);  }catch (  IOException e) {    throw new BuildException("Exception writing out '" + mavenDependenciesFiltersFile.getPath() + "'",e);  } finally {    if (null != writer) {      try {        writer.close();      } catch (      IOException e) {      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.613 -0500",hash_original_method="1AE5BF6F5B5937D7D318302FFD2D6934",hash_generated_method="2017076DD1149CD12BD726DA5A426F75") public int match(final AuthScope that){  int factor=0;  if (LangUtils.equals(this.scheme,that.scheme)) {    factor+=1;  } else {    if (this.scheme != ANY_SCHEME && that.scheme != ANY_SCHEME) {      return -1;    }  }  if (LangUtils.equals(this.realm,that.realm)) {    factor+=2;  } else {    if (this.realm != ANY_REALM && that.realm != ANY_REALM) {      return -1;    }  }  if (this.port == that.port) {    factor+=4;  } else {    if (this.port != ANY_PORT && that.port != ANY_PORT) {      return -1;    }  }  if (LangUtils.equals(this.host,that.host)) {    factor+=8;  } else {    if (this.host != ANY_HOST && that.host != ANY_HOST) {      return -1;    }  }  return factor;}  }
class C{  public static <K,V>ConstantMap<K,V> of(Collection<? extends Entry<? extends K,? extends V>> entries){  return ConstantMap.of(Order.DEFAULT,entries);}  }
class C{  protected void writeCentralFileHeader(ZipArchiveEntry ze) throws IOException {  final byte[] centralHeader=getCentralFileHeader(ze);  writeOut(centralHeader);  written+=centralHeader.length;}  }
class C{  protected NodeLayout(TreeNode node){  if (node == null) {    String message=Logging.getMessage("nullValue.TreeNodeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.node=node;  this.drawPoint=new Point();}  }
class C{  public HashBindingSet(){  current=new LinkedHashMap<IVariable,IConstant>();}  }
class C{  public UnsupportedQueryLanguageException(String msg){  super(msg);}  }
class C{  public void testBug42253() throws Exception {  this.rs=this.stmt.executeQuery("select '\\'\\'','{t\\'}'");  this.rs.next();  assertEquals("''",this.rs.getString(1));  assertEquals("{t'}",this.rs.getString(2));}  }
class C{  public void addCommandToOverflowMenu(Command cmd){  checkIfInitialized();  if (overflowCommands == null) {    overflowCommands=new Vector<Command>();  }  overflowCommands.add(cmd);  sideMenu.installRightCommands();}  }
class C{  public void loadThis(){  if ((access & Opcodes.ACC_STATIC) != 0) {    throw new IllegalStateException("no 'this' pointer within static method");  }  mv.visitVarInsn(Opcodes.ALOAD,0);}  }
class C{  public Interpolation(SpatialGrid sg,final int method,final double exp){  this.sg=sg;  this.interpolationMethod=method;  this.exp=exp;  if (this.interpolationMethod == BILINEAR) {    log.info("Preparing bilinear interpolation ...");    this.biLinearInterpolator=new BiLinearInterpolator(this.sg);  }  if (this.interpolationMethod == BICUBIC) {    log.info("Preparing bicubic interpolation ...");    this.biCubicInterpolator=new BiCubicInterpolator(this.sg);  }  if (this.interpolationMethod == INVERSE_DISTANCE_WEIGHTING) {    log.info("Preparing interpolation with the inverse distance weighting method ...");    this.inverseDistanceWeighting=new InverseDistanceWeighting(this.sg);  }}  }
class C{  protected AnimatableAngleOrIdentValue(AnimationTarget target){  super(target);}  }
class C{  private static boolean isVersionBelow(String prop,double maxVer){  try {    String v=System.getProperty(prop);    if (v != null) {      double d=Double.parseDouble(v);      if (d < maxVer) {        return true;      }    }  } catch (  Exception ignore) {  }  return false;}  }
class C{  void addHeaders(Map<String,String> headers){  if (headers == null) {    return;  }  Entry<String,String> entry;  Iterator<Entry<String,String>> i=headers.entrySet().iterator();  while (i.hasNext()) {    entry=i.next();    addHeader(entry.getKey(),entry.getValue());  }}  }
class C{  private static boolean shouldParkAfterFailedAcquire(Node pred,Node node){  int ws=pred.waitStatus;  if (ws == Node.SIGNAL)   return true;  if (ws > 0) {    do {      node.prev=pred=pred.prev;    } while (pred.waitStatus > 0);    pred.next=node;  } else {    compareAndSetWaitStatus(pred,ws,Node.SIGNAL);  }  return false;}  }
class C{  public void think(Vertex vertex,int levels,Set<Vertex> recursiveSet,Set<Vertex> breadtheSet){  if (vertex == null || recursiveSet.contains(vertex)) {    return;  }  recursiveSet.add(vertex);  int size=recursiveSet.size();  vertex.incrementConsciousnessLevel(levels);  log("Increment:" + levels,Level.FINEST,vertex);  for (  Entry<Vertex,Map<Relationship,Relationship>> entry : vertex.getRelationships().entrySet()) {    if ((size + breadtheSet.size()) >= TRAVERSAL_LIMIT) {      break;    }    if (entry.getValue().size() > IGNORE_RELATIONS_MAX) {      continue;    }    for (    Relationship relationship : entry.getValue().values()) {      breadtheSet.add(relationship.getType());      breadtheSet.add(relationship.getTarget());    }  }  for (Iterator<Relationship> relationships=vertex.allRelationships(); relationships.hasNext(); ) {    if ((size + breadtheSet.size()) >= TRAVERSAL_LIMIT) {      break;    }    Relationship relationship=relationships.next();    breadtheSet.add(relationship.getType());    breadtheSet.add(relationship.getTarget());  }}  }
class C{  public CountingInputStream(InputStream in){  this.in=in;  this.counter=0;}  }
class C{  @Override public Object clone(){  RelativeDateFormat clone=(RelativeDateFormat)super.clone();  clone.dayFormatter=(NumberFormat)this.dayFormatter.clone();  clone.secondFormatter=(NumberFormat)this.secondFormatter.clone();  return clone;}  }
class C{  public void putAsString(String key,Character value){  String strValue=value.toString();  super.put(key,strValue);}  }
class C{  public boolean isHistoricalDataRunning(Contract contract){  for (  Tradestrategy item : m_historyDataRequests.values()) {    if (contract.equals(item.getContract())) {      return true;    }  }  return false;}  }
class C{  public K type(Class<T> type){  this.type=type;  return self();}  }
class C{  public SSLHandshakeException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public static boolean exists(HiveMetastoreClient ms,HiveObjectSpec spec) throws HiveMetastoreException {  if (spec.isPartition()) {    return ms.existsPartition(spec.getDbName(),spec.getTableName(),spec.getPartitionName());  } else {    return ms.existsTable(spec.getDbName(),spec.getTableName());  }}  }
class C{  public double scaleOnAxis(double value){  double height=timeScale.getHeight(value,tree);  if (isAxisReversed()) {    return (treeBounds.getX() + treeBounds.getWidth()) - (height * treeScale);  } else {    return treeBounds.getX() + (height * treeScale);  }}  }
class C{  private boolean containsGoogleAccessibilityService(){  android.view.accessibility.AccessibilityManager accessibilityManager=getAccessibilityManager();  List<AccessibilityServiceInfo> enabledServices=accessibilityManager.getEnabledAccessibilityServiceList(AccessibilityServiceInfo.FEEDBACK_ALL_MASK);  if (enabledServices != null) {    for (    AccessibilityServiceInfo enabledService : enabledServices) {      String serviceId=enabledService.getId();      if (serviceId != null && serviceId.startsWith(ACCESSIBILITY_PACKAGE_NAME_PREFIX)) {        return true;      }    }  }  return false;}  }
class C{  public static void flagDocumentAsCorrected(Element element){  Document doc=element.getOwnerDocument();  if (doc != null) {    doc.setUserData("autoCorrected","true",null);  }}  }
class C{  public void addNotExportedLibRelative(String pLibPath) throws MalformedURLException {  URL url=new File(getPluginPath() + File.separator + pLibPath).toURI().toURL();  fNotExportedLibs.add(url);}  }
class C{  public static void main(String[] args){  int[] list1={2,3,2,5,6,1,-2,3,14,12};  int[] list2={1,3,5,6,12,14,20};  int[] list3={20,14,12,5,3,-2};  double[] list4={2.1,3.5,2.1,5.3,6.7,1.0,-2.6,3.8,14.2,12.1};  double[] list5={1.1,3.0,5.7,6.8,12.0,14.2,20.5};  double[] list6={20.0,14.0,12.0,5.5,3.0,-2.0};  Integer[] intArray={2,3,2,5,6,1,-2,3,14,12};  Character[] charArray={'J','a','r'};  String[] stringArray={"Tom","Carl","Ann"};  GeometricObject[] list7={new Circle(5),new Rectangle(4,5),new Circle(5.5),new Rectangle(2.4,5),new Circle(0.5),new Rectangle(4,65),new Circle(4.5),new Rectangle(4.4,1),new Circle(6.5),new Rectangle(4,5)};  GeometricObject[] list8={new Circle(3),new Rectangle(3,10),new Circle(5)};  GeometricObject[] list9={new Circle(10),new Rectangle(3,10),new Circle(2)};  System.out.println("List1 is" + (ordered(list1) ? " " : " not ") + "ordered in ascending order.");  System.out.println("List2 is" + (ordered(list2) ? " " : " not ") + "ordered in ascending order.");  System.out.println("List3 is" + (ordered(list3,false) ? " " : " not ") + "ordered in descending order.");  System.out.println("List2 is" + (ordered(list2,false) ? " " : " not ") + "ordered in descending order.");  System.out.println("List4 is" + (ordered(list4) ? " " : " not ") + "ordered in ascending order.");  System.out.println("List5 is" + (ordered(list5) ? " " : " not ") + "ordered in ascending order.");  System.out.println("List6 is" + (ordered(list6,false) ? " " : " not ") + "ordered in descending order.");  System.out.println("List5 is" + (ordered(list5,false) ? " " : " not ") + "ordered in descending order.");  System.out.println("The array of Integers is" + (ordered(intArray) ? " " : " not ") + "ordered in ascending order.");  System.out.println("The array of Characters is" + (ordered(charArray) ? " " : " not ") + "ordered in ascending order.");  System.out.println("The array of Strings is" + (ordered(stringArray,false) ? " " : " not ") + "ordered in descending order.");  System.out.println("The array of Characters is" + (ordered(charArray,false) ? " " : " not ") + "ordered in descending order.");  System.out.println("List7 is" + (ordered(list7,new GeometricObjectComparator()) ? " " : " not ") + "ordered in ascending order.");  System.out.println("List8 is" + (ordered(list8,new GeometricObjectComparator()) ? " " : " not ") + "ordered in ascending order.");  System.out.println("List9 is" + (ordered(list9,new GeometricObjectComparator(),false) ? " " : " not ") + "ordered in descending order.");  System.out.println("List8 is" + (ordered(list8,new GeometricObjectComparator(),false) ? " " : " not ") + "ordered in descending order.");}  }
class C{  public static IPath installTestSdk(Bundle bundle,String pathToZip){  URL fileUrl=null;  try {    fileUrl=new File(pathToZip).toURI().toURL();  } catch (  MalformedURLException e) {    throw new IllegalStateException("Unable to install the SDK. Path to zip was invalid. pathToZip=" + pathToZip,e);  }  return installTestSdk(bundle,fileUrl);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  double[] numbers=new double[10];  System.out.print("Enter ten numbers: ");  for (int i=0; i < numbers.length; i++)   numbers[i]=input.nextDouble();  System.out.println("The minimum number is " + numbers[indexOfSmallestElement(numbers)] + " index "+ indexOfSmallestElement(numbers));}  }
class C{  private void removeTree(final ITreeNode<CTag> tag){  m_allTags.remove(tag);  for (  final ITreeNode<CTag> child : tag.getChildren()) {    removeTree(child);  }}  }
class C{  private void establishConnection(Socket socket) throws XMPPException, IOException {  DataOutputStream out=new DataOutputStream(socket.getOutputStream());  DataInputStream in=new DataInputStream(socket.getInputStream());  int b=in.read();  if (b != 5) {    throw new XMPPException("Only SOCKS5 supported");  }  b=in.read();  byte[] auth=new byte[b];  in.readFully(auth);  byte[] authMethodSelectionResponse=new byte[2];  authMethodSelectionResponse[0]=(byte)0x05;  boolean noAuthMethodFound=false;  for (int i=0; i < auth.length; i++) {    if (auth[i] == (byte)0x00) {      noAuthMethodFound=true;      break;    }  }  if (!noAuthMethodFound) {    authMethodSelectionResponse[1]=(byte)0xFF;    out.write(authMethodSelectionResponse);    out.flush();    throw new XMPPException("Authentication method not supported");  }  authMethodSelectionResponse[1]=(byte)0x00;  out.write(authMethodSelectionResponse);  out.flush();  byte[] connectionRequest=Socks5Utils.receiveSocks5Message(in);  String responseDigest=new String(connectionRequest,5,connectionRequest[4]);  if (!Socks5Proxy.this.allowedConnections.contains(responseDigest)) {    connectionRequest[1]=(byte)0x05;    out.write(connectionRequest);    out.flush();    throw new XMPPException("Connection is not allowed");  }  connectionRequest[1]=(byte)0x00;  out.write(connectionRequest);  out.flush();  Socks5Proxy.this.connectionMap.put(responseDigest,socket);}  }
class C{  @Deprecated public static void showAlert(Context context,String title,String text){  Builder alertBuilder=new Builder(context);  alertBuilder.setTitle(title);  alertBuilder.setMessage(text);  alertBuilder.create().show();}  }
class C{  public long average(){  long total=0;  for (  long time : buffer) {    if (time > 0) {      total+=time;    }  }  return total / buffer.length;}  }
class C{  @Override public boolean supportsHandleInteraction(){  return false;}  }
class C{  protected ArrayList<Attribute> parseAttribute(ArrayList<Attribute> attributes) throws IOException {  String attributeName;  ArrayList<String> attributeValues;  getNextToken();  attributeName=m_Tokenizer.sval;  getNextToken();  if (m_Tokenizer.ttype == StreamTokenizer.TT_WORD) {    if (m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_REAL) || m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_INTEGER) || m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_NUMERIC)) {      attributes.add(new Attribute(attributeName,attributes.size()));      readTillEOL();    } else     if (m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_STRING)) {      attributes.add(new Attribute(attributeName,(ArrayList<String>)null,attributes.size()));      readTillEOL();    } else     if (m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_DATE)) {      String format=null;      if (m_Tokenizer.nextToken() != StreamTokenizer.TT_EOL) {        if ((m_Tokenizer.ttype != StreamTokenizer.TT_WORD) && (m_Tokenizer.ttype != '\'') && (m_Tokenizer.ttype != '\"')) {          errorMessage("not a valid date format");        }        format=m_Tokenizer.sval;        readTillEOL();      } else {        m_Tokenizer.pushBack();      }      attributes.add(new Attribute(attributeName,format,attributes.size()));    } else     if (m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_RELATIONAL)) {      readTillEOL();      ArrayList<Attribute> atts=attributes;      attributes=new ArrayList<Attribute>();      getFirstToken();      if (m_Tokenizer.ttype == StreamTokenizer.TT_EOF) {        errorMessage("premature end of file");      }      do {        if (Attribute.ARFF_ATTRIBUTE.equalsIgnoreCase(m_Tokenizer.sval)) {          attributes=parseAttribute(attributes);        } else         if (Attribute.ARFF_END_SUBRELATION.equalsIgnoreCase(m_Tokenizer.sval)) {          getNextToken();          if (!attributeName.equalsIgnoreCase(m_Tokenizer.sval)) {            errorMessage("declaration of subrelation " + attributeName + " must be terminated by "+ "@end "+ attributeName);          }          break;        } else {          errorMessage("declaration of subrelation " + attributeName + " must be terminated by "+ "@end "+ attributeName);        }      } while (true);      Instances relation=new Instances(attributeName,attributes,0);      attributes=atts;      attributes.add(new Attribute(attributeName,relation,attributes.size()));    } else {      errorMessage("no valid attribute type or invalid " + "enumeration");    }  } else {    attributeValues=new ArrayList<String>();    m_Tokenizer.pushBack();    if (m_Tokenizer.nextToken() != '{') {      errorMessage("{ expected at beginning of enumeration");    }    while (m_Tokenizer.nextToken() != '}') {      if (m_Tokenizer.ttype == StreamTokenizer.TT_EOL) {        errorMessage("} expected at end of enumeration");      } else {        attributeValues.add(m_Tokenizer.sval);      }    }    attributes.add(new Attribute(attributeName,attributeValues,attributes.size()));  }  getLastToken(false);  getFirstToken();  if (m_Tokenizer.ttype == StreamTokenizer.TT_EOF) {    errorMessage("premature end of file");  }  return attributes;}  }
class C{  public BufferedImage scale(final int width,final int height,final BufferedImage image){  Image scaled=image.getScaledInstance(width,height,Image.SCALE_AREA_AVERAGING);  final MediaTracker mediaTracker=new MediaTracker(new Container());  mediaTracker.addImage(scaled,0);  try {    mediaTracker.waitForID(0);  } catch (  final InterruptedException e) {  }  BufferedImage result=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);  try {    result.createGraphics().drawImage(scaled,0,0,width,height,null);    final Raster raster=result.getData();    int[] pixel=new int[raster.getSampleModel().getNumBands()];    pixel=raster.getPixel(0,0,pixel);  } catch (  final Exception e) {    try {      BufferedImage converted=EncodedImage.convertToRGB(image);      scaled=converted.getScaledInstance(width,height,Image.SCALE_AREA_AVERAGING);      mediaTracker.addImage(scaled,1);      try {        mediaTracker.waitForID(1);      } catch (      final InterruptedException e2) {      }      result=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);      result.createGraphics().drawImage(scaled,0,0,width,height,null);      final Raster raster=result.getData();      int[] pixel=new int[result.getSampleModel().getNumBands()];      pixel=raster.getPixel(0,0,pixel);    } catch (    Exception e2) {      result=image;    }    ConcurrentLog.fine("ImageViewer","Image could not be scaled");  }  return result;}  }
class C{  public final boolean canGetString(String field){  return m_table.canGetString(field);}  }
class C{  public void readSample(SampleHolder holder){  infoQueue.peekSample(holder,dataOffsetHolder);  if (holder.data == null || holder.data.capacity() < holder.size) {    holder.replaceBuffer(holder.size);  }  if (holder.data != null) {    readData(dataOffsetHolder[0],holder.data,holder.size);  }  long nextOffset=infoQueue.moveToNextSample();  dropFragmentsTo(nextOffset);}  }
class C{  public static void close(Cursor cursor){  try {    if (cursor != null && !cursor.isClosed()) {      cursor.close();    }  } catch (  Exception e) {    Log.w(TAG,"close(cursor)",e);  }}  }
class C{  private boolean localMax(int p,List<List<? extends VecPaired<VecPaired<Vec,Integer>,Double>>> knnVecList){  List<? extends VecPaired<VecPaired<Vec,Integer>,Double>> neighbors=knnVecList.get(p);  double myEps=getEps(neighbors);  for (int i=1; i < neighbors.size(); i++) {    int neighborP=neighbors.get(i).getVector().getPair();    if (getEps(knnVecList.get(neighborP)) < myEps)     return false;  }  return true;}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "ModelPerformanceChart.gif",BeanVisual.ICON_PATH + "ModelPerformanceChart_animated.gif");}  }
class C{  public InterruptedException(java.lang.String s){  super(s);}  }
class C{  public void ReInit(JavaCharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  protected void accessDenied(){  resultListener.accessDenied();}  }
class C{  @Override public CallableStatement prepareCall(String sql) throws SQLException {  try {    int id=getNextId(TraceObject.CALLABLE_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("CallableStatement",TraceObject.CALLABLE_STATEMENT,id,"prepareCall(" + quote(sql) + ")");    }    checkClosed();    sql=translateSQL(sql);    return new JdbcCallableStatement(this,sql,id,ResultSet.TYPE_FORWARD_ONLY,Constants.DEFAULT_RESULT_SET_CONCURRENCY);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void testContractions() throws IOException {  Analyzer a=new CatalanAnalyzer();  assertAnalyzesTo(a,"Diccionari de l'Institut d'Estudis Catalans",new String[]{"diccion","inst","estud","catalan"});  a.close();}  }
class C{  private static void read(InputStream in,byte[] buf,int pos,int n) throws IOException {  int read=0;  int res=0;  while (read < n) {    res=in.read(buf,read + pos,n - read);    if (res > 0) {      read+=res;    } else {      throw new IOException("Read failed, got " + read + " of "+ n);    }  }}  }
class C{  private static void copystream(InputStream in,OutputStream out) throws IOException {  byte[] buffer=new byte[1024];  int len;  while ((len=in.read(buffer)) >= 0)   out.write(buffer,0,len);}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  private void growEntries(){  int newLen=(next.length << 1) + 1;  int[] newNext=new int[newLen];  GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);  next=newNext;  nextEmpty=new int[newLen];  Arrays.fill(nextEmpty,-1);  Object[] newObjs=new Object[newLen];  System.arraycopy(objs,0,newObjs,0,size);  objs=newObjs;}  }
class C{  protected long doCommonStandardEnqueue() throws Exception {  return doEnqueue(DOWNLOAD_TO_DOWNLOAD_CACHE_DIR);}  }
class C{  public void stop(){  mSensorManager.unregisterListener(this,mAccelerometer);  mSensorManager.unregisterListener(this,mMagneticField);  activated=false;}  }
class C{  private void saveAs() throws IOException {  int width=Math.max(this.getWidth(),this.getTableHeader().getWidth());  int height=this.getHeight() + this.getTableHeader().getHeight();  BufferedImage bi=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);  Graphics2D g2=bi.createGraphics();  this.getTableHeader().paint(g2);  g2.translate(0,this.getTableHeader().getHeight());  this.paint(g2);  g2.dispose();  ImageIO.write(bi,"png",new File(openFileChooser()));}  }
class C{  public FieldAnalysisRequest(String uri){  super(METHOD.GET,uri);}  }
class C{  public OMRangeRings(double latPoint,double lonPoint,double radius,Length units,int nverts){  this(new LatLonPoint.Double(latPoint,lonPoint),radius,units,nverts);}  }
class C{  public Vector<SiftFeature> runOctave(int o){  Vector<SiftFeature> features=new Vector<SiftFeature>();  FloatArray2DScaleOctave octave=octaves[o];  octave.build();  dog.run(octave);  Vector<float[]> candidates=dog.getCandidates();  for (  float[] c : candidates) {    this.processCandidate(c,o,features);  }  return features;}  }
class C{  public void buildClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  data=new Instances(data);  data.deleteWithMissingClass();  ClassifierDecList currentRule;  double currentWeight;  Instances oldGrowData, newGrowData, oldPruneData, newPruneData;  theRules=new Vector<ClassifierDecList>();  if ((reducedErrorPruning) && !(unpruned)) {    Random random=new Random(m_seed);    data.randomize(random);    data.stratify(numSetS);    oldGrowData=data.trainCV(numSetS,numSetS - 1,random);    oldPruneData=data.testCV(numSetS,numSetS - 1);  } else {    oldGrowData=data;    oldPruneData=null;  }  while (Utils.gr(oldGrowData.numInstances(),0)) {    if (unpruned) {      currentRule=new ClassifierDecList(toSelectModeL,minNumObj);      currentRule.buildRule(oldGrowData);    } else     if (reducedErrorPruning) {      currentRule=new PruneableDecList(toSelectModeL,minNumObj);      ((PruneableDecList)currentRule).buildRule(oldGrowData,oldPruneData);    } else {      currentRule=new C45PruneableDecList(toSelectModeL,CF,minNumObj);      ((C45PruneableDecList)currentRule).buildRule(oldGrowData);    }    newGrowData=new Instances(oldGrowData,oldGrowData.numInstances());    Enumeration<Instance> enu=oldGrowData.enumerateInstances();    while (enu.hasMoreElements()) {      Instance instance=enu.nextElement();      currentWeight=currentRule.weight(instance);      if (Utils.sm(currentWeight,1)) {        instance.setWeight(instance.weight() * (1 - currentWeight));        newGrowData.add(instance);      }    }    newGrowData.compactify();    oldGrowData=newGrowData;    if ((reducedErrorPruning) && !(unpruned)) {      newPruneData=new Instances(oldPruneData,oldPruneData.numInstances());      enu=oldPruneData.enumerateInstances();      while (enu.hasMoreElements()) {        Instance instance=enu.nextElement();        currentWeight=currentRule.weight(instance);        if (Utils.sm(currentWeight,1)) {          instance.setWeight(instance.weight() * (1 - currentWeight));          newPruneData.add(instance);        }      }      newPruneData.compactify();      oldPruneData=newPruneData;    }    theRules.addElement(currentRule);  }}  }
class C{  private void popInt(GPR reg){  asm.emitLInt(reg,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_INT,FP);  discardSlot();}  }
class C{  @Override protected void onPause(){  super.onPause();  BusProvider.getInstance().unregister(this);}  }
class C{  private void saveDescription(){  try {    m_module.getConfiguration().setDescription(m_stdEditPanel.getDescription());  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String message="E00164: " + "Could not change the module description";    final String description=CUtilityFunctions.createDescription("The new module description could not be saved to the database.",new String[]{"There was a problem with the connection to the database while the module description was saved"},new String[]{"The module description was not saved. Please try to find out what went wrong with the database connection and try to save the module description again."});    NaviErrorDialog.show(SwingUtilities.getWindowAncestor(this),message,description,e);  }}  }
class C{  void validate(TableKelp table){  if (!table.isValidate()) {    return;  }  Row row=table.row();  for (  BlockLeaf block : _blocks) {    block.validateBlock(row);  }}  }
class C{  public String createOrganization() throws SaaSApplicationException {  VOOrganization newVoOrganization=null;  OrganizationRoleType[] selectedRoles=newRoles.toArray(new OrganizationRoleType[newRoles.size()]);  LdapProperties ldapProperties=null;  if (ldapManaged && organizationProperties != null) {    try {      Properties props=PropertiesLoader.loadProperties(organizationProperties.getInputStream());      ldapProperties=new LdapProperties(props);    } catch (    IOException e) {      logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_CREATE_ORGANIZATION);      addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_UPLOAD);      return OUTCOME_ERROR;    }  }  if (!newRoles.contains(OrganizationRoleType.SUPPLIER) && null != newOrganization.getOperatorRevenueShare()) {    newOrganization.setOperatorRevenueShare(null);  }  if (StringUtils.isNotBlank(getSelectedTenant())) {    Long tenantKey=Long.valueOf(getSelectedTenant());    newOrganization.setTenantKey(tenantKey);    newAdministrator.setTenantId(getSelectedTenantId());  }  newVoOrganization=getOperatorService().registerOrganization(newOrganization,getImageUploader().getVOImageResource(),newAdministrator,ldapProperties,selectedMarketplace,selectedRoles);  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_ORGANIZATION_CREATED,newVoOrganization.getOrganizationId());  newOrganization=null;  newAdministrator=null;  newRoles.clear();  organizationProperties=null;  selectedMarketplace=null;  selectedTenant=null;  return OUTCOME_SUCCESS;}  }
class C{  public static ScriptBundle unpackBundle(boolean isBytecode,boolean saveFile,final String url,final InputStream inputStream) throws IOException {  if (inputStream == null || url == null) {    return null;  }  final ScriptBundle scriptBundle=new ScriptBundle();  final ZipInputStream zipStream=new ZipInputStream(inputStream);  final String scriptBundleFolderPath=LuaScriptManager.buildScriptBundleFolderPath(url);  final Map<String,byte[]> luaSigns=new HashMap<String,byte[]>();  final byte[] buffer=new byte[8 * 1024];  scriptBundle.setUrl(url);  scriptBundle.setBytecode(isBytecode);  scriptBundle.setBaseFilePath(scriptBundleFolderPath);  ZipEntry entry;  String fileName=null;  String filePath=null;  while ((entry=zipStream.getNextEntry()) != null) {    fileName=FileUtil.getSecurityFileName(entry.getName());    if (saveFile && entry.isDirectory()) {      filePath=FileUtil.buildPath(scriptBundleFolderPath,fileName);      File dir=new File(filePath);      if (!dir.exists()) {        dir.mkdir();      }    } else {      final ByteArrayOutputStream out=new ByteArrayOutputStream();      int len;      while ((len=zipStream.read(buffer)) > 0) {        out.write(buffer,0,len);      }      final byte[] fileData=out.toByteArray();      boolean shouldSaveFile=false;      if (LuaScriptManager.isLuaEncryptScript(fileName)) {        scriptBundle.addScript(new ScriptFile(url,scriptBundleFolderPath,fileName,fileData,null));        shouldSaveFile=!isBytecode;      } else       if (LuaScriptManager.isLuaSignFile(fileName)) {        luaSigns.put(fileName,fileData);        shouldSaveFile=!isBytecode;      } else {        shouldSaveFile=true;      }      if (shouldSaveFile && saveFile) {        filePath=FileUtil.buildPath(scriptBundleFolderPath,fileName);        FileUtil.save(filePath,fileData);      }    }  }  zipStream.close();  ScriptFile scriptFile=null;  for (  String key : scriptBundle.mScriptFileMap.keySet()) {    scriptFile=scriptBundle.mScriptFileMap.get(key);    scriptFile.signData=luaSigns.get(scriptFile.signFileName);  }  return scriptBundle;}  }
class C{  public static String replace(String s,String[] sub,String[] with){  if ((sub.length != with.length) || (sub.length == 0)) {    return s;  }  int start=0;  StringBuilder buf=new StringBuilder(s.length());  while (true) {    int[] res=indexOf(s,sub,start);    if (res == null) {      break;    }    int end=res[1];    buf.append(s.substring(start,end));    buf.append(with[res[0]]);    start=end + sub[res[0]].length();  }  buf.append(s.substring(start));  return buf.toString();}  }
class C{  public void testEventsInjectedIntoKafkaWithoutFilter() throws Exception {  Map<String,String> srcProps=makeSourceProps(Utils.join(TOPICS,","));  srcProps.remove(IgniteSourceConstants.CACHE_FILTER_CLASS);  doTest(srcProps,false);}  }
class C{  public FluentJdbcBuilder connectionProvider(ConnectionProvider connectionProvider){  checkNotNull(connectionProvider,"connectionProvider");  this.connectionProvider=Optional.of(connectionProvider);  return this;}  }
class C{  public boolean vta(){  return soot.PhaseOptions.getBoolean(options,"vta");}  }
class C{  public void clearCircles(){  for (int i=0; i < areas.size(); i++) {    getCircles().get(i).removeArea();  }}  }
class C{  public void init(byte[] password,byte[] salt){  super.init(password,salt,1);}  }
class C{  public void addImplicitArray(final Class<?> ownerType,final String fieldName){  addImplicitCollection(ownerType,fieldName);}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  public GitHubPullRequestList createPullRequestsList(PagedIterable<GHPullRequest> ghPullRequestsList) throws IOException {  GitHubPullRequestList gitHubPullRequestList=DtoFactory.getInstance().createDto(GitHubPullRequestList.class);  List<GitHubPullRequest> dtoPullRequestsList=new ArrayList<>();  for (  GHPullRequest ghPullRequest : ghPullRequestsList) {    dtoPullRequestsList.add(createPullRequest(ghPullRequest));  }  gitHubPullRequestList.setPullRequests(dtoPullRequestsList);  return gitHubPullRequestList;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void sendUpdate(JSONObject obj,boolean keepCallback){  sendUpdate(obj,keepCallback,PluginResult.Status.OK);}  }
class C{  private static boolean putSettingsGlobalBoolean(ContentResolver cr,String name,boolean value){  return Settings.Global.putInt(cr,name,value ? 1 : 0);}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.844 -0500",hash_original_method="87185450AF15BAF9DFFE5741D5928D9B",hash_generated_method="272AD850E35F32A66C440BDE6E73AF76") public char charAt(int index){  addTaint(index);  return getTaintChar();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_notationsremovenameditemns1.class,args);}  }
class C{  @Override public SimpleEdgeStream<K,EV> filterVertices(FilterFunction<Vertex<K,NullValue>> filter){  DataStream<Edge<K,EV>> remainingEdges=this.edges.filter(new ApplyVertexFilterToEdges<K,EV>(filter));  return new SimpleEdgeStream<>(remainingEdges,this.context);}  }
class C{  private void fireChangedRemoved(final RPObject object,final RPSlot cslot){  final String slotName=cslot.getName();  final RPSlot slot=object.getSlot(slotName);  for (  final RPObject schanges : cslot) {    final RPObject sobject=slot.get(schanges.getID());    if (sobject == null) {      logger.debug("Unable to find existing: " + schanges);      continue;    }    if (schanges.size() > 1) {      listener.onSlotChangedRemoved(object,slotName,sobject,schanges);      userListener.onSlotChangedRemoved(object,slotName,sobject,schanges);      fireChangedRemoved(sobject,schanges);    } else {      fireRemoved(object,slotName,sobject);    }  }}  }
class C{  void connect() throws Exception {  CuratorFramework zkClient=null;  long connectioncreatime=0;  LOGGER.warn("Connection to ZooKeeper Server - ZooKeeper Server Connection Params: cnxnstr = " + m_connectionStr + " , connectiontimeout="+ m_cxnWaitInMillis+ ", retryCount="+ m_retrycount+ ", retryWaitTime="+ m_retrywaitTimeInMillis);  long start=System.currentTimeMillis();  zkClient=connectInternal(m_sessionTimeoutInMillis,m_cxnWaitInMillis,m_retrycount,m_retrywaitTimeInMillis);  long end=System.currentTimeMillis();  connectioncreatime=end - start;  if (zkClient != null && (!isZKConnected(zkClient))) {    zkClient.close();    throw new Exception("Not able to connect to ZooKeeper Server");  } else {    setZKHandle(zkClient);    LOGGER.warn("Session Connected to ZooKeeper Server : " + m_connectionStr);    LOGGER.warn("ZooKeeper connection creation took - " + connectioncreatime + " ms");  }}  }
class C{  public ImageReuseInfoManger(String[] size){  mSizeList=size;}  }
class C{  public static boolean isNumber(final String num){  if (num == null || num.length() == 0) {    return false;  }  final boolean firstIsDigit=Character.isDigit(num.charAt(0));  if (!firstIsDigit && num.charAt(0) != '-') {    return false;  }  boolean dig=firstIsDigit;  for (int i=1; i < num.length(); i++) {    if (!Character.isDigit(num.charAt(i))) {      return false;    }    dig=true;  }  return dig;}  }
class C{  @Override public void writeJSONString(Writer out) throws IOException {  writeJSONString(this,out);}  }
class C{  boolean checkTransitivityIncoming(Fact fact){  return fact.span() >= minTransitiveLeft;}  }
class C{  static Object run(String variable,String script,Properties ctx,int WindowNo){  Scriptlet scr=new Scriptlet(variable,script,ctx,WindowNo);  scr.execute();  return scr.getResult(false);}  }
class C{  private void updateWorkAmount(double workTime){  if (workTime <= 0) {    currentWorkAmount*=2;  } else {    totalTimeTaken+=workTime;    completedWorkAmount+=currentWorkAmount;    currentWorkAmount=(int)Math.ceil(targetExecutionMs * completedWorkAmount / totalTimeTaken);  }}  }
class C{  public static String SITInfo(EnumMap<SIT,EnumMap<CIT,Boolean>> shp){  StringBuilder result=new StringBuilder();  for (  SIT key : shp.keySet()) {    result.append("\t" + key.toString() + ":"+ CITInfo(shp.get(key))+ "\n");  }  return result.toString();}  }
class C{  @DELETE @Path("/{groupName}") @RequiresRole(role=Role.ADMINISTRATOR) public void delete(@PathParam("groupName") String groupName){  PrincipalId id=PrincipalUtil.fromName(groupName);  Validate.isTrue(getSystemDomain().equalsIgnoreCase(id.getDomain()),sm.getString("valid.not.systemdomain",id.getDomain(),tenant));  try {    getIDMClient().deletePrincipal(tenant,id.getName());  } catch (  InvalidPrincipalException|NoSuchTenantException e) {    log.debug("Failed to delete group '{}' from tenant '{}'",groupName,tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidArgumentException e) {    log.warn("Failed to delete group '{}' from tenant '{}' due to a client side error",groupName,tenant,e);    throw new BadRequestException(sm.getString("res.group.delete.failed",groupName,tenant),e);  }catch (  Exception e) {    log.error("Failed to delete group '{}' from tenant '{}' due to a server side error",groupName,tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public static Rectangle fromPointDistance(final double centerLat,final double centerLon,final double radiusMeters){  checkLatitude(centerLat);  checkLongitude(centerLon);  final double radLat=toRadians(centerLat);  final double radLon=toRadians(centerLon);  double radDistance=(radiusMeters + 7E-2) / EARTH_MEAN_RADIUS_METERS;  double minLat=radLat - radDistance;  double maxLat=radLat + radDistance;  double minLon;  double maxLon;  if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {    double deltaLon=asin(sloppySin(radDistance) / cos(radLat));    minLon=radLon - deltaLon;    if (minLon < MIN_LON_RADIANS) {      minLon+=2d * PI;    }    maxLon=radLon + deltaLon;    if (maxLon > MAX_LON_RADIANS) {      maxLon-=2d * PI;    }  } else {    minLat=max(minLat,MIN_LAT_RADIANS);    maxLat=min(maxLat,MAX_LAT_RADIANS);    minLon=MIN_LON_RADIANS;    maxLon=MAX_LON_RADIANS;  }  return new Rectangle(toDegrees(minLat),toDegrees(maxLat),toDegrees(minLon),toDegrees(maxLon));}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildLilJohnnnny(zone);}  }
class C{  public Name add(int posn,String comp) throws InvalidNameException {  impl.add(posn,comp);  return this;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public void logDebug(final String message){switch (mLevel) {case Debug:    Log.d(getTag(),message);default :case Error:}}  }
class C{  private AFTPClient actionGetCurrentDir() throws PageException, IOException {  AFTPClient client=getClient();  String pwd=client.printWorkingDirectory();  Struct cfftp=writeCfftp(client);  cfftp.setEL("returnValue",pwd);  return client;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public IJavaElement createElement(ClassScope scope,ICompilationUnit unit,HashSet existingElements,HashMap knownScopes){  return createElement(scope,scope.referenceContext.sourceStart,unit,existingElements,knownScopes);}  }
class C{  public void fillDefaultValues(){  tfLearningRate.setText(Double.toString(SubtractiveNormalizationRule.DEFAULT_LEARNING_RATE));}  }
class C{  @Override protected void doPut(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  public OutputQuestSlotAction(String quest){  this.questSlot=quest;}  }
class C{  static public final int min(int[] list){  if (list.length == 0) {    throw new ArrayIndexOutOfBoundsException(ERROR_MIN_MAX);  }  int min=list[0];  for (int i=1; i < list.length; i++) {    if (list[i] < min)     min=list[i];  }  return min;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.backgroundPaint=SerialUtilities.readPaint(stream);  this.itemPaint=SerialUtilities.readPaint(stream);}  }
class C{  private void validateNotContradicting(String signatureId,X509Certificate delegateCert) throws ContradictoryHoKConditionsException {  if (signatureId != null && delegateToReq(delegateCert)) {    throw new ContradictoryHoKConditionsException("Request cannot be satisfied - both UseKey and DelegateTo are present");  }}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tRandom number seed.\n" + "\t(default 1)","S",1,"-S <num>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public StorageSystemTypeRestRep addStorageSystemType(StorageSystemTypeAddParam addparam){  log.info("addStorageSystemType");  ArgValidator.checkFieldNotEmpty(addparam.getStorageTypeName(),"storageTypeName");  checkDuplicateLabel(StorageSystemType.class,addparam.getStorageTypeName());  ArgValidator.checkFieldNotEmpty(addparam.getMetaType(),"metaType");  ArgValidator.checkFieldNotEmpty(addparam.getDriverClassName(),"driverClassName");  if (addparam.getIsDefaultSsl()) {    ArgValidator.checkFieldNotEmpty(addparam.getSslPort(),"sslPort");  } else {    ArgValidator.checkFieldNotEmpty(addparam.getNonSslPort(),"nonSslPort");  }  StorageSystemType ssType=new StorageSystemType();  URI ssTyeUri=URIUtil.createId(StorageSystemType.class);  ssType.setId(ssTyeUri);  ssType.setStorageTypeId(ssTyeUri.toString());  ssType.setStorageTypeName(addparam.getStorageTypeName());  ssType.setMetaType(addparam.getMetaType());  ssType.setDriverClassName(addparam.getDriverClassName());  if (addparam.getStorageTypeDispName() != null) {    ssType.setStorageTypeDispName(addparam.getStorageTypeDispName());  }  if (addparam.getNonSslPort() != null) {    ssType.setNonSslPort(addparam.getNonSslPort());  }  if (addparam.getSslPort() != null) {    ssType.setSslPort(addparam.getSslPort());  }  ssType.setIsSmiProvider(addparam.getIsSmiProvider());  ssType.setIsDefaultSsl(addparam.getIsDefaultSsl());  ssType.setIsDefaultMDM(addparam.getIsDefaultMDM());  ssType.setIsOnlyMDM(addparam.getIsOnlyMDM());  ssType.setIsElementMgr(addparam.getIsElementMgr());  ssType.setIsSecretKey(addparam.getIsSecretKey());  _dbClient.createObject(ssType);  auditOp(OperationTypeEnum.ADD_STORAGE_SYSTEM_TYPE,true,AuditLogManager.AUDITOP_BEGIN,ssType.getId().toString(),ssType.getStorageTypeName(),ssType.getMetaType());  return map(ssType);}  }
class C{  @Override public void updateStorageGroupPolicyAndLimits(StorageSystem storage,ExportMask exportMask,List<URI> volumeURIs,VirtualPool newVirtualPool,boolean rollback,TaskCompleter taskCompleter) throws Exception {  String message=rollback ? ("updateStorageGroupPolicyAndLimits" + "(rollback)") : ("updateStorageGroupPolicyAndLimits");  _log.info("{} {} START...",storage.getSerialNumber(),message);  if (exportMask != null) {    _log.info("{} : ExportMask: {}",message,exportMask.getId());  }  _log.info("{} : volumeURIs: {}",message,volumeURIs);  _log.info("{} : new vPool: {}",message,newVirtualPool.getId());  boolean isVmax3=storage.checkIfVmax3();  boolean isSGUpdated=false;  boolean isSGUpdatedForVolumes=false;  boolean exceptionOccurred=false;  try {    if (null == exportMask && isVmax3) {      updateVMAX3AutoTieringPolicy(storage,volumeURIs,newVirtualPool,rollback,taskCompleter);      isSGUpdatedForVolumes=true;    } else {      String storageGroupName=_helper.getStorageGroupForGivenMaskingView(exportMask.getMaskName(),storage);      Volume volume=_dbClient.queryObject(Volume.class,volumeURIs.get(0));      if (exportMask.getCreatedBySystem() || Volume.checkForVplexBackEndVolume(_dbClient,volume)) {        Map<String,List<URI>> volumesByStorageGroup=_helper.groupVolumesBasedOnExistingGroups(storage,storageGroupName,volumeURIs);        _log.info("Group Volumes by Storage Group size : {}",volumesByStorageGroup.size());        _log.info("Checking if there are phantom Storage groups for volumes in MV {}",exportMask.getMaskName());        Set<String> phantomSGNames=null;        if (!isVmax3) {          phantomSGNames=_helper.getPhantomStorageGroupsForGivenMaskingView(exportMask.getMaskName(),storage);        }        _log.info("Phantom Storage groups {} found for volumes in MV {}",phantomSGNames,exportMask.getMaskName());        for (        Entry<String,List<URI>> entry : volumesByStorageGroup.entrySet()) {          String childGroupName=entry.getKey();          List<URI> volumeURIList=entry.getValue();          isSGUpdated=validateAndUpdateStorageGroupPolicyAndLimits(storage,exportMask,childGroupName,volumeURIList,newVirtualPool,phantomSGNames,taskCompleter);        }      } else {        _log.info("SG '{}' is not a ViPR managed one. FAST Policy cannot be updated on it.",storageGroupName);        isSGUpdated=false;      }    }  } catch (  Exception e) {    exceptionOccurred=true;    String errMsg=null;    if (exportMask != null) {      errMsg=String.format("An error occurred while updating FAST policy for Storage Groups on ExportMask %s",exportMask.getMaskName());    } else {      errMsg="An error occurred while updating fast policy for the VMAX3 volumes. ";    }    _log.error(errMsg,e);    ServiceError serviceError=DeviceControllerException.errors.jobFailedMsg(errMsg,e);    taskCompleter.error(_dbClient,serviceError);  } finally {    if (!exceptionOccurred) {      if (null != exportMask && !isSGUpdated && !rollback) {        String errMsg=String.format("None of the Storage Groups on ExportMask %s is updated with new FAST policy or Host IO Limits." + " Because the given Volume list is not same as the one in Storage Group (or)" + " any of the criteria for 'moveMembers' didn't meet in case of VMAX3 volumes."+ " Please check log for more details.",exportMask.getMaskName());        _log.error(errMsg);        ServiceError serviceError=DeviceControllerException.errors.jobFailedOpMsg("updateStorageGroupPolicyAndLimits",errMsg);        taskCompleter.error(_dbClient,serviceError);      } else       if (isVmax3 && null == exportMask && !isSGUpdatedForVolumes && !rollback) {        String errMsg="None of the parking storage groups for volumes were updated with new FAST Policy.";        _log.error(errMsg);        ServiceError serviceError=DeviceControllerException.errors.jobFailedOpMsg("updateFastPolicy",errMsg);        taskCompleter.error(_dbClient,serviceError);      } else {        taskCompleter.ready(_dbClient);      }    }  }  _log.info("{} {} END...",storage.getSerialNumber(),message);}  }
class C{  private ArrayTypeSignature parseArrayTypeSignature(){  if (current() != '[') {    throw error("expected array type signature");  }  advance();  return ArrayTypeSignature.make(parseTypeSignature());}  }
class C{  public static String cache(String s){  if (!SysProperties.OBJECT_CACHE) {    return s;  }  if (s == null) {    return null;  } else   if (s.length() == 0) {    return "";  }  int hash=s.hashCode();  String[] cache=getCache();  if (cache != null) {    int index=hash & (SysProperties.OBJECT_CACHE_SIZE - 1);    String cached=cache[index];    if (cached != null) {      if (s.equals(cached)) {        return cached;      }    }    cache[index]=s;  }  return s;}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(name,url,duration);}  }
class C{  public <VV>DataStream<VV> globalAggregate(FlatMapFunction<Edge<K,EV>,Vertex<K,VV>> edgeMapper,FlatMapFunction<Vertex<K,VV>,VV> vertexMapper,boolean collectUpdates){  DataStream<VV> result=this.edges.flatMap(edgeMapper).setParallelism(1).flatMap(vertexMapper).setParallelism(1);  if (collectUpdates) {    result=result.flatMap(new GlobalAggregateMapper<VV>()).setParallelism(1);  }  return result;}  }
class C{  public static int[] transformIntArray(Integer[] source){  int[] destin=new int[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public ViburDBCPDataSource(Properties properties) throws ViburDBCPException {  configureFromProperties(properties);}  }
class C{  @SuppressWarnings({"TooBroadScope"}) public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Compute executor service example started.");    ExecutorService exec=ignite.executorService();    for (    final String word : "Print words using runnable".split(" ")) {      exec.submit((IgniteRunnable)null);    }    exec.shutdown();    exec.awaitTermination(0,TimeUnit.MILLISECONDS);    System.out.println();    System.out.println(">>> Check all nodes for output (this node is also part of the cluster).");  } }  }
class C{  public JarLoader(ClassLoader loader){  super(loader);}  }
class C{  public static EppResource cloneResourceWithLinkedStatus(EppResource resource,DateTime now){  Builder<?,?> builder=resource.asBuilder();  if (queryDomainsUsingResource(resource.getClass(),Key.create(resource),now,1).isEmpty()) {    builder.removeStatusValue(StatusValue.LINKED);  } else {    builder.addStatusValue(StatusValue.LINKED);  }  return builder.build();}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public boolean isAssignableTo(Class cl){  return cl.isAssignableFrom(_class);}  }
class C{  public SpringVaadinServletRequest(HttpServletRequest request,VaadinServletService vaadinService,boolean clearServletPath){  super(request,vaadinService);  this.clearServletPath=clearServletPath;}  }
class C{  public static Map<NetworkLite,List<StoragePort>> mapStoragePortsToNetworks(Collection<StoragePort> ports,Collection<NetworkLite> networks,DbClient _dbClient){  Map<NetworkLite,List<StoragePort>> localPorts=new HashMap<NetworkLite,List<StoragePort>>();  Map<NetworkLite,List<StoragePort>> remotePorts=new HashMap<NetworkLite,List<StoragePort>>();  for (  NetworkLite network : networks) {    for (    StoragePort port : ports) {      if (port.getNetwork().equals(network.getId())) {        StringMapUtil.addToListMap(localPorts,network,port);      } else       if (network.hasRoutedNetworks(port.getNetwork())) {        StringMapUtil.addToListMap(remotePorts,network,port);      }    }  }  for (  NetworkLite network : networks) {    if (localPorts.get(network) == null && remotePorts.get(network) != null) {      localPorts.put(network,remotePorts.get(network));    }  }  return localPorts;}  }
class C{  boolean hasHeldLocks(){synchronized (this.tokens) {    for (Iterator iter=this.tokens.values().iterator(); iter.hasNext(); ) {      DLockToken token=(DLockToken)iter.next();      if (token.isLeaseHeld()) {        return true;      }    }  }  return false;}  }
class C{  public static int findMatchingBracket(Document doc,int offset) throws BadLocationException {  if (doc.getLength() == 0)   return -1;  char c=doc.getText(offset,1).charAt(0);  char cprime;  boolean direction;switch (c) {case '(':    cprime=')';  direction=false;break;case ')':cprime='(';direction=true;break;case '[':cprime=']';direction=false;break;case ']':cprime='[';direction=true;break;case '{':cprime='}';direction=false;break;case '}':cprime='{';direction=true;break;default :return -1;}int count;if (direction) {count=1;String text=doc.getText(0,offset);for (int i=offset - 1; i >= 0; i--) {char x=text.charAt(i);if (x == c) count++; else if (x == cprime) {if (--count == 0) return i;}}} else {count=1;offset++;int len=doc.getLength() - offset;String text=doc.getText(offset,len);for (int i=0; i < len; i++) {char x=text.charAt(i);if (x == c) count++; else if (x == cprime) {if (--count == 0) return i + offset;}}}return -1;}  }
class C{  @Override public String toString(){  return "CUsurfref[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public Attributes2Impl(){  declared=EmptyArray.BOOLEAN;  specified=EmptyArray.BOOLEAN;}  }
class C{  protected void processContainerPolicyAndIndirection(ContainerMapping mapping){  if (isMappedKeyMapAccessor()) {    processMapKeyClass(mapping,(MappedKeyMapAccessor)this);  } else   if (isMapAccessor()) {    MapKeyMetadata mapKey=getMapKey();    if (mapKey == null) {      setIndirectionPolicy(mapping,new MapKeyMetadata().process(mapping,this),usesIndirection());    } else {      setIndirectionPolicy(mapping,mapKey.process(mapping,this),usesIndirection());    }  } else {    setIndirectionPolicy(mapping,null,usesIndirection());  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private Patterns(){}  }
class C{  public CGRect(){  this(0,0,0,0);}  }
class C{  public static TrueTypeTable createTable(TrueTypeFont ttf,String tagString){  return createTable(ttf,tagString,null);}  }
class C{  public void loadByteArray(SdfBuffer buffer){  buffer.setAtIndexAndInc(bytes[0]);  buffer.setAtIndexAndInc(bytes[1]);  super.loadByteArray(buffer);}  }
class C{  public void add(E element){  add(element.toString().getBytes(charset));}  }
class C{  public MqttUnacceptableProtocolVersionException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean isDoChecksum(){  return this.doChecksum;}  }
class C{  public void removeConfig(String lockName,String configKind,String configId) throws Exception {  removeConfig(lockName,null,configKind,configId);}  }
class C{  private void simulate(final Instruction instruction){switch (instruction.getType()) {case PUSH:    final PushInstruction pushInstruction=(PushInstruction)instruction;  runtimeStack.push(new Element(pushInstruction.getValueType(),pushInstruction.getValue()));break;case METHOD_HANDLE:simulateMethodHandle((InvokeDynamicInstruction)instruction);break;case INVOKE:simulateInvoke((InvokeInstruction)instruction);break;case GET_FIELD:runtimeStack.pop();runtimeStack.push(new Element(((GetFieldInstruction)instruction).getPropertyType()));break;case GET_STATIC:final GetStaticInstruction getStaticInstruction=(GetStaticInstruction)instruction;final Object value=getStaticInstruction.getValue();if (value != null) runtimeStack.push(new Element(getStaticInstruction.getPropertyType(),value)); else runtimeStack.push(new Element(getStaticInstruction.getPropertyType()));break;case LOAD:final LoadInstruction loadInstruction=(LoadInstruction)instruction;runtimeStack.push(localVariables.getOrDefault(loadInstruction.getNumber(),new Element(loadInstruction.getVariableType())));runtimeStack.peek().getTypes().add(loadInstruction.getVariableType());break;case STORE:simulateStore((StoreInstruction)instruction);break;case SIZE_CHANGE:simulateSizeChange((SizeChangingInstruction)instruction);break;case NEW:final NewInstruction newInstruction=(NewInstruction)instruction;runtimeStack.push(new Element(toType(newInstruction.getClassName())));break;case DUP:runtimeStack.push(runtimeStack.peek());break;case OTHER:break;case RETURN:mergeReturnElement(runtimeStack.pop());case THROW:mergePossibleResponse();runtimeStack.clear();break;default :throw new IllegalArgumentException("Instruction without type!");}}  }
class C{  public ServerBW(int bandwidth){  super(Type.STREAM_CONTROL);  this.bandwidth=bandwidth;}  }
class C{  public static Reflect on(String name) throws ReflectException {  return on(forName(name));}  }
class C{  public void stopAndWaitForClientOnThread(long ms){  if (clientRunningOnThread != null && clientRunningOnThread.isAlive()) {    clientRunningOnThread.interrupt();  }  long start=System.currentTimeMillis();  while ((System.currentTimeMillis() - start) < ms) {    if (clientRunningOnThread != null && clientRunningOnThread.isAlive()) {      try {        clientRunningOnThread.join(ms - (System.currentTimeMillis() - start));        break;      } catch (      InterruptedException e) {      }    } else {      break;    }  }  if (clientRunningOnThread != null && clientRunningOnThread.isAlive()) {    throw new AssertionError("clientRunningOnThread is alive even after waiting " + ms + "ms");  }}  }
class C{  public boolean hasProperInteriorIntersection(){  return hasProperInterior;}  }
class C{  public static void initKeys(KeyStore keystore,Properties props){  if (props.containsKey(Configuration.WEBCALL_KAFKA_AES)) {    byte[] key=keystore.decodeKey(props.getProperty(Configuration.WEBCALL_KAFKA_AES));    Preconditions.checkArgument((16 == key.length || 24 == key.length || 32 == key.length),Configuration.WEBCALL_KAFKA_AES + " MUST be 128, 192 or 256 bits long.");    keystore.setKey(KeyStore.AES_KAFKA_WEBCALL,key);    aesKey=key;  }  if (props.containsKey(Configuration.WEBCALL_KAFKA_MAC)) {    byte[] key=keystore.decodeKey(props.getProperty(Configuration.WEBCALL_KAFKA_MAC));    Preconditions.checkArgument((16 == key.length),Configuration.WEBCALL_KAFKA_MAC + " MUST be 128 bits long.");    keystore.setKey(KeyStore.SIPHASH_KAFKA_WEBCALL,key);    siphashKey=key;  }}  }
class C{  public XYSeries toXYSeries(){  XYSeries xySeries=new XYSeries(mTitle);  return xySeries;}  }
class C{  public static void cleanVehicles(TransitSchedule schedule,Vehicles vehicles){  log.info("Removing not used vehicles...");  int removed=0;  final Set<Id<Vehicle>> usedVehicles=new HashSet<>();  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      for (      Departure departure : transitRoute.getDepartures().values()) {        usedVehicles.add(departure.getVehicleId());      }    }  }  for (  Id<Vehicle> vehicleId : new HashSet<>(vehicles.getVehicles().keySet())) {    if (!usedVehicles.contains(vehicleId)) {      vehicles.removeVehicle(vehicleId);      removed++;    }  }  log.info(removed + " vehicles removed");}  }
class C{  @VisibleForTesting protected boolean isChromeBeingUsed(){  boolean isChromeVisible=ApplicationStatus.hasVisibleActivities();  boolean isScreenOn=ApiCompatibilityUtils.isInteractive(mApplicationContext);  return isChromeVisible && isScreenOn;}  }
class C{  private void evaluate() throws OperatorException {  inExtender.passCloneThrough();  getSubprocess(0).execute();  Tools.buildAverages(performancePortExtender);}  }
class C{  public Measurement convert(Reading r,Point3d guess){  this.Xt=guess.x;  this.Yt=guess.y;  this.Zt=guess.z;  return convert(r);}  }
class C{  private boolean isContained(TreeNode parent,String[] values,int lvl){  if (lvl == values.length) {    return true;  } else   if (lvl > values.length) {    return false;  } else {    Vector<TreeNode> kids=parent.children;    int index=search(kids,values[lvl]);    if (index != -1) {      TreeNode newParent=kids.elementAt(index);      return isContained(newParent,values,lvl + 1);    } else {      return false;    }  }}  }
class C{  public void trimToSize(int maxSize){  while (true) {    K key;    V value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<K,V> toEvict=map.entrySet().iterator().next();      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=safeSizeOf(key,value);      evictionCount++;    }    entryRemoved(true,key,value,null);  }}  }
class C{  void add(BigIntPolynomial b,BigInteger modulus){  add(b);  mod(modulus);}  }
class C{  @Override public synchronized void close() throws SQLException {  try {    debugCodeCall("close");    if (session == null) {      return;    }    session.cancel();    if (executingStatement != null) {      try {        executingStatement.cancel();      } catch (      NullPointerException e) {      }    }synchronized (session) {      try {        if (!session.isClosed()) {          try {            closePreparedCommands();          }  finally {            session.close();          }        }      }  finally {        session=null;      }    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public void addCertificatesAndCRLs(CertStore certStore) throws CertStoreException, CMSException {  certs.addAll(CMSUtils.getCertificatesFromStore(certStore));  crls.addAll(CMSUtils.getCRLsFromStore(certStore));}  }
class C{  public boolean isNaturallySwitchableTo(SoftwareVersion to){  if (equals(to)) {    return false;  }  int minorIdx=versionTuple.length - 1;  for (int idx=0; idx < minorIdx; idx++) {    if (to.versionTuple[idx] != versionTuple[idx]) {      return false;    }  }  return true;}  }
class C{  public synchronized int indexOf(Object elem,int index){  if (elem == null) {    for (int i=index; i < elementCount; i++)     if (elementData[i] == null)     return i;  } else {    for (int i=index; i < elementCount; i++)     if (elem.equals(elementData[i]))     return i;  }  return -1;}  }
class C{  public RandomBallCoverOneShot(List<V> vecs,DistanceMetric dm,int s){  this(vecs,dm,s,new FakeExecutor());}  }
class C{  @SuppressWarnings("unused") @Test public void testBottomUpExitSequence_ThreeLevels(){  Statechart sc=setUpDeepExitSC();  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s=assertedState(flow,0,"sc.r.s");  ExecutionState _s1a=assertedState(flow,1,"sc.r.s._1.a");  ExecutionState _s1a1a=assertedState(flow,2,"sc.r.s._1.a._1.a");  ExecutionState _s1a1a1a=assertedState(flow,3,"sc.r.s._1.a._1.a._1.a");  ExecutionState _s1a1a2a=assertedState(flow,4,"sc.r.s._1.a._1.a._2.a");  ExecutionState _s1a2a=assertedState(flow,5,"sc.r.s._1.a._2.a");  ExecutionState _s1a2a1a=assertedState(flow,6,"sc.r.s._1.a._2.a._1.a");  ExecutionState _s1a2a2a=assertedState(flow,7,"sc.r.s._1.a._2.a._2.a");  ExecutionState _s2a=assertedState(flow,8,"sc.r.s._2.a");  ExecutionState _s2a1a=assertedState(flow,9,"sc.r.s._2.a._1.a");  ExecutionState _s2a1a1a=assertedState(flow,10,"sc.r.s._2.a._1.a._1.a");  ExecutionState _s2a1a2a=assertedState(flow,11,"sc.r.s._2.a._1.a._2.a");  ExecutionState _s2a2a=assertedState(flow,12,"sc.r.s._2.a._2.a");  ExecutionState _s2a2a1a=assertedState(flow,13,"sc.r.s._2.a._2.a._1.a");  ExecutionState _s2a2a2a=assertedState(flow,14,"sc.r.s._2.a._2.a._2.a");  ExecutionState _b=assertedState(flow,15,"sc.r.b");  Sequence _exit=_s.getExitSequence();  assertEquals("wrong steps: " + stepListAsString(_exit),3,_exit.getSteps().size());  assertCall(_exit,0,_s1a.getSuperScope().getExitSequence());  assertCall(_exit,1,_s2a.getSuperScope().getExitSequence());  assertCall(_exit,2,_s.getExitAction());}  }
class C{  @SafeVarargs public static <I,O>Flux<O> zip(final Function<? super Object[],? extends O> combinator,Publisher<? extends I>... sources){  return zip(combinator,QueueSupplier.XS_BUFFER_SIZE,sources);}  }
class C{  public void tokenCountsClear(){  hamTokenCounts.clear();  spamTokenCounts.clear();}  }
class C{  private void insertLocation(Track track,Location location,Location lastValidTrackPoint){  if (location == null) {    Log.w(TAG,"Ignore insertLocation. loation is null.");    return;  }  if (lastValidTrackPoint != null && lastValidTrackPoint.getTime() == location.getTime()) {    Log.w(TAG,"Ignore insertLocation. location time same as last valid track point time.");    return;  }  try {    Uri uri=myTracksProviderUtils.insertTrackPoint(location,track.getId());    long trackPointId=Long.parseLong(uri.getLastPathSegment());    ActivityType activityType=CalorieUtils.getActivityType(context,track.getCategory());    trackTripStatisticsUpdater.addLocation(location,recordingDistanceInterval,true,activityType,weight);    markerTripStatisticsUpdater.addLocation(location,recordingDistanceInterval,true,activityType,weight);    updateRecordingTrack(track,trackPointId,LocationUtils.isValidLocation(location));  } catch (  SQLiteException e) {    Log.w(TAG,"SQLiteException",e);  }  voiceExecutor.update();  splitExecutor.update();  sendTrackBroadcast(R.string.track_update_broadcast_action,track.getId());}  }
class C{  public void deleteRow(RowState rowState,RowIdImpl rowId) throws IOException {  requireValidRowId(rowId);  getPageChannel().startWrite();  try {    ByteBuffer rowBuffer=positionAtRowHeader(rowState,rowId);    if (rowState.isDeleted()) {      return;    }    requireNonDeletedRow(rowState,rowId);    int pageNumber=rowState.getHeaderRowId().getPageNumber();    int rowNumber=rowState.getHeaderRowId().getRowNumber();    Object[] rowValues=null;    if (!_indexDatas.isEmpty()) {      rowBuffer=positionAtRowData(rowState,rowId);      for (      ColumnImpl idxCol : _indexColumns) {        getRowColumn(getFormat(),rowBuffer,idxCol,rowState,null);      }      rowValues=rowState.getRowCacheValues();      _fkEnforcer.deleteRow(rowValues);      rowBuffer=positionAtRowHeader(rowState,rowId);    }    int rowIndex=getRowStartOffset(rowNumber,getFormat());    rowBuffer.putShort(rowIndex,(short)(rowBuffer.getShort(rowIndex) | DELETED_ROW_MASK | OVERFLOW_ROW_MASK));    writeDataPage(rowBuffer,pageNumber);    for (    IndexData indexData : _indexDatas) {      indexData.deleteRow(rowValues,rowId);    }    updateTableDefinition(-1);  }  finally {    getPageChannel().finishWrite();  }}  }
class C{  public void subSetUp() throws Exception {}  }
class C{  public void applyTemplates(List<Node> list) throws Exception {  applyTemplates(list,this.modeName);}  }
class C{  private Dops(){}  }
class C{  public void addRangeRestriction(String ColumnName,Object Code,Object Code_to,String InfoName,String InfoDisplay,String InfoDisplay_to,boolean andCondition,int depth){  Restriction r=new Restriction(ColumnName,Code,Code_to,InfoName,InfoDisplay,InfoDisplay_to,andCondition,depth);  m_list.add(r);}  }
class C{  public void drawQuads(GL10 gl){  draw(gl,totalQuads_);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TYPE_ALIAS__TYPE:    if (resolve)     return getType();  return basicGetType();case TypesPackage.TYPE_ALIAS__TYPE_SPECIFIER:return getTypeSpecifier();case TypesPackage.TYPE_ALIAS__NAME:return getName();case TypesPackage.TYPE_ALIAS__ANNOTATIONS:return getAnnotations();case TypesPackage.TYPE_ALIAS__ID:return getId();case TypesPackage.TYPE_ALIAS__CONSTRAINT:return getConstraint();case TypesPackage.TYPE_ALIAS__ABSTRACT:return isAbstract();case TypesPackage.TYPE_ALIAS__VISIBLE:return isVisible();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void removeContributor(ChooseByNameContributor contributor){  myGotoClassContributors.remove(contributor);  myGotoSymbolContributors.remove(contributor);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.863 -0500",hash_original_method="73596E36061F6AD3279B28A01C976EEF",hash_generated_method="DC8D0DC8B22C81089826E8C3560CD49B") public BatteryInfo(Parcel in){  usagePercent=in.readInt();  durationMicros=in.readLong();  usageDetails=in.readString();  checkinDetails=in.readString();}  }
class C{  private void removeMembers(List<String> members){  if (members.isEmpty()) {    return;  }  int startIndex=-1;  int endIndex=-1;  for (  String name : members) {    Member member=memberMap.remove(name);    int index=memberList.indexOf(member);    memberList.remove(index);    if (startIndex == -1) {      startIndex=index;      endIndex=index;    } else {      startIndex=Math.min(startIndex,index);      endIndex=Math.max(endIndex,index);    }  }  fireIntervalRemoved(this,startIndex,endIndex);}  }
class C{  public static Integer valueOf(String string) throws NumberFormatException {  return valueOf(parseInt(string));}  }
class C{  public static int addressLength(int family){  if (family == IPv4)   return 4;  if (family == IPv6)   return 16;  throw new IllegalArgumentException("unknown address family");}  }
class C{  protected GroupExpression(String group){  m_group=new ObjectLiteral(group);}  }
class C{  public boolean isValid(){  return m_valid;}  }
class C{  public ConverterException(FacesMessage message,Throwable cause){  super(message.getSummary(),cause);  this.facesMessage=message;}  }
class C{  private List<Set<IonIndependenceFacts>> findSepAndAssoc(Graph graph){  Set<IonIndependenceFacts> separations=new HashSet<>();  Set<IonIndependenceFacts> associations=new HashSet<>();  List<NodePair> allNodes=allNodePairs(graph.getNodes());  for (  NodePair pair : allNodes) {    Node x=pair.getFirst();    Node y=pair.getSecond();    List<Node> variables=new ArrayList<>(graph.getNodes());    variables.remove(x);    variables.remove(y);    List<Set<Node>> subsets=SearchGraphUtils.powerSet(variables);    IonIndependenceFacts indep=new IonIndependenceFacts(x,y,new HashSet<List<Node>>());    IonIndependenceFacts assoc=new IonIndependenceFacts(x,y,new HashSet<List<Node>>());    boolean addIndep=false;    boolean addAssoc=false;    for (    Graph pag : input) {      for (      Set<Node> subset : subsets) {        if (containsAll(pag,subset,pair)) {          Node pagX=pag.getNode(x.getName());          Node pagY=pag.getNode(y.getName());          ArrayList<Node> pagSubset=new ArrayList<>();          for (          Node node : subset) {            pagSubset.add(pag.getNode(node.getName()));          }          if (pag.isDSeparatedFrom(pagX,pagY,new ArrayList<>(pagSubset))) {            if (!pag.isAdjacentTo(pagX,pagY)) {              addIndep=true;              indep.addMoreZ(new ArrayList<>(subset));            }          } else {            addAssoc=true;            assoc.addMoreZ(new ArrayList<>(subset));          }        }      }    }    if (addIndep)     separations.add(indep);    if (addAssoc)     associations.add(assoc);  }  List<Set<IonIndependenceFacts>> facts=new ArrayList<>(2);  facts.add(0,separations);  facts.add(1,associations);  return facts;}  }
class C{  @Override public String header(String key){  CharSegment buf=getHeaderBuffer(key);  if (buf != null)   return buf.toString(); else   return null;}  }
class C{  static Integer toInteger(String text){  if (text == null) {    return null;  }  return new Integer(text);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.583 -0500",hash_original_method="D39116CA0B2556B236E2A719F71CCF2D",hash_generated_method="AFB55EFC777A028E15A3C37CA4364508") public TriangleMeshBuilder addVertex(float x,float y){  if (mVtxSize != 2) {    throw new IllegalStateException("add mistmatch with declared components.");  }  makeSpace(2);  mVtxData[mVtxCount++]=x;  mVtxData[mVtxCount++]=y;  latch();  return this;}  }
class C{  public void skip(int bits){  possExpand(bits);  mPos+=bits;}  }
class C{  public UniqueIdFactory(final String prefix){  this.prefix=prefix;}  }
class C{  public Data(final String name,final String code,final int numericCode,final String symbol,final String fractionSymbol,final int fractionsPerUnit,final Rounding rounding,final String formatString,final Currency triangulationCurrency){  this.name=(name);  this.code=(code);  this.numeric=(numericCode);  this.symbol=(symbol);  this.fractionSymbol=(fractionSymbol);  this.fractionsPerUnit=(fractionsPerUnit);  this.rounding=(rounding);  this.triangulated=(triangulationCurrency);  this.formatString=(formatString);}  }
class C{  public TreeViewerBuilder input(Object input){  viewer.setInput(input);  return this;}  }
class C{  public final void test() throws Exception {  System.out.println("PredicateFeatures Feature Extractor");  String[] viewsToAdd={ViewNames.POS,ViewNames.LEMMA,ViewNames.SHALLOW_PARSE,ViewNames.PARSE_GOLD,ViewNames.SRL_VERB,ViewNames.PARSE_STANFORD,ViewNames.NER_CONLL};  TextAnnotation ta=DummyTextAnnotationGenerator.generateAnnotatedTextAnnotation(viewsToAdd,true,3);  int i=0;  ta.addView(ClauseViewGenerator.STANFORD);  ta.addView(PseudoParse.STANFORD);  System.out.println("This textannotation annotates the text: \n" + ta.getText());  View SRL_VERB=ta.getView("SRL_VERB");  List<Constituent> testlist=SRL_VERB.getConstituentsCoveringSpan(10,13);  testlist.addAll(SRL_VERB.getConstituentsCoveringSpan(26,27));  FeatureManifest featureManifest;  FeatureExtractor fex;  String fileName=Constant.prefix + "/Nom/Classifier/predicate-features.fex";  featureManifest=new FeatureManifest(new FileInputStream(fileName));  FeatureManifest.setFeatureExtractor("hyphen-argument-feature",FeatureGenerators.hyphenTagFeature);  FeatureManifest.setTransformer("parse-left-sibling",FeatureGenerators.getParseLeftSibling(ViewNames.PARSE_STANFORD));  FeatureManifest.setTransformer("parse-right-sibling",FeatureGenerators.getParseRightSibling(ViewNames.PARSE_STANFORD));  FeatureManifest.setFeatureExtractor("pp-features",FeatureGenerators.ppFeatures(ViewNames.PARSE_STANFORD));  FeatureManifest.setFeatureExtractor("projected-path",new ProjectedPath(ViewNames.PARSE_STANFORD));  featureManifest.useCompressedName();  featureManifest.setVariable("*default-parser*",ViewNames.PARSE_STANFORD);  fex=featureManifest.createFex();  SrlNomClassifierPredicateFeatures pf=new SrlNomClassifierPredicateFeatures();  for (  Constituent test : testlist) {    assertTrue(SRLFeaturesComparator.isEqual(test,fex,pf));  }}  }
class C{  public void remove(JMenuItem item){  if (popupMenu != null)   popupMenu.remove(item);}  }
class C{  public static NV[] concat(final NV[] a,final NV[] b){  if (a == null && b == null)   return a;  if (a == null)   return b;  if (b == null)   return a;  final NV[] c=new NV[a.length + b.length];  System.arraycopy(a,0,c,0,a.length);  System.arraycopy(b,0,c,a.length,b.length);  return c;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener pcl){  super.addPropertyChangeListener(pcl);  pcl.propertyChange(new PropertyChangeEvent(this,LayersProperty,currentLayers,currentLayers));  pcl.propertyChange(new PropertyChangeEvent(this,CursorProperty,this.getCursor(),this.getCursor()));  pcl.propertyChange(new PropertyChangeEvent(this,BackgroundProperty,this.getBckgrnd(),this.getBckgrnd()));}  }
class C{  @Override public void zoomDomainAxes(double lowerPercent,double upperPercent,PlotRenderingInfo state,Point2D source){}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  public AdbStreamReader(InputStream is,LoggerPan logger,String streamType){  this.is=is;  this.logger=logger;  this.streamType=streamType;}  }
class C{  public long count(){  return count;}  }
class C{  public void sign(SigningCtx securityCtx) throws Exception {  LOG.trace("sign()");  endAttachments();  signer.sign(securityCtx);  SignatureData sd=signer.getSignatureData();  if (sd.isBatchSignature()) {    hashChain(sd.getHashChainResult(),sd.getHashChain());  }  signature(sd.getSignatureXml());}  }
class C{  public Explosion(Entity source,GlowWorld world,double x,double y,double z,float power,boolean incendiary,boolean breakBlocks){  this(source,new Location(world,x,y,z),power,incendiary,breakBlocks);}  }
class C{  public static Intent createStartIntent(Context context,AuthorizationRequest request,Intent authIntent,PendingIntent completeIntent,PendingIntent cancelIntent){  Intent intent=createBaseIntent(context);  intent.putExtra(KEY_AUTH_INTENT,authIntent);  intent.putExtra(KEY_AUTH_REQUEST,request.jsonSerializeString());  intent.putExtra(KEY_COMPLETE_INTENT,completeIntent);  intent.putExtra(KEY_CANCEL_INTENT,cancelIntent);  return intent;}  }
class C{  private byte[] toJPG(RenderedImage image) throws IOException {  return ImageGraphics2D.toByteArray(image,ImageConstants.JPG,ImageConstants.ENCODING_ASCII85,null);}  }
class C{  public synchronized final Scheme unregister(String name){  if (name == null)   throw new IllegalArgumentException("Name must not be null.");  Scheme gone=registeredSchemes.remove(name);  return gone;}  }
class C{  public void testBug19615() throws Exception {  createTable("testBug19615","(field1 DECIMAL(19, 12))");  BigDecimal dec=new BigDecimal("1.234567");  this.pstmt=this.conn.prepareStatement("INSERT INTO testBug19615 VALUES (?)");  this.pstmt.setObject(1,dec,Types.DECIMAL);  this.pstmt.executeUpdate();  this.pstmt.close();  this.rs=this.stmt.executeQuery("SELECT field1 FROM testBug19615");  this.rs.next();  assertEquals(dec,this.rs.getBigDecimal(1).setScale(6));  this.rs.close();  this.stmt.executeUpdate("TRUNCATE TABLE testBug19615");  this.pstmt=((com.mysql.jdbc.Connection)this.conn).clientPrepareStatement("INSERT INTO testBug19615 VALUES (?)");  this.pstmt.setObject(1,dec,Types.DECIMAL);  this.pstmt.executeUpdate();  this.pstmt.close();  this.rs=this.stmt.executeQuery("SELECT field1 FROM testBug19615");  this.rs.next();  assertEquals(dec,this.rs.getBigDecimal(1).setScale(6));  this.rs.close();}  }
class C{  public static Completion of(String value){  return new SimpleCompletion(value,"");}  }
class C{  public static DataflowRunner fromOptions(PipelineOptions options){  IOChannelUtils.registerStandardIOFactories(options);  DataflowPipelineOptions dataflowOptions=PipelineOptionsValidator.validate(DataflowPipelineOptions.class,options);  ArrayList<String> missing=new ArrayList<>();  if (dataflowOptions.getAppName() == null) {    missing.add("appName");  }  if (missing.size() > 0) {    throw new IllegalArgumentException("Missing required values: " + Joiner.on(',').join(missing));  }  PathValidator validator=dataflowOptions.getPathValidator();  checkArgument(!isNullOrEmpty(dataflowOptions.getGcpTempLocation()),"DataflowRunner requires gcpTempLocation, and it is missing in PipelineOptions.");  validator.validateOutputFilePrefixSupported(dataflowOptions.getGcpTempLocation());  checkArgument(!isNullOrEmpty(dataflowOptions.getStagingLocation()),"DataflowRunner requires stagingLocation, and it is missing in PipelineOptions.");  validator.validateOutputFilePrefixSupported(dataflowOptions.getStagingLocation());  if (dataflowOptions.getFilesToStage() == null) {    dataflowOptions.setFilesToStage(detectClassPathResourcesToStage(DataflowRunner.class.getClassLoader()));    LOG.info("PipelineOptions.filesToStage was not specified. " + "Defaulting to files from the classpath: will stage {} files. " + "Enable logging at DEBUG level to see which files will be staged.",dataflowOptions.getFilesToStage().size());    LOG.debug("Classpath elements: {}",dataflowOptions.getFilesToStage());  }  String jobName=dataflowOptions.getJobName().toLowerCase();  checkArgument(jobName.matches("[a-z]([-a-z0-9]*[a-z0-9])?"),"JobName invalid; the name must consist of only the characters " + "[-a-z0-9], starting with a letter and ending with a letter " + "or number");  if (!jobName.equals(dataflowOptions.getJobName())) {    LOG.info("PipelineOptions.jobName did not match the service requirements. " + "Using {} instead of {}.",jobName,dataflowOptions.getJobName());  }  dataflowOptions.setJobName(jobName);  String project=dataflowOptions.getProject();  if (project.matches("[0-9]*")) {    throw new IllegalArgumentException("Project ID '" + project + "' invalid. Please make sure you specified the Project ID, not project number.");  } else   if (!project.matches(PROJECT_ID_REGEXP)) {    throw new IllegalArgumentException("Project ID '" + project + "' invalid. Please make sure you specified the Project ID, not project description.");  }  DataflowPipelineDebugOptions debugOptions=dataflowOptions.as(DataflowPipelineDebugOptions.class);  if (debugOptions.getNumberOfWorkerHarnessThreads() < 0) {    throw new IllegalArgumentException("Number of worker harness threads '" + debugOptions.getNumberOfWorkerHarnessThreads() + "' invalid. Please make sure the value is non-negative.");  }  if (dataflowOptions.isStreaming() && dataflowOptions.getGcsUploadBufferSizeBytes() == null) {    dataflowOptions.setGcsUploadBufferSizeBytes(GCS_UPLOAD_BUFFER_SIZE_BYTES_DEFAULT);  }  return new DataflowRunner(dataflowOptions);}  }
class C{  public TaskList linkApplicationSnapshotSession(URI id,VolumeGroupSnapshotSessionLinkTargetsParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_LINK_SNAPSHOT_SESSION_URL);  return client.postURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  public int size(){  return delegate.size();}  }
class C{  public void disconnect(String clientHandle,long quiesceTimeout,String invocationContext,String activityToken){  MqttConnection client=getConnection(clientHandle);  client.disconnect(quiesceTimeout,invocationContext,activityToken);  connections.remove(clientHandle);  stopSelf();}  }
class C{  private static void assertModifiers(int mods,int required){  if ((mods & required) != required) {    throw new CompilerError("illegal class modifiers");  }}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  private void extractType(Map<String,Object> tuple){  recordType.put(LogstreamUtil.LOG_TYPE,(Number)tuple.get(LogstreamUtil.LOG_TYPE));  recordType.put(LogstreamUtil.FILTER,(Number)tuple.get(LogstreamUtil.FILTER));}  }
class C{  public final void remove(ASTNode node,TextEditGroup editGroup){  if (node == null) {    throw new IllegalArgumentException();  }  StructuralPropertyDescriptor property;  ASTNode parent;  if (RewriteEventStore.isNewNode(node)) {    PropertyLocation location=this.eventStore.getPropertyLocation(node,RewriteEventStore.NEW);    if (location != null) {      property=location.getProperty();      parent=location.getParent();    } else {      throw new IllegalArgumentException("Node is not part of the rewriter's AST");    }  } else {    property=node.getLocationInParent();    parent=node.getParent();  }  if (property.isChildListProperty()) {    getListRewrite(parent,(ChildListPropertyDescriptor)property).remove(node,editGroup);  } else {    set(parent,property,null,editGroup);  }}  }
class C{  public GitHubRepositoryList createRepositoriesList() throws IOException {  return DtoFactory.getInstance().createDto(GitHubRepositoryList.class);}  }
class C{  private void heapifyUp(int i){  int iP=parent(i);  while (i != 0 && cmp(i,iP) < 0) {    swapHeapValues(iP,i);    i=iP;    iP=parent(i);  }}  }
class C{  public static ScreenSlidePageFragment create(int pageNumber){  ScreenSlidePageFragment fragment=new ScreenSlidePageFragment();  Bundle args=new Bundle();  args.putInt(ARG_PAGE,pageNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public String toString(){  StringBuilder strb=new StringBuilder("Accessors ");  if (isStatic()) {    strb.append("static ");  }  strb.append(this.name);  strb.append(": ");  StringBuilder members=new StringBuilder();  append(members,getter,"");  append(members,setter,"");  append(members,inheritedGetter,"*");  append(members,inheritedSetter,"*");  strb.append(members);  return strb.toString();}  }
class C{  public UserMapping asUserMapping(){  return user_mapping;}  }
class C{  @Override public void clear(){  super.clear();  head=tail=null;}  }
class C{  @Override public int analyseProtocol(){  logging.log(getClass(),"\nAnalyse: " + getProtocol() + " with ID: "+ getToken(),Logging.DEBUG);  ArrayList<SSOProtocol> last_protocolflow=SSOProtocol.getLastProtocolFlow();  if (last_protocolflow != null) {    double listsize=(double)last_protocolflow.size();    double protocol=0;    double token=0;    long tmp=0;    long curr_time=0;    long last_time=0;    boolean wait=true;    for (    SSOProtocol sso : last_protocolflow) {      if (sso.getProtocol().substring(0,5).equals(this.getProtocol().substring(0,5))) {        logging.log(getClass(),sso.getProtocol(),Logging.DEBUG);        protocol++;      }      if (sso.getToken().equals(this.getToken())) {        logging.log(getClass(),sso.getToken(),Logging.DEBUG);        token++;      }      if (wait) {        wait=false;      } else {        curr_time=sso.getTimestamp();        tmp+=curr_time - last_time;        logging.log(getClass(),"Diff: " + (curr_time - last_time),Logging.DEBUG);      }      last_time=sso.getTimestamp();    }    if (listsize >= 0) {      double diff_time=((double)tmp / listsize);      double curr_diff_time=getTimestamp() - last_protocolflow.get(last_protocolflow.size() - 1).getTimestamp();      double time_bonus=0;      logging.log(getClass(),"CurrDiff:" + curr_diff_time + " Diff:"+ diff_time,Logging.DEBUG);      if (curr_diff_time <= (diff_time + 4000)) {        time_bonus=0.35;      }      double prob=((protocol / listsize) + (token / listsize) * 2) / 3 + (time_bonus);      logging.log(getClass(),"Probability: " + prob,Logging.DEBUG);      if (prob >= 0.6) {        return getIDOfLastList();      }    }  }  return newProtocolflowID();}  }
class C{  public boolean isInside(Geo v2,double radius,Geo p){  Geo tmp=new Geo();  Geo gc=this.crossNormalize(v2,tmp);  if (Math.abs(gc.dot(p)) > Math.cos((Math.PI / 2.0) - radius))   return false;  if (this.distance(p) <= radius || v2.distance(p) <= radius)   return true;  Geo d=v2.subtract(this,tmp);  double L=d.length();  Geo n=d.normalize(tmp);  Geo dp=p.subtract(this,new Geo());  double size=n.dot(dp);  return (0 <= size && size <= L);}  }
class C{  public boolean overlaps(Rectangle r1,Rectangle r2){  return getDistance(r1.getX(),r2.getX() + r2.getWidth()) < r1.getWidth() + r2.getWidth() && getDistance(r1.getY(),r2.getY() + r2.getHeight()) < r1.getHeight() + r2.getHeight();}  }
class C{  private FgsRunner.Type computeType(){  Object model=getDataModel();  if (model == null && getSourceGraph() != null) {    model=getSourceGraph();  }  if (model == null) {    throw new RuntimeException("Data source is unspecified. You may need to double click all your data boxes, \n" + "then click Save, and then right click on them and select Propagate Downstream. \n" + "The issue is that we use a seed to simulate from IM's, so your data is not saved to \n"+ "file when you save the session. It can, however, be recreated from the saved seed.");  }  if (model instanceof Graph) {    type=FgsRunner.Type.GRAPH;  } else   if (model instanceof DataSet) {    DataSet dataSet=(DataSet)model;    if (dataSet.isContinuous()) {      type=FgsRunner.Type.CONTINUOUS;    } else     if (dataSet.isDiscrete()) {      type=FgsRunner.Type.DISCRETE;    } else {      throw new IllegalStateException("Data set must either be continuous or discrete.");    }  } else   if (model instanceof ICovarianceMatrix) {    type=FgsRunner.Type.CONTINUOUS;  } else   if (model instanceof DataModelList) {    DataModelList list=(DataModelList)model;    if (allContinuous(list)) {      type=FgsRunner.Type.CONTINUOUS;    } else     if (allDiscrete(list)) {      type=FgsRunner.Type.DISCRETE;    } else {      throw new IllegalArgumentException("Data must be either all discrete or all continuous.");    }  }  return type;}  }
class C{  private String badArrive(long s){  return "Attempted arrival of unregistered party for " + stateToString(s);}  }
class C{  public RepeatIterator(@NotNull T single){  master=new ArrayList<T>(1);  master.add(single);  source=master.iterator();}  }
class C{  protected AnyBreakpointHitReply(final int packetId,final int errorCode,final long tid,final RegisterValues registerValues){  super(packetId,errorCode);  if (success()) {    Preconditions.checkNotNull(registerValues,"IE01054: Register values argument can not be null");    boolean foundThread=false;    for (    final ThreadRegisters threadRegisters : registerValues) {      if (threadRegisters.getTid() == tid) {        foundThread=true;      }    }    if (!foundThread) {      throw new IllegalArgumentException("IE01301: Invalid thread ID");    }  } else {    if (registerValues != null) {      throw new IllegalArgumentException("IE01055: Register values argument must be null");    }  }  this.threadId=tid;  this.registerValues=registerValues;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("Tax=(");  sb.append(m_name);  sb.append(" Amt=").append(m_amount);  sb.append(")");  return sb.toString();}  }
class C{  public ToStringBuilder append(long[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public Address country(String country){  this.country=country;  return this;}  }
class C{  public OrderedThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit){  this(corePoolSize,maximumPoolSize,keepAliveTime,unit,Executors.defaultThreadFactory(),null);}  }
class C{  private void verifyNfsACLsModifyOrDeleteList(List<NfsACE> changeList,Set<String> userSet){  validateNfsAceSyntax(changeList);  for (  NfsACE ace : changeList) {    if (!userSet.contains(ace.getUser())) {      throw APIException.badRequests.nfsACLNotFound("modify or delete",ace.getUser());    }  }}  }
class C{  private static void install(X509Certificate x,String alias){  try {    File file=file(alias);    file.getParentFile().mkdirs();    OutputStream out=new FileOutputStream(file);    out.write(x.getEncoded());    out.close();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public static DBID generateSingleDBID(){  return DBIDFactory.FACTORY.generateSingleDBID();}  }
class C{  public void add(final Sensor sensor){  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);  boolean rv=selection.add(sensor);  if (rv) {    fireSelectionChanged(oldSelection,selection);  }}  }
class C{  public boolean deleteFriendBytes(byte[] friend){  if (friend == null) {    throw new IllegalArgumentException("Null friend deleted through addFriendBytes()");  }  return deleteFriend(bytesToBase64(friend));}  }
class C{  public boolean pauseOnEvent(){  return this.pause.isSelected();}  }
class C{  public void destroy(){  EventBus.getDefault().post(new ControllerDestroyedEvent(this));  EventBus.getDefault().unregister(this);}  }
class C{  public RasterFormatException(String s){  super(s);}  }
class C{  public void startWithFragment(String fragmentName,Bundle args,Fragment resultTo,int resultRequestCode,int titleRes,int shortTitleRes){  Intent intent=onBuildStartFragmentIntent(fragmentName,args,titleRes,shortTitleRes);  if (resultTo == null) {    startActivity(intent);  } else {    resultTo.startActivityForResult(intent,resultRequestCode);  }}  }
class C{  public double loadDouble(Offset offset){  return 0;}  }
class C{  public List<String> indices(){  return indices;}  }
class C{  void writeTo(byte[] b,int off){  System.arraycopy(buf,0,b,off,count);}  }
class C{  private ScreenOverlayType createBiasErrorGraph(PtCountsType type,String kmlFilename){  int index=kmlFilename.lastIndexOf(System.getProperty("file.separator"));  if (index == -1) {    index=kmlFilename.lastIndexOf('/');  }  String outdir;  if (index == -1) {    outdir="";  } else {    outdir=kmlFilename.substring(0,index) + System.getProperty("file.separator");  }  List<CountSimComparison> countComparisonFilter;switch (type) {case Boarding:    countComparisonFilter=this.boardCountComparisonFilter.getCountsForHour(null);  break;case Alighting:countComparisonFilter=this.alightCountComparisonFilter.getCountsForHour(null);break;default :countComparisonFilter=this.occupancyCountComparisonFilter.getCountsForHour(null);}PtBiasErrorGraph pbeg=new PtBiasErrorGraph(countComparisonFilter,this.iter,null,"error graph - " + type.name());pbeg.createChart(0);double[] meanError=pbeg.getMeanRelError();double[] meanBias=pbeg.getMeanAbsBias();String file=outdir + "biasErrorGraphData" + type.name()+ ".txt";log.info("writing chart data to " + new File(file).getAbsolutePath());try {BufferedWriter bwriter=IOUtils.getBufferedWriter(file);StringBuilder buffer=new StringBuilder(100);buffer.append("hour \t mean relative error \t mean absolute bias");bwriter.write(buffer.toString());bwriter.newLine();for (int i=0; i < meanError.length; i++) {buffer.delete(0,buffer.length());buffer.append(i + 1);buffer.append('\t');buffer.append(meanError[i]);buffer.append('\t');buffer.append(meanBias[i]);bwriter.write(buffer.toString());bwriter.newLine();}bwriter.close();} catch (IOException e) {e.printStackTrace();}String chartFilename="errorGraphErrorBias" + type.name() + ".png";try {writeChartToKmz(chartFilename,pbeg.getChart());return createOverlayBottomRight(chartFilename,"Error Graph [Error/Bias]");} catch (IOException e) {e.printStackTrace();}return null;}  }
class C{  public boolean causedBy(Class type){  return causedBy(this,type);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  protected void onMeasureChild(final View child,final LayoutParams layoutParams){  int childWidthSpec=ViewGroup.getChildMeasureSpec(mWidthMeasureSpec,getListPaddingLeft() + getListPaddingRight(),layoutParams.width);  int lpHeight=layoutParams.height;  int childHeightSpec;  if (lpHeight > 0) {    childHeightSpec=MeasureSpec.makeMeasureSpec(lpHeight,MeasureSpec.EXACTLY);  } else {    childHeightSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);  }  child.measure(childWidthSpec,childHeightSpec);}  }
class C{  public void saveFile(File saveFile) throws IOException, JAXBException {  if (this.dataExportMarshaller == null) {    this.dataExportMarshaller=DataExportContext.INSTANCE.getContext().createMarshaller();    this.dataExportMarshaller.setProperty("jaxb.formatted.output",true);  }  try (FileOutputStream out=new FileOutputStream(saveFile)){    JAXBElement<GmDataExportType> element=new JAXBElement<>(new QName("","GmDataExportType"),GmDataExportType.class,this.dataExport);    this.dataExportMarshaller.marshal(element,out);  } }  }
class C{  public int doCsvDbBackup(String destination){  return db.doCsvBackup(destination);}  }
class C{  public static String digestToString(long digest){  return Long.toString(digest,Character.MAX_RADIX);}  }
class C{  private boolean submittedJobStepsRunning(){  boolean jobsteps_running=false;  for (  Future<?> future : future_map.values()) {    if (!future.isDone()) {      jobsteps_running=true;      break;    }  }  return jobsteps_running;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.369 -0500",hash_original_method="6E01C15F4CA49AC218CA465537508537",hash_generated_method="B762F6FFED7C81D37A76594E0C90C97F") public boolean addToBlacklist(String bssid){  try {    mService.addToBlacklist(bssid);    return true;  } catch (  RemoteException e) {    return false;  }}  }
class C{  public String toString(){  return "[" + getClass().getSimpleName() + ": item="+ getItem()+ "; order="+ getOrder()+ "]";}  }
class C{  private DateComparator(){}  }
class C{  @Override public Void execute(@SuppressWarnings("unused") final ExecutionEvent __){  final IProject p=getProject();  if (p == null)   return null;  try {    toggleNature(p,!p.hasNature(Nature.NATURE_ID));  } catch (  final CoreException x) {    monitor.logEvaluationError(this,x);  }  return null;}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public static String enumerateCollection(final Collection<String> collection){  if (collection == null) {    return "";  }  final String[] elements=collection.toArray(new String[collection.size()]);  String ret;  if (elements.length == 0) {    ret="";  } else   if (elements.length == 1) {    ret=quoteHash(elements[0]);  } else   if (elements.length == 2) {    ret=quoteHash(elements[0]) + " and " + quoteHash(elements[1]);  } else {    final StringBuilder sb=new StringBuilder();    for (int i=0; i < elements.length - 1; i++) {      sb.append(quoteHash(elements[i]) + ", ");    }    sb.append("and " + quoteHash(elements[elements.length - 1]));    ret=sb.toString();  }  return replaceInternalByDisplayNames(ret);}  }
class C{  private void calculateSQDataSets(){  calculateDataSets(Stat.RES_CURRENT);  final List<Chart<LineChartDataSet>> clonedChartList=new ArrayList<>(chartList.size());  for (  final Chart<LineChartDataSet> chart : chartList) {    final Chart<LineChartDataSet> clonedChart=createChart();    for (    final DataModel<LineChartDataSet> model : chart.getDataModelList()) {      final DataModel<LineChartDataSet> clonedModel=new DataModel<>(null,null);      for (      final LineChartDataSet dataSet : model.getDataSetList())       clonedModel.addDataSet(new LineChartDataSet(null,null,dataSet.getLoops(),dataSet.getValues()));      clonedChart.addModel(clonedModel);    }    clonedChartList.add(clonedChart);  }  calculateDataSets(Stat.RES_COLL_RATE);  final Map<DataModel<LineChartDataSet>,Int> modelLastCmdLoopsMap=new HashMap<>();  for (  final Event event : repProc.replay.gameEvents.events) {    if (event.id != IGameEvents.ID_CMD)     continue;    final int playerId=repProc.usersByUserId[event.userId].playerId;    if (playerId <= 0)     continue;    final DataModel<LineChartDataSet> model=modelByPlayerIds[playerId];    if (model == null)     continue;    Int lastCmdLoop=modelLastCmdLoopsMap.get(model);    if (lastCmdLoop == null)     modelLastCmdLoopsMap.put(model,lastCmdLoop=new Int());    lastCmdLoop.value=event.loop;  }  for (int chartIdx=0; chartIdx < chartList.size(); chartIdx++) {    final Chart<LineChartDataSet> chart=chartList.get(chartIdx);    final Chart<LineChartDataSet> clonedChart=clonedChartList.get(chartIdx);    for (int modelIdx=0; modelIdx < chart.getDataModelList().size(); modelIdx++) {      final DataModel<LineChartDataSet> model=chart.getDataModelList().get(modelIdx);      final DataModel<LineChartDataSet> clonedModel=clonedChart.getDataModelList().get(modelIdx);      final int lastCmdLoop=modelLastCmdLoopsMap.get(model) == null ? 0 : modelLastCmdLoopsMap.get(model).value;      for (int dataSetIdx=0; dataSetIdx < model.getDataSetList().size(); dataSetIdx++) {        final LineChartDataSet dataSet=model.getDataSetList().get(dataSetIdx);        final LineChartDataSet clonedDataSet=clonedModel.getDataSetList().get(dataSetIdx);        final int[] loops=dataSet.getLoops();        final int[] values=dataSet.getValues();        final int[] clonedValues=clonedDataSet.getValues();        long totalValues=0, totalClonedValues=0;        int totalCount=0;        for (int valueIdx=0; valueIdx < values.length; valueIdx++) {          if (loops[valueIdx] <= lastCmdLoop) {            totalClonedValues+=clonedValues[valueIdx];            totalValues+=values[valueIdx];            totalCount++;          }          values[valueIdx]=RepProcessor.calculateSQImpl(clonedValues[valueIdx],values[valueIdx]);        }        final int avgSQ=totalCount == 0 ? 0 : RepProcessor.calculateSQImpl((int)(totalClonedValues / totalCount),(int)(totalValues / totalCount));        dataSet.setTitle("SQ: " + avgSQ);        dataSet.calculateValueMax();      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:22.972 -0500",hash_original_method="B927BA6712254BD5B8D47CF220E79C5B",hash_generated_method="BD2788C82F8C0BFA5B2E437E43801942") private PreferenceLayout createPreferenceLayout(Preference preference,PreferenceLayout in){  PreferenceLayout pl=in != null ? in : new PreferenceLayout();  pl.name=preference.getClass().getName();  pl.resId=preference.getLayoutResource();  pl.widgetResId=preference.getWidgetLayoutResource();  return pl;}  }
class C{  public static void renumberPlasmidBases(ArrayList<Part> parts,int start_bp){  int current_bp=start_bp;  for (  Part part : parts) {    int start=current_bp + 1;    current_bp+=part.get_seq().length();    int end=current_bp;    part.set_start(start);    part.set_end(end);  }}  }
class C{  public void processCSVLog(String log,boolean pin){  log("Loading csv log",Level.INFO,log.length());  TextStream stream=new TextStream(log);  Network network=this.bot.memory().newMemory();  Vertex question=null;  Vertex answer=null;  boolean first=true;  while (!stream.atEnd()) {    String line=stream.nextLine().trim();    if (first && line.indexOf("<?xml") != -1) {      throw new SelfParseException("Chat log format must be text, not XML",stream);    }    first=false;    while (line.isEmpty()) {      if (stream.atEnd()) {        return;      }      question=null;      answer=null;      line=stream.nextLine().trim();      if (!line.isEmpty()) {        network=this.bot.memory().newMemory();      }    }    boolean quotes=line.contains("\"");    log("Processing csv line",Level.INFO,line);    TextStream lineStream=new TextStream(line);    if (quotes) {      lineStream.skipTo('"');      lineStream.skip();    }    if (lineStream.atEnd()) {      log("Expecting \" character",Level.WARNING,line);      continue;    }    String questionText=null;    if (quotes) {      questionText=lineStream.upToAll("\",\"").trim();      lineStream.skip("\",\"".length());    } else {      questionText=lineStream.upTo(',').trim();      lineStream.skip();    }    if (lineStream.atEnd()) {      log("Expecting \",\" characters",Level.WARNING,line);      continue;    }    log("Processing csv question",Level.INFO,questionText);    String answerText=null;    if (quotes) {      answerText=lineStream.upToAll("\"").trim();    } else {      answerText=lineStream.upTo(',').trim();    }    lineStream.skip();    log("Processing csv answer",Level.INFO,answerText);    answer=network.createSentence(answerText);    if (pin) {      answer.setPinned(true);    }    String topic="";    if (quotes) {      if (lineStream.peek() != ',') {        lineStream.skipTo('"',true);        topic=lineStream.upTo('"').trim();      }    } else {      topic=lineStream.upTo(',').trim();    }    lineStream.skip();    String keywords="";    if (quotes) {      if (lineStream.peek() != ',') {        lineStream.skipTo('"',true);        keywords=lineStream.upTo('"').trim();      }    } else {      keywords=lineStream.upTo(',').trim();    }    lineStream.skip();    String required="";    if (quotes) {      if (lineStream.peek() != ',') {        lineStream.skipTo('"',true);        required=lineStream.upTo('"').trim();      }    } else {      required=lineStream.upTo(',').trim();    }    TextStream questionStream=new TextStream(questionText);    while (!questionStream.atEnd()) {      questionText=questionStream.upTo('?',true).trim();      if (!questionText.isEmpty() && !questionText.equals("?")) {        question=network.createSentence(questionText);        if (pin) {          question.setPinned(true);        }        question.addWeakRelationship(Primitive.RESPONSE,answer,0.9f);        question.associateAll(Primitive.WORD,question,Primitive.QUESTION);        network.checkReduction(question);        question.associateAll(Primitive.SYNONYM,answer,Primitive.RESPONSE);        if (!topic.isEmpty()) {          log("Processing csv topic",Level.INFO,topic);          Language.addSentenceTopicMeta(question,answer,topic,network);        }        if (!keywords.isEmpty()) {          log("Processing csv keywords",Level.INFO,topic);          Language.addSentenceKeyWordsMeta(question,answer,keywords,network);        }        if (!required.isEmpty()) {          log("Processing csv required",Level.INFO,topic);          Language.addSentenceRequiredMeta(question,answer,required,network);        }      }    }    network.save();  }  network.save();}  }
class C{  private boolean isBugReportException(Throwable t){  return t instanceof RuntimeException || t instanceof Error;}  }
class C{  public void writeTo(OutputStream os) throws IOException {  tree.writeTo(os);}  }
class C{  public void dispose(){}  }
class C{  public CompilationUnitChange(String name,ICompilationUnit cunit){  super(name,cunit);}  }
class C{  @SuppressWarnings("unchecked") public void writeBytes(byte[] x) throws SQLException {  attribs.add(x);}  }
class C{  public static void main(String[] args){  JavapTask t=new JavapTask();  int rc=t.run(args);  System.exit(rc);}  }
class C{  public void write(OutputStream out) throws DBFException {  try {    if (this.raf == null) {      DataOutputStream outStream=new DataOutputStream(out);      this.header.numberOfRecords=v_records.size();      this.header.write(outStream);      int t_recCount=v_records.size();      for (int i=0; i < t_recCount; i++) {        Object[] t_values=(Object[])v_records.elementAt(i);        writeRecord(outStream,t_values);      }      outStream.write(END_OF_DATA);      outStream.flush();    } else {      this.header.numberOfRecords=this.recordCount;      this.raf.seek(0);      this.header.write(this.raf);      this.raf.seek(raf.length());      this.raf.writeByte(END_OF_DATA);      this.raf.close();    }  } catch (  IOException e) {    throw new DBFException(e.getMessage());  }}  }
class C{  public void enableCurlLogging(String name,int level){  if (name == null) {    throw new NullPointerException("name");  }  if (level < Log.VERBOSE || level > Log.ASSERT) {    throw new IllegalArgumentException("Level is out of range [" + Log.VERBOSE + ".."+ Log.ASSERT+ "]");  }  curlConfiguration=new LoggingConfiguration(name,level);}  }
class C{  public CHelpTextField(final IHelpInformation information){  m_information=information;}  }
class C{  private void startSyncOperation(String fileName){  FileDataStorageManager storageManager=new FileDataStorageManager(mAccount,mContext.getContentResolver());  OCFile file=storageManager.getFileByLocalPath(mPath + File.separator + fileName);  SynchronizeFileOperation sfo=new SynchronizeFileOperation(file,null,mAccount,true,mContext);  RemoteOperationResult result=sfo.execute(storageManager,mContext);  if (result.getCode() == ResultCode.SYNC_CONFLICT) {    Intent i=new Intent(mContext,ConflictsResolveActivity.class);    i.setFlags(i.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);    i.putExtra(ConflictsResolveActivity.EXTRA_FILE,file);    i.putExtra(ConflictsResolveActivity.EXTRA_ACCOUNT,mAccount);    mContext.startActivity(i);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_ACTIVITY_2__MORE_CODE_1:    getMoreCode_1().clear();  getMoreCode_1().addAll((Collection<? extends MoreCode_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected static TPS atomicRead(final IIndex ndx,final Schema schema,final Object primaryKey,final long fromTime,final long toTime,final long writeTime,final INameFilter filter){  final byte[] fromKey=schema.getPrefix(ndx.getIndexMetadata().getKeyBuilder(),primaryKey);  final TPS tps=atomicRead(ndx,fromKey,schema,fromTime,toTime,filter,new TPS(schema,writeTime));  if (tps == null) {    if (log.isInfoEnabled())     log.info("No data for primaryKey: " + primaryKey);  }  return tps;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  HideImageDao.dropTable(db,ifExists);}  }
class C{  public static void sort(long[] array){  DualPivotQuicksort.sort(array);}  }
class C{  boolean process(InputStream inputStream) throws IOException {  LOG.entering(CLASS_NAME,"process");  int b;  for (; ; ) {switch (state) {case START_OF_FRAME:      b=inputStream.read();    if (b == -1) {      return false;    }  fin=(b & 0x80) != 0;opcode=WsFrameEncodingSupport.Opcode.getById((b & 0x0f));state=DecodingState.READING_PAYLOADLENGTH;break;case READING_PAYLOADLENGTH:b=inputStream.read();if (b == -1) {return false;}masked=(b & 0x80) != 0;if (masked) {maskkeyBuf=ByteBuffer.allocate(4);}dataLength=b & 0x7f;if (dataLength == 126) {state=DecodingState.READING_PAYLOADLENGTH_EXT;payLoadLengthBuf=ByteBuffer.allocate(4);payLoadLengthBuf.put(new byte[]{0x00,0x00});} else if (dataLength == 127) {state=DecodingState.READING_PAYLOADLENGTH_EXT;payLoadLengthBuf=ByteBuffer.allocate(8);} else {state=DecodingState.READING_MASK_KEY;}break;case READING_PAYLOADLENGTH_EXT:byte[] bytes=new byte[payLoadLengthBuf.remaining()];int num=inputStream.read(bytes);if (num == -1) {return false;}payLoadLengthBuf.put(bytes,0,num);if (!payLoadLengthBuf.hasRemaining()) {payLoadLengthBuf.flip();if (payLoadLengthBuf.capacity() == 4) {dataLength=payLoadLengthBuf.getInt();} else {dataLength=(int)payLoadLengthBuf.getLong();}state=DecodingState.READING_MASK_KEY;break;}break;case READING_MASK_KEY:if (!masked) {data=ByteBuffer.allocate(dataLength);state=DecodingState.READING_PAYLOAD;break;}bytes=new byte[maskkeyBuf.remaining()];num=inputStream.read(bytes);if (num == -1) {return false;}maskkeyBuf.put(bytes,0,num);if (!maskkeyBuf.hasRemaining()) {maskkeyBuf.flip();maskkey=maskkeyBuf.getInt();data=ByteBuffer.allocate(dataLength);state=DecodingState.READING_PAYLOAD;}break;case READING_PAYLOAD:if (dataLength == 0) {state=DecodingState.END_OF_FRAME;break;}bytes=new byte[data.remaining()];num=inputStream.read(bytes);if (num == -1) {return false;}data.put(bytes,0,num);if (!data.hasRemaining()) {data.flip();state=DecodingState.END_OF_FRAME;break;}break;case END_OF_FRAME:switch (opcode) {case BINARY:if (masked) {WsFrameEncodingSupport.unmask(data,maskkey);}listener.messageReceived(data,"BINARY");break;case TEXT:if (masked) {WsFrameEncodingSupport.unmask(data,maskkey);}listener.messageReceived(data,"TEXT");break;case PING:listener.messageReceived(data,"PING");break;case PONG:break;case CLOSE:listener.messageReceived(data,"CLOSE");break;}state=DecodingState.START_OF_FRAME;break;}}}  }
class C{  public XYMultiSeriesTransition(ChartComponent chart,XYMultipleSeriesDataset dataset){  super(chart);  this.dataset=dataset;}  }
class C{  @Override public void displayNewUsage(Usage newUsage){  dataAdapter.setNewUsage(newUsage);}  }
class C{  @SuppressWarnings({"rawtypes"}) public static boolean isZipValidWebanno(File aZipFile) throws ZipException, IOException {  boolean isZipValidWebanno=false;  ZipFile zip=new ZipFile(aZipFile);  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();    if (entry.toString().replace("/","").startsWith(ImportUtil.EXPORTED_PROJECT) && entry.toString().replace("/","").endsWith(".json")) {      isZipValidWebanno=true;      break;    }  }  return isZipValidWebanno;}  }
class C{  public StrBuilder appendln(double value){  return append(value).appendNewLine();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr newAttrNode;  String attrValue;  String attrName;  int attrType;  doc=(Document)load("staff",true);  newAttrNode=doc.createAttribute("district");  attrValue=newAttrNode.getNodeValue();  assertEquals("value","",attrValue);  attrName=newAttrNode.getNodeName();  assertEquals("name","district",attrName);  attrType=(int)newAttrNode.getNodeType();  assertEquals("type",2,attrType);}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SeaGlassSplitPaneUI();}  }
class C{  public byte readByte() throws IOException {  return bfdi.readByte();}  }
class C{  synchronized void release(){  if (task != null) {    task.cancel(false);    task=null;  }  objList=null;}  }
class C{  public boolean isHasBracesAroundBody(){  return hasBracesAroundBody;}  }
class C{  private void removeRegionState(ByteArrayWrapper key,RedisDataType type){  this.preparedQueries.remove(key);  this.regions.remove(key);}  }
class C{  public void draw(Object object,Graphics2D graphics,DrawInfo2D info){  super.draw(object,graphics,info);  if (thrust > 0) {    fire.orientation=orientation;    fire.draw(object,graphics,info);  }  thrust--;}  }
class C{  private static boolean LT(PCalLocation locA,PCalLocation locB){  if (locA.getLine() == locB.getLine()) {    return locA.getColumn() < locB.getColumn();  }  return locA.getLine() < locB.getLine();}  }
class C{  public Object remove(int key){  Entry tab[]=table;  int index=(key & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.key == key) {      modCount++;      if (prev != null) {        prev.next=e.next;      } else {        tab[index]=e.next;      }      count--;      Object oldValue=e.value;      e.value=null;      return oldValue;    }  }  return null;}  }
class C{  public SimbrainScriptEditor(SimbrainDesktop desktop,final String initialText){  super(initialText);  this.desktop=desktop;}  }
class C{  private void purchaseStateChanged(Context context,String signedData,String signature){  Intent intent=new Intent(Consts.ACTION_PURCHASE_STATE_CHANGED);  intent.setClass(context,BillingService.class);  intent.putExtra(Consts.INAPP_SIGNED_DATA,signedData);  intent.putExtra(Consts.INAPP_SIGNATURE,signature);  context.startService(intent);}  }
class C{  public void dcInvert(int genomeDc[][],MersenneTwisterFast srt){  try {    int geneToModify=srt.nextInt(genomeDc.length);    int geneDc[]=genomeDc[geneToModify];    int len=geneDc.length;    if (len > 1) {      int start=srt.nextInt(len - 1);      int end=srt.nextInt(len - start - 1) + start + 1;      int temp[]=new int[end - start + 1];      for (int i=0; i < temp.length; i++)       temp[i]=geneDc[i + start];      for (int i=0; i < temp.length; i++)       geneDc[end - i]=temp[i];    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void createVehicles(TransitSchedule schedule,List<Id<TransitLine>> lineIDs,int busSeats,int standingRoom,double length,Id vehTypeId,double egressSeconds,double accessSeconds,DoorOperationMode doorOperationMode,double pcu,double maxVelocity){  if (pcu == 0.) {    log.info("Passenger car equivalents (pcu) is 0.0. Calculating a pcu value based on the given vehicle length of " + length + " meters.");    log.info("Assumptions: 1 pcu = 7.5 meters (default); Adding 3 meters on top of the vehicle length (1.5m before and behind the vehicle)");    pcu=(length + 3) / 7.5;    log.info("Calculated pcu: " + pcu);  } else {    log.warn("Ignoring vehicle length. Using pcu instead.");  }  for (  Id<TransitLine> transitLineId : lineIDs) {    log.info("Creating transit vehicles for transit line " + transitLineId);    List<Id> vehicleIDs=new ArrayList<Id>();    for (    TransitRoute transitRoute : schedule.getTransitLines().get(transitLineId).getRoutes().values()) {      for (      Departure dep : transitRoute.getDepartures().values()) {        if (vehicleIDs.contains(dep.getVehicleId())) {        } else {          vehicleIDs.add(dep.getVehicleId());        }      }    }    VehicleType type=veh.getFactory().createVehicleType(vehTypeId);    VehicleCapacity cap=veh.getFactory().createVehicleCapacity();    cap.setSeats(busSeats);    cap.setStandingRoom(standingRoom);    type.setCapacity(cap);    type.setLength(length);    type.setAccessTime(accessSeconds);    type.setEgressTime(egressSeconds);    type.setDoorOperationMode(doorOperationMode);    type.setMaximumVelocity(maxVelocity);    type.setPcuEquivalents(pcu);    veh.addVehicleType(type);    if (vehicleIDs.isEmpty()) {      throw new RuntimeException("At least 1 Bus is expected. Aborting...");    } else {      for (      Id vehicleId : vehicleIDs) {        Vehicle vehicle=veh.getFactory().createVehicle(vehicleId,veh.getVehicleTypes().get(vehTypeId));        veh.addVehicle(vehicle);      }    }  }}  }
class C{  public void addInfinite(){  mSpans=null;}  }
class C{  public static void convert(Element keymapElement) throws InvalidDataException {  if (!KEY_MAP.equals(keymapElement.getName())) {    throw new IllegalArgumentException(UNKNOWN_ELEMENT + keymapElement);  }  String version=keymapElement.getAttributeValue(VERSION);  if (version != null) {    throw new InvalidDataException(UNKNOWN_VERSION + version);  }  keymapElement.setAttribute(VERSION,Integer.toString(1));  boolean disableMnemonics=Boolean.valueOf(DISABLE_MNEMONICS).booleanValue();  keymapElement.removeAttribute(DISABLE_MNEMONICS);  keymapElement.setAttribute(DISABLE_MNEMONICS_ATTRIBUTE,Boolean.toString(disableMnemonics));  String name=keymapElement.getAttributeValue(NAME_ATTRIBUTE);  if (name == null) {    throw new InvalidDataException("Attribute 'name' of <keymap> must be specified");  }  HashMap id2elements=new HashMap();  for (Iterator i=keymapElement.getChildren().iterator(); i.hasNext(); ) {    Element oldChild=(Element)i.next();    if (BINDING.equals(oldChild.getName())) {      String id=oldChild.getAttributeValue(ID_ATTRIBUTE);      if (id == null) {        throw new InvalidDataException("attribute 'id' must be specified");      }      String keystroke=oldChild.getAttributeValue(KEYSTROKE_ATTRIBUTE);      String suffix=oldChild.getAttributeValue(SUFFIX_ATTRIBUTE);      if (keystroke != null) {        Element newChild=new Element(KEYBOARD_SHORTCUT);        newChild.setAttribute(FIRST_KEYSTROKE_ATTRIBUTE,keystroke);        if (suffix != null) {          newChild.setAttribute(SECOND_KEYSTROKE_ATTRIBUTE,suffix);        }        ArrayList elements=(ArrayList)id2elements.get(id);        if (elements == null) {          elements=new ArrayList(2);          id2elements.put(id,elements);        }        elements.add(newChild);      } else {        id2elements.put(id,new ArrayList(0));      }      i.remove();    } else     if (MOUSE_SHORTCUT.equals(oldChild.getName())) {      String id=oldChild.getAttributeValue(ID_ATTRIBUTE);      if (id == null) {        throw new InvalidDataException("Attribute 'id' of <mouse-shortcut> must be specified; keymap name=" + name);      }      oldChild.removeAttribute(ID_ATTRIBUTE);      i.remove();      ArrayList elements=(ArrayList)id2elements.get(id);      if (elements == null) {        elements=new ArrayList(2);        id2elements.put(id,elements);      }      elements.add(oldChild);    } else {      throw new InvalidDataException("unknown element : " + oldChild.getName());    }  }  for (Iterator i=id2elements.keySet().iterator(); i.hasNext(); ) {    String id=(String)i.next();    Element actionElement=new Element(ACTION);    actionElement.setAttribute(ID_ATTRIBUTE,id);    ArrayList elements=(ArrayList)id2elements.get(id);    for (Iterator j=elements.iterator(); j.hasNext(); ) {      Element newChild=(Element)j.next();      actionElement.addContent(newChild);    }    keymapElement.addContent(actionElement);  }}  }
class C{  public long partBytes(int part){  if (numberOfParts == 1) {    return length();  }  if (part < (numberOfParts - 1)) {    return partBytes;  }  return length() - (partBytes * (numberOfParts - 1));}  }
class C{  public boolean isDescendent(TarEntry desc){  return desc.getName().startsWith(getName());}  }
class C{  public InlineQueryResultCachedPhotoBuilder id(String id){  this.id=id;  return this;}  }
class C{  @Override public void cancelTask(String taskId){  String hql="select execution.parent from org.jbpm.pvm.internal.task.TaskImpl t where t.id = ?";  List<Execution> executionList=getJbpmTaskDao().findByQuery(hql,new Long[]{Long.valueOf(taskId)});  if (!executionList.isEmpty()) {    for (    Execution process : executionList) {      if (process != null && process.getId() != null) {        getExecutionService().deleteProcessInstance(process.getId());      }    }  }  hql="select execution from org.jbpm.pvm.internal.task.TaskImpl t where t.id = ?";  executionList=getJbpmTaskDao().findByQuery(hql,new Long[]{Long.valueOf(taskId)});  if (!executionList.isEmpty()) {    for (    Execution process : executionList) {      if (process != null && process.getId() != null) {        getExecutionService().deleteProcessInstance(process.getId());      }    }  }}  }
class C{  public static int parseInt(String string) throws NumberFormatException {  return parseInt(string,10);}  }
class C{  public int decode(String data,OutputStream out) throws IOException {  byte b1, b2, b3, b4;  int length=0;  int end=data.length();  while (end > 0) {    if (!ignore(data.charAt(end - 1))) {      break;    }    end--;  }  int i=0;  int finish=end - 4;  i=nextI(data,i,finish);  while (i < finish) {    b1=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b2=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b3=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b4=decodingTable[data.charAt(i++)];    if ((b1 | b2 | b3| b4) < 0) {      throw new IOException("invalid characters encountered in base64 data");    }    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    length+=3;    i=nextI(data,i,finish);  }  length+=decodeLastBlock(out,data.charAt(end - 4),data.charAt(end - 3),data.charAt(end - 2),data.charAt(end - 1));  return length;}  }
class C{  protected DeflatedChunksSet createIdatSet(String id){  return new DeflatedChunksSet(id,1024,1024);}  }
class C{  protected void createFullGeometry(DrawContext dc){  if (this.normalBuffer == null && this.mustApplyLighting(dc,null))   this.createNormals();  if (this.textureCoordsBuffer == null && this.mustApplyTexture(dc))   this.createTexCoords();  for (  Geometry geometry : this.geometries) {    if (geometry.material == null)     geometry.material=this.getMaterial(geometry);    geometry.doubleSided=this.isDoubleSided(geometry.colladaGeometry);  }}  }
class C{  private ErrorFactory(){}  }
class C{  public int read16bit(int offset){  int v1=read(offset);  int v2=read(offset + 1);  return (v1 << 8) + (v2 & 0xff);}  }
class C{  @Override public void start(){  if (!started.compareAndSet(false,true)) {    log.info("Attempting to start an already started ContainerManager");    return;  }  metrics.start();  service.onInit();  log.info("Starting YarnContainerManager.");  amClient.init(hConfig);  amClient.start();  lifecycle.onInit();  if (lifecycle.shouldShutdown()) {    clusterManagerCallback.onError(new SamzaException("Invalid resource request."));  }  log.info("Finished starting YarnContainerManager");}  }
class C{  public static Object convertToParameterValues(Object object){  Collection<Object> collection;  if (object instanceof Object[]) {    collection=Arrays.asList((Object[])object);  } else   if (object instanceof Collection) {    collection=(Collection<Object>)object;  } else {    LOGGER.warn("Unable to convert value, ignoring");    return new Object[]{};  }  List<Object> s=new LinkedList<Object>();  for (  Object o : collection) {    Object converted=convertToParameterValue(o);    if (converted instanceof Object[]) {      s.addAll(Arrays.asList((Object[])converted));    } else {      s.add(converted);    }  }  return s.toArray(new Object[s.size()]);}  }
class C{  public String reducedErrorPruningTipText(){  return "Whether reduced-error pruning is used instead of C.4.5 pruning.";}  }
class C{  public JSONArray(){  super();}  }
class C{  public final boolean compareAndSet(double expect,double update){  return updater.compareAndSet(this,doubleToRawLongBits(expect),doubleToRawLongBits(update));}  }
class C{  public static double[] concatAllDouble(double[]... arrays){  int totalLength=0;  final int subArrayCount=arrays.length;  for (int i=0; i < subArrayCount; ++i) {    totalLength+=arrays[i].length;  }  double[] result=Arrays.copyOf(arrays[0],totalLength);  int offset=arrays[0].length;  for (int i=1; i < subArrayCount; ++i) {    System.arraycopy(arrays[i],0,result,offset,arrays[i].length);    offset+=arrays[i].length;  }  return result;}  }
class C{  public <T>Set<T> list2Set(List<T> objects){  return new HashSet<>(objects);}  }
class C{  @Deprecated @Override public final void add(E e){  throw new UnsupportedOperationException();}  }
class C{  private void internalComplement(){  chars=doComplement();}  }
class C{  @Override protected void initListeners(){}  }
class C{  private static String encodeParameterValue(String value){  StringBuilder sb=null;  for (int i=0; i < value.length(); i++) {    char c=value.charAt(i);    if (c < validParameterValueCharacters.length && validParameterValueCharacters[c]) {      if (sb != null) {        sb.append(c);      }    } else {      if (sb == null) {        sb=new StringBuilder(value.length() * 2);        sb.append(value.substring(0,i));      }      String hex=Integer.toString(c,16);      sb.append('%').append(hex);    }  }  return (sb == null) ? value : sb.toString();}  }
class C{  public EdgeNGramTokenizer(AttributeFactory factory,int minGram,int maxGram){  super(factory,minGram,maxGram,true);}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  protected boolean isStartingOrRunning(){  return (this.starting.get() || isRunning());}  }
class C{  private Rectangle2D.Double drawParagraph(@Nullable Graphics2D g,AttributedCharacterIterator styledText,float verticalPos,float maxVerticalPos,float leftMargin,float rightMargin,float[] tabStops,int tabCount){  Rectangle2D.Double paragraphBounds=new Rectangle2D.Double(leftMargin,verticalPos,0,0);  int[] tabLocations=new int[tabCount + 1];  int i=0;  for (char c=styledText.first(); c != styledText.DONE; c=styledText.next()) {    if (c == '\t') {      tabLocations[i++]=styledText.getIndex();    }  }  tabLocations[tabCount]=styledText.getEndIndex() - 1;  LineBreakMeasurer measurer=new LineBreakMeasurer(styledText,getFontRenderContext());  int currentTab=0;  while (measurer.getPosition() < styledText.getEndIndex() && verticalPos <= maxVerticalPos) {    boolean lineContainsText=false;    boolean lineComplete=false;    float maxAscent=0, maxDescent=0;    float horizontalPos=leftMargin;    LinkedList<TextLayout> layouts=new LinkedList<TextLayout>();    LinkedList<Float> penPositions=new LinkedList<Float>();    int first=layouts.size();    while (!lineComplete && verticalPos <= maxVerticalPos) {      float wrappingWidth=rightMargin - horizontalPos;      TextLayout layout=null;      layout=measurer.nextLayout(wrappingWidth,tabLocations[currentTab] + 1,lineContainsText);      if (layout != null) {        layouts.add(layout);        penPositions.add(horizontalPos);        horizontalPos+=layout.getAdvance();        maxAscent=Math.max(maxAscent,layout.getAscent());        maxDescent=Math.max(maxDescent,layout.getDescent() + layout.getLeading());      } else {        lineComplete=true;      }      lineContainsText=true;      if (measurer.getPosition() == tabLocations[currentTab] + 1) {        currentTab++;      }      if (measurer.getPosition() == styledText.getEndIndex()) {        lineComplete=true;      } else       if (tabStops.length == 0 || horizontalPos >= tabStops[tabStops.length - 1]) {        lineComplete=true;      }      if (!lineComplete) {        int j;        for (j=0; horizontalPos >= tabStops[j]; j++) {        }        horizontalPos=tabStops[j];      }    }    if (first == layouts.size() - 1 && g != null) {switch (get(TEXT_ALIGNMENT)) {case TRAILING:        penPositions.set(first,rightMargin - layouts.get(first).getVisibleAdvance() - 1);      break;case CENTER:    penPositions.set(first,(rightMargin - 1 - leftMargin- layouts.get(first).getVisibleAdvance()) / 2 + leftMargin);  break;case BLOCK:break;case LEADING:default :break;}}verticalPos+=maxAscent;Iterator<TextLayout> layoutEnum=layouts.iterator();Iterator<Float> positionEnum=penPositions.iterator();while (layoutEnum.hasNext()) {TextLayout nextLayout=layoutEnum.next();float nextPosition=positionEnum.next();if (g != null) {nextLayout.draw(g,nextPosition,verticalPos);}Rectangle2D layoutBounds=nextLayout.getBounds();paragraphBounds.add(new Rectangle2D.Double(layoutBounds.getX() + nextPosition,layoutBounds.getY() + verticalPos,layoutBounds.getWidth(),layoutBounds.getHeight()));}verticalPos+=maxDescent;}return paragraphBounds;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public String sqlObject_createCheck(String sourceVendorName,String targetVendorName,String catalogName,String schemaName,String tableName,String constraintName,ArrayList<String> expressions,boolean isDeferrable,boolean isDeferred){  constraintName=normalizeIdentifier(targetVendorName,constraintName);  ArrayList<String> translatedExpressions=new ArrayList<String>();  for (int i=0; i < expressions.size(); i++) {    translatedExpressions.add(translateExpression(sourceVendorName,targetVendorName,expressions.get(i)));  }  return m_interfaces.get(getDBVendorID(targetVendorName)).sqlObject_createCheck(catalogName,schemaName,tableName,constraintName,translatedExpressions,isDeferrable,isDeferred);}  }
class C{  public void sort(){  sortImpl(false);}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public CInstructionMenu(final CGraphModel model,final NaviNode node,final INaviInstruction instruction,final List<ICodeNodeExtension> extensions){  super("Instruction" + " " + ZyInstructionBuilder.buildInstructionLine(instruction,model.getGraph().getSettings(),new CDefaultModifier(model.getGraph().getSettings(),model.getDebuggerProvider())).first());  final INaviCodeNode codeNode=(INaviCodeNode)node.getRawNode();  final IDebugger debugger=CGraphDebugger.getDebugger(model.getDebuggerProvider(),instruction);  if (debugger != null) {    final INaviModule module=instruction.getModule();    final UnrelocatedAddress instructionAddress=new UnrelocatedAddress(instruction.getAddress());    add(CActionProxy.proxy(new CActionToggleBreakpoint(debugger.getBreakpointManager(),module,instructionAddress)));    final BreakpointAddress relocatedAddress=new BreakpointAddress(module,instructionAddress);    if (debugger.getBreakpointManager().hasBreakpoint(BreakpointType.REGULAR,relocatedAddress)) {      add(CActionProxy.proxy(new CActionToggleBreakpointStatus(debugger.getBreakpointManager(),module,instructionAddress)));    }    addSeparator();  }  for (  final ICodeNodeExtension extension : extensions) {    extension.extendInstruction(this,codeNode,instruction);  }  try {    try {      final JMenu operandsMenu=new COperandsMenu(codeNode,instruction,extensions);      if (operandsMenu.getItemCount() != 0) {        add(operandsMenu);      }    } catch (    final MaybeNullException exception) {    }  } catch (  final InternalTranslationException e) {    CUtilityFunctions.logException(e);  }  addSeparator();  final JMenu advancedMenu=new JMenu("Advanced");  advancedMenu.add(CActionProxy.proxy(new CActionDeleteInstruction(model.getParent(),model.getGraph(),node,instruction)));  advancedMenu.add(CActionProxy.proxy(new CActionSplitAfter(model.getGraph().getRawView(),codeNode,instruction)));  advancedMenu.add(CActionProxy.proxy(new CActionShowReilCode(model.getParent(),instruction)));  add(advancedMenu);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (this.xMeans == null) {    throw new NullPointerException();  }  if (this.xStdDevs == null) {    throw new NullPointerException();  }  if (this.variableNames == null) {    throw new NullPointerException();  }  if (this.coefs == null) {    throw new NullPointerException();  }  if (this.stdErrs == null) {    throw new NullPointerException();  }  if (this.probs == null) {    throw new NullPointerException();  }  if (this.result == null) {    throw new NullPointerException();  }  if (target == null) {    throw new NullPointerException();  }}  }
class C{  public CompassFormat(String[] directions){  super();  ParamChecks.nullNotPermitted(directions,"directions");  if (directions.length != 16) {    throw new IllegalArgumentException("The 'directions' array must " + "contain exactly 16 elements");  }  this.directions=directions;}  }
class C{  private MultivaluedMap<String,Object> extractRequestFormParams(Request request,HttpResourceModel.ParameterInfo paramInfo,boolean addFileInfo) throws IOException {  MultivaluedMap<String,Object> parameters=new MultivaluedHashMap<>();  if (MediaType.MULTIPART_FORM_DATA.equals(request.getContentType())) {    FormParamIterator formParamIterator=new FormParamIterator(request);    while (formParamIterator.hasNext()) {      FormItem item=formParamIterator.next();      String cType=item.getContentType();      if (cType != null && cType.contains(";")) {        cType=cType.split(";")[0];      }      if (cType == null) {        cType=MediaType.TEXT_PLAIN;      }      boolean isFile=item.getHeaders().getHeader("content-disposition").contains("filename") || MediaType.APPLICATION_OCTET_STREAM.equals(item.getHeaders().getHeader("content-type"));      formParamContentType.putIfAbsent(item.getFieldName(),cType);      List<Object> existingValues=parameters.get(item.getFieldName());      if (existingValues == null) {        parameters.put(item.getFieldName(),isFile ? new ArrayList<>(Collections.singletonList(createAndTrackTempFile(item))) : new ArrayList<>(Collections.singletonList(StreamUtil.asString(item.openStream()))));      } else {        existingValues.add(isFile ? createAndTrackTempFile(item) : StreamUtil.asString(item.openStream()));      }      if (addFileInfo && isFile) {        FileInfo fileInfo=new FileInfo();        fileInfo.setFileName(item.getName());        fileInfo.setContentType(item.getContentType());        parameters.putSingle(item.getFieldName() + FILEINFO_POSTFIX,fileInfo);      }    }  } else   if (MediaType.APPLICATION_FORM_URLENCODED.equals(request.getContentType())) {    ByteBuffer fullContent=BufferUtil.merge(request.getFullMessageBody());    String bodyStr=BeanConverter.getConverter((request.getContentType() != null) ? request.getContentType() : MediaType.WILDCARD).convertToObject(fullContent,paramInfo.getParameterType()).toString();    QueryStringDecoderUtil queryStringDecoderUtil=new QueryStringDecoderUtil(bodyStr,false);    queryStringDecoderUtil.parameters().entrySet().forEach(null);  }  return parameters;}  }
class C{  public static void close(@Nullable Context rsrc,@Nullable IgniteLogger log){  if (rsrc != null)   try {    rsrc.close();  } catch (  NamingException e) {    warn(log,"Failed to close resource: " + e.getMessage());  }}  }
class C{  public static double asin(double a){  return StrictMath.asin(a);}  }
class C{  String readNumber(String source,int ofs,String token,boolean adjacent){  if (adjacent) {    return readSubstring(source,ofs,ofs + token.length());  }  int len=source.length();  for (int i=ofs; i < len; i++) {    char ch=source.charAt(i);    if (isNumeric(ch) == false) {      if (i == 0) {        return null;      }      return readSubstring(source,ofs,i);    }  }  return readSubstring(source,ofs);}  }
class C{  public static Driver driver(URI uri,AuthToken authToken){  return driver(uri,authToken,Config.defaultConfig());}  }
class C{  public void processStatementFilterMultiple(EPStatementAgentInstanceHandle handle,Object callbackList,EventBean theEvent,long version){  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qEventCP(theEvent,handle,services.getSchedulingService().getTime());  }  handle.getStatementAgentInstanceLock().acquireWriteLock();  try {    if (handle.isHasVariables()) {      services.getVariableService().setLocalVersion();    }    if (!handle.isCurrentFilter(version)) {      boolean handled=false;      if (handle.getFilterFaultHandler() != null) {        handled=handle.getFilterFaultHandler().handleFilterFault(theEvent,version);      }      if (!handled) {        handleFilterFault(handle,theEvent);      }    } else {      if (callbackList instanceof Collection) {        Collection<FilterHandleCallback> callbacks=(Collection<FilterHandleCallback>)callbackList;        handle.getMultiMatchHandler().handle(callbacks,theEvent);      } else {        FilterHandleCallback single=(FilterHandleCallback)callbackList;        single.matchFound(theEvent,null);      }      handle.internalDispatch();    }  } catch (  RuntimeException ex) {    services.getExceptionHandlingService().handleException(ex,handle,ExceptionHandlerExceptionType.PROCESS,theEvent);  } finally {    if (handle.isHasTableAccess()) {      services.getTableService().getTableExprEvaluatorContext().releaseAcquiredLocks();    }    handle.getStatementAgentInstanceLock().releaseWriteLock();    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aEventCP();    }  }}  }
class C{  private void drawCaretHexWindow(final Graphics g,final int characterWidth,final int characterHeight){  final int currentRow=getCurrentRow() - m_firstRow;  final int currentColumn=getCurrentColumn();  final int startLeft=9 + m_offsetViewWidth;  final int paddingColumns=(currentColumn / (2 * m_bytesPerColumn)) * m_columnSpacing;  final int x=(-m_firstColumn * m_charWidth) + startLeft + (currentColumn * characterWidth)+ paddingColumns;  final int y=((3 + m_paddingTop) - characterHeight) + (characterHeight * currentRow);  m_caret.draw(g,x,y,characterHeight);}  }
class C{  public SVGPath horizontalLineTo(double x){  if (x > Double.NEGATIVE_INFINITY && x < Double.POSITIVE_INFINITY) {    append(SVGConstants.PATH_HORIZONTAL_LINE_TO,x);  }  return this;}  }
class C{  public static void escapeXml(Writer writer,String str) throws IOException {  if (writer == null) {    throw new IllegalArgumentException("The Writer must not be null.");  }  if (str == null) {    return;  }  Entities.XML.escape(writer,str);}  }
class C{  @Override void transfer(HashMapPro.Entry[] newTable){  int newCapacity=newTable.length;  for (Entry<K,V> e=header.after; e != header; e=e.after) {    int index=indexFor(e.hash,newCapacity);    e.next=newTable[index];    newTable[index]=e;  }}  }
class C{  public LibraryLocation(IPath libraryPath,IPath sourcePath,IPath packageRoot,URL javadocLocation,URL indexLocation){  if (libraryPath == null) {    throw new IllegalArgumentException("library cannot be null");  }  fSystemLibrary=libraryPath;  fSystemLibrarySource=sourcePath;  fPackageRootPath=packageRoot;  fJavadocLocation=javadocLocation;  fIndexLocation=indexLocation;}  }
class C{  @Override protected void onStop(){  if (null != mDownloaderClientStub) {    mDownloaderClientStub.disconnect(this);  }  super.onStop();}  }
class C{  public static void assertEqual(long expected,long actual){  if (verbose) {    log("assertEqual(" + expected + ", "+ actual+ ")");  }  assertBool(expected == actual);}  }
class C{  public void countLine(int[] line,int lineIdx){  int[] ngramArr=new int[maxNgramOrder];  Arrays.fill(ngramArr,-1);  for (int charIdx=0; charIdx < line.length; charIdx++) {    for (int i=0; i < ngramArr.length - 1; i++) {      ngramArr[i]=ngramArr[i + 1];    }    ngramArr[ngramArr.length - 1]=line[charIdx];    if (line[charIdx] != -1) {      incrementCounts(ngramArr,maxNgramOrder - (firstMinusOneLookingBack(ngramArr) + 1));      int c=line[charIdx];      this.activeCharacters.add(c);      this.unigramCounts.put(c,CollectionHelper.getOrElse(this.unigramCounts,c,0) + 1);    }    tokenCount++;    for (int i=0; i < counts.length; i++) {      counts[i].maybeResize();    }  }}  }
class C{  private void extractParameters(Point[] bullEyeCornerPoints) throws NotFoundException {  boolean[] resab=sampleLine(bullEyeCornerPoints[0],bullEyeCornerPoints[1],2 * nbCenterLayers + 1);  boolean[] resbc=sampleLine(bullEyeCornerPoints[1],bullEyeCornerPoints[2],2 * nbCenterLayers + 1);  boolean[] rescd=sampleLine(bullEyeCornerPoints[2],bullEyeCornerPoints[3],2 * nbCenterLayers + 1);  boolean[] resda=sampleLine(bullEyeCornerPoints[3],bullEyeCornerPoints[0],2 * nbCenterLayers + 1);  if (resab[0] && resab[2 * nbCenterLayers]) {    shift=0;  } else   if (resbc[0] && resbc[2 * nbCenterLayers]) {    shift=1;  } else   if (rescd[0] && rescd[2 * nbCenterLayers]) {    shift=2;  } else   if (resda[0] && resda[2 * nbCenterLayers]) {    shift=3;  } else {    throw NotFoundException.getNotFoundInstance();  }  boolean[] parameterData;  boolean[] shiftedParameterData;  if (compact) {    shiftedParameterData=new boolean[28];    for (int i=0; i < 7; i++) {      shiftedParameterData[i]=resab[2 + i];      shiftedParameterData[i + 7]=resbc[2 + i];      shiftedParameterData[i + 14]=rescd[2 + i];      shiftedParameterData[i + 21]=resda[2 + i];    }    parameterData=new boolean[28];    for (int i=0; i < 28; i++) {      parameterData[i]=shiftedParameterData[(i + shift * 7) % 28];    }  } else {    shiftedParameterData=new boolean[40];    for (int i=0; i < 11; i++) {      if (i < 5) {        shiftedParameterData[i]=resab[2 + i];        shiftedParameterData[i + 10]=resbc[2 + i];        shiftedParameterData[i + 20]=rescd[2 + i];        shiftedParameterData[i + 30]=resda[2 + i];      }      if (i > 5) {        shiftedParameterData[i - 1]=resab[2 + i];        shiftedParameterData[i + 10 - 1]=resbc[2 + i];        shiftedParameterData[i + 20 - 1]=rescd[2 + i];        shiftedParameterData[i + 30 - 1]=resda[2 + i];      }    }    parameterData=new boolean[40];    for (int i=0; i < 40; i++) {      parameterData[i]=shiftedParameterData[(i + shift * 10) % 40];    }  }  correctParameterData(parameterData,compact);  getParameters(parameterData);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.172 -0500",hash_original_method="4D5FCD5F9907EB8D629A45C5A11C2836",hash_generated_method="34E607555BAE9F09B76A03C80F6A69F4") public void translateEventInScreenToAppWindow(MotionEvent event){  event.scale(applicationInvertedScale);}  }
class C{  public Task<BlockSnapshotRestRep> restoreForConsistencyGroup(URI consistencyGroupId,URI id){  return postTask(getByConsistencyGroupUrl() + "/{id}/restore",consistencyGroupId,id);}  }
class C{  protected void buildTree(){  this.heads=null;  for (Iterator godesIt=graph.iterator(); godesIt.hasNext(); ) {    Object gode=godesIt.next();    DominatorNode dode=fetchDode(gode);    DominatorNode parent=fetchParent(gode);    if (parent == null) {      if (heads == null)       heads=new ArrayList();      heads.add(dode);    } else {      parent.addChild(dode);      dode.setParent(parent);    }  }  head=(DominatorNode)heads.get(0);  for (Iterator dodesIt=this.iterator(); dodesIt.hasNext(); ) {    DominatorNode dode=(DominatorNode)dodesIt.next();    if (dode.isTail())     tails.add(dode);  }}  }
class C{  public void sync() throws IOException {  try {    latch.await();  } catch (  InterruptedException e) {    Thread.interrupted();    throw IOExceptionSupport.create(e);  }  failOnError();}  }
class C{  private ArrayList<Individuum> crossoverOptimized(ArrayList<Individuum> population){  ArrayList<Individuum> crossover=new ArrayList<>();  for (int i=0; i < population.size() - 1; i+=2) {    Pair<Individuum,Individuum> recombine=recombineOptimized(population.get(i),population.get(i + 1));    crossover.add(recombine.getFirst());    crossover.add(recombine.getSecond());  }  if (population.size() % 2 == 1) {    crossover.add(population.get(population.size() - 1));  }  return crossover;}  }
class C{  public static MinProjectionExpression minDistinct(Expression expression){  return new MinProjectionExpression(expression,true);}  }
class C{  public static org.oscm.internal.vo.VOTechnicalServiceOperation convertToUp(org.oscm.vo.VOTechnicalServiceOperation oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOTechnicalServiceOperation newVO=new org.oscm.internal.vo.VOTechnicalServiceOperation();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setOperationId(oldVO.getOperationId());  newVO.setOperationName(oldVO.getOperationName());  newVO.setOperationDescription(oldVO.getOperationDescription());  if (oldVO.getOperationParameters() != null) {    for (    org.oscm.vo.VOServiceOperationParameter tmp : oldVO.getOperationParameters()) {      newVO.getOperationParameters().add(convertToUp(tmp));    }  }  return newVO;}  }
class C{  public static void scaleX(View v,float fromX,float toX,int duration,Animator.AnimatorListener animatorListener){  ObjectAnimator animator=ObjectAnimator.ofFloat(v,View.SCALE_X,fromX,toX);  animator.setDuration(duration);  if (animatorListener != null) {    animator.addListener(animatorListener);  }  animator.start();}  }
class C{  private void drawFrequencyLineAndLabel(Graphics2D graphics,long frequency){  double xAxis=getAxisFromFrequency(frequency);  drawFrequencyLine(graphics,xAxis,mColorSpectrumLine);  drawTickLine(graphics,frequency,false);  graphics.setColor(mColorSpectrumLine);  drawFrequencyLabel(graphics,xAxis,frequency);}  }
class C{  public OpenForReadResult openForRead(Uri uri,boolean skipThreadCheck) throws IOException {  if (!skipThreadCheck) {    assertBackgroundThread();  }switch (getUriType(uri)) {case URI_TYPE_FILE:{      FileInputStream inputStream=new FileInputStream(uri.getPath());      String mimeType=getMimeTypeFromPath(uri.getPath());      long length=inputStream.getChannel().size();      return new OpenForReadResult(uri,inputStream,mimeType,length,null);    }case URI_TYPE_ASSET:{    String assetPath=uri.getPath().substring(15);    AssetFileDescriptor assetFd=null;    InputStream inputStream;    long length=-1;    try {      assetFd=assetManager.openFd(assetPath);      inputStream=assetFd.createInputStream();      length=assetFd.getLength();    } catch (    FileNotFoundException e) {      inputStream=assetManager.open(assetPath);    }    String mimeType=getMimeTypeFromPath(assetPath);    return new OpenForReadResult(uri,inputStream,mimeType,length,assetFd);  }case URI_TYPE_CONTENT:case URI_TYPE_RESOURCE:{  String mimeType=contentResolver.getType(uri);  AssetFileDescriptor assetFd=contentResolver.openAssetFileDescriptor(uri,"r");  InputStream inputStream=assetFd.createInputStream();  long length=assetFd.getLength();  return new OpenForReadResult(uri,inputStream,mimeType,length,assetFd);}case URI_TYPE_DATA:{OpenForReadResult ret=readDataUri(uri);if (ret == null) {  break;}return ret;}case URI_TYPE_HTTP:case URI_TYPE_HTTPS:{HttpURLConnection conn=httpClient.open(new URL(uri.toString()));conn.setDoInput(true);String mimeType=conn.getHeaderField("Content-Type");int length=conn.getContentLength();InputStream inputStream=conn.getInputStream();return new OpenForReadResult(uri,inputStream,mimeType,length,null);}}throw new FileNotFoundException("URI not supported by CordovaResourceApi: " + uri);}  }
class C{  public AreaTable(CoverageTable cov,EdgeTable edg,TileDirectory tile) throws FormatException {  super(cov,tile,Constants.faceTableName);  ringIDColumn=whatColumn(Constants.FAC_RINGPTR);  privateEdgeTable=(edg == null);  edges=privateEdgeTable ? new EdgeTable(cov,tile) : edg;  edgeRightFaceAdapter=edges.getRightFaceTilingAdapter();  edgeLeftFaceAdapter=edges.getLeftFaceTilingAdapter();  edgeRightEdgeAdapter=edges.getRightEdgeTilingAdapter();  edgeLeftEdgeAdapter=edges.getLeftEdgeTilingAdapter();  if (edges.topologyLevel() != 3) {    throw new FormatException("AreaTable: need level 3 topology: " + edges.topologyLevel());  }  rings=new DcwRecordFile(cov.getDataPath() + tile.getPath() + Constants.ringTableName+ (cov.appendDot ? "." : ""));  if ((ringStartColumn=rings.whatColumn(Constants.RNG_STARTEDGE)) == -1) {    throw new FormatException("ring has no start edge: " + rings.filename);  }  if ((faceIDColumn=rings.whatColumn(Constants.RNG_FACEID)) == -1) {    throw new FormatException("ring has no face_id: " + rings.filename);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.asin(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public DoubleMatrix2D viewColumn(int column){  checkColumn(column);  int viewRows=this.slices;  int viewColumns=this.rows;  int viewRowZero=sliceZero;  int viewColumnZero=rowZero;  int viewOffset=this.offset + _columnOffset(_columnRank(column));  int viewRowStride=this.sliceStride;  int viewColumnStride=this.rowStride;  int[] viewRowOffsets=this.sliceOffsets;  int[] viewColumnOffsets=this.rowOffsets;  return new SelectedDenseDoubleMatrix2D(viewRows,viewColumns,this.elements,viewRowZero,viewColumnZero,viewRowStride,viewColumnStride,viewRowOffsets,viewColumnOffsets,viewOffset);}  }
class C{  boolean hasKnownObject(ParseObject object){synchronized (mutex) {    return knownObjects.contains(object);  }}  }
class C{  public VNXeCommandResult removeLunsFromConsistencyGroup(String cgId,List<String> luns){  LunGroupModifyParam param=new LunGroupModifyParam();  List<LunAddParam> lunRemoves=new ArrayList<LunAddParam>();  for (  String lunId : luns) {    VNXeBase lun=new VNXeBase(lunId);    LunAddParam lunAdd=new LunAddParam();    lunAdd.setLun(lun);    lunRemoves.add(lunAdd);  }  param.setLunRemove(lunRemoves);  ConsistencyGroupRequests req=new ConsistencyGroupRequests(_khClient);  return req.modifyConsistencyGroupSync(cgId,param);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader;  String outputFileName;  int row, col, x, y;  double xCoord, yCoord, value;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputFileName=args[1];  if ((inputHeader == null) || (outputFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputRaster=new WhiteboxRaster(inputHeader,"r");    int rows=inputRaster.getNumberRows();    int cols=inputRaster.getNumberColumns();    ShapeFile output=new ShapeFile(outputFileName,ShapeType.POINT);    DBFField fields[]=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("VALUE");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    int FID=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        value=inputRaster.getValue(row,col);        if (value > 0) {          FID++;          xCoord=inputRaster.getXCoordinateFromColumn(col);          yCoord=inputRaster.getYCoordinateFromRow(row);          whitebox.geospatialfiles.shapefile.Point pnt=new whitebox.geospatialfiles.shapefile.Point(xCoord,yCoord);          output.addRecord(pnt);          Object[] rowData=new Object[2];          rowData[0]=new Double(FID);          rowData[1]=new Double(value);          writer.addRecord(rowData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.write();    writer.write();    inputRaster.close();    returnData(outputFileName);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static String decode(byte[] in,char[] out,int offset,int utfSize) throws UTFDataFormatException {  int count=0, s=0, a;  while (count < utfSize) {    if ((out[s]=(char)in[offset + count++]) < '\u0080') {      s++;    } else     if (((a=out[s]) & 0xe0) == 0xc0) {      if (count >= utfSize) {        throw new RuntimeException("bad second byte at " + count);      }      int b=in[offset + count++];      if ((b & 0xC0) != 0x80) {        throw new RuntimeException("bad second byte at " + (count - 1));      }      out[s++]=(char)(((a & 0x1F) << 6) | (b & 0x3F));    } else     if ((a & 0xf0) == 0xe0) {      if (count + 1 >= utfSize) {        throw new RuntimeException("bad third byte at " + (count + 1));      }      int b=in[offset + count++];      int c=in[offset + count++];      if (((b & 0xC0) != 0x80) || ((c & 0xC0) != 0x80)) {        throw new RuntimeException("bad second or third byte at " + (count - 2));      }      out[s++]=(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F));    } else {      throw new RuntimeException("bad byte at " + (count - 1));    }  }  return new String(out,0,s);}  }
class C{  private boolean hasClassParent(VariableDeclaration variableDeclaration){  MethodDeclaration methodDeclaration=variableDeclaration.astDefinition().upIfParameterToMethodDeclaration();  ConstructorDeclaration constructorDeclaration=variableDeclaration.astDefinition().upIfParameterToConstructorDeclaration();  Block block=variableDeclaration.astDefinition().upUpIfLocalVariableToBlock();  return methodDeclaration == null && constructorDeclaration == null && block == null;}  }
class C{  public CSVReaderBuilder withSkipLines(final int skipLines){  this.skipLines=(skipLines <= 0 ? 0 : skipLines);  return this;}  }
class C{  @Override public boolean canRead(){  return true;}  }
class C{  public static String nameValuePair(final Object name,final Object value){  String valueString="" + value;  if (value != null && value.getClass().isArray())   valueString=Arrays.deepToString((Object[])value);  return String.format(NAME_VALUE_TOKEN_FORMAT,name,valueString);}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  this.put(d);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.371 -0500",hash_original_method="8BAB8761E46B5AA99EF5C7C4869D5271",hash_generated_method="5FFE7D6CA45162454C02F916915597DA") public CallInfoParser(String callInfo){  super(callInfo);}  }
class C{  public AllToAllPanel(AllToAll connector,NetworkPanel networkPanel){  super();  this.connection=connector;  allowSelfConnectPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));  allowSelfConnectPanel.add(new JLabel(" Allow Self Connections: "));  allowSelfConnectPanel.add(allowSelfConnectChkBx);  fillFieldValues();  add(allowSelfConnectPanel);}  }
class C{  public static String jsonFixture(String filename) throws IOException {  return MAPPER.writeValueAsString(MAPPER.readValue(fixture(filename),JsonNode.class));}  }
class C{  public RxPeople amount(int amount){  mAmount=amount;  return mRxPeople;}  }
class C{  public void update(EventBean[] newData,EventBean[] oldData){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".update Received update, " + "  newData.length==" + ((newData == null) ? 0 : newData.length) + "  oldData.length=="+ ((oldData == null) ? 0 : oldData.length));  }  if (!super.checkAfterCondition(newData,parent.getStatementContext())) {    return;  }  if (!witnessedFirst) {    boolean isGenerateSynthetic=parent.getStatementResultService().isMakeSynthetic();    viewEventsList.add(new UniformPair<EventBean[]>(newData,oldData));    UniformPair<EventBean[]> newOldEvents=resultSetProcessor.processOutputLimitedView(viewEventsList,isGenerateSynthetic,OutputLimitLimitType.FIRST);    viewEventsList.clear();    if (!hasRelevantResults(newOldEvents)) {      return;    }    witnessedFirst=true;    if (parent.isDistinct()) {      newOldEvents.setFirst(EventBeanUtility.getDistinctByProp(newOldEvents.getFirst(),parent.getEventBeanReader()));      newOldEvents.setSecond(EventBeanUtility.getDistinctByProp(newOldEvents.getSecond(),parent.getEventBeanReader()));    }    boolean isGenerateNatural=parent.getStatementResultService().isMakeNatural();    if ((!isGenerateSynthetic) && (!isGenerateNatural)) {      if (AuditPath.isAuditEnabled) {        OutputStrategyUtil.indicateEarlyReturn(parent.getStatementContext(),newOldEvents);      }      return;    }    output(true,newOldEvents);  } else {    viewEventsList.add(new UniformPair<EventBean[]>(newData,oldData));    resultSetProcessor.processOutputLimitedView(viewEventsList,false,OutputLimitLimitType.FIRST);    viewEventsList.clear();  }  int newDataLength=0;  int oldDataLength=0;  if (newData != null) {    newDataLength=newData.length;  }  if (oldData != null) {    oldDataLength=oldData.length;  }  outputCondition.updateOutputCondition(newDataLength,oldDataLength);}  }
class C{  private static List<Constraint<?>> reduce(List<Constraint<?>> constraints){  Constraint<?> target=constraints.get(constraints.size() - 1);  Set<Variable<?>> dependencies=getVariables(target);  LinkedList<Constraint<?>> coi=new LinkedList<Constraint<?>>();  coi.add(target);  for (int i=constraints.size() - 2; i >= 0; i--) {    Constraint<?> constraint=constraints.get(i);    Set<Variable<?>> variables=getVariables(constraint);    for (    Variable<?> var : dependencies) {      if (variables.contains(var)) {        dependencies.addAll(variables);        coi.addFirst(constraint);        break;      }    }  }  return coi;}  }
class C{  public TaskBuilder unsafe(){  this.safeMode=false;  return this;}  }
class C{  public AsyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort));}  }
class C{  protected Integer wrapValue(int k){  return new Integer(k);}  }
class C{  public DiskLog(){}  }
class C{  void visitMacroDef(Macro macro){  macroToNamespaceLookup.put(macro,currentNamespace);  currentNamespace.put(macro.getName(),macro);}  }
class C{  public T caseNullLiteral(NullLiteral object){  return null;}  }
class C{  public RandomListNode copyRandomList2(RandomListNode head){  if (head == null)   return head;  RandomListNode p1=head;  while (p1 != null) {    RandomListNode copy=new RandomListNode(p1.label);    copy.next=p1.next;    p1.next=copy;    p1=p1.next.next;  }  p1=head;  while (p1 != null && p1.next != null) {    if (p1.random != null)     p1.next.random=p1.random.next;    p1=p1.next.next;  }  p1=head;  RandomListNode copy=p1.next;  RandomListNode dummy=copy;  while (copy != null && p1 != null) {    p1.next=p1.next.next;    if (copy.next == null)     break;    copy.next=copy.next.next;    copy=copy.next;    p1=p1.next;  }  return dummy;}  }
class C{  public void build(String code,JSONArray dataList){  try {    result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status));    result.put(resources.getString(R.string.intent_extra_code),code);    if (dataList != null) {      result.put(resources.getString(R.string.intent_extra_data),dataList);    }    operationListResult.put(result);  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format." + e.toString());  }}  }
class C{  public boolean isBuffered(){  return true;}  }
class C{  boolean isEditorValid(){  return myValid && !myEditor.isDisposed();}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  @Override public void modifyVariableId(String oldVarId,String newVarId){  for (  Assignment condition : new ArrayList<Assignment>(table.keySet())) {    table.get(condition).modifyVariableId(oldVarId,newVarId);    if (condition.containsVar(oldVarId)) {      IndependentDistribution distrib=table.remove(condition);      Value v=condition.removePair(oldVarId);      condition.addPair(newVarId,v);      table.put(condition,distrib);    }  }  if (conditionalVars.contains(oldVarId)) {    conditionalVars.remove(oldVarId);    conditionalVars.add(newVarId);  }  if (this.headVar.equals(oldVarId)) {    this.headVar=newVarId;  }}  }
class C{  public int indexOf(Object o){  if (o == null) {    for (int i=0; i < size; i++)     if (elementData[i] == null)     return i;  } else {    for (int i=0; i < size; i++)     if (o.equals(elementData[i]))     return i;  }  return -1;}  }
class C{  public int size(){  return atoms.size();}  }
class C{  private <T>T performWithoutMissingBundlePool(Supplier<T> supplier){  createBundlePoolIfNecessary();  return supplier.get();}  }
class C{  public NotificationMessage clone(){  NotificationMessage result=new NotificationMessage();  result.SequenceNumber=SequenceNumber;  result.PublishTime=PublishTime;  result.NotificationData=NotificationData == null ? null : NotificationData.clone();  return result;}  }
class C{  public void clearLog(SolrCore core,PluginInfo ulogPluginInfo){  if (ulogPluginInfo == null)   return;  File tlogDir=new File(getTlogDir(core,ulogPluginInfo));  if (tlogDir.exists()) {    String[] files=getLogList(tlogDir);    for (    String file : files) {      File f=new File(tlogDir,file);      boolean s=f.delete();      if (!s) {        log.error("Could not remove tlog file:" + f);      }    }  }}  }
class C{  public void detach(){  this.wwd.removeSelectListener(this);  this.wwd.getInputHandler().removeMouseMotionListener(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.533 -0500",hash_original_method="FBA6CF7C9F3F790F28B53AD9439353BD",hash_generated_method="1B4484E20414E2354C56FD473F632D9E") public final void sendMessage(int what,Object obj){  if (mSmHandler == null)   return;  mSmHandler.sendMessage(obtainMessage(what,obj));}  }
class C{  public int hashCode(){  if (myhash == -1) {    if (timestamp == null) {      myhash=signerCertPath.hashCode();    } else {      myhash=signerCertPath.hashCode() + timestamp.hashCode();    }  }  return myhash;}  }
class C{  public HttpMultipart(final String subType,final Charset charset,final String boundary,HttpMultipartMode mode){  super();  if (subType == null) {    throw new IllegalArgumentException("Multipart subtype may not be null");  }  if (boundary == null) {    throw new IllegalArgumentException("Multipart boundary may not be null");  }  this.subType=subType;  this.charset=charset != null ? charset : MIME.DEFAULT_CHARSET;  this.boundary=boundary;  this.parts=new ArrayList<FormBodyPart>();  this.mode=mode;}  }
class C{  public void deletePreloadedIcon(ComponentName componentName,UserHandleCompat user){  if (!user.equals(UserHandleCompat.myUserHandle()) || componentName == null) {    return;  }  remove(componentName,user);  boolean success=mContext.deleteFile(getResourceFilename(componentName));  if (DEBUG && success)   Log.d(TAG,"removed pre-loaded icon from persistent cache");}  }
class C{  public synchronized void delete(final byte[] primarykey){  for (  Map.Entry<String,Map<String,Collection<byte[]>>> entry : this.index.entrySet()) {    indexdelete(primarykey,entry.getValue());  }}  }
class C{  private EditMode(String name,int radius){  this.wandRadius=radius;  resetWandCursor();}  }
class C{  public DateTimeConverter(){  super();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ReferenceMap(int keyType,int valueType,int capacity,float loadFactor){  super(keyType,valueType,capacity,loadFactor,false);}  }
class C{  public <T>T query(Connection conn,String sql,ResultSetHandler<T> rsh) throws SQLException {  return this.query(conn,sql,(Object[])null,rsh);}  }
class C{  @Override public void write(final String filename){  writeV2(filename);}  }
class C{  public long defaultResponseTimeoutMillis(){  return getOrElse(DEFAULT_RESPONSE_TIMEOUT_MILLIS,DEFAULT_DEFAULT_RESPONSE_TIMEOUT_MILLIS);}  }
class C{  private void createPropertyDatasources(Datasource masterDs){  for (  MetaProperty metaProperty : meta.getProperties()) {switch (metaProperty.getType()) {case COMPOSITION:case ASSOCIATION:      NestedDatasource propertyDs;    if (metaProperty.getRange().getCardinality().isMany()) {      propertyDs=new CollectionPropertyDatasourceImpl();    } else {      if (isEmbedded(metaProperty)) {        propertyDs=new EmbeddedDatasourceImpl();      } else {        propertyDs=new PropertyDatasourceImpl();      }    }  propertyDs.setup(metaProperty.getName() + "Ds",masterDs,metaProperty.getName());if (isEmbedded(metaProperty)) {  createNestedEmbeddedDatasources(metaProperty.getRange().asClass(),metaProperty.getName(),propertyDs);}datasources.put(metaProperty.getName(),propertyDs);dsContext.register(propertyDs);break;default :break;}}}  }
class C{  public MessageEntry(){  super();  getCategories().add(MESSAGE_CATEGORY);}  }
class C{  public static void register(){  final PushAction push=new PushAction();  CommandCenter.register(PUSH,push);}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  protected final synchronized void putImpl(Object key,Object object){  if (map.containsKey(key)) {    SoftReference ref=new SoftRefKey(object,key);    map.put(key,ref);    this.notifyAll();  }}  }
class C{  protected void printIssuesAndComments(IssuesFeed issuesFeed) throws IOException, ServiceException {  for (  IssuesEntry issueEntry : issuesFeed.getEntries()) {    printIssueAndComments(issueEntry);  }}  }
class C{  public static double sum(DoubleArrayList data){  return sumOfPowerDeviations(data,1,0.0);}  }
class C{  public static Element makeCheckmark(SVGPlot svgp){  Element checkmark=svgp.svgElement(SVGConstants.SVG_PATH_TAG);  checkmark.setAttribute(SVGConstants.SVG_D_ATTRIBUTE,SVG_CHECKMARK_PATH);  checkmark.setAttribute(SVGConstants.SVG_FILL_ATTRIBUTE,SVGConstants.CSS_BLACK_VALUE);  checkmark.setAttribute(SVGConstants.SVG_STROKE_ATTRIBUTE,SVGConstants.CSS_NONE_VALUE);  return checkmark;}  }
class C{  public SnackbarCombinedCallback(Callback callback){  this(null,callback);}  }
class C{  @Override protected void afterStep(){  if (disappearing_potential.hub > 0 || disappearing_potential.authority > 0) {    for (    V v : graph.getVertices()) {      double new_hub=getOutputValue(v).hub + (1 - alpha) * (disappearing_potential.hub * getVertexPrior(v).hub);      double new_auth=getOutputValue(v).authority + (1 - alpha) * (disappearing_potential.authority * getVertexPrior(v).authority);      setOutputValue(v,new HITS.Scores(new_hub,new_auth));    }    disappearing_potential.hub=0;    disappearing_potential.authority=0;  }  normalizeScores();  super.afterStep();}  }
class C{  public void push(Object o){  list.add(0,o);}  }
class C{  public Matrix4 multiplyByMatrix(Matrix4 matrix){  if (matrix == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","multiplyByMatrix","missingMatrix"));  }  double[] ma=this.m;  double[] mb=matrix.m;  double ma0, ma1, ma2, ma3;  ma0=ma[0];  ma1=ma[1];  ma2=ma[2];  ma3=ma[3];  ma[0]=(ma0 * mb[0]) + (ma1 * mb[4]) + (ma2 * mb[8])+ (ma3 * mb[12]);  ma[1]=(ma0 * mb[1]) + (ma1 * mb[5]) + (ma2 * mb[9])+ (ma3 * mb[13]);  ma[2]=(ma0 * mb[2]) + (ma1 * mb[6]) + (ma2 * mb[10])+ (ma3 * mb[14]);  ma[3]=(ma0 * mb[3]) + (ma1 * mb[7]) + (ma2 * mb[11])+ (ma3 * mb[15]);  ma0=ma[4];  ma1=ma[5];  ma2=ma[6];  ma3=ma[7];  ma[4]=(ma0 * mb[0]) + (ma1 * mb[4]) + (ma2 * mb[8])+ (ma3 * mb[12]);  ma[5]=(ma0 * mb[1]) + (ma1 * mb[5]) + (ma2 * mb[9])+ (ma3 * mb[13]);  ma[6]=(ma0 * mb[2]) + (ma1 * mb[6]) + (ma2 * mb[10])+ (ma3 * mb[14]);  ma[7]=(ma0 * mb[3]) + (ma1 * mb[7]) + (ma2 * mb[11])+ (ma3 * mb[15]);  ma0=ma[8];  ma1=ma[9];  ma2=ma[10];  ma3=ma[11];  ma[8]=(ma0 * mb[0]) + (ma1 * mb[4]) + (ma2 * mb[8])+ (ma3 * mb[12]);  ma[9]=(ma0 * mb[1]) + (ma1 * mb[5]) + (ma2 * mb[9])+ (ma3 * mb[13]);  ma[10]=(ma0 * mb[2]) + (ma1 * mb[6]) + (ma2 * mb[10])+ (ma3 * mb[14]);  ma[11]=(ma0 * mb[3]) + (ma1 * mb[7]) + (ma2 * mb[11])+ (ma3 * mb[15]);  ma0=ma[12];  ma1=ma[13];  ma2=ma[14];  ma3=ma[15];  ma[12]=(ma0 * mb[0]) + (ma1 * mb[4]) + (ma2 * mb[8])+ (ma3 * mb[12]);  ma[13]=(ma0 * mb[1]) + (ma1 * mb[5]) + (ma2 * mb[9])+ (ma3 * mb[13]);  ma[14]=(ma0 * mb[2]) + (ma1 * mb[6]) + (ma2 * mb[10])+ (ma3 * mb[14]);  ma[15]=(ma0 * mb[3]) + (ma1 * mb[7]) + (ma2 * mb[11])+ (ma3 * mb[15]);  return this;}  }
class C{  MessageService(){  GUIMediator.setSplashScreenString(I18n.tr("Loading Messages..."));}  }
class C{  void parseArgs(String[] args){  int i=0;  boolean help=args.length == 0;  for (i=0; (i < args.length) && args[i].startsWith("-"); i++) {    String flags=args[i];    if (i == args.length - 1) {      for (      Option option : Option.values()) {        if (collator.compare(flags,option.toString()) == 0) {          if (option.arg != null)           errorNeedArgument(flags);          break;        }      }    }    String modifier=null;    int pos=flags.indexOf(':');    if (pos > 0) {      modifier=flags.substring(pos + 1);      flags=flags.substring(0,pos);    }    boolean isCommand=false;    for (    Command c : Command.values()) {      if (collator.compare(flags,c.toString()) == 0) {        command=c;        isCommand=true;        break;      }    }    if (isCommand) {    } else     if (collator.compare(flags,"-export") == 0) {      command=EXPORTCERT;    } else     if (collator.compare(flags,"-genkey") == 0) {      command=GENKEYPAIR;    } else     if (collator.compare(flags,"-import") == 0) {      command=IMPORTCERT;    } else     if (collator.compare(flags,"-importpassword") == 0) {      command=IMPORTPASS;    } else     if (collator.compare(flags,"-help") == 0) {      help=true;    } else     if (collator.compare(flags,"-keystore") == 0 || collator.compare(flags,"-destkeystore") == 0) {      ksfname=args[++i];    } else     if (collator.compare(flags,"-storepass") == 0 || collator.compare(flags,"-deststorepass") == 0) {      storePass=getPass(modifier,args[++i]);      passwords.add(storePass);    } else     if (collator.compare(flags,"-storetype") == 0 || collator.compare(flags,"-deststoretype") == 0) {      storetype=args[++i];    } else     if (collator.compare(flags,"-srcstorepass") == 0) {      srcstorePass=getPass(modifier,args[++i]);      passwords.add(srcstorePass);    } else     if (collator.compare(flags,"-srcstoretype") == 0) {      srcstoretype=args[++i];    } else     if (collator.compare(flags,"-srckeypass") == 0) {      srckeyPass=getPass(modifier,args[++i]);      passwords.add(srckeyPass);    } else     if (collator.compare(flags,"-srcprovidername") == 0) {      srcProviderName=args[++i];    } else     if (collator.compare(flags,"-providername") == 0 || collator.compare(flags,"-destprovidername") == 0) {      providerName=args[++i];    } else     if (collator.compare(flags,"-providerpath") == 0) {      pathlist=args[++i];    } else     if (collator.compare(flags,"-keypass") == 0) {      keyPass=getPass(modifier,args[++i]);      passwords.add(keyPass);    } else     if (collator.compare(flags,"-new") == 0) {      newPass=getPass(modifier,args[++i]);      passwords.add(newPass);    } else     if (collator.compare(flags,"-destkeypass") == 0) {      destKeyPass=getPass(modifier,args[++i]);      passwords.add(destKeyPass);    } else     if (collator.compare(flags,"-alias") == 0 || collator.compare(flags,"-srcalias") == 0) {      alias=args[++i];    } else     if (collator.compare(flags,"-dest") == 0 || collator.compare(flags,"-destalias") == 0) {      dest=args[++i];    } else     if (collator.compare(flags,"-dname") == 0) {      dname=args[++i];    } else     if (collator.compare(flags,"-keysize") == 0) {      keysize=Integer.parseInt(args[++i]);    } else     if (collator.compare(flags,"-keyalg") == 0) {      keyAlgName=args[++i];    } else     if (collator.compare(flags,"-sigalg") == 0) {      sigAlgName=args[++i];    } else     if (collator.compare(flags,"-startdate") == 0) {      startDate=args[++i];    } else     if (collator.compare(flags,"-validity") == 0) {      validity=Long.parseLong(args[++i]);    } else     if (collator.compare(flags,"-ext") == 0) {      v3ext.add(args[++i]);    } else     if (collator.compare(flags,"-id") == 0) {      ids.add(args[++i]);    } else     if (collator.compare(flags,"-file") == 0) {      filename=args[++i];    } else     if (collator.compare(flags,"-infile") == 0) {      infilename=args[++i];    } else     if (collator.compare(flags,"-outfile") == 0) {      outfilename=args[++i];    } else     if (collator.compare(flags,"-sslserver") == 0) {      sslserver=args[++i];    } else     if (collator.compare(flags,"-jarfile") == 0) {      jarfile=args[++i];    } else     if (collator.compare(flags,"-srckeystore") == 0) {      srcksfname=args[++i];    } else     if ((collator.compare(flags,"-provider") == 0) || (collator.compare(flags,"-providerclass") == 0)) {      if (providers == null) {        providers=new HashSet<Pair<String,String>>(3);      }      String providerClass=args[++i];      String providerArg=null;      if (args.length > (i + 1)) {        flags=args[i + 1];        if (collator.compare(flags,"-providerarg") == 0) {          if (args.length == (i + 2))           errorNeedArgument(flags);          providerArg=args[i + 2];          i+=2;        }      }      providers.add(Pair.of(providerClass,providerArg));    } else     if (collator.compare(flags,"-v") == 0) {      verbose=true;    } else     if (collator.compare(flags,"-debug") == 0) {      debug=true;    } else     if (collator.compare(flags,"-rfc") == 0) {      rfc=true;    } else     if (collator.compare(flags,"-noprompt") == 0) {      noprompt=true;    } else     if (collator.compare(flags,"-trustcacerts") == 0) {      trustcacerts=true;    } else     if (collator.compare(flags,"-protected") == 0 || collator.compare(flags,"-destprotected") == 0) {      protectedPath=true;    } else     if (collator.compare(flags,"-srcprotected") == 0) {      srcprotectedPath=true;    } else {      System.err.println(rb.getString("Illegal.option.") + flags);      tinyHelp();    }  }  if (i < args.length) {    System.err.println(rb.getString("Illegal.option.") + args[i]);    tinyHelp();  }  if (command == null) {    if (help) {      usage();    } else {      System.err.println(rb.getString("Usage.error.no.command.provided"));      tinyHelp();    }  } else   if (help) {    usage();    command=null;  }}  }
class C{  public boolean processPoint(Coord coord,double weight){  GeometryFactory gf=new GeometryFactory();  Point point=gf.createPoint(new Coordinate(coord.getX(),coord.getY()));  boolean result=false;  if (envelope.contains(point)) {    int x=(int)Math.floor((point.getX() - originX) / resolution);    int y=(int)Math.floor((originY - point.getY()) / resolution);    if (x < 0) {      log.error("Negative x-entry found for raster.");    }    if (y < 0) {      log.error("Negative y-entry found for raster.");    }    double height=0;    Point p=null;    Polygon pixel=null;switch (this.KdeType) {case 0:      height=weight;    imageMatrix.setQuick(x,y,imageMatrix.getQuick(x,y) + 1);  maxValue=Math.max(maxValue,imageMatrix.getQuick(x,y));result=true;break;case 1:int minX=(int)Math.max(0,Math.floor((point.getX() - radius - originX) / resolution));int maxX=(int)Math.min(imageMatrix.rows() - 1,Math.floor((point.getX() + radius - originX) / resolution));int minY=(int)Math.max(0,Math.floor((originY - (point.getY() + radius)) / resolution));int maxY=(int)Math.min(imageMatrix.columns() - 1,Math.floor((originY - (point.getY() - radius)) / resolution));height=weight / (2.0 * radius);for (int i=minX; i <= maxX; i++) {for (int j=minY; j <= maxY; j++) {p=gf.createPoint(new Coordinate((i + 0.5) * resolution + originX,originY - (j + 0.5) * resolution));double x1=originX + i * resolution;double x2=originX + (i + 1) * resolution;double y1=originY - (j + 1) * resolution;double y2=originY - j * resolution;Coordinate c1=new Coordinate(x1,y1);Coordinate c2=new Coordinate(x2,y1);Coordinate c3=new Coordinate(x2,y2);Coordinate c4=new Coordinate(x1,y2);Coordinate[] c={c1,c2,c3,c4,c1};pixel=gf.createPolygon(gf.createLinearRing(c),null);double d=point.distance(p);if (d <= radius || pixel.contains(point)) {imageMatrix.setQuick(i,j,imageMatrix.getQuick(i,j) + height);maxValue=Math.max(maxValue,imageMatrix.getQuick(i,j));}}}result=true;break;case 2:height=weight / radius;minX=(int)Math.max(0,Math.floor((point.getX() - radius - originX) / resolution));maxX=(int)Math.min(imageMatrix.rows() - 1,Math.floor((point.getX() + radius - originX) / resolution));minY=(int)Math.max(0,Math.floor((originY - (point.getY() + radius)) / resolution));maxY=(int)Math.min(imageMatrix.columns() - 1,Math.floor((originY - (point.getY() - radius)) / resolution));for (int i=minX; i <= maxX; i++) {for (int j=minY; j <= maxY; j++) {p=gf.createPoint(new Coordinate((i + 0.5) * resolution + originX,originY - (j + 0.5) * resolution));if (i < 0 || j < 0) {log.warn("Negative positions");}double x1=originX + i * resolution;double x2=originX + (i + 1) * resolution;double y1=originY - (j + 1) * resolution;double y2=originY - j * resolution;Coordinate c1=new Coordinate(x1,y1);Coordinate c2=new Coordinate(x2,y1);Coordinate c3=new Coordinate(x2,y2);Coordinate c4=new Coordinate(x1,y2);Coordinate[] c={c1,c2,c3,c4,c1};pixel=gf.createPolygon(gf.createLinearRing(c),null);double d=point.distance(p);double u=d / radius;double value=0.0;if (pixel.contains(point)) {value=height;} else if (d <= radius) {value=height * (1 - u);}imageMatrix.setQuick(i,j,imageMatrix.getQuick(i,j) + value);maxValue=Math.max(maxValue,imageMatrix.getQuick(i,j));}}result=true;break;case 3:minX=(int)Math.max(0,Math.floor((point.getX() - radius - originX) / resolution));maxX=(int)Math.min(imageMatrix.rows() - 1,Math.floor((point.getX() + radius - originX) / resolution));minY=(int)Math.max(0,Math.floor((originY - (point.getY() + radius)) / resolution));maxY=(int)Math.min(imageMatrix.columns() - 1,Math.floor((originY - (point.getY() - radius)) / resolution));for (int i=minX; i <= maxX; i++) {for (int j=minY; j <= maxY; j++) {p=gf.createPoint(new Coordinate((i + 0.5) * resolution + originX,originY - (j + 0.5) * resolution));double x1=originX + i * resolution;double x2=originX + (i + 1) * resolution;double y1=originY - (j + 1) * resolution;double y2=originY - j * resolution;Coordinate c1=new Coordinate(x1,y1);Coordinate c2=new Coordinate(x2,y1);Coordinate c3=new Coordinate(x2,y2);Coordinate c4=new Coordinate(x1,y2);Coordinate[] c={c1,c2,c3,c4,c1};pixel=gf.createPolygon(gf.createLinearRing(c),null);double d=point.distance(p);double u=d / radius;if (pixel.contains(point)) {height=(35.0 / 32.0) * weight;} else if (d <= radius) {height=(35.0 / 32.0) * weight * Math.pow(1 - Math.pow(u,2),3);}imageMatrix.setQuick(i,j,imageMatrix.getQuick(i,j) + height);maxValue=Math.max(maxValue,imageMatrix.getQuick(i,j));}}result=true;break;default :log.warn("A wrong Kernel Density Estimate function type was selected.");break;}}return result;}  }
class C{  public void add(int start,int end,int handler,int type){  if (start < end)   entries.add(new ExceptionTableEntry(start,end,handler,type));}  }
class C{  @HLEFunction(nid=0xDED9D28E,version=150) public int sceNetAdhocctlGetParameter(TPointer paramsAddr){  checkInitialized();  if (log.isDebugEnabled()) {    log.debug(String.format("sceNetAdhocctlGetParameter returning channel=%d, group='%s', IBSS='%s', nickName='%s'",adhocctlCurrentChannel,adhocctlCurrentGroup,adhocctlCurrentIBSS,sceUtility.getSystemParamNickname()));  }  paramsAddr.setValue32(0,adhocctlCurrentChannel);  paramsAddr.setStringNZ(4,GROUP_NAME_LENGTH,adhocctlCurrentGroup);  paramsAddr.setStringNZ(12,IBSS_NAME_LENGTH,adhocctlCurrentIBSS);  paramsAddr.setStringNZ(18,NICK_NAME_LENGTH,sceUtility.getSystemParamNickname());  return 0;}  }
class C{  public synchronized boolean isDone(String profileName){  return super.isDoneImpl(profileName);}  }
class C{  public boolean runEvoSuite(String dir,List<String> params){  List<String> cmd=getCommandToRunEvoSuite();  if (cmd == null) {    return false;  }  cmd.addAll(params);  return runProcess(dir,cmd);}  }
class C{  public void accept(final MethodVisitor mv){  int i, j, n;  n=parameters == null ? 0 : parameters.size();  for (i=0; i < n; i++) {    ParameterNode parameter=parameters.get(i);    mv.visitParameter(parameter.name,parameter.access);  }  if (annotationDefault != null) {    AnnotationVisitor av=mv.visitAnnotationDefault();    AnnotationNode.accept(av,null,annotationDefault);    if (av != null) {      av.visitEnd();    }  }  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=visibleParameterAnnotations == null ? 0 : visibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=visibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,true));    }  }  n=invisibleParameterAnnotations == null ? 0 : invisibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=invisibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,false));    }  }  if (visited) {    instructions.resetLabels();  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    mv.visitAttribute(attrs.get(i));  }  if (instructions.size() > 0) {    mv.visitCode();    n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (i=0; i < n; ++i) {      tryCatchBlocks.get(i).updateIndex(i);      tryCatchBlocks.get(i).accept(mv);    }    instructions.accept(mv);    n=localVariables == null ? 0 : localVariables.size();    for (i=0; i < n; ++i) {      localVariables.get(i).accept(mv);    }    n=visibleLocalVariableAnnotations == null ? 0 : visibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      visibleLocalVariableAnnotations.get(i).accept(mv,true);    }    n=invisibleLocalVariableAnnotations == null ? 0 : invisibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      invisibleLocalVariableAnnotations.get(i).accept(mv,false);    }    mv.visitMaxs(maxStack,maxLocals);    visited=true;  }  mv.visitEnd();}  }
class C{  private static void statementTiming(){  try {    long startConnection=System.currentTimeMillis();    Connection conn=null;    if (s_cType == C_MULTIPLE)     conn=DriverManager.getConnection(CONNECTION,UID,PWD);    long startStatement=System.currentTimeMillis();    Statement stmt=conn.createStatement();    long startQuery=System.currentTimeMillis();    ResultSet rs=stmt.executeQuery(STATEMENT);    int i=0;    long startRetrieve=System.currentTimeMillis();    while (rs.next()) {      rs.getString(1);      i++;    }    long endRetrieve=System.currentTimeMillis();    rs.close();    rs=null;    long endQuery=System.currentTimeMillis();    stmt.close();    stmt=null;    long endStatement=System.currentTimeMillis();    conn.close();    conn=null;    long endConnection=System.currentTimeMillis();    System.out.println(C_INFO[s_cType] + "Fetch=" + s_fetchSize+ " \tConn="+ (startStatement - startConnection)+ " \tStmt="+ (startQuery - startStatement)+ " \tQuery="+ (startRetrieve - startQuery)+ " \tRetrieve="+ (endRetrieve - startRetrieve)+ " \tClRs="+ (endQuery - endRetrieve)+ " \tClStmt="+ (endStatement - endQuery)+ " \tClConn="+ (endConnection - endStatement)+ " \t- Total="+ (endConnection - startConnection)+ " \tStmt="+ (endStatement - startStatement)+ " \tQuery="+ (endQuery - startQuery));  } catch (  SQLException e) {    e.printStackTrace();  }}  }
class C{  public static Properties readProperties(String dbPropertiesFile) throws FileNotFoundException, IOException {  try {    final InputStream in=new FileInputStream(dbPropertiesFile);    return PropertiesLoader.loadProperties(in);  } catch (  FileNotFoundException e) {    System.out.println("Cannot find the file '" + dbPropertiesFile + "'! Please ensure it's in the same directory you call this class from.");    throw e;  }}  }
class C{  public AccountInfo(final Deserializer deserializer){  this.address=deserializeAddress(deserializer);  this.keyPair=null == this.address.getPublicKey() ? null : new KeyPair(this.address.getPublicKey());  this.balance=Amount.readFrom(deserializer,"balance");  this.vestedBalance=Amount.readFrom(deserializer,"vestedBalance");  this.numHarvestedBlocks=BlockAmount.readFrom(deserializer,"harvestedBlocks");  this.label=deserializer.readOptionalString("label");  this.importance=deserializer.readDouble("importance");  this.multisigInfo=deserializer.readOptionalObject("multisigInfo",null);}  }
class C{  public Player nextPlayer(Player current){  if (current == one) {    return two;  } else {    return one;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ShiftDataWrapper(DataWrapper data,Parameters params){  if (data == null) {    throw new NullPointerException("The given data must not be null");  }  DataModelList dataModelList=data.getDataModelList();  int rows=-1;  int cols=-1;  for (  DataModel model : dataModelList) {    if (!(model instanceof DataSet)) {      JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"For the shift search, all of the data in the data box must be in the form of data sets.");      return;    }    DataSet dataSet=(DataSet)model;  }  List<DataSet> dataSets=new ArrayList<>();  for (int i=0; i < dataModelList.size(); i++) {    dataSets.add((DataSet)dataModelList.get(i));  }  int[] backshifts=(int[])params.get("shifts",null);  if (backshifts.length < dataSets.get(0).getNumColumns()) {    return;  }  List<DataSet> backshiftedDataSets=shiftDataSets(dataSets,backshifts);  DataModelList _list=new DataModelList();  for (  DataSet dataSet : backshiftedDataSets) {    _list.add(dataSet);  }  this.setDataModel(_list);  this.setSourceGraph(data.getSourceGraph());  params.set("shifts",backshifts);  LogDataUtils.logDataModelList("Data in which variables have been shifted in time.",getDataModelList());}  }
class C{  void cleanMigrations(List<String> migrationNames) throws VPlexApiException {  s_logger.info("Cleaning migrations {}",migrationNames);  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexMigrationInfo> migrationInfoList=discoveryMgr.findMigrations(migrationNames);  StringBuilder migrationArgBuilder=new StringBuilder();  for (  VPlexMigrationInfo migrationInfo : migrationInfoList) {    if (!VPlexApiConstants.MIGRATION_COMMITTED.equals(migrationInfo.getStatus())) {      throw VPlexApiException.exceptions.cantCleanMigrationNotCommitted(migrationInfo.getName());    }    if (migrationArgBuilder.length() != 0) {      migrationArgBuilder.append(",");    }    migrationArgBuilder.append(migrationInfo.getPath());  }  cleanCommittedMigrations(migrationArgBuilder.toString());}  }
class C{  public List<IComment> appendComment(final String comment) throws CouldntSaveDataException, CouldntLoadDataException {  try {    return m_function.appendGlobalComment(comment);  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException exception) {    throw new CouldntSaveDataException(exception);  }catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntLoadDataException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  public static <T,V extends Comparable<? super V>>T maxBy(Iterable<T> iterable,Function<? super T,? extends V> function){  if (iterable instanceof RichIterable) {    return ((RichIterable<T>)iterable).maxBy(function);  }  if (iterable instanceof RandomAccess) {    return RandomAccessListIterate.maxBy((List<T>)iterable,function);  }  if (iterable != null) {    return IterableIterate.maxBy(iterable,function);  }  throw new IllegalArgumentException("Cannot perform a maxBy on null");}  }
class C{  public static double cos(double x){  int quadrant=0;  double xa=x;  if (x < 0) {    xa=-xa;  }  if (xa != xa || xa == Double.POSITIVE_INFINITY) {    return Double.NaN;  }  double xb=0;  if (xa > 3294198.0) {    double reduceResults[]=new double[3];    reducePayneHanek(xa,reduceResults);    quadrant=((int)reduceResults[0]) & 3;    xa=reduceResults[1];    xb=reduceResults[2];  } else   if (xa > 1.5707963267948966) {    final CodyWaite cw=new CodyWaite(xa);    quadrant=cw.getK() & 3;    xa=cw.getRemA();    xb=cw.getRemB();  }switch (quadrant) {case 0:    return cosQ(xa,xb);case 1:  return -sinQ(xa,xb);case 2:return -cosQ(xa,xb);case 3:return sinQ(xa,xb);default :return Double.NaN;}}  }
class C{  @Override public boolean spatialDirty(Spatial spatial,DirtyType type){  if (spatial == null) {    spatial=rootNode;  }switch (type) {case Attached:    break;case Detached:  break;case Bounding:break;case RenderState:break;case Transform:break;case Destroyed:break;}needsRender.set(true);return (false);}  }
class C{  public void addInvokespecial(boolean isInterface,int clazz,String name,String desc){  add(INVOKESPECIAL);  int index;  if (isInterface)   index=constPool.addInterfaceMethodrefInfo(clazz,name,desc); else   index=constPool.addMethodrefInfo(clazz,name,desc);  addIndex(index);  growStack(Descriptor.dataSize(desc) - 1);}  }
class C{  @POST @Path("/{id}/subtenants") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN}) public TenantOrgRestRep createSubTenant(@PathParam("id") URI id,TenantCreateParam param){  ObjectNamespace namesp=null;  boolean namespModified=false;  TenantOrg parent=getTenantById(id,true);  if (!TenantOrg.isRootTenant(parent)) {    throw APIException.badRequests.parentTenantIsNotRoot();  }  ArgValidator.checkFieldNotEmpty(param.getLabel(),"name");  checkForDuplicateName(param.getLabel(),TenantOrg.class,id,"parentTenant",_dbClient);  TenantOrg subtenant=new TenantOrg();  subtenant.setId(URIUtil.createId(TenantOrg.class));  subtenant.setParentTenant(new NamedURI(parent.getId(),param.getLabel()));  subtenant.setLabel(param.getLabel());  subtenant.setDescription(param.getDescription());  if (param.getNamespace() != null) {    checkForDuplicateNamespace(param.getNamespace());    subtenant.setNamespace(param.getNamespace());    List<URI> allNamespaceURI=_dbClient.queryByType(ObjectNamespace.class,true);    Iterator<ObjectNamespace> nsItr=_dbClient.queryIterativeObjects(ObjectNamespace.class,allNamespaceURI);    while (nsItr.hasNext()) {      namesp=nsItr.next();      if (subtenant.getNamespace().equalsIgnoreCase(namesp.getNativeId())) {        namesp.setTenant(subtenant.getId());        namesp.setMapped(true);        namespModified=true;        break;      }    }  }  if (null == param.getUserMappings() || param.getUserMappings().isEmpty()) {    throw APIException.badRequests.requiredParameterMissingOrEmpty("user_mappings");  } else {    checkUserMappingAttribute(param.getUserMappings());    addUserMappings(subtenant,param.getUserMappings(),getUserFromContext());  }  subtenant.addRole(new PermissionsKey(PermissionsKey.Type.SID,getUserFromContext().getName()).toString(),Role.TENANT_ADMIN.toString());  mapOutProviderTenantCheck(subtenant);  if (namespModified) {    _dbClient.updateObject(namesp);  }  _dbClient.createObject(subtenant);  recordOperation(OperationTypeEnum.CREATE_TENANT,parent.getId(),subtenant);  return map(subtenant);}  }
class C{  private static int toEven(float value){  int i=Math.round(value);  return (i % 2 == 1) ? i - 1 : i;}  }
class C{  static public Locator southEast(){  return new RelativeDecoratorLocator(1.0,1.0);}  }
class C{  public void update(Matrix X,double s){  Matrix CD=epoch(X);  Matrix dW=(CD.minusEquals(this.W.times(COST))).timesEquals(LEARNING_RATE);  dW=dW.times(s);  this.W.plusEquals(dW.plus(this.dW_.timesEquals(MOMENTUM)));  this.dW_=dW;}  }
class C{  public DirectoryElement(String path){  this.path=path;}  }
class C{  public void testSyncCancellation_closesActivityWhenUserInitiated(){  mController.init();  mFakeEventBus.post(new SyncCancelRequestedEvent());  mFakeEventBus.post(new SyncCanceledEvent());  verify(mMockUi).finish();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public final int[] toArray(){  int[] elements=new int[length];  int bite;  int copied=0;  while (copied < length) {    bite=Math.min(length - copied,0x400);    System.arraycopy(pages.get(copied >> 10),0,elements,copied,bite);    copied+=bite;  }  return elements;}  }
class C{  public static void startup(){  try {    final File script=new File(IdeaHelper.getResourcePath(LinuxStartup.class.getResource("/"),SCRIPT_NAME,LINUX_DIR));    IdeaHelper.setExecutablePermissions(script);    createDesktopFile(script,new File(USER_HOME,VSOI_DESKTOP_FILE_PATH));    final Process process=Runtime.getRuntime().exec(UPDATE_LOCAL_DESKTOP_DB_CMD);    process.waitFor();    logger.debug("The return code for executing update-desktop-database was {}",process.exitValue());  } catch (  IOException e) {    logger.warn("An IOException was caught while trying to run the Linux startup steps: {}",e.getMessage());  }catch (  InterruptedException e) {    logger.warn("An InterruptedException was caught while waiting for the database desktop to update: {}",e.getMessage());  }catch (  Exception e) {    logger.warn("An Exception was caught while trying to run the Linux startup steps",e);  }}  }
class C{  private BigDecimal determineCostsForUserAssignments(PriceModelHistory referencePMHistory,UserAssignmentCostsType userAssignment,BigDecimal overallFactor,int pNumberOfUserTotal,long endTimeForPeriod){  BigDecimal costsForUserAssignments=ZERO_NORMALIZED;  CostCalculator calculator=CostCalculator.get(referencePMHistory);  PriceModelData historyData=referencePMHistory.getDataContainer();  if (referencePMHistory.isChargeable()) {    List<SteppedPriceData> steppedPriceList=bdr.loadSteppedPricesForPriceModel(referencePMHistory.getObjKey(),endTimeForPeriod);    BigDecimal costsPerUserAssignment=ZERO_NORMALIZED;    boolean isStepPriceDefined=false;    if (steppedPriceList != null && steppedPriceList.size() > 0) {      isStepPriceDefined=true;      SteppedPriceDetail steppedPriceDetail=new SteppedPriceDetail(ZERO_NORMALIZED);      steppedPriceDetail.setPriceData(steppedPriceList);      SteppedPriceDetail stepData=calculator.calculateStepCost(steppedPriceDetail,overallFactor);      if (stepData != null && stepData.getNormalizedCost() != null) {        BigDecimal cost=stepData.getNormalizedCost();        BigDecimal stepCost=ZERO_NORMALIZED;        if (cost != null) {          stepCost=cost;        }        costsPerUserAssignment=stepCost;      }    } else {      costsPerUserAssignment=historyData.getPricePerUserAssignment();    }    BigDecimal basePrice=costsPerUserAssignment;    PricingPeriod periodSetting=historyData.getPeriod();    if (isStepPriceDefined) {      costsForUserAssignments=costsPerUserAssignment;      costsForUserAssignments=costsForUserAssignments.setScale(PriceConverter.NORMALIZED_PRICE_SCALING,RoundingMode.HALF_UP);      if (steppedPriceList != null && !steppedPriceList.isEmpty()) {        final SteppedPricesType steppedPricesType=factory.createSteppedPricesType();        for (        SteppedPriceData stepPrice : steppedPriceList) {          final SteppedPriceType steppedPriceType=factory.createSteppedPriceType();          steppedPriceType.setLimit(stepPrice.getLimit() == null ? "null" : String.valueOf(stepPrice.getLimit()));          steppedPriceType.setFreeAmount(stepPrice.getFreeEntityCount());          steppedPriceType.setBasePrice(stepPrice.getBasePrice());          steppedPriceType.setAdditionalPrice(stepPrice.getAdditionalPrice());          steppedPriceType.setStepAmount(stepPrice.getStepAmount());          steppedPriceType.setStepEntityCount(stepPrice.getStepEntityCount());          steppedPricesType.getSteppedPrice().add(steppedPriceType);        }        steppedPricesType.setAmount(costsPerUserAssignment);        userAssignment.setSteppedPrices(steppedPricesType);      }    } else {      costsForUserAssignments=basePrice.multiply(overallFactor).setScale(PriceConverter.NORMALIZED_PRICE_SCALING,RoundingMode.HALF_UP);    }    userAssignment.setBasePeriod(BasePeriodType.valueOf(periodSetting.name()));    if (!isStepPriceDefined) {      userAssignment.setBasePrice(basePrice);    }    userAssignment.setNumberOfUsersTotal(Long.valueOf(pNumberOfUserTotal));    userAssignment.setFactor(overallFactor);    userAssignment.setPrice(costsForUserAssignments);  }  return costsForUserAssignments;}  }
class C{  public void writeRawBytes(final byte[] value) throws IOException {  writeRawBytes(value,0,value.length);}  }
class C{  @Override public void fail(Object msgId){  RunningJobMessageId messageId=(RunningJobMessageId)msgId;  JobConstants.ResourceType type=messageId.type;  if (type.equals(JobConstants.ResourceType.JOB_COMPLETE_INFO) || type.equals(JobConstants.ResourceType.JOB_CONFIGURATION)) {    try {      readWriteLock.readLock().lock();      crawler.removeFromProcessingList(type,new JobContext(messageId.jobID,null,null));    }  finally {      try {        readWriteLock.readLock().unlock();        LOG.info("Read lock released");      } catch (      Throwable t) {        LOG.error("Fail to release Read lock",t);      }    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @SuppressWarnings("static-access") public static void createBasetypesOption(Options options){  Option opt=OptionBuilder.withArgName("basetypes fidl").withDescription("Franca IDL file which defines aliases for OMG IDL basetypes").hasArg().withValueSeparator(' ').create(BASETYPES);  options.addOption(opt);}  }
class C{  public static double celsiusToFahrenheit(double celsius){  return (9.0 / 5) * celsius + 32;}  }
class C{  public void testAdvanceCMR2() throws Exception {  for (int amount=25; amount < 200; amount+=25) {    for (int common=0; common < commonTerms.length; common++) {      for (int medium=0; medium < mediumTerms.length; medium++) {        for (int rare=0; rare < rareTerms.length; rare++) {          Scorer expected=scorer(new String[]{commonTerms[common],mediumTerms[medium],rareTerms[rare]},2,Mode.DOC_VALUES);          Scorer actual=scorer(new String[]{commonTerms[common],mediumTerms[medium],rareTerms[rare]},2,Mode.SCORER);          assertAdvance(expected,actual,amount);          expected=scorer(new String[]{commonTerms[common],mediumTerms[medium],rareTerms[rare]},2,Mode.DOC_VALUES);          actual=scorer(new String[]{commonTerms[common],mediumTerms[medium],rareTerms[rare]},2,Mode.BULK_SCORER);          assertAdvance(expected,actual,amount);        }      }    }  }}  }
class C{  public String toString(){  int max=size();  StringBuffer buf=new StringBuffer();  buf.append("{");  for (int i=0; i < max; ++i) {    if (this.keyTable[i] != null) {      buf.append(this.keyTable[i]).append("->").append(this.valueTable[i]);    }    if (i < max) {      buf.append(", ");    }  }  buf.append("}");  return buf.toString();}  }
class C{  public MatFileReader(String fileName) throws FileNotFoundException, IOException {  this(new File(fileName),new MatFileFilter());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:24.309 -0500",hash_original_method="ED015CEE91613D6F524378162B530528",hash_generated_method="90EE6004B1BC61FC87B465AFC51A1F2D") private boolean typesMatch(Class<V> valueType,Class getterType){  if (getterType != valueType) {    if (getterType.isPrimitive()) {      return (getterType == float.class && valueType == Float.class) || (getterType == int.class && valueType == Integer.class) || (getterType == boolean.class && valueType == Boolean.class)|| (getterType == long.class && valueType == Long.class)|| (getterType == double.class && valueType == Double.class)|| (getterType == short.class && valueType == Short.class)|| (getterType == byte.class && valueType == Byte.class)|| (getterType == char.class && valueType == Character.class);    }    return false;  }  return true;}  }
class C{  public DateField(String name){  super(name,Field.Type.DATE);}  }
class C{  public boolean isContainer(Class type){  if (Collection.class.isAssignableFrom(type)) {    return true;  }  if (Map.class.isAssignableFrom(type)) {    return true;  }  return type.isArray();}  }
class C{  @Override protected final int nextIndex(){  if (_expectedSize != _map.size()) {    throw new ConcurrentModificationException();  }  Object[] values=_map._values;  int i=_index;  while (i-- > 0 && !TLongObjectHashMap.isFull(values,i))   ;  return i;}  }
class C{  static public boolean handleQuit(){  log.debug("Start handleQuit");  try {    return InstanceManager.getDefault(jmri.ShutDownManager.class).shutdown();  } catch (  Exception e) {    log.error("Continuing after error in handleQuit",e);  }  return false;}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return isHeadless() ? new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB) : getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  public void initialize(BTDownload downloader){  super.initialize(downloader);  notificationShown=downloader.isCompleted();  transferHolder=new TransferHolder(downloader);  seedingHolder=new SeedingHolder(downloader);  paymentOptions=initializer.getPaymentOptions();  update();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  String strong;  Attr setAttr;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("class");  setAttr=testEmployee.setAttributeNode(newAttribute);  strong=testEmployee.getAttribute("class");  assertEquals("replacedValue","",strong);}  }
class C{  private Map<Variable,Term> unifyVar(Variable var,FOLNode x,Map<Variable,Term> theta){  if (!Term.class.isInstance(x)) {    return null;  } else   if (theta.keySet().contains(var)) {    return unify(theta.get(var),x,theta);  } else   if (theta.keySet().contains(x)) {    return unify(var,theta.get(x),theta);  } else   if (occurCheck(theta,var,x)) {    return null;  } else {    cascadeSubstitution(theta,var,(Term)x);    return theta;  }}  }
class C{  public AbstractFloatList elements(float[] elements){  this.elements=elements;  this.size=elements.length;  return this;}  }
class C{  public static void printResults(PowerContainerDatacenter datacenter,List<ContainerVm> vms,List<Container> containers,double lastClock,String experimentName,boolean outputInCsv,String outputFolder){  Log.enable();  List<ContainerHost> hosts=datacenter.getHostList();  int numberOfHosts=hosts.size();  int numberOfVms=vms.size();  double totalSimulationTime=lastClock;  double energy=datacenter.getPower() / (3600 * 1000);  int numberOfVmMigrations=datacenter.getVmMigrationCount();  Map<String,Double> slaMetrics=getSlaMetrics(vms);  double slaOverall=slaMetrics.get("overall");  double slaAverage=slaMetrics.get("average");  double slaDegradationDueToMigration=slaMetrics.get("underallocated_migration");  double slaTimePerActiveHost=getSlaTimePerActiveHost(hosts);  double sla=slaTimePerActiveHost * slaDegradationDueToMigration;  List<Double> timeBeforeHostShutdown=getTimesBeforeHostShutdown(hosts);  int numberOfHostShutdowns=timeBeforeHostShutdown.size();  double meanTimeBeforeHostShutdown=Double.NaN;  double stDevTimeBeforeHostShutdown=Double.NaN;  if (!timeBeforeHostShutdown.isEmpty()) {    meanTimeBeforeHostShutdown=MathUtil.mean(timeBeforeHostShutdown);    stDevTimeBeforeHostShutdown=MathUtil.stDev(timeBeforeHostShutdown);  }  List<Double> timeBeforeVmMigration=getTimesBeforeVmMigration(vms);  double meanTimeBeforeVmMigration=Double.NaN;  double stDevTimeBeforeVmMigration=Double.NaN;  if (!timeBeforeVmMigration.isEmpty()) {    meanTimeBeforeVmMigration=MathUtil.mean(timeBeforeVmMigration);    stDevTimeBeforeVmMigration=MathUtil.stDev(timeBeforeVmMigration);  }  List<Double> timeBeforeContainerMigration=getTimesBeforeContainerMigration(containers);  double meanTimeBeforeContainerMigration=Double.NaN;  double stDevTimeBeforeContainerMigration=Double.NaN;  if (!timeBeforeContainerMigration.isEmpty()) {    meanTimeBeforeContainerMigration=MathUtil.mean(timeBeforeContainerMigration);    stDevTimeBeforeContainerMigration=MathUtil.stDev(timeBeforeContainerMigration);  }  if (outputInCsv) {    File folder=new File(outputFolder);    if (!folder.exists()) {      folder.mkdir();    }    File folder1=new File(outputFolder + "/stats");    if (!folder1.exists()) {      folder1.mkdir();    }    File folder2=new File(outputFolder + "/time_before_host_shutdown");    if (!folder2.exists()) {      folder2.mkdir();    }    File folder3=new File(outputFolder + "/time_before_vm_migration");    if (!folder3.exists()) {      folder3.mkdir();    }    File folder4=new File(outputFolder + "/metrics");    if (!folder4.exists()) {      folder4.mkdir();    }    StringBuilder data=new StringBuilder();    String delimeter=",";    data.append(experimentName + delimeter);    data.append(parseExperimentName(experimentName));    data.append(String.format("%d",numberOfHosts) + delimeter);    data.append(String.format("%d",numberOfVms) + delimeter);    data.append(String.format("%.2f",totalSimulationTime) + delimeter);    data.append(String.format("%.5f",energy) + delimeter);    data.append(String.format("%.10f",sla) + delimeter);    data.append(String.format("%.10f",slaTimePerActiveHost) + delimeter);    data.append(String.format("%.10f",slaDegradationDueToMigration) + delimeter);    data.append(String.format("%.10f",slaOverall) + delimeter);    data.append(String.format("%.10f",slaAverage) + delimeter);    data.append(String.format("%d",numberOfHostShutdowns) + delimeter);    data.append(String.format("%.2f",meanTimeBeforeHostShutdown) + delimeter);    data.append(String.format("%.2f",stDevTimeBeforeHostShutdown) + delimeter);    data.append(String.format("%.2f",meanTimeBeforeVmMigration) + delimeter);    data.append(String.format("%.2f",stDevTimeBeforeVmMigration) + delimeter);    if (datacenter.getVmAllocationPolicy() instanceof PowerContainerVmAllocationPolicyMigrationAbstract) {      PowerContainerVmAllocationPolicyMigrationAbstract vmAllocationPolicy=(PowerContainerVmAllocationPolicyMigrationAbstract)datacenter.getVmAllocationPolicy();      double executionTimeVmSelectionMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryVmSelection());      double executionTimeVmSelectionStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryVmSelection());      double executionTimeHostSelectionMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryHostSelection());      double executionTimeHostSelectionStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryHostSelection());      double executionTimeVmReallocationMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryVmReallocation());      double executionTimeVmReallocationStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryVmReallocation());      double executionTimeTotalMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryTotal());      double executionTimeTotalStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryTotal());      data.append(String.format("%.5f",executionTimeVmSelectionMean) + delimeter);      data.append(String.format("%.5f",executionTimeVmSelectionStDev) + delimeter);      data.append(String.format("%.5f",executionTimeHostSelectionMean) + delimeter);      data.append(String.format("%.5f",executionTimeHostSelectionStDev) + delimeter);      data.append(String.format("%.5f",executionTimeVmReallocationMean) + delimeter);      data.append(String.format("%.5f",executionTimeVmReallocationStDev) + delimeter);      data.append(String.format("%.5f",executionTimeTotalMean) + delimeter);      data.append(String.format("%.5f",executionTimeTotalStDev) + delimeter);      writeMetricHistory(hosts,vmAllocationPolicy,outputFolder + "/metrics/" + experimentName+ "_metric");    }    data.append("\n");    writeDataRow(data.toString(),outputFolder + "/stats/" + experimentName+ "_stats.csv");    writeDataColumn(timeBeforeHostShutdown,outputFolder + "/time_before_host_shutdown/" + experimentName+ "_time_before_host_shutdown.csv");    writeDataColumn(timeBeforeContainerMigration,outputFolder + "/time_before_vm_migration/" + experimentName+ "_time_before_vm_migration.csv");  } else {    Log.setDisabled(false);    Log.printLine();    Log.printLine(String.format("Experiment name: " + experimentName));    Log.printLine(String.format("Number of hosts: " + numberOfHosts));    Log.printLine(String.format("Number of VMs: " + numberOfVms));    Log.printLine(String.format("Total simulation time: %.2f sec",totalSimulationTime));    Log.printLine(String.format("Energy consumption: %.2f kWh",energy));    Log.printLine(String.format("SLA: %.5f%%",sla * 100));    Log.printLine(String.format("SLA perf degradation due to migration: %.2f%%",slaDegradationDueToMigration * 100));    Log.printLine(String.format("SLA time per active host: %.2f%%",slaTimePerActiveHost * 100));    Log.printLine(String.format("Overall SLA violation: %.2f%%",slaOverall * 100));    Log.printLine(String.format("Average SLA violation: %.2f%%",slaAverage * 100));    Log.printLine(String.format("Number of host shutdowns: %d",numberOfHostShutdowns));    Log.printLine(String.format("Mean time before a host shutdown: %.2f sec",meanTimeBeforeHostShutdown));    Log.printLine(String.format("StDev time before a host shutdown: %.2f sec",stDevTimeBeforeHostShutdown));    Log.printLine(String.format("Mean time before a VM migration: %.2f sec",meanTimeBeforeVmMigration));    Log.printLine(String.format("StDev time before a VM migration: %.2f sec",stDevTimeBeforeVmMigration));    Log.printLine(String.format("Mean time before a Container migration: %.2f sec",meanTimeBeforeContainerMigration));    Log.printLine(String.format("StDev time before a Container migration: %.2f sec",stDevTimeBeforeContainerMigration));    if (datacenter.getVmAllocationPolicy() instanceof PowerContainerVmAllocationPolicyMigrationAbstract) {      PowerContainerVmAllocationPolicyMigrationAbstract vmAllocationPolicy=(PowerContainerVmAllocationPolicyMigrationAbstract)datacenter.getVmAllocationPolicy();      double executionTimeVmSelectionMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryVmSelection());      double executionTimeVmSelectionStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryVmSelection());      double executionTimeHostSelectionMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryHostSelection());      double executionTimeHostSelectionStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryHostSelection());      double executionTimeVmReallocationMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryVmReallocation());      double executionTimeVmReallocationStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryVmReallocation());      double executionTimeTotalMean=MathUtil.mean(vmAllocationPolicy.getExecutionTimeHistoryTotal());      double executionTimeTotalStDev=MathUtil.stDev(vmAllocationPolicy.getExecutionTimeHistoryTotal());      Log.printLine(String.format("Execution time - VM selection mean: %.5f sec",executionTimeVmSelectionMean));      Log.printLine(String.format("Execution time - VM selection stDev: %.5f sec",executionTimeVmSelectionStDev));      Log.printLine(String.format("Execution time - host selection mean: %.5f sec",executionTimeHostSelectionMean));      Log.printLine(String.format("Execution time - host selection stDev: %.5f sec",executionTimeHostSelectionStDev));      Log.printLine(String.format("Execution time - VM reallocation mean: %.5f sec",executionTimeVmReallocationMean));      Log.printLine(String.format("Execution time - VM reallocation stDev: %.5f sec",executionTimeVmReallocationStDev));      Log.printLine(String.format("Execution time - total mean: %.5f sec",executionTimeTotalMean));      Log.printLine(String.format("Execution time - total stDev: %.5f sec",executionTimeTotalStDev));    }    Log.printLine();  }  Log.setDisabled(true);}  }
class C{  public Query like(Fields... likeFields) throws IOException {  Set<String> fieldNames=new HashSet<>();  for (  Fields fields : likeFields) {    for (    String fieldName : fields) {      fieldNames.add(fieldName);    }  }  BooleanQuery bq=new BooleanQuery();  for (  String fieldName : fieldNames) {    Map<String,Int> termFreqMap=new HashMap<>();    for (    Fields fields : likeFields) {      Terms vector=fields.terms(fieldName);      if (vector != null) {        addTermFrequencies(termFreqMap,vector,fieldName);      }    }    addToQuery(createQueue(termFreqMap,fieldName),bq);  }  return bq;}  }
class C{  public static void dump(String message){  if (Options.dump)   out.println(message);}  }
class C{  public Buffer read(){  Buffer buffer=(Buffer)mBuffer.getObject();  return buffer;}  }
class C{  public void checkStateErrors(MediaRecorderStateErrors stateErrors){  assertTrue(!stateErrors.errorInDataSourceConfiguredState);  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(!stateErrors.errorInRecordingState);  assertTrue(!stateErrors.errorInErrorState);  assertTrue(!stateErrors.errorInInitialState);  assertTrue(!stateErrors.errorInInitialStateAfterReset);  assertTrue(!stateErrors.errorInInitialStateAfterStop);  assertTrue(!stateErrors.errorInInitializedState);}  }
class C{  @Override protected final boolean failIfRegionMissing(){  return false;}  }
class C{  public void testSetPiece(){  Position instance=new Position();  assertEquals(Piece.EMPTY,instance.getPiece(Position.getSquare(0,0)));  instance.setPiece(Position.getSquare(3,4),Piece.WKING);  assertEquals(Piece.WKING,instance.getPiece(Position.getSquare(3,4)));}  }
class C{  public static void writeFile(byte[] content,File file) throws UtilException {  if (file != null) {    BufferedOutputStream out=null;    try {      out=new BufferedOutputStream(new FileOutputStream(file));      out.write(content);      out.flush();    } catch (    Exception e) {      throw new UtilException(ErrorCodeDef.WRITE_FILE_ERROR_10029,e);    } finally {      IOUtils.closeQuietly(out);    }  }}  }
class C{  private static void readConfiguration(){  MANAGED_EXTENSIONS.clear();  try {    File file=new File(getUserExtensionsDir(),"extensions.xml");    if (file.exists()) {      parse(XMLTools.parse(file));    }  } catch (  Exception e) {    LogService.getRoot().log(Level.WARNING,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapid_i.deployment.update.client.ManagedExtension.reading_local_extensions_state_error",e),e);  }  LogService.getRoot().log(Level.CONFIG,"com.rapid_i.deployment.update.client.ManagedExtension.read_extansion_state");}  }
class C{  public static void writeDirect(BytesReference source,XContentBuilder rawBuilder,ToXContent.Params params) throws IOException {  Compressor compressor=CompressorFactory.compressor(source);  if (compressor != null) {    InputStream compressedStreamInput=compressor.streamInput(source.streamInput());    if (compressedStreamInput.markSupported() == false) {      compressedStreamInput=new BufferedInputStream(compressedStreamInput);    }    XContentType contentType=XContentFactory.xContentType(compressedStreamInput);    if (contentType == rawBuilder.contentType()) {      Streams.copy(compressedStreamInput,rawBuilder.stream());    } else {      try (XContentParser parser=XContentFactory.xContent(contentType).createParser(compressedStreamInput)){        parser.nextToken();        rawBuilder.copyCurrentStructure(parser);      }     }  } else {    XContentType contentType=XContentFactory.xContentType(source);    if (contentType == rawBuilder.contentType()) {      source.writeTo(rawBuilder.stream());    } else {      try (XContentParser parser=XContentFactory.xContent(contentType).createParser(source)){        parser.nextToken();        rawBuilder.copyCurrentStructure(parser);      }     }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:18.797 -0500",hash_original_method="FAA6B2CA6161B01EDCE06644087258E9",hash_generated_method="52595FBB3CA5DCD9DAAC24C36F9F10F5") private E extract(){  final Object[] items=this.items;  E x=this.<E>cast(items[takeIndex]);  items[takeIndex]=null;  takeIndex=inc(takeIndex);  --count;  notFull.signal();  return x;}  }
class C{  private void printException(Exception ex){  System.out.println("\n--- Exception caught ---\n");  while (ex != null) {    System.out.println("Message:   " + ex.getMessage());    if (ex instanceof SQLException) {      System.out.println("SQLState:  " + ((SQLException)ex).getSQLState());      System.out.println("ErrorCode: " + ((SQLException)ex).getErrorCode());      ex=((SQLException)ex).getNextException();    } else {      ex=null;    }    System.out.println("");  }}  }
class C{  public void closeDiskCache(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        if (!mDiskLruCache.isClosed()) {          mDiskLruCache.close();          mDiskLruCache=null;          if (DEBUG) {            Log.d(TAG,"Disk cache closed");          }        }      } catch (      IOException e) {        Log.e(TAG,"close - " + e);      }    }  }}  }
class C{  public void paintToolBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static Optional<String> toNationalGrid(double[] en){  for (  GridSquare gs : GRID_SQUARES.values()) {    if (gs.inside(en)) {      double[] offset=gs.offsetEastingNorthing(en);      return Optional.of(String.format("%s %05.0f %05.0f",gs.getReference(),offset[0],offset[1]));    }  }  return Optional.empty();}  }
class C{  public Yytoken yylex() throws java.io.IOException, ParseException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 11:{        sb.append(yytext());      }case 25:    break;case 4:{    sb.delete(0,sb.length());    yybegin(STRING_BEGIN);  }case 26:break;case 16:{sb.append('\b');}case 27:break;case 6:{return new Yytoken(Yytoken.TYPE_RIGHT_BRACE,null);}case 28:break;case 23:{Boolean val=Boolean.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 29:break;case 22:{return new Yytoken(Yytoken.TYPE_VALUE,null);}case 30:break;case 13:{yybegin(YYINITIAL);return new Yytoken(Yytoken.TYPE_VALUE,sb.toString());}case 31:break;case 12:{sb.append('\\');}case 32:break;case 21:{Double val=Double.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 33:break;case 1:{throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_CHAR,new Character(yycharat(0)));}case 34:break;case 8:{return new Yytoken(Yytoken.TYPE_RIGHT_SQUARE,null);}case 35:break;case 19:{sb.append('\r');}case 36:break;case 15:{sb.append('/');}case 37:break;case 10:{return new Yytoken(Yytoken.TYPE_COLON,null);}case 38:break;case 14:{sb.append('"');}case 39:break;case 5:{return new Yytoken(Yytoken.TYPE_LEFT_BRACE,null);}case 40:break;case 17:{sb.append('\f');}case 41:break;case 24:{try {int ch=Integer.parseInt(yytext().substring(2),16);sb.append((char)ch);} catch (Exception e) {throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_EXCEPTION,e);}}case 42:break;case 20:{sb.append('\t');}case 43:break;case 7:{return new Yytoken(Yytoken.TYPE_LEFT_SQUARE,null);}case 44:break;case 2:{Long val=Long.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 45:break;case 18:{sb.append('\n');}case 46:break;case 9:{return new Yytoken(Yytoken.TYPE_COMMA,null);}case 47:break;case 3:{}case 48:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void startPrefixMapping(String prefix,String uri){}  }
class C{  public static String pluralize(final String in){  if (s_plural.containsKey(in)) {    return s_plural.get(in);  }  if (in.endsWith("man")) {    return in.substring(0,in.lastIndexOf("man")) + "men";  }  return in + "s";}  }
class C{  static int addOrSubtract(int a,int b){  return a ^ b;}  }
class C{  public Matrix3d swap(Matrix3d other){  double tmp;  tmp=m00;  m00=other.m00;  other.m00=tmp;  tmp=m01;  m01=other.m01;  other.m01=tmp;  tmp=m02;  m02=other.m02;  other.m02=tmp;  tmp=m10;  m10=other.m10;  other.m10=tmp;  tmp=m11;  m11=other.m11;  other.m11=tmp;  tmp=m12;  m12=other.m12;  other.m12=tmp;  tmp=m20;  m20=other.m20;  other.m20=tmp;  tmp=m21;  m21=other.m21;  other.m21=tmp;  tmp=m22;  m22=other.m22;  other.m22=tmp;  return this;}  }
class C{  private boolean cmd_saveInvoice(int C_Invoice_ID){  log.config("C_Invoice_ID=" + C_Invoice_ID);  MInvoice invoice=new MInvoice(Env.getCtx(),C_Invoice_ID,null);  if (invoice.get_ID() == 0) {    log.log(Level.SEVERE,"Not found - C_Invoice_ID=" + C_Invoice_ID);    return false;  }  int lineCount=0;  for (int i=0; i < m_selectionList.size(); i++) {    if (isSelectionSelected(m_selectionList.get(i))) {      BigDecimal qty=(BigDecimal)((VNumber)m_qtyList.get(i)).getValue();      int M_Product_ID=((Integer)m_productList.get(i)).intValue();      MInvoiceLine il=new MInvoiceLine(invoice);      il.setM_Product_ID(M_Product_ID,true);      il.setQty(qty);      il.setPrice();      il.setTax();      if (il.save())       lineCount++; else       log.log(Level.SEVERE,"Line not saved");    }  }  log.config("#" + lineCount);  return true;}  }
class C{  protected void doClose(){}  }
class C{  public static void createFolderStructure(IProject project,IPath projectRelativeFolderPath) throws CoreException {  IContainer curContainer=project;  for (  String pathSegment : projectRelativeFolderPath.segments()) {    curContainer=curContainer.getFolder(new Path(pathSegment));    createFolderIfNonExistent((IFolder)curContainer,new NullProgressMonitor());  }}  }
class C{  public Matrix3f transposeLocal(){  float tmp=m01;  m01=m10;  m10=tmp;  tmp=m02;  m02=m20;  m20=tmp;  tmp=m12;  m12=m21;  m21=tmp;  return this;}  }
class C{  public boolean isEndProduct(){  Object oo=get_Value(COLUMNNAME_IsEndProduct);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static <T>List<T> toList(T obj1){  List<T> list=new LinkedList<T>();  list.add(obj1);  return list;}  }
class C{  private void updateFromTempSensorManager(){  Sensor.SensorState sensorState=Sensor.SensorState.NONE;  Sensor.SensorDataSet sensorDataSet=null;  if (tempSensorManager == null) {    tempSensorManager=SensorManagerFactory.getTempSensorManager(this);  }  if (tempSensorManager != null) {    sensorState=tempSensorManager.getSensorState();    sensorDataSet=tempSensorManager.getSensorDataSet();  }  updateSensorStateAndDataSet(sensorState,sensorDataSet);}  }
class C{  public InlineQueryResultPhoto.InlineQueryResultPhotoBuilder title(String title){  this.title=title;  return this;}  }
class C{  public X4(){  super("X4",1);}  }
class C{  public GenericEntry retrieveCustomerId(String domain) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=service.getEntry(new URL("https://apps-apis.google.com/a/feeds/customer/2.0/customerId"),GenericEntry.class);  return entry;}  }
class C{  public void testSendMomentaryFunctionGroup4(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.sendMomentaryFunctionGroup4();}  }
class C{  public static boolean checkGeoCompatibleOfOtherVdcs(String targetVersion){  URI localVdcId=getLocalVdc().getId();  List<URI> geoVerIds=dbClient.queryByType(VdcVersion.class,true);  List<VdcVersion> geoVersions=dbClient.queryObject(VdcVersion.class,geoVerIds);  for (  VdcVersion geoVersion : geoVersions) {    URI vdcId=geoVersion.getVdcId();    if (vdcId.equals(localVdcId)) {      continue;    }    if (VdcVersionComparator.compare(geoVersion.getVersion(),targetVersion) < 0) {      log.info("Vdc {} version is less than {}",new Object[]{vdcId,targetVersion});      return false;    }  }  return true;}  }
class C{  public OutputBitStream(final String name) throws FileNotFoundException {  this(new FileOutputStream(name),DEFAULT_BUFFER_SIZE);}  }
class C{  public byte[] archive(LayoutEngine layout,PrintInfo info){  MClient client=MClient.get(layout.getCtx());  String aaClient=client.getAutoArchive();  String aaRole=null;  String aa=aaClient;  if (aa == null)   aa=MClient.AUTOARCHIVE_None;  if (aaRole != null) {    if (aaRole.equals(MClient.AUTOARCHIVE_AllReportsDocuments))     aa=aaRole; else     if (aaRole.equals(MClient.AUTOARCHIVE_Documents) && !aaClient.equals(MClient.AUTOARCHIVE_AllReportsDocuments))     aa=aaRole;  }  if (aa.equals(MClient.AUTOARCHIVE_None))   return null;  if (aa.equals(MClient.AUTOARCHIVE_ExternalDocuments)) {    if (info.isReport())     return null;  }  if (aa.equals(MClient.AUTOARCHIVE_Documents)) {    if (info.isReport())     return null;  }  byte[] data=Document.getPDFAsArray(layout.getPageable(false));  if (data == null)   return null;  MArchive archive=new MArchive(layout.getCtx(),info,null);  archive.setBinaryData(data);  archive.saveEx();  return data;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:57.957 -0500",hash_original_method="1AF05D3B3AC1A0BE6FEC3ED8E4AD92D7",hash_generated_method="602CBE64B37DDC68026D3CD1EA56EC7D") public int read(byte buffer[]) throws IOException {  return read(buffer,0,buffer.length);}  }
class C{  protected void prepareQueries(Space space,List<List<DimensionIndex>> hierarchies) throws ScopeException, SQLScopeException {  this.queries=new HashMap<DimensionPK,HierarchyQuery>();  this.eagerIndexing=new ArrayList<DimensionPK>();  SQLQueryPerDimensionPK=new HashMap<DimensionPK,String>();  HierarchyQuery main_query=null;  HierarchyQuery continuous_query=null;  Domain domain=space.getDomain();  for (  List<DimensionIndex> hierarchy : hierarchies) {    boolean handling_continuous=false;    DimensionIndex root=hierarchy.get(0);    if (!root.getStatus().equals(Status.ERROR)) {      if (root.getDimension().getType() == Type.CONTINUOUS) {        IntervalleObject innerRange=computeContinuousStatistic(root);        if (innerRange == null) {          if (continuous_query == null) {            continuous_query=new HierarchyQuery(space.getUniverse(),domain);            DimensionMapping dm=continuous_query.selectContinuous(domain,root);            dm.setOption(DimensionMapping.COMPUTE_INDEX);            handling_continuous=true;            String renderedQuery;            try {              renderedQuery=continuous_query.render();            } catch (            RenderingException e) {              logger.error("could no create SQL Query for " + hierarchy.toString());              root.setPermanentError("could no create SQL Query for " + hierarchy.toString());              continue;            }            if (needRefresh(hierarchy,renderedQuery)) {              logger.debug(" adding  " + renderedQuery);              this.queries.put(root.getDimension().getId(),continuous_query);              this.eagerIndexing.add(root.getDimension().getId());            }          }        } else {          ExpressionAST min=innerRange.getLowerBoundExpression();          ExpressionAST max=innerRange.getUpperBoundExpression();          IDomain check=root.getAxis().getDefinitionSafe().getImageDomain();          if (min.getImageDomain().isInstanceOf(check) && max.getImageDomain().isInstanceOf(check)) {            HierarchyQuery range_query=new HierarchyQuery(space.getUniverse(),domain);            DimensionMapping dm=range_query.selectContinuous(domain,root);            ExpressionAST condition=createRangeExpression(root,innerRange);            range_query.where(condition);            dm.setOption(DimensionMapping.COMPUTE_INDEX);            handling_continuous=true;            String renderedQuery;            try {              renderedQuery=range_query.render();            } catch (            RenderingException e) {              logger.error("could no create SQL Query for " + hierarchy.toString());              root.setPermanentError("could no create SQL Query for " + hierarchy.toString());              continue;            }            if (needRefresh(hierarchy,renderedQuery)) {              this.queries.put(dm.getDimensionIndex().getDimension().getId(),range_query);              logger.debug(" adding  " + renderedQuery);            }          }        }      }    }    HierarchyQuery select=new HierarchyQuery(space.getUniverse(),domain);    select.setOrdering(ORDERING.ASCENT);    boolean required=prepareQueryForDimension(domain,select,hierarchy,handling_continuous);    if (required) {      float estimate=select.getEstimatedComplexity();      String renderedQuery;      try {        renderedQuery=select.render();      } catch (      RenderingException e) {        logger.info("could no create SQL Query for " + hierarchy.toString());        root.setPermanentError("could no create SQL Query for " + hierarchy.toString());        continue;      }      if (needRefresh(hierarchy,renderedQuery)) {        if (main_query != null && main_query.getQuerySize() + select.getQuerySize() <= 4 && main_query.getEstimatedComplexity() * estimate < 100000) {          prepareQueryForDimension(domain,main_query,hierarchy,handling_continuous);          String dis="";          for (          DimensionIndex di : hierarchy) {            this.queries.put(di.getDimension().getId(),main_query);            dis+=di.getDimensionName() + " ";          }          logger.debug(dis + "\nadding  " + renderedQuery);        } else {          main_query=select;          String dis="";          for (          DimensionIndex di : hierarchy) {            this.queries.put(di.getDimension().getId(),main_query);            dis+=di.getDimensionName() + " ";          }          logger.debug(dis + "\nadding  " + renderedQuery);        }      }      for (      DimensionPK di : queries.keySet()) {        try {          this.SQLQueryPerDimensionPK.put(di,queries.get(di).render());        } catch (        RenderingException e) {          e.printStackTrace();        }      }    }    if (hierarchy.size() > 1) {      if (root.getStatus() == Status.ERROR) {        logger.info("Could not initialized Correlation Mapping for \n" + hierarchy.toString()," :\n Root index wih Status ERROR");      } else {        root.initCorrelationMapping(hierarchy);      }    }  }}  }
class C{  public static void main(String[] args){  runFilter(new MekaClassAttributes(),args);}  }
class C{  public static MultiAdaptersCreator empty(){  return new MultiAdaptersCreator(new ArrayList<>());}  }
class C{  public int signatureIndex(int i){  return descriptorIndex(i);}  }
class C{  public String stemmerTipText(){  return "The stemming algorithm to use on the words.";}  }
class C{  public Builder withTimeout(long timeout){  response.timeout=Assert.argNot(timeout,timeout <= 0,"timeout must be positive");  return this;}  }
class C{  public SelectionBuilder table(String table,String... tableParams){  if (tableParams != null && tableParams.length > 0) {    String[] parts=table.split("[?]",tableParams.length + 1);    StringBuilder sb=new StringBuilder(parts[0]);    for (int i=1; i < parts.length; i++) {      sb.append('"').append(tableParams[i - 1]).append('"').append(parts[i]);    }    mTable=sb.toString();  } else {    mTable=table;  }  return this;}  }
class C{  protected JvmRTInputArgsTableMeta createJvmRTInputArgsTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmRTInputArgsTableMeta(mib,objectserver);}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public static byte[] xorArrays(byte[] a,byte[] b){  byte[] xor=new byte[a.length];  for (int i=0; i < a.length; i++) {    xor[i]=(byte)(a[i] ^ b[i]);  }  return xor;}  }
class C{  public void reloadForm(){  Form currentForm=Display.getInstance().getCurrent();  Command backCommand=currentForm.getBackCommand();  Form newForm=(Form)createContainer(fetchResourceFile(),currentForm.getName());  if (backCommand != null) {    setBackCommand(newForm,backCommand);    getFormListenerInstance(newForm,null);    for (int iter=0; iter < currentForm.getCommandCount(); iter++) {      if (backCommand == currentForm.getCommand(iter)) {        newForm.addCommand(backCommand,newForm.getCommandCount());        break;      }    }  }  beforeShow(newForm);  Transition tin=newForm.getTransitionInAnimator();  Transition tout=newForm.getTransitionOutAnimator();  currentForm.setTransitionInAnimator(CommonTransitions.createEmpty());  currentForm.setTransitionOutAnimator(CommonTransitions.createEmpty());  newForm.setTransitionInAnimator(CommonTransitions.createEmpty());  newForm.setTransitionOutAnimator(CommonTransitions.createEmpty());  newForm.layoutContainer();  newForm.show();  postShowImpl(newForm);  newForm.setTransitionInAnimator(tin);  newForm.setTransitionOutAnimator(tout);}  }
class C{  @SuppressWarnings("unused") public static void bindToRegister(boolean value){}  }
class C{  protected void paintText(Graphics g,JMenuItem menuItem,Rectangle textRect,String text){  if (WindowsMenuItemUI.isVistaPainting()) {    WindowsMenuItemUI.paintText(accessor,g,menuItem,textRect,text);    return;  }  ButtonModel model=menuItem.getModel();  Color oldColor=g.getColor();  if (model.isEnabled() && model.isArmed()) {    g.setColor(selectionForeground);  }  WindowsGraphicsUtils.paintText(g,menuItem,textRect,text,0);  g.setColor(oldColor);}  }
class C{  private void addBaselineCaptureKeysToRequest(CaptureRequest.Builder builder){  builder.set(CaptureRequest.CONTROL_AF_REGIONS,mAFRegions);  builder.set(CaptureRequest.CONTROL_AE_REGIONS,mAERegions);  builder.set(CaptureRequest.SCALER_CROP_REGION,mCropRegion);  builder.set(CaptureRequest.CONTROL_AF_MODE,mControlAFMode);  builder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_IDLE);  builder.set(CaptureRequest.STATISTICS_FACE_DETECT_MODE,CaptureRequest.STATISTICS_FACE_DETECT_MODE_FULL);  builder.set(CaptureRequest.CONTROL_SCENE_MODE,CaptureRequest.CONTROL_SCENE_MODE_FACE_PRIORITY);}  }
class C{  public void print(int inum){  print(String.valueOf(inum));}  }
class C{  protected int engineGetBlockSize(){  return BlowfishConstants.BLOWFISH_BLOCK_SIZE;}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public final String toString(int depth){  if (depth <= 0)   return "";  String ret="\n*OpDefNode: " + this.getName().toString() + "\n  "+ super.toString(depth)+ "\n  local: "+ local+ "\n  letInLevel: "+ letInLevel+ "\n  inRecursive: "+ inRecursive+ "\n  inRecursiveSection: "+ inRecursiveSection+ "\n  recursiveSection: "+ recursiveSection+ "\n  local: "+ local+ "\n  source: "+ ((source == null) ? "this" : (source.getName().toString() + " (uid: " + source.myUID+ ")"))+ "\n  originallyDefinedInModule: "+ ((originallyDefinedInModule == null) ? "null" : (originallyDefinedInModule.getName().toString() + " (uid: " + originallyDefinedInModule.myUID+ ")"))+ ((stepNode == null) ? "" : ("\n  stepNode: " + Strings.indent(4,stepNode.toString(depth - 3))));  if (params != null) {    String tempString="\n  Formal params: " + params.length;    for (int i=0; i < params.length; i++) {      tempString+=Strings.indent(4,((params[i] != null) ? params[i].toString(depth - 1) : "\nnull"));    }    ret+=tempString;  } else {    ret+=Strings.indent(2,"\nFormal params: null");  }  if (depth > 1) {    if (st != null) {      ret+="\n  SymbolTable: non-null";    } else {      ret+="\n  SymbolTable: null";    }  }  if (body != null) {    ret+=Strings.indent(2,"\nBody:" + Strings.indent(2,body.toString(depth - 1)));  } else {    ret+=Strings.indent(2,"\nBody: null");  }  if (labels != null) {    ret+="\n  Labels: ";    Enumeration list=labels.keys();    while (list.hasMoreElements()) {      ret+=((UniqueString)list.nextElement()).toString() + "  ";    }    ;  } else {    ret+="\n  Labels: null";  }  ;  return ret;}  }
class C{  public AnnotationVisitor visitAnnotation(String name,String desc){  if (av != null) {    return av.visitAnnotation(name,desc);  }  return null;}  }
class C{  public boolean containsElevationModel(ElevationModel em){  if (em == null) {    String msg=Logging.getMessage("nullValue.ElevationModelIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (this.elevationModels.contains(em))   return true;  for (  ElevationModel child : this.elevationModels) {    if (child instanceof CompoundElevationModel) {      if (((CompoundElevationModel)child).containsElevationModel(em))       return true;    }  }  return false;}  }
class C{  CrowdJob createNewJob(CrowdJob job) throws HttpServerErrorException {  RestTemplate restTemplate=new RestTemplate();  restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());  restTemplate.getMessageConverters().add(new FormHttpMessageConverter());  JsonNode result=restTemplate.postForObject(newJobURL,job.getArgumentMap(),JsonNode.class,apiKey);  return new CrowdJob(result);}  }
class C{  private TypeSpec generateContentValuesBuilderClass(ObjectMappableAnnotatedClass clazz,String mapperClassName,String className){  String cvVarName="contentValues";  MethodSpec constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PRIVATE).addStatement("$L = new $T()",cvVarName,ClassName.get(ContentValues.class)).build();  TypeSpec.Builder builder=TypeSpec.classBuilder(className).addJavadoc("Builder class to generate type sage {@link $T } . At the end you have to call {@link #build()}\n",TypeName.get(ContentValues.class)).addModifiers(Modifier.PUBLIC,Modifier.STATIC).addField(ContentValues.class,cvVarName,Modifier.PRIVATE).addMethod(constructor).addMethod(MethodSpec.methodBuilder("build").addJavadoc("Creates and returns a $T from the builder\n",TypeName.get(ContentValues.class)).addJavadoc("@return $T",TypeName.get(ContentValues.class)).addModifiers(Modifier.PUBLIC).addStatement("return $L",cvVarName).returns(ContentValues.class).build());  String packageName=getPackageName(clazz);  for (  ColumnAnnotateable e : clazz.getColumnAnnotatedElements()) {    e.generateContentValuesBuilderMethod(builder,ClassName.get(packageName,mapperClassName,className),cvVarName);  }  return builder.build();}  }
class C{  public static String patchCharsetEncoding(String encoding){  if ((encoding == null) || (encoding.length() < 3))   return null;  encoding=encoding.trim();  encoding=encoding.toUpperCase();  if (encoding.startsWith("SHIFT"))   return "Shift_JIS";  if (encoding.startsWith("BIG"))   return "Big5";  if (encoding.startsWith("WINDOWS"))   encoding="windows" + encoding.substring(7);  if (encoding.startsWith("MACINTOSH"))   encoding="MacRoman";  encoding=CommonPattern.UNDERSCORE.matcher(encoding).replaceAll("-");  if (encoding.matches("GB[_-]?2312([-_]80)?"))   return "GB2312";  if (encoding.matches(".*UTF[-_]?8.*"))   return StandardCharsets.UTF_8.name();  if (encoding.startsWith("US"))   return StandardCharsets.US_ASCII.name();  if (encoding.startsWith("KOI"))   return "KOI8-R";  if (encoding.startsWith("windows") && encoding.length() > 7) {    final char c=encoding.charAt(7);    if ((c >= '0') && (c <= '9')) {      encoding="windows-" + encoding.substring(7);    }  }  if (encoding.startsWith("ISO")) {    if (encoding.length() > 3) {      final char c=encoding.charAt(3);      if ((c >= '0') && (c <= '9')) {        encoding="ISO-" + encoding.substring(3);      }    }    if (encoding.length() > 8) {      final char c=encoding.charAt(8);      if ((c >= '0') && (c <= '9')) {        encoding=encoding.substring(0,8) + "-" + encoding.substring(8);      }    }  }  if (encoding.startsWith("ISO-8559")) {    encoding="ISO-8859" + encoding.substring(8);  }  if (encoding.matches("CP([_-])?125[0-8]")) {    final char c=encoding.charAt(2);    if ((c >= '0') && (c <= '9')) {      encoding="windows-" + encoding.substring(2);    } else {      encoding="windows" + encoding.substring(2);    }  }  return encoding;}  }
class C{  private final int _shortUTF8Encode(char[] str,int i,int end){  int ptr=_outputTail;  final byte[] outBuf=_outputBuffer;  do {    int c=str[i];    if (c > 0x7F) {      return _shortUTF8Encode2(str,i,end,ptr);    }    outBuf[ptr++]=(byte)c;  } while (++i < end);  int codedLen=ptr - _outputTail;  _outputTail=ptr;  return codedLen;}  }
class C{  protected boolean beforeDelete(){  return delete_Accounting("C_BankAccount_Acct");}  }
class C{  public void prepare(boolean fromSpace){  this.fromSpace=fromSpace;}  }
class C{  public Bigquery create(String projectId,String datasetId) throws IOException {  Bigquery bigquery=create(getClass().getSimpleName(),new UrlFetchTransport(),new JacksonFactory(),new AppIdentityCredential(BigqueryScopes.all()));  if (!knownExistingDatasets.contains(datasetId)) {    ensureDataset(bigquery,projectId,datasetId);    knownExistingDatasets.add(datasetId);  }  return bigquery;}  }
class C{  public XObject execute(XPathContext xctxt,int context,DTM dtm,int expType) throws javax.xml.transform.TransformerException {  DTMIterator nl=m_functionExpr.asIterator(xctxt,context);  XNumber score=SCORE_NONE;  if (null != nl) {    int n;    while (DTM.NULL != (n=nl.nextNode())) {      score=(n == context) ? SCORE_OTHER : SCORE_NONE;      if (score == SCORE_OTHER) {        context=n;        break;      }    }    nl.detach();  }  return score;}  }
class C{  public static final long unsignedInt(int val){  return (val & 0xFFFFFFFF);}  }
class C{  public static InputStream openStream(NetworkParameters params){  return CheckpointManager.class.getResourceAsStream("/" + params.getId() + ".checkpoints.txt");}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=crossCheckStateCount;  stateCount[0]=0;  stateCount[1]=0;  stateCount[2]=0;  int i=startI;  while (i >= 0 && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (i == maxI || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[2] <= maxCount) {    stateCount[2]++;    i++;  }  if (stateCount[2] > maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  private static Exception extractException(Exception e){  while (e instanceof PrivilegedActionException) {    e=((PrivilegedActionException)e).getException();  }  return e;}  }
class C{  public AzLineageMetadataEtl(int appId,long whExecId,Properties properties){  super(appId,null,whExecId,properties);  this.timeFrame=Integer.valueOf(this.prop.getProperty(Constant.AZ_LINEAGE_ETL_LOOKBACK_MINS_KEY,"90"));  if (this.prop.contains(Constant.AZ_LINEAGE_ETL_END_TIMESTAMP_KEY))   this.endTimeStamp=Long.valueOf(this.prop.getProperty(Constant.AZ_LINEAGE_ETL_END_TIMESTAMP_KEY));  try {    setUp();  } catch (  SQLException e) {    e.printStackTrace();  }}  }
class C{  public Builder url(HttpUrl url){  Validator.notNull(url,"'url' cannot be null");  this.url=url;  return this;}  }
class C{  public static ClassInfo of(Class<?> underlyingClass){  return of(underlyingClass,false);}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null) {        changeEvent=new ChangeEvent(this);      }      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  @Override public String toString(){  return "d" + (dimension + 1) + "-["+ FormatUtil.NF2.format(min)+ "; "+ FormatUtil.NF2.format(max)+ "[";}  }
class C{  final int eventToSquare(MouseEvent evt){  int xCrd=evt.getX();  int yCrd=evt.getY();  int sq=-1;  if ((xCrd >= x0) && (yCrd >= y0) && (sqSize > 0)) {    int x=(xCrd - x0) / sqSize;    int y=7 - (yCrd - y0) / sqSize;    if ((x >= 0) && (x < 8) && (y >= 0)&& (y < 8)) {      if (flipped) {        x=7 - x;        y=7 - y;      }      sq=Position.getSquare(x,y);    }  }  return sq;}  }
class C{  public void output(PrintWriter out){  m_html.output(out);}  }
class C{  public void play(InputStream is) throws Exception {  play(is,-1);}  }
class C{  public StatementEvent(PooledConnection con,PreparedStatement statement){  super(con);  this.statement=statement;  this.exception=null;}  }
class C{  protected void doTestConfigUpdate(String testCollectionName,String solrUrl) throws Exception {  if (!solrUrl.endsWith("/"))   solrUrl+="/";  String configUrl=solrUrl + testCollectionName + "/config";  Map<String,Object> configJson=SolrCLI.getJson(configUrl);  Object maxTimeFromConfig=SolrCLI.atPath("/config/updateHandler/autoSoftCommit/maxTime",configJson);  assertNotNull(maxTimeFromConfig);  assertEquals(new Long(-1L),maxTimeFromConfig);  String prop="updateHandler.autoSoftCommit.maxTime";  Long maxTime=new Long(3000L);  String[] args=new String[]{"-collection",testCollectionName,"-property",prop,"-value",maxTime.toString(),"-solrUrl",solrUrl};  SolrCLI.ConfigTool tool=new SolrCLI.ConfigTool();  CommandLine cli=SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()),args);  log.info("Sending set-property '" + prop + "'="+ maxTime+ " to SolrCLI.ConfigTool.");  assertTrue("Set config property failed!",tool.runTool(cli) == 0);  configJson=SolrCLI.getJson(configUrl);  maxTimeFromConfig=SolrCLI.atPath("/config/updateHandler/autoSoftCommit/maxTime",configJson);  assertNotNull(maxTimeFromConfig);  assertEquals(maxTime,maxTimeFromConfig);}  }
class C{  @Deprecated private ECKey(@Nullable BigInteger privKey,@Nullable byte[] pubKey){  this(privKey,pubKey,false);}  }
class C{  public double elapsedTime(){  long now=threadTimer.getCurrentThreadCpuTime();  return (now - start) / NANOSECONDS_PER_SECOND;}  }
class C{  public Hours plus(int hours){  if (hours == 0) {    return this;  }  return Hours.hours(FieldUtils.safeAdd(getValue(),hours));}  }
class C{  public static Interval oddsFromTo(int from,int to){  if (from % 2 == 0) {    if (from < to) {      from++;    } else {      from--;    }  }  if (to % 2 == 0) {    if (to > from) {      to--;    } else {      to++;    }  }  return Interval.fromToBy(from,to,to > from ? 2 : -2);}  }
class C{  private static void addNewSegment(LinkedList<DNASegment> segments,Event event,HashMap<Integer,DNAStrand> strands,int firstJulianDay,int minStart,int minMinutes){  if (event.startDay > event.endDay) {    Log.wtf(TAG,"Event starts after it ends: " + event.toString());  }  if (event.startDay != event.endDay) {    Event lhs=new Event();    lhs.color=event.color;    lhs.startDay=event.startDay;    lhs.startTime=event.startTime;    lhs.endDay=lhs.startDay;    lhs.endTime=DAY_IN_MINUTES - 1;    while (lhs.startDay != event.endDay) {      addNewSegment(segments,lhs,strands,firstJulianDay,minStart,minMinutes);      lhs.startDay++;      lhs.endDay=lhs.startDay;      lhs.startTime=0;      minStart=0;    }    lhs.endTime=event.endTime;    event=lhs;  }  DNASegment segment=new DNASegment();  int dayOffset=(event.startDay - firstJulianDay) * DAY_IN_MINUTES;  int endOfDay=dayOffset + DAY_IN_MINUTES - 1;  segment.startMinute=Math.max(dayOffset + event.startTime,minStart);  int minEnd=Math.min(segment.startMinute + minMinutes,endOfDay);  segment.endMinute=Math.max(dayOffset + event.endTime,minEnd);  if (segment.endMinute > endOfDay) {    segment.endMinute=endOfDay;  }  segment.color=event.color;  segment.day=event.startDay;  segments.add(segment);  DNAStrand strand=getOrCreateStrand(strands,segment.color);  strand.count++;}  }
class C{  public void add(String processXml,OperatorChain currentlyShownOperatorChain,Operator selectedOperator){  if (processXml == null) {    throw new IllegalArgumentException("processXml must not be null!");  }  undoList.add(new Triple<String,OperatorChain,Operator>(processXml,currentlyShownOperatorChain,selectedOperator));}  }
class C{  public void pause(){  pauseTime=System.currentTimeMillis();}  }
class C{  public static Certificate issuer(KeyStore keyStore,Certificate c) throws Exception {  if (!(c instanceof X509Certificate)) {    throw new IllegalStateException("issuer requires an X509Certificate, found " + c);  }  X509Certificate cert=(X509Certificate)c;  Certificate found=null;  for (  String alias : Collections.list(keyStore.aliases())) {    if (!keyStore.entryInstanceOf(alias,TrustedCertificateEntry.class)) {      continue;    }    TrustedCertificateEntry certificateEntry=(TrustedCertificateEntry)keyStore.getEntry(alias,null);    Certificate certificate=certificateEntry.getTrustedCertificate();    if (!(certificate instanceof X509Certificate)) {      continue;    }    X509Certificate x=(X509Certificate)certificate;    if (!cert.getIssuerDN().equals(x.getSubjectDN())) {      continue;    }    if (found != null) {      throw new IllegalStateException("KeyStore has more than one issuing CA for " + cert + "\nfirst: "+ found+ "\nsecond: "+ certificate);    }    found=certificate;  }  if (found == null) {    throw new IllegalStateException("KeyStore contained no issuing CA for " + cert);  }  return found;}  }
class C{  protected final void copyAttributes(final int nodeID,SerializationHandler handler) throws SAXException {  for (int current=getFirstAttributeIdentity(nodeID); current != DTM.NULL; current=getNextAttributeIdentity(current)) {    int eType=_exptype2(current);    copyAttribute(current,eType,handler);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.116 -0500",hash_original_method="82039C4DF7CA25BEE85708617CA17C0A",hash_generated_method="BBE1D43AB052D751607921804C6D353A") private void siftUp(int k,RunnableScheduledFuture key){  while (k > 0) {    int parent=(k - 1) >>> 1;    RunnableScheduledFuture e=queue[parent];    if (key.compareTo(e) >= 0)     break;    queue[k]=e;    setIndex(e,k);    k=parent;  }  queue[k]=key;  setIndex(key,k);}  }
class C{  public ConnectorState endState(int... partitions){  return overrideSequenceNumber(currentState(partitions),0xffffffff);}  }
class C{  static byte[] discardWhitespace(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {switch (data[i]) {case (byte)' ':case (byte)'\n':case (byte)'\r':case (byte)'\t':      break;default :    groomedData[bytesCopied++]=data[i];}}byte packedData[]=new byte[bytesCopied];System.arraycopy(groomedData,0,packedData,0,bytesCopied);return packedData;}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  public void writingRequestHeaders(){  if (sentRequestMillis != -1) {    throw new IllegalStateException();  }  sentRequestMillis=System.currentTimeMillis();}  }
class C{  public Map<String,String> partition(String replicaSetName){  return sourcePartitionsByReplicaSetName.computeIfAbsent(replicaSetName,null);}  }
class C{  public var removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static Toast showToast(Context ctx,CharSequence msg,int duration){  Toast toast=Toast.makeText(ctx,msg,Toast.LENGTH_SHORT);  toast.setDuration(duration);  toast.show();  return toast;}  }
class C{  public final void writeChar(char[] pa,int start,int n) throws IOException {  for (int i=0; i < n; i++) {    writeChar(pa[start + i]);  }}  }
class C{  public PersistentPageFile(int pageSize,String fileName,Class<P> pageclass){  super(pageSize);  this.pageclass=pageclass;  File f=new File(fileName);  existed=f.exists();  try {    file=new RandomAccessFile(f,"rw");  } catch (  IOException e) {    throw new AbortException("IO error in loading persistent page file.",e);  }}  }
class C{  public CampoTablaVO createCampoTabla(CampoTablaVO campoTablaVO){  DbConnection conn=getConnection();  try {    campoTablaVO.setId(getGuid(campoTablaVO.getId()));    DbInsertFns.insert(conn,TABLE_NAME,DbUtil.getColumnNames(COL_DEFS),new SigiaDbInputRecord(COL_DEFS,campoTablaVO));    return campoTablaVO;  } catch (  Exception e) {    logger.error(e.getMessage());    throw new DBException(e.getMessage());  }}  }
class C{  public X509Certificate engineLookupResolveX509Certificate(Element element,String BaseURI,StorageResolver storage) throws KeyResolverException {  return null;}  }
class C{  @Override public void add(Permission permission){  if (!(permission instanceof ServicePermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a " + "readonly PermissionCollection");  ServicePermission sp=(ServicePermission)permission;  String name=sp.getName();  ServicePermission existing=(ServicePermission)permissions.get(name);  if (existing != null) {    int oldMask=existing.getMask();    int newMask=sp.getMask();    if (oldMask != newMask) {      permissions.put(name,new ServicePermission(name,oldMask | newMask));    }  } else {    permissions.put(name,permission);  }  if (!all_allowed) {    if (name.equals("*"))     all_allowed=true;  }}  }
class C{  public void fatal(String msg,Object arg0){  innerLog(Level.FATAL,null,msg,arg0,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public static Object max(Comparable c1,Comparable c2){  return (compare(c1,c2,false) >= 0 ? c1 : c2);}  }
class C{  public boolean isEmpty(){  boolean neuronsGone=false;  boolean networksGone=false;  if (this.getNeuronCount() == 0) {    neuronsGone=true;  }  return (neuronsGone && networksGone);}  }
class C{  protected void animateToState(boolean checked){  if (mProcessAnimator == null) {    return;  }  if (mProcessAnimator.isRunning()) {    mProcessAnimator.cancel();  }  mProcessAnimator.setDuration(mAnimationDuration);  if (checked) {    mProcessAnimator.setFloatValues(mProcess,1f);  } else {    mProcessAnimator.setFloatValues(mProcess,0);  }  mProcessAnimator.start();}  }
class C{  public void transformNode(int node,Result outputTarget) throws TransformerException {  SerializationHandler xoh=createSerializationHandler(outputTarget);  this.setSerializationHandler(xoh);  m_outputTarget=outputTarget;  transformNode(node);}  }
class C{  public boolean removeUsedPrefix(String prefix){  prefix=prefix.replace(' ','_');  return usedPrefixes.remove(prefix.intern());}  }
class C{  public boolean add(E e){  ensureCapacityInternal(size + 1);  elementData[size++]=e;  return true;}  }
class C{  public JavacMessages(String bundleName) throws MissingResourceException {  this(bundleName,null);}  }
class C{  public int[] toArray(){  int[] result=new int[size];  System.arraycopy(vector,0,result,0,size);  return result;}  }
class C{  public void testPublicCloneable(){  DefaultCategoryDataset d=new DefaultCategoryDataset();  assertTrue(d instanceof PublicCloneable);}  }
class C{  public static boolean isDrmConvertNeeded(String mimetype){  return MIMETYPE_DRM_MESSAGE.equals(mimetype);}  }
class C{  private Set<String> findResourceNamesFromJarFile(JarFile jarFile,String prefix,String location) throws IOException {  String toScan=prefix + location + (location.endsWith("/") ? "" : "/");  Set<String> resourceNames=new TreeSet<String>();  Enumeration<JarEntry> entries=jarFile.entries();  while (entries.hasMoreElements()) {    String entryName=entries.nextElement().getName();    if (entryName.startsWith(toScan)) {      resourceNames.add(entryName.substring(prefix.length()));    }  }  return resourceNames;}  }
class C{  @Override public boolean first() throws SQLException {  try {    debugCodeCall("first");    checkClosed();    if (result.getRowId() < 0) {      return nextRow();    }    resetResult();    return nextRow();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static synchronized void logStart(){  IProduct product=Platform.getProduct();  String aboutText=product.getProperty("aboutText");  String application="verinice";  if (aboutText != null) {    String lines[]=aboutText.split("\\r?\\n");    if (lines != null && lines.length > 0) {      application=lines[0];    }  }  LOG.info("Starting " + application + ", "+ DF.format(System.currentTimeMillis()));}  }
class C{  public DocumentAnalysisRequest(){  super(METHOD.POST,"/analysis/document");}  }
class C{  public static void main(String[] args){  glfwInit();  long window=createWindow();  stackPush();  FloatBuffer buffer=stackMallocFloat(3 * 2);  buffer.put(-0.5f).put(-0.5f);  buffer.put(+0.5f).put(-0.5f);  buffer.put(+0.0f).put(+0.5f);  buffer.flip();  int vbo=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,vbo);  glBufferData(GL_ARRAY_BUFFER,buffer,GL_STATIC_DRAW);  stackPop();  glEnableClientState(GL_VERTEX_ARRAY);  glVertexPointer(2,GL_FLOAT,0,0L);  while (!glfwWindowShouldClose(window)) {    glfwPollEvents();    glDrawArrays(GL_TRIANGLES,0,3);    glfwSwapBuffers(window);  }  glfwTerminate();  System.out.println("Fin.");}  }
class C{  public LayersMenu(LayerHandler lHandler,String menuName,int menuType){  super();  this.menuType=menuType;  setText(menuName);  layerHandler=lHandler;  if (layerHandler != null) {    setLayers(layerHandler.getLayers());  }}  }
class C{  public SuspendException(List<LocalizedText> messages){  super(messages);}  }
class C{  public void addExceptionHandler(int start,int end,int handler,CtClass type){  addExceptionHandler(start,end,handler,constPool.addClassInfo(type));}  }
class C{  public Value evaluate(Context cx,TypeExpressionNode node){  return super.evaluate(cx,node);}  }
class C{  private void addRestorationIdentifierToMap(String value){  if (activity != null) {    restorationIdentifierMap.put(activity.toString(),value);  }}  }
class C{  public Modulo3Equation add(final int variable,int coefficient){  assert coefficient % 3 != 0 : coefficient;  if (list.set(variable,coefficient) != 0)   throw new IllegalStateException();  isEmpty=false;  return this;}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  protected void assertOffHeapRegionAttributes(){  ManagementService service=ManagementService.getExistingManagementService(getCache());  assertNotNull(service);  assertTrue(service.isManager());  RegionMXBean regionBean=service.getLocalRegionMBean(OFF_HEAP_REGION_PATH);  assertNotNull(regionBean);  RegionAttributesData regionData=regionBean.listRegionAttributes();  assertNotNull(regionData);  assertTrue(regionData.getOffHeap());}  }
class C{  public GenerateModelJPA(int AD_Table_ID,String directory,String packageName){  StringBuffer mandatory=new StringBuffer();  StringBuffer sb=createColumns(AD_Table_ID,mandatory);  String tableName=createHeader(AD_Table_ID,sb,mandatory,packageName);  writeToFile(sb,directory + tableName + ".java");}  }
class C{  public UncreatedSystemException(String message){  super(message);}  }
class C{  public OSRef(double easting,double northing){  this.easting=easting;  this.northing=northing;}  }
class C{  public static void actionMove(PageContext pageContext,lucee.runtime.security.SecurityManager securityManager,Resource source,String strDestination,int nameconflict,String serverPassword,Object acl,int mode,String attributes) throws PageException {  if (nameconflict == NAMECONFLICT_UNDEFINED)   nameconflict=NAMECONFLICT_OVERWRITE;  if (source == null)   throw new ApplicationException("attribute source is not defined for tag file");  if (StringUtil.isEmpty(strDestination))   throw new ApplicationException("attribute destination is not defined for tag file");  Resource destination=toDestination(pageContext,strDestination,source);  securityManager.checkFileLocation(pageContext.getConfig(),source,serverPassword);  securityManager.checkFileLocation(pageContext.getConfig(),destination,serverPassword);  if (source.equals(destination))   return;  if (!source.exists())   throw new ApplicationException("source file [" + source.toString() + "] doesn't exist"); else   if (!source.isFile())   throw new ApplicationException("source file [" + source.toString() + "] is not a file"); else   if (!source.isReadable() || !source.isWriteable())   throw new ApplicationException("no access to source file [" + source.toString() + "]");  if (destination.isDirectory())   destination=destination.getRealResource(source.getName());  if (destination.exists()) {    if (nameconflict == NAMECONFLICT_SKIP)     return; else     if (nameconflict == NAMECONFLICT_OVERWRITE)     destination.delete(); else     if (nameconflict == NAMECONFLICT_MAKEUNIQUE)     destination=makeUnique(destination); else     throw new ApplicationException("destiniation file [" + destination.toString() + "] already exist");  }  try {    source.moveTo(destination);  } catch (  Throwable t) {    t.printStackTrace();    throw new ApplicationException(t.getMessage());  }  setACL(pageContext,destination,acl);  setMode(destination,mode);  setAttributes(destination,attributes);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.w3.org/2000/xmlns/";  String localName="local1";  Document doc;  NodeList elementList;  Node testAddress;  NodeList nList;  Node child;  NodeList n2List;  Node child2;  NamedNodeMap attributes;  Node removedNode;  int nodeType;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("gender");  testAddress=elementList.item(2);  nList=testAddress.getChildNodes();  child=nList.item(0);  nodeType=(int)child.getNodeType();  if (equals(1,nodeType)) {    child=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",child);  }  n2List=child.getChildNodes();  child2=n2List.item(0);  assertNotNull("notnull",child2);  attributes=child2.getAttributes();{    boolean success=false;    try {      removedNode=attributes.removeNamedItemNS(namespaceURI,localName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public final DoubleGrid2D multiply(final IntGrid2D withThis){  checkBounds(withThis);  final int[][] otherField=withThis.field;  double[] fieldx=null;  int[] ofieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    ofieldx=otherField[x];    for (int y=0; y < height; y++)     fieldx[y]*=ofieldx[y];  }  return this;}  }
class C{  public void writeI18N(String key) throws IOException {  write(getString(i18n,key));}  }
class C{  public static float abs(float fValue){  if (fValue < 0) {    return -fValue;  }  return fValue;}  }
class C{  @Override public boolean hasMoreElements(){  return iterator.hasNext();}  }
class C{  public void addAttributeSpec(String spec){  AttributeSpec newSpec=new AttributeSpec(spec);  m_attributeSpecs.add(newSpec);}  }
class C{  public boolean overlaps(Circle2D circle){  return Math.sqrt(Math.pow(circle.getX() - x,2) + Math.pow(circle.getY() - y,2)) <= radius + circle.getRadius();}  }
class C{  public ArrayConverter(final Class defaultType,final Converter elementConverter,final int defaultSize){  this(defaultType,elementConverter);  this.defaultSize=defaultSize;  Object defaultValue=null;  if (defaultSize >= 0) {    defaultValue=Array.newInstance(defaultType.getComponentType(),defaultSize);  }  this.setDefaultValue(defaultValue);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void notifySuccess(final UserActionAttachment uaa){  getSoundChannel().playSoundForAll(SoundPath.CLIP_USER_ACTION_SUCCESSFUL,m_player);  sendNotification(UserActionText.getInstance().getNotificationSucccess(uaa.getText()));  notifyOtherPlayers(uaa,UserActionText.getInstance().getNotificationSuccessOthers(uaa.getText()));}  }
class C{  public int id(){  return id;}  }
class C{  @HLEFunction(nid=0x9EC3676A,version=150,checkInsideInterrupt=true) public int __sceSasSetADSRmode(int sasCore,int voice,int flag,int attackType,int decayType,int sustainType,int releaseType){  checkSasAndVoiceHandlesGood(sasCore,voice);  checkADSRmode(0,flag,attackType);  checkADSRmode(1,flag,decayType);  checkADSRmode(2,flag,sustainType);  checkADSRmode(3,flag,releaseType);  VoiceADSREnvelope envelope=voices[voice].getEnvelope();  if ((flag & 0x1) != 0)   envelope.AttackCurveType=attackType;  if ((flag & 0x2) != 0)   envelope.DecayCurveType=decayType;  if ((flag & 0x4) != 0)   envelope.SustainCurveType=sustainType;  if ((flag & 0x8) != 0)   envelope.ReleaseCurveType=releaseType;  if (log.isDebugEnabled()) {    log.debug(String.format("__sceSasSetADSRmode voice=0x%X: %s",voice,envelope.toString()));  }  return 0;}  }
class C{  public static ArrayList<Integer> loadReports(Properties ctx,int roleId){  if (roleId == 0) {    return new ArrayList<Integer>();  }  MRole role=MRole.get(ctx,roleId);  int adClientId=role.getAD_Client_ID();  StringBuffer sqlBuffer=new StringBuffer();  sqlBuffer.append("SELECT process.AD_Process_ID FROM AD_Process process").append(" INNER JOIN AD_Process_Access processAccess ON process.AD_Process_ID = processAccess.AD_Process_ID").append(" WHERE process.isActive='Y' AND process.isReport = 'Y' and process.isDirectPrint = 'N'").append(" AND processAccess.isActive = 'Y' AND processAccess.isReadWrite = 'Y' AND processAccess.AD_Role_ID = ?").append(" AND processAccess.AD_Client_ID = " + adClientId);  ArrayList<Integer> processList=new ArrayList<Integer>();  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sqlBuffer.toString(),null);    pstmt.setInt(1,roleId);    rs=pstmt.executeQuery();    while (rs.next()) {      processList.add(rs.getInt(1));    }  } catch (  SQLException e) {  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return processList;}  }
class C{  @Override protected void register(DeployableFactory deployableFactory){}  }
class C{  void fullyLock(){  putLock.lock();  takeLock.lock();}  }
class C{  private void initializeListeners(){  m_node.addListener(m_listener);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void addChoice(String name){  SettingList l=new SettingList();  choiceHash.put(name,l);  _value.addItem(name);}  }
class C{  public void breakShape(){  showWarning("This renderer cannot currently handle concave shapes, " + "or shapes with holes.");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Uid(String uid){  super(uid);}  }
class C{  public void updateParentId(int parentId,int archiveId,String entidad) throws Exception {  boolean commit=false;  boolean inTrans=false;  if (_logger.isDebugEnabled())   _logger.debug("updateParentId");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    if (!isValidParentId(parentId,entidad))     ISicresAdminBasicException.throwException(ISicresAdminArchiveKeys.EC_PARENT_NO_ID);    if (!isValidArchId(archiveId,entidad))     ISicresAdminBasicException.throwException(ISicresAdminArchiveKeys.EC_ARCH_NO_ID);    dbConn.beginTransaction();    inTrans=true;    updateArchParentId(parentId,archiveId);    commit=true;  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    if (inTrans)     dbConn.endTransaction(commit);    dbConn.close();  }}  }
class C{  private int adjustForCache(final int pointer){  if (fontData == null || pointer < offset || pointer >= (offset + blockSize - 1)) {    try {      fontFile.seek(pointer);      fontData=new byte[blockSize];      fontFile.read(fontData);    } catch (    final IOException e) {      LogWriter.writeLog("Exception: " + e.getMessage());    }    offset=pointer;  }  return pointer - offset;}  }
class C{  public static void point(double x,double y){  double xs=scaleX(x);  double ys=scaleY(y);  double r=penRadius;  float scaledPenRadius=(float)(r * DEFAULT_SIZE);  if (scaledPenRadius <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - scaledPenRadius / 2,ys - scaledPenRadius / 2,scaledPenRadius,scaledPenRadius));  draw();}  }
class C{  private Builder(String id){  this.status=new AppStatus(id);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  BufferedSink writer=Okio.buffer(fileSystem.sink(journalFileTmp));  try {    writer.writeUtf8(MAGIC).writeByte('\n');    writer.writeUtf8(VERSION_1).writeByte('\n');    writer.writeDecimalLong(appVersion).writeByte('\n');    writer.writeDecimalLong(valueCount).writeByte('\n');    writer.writeByte('\n');    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.writeUtf8(DIRTY).writeByte(' ');        writer.writeUtf8(entry.key);        writer.writeByte('\n');      } else {        writer.writeUtf8(CLEAN).writeByte(' ');        writer.writeUtf8(entry.key);        entry.writeLengths(writer);        writer.writeByte('\n');      }    }  }  finally {    writer.close();  }  if (fileSystem.exists(journalFile)) {    fileSystem.rename(journalFile,journalFileBackup);  }  fileSystem.rename(journalFileTmp,journalFile);  fileSystem.delete(journalFileBackup);  journalWriter=newJournalWriter();  hasJournalErrors=false;}  }
class C{  public String save(){  try {    Response response=getPartnerService().updatePartnerServiceDetails(model.getPartnerServiceDetails());    ui.handle(response,"info.service.saved",model.getPartnerServiceDetails().getServiceName());  } catch (  SaaSApplicationException e) {    ui.handleException(e);  }  return null;}  }
class C{  final public Token NEPrefixOpToken() throws ParseException {  Token t;switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case op_26:    t=jj_consume_token(op_26);  break;case op_29:t=jj_consume_token(op_29);break;case op_58:t=jj_consume_token(op_58);break;case CASESEP:t=jj_consume_token(CASESEP);break;case op_61:t=jj_consume_token(op_61);break;case op_76:t=jj_consume_token(op_76);break;case op_112:t=jj_consume_token(op_112);break;case op_113:t=jj_consume_token(op_113);break;case op_114:t=jj_consume_token(op_114);break;case op_115:t=jj_consume_token(op_115);break;case op_116:t=jj_consume_token(op_116);break;default :jj_la1[1]=jj_gen;jj_consume_token(-1);throw new ParseException();}{if (true) return t;}throw new Error("Missing return statement in function");}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (code_1: ");  result.append(code_1);  result.append(')');  return result.toString();}  }
class C{  private void addArg(String key,Object value){  if (requestArguments == null) {    requestArguments=new Hashtable();  }  if (value == null || key == null) {    return;  }  if (post) {    setWriteRequest(true);  }  requestArguments.put(key,value);}  }
class C{  public boolean isResponse(){  return (_flags & DNSConstants.FLAGS_QR_MASK) == DNSConstants.FLAGS_QR_RESPONSE;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.RELATIONAL_EXPRESSION__LHS:    return lhs != null;case N4JSPackage.RELATIONAL_EXPRESSION__OP:  return op != OP_EDEFAULT;case N4JSPackage.RELATIONAL_EXPRESSION__RHS:return rhs != null;}return super.eIsSet(featureID);}  }
class C{  public void addValue(Number value,Comparable chipx,Comparable chipy){  setValue(value,chipx,chipy);}  }
class C{  public ISchedulingRule copyRule(IResource source,IResource destination){  if (source.getType() == IResource.ROOT || destination.getType() == IResource.ROOT)   return root;  return factoryFor(destination).copyRule(source,destination);}  }
class C{  private boolean checkPath(SpeakerNPC npc,StringBuilder msg){  FixedPath path=npc.getPath();  if (path == null) {    return true;  }  boolean ok=true;  if (!path.isLoop()) {    ok=false;    msg.append(npc.getName());    msg.append(" has a path that is not a loop.\n");  }  if (!checkNodes(npc,path,msg)) {    ok=false;  }  return ok;}  }
class C{  public void bindLong(int index,long value){}  }
class C{  public LdapProcessor(MLdapProcessor model){  super(model,300);  m_model=model;}  }
class C{  public FileSendPacket send(File file){  return send(file,null);}  }
class C{  private void showContextMenu(final MouseEvent event){  if (producers.getSelectedIndex() > -1) {    JPopupMenu contextMenu=new JPopupMenu();  }}  }
class C{  public void testBogusTable() throws SQLException {  this.stmt.executeUpdate("DROP TABLE IF EXISTS BOGUS_UPDATABLE");  this.stmt.executeUpdate("CREATE TABLE BOGUS_UPDATABLE (field1 int)");  Statement scrollableStmt=null;  try {    scrollableStmt=this.conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);    this.rs=scrollableStmt.executeQuery("SELECT * FROM BOGUS_UPDATABLE");    try {      this.rs.moveToInsertRow();      fail("ResultSet.moveToInsertRow() should not succeed on non-updatable table");    } catch (    NotUpdatable noUpdate) {    }  }  finally {    if (scrollableStmt != null) {      try {        scrollableStmt.close();      } catch (      SQLException sqlEx) {      }    }    this.stmt.executeUpdate("DROP TABLE IF EXISTS BOGUS_UPDATABLE");  }}  }
class C{  public ObjectMatrix2D viewColumn(int column){  checkColumn(column);  int viewRows=this.slices;  int viewColumns=this.rows;  int viewRowZero=sliceZero;  int viewColumnZero=rowZero;  int viewOffset=this.offset + _columnOffset(_columnRank(column));  int viewRowStride=this.sliceStride;  int viewColumnStride=this.rowStride;  int[] viewRowOffsets=this.sliceOffsets;  int[] viewColumnOffsets=this.rowOffsets;  return new SelectedDenseObjectMatrix2D(viewRows,viewColumns,this.elements,viewRowZero,viewColumnZero,viewRowStride,viewColumnStride,viewRowOffsets,viewColumnOffsets,viewOffset);}  }
class C{  public static <E extends Comparable<E>>boolean isChildrenSum(BinaryNode<E> node){  if (node == null || node.left == null && node.right == null)   return true;  E leftChildValue=(E)(node.left == null ? 0 : node.left.value);  E rightChildValue=(E)(node.right == null ? 0 : node.right.value);  if (!node.value.toString().equals(String.valueOf(Integer.parseInt(leftChildValue.toString()) + Integer.parseInt(rightChildValue.toString())))) {    return false;  }  return isChildrenSum(node.left) && isChildrenSum(node.right);}  }
class C{  protected SystemMembershipEventImpl(DistributedMember id){  this.id=id;}  }
class C{  static public FunctionNode add(final ValueExpressionNode t1,final ValueExpressionNode t2){  return new FunctionNode(FunctionRegistry.ADD,null,new ValueExpressionNode[]{t1,t2});}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.645 -0400",hash_original_method="26F27EFAAE453C1D35ADA3C242EE997E",hash_generated_method="99B8A2EB100BB92F57B66ECEEB658FA7") private void purge(){synchronized (queue) {    WeakKey key;    while ((key=(WeakKey)queue.poll()) != null) {      super.remove(key.getReferenced());    }  }}  }
class C{  public TBase<TBase<?,?>,TFieldIdEnum> newArgs(List<Object> args){  requireNonNull(args,"args");  final TBase<TBase<?,?>,TFieldIdEnum> newArgs=newArgs();  final int size=args.size();  for (int i=0; i < size; i++) {    newArgs.setFieldValue(argFields[i],args.get(i));  }  return newArgs;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public boolean isPortUsable(StoragePort storagePort){  return isPortUsable(storagePort,true);}  }
class C{  public Builder context(final Map<String,Object> context){  this.context=context != null ? new HashMap<String,Object>(context) : context;  return this;}  }
class C{  private static void ensureNotExists(File file){  assert !file.exists();}  }
class C{  protected ArrayList<LatLon> computeViewFootPrint(DrawContext dc,int steps){  ArrayList<LatLon> positions=new ArrayList<LatLon>();  Position eyePos=dc.getView().getEyePosition();  Angle distance=Angle.fromRadians(Math.asin(dc.getView().getFarClipDistance() / (dc.getGlobe().getRadius() + eyePos.getElevation())));  if (distance.degrees > 10) {    double headStep=360d / steps;    Angle heading=Angle.ZERO;    for (int i=0; i <= steps; i++) {      LatLon p=LatLon.greatCircleEndPosition(eyePos,heading,distance);      positions.add(p);      heading=heading.addDegrees(headStep);    }    return positions;  } else   return null;}  }
class C{  public String title(){  return mTitle;}  }
class C{  public AopCapabilityContainerTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public TransactionOutput addOutput(Coin value,ECKey pubkey){  return addOutput(new TransactionOutput(params,this,value,pubkey));}  }
class C{  public static void writeln(long l){  writeln(l,true);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public AUC(){}  }
class C{  @Override public void abort() throws DBException {  client.Abort();}  }
class C{  public HyphenatedWordsFilter(TokenStream in){  super(in);}  }
class C{  @Override public void show(float translationX,float translationY){  setTranslation(translationX,translationY);  if (getVisibility() != View.VISIBLE) {    float pivotX=getPivotX() + translationX;    float pivotY=getPivotY() + translationY;    ScaleAnimation anim;    if (pivotX == 0 || pivotY == 0) {      anim=new ScaleAnimation(0,1,0,1,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f);    } else {      anim=new ScaleAnimation(0,1,0,1,pivotX,pivotY);    }    anim.setDuration(FAB_ANIM_DURATION);    anim.setInterpolator(getInterpolator());    startAnimation(anim);  }  setVisibility(View.VISIBLE);}  }
class C{  public ILineSegment[] generate(int size){  ILineSegment[] lines=new ILineSegment[2 * size];  double delta=(max - skew) / size;  double t=0;  int idx=0;  while (idx < 2 * size) {    lines[idx++]=new TwoDLineSegment(0,t,max,t + skew);    lines[idx++]=new TwoDLineSegment(t,0,t + skew,max);    t+=delta;  }  return lines;}  }
class C{  public void beforeIterJoinOfSingleIndexResults(Index usedIndex,Index unusedIndex){}  }
class C{  public boolean unloadQueuedChunks(){  return provider.unloadQueuedChunks();}  }
class C{  @Override public void deleteMapKey(Object objectDeleted,AbstractSession session){}  }
class C{  public SubscriptionStillActiveException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @RequestMapping(value=ApiUrl.CITIZEN_PASSWORD_RECOVER,method=RequestMethod.POST) public ResponseEntity<String> passwordRecover(HttpServletRequest request){  ApiResponse res=ApiResponse.newInstance();  try {    String identity=request.getParameter("identity");    String redirectURL=request.getParameter("redirectURL");    String token=request.getParameter("token");    String newPassword, confirmPassword;    if (StringUtils.isEmpty(identity)) {      return res.error(getMessage("msg.invalid.request"));    }    if (!StringUtils.isEmpty(token)) {      newPassword=request.getParameter("newPassword");      confirmPassword=request.getParameter("confirmPassword");      if (StringUtils.isEmpty(newPassword)) {        return res.error(getMessage("msg.invalid.request"));      } else       if (!newPassword.equals(confirmPassword)) {        return res.error(getMessage("msg.pwd.not.match"));      } else       if (identityRecoveryService.validateAndResetPassword(token,newPassword)) {        return res.success("",getMessage("msg.pwd.reset.success"));      } else {        return res.error(getMessage("msg.pwd.otp.invalid"));      }    }    if (identity.matches("\\d+")) {      if (!identity.matches("\\d{10}")) {        return res.error(getMessage("msg.invalid.mobileno"));      }    } else     if (!identity.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {      return res.error(getMessage("msg.invalid.mail"));    }    Citizen citizen=citizenService.getCitizenByUserName(identity);    if (citizen == null) {      return res.error(getMessage("user.not.found"));    }    if (identityRecoveryService.generateAndSendUserPasswordRecovery(identity,redirectURL + "/egi/login/password/reset?token=",true)) {      return res.success("","OTP for recovering password has been sent to your mobile" + (StringUtils.isEmpty(citizen.getEmailId()) ? "" : " and mail"));    }    return res.error("Password send failed");  } catch (  Exception e) {    LOGGER.error("EGOV-API ERROR ",e);    return res.error(getMessage("server.error"));  }}  }
class C{  private void initHeap(ObjectHeap<IntegerPriorityObject<CASHInterval>> heap,Relation<ParameterizationFunction> relation,int dim,DBIDs ids){  CASHIntervalSplit split=new CASHIntervalSplit(relation,minPts);  double[] minMax=determineMinMaxDistance(relation,dim);  double d_min=minMax[0];  double d_max=minMax[1];  double dIntervalLength=d_max - d_min;  int numDIntervals=(int)Math.ceil(dIntervalLength / jitter);  double dIntervalSize=dIntervalLength / numDIntervals;  double[] d_mins=new double[numDIntervals];  double[] d_maxs=new double[numDIntervals];  if (LOG.isDebugging()) {    StringBuilder msg=new StringBuilder();    msg.append("d_min ").append(d_min);    msg.append("\nd_max ").append(d_max);    msg.append("\nnumDIntervals ").append(numDIntervals);    msg.append("\ndIntervalSize ").append(dIntervalSize);    LOG.debugFine(msg.toString());  } else   if (LOG.isVerbose()) {    StringBuilder msg=new StringBuilder();    msg.append("d_min ").append(d_min);    msg.append("\nd_max ").append(d_max);    msg.append("\nnumDIntervals ").append(numDIntervals);    msg.append("\ndIntervalSize ").append(dIntervalSize);    LOG.verbose(msg.toString());  }  double[] alphaMin=new double[dim - 1];  double[] alphaMax=new double[dim - 1];  Arrays.fill(alphaMax,Math.PI);  for (int i=0; i < numDIntervals; i++) {    if (i == 0) {      d_mins[i]=d_min;    } else {      d_mins[i]=d_maxs[i - 1];    }    if (i < numDIntervals - 1) {      d_maxs[i]=d_mins[i] + dIntervalSize;    } else {      d_maxs[i]=d_max - d_mins[i];    }    HyperBoundingBox alphaInterval=new HyperBoundingBox(alphaMin,alphaMax);    ModifiableDBIDs intervalIDs=split.determineIDs(ids,alphaInterval,d_mins[i],d_maxs[i]);    if (intervalIDs != null && intervalIDs.size() >= minPts) {      CASHInterval rootInterval=new CASHInterval(alphaMin,alphaMax,split,intervalIDs,-1,0,d_mins[i],d_maxs[i]);      heap.add(new IntegerPriorityObject<>(rootInterval.priority(),rootInterval));    }  }  if (LOG.isDebuggingFiner()) {    StringBuilder msg=new StringBuilder();    msg.append("heap.size ").append(heap.size());    LOG.debugFiner(msg.toString());  }}  }
class C{  public static EsxCloudVmx generate(OvfFile ovfFile) throws InvalidOvfException {  EsxCloudVmxGenerator esxCloudVmxGenerator=new EsxCloudVmxGenerator(ovfFile);  esxCloudVmxGenerator.addDeviceOptions();  esxCloudVmxGenerator.addConfigOptions("",extraConfigurations,ovfFile.getExtraConfig());  return esxCloudVmxGenerator.esxCloudVmx;}  }
class C{  public void lookupResource(ApplicationResource resource,boolean contextBound,boolean global){  DataSourceInfo dataSourceInfo=null;  if (contextBound) {    try {      javax.naming.Context ctx=!global ? new InitialContext() : getGlobalNamingContext();      String jndiName=resolveJndiName(resource.getName(),global);      Object obj=ctx.lookup(jndiName);      resource.setLookedUp(true);      for (      DatasourceAccessor accessor : datasourceMappers) {        dataSourceInfo=accessor.getInfo(obj);        if (dataSourceInfo != null) {          break;        }      }    } catch (    Exception e) {      resource.setLookedUp(false);      dataSourceInfo=null;      logger.error("Failed to lookup: '{}'",resource.getName(),e);    }  } else {    resource.setLookedUp(false);  }  if (resource.isLookedUp() && dataSourceInfo != null) {    resource.setDataSourceInfo(dataSourceInfo);  }}  }
class C{  protected static int checkAddressType(String address){  if (null == address) {    return PDU_UNKNOWN_ADDRESS_TYPE;  }  if (address.matches(REGEXP_IPV4_ADDRESS_TYPE)) {    return PDU_IPV4_ADDRESS_TYPE;  } else   if (address.matches(REGEXP_PHONE_NUMBER_ADDRESS_TYPE)) {    return PDU_PHONE_NUMBER_ADDRESS_TYPE;  } else   if (address.matches(REGEXP_EMAIL_ADDRESS_TYPE)) {    return PDU_EMAIL_ADDRESS_TYPE;  } else   if (address.matches(REGEXP_IPV6_ADDRESS_TYPE)) {    return PDU_IPV6_ADDRESS_TYPE;  } else {    return PDU_UNKNOWN_ADDRESS_TYPE;  }}  }
class C{  default B repairCost(final RepairableMeta src){  this.meta().setRepairCost(src.getRepairCost());  return this.getBuilder();}  }
class C{  @Override public ApprovalSearchBuilder search(){  return new ApprovalSearchBuilder(this);}  }
class C{  private static void hookLoadPatch(PatchCallback callback){synchronized (loadedPatchCallbacks) {    loadedPatchCallbacks.add(callback);  }}  }
class C{  protected BufferedRuleBasedScannerExt(){  super();}  }
class C{  public final boolean isRequired(String var1,String var2){  for (  OrderedPair<Set<MyNode>> rule : requiredRulesSpecs) {    if (rule.getFirst().contains(getVar(var1))) {      if (rule.getSecond().contains(getVar(var2))) {        if (!var1.equals(var2)) {          return true;        }      }    }  }  return false;}  }
class C{  public void populateTableData(){  container=createContainer();  setContainerDataSource(container);  addContainerproperties();  setColumnProperties();  setPageLength(30);  setCollapsibleColumns();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:15.142 -0500",hash_original_method="D53E4189B6E7F0EC0F9883E9844F2140",hash_generated_method="105C77F54F2D3DE304E191D655D9615E") public void onOptionsMenuClosed(Menu menu){}  }
class C{  protected StoragePool queryRegisteredResource(URI id){  ArgValidator.checkUri(id);  StoragePool pool=_dbClient.queryObject(StoragePool.class,id);  ArgValidator.checkEntityNotNull(pool,id,isIdEmbeddedInURL(id));  if (!RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(pool.getRegistrationStatus())) {    throw APIException.badRequests.resourceNotRegistered(StoragePool.class.getSimpleName(),id);  }  return pool;}  }
class C{  @Override public synchronized void reset() throws IOException {  if (buf == null) {    throw new IOException("Stream is closed");  }  if (-1 == markpos) {    throw new IOException("Mark has been invalidated.");  }  pos=markpos;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public Connection connect(RowSetInternal caller) throws SQLException {  if (caller.getConnection() != null) {    userCon=true;    return caller.getConnection();  } else   if (((RowSet)caller).getDataSourceName() != null) {    try {      Context ctx=new InitialContext();      DataSource ds=(DataSource)ctx.lookup(((RowSet)caller).getDataSourceName());      if (((RowSet)caller).getUsername() != null) {        return ds.getConnection(((RowSet)caller).getUsername(),((RowSet)caller).getPassword());      } else {        return ds.getConnection();      }    } catch (    javax.naming.NamingException ex) {      SQLException sqlEx=new SQLException(resBundle.handleGetObject("crsreader.connect").toString());      sqlEx.initCause(ex);      throw sqlEx;    }  } else   if (((RowSet)caller).getUrl() != null) {    return DriverManager.getConnection(((RowSet)caller).getUrl(),((RowSet)caller).getUsername(),((RowSet)caller).getPassword());  } else {    return null;  }}  }
class C{  public Element append(String name,String value){  Element child=document.createElementNS(XCAL_NS,name);  child.setTextContent(value);  element.appendChild(child);  return child;}  }
class C{  public static PsiDirectory addOrReplaceDirectory(PsiDirectory parent,String dirName){  deleteIfExists(parent,dirName);  return parent.createSubdirectory(dirName);}  }
class C{  public TemplateEngine(TemplateContextType contextType){  Assert.isNotNull(contextType);  fContextType=contextType;}  }
class C{  public Zipper<A> filterAfter(Predicate<? super A> predicate){  return new Zipper<>(front,back.filter(predicate),position);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private boolean isStandalone(){  return JavaScriptCore.getPlugin() == null;}  }
class C{  public static Map<String,Object> updateFile(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=null;  try {    result=updateFileMethod(dctx,context);  } catch (  GenericServiceException e) {    return ServiceUtil.returnError(e.getMessage());  }  return result;}  }
class C{  void addEntry(int hash,Object key,Object value,int bucketIndex){  table[bucketIndex]=new Entry(hash,key,value,table[bucketIndex]);  if (size++ >= threshold)   resize(2 * table.length);}  }
class C{  public static boolean isGzipEncoding(@Nullable final String encodingType){  return CONTENT_ENCODING_GZIP.equalsIgnoreCase(encodingType);}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  boolean isSquare(int nNum){  if (g_bIsSquare == null || g_bIsSquare.length < nNum) {    g_bIsSquare=new boolean[m_nNodes * m_nNodes];    for (int i=0; i < m_nNodes; i++) {      g_bIsSquare[i * m_nNodes + i]=true;    }  }  return g_bIsSquare[nNum];}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(POLICIES)) {    certPolicies=null;  } else {    throw new IOException("Attribute name [" + name + "] not recognized by "+ "CertAttrSet:CertificatePoliciesExtension.");  }  encodeThis();}  }
class C{  public StandardXYToolTipGenerator(String formatString,NumberFormat xFormat,DateFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  public int optInt(String key){  return this.optInt(key,0);}  }
class C{  public void copyTo(@Name("destination") long[] destination,@Name("sourcePosition") @Defaulted int sourcePosition,@Name("destinationPosition") @Defaulted int destinationPosition,@Name("length") @Defaulted int length){  throw Util.makeJavaArrayWrapperException();}  }
class C{  @Override public void doTests(){  if (getAssociator() == null) {    println("\n=== No associator set ===");    return;  }  println("\n=== Check on Associator: " + getAssociator().getClass().getName() + " ===\n");  m_ClasspathProblems=false;  println("--> Checking for interfaces");  canTakeOptions();  boolean weightedInstancesHandler=weightedInstancesHandler()[0];  boolean multiInstanceHandler=multiInstanceHandler()[0];  println("--> Associator tests");  declaresSerialVersionUID();  println("--> no class attribute");  testsWithoutClass(weightedInstancesHandler,multiInstanceHandler);  println("--> with class attribute");  testsPerClassType(Attribute.NOMINAL,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.NUMERIC,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.DATE,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.STRING,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.RELATIONAL,weightedInstancesHandler,multiInstanceHandler);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] shapefiles;  int numFiles;  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFile=args[1];  if ((inputFilesString == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  shapefiles=inputFilesString.split(";");  numFiles=shapefiles.length;  if (numFiles < 1) {    showFeedback("At least two input vector files must be specified.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    for (int k=0; k < numFiles; k++) {      ShapeFile input=new ShapeFile(shapefiles[k]);      shapeType=input.getShapeType();      numRecs=input.getNumberOfRecords();      if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {        showFeedback("This tool can only work for shapefiles of a " + "POLYLINE or POLYGON shape-type. Tool execution " + "ceased.");        return;      } else       if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {        outputShapeType=ShapeType.POLYLINE;      }      oneHundredthTotal=numRecs / 100;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            recJTSGeometries[a].setUserData(record.getRecordNumber());            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Loop " + (k + 1) + " of "+ numFiles+ ": Reading data:",progress);        }      }    }    try {      updateProgress("Performing operation (progress will not be updated):",-1);      g1=factory.buildGeometry(inputGeometryList);      outputGeometry=g1.buffer(0);    } catch (    Exception e) {      showFeedback("Error during analysis.");      return;    }    ShapeFile output=null;    if (outputGeometry instanceof GeometryCollection) {      DBFField fields[]=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      output=new ShapeFile(outputFile,outputShapeType,fields);      output.setProjectionStringFromOtherShapefile(new ShapeFile(shapefiles[0]));      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      for (int a=0; a < numGeometries; a++) {        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof LineString) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public FloodRed(Rectangle bounds){  this(bounds,new Color(0,0,0,0));}  }
class C{  public JavaScriptEnumElement(String enumName){  this.enumName=enumName;}  }
class C{  public static String encode(final String value){  return encode(value,DEFAULT_ENCODING);}  }
class C{  public PrimMinimumSpanningTree(Supplier<? extends Graph<V,E>> supplier,Function<? super E,Double> weights){  this.treeFactory=supplier;  if (weights != null) {    this.weights=weights;  }}  }
class C{  public static void flushEL(OutputStream os){  try {    if (os != null)     os.flush();  } catch (  Exception e) {  }}  }
class C{  public static <T>LinkedBindingBuilder<T> bind(Binder binder,TypeLiteral<T> type,Named name){  binder.disableCircularProxies();  return binder.bind(type).annotatedWith(name);}  }
class C{  public boolean isConst(){  return false;}  }
class C{  public void clearAnimations(){  for (  ObjectAnimator currentAnim : mAnimators) {    currentAnim.cancel();  }  mAnimators.clear();}  }
class C{  public TextClassificationOutcome_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_outcome=jcas.getRequiredFeatureDE(casType,"outcome","uima.cas.String",featOkTst);  casFeatCode_outcome=(null == casFeat_outcome) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_outcome).getCode();  casFeat_prediction=jcas.getRequiredFeatureDE(casType,"prediction","uima.cas.String",featOkTst);  casFeatCode_prediction=(null == casFeat_prediction) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_prediction).getCode();  casFeat_weight=jcas.getRequiredFeatureDE(casType,"weight","uima.cas.Double",featOkTst);  casFeatCode_weight=(null == casFeat_weight) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_weight).getCode();  casFeat_confidence=jcas.getRequiredFeatureDE(casType,"confidence","uima.cas.Double",featOkTst);  casFeatCode_confidence=(null == casFeat_confidence) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_confidence).getCode();}  }
class C{  private Organization createCustomerAndSupplier() throws Exception {  Organization organization=new Organization();  organization.setOrganizationId("testOrg");  organization.setRegistrationDate(123L);  organization.setCutOffDay(1);  mgr.persist(organization);  Organization supplier=new Organization();  supplier.setOrganizationId("supplier");  supplier.setRegistrationDate(123L);  supplier.setCutOffDay(1);  mgr.persist(supplier);  OrganizationReference ref=new OrganizationReference(supplier,organization,OrganizationReferenceType.SUPPLIER_TO_CUSTOMER);  mgr.persist(ref);  mgr.flush();  mgr.refresh(supplier);  mgr.refresh(organization);  return organization;}  }
class C{  public void disconnect(){  try {    mCtx.unbindService(apiConnection);  } catch (  IllegalArgumentException e) {  }}  }
class C{  public static void discard(){  current.remove();}  }
class C{  public boolean markSupported(){  return true;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  return (obj instanceof StandardTickUnitSource);}  }
class C{  private void cmd_report(){  log.info("");  if (!MRole.getDefault().isCanReport(m_curTab.getAD_Table_ID())) {    ADialog.error(m_curWindowNo,this,"AccessCannotReport");    return;  }  cmd_save(false);  MQuery query=new MQuery(m_curTab.getTableName());  String queryColumn=m_curTab.getLinkColumnName();  if (queryColumn.length() == 0)   queryColumn=m_curTab.getKeyColumnName();  String infoName=null;  String infoDisplay=null;  for (int i=0; i < m_curTab.getFieldCount(); i++) {    GridField field=m_curTab.getField(i);    if (field.isKey())     infoName=field.getHeader();    if ((field.getColumnName().equals("Name") || field.getColumnName().equals("DocumentNo")) && field.getValue() != null)     infoDisplay=field.getValue().toString();    if (infoName != null && infoDisplay != null)     break;  }  if (queryColumn.length() != 0) {    if (queryColumn.endsWith("_ID"))     query.addRestriction(queryColumn,MQuery.EQUAL,new Integer(Env.getContextAsInt(m_ctx,m_curWindowNo,queryColumn)),infoName,infoDisplay); else     query.addRestriction(queryColumn,MQuery.EQUAL,Env.getContext(m_ctx,m_curWindowNo,queryColumn),infoName,infoDisplay);  }  new AReport(m_curTab.getAD_Table_ID(),aReport.getButton(),query,this,m_curWindowNo,m_curTab.getWhereExtended());}  }
class C{  @SuppressWarnings("CloneDoesntCallSuperClone") @SuppressFBWarnings(value="CN_IDIOM_NO_SUPER_CALL",justification="Does not required any fields from the parent class") @Override public Transformer<R> clone(){  Transformer<R> clone=new Transformer<>();  if (null != functions) {    clone.addFunctions(cloneFunctions());  }  return clone;}  }
class C{  private void assertSame(String prefix) throws IOException {  PrefixQuery smart=new PrefixQuery(new Term("field",prefix));  DumbPrefixQuery dumb=new DumbPrefixQuery(new Term("field",prefix));  TopDocs smartDocs=searcher.search(smart,25);  TopDocs dumbDocs=searcher.search(dumb,25);  CheckHits.checkEqual(smart,smartDocs.scoreDocs,dumbDocs.scoreDocs);}  }
class C{  public UIComponent createComponent(FaceletContext ctx){  return null;}  }
class C{  public boolean userCanCreateArch(int connectedUserId,int dirId,String entidad) throws Exception {  boolean can=false;  int parentArchMgrId=ISicresAdminDefsKeys.NULL_ID;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    if (dirId == ISicresAdminDefsKeys.NULL_ID || dirId == ISicresAdminDefsKeys.ROOT_DIR_ID)     parentArchMgrId=0; else     parentArchMgrId=getDirMgrId(dirId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_CREATE,ISicresAdminDefsKeys.NULL_ID,parentArchMgrId,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  vset=right.checkValue(env,ctx,vset,exp);  if (index == null) {    env.error(where,"array.index.required");    return vset;  }  vset=index.checkValue(env,ctx,vset,exp);  index=convert(env,ctx,Type.tInt,index);  if (!right.type.isType(TC_ARRAY)) {    if (!right.type.isType(TC_ERROR)) {      env.error(where,"not.array",right.type);    }    return vset;  }  type=right.type.getElementType();  return vset;}  }
class C{  int findAncestor(XPathContext xctxt,XPath fromMatchPattern,XPath countMatchPattern,int context,ElemNumber namespaceContext) throws javax.xml.transform.TransformerException {  DTM dtm=xctxt.getDTM(context);  while (DTM.NULL != context) {    if (null != fromMatchPattern) {      if (fromMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {        break;      }    }    if (null != countMatchPattern) {      if (countMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {        break;      }    }    context=dtm.getParent(context);  }  return context;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
