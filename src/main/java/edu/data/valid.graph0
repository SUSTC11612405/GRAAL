class C{  public List<Block> blockList(){  return blocks;}  }
class C{  public QRCallbackBuilder withCallbackIndex(int index){  this.callbackIndex=index;  return this;}  }
class C{  public static LogoutResponse generateResponse(Status status,String inResponseTo,Issuer issuer,String realm,String hostRole,String remoteEntity){  if (status == null) {    status=SAML2Utils.generateStatus(SAML2Constants.SUCCESS,SAML2Utils.bundle.getString("requestSuccess"));  }  LogoutResponse logoutResponse=ProtocolFactory.getInstance().createLogoutResponse();  String responseID=SAMLUtils.generateID();  try {    logoutResponse.setStatus(status);    logoutResponse.setID(responseID);    logoutResponse.setInResponseTo(inResponseTo);    logoutResponse.setVersion(SAML2Constants.VERSION_2_0);    logoutResponse.setIssueInstant(newDate());    logoutResponse.setIssuer(issuer);  } catch (  SAML2Exception e) {    debug.error("Error in generating LogoutResponse.",e);  }  return logoutResponse;}  }
class C{  public PrincipalHolder(){}  }
class C{  public PdfName generate(PdfResources resources){  PdfName newName=new PdfName(prefix + counter++);  PdfDictionary r=resources.getPdfObject();  if (r.containsKey(resourceType)) {    while (r.getAsDictionary(resourceType).containsKey(newName)) {      newName=new PdfName(prefix + counter++);    }  }  return newName;}  }
class C{  public static void main(final String[] args){  if (args.length != 2) {    System.err.println("Usage: host port");    System.err.println("For example: localhost 1389");    System.exit(1);  }  final String host=args[0];  final int port=Integer.parseInt(args[1]);  final LDAPConnectionFactory factory=new LDAPConnectionFactory(host,port);  Connection connection=null;  try {    connection=factory.getConnection();    String name="uid=kvaughan,ou=People,dc=example,dc=com";    char[] password="bribery".toCharArray();    connection.bind(name,password);    updateEntry(connection,name,"description");    final SearchResultEntry entry=connection.readEntry(name,"cn","objectClass","hasSubordinates","numSubordinates","isMemberOf","modifyTimestamp");    DN dn=entry.getName();    Set<String> cn=entry.parseAttribute("cn").asSetOfString("");    Set<AttributeDescription> objectClasses=entry.parseAttribute("objectClass").asSetOfAttributeDescription();    boolean hasChildren=entry.parseAttribute("hasSubordinates").asBoolean();    int numChildren=entry.parseAttribute("numSubordinates").asInteger(0);    Set<DN> groups=entry.parseAttribute("isMemberOf").usingSchema(Schema.getDefaultSchema()).asSetOfDN();    Calendar timestamp=entry.parseAttribute("modifyTimestamp").asGeneralizedTime().toCalendar();    entry.setName(dn);    Entry newEntry=new LinkedHashMapEntry(name).addAttribute("cn",cn.toArray()).addAttribute("objectClass",objectClasses.toArray()).addAttribute("hasChildren",hasChildren).addAttribute("numChildren",numChildren).addAttribute("groups",groups.toArray()).addAttribute("timestamp",timestamp.getTimeInMillis());    final LDIFEntryWriter writer=new LDIFEntryWriter(System.out);    writer.writeEntry(newEntry);    writer.close();  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());    return;  }catch (  IOException e) {    System.err.println(e.getMessage());    System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  public static void closeQuietly(final Connection conn){  if (conn != null) {    try {      conn.close();    } catch (    final Exception e) {    }  }}  }
class C{  public static boolean isEmptyMessage(MessageType msgType){  return msgType.getFields().size() == 0;}  }
class C{  public void removeBeanContextMembershipListener(BeanContextMembershipListener bcml){  if (bcml == null)   throw new NullPointerException("listener");synchronized (bcmListeners) {    if (!bcmListeners.contains(bcml))     return; else     bcmListeners.remove(bcml);  }}  }
class C{  public void new_line() throws IOException {  write("\n");  for (int i=0; i < current_indent_level; ++i)   write(INDENT_STRING);}  }
class C{  private void skipToEndOfLine(){  for (; pos < in.length(); pos++) {    char c=in.charAt(pos);    if (c == '\r' || c == '\n') {      pos++;      break;    }  }}  }
class C{  private CTSDataLayer(){}  }
class C{  public PluginResult.PostOperation invokePostOperationExtendedPlugins(PostOperationExtendedOperation extendedOperation){  PluginResult.PostOperation result=null;  PluginResult.PostOperation finalResult=null;  ArrayList<DirectoryServerPlugin> skippedPlugins=skippedPreOperationPlugins.remove(extendedOperation);  for (  DirectoryServerPlugin p : postOperationExtendedPlugins) {    if (isInternalOperation(extendedOperation,p) || isSkipped(skippedPlugins,p)) {      continue;    }    try {      result=p.doPostOperation(extendedOperation);    } catch (    Exception e) {      logException(extendedOperation,p,e,ERR_PLUGIN_POST_OPERATION_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(extendedOperation,p,ERR_PLUGIN_POST_OPERATION_PLUGIN_RETURNED_NULL);    } else     if (!result.continueProcessing()) {      finalResult=result;    }  }  if (result == null) {    finalResult=PluginResult.PostOperation.continueOperationProcessing();  } else   if (finalResult == null) {    finalResult=result;  }  return finalResult;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrnextsiblingnull.class,args);}  }
class C{  public static String trim(String value){  return value != null ? value.trim() : null;}  }
class C{  public IdentityHashMap(Map<? extends K,? extends V> map){  this(map.size() < 6 ? 11 : map.size() * 2);  putAllImpl(map);}  }
class C{  public void executeCharsToContentHandler(XPathContext xctxt,ContentHandler handler) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException {  if (Arg0IsNodesetExpr()) {    int node=getArg0AsNode(xctxt);    if (DTM.NULL != node) {      DTM dtm=xctxt.getDTM(node);      dtm.dispatchCharactersEvents(node,handler,true);    }  } else {    XObject obj=execute(xctxt);    obj.dispatchCharactersEvents(handler);  }}  }
class C{  public static char[] copyOfRange(char[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  char[] copy=new char[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  public ShortLookupTable(int offset,short data[][]){  super(offset,data.length);  numComponents=data.length;  numEntries=data[0].length;  this.data=new short[numComponents][];  for (int i=0; i < numComponents; i++) {    this.data[i]=data[i];  }}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof Set))   return false;  Collection<?> c=(Collection<?>)o;  if (c.size() != size())   return false;  try {    return containsAll(c);  } catch (  ClassCastException unused) {    return false;  }catch (  NullPointerException unused) {    return false;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getNamedItemNS01.class,args);}  }
class C{  public static final void updateAllWidgets(Context context,boolean updateFull){  updateFull=updateFull || !GlobalFlags.partialUpdate(context);  final AppWidgetManager awm=AppWidgetManager.getInstance(context);  sPollBattery=false;  for (  int widgetId : awm.getAppWidgetIds(new ComponentName(context,PCWidgetActivity.class))) {    sPollBattery|=updateWidget(awm,context,widgetId,updateFull);  }  sPollBattery|=updateStatusbarWidget(context);  setBatteryAlarm(context);  QTStorage.updateAllWidgets(context,updateFull);  if (sUpdateHook != null) {    sUpdateHook.run();  }}  }
class C{  public static String addMetaAlias(String url,String metaAlias){  if (url == null || url.length() == 0 || metaAlias == null || metaAlias.length() == 0) {    return url;  } else {    if (url.indexOf(IFSConstants.QUESTION_MARK) == -1) {      return url + IFSConstants.QUESTION_MARK + IFSConstants.META_ALIAS+ IFSConstants.EQUAL_TO+ metaAlias;    } else {      return url + IFSConstants.AMPERSAND + IFSConstants.META_ALIAS+ IFSConstants.EQUAL_TO+ metaAlias;    }  }}  }
class C{  static boolean isValidKeyEventForKeyBindings(KeyEvent e){  return true;}  }
class C{  public void autoroute_selected_items(){  if (board_is_read_only)   return;  if (!(interactive_state instanceof StateSelectedItem))   return;  r_board.generate_snapshot();  interactive_action_thread=new IteraAutorouteThread(this);  interactive_action_thread.start();}  }
class C{  public Iterator<E> iterator(){  return new Itr();}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public static int computeNumberOfThreads(int minimumValue,float cpuMultiplier){  Reject.ifTrue(cpuMultiplier < 0,"Multiplier must be a positive number");  return Math.max(minimumValue,(int)(Runtime.getRuntime().availableProcessors() * cpuMultiplier));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatareplacedataexceedslengthofdata.class,args);}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public boolean check_move(){  if (!all_items_movable)   return false;  TimeLimit time_limit=new TimeLimit(3);  Collection<BrdItem> ignore_items=new LinkedList<BrdItem>();  for (  SortedItemDouble an_item : item_group_arr) {    boolean move_ok;    if (an_item.item instanceof BrdAbit) {      BrdAbit curr_drill_item=(BrdAbit)an_item.item;      if (translate_vector.distance() >= curr_drill_item.min_width()) {        move_ok=false;      } else {        move_ok=r_board.move_drill_algo.check(curr_drill_item,translate_vector,max_recursion_depth,max_via_recursion_depth,ignore_items,time_limit);      }    } else {      move_ok=r_board.check_item_move(an_item.item,translate_vector,ignore_items);    }    if (!move_ok)     return false;  }  return true;}  }
class C{  AccessControlContext optimize(){  AccessControlContext acc;  DomainCombiner combiner=null;  AccessControlContext parent=null;  Permission[] permissions=null;  if (isPrivileged) {    acc=privilegedContext;    if (acc != null) {      if (acc.isWrapped) {        permissions=acc.permissions;        parent=acc.parent;      }    }  } else {    acc=AccessController.getInheritedAccessControlContext();    if (acc != null) {      if (acc.isLimited) {        parent=acc;      }    }  }  boolean skipStack=(context == null);  boolean skipAssigned=(acc == null || acc.context == null);  ProtectionDomain[] assigned=(skipAssigned) ? null : acc.context;  ProtectionDomain[] pd;  boolean skipLimited=((acc == null || !acc.isWrapped) && parent == null);  if (acc != null && acc.combiner != null) {    if (getDebug() != null) {      debug.println("AccessControlContext invoking the Combiner");    }    combiner=acc.combiner;    pd=combiner.combine(context,assigned);  } else {    if (skipStack) {      if (skipAssigned) {        calculateFields(acc,parent,permissions);        return this;      } else       if (skipLimited) {        return acc;      }    } else     if (assigned != null) {      if (skipLimited) {        if (context.length == 1 && context[0] == assigned[0]) {          return acc;        }      }    }    pd=combine(context,assigned);    if (skipLimited && !skipAssigned && pd == assigned) {      return acc;    } else     if (skipAssigned && pd == context) {      calculateFields(acc,parent,permissions);      return this;    }  }  this.context=pd;  this.combiner=combiner;  this.isPrivileged=false;  calculateFields(acc,parent,permissions);  return this;}  }
class C{  public void resetActionPath(){  application=null;  modelAction=null;  ruleAction=null;  ruleActionDataOld=null;}  }
class C{  private void detach(){  if (prevTakeIndex >= 0) {    prevTakeIndex=DETACHED;    itrs.doSomeSweeping(true);  }}  }
class C{  public boolean isLockedOut(AccountLockoutInfo acInfo){  boolean isLockedOut=acInfo.isLockout();  if (debug.messageEnabled()) {    debug.message("ISAccoutLockout.isLockedOut : " + isLockedOut);  }  if ((acInfo != null) && isLockedOut) {    long now=currentTimeMillis();    long lockOutTime=acInfo.getLockoutAt();    if ((lockOutTime + acInfo.getActualLockoutDuration()) < now) {      if (debug.messageEnabled()) {        debug.message("isLockedOut returns false. " + "loginFailureLockoutDuration=" + acInfo.getActualLockoutDuration() + " lockOutTime="+ lockOutTime+ " now="+ now);      }      isLockedOut=false;    }  }  return isLockedOut;}  }
class C{  public ServiceConfigurationError(String msg){  super(msg);}  }
class C{  public static long readSwappedUnsignedInteger(byte[] data,int offset){  long low=(((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8) + ((data[offset + 2] & 0xff) << 16));  long high=data[offset + 3] & 0xff;  return (high << 24) + (0xffffffffL & low);}  }
class C{  public static AddRequest newAddRequest(final DN name){  return Requests.newAddRequest(name).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  NodeList childList;  Node childToRemove;  Node removedChild;  Node parentNode;  doc=(Document)load("staff",true);  rootNode=doc.getDocumentElement();  childList=rootNode.getChildNodes();  childToRemove=childList.item(1);  removedChild=rootNode.removeChild(childToRemove);  parentNode=removedChild.getParentNode();  assertNull("nodeRemoveChildAssert1",parentNode);}  }
class C{  @Parameters({"logtest-realm"}) @AfterSuite(groups={"api-adminwrite","api-adminread"}) public void suiteTearDown(String realm){}  }
class C{  public void nullifyUsedVars(){  bundle=null;  thecert=null;  options=null;  callbackHandler=null;  amAuthCert_serverHost=null;  amAuthCert_startSearchLoc=null;  amAuthCert_securityType=null;  amAuthCert_principleUser=null;  amAuthCert_principlePasswd=null;  amAuthCert_useSSL=null;  amAuthCert_userProfileMapper=null;  amAuthCert_altUserProfileMapper=null;  amAuthCert_chkCRL=null;  amAuthCert_chkAttrCRL=null;  amAuthCert_chkAttributesCRL=null;  amAuthCert_uriParamsCRL=null;  amAuthCert_chkCertInLDAP=null;  amAuthCert_chkAttrCertInLDAP=null;  amAuthCert_emailAddrTag=null;  portalGateways=null;  amAuthCert_updateCRL=null;}  }
class C{  @Override public void shutdown(){  processServerShutdown(null);  try {    writer.flush();    writer.close();  } catch (  Exception e) {    errorHandler.handleCloseError(e);  }}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {}  }
class C{  private boolean checkPlayServices(){  GoogleApiAvailability apiAvailability=GoogleApiAvailability.getInstance();  int resultCode=apiAvailability.isGooglePlayServicesAvailable(this);  if (resultCode != ConnectionResult.SUCCESS) {    if (apiAvailability.isUserResolvableError(resultCode)) {      apiAvailability.getErrorDialog(this,resultCode,PLAY_SERVICES_RESOLUTION_REQUEST).show();    } else {      Log.i(TAG,"This device is not supported.");      finish();    }    return false;  }  return true;}  }
class C{  protected void processMouseMotionEvent(MouseEvent e){  boolean dispatch=true;  if (autoscrolls && e.getID() == MouseEvent.MOUSE_DRAGGED) {    dispatch=!Autoscroller.isRunning(this);    Autoscroller.processMouseDragged(e);  }  if (dispatch) {    super.processMouseMotionEvent(e);  }}  }
class C{  private void encodeAttributes(ByteStringBuilder buffer,Map<AttributeType,List<Attribute>> attributes,EntryEncodeConfig config) throws DirectoryException {  int numAttributes=0;  for (  List<Attribute> attrList : attributes.values()) {    Attribute a;    for (int i=0; i < attrList.size(); i++) {      a=attrList.get(i);      if (a.isVirtual() || a.isEmpty()) {        continue;      }      numAttributes++;    }  }  buffer.appendBERLength(numAttributes);  if (config.compressAttributeDescriptions()) {    for (    List<Attribute> attrList : attributes.values()) {      for (      Attribute a : attrList) {        if (a.isVirtual() || a.isEmpty()) {          continue;        }        config.getCompressedSchema().encodeAttribute(buffer,a);      }    }  } else {    for (    List<Attribute> attrList : attributes.values()) {      for (      Attribute a : attrList) {        buffer.appendBytes(getBytes(a.getAttributeDescription().toString()));        buffer.appendByte(0x00);        buffer.appendBERLength(a.size());        for (        ByteString v : a) {          buffer.appendBERLength(v.length());          buffer.appendBytes(v);        }      }    }  }}  }
class C{  public FixedRateThrottlingPolicy(ThrottlingRate rate){  this.promiseRate=newResultPromise(rate);}  }
class C{  protected void resetInputValue(){  if (inputComponent != null && (inputComponent instanceof JTextField)) {    optionPane.setInputValue(((JTextField)inputComponent).getText());  } else   if (inputComponent != null && (inputComponent instanceof JComboBox)) {    optionPane.setInputValue(((JComboBox)inputComponent).getSelectedItem());  } else   if (inputComponent != null) {    optionPane.setInputValue(((JList)inputComponent).getSelectedValue());  }}  }
class C{  public boolean hasExtendedDuration(){  return extended;}  }
class C{  protected void finalize(){synchronized (statsMap) {    statsMap.remove(statsName);  }synchronized (this) {    if (statsFile == null) {      return;    }    statsState=Stats.OFF;    statsFile.flush();    statsFile.close();    statsFile=null;  }}  }
class C{  public RMIConnector(RMIServer rmiServer,Map<String,?> environment){  this(rmiServer,null,environment);}  }
class C{  public void testConstrDoublePosInfinity(){  double a=Double.POSITIVE_INFINITY;  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public static boolean isDirty(Git git) throws NoWorkTreeException, GitAPIException {  Status status=git.status().call();  return !status.isClean();}  }
class C{  public String toString(){  return m_currentPattern;}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm,java.lang.String idAttrName,java.lang.String id,boolean includeCert) throws XMLSignatureException {  return sp.signXML(doc,certAlias,algorithm,idAttrName,id,includeCert);}  }
class C{  @AfterClass public static void afterClass(){  f.clearTestTables();}  }
class C{  public static final Tag findAncestorWithClass(Tag from,@SuppressWarnings("rawtypes") Class klass){  boolean isInterface=false;  if (from == null || klass == null || (!Tag.class.isAssignableFrom(klass) && !(isInterface=klass.isInterface()))) {    return null;  }  for (; ; ) {    Tag tag=from.getParent();    if (tag == null) {      return null;    }    if ((isInterface && klass.isInstance(tag)) || ((Class<?>)klass).isAssignableFrom(tag.getClass())) {      return tag;    }    from=tag;  }}  }
class C{  public MemoryBackend clear(){synchronized (writeLock) {    entries.clear();  }  return this;}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Node oldChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node replacedChild;  doc1=(Document)load("staff",false);  doc2=(Document)load("staff",true);  newChild=doc1.createElement("newChild");  elementList=doc2.getElementsByTagName("employee");  elementNode=elementList.item(1);  oldChild=elementNode.getFirstChild();{    boolean success=false;    try {      replacedChild=elementNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public boolean hasAuthenticationContext(){  return null != authContext;}  }
class C{  private boolean startsWithStringArray(String sArray[],String value){  if (value == null)   return false;  for (int i=0; i < sArray.length; i++) {    if (value.startsWith(sArray[i])) {      return true;    }  }  return false;}  }
class C{  public static int readUint32AsInt(DataInput di) throws IOException {  final long l=readUint32(di);  if (l > Integer.MAX_VALUE) {    throw new IOException("uint32 value read overflows int");  }  return (int)l;}  }
class C{  private long toEpochNano(){  long nod=time.toNanoOfDay();  long offsetNanos=offset.getTotalSeconds() * NANOS_PER_SECOND;  return nod - offsetNanos;}  }
class C{  @Override public Promise<ActionResponse,ResourceException> actionCollection(Context context,ActionRequest request){  return RestUtils.generateUnsupportedOperation();}  }
class C{  private static void normalizeDCArrays(XMPNode dcSchema) throws XMPException {  for (int i=1; i <= dcSchema.getChildrenLength(); i++) {    XMPNode currProp=dcSchema.getChild(i);    PropertyOptions arrayForm=(PropertyOptions)dcArrayForms.get(currProp.getName());    if (arrayForm == null) {      continue;    } else     if (currProp.getOptions().isSimple()) {      XMPNode newArray=new XMPNode(currProp.getName(),arrayForm);      currProp.setName(XMPConst.ARRAY_ITEM_NAME);      newArray.addChild(currProp);      dcSchema.replaceChild(i,newArray);      if (arrayForm.isArrayAltText() && !currProp.getOptions().getHasLanguage()) {        XMPNode newLang=new XMPNode(XMPConst.XML_LANG,XMPConst.X_DEFAULT,null);        currProp.addQualifier(newLang);      }    } else {      currProp.getOptions().setOption(PropertyOptions.ARRAY | PropertyOptions.ARRAY_ORDERED | PropertyOptions.ARRAY_ALTERNATE| PropertyOptions.ARRAY_ALT_TEXT,false);      currProp.getOptions().mergeWith(arrayForm);      if (arrayForm.isArrayAltText()) {        repairAltText(currProp);      }    }  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.EndpointType createEndpointType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.EndpointTypeImpl();}  }
class C{  public static void invokeListeners(SessionEvent sessionEvent){  Reject.ifNull(sessionEvent,sessionEvent.getSession());  final Session session=sessionEvent.getSession();  for (  SessionListener listener : session.getLocalSessionEventListeners()) {    listener.sessionChanged(sessionEvent);  }}  }
class C{  public MemoryBackend(final EntryReader reader) throws IOException {  this(Schema.getDefaultSchema(),reader);}  }
class C{  public AbstractColorChooserPanel removeChooserPanel(AbstractColorChooserPanel panel){  int containedAt=-1;  for (int i=0; i < chooserPanels.length; i++) {    if (chooserPanels[i] == panel) {      containedAt=i;      break;    }  }  if (containedAt == -1) {    throw new IllegalArgumentException("chooser panel not in this chooser");  }  AbstractColorChooserPanel[] newArray=new AbstractColorChooserPanel[chooserPanels.length - 1];  if (containedAt == chooserPanels.length - 1) {    System.arraycopy(chooserPanels,0,newArray,0,newArray.length);  } else   if (containedAt == 0) {    System.arraycopy(chooserPanels,1,newArray,0,newArray.length);  } else {    System.arraycopy(chooserPanels,0,newArray,0,containedAt);    System.arraycopy(chooserPanels,containedAt + 1,newArray,containedAt,(chooserPanels.length - containedAt - 1));  }  setChooserPanels(newArray);  return panel;}  }
class C{  public NamingException(String explanation){  super(explanation);  resolvedName=remainingName=null;  resolvedObj=null;}  }
class C{  public void endElement(){  nss.popContext();}  }
class C{  public void cleanUpRemoteSessions(){synchronized (remoteSessionSet) {    for (Iterator iter=remoteSessionSet.iterator(); iter.hasNext(); ) {      SessionID sessionID=(SessionID)iter.next();      String hostServer=null;      try {        hostServer=getCurrentHostServer(sessionID);      } catch (      Exception ex) {      }      if (!serverConfig.isLocalServer(hostServer)) {        iter.remove();      }    }  }}  }
class C{  public Observable<DriveId> createFile(DriveFolder folder,final InputStream inputStream){  return createFile(folder,inputStream,String.valueOf(System.currentTimeMillis()));}  }
class C{  public StarBrick genStarBrick(float[] coords,int stageZone){  return new StarBrick(player,stageZone,stageContainer,coords[0],coords[1],(float)1.0 * REL_HEIGHT,(float)3.0 * REL_HEIGHT,starBrickSprites,invinciStarSprites);}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public AttributeFilter typesOnly(final boolean typesOnly){  this.typesOnly=typesOnly;  return this;}  }
class C{  protected PropertyChangeListener createSelectionModelPropertyChangeListener(){  return getHandler();}  }
class C{  public void paintSeparatorBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  @Override public void execute() throws BuildException {  if (path == null) {    throw new BuildException("Must specify 'path'");  }  File file=new File(path,Constants.ApplicationWebXml);  if (!file.canRead()) {    throw new BuildException("Cannot find web.xml");  }  ClassLoader oldCL=Thread.currentThread().getContextClassLoader();  Thread.currentThread().setContextClassLoader(ValidatorTask.class.getClassLoader());  Digester digester=DigesterFactory.newDigester(true,true,null,Globals.IS_SECURITY_ENABLED);  try (InputStream stream=new BufferedInputStream(new FileInputStream(file.getCanonicalFile()))){    InputSource is=new InputSource(file.toURI().toURL().toExternalForm());    is.setByteStream(stream);    digester.parse(is);    handleOutput("web.xml validated");  } catch (  Exception e) {    if (isFailOnError()) {      throw new BuildException("Validation failure",e);    } else {      handleErrorOutput("Validation failure: " + e);    }  } finally {    Thread.currentThread().setContextClassLoader(oldCL);    closeRedirector();  }}  }
class C{  public void swap(final Type prev,final Type type){  if (type.getSize() == 1) {    if (prev.getSize() == 1) {      swap();    } else {      dupX2();      pop();    }  } else {    if (prev.getSize() == 1) {      dup2X1();      pop2();    } else {      dup2X2();      pop2();    }  }}  }
class C{  public void testIsSigned(){  try {    assertFalse(rsmd.isSigned(1));  } catch (  SQLException e1) {    fail("ResultSetMetaDataTest.isSigned" + e1.getMessage());    e1.printStackTrace();  }  try {    rsmd.isSigned(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Wss10Element createWss10Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Wss10ElementImpl();}  }
class C{  private int run(final String templatePath,final StringArgument resourcePath,final StringArgument ldifFile,final IntegerArgument randomSeedArg,final StringArgument constants,final IntegerArgument wrapColumn){  LDIFEntryWriter writer=null;  try (EntryGenerator generator=createGenerator(templatePath,resourcePath,randomSeedArg,constants)){    if (generator == null) {      return EXIT_CODE_FAILURE;    }    if (generator.hasWarnings()) {      for (      LocalizableMessage warn : generator.getWarnings()) {        errPrintln(warn);      }    }    try {      writer=createLdifWriter(ldifFile,wrapColumn);    } catch (    final IOException e) {      errPrintln(ERR_MAKELDIF_UNABLE_TO_CREATE_LDIF.get(ldifFile.getValue(),e.getMessage()));      return EXIT_CODE_FAILURE;    }catch (    final ArgumentException e) {      errPrintln(ERR_ERROR_PARSING_ARGS.get(e.getMessageObject()));      return EXIT_CODE_FAILURE;    }    if (!generateEntries(generator,writer,ldifFile)) {      return EXIT_CODE_FAILURE;    }    errPrintln(INFO_MAKELDIF_PROCESSING_COMPLETE.get(numberOfEntriesWritten));    return EXIT_CODE_SUCCESS;  }  finally {    closeSilently(writer);  }}  }
class C{  public InvalidAttributeValueException(String s){  super(s);}  }
class C{  public void destroy(){  cert=null;  key=null;  alias=null;}  }
class C{  public boolean isReadOnly(){  return getFieldFlag(FF_READ_ONLY);}  }
class C{  private PlaLineInt smoothen_non_integer_corner(PlaLineIntAlist p_line_arr,int p_no){  PlaLineInt prev_line=p_line_arr.get(p_no);  PlaLineInt next_line=p_line_arr.get(p_no + 1);  if (prev_line.is_equal_or_opposite(next_line)) {    return null;  }  if (!(prev_line.is_diagonal() && next_line.is_diagonal())) {    return null;  }  PlaPointFloat curr_corner=prev_line.intersection_approx(next_line);  PlaPointFloat prev_corner=prev_line.intersection_approx(p_line_arr.get(p_no - 1));  PlaPointFloat next_corner=next_line.intersection_approx(p_line_arr.get(p_no + 2));  PlaLineInt result=null;  int new_x=0;  int new_y=0;  boolean new_line_is_vertical=false;  boolean new_line_is_horizontal=false;  if (prev_corner.v_x > curr_corner.v_x && next_corner.v_x > curr_corner.v_x) {    new_x=(int)Math.ceil(curr_corner.v_x);    new_y=(int)Math.ceil(curr_corner.v_y);    new_line_is_vertical=true;  } else   if (prev_corner.v_x < curr_corner.v_x && next_corner.v_x < curr_corner.v_x) {    new_x=(int)Math.floor(curr_corner.v_x);    new_y=(int)Math.floor(curr_corner.v_y);    new_line_is_vertical=true;  } else   if (prev_corner.v_y > curr_corner.v_y && next_corner.v_y > curr_corner.v_y) {    new_x=(int)Math.ceil(curr_corner.v_x);    new_y=(int)Math.ceil(curr_corner.v_y);    new_line_is_horizontal=true;  } else   if (prev_corner.v_y < curr_corner.v_y && next_corner.v_y < curr_corner.v_y) {    new_x=(int)Math.floor(curr_corner.v_x);    new_y=(int)Math.floor(curr_corner.v_y);    new_line_is_horizontal=true;  }  PlaDirection new_line_dir=null;  if (new_line_is_vertical) {    if (prev_corner.v_y < next_corner.v_y) {      new_line_dir=PlaDirection.UP;    } else {      new_line_dir=PlaDirection.DOWN;    }  } else   if (new_line_is_horizontal) {    if (prev_corner.v_x < next_corner.v_x) {      new_line_dir=PlaDirection.RIGHT;    } else {      new_line_dir=PlaDirection.LEFT;    }  } else {    return null;  }  PlaPointInt line_a=new PlaPointInt(new_x,new_y);  result=new PlaLineInt(line_a,new_line_dir);  return result;}  }
class C{  static void drawFlush3DBorder(Graphics g,int x,int y,int w,int h){  g.translate(x,y);  g.setColor(MetalLookAndFeel.getControlDarkShadow());  g.drawRect(0,0,w - 2,h - 2);  g.setColor(MetalLookAndFeel.getControlHighlight());  g.drawRect(1,1,w - 2,h - 2);  g.setColor(MetalLookAndFeel.getControl());  g.drawLine(0,h - 1,1,h - 2);  g.drawLine(w - 1,0,w - 2,1);  g.translate(-x,-y);}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public void addListener(Subject adminSubject,EntitlementListener listener) throws EntitlementException {  if (registry != null) {    registry.addListener(adminSubject,listener);  }}  }
class C{  public static void deregisterRootDN(DN rootDN){  directoryServer.rootDNs.remove(rootDN);}  }
class C{  @Override public void mark(int readAheadLimit){  mark=idx;}  }
class C{  public static String generateTOTP512(byte[] key,String time,String returnDigits){  return generateTOTP(key,time,returnDigits,"HmacSHA512");}  }
class C{  @Override public boolean add(T o){  if (locked)   throw new IllegalStateException(sm.getString("resourceSet.locked"));  return (super.add(o));}  }
class C{  public static UIInput createTextArea(){  return (UIInput)JSFComponentFactory.createComponent(HtmlInputTextarea.COMPONENT_TYPE);}  }
class C{  public void createKeyPair(){  try {    mKeyPairGenerator.initialize(new KeyGenParameterSpec.Builder(KEY_NAME,KeyProperties.PURPOSE_SIGN).setDigests(KeyProperties.DIGEST_SHA256).setAlgorithmParameterSpec(new ECGenParameterSpec("secp256r1")).setUserAuthenticationRequired(true).build());    mKeyPairGenerator.generateKeyPair();  } catch (  InvalidAlgorithmParameterException e) {    throw new RuntimeException(e);  }}  }
class C{  protected void invalidate(boolean first){  super.invalidate(first);  getParent().invalidate(true);}  }
class C{  public void test_Constructor_Throwable_String() throws Exception {  UndeclaredThrowableException e=new UndeclaredThrowableException(throwable,msg);  assertEquals("Wrong cause returned",throwable,e.getCause());  assertEquals("Wrong throwable returned",throwable,e.getUndeclaredThrowable());  assertEquals("Wrong message returned",msg,e.getMessage());}  }
class C{  public void processMouseEvent(MouseEvent event){  int screenX, screenY;  Point p;  int i, c, j, d;  Component mc;  Rectangle r2;  int cWidth, cHeight;  MenuElement menuElement;  MenuElement subElements[];  MenuElement path[];  Vector<MenuElement> tmp;  int selectionSize;  p=event.getPoint();  Component source=event.getComponent();  if ((source != null) && !source.isShowing()) {    return;  }  int type=event.getID();  int modifiers=event.getModifiers();  if ((type == MouseEvent.MOUSE_ENTERED || type == MouseEvent.MOUSE_EXITED) && ((modifiers & (InputEvent.BUTTON1_MASK | InputEvent.BUTTON2_MASK | InputEvent.BUTTON3_MASK)) != 0)) {    return;  }  if (source != null) {    SwingUtilities.convertPointToScreen(p,source);  }  screenX=p.x;  screenY=p.y;  tmp=(Vector<MenuElement>)selection.clone();  selectionSize=tmp.size();  boolean success=false;  for (i=selectionSize - 1; i >= 0 && success == false; i--) {    menuElement=(MenuElement)tmp.elementAt(i);    subElements=menuElement.getSubElements();    path=null;    for (j=0, d=subElements.length; j < d && success == false; j++) {      if (subElements[j] == null)       continue;      mc=subElements[j].getComponent();      if (!mc.isShowing())       continue;      if (mc instanceof JComponent) {        cWidth=mc.getWidth();        cHeight=mc.getHeight();      } else {        r2=mc.getBounds();        cWidth=r2.width;        cHeight=r2.height;      }      p.x=screenX;      p.y=screenY;      SwingUtilities.convertPointFromScreen(p,mc);      if ((p.x >= 0 && p.x < cWidth && p.y >= 0 && p.y < cHeight)) {        int k;        if (path == null) {          path=new MenuElement[i + 2];          for (k=0; k <= i; k++)           path[k]=(MenuElement)tmp.elementAt(k);        }        path[i + 1]=subElements[j];        MenuElement currentSelection[]=getSelectedPath();        if (currentSelection[currentSelection.length - 1] != path[i + 1] && (currentSelection.length < 2 || currentSelection[currentSelection.length - 2] != path[i + 1])) {          Component oldMC=currentSelection[currentSelection.length - 1].getComponent();          MouseEvent exitEvent=new MouseEvent(oldMC,MouseEvent.MOUSE_EXITED,event.getWhen(),event.getModifiers(),p.x,p.y,event.getXOnScreen(),event.getYOnScreen(),event.getClickCount(),event.isPopupTrigger(),MouseEvent.NOBUTTON);          currentSelection[currentSelection.length - 1].processMouseEvent(exitEvent,path,this);          MouseEvent enterEvent=new MouseEvent(mc,MouseEvent.MOUSE_ENTERED,event.getWhen(),event.getModifiers(),p.x,p.y,event.getXOnScreen(),event.getYOnScreen(),event.getClickCount(),event.isPopupTrigger(),MouseEvent.NOBUTTON);          subElements[j].processMouseEvent(enterEvent,path,this);        }        MouseEvent mouseEvent=new MouseEvent(mc,event.getID(),event.getWhen(),event.getModifiers(),p.x,p.y,event.getXOnScreen(),event.getYOnScreen(),event.getClickCount(),event.isPopupTrigger(),MouseEvent.NOBUTTON);        subElements[j].processMouseEvent(mouseEvent,path,this);        success=true;        event.consume();      }    }  }}  }
class C{  public String toString(){  return Double.toString(get());}  }
class C{  public BrdKeepPoint(PlaPointInt p_keep_point,int p_on_layer){  if (p_keep_point == null)   throw new IllegalArgumentException("p_keep_point == null");  keep_point=p_keep_point;  on_layer=p_on_layer;}  }
class C{  public Set searchRoles(String wildcard,int level) throws AMException, SSOException {  return searchRoles(wildcard,null,level);}  }
class C{  public static PasswordType checkPasswordType(AttributeType attrType){  final String syntaxOID=attrType.getSyntax().getOID();  if (syntaxOID.equals(SYNTAX_AUTH_PASSWORD_OID)) {    return PasswordType.AUTH_PASSWORD;  } else   if (attrType.hasName("userPassword") || syntaxOID.equals(SYNTAX_USER_PASSWORD_OID)) {    return PasswordType.USER_PASSWORD;  }  return PasswordType.NOT_A_PASSWORD;}  }
class C{  public static String escapeXml(String buffer){  String result=escapeXml(buffer.toCharArray(),buffer.length());  if (result == null) {    return buffer;  } else {    return result;  }}  }
class C{  public UnsupportedAddressTypeException(){}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.ReferenceListType createReferenceListType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.ReferenceListTypeImpl();}  }
class C{  public static boolean equals(int[] a,int[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length)   return false;  for (int i=0; i < length; i++)   if (a[i] != a2[i])   return false;  return true;}  }
class C{  public static void assertSchemaNS(String schemaNS) throws XMPException {  if (schemaNS == null || schemaNS.length() == 0) {    throw new XMPException("Empty schema namespace URI",XMPError.BADPARAM);  }}  }
class C{  public LegacySessionIDExtensions(String extensionPart) throws IOException {  final CharsetDecoder decoder=Charset.forName("UTF-8").newDecoder().onMalformedInput(CodingErrorAction.REPORT).onUnmappableCharacter(CodingErrorAction.REPORT);  extensionsMap=new HashMap<>();  final byte[] bytes=Base64.decode(extensionPart);  if (bytes == null) {    debug.message("SessionID.readExtensions: Invalid extension data {}",extensionPart);    throw new IllegalArgumentException("Invalid Base64-encoded data");  }  for (int i=0; i < bytes.length; ) {    int length=parseUnsignedShort(bytes,i);    i+=2;    String key=decoder.decode(ByteBuffer.wrap(bytes,i,length)).toString();    i+=length;    length=parseUnsignedShort(bytes,i);    i+=2;    String val=decoder.decode(ByteBuffer.wrap(bytes,i,length)).toString();    i+=length;    extensionsMap.put(key,val);  }}  }
class C{  public Set searchStaticGroups(String wildcard,int level,String groupSearchTemplate,Map avPairs) throws AMException, SSOException {  if (AMCompliance.isComplianceUserDeletionEnabled() && AMCompliance.isAncestorOrgDeleted(super.token,super.entryDN,AMObject.ORGANIZATION)) {    if (debug.messageEnabled()) {      debug.message("AMOrganization.searchAssDynGroup: " + "ancestor org is deleted for: " + super.entryDN + " :returning empty set");    }    return Collections.EMPTY_SET;  }  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.GROUP,groupSearchTemplate),wildcard,avPairs,level);}  }
class C{  public SSLHandshakeException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public static List<String> downloadFilterRules(Context context,int filterId,String webmasterId) throws IOException {  String downloadUrl=RawResources.getFilterUrl(context);  downloadUrl=downloadUrl.replace("{0}",UrlUtils.urlEncode(Integer.toString(filterId)));  downloadUrl=downloadUrl.replace("{1}",UrlUtils.urlEncode(webmasterId != null ? webmasterId : ""));  String response=downloadString(downloadUrl);  String[] rules=StringUtils.split(response,"\r\n");  List<String> filterRules=new ArrayList<>();  for (  String line : rules) {    String rule=StringUtils.trim(line);    if (!StringUtils.isEmpty(rule)) {      filterRules.add(rule);    }  }  return filterRules;}  }
class C{  public SmAuthStatus query(String parameter,String secret,SmAuthQueryCode request,SmAuthQueryResponse response){  if (null == response) {    return SmAuthStatus.SMAUTH_FAILURE;  }  if (SmAuthQueryCode.SMAUTH_QUERY_DESCRIPTION == request) {    response.setResponseBuffer(SCHEME_DESCRIPTION);    response.setResponseCode(SCHEME_VERSION);  } else   if (SmAuthQueryCode.SMAUTH_QUERY_CREDENTIALS_REQ == request) {    response.setResponseCode(SmAuthQueryResponse.SMAUTH_CRED_BASIC);  } else {    return SmAuthStatus.SMAUTH_FAILURE;  }  return SmAuthStatus.SMAUTH_SUCCESS;}  }
class C{  @AndroidOnly("Uses specific classes: " + "org.apache.harmony.security.asn1.ASN1OctetString, " + "org.apache.harmony.security.asn1.ASN1Integer.") public void testClone(){  X509CRLSelector selector=new X509CRLSelector();  X500Principal iss1=new X500Principal("O=First Org.");  X500Principal iss2=new X500Principal("O=Second Org.");  X500Principal iss3=new X500Principal("O=Third Org.");  BigInteger minCRL=new BigInteger("10000");  BigInteger maxCRL=new BigInteger("10000");  Date date=new Date(200);  selector.addIssuer(iss1);  selector.addIssuer(iss2);  selector.setMinCRLNumber(minCRL);  selector.setMaxCRLNumber(maxCRL);  selector.setDateAndTime(date);  X509CRLSelector clone=(X509CRLSelector)selector.clone();  TestCRL crl=new TestCRL(iss1);  crl.setCrlNumber(minCRL);  crl.setUpdateDates(new Date(200),new Date(200));  assertTrue("The specified CRL should match the clone selector.",selector.match(crl));  clone.addIssuer(iss3);  assertFalse("The changes of the clone selector should not cause " + "the changes of initial object",selector.getIssuerNames().size() == 3);}  }
class C{  private void updateStatus(String relayState,int currentStatus){  Integer tmp=(Integer)currentStatusMap.get(relayState);  if (tmp != null) {    int previousStatus=tmp.intValue();switch (previousStatus) {case LOGOUT_SUCCEEDED_STATUS:      if (currentStatus > previousStatus) {        currentStatusMap.put(relayState,new Integer(currentStatus));      }    break;case LOGOUT_FAILED_STATUS:  if (currentStatus < LOGOUT_FAILED_STATUS) {    currentStatusMap.put(relayState,new Integer(LOGOUT_PARTIAL_STATUS));  }break;default :break;}} else {currentStatusMap.put(relayState,new Integer(currentStatus));}}  }
class C{  public void UnexpectedTokenException(String token,LineCol lineCol) throws UnexpectedTokenException {  if (fastFail)   throw new UnexpectedTokenException(buildErrInfo(lineCol),token,lineCol);  String msg="unexpected token " + token;  msg=buildErrInfo(lineCol) + msg;  error(msg + " at " + lineCol);  errorList.add(new CompilingError(msg,lineCol,CompilingError.UnexpectedToken));}  }
class C{  @Override public boolean accept(File file,String name){  return !filter.accept(file,name);}  }
class C{  public synchronized Object co_entry_pause(int thisCoroutine) throws java.lang.NoSuchMethodException {  if (!m_activeIDs.get(thisCoroutine))   throw new java.lang.NoSuchMethodException();  while (m_nextCoroutine != thisCoroutine) {    try {      wait();    } catch (    java.lang.InterruptedException e) {    }  }  return m_yield;}  }
class C{  public void endElement(String elementName) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.endElement(elementName);}  }
class C{  public boolean isFirstTab(String agentType,String tab){  return (tab == null) || (tab.equals(getDefaultTab(agentType)));}  }
class C{  public static boolean isRegistered(ServerDescriptor server,Set<Map<ADSContext.ServerProperty,Object>> registry){  for (  Map<ADSContext.ServerProperty,Object> s : registry) {    ServerDescriptor servInRegistry=ServerDescriptor.createStandalone(s);    if (servInRegistry.getId().equals(server.getId())) {      return true;    }  }  return false;}  }
class C{  public RemotePendingChanges(ServerState state){  this.state=state;}  }
class C{  @DataProvider(name="suffix") public Object[][] suffixData(){  return new Object[][]{{TEST_ROOT_DN_STRING},{"cn=schema"}};}  }
class C{  public Marker pop(){  try {    int idx=(trail.size() - 2);    return (idx < 0) ? backTo(0) : backTo(idx);  } catch (  AMConsoleException e) {    return null;  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("HandlerRef[");  sb.append("className=");  sb.append(getClassName());  sb.append(",factoryClassLocation=");  sb.append(getFactoryClassLocation());  sb.append(",factoryClassName=");  sb.append(getFactoryClassName());  Enumeration<RefAddr> refAddrs=getAll();  while (refAddrs.hasMoreElements()) {    RefAddr refAddr=refAddrs.nextElement();    sb.append(",{type=");    sb.append(refAddr.getType());    sb.append(",content=");    sb.append(refAddr.getContent());    sb.append("}");  }  sb.append("]");  return (sb.toString());}  }
class C{  public void generate_keepout_outside(boolean p_value){  if (p_value == keepout_outside_outline)   return;  keepout_outside_outline=p_value;  r_board.search_tree_manager.remove(this);  r_board.search_tree_manager.insert(this);}  }
class C{  public String encode(){  String addressStr=null;  if (address != null) {    addressStr=address.encode();    if (Host.isIPv6Reference(addressStr)) {      addressStr=addressStr.substring(1,addressStr.length() - 1);    }  }  return ORIGIN_FIELD + username + Separators.SP+ sessIdString+ Separators.SP+ sessVersionString+ Separators.SP+ nettype+ Separators.SP+ addrtype+ Separators.SP+ addressStr+ Separators.NEWLINE;}  }
class C{  @Inject public AuthorizationCodeGrantTypeHandler(List<AuthorizationCodeRequestValidator> requestValidators,ClientAuthenticator clientAuthenticator,TokenStore tokenStore,TokenInvalidator tokenInvalidator,OAuth2ProviderSettingsFactory providerSettingsFactory,OAuth2UrisFactory urisFactory,GrantTypeAccessTokenGenerator accessTokenGenerator){  super(providerSettingsFactory,urisFactory,clientAuthenticator);  this.requestValidators=requestValidators;  this.tokenStore=tokenStore;  this.tokenInvalidator=tokenInvalidator;  this.accessTokenGenerator=accessTokenGenerator;}  }
class C{  public DERSequence(ASN1Encodable obj){  super(obj);}  }
class C{  public void handleTblDataActionHrefRequest(RequestInvocationEvent event) throws ModelControlException {  String prevRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  setPageSessionAttribute(AMAdminConstants.PREVIOUS_REALM,prevRealm);  String newRealm=hexToString((String)getDisplayFieldValue(TBL_DATA_ACTION_HREF));  setPageSessionAttribute(AMAdminConstants.CURRENT_REALM,newRealm);  setCurrentLocation(newRealm);  String tmp=(String)getPageSessionAttribute(getTrackingTabIDName());  setPageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID,tmp);  AMViewConfig config=AMViewConfig.getInstance();  RMRealmModel model=(RMRealmModel)getModel();  unlockPageTrail();  try {    AMViewBeanBase vb=config.getTabViewBean(this,newRealm,model,"realms",-1,-1);    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setPageSessionAttribute(AMAdminConstants.CURRENT_REALM,prevRealm);    removePageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID);    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public void insert_octet(byte value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_octet",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_octet(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private boolean hasTopLevelAdminRole(final SessionID actorsSessionID) throws SessionException, SSOException {  SSOToken ssoSession=ssoTokenManager.createSSOToken(actorsSessionID.toString());  boolean topLevelAdmin=false;  Set actions=CollectionUtils.asSet(PERMISSION_READ,PERMISSION_MODIFY,PERMISSION_DELEGATE);  try {    DelegationPermission perm=new DelegationPermission("/","*","*","*","*",actions,Collections.EMPTY_MAP);    DelegationEvaluator evaluator=new DelegationEvaluatorImpl();    topLevelAdmin=evaluator.isAllowed(ssoSession,perm,Collections.EMPTY_MAP);  } catch (  DelegationException de) {    debug.error("SessionService.hasTopLevelAdminRole: failed to check the delegation permission.",de);  }  return topLevelAdmin;}  }
class C{  public synchronized void addHost(String name,String[] aliases,Host host){  name=renameWildcardHost(name);  MappedHost[] newHosts=new MappedHost[hosts.length + 1];  MappedHost newHost=new MappedHost(name,host);  if (insertMap(hosts,newHosts,newHost)) {    hosts=newHosts;    if (newHost.name.equals(defaultHostName)) {      defaultHost=newHost;    }    if (log.isDebugEnabled()) {      log.debug(sm.getString("mapper.addHost.success",name));    }  } else {    MappedHost duplicate=hosts[find(hosts,name)];    if (duplicate.object == host) {      if (log.isDebugEnabled()) {        log.debug(sm.getString("mapper.addHost.sameHost",name));      }      newHost=duplicate;    } else {      log.error(sm.getString("mapper.duplicateHost",name,duplicate.getRealHostName()));      return;    }  }  List<MappedHost> newAliases=new ArrayList<>(aliases.length);  for (  String alias : aliases) {    alias=renameWildcardHost(alias);    MappedHost newAlias=new MappedHost(alias,newHost);    if (addHostAliasImpl(newAlias)) {      newAliases.add(newAlias);    }  }  newHost.addAliases(newAliases);}  }
class C{  public void paintTabbedPaneTabAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static NullOutputStream instance(){  return instance;}  }
class C{  private String typeToDesc(STypeDef type){  StringBuilder sb=new StringBuilder();  if (type instanceof PrimitiveTypeDef) {    if (type.equals(IntTypeDef.get()))     sb.append("I"); else     if (type.equals(LongTypeDef.get()))     sb.append("J"); else     if (type.equals(ShortTypeDef.get()))     sb.append("S"); else     if (type.equals(ByteTypeDef.get()))     sb.append("B"); else     if (type.equals(BoolTypeDef.get()))     sb.append("Z"); else     if (type.equals(FloatTypeDef.get()))     sb.append("F"); else     if (type.equals(DoubleTypeDef.get()))     sb.append("D"); else     if (type.equals(CharTypeDef.get()))     sb.append("C"); else     throw new LtBug("unknown primitive: " + type);  } else   if (type instanceof SArrayTypeDef) {    SArrayTypeDef arr=(SArrayTypeDef)type;    for (int i=0; i < arr.dimension(); ++i)     sb.append("[");    sb.append(typeToDesc(arr.type()));  } else   if (type.equals(VoidType.get())) {    sb.append("V");  } else {    sb.append("L").append(typeToInternalName(type)).append(";");  }  return sb.toString();}  }
class C{  ProfilePersister(int maxProfilesAllowed,DevicePrintDao devicePrintDao,AMIdentityWrapper amIdentity){  this.maxProfilesAllowed=maxProfilesAllowed;  this.devicePrintDao=devicePrintDao;  this.amIdentity=amIdentity;}  }
class C{  public String nextChoiceValueIdentifier() throws GSERException {  if (!hasNext(GSER_CHOICE_IDENTIFIER)) {    LocalizableMessage msg=ERR_GSER_NO_VALID_IDENTIFIEDCHOICE.get(gserValue.substring(pos,length));    throw new GSERException(msg);  }  String identifier=next(GSER_CHOICE_IDENTIFIER);  return identifier.substring(0,identifier.length() - 1);}  }
class C{  public static long fromInet4AddressAndInode(final InetAddress inetAddress,final int inode){  return overlayInode(fromInet4Address(inetAddress),inode);}  }
class C{  public void paintComboBoxBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static com.sun.identity.saml.assertion.Subject examAssertions(List assertions) throws IOException {  if (assertions == null) {    return null;  }  boolean validation=false;  com.sun.identity.saml.assertion.Subject subject=null;  Iterator iter=assertions.iterator();  while (iter.hasNext()) {    Assertion assertion=(Assertion)iter.next();    if (!checkCondition(assertion)) {      return null;    }    debug.message("Passed checking Conditions!");    Set statements=new HashSet();    statements=assertion.getStatement();    if (statements == null || statements.isEmpty()) {      debug.error(bundle.getString("noStatement"));      return null;    }    Iterator iterator=statements.iterator();    while (iterator.hasNext()) {      Statement statement=(Statement)iterator.next();      subject=((SubjectStatement)statement).getSubject();      SubjectConfirmation sc=subject.getSubjectConfirmation();      Set cm=new HashSet();      cm=sc.getConfirmationMethod();      if (cm == null || cm.isEmpty()) {        debug.error("Subject confirmation method is null");        return null;      }      String conMethod=(String)cm.iterator().next();      if ((conMethod != null) && (assertion.getMajorVersion() == SAMLConstants.ASSERTION_MAJOR_VERSION) && (((assertion.getMinorVersion() == SAMLConstants.ASSERTION_MINOR_VERSION_ONE) && conMethod.equals(SAMLConstants.CONFIRMATION_METHOD_ARTIFACT)) || ((assertion.getMinorVersion() == SAMLConstants.ASSERTION_MINOR_VERSION_ZERO) && (conMethod.equals(SAMLConstants.DEPRECATED_CONFIRMATION_METHOD_ARTIFACT))))) {        if (debug.messageEnabled()) {          debug.message("Correct Confirmation method");        }      } else {        debug.error("Wrong Confirmation Method.");        return null;      }      if (statement instanceof AuthenticationStatement) {        validation=true;      }    }  }  if (!validation) {    debug.error(bundle.getString("noSSOAssertion"));    return null;  }  return subject;}  }
class C{  public Integer checkRoleReading(String roleName,String relationTypeName) throws IllegalArgumentException, RelationTypeNotFoundException {  if (roleName == null || relationTypeName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"checkRoleReading",new Object[]{roleName,relationTypeName});  Integer result;  RelationType relType=getRelationType(relationTypeName);  try {    RoleInfo roleInfo=relType.getRoleInfo(roleName);    result=checkRoleInt(1,roleName,null,roleInfo,false);  } catch (  RoleInfoNotFoundException exc) {    result=Integer.valueOf(RoleStatus.NO_ROLE_WITH_NAME);  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"checkRoleReading");  return result;}  }
class C{  @Override public void close() throws IOException {  fInputStream.close();}  }
class C{  public XPathFactoryConfigurationException(String message){  super(message);}  }
class C{  private DSConfig(OutputStream out,OutputStream err){  super(new PrintStream(out),new PrintStream(err));  this.parser=new SubCommandArgumentParser(getClass().getName(),INFO_DSCFG_TOOL_DESCRIPTION.get(),false);  this.parser.setShortToolDescription(REF_SHORT_DESC_DSCONFIG.get());  this.parser.setDocToolDescriptionSupplement(REF_DSCFG_DOC_TOOL_DESCRIPTION.get());  this.parser.setDocSubcommandsDescriptionSupplement(REF_DSCFG_DOC_SUBCOMMANDS_DESCRIPTION.get());  this.parser.setVersionHandler(newToolVersionHandler("opendj-config"));  if (System.getProperty("org.forgerock.opendj.gendoc") != null) {    this.parser.setUsageHandler(new DSConfigSubCommandUsageHandler());  }}  }
class C{  private static boolean equalsMayBeNull(Object obj1,Object obj2){  return (obj2 == obj1) || ((null != obj1) && (null != obj2) && obj2.equals(obj1));}  }
class C{  public int intValue(){  return intValue;}  }
class C{  private AttributeType(final String name,final Syntax syntax,final MatchingRule equalityMatchingRule){  final StringBuilder builder=new StringBuilder(name.length() + 4);  StaticUtils.toLowerCase(name,builder);  builder.append("-oid");  this.oid=builder.toString();  this.names=Collections.singletonList(name);  this.isObsolete=false;  this.superiorTypeOID=null;  this.superiorType=null;  this.equalityMatchingRule=equalityMatchingRule;  this.equalityMatchingRuleOID=equalityMatchingRule.getOID();  this.orderingMatchingRuleOID=null;  this.substringMatchingRuleOID=null;  this.approximateMatchingRuleOID=null;  this.syntax=syntax;  this.syntaxOID=syntax.getOID();  this.isSingleValue=false;  this.isCollective=false;  this.isNoUserModification=false;  this.attributeUsage=null;  this.isObjectClassType=false;  this.isPlaceHolder=true;  this.normalizedName=StaticUtils.toLowerCase(getNameOrOID());}  }
class C{  public void insert_ushort(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ushort",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_ushort(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean equals(Object object){  boolean ret=false;  if (object instanceof MediaPrintableArea) {    MediaPrintableArea mm=(MediaPrintableArea)object;    if (x == mm.x && y == mm.y && w == mm.w && h == mm.h) {      ret=true;    }  }  return ret;}  }
class C{  public static Map upCaseKeys(Map map){  Map uc=new HashMap(map.size() * 2);  for (Iterator iter=map.entrySet().iterator(); iter.hasNext(); ) {    Map.Entry entry=(Map.Entry)iter.next();    String key=((String)entry.getKey()).toUpperCase();    uc.put(key,entry.getValue());  }  return uc;}  }
class C{  @Override public void put(String name,int value){  emulatedFields.put(name,value);}  }
class C{  public void saveUser(User user){  if (user instanceof JsonUser) {    JsonUser jsonUser=(JsonUser)user;    JsonUserQuery query=new JsonUserQuery(this);    query.userId(user.getId());    User existingUser=query.executeSingleResult(null);    try {      if (existingUser != null) {        UpdateRequest request=newUpdateRequest(USER_PATH,jsonUser.getId(),jsonUser);        getConnection().update(context,request);      } else {        CreateRequest request=Requests.newCreateRequest(USER_PATH,jsonUser.getId(),jsonUser);        getConnection().create(context,request);      }    } catch (    ResourceException ex) {      throw new RuntimeException(ex);    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.TransformsType createTransformsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.TransformsTypeImpl();}  }
class C{  protected void processAnnotations(Object instance,Map<String,String> injections) throws IllegalAccessException, InvocationTargetException, NamingException {  if (context == null) {    return;  }  Class<?> clazz=instance.getClass();  while (clazz != null) {    AnnotationCacheEntry[] annotations;synchronized (annotationCache) {      annotations=annotationCache.get(clazz);    }    for (    AnnotationCacheEntry entry : annotations) {      if (entry.getType() == AnnotationCacheEntryType.SETTER) {        lookupMethodResource(context,instance,getMethod(clazz,entry),entry.getName(),clazz);      } else       if (entry.getType() == AnnotationCacheEntryType.FIELD) {        lookupFieldResource(context,instance,getField(clazz,entry),entry.getName(),clazz);      }    }    clazz=clazz.getSuperclass();  }}  }
class C{  public boolean hasExperienceReward(){  return experienceReward;}  }
class C{  public void removeActionListener(ActionListener l){  listenerList.remove(ActionListener.class,l);}  }
class C{  public static Set<String> assertValidCipherSuites(Set<String> expected,String[] cipherSuites){  assertNotNull(cipherSuites);  assertTrue(cipherSuites.length != 0);  Set remainingCipherSuites=new HashSet<String>(expected);  Set unknownCipherSuites=new HashSet<String>();  for (  String cipherSuite : cipherSuites) {    boolean removed=remainingCipherSuites.remove(cipherSuite);    if (!removed) {      unknownCipherSuites.add(cipherSuite);    }  }  assertEquals("Unknown cipher suites",Collections.EMPTY_SET,unknownCipherSuites);  return remainingCipherSuites;}  }
class C{  private ConstraintResult verifyResources(Set<String> resources,ResourceName resourceHandler,ResourceType resourceType){  Set<String> patterns=resourceType.getPatterns();  for (  String resource : resources) {    try {      String normalisedResource=resourceHandler.canonicalize(resource);      if (!validateResourceNames(normalisedResource,patterns,resourceHandler)) {        return ConstraintResults.newFailure("resources",resource);      }    } catch (    EntitlementException eE) {      return ConstraintResults.newFailure("resources",resource);    }  }  return ConstraintResults.newSuccess();}  }
class C{  public void addResponseProvider(String name,ResponseProvider respProvider) throws NameAlreadyExistsException {  respProviders.addResponseProvider(name,respProvider);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("LDAPCertStoreParameters: [\n");  sb.append("  serverName: " + serverName + "\n");  sb.append("  port: " + port + "\n");  sb.append("]");  return sb.toString();}  }
class C{  public void makeImmutable(){  mutable=false;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  String nsPrefix="";  String nsDeclaration="";  if (includeNSPrefix) {    nsPrefix=XACMLConstants.CONTEXT_NS_PREFIX + ":";  }  if (declareNS) {    nsDeclaration=XACMLConstants.CONTEXT_NS_DECLARATION;  }  sb.append("<").append(nsPrefix).append(XACMLConstants.STATUS).append(nsDeclaration).append(">\n");  if (statusCode != null) {    sb.append(statusCode.toXMLString(includeNSPrefix,false));  }  if (statusMessage != null) {    sb.append(statusMessage.toXMLString(includeNSPrefix,false));  }  if (statusDetail != null) {    sb.append(statusDetail.toXMLString(includeNSPrefix,false));  }  sb.append("</").append(nsPrefix).append(XACMLConstants.STATUS).append(">\n");  return sb.toString();}  }
class C{  LambdaForm customize(MethodHandle mh){  LambdaForm customForm=new LambdaForm(debugName,arity,names,result,forceInline,mh);  if (COMPILE_THRESHOLD > 0 && isCompiled) {    customForm.compileToBytecode();  }  customForm.transformCache=this;  return customForm;}  }
class C{  @SuppressWarnings("null") public static String escapeXml(String buffer){  if (buffer == null) {    return "";  }  int start=0;  int length=buffer.length();  char[] arrayBuffer=buffer.toCharArray();  StringBuilder escapedBuffer=null;  for (int i=0; i < length; i++) {    char c=arrayBuffer[i];    if (c <= HIGHEST_SPECIAL) {      char[] escaped=specialCharactersRepresentation[c];      if (escaped != null) {        if (start == 0) {          escapedBuffer=new StringBuilder(length + 5);        }        if (start < i) {          escapedBuffer.append(arrayBuffer,start,i - start);        }        start=i + 1;        escapedBuffer.append(escaped);      }    }  }  if (start == 0) {    return buffer;  }  if (start < length) {    escapedBuffer.append(arrayBuffer,start,length - start);  }  return escapedBuffer.toString();}  }
class C{  protected void installListeners(){  propertyChangeListener=createPropertyChangeListener();  spinner.addPropertyChangeListener(propertyChangeListener);  if (DefaultLookup.getBoolean(spinner,this,"Spinner.disableOnBoundaryValues",false)) {    spinner.addChangeListener(getHandler());  }  JComponent editor=spinner.getEditor();  if (editor != null && editor instanceof JSpinner.DefaultEditor) {    JTextField tf=((JSpinner.DefaultEditor)editor).getTextField();    if (tf != null) {      tf.addFocusListener(nextButtonHandler);      tf.addFocusListener(previousButtonHandler);    }  }}  }
class C{  public boolean shouldSelectCell(EventObject event){  return realEditor.shouldSelectCell(event);}  }
class C{  public void exiting(String sourceClass,String sourceMethod,Object result){  logp(Level.FINER,sourceClass,sourceMethod,"RETURN {0}",result);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((normalizedHost == null) ? 0 : normalizedHost.hashCode());  result=prime * result + port;  return result;}  }
class C{  static ZoneOffsetTransitionRule readExternal(DataInput in) throws IOException {  int data=in.readInt();  Month month=Month.of(data >>> 28);  int dom=((data & (63 << 22)) >>> 22) - 32;  int dowByte=(data & (7 << 19)) >>> 19;  DayOfWeek dow=dowByte == 0 ? null : DayOfWeek.of(dowByte);  int timeByte=(data & (31 << 14)) >>> 14;  TimeDefinition defn=TimeDefinition.values()[(data & (3 << 12)) >>> 12];  int stdByte=(data & (255 << 4)) >>> 4;  int beforeByte=(data & (3 << 2)) >>> 2;  int afterByte=(data & 3);  LocalTime time=(timeByte == 31 ? LocalTime.ofSecondOfDay(in.readInt()) : LocalTime.of(timeByte % 24,0));  ZoneOffset std=(stdByte == 255 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds((stdByte - 128) * 900));  ZoneOffset before=(beforeByte == 3 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + beforeByte * 1800));  ZoneOffset after=(afterByte == 3 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + afterByte * 1800));  return ZoneOffsetTransitionRule.of(month,dom,dow,time,timeByte == 24,defn,std,before,after);}  }
class C{  public static boolean isSupported(String name){  return protocolsByName.containsKey(name);}  }
class C{  private void processMessage(SIPMessage sipMessage,long rxTime){  SIPTransactionStack sipStack=processor.getSIPStack();  sipMessage.setRemoteAddress(this.peerAddress.getAddress());  sipMessage.setRemotePort(this.getPeerPort());  sipMessage.setLocalPort(this.getPort());  sipMessage.setLocalAddress(this.getMessageProcessor().getIpAddress());  if (sipMessage instanceof SIPRequest) {    SIPRequest sipRequest=(SIPRequest)sipMessage;    if (logger.isLoggingEnabled(ServerLogger.TRACE_MESSAGES)) {      sipStack.getServerLogger().logMessage(sipMessage,this.getPeerHostPort().toString(),this.getHost() + ":" + this.getPort(),false,rxTime);    }    ServerRequestInterface sipServerRequest=sipStack.newSIPServerRequest(sipRequest,this);    if (sipServerRequest == null) {      if (logger.isLoggingEnabled()) {        logger.logWarning("Null request interface returned -- dropping request");      }      return;    }    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("About to process " + sipRequest.getFirstLine() + "/"+ sipServerRequest);    }    try {      sipServerRequest.processRequest(sipRequest,this);    }  finally {      if (sipServerRequest instanceof SIPTransaction) {        SIPServerTransaction sipServerTx=(SIPServerTransaction)sipServerRequest;        if (!sipServerTx.passToListener()) {          ((SIPTransaction)sipServerRequest).releaseSem();        }      }    }    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Done processing " + sipRequest.getFirstLine() + "/"+ sipServerRequest);  } else {    SIPResponse sipResponse=(SIPResponse)sipMessage;    try {      sipResponse.checkHeaders();    } catch (    ParseException ex) {      if (logger.isLoggingEnabled())       logger.logError("Dropping Badly formatted response message >>> " + sipResponse);      return;    }    ServerResponseInterface sipServerResponse=sipStack.newSIPServerResponse(sipResponse,this);    if (sipServerResponse != null) {      try {        if (sipServerResponse instanceof SIPClientTransaction && !((SIPClientTransaction)sipServerResponse).checkFromTag(sipResponse)) {          if (logger.isLoggingEnabled())           logger.logError("Dropping response message with invalid tag >>> " + sipResponse);          return;        }        sipServerResponse.processResponse(sipResponse,this);      }  finally {        if (sipServerResponse instanceof SIPTransaction && !((SIPTransaction)sipServerResponse).passToListener())         ((SIPTransaction)sipServerResponse).releaseSem();      }    } else {      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {        logger.logDebug("null sipServerResponse!");      }    }  }}  }
class C{  public LineMessagingServiceBuilder writeTimeout(long writeTimeout){  this.writeTimeout=writeTimeout;  return this;}  }
class C{  @SuppressWarnings("unchecked") public synchronized <T>T[] toArray(T[] a){  if (a.length < elementCount)   return (T[])Arrays.copyOf(elementData,elementCount,a.getClass());  System.arraycopy(elementData,0,a,0,elementCount);  if (a.length > elementCount)   a[elementCount]=null;  return a;}  }
class C{  public void accept(final ClassVisitor cv){  String[] exceptions=new String[this.exceptions.size()];  this.exceptions.toArray(exceptions);  MethodVisitor mv=cv.visitMethod(access,name,desc,signature,exceptions);  if (mv != null) {    accept(mv);  }}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public boolean postSingleSignOnSuccess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,Object session,AuthnRequest authnRequest,Response ssoResponse,String profile,boolean isFederation) throws SAML2Exception {  try {    SSOToken ssoToken=(SSOToken)session;    String famSession=ssoToken.getTokenID().toString();    if (famSession == null) {      throw new SAML2Exception("No OpenSSO Session found");    }    ObResourceRequest orq=new ObResourceRequest(protocol,resource,action);    if (orq.isProtected()) {      ObAuthenticationScheme authScheme=new ObAuthenticationScheme(orq);      System.out.println("Authentication scheme is " + authScheme.getName());      Hashtable creds=new Hashtable();      creds.put("famsession",famSession);      ObUserSession userSession=new ObUserSession(orq,creds);      if (userSession.getStatus() == ObUserSession.LOGGEDIN) {        System.out.println("logged in principal: " + userSession.getUserIdentity());        String sessionid=userSession.getSessionToken();        System.out.println("User session: " + sessionid);        Cookie oamCookie=new Cookie(oamCookieName,sessionid);        oamCookie.setDomain(cookieDomain);        response.addCookie(oamCookie);      }    }    return false;  } catch (  Exception ex) {    ex.printStackTrace();    throw new SAML2Exception(ex.getMessage());  }}  }
class C{  ChildTestIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis);}  }
class C{  public NSDate(byte[] bytes,final int startIndex,final int endIndex){  date=new Date(EPOCH + (long)(1000 * BinaryPropertyListParser.parseDouble(bytes,startIndex,endIndex)));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypegetentitieslength.class,args);}  }
class C{  public static void removePolicyRules(SSOToken token,String serviceName) throws SSOException, AMException {  try {    AMStoreConnection dpStore=new AMStoreConnection(token);    PolicyManager pm=new PolicyManager(token);    String org=pm.getOrganizationDN();    AMOrganization rootOrg=(AMOrganization)dpStore.getOrganization(org);    String dn, policyName, ruleName;    DN rootDN;    DN tmpDN;    Set policyNames;    Policy p;    Rule rule, ruleDeleted;    Iterator iter, ruleItr, levelItr;    Map policyDNs=new HashMap();    Map levelDNs=new HashMap();    TreeMap sortedDNs;    rootDN=DN.valueOf(SMSEntry.getRootSuffix());    Map avPair=new HashMap();    Set value=new HashSet();    value.add("iPlanetAMPolicyConfigService");    avPair.put(AMConstants.SERVICE_STATUS_ATTRIBUTE,value);    Set subOrgs=null;    subOrgs=rootOrg.searchSubOrganizations("*",avPair,AMConstants.SCOPE_SUB);    for (Iterator iterOrg=subOrgs.iterator(); iterOrg.hasNext(); ) {      dn=(String)iterOrg.next();      PolicyManager pmSubOrg=new PolicyManager(token,dn);      policyNames=pmSubOrg.getPolicyNames();      iter=policyNames.iterator();      while (iter.hasNext()) {        policyName=(String)iter.next();        p=pmSubOrg.getPolicy(policyName);        if (!p.isReferralPolicy()) {          ruleItr=p.getRuleNames().iterator();          while (ruleItr.hasNext()) {            ruleName=(String)ruleItr.next();            rule=p.getRule(ruleName);            if ((rule.getServiceTypeName()).equalsIgnoreCase(serviceName)) {              if (PolicyManager.debug.messageEnabled()) {                debug.message("PolicyUtils.removePolicyRules():" + "policy: " + policyName + ",rule: "+ ruleName);              }              ruleDeleted=p.removeRule(ruleName);              if (ruleDeleted != null) {                pmSubOrg.replacePolicy(p);              }            }          }        } else {          if (policyDNs.containsKey(dn)) {            ((Vector)policyDNs.get(dn)).add(policyName);          } else {            Vector policies=new Vector();            policies.add(policyName);            policyDNs.put(dn,policies);          }          tmpDN=DN.valueOf(dn);          String levelDiff=String.valueOf(rootDN.size() - tmpDN.size());          if (levelDNs.containsKey(levelDiff)) {            ((Vector)levelDNs.get(levelDiff)).add(dn);          } else {            Vector DNs=new Vector();            DNs.add(dn);            levelDNs.put(levelDiff,DNs);          }        }      }    }    sortedDNs=new TreeMap(levelDNs);    levelItr=sortedDNs.keySet().iterator();    while (levelItr.hasNext()) {      String level=(String)levelItr.next();      Vector vDNs=(Vector)sortedDNs.get(level);      for (int i=0; i < vDNs.size(); i++) {        dn=(String)vDNs.get(i);        PolicyManager pmRefOrg=new PolicyManager(token,dn);        Vector vPolicies=(Vector)policyDNs.get(dn);        for (int j=0; j < vPolicies.size(); j++) {          policyName=(String)vPolicies.get(j);          p=pmRefOrg.getPolicy(policyName);          ruleItr=p.getRuleNames().iterator();          while (ruleItr.hasNext()) {            ruleName=(String)ruleItr.next();            rule=p.getRule(ruleName);            if ((rule.getServiceTypeName()).equalsIgnoreCase(serviceName)) {              if (debug.messageEnabled()) {                debug.message("PolicyUtils.removePolicyRules():" + "referral policy: " + policyName + ",rule: "+ ruleName);              }              ruleDeleted=p.removeRule(ruleName);              if (ruleDeleted != null) {                pmRefOrg.replacePolicy(p);              }            }          }        }      }    }  } catch (  PolicyException pe) {    debug.error("PolicyUtils.removePolicyRules():",pe);  }}  }
class C{  protected int AxisName() throws javax.xml.transform.TransformerException {  Object val=Keywords.getAxisName(m_token);  if (null == val) {    error(XPATHErrorResources.ER_ILLEGAL_AXIS_NAME,new Object[]{m_token});  }  int axesType=((Integer)val).intValue();  appendOp(2,axesType);  return axesType;}  }
class C{  public boolean hasRebuiltXref(){  return rebuiltXref;}  }
class C{  public static int size(final Iterable<?> iterable){  if (iterable instanceof Collection) {    return ((Collection<?>)iterable).size();  } else {    final Iterator<?> i=iterable.iterator();    int sz=0;    while (i.hasNext()) {      i.next();      sz++;    }    return sz;  }}  }
class C{  public boolean isOpaque(){  return opaque;}  }
class C{  public static PreReadResponseControl newControl(final Entry entry){  return new PreReadResponseControl(false,Entries.unmodifiableEntry(entry));}  }
class C{  private void removeIdRepo(String orgName){  orgName=DNUtils.normalizeDN(orgName);  Map idrepos=null;synchronized (idrepoPlugins) {    clearReadOnlyPlugins(orgName);    idrepos=(Map)idrepoPlugins.remove(orgName);  }  if (debug.messageEnabled()) {    debug.message("IdRepoPluginsCache.removeIdRepo for " + "OrgName: " + orgName + " Repo Names: "+ idrepos.keySet());  }  ShutdownIdRepoPlugin shutdownrepos=new ShutdownIdRepoPlugin(idrepos);  scheduler.schedule(shutdownrepos,500,TimeUnit.MILLISECONDS);}  }
class C{  public void signXML() throws SAMLException {  if (signed) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Response.signXML: the response is " + "already signed.");    }    throw new SAMLException(SAMLUtils.bundle.getString("alreadySigned"));  }  String certAlias=SystemConfigurationUtil.getProperty("com.sun.identity.saml.xmlsig.certalias");  if (certAlias == null) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Response.signXML: couldn't obtain " + "this site's cert alias.");    }    throw new SAMLResponderException(SAMLUtils.bundle.getString("cannotFindCertAlias"));  }  XMLSignatureManager manager=XMLSignatureManager.getInstance();  if ((majorVersion == 1) && (minorVersion == 0)) {    SAMLUtils.debug.message("Request.signXML: sign with version 1.0");    signatureString=manager.signXML(this.toString(true,true),certAlias);    signature=XMLUtils.toDOMDocument(signatureString,SAMLUtils.debug).getDocumentElement();  } else {    Document doc=XMLUtils.toDOMDocument(this.toString(true,true),SAMLUtils.debug);    signature=manager.signXML(doc,certAlias,null,RESPONSE_ID_ATTRIBUTE,getResponseID(),true,null);    signatureString=XMLUtils.print(signature);  }  signed=true;  xmlString=this.toString(true,true);}  }
class C{  public ClusterListener[] findClusterListeners(){  if (clusterListeners.size() > 0) {    ClusterListener[] listener=new ClusterListener[clusterListeners.size()];    clusterListeners.toArray(listener);    return listener;  } else   return new ClusterListener[0];}  }
class C{  public static StringArgument rootDNArgument() throws ArgumentException {  return StringArgument.builder(OPTION_LONG_ROOT_USER_DN).shortIdentifier(OPTION_SHORT_ROOT_USER_DN).description(INFO_ARGUMENT_DESCRIPTION_ROOTDN.get()).defaultValue("cn=Directory Manager").valuePlaceholder(INFO_ROOT_USER_DN_PLACEHOLDER.get()).buildArgument();}  }
class C{  private static void logStartRecord(Logger logger){  try {    LogMessageProviderBase provider=(LogMessageProviderBase)MessageProviderFactory.getProvider("Logging");    SSOToken ssot=LogManagerUtil.getLoggingSSOToken();    String location=lm.getProperty(LogConstants.LOG_LOCATION);    String[] s={location};    com.sun.identity.log.LogRecord lr=provider.createLogRecord(LogConstants.START_LOG_NEW_LOGGER_NAME,s,ssot);    logger.log(lr,ssot);  } catch (  IOException ioex) {    Debug.error("Logger.logStartRecord:could not log to " + logger.getName() + ":"+ ioex.getMessage());  }}  }
class C{  public static CustomTokenOperation fromSMSString(String smsString){  String[] tokens=smsString.split(REGEX_PIPE);  if (tokens.length != 2) {    throw new IllegalArgumentException("The sms string representation of the CustomTokenOperation must be of " + "format: custom_token_name|impl_class_mame. The sms string argument: " + smsString);  }  return new CustomTokenOperation(tokens[0],tokens[1]);}  }
class C{  public boolean isReverse(){  return true;}  }
class C{  protected Rectangle calculateAbsolutePdfBBox(){  Rectangle contentBox=getOccupiedAreaBBox();  List<Point> contentBoxPoints=rectangleToPointsList(contentBox);  AbstractRenderer renderer=this;  while (renderer.parent != null) {    if (renderer instanceof BlockRenderer) {      Float angle=renderer.<Float>getProperty(Property.ROTATION_ANGLE);      if (angle != null) {        BlockRenderer blockRenderer=(BlockRenderer)renderer;        AffineTransform rotationTransform=blockRenderer.createRotationTransformInsideOccupiedArea();        transformPoints(contentBoxPoints,rotationTransform);      }    }    renderer=(AbstractRenderer)renderer.parent;  }  return calculateBBox(contentBoxPoints);}  }
class C{  public int tabForCoordinate(JTabbedPane a,int b,int c){  int returnValue=((TabbedPaneUI)(uis.elementAt(0))).tabForCoordinate(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((TabbedPaneUI)(uis.elementAt(i))).tabForCoordinate(a,b,c);  }  return returnValue;}  }
class C{  public FrameBodyTBPM(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  @Override public int countByUUID_G(String uuid,long groupId){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID_G;  Object[] finderArgs=new Object[]{uuid,groupId};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(3);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_G_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_G_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_G_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_G_GROUPID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(groupId);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  private FHTreeStateNode createNodeForValue(Object value,int childIndex){  return new FHTreeStateNode(value,childIndex,-1);}  }
class C{  private BlockLogWriter(LogWriter writer,RecordParser<K,V> parser,int blockSize){  Reject.ifNull(writer,parser);  this.writer=writer;  this.parser=parser;  this.blockSize=blockSize;}  }
class C{  public CLIRequest(CLIRequest parent,String[] argv){  this.parent=parent;  this.argv=argv;}  }
class C{  public ProfileStack(StackTraceElement[] stackElements){  numFrames=stackElements.length;  classNames=new String[numFrames];  methodNames=new String[numFrames];  lineNumbers=new int[numFrames];  for (int i=0, j=numFrames - 1; i < numFrames; i++, j--) {    classNames[i]=stackElements[j].getClassName();    methodNames[i]=stackElements[j].getMethodName();    lineNumbers[i]=stackElements[j].getLineNumber();    if (lineNumbers[i] <= 0) {      if (stackElements[j].isNativeMethod()) {        lineNumbers[i]=LINE_NUMBER_NATIVE;      } else {        lineNumbers[i]=LINE_NUMBER_UNKNOWN;      }    }  }}  }
class C{  public ArgumentGroup(final LocalizableMessage description,final int priority){  this.description=description;  this.priority=priority;}  }
class C{  public void paintFileChooserBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public Group(List<ItemPinned> items,String label){  this.items=items;  if (this.items != null) {    for (int i=0; i < this.items.size(); i++) {      ItemPinned itemPinned=this.items.get(i);      initItemPosition(itemPinned,i);      if (this.items.get(i) instanceof TextItemPinned)       ((TextItemPinned)this.items.get(i)).setLabel(label);    }  }}  }
class C{  protected void fireCommentEvent(char[] chars,int start,int length) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_COMMENT,new String(chars,start,length));  }}  }
class C{  public synchronized void logout() throws XmlRpcFault {  try {    invoke("LogOut",token);  } catch (  XmlRpcFault e) {  } finally {    token=null;  }}  }
class C{  Vector putElemNumber(ElemNumber numberElem){  Vector counters=new Vector();  this.put(numberElem,counters);  return counters;}  }
class C{  public Position asPosition(){  return Position.fromCoordinates(center[0],center[1]);}  }
class C{  public SessionContextStatement(SessionContext sessionContext,ProxySubject proxySubject,Subject subject) throws SAMLException {  if ((sessionContext == null) || (subject == null)) {    SAMLUtils.debug.message("SessionContextStatement: " + "SessionContext is null!");    throw new SAMLRequesterException(SAMLUtils.bundle.getString("nullInput"));  }  _sessionContext=sessionContext;  _proxySubject=proxySubject;  this._subject=subject;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  protected int convertYToRow(int y0){  return convertLocationToRow(0,y0,false);}  }
class C{  private Future<Long> retrieveCounter(String key){  Future<Long> future=Future.future();  EventBusService.<CounterService>getProxy(discovery,new JsonObject().put("name","counter-eb-service"),null);  return future;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  IdType idType=convert2IdType(type);  String membershipType=getStringOptionValue(ARGUMENT_MEMBERSHIP_IDTYPE);  IdType membershipIdType=convert2IdType(membershipType);  String[] params={realm,type,idName,membershipType};  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    Set memberOfs=idType.canBeMemberOf();    if (!memberOfs.contains(membershipIdType)) {      String[] args={type,membershipType};      throw new CLIException(MessageFormat.format(getResourceString("idrepo-cannot-be-member"),(Object[])args),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IDREPO_GET_MEMBERSHIPS",params);    AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);    Set memberships=amid.getMemberships(membershipIdType);    if ((memberships != null) && !memberships.isEmpty()) {      String msg=getResourceString("idrepo-memberships-result");      String[] arg={"",""};      for (Iterator i=memberships.iterator(); i.hasNext(); ) {        AMIdentity a=(AMIdentity)i.next();        arg[0]=a.getName();        arg[1]=a.getUniversalId();        outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])arg));      }    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("idrepo-no-memberships"),(Object[])params));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IDREPO_GET_MEMBERSHIPS",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,membershipType,e.getMessage()};    debugError("GetMemberships.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_GET_MEMBERSHIPS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,membershipType,e.getMessage()};    debugError("GetMemberships.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_GET_MEMBERSHIPS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void addRow(final Object[] rowData){  addRow(convertToVector(rowData));}  }
class C{  protected void handleSESSION_ACCESSED(SessionMessage msg,Member sender) throws IOException {  counterReceive_EVT_SESSION_ACCESSED++;  DeltaSession session=(DeltaSession)findSession(msg.getSessionID());  if (session != null) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("deltaManager.receiveMessage.accessed",getName(),msg.getSessionID()));    }    session.access();    session.setPrimarySession(false);    session.endAccess();  }}  }
class C{  public PipedOutputStream(){}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.SecurityAuditElement createSecurityAuditElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecurityAuditElementImpl();}  }
class C{  protected void waitForAck() throws java.io.IOException {  try {    boolean ackReceived=false;    boolean failAckReceived=false;    ackbuf.clear();    int bytesRead=0;    int i=soIn.read();    while ((i != -1) && (bytesRead < Constants.ACK_COMMAND.length)) {      bytesRead++;      byte d=(byte)i;      ackbuf.append(d);      if (ackbuf.doesPackageExist()) {        byte[] ackcmd=ackbuf.extractDataPackage(true).getBytes();        ackReceived=Arrays.equals(ackcmd,org.apache.catalina.tribes.transport.Constants.ACK_DATA);        failAckReceived=Arrays.equals(ackcmd,org.apache.catalina.tribes.transport.Constants.FAIL_ACK_DATA);        ackReceived=ackReceived || failAckReceived;        break;      }      i=soIn.read();    }    if (!ackReceived) {      if (i == -1)       throw new IOException(sm.getString("bioSender.ack.eof",getAddress(),Integer.valueOf(socket.getLocalPort()))); else       throw new IOException(sm.getString("bioSender.ack.wrong",getAddress(),Integer.valueOf(socket.getLocalPort())));    } else     if (failAckReceived && getThrowOnFailedAck()) {      throw new RemoteProcessException(sm.getString("bioSender.fail.AckReceived"));    }  } catch (  IOException x) {    String errmsg=sm.getString("bioSender.ack.missing",getAddress(),Integer.valueOf(socket.getLocalPort()),Long.valueOf(getTimeout()));    if (SenderState.getSenderState(getDestination()).isReady()) {      SenderState.getSenderState(getDestination()).setSuspect();      if (log.isWarnEnabled())       log.warn(errmsg,x);    } else {      if (log.isDebugEnabled())       log.debug(errmsg,x);    }    throw x;  } finally {    ackbuf.clear();  }}  }
class C{  @SuppressWarnings("unchecked") private JsonValue correlateTarget(JsonValue sourceObjectOverride) throws SynchronizationException {  JsonValue result=null;  if (hasTargetObject()) {    result=json(array(getTargetObject()));  } else   if (correlation.hasCorrelation(getLinkQualifier()) && (correlateEmptyTargetSet || !hadEmptyTargetObjectSet())) {    EventEntry measure=Publisher.start(ObjectMapping.EVENT_CORRELATE_TARGET,getSourceObject(),null);    final JsonValue sourceObject=(sourceObjectOverride != null) ? sourceObjectOverride : getSourceObject();    if (sourceObject == null) {      throw new SynchronizationException("Source object " + getSourceObjectId() + " no longer exists");    }    Map<String,Object> scope=new HashMap<String,Object>();    scope.put("source",sourceObject.asMap());    try {      result=correlation.correlate(scope,getLinkQualifier(),getContext(),reconContext);    }  finally {      measure.end();    }  }  return result;}  }
class C{  public void testSubMapEntrySetSetValue(){  TreeMap<String,String> map=new TreeMap<String,String>();  map.put("A","a");  map.put("B","b");  map.put("C","c");  map.put("D","d");  NavigableMap<String,String> subMap=map.subMap("A",true,"C",true);  Iterator<Entry<String,String>> iterator=subMap.entrySet().iterator();  Entry<String,String> entryA=iterator.next();  assertEquals("a",entryA.setValue("x"));  assertEquals("x",entryA.getValue());  assertEquals("x",subMap.get("A"));  assertEquals("x",map.get("A"));  Entry<String,String> entryB=iterator.next();  assertEquals("b",entryB.setValue("y"));  Entry<String,String> entryC=iterator.next();  assertEquals("c",entryC.setValue("z"));  assertEquals("y",entryB.getValue());  assertEquals("y",subMap.get("B"));  assertEquals("y",map.get("B"));  assertEquals("z",entryC.getValue());  assertEquals("z",subMap.get("C"));  assertEquals("z",map.get("C"));}  }
class C{  public static String expand(Host host,URL war,String pathname) throws IOException {  JarURLConnection juc=(JarURLConnection)war.openConnection();  juc.setUseCaches(false);  URL jarFileUrl=juc.getJarFileURL();  URLConnection jfuc=jarFileUrl.openConnection();  boolean success=false;  File docBase=new File(host.getAppBaseFile(),pathname);  File warTracker=new File(host.getAppBaseFile(),pathname + Constants.WarTracker);  long warLastModified=-1;  try (InputStream is=jfuc.getInputStream()){    warLastModified=jfuc.getLastModified();  }   if (docBase.exists()) {    if (!warTracker.exists() || warTracker.lastModified() == warLastModified) {      success=true;      return (docBase.getAbsolutePath());    }    log.info(sm.getString("expandWar.deleteOld",docBase));    if (!delete(docBase)) {      throw new IOException(sm.getString("expandWar.deleteFailed",docBase));    }  }  if (!docBase.mkdir() && !docBase.isDirectory()) {    throw new IOException(sm.getString("expandWar.createFailed",docBase));  }  String canonicalDocBasePrefix=docBase.getCanonicalPath();  if (!canonicalDocBasePrefix.endsWith(File.separator)) {    canonicalDocBasePrefix+=File.separator;  }  File warTrackerParent=warTracker.getParentFile();  if (!warTrackerParent.isDirectory() && !warTrackerParent.mkdirs()) {    throw new IOException(sm.getString("expandWar.createFailed",warTrackerParent.getAbsolutePath()));  }  try (JarFile jarFile=juc.getJarFile()){    Enumeration<JarEntry> jarEntries=jarFile.entries();    while (jarEntries.hasMoreElements()) {      JarEntry jarEntry=jarEntries.nextElement();      String name=jarEntry.getName();      File expandedFile=new File(docBase,name);      if (!expandedFile.getCanonicalPath().startsWith(canonicalDocBasePrefix)) {        throw new IllegalArgumentException(sm.getString("expandWar.illegalPath",war,name,expandedFile.getCanonicalPath(),canonicalDocBasePrefix));      }      int last=name.lastIndexOf('/');      if (last >= 0) {        File parent=new File(docBase,name.substring(0,last));        if (!parent.mkdirs() && !parent.isDirectory()) {          throw new IOException(sm.getString("expandWar.createFailed",parent));        }      }      if (name.endsWith("/")) {        continue;      }      try (InputStream input=jarFile.getInputStream(jarEntry)){        if (null == input)         throw new ZipException(sm.getString("expandWar.missingJarEntry",jarEntry.getName()));        expand(input,expandedFile);        long lastModified=jarEntry.getTime();        if ((lastModified != -1) && (lastModified != 0)) {          expandedFile.setLastModified(lastModified);        }      }       warTracker.createNewFile();      warTracker.setLastModified(warLastModified);    }    success=true;  } catch (  IOException e) {    throw e;  } finally {    if (!success) {      deleteDir(docBase);    }  }  return docBase.getAbsolutePath();}  }
class C{  @DataProvider(name="ldapurls") public Object[][] createEncodingData(){  return new Object[][]{{"ldap://","ldap://",true},{"ldap:///","ldap:///",true},{"ldap://ldap.example.net","ldap://ldap.example.net",true},{"ldap://ldap.example.net/","ldap://ldap.example.net/",true},{"ldap://ldap.example.net/?","ldap://ldap.example.net/?",true},{"ldap:///o=University of Michigan,c=US","ldap:///o=University%20of%20Michigan,c=US",true},{"ldap://ldap1.example.net/o=University of Michigan,c=US","ldap://ldap1.example.net/o=University%20of%20Michigan,c=US",true},{"ldap://ldap1.example.net/o=University of Michigan,c=US?postalAddress","ldap://ldap1.example.net/o=University%20of%20Michigan,c=US?postalAddress",true},{"ldap://ldap1.example.net:6666/o=University of Michigan,c=US??sub?(cn=Babs Jensen)","ldap://ldap1.example.net:6666/o=University%20of%20Michigan,c=US??sub?(cn=Babs%20Jensen)",true},{"LDAP://ldap1.example.com/c=GB?objectClass?ONE","LDAP://ldap1.example.com/c=GB?objectClass?ONE",true},{"ldap://ldap3.example.com/o=Babsco,c=US???(four-octet=\00\00\00\04)","ldap://ldap3.example.com/o=Babsco,c=US???(four-octet=%5c00%5c00%5c00%5c04)",true},{"ldap://ldap.example.com/o=An Example\\2C Inc.,c=US","ldap://ldap.example.com/o=An%20Example%5C2C%20Inc.,c=US",true},{"ldap:///","ldap:///",true},{"ldap:///","ldap:///",true},{"ldap:///","ldap:///",true}};}  }
class C{  private void mergeServers(ADSContext adsCtx) throws ADSContextException {  for (  Map<ServerProperty,Object> server2 : adsCtx.readServerRegistry()) {    if (!isServerAlreadyRegistered(server2)) {      registerServer(server2);    }  }}  }
class C{  public void store(){  try {    amIdentity.store();  } catch (  IdRepoException e) {    LOGGER.warn("Exception persisting attribute",e);  }catch (  SSOException e) {    LOGGER.warn("Exception persisting attribute",e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeelementnodeattributes.class,args);}  }
class C{  public int size(){  return al.size();}  }
class C{  @Override public int countByUuid(String uuid){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID;  Object[] finderArgs=new Object[]{uuid};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(2);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_UUID_2);    }    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public SecurityAssertion(String assertionID,java.lang.String issuer,Date issueInstant,Conditions conditions,Advice advice,Set statements) throws SAMLException {  super(assertionID,issuer,issueInstant,conditions,advice,statements);}  }
class C{  public ID3v23Frame(ByteBuffer byteBuffer) throws InvalidFrameException, InvalidDataTypeException {  this(byteBuffer,"");}  }
class C{  public boolean is_parallel(PlaLineInt p_other){  return direction().side_of(p_other.direction()) == PlaSide.COLLINEAR;}  }
class C{  public void paintTabbedPaneTabBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static void addSubSchema(String serviceName,String subSchema,String schemaType,String fileName) throws UpgradeException {  String classMethod="UpgradeUtils:addSubSchema : ";  if (debug.messageEnabled()) {    debug.message(classMethod + "Adding subschema: " + fileName+ " for service: "+ serviceName);  }  try {    ServiceSchema ss=getServiceSchema(serviceName,subSchema,schemaType);    ss.addSubSchema(new FileInputStream(fileName));  } catch (  IOException ioe) {    throw new UpgradeException("Error reading schema file ");  }catch (  SSOException ssoe) {    throw new UpgradeException("invalid sso token");  }catch (  SMSException ssoe) {    throw new UpgradeException("error creating subschema");  }}  }
class C{  public NoSuchFieldError(){  super();}  }
class C{  public void purge(String domainName,int graceperiod) throws AMException, SSOException {  String orgDN;  Set orgSet;  boolean deleted=false;  if (AMDCTree.isRequired()) {    orgDN=AMDCTree.getOrganizationDN(token,domainName);    orgSet=new HashSet();    orgSet.add(orgDN);  } else {    String filter=AMCompliance.getDeletedObjectFilter(AMObject.ORGANIZATION);    filter=AMObjectImpl.constructFilter(AMNamingAttrManager.getNamingAttr(AMObject.ORGANIZATION),filter,domainName);    if (AMCommonUtils.debug.messageEnabled()) {      AMCommonUtils.debug.message("AMStoreConnection.purgeOrg: " + "Using org filter= " + filter);    }    orgSet=dsServices.search(token,rootSuffix,filter,SCOPE_SUB);    if ((orgSet == null) || orgSet.isEmpty()) {      orgSet=getOrganizations(domainName,null);      deleted=false;    } else {      deleted=true;    }  }  if (orgSet == null || orgSet.isEmpty()) {    return;  }  Iterator delIter=orgSet.iterator();  while (delIter.hasNext()) {    orgDN=(String)delIter.next();    if (AMCommonUtils.debug.messageEnabled()) {      AMCommonUtils.debug.message("AMStoreConnection.purge: " + "Organization= " + orgDN);    }    AMOrganization org=getOrganization(orgDN);    if (deleted && graceperiod < daysSinceModified(token,orgDN)) {      org.purge(true,-1);    } else {      String filter=AMCompliance.getDeletedObjectFilter(-1);      if (AMCommonUtils.debug.messageEnabled()) {        AMCommonUtils.debug.message("AMStoreConnection.purge: " + "Searching deleted objects. Filter: " + filter);      }      Set deletedObjs=dsServices.search(token,orgDN,filter,SCOPE_SUB);      if (deletedObjs == null) {        if (AMCommonUtils.debug.messageEnabled()) {          AMCommonUtils.debug.message("AMStoreConnection.purge: " + "No objects to be deleted found for " + orgDN);        }      }      Iterator iter=deletedObjs.iterator();      List list=new ArrayList();      int entryRDNs=DN.valueOf(orgDN).size();      int maxRDNCount=entryRDNs;      while (iter.hasNext()) {        String thisDN=(String)iter.next();        DN dn=DN.valueOf(thisDN);        int count=dn.size();        if (count > maxRDNCount) {          maxRDNCount=count;        }        list.add(dn);      }      int len=list.size();      for (int i=maxRDNCount; i >= entryRDNs; i--) {        for (int j=0; j < len; j++) {          DN thisdn=(DN)list.get(j);          if (thisdn.size() == i) {            String thisDN=thisdn.toString();            int objType=getAMObjectType(thisDN);            AMObject thisObj;            if (AMCommonUtils.debug.messageEnabled()) {              AMCommonUtils.debug.message("AMStoreConnection:purgeOrg: " + "deleting child " + thisDN);            }            try {switch (objType) {case AMObject.USER:                thisObj=getUser(thisDN);              thisObj.purge(false,graceperiod);            break;case AMObject.ASSIGNABLE_DYNAMIC_GROUP:          thisObj=getAssignableDynamicGroup(thisDN);        thisObj.purge(false,graceperiod);      break;case AMObject.DYNAMIC_GROUP:    thisObj=getDynamicGroup(thisDN);  thisObj.purge(false,graceperiod);break;case AMObject.STATIC_GROUP:case AMObject.GROUP:thisObj=getStaticGroup(thisDN);thisObj.purge(false,graceperiod);break;case AMObject.RESOURCE:thisObj=getResource(thisDN);thisObj.purge(false,-1);break;case AMObject.ORGANIZATION:thisObj=getOrganization(thisDN);if (!DN.valueOf(thisDN).equals(DN.valueOf(orgDN))) {thisObj.purge(true,graceperiod);}break;default :break;}} catch (AMPreCallBackException amp) {AMCommonUtils.debug.error("AMStoreConnection.purge: " + "Aborting delete of: " + thisDN + " due to pre-callback exception",amp);}}}}}}return;}  }
class C{  protected void writeXrefTableAndTrailer(PdfDocument document,PdfObject fileId,PdfObject crypto) throws IOException {  PdfWriter writer=document.getWriter();  if (document.isAppendMode()) {    for (    Integer objNr : freeReferences) {      xref[(int)objNr].genNr++;    }  } else {    for (    Integer objNr : freeReferences) {      xref[(int)objNr]=null;    }  }  freeReferences.clear();  for (int i=count; i > 0; --i) {    PdfIndirectReference lastRef=xref[i];    if (lastRef == null || (lastRef.isFree() && lastRef.getGenNumber() == 0) || (!lastRef.checkState(PdfObject.FLUSHED) && !(document.properties.appendMode && !lastRef.checkState(PdfObject.MODIFIED)))) {      --count;    } else {      break;    }  }  List<Integer> sections=new ArrayList<>();  int first=0;  int len=1;  if (document.isAppendMode()) {    first=1;    len=0;  }  for (int i=1; i < size(); i++) {    PdfIndirectReference reference=xref[i];    if (reference != null) {      if ((document.properties.appendMode && !reference.checkState(PdfObject.MODIFIED)) || (reference.isFree() && reference.getGenNumber() == 0) || (!reference.checkState(PdfObject.FLUSHED))) {        reference=null;      }    }    if (reference == null) {      if (len > 0) {        sections.add(first);        sections.add(len);      }      len=0;    } else {      if (len > 0) {        len++;      } else {        first=i;        len=1;      }    }  }  if (len > 0) {    sections.add(first);    sections.add(len);  }  if (document.properties.appendMode && sections.size() == 0) {    xref=null;    return;  }  long startxref=writer.getCurrentPos();  if (writer.isFullCompression()) {    PdfStream xrefStream=new PdfStream().makeIndirect(document);    xrefStream.makeIndirect(document);    xrefStream.put(PdfName.Type,PdfName.XRef);    xrefStream.put(PdfName.ID,fileId);    if (crypto != null)     xrefStream.put(PdfName.Encrypt,crypto);    xrefStream.put(PdfName.Size,new PdfNumber(this.size()));    ArrayList<PdfObject> tmpArray=new ArrayList<PdfObject>(3);    tmpArray.add(new PdfNumber(1));    tmpArray.add(new PdfNumber(4));    tmpArray.add(new PdfNumber(2));    xrefStream.put(PdfName.W,new PdfArray(tmpArray));    xrefStream.put(PdfName.Info,document.getDocumentInfo().getPdfObject());    xrefStream.put(PdfName.Root,document.getCatalog().getPdfObject());    PdfArray index=new PdfArray();    for (    Integer section : sections) {      index.add(new PdfNumber((int)section));    }    if (document.properties.appendMode) {      PdfNumber lastXref=new PdfNumber(document.reader.getLastXref());      xrefStream.put(PdfName.Prev,lastXref);    }    xrefStream.put(PdfName.Index,index);    PdfXrefTable xrefTable=document.getXref();    for (int k=0; k < sections.size(); k+=2) {      first=(int)sections.get(k);      len=(int)sections.get(k + 1);      for (int i=first; i < first + len; i++) {        PdfIndirectReference reference=xrefTable.get(i);        if (reference == null) {          continue;        }        if (reference.isFree()) {          xrefStream.getOutputStream().write(0);          xrefStream.getOutputStream().write(intToBytes(0));          xrefStream.getOutputStream().write(shortToBytes(reference.getGenNumber()));        } else         if (reference.getObjStreamNumber() == 0) {          xrefStream.getOutputStream().write(1);          assert reference.getOffset() < Integer.MAX_VALUE;          xrefStream.getOutputStream().write(intToBytes((int)reference.getOffset()));          xrefStream.getOutputStream().write(shortToBytes(reference.getGenNumber()));        } else {          xrefStream.getOutputStream().write(2);          xrefStream.getOutputStream().write(intToBytes(reference.getObjStreamNumber()));          xrefStream.getOutputStream().write(shortToBytes(reference.getIndex()));        }      }    }    xrefStream.flush();  } else {    writer.writeString("xref\n");    PdfXrefTable xrefTable=document.getXref();    for (int k=0; k < sections.size(); k+=2) {      first=(int)sections.get(k);      len=(int)sections.get(k + 1);      writer.writeInteger(first).writeSpace().writeInteger(len).writeByte((byte)'\n');      for (int i=first; i < first + len; i++) {        PdfIndirectReference reference=xrefTable.get(i);        StringBuilder off=new StringBuilder("0000000000").append(reference.getOffset());        StringBuilder gen=new StringBuilder("00000").append(reference.getGenNumber());        writer.writeString(off.substring(off.length() - 10,off.length())).writeSpace().writeString(gen.substring(gen.length() - 5,gen.length())).writeSpace();        if (reference.isFree()) {          writer.writeBytes(freeXRefEntry);        } else {          writer.writeBytes(inUseXRefEntry);        }      }    }    PdfDictionary trailer=document.getTrailer();    trailer.remove(PdfName.W);    trailer.remove(PdfName.Index);    trailer.remove(PdfName.Type);    trailer.remove(PdfName.Length);    trailer.put(PdfName.Size,new PdfNumber(this.size()));    trailer.put(PdfName.ID,fileId);    if (crypto != null)     trailer.put(PdfName.Encrypt,crypto);    writer.writeString("trailer\n");    if (document.properties.appendMode) {      PdfNumber lastXref=new PdfNumber(document.reader.getLastXref());      trailer.put(PdfName.Prev,lastXref);    }    writer.write(document.getTrailer());    writer.write('\n');  }  writeKeyInfo(writer);  writer.writeString("startxref\n").writeLong(startxref).writeString("\n%%EOF\n");  xref=null;}  }
class C{  public void addCallMethod(String pattern,String methodName){  addRule(pattern,new CallMethodRule(methodName));}  }
class C{  private static XPathFactory newInstanceNoServiceLoader(Class<?> providerClass) throws XPathFactoryConfigurationException {  if (System.getSecurityManager() == null) {    return null;  }  try {    Method creationMethod=providerClass.getDeclaredMethod("newXPathFactoryNoServiceLoader");    final int modifiers=creationMethod.getModifiers();    if (!Modifier.isStatic(modifiers) || !Modifier.isPublic(modifiers)) {      return null;    }    final Class<?> returnType=creationMethod.getReturnType();    if (SERVICE_CLASS.isAssignableFrom(returnType)) {      return SERVICE_CLASS.cast(creationMethod.invoke(null,(Object[])null));    } else {      throw new ClassCastException(returnType + " cannot be cast to " + SERVICE_CLASS);    }  } catch (  ClassCastException e) {    throw new XPathFactoryConfigurationException(e);  }catch (  NoSuchMethodException exc) {    return null;  }catch (  Exception exc) {    return null;  }}  }
class C{  protected Object clone() throws CloneNotSupportedException {  AbstractAction newAction=(AbstractAction)super.clone();synchronized (this) {    if (arrayTable != null) {      newAction.arrayTable=(ArrayTable)arrayTable.clone();    }  }  return newAction;}  }
class C{  @KnownFailure("It's not allowed to pass null as parent class loader to" + " a new ClassLoader anymore. Maybe we need to change" + " URLClassLoader to allow this? It's not specified.") public void test_getBundleLjava_lang_StringLjava_util_LocaleLjava_lang_ClassLoader(){  String classPath=System.getProperty("java.class.path");  StringTokenizer tok=new StringTokenizer(classPath,File.pathSeparator);  Vector<URL> urlVec=new Vector<URL>();  String resPackage=Support_Resources.RESOURCE_PACKAGE;  try {    while (tok.hasMoreTokens()) {      String path=tok.nextToken();      String url;      if (new File(path).isDirectory())       url="file:" + path + resPackage+ "subfolder/"; else       url="jar:file:" + path + "!"+ resPackage+ "subfolder/";      urlVec.addElement(new URL(url));    }  } catch (  MalformedURLException e) {  }  URL[] urls=new URL[urlVec.size()];  for (int i=0; i < urlVec.size(); i++)   urls[i]=urlVec.elementAt(i);  URLClassLoader loader=new URLClassLoader(urls,null);  String name=Support_Resources.RESOURCE_PACKAGE_NAME + ".hyts_resource";  ResourceBundle bundle=ResourceBundle.getBundle(name,Locale.getDefault());  assertEquals("Wrong value read","parent",bundle.getString("property"));  bundle=ResourceBundle.getBundle(name,Locale.getDefault(),loader);  assertEquals("Wrong cached value","resource",bundle.getString("property"));  try {    ResourceBundle.getBundle(null,Locale.getDefault(),loader);    fail("NullPointerException expected");  } catch (  NullPointerException ee) {  }  try {    ResourceBundle.getBundle(name,null,loader);    fail("NullPointerException expected");  } catch (  NullPointerException ee) {  }  try {    ResourceBundle.getBundle(name,Locale.getDefault(),(ClassLoader)null);    fail("NullPointerException expected");  } catch (  NullPointerException ee) {  }  try {    ResourceBundle.getBundle("",Locale.getDefault(),loader);    fail("MissingResourceException expected");  } catch (  MissingResourceException ee) {  }  B bb=new B();  String s=bb.find("nonexistent");  s=bb.find("name");  assertEquals("Wrong property got","Name",s);}  }
class C{  @Override protected void onDialogClosed(boolean positiveResult){  super.onDialogClosed(positiveResult);  if (positiveResult && mAutoCompleteEditText != null) {    String value=mAutoCompleteEditText.getText().toString();    if (callChangeListener(value)) {      setText(value);    }  }}  }
class C{  static <T>Promise<T> blockingPromise(final Duration duration){  return new BlockingPromise<>(duration);}  }
class C{  public boolean await(Date deadline) throws InterruptedException {  if (this.waiter != null) {    throw new IllegalStateException("A thread is already waiting on this object." + "\ncaller: " + Thread.currentThread() + "\nwaiter: "+ this.waiter);  }  if (aborted)   throw new InterruptedException("Operation interrupted");  this.waiter=Thread.currentThread();  boolean success=false;  try {    if (deadline != null) {      success=this.cond.awaitUntil(deadline);    } else {      this.cond.await();      success=true;    }    if (aborted)     throw new InterruptedException("Operation interrupted");  }  finally {    this.waiter=null;  }  return success;}  }
class C{  @Override public final void run(){  setResultCode(ResultCode.UNDEFINED);  setProcessingStartTime();  logExtendedRequest(this);  try {    checkIfCanceled(false);    if (!processOperationResult(getPluginConfigManager().invokePreParseExtendedPlugins(this))) {      return;    }    checkIfCanceled(false);    ExtendedOperationHandler<?> handler=DirectoryServer.getExtendedOperationHandler(requestOID);    if (handler == null) {      setResultCode(ResultCode.UNWILLING_TO_PERFORM);      appendErrorMessage(ERR_EXTENDED_NO_HANDLER.get(requestOID));      return;    }    for (Iterator<Control> iter=getRequestControls().iterator(); iter.hasNext(); ) {      final Control c=iter.next();      try {        if (!getAccessControlHandler().isAllowed(getAuthorizationDN(),this,c)) {          if (c.isCritical()) {            setResultCode(ResultCode.UNAVAILABLE_CRITICAL_EXTENSION);            appendErrorMessage(ERR_CONTROL_INSUFFICIENT_ACCESS_RIGHTS.get(c.getOID()));          } else {            iter.remove();            continue;          }        }      } catch (      DirectoryException e) {        setResultCode(e.getResultCode());        appendErrorMessage(e.getMessageObject());        return;      }      if (!c.isCritical()) {      } else       if (!handler.supportsControl(c.getOID())) {        setResultCode(ResultCode.UNAVAILABLE_CRITICAL_EXTENSION);        appendErrorMessage(ERR_EXTENDED_UNSUPPORTED_CRITICAL_CONTROL.get(requestOID,c.getOID()));        return;      }    }    try {      if (!getAccessControlHandler().isAllowed(this)) {        setResultCode(ResultCode.INSUFFICIENT_ACCESS_RIGHTS);        appendErrorMessage(ERR_EXTENDED_AUTHZ_INSUFFICIENT_ACCESS_RIGHTS.get(requestOID));        return;      }    } catch (    DirectoryException e) {      setResultCode(e.getResultCode());      appendErrorMessage(e.getMessageObject());      return;    }    try {      if (!processOperationResult(getPluginConfigManager().invokePreOperationExtendedPlugins(this))) {        return;      }      checkIfCanceled(false);      handler.processExtendedOperation(this);    }  finally {      getPluginConfigManager().invokePostOperationExtendedPlugins(this);    }  } catch (  CanceledOperationException coe) {    logger.traceException(coe);    setResultCode(ResultCode.CANCELLED);    cancelResult=new CancelResult(ResultCode.CANCELLED,null);    appendErrorMessage(coe.getCancelRequest().getCancelReason());  } finally {    setProcessingStopTime();    logExtendedResponse(this);    if (cancelRequest == null || cancelResult == null || cancelResult.getResultCode() != ResultCode.CANCELLED || cancelRequest.notifyOriginalRequestor() || DirectoryServer.notifyAbandonedOperations()) {      clientConnection.sendResponse(this);    }    if (requestOID.equals(OID_START_TLS_REQUEST)) {      clientConnection.finishStartTLS();    }    getPluginConfigManager().invokePostResponseExtendedPlugins(this);    if (cancelResult == null) {      cancelResult=new CancelResult(ResultCode.TOO_LATE,null);    }  }}  }
class C{  public WindowMsg(int numAck){  this.numAck=numAck;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Node newNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(2);  newAttribute=doc.createAttribute("district");  attributes=testAddress.getAttributes();  newNode=attributes.setNamedItem(newAttribute);  assertNull("returnedNodeNull",newNode);}  }
class C{  public static String verifyNameIDFormat(String nameIDFormat,SPSSODescriptorElement spsso,IDPSSODescriptorElement idpsso) throws SAML2Exception {  List spNameIDFormatList=spsso.getNameIDFormat();  List idpNameIDFormatList=null;  if (idpsso != null) {    idpNameIDFormatList=idpsso.getNameIDFormat();  }  if ((nameIDFormat == null) || (nameIDFormat.length() == 0)) {    if ((idpNameIDFormatList == null) || (idpNameIDFormatList.isEmpty())) {      if ((spNameIDFormatList == null) || (spNameIDFormatList.isEmpty())) {        return SAML2Constants.PERSISTENT;      } else {        return (String)spNameIDFormatList.get(0);      }    } else {      if ((spNameIDFormatList == null) || (spNameIDFormatList.isEmpty())) {        return (String)idpNameIDFormatList.get(0);      } else {        nameIDFormat=null;        for (Iterator iter=spNameIDFormatList.iterator(); iter.hasNext(); ) {          String spNameIDFormat=(String)iter.next();          if (idpNameIDFormatList.contains(spNameIDFormat)) {            nameIDFormat=spNameIDFormat;            break;          }        }        if (nameIDFormat == null) {          throw new SAML2Exception(bundle.getString("unsupportedNameIDFormatIDPSP"));        }      }    }  } else {    if (nameIDFormat.equals("persistent") || nameIDFormat.equals("transient")) {      nameIDFormat=SAML2Constants.NAMEID_FORMAT_NAMESPACE + nameIDFormat;    }    if ((spNameIDFormatList != null) && (!spNameIDFormatList.isEmpty()) && (!spNameIDFormatList.contains(nameIDFormat))) {      if (debug.messageEnabled()) {        debug.message("SAML2Utils.verifyNameIDFormat: " + "NameIDFormat not supported by SP: " + nameIDFormat);      }      Object[] args={nameIDFormat};      throw new SAML2Exception(BUNDLE_NAME,"unsupportedNameIDFormatSP",args);    }    if ((idpNameIDFormatList != null) && (!idpNameIDFormatList.isEmpty()) && (!idpNameIDFormatList.contains(nameIDFormat))) {      if (debug.messageEnabled()) {        debug.message("SAML2Utils.verifyNameIDFormat: " + "NameIDFormat not supported by IDP: " + nameIDFormat);      }      Object[] args={nameIDFormat};      throw new SAML2Exception(BUNDLE_NAME,"unsupportedNameIDFormatIDP",args);    }  }  return nameIDFormat;}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  realm=getStringOptionValue(FedCLIConstants.ARGUMENT_REALM,"/");  cot=getStringOptionValue(FedCLIConstants.ARGUMENT_COT);  IOutput outputWriter=getOutputWriter();  spec=FederationManager.getIDFFSubCommandSpecification(rc);  String[] params={realm,cot,spec};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_COT_MEMBERS",params);  try {    CircleOfTrustManager cotManager=new CircleOfTrustManager(ssoToken);    Set circleOfTrusts=cotManager.getAllCirclesOfTrust(realm);    if (!circleOfTrusts.contains(cot)) {      Object[] obj={cot};      String[] args={realm,cot,spec,MessageFormat.format(getResourceString("list-circle-of-trust-members-cot-does-not-exists"),obj)};      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_COT_MEMBERS",args);      throw new CLIException(MessageFormat.format(getResourceString("list-circle-of-trust-members-cot-does-not-exists"),obj),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    Set members=cotManager.listCircleOfTrustMember(realm,cot,spec);    if ((members == null) || members.isEmpty()) {      Object[] obj={cot};      outputWriter.printlnMessage(MessageFormat.format(getResourceString("list-circle-of-trust-members-no-members"),obj));    } else {      Object[] obj={cot};      outputWriter.printlnMessage(MessageFormat.format(getResourceString("list-circle-of-trust-members-members"),obj));      for (Iterator i=members.iterator(); i.hasNext(); ) {        String entityId=(String)i.next();        outputWriter.printlnMessage("  " + entityId);      }    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_LIST_COT_MEMBERS",params);  } catch (  COTException e) {    debugWarning("ListCircleOfTrustMembers.handleRequest",e);    String[] args={realm,cot,spec,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_COT_MEMBERS",args);    throw new CLIException(e.getMessage(),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  protected AbstractChronology(){}  }
class C{  static ReplayPromise<Void> replayPromiseNotify(final Duration timeout,final long time){  return new ReplayPromiseImpl<>(timeout,time);}  }
class C{  public static String writeFollowers(String result){  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(GithubWidgetApplication.getAppContext()).edit();  JSONObject jsonObject=null;  try {    jsonObject=new JSONObject(result);    int lastFollowers=SettingsManager.getFollowers();    long lastUpdateFollowersTime=SettingsManager.getLastUpdateFollowersTime();    int nowFollowers=jsonObject.getInt("followers");    if (lastUpdateFollowersTime == -1 || lastFollowers == -1) {      SettingsManager.setFollowers(nowFollowers);      SettingsManager.setLastUpdateFollowersTime(Calendar.getInstance().getTime().getTime());      return nowFollowers + "";    } else {      int diff=0;      if (lastFollowers != -1)       diff=nowFollowers - lastFollowers;      if (diff > 0) {        return shortNumber(nowFollowers) + "+" + diff;      } else       if (diff < 0) {        return shortNumber(nowFollowers) + "-" + (-diff);      } else {        return shortNumber(nowFollowers) + "";      }    }  } catch (  JSONException e) {    e.printStackTrace();    int lastFollowers=SettingsManager.getFollowers();    if (lastFollowers != -1)     return shortNumber(lastFollowers) + ""; else     return "";  } finally {    editor.commit();  }}  }
class C{  public URL toURL() throws MalformedURLException {  if (!absolute) {    throw new IllegalArgumentException("URI is not absolute: " + toString());  }  return new URL(toString());}  }
class C{  public PdfPage removeAnnotation(PdfAnnotation annotation){  PdfArray annots=getAnnots(false);  if (annots != null) {    if (annots.contains(annotation.getPdfObject())) {      annots.remove(annotation.getPdfObject());    } else {      annots.remove(annotation.getPdfObject().getIndirectReference());    }    if (annots.isEmpty()) {      getPdfObject().remove(PdfName.Annots);    }  }  if (getDocument().isTagged()) {    TagTreePointer tagPointer=getDocument().getTagStructureContext().removeAnnotationTag(annotation);    if (tagPointer != null) {      boolean standardAnnotTagRole=tagPointer.getRole().equals(PdfName.Annot) || tagPointer.getRole().equals(PdfName.Form);      if (tagPointer.getKidsRoles().size() == 0 && standardAnnotTagRole) {        tagPointer.removeTag();      }    }  }  return this;}  }
class C{  @Override public long skip(long numberOfChars) throws IOException {  if (eof) {    throw new IOException("Skip after end of file");  }  if (position == size) {    return doEndOfFile();  }  position+=numberOfChars;  long returnLength=numberOfChars;  if (position > size) {    returnLength=numberOfChars - (position - size);    position=size;  }  return returnLength;}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    logger.info("shootme:  dialog = " + requestEvent.getDialog());    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    Response response=messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);    }    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    this.byeSeen=true;  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public boolean isValid(Object session) throws SessionException {  debug.message("FedletSessionProvider.isValid called");  return false;}  }
class C{  private Descriptor validDescriptor(final Descriptor in) throws RuntimeOperationsException {  Descriptor clone;  boolean defaulted=(in == null);  if (defaulted) {    clone=new DescriptorSupport();    MODELMBEAN_LOGGER.finer("Null Descriptor, creating new.");  } else {    clone=(Descriptor)in.clone();  }  if (defaulted && clone.getFieldValue("name") == null) {    clone.setField("name",this.getName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor name to " + this.getName());  }  if (defaulted && clone.getFieldValue("descriptorType") == null) {    clone.setField("descriptorType","attribute");    MODELMBEAN_LOGGER.finer("Defaulting descriptorType to \"attribute\"");  }  if (clone.getFieldValue("displayName") == null) {    clone.setField("displayName",this.getName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor displayName to " + this.getName());  }  if (!clone.isValid()) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The isValid() method of the Descriptor object itself returned false," + "one or more required fields are invalid. Descriptor:" + clone.toString());  }  if (!getName().equalsIgnoreCase((String)clone.getFieldValue("name"))) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"name\" field does not match the object described. " + " Expected: " + this.getName() + " , was: "+ clone.getFieldValue("name"));  }  if (!"attribute".equalsIgnoreCase((String)clone.getFieldValue("descriptorType"))) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"descriptorType\" field does not match the object described. " + " Expected: \"attribute\" ," + " was: "+ clone.getFieldValue("descriptorType"));  }  return clone;}  }
class C{  void updateLabelsForNewResourceSet(ResourceSetDescription resourceSet){  JsonValue labels=resourceSet.getDescription().get(OAuth2Constants.ResourceSets.LABELS);  if (!labels.isNull() && labels.size() > 0) {    updateLabels(resourceSet,labels.asCollection(String.class),Collections.<String>emptySet());  }}  }
class C{  private boolean breakKeepAliveLoop(SocketWrapperBase<?> socketWrapper){  openSocket=keepAlive;  if (sendfileData != null && !getErrorState().isError()) {    sendfileData.keepAlive=keepAlive;switch (socketWrapper.processSendfile(sendfileData)) {case DONE:      sendfileData=null;    return false;case PENDING:  return true;case ERROR:if (log.isDebugEnabled()) {  log.debug(sm.getString("http11processor.sendfile.error"));}setErrorState(ErrorState.CLOSE_CONNECTION_NOW,null);return true;}}return false;}  }
class C{  public static void deleteEntry(DN dn) throws Exception {  DeleteOperation deleteOperation=getRootConnection().processDelete(dn);  assertEquals(deleteOperation.getResultCode(),ResultCode.SUCCESS);}  }
class C{  public static boolean hasIndexedFieldChanged(BSONObject oldObject,Index index,Document entity){  BSONObject newObject=entity.getObject();  for (  IndexField indexField : index.getFields()) {    String field=indexField.getField();    if (newObject.get(field) == null && oldObject.get(field) == null) {      return false;    } else     if (newObject.get(field) == null || oldObject.get(field) == null) {      return true;    }    if (!newObject.get(field).equals(oldObject.get(field))) {      return true;    }  }  return false;}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.InteractionRequestType createInteractionRequestType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.InteractionRequestTypeImpl();}  }
class C{  @SuppressWarnings("unchecked") @Override public Object clone(){  HashMap<K,V> result;  try {    result=(HashMap<K,V>)super.clone();  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }  result.makeTable(table.length);  result.entryForNullKey=null;  result.size=0;  result.keySet=null;  result.entrySet=null;  result.values=null;  result.init();  result.constructorPutAll(this);  return result;}  }
class C{  public IndirectionException(int offset){  super("",0,org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);  this.offset=offset;}  }
class C{  public boolean containsValue(Object value){  return map.containsValue(value);}  }
class C{  private XSDateTimeValidator(){}  }
class C{  private static String decodeWord(String word) throws ParseException, UnsupportedEncodingException {  if (!word.startsWith(ENCODED_TOKEN_MARKER)) {    throw new ParseException("Invalid RFC 2047 encoded-word: " + word);  }  int charsetPos=word.indexOf('?',2);  if (charsetPos == -1) {    throw new ParseException("Missing charset in RFC 2047 encoded-word: " + word);  }  String charset=word.substring(2,charsetPos).toLowerCase(Locale.ENGLISH);  int encodingPos=word.indexOf('?',charsetPos + 1);  if (encodingPos == -1) {    throw new ParseException("Missing encoding in RFC 2047 encoded-word: " + word);  }  String encoding=word.substring(charsetPos + 1,encodingPos);  int encodedTextPos=word.indexOf(ENCODED_TOKEN_FINISHER,encodingPos + 1);  if (encodedTextPos == -1) {    throw new ParseException("Missing encoded text in RFC 2047 encoded-word: " + word);  }  String encodedText=word.substring(encodingPos + 1,encodedTextPos);  if (encodedText.length() == 0) {    return "";  }  try {    ByteArrayOutputStream out=new ByteArrayOutputStream(encodedText.length());    byte[] decodedData;    if (encoding.equals(BASE64_ENCODING_MARKER)) {      decodedData=Base64.decodeBase64(encodedText);    } else     if (encoding.equals(QUOTEDPRINTABLE_ENCODING_MARKER)) {      byte[] encodedData=encodedText.getBytes(US_ASCII_CHARSET);      QuotedPrintableDecoder.decode(encodedData,out);      decodedData=out.toByteArray();    } else {      throw new UnsupportedEncodingException("Unknown RFC 2047 encoding: " + encoding);    }    return new String(decodedData,javaCharset(charset));  } catch (  IOException e) {    throw new UnsupportedEncodingException("Invalid RFC 2047 encoding");  }}  }
class C{  public void close() throws IOException {  randomAccessFile.close();}  }
class C{  public void addNodes(DTMIterator iterator){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  if (null != iterator) {    int obj;    while (DTM.NULL != (obj=iterator.nextNode())) {      addElement(obj);    }  }}  }
class C{  protected Type(String name){  super(name);}  }
class C{  JCERSAPrivateCrtKey(RSAPrivateKey key){  this.modulus=key.getModulus();  this.publicExponent=key.getPublicExponent();  this.privateExponent=key.getPrivateExponent();  this.primeP=key.getPrime1();  this.primeQ=key.getPrime2();  this.primeExponentP=key.getExponent1();  this.primeExponentQ=key.getExponent2();  this.crtCoefficient=key.getCoefficient();}  }
class C{  private static Object unwrap(Object object){  if (object instanceof Reflect) {    return ((Reflect)object).get();  }  return object;}  }
class C{  static void drawPressed3DBorder(Graphics g,int x,int y,int w,int h){  g.translate(x,y);  drawFlush3DBorder(g,0,0,w,h);  g.setColor(MetalLookAndFeel.getControlShadow());  g.drawLine(1,1,1,h - 2);  g.drawLine(1,1,w - 2,1);  g.translate(-x,-y);}  }
class C{  private void sourceBeanshelllScript(Interpreter inter) throws Exception {  File scriptFile=new File(source_file);  if (!scriptFile.canRead()) {    stat.log.userPrintln(classname + "sourceBeanshelllScript: " + source_file+ " not available");    return;  }  stat.log.userPrintln(classname + "sourceBeanshelllScript: reding " + source_file);  inter.source(scriptFile.getCanonicalPath());}  }
class C{  public FramedAppleTalkZoneAttribute(String zone){  super(OctetUtils.toOctets(AttributeType.FRAMED_APPLETALK_ZONE,zone));  this.zone=new String(super.getOctets(),2,super.getOctets().length - 2);}  }
class C{  public void testHashCode(){  int version=1;  int rounds=5;  int wordSize=16;  byte[] iv={1,2,3,4,5,6};  RC5ParameterSpec ps1=new RC5ParameterSpec(version,rounds,wordSize,iv);  RC5ParameterSpec ps2=new RC5ParameterSpec(version,rounds,wordSize,iv);  assertTrue("Equal objects should have the same hash codes.",ps1.hashCode() == ps2.hashCode());}  }
class C{  private int performCompareOperation(boolean authentication) throws Exception {  return LDAPCompare.mainCompare(compareArgs(authentication),false,null,null);}  }
class C{  public org.omg.CORBA.Object _get_interface(){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  public void handleTblRequestHandlerListButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    SCSOAPBindingRequestHandlerListAddViewBean vb=(SCSOAPBindingRequestHandlerListAddViewBean)getViewBean(SCSOAPBindingRequestHandlerListAddViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  private Future<Object> sendHeartBeatRequest(){  final String HEARTBEAT_PATH=config().getString("heartbeat.path","/health");  return getAllEndpoints().compose(null).map(null).compose(null);}  }
class C{  protected Expression div(int opPos) throws TransformerException {  return compileOperation(new Div(),opPos);}  }
class C{  protected WebappClassLoaderBase(){  super(new URL[0]);  ClassLoader p=getParent();  if (p == null) {    p=getSystemClassLoader();  }  this.parent=p;  ClassLoader j=String.class.getClassLoader();  if (j == null) {    j=getSystemClassLoader();    while (j.getParent() != null) {      j=j.getParent();    }  }  this.javaseClassLoader=j;  securityManager=System.getSecurityManager();  if (securityManager != null) {    refreshPolicy();  }}  }
class C{  void updateMaskIfNecessary(){  if (!getAllowsInvalid() && (getFormat() != null)) {    if (!isValidMask()) {      updateMask();    } else {      String newString=getFormattedTextField().getText();      if (!newString.equals(string)) {        updateMask();      }    }  }}  }
class C{  public static PermissiveModifyRequestControl newControl(final boolean isCritical){  return isCritical ? CRITICAL_INSTANCE : NONCRITICAL_INSTANCE;}  }
class C{  @Override protected StringBuilder encodeBody(StringBuilder buffer){  return buffer.append(eventType);}  }
class C{  public final double readDouble() throws IOException {  return Double.longBitsToDouble(readLong());}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public static float computeFrequency(int station){  return (float)station / CONVERT_RATE;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node clonedNode;  String cloneName;  NodeList cloneChildren;  int length;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  clonedNode=employeeNode.cloneNode(false);  cloneName=clonedNode.getNodeName();  assertEquals("name","employee",cloneName);  cloneChildren=clonedNode.getChildNodes();  length=(int)cloneChildren.getLength();  assertEquals("length",0,length);}  }
class C{  public void test_write$BII() throws Exception {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  byte[] rbuf=new byte[4000];  byte[] testBuf=null;  int bytesRead;  try {    raf.write(testBuf,1,1);    fail("Test 1: NullPointerException expected.");  } catch (  NullPointerException e) {  }  testBuf=testString.getBytes();  try {    raf.write(testBuf,-1,10);    fail("Test 2: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException expected) {  }  try {    raf.write(testBuf,0,-1);    fail("Test 3: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException expected) {  }  try {    raf.write(testBuf,5,testLength);    fail("Test 4: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException expected) {  }  try {    raf.write(testBuf,3,testLength - 5);  } catch (  Exception e) {    fail("Test 5: Unexpected exception: " + e.getMessage());  }  raf.close();  try {    raf.write(new byte[0]);  } catch (  IOException e) {    fail("Test 6: Unexpected IOException: " + e.getMessage());  }  try {    raf.write(testString.getBytes());    fail("Test 7: IOException expected.");  } catch (  IOException e) {  }  FileInputStream fis=new java.io.FileInputStream(fileName);  bytesRead=fis.read(rbuf,0,testLength);  assertEquals("Test 8: Incorrect number of bytes written or read;",testLength - 5,bytesRead);  assertEquals("Test 9: Incorrect bytes written or read; ",testString.substring(3,testLength - 2),new String(rbuf,0,bytesRead));}  }
class C{  @Override public Principal authenticate(String username,String credentials){  Principal authenticatedUser=super.authenticate(username,credentials);  return filterLockedAccounts(username,authenticatedUser);}  }
class C{  public synchronized String toString(){  String params="autoDelay = " + getAutoDelay() + ", "+ "autoWaitForIdle = "+ isAutoWaitForIdle();  return getClass().getName() + "[ " + params+ " ]";}  }
class C{  public OAuth2RestletException(int statusCode,String error,String description,String redirectUri,String state,UrlLocation parameterLocation){  super(description);  this.statusCode=statusCode;  this.error=error;  this.redirectUri=redirectUri;  this.state=state;  this.parameterLocation=parameterLocation;}  }
class C{  public void generate_snapshot(){  disable_redo();  Collection<UndoObjectNode> curr_deleted_objects_list=new LinkedList<UndoObjectNode>();  deleted_objects_stack.add(curr_deleted_objects_list);  ++stack_level;}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  if (isLoaded()) {    super.changedUpdate(e,a,f);  }}  }
class C{  protected void markFirstTime(Element elem){  String elemName=elem.getName();  if (elemName.equals("html")) {    seenHtml=true;  } else   if (elemName.equals("head")) {    seenHead=true;  } else   if (elemName.equals("body")) {    if (buf.length == 1) {      char[] newBuf=new char[256];      newBuf[0]=buf[0];      buf=newBuf;    }    seenBody=true;  }}  }
class C{  public static boolean isApplicationInBackground(Context context){  ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningTaskInfo> taskList=am.getRunningTasks(1);  if (taskList != null && !taskList.isEmpty()) {    ComponentName topActivity=taskList.get(0).topActivity;    if (topActivity != null && !topActivity.getPackageName().equals(context.getPackageName())) {      return true;    }  }  return false;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LLElement createLLElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LLElementImpl();}  }
class C{  public void addMessageDestinationRef(MessageDestinationRef mdr){  namingResources.addMessageDestinationRef(mdr);  fireContainerEvent("addMessageDestinationRef",mdr.getName());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentityreferencenodevalue.class,args);}  }
class C{  public void evictAll(){  List<RealConnection> evictedConnections=new ArrayList<>();synchronized (this) {    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {      RealConnection connection=i.next();      if (connection.allocations.isEmpty()) {        connection.noNewStreams=true;        evictedConnections.add(connection);        i.remove();      }    }  }  for (  RealConnection connection : evictedConnections) {    Util.closeQuietly(connection.getSocket());  }}  }
class C{  public boolean delete(UndoObjectStorable p_object){  disable_redo();  Collection<UndoObjectNode> curr_delete_list;  if (deleted_objects_stack.isEmpty()) {    curr_delete_list=null;  } else {    curr_delete_list=deleted_objects_stack.lastElement();  }  UndoObjectNode object_node=objects_map.get(p_object);  if (object_node == null)   return false;  if (object_node.object != p_object) {    System.out.println("UndoableObjectList.delete: Object inconsistent");    return false;  }  if (curr_delete_list != null) {    if (object_node.undo_level < stack_level) {      curr_delete_list.add(object_node);    } else     if (object_node.undo_object != null) {      curr_delete_list.add(object_node.undo_object);    }  }  objects_map.remove(p_object);  return true;}  }
class C{  private void iterateID2Entry(ReadableTransaction txn) throws StorageRuntimeException {  try (final Cursor<ByteString,ByteString> cursor=txn.openCursor(id2entry.getName())){    long storedEntryCount=id2entry.getRecordCount(txn);    while (cursor.next()) {      ByteString key=cursor.getKey();      ByteString value=cursor.getValue();      EntryID entryID;      try {        entryID=new EntryID(key);      } catch (      Exception e) {        errorCount++;        if (logger.isTraceEnabled()) {          logger.traceException(e);          logger.trace("Malformed id2entry ID %s.%n",StaticUtils.bytesToHex(key));        }        continue;      }      keyCount++;      Entry entry;      try {        entry=id2entry.entryFromDatabase(value,rootContainer.getCompressedSchema());      } catch (      Exception e) {        errorCount++;        if (logger.isTraceEnabled()) {          logger.traceException(e);          logger.trace("Malformed id2entry record for ID %d:%n%s%n",entryID,StaticUtils.bytesToHex(value));        }        continue;      }      verifyEntry(txn,entryID,entry);    }    if (keyCount != storedEntryCount) {      errorCount++;      logger.error(ERR_VERIFY_WRONG_ENTRY_COUNT,storedEntryCount,keyCount);    }  } }  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeObject(SerializationTester.test(events) ? events : null);}  }
class C{  public SQLWarning(String reason,Throwable cause){  super(reason,cause);  DriverManager.println("SQLWarning : reason(" + reason + ")");}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.X509DataType.X509Certificate createX509DataTypeX509Certificate() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.X509DataTypeImpl.X509CertificateImpl();}  }
class C{  private void clearIndexToFirst(){  for (; ; ) {    Index<K,V> q=head;    for (; ; ) {      Index<K,V> r=q.right;      if (r != null && r.indexesDeletedNode() && !q.unlink(r))       break;      if ((q=q.down) == null) {        if (head.right == null)         tryReduceLevel();        return;      }    }  }}  }
class C{  public UnableToRedirectException(String message){  super(message);}  }
class C{  private static void formatNames(Iterable<List<String>> names){  if (names != null) {    for (    List<String> list : names) {      String name=list.get(0);      String[] components=new String[5];      int start=0;      int end;      int componentIndex=0;      while (componentIndex < components.length - 1 && (end=name.indexOf(';',start)) >= 0) {        components[componentIndex]=name.substring(start,end);        componentIndex++;        start=end + 1;      }      components[componentIndex]=name.substring(start);      StringBuilder newName=new StringBuilder(100);      maybeAppendComponent(components,3,newName);      maybeAppendComponent(components,1,newName);      maybeAppendComponent(components,2,newName);      maybeAppendComponent(components,0,newName);      maybeAppendComponent(components,4,newName);      list.set(0,newName.toString().trim());    }  }}  }
class C{  public String paramString(){  String typeStr;  Rectangle b=(source != null ? ((Component)source).getBounds() : null);switch (id) {case COMPONENT_SHOWN:    typeStr="COMPONENT_SHOWN";  break;case COMPONENT_HIDDEN:typeStr="COMPONENT_HIDDEN";break;case COMPONENT_MOVED:typeStr="COMPONENT_MOVED (" + b.x + ","+ b.y+ " "+ b.width+ "x"+ b.height+ ")";break;case COMPONENT_RESIZED:typeStr="COMPONENT_RESIZED (" + b.x + ","+ b.y+ " "+ b.width+ "x"+ b.height+ ")";break;default :typeStr="unknown type";}return typeStr;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.X509DataType.X509SKI createX509DataTypeX509SKI(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.X509DataTypeImpl.X509SKIImpl(value);}  }
class C{  public AMAuthenticationInstance createAuthenticationInstance(String name,String type,Map attributes) throws AMConfigurationException {  if (name.indexOf(' ') != -1) {    throw new AMConfigurationException(BUNDLE_NAME,"invalidAuthenticationInstanceName",null);  }  Set moduleTypes=getAuthenticationTypes();  if (!moduleTypes.contains(type)) {    throw new AMConfigurationException(BUNDLE_NAME,"wrongType",new Object[]{type});  }  AMAuthenticationInstance instance=getAuthenticationInstance(name);  if (instance != null) {    if (instance.getServiceConfig() != null) {      throw new AMConfigurationException(BUNDLE_NAME,"authInstanceExist",new Object[]{name});    } else {      throw new AMConfigurationException(BUNDLE_NAME,"authInstanceIsGlobal",new Object[]{name});    }  }  String serviceName=getServiceName(type);  ServiceSchema schema=null;  try {    ServiceSchemaManager ssm=new ServiceSchemaManager(serviceName,token);    schema=ssm.getSchema(SchemaType.GLOBAL);  } catch (  SSOException e) {    if (DEBUG.warningEnabled()) {      DEBUG.warning("Token doesn't have access to service: " + token + " -> "+ serviceName);    }  }catch (  SMSException e) {  }  try {    OrganizationConfigManager ocm=new OrganizationConfigManager(token,realm);    if (!ocm.getAssignedServices().contains(serviceName)) {      ocm.assignService(serviceName,null);    }    ServiceConfig orgConfig=ocm.getServiceConfig(serviceName);    if (orgConfig == null) {      orgConfig=ocm.addServiceConfig(serviceName,null);    }    ServiceConfig subConfig=orgConfig;    if (!name.equals(type)) {      orgConfig.addSubConfig(name,ISAuthConstants.SERVER_SUBSCHEMA,0,attributes);      subConfig=orgConfig.getSubConfig(name);    } else {      subConfig.setAttributes(attributes);    }    if (!SystemProperties.isServerMode()) {      buildModuleInstanceForService(realm,serviceName);    }    return new AMAuthenticationInstance(name,type,subConfig,schema);  } catch (  Exception e) {    throw new AMConfigurationException(e);  }}  }
class C{  public static Border createBevelBorder(int type,Color highlight,Color shadow){  return new BevelBorder(type,highlight,shadow);}  }
class C{  boolean isBaseHeader(){  return value == BASE_HEADER;}  }
class C{  public boolean isEmpty(){  return collections.isEmpty();}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationElement createSubjectConfirmationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationElementImpl();}  }
class C{  public boolean isNoArgs(){  return noArgs;}  }
class C{  public StringBuffer(int capacity){  super(capacity);}  }
class C{  public IllegalComponentStateException(){  super();}  }
class C{  @Override public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){  updateSettings();}  }
class C{  @Override public void removeNotificationListener(NotificationListener listener,NotificationFilter filter,Object object) throws ListenerNotFoundException {  broadcaster.removeNotificationListener(listener,filter,object);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS10.class,args);}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.AuthenticateRequesterElement createAuthenticateRequesterElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.AuthenticateRequesterElementImpl();}  }
class C{  public static ActionListener add(ActionListener a,ActionListener b){  return (ActionListener)addInternal(a,b);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(_keyword).append(":").append(_operator).append(":").append(_value);  return sb.toString();}  }
class C{  public Entry filteredCopyOf(final Entry entry){  return new LinkedHashMapEntry(filteredViewOf(entry));}  }
class C{  public static ObjectPropertyMapper object(){  return new ObjectPropertyMapper();}  }
class C{  void onValidate(Context context,JsonValue value) throws ForbiddenException, InternalServerErrorException {  if (onValidate != null) {    Script scope=onValidate.getScript(context);    scope.put("property",value.get(name).getObject());    try {      scope.eval();    } catch (    ScriptThrownException ste) {      throw new ForbiddenException(ste.getValue().toString());    }catch (    ScriptException se) {      String msg=name + " onValidate script encountered exception";      logger.debug(msg,se);      throw new InternalServerErrorException(msg,se);    }  }}  }
class C{  public int size(){  return count;}  }
class C{  public void detach(){  if (m_allowDetach && null != m_iterators) {    int n=m_iterators.length;    for (int i=0; i < n; i++) {      m_iterators[i].detach();    }    m_iterators=null;  }}  }
class C{  public String returnTypeOrEmpty(Method method,PythonImportHandler importHandler){  TypeRef returnType=method.getOutputType();  return messages().isEmptyType(returnType) ? "" : typeCardinalityComment(returnType,importHandler);}  }
class C{  protected void expand(){  if (!isExpanded && !isLeaf()) {    boolean visible=isVisible();    isExpanded=true;    childCount=treeModel.getChildCount(getUserObject());    if (visible) {      didExpand();    }    if (visible && treeSelectionModel != null) {      treeSelectionModel.resetRowSelection();    }  }}  }
class C{  public void testDate(){  try {    Calendar date=Calendar.getInstance(TimeZone.getTimeZone("GMT"));    date.setTimeInMillis(0);    DateHeader dh=tiHeaderFactory.createDateHeader(date);    assertEquals("Date: Thu, 01 Jan 1970 00:00:00 GMT",dh.toString().trim());  }  finally {    logTestCompleted("testDate()");  }}  }
class C{  private void appendManagedObjectPathElement(RelationDefinition<?,?> r){  DN dn=DN.valueOf(profile.getRelationRDNSequence(r));  List<RDN> rdnsOfDn=getRdnsInBigEndianOrder(dn);  rdns.addAll(rdnsOfDn);}  }
class C{  public void testClearBitNegativeOutside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=165;  byte rBytes[]={-33,-1,-1,-1,-1,-1,-1,-1,-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  @Override public void reset(){  idx=mark;}  }
class C{  boolean isEnabled(){  return this.isEnabled;}  }
class C{  public RequestFacade(Request request){  this.request=request;}  }
class C{  @Override public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException {  if (listener == null)   throw new IllegalArgumentException("Listener is null");  if (generalBroadcaster != null) {    generalBroadcaster.removeNotificationListener(listener);  }  if (attributeBroadcaster != null) {    attributeBroadcaster.removeNotificationListener(listener);  }}  }
class C{  public String[] splitResourceName(String serviceTypeName,String resourceName) throws NameNotFoundException, SSOException, PolicyException {  ServiceType st=getServiceType(serviceTypeName);  Set prefixes=getManagedResourceNames(serviceTypeName);  String[] retVal=new String[2];  if (prefixes.isEmpty()) {    retVal[0]="";    retVal[1]=resourceName;    return retVal;  }  Iterator iter=prefixes.iterator();  String tmp=null;  ResourceMatch matchResult=null;  boolean foundSuperMatch=false;  boolean foundExactMatch=false;  while (iter.hasNext()) {    tmp=(String)iter.next();    matchResult=st.compare(resourceName,tmp);    if (matchResult.equals(ResourceMatch.SUPER_RESOURCE_MATCH)) {      foundSuperMatch=true;      break;    }    if (matchResult.equals(ResourceMatch.EXACT_MATCH)) {      foundExactMatch=true;      break;    }  }  if (foundSuperMatch) {    retVal[0]=tmp;    retVal[1]=st.getSubResource(resourceName,tmp);    return retVal;  }  if (foundExactMatch) {    retVal[0]=tmp;    retVal[1]="";    return retVal;  }  retVal[0]="";  retVal[1]=resourceName;  return retVal;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  System.out.println("shootmeA: got an ACK! ");  System.out.println("Dialog State = " + dialog.getState());  new Timer().schedule(new MyTimerTask(this,true),4000);}  }
class C{  @DataProvider(name="testSafeReadTwoRSsProvider") private Object[][] testSafeReadTwoRSsProvider(){  return new Object[][]{{DEFAULT_GID,DEFAULT_GENID,REPLY_OK_DS_SCENARIO},{DEFAULT_GID,DEFAULT_GENID,TIMEOUT_DS_SCENARIO},{DEFAULT_GID,DEFAULT_GENID,REPLAY_ERROR_DS_SCENARIO},{OTHER_GID,DEFAULT_GENID,TIMEOUT_DS_SCENARIO},{DEFAULT_GID,OTHER_GENID,TIMEOUT_DS_SCENARIO}};}  }
class C{  public Token read(String tokenId) throws DataLayerException {  DN dn=conversion.generateTokenDN(tokenId);  try {    getConnection();    SearchRequest request=LDAPRequests.newSingleEntrySearchRequest(dn,"*",CoreTokenField.ETAG.toString());    SearchResultEntry resultEntry=connection.searchSingleEntry(request);    return conversion.tokenFromEntry(resultEntry);  } catch (  LdapException e) {    Result result=e.getResult();    if (result != null && ResultCode.NO_SUCH_OBJECT.equals(result.getResultCode())) {      return null;    }    throw new LdapOperationFailedException(result);  }}  }
class C{  private void enableTLS(){  tlsActiveProvider=tlsPendingProvider;  tlsChannel.redirect(tlsPendingProvider);  tlsPendingProvider=null;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  RMRealmModel model=(RMRealmModel)getModel();  AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  String realmName=(String)getDisplayFieldValue(RMRealmModel.TF_NAME);  realmName=realmName.trim();  String parent=(String)getDisplayFieldValue(RMRealmModel.TF_PARENT);  if (parent != null) {    parent=parent.trim();  } else {    parent=model.getStartDN();  }  if (realmName.length() > 0) {    try {      Map values=ps.getAttributeValues(model.getDataMap(),false,model);      model.createSubRealm(parent,realmName,values);      backTrail();      RMRealmViewBean vb=(RMRealmViewBean)getViewBean(RMRealmViewBean.class);      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      forwardTo();    }  } else {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","realm.missing.realmName");    forwardTo();  }}  }
class C{  public void removeRestrictedDomains(Collection<String> domainNames){  Lists.removeAll(restrictedDomains,domainNames);}  }
class C{  public ObjectName preRegister(MBeanServer server,ObjectName name) throws Exception {  debug.message("LinkTrapGenerator.preRegister() called");  if (name == null) {    name=new ObjectName("trapGenerator:class=" + this.getClass().getName() + ",ifIndex="+ ifIndex);  }  try {    ifIndex=Integer.valueOf(name.getKeyProperty("ifIndex")).intValue();  } catch (  NumberFormatException nfe) {    ifIndex=1;    debug.warning("Use default ifIndex = " + ifIndex);  }  debug.message("LinkTrapGenerator.preRegister() " + "returned\n");  return name;}  }
class C{  private static String stripAttrs(String ldif,String... attrs){  String anyAttr="(";  for (int i=0; i < attrs.length; i++) {    if (i > 0) {      anyAttr+="|";    }    anyAttr+="(" + attrs[i] + ")";  }  anyAttr+=")";  Pattern pattern=Pattern.compile("^" + anyAttr + "\\:(.*?)^",Pattern.MULTILINE | Pattern.CASE_INSENSITIVE | Pattern.DOTALL);  return pattern.matcher(ldif).replaceAll("");}  }
class C{  @Override public final void invoke(Request request,Response response) throws IOException, ServletException {  MessageBytes requestPathMB=request.getRequestPathMB();  if ((requestPathMB.startsWithIgnoreCase("/META-INF/",0)) || (requestPathMB.equalsIgnoreCase("/META-INF")) || (requestPathMB.startsWithIgnoreCase("/WEB-INF/",0))|| (requestPathMB.equalsIgnoreCase("/WEB-INF"))) {    response.sendError(HttpServletResponse.SC_NOT_FOUND);    return;  }  Wrapper wrapper=request.getWrapper();  if (wrapper == null || wrapper.isUnavailable()) {    response.sendError(HttpServletResponse.SC_NOT_FOUND);    return;  }  try {    response.sendAcknowledgement();  } catch (  IOException ioe) {    container.getLogger().error(sm.getString("standardContextValve.acknowledgeException"),ioe);    request.setAttribute(RequestDispatcher.ERROR_EXCEPTION,ioe);    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    return;  }  if (request.isAsyncSupported()) {    request.setAsyncSupported(wrapper.getPipeline().isAsyncSupported());  }  wrapper.getPipeline().getFirst().invoke(request,response);}  }
class C{  public synchronized void regenerateDescriptor(){  ServerDescriptor desc=new ServerDescriptor();  desc.setIsLocal(isLocal);  if (isLocal) {    desc.setOpenDJVersion(DynamicConstants.FULL_VERSION_STRING);    String installPath=Utilities.getInstallPathFromClasspath();    desc.setInstallPath(installPath);    desc.setInstancePath(Utils.getInstancePathFromInstallPath(installPath));    desc.setWindowsServiceEnabled(isWindows() && serviceState() == SERVICE_STATE_ENABLED);  } else   if (lastRemoteHostPort != null) {    desc.setHostname(lastRemoteHostPort.getHost());  }  ConfigReader reader;  ServerStatus status=getStatus(desc);  if (status != null) {    desc.setStatus(status);    if (status == ServerStatus.STOPPING) {      StaticUtils.close(connWrapper);      connWrapper=null;      if (userDataConn != null) {        unregisterConnection(connectionPool,null);        StaticUtils.close(userDataConn);        userDataConn=null;      }    }    if (isLocal) {      reader=newLocalConfigReader();    } else {      reader=null;    }    desc.setAuthenticated(false);  } else   if (!isLocal || Utilities.isServerRunning(new File(desc.getInstancePath()))) {    desc.setStatus(ServerStatus.STARTED);    if (connWrapper == null && lastWorkingBindDN != null) {      try {        if (isLocal) {          connWrapper=Utilities.getAdminConnection(this,lastWorkingBindDN,lastWorkingBindPwd);        } else         if (lastRemoteHostPort != null) {          connWrapper=new ConnectionWrapper(lastRemoteHostPort,LDAPS,lastWorkingBindDN,lastWorkingBindPwd,getConnectTimeout(),getTrustManager());        }      } catch (      ConfigReadException|IOException ignored) {      }    }    if (connWrapper == null) {      if (isLocal) {        reader=newLocalConfigReader();      } else {        reader=null;        desc.setStatus(ServerStatus.NOT_CONNECTED_TO_REMOTE);      }    } else {      Utilities.initializeConfigurationFramework();      reader=newRemoteConfigReader();      boolean connectionWorks=checkConnections(connWrapper,userDataConn);      if (!connectionWorks) {        if (isLocal) {          reader=newLocalConfigReader();        } else {          reader=null;          desc.setStatus(ServerStatus.NOT_CONNECTED_TO_REMOTE);        }        StaticUtils.close(connWrapper);        this.connWrapper=null;        unregisterConnection(connectionPool,connWrapper);        StaticUtils.close(userDataConn);        userDataConn=null;      }    }    if (reader != null) {      desc.setAuthenticated(reader instanceof ConfigFromConnection);      desc.setJavaVersion(reader.getJavaVersion());      desc.setOpenConnections(reader.getOpenConnections());      desc.setTaskEntries(reader.getTaskEntries());      if (reader instanceof ConfigFromConnection) {        ConfigFromConnection rCtx=(ConfigFromConnection)reader;        desc.setRootMonitor(rCtx.getRootMonitor());        desc.setEntryCachesMonitor(rCtx.getEntryCaches());        desc.setJvmMemoryUsageMonitor(rCtx.getJvmMemoryUsage());        desc.setSystemInformationMonitor(rCtx.getSystemInformation());        desc.setWorkQueueMonitor(rCtx.getWorkQueue());        desc.setOpenDJVersion(firstValueAsString(rCtx.getVersionMonitor(),"fullVersion"));        String installPath=firstValueAsString(rCtx.getSystemInformation(),"installPath");        if (installPath != null) {          desc.setInstallPath(installPath);        }        String instancePath=firstValueAsString(rCtx.getSystemInformation(),"instancePath");        if (instancePath != null) {          desc.setInstancePath(instancePath);        }      }    }  } else {    desc.setStatus(ServerStatus.STOPPED);    desc.setAuthenticated(false);    reader=newLocalConfigReader();  }  if (reader != null) {    updateServerDescriptor(reader,desc);  }  if (serverDesc == null || !serverDesc.equals(desc)) {    serverDesc=desc;    ldapHostPort=getHostPort(serverDesc,ConnectionHandlerDescriptor.Protocol.LDAP);    ldapsHostPort=getHostPort(serverDesc,ConnectionHandlerDescriptor.Protocol.LDAPS);    adminConnectorHostPort=getAdminConnectorHostPort(serverDesc);    if (serverDesc.isLocal()) {      localAdminConnectorHostPort=adminConnectorHostPort;    }    startTlsHostPort=getHostPort(serverDesc,ConnectionHandlerDescriptor.Protocol.LDAP_STARTTLS);    ConfigurationChangeEvent ev=new ConfigurationChangeEvent(this,desc);    for (    ConfigChangeListener listener : configListeners) {      listener.configurationChanged(ev);    }  }}  }
class C{  public void logExtendedRequest(ExtendedOperation extendedOperation){}  }
class C{  public void test_Constructor$CII() throws IOException {  try {    cr=new CharArrayReader(null,0,0);    fail("Test 1: NullPointerException expected.");  } catch (  NullPointerException e) {  }  try {    cr=new CharArrayReader(hw,-1,0);    fail("Test 2: IllegalArgumentException expected.");  } catch (  IllegalArgumentException e) {  }  try {    cr=new CharArrayReader(hw,0,-1);    fail("Test 3: IllegalArgumentException expected.");  } catch (  IllegalArgumentException e) {  }  try {    cr=new CharArrayReader(hw,hw.length + 1,1);    fail("Test 4: IllegalArgumentException expected.");  } catch (  IllegalArgumentException e) {  }  cr=new CharArrayReader(hw,5,5);  assertTrue("Test 5: Failed to create reader",cr.ready());  assertEquals("Test 6: Incorrect character read;",'W',cr.read());}  }
class C{  protected DecodeException newUnsupportedMessageException(final int messageID,final byte messageTag,final ByteString messageBytes){  return DecodeException.fatalError(LocalizableMessage.raw("Unsupported LDAP message: id=%d, tag=%d, content=%s",messageID,messageTag,messageBytes));}  }
class C{  public Set<Class<?>> find(){  Set<Class<?>> result=new HashSet<Class<?>>();  TypesHandled handlesTypes=handlesTypes();  if (!handlesTypes.isEmpty()) {    Collection<URL> urls=new HashSet<URL>(ClasspathHelper.forResource("META-INF/faces-config.xml",this.getClass().getClassLoader()));    String anotherFacesConfig=this.jsfAnnotatedClassFactoryConfiguration.getAnotherFacesConfig();    if (anotherFacesConfig != null) {      urls.addAll(ClasspathHelper.forResource(anotherFacesConfig,this.getClass().getClassLoader()));    }    Reflections reflections=new Reflections(new ConfigurationBuilder().setUrls(urls));    for (    Class<? extends Annotation> annotationType : handlesTypes.getAnnotationTypes()) {      result.addAll(reflections.getTypesAnnotatedWith(annotationType));    }    for (    Class<?> otherType : handlesTypes.getOtherTypes()) {      result.addAll(reflections.getSubTypesOf(otherType));    }  }  return result;}  }
class C{  @Override public String toString(){  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  pw.println("=== MimeHeaders ===");  Enumeration<String> e=names();  while (e.hasMoreElements()) {    String n=e.nextElement();    Enumeration<String> ev=values(n);    while (ev.hasMoreElements()) {      pw.print(n);      pw.print(" = ");      pw.println(ev.nextElement());    }  }  return sw.toString();}  }
class C{  private Node.Nodes doParse(String inFileName,Node parent,Jar jar) throws FileNotFoundException, JasperException, IOException {  Node.Nodes parsedPage=null;  isEncodingSpecifiedInProlog=false;  isBomPresent=false;  isDefaultPageEncoding=false;  String absFileName=resolveFileName(inFileName);  String jspConfigPageEnc=getJspConfigPageEncoding(absFileName);  determineSyntaxAndEncoding(absFileName,jar,jspConfigPageEnc);  if (parent != null) {    if (jar == null) {      compiler.getPageInfo().addDependant(absFileName,ctxt.getLastModified(absFileName));    } else {      String entry=absFileName.substring(1);      compiler.getPageInfo().addDependant(jar.getURL(entry),Long.valueOf(jar.getLastModified(entry)));    }  }  if ((isXml && isEncodingSpecifiedInProlog) || isBomPresent) {    if (jspConfigPageEnc != null && !jspConfigPageEnc.equals(sourceEnc) && (!jspConfigPageEnc.startsWith("UTF-16") || !sourceEnc.startsWith("UTF-16"))) {      err.jspError("jsp.error.prolog_config_encoding_mismatch",sourceEnc,jspConfigPageEnc);    }  }  if (isXml) {    parsedPage=JspDocumentParser.parse(this,absFileName,jar,parent,isTagFile,directiveOnly,sourceEnc,jspConfigPageEnc,isEncodingSpecifiedInProlog,isBomPresent);  } else {    try (InputStreamReader inStreamReader=JspUtil.getReader(absFileName,sourceEnc,jar,ctxt,err,skip)){      JspReader jspReader=new JspReader(ctxt,absFileName,inStreamReader,err);      parsedPage=Parser.parse(this,jspReader,parent,isTagFile,directiveOnly,jar,sourceEnc,jspConfigPageEnc,isDefaultPageEncoding,isBomPresent);    }   }  baseDirStack.pop();  return parsedPage;}  }
class C{  public boolean is_on_the_right(ShapeTile p_tile){  int border_line_count=p_tile.border_line_count();  for (int index=0; index < border_line_count; ++index) {    if (side_of(p_tile.corner(index)) == PlaSide.ON_THE_LEFT)     return false;  }  return true;}  }
class C{  protected void tearDown(){}  }
class C{  public static ValueExp times(ValueExp value1,ValueExp value2){  return new BinaryOpValueExp(TIMES,value1,value2);}  }
class C{  public void cloneDevice(String origClientType,String clientType,String deviceName) throws AMConsoleException {  Map map=getCloningProperties(origClientType);  if (map == null) {    throw new AMConsoleException(getLocalizedString("mapCloneFailed.message"));  }  String[] param={clientType};  logEvent("ATTEMPT_CLIENT_DETECTION_CREATE_CLIENT",param);  try {    validateClientType(clientType);    Set set=new HashSet(1);    set.add(clientType);    map.put(ATTRIBUTE_NAME_CLIENT_TYPE,set);    set=new HashSet(1);    set.add(deviceName);    map.put(ATTRIBUTE_NAME_USER_AGENT,set);    clientTypesManager.addClientExternal(getUserSSOToken(),map);    logEvent("SUCCEED_CLIENT_DETECTION_CREATE_CLIENT",param);  } catch (  AMConsoleException e) {    String[] paramsEx={clientType,e.getMessage()};    logEvent("INVALID_CLIENT_TYPE_CLIENT_DETECTION_CREATE_CLIENT",paramsEx);    throw e;  }catch (  AMClientCapException e) {    String strError=getErrorString(e);    String[] paramsEx={clientType,strError};    logEvent("CLIENT_SDK_EXCEPTION_CLIENT_DETECTION_CREATE_CLIENT",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public void testGenerateCertPath02() throws Exception {  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  for (int i=0; i < certFs.length; i++) {    CertPath certPath=null;    InputStream fis=Support_Resources.getResourceStream(fileCertPathPki);    certPath=certFs[i].generateCertPath(fis,"PkiPath");    fis.close();    assertEquals(defaultType,certPath.getType());    List<? extends Certificate> list1=certPath.getCertificates();    assertFalse("Result list is empty",list1.isEmpty());  }}  }
class C{  private JPanel createPanel(){  GridBagConstraints gbc=new GridBagConstraints();  JPanel contentPanel=new JPanel(new GridBagLayout());  contentPanel.setBackground(UIFactory.DEFAULT_BACKGROUND);  JPanel topPanel=new JPanel(new GridBagLayout());  topPanel.setBorder(UIFactory.DIALOG_PANEL_BORDER);  topPanel.setBackground(UIFactory.CURRENT_STEP_PANEL_BACKGROUND);  Insets insets=UIFactory.getCurrentStepPanelInsets();  insets.bottom=0;  gbc.insets=insets;  gbc.fill=GridBagConstraints.BOTH;  gbc.weightx=1.0;  gbc.weighty=0.0;  gbc.gridwidth=3;  gbc.gridx=0;  gbc.gridy=0;  LocalizableMessage title=INFO_JAVA_RUNTIME_SETTINGS_TITLE.get();  JLabel l=UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,title,UIFactory.TextStyle.TITLE);  l.setOpaque(false);  topPanel.add(l,gbc);  JTextComponent instructionsPane=UIFactory.makeHtmlPane(message,UIFactory.INSTRUCTIONS_FONT);  instructionsPane.setOpaque(false);  instructionsPane.setEditable(false);  gbc.gridy++;  gbc.insets.top=UIFactory.TOP_INSET_INPUT_SUBPANEL;  topPanel.add(instructionsPane,gbc);  gbc.gridy++;  gbc.insets.top=UIFactory.TOP_INSET_INPUT_SUBPANEL;  gbc.insets.bottom=UIFactory.TOP_INSET_INPUT_SUBPANEL;  inputContainer=new JPanel(new CardLayout());  inputContainer.setOpaque(false);  inputContainer.add(createInputPanel(),INPUT_PANEL);  JPanel checkingPanel=UIFactory.makeJPanel();  checkingPanel.setLayout(new GridBagLayout());  checkingPanel.add(UIFactory.makeJLabel(UIFactory.IconType.WAIT,INFO_GENERAL_CHECKING_DATA.get(),UIFactory.TextStyle.PRIMARY_FIELD_VALID),new GridBagConstraints());  inputContainer.add(checkingPanel,CHECKING_PANEL);  topPanel.add(inputContainer,gbc);  gbc.weighty=1.0;  gbc.gridy++;  gbc.insets=UIFactory.getEmptyInsets();  topPanel.add(Box.createVerticalGlue(),gbc);  gbc.gridx=0;  gbc.gridy=0;  contentPanel.add(topPanel,gbc);  gbc.weighty=0.0;  gbc.gridy++;  gbc.insets=UIFactory.getButtonsPanelInsets();  contentPanel.add(createButtonsPanel(),gbc);  return contentPanel;}  }
class C{  public static float pxToDp(float px){  float densityDpi=Resources.getSystem().getDisplayMetrics().densityDpi;  return pxToDp(px,densityDpi);}  }
class C{  public Query whereStartsWith(Contact.Field field,Object value){  addNewConstraint(field,Where.startsWith(field.getColumn(),value));  return this;}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.SPDescriptorElement createSPDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.SPDescriptorElementImpl();}  }
class C{  public static boolean isValid(String address){  return isValidIPv4(address) || isValidIPv6(address);}  }
class C{  public void testMalformedForLength(){  assertNotNull(CoderResult.malformedForLength(Integer.MAX_VALUE));  assertNotNull(CoderResult.malformedForLength(1));  assertSame(CoderResult.malformedForLength(1),CoderResult.malformedForLength(1));  assertNotSame(CoderResult.malformedForLength(1),CoderResult.unmappableForLength(1));  assertNotSame(CoderResult.malformedForLength(2),CoderResult.malformedForLength(1));  try {    CoderResult.malformedForLength(-1);    fail("Should throw IllegalArgumentException");  } catch (  IllegalArgumentException ex) {  }  try {    CoderResult.malformedForLength(0);    fail("Should throw IllegalArgumentException");  } catch (  IllegalArgumentException ex) {  }}  }
class C{  public String toXML(){  StringBuilder sb=new StringBuilder(300);  sb.append("<").append(ACTION_DECISION).append(" ");  sb.append(TIME_TO_LIVE).append("=").append(PolicyUtils.quote(timeToLive)).append(">");  sb.append(PolicyUtils.CRLF);  sb.append(PolicyUtils.attributeValuePairToXMLString(getActionName(),values));  sb.append("<").append(ADVICES).append(">").append(PolicyUtils.CRLF);  if (advices != null) {    sb.append(PolicyUtils.mapToXMLString(advices));  }  sb.append("</").append(ADVICES).append(">").append(PolicyUtils.CRLF);  sb.append("</").append(ACTION_DECISION).append(">").append(PolicyUtils.CRLF);  return sb.toString();}  }
class C{  public static final byte[] toOctets(AttributeType type,int intValue){  final byte[] octets=new byte[6];  octets[0]=(byte)type.getTypeCode();  octets[1]=6;  octets[2]=(byte)((intValue >>> 24) & 0xFF);  octets[3]=(byte)((intValue >>> 16) & 0xFF);  octets[4]=(byte)((intValue >>> 8) & 0xFF);  octets[5]=(byte)(intValue & 0xFF);  return octets;}  }
class C{  private void mergeHi(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len2);  System.arraycopy(a,base2,tmp,0,len2);  int cursor1=base1 + len1 - 1;  int cursor2=len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      if (c.compare(tmp[cursor2],a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight(tmp[cursor2],a,base1,len1,len1 - 1,c);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft(a[cursor1],tmp,0,len2,len2 - 1,c);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    if (DEBUG)     assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len1 == 0;    if (DEBUG)     assert len2 > 0;    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);  }}  }
class C{  public void updateUI(){  setUI((ToolTipUI)UIManager.getUI(this));}  }
class C{  public String toString(){  return super.toString() + " inProgress: " + inProgress+ " edits: "+ edits;}  }
class C{  public void reset(){synchronized (membersLock) {    map.clear();    members=EMPTY_MEMBERS;  }}  }
class C{  public static SchemaElement updateSchemaElementExtraPropertySingleValue(ServerContext serverContext,SchemaElement element,String property,String value){  List<String> values=value != null ? Arrays.asList(value) : null;  return updateSchemaElementExtraPropertyMultiplesValues(serverContext,element,property,values);}  }
class C{  private ServletRequest wrapRequest(State state){  ServletRequest previous=null;  ServletRequest current=state.outerRequest;  while (current != null) {    if (state.hrequest == null && (current instanceof HttpServletRequest))     state.hrequest=(HttpServletRequest)current;    if (!(current instanceof ServletRequestWrapper))     break;    if (current instanceof ApplicationHttpRequest)     break;    if (current instanceof ApplicationRequest)     break;    previous=current;    current=((ServletRequestWrapper)current).getRequest();  }  ServletRequest wrapper=null;  if ((current instanceof ApplicationHttpRequest) || (current instanceof Request) || (current instanceof HttpServletRequest)) {    HttpServletRequest hcurrent=(HttpServletRequest)current;    boolean crossContext=false;    if ((state.outerRequest instanceof ApplicationHttpRequest) || (state.outerRequest instanceof Request) || (state.outerRequest instanceof HttpServletRequest)) {      HttpServletRequest houterRequest=(HttpServletRequest)state.outerRequest;      Object contextPath=houterRequest.getAttribute(RequestDispatcher.INCLUDE_CONTEXT_PATH);      if (contextPath == null) {        contextPath=houterRequest.getContextPath();      }      crossContext=!(context.getPath().equals(contextPath));    }    wrapper=new ApplicationHttpRequest(hcurrent,context,crossContext);  } else {    wrapper=new ApplicationRequest(current);  }  if (previous == null)   state.outerRequest=wrapper; else   ((ServletRequestWrapper)previous).setRequest(wrapper);  state.wrapRequest=wrapper;  return (wrapper);}  }
class C{  public boolean isInheritedCollectiveAttributeSubentry(){  return hasObjectClass(OC_INHERITED_COLLECTIVE_ATTR_SUBENTRY_LC);}  }
class C{  public boolean isDirty(){  return this.dirty.get();}  }
class C{  @Override public void end(String namespace,String name) throws Exception {  Object top=digester.pop();  if (digester.log.isDebugEnabled()) {    digester.log.debug("[ObjectCreateRule]{" + digester.match + "} Pop "+ top.getClass().getName());  }}  }
class C{  public void _read(InputStream input){  value=input.read_short();}  }
class C{  public void invokeVirtual(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEVIRTUAL,owner,method,false);}  }
class C{  public LdapConnection connect(final String host,final int port) throws LdapException {  return connect(host,port,Options.defaultOptions());}  }
class C{  public JAXBElement(QName name,Class<T> declaredType,Class scope,T value){  if (declaredType == null || name == null)   throw new IllegalArgumentException();  this.declaredType=declaredType;  if (scope == null)   scope=GlobalScope.class;  this.scope=scope;  this.name=name;  setValue(value);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.NameIDPolicyElement createNameIDPolicyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.NameIDPolicyElementImpl();}  }
class C{  public int size(){  if (arrayTable == null) {    return 0;  }  return arrayTable.size();}  }
class C{  public void testBaseUriResolutionWithHashes() throws Exception {  document=builder.parse(new InputSource(new StringReader("<a xml:base=\"http://a1/a2\">" + "  <b xml:base=\"b1#b2\"/>" + "  <c xml:base=\"#c1\">"+ "    <d xml:base=\"\"/>"+ "  </c>"+ "  <e xml:base=\"\"/>"+ "</a>")));  Element a=document.getDocumentElement();  assertEquals("http://a1/a2",a.getBaseURI());  String message="This implementation's getBaseURI() doesn't handle " + "relative URIs with hashes";  Element b=(Element)a.getChildNodes().item(1);  Element c=(Element)a.getChildNodes().item(3);  Element d=(Element)c.getChildNodes().item(1);  Element e=(Element)a.getChildNodes().item(5);  assertEquals(message,"http://a1/b1#b2",b.getBaseURI());  assertEquals(message,"http://a1/a2#c1",c.getBaseURI());  assertEquals(message,"http://a1/a2#c1",d.getBaseURI());  assertEquals(message,"http://a1/a2",e.getBaseURI());}  }
class C{  @Override public void onRenderSurfaceSizeChanged(GL10 gl,int width,int height){  super.onRenderSurfaceSizeChanged(gl,width,height);  mSceneCameraConfigured=false;}  }
class C{  public static IntegerArgument adminLdapPortArgument(final int defaultAdminPort) throws ArgumentException {  return IntegerArgument.builder("adminConnectorPort").description(INFO_ARGUMENT_DESCRIPTION_ADMINCONNECTORPORT.get()).range(1,65535).defaultValue(defaultAdminPort).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildArgument();}  }
class C{  public boolean is_diagonal(){  return direction().is_diagonal();}  }
class C{  public static AbandonRequest newAbandonRequest(final int requestID){  return new AbandonRequestImpl(requestID);}  }
class C{  public JsonValue undeploy(String routeId) throws RouterHandlerException {  write.lock();  try {    JsonValue routeConfig=unload(routeId);    directoryMonitor.delete(routeId);    logger.info("Undeployed the route with id '{}'",routeId);    return routeConfig;  }  finally {    write.unlock();  }}  }
class C{  @Override public boolean supportsAuthentication(){  if (DEBUG.messageEnabled()) {    DEBUG.message("supportsAuthentication invoked");  }  return true;}  }
class C{  public void next(PdfAction nextAction){  PdfObject currentNextAction=getPdfObject().get(PdfName.Next);  if (currentNextAction == null) {    put(PdfName.Next,nextAction.getPdfObject());  } else   if (currentNextAction.isDictionary()) {    PdfArray array=new PdfArray(currentNextAction);    array.add(nextAction.getPdfObject());    put(PdfName.Next,array);  } else {    ((PdfArray)currentNextAction).add(nextAction.getPdfObject());  }}  }
class C{  public boolean isThumbRollover(){  return thumbActive;}  }
class C{  static ReplayPromise<Void> allReplay(final Duration timeout,final long time,final Promise<?>... promises){  return new AllReplayPromise(timeout,time,promises);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String fullName=m_arg0.execute(xctxt).str();  int indexOfNSSep=fullName.indexOf(':');  String result;  String propName="";  Properties xsltInfo=new Properties();  loadPropertyFile(XSLT_PROPERTIES,xsltInfo);  if (indexOfNSSep > 0) {    String prefix=(indexOfNSSep >= 0) ? fullName.substring(0,indexOfNSSep) : "";    String namespace;    namespace=xctxt.getNamespaceContext().getNamespaceForPrefix(prefix);    propName=(indexOfNSSep < 0) ? fullName : fullName.substring(indexOfNSSep + 1);    if (namespace.startsWith("http://www.w3.org/XSL/Transform") || namespace.equals("http://www.w3.org/1999/XSL/Transform")) {      result=xsltInfo.getProperty(propName);      if (null == result) {        warn(xctxt,XPATHErrorResources.WG_PROPERTY_NOT_SUPPORTED,new Object[]{fullName});        return XString.EMPTYSTRING;      }    } else {      warn(xctxt,XPATHErrorResources.WG_DONT_DO_ANYTHING_WITH_NS,new Object[]{namespace,fullName});      try {        result=System.getProperty(propName);        if (null == result) {          return XString.EMPTYSTRING;        }      } catch (      SecurityException se) {        warn(xctxt,XPATHErrorResources.WG_SECURITY_EXCEPTION,new Object[]{fullName});        return XString.EMPTYSTRING;      }    }  } else {    try {      result=System.getProperty(fullName);      if (null == result) {        return XString.EMPTYSTRING;      }    } catch (    SecurityException se) {      warn(xctxt,XPATHErrorResources.WG_SECURITY_EXCEPTION,new Object[]{fullName});      return XString.EMPTYSTRING;    }  }  if (propName.equals("version") && result.length() > 0) {    try {      return new XString("1.0");    } catch (    Exception ex) {      return new XString(result);    }  } else   return new XString(result);}  }
class C{  public static String base64Decode(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return new String(Base64.getDecoder().decode(value));}  }
class C{  public OrganizationHeader createOrganizationHeader(String organization) throws ParseException {  if (organization == null)   throw new NullPointerException("bad organization arg");  Organization o=new Organization();  o.setOrganization(organization);  return o;}  }
class C{  public static SearchFilter createFilterFromString(String filterString) throws DirectoryException {  if (filterString == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_NULL.get();    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  try {    return createFilterFromString(filterString,0,filterString.length());  } catch (  DirectoryException de) {    logger.traceException(de);    throw de;  }catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_SEARCH_FILTER_UNCAUGHT_EXCEPTION.get(filterString,e);    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message,e);  }}  }
class C{  protected String decodeVal(String v){  char[] chars=v.toCharArray();  StringBuffer sb=new StringBuffer(chars.length);  int i=0, lastIdx=0;  for (i=0; i < chars.length; i++) {    if (chars[i] == '%' && i + 2 < chars.length && chars[i + 1] == '2') {      if (lastIdx != i) {        sb.append(chars,lastIdx,i - lastIdx);      }      if (chars[i + 2] == 'C') {        sb.append(',');      } else       if (chars[i + 2] == '5') {        sb.append('%');      } else {        sb.append(chars,i,3);      }      i+=2;      lastIdx=i + 1;    }  }  if (lastIdx != i) {    sb.append(chars,lastIdx,i - lastIdx);  }  return sb.toString();}  }
class C{  public void visitEnd(){}  }
class C{  public boolean hasAllOpAttributes(){  return hasAttribute(ACI_OP_ATTR_PLUS_MATCHED);}  }
class C{  public void addBinaryAttr(Attr attr){  Attr attr1=findAttribute(attr.getName());  if (attr1 == null) {    _attrs.add(attr);  } else {    attr1.addValues(attr.getByteValues());  }}  }
class C{  public final TreeSet<BrdAbitPin> touching_pins_at_end_corners(){  TreeSet<BrdAbitPin> result=new TreeSet<BrdAbitPin>();  touching_pins_at_end_corners(result,corner_first());  touching_pins_at_end_corners(result,corner_last());  return result;}  }
class C{  public void error(Level level,String messageId,String data[],Object session,Map props) throws LogException {  if (isErrorLoggable(level)) {    LogRecord lr=new LogRecord(level,formatMessage(messageId,data,session));    errorLogger.log(lr);  }}  }
class C{  @Override public void execute() throws BuildException {  if ((username == null) || (password == null) || (url == null)) {    throw new BuildException("Must specify all of 'username', 'password', and 'url'");  }}  }
class C{  public void addLiteralResultAttribute(AVT avt){  if (null == m_avts)   m_avts=new ArrayList();  m_avts.add(avt);}  }
class C{  static void terminateBits(int numDataBytes,BitVector bits) throws WriterException {  int capacity=numDataBytes << 3;  if (bits.size() > capacity) {    throw new WriterException("data bits cannot fit in the QR Code" + bits.size() + " > "+ capacity);  }  for (int i=0; i < 4 && bits.size() < capacity; ++i) {    bits.appendBit(0);  }  int numBitsInLastByte=bits.size() % 8;  if (numBitsInLastByte > 0) {    int numPaddingBits=8 - numBitsInLastByte;    for (int i=0; i < numPaddingBits; ++i) {      bits.appendBit(0);    }  }  if (bits.size() % 8 != 0) {    throw new WriterException("Number of bits is not a multiple of 8");  }  int numPaddingBytes=numDataBytes - bits.sizeInBytes();  for (int i=0; i < numPaddingBytes; ++i) {    if (i % 2 == 0) {      bits.appendBits(0xec,8);    } else {      bits.appendBits(0x11,8);    }  }  if (bits.size() != capacity) {    throw new WriterException("Bits size does not equal capacity");  }}  }
class C{  public void stopTracking(){  if (!isTracking) {    return;  }  Session session=getSession();  if (session != null) {    session.removeCallback(callback);  }  broadcastManager.unregisterReceiver(receiver);  isTracking=false;}  }
class C{  public void testConstructorSignBytesNegative4(){  byte aBytes[]={127,56,100,-2};  int aSign=-1;  byte rBytes[]={-128,-57,-101,2};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  @Override public void update(){}  }
class C{  @Override public Object lookup(String name) throws NamingException {  return lookup(new CompositeName(name),true);}  }
class C{  protected boolean validatePendingAdd(Object targetChild){  return true;}  }
class C{  public void addParameter(ParameterInfo parameter){  Lock writeLock=parametersLock.writeLock();  writeLock.lock();  try {    ParameterInfo results[]=new ParameterInfo[parameters.length + 1];    System.arraycopy(parameters,0,results,0,parameters.length);    results[parameters.length]=parameter;    parameters=results;    this.info=null;  }  finally {    writeLock.unlock();  }}  }
class C{  public byte readByte() throws IOException, EOFException {  return (byte)in.read();}  }
class C{  public void onNetDisConnect(){}  }
class C{  public void paintDesktopIconBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public XMLString xstr(){  return this;}  }
class C{  public long reportingRateInMillis(){  return timeunit().toMillis(period());}  }
class C{  public void testRadixOutOfRange(){  String value="442429234853876401";  int radix=10;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(45);  assertTrue(result.equals(value));}  }
class C{  public static void test_constructor(){  new Target();}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.QueryDescriptorType createQueryDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.QueryDescriptorTypeImpl();}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case MENU_SETTINGS:    startActivity(new Intent(this,ActivitySettings.class));  return true;case MENU_CLEAR_LOGS:switch (logTypeSelected) {case KEY_EVENT_LOGS:  UIDbHelperStore.instance().db().deleteEventLogs();break;case KEY_ACTION_LOGS:UIDbHelperStore.instance().db().deleteActionLogs();break;case KEY_GENERAL_LOGS:UIDbHelperStore.instance().db().deleteGeneralLogs();break;case KEY_ALL_LOGS:UIDbHelperStore.instance().db().deleteAllLogs();break;}}updateUI();return super.onOptionsItemSelected(item);}  }
class C{  public void preSSOFederationProcess(String hostedProviderID,HttpServletRequest request,HttpServletResponse response,FSAuthnRequest authnRequest,FSAuthnResponse authnResponse,FSResponse samlResponse) throws FederationException {  FSUtils.debug.message("In FSDefaultSPAdapter.preSSOFederationProcess.");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  doc=(Document)load("hc_staff",false);  nameList=doc.getElementsByTagName("strong");  assertSize("documentGetElementsByTagNameLengthAssert",5,nameList);}  }
class C{  public SAXMarshaller(ContentHandler _writer,NamespacePrefixMapper prefixMapper,MarshallerImpl _owner){  this.writer=_writer;  this.owner=_owner;  this.nsContext=new NamespaceContextImpl(prefixMapper != null ? prefixMapper : defaultNamespacePrefixMapper);}  }
class C{  public static String toString(final Properties properties){  final Properties newProperties=new Properties();  final Enumeration<Object> keys=properties.keys();  while (keys.hasMoreElements()) {    final String key=keys.nextElement().toString();    if (key.toLowerCase().contains("password")) {      continue;    }    newProperties.setProperty(key,properties.getProperty(key));  }  return newProperties.toString();}  }
class C{  public void testStoredEntrySize() throws Exception {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ZipOutputStream out=new ZipOutputStream(baos);  String name="test_file";  int expectedLength=5;  ZipEntry outEntry=new ZipEntry(name);  byte[] buffer=new byte[expectedLength];  outEntry.setMethod(ZipEntry.STORED);  CRC32 crc=new CRC32();  crc.update(buffer);  outEntry.setCrc(crc.getValue());  outEntry.setSize(buffer.length);  out.putNextEntry(outEntry);  out.write(buffer);  out.closeEntry();  out.close();  byte[] outBuffer=baos.toByteArray();  File zipFile=createTemporaryZipFile();  writeBytes(zipFile,outBuffer);  ZipFile zip=new ZipFile(zipFile);  ZipEntry ze=zip.getEntry(name);  ze.setCompressedSize(expectedLength - 1);  InputStream stream=zip.getInputStream(ze);  int count=0;  int read;  while ((read=stream.read(buffer)) != -1) {    count+=read;  }  assertEquals(expectedLength,count);}  }
class C{  public void incrementLocalSequenceNumber(){  ++this.localSequenceNumber;}  }
class C{  private boolean canUseLookup(Raster src,Raster dst){  int datatype=src.getDataBuffer().getDataType();  if (datatype != DataBuffer.TYPE_BYTE && datatype != DataBuffer.TYPE_USHORT) {    return false;  }  SampleModel dstSM=dst.getSampleModel();  dstNbits=dstSM.getSampleSize(0);  if (!(dstNbits == 8 || dstNbits == 16)) {    return false;  }  for (int i=1; i < src.getNumBands(); i++) {    int bandSize=dstSM.getSampleSize(i);    if (bandSize != dstNbits) {      return false;    }  }  SampleModel srcSM=src.getSampleModel();  srcNbits=srcSM.getSampleSize(0);  if (srcNbits > 16) {    return false;  }  for (int i=1; i < src.getNumBands(); i++) {    int bandSize=srcSM.getSampleSize(i);    if (bandSize != srcNbits) {      return false;    }  }  return true;}  }
class C{  @Override public boolean equals(Object that){  return (compareTo((Identifier)that) == 0);}  }
class C{  public boolean isUseDeltasEnabled(){  return useDeltas;}  }
class C{  protected int insertIndexForLayer(int layer,int position){  return insertIndexForLayer(null,layer,position);}  }
class C{  public void shareWeiXin(String webUrl){  String msgTitle=context.getString(R.string.app_name);  String msgText=context.getString(R.string.share_str_weixing_title);  shareWeiXin(webUrl,msgTitle,msgText);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("staff",true);  newNode=doc.createEntityReference("ent1");  assertNotNull("createdEntRefNotNull",newNode);  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  @Override public void addChild(WXComponent child,int index){  if (child == null || index < -1) {    return;  }  if (mOrientation == VERTICAL) {    checkRefreshOrLoading(child);    if (child instanceof WXBaseRefresh) {      return;    }  }  if (mChildren == null) {    mChildren=new ArrayList<>();  }  int count=mChildren.size();  index=index >= count ? -1 : index;  if (index == -1) {    mChildren.add(child);  } else {    mChildren.add(index,child);  }}  }
class C{  final double internalNextDouble(double origin,double bound){  double r=(nextLong() >>> 11) * DOUBLE_UNIT;  if (origin < bound) {    r=r * (bound - origin) + origin;    if (r >= bound)     r=Double.longBitsToDouble(Double.doubleToLongBits(bound) - 1);  }  return r;}  }
class C{  public BandWidth createBandwidth(String modifier,int value){  BandwidthField bandWidthImpl=new BandwidthField();  try {    bandWidthImpl.setType(modifier);    bandWidthImpl.setValue(value);  } catch (  SdpException s) {    s.printStackTrace();  }  return bandWidthImpl;}  }
class C{  public BERSequence(){}  }
class C{  public void mergeObjects(GenericObjectList mergeList){  Iterator<GenericObject> it1=this.listIterator();  Iterator<GenericObject> it2=mergeList.listIterator();  while (it1.hasNext()) {    GenericObject outerObj=(GenericObject)it1.next();    while (it2.hasNext()) {      Object innerObj=it2.next();      outerObj.merge(innerObj);    }  }}  }
class C{  public int compareTo(Long object){  return compare(value,object.value);}  }
class C{  public InsufficientResourcesException(String explanation){  super(explanation);}  }
class C{  public EmptyFrameException(String msg,Throwable ex){  super(msg,ex);}  }
class C{  @Post public Representation authorize(Representation entity) throws OAuth2RestletException {  final OAuth2Request request=requestFactory.create(getRequest());  for (  AuthorizeRequestHook hook : hooks) {    hook.beforeAuthorizeHandling(request,getRequest(),getResponse());  }  final boolean consentGiven="allow".equalsIgnoreCase(request.<String>getParameter("decision"));  final boolean saveConsent="on".equalsIgnoreCase(request.<String>getParameter("save_consent"));  try {    final AuthorizationToken authorizationToken=authorizationService.authorize(request,consentGiven,saveConsent);    final String redirectUri=redirectUriResolver.resolve(request);    Representation response=representation.toRepresentation(getContext(),getRequest(),getResponse(),authorizationToken,redirectUri);    for (    AuthorizeRequestHook hook : hooks) {      hook.afterAuthorizeSuccess(request,getRequest(),getResponse());    }    return response;  } catch (  ResourceOwnerAuthenticationRequired e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),e.getRedirectUri().toString(),null);  }catch (  InvalidClientException e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("state"));  }catch (  RedirectUriMismatchException e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("state"));  }catch (  DuplicateRequestParameterException e) {    throw new OAuth2RestletException(400,"invalid_request",e.getMessage(),request.<String>getParameter("state"));  }catch (  CsrfException e) {    throw new OAuth2RestletException(400,"bad_request",e.getMessage(),request.<String>getParameter("state"));  }catch (  OAuth2Exception e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("redirect_uri"),request.<String>getParameter("state"),e.getParameterLocation());  }}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public <M extends Configuration>void registerAddListener(InstantiableRelationDefinition<?,M> d,ServerManagedObjectAddListener<M> listener) throws ConfigException {  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d);  ConfigAddListener adaptor=new ConfigAddListenerAdaptor<>(serverContext,path,d,listener);  registerAddListener(baseDN,adaptor);}  }
class C{  public int capacity(){  return array.length;}  }
class C{  public Dimension preferredLayoutSize(Container target){  checkContainer(target);  checkRequests();  Dimension size=new Dimension(xTotal.preferred,yTotal.preferred);  Insets insets=target.getInsets();  size.width+=insets.left + insets.right;  size.height+=insets.top + insets.bottom;  return size;}  }
class C{  public static void resetSharedPreferences(Context context,String stateName){  SharedPreferences state=context.getSharedPreferences(stateName,Context.MODE_WORLD_READABLE | Context.MODE_WORLD_WRITEABLE);  state.edit().clear().commit();}  }
class C{  @Override public String toJson(){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionSerializer());  return gson.create().toJson(this);}  }
class C{  @org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) public void addSearchEntry(SearchResultEntry searchEntry) throws DirectoryException {  if (searchListener == null) {    entryList.add(searchEntry);  } else {    searchListener.handleInternalSearchEntry(this,searchEntry);  }}  }
class C{  public void testClearSpans(){  mRichTextView.formatSpan(0,5,RichTextView.FormatType.BOLD);  mRichTextView.clearSpans();  assertEquals(0,mRichTextView.getSpanCount());}  }
class C{  public boolean isVisible(final int col){  return getTableColumn(col).isVisible();}  }
class C{  private String processClassDelegate(VariableScope scope,ClassDelegate delegate){  String language="groovy";  try {    Class<?> cls=Class.forName("org.activiti.engine.impl.bpmn.helper.ClassDelegate");    Field languageFields=cls.getDeclaredField("fieldDeclarations");    languageFields.setAccessible(true);    @SuppressWarnings("unchecked") List<FieldDeclaration> fieldDeclarations=(List<FieldDeclaration>)languageFields.get(delegate);    for (    FieldDeclaration field : fieldDeclarations) {      if ("language".equals(field.getName())) {        language=(String)((Expression)field.getValue()).getValue(scope);      }    }  } catch (  Exception ex) {    LoggerFactory.getLogger(OpenIDMResolverFactory.class).error(ex.getMessage(),ex);  }  return language;}  }
class C{  public final int compareTo(E o){  return ordinal - ((Enum)o).ordinal;}  }
class C{  private static boolean isSchemaAttribute(Attribute attribute){  String attributeOid=attribute.getAttributeDescription().getAttributeType().getOID();  return attributeOid.equals("2.5.21.1") || attributeOid.equals("2.5.21.2") || attributeOid.equals("2.5.21.4")|| attributeOid.equals("2.5.21.5")|| attributeOid.equals("2.5.21.6")|| attributeOid.equals("2.5.21.7")|| attributeOid.equals("2.5.21.8")|| attributeOid.equals("2.5.4.3")|| attributeOid.equals("1.3.6.1.4.1.1466.101.120.16")|| attributeOid.equals("cn-oid")|| attributeOid.equals("attributetypes-oid")|| attributeOid.equals("objectclasses-oid")|| attributeOid.equals("matchingrules-oid")|| attributeOid.equals("matchingruleuse-oid")|| attributeOid.equals("nameformdescription-oid")|| attributeOid.equals("ditcontentrules-oid")|| attributeOid.equals("ditstructurerules-oid")|| attributeOid.equals("ldapsyntaxes-oid");}  }
class C{  private User onUserDelete(@Nullable User currentUser,@NotNull TLUser userDeleted){  final User user;  if (currentUser == null) {    user=new User(userDeleted.getId());  } else {    user=new User(currentUser);  }  user.setUserHash(0L);  BotLogger.debug(LOGTAG,"userdeletedid: " + user.getUserId());  return user;}  }
class C{  public boolean containsRuleActionId(String ruleActionId){  return getAggregationMap().containsKey(ruleActionId);}  }
class C{  public static void outputResultTreeFragment(SerializationHandler handler,XObject obj,XPathContext support) throws org.xml.sax.SAXException {  int doc=obj.rtf();  DTM dtm=support.getDTM(doc);  if (null != dtm) {    for (int n=dtm.getFirstChild(doc); DTM.NULL != n; n=dtm.getNextSibling(n)) {      handler.flushPending();      if (dtm.getNodeType(n) == DTM.ELEMENT_NODE && dtm.getNamespaceURI(n) == null)       handler.startPrefixMapping("","");      dtm.dispatchToEvents(n,handler);    }  }}  }
class C{  private void createExtendedObject(String realm,String entityName,String location,String role) throws SAML2MetaException, JAXBException, AMConsoleException {  SAML2MetaManager samlManager=getSAML2MetaManager();  EntityDescriptorElement entityDescriptor=samlManager.getEntityDescriptor(realm,entityName);  ObjectFactory objFactory=new ObjectFactory();  EntityConfigElement entityConfigElement=objFactory.createEntityConfigElement();  entityConfigElement.setEntityID(entityName);  if (location.equals("remote")) {    entityConfigElement.setHosted(false);  } else {    entityConfigElement.setHosted(true);  }  List configList=entityConfigElement.getIDPSSOConfigOrSPSSOConfigOrAuthnAuthorityConfig();  BaseConfigType baseConfigIDP=null;  BaseConfigType baseConfigSP=null;  BaseConfigType baseConfigAuth=null;  AttributeAuthorityDescriptorElement attrauthDescriptor=samlManager.getAttributeAuthorityDescriptor(realm,entityName);  AuthnAuthorityDescriptorElement authnauthDescriptor=samlManager.getAuthnAuthorityDescriptor(realm,entityName);  AttributeQueryDescriptorElement attrQueryDescriptor=samlManager.getAttributeQueryDescriptor(realm,entityName);  IDPSSODescriptorElement idpssoDesc=samlManager.getIDPSSODescriptor(realm,entityName);  SPSSODescriptorElement spssoDesc=samlManager.getSPSSODescriptor(realm,entityName);  XACMLAuthzDecisionQueryDescriptorElement xacmlAuthzDescriptor=samlManager.getPolicyEnforcementPointDescriptor(realm,entityName);  XACMLPDPDescriptorElement xacmlPDPDescriptor=samlManager.getPolicyDecisionPointDescriptor(realm,entityName);  if (isDualRole(entityDescriptor)) {    baseConfigIDP=objFactory.createIDPSSOConfigElement();    baseConfigSP=objFactory.createSPSSOConfigElement();    baseConfigIDP=addAttributeType(extendedMetaIdpMap,baseConfigIDP);    baseConfigSP=addAttributeType(extendedMetaSpMap,baseConfigSP);    configList.add(baseConfigIDP);    configList.add(baseConfigSP);  } else   if (role.equals(EntityModel.IDENTITY_PROVIDER) || (idpssoDesc != null)) {    baseConfigIDP=objFactory.createIDPSSOConfigElement();    baseConfigIDP=addAttributeType(extendedMetaIdpMap,baseConfigIDP);    configList.add(baseConfigIDP);  } else   if (role.equals(EntityModel.SERVICE_PROVIDER) || (spssoDesc != null)) {    baseConfigSP=objFactory.createSPSSOConfigElement();    baseConfigSP=addAttributeType(extendedMetaSpMap,baseConfigSP);    configList.add(baseConfigSP);  }  if (role.equals(EntityModel.SAML_ATTRAUTHORITY) || (attrauthDescriptor != null)) {    baseConfigAuth=objFactory.createAttributeAuthorityConfigElement();    baseConfigAuth=addAttributeType(extAttrAuthMap,baseConfigAuth);    configList.add(baseConfigAuth);  }  if (role.equals(EntityModel.SAML_AUTHNAUTHORITY) || (authnauthDescriptor != null)) {    baseConfigAuth=objFactory.createAuthnAuthorityConfigElement();    baseConfigAuth=addAttributeType(extAuthnAuthMap,baseConfigAuth);    configList.add(baseConfigAuth);  }  if (role.equals(EntityModel.SAML_ATTRQUERY) || (attrQueryDescriptor != null)) {    baseConfigAuth=objFactory.createAttributeQueryConfigElement();    baseConfigAuth=addAttributeType(extattrQueryMap,baseConfigAuth);    configList.add(baseConfigAuth);  }  if (role.equals(EntityModel.POLICY_DECISION_POINT_DESCRIPTOR) || (xacmlPDPDescriptor != null)) {    baseConfigAuth=objFactory.createXACMLPDPConfigElement();    baseConfigAuth=addAttributeType(xacmlPDPExtendedMeta,baseConfigAuth);    configList.add(baseConfigAuth);  }  if (role.equals(EntityModel.POLICY_ENFORCEMENT_POINT_DESCRIPTOR) || (xacmlAuthzDescriptor != null)) {    baseConfigAuth=objFactory.createXACMLAuthzDecisionQueryConfigElement();    baseConfigAuth=addAttributeType(xacmlPEPExtendedMeta,baseConfigAuth);    configList.add(baseConfigAuth);  }  samlManager.setEntityConfig(realm,entityConfigElement);}  }
class C{  private void parseMajorVersion(String majorVer) throws SAMLException {  try {    majorVersion=Integer.parseInt(majorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Request(Element): invalid " + "MajorVersion",e);    }    throw new SAMLRequesterException(FSUtils.BUNDLE_NAME,"wrongInput",null);  }  if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Request(Element):MajorVersion of " + "the Request is too high.");      }      throw new SAMLRequestVersionTooHighException(FSUtils.BUNDLE_NAME,"requestVersionTooHigh",null);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Request(Element):MajorVersion of " + "the Request is too low.");      }      throw new SAMLRequestVersionTooLowException(FSUtils.BUNDLE_NAME,"requestVersionTooLow",null);    }  }}  }
class C{  public String byteStringNoSemicolon(){  StringBuilder retval=new StringBuilder();  try {    while (true) {      char next=lookAhead(0);      if (next == '\0' || next == '\n' || next == ';' || next == ',') {        break;      } else {        consume(1);        retval.append(next);      }    }  } catch (  ParseException ex) {    return retval.toString();  }  return retval.toString();}  }
class C{  public boolean isEqualTo(ChangelogState other){  if (other == null) {    return false;  }  if (this == other) {    return true;  }  return domainToGenerationId.equals(other.domainToGenerationId) && domainToServerIds.equals(other.domainToServerIds) && offlineReplicas.getSnapshot().equals(other.offlineReplicas.getSnapshot());}  }
class C{  public CODESET_INCOMPATIBLE(){  this("");}  }
class C{  public TableRowSorter(){  this(null);}  }
class C{  protected ClassLoader(ClassLoader parentLoader){  this(parentLoader,false);}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.num(xctxt) / m_right.num(xctxt));}  }
class C{  public static boolean deleteDirectorySimple(File path){  if (!path.exists()) {    return false;  }  if (isDebugMode()) {    return true;  }  boolean ret=true;  if (path.isDirectory()) {    for (    File f : path.listFiles()) {      ret=ret && deleteDirectorySimple(f);    }  }  return ret && path.delete();}  }
class C{  public boolean isNodeChild(TreeNode aNode){  boolean retval;  if (aNode == null) {    retval=false;  } else {    if (getChildCount() == 0) {      retval=false;    } else {      retval=(aNode.getParent() == this);    }  }  return retval;}  }
class C{  public CMSSignedData generate(String eContentType,CMSProcessable content,boolean encapsulate,Provider sigProvider) throws NoSuchAlgorithmException, CMSException {  return generate(eContentType,content,encapsulate,sigProvider,true);}  }
class C{  public static void notifyImportEnded(Backend<?> backend,LDIFImportConfig config,boolean successful){  for (  ImportTaskListener listener : directoryServer.importTaskListeners) {    try {      listener.processImportEnd(backend,config,successful);    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  private void addFont(Object f,int index){  if (fonts != null) {    fontStarts=addToVector(f,index,fonts,fontStarts);  } else   if (font == null) {    font=f;  } else {    if (!font.equals(f)) {      fonts=new Vector<Object>(INITIAL_SIZE);      fonts.addElement(font);      fonts.addElement(f);      fontStarts=new int[INITIAL_SIZE];      fontStarts[0]=0;      fontStarts[1]=index;    }  }}  }
class C{  public void clear(){  final Segment<K,V>[] segments=this.segments;  for (int j=0; j < segments.length; ++j) {    Segment<K,V> s=segmentAt(segments,j);    if (s != null)     s.clear();  }}  }
class C{  @Override public void addHandshakeCompletedListener(HandshakeCompletedListener listener){  if (listener == null) {    throw new IllegalArgumentException("Provided listener is null");  }  if (listeners == null) {    listeners=new ArrayList<HandshakeCompletedListener>();  }  listeners.add(listener);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AuthorityBindingType createAuthorityBindingType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AuthorityBindingTypeImpl();}  }
class C{  public static int swapInteger(int value){  return (((value >> 0) & 0xff) << 24) + (((value >> 8) & 0xff) << 16) + (((value >> 16) & 0xff) << 8)+ (((value >> 24) & 0xff) << 0);}  }
class C{  public ExternalChangelogDomainFakeCfg(boolean isEnabled,SortedSet<String> eclInclude,SortedSet<String> eclIncludeForDeletes){  this.pEnabled=isEnabled;  this.pECLInclude=eclInclude != null ? eclInclude : new TreeSet<String>();  this.pECLIncludeForDeletes=eclIncludeForDeletes != null ? eclIncludeForDeletes : new TreeSet<String>();}  }
class C{  public static String installHook(String s){  DatatypeConverter.setDatatypeConverter(theInstance);  return s;}  }
class C{  public SignerInfoGenerator build(ContentSigner contentSigner,byte[] subjectKeyIdentifier) throws OperatorCreationException {  SignerIdentifier sigId=new SignerIdentifier(new DEROctetString(subjectKeyIdentifier));  return createGenerator(contentSigner,sigId);}  }
class C{  public AttributeQuery createAttributeQuery(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ATTRIBUTE_QUERY,value);  if (obj == null) {    return new AttributeQueryImpl(value);  } else {    return (AttributeQuery)obj;  }}  }
class C{  public void handleTblDSAttributeMapListButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  setSubmitCycle(true);  CCActionTable table=(CCActionTable)getChild(WSPersonalProfileServiceModelImpl.ATTRIBUTE_NAME_DS_ATTRIBUTE_MAP_LIST);  table.restoreStateData();  CCActionTableModel tblModel=(CCActionTableModel)propertySheetModel.getModel(WSPersonalProfileServiceModelImpl.ATTRIBUTE_NAME_DS_ATTRIBUTE_MAP_LIST);  Integer[] selected=tblModel.getSelectedRows();  if ((selected != null) && (selected.length > 0)) {    OrderedSet tblValues=(OrderedSet)getPageSessionAttribute(WSPersonalProfileServiceModelImpl.ATTRIBUTE_NAME_DS_ATTRIBUTE_MAP_LIST);    tblValues.removeAll(selected);    setPageSessionAttribute(WSPersonalProfileServiceModelImpl.ATTRIBUTE_NAME_DS_ATTRIBUTE_MAP_LIST,tblValues);    populateDSAttributeMapListTable(tblValues);  }  resetButtonState(TBL_DS_ATTRIBUTE_MAP_LIST_DELETE_BTN);  forwardTo();}  }
class C{  @DataProvider public Object[][] createIsInScopeOfTestData(){  return new Object[][]{{"dc=x,dc=y","dc=x,dc=y",SearchScope.BASE_OBJECT,true},{"dc=x,dc=y","dc=z,dc=y",SearchScope.BASE_OBJECT,false},{"dc=x,dc=z","dc=x,dc=y",SearchScope.BASE_OBJECT,false},{"dc=x,dc=y","dc=y",SearchScope.BASE_OBJECT,false},{"dc=y","dc=x,dc=y",SearchScope.BASE_OBJECT,false},{"dc=x,dc=y","dc=x,dc=y",SearchScope.SINGLE_LEVEL,false},{"dc=x,dc=y","dc=y",SearchScope.SINGLE_LEVEL,true},{"dc=z,dc=x,dc=y","dc=y",SearchScope.SINGLE_LEVEL,false},{"dc=y","dc=x,dc=y",SearchScope.SINGLE_LEVEL,false},{"dc=x,dc=z","dc=y",SearchScope.SINGLE_LEVEL,false},{"dc=x,dc=y","dc=x,dc=y",SearchScope.SUBORDINATES,false},{"dc=x,dc=y","dc=y",SearchScope.SUBORDINATES,true},{"dc=z,dc=x,dc=y","dc=y",SearchScope.SUBORDINATES,true},{"dc=y","dc=x,dc=y",SearchScope.SUBORDINATES,false},{"dc=x,dc=z","dc=y",SearchScope.SUBORDINATES,false},{"dc=x,dc=y","dc=x,dc=y",SearchScope.WHOLE_SUBTREE,true},{"dc=x,dc=y","dc=y",SearchScope.WHOLE_SUBTREE,true},{"dc=z,dc=x,dc=y","dc=y",SearchScope.WHOLE_SUBTREE,true},{"dc=y","dc=x,dc=y",SearchScope.WHOLE_SUBTREE,false},{"dc=x,dc=z","dc=y",SearchScope.WHOLE_SUBTREE,false}};}  }
class C{  public short acceptNode(int n){  try {    if (getPredicateCount() > 0) {      countProximityPosition(0);      if (!executePredicates(n,m_lpi.getXPathContext()))       return DTMIterator.FILTER_SKIP;    }    return DTMIterator.FILTER_ACCEPT;  } catch (  javax.xml.transform.TransformerException se) {    throw new RuntimeException(se.getMessage());  }}  }
class C{  public void modifyAllPolicyTemplates(String serviceName,Set policyDNs) throws AMException, SSOException {  throw new UnsupportedOperationException();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  Node newChild;  NodeList elementList;  Node refChild;  Node insertedNode;  doc=(Document)load("staff",true);  rootNode=doc.getDocumentElement();  newChild=doc.createAttribute("newAttribute");  elementList=doc.getElementsByTagName("employee");  refChild=elementList.item(1);{    boolean success=false;    try {      insertedNode=rootNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  int avail=buf.length - pos;  if (avail > 0) {    if (len < avail) {      avail=len;    }    System.arraycopy(buf,pos,b,off,avail);    pos+=avail;    off+=avail;    len-=avail;  }  if (len > 0) {    len=super.read(b,off,len);    if (len == -1) {      return avail == 0 ? -1 : avail;    }    return avail + len;  }  return avail;}  }
class C{  private static LDAPFilter createORFilter(FilterSet filterSet) throws LDAPException, IOException {  List<JAXBElement<?>> list=filterSet.getFilterGroup();  ArrayList<RawFilter> filters=new ArrayList<>(list.size());  for (  JAXBElement<?> filter : list) {    filters.add(createFilter(filter));  }  return LDAPFilter.createORFilter(filters);}  }
class C{  @SuppressWarnings("deprecation") public void hide(){  Component component=getComponent();  if (component instanceof JWindow) {    component.hide();    ((JWindow)component).getContentPane().removeAll();  }  dispose();}  }
class C{  public BasicHeaderIterator(Header[] headers,String name){  if (headers == null) {    throw new IllegalArgumentException("Header array must not be null.");  }  this.allHeaders=headers;  this.headerName=name;  this.currentIndex=findNext(-1);}  }
class C{  public boolean isCanceled(){  return isCanceled;}  }
class C{  @SuppressWarnings("unchecked") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int cap=MIN_SEGMENT_TABLE_CAPACITY;  final Segment<K,V>[] segments=this.segments;  for (int k=0; k < segments.length; ++k) {    Segment<K,V> seg=segments[k];    if (seg != null) {      seg.threshold=(int)(cap * seg.loadFactor);      seg.table=(HashEntry<K,V>[])new HashEntry<?,?>[cap];    }  }  for (; ; ) {    K key=(K)s.readObject();    V value=(V)s.readObject();    if (key == null)     break;    put(key,value);  }}  }
class C{  public WritableRaster createCompatibleDestRaster(Raster src){  Rectangle2D r=getBounds2D(src);  return src.createCompatibleWritableRaster((int)r.getX(),(int)r.getY(),(int)r.getWidth(),(int)r.getHeight());}  }
class C{  public boolean isDoubleBufferingEnabled(){  return doubleBufferingEnabled;}  }
class C{  final int[] breakLines(int startPos){  int[] lineEnds=(lineCache == null) ? null : lineCache.get();  int[] oldLineEnds=lineEnds;  int start=getStartOffset();  int lineIndex=0;  if (lineEnds != null) {    lineIndex=findLine(startPos - start);    if (lineIndex > 0) {      lineIndex--;    }  }  int p0=(lineIndex == 0) ? start : start + lineEnds[lineIndex - 1];  int p1=getEndOffset();  while (p0 < p1) {    int p=calculateBreakPosition(p0,p1);    p0=(p == p0) ? ++p : p;    if (lineIndex == 0 && p0 >= p1) {      lineCache=null;      lineEnds=null;      lineIndex=1;      break;    } else     if (lineEnds == null || lineIndex >= lineEnds.length) {      double growFactor=((double)(p1 - start) / (p0 - start));      int newSize=(int)Math.ceil((lineIndex + 1) * growFactor);      newSize=Math.max(newSize,lineIndex + 2);      int[] tmp=new int[newSize];      if (lineEnds != null) {        System.arraycopy(lineEnds,0,tmp,0,lineIndex);      }      lineEnds=tmp;    }    lineEnds[lineIndex++]=p0 - start;  }  lineCount=lineIndex;  if (lineCount > 1) {    int maxCapacity=lineCount + lineCount / 3;    if (lineEnds.length > maxCapacity) {      int[] tmp=new int[maxCapacity];      System.arraycopy(lineEnds,0,tmp,0,lineCount);      lineEnds=tmp;    }  }  if (lineEnds != null && lineEnds != oldLineEnds) {    lineCache=new SoftReference<int[]>(lineEnds);  }  return lineEnds;}  }
class C{  public static JsonObject jsonValue(){  return new JsonObject();}  }
class C{  public void info(String msg){  log(Level.INFO,msg);}  }
class C{  protected void installKeyboardActions(){  InputMap inputMap=getInputMap(JComponent.WHEN_FOCUSED);  SwingUtilities.replaceUIInputMap(list,JComponent.WHEN_FOCUSED,inputMap);  LazyActionMap.installLazyActionMap(list,BasicListUI.class,"List.actionMap");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(localName03.class,args);}  }
class C{  public static Foo[] findByField2_PrevAndNext(long fooId,boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_PrevAndNext(fooId,field2,orderByComparator);}  }
class C{  public boolean isSupportsCredentials(){  return supportsCredentials;}  }
class C{  public Holder(T value){  this.value=value;}  }
class C{  public InvalidStatusCodeSaml2Exception(String firstlevelStatuscode,String secondlevelStatuscode){  super(SAML2Utils.BUNDLE_NAME,"invalidStatusCodeInResponse",null);  this.firstlevelStatuscode=firstlevelStatuscode;  this.secondlevelStatuscode=secondlevelStatuscode;}  }
class C{  protected OptionList createOptionList(Set values){  OptionList optList=new OptionList();  if ((values != null) && !values.isEmpty()) {    Set amIdentity=(values.iterator().next() instanceof String) ? getAMIdentity((IdentitySubjectModel)getModel(),values) : values;    Map entries=new HashMap(values.size() * 2);    for (Iterator iter=amIdentity.iterator(); iter.hasNext(); ) {      AMIdentity identity=(AMIdentity)iter.next();      entries.put(IdUtils.getUniversalId(identity),PolicyUtils.getDNDisplayString(identity.getName()));    }    optList=createOptionList(entries);  }  return optList;}  }
class C{  public boolean equals(Object object){  if (object == null || !(object instanceof SessionID)) {    return false;  }  SessionID another=(SessionID)object;  return encryptedString.equals(another.encryptedString);}  }
class C{  private static LambdaForm preparedFieldLambdaForm(MemberName m){  Class<?> ftype=m.getFieldType();  boolean isVolatile=m.isVolatile();  byte formOp;switch (m.getReferenceKind()) {case REF_getField:    formOp=AF_GETFIELD;  break;case REF_putField:formOp=AF_PUTFIELD;break;case REF_getStatic:formOp=AF_GETSTATIC;break;case REF_putStatic:formOp=AF_PUTSTATIC;break;default :throw new InternalError(m.toString());}if (shouldBeInitialized(m)) {preparedFieldLambdaForm(formOp,isVolatile,ftype);assert ((AF_GETSTATIC_INIT - AF_GETSTATIC) == (AF_PUTSTATIC_INIT - AF_PUTSTATIC));formOp+=(AF_GETSTATIC_INIT - AF_GETSTATIC);}LambdaForm lform=preparedFieldLambdaForm(formOp,isVolatile,ftype);maybeCompile(lform,m);assert (lform.methodType().dropParameterTypes(0,1).equals(m.getInvocationType().basicType())) : Arrays.asList(m,m.getInvocationType().basicType(),lform,lform.methodType());return lform;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrname.class,args);}  }
class C{  private TopoView createTheoreticalTopoViewForStep(int step){  List<DSInfo> dsList=new ArrayList<>();  List<RSInfo> rsList=new ArrayList<>();switch (step) {case STEP_1:    rsList.add(createRSInfo(RS1_ID));  dsList.add(createDSInfo(DS1_ID,RS1_ID));break;case STEP_2:rsList.add(createRSInfo(RS1_ID));dsList.add(createDSInfo(DS1_ID,RS1_ID));dsList.add(createDSInfo(DS2_ID,RS1_ID));break;case STEP_3:rsList.add(createRSInfo(RS1_ID));rsList.add(createRSInfo(RS2_ID));dsList.add(createDSInfo(DS1_ID,RS1_ID));dsList.add(createDSInfo(DS2_ID,RS1_ID));break;case STEP_4:rsList.add(createRSInfo(RS1_ID));rsList.add(createRSInfo(RS2_ID));dsList.add(createDSInfo(DS1_ID,RS1_ID));dsList.add(createDSInfo(DS2_ID,RS1_ID));dsList.add(createDSInfo(DS3_ID,RS2_ID));break;case STEP_5:rsList.add(createRSInfo(RS1_ID));rsList.add(createRSInfo(RS2_ID));dsList.add(createDSInfo(DS1_ID,RS1_ID));dsList.add(createDSInfo(DS2_ID,RS1_ID));dsList.add(createDSInfo(DS3_ID,RS2_ID));dsList.add(createDSInfo(DS4_ID,RS2_ID));break;case STEP_6:rsList.add(createRSInfo(RS1_ID));rsList.add(createRSInfo(RS2_ID));dsList.add(createDSInfo(DS1_ID,RS1_ID));dsList.add(createDSInfo(DS2_ID,RS1_ID));dsList.add(createDSInfo(DS3_ID,RS2_ID));dsList.add(createDSInfo(DS4_ID,RS2_ID));dsList.add(createDSInfo(DS5_ID,RS2_ID));break;case STEP_7:rsList.add(createRSInfo(RS1_ID));rsList.add(createRSInfo(RS2_ID));rsList.add(createRSInfo(RS3_ID));dsList.add(createDSInfo(DS1_ID,RS1_ID));dsList.add(createDSInfo(DS2_ID,RS1_ID));dsList.add(createDSInfo(DS3_ID,RS2_ID));dsList.add(createDSInfo(DS4_ID,RS2_ID));dsList.add(createDSInfo(DS5_ID,RS3_ID));break;case STEP_8:rsList.add(createRSInfo(RS1_ID));rsList.add(createRSInfo(RS2_ID));rsList.add(createRSInfo(RS3_ID));dsList.add(createDSInfo(DS1_ID,RS1_ID));dsList.add(createDSInfo(DS2_ID,RS1_ID));dsList.add(createDSInfo(DS3_ID,RS2_ID));dsList.add(createDSInfo(DS4_ID,RS2_ID));dsList.add(createDSInfo(DS5_ID,RS3_ID));dsList.add(createDSInfo(DS6_ID,RS3_ID));break;case STEP_9:rsList.add(createRSInfo(RS1_ID));rsList.add(createRSInfo(RS2_ID));rsList.add(createRSInfo(RS3_ID));dsList.add(createDSInfo(DS1_ID,RS1_ID));dsList.add(createDSInfo(DS2_ID,RS1_ID));dsList.add(createDSInfo(DS3_ID,RS2_ID));dsList.add(createDSInfo(DS4_ID,RS2_ID));dsList.add(createDSInfo(DS5_ID,RS3_ID));break;case STEP_10:rsList.add(createRSInfo(RS1_ID));rsList.add(createRSInfo(RS2_ID));rsList.add(createRSInfo(RS3_ID));dsList.add(createDSInfo(DS1_ID,RS1_ID));dsList.add(createDSInfo(DS2_ID,RS1_ID));dsList.add(createDSInfo(DS3_ID,RS2_ID));dsList.add(createDSInfo(DS4_ID,RS2_ID));dsList.add(createDSInfo(DS5_ID,RS3_ID));dsList.add(createDSInfo(DS6_ID,RS3_ID));break;case STEP_11:rsList.add(createRSInfo(RS1_ID));rsList.add(createRSInfo(RS2_ID));dsList.add(createDSInfo(DS1_ID,RS1_ID));dsList.add(createDSInfo(DS2_ID,RS1_ID));dsList.add(createDSInfo(DS3_ID,RS2_ID));dsList.add(createDSInfo(DS4_ID,RS2_ID));dsList.add(createDSInfo(DS5_ID,RS2_ID));dsList.add(createDSInfo(DS6_ID,RS2_ID));break;case STEP_12:rsList.add(createRSInfo(RS1_ID));rsList.add(createRSInfo(RS2_ID));rsList.add(createRSInfo(RS3_ID));dsList.add(createDSInfo(DS1_ID,RS1_ID));dsList.add(createDSInfo(DS2_ID,RS1_ID));dsList.add(createDSInfo(DS3_ID,RS2_ID));dsList.add(createDSInfo(DS4_ID,RS2_ID));dsList.add(createDSInfo(DS5_ID,RS3_ID));dsList.add(createDSInfo(DS6_ID,RS3_ID));break;case STEP_13:rsList.add(createRSInfo(RS1_ID));rsList.add(createRSInfo(RS3_ID));dsList.add(createDSInfo(DS1_ID,RS1_ID));dsList.add(createDSInfo(DS2_ID,RS1_ID));dsList.add(createDSInfo(DS5_ID,RS3_ID));dsList.add(createDSInfo(DS6_ID,RS3_ID));break;default :fail("Unknown test step: " + step);}return new TopoView(dsList,rsList);}  }
class C{  public synchronized boolean isDesignTime(){  return designTime;}  }
class C{  static boolean isSystemWindows(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  public DataConstraintException(String msg,Throwable rootCause){  super(msg,rootCause);}  }
class C{  public void insert_wchar(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wchar",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_wchar(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void paintComponent(Graphics g,Component c,Container p,int x,int y,int w,int h){  paintComponent(g,c,p,x,y,w,h,false);}  }
class C{  public static int readSingleByte(InputStream in) throws IOException {  byte[] buffer=new byte[1];  int result=in.read(buffer,0,1);  return (result != -1) ? buffer[0] & 0xff : -1;}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aEngine,StoreDescription parentDesc) throws Exception {  if (aEngine instanceof StandardEngine) {    StandardEngine engine=(StandardEngine)aEngine;    LifecycleListener listeners[]=((Lifecycle)engine).findLifecycleListeners();    storeElementArray(aWriter,indent,listeners);    Realm realm=engine.getRealm();    Realm parentRealm=null;    if (engine.getParent() != null) {      parentRealm=engine.getParent().getRealm();    }    if (realm != parentRealm) {      storeElement(aWriter,indent,realm);    }    Valve valves[]=engine.getPipeline().getValves();    if (valves != null && valves.length > 0) {      List<Valve> engineValves=new ArrayList<>();      for (int i=0; i < valves.length; i++) {        if (!(valves[i] instanceof ClusterValve))         engineValves.add(valves[i]);      }      storeElementArray(aWriter,indent,engineValves.toArray());    }    Cluster cluster=engine.getCluster();    if (cluster != null) {      storeElement(aWriter,indent,cluster);    }    Container children[]=engine.findChildren();    storeElementArray(aWriter,indent,children);  }}  }
class C{  public void namespaceAfterStartElement(String uri,String prefix) throws SAXException {}  }
class C{  public void decompile(String path){  ClassNode cn=nodes.get(path);  if (cn == null) {    System.err.println(path + " IS NOT A CLASSNODE!");    return;  }  currNode=cn;  mode.updateCurrentNode(cn);  mode.decompile(cn,txtEdit,doc);  txtEdit.setCaretPosition(0);}  }
class C{  @Override public boolean is_contained_in(ShapeTileBox p_box){  return (oct_lx >= p_box.box_ll.v_x && oct_ly >= p_box.box_ll.v_y && oct_rx <= p_box.box_ur.v_x && oct_uy <= p_box.box_ur.v_y);}  }
class C{  public REBIND(int minorCode,CompletionStatus completionStatus){  this("",minorCode,completionStatus);}  }
class C{  public String toXml(Object obj,Class<?>... clas){  ByteArrayOutputStream out=new ByteArrayOutputStream();  toXml(obj,out,clas);  return out.toString();}  }
class C{  private void cleanUpIndeterminateValues(){  if (progressBar.isDisplayable()) {    stopAnimationTimer();  }  cycleTime=repaintInterval=0;  numFrames=animationIndex=0;  maxPosition=0;  delta=0.0;  boxRect=nextPaintRect=null;  componentInnards=oldComponentInnards=null;  progressBar.removeHierarchyListener(getHandler());}  }
class C{  public void clearAccessibleSelection(){  JList.this.clearSelection();}  }
class C{  boolean isAutomaticDialogSupportEnabled(){  return super.isAutomaticDialogSupportEnabled;}  }
class C{  public Assertion createAssertion(Object token,List attributes) throws SAMLException {  if (useLocal) {    return (assertionManager.createAssertion(token,attributes));  }  if (attributes == null || attributes.isEmpty())   return (createAssertion(token));  String assertion=null;  try {    List attrs=new LinkedList();    for (Iterator iter=attributes.iterator(); iter.hasNext(); ) {      Attribute attribute=(Attribute)iter.next();      attrs.add(attribute.toString(true,true));    }    SessionProvider sessionProvider=SessionManager.getProvider();    Object[] args={sessionProvider.getSessionID(token),attrs};    assertion=(String)stub.send("createAssertion2",args,null,null);    return (new Assertion(XMLUtils.toDOMDocument(assertion,SAMLUtils.debug).getDocumentElement()));  } catch (  Exception re) {    if (SAMLUtils.debug.warningEnabled()) {      SAMLUtils.debug.warning("AMC:createAssertion(SSO, attrs)",re);    }    throw (new SAMLException(re.getMessage()));  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AudienceElement createAudienceElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AudienceElementImpl(value);}  }
class C{  private CompletionStage<Done> prepareWriteCargo(CassandraSession session){  return session.prepare("INSERT INTO cargo (cargoId, name, description, owner,destination) VALUES (?, ?,?,?,?)").thenApply(null);}  }
class C{  public void insertUpdate(FlowView fv,DocumentEvent e,Rectangle alloc){  sync(fv);  super.insertUpdate(fv,e,alloc);}  }
class C{  public static boolean copyFile(String source,String destination) throws Exception {  BufferedInputStream bis=null;  BufferedOutputStream bos=null;  boolean result=false;  try {    bis=new BufferedInputStream(new FileInputStream(source));    bos=new BufferedOutputStream(new FileOutputStream(destination));    byte[] buf=new byte[4096];    int bytesRead;    while ((bytesRead=bis.read(buf,0,buf.length)) != -1) {      bos.write(buf,0,bytesRead);    }    result=true;  } catch (  Exception e) {    Debug.log("FileUtils.copyFile(): Error occurred while copying " + "file: " + source + " to: "+ destination,e);    throw e;  } finally {    if (bis != null) {      try {        bis.close();      } catch (      IOException e) {        Debug.log("FileUtils.copyFile(): Error occurred while " + "closing input stream for: " + source);      }    }    if (bos != null) {      try {        bos.flush();        bos.close();      } catch (      IOException e) {        Debug.log("FileUtils.copyFile(): Error occurred while " + "closing output stream for: " + destination);      }    }  }  return result;}  }
class C{  @Override public boolean isLeapYear(long prolepticYear){  return IsoChronology.INSTANCE.isLeapYear(prolepticYear + YEARS_DIFFERENCE);}  }
class C{  public void removeProperty(String name){  properties.remove(name);}  }
class C{  public Promise<List<ResourceResponse>,ResourceException> updatePolicies(Context context,Set<JsonValue> policies){  List<Promise<ResourceResponse,ResourceException>> promises=new ArrayList<>();  for (  JsonValue policy : policies) {    String policyName=policy.get("name").asString();    promises.add(policyResource.handleUpdate(context,Requests.newUpdateRequest(policyName,policy)));  }  return Promises.when(promises);}  }
class C{  public static String URLDecode(String str){  return URLDecode(str,null);}  }
class C{  @Override public void run(){  try {    while (alive) {      try {        packet.setLength(buffer.length);        socket.receive(packet);        String s=stringFromPacket(packet);        try {          Thread.sleep(100);        } catch (        InterruptedException ex) {        }        stringToPacket(s.toUpperCase(),packet);        packet.setAddress(InetAddress.getLocalHost());        packet.setPort(2345);        socket.send(packet);      } catch (      java.io.InterruptedIOException e) {      }    }  } catch (  java.io.IOException ex) {    ex.printStackTrace();  } finally {    socket.close();  }}  }
class C{  public void testLoginException01(){  LoginException lE=new LoginException();  assertNull("getMessage() must return null.",lE.getMessage());  assertNull("getCause() must return null",lE.getCause());}  }
class C{  public boolean _is_equivalent(org.omg.CORBA.Object that){  return equals(that);}  }
class C{  public boolean equals(Object o){  if (o instanceof ServiceSchemaManager) {    ServiceSchemaManager ossm=(ServiceSchemaManager)o;    if (serviceName.equals(ossm.serviceName) && version.equals(ossm.version)) {      return (true);    }  }  return (false);}  }
class C{  public Map<String,Set<String>> evaluate(Subject adminSubject,String realm,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  SubjectAttributesManager sac=SubjectAttributesManager.getInstance(adminSubject,realm);  Set<String> names=new HashSet<String>();  if ((propertyValues == null) || propertyValues.isEmpty()) {    names.add(propertyName);  } else {    names.addAll(propertyValues);  }  Map<String,Set<String>> values=sac.getUserAttributes(subject,names);  Set<String> tmp=new HashSet<String>();  if ((values != null) && !values.isEmpty()) {    for (    String k : values.keySet()) {      tmp.addAll(values.get(k));    }  }  Map<String,Set<String>> results=new HashMap<String,Set<String>>();  results.put(propertyName,tmp);  return results;}  }
class C{  private static void usage(String msg){  System.err.println(msg);  System.err.println("Usage: java Base64 -e|-d inputfile outputfile");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentcreatetextnode.class,args);}  }
class C{  @Override public boolean is_IntBox(){  for (int index=0; index < lines_size(); ++index) {    PlaLineInt curr_line=tline_get(index);    if (!curr_line.is_orthogonal())     return false;    if (!corner_is_bounded(index))     return false;  }  return true;}  }
class C{  public ShapeTileBox bounding_box(int p_from_corner_no,int p_to_corner_no){  int from_corner_no=Math.max(p_from_corner_no,0);  int to_corner_no=Math.min(p_to_corner_no,plaline_len(-2));  double llx=Integer.MAX_VALUE;  double lly=llx;  double urx=Integer.MIN_VALUE;  double ury=urx;  for (int i=from_corner_no; i <= to_corner_no; ++i) {    PlaPointFloat curr_corner=corner_approx(i);    llx=Math.min(llx,curr_corner.v_x);    lly=Math.min(lly,curr_corner.v_y);    urx=Math.max(urx,curr_corner.v_x);    ury=Math.max(ury,curr_corner.v_y);  }  PlaPointInt lower_left=new PlaPointInt(Math.floor(llx),Math.floor(lly));  PlaPointInt upper_right=new PlaPointInt(Math.ceil(urx),Math.ceil(ury));  return new ShapeTileBox(lower_left,upper_right);}  }
class C{  private static void printLocale(Locale loc){  System.out.println();  System.out.println(loc.getDisplayName());  System.out.println(loc.getCountry());  System.out.println(loc.getLanguage());  System.out.println(loc.getDisplayCountry());  System.out.println(loc.getDisplayLanguage());  System.out.println(loc.getDisplayName());  System.out.println(loc.getISO3Country());  System.out.println(loc.getISO3Language());}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_lang_String(){  StringTokenizer st=new StringTokenizer("This:is:a:test:String",":");  assertTrue("Created incorrect tokenizer",st.countTokens() == 5 && (st.nextElement().equals("This")));  st=new StringTokenizer("This:is:a:test:String",null);  try {    new StringTokenizer(null,":");    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Node child;  String childName;  String childValue;  int childType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  testEmployee=(Element)elementList.item(3);  child=testEmployee.getFirstChild();  childType=(int)child.getNodeType();  if (equals(3,childType)) {    child=child.getNextSibling();  }  childName=child.getNodeName();  assertEquals("nodename","employeeId",childName);  child=child.getFirstChild();  childValue=child.getNodeValue();  assertEquals("emp0004","EMP0004",childValue);}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String digestOID,CMSAttributeTableGenerator signedAttrGen,CMSAttributeTableGenerator unsignedAttrGen) throws IllegalArgumentException {  addSigner(key,subjectKeyID,getEncOID(key,digestOID),digestOID,signedAttrGen,unsignedAttrGen);}  }
class C{  private static void writeAdd(LDIFWriter writer,Entry entry) throws IOException {  writer.writeAddChangeRecord(entry);  writer.flush();}  }
class C{  ParseOutput walkTree(Node nd) throws Exception {  Vector elements=new Vector();  Vector retelements;  String pcdata=null;  Hashtable atts=new Hashtable();  NamedNodeMap nd_map=nd.getAttributes();  if (nd_map != null) {    for (int i=0; i < nd_map.getLength(); i++) {      Node att=nd_map.item(i);      atts.put(att.getNodeName(),att.getNodeValue());    }  }  for (Node ch=nd.getFirstChild(); ch != null; ch=ch.getNextSibling()) {switch (ch.getNodeType()) {case Node.ELEMENT_NODE:      elements.addElement(walkTree(ch));    break;case Node.TEXT_NODE:  String tmp=stripWhitespaces(ch.getNodeValue());if (tmp != null && tmp.length() != 0) {  pcdata=tmp;}break;default :}}String po_name=(String)elemmap.get(nd.getNodeName());ParseOutput po;if (po_name == null) {if (useGenericClass) {po=(ParseOutput)new GenericNode();} else {throw new Exception("No class registered for" + nd.getNodeName());}} else {try {po=(ParseOutput)Class.forName(po_name).newInstance();} catch (Exception ex) {StringBuilder buf=new StringBuilder();buf.append("Got Exception while creating class instance of ");buf.append(nd.getNodeName());buf.append(" :");buf.append(ex.toString());throw new Exception(buf.toString());}}po.process(nd.getNodeName(),elements,atts,pcdata);return po;}  }
class C{  public void paintButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void testField(){  checkDHPublicKey key=new checkDHPublicKey();  assertEquals("Incorrect serialVersionUID",key.getSerVerUID(),-6628103563352519193L);}  }
class C{  public void deleteLabeledUri(String luri) throws SSOException, SMSException {  validateServiceConfigImpl();  SMSEntry e=sc.getSMSEntry();  sc.setLabeledUri(null);  e.removeAttribute(SMSEntry.ATTR_LABELED_URI,luri);  saveSMSEntry(e);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  CCActionTable table=(CCActionTable)getChild(TBL_PROPERTY_NAMES);  table.restoreStateData();  Integer[] selected=tblPropertyNamesModel.getSelectedRows();  SerializedField szCache=(SerializedField)getChild(SZ_CACHE);  List list=(List)szCache.getSerializedObj();  Set toInherit=new HashSet(selected.length * 2);  for (int i=0; i < selected.length; i++) {    String name=(String)list.get(selected[i].intValue());    toInherit.add(ServerEditViewBeanBase.getActualPropertyName(name));  }  Set notToInherit=new HashSet(list.size() * 2);  for (Iterator i=list.iterator(); i.hasNext(); ) {    String name=(String)i.next();    notToInherit.add(ServerEditViewBeanBase.getActualPropertyName(name));  }  notToInherit.removeAll(toInherit);  try {    ServerSiteModel model=(ServerSiteModel)getModel();    String serverName=(String)getPageSessionAttribute(ServerEditViewBeanBase.PG_ATTR_SERVER_NAME);    model.updateServerConfigInheritance(serverName,toInherit,notToInherit);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","servercfg.inheritance.updated");  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public Dimension maximumLayoutSize(Container target){  checkContainer(target);  checkRequests();  Dimension size=new Dimension(xTotal.maximum,yTotal.maximum);  Insets insets=target.getInsets();  size.width+=insets.left + insets.right;  size.height+=insets.top + insets.bottom;  return size;}  }
class C{  public ArraySet(int initialCapacity){  items=new ArrayList<E>(initialCapacity);}  }
class C{  public NO_MEMORY(){  this("");}  }
class C{  public ASN1Explicit(int tagClass,int tagNumber,ASN1Type type){  super(tagClass,tagNumber);  this.type=type;}  }
class C{  @SuppressWarnings("unchecked") private void mergeAt(int i){  if (DEBUG)   assert stackSize >= 2;  if (DEBUG)   assert i >= 0;  if (DEBUG)   assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  if (DEBUG)   assert len1 > 0 && len2 > 0;  if (DEBUG)   assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight((Comparable<Object>)a[base2],a,base1,len1,0);  if (DEBUG)   assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft((Comparable<Object>)a[base1 + len1 - 1],a,base2,len2,len2 - 1);  if (DEBUG)   assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  private void initializeInternal(TemplateFile templateFile,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  if (arguments.length == 0) {    throw new InitializationException(ERR_MAKELDIF_TAG_LIST_NO_ARGUMENTS.get(lineNumber));  }  valueStrings=new String[arguments.length];  valueWeights=new int[arguments.length];  cumulativeWeight=0;  random=templateFile.getRandom();  for (int i=0; i < arguments.length; i++) {    String s=arguments[i];    int weight=1;    int semicolonPos=s.lastIndexOf(';');    if (semicolonPos >= 0) {      try {        weight=Integer.parseInt(s.substring(semicolonPos + 1));        s=s.substring(0,semicolonPos);      } catch (      Exception e) {        warnings.add(WARN_MAKELDIF_TAG_LIST_INVALID_WEIGHT.get(lineNumber,s));      }    }    cumulativeWeight+=weight;    valueStrings[i]=s;    valueWeights[i]=cumulativeWeight;  }}  }
class C{  public void run(){  while (true) {    try {      sleep(defaultSleepTime);      if (debug.messageEnabled()) {        debug.message("Thread Waking up");        debug.message("timeoutHash :" + timeoutHash);      }      if ((timeoutHash != null) && (!timeoutHash.isEmpty())) {        Enumeration timeoutElem=timeoutHash.keys();        while (timeoutElem.hasMoreElements()) {          Object key=timeoutElem.nextElement();          Thread thread=(Thread)key;          Hashtable s=(Hashtable)timeoutHash.get(key);          long timeout=((Long)s.get("PageTimeout")).longValue();          long lastCallbackSent=((Long)s.get("LastCallbackSent")).longValue();          if (isLoginTimeout(lastCallbackSent,timeout)) {            if (debug.messageEnabled()) {              debug.message("Interrupting thread" + thread);            }            thread.interrupt();            timeoutHash.remove(key);            timedOutHash.put(thread,Boolean.TRUE);          }        }      }    } catch (    Exception e) {      debug.message("Error run : ",e);    }  }}  }
class C{  public boolean add(AccessibleState state){  if (states == null) {    states=new Vector();  }  if (!states.contains(state)) {    states.addElement(state);    return true;  } else {    return false;  }}  }
class C{  protected synchronized void destroy(){  if (log.isDebugEnabled()) {    log.debug(sm.getString("contextConfig.destroy"));  }  Server s=getServer();  if (s != null && !s.getState().isAvailable()) {    return;  }  if (context instanceof StandardContext) {    String workDir=((StandardContext)context).getWorkPath();    if (workDir != null) {      ExpandWar.delete(new File(workDir));    }  }}  }
class C{  public Set<String> keySet(){  if (myNamesSet == null) {    myNamesSet=Collections.unmodifiableSet(nameToDescription.keySet());  }  return myNamesSet;}  }
class C{  public boolean isIs(){  return is;}  }
class C{  private NSObject parseObject() throws ParseException {switch (data[index]) {case ARRAY_BEGIN_TOKEN:{      return parseArray();    }case DICTIONARY_BEGIN_TOKEN:{    return parseDictionary();  }case DATA_BEGIN_TOKEN:{  return parseData();}case QUOTEDSTRING_BEGIN_TOKEN:{String quotedString=parseQuotedString();if (quotedString.length() == 20 && quotedString.charAt(4) == DATE_DATE_FIELD_DELIMITER) {  try {    return new NSDate(quotedString);  } catch (  Exception ex) {    return new NSString(quotedString);  }} else {  return new NSString(quotedString);}}default :{if (data[index] > 0x2F && data[index] < 0x3A) {return parseDateString();} else {String parsedString=parseString();return new NSString(parsedString);}}}}  }
class C{  public void testMac04() throws NoSuchAlgorithmException, IllegalArgumentException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  try {    Mac.getInstance(null,defaultProviderName);    fail("NullPointerException or NoSuchAlgorithmException should be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      Mac.getInstance(invalidValues[i],defaultProviderName);      fail("NoSuchAlgorithmException must be throws when algorithm is not available: ".concat(invalidValues[i]));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodetextnodename.class,args);}  }
class C{  public static void returnLocallyAfterOperation(HttpServletResponse response,String opDoneURL,boolean isSuccess,String successString,String failureString){  try {    StringBuffer finalReturnURL=new StringBuffer();    finalReturnURL.append(opDoneURL);    char delimiter;    if (opDoneURL.indexOf(IFSConstants.QUESTION_MARK) < 0) {      delimiter=IFSConstants.QUESTION_MARK;    } else {      delimiter=IFSConstants.AMPERSAND;    }    finalReturnURL.append(delimiter).append(IFSConstants.LOGOUT_STATUS).append(IFSConstants.EQUAL_TO);    if (isSuccess) {      finalReturnURL.append(successString);    } else {      finalReturnURL.append(failureString);    }    response.sendRedirect(finalReturnURL.toString());    return;  } catch (  IOException e) {    FSUtils.debug.error("Redirect failed. Control halted:",e);    return;  }}  }
class C{  public void addEjb(ContextEjb ejb){  Reference ref=new EjbRef(ejb.getType(),ejb.getHome(),ejb.getRemote(),ejb.getLink());  Iterator<String> params=ejb.listProperties();  while (params.hasNext()) {    String paramName=params.next();    String paramValue=(String)ejb.getProperty(paramName);    StringRefAddr refAddr=new StringRefAddr(paramName,paramValue);    ref.add(refAddr);  }  try {    createSubcontexts(envCtx,ejb.getName());    envCtx.bind(ejb.getName(),ref);  } catch (  NamingException e) {    log.error(sm.getString("naming.bindFailed",e));  }}  }
class C{  public void parseAnnoValues(Collection<SAnno> annos) throws SyntaxException {  for (  SAnno sAnno : annos) {    AST.Anno anno=annotationRecorder.get(sAnno);    Map<SAnnoField,Value> map=new HashMap<>();    out:     for (    SAnnoField f : sAnno.type().annoFields()) {      if (anno == null) {        for (        Map.Entry<String,Object> entry : sAnno.alreadyCompiledAnnotationValueMap().entrySet()) {          if (entry.getKey().equals(f.name())) {            Value v=parseValueFromObject(entry.getValue());            map.put(f,v);            continue out;          }        }      } else {        for (        AST.Assignment a : anno.args) {          if (a.assignTo.name.equals(f.name())) {            Value v=parseValueFromExpression(a.assignFrom,f.type(),null);            v=checkAndCastAnnotationValues(v,a.assignTo.line_col());            map.put(f,v);            continue out;          }        }      }      if (f.defaultValue() == null) {        err.SyntaxException(f.name() + " is missing",anno == null ? LineCol.SYNTHETIC : anno.line_col());        return;      }    }    sAnno.values().putAll(map);  }}  }
class C{  public boolean hasAttribute(AttributeType attributeType,boolean includeSubordinates){  return hasAttribute(AttributeDescription.create(attributeType),includeSubordinates);}  }
class C{  public static ServerSideSortResponseControl newControl(final ResultCode result){  Reject.ifNull(result);  return new ServerSideSortResponseControl(false,result,null);}  }
class C{  public void addCertificate(String alias,File certificateFile) throws KeyStoreException, IllegalArgumentException {  ensureValid(alias,CERT_ALIAS_MSG);  ensureFileValid(certificateFile,CERT_REQUEST_FILE_MSG);  if (!certificateFile.exists() || !certificateFile.isFile()) {    LocalizableMessage msg=ERR_CERTMGR_INVALID_CERT_FILE.get(certificateFile.getAbsolutePath());    throw new IllegalArgumentException(msg.toString());  }  keyStore=null;  Platform.addCertificate(getKeyStore(),keyStoreType,keyStorePath,alias,password,certificateFile.getAbsolutePath());}  }
class C{  public void logRequestInfo(HTTPRequestInfo requestInfo){}  }
class C{  public static boolean isNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetfirstchildnull.class,args);}  }
class C{  private static boolean isURLEncoded(String s){  boolean urlEncoded=false;  if (s != null) {    if ((s.indexOf("%") != -1) || (s.indexOf("+") != -1)) {      urlEncoded=true;    }  }  return urlEncoded;}  }
class C{  public static final String formatDate(long value,DateFormat threadLocalformat){  Long longValue=Long.valueOf(value);  String cachedDate=formatCache.get(longValue);  if (cachedDate != null) {    return cachedDate;  }  String newDate=null;  Date dateValue=new Date(value);  if (threadLocalformat != null) {    newDate=threadLocalformat.format(dateValue);    updateFormatCache(longValue,newDate);  } else {synchronized (format) {      newDate=format.format(dateValue);    }    updateFormatCache(longValue,newDate);  }  return newDate;}  }
class C{  public boolean update(Long actionID,String actionName,Long appID){  if (actionID == null) {    throw new IllegalArgumentException("primary key null.");  }  ContentValues args=new ContentValues();  if (actionName != null) {    args.put(KEY_ACTIONNAME,actionName);  }  if (appID != null) {    args.put(KEY_APPID,appID);  }  if (args.size() > 0) {    return database.update(DATABASE_TABLE,args,KEY_ACTIONID + "=" + actionID,null) > 0;  }  return false;}  }
class C{  public void assignService(String realm) throws AMConsoleException {  String[] params={realm,AMAdminConstants.DISCOVERY_SERVICE};  try {    AMIdentityRepository repo=new AMIdentityRepository(getUserSSOToken(),realm);    AMIdentity realmIdentity=repo.getRealmIdentity();    Set servicesFromIdRepo=realmIdentity.getAssignableServices();    if (servicesFromIdRepo.contains(AMAdminConstants.DISCOVERY_SERVICE)) {      realmIdentity.assignService(AMAdminConstants.DISCOVERY_SERVICE,Collections.EMPTY_MAP);    } else {      OrganizationConfigManager orgCfgMgr=new OrganizationConfigManager(getUserSSOToken(),realm);      orgCfgMgr.assignService(AMAdminConstants.DISCOVERY_SERVICE,Collections.EMPTY_MAP);    }  } catch (  SSOException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,AMAdminConstants.DISCOVERY_SERVICE,strError};    logEvent("SSO_EXCEPTION_ASSIGN_SERVICE_TO_REALM",paramsEx);    throw new AMConsoleException(strError);  }catch (  IdRepoException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,AMAdminConstants.DISCOVERY_SERVICE,strError};    logEvent("IDREPO_EXCEPTION_ASSIGN_SERVICE_TO_REALM",paramsEx);    throw new AMConsoleException(strError);  }catch (  SMSException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,AMAdminConstants.DISCOVERY_SERVICE,strError};    logEvent("SMS_EXCEPTION_ASSIGN_SERVICE_TO_REALM",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public PlaPointFloat middle_point(PlaPointFloat p_to_point){  if (p_to_point == this)   return this;  double middle_x=0.5 * (v_x + p_to_point.v_x);  double middle_y=0.5 * (v_y + p_to_point.v_y);  return new PlaPointFloat(middle_x,middle_y);}  }
class C{  public static synchronized void suppress(){  if (token == null) {    token=new Token();    token.out=System.out;    token.err=System.err;    System.out.flush();    System.err.flush();    System.setOut(new PrintStream(new NullOutputStream()));    System.setErr(new PrintStream(new NullOutputStream()));  } else {    throw new IllegalStateException("Standard streams currently suppressed");  }}  }
class C{  public DTMAxisIterator cloneIterator(){  _isRestartable=false;  try {    final AncestorIterator clone=(AncestorIterator)super.clone();    clone._startNode=_startNode;    return clone;  } catch (  CloneNotSupportedException e) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null));  }}  }
class C{  public Observable<Void> addAccountObservable(Account account){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  addAccount(account,resultHandler.toHandler());  return resultHandler;}  }
class C{  public String encodeURL(String url){  return encodeURL(url,false);}  }
class C{  public void add(int index,E element){  delegate.insertElementAt(element,index);  fireIntervalAdded(this,index,index);}  }
class C{  public void test_getLowestSetBitPos(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int iNumber=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  int result=aNumber.getLowestSetBit();  assertTrue("incorrect value",result == iNumber);  byte[] aBytes_={127,0,3};  iNumber=0;  aNumber=new BigInteger(aSign,aBytes_);  result=aNumber.getLowestSetBit();  assertTrue("incorrect value",result == iNumber);  byte[] aBytes__={-128,0,0};  iNumber=23;  aNumber=new BigInteger(aSign,aBytes__);  result=aNumber.getLowestSetBit();  assertTrue("incorrect value",result == iNumber);}  }
class C{  @AfterClass public void entryCacheTestFini() throws Exception {  super.cache.finalizeEntryCache();}  }
class C{  private void append(StringBuilder result,String value,int[] index,String placeholder,MaskCharacter[] mask) throws ParseException {  for (int counter=0, maxCounter=mask.length; counter < maxCounter; counter++) {    mask[counter].append(result,value,index,placeholder);  }}  }
class C{  public boolean isRedirect(){switch (code) {case HTTP_PERM_REDIRECT:case HTTP_TEMP_REDIRECT:case HTTP_MULT_CHOICE:case HTTP_MOVED_PERM:case HTTP_MOVED_TEMP:case HTTP_SEE_OTHER:    return true;default :  return false;}}  }
class C{  public static synchronized void clearSystemErrContents(){  redirectedSystemErr.reset();}  }
class C{  public static ComponentUI createUI(JComponent list){  return new BasicListUI();}  }
class C{  public void selectAllAccessibleSelection(){  TreeModel model=JTree.this.getModel();  if (model != null) {    Object[] objPath={model.getRoot()};    if (objPath[0] == null)     return;    TreePath path=new TreePath(objPath);    JTree.this.addSelectionPath(path);  }}  }
class C{  public void assign(org.omg.DynamicAny.DynAny dyn_any) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("assign",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.assign(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static BooleanArgument reportAuthzIdArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_REPORT_AUTHZ_ID).shortIdentifier('E').description(INFO_DESCRIPTION_REPORT_AUTHZID.get()).buildArgument();}  }
class C{  public static Packet toPacket(ByteBuffer data){  final byte code=data.get();  final short id=(short)((data.get()) & 0xFF);  final short datalen=data.getShort();  final byte[] authData=new byte[16];  data.get(authData);  final PacketType type=PacketType.getPacketType(code);  Packet pkt=null;switch (type) {case ACCESS_ACCEPT:    pkt=new AccessAccept();  pkt.setAuthenticator(new ResponseAuthenticator(authData));break;case ACCESS_CHALLENGE:pkt=new AccessChallenge();pkt.setAuthenticator(new ResponseAuthenticator(authData));break;case ACCESS_REJECT:pkt=new AccessReject();pkt.setAuthenticator(new ResponseAuthenticator(authData));break;case ACCESS_REQUEST:pkt=new AccessRequest();pkt.setAuthenticator(new RequestAuthenticator(authData));break;case UNKNOWN:default :LOG.log(Level.WARNING,"Unsupported packet type code '" + code + "' received. Unable to handle packet.");return null;}pkt.setIdentifier(id);Attribute a=null;while ((a=PacketFactory.nextAttribute(data)) != null) {pkt.addAttribute(a);}return pkt;}  }
class C{  private boolean isSlavoGermanic(String value){  return value.indexOf('W') > -1 || value.indexOf('K') > -1 || value.indexOf("CZ") > -1 || value.indexOf("WITZ") > -1;}  }
class C{  private String processFloatToken(String token){  String result=token.replaceAll(groupSeparator,"");  if (!decimalSeparator.equals("\\."))   result=result.replaceAll(decimalSeparator,".");  boolean isNegative=false;  int preLen=negativePrefix.length();  if ((preLen > 0) && result.startsWith(negativePrefix)) {    isNegative=true;    result=result.substring(preLen);  }  int sufLen=negativeSuffix.length();  if ((sufLen > 0) && result.endsWith(negativeSuffix)) {    isNegative=true;    result=result.substring(result.length() - sufLen,result.length());  }  if (result.equals(nanString))   result="NaN";  if (result.equals(infinityString))   result="Infinity";  if (isNegative)   result="-" + result;  Matcher m=NON_ASCII_DIGIT.matcher(result);  if (m.find()) {    StringBuilder inASCII=new StringBuilder();    for (int i=0; i < result.length(); i++) {      char nextChar=result.charAt(i);      if (Character.isDigit(nextChar)) {        int d=Character.digit(nextChar,10);        if (d != -1)         inASCII.append(d); else         inASCII.append(nextChar);      } else {        inASCII.append(nextChar);      }    }    result=inASCII.toString();  }  return result;}  }
class C{  protected void fireAncestorAdded(JComponent source,int id,Container ancestor,Container ancestorParent){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == AncestorListener.class) {      AncestorEvent ancestorEvent=new AncestorEvent(source,id,ancestor,ancestorParent);      ((AncestorListener)listeners[i + 1]).ancestorAdded(ancestorEvent);    }  }}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  StatusAnalyzer(ReplicationServerDomain replicationServerDomain){  super("Replication server RS(" + replicationServerDomain.getLocalRSServerId() + ") status monitor for domain \""+ replicationServerDomain.getBaseDN()+ "\"");  this.replicationServerDomain=replicationServerDomain;}  }
class C{  private static void clearStack(int depth){  int a=0;  int b=0;  int c=0;  int d=0;  int e=0;  int f=0;  int g=0;  int h=0;  int i=0;  int j=0;  if (depth > 0) {    clearStack(depth - 1);  }}  }
class C{  public static void deregisterPasswordStorageScheme(DN configEntryDN){  PasswordStorageScheme<?> scheme=directoryServer.passwordStorageSchemesByDN.remove(configEntryDN);  if (scheme != null) {    directoryServer.passwordStorageSchemes.remove(toLowerCase(scheme.getStorageSchemeName()));    if (scheme.supportsAuthPasswordSyntax()) {      directoryServer.authPasswordStorageSchemes.remove(scheme.getAuthPasswordSchemeName());    }  }}  }
class C{  public static <K,V>Map<K,V> map(K key1,V value1,K key2,V value2,K key3,V value3,K key4,V value4,K key5,V value5){  return getInstance().mapInstance(key1,value1,key2,value2,key3,value3,key4,value4,key5,value5);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(size());  int mask=elements.length - 1;  for (int i=head; i != tail; i=(i + 1) & mask)   s.writeObject(elements[i]);}  }
class C{  public boolean isCombinedDecision(){  return combinedDecision;}  }
class C{  public synchronized <T>void sendEvent(T event,String key,boolean sendToDefaultBusAsWell){  RXBusEventIsNullException.checkEvent(event);  RXBusKeyIsNullException.checkKey(key);  SerializedSubject subject=getSubject(new RXQueueKey(event.getClass(),key),false);  if (subject != null)   subject.onNext(event);  if (sendToDefaultBusAsWell)   sendEvent(event);}  }
class C{  private static SearchFilter decodeCompoundFilter(FilterType filterType,String filterString,int startPos,int endPos) throws DirectoryException {  List<SearchFilter> filterComponents=new ArrayList<>();  if (startPos == endPos) {    if (filterType == FilterType.NOT) {      LocalizableMessage message=ERR_SEARCH_FILTER_NOT_EXACTLY_ONE.get(filterString,startPos,endPos);      throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);    } else {      return new SearchFilter(filterType,filterComponents,null,null,null,null,null,null,null,false);    }  }  if (filterString.charAt(startPos) != '(' || filterString.charAt(endPos - 1) != ')') {    LocalizableMessage message=ERR_SEARCH_FILTER_COMPOUND_MISSING_PARENTHESES.get(filterString,startPos,endPos);    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  int pendingOpens=0;  int openPos=-1;  for (int i=startPos; i < endPos; i++) {    char c=filterString.charAt(i);    if (c == '(') {      if (openPos < 0) {        openPos=i;      }      pendingOpens++;    } else     if (c == ')') {      pendingOpens--;      if (pendingOpens == 0) {        filterComponents.add(createFilterFromString(filterString,openPos,i + 1));        openPos=-1;      } else       if (pendingOpens < 0) {        LocalizableMessage message=ERR_SEARCH_FILTER_NO_CORRESPONDING_OPEN_PARENTHESIS.get(filterString,i);        throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);      }    } else     if (pendingOpens <= 0) {      LocalizableMessage message=ERR_SEARCH_FILTER_COMPOUND_MISSING_PARENTHESES.get(filterString,startPos,endPos);      throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);    }  }  if (pendingOpens != 0) {    LocalizableMessage message=ERR_SEARCH_FILTER_NO_CORRESPONDING_CLOSE_PARENTHESIS.get(filterString,openPos);    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  if (filterType == FilterType.NOT) {    if (filterComponents.size() != 1) {      LocalizableMessage message=ERR_SEARCH_FILTER_NOT_EXACTLY_ONE.get(filterString,startPos,endPos);      throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);    }    SearchFilter notComponent=filterComponents.get(0);    return new SearchFilter(filterType,null,notComponent,null,null,null,null,null,null,false);  } else   if ((filterType == FilterType.AND || filterType == FilterType.OR) && filterComponents.size() == 1) {    return filterComponents.get(0);  } else {    return new SearchFilter(filterType,filterComponents,null,null,null,null,null,null,null,false);  }}  }
class C{  public static Object construct(Class<?> targetType,Class<?> invoker,boolean[] primitives,Object[] args) throws Throwable {  if (primitives.length != args.length)   throw new LtBug("primitives.length should equal to args.length");  Constructor<?>[] constructors=targetType.getDeclaredConstructors();  List<Constructor<?>> candidates=new ArrayList<>();  for (  Constructor<?> con : constructors) {    if (!LtRuntime.haveAccess(con.getModifiers(),targetType,invoker))     continue;    if (con.getParameterCount() == args.length) {      if (canBeCandidate(con.getParameterTypes(),args)) {        candidates.add(con);      }    }  }  if (candidates.isEmpty()) {    StringBuilder sb=new StringBuilder().append(targetType.getName()).append("(");    boolean isFirst=true;    for (    Object arg : args) {      if (isFirst)       isFirst=false; else       sb.append(", ");      sb.append(arg == null ? "null" : arg.getClass().getName());    }    sb.append(")");    throw new LtRuntimeException("cannot find constructor " + sb.toString());  } else {    Constructor<?> constructor=findBestMatch(candidates,args,primitives);    transToRequiredType(args,constructor.getParameterTypes());    constructor.setAccessible(true);    try {      return constructor.newInstance(args);    } catch (    InvocationTargetException e) {      throw e.getTargetException();    }  }}  }
class C{  public void testUlpPos(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=-45;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.ulp();  String res="1E+45";  int resScale=-45;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  @Override public int show(final FragmentTransaction transaction,final String tag){  return delegate.show(transaction,tag);}  }
class C{  public void writeUint8(long n){  check(1);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  private Security(){}  }
class C{  public void verifyChain(Certificate[] chain) throws GeneralSecurityException {  for (int i=0; i < chain.length; i++) {    X509Certificate cert=(X509Certificate)chain[i];    cert.checkValidity(signDate);    if (i > 0)     chain[i - 1].verify(chain[i].getPublicKey());  }  LOGGER.info("All certificates are valid on " + signDate.toString());}  }
class C{  boolean searchMonitoringInformation(){  return searchMonitoringInformation;}  }
class C{  public StatusDetail createStatusDetail(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS_DETAIL,value);  if (obj == null) {    return new StatusDetailImpl(value);  } else {    return (StatusDetail)obj;  }}  }
class C{  public void updateUI(){  setUI((RootPaneUI)UIManager.getUI(this));}  }
class C{  public boolean isPluginEnabled(Plugin plugin){  if ((plugin != null) && (plugins.contains(plugin))) {    return plugin.isEnabled();  } else {    return false;  }}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.equals(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  protected void showToast(String text){  Toast.makeText(this,text,Toast.LENGTH_SHORT).show();}  }
class C{  public SortControl(String[] sortBy,boolean criticality) throws IOException {  super(OID,criticality,null);  SortKey[] sortKeys=new SortKey[sortBy.length];  for (int i=0; i < sortBy.length; i++) {    sortKeys[i]=new SortKey(sortBy[i]);  }  super.value=setEncodedValue(sortKeys);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Element qelement;  Attr attr;  Attr qattr;  String elemNoPrefix;  String elemPrefix;  String attrNoPrefix;  String attrPrefix;  doc=(Document)load("staff",false);  element=doc.createElementNS("http://www.w3.org/DOM/Test/elem","elem");  qelement=doc.createElementNS("http://www.w3.org/DOM/Test/elem","qual:qelem");  attr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","attr");  qattr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","qual:qattr");  elemNoPrefix=element.getPrefix();  elemPrefix=qelement.getPrefix();  attrNoPrefix=attr.getPrefix();  attrPrefix=qattr.getPrefix();  assertNull("nodegetprefix03_1",elemNoPrefix);  assertEquals("nodegetprefix03_2","qual",elemPrefix);  assertNull("nodegetprefix03_3",attrNoPrefix);  assertEquals("nodegetprefix03_4","qual",attrPrefix);}  }
class C{  private ConfigurationRepository createConfigRepositoryWithDNs(DN... dns) throws ConfigException {  ConfigurationRepository configRepository=mock(ConfigurationRepository.class);  for (  DN dn : dns) {    when(configRepository.hasEntry(dn)).thenReturn(true);  }  return configRepository;}  }
class C{  public SOAPClientException(String className){  this.className=className;}  }
class C{  public net.aimeizi.person.QueryParameter.Builder clearAgeStart(){  fieldSetFlags()[0]=false;  return this;}  }
class C{  private String escapeJsonString(final String s){  return StringEscapeUtils.escapeJava(s);}  }
class C{  public boolean equals(Object obj){  if (obj instanceof Parameter) {    Parameter other=(Parameter)obj;    return (other.executable.equals(executable) && other.index == index);  }  return false;}  }
class C{  public ServletSecurityElement(ServletSecurity annotation){  this(new HttpConstraintElement(annotation.value().value(),annotation.value().transportGuarantee(),annotation.value().rolesAllowed()));  List<HttpMethodConstraintElement> l=new ArrayList<>();  HttpMethodConstraint[] constraints=annotation.httpMethodConstraints();  if (constraints != null) {    for (int i=0; i < constraints.length; i++) {      HttpMethodConstraintElement e=new HttpMethodConstraintElement(constraints[i].value(),new HttpConstraintElement(constraints[i].emptyRoleSemantic(),constraints[i].transportGuarantee(),constraints[i].rolesAllowed()));      l.add(e);    }  }  addHttpMethodConstraints(l);}  }
class C{  public static IOFileFilter asFileFilter(FilenameFilter filter){  return new DelegateFileFilter(filter);}  }
class C{  public INTERNAL(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public static NoContentLicenseEntry noContent(String name,String author,String link){  return new NoContentLicenseEntry(name,author,link);}  }
class C{  private SessionResponse processMethod(SessionRequest req,Session requesterSession) throws SessionException {  SessionResponse res=new SessionResponse(req.getRequestID(),req.getMethodID());switch (req.getMethodID()) {case SessionRequest.GetSession:    try {      if (statelessSessionManager.containsJwt(requesterSession.getSessionID())) {        SSOTokenManager tokenManager=SSOTokenManager.getInstance();        final SSOToken statelessToken=tokenManager.createSSOToken(req.getSessionID());        if (!tokenManager.isValidToken(statelessToken)) {          throw new InvalidSessionIdException(req.getSessionID());        }      }      res.addSessionInfo(sessionService.getSessionInfo(requesterSession.getSessionID(),req.getResetFlag()));    } catch (    SSOException ssoe) {      return handleException(req,requesterSession.getSessionID(),SessionBundle.getString("invalidSessionID"));    }  break;case SessionRequest.GetValidSessions:String pattern=req.getPattern();SearchResults<SessionInfo> infoSearchResults=sessionService.getValidSessions(requesterSession,pattern);res.setStatus(infoSearchResults.getErrorCode());List<SessionInfo> sessionInfo=new ArrayList<>();sessionInfo.addAll(infoSearchResults.getSearchResults());res.setSessionInfo(sessionInfo);break;case SessionRequest.DestroySession:sessionService.destroySession(requesterSession,new SessionID(req.getDestroySessionID()));break;case SessionRequest.Logout:sessionService.logout(requesterSession);break;case SessionRequest.AddSessionListener:sessionService.addSessionListener(requesterSession,req.getNotificationURL());break;case SessionRequest.SetProperty:sessionService.setExternalProperty(this.clientToken,requesterSession.getSessionID(),req.getPropertyName(),req.getPropertyValue());break;case SessionRequest.GetSessionCount:String uuid=req.getUUID();Map sessions=sessionCount.getAllSessionsByUUID(uuid);if (sessions != null) {res.setSessionsForGivenUUID(sessions);}break;default :return handleException(req,requesterSession.getSessionID(),SessionBundle.getString("unknownRequestMethod"));}return res;}  }
class C{  public void updateUI(){  setUI((InternalFrameUI)UIManager.getUI(this));  invalidate();  if (desktopIcon != null) {    desktopIcon.updateUIWhenHidden();  }}  }
class C{  protected void initializeAutoscrolling(Point p){  if (component == null || !(component instanceof Autoscroll))   return;  autoScroller=createDropTargetAutoScroller(component,p);}  }
class C{  public void updateOperationMonitoringData(OperationType type,long time){  if (type.equals(OperationType.ADD)) {    addOperationCount.getAndIncrement();    addOperationTime.getAndAdd(time);  } else   if (type.equals(OperationType.SEARCH)) {    searchOperationCount.getAndIncrement();    searchOperationTime.getAndAdd(time);  } else   if (type.equals(OperationType.ABANDON)) {    abandonOperationCount.getAndIncrement();    abandonOperationTime.getAndAdd(time);  } else   if (type.equals(OperationType.BIND)) {    bindOperationCount.getAndIncrement();    bindOperationTime.getAndAdd(time);  } else   if (type.equals(OperationType.UNBIND)) {    unbindOperationCount.getAndIncrement();    unbindOperationTime.getAndAdd(time);  } else   if (type.equals(OperationType.COMPARE)) {    compOperationCount.getAndIncrement();    compOperationTime.getAndAdd(time);  } else   if (type.equals(OperationType.DELETE)) {    delOperationCount.getAndIncrement();    delOperationTime.getAndAdd(time);  } else   if (type.equals(OperationType.EXTENDED)) {    extOperationCount.getAndIncrement();    extOperationTime.getAndAdd(time);  } else   if (type.equals(OperationType.MODIFY)) {    modOperationCount.getAndIncrement();    modOperationTime.getAndAdd(time);  } else   if (type.equals(OperationType.MODIFY_DN)) {    moddnOperationCount.getAndIncrement();    moddnOperationTime.getAndAdd(time);  }}  }
class C{  public boolean accept(File dir,String name){  return false;}  }
class C{  @Override public void processExtendedOperation(ExtendedOperation operation){  String requestSymmetricKey=null;  String instanceKeyID=null;  ByteString requestValue=operation.getRequestValue();  if (requestValue == null) {    LocalizableMessage message=ERR_GET_SYMMETRIC_KEY_NO_VALUE.get();    operation.appendErrorMessage(message);    return;  }  try {    ASN1Reader reader=ASN1.getReader(requestValue);    reader.readStartSequence();    if (reader.hasNextElement() && reader.peekType() == TYPE_SYMMETRIC_KEY_ELEMENT) {      requestSymmetricKey=reader.readOctetStringAsString();    }    if (reader.hasNextElement() && reader.peekType() == TYPE_INSTANCE_KEY_ID_ELEMENT) {      instanceKeyID=reader.readOctetStringAsString();    }    reader.readEndSequence();  } catch (  DecodeException e) {    logger.traceException(e);    operation.appendErrorMessage(ERR_GET_SYMMETRIC_KEY_ASN1_DECODE_EXCEPTION.get(e.getMessage()));    return;  }catch (  Exception e) {    logger.traceException(e);    operation.setResultCode(ResultCode.PROTOCOL_ERROR);    LocalizableMessage message=ERR_GET_SYMMETRIC_KEY_DECODE_EXCEPTION.get(StaticUtils.getExceptionMessage(e));    operation.appendErrorMessage(message);    return;  }  CryptoManagerImpl cm=DirectoryServer.getCryptoManager();  try {    String responseSymmetricKey=cm.reencodeSymmetricKeyAttribute(requestSymmetricKey,instanceKeyID);    operation.setResponseOID(ServerConstants.OID_GET_SYMMETRIC_KEY_EXTENDED_OP);    operation.setResponseValue(ByteString.valueOfUtf8(responseSymmetricKey));    operation.setResultCode(ResultCode.SUCCESS);  } catch (  CryptoManagerException e) {    operation.setResultCode(DirectoryServer.getServerErrorResultCode());    operation.appendErrorMessage(e.getMessageObject());  }catch (  Exception e) {    operation.setResultCode(DirectoryServer.getServerErrorResultCode());    operation.appendErrorMessage(StaticUtils.getExceptionMessage(e));  }}  }
class C{  private static LDAPFilter createANDFilter(FilterSet filterSet) throws LDAPException, IOException {  List<JAXBElement<?>> list=filterSet.getFilterGroup();  ArrayList<RawFilter> filters=new ArrayList<>(list.size());  for (  JAXBElement<?> filter : list) {    filters.add(createFilter(filter));  }  return LDAPFilter.createANDFilter(filters);}  }
class C{  private Class<?> findClassNonDalvik(String name) throws ClassNotFoundException {  String pathName=CLASS_PATH + name + ".class";  File path=new File(pathName);  RandomAccessFile raf;  try {    raf=new RandomAccessFile(path,"r");  } catch (  FileNotFoundException fnfe) {    throw new ClassNotFoundException("Not found: " + pathName);  }  byte[] fileData;  try {    fileData=new byte[(int)raf.length()];    raf.readFully(fileData);  } catch (  IOException ioe) {    throw new ClassNotFoundException("Read error: " + pathName);  } finally {    try {      raf.close();    } catch (    IOException ioe) {    }  }  try {    return defineClass(name,fileData,0,fileData.length);  } catch (  Throwable th) {    throw new ClassNotFoundException("defineClass failed",th);  }}  }
class C{  public StateInvariantError(String s){  super(s);}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.xpath.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  @Override public Object clone(){  DecimalFormat other=(DecimalFormat)super.clone();  other.symbols=(DecimalFormatSymbols)symbols.clone();  other.digitList=(DigitList)digitList.clone();  other.fastPathCheckNeeded=true;  other.isFastPath=false;  other.fastPathData=null;  return other;}  }
class C{  private String decrypt(String input){  String decrypted="";  int i=0;  for (  char in : input.toCharArray()) {    Integer map=modifiers.get(i % 5);    if (map == null) {      return input;    }    int charInt=((in) ^ map);    decrypted+=(char)charInt;    i++;  }  return decrypted;}  }
class C{  private boolean mustAdd(String name,String oid,String primaryNameOrOID,Collection<String> names){  List<String> values=new ArrayList<>(names.size() + 2);  values.add(oid);  if (!primaryNameOrOID.equals(oid)) {    values.add(primaryNameOrOID);  }  for (  String v : names) {    values.add(toLowerCase(v));  }  return matchFilter(values,name,false);}  }
class C{  public <T>StandardMBean(T implementation,Class<T> mbeanInterface) throws NotCompliantMBeanException {  construct(implementation,mbeanInterface,false,false);}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public BrdLayerStructure(Collection<DsnLayer> p_layers){  layers_list=new ArrayList<BrdLayer>(p_layers.size());  for (  DsnLayer a_layer : p_layers) {    layers_list.add(new BrdLayer(a_layer.layer_no,a_layer.name,a_layer.is_signal));  }  Collections.sort(layers_list);}  }
class C{  protected void create(String fullId,String type,String localId,Map<String,Object> obj,Connection connection,PreparedStatement createStatement,boolean batchCreate) throws SQLException, IOException {  logger.debug("Create with fullid {}",fullId);  String rev="0";  obj.put("_id",localId);  obj.put("_rev",rev);  JsonValue objVal=new JsonValue(obj);  logger.debug("Preparing statement {} with {}, {}, {}",createStatement,type,localId,rev);  populatePrepStatementColumns(createStatement,objVal,tokenReplacementPropPointers);  if (!batchCreate) {    logger.debug("Executing: {}",createStatement);    int val=createStatement.executeUpdate();    logger.debug("Created object for id {} with rev {}",fullId,rev);  } else {    createStatement.addBatch();    logger.debug("Added create for object id {} with rev {} to batch",fullId,rev);  }}  }
class C{  @Inject public AccessTokenService(Map<String,GrantTypeHandler> grantTypeHandlers,final ClientAuthenticator clientAuthenticator,final TokenStore tokenStore,final OAuth2ProviderSettingsFactory providerSettingsFactory,OAuth2UrisFactory urisFactory,final ConfirmationKeyValidator confirmationKeyValidator){  this.grantTypeHandlers=grantTypeHandlers;  this.clientAuthenticator=clientAuthenticator;  this.tokenStore=tokenStore;  this.providerSettingsFactory=providerSettingsFactory;  this.urisFactory=urisFactory;  this.confirmationKeyValidator=confirmationKeyValidator;}  }
class C{  public void start(Activity activity){  start(activity,REQUEST_CROP);}  }
class C{  public SkeletonNotFoundException(String s,Exception ex){  super(s,ex);}  }
class C{  @Override public Foo fetchByPrimaryKey(Serializable primaryKey){  Serializable serializable=entityCache.getResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey);  if (serializable == nullModel) {    return null;  }  Foo foo=(Foo)serializable;  if (foo == null) {    Session session=null;    try {      session=openSession();      foo=(Foo)session.get(FooImpl.class,primaryKey);      if (foo != null) {        cacheResult(foo);      } else {        entityCache.putResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey,nullModel);      }    } catch (    Exception e) {      entityCache.removeResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey);      throw processException(e);    } finally {      closeSession(session);    }  }  return foo;}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  String str=str();  ch.characters(str.toCharArray(),0,str.length());}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.AgreementMethodType.KANonce createAgreementMethodTypeKANonce(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.AgreementMethodTypeImpl.KANonceImpl(value);}  }
class C{  public Observable<Account> retrieveByUsernameObservable(String username){  io.vertx.rx.java.ObservableFuture<Account> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  retrieveByUsername(username,resultHandler.toHandler());  return resultHandler;}  }
class C{  public Position createPosition(int offset) throws BadLocationException {  while (queue.poll() != null) {    unusedMarks++;  }  if (unusedMarks > Math.max(5,(marks.size() / 10))) {    removeUnusedMarks();  }  int g0=getGapStart();  int g1=getGapEnd();  int index=(offset < g0) ? offset : offset + (g1 - g0);  search.index=index;  int sortIndex=findSortIndex(search);  MarkData m;  StickyPosition position;  if (sortIndex < marks.size() && (m=marks.elementAt(sortIndex)).index == index && (position=m.getPosition()) != null) {  } else {    position=new StickyPosition();    m=new MarkData(index,position,queue);    position.setMark(m);    marks.insertElementAt(m,sortIndex);  }  return position;}  }
class C{  @VisibleForTesting protected Map<String,String> calculateAddedServerDefaults(Map<String,String> newDefaults,Map<String,String> existingDefaults){  Map<String,String> addedValues=new HashMap<String,String>();  for (  Map.Entry<String,String> newAttr : newDefaults.entrySet()) {    if (!existingDefaults.containsKey(newAttr.getKey())) {      addedValues.put(newAttr.getKey(),newAttr.getValue());    }  }  return addedValues;}  }
class C{  protected boolean loggedIntoValidRealm(String requestedRealm,String loggedInRealm){  return requestedRealm.equalsIgnoreCase(loggedInRealm) || RealmUtils.isParentRealm(loggedInRealm,requestedRealm);}  }
class C{  public void printStackTrace(PrintStream s){  super.printStackTrace(s);  if (cause != null) {    cause.printStackTrace(s);  }}  }
class C{  public static boolean isConfigurationAcceptable(ReplicationServerCfg configuration,List<LocalizableMessage> unacceptableReasons){  int port=configuration.getReplicationPort();  try {    ServerSocket tmpSocket=new ServerSocket();    tmpSocket.bind(new InetSocketAddress(port));    tmpSocket.close();    return true;  } catch (  Exception e) {    LocalizableMessage message=ERR_COULD_NOT_BIND_CHANGELOG.get(port,e.getMessage());    unacceptableReasons.add(message);    return false;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AudienceRestrictionConditionElement createAudienceRestrictionConditionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AudienceRestrictionConditionElementImpl();}  }
class C{  public ContentEncodingParser(String contentEncoding){  super(contentEncoding);}  }
class C{  public void recycle(){  type=T_NULL;  byteC.recycle();  charC.recycle();  strValue=null;  hasStrValue=false;  hasHashCode=false;  hasLongValue=false;}  }
class C{  protected Expression number(int opPos) throws TransformerException {  return compileUnary(new org.apache.xpath.operations.Number(),opPos);}  }
class C{  public boolean isEqual(AttributeSet attr){  return ((getAttributeCount() == attr.getAttributeCount()) && containsAttributes(attr));}  }
class C{  static String format(String property,Object[] args){  String text=ResourceBundle.getBundle(Messages.class.getName()).getString(property);  return MessageFormat.format(text,args);}  }
class C{  public SizeLimitInputStream(final InputStream parentStream,final int readLimit){  this.parentStream=parentStream;  this.readLimit=readLimit;}  }
class C{  public static ArgumentException unableToSetNamingProperty(AbstractManagedObjectDefinition<?,?> d,PropertyDefinition<?> pd){  LocalizableMessage message=ERR_DSCFG_ERROR_UNABLE_TO_SET_NAMING_PROPERTY.get(pd.getName(),d.getUserFriendlyName());  return new ArgumentException(message);}  }
class C{  private MultiProtocolUtils(){}  }
class C{  protected void handleSESSION_EXPIRED(SessionMessage msg,Member sender) throws IOException {  counterReceive_EVT_SESSION_EXPIRED++;  DeltaSession session=(DeltaSession)findSession(msg.getSessionID());  if (session != null) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("deltaManager.receiveMessage.expired",getName(),msg.getSessionID()));    }    session.expire(notifySessionListenersOnReplication,false);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS06.class,args);}  }
class C{  public void testGenerateCertificates() throws Exception {  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  Certificate cert=certFs[0].generateCertificate(new ByteArrayInputStream(TestUtils.getEncodedX509Certificate()));  for (int i=0; i < certFs.length; i++) {    Collection<? extends Certificate> col=null;    col=certFs[i].generateCertificates(new ByteArrayInputStream(TestUtils.getEncodedX509Certificate()));    Iterator<? extends Certificate> it=col.iterator();    assertEquals("Incorrect Collection size",col.size(),1);    assertEquals("Incorrect Certificate in Collection",cert,it.next());  }}  }
class C{  public void paintToolBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private void addDITStructureRule(String definition,Schema currentSchema,SchemaBuilder schemaBuilder,Set<String> modifiedSchemaFiles) throws DirectoryException {  int ruleId=SchemaUtils.parseRuleID(definition);  final String finalDefinition;  if (!currentSchema.hasDITStructureRule(ruleId)) {    finalDefinition=completeDefinitionWhenAddingSchemaElement(definition,modifiedSchemaFiles);  } else {    DITStructureRule existingRule=currentSchema.getDITStructureRule(ruleId);    finalDefinition=completeDefinitionWhenReplacingSchemaElement(definition,existingRule,modifiedSchemaFiles);  }  schemaBuilder.addDITStructureRule(finalDefinition,true);}  }
class C{  public List<String> extractTokens(String queryString){  List<String> tokens=new ArrayList<String>();  Matcher matcher=tokenPattern.matcher(queryString);  while (matcher.find()) {    String origToken=matcher.group(1);    tokens.add(origToken);  }  return tokens;}  }
class C{  public String keyTypeName(Field field){  Type items=getApiaryConfig().getType(field.getTypeUrl());  return typeName(items,getField(items,"key"),"name");}  }
class C{  public HashPrintServiceAttributeSet(PrintServiceAttributeSet attributes){  super(attributes,PrintServiceAttribute.class);}  }
class C{  public SizeLimitExceededException(){  super();}  }
class C{  protected void start(PrintWriter writer,ContextName cn,StringManager smClient){  if (debug >= 1)   log("start: Starting web application '" + cn + "'");  if (!validateContextName(cn,writer,smClient)) {    return;  }  String displayPath=cn.getDisplayName();  try {    Context context=(Context)host.findChild(cn.getName());    if (context == null) {      writer.println(smClient.getString("managerServlet.noContext",RequestUtil.filter(displayPath)));      return;    }    context.start();    if (context.getState().isAvailable())     writer.println(smClient.getString("managerServlet.started",displayPath)); else     writer.println(smClient.getString("managerServlet.startFailed",displayPath));  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    getServletContext().log(sm.getString("managerServlet.startFailed",displayPath),t);    writer.println(smClient.getString("managerServlet.startFailed",displayPath));    writer.println(smClient.getString("managerServlet.exception",t.toString()));  }}  }
class C{  public static long hash64(final String text,int from,int length){  return hash64(text.substring(from,from + length));}  }
class C{  private void validateProvidedCookie(final MultiDomainServerState cookie,Set<DN> excludedBaseDNs) throws DirectoryException {  if (cookie != null && !cookie.isEmpty()) {    replicationServer.validateCookie(cookie,excludedBaseDNs);  }}  }
class C{  public static void main(String[] args){  System.out.println(toMap("key1","value1","key2","value2"));}  }
class C{  private void userCredentialsAdd(DirContext context,String dn,String credentials) throws NamingException {  context.addToEnvironment(Context.SECURITY_PRINCIPAL,dn);  context.addToEnvironment(Context.SECURITY_CREDENTIALS,credentials);}  }
class C{  private void safeSetFeature(DocumentBuilderFactory factory,String feature,boolean flag){  try {    factory.setFeature(feature,flag);  } catch (  ParserConfigurationException e) {    if (logFeatureWarnings.compareAndSet(false,true)) {      Logger.getLogger(PKG_NAME).log(Level.SEVERE,"DocumentBuilderFactory unsupported feature " + feature);    }  }}  }
class C{  public void testNotPos(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  int aSign=1;  byte rBytes[]={-1,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-27,116};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.not();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static float toFloat(final Object value){  if (value == null) {    return 0;  }  return new Float(value.toString());}  }
class C{  public StateInteractive key_typed(char p_key_char){  StateInteractive curr_return_state=this;  if (Character.isDigit(p_key_char)) {    BrdLayerStructure layer_structure=r_brd.layer_structure;    int digit=Character.digit(p_key_char,10);    digit=Math.min(digit,layer_structure.signal_layer_count());    digit=Math.max(digit - 1,0);    BrdLayer new_layer=layer_structure.get_signal_layer(digit);    digit=layer_structure.get_no(new_layer);    if (digit >= 0) {      change_layer_action(digit);    }  } else   if (p_key_char == '+') {    BrdLayerStructure layer_structure=r_brd.layer_structure;    int current_layer_no=i_brd.itera_settings.layer_no;    for (; ; ) {      ++current_layer_no;      if (current_layer_no >= layer_structure.size() || layer_structure.is_signal(current_layer_no)) {        break;      }    }    if (current_layer_no < layer_structure.size()) {      change_layer_action(current_layer_no);    }  } else   if (p_key_char == '-') {    board.BrdLayerStructure layer_structure=r_brd.layer_structure;    int current_layer_no=i_brd.itera_settings.layer_no;    for (; ; ) {      --current_layer_no;      if (current_layer_no < 0 || layer_structure.is_signal(current_layer_no)) {        break;      }    }    if (current_layer_no >= 0) {      change_layer_action(current_layer_no);    }  } else {    curr_return_state=super.key_typed(p_key_char);  }  return curr_return_state;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported07.class,args);}  }
class C{  public static void deleteDomain(DN dn){  LDAPReplicationDomain domain=domains.remove(dn);  if (domain != null) {    domain.delete();  }  if (domains.isEmpty()) {    stopReplayThreads();  }}  }
class C{  public RouteTracker(HttpHost target,InetAddress local){  if (target == null) {    throw new IllegalArgumentException("Target host may not be null.");  }  this.targetHost=target;  this.localAddress=local;  this.tunnelled=TunnelType.PLAIN;  this.layered=LayerType.PLAIN;}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  m_handler.endPrefixMapping(prefix);}  }
class C{  public ValidationElement(String validator,String rule){  _validator=validator;  _rule=rule;}  }
class C{  private boolean isThisSiteID(String sourceID){  return ((String)SAMLServiceManager.getAttribute(SAMLConstants.SITE_ID)).equals(sourceID) ? true : false;}  }
class C{  public boolean delete(String name){  String lcName=name.toLowerCase();  if (this.nameValueMap.containsKey(lcName)) {    this.nameValueMap.remove(lcName);    return true;  } else {    return false;  }}  }
class C{  @Override public int doStartTag() throws JspException {  i=0;  return EVAL_BODY_BUFFERED;}  }
class C{  protected AuthorizationResult evaluate(Context context,PrivilegeDefinition definition) throws InternalServerErrorException {  final String realm=(context.containsContext(RealmContext.class)) ? context.asContext(RealmContext.class).getRealm().asPath() : "/";  final SubjectContext subjectContext=context.asContext(SubjectContext.class);  final UriRouterContext routerContext=context.asContext(UriRouterContext.class);  final Set<String> actions=transformSet(definition.getActions(),ACTION_TO_STRING_MAPPER);  try {    Session callerSession=subjectContext.getCallerSession();    if (callerSession == null) {      return AuthorizationResult.accessDenied("No session for request.");    }    SSOToken token=subjectContext.getCallerSSOToken();    if (!ssoTokenManager.isValidToken(token)) {      return AuthorizationResult.accessDenied("No valid session in request.");    }    final String loggedInRealm=coreWrapper.convertOrgNameToRealmName(callerSession.getClientDomain());    final DelegationPermission permissionRequest=permissionFactory.newInstance(loggedInRealm,REST,VERSION,routerContext.getMatchedUri(),definition.getCommonVerb(),actions,Collections.<String,String>emptyMap());    boolean isRealmValid=isCASPAorJASPA(token) || loggedIntoValidRealm(realm,loggedInRealm);    if (evaluator.isAllowed(subjectContext.getCallerSSOToken(),permissionRequest,Collections.<String,Set<String>>emptyMap()) && isRealmValid) {      return AuthorizationResult.accessPermitted();    }  } catch (  DelegationException dE) {    throw new InternalServerErrorException("Attempt to authorise the user has failed",dE);  }catch (  SSOException e) {    return AuthorizationResult.accessDenied("No valid user supplied in request.");  }  return AuthorizationResult.accessDenied("The user has insufficient privileges");}  }
class C{  public void testConstrCharMathContext(){  try {    new BigDecimal(new char[]{},MathContext.DECIMAL32);    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }}  }
class C{  public static RunStats delegateGetBucketForBinaryBase64(int buckets) throws Exception {  Long startTime=System.currentTimeMillis();  PrimaryIndexBucketGeneratorImpl ibg=new PrimaryIndexBucketGeneratorImpl(FieldDataType.BINARY,buckets);  PrimaryIndexBucketLocatorImpl locator=new PrimaryIndexBucketLocatorImpl(null,null,null,null,null,null,ibg.generateBuckets(),null,null);  logger.debug("test to getBucket for the bucket distribution on BinaryBase64 Values");  HashMap<Long,List<Object>> hm=new HashMap<>();  SummaryStatistics stats=new SummaryStatistics();  for (int i=0; i < 40000; i++) {    String randomString=RandomStringUtils.randomAlphanumeric(40);    byte[] bytesEncoded=Base64.encodeBase64(randomString.getBytes());    String line=new String(bytesEncoded);    Long bucketId=locator.getBucket(line,FieldDataType.BINARY);    TestUtils.calculate(hm,stats,bucketId,line);  }  Long runTime=System.currentTimeMillis() - startTime;  RunStats runStats=new RunStats("BucketForBinaryBase64",FieldDataType.BINARY,runTime,stats,hm);  logger.debug(runStats.toString());  return runStats;}  }
class C{  protected static TrustAnchor findTrustAnchor(X509Certificate cert,Set trustAnchors,String sigProvider) throws AnnotatedException {  TrustAnchor trust=null;  PublicKey trustPublicKey=null;  Exception invalidKeyEx=null;  X509CertSelector certSelectX509=new X509CertSelector();  X500Principal certIssuer=getEncodedIssuerPrincipal(cert);  try {    certSelectX509.setSubject(certIssuer.getEncoded());  } catch (  IOException ex) {    throw new AnnotatedException("Cannot set subject search criteria for trust anchor.",ex);  }  Iterator iter=trustAnchors.iterator();  while (iter.hasNext() && trust == null) {    trust=(TrustAnchor)iter.next();    if (trust.getTrustedCert() != null) {      if (certSelectX509.match(trust.getTrustedCert())) {        trustPublicKey=trust.getTrustedCert().getPublicKey();      } else {        trust=null;      }    } else     if (trust.getCAName() != null && trust.getCAPublicKey() != null) {      try {        X500Principal caName=new X500Principal(trust.getCAName());        if (certIssuer.equals(caName)) {          trustPublicKey=trust.getCAPublicKey();        } else {          trust=null;        }      } catch (      IllegalArgumentException ex) {        trust=null;      }    } else {      trust=null;    }    if (trustPublicKey != null) {      try {        verifyX509Certificate(cert,trustPublicKey,sigProvider);      } catch (      Exception ex) {        invalidKeyEx=ex;        trust=null;        trustPublicKey=null;      }    }  }  if (trust == null && invalidKeyEx != null) {    throw new AnnotatedException("TrustAnchor found but certificate validation failed.",invalidKeyEx);  }  return trust;}  }
class C{  public SortControl(SortKey[] sortBy,boolean criticality) throws IOException {  super(OID,criticality,null);  super.value=setEncodedValue(sortBy);}  }
class C{  public StatementEvent(PooledConnection con,PreparedStatement statement,SQLException exception){  super(con);  this.statement=statement;  this.exception=exception;}  }
class C{  protected Expression(String expression,Class<T> expectedType,Bindings initialBindings) throws ExpressionException {  original=expression;  this.expectedType=expectedType;  this.initialBindings=initialBindings;  try {    ExpressionFactoryImpl exprFactory=new ExpressionFactoryImpl();    valueExpression=exprFactory.createValueExpression(new XLContext(null),expression,Object.class);  } catch (  ELException ele) {    throw new ExpressionException(ele);  }}  }
class C{  public void clear(){  while (queue.poll() != null)   ;  modCount++;  Entry<K>[] tab=table;  for (int i=0; i < tab.length; ++i)   tab[i]=null;  size=0;  while (queue.poll() != null)   ;}  }
class C{  public void triplet(Object obj1,Object obj2,int x){  Object localObj;synchronized (obj1) {synchronized (obj1) {      if (x == 0) {synchronized (obj1) {          localObj=obj2;        }      } else {        localObj=obj1;      }    }  }  doNothing(localObj);}  }
class C{  public MonitorInfo(String className,int identityHashCode,int stackDepth,StackTraceElement stackFrame){  super(className,identityHashCode);  if (stackDepth >= 0 && stackFrame == null) {    throw new IllegalArgumentException("Parameter stackDepth is " + stackDepth + " but stackFrame is null");  }  if (stackDepth < 0 && stackFrame != null) {    throw new IllegalArgumentException("Parameter stackDepth is " + stackDepth + " but stackFrame is not null");  }  this.stackDepth=stackDepth;  this.stackFrame=stackFrame;}  }
class C{  public static boolean isSPProfileBindingSupported(String realm,String spEntityID,String profile,String binding){  if ((saml2MetaManager == null) || (realm == null) || (spEntityID == null)|| (profile == null)|| (binding == null)) {    return false;  }  try {    SPSSODescriptorElement spDescriptor=saml2MetaManager.getSPSSODescriptor(realm,spEntityID);    List services=null;    if (SAML2Constants.ACS_SERVICE.equals(profile)) {      services=spDescriptor.getAssertionConsumerService();    } else     if (SAML2Constants.SLO_SERVICE.equals(profile)) {      services=spDescriptor.getSingleLogoutService();    } else     if (SAML2Constants.MNI_SERVICE.equals(profile)) {      services=spDescriptor.getManageNameIDService();    }    if ((services != null) && (!services.isEmpty())) {      Iterator iter=services.iterator();      while (iter.hasNext()) {        EndpointType endpoint=(EndpointType)iter.next();        if (binding.equals(endpoint.getBinding())) {          return true;        }      }    }  } catch (  SAML2MetaException me) {    debug.error("SAML2Utils.isSPProfileBindingSupported:",me);  }  return false;}  }
class C{  public PropertyException(Throwable exception){  super(exception);}  }
class C{  public static String strReplaceAll(String orig,String pattern,String str){  return orig.replaceAll(pattern,Matcher.quoteReplacement(str));}  }
class C{  protected static Long convertBinaryBase64ToLong(String binaryBase64) throws IllegalArgumentException {  if (binaryBase64 == null) {    return null;  }  if (binaryBase64.length() < 4) {    throw new IllegalArgumentException("Input is not a valid BinaryBase64 value, minimum length of BinaryBase64 is 4. Enter a valid value");  }  String first8Chars=null;  if (binaryBase64.length() >= 8) {    first8Chars=binaryBase64.substring(0,8);  } else {    first8Chars=binaryBase64;    int toPad=8 - first8Chars.length();    for (int i=0; i < toPad; i++) {      first8Chars+='\u0000';    }  }  byte[] bytes=first8Chars.getBytes();  return ByteBuffer.wrap(bytes).getLong();}  }
class C{  private void doSignalAll(Node first){  lastWaiter=firstWaiter=null;  do {    Node next=first.nextWaiter;    first.nextWaiter=null;    transferForSignal(first);    first=next;  } while (first != null);}  }
class C{  public void insert(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode next=location.next;  if (next == null) {    last=ilast;  } else {    next.prev=ilast;  }  location.next=ifirst;  ilast.next=next;  ifirst.prev=location;  cache=null;  insns.removeAll(false);}  }
class C{  private SortedSet<String> createRSListForTestCase(String testCase){  SortedSet<String> replServers=new TreeSet<>();  final int nbRSs=getNbRSs(testCase);  for (int i=0; i < nbRSs; i++) {    replServers.add("localhost:" + rsPort[i]);  }  return replServers;}  }
class C{  public ShutdownChannelGroupException(){}  }
class C{  public final void testPSSParameterSpec0203(){  try {    new PSSParameterSpec("SHA-1",null,MGF1ParameterSpec.SHA1,20,1);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  @SuppressWarnings("unused") static <T>ReplayPromise<List<T>> replayPromiseList(Class<T> componentType,final Duration timeout,final long time){  return new ReplayPromiseImpl<>(timeout,time);}  }
class C{  public void removeMember(Guid guid) throws UMSException {  Principal principal=getPrincipal();  if (principal == null) {    throw new IllegalArgumentException(i18n.getString(IUMSConstants.BAD_PRINCIPAL_HDL));  }  DataLayer.getInstance().removeAttributeValue(principal,guid,MEMBER_ATTR_NAME,this.getDN());}  }
class C{  public void testRemoveAttributeNS() throws Throwable {  Document doc;  Element element;  boolean state;  Attr attribute;  doc=(Document)load("staff",builder);  element=doc.createElementNS("http://www.w3.org/DOM","elem");  attribute=doc.createAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS","attr");  element.setAttributeNodeNS(attribute);  element.removeAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS","attr");  state=element.hasAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS","attr");  assertFalse("elementremoveattributens01",state);}  }
class C{  public KeyManagerImpl(KeyStore keyStore,char[] pwd){  this.hash=new Hashtable<String,PrivateKeyEntry>();  final Enumeration<String> aliases;  try {    aliases=keyStore.aliases();  } catch (  KeyStoreException e) {    return;  }  for (; aliases.hasMoreElements(); ) {    final String alias=aliases.nextElement();    try {      if (keyStore.entryInstanceOf(alias,KeyStore.PrivateKeyEntry.class)) {        final KeyStore.PrivateKeyEntry entry=(KeyStore.PrivateKeyEntry)keyStore.getEntry(alias,new KeyStore.PasswordProtection(pwd));        hash.put(alias,entry);      }    } catch (    KeyStoreException e) {      continue;    }catch (    UnrecoverableEntryException e) {      continue;    }catch (    NoSuchAlgorithmException e) {      continue;    }  }}  }
class C{  public void add(Permission permission){  if (!(permission instanceof UnresolvedPermission))   throw new IllegalArgumentException("invalid permission: " + permission);  UnresolvedPermission up=(UnresolvedPermission)permission;  List<UnresolvedPermission> v;synchronized (this) {    v=perms.get(up.getName());    if (v == null) {      v=new ArrayList<UnresolvedPermission>();      perms.put(up.getName(),v);    }  }synchronized (v) {    v.add(up);  }}  }
class C{  public RandomAccessFileOrArray createView(){  return new RandomAccessFileOrArray(new IndependentRandomAccessSource(byteSource));}  }
class C{  public void testTestBitNegative2(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=45;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertTrue(!aNumber.testBit(number));}  }
class C{  private static Set parseRealmData(String data,String orgDN){  Set returnData=Collections.EMPTY_SET;  String realm=DNMapper.orgNameToRealmName(orgDN);  if (data != null && data.length() != 0) {    StringTokenizer stz=new StringTokenizer(data,ISAuthConstants.PIPE_SEPARATOR);    returnData=new HashSet();    while (stz.hasMoreTokens()) {      String realmData=(String)stz.nextToken();      if (realmData != null && realmData.length() != 0) {        int index=realmData.indexOf(ISAuthConstants.COLON);        if (index == -1) {          realmData=toRealmQualifiedAuthnData(realm,realmData);        }        returnData.add(realmData);      }    }  }  if (utilDebug.messageEnabled()) {    utilDebug.message("parseRealmData:Input data : " + data);    utilDebug.message("parseRealmData:returnData : " + returnData);  }  return returnData;}  }
class C{  boolean containsNamingContext(DN dn){  return privateNamingContexts.containsKey(dn) || publicNamingContexts.containsKey(dn);}  }
class C{  @Override public void onRecordingDialogClick(String recordingName){  mService.saveRecordingAsync(recordingName);  mService.setModifiedRecordingName(null);}  }
class C{  static int bitLengthForInt(int n){  return 32 - Integer.numberOfLeadingZeros(n);}  }
class C{  public FrameBodyTDAT(){}  }
class C{  private static float[] CMYKtoRGB(float[] cmyk,float[] rgb){  if (rgb == null) {    rgb=new float[3];  }  rgb[0]=1.0f + cmyk[0] * cmyk[3] - cmyk[3] - cmyk[0];  rgb[1]=1.0f + cmyk[1] * cmyk[3] - cmyk[3] - cmyk[1];  rgb[2]=1.0f + cmyk[2] * cmyk[3] - cmyk[3] - cmyk[2];  return rgb;}  }
class C{  public final PlaSide side_of(PlaDirection p_other){  return PlaSide.get_side_of(determinant(p_other));}  }
class C{  public void disable_layer_item(int p_no){  if (change_layer_menu != null) {    change_layer_menu.disable_item(p_no);  }}  }
class C{  public int hashCode(){  if (initiator != null)   return initiator.hashCode(); else   if (acceptor != null)   return acceptor.hashCode(); else   if (appData != null)   return new String(appData).hashCode(); else   return 1;}  }
class C{  public FrameBodyTALB(){}  }
class C{  protected IdentifiedException(){  super();}  }
class C{  private ResourcePath managedId(String resourceId){  return resourceId != null ? managedObjectPath.child(resourceId) : managedObjectPath;}  }
class C{  public boolean isReplicationEnabled(){  return Boolean.TRUE.equals(serverProperties.get(ServerProperty.IS_REPLICATION_ENABLED));}  }
class C{  private boolean processUnbindRequest(LDAPMessage message,List<Control> controls){  UnbindOperationBasis unbindOp=new UnbindOperationBasis(this,nextOperationID.getAndIncrement(),message.getMessageID(),controls);  unbindOp.run();  return false;}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s11_linear_no_tag_repository();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public int hashCode(){  return getName().hashCode();}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder();  result.append('@');  result.append(klazz.getName());  result.append('(');  for (int i=0; i < elements.length; ++i) {    if (i != 0) {      result.append(", ");    }    result.append(elements[i]);  }  result.append(')');  return result.toString();}  }
class C{  private synchronized void linkStyleSheetAt(StyleSheet ss,int index){  if (resolvedStyles.size() > 0) {    Enumeration<ResolvedStyle> values=resolvedStyles.elements();    while (values.hasMoreElements()) {      ResolvedStyle rule=values.nextElement();      rule.insertExtendedStyleAt(ss.getRule(rule.getName()),index);    }  }}  }
class C{  @SuppressWarnings({"varargs","unchecked"}) public static <A>ImmutableList<A> of(final A x1,final A x2,final A x3,final A... rest){  return new ImmutableList<>(x1,new ImmutableList<>(x2,new ImmutableList<>(x3,from(rest))));}  }
class C{  public boolean isEmpty(){  return this.content.length == 0;}  }
class C{  public JEditorPane(URL initialPage) throws IOException {  this();  setPage(initialPage);}  }
class C{  public void replyChallenge(String name,String password,ChallengeException ce) throws IOException, NoSuchAlgorithmException, RejectException, ChallengeException {  StateAttribute state=(StateAttribute)ce.getAttributeSet().getAttributeByType(AttributeType.STATE);  if (state == null) {    throw new IOException("State not found in challenge");  }  AccessRequest req=createAccessRequest();  req.addAttribute(state);  if (name != null) {    req.addAttribute(new UserNameAttribute(name));  }  req.addAttribute(new UserPasswordAttribute(req.getAuthenticator(),secret,password));  req.addAttribute(new NASIPAddressAttribute(InetAddress.getLocalHost()));  req.addAttribute(new NASPortAttribute(socket.getLocalPort()));  sendPacket(req);}  }
class C{  ConstantLong(final DataInput input) throws IOException {  super(Const.CONSTANT_Long);  this.bytes=input.readLong();}  }
class C{  public synchronized boolean isIdle(){  return idleStartTimeNs != 0L;}  }
class C{  final void deregisterConstraint(Constraint constraint){  if (!constraints.remove(constraint)) {    throw new RuntimeException("Failed to deregister a constraint");  }}  }
class C{  DynamicGroup(Principal principal,Guid guid) throws UMSException {  super(principal,guid);  verifyClass();}  }
class C{  public PrinterMoreInfoManufacturer(URI uri){  super(uri);}  }
class C{  public static boolean isAuthenticated() throws IOException {  AuthenticatedFaceletsTag authenticatedTag=new AuthenticatedFaceletsTag();  return authenticatedTag.authorize();}  }
class C{  @Override public void run(){  running=true;  try {    listen();  } catch (  Exception x) {    log.error(sm.getString("nioReceiver.run.fail"),x);  } finally {    running=false;  }}  }
class C{  public CertificateParsingException(String message){  super(message);}  }
class C{  public static <K,V>SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V> map){  if (map == null) {    throw new NullPointerException("map == null");  }  return new SynchronizedSortedMap<K,V>(map);}  }
class C{  public BindOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,String protocolVersion,DN bindDN,ByteString simplePassword){  super(clientConnection,operationID,messageID,requestControls);  this.protocolVersion=protocolVersion;  this.bindDN=bindDN;  rawBindDN=computeRawBindDN(bindDN);  setSimplePassword(simplePassword);  cancelResult=getBindCancelResult();}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    out.write(data);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public boolean equals(XObject obj2){  int t=obj2.getType();  try {    if (XObject.CLASS_NODESET == t)     return obj2.equals(this); else     if (XObject.CLASS_BOOLEAN == t)     return obj2.bool() == bool(); else     if (XObject.CLASS_NUMBER == t)     return obj2.num() == num();  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }  return xstr().equals(obj2.xstr());}  }
class C{  public void append(char c){  if (this.length + 1 > this.ch.length) {    int newLength=this.ch.length * 2;    if (newLength < this.ch.length + DEFAULT_SIZE)     newLength=this.ch.length + DEFAULT_SIZE;    char[] newch=new char[newLength];    System.arraycopy(this.ch,0,newch,0,this.length);    this.ch=newch;  }  this.ch[this.length]=c;  this.length++;}  }
class C{  public void interrupt(){  interrupt=true;  while (!done) {    try {      readerThread.interrupt();    } catch (    Throwable t) {    }  }}  }
class C{  public static AztecCode encode(byte[] data,int minECCPercent,int userSpecifiedLayers){  BitArray bits=new HighLevelEncoder(data).encode();  int eccBits=bits.getSize() * minECCPercent / 100 + 11;  int totalSizeBits=bits.getSize() + eccBits;  boolean compact;  int layers;  int totalBitsInLayer;  int wordSize;  BitArray stuffedBits;  if (userSpecifiedLayers != DEFAULT_AZTEC_LAYERS) {    compact=userSpecifiedLayers < 0;    layers=Math.abs(userSpecifiedLayers);    if (layers > (compact ? MAX_NB_BITS_COMPACT : MAX_NB_BITS)) {      throw new IllegalArgumentException(String.format("Illegal value %s for layers",userSpecifiedLayers));    }    totalBitsInLayer=totalBitsInLayer(layers,compact);    wordSize=WORD_SIZE[layers];    int usableBitsInLayers=totalBitsInLayer - (totalBitsInLayer % wordSize);    stuffedBits=stuffBits(bits,wordSize);    if (stuffedBits.getSize() + eccBits > usableBitsInLayers) {      throw new IllegalArgumentException("Data to large for user specified layer");    }    if (compact && stuffedBits.getSize() > wordSize * 64) {      throw new IllegalArgumentException("Data to large for user specified layer");    }  } else {    wordSize=0;    stuffedBits=null;    for (int i=0; ; i++) {      if (i > MAX_NB_BITS) {        throw new IllegalArgumentException("Data too large for an Aztec code");      }      compact=i <= 3;      layers=compact ? i + 1 : i;      totalBitsInLayer=totalBitsInLayer(layers,compact);      if (totalSizeBits > totalBitsInLayer) {        continue;      }      if (wordSize != WORD_SIZE[layers]) {        wordSize=WORD_SIZE[layers];        stuffedBits=stuffBits(bits,wordSize);      }      int usableBitsInLayers=totalBitsInLayer - (totalBitsInLayer % wordSize);      if (compact && stuffedBits.getSize() > wordSize * 64) {        continue;      }      if (stuffedBits.getSize() + eccBits <= usableBitsInLayers) {        break;      }    }  }  BitArray messageBits=generateCheckWords(stuffedBits,totalBitsInLayer,wordSize);  int messageSizeInWords=stuffedBits.getSize() / wordSize;  BitArray modeMessage=generateModeMessage(compact,layers,messageSizeInWords);  int baseMatrixSize=compact ? 11 + layers * 4 : 14 + layers * 4;  int[] alignmentMap=new int[baseMatrixSize];  int matrixSize;  if (compact) {    matrixSize=baseMatrixSize;    for (int i=0; i < alignmentMap.length; i++) {      alignmentMap[i]=i;    }  } else {    matrixSize=baseMatrixSize + 1 + 2 * ((baseMatrixSize / 2 - 1) / 15);    int origCenter=baseMatrixSize / 2;    int center=matrixSize / 2;    for (int i=0; i < origCenter; i++) {      int newOffset=i + i / 15;      alignmentMap[origCenter - i - 1]=center - newOffset - 1;      alignmentMap[origCenter + i]=center + newOffset + 1;    }  }  BitMatrix matrix=new BitMatrix(matrixSize);  for (int i=0, rowOffset=0; i < layers; i++) {    int rowSize=compact ? (layers - i) * 4 + 9 : (layers - i) * 4 + 12;    for (int j=0; j < rowSize; j++) {      int columnOffset=j * 2;      for (int k=0; k < 2; k++) {        if (messageBits.get(rowOffset + columnOffset + k)) {          matrix.set(alignmentMap[i * 2 + k],alignmentMap[i * 2 + j]);        }        if (messageBits.get(rowOffset + rowSize * 2 + columnOffset + k)) {          matrix.set(alignmentMap[i * 2 + j],alignmentMap[baseMatrixSize - 1 - i * 2 - k]);        }        if (messageBits.get(rowOffset + rowSize * 4 + columnOffset + k)) {          matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - k],alignmentMap[baseMatrixSize - 1 - i * 2 - j]);        }        if (messageBits.get(rowOffset + rowSize * 6 + columnOffset + k)) {          matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - j],alignmentMap[i * 2 + k]);        }      }    }    rowOffset+=rowSize * 8;  }  drawModeMessage(matrix,compact,matrixSize,modeMessage);  if (compact) {    drawBullsEye(matrix,matrixSize / 2,5);  } else {    drawBullsEye(matrix,matrixSize / 2,7);    for (int i=0, j=0; i < baseMatrixSize / 2 - 1; i+=15, j+=16) {      for (int k=(matrixSize / 2) & 1; k < matrixSize; k+=2) {        matrix.set(matrixSize / 2 - j,k);        matrix.set(matrixSize / 2 + j,k);        matrix.set(k,matrixSize / 2 - j);        matrix.set(k,matrixSize / 2 + j);      }    }  }  AztecCode aztec=new AztecCode();  aztec.setCompact(compact);  aztec.setSize(matrixSize);  aztec.setLayers(layers);  aztec.setCodeWords(messageSizeInWords);  aztec.setMatrix(matrix);  return aztec;}  }
class C{  private static void readConcatenatedSchema(File concatSchemaFile,Set<String> attributeTypes,Set<String> objectClasses,Set<String> nameForms,Set<String> ditContentRules,Set<String> ditStructureRules,Set<String> matchingRuleUses,Set<String> ldapSyntaxes) throws IOException {  try (BufferedReader reader=new BufferedReader(new FileReader(concatSchemaFile))){    String line;    while ((line=reader.readLine()) != null) {      parseSchemaLine(line,null,attributeTypes,objectClasses,nameForms,ditContentRules,ditStructureRules,matchingRuleUses,ldapSyntaxes);    }  } }  }
class C{  public void handleButton1Request(RequestInvocationEvent event){  AgentsModel model=(AgentsModel)getModel();  String agentType=getAgentType();  AMPropertySheet prop=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  String agentGroupName=(String)propertySheetModel.getValue(TF_NAME);  agentGroupName=agentGroupName.trim();  String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  try {    if (agentType.equals(AgentConfiguration.AGENT_TYPE_J2EE) || agentType.equals(AgentConfiguration.AGENT_TYPE_WEB)) {      String serverURL=(String)propertySheetModel.getValue(TF_SERVER_URL);      serverURL=serverURL.trim();      model.createAgentGroup(curRealm,agentGroupName,agentType,serverURL,null);    } else {      model.createAgentGroup(curRealm,agentGroupName,agentType);    }    forwardToAgentsViewBean();  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public final void testCodeSigner_01(){  try {    CodeSigner cs=new CodeSigner(cpath,null);    assertNotNull(cs);  } catch (  Exception e) {    fail("Unexpected exception");  }}  }
class C{  public IllegalManagedObjectNameException(String illegalName){  this(illegalName,null);}  }
class C{  public RealmRuleSet(String prefix){  this.namespaceURI=null;  this.prefix=prefix;}  }
class C{  public void addSessionCookieInternal(final Cookie cookie){  if (isCommitted()) {    return;  }  String name=cookie.getName();  final String headername="Set-Cookie";  final String startsWith=name + "=";  String header=generateCookieString(cookie);  boolean set=false;  MimeHeaders headers=getCoyoteResponse().getMimeHeaders();  int n=headers.size();  for (int i=0; i < n; i++) {    if (headers.getName(i).toString().equals(headername)) {      if (headers.getValue(i).toString().startsWith(startsWith)) {        headers.getValue(i).setString(header);        set=true;      }    }  }  if (!set) {    addHeader(headername,header);  }}  }
class C{  public synchronized void remove(String item){  int index=items.indexOf(item);  if (index < 0) {    throw new IllegalArgumentException("item " + item + " not found in list");  } else {    remove(index);  }}  }
class C{  public static byte[] encryptText(byte[] password,String text){  byte[] data=getUTF8Bytes(text);  return encryptData(password,data.length,data);}  }
class C{  public ModifyCommonMsg(OperationContext ctx,DN dn){  super(ctx,dn);}  }
class C{  public static double signum(double d){  return (d == 0.0 || Double.isNaN(d)) ? d : copySign(1.0,d);}  }
class C{  public static ByteString createGeneralizedTimeValue(long time){  return ByteString.valueOfUtf8(format(time));}  }
class C{  public void testGetIssuers(){  X509CRLSelector selector=new X509CRLSelector();  X500Principal iss1=new X500Principal("O=First Org.");  X500Principal iss2=new X500Principal("O=Second Org.");  X500Principal iss3=new X500Principal("O=Third Org.");  assertNull("The collection should be null.",selector.getIssuers());  selector.addIssuer(iss1);  selector.addIssuer(iss2);  Collection<X500Principal> result=selector.getIssuers();  try {    result.add(iss3);    fail("The returned collection should be unmodifiable.");  } catch (  UnsupportedOperationException e) {  }  assertTrue("The collection should contain the specified DN.",result.contains(iss2));}  }
class C{  public SocketException(){}  }
class C{  public String nextLine(){  if (!hasNext()) {    throw new NoSuchElementException("No more lines");  }  String currentLine=cachedLine;  cachedLine=null;  return currentLine;}  }
class C{  @Override public void update(){  if (!tileExit) {    yPos-=pushThreshold;    updatePosition();    if (!rightCollide(true))     tileExit=true;    return;  }  if (yPos > HEIGHT) {    cycleStats=true;    return;  }  if (!custCollide(5,true)) {    yPos+=yVel;    xVel=1;  } else {    if (xVel == 1)     xVel=tempXVel;    if (rightCollide(true))     xVel=-xVel;  }  if (checkPlayerCollided()) {    Main.powerupTaken.play();    Main.updateScore(1000);    powerup_consumed=true;    cycleStats=true;  }  xPos+=xVel;  updatePosition();}  }
class C{  public static AppEventsLogger newLogger(Context context){  return new AppEventsLogger(context,null,null);}  }
class C{  public Set encryptString(Set values){  String tmp="";  if (!values.isEmpty()) {    tmp=(String)values.iterator().next();  }  Set rs=new HashSet(2);  rs.add((String)AccessController.doPrivileged(new EncryptAction(tmp)));  return rs;}  }
class C{  public void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {  try {    writeNormalizedChars(ch,start,length,m_lineSepUse);    if (m_tracer != null)     super.fireCDATAEvent(ch,start,length);  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    System.out.println("shootme: got an ACK! ");    System.out.println("Shootme : Dialog State = " + dialog.getState());    SipProvider provider=(SipProvider)requestEvent.getSource();    if (!callerSendsBye) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction ct=provider.getNewClientTransaction(byeRequest);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public boolean isIncludeInResult(){  return includeInResult;}  }
class C{  public synchronized static void closePool(String dbUrl,ODatabaseDocumentPool pool){  logger.debug("Close DB pool for {} {}",dbUrl,pool);  try {    pools.remove(dbUrl);    pool.close();    logger.trace("Closed pool for {} {}",dbUrl,pool);  } catch (  Exception ex) {    logger.info("Failure reported in closing pool {} {}",dbUrl,pool,ex);  }}  }
class C{  public void test_copy_check_index(){  ArrayList a1=new ArrayList();  a1.add("one");  a1.add("two");  ArrayList a2=new ArrayList();  a2.add("aa");  try {    Collections.copy(a2,a1);    fail("Expected IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  assertEquals("aa",a2.get(0));}  }
class C{  private void cancelAnimation(){  if (mCurrentAnimation != null) {    mCurrentAnimation.setDuration(0);    mCurrentAnimation.cancel();    mCurrentAnimation=null;  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  String data=transformer.transformToString(this);  transformer.getMsgMgr().message(this,data,m_terminate);  if (m_terminate)   transformer.getErrorListener().fatalError(new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_STYLESHEET_DIRECTED_TERMINATION,null)));}  }
class C{  public boolean hasNext(){  ensureOpen();  saveState();  while (!sourceClosed) {    if (hasTokenInBuffer())     return revertState(true);    readInput();  }  boolean result=hasTokenInBuffer();  return revertState(result);}  }
class C{  protected void handleDirectoryStart(File directory,int depth,Collection<T> results) throws IOException {}  }
class C{  public void addMessageDestination(MessageDestination md){synchronized (messageDestinations) {    messageDestinations.put(md.getName(),md);  }  fireContainerEvent("addMessageDestination",md.getName());}  }
class C{  @Override protected Object createCtsMonitoringMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  ctsMonitoringGroup=new CtsMonitoringImpl<OperationType,TokenType>(this,OperationType.class,TokenType.class);  return ctsMonitoringGroup;}  }
class C{  public boolean equals(Object object){  if (object != null && object instanceof SetOfIntegerSyntax) {    int[][] myMembers=this.members;    int[][] otherMembers=((SetOfIntegerSyntax)object).members;    int m=myMembers.length;    int n=otherMembers.length;    if (m == n) {      for (int i=0; i < m; ++i) {        if (myMembers[i][0] != otherMembers[i][0] || myMembers[i][1] != otherMembers[i][1]) {          return false;        }      }      return true;    } else {      return false;    }  } else {    return false;  }}  }
class C{  public static void appendAttribute(final UIComponent component,final String sourceKey,final String targetKey,final String valueToAppend) throws IOException {  String value=(String)component.getAttributes().get(sourceKey);  if (value == null) {    value=valueToAppend;  } else {    value=value.concat(" ").concat(valueToAppend);  }  JKJsfUtil.context().getResponseWriter().writeAttribute(targetKey,value,null);}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public boolean isServerRunning(){  boolean isServerRunning;  String lockFileName=SERVER_LOCK_FILE_NAME + LOCK_FILE_SUFFIX;  String lockFile=Utils.getPath(new File(installation.getLocksDirectory(),lockFileName));  StringBuilder failureReason=new StringBuilder();  try {    if (LockFileManager.acquireExclusiveLock(lockFile,failureReason)) {      LockFileManager.releaseLock(lockFile,failureReason);      isServerRunning=false;    } else {      isServerRunning=true;    }  } catch (  Throwable t) {    isServerRunning=true;  }  return isServerRunning;}  }
class C{  public PrefixFileFilter(String prefix,IOCase caseSensitivity){  if (prefix == null) {    throw new IllegalArgumentException("The prefix must not be null");  }  this.prefixes=new String[]{prefix};  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public ExtendedResponseProtocolOp(int resultCode){  this.resultCode=resultCode;}  }
class C{  private void nextGeneration(){  trip.signalAll();  count=parties;  generation=new Generation();}  }
class C{  public Identifier(Identifier id){  this.components=id.components();}  }
class C{  private void appendAffix(StringBuffer buffer,String affix,boolean localized){  boolean needQuote;  if (localized) {    needQuote=affix.indexOf(symbols.getZeroDigit()) >= 0 || affix.indexOf(symbols.getGroupingSeparator()) >= 0 || affix.indexOf(symbols.getDecimalSeparator()) >= 0 || affix.indexOf(symbols.getPercent()) >= 0 || affix.indexOf(symbols.getPerMill()) >= 0 || affix.indexOf(symbols.getDigit()) >= 0 || affix.indexOf(symbols.getPatternSeparator()) >= 0 || affix.indexOf(symbols.getMinusSign()) >= 0 || affix.indexOf(CURRENCY_SIGN) >= 0;  } else {    needQuote=affix.indexOf(PATTERN_ZERO_DIGIT) >= 0 || affix.indexOf(PATTERN_GROUPING_SEPARATOR) >= 0 || affix.indexOf(PATTERN_DECIMAL_SEPARATOR) >= 0 || affix.indexOf(PATTERN_PERCENT) >= 0 || affix.indexOf(PATTERN_PER_MILLE) >= 0 || affix.indexOf(PATTERN_DIGIT) >= 0 || affix.indexOf(PATTERN_SEPARATOR) >= 0 || affix.indexOf(PATTERN_MINUS) >= 0 || affix.indexOf(CURRENCY_SIGN) >= 0;  }  if (needQuote)   buffer.append('\'');  if (affix.indexOf('\'') < 0)   buffer.append(affix); else {    for (int j=0; j < affix.length(); ++j) {      char c=affix.charAt(j);      buffer.append(c);      if (c == '\'')       buffer.append(c);    }  }  if (needQuote)   buffer.append('\'');}  }
class C{  public boolean hasRole(String role){  if ("*".equals(role)) {    return true;  }  if (role == null) {    return false;  }  return Arrays.binarySearch(roles,role) >= 0;}  }
class C{  public static void assertColumnNames(ResultSet rs,String[] expectedColNames) throws SQLException {  ResultSetMetaData rsmd=rs.getMetaData();  int actualCols=rsmd.getColumnCount();  for (int i=0; i < actualCols; i++) {    assertEquals("Column names do not match:",expectedColNames[i],rsmd.getColumnName(i + 1));  }  assertEquals("Unexpected column count:",expectedColNames.length,rsmd.getColumnCount());}  }
class C{  public void _write(OutputStream output){  output.write_short(value);}  }
class C{  public synchronized void invalidateLayout(Container target){  checkContainer(target);  xChildren=null;  yChildren=null;  xTotal=null;  yTotal=null;}  }
class C{  public com.sun.identity.liberty.ws.paos.jaxb.StatusType createStatusType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.paos.jaxb.impl.StatusTypeImpl();}  }
class C{  public Object clone() throws CloneNotSupportedException {  if (digestSpi instanceof Cloneable) {    MessageDigestSpi digestSpiClone=(MessageDigestSpi)digestSpi.clone();    MessageDigest that=new Delegate(digestSpiClone,((MessageDigest)this).algorithm);    that.provider=((MessageDigest)this).provider;    that.state=((MessageDigest)this).state;    return that;  } else {    throw new CloneNotSupportedException();  }}  }
class C{  private int localizedWeekBasedYear(TemporalAccessor temporal){  int dow=localizedDayOfWeek(temporal);  int year=temporal.get(YEAR);  int doy=temporal.get(DAY_OF_YEAR);  int offset=startOfWeekOffset(doy,dow);  int week=computeWeek(offset,doy);  if (week == 0) {    return year - 1;  } else {    ValueRange dayRange=temporal.range(DAY_OF_YEAR);    int yearLen=(int)dayRange.getMaximum();    int newYearWeek=computeWeek(offset,yearLen + weekDef.getMinimalDaysInFirstWeek());    if (week >= newYearWeek) {      return year + 1;    }  }  return year;}  }
class C{  public Expected<T> expect(){  if (!complete()) {    throw new NoSuchElementException("No value present, result not returned.");  }  if (failure()) {    throw new IllegalStateException(cause());  }  return result.get().expect();}  }
class C{  private ResourceResultCache(PolicyProperties policyProperties) throws PolicyException {  this.policyProperties=policyProperties;  notificationHandler=new PolicyNotificationHandler(this);  cacheTtl=policyProperties.getCacheTtl();  if (policyProperties.notificationEnabled()) {    registerHandlerWithPLLClient(notificationHandler);    if (debug.messageEnabled()) {      debug.message("RsourceResultCache():" + "added policyNotificationHandler " + "with PLLClient");    }  }  if (debug.messageEnabled()) {    debug.message("RsourceResultCache():" + "Singleton Instance Created");  }}  }
class C{  public CodeSource(URL url,java.security.cert.Certificate certs[]){  this.location=url;  if (certs != null) {    this.certs=certs.clone();  }}  }
class C{  public LineSegment transformBy(Matrix m){  Vector newStart=startPoint.cross(m);  Vector newEnd=endPoint.cross(m);  return new LineSegment(newStart,newEnd);}  }
class C{  public R visitString(StringPropertyDefinition pd,String v,P p){  return visitUnknown(pd,v,p);}  }
class C{  private boolean autoroute_item(BrdItem p_item,int p_route_net_no,SortedSet<BrdItem> p_ripped_item_list,int ar_pass_no){  boolean contains_plane=false;  RuleNet route_net=routing_board.brd_rules.nets.get(p_route_net_no);  if (route_net != null) {    hdlg.userPrintln(classname + "autoroute_item_try: net " + route_net.name);    contains_plane=route_net.contains_plane();  } else {    hdlg.userPrintln(classname + "autoroute_item_try: item " + p_item+ " NO net ??");  }  int curr_via_costs;  if (contains_plane) {    curr_via_costs=itera_settings.autoroute_settings.get_plane_via_costs();  } else {    curr_via_costs=itera_settings.autoroute_settings.get_via_costs();  }  ArtControl autoroute_control=new ArtControl(routing_board,p_route_net_no,itera_settings,curr_via_costs,trace_cost_arr);  autoroute_control.ripup_costs=start_ripup_costs * ar_pass_no;  Set<BrdItem> unconnected_set=p_item.get_unconnected_set(p_route_net_no);  if (unconnected_set.size() == 0)   return true;  Set<BrdItem> connected_set=p_item.get_connected_set(p_route_net_no);  Set<BrdItem> route_start_set;  Set<BrdItem> route_dest_set;  if (contains_plane) {    for (    BrdItem curr_item : connected_set) {      if (curr_item instanceof BrdAreaConduction) {        return true;      }    }  }  if (contains_plane) {    route_start_set=connected_set;    route_dest_set=unconnected_set;  } else {    route_start_set=unconnected_set;    route_dest_set=connected_set;  }  calc_airline(route_start_set,route_dest_set);  TimeLimitStoppable time_limit=new TimeLimitStoppable(10 + ar_pass_no,s_thread);  ArtEngine autoroute_engine=new ArtEngine(routing_board,p_route_net_no,autoroute_control.trace_clearance_idx,time_limit);  ArtResult aresult=autoroute_engine.autoroute_connection(route_start_set,route_dest_set,autoroute_control,p_ripped_item_list);  if (aresult == ArtResult.ALREADY_CONNECTED) {    routing_board.userPrintln("how can it be already connected ?");    return true;  }  return aresult == ArtResult.ROUTED;}  }
class C{  public ServiceNotFoundException(String s){  super(s);}  }
class C{  protected void endNode(int node) throws org.xml.sax.SAXException {switch (m_dtm.getNodeType(node)) {case DTM.DOCUMENT_NODE:    this.m_contentHandler.endDocument();  break;case DTM.ELEMENT_NODE:String ns=m_dtm.getNamespaceURI(node);if (null == ns) ns="";this.m_contentHandler.endElement(ns,m_dtm.getLocalName(node),m_dtm.getNodeName(node));for (int nsn=m_dtm.getFirstNamespaceNode(node,true); DTM.NULL != nsn; nsn=m_dtm.getNextNamespaceNode(node,nsn,true)) {String prefix=m_dtm.getNodeNameX(nsn);this.m_contentHandler.endPrefixMapping(prefix);}break;case DTM.CDATA_SECTION_NODE:break;case DTM.ENTITY_REFERENCE_NODE:{if (m_contentHandler instanceof LexicalHandler) {LexicalHandler lh=((LexicalHandler)this.m_contentHandler);lh.endEntity(m_dtm.getNodeName(node));}}break;default :}}  }
class C{  public static <C extends ConfigurationClient,S extends Configuration>Reference<C,S> parseDN(ManagedObjectPath<?,?> path,InstantiableRelationDefinition<C,S> relationDef,String dnAsString){  AbstractManagedObjectDefinition<?,?> definition=path.getManagedObjectDefinition();  RelationDefinition<?,?> tmp=definition.getRelationDefinition(relationDef.getName());  if (tmp != relationDef) {    throw new IllegalArgumentException("The relation \"" + relationDef.getName() + "\" is not associated with the definition \""+ definition.getName()+ "\"");  }  DN dn=DN.valueOf(dnAsString);  RDN rdn=dn.rdn();  if (rdn == null) {    throw new IllegalArgumentException("Unabled to decode the DN string: \"" + dnAsString + "\"");  }  String name=rdn.getFirstAVA().getAttributeValue().toString();  DN expected=path.child(relationDef,name).toDN();  if (!dn.equals(expected)) {    throw new IllegalArgumentException("Unabled to decode the DN string: \"" + dnAsString + "\"");  }  return new Reference<>(path,relationDef,name);}  }
class C{  public void addField(String vorbisCommentKey,String value) throws KeyNotFoundException, FieldDataInvalidException {  TagField tagfield=createField(vorbisCommentKey,value);  addField(tagfield);}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  @Override public void addChild(Container child){  throw new IllegalStateException(sm.getString("standardWrapper.notChild"));}  }
class C{  public RequestedAuthnContext createRequestedAuthnContext(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.REQUESTED_AUTHN_CONTEXT,value);  if (obj == null) {    return new RequestedAuthnContextImpl(value);  } else {    return (RequestedAuthnContext)obj;  }}  }
class C{  public SignatureVisitor visitReturnType(){  return this;}  }
class C{  public Comparator(){  this(DEFAULT_DIRECTION,DEFAULT_SUBTRACTION_MODE,false);}  }
class C{  public DSAPrivateKeyImpl(DSAPrivateKeySpec keySpec){  super("DSA");  PrivateKeyInfo pki;  g=keySpec.getG();  p=keySpec.getP();  q=keySpec.getQ();  ThreeIntegerSequence threeInts=new ThreeIntegerSequence(p.toByteArray(),q.toByteArray(),g.toByteArray());  AlgorithmIdentifier ai=new AlgorithmIdentifier(AlgNameMapper.map2OID("DSA"),threeInts.getEncoded());  x=keySpec.getX();  pki=new PrivateKeyInfo(0,ai,ASN1Integer.getInstance().encode(x.toByteArray()),null);  setEncoding(pki.getEncoded());  params=new DSAParameterSpec(p,q,g);}  }
class C{  public void saveSharedStateAttributes(){  if (sharedState != null) {    for (    String sharedStateKey : SHARED_STATE_ATTRIBUTES) {      requestMap.put(sharedStateKey,(String)sharedState.get(sharedStateKey));    }  }}  }
class C{  public DataStoreProviderException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public BloomFilterBlacklist(Blacklist<T> delegate,long purgeDelayMs){  this(delegate,purgeDelayMs,BloomFilters.create(EntryFunnel.INSTANCE).withFalsePositiveProbability(FALSE_POSITIVE_PROBABILITY).withInitialCapacity(NUM_EXPECTED_BLACKLISTED_ENTRIES).withExpiryStrategy(EntryExpirationStrategy.INSTANCE).withCapacityGrowthFactor(CAPACITY_GROWTH_FACTOR).withFalsePositiveProbabilityScaleFactor(FALSE_POSITIVE_PROBABILITY_SCALE_FACTOR).withConcurrencyStrategy(ConcurrencyStrategy.ATOMIC).build());}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiListUI();  return MultiLookAndFeel.createUIs(mui,((MultiListUI)mui).uis,a);}  }
class C{  public void patchConfig(Context context,String resourceName,JsonValue patch) throws UpdateException {  try {    PatchRequest request=Requests.newPatchRequest(resourceName);    for (    PatchOperation op : PatchOperation.valueOfList(patch)) {      request.addPatchOperation(op);    }    connectionFactory.getConnection().patch(context,request);  } catch (  ResourceException e) {    throw new UpdateException("Patch request failed",e);  }}  }
class C{  @Override public synchronized Manager createManager(String name){  if (log.isDebugEnabled()) {    log.debug("Creating ClusterManager for context " + name + " using class "+ getManagerTemplate().getClass().getName());  }  ClusterManager manager=null;  try {    manager=managerTemplate.cloneFromTemplate();    manager.setName(name);  } catch (  Exception x) {    log.error(sm.getString("simpleTcpCluster.clustermanager.cloneFailed"),x);    manager=new org.apache.catalina.ha.session.DeltaManager();  } finally {    if (manager != null)     manager.setCluster(this);  }  return manager;}  }
class C{  @NonNull public static Interpolator reverse(Interpolator interpolator){  return new ReverseInterpolator(interpolator);}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  Log.d(TAG,"start FmRadioActivity.onOptionsItemSelected");switch (item.getItemId()) {case android.R.id.home:    onBackPressed();  break;case R.id.fm_channel_list:refreshImageButton(false);refreshActionMenuItem(false);refreshPopupMenuItem(false);refreshActionMenuPower(false);enterChannelList();break;case R.id.fm_power:Log.d(TAG,"click fm_power menu");if (mIsPlaying) {refreshImageButton(false);refreshActionMenuItem(false);refreshPopupMenuItem(false);refreshActionMenuPower(false);exitService();break;}powerUpFm();break;case R.id.fm_menu:item.setEnabled(false);mPopupMenu=new PopupMenu(mContext,findViewById(R.id.fm_menu));Menu menu=mPopupMenu.getMenu();mPopupMenu.getMenuInflater().inflate(R.menu.fm_menu,menu);mPopupMenu.setOnMenuItemClickListener(this);mPopupMenu.setOnDismissListener(this);boolean isPlaying=mService.isPowerUp();if (isPlaying) {menu.findItem(R.id.fm_record).setEnabled(true);menu.findItem(R.id.fm_sound_mode).setEnabled(!mService.isBtConnected());menu.findItem(R.id.fm_sound_mode).setTitle(mService.isSpeakerUsed() ? R.string.optmenu_earphone : R.string.optmenu_speaker);menu.findItem(R.id.fm_search).setEnabled(true);}refreshSoundModeVisiable();mPopupMenu.show();break;default :Log.e(TAG,"Error: Invalid options menu item.");break;}Log.d(TAG,"end FmRadioActivity.onOptionsItemSelected");return super.onOptionsItemSelected(item);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationMethodElement createAuthenticationMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationMethodElementImpl();}  }
class C{  public AsfTag(final Tag source,final boolean copy) throws UnsupportedEncodingException {  this(copy);  copyFrom(source);}  }
class C{  public Collection<ExpandDrillPage> overlapping_pages(ShapeTile p_shape){  Collection<ExpandDrillPage> result=new LinkedList<ExpandDrillPage>();  ShapeTileBox shape_box=p_shape.bounding_box().intersection(bounding_box);  int min_j=(int)Math.floor(((double)(shape_box.box_ll.v_y - bounding_box.box_ll.v_y)) / (double)page_height);  double max_j=((double)(shape_box.box_ur.v_y - bounding_box.box_ll.v_y)) / (double)page_height;  int min_i=(int)Math.floor(((double)(shape_box.box_ll.v_x - bounding_box.box_ll.v_x)) / (double)page_width);  double max_i=((double)(shape_box.box_ur.v_x - bounding_box.box_ll.v_x)) / (double)page_width;  for (int j=min_j; j < max_j; ++j) {    for (int i=min_i; i < max_i; ++i) {      ExpandDrillPage curr_page=page_arr[j][i];      ShapeTile intersection=p_shape.intersection(curr_page.page_shape);      if (intersection.dimension().is_area()) {        result.add(page_arr[j][i]);      }    }  }  return result;}  }
class C{  public static PrintStream printStream(){  return printStream;}  }
class C{  private boolean isUpdateMsgFiltered(UpdateMsg updateMsg){  if (handler.isDataServer()) {    final ServerStatus dsStatus=handler.getStatus();    if (dsStatus == BAD_GEN_ID_STATUS) {      logger.warn(WARN_IGNORING_UPDATE_FROM_DS_BADGENID,handler.getReplicationServerId(),updateMsg.getCSN(),handler.getBaseDN(),handler.getServerId(),session.getReadableRemoteAddress(),handler.getGenerationId(),handler.getReferenceGenId());      return true;    } else     if (dsStatus == FULL_UPDATE_STATUS) {      logger.warn(WARN_IGNORING_UPDATE_FROM_DS_FULLUP,handler.getReplicationServerId(),updateMsg.getCSN(),handler.getBaseDN(),handler.getServerId(),session.getReadableRemoteAddress());      return true;    }  } else {    long referenceGenerationId=handler.getReferenceGenId();    if (referenceGenerationId > 0 && referenceGenerationId != handler.getGenerationId()) {      logger.error(WARN_IGNORING_UPDATE_FROM_RS,handler.getReplicationServerId(),updateMsg.getCSN(),handler.getBaseDN(),handler.getServerId(),session.getReadableRemoteAddress(),handler.getGenerationId(),referenceGenerationId);      return true;    }  }  return false;}  }
class C{  public void testUpdate1(){  String newValue="newValue";  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field1='"+ newValue+ "'";  try {    int num=statement.executeUpdate(updateQuery);    assertEquals("Not all records in the database were updated",numberOfRecords,num);    String selectQuery="SELECT field1 FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    while (result.next()) {      assertEquals("The field field1 was not updated",newValue,result.getString("field1"));    }    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public int size(){  return namesAndValues.length / 2;}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public int hashCode(){  return sessionID.hashCode();}  }
class C{  public OpMapVector(int blocksize,int increaseSize,int lengthPos){  m_blocksize=increaseSize;  m_mapSize=blocksize;  m_lengthPos=lengthPos;  m_map=new int[blocksize];}  }
class C{  private PushNotificationServiceConfig(){}  }
class C{  @Override public void write(ASN1Writer stream) throws IOException {  stream.writeStartSequence(OP_TYPE_INTERMEDIATE_RESPONSE);  if (oid != null) {    stream.writeOctetString(TYPE_INTERMEDIATE_RESPONSE_OID,oid);  }  if (value != null) {    stream.writeOctetString(TYPE_INTERMEDIATE_RESPONSE_VALUE,value);  }  stream.writeEndSequence();}  }
class C{  public void destroySession(SessionID sid){  getSessionService().destroyAuthenticationSession(sid);}  }
class C{  public boolean isExists(String baseDir,String dn){  String hash=Hash.hash(dn);  hash=hash.replace('/','_');  File file=new File(baseDir + File.separator + hash);  return file.exists() || isNodeExists(dn);}  }
class C{  public FrameBodyTIME(){}  }
class C{  private void parseProperties(HttpServletRequest req,XMLWriter generatedXML,String path,int type,Vector<String> propertiesVector){  if (isSpecialPath(path))   return;  WebResource resource=resources.getResource(path);  if (!resource.exists()) {    return;  }  String href=req.getContextPath() + req.getServletPath();  if ((href.endsWith("/")) && (path.startsWith("/")))   href+=path.substring(1); else   href+=path;  if (resource.isDirectory() && (!href.endsWith("/")))   href+="/";  String rewrittenUrl=rewriteUrl(href);  generatePropFindResponse(generatedXML,rewrittenUrl,path,type,propertiesVector,resource.isFile(),false,resource.getCreation(),resource.getLastModified(),resource.getContentLength(),getServletContext().getMimeType(resource.getName()),resource.getETag());}  }
class C{  public static void putStringSet(String key,Set<String> values){  if (mSharedPreferences == null) {    return;  }  Editor editor=mSharedPreferences.edit();  editor.putStringSet(key,values);  editor.apply();}  }
class C{  public void actionPerformed(ActionEvent e){  DefaultCellEditor.this.stopCellEditing();}  }
class C{  public synchronized void write(int b){  ensureCapacity(count + 1);  buf[count]=(byte)b;  count+=1;}  }
class C{  RestAuthHttpRequestWrapper(HttpServletRequest request){  super(request);}  }
class C{  public LoginConfiguration sessionUpgrade(String ssoTokenId){  if (ssoTokenId != null) {    this.ssoTokenId=ssoTokenId;  }  return this;}  }
class C{  public void error(Object message){  log(Level.SEVERE,String.valueOf(message),null);}  }
class C{  @Override public void removeMimeMapping(String extension){synchronized (mimeMappings) {    mimeMappings.remove(extension);  }  fireContainerEvent("removeMimeMapping",extension);}  }
class C{  public boolean add(String valueString){  return add(ByteString.valueOfUtf8(valueString));}  }
class C{  public boolean usesShiftModifier(){  return usesShift;}  }
class C{  public static void registerBackendInitializationListener(BackendInitializationListener listener){  directoryServer.backendInitializationListeners.add(listener);}  }
class C{  boolean shouldUpdateSelectedStateFromAction(){  return true;}  }
class C{  public boolean isExportable(){  return isExportable;}  }
class C{  @VisibleForTesting InternalSession(SessionID sid,SessionService service,SessionServiceConfig serviceConfig,SessionEventBroker sessionEventBroker,SessionLogging sessionLogging,SessionAuditor sessionAuditor,SessionUtilsWrapper sessionUtilsWrapper,SessionConstraint sessionConstraint,Debug debug){  sessionID=sid;  setSessionServiceDependencies(service,serviceConfig,sessionEventBroker,sessionLogging,sessionAuditor,sessionUtilsWrapper,sessionConstraint,debug);  maxIdleTimeInMinutes=maxDefaultIdleTimeInMinutes;  maxSessionTimeInMinutes=maxDefaultIdleTimeInMinutes;  sessionState=SessionState.INVALID;  sessionProperties=new Properties();  willExpireFlag=true;  setCreationTime();}  }
class C{  public static StringArgument configClassArgument(final String configFileHandlerName) throws ArgumentException {  return StringArgument.builder(OPTION_LONG_CONFIG_CLASS).shortIdentifier(OPTION_SHORT_CONFIG_CLASS).description(INFO_DESCRIPTION_CONFIG_CLASS.get()).hidden().required().defaultValue(configFileHandlerName).valuePlaceholder(INFO_CONFIGCLASS_PLACEHOLDER.get()).buildArgument();}  }
class C{  public void testSetPublicKey4() throws Exception {  Identity i=new IdentityStub("testSetPublicKey4");  PublicKeyStub pk1=new PublicKeyStub("kkk","Identity.testSetPublicKey4",null);  CertificateStub c1=new CertificateStub("fff",null,null,pk1);  CertificateStub c2=new CertificateStub("zzz",null,null,pk1);  i.addCertificate(c1);  i.addCertificate(c2);  assertEquals(2,i.certificates().length);  assertSame(pk1,i.getPublicKey());  PublicKeyStub pk2=new PublicKeyStub("zzz","Identity.testSetPublicKey4",null);  i.setPublicKey(pk2);  assertSame(pk2,i.getPublicKey());  assertEquals(0,i.certificates().length);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypeinternalSubset01.class,args);}  }
class C{  public void rotate_90_degree(int p_factor){  if (p_factor == 0)   return;  BrdComponents components=r_brd.brd_components;  for (  BrdComponent curr_component : component_list) {    components.rotate_90_deg(curr_component.id_no,p_factor,current_position);  }  clearance_violations=new LinkedList<BrdItemViolation>();  for (  BrdItem curr_item : item_list) {    curr_item.rotate_90_deg(p_factor,current_position);    clearance_violations.addAll(curr_item.clearance_violations());  }  for (  IteraNetItems curr_net_items : net_items_list) {    i_brd.update_ratsnest(curr_net_items.net_no,curr_net_items.items);  }  actlog_start_scope(LogfileScope.TURN_90_DEGREE,p_factor);  i_brd.repaint();}  }
class C{  public Object[] allKeys(){  int count=size();  ActionMap parent=getParent();  if (count == 0) {    if (parent != null) {      return parent.allKeys();    }    return keys();  }  if (parent == null) {    return keys();  }  Object[] keys=keys();  Object[] pKeys=parent.allKeys();  if (pKeys == null) {    return keys;  }  if (keys == null) {    return pKeys;  }  HashMap<Object,Object> keyMap=new HashMap<Object,Object>();  int counter;  for (counter=keys.length - 1; counter >= 0; counter--) {    keyMap.put(keys[counter],keys[counter]);  }  for (counter=pKeys.length - 1; counter >= 0; counter--) {    keyMap.put(pKeys[counter],pKeys[counter]);  }  return keyMap.keySet().toArray();}  }
class C{  protected void storeContextSeparate(PrintWriter aWriter,int indent,StandardContext aContext) throws Exception {  URL configFile=aContext.getConfigFile();  if (configFile != null) {    File config=new File(configFile.toURI());    if (!config.isAbsolute()) {      config=new File(System.getProperty("catalina.base"),config.getPath());    }    if ((!config.isFile()) || (!config.canWrite())) {      log.error("Cannot write context output file at " + configFile + ", not saving.");      throw new IOException("Context save file at " + configFile + " not a file, or not writable.");    }    if (log.isInfoEnabled())     log.info("Store Context " + aContext.getPath() + " separate at file "+ config);    try (FileOutputStream fos=new FileOutputStream(config);PrintWriter writer=new PrintWriter(new OutputStreamWriter(fos,getRegistry().getEncoding()))){      storeXMLHead(writer);      super.store(writer,-2,aContext);    }   } else {    super.store(aWriter,indent,aContext);  }}  }
class C{  public void sendMessage(byte[] data,boolean waitForAck) throws IOException {  IOException exception=null;  setAttempt(0);  try {    pushMessage(data,false,waitForAck);  } catch (  IOException x) {    SenderState.getSenderState(getDestination()).setSuspect();    exception=x;    if (log.isTraceEnabled())     log.trace(sm.getString("bioSender.send.again",getAddress().getHostAddress(),Integer.valueOf(getPort())),x);    while (getAttempt() < getMaxRetryAttempts()) {      try {        setAttempt(getAttempt() + 1);        pushMessage(data,true,waitForAck);        exception=null;      } catch (      IOException xx) {        exception=xx;        closeSocket();      }    }  } finally {    setRequestCount(getRequestCount() + 1);    keepalive();    if (exception != null)     throw exception;  }}  }
class C{  private LayoutManager createLayoutManager(){  return new MetalRootLayout();}  }
class C{  public static boolean isFinalResponse(int rc){  return rc >= 200 && rc < 700;}  }
class C{  public void removeAttribute(String name){  if (request != null) {    this.request.removeAttribute(name);    internalAttributes.remove(name);  } else {    internalAttributes.remove(name);  }}  }
class C{  @Inject public PrivilegeValidator(RealmValidator realmValidator){  this.realmValidator=realmValidator;}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  private void adjustByteCounts(){  if (byteCount1 > 0x1fffffffffffffffL) {    byteCount2+=(byteCount1 >>> 61);    byteCount1&=0x1fffffffffffffffL;  }}  }
class C{  public static AsymmetricKeyParameter createKey(InputStream inStr) throws IOException {  return createKey(SubjectPublicKeyInfo.getInstance(new ASN1InputStream(inStr).readObject()));}  }
class C{  public JKUser(final int userRecordId){  this.userRecordId=userRecordId;}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  AgentsModel model=(AgentsModel)getModel();  String universalId=(String)getPageSessionAttribute(UNIVERSAL_ID);  try {    Set agents=model.getAgentGroupMembers(universalId);    if ((agents == null) || agents.isEmpty()) {      setDisplayFieldValue(CHILD_MEMBERS,model.getLocalizedString("agentconfig.group.members.nomembers"));    } else {      Set ordered=new TreeSet();      Map nameToId=new HashMap(agents.size() * 2);      for (Iterator i=agents.iterator(); i.hasNext(); ) {        AMIdentity amid=(AMIdentity)i.next();        String name=amid.getName();        ordered.add(name);        nameToId.put(name,amid.getUniversalId());      }      StringBuilder buff=new StringBuilder();      for (Iterator i=ordered.iterator(); i.hasNext(); ) {        String name=(String)i.next();        buff.append(name).append(" (").append((String)nameToId.get(name)).append(")<br />");      }      setDisplayFieldValue(CHILD_MEMBERS,buff.toString());    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public FedLibSystemProperties(){}  }
class C{  @Override public String mkdirs(String path) throws MalformedURLException, IOException, AuthenticationException {  String resp=null;  ensureValidToken();  String spec=MessageFormat.format("/webhdfs/v1/{0}?op=MKDIRS&user.name={1}",URLUtil.encodePath(path),this.principal);  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);  conn.setRequestMethod("PUT");  conn.connect();  resp=result(conn,true);  conn.disconnect();  return resp;}  }
class C{  public void mouse_wheel_moved(int p_rotation){  StateInteractive return_state=interactive_state.mouse_wheel_moved(p_rotation);  if (return_state != interactive_state) {    set_interactive_state(return_state);    repaint();  }}  }
class C{  public AsfHeader(final long pos,final BigInteger chunkLen,final long chunkCnt){  super(GUID.GUID_HEADER,pos,chunkLen);  this.chunkCount=chunkCnt;}  }
class C{  public InternalSession removeInternalSession(SessionID sessionId){  if (null == sessionId) {    return null;  }  InternalSession internalSession=internalSessionCache.remove(sessionId);  if (internalSession == null) {    return null;  }  internalSession.setPersistenceManager(null);  foreignSessionHandler.remove(internalSession.getID());  if (internalSession.getState() == SessionState.VALID) {    monitoringOperations.decrementActiveSessions();  }  if (internalSession.isStored()) {    delete(internalSession);  }  return internalSession;}  }
class C{  String[] toCommandLineArguments(String configurationFile){  List<String> args=new ArrayList<>(6);  args.add("--acceptLicense");  args.add("--no-prompt");  args.add("--force");  args.add("--configFile");  args.add(configurationFile);  if (ignoreErrors) {    args.add("--ignoreErrors");  }  return args.toArray(new String[args.size()]);}  }
class C{  public static void main(String[] args){  int retCode=mainImportLDIF(args,true,System.out,System.err);  if (retCode != 0) {    System.exit(filterExitCode(retCode));  }}  }
class C{  public ExtendedResponseProtocolOp(int resultCode,LocalizableMessage errorMessage,DN matchedDN,List<String> referralURLs,String oid,ByteString value){  this.resultCode=resultCode;  this.errorMessage=errorMessage;  this.matchedDN=matchedDN;  this.referralURLs=referralURLs;  this.oid=oid;  this.value=value;}  }
class C{  @Thunk static CharSequence ensureValidName(Context context,Intent intent,CharSequence name){  if (name == null) {    try {      PackageManager pm=context.getPackageManager();      ActivityInfo info=pm.getActivityInfo(intent.getComponent(),0);      name=info.loadLabel(pm);    } catch (    PackageManager.NameNotFoundException nnfe) {      return "";    }  }  return name;}  }
class C{  public void runTest() throws Throwable {  String publicId="STAFF";  String systemId="staff.xml";  String malformedName="prefix::local";  Document doc;  DOMImplementation domImpl;  DocumentType newType;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();{    boolean success=false;    try {      newType=domImpl.createDocumentType(malformedName,publicId,systemId);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public int size(){  return mRows - mRowGapLength;}  }
class C{  public WorldCreator generator(ChunkGenerator generator){  this.generator=generator;  return this;}  }
class C{  @Parameters({"parent-realm","entity-type","entity-name"}) @AfterTest(groups={"api"}) public void tearDown(String parentRealm,String idType,String entityName) throws Exception {  Object[] params={parentRealm,idType,entityName};  entering("tearDown",params);  try {    deleteIdentity(parentRealm,IdUtils.getType(idType),entityName);  } catch (  Exception e) {    log(Level.SEVERE,"tearDown",e.getMessage(),params);    e.printStackTrace();    throw e;  }  exiting("tearDown");}  }
class C{  private ConnectedRS performPhaseOneHandshake(String serverURL,boolean keepSession){  Session newSession=null;  Socket socket=null;  boolean hasConnected=false;  LocalizableMessage errorMessage=null;  try {    socket=new Socket();    socket.setReceiveBufferSize(1000000);    socket.setTcpNoDelay(true);    if (config.getSourceAddress() != null) {      InetSocketAddress local=new InetSocketAddress(config.getSourceAddress(),0);      socket.bind(local);    }    int timeoutMS=MultimasterReplication.getConnectionTimeoutMS();    socket.connect(HostPort.valueOf(serverURL).toInetSocketAddress(),timeoutMS);    newSession=replSessionSecurity.createClientSession(socket,timeoutMS);    boolean isSslEncryption=replSessionSecurity.isSslEncryption();    final HostPort hp=new HostPort(socket.getLocalAddress().getHostName(),socket.getLocalPort());    final String url=hp.toString();    final StartMsg serverStartMsg=new ServerStartMsg(getServerId(),url,getBaseDN(),getMaxRcvWindow(),config.getHeartbeatInterval(),state,getGenerationID(),isSslEncryption,getGroupId());    newSession.publish(serverStartMsg);    ReplicationMsg msg=newSession.receive();    if (logger.isTraceEnabled()) {      debugInfo("RB HANDSHAKE SENT:\n" + serverStartMsg + "\nAND RECEIVED:\n"+ msg);    }    final ReplicationServerInfo replServerInfo=ReplicationServerInfo.newInstance(msg,serverURL);    final DN repDN=replServerInfo.getBaseDN();    if (!getBaseDN().equals(repDN)) {      errorMessage=ERR_DS_DN_DOES_NOT_MATCH.get(repDN,getBaseDN());      return setConnectedRS(ConnectedRS.noConnectedRS());    }    newSession.setProtocolVersion(getCompatibleVersion(replServerInfo.getProtocolVersion()));    if (!isSslEncryption) {      newSession.stopEncryption();    }    hasConnected=true;    if (keepSession) {      return new ConnectedRS(replServerInfo,newSession);    }    return new ConnectedRS(replServerInfo,null);  } catch (  ConnectException e) {    logger.traceException(e);    errorMessage=WARN_NO_CHANGELOG_SERVER_LISTENING.get(getServerId(),serverURL,getBaseDN());  }catch (  SocketTimeoutException e) {    logger.traceException(e);    errorMessage=WARN_TIMEOUT_CONNECTING_TO_RS.get(getServerId(),serverURL,getBaseDN());  }catch (  Exception e) {    logger.traceException(e);    errorMessage=WARN_EXCEPTION_STARTING_SESSION_PHASE.get(getServerId(),serverURL,getBaseDN(),stackTraceToSingleLineString(e));  } finally {    if (!hasConnected || !keepSession) {      close(newSession);      close(socket);    }    if (!hasConnected && errorMessage != null && !connectionError) {      if (keepSession) {        logger.error(errorMessage);      }      logger.trace(errorMessage);    }  }  return setConnectedRS(ConnectedRS.noConnectedRS());}  }
class C{  public void clear(){  while (queue.poll() != null)   ;  modCount++;  Arrays.fill(table,null);  size=0;  while (queue.poll() != null)   ;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String03() throws Exception {  for (  String invalidValue : invalidValues) {    for (    String validValue : getValidValues()) {      try {        TrustManagerFactory.getInstance(validValue,invalidValue);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(validValue).concat(" provider: ").concat(invalidValue).concat(")"));      } catch (      NoSuchProviderException expected) {        assertFalse("".equals(invalidValue));      }catch (      IllegalArgumentException expected) {        assertEquals("",invalidValue);      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodehaschildnodes.class,args);}  }
class C{  @Override public Object lookup(Name name) throws NamingException {  if (log.isDebugEnabled()) {    log.debug(sm.getString("selectorContext.methodUsingName","lookup",name));  }  return getBoundContext().lookup(parseName(name));}  }
class C{  public synchronized int count(){  return set.size();}  }
class C{  public boolean authenticate(IdType idType,Callback[] credentials) throws IdRepoException, com.sun.identity.authentication.spi.AuthLoginException {  IdServices idServices=IdServicesFactory.getDataStoreServices();  return idServices.authenticate(organizationDN,credentials,idType);}  }
class C{  public void shape(char[] text,int start,int count){  checkParams(text,start,count);  if (isContextual()) {    if (rangeSet == null) {      shapeContextually(text,start,count,key);    } else {      shapeContextually(text,start,count,shapingRange);    }  } else {    shapeNonContextually(text,start,count);  }}  }
class C{  protected UndoableEdit editToBeRedone(){  int count=edits.size();  int i=indexOfNextAdd;  while (i < count) {    UndoableEdit edit=edits.elementAt(i++);    if (edit.isSignificant()) {      return edit;    }  }  return null;}  }
class C{  protected ChangeListener createChangeListener(){  return getHandler();}  }
class C{  public DSMLExtendedOperation(LDAPConnection connection,Set<String> stringResponses){  this.connection=connection;  this.stringResponses=stringResponses;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PICTURE_INFO\"";  db.execSQL(sql);}  }
class C{  @Override public int read(){  if (saveBufferReader.remaining() > 0) {    return 0xFF & saveBufferReader.readByte();  }  if (byteBuffer.remaining() > 0) {    return 0xFF & byteBuffer.get();  }  throw new IllegalBlockingModeException();}  }
class C{  public static boolean isRightMouseButton(MouseEvent anEvent){  return ((anEvent.getModifiersEx() & InputEvent.BUTTON3_DOWN_MASK) != 0 || anEvent.getButton() == MouseEvent.BUTTON3);}  }
class C{  public void sort() throws Exception {  sort(m_map,0,m_firstFree - 1);}  }
class C{  public ReflectiveOperationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean isCachedMemory(){  return false;}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  if (select == null) {    DSTUtils.debug.error("DSTQueryItem.toString: Select cannot be null");    return "";  }  String tempPrefix="";  if (includeNS) {    if (prefix == null) {      prefix=DSTConstants.DEFAULT_NS_PREFIX;    }    tempPrefix=prefix + ":";  }  if (declareNS && nameSpaceURI == null) {    DSTUtils.debug.error("DSTQueryItem.toString: Name Space is " + "not defined");    return "";  }  StringBuffer sb=new StringBuffer(300);  sb.append("<").append(tempPrefix).append("QueryItem");  if (id != null && id.length() != 0) {    sb.append(" id=\"").append(id).append("\"");  }  sb.append(" includeCommonAttributes=\"");  if (includeCommonAttribute) {    sb.append("true").append("\"");  } else {    sb.append("false").append("\"");  }  if (itemID != null && itemID.length() != 0) {    sb.append(" itemID=\"").append(itemID).append("\"");  }  if (changedSince != null) {    sb.append(" changedSince=\"").append(DateUtils.toUTCDateFormat(changedSince)).append("\"");  }  if (declareNS) {    sb.append(" xmlns:").append(prefix).append("=\"").append(nameSpaceURI).append("\"").append(" xmlns=\"").append(nameSpaceURI).append("\"");  }  sb.append(">").append("<").append(tempPrefix).append("Select").append(">").append(appendPrefix(select,prefix)).append("</").append(tempPrefix).append("Select").append(">").append("</").append(tempPrefix).append("QueryItem").append(">");  return sb.toString();}  }
class C{  public void flip(int x,int y){  int offset=y * rowSize + (x >> 5);  bits[offset]^=1 << (x & 0x1f);}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.EmptyType createEmptyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.EmptyTypeImpl();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("Yesterday");{    boolean success=false;    try {      retval=titleAttr.removeChild(textNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public static boolean isReservedDomainName(String domainName){  if (reservedDomainNames == null) {    initialize();  }  return Arrays.binarySearch(reservedDomainNames,domainName) >= 0;}  }
class C{  private static boolean isOptimizableForDescendantIterator(Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {  int stepType;  int stepCount=0;  boolean foundDorDS=false;  boolean foundSelf=false;  boolean foundDS=false;  int nodeTestType=OpCodes.NODETYPE_NODE;  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    if (nodeTestType != OpCodes.NODETYPE_NODE && nodeTestType != OpCodes.NODETYPE_ROOT)     return false;    stepCount++;    if (stepCount > 3)     return false;    boolean mightBeProximate=mightBeProximate(compiler,stepOpCodePos,stepType);    if (mightBeProximate)     return false;switch (stepType) {case OpCodes.FROM_FOLLOWING:case OpCodes.FROM_FOLLOWING_SIBLINGS:case OpCodes.FROM_PRECEDING:case OpCodes.FROM_PRECEDING_SIBLINGS:case OpCodes.FROM_PARENT:case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:case OpCodes.FROM_NAMESPACE:case OpCodes.FROM_ANCESTORS:case OpCodes.FROM_ANCESTORS_OR_SELF:case OpCodes.FROM_ATTRIBUTES:case OpCodes.MATCH_ATTRIBUTE:case OpCodes.MATCH_ANY_ANCESTOR:case OpCodes.MATCH_IMMEDIATE_ANCESTOR:      return false;case OpCodes.FROM_ROOT:    if (1 != stepCount)     return false;  break;case OpCodes.FROM_CHILDREN:if (!foundDS && !(foundDorDS && foundSelf)) return false;break;case OpCodes.FROM_DESCENDANTS_OR_SELF:foundDS=true;case OpCodes.FROM_DESCENDANTS:if (3 == stepCount) return false;foundDorDS=true;break;case OpCodes.FROM_SELF:if (1 != stepCount) return false;foundSelf=true;break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}nodeTestType=compiler.getStepTestType(stepOpCodePos);int nextStepOpCodePos=compiler.getNextStepPos(stepOpCodePos);if (nextStepOpCodePos < 0) break;if (OpCodes.ENDOP != compiler.getOp(nextStepOpCodePos)) {if (compiler.countPredicates(stepOpCodePos) > 0) {return false;}}stepOpCodePos=nextStepOpCodePos;}return true;}  }
class C{  private TypesHandled handlesTypes(){  TypesHandled result=new TypesHandled();  HandlesTypes ht=null;  if (this.jsfAnnotatedClassFactoryConfiguration.getServletContainerInitializer() != null) {    ht=this.jsfAnnotatedClassFactoryConfiguration.getServletContainerInitializer().getClass().getAnnotation(HandlesTypes.class);  }  if (ht != null) {    Set<Class<? extends Annotation>> annotationsToExclude=annotationsToExclude();    for (    Class<?> type : ht.value()) {      if (type.isAnnotation()) {        Class<? extends Annotation> annotation=(Class<? extends Annotation>)type;        if (!annotationsToExclude.contains(annotation)) {          result.getAnnotationTypes().add(annotation);        }      } else {        result.getOtherTypes().add(type);      }    }  }  return result;}  }
class C{  public void add_corner(PlaPointFloat p_corner){  if (p_corner == null)   return;  if (!write_enabled)   return;  try {    file_writer.write((new Double(p_corner.v_x)).toString());    file_writer.write(" ");    file_writer.write((new Double(p_corner.v_y)).toString());    file_writer.write("\n");  } catch (  IOException e2) {    System.out.println("unable to write to logfile while adding corner");  }}  }
class C{  protected OrientationRequested(int value){  super(value);}  }
class C{  public REBIND(){  this("");}  }
class C{  @Override public Loader<Cursor> onCreateLoader(int id,Bundle args){  Uri uri=FmRadioStation.Station.CONTENT_URI;  String select=FmRadioStation.Station.COLUMN_STATION_TYPE + " IN (?, ?)";  String order=FmRadioStation.Station.COLUMN_STATION_TYPE + "," + FmRadioStation.Station.COLUMN_STATION_FREQ;  CursorLoader cursorLoader=new CursorLoader(this,uri,FmRadioStation.COLUMNS,select,new String[]{String.valueOf(FmRadioStation.STATION_TYPE_FAVORITE),String.valueOf(FmRadioStation.STATION_TYPE_SEARCHED)},order);  return cursorLoader;}  }
class C{  public boolean isSuccessful(){  return code >= 200 && code < 300;}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in.length;  while (count > 0) {    if (in[count - 1] != 0) {      break;    }    count--;  }  return in.length - count;}  }
class C{  void evaluateFinalStage(final BindOperation bindOp){  this.bindOp=bindOp;  final ByteString clientCredentials=bindOp.getSASLCredentials();  if (clientCredentials == null || clientCredentials.length() == 0) {    final LocalizableMessage msg=ERR_SASL_NO_CREDENTIALS.get(mechanism,mechanism);    handleError(msg);    return;  }  final ClientConnection clientConn=bindOp.getClientConnection();  clientConn.setSASLAuthStateInfo(null);  try {    final ByteString responseAuthStr=evaluateResponse(clientCredentials);    bindOp.setResultCode(ResultCode.SUCCESS);    bindOp.setServerSASLCredentials(responseAuthStr);    bindOp.setSASLAuthUserEntry(authEntry);    final AuthenticationInfo authInfo=new AuthenticationInfo(authEntry,authzEntry,mechanism,clientCredentials,DirectoryServer.isRootDN(authEntry.getName()));    bindOp.setAuthenticationInfo(authInfo);    if (isConfidentialIntegrity()) {      final SASLByteChannel saslByteChannel=SASLByteChannel.getSASLByteChannel(clientConn,mechanism,this);      final LDAPClientConnection ldapConn=(LDAPClientConnection)clientConn;      ldapConn.setSASLPendingProvider(saslByteChannel);    } else {      dispose();      clientConn.setSASLAuthStateInfo(null);    }  } catch (  final SaslException e) {    logger.traceException(e);    final LocalizableMessage msg=ERR_SASL_PROTOCOL_ERROR.get(mechanism,getExceptionMessage(e));    handleError(msg);  }}  }
class C{  ProgressNotifier(ProgressListener pListener,long pContentLength){  listener=pListener;  contentLength=pContentLength;}  }
class C{  static public void assertSame(Object expected,Object actual){  assertSame(null,expected,actual);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    int offs=target.getCaretPosition();    Element elem=Utilities.getParagraphElement(target,offs);    offs=elem.getStartOffset();    if (select) {      target.moveCaretPosition(offs);    } else {      target.setCaretPosition(offs);    }  }}  }
class C{  public static Border createBevelBorder(int type){  return createSharedBevel(type);}  }
class C{  public static BigInteger decodeInteger(final byte[] pArray){  return new BigInteger(1,decodeBase64(pArray));}  }
class C{  private boolean read_pull_tight_region_scope() throws java.io.IOException {  Object next_token=scanner.next_token();  if (!(next_token instanceof Integer)) {    System.out.println("GuiConfigFile.read_pull_tight_region_scope: Integer expected");    return false;  }  System.out.println("GuiConfigFile.read_pull_tight_region_scope: SHOULD NOT BE CALLED");  next_token=scanner.next_token();  if (next_token != GuiConfigKeyword.CLOSED_BRACKET) {    System.out.println("GuiConfigFile.read_pull_tight_region_scope: closing bracket expected");    return false;  }  return true;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("java.util.Scanner");  sb.append("[delimiters=" + delimPattern + "]");  sb.append("[position=" + position + "]");  sb.append("[match valid=" + matchValid + "]");  sb.append("[need input=" + needInput + "]");  sb.append("[source closed=" + sourceClosed + "]");  sb.append("[skipped=" + skipped + "]");  sb.append("[group separator=" + groupSeparator + "]");  sb.append("[decimal separator=" + decimalSeparator + "]");  sb.append("[positive prefix=" + positivePrefix + "]");  sb.append("[negative prefix=" + negativePrefix + "]");  sb.append("[positive suffix=" + positiveSuffix + "]");  sb.append("[negative suffix=" + negativeSuffix + "]");  sb.append("[NaN string=" + nanString + "]");  sb.append("[infinity string=" + infinityString + "]");  return sb.toString();}  }
class C{  public static void write(File file,NSObject root) throws IOException {  OutputStream out=new FileOutputStream(file);  write(out,root);  out.close();}  }
class C{  public OutputProperties(Properties defaults){  m_properties=new Properties(defaults);}  }
class C{  public JToggleButton(Icon icon){  this(null,icon,false);}  }
class C{  public final void writeLong(long v) throws IOException {  writeBuffer[0]=(byte)(v >>> 56);  writeBuffer[1]=(byte)(v >>> 48);  writeBuffer[2]=(byte)(v >>> 40);  writeBuffer[3]=(byte)(v >>> 32);  writeBuffer[4]=(byte)(v >>> 24);  writeBuffer[5]=(byte)(v >>> 16);  writeBuffer[6]=(byte)(v >>> 8);  writeBuffer[7]=(byte)(v >>> 0);  out.write(writeBuffer,0,8);  incCount(8);}  }
class C{  private void requestInputMethod(Dialog dialog){  Window window=dialog.getWindow();  window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);}  }
class C{  public List<byte[]> parse(byte[] bytes,int offset,int length){  List<byte[]> result=new ArrayList<>();  for (int i=offset; i < offset + length; i++) {    if (buffer.length == position) {      byte[] tmp=new byte[buffer.length * 2];      System.arraycopy(buffer,0,tmp,0,buffer.length);      buffer=tmp;    }    byte b=bytes[i];    buffer[position++]=b;    if (waitingForChecksum && (position - hashPosition) == 2) {      waitingForChecksum=false;      byte[] tmp=new byte[position];      System.arraycopy(buffer,0,tmp,0,position);      position=0;      result.add(tmp);    } else     if (b == '#') {      waitingForChecksum=true;      hashPosition=position;    }  }  return result;}  }
class C{  public synchronized void ensureTestDocussandraRunning() throws Exception {  ensureTestDocussandraRunning(true);}  }
class C{  @Override public int compare(JavaArgumentsDescriptor desc1,JavaArgumentsDescriptor desc2){  int result;  int[] possibleResults={desc1.getCommandName().compareTo(desc2.getCommandName()),desc1.getJavaArguments().compareTo(desc2.getJavaArguments())};  result=possibleResults[sortColumn];  if (result == 0) {    for (    int i : possibleResults) {      if (i != 0) {        result=i;        break;      }    }  }  if (!sortAscending) {    result=-result;  }  return result;}  }
class C{  public boolean equals(Object object){  return (object != null && object instanceof ResolutionSyntax && this.crossFeedResolution == ((ResolutionSyntax)object).crossFeedResolution && this.feedResolution == ((ResolutionSyntax)object).feedResolution);}  }
class C{  protected View createChild(String name){  View view=null;  if (name.equals(SEC_MH_COMMON)) {    view=new CCSecondaryMasthead(this,name);  } else   if (name.equals(PGTITLE)) {    view=new CCPageTitle(this,ptModel,name);  } else   if (ptModel.isChildSupported(name)) {    view=ptModel.createChild(this,name);  } else   if (name.equals(PROPERTY_ATTRIBUTE)) {    view=new AMPropertySheet(this,propertySheetModel,name);  } else   if (propertySheetModel.isChildSupported(name)) {    view=propertySheetModel.createChild(this,name,getModel());  } else {    view=super.createChild(name);  }  return view;}  }
class C{  public static void initializeProperties(String file) throws MissingResourceException {  Properties props=new Properties();  ResourceBundle bundle=ResourceBundle.getBundle(file);  for (  String key : bundle.keySet()) {    props.put(key,bundle.getString(key));  }  initializeProperties(props,false,false);}  }
class C{  public AuthorityKeyIdentifierStructure(X509Certificate certificate) throws CertificateParsingException {  super(fromCertificate(certificate));}  }
class C{  public ScriptCompiler shiftLeft(Map<String,?> sources){  this.sources.putAll(sources);  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.insertData(0,"Mss. ");  childData=child.getData();  assertEquals("characterdataInsertDataBeginningAssert","Mss. Margaret Martin",childData);}  }
class C{  public void ellipsized(int start,int end){  mEllipsizedStart=start;  mEllipsizedCount=end - start;}  }
class C{  public void testConstructorStringRadix10Negative(){  String value="-234871376037";  int radix=36;  byte rBytes[]={-4,48,71,62,-76,93,-105,13};  BigInteger aNumber=new BigInteger(value,radix);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public boolean isField(){  return memberNode == null ? false : memberNode instanceof FieldNode;}  }
class C{  public BaseViewHolder addOnClickListener(int viewId){  childClickViewIds.add(viewId);  return this;}  }
class C{  private float calculateLinearOutFasterInY2(float velocity){  float t=(velocity - mMinVelocityPxPerSecond) / (mHighVelocityPxPerSecond - mMinVelocityPxPerSecond);  t=Math.max(0,Math.min(1,t));  return (1 - t) * LINEAR_OUT_FASTER_IN_Y2_MIN + t * LINEAR_OUT_FASTER_IN_Y2_MAX;}  }
class C{  static void checkProcessingContextHeader(ProcessingContextHeader procH,String messageID,boolean isServer) throws SOAPBindingException, SOAPFaultException {  if (procH == null) {    return;  }  try {    checkActorAndMustUnderstand(procH.getActor(),procH.getMustUnderstand(),messageID,isServer);  } catch (  SOAPFaultException sfe) {    sfe.getSOAPFaultMessage().getSOAPFault().getDetail().setProcessingContextHeader(procH);    throw sfe;  }  if (isServer) {    SOAPFaultDetail sfd=new SOAPFaultDetail(SOAPFaultDetail.PROC_CTX_URI_NOT_UNSTD,messageID,null);    sfd.setProcessingContextHeader(procH);    SOAPFault sf=new SOAPFault(FAULT_CODE_SERVER,faultStringServerError,null,sfd);    throw new SOAPFaultException(new Message(sf));  } else {    throw new SOAPBindingException(bundle.getString("ProcessingContextUnsupported"));  }}  }
class C{  public WindowProbeMsg(byte[] in) throws DataFormatException {  if (in[0] != MSG_TYPE_WINDOW_PROBE) {    throw new DataFormatException("input is not a valid WindowProbeMsg");  }}  }
class C{  private static SearchFilter decodeSubstringFilter(String filterString,AttributeDescription attrDesc,int equalPos,int endPos) throws DirectoryException {  byte[] valueBytes=getBytes(filterString.substring(equalPos + 1,endPos));  boolean hasEscape=false;  LinkedList<Integer> asteriskPositions=new LinkedList<>();  for (int i=0; i < valueBytes.length; i++) {    if (valueBytes[i] == 0x2A) {      asteriskPositions.add(i);    } else     if (valueBytes[i] == 0x5C) {      hasEscape=true;    }  }  if (asteriskPositions.isEmpty()) {    LocalizableMessage message=ERR_SEARCH_FILTER_SUBSTRING_NO_ASTERISKS.get(filterString,equalPos + 1,endPos);    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  } else {    endPos=valueBytes.length;  }  ByteString subInitial;  int firstPos=asteriskPositions.removeFirst();  if (firstPos == 0) {    subInitial=null;  } else {    if (hasEscape) {      ByteStringBuilder buffer=new ByteStringBuilder(firstPos);      for (int i=0; i < firstPos; i++) {        if (valueBytes[i] == 0x5C) {          if (i + 2 >= valueBytes.length) {            LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);            throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);          }          byte byteValue=0;switch (valueBytes[++i]) {case 0x30:            break;case 0x31:          byteValue=(byte)0x10;        break;case 0x32:      byteValue=(byte)0x20;    break;case 0x33:  byteValue=(byte)0x30;break;case 0x34:byteValue=(byte)0x40;break;case 0x35:byteValue=(byte)0x50;break;case 0x36:byteValue=(byte)0x60;break;case 0x37:byteValue=(byte)0x70;break;case 0x38:byteValue=(byte)0x80;break;case 0x39:byteValue=(byte)0x90;break;case 0x41:case 0x61:byteValue=(byte)0xA0;break;case 0x42:case 0x62:byteValue=(byte)0xB0;break;case 0x43:case 0x63:byteValue=(byte)0xC0;break;case 0x44:case 0x64:byteValue=(byte)0xD0;break;case 0x45:case 0x65:byteValue=(byte)0xE0;break;case 0x46:case 0x66:byteValue=(byte)0xF0;break;default :LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue|=(byte)0x01;break;case 0x32:byteValue|=(byte)0x02;break;case 0x33:byteValue|=(byte)0x03;break;case 0x34:byteValue|=(byte)0x04;break;case 0x35:byteValue|=(byte)0x05;break;case 0x36:byteValue|=(byte)0x06;break;case 0x37:byteValue|=(byte)0x07;break;case 0x38:byteValue|=(byte)0x08;break;case 0x39:byteValue|=(byte)0x09;break;case 0x41:case 0x61:byteValue|=(byte)0x0A;break;case 0x42:case 0x62:byteValue|=(byte)0x0B;break;case 0x43:case 0x63:byteValue|=(byte)0x0C;break;case 0x44:case 0x64:byteValue|=(byte)0x0D;break;case 0x45:case 0x65:byteValue|=(byte)0x0E;break;case 0x46:case 0x66:byteValue|=(byte)0x0F;break;default :LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}buffer.appendByte(byteValue);} else {buffer.appendByte(valueBytes[i]);}}subInitial=buffer.toByteString();} else {subInitial=ByteString.wrap(valueBytes,0,firstPos);}}List<ByteString> subAny=new ArrayList<>();for (int asteriskPos : asteriskPositions) {int length=asteriskPos - firstPos - 1;if (hasEscape) {ByteStringBuilder buffer=new ByteStringBuilder(length);for (int i=firstPos + 1; i < asteriskPos; i++) {if (valueBytes[i] == 0x5C) {if (i + 2 >= valueBytes.length) {LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}byte byteValue=0;switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue=(byte)0x10;break;case 0x32:byteValue=(byte)0x20;break;case 0x33:byteValue=(byte)0x30;break;case 0x34:byteValue=(byte)0x40;break;case 0x35:byteValue=(byte)0x50;break;case 0x36:byteValue=(byte)0x60;break;case 0x37:byteValue=(byte)0x70;break;case 0x38:byteValue=(byte)0x80;break;case 0x39:byteValue=(byte)0x90;break;case 0x41:case 0x61:byteValue=(byte)0xA0;break;case 0x42:case 0x62:byteValue=(byte)0xB0;break;case 0x43:case 0x63:byteValue=(byte)0xC0;break;case 0x44:case 0x64:byteValue=(byte)0xD0;break;case 0x45:case 0x65:byteValue=(byte)0xE0;break;case 0x46:case 0x66:byteValue=(byte)0xF0;break;default :LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue|=(byte)0x01;break;case 0x32:byteValue|=(byte)0x02;break;case 0x33:byteValue|=(byte)0x03;break;case 0x34:byteValue|=(byte)0x04;break;case 0x35:byteValue|=(byte)0x05;break;case 0x36:byteValue|=(byte)0x06;break;case 0x37:byteValue|=(byte)0x07;break;case 0x38:byteValue|=(byte)0x08;break;case 0x39:byteValue|=(byte)0x09;break;case 0x41:case 0x61:byteValue|=(byte)0x0A;break;case 0x42:case 0x62:byteValue|=(byte)0x0B;break;case 0x43:case 0x63:byteValue|=(byte)0x0C;break;case 0x44:case 0x64:byteValue|=(byte)0x0D;break;case 0x45:case 0x65:byteValue|=(byte)0x0E;break;case 0x46:case 0x66:byteValue|=(byte)0x0F;break;default :LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}buffer.appendByte(byteValue);} else {buffer.appendByte(valueBytes[i]);}}subAny.add(buffer.toByteString());buffer.clear();} else {subAny.add(ByteString.wrap(valueBytes,firstPos + 1,length));}firstPos=asteriskPos;}ByteString subFinal;if (firstPos == (endPos - 1)) {subFinal=null;} else {int length=endPos - firstPos - 1;if (hasEscape) {ByteStringBuilder buffer=new ByteStringBuilder(length);for (int i=firstPos + 1; i < endPos; i++) {if (valueBytes[i] == 0x5C) {if (i + 2 >= valueBytes.length) {LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}byte byteValue=0;switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue=(byte)0x10;break;case 0x32:byteValue=(byte)0x20;break;case 0x33:byteValue=(byte)0x30;break;case 0x34:byteValue=(byte)0x40;break;case 0x35:byteValue=(byte)0x50;break;case 0x36:byteValue=(byte)0x60;break;case 0x37:byteValue=(byte)0x70;break;case 0x38:byteValue=(byte)0x80;break;case 0x39:byteValue=(byte)0x90;break;case 0x41:case 0x61:byteValue=(byte)0xA0;break;case 0x42:case 0x62:byteValue=(byte)0xB0;break;case 0x43:case 0x63:byteValue=(byte)0xC0;break;case 0x44:case 0x64:byteValue=(byte)0xD0;break;case 0x45:case 0x65:byteValue=(byte)0xE0;break;case 0x46:case 0x66:byteValue=(byte)0xF0;break;default :LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue|=(byte)0x01;break;case 0x32:byteValue|=(byte)0x02;break;case 0x33:byteValue|=(byte)0x03;break;case 0x34:byteValue|=(byte)0x04;break;case 0x35:byteValue|=(byte)0x05;break;case 0x36:byteValue|=(byte)0x06;break;case 0x37:byteValue|=(byte)0x07;break;case 0x38:byteValue|=(byte)0x08;break;case 0x39:byteValue|=(byte)0x09;break;case 0x41:case 0x61:byteValue|=(byte)0x0A;break;case 0x42:case 0x62:byteValue|=(byte)0x0B;break;case 0x43:case 0x63:byteValue|=(byte)0x0C;break;case 0x44:case 0x64:byteValue|=(byte)0x0D;break;case 0x45:case 0x65:byteValue|=(byte)0x0E;break;case 0x46:case 0x66:byteValue|=(byte)0x0F;break;default :LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}buffer.appendByte(byteValue);} else {buffer.appendByte(valueBytes[i]);}}subFinal=buffer.toByteString();} else {subFinal=ByteString.wrap(valueBytes,firstPos + 1,length);}}return new SearchFilter(FilterType.SUBSTRING,null,null,attrDesc,null,subInitial,subAny,subFinal,null,false);}  }
class C{  public Locator2Impl(Locator locator){  super(locator);  if (locator instanceof Locator2) {    Locator2 l2=(Locator2)locator;    version=l2.getXMLVersion();    encoding=l2.getEncoding();  }}  }
class C{  public SQLTransientConnectionException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public JMenuItem add(JMenuItem menuItem){  ensurePopupMenuCreated();  return popupMenu.add(menuItem);}  }
class C{  void releaseContext(Context context){  Context.exit();}  }
class C{  public void finish() throws IOException {  if (done) {    return;  }  def.finish();  while (!def.finished()) {    int byteCount=def.deflate(buf);    out.write(buf,0,byteCount);  }  done=true;}  }
class C{  public List<ByteString> encodePassword(ByteString password) throws DirectoryException {  List<PasswordStorageScheme<?>> schemes=passwordPolicy.getDefaultPasswordStorageSchemes();  List<ByteString> encodedPasswords=new ArrayList<>(schemes.size());  if (passwordPolicy.isAuthPasswordSyntax()) {    for (    PasswordStorageScheme<?> s : schemes) {      encodedPasswords.add(s.encodeAuthPassword(password));    }  } else {    for (    PasswordStorageScheme<?> s : schemes) {      encodedPasswords.add(s.encodePasswordWithScheme(password));    }  }  return encodedPasswords;}  }
class C{  public boolean skipSpaces() throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int c=fCurrentEntity.ch[fCurrentEntity.position];  if (XMLChar.isSpace(c)) {    boolean external=fCurrentEntity.isExternal();    do {      boolean entityChanged=false;      if (c == '\n' || (external && c == '\r')) {        if (fCurrentEntity.position == fCurrentEntity.count - 1) {          fCurrentEntity.ch[0]=(char)c;          entityChanged=load(1,true);          if (!entityChanged)           fCurrentEntity.position=0;        }        if (c == '\r' && external) {          if (fCurrentEntity.ch[++fCurrentEntity.position] != '\n') {            fCurrentEntity.position--;          }        }      }      if (!entityChanged)       fCurrentEntity.position++;      if (fCurrentEntity.position == fCurrentEntity.count) {        load(0,true);      }    } while (XMLChar.isSpace(c=fCurrentEntity.ch[fCurrentEntity.position]));    return true;  }  return false;}  }
class C{  public FramedRoutingAttribute(byte[] octets){  super(octets);  routing=OctetUtils.toIntVal(octets);}  }
class C{  public SwingPropertyChangeSupport(Object sourceBean){  this(sourceBean,false);}  }
class C{  public void updateUI(){  setUI((PopupMenuUI)UIManager.getUI(this));}  }
class C{  public static GenericExtendedResult newGenericExtendedResult(final ResultCode resultCode){  Reject.ifNull(resultCode);  return new GenericExtendedResultImpl(resultCode);}  }
class C{  public boolean add(String entityID,String protocol) throws COTException {  if (!COTUtils.isValidProtocolType(protocol)) {    throw new COTException("invalidProtocolType",null);  }  if ((trustedProviderMap == null) || (trustedProviderMap.get(protocol) == null) || !((Set)trustedProviderMap.get(protocol)).contains(entityID)) {    Set ret=new HashSet();    if (trustedProviders != null) {      ret.addAll(trustedProviders);    }    boolean result=ret.add(entityID + COTConstants.DELIMITER + protocol);    setTrustedProviders(ret);    return result;  } else {    throw new COTException("entityExistsInCot",null);  }}  }
class C{  private void resetNextProxy(HttpUrl url,Proxy proxy){  if (proxy != null) {    proxies=Collections.singletonList(proxy);  } else {    proxies=new ArrayList<>();    List<Proxy> selectedProxies=address.proxySelector().select(url.uri());    if (selectedProxies != null)     proxies.addAll(selectedProxies);    proxies.removeAll(Collections.singleton(Proxy.NO_PROXY));    proxies.add(Proxy.NO_PROXY);  }  nextProxyIndex=0;}  }
class C{  @NonNull public static Interpolator accelerateDecelerate(){  return new AccelerateDecelerateInterpolator();}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AssertionElement createAssertionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionElementImpl();}  }
class C{  public static int applyModifications(boolean useAdminPort,String... lines) throws Exception {  if (!SERVER_STARTED) {    startServer();  }  String path=createTempFile(lines);  String[] args={"--noPropertiesFile","-h","127.0.0.1","-p",String.valueOf(ports.serverLdapPort),"-D","cn=Directory Manager","-w","password","-a","-f",path};  String[] adminArgs={"--noPropertiesFile","-h","127.0.0.1","-p",String.valueOf(ports.serverAdminPort),"-Z","-X","-D","cn=Directory Manager","-w","password","-a","-f",path};  if (useAdminPort) {    return LDAPModify.mainModify(adminArgs,false,null,null);  }  return LDAPModify.mainModify(args,false,null,null);}  }
class C{  public boolean isDirectory(){  return directory;}  }
class C{  void extractMethodLevelMappings(final Map<String,List<RequestMethod>> target,final List<String> urls,final RequestMethod[] methods){  final List<String> usedUrls=urls.isEmpty() ? Arrays.asList("/") : urls;  for (  String url : usedUrls) {    final String usedUrl=url.startsWith("/") ? url : "/" + url;    final List<RequestMethod> mappedMethods;    if (target.containsKey(usedUrl)) {      mappedMethods=target.get(usedUrl);    } else {      mappedMethods=new ArrayList<>();      target.put(usedUrl,mappedMethods);    }    mappedMethods.addAll(Arrays.asList(methods));  }}  }
class C{  private void determineColors(){switch (getWindowDecorationStyle()) {case JRootPane.FRAME:    activeBackground=UIManager.getColor("activeCaption");  activeForeground=UIManager.getColor("activeCaptionText");activeShadow=UIManager.getColor("activeCaptionBorder");break;case JRootPane.ERROR_DIALOG:activeBackground=UIManager.getColor("OptionPane.errorDialog.titlePane.background");activeForeground=UIManager.getColor("OptionPane.errorDialog.titlePane.foreground");activeShadow=UIManager.getColor("OptionPane.errorDialog.titlePane.shadow");break;case JRootPane.QUESTION_DIALOG:case JRootPane.COLOR_CHOOSER_DIALOG:case JRootPane.FILE_CHOOSER_DIALOG:activeBackground=UIManager.getColor("OptionPane.questionDialog.titlePane.background");activeForeground=UIManager.getColor("OptionPane.questionDialog.titlePane.foreground");activeShadow=UIManager.getColor("OptionPane.questionDialog.titlePane.shadow");break;case JRootPane.WARNING_DIALOG:activeBackground=UIManager.getColor("OptionPane.warningDialog.titlePane.background");activeForeground=UIManager.getColor("OptionPane.warningDialog.titlePane.foreground");activeShadow=UIManager.getColor("OptionPane.warningDialog.titlePane.shadow");break;case JRootPane.PLAIN_DIALOG:case JRootPane.INFORMATION_DIALOG:default :activeBackground=UIManager.getColor("activeCaption");activeForeground=UIManager.getColor("activeCaptionText");activeShadow=UIManager.getColor("activeCaptionBorder");break;}activeBumps.setBumpColors(activeBumpsHighlight,activeBumpsShadow,activeBackground);}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  extendedOnly=isOptionSet(FedCLIConstants.ARGUMENT_EXTENDED_ONLY);  realm=getStringOptionValue(FedCLIConstants.ARGUMENT_REALM);  entityID=getStringOptionValue(FedCLIConstants.ARGUMENT_ENTITY_ID);  String spec=FederationManager.getIDFFSubCommandSpecification(rc);  String[] params={realm,entityID,spec};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_ENTITY",params);  try {    if (spec.equals(FederationManager.DEFAULT_SPECIFICATION)) {      handleSAML2Request(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_DELETE_ENTITY",params);    } else     if (spec.equals(FedCLIConstants.IDFF_SPECIFICATION)) {      handleIDFFRequest(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_DELETE_ENTITY",params);    } else     if (spec.equals(FedCLIConstants.WSFED_SPECIFICATION)) {      handleWSFedRequest(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_DELETE_ENTITY",params);    } else {      throw new CLIException(getResourceString("unsupported-specification"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  } catch (  CLIException e) {    String[] args={realm,entityID,spec,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_ENTITY",args);    throw e;  }}  }
class C{  public SubjectEqualsDNCertificateMapper(){  super();}  }
class C{  boolean containKey(String handler){  if ((handler == null) || (handler.length() == 0)) {    return false;  }  if (relayStateMap.containsKey(handler)) {    return true;  } else {    return false;  }}  }
class C{  public boolean isValidCharacter(char aChar){  if (isLiteral()) {    return (getChar(aChar) == aChar);  }  aChar=getChar(aChar);  String filter=getValidCharacters();  if (filter != null && filter.indexOf(aChar) == -1) {    return false;  }  filter=getInvalidCharacters();  if (filter != null && filter.indexOf(aChar) != -1) {    return false;  }  return true;}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof String)) {    throw new EncoderException("Parameter supplied to Soundex encode is not of type java.lang.String");  }  return soundex((String)pObject);}  }
class C{  @Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  StringManager smClient=StringManager.getManager(Constants.Package,request.getLocales());  String command=request.getPathInfo();  if (command == null)   command=request.getServletPath();  String name=request.getParameter("name");  response.setContentType("text/plain; charset=" + Constants.CHARSET);  PrintWriter writer=response.getWriter();  if (command == null) {    writer.println(sm.getString("hostManagerServlet.noCommand"));  } else   if (command.equals("/add")) {    add(request,writer,name,false,smClient);  } else   if (command.equals("/remove")) {    remove(writer,name,smClient);  } else   if (command.equals("/list")) {    list(writer,smClient);  } else   if (command.equals("/start")) {    start(writer,name,smClient);  } else   if (command.equals("/stop")) {    stop(writer,name,smClient);  } else   if (command.equals("/persist")) {    persist(writer,smClient);  } else {    writer.println(sm.getString("hostManagerServlet.unknownCommand",command));  }  writer.flush();  writer.close();}  }
class C{  public static Response processAttributeQuery(AttributeQuery attrQuery,HttpServletRequest request,HttpServletResponse response,String attrAuthorityEntityID,String realm,String attrQueryProfileAlias) throws SAML2Exception {  AttributeAuthorityMapper attrAuthorityMapper=getAttributeAuthorityMapper(realm,attrAuthorityEntityID,attrQueryProfileAlias);  String attrQueryProfile=AttributeQueryUtil.getAttributeQueryProfile(attrQueryProfileAlias);  try {    attrAuthorityMapper.authenticateRequester(request,response,attrQuery,attrAuthorityEntityID,realm);  } catch (  SAML2Exception se) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("AttributeQueryUtil." + "processAttributeQuery: ",se);    }    return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.REQUESTER,null,se.getMessage(),null);  }  try {    attrAuthorityMapper.validateAttributeQuery(request,response,attrQuery,attrAuthorityEntityID,realm);  } catch (  SAML2Exception se) {    SAML2Utils.debug.error("AttributeQueryUtil.processAttributeQuery:",se);    return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.REQUESTER,null,se.getMessage(),null);  }  Issuer issuer=attrQuery.getIssuer();  String requesterEntityID=issuer.getValue();  AttributeAuthorityDescriptorElement aad=null;  try {    aad=metaManager.getAttributeAuthorityDescriptor(realm,attrAuthorityEntityID);  } catch (  SAML2MetaException sme) {    SAML2Utils.debug.error("AttributeQueryUtil.processAttributeQuery:",sme);    return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.RESPONDER,null,SAML2Utils.bundle.getString("metaDataError"),null);  }  if (aad == null) {    return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.REQUESTER,null,SAML2Utils.bundle.getString("attrAuthorityNotFound"),null);  }  Object identity=null;  try {    identity=attrAuthorityMapper.getIdentity(request,response,attrQuery,attrAuthorityEntityID,realm);  } catch (  SAML2Exception se) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("AttributeQueryUtil." + "processAttributeQuery: ",se);    }    return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.REQUESTER,SAML2Constants.UNKNOWN_PRINCIPAL,se.getMessage(),null);  }  if (identity == null) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("AttributeQueryUtil." + "processAttributeQuery: unable to find identity.");    }    return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.REQUESTER,SAML2Constants.UNKNOWN_PRINCIPAL,null,null);  }  List desiredAttrs=(List)request.getAttribute("AttributeQueryUtil-desiredAttrs");  if (desiredAttrs == null) {    desiredAttrs=attrQuery.getAttributes();  }  try {    desiredAttrs=verifyDesiredAttributes(aad.getAttribute(),desiredAttrs);  } catch (  SAML2Exception se) {    return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.REQUESTER,SAML2Constants.INVALID_ATTR_NAME_OR_VALUE,null,null);  }  List attributes=attrAuthorityMapper.getAttributes(identity,attrQuery,attrAuthorityEntityID,realm);  if (request.getAttribute("AttributeQueryUtil-storeAllAttributes") != null) {    request.setAttribute("AttributeQueryUtil-allAttributes",attributes);  }  attributes=filterAttributes(attributes,desiredAttrs);  ProtocolFactory protocolFactory=ProtocolFactory.getInstance();  Response samlResp=protocolFactory.createResponse();  List assertionList=new ArrayList();  Assertion assertion=null;  try {    assertion=getAssertion(attrQuery,attrAuthorityEntityID,requesterEntityID,realm,attrQueryProfileAlias,attributes);  } catch (  SAML2Exception se) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("AttributeQueryUtil.processAttributeQuery:",se);    }    return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.RESPONDER,null,se.getMessage(),null);  }  EncryptedID encryptedID=attrQuery.getSubject().getEncryptedID();  if (encryptedID != null) {    EncryptedAssertion encryptedAssertion=null;    try {      signAssertion(assertion,realm,attrAuthorityEntityID,false);      encryptedAssertion=encryptAssertion(assertion,encryptedID,attrAuthorityEntityID,requesterEntityID,realm,attrQueryProfileAlias);    } catch (    SAML2Exception se) {      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message("AttributeQueryUtil.processAttributeQuery:",se);      }      return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.RESPONDER,null,se.getMessage(),null);    }    assertionList.add(encryptedAssertion);    samlResp.setEncryptedAssertion(assertionList);  } else {    assertionList.add(assertion);    samlResp.setAssertion(assertionList);  }  samlResp.setID(SAML2Utils.generateID());  samlResp.setInResponseTo(attrQuery.getID());  samlResp.setVersion(SAML2Constants.VERSION_2_0);  samlResp.setIssueInstant(newDate());  Status status=protocolFactory.createStatus();  StatusCode statusCode=protocolFactory.createStatusCode();  statusCode.setValue(SAML2Constants.SUCCESS);  status.setStatusCode(statusCode);  samlResp.setStatus(status);  Issuer respIssuer=AssertionFactory.getInstance().createIssuer();  respIssuer.setValue(attrAuthorityEntityID);  samlResp.setIssuer(respIssuer);  signResponse(samlResp,attrAuthorityEntityID,realm,false);  return samlResp;}  }
class C{  public SaltedSHA256FieldStorageScheme() throws Exception {  super(SHA256_LENGTH,ALGORITHM_SHA_256);}  }
class C{  void addParamsFromFailedTest(Object[] testParams){  if (testParams != null) {    failedTestParams.put(testParams,testParams);  }}  }
class C{  public boolean isCompressionLossless(){  if (!canWriteCompressed()) {    throw new UnsupportedOperationException("Compression not supported");  }  if (getCompressionMode() != MODE_EXPLICIT) {    throw new IllegalStateException("Compression mode not MODE_EXPLICIT!");  }  if ((getCompressionTypes() != null) && (getCompressionType() == null)) {    throw new IllegalStateException("No compression type set!");  }  return true;}  }
class C{  public void insert_dyn_any(org.omg.DynamicAny.DynAny value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_dyn_any",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_dyn_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public Map<String,String> convertDataToStrings(Map<String,Object> data){  Map<String,String> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      Object object=data.get(key);      if (object instanceof WebAuthenticationDetails) {        WebAuthenticationDetails authenticationDetails=(WebAuthenticationDetails)object;        results.put("remoteAddress",authenticationDetails.getRemoteAddress());        results.put("sessionId",authenticationDetails.getSessionId());      } else       if (object != null) {        results.put(key,object.toString());      } else {        results.put(key,"null");      }    }  }  return results;}  }
class C{  public ProxiedAuthV2Control(boolean isCritical,ByteString authorizationID){  super(OID_PROXIED_AUTH_V2,isCritical);  ifNull(authorizationID);  this.authorizationID=authorizationID;}  }
class C{  protected ResolveResult(){  resolvedObj=null;  remainingName=null;}  }
class C{  public Dimension minimumLayoutSize(Container target){synchronized (target.getTreeLock()) {    boolean useBaseline=getAlignOnBaseline();    Dimension dim=new Dimension(0,0);    int nmembers=target.getComponentCount();    int maxAscent=0;    int maxDescent=0;    boolean firstVisibleComponent=true;    for (int i=0; i < nmembers; i++) {      Component m=target.getComponent(i);      if (m.visible) {        Dimension d=m.getMinimumSize();        dim.height=Math.max(dim.height,d.height);        if (firstVisibleComponent) {          firstVisibleComponent=false;        } else {          dim.width+=hgap;        }        dim.width+=d.width;        if (useBaseline) {          int baseline=m.getBaseline(d.width,d.height);          if (baseline >= 0) {            maxAscent=Math.max(maxAscent,baseline);            maxDescent=Math.max(maxDescent,dim.height - baseline);          }        }      }    }    if (useBaseline) {      dim.height=Math.max(maxAscent + maxDescent,dim.height);    }    Insets insets=target.getInsets();    dim.width+=insets.left + insets.right + hgap * 2;    dim.height+=insets.top + insets.bottom + vgap * 2;    return dim;  }}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public static TypeReference newFormalParameterReference(int paramIndex){  return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));}  }
class C{  private void addEntry(Entry srcEntry,DN dstDN){  Map<ObjectClass,String> ocMap=new LinkedHashMap<>(2);  ocMap.put(CoreSchema.getTopObjectClass(),OC_TOP);  ocMap.put(ocInstanceKey,OC_CRYPTO_INSTANCE_KEY);  Map<AttributeType,List<Attribute>> userAttrs=new HashMap<>();  putAttributeTypeIfExist(userAttrs,srcEntry,attrAlias);  putAttributeTypeIfExist(userAttrs,srcEntry,attrCert);  Entry addEntry=new Entry(dstDN,ocMap,userAttrs,null);  AddOperation addOperation=getRootConnection().processAdd(addEntry);  if (addOperation.getResultCode() != ResultCode.SUCCESS) {    logger.debug(INFO_TRUSTSTORESYNC_ADD_FAILED,dstDN,addOperation.getErrorMessage());  }}  }
class C{  public void readConfiguration(){  final List<OpenDsException> errors=new ArrayList<>();  final Set<ConnectionHandlerDescriptor> connectionHandlers=new HashSet<>();  final Set<BackendDescriptor> backendDescriptors=new HashSet<>();  final Set<DN> alternateBindDNs=new HashSet<>();  try {    readConfig(connectionHandlers,backendDescriptors,alternateBindDNs,errors);  } catch (  final OpenDsException oe) {    errors.add(oe);  }catch (  final Throwable t) {    logger.warn(LocalizableMessage.raw("Error reading configuration: " + t,t));    errors.add(new OfflineUpdateException(ERR_READING_CONFIG_LDAP.get(t.getMessage()),t));  }  if (!errors.isEmpty() && environmentSettingException != null) {    errors.add(0,environmentSettingException);  }  for (  final OpenDsException oe : errors) {    logger.warn(LocalizableMessage.raw("Error reading configuration: " + oe,oe));  }  exceptions.addAll(errors);  exceptions=Collections.unmodifiableList(exceptions);  administrativeUsers=Collections.unmodifiableSet(alternateBindDNs);  listeners=Collections.unmodifiableSet(connectionHandlers);  backends=Collections.unmodifiableSet(backendDescriptors);}  }
class C{  @Override public void mark(int limit){}  }
class C{  public void selectInitialValue(JOptionPane a){  for (int i=0; i < uis.size(); i++) {    ((OptionPaneUI)(uis.elementAt(i))).selectInitialValue(a);  }}  }
class C{  public void startEditingAtPath(JTree tree,TreePath path){  tree.scrollPathToVisible(path);  if (path != null && tree.isVisible(path))   startEditing(path,null);}  }
class C{  void delete(CSN csn){  for (Iterator<AttrValueHistorical> it=valuesHist.iterator(); it.hasNext(); ) {    AttrValueHistorical info=it.next();    if (csn.isNewerThanOrEqualTo(info.getValueUpdateTime()) && csn.isNewerThanOrEqualTo(info.getValueDeleteTime())) {      it.remove();    }  }  if (csn.isNewerThan(deleteTime)) {    deleteTime=csn;  }  if (csn.isNewerThan(lastUpdateTime)) {    lastUpdateTime=csn;  }}  }
class C{  public static String tagSwapReport(Map<String,String> reportContents,String key){  return tagSwap(reportContents,BUNDLE.getString(key));}  }
class C{  @Override synchronized boolean isThresholdTypeValid(ObjectName object,String attribute,Comparable<?> value){  final CounterMonitorObservedObject o=(CounterMonitorObservedObject)getObservedObject(object);  if (o == null)   return false;  Class<? extends Number> c=classForType(o.getType());  return (c.isInstance(o.getThreshold()) && isValidForType(offset,c) && isValidForType(modulus,c));}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  CCActionTable table=(CCActionTable)getChild(TBL_PROPERTY_NAMES);  table.restoreStateData();  Integer[] selected=tblPropertyNamesModel.getSelectedRows();  SerializedField szCache=(SerializedField)getChild(SZ_CACHE);  List list=(List)szCache.getSerializedObj();  Map inherit=new HashMap();  for (Iterator i=list.iterator(); i.hasNext(); ) {    String name=(String)i.next();    inherit.put(name,"0");  }  for (int i=0; i < selected.length; i++) {    String name=(String)list.get(selected[i].intValue());    inherit.put(name,"1");  }  try {    AgentsModel model=(AgentsModel)getModel();    String universalId=(String)getPageSessionAttribute(AgentProfileViewBean.UNIVERSAL_ID);    model.updateAgentConfigInheritance(universalId,inherit);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","agentcfg.inheritance.updated");  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public final String toString(){  if (this.initialized == false) {    return null;  }  return paramSpi.engineToString();}  }
class C{  @Override public void write(char buf[]) throws IOException {  write(buf,0,buf.length);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  propertySheetModel.clear();  forwardTo();}  }
class C{  public boolean seek(ByteBuffer byteBuffer){  byte[] buffer=new byte[FIELD_TAGID_LENGTH];  byteBuffer.get(buffer,0,FIELD_TAGID_LENGTH);  return (Arrays.equals(buffer,TAG_ID));}  }
class C{  public WelcomeHandler(Factory<Buffer> storage){  this.storage=storage;}  }
class C{  private String validate(String path){  if (!getState().isAvailable()) {    throw new IllegalStateException(sm.getString("standardRoot.checkStateNotStarted"));  }  if (path == null || path.length() == 0 || !path.startsWith("/")) {    throw new IllegalArgumentException(sm.getString("standardRoot.invalidPath",path));  }  String result;  if (File.separatorChar == '\\') {    result=RequestUtil.normalize(path,true);  } else {    result=RequestUtil.normalize(path,false);  }  if (result == null || result.length() == 0 || !result.startsWith("/")) {    throw new IllegalArgumentException(sm.getString("standardRoot.invalidPathNormal",path,result));  }  return result;}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo updateFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().updateFoo(foo);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  boolean state;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  state=employeeNode.hasChildNodes();  assertTrue("nodeHasChildAssert1",state);}  }
class C{  public void flush() throws IOException {  for (  Entry<String,Aggregator> entry : getFlushMap().entrySet()) {    if (store != null) {      store.persist(taskId,entry.getKey(),entry.getValue());    }    entry.getValue().reset();  }}  }
class C{  public static <T>T orderAccesses(final T ref){  theVolatile=0;  return ref;}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  super.handleButton2Request(event);}  }
class C{  private boolean hasObjectClass(String objectClassLowerCase){  ObjectClass oc=DirectoryServer.getSchema().getObjectClass(objectClassLowerCase);  if (oc.isPlaceHolder()) {    logger.trace("No %s objectclass is defined in the server schema.",objectClassLowerCase);    return containsObjectClassByName(objectClassLowerCase);  }  return objectClasses.containsKey(oc);}  }
