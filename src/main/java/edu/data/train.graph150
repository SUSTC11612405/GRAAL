class C{  @Override public RuleRefAST dupNode(){  RuleRefAST r=new RuleRefAST(this);  r.token=this.token;  this.token=new CommonToken(r.token);  return r;}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.SERVICE_ACTIVATOR;}  }
class C{  public void addDataCallback(OneSheeldDataCallback dataCallback){  if (dataCallback != null && !dataCallbacks.contains(dataCallback))   dataCallbacks.add(dataCallback);}  }
class C{  private void emitPrimCast(Wrapper from,Wrapper to){  if (from == to) {    return;  }  if (from.isSubwordOrInt()) {    emitI2X(to);  } else {    if (to.isSubwordOrInt()) {      emitX2I(from);      if (to.bitWidth() < 32) {        emitI2X(to);      }    } else {      boolean error=false;switch (from) {case LONG:switch (to) {case FLOAT:          mv.visitInsn(Opcodes.L2F);        break;case DOUBLE:      mv.visitInsn(Opcodes.L2D);    break;default :  error=true;break;}break;case FLOAT:switch (to) {case LONG:mv.visitInsn(Opcodes.F2L);break;case DOUBLE:mv.visitInsn(Opcodes.F2D);break;default :error=true;break;}break;case DOUBLE:switch (to) {case LONG:mv.visitInsn(Opcodes.D2L);break;case FLOAT:mv.visitInsn(Opcodes.D2F);break;default :error=true;break;}break;default :error=true;break;}if (error) {throw new IllegalStateException("unhandled prim cast: " + from + "2"+ to);}}}}  }
class C{  protected static boolean U16(Address a){  return a.toWord().and(Word.fromIntZeroExtend(0xffff)).isZero();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static int rotateSide(int s,int r){  return sideRotMap[s << 2 | r];}  }
class C{  public ContentInfo toASN1Structure(){  return contentInfo;}  }
class C{  private void writeBit(boolean x){  buffer<<=1;  if (x)   buffer|=1;  n++;  if (n == 8)   clearBuffer();}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public void connectionLost(final Throwable cause){  logger.error("Connection lost",cause);  connection.connectionLost(cause);}  }
class C{  private void addChatUserItemSorted(Pane pane,ChatUserItemController chatUserItemController){  ObservableList<Node> children=pane.getChildren();  Pane chatUserItemRoot=chatUserItemController.getRoot();  if (chatUserItemController.getPlayerInfoBean().getSocialStatus() == SELF) {    children.add(0,chatUserItemRoot);    return;  }  String thisUsername=chatUserItemController.getPlayerInfoBean().getUsername();  for (  Node child : children) {    String otherUsername=((ChatUserItemController)child.getUserData()).getPlayerInfoBean().getUsername();    if (otherUsername.equalsIgnoreCase(userService.getUsername())) {      continue;    }    if (thisUsername.compareToIgnoreCase(otherUsername) < 0) {      children.add(children.indexOf(child),chatUserItemRoot);      return;    }  }  children.add(chatUserItemRoot);}  }
class C{  private boolean currentlyAssignedGroup(LogicCircuit lc,String group_name){  for (  Gate g : lc.get_logic_gates()) {    if (g.Group.equals(group_name)) {      return true;    }  }  return false;}  }
class C{  public static byte[] bitmapToByteArray(Bitmap image){  if (image == null) {    if (LOCAL_LOGV)     Log.v(TAG,"image is null, returning byte array of size 0");    return new byte[0];  }  ByteArrayOutputStream stream=new ByteArrayOutputStream();  image.compress(Bitmap.CompressFormat.JPEG,90,stream);  return stream.toByteArray();}  }
class C{  @Override public void ready(){  if (attacks.isEmpty() && GUIPreferences.getInstance().getNagForNoAction()) {    String title=Messages.getString("FiringDisplay.DontFireDialog.title");    String body=Messages.getString("FiringDisplay.DontFireDialog.message");    ConfirmDialog response=clientgui.doYesNoBotherDialog(title,body);    if (!response.getShowAgain()) {      GUIPreferences.getInstance().setNagForNoAction(false);    }    if (!response.getAnswer()) {      return;    }  }  if ((ce() != null) && ce().isCapitalFighter() && GUIPreferences.getInstance().getNagForOverheat()) {    int totalheat=0;    for (    EntityAction action : attacks) {      if (action instanceof WeaponAttackAction) {        Mounted weapon=ce().getEquipment(((WeaponAttackAction)action).getWeaponId());        totalheat+=weapon.getCurrentHeat();      }    }    if (totalheat > ce().getHeatCapacity()) {      String title=Messages.getString("FiringDisplay.OverheatNag.title");      String body=Messages.getString("FiringDisplay.OverheatNag.message");      ConfirmDialog response=clientgui.doYesNoBotherDialog(title,body);      if (!response.getShowAgain()) {        GUIPreferences.getInstance().setNagForOverheat(false);      }      if (!response.getAnswer()) {        return;      }    }  }  disableButtons();  removeTempAttacks();  Vector<EntityAction> newAttacks=new Vector<EntityAction>();  for (  EntityAction o : attacks) {    if (o instanceof ArtilleryAttackAction) {      newAttacks.addElement(o);    } else     if (o instanceof WeaponAttackAction) {      WeaponAttackAction waa=(WeaponAttackAction)o;      Entity attacker=waa.getEntity(clientgui.getClient().getGame());      Targetable target1=waa.getTarget(clientgui.getClient().getGame());      boolean curInFrontArc=Compute.isInArc(attacker.getPosition(),attacker.getSecondaryFacing(),target1,attacker.getForwardArc());      if (curInFrontArc) {        WeaponAttackAction waa2=new WeaponAttackAction(waa.getEntityId(),waa.getTargetType(),waa.getTargetId(),waa.getWeaponId());        waa2.setAimedLocation(waa.getAimedLocation());        waa2.setAimingMode(waa.getAimingMode());        waa2.setOtherAttackInfo(waa.getOtherAttackInfo());        waa2.setAmmoId(waa.getAmmoId());        waa2.setBombPayload(waa.getBombPayload());        waa2.setStrafing(waa.isStrafing());        waa2.setStrafingFirstShot(waa.isStrafingFirstShot());        newAttacks.addElement(waa2);      }    } else {      newAttacks.addElement(o);    }  }  for (  EntityAction o : attacks) {    if (o instanceof ArtilleryAttackAction) {      continue;    } else     if (o instanceof WeaponAttackAction) {      WeaponAttackAction waa=(WeaponAttackAction)o;      Entity attacker=waa.getEntity(clientgui.getClient().getGame());      Targetable target1=waa.getTarget(clientgui.getClient().getGame());      boolean curInFrontArc=Compute.isInArc(attacker.getPosition(),attacker.getSecondaryFacing(),target1,attacker.getForwardArc());      if (!curInFrontArc) {        WeaponAttackAction waa2=new WeaponAttackAction(waa.getEntityId(),waa.getTargetType(),waa.getTargetId(),waa.getWeaponId());        waa2.setAimedLocation(waa.getAimedLocation());        waa2.setAimingMode(waa.getAimingMode());        waa2.setOtherAttackInfo(waa.getOtherAttackInfo());        waa2.setAmmoId(waa.getAmmoId());        waa2.setBombPayload(waa.getBombPayload());        waa2.setStrafing(waa.isStrafing());        waa2.setStrafingFirstShot(waa.isStrafingFirstShot());        newAttacks.addElement(waa2);      }    }  }  if ((target instanceof Entity) && Compute.isGroundToAir(ce(),target)) {    Coords targetPos=((Entity)target).getPlayerPickedPassThrough(cen);    if (targetPos != null) {      clientgui.getClient().sendPlayerPickedPassThrough(((Entity)target).getId(),cen,targetPos);    }  }  clientgui.getClient().sendAttackData(cen,newAttacks);  attacks.removeAllElements();  clientgui.getMenuBar().setEntity(null);  ash.closeDialog();  if ((ce() != null) && ce().isWeapOrderChanged()) {    clientgui.getClient().sendEntityWeaponOrderUpdate(ce());  }  endMyTurn();}  }
class C{  private boolean isCapacityOk(long fileSize){  FileCapacity capacity=isFileCapacityAcceptable(fileSize);switch (capacity) {case FILE_TOO_BIG:    showMessageThenExit(R.string.label_transfer_failed_too_big);  return false;case STORAGE_TOO_SMALL:showMessageThenExit(R.string.label_transfer_failed_capacity_too_small);return false;default :return true;}}  }
class C{  protected void onSetChannelLimit(String channel,String sourceNick,String sourceLogin,String sourceHostname,int limit){}  }
class C{  public void receiveResultqueryUniqueIdentifiersForFileSystems(com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForFileSystemsResponse result){}  }
class C{  public static MultivaluedMap<String,String> decode(MultivaluedMap<String,String> map){  MultivaluedMapImpl<String,String> decoded=new MultivaluedMapImpl<String,String>();  for (  Map.Entry<String,List<String>> entry : map.entrySet()) {    List<String> values=entry.getValue();    for (    String value : values) {      try {        decoded.add(URLDecoder.decode(entry.getKey(),UTF_8),URLDecoder.decode(value,UTF_8));      } catch (      UnsupportedEncodingException e) {        throw new RuntimeException(e);      }    }  }  return decoded;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  doc=(Document)load("hc_nodtdstaff",false);  docType=doc.getDoctype();  assertNull("documentGetDocTypeNoDTDAssert",docType);}  }
class C{  public AmqpMessage receive() throws Exception {  checkClosed();  return prefetch.take();}  }
class C{  private SavedState(){  superState=null;}  }
class C{  public MultisigSignatureTransaction(final TimeInstant timeStamp,final Account sender,final Account multisig,final Transaction otherTransaction){  this(timeStamp,sender,multisig,HashUtils.calculateHash(otherTransaction));}  }
class C{  public int compareTo(Object o){  if (o == null) {    throw new IllegalArgumentException();  }  int oTag=((TIFFField)o).getTag();  if (tag < oTag) {    return -1;  } else   if (tag > oTag) {    return 1;  } else {    return 0;  }}  }
class C{  public boolean isUnformatted(){  final Object u=super.get(FIELD_UNFORMATTED);  if (u instanceof Boolean) {    return (Boolean)u;  }  return false;}  }
class C{  public static long maximum(long a,long b,long c){  if (b > a) {    a=b;  }  if (c > a) {    a=c;  }  return a;}  }
class C{  @Override public void onPlaybackStart(){  if (!mSession.isActive()) {    mSession.setActive(true);  }  mDelayedStopHandler.removeCallbacksAndMessages(null);  startService(new Intent(getApplicationContext(),MusicService.class));}  }
class C{  void byteSource(GridByteArrayList byteSrc){  this.byteSrc=byteSrc;}  }
class C{  public void println(java.io.PrintStream ps){  Printer.print(this,new java.io.PrintWriter(ps,true));}  }
class C{  public <T>T createDtoFromJson(String json,Class<T> dtoInterface){  return getDtoProvider(dtoInterface).fromJson(json);}  }
class C{  public static long max(long a,long b,long c){  if (b > a) {    a=b;  }  if (c > a) {    a=c;  }  return a;}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (!(params instanceof KeyParameter)) {    throw new IllegalArgumentException("invalid parameter passed to RC6 init - " + params.getClass().getName());  }  KeyParameter p=(KeyParameter)params;  this.forEncryption=forEncryption;  setKey(p.getKey());}  }
class C{  public IncompatibleRolesException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public DViewCsr(JFrame parent,String title,Spkac spkacCsr) throws CryptoException {  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  this.spkacCsr=spkacCsr;  initComponents();}  }
class C{  public MutableInterval(ReadableDuration duration,ReadableInstant end){  super(duration,end);}  }
class C{  public void generateOptimizedLessThan(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  int promotedTypeID=(this.left.implicitConversion & TypeIds.IMPLICIT_CONVERSION_MASK) >> 4;  if (promotedTypeID == TypeIds.T_int) {    if ((this.left.constant != Constant.NotAConstant) && (this.left.constant.intValue() == 0)) {      this.right.generateCode(currentScope,valueRequired);      return;    }    if ((this.right.constant != Constant.NotAConstant) && (this.right.constant.intValue() == 0)) {      this.left.generateCode(currentScope,valueRequired);      return;    }  }  this.left.generateCode(currentScope,valueRequired);  this.right.generateCode(currentScope,valueRequired);}  }
class C{  public static CProject createProject(final AbstractSQLProvider provider,final String name) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE00513: Provider argument can not be null");  Preconditions.checkNotNull(name,"IE00514: Project names can not be null");  Preconditions.checkArgument(!("".equals(name)),"IE00515: Project names can not be empty");  final CConnection connection=provider.getConnection();  NaviLogger.info("Creating new project %s",name);  final String query="INSERT INTO " + CTableNames.PROJECTS_TABLE + "(name, description, creation_date, modification_date) VALUES(?, '', NOW(), NOW()) RETURNING id";  try (PreparedStatement statement=connection.getConnection().prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY)){    statement.setString(1,name);    ResultSet resultSet=statement.executeQuery();    Integer id=null;    while (resultSet.next()) {      if (resultSet.isFirst()) {        id=resultSet.getInt(1);        break;      }    }    Preconditions.checkNotNull(id,"IE02044: Error id for a project after creation may not be null");    return PostgreSQLProjectCreator.loadProject(provider,id);  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  private void processAnsiCommand_A(){  moveCursorUp(getAnsiParameter(0));}  }
class C{  public byte[] encode(){  byte binValue[]=new byte[HEADER_LENGTH];  binValue[0]=(byte)(getAttributeType() >> 8);  binValue[1]=(byte)(getAttributeType() & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  return binValue;}  }
class C{  protected File findFile(String fileName){  String path=TestUtil.getResourcePath(getClass(),fileName);  return new File(path);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processRequest(request,response);}  }
class C{  public ObjectMatrix1D viewRow(int row){  checkRow(row);  int viewSize=this.columns;  int viewZero=columnZero;  int viewStride=this.columnStride;  int[] viewOffsets=this.columnOffsets;  int viewOffset=this.offset + _rowOffset(_rowRank(row));  return new SelectedDenseObjectMatrix1D(viewSize,this.elements,viewZero,viewStride,viewOffsets,viewOffset);}  }
class C{  private void delete(String id,String cfName,boolean force) throws Exception {  final Class clazz=getClassFromCFName(cfName);  if (clazz == null) {    return;  }  boolean deleted=queryAndDeleteObject(URI.create(id),clazz,force);  if (deleted) {    log.info("The object {} is deleted from the column family {}",id,cfName);    System.out.println(String.format("The object %s is deleted from the column family %s",id,cfName));  } else {    log.info("The object {} is NOT deleted from the column family {}",id,cfName);    System.out.println(String.format("The object %s is NOT deleted from the column family %s",id,cfName));  }}  }
class C{  public void update(int done,int total){  if (isFirst) {    this.clearConsole();    System.out.println("");  } else {    setCursorPos(0,1);    lineClear();    setCursorPos(0,1);  }  char[] workchars={'|','/','-','\\'};  String format="\r%3d%% %s %c";  int percent=(++done * 100) / total;  int extrachars=(percent / 2) - this.progress.length();  while (extrachars-- > 0) {    progress.append('=');  }  extracharsBK=this.progress.length() + 7;  System.out.printf(format,percent,progress,workchars[done % workchars.length]);  handler.flush();  if (done == total) {    System.out.flush();    init();  }}  }
class C{  private static Icon createDisabledIcon(JCheckBox checkBox,Icon icon){  Image image=new BufferedImage(icon.getIconWidth(),icon.getIconWidth(),BufferedImage.TYPE_INT_RGB);  Graphics g=image.getGraphics();  checkBox.setSelected(true);  icon.paintIcon(checkBox,g,0,0);  g.dispose();  return UIManager.getLookAndFeel().getDisabledIcon(checkBox,new ImageIcon(image));}  }
class C{  public double computeAverageLocalOfObservations(){  double mi=0.0;  for (int b=0; b < totalObservations; b++) {    double probCont=mvke.getProbability(contObservations[b]);    double condProbCont=mvkeForEachDiscrete[discObservations[b]].getProbability(contObservations[b]);    double logTerm=0.0;    double cont=0.0;    if (condProbCont > 0.0) {      logTerm=condProbCont / probCont;      cont=Math.log(logTerm);    }    mi+=cont;    if (debug) {      System.out.printf("%d: %.3f, %d, (%.3f %d, %.5f %d) %.5f -> %.5f -> %.5f\n",b,contObservations[b][0],discObservations[b],condProbCont,mvkeForEachDiscrete[discObservations[b]].getCount(contObservations[b]),probCont,mvke.getCount(contObservations[b]),logTerm,cont,mi);    }  }  lastAverage=mi / (double)totalObservations / Math.log(2.0);  miComputed=true;  return lastAverage;}  }
class C{  private static String fillString(String in,int len){  String out=new String(in);  while (out.length() < len) {    out=" " + out;  }  return (out);}  }
class C{  public static void updateLong(VisualItem item,String field,long val){  item.setLong(getStartField(field),item.getLong(field));  item.setLong(field,val);  item.setLong(getEndField(field),val);}  }
class C{  public void shrinkScenario(String outputDirectory,String shapeFileDirectory,double cuttingBoundingBoxOffset,double freeSpeedFilter,boolean useFreeSpeedTravelTime,double maximalLinkLength,boolean simplifyNetwork) throws IOException {  Set<Id<Node>> signalizedNodes=this.getSignalizedNodeIds(((SignalsData)this.fullScenario.getScenarioElement(SignalsData.ELEMENT_NAME)).getSignalSystemsData(),this.fullScenario.getNetwork());  DgNetworkUtils.writeNetwork2Shape(fullScenario.getNetwork(),crs,shapeFileDirectory + "network_full");  this.cuttingBoundingBox=new DgSignalsBoundingBox(crs);  Envelope cuttingBoundingBoxEnvelope=cuttingBoundingBox.calculateBoundingBoxForSignals(fullScenario.getNetwork(),((SignalsData)fullScenario.getScenarioElement(SignalsData.ELEMENT_NAME)).getSignalSystemsData(),cuttingBoundingBoxOffset);  cuttingBoundingBox.writeBoundingBox(shapeFileDirectory + "cutting_");  DgNetworkShrinker netShrinker=new DgNetworkShrinker();  netShrinker.setSignalizedNodes(signalizedNodes);  Network bbNetwork=netShrinker.filterLinksOutsideEnvelope(fullScenario.getNetwork(),cuttingBoundingBoxEnvelope);  DgNetworkUtils.writeNetwork(bbNetwork,outputDirectory + bbNetworkFilename);  DgNetworkUtils.writeNetwork2Shape(bbNetwork,crs,shapeFileDirectory + "network_bb_allLinks");  Network smallNetwork=netShrinker.filterInteriorLinks(bbNetwork,freeSpeedFilter,useFreeSpeedTravelTime);  DgNetworkUtils.writeNetwork(smallNetwork,outputDirectory + smallNetworkFilename);  DgNetworkUtils.writeNetwork2Shape(smallNetwork,crs,shapeFileDirectory + "network_small");  DgNetworkCleaner cleaner=new DgNetworkCleaner();  cleaner.cleanNetwork(smallNetwork);  String smallNetworkClean=outputDirectory + "network_small_clean.xml.gz";  DgNetworkUtils.writeNetwork(smallNetwork,smallNetworkClean);  DgNetworkUtils.writeNetwork2Shape(smallNetwork,crs,shapeFileDirectory + "network_small_clean");  Set<Integer> nodeTypesToMerge=new TreeSet<Integer>();  if (simplifyNetwork) {    nodeTypesToMerge.add(NetworkCalcTopoType.PASS1WAY);    nodeTypesToMerge.add(NetworkCalcTopoType.PASS2WAY);  }  NetworkLanesSignalsSimplifier nsimply=new NetworkLanesSignalsSimplifier();  nsimply.setNodesToMerge(nodeTypesToMerge);  nsimply.setSimplifySignalizedNodes(false);  nsimply.setMaximalLinkLength(maximalLinkLength);  nsimply.simplifyNetworkLanesAndSignals(smallNetwork,this.fullScenario.getLanes(),(SignalsData)this.fullScenario.getScenarioElement(SignalsData.ELEMENT_NAME));  this.originalToSimplifiedLinkIdMatching=nsimply.getOriginalToSimplifiedLinkIdMatching();  this.shrinkedNetwork=smallNetwork;  this.shrinkedLanes=this.fullScenario.getLanes();  this.shrinkedSignals=(SignalsData)this.fullScenario.getScenarioElement(SignalsData.ELEMENT_NAME);  LanesConsistencyChecker lanesConsistency=new LanesConsistencyChecker(smallNetwork,shrinkedLanes);  lanesConsistency.checkConsistency();  SignalSystemsDataConsistencyChecker signalsConsistency=new SignalSystemsDataConsistencyChecker(this.shrinkedNetwork,this.shrinkedLanes,this.shrinkedSignals);  signalsConsistency.checkConsistency();  String simplifiedNetworkFile=outputDirectory + simplifiedNetworkFilename;  DgNetworkUtils.writeNetwork(smallNetwork,simplifiedNetworkFile);  DgNetworkUtils.writeNetwork2Shape(smallNetwork,crs,shapeFileDirectory + "network_small_simplified");  LanesWriter lanesWriter=new LanesWriter(this.fullScenario.getLanes());  lanesWriter.write(outputDirectory + simplifiedLanesFilename);  SignalsScenarioWriter signalsWriter=new SignalsScenarioWriter(outputDirectory);  signalsWriter.writeSignalsData(this.fullScenario);}  }
class C{  public ResultFileEvaluator(){  super();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TYPE_VARIABLE___GET_VARIANCE:    return getVariance();case TypesPackage.TYPE_VARIABLE___GET_TYPE_VARS:  return getTypeVars();case TypesPackage.TYPE_VARIABLE___GET_TYPE_AS_STRING:return getTypeAsString();case TypesPackage.TYPE_VARIABLE___GET_TYPE_VARIABLE_AS_STRING__TYPEREF:return getTypeVariableAsString((TypeRef)arguments.get(0));}return super.eInvoke(operationID,arguments);}  }
class C{  public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  public void removeLineHighlight(Object tag){  if (tag instanceof LineHighlightInfo) {    lineHighlights.remove(tag);    repaintLine((LineHighlightInfo)tag);  }}  }
class C{  public final void clear(){  nextChar=0;}  }
class C{  DESedeKey(byte[] key) throws InvalidKeyException {  this(key,0);}  }
class C{  protected Date compute(double value){  if (Double.isNaN(value)) {    return null;  }  long dateLong=(long)value;  Date date=new Date(dateLong);  Calendar cal=Calendar.getInstance();  cal.setTime(date);  return cal.getTime();}  }
class C{  private int indexToView(int index){  return convertRowIndexToView(index);}  }
class C{  public static Intent newIntent(Context packageContext){  return new Intent(packageContext,TwitterCoreMainActivity.class);}  }
class C{  public DailyTimeIntervalScheduleBuilder withIntervalInSeconds(int intervalInSeconds){  withInterval(intervalInSeconds,IntervalUnit.SECOND);  return this;}  }
class C{  public QueryOption(final String name,final String value){  super(name,value);}  }
class C{  public String globalInfo(){  return "Class implementing the FP-growth algorithm for finding" + " large item sets without candidate generation. Iteratively" + " reduces the minimum support until it finds the required"+ " number of rules with the given minimum metric."+ " For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public GenericEntry toGenericEntry(){  GenericEntry entry=new GenericEntry();  entry.addProperty("destUserName",destUserName);  entry.addProperty("beginDate",DATE_FORMAT.format(beginDate));  entry.addProperty("endDate",DATE_FORMAT.format(endDate));  entry.addProperty("incomingEmailMonitorLevel",incomingEmailMonitorLevel);  entry.addProperty("outgoingEmailMonitorLevel",outgoingEmailMonitorLevel);  entry.addProperty("draftMonitorLevel",draftMonitorLevel);  entry.addProperty("chatMonitorLevel",chatMonitorLevel);  return entry;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.287 -0500",hash_original_method="2AEE2538D487594FA64E74F73C7B1C5D",hash_generated_method="F5CCE38ED3E067125403E4B4064E2701") public static boolean isLetterOrDigit(int codePoint){  if (('A' <= codePoint && codePoint <= 'Z') || ('a' <= codePoint && codePoint <= 'z')) {    return true;  }  if ('0' <= codePoint && codePoint <= '9') {    return true;  }  if (codePoint < 128) {    return false;  }  return isLetterOrDigitImpl(codePoint);}  }
class C{  static void put(Pointer address,int index,byte[] src,int offset,int length){  Address startAddress=getAddressFromPointer(address);  for (int i=0; i < length; i++) {    startAddress.store(src[offset + i],Offset.fromIntSignExtend(index + i));  }}  }
class C{  protected void clearParameters(){  textField1.setValue("");  textField2.setValue("");  textField3.setValue("");  textField4.setValue("");}  }
class C{  public final double rootMeanSquaredError(){  return m_delegate.rootMeanSquaredError();}  }
class C{  public void mouseClicked(MouseEvent event){}  }
class C{  private void skipSpecialTag(int bracketLevel){  int tagLevel=1;  char stringDelimiter='\0';  if (bracketLevel == 0) {    char ch=this.readChar();    if (ch == '[') {      bracketLevel+=1;    } else     if (ch == '-') {      ch=this.readChar();      if (ch == '[') {        bracketLevel+=1;      } else       if (ch == ']') {        bracketLevel-=1;      } else       if (ch == '-') {        this.skipComment();        return;      }    }  }  while (tagLevel > 0) {    char ch=this.readChar();    if (stringDelimiter == '\0') {      if ((ch == '"') || (ch == '\'')) {        stringDelimiter=ch;      } else       if (bracketLevel <= 0) {        if (ch == '<') {          tagLevel+=1;        } else         if (ch == '>') {          tagLevel-=1;        }      }      if (ch == '[') {        bracketLevel+=1;      } else       if (ch == ']') {        bracketLevel-=1;      }    } else {      if (ch == stringDelimiter) {        stringDelimiter='\0';      }    }  }}  }
class C{  @Override public void populateDAG(DAG dag,Configuration conf){  InputGenerator randomInputGenerator=dag.addOperator("rand",new InputGenerator());  FaithfulRScript rScriptOp=dag.addOperator("rScriptOp",new FaithfulRScript("com/datatorrent/demos/r/oldfaithful/eruptionModel.R","eruptionModel","retVal"));  ConsoleOutputOperator consoles=dag.addOperator("consoles",new ConsoleOutputOperator());  Map<String,FaithfulRScript.REXP_TYPE> argTypeMap=new HashMap<String,FaithfulRScript.REXP_TYPE>();  argTypeMap.put("ELAPSEDTIME",FaithfulRScript.REXP_TYPE.REXP_INT);  argTypeMap.put("ERUPTIONS",FaithfulRScript.REXP_TYPE.REXP_ARRAY_DOUBLE);  argTypeMap.put("WAITING",FaithfulRScript.REXP_TYPE.REXP_ARRAY_INT);  rScriptOp.setArgTypeMap(argTypeMap);  dag.addStream("ingen_faithfulRscript",randomInputGenerator.outputPort,rScriptOp.faithfulInput).setLocality(locality);  dag.addStream("ingen_faithfulRscript_eT",randomInputGenerator.elapsedTime,rScriptOp.inputElapsedTime).setLocality(locality);  dag.addStream("faithfulRscript_console_s",rScriptOp.strOutput,consoles.input).setLocality(locality);}  }
class C{  private void fireDataStatusChanged(DataStatusEvent e){  DataStatusListener[] listeners=m_listenerList.getListeners(DataStatusListener.class);  if (listeners.length == 0)   return;  log.fine(e.toString());  if (e.getCurrentRow() >= 0) {    updateDataStatusEventProperties(e);  }  e.setInserting(m_mTable.isInserting());  for (int i=0; i < listeners.length; i++)   listeners[i].dataStatusChanged(e);}  }
class C{  public void addFromGeometry3D(Vector3 offset,Geometry3D geometry,boolean createVBOs){  float[] newVertices=null;  float[] newNormals=null;  float[] newColors=null;  float[] newTextureCoords=null;  int[] newIntIndices=null;  float[] mVerticesArray=null;  float[] mNormalsArray=null;  float[] mColorsArray=null;  float[] mTextureCoordsArray=null;  int[] mIndicesArray=null;  mVerticesArray=getFloatArrayFromBuffer(mVertices);  mNormalsArray=getFloatArrayFromBuffer(mNormals);  mColorsArray=getFloatArrayFromBuffer(mColors);  mTextureCoordsArray=getFloatArrayFromBuffer(mTextureCoords);  if (!mOnlyShortBufferSupported) {    mIndicesArray=getIntArrayFromBuffer(mIndicesInt);  } else {    mIndicesArray=getIntArrayFromBuffer(mIndicesShort);  }  int axis=0;  float[] addVertices=getFloatArrayFromBuffer(geometry.getVertices());  if (offset != null) {    for (int i=0, j=addVertices.length; i < j; ++i) {switch (axis) {case 0:        addVertices[i]+=offset.x;      break;case 1:    addVertices[i]+=offset.y;  break;case 2:addVertices[i]+=offset.z;break;}++axis;if (axis > 2) axis=0;}}float[] addNormals=getFloatArrayFromBuffer(geometry.getNormals());float[] addColors=getFloatArrayFromBuffer(geometry.getColors());float[] addTextureCoords=getFloatArrayFromBuffer(geometry.getTextureCoords());int[] addIndices=getIntArrayFromBuffer(geometry.getIndices());int index_offset=(mVerticesArray.length / 3);for (int i=0, j=addIndices.length; i < j; ++i) {addIndices[i]+=index_offset;}newVertices=concatAllFloat(mVerticesArray,addVertices);newNormals=concatAllFloat(mNormalsArray,addNormals);newColors=concatAllFloat(mColorsArray,addColors);newTextureCoords=concatAllFloat(mTextureCoordsArray,addTextureCoords);newIntIndices=concatAllInt(mIndicesArray,(int[])addIndices);setVertices(newVertices,true);mNormals=null;setNormals(newNormals);mTextureCoords=null;setTextureCoords(newTextureCoords);mColors=null;setColors(newColors);mIndicesInt=null;mIndicesShort=null;setIndices(newIntIndices);if (createVBOs) {createBuffers();}}  }
class C{  public DenseTernaryPolynomial(IntegerPolynomial intPoly){  this(intPoly.coeffs);}  }
class C{  public void allowDetachToRelease(boolean allowRelease){  if ((false == allowRelease) && !hasCache()) {    setShouldCacheNodes(true);  }  if (null != m_iter)   m_iter.allowDetachToRelease(allowRelease);  super.allowDetachToRelease(allowRelease);}  }
class C{  protected static boolean checkRawModulesTables(final CConnection connection,final String databaseName,final int rawModuleId){  Preconditions.checkNotNull(connection,"IE02261: Connection argument can not be null");  Preconditions.checkNotNull(databaseName,"IE02262: Database name argument can not be null");  Preconditions.checkArgument(rawModuleId > 0,"Raw module id %s must be a positive integer",rawModuleId);  final ImmutableSet<String> rawTableNames=ImmutableSet.of(String.format(CTableNames.RAW_ADDRESS_COMMENTS_TABLE,rawModuleId),String.format(CTableNames.RAW_ADDRESS_REFERENCES_TABLE,rawModuleId),String.format(CTableNames.RAW_BASE_TYPES,rawModuleId),String.format(CTableNames.RAW_BASIC_BLOCK_INSTRUCTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_BASIC_BLOCKS_TABLE,rawModuleId),String.format(CTableNames.RAW_CALLGRAPH_TABLE,rawModuleId),String.format(CTableNames.RAW_CONTROL_FLOW_GRAPHS_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_NODES_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_SUBSTITUTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TREE_NODES_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TREES_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TYPES_TABLE,rawModuleId),String.format(CTableNames.RAW_FUNCTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_INSTRUCTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_OPERANDS_TABLE,rawModuleId),String.format(CTableNames.RAW_SECTIONS,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TYPE_INSTANCES,rawModuleId),String.format(CTableNames.RAW_TYPE_INSTACES,rawModuleId),String.format(CTableNames.RAW_TYPES,rawModuleId));  final Pair<CConnection,String> cacheKey=new Pair<>(connection,databaseName);  if (PostgreSQLDatabaseFunctions.queryCache(cacheKey,rawTableNames)) {    return true;  } else {    if (!PostgreSQLDatabaseFunctions.fillCache(cacheKey)) {      return false;    }    return PostgreSQLDatabaseFunctions.queryCache(cacheKey,rawTableNames);  }}  }
class C{  public Object[] toArray(){synchronized (children) {    return children.keySet().toArray();  }}  }
class C{  @Override public int hashCode(){  return name.hashCode();}  }
class C{  private void loadBOM() throws Exception {  int count=0;  if (p_M_Product_ID == 0)   raiseError("Error: ","Product ID not found");  MProduct product=new MProduct(getCtx(),p_M_Product_ID,get_TrxName());  X_T_BOMLine tboml=new X_T_BOMLine(ctx,0,null);  tboml.setAD_Org_ID(product.getAD_Org_ID());  tboml.setPP_Product_BOM_ID(0);  tboml.setPP_Product_BOMLine_ID(0);  tboml.setSel_Product_ID(p_M_Product_ID);  tboml.setM_Product_ID(p_M_Product_ID);  tboml.setSel_Product_ID(p_M_Product_ID);  tboml.setDateTrx(p_DateTrx);  tboml.setImplosion(false);  tboml.setLevelNo(0);  tboml.setLevels("0");  tboml.setQtyBOM(Env.ONE);  tboml.setQtyRequired(p_QtyRequiered);  tboml.setM_Warehouse_ID(p_M_Warehouse_ID);  tboml.setSeqNo(0);  tboml.setAD_PInstance_ID(AD_PInstance_ID);  tboml.saveEx();  final String whereClause=MPPProductBOM.COLUMNNAME_M_Product_ID + "=?";  List<MPPProductBOM> boms=new Query(getCtx(),X_PP_Product_BOM.Table_Name,whereClause,get_TrxName()).setClient_ID().setOnlyActiveRecords(true).setParameters(p_M_Product_ID).list();  for (  MPPProductBOM bom : boms) {    if (bom.isValidFromTo(p_DateTrx)) {      parentExplotion(bom.get_ID(),p_QtyRequiered);      ++count;    }  }  if (count == 0)   raiseError("Error: ","Product is not a BOM");}  }
class C{  private void createExpiredRecord(String processedFileTable) throws Exception {  DataSetManager<KeyValueTable> dataSetManager=getDataset(processedFileTable);  KeyValueTable keyValueTable=dataSetManager.get();  File catalogSmall=new File(sourceFolder,CATALOG_SMALL_XML_FILE_NAME);  Calendar cal=Calendar.getInstance();  cal.add(Calendar.DATE,-40);  Date expiryDate=cal.getTime();  keyValueTable.write(Bytes.toBytes(catalogSmall.toURI().toString()),Bytes.toBytes(expiryDate.getTime()));  dataSetManager.flush();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(stack.getUIMgrSafe().getInt(EventRouter.SCREEN_SAVER_TIME,(int)(Sage.MILLIS_PER_MIN * 20)));}  }
class C{  public Image rotate(int degrees){  CodenameOneImplementation i=Display.impl;  if (i.isRotationDrawingSupported()) {    if (degrees >= 90) {      int newTransform=0;      if (transform != 0) {        newTransform=(transform + degrees) % 360;      } else {        newTransform=degrees % 360;      }      degrees%=90;      newTransform-=degrees;      if (degrees != 0) {        Image newImage=new Image(Display.impl.rotate(image,degrees));        newImage.transform=newTransform;        return newImage;      } else {        Image newImage=new Image(image);        newImage.transform=newTransform;        return newImage;      }    }    if (degrees != 0) {      return new Image(Display.impl.rotate(image,degrees));    }    return this;  } else {    return new Image(Display.impl.rotate(image,degrees));  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ParameterizedGenericMethodBinding(MethodBinding originalMethod,TypeBinding[] typeArguments,LookupEnvironment environment){  this.environment=environment;  this.modifiers=originalMethod.modifiers;  this.selector=originalMethod.selector;  this.declaringClass=originalMethod.declaringClass;  this.typeVariables=Binding.NO_TYPE_VARIABLES;  this.typeArguments=typeArguments;  this.isRaw=false;  this.tagBits=originalMethod.tagBits;  this.originalMethod=originalMethod;  this.parameters=Scope.substitute(this,originalMethod.parameters);  this.returnType=Scope.substitute(this,originalMethod.returnType);  this.thrownExceptions=Scope.substitute(this,originalMethod.thrownExceptions);  if (this.thrownExceptions == null)   this.thrownExceptions=Binding.NO_EXCEPTIONS;  checkMissingType: {    if ((this.tagBits & TagBits.HasMissingType) != 0)     break checkMissingType;    if ((this.returnType.tagBits & TagBits.HasMissingType) != 0) {      this.tagBits|=TagBits.HasMissingType;      break checkMissingType;    }    for (int i=0, max=this.parameters.length; i < max; i++) {      if ((this.parameters[i].tagBits & TagBits.HasMissingType) != 0) {        this.tagBits|=TagBits.HasMissingType;        break checkMissingType;      }    }    for (int i=0, max=this.thrownExceptions.length; i < max; i++) {      if ((this.thrownExceptions[i].tagBits & TagBits.HasMissingType) != 0) {        this.tagBits|=TagBits.HasMissingType;        break checkMissingType;      }    }  }  this.wasInferred=true;}  }
class C{  public NotificationChain basicSetExecModule(ExecModule newExecModule,NotificationChain msgs){  ExecModule oldExecModule=execModule;  execModule=newExecModule;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.PROJECT_DESCRIPTION__EXEC_MODULE,oldExecModule,newExecModule);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYAreaRenderer)) {    return false;  }  XYAreaRenderer that=(XYAreaRenderer)obj;  if (this.plotArea != that.plotArea) {    return false;  }  if (this.plotLines != that.plotLines) {    return false;  }  if (this.plotShapes != that.plotShapes) {    return false;  }  if (this.showOutline != that.showOutline) {    return false;  }  if (this.useFillPaint != that.useFillPaint) {    return false;  }  if (!this.gradientTransformer.equals(that.gradientTransformer)) {    return false;  }  if (!ShapeUtilities.equal(this.legendArea,that.legendArea)) {    return false;  }  return true;}  }
class C{  public static void writeEntry(ZipFile zipFile,ZipEntry entry,File destDir) throws IOException {  File outFile=new File(destDir,entry.getName());  if (entry.isDirectory()) {    outFile.mkdirs();  } else {    outFile.getParentFile().mkdirs();    InputStream in=zipFile.getInputStream(entry);    try {      IOUtil.writeStream(in,outFile);    }  finally {      in.close();    }  }}  }
class C{  protected void addOperation(@Nonnull TurnoutOperation op){  TurnoutOperation previous;  if (op == null || op.getName() == null) {    log.warn("null operation or name in addOperation");  } else {synchronized (this) {      if (!initialized)       initialize();      previous=turnoutOperations.put(op.getName(),op);      if (op.isDefinitive()) {        updateTypes(op);      }    }    if (previous != null) {      log.debug("replaced existing operation called " + previous.getName());    }  }  firePropertyChange("Content",null,null);}  }
class C{  public int countInteriorNodes(){  return treeData.countInteriorNodes();}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.CONTAINER_TYPE__OWNED_MEMBERS_BY_NAME_AND_ACCESS:    return ownedMembersByNameAndAccess != null;case TypesPackage.CONTAINER_TYPE__OWNED_MEMBERS:  return ownedMembers != null && !ownedMembers.isEmpty();case TypesPackage.CONTAINER_TYPE__CALLABLE_CTOR:return callableCtor != null;case TypesPackage.CONTAINER_TYPE__TYPE_VARS:return typeVars != null && !typeVars.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void removeUnusedLayers(final Map map){  Iterator<MapLayer> iter=map.iterator();  while (iter.hasNext()) {    MapLayer layer=iter.next();    if (layer.isEmpty()) {      if ("3_roof".equals(layer.getName()) || "4_roof_add".equals(layer.getName())) {        iter.remove();      }    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean removeAll(Collection<SimEvent> events){  return sortedSet.removeAll(events);}  }
class C{  @SuppressWarnings("unused") public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  public TStream<String> receiveString(){  return receiveText(null);}  }
class C{  public int pred_intra_mode(int n){  int index8=scan8[n];  int left=this.intra4x4_pred_mode_cache[index8 - 1];  int top=this.intra4x4_pred_mode_cache[index8 - 8];  int min=Math.min(left,top);  if (min < 0)   return H264PredictionContext.DC_PRED; else   return min;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_strictness_1_();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.612 -0500",hash_original_method="C4FACCF94A8569C78058717A9665F703",hash_generated_method="C4FACCF94A8569C78058717A9665F703") void addCache(String url,CacheResult c){  assert !JniUtil.useChromiumHttpStack();  if (url == null || !checkInitialized()) {    return;  }  mCacheInserter.prepareForInsert();  mCacheInserter.bind(mCacheUrlColIndex,url);  mCacheInserter.bind(mCacheFilePathColIndex,c.localPath);  mCacheInserter.bind(mCacheLastModifyColIndex,c.lastModified);  mCacheInserter.bind(mCacheETagColIndex,c.etag);  mCacheInserter.bind(mCacheExpiresColIndex,c.expires);  mCacheInserter.bind(mCacheExpiresStringColIndex,c.expiresString);  mCacheInserter.bind(mCacheMimeTypeColIndex,c.mimeType);  mCacheInserter.bind(mCacheEncodingColIndex,c.encoding);  mCacheInserter.bind(mCacheHttpStatusColIndex,c.httpStatusCode);  mCacheInserter.bind(mCacheLocationColIndex,c.location);  mCacheInserter.bind(mCacheContentLengthColIndex,c.contentLength);  mCacheInserter.bind(mCacheContentDispositionColIndex,c.contentdisposition);  mCacheInserter.bind(mCacheCrossDomainColIndex,c.crossDomain);  mCacheInserter.execute();}  }
class C{  protected void callSubtreeVisitors(XPathVisitor visitor){  m_functionExpr.callVisitors(new FunctionOwner(),visitor);  super.callSubtreeVisitors(visitor);}  }
class C{  @Override public void validate(final IDescription cd){}  }
class C{  private static Vector2D normalizedOffset(Coordinate p0,Coordinate p1,Coordinate p2){  Vector2D u1=Vector2D.create(p0,p1).normalize();  Vector2D u2=Vector2D.create(p0,p2).normalize();  Vector2D offset=u1.add(u2).normalize();  return offset;}  }
class C{  @Override public Set<byte[]> hkeys(final byte[] key){  checkIsInMultiOrPipeline();  client.hkeys(key);  return SetFromList.of(client.getBinaryMultiBulkReply());}  }
class C{  public void close(){  return;}  }
class C{  public void updateFor(ConsoleRenderer renderer,Player player){  updateFor(renderer,player,false,false);}  }
class C{  public boolean attackEntityFrom(DamageSource par1DamageSource,float par2){  if (this.isEntityInvulnerable()) {    return false;  } else   if (!this.worldObj.isRemote && !this.isDead) {    this.setForwardDirection(-this.getForwardDirection());    this.setTimeSinceHit(10);    this.setDamageTaken(this.getDamageTaken() + par2 * 10.0F);    this.setBeenAttacked();    final boolean flag=par1DamageSource.getEntity() instanceof EntityPlayer && ((EntityPlayer)par1DamageSource.getEntity()).capabilities.isCreativeMode;    if (flag || this.getDamageTaken() > 40.0F) {      if (this.riddenByEntity != null) {        this.riddenByEntity.mountEntity(this);      }      if (!flag) {        this.func_145778_a(GrowthCraftBamboo.items.bambooRaft.getItem(),1,0.0F);      }      this.setDead();    }    return true;  } else {    return true;  }}  }
class C{  public Todo_Selector idBetween(long idA,long idB){  return whereBetween(schema.id,idA,idB);}  }
class C{  protected float unwrapValue(Object value){  return ((Float)value).floatValue();}  }
class C{  public String updateMarketplace(){  final boolean assignedOrgChanged=model.assignedOrgChanged();  final String mId=model.getMarketplaceId();  model.setOwningOrganizationId(getSelectOrganizationIncludeBean().getOrganizationId());  try {    Response response=getMarketplaceManagePartnerService().updateMarketplace(convertToValueObject(model),convertToMarketplacePriceModel(model),convertToPartnerPriceModel(model));    VOMarketplace vmp=response.getResult(VOMarketplace.class);    model=convertToModel(vmp);    addToModel(response.getResult(POMarketplacePriceModel.class));    addToModel(response.getResult(POPartnerPriceModel.class));    updateSelectionList(vmp,selectableMarketplaces);  } catch (  ObjectNotFoundException e) {    ui.handleException(e);    if (e.getDomainObjectClassEnum() == ClassEnum.MARKETPLACE) {      ui.resetDirty();      reset();    }    return OUTCOME_ERROR;  }catch (  OperationNotPermittedException e) {    ui.handleException(e,true);    reset();    return OUTCOME_ERROR;  }catch (  SaaSApplicationException e) {    ui.handleException(e);    return OUTCOME_ERROR;  }  if (assignedOrgChanged) {    applyOrgChange(mId);  }  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_MARKETPLACE_SAVED,mId);  return OUTCOME_SUCCESS;}  }
class C{  protected static float convertNumber(Element filterElement,String attrName,float defaultValue,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,attrName);  if (s.length() == 0) {    return defaultValue;  } else {    try {      return SVGUtilities.convertSVGNumber(s);    } catch (    NumberFormatException nfEx) {      throw new BridgeException(ctx,filterElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{attrName,s,nfEx});    }  }}  }
class C{  public void guardarCambiosExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  UnidadDocumentalVO udoc=(UnidadDocumentalVO)getFromTemporalSession(request,TransferenciasConstants.UNIDAD_DOCUMENTAL);  RelacionEntregaVO relacionEntrega=(RelacionEntregaVO)getFromTemporalSession(request,TransferenciasConstants.RELACION_KEY);  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionRelacionesEntregaBI relacionesBI=services.lookupGestionRelacionesBI();  try {    relacionesBI.modificarInformacionUnidadDocumental(relacionEntrega,udoc);  } catch (  ActionNotAllowedException anae) {    guardarError(request,anae);  }  setInTemporalSession(request,TransferenciasConstants.MODIFICACIONES_EN_TABS_DE_EXPEDIENTE,Boolean.FALSE);  setReturnActionFordward(request,mappings.findForward("info_udoc_relacion"));}  }
class C{  private boolean continueLine(String line){  int slashCount=0;  int index=line.length() - 1;  while ((index >= 0) && (line.charAt(index--) == '\\')) {    slashCount++;  }  return (slashCount % 2 == 1);}  }
class C{  public PotentialConsumer createPotentialConsumer(final Object baseObject,final String methodName,final Class<?> dataType){  String description=getDescriptionString(baseObject,methodName,dataType);  return new PotentialConsumer(parentComponent,baseObject,methodName,new Class<?>[]{dataType},null,description);}  }
class C{  public float elapsedTime(){  return seconds();}  }
class C{  public static String[] unpackCipherSuites(String ciphers){  if (ciphers == null)   return null;  Vector c=new Vector();  int i=ciphers.indexOf(',');  int j=0;  while (i > -1) {    c.add(ciphers.substring(j,i));    j=i + 1;    i=ciphers.indexOf(',',j);  }  c.add(ciphers.substring(j));  String[] s=new String[c.size()];  c.toArray(s);  return s;}  }
class C{  public IllegalConfigurationValueException(){}  }
class C{  public static void main(String[] args){  long startMsec=System.currentTimeMillis();  QRSolverTest t=new QRSolverTest();  t.setUpBase();  t.setUp();  t.testQRSolveMR();  t.tearDown();  long elapsedMsec=System.currentTimeMillis() - startMsec;  System.err.printf("Finished in %1.3f sec.\n",elapsedMsec / 1000.0);}  }
class C{  private void generateTrees(BURS_StateCoder burs){  for (int i=0; i < numTreeRoots; i++) {    AbstractBURS_TreeNode n=treeRoots[i];    if (castNode(n.dg_node).getPredecessorCount() == 0) {      readySetInsert(n);    }  }  while (readySetNotEmpty()) {    AbstractBURS_TreeNode k=readySetRemove();    if (DEBUG) {      VM.sysWrite("PROCESSING TREE ROOTED AT " + k.dg_node + "\n");      dumpTree(k);    }    numTreeRoots--;    generateTree(k,burs);  }  if (numTreeRoots != 0) {    throw new OptimizingCompilerException("BURS","Not all tree roots were processed");  }}  }
class C{  public static List<ReutersDocument> extract(Path reutersDir) throws IOException, ParseException {  List<ReutersDocument> docs=new ArrayList<>();  DirectoryStream<Path> stream=Files.newDirectoryStream(reutersDir,"*.sgm");  for (  Path sgmFile : stream) {    InputStream inputStream=Files.newInputStream(sgmFile);    docs.addAll(extractFile(inputStream,sgmFile.toUri()));  }  return docs;}  }
class C{  public double regret(final double target){  final List<Ops.DoubleOp> functions=new ArrayList<Ops.DoubleOp>();  functions.add(new Square());  functions.add(new Bind2nd(new Minus(),target));  final Expression comp=new Expression(functions);  final Ops.DoublePredicate less=new Bind2ndPredicate(new LessThanPredicate(),target);  final Pair<Double,Integer> result=expectationValue(comp,less);  final double x=result.first();  final int n=result.second().intValue();  QL.require(n >= 2,UNSUFFICIENT_SAMPLES_UNDER_TARGET);  return (n / (n - 1.0)) * x;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  return si == null ? "" : si.getPremiereDate();}  }
class C{  public static ContentValues values(User user){  return values(new ContentValues(6),user);}  }
class C{  public long sizeAsLongMax(){  return map.sizeAsLong();}  }
class C{  public static void startSettingsApp(AppCompatActivity activity){  startSettingsApp((Context)activity);}  }
class C{  public NumericLiteral(long x){  m_number=new Long(x);  m_type=long.class;}  }
class C{  @SuppressWarnings("unused") private Store(){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private TaskResourceRep doDiscoverNetworkSystem(NetworkSystem device){  NetworkController controller=getNetworkController(device.getSystemType());  DiscoveredObjectTaskScheduler scheduler=new DiscoveredObjectTaskScheduler(_dbClient,new NetworkJobExec(controller));  String taskId=UUID.randomUUID().toString();  ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>(1);  tasks.add(new AsyncTask(NetworkSystem.class,device.getId(),taskId));  TaskList taskList=scheduler.scheduleAsyncTasks(tasks);  return taskList.getTaskList().iterator().next();}  }
class C{  private void sendMessage(SimpleMailMessage msg,String templateName,Map<String,Object> model) throws MailException {  Template template=templateFactory.getTemplate(templateName);  String result=render(model,template);  msg.setText(result);  send(msg);}  }
class C{  public void onExecuteWrite(String address,int transId,boolean execWrite){  if (DBG)   Log.d(TAG,"onExecuteWrite() - " + "device=" + address + ", transId="+ transId+ "execWrite="+ execWrite);  BluetoothDevice device=mAdapter.getRemoteDevice(address);  if (device == null)   return;  try {    mCallback.onExecuteWrite(device,transId,execWrite);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  public void add(Provider<LifecycleListener> listener){  listeners.add(listener);}  }
class C{  protected String makeDurableSubscriberName(Connection conn,WorkerThread worker) throws JMSException {  StringBuffer name=new StringBuffer(conn.getClientID()).append("_").append(worker.getName());  return (name.toString());}  }
class C{  public double mulPositionW(Matrix4dc mat){  return mulPositionW(mat,this);}  }
class C{  public Graph search(String targetName){  long start=System.currentTimeMillis();  this.numIndependenceTests=0;  this.allTriples=new HashSet<>();  this.ambiguousTriples=new HashSet<>();  this.colliderTriples=new HashSet<>();  this.noncolliderTriples=new HashSet<>();  if (targetName == null) {    throw new IllegalArgumentException("Null target name not permitted");  }  this.target=getVariableForName(targetName);  this.maxRemainingAtDepth=new int[20];  this.maxVariableAtDepth=new Node[20];  Arrays.fill(maxRemainingAtDepth,-1);  Arrays.fill(maxVariableAtDepth,null);  TetradLogger.getInstance().log("info","target = " + getTarget());  Graph graph=new EdgeListGraph();  this.visited=new HashSet<>();  TetradLogger.getInstance().log("info","BEGINNING step 1 (prune target).");  graph.addNode(getTarget());  constructFan(getTarget(),graph);  TetradLogger.getInstance().log("graph","After step 1 (prune target)" + graph);  TetradLogger.getInstance().log("info","BEGINNING step 2 (prune PC).");  for (  Node v : graph.getAdjacentNodes(getTarget())) {    constructFan(v,graph);  }  TetradLogger.getInstance().log("graph","After step 2 (prune PC)" + graph);  TetradLogger.getInstance().log("info","BEGINNING step 4 (PC Orient).");  SearchGraphUtils.pcOrientbk(knowledge,graph,graph.getNodes());  List<Node> _visited=new LinkedList<>(getVisited());  orientUnshieldedTriples(knowledge,graph,getTest(),getDepth(),_visited);  MeekRules meekRules=new MeekRules();  meekRules.setAggressivelyPreventCycles(this.aggressivelyPreventCycles);  meekRules.setKnowledge(knowledge);  meekRules.orientImplied(graph);  TetradLogger.getInstance().log("graph","After step 4 (PC Orient)" + graph);  MbUtils.trimToAdjacents(graph,target);  TetradLogger.getInstance().log("graph","After step 6 (Remove edges among P and P of C)" + graph);  finishUp(start,graph);  this.logger.log("graph","\nReturning this graph: " + graph);  this.graph=graph;  return graph;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void testEqualsEmptyDocuments() throws Exception {  final String xml="<dom/>";  XppDom dom1=XppFactory.buildDom(xml);  XppDom dom2=XppFactory.buildDom(xml);  assertEquals(comparator,dom1,dom2);  assertNull(xpath.get());}  }
class C{  public final Observable<Boolean> showSearch(){  return mShowSearchSubject.asObservable();}  }
class C{  public void cleanup(){  m_allData=null;}  }
class C{  private static int networkByteOrderToInt(byte[] buf,int start,int count){  if (count > 4) {    throw new IllegalArgumentException("Cannot handle more than 4 bytes");  }  int answer=0;  for (int i=0; i < count; i++) {    answer<<=8;    answer|=((int)buf[start + i] & 0xff);  }  return answer;}  }
class C{  protected void initializeConsumers(){  dimensionList.clear();  projectionConsumerType=new AttributeType(this,"Single scalars","setValue",double.class,true);  addConsumerType(projectionConsumerType);  for (int i=0; i < projectionModel.getProjector().getDimensions(); i++) {    addScalarDimension(i);  }  projectionVectorConsumer=new AttributeType(this,"Vector values",double[].class,true);  addConsumerType(projectionVectorConsumer);}  }
class C{  public void clearAllNotes(){  SQLiteDatabase db=getWritableDatabase();  db.execSQL("DELETE FROM " + TABLE_NOTES);}  }
class C{  public boolean isNumberInheritAsEnum(){  if (this.numberInheritAsEnum != null)   return true; else   return false;}  }
class C{  protected Node newNode(){  return new SVGOMSubImageRefElement();}  }
class C{  @Deprecated public static final int[] gen_indices(int L){  return A.make_sequence(L);}  }
class C{  public Set<Class<?>> registerConsumer(Object consumer){  Set<Class<?>> iSet=new HashSet<Class<?>>();  if (consumer != null)   _registerConsumer(consumer,consumer.getClass(),iSet,new HashSet<Class<?>>());  return iSet;}  }
class C{  private void processFunctionBegin(Tree beginNode,Map<String,Integer> args){  for (int i=0; i < beginNode.getChildCount(); ++i) {    Tree child=beginNode.getChild(i);    String key=child.getText().toLowerCase();    if (args.containsKey(key)) {      Integer newValue=args.get(key) + 1;      args.put(key,newValue);    }    if (child.getType() == DelphiLexer.BEGIN) {      processFunctionBegin(child,args);    }  }}  }
class C{  public void eliminarRol(String[] roles) throws ActionNotAllowedException {  iniciarTransaccion();  checkPermission(ControlAccesoSecurityManager.ELIMINAR_ROL);  rolUsuarioDBEntity.clearUsuariosRol(roles);  permisoRolDBEntity.clearPermisosRol(roles);  rolDBEntity.eliminarRoles(roles);  commit();}  }
class C{  public Vec4 unProject(Vec4 windowPoint,Matrix modelview,Matrix projection,java.awt.Rectangle viewport){  if (windowPoint == null) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (modelview == null || projection == null) {    String message=Logging.getMessage("nullValue.MatrixIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (viewport == null) {    String message=Logging.getMessage("nullValue.RectangleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double[] modelviewArray=new double[16];  double[] projectionArray=new double[16];  modelview.toArray(modelviewArray,0,false);  projection.toArray(projectionArray,0,false);  int[] viewportArray=new int[]{viewport.x,viewport.y,viewport.width,viewport.height};  double[] result=new double[3];  if (!this.dc.getGLU().gluUnProject(windowPoint.x,windowPoint.y,windowPoint.z,modelviewArray,0,projectionArray,0,viewportArray,0,result,0)) {    return null;  }  return Vec4.fromArray3(result,0);}  }
class C{  private InputStream openContentStream(){  String contents="class Airline { \n" + "singleton;\n" + "name = \"DEFAULT_NAME\";\n"+ "}";  return new ByteArrayInputStream(contents.getBytes());}  }
class C{  public static boolean exists(String fileName){  return FilePath.get(fileName).exists();}  }
class C{  public int size(){  int len=getArrayLength() - (getGapEnd() - getGapStart());  return len;}  }
class C{  @PUT @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_FORM_URLENCODED) @Path("/{userId}/email") @Description("Update user email") public PrincipalUserDto updateUserEmail(@Context HttpServletRequest req,@PathParam("userId") final BigInteger userId,@FormParam("email") final String email){  if (userId == null || userId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("User Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (email == null || email.isEmpty()) {    throw new WebApplicationException("Cannot update with null or empty email.",Status.BAD_REQUEST);  }  PrincipalUser remoteUser=getRemoteUser(req);  PrincipalUser user=_uService.findUserByPrimaryKey(userId);  validateResourceAuthorization(req,user,remoteUser);  if (user == null) {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }  user.setEmail(email);  user=_uService.updateUser(user);  return PrincipalUserDto.transformToDto(user);}  }
class C{  private void animatePanelToState(PanelState state,StateChangeReason reason){  animatePanelToState(state,reason,BASE_ANIMATION_DURATION_MS);}  }
class C{  public static boolean isGZipFile(String file){  String ext=getExtension(file);  return "gz".equals(ext) || "z".equals(ext);}  }
class C{  public Query createQuery(org.topbraid.spin.model.Query spinQuery){  String queryString=createCommandString(spinQuery);  return createQuery(queryString);}  }
class C{  public void fillAttributeSet(Set attrSet){  ((ExtendedSelector)getAncestorSelector()).fillAttributeSet(attrSet);  ((ExtendedSelector)getSimpleSelector()).fillAttributeSet(attrSet);}  }
class C{  @ObjectiveCName("isStartedWithUid:") public Promise<Boolean> isStarted(int uid){  return modules.getMessagesModule().chatIsEmpty(Peer.user(uid));}  }
class C{  public void sessionCreated(HttpSessionEvent se){  HttpSession session=se.getSession();  sessions.put(session.getId(),session);  activeSessions++;  Debug.info("TT Session started ... " + session.getId() + " "+ new Date());}  }
class C{  protected void NodeTest(int axesType) throws javax.xml.transform.TransformerException {  if (lookahead('(',1)) {    Object nodeTestOp=Keywords.getNodeType(m_token);    if (null == nodeTestOp) {      error(XPATHErrorResources.ER_UNKNOWN_NODETYPE,new Object[]{m_token});    } else {      nextToken();      int nt=((Integer)nodeTestOp).intValue();      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),nt);      m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);      consumeExpected('(');      if (OpCodes.NODETYPE_PI == nt) {        if (!tokenIs(')')) {          Literal();        }      }      consumeExpected(')');    }  } else {    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.NODENAME);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    if (lookahead(':',1)) {      if (tokenIs('*')) {        m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ELEMWILDCARD);      } else {        m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);        if (!Character.isLetter(m_tokenChar) && !tokenIs('_')) {          error(XPATHErrorResources.ER_EXPECTED_NODE_TEST,null);        }      }      nextToken();      consumeExpected(':');    } else {      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.EMPTY);    }    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    if (tokenIs('*')) {      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ELEMWILDCARD);    } else {      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);      if (!Character.isLetter(m_tokenChar) && !tokenIs('_')) {        error(XPATHErrorResources.ER_EXPECTED_NODE_TEST,null);      }    }    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    nextToken();  }}  }
class C{  @Override protected List<String> createCommand(StepInstance stepInstance,String temporaryFileDirectory){  final String fastaFilePathName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.getFastaFileNameTemplate());  List<String> command=new ArrayList<String>();  command.add(this.getFullPathToBinary());  command.add(this.getFullPathToHmmFile());  command.add(fastaFilePathName);  command.addAll(this.getBinarySwitchesAsList());  return command;}  }
class C{  public boolean redo(){  return table.redo();}  }
class C{  public InvalidInputException(String message){  super(message);}  }
class C{  private static void copyRawFile(Context ctx,int resid,File file,String mode) throws IOException, InterruptedException {  final String abspath=file.getAbsolutePath();  final FileOutputStream out=new FileOutputStream(file);  final InputStream is=ctx.getResources().openRawResource(resid);  byte buf[]=new byte[1024];  int len;  while ((len=is.read(buf)) > 0) {    out.write(buf,0,len);  }  out.close();  is.close();  Runtime.getRuntime().exec("chmod " + mode + " "+ abspath).waitFor();}  }
class C{  public synchronized void dispose(){  if (!disposed) {    setEnabled(false);    if (sourceBinding != null) {      sourceBinding.dispose();      sourceBinding=null;    }    if (session != null) {      session.disposeBreakpoint(this);    }    disposed=true;  }}  }
class C{  public DeliveryAllowedByInventoryOrderEventHandlerImpl(final WarehouseService warehouseService,final SkuWarehouseService skuWarehouseService,final ProductService productService){  super(warehouseService,skuWarehouseService,productService);  this.productService=productService;}  }
class C{  public Class toClass(CtClass ct,ClassLoader loader,ProtectionDomain domain) throws CannotCompileException {  lockInCache(ct);  return super.toClass(ct,getClassLoader0(),domain);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instruction,"Error: Argument instruction can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not a conditional setcc instruction (invalid number of operands)");  }  final long reilOffsetBase=instruction.getAddress().toLong() * 0x100;  long reilOffset=reilOffsetBase;  final IOperandTree operand=instruction.getOperands().get(0);  final TranslationResult result=Helpers.translateOperand(environment,reilOffset,operand,false);  final OperandSize size=result.getSize();  final TranslationResultType type=result.getType();  final String address=result.getAddress();  instructions.addAll(result.getInstructions());  reilOffset=reilOffsetBase + instructions.size();  final Pair<OperandSize,String> condition=conditionGenerator.generate(environment,reilOffset,instructions);  reilOffset=reilOffsetBase + instructions.size();  final String conditionRegister=condition.second();  Helpers.writeBack(environment,reilOffset,operand,conditionRegister,size,address,type,instructions);}  }
class C{  protected void loadStars(){  ByteBuffer byteBuffer=null;  if (WWIO.getSuffix(this.starsFileName).equals("dat")) {    try {      InputStream starsStream=WWIO.openFileOrResourceStream(this.starsFileName,this.getClass());      if (starsStream == null) {        String message=Logging.getMessage("layers.StarLayer.CannotReadStarFile");        Logging.logger().severe(message);        return;      }      try {        byteBuffer=WWIO.readStreamToBuffer(starsStream,true);        byteBuffer.order(ByteOrder.LITTLE_ENDIAN);      }  finally {        WWIO.closeStream(starsStream,starsFileName);      }    } catch (    IOException e) {      String message="IOException while loading stars data from " + this.starsFileName;      Logging.logger().severe(message);    }  } else {    byteBuffer=StarsConvertor.convertTsvToByteBuffer(this.starsFileName);  }  if (byteBuffer == null) {    String message="IOException while loading stars data from " + this.starsFileName;    Logging.logger().severe(message);    return;  }  if (this.radius == null)   this.radius=(double)byteBuffer.getFloat(); else   byteBuffer.getFloat();  this.starsBuffer=byteBuffer.asFloatBuffer();  if (byteBuffer.order() != ByteOrder.nativeOrder()) {    ByteBuffer tmpByteBuffer=ByteBuffer.allocateDirect(byteBuffer.limit());    FloatBuffer fbuffer=tmpByteBuffer.asFloatBuffer();    for (int i=0; i < fbuffer.limit(); i++) {      fbuffer.put(this.starsBuffer.get(i));    }    fbuffer.flip();    this.starsBuffer=fbuffer;  }  this.numStars=this.starsBuffer.limit() / 6;}  }
class C{  public DoubleVector subvector(IntVector index){  DoubleVector v=new DoubleVector(index.size());  for (int i=0; i < index.size(); i++) {    v.V[i]=V[index.V[i]];  }  return v;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.530 -0500",hash_original_method="4E0FEF0D8484D6DA3DA82AB98780B168",hash_generated_method="AD84B0CDF4AF9E51E405E56F720A791E") public WaitingThread(Condition cond,RouteSpecificPool pool){  if (cond == null) {    throw new IllegalArgumentException("Condition must not be null.");  }  this.cond=cond;  this.pool=pool;}  }
class C{  private static URI cookieUri(URI uri,HttpCookie cookie){  URI cookieUri=uri;  if (cookie.getDomain() != null) {    String domain=cookie.getDomain();    if (domain.charAt(0) == '.') {      domain=domain.substring(1);    }    try {      cookieUri=new URI(uri.getScheme() == null ? "http" : uri.getScheme(),domain,cookie.getPath() == null ? "/" : cookie.getPath(),null);    } catch (    URISyntaxException e) {      Log.w(TAG,e);    }  }  return cookieUri;}  }
class C{  public GPUImageCrosshatchFilter(){  this(0.03f,0.003f);}  }
class C{  public synchronized NSObject anyObject(){  if (set.isEmpty())   return null; else   return set.iterator().next();}  }
class C{  public float key(){  return _map._set[_index];}  }
class C{  @Deprecated @WorkerThread public boolean playNonRxy(@NonNull final File audioFile,final MediaPlayer.OnCompletionListener onCompletionListener,final MediaPlayer.OnErrorListener onErrorListener){  return playNonRxy(PlayConfig.file(audioFile).build(),onCompletionListener,onErrorListener);}  }
class C{  public static byte[] encodeBase64URLSafe(final byte[] binaryData){  return encodeBase64(binaryData,false,true);}  }
class C{  @Deprecated public static <A>List<A> fill(int len,A init){  List<A> l=nil();  for (int i=0; i < len; i++)   l=new List<A>(init,l);  return l;}  }
class C{  public void propagateSwtForeground(Component component,Color foreground,boolean preserveDefaults){  assert EventQueue.isDispatchThread();  assert component != null;  ResourceConverter converter=ResourceConverter.getInstance();  java.awt.Color fg=converter.convertColor(foreground);  if (!fg.equals(component.getForeground()) || !preserveDefaults) {    component.setForeground(fg);  }}  }
class C{  private void stopPreview(){  if (DEBUG)   Log.v(TAG,"stopPreview:");  if (mCamera != null) {    mCamera.stopPreview();    mCamera.release();    mCamera=null;  }  final CameraGLView parent=mWeakParent.get();  if (parent == null)   return;  parent.mCameraHandler=null;}  }
class C{  public String startSetTipText(){  return "Specify a set of attributes to ignore. " + " When generating the ranking, Ranker will not evaluate the attributes " + " in this list. "+ "This is specified as a comma "+ "seperated list off attribute indexes starting at 1. It can include "+ "ranges. Eg. 1,2,5-9,17.";}  }
class C{  public div(span element){  addElement(element);}  }
class C{  public FacetResult runDrillDown() throws IOException {  index();  return drillDown();}  }
class C{  public static double RSmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  public static void forEachToken(String string,String separator,Procedure<String> procedure){  for (StringTokenizer stringTokenizer=new StringTokenizer(string,separator); stringTokenizer.hasMoreTokens(); ) {    String token=stringTokenizer.nextToken();    procedure.value(token);  }}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  public String toString(){  return " Matrix(sx,sy,s0,s1,tx,ty)=(" + scaleX + ","+ scaleY+ ","+ skew0+ ","+ skew1+ ","+ translateX+ ","+ translateY+ ")";}  }
class C{  public void put(final K key){  putBase(key);}  }
class C{  public static String createDataURI(byte[] data,String mime){  return "data:" + mime + ";base64,"+ Base64.encodeNoNewline(data);}  }
class C{  public boolean isMandatory(){  return m_mandatory;}  }
class C{  public int writeMinimalBinary(final int x,final int b) throws IOException {  if (b < 1)   throw new IllegalArgumentException("The bound " + b + " is not positive");  return writeMinimalBinary(x,b,Fast.mostSignificantBit(b));}  }
class C{  public StackedAreaRenderer(){  this(false);}  }
class C{  public void forceTermination(){  final Phaser root=this.root;  long s;  while ((s=root.state) >= 0) {    if (UNSAFE.compareAndSwapLong(root,stateOffset,s,s | TERMINATION_BIT)) {      releaseWaiters(0);      releaseWaiters(1);      return;    }  }}  }
class C{  private static void ReleaseFloatArrayElements(JNIEnvironment env,int arrayJREF,Address copyBufferAddress,int releaseMode){  if (traceJNI)   VM.sysWrite("JNI called: ReleaseFloatArrayElements  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    float[] sourceArray=(float[])env.getJNIRef(arrayJREF);    if (Magic.objectAsAddress(sourceArray).NE(copyBufferAddress)) {      int size=sourceArray.length;      if (releaseMode == 0 || releaseMode == 1) {        Memory.memcopy(Magic.objectAsAddress(sourceArray),copyBufferAddress,size << LOG_BYTES_IN_FLOAT);      }      if (releaseMode == 0 || releaseMode == 2) {        sysCall.sysFree(copyBufferAddress);      }    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  private void addVolumesToPhantomStorageGroup(StorageSystem storage,ExportMask exportMask,List<URI> volumesInSG,String newPolicyName,String childGroupName,TaskCompleter taskCompleter,boolean forceFlag) throws Exception {  StorageGroupPolicyLimitsParam phantomStorageGroupPolicyLimitsParam=new StorageGroupPolicyLimitsParam(newPolicyName);  List<String> phantomStorageGroupNames=_helper.findPhantomStorageGroupAssociatedWithFastPolicy(storage,phantomStorageGroupPolicyLimitsParam);  VolumeURIHLU[] volumeURIHlus=constructVolumeURIHLUFromURIList(volumesInSG,newPolicyName);  if (phantomStorageGroupNames == null || phantomStorageGroupNames.isEmpty()) {    String phantomStorageGroupName=generateNewNameForPhantomSG(storage,childGroupName,phantomStorageGroupPolicyLimitsParam);    _log.info("phantom storage group {} doesn't exist, creating a new group",phantomStorageGroupName);    CIMObjectPath phantomStorageGroupCreated=createVolumeGroup(storage,phantomStorageGroupName,volumeURIHlus,taskCompleter,true);    _log.info("Adding Storage Group {} to Fast Policy {}",phantomStorageGroupName,newPolicyName);    addVolumeGroupToAutoTieringPolicy(storage,newPolicyName,phantomStorageGroupCreated,taskCompleter);  } else {    String phantomStorageGroupName=phantomStorageGroupNames.get(0);    _log.info("Found that we need to add volumes to the phantom storage group: {}",phantomStorageGroupName);    String task=UUID.randomUUID().toString();    ExportMaskVolumeToStorageGroupCompleter completer=new ExportMaskVolumeToStorageGroupCompleter(null,exportMask.getId(),task);    SmisMaskingViewAddVolumeJob job=new SmisMaskingViewAddVolumeJob(null,storage.getId(),exportMask.getId(),volumeURIHlus,null,completer);    job.setCIMObjectPathfactory(_cimPath);    _helper.addVolumesToStorageGroup(volumeURIHlus,storage,phantomStorageGroupName,job,forceFlag);    ExportOperationContext.insertContextOperation(taskCompleter,VmaxExportOperationContext.OPERATION_ADD_VOLUMES_TO_STORAGE_GROUP,phantomStorageGroupName,volumeURIHlus,forceFlag);    _log.info("Adding Volumes to Phantom Storage Group {}",phantomStorageGroupName);  }}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public boolean isAllowed(String fname){  boolean res=((userFieldsMap.containsKey(fname) || isDynField(fname,false)) && !userFieldsMap.containsKey("-" + fname) && !isDynField(fname,true));  return res;}  }
class C{  public Frame(final Frame<? extends V> src){  this(src.locals,src.values.length - src.locals);  init(src);}  }
class C{  static FormattedTweetText formatTweetText(Tweet tweet){  if (tweet == null)   return null;  final FormattedTweetText adjustedTweet=new FormattedTweetText();  convertEntities(adjustedTweet,tweet);  format(adjustedTweet,tweet);  return adjustedTweet;}  }
class C{  public void dispose(){  if (channelItemProvider != null)   channelItemProvider.dispose();  if (adapterItemProvider != null)   adapterItemProvider.dispose();  if (routerItemProvider != null)   routerItemProvider.dispose();  if (filterItemProvider != null)   filterItemProvider.dispose();  if (transformerItemProvider != null)   transformerItemProvider.dispose();  if (gatewayItemProvider != null)   gatewayItemProvider.dispose();  if (conditionalRouteItemProvider != null)   conditionalRouteItemProvider.dispose();  if (splitterItemProvider != null)   splitterItemProvider.dispose();  if (aggregatorItemProvider != null)   aggregatorItemProvider.dispose();  if (routeItemProvider != null)   routeItemProvider.dispose();  if (serviceActivatorItemProvider != null)   serviceActivatorItemProvider.dispose();  if (eipModelItemProvider != null)   eipModelItemProvider.dispose();  if (enricherItemProvider != null)   enricherItemProvider.dispose();  if (compositeProcessorItemProvider != null)   compositeProcessorItemProvider.dispose();  if (recipientListRouterItemProvider != null)   recipientListRouterItemProvider.dispose();  if (serviceRefItemProvider != null)   serviceRefItemProvider.dispose();  if (serviceInvocationItemProvider != null)   serviceInvocationItemProvider.dispose();  if (invocableEndpointItemProvider != null)   invocableEndpointItemProvider.dispose();  if (contentFilterItemProvider != null)   contentFilterItemProvider.dispose();  if (resequencerItemProvider != null)   resequencerItemProvider.dispose();  if (metadataItemProvider != null)   metadataItemProvider.dispose();}  }
class C{  public static void main(String[] args) throws Exception {  new TestConfDir("test-conf-simple").addEntry(new ConfDirEntry(CONTENT_ID_PRIVATE_PARAMETERS,"EE","/" + PRIVATE_PARAMETERS_XML),PRIVATE_PARAMETERS_XML).addEntry(new ConfDirEntry(CONTENT_ID_SHARED_PARAMETERS,"EE","/" + SHARED_PARAMETERS_XML),SHARED_PARAMETERS_XML).addEntry(new ConfDirEntry("FOO","EE","/foo.xml"),"/foo.xml").save();  new TestConfDir("test-conf-detached").addEntry(new ConfDirEntry(CONTENT_ID_PRIVATE_PARAMETERS,"EE","/" + PRIVATE_PARAMETERS_XML),PRIVATE_PARAMETERS_XML).save();}  }
class C{  public static void main(String[] argv){  runFilter(new ClusterMembership(),argv);}  }
class C{  @Override public void run(){  amIActive=true;  boolean isInputRaster=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".shp")) {    isInputRaster=false;  }  String outputFile=args[1];  if (inputFile.isEmpty() || outputFile.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (inputFile.endsWith(".dep") && outputFile.endsWith(".shp")) {    outputFile=outputFile.replace(".shp",".dep");  }  if (inputFile.endsWith(".shp") && outputFile.endsWith(".dep")) {    outputFile=outputFile.replace(".dep",".shp");  }  try {    if (isInputRaster) {      String inputDataFile=inputFile.replace(".dep",".tas");      String outputDataFile=outputFile.replace(".dep",".tas");      FileUtilities.copyFile(new File(inputFile),new File(outputFile));      FileUtilities.copyFile(new File(inputDataFile),new File(outputDataFile));    } else {      File file=new File(inputFile);      if (file.exists()) {        FileUtilities.copyFile(new File(inputFile),new File(outputFile));      } else {        showFeedback("The input file does not exist.");        return;      }      file=new File(inputFile.replace(".shp",".shx"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".shx")));      }      file=new File(inputFile.replace(".shp",".dbf"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".dbf")));      }      file=new File(inputFile.replace(".shp",".prj"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".prj")));      }      file=new File(inputFile.replace(".shp",".sbn"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".sbn")));      }      file=new File(inputFile.replace(".shp",".sbx"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".sbx")));      }    }    showFeedback("Operation complete.");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static void addRowDimConstraintString(DimConstraint dc,StringBuffer sb,boolean asAPI){  int gp=dc.getGrowPriority();  int firstComma=sb.length();  BoundSize size=dc.getSize();  if (size.isUnset() == false) {    if (asAPI) {      sb.append(".size(\"").append(getBS(size)).append("\")");    } else {      sb.append(',').append(getBS(size));    }  }  if (gp != 100) {    if (asAPI) {      sb.append(".growPrio(").append(gp).append(")");    } else {      sb.append(",growprio ").append(gp);    }  }  Float gw=dc.getGrow();  if (gw != null) {    String g=gw != 100f ? floatToString(gw,asAPI) : "";    if (asAPI) {      if (g.length() == 0) {        sb.append(".grow()");      } else {        sb.append(".grow(").append(g).append(")");      }    } else {      sb.append(",grow").append(g.length() > 0 ? (" " + g) : "");    }  }  int sp=dc.getShrinkPriority();  if (sp != 100) {    if (asAPI) {      sb.append(".shrinkPrio(").append(sp).append(")");    } else {      sb.append(",shrinkprio ").append(sp);    }  }  Float sw=dc.getShrink();  if (sw != null && sw.intValue() != 100) {    String s=floatToString(sw,asAPI);    if (asAPI) {      sb.append(".shrink(").append(s).append(")");    } else {      sb.append(",shrink ").append(s);    }  }  String eg=dc.getEndGroup();  if (eg != null) {    if (asAPI) {      sb.append(".endGroup(\"").append(eg).append("\")");    } else {      sb.append(",endgroup ").append(eg);    }  }  String sg=dc.getSizeGroup();  if (sg != null) {    if (asAPI) {      sb.append(".sizeGroup(\"").append(sg).append("\")");    } else {      sb.append(",sizegroup ").append(sg);      removeTrailingSpace(sb);    }  }  UnitValue al=dc.getAlign();  if (al != null) {    if (asAPI) {      sb.append(".align(\"").append(getUV(al)).append("\")");    } else {      String s=getUV(al);      String alKw=(s.equals("top") || s.equals("bottom") || s.equals("left")|| s.equals("label")|| s.equals("leading")|| s.equals("center")|| s.equals("trailing")|| s.equals("right")|| s.equals("baseline")) ? "" : "align ";      sb.append(',').append(alKw).append(s);    }  }  if (dc.isNoGrid()) {    if (asAPI) {      sb.append(".noGrid()");    } else {      sb.append(",nogrid");    }  }  if (dc.isFill()) {    if (asAPI) {      sb.append(".fill()");    } else {      sb.append(",fill");    }  }  if (asAPI == false) {    if (sb.length() > firstComma) {      sb.setCharAt(firstComma,'[');      sb.append(']');    } else {      sb.append("[]");    }  }}  }
class C{  public static void init(ClassLoader loader){  for (; loader != null; loader=loader.getParent()) {    if (loader instanceof EnvironmentClassLoader) {      ((EnvironmentClassLoader)loader).init();      return;    }  }  for (int i=0; i < _globalLoaderListeners.size(); i++) {    EnvLoaderListener listener=_globalLoaderListeners.get(i);    listener.classLoaderInit(null);  }}  }
class C{  public int addFuel(int amt){  if (amt < 0)   return amt;  int oldFuelAmt=fuelAmount;  fuelAmount=Math.min(fuelAmount + amt,MAX_FUEL);  amt=fuelAmount - oldFuelAmt;  if (FMLCommonHandler.instance().getSide().isServer())   PacketHandler.sendToAll(new PacketStationUpdate(this,Type.FUEL_UPDATE));  return amt;}  }
class C{  public NoBilingSharesDataAvailableException(final String message){  super(message);}  }
class C{  public static String last(String list,String delimiter,boolean ignoreEmpty){  if (StringUtil.isEmpty(list))   return "";  int len=list.length();  char[] del;  if (StringUtil.isEmpty(delimiter)) {    del=new char[]{','};  } else   del=delimiter.toCharArray();  int index;  int x;  while (true) {    index=-1;    for (int i=0; i < del.length; i++) {      x=list.lastIndexOf(del[i]);      if (x > index)       index=x;    }    if (index == -1) {      return list;    } else     if (index + 1 == len) {      if (!ignoreEmpty)       return "";      list=list.substring(0,len - 1);      len--;    } else {      return list.substring(index + 1);    }  }}  }
class C{  public String autoKeyGenerationTipText(){  return "If set to true, a primary key column is generated automatically (containing the row number as INTEGER). The name of the key is read from DatabaseUtils (idColumn)" + " This primary key can be used for incremental loading (requires an unique key). This primary key will not be loaded as an attribute.";}  }
class C{  private void addMetadataDescriptions(Document doc,Eml eml) throws DocumentException {  Paragraph p=new Paragraph();  p.setAlignment(Element.ALIGN_JUSTIFIED);  p.setFont(font);  if (exists(eml.getMetadataLanguage())) {    Vocabulary vocab=vocabManager.get(Constants.VOCAB_URI_LANGUAGE);    VocabularyConcept vocabConcept=vocab.findConcept(eml.getMetadataLanguage());    if (exists(vocabConcept)) {      p.add(new Phrase(getText("rtf.metadata.language") + ": ",fontTitle));      p.add(vocabConcept.getPreferredTerm(DEFAULT_LANGUAGE).getTitle());      p.add(Chunk.NEWLINE);    }  }  if (exists(eml.getDateStamp())) {    p.add(new Phrase(getText("rtf.metadata.creation") + ": ",fontTitle));    SimpleDateFormat f=new SimpleDateFormat("yyyy-MM-dd");    p.add(f.format(eml.getDateStamp()));    p.add(Chunk.NEWLINE);  }  if (exists(eml.getHierarchyLevel())) {    p.add(new Phrase(getText("rtf.metadata.level") + ": ",fontTitle));    p.add(WordUtils.capitalizeFully(eml.getHierarchyLevel()));    p.add(Chunk.NEWLINE);  }  if (exists(eml.getMetadataLocale())) {    VocabularyConcept vocabConcept=vocabManager.get(Constants.VOCAB_URI_LANGUAGE).findConcept(eml.getMetadataLocale().getLanguage());    if (exists(vocabConcept)) {      p.add(new Phrase(getText("rtf.metadata.locale") + ": ",fontTitle));      p.add(vocabConcept.getPreferredTerm(DEFAULT_LANGUAGE).getTitle());      p.add(Chunk.NEWLINE);    }  }  doc.add(p);  p.clear();}  }
class C{  protected XTIFFDirectory(SeekableStream stream,long ifd_offset) throws IOException {  this.stream=stream;  long global_save_offset=stream.getFilePointer();  readHeader();  stream.seek(ifd_offset);  initialize();  stream.seek(global_save_offset);}  }
class C{  public final int hashCode(){  int hash=37;  hash+=17 * this.myNodes.hashCode() + 37;  hash+=17 * this.forbiddenRulesSpecs.hashCode() + 37;  hash+=17 * this.requiredRulesSpecs.hashCode() + 37;  hash+=17 * this.tierSpecs.hashCode() + 37;  return hash;}  }
class C{  public static String stringFor(int n){  String result="CU_OCCUPANCY_DEFAULT ";  if ((n & CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE) != 0)   result+="CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE ";  return result;}  }
class C{  private static void createFixedPartitionList(int primaryIndex){  fpaList.clear();  if (primaryIndex == 1) {    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q1",true,3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q2",3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q3",3));  }  if (primaryIndex == 2) {    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q1",3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q2",true,3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q3",3));  }  if (primaryIndex == 3) {    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q1",3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q2",3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q3",true,3));  }}  }
class C{  private void preinit(){  try {    LimeCoreGlue.preinstall();  } catch (  InstallFailedException ife) {    failPreferencesPermissions();  }}  }
class C{  protected int estimateElementsLen(final HeaderElement[] elems){  if ((elems == null) || (elems.length < 1))   return 0;  int result=(elems.length - 1) * 2;  for (int i=0; i < elems.length; i++) {    result+=estimateHeaderElementLen(elems[i]);  }  return result;}  }
class C{  private void processSqlStatementData(EntityManager entityManager,InvocationSequenceData invData,InvocationSequenceData topInvocationParent){  SqlStatementData sqlStatementData=invData.getSqlStatementData();  if (null != sqlStatementData) {    topInvocationParent.setNestedSqlStatements(Boolean.TRUE);    sqlStatementData.addInvocationParentId(topInvocationParent.getId());    passToChainedProcessors(sqlStatementData,entityManager);  }}  }
class C{  protected synchronized void sync(){  if (byteBuffer != null) {    byteBuffer.force();  }}  }
class C{  public void onSort(MenuItem item){}  }
class C{  @MethodDesc(description="Return the status for one or more replicators",usage="status(name)") public Map<String,String> replicatorStatus(@ParamDesc(name="name",description="optional name of replicator") String name) throws Exception {  OpenReplicatorManagerMBean mgr=replicators.get(name);  if (mgr == null) {    throw new Exception(String.format("There is no replication service with the name '%s'",name));  }  return mgr.status();}  }
class C{  public KafkaServer(Supplier<String> zookeeperConnection,int brokerId){  this(zookeeperConnection,brokerId,-1);}  }
class C{  public OMAreaList(int initialCapacity){  super(initialCapacity);  init();}  }
class C{  public String toString(){  return getName() + " = " + getValue();}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static boolean isPropertyKey(@NotNull PsiElement element){  final PsiElement parent=element.getParent();  return parent instanceof JsonProperty && element == ((JsonProperty)parent).getNameElement();}  }
class C{  public void translateByte2Machine(int[] b2m){  for (int i=0; i < MCSites.length; i++) {    MCSites[i]=b2m[MCSites[i]] << ArchConstants.getLogInstructionWidth();  }}  }
class C{  private static double nextDoubleInternal(double low,double high){  assert low >= Integer.MIN_VALUE;  assert high <= Integer.MAX_VALUE;  assert Double.isFinite(low);  assert Double.isFinite(high);  assert high >= low : "low=" + low + " high="+ high;  if (low == high) {    return low;  }  final double baseValue;  int surpriseMe=random().nextInt(17);  if (surpriseMe == 0) {    long lowBits=NumericUtils.doubleToSortableLong(low);    long highBits=NumericUtils.doubleToSortableLong(high);    baseValue=NumericUtils.sortableLongToDouble(TestUtil.nextLong(random(),lowBits,highBits));  } else   if (surpriseMe == 1) {    baseValue=low;  } else   if (surpriseMe == 2) {    baseValue=high;  } else   if (surpriseMe == 3 && low <= 0 && high >= 0) {    baseValue=0.0;  } else   if (surpriseMe == 4) {    double delta=(high - low) / 360;    int block=random().nextInt(360);    baseValue=low + delta * block;  } else {    baseValue=low + (high - low) * random().nextDouble();  }  assert baseValue >= low;  assert baseValue <= high;  int adjustMe=random().nextInt(17);  if (adjustMe == 0) {    return Math.nextAfter(adjustMe,high);  } else   if (adjustMe == 1) {    return Math.nextAfter(adjustMe,low);  } else {    return baseValue;  }}  }
class C{  public boolean isOther(){  return OTHER.equals(gender);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.832 -0500",hash_original_method="DAF90944A95CF29FF719B165EE1D8D20",hash_generated_method="990FDF776B367C7195C0BB56AF792134") public SAXException(String message,Exception e){  super(message);  this.exception=e;}  }
class C{  @SuppressWarnings("rawtypes") public static Class loadClass(Class loadClass,String name,boolean checkParents) throws ClassNotFoundException {  ClassNotFoundException ex=null;  Class<?> c=null;  ClassLoader loader=Thread.currentThread().getContextClassLoader();  while (c == null && loader != null) {    try {      c=loader.loadClass(name);    } catch (    ClassNotFoundException e) {      if (ex == null)       ex=e;    }    loader=(c == null && checkParents) ? loader.getParent() : null;  }  loader=loadClass == null ? null : loadClass.getClassLoader();  while (c == null && loader != null) {    try {      c=loader.loadClass(name);    } catch (    ClassNotFoundException e) {      if (ex == null)       ex=e;    }    loader=(c == null && checkParents) ? loader.getParent() : null;  }  if (c == null) {    try {      c=Class.forName(name);    } catch (    ClassNotFoundException e) {      if (ex == null)       ex=e;    }  }  if (c != null)   return c;  throw ex;}  }
class C{  public void addNew(CtClass clazz){  addOpcode(NEW);  addIndex(constPool.addClassInfo(clazz));}  }
class C{  public Integer loadAllValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  setUsuario(statement.getShortText(index++));  setPassword(statement.getShortText(index++));  setNombre(statement.getShortText(index++));  setApellidos(statement.getShortText(index++));  setFechaAlta(statement.getDateTime(index++));  return new Integer(index);}  }
class C{  @Override public XADataSource createXADataSource(Properties properties) throws SQLException {  Properties propertiesCopy=new Properties();  if (properties != null) {    propertiesCopy.putAll(properties);  }  rejectUnsupportedOptions(propertiesCopy);  rejectPoolingOptions(propertiesCopy);  JdbcDataSource dataSource=new JdbcDataSource();  setupH2DataSource(dataSource,propertiesCopy);  return dataSource;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:13:48.166 -0400",hash_original_method="323AE877A485E2230A5765DF1BD64079",hash_generated_method="A68E04245E149796E160577CA9A73023") public int write(OutputStream out) throws IOException {  writeId(out,"RIFF");  writeInt(out,36 + mNumBytes);  writeId(out,"WAVE");  writeId(out,"fmt ");  writeInt(out,16);  writeShort(out,mFormat);  writeShort(out,mNumChannels);  writeInt(out,mSampleRate);  writeInt(out,mNumChannels * mSampleRate * mBitsPerSample / 8);  writeShort(out,(short)(mNumChannels * mBitsPerSample / 8));  writeShort(out,mBitsPerSample);  writeId(out,"data");  writeInt(out,mNumBytes);  return HEADER_LENGTH;}  }
class C{  public String mapFieldName(String owner,String name,String desc){  return name;}  }
class C{  public boolean addRules(List<Rule> ruleList){  for (int i=0; i < ruleList.size(); i++) {    if (!validRule(ruleList.get(i))) {      return false;    }  }  if (!validateRuleProbabilities(ruleList)) {    return false;  }  this.rules=ruleList;  updateVarsAndTerminals();  return true;}  }
class C{  @BeforeClass public static void onlyOnce(){  resources=mock(Resources.class);  when(resources.getString(R.string.unit_feet)).thenReturn("ft");  when(resources.getString(R.string.unit_miles)).thenReturn("mi");}  }
class C{  public int size(){  return outgoingArcs.size();}  }
class C{  public synchronized void openDriver() throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=Camera.open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  public static int min(int x,int y){  return (x < y) ? x : y;}  }
class C{  public <T extends IEncodeable>T decode(EncoderContext ctx) throws DecodingException {  return decode(ctx,null);}  }
class C{  public DoubleSummary(final double value,final Mode mode){  value_=value;  mode_=mode;}  }
class C{  private float[] internalGetGlyphPositions(int start,int count,int offset,float[] result){  if (result == null) {    result=new float[offset + count * 2];  }  initPositions();  for (int i=offset, e=offset + count * 2, p=start * 2; i < e; ++i, ++p) {    result[i]=positions[p];  }  return result;}  }
class C{  public Property property(DateTimeFieldType type){  return new Property(this,indexOfSupported(type));}  }
class C{  public Sector(Sector sector){  if (sector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Sector","constructor","missingSector"));  }  this.minLatitude=sector.minLatitude;  this.maxLatitude=sector.maxLatitude;  this.minLongitude=sector.minLongitude;  this.maxLongitude=sector.maxLongitude;}  }
class C{  private static int streamtoword(byte data[],int offp[]){  int i;  int word=0;  int off=offp[0];  for (i=0; i < 4; i++) {    word=(word << 8) | (data[off] & 0xff);    off=(off + 1) % data.length;  }  offp[0]=off;  return word;}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public static boolean isConnectedFast(Context context){  NetworkInfo info=NetworkUtil.getNetworkInfo(context);  return (info != null && info.isConnected() && NetworkUtil.isConnectionFast(info.getType(),info.getSubtype()));}  }
class C{  public void fillFieldValues(SynapseGroup synapseGroup,Polarity polarity){  Set<Synapse> synSet=null;  if (Polarity.EXCITATORY == polarity) {    if (synapseGroup.hasExcitatory()) {      synSet=synapseGroup.getExcitatorySynapses();    } else {      if (synapseList.isEmpty()) {        synapseList.add(synapseGroup.getExcitatoryPrototype());      }      fillFieldValues();      return;    }  } else   if (Polarity.INHIBITORY == polarity) {    if (synapseGroup.hasInhibitory()) {      synSet=synapseGroup.getInhibitorySynapses();    } else {      if (synapseList.isEmpty()) {        synapseList.add(synapseGroup.getInhibitoryPrototype());      }      fillFieldValues();      return;    }  } else {    if (!synapseGroup.isEmpty()) {      synSet=new HashSet<Synapse>();      synSet.addAll(synapseGroup.getExcitatorySynapses());      synSet.addAll(synapseGroup.getInhibitorySynapses());    } else {      if (synapseList.isEmpty()) {        synapseList.add(synapseGroup.getExcitatoryPrototype());        synapseList.add(synapseGroup.getInhibitoryPrototype());      }      fillFieldValues();      return;    }  }  synapseEnabled.setSelected(synapseGroup.isEnabled(polarity));  Iterator<Synapse> synIter=synSet.iterator();  double first=synIter.next().getStrength();  boolean consistent=true;  while (synIter.hasNext()) {    consistent=first == synIter.next().getStrength();    if (!consistent) {      break;    }  }  tfStrength.setText(consistent ? Double.toString(first) : SimbrainConstants.NULL_STRING);  extraDataPanel.fillFieldValues(synapseGroup,polarity);}  }
class C{  public Long addRoomWithModerationAndExternalType(String SID,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Boolean appointment,Boolean isDemoRoom,Integer demoTime,Boolean isModeratedRoom,String externalRoomType){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      return roommanagement.addExternalRoom(name,roomtypes_id,comment,numberOfPartizipants,ispublic,null,appointment,isDemoRoom,demoTime,isModeratedRoom,null,null,externalRoomType,true,false,false,"",false,true,false);    }  } catch (  Exception err) {    log.error("[addRoomWithModeration] ",err);  }  return new Long(-1);}  }
class C{  public static byte[] encode(byte[] data){  return encode(data,0,data.length);}  }
class C{  public static SipRequest createReInvite(SipDialogPath dialog) throws PayloadException {  try {    Request reInvite=dialog.getStackDialog().createRequest(Request.INVITE);    SipRequest firstInvite=dialog.getInvite();    reInvite.removeHeader(ContactHeader.NAME);    reInvite.addHeader(firstInvite.getHeader(ContactHeader.NAME));    reInvite.removeHeader(SipUtils.HEADER_ACCEPT_CONTACT);    reInvite.addHeader(firstInvite.getHeader(SipUtils.HEADER_ACCEPT_CONTACT));    SipUtils.buildAllowHeader(reInvite);    reInvite.addHeader(firstInvite.getHeader(RouteHeader.NAME));    reInvite.addHeader(firstInvite.getHeader(SipUtils.HEADER_P_PREFERRED_IDENTITY));    reInvite.addHeader(firstInvite.getHeader(UserAgentHeader.NAME));    if (dialog.getSessionExpireTime() >= SessionTimerManager.MIN_EXPIRE_PERIOD) {      Header supportedHeader=SipUtils.HEADER_FACTORY.createHeader(SupportedHeader.NAME,"timer");      reInvite.addHeader(supportedHeader);      Header sessionExpiresHeader=SipUtils.HEADER_FACTORY.createHeader(SipUtils.HEADER_SESSION_EXPIRES,"" + dialog.getSessionExpireTime());      reInvite.addHeader(sessionExpiresHeader);    }    ViaHeader viaHeader=(ViaHeader)reInvite.getHeader(ViaHeader.NAME);    viaHeader.setRPort();    String remoteInstanceId=dialog.getRemoteSipInstance();    if (remoteInstanceId != null) {      SipUtils.setRemoteInstanceID(firstInvite.getStackMessage(),remoteInstanceId);    }    return new SipRequest(reInvite);  } catch (  ParseException|SipException e) {    throw new PayloadException("Can't create SIP message!",e);  }}  }
class C{  public void rollback(Xid xid) throws XAException {  execute("XA ROLLBACK " + xidToString(xid));}  }
class C{  @Pointcut("execution(public * *(..))") public void anyPublicMethod(){}  }
class C{  public boolean isNamespacedProperty(String name){  return name.startsWith(m_prefix);}  }
class C{  public StyledSplitPaneUI(Style style){  this.style=style;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:48:00.088 -0500",hash_original_method="0192041795732D663EE503A2AEC04112",hash_generated_method="C9ED2C86AE5913A25CE19DBCFB36E6CB") public void takeKeyEvents(boolean get){  getWindow().takeKeyEvents(get);}  }
class C{  @CanIgnoreReturnValue V checkValue(@Nullable V value){  return value;}  }
class C{  public CollectionResult<double[]> run(Database database,Relation<O> relation,Relation<?> lrelation){  final DistanceQuery<O> distQuery=database.getDistanceQuery(relation,getDistanceFunction());  final int qk=k + (includeSelf ? 0 : 1);  final KNNQuery<O> knnQuery=database.getKNNQuery(distQuery,qk);  MeanVarianceMinMax[] mvs=MeanVarianceMinMax.newArray(k);  final DBIDs ids=DBIDUtil.randomSample(relation.getDBIDs(),sampling,random);  FiniteProgress objloop=LOG.isVerbose() ? new FiniteProgress("Computing nearest neighbors",ids.size(),LOG) : null;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    KNNList knn=knnQuery.getKNNForDBID(iter,qk);    Object label=lrelation.get(iter);    int positive=0, i=0;    for (DBIDIter ri=knn.iter(); i < k && ri.valid(); ri.advance()) {      if (!includeSelf && DBIDUtil.equal(iter,ri)) {        continue;      }      positive+=match(label,lrelation.get(ri)) ? 1 : 0;      final double precision=positive / (double)(i + 1);      mvs[i].put(precision);      i++;    }    LOG.incrementProcessed(objloop);  }  LOG.ensureCompleted(objloop);  Collection<double[]> res=new ArrayList<>(k);  for (int i=0; i < k; i++) {    final MeanVarianceMinMax mv=mvs[i];    final double std=mv.getCount() > 1. ? mv.getSampleStddev() : 0.;    res.add(new double[]{i + 1,mv.getMean(),std,mv.getMin(),mv.getMax(),mv.getCount()});  }  return new CollectionResult<>("Average Precision","average-precision",res);}  }
class C{  public TechnicalServiceActiveException(String message){  super(message);}  }
class C{  @SuppressWarnings("deprecation") private static Map<String,String> decodeUrl(String s){  Map<String,String> params=new HashMap<>();  if (s != null) {    String array[]=s.split("&");    for (    String parameter : array) {      String v[]=parameter.split("=");      if (v.length > 1) {        params.put(URLDecoder.decode(v[0]),v.length > 1 ? URLDecoder.decode(v[1]) : null);      }    }  }  return params;}  }
class C{  public ICUNormalizer2CharFilter(Reader in,Normalizer2 normalizer){  this(in,normalizer,128);}  }
class C{  public ZoomHandlerFX(String id,ChartViewer parent,boolean altKey,boolean ctrlKey,boolean metaKey,boolean shiftKey){  super(id,altKey,ctrlKey,metaKey,shiftKey);  this.viewer=parent;}  }
class C{  public boolean isModifiedOutsideEditor(){  return loc.getActualLastModified() > getLastSaveOrLoadTime();}  }
class C{  public boolean isPaidTo3Party(){  Object oo=get_Value(COLUMNNAME_IsPaidTo3Party);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.818 -0500",hash_original_method="0163C8206FD905882DA3B7BB552BF2BC",hash_generated_method="798A608BAA8D71866E08CC4387CC01D0") @Deprecated public static void changeDebugPort(int port){}  }
class C{  public static boolean isDigit(char c){  return Character.isDigit(c);}  }
class C{  private Map<String,BigDecimal> initReasonsMap(final Map<String,BigDecimal> taxSum){  taxSum.put(DEMANDRSN_CODE_GENERAL_TAX,BigDecimal.ZERO);  taxSum.put(DEMANDRSN_CODE_LIBRARY_CESS,BigDecimal.ZERO);  taxSum.put(DEMANDRSN_CODE_EDUCATIONAL_CESS,BigDecimal.ZERO);  taxSum.put(DEMANDRSN_CODE_UNAUTHORIZED_PENALTY,BigDecimal.ZERO);  taxSum.put(DEMANDRSN_CODE_PENALTY_FINES,BigDecimal.ZERO);  taxSum.put(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,BigDecimal.ZERO);  return taxSum;}  }
class C{  public hr addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public void removeConnectionListener(SailConnectionListener listener){  getWrappedConnection().removeConnectionListener(listener);}  }
class C{  private void rangeCheckForAdd(int index){  if (index > size || index < 0)   throw new IndexOutOfBoundsException(outOfBoundsMsg(index));}  }
class C{  protected void replaceConditionalManager(){  if (InstanceManager.getDefault(jmri.ConditionalManager.class).getClass().getName().equals(DefaultConditionalManager.class.getName())) {    return;  }  if (InstanceManager.getNullableDefault(jmri.ConditionalManager.class) != null) {    InstanceManager.getDefault(jmri.ConfigureManager.class).deregister(InstanceManager.getDefault(jmri.ConditionalManager.class));  }  DefaultConditionalManager pManager=DefaultConditionalManager.instance();  InstanceManager.store(pManager,ConditionalManager.class);  InstanceManager.setDefault(ConditionalManager.class,pManager);  InstanceManager.getDefault(jmri.ConfigureManager.class).registerConfig(pManager,jmri.Manager.CONDITIONALS);}  }
class C{  protected void rejectRecipientNotFound() throws MessagingException {  if (!isLeaveRecipientNotFound())   setMessageDeleted();  if (isMarkRecipientNotFoundSeen())   setMessageSeen();  StringBuilder messageBuffer=new StringBuilder("Rejected mail for which a sole intended recipient could not be found.");  messageBuffer.append(" Recipients: ");  Address[] allRecipients=getMessageIn().getAllRecipients();  for (  Address allRecipient : allRecipients) {    messageBuffer.append(allRecipient);    messageBuffer.append(' ');  }  messageBuffer.append('.');  logStatusInfo(messageBuffer.toString());}  }
class C{  void saveRef(LiveRef ref){  Endpoint ep=ref.getEndpoint();  List<LiveRef> refList=incomingRefTable.get(ep);  if (refList == null) {    refList=new ArrayList<LiveRef>();    incomingRefTable.put(ep,refList);  }  refList.add(ref);}  }
class C{  private void updateFlagsForInitiators(){  DbClient dbClient=getDbClient();  List<URI> initiatorURIs=dbClient.queryByType(Initiator.class,false);  Iterator<Initiator> initiators=dbClient.queryIterativeObjects(Initiator.class,initiatorURIs);  while (initiators.hasNext()) {    Initiator initiator=initiators.next();    log.debug("Examining initiator (id={}) for upgrade",initiator.getId().toString());    if (checkIfInitiatorForRPBeforeMigration(initiator)) {      log.info("Initiator (id={}) must be upgraded",initiator.getId().toString());      initiator.addInternalFlags(Flag.RECOVERPOINT);      dbClient.persistObject(initiator);      log.info("Marked initiator (id={}) as RecoverPoint",initiator.getId().toString());    }  }}  }
class C{  private SecurityContext authenticate(GridRestRequest req) throws IgniteCheckedException {  assert req.clientId() != null;  AuthenticationContext authCtx=new AuthenticationContext();  authCtx.subjectType(REMOTE_CLIENT);  authCtx.subjectId(req.clientId());  authCtx.nodeAttributes(Collections.<String,Object>emptyMap());  SecurityCredentials cred;  if (req.credentials() instanceof SecurityCredentials)   cred=(SecurityCredentials)req.credentials(); else   if (req.credentials() instanceof String) {    String credStr=(String)req.credentials();    int idx=credStr.indexOf(':');    cred=idx >= 0 && idx < credStr.length() ? new SecurityCredentials(credStr.substring(0,idx),credStr.substring(idx + 1)) : new SecurityCredentials(credStr,null);  } else {    cred=new SecurityCredentials();    cred.setUserObject(req.credentials());  }  authCtx.address(req.address());  authCtx.credentials(cred);  SecurityContext subjCtx=ctx.security().authenticate(authCtx);  if (subjCtx == null) {    if (req.credentials() == null)     throw new IgniteCheckedException("Failed to authenticate remote client (secure session SPI not set?): " + req); else     throw new IgniteCheckedException("Failed to authenticate remote client (invalid credentials?): " + req);  }  return subjCtx;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.464 -0500",hash_original_method="96B070670DE0E95F8D3FF147ADCAC1FA",hash_generated_method="962E9816683B153B9D737496AF7F2319") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int rset() throws IOException {  return sendCommand(SMTPCommand.RSET);}  }
class C{  public boolean isBound(){  return bound || oldImpl;}  }
class C{  public static LogNormal serializableInstance(){  return new LogNormal(.5);}  }
class C{  public fieldset addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private String readColumnText(BinaryFile inputFile) throws FormatException {  StringBuffer buildretval=new StringBuffer();  boolean skipnext=false;  char tmp;  try {    while ((tmp=inputFile.readChar()) != ',') {      if ((tmp == ':') && !skipnext) {        return null;      }      if (tmp == '\\') {        skipnext=true;      } else {        skipnext=false;        buildretval.append(tmp);      }    }  } catch (  EOFException e) {  }  return buildretval.toString();}  }
class C{  public Object construct(Node node){  MappingNode mnode=(MappingNode)node;  if (Properties.class.isAssignableFrom(node.getType())) {    Properties properties=new Properties();    if (!node.isTwoStepsConstruction()) {      constructMapping2ndStep(mnode,properties);    } else {      throw new YAMLException("Properties must not be recursive.");    }    return properties;  } else   if (SortedMap.class.isAssignableFrom(node.getType())) {    SortedMap<Object,Object> map=new TreeMap<Object,Object>();    if (!node.isTwoStepsConstruction()) {      constructMapping2ndStep(mnode,map);    }    return map;  } else   if (Map.class.isAssignableFrom(node.getType())) {    if (node.isTwoStepsConstruction()) {      return createDefaultMap();    } else {      return constructMapping(mnode);    }  } else   if (SortedSet.class.isAssignableFrom(node.getType())) {    SortedSet<Object> set=new TreeSet<Object>();    constructSet2ndStep(mnode,set);    return set;  } else   if (Collection.class.isAssignableFrom(node.getType())) {    if (node.isTwoStepsConstruction()) {      return createDefaultSet();    } else {      return constructSet(mnode);    }  } else {    if (node.isTwoStepsConstruction()) {      return createEmptyJavaBean(mnode);    } else {      return constructJavaBean2ndStep(mnode,createEmptyJavaBean(mnode));    }  }}  }
class C{  public FastBlurFilter(int radius){  super();  if (radius < 1) {    this.radius=1;  } else {    this.radius=radius;  }}  }
class C{  public E update() throws IOException, ServiceException {  if (state.service == null) {    throw new ServiceException(CoreErrorDomain.ERR.entryNotAssociated);  }  Link editLink=getEditLink();  if (editLink == null) {    throw new UnsupportedOperationException("Entry cannot be updated");  }  URL editUrl=new URL(editLink.getHref());  return (E)state.service.update(editUrl,this);}  }
class C{  public Object clone(){  return super.clone();}  }
class C{  public X500Principal(String name){  if (name == null) {    throw new NullPointerException("name == null");  }  try {    dn=new Name(name);  } catch (  IOException e) {    throw incorrectInputName(e,name);  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  protected int height(TreeNode<E> root){  if (root == null)   return 0;  return 1 + Math.max(height(root.left),height(root.right));}  }
class C{  public BigdataSolutionResolverator start(ExecutorService service){  return (BigdataSolutionResolverator)super.start(service);}  }
class C{  public final CompletableFuture<PartitionReceiver> createReceiver(final String consumerGroupName,final String partitionId,final Instant dateTime) throws ServiceBusException {  return PartitionReceiver.create(this.underlyingFactory,this.eventHubName,consumerGroupName,partitionId,null,false,dateTime,PartitionReceiver.NULL_EPOCH,false);}  }
class C{  @Override public boolean prepareAuthenticationFlow(AuthenticationCallback callback){  boolean canAuthenticate=context.getPackageManager().queryIntentActivities(launchIntent,0).size() > 0;  if (canAuthenticate) {    callback.onReadyToAuthenticate(this);  }  return canAuthenticate;}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec11(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,new RSAOtherPrimeInfo[0]);    fail("Expected IAE not thrown");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public TFloatLongHashMap(TFloatHashingStrategy strategy){  super(strategy);}  }
class C{  public DuplicateEventException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private void initWeights(double X_[][]){  initWeights(X_[0].length,m_H);}  }
class C{  void before(){  if (config.circuitBreaker != null && !config.circuitBreaker.allowsExecution()) {    completed=true;    Exception failure=new CircuitBreakerOpenException();    if (config != null)     config.handleComplete(null,failure,this,false);    future.complete(null,failure,config.fallback,false);    return;  }  if (completeCalled && config != null)   config.handleRetry(lastResult,lastFailure,this);  super.before();  completeCalled=false;  retryCalled=false;}  }
class C{  void updateDays(WheelView year,WheelView month,WheelView day){  Calendar calendar=Calendar.getInstance();  calendar.set(Calendar.YEAR,calendar.get(Calendar.YEAR) + year.getCurrentItem());  calendar.set(Calendar.MONTH,month.getCurrentItem());  int maxDays=calendar.getActualMaximum(Calendar.DAY_OF_MONTH);  day.setViewAdapter(new DateNumericAdapter(this,1,maxDays,calendar.get(Calendar.DAY_OF_MONTH) - 1));  curDay=Math.min(maxDays,day.getCurrentItem() + 1);  day.setCurrentItem(curDay - 1,true);}  }
class C{  public static boolean isBasicInteger(FTypeRef typeRef){  if (typeRef == null)   return false;  FBasicTypeId bt=getActualPredefined(typeRef);  return isBasicIntegerId(bt);}  }
class C{  protected void updateRequest(SnmpVarBind var,int pos){  int size=varBind.size();  translation[size]=pos;  varBind.addElement(var);}  }
class C{  public void applicationDidBecomeActive(){}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"MLA");  translateAll(environment,instruction,"MLA",instructions);}  }
class C{  public Enumeration children(){  if (children == null) {    return EMPTY_ENUMERATION;  } else {    return children.elements();  }}  }
class C{  public Type type(){  return type;}  }
class C{  private static double sum(double[] a,int lo,int hi){  if (lo < 0 || hi >= a.length || lo > hi)   throw new IndexOutOfBoundsException("Subarray indices out of bounds");  double sum=0.0;  for (int i=lo; i <= hi; i++) {    sum+=a[i];  }  return sum;}  }
class C{  public boolean isDeleteAndSelect(){  return deleteAndSelect;}  }
class C{  private void wait(Long clientCustomerId,@Nullable ApiException lastApiException){  long nowInMillis=DateTime.now().getMillis();  long waitForMillis=0L;  waitForMillis=Math.max(waitForMillis,tokenWaitUntil.get() - nowInMillis);  if (clientCustomerId != null) {    waitForMillis=Math.max(waitForMillis,accountWaitUntil.get(clientCustomerId) - nowInMillis);  }  if (waitForMillis > 0) {    if (timeoutOnRateExceededError > 0 && waitForMillis > MILLISECONDS.convert(timeoutOnRateExceededError,SECONDS)) {      throw new RuntimeException("Need to wait too much time (more than " + timeoutOnRateExceededError + " seconds).",lastApiException);    }    logger.info("Thread \"{}\" sleeping for {} millis due to rate limit on {}.",Thread.currentThread().getName(),waitForMillis,bucket);    Uninterruptibles.sleepUninterruptibly(waitForMillis,MILLISECONDS);  }}  }
class C{  public boolean recordParamNames(CodeAttribute ca,int numOfLocalVars) throws CompileError {  LocalVariableAttribute va=(LocalVariableAttribute)ca.getAttribute(LocalVariableAttribute.tag);  if (va == null)   return false;  int n=va.tableLength();  for (int i=0; i < n; ++i) {    int index=va.index(i);    if (index < numOfLocalVars)     gen.recordVariable(va.descriptor(i),va.variableName(i),index,stable);  }  return true;}  }
class C{  @SuppressWarnings("rawtypes") public static String interpolate(String text,Map namespace){  Iterator keys=namespace.keySet().iterator();  while (keys.hasNext()) {    String key=keys.next().toString();    Object obj=namespace.get(key);    if (obj == null) {      throw new NullPointerException("The value of the key '" + key + "' is null.");    }    String value=obj.toString();    text=StringUtils.replace(text,"${" + key + "}",value);    if (key.indexOf(" ") == -1) {      text=StringUtils.replace(text,"$" + key,value);    }  }  return text;}  }
class C{  public boolean isEvent2Received(){  return event2Received;}  }
class C{  static public void assertNull(Object object){  assertNull(null,object);}  }
class C{  public static PrivateKey loadPrivateKey(String encodedPrivateKey) throws NoSuchProviderException, NoSuchAlgorithmException, InvalidKeySpecException {  byte[] decodedPrivateKey=base64Decode(encodedPrivateKey);  ECParameterSpec params=ECNamedCurveTable.getParameterSpec("prime256v1");  ECPrivateKeySpec prvkey=new ECPrivateKeySpec(new BigInteger(decodedPrivateKey),params);  KeyFactory kf=KeyFactory.getInstance("ECDH",BouncyCastleProvider.PROVIDER_NAME);  return kf.generatePrivate(prvkey);}  }
class C{  public void skipRecord() throws IOException {  if (debug) {    System.err.println("SkipRecord: recIdx = " + currRecIdx + " blkIdx = "+ currBlkIdx);  }  if (inStream == null) {    throw new IOException("reading (via skip) from an output buffer");  }  if (currRecIdx >= recsPerBlock) {    if (!readBlock()) {      return;    }  }  currRecIdx++;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.397 -0500",hash_original_method="8CB53D267E9464036527893199C594A2",hash_generated_method="654AAE5A5657CC75F0CF8EC5E2CF19E9") static public void assertEquals(long expected,long actual){  assertEquals(null,expected,actual);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  public HttpSendSocket(String host,int port,URL url) throws IOException {  super((SocketImpl)null);  if (RMIMasterSocketFactory.proxyLog.isLoggable(Log.VERBOSE)) {    RMIMasterSocketFactory.proxyLog.log(Log.VERBOSE,"host = " + host + ", port = "+ port+ ", url = "+ url);  }  this.host=host;  this.port=port;  this.url=url;  inNotifier=new HttpSendInputStream(null,this);  outNotifier=new HttpSendOutputStream(writeNotify(),this);}  }
class C{  public void testBottomUpSemanticsExplainHint01() throws Exception {  final ASTContainer container=new TestHelper("explainHints-bottomup01","explainHints-bottomup01.rq","explainHints.trig","explainHints-bottomup12345.srx").runTest();  assertCarriesExactlyOneExplainHintOfType(container.getOptimizedAST(),BottomUpSemanticsExplainHint.class);}  }
class C{  void acceptMultiplexConnection(Connection conn){  if (acceptor == null) {    acceptor=new ConnectionAcceptor(tr);    acceptor.startNewAcceptor();  }  acceptor.accept(conn);}  }
class C{  public static void register(final PropertiesFormat format){  formats.add(format);}  }
class C{  private static boolean isValid(long value,long minValue,long maxValue,long increment){  return minValue <= value && maxValue >= value && maxValue > minValue && increment != 0 && BigInteger.valueOf(increment).abs().compareTo(BigInteger.valueOf(maxValue).subtract(BigInteger.valueOf(minValue))) < 0;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(20 + infoPackage.length() + infoModule.length()+ infoRelease.length()+ infoTimestamp.length()+ infoClassloader.length());  sb.append("VersionInfo(").append(infoPackage).append(':').append(infoModule);  if (!UNAVAILABLE.equals(infoRelease))   sb.append(':').append(infoRelease);  if (!UNAVAILABLE.equals(infoTimestamp))   sb.append(':').append(infoTimestamp);  sb.append(')');  if (!UNAVAILABLE.equals(infoClassloader))   sb.append('@').append(infoClassloader);  return sb.toString();}  }
class C{  public int highestValue(){  if (m_values.isEmpty()) {    return 0;  }  int max=Integer.MIN_VALUE;  for (  final int value : m_values.values()) {    if (value > max) {      max=value;    }  }  return max;}  }
class C{  public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    super.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  protected void merge(Properties from,Properties to,String what,String where){  if (!from.isEmpty()) {    if (to == null) {      to=getProperties();    }    PropUtils.copyProperties(from,to);  } else {    if (what != null && DEBUG) {      logger.fine("no " + what + " found"+ (where == null ? "." : (" in " + where)));    }  }}  }
class C{  public boolean isNoCacheKey(){  return (number & 0x1E) == 0x1C;}  }
class C{  private Symbol owner(){  return owner(false);}  }
class C{  private static int sum(int[] a){  int sum=0;  for (int i=0; i < a.length; i++) {    sum+=a[i];  }  return sum;}  }
class C{  void addEntry(){  PrincipalName pname=null;  try {    pname=new PrincipalName(principal);  } catch (  KrbException e) {    System.err.println("Failed to add " + principal + " to keytab.");    e.printStackTrace();    System.exit(-1);  }  if (password == null) {    try {      BufferedReader cis=new BufferedReader(new InputStreamReader(System.in));      System.out.print("Password for " + pname.toString() + ":");      System.out.flush();      password=cis.readLine().toCharArray();    } catch (    IOException e) {      System.err.println("Failed to read the password.");      e.printStackTrace();      System.exit(-1);    }  }  try {    table.addEntry(pname,password,vAdd,append);    Arrays.fill(password,'0');    table.save();    System.out.println("Done!");    System.out.println("Service key for " + principal + " is saved in "+ table.tabName());  } catch (  KrbException e) {    System.err.println("Failed to add " + principal + " to keytab.");    e.printStackTrace();    System.exit(-1);  }catch (  IOException e) {    System.err.println("Failed to save new entry.");    e.printStackTrace();    System.exit(-1);  }}  }
class C{  private static int angleToHour(double angle){  angle=Math.PI / 2 - angle;  while (angle < 0)   angle+=Math.PI * 2;  while (angle >= Math.PI * 2)   angle-=Math.PI * 2;  angle=(angle + Math.PI / 12) / (Math.PI / 6);  final int hour=(int)Math.round(angle);  return hour == 0 ? 12 : hour;}  }
class C{  public List<Auditoria> logs(){  List<Auditoria> dados=new ArrayList<>();  try {    String sql="SELECT log.id_auditoria, log.acao, log.data, log.descricao , usuario.nome " + "FROM tb_auditoria AS log, tb_usuario AS usuario WHERE log.fk_usuario = usuario.id_usuario ";    stm=conector.prepareStatement(sql);    rs=stm.executeQuery(sql);    while (rs.next()) {      Auditoria logs=new Auditoria(rs.getInt(1),rs.getString(2),Tempo.toDate(rs.getTimestamp(3)),rs.getString(4),null);      logs.setUser(new Usuario(rs.getInt(5),rs.getString(6)));      dados.add(logs);    }    stm.close();    rs.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao consultar logs na base de dados! \n" + ex);  }  return dados;}  }
class C{  public Builder preProcessor(BitmapProcessor preProcessor){  this.preProcessor=preProcessor;  return this;}  }
class C{  public boolean shouldYieldConnection(SQLiteConnection connection,int connectionFlags){synchronized (mLock) {    if (!mAcquiredConnections.containsKey(connection)) {      throw new IllegalStateException("Cannot perform this operation " + "because the specified connection was not acquired " + "from this pool or has already been released.");    }    if (!mIsOpen) {      return false;    }    return isSessionBlockingImportantConnectionWaitersLocked(connection.isPrimaryConnection(),connectionFlags);  }}  }
class C{  public boolean contains(final int x,final int radius){  if (this == EMPTY_INTERVAL)   throw new IllegalArgumentException();  return x >= left - radius && x <= right + radius;}  }
class C{  public int lineNumber(int position){  int lineNumber=getLineNumber(position);  return lineNumber < 1 ? 1 : lineNumber;}  }
class C{  public static int graphDepth(Layer layer){  int depth=-1;  while (layer != null) {    layer=layer.parent();    depth++;  }  return depth;}  }
class C{  private void startAuthentication(){  Preference.putString(context,getResources().getString(R.string.shared_pref_reg_type),deviceType);  if (CommonUtils.isNetworkAvailable(context)) {    initializeIDPLib(getResources().getString(R.string.client_id),getResources().getString(R.string.client_secret));    progressDialog=ProgressDialog.show(context,getResources().getString(R.string.dialog_authenticate),getResources().getString(R.string.dialog_message_please_wait),true);  } else {    CommonDialogUtils.stopProgressDialog(progressDialog);    CommonDialogUtils.showNetworkUnavailableMessage(context);  }}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  drawCenteredString(fontRendererObj,"Use Proxy",width / 2,20,0xFFFFFF);  drawString(fontRendererObj,"IP:Port (must be a SOCKS proxy)",width / 2 - 100,47,0xA0A0A0);  drawCenteredString(fontRendererObj,error,width / 2,87,0xFF0000);  String currentProxy=System.getProperty("socksProxyHost") + ":" + System.getProperty("socksProxyPort");  if (currentProxy.equals(":") || currentProxy.equals("null:null"))   currentProxy="none";  drawString(fontRendererObj,"Current proxy: " + currentProxy,width / 2 - 100,97,0xA0A0A0);  proxyBox.drawTextBox();  super.drawScreen(par1,par2,par3);}  }
class C{  public boolean unload(){  EventFactory.callEvent(new WorldUnloadEvent(this));  try {    storageProvider.getChunkIoService().unload();    storageProvider.getScoreboardIoService().unload();  } catch (  IOException e) {    return false;  }  return true;}  }
class C{  protected void stopBridgeServer(Cache cache){  CacheServer bridge=(CacheServer)cache.getCacheServers().iterator().next();  bridge.stop();  assertFalse(bridge.isRunning());}  }
class C{  void doStay(int x,int y){  Creature c=getCreature(x,y);  c.stay();  getInLine(x,y);}  }
class C{  public Constant resolveCase(BlockScope scope,TypeBinding switchExpressionType,SwitchStatement switchStatement){  scope.enclosingCase=this;  if (this.constantExpression == null) {    if (switchStatement.defaultCase != null)     scope.problemReporter().duplicateDefaultCase(this);    switchStatement.defaultCase=this;    return Constant.NotAConstant;  }  switchStatement.cases[switchStatement.caseCount++]=this;  if (switchExpressionType != null && switchExpressionType.isEnum() && (this.constantExpression instanceof SingleNameReference)) {    ((SingleNameReference)this.constantExpression).setActualReceiverType((ReferenceBinding)switchExpressionType);  }  TypeBinding caseType=this.constantExpression.resolveType(scope);  if (caseType == null || switchExpressionType == null)   return Constant.NotAConstant;  if (this.constantExpression.isConstantValueOfTypeAssignableToType(caseType,switchExpressionType) || caseType.isCompatibleWith(switchExpressionType)) {    if (caseType.isEnum()) {      if (((this.constantExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) != 0) {        scope.problemReporter().enumConstantsCannotBeSurroundedByParenthesis(this.constantExpression);      }      if (this.constantExpression instanceof NameReference && (this.constantExpression.bits & ASTNode.RestrictiveFlagMASK) == Binding.FIELD) {        NameReference reference=(NameReference)this.constantExpression;        FieldBinding field=reference.fieldBinding();        if ((field.modifiers & ClassFileConstants.AccEnum) == 0) {          scope.problemReporter().enumSwitchCannotTargetField(reference,field);        } else         if (reference instanceof QualifiedNameReference) {          scope.problemReporter().cannotUseQualifiedEnumConstantInCaseLabel(reference,field);        }        return IntConstant.fromValue(field.original().id + 1);      }    } else {      return this.constantExpression.constant;    }  } else   if (isBoxingCompatible(caseType,switchExpressionType,this.constantExpression,scope)) {    return this.constantExpression.constant;  }  scope.problemReporter().typeMismatchError(caseType,switchExpressionType,this.constantExpression,switchStatement.expression);  return Constant.NotAConstant;}  }
class C{  private void addImportClass(Class<?> cl){  if (cl.isArray()) {    cl=cl.getComponentType();  }  if (cl.isPrimitive())   return;  addImportClass(cl.getCanonicalName());}  }
class C{  protected ListCellRenderer createRenderer(){  return new BasicComboBoxRenderer.UIResource();}  }
class C{  public boolean equals(Object other){  if (other instanceof DerValue)   return equals((DerValue)other); else   return false;}  }
class C{  public T caseAggregator(Aggregator object){  return null;}  }
class C{  public Cuboid transform(Rotation transform){  Vector3D transMin=transform.applyTo(min);  Vector3D transMax=transform.applyTo(max);  return new Cuboid(Vector3DUtil.min(transMin,transMax),Vector3DUtil.max(transMax,transMin));}  }
class C{  public static void classNotConfigured(Class<?> clazz){  throw new MappingNotFoundException(MSG.INSTANCE.message(Constants.mappingNotFoundException1,clazz.getSimpleName()));}  }
class C{  @Override public void configure(HttpSecurity http) throws Exception {  http.requestMatchers().antMatchers("/**").and().authorizeRequests().anyRequest().authenticated().antMatchers(HttpMethod.GET,"/**").access("#oauth2.hasScope('read')").antMatchers(HttpMethod.OPTIONS,"/**").access("#oauth2.hasScope('read')").antMatchers(HttpMethod.POST,"/**").access("#oauth2.hasScope('write')").antMatchers(HttpMethod.PUT,"/**").access("#oauth2.hasScope('write')").antMatchers(HttpMethod.PATCH,"/**").access("#oauth2.hasScope('write')").antMatchers(HttpMethod.DELETE,"/**").access("#oauth2.hasScope('write')");}  }
class C{  public boolean pemEncode(){  return pemEncode;}  }
class C{  public boolean isEditable(){  return editable;}  }
class C{  public long roundTripTime() throws InterruptedException {  latch.await();  return received - sent;}  }
class C{  public UndefinedData(Object x){  this.data=new byte[(int)ArrayFuncs.computeLSize(x)];  ArrayFuncs.copyInto(x,this.data);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  public PriorityQueue<E> asPriorityQueue(){  PriorityQueue<E> pq=new PriorityQueue<E>(entries.size());  for (  Map.Entry<E,Double> entry : entries.entrySet()) {    pq.add(entry.getKey(),entry.getValue());  }  return pq;}  }
class C{  public void estopAll(){  for (int slotNum=0; slotNum < 120; slotNum++) {    LocoNetSlot s=memo.getSlotManager().slot(slotNum);    if (s.slotStatus() != LnConstants.LOCO_FREE && (s.consistStatus() == LnConstants.CONSIST_NO || s.consistStatus() == LnConstants.CONSIST_TOP) && s.speed() != 1) {      LocoNetMessage msg=new LocoNetMessage(4);      msg.setOpCode(LnConstants.OPC_LOCO_SPD);      msg.setElement(1,s.getSlot());      msg.setElement(2,1);      memo.getLnTrafficController().sendLocoNetMessage(msg);    }  }}  }
class C{  private void createModelWithApiAsTopParent(TreeElement<SecuritySpecModel,Object> root){  Map<MethodModel,Map<MethodModel,List<CodeLocationModel>>> outputEventBlocks=getSpec().getOutputEventBlocks();  if (outputEventBlocks != null) {    for (    MethodModel apiMethod : outputEventBlocks.keySet()) {      String shortSignature=apiMethod.getShortSignature();      TreeElement<Object,MethodModel> apiElement=new TreeElement<Object,MethodModel>(shortSignature,apiMethod,MethodModel.class);      root.addChild(apiElement);      updatePropertyChangeListener(apiMethod,apiElement);      for (      MethodModel inputMethod : outputEventBlocks.get(apiMethod).keySet()) {        TreeElement<MethodModel,Object> inputElement=new TreeElement<MethodModel,Object>(inputMethod.getShortSignature(),inputMethod,Object.class);        apiElement.addChild(inputElement);        updatePropertyChangeListener(inputMethod,inputElement);        List<CodeLocationModel> locations=outputEventBlocks.get(apiMethod).get(inputMethod);        if (locations != null) {          if (locations != null) {            if (locations.size() == 1) {              CodeLocationModel location=locations.get(0);              List<HotspotModel> hotspots=location.getHotspots();              for (              HotspotModel hotspot : hotspots) {                TreeElement<Object,Object> hotspotElement=new TreeElement<Object,Object>(hotspot.toString(),hotspot,Object.class);                inputElement.addChild(hotspotElement);                updatePropertyChangeListener(hotspot,hotspotElement);              }            } else {              for (              CodeLocationModel location : locations) {                TreeElement<Object,HotspotModel> locationElement=new TreeElement<Object,HotspotModel>(location.toString(),location,HotspotModel.class);                inputElement.addChild(locationElement);                updatePropertyChangeListener(location,locationElement);                List<HotspotModel> hotspots=location.getHotspots();                for (                HotspotModel hotspot : hotspots) {                  TreeElement<HotspotModel,Object> hotspotElement=new TreeElement<HotspotModel,Object>(hotspot.toString(),hotspot,Object.class);                  locationElement.addChild(hotspotElement);                  updatePropertyChangeListener(hotspot,hotspotElement);                }              }            }          }        }      }    }  }}  }
class C{  public Team(String name,String abbr,String conference,League league,int prestige,String rivalTeamAbbr){  this.league=league;  userControlled=false;  showPopups=true;  teamHistory=new ArrayList<String>();  hallOfFame=new ArrayList<>();  playersInjuredAll=new ArrayList<>();  teamQBs=new ArrayList<PlayerQB>();  teamRBs=new ArrayList<PlayerRB>();  teamWRs=new ArrayList<PlayerWR>();  teamKs=new ArrayList<PlayerK>();  teamOLs=new ArrayList<PlayerOL>();  teamF7s=new ArrayList<PlayerF7>();  teamSs=new ArrayList<PlayerS>();  teamCBs=new ArrayList<PlayerCB>();  teamRSs=new ArrayList<Player>();  teamFRs=new ArrayList<Player>();  teamSOs=new ArrayList<Player>();  teamJRs=new ArrayList<Player>();  teamSRs=new ArrayList<Player>();  gameSchedule=new ArrayList<Game>();  gameOOCSchedule0=null;  gameOOCSchedule4=null;  gameOOCSchedule9=null;  gameWinsAgainst=new ArrayList<Team>();  gameWLSchedule=new ArrayList<String>();  confChampion="";  semiFinalWL="";  natChampWL="";  teamPrestige=prestige;  recruitPlayers(2,4,6,2,10,2,6,14);  totalWins=0;  totalLosses=0;  winStreak=new TeamStreak(league.getYear(),league.getYear(),0,abbr);  yearStartWinStreak=new TeamStreak(league.getYear(),league.getYear(),0,abbr);  totalCCs=0;  totalNCs=0;  totalCCLosses=0;  totalNCLosses=0;  totalBowls=0;  totalBowlLosses=0;  this.name=name;  this.abbr=abbr;  this.conference=conference;  rivalTeam=rivalTeamAbbr;  wonRivalryGame=false;  teamPoints=0;  teamOppPoints=0;  teamYards=0;  teamOppYards=0;  teamPassYards=0;  teamRushYards=0;  teamOppPassYards=0;  teamOppRushYards=0;  teamTODiff=0;  teamOffTalent=getOffTalent();  teamDefTalent=getDefTalent();  teamPollScore=teamPrestige + getOffTalent() + getDefTalent();  teamStratOff=new TeamStrategy();  teamStratDef=new TeamStrategy();  teamStratOffNum=1;  teamStratDefNum=1;  numRecruits=30;  playersLeaving=new ArrayList<>();}  }
class C{  public String normalizeColumnValue(String vendorName,int dataTypeID){  return m_interfaces.get(getDBVendorID(vendorName)).normalizeColumnValue(dataTypeID);}  }
class C{  public WorkbenchRequest(Repository repository,HttpServletRequest request,Map<String,String> defaults) throws RepositoryException, IOException, FileUploadException {  super(request);  this.defaults=defaults;  this.decoder=new ValueDecoder(repository,(repository == null) ? SimpleValueFactory.getInstance() : repository.getValueFactory());  String url=request.getRequestURL().toString();  if (ServletFileUpload.isMultipartContent(this)) {    parameters=getMultipartParameterMap();  } else   if (request.getQueryString() == null && url.contains(";")) {    parameters=getUrlParameterMap(url);  }}  }
class C{  public boolean isEmpty(){  return this.width <= 0 || this.height <= 0;}  }
class C{  public boolean isAccountValid(){  return isActive(getValidFrom(),getValidUntil());}  }
class C{  public <T extends ServiceDocument>Operation sendPostAndWait(String serviceUri,T parameters) throws Throwable {  Operation op=Operation.createPost(UriUtils.buildUri(hosts[0],serviceUri,null)).setBody(parameters);  return sendRequestAndWait(op,hosts[0]);}  }
class C{  @Override public String toString(){  return "value=" + m_Value + ", index="+ m_Index;}  }
class C{  private void sincronizarBase(){  listaMovimentacao=ControleDAO.getBanco().getMovimentacaoDAO().listar();}  }
class C{  public static RecurrenceIterator createRecurrenceIterator(Recurrence rrule,DateValue dtStart,TimeZone tzid){  Frequency freq=rrule.getFrequency();  DayOfWeek wkst=rrule.getWorkweekStarts();  ICalDate until=rrule.getUntil();  DateValue untilUtc=(until == null) ? null : Google2445Utils.convert(until,tzid);  int count=toInt(rrule.getCount());  int interval=toInt(rrule.getInterval());  ByDay[] byDay=rrule.getByDay().toArray(new ByDay[0]);  int[] byMonth=toIntArray(rrule.getByMonth());  int[] byMonthDay=toIntArray(rrule.getByMonthDay());  int[] byWeekNo=toIntArray(rrule.getByWeekNo());  int[] byYearDay=toIntArray(rrule.getByYearDay());  int[] bySetPos=toIntArray(rrule.getBySetPos());  int[] byHour=toIntArray(rrule.getByHour());  int[] byMinute=toIntArray(rrule.getByMinute());  int[] bySecond=toIntArray(rrule.getBySecond());  if (interval <= 0) {    interval=1;  }  if (wkst == null) {    wkst=DayOfWeek.MONDAY;  }  if (bySetPos.length > 0) {switch (freq) {case HOURLY:      if (byHour.length > 0 && byMinute.length <= 1 && bySecond.length <= 1) {        byHour=filterBySetPos(byHour,bySetPos);      }    bySetPos=NO_INTS;  break;case MINUTELY:if (byMinute.length > 0 && bySecond.length <= 1) {  byMinute=filterBySetPos(byMinute,bySetPos);}bySetPos=NO_INTS;break;case SECONDLY:if (bySecond.length > 0) {bySecond=filterBySetPos(bySecond,bySetPos);}bySetPos=NO_INTS;break;default :}}DateValue start=dtStart;if (bySetPos.length > 0) {switch (freq) {case YEARLY:start=(dtStart instanceof TimeValue) ? new DateTimeValueImpl(start.year(),1,1,0,0,0) : new DateValueImpl(start.year(),1,1);break;case MONTHLY:start=(dtStart instanceof TimeValue) ? new DateTimeValueImpl(start.year(),start.month(),1,0,0,0) : new DateValueImpl(start.year(),start.month(),1);break;case WEEKLY:int d=(7 + wkst.ordinal() - TimeUtils.dayOfWeek(dtStart).getCalendarConstant()) % 7;start=TimeUtils.add(dtStart,new DateValueImpl(0,0,-d));break;default :break;}}ThrottledGenerator yearGenerator=Generators.serialYearGenerator(freq == Frequency.YEARLY ? interval : 1,dtStart);Generator monthGenerator=null;Generator dayGenerator=null;Generator secondGenerator=null;Generator minuteGenerator=null;Generator hourGenerator=null;List<Predicate<? super DateValue>> filters=new ArrayList<Predicate<? super DateValue>>();switch (freq) {case SECONDLY:if (bySecond.length == 0 || interval != 1) {secondGenerator=Generators.serialSecondGenerator(interval,dtStart);if (bySecond.length > 0) {filters.add(Filters.bySecondFilter(bySecond));}}break;case MINUTELY:if (byMinute.length == 0 || interval != 1) {minuteGenerator=Generators.serialMinuteGenerator(interval,dtStart);if (byMinute.length > 0) {filters.add(Filters.byMinuteFilter(byMinute));}}break;case HOURLY:if (byHour.length == 0 || interval != 1) {hourGenerator=Generators.serialHourGenerator(interval,dtStart);if (byHour.length > 0) {filters.add(Filters.byHourFilter(bySecond));}}break;case DAILY:break;case WEEKLY:if (byDay.length > 0) {dayGenerator=Generators.byDayGenerator(byDay,false,start);byDay=NO_DAYS;if (interval > 1) {filters.add(Filters.weekIntervalFilter(interval,wkst,dtStart));}} else {dayGenerator=Generators.serialDayGenerator(interval * 7,dtStart);}break;case YEARLY:if (byYearDay.length > 0) {dayGenerator=Generators.byYearDayGenerator(byYearDay,start);break;}case MONTHLY:if (byMonthDay.length > 0) {dayGenerator=Generators.byMonthDayGenerator(byMonthDay,start);byMonthDay=NO_INTS;} else if (byWeekNo.length > 0 && Frequency.YEARLY == freq) {dayGenerator=Generators.byWeekNoGenerator(byWeekNo,wkst,start);byWeekNo=NO_INTS;} else if (byDay.length > 0) {dayGenerator=Generators.byDayGenerator(byDay,Frequency.YEARLY == freq && byMonth.length == 0,start);byDay=NO_DAYS;} else {if (Frequency.YEARLY == freq) {monthGenerator=Generators.byMonthGenerator(new int[]{dtStart.month()},start);}dayGenerator=Generators.byMonthDayGenerator(new int[]{dtStart.day()},start);}break;}if (secondGenerator == null) {secondGenerator=Generators.bySecondGenerator(bySecond,start);}if (minuteGenerator == null) {if (byMinute.length == 0 && freq.compareTo(Frequency.MINUTELY) < 0) {minuteGenerator=Generators.serialMinuteGenerator(1,dtStart);} else {minuteGenerator=Generators.byMinuteGenerator(byMinute,start);}}if (hourGenerator == null) {if (byHour.length == 0 && freq.compareTo(Frequency.HOURLY) < 0) {hourGenerator=Generators.serialHourGenerator(1,dtStart);} else {hourGenerator=Generators.byHourGenerator(byHour,start);}}if (dayGenerator == null) {boolean dailyOrMoreOften=freq.compareTo(Frequency.DAILY) <= 0;if (byMonthDay.length > 0) {dayGenerator=Generators.byMonthDayGenerator(byMonthDay,start);byMonthDay=NO_INTS;} else if (byDay.length > 0) {dayGenerator=Generators.byDayGenerator(byDay,Frequency.YEARLY == freq,start);byDay=NO_DAYS;} else if (dailyOrMoreOften) {dayGenerator=Generators.serialDayGenerator(Frequency.DAILY == freq ? interval : 1,dtStart);} else {dayGenerator=Generators.byMonthDayGenerator(new int[]{dtStart.day()},start);}}if (byDay.length > 0) {filters.add(Filters.byDayFilter(byDay,Frequency.YEARLY == freq,wkst));byDay=NO_DAYS;}if (byMonthDay.length > 0) {filters.add(Filters.byMonthDayFilter(byMonthDay));}if (byMonth.length > 0) {monthGenerator=Generators.byMonthGenerator(byMonth,start);} else if (monthGenerator == null) {monthGenerator=Generators.serialMonthGenerator(freq == Frequency.MONTHLY ? interval : 1,dtStart);}Predicate<DateValue> condition;boolean canShortcutAdvance=true;if (count != 0) {condition=Conditions.countCondition(count);canShortcutAdvance=false;} else if (untilUtc != null) {if ((untilUtc instanceof TimeValue) != (dtStart instanceof TimeValue)) {if (dtStart instanceof TimeValue) {untilUtc=TimeUtils.dayStart(untilUtc);} else {untilUtc=TimeUtils.toDateValue(untilUtc);}}condition=Conditions.untilCondition(untilUtc);} else {condition=Predicates.<DateValue>alwaysTrue();}Predicate<? super DateValue> filter;switch (filters.size()) {case 0:filter=Predicates.<DateValue>alwaysTrue();break;case 1:filter=filters.get(0);break;default :filter=Predicates.and(filters);break;}Generator instanceGenerator;if (bySetPos.length > 0) {instanceGenerator=InstanceGenerators.bySetPosInstanceGenerator(bySetPos,freq,wkst,filter,yearGenerator,monthGenerator,dayGenerator,hourGenerator,minuteGenerator,secondGenerator);} else {instanceGenerator=InstanceGenerators.serialInstanceGenerator(filter,yearGenerator,monthGenerator,dayGenerator,hourGenerator,minuteGenerator,secondGenerator);}return new RRuleIteratorImpl(dtStart,tzid,condition,instanceGenerator,yearGenerator,monthGenerator,dayGenerator,hourGenerator,minuteGenerator,secondGenerator,canShortcutAdvance);}  }
class C{  public static ImageSource cachedBitmap(Bitmap bitmap){  if (bitmap == null) {    throw new NullPointerException("Bitmap must not be null");  }  return new ImageSource(bitmap,true);}  }
class C{  public boolean uiOverrideUrlLoading(String overrideUrl){  if (overrideUrl == null || overrideUrl.length() == 0) {    return false;  }  boolean override=false;  if (mWebViewClient != null) {    override=mWebViewClient.shouldOverrideUrlLoading(mWebView.getWebView(),overrideUrl);  } else {    Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(overrideUrl));    intent.addCategory(Intent.CATEGORY_BROWSABLE);    intent.putExtra(Browser.EXTRA_APPLICATION_ID,mContext.getPackageName());    try {      mContext.startActivity(intent);      override=true;    } catch (    ActivityNotFoundException ex) {    }  }  return override;}  }
class C{  public double angleBetween(IntVector v){  return Math.acos(this.dotProduct(v) / (this.norm() * v.norm()));}  }
class C{  public static FlinkPipelineRunner fromOptions(PipelineOptions options){  FlinkPipelineOptions flinkOptions=PipelineOptionsValidator.validate(FlinkPipelineOptions.class,options);  ArrayList<String> missing=new ArrayList<>();  if (flinkOptions.getAppName() == null) {    missing.add("appName");  }  if (missing.size() > 0) {    throw new IllegalArgumentException("Missing required values: " + Joiner.on(',').join(missing));  }  if (flinkOptions.getFilesToStage() == null) {    flinkOptions.setFilesToStage(detectClassPathResourcesToStage(DataflowPipelineRunner.class.getClassLoader()));    LOG.info("PipelineOptions.filesToStage was not specified. " + "Defaulting to files from the classpath: will stage {} files. " + "Enable logging at DEBUG level to see which files will be staged.",flinkOptions.getFilesToStage().size());    LOG.debug("Classpath elements: {}",flinkOptions.getFilesToStage());  }  if (flinkOptions.getFlinkMaster() == null) {    flinkOptions.setFlinkMaster("[auto]");  }  return new FlinkPipelineRunner(flinkOptions);}  }
class C{  public void onSaveInstanceState(Bundle outState){  Log.d(TAG,"onSaveInstanceState: " + nesting);  checkNotNull(outState,"bundle == null");  Page page=peek();  savePageState(page);  outState.putSerializable(STACK_TAG,(Stack)mFactoryStack.clone());  outState.putBundle(STATE_TAG,(Bundle)mPageStates.clone());}  }
class C{  public Boolean isRecordReplaySupported(){  return recordReplaySupported;}  }
class C{  public void buildDeltas(){  this.delta=new JavaElementDelta(this.javaElement);  if (this.javaElement.getElementType() >= IJavaElement.COMPILATION_UNIT) {    this.delta.fineGrained();  }  recordNewPositions(this.javaElement,0);  findAdditions(this.javaElement,0);  findDeletions();  findChangesInPositioning(this.javaElement,0);  trimDelta(this.delta);  if (this.delta.getAffectedChildren().length == 0) {    this.delta.contentChanged();  }}  }
class C{  public boolean isColumnStretchable(int columnIndex){  return mStretchAllColumns || mStretchableColumns.get(columnIndex);}  }
class C{  public BottomSheetMenuItem(Context context,int id,CharSequence title,@DrawableRes int icon){  this(context,0,id,0,0,title);  setIcon(icon);}  }
class C{  private void runActions(List<String> actionIds,Event keyEvent){  for (  String actionId : actionIds) {    Action action=actionManager.getAction(actionId);    if (action == null) {      continue;    }    ActionEvent e=new ActionEvent(presentationFactory.getPresentation(action),actionManager,perspectiveManager.get());    action.update(e);    if (e.getPresentation().isEnabled() && e.getPresentation().isVisible()) {      keyEvent.preventDefault();      keyEvent.stopPropagation();      action.actionPerformed(e);    }  }}  }
class C{  protected void removeTag(short tagId,int ifdId){  IfdData ifdData=mIfdDatas[ifdId];  if (ifdData == null) {    return;  }  ifdData.removeTag(tagId);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TLongFloatHashMap)) {    return false;  }  TLongFloatHashMap that=(TLongFloatHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public SpriteSheetDrawer scaleRegistration(float regX,float regY){  setScaleRegistration(regX,regY);  return this;}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  flushPending();  if (target.equals(Result.PI_DISABLE_OUTPUT_ESCAPING)) {    startNonEscaping();  } else   if (target.equals(Result.PI_ENABLE_OUTPUT_ESCAPING)) {    endNonEscaping();  } else {    try {      if (m_elemContext.m_startTagOpen) {        closeStartTag();        m_elemContext.m_startTagOpen=false;      } else       if (m_cdataTagOpen) {        closeCDATA();      } else       if (m_needToCallStartDocument) {        startDocumentInternal();      }      if (true == m_needToOutputDocTypeDecl)       outputDocTypeDecl("html");      if (shouldIndent())       indent();      final java.io.Writer writer=m_writer;      writer.write("<?");      writer.write(target);      if (data.length() > 0 && !Character.isSpaceChar(data.charAt(0)))       writer.write(' ');      writer.write(data);      writer.write('>');      if (m_elemContext.m_currentElemDepth <= 0)       outputLineSep();      m_startNewLine=true;    } catch (    IOException e) {      throw new SAXException(e);    }  }  if (m_tracer != null)   super.fireEscapingEvent(target,data);}  }
class C{  public boolean match(String text){  return match(text,0,text.length());}  }
class C{  public boolean isReportingDoctype(){  return reportingDoctype;}  }
class C{  public static String toString(PolicyQualifierInfo policyQualifierInfo) throws IOException {  StringBuffer sbPolicyQualifier=new StringBuffer();  ASN1ObjectIdentifier policyQualifierId=policyQualifierInfo.getPolicyQualifierId();  CertificatePolicyQualifierType certificatePolicyQualifierType=CertificatePolicyQualifierType.resolveOid(policyQualifierId.getId());  if (certificatePolicyQualifierType == PKIX_CPS_POINTER_QUALIFIER) {    DERIA5String cpsPointer=((DERIA5String)policyQualifierInfo.getQualifier());    sbPolicyQualifier.append(MessageFormat.format(res.getString("PolicyInformationUtil.CpsPointer"),cpsPointer));  } else   if (certificatePolicyQualifierType == PKIX_USER_NOTICE_QUALIFIER) {    ASN1Encodable userNoticeObj=policyQualifierInfo.getQualifier();    UserNotice userNotice=UserNotice.getInstance(userNoticeObj);    sbPolicyQualifier.append(MessageFormat.format(res.getString("PolicyInformationUtil.UserNotice"),toString(userNotice)));  }  return sbPolicyQualifier.toString();}  }
class C{  public static TimeLagGraphWrapper serializableInstance(){  return new TimeLagGraphWrapper(new TimeLagGraph(),new Parameters());}  }
class C{  protected boolean boundaryTerm(){  if (range.start == -1) {    throw new IllegalStateException("GeoPointTermsEnum empty or not initialized");  }  return range.boundary;}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  public SgmExcepcion(String message){  this(message,null);}  }
class C{  public AnnotationVisitor visitAnnotation(String name,String desc){  if (av != null) {    return av.visitAnnotation(name,desc);  }  return null;}  }
class C{  public boolean canTraverseOutsideSubtree(){  if (null != m_parts) {    int n=m_parts.size();    for (int i=0; i < n; i++) {      AVTPart part=(AVTPart)m_parts.elementAt(i);      if (part.canTraverseOutsideSubtree())       return true;    }  }  return false;}  }
class C{  public IntentBuilder confirmationQuality(float quality){  if (quality <= 0.0f || quality > 1.0f) {    throw new IllegalArgumentException("Quality outside (0.0f, 1.0f] range!");  }  result.putExtra(EXTRA_CONFIRMATION_QUALITY,quality);  return (this);}  }
class C{  public synchronized boolean collectMatches(Vertex vertex,Map<Vertex,Set<Vertex>> variables){  if (this == vertex) {    return true;  }  Vertex variable;  Vertex match;  if (isVariable() && vertex.isVariable()) {    return false;  } else   if (isVariable()) {    variable=(Vertex)(Object)this;    match=vertex;  } else   if (vertex.isVariable()) {    variable=vertex;    match=(Vertex)(Object)this;  } else {    return false;  }  Set<Vertex> matches=variables.get(variable);  if (match == null) {    matches=new HashSet<Vertex>();    variables.put(variable,matches);  }  if (matches.contains(match)) {    return true;  }  this.network.getBot().log(variable," checking match",Level.FINEST,match);  Map<Vertex,Set<Vertex>> conflicts=new HashMap<Vertex,Set<Vertex>>();  for (Iterator<Relationship> iterator=variable.allRelationships(); iterator.hasNext(); ) {    Relationship relationship=iterator.next();    if (Primitive.VARIABLE.equals(relationship.getTarget().getData())) {      continue;    }    Vertex target=relationship.getTarget();    Vertex type=relationship.getType();    if (!type.isVariable() && !target.isVariable()) {      if (match.hasRelationship(type,target)) {        continue;      }    }    if (type.isVariable()) {      boolean found=false;      for (      Vertex typeMatch : match.getRelationships().keySet()) {        if (type.collectMatches(typeMatch,variables)) {          boolean localFound=false;          if (target.isVariable()) {            Collection<Relationship> targets=match.getRelationships(typeMatch);            if (targets != null) {              for (              Relationship targetMatch : targets) {                if (target.collectMatches(targetMatch.getTarget(),variables)) {                  found=true;                  localFound=true;                }              }            }          } else {            if (match.hasRelationship(typeMatch,target)) {              found=true;              localFound=true;            }          }          if (!localFound) {            Set<Vertex> typeConflicts=conflicts.get(type);            if (typeConflicts == null) {              typeConflicts=new HashSet<Vertex>();              conflicts.put(type,typeConflicts);            }            typeConflicts.add(relationship.getType());          }        }      }      if (found) {        continue;      }    } else     if (target.isVariable()) {      Collection<Relationship> targets=match.getRelationships(type);      boolean found=false;      if (targets != null) {        for (        Relationship targetMatch : targets) {          if (target.collectMatches(targetMatch.getTarget(),variables)) {            found=true;          }        }        if (found) {          continue;        }      }    }    this.network.getBot().log(variable," does not matches",Level.FINEST,match);    return false;  }  this.network.getBot().log(variable," matches",Level.FINER,match);  matches.add(match);  return true;}  }
class C{  private void prepareFold(Orientation orientation,float anchorFactor,int numberOfFolds){  mSrc=new float[NUM_OF_POLY_POINTS];  mDst=new float[NUM_OF_POLY_POINTS];  mDstRect=new Rect();  mFoldFactor=0;  mPreviousFoldFactor=0;  mIsFoldPrepared=false;  mSolidShadow=new Paint();  mGradientShadow=new Paint();  mOrientation=orientation;  mIsHorizontal=(orientation == Orientation.HORIZONTAL);  if (mIsHorizontal) {    mShadowLinearGradient=new LinearGradient(0,0,SHADING_FACTOR,0,Color.BLACK,Color.TRANSPARENT,TileMode.CLAMP);  } else {    mShadowLinearGradient=new LinearGradient(0,0,0,SHADING_FACTOR,Color.BLACK,Color.TRANSPARENT,TileMode.CLAMP);  }  mGradientShadow.setStyle(Style.FILL);  mGradientShadow.setShader(mShadowLinearGradient);  mShadowGradientMatrix=new Matrix();  mAnchorFactor=anchorFactor;  mNumberOfFolds=numberOfFolds;  mOriginalWidth=getMeasuredWidth();  mOriginalHeight=getMeasuredHeight();  mFoldRectArray=new Rect[mNumberOfFolds];  mMatrix=new Matrix[mNumberOfFolds];  for (int x=0; x < mNumberOfFolds; x++) {    mMatrix[x]=new Matrix();  }  int h=mOriginalHeight;  int w=mOriginalWidth;  int delta=Math.round(mIsHorizontal ? ((float)w) / ((float)mNumberOfFolds) : ((float)h) / ((float)mNumberOfFolds));  for (int x=0; x < mNumberOfFolds; x++) {    if (mIsHorizontal) {      int deltap=(x + 1) * delta > w ? w - x * delta : delta;      mFoldRectArray[x]=new Rect(x * delta,0,x * delta + deltap,h);    } else {      int deltap=(x + 1) * delta > h ? h - x * delta : delta;      mFoldRectArray[x]=new Rect(0,x * delta,w,x * delta + deltap);    }  }  if (mIsHorizontal) {    mFoldMaxHeight=h;    mFoldMaxWidth=delta;  } else {    mFoldMaxHeight=delta;    mFoldMaxWidth=w;  }  mIsFoldPrepared=true;}  }
class C{  private static Map<String,String> readFile(File reutersFile) throws IOException {  BufferedReader reader=new BufferedReader(new FileReader(reutersFile));  String dateline=reader.readLine();  reader.readLine();  String title=reader.readLine();  reader.readLine();  String text=reader.readLine();  reader.close();  Map<String,String> doc=new HashMap<>();  doc.put("title",title);  doc.put("dateline",dateline);  doc.put("text",text);  return doc;}  }
class C{  private void createLine(MOrder order,MInOut ship,MInOutLine sLine){  if (m_invoice == null) {    m_invoice=new MInvoice(order,0,p_DateInvoiced);    if (!m_invoice.save())     throw new IllegalStateException("Could not create Invoice (s)");  }  if (m_ship == null || m_ship.getM_InOut_ID() != ship.getM_InOut_ID()) {    MDocType dt=MDocType.get(getCtx(),ship.getC_DocType_ID());    if (m_bp == null || m_bp.getC_BPartner_ID() != ship.getC_BPartner_ID())     m_bp=new MBPartner(getCtx(),ship.getC_BPartner_ID(),get_TrxName());    MClient client=MClient.get(getCtx(),order.getAD_Client_ID());    String AD_Language=client.getAD_Language();    if (client.isMultiLingualDocument() && m_bp.getAD_Language() != null)     AD_Language=m_bp.getAD_Language();    if (AD_Language == null)     AD_Language=Language.getBaseAD_Language();    java.text.SimpleDateFormat format=DisplayType.getDateFormat(DisplayType.Date,Language.getLanguage(AD_Language));    String reference=dt.getPrintName(m_bp.getAD_Language()) + ": " + ship.getDocumentNo()+ " - "+ format.format(ship.getMovementDate());    m_ship=ship;    MInvoiceLine line=new MInvoiceLine(m_invoice);    line.setIsDescription(true);    line.setDescription(reference);    line.setLine(m_line + sLine.getLine() - 2);    if (!line.save())     throw new IllegalStateException("Could not create Invoice Comment Line (sh)");    if (order.getBill_Location_ID() != ship.getC_BPartner_Location_ID()) {      MLocation addr=MLocation.getBPLocation(getCtx(),ship.getC_BPartner_Location_ID(),null);      line=new MInvoiceLine(m_invoice);      line.setIsDescription(true);      line.setDescription(addr.toString());      line.setLine(m_line + sLine.getLine() - 1);      if (!line.save())       throw new IllegalStateException("Could not create Invoice Comment Line 2 (sh)");    }  }  MInvoiceLine line=new MInvoiceLine(m_invoice);  line.setShipLine(sLine);  if (sLine.sameOrderLineUOM())   line.setQtyEntered(sLine.getQtyEntered()); else   line.setQtyEntered(sLine.getMovementQty());  line.setQtyInvoiced(sLine.getMovementQty());  line.setLine(m_line + sLine.getLine());  String toBeInvoiced=sLine.get_ValueAsString("ToBeInvoiced");  if ("N".equals(toBeInvoiced)) {    line.setPriceEntered(Env.ZERO);    line.setPriceActual(Env.ZERO);    line.setPriceLimit(Env.ZERO);    line.setPriceList(Env.ZERO);    line.setLineNetAmt(Env.ZERO);    line.setIsDescription(true);  }  if (!line.save())   throw new IllegalStateException("Could not create Invoice Line (s)");  sLine.setIsInvoiced(true);  if (!sLine.save())   throw new IllegalStateException("Could not update Shipment Line");  log.fine(line.toString());}  }
class C{  public MainFrame(){  File propfile=new File(System.getProperty("user.home") + File.separator + ".jasmin");  try {    properties=new Properties();    if (!propfile.exists()) {      if (!propfile.createNewFile()) {        JOptionPane.showMessageDialog(this,"Could not create:" + propfile.toString());        System.exit(1);      }      putProperty("font","Sans Serif");      putProperty("font.size","12");      putProperty("memory","4096");      putProperty("language","en");      properties.store(new FileOutputStream(propfile),"Jasmin configuration file");    } else {      properties.load(new FileInputStream(propfile));    }  } catch (  Exception ex) {    JOptionPane.showMessageDialog(this,"Could not open:" + propfile.toString() + "\n"+ ex.toString());    System.exit(1);  }  initComponents();  helpLoader=new HelpLoader(getProperty("language"));  checkButtonStates();  addHelp(getClass().getResource("/jasmin/gui/resources/Welcome.htm"),"Welcome");  this.setExtendedState(this.getExtendedState() | Frame.MAXIMIZED_BOTH);  String lastpath=getProperty("lastpath");  if (lastpath != null) {    fileChooser.setSelectedFile(new File(lastpath));  }  jMenuItemUndo.setAccelerator(KeyStroke.getKeyStroke('Z',Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  jMenuItemRedo.setAccelerator(KeyStroke.getKeyStroke('R',Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  jMenuItem5.setAccelerator(KeyStroke.getKeyStroke('N',Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  jMenuItem3.setAccelerator(KeyStroke.getKeyStroke('O',Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  jMenuItem4.setAccelerator(KeyStroke.getKeyStroke('S',Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  jMenuItem13.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F5,0));  jMenuItem15.setAccelerator(KeyStroke.getKeyStroke('P',Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  jMenuItem16.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F7,0));  jMenuItem14.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F9,0));}  }
class C{  public static Point2D toAwtPoint(final Point p){  return new java.awt.Point(p.x,p.y);}  }
class C{  public static double[][] readHashFunctions() throws IOException {  return readHashFunctions(new FileInputStream(name));}  }
class C{  protected void uninstallDefaults(){  spinner.setLayout(null);}  }
class C{  public static void i(String tag,String msg){  i(tag,msg,null);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public boolean start(String file){  boolean ok=true;  try {    out=new BufferedOutputStream(new FileOutputStream(file));    ok=start(out);    closeStream=true;  } catch (  IOException e) {    ok=false;  }  return started=ok;}  }
class C{  public GridBoundedConcurrentLinkedHashSet(int max,int initCap){  this(max,initCap,DFLT_LOAD_FACTOR,DFLT_CONCUR_LVL);}  }
class C{  public void addDragOverListener(ActionListener l){  if (dragOverListener == null) {    dragOverListener=new EventDispatcher();  }  dragOverListener.addListener(l);}  }
class C{  public void unsubscribeToService(String subscriptionId) throws Exception {  subscriptionService.unsubscribeFromService(subscriptionId);}  }
class C{  public boolean contains(final Set<Holiday> holidays,final LocalDate date,final HolidayType holidayType){  return holidays.stream().anyMatch(null);}  }
class C{  public static DeleteServiceSession parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteServiceSession object=new DeleteServiceSession();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"deleteServiceSession".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DeleteServiceSession)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","subscriptionKey").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSubscriptionKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","sessionId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSessionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public void enqueueEvent(EnumListenerEvent operation,EntryEvent event,Object substituteValue) throws IOException, CacheException {  GatewaySenderEventImpl senderEvent=null;  boolean isPrimary=sender.isPrimary();  if (!isPrimary) {synchronized (unprocessedEventsLock) {      if (sender.isPrimary()) {        isPrimary=true;      } else {        senderEvent=new GatewaySenderEventImpl(operation,event,substituteValue,false);        handleSecondaryEvent(senderEvent);      }    }  }  if (isPrimary) {    Region region=event.getRegion();    boolean isPDXRegion=(region instanceof DistributedRegion && region.getName().equals(PeerTypeRegistration.REGION_NAME));    if (!isPDXRegion) {      waitForFailoverCompletion();    }    senderEvent=new GatewaySenderEventImpl(operation,event,substituteValue);    boolean queuedEvent=false;    try {      queuedEvent=queuePrimaryEvent(senderEvent);    }  finally {      if (!queuedEvent) {        GatewaySenderEventImpl.release(senderEvent);      }    }  }}  }
class C{  public void drawPath(Canvas canvas){  canvas.drawPath(path,fillPaint);  canvas.drawPath(path,strokePaint);}  }
class C{  public boolean next() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  private void fireRemoved(final RPObject object){  for (  final RPSlot slot : object.slots()) {    final String slotName=slot.getName();    for (    final RPObject sobject : slot) {      fireRemoved(object,slotName,sobject);    }  }  listener.onRemoved(object);  userListener.onRemoved(object);}  }
class C{  public static double logspaceAdd(double logx,double logy){  return Math.max(logx,logy) + Math.log1p(Math.exp(-Math.abs(logx - logy)));}  }
class C{  public static String calculateMD5(InputStream in) throws NoSuchAlgorithmException, IOException {  byte[] md5Bytes=calculateMD5Digest(in);  StringBuilder sb=new StringBuilder();  for (  byte md5Byte : md5Bytes)   sb.append(Integer.toString((md5Byte & 0xff) + 0x100,16).substring(1));  return sb.toString();}  }
class C{  public Matrix4x3d rotationZYX(double angleZ,double angleY,double angleX){  double cosZ=Math.cos(angleZ);  double sinZ=Math.sin(angleZ);  double cosY=Math.cos(angleY);  double sinY=Math.sin(angleY);  double cosX=Math.cos(angleX);  double sinX=Math.sin(angleX);  double m_sinZ=-sinZ;  double m_sinY=-sinY;  double m_sinX=-sinX;  double nm00=cosZ;  double nm01=sinZ;  double nm10=m_sinZ;  double nm11=cosZ;  double nm20=nm00 * sinY;  double nm21=nm01 * sinY;  double nm22=cosY;  m00=nm00 * cosY;  m01=nm01 * cosY;  m02=m_sinY;  m10=nm10 * cosX + nm20 * sinX;  m11=nm11 * cosX + nm21 * sinX;  m12=nm22 * sinX;  m20=nm10 * m_sinX + nm20 * cosX;  m21=nm11 * m_sinX + nm21 * cosX;  m22=nm22 * cosX;  m30=0.0;  m31=0.0;  m32=0.0;  properties=0;  return this;}  }
class C{  public void writeStream(Reader reader) throws IOException {  if (reader == null)   return;  char[] chars=chars();  int len;  while ((len=reader.read(chars,0,CHARS_LENGTH)) > 0) {    print(chars,0,len);  }}  }
class C{  void release(){  if (referenceCount.decrementAndGet() == 0) {    try {      file.close();    } catch (    IOException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public void resize(final int width,final int height,final boolean centerCamera){  stage.getViewport().update(width,height,centerCamera);}  }
class C{  public SyncActionInternet(final ConfAction params){  super(params);}  }
class C{  public static String normalize(CharSequence src,Form form){  return NativeNormalizer.normalize(src,form);}  }
class C{  public void testBoundedGenericMethods(){  assertLenghtOne(clazz.getTypeParameters());}  }
class C{  protected JvmMemManagerTableMeta createJvmMemManagerTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmMemManagerTableMetaImpl(mib,objectserver);}  }
class C{  public String mapFieldName(String owner,String name,String desc){  return name;}  }
class C{  public void parseQuotient(Vertex state,TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  ensureNext(':',stream);  float correctness=1.0f;  if (Character.isDigit(stream.peek())) {    String correctnessText=stream.upTo(':');    try {      correctness=Float.valueOf(correctnessText);    } catch (    NumberFormatException exception) {      throw new SelfParseException("Invalid correctness: " + correctnessText,stream);    }    ensureNext(':',stream);  }  Vertex value=parseElement(stream,elements,debug,network);  Relationship relationship=state.addWeakRelationship(Primitive.QUOTIENT,value,correctness);  stream.skipWhitespace();  if (stream.peek() == '{') {    Vertex meta=network.createMeta(relationship);    stream.skip();    String next=stream.nextWord();    while (!("}".equals(next))) {      if (next == null) {        throw new SelfParseException("Unexpected end of quotient, missing '}'",stream);      }      next=next.toLowerCase();      if (!(PREVIOUS.equals(next))) {        throw new SelfParseException("Unexpected word: '" + next + "' expected 'PREVIOUS'",stream);      }      ensureNext("is",stream);      boolean not=false;      next=stream.peekWord();      if (NOT.equals(next)) {        not=true;        stream.nextWord();      }      Vertex previous=parseElement(stream,elements,debug,network);      ensureNext(';',stream);      if (not) {        meta.removeRelationship(Primitive.PREVIOUS,previous);      } else {        meta.addRelationship(Primitive.PREVIOUS,previous);      }      next=stream.nextWord();    }  }  ensureNext(';',stream);}  }
class C{  public static void PacketBuilderTest() throws IOException, JdpException {{    JdpJmxPacket p1=new JdpJmxPacket(UUID.randomUUID(),"fake://unit-test");    p1.setMainClass("FakeUnitTest");    p1.setInstanceName(new String(russian_name,"UTF-8"));    byte[] b=p1.getPacketData();    JdpJmxPacket p2=new JdpJmxPacket(b);    JdpDoSomething.printJdpPacket(p1);    JdpDoSomething.compaireJdpPacketEx(p1,p2);  }{    JdpJmxPacket p1=new JdpJmxPacket(UUID.randomUUID(),"fake://unit-test");    p1.setMainClass("FakeUnitTest");    p1.setInstanceName(null);    byte[] b=p1.getPacketData();    JdpJmxPacket p2=new JdpJmxPacket(b);    JdpDoSomething.printJdpPacket(p1);    JdpDoSomething.compaireJdpPacketEx(p1,p2);  }  System.out.println("OK: Test passed");}  }
class C{  public static boolean ofType(int specific,int general){  if (general == specific) {    return true;  }switch (general) {case ANY:    return true;case NOT_EOF:  return specific >= UNKNOWN && specific <= SYNTH_VARIABLE_DECLARATION;case GENERAL_END_OF_STATEMENT:switch (specific) {case EOF:case NEWLINE:case SEMICOLON:  return true;}break;case ANY_END_OF_STATEMENT:switch (specific) {case EOF:case NEWLINE:case SEMICOLON:case RIGHT_CURLY_BRACE:return true;}break;case ASSIGNMENT_OPERATOR:return specific == EQUAL || (specific >= PLUS_EQUAL && specific <= POWER_EQUAL) || (specific >= LOGICAL_OR_EQUAL && specific <= LOGICAL_AND_EQUAL) || (specific >= LEFT_SHIFT_EQUAL && specific <= RIGHT_SHIFT_UNSIGNED_EQUAL) || (specific >= BITWISE_OR_EQUAL && specific <= BITWISE_XOR_EQUAL);case COMPARISON_OPERATOR:return specific >= COMPARE_NOT_EQUAL && specific <= COMPARE_TO;case MATH_OPERATOR:return (specific >= PLUS && specific <= RIGHT_SHIFT_UNSIGNED) || (specific >= NOT && specific <= LOGICAL_AND) || (specific >= BITWISE_OR && specific <= BITWISE_XOR);case LOGICAL_OPERATOR:return specific >= NOT && specific <= LOGICAL_AND;case BITWISE_OPERATOR:return (specific >= BITWISE_OR && specific <= BITWISE_XOR) || specific == BITWISE_NEGATION;case RANGE_OPERATOR:return specific == DOT_DOT || specific == DOT_DOT_DOT;case REGEX_COMPARISON_OPERATOR:return specific == FIND_REGEX || specific == MATCH_REGEX;case DEREFERENCE_OPERATOR:return specific == DOT || specific == NAVIGATE;case PREFIX_OPERATOR:switch (specific) {case MINUS:case PLUS_PLUS:case MINUS_MINUS:return true;}case PURE_PREFIX_OPERATOR:switch (specific) {case REGEX_PATTERN:case NOT:case PREFIX_PLUS:case PREFIX_PLUS_PLUS:case PREFIX_MINUS:case PREFIX_MINUS_MINUS:case SYNTH_CAST:return true;}break;case POSTFIX_OPERATOR:switch (specific) {case PLUS_PLUS:case POSTFIX_PLUS_PLUS:case MINUS_MINUS:case POSTFIX_MINUS_MINUS:return true;}break;case INFIX_OPERATOR:switch (specific) {case DOT:case NAVIGATE:case LOGICAL_OR:case LOGICAL_AND:case BITWISE_OR:case BITWISE_AND:case BITWISE_XOR:case LEFT_SHIFT:case RIGHT_SHIFT:case RIGHT_SHIFT_UNSIGNED:case FIND_REGEX:case MATCH_REGEX:case DOT_DOT:case DOT_DOT_DOT:case KEYWORD_INSTANCEOF:return true;}return (specific >= COMPARE_NOT_EQUAL && specific <= COMPARE_TO) || (specific >= PLUS && specific <= MOD_EQUAL) || specific == EQUAL || (specific >= PLUS_EQUAL && specific <= POWER_EQUAL) || (specific >= LOGICAL_OR_EQUAL && specific <= LOGICAL_AND_EQUAL) || (specific >= LEFT_SHIFT_EQUAL && specific <= RIGHT_SHIFT_UNSIGNED_EQUAL) || (specific >= BITWISE_OR_EQUAL && specific <= BITWISE_XOR_EQUAL);case PREFIX_OR_INFIX_OPERATOR:switch (specific) {case POWER:case PLUS:case MINUS:case PREFIX_PLUS:case PREFIX_MINUS:return true;}break;case KEYWORD:return specific >= KEYWORD_PRIVATE && specific <= KEYWORD_GOTO;case SYMBOL:return specific >= NEWLINE && specific <= PIPE;case LITERAL:return specific >= STRING && specific <= DECIMAL_NUMBER;case NUMBER:return specific == INTEGER_NUMBER || specific == DECIMAL_NUMBER;case SIGN:switch (specific) {case PLUS:case MINUS:return true;}break;case NAMED_VALUE:return specific >= KEYWORD_TRUE && specific <= KEYWORD_NULL;case TRUTH_VALUE:return specific == KEYWORD_TRUE || specific == KEYWORD_FALSE;case TYPE_NAME:if (specific == IDENTIFIER) {return true;}case PRIMITIVE_TYPE:return specific >= KEYWORD_VOID && specific <= KEYWORD_CHAR;case CREATABLE_TYPE_NAME:if (specific == IDENTIFIER) {return true;}case CREATABLE_PRIMITIVE_TYPE:return specific >= KEYWORD_BOOLEAN && specific <= KEYWORD_CHAR;case LOOP:switch (specific) {case KEYWORD_DO:case KEYWORD_WHILE:case KEYWORD_FOR:return true;}break;case RESERVED_KEYWORD:return specific >= KEYWORD_CONST && specific <= KEYWORD_GOTO;case KEYWORD_IDENTIFIER:switch (specific) {case KEYWORD_CLASS:case KEYWORD_INTERFACE:case KEYWORD_MIXIN:case KEYWORD_DEF:case KEYWORD_DEFMACRO:case KEYWORD_IN:case KEYWORD_PROPERTY:return true;}break;case SYNTHETIC:return specific >= SYNTH_COMPILATION_UNIT && specific <= SYNTH_VARIABLE_DECLARATION;case TYPE_DECLARATION:return specific >= KEYWORD_CLASS && specific <= KEYWORD_MIXIN;case DECLARATION_MODIFIER:return specific >= KEYWORD_PRIVATE && specific <= KEYWORD_STATIC;case MATCHED_CONTAINER:switch (specific) {case LEFT_CURLY_BRACE:case RIGHT_CURLY_BRACE:case LEFT_SQUARE_BRACKET:case RIGHT_SQUARE_BRACKET:case LEFT_PARENTHESIS:case RIGHT_PARENTHESIS:return true;}break;case LEFT_OF_MATCHED_CONTAINER:switch (specific) {case LEFT_CURLY_BRACE:case LEFT_SQUARE_BRACKET:case LEFT_PARENTHESIS:return true;}break;case RIGHT_OF_MATCHED_CONTAINER:switch (specific) {case RIGHT_CURLY_BRACE:case RIGHT_SQUARE_BRACKET:case RIGHT_PARENTHESIS:return true;}break;case PARAMETER_TERMINATORS:return specific == RIGHT_PARENTHESIS || specific == COMMA;case ARRAY_ITEM_TERMINATORS:return specific == RIGHT_SQUARE_BRACKET || specific == COMMA;case TYPE_LIST_TERMINATORS:switch (specific) {case KEYWORD_IMPLEMENTS:case KEYWORD_THROWS:case LEFT_CURLY_BRACE:case COMMA:return true;}break;case OPTIONAL_DATATYPE_FOLLOWERS:switch (specific) {case IDENTIFIER:case LEFT_SQUARE_BRACKET:case DOT:return true;}break;case SWITCH_BLOCK_TERMINATORS:if (specific == RIGHT_CURLY_BRACE) {return true;}case SWITCH_ENTRIES:return specific == KEYWORD_CASE || specific == KEYWORD_DEFAULT;case METHOD_CALL_STARTERS:if (specific >= STRING && specific <= DECIMAL_NUMBER) {return true;}switch (specific) {case LEFT_PARENTHESIS:case GSTRING_START:case SYNTH_GSTRING:case KEYWORD_NEW:return true;}break;case UNSAFE_OVER_NEWLINES:if (ofType(specific,SYMBOL)) {switch (specific) {case LEFT_CURLY_BRACE:case LEFT_PARENTHESIS:case LEFT_SQUARE_BRACKET:case PLUS:case PLUS_PLUS:case MINUS:case MINUS_MINUS:case REGEX_PATTERN:case NOT:return true;}return false;}switch (specific) {case KEYWORD_INSTANCEOF:case GSTRING_EXPRESSION_START:case GSTRING_EXPRESSION_END:case GSTRING_END:return false;}return true;case PRECLUDES_CAST_OPERATOR:switch (specific) {case PLUS:case MINUS:case PREFIX_MINUS:case PREFIX_MINUS_MINUS:case PREFIX_PLUS:case PREFIX_PLUS_PLUS:case LEFT_PARENTHESIS:return false;}return !ofType(specific,COMPLEX_EXPRESSION);case OPERATOR_EXPRESSION:return specific >= DOT && specific <= RIGHT_SHIFT_UNSIGNED;case SYNTH_EXPRESSION:switch (specific) {case SYNTH_CAST:case SYNTH_CLOSURE:case SYNTH_TERNARY:return true;}break;case KEYWORD_EXPRESSION:switch (specific) {case KEYWORD_NEW:case KEYWORD_THIS:case KEYWORD_SUPER:case KEYWORD_INSTANCEOF:case KEYWORD_TRUE:case KEYWORD_FALSE:case KEYWORD_NULL:return true;}break;case LITERAL_EXPRESSION:return specific >= STRING && specific <= DECIMAL_NUMBER;case ARRAY_EXPRESSION:return specific == LEFT_SQUARE_BRACKET;case EXPRESSION:if (specific >= DOT && specific <= RIGHT_SHIFT_UNSIGNED) {return true;}if (specific >= STRING && specific <= DECIMAL_NUMBER) {return true;}switch (specific) {case SYNTH_CAST:case SYNTH_CLOSURE:case SYNTH_TERNARY:case SYNTH_GSTRING:case KEYWORD_NEW:case KEYWORD_THIS:case KEYWORD_SUPER:case KEYWORD_INSTANCEOF:case KEYWORD_TRUE:case KEYWORD_FALSE:case KEYWORD_NULL:case LEFT_SQUARE_BRACKET:return true;}break;case COMPLEX_EXPRESSION:switch (specific) {case KEYWORD_NEW:case SYNTH_METHOD_CALL:case SYNTH_GSTRING:case SYNTH_LIST:case SYNTH_MAP:case SYNTH_CLOSURE:case SYNTH_TERNARY:case SYNTH_VARIABLE_DECLARATION:return true;}case SIMPLE_EXPRESSION:if (specific >= STRING && specific <= DECIMAL_NUMBER) {return true;}switch (specific) {case KEYWORD_SUPER:case KEYWORD_THIS:case KEYWORD_TRUE:case KEYWORD_FALSE:case KEYWORD_NULL:return true;}break;}return false;}  }
class C{  private Dimension layoutSize(Container target,boolean preferred){synchronized (target.getTreeLock()) {    int targetWidth=target.getSize().width;    if (targetWidth == 0)     targetWidth=Integer.MAX_VALUE;    int hgap=getHgap();    int vgap=getVgap();    Insets insets=target.getInsets();    int horizontalInsetsAndGap=insets.left + insets.right + (hgap * 2);    int maxWidth=targetWidth - horizontalInsetsAndGap;    Dimension dim=new Dimension(0,0);    int rowWidth=0;    int rowHeight=0;    int nmembers=target.getComponentCount();    for (int i=0; i < nmembers; i++) {      Component m=target.getComponent(i);      if (m.isVisible()) {        Dimension d=preferred ? m.getPreferredSize() : m.getMinimumSize();        if (rowWidth + d.width > maxWidth) {          addRow(dim,rowWidth,rowHeight);          rowWidth=0;          rowHeight=0;        }        if (rowWidth != 0) {          rowWidth+=hgap;        }        rowWidth+=d.width;        rowHeight=Math.max(rowHeight,d.height);      }    }    addRow(dim,rowWidth,rowHeight);    dim.width+=horizontalInsetsAndGap;    dim.height+=insets.top + insets.bottom + vgap * 2;    Container scrollPane=SwingUtilities.getAncestorOfClass(JScrollPane.class,target);    if (scrollPane != null && target.isValid()) {      dim.width-=(hgap + 1);    }    return dim;  }}  }
class C{  public static void main(String[] args){  TestOverridenMethodDocCopy tester=new TestOverridenMethodDocCopy();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  private void readObject(java.io.ObjectInputStream ois) throws IOException, ClassNotFoundException {  CertificateFactory cf;  Hashtable<String,CertificateFactory> cfs=null;  ois.defaultReadObject();  if (type == null)   throw new NullPointerException("type can't be null");  int size=ois.readInt();  if (size > 0) {    cfs=new Hashtable<String,CertificateFactory>(3);    this.certs=new java.security.cert.Certificate[size];  }  for (int i=0; i < size; i++) {    String certType=ois.readUTF();    if (cfs.containsKey(certType)) {      cf=cfs.get(certType);    } else {      try {        cf=CertificateFactory.getInstance(certType);      } catch (      CertificateException ce) {        throw new ClassNotFoundException("Certificate factory for " + certType + " not found");      }      cfs.put(certType,cf);    }    byte[] encoded=null;    try {      encoded=new byte[ois.readInt()];    } catch (    OutOfMemoryError oome) {      throw new IOException("Certificate too big");    }    ois.readFully(encoded);    ByteArrayInputStream bais=new ByteArrayInputStream(encoded);    try {      this.certs[i]=cf.generateCertificate(bais);    } catch (    CertificateException ce) {      throw new IOException(ce.getMessage());    }    bais.close();  }}  }
class C{  public DHCPBinding addIPv4ToDHCPPool(IPv4Address ip){  DHCPBinding binding=null;  if (this.getDHCPbindingFromIPv4(ip) == null) {    if (ip.getInt() < STARTING_ADDRESS.getInt()) {      STARTING_ADDRESS=ip;    }    binding=new DHCPBinding(ip,null);    DHCP_POOL.add(binding);    this.setPoolSize(this.getPoolSize() + 1);    this.setPoolFull(false);  }  return binding;}  }
class C{  public static X509Certificate[] orderX509CertChain(X509Certificate certs[]){  if (certs == null) {    return new X509Certificate[0];  }  if (certs.length <= 1) {    return certs;  }  ArrayList<ArrayList<X509Certificate>> paths=new ArrayList<ArrayList<X509Certificate>>();  for (int i=0; i < certs.length; i++) {    ArrayList<X509Certificate> path=new ArrayList<X509Certificate>();    X509Certificate issuerCert=certs[i];    path.add(issuerCert);    X509Certificate newIssuer=null;    while ((newIssuer=findIssuedCert(issuerCert,certs)) != null) {      issuerCert=newIssuer;      path.add(0,newIssuer);    }    paths.add(path);  }  ArrayList<X509Certificate> longestPath=paths.get(0);  for (int i=1; i < paths.size(); i++) {    ArrayList<X509Certificate> path=paths.get(i);    if (path.size() > longestPath.size()) {      longestPath=path;    }  }  return longestPath.toArray(new X509Certificate[longestPath.size()]);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.806 -0500",hash_original_method="BC4CCAAD8BAD8DFDC06067A6480767AA",hash_generated_method="70C567FF99FB51F3FA5DED8971A59CEA") private void launchIntent(Intent intent){  if (intent == null) {    return;  }  Log.d(LOG_TAG,"launching " + intent);  try {    Log.i(LOG_TAG,"Starting (as ourselves) " + intent.toUri(0));    getContext().startActivity(intent);    dismiss();  } catch (  RuntimeException ex) {    Log.e(LOG_TAG,"Failed launch activity: " + intent,ex);  }}  }
class C{  public boolean isRoleInRegionMembership(Role role){  checkReadiness();  return basicIsRoleInRegionMembership(role);}  }
class C{  protected void write(DataOutputStream stream) throws Exception {  stream.writeInt(data.length);  for (int i=0; i < data.length; i++)   stream.writeInt(data[i]);}  }
class C{  private static boolean isExternalStorageWritable(){  return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());}  }
class C{  public void init(int size,int columns,ColorPickerSwatch.OnColorSelectedListener listener){  mNumColumns=columns;  Resources res=getResources();  if (size == ColorPickerDialog.SIZE_LARGE) {    mSwatchLength=res.getDimensionPixelSize(R.dimen.color_swatch_large);    mMarginSize=res.getDimensionPixelSize(R.dimen.color_swatch_margins_large);  } else {    mSwatchLength=res.getDimensionPixelSize(R.dimen.color_swatch_small);    mMarginSize=res.getDimensionPixelSize(R.dimen.color_swatch_margins_small);  }  mOnColorSelectedListener=listener;  mDescription=res.getString(R.string.color_swatch_description);  mDescriptionSelected=res.getString(R.string.color_swatch_description_selected);}  }
class C{  public void buildClassifier(Instances instances) throws Exception {  getCapabilities().testWithFail(instances);  Instances trainData=new Instances(instances);  trainData.deleteWithMissingClass();  if (!(m_Classifier instanceof OptionHandler)) {    throw new IllegalArgumentException("Base classifier should be OptionHandler.");  }  m_InitOptions=((OptionHandler)m_Classifier).getOptions();  m_BestPerformance=-99;  m_NumAttributes=trainData.numAttributes();  Random random=new Random(m_Seed);  trainData.randomize(random);  m_TrainFoldSize=trainData.trainCV(m_NumFolds,0).numInstances();  if (m_CVParams.size() == 0) {    m_Classifier.buildClassifier(trainData);    m_BestClassifierOptions=m_InitOptions;    return;  }  if (trainData.classAttribute().isNominal()) {    trainData.stratify(m_NumFolds);  }  m_BestClassifierOptions=null;  m_ClassifierOptions=((OptionHandler)m_Classifier).getOptions();  for (int i=0; i < m_CVParams.size(); i++) {    Utils.getOption(((CVParameter)m_CVParams.elementAt(i)).m_ParamChar,m_ClassifierOptions);  }  findParamsByCrossValidation(0,trainData,random);  String[] options=(String[])m_BestClassifierOptions.clone();  ((OptionHandler)m_Classifier).setOptions(options);  m_Classifier.buildClassifier(trainData);}  }
class C{  public static synchronized void doDeferredSpecializations(){  if (specializationInProgress) {    return;  }  specializationInProgress=true;  Iterator<SpecializedMethod> methods=deferredMethods.iterator();  while (methods.hasNext()) {    SpecializedMethod m=methods.next();    if (m.getCompiledMethod() == null) {      m.compile();      registerCompiledMethod(m);    }    deferredMethods.remove(m);    methods=deferredMethods.iterator();  }  specializationInProgress=false;}  }
class C{  public float imaginaryAbsolute(){  return Math.abs(mRight);}  }
class C{  protected ItemBuilder(final ItemStack itemStack){  this.itemStack=itemStack.clone();}  }
class C{  public h1 removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  private void notifyRequestFinish(ResultType type,boolean outOfDate){  if (DEBUG) {    CLog.d(LOG_TAG,"%s, notifyRequestFinish: %s, %s",getCacheKey(),type,outOfDate);  }  if (mHasNotified) {    return;  }  mHasNotified=true;  mHandler.onCacheAbleRequestFinish(mCacheData,type,outOfDate);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredTypeAccessModifier: ");  result.append(declaredTypeAccessModifier);  result.append(", declaredProvidedByRuntime: ");  result.append(declaredProvidedByRuntime);  result.append(", dynamizable: ");  result.append(dynamizable);  result.append(", typingStrategy: ");  result.append(typingStrategy);  result.append(')');  return result.toString();}  }
class C{  public static boolean hasRoleInCluster(String[] dockerNames,String clusterId,String role){  String name=getFromDockerNames(dockerNames);  return hasRoleInCluster(name,clusterId,role);}  }
class C{  @Override public void F(final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.F()");  }  javascript.execute(formObj,PdfDictionary.F,ActionHandler.FOCUS_EVENT,' ');}  }
class C{  @Mod.EventHandler public void preInit(FMLPreInitializationEvent evt){  try {    DependencyInjectionEntryPoint diep=new DependencyInjectionEntryPoint();    diep.install(NetworkModule.class);    diep.install(SaveModule.class);    diep.install(TickerModule.class);    diep.install(LanguageModule.class);    diep.install(KeyModule.class);    diep.install(ClientModule.class);    diep.install(GameInfoModule.class);    diep.install(RenderModule.class);    diep.install(ComponentModule.class);    Set<Class<?>> modClasses=NovaMinecraftPreloader.modClasses;    proxy.registerResourcePacks(modClasses);    launcher=new NovaLauncher(diep,modClasses);    Game.inject(diep);    Game.natives().registerConverter(new DataWrapper());    Game.natives().registerConverter(new EntityConverter());    Game.natives().registerConverter(new BlockConverter());    Game.natives().registerConverter(new ItemConverter());    Game.natives().registerConverter(new WorldConverter());    Game.natives().registerConverter(new CuboidConverter());    Game.natives().registerConverter(new InventoryConverter());    Game.natives().registerConverter(new VectorConverter());    OreDictionaryIntegration.instance.registerOreDictionary();    MinecraftRecipeRegistry.instance.registerRecipes();    launcher.generateDependencies();    try {      for (      List<MavenDependency> dependencies : launcher.getNeededDeps().values()) {        for (        MavenDependency dep : dependencies) {          DepDownloader.downloadDepdency(dep.getDownloadURL(),FMLInjectionData.data()[6] + "/mods/" + dep.getPath());        }      }    } catch (    Exception e) {      e.printStackTrace();    }    launcher.load();    nativeConverters=Game.natives().getNativeConverters().stream().filter(null).map(null).collect(Collectors.toSet());    nativeConverters.stream().forEachOrdered(null);    Game.blocks().init();    Game.items().init();    Game.entities().init();    Game.render().init();    Game.language().init();    launcher.preInit();    proxy.preInit();    MinecraftForge.EVENT_BUS.register(new ForgeEventHandler());    FMLCommonHandler.instance().bus().register(new FMLEventHandler());    MinecraftForge.EVENT_BUS.register(Game.retention());  } catch (  Exception e) {    System.out.println("Error during preInit");    e.printStackTrace();    throw new InitializationException(e);  }}  }
class C{  @Override protected void initListeners(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void quit(){synchronized (LOCK) {    this.thread.quit();    this.thread=null;    this.handler=null;  }}  }
class C{  public void initializeFragments(Activity activity){  mStartMenuFragment=new StartMenuFragment();  activity.getFragmentManager().beginTransaction().add(R.id.container,mStartMenuFragment,START_MENU_TAG).addToBackStack(START_MENU_TAG).commit();  mStartMenuFragment.setRetainInstance(true);  mMissionSelectionFragment=new MissionSelectionFragment();  mMissionSelectionFragment.setRetainInstance(true);  mRunSpecificationsFragment=new RunSpecificationSelectionFragment();  mRunSpecificationsFragment.setRetainInstance(true);  mMusicSelectionFragment=new MusicSelectionFragment();  mMusicSelectionFragment.setRetainInstance(true);  mEndSummaryFragment=new EndSummaryFragment();  mEndSummaryFragment.setRetainInstance(true);  mFitnessDataDisplayFragment=new FitnessDataDisplayFragment();  mFitnessDataDisplayFragment.setRetainInstance(true);}  }
class C{  public void testBuildScenario_String(){  System.out.println("buildScenario with 1 Url");  String url="http://www.test.org";  String result=ScenarioBuilder.buildScenario(url);  String expResult="" + "{" + "\"seleniumVersion\":\"2\","+ "\"formatVersion\":1,"+ "\"steps\":"+ "["+ "{"+ "\"type\":\"get\","+ "\"url\":\"http://www.test.org\"}"+ "]"+ "}";  assertEquals(expResult,result);}  }
class C{  @SuppressWarnings("unchecked") @Test public void testStendhal(){  final String response=getWikiText("Stendhal");  if (response != null) {    final Matcher<String> henrimariebeyle=allOf(containsString("Marie"),containsString("Henri"),containsString("Beyle"));    assertThat("There should be named the french novelist for the topic Stendhal.",response,henrimariebeyle);  }}  }
class C{  public static int inRange(int[] a,int low,int high){  int count=0;  for (int i=0; i < a.length; i++) {    if (a[i] >= low && a[i] < high) {      count++;    }  }  return count;}  }
class C{  public static final byte[] deflate(byte[] in){  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(in.length / EXPECTED_COMPRESSION_RATIO);  DeflaterOutputStream outStream=new DeflaterOutputStream(byteOut);  try {    outStream.write(in);  } catch (  Exception e) {    LOG.error("Failed to implement outStream.write (input)",e);  }  try {    outStream.close();  } catch (  IOException e) {    LOG.error("Failed to implement outStream.close",e);  }  return byteOut.toByteArray();}  }
class C{  public static <T extends singleDetailPost>void routeSinglePage(final String route,final Activity ctx,final Class<T> clazz){  Intent n=new Intent(ctx,clazz);  final Bundle b=new Bundle();  b.putInt(singleDetailPost.Method,singleDetailPost.REQUEST_METHOD_FULL_URL);  b.putString(singleDetailPost.requestURL,route);  n.putExtras(b);  ctx.startActivityForResult(n,RESULTSINGLE);}  }
class C{  @Override public void validate(){  LOGGER.debug("Entered into validate, ModifyRsn: " + modifyRsn);  propertyModel.setBasicProperty(basicProp);  Date propCompletionDate=null;  if (!propTypeMstr.getType().equals(OWNERSHIP_TYPE_VAC_LAND_STR) && oldPropertyTypeCode.equals(OWNERSHIP_TYPE_VAC_LAND) && modifyRsn.equals(PROPERTY_MODIFY_REASON_ADD_OR_ALTER)) {    if (houseNo == null || houseNo.isEmpty()) {      addActionError(getText("mandatory.doorNo"));    }  }  if (basicProp.getSource() == SOURCEOFDATA_MIGRATION || basicProp.getSource() == SOURCEOFDATA_DATAENTRY) {    setOldProperty((PropertyImpl)getBasicProp().getProperty());    propCompletionDate=propertyTaxUtil.getLowestInstallmentForProperty(oldProperty);  }  validateProperty(propertyModel,areaOfPlot,dateOfCompletion,eastBoundary,westBoundary,southBoundary,northBoundary,propTypeId,null != basicProp.getPropertyID() ? String.valueOf(basicProp.getPropertyID().getZone().getId()) : "",propOccId,floorTypeId,roofTypeId,wallTypeId,woodTypeId,modifyRsn,propCompletionDate);  validateApproverDetails();  if (!propertyByEmployee) {    if (null != basicProp && null == propService.getUserPositionByZone(basicProp,false)) {      addActionError(getText("notexists.position"));    }  }  LOGGER.debug("Exiting from validate, BasicProperty: " + getBasicProp());}  }
class C{  public boolean isPortAdvanced(){  return false;}  }
class C{  public void next(){  set(this.interpolator.nextInterpolant());}  }
class C{  @Deactivate protected void deactivate(ComponentContext ctx){}  }
class C{  public boolean providesIdentifier(){  return false;}  }
class C{  public PointXy(int x,int y){  this.x=x;  this.y=y;}  }
class C{  public VaultConfig sslPemResource(final String classpathResource) throws VaultException {  try (final InputStream input=this.getClass().getResourceAsStream(classpathResource)){    this.sslPemUTF8=inputStreamToUTF8(input);  } catch (  IOException e) {    throw new VaultException(e);  }  return this;}  }
class C{  public String sqlObject_dropConstraint(String vendorName,String catalogName,String schemaName,String constraintName,String tableName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlObject_dropConstraint(catalogName,schemaName,constraintName,tableName);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.TESTED_PROJECTS__TESTED_PROJECTS:    return testedProjects != null && !testedProjects.isEmpty();}return super.eIsSet(featureID);}  }
class C{  void open(File dbfile) throws Exception {  this.open(dbfile,SQLiteOpenFlags.READWRITE | SQLiteOpenFlags.CREATE);}  }
class C{  public boolean interrupt(String fireInstanceId) throws UnableToInterruptJobException {  List<JobExecutionContext> jobs=getCurrentlyExecutingJobs();  Job job=null;  for (  JobExecutionContext jec : jobs) {    if (jec.getFireInstanceId().equals(fireInstanceId)) {      job=jec.getJobInstance();      if (job instanceof InterruptableJob) {        ((InterruptableJob)job).interrupt();        return true;      } else {        throw new UnableToInterruptJobException("Job " + jec.getJobDetail().getKey() + " can not be interrupted, since it does not implement "+ InterruptableJob.class.getName());      }    }  }  return false;}  }
class C{  public void valid() throws CertificateNotYetValidException, CertificateExpiredException {  Date now=new Date();  valid(now);}  }
class C{  @Override public String toString(){  return mTitle;}  }
class C{  public boolean isQueryCriteria(){  Object oo=get_Value(COLUMNNAME_IsQueryCriteria);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String toTimePrecision(final TimeUnit t){switch (t) {case HOURS:    return "h";case MINUTES:  return "m";case SECONDS:return "s";case MILLISECONDS:return "ms";case MICROSECONDS:return "u";case NANOSECONDS:return "n";default :EnumSet<TimeUnit> allowedTimeunits=EnumSet.of(TimeUnit.HOURS,TimeUnit.MINUTES,TimeUnit.SECONDS,TimeUnit.MILLISECONDS,TimeUnit.MICROSECONDS,TimeUnit.NANOSECONDS);throw new IllegalArgumentException("time precision must be one of:" + allowedTimeunits);}}  }
class C{  public static PolarPoint fromCartesian(Vec4 cartesianPoint){  if (cartesianPoint == null) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return PolarPoint.fromCartesian(cartesianPoint.x,cartesianPoint.y,cartesianPoint.z);}  }
class C{  private static boolean skipServerCertCrlChecking(){  boolean result=false;  try {    File file=new File("WstClientSkipServerCertCrlChecking");    if (file.exists() && file.isFile()) {      result=true;      log.warn(String.format("skipping CRL check for server cert because of existence of file: %s",file.getAbsolutePath()));    }  } catch (  Throwable e) {  }  return result;}  }
class C{  public CustomizedOsmNetworkReader(final Network network,final CoordinateTransformation transformation){  this(network,transformation,true);}  }
class C{  public Certificate engineGetCertificate(String alias){  if (alias == null) {    throw new IllegalArgumentException("null alias passed to getCertificate.");  }  Certificate c=(Certificate)certs.get(alias);  if (c == null) {    String id=(String)localIds.get(alias);    if (id != null) {      c=(Certificate)keyCerts.get(id);    } else {      c=(Certificate)keyCerts.get(alias);    }  }  return c;}  }
class C{  static void addQueryParams(Set<Entry<String,Object>> entrySet,StringBuilder buf){  boolean first=true;  for (  Map.Entry<String,Object> nameValueEntry : entrySet) {    Object value=nameValueEntry.getValue();    if (value != null) {      String name=CharEscapers.escapeUriQuery(nameValueEntry.getKey());      if (value instanceof Collection<?>) {        Collection<?> collectionValue=(Collection<?>)value;        for (        Object repeatedValue : collectionValue) {          first=appendParam(first,buf,name,repeatedValue);        }      } else {        first=appendParam(first,buf,name,value);      }    }  }}  }
class C{  @SuppressWarnings("rawtypes") @Override public boolean createFrom(final IScope scope,final List<Map<String,Object>> inits,final Integer max,final Object input,final Arguments init,final CreateStatement statement){  final GamaCSVFile source=(GamaCSVFile)input;  final IExpression header=statement.getHeader();  if (header != null) {    source.forceHeader(Cast.asBool(scope,header.value(scope)));  }  final boolean hasHeader=source.hasHeader();  final IMatrix<?> mat=source.getContents(scope);  if (mat == null || mat.isEmpty(scope)) {    return false;  }  int rows=mat.getRows(scope);  final int cols=mat.getCols(scope);  rows=max == null ? rows : CmnFastMath.min(rows,max);  List<String> headers;  if (hasHeader) {    headers=source.getAttributes(scope);  } else {    headers=new ArrayList<String>();    for (int j=0; j < cols; j++) {      headers.add(String.valueOf(j));    }  }  for (int i=0; i < rows; i++) {    final Map<String,Object> map=GamaMapFactory.create(hasHeader ? Types.STRING : Types.INT,Types.NO_TYPE);    final IList vals=mat.getRow(scope,i);    for (int j=0; j < cols; j++) {      map.put(headers.get(j),vals.get(j));    }    statement.fillWithUserInit(scope,map);    inits.add(map);  }  return true;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:43.493 -0500",hash_original_method="8F06EBB42FF76B1717D428E4F6418D97",hash_generated_method="E1898FD7C9E27045498EAA45738EDD9A") public OverScroller(Context context,Interpolator interpolator,boolean flywheel){  mInterpolator=interpolator;  mFlywheel=flywheel;  mScrollerX=new SplineOverScroller();  mScrollerY=new SplineOverScroller();  SplineOverScroller.initFromContext(context);}  }
class C{  @NonNull public static Animator fadeIn(){  return alpha(1);}  }
class C{  public static void finishFragement(Activity activity,String... names){  FragmentManager manager=activity.getFragmentManager();  int length=names.length;  for (int i=0; i < length; i++) {    String name=names[i];    manager.popBackStack(name,FragmentManager.POP_BACK_STACK_INCLUSIVE);  }  FragmentTransaction transaction=manager.beginTransaction();  for (int i=0; i < length; i++) {    String name=names[i];    Fragment fragment=manager.findFragmentByTag(name);    transaction.remove(fragment);  }  transaction.commit();}  }
class C{  public final boolean isWatchingFor(@NonNull ActEvent event){  return isWatchingFor(event.getEventKey());}  }
class C{  protected Set<Future<Void>> send(String channelId,Object message){  Collection<Session> sessions=(channelId != null) ? socketSessions.get(channelId) : null;  if (sessions != null && !sessions.isEmpty()) {    Set<Future<Void>> results=new HashSet<>(sessions.size());    String json=Json.encode(message);    for (    Session session : sessions) {      if (session.isOpen()) {        send(session,json,results);      }    }    return results;  }  return emptySet();}  }
class C{  public Builder customProperties(List<Property> properties){  customProperties=properties;  return this;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="OBL_UNSATISFIED_OBLIGATION") public static void cp(String src,String dst) throws Exception {  FileInputStream srcfis=new FileInputStream(src);  FileOutputStream dstfos=new FileOutputStream(dst);  try {    cpStream(srcfis,dstfos);  }  finally {    if (srcfis != null)     srcfis.close();    if (dstfos != null)     dstfos.close();  }}  }
class C{  public void publishX2(final ClusterState clusterState){  this.discovery.publishX2(clusterState);}  }
class C{  int send5Baud(int address) throws IOException {  int result=0;  setProtStat(ProtStatus.CONNECTING);  sendByte5Baud(address);  message="";  return (result);}  }
class C{  public GeneratorPropertyIteratorPanel(Experiment exp){  this();  setExperiment(exp);}  }
class C{  private static String matchablePath(String path){  if (path == null) {    return "/";  } else   if (path.endsWith("/")) {    return path;  } else {    return path + "/";  }}  }
class C{  protected void restorePropertySourceInEnvironment() throws Exception {  if (propertySourceHoldingLocation == null) {    throw new Exception("Reloadable property source hasn't yet been removed so it can not be re-added.");  }  MutablePropertySources mutablePropertySources=getMutablePropertySources();  mutablePropertySources.remove(OVERRIDE_PROPERTY_SOURCE_MAP_NAME);  getMutablePropertySources().addLast(propertySourceHoldingLocation);  propertySourceHoldingLocation=null;}  }
class C{  protected void initializeAutoscrolling(Point p){  if (component == null || !(component instanceof Autoscroll))   return;  autoScroller=createDropTargetAutoScroller(component,p);}  }
class C{  public TimeOfDay(int hour,int minute,int second){  this.hour=hour;  this.minute=minute;  this.second=second;  validate();}  }
class C{  public static void stop() throws Exception {  if (uiActorSystem != null) {    uiActorSystem.stop();  }  if (jobManager != null) {    jobManager.stop();  }}  }
class C{  public static <F>Stream<F> read(String path,Parser<F> fp) throws IOException {  return read(new FileInputStream(path),fp);}  }
class C{  public AllConnectionsInUseException(){}  }
class C{  public boolean isTextElement(){  return textElement;}  }
class C{  public void doRenderGravityBlock(EntityFlyingBlock entity,double x,double y,double z,float par8,float par9){  GL11.glPushMatrix();  GL11.glTranslatef((float)x,(float)y,(float)z);  RenderUtils.setTerrainTexture();  Block block=entity.block;  World world=entity.worldObj;  GL11.glDisable(GL11.GL_LIGHTING);  GL11.glRotatef(entity.rotationPitch,0.0F,0.0F,1.0F);  GL11.glRotatef(entity.rotationYaw,0.0F,1.0F,0.0F);  this.renderer.blockAccess=world;  this.renderer.setRenderBoundsFromBlock(block);  if (block == Blocks.dragon_egg || block == Blocks.grass || block == Blocks.fence || block == Blocks.wheat || block == Blocks.leaves || block == Blocks.redstone_torch || block == Blocks.torch || block == Blocks.grass || block == Blocks.vine || block == Blocks.log || block == Blocks.bookshelf || block == Blocks.pumpkin) {    Tessellator tessellator=Tessellator.instance;    tessellator.startDrawingQuads();    tessellator.setTranslation((-MathHelper.floor_double(entity.posX)) - 0.5F,(-MathHelper.floor_double(entity.posY)) - 0.5F,(-MathHelper.floor_double(entity.posZ)) - 0.5F);    this.renderer.renderBlockByRenderType(block,MathHelper.floor_double(entity.posX),MathHelper.floor_double(entity.posY),MathHelper.floor_double(entity.posZ));    tessellator.setTranslation(0.0D,0.0D,0.0D);    tessellator.draw();  } else {    this.renderBlockGravity(block,entity.metadata,this.renderer);  }  GL11.glEnable(GL11.GL_LIGHTING);  GL11.glPopMatrix();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testBAandBCbrokerNetwork() throws Exception {  bridgeBrokers("BrokerB","BrokerA");  bridgeBrokers("BrokerB","BrokerC");  startAllBrokers();  Destination dest=createDestination("TEST.FOO",true);  MessageConsumer clientA=createConsumer("BrokerA",dest);  MessageConsumer clientB=createConsumer("BrokerB",dest);  MessageConsumer clientC=createConsumer("BrokerC",dest);  Thread.sleep(2000);  sendMessages("BrokerA",dest,MESSAGE_COUNT);  sendMessages("BrokerB",dest,MESSAGE_COUNT);  sendMessages("BrokerC",dest,MESSAGE_COUNT);  MessageIdList msgsA=getConsumerMessages("BrokerA",clientA);  MessageIdList msgsB=getConsumerMessages("BrokerB",clientB);  MessageIdList msgsC=getConsumerMessages("BrokerC",clientC);  msgsA.waitForMessagesToArrive(MESSAGE_COUNT * 2);  msgsB.waitForMessagesToArrive(MESSAGE_COUNT);  msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 2);  assertEquals(MESSAGE_COUNT * 2,msgsA.getMessageCount());  assertEquals(MESSAGE_COUNT,msgsB.getMessageCount());  assertEquals(MESSAGE_COUNT * 2,msgsC.getMessageCount());}  }
class C{  protected boolean requestSchedulerService(Command command,byte[] data){  String endpoint=getCommandEndpoint(schedulerHttpEndpoint,command);  final HttpURLConnection connection=NetworkUtils.getHttpConnection(endpoint);  if (connection == null) {    LOG.severe("Scheduler not found.");    return false;  }  try {    if (!NetworkUtils.sendHttpPostRequest(connection,NetworkUtils.URL_ENCODE_TYPE,data)) {      LOG.log(Level.SEVERE,"Failed to send http request to scheduler");      return false;    }    Common.StatusCode statusCode;    LOG.fine("Receiving response from scheduler...");    try {      statusCode=Scheduler.SchedulerResponse.newBuilder().mergeFrom(NetworkUtils.readHttpResponse(connection)).build().getStatus().getStatus();    } catch (    InvalidProtocolBufferException e) {      LOG.log(Level.SEVERE,"Failed to parse response",e);      return false;    }    if (!statusCode.equals(Common.StatusCode.OK)) {      LOG.severe("Received not OK response from scheduler");      return false;    }  }  finally {    connection.disconnect();  }  return true;}  }
class C{  public static Weather build(WeatherEntity entity){  Weather w=new Weather();  w.base=new Base();  w.base.location=entity.location;  w.base.refreshTime=entity.refreshTime;  w.base.date=entity.date;  w.base.moon=entity.moon;  w.base.week=entity.week;  w.live=new Live();  w.live.weather=entity.weatherNow;  w.live.temp=entity.tempNow;  w.live.air=entity.airNow;  w.live.windDir=entity.windDirNow;  w.live.windLevel=entity.windLevelNow;  w.dailyList=new ArrayList<>();  Daily dailies_1=new Daily();  dailies_1.date=entity.dates_1;  dailies_1.week=entity.weeks_1;  dailies_1.weathers=new String[]{entity.dayWeathers_1,entity.nightWeathers_1};  dailies_1.temps=new int[]{entity.dayTemps_1,entity.nightTemps_1};  dailies_1.windDirs=new String[]{entity.dayWindDirs_1,entity.nightWindDirs_1};  dailies_1.windLevels=new String[]{entity.dayWindLevels_1,entity.nightWindLevels_1};  dailies_1.exchangeTimes=new String[]{entity.dayExchangeTimes_1,entity.nightExchangeTimes_1};  w.dailyList.add(dailies_1);  Daily dailies_2=new Daily();  dailies_2.date=entity.dates_2;  dailies_2.week=entity.weeks_2;  dailies_2.weathers=new String[]{entity.dayWeathers_2,entity.nightWeathers_2};  dailies_2.temps=new int[]{entity.dayTemps_2,entity.nightTemps_2};  dailies_2.windDirs=new String[]{entity.dayWindDirs_2,entity.nightWindDirs_2};  dailies_2.windLevels=new String[]{entity.dayWindLevels_2,entity.nightWindLevels_2};  dailies_2.exchangeTimes=new String[]{entity.dayExchangeTimes_2,entity.nightExchangeTimes_2};  w.dailyList.add(dailies_2);  Daily dailies_3=new Daily();  dailies_3.date=entity.dates_3;  dailies_3.week=entity.weeks_3;  dailies_3.weathers=new String[]{entity.dayWeathers_3,entity.nightWeathers_3};  dailies_3.temps=new int[]{entity.dayTemps_3,entity.nightTemps_3};  dailies_3.windDirs=new String[]{entity.dayWindDirs_3,entity.nightWindDirs_3};  dailies_3.windLevels=new String[]{entity.dayWindLevels_3,entity.nightWindLevels_3};  dailies_3.exchangeTimes=new String[]{entity.dayExchangeTimes_3,entity.nightExchangeTimes_3};  w.dailyList.add(dailies_3);  Daily dailies_4=new Daily();  dailies_4.date=entity.dates_4;  dailies_4.week=entity.weeks_4;  dailies_4.weathers=new String[]{entity.dayWeathers_4,entity.nightWeathers_4};  dailies_4.temps=new int[]{entity.dayTemps_4,entity.nightTemps_4};  dailies_4.windDirs=new String[]{entity.dayWindDirs_4,entity.nightWindDirs_4};  dailies_4.windLevels=new String[]{entity.dayWindLevels_4,entity.nightWindLevels_4};  dailies_4.exchangeTimes=new String[]{entity.dayExchangeTimes_4,entity.nightExchangeTimes_4};  w.dailyList.add(dailies_4);  Daily dailies_5=new Daily();  dailies_5.date=entity.dates_5;  dailies_5.week=entity.weeks_5;  dailies_5.weathers=new String[]{entity.dayWeathers_5,entity.nightWeathers_5};  dailies_5.temps=new int[]{entity.dayTemps_5,entity.nightTemps_5};  dailies_5.windDirs=new String[]{entity.dayWindDirs_5,entity.nightWindDirs_5};  dailies_5.windLevels=new String[]{entity.dayWindLevels_5,entity.nightWindLevels_5};  dailies_5.exchangeTimes=new String[]{entity.dayExchangeTimes_5,entity.nightExchangeTimes_5};  w.dailyList.add(dailies_5);  w.hourlyList=new ArrayList<>();  Hourly hourlies_1=new Hourly();  hourlies_1.hour=entity.hours_1;  hourlies_1.temp=entity.hourlyTemps_1;  hourlies_1.pop=entity.hourlyPops_1;  w.hourlyList.add(hourlies_1);  Hourly hourlies_2=new Hourly();  hourlies_2.hour=entity.hours_2;  hourlies_2.temp=entity.hourlyTemps_2;  hourlies_2.pop=entity.hourlyPops_2;  w.hourlyList.add(hourlies_2);  Hourly hourlies_3=new Hourly();  hourlies_3.hour=entity.hours_3;  hourlies_3.temp=entity.hourlyTemps_3;  hourlies_3.pop=entity.hourlyPops_3;  w.hourlyList.add(hourlies_3);  Hourly hourlies_4=new Hourly();  hourlies_4.hour=entity.hours_4;  hourlies_4.temp=entity.hourlyTemps_4;  hourlies_4.pop=entity.hourlyPops_4;  w.hourlyList.add(hourlies_4);  Hourly hourlies_5=new Hourly();  hourlies_5.hour=entity.hours_5;  hourlies_5.temp=entity.hourlyTemps_5;  hourlies_5.pop=entity.hourlyPops_5;  w.hourlyList.add(hourlies_5);  Hourly hourlies_6=new Hourly();  hourlies_6.hour=entity.hours_6;  hourlies_6.temp=entity.hourlyTemps_6;  hourlies_6.pop=entity.hourlyPops_6;  w.hourlyList.add(hourlies_6);  Hourly hourlies_7=new Hourly();  hourlies_7.hour=entity.hours_7;  hourlies_7.temp=entity.hourlyTemps_7;  hourlies_7.pop=entity.hourlyPops_7;  w.hourlyList.add(hourlies_7);  Hourly hourlies_8=new Hourly();  hourlies_8.hour=entity.hours_8;  hourlies_8.temp=entity.hourlyTemps_8;  hourlies_8.pop=entity.hourlyPops_8;  w.hourlyList.add(hourlies_8);  w.life=new Life();  w.life.winds=new String[]{entity.winds_1,entity.winds_2};  w.life.pms=new String[]{entity.pms_1,entity.pms_2};  w.life.hums=new String[]{entity.hums_1,entity.hums_2};  w.life.uvs=new String[]{entity.uvs_1,entity.uvs_2};  w.life.dresses=new String[]{entity.dresses_1,entity.dresses_2};  w.life.colds=new String[]{entity.colds_1,entity.colds_2};  w.life.airs=new String[]{entity.airs_1,entity.airs_2};  w.life.washCars=new String[]{entity.washCars_1,entity.washCars_2};  w.life.sports=new String[]{entity.sports_1,entity.sports_2};  return w;}  }
class C{  public ImageException(String message,Reason reason){  super(message);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.name());}  }
class C{  private boolean isQuote(final char[] srcChars,final int pos,final int len,final int quoteStart,final int quoteLen){  for (int i=0; i < quoteLen; i++) {    if (pos + i >= len || srcChars[pos + i] != srcChars[quoteStart + i]) {      return false;    }  }  return true;}  }
class C{  public List<String> onRead(ProjectState project,List<String> values){  return values;}  }
class C{  public boolean isUseDefaultBootstrap(){  return useDefaultBootstrap;}  }
class C{  public void stop(){  if (readerFuture == null) {    return;  }  readerFuture.cancel(true);  readService.shutdownNow();  if (process != null) {    process.destroy();    process=null;    is=null;  }  readerFuture=null;}  }
class C{  boolean fetchLatestIndex(final SolrCore core,boolean forceReplication) throws IOException, InterruptedException {  successfulInstall=false;  replicationStartTime=System.currentTimeMillis();  Directory tmpIndexDir=null;  String tmpIndex=null;  Directory indexDir=null;  String indexDirPath=null;  boolean deleteTmpIdxDir=true;  try {    NamedList response=null;    try {      response=getLatestVersion();    } catch (    Exception e) {      LOG.error("Master at: " + masterUrl + " is not available. Index fetch failed. Exception: "+ e.getMessage());      return false;    }    long latestVersion=(Long)response.get(CMD_INDEX_VERSION);    long latestGeneration=(Long)response.get(GENERATION);    IndexCommit commit=core.getDeletionPolicy().getLatestCommit();    if (commit == null) {      RefCounted<SolrIndexSearcher> searcherRefCounted=null;      try {        searcherRefCounted=core.getNewestSearcher(false);        if (searcherRefCounted == null) {          LOG.warn("No open searcher found - fetch aborted");          return false;        }        commit=searcherRefCounted.get().getIndexReader().getIndexCommit();      }  finally {        if (searcherRefCounted != null)         searcherRefCounted.decref();      }    }    if (latestVersion == 0L) {      if (forceReplication && commit.getGeneration() != 0) {        RefCounted<IndexWriter> iw=core.getUpdateHandler().getSolrCoreState().getIndexWriter(core);        try {          iw.get().deleteAll();        }  finally {          iw.decref();        }        SolrQueryRequest req=new LocalSolrQueryRequest(core,new ModifiableSolrParams());        core.getUpdateHandler().commit(new CommitUpdateCommand(req,false));      }      successfulInstall=true;      return true;    }    if (!forceReplication && IndexDeletionPolicyWrapper.getCommitTimestamp(commit) == latestVersion) {      LOG.info("Slave in sync with master.");      successfulInstall=true;      return true;    }    LOG.info("Master's generation: " + latestGeneration);    LOG.info("Slave's generation: " + commit.getGeneration());    LOG.info("Starting replication process");    fetchFileList(latestGeneration);    if (filesToDownload.isEmpty())     return false;    LOG.info("Number of files in latest index in master: " + filesToDownload.size());    fsyncService=Executors.newSingleThreadExecutor(new DefaultSolrThreadFactory("fsyncService"));    filesDownloaded=Collections.synchronizedList(new ArrayList<Map<String,Object>>());    boolean isFullCopyNeeded=IndexDeletionPolicyWrapper.getCommitTimestamp(commit) >= latestVersion || commit.getGeneration() >= latestGeneration || forceReplication;    String tmpIdxDirName="index." + new SimpleDateFormat(SnapShooter.DATE_FMT,Locale.ROOT).format(new Date());    tmpIndex=createTempindexDir(core,tmpIdxDirName);    tmpIndexDir=core.getDirectoryFactory().get(tmpIndex,DirContext.DEFAULT,core.getSolrConfig().indexConfig.lockType);    indexDirPath=core.getIndexDir();    indexDir=core.getDirectoryFactory().get(indexDirPath,DirContext.DEFAULT,core.getSolrConfig().indexConfig.lockType);    try {      if (isIndexStale(indexDir)) {        isFullCopyNeeded=true;      }      if (!isFullCopyNeeded) {        solrCore.getUpdateHandler().getSolrCoreState().closeIndexWriter(core,true);      }      boolean reloadCore=false;      try {        LOG.info("Starting download to " + tmpIndexDir + " fullCopy="+ isFullCopyNeeded);        successfulInstall=false;        downloadIndexFiles(isFullCopyNeeded,indexDir,tmpIndexDir,latestGeneration);        LOG.info("Total time taken for download : " + ((System.currentTimeMillis() - replicationStartTime) / 1000) + " secs");        Collection<Map<String,Object>> modifiedConfFiles=getModifiedConfFiles(confFilesToDownload);        if (!modifiedConfFiles.isEmpty()) {          downloadConfFiles(confFilesToDownload,latestGeneration);          if (isFullCopyNeeded) {            successfulInstall=modifyIndexProps(tmpIdxDirName);            deleteTmpIdxDir=false;          } else {            successfulInstall=moveIndexFiles(tmpIndexDir,indexDir);          }          if (successfulInstall) {            if (isFullCopyNeeded) {              if (indexDir != null) {                LOG.info("removing old index directory " + indexDir);                core.getDirectoryFactory().doneWithDirectory(indexDir);                core.getDirectoryFactory().remove(indexDir);              }            }            LOG.info("Configuration files are modified, core will be reloaded");            logReplicationTimeAndConfFiles(modifiedConfFiles,successfulInstall);            reloadCore=true;          }        } else {          terminateAndWaitFsyncService();          if (isFullCopyNeeded) {            successfulInstall=modifyIndexProps(tmpIdxDirName);            deleteTmpIdxDir=false;          } else {            successfulInstall=moveIndexFiles(tmpIndexDir,indexDir);          }          if (successfulInstall) {            logReplicationTimeAndConfFiles(modifiedConfFiles,successfulInstall);          }        }      }  finally {        if (!isFullCopyNeeded) {          solrCore.getUpdateHandler().getSolrCoreState().openIndexWriter(core);        }      }      if (reloadCore) {        reloadCore();      }      if (successfulInstall) {        if (isFullCopyNeeded) {          if (indexDir != null) {            LOG.info("removing old index directory " + indexDir);            core.getDirectoryFactory().doneWithDirectory(indexDir);            core.getDirectoryFactory().remove(indexDir);          }        }        if (isFullCopyNeeded) {          solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);        }        openNewSearcherAndUpdateCommitPoint(isFullCopyNeeded);      }      replicationStartTime=0;      return successfulInstall;    } catch (    ReplicationHandlerException e) {      LOG.error("User aborted Replication");      return false;    }catch (    SolrException e) {      throw e;    }catch (    InterruptedException e) {      throw new InterruptedException("Index fetch interrupted");    }catch (    Exception e) {      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Index fetch failed : ",e);    }  }  finally {    try {      if (!successfulInstall) {        logReplicationTimeAndConfFiles(null,successfulInstall);      }      filesToDownload=filesDownloaded=confFilesDownloaded=confFilesToDownload=null;      replicationStartTime=0;      dirFileFetcher=null;      localFileFetcher=null;      if (fsyncService != null && !fsyncService.isShutdown())       fsyncService.shutdownNow();      fsyncService=null;      stop=false;      fsyncException=null;    }  finally {      if (deleteTmpIdxDir && tmpIndexDir != null) {        try {          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);          core.getDirectoryFactory().remove(tmpIndexDir);        } catch (        IOException e) {          SolrException.log(LOG,"Error removing directory " + tmpIndexDir,e);        }      }      if (tmpIndexDir != null) {        core.getDirectoryFactory().release(tmpIndexDir);      }      if (indexDir != null) {        core.getDirectoryFactory().release(indexDir);      }    }  }}  }
class C{  @Override protected long lengthOfData() throws IOException {  LOG.trace("enter lengthOfData()");  return getContent().length;}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  resolvePrefixTables();  ElemTemplateElement t=getFirstChildElem();  m_hasTextLitOnly=((t != null) && (t.getXSLToken() == Constants.ELEMNAME_TEXTLITERALRESULT) && (t.getNextSiblingElem() == null));  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  cstate.pushStackMark();}  }
class C{  void generateLeafNode(int par1,int par2,int par3){  int var4=par2;  for (int var5=par2 + this.leafDistanceLimit; var4 < var5; ++var4) {    float var6=this.leafSize(var4 - par2);    this.genTreeLayer(par1,var4,par3,var6,(byte)1,Blocks.leaves);  }}  }
class C{  public BigDecimal encrypt(BigDecimal value){  return value;}  }
class C{  public static double linear(double a,double b){  return -b / a;}  }
class C{  public DrmInfoEvent(int uniqueId,int type,String message,HashMap<String,Object> attributes){  super(uniqueId,type,message,attributes);  checkTypeValidity(type);}  }
class C{  public synchronized void waitForResponse(){  try {    if (receivedResponses.size() == 0)     wait(50);  } catch (  InterruptedException e) {  }}  }
class C{  protected void addGraphic(EsriGraphicList egl,OMGraphic graphic,List<Object> record){  egl.add(graphic);  DbfTableModel dtm=egl.getTable();  if (dtm != null && record != null) {    dtm.addRecord(record);  }}  }
class C{  @Override public void datasetChanged(DatasetChangeEvent event){  this.lastEvent=event;}  }
class C{  public void add(double x,double y){  xStats.add(x);  if (isFinite(x) && isFinite(y)) {    if (xStats.count() > 1) {      sumOfProductsOfDeltas+=(x - xStats.mean()) * (y - yStats.mean());    }  } else {    sumOfProductsOfDeltas=NaN;  }  yStats.add(y);}  }
class C{  private void signalNotEmpty(){  final ReentrantLock takeLock=this.takeLock;  takeLock.lock();  try {    notEmpty.signal();  }  finally {    takeLock.unlock();  }}  }
class C{  public <K2,V2>JavaPairRDD<Tuple2<K,V>,Option<V2>> outerJoinGeodeRegion(String regionPath,Function<Tuple2<K,V>,K2> func){  return outerJoinGeodeRegion(regionPath,func,rddf.defaultConnectionConf());}  }
class C{  public static boolean isNodeAfter(Node node1,Node node2){  if (node1 instanceof DOMOrder && node2 instanceof DOMOrder) {    int index1=((DOMOrder)node1).getUid();    int index2=((DOMOrder)node2).getUid();    return index1 <= index2;  } else {    return DOMHelper.isNodeAfter(node1,node2);  }}  }
class C{  public static double toDoublePow2(long m,int n){  if (m == 0)   return 0.0;  if (m == Long.MIN_VALUE)   return toDoublePow2(Long.MIN_VALUE >> 1,n + 1);  if (m < 0)   return -toDoublePow2(-m,n);  int bitLength=MathLib.bitLength(m);  int shift=bitLength - 53;  long exp=1023L + 52 + n+ shift;  if (exp >= 0x7FF)   return Double.POSITIVE_INFINITY;  if (exp <= 0) {    if (exp <= -54)     return 0.0;    return toDoublePow2(m,n + 54) / 18014398509481984L;  }  long bits=(shift > 0) ? (m >> shift) + ((m >> (shift - 1)) & 1) : m << -shift;  if (((bits >> 52) != 1) && (++exp >= 0x7FF))   return Double.POSITIVE_INFINITY;  bits&=0x000fffffffffffffL;  bits|=exp << 52;  return Double.longBitsToDouble(bits);}  }
class C{  public static TrapCodeOperand MustImplement(){  return new TrapCodeOperand((byte)RuntimeEntrypoints.TRAP_MUST_IMPLEMENT);}  }
class C{  public static Toast quickToast(Context context,String message){  return quickToast(context,message,false);}  }
class C{  @Override public void ignorableWhitespace(char[] chars,int offset,int length) throws SAXException {  characters(chars,offset,length);}  }
class C{  public DefaultTetradLoggerConfig(String... events){  this.events=new ArrayList<>(events.length);  this.active=new HashSet<>();  for (  String event : events) {    this.events.add(new DefaultEvent(event,"No Description"));    this.active.add(event);  }}  }
class C{  public static boolean isDot(char character){  boolean isWhitespace=String.valueOf(character).matches("\\.");  return isWhitespace;}  }
class C{  private static JsonToken createToken(final String userId) throws InvalidKeyException {  Calendar cal=Calendar.getInstance();  HmacSHA256Signer signer=new HmacSHA256Signer(BackendConstants.TOKEN_ISSUER,null,BackendConstants.SIGNING_KEY.getBytes());  JsonToken token=new JsonToken(signer);  token.setAudience(BackendConstants.TOKEN_ISSUER);  token.setParam("typ","abelana/auth/v1");  token.setIssuedAt(new org.joda.time.Instant(cal.getTimeInMillis()));  token.setExpiration(new org.joda.time.Instant(cal.getTimeInMillis() + BackendConstants.JWT_EXPIRATION_DURATION));  JsonObject user=new JsonObject();  user.addProperty("user_id",userId);  JsonObject payload=token.getPayloadAsJsonObject();  payload.add("user",user);  return token;}  }
class C{  public String error(String msg,Object... params){  if (level.intValue() < Level.SEVERE.intValue())   return (NO_MESSAGE);  return (format(msg,params));}  }
class C{  private void writePacketOutForPacketIn(IOFSwitch sw,OFPacketIn packetInMessage,OFPort egressPort){  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  pob.setBufferId(packetInMessage.getBufferId());  pob.setInPort(packetInMessage.getVersion().compareTo(OFVersion.OF_12) < 0 ? packetInMessage.getInPort() : packetInMessage.getMatch().get(MatchField.IN_PORT));  List<OFAction> actions=new ArrayList<OFAction>(1);  actions.add(sw.getOFFactory().actions().buildOutput().setPort(egressPort).setMaxLen(Integer.MAX_VALUE).build());  pob.setActions(actions);  if (packetInMessage.getBufferId() == OFBufferId.NO_BUFFER) {    byte[] packetData=packetInMessage.getData();    pob.setData(packetData);  }  counterPacketOut.increment();  sw.write(pob.build());}  }
class C{  public ExceptionCode createSequencedCode(int sequence){  ExceptionCode newExceptionCode;  if (null == m_fieldRef) {    newExceptionCode=this;  } else {    newExceptionCode=new ExceptionCode(m_code,m_fieldRef + FIELD_SEQUENCE_SEPARATOR + sequence);  }  return newExceptionCode;}  }
class C{  public void lockInCache(CtClass c){  super.cacheCtClass(c.getName(),c,false);}  }
class C{  public void testGridMultiLineStringsRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(10);  grid.setNumberRows(10);  MultiLineString[] pt=new MultiLineString[100];  STRUCT[] st=new STRUCT[100];  LineStringGenerator pgc=new LineStringGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setNumberPoints(10);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 100) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(MultiLineString)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  OraReader or=new OraReader();  i=0;  while (i < 100 && pt[i] != null) {    MultiLineString pt2=(MultiLineString)or.read(st[i]);    assertTrue("The input MultiLineString is not the same as the output MultiLineString",pt[i].equals(pt2));    i++;  }}  }
class C{  public SimpleDigitalIn(){}  }
class C{  protected void fireCDATAEvent(char[] chars,int start,int length) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_CDATA,chars,start,length);  }}  }
class C{  public Boolean isVirtualVolumeDatastoreSupported(){  return virtualVolumeDatastoreSupported;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void validate(String tableName,String columnName,Map<ColumnMetaData,Object> validationRules) throws Exception {  validationRules.put(ColumnMetaData.TABLE_NAME,tableName);  validationRules.put(ColumnMetaData.COLUMN_NAME,columnName);  checkValidationRulesComplete(validationRules);  try (ResultSet columns=dbmd.getColumns(null,null,tableName,columnName)){    assertTrue("Expected row in column metadata",columns.next());    validateRowValues(columns,validationRules);    assertFalse("Expected only one row in resultset",columns.next());  } }  }
class C{  private void append(IgfsPath path,int len) throws Exception {  IgfsOutputStream os=igfsPrimary.append(path,false);  os.write(new byte[len]);  os.close();}  }
class C{  public SecurityManagerImpl(short setting,short file,short directJavaAccess,short mail,short datasource,short mapping,short remote,short customTag,short cfxSetting,short cfxUsage,short debugging,short search,short scheduledTasks,short tagExecute,short tagImport,short tagObject,short tagRegistry,short cache,short gateway,short orm,short accessRead,short accessWrite){  accesses[TYPE_SETTING]=setting;  accesses[TYPE_FILE]=file;  accesses[TYPE_DIRECT_JAVA_ACCESS]=directJavaAccess;  accesses[TYPE_MAIL]=mail;  accesses[TYPE_DATASOURCE]=datasource;  accesses[TYPE_MAPPING]=mapping;  accesses[TYPE_CUSTOM_TAG]=customTag;  accesses[TYPE_CFX_SETTING]=cfxSetting;  accesses[TYPE_CFX_USAGE]=cfxUsage;  accesses[TYPE_DEBUGGING]=debugging;  accesses[TYPE_SEARCH]=search;  accesses[TYPE_SCHEDULED_TASK]=scheduledTasks;  accesses[TYPE_TAG_EXECUTE]=tagExecute;  accesses[TYPE_TAG_IMPORT]=tagImport;  accesses[TYPE_TAG_OBJECT]=tagObject;  accesses[TYPE_TAG_REGISTRY]=tagRegistry;  accesses[TYPE_CACHE]=cache;  accesses[TYPE_GATEWAY]=gateway;  accesses[TYPE_ORM]=orm;  accesses[TYPE_ACCESS_READ]=accessRead;  accesses[TYPE_ACCESS_WRITE]=accessWrite;  accesses[TYPE_REMOTE]=remote;}  }
class C{  @Override public String createUniqueId(FacesContext context,String seed){  if (seed != null) {    return UIViewRoot.UNIQUE_ID_PREFIX + seed;  } else {    Integer i=(Integer)getStateHelper().get(PropertyKeys.lastId);    int lastId=((i != null) ? i : 0);    getStateHelper().put(PropertyKeys.lastId,++lastId);    return UIViewRoot.UNIQUE_ID_PREFIX + lastId;  }}  }
class C{  public boolean isConnectPermitted(){  return connectPermitted;}  }
class C{  public CompiledMethod resolve(){  return this;}  }
class C{  public DatabaseManager(@NonNull Context context,@NonNull String dbName,int dbVersion,@NonNull Class<?>[] classes,@Nullable Pragma pragma){  this.mResolver=context.getContentResolver();  this.mInfo=new DBInfo(dbName,dbVersion,classes,pragma);  final CacheBuilder cacheBuilder=new CacheBuilder(context.getPackageName(),dbName);  mCached=cacheBuilder.buildCache(classes);  this.mCachedTableGetter=new CachedTableGetter();}  }
class C{  public boolean looksLikeNumber(String form){  boolean containsDigit=false;  for (int i=0; i < form.length(); ++i) {    if (Character.isDigit(form.charAt(i)))     containsDigit=true; else     if (".,-".indexOf(form.charAt(i)) == -1)     return false;  }  return containsDigit;}  }
class C{  public void transformValues(TDoubleFunction function){  byte[] states=_states;  double[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public void startElement(String namespaceURI,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  if (m_inEntityRef)   return;  if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;    m_docIsEmpty=false;  } else   if (m_cdataTagOpen)   closeCDATA();  try {    if (m_needToOutputDocTypeDecl) {      if (null != getDoctypeSystem()) {        outputDocTypeDecl(name,true);      }      m_needToOutputDocTypeDecl=false;    }    if (m_elemContext.m_startTagOpen) {      closeStartTag();      m_elemContext.m_startTagOpen=false;    }    if (namespaceURI != null)     ensurePrefixIsDeclared(namespaceURI,name);    m_ispreserve=false;    if (shouldIndent() && m_startNewLine) {      indent();    }    m_startNewLine=true;    final java.io.Writer writer=m_writer;    writer.write('<');    writer.write(name);  } catch (  IOException e) {    throw new SAXException(e);  }  if (atts != null)   addAttributes(atts);  m_elemContext=m_elemContext.push(namespaceURI,localName,name);  m_isprevtext=false;  if (m_tracer != null)   firePseudoAttributes();}  }
class C{  public MapIterator<K,V> mapIterator(){  return new ReferenceMapIterator<K,V>(this);}  }
class C{  public static ValueTime fromMillis(long ms){  return fromNanos(DateTimeUtils.nanosFromDate(ms));}  }
class C{  @Override public boolean isClosed() throws SQLException {  try {    debugCodeCall("isClosed");    return result == null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected boolean onEvaluateShowIcons(){  return true;}  }
class C{  public void writeToStream(DataOutputStream dos) throws IOException {  tcData.writeToStream(dos);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public AnalyzeRequest(String index){  this.index(index);}  }
class C{  public void deleteHost(final String hostName){  if (hostName == null)   throw new IllegalArgumentException();  knownHosts.remove(hostName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.840 -0500",hash_original_method="13F2651D91961A81EAE79BEA9D5230AF",hash_generated_method="F96484BD6430558F4E312AE6332A922F") public void readBoolean() throws IOException {  if (tag != ASN1Constants.TAG_BOOLEAN) {    throw expected("boolean");  }  if (length != 1) {    throw new ASN1Exception("Wrong length for ASN.1 boolean at [" + tagOffset + "]");  }  readContent();}  }
class C{  @Override public String globalInfo(){  return "Splits a string into an n-gram with min and max grams.";}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  initVelocity(config);  defaultContentType=RuntimeSingleton.getString(CONTENT_TYPE,DEFAULT_CONTENT_TYPE);}  }
class C{  public static String saltString(byte[] salt){  return Base64.encodeToString(salt,BASE64_FLAGS);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.246 -0500",hash_original_method="12FDF0DF3583E05536965003AB19E6D0",hash_generated_method="5E4036DEB8C448014F469C6C65EEA5AC") public static boolean isIdentifierIgnorable(int codePoint){  if (codePoint < 0x600) {    return ((codePoint) == 1);  }  return isIdentifierIgnorableImpl(codePoint);}  }
class C{  public void putObject(String key,Object value) throws IOException, StreamCorruptedException, OptionalDataException {  ByteArrayOutputStream b=new ByteArrayOutputStream();  ObjectOutputStream o=new ObjectOutputStream(b);  o.writeObject(value);  o.close();  put(key,new String(Base64.encode(b.toByteArray(),Base64.DEFAULT)));}  }
class C{  public static void networks(String id){  VirtualArrayRestRep virtualArray=getVirtualArray(id);  VirtualArrayNetworksDataTable dataTable=new VirtualArrayNetworksDataTable();  render(virtualArray,dataTable);}  }
class C{  public boolean add(A a,B b){  if (setB.containsKey(a) || setA.containsKey(b)) {    throw new IllegalArgumentException("Non Bipartite Graph would be formed by adding edge (" + a + ","+ b+ ")");  }  if (!setA.containsKey(a)) {    setA.put(a,++ctr);    mapA.put(ctr,a);  }  if (!setB.containsKey(b)) {    setB.put(b,++ctr);    mapB.put(ctr,b);  }  EdgeInfo ei=new EdgeInfo(setA.get(a),setB.get(b),1);  if (pairings.containsKey(ei)) {    return false;  }  pairings.put(ei,true);  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:31.707 -0500",hash_original_method="E89632A72B3B069774FB78064C9564E7",hash_generated_method="D7F19B09078573C85F9E9DA9F6D93C10") public static PropertyValuesHolder ofFloat(String propertyName,float... values){  return new FloatPropertyValuesHolder(propertyName,values);}  }
class C{  public static Process spawn(final long maxMem,final String className,final String... args) throws IOException {  return spawn(maxMem,className,false,args);}  }
class C{  public static void resumeRecording(){  View startButton=SOLO.getCurrentActivity().findViewById(R.id.track_controller_record);  if (startButton != null && startButton.isShown()) {    SOLO.clickOnView(startButton);  }  instrumentation.waitForIdleSync();}  }
class C{  protected void saveDescriptorExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de saveDescriptorExecuteLogic");  GestionDescripcionBI descripcionBI=getGestionDescripcionBI(request);  ActionErrors errores=form.validate(mapping,request);  if ((errores == null) || errores.isEmpty()) {    logger.info("Formulario validado");    DescriptorVO descriptor=new DescriptorVO();    ((DescriptorForm)form).populate(descriptor);    if (StringUtils.isBlank(descriptor.getId())) {      descriptor=descripcionBI.insertDescriptor(descriptor);      ((DescriptorForm)form).set(descriptor);      popLastInvocation(request);    } else {      descripcionBI.updateDescriptor(descriptor);    }    setReturnActionFordward(request,redirectForwardMethod(request,"/descriptor","method","retrieveDescriptor&id=" + descriptor.getId()));  } else {    logger.info("Formulario inv\u00E1lido");    obtenerErrores(request,true).add(errores);    if (StringUtils.isBlank(((DescriptorForm)form).getId())) {      String idLista=request.getParameter("idLista");      ListaDescrVO listaDescriptora=descripcionBI.getListaDescriptora(idLista);      if (listaDescriptora != null)       ((DescriptorForm)form).setNombreLista(listaDescriptora.getNombre());    }    request.setAttribute(DescripcionConstants.FICHAS_DESCRIPCION_KEY,descripcionBI.getFichasByTiposNivel(new int[]{ElementoCuadroClasificacion.TIPO_DESCRIPTOR,ElementoCuadroClasificacion.TIPO_ALL}));    cargarListaRepositoriosECM(request);    request.setAttribute(DescripcionConstants.LISTAS_CONTROL_ACCESO_KEY,getGestionControlUsuarios(request).getListasControlAccesoByTipo(TipoListaControlAcceso.DESCRIPTOR));    setReturnActionFordward(request,mapping.findForward("editar_descriptor"));  }}  }
class C{  public boolean isDrawPath(){  return this.drawPath;}  }
class C{  public void toggleExpanded(int index){  SimpleBooleanProperty expanded=(SimpleBooleanProperty)getCellObservableValue(index);  expanded.setValue(!expanded.getValue());}  }
class C{  public void printFlags(long flags) throws IOException {  if ((flags & SYNTHETIC) != 0)   print("/*synthetic*/ ");  print(TreeInfo.flagNames(flags));  if ((flags & ExtendedStandardFlags) != 0)   print(" ");  if ((flags & ANNOTATION) != 0)   print("@");}  }
class C{  private void recreateDownloadFolder(final String folder){  FilesUtility.delete(folder);  FilesUtility.ensureDirectoryExists(folder);}  }
class C{  public boolean canSet12Or24HourClock(){  return false;}  }
class C{  public void executeChildTemplates(ElemTemplateElement elem,org.w3c.dom.Node context,QName mode,ContentHandler handler) throws TransformerException {  XPathContext xctxt=m_xcontext;  try {    if (null != mode)     pushMode(mode);    xctxt.pushCurrentNode(xctxt.getDTMHandleFromNode(context));    executeChildTemplates(elem,handler);  }  finally {    xctxt.popCurrentNode();    if (null != mode)     popMode();  }}  }
class C{  public Stop(int playerId){  super();  addParameterToRequest("playerid",playerId);}  }
class C{  public int indexOfSubSeq(String seq){  return indexOfSubSeq(CharSeq.of(seq));}  }
class C{  public TimerNotification(String type,Object source,long sequenceNumber,long timeStamp,String msg,Integer id){  super(type,source,sequenceNumber,timeStamp,msg);  this.notificationID=id;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.816 -0500",hash_original_method="E4B9C02A964F427588494E2D80051654",hash_generated_method="F4CF70BBF2317907ED04AB7E23356B39") public void removeThread(WaitingThread wt){  if (wt == null)   return;  this.waitingThreads.remove(wt);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s == null) ? "" : Catbert.getPrettyStringList(s.getExpandedRatings());}  }
class C{  public IntArrayList copy(){  return (IntArrayList)clone();}  }
class C{  private void fillEntriesAndSummaries(PreferenceGroup group){  for (int i=0; i < group.getPreferenceCount(); ++i) {    Preference pref=group.getPreference(i);    if (pref instanceof PreferenceGroup) {      fillEntriesAndSummaries((PreferenceGroup)pref);    }    setSummary(pref);    setEntries(pref);  }}  }
class C{  public PeerInfo(){  this(null,-1);}  }
class C{  @LargeTest public void testPartlyIncluded() throws Exception {  final String NUMBER="123";  final String NUMBER_LOWER="1st";  final String APOSTROPHE="''";  final String APOSTROPHE_LOWER="'Android's'";  verifyWordLimits(NUMBER,1,-1,-1);  verifyWordLimits(NUMBER_LOWER,1,0,3);  verifyWordLimits(APOSTROPHE,1,-1,-1);  verifyWordLimits(APOSTROPHE_LOWER,1,0,11);}  }
class C{  public E last(){  return backingMap.lastKey();}  }
class C{  public void pln() throws IOException {  newLine();}  }
class C{  public Matrix arrayTimesEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] * B.A[i][j];    }  }  return this;}  }
class C{  public synchronized boolean isValid(){  return mRefCount > 0;}  }
class C{  private void addSerializersForPrimitiveValues(){  if (Arrays.asList(indexedFields).contains(LuceneService.REGION_VALUE_FIELD)) {    final PrimitiveSerializer primitiveSerializer=new PrimitiveSerializer();    SerializerUtil.supportedPrimitiveTypes().stream().forEach(null);  }}  }
class C{  private boolean passesErdosGallaiTest(){  MutableDegreeDistribution copy=new MutableSimpleDegreeDistribution(getDegrees());  int L=copy.size();  int degreeSum=0;  for (  int degree : copy.getDegrees()) {    if (degree < 0) {      return false;    }    degreeSum+=degree;  }  if (degreeSum % 2 != 0) {    return false;  }  copy.sort(Collections.reverseOrder());  for (int k=1; k < L; ++k) {    int sum=0;    for (int i=0; i < k; ++i) {      sum+=copy.get(i);    }    int comp=0;    for (int j=k; j < L; ++j) {      comp+=min(k,copy.get(j));    }    if (sum > k * (k - 1) + comp) {      return false;    }  }  return true;}  }
class C{  public static boolean validSystemNameFormat(String systemName,char type){  if ((systemName.charAt(0) != 'C') || (systemName.charAt(1) != type)) {    log.error("illegal character in header field of CMRI system name: " + systemName);    return (false);  }  String s="";  int k=0;  boolean noB=true;  for (int i=2; (i < systemName.length()) && noB; i++) {    if (systemName.charAt(i) == 'B') {      s=systemName.substring(2,i);      k=i + 1;      noB=false;    }  }  if (noB) {    int num;    try {      num=Integer.valueOf(systemName.substring(2)).intValue();    } catch (    Exception e) {      log.error("illegal character in number field of CMRI system name: " + systemName);      return (false);    }    if ((num < 1) || (num >= 128000)) {      log.error("number field out of range in CMRI system name: " + systemName);      return (false);    }    if ((num - ((num / 1000) * 1000)) == 0) {      log.error("bit number not in range 1 - 999 in CMRI system name: " + systemName);      return (false);    }  } else {    if (s.length() == 0) {      log.error("no node address before 'B' in CMRI system name: " + systemName);      return (false);    }    int num;    try {      num=Integer.valueOf(s).intValue();    } catch (    Exception e) {      log.error("illegal character in node address field of CMRI system name: " + systemName);      return (false);    }    if ((num < 0) || (num >= 128)) {      log.error("node address field out of range in CMRI system name: " + systemName);      return (false);    }    try {      num=Integer.parseInt(systemName.substring(k,systemName.length()));    } catch (    Exception e) {      log.error("illegal character in bit number field of CMRI system name: " + systemName);      return (false);    }    if ((num < 1) || (num > 2048)) {      log.error("bit number field out of range in CMRI system name: " + systemName);      return (false);    }  }  return true;}  }
class C{  @Override public void onTokenRefresh(){  Intent intent=new Intent(this,GcmRegistrationService.class);  startService(intent);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static float calculateWidth(float top,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float width=targetAspectRatio * height;  return width;}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public NormalAnnotation newNormalAnnotation(){  NormalAnnotation result=new NormalAnnotation(this);  return result;}  }
class C{  private void populateFrequencies(){  frequencies=new LinkedHashMap<String,String>();  if (resource.usesAutoPublishing()) {    frequencies.put("off",getText("autopublish.off"));  } else {    frequencies.put("",getText("autopublish.interval"));  }  Map<String,String> filteredFrequencies=vocabManager.getI18nVocab(Constants.VOCAB_URI_UPDATE_FREQUENCIES,getLocaleLanguage(),false);  MapUtils.removeNonMatchingKeys(filteredFrequencies,MaintenanceUpdateFrequency.NON_ZERO_DAYS_UPDATE_PERIODS);  frequencies.putAll(filteredFrequencies);}  }
class C{  protected SVGException createSVGException(short type,String key,Object[] args){  return ((SVGOMElement)element).createSVGException(type,key,args);}  }
class C{  public DoubleNode<E> next(){  return next;}  }
class C{  protected void addCondition(List<ConditionExpression> conditions,ValueNode condition,List<ExpressionNode> projects) throws StandardException {  DataTypeDescriptor conditionType=null;  TInstance conditionInst;switch (condition.getNodeType()) {case NodeTypes.BINARY_EQUALS_OPERATOR_NODE:    addComparisonCondition(conditions,projects,(BinaryOperatorNode)condition,Comparison.EQ);  return;case NodeTypes.BINARY_GREATER_THAN_OPERATOR_NODE:addComparisonCondition(conditions,projects,(BinaryOperatorNode)condition,Comparison.GT);return;case NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE:addComparisonCondition(conditions,projects,(BinaryOperatorNode)condition,Comparison.GE);return;case NodeTypes.BINARY_LESS_THAN_OPERATOR_NODE:addComparisonCondition(conditions,projects,(BinaryOperatorNode)condition,Comparison.LT);return;case NodeTypes.BINARY_LESS_EQUALS_OPERATOR_NODE:addComparisonCondition(conditions,projects,(BinaryOperatorNode)condition,Comparison.LE);return;case NodeTypes.BINARY_NOT_EQUALS_OPERATOR_NODE:addComparisonCondition(conditions,projects,(BinaryOperatorNode)condition,Comparison.NE);return;case NodeTypes.BETWEEN_OPERATOR_NODE:addBetweenCondition(conditions,projects,(BetweenOperatorNode)condition);return;case NodeTypes.IN_LIST_OPERATOR_NODE:addInCondition(conditions,projects,(InListOperatorNode)condition);return;case NodeTypes.SUBQUERY_NODE:addSubqueryCondition(conditions,projects,(SubqueryNode)condition);return;case NodeTypes.LIKE_OPERATOR_NODE:addFunctionCondition(conditions,projects,(TernaryOperatorNode)condition);return;case NodeTypes.IS_NULL_NODE:case NodeTypes.IS_NOT_NULL_NODE:addIsNullCondition(conditions,projects,(IsNullNode)condition);return;case NodeTypes.IS_NODE:addIsCondition(conditions,projects,(IsNode)condition);return;case NodeTypes.OR_NODE:case NodeTypes.AND_NODE:case NodeTypes.NOT_NODE:addLogicalFunctionCondition(conditions,projects,condition);return;case NodeTypes.BOOLEAN_CONSTANT_NODE:conditions.add(new BooleanConstantExpression(((BooleanConstantNode)condition).getBooleanValue()));return;case NodeTypes.UNTYPED_NULL_CONSTANT_NODE:conditions.add(new BooleanConstantExpression(null));return;case NodeTypes.PARAMETER_NODE:assert (parameters != null) && parameters.contains(condition) : condition;conditionType=condition.getType();if (conditionType == null) {conditionType=new DataTypeDescriptor(TypeId.BOOLEAN_ID,true);condition.setType(conditionType);}conditionInst=typesTranslator.typeForSQLType(conditionType);conditions.add(new ParameterCondition(((ParameterNode)condition).getParameterNumber(),conditionType,condition,conditionInst));return;case NodeTypes.CAST_NODE:conditionType=condition.getType();condition=((CastNode)condition).getCastOperand();break;case NodeTypes.JAVA_TO_SQL_VALUE_NODE:conditions.add((ConditionExpression)toExpression(((JavaToSQLValueNode)condition).getJavaValueNode(),condition,true,projects));return;}if (conditionType == null) conditionType=condition.getType();if (conditionType == null) conditionType=new DataTypeDescriptor(TypeId.BOOLEAN_ID,true); else if (!conditionType.getTypeId().isBooleanTypeId()) conditionType=new DataTypeDescriptor(TypeId.BOOLEAN_ID,conditionType.isNullable());conditionInst=typesTranslator.typeForSQLType(conditionType);conditions.add(new BooleanCastExpression(toExpression(condition,projects),conditionType,condition,conditionInst));}  }
class C{  public T rev(String value){  return attr("rev",value);}  }
class C{  public static void json(String json){  json(TAG,json);}  }
class C{  protected void generateParallelPoints(Vec4 point,Vec4 prev,Vec4 next,List<Position> leftPositions,List<Position> rightPositions,double halfWidth,Globe globe){  if ((point == null) || (prev == null && next == null)) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (leftPositions == null || rightPositions == null) {    String message=Logging.getMessage("nullValue.PositionListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (globe == null) {    String message=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Vec4 offset;  Vec4 normal=globe.computeSurfaceNormalAtPoint(point);  Vec4 backward=(prev != null) ? prev.subtract3(point) : point.subtract3(next);  Vec4 perpendicular=backward.cross3(normal);  double length;  if (next != null && prev != null && !Vec4.areColinear(prev,point,next)) {    Vec4 forward=next.subtract3(point);    offset=forward.normalize3().add3(backward.normalize3());    offset=offset.normalize3();    double tripleProduct=perpendicular.dot3(offset);    if (tripleProduct < 0) {      offset=offset.multiply3(-1);    }    Angle theta=backward.angleBetween3(offset);    if (!Angle.ZERO.equals(theta))     length=halfWidth / theta.sin(); else     length=halfWidth;  } else {    offset=perpendicular.normalize3();    length=halfWidth;  }  offset=offset.multiply3(length);  Vec4 ptRight=point.add3(offset);  Vec4 ptLeft=point.subtract3(offset);  Position posLeft=globe.computePositionFromPoint(ptLeft);  Position posRight=globe.computePositionFromPoint(ptRight);  leftPositions.add(posLeft);  rightPositions.add(posRight);}  }
class C{  public static void run(Options options) throws Exception {  boolean isPub=options.get(OPT_PUB);  DevelopmentProvider tp=new DevelopmentProvider();  Topology top;  if (isPub) {    PublisherApp publisher=new PublisherApp(tp,options);    top=publisher.buildAppTopology();  } else {    SubscriberApp subscriber=new SubscriberApp(tp,options);    top=subscriber.buildAppTopology();  }  System.out.println("Using Kafka cluster at bootstrap.servers=" + options.get(OPT_BOOTSTRAP_SERVERS) + " zookeeper.connect="+ options.get(OPT_ZOOKEEPER_CONNECT)+ "\n"+ (isPub ? "Publishing" : "Subscribing")+ " to topic "+ options.get(OPT_TOPIC));  System.out.println("Console URL for the job: " + tp.getServices().getService(HttpServer.class).getConsoleUrl());  tp.submit(top);}  }
class C{  public blink removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static String decode(String html){  int ndx=html.indexOf('&');  if (ndx == -1) {    return html;  }  StringBuilder result=new StringBuilder(html.length());  int lastIndex=0;  int len=html.length();  mainloop:   while (ndx != -1) {    result.append(html.substring(lastIndex,ndx));    lastIndex=ndx;    while (html.charAt(lastIndex) != ';') {      lastIndex++;      if (lastIndex == len) {        lastIndex=ndx;        break mainloop;      }    }    if (html.charAt(ndx + 1) == '#') {      char c=html.charAt(ndx + 2);      int radix;      if ((c == 'x') || (c == 'X')) {        radix=16;        ndx+=3;      } else {        radix=10;        ndx+=2;      }      String number=html.substring(ndx,lastIndex);      int i=Integer.parseInt(number,radix);      result.append((char)i);      lastIndex++;    } else {      String encodeToken=html.substring(ndx + 1,lastIndex);      char[] replacement=ENTITY_MAP.get(encodeToken);      if (replacement == null) {        result.append('&');        lastIndex=ndx + 1;      } else {        result.append(replacement);        lastIndex++;      }    }    ndx=html.indexOf('&',lastIndex);  }  result.append(html.substring(lastIndex));  return result.toString();}  }
class C{  protected Ignite startNode(String gridName,File springCfg) throws Exception {  assert springCfg != null;  ListableBeanFactory springCtx=new FileSystemXmlApplicationContext("file:///" + springCfg.getAbsolutePath());  Map cfgMap=springCtx.getBeansOfType(IgniteConfiguration.class);  assert cfgMap != null;  assert !cfgMap.isEmpty();  IgniteConfiguration cfg=(IgniteConfiguration)cfgMap.values().iterator().next();  cfg.setGridName(gridName + "-" + getNextNodeNum());  return G.start(cfg);}  }
class C{  public Query createMinShouldMatchQuery(String field,String queryText,float fraction){  if (Float.isNaN(fraction) || fraction < 0 || fraction > 1) {    throw new IllegalArgumentException("fraction should be >= 0 and <= 1");  }  if (fraction == 1) {    return createBooleanQuery(field,queryText,BooleanClause.Occur.MUST);  }  Query query=createFieldQuery(analyzer,BooleanClause.Occur.SHOULD,field,queryText,false,0);  if (query instanceof BooleanQuery) {    BooleanQuery bq=(BooleanQuery)query;    BooleanQuery.Builder builder=new BooleanQuery.Builder();    builder.setMinimumNumberShouldMatch((int)(fraction * bq.clauses().size()));    for (    BooleanClause clause : bq) {      builder.add(clause);    }    query=builder.build();  }  return query;}  }
class C{  public boolean hasCommentCountExt(){  return hasExtension(GphotoCommentCount.class);}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (fv != null) {    return fv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public static Segment parseSeg(byte[] buffer,int size){  if (size < 12) {    return null;  }  Segment seg=new Segment();  seg.conv=bytes_to_long(buffer,0);  seg.seq=bytes_to_long(buffer,4);  seg.ack=bytes_to_long(buffer,8);  seg.flags=buffer[13];  seg.wnd=bytes_to_short(buffer,14);  seg.tsval=bytes_to_long(buffer,16);  seg.tsecr=bytes_to_long(buffer,20);  seg.data=copy_buffer(buffer,HEADER_SIZE,size - HEADER_SIZE);  seg.len=size - HEADER_SIZE;  return seg;}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  this.put(d);  return this;}  }
class C{  public String reverseWordsB(String s){  if (s == null || s.length() == 0)   return "";  s=s.trim();  StringBuilder res=new StringBuilder();  String[] words=s.split(" ");  for (int i=words.length - 1; i >= 0; i--) {    if (!words[i].equals("")) {      res.append(words[i]);      if (i != 0)       res.append(" ");    }  }  return res.toString();}  }
class C{  public void addGenericAttr(GenericAttr g){  generic.addElement(g);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  protected StoragePort checkPortExistsInDB(String nativeGuid) throws IOException {  StoragePort port=null;  List<StoragePort> portInDB=CustomQueryUtility.getActiveStoragePortByNativeGuid(_dbClient,nativeGuid);  if (portInDB != null && !portInDB.isEmpty()) {    port=portInDB.get(0);  }  return port;}  }
class C{  public void incrementCount(E key,double increment){  entries.incr(key,increment);}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {}  }
class C{  void updateEyes(PointF leftPosition,boolean leftOpen,PointF rightPosition,boolean rightOpen){  mLeftPosition=leftPosition;  mLeftOpen=leftOpen;  mRightPosition=rightPosition;  mRightOpen=rightOpen;  postInvalidate();}  }
class C{  static String calculateResponse(String algorithm,String username_value,String realm_value,String passwd,String nonce_value,String nc_value,String cnonce_value,String method,String digest_uri_value,String entity_body,String qop_value,StackLogger stackLogger){  if (stackLogger != null && stackLogger.isLoggingEnabled()) {    stackLogger.logDebug("trying to authenticate using : " + algorithm + ", "+ username_value+ ", "+ realm_value+ ", "+ (passwd != null && passwd.trim().length() > 0)+ ", "+ nonce_value+ ", "+ nc_value+ ", "+ cnonce_value+ ", "+ method+ ", "+ digest_uri_value+ ", "+ entity_body+ ", "+ qop_value);  }  if (username_value == null || realm_value == null || passwd == null || method == null || digest_uri_value == null || nonce_value == null)   throw new NullPointerException("Null parameter to MessageDigestAlgorithm.calculateResponse()");  String A1=null;  if (algorithm == null || algorithm.trim().length() == 0 || algorithm.trim().equalsIgnoreCase("MD5")) {    A1=username_value + ":" + realm_value+ ":"+ passwd;  } else {    if (cnonce_value == null || cnonce_value.length() == 0)     throw new NullPointerException("cnonce_value may not be absent for MD5-Sess algorithm.");    A1=H(username_value + ":" + realm_value+ ":"+ passwd) + ":" + nonce_value+ ":"+ cnonce_value;  }  String A2=null;  if (qop_value == null || qop_value.trim().length() == 0 || qop_value.trim().equalsIgnoreCase("auth")) {    A2=method + ":" + digest_uri_value;  } else {    if (entity_body == null)     entity_body="";    A2=method + ":" + digest_uri_value+ ":"+ H(entity_body);  }  String request_digest=null;  if (cnonce_value != null && qop_value != null && nc_value != null && (qop_value.equalsIgnoreCase("auth") || qop_value.equalsIgnoreCase("auth-int"))) {    request_digest=KD(H(A1),nonce_value + ":" + nc_value+ ":"+ cnonce_value+ ":"+ qop_value+ ":"+ H(A2));  } else {    request_digest=KD(H(A1),nonce_value + ":" + H(A2));  }  return request_digest;}  }
class C{  private static String readName(byte data[],int offset,HashSet<Integer> jumps) throws IOException {  int c=data[offset] & 0xff;  if ((c & 0xc0) == 0xc0) {    c=((c & 0x3f) << 8) + (data[offset + 1] & 0xff);    if (jumps.contains(c)) {      throw new DnsException("","Cyclic offsets detected.");    }    jumps.add(c);    return readName(data,c,jumps);  }  if (c == 0) {    return "";  }  String s=new String(data,offset + 1,c);  String t=readName(data,offset + 1 + c,jumps);  if (t.length() > 0) {    s=s + "." + t;  }  return s;}  }
class C{  private synchronized IMqttToken removeMqttToken(Bundle data){  String activityToken=data.getString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN);  if (activityToken != null) {    int tokenNumber=Integer.parseInt(activityToken);    IMqttToken token=tokenMap.get(tokenNumber);    tokenMap.delete(tokenNumber);    return token;  }  return null;}  }
class C{  @POST @Path("update") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value="Updates Codenvy") @ApiResponses(value={@ApiResponse(code=201,message="Successfully updated"),@ApiResponse(code=400,message="Binaries to install not found or installation step is out of range"),@ApiResponse(code=500,message="Server error")}) public Response updateCodenvy(@QueryParam("step") @ApiParam(value="installation step starting from 0") int installStep){  try {    InstallType installType=configManager.detectInstallationType();    Artifact artifact=createArtifact(CDECArtifact.NAME);    Version version=facade.getLatestInstallableVersion(artifact);    if (version == null) {      return handleException(new IllegalStateException("There is no appropriate version to install"),Response.Status.BAD_REQUEST);    }    Map<String,String> properties=configManager.prepareInstallProperties(null,null,installType,artifact,version,false);    final InstallOptions installOptions=new InstallOptions();    installOptions.setInstallType(installType);    installOptions.setConfigProperties(properties);    List<String> infos=facade.getUpdateInfo(artifact,installType);    if (installStep < 0 || installStep >= infos.size()) {      return handleException(new IllegalArgumentException(format("Installation step is out of range [0..%d]",infos.size() - 1)),Response.Status.BAD_REQUEST);    }    installOptions.setStep(installStep);    String id=facade.update(artifact,version,installOptions);    Map<String,String> m=ImmutableMap.of("id",id);    return Response.status(Response.Status.ACCEPTED).entity(new JsonStringMapImpl<>(m)).build();  } catch (  FileNotFoundException e) {    return handleException(e,Response.Status.BAD_REQUEST);  }catch (  Exception e) {    return handleException(e);  }}  }
class C{  public void throwDOMException(short code,String msg){  String themsg=XSLMessages.createMessage(msg,null);  throw new DOMException(code,themsg);}  }
class C{  public void addSummaryLabel(String jamonSummaryLabel){  if (httpMonItemsHolder != null) {    HttpMonItem monItem=createHttpMonItem(jamonSummaryLabel.trim());    httpMonItemsHolder.add(monItem);    if (!"".equals(jamonSummaryLabels)) {      jamonSummaryLabels+=", ";    }    jamonSummaryLabels+=jamonSummaryLabel;    if (monItem.isTimeMon())     numTimeMons++;  }}  }
class C{  public final CC growY(){  ver.setGrow(ResizeConstraint.WEIGHT_100);  return this;}  }
class C{  public Builder clear(){  localeBuilder.clear();  return this;}  }
class C{  public static boolean send(XMPPConnection connection,Message msg){  List<String> toList=getAllowedNotifiedAddresses(connection);  toList=filterHangoutAddresses(toList);  if (toList.size() > 0) {    try {      Log.d("Sending message to " + toList.size() + " recipients");      MultipleRecipientManager.send(connection,msg,toList,null,null);    } catch (    Exception e) {      Log.d("Failed to send message using MultipleRecipientManager method. Sending messages one by one. Ex: " + e.getMessage());      for (      String notifiedAddress : toList) {        msg.setTo(notifiedAddress);        try {          connection.sendPacket(msg);        } catch (        SmackException.NotConnectedException ex) {          Log.e("Send message error. Ex: " + ex.getMessage());        }      }      return false;    }  }  return true;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public DESKeySpec(byte[] key) throws InvalidKeyException {  this(key,0);}  }
class C{  public static int[] encryptString(int[] chars,int r,int n) throws IOException {  IntOutputStream resultStr=new IntOutputStream(chars.length + 4);  EEXECEncryption eout=new EEXECEncryption(resultStr,r,n);  for (int i=0; i < chars.length; i++) {    eout.write(chars[i]);  }  eout.close();  return resultStr.getInts();}  }
class C{  public RecordRouteHeader createRecordRouteHeader(Address address){  if (address == null)   throw new NullPointerException("Null argument!");  RecordRoute recordRoute=new RecordRoute();  recordRoute.setAddress(address);  return recordRoute;}  }
class C{  private static ExceptionProxy exceptionProxy(int tag){  return new AnnotationTypeMismatchExceptionProxy("Array with component tag: " + tag);}  }
class C{  @Override protected void parse(){  compactDatabase=getConfig().getBoolean(PARAM_COMPACT_DATABASE,compactDatabase);  requestbodysize=getConfig().getInt(PARAM_REQUEST_BODY_SIZE,requestbodysize);  responsebodysize=getConfig().getInt(PARAM_RESPONSE_BODY_SIZE,responsebodysize);  newSessionOption=getConfig().getInt(PARAM_NEW_SESSION_OPTION,newSessionOption);  newSessionPrompt=getConfig().getBoolean(PARAM_NEW_SESSION_PROMPT,newSessionPrompt);  recoveryLogEnabled=getConfig().getBoolean(PARAM_RECOVERY_LOG_ENABLED,recoveryLogEnabled);}  }
class C{  private AsymmetricCipherKeyPair genKeyPair(){  if (!initialized) {    initializeDefault();  }  byte[][][] currentAuthPaths=new byte[numLayer][][];  byte[][][] nextAuthPaths=new byte[numLayer - 1][][];  Treehash[][] currentTreehash=new Treehash[numLayer][];  Treehash[][] nextTreehash=new Treehash[numLayer - 1][];  Vector[] currentStack=new Vector[numLayer];  Vector[] nextStack=new Vector[numLayer - 1];  Vector[][] currentRetain=new Vector[numLayer][];  Vector[][] nextRetain=new Vector[numLayer - 1][];  for (int i=0; i < numLayer; i++) {    currentAuthPaths[i]=new byte[heightOfTrees[i]][mdLength];    currentTreehash[i]=new Treehash[heightOfTrees[i] - K[i]];    if (i > 0) {      nextAuthPaths[i - 1]=new byte[heightOfTrees[i]][mdLength];      nextTreehash[i - 1]=new Treehash[heightOfTrees[i] - K[i]];    }    currentStack[i]=new Vector();    if (i > 0) {      nextStack[i - 1]=new Vector();    }  }  byte[][] currentRoots=new byte[numLayer][mdLength];  byte[][] nextRoots=new byte[numLayer - 1][mdLength];  byte[][] seeds=new byte[numLayer][mdLength];  for (int i=0; i < numLayer; i++) {    System.arraycopy(currentSeeds[i],0,seeds[i],0,mdLength);  }  currentRootSigs=new byte[numLayer - 1][mdLength];  for (int h=numLayer - 1; h >= 0; h--) {    GMSSRootCalc tree=new GMSSRootCalc(this.heightOfTrees[h],this.K[h],digestProvider);    try {      if (h == numLayer - 1) {        tree=this.generateCurrentAuthpathAndRoot(null,currentStack[h],seeds[h],h);      } else {        tree=this.generateCurrentAuthpathAndRoot(currentRoots[h + 1],currentStack[h],seeds[h],h);      }    } catch (    Exception e1) {      e1.printStackTrace();    }    for (int i=0; i < heightOfTrees[h]; i++) {      System.arraycopy(tree.getAuthPath()[i],0,currentAuthPaths[h][i],0,mdLength);    }    currentRetain[h]=tree.getRetain();    currentTreehash[h]=tree.getTreehash();    System.arraycopy(tree.getRoot(),0,currentRoots[h],0,mdLength);  }  for (int h=numLayer - 2; h >= 0; h--) {    GMSSRootCalc tree=this.generateNextAuthpathAndRoot(nextStack[h],seeds[h + 1],h + 1);    for (int i=0; i < heightOfTrees[h + 1]; i++) {      System.arraycopy(tree.getAuthPath()[i],0,nextAuthPaths[h][i],0,mdLength);    }    nextRetain[h]=tree.getRetain();    nextTreehash[h]=tree.getTreehash();    System.arraycopy(tree.getRoot(),0,nextRoots[h],0,mdLength);    System.arraycopy(seeds[h + 1],0,this.nextNextSeeds[h],0,mdLength);  }  GMSSPublicKeyParameters publicKey=new GMSSPublicKeyParameters(currentRoots[0],gmssPS);  GMSSPrivateKeyParameters privateKey=new GMSSPrivateKeyParameters(currentSeeds,nextNextSeeds,currentAuthPaths,nextAuthPaths,currentTreehash,nextTreehash,currentStack,nextStack,currentRetain,nextRetain,nextRoots,currentRootSigs,gmssPS,digestProvider);  return (new AsymmetricCipherKeyPair(publicKey,privateKey));}  }
class C{  public void insertAfter(List<E> toInsert,E point){  innerChain.insertAfter(toInsert,point);}  }
class C{  private void advance(TrieNode<V> node){  Iterator<TrieNode<V>> children=node.childrenForward();  while (true) {    int size;    if (children.hasNext()) {      node=children.next();      if (children.hasNext())       stack.add(children);      if (withNulls || node.getValue() == null)       children=node.childrenForward(); else {        nextNode=node;        return;      }    } else     if ((size=stack.size()) == 0)     return; else     children=stack.remove(size - 1);  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     log.fine("Null parameter: " + name); else     if (name.equals("HR_Process_ID"))     payrollProcessId=para[i].getParameterAsInt(); else     if (name.equals("R_MailText_ID"))     mailTextId=para[i].getParameterAsInt(); else     if (name.equals("C_BP_Group_ID"))     bPartnerGroupId=para[i].getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     bPartnerId=para[i].getParameterAsInt(); else     if (name.equals("AD_Process_ID"))     reportProcessId=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public String TO_CHAR(String columnName,int displayType,String AD_Language){  StringBuffer retValue=new StringBuffer("CAST (");  retValue.append(columnName);  retValue.append(" AS Text)");  return retValue.toString();}  }
class C{  public LayerAddPanel(){  super();  if (Debug.debugging("addable")) {    Debug.output("LayerAddPanel()");  }  inspector=new Inspector();  inspector.addActionListener((ActionListener)this);}  }
class C{  @LargeTest public void testPreviewWithOverlayEffectKenBurn() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "H264_BP_640x480_30fps_192kbps_1_5.mp4";  final String imageItemFileName=INPUT_FILE_PATH + "IMG_640x480.jpg";  final String videoItemFileName1=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_512kbps_AACLC_48khz_132kbps_s_0_26.mp4";  final String overlayFilename=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";  final Semaphore blockTillPreviewCompletes=new Semaphore(1);  previewStart=false;  previewStop=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFileName,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaVideoItem1);  final MediaImageItem mediaImageItem2=mVideoEditorHelper.createMediaItem(mVideoEditor,"m2",imageItemFileName,10000,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaImageItem2);  final MediaVideoItem mediaVideoItem3=mVideoEditorHelper.createMediaItem(mVideoEditor,"m3",videoItemFileName1,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaVideoItem3);  final EffectColor effectColor=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"Effect1",1000,3000,EffectColor.TYPE_COLOR,EffectColor.GREEN);  mediaVideoItem1.addEffect(effectColor);  final Rect startRect=new Rect((mediaImageItem2.getHeight() / 3),(mediaImageItem2.getWidth() / 3),(mediaImageItem2.getHeight() / 2),(mediaImageItem2.getWidth() / 2));  final Rect endRect=new Rect(0,0,mediaImageItem2.getWidth(),mediaImageItem2.getHeight());  final EffectKenBurns kbeffectOnMI2=new EffectKenBurns(mediaImageItem2,"KBOnM2",startRect,endRect,0,10000);  assertNotNull("EffectKenBurns",kbeffectOnMI2);  mediaImageItem2.addEffect(kbeffectOnMI2);  final Bitmap mBitmap=mVideoEditorHelper.getBitmap(overlayFilename,640,480);  final OverlayFrame overlayFrame=mVideoEditorHelper.createOverlay(mediaVideoItem3,"OverlayID",mBitmap,(mediaImageItem2.getDuration() / 4),(mediaVideoItem3.getDuration() / 3));  mediaVideoItem3.addOverlay(overlayFrame);  validatePreviewProgress(5000,-1,false,mVideoEditor.getDuration());}  }
class C{  public T remove(HttpSession session,Map<String,Object> expandContext){  AttributeAccessor<T> aa=new AttributeAccessor<T>(name,expandContext,this.attributeName,this.fma,this.needsExpand);  return aa.remove(session);}  }
class C{  protected static int triangleSize(int x){  return (x * (x - 1)) >>> 1;}  }
class C{  public Builder minimize(int delay){  mOptions.refreshMinimizeDelay=delay;  mOptions.refreshMinimize=true;  return this;}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  public static String formatValuePath(String[] path){  StringBuilder buffer=new StringBuilder();  int i=1;  for (  String s : path) {    if (s.contains(".")) {      buffer.append("[").append(s).append("]");    } else {      buffer.append(s);    }    if (i < path.length)     buffer.append(".");    i++;  }  return buffer.toString();}  }
class C{  public TestStackResponse clone(){  TestStackResponse result=new TestStackResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.Output=Output;  return result;}  }
class C{  public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Cache atomic sequence example started.");    ignite.compute().broadcast(new SequenceClosure("example-sequence"));    System.out.println();    System.out.println("Finished atomic sequence example...");    System.out.println("Check all nodes for output (this node is also part of the cluster).");    System.out.println();  } }  }
class C{  public String displayInputVariables(){  return MLContextUtil.displaySet("Input Variables",inputVariables);}  }
class C{  public boolean hasLastError(){  return hasLastError;}  }
class C{  public <T>T createDtoFromJson(InputStream json,Class<T> dtoInterface) throws IOException {  return createDtoFromJson(new InputStreamReader(json),dtoInterface);}  }
class C{  public void paintFormattedTextFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public boolean isPersianLeapYear(){  return PersianCalendarUtils.isPersianLeapYear(this.persianYear);}  }
class C{  public static boolean checkSecurityInfos(String endpoint,Identity clientIdentity,List<SecurityInfo> securityInfos){  if (clientIdentity.isSecure()) {    if (securityInfos == null || securityInfos.isEmpty()) {      LOG.warn("Client '{}' without security info try to connect through the secure endpoint",endpoint);      return false;    } else {      for (      SecurityInfo securityInfo : securityInfos) {        if (checkSecurityInfo(endpoint,clientIdentity,securityInfo)) {          return true;        }      }      return false;    }  } else   if (securityInfos != null && !securityInfos.isEmpty()) {    LOG.warn("Client '{}' must connect using DTLS",endpoint);    return false;  }  return true;}  }
class C{  @Override public int read() throws IOException {  int x=in.read();  if (x != -1) {    check.update(x);  }  return x;}  }
class C{  @Override protected int sizeOf(String key,Bitmap bitmap){  return getBitmapSize(bitmap);}  }
class C{  public void add(N node){  if (nodeLinks.containsKey(node)) {    return;  }  nodeLinks.put(node,new ArraySet<N>());}  }
class C{  public ServiceCall<SpeechSession> createSession(SpeechModel model){  Validator.notNull(model,"Model cannot be null");  return createSession(model.getName());}  }
class C{  @VisibleForTesting static synchronized void resetRegistry(){  REGISTERED_OPTIONS.clear();  initializeRegistry();}  }
class C{  private boolean matchModes(QName m1,QName m2){  return (((null == m1) && (null == m2)) || ((null != m1) && (null != m2) && m1.equals(m2)));}  }
class C{  public ProgressSupport(Object sourceBean){  super(sourceBean);  Debug.message("progresssupport","ProgressSupport | ProgressSupport");}  }
class C{  @SuppressWarnings("UnusedDeclaration") protected BufferedImage createPressedLook(final Image image){  if (image == null) {    return null;  }  final BufferedImage pressedImage=new BufferedImage(image.getWidth(null) + 2,image.getHeight(null) + 2,BufferedImage.TYPE_INT_ARGB);  final Graphics2D g=(Graphics2D)pressedImage.getGraphics();  g.drawImage(image,1,1,null);  g.dispose();  return pressedImage;}  }
class C{  public JSONObject(Map<String,Object> map){  this.map=new HashMap<String,Object>();  if (map != null) {    Iterator<Entry<String,Object>> i=map.entrySet().iterator();    while (i.hasNext()) {      Entry<String,Object> entry=i.next();      Object value=entry.getValue();      if (value != null) {        this.map.put(entry.getKey(),wrap(value));      }    }  }}  }
class C{  public MediaByteArraySource(byte[] mediaBytes,String mediaType){  super(mediaType);  this.mediaBytes=mediaBytes;  this.contentLength=mediaBytes.length;  this.lastModified=DateTime.now();}  }
class C{  private boolean unassignedIsInGroups(List<Group> groups,int groupId){  for (  Group group : groups) {    if (group != null && (group.getUid() == groupId) && group.getName().equalsIgnoreCase(UNASSIGNED_GROUP)) {      return true;    }  }  return false;}  }
class C{  public boolean isInteractive(){  return (dynamicStatus != STATIC);}  }
class C{  private void entry(long qAddr,long addr){  mem.writeLong(qAddr + 27,addr);}  }
class C{  public void visitTypeInsn(int opcode,String type){  if (mv != null) {    mv.visitTypeInsn(opcode,type);  }}  }
class C{  Writer(int type,int len){  assert len < 256;  internal=new byte[256];  current=len;  System.arraycopy(new byte[]{'N','T','L','M','S','S','P',0,(byte)type},0,internal,0,9);}  }
class C{  protected void Basis() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  int axesType;  if (lookahead("::",1)) {    axesType=AxisName();    nextToken();    nextToken();  } else   if (tokenIs('@')) {    axesType=OpCodes.FROM_ATTRIBUTES;    appendOp(2,axesType);    nextToken();  } else {    axesType=OpCodes.FROM_CHILDREN;    appendOp(2,axesType);  }  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  NodeTest(axesType);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 1,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public long numCqsClosed(){  return this.cqService.getCqServiceVsdStats().getNumCqsClosed();}  }
class C{  public void goTo(final Label label){  mv.visitJumpInsn(Opcodes.GOTO,label);}  }
class C{  public MinRowExpression add(String propertyName){  this.getChildren().add(new PropertyValueExpression(propertyName));  return this;}  }
class C{  public Element insertBefore(NewElement newElement){  checkNotRemoved();  notPermittedOnRootElement();  requireNonNull(newElement,"Required not null new element");  if (previousElementNode(delegate) != null) {    getPreviousSibling().insertAfter(newElement);    return this;  }  final Node newNode=createNode(newElement);  final Element element=createElement(newNode);  delegate.getParentNode().insertBefore(newNode,delegate);  xmlTree.insertAfterParent(newElement,element,getParent());  return this;}  }
class C{  public static double standardNormalQuantile(double d){  return (d == 0) ? Double.NEGATIVE_INFINITY : (d == 1) ? Double.POSITIVE_INFINITY : (Double.isNaN(d) || d < 0 || d > 1) ? Double.NaN : MathUtil.SQRT2 * -erfcinv(2 * d);}  }
class C{  public static byte[] decode(byte[] source){  byte[] decoded=null;  try {    decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : "IOExceptions only come from GZipping, which is turned off: " + ex.getMessage();  }  return decoded;}  }
class C{  public SchemaColumnEntity createSchemaColumnEntity(BusinessObjectFormatEntity businessObjectFormatEntity,String columnName,BusinessObjectDefinitionColumnEntity businessObjectDefinitionColumnEntity){  SchemaColumnEntity schemaColumnEntity=new SchemaColumnEntity();  schemaColumnEntity.setBusinessObjectFormat(businessObjectFormatEntity);  schemaColumnEntity.setName(columnName);  schemaColumnEntity.setType(AbstractDaoTest.COLUMN_DATA_TYPE);  schemaColumnEntity.setBusinessObjectDefinitionColumn(businessObjectDefinitionColumnEntity);  return schemaColumnDao.saveAndRefresh(schemaColumnEntity);}  }
class C{  private boolean mouseInBounds(MouseEvent e){  if (e.getX() < 0 || e.getY() < 0 || e.getX() > getSize().width || e.getY() > getSize().height) {    return false;  }  return true;}  }
class C{  private void trackWeakOnes(int x,int y,BufferedImage gray){  for (int xx=x - 1; xx <= x + 1; xx++)   for (int yy=y - 1; yy <= y + 1; yy++) {    if (isWeak(xx,yy,gray)) {      gray.getRaster().setPixel(xx,yy,tmp000);      trackWeakOnes(xx,yy,gray);    }  }}  }
class C{  private static boolean checkTargetVpoolHasVolumePool(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient){  boolean vPoolHasVolumePool=false;  if (!NullColumnValueGetter.isNullURI(volume.getPool())) {    vPoolHasVolumePool=doesNewVpoolContainsVolumePool(volume.getPool(),newVpool);  } else   if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && VirtualPool.vPoolSpecifiesHighAvailability(newVpool)) {    Volume backendSrcVolume=VPlexUtil.getVPLEXBackendVolume(volume,true,dbClient,false);    if (backendSrcVolume != null) {      s_logger.info("VPLEX backend Source Volume {}, new vPool {}",backendSrcVolume.getId(),newVpool.getId());      vPoolHasVolumePool=doesNewVpoolContainsVolumePool(backendSrcVolume.getPool(),newVpool);    } else {      s_logger.warn("backend source volume could not be found for VPLEX volume " + volume.forDisplay());    }    if (VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(currentVpool) && VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(newVpool)) {      Volume backendDistVolume=VPlexUtil.getVPLEXBackendVolume(volume,false,dbClient,false);      VirtualPool newHAvPool=getHaVpool(newVpool,dbClient);      s_logger.info("VPLEX backend Distributed Volume {}, new HA vPool {}",backendDistVolume.getId(),newHAvPool.getId());      if (newHAvPool != null && backendDistVolume != null) {        vPoolHasVolumePool=doesNewVpoolContainsVolumePool(backendDistVolume.getPool(),newHAvPool);      }    }  }  return vPoolHasVolumePool;}  }
class C{  protected ArgumentImpl(){  super();}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public boolean isDynamic(){  return true;}  }
class C{  public void raycast(RayCastCallback callback,Vec2 point1,Vec2 point2){  wrcwrapper.broadPhase=m_contactManager.m_broadPhase;  wrcwrapper.callback=callback;  input.maxFraction=1.0f;  input.p1.set(point1);  input.p2.set(point2);  m_contactManager.m_broadPhase.raycast(wrcwrapper,input);}  }
class C{  public static byte[] toByteArray(Reader input,String encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  public SmartJTable(TableModel model){  super(model);  super.setDefaultEditor(Object.class,cellEditor);  super.setDefaultRenderer(Object.class,cellRenderer);  super.setSelectionForeground(Color.red);  super.setIntercellSpacing(new Dimension(5,5));  super.setRowHeight(25);}  }
class C{  public static InputVenueMessageContentBuilder builder(){  return new InputVenueMessageContentBuilder();}  }
class C{  protected void stopTimer(){  try {    acquireTimerTaskSem();    try {      if (this.timerTask != null) {        this.timerTask.cancel();        this.timerTask=null;      }    }  finally {      releaseTimerTaskSem();    }  } catch (  Exception ex) {  }}  }
class C{  public LogMergeItemEventCommand(RPEntity player,RPObject oldItem,RPObject outlivingItem){  this.player=player;  this.liveOldItem=oldItem;  this.liveOutlivingItem=outlivingItem;  this.frozenOldItem=(RPObject)oldItem.clone();  this.frozenOutlivingItem=(RPObject)outlivingItem.clone();}  }
class C{  protected void closeCache(GemFireCacheImpl gfc){  gfc.close();}  }
class C{  @Override public void next(Long sinceId,Callback<TimelineResult<Tweet>> cb){  createListTimelineRequest(sinceId,null).enqueue(new TweetsCallback(cb));}  }
class C{  public void reloadMarketplacesForSupplier(){  marketplaces=new ArrayList<Marketplace>();  for (  VOMarketplace mp : getMarketplaceService().getMarketplacesForOrganization()) {    marketplaces.add(new Marketplace(mp));  }}  }
class C{  private void changeUserPassword(String tenantName,String accountName,char[] currentPassword,char[] newPassword) throws Exception {  try {    ValidateUtil.validateNotEmpty(tenantName,"Tenant name");    ServerUtils.validateNotEmptyUsername(accountName);    ValidateUtil.validateNotNull(currentPassword,"Current password");    ValidateUtil.validateNotNull(newPassword,"New password");    TenantInformation tenantInfo=findTenant(tenantName);    ServerUtils.validateNotNullTenant(tenantInfo,tenantName);    ISystemDomainIdentityProvider provider=tenantInfo.findSystemProvider();    ServerUtils.validateNotNullSystemIdp(provider,tenantName);    provider.resetUserPassword(accountName,currentPassword,newPassword);    updateSystemDomainStorePasswordIfNeeded(tenantName,accountName,newPassword);  } catch (  ConstraintViolationLdapException e) {    logger.warn(String.format("provided password for user [%s] violates password policy constraint for tenant [%s]",accountName,tenantName),e);    throw new PasswordPolicyViolationException(e.getMessage(),e);  }catch (  Exception ex) {    logger.error(String.format("Failed to reset password for user [%s] in tenant [%s]",accountName,tenantName));    throw ex;  }}  }
class C{  public Pair<String,Boolean> searchAttr(int attr){  Pair<ResourceType,String> info=Bridge.resolveResourceId(attr);  if (info != null) {    return Pair.of(info.getSecond(),Boolean.TRUE);  }  info=mProjectCallback.resolveResourceId(attr);  if (info != null) {    return Pair.of(info.getSecond(),Boolean.FALSE);  }  return null;}  }
class C{  public void addStrategySettings(String populationId,final StrategySettings stratSets){  if (this.settings.get(populationId) != null && this.settings.get(populationId).containsKey(stratSets.getId())) {    throw new IllegalArgumentException("A strategy with id: " + stratSets.getId() + " is already configured!");  }  LinkedHashMap<Id,StrategySettings> popSettings=this.settings.get(populationId);  if (popSettings == null) {    popSettings=new LinkedHashMap<Id,StrategySettings>();    this.settings.put(populationId,popSettings);  }  popSettings.put(stratSets.getId(),stratSets);}  }
class C{  public void writeTo(OutputStream os) throws IOException {  os.write(getEncoded());}  }
class C{  public ColorAtom(Atom atom,Color bg,Color c){  elements=new RowAtom(atom);  background=bg;  color=c;}  }
class C{  public static void validateFilterField(ARecordType recType,List<String> filterField) throws AsterixException {  IAType fieldType=recType.getSubFieldType(filterField);  if (fieldType == null) {    throw new AsterixException("A field with this name  \"" + filterField + "\" could not be found.");  }switch (fieldType.getTypeTag()) {case INT8:case INT16:case INT32:case INT64:case FLOAT:case DOUBLE:case STRING:case BINARY:case DATE:case TIME:case DATETIME:case UUID:case YEARMONTHDURATION:case DAYTIMEDURATION:    break;case UNION:  throw new AsterixException("The filter field \"" + filterField + "\" cannot be nullable");default :throw new AsterixException("The field \"" + filterField + "\" which is of type "+ fieldType.getTypeTag()+ " cannot be used as a filter for a dataset.");}}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof AbstractXYItemLabelGenerator)) {    return false;  }  AbstractXYItemLabelGenerator that=(AbstractXYItemLabelGenerator)obj;  if (!this.formatString.equals(that.formatString)) {    return false;  }  if (!ObjectUtilities.equal(this.xFormat,that.xFormat)) {    return false;  }  if (!ObjectUtilities.equal(this.xDateFormat,that.xDateFormat)) {    return false;  }  if (!ObjectUtilities.equal(this.yFormat,that.yFormat)) {    return false;  }  if (!ObjectUtilities.equal(this.yDateFormat,that.yDateFormat)) {    return false;  }  if (!this.nullYString.equals(that.nullYString)) {    return false;  }  return true;}  }
class C{  @PreAuthorize("hasRole('ROLE_DOWNLOAD')") @Transactional(readOnly=true,propagation=Propagation.REQUIRED) public int countProductsInCart(Long u_id) throws UserNotExistingException {  ProductCart cart=getCartOfUser(u_id);  if (cart == null)   return 0;  return cart.getProducts() == null ? 0 : cart.getProducts().size();}  }
class C{  public static Map<String,Set<String>> parse(final URI uri){  return parse(uri,true);}  }
class C{  protected void verudocExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  verudocCodeLogic(mapping,form,request,response);  saveCurrentInvocation(KeysClientsInvocations.SOLICITUDES_VERUDOC,request);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TCLASSIFIER__AST_ELEMENT:    setAstElement((EObject)null);  return;case TypesPackage.TCLASSIFIER__DECLARED_COVARIANT_CONSTRUCTOR:setDeclaredCovariantConstructor(DECLARED_COVARIANT_CONSTRUCTOR_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @Override public void requestLocationSuccess(String locationName){  weatherUtils.requestWeather(locationName,this);  getLocation().realLocation=locationName;  DatabaseHelper.getInstance(this).insertLocation(getLocation());}  }
class C{  public IgfsPathIds parent(){  assert ids.length > 1;  String[] parentParts=new String[parts.length - 1];  IgniteUuid[] parentIds=new IgniteUuid[ids.length - 1];  System.arraycopy(parts,0,parentParts,0,parentParts.length);  System.arraycopy(ids,0,parentIds,0,parentIds.length);  return new IgfsPathIds(path.parent(),parentParts,parentIds);}  }
class C{  public void stopAnimation(){  this.clearAnimation();}  }
class C{  public Time(long value,Unit unit){  set(value,unit);}  }
class C{  public boolean isShown(){  if (this.drawerTransition.getStatus().equals(Status.STOPPED) && translateProperty.get() == 0)   return true;  return false;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("RejectKeySelector: [\n");  sb.append(super.toString());  sb.append(badKeySet);  sb.append("]");  return sb.toString();}  }
class C{  private Map<String,List<Metric>> fractureMetricIntoDayBoundary(List<Metric> metrics,MetricQuery query){  Map<String,List<Metric>> cacheMap=new TreeMap<String,List<Metric>>();  String cacheKey;  Long nextTimeStampDay;  Long previousTimeStampDay;  Long startTimeStampDay=query.getStartTimestamp();  Long endTimeStampDay=query.getEndTimestamp();  for (  Metric metric : metrics) {    previousTimeStampDay=startTimeStampDay;    nextTimeStampDay=getNextDayBoundaryTimeStamp(startTimeStampDay);    Metric tempMetric=new Metric(metric);    Map<Long,String> dataPoints=new LinkedHashMap<>();    for (    Map.Entry<Long,String> dataPoint : metric.getDatapoints().entrySet()) {      if (dataPoint.getKey() < nextTimeStampDay) {        dataPoints.put(dataPoint.getKey(),dataPoint.getValue());      } else {        while (dataPoint.getKey() >= nextTimeStampDay) {          tempMetric.setDatapoints(dataPoints);          cacheKey=constructMetricQueryKey(previousTimeStampDay,metric,query);          cacheMap.put(cacheKey,new ArrayList<Metric>(Arrays.asList(tempMetric)));          cacheKey=constructMetricQueryKey(previousTimeStampDay,query);          if (cacheMap.containsKey(cacheKey)) {            cacheMap.get(cacheKey).addAll(Arrays.asList(tempMetric));          } else {            cacheMap.put(cacheKey,new ArrayList<Metric>(Arrays.asList(tempMetric)));          }          tempMetric=new Metric(metric);          dataPoints=new LinkedHashMap<>();          previousTimeStampDay=nextTimeStampDay;          nextTimeStampDay=getNextDayBoundaryTimeStamp(nextTimeStampDay);        }        dataPoints.put(dataPoint.getKey(),dataPoint.getValue());      }    }    while (nextTimeStampDay < getNextDayBoundaryTimeStamp(endTimeStampDay)) {      tempMetric.setDatapoints(dataPoints);      cacheKey=constructMetricQueryKey(previousTimeStampDay,metric,query);      cacheMap.put(cacheKey,new ArrayList<Metric>(Arrays.asList(tempMetric)));      cacheKey=constructMetricQueryKey(previousTimeStampDay,query);      if (cacheMap.containsKey(cacheKey)) {        cacheMap.get(cacheKey).addAll(Arrays.asList(tempMetric));      } else {        cacheMap.put(cacheKey,new ArrayList<Metric>(Arrays.asList(tempMetric)));      }      tempMetric=new Metric(metric);      dataPoints=new LinkedHashMap<>();      previousTimeStampDay=nextTimeStampDay;      nextTimeStampDay=getNextDayBoundaryTimeStamp(nextTimeStampDay);    }  }  return cacheMap;}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    System.arraycopy(mKeys,i + 1,mKeys,i,mSize - (i + 1));    System.arraycopy(mValues,i + 1,mValues,i,mSize - (i + 1));    mSize--;  }}  }
class C{  @Override public String compile(final String content,final String name){  final String precompiledFunction=super.compile(content,"");  return String.format("(function() {Ember.TEMPLATES[%s] = Ember.Handlebars.template(%s)})();",name,precompiledFunction);}  }
class C{  public void draw(){  GLES20.glUseProgram(getProgram());  int positionHandle=GLES20.glGetAttribLocation(getProgram(),VERTEX_POSITION);  GLES20.glEnableVertexAttribArray(positionHandle);  GLES20.glVertexAttribPointer(positionHandle,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,COORDS_PER_VERTEX * SIZE_OF_FLOAT,vertexBuffer);  int colorHandle=GLES20.glGetUniformLocation(getProgram(),VERTEX_COLOR);  GLES20.glUniform4fv(colorHandle,1,getColor(),0);  GLES20.glDrawElements(GLES20.GL_TRIANGLE_FAN,shortBuffer.capacity(),GLES20.GL_UNSIGNED_SHORT,shortBuffer);  GLES20.glDisableVertexAttribArray(positionHandle);}  }
class C{  public DefaultIdmAccessorFactory(){  logger.debug("DefaultIdmAccessorFactory constructor");  idmClient=new CasIdmClient(Shared.IDM_HOSTNAME);  Validate.notNull(idmClient);}  }
class C{  @Override @SuppressWarnings("unchecked") default <U>Streamable<U> ofType(final Class<? extends U> type){  return fromStream(reactiveSeq().ofType(type));}  }
class C{  public TagNode clean(URL url) throws IOException {  return clean(url,properties.getCharset());}  }
class C{  public RSAPublicKey parsePEMPublicKey(String pem) throws GeneralSecurityException {  try {    byte[] bs=decodeAsciiArmoredPEM(pem);    ByteBuffer data=ByteBuffer.wrap(bs);    final ASN1Object ob=asn1Parser.parseASN1(data);    final List<ASN1Object> seq=asn1ObjectToSequence(ob,2);    final BigInteger modulus=asn1ObjectToBigInt(seq.get(0));    final BigInteger exponent=asn1ObjectToBigInt(seq.get(1));    return createKeyFromModulusAndExponent(modulus,exponent);  } catch (  IllegalArgumentException e) {    throw new InvalidKeyException();  }}  }
class C{  protected String encodeNode(final String name){  return nameCoder.encodeNode(name);}  }
class C{  public INode remove(){  return stack.pop();}  }
class C{  public OneRRule newNominalRule(Attribute attr,Instances data,int[] missingValueCounts) throws Exception {  int[][] counts=new int[attr.numValues()][data.classAttribute().numValues()];  Enumeration<Instance> enu=data.enumerateInstances();  while (enu.hasMoreElements()) {    Instance i=enu.nextElement();    if (i.isMissing(attr)) {      missingValueCounts[(int)i.classValue()]++;    } else {      counts[(int)i.value(attr)][(int)i.classValue()]++;    }  }  OneRRule r=new OneRRule(data,attr);  for (int value=0; value < attr.numValues(); value++) {    int best=Utils.maxIndex(counts[value]);    r.m_classifications[value]=best;    r.m_correct+=counts[value][best];  }  return r;}  }
class C{  private void calculateAtHashClaim(final OAuth2AccessTokenEntity accessToken,final JWSAlgorithm signingAlg,final JWTClaimsSet.Builder idClaims,final Set<String> responseTypes){  if (responseTypes.contains(OIDCConstants.TOKEN)) {    final Base64URL atHash=IdTokenHashUtils.getAccessTokenHash(signingAlg,accessToken);    idClaims.claim(OIDCConstants.AT_HASH,atHash);    log.debug("{} is set to {}",OIDCConstants.AT_HASH,atHash);  }}  }
class C{  void elementDequeued(){  if (count == 0)   queueIsEmpty(); else   if (takeIndex == 0)   takeIndexWrapped();}  }
class C{  public Builder fileNameGenerator(FileNameGenerator fileNameGenerator){  this.fileNameGenerator=fileNameGenerator;  return this;}  }
class C{  public JSONWriter value(boolean b) throws JSONException {  return this.append(b ? "true" : "false");}  }
class C{  public boolean isUpdate(){  if (update == null) {    return true;  } else {    return update;  }}  }
class C{  public ToStringBuilder append(String fieldName,boolean[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  public void mouseDragged(MouseEvent event){}  }
class C{  @Field(10) public __VARIANT_NAME_3_union date(double date){  this.io.setDoubleField(this,10,date);  return this;}  }
class C{  public void use(String ID){  Long thisLong=new Long(new java.util.Date().getTime());  cacheUsage.put(ID,thisLong);}  }
class C{  public void addAggregators(@NotNull String metric,@NotNull SingleMetricAggregator[] aggregators,@NotNull String[] logicalMetricNames){  Preconditions.checkNotNull(metric,"metric");  Preconditions.checkNotNull(aggregators,"aggregators");  Preconditions.checkNotNull(logicalMetricNames,"logicalMetricNames");  Preconditions.checkArgument(aggregators.length == logicalMetricNames.length,"different length aggregators and logical names");  addAggregatorsHelper(metric,aggregators,logicalMetricNames);}  }
class C{  private void checkAndUpdateLocalSiteState(){  Site localSite=drUtil.getLocalSite();  SiteState state=localSite.getState();  if (SiteState.STANDBY_SYNCED.equals(state) || SiteState.STANDBY_INCR_SYNCING.equals(state)) {    log.info("Updating local site from {} to STANDBY_PAUSED since active is unreachable",state);    localSite.setState(SiteState.STANDBY_PAUSED);    coordinatorExt.getCoordinatorClient().persistServiceConfiguration(localSite.toConfiguration());    coordinatorExt.rescheduleDrSiteNetworkMonitor();  } else   if (SiteState.STANDBY_SYNCING.equals(state) || SiteState.STANDBY_RESUMING.equals(state) || SiteState.STANDBY_ADDING.equals(state)) {    log.info("Updating local site from {} to STANDBY_ERROR since active is unreachable",localSite.getState());    localSite.setLastState(state);    localSite.setState(SiteState.STANDBY_ERROR);    coordinatorExt.getCoordinatorClient().persistServiceConfiguration(localSite.toConfiguration());  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public String numberOfAttributesTipText(){  return "The number of dimensions (attributes) the data should" + " be reduced to.";}  }
class C{  public void test_getPrimeExponentQ(){  assertEquals("invalid prime exponent Q",Util.rsaCrtParam.getPrimeExponentQ(),key.getPrimeExponentQ());}  }
class C{  public boolean swapBuffers(EGLSurface eglSurface){  return EGL14.eglSwapBuffers(mEGLDisplay,eglSurface);}  }
class C{  public void start() throws IOException {  Thread thread=new Thread(this);  thread.setName("TCPMessageProcessorThread");  thread.setPriority(Thread.MAX_PRIORITY);  thread.setDaemon(true);  this.sock=sipStack.getNetworkLayer().createServerSocket(getPort(),0,getIpAddress());  if (getIpAddress().getHostAddress().equals(IN_ADDR_ANY) || getIpAddress().getHostAddress().equals(IN6_ADDR_ANY)) {    super.setIpAddress(sock.getInetAddress());  }  this.isRunning=true;  thread.start();}  }
class C{  public void initialise(double epsilon){  this.suppliedKernelWidth=epsilon;  sortedObservations=null;}  }
class C{  private void createRasterProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/raster.vs",GL_VERTEX_SHADER);  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/raster.fs",GL_FRAGMENT_SHADER);  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertexPosition");  glBindAttribLocation(program,1,"vertexNormal");  glBindFragDataLocation(program,0,"worldPosition_out");  glBindFragDataLocation(program,1,"worldNormal_out");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.rasterProgram=program;}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  public static void deleteFile(File file){  if (file.delete()) {    Log.d(StorageUtil.class.getSimpleName(),"Deleted file at " + file.getPath());  } else {    Log.w(StorageUtil.class.getSimpleName(),"Unable to delete file at " + file.getPath());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final void testMinLengthWithContextAndResourceIdParameters(){  assertNotNull(Validators.minLength(getContext(),android.R.string.cancel,1));}  }
class C{  public boolean compact(int targetFillRate,int write){  if (!reuseSpace) {    return false;  }synchronized (compactSync) {    checkOpen();    ArrayList<Chunk> old;synchronized (this) {      old=compactGetOldChunks(targetFillRate,write);    }    if (old == null || old.size() == 0) {      return false;    }    compactRewrite(old);    return true;  }}  }
class C{  public static synchronized TinyBus from(Context context){  if (bus == null) {    final TinyBusDepot depot=TinyBusDepot.get(context);    bus=depot.getBusInContext(context);    if (bus == null) {      bus=depot.createBusInContext(context);    }  }  return bus;}  }
class C{  private void findAndReadDescriptor(MyBufferedInputStream baseStream,LocalFileHeader header) throws IOException {  LogUtil.i1("amseys");  final Decompressor decompressor=Decompressor.init(baseStream,header);  int uncompressedSize=0;  while (true) {    int blockSize=decompressor.read(null,0,2048);    if (blockSize <= 0) {      break;    }    uncompressedSize+=blockSize;  }  header.UncompressedSize=uncompressedSize;  Decompressor.storeDecompressor(decompressor);}  }
class C{  @Override protected void onSizeChanged(int width,int height,int oldWidth,int oldHeight){  super.onSizeChanged(width,height,oldWidth,oldHeight);  canvasBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  drawCanvas=new Canvas(canvasBitmap);}  }
class C{  public VOLocalizedText(String locale,String text){  this.locale=locale;  this.text=text;}  }
class C{  public void aquireUpgradeLockByLoop(){  System.out.println("Start busy loop to get the lock...");  boolean flag=false;  String leader;  while (flag != true) {    while ((leader=coordinatorClientExt.getUpgradeLockOwner(upgradeLockId)) != null) {      while ((flag=coordinatorClientExt.getPersistentLock(leader,upgradeLockId)) != true) {        leader=coordinatorClientExt.getUpgradeLockOwner(upgradeLockId);      }      System.out.println("Hold on Succeed!");      log.info("The {} get the lock, {}",leader,flag);      break;    }  }}  }
class C{  protected static boolean regexReplace(JTextArea textArea,String toFind,String replaceWith,boolean forward,boolean matchCase,boolean wholeWord) throws PatternSyntaxException {  Caret c=textArea.getCaret();  int start=makeMarkAndDotEqual(textArea,forward);  String findIn=getFindInText(textArea,start,forward);  if (findIn == null)   return false;  RegExReplaceInfo info=getRegExReplaceInfo(toFind,findIn,forward,matchCase,wholeWord,replaceWith);  findIn=null;  if (info != null) {    c.setSelectionVisible(true);    int matchStart=info.getStartIndex();    int matchEnd=info.getEndIndex();    if (forward) {      matchStart+=start;      matchEnd+=start;    }    selectAndPossiblyCenter(textArea,matchStart,matchEnd);    textArea.replaceSelection(info.getReplacement());    return true;  }  return false;}  }
class C{  public void register(ITesterDescriptor testerDescriptor){  final String testerId=testerDescriptor.getId();  if (descriptors.containsKey(testerId))   throw new IllegalArgumentException("cannot register two testers with the same ID: " + testerId);  descriptors.put(testerId,testerDescriptor);}  }
class C{  @Override public String toString(){  return "<GrantorInfo id=" + this.id + " versionId="+ this.versionId+ " serialNumber="+ this.serialNumber+ " needsRecovery="+ this.needsRecovery+ " initiatingTransfer="+ this.initiatingTransfer+ ">";}  }
class C{  public String toString(){  return contact.toString();}  }
class C{  public boolean isZoomEnabled(){  return isZoomXEnabled() || isZoomYEnabled();}  }
class C{  public static String[] split(String str,String delims,boolean trimTokens){  StringTokenizer tokenizer=new StringTokenizer(str,delims);  int n=tokenizer.countTokens();  String[] list=new String[n];  for (int i=0; i < n; i++) {    if (trimTokens) {      list[i]=tokenizer.nextToken().trim();    } else {      list[i]=tokenizer.nextToken();    }  }  return list;}  }
class C{  public static Date lastSecondOfDay(Date date){  if (date == null) {    return null;  }  DateTime dateTime=new DateTime(date);  return dateTime.withField(DateTimeFieldType.hourOfDay(),23).withField(DateTimeFieldType.minuteOfHour(),59).withField(DateTimeFieldType.secondOfMinute(),59).toDate();}  }
class C{  public void testBinaryWrite() throws Exception {  _testBinaryWrite(false);  _testBinaryWrite(true);}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public String exportResources(VariableSpace space,Map<String,ResourceDefinition> definitions,ResourceNamingInterface resourceNamingInterface,Repository repository) throws KettleException {  try {    if (Const.isEmpty(filenameField)) {      FileObject fileObject=KettleVFS.getFileObject(space.environmentSubstitute(filename),space);      if (fileObject.exists()) {        filename=resourceNamingInterface.nameResource(fileObject,space,true);        return filename;      }    }    return null;  } catch (  Exception e) {    throw new KettleException(e);  }}  }
class C{  public Builder nst(){  this.withStackTrace=false;  this.stackTraceDepth=0;  this.stackTraceSet=true;  return this;}  }
class C{  @SafeVarargs public static <T>boolean addAll(Collection<? super T> c,T... a){  boolean modified=false;  for (int i=0; i < a.length; i++) {    modified|=c.add(a[i]);  }  return modified;}  }
class C{  public StateObject addStateObject(String name){  if (name == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return addStateObject(null,name);}  }
class C{  public void handleScroll(float distY){  if (getHeight() > 0 && originalImage != null) {    if (scrollY <= originalImage.getHeight() - getHeight()) {      adaptedImage=Bitmap.createBitmap(originalImage,0,(int)-distY,screenWidth,getHeight());      invalidate();    }  }}  }
class C{  private void drawCircle(Canvas canvas,Paint paint,float x,float y){  canvas.drawCircle(x,y,size,paint);}  }
class C{  protected boolean automaticallyFetchFromURL(){  return true;}  }
class C{  public static void clearCookiesFromStorage(){  if (Storage.getInstance().exists(Cookie.STORAGE_NAME)) {    Storage.getInstance().deleteStorageFile(Cookie.STORAGE_NAME);  }  Util.getImplementation().clearNativeCookies();}  }
class C{  void fireDocumentUndo(int offset,String text,String preservedText,Object source,int eventType,boolean isCompound){  if (offset < 0)   return;  eventType=isCompound ? eventType | RichDocumentUndoEvent.COMPOUND : eventType;  RichDocumentUndoEvent event=new RichDocumentUndoEvent(fDocument,offset,text,preservedText,eventType,source);  Object[] listeners=fDocumentUndoListeners.getListeners();  for (int i=0; i < listeners.length; i++) {    ((IRichDocumentUndoListener)listeners[i]).documentUndoNotification(event);  }}  }
class C{  protected Set<String> learnFromWizardAction(Assignment wizardAction){  DialogueState state=system.getState();  Set<String> relevantParams=state.getParameterIds().stream().filter(null).collect(Collectors.toSet());  if (!relevantParams.isEmpty()) {    try {      List<String> queryVars=new ArrayList<String>(relevantParams);      queryVars.addAll(wizardAction.getVariables());      Query query=new Query.UtilQuery(state,queryVars,new Assignment());      EmpiricalDistribution empiricalDistrib=sampler.getWeightedSamples(query,null);      for (      String param : relevantParams) {        ChanceNode paramNode=state.getChanceNode(param);        ProbDistribution newDistrib=empiricalDistrib.getMarginal(param,paramNode.getInputNodeIds());        paramNode.setDistrib(newDistrib);      }    } catch (    RuntimeException e) {      log.warning("cannot update parameters based on wizard action: " + e);    }  }  return relevantParams;}  }
class C{  public static Object ask(ActorSelection actorSelection,Object message) throws Exception {  return ask(actorSelection,message,DEFAULT_ASK_TIMEOUT);}  }
class C{  public SQLSyntaxErrorException(){}  }
class C{  public void stop(){  if (animator != null) {    animator.stop();    animator=null;  }  animating=false;  resetBars();}  }
class C{  private void recursivelyIncreaseFrequencyOfNextDepth(Map<Item,Header> headerTable,FPTreeNode startingNode,int currentDepth){  int frequency=startingNode.getFrequency(currentDepth);  if (frequency > 0) {    startingNode.increaseFrequency(currentDepth + 1,frequency);    headerTable.get(startingNode.getNodeItem()).getFrequencies().increaseFrequency(currentDepth + 1,frequency);    for (    FPTreeNode childNode : startingNode.getChildren().values()) {      recursivelyIncreaseFrequencyOfNextDepth(headerTable,childNode,currentDepth);    }  }}  }
class C{  public void log(Level level,String message,Object... args){  logPool.addLast(new LogMessage(level.getLevel(),String.format(message,args)));}  }
class C{  public static int startPosition(Token token){  int min=token.getTok().getPosition();  for (  Input.Tok tok : token.getToksBefore()) {    min=Math.min(min,tok.getPosition());  }  return min;}  }
class C{  public void write(int b) throws IOException {  buf.put((byte)b);}  }
class C{  public static <T>T fromJson(String json,Class<T> clazz){  return _gson.fromJson(json,clazz);}  }
class C{  public LoadDirectoryAction(Application app,@Nullable View view){  super(app,view);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  protected boolean contains(String fileName){  if (fileName == null || fileName.length() == 0) {    return false;  }  Iterator<Storage> it=getStorageList().iterator();  Storage storage=null;  boolean result=false;  while (it.hasNext()) {    storage=it.next();    if (storage.contains(fileName)) {      result=true;      break;    }  }  return result;}  }
class C{  public PatternFollowedByExpr(){}  }
class C{  public static void addErrorCode(String namespace,int errorCode,String labelKey){  errMsgKeyMap.put(namespace + errorCode,labelKey);}  }
class C{  public FastItemAdapter<Item> remove(int position){  mItemAdapter.remove(position);  return this;}  }
class C{  public GeoShapeQueryBuilder strategy(SpatialStrategy strategy){  this.strategy=strategy;  return this;}  }
class C{  public CodeAttr(){  this.stack_size=1;  this.num_locals=1;  this.ctb=null;  this.insns=new Vector();  generic=new Vector();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (genePm == null) {    throw new NullPointerException();  }  if (glassFunction == null) {    throw new NullPointerException();  }  if (initializer == null) {    throw new NullPointerException();  }  if (history == null) {    throw new NullPointerException();  }  if (simulator == null) {    throw new NullPointerException();  }}  }
class C{  public Vector2 add(float x,float y){  this.x+=x;  this.y+=y;  return this;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public CorrelationAnalysisSolution(LinearEquationSystem solution,Relation<V> db,double[][] strongEigenvectors,double[][] weakEigenvectors,double[][] similarityMatrix,double[] centroid){  this(solution,db,strongEigenvectors,weakEigenvectors,similarityMatrix,centroid,NumberFormat.getInstance(Locale.US));}  }
class C{  public BaseThumbnailSetCollectionPage(final BaseThumbnailSetCollectionResponse response,final IThumbnailSetCollectionRequestBuilder builder){  super(response.value,builder);}  }
class C{  private ComparableTimSort(Object[] a){  this.a=a;  int len=a.length;  @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) Object[] newArray=new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];  tmp=newArray;  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  private static boolean hasExecutionWindows(){  List<ExecutionWindowRestRep> executionWindows=ExecutionWindowUtils.getExecutionWindows();  return (executionWindows != null && !executionWindows.isEmpty());}  }
class C{  public void remember(final Resource resource){  final WroManager manager=getManagerFactory().create();  final HashStrategy hashStrategy=manager.getHashStrategy();  final UriLocatorFactory locatorFactory=manager.getUriLocatorFactory();  if (rememberedSet.contains(resource.getUri())) {    getLog().debug("Resource with uri '" + resource.getUri() + "' has already been updated in this run.");  } else {    try {      final String fingerprint=hashStrategy.getHash(locatorFactory.locate(resource.getUri()));      getBuildContextHolder().setValue(resource.getUri(),fingerprint);      rememberedSet.add(resource.getUri());      getLog().debug("Persist fingerprint for resource '" + resource.getUri() + "' : "+ fingerprint);      if (resource.getType() == ResourceType.CSS) {        final Reader reader=new InputStreamReader(locatorFactory.locate(resource.getUri()));        getLog().debug("Check @import directive from " + resource);        persistFingerprintsForCssImports(resource,reader);      }    } catch (    final IOException e) {      getLog().debug("could not check fingerprint of resource: " + resource);    }  }}  }
class C{  public void testWriteDecRefRegressionTest() throws Exception {  Character c='\u4300';  String test=c.toString();  sw=new StringWriter();  writer=renderKit.createResponseWriter(sw,"text/html","UTF-8");  writer.writeText(test,"value");  assertTrue("&#17152;","&#17152;".equals(sw.toString()));}  }
class C{  public static boolean areMappedObjects(Class<?> dClass,Class<?> sClass,XML xml){  return isMapped(dClass,xml) || isMapped(sClass,xml);}  }
class C{  public void benchHasParentRandomTerms(){  QueryBuilder lookupQuery;  QueryBuilder mainQuery=matchAllQuery();  Set<String> names=new HashSet<>(NUM_PARENTS);  FilterJoinBuilder stringFilter=QueryBuilders.filterJoin("pid").indices(PARENT_INDEX).types(PARENT_TYPE).path("id");  FilterJoinBuilder longFilter=QueryBuilders.filterJoin("num").indices(PARENT_INDEX).types(PARENT_TYPE).path("num");  long tookString=0;  long tookLong=0;  int expected=0;  warmFieldData("id","pid");  warmFieldData("num","num");  warmFieldData("name",null);  log("==== HAS PARENT RANDOM TERMS ====");  for (int i=0; i < NUM_QUERIES; i++) {    int randNum=random.nextInt(NUM_PARENTS / NUM_QUERIES) + 1;    for (int j=0; j < randNum; j++) {      names.add("test" + (random.nextInt(NUM_PARENTS) + 1));    }    lookupQuery=boolQuery().filter(termsQuery("name",names));    expected=NUM_CHILDREN_PER_PARENT * names.size();    stringFilter.query(lookupQuery);    longFilter.query(lookupQuery);    tookString+=runQuery("string",i,CHILD_INDEX,expected,filteredQuery(mainQuery,stringFilter));    tookLong+=runQuery("long",i,CHILD_INDEX,expected,filteredQuery(mainQuery,longFilter));  }  log("string: " + (tookString / NUM_QUERIES) + "ms avg");  log("long  : " + (tookLong / NUM_QUERIES) + "ms avg");  log("");}  }
class C{  public void addEvent(int colour,double time){  colourChanges.add(colour);  changeHeights.add(time);  sanityCheck();}  }
class C{  public void addChapUsername(java.lang.String param){  if (localChapUsername == null) {    localChapUsername=new java.lang.String[]{};  }  localChapUsernameTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localChapUsername);  list.add(param);  this.localChapUsername=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public ClassifyImagesOptions build(){  Validator.isTrue((url != null) || (imagesFile != null),"url or imagesFile should be specified");  return new ClassifyImagesOptions(this);}  }
class C{  public boolean isAllowedToLeave() throws RcsPersistentStorageException, RcsGenericException {  try {    return mGroupChatInf.isAllowedToLeave();  } catch (  Exception e) {    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static Object byteArrToObject(byte[] bytes){  if (bytes == null) {    return null;  }  ByteArrayInputStream bais=new ByteArrayInputStream(bytes);  try {    ObjectInputStream ois=new ObjectInputStreamWithTCCL(bais);    return ois.readObject();  } catch (  IOException e) {    if (e.getMessage() != null) {      throw new RuntimeException("IO error de-serializing object: " + e.getMessage(),e);    }    throw new RuntimeException("IO error de-serializing object",e);  }catch (  ClassNotFoundException e) {    throw new RuntimeException("Class not found de-serializing object: " + e.getMessage(),e);  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public static void compressDbTables(Set<String> tableNamesSet) throws AdeException {  logger.trace("compressDbTables( names<Set> ) -> entry");  final String[] tableNamesArray=tableNamesSet.toArray(new String[tableNamesSet.size()]);  compressDbTables(tableNamesArray);  logger.trace("compressDbTables( names<Set> ) <- exit");}  }
class C{  public void repaint(long time,int x,int y,int width,int height){  if (RepaintManager.HANDLE_TOP_LEVEL_PAINT) {    RepaintManager.currentManager(this).addDirtyRegion(this,x,y,width,height);  } else {    super.repaint(time,x,y,width,height);  }}  }
class C{  @Override public int hashCode(){  return notificationConfiguration != null ? notificationConfiguration.hashCode() : 0;}  }
class C{  public Table createTable(CreateTableData data){synchronized (database) {    data.schema=this;    throw DbException.getUnsupportedException("Create table unsupported");  }}  }
class C{  public void skippedEntity(String name) throws SAXException {  if (contentHandler != null) {    contentHandler.skippedEntity(name);  }}  }
class C{  public StunException(Throwable cause){  super(cause);}  }
class C{  @Override public void endElement(String uri,String localName,String qName) throws SAXException {  writeText4Links();  if (!mIgnoredTags.isEmpty() && mIgnoredTags.peek().equalsIgnoreCase(qName)) {    mIgnoredTags.pop();  } else {    if (!(htmlMode && (uri.equals("http://www.w3.org/1999/xhtml") || uri.equals("")) && (qName.equals("area") || qName.equals("base") || qName.equals("basefont")|| qName.equals("br")|| qName.equals("col")|| qName.equals("frame")|| qName.equals("hr")|| qName.equals("img")|| qName.equals("input")|| qName.equals("isindex")|| qName.equals("link")|| qName.equals("meta")|| qName.equals("param")))) {      write("</");      writeName(uri,localName,qName,true);      write('>');    }    if (elementLevel == 1) {      write('\n');    }    if (htmlMode && localName.equals("a")) {      mIgnoreChars=false;    }    cdataElement=false;    super.endElement(uri,localName,qName);    nsSupport.popContext();    elementLevel--;  }}  }
class C{  public FoldingDescriptor(@NotNull ASTNode node,@NotNull TextRange range){  this(node,range,null);}  }
class C{  public char charAt(int index){  return toString().charAt(index);}  }
class C{  protected AttributeSelection search(ASSearch search,ASEvaluation eval,Instances data) throws Exception {  AttributeSelection result;  result=new AttributeSelection();  result.setSeed(42);  result.setSearch(search);  result.setEvaluator(eval);  result.SelectAttributes(data);  return result;}  }
class C{  byte[] update(byte[] input,int inputOffset,int inputLen){  return cipher.update(input,inputOffset,inputLen);}  }
class C{  public void loadLocal(final int local){  loadInsn(getLocalType(local),local);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Album al=getAlbum(stack);  return (al == null) ? "" : al.getYear();}  }
class C{  public void subscribe(String clientHandle,String topic,int qos,String invocationContext,String activityToken){  MqttConnection client=getConnection(clientHandle);  client.subscribe(topic,qos,invocationContext,activityToken);}  }
class C{  private void addNewField(){  AttributeFieldTableModel model=(AttributeFieldTableModel)fieldTable.getModel();  model.createNewField();  updateFieldComboBox();}  }
class C{  private void resetUi(){  if (null != mWaitWhileSearchInProgressView) {    mWaitWhileSearchInProgressView.setVisibility(View.GONE);  }  if (null != mBackgroundImageView) {    mBackgroundImageView.setVisibility(View.VISIBLE);  }  if (null != mNoResultsTxtView) {    mNoResultsTxtView.setVisibility(View.GONE);  }  if (null != mLoadOldestContentView) {    mLoadOldestContentView.setVisibility(View.GONE);  }}  }
class C{  public static <O extends Object>O deepCopy(O orig){  Object obj=null;  try {    ByteArrayOutputStream bos=new ByteArrayOutputStream();    ObjectOutputStream out=new ObjectOutputStream(bos);    out.writeObject(orig);    out.flush();    out.close();    ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));    obj=in.readObject();  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Object couldn't be copied",e);  }catch (  ClassNotFoundException e) {    e.printStackTrace();    throw new RuntimeException("Object couldn't be copied",e);  }  return (O)obj;}  }
class C{  protected void waitForSyncFailure(){  EventBusIdlingResource<SyncFailedEvent> syncFailedEventIdlingResource=new EventBusIdlingResource<>(UUID.randomUUID().toString(),mEventBus);  Espresso.registerIdlingResources(syncFailedEventIdlingResource);}  }
class C{  public void onUndeployScheduled(){  pendingUndeploy=true;}  }
class C{  public void testDefaultCredentials() throws Exception {  startServer(47502);  fetchPage("/basic.jsp",200);}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (get(i) == MISSING_VALUE) {      count++;    }  }  return count;}  }
class C{  public static String attributeName(int p_M_AttributeSetInstance_ID) throws SQLException {  if (p_M_AttributeSetInstance_ID == 0)   return "";  StringBuffer sb=new StringBuffer();  String sql="SELECT asi.Lot, asi.SerNo, asi.GuaranteeDate " + "FROM M_AttributeSetInstance asi " + "WHERE asi.M_AttributeSetInstance_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_M_AttributeSetInstance_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    String lot=rs.getString(1);    if (lot != null && lot.length() > 0)     sb.append(lot).append(" ");    String serNo=rs.getString(2);    if (serNo != null && serNo.length() > 0)     sb.append("#").append(serNo).append(" ");    Date guaranteeDate=null;    Object guarantee=rs.getObject(3);    if (guarantee != null) {      if (guarantee instanceof Timestamp) {        Timestamp ts=(Timestamp)guarantee;        guaranteeDate=new Date(ts.getTime());      } else {        guaranteeDate=(Date)guaranteeDate;      }    }    if (guaranteeDate != null)     sb.append(guaranteeDate).append(" ");  }  rs.close();  pstmt.close();  sql="SELECT ai.Value, a.Name " + "FROM M_AttributeInstance ai" + " INNER JOIN M_Attribute a ON (ai.M_Attribute_ID=a.M_Attribute_ID AND a.IsInstanceAttribute='Y') "+ "WHERE ai.M_AttributeSetInstance_ID=?";  pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_M_AttributeSetInstance_ID);  rs=pstmt.executeQuery();  while (rs.next()) {    sb.append(rs.getString(1)).append(":").append(rs.getString(2)).append(" ");  }  rs.close();  pstmt.close();  if (sb.length() == 0)   return "";  sb.insert(0," (");  sb.append(")");  return sb.toString();}  }
class C{  public TechnicalServiceMultiSubscriptions(){}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public XTIFFDirectory createDirectory(SeekableStream stream,long ifd_offset) throws IOException {  return new GeoTIFFDirectory(stream,ifd_offset);}  }
class C{  public synchronized void init(Context context,List<Class<?>> objects){  for (int i=0; i < objects.size(); i++) {    Class<?> object=objects.get(i);    findTableDetails(context,object);  }}  }
class C{  public String doInput1(){  return "input1";}  }
class C{  public OptimizedMarshaller(){  if (!available())   throw new IgniteException("Using OptimizedMarshaller on unsupported JVM version (some of " + "JVM-private APIs required for the marshaller to work are missing).");}  }
class C{  public ClientUser(String uname,String data,KeyPair kp){  super(uname,data,(DSAPublicKey)kp.getPublic());  KeyOps.saveDSAPrivateKeyFile(uname,(DSAPrivateKey)kp.getPrivate());}  }
class C{  public void drawCalendar(){  drawCalendar(displayedYearMonth);}  }
class C{  public void start(){  super.start();  createGrids();  int posx=trapGridWidth / 2;  int posy=trapGridHeight / 2;  if (modelBalls) {    double x=(0.5 + posx) * trapSizeX;    double y=(0.5 + posy) * trapSizeY;    double z=computeFishTankCeiling();    Ball b=new Ball(x,y,z,0.0,0.0,0.0);    ballSpace.setObjectLocation(b,new Double3D(x,y,z));    schedule.scheduleOnce(Schedule.EPOCH,b);  } else   schedule.scheduleOnce(initialVelocity * GRAVITY_ACC,new MouseTrap(posx,posy));}  }
class C{  private String afterSave(MAssetGroup ag,boolean newRecord) throws Exception {  if (ag.isDefault()) {    DB.executeUpdateEx("UPDATE A_Asset_Group SET IsDefault='N' WHERE IsActive='Y' AND Ad_Client_ID=? AND Ad_Org_ID=? AND A_Asset_Group_ID !=?",new Object[]{ag.getAD_Client_ID(),ag.getAD_Org_ID(),ag.getA_Asset_Group_ID()},ag.get_TrxName());  }  return null;}  }
class C{  @Override public void reconcileFlow(OFMatchReconcile ofmRcIn,EventPriority priority){  if (ofmRcIn == null)   return;  OFMatchReconcile myOfmRc=new OFMatchReconcile(ofmRcIn);  flowQueue.offer(myOfmRc,priority);  ctrFlowReconcileRequest.increment();  Date currTime=new Date();  long delay=0;  if (currTime.after(new Date(lastReconcileTime.getTime() + 1000))) {    delay=0;  } else {    delay=FLOW_RECONCILE_DELAY_MILLISEC;  }  flowReconcileTask.reschedule(delay,TimeUnit.MILLISECONDS);  if (logger.isTraceEnabled()) {    logger.trace("Reconciling flow: {}, total: {}",myOfmRc.toString(),flowQueue.size());  }}  }
class C{  private void writeFile(String fileName,String content) throws IOException {  OutputStream out=new FileOutputStream(fileName);  out.write(content.getBytes());  out.flush();  out.close();}  }
class C{  public static boolean errorIsExpected(Error failure){  return expectedClass != null && expectedClass.isInstance(failure);}  }
class C{  private String formatArgs(String format,Object... args){  if (format != null) {    return String.format(format,args);  } else {    StringBuilder sb=new StringBuilder();    for (int i=0, N=args.length; i < N; i++) {      if (i != 0) {        sb.append(", ");      }      sb.append(args[i]);    }    return sb.toString();  }}  }
class C{  private static Integer forPrimary(Ignite g){  return forPrimary(g,-1);}  }
class C{  public String sqlMetadata_sequenceNames(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_sequenceNames(catalogName,schemaName);}  }
class C{  private byte[] createContentDisposition(final String key){  return ("Content-Disposition: form-data; name=\"" + key + "\"\r\n").getBytes();}  }
class C{  public void openElement(String element) throws IOException {  openElement(element,null);}  }
class C{  public StorageIndex(TungstenProperties props){  this.version=props.getString(VERSION);  this.index=props.getLong(INDEX);}  }
class C{  private static boolean loadTabDetails(GridTabVO vo,ResultSet rs){  MRole role=MRole.getDefault(vo.ctx,false);  boolean showTrl="Y".equals(Env.getContext(vo.ctx,"#ShowTrl"));  boolean showAcct="Y".equals(Env.getContext(vo.ctx,"#ShowAcct"));  boolean showAdvanced="Y".equals(Env.getContext(vo.ctx,"#ShowAdvanced"));  try {    vo.AD_Tab_ID=rs.getInt("AD_Tab_ID");    Env.setContext(vo.ctx,vo.WindowNo,vo.TabNo,GridTab.CTX_AD_Tab_ID,String.valueOf(vo.AD_Tab_ID));    vo.Name=rs.getString("Name");    Env.setContext(vo.ctx,vo.WindowNo,vo.TabNo,GridTab.CTX_Name,vo.Name);    if (rs.getString("IsTranslationTab").equals("Y")) {      vo.TableName=rs.getString("TableName");      if (!Env.isBaseTranslation(vo.TableName) && !Env.isMultiLingualDocument(vo.ctx))       showTrl=false;      if (!showTrl) {        CLogger.get().config("TrlTab Not displayed - AD_Tab_ID=" + vo.AD_Tab_ID + "="+ vo.Name+ ", Table="+ vo.TableName+ ", BaseTrl="+ Env.isBaseTranslation(vo.TableName)+ ", MultiLingual="+ Env.isMultiLingualDocument(vo.ctx));        return false;      }    }    if (!showAdvanced && rs.getString("IsAdvancedTab").equals("Y")) {      CLogger.get().config("AdvancedTab Not displayed - AD_Tab_ID=" + vo.AD_Tab_ID + " "+ vo.Name);      return false;    }    if (!showAcct && rs.getString("IsInfoTab").equals("Y")) {      CLogger.get().fine("AcctTab Not displayed - AD_Tab_ID=" + vo.AD_Tab_ID + " "+ vo.Name);      return false;    }    vo.DisplayLogic=rs.getString("DisplayLogic");    vo.AccessLevel=rs.getString("AccessLevel");    if (!role.canView(vo.ctx,vo.AccessLevel)) {      CLogger.get().fine("No Role Access - AD_Tab_ID=" + vo.AD_Tab_ID + " "+ vo.Name);      return false;    }    Env.setContext(vo.ctx,vo.WindowNo,vo.TabNo,GridTab.CTX_AccessLevel,vo.AccessLevel);    vo.AD_Table_ID=rs.getInt("AD_Table_ID");    Env.setContext(vo.ctx,vo.WindowNo,vo.TabNo,GridTab.CTX_AD_Table_ID,String.valueOf(vo.AD_Table_ID));    if (!role.isTableAccess(vo.AD_Table_ID,true)) {      CLogger.get().config("No Table Access - AD_Tab_ID=" + vo.AD_Tab_ID + " "+ vo.Name);      return false;    }    if (rs.getString("IsReadOnly").equals("Y"))     vo.IsReadOnly=true;    vo.ReadOnlyLogic=rs.getString("ReadOnlyLogic");    if (rs.getString("IsInsertRecord").equals("N"))     vo.IsInsertRecord=false;    vo.Description=rs.getString("Description");    if (vo.Description == null)     vo.Description="";    vo.Help=rs.getString("Help");    if (vo.Help == null)     vo.Help="";    if (rs.getString("IsSingleRow").equals("Y"))     vo.IsSingleRow=true;    if (rs.getString("HasTree").equals("Y"))     vo.HasTree=true;    vo.AD_Table_ID=rs.getInt("AD_Table_ID");    vo.TableName=rs.getString("TableName");    if (rs.getString("IsView").equals("Y"))     vo.IsView=true;    vo.AD_Column_ID=rs.getInt("AD_Column_ID");    vo.Parent_Column_ID=rs.getInt("Parent_Column_ID");    if (rs.getString("IsSecurityEnabled").equals("Y"))     vo.IsSecurityEnabled=true;    if (rs.getString("IsDeleteable").equals("Y"))     vo.IsDeleteable=true;    if (rs.getString("IsHighVolume").equals("Y"))     vo.IsHighVolume=true;    vo.CommitWarning=rs.getString("CommitWarning");    if (vo.CommitWarning == null)     vo.CommitWarning="";    vo.WhereClause=rs.getString("WhereClause");    if (vo.WhereClause == null)     vo.WhereClause="";    if (vo.WhereClause.indexOf("=null") > 0)     vo.WhereClause.replaceAll("=null"," IS NULL ");    if (vo.WhereClause.trim().length() > 0) {      vo.WhereClause="(" + vo.WhereClause + ")";    }    vo.OrderByClause=rs.getString("OrderByClause");    if (vo.OrderByClause == null)     vo.OrderByClause="";    vo.AD_Process_ID=rs.getInt("AD_Process_ID");    if (rs.wasNull())     vo.AD_Process_ID=0;    vo.AD_Image_ID=rs.getInt("AD_Image_ID");    if (rs.wasNull())     vo.AD_Image_ID=0;    vo.Included_Tab_ID=rs.getInt("Included_Tab_ID");    if (rs.wasNull())     vo.Included_Tab_ID=0;    vo.TabLevel=rs.getInt("TabLevel");    if (rs.wasNull())     vo.TabLevel=0;    vo.IsSortTab=rs.getString("IsSortTab").equals("Y");    if (vo.IsSortTab) {      vo.AD_ColumnSortOrder_ID=rs.getInt("AD_ColumnSortOrder_ID");      vo.AD_ColumnSortYesNo_ID=rs.getInt("AD_ColumnSortYesNo_ID");    }    try {      int index=rs.findColumn("ReplicationType");      vo.ReplicationType=rs.getString(index);      if ("R".equals(vo.ReplicationType))       vo.IsReadOnly=true;    } catch (    Exception e) {    }  } catch (  SQLException ex) {    CLogger.get().log(Level.SEVERE,"",ex);    return false;  }  return true;}  }
class C{  public boolean isRedundant(){  return ifcmpDecision == null || fallThroughDecision == null;}  }
class C{  private void openContextMenu(MouseEvent e){  if (e.isPopupTrigger()) {    Collection<String> streams=new HashSet<>();    int[] selectedRows=table.getSelectedRows();    for (    int selectedRow : selectedRows) {      Follower selected=followers.get(selectedRow);      streams.add(StringUtil.toLowerCase(selected.name));    }    if (!streams.isEmpty()) {      StreamsContextMenu m=new StreamsContextMenu(streams,contextMenuListener);      m.show(table,e.getX(),e.getY());    }  }}  }
class C{  public void readSomeData(Repository repo,URI uri) throws Exception {  RepositoryConnection cxn;  if (repo instanceof BigdataSailRepository) {    cxn=((BigdataSailRepository)repo).getReadOnlyConnection();  } else {    cxn=repo.getConnection();  }  try {    RepositoryResult<Statement> stmts=cxn.getStatements(uri,null,null,true);    while (stmts.hasNext()) {      Statement stmt=stmts.next();      Resource s=stmt.getSubject();      URI p=stmt.getPredicate();      Value o=stmt.getObject();      log.info(stmt);      BigdataStatement bdStmt=(BigdataStatement)stmt;      if (bdStmt.isExplicit()) {      } else       if (bdStmt.isInferred()) {      } else {      }      log.info(bdStmt.getStatementType());    }  }  finally {    cxn.close();  }}  }
class C{  public void add(RSAKeyValue rsakeyvalue){  this.add(new KeyValue(this.doc,rsakeyvalue));}  }
class C{  private Client buildClient() throws SQLException {  if (props.containsKey("test")) {    return ESIntegTestCase.client();  } else   try {    Settings.Builder settingsBuilder=Settings.settingsBuilder();    for (    Object key : this.props.keySet()) {      settingsBuilder.put(key,this.props.get(key));    }    if (props.containsKey("cluster.name")) {      settingsBuilder.put("request.headers.X-Found-Cluster",props.get("cluster.name"));    }    if (props.containsKey("ssl")) {      settingsBuilder.put("shield.transport.ssl",true);    }    Settings settings=settingsBuilder.build();    TransportClient client=TransportClient.builder().settings(settings).addPlugin(ShieldPlugin.class).build().addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(host),port));    if (this.props.containsKey("es.hosts"))     for (    String hostPort : this.props.getProperty("es.hosts").split(",")) {      String newHost=hostPort.split(":")[0].trim();      int newPort=(hostPort.split(":").length > 1 ? Integer.parseInt(hostPort.split(":")[1]) : Utils.PORT);      client.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(newHost),newPort));      logger.info("Adding additional ES host: " + hostPort);    }    if (index != null) {      boolean indexExists=client.admin().indices().exists(new IndicesExistsRequest(index)).actionGet().isExists();      if (!indexExists)       throw new SQLException("Index or Alias '" + index + "' does not exist");    }    return client;  } catch (  UnknownHostException e) {    throw new SQLException("Unable to connect to " + host,e);  }catch (  Throwable t) {    throw new SQLException("Unable to connect to database",t);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double slope;  double z, z2;  int i, n;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX2={2,2,2,2,2,1,0,-1,-2,-2,-2,-2,-2,-1,0,1};  int[] dY2={-2,-1,0,1,2,2,2,2,2,1,0,-1,-2,-2,-2,-2};  int[] breachcell={0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,0};  double dist;  double gridRes;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    double[] data=null;    for (row=0; row < rows; row++) {      data=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        output.setValue(row,col,data[col]);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          n=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 < z) {              n++;            }          }          if (n == 0) {            for (i=0; i < 16; i++) {              z2=DEM.getValue(row + dY2[i],col + dX2[i]);              if (z2 < z && z2 != noData) {                output.setValue(row + dY[breachcell[i]],col + dX[breachcell[i]],(z + z2) / 2);              }            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public PrintApplicationFileAction(Application app){  super(app,null);  putValue(Action.NAME,"OSX Print File");}  }
class C{  public static boolean correctGalois24(BinaryMessage tdulc){  boolean passes=true;  int x=64;  while (x < tdulc.size() && passes) {    tdulc=Golay24.checkAndCorrect(tdulc,x);    passes=tdulc.getCRC() == CRC.PASSED;    x+=24;  }  return passes;}  }
class C{  public static void waitForSwingThreads(){  SwingAction.invokeAndWait(null);}  }
class C{  public Boolean isRevoked(){  if (isTrusted()) {    return false;  }  RevocationToken latest=getLatestRevocationToken();  if (latest == null) {    return null;  }  Boolean status=latest.getStatus();  if (status == null) {    return null;  }  status=!status;  return status;}  }
class C{  public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){  if (cv != null) {    return cv.visitField(access,name,desc,signature,value);  }  return null;}  }
class C{  public Strategy findById(Integer idStrategy){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Strategy instance=entityManager.find(Strategy.class,idStrategy);    if (null != instance) {      instance.getIndicatorSeries().size();      instance.getRules().size();    }    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  protected void onClear(){  assert lock.isHeldByCurrentThread();  ramBytesUsed=0;  cacheSize=0;}  }
class C{  public void testEmptyAuthority() throws Exception {  URL url=new URL("http:///foo");  assertEquals("",url.getAuthority());  assertEquals("/foo",url.getPath());  assertEquals("http:///foo",url.toString());}  }
class C{  @Override void specificProcessing(DbClient dbClient,HDSApiClient client,Volume volume){  try {    TenantOrg tenant=dbClient.queryObject(TenantOrg.class,volume.getTenant().getURI());    String tenantName=tenant.getLabel();    if (_nameGeneratorRef.get() == null) {      _nameGeneratorRef.compareAndSet(null,(NameGenerator)ControllerServiceImpl.getBean("defaultNameGenerator"));    }    String generatedName=_nameGeneratorRef.get().generate(tenantName,volume.getLabel(),volume.getId().toString(),'-',HDSConstants.MAX_VOLUME_NAME_LENGTH);    changeVolumeName(dbClient,client,volume,generatedName);  } catch (  DatabaseException e) {    log.error("Encountered an error while trying to set the volume name",e);  }catch (  Exception e) {    log.error("Encountered an error while trying to set the volume name",e);  }}  }
class C{  public static boolean isExceptionCaughtAt(SootClass e,Unit u,Body b){  Hierarchy h=Scene.v().getActiveHierarchy();  Chain units=b.getUnits();  Iterator trapsIt=b.getTraps().iterator();  while (trapsIt.hasNext()) {    Trap t=(Trap)trapsIt.next();    if (h.isClassSubclassOfIncluding(e,t.getException())) {      Iterator it=units.iterator(t.getBeginUnit(),units.getPredOf(t.getEndUnit()));      while (it.hasNext())       if (u.equals(it.next()))       return true;    }  }  return false;}  }
class C{  public void clearCache(int cacheSize){  paramCache=new Parameters[cacheSize];  commandCache=new JasminCommand[cacheSize];  cached=new boolean[cacheSize];}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public static double cdf(double val,double rate){  final double v=.5 * Math.exp(-rate * val);  return (val < 0.) ? v : 1 - v;}  }
class C{  public static boolean equals(long[] array1,long[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public void translateWindowLayout(WindowManager.LayoutParams params){  params.scale(applicationScale);}  }
class C{  public void suspendTraceSession(int traceSessionId) throws SQLException {  try (FbService service=attachServiceManager()){    service.startServiceAction(getTraceSPB(service,isc_action_svc_trace_suspend,traceSessionId));    queueService(service);  } catch (  IOException ioe) {    throw new SQLException(ioe);  }}  }
class C{  public void toggle(Animation animIn,Animation animOut){  toggle(true,animIn,animOut);}  }
class C{  public void stop(){  Debug.message("app","OpenMapApplet.stop()");  super.stop();}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  private void write_ieee_extended(DataOutputStream dos,float f) throws IOException {  long doubleBits=Double.doubleToLongBits((double)f);  long sign=(doubleBits & DOUBLE_SIGN_MASK) >> (DOUBLE_EXPONENT_LENGTH + DOUBLE_MANTISSA_LENGTH);  long doubleExponent=(doubleBits & DOUBLE_EXPONENT_MASK) >> DOUBLE_MANTISSA_LENGTH;  long doubleMantissa=doubleBits & DOUBLE_MANTISSA_MASK;  long extendedExponent=doubleExponent - DOUBLE_EXPONENT_OFFSET + EXTENDED_EXPONENT_OFFSET;  long extendedMantissa=doubleMantissa << (EXTENDED_MANTISSA_LENGTH - DOUBLE_MANTISSA_LENGTH);  long extendedSign=sign << EXTENDED_EXPONENT_LENGTH;  short extendedBits79To64=(short)(extendedSign | extendedExponent);  long extendedBits63To0=EXTENDED_INTEGER_MASK | extendedMantissa;  dos.writeShort(extendedBits79To64);  dos.writeLong(extendedBits63To0);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static String decryptString(CipherTextIvMac civ,SecretKeys secretKeys) throws UnsupportedEncodingException, GeneralSecurityException {  return decryptString(civ,secretKeys,"UTF-8");}  }
class C{  public String header(String name){  return (String)headers.get(name.toLowerCase());}  }
class C{  protected static double calcQ_i(double f,double lambda){  return lambda * Math.exp(-lambda * f);}  }
class C{  public static void main(String argv[]){  String config;  int NTHREADS;  initContext();  String supported[]=sslContext.getSocketFactory().getSupportedCipherSuites();  ArrayList list=new ArrayList(supported.length);  for (int i=0; i < supported.length; i++) {    if (!supported[i].startsWith("TLS_KRB5")) {      list.add(supported[i]);    }  }  supported=(String[])list.toArray(new String[0]);  if (argv.length == 2) {    config=argv[0];    NTHREADS=Integer.parseInt(argv[1]);  } else   if (argv.length == 1) {    config=argv[0];    NTHREADS=15;  } else {    config="default";    NTHREADS=supported.length;  }  ServerThread server=new ServerThread(0,NTHREADS,sslContext);  Vector clients=new Vector(NTHREADS);  if (!(config.equals("default") || config.equals("random")))   supported=new String[]{config};  System.out.println("Supported cipher suites are:");  for (int i=0; i < supported.length; i++) {    System.out.println(supported[i]);  }  setConfig(server,config,supported);  server.setUseMT(true);  server.start();  server.waitTillReady();  int next=0;  int passes=0;  if (usesRandom(config))   next=nextUnsignedRandom();  for (int i=0; i < NTHREADS; i++, next++) {    ClientThread client=new ClientThread(server.getServerPort(),sslContext);    String cipher[]=new String[1];    setConfig(client,config,supported);    next=next % supported.length;    cipher[0]=supported[next];    client.setBasicCipherSuites(cipher);    client.start();    if (!server.getUseMT()) {      waitForClient(client);      if (client.passed())       passes++;    } else     clients.addElement(client);  }  while (!clients.isEmpty()) {    ClientThread client;    client=(ClientThread)clients.elementAt(0);    clients.removeElement(client);    waitForClient(client);    if (client.passed())     passes++;  }  System.out.println("SUMMARY:  threads = " + NTHREADS + ", passes = "+ passes);}  }
class C{  public static void collectFiles(File start,final List<String> file){  if (start.isDirectory()) {    File[] files=start.listFiles();    for (int i=0; i < files.length; i++) {      File f=files[i];      if (f.isDirectory()) {        collectFiles(f,file);      } else       if (f.getName().endsWith(".java")) {        file.add(f.getAbsolutePath());      }    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void paste(final DiffBlock curB){  String text=bufferMap.remove(curB.getId());  DiffPart action=new DiffPart(DiffAction.PASTE);  action.setStart(version.length());  codecData.checkBlocksizeS(version.length());  action.setText(Integer.toString(curB.getId()));  codecData.checkBlocksizeB(curB.getId());  diff.add(action);  version.append(text);}  }
class C{  protected String evaluate(double lat,double lon,int level){  this.lat=Math.floor(lat);  this.lon=Math.floor(lon);  this.level=level;  return DTEDFrameUtil.lonToFileString((float)lon) + "/" + DTEDFrameUtil.latToFileString((float)lat,level);}  }
class C{  public void next(){  if (current() == null) {    return;  }  m_currentSearchIndex++;  m_isBeforeFirst=false;  m_isAfterLast=false;  if (m_currentSearchIndex == m_reducedResults.size()) {    m_currentSearchIndex=0;    m_isAfterLast=true;  }}  }
class C{  public Set entrySet(){  processQueue();  return hash.entrySet();}  }
class C{  protected void cleanUnusedStyles(){  Hashtable<String,Style> usedStyles=new Hashtable<String,Style>();  for (  Caption current : captions.values()) {    if (current.style != null) {      String iD=current.style.iD;      if (!usedStyles.containsKey(iD))       usedStyles.put(iD,current.style);    }  }  this.styling=usedStyles;}  }
class C{  @Category(FlakyTest.class) @Test public void testConcurrentEventsOnEmptyRegion(){  versionTestConcurrentEventsOnEmptyRegion();}  }
class C{  public DialChart(CategorySeries dataset,DialRenderer renderer){  super(dataset,renderer);  mRenderer=renderer;}  }
class C{  public void testCertPathValidator04() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  String provider=null;  for (int i=0; i < validValues.length; i++) {    try {      CertPathValidator.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown thrown");    } catch (    IllegalArgumentException e) {    }    try {      CertPathValidator.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown thrown");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public static boolean isEnabled(){  ExecutionTracer tracer=ExecutionTracer.getExecutionTracer();  return !tracer.disabled;}  }
class C{  public static void applyActionsFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Apply Actions Instruction not supported in OpenFlow 1.0");    return;  }  OFFlowMod.Builder tmpFmb=OFFactories.getFactory(fmb.getVersion()).buildFlowModify();  OFInstructionApplyActions.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildApplyActions();  ActionUtils.fromString(tmpFmb,inst,log);  ib.setActions(tmpFmb.getActions());  log.debug("Appending ApplyActions instruction: {}",ib.build());  appendInstruction(fmb,ib.build());  log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("WebBasket[Lines=");  sb.append(m_lines.size()).append(",Total=").append(m_total).append(",M_PriceList_ID=" + m_PriceList_ID).append("]");  return sb.toString();}  }
class C{  private final boolean addDirection(ArrayList<Move> moveList,Position pos,int sq0,int maxSteps,int delta){  int sq=sq0;  boolean wtm=pos.whiteMove;  final int oKing=(wtm ? Piece.BKING : Piece.WKING);  while (maxSteps > 0) {    sq+=delta;    int p=pos.getPiece(sq);    if (p == Piece.EMPTY) {      moveList.add(getMoveObj(sq0,sq,Piece.EMPTY));    } else {      if (Piece.isWhite(p) != wtm) {        if (p == oKing) {          returnMoveList(moveList);          moveList=getMoveListObj();          moveList.add(getMoveObj(sq0,sq,Piece.EMPTY));          return true;        } else {          moveList.add(getMoveObj(sq0,sq,Piece.EMPTY));        }      }      break;    }    maxSteps--;  }  return false;}  }
class C{  public URL find(String classname){  String jarname="/" + classname.replace('.','/') + ".class";  return thisClass.getResource(jarname);}  }
class C{  public XRFFTest(String name){  super(name);}  }
class C{  public void changedUpdate(DocumentEvent e){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.TAG_TITLE__TAG:    setTag((Tag)null);  return;case DomPackage.TAG_TITLE__TITLE:setTitle(TITLE_EDEFAULT);return;case DomPackage.TAG_TITLE__ACTUAL_TITLE:setActualTitle(ACTUAL_TITLE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void addStrategyForName(String name,MergeStrategy strategy){  this.strategyMap.put(name,strategy);}  }
class C{  public int readEnum() throws IOException {  return readRawVarint32();}  }
class C{  public String searchTipText(){  return "The search method used to find good attribute combinations for the " + "decision table.";}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.474 -0400",hash_original_method="ACF1A17E0D23809C356E177971499CFB",hash_generated_method="C084603B1E8F1EDF53DB37D1B859A462") @Override public int read(byte[] bts) throws IOException {  try {    beforeRead(bts != null ? bts.length : 0);    int n=in.read(bts);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void incrementInDegree(){  ++inDegree;}  }
class C{  public String classicToString(){  return mMap.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private String parameters(){  StringBuilder buf=new StringBuilder("[keyStoreType=").append(keyStoreType);  buf.append(", proto=").append(proto).append(", keyStoreFile=").append(keyStoreFilePath);  if (trustMgrs != null)   buf.append(", trustMgrs=").append(Arrays.toString(trustMgrs)); else   buf.append(", trustStoreFile=").append(trustStoreFilePath);  buf.append(']');  return buf.toString();}  }
class C{  public Tree(int root,int[] parent,List<Integer> searchOrder){  this.root=root;  this.parent=parent;  this.searchOrder=searchOrder;}  }
class C{  public SnowballAnalyzer(String name,CharArraySet stopWords){  this(name);  stopSet=CharArraySet.unmodifiableSet(CharArraySet.copy(stopWords));}  }
class C{  public static void validateCompositeData(CompositeData cd){  if (cd == null) {    throw new NullPointerException("Null CompositeData");  }  if (!isTypeMatched(vmOptionCompositeType,cd.getCompositeType())) {    throw new IllegalArgumentException("Unexpected composite type for VMOption");  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public byte receiveOneByte(){  Log.d(TAG,"receiveOneByte() entrance");  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    Log.d(TAG,"receive: " + (0 + mReceivePacket.getData()[0]));    return mReceivePacket.getData()[0];  } catch (  IOException e) {    e.printStackTrace();  }  return Byte.MIN_VALUE;}  }
class C{  BitField allocateAllPages(){  BitField pages=new BitField();  int key=logKey;  PageStreamTrunk.Iterator it=new PageStreamTrunk.Iterator(store,firstTrunkPage);  while (true) {    PageStreamTrunk t=it.next();    key++;    if (it.canDelete()) {      store.allocatePage(it.getCurrentPageId());    }    if (t == null || t.getLogKey() != key) {      break;    }    pages.set(t.getPos());    for (int i=0; ; i++) {      int n=t.getPageData(i);      if (n == -1) {        break;      }      pages.set(n);      store.allocatePage(n);    }  }  return pages;}  }
class C{  private void updateComponents(){  view.setOpenButtonEnabled(selectedProject != null);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.IDENTIFIER_REF_IM__REWIRED_TARGET:    setRewiredTarget((SymbolTableEntry)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private List addNodeToList(int startIndexForNode,int endIndexForNode){  List localvmList=new ArrayList();  for (int i=startIndexForNode; i < endIndexForNode; i++) {    localvmList.add(vm[i]);  }  return localvmList;}  }
class C{  @Synchronized("lock") public void disconnect(final Stream<T> stream){  distributor.removeQueue(streamToQueue.get(stream));  this.streamToQueue=streamToQueue.minus(stream);  this.index--;}  }
class C{  @Override public boolean onDragEvent(DragEvent event){  if (event.getClipDescription() != null && event.getClipDescription().hasMimeType(ClipDescription.MIMETYPE_TEXT_PLAIN) && event.getClipDescription().getLabel().equals(WorkspaceView.BLOCK_GROUP_CLIP_DATA_LABEL)) {    return false;  }  return super.onDragEvent(event);}  }
class C{  public static <T extends Comparable<? super T>>T min(final T... values){  T result=null;  if (values != null) {    for (    final T value : values) {      if (compare(value,result,true) < 0) {        result=value;      }    }  }  return result;}  }
class C{  public void run() throws Exception {  PdfBoxRenderer renderer=null;  try {    renderer=this.buildPdfRenderer();    if (!_fonts.isEmpty()) {      PdfBoxFontResolver resolver=renderer.getFontResolver();      for (      AddedFont font : _fonts) {        IdentValue fontStyle=null;        if (font.style == FontStyle.NORMAL) {          fontStyle=IdentValue.NORMAL;        } else         if (font.style == FontStyle.ITALIC) {          fontStyle=IdentValue.ITALIC;        } else         if (font.style == FontStyle.OBLIQUE) {          fontStyle=IdentValue.OBLIQUE;        }        resolver.addFont(font.supplier,font.family,font.weight,fontStyle,font.subset);      }    }    renderer.layout();    renderer.createPDF();  }  finally {    if (renderer != null)     renderer.cleanup();  }}  }
class C{  private void resolveCredentials(URL url){  if (defaultUsername != null && defaultUsername.length() > 0) {    int port=url.getPort();    if (port == -1) {      if ("https".equals(url.getProtocol()))       port=443; else       port=80;    }    AuthScope scope=new AuthScope(url.getHost(),port);    if (client.getState().getCredentials(scope) != null) {      if (LOG.isTraceEnabled())       LOG.trace("Pre-configured credentials with scope - host: " + url.getHost() + "; port: "+ port+ "; found for url: "+ url);      return;    }    if (LOG.isTraceEnabled())     LOG.trace("Pre-configured credentials with scope -  host: " + url.getHost() + "; port: "+ port+ "; not found for url: "+ url);    AuthScope serverAuthScope=getAuthScope(url.getHost(),port,defaultRealm,defaultScheme);    NTCredentials serverCredentials=new NTCredentials(defaultUsername,defaultPassword,agentHost,defaultRealm);    client.getState().setCredentials(serverAuthScope,serverCredentials);  }}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;}  }
class C{  public double itmCashProbability(){  return cum_d2;}  }
class C{  public void add_return(java.lang.String param){  if (local_return == null) {    local_return=new java.lang.String[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public static String create(List<String> pathSegments){  return create(join(pathSegments));}  }
class C{  public void testGetExportedKeysUsingInfoSchema() throws Exception {  if (versionMeetsMinimum(5,0,7)) {    this.stmt.executeUpdate("DROP TABLE IF EXISTS child");    this.stmt.executeUpdate("DROP TABLE If EXISTS parent");    this.stmt.executeUpdate("CREATE TABLE parent(id INT NOT NULL, PRIMARY KEY (id)) ENGINE=INNODB");    this.stmt.executeUpdate("CREATE TABLE child(id INT, parent_id INT, " + "FOREIGN KEY (parent_id) REFERENCES parent(id) ON DELETE SET NULL) ENGINE=INNODB");    Properties props=new Properties();    props.put("useInformationSchema","true");    Connection conn1=null;    try {      conn1=getConnectionWithProps(props);      DatabaseMetaData metaData=conn1.getMetaData();      this.rs=metaData.getExportedKeys(null,null,"parent");      this.rs.next();      assertEquals("parent",this.rs.getString("PKTABLE_NAME"));      assertEquals("id",this.rs.getString("PKCOLUMN_NAME"));      assertEquals("child",this.rs.getString("FKTABLE_NAME"));      assertEquals("parent_id",this.rs.getString("FKCOLUMN_NAME"));    }  finally {      this.stmt.executeUpdate("DROP TABLE IF EXISTS child");      this.stmt.executeUpdate("DROP TABLE If EXISTS parent");      if (conn1 != null) {        conn1.close();      }    }  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:05.836 -0500",hash_original_method="9AF9F658465E6920280B1655C8022A86",hash_generated_method="2B6A38C70D9EB0CA23B980DC8F6B3D48") @Override public int hashCode(){  int hashCode=0;  for (int i=0; i < choiceLimits.length; i++) {    long v=Double.doubleToLongBits(choiceLimits[i]);    hashCode+=(int)(v ^ (v >>> 32)) + choiceFormats[i].hashCode();  }  return hashCode;}  }
class C{  protected void registerListener(){  MetaDataProvider mdp=attributeType.getMetaDataProvider();  if (mdp != null) {    mdp.addMetaDataChangeListener(this);  }}  }
class C{  public CarrierServiceImpl(final GenericDAO<Carrier,Long> genericDao){  super(genericDao);}  }
class C{  public static void main(String argv[]){  try {    String configFile=null;    String service=null;    String templateFile=null;    String additionalPath=null;    String user=null;    String pass=null;    String url=null;    String tables=null;    String tableFile=null;    String db=null;    String outFile=null;    String renameDefinitions=null;    Hashtable<String,String> templateOptions=new Hashtable<String,String>();    ArgvIterator argvIterator=new ArgvIterator(argv);    String curArg=null;    while (argvIterator.hasNext()) {      curArg=argvIterator.next();      if ("-conf".equals(curArg)) {        if (argvIterator.hasNext())         configFile=argvIterator.next();      } else       if ("-service".equals(curArg)) {        if (argvIterator.hasNext())         service=argvIterator.next();      } else       if ("-db".equals(curArg)) {        if (argvIterator.hasNext())         db=argvIterator.next();      } else       if ("-user".equals(curArg)) {        if (argvIterator.hasNext())         user=argvIterator.next();      } else       if ("-pass".equals(curArg)) {        if (argvIterator.hasNext())         pass=argvIterator.next();      } else       if ("-url".equals(curArg)) {        if (argvIterator.hasNext())         url=argvIterator.next();      } else       if ("-tables".equals(curArg)) {        if (argvIterator.hasNext())         tables=argvIterator.next();      } else       if ("-tableFile".equals(curArg)) {        if (argvIterator.hasNext())         tableFile=argvIterator.next();      } else       if ("-template".equals(curArg)) {        if (argvIterator.hasNext())         templateFile=argvIterator.next();      } else       if ("-path".equals(curArg)) {        if (argvIterator.hasNext())         additionalPath=argvIterator.next();      } else       if ("-out".equals(curArg)) {        if (argvIterator.hasNext())         outFile=argvIterator.next();      } else       if ("-rename".equals(curArg)) {        if (argvIterator.hasNext())         renameDefinitions=argvIterator.next();      } else       if ("-opt".equals(curArg)) {        if (argvIterator.hasNext()) {          String option=argvIterator.next();          String value="";          if (argvIterator.hasNext())           value=argvIterator.next();          templateOptions.put(option,value);        } else {          println("To pass an option to a template: -opt <option> <value>");          println("To ask a template to describe itself: -opt help");          printHelp();          fail();        }      } else       if ("-help".equals(curArg)) {        printHelp();        succeed();      } else       if (curArg.startsWith("-")) {        println("Unrecognized option: " + curArg);        printHelp();        fail();      }    }    if (templateFile == null) {      println("Template file is not provided! Use -template parameter.");      printHelp();      fail();    } else     if (((configFile != null || service != null) && (user != null && pass != null && url != null)) || (configFile != null && service != null)) {      fatal("Use -user, -pass and -url or -conf or -service options. Don't mix.",null);    }    if (db == null)     fatal("Database is not provided! Use -db parameter.",null);    if (user == null || pass == null || url == null) {      if (configFile == null) {        if (service == null) {          configFile=lookForConfigFile();          if (configFile == null) {            fatal("You must specify either a config file or a service name (-conf or -service)",null);          }        } else {          ReplicatorRuntimeConf runtimeConf=ReplicatorRuntimeConf.getConfiguration(service);          configFile=runtimeConf.getReplicatorProperties().getAbsolutePath();        }      }      TungstenProperties properties=readConfig(configFile);      if (properties != null) {        Properties jProps=new Properties();        jProps.setProperty("URL",properties.getString(ReplicatorConf.RESOURCE_JDBC_URL));        if (db != null)         jProps.setProperty("DBNAME",db);        TungstenProperties.substituteSystemValues(jProps);        url=jProps.getProperty("URL");        user=properties.getString(ReplicatorConf.GLOBAL_DB_USER);        pass=properties.getString(ReplicatorConf.GLOBAL_DB_PASSWORD);        if (user == null || url == null)         throw new ReplicatorException("Configuration file doesn't have JDBC URL credentials");      } else       throw new ReplicatorException("Unable to read configuration file " + configFile);    }    DDLScanCtrl ddlScanManager=new DDLScanCtrl(url,user,pass,db,tables,tableFile,templateFile,outFile,renameDefinitions,templateOptions,additionalPath);    if (tables == null && tableFile == null && outFile != null)     println("Tables not specified - extracting everything!");    ddlScanManager.prepare();    ddlScanManager.scanAndGenerate();    ddlScanManager.release();  } catch (  Throwable t) {    fatal("Fatal error: " + t.getMessage(),t);  }}  }
class C{  protected void convertInstance(Instance instance){  int index=0;  double[] vals=new double[outputFormatPeek().numAttributes()];  for (int i=0; i < getInputFormat().numAttributes(); i++) {    if (m_DiscretizeCols.isInRange(i) && getInputFormat().attribute(i).isNumeric()) {      int j;      double currentVal=instance.value(i);      if (m_CutPoints[i] == null) {        if (instance.isMissing(i)) {          vals[index]=Utils.missingValue();        } else {          vals[index]=0;        }        index++;      } else {        if (!m_MakeBinary) {          if (instance.isMissing(i)) {            vals[index]=Utils.missingValue();          } else {            for (j=0; j < m_CutPoints[i].length; j++) {              if (currentVal <= m_CutPoints[i][j]) {                break;              }            }            vals[index]=j;          }          index++;        } else {          for (j=0; j < m_CutPoints[i].length; j++) {            if (instance.isMissing(i)) {              vals[index]=Utils.missingValue();            } else             if (currentVal <= m_CutPoints[i][j]) {              vals[index]=0;            } else {              vals[index]=1;            }            index++;          }        }      }    } else {      vals[index]=instance.value(i);      index++;    }  }  Instance inst=null;  if (instance instanceof SparseInstance) {    inst=new SparseInstance(instance.weight(),vals);  } else {    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(getOutputFormat());  copyValues(inst,false,instance.dataset(),getOutputFormat());  inst.setDataset(getOutputFormat());  push(inst);}  }
class C{  public void loadingFinished(){  mLoadTracker.loadingFinished();}  }
class C{  private void dotestForceInvalidate(boolean concurrencyChecksOnServer,boolean concurrencyChecksOnClient,boolean clientEmpty,boolean serverPartitioned) throws Exception {  setupServerAndClientVMs(concurrencyChecksOnServer,concurrencyChecksOnClient,clientEmpty,serverPartitioned);  server2.invoke(null);  region1.registerInterest("ALL_KEYS",InterestResultPolicy.NONE,false,false);  server2.invoke(null);  validateServerListenerInvoked();  waitForClientInvalidate();}  }
class C{  public static void annotate(final Message msg,final ResourceIdentifier resourceIdentifier){  MessageHelper.addAnnotation(msg,APP_PROPERTY_TENANT_ID,resourceIdentifier.getTenantId());  MessageHelper.addAnnotation(msg,APP_PROPERTY_DEVICE_ID,resourceIdentifier.getResourceId());  MessageHelper.addAnnotation(msg,APP_PROPERTY_RESOURCE,resourceIdentifier.toString());}  }
class C{  private boolean afterCommaSearch(RealVariable realVar,Collection<Constraint<?>> cnstr) throws SolverTimeoutException {  boolean improvement=false;  int maxPrecision=realVar.getMaxValue() > Float.MAX_VALUE ? 15 : 7;  for (int precision=1; precision <= maxPrecision; precision++) {    chopOffPrecision(precision,maxPrecision == 7);    log.debug("Current precision: " + precision);    final double delta=Math.pow(10.0,-precision);    final double factor=2;    if (doRealSearch(delta,factor))     improvement=true;    if (this.checkpointedDistance <= 0) {      break;    }  }  return improvement;}  }
class C{  @SuppressWarnings("unchecked") private void pruneMap(){  Reference<? extends V> ref=queue.poll();  while (ref != null) {    map.remove(((Entry<K,V>)ref).key);    ref=queue.poll();  }}  }
class C{  public final void removeComponent(@NotNull final RadComponent component){  if (!myComponents.contains(component)) {    throw new IllegalArgumentException("component is not added: " + component);  }  final RadComponent[] oldChildren=myComponents.toArray(new RadComponent[myComponents.size()]);  component.setParent(null);  myComponents.remove(component);  myLayoutManager.removeComponentFromContainer(this,component);  final RadComponent[] newChildren=myComponents.toArray(new RadComponent[myComponents.size()]);  firePropertyChanged(PROP_CHILDREN,oldChildren,newChildren);}  }
class C{  public InlineQueryResultCachedAudio build(){  return new InlineQueryResultCachedAudio(id,audio_file_id,reply_markup,input_message_content,caption);}  }
class C{  public LivestockCargoBay(double space,int doors,int bayNumber){  totalSpace=space * 0.83;  weight=space;  currentSpace=space * 0.83;  this.doors=doors;  this.bayNumber=bayNumber;}  }
class C{  ValidatorImpl(Mode mode,List triggers,PropertyMap properties){  this.properties=properties;  this.triggers=triggers;  this.eh=properties.get(ValidateProperty.ERROR_HANDLER);  this.startMode=mode;  this.elementsLocalNameStack=new Stack();  initCurrentSection();}  }
class C{  public static void copy(final JTextArea area){  final String selectedText=area.getSelectedText();  if (selectedText == null) {    ClipboardHelpers.copyToClipboard(area.getText());  } else {    ClipboardHelpers.copyToClipboard(selectedText);  }}  }
class C{  public static void addGlue(JComponent b,boolean horiz){  b.add(horiz ? Box.createHorizontalGlue() : Box.createVerticalGlue());}  }
class C{  public boolean isCheckCircularDependency(){  return checkCircularDependency;}  }
class C{  public boolean isConfigured(){  List<BOMNode> notConfiguredParts=FastList.newInstance();  root.isConfigured(notConfiguredParts);  return (notConfiguredParts.size() == 0);}  }
class C{  public void assertEqual(int expected,int actual,String errorMessage){  TestUtils.assertEqual(expected,actual,errorMessage);}  }
class C{  static void permissionTests(Path dir) throws IOException {  System.out.println("-- Permission Tests  --");  Path file=dir.resolve("foo");  System.out.format("create %s\n",file);  Files.createFile(file);  try {    PosixFileAttributeView view=Files.getFileAttributeView(file,PosixFileAttributeView.class);    Set<PosixFilePermission> save=view.readAttributes().permissions();    try {      testPermissions(file,"---------");      testPermissions(file,"r--------");      testPermissions(file,"-w-------");      testPermissions(file,"--x------");      testPermissions(file,"rwx------");      testPermissions(file,"---r-----");      testPermissions(file,"----w----");      testPermissions(file,"-----x---");      testPermissions(file,"---rwx---");      testPermissions(file,"------r--");      testPermissions(file,"-------w-");      testPermissions(file,"--------x");      testPermissions(file,"------rwx");      testPermissions(file,"r--r-----");      testPermissions(file,"r--r--r--");      testPermissions(file,"rw-rw----");      testPermissions(file,"rwxrwx---");      testPermissions(file,"rw-rw-r--");      testPermissions(file,"r-xr-x---");      testPermissions(file,"r-xr-xr-x");      testPermissions(file,"rwxrwxrwx");    }  finally {      view.setPermissions(save);    }  }  finally {    Files.delete(file);  }  if (TestUtil.supportsLinks(dir)) {    Path link=dir.resolve("link");    System.out.format("create link %s\n",link);    Files.createSymbolicLink(link,file);    try {      PosixFileAttributes attrs=Files.getFileAttributeView(link,PosixFileAttributeView.class,NOFOLLOW_LINKS).readAttributes();      if (!attrs.isSymbolicLink()) {        throw new RuntimeException("not a link");      }    }  finally {      Files.delete(link);    }  }  System.out.println("OKAY");}  }
class C{  public static long encodePoint(final GeoPoint point){  return encodePoint(point.x,point.y,point.z);}  }
class C{  public EnumerationType createEnumerationType(){  EnumerationTypeImpl enumerationType=new EnumerationTypeImpl();  return enumerationType;}  }
class C{  public void updateFloat(int columnIndex,float x) throws SQLException {  checkUpdatable();  getField(columnIndex).setFloat(x);}  }
class C{  @SuppressWarnings({"unchecked"}) public SoftHashMap(int retentionSize){  super();  RETENTION_SIZE=Math.max(0,retentionSize);  queue=new ReferenceQueue<V>();  strongReferencesLock=new ReentrantLock();  map=new ConcurrentHashMap<K,SoftValue<V,K>>();  strongReferences=new ConcurrentLinkedQueue<V>();}  }
class C{  public Argument clone(){  Argument result=new Argument();  result.Name=Name;  result.DataType=DataType;  result.ValueRank=ValueRank;  result.ArrayDimensions=ArrayDimensions == null ? null : ArrayDimensions.clone();  result.Description=Description;  return result;}  }
class C{  public EppOutput runFlow(CommitMode commitMode,UserPrivileges userPrivileges) throws Exception {  EppOutput output=runFlowInternal(commitMode,userPrivileges);  marshal(output,ValidationMode.STRICT);  return output;}  }
class C{  @Deprecated public boolean isAssignableFrom(Class<?> cls){  return isAssignableFrom((Type)cls);}  }
class C{  public String serialize(Object obj,String contentType) throws ApiException {  if (contentType.startsWith("application/json")) {    return json.serialize(obj);  } else {    throw new ApiException(400,"can not serialize object into Content-Type: " + contentType);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SageTV.forceLocatorUpdate();  return null;}  }
class C{  protected boolean checkPenPosValidity(){  if ((penPosFromAfter[penPosFromAfter.length - 1][0] == penPosFrom[penPosFrom.length - 1][0]) && (penPosFromAfter[penPosFromAfter.length - 1][1] == penPosFrom[penPosFrom.length - 1][1]) && (penPosToAfter[penPosToAfter.length - 1][0] == penPosTo[penPosTo.length - 1][0])&& (penPosToAfter[penPosToAfter.length - 1][1] == penPosTo[penPosTo.length - 1][1])) {    System.out.println("Injection completed correctly!");    return true;  } else {    System.out.println("PROBLEM during injection!");    System.out.println("PenPos from");    StringBuffer sb=new StringBuffer();    int i=0;    for (    float[] coord : penPosFrom) {      sb.append((++i) + "p. " + coord[0]+ " , "+ coord[1]+ "\n");    }    System.out.println(sb.toString());    System.out.println("PenPos fromAfter");    sb=new StringBuffer();    i=0;    for (    float[] coord : penPosFromAfter) {      sb.append((++i) + "p. " + coord[0]+ " , "+ coord[1]+ "\n");    }    System.out.println(sb.toString());    System.out.println("PenPos to");    sb=new StringBuffer();    i=0;    for (    float[] coord : penPosTo) {      sb.append((++i) + "p. " + coord[0]+ " , "+ coord[1]+ "\n");    }    System.out.println(sb.toString());    System.out.println("PenPos toAfter");    sb=new StringBuffer();    i=0;    for (    float[] coord : penPosToAfter) {      sb.append((++i) + "p. " + coord[0]+ " , "+ coord[1]+ "\n");    }    System.out.println(sb.toString());    return false;  }}  }
class C{  @Override public ExecutionResult runTest(TestCase test){  ExecutionResult result=new ExecutionResult(test,null);  comparisonObserver.clear();  sameObserver.clear();  primitiveObserver.clear();  if (!Properties.REGRESSION_DISABLE_SPECIAL_ASSERTIONS)   inspectorObserver.clear();  fieldObserver.clear();  nullObserver.clear();  try {    logger.debug("Executing test");    result=TestCaseExecutor.getInstance().execute(test);    int num=test.size();    MaxStatementsStoppingCondition.statementsExecuted(num);    result.setTrace(comparisonObserver.getTrace(),ComparisonTraceEntry.class);    result.setTrace(sameObserver.getTrace(),SameTraceEntry.class);    result.setTrace(primitiveObserver.getTrace(),PrimitiveTraceEntry.class);    if (!Properties.REGRESSION_DISABLE_SPECIAL_ASSERTIONS)     result.setTrace(inspectorObserver.getTrace(),InspectorTraceEntry.class);    result.setTrace(fieldObserver.getTrace(),PrimitiveFieldTraceEntry.class);    result.setTrace(nullObserver.getTrace(),NullTraceEntry.class);  } catch (  Exception e) {    throw new Error(e);  }  return result;}  }
class C{  protected void parseStyles(InStream in,SWFShape shape,boolean hasAlpha) throws IOException {  int numFillStyles=in.readUI8();  if (numFillStyles == 0xff) {    numFillStyles=in.readUI16();  }  for (int i=0; i < numFillStyles; i++) {    parseFillStyle(in,shape,hasAlpha);  }  int numLineStyles=in.readUI8();  if (numLineStyles == 0xff) {    numLineStyles=in.readUI16();  }  for (int i=0; i < numLineStyles; i++) {    parseLineStyle(in,shape,hasAlpha);  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public void forceReleaseWaitingPrepareStatement() throws QueryException {  if (statementIdToRelease != -1) {    if (forceReleasePrepareStatement(statementIdToRelease)) {      statementIdToRelease=-1;    }  }}  }
class C{  public static Dog maxDog(Dog[] dogs){  Dog maxDog=dogs[0];  for (  Dog d : dogs) {    if (d.size > maxDog.size) {      maxDog=d;    }  }  return maxDog;}  }
class C{  protected void initializeAction(EnumListenerEvent operation){  if (operation == EnumListenerEvent.AFTER_CREATE) {    this.action=CREATE_ACTION;    this.numberOfParts=(this.callbackArgument == null) ? 8 : 9;  } else   if (operation == EnumListenerEvent.AFTER_UPDATE) {    this.action=UPDATE_ACTION;    this.numberOfParts=(this.callbackArgument == null) ? 8 : 9;  } else   if (operation == EnumListenerEvent.AFTER_DESTROY) {    this.action=DESTROY_ACTION;    this.numberOfParts=(this.callbackArgument == null) ? 7 : 8;  } else   if (operation == EnumListenerEvent.TIMESTAMP_UPDATE) {    this.action=VERSION_ACTION;    this.numberOfParts=(this.callbackArgument == null) ? 7 : 8;  } else   if (operation == EnumListenerEvent.AFTER_INVALIDATE) {    this.action=INVALIDATE_ACTION;    this.numberOfParts=(this.callbackArgument == null) ? 7 : 8;  }}  }
class C{  public FixedAndroidHandler(){  setFormatter(THE_FORMATTER);}  }
class C{  public static PatternNotExpr notFilter(String name,String tagName){  return new PatternNotExpr(new PatternFilterExpr(Filter.create(name),tagName));}  }
class C{  private void processStartedState(State currentState){switch (currentState.taskState.subStage) {case UPLOAD_IMAGE:    uploadImage(currentState);  break;case ALLOCATE_RESOURCES:allocateResources(currentState);break;case CREATE_VMS:createVms(currentState);break;case CREATE_CONTAINERS:createContainers(currentState);break;case WAIT_FOR_NODE_GROUP_CONVERGANCE:waitForNodeGroupConvergance(currentState);break;}}  }
class C{  public JSONArray put(Object value){  this.list.add(value);  return this;}  }
class C{  public boolean equals(XMLString obj2){  if (obj2 != null) {    if (!obj2.hasString()) {      return obj2.equals(str());    } else {      return str().equals(obj2.toString());    }  }  return false;}  }
class C{  public MarshalException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  @VisibleForTesting boolean testableCheckAnyUserHasSeenToS(Context context){  return ToSAckedReceiver.checkAnyUserHasSeenToS(context);}  }
class C{  public SaveGameCommand(Server server){  super(server,"save","Saves the game to a file.  Usage: /save [filename]");}  }
class C{  private void recycle(){synchronized (sStack) {    sStack.push(this);  }}  }
class C{  private UserManagerService(Context context,PackageManagerService pm,Object installLock,Object packagesLock,File dataDir,File baseUserPath){  mContext=context;  mPm=pm;  mInstallLock=installLock;  mPackagesLock=packagesLock;  mHandler=new Handler();synchronized (mInstallLock) {synchronized (mPackagesLock) {      mUsersDir=new File(dataDir,USER_INFO_DIR);      mUsersDir.mkdirs();      File userZeroDir=new File(mUsersDir,"0");      userZeroDir.mkdirs();      mBaseUserPath=baseUserPath;      FileUtils.setPermissions(mUsersDir.toString(),FileUtils.S_IRWXU | FileUtils.S_IRWXG | FileUtils.S_IROTH| FileUtils.S_IXOTH,-1,-1);      mUserListFile=new File(mUsersDir,USER_LIST_FILENAME);      readUserListLocked();      ArrayList<UserInfo> partials=new ArrayList<UserInfo>();      for (int i=0; i < mUsers.size(); i++) {        UserInfo ui=mUsers.valueAt(i);        if (ui.partial && i != 0) {          partials.add(ui);        }      }      for (int i=0; i < partials.size(); i++) {        UserInfo ui=partials.get(i);        Slog.w(LOG_TAG,"Removing partially created user #" + i + " (name="+ ui.name+ ")");        removeUserStateLocked(ui.id);      }      sInstance=this;    }  }}  }
class C{  public static void inheritVeriniceContextState(){  VeriniceContext.setState(state);}  }
class C{  static <T>GeneralRange<T> range(Comparator<? super T> comparator,@Nullable T lower,BoundType lowerType,@Nullable T upper,BoundType upperType){  return new GeneralRange<T>(comparator,true,lower,lowerType,true,upper,upperType);}  }
class C{  public void paintLine(Point2D pt1,Point2D pt2,Graphics graphics){  Graphics2D g=(Graphics2D)graphics;  if (pt1 != null && pt2 != null && theMap != null) {    OMLine cLine=new OMLine(pt1.getY(),pt1.getX(),pt2.getY(),pt2.getX(),lineType);    renderAttributes.setTo(cLine);    Projection proj=theMap.getRotatedProjection();    cLine.generate(proj);    cLine.render(g);  }}  }
class C{  public LocalVariableReferenceMatch(IJavaElement enclosingElement,int accuracy,int offset,int length,boolean isReadAccess,boolean isWriteAccess,boolean insideDocComment,SearchParticipant participant,IResource resource){  super(enclosingElement,accuracy,offset,length,participant,resource);  this.isReadAccess=isReadAccess;  this.isWriteAccess=isWriteAccess;  setInsideDocComment(insideDocComment);}  }
class C{  public void delayViewCreationForTest(int millis){  requestCollectionInterval=millis;}  }
class C{  public void configure(){  setCommandStationType(getOptionState(option2Name));  setTurnoutHandling(getOptionState(option3Name));  IBLnPacketizer packets=new IBLnPacketizer();  packets.connectPort(this);  this.getSystemConnectionMemo().setLnTrafficController(packets);  this.getSystemConnectionMemo().configureCommandStation(commandStationType,mTurnoutNoRetry,mTurnoutExtraSpace);  this.getSystemConnectionMemo().configureManagers();  packets.startThreads();}  }
class C{  public static int nextPow2Int(int x){  --x;  x|=x >>> 1;  x|=x >>> 2;  x|=x >>> 4;  x|=x >>> 8;  x|=x >>> 16;  return ++x;}  }
class C{  public void scaleRoundIn(float scale){  if (scale != 1.0f) {    left=(int)Math.ceil(left * scale);    top=(int)Math.ceil(top * scale);    right=(int)Math.floor(right * scale);    bottom=(int)Math.floor(bottom * scale);  }}  }
class C{  public static Path defaultDirectory(FileSystem fs){  return fs.getPath("").toAbsolutePath();}  }
class C{  public void close(){  try {    inputFile.close();  } catch (  IOException i) {    System.out.println("Caught ioexception " + i.getClass() + " "+ i.getMessage());  }}  }
class C{  @Override public void cancelRequest(Request<?> request){  if (null != request) {    request.cancel();  }}  }
class C{  public ConcurrentCoapResource(String name){  super(name);  this.threads=getAvailableProcessors();  setExecutor(Executors.newFixedThreadPool(threads,new Utils.NamedThreadFactory("ConcurrentCoapResource-" + name + '#')));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_CLASS_EXPRESSION__ANNOTATION_LIST:    return getAnnotationList();case N4JSPackage.N4_CLASS_EXPRESSION__NAME:  return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void vibrate(Context context,long[] pattern,int repeat){  Vibrator vibrator=getInstance(context);  vibrator.vibrate(pattern,repeat);}  }
class C{  private String buildToolTip(final NaviNode node){  final ZyLabelContent content=node.getRealizer().getNodeContent();  return HtmlGenerator.getHtml(content,GuiHelper.getMonospaceFont(),true);}  }
class C{  public double similarity(U u1,U u2){  return sim.similarity(user2uidx(u1),user2uidx(u2));}  }
class C{  private static String configureTCPTransport(final AbstractApplicationContext ctx){  LOGGER.info(" configure TCP Transport, start Broker Service ");  List<Integer> portExclusionList=null;  if (ctx.containsBean(PORT_EXCLUSION_LIST_BEAN_ID)) {    final String exclusionString=(String)ctx.getBean(PORT_EXCLUSION_LIST_BEAN_ID);    if (exclusionString != null && !exclusionString.isEmpty()) {      final String[] exclusionStringArray=exclusionString.split(",");      portExclusionList=new ArrayList<Integer>(exclusionStringArray.length);      for (      String portString : exclusionStringArray) {        final String trimmedPortString=portString.trim();        if (!trimmedPortString.isEmpty()) {          try {            portExclusionList.add(new Integer(trimmedPortString));          } catch (          NumberFormatException nfe) {            throw new IllegalStateException("Please check that the property 'tcp.port.exclusion.list' is a comma separated list of integer values (port numbers) or is empty. (White space is fine.)",nfe);          }        }      }    }  }  final BrokerService broker=(BrokerService)ctx.getBean("jmsBroker");  try {    final String hostname=InetAddress.getLocalHost().getCanonicalHostName();    if (Utilities.verboseLogLevel >= 10) {      Utilities.verboseLog("process hostname: " + hostname);    }    boolean portAssigned=false;    int port=0;    final Random rand=new Random();    while (!portAssigned) {      port=rand.nextInt(64510) + 1025;      if (portExclusionList != null && portExclusionList.contains(port)) {        continue;      }      portAssigned=available(port);    }    final String uriString=new StringBuilder("tcp://").append(hostname).append(':').append(port).toString();    final TransportConnector tc=new TransportConnector();    tc.setUri(new URI(uriString));    broker.addConnector(tc);    broker.start();    if (LOGGER.isInfoEnabled()) {      LOGGER.info("BrokerService  running at uriString = " + uriString);    }    return uriString;  } catch (  Exception e) {    throw new IllegalStateException("Unable to configure the TCPTransport on the Broker",e);  }}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.String getLocalHostName()")) {    java_net_InetAddressImpl_getLocalHostName(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.String getHostByAddress(int)")) {    java_net_InetAddressImpl_getHostByAddr(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public boolean allowsConflation(){  return this.allowsConflation;}  }
class C{  private static void euclidean_distanceW(double[] x,double[] y,double[] weights,double[] xmiss,int normalize,int deNormalize,double[] returnValues){  int ii;  int numVarsX=x.length;  int numVarsY=y.length;  if (returnValues == null) {    throw new IllegalArgumentException("euclidean_distanceW(): returnValues = null (but should be allocated)");  }  if (returnValues.length != 3) {    throw new IllegalArgumentException("euclidean_distanceW(): returnValues.length() = " + returnValues.length + "  (but should be 3)");  }  returnValues[WEIGHTED_EUCLIDEAN_DISTANCE_INDEX]=0.0;  returnValues[NUMBER_OF_COMMON_VARIABLES_INDEX]=0.0;  returnValues[NORMALIZED_WEIGHTED_EUCLIDEAN_DISTANCE_INDEX]=0.0;  if (numVarsX != numVarsY) {    throw new IllegalArgumentException("euclidean_distanceW(): numVarsX = " + numVarsX + "  numVarsY = "+ numVarsY);  }  if (xmiss != null)   for (ii=0; ii < numVarsX; ii++) {    if (x[ii] == xmiss[0] || y[ii] == xmiss[0])     continue;    returnValues[WEIGHTED_EUCLIDEAN_DISTANCE_INDEX]+=weights[ii] * (x[ii] - y[ii]) * (x[ii] - y[ii]);    returnValues[NUMBER_OF_COMMON_VARIABLES_INDEX]++;  } else   for (ii=0; ii < numVarsX; ii++)   returnValues[WEIGHTED_EUCLIDEAN_DISTANCE_INDEX]+=weights[ii] * (x[ii] - y[ii]) * (x[ii] - y[ii]);  returnValues[NUMBER_OF_COMMON_VARIABLES_INDEX]=numVarsX;  if (returnValues[NUMBER_OF_COMMON_VARIABLES_INDEX] <= 0) {    return;  }  if (normalize == 1) {    returnValues[WEIGHTED_EUCLIDEAN_DISTANCE_INDEX]/=returnValues[NUMBER_OF_COMMON_VARIABLES_INDEX];    if (deNormalize == 1)     returnValues[WEIGHTED_EUCLIDEAN_DISTANCE_INDEX]*=numVarsX;  } else {    if (deNormalize == 1)     returnValues[WEIGHTED_EUCLIDEAN_DISTANCE_INDEX]=(returnValues[WEIGHTED_EUCLIDEAN_DISTANCE_INDEX] / returnValues[NUMBER_OF_COMMON_VARIABLES_INDEX]) * numVarsX;  }  returnValues[WEIGHTED_EUCLIDEAN_DISTANCE_INDEX]=Math.sqrt(returnValues[WEIGHTED_EUCLIDEAN_DISTANCE_INDEX]);}  }
class C{  public boolean isScan(){  return scan;}  }
class C{  public SSLHandshakeException(String reason){  super(reason);}  }
class C{  @SuppressWarnings("unused") @Deprecated public static void install(Application app){  if (installed)   return;  installed=true;  if (Build.VERSION.SDK_INT >= 14)   app.registerActivityLifecycleCallbacks(LifecycleListener.getInstance());  ProtifyApplication.installExternalResources(app);  DexLoader.install(app);}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.STEP;}  }
class C{  public String configResetStat(){  client.configResetStat();  return client.getStatusCodeReply();}  }
class C{  public static void fieldsToJson(JSONStringer js,Collection<Field> fields) throws JSONException {  for (  Field field : fields) {    Object value=field.getValue();    if (value instanceof Date) {      value=((Date)value).getTime();    }    String displayValue=field.getDisplayValue();    String href=field.getHref();    List<String> errors=field.getErrors();    js.key(field.getPropertyAccessor().getName());    JSONWriter json=js.object().key(JSON_VALUE);    if (value instanceof Blob) {      json.object();      Blob blob=(Blob)value;      json.key(JSON_TYPE).value(Blob.class.getName());      json.key("code").value(blob.getCode());      json.key("filename").value(blob.getFilename());      json.key("contentType").value(blob.getContentType());      json.key("size").value(blob.getSize());      json.endObject();    } else {      json.value(value);    }    if (displayValue != null && !ObjectUtils.equals(displayValue,value)) {      json.key("displayValue").value(displayValue);    }    if (href != null) {      json.key("href").value(href);    }    if (!errors.isEmpty()) {      json.key("errors").array();      for (      String error : errors) {        json.value(error);      }      json.endArray();    }    json.endObject();  }}  }
class C{  public void removeCache(PGraphics renderer){  if (cacheMap != null) {    cacheMap.remove(renderer);  }}  }
class C{  public boolean hasSpansIntersecting(int start,int end){  for (int i=0; i < numberOfSpans; i++) {    if (spanStarts[i] >= end || spanEnds[i] <= start)     continue;    return true;  }  return false;}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentitynodeattributes.class,args);}  }
class C{  @Override public String globalInfo(){  return "Removes attributes based on a regular expression matched against " + "their names but will not remove the class attribute.";}  }
class C{  public String optString(String key){  return this.optString(key,"");}  }
class C{  protected TimeSource activateTimeSource(){synchronized (millisEstimatorLock) {    if (millisEstimator == null) {      millisEstimator=new EstimatorTimeSource(new SystemTimeSource(),10,logger);    }  }  return millisEstimator;}  }
class C{  public Migration prepareMigration(URI virtualVolumeURI,URI sourceURI,URI targetURI,String token){  Migration migration=new Migration();  migration.setId(URIUtil.createId(Migration.class));  migration.setVolume(virtualVolumeURI);  migration.setSource(sourceURI);  migration.setTarget(targetURI);  _dbClient.createObject(migration);  migration.setOpStatus(new OpStatusMap());  Operation op=_dbClient.createTaskOpStatus(Migration.class,migration.getId(),token,ResourceOperationTypeEnum.MIGRATE_BLOCK_VOLUME);  migration.getOpStatus().put(token,op);  _dbClient.updateObject(migration);  return migration;}  }
class C{  protected boolean canDetectDefaultSystemLibraries(File javaHome,File javaExecutable){  LibraryLocation[] locations=getDefaultLibraryLocations(javaHome);  String version=getVMVersion(javaHome,javaExecutable);  return locations.length > 0 && !version.startsWith("1.1");}  }
class C{  public CToggleButton(String text,Icon icon,boolean selected){  super(text,icon,selected);}  }
class C{  public synchronized void connected(BluetoothSocket socket,BluetoothDevice device,final String socketType){  if (mConnectThread != null) {    mConnectThread.cancel();    mConnectThread=null;  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  if (mSecureAcceptThread != null) {    mSecureAcceptThread.cancel();    mSecureAcceptThread=null;  }  mConnectedThread=new ConnectedThread(socket,socketType);  mConnectedThread.start();  Message msg=mHandler.obtainMessage(MESSAGE_DEVICE_NAME);  mHandler.sendMessage(msg);  setState(BluetoothService.STATE_CONNECTED);}  }
class C{  private void initMethod(Table table){  String note="";  boolean valid=validateTable(table);  if (!valid && methodPk) {    methodPk=false;    note=" (auto - reverted)";  }  if (methodPk) {    println(String.format("Method: pk" + note));  } else {    println(String.format("Method: limit" + note));  }}  }
class C{  public PendingCall(String method,Object[] args){  super(method,args);}  }
class C{  @Override public int hashCode(){  return 0x45aaf665 + Arrays.hashCode(fields);}  }
class C{  public RosterEntryComboBox(String rosterGroup,String roadName,String roadNumber,String dccAddress,String mfg,String decoderMfgID,String decoderVersionID,String id){  this(Roster.getDefault(),rosterGroup,roadName,roadNumber,dccAddress,mfg,decoderMfgID,decoderVersionID,id);}  }
