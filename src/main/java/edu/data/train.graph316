class C{  @Override public String globalInfo(){  return "The polynomial kernel : K(x, y) = <x, y>^p or K(x, y) = (<x, y>+1)^p";}  }
class C{  public boolean isAverageInvoice(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_AverageInvoice);}  }
class C{  public void doneButtonActionPerformed(){  if (editMode) {    editMode=false;    curNode=null;    addButton.setVisible(true);    editButton.setVisible(true);    deleteButton.setVisible(true);    doneButton.setVisible(true);    updateButton.setVisible(false);    cancelButton.setVisible(false);    nodeAddrField.setVisible(true);    nodeAddrStatic.setVisible(false);  }  if (changedNode) {    javax.swing.JOptionPane.showMessageDialog(this,rb.getString("Reminder1") + "\n" + rb.getString("Reminder2"),rb.getString("ReminderTitle"),javax.swing.JOptionPane.INFORMATION_MESSAGE);  }  setVisible(false);  dispose();}  }
class C{  public boolean isEndVisible(int row){  return getBoolean(row,VisualItem.ENDVISIBLE);}  }
class C{  private String buildUrl(String coords){  Uri.Builder builder=Uri.parse(MWURL).buildUpon();  builder.appendPath("w").appendPath("api.php").appendQueryParameter("action","query").appendQueryParameter("prop","categories|coordinates|pageprops").appendQueryParameter("format","json").appendQueryParameter("clshow","!hidden").appendQueryParameter("coprop","type|name|dim|country|region|globe").appendQueryParameter("codistancefrompoint",coords).appendQueryParameter("generator","geosearch").appendQueryParameter("ggscoord",coords).appendQueryParameter("ggsradius","10000").appendQueryParameter("ggslimit","10").appendQueryParameter("ggsnamespace","6").appendQueryParameter("ggsprop","type|name|dim|country|region|globe").appendQueryParameter("ggsprimary","all").appendQueryParameter("formatversion","2");  return builder.toString();}  }
class C{  public Matrix4f(){  this.m00=(float)0.0;  this.m01=(float)0.0;  this.m02=(float)0.0;  this.m03=(float)0.0;  this.m10=(float)0.0;  this.m11=(float)0.0;  this.m12=(float)0.0;  this.m13=(float)0.0;  this.m20=(float)0.0;  this.m21=(float)0.0;  this.m22=(float)0.0;  this.m23=(float)0.0;  this.m30=(float)0.0;  this.m31=(float)0.0;  this.m32=(float)0.0;  this.m33=(float)0.0;}  }
class C{  public double v2(){  return v2;}  }
class C{  public void test_ticket_1007_number5() throws Exception {  new TestHelper("ticket-1007-number5","ticket-1007-number5.rq","ticket-1007-custom.trig","ticket-1007-number-integer.srx",false).runTest();}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof LimitChronology == false) {    return false;  }  LimitChronology chrono=(LimitChronology)obj;  return getBase().equals(chrono.getBase()) && FieldUtils.equals(getLowerLimit(),chrono.getLowerLimit()) && FieldUtils.equals(getUpperLimit(),chrono.getUpperLimit());}  }
class C{  public final void testToString01() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  PKIXCertPathValidatorResult vr=new PKIXCertPathValidatorResult(ta,TestUtils.getPolicyTree(),testPublicKey);  assertNotNull(vr.toString());}  }
class C{  @Command(description="Sign a file") public void signFile(@Param(name="keyId",description="Key ID") String keyId,@Param(name="fileName",description="File name") String fileName) throws Exception {  String algorithm="SHA512withRSA";  byte[] digest=calculateDigest(getDigestAlgorithmId(algorithm),fileToBytes(fileName));  SignResponse response=SignerClient.execute(new Sign(keyId,algorithm,digest));  System.out.println("Signature: " + Arrays.toString(response.getSignature()));}  }
class C{  protected static String createIdFromJndiLocation(String jndiLocation){  int[] delimeters=new int[]{jndiLocation.lastIndexOf('/'),jndiLocation.lastIndexOf('.'),jndiLocation.lastIndexOf(':')};  Arrays.sort(delimeters);  int highestIndex=delimeters[2];  return jndiLocation.substring(highestIndex + 1);}  }
class C{  private void defineToolTips(UIDefaults d){  String p="ToolTip";  d.put("seaGlassToolTipBorder",new Color(0x5b7ea4));  d.put(p + ".contentMargins",new InsetsUIResource(4,4,4,4));  d.put(p + ".opaque",Boolean.FALSE);  d.put(p + ".background",new ColorUIResource(0xd5,0xe8,0xf7));  d.put(p + ".backgroundPainter",new ToolTipPainter(ToolTipPainter.Which.BORDER_ENABLED));}  }
class C{  @Override public Instance generateExample() throws Exception {  throw new Exception("Examples cannot be generated" + " one by one.");}  }
class C{  public static List<Entry> loadEntriesFromFile(String path){  File sdcard=Environment.getExternalStorageDirectory();  File file=new File(sdcard,path);  List<Entry> entries=new ArrayList<Entry>();  try {    @SuppressWarnings("resource") BufferedReader br=new BufferedReader(new FileReader(file));    String line;    while ((line=br.readLine()) != null) {      String[] split=line.split("#");      if (split.length <= 2) {        entries.add(new Entry(Float.parseFloat(split[0]),Integer.parseInt(split[1])));      } else {        float[] vals=new float[split.length - 1];        for (int i=0; i < vals.length; i++) {          vals[i]=Float.parseFloat(split[i]);        }        entries.add(new BarEntry(vals,Integer.parseInt(split[split.length - 1])));      }    }  } catch (  IOException e) {    Log.e(LOG,e.toString());  }  return entries;}  }
class C{  public void addTo(BatchRefUpdate bru){  for (  ReceiveCommand cmd : commands.values()) {    bru.addCommand(cmd);  }}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:14.299 -0500",hash_original_method="DAE5F643078D3DA273ACC6BEF5E44EF2",hash_generated_method="310A384600384362731FCC25D2DE3D0C") public LayoutParams(int width,int height,int gravity){  super(width,height);  this.gravity=gravity;}  }
class C{  public MaterializeBuilder withContainer(ViewGroup container,ViewGroup.LayoutParams layoutParams){  this.mContainer=container;  this.mContainerLayoutParams=layoutParams;  return this;}  }
class C{  private boolean evaluateSelectedTerritoryToCurrentCanal(final String newTerrName,final boolean newTerrIsWater,final Set<String> newTerrNeighborsDiffType,final List<String> terrCanals){  if (currentCanalName.isPresent()) {    if (newTerrNeighborsDiffType.size() < 2) {      JOptionPane.showMessageDialog(null,"The selected " + (newTerrIsWater ? "water" : "land") + " territory is connected to less than 2 "+ (!newTerrIsWater ? "water" : "land")+ " territories!","Input Error",JOptionPane.ERROR_MESSAGE);      return false;    }    if (!terrCanals.isEmpty()) {      terrCanals.add(NEW_CANAL_OPTION);      currentCanalName=Optional.ofNullable((String)JOptionPane.showInputDialog(null,"Which canal should be selected for territory '" + newTerrName + "?","Choose Canal",JOptionPane.QUESTION_MESSAGE,null,terrCanals.toArray(new String[terrCanals.size()]),terrCanals.get(0)));    }    if (terrCanals.isEmpty() || NEW_CANAL_OPTION.equals(currentCanalName.orElse(""))) {      final String suggestedCanalName=getSuggestedCanalName();      currentCanalName=Optional.ofNullable(JOptionPane.showInputDialog(null,"Which canal should be selected for territory '" + newTerrName + "?",suggestedCanalName));      while (MapXmlHelper.getCanalDefinitionsMap().keySet().contains(currentCanalName.get())) {        JOptionPane.showMessageDialog(null,"The canal name " + currentCanalName + " is already in use!","Input Error",JOptionPane.ERROR_MESSAGE);        currentCanalName=Optional.ofNullable(JOptionPane.showInputDialog(null,"Which canal should be selected for territory '" + newTerrName + "?",currentCanalName));      }    } else     if (currentCanalName.isPresent()) {      final CanalTerritoriesTuple canalTerrs=MapXmlHelper.getCanalDefinitionsMap().get(currentCanalName.get());      selectedWaterTerritories=canalTerrs.getWaterTerritories();      selectedLandTerritories=canalTerrs.getLandTerritories();      repaint();      return false;    }    if (!currentCanalName.isPresent()) {      return false;    }  }  return true;}  }
class C{  public static Iterable<String> toHexStrings(Iterable<ByteArray> arrays){  ArrayList<String> ret=new ArrayList<String>();  for (  ByteArray array : arrays)   ret.add(HexString.toHexString(array.get()));  return ret;}  }
class C{  public java.lang.StringBuffer append(boolean b){  internal.append(b);  return this;}  }
class C{  void initProgram(){  glUseProgram(this.program);  viewMatrixUniform=glGetUniformLocation(this.program,"viewMatrix");  projMatrixUniform=glGetUniformLocation(this.program,"projMatrix");  viewportSizeUniform=glGetUniformLocation(this.program,"viewportSize");  glUseProgram(0);}  }
class C{  public final Vec4D normalize(){  float mag=(float)Math.sqrt(x * x + y * y + z * z);  if (mag > 0) {    mag=1f / mag;    x*=mag;    y*=mag;    z*=mag;    w*=mag;  }  return this;}  }
class C{  private static String handleServerError(Object err,Context context){  VolleyError error=(VolleyError)err;  NetworkResponse response=error.networkResponse;  if (response != null) {switch (response.statusCode) {case 404:case 422:case 401:      try {        HashMap<String,String> result=new Gson().fromJson(new String(response.data),new TypeToken<Map<String,String>>(){        }.getType());        if (result != null && result.containsKey("error")) {          return result.get("error");        }      } catch (      Exception e) {        e.printStackTrace();      }    return error.getMessage();default :  return context.getResources().getString(R.string.generic_server_down);}}return context.getResources().getString(R.string.generic_error);}  }
class C{  public int capacity(){  return data == null ? 0 : data.length;}  }
class C{  private boolean matches(Component c,int partIndex){  if (partIndex < 0)   return true;  if (c == null)   return false;  String name=c.getName();  if (parts[partIndex].named && parts[partIndex].s.equals(name)) {    return matches(c.getParent(),partIndex - 1);  } else   if (!parts[partIndex].named) {    Class clazz=parts[partIndex].c;    if (clazz != null && clazz.isAssignableFrom(c.getClass())) {      return matches(c.getParent(),partIndex - 1);    } else     if (clazz == null && registeredRegions.containsKey(parts[partIndex].s)) {      Region r=registeredRegions.get(parts[partIndex].s);      Component parent=r.isSubregion() ? c : c.getParent();      if (r == Region.INTERNAL_FRAME_TITLE_PANE && parent != null && parent instanceof JInternalFrame.JDesktopIcon) {        JInternalFrame.JDesktopIcon icon=(JInternalFrame.JDesktopIcon)parent;        parent=icon.getInternalFrame();      } else       if (r == Region.INTERNAL_FRAME_TITLE_PANE && c instanceof SeaGlassTitlePane) {        if (partIndex <= 0 || (parts[partIndex - 1].c != null && parts[partIndex - 1].c.isAssignableFrom(JInternalFrame.class))) {          return true;        }      }      return matches(parent,partIndex - 1);    }  }  return false;}  }
class C{  @EventHandler public void onMatchThreadMake(MatchThreadMakeEvent event){  MatchThread matchThread=event.getMatchThread();  CycleRunnable runnable=new CycleRunnable(this,UUID.randomUUID());  runnable.setMap(Cardinal.getModule(RotationModule.class).getRotations().get(matchThread).getNext());  nextCycle.put(matchThread,runnable);  cycle(matchThread);}  }
class C{  public void drawImage(float x,float y,int width,int height,float magnification,int format,int type,Buffer pixels){  GL gl=GLU.getCurrentGL();  gl.getGL2().glWindowPos2f(x,y);  gl.getGL2().glPixelZoom(magnification,magnification);  gl.getGL2().glDrawPixels(width,height,format,type,pixels);  gl.getGL2().glFlush();}  }
class C{  static public double incompleteGamma(double a,double x) throws ArithmeticException {  double ans, ax, c, r;  if (x <= 0 || a <= 0)   return 0.0;  if (x > 1.0 && x > a)   return 1.0 - incompleteGammaComplement(a,x);  ax=a * Math.log(x) - x - logGamma(a);  if (ax < -MAXLOG)   return (0.0);  ax=Math.exp(ax);  r=a;  c=1.0;  ans=1.0;  do {    r+=1.0;    c*=x / r;    ans+=c;  } while (c / ans > MACHEP);  return (ans * ax / a);}  }
class C{  private Utils(){  throw new AssertionError();}  }
class C{  public EmptyKeysRaba(){}  }
class C{  public CModuleWrapper(final INaviModule module){  super(module);  Preconditions.checkNotNull(module,"IE02061: Module argument can not be null");}  }
class C{  private static void readEODData(String EODFile){  log.info("Reading trips from file " + EODFile + "...");  final int idxTripId=0;  final int idxPCon=3;  final int idxHour=7;  final int idxMinute=8;  final int idxAxis=10;  final int idxZOrig=11;  final int idxZDest=12;  final int idxCarga=13;  BufferedReader reader=IOUtils.getBufferedReader(EODFile);  int counter=0;  try {    String line=reader.readLine();    while ((line=reader.readLine()) != null) {      String[] splittedLine=line.split(";");      String id=splittedLine[idxTripId].split(",")[0];      String originZone=splittedLine[idxZOrig].replace("\"","");      String destinationZone=splittedLine[idxZDest].replace("\"","");      String pCon=splittedLine[idxPCon].replace("\"","");      int numberOfAxis=new Double(splittedLine[idxAxis].split(",")[0]).intValue();      double timeOfSurvey=new Double(splittedLine[idxHour].replace(",",".")) * 3600 + new Double(splittedLine[idxMinute].replace(",",".")) * 60;      String typeOfGoods=splittedLine[idxCarga].split(",")[0];      if (originZone == pCon) {        originZone=originZone.concat("in");      }      if (destinationZone == pCon) {        destinationZone=destinationZone.concat("out");      }      FreightTrip trip=new FreightTrip(id,originZone,destinationZone,pCon,numberOfAxis,timeOfSurvey,typeOfGoods);      System.out.println(trip.toString());      tripId2FreightTrip.put(id,trip);      counter++;    }    reader.close();  } catch (  IOException e) {    e.printStackTrace();  }  log.info("Read data of " + counter + " trips...");}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  public Builder(){}  }
class C{  public LuaViewDialog(Context context,int theme){  super(context,theme);  mLuaView=LuaView.create(context);}  }
class C{  public boolean menuOpenTouchAllowed(View content,int currPage,float x){switch (mTouchMode) {case SlidingMenu.TOUCHMODE_FULLSCREEN:    return true;case SlidingMenu.TOUCHMODE_MARGIN:  return menuTouchInQuickReturn(content,currPage,x);}return false;}  }
class C{  private ExchangeRate directLookup(final Currency source,final Currency target,final Date date){  if (System.getProperty("EXPERIMENTAL") == null)   throw new UnsupportedOperationException("Work in progress");  ExchangeRate rate=null;  QL.require(((rate=fetch(source,target,date)) != null),"no direct conversion available");  return rate;}  }
class C{  public int readInt(int length) throws IOException {  if ((length < 0) || (length > 4)) {    throw new IllegalArgumentException();  }  int result=0;  int byteRead=0;  if (bigEndian) {    for (int i=(length - 1) * 8; i >= 0; i-=8) {      byteRead=stream.read();      bytesRead++;      if (byteRead == -1) {        throw new EOFException();      }      result|=(byteRead << i);    }  } else {    length*=8;    for (int i=0; i != length; i+=8) {      byteRead=stream.read();      bytesRead++;      if (byteRead == -1) {        throw new EOFException();      }      result|=(byteRead << i);    }  }  return result;}  }
class C{  public static long sizeOf(boolean[] arr){  return alignObjectSize((long)NUM_BYTES_ARRAY_HEADER + arr.length);}  }
class C{  private void mainrxMethod(){  testObjservable=Observable.just(2,5,8,9,6,9);  testObjservable.subscribe(integerObserver);  usingOperator();  usingOperatorComplicatedWay();}  }
class C{  public CacheTable(int size,float loadFactor){  m_Table=new TableEntry[size];  m_LoadFactor=loadFactor;  m_Threshold=(int)(size * loadFactor);  m_Count=0;}  }
class C{  public RealLiteral createRealLiteral(){  RealLiteralImpl realLiteral=new RealLiteralImpl();  return realLiteral;}  }
class C{  protected void loadParametersForGene(EvolutionState state,int index,Parameter base,Parameter def,String postfix){  if (state.parameters.exists(base.push(P_MUTATIONPROB).push(postfix),def.push(P_MUTATIONPROB).push(postfix))) {    mutationProbability[index]=state.parameters.getDoubleWithMax(base.push(P_MUTATIONPROB).push(postfix),def.push(P_MUTATIONPROB).push(postfix),0.0,1.0);    if (mutationProbability[index] == -1.0)     state.output.fatal("Per-gene or per-segment mutation probability must be between 0.0 and 1.0 inclusive",base.push(P_MUTATIONPROB).push(postfix),def.push(P_MUTATIONPROB).push(postfix));  }  if (state.parameters.exists(base.push(P_DUPLICATE_RETRIES).push(postfix),def.push(P_DUPLICATE_RETRIES).push(postfix))) {    duplicateRetries[index]=state.parameters.getInt(base.push(P_DUPLICATE_RETRIES).push(postfix),def.push(P_DUPLICATE_RETRIES).push(postfix));    if (duplicateRetries[index] < 0)     state.output.fatal("Duplicate Retries for gene " + index + ", if defined must be a value >= 0",base.push(P_DUPLICATE_RETRIES).push(postfix),def.push(P_DUPLICATE_RETRIES).push(postfix));  }}  }
class C{  public final Address pop1(){  if (checkDequeue(2))   return uncheckedDequeue(); else   return Address.zero();}  }
class C{  public static boolean isPublic(int mod){  return Modifier.isPublic(mod);}  }
class C{  public List<TriggerKey> selectTriggerToAcquire(Connection conn,long noLaterThan,long noEarlierThan) throws SQLException {  return selectTriggerToAcquire(conn,noLaterThan,noEarlierThan,1);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return VALUES;case 3:return ERROR;default :return null;}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Train newTrain(String name){  Train train=getTrainByName(name);  if (train == null) {    _id++;    train=new Train(Integer.toString(_id),name);    Integer oldSize=Integer.valueOf(_trainHashTable.size());    _trainHashTable.put(train.getId(),train);    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_trainHashTable.size()));  }  return train;}  }
class C{  private HashMap readFault() throws IOException {  HashMap map=new HashMap();  int code=read();  for (; code > 0 && code != 'z'; code=read()) {    _peek=code;    Object key=readObject();    Object value=readObject();    if (key != null && value != null)     map.put(key,value);  }  if (code != 'z')   throw expect("fault",code);  return map;}  }
class C{  public static ValueTimestamp fromDateValueAndNanos(long dateValue,long timeNanos){  return (ValueTimestamp)Value.cache(new ValueTimestamp(dateValue,timeNanos));}  }
class C{  public static double evaluate(String input){  return parse(input,new VariableRegistry()).evaluate();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void shutdown(boolean isIgnoringPreferenceSaves){  shutdownWithoutExit(isIgnoringPreferenceSaves);  System.exit(0);}  }
class C{  public String toString(){  return "#<ZoomEvent " + (isRelative() ? "Relative " : "") + (isAbsolute() ? "Absolute " : "")+ amount+ ">";}  }
class C{  public static Set<Map> showDiff(SolrDocumentList a,SolrDocumentList b,String aName,String bName){  System.err.println("######" + aName + ": "+ toStr(a,10));  System.err.println("######" + bName + ": "+ toStr(b,10));  System.err.println("###### sizes=" + a.size() + ","+ b.size());  Set<Map> setA=new HashSet<>();  for (  SolrDocument sdoc : a) {    setA.add(new HashMap(sdoc));  }  Set<Map> setB=new HashSet<>();  for (  SolrDocument sdoc : b) {    setB.add(new HashMap(sdoc));  }  Set<Map> onlyInA=new HashSet<>(setA);  onlyInA.removeAll(setB);  Set<Map> onlyInB=new HashSet<>(setB);  onlyInB.removeAll(setA);  if (onlyInA.size() > 0) {    System.err.println("###### Only in " + aName + ": "+ onlyInA);  }  if (onlyInB.size() > 0) {    System.err.println("###### Only in " + bName + ": "+ onlyInB);  }  onlyInA.addAll(onlyInB);  return onlyInA;}  }
class C{  public RouterTest(String name){  super(name);}  }
class C{  public static void copyFile(File source,File destination) throws IOException {  FileOutputStream out=null;  FileInputStream in=null;  try {    destination.getParentFile().mkdirs();    out=new FileOutputStream(destination);    in=new FileInputStream(source);    byte[] buff=new byte[1024];    int read=0;    while ((read=in.read(buff)) > 0) {      out.write(buff,0,read);    }    out.flush();  }  finally {    if (in != null) {      in.close();    }    if (out != null) {      out.close();    }  }}  }
class C{  @Override protected void initScenes(){  inScene.setPosition(0,CCDirector.sharedDirector().winSize().height);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static void underlineWord(InputConnection ic,SelectedWord word){  if (!sMethodsInitialized) {    initializeMethodsForReflection();  }  if (sMethodSetComposingRegion != null) {    try {      sMethodSetComposingRegion.invoke(ic,word.start,word.end);    } catch (    InvocationTargetException exc) {    }catch (    IllegalArgumentException e) {    }catch (    IllegalAccessException e) {    }  }}  }
class C{  private void combineEntries(ArrayList<long[]> list,int total){  Collections.sort(list,this);  for (int minGap=10; minGap < total; minGap+=minGap / 2) {    for (int i=0; i < list.size() - 1; i++) {      long[] current=list.get(i);      long[] next=list.get(i + 1);      if (current[1] + minGap >= next[0]) {        current[1]=next[1];        list.remove(i + 1);        i--;      }    }    int searched=0;    for (    long[] range : list) {      searched+=range[1] - range[0] + 1;    }    if (searched > 2 * total || list.size() < 100) {      break;    }  }}  }
class C{  public static char[] readPassword(String user){  Console console=System.console();  if (console != null) {    System.out.format("password for '%s': ",user);    return console.readPassword();  } else {    throw new RuntimeException("Please login by running a command without piping.\n" + "For example: keywhiz.cli login");  }}  }
class C{  public SnapshotException(){}  }
class C{  @Override public void putAll(Map<? extends V,? extends Integer> map){  Iterator<? extends Entry<? extends V,? extends Integer>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends V,? extends Integer> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public InsnList withRegisterOffset(int delta){  int sz=size();  InsnList result=new InsnList(sz);  for (int i=0; i < sz; i++) {    Insn one=(Insn)get0(i);    if (one != null) {      result.set0(i,one.withRegisterOffset(delta));    }  }  if (isImmutable()) {    result.setImmutable();  }  return result;}  }
class C{  public boolean nextBoolean(float probability){  int y;  if (probability < 0.0f || probability > 1.0f)   throw new IllegalArgumentException("probability must be between 0.0 and 1.0 inclusive.");  if (probability == 0.0f)   return false; else   if (probability == 1.0f)   return true;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  return (y >>> 8) / ((float)(1 << 24)) < probability;}  }
class C{  public static int ratio(String s1,String s2){  x.assertNotNull(s1,"s1 is null");  x.assertNotNull(s2,"ss is null");  SequenceMatcher m=new SequenceMatcher(s1,s2);  return (int)(x.round(100 * m.ratio()));}  }
class C{  public double arcDistance(final double x,final double y,final double z){  return Tools.safeAcos(dotProduct(x,y,z) / (magnitude() * Vector.magnitude(x,y,z)));}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (generator: ");  result.append(generator);  result.append(", declaredAsync: ");  result.append(declaredAsync);  result.append(')');  return result.toString();}  }
class C{  public static void clearColumnDictionaryCache(Map<String,Dictionary> columnToDictionaryMap){  for (  Map.Entry<String,Dictionary> entry : columnToDictionaryMap.entrySet()) {    CarbonUtil.clearDictionaryCache(entry.getValue());  }}  }
class C{  @Override protected void determineLabelPositions(DrawContext dc){  Iterator<? extends Position> iterator=this.path.getPositions().iterator();  Position first=iterator.next();  Position last=first;  while (iterator.hasNext()) {    last=iterator.next();  }  TacticalGraphicLabel startLabel=this.labels.get(0);  TacticalGraphicLabel endLabel=this.labels.get(1);  startLabel.setPosition(first);  endLabel.setPosition(last);  if (first.longitude.degrees < last.longitude.degrees) {    startLabel.setTextAlign(AVKey.RIGHT);    endLabel.setTextAlign(AVKey.LEFT);  } else {    startLabel.setTextAlign(AVKey.LEFT);    endLabel.setTextAlign(AVKey.RIGHT);  }}  }
class C{  private void populateNameMap(){  paperNames.put("iso-a0","A0");  paperNames.put("iso-a1","A1");  paperNames.put("iso-a2","A2");  paperNames.put("iso-a3","A3");  paperNames.put("iso-a4","A4");  paperNames.put("iso-a5","A5");  paperNames.put("iso-a6","A6");  paperNames.put("iso-a7","A7");  paperNames.put("iso-a8","A8");  paperNames.put("iso-a9","A9");  paperNames.put("iso-a10","A10");  paperNames.put("iso-b0","B0");  paperNames.put("iso-b1","B1");  paperNames.put("iso-b2","B2");  paperNames.put("iso-b3","B3");  paperNames.put("iso-b4","B4");  paperNames.put("iso-b5","B5");  paperNames.put("iso-b6","B6");  paperNames.put("iso-b7","B7");  paperNames.put("iso-b8","B8");  paperNames.put("iso-b9","B9");  paperNames.put("iso-b10","B10");  paperNames.put("na-letter","North American Letter");  paperNames.put("na-legal","North American Legal");  paperNames.put("na-8x10","North American 8x10 inch");  paperNames.put("na-5x7","North American 5x7 inch");  paperNames.put("executive","Executive");  paperNames.put("folio","Folio");  paperNames.put("invoice","Invoice");  paperNames.put("tabloid","Tabloid");  paperNames.put("ledger","Ledger");  paperNames.put("quarto","Quarto");  paperNames.put("iso-c0","C0");  paperNames.put("iso-c1","C1");  paperNames.put("iso-c2","C2");  paperNames.put("iso-c3","C3");  paperNames.put("iso-c4","C4");  paperNames.put("iso-c5","C5");  paperNames.put("iso-c6","C6");  paperNames.put("iso-designated-long","ISO Designated Long size");  paperNames.put("na-10x13-envelope","North American 10x13 inch");  paperNames.put("na-9x12-envelope","North American 9x12 inch");  paperNames.put("na-number-10-envelope","North American number 10 business envelope");  paperNames.put("na-7x9-envelope","North American 7x9 inch envelope");  paperNames.put("na-9x11-envelope","North American 9x11 inch envelope");  paperNames.put("na-10x14-envelope","North American 10x14 inch envelope");  paperNames.put("na-number-9-envelope","North American number 9 business envelope");  paperNames.put("na-6x9-envelope","North American 6x9 inch envelope");  paperNames.put("na-10x15-envelope","North American 10x15 inch envelope");  paperNames.put("monarch-envelope","Monarch envelope");  paperNames.put("jis-b0","Japanese B0");  paperNames.put("jis-b1","Japanese B1");  paperNames.put("jis-b2","Japanese B2");  paperNames.put("jis-b3","Japanese B3");  paperNames.put("jis-b4","Japanese B4");  paperNames.put("jis-b5","Japanese B5");  paperNames.put("jis-b6","Japanese B6");  paperNames.put("jis-b7","Japanese B7");  paperNames.put("jis-b8","Japanese B8");  paperNames.put("jis-b9","Japanese B9");  paperNames.put("jis-b10","Japanese B10");  paperNames.put("a","Engineering ANSI A");  paperNames.put("b","Engineering ANSI B");  paperNames.put("c","Engineering ANSI C");  paperNames.put("d","Engineering ANSI D");  paperNames.put("e","Engineering ANSI E");  paperNames.put("arch-a","Architectural A");  paperNames.put("arch-b","Architectural B");  paperNames.put("arch-c","Architectural C");  paperNames.put("arch-d","Architectural D");  paperNames.put("arch-e","Architectural E");  paperNames.put("japanese-postcard","Japanese Postcard");  paperNames.put("oufuko-postcard","Oufuko Postcard");  paperNames.put("italian-envelope","Italian Envelope");  paperNames.put("personal-envelope","Personal Envelope");  paperNames.put("na-number-11-envelope","North American Number 11 Envelope");  paperNames.put("na-number-12-envelope","North American Number 12 Envelope");  paperNames.put("na-number-14-envelope","North American Number 14 Envelope");}  }
class C{  @Override public boolean supportsStoredFunctionsUsingCallSyntax(){  debugCodeCall("supportsStoredFunctionsUsingCallSyntax");  return true;}  }
class C{  public static String resolve(String rbAndProperty){  return common().resolve0(rbAndProperty);}  }
class C{  public void resetLabels(){  AbstractInsnNode insn=first;  while (insn != null) {    if (insn instanceof LabelNode) {      ((LabelNode)insn).resetLabel();    }    insn=insn.next;  }}  }
class C{  protected void registerTooltipAttributes(){  addAttributeProcessor(new AlwaysLmlAttribute(),"always");  addAttributeProcessor(new InstantLmlAttribute(),"instant");  addAttributeProcessor(new KeepTooltipLmlAttribute(),"keep");  addAttributeProcessor(new TooltipIdsLmlAttribute(),"ids");}  }
class C{  public DoubleMatrix3D ascending(int slices,int rows,int columns){  cern.jet.math.Functions F=cern.jet.math.Functions.functions;  return descending(slices,rows,columns).assign(F.chain(F.neg,F.minus(slices * rows * columns)));}  }
class C{  public void readResponse() throws IOException {  if (userResponse != null) {    return;  }  if (networkRequest == null && cacheResponse == null) {    throw new IllegalStateException("call sendRequest() first!");  }  if (networkRequest == null) {    return;  }  Response networkResponse;  if (forWebSocket) {    httpStream.writeRequestHeaders(networkRequest);    networkResponse=readNetworkResponse();  } else   if (!callerWritesRequestBody) {    networkResponse=new NetworkInterceptorChain(0,networkRequest).proceed(networkRequest);  } else {    if (bufferedRequestBody != null && bufferedRequestBody.buffer().size() > 0) {      bufferedRequestBody.emit();    }    if (sentRequestMillis == -1) {      if (OkHeaders.contentLength(networkRequest) == -1 && requestBodyOut instanceof RetryableSink) {        long contentLength=((RetryableSink)requestBodyOut).contentLength();        networkRequest=networkRequest.newBuilder().header("Content-Length",Long.toString(contentLength)).build();      }      httpStream.writeRequestHeaders(networkRequest);    }    if (requestBodyOut != null) {      if (bufferedRequestBody != null) {        bufferedRequestBody.close();      } else {        requestBodyOut.close();      }      if (requestBodyOut instanceof RetryableSink) {        httpStream.writeRequestBody((RetryableSink)requestBodyOut);      }    }    networkResponse=readNetworkResponse();  }  receiveHeaders(networkResponse.headers());  if (cacheResponse != null) {    if (validate(cacheResponse,networkResponse)) {      userResponse=cacheResponse.newBuilder().request(userRequest).priorResponse(stripBody(priorResponse)).headers(combine(cacheResponse.headers(),networkResponse.headers())).cacheResponse(stripBody(cacheResponse)).networkResponse(stripBody(networkResponse)).build();      networkResponse.body().close();      releaseStreamAllocation();      InternalCache responseCache=Internal.instance.internalCache(client);      responseCache.trackConditionalCacheHit();      responseCache.update(cacheResponse,stripBody(userResponse));      userResponse=unzip(userResponse);      return;    } else {      closeQuietly(cacheResponse.body());    }  }  userResponse=networkResponse.newBuilder().request(userRequest).priorResponse(stripBody(priorResponse)).cacheResponse(stripBody(cacheResponse)).networkResponse(stripBody(networkResponse)).build();  if (hasBody(userResponse)) {    maybeCache();    userResponse=unzip(cacheWritingResponse(storeRequest,userResponse));  }}  }
class C{  public void addInterface(CP ilist[]){  for (int i=0; i < ilist.length; i++) {    interfaces.addElement(ilist[i]);    addCPItem(ilist[i]);  }}  }
class C{  public double elasticity(final double spot){  final double val=value();  final double del=delta(spot);  if (val > Constants.QL_EPSILON)   return del / val * spot; else   if (Math.abs(del) < Constants.QL_EPSILON)   return 0.0; else   if (del > 0.0)   return Double.MAX_VALUE; else   return Double.MIN_VALUE;}  }
class C{  private static final String toXml(){  StringBuilder sb=new StringBuilder();  sb.append("<System>").append("<JavaVersion>").append(SystemUtilities.getJavaVersion()).append("</JavaVersion>").append("<JavaVendor>").append(SystemUtilities.getJavaVendor()).append("</JavaVendor>").append("<OperatingSystem>").append(SystemUtilities.getOperatingSystem()).append("</OperatingSystem>").append("<Architecture>").append(SystemUtilities.getArchitecture()).append("</Architecture>").append("<NumberOfCpus>").append(Runtime.getRuntime().availableProcessors()).append("</NumberOfCpus>").append("<Locale>").append(Locale.getDefault().getLanguage()).append("_").append(Locale.getDefault().getCountry()).append("</Locale>").append("</System>");  return sb.toString();}  }
class C{  public void save(){  if (headers.isEmpty() && mainHeader.isEmpty()) {    try {      super.save(file);    } catch (    IOException e) {      Bukkit.getLogger().log(Level.WARNING,"Failed to save file",e);    }    return;  }  final int indentLength=options().indent();  final String pathSeparator=Character.toString(options().pathSeparator());  String content=saveToString();  StringBuilder fileData=new StringBuilder(buildHeader());  int currentIndents=0;  String key="";  for (  String h : mainHeader) {    fileData.append("#> ").append(h).append('\n');  }  for (  String line : content.split("\n")) {    if (line.isEmpty())     continue;    int indent=getSuccessiveCharCount(line,' ');    int indents=indent / indentLength;    String indentText=indent > 0 ? line.substring(0,indent) : "";    if (indents <= currentIndents) {      String[] array=key.split(Pattern.quote(pathSeparator));      int backspace=currentIndents - indents + 1;      key=join(array,options().pathSeparator(),0,array.length - backspace);    }    String separator=key.length() > 0 ? pathSeparator : "";    String lineKey=line.contains(":") ? line.split(Pattern.quote(":"))[0] : line;    key+=separator + lineKey.substring(indent);    currentIndents=indents;    List<String> header=headers.get(key);    String headerText=header != null ? addHeaderTags(header,indentText) : "";    fileData.append(headerText).append(line).append('\n');  }  FileWriter writer=null;  try {    writer=new FileWriter(file);    writer.write(fileData.toString());    writer.flush();  } catch (  IOException e) {    Bukkit.getLogger().log(Level.WARNING,"Failed to save file",e);  } finally {    if (writer != null) {      try {        writer.close();      } catch (      IOException ignored) {      }    }  }}  }
class C{  private void drawLowFarOut(double aRadius,Graphics2D g2,double xx,double m){  double side=aRadius * 2;  g2.draw(new Line2D.Double(xx - side,m - side,xx + side,m - side));  g2.draw(new Line2D.Double(xx - side,m - side,xx,m));  g2.draw(new Line2D.Double(xx + side,m - side,xx,m));}  }
class C{  private String keyToBackupKey(Key key){  return Base64.encodeToString(Key.toByteArray(key),Base64.NO_WRAP);}  }
class C{  public LoggingFilter(Class<?> clazz){  this(clazz.getName());}  }
class C{  static public Locator northWest(){  return new RelativeDecoratorLocator(0.0,0.0);}  }
class C{  public T addHighlightedField(HighlightBuilder.Field field){  highlightBuilder().field(field);  return (T)this;}  }
class C{  public SaveKnowledgeAction(KnowledgeEditable knowledgeEditable){  super("Save Knowledge...");  if (knowledgeEditable == null) {    throw new NullPointerException();  }  this.knowledgeEditable=knowledgeEditable;}  }
class C{  static BufferedReader openReader(File inputFile){  BufferedReader in=null;  try {    in=new BufferedReader(new FileReader(inputFile));  } catch (  Exception e) {    System.err.println("Can't open '" + inputFile + "' for input: "+ e);    System.exit(1);  }  return in;}  }
class C{  public OffsetPredicate offsetPredicate(){  return offsetPredicate;}  }
class C{  public static String[] orderVersions(String versionA,String versionB){  if (MavenVersionComparator.compareVersions(versionA,versionB) > 0) {    String permute=versionA;    versionA=versionB;    versionB=permute;  }  return new String[]{versionA,versionB};}  }
class C{  public static int countOccurrencesOf(String str,String sub){  if (str == null || sub == null || str.length() == 0 || sub.length() == 0) {    return 0;  }  int count=0;  int pos=0;  int idx;  while ((idx=str.indexOf(sub,pos)) != -1) {    ++count;    pos=idx + sub.length();  }  return count;}  }
class C{  @Override public void flush(){}  }
class C{  public void switchToAndReleaseMe(int n){  assert n < layers.size() : "Invalid index in MultiplexLayer switchTo message";  removeChild(layers.get(enabledLayer),true);  layers.add(enabledLayer,null);  enabledLayer=n;  addChild(layers.get(n));}  }
class C{  public void installUI(JComponent c){  super.installUI(c);  c.setOpaque(false);  ((JScrollPane)c).getViewport().setOpaque(false);}  }
class C{  public boolean allowsCombustion(){  return allowsCombustion;}  }
class C{  public void testDynDateSortMissingLast() throws Exception {  checkSortMissingLast("dyn_datedv_missinglast","1900-12-31T23:59:59.999Z","2005-12-31T23:59:59.999Z");}  }
class C{  private void releaseDestroyReadLock(){  this.destroyLock.readLock().unlock();}  }
class C{  private boolean addToUndoList(String currentStateXML,final boolean viewSwitch){  String lastStateXML=null;  if (undoManager.getNumberOfUndos() != 0) {    lastStateXML=undoManager.getXml(undoIndex);  }  if (currentStateXML == null) {    currentStateXML=this.process.getRootOperator().getXML(true);  }  if (currentStateXML != null) {    if (lastStateXML == null || !lastStateXML.equals(currentStateXML) || viewSwitch) {      if (undoIndex < undoManager.getNumberOfUndos() - 1) {        while (undoManager.getNumberOfUndos() > undoIndex + 1) {          undoManager.removeLast();        }      }      undoManager.add(currentStateXML,getProcessPanel().getProcessRenderer().getModel().getDisplayedChain(),getFirstSelectedOperator());      String maxSizeProperty=ParameterService.getParameterValue(PROPERTY_RAPIDMINER_GUI_UNDOLIST_SIZE);      int maxSize=20;      try {        if (maxSizeProperty != null) {          maxSize=Integer.parseInt(maxSizeProperty);        }      } catch (      NumberFormatException e) {        LogService.getRoot().warning("com.rapidminer.gui.main_frame_warning");      }      while (undoManager.getNumberOfUndos() > maxSize) {        undoManager.removeFirst();      }      undoIndex=undoManager.getNumberOfUndos() - 1;      enableUndoAction();      boolean oldChangedValue=MainFrame.this.changed;      if (currentStateXML.equals(lastStateXML)) {        return false;      }      MainFrame.this.changed=lastStateXML != null;      if (!oldChangedValue) {        setTitle();      }      if (MainFrame.this.process.getProcessLocation() != null) {        MainFrame.this.SAVE_ACTION.setEnabled(true);      }      return true;    } else {      return false;    }  } else {    return false;  }}  }
class C{  private void cleanUp(){  FileTools.fileDelete(getTempPath() + "/final.mp3");  FileTools.fileDelete(getTempPath() + "/tmp.mp3");  FileTools.fileDelete(getTempPath() + "/crypt.mp3");}  }
class C{  private void runPendingUpdates(){  IResource[] markerResources=null;  IResource[] annotationResources=null;synchronized (this) {    if (!fResourcesWithMarkerChanges.isEmpty()) {      markerResources=fResourcesWithMarkerChanges.toArray(new IResource[fResourcesWithMarkerChanges.size()]);      fResourcesWithMarkerChanges.clear();    }    if (!fResourcesWithAnnotationChanges.isEmpty()) {      annotationResources=fResourcesWithAnnotationChanges.toArray(new IResource[fResourcesWithAnnotationChanges.size()]);      fResourcesWithAnnotationChanges.clear();    }  }  Object[] listeners=fListeners.getListeners();  for (int i=0; i < listeners.length; i++) {    IProblemChangedListener curr=(IProblemChangedListener)listeners[i];    if (markerResources != null) {      curr.problemsChanged(markerResources,true,true);    }    if (annotationResources != null) {      curr.problemsChanged(annotationResources,false,true);    }  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public List<HostScsiTopologyInterface> listScsiTopologyInterfaces(){  HostScsiTopology scsiTopology=getScsiTopology();  if (scsiTopology != null) {    return createList(scsiTopology.getAdapter());  } else {    return Lists.newArrayList();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.ARRAY_TYPE_SPECIFIER__SIZE:    return size != SIZE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public TransformMatrix2D multiply(TransformMatrix2D matrix){  return new TransformMatrix2D(a * matrix.a + c * matrix.b,b * matrix.a + d * matrix.b,a * matrix.c + c * matrix.d,b * matrix.c + d * matrix.d,a * matrix.e + c * matrix.f + e,b * matrix.e + d * matrix.f + f);}  }
class C{  private boolean addState(int stop,int boardStopPosition,int alightStopPosition,int time,int pattern,int trip,McRaptorState back){  if (time > request.toTime + request.maxTripDurationMinutes * 60)   return false;  if (request.maxFare < 0 && time - request.suboptimalMinutes * 60 > bestTimeAtTarget)   return false;  if (back != null && back.time > time)   throw new IllegalStateException("Attempt to decrement time in state!");  McRaptorState state=new McRaptorState();  state.stop=stop;  state.boardStopPosition=boardStopPosition;  state.alightStopPosition=alightStopPosition;  state.time=time;  state.pattern=pattern;  state.trip=trip;  state.back=back;  state.round=round;  if (boardStopPosition >= 0) {    TripPattern patt=network.transitLayer.tripPatterns.get(pattern);    int boardStop=patt.stops[boardStopPosition];    if (boardStop != back.stop) {      LOG.error("Board stop position does not match board stop!");    }    if (stop != patt.stops[alightStopPosition]) {      LOG.error("Alight stop position does not match alight stop!");    }  }  if (pattern != -1) {    if (state.back != null) {      state.patterns=Arrays.copyOf(state.back.patterns,round);      state.patternHash=state.back.patternHash;    } else {      state.patterns=new int[1];    }    state.patterns[round - 1]=pattern;    state.patternHash+=pattern * PRIMES[round];  } else   if (state.back != null) {    state.patterns=state.back.patterns;    state.patternHash=state.back.patternHash;  }  if (!bestStates.containsKey(stop))   bestStates.put(stop,createStateBag());  McRaptorStateBag bag=bestStates.get(stop);  boolean optimal=bag.add(state);  if (egressTimes != null && optimal && pattern != -1 && egressTimes.containsKey(stop)) {    int timeAtDest=time + egressTimes.get(stop);    if (timeAtDest < bestTimeAtTarget)     bestTimeAtTarget=timeAtDest;  }  return optimal;}  }
class C{  public LoggedMqttMessage parse(final String xmlMessage) throws XMLException {  return (LoggedMqttMessage)super.unmarshal(xmlMessage,LoggedMqttMessage.class);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void fill(long[] matrix,long value){  int rows=matrix.length;  for (int r=0; r < rows; r++) {    matrix[r]=value;  }}  }
class C{  public PostCode(){  super(KEY);}  }
class C{  public static void removeGwtSourceProjects() throws CoreException {  ProjectUtilities.deleteProject("gwt-user",false);  ProjectUtilities.deleteProject("gwt-dev",false);}  }
class C{  public void flushToWriter() throws IOException {  StateManager stateManager=Util.getStateManager(context);  ResponseWriter origWriter=context.getResponseWriter();  StringBuilder stateBuilder=getState(stateManager,origWriter);  StringBuilder builder=fWriter.getBuffer();  int totalLen=builder.length();  int stateLen=stateBuilder.length();  int pos=0;  int tildeIdx=getNextDelimiterIndex(builder,pos);  while (pos < totalLen) {    if (tildeIdx != -1) {      if (tildeIdx > pos && (tildeIdx - pos) > bufSize) {        builder.getChars(pos,(pos + bufSize),buf,0);        orig.write(buf);        pos+=bufSize;      } else {        builder.getChars(pos,tildeIdx,buf,0);        int len=(tildeIdx - pos);        orig.write(buf,0,len);        if (builder.indexOf(RIConstants.SAVESTATE_FIELD_MARKER,pos) == tildeIdx) {          int statePos=0;          while (statePos < stateLen) {            if ((stateLen - statePos) > bufSize) {              stateBuilder.getChars(statePos,(statePos + bufSize),buf,0);              orig.write(buf);              statePos+=bufSize;            } else {              int slen=(stateLen - statePos);              stateBuilder.getChars(statePos,stateLen,buf,0);              orig.write(buf,0,slen);              statePos+=slen;            }          }          pos+=(len + STATE_MARKER_LEN);          tildeIdx=getNextDelimiterIndex(builder,pos);          stateBuilder=getState(stateManager,origWriter);          stateLen=stateBuilder.length();        } else {          pos=tildeIdx;          tildeIdx=getNextDelimiterIndex(builder,tildeIdx + 1);        }      }    } else {      if (totalLen - pos > bufSize) {        builder.getChars(pos,(pos + bufSize),buf,0);        orig.write(buf);        pos+=bufSize;      } else {        builder.getChars(pos,totalLen,buf,0);        int len=(totalLen - pos);        orig.write(buf,0,len);        pos+=(len + 1);      }    }  }  out=orig;}  }
class C{  private void openFile(){  mContainerActivity.getFileOperationsHelper().openFile(getFile());  finish();}  }
class C{  public GeoToolsTransformer(CoordinateReferenceSystem source,CoordinateReferenceSystem target) throws CrsConfigurationException {  super();  this.source=source;  this.target=target;  try {    this.math=CRS.findMathTransform(this.source,this.target);  } catch (  FactoryException e) {    throw new CoordinateTranformationException("Error configuring MathTransform.",e);  }}  }
class C{  public boolean isZoomOverItem(){  return m_zoomOverItem;}  }
class C{  public void decCqsActive(){  this._stats.incLong(_numCqsActiveId,-1);}  }
class C{  public KmlPlacemark(GeoPoint position){  this();  mGeometry=new KmlPoint(position);}  }
class C{  public String[] removeIntervalFacets(String field){  while (remove(FacetParams.FACET_INTERVAL,field)) {  }  ;  return remove(String.format(Locale.ROOT,"f.%s.facet.interval.set",field));}  }
class C{  public void test976_describeStress() throws Exception {  doStressDescribeTest("GET",RDFFormat.RDFXML,100,50,500);}  }
class C{  public Builder withExtraData(String extraData){  this.criteriaExtraDataBuilder=new Criteria.Builder();  criteriaExtraDataBuilder.withSelection(DownloadContract.Batches.COLUMN_EXTRA_DATA,Criteria.Wildcard.EQUALS).withArgument(extraData);  return this;}  }
class C{  protected void assertKnownException(String message,SQLException e){  if (e != null && e.getSQLState().startsWith("HY000")) {    BaseTestCase.logError("Unexpected General error " + message,e);  }}  }
class C{  public OFMatchReconcile(){  ofmWithSwDpid=new OFMatchWithSwDpid();  rcAction=ReconcileAction.NO_CHANGE;  cntx=new FloodlightContext();}  }
class C{  private static boolean eq(float v1,float v2){  return v1 == v2;}  }
class C{  public static ccColor4F ccc4FFromccc3B(ccColor3B c){  return new ccColor4F(c.r / 255.f,c.g / 255.f,c.b / 255.f,1.f);}  }
class C{  public boolean isFirstDayAfterYesterday(int position){  int headerPos=getHeaderPosition(position);  RowInfo row=mRowInfo.get(headerPos);  if (row != null) {    return row.mFirstDayAfterYesterday;  }  return false;}  }
class C{  private boolean updateFields(HttpServletRequest request,WebSessionCtx wsc,WWindowStatus ws){  boolean error=false;  try {    String enc=request.getCharacterEncoding();    if (enc == null)     request.setCharacterEncoding(WebEnv.ENCODING);  } catch (  Exception e) {    log.log(Level.SEVERE,"Set CharacterEndocung=" + WebEnv.ENCODING,e);  }  Enumeration en=request.getParameterNames();  while (en.hasMoreElements()) {    String key=(String)en.nextElement();    if (key.equals(P_Command) || key.equals(P_ChangedColumn) || key.equals(P_MR_RowNo)|| key.equals(P_Tab))     continue;    GridField mField=ws.curTab.getField(key);    if (mField != null && mField.isEditable(true)) {      String oldValue=WebUtil.getParameter(request,key);      String newValue=WebUtil.getParameter(request,key + "F");      String value=null;      if (newValue != null) {        Object val=lookupValue(newValue,mField.getLookup());        if (val != null)         value=val.toString();      }      if (value == null)       value=oldValue;      Object dbValue=mField.getValue();      boolean fieldError=false;      String columnName=mField.getColumnName();      log.finest(columnName + ": " + (dbValue == null ? "null" : dbValue.toString())+ " -> "+ (value == null ? "null" : value.toString()));      if (dbValue == null && value == null)       continue; else       if (dbValue != null && value == null)       ws.curTab.setValue(mField,null); else       if (dbValue == null && value != null)       fieldError=!setFieldValue(wsc,ws,mField,value); else       if (dbValue.equals(value))       continue; else       fieldError=!setFieldValue(wsc,ws,mField,value);      if (!error && fieldError) {        log.info("Error: " + mField.getColumnName());        error=true;      }    }  }  return error;}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  this.put(key,new Double(value));  return this;}  }
class C{  public static RealMatrix translationMatrix(Vector3D translationVector){  return translationMatrix(translationVector.getX(),translationVector.getY(),translationVector.getZ());}  }
class C{  public void update(double[] start,double[] dir){  s=start;  d=dir;  computeBounds();}  }
class C{  public ByteBuffer(int chunkSize){  mChunkSize=chunkSize;}  }
class C{  private final StateInfo addState(State state,State parent){  if (mDbg) {    mSm.log("addStateInternal: E state=" + state.getName() + ",parent="+ ((parent == null) ? "" : parent.getName()));  }  StateInfo parentStateInfo=null;  if (parent != null) {    parentStateInfo=mStateInfo.get(parent);    if (parentStateInfo == null) {      parentStateInfo=addState(parent,null);    }  }  StateInfo stateInfo=mStateInfo.get(state);  if (stateInfo == null) {    stateInfo=new StateInfo();    mStateInfo.put(state,stateInfo);  }  if ((stateInfo.parentStateInfo != null) && (stateInfo.parentStateInfo != parentStateInfo)) {    throw new RuntimeException("state already added");  }  stateInfo.state=state;  stateInfo.parentStateInfo=parentStateInfo;  stateInfo.active=false;  if (mDbg)   mSm.log("addStateInternal: X stateInfo: " + stateInfo);  return stateInfo;}  }
class C{  public void clear(){  this.collectedTuples.clear();}  }
class C{  protected void updateText(){  StringBuffer helpText=new StringBuffer();  if (m_Target instanceof CapabilitiesHandler) {    helpText.append(addCapabilities("CAPABILITIES",((CapabilitiesHandler)m_Target).getCapabilities()));  }  if (m_Target instanceof MultiInstanceCapabilitiesHandler) {    helpText.append(addCapabilities("MI CAPABILITIES",((MultiInstanceCapabilitiesHandler)m_Target).getMultiInstanceCapabilities()));  }  m_CapabilitiesText.setText(helpText.toString());  m_CapabilitiesText.setCaretPosition(0);}  }
class C{  static void runWithTestKit(Type type) throws Exception {  GradleRunner.create().withPluginClasspath().withProjectDir(new File(StandardSystemProperty.USER_DIR.value())).withArguments("-b","spotlessSelf.gradle","spotless" + type.checkApply("Check","Apply"),"--stacktrace").forwardOutput().build();}  }
class C{  private SB builder(){  assert indent > 0;  SB sb=new SB();  for (int i=0; i < indent; i++)   sb.a(TAB);  return sb;}  }
class C{  public boolean isSecure(Socket sock) throws IllegalArgumentException {  if (sock == null) {    throw new IllegalArgumentException("Socket may not be null.");  }  if (!(sock instanceof SSLSocket)) {    throw new IllegalArgumentException("Socket not created by this factory.");  }  if (sock.isClosed()) {    throw new IllegalArgumentException("Socket is closed.");  }  return true;}  }
class C{  private void processTDULC(TDULinkControlMessage tdulc){  if (tdulc.getOpcode() == LinkControlOpcode.CALL_TERMINATION_OR_CANCELLATION) {    broadcast(new DecoderStateEvent(this,Event.END,State.FADE));    if (mCurrentCallEvent != null) {      mCurrentCallEvent.end();      mCurrentCallEvent=null;    }  } else {    broadcast(new DecoderStateEvent(this,Event.CONTINUATION,State.CALL));  }switch (tdulc.getOpcode()) {case ADJACENT_SITE_STATUS_BROADCAST:    if (tdulc instanceof AdjacentSiteStatusBroadcast) {      IAdjacentSite ias=(IAdjacentSite)tdulc;      mNeighborMap.put(ias.getUniqueID(),ias);      updateSystem(ias.getSystemID());    } else {      logAlternateVendorMessage(tdulc);    }  break;case ADJACENT_SITE_STATUS_BROADCAST_EXPLICIT:if (tdulc instanceof AdjacentSiteStatusBroadcastExplicit) {  IAdjacentSite ias=(IAdjacentSite)tdulc;  mNeighborMap.put(ias.getUniqueID(),ias);  updateSystem(ias.getSystemID());}break;case CALL_ALERT:if (tdulc instanceof module.decode.p25.message.tdu.lc.CallAlert) {module.decode.p25.message.tdu.lc.CallAlert ca=(module.decode.p25.message.tdu.lc.CallAlert)tdulc;broadcast(new P25CallEvent.Builder(CallEventType.PAGE).aliasList(getAliasList()).from(ca.getSourceAddress()).to(ca.getTargetAddress()).details("CALL ALERT").build());} else {logAlternateVendorMessage(tdulc);}break;case CALL_TERMINATION_OR_CANCELLATION:break;case CHANNEL_IDENTIFIER_UPDATE:break;case CHANNEL_IDENTIFIER_UPDATE_EXPLICIT:break;case EXTENDED_FUNCTION_COMMAND:if (tdulc instanceof module.decode.p25.message.tdu.lc.ExtendedFunctionCommand) {module.decode.p25.message.tdu.lc.ExtendedFunctionCommand efc=(module.decode.p25.message.tdu.lc.ExtendedFunctionCommand)tdulc;broadcast(new P25CallEvent.Builder(CallEventType.COMMAND).aliasList(getAliasList()).to(efc.getTargetAddress()).details("FUNCTION:" + efc.getExtendedFunction().getLabel() + " ARG:"+ efc.getArgument()).build());} else {logAlternateVendorMessage(tdulc);}break;case GROUP_AFFILIATION_QUERY:if (tdulc instanceof module.decode.p25.message.tdu.lc.GroupAffiliationQuery) {module.decode.p25.message.tdu.lc.GroupAffiliationQuery gaq=(module.decode.p25.message.tdu.lc.GroupAffiliationQuery)tdulc;broadcast(new P25CallEvent.Builder(CallEventType.QUERY).aliasList(getAliasList()).details("GROUP AFFILIATION QUERY").from(gaq.getSourceAddress()).to(gaq.getTargetAddress()).build());} else {logAlternateVendorMessage(tdulc);}break;case GROUP_VOICE_CHANNEL_UPDATE:if (tdulc instanceof GroupVoiceChannelUpdate) {GroupVoiceChannelUpdate gvcu=(GroupVoiceChannelUpdate)tdulc;String groupA=gvcu.getGroupAddressA();if (!mCallDetectTalkgroups.contains(groupA)) {broadcast(new P25CallEvent.Builder(CallEventType.CALL_DETECT).aliasList(getAliasList()).channel(gvcu.getChannelA()).details((gvcu.isEncrypted() ? "ENCRYPTED" : "")).frequency(gvcu.getDownlinkFrequencyA()).to(groupA).build());mCallDetectTalkgroups.add(groupA);}String groupB=gvcu.getGroupAddressB();if (!mCallDetectTalkgroups.contains(groupB)) {broadcast(new P25CallEvent.Builder(CallEventType.CALL_DETECT).aliasList(getAliasList()).channel(gvcu.getChannelB()).details((gvcu.isEncrypted() ? "ENCRYPTED" : "")).frequency(gvcu.getDownlinkFrequencyB()).to(groupB).build());mCallDetectTalkgroups.add(groupB);}}break;case GROUP_VOICE_CHANNEL_UPDATE_EXPLICIT:if (mChannelType == ChannelType.STANDARD && tdulc instanceof GroupVoiceChannelUpdateExplicit) {GroupVoiceChannelUpdateExplicit gvcue=(GroupVoiceChannelUpdateExplicit)tdulc;String group=gvcue.getGroupAddress();if (!mCallDetectTalkgroups.contains(group)) {broadcast(new P25CallEvent.Builder(CallEventType.CALL_DETECT).aliasList(getAliasList()).channel(gvcue.getTransmitChannel()).details((gvcue.isEncrypted() ? "ENCRYPTED" : "")).frequency(gvcue.getDownlinkFrequency()).to(group).build());mCallDetectTalkgroups.add(group);}}break;case GROUP_VOICE_CHANNEL_USER:if (tdulc instanceof module.decode.p25.message.tdu.lc.GroupVoiceChannelUser) {module.decode.p25.message.tdu.lc.GroupVoiceChannelUser gvcuser=(module.decode.p25.message.tdu.lc.GroupVoiceChannelUser)tdulc;broadcast(new DecoderStateEvent(this,Event.CONTINUATION,State.CALL));String from=gvcuser.getSourceAddress();String to=gvcuser.getGroupAddress();updateFrom(from);updateTo(to);if (mCurrentCallEvent == null) {mCurrentCallEvent=new P25CallEvent.Builder(CallEventType.GROUP_CALL).aliasList(getAliasList()).channel(mCurrentChannel).details("TDULC GROUP VOICE CHANNEL USER" + (gvcuser.isEncrypted() ? "ENCRYPTED " : "") + (gvcuser.isEmergency() ? "EMERGENCY " : "")).frequency(mCurrentChannelFrequency).from(from).to(to).build();broadcast(mCurrentCallEvent);}}break;case MESSAGE_UPDATE:if (tdulc instanceof module.decode.p25.message.tdu.lc.MessageUpdate) {module.decode.p25.message.tdu.lc.MessageUpdate mu=(module.decode.p25.message.tdu.lc.MessageUpdate)tdulc;broadcast(new P25CallEvent.Builder(CallEventType.SDM).aliasList(getAliasList()).from(mu.getSourceAddress()).to(mu.getTargetAddress()).details("MSG: " + mu.getShortDataMessage()).build());} else {logAlternateVendorMessage(tdulc);}break;case NETWORK_STATUS_BROADCAST:if (tdulc instanceof NetworkStatusBroadcast) {updateSystem(((NetworkStatusBroadcast)tdulc).getSystem());} else {logAlternateVendorMessage(tdulc);}break;case NETWORK_STATUS_BROADCAST_EXPLICIT:if (tdulc instanceof NetworkStatusBroadcastExplicit) {updateSystem(((NetworkStatusBroadcastExplicit)tdulc).getSystem());} else {logAlternateVendorMessage(tdulc);}break;case PROTECTION_PARAMETER_BROADCAST:if (tdulc instanceof module.decode.p25.message.tdu.lc.ProtectionParameterBroadcast) {module.decode.p25.message.tdu.lc.ProtectionParameterBroadcast ppb=(module.decode.p25.message.tdu.lc.ProtectionParameterBroadcast)tdulc;broadcast(new P25CallEvent.Builder(CallEventType.COMMAND).aliasList(getAliasList()).to(ppb.getTargetAddress()).details("ENCRYPTION: " + ppb.getEncryption().name() + " KEY:"+ ppb.getEncryptionKey()).build());} else {logAlternateVendorMessage(tdulc);}break;case RFSS_STATUS_BROADCAST:if (tdulc instanceof module.decode.p25.message.tdu.lc.RFSSStatusBroadcast) {module.decode.p25.message.tdu.lc.RFSSStatusBroadcast rfsssb=(module.decode.p25.message.tdu.lc.RFSSStatusBroadcast)tdulc;updateSystem(rfsssb.getSystem());String site=rfsssb.getRFSubsystemID() + "-" + rfsssb.getSiteID();updateSite(site);if (mCurrentChannel == null || !mCurrentChannel.contentEquals(rfsssb.getChannel())) {mCurrentChannel=rfsssb.getChannel();mCurrentChannelFrequency=rfsssb.getDownlinkFrequency();}} else {logAlternateVendorMessage(tdulc);}break;case RFSS_STATUS_BROADCAST_EXPLICIT:if (tdulc instanceof module.decode.p25.message.tdu.lc.RFSSStatusBroadcastExplicit) {module.decode.p25.message.tdu.lc.RFSSStatusBroadcastExplicit rfsssbe=(module.decode.p25.message.tdu.lc.RFSSStatusBroadcastExplicit)tdulc;String site=rfsssbe.getRFSubsystemID() + "-" + rfsssbe.getSiteID();updateSite(site);if (mCurrentChannel == null || !mCurrentChannel.contentEquals(rfsssbe.getTransmitChannel())) {mCurrentChannel=rfsssbe.getTransmitChannel();mCurrentChannelFrequency=rfsssbe.getDownlinkFrequency();}} else {logAlternateVendorMessage(tdulc);}break;case SECONDARY_CONTROL_CHANNEL_BROADCAST:if (tdulc instanceof SecondaryControlChannelBroadcast) {SecondaryControlChannelBroadcast sccb=(SecondaryControlChannelBroadcast)tdulc;String site=sccb.getRFSubsystemID() + "-" + sccb.getSiteID();updateSite(site);} else {logAlternateVendorMessage(tdulc);}break;case SECONDARY_CONTROL_CHANNEL_BROADCAST_EXPLICIT:if (tdulc instanceof SecondaryControlChannelBroadcastExplicit) {SecondaryControlChannelBroadcastExplicit sccb=(SecondaryControlChannelBroadcastExplicit)tdulc;String site=sccb.getRFSubsystemID() + "-" + sccb.getSiteID();updateSite(site);} else {logAlternateVendorMessage(tdulc);}break;case STATUS_QUERY:if (tdulc instanceof module.decode.p25.message.tdu.lc.StatusQuery) {module.decode.p25.message.tdu.lc.StatusQuery sq=(module.decode.p25.message.tdu.lc.StatusQuery)tdulc;broadcast(new P25CallEvent.Builder(CallEventType.QUERY).aliasList(getAliasList()).details("STATUS QUERY").from(sq.getSourceAddress()).to(sq.getTargetAddress()).build());} else {logAlternateVendorMessage(tdulc);}break;case STATUS_UPDATE:if (tdulc instanceof module.decode.p25.message.tdu.lc.StatusUpdate) {module.decode.p25.message.tdu.lc.StatusUpdate su=(module.decode.p25.message.tdu.lc.StatusUpdate)tdulc;broadcast(new P25CallEvent.Builder(CallEventType.STATUS).aliasList(getAliasList()).details("STATUS UNIT:" + su.getUnitStatus() + " USER:"+ su.getUserStatus()).from(su.getSourceAddress()).to(su.getTargetAddress()).build());} else {logAlternateVendorMessage(tdulc);}break;case SYSTEM_SERVICE_BROADCAST:break;case TELEPHONE_INTERCONNECT_ANSWER_REQUEST:if (tdulc instanceof module.decode.p25.message.tdu.lc.TelephoneInterconnectAnswerRequest) {module.decode.p25.message.tdu.lc.TelephoneInterconnectAnswerRequest tiar=(module.decode.p25.message.tdu.lc.TelephoneInterconnectAnswerRequest)tdulc;broadcast(new P25CallEvent.Builder(CallEventType.PAGE).aliasList(getAliasList()).from(tiar.getTelephoneNumber()).to(tiar.getTargetAddress()).details("TELEPHONE CALL ALERT").build());} else {logAlternateVendorMessage(tdulc);}break;case TELEPHONE_INTERCONNECT_VOICE_CHANNEL_USER:if (mChannelType == ChannelType.STANDARD && tdulc instanceof module.decode.p25.message.tdu.lc.TelephoneInterconnectVoiceChannelUser) {module.decode.p25.message.tdu.lc.TelephoneInterconnectVoiceChannelUser tivcu=(module.decode.p25.message.tdu.lc.TelephoneInterconnectVoiceChannelUser)tdulc;String to=tivcu.getAddress();updateTo(to);if (mCurrentCallEvent == null) {mCurrentCallEvent=new P25CallEvent.Builder(CallEventType.TELEPHONE_INTERCONNECT).aliasList(getAliasList()).channel(mCurrentChannel).details((tivcu.isEncrypted() ? "ENCRYPTED" : "") + (tivcu.isEmergency() ? " EMERGENCY" : "")).frequency(mCurrentChannelFrequency).to(to).build();broadcast(mCurrentCallEvent);}}break;case UNIT_AUTHENTICATION_COMMAND:if (tdulc instanceof module.decode.p25.message.tdu.lc.UnitAuthenticationCommand) {module.decode.p25.message.tdu.lc.UnitAuthenticationCommand uac=(module.decode.p25.message.tdu.lc.UnitAuthenticationCommand)tdulc;broadcast(new P25CallEvent.Builder(CallEventType.COMMAND).aliasList(getAliasList()).to(uac.getCompleteTargetAddress()).details("AUTHENTICATE").build());} else {logAlternateVendorMessage(tdulc);}break;case UNIT_REGISTRATION_COMMAND:if (tdulc instanceof module.decode.p25.message.tdu.lc.UnitRegistrationCommand) {module.decode.p25.message.tdu.lc.UnitRegistrationCommand urc=(module.decode.p25.message.tdu.lc.UnitRegistrationCommand)tdulc;broadcast(new P25CallEvent.Builder(CallEventType.COMMAND).aliasList(getAliasList()).to(urc.getCompleteTargetAddress()).details("REGISTER").build());} else {logAlternateVendorMessage(tdulc);}break;case UNIT_TO_UNIT_ANSWER_REQUEST:if (tdulc instanceof module.decode.p25.message.tdu.lc.UnitToUnitAnswerRequest) {module.decode.p25.message.tdu.lc.UnitToUnitAnswerRequest uuar=(module.decode.p25.message.tdu.lc.UnitToUnitAnswerRequest)tdulc;broadcast(new P25CallEvent.Builder(CallEventType.PAGE).aliasList(getAliasList()).from(uuar.getSourceAddress()).to(uuar.getTargetAddress()).details("UNIT TO UNIT CALL ALERT").build());} else {logAlternateVendorMessage(tdulc);}break;case UNIT_TO_UNIT_VOICE_CHANNEL_USER:if (tdulc instanceof module.decode.p25.message.tdu.lc.UnitToUnitVoiceChannelUser) {module.decode.p25.message.tdu.lc.UnitToUnitVoiceChannelUser uuvcu=(module.decode.p25.message.tdu.lc.UnitToUnitVoiceChannelUser)tdulc;String from=uuvcu.getSourceAddress();updateFrom(from);String to=uuvcu.getTargetAddress();updateTo(to);if (mCurrentCallEvent != null) {mCurrentCallEvent=new P25CallEvent.Builder(CallEventType.UNIT_TO_UNIT_CALL).aliasList(getAliasList()).channel(mCurrentChannel).details((uuvcu.isEncrypted() ? "ENCRYPTED " : "") + (uuvcu.isEmergency() ? "EMERGENCY " : "")).frequency(mCurrentChannelFrequency).from(from).to(to).build();}}break;default :break;}}  }
class C{  private Record(final Seed mySeed,final String category,final Map<String,String> attributes){  if (category.length() > NewsDB.categoryStringLength)   throw new IllegalArgumentException("category length (" + category.length() + ") exceeds maximum ("+ NewsDB.categoryStringLength+ ")");  if (attributes.toString().length() > NewsDB.this.attributesMaxLength)   throw new IllegalArgumentException("attributes length (" + attributes.toString().length() + ") exceeds maximum ("+ NewsDB.this.attributesMaxLength+ ")");  this.attributes=attributes;  this.received=null;  if (attributes.containsKey("#")) {    int cnt=Integer.parseInt(attributes.get("#"));    this.created=new Date(System.currentTimeMillis() + (cnt * 1000));  } else {    this.created=new Date();  }  this.category=category;  this.distributed=0;  this.originator=mySeed.hash;  removeStandards();}  }
class C{  private void findSeparator(){  pos=MultipartStream.this.findSeparator();  if (pos == -1) {    if (tail - head > keepRegion) {      pad=keepRegion;    } else {      pad=tail - head;    }  }}  }
class C{  protected HttpGDataRequest(RequestType type,URL requestUrl,ContentType inputType,HttpAuthToken authToken,Map<String,String> headerMap,Map<String,String> privateHeaderMap,HttpUrlConnectionSource connectionSource) throws IOException {  this.connectionSource=connectionSource;  this.type=type;  this.inputType=inputType;  this.requestUrl=requestUrl;  this.httpConn=getRequestConnection(requestUrl);  this.authToken=authToken;switch (type) {case QUERY:    hasOutput=true;  break;case INSERT:case BATCH:expectsInput=true;hasOutput=true;setMethod("POST");setHeader("Content-Type",inputType.toString());break;case UPDATE:expectsInput=true;hasOutput=true;if (Boolean.getBoolean(METHOD_OVERRIDE_PROPERTY)) {setMethod("POST");setHeader(Header.METHOD_OVERRIDE,"PUT");} else {setMethod("PUT");}setHeader("Content-Type",inputType.toString());break;case PATCH:expectsInput=true;hasOutput=true;setMethod("POST");setHeader(Header.METHOD_OVERRIDE,"PATCH");setHeader("Content-Type",inputType.toString());break;case DELETE:if (Boolean.getBoolean(METHOD_OVERRIDE_PROPERTY)) {setMethod("POST");setHeader(Header.METHOD_OVERRIDE,"DELETE");} else {setMethod("DELETE");}setHeader("Content-Length","0");break;default :throw new UnsupportedOperationException("Unknown request type:" + type);}if (authToken != null) {String authHeader=authToken.getAuthorizationHeader(requestUrl,httpConn.getRequestMethod());setPrivateHeader("Authorization",authHeader);}if (headerMap != null) {for (Map.Entry<String,String> e : headerMap.entrySet()) {setHeader(e.getKey(),e.getValue());}}if (privateHeaderMap != null) {for (Map.Entry<String,String> e : privateHeaderMap.entrySet()) {setPrivateHeader(e.getKey(),e.getValue());}}setHeader("Accept-Encoding","gzip");httpConn.setDoOutput(expectsInput);}  }
class C{  private void initialize(View mainView){  this.mainView=mainView;}  }
class C{  public boolean isOnPieChart(Point screenPoint){  double sqValue=(MathUtil.pow(mCenterX - screenPoint.getX(),2) + MathUtil.pow(mCenterY - screenPoint.getY(),2));  double radiusSquared=mPieChartRadius * mPieChartRadius;  boolean isOnPieChart=sqValue <= radiusSquared;  return isOnPieChart;}  }
class C{  public static double random(){  if (r == null)   r=new Random();  return r.nextDouble();}  }
class C{  public static OnDeleteClause create(String windowName,String optionalAsName){  return new OnDeleteClause(windowName,optionalAsName);}  }
class C{  public boolean isIgnoredEmpty(){  return ignored.isEmpty();}  }
class C{  public static void readSocket(ThreadPoolExecutor executor,final DatagramSocket socket,Consumer<DatagramPacket> consumer){  String localSocketAddress=socket.getLocalSocketAddress().toString();  logger.debug("Reading socket {}",localSocketAddress);  executor.execute(null);}  }
class C{  public CStatusPanel(final BackEndDebuggerProvider debuggerProvider){  super(new BorderLayout());  Preconditions.checkNotNull(debuggerProvider,"IE1094: Debugger provider argument can not be null");  m_label.setForeground(Color.BLACK);  add(m_label);  m_synchronizer=new CStatusLabelSynchronizer(m_label,debuggerProvider);}  }
class C{  public static String toCommaList(Iterator stringIter){  return toSepList(stringIter,", ");}  }
class C{  public SingularMatrixException(String str){  super(str);}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  int frameIndex=startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  public boolean verifySignature(byte[] signature){  if (forSigning) {    throw new IllegalStateException("RSADigestSigner not initialised for verification");  }  byte[] hash=new byte[digest.getDigestSize()];  digest.doFinal(hash,0);  byte[] sig;  byte[] expected;  try {    sig=rsaEngine.processBlock(signature,0,signature.length);    expected=derEncode(hash);  } catch (  Exception e) {    return false;  }  if (sig.length == expected.length) {    return Arrays.constantTimeAreEqual(sig,expected);  } else   if (sig.length == expected.length - 2) {    int sigOffset=sig.length - hash.length - 2;    int expectedOffset=expected.length - hash.length - 2;    expected[1]-=2;    expected[3]-=2;    int nonEqual=0;    for (int i=0; i < hash.length; i++) {      nonEqual|=(sig[sigOffset + i] ^ expected[expectedOffset + i]);    }    for (int i=0; i < sigOffset; i++) {      nonEqual|=(sig[i] ^ expected[i]);    }    return nonEqual == 0;  } else {    return false;  }}  }
class C{  public boolean isInherited(){  return inherited;}  }
class C{  @Override public boolean finishScan(){  return false;}  }
class C{  public T caseExitEvent(ExitEvent object){  return null;}  }
class C{  public PriceTierView(final String id,final Collection<ProductPriceModel> rawPrices){  super(id);  skuPrices=new ArrayList<ProductPriceModel>(rawPrices);}  }
class C{  public V1 addAction(Action action){  N.addAction(action);  return this;}  }
class C{  public void save(SharedPreferences.Editor editor){  List<Song> copy=new ArrayList<>(this);  JSONArray array=new JSONArray();  for (  Song song : copy) {    if (song == null)     continue;    JSONObject object=new JSONObject();    try {      object.put("r",song.getRef());      object.put("p",song.getProvider().serialize());    } catch (    NullPointerException|JSONException e) {      Log.e(TAG,"Cannot save playback queue entry",e);    }    array.put(object);  }  editor.putString(KEY_SONGS,array.toString());  editor.apply();}  }
class C{  private int[][] allPairsShortestPath(){  int[][] I1=new int[getComponentNodes().size()][getComponentNodes().size()];  int[][] I2=new int[getComponentNodes().size()][getComponentNodes().size()];  int infinity=getComponentNodes().size() * getComponentNodes().size();  for (int i=0; i < getComponentNodes().size(); i++) {    for (int j=0; j < getComponentNodes().size(); j++) {      Node node1=getComponentNodes().get(i);      Node node2=getComponentNodes().get(j);      if (graph.getEdge(node1,node2) != null) {        I2[i][j]=1;      } else {        I2[i][j]=infinity;      }    }  }  for (int k=0; k < getComponentNodes().size(); k++) {    int[][] temp=I1;    I1=I2;    I2=temp;    for (int i=0; i < getComponentNodes().size(); i++) {      for (int j=0; j < getComponentNodes().size(); j++) {        I2[i][j]=Math.min(I1[i][j],I1[i][k] + I1[k][j]);      }    }  }  return I2;}  }
class C{  public ScReplayProfile createConsistencyGroup(String ssn,String name) throws StorageCenterAPIException {  LOG.debug("Creating consistency group '{}'",name);  String errorMessage="";  Parameters params=new Parameters();  params.add("Name",name);  params.add("Notes",NOTES_STRING);  params.add("Type","Consistent");  params.add("StorageCenter",ssn);  try {    RestResult result=restClient.post("StorageCenter/ScReplayProfile",params.toJson());    if (checkResults(result)) {      return gson.fromJson(result.getResult(),ScReplayProfile.class);    }    errorMessage=String.format("Unable to create CG %s on SC %s: %s",name,ssn,result.getErrorMsg());  } catch (  Exception e) {    errorMessage=String.format("Error creating consistency group: %s",e);    LOG.warn(errorMessage);  }  if (errorMessage.length() == 0) {    errorMessage=String.format("Unable to create CG %s on SC %s",name,ssn);  }  throw new StorageCenterAPIException(errorMessage);}  }
class C{  protected void onCreate(Bundle icicle){  super.onCreate(icicle);  mUsageStatsService=IUsageStats.Stub.asInterface(ServiceManager.getService("usagestats"));  if (mUsageStatsService == null) {    Log.e(TAG,"Failed to retrieve usagestats service");    return;  }  mInflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);  mPm=getPackageManager();  setContentView(R.layout.usage_stats);  mTypeSpinner=(Spinner)findViewById(R.id.typeSpinner);  mTypeSpinner.setOnItemSelectedListener(this);  mListView=(ListView)findViewById(R.id.pkg_list);  mAdapter=new UsageStatsAdapter();  mListView.setAdapter(mAdapter);}  }
class C{  public void testConstructorSignBytesNegative6(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,23,-101};  int aSign=-1;  byte rBytes[]={-13,-57,-101,1,75,-90,-46,-92,-4,14,-24,101};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  protected AbstractReferenceMap(int keyType,int valueType,int capacity,float loadFactor,boolean purgeValues){  super(capacity,loadFactor);  verify("keyType",keyType);  verify("valueType",valueType);  this.keyType=keyType;  this.valueType=valueType;  this.purgeValues=purgeValues;}  }
class C{  public boolean isCellEditable(int row,int col){  return !(col < getBayesIm().getNumParents(getNodeIndex()));}  }
class C{  @Override public String toString(){  final StringBuilder builder=new StringBuilder();  builder.append("[Argument '");  builder.append(forms.get(0));  builder.append("'");  if (paramNames.length > 0) {    for (int i=0; i < paramNames.length; i++) {      builder.append(" <");      builder.append(paramNames[i]);      builder.append(">");    }  }  builder.append("]");  return builder.toString();}  }
class C{  public static String appendParameter(String classname,String desc){  int i=desc.indexOf(')');  if (i < 0)   return desc; else {    StringBuffer newdesc=new StringBuffer();    newdesc.append(desc.substring(0,i));    newdesc.append('L');    newdesc.append(classname.replace('.','/'));    newdesc.append(';');    newdesc.append(desc.substring(i));    return newdesc.toString();  }}  }
class C{  private CCriteriumFunctions(){}  }
class C{  public head removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  private void selectView(boolean advanced){  if (this.advanced != advanced) {    Control insertAfter=null;    if (null != rulesView) {      for (      Control child : parent.getChildren()) {        if (child == rulesView.getControl()) {          break;        }        insertAfter=child;      }      managedForm.removePart(rulesView);      rulesView.dispose();    }    createPart(advanced);    if (null != insertAfter) {      rulesView.getControl().moveBelow(insertAfter);    } else {      rulesView.getControl().moveAbove(null);    }    managedForm.getForm().layout(true,true);    this.advanced=advanced;  }}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public boolean isAllowPublish(){  Object oo=get_Value(COLUMNNAME_IsAllowPublish);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void unregister(SPINThreadFunctions old){  if (old != null) {    localFunctions.set(old);  } else {    localFunctions.remove();  }}  }
class C{  private double psfunc2(double x,double t1,int dim,int css){  dim=dim + 1;  double xy=2 * (x - 0.5);  if (lType == 21) {    return xy - Math.pow(t1,0.5 * (numberOfVariables + 3 * dim - 8) / (numberOfVariables - 2));  } else   if (lType == 22) {    double theta=6 * Math.PI * t1 + dim * Math.PI / numberOfVariables;    return xy - Math.sin(theta);  } else   if (lType == 23) {    double theta=6 * Math.PI * t1 + dim * Math.PI / numberOfVariables;    double ra=0.8 * t1;    if (css == 1) {      return xy - ra * Math.cos(theta);    } else {      return xy - ra * Math.sin(theta);    }  } else   if (lType == 24) {    double theta=6 * Math.PI * t1 + dim * Math.PI / numberOfVariables;    double ra=0.8 * t1;    if (css == 1) {      return xy - ra * Math.cos(theta / 3);    } else {      return xy - ra * Math.sin(theta);    }  } else   if (lType == 25) {    double rho=0.8;    double phi=Math.PI * t1;    double theta=6 * Math.PI * t1 + dim * Math.PI / numberOfVariables;    if (css == 1) {      return xy - rho * Math.sin(phi) * Math.sin(theta);    } else     if (css == 2) {      return xy - rho * Math.sin(phi) * Math.cos(theta);    } else {      return xy - rho * Math.cos(phi);    }  } else   if (lType == 26) {    double theta=6 * Math.PI * t1 + dim * Math.PI / numberOfVariables;    double ra=0.3 * t1 * (t1 * Math.cos(4 * theta) + 2);    if (css == 1) {      return xy - ra * Math.cos(theta);    } else {      return xy - ra * Math.sin(theta);    }  } else {    throw new IllegalStateException();  }}  }
class C{  public boolean contains(GroupCategory category){  return fContent.contains(category);}  }
class C{  private String findUserDN(LdapContext ctx) throws LoginException {  String userDN="";  if (userFilter != null) {    if (debug) {      System.out.println("\t\t[LdapLoginModule] " + "searching for entry belonging to user: " + username);    }  } else {    if (debug) {      System.out.println("\t\t[LdapLoginModule] " + "cannot search for entry belonging to user: " + username);    }    throw (LoginException)new FailedLoginException("Cannot find user's LDAP entry");  }  try {    NamingEnumeration<SearchResult> results=ctx.search("",replaceUsernameToken(filterMatcher,userFilter),constraints);    if (results.hasMore()) {      SearchResult entry=results.next();      userDN=((Context)entry.getObject()).getNameInNamespace();      if (debug) {        System.out.println("\t\t[LdapLoginModule] found entry: " + userDN);      }      if (authzIdentityAttr != null) {        Attribute attr=entry.getAttributes().get(authzIdentityAttr);        if (attr != null) {          Object val=attr.get();          if (val instanceof String) {            authzIdentity=(String)val;          }        }      }      results.close();    } else {      if (debug) {        System.out.println("\t\t[LdapLoginModule] user's entry " + "not found");      }    }  } catch (  NamingException e) {  }  if (userDN.equals("")) {    throw (LoginException)new FailedLoginException("Cannot find user's LDAP entry");  } else {    return userDN;  }}  }
class C{  public DetectorResult detect() throws NotFoundException {  return detect(null);}  }
class C{  public ConnectTimeoutException(final String message,final Throwable cause){  super(message);  ExceptionUtil.initCause(this,cause);}  }
class C{  public void show(final Class<?> controller){  show(controllers.get(controller));}  }
class C{  public static JSONObject lengthValueRead(InputStream inputStream){  int length=popLength(inputStream);  if (length < 0) {    return null;  } else   if (length > MAX_MESSAGE_SIZE) {    log.error("Remote party asked us to read " + length + " bytes in a length/value read");    return null;  }  byte[] messageBytes=new byte[length];  JSONObject recoveredMessage;  int readByteCount=0;  try {    while (readByteCount != length) {      readByteCount+=inputStream.read(messageBytes,readByteCount,length - readByteCount);    }    recoveredMessage=new JSONObject(new String(messageBytes));  } catch (  IOException e) {    log.error("IOException parsing message bytes: ",e);    return null;  }catch (  JSONException e) {    log.error("IOException parsing message bytes: ",e);    return null;  }  return recoveredMessage;}  }
class C{  @SuppressWarnings("unchecked") @SneakyThrows public T invoke(Object instance,Object arg1,Object arg2,Object arg3){  try {    return (T)invoker.invoke(instance,arg1,arg2,arg3);  } catch (  ClassCastException|WrongMethodTypeException e) {    validateArgs(instance,arg1,arg2,arg3);    throw new AssertionError("Unknown error",e);  }}  }
class C{  public boolean hasRow(){  return getRow() != null;}  }
class C{  public static StaticDBIDs makeUnmodifiable(DBIDs existing){  return DBIDFactory.FACTORY.makeUnmodifiable(existing);}  }
class C{  public DiscoveryContainer<T> updateFromNBT(NBTTagCompound nbt,boolean save){  this.discoveredStaticAspects.clear();  NBTTagList discoveryList=nbt.getTagList("discoveries",Constants.NBT.TAG_COMPOUND);  int discoveryEntries=discoveryList.tagCount();  for (int i=0; i < discoveryEntries; i++) {    NBTTagCompound discoveryEntry=discoveryList.getCompoundTagAt(i);    AspectItem item=AspectItem.readFromNBT(discoveryEntry);    List<IAspectType> aspectTypeList=new ArrayList<IAspectType>();    NBTTagList aspectListCompound=discoveryEntry.getTagList("aspects",Constants.NBT.TAG_COMPOUND);    for (int c=0; c < aspectListCompound.tagCount(); c++) {      NBTTagCompound aspectTypeCompound=aspectListCompound.getCompoundTagAt(c);      aspectTypeList.add(IAspectType.readFromNBT(aspectTypeCompound));    }    this.discoveredStaticAspects.put(item,aspectTypeList);  }  if (save)   this.saveContainer();  return this;}  }
class C{  public static ByteBuffer encode(Tlv[] tlvs){  int size=0;  LOG.trace("start");  for (  Tlv tlv : tlvs) {    int length=tlvEncodedLength(tlv);    size+=tlvEncodedSize(tlv,length);    LOG.trace("tlv size : {}",size);  }  LOG.trace("done, size : {}",size);  ByteBuffer b=ByteBuffer.allocate(size);  b.order(ByteOrder.BIG_ENDIAN);  for (  Tlv tlv : tlvs) {    encode(tlv,b);  }  b.flip();  return b;}  }
class C{  public ContactsAdapter(Context context){  super(context,null,0);  this.context=context;  mInflater=LayoutInflater.from(context);  final String alphabet=context.getString(R.string.alphabet);  mAlphabetIndexer=new AlphabetIndexer(null,1,alphabet);  highlightTextSpan=new TextAppearanceSpan(getActivity(),R.style.searchTextHiglight);}  }
class C{  public int dump(InputStream input,PrintStream out,PrintStream err,String[] args){  try {    return doDump(input,out,err,args);  } catch (  ParseException e) {    err.println(e.getMessage());    dumpUsage(err);    return 1;  }catch (  DumpException e) {    err.println(e.getMessage());    return 1;  }catch (  DumpappOutputBrokenException e) {    throw e;  }catch (  RuntimeException e) {    e.printStackTrace(err);    return 1;  }}  }
class C{  public static int stringWidth(JComponent c,FontMetrics fm,String string){  return (Integer)invokeSwingUtilities2StaticMethod("stringWidth",new Class[]{JComponent.class,FontMetrics.class,String.class},new Object[]{c,fm,string});}  }
class C{  private void cmdGroups(CommandSender sender,String[] args){  if (isNotPermissed(sender,"nametagedit.groups"))   return;  if (args.length < 2) {    sendUsageGroup(sender);  } else {    if (args[1].equalsIgnoreCase("list")) {      sender.sendMessage(Utils.format("&f&lLoaded Groups"));      for (      GroupData groupData : handler.getGroupData()) {        sender.sendMessage(Utils.format("&6Group: &f" + groupData.getGroupName() + " &6Permission: &f"+ groupData.getPermission()+ " &6Formatted: "+ groupData.getPrefix()+ sender.getName()+ groupData.getSuffix()));      }    } else     if (args[1].equalsIgnoreCase("order")) {      if (args.length <= 2) {        sendUsageGroup(sender);        return;      }      handler.getAbstractConfig().orderGroups(sender,args);    } else     if (args[1].equalsIgnoreCase("remove")) {      if (args.length == 3) {        String group=args[2];        GroupData toDelete=null;        for (        GroupData groupData : handler.getGroupData()) {          if (groupData.getGroupName().equalsIgnoreCase(group)) {            toDelete=groupData;            break;          }        }        if (toDelete != null) {          handler.deleteGroup(toDelete);          NametagMessages.GROUP_REMOVED.send(sender,group);        }      }    } else     if (args[1].equalsIgnoreCase("add")) {      if (args.length == 3) {        String group=args[2];        for (        GroupData groupData : handler.getGroupData()) {          if (groupData.getGroupName().equalsIgnoreCase(group)) {            NametagMessages.GROUP_EXISTS.send(sender,group);            return;          }        }        handler.addGroup(new GroupData(group,"","","",new Permission("my.perm",PermissionDefault.FALSE),-1));        NametagMessages.CREATED_GROUP.send(sender,group);      }    } else {      if (args.length >= 4) {        String group=args[1];        GroupData groupData=null;        for (        GroupData groups : handler.getGroupData()) {          if (groups.getGroupName().equalsIgnoreCase(group)) {            groupData=groups;            break;          }        }        if (groupData == null) {          NametagMessages.GROUP_EXISTS_NOT.send(sender,group);          return;        }        if (args[2].equalsIgnoreCase("permission")) {          groupData.setPermission(args[3]);          handler.save(groupData);          NametagMessages.GROUP_VALUE.send(sender,group,"permission",args[3]);        } else         if (args[2].equalsIgnoreCase("prefix")) {          String value=Utils.format(args,3,args.length).replace("\"","");          groupData.setPrefix(Utils.format(value));          handler.applyTags();          handler.save(groupData);          NametagMessages.GROUP_VALUE.send(sender,group,"prefix",Utils.format(value));        } else         if (args[2].equalsIgnoreCase("suffix")) {          String value=Utils.format(args,3,args.length).replace("\"","");          groupData.setSuffix(Utils.format(value));          handler.applyTags();          handler.save(groupData);          NametagMessages.GROUP_VALUE.send(sender,group,"suffix",Utils.format(value));        } else         if (args[2].equalsIgnoreCase("clear")) {          boolean prefix=args[3].equalsIgnoreCase("prefix");          if (prefix) {            groupData.setPrefix("&f");          } else {            groupData.setSuffix("&f");          }          handler.applyTags();          handler.save(groupData);          NametagMessages.GROUP_VALUE_CLEARED.send(sender,prefix ? "prefix" : "suffix",group);        } else         if (args[2].equalsIgnoreCase("priority")) {          setupPriority(sender,false,group,args[3]);        }      } else {        sendUsageGroup(sender);      }    }  }}  }
class C{  boolean isEmpty(){  return myStack.isEmpty();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebDoc doc=null;  HttpSession sess=request.getSession();  WebSessionCtx wsc=WebSessionCtx.get(request);  if (wsc == null) {    WebUtil.createTimeoutPage(request,response,this,null);    return;  }  int AD_Window_ID=WebUtil.getParameterAsInt(request,"AD_Window_ID");  int AD_Menu_ID=WebUtil.getParameterAsInt(request,"AD_Menu_ID");  log.info("AD_Window_ID=" + AD_Window_ID + "; AD_Menu_ID="+ AD_Menu_ID);  String TableName=null;  int AD_Record_ID=WebUtil.getParameterAsInt(request,"AD_Record_ID");  int AD_Table_ID=WebUtil.getParameterAsInt(request,"AD_Table_ID");  if (AD_Record_ID != 0 || AD_Table_ID != 0) {    AD_Window_ID=0;    int PO_Window_ID=0;    String sql="SELECT TableName, AD_Window_ID, PO_Window_ID FROM AD_Table WHERE AD_Table_ID=?";    try {      PreparedStatement pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,AD_Table_ID);      ResultSet rs=pstmt.executeQuery();      if (rs.next()) {        TableName=rs.getString(1);        AD_Window_ID=rs.getInt(2);        PO_Window_ID=rs.getInt(3);      }      rs.close();      pstmt.close();    } catch (    SQLException e) {      log.log(Level.SEVERE,sql,e);    }    if (TableName == null || AD_Window_ID == 0) {      doc=WebDoc.createPopup("No Context");      doc.addPopupClose(wsc.ctx);    }    boolean isSOTrx=true;    if (PO_Window_ID != 0) {      String whereClause=TableName + "_ID=" + AD_Record_ID;      isSOTrx=DB.isSOTrx(TableName,whereClause);      if (!isSOTrx)       AD_Window_ID=PO_Window_ID;    }  }  WWindowStatus ws=WWindowStatus.get(request);  if (ws != null) {    int WindowNo=ws.mWindow.getWindowNo();    log.fine("Disposing - WindowNo=" + WindowNo + ", ID="+ ws.mWindow.getAD_Window_ID());    ws.mWindow.dispose();    Env.clearWinContext(wsc.ctx,WindowNo);  }  GridWindowVO mWindowVO=GridWindowVO.create(wsc.ctx,s_WindowNo++,AD_Window_ID,AD_Menu_ID);  if (mWindowVO == null) {    String msg=Msg.translate(wsc.ctx,"AD_Window_ID") + " " + Msg.getMsg(wsc.ctx,"NotFound")+ ", ID="+ AD_Window_ID+ "/"+ AD_Menu_ID;    WebUtil.createErrorPage(request,response,this,msg);    sess.setAttribute(WWindowStatus.NAME,null);    return;  }  ws=new WWindowStatus(mWindowVO);  sess.setAttribute(WWindowStatus.NAME,ws);  if (AD_Record_ID != 0 || AD_Table_ID != 0) {    ws.mWindow.initTab(ws.curTab.getTabNo());    ws.curTab.setQuery(MQuery.getEqualQuery(TableName + "_ID",AD_Record_ID));    ws.curTab.query(false);  } else {    ws.mWindow.initTab(ws.curTab.getTabNo());    ws.curTab.query(ws.mWindow.isTransaction());    ws.curTab.navigate(0);  }  if (ws.curTab.isSingleRow())   doc=getSR_Form(request.getRequestURI(),wsc,ws); else   doc=getMR_Form(request.getRequestURI(),wsc,ws);  log.fine("Fini");  WebUtil.createResponse(request,response,this,null,doc,false);  log.fine("Closed");}  }
class C{  public void addRange(final int min,final int max,final int shift){  final BytesRefBuilder minBytes=new BytesRefBuilder(), maxBytes=new BytesRefBuilder();  intToPrefixCoded(min,shift,minBytes);  intToPrefixCoded(max,shift,maxBytes);  addRange(minBytes.get(),maxBytes.get());}  }
class C{  @DSComment("normal android callback") @DSSafe(DSCat.ANDROID_CALLBACK) @DSVerified @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:40.799 -0500",hash_original_method="BF490B4BB4BD29ACC689E0297B614061",hash_generated_method="A5ED3456A9BC8D0D960D02BCCB1B3136") protected void onListItemClick(ListView l,View v,int position,long id){}  }
class C{  public void unsubscribe(String topic,boolean existing) throws Exception {  logToFile("unsubscribe [topic:" + topic + "][existing:"+ existing+ "]");  client.unsubscribe(topic);  Object o=subscribedTopics.remove(topic);  if (existing == (o == null)) {    throw new Exception("Subscription state mismatch [topic:" + topic + "][expected:"+ existing+ "]");  }}  }
class C{  public String uploadIdMarker(){  return uploadIdMarker;}  }
class C{  public void loadMarkdown(String txt){  loadMarkdown(txt,null);}  }
class C{  public MultiplexingDatagramSocket(int port,InetAddress laddr) throws SocketException {  super(port,laddr);}  }
class C{  public static <T extends Comparable<? super T>>void introSort(T[] a){  introSort(a,0,a.length);}  }
class C{  public PubsubFuture<SubscriptionList> listSubscriptions(final String project,final String pageToken){  final String query=(pageToken == null) ? "" : "?pageToken=" + pageToken;  final String path="projects/" + project + "/subscriptions"+ query;  return get("list subscriptions",path,SubscriptionList.class);}  }
class C{  @Override public boolean isEmpty(){  return this.nodes.isEmpty();}  }
class C{  void requestPermissionsToSystem(Collection<String> permissions){  androidPermissionService.requestPermissions(activity,permissions.toArray(new String[permissions.size()]),PERMISSIONS_REQUEST_CODE);}  }
class C{  public int toFlagValue(){  return this.flagValue;}  }
class C{  public static int compareTo(Character left,Number right){  return compareTo(Integer.valueOf(left),right);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public RectF fill(Path s){  return state.fillPaint.fill(this,g,s);}  }
class C{  public AreaFilter(){  this.features=GeometryUtils.getSimplifiedGeometries(ShapeFileReader.getAllFeatures(MUNICH_SHAPE_FILE));  Logger.getLogger(AreaFilter.class).info("Reading Munich city area shape file...");}  }
class C{  public void LayoutBackgroundColor() throws InterruptedException {  dismissTheAlertDialogBox();  onView(withId(R.id.vMiddle)).check(matches(withLayoutBackgroundColor()));}  }
class C{  public TransactionInput(NetworkParameters params,Transaction parentTransaction,byte[] scriptBytes){  super(params);  this.scriptBytes=scriptBytes;  this.outpoint=new TransactionOutPoint(params,NO_SEQUENCE,(Transaction)null);  this.sequence=NO_SEQUENCE;  this.parentTransaction=parentTransaction;  length=40 + (scriptBytes == null ? 1 : VarInt.sizeOf(scriptBytes.length) + scriptBytes.length);}  }
class C{  public boolean isLocked(){  return !queue.isEmpty();}  }
class C{  public MaximizeAction(){  super(MAXIMIZE_CMD);}  }
class C{  public static boolean[] insert(boolean[] dest,boolean src,int offset){  boolean[] temp=new boolean[dest.length + 1];  System.arraycopy(dest,0,temp,0,offset);  temp[offset]=src;  System.arraycopy(dest,offset,temp,offset + 1,dest.length - offset);  return temp;}  }
class C{  public void updateUI(){  if (isAcceptAllFileFilterUsed()) {    removeChoosableFileFilter(getAcceptAllFileFilter());  }  FileChooserUI ui=((FileChooserUI)UIManager.getUI(this));  if (fileSystemView == null) {    setFileSystemView(FileSystemView.getFileSystemView());  }  setUI(ui);  if (isAcceptAllFileFilterUsed()) {    addChoosableFileFilter(getAcceptAllFileFilter());  }}  }
class C{  private Model create(Expression path) throws Exception {  Model model=root;  while (model != null) {    String prefix=path.getPrefix();    String name=path.getFirst();    int index=path.getIndex();    if (name != null) {      model=model.register(name,prefix,index);    }    if (!path.isPath()) {      break;    }    path=path.getPath(1);  }  return model;}  }
class C{  public List<IComment> appendComment(final String comment) throws CouldntSaveDataException, com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException {  final List<IComment> comments=new ArrayList<IComment>();  try {    comments.addAll(m_node.appendLocalFunctionComment(comment));  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException exception) {    throw new CouldntSaveDataException(exception);  }catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntLoadDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException(exception);  }  for (  final IFunctionNodeListener listener : m_listeners) {    try {      listener.appendedComment(this,Iterables.getLast(comments));    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  return comments;}  }
class C{  public boolean isNetSearch(){  return (this.opDetails & OP_DETAILS_SEARCH) != 0;}  }
class C{  void incNumEntriesInVM(long delta){  this.numEntriesInVM.addAndGet(delta);}  }
class C{  public Device(Device device,Entity newEntity,int insertionpoint){  this.deviceManager=device.deviceManager;  this.deviceKey=device.deviceKey;  this.dhcpClientName=device.dhcpClientName;  this.entities=new Entity[device.entities.length + 1];  if (insertionpoint < 0) {    insertionpoint=-(Arrays.binarySearch(device.entities,newEntity) + 1);  }  if (insertionpoint > 0) {    System.arraycopy(device.entities,0,this.entities,0,insertionpoint);  }  if (insertionpoint < device.entities.length) {    System.arraycopy(device.entities,insertionpoint,this.entities,insertionpoint + 1,device.entities.length - insertionpoint);  }  this.entities[insertionpoint]=newEntity;  this.oldAPs=null;  if (device.oldAPs != null) {    this.oldAPs=new ArrayList<AttachmentPoint>(device.oldAPs);  }  this.attachmentPoints=null;  if (device.attachmentPoints != null) {    this.attachmentPoints=new ArrayList<AttachmentPoint>(device.attachmentPoints);  }  this.macAddressString=HexString.toHexString(this.entities[0].getMacAddress(),6);  this.entityClass=device.entityClass;  vlanIds=computeVlandIds();}  }
class C{  @Override public Integer put(V key,Integer value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  public DrawerBuilder withCustomView(@NonNull View customView){  this.mCustomView=customView;  return this;}  }
class C{  private void buildViewForMeasuring(){  if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  } else {    createItemsLayout();  }  int addItems=visibleItems / 2;  for (int i=currentItem + addItems; i >= currentItem - addItems; i--) {    if (addViewItem(i,true)) {      firstItem=i;    }  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (outputDataSet == null) {    throw new NullPointerException();  }}  }
class C{  public static File toFile(File parent,String path){  return new File(parent,path.replace(FILE_ANTI_SEPERATOR,FILE_SEPERATOR));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.028 -0500",hash_original_method="BFFDD95C5B679D515FF25E2212141F07",hash_generated_method="C67F3541CC446D5DC469E29F4DBE2A21") private int nativeRecordContent(Region invalRegion,Point wh){  addTaint(invalRegion.getTaint());  addTaint(wh.getTaint());  return getTaintInt();}  }
class C{  static <V,A>void invokeDirect(GroupAndInvokeCount myGroupAndInvokeCount,CompletionHandler<V,? super A> handler,A attachment,V result,Throwable exc){  myGroupAndInvokeCount.incrementInvokeCount();  Invoker.invokeUnchecked(handler,attachment,result,exc);}  }
class C{  public static boolean isDistributionTable(final Component source){  return UIComponentIdProvider.DIST_TABLE_ID.equalsIgnoreCase(source.getId());}  }
class C{  public static Paint newSurroundingAreaOverlayPaint(){  final Paint paint=new Paint();  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  paint.setAntiAlias(true);  return paint;}  }
class C{  @Override public boolean addAll(int index,@NotNull Collection<? extends E> c){  Object[] cs=c.toArray();  if (cs.length == 0) {    return false;  }  while (true) {    Object[] elements=array;    Object[] newElements=createArrayAddAll(elements,index,cs);    if (replaceArray(elements,newElements))     break;  }  return true;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.CONDITIONAL_EXPRESSION__CONDITION:    return condition != null;case ExpressionsPackage.CONDITIONAL_EXPRESSION__TRUE_CASE:  return trueCase != null;case ExpressionsPackage.CONDITIONAL_EXPRESSION__FALSE_CASE:return falseCase != null;}return super.eIsSet(featureID);}  }
class C{  @Override public long length() throws SQLException {  try {    debugCodeCall("length");    checkClosed();    if (value.getType() == Value.BLOB) {      long precision=value.getPrecision();      if (precision > 0) {        return precision;      }    }    return IOUtils.copyAndCloseInput(value.getInputStream(),null);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static boolean isSnowLeopard(){  return isMac() && getOsVersion().startsWith("10.6");}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in[in.length - 1] & 0xff;  if (count > in.length) {    throw new InvalidCipherTextException("pad block corrupted");  }  return count;}  }
class C{  public static Type computeSyncReturnType(AST ast,MethodDeclaration asyncMethod,ImportRewrite imports){  Type returnType=ast.newPrimitiveType(PrimitiveType.VOID);  @SuppressWarnings("unchecked") List<SingleVariableDeclaration> asyncParameters=asyncMethod.parameters();  if (asyncParameters.isEmpty()) {    return returnType;  }  Type callbackType=asyncParameters.get(asyncParameters.size() - 1).getType();  if (callbackType.isParameterizedType()) {    ParameterizedType callbackParamType=(ParameterizedType)callbackType;    ITypeBinding callbackBinding=callbackParamType.getType().resolveBinding();    if (callbackBinding == null) {      return returnType;    }    String callbackBaseTypeName=callbackBinding.getErasure().getQualifiedName();    if (callbackBaseTypeName.equals(RemoteServiceUtilities.ASYNCCALLBACK_QUALIFIED_NAME)) {      @SuppressWarnings("unchecked") List<Type> callbackTypeArgs=callbackParamType.typeArguments();      if (callbackTypeArgs.size() == 1) {        Type callbackTypeParameter=callbackTypeArgs.get(0);        String qualifiedName=callbackTypeParameter.resolveBinding().getQualifiedName();        String primitiveTypeName=JavaASTUtils.getPrimitiveTypeName(qualifiedName);        if (primitiveTypeName != null) {          return ast.newPrimitiveType(PrimitiveType.toCode(primitiveTypeName));        }        returnType=JavaASTUtils.normalizeTypeAndAddImport(ast,callbackTypeParameter,imports);      }    }  }  return returnType;}  }
class C{  public static List<String> readResource(Class<?> clazz,String fn) throws IOException {  try (final Reader reader=asReaderUTF8Lenient(getResourceAsStream(clazz,fn))){    return readToList(reader);  } }  }
class C{  protected void includeBasis(int selectedBasis){  basisSet.add(Integer.valueOf(selectedBasis));  reestimateAlpha(selectedBasis);}  }
class C{  public Object readReply(Class expectedClass) throws Exception {  if (startReply()) {    Object value=readObject(expectedClass);    completeReply();    return value;  } else {    Hashtable fault=readFault();    Object detail=fault.get("detail");    if (detail instanceof Exception)     throw (Exception)detail; else {      String code=(String)fault.get("code");      String message=(String)fault.get("message");      throw new BurlapServiceException(message,code,detail);    }  }}  }
class C{  Object tokenAny(int c){  while (true) {    if (isDelimiter(c)) {      return bclear();    } else {      bpush(c);      c=next();    }  }}  }
class C{  public void line(int Ax,int Ay,final int Bx,final int By,final Long colorLine,final int intensityLine,final Long colorDot,final int intensityDot,final int dotDist,final int dotPos,final int dotRadius,final boolean dotFilled){  int dX=Math.abs(Bx - Ax);  int dY=Math.abs(By - Ay);  final int Xincr=(Ax > Bx) ? -1 : 1;  final int Yincr=(Ay > By) ? -1 : 1;  int dotc=0;  if (dX >= dY) {    final int dPr=dY << 1;    final int dPru=dPr - (dX << 1);    int P=dPr - dX;    for (; dX >= 0; dX--) {      if (colorLine != null)       this.setColor(colorLine);      plot(Ax,Ay,intensityLine);      if (dotc == dotPos) {        if (colorDot != null)         this.setColor(colorDot);        if (dotRadius == 0)         this.plot(Ax,Ay,intensityDot); else         if (dotRadius > 0)         dot(Ax,Ay,dotRadius,dotFilled,intensityDot);      }      dotc++;      if (dotc == dotDist)       dotc=0;      if (P > 0) {        Ax+=Xincr;        Ay+=Yincr;        P+=dPru;      } else {        Ax+=Xincr;        P+=dPr;      }    }  } else {    final int dPr=dX << 1;    final int dPru=dPr - (dY << 1);    int P=dPr - dY;    for (; dY >= 0; dY--) {      if (colorLine != null)       this.setColor(colorLine);      plot(Ax,Ay,intensityLine);      if (dotc == dotPos) {        if (colorDot != null)         this.setColor(colorDot);        if (dotRadius == 0)         this.plot(Ax,Ay,intensityDot); else         if (dotRadius > 0)         dot(Ax,Ay,dotRadius,dotFilled,intensityDot);      }      dotc++;      if (dotc == dotDist)       dotc=0;      if (P > 0) {        Ax+=Xincr;        Ay+=Yincr;        P+=dPru;      } else {        Ay+=Yincr;        P+=dPr;      }    }  }}  }
class C{  protected void appendFieldStart(StringBuffer buffer,String fieldName){  if (useFieldNames && fieldName != null) {    buffer.append(fieldName);    buffer.append(fieldNameValueSeparator);  }}  }
class C{  public void addWorker(ScanSegmentWorker ssw,int segment){  workers[segment]=ssw;  exec.submit(ssw);}  }
class C{  public void attributeRemoved(ServletRequestAttributeEvent event){  handleAttributeEvent(event.getName(),event.getValue(),ELUtils.Scope.REQUEST);}  }
class C{  private void addGuestIfNotPresent(List<Provider> providers){  boolean guestFound=false;  for (  Provider provider : providers) {    if (provider.getName().equals(GUEST_FULL_NAME)) {      guestFound=true;      break;    }  }  if (!guestFound) {    SimpleObject guestDetails=new SimpleObject();    guestDetails.put(GIVEN_NAME,GUEST_GIVEN_NAME);    guestDetails.put(FAMILY_NAME,GUEST_FAMILY_NAME);    guestDetails.put(USER_NAME,GUEST_USER_NAME);    guestDetails.put(PASSWORD,GUEST_PASSWORD);synchronized (guestAddLock) {      User guestUser=userService.getUserByUsername(GUEST_USER_NAME);      if (guestUser == null) {        providers.add(createFromSimpleObject(guestDetails));      }    }  }}  }
class C{  @Override public void clear(){  for (int i=0; i < segments.length; ++i)   segments[i].clear();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.524 -0400",hash_original_method="1E761CCD4DDE3C2CB8242721D590B88B",hash_generated_method="2F7B8A982A5FF60A8EC05A3E25C5A5B9") @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (fileFilters != null) {    for (int i=0; i < fileFilters.size(); i++) {      if (i > 0) {        buffer.append(",");      }      Object filter=fileFilters.get(i);      buffer.append(filter == null ? "null" : filter.toString());    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int role=Show.getRoleForString(getString(stack));  Person p=getPerson(stack);  Agent a=(Agent)stack.pop();  int newMask=a.getAgentMask();  if (p != null)   newMask=newMask | Agent.ACTOR_MASK; else   newMask=newMask & (~Agent.ACTOR_MASK);  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Agent noob=Carny.getInstance().updateFavorite(a,newMask,a.getTitle(),a.getCategory(),a.getSubCategory(),p,role,a.getRated(),a.getYear(),a.getPR(),a.getNetwork(),a.getChannelName(),a.getSlotType(),a.getTimeslots(),a.getKeyword());    return (noob == a) ? Boolean.TRUE : Boolean.FALSE;  } else   return Boolean.FALSE;}  }
class C{  public void writeToFileAndParseJSON() throws IOException, AdeException {  fileWriter.write(jsonGroupObject.toString());  fileWriter.flush();  jsonGroupParser.parseJSON(jsonFile);}  }
class C{  public SobolRsg(final int dimensionality){  this(dimensionality,0);}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public RemovalNotAllowedException(String message){  super(message);}  }
class C{  public void assertKeyNotEquals(QueryResultKey key1,QueryResultKey key2){  assertTrue(!key1.equals(key2));  assertTrue(!key2.equals(key1));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.867 -0400",hash_original_method="1762D1065F3B8BFF5FE334F57DD796D3",hash_generated_method="1762D1065F3B8BFF5FE334F57DD796D3") ProcessedData(byte[] data,String accountId,String subscriptionId){  mData=data;  mAccountId=accountId;  mSubscriptionId=subscriptionId;}  }
class C{  public boolean mouseDragged(MouseEvent e){  if (coolMM) {    return getCurrentLayerMapMouseListener().mouseDragged(e);  } else {    return false;  }}  }
class C{  public static String checkAvailability(String productId,BigDecimal quantity,Timestamp reservStart,BigDecimal reservLength,ShoppingCart cart){  Delegator delegator=cart.getDelegator();  List<GenericValue> selFixedAssetProduct=null;  GenericValue fixedAssetProduct=null;  try {    selFixedAssetProduct=EntityQuery.use(delegator).from("FixedAssetProduct").where("productId",productId,"fixedAssetProductTypeId","FAPT_USE").filterByDate(UtilDateTime.nowTimestamp(),"fromDate","thruDate").queryList();  } catch (  GenericEntityException e) {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",productId);    String msg=UtilProperties.getMessage(resource_error,"item.cannot_find_Fixed_Asset",messageMap,cart.getLocale());    return msg;  }  if (UtilValidate.isNotEmpty(selFixedAssetProduct)) {    Iterator<GenericValue> firstOne=selFixedAssetProduct.iterator();    fixedAssetProduct=firstOne.next();  } else {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",productId);    String msg=UtilProperties.getMessage(resource_error,"item.cannot_find_Fixed_Asset",messageMap,cart.getLocale());    return msg;  }  GenericValue fixedAsset=null;  try {    fixedAsset=fixedAssetProduct.getRelatedOne("FixedAsset",false);  } catch (  GenericEntityException e) {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("fixedAssetId",fixedAssetProduct.getString("fixedAssetId"));    String msg=UtilProperties.getMessage(resource_error,"item.fixed_Asset_not_found",messageMap,cart.getLocale());    return msg;  }  if (fixedAsset == null) {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("fixedAssetId",fixedAssetProduct.getString("fixedAssetId"));    String msg=UtilProperties.getMessage(resource_error,"item.fixed_Asset_not_found",messageMap,cart.getLocale());    return msg;  }  GenericValue techDataCalendar=null;  try {    techDataCalendar=fixedAsset.getRelatedOne("TechDataCalendar",false);  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);  }  if (techDataCalendar == null) {    if (fixedAsset.getBigDecimal("productionCapacity").compareTo(quantity) >= 0) {      String msg=UtilProperties.getMessage(resource_error,"item.availableOk",cart.getLocale());      return msg;    } else {      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("quantityReq",quantity,"quantityAvail",fixedAsset.getString("productionCapacity"));      String msg=UtilProperties.getMessage(resource_error,"item.availableQnt",messageMap,cart.getLocale());      return msg;    }  }  long dayCount=0;  String resultMessage="";  while (BigDecimal.valueOf(dayCount).compareTo(reservLength) < 0) {    GenericValue techDataCalendarExcDay=null;    Timestamp exceptionDateStartTime=new Timestamp((reservStart.getTime() + (dayCount++ * 86400000)));    try {      techDataCalendarExcDay=EntityQuery.use(delegator).from("TechDataCalendarExcDay").where("calendarId",fixedAsset.get("calendarId"),"exceptionDateStartTime",exceptionDateStartTime).queryOne();    } catch (    GenericEntityException e) {      Debug.logWarning(e,module);    }    if (techDataCalendarExcDay == null) {      if (fixedAsset.get("productionCapacity") != null && fixedAsset.getBigDecimal("productionCapacity").compareTo(quantity) < 0)       resultMessage=resultMessage.concat(exceptionDateStartTime.toString().substring(0,10) + ", ");    } else {      BigDecimal exceptionCapacity=BigDecimal.ZERO;      if (techDataCalendarExcDay.get("exceptionCapacity") != null)       exceptionCapacity=techDataCalendarExcDay.getBigDecimal("exceptionCapacity");      if (exceptionCapacity.compareTo(BigDecimal.ZERO) == 0 && fixedAsset.get("productionCapacity") != null)       exceptionCapacity=fixedAsset.getBigDecimal("productionCapacity");      if (exceptionCapacity.compareTo(BigDecimal.ZERO) != 0) {        BigDecimal usedCapacity=BigDecimal.ZERO;        if (techDataCalendarExcDay.get("usedCapacity") != null)         usedCapacity=techDataCalendarExcDay.getBigDecimal("usedCapacity");        if (exceptionCapacity.compareTo(quantity.add(usedCapacity)) < 0) {          resultMessage=resultMessage.concat(exceptionDateStartTime.toString().substring(0,10) + ", ");          Debug.logInfo("No rental fixed Asset available: " + exceptionCapacity + " already used: "+ usedCapacity+ " Requested now: "+ quantity,module);        }      }    }  }  if (resultMessage.compareTo("") == 0) {    String msg=UtilProperties.getMessage(resource_error,"item.availableOk",cart.getLocale());    return msg;  } else {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("resultMessage",resultMessage);    String msg=UtilProperties.getMessage(resource_error,"item.notAvailable",messageMap,cart.getLocale());    return msg;  }}  }
class C{  protected static void println(String msg){  System.out.println(msg);}  }
class C{  private void cmd_new(){  advancedTable.stopEditor(true);  DefaultTableModel model=(DefaultTableModel)advancedTable.getModel();  int rows=model.getRowCount();  model.addRow(new Object[]{rows == 0 ? "" : "AND","",null,MQuery.OPERATORS[MQuery.EQUAL_INDEX],null,null,""});  advancedTable.requestFocusInWindow();}  }
class C{  public WeakReference(java.lang.Object ref){}  }
class C{  public RestrictedGuacamoleWebSocketTunnelListener(TunnelRequestService tunnelRequestService){  this.tunnelRequestService=tunnelRequestService;}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  private int quickSelect(int k,int[] nums){  int l=0;  int r=nums.length - 1;  while (l < r) {    int pos=l + (r - l) / 2;    pos=partition(nums,l,r,pos);    if (pos == k) {      return nums[pos];    } else     if (pos < k) {      l=pos + 1;    } else {      r=pos - 1;    }  }  return nums[l];}  }
class C{  private void updateDistributionProperties(){  double f=laplaceCorrectionEnabled ? 1 / totalWeight : Double.MIN_VALUE;  for (int i=0; i < numberOfClasses; i++) {    priors[i]=Math.log(classWeights[i] / totalWeight);  }  for (int i=0; i < numberOfAttributes; i++) {    if (nominal[i]) {      for (int j=0; j < numberOfClasses; j++) {        for (int k=0; k < weightSums[i][j].length; k++) {          distributionProperties[i][j][k]=Math.log((weightSums[i][j][k] + f) / (classWeights[j] + f * weightSums[i][j].length));        }      }    }  }  if (useApplianceGrid) {    for (int i=0; i < numberOfClasses; i++) {      for (int j=0; j < numberOfAttributes; j++) {        if (!nominal[j]) {          double lowerBound=kernelDistributions[j][i].getLowerBound();          double upperBound=kernelDistributions[j][i].getUpperBound();          double precision=(upperBound - lowerBound) / gridSize;          grid[j][i]=new double[gridSize + 1];          for (int k=0; k < gridSize + 1; k++) {            grid[j][i][k]=kernelDistributions[j][i].getProbability(lowerBound + k * precision);          }        }      }    }  }  modelRecentlyUpdated=false;}  }
class C{  public void testSerializationSelf() throws Exception {  TestUtils.initCertPathSSCertChain();  CertPath certPath=TestUtils.buildCertPathSSCertChain();  SerializationTest.verifySelf(certPath);}  }
class C{  public void requestThrottleSetup(LocoAddress address,boolean control){  activeAddress=(DccLocoAddress)address;  log.debug("new Pr2Throttle for " + activeAddress);  notifyThrottleKnown(new Pr2Throttle((LocoNetSystemConnectionMemo)adapterMemo,activeAddress),activeAddress);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  protected ConfigurationParameterImpl(String name,Object value){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException(LocalizedStrings.ConfigurationParameterImpl_CONFIGURATIONPARAMETER_NAME_MUST_BE_SPECIFIED.toLocalizedString());  }  this.name=name;  setInternalState(name,value,value.getClass(),true);}  }
class C{  private BorderFactory(){}  }
class C{  @Nonnull @Override public NodeProvisioner.StrategyDecision apply(@Nonnull NodeProvisioner.StrategyState strategyState){  LOG.debug("Applying provisioning.");  final Label label=strategyState.getLabel();  LoadStatisticsSnapshot snapshot=strategyState.getSnapshot();  for (  DockerCloud dockerCloud : getDockerClouds()) {    for (    DockerSlaveTemplate template : dockerCloud.getTemplates(label)) {      if (notAllowedStrategy(template)) {        continue;      }      int availableCapacity=snapshot.getAvailableExecutors() + snapshot.getConnectingExecutors() + strategyState.getAdditionalPlannedCapacity();      int currentDemand=snapshot.getQueueLength();      LOG.debug("Available capacity={}, currentDemand={}",availableCapacity,currentDemand);      if (availableCapacity < currentDemand) {        Collection<PlannedNode> plannedNodes=dockerCloud.provision(label,currentDemand - availableCapacity);        LOG.debug("Planned {} new nodes",plannedNodes.size());        strategyState.recordPendingLaunches(plannedNodes);        availableCapacity+=plannedNodes.size();        LOG.debug("After '{}' provisioning, available capacity={}, currentDemand={}",dockerCloud,availableCapacity,currentDemand);      }      if (availableCapacity >= currentDemand) {        LOG.debug("Provisioning completed");        return NodeProvisioner.StrategyDecision.PROVISIONING_COMPLETED;      } else {        LOG.debug("Provisioning not complete, trying next template");      }    }    LOG.debug("Provisioning not complete, trying next YAD Cloud");  }  LOG.debug("Provisioning not complete, consulting remaining strategies");  return NodeProvisioner.StrategyDecision.CONSULT_REMAINING_STRATEGIES;}  }
class C{  public boolean isStrechted(){  return strechted;}  }
class C{  protected void finalize() throws Throwable {  this.elementName=null;  this.attributeName=null;  this.attributeValue=null;  super.finalize();}  }
class C{  final synchronized private FileChannel reopenChannel() throws IOException {  assertOpen();  if (raf != null && raf.getChannel().isOpen()) {    return raf.getChannel();  }  this.raf=new RandomAccessFile(file,fileMode);  if (log.isInfoEnabled())   log.info("(Re-)opened file: " + file);  if (bufferMode != BufferMode.Mapped) {    try {      final boolean readOnly="r".equals(fileMode);      if (raf.getChannel().tryLock(0,Long.MAX_VALUE,readOnly) == null) {        try {          raf.close();        } catch (        Throwable t) {        }        throw new IOException("File already locked? file=" + file);      }    } catch (    IOException ex) {      if (log.isInfoEnabled())       log.info("FileLock not supported: file=" + file,ex);    }  }  return raf.getChannel();}  }
class C{  public static ImageRequestBuilder fromRequest(ImageRequest imageRequest){  return ImageRequestBuilder.newBuilderWithSource(imageRequest.getSourceUri()).setImageDecodeOptions(imageRequest.getImageDecodeOptions()).setCacheChoice(imageRequest.getCacheChoice()).setLocalThumbnailPreviewsEnabled(imageRequest.getLocalThumbnailPreviewsEnabled()).setLowestPermittedRequestLevel(imageRequest.getLowestPermittedRequestLevel()).setPostprocessor(imageRequest.getPostprocessor()).setProgressiveRenderingEnabled(imageRequest.getProgressiveRenderingEnabled()).setRequestPriority(imageRequest.getPriority()).setResizeOptions(imageRequest.getResizeOptions()).setRequestListener(imageRequest.getRequestListener()).setRotationOptions(imageRequest.getRotationOptions());}  }
class C{  @Override public void onFinished(){synchronized (Starter.this) {    mEverythingFinished=true;    Starter.this.notifyAll();  }}  }
class C{  protected EnumMappingRuleImpl(){  super();}  }
class C{  private void addSeparator(JComponent container,GridBagConstraints c){  c.gridy=0;  c.gridx++;  c.gridheight=GridBagConstraints.REMAINDER;  JComponent separator=new JSeparator(SwingConstants.VERTICAL);  Insets tmpInsets=c.insets;  c.insets=new Insets(SEPARATOR_MARGIN,0,SEPARATOR_MARGIN,0);  container.add(separator,c);  c.gridheight=1;  c.insets=tmpInsets;}  }
class C{  public float eval(float u){  return (((d * u) + c) * u + b) * u + a;}  }
class C{  CompiledValue createCompiledValueForLikePredicate(CompiledValue var,CompiledValue patternOrBindParam){  if (!(patternOrBindParam.getType() == CompiledBindArgument.QUERY_PARAM)) {    CompiledLiteral pattern=(CompiledLiteral)patternOrBindParam;    if (pattern._obj == null) {      throw new UnsupportedOperationException("Null values are not supported with LIKE predicate.");    }  }  return new CompiledLike(var,patternOrBindParam);}  }
class C{  private void nothingToDisplay(@Nullable Revision revision){  displayCommitA(revision);  displayCommitB(null);  view.setCompareType(constant.historyNothingToDisplay());  view.setDiffContext("");}  }
class C{  public ECFieldElement sqrt(){  int[] c=this.x;  if (Nat224.isZero(c) || Nat224.isOne(c)) {    return this;  }  int[] nc=Nat224.create();  SecP224R1Field.negate(c,nc);  int[] r=Mod.random(SecP224R1Field.P);  int[] t=Nat224.create();  if (!isSquare(c)) {    return null;  }  while (!trySqrt(nc,r,t)) {    SecP224R1Field.addOne(r,r);  }  SecP224R1Field.square(t,r);  return Nat224.eq(c,r) ? new SecP224R1FieldElement(t) : null;}  }
class C{  public static void sort(short[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  protected void cancelRepaints(){  super.cancelRepaints();  for (int i=0; i < getComponentCount(); i++) {    Component c=getComponentAt(i);    c.cancelRepaints();  }}  }
class C{  public static void main(String[] argv){  runClassifier(new MultiClassClassifier(),argv);}  }
class C{  public static <T>boolean areAllValuesEqual(Collection<ActionType> actionTypes,Function<ActionType,T> transformFunction){  Collection<T> values=Collections2.transform(actionTypes,transformFunction);  Set<T> valueSet=new HashSet<>(values);  return valueSet.size() == 1;}  }
class C{  @SuppressWarnings("deprecation") private void syncCookies(){  if (Build.VERSION.SDK_INT < 21) {    CookieSyncManager.createInstance(getApplicationContext());    CookieSyncManager.getInstance().sync();  }}  }
class C{  static void inflateGens(SegmentInfos infos,Collection<String> files,InfoStream infoStream){  long maxSegmentGen=Long.MIN_VALUE;  int maxSegmentName=Integer.MIN_VALUE;  Map<String,Long> maxPerSegmentGen=new HashMap<>();  for (  String fileName : files) {    if (fileName.equals(IndexFileNames.OLD_SEGMENTS_GEN) || fileName.equals(IndexWriter.WRITE_LOCK_NAME)) {    } else     if (fileName.startsWith(IndexFileNames.SEGMENTS)) {      try {        maxSegmentGen=Math.max(SegmentInfos.generationFromSegmentsFileName(fileName),maxSegmentGen);      } catch (      NumberFormatException ignore) {      }    } else     if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) {      try {        maxSegmentGen=Math.max(SegmentInfos.generationFromSegmentsFileName(fileName.substring(8)),maxSegmentGen);      } catch (      NumberFormatException ignore) {      }    } else {      String segmentName=IndexFileNames.parseSegmentName(fileName);      assert segmentName.startsWith("_") : "wtf? file=" + fileName;      if (fileName.toLowerCase(Locale.ROOT).endsWith(".tmp")) {        continue;      }      maxSegmentName=Math.max(maxSegmentName,Integer.parseInt(segmentName.substring(1),Character.MAX_RADIX));      Long curGen=maxPerSegmentGen.get(segmentName);      if (curGen == null) {        curGen=0L;      }      try {        curGen=Math.max(curGen,IndexFileNames.parseGeneration(fileName));      } catch (      NumberFormatException ignore) {      }      maxPerSegmentGen.put(segmentName,curGen);    }  }  infos.setNextWriteGeneration(Math.max(infos.getGeneration(),maxSegmentGen));  if (infos.counter < 1 + maxSegmentName) {    if (infoStream.isEnabled("IFD")) {      infoStream.message("IFD","init: inflate infos.counter to " + (1 + maxSegmentName) + " vs current="+ infos.counter);    }    infos.counter=1 + maxSegmentName;  }  for (  SegmentCommitInfo info : infos) {    Long gen=maxPerSegmentGen.get(info.info.name);    assert gen != null;    long genLong=gen;    if (info.getNextWriteDelGen() < genLong + 1) {      if (infoStream.isEnabled("IFD")) {        infoStream.message("IFD","init: seg=" + info.info.name + " set nextWriteDelGen="+ (genLong + 1)+ " vs current="+ info.getNextWriteDelGen());      }      info.setNextWriteDelGen(genLong + 1);    }    if (info.getNextWriteFieldInfosGen() < genLong + 1) {      if (infoStream.isEnabled("IFD")) {        infoStream.message("IFD","init: seg=" + info.info.name + " set nextWriteFieldInfosGen="+ (genLong + 1)+ " vs current="+ info.getNextWriteFieldInfosGen());      }      info.setNextWriteFieldInfosGen(genLong + 1);    }    if (info.getNextWriteDocValuesGen() < genLong + 1) {      if (infoStream.isEnabled("IFD")) {        infoStream.message("IFD","init: seg=" + info.info.name + " set nextWriteDocValuesGen="+ (genLong + 1)+ " vs current="+ info.getNextWriteDocValuesGen());      }      info.setNextWriteDocValuesGen(genLong + 1);    }  }}  }
class C{  private void writeTag(String name,Tag tag) throws IOException {  TagType type=tag.getType();  byte[] nameBytes=name.getBytes(StandardCharsets.UTF_8);  if (type == TagType.END) {    throw new IOException("Named TAG_End not permitted.");  }  os.writeByte(type.getId());  os.writeShort(nameBytes.length);  os.write(nameBytes);  writeTagPayload(tag);}  }
class C{  protected float unwrapValue(Object value){  return ((Float)value).floatValue();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namespaceURI03.class,args);}  }
class C{  public void addAccessibilityApisIfNecessary(){  if (!isAccessibilityEnabled() || !isJavaScriptEnabled()) {    return;  }  addTtsApis();  addCallbackApis();}  }
class C{  private static void checkPathNeed(){  if (samplingInterval == -1) {    lastPreloadTime=readMorePaths();  }  if (!Double.isNaN(lastPreloadTime) && SimClock.getTime() >= lastPreloadTime - (samplingInterval * MIN_AHEAD_INTERVALS)) {    for (int i=0; i < nrofPreload && !Double.isNaN(lastPreloadTime); i++) {      lastPreloadTime=readMorePaths();    }  }}  }
class C{  public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object object;    try {      object=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (object instanceof String) {      return (String)object;    }    throw new JSONException("Bad value from toJSONString: " + object);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    return new JSONObject((Map<String,Object>)value).toString();  }  if (value instanceof Collection) {    return new JSONArray((Collection<Object>)value).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  private void wavesSynth(WaveSynthParams synthParams,WavesData wavesInfo,WaveEnvelope envelope,boolean phaseShift,int regOffset,float[] out){  int waveParam=wavesInfo.startIndex;  for (int wn=0; wn < wavesInfo.numWavs; wn++, waveParam++) {    double amp=amp_sf_tab[synthParams.waves[waveParam].ampSf] * (synthParams.amplitudeMode == 0 ? (synthParams.waves[waveParam].ampIndex + 1) / 15.13f : 1.0f);    int inc=synthParams.waves[waveParam].freqIndex;    int pos=DEQUANT_PHASE(synthParams.waves[waveParam].phaseIndex) - (regOffset ^ 128) * inc & 2047;    for (int i=0; i < 128; i++) {      out[i]+=sine_table[pos] * amp;      pos=(pos + inc) & 2047;    }  }  if (phaseShift) {    for (int i=0; i < 128; i++) {      out[i]=-out[i];    }  }  if (envelope.hasStartPoint) {    int pos=(envelope.startPos << 2) - regOffset;    if (pos > 0 && pos <= 128) {      Arrays.fill(out,0,pos,0f);      if (!envelope.hasStopPoint || envelope.startPos != envelope.stopPos) {        out[pos + 0]*=hann_window[0];        out[pos + 1]*=hann_window[32];        out[pos + 2]*=hann_window[64];        out[pos + 3]*=hann_window[96];      }    }  }  if (envelope.hasStopPoint) {    int pos=(envelope.stopPos + 1 << 2) - regOffset;    if (pos > 0 && pos <= 128) {      out[pos - 4]*=hann_window[96];      out[pos - 3]*=hann_window[64];      out[pos - 2]*=hann_window[32];      out[pos - 1]*=hann_window[0];      Arrays.fill(out,pos,128,0f);    }  }}  }
class C{  public static void main(String[] argv){  runClassifier(new PART(),argv);}  }
class C{  @ApiOperation(value="Refresh caches on the single engine") @RequestMapping(value="engine/refreshcache",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postClearCaches(){  clearCacheImpl(getSymmetricEngine());}  }
class C{  public IPackageFragmentRoot[] computePackageFragmentRoots(IClasspathEntry[] resolvedClasspath,boolean retrieveExportedRoots,Map rootToResolvedEntries) throws JavaModelException {  ObjectVector accumulatedRoots=new ObjectVector();  computePackageFragmentRoots(resolvedClasspath,accumulatedRoots,new HashSet(5),null,retrieveExportedRoots,rootToResolvedEntries);  IPackageFragmentRoot[] rootArray=new IPackageFragmentRoot[accumulatedRoots.size()];  accumulatedRoots.copyInto(rootArray);  return rootArray;}  }
class C{  public UsuarioExtendedVO asignarPrestamoAGestor(PrestamoVO prestamo,String idGestor) throws ActionNotAllowedException {  this.check(ServiciosSecurityManager.CEDER_CONTROL_ACTION);  LoggingEvent event=getLogginEvent(ArchivoActions.SERVICIOS_MODULE_CESION_PRESTAMO);  Locale locale=getServiceClient().getLocale();  DataLoggingEvent data=event.getDataLoggingEvent(ArchivoObjects.OBJECT_PRESTAMO,prestamo.getId());  data.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_USUARIO_ANTERIOR,prestamo.getNusrsolicitante());  UsuarioExtendedVO usuario=getGestionControlUsusarios().getUsuarioExtendido(idGestor);  if ((usuario == null) || (usuario.getIdOrgPertenece() == null)) {    throw new ActionNotAllowedException(ArchivoErrorCodes.ERROR_CESION_PRESTAMO_NO_ORGANIZACION_NAME,ArchivoErrorCodes.ERROR_CESION_PRESTAMO_NO_ORGANIZACION,ArchivoModules.SERVICIOS_MODULE);  }  if (prestamo.getIdusrsolicitante() != null && prestamo.getIdusrsolicitante().equalsIgnoreCase(prestamo.getIdusrgestor())) {    prestamo.setNusrsolicitante(usuario.getNombreCompleto());    prestamo.setIdusrsolicitante(usuario.getId());    prestamo.setNorgsolicitante(usuario.getNombreOrgPertenece());    prestamo.setIdorgsolicitante(usuario.getIdOrgPertenece());  }  data.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_USUARIO_NUEVO,usuario.getNombreCompleto());  data.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_ID,CodigoTransferenciaUtils.getCodigoTransferenciaFromVO(prestamo,getServiceSession()));  prestamo.setIdusrgestor(usuario.getId());  prestamoDBEntity.updatePrestamo(prestamo);  return usuario;}  }
class C{  public boolean showCard(String tag,boolean dismissible){  final Card card=mHiddenCards.get(tag);  if (card != null && !mVisibleCards.containsValue(tag)) {    mHiddenCards.remove(tag);    mVisibleCards.put(tag,card);    mLayout.addCard(card.getView(),dismissible);    if (dismissible) {      mDismissibleCards.add(tag);    }    return true;  }  return false;}  }
class C{  public void addParam(AstNode param){  assertNotNull(param);  if (params == null) {    params=new ArrayList<AstNode>();  }  params.add(param);  param.setParent(this);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void activate(BundleContext bc){  ServiceTracker<C,C> trk=new ServiceTracker<C,C>(bc,type,null);  trk.open();  tracker=trk;}  }
class C{  protected DoubleMatrix1D viewSelectionLike(int[] offsets){  return new SelectedSparseDoubleMatrix1D(this.elements,offsets);}  }
class C{  public static AffineTransformation reflectionInstance(double x,double y){  AffineTransformation trans=new AffineTransformation();  trans.setToReflection(x,y);  return trans;}  }
class C{  public void login(Subject subject,CallbackHandler handler) throws LoginException {  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    if (debug != null) {      debug.println("checking login permission");    }    sm.checkPermission(new SecurityPermission("authProvider." + this.getName()));  }  if (hasValidToken() == false) {    throw new LoginException("No token present");  }  if ((token.tokenInfo.flags & CKF_LOGIN_REQUIRED) == 0) {    if (debug != null) {      debug.println("login operation not required for token - " + "ignoring login request");    }    return;  }  try {    if (token.isLoggedInNow(null)) {      if (debug != null) {        debug.println("user already logged in");      }      return;    }  } catch (  PKCS11Exception e) {  }  char[] pin=null;  if ((token.tokenInfo.flags & CKF_PROTECTED_AUTHENTICATION_PATH) == 0) {    CallbackHandler myHandler=getCallbackHandler(handler);    if (myHandler == null) {      throw new LoginException("no password provided, and no callback handler " + "available for retrieving password");    }    java.text.MessageFormat form=new java.text.MessageFormat(ResourcesMgr.getString("PKCS11.Token.providerName.Password."));    Object[] source={getName()};    PasswordCallback pcall=new PasswordCallback(form.format(source),false);    Callback[] callbacks={pcall};    try {      myHandler.handle(callbacks);    } catch (    Exception e) {      LoginException le=new LoginException("Unable to perform password callback");      le.initCause(e);      throw le;    }    pin=pcall.getPassword();    pcall.clearPassword();    if (pin == null) {      if (debug != null) {        debug.println("caller passed NULL pin");      }    }  }  Session session=null;  try {    session=token.getOpSession();    p11.C_Login(session.id(),CKU_USER,pin);    if (debug != null) {      debug.println("login succeeded");    }  } catch (  PKCS11Exception pe) {    if (pe.getErrorCode() == CKR_USER_ALREADY_LOGGED_IN) {      if (debug != null) {        debug.println("user already logged in");      }      return;    } else     if (pe.getErrorCode() == CKR_PIN_INCORRECT) {      FailedLoginException fle=new FailedLoginException();      fle.initCause(pe);      throw fle;    } else {      LoginException le=new LoginException();      le.initCause(pe);      throw le;    }  } finally {    token.releaseSession(session);    if (pin != null) {      Arrays.fill(pin,' ');    }  }}  }
class C{  protected static double regularizedIncBetaQuadrature(double alpha,double beta,double x){  final double alphapbeta=alpha + beta;  final double a1=alpha - 1.0;  final double b1=beta - 1.0;  final double mu=alpha / alphapbeta;  final double lnmu=Math.log(mu);  final double lnmuc=Math.log1p(-mu);  double t=Math.sqrt(alpha * beta / (alphapbeta * alphapbeta * (alphapbeta + 1.0)));  final double xu;  if (x > alpha / alphapbeta) {    if (x >= 1.0) {      return 1.0;    }    xu=Math.min(1.0,Math.max(mu + 10.0 * t,x + 5.0 * t));  } else {    if (x <= 0.0) {      return 0.0;    }    xu=Math.max(0.0,Math.min(mu - 10.0 * t,x - 5.0 * t));  }  double sum=0.0;  for (int i=0; i < GAUSSLEGENDRE_Y.length; i++) {    t=x + (xu - x) * GAUSSLEGENDRE_Y[i];    sum+=GAUSSLEGENDRE_W[i] * Math.exp(a1 * (Math.log(t) - lnmu) + b1 * (Math.log1p(-t) - lnmuc));  }  double ans=sum * (xu - x) * Math.exp(a1 * lnmu - GammaDistribution.logGamma(alpha) + b1 * lnmuc - GammaDistribution.logGamma(beta) + GammaDistribution.logGamma(alphapbeta));  return ans > 0 ? 1.0 - ans : -ans;}  }
class C{  public static HostInternetScsiHba findHostBusAdapterByIqn(Collection<? extends HostHostBusAdapter> hbas,String iqn){  for (  HostHostBusAdapter hba : hbas) {    if (hba instanceof HostInternetScsiHba) {      HostInternetScsiHba iscsiHba=(HostInternetScsiHba)hba;      if (StringUtils.equals(iqn,iscsiHba.getIScsiName())) {        return iscsiHba;      }    }  }  return null;}  }
class C{  public ResourcesResponseHandler(){}  }
class C{  public void closeForWrites(){  if (isReadOnly()) {    throw new IllegalStateException();  }  readOnly=true;}  }
class C{  public ChunkedOutputStream(final SessionOutputBuffer out,int bufferSize) throws IOException {  super();  this.cache=new byte[bufferSize];  this.out=out;}  }
class C{  public _Fields fieldForId(int fieldId){  return _Fields.findByThriftId(fieldId);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.924 -0500",hash_original_method="716CBCE4AB0F7ADAAF42E1058B3670D3",hash_generated_method="7F7D7D86D524AAD7E8C66FE00232F9B6") public static SslError SslErrorFromChromiumErrorCode(int error,SslCertificate cert,String url){  assert (error >= -299 && error <= -200);  if (error == -200)   return new SslError(SSL_IDMISMATCH,cert,url);  if (error == -201)   return new SslError(SSL_DATE_INVALID,cert,url);  if (error == -202)   return new SslError(SSL_UNTRUSTED,cert,url);  return new SslError(SSL_INVALID,cert,url);}  }
class C{  public void stopAndRemoveContainer(String containerId,String imageName){  stopContainer(containerId,imageName);  registeredContainers.remove(containerId);}  }
class C{  public VCenterAPI(URL url,String username,String password) throws VMWareException {  this(url);  login(username,password);}  }
class C{  public static <T>T[] filter(T[] array,Predicate<T> predicate){  T[] newArray=createWithSameComponentType(array.length,array);  assertTrue(newArray.length <= array.length);  int newIx=0, arrayIx=0;  while (arrayIx < array.length) {    if (predicate.test(array[arrayIx])) {      newArray[newIx]=array[arrayIx];      newIx++;      arrayIx++;    } else {      arrayIx++;    }  }  return newIx == arrayIx ? newArray : Arrays.copyOfRange(newArray,0,newIx);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:27.319 -0500",hash_original_method="ABDC33D84A29539A96C484C81BD10405",hash_generated_method="865818060927F98B30D45F5724B92304") public void restartDownload(long... ids){  Cursor cursor=query(new Query().setFilterById(ids));  try {    for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {      int status=cursor.getInt(cursor.getColumnIndex(COLUMN_STATUS));      if (status != STATUS_SUCCESSFUL && status != STATUS_FAILED) {        throw new IllegalArgumentException("Cannot restart incomplete download: " + cursor.getLong(cursor.getColumnIndex(COLUMN_ID)));      }    }  }  finally {    cursor.close();  }  ContentValues values=new ContentValues();  values.put(Downloads.Impl.COLUMN_CURRENT_BYTES,0);  values.put(Downloads.Impl.COLUMN_TOTAL_BYTES,-1);  values.putNull(Downloads.Impl._DATA);  values.put(Downloads.Impl.COLUMN_STATUS,Downloads.Impl.STATUS_PENDING);  mResolver.update(mBaseUri,values,getWhereClauseForIds(ids),getWhereArgsForIds(ids));}  }
class C{  public static <T>List<T> last(List<T> elements,int limit){  ArrayList<T> res=new ArrayList<T>();  for (int i=0; i < elements.size(); i++) {    if (res.size() >= limit) {      break;    }    res.add(elements.get(elements.size() - 1 - i));  }  return res;}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  if (Consts.DEBUG) {    Log.i(TAG,"signature: " + signature);  }  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  @ObjectiveCName("deleteChatCommandWithPeer:") public Command<Void> deleteChat(Peer peer){  return null;}  }
class C{  public Statement notIn(Object... values){  statement.append(" NOT");  return in(values);}  }
class C{  static boolean isFatal(SQLException ex){  int errorCode=ex.getErrorCode();  return Arrays.binarySearch(FATAL_ERRORS,errorCode) >= 0;}  }
class C{  public int size(){  return edges.size();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public <T extends Annotation>T scan(Class<T> type){  if (!contains(type)) {    T value=find(type);    if (type != null && value != null) {      put(type,value);    }  }  return (T)get(type);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textparseintolistofelements.class,args);}  }
class C{  public GetRepositoriesRequestBuilder(ElasticsearchClient client,GetRepositoriesAction action){  super(client,action,new GetRepositoriesRequest());}  }
class C{  private void testBug71396StatementMultiCheck(Statement testStmt,String[] queries,int[] expRowCount) throws SQLException {  if (queries.length != expRowCount.length) {    fail("Bad arguments!");  }  for (int i=0; i < queries.length; i++) {    testBug71396StatementCheck(testStmt,queries[i],expRowCount[i]);  }}  }
class C{  public int _offsetToX(int line,int offset){  TokenMarker tokenMarker=getTokenMarker();  FontMetrics fm=painter.getFontMetrics();  getLineText(line,lineSegment);  int segmentOffset=lineSegment.offset;  int x=horizontalOffset;  if (tokenMarker == null) {    lineSegment.count=offset;    return x + Utilities.getTabbedTextWidth(lineSegment,fm,x,painter,0);  } else {    Token tokens;    if (painter.currentLineIndex == line && painter.currentLineTokens != null)     tokens=painter.currentLineTokens; else {      painter.currentLineIndex=line;      tokens=painter.currentLineTokens=tokenMarker.markTokens(lineSegment,line);    }    painter.getToolkit();    Font defaultFont=painter.getFont();    SyntaxStyle[] styles=painter.getStyles();    for (; ; ) {      byte id=tokens.id;      if (id == Token.END) {        return x;      }      if (id == Token.NULL)       fm=painter.getFontMetrics(); else       fm=styles[id].getFontMetrics(defaultFont);      int length=tokens.length;      if (offset + segmentOffset < lineSegment.offset + length) {        lineSegment.count=offset - (lineSegment.offset - segmentOffset);        return x + Utilities.getTabbedTextWidth(lineSegment,fm,x,painter,0);      } else {        lineSegment.count=length;        x+=Utilities.getTabbedTextWidth(lineSegment,fm,x,painter,0);        lineSegment.offset+=length;      }      tokens=tokens.next;    }  }}  }
class C{  private <T>void assertContains(final T[] expectedEntries,final Collection<T> collection){  assertEquals(expectedEntries.length,collection.size());  for (  T t : expectedEntries) {    assertTrue(collection.contains(t));  }}  }
class C{  private void createPopupMenu(int x,int y){  Action[] popupMenuActions=getPopupMenuActions();  JScrollBar vbar=getTreeTable().getVerticalScrollBar();  myUIFacade.showPopupMenu(this,popupMenuActions,x - getTreeTable().getHorizontalScrollBar().getValue() + (vbar.isVisible() ? vbar.getWidth() : 0),y - vbar.getValue() + getTreeTable().getTable().getTableHeader().getHeight());}  }
class C{  public static void prefetchData(List<Product> products,LocalizerFacade facade,PerformanceHint scope){  if (scope == PerformanceHint.ONLY_FIELDS_FOR_LISTINGS) {    List<Long> objectKeys=new ArrayList<Long>();    for (    Product product : products) {      objectKeys.add(Long.valueOf(product.getTemplateOrSelf().getKey()));    }    facade.prefetch(objectKeys,Arrays.asList(new LocalizedObjectTypes[]{LocalizedObjectTypes.PRODUCT_MARKETING_NAME,LocalizedObjectTypes.PRODUCT_SHORT_DESCRIPTION}));  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + String.valueOf(progress)+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @NotNull @ObjectiveCName("terminateAllSessionsCommand") public Command<Void> terminateAllSessions(){  return null;}  }
class C{  public void add(MemberDefinition method){  if (frozen) {    throw new CompilerError("add()");  }  Identifier name=method.getName();  List methodList=(List)lookupMap.get(name);  if (methodList == null) {    methodList=new ArrayList();    lookupMap.put(name,methodList);  }  int size=methodList.size();  for (int i=0; i < size; i++) {    if (((MemberDefinition)methodList.get(i)).getType().equalArguments(method.getType())) {      throw new CompilerError("duplicate addition");    }  }  methodList.add(method);  count++;}  }
class C{  @Deprecated public void enableExceptionSummary(boolean enable){}  }
class C{  private void writeDatasources(File configOverrides) throws IOException {  List<DataSource> dataSources=getDataSources();  if (dataSources != null) {    File datasourcesXML=new File(configOverrides,"cargo-datasources.xml");    PrintStream writer=ServerConfigUtils.open(datasourcesXML);    for (    DataSource ds : dataSources) {      ServerConfigUtils.writeDataSource(writer,ds);    }    ServerConfigUtils.close(writer);  }}  }
class C{  @DSComment("Utility to build profile") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:25.349 -0500",hash_original_method="9D6052B0DC59ACBDB83E3EF9051B1CBF",hash_generated_method="EE3144543673BCA538013AE8E29AD939") public SipProfile build(){  mProfile.mPassword=mUri.getUserPassword();  mUri.setUserPassword(null);  try {    if (!TextUtils.isEmpty(mProxyAddress)) {      SipURI uri=(SipURI)mAddressFactory.createURI(fix(mProxyAddress));      mProfile.mProxyAddress=uri.getHost();    } else {      if (!mProfile.mProtocol.equals(UDP)) {        mUri.setTransportParam(mProfile.mProtocol);      }      if (mProfile.mPort != DEFAULT_PORT) {        mUri.setPort(mProfile.mPort);      }    }    mProfile.mAddress=mAddressFactory.createAddress(mDisplayName,mUri);  } catch (  InvalidArgumentException e) {    throw new RuntimeException(e);  }catch (  ParseException e) {    throw new RuntimeException(e);  }  return mProfile;}  }
class C{  @Uninterruptible private static void unwindInvisibleStackFrame(AbstractRegisters registers){  registers.unwindStackFrame();}  }
class C{  public static byte[] packByteBufferIntoSingleByteArray(ByteBuffer[] byteBufferArr){  if (null == byteBufferArr || byteBufferArr.length == 0) {    return null;  }  int noOfCol=byteBufferArr.length;  short toDetermineLengthOfByteArr=2;  short offsetLen=(short)(noOfCol * 2 + toDetermineLengthOfByteArr);  int totalBytes=calculateTotalBytes(byteBufferArr) + offsetLen;  ByteBuffer buffer=ByteBuffer.allocate(totalBytes);  buffer.putShort((short)(totalBytes - toDetermineLengthOfByteArr));  buffer.putShort(offsetLen);  for (int index=0; index < byteBufferArr.length - 1; index++) {    ByteBuffer individualCol=byteBufferArr[index];    int noOfBytes=individualCol.capacity();    buffer.putShort((short)(offsetLen + noOfBytes));    offsetLen+=noOfBytes;    individualCol.rewind();  }  for (int index=0; index < byteBufferArr.length; index++) {    ByteBuffer individualCol=byteBufferArr[index];    buffer.put(individualCol.array());  }  buffer.rewind();  return buffer.array();}  }
class C{  public DaemonException(String message){  super(message);}  }
class C{  public void zoomOutImage(float deltaScale){  zoomOutImage(deltaScale,mCropRect.centerX(),mCropRect.centerY());}  }
class C{  public void init() throws ServletException {}  }
class C{  public static IMethodBinding findMethodInHierarchy(ITypeBinding type,String methodName,String[] parameters){  IMethodBinding method=findMethodInType(type,methodName,parameters);  if (method != null)   return method;  ITypeBinding superClass=type.getSuperclass();  if (superClass != null) {    method=findMethodInHierarchy(superClass,methodName,parameters);    if (method != null)     return method;  }  ITypeBinding[] interfaces=type.getInterfaces();  for (int i=0; i < interfaces.length; i++) {    method=findMethodInHierarchy(interfaces[i],methodName,parameters);    if (method != null)     return method;  }  return null;}  }
class C{  public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {  fInDTD=true;  try {    if (fLexicalHandler != null) {      fLexicalHandler.startDTD(rootElement,publicId,systemId);    }  } catch (  SAXException e) {    throw new XNIException(e);  }  if (fDeclHandler != null) {    fDeclaredAttrs=new SymbolHash();  }}  }
class C{  public static boolean isValidURL(String url){  StringBuilder result=new StringBuilder();  try {    HttpURLConnection con=(HttpURLConnection)new URL(url + "status.php").openConnection();    con.setRequestMethod(NotesClient.METHOD_GET);    con.setConnectTimeout(10 * 1000);    BufferedReader rd=new BufferedReader(new InputStreamReader(con.getInputStream()));    String line;    while ((line=rd.readLine()) != null) {      result.append(line);    }    JSONObject response=new JSONObject(result.toString());    return response.getBoolean("installed");  } catch (  IOException|JSONException|NullPointerException e) {    return false;  }}  }
class C{  public static InputStream executeSolrCommandAndGetInputStream(String command) throws IOException {  return executeSolrCommandAndGetInputStreamWithTimeout(DEFAULT_TIMEOUT,command);}  }
class C{  @Override public boolean checkParity(){  int len=getNumDataElements();  int chksum=0x00;  int loop;  for (loop=0; loop < len - 1; loop++) {    chksum^=getElement(loop);  }  return ((chksum & 0xFF) == getElement(len - 1));}  }
class C{  void jumpToNextComponent(boolean next){  if (!getButtonGroupInfo()) {    if (activeBtn != null) {      lastBtn=activeBtn;      firstBtn=activeBtn;    } else     return;  }  JComponent compTransferFocusFrom=activeBtn;  Component focusBase=getFocusTransferBaseComponent(next);  if (focusBase != null) {    if (next) {      KeyboardFocusManager.getCurrentKeyboardFocusManager().focusNextComponent(focusBase);    } else {      KeyboardFocusManager.getCurrentKeyboardFocusManager().focusPreviousComponent(focusBase);    }  }}  }
class C{  public void addDispatcher(String dispatcherName){  Element child=new Element(WebXmlType.DISPATCHER,this.getNamespace());  child.setText(dispatcherName);  this.getChildren().add(child);}  }
class C{  public WARCFileReader(Configuration conf,Path filePath) throws IOException {  FileSystem fs=filePath.getFileSystem(conf);  this.fileSize=fs.getFileStatus(filePath).getLen();  logger.info("Reading from " + filePath);  CompressionCodec codec=filePath.getName().endsWith(".gz") ? WARCFileWriter.getGzipCodec(conf) : null;  byteStream=new CountingInputStream(new BufferedInputStream(fs.open(filePath)));  dataStream=new DataInputStream(codec == null ? byteStream : codec.createInputStream(byteStream));}  }
class C{  public SystemIsRunningException(String message){  super(message);}  }
class C{  @Override public void onLoadResource(WebView view,String url){  if (url.contains("flattr")) {    WebView.HitTestResult result=view.getHitTestResult();    if (result != null && result.getType() > 0) {      try {        view.getContext().startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(url)));      } catch (      ActivityNotFoundException e) {        openDialog(android.R.drawable.ic_dialog_alert,R.string.donations__alert_dialog_title,getString(R.string.donations__alert_dialog_no_browser));      }      view.stopLoading();    }  }}  }
class C{  public boolean isComplete(){  return completed;}  }
class C{  protected Object invokeCallback(){  return invokeCallback(mParams,DEFAULT_EXCEPTION_INFO);}  }
class C{  public static String[] splitByDot(String input){  ArrayList<String> splitList=new ArrayList<String>();  StringBuilder section=new StringBuilder();  if (StringUtils.isEmpty(input)) {    return new String[]{""};  }  InputTextReader reader=new InputTextReader(input);  while (!reader.eof()) {    char curr=reader.read();    if (isDot(curr)) {      splitList.add(section.toString());      section.setLength(0);    } else     if (curr == '%' && reader.canReadChars(2) && reader.peek(2).equalsIgnoreCase("2e")) {      reader.read();      reader.read();      splitList.add(section.toString());      section.setLength(0);    } else {      section.append(curr);    }  }  splitList.add(section.toString());  return splitList.toArray(new String[splitList.size()]);}  }
class C{  public void handleCacheCreation(GemFireCacheImpl cache) throws ManagementException {  try {    this.cacheImpl=(GemFireCacheImpl)cache;    this.service=(SystemManagementService)ManagementService.getManagementService(cacheImpl);    this.memberMBeanBridge=new MemberMBeanBridge(cacheImpl,service).init();    this.memberBean=new MemberMBean(memberMBeanBridge);    this.memberLevelNotifEmitter=memberBean;    ObjectName memberMBeanName=MBeanJMXAdapter.getMemberMBeanName(InternalDistributedSystem.getConnectedInstance().getDistributedMember());    memberSource=MBeanJMXAdapter.getMemberNameOrId(cacheImpl.getDistributedSystem().getDistributedMember());    ObjectName changedMBeanName=service.registerInternalMBean((MemberMXBean)memberBean,memberMBeanName);    service.federate(changedMBeanName,MemberMXBean.class,true);    this.serviceInitialised=true;    if (InternalLocator.hasLocator()) {      Locator loc=InternalLocator.getLocator();      handleLocatorStart(loc);    }    if (cache.getDistributedSystem().getConfig().getJmxManager()) {      this.service.createManager();      if (cache.getDistributedSystem().getConfig().getJmxManagerStart()) {        this.service.startManager();      }    }  }  finally {    if (!serviceInitialised && service != null) {      service.close();      if (logger.isDebugEnabled()) {        logger.debug("Management Service Could not initialise hence closing");      }    } else {      if (logger.isDebugEnabled()) {        logger.debug("Management Service is initialised and Running");      }    }  }}  }
class C{  void loadTvShowsFromDatabase(MVMap<UUID,String> tvShowMap,ObjectMapper objectMapper){  ObjectReader tvShowObjectReader=objectMapper.readerFor(TvShow.class);  for (  UUID uuid : tvShowMap.keyList()) {    try {      TvShow tvShow=tvShowObjectReader.readValue(tvShowMap.get(uuid));      tvShow.setDbId(uuid);      tvShowList.add(tvShow);    } catch (    Exception e) {      LOGGER.warn("problem decoding TV show json string: ",e);    }  }  LOGGER.info("found " + tvShowList.size() + " TV shows in database");}  }
class C{  public static synchronized void removeFromDisabledList(List<String> classnames){  for (  String s : classnames) {    removeFromDisabledList(s);  }}  }
class C{  public TMCoord(Angle latitude,Angle longitude,double easting,double northing,Angle originLatitude,Angle centralMeridian,double falseEasting,double falseNorthing,double scale){  if (latitude == null || longitude == null) {    throw new IllegalArgumentException("Latitude Or Longitude Is Null");  }  if (originLatitude == null || centralMeridian == null) {    throw new IllegalArgumentException("Angle Is Null");  }  this.latitude=latitude;  this.longitude=longitude;  this.easting=easting;  this.northing=northing;  this.originLatitude=originLatitude;  this.centralMeridian=centralMeridian;  this.falseEasting=falseEasting;  this.falseNorthing=falseNorthing;  this.scale=scale;}  }
class C{  protected void spinFan(){  for (int i=0; i < list.size(); i++) {    Arc a=(Arc)list.get(i);    a.setStartAngle(a.getStartAngle() + startAngle);  }}  }
class C{  public String toString(){  return toString(",");}  }
class C{  public PolynomialFunction(LagGraph lagGraph){  if (lagGraph == null) {    throw new NullPointerException("Lag graph must not be null.");  }  this.connectivity=new IndexedLagGraph(lagGraph);  int numFactors=this.connectivity.getNumFactors();  this.polynomials=new Polynomial[numFactors];  for (int i=0; i < numFactors; i++) {    this.polynomials[i]=new Polynomial(new ArrayList());  }  errorDistributions=new Distribution[numFactors];  for (int i=0; i < errorDistributions.length; i++) {    errorDistributions[i]=new Normal(0.0,0.05);  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public TObjectHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  private void forceLocationChoice(SettingsManager settingsManager){  SharedPreferences oldGlobalPreferences=settingsManager.openPreferences(OLD_GLOBAL_PREFERENCES_FILENAME);  if (settingsManager.isSet(SettingsManager.SCOPE_GLOBAL,Keys.KEY_RECORD_LOCATION)) {    if (!settingsManager.getBoolean(SettingsManager.SCOPE_GLOBAL,Keys.KEY_RECORD_LOCATION)) {      settingsManager.remove(SettingsManager.SCOPE_GLOBAL,Keys.KEY_RECORD_LOCATION);    }  } else   if (oldGlobalPreferences.contains(Keys.KEY_RECORD_LOCATION)) {    String location=removeString(oldGlobalPreferences,Keys.KEY_RECORD_LOCATION);    if (OLD_SETTINGS_VALUE_ON.equals(location)) {      settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_RECORD_LOCATION,true);    }  }}  }
class C{  synchronized void sessionClosed(){  TransactionContextStateHandler nextState=state.sessionClosed();  if (LOGGER.isTraceEnabled())   LOGGER.logTrace(this + ": changing state to " + nextState);  setState(nextState);}  }
class C{  @LargeTest public void testPropertiesH264WVGA() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_800x480_15fps_512kbps_AACLC_24KHz_38Kbps_s_1_17.mp4";  final int aspectRatio=MediaProperties.ASPECT_RATIO_5_3;  final int fileType=MediaProperties.FILE_MP4;  final int videoCodecType=MediaProperties.VCODEC_H264;  final int duration=77466;  final int videoBitrate=528000;  final int audioBitrate=38000;  final int fps=15;  final int audioCodecType=MediaProperties.ACODEC_AAC_LC;  final int audioSamplingFrequency=24000;  final int audioChannel=2;  final int videoProfile=MediaProperties.H264Profile.H264ProfileBaseline;  final int videoLevel=MediaProperties.H264Level.H264Level13;  final int width=800;  final int height=MediaProperties.HEIGHT_480;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mvi=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  validateVideoProperties(aspectRatio,fileType,videoCodecType,duration,videoBitrate,fps,videoProfile,videoLevel,width,height,audioCodecType,audioSamplingFrequency,audioChannel,audioBitrate,mvi);}  }
class C{  public AnimationBuilder rotation(float... rotation){  return property("rotation",rotation);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public TrashObject(int id){  this.id=id;}  }
class C{  @SneakyThrows public static String escapeString(String str){  String urlEncoded=URLEncoder.encode(str,StandardCharsets.UTF_8.name());  return urlEncoded.replace("/","%2F");}  }
class C{  public final double tz(double z){  final double length=this.length;  if (z >= 0 && z < length)   return z;  z=z % length;  if (z < 0)   z=z + length;  return z;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.455 -0500",hash_original_method="69AF6799D7AA8E2E8441037938ACC088",hash_generated_method="871D1891F24D5F57AD2B962D4F6CB2C0") public boolean canExecute(){  return false;}  }
class C{  private boolean hasScaleTypeDrawableAtIndex(int index){  DrawableParent parent=getParentDrawableAtIndex(index);  return (parent instanceof ScaleTypeDrawable);}  }
class C{  @Inject public BranchPresenter(BranchView view,DtoFactory dtoFactory,EditorAgent editorAgent,GitServiceClient service,GitLocalizationConstant constant,GitOutputPartPresenter console,AppContext appContext,NotificationManager notificationManager,DtoUnmarshallerFactory dtoUnmarshallerFactory,GitOutputPartPresenter gitConsole,WorkspaceAgent workspaceAgent,DialogFactory dialogFactory,ProjectExplorerPresenter projectExplorer,EventBus eventBus){  this.view=view;  this.dtoFactory=dtoFactory;  this.gitConsole=gitConsole;  this.workspaceAgent=workspaceAgent;  this.dialogFactory=dialogFactory;  this.projectExplorer=projectExplorer;  this.eventBus=eventBus;  this.view.setDelegate(this);  this.editorAgent=editorAgent;  this.service=service;  this.console=console;  this.constant=constant;  this.appContext=appContext;  this.notificationManager=notificationManager;  this.dtoUnmarshallerFactory=dtoUnmarshallerFactory;}  }
class C{  public static double interpolantNormalized(double amount,double startAmount,double stopAmount){  if (amount < startAmount)   return 0.0; else   if (amount > stopAmount)   return 1.0;  if ((stopAmount - startAmount) == 0) {    return (1.0);  }  return (amount - startAmount) / (stopAmount - startAmount);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int dimension(){  return components.length;}  }
class C{  public ArrayList<WritableComparable> createPartitions(int numPartitions){  int numRecords=records.size();  if (numPartitions > numRecords) {    throw new IllegalArgumentException("Requested more partitions than input keys (" + numPartitions + " > "+ numRecords+ ")");  }  new QuickSort().sort(this,0,records.size());  float stepSize=numRecords / (float)numPartitions;  ArrayList<WritableComparable> result=new ArrayList<WritableComparable>(numPartitions - 1);  for (int i=1; i < numPartitions; i++) {    result.add(records.get(Math.round(stepSize * i)));  }  return result;}  }
class C{  public final void append(Instruction instruction){  lastInstr.BURS_backdoor_linkWithNext(instruction);  lastInstr=instruction;}  }
class C{  public static void encode(InputStream in,PrintStream out){  Reader reader;  char c;  int index;  CharacterReference candidate;  PrintWriter output;  try {    reader=new BufferedReader(new InputStreamReader(in,"ISO-8859-1"));    output=new PrintWriter(new BufferedWriter(new OutputStreamWriter(out,"ISO-8859-1")));  } catch (  UnsupportedEncodingException use) {    reader=new BufferedReader(new InputStreamReader(in));    output=new PrintWriter(new BufferedWriter(new OutputStreamWriter(out)));  }  try {    while (-1 != (index=reader.read())) {      c=(char)index;      candidate=lookup(c);      if (null != candidate) {        output.print('&');        output.print(candidate.getKernel());        output.print(';');      } else       if (!(c < 0x007F)) {        output.print("&#");        if (ENCODE_HEXADECIMAL) {          output.print("x");          output.print(Integer.toHexString(c));        } else         output.print((int)c);        output.print(';');      } else       output.print(c);    }  } catch (  IOException ioe) {    output.println();    output.println(ioe.getMessage());  } finally {    output.flush();  }}  }
class C{  static int compareParameterTypes(final Class<?>[] left,final Class<?>[] right,final Class<?>[] actual){  float leftCost=MemberUtils.getTotalTransformationCost(actual,left);  float rightCost=MemberUtils.getTotalTransformationCost(actual,right);  return leftCost < rightCost ? -1 : rightCost < leftCost ? 1 : 0;}  }
class C{  public static <T>List<T> topologicalSort(DirectedGraph<T> graph){  DirectedGraph<T> rGraph=reverse(graph);  List<T> sortedResult=new ArrayList<>();  Set<T> visitedNodes=new HashSet<>();  Set<T> expandedNodes=new HashSet<>();  for (  T node : rGraph) {    explore(node,rGraph,sortedResult,visitedNodes,expandedNodes);  }  return sortedResult;}  }
class C{  public synchronized ListIterator<E> listIterator(){  ArrayList<E> v=new ArrayList<E>(this);  return v.listIterator(this.size());}  }
class C{  public boolean equals(final Object o){  if (!(o instanceof Properties))   return false;  final Properties p=(Properties)o;  for (Iterator<?> i=getKeys(); i.hasNext(); ) {    String key=(String)i.next();    String[] value=p.getStringArray(key);    if (value == null || !Arrays.equals(getStringArray(key),value))     return false;  }  for (Iterator<?> i=p.getKeys(); i.hasNext(); )   if (getStringArray((String)i.next()) == null)   return false;  return true;}  }
class C{  public static ECPoint compressPoint(ECPoint point){  return getPointWithCompression(point,true);}  }
class C{  private void dialogClosedOk(){  final String input=offsetField.getText();  if (!"".equals(input)) {    try {      final MemoryExpressionElement expression=DebuggerMemoryExpressionParser.parse(input);      final CEvaluationVisitor visitor=new CEvaluationVisitor(m_bindings);      expression.visit(visitor);      final BigInteger value=visitor.getValue(expression);      if (value == null) {        final String errors=Commafier.commafy(visitor.getErrorMessages(),"\n");        CMessageBox.showError(m_parent,String.format("The expression you entered could not be evaluated:\n %s",errors));      } else       if (value.compareTo(BigInteger.ZERO) == -1 || value.toString(16).length() > 8) {        CMessageBox.showError(m_parent,String.format("The expression you entered evaluates to the invalid memory address %s.",value.toString(16).toUpperCase()));      } else {        final MemorySection section=ProcessHelpers.getSectionWith(m_memoryMap,new CAddress(value.longValue()));        if (section == null) {          CMessageBox.showError(m_parent,String.format("There is no memory at address %s.",value.toString(16).toUpperCase()));        } else {          m_value=new CAddress(value.longValue());          dispose();        }      }    } catch (    final RecognitionException exception) {      CMessageBox.showError(m_parent,"Invalid expression string.");    }  }}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mFinished=false;  mDuration=duration;  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  mFinalX=startX + dx;  mFinalY=startY + dy;  mDeltaX=dx;  mDeltaY=dy;  mDurationReciprocal=1.0f / (float)mDuration;}  }
class C{  public static String[] parse(String line){  boolean insideQuote=false;  ArrayList<String> result=new ArrayList<>();  int quoteCount=0;  StringBuilder sb=new StringBuilder();  for (int i=0; i < line.length(); i++) {    char c=line.charAt(i);    if (c == QUOTE) {      insideQuote=!insideQuote;      quoteCount++;    }    if (c == COMMA && !insideQuote) {      String value=sb.toString();      value=unQuoteUnEscape(value);      result.add(value);      sb.setLength(0);      continue;    }    sb.append(c);  }  result.add(sb.toString());  if (quoteCount % 2 != 0) {    return new String[0];  }  return result.toArray(new String[result.size()]);}  }
class C{  public static final String createFontToken(String font_name,final int font_size){  final String font_token;  final int pointer=font_name.indexOf(',');  if (pointer != -1) {    final String weight=font_name.substring(pointer + 1);    font_name=font_name.substring(0,pointer);    font_token=fb + "face=\"" + font_name+ "\" style=\"font-size:"+ font_size+ "pt;font-style:"+ weight+ "\">";  } else {    font_token=fb + "face=\"" + font_name+ "\" style=\"font-size:"+ font_size+ "pt\">";  }  return font_token;}  }
class C{  public static int measureIndentInSpaces(CharSequence line,int tabWidth){  if (tabWidth < 0 || line == null) {    throw new IllegalArgumentException();  }  int length=0;  int max=line.length();  for (int i=0; i < max; i++) {    char ch=line.charAt(i);    if (ch == '\t') {      length=calculateSpaceEquivalents(tabWidth,length);    } else     if (isIndentChar(ch)) {      length++;    } else {      return length;    }  }  return length;}  }
class C{  protected void retrieveFromListExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String idCampo=request.getParameter("idCampo");  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  CampoDatoVO campoDatoVO=descripcionService.getCampoDato(idCampo);  request.setAttribute("campoDatoVO",campoDatoVO);  setInTemporalSession(request,"fromCampoLista",request.getParameter("fromCampoLista"));  setReturnActionFordward(request,mapping.findForward("retrieveFromList"));}  }
class C{  private void finishIfReady(){  Log.e(LOG_TAG,"finishIfReady " + mInitialSyncComplete + " "+ mPusherRegistrationComplete);  if (mInitialSyncComplete && mPusherRegistrationComplete) {    Log.e(LOG_TAG,"finishIfRead start VectorHomeActivity");    if (!hasCorruptedStore()) {      Intent intent=new Intent(SplashActivity.this,VectorHomeActivity.class);      Bundle receivedBundle=getIntent().getExtras();      if (null != receivedBundle) {        intent.putExtras(receivedBundle);      }      if (intent.hasExtra(VectorUniversalLinkReceiver.EXTRA_UNIVERSAL_LINK_URI)) {        intent.putExtra(VectorHomeActivity.EXTRA_WAITING_VIEW_STATUS,VectorHomeActivity.WAITING_VIEW_START);      }      if (getIntent().hasExtra(VectorHomeActivity.EXTRA_SHARED_INTENT_PARAMS)) {        intent.putExtra(VectorHomeActivity.EXTRA_SHARED_INTENT_PARAMS,getIntent().getParcelableExtra(VectorHomeActivity.EXTRA_SHARED_INTENT_PARAMS));      }      if (getIntent().hasExtra(EXTRA_ROOM_ID) && getIntent().hasExtra(EXTRA_MATRIX_ID)) {        HashMap<String,Object> params=new HashMap<>();        params.put(VectorRoomActivity.EXTRA_MATRIX_ID,getIntent().getStringExtra(EXTRA_MATRIX_ID));        params.put(VectorRoomActivity.EXTRA_ROOM_ID,getIntent().getStringExtra(EXTRA_ROOM_ID));        intent.putExtra(VectorHomeActivity.EXTRA_JUMP_TO_ROOM_PARAMS,params);      }      startActivity(intent);      SplashActivity.this.finish();    } else {      CommonActivityUtils.logout(this);    }  }}  }
class C{  private ElasticSearchConfiguration(InclusionPolicies inclusionPolicies,long initializeUntil,String uri,String port,String keyProperty,boolean retryOnError,int queueCapacity,int reindexBatchSize,boolean executeBulk,String authUser,String authPassword,Mapping mapping){  super(inclusionPolicies,initializeUntil);  this.uri=uri;  this.port=port;  this.keyProperty=keyProperty;  this.retryOnError=retryOnError;  this.queueCapacity=queueCapacity;  this.reindexBatchSize=reindexBatchSize;  this.executeBulk=executeBulk;  this.authUser=authUser;  this.authPassword=authPassword;  this.mapping=mapping;}  }
class C{  public ZookeeperDataTraverser(String sourceZk,String path){  ZkDataNode znode=new ZkDataNode(path);  this.znode=znode;  this.zk=ZKConnectionManager.connectToZookeeper(sourceZk);}  }
class C{  private CMR(){}  }
class C{  public static <E extends Comparable<E>>void heapSort(E[] list){  Heap<E> heap=new Heap<>();  for (int i=0; i < list.length; i++)   heap.add(list[i]);  for (int i=list.length - 1; i >= 0; i--)   list[i]=heap.remove();}  }
class C{  public boolean isSuppressDeclaration(){  return suppressDeclaration;}  }
class C{  public HashCode append(final float[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final float element : array) {      append(element);    }  }  return this;}  }
class C{  public PdfRendererBuilder useUnicodeBidiSplitter(BidiSplitterFactory splitter){  this._splitter=splitter;  return this;}  }
class C{  public String encode(String value) throws EncoderException {  if (value == null) {    return null;  }  return encode(value,getDefaultCharset());}  }
class C{  private static boolean staticRecordTypeCast(AbstractFunctionCallExpression func,ARecordType reqType,ARecordType inputType,IVariableTypeEnvironment env) throws AlgebricksException {  if (!(func.getFunctionIdentifier() == AsterixBuiltinFunctions.OPEN_RECORD_CONSTRUCTOR || func.getFunctionIdentifier() == AsterixBuiltinFunctions.CLOSED_RECORD_CONSTRUCTOR)) {    return false;  }  IAType[] reqFieldTypes=reqType.getFieldTypes();  String[] reqFieldNames=reqType.getFieldNames();  IAType[] inputFieldTypes=inputType.getFieldTypes();  String[] inputFieldNames=inputType.getFieldNames();  int[] fieldPermutation=new int[reqFieldTypes.length];  boolean[] nullFields=new boolean[reqFieldTypes.length];  boolean[] openFields=new boolean[inputFieldTypes.length];  Arrays.fill(nullFields,false);  Arrays.fill(openFields,true);  Arrays.fill(fieldPermutation,-1);  boolean matched=false;  for (int i=0; i < inputFieldNames.length; i++) {    String fieldName=inputFieldNames[i];    IAType fieldType=inputFieldTypes[i];    if (2 * i + 1 > func.getArguments().size()) {      return false;    }    ILogicalExpression arg=func.getArguments().get(2 * i + 1).getValue();    matched=false;    for (int j=0; j < reqFieldNames.length; j++) {      String reqFieldName=reqFieldNames[j];      IAType reqFieldType=reqFieldTypes[j];      if (fieldName.equals(reqFieldName)) {        if (fieldType.equals(reqFieldType)) {          fieldPermutation[j]=i;          openFields[i]=false;          matched=true;          if (arg.getExpressionTag() == LogicalExpressionTag.FUNCTION_CALL) {            ScalarFunctionCallExpression scalarFunc=(ScalarFunctionCallExpression)arg;            rewriteFuncExpr(scalarFunc,reqFieldType,fieldType,env);          }          break;        }        if (NonTaggedFormatUtil.isOptional(reqFieldType)) {          IAType itemType=((AUnionType)reqFieldType).getActualType();          reqFieldType=itemType;          if (fieldType.equals(BuiltinType.AMISSING) || fieldType.equals(itemType)) {            fieldPermutation[j]=i;            openFields[i]=false;            matched=true;            if (arg.getExpressionTag() == LogicalExpressionTag.FUNCTION_CALL) {              ScalarFunctionCallExpression scalarFunc=(ScalarFunctionCallExpression)arg;              rewriteFuncExpr(scalarFunc,reqFieldType,fieldType,env);            }            break;          }        }        if (NonTaggedFormatUtil.isOptional(fieldType)) {          IAType itemType=((AUnionType)fieldType).getActualType();          if (reqFieldType.equals(itemType)) {            fieldPermutation[j]=i;            openFields[i]=false;            matched=true;            ScalarFunctionCallExpression notNullFunc=new ScalarFunctionCallExpression(FunctionUtil.getFunctionInfo(AsterixBuiltinFunctions.CHECK_UNKNOWN));            notNullFunc.getArguments().add(new MutableObject<ILogicalExpression>(arg));            func.getArguments().get(2 * i + 1).setValue(notNullFunc);            break;          }        }        if (arg.getExpressionTag() == LogicalExpressionTag.FUNCTION_CALL) {          ScalarFunctionCallExpression scalarFunc=(ScalarFunctionCallExpression)arg;          rewriteFuncExpr(scalarFunc,reqFieldType,fieldType,env);          fieldPermutation[j]=i;          openFields[i]=false;          matched=true;          break;        }      }    }    if (!matched && !reqType.isOpen()) {      throw new AlgebricksException("static type mismatch: the input record includes an extra closed field " + fieldName + ":"+ fieldType+ "! Please check the field name and type.");    }  }  for (int i=0; i < reqFieldNames.length; i++) {    String reqFieldName=reqFieldNames[i];    IAType reqFieldType=reqFieldTypes[i];    matched=false;    for (int j=0; j < inputFieldNames.length; j++) {      String fieldName=inputFieldNames[j];      IAType fieldType=inputFieldTypes[j];      if (!fieldName.equals(reqFieldName)) {        continue;      }      if (!openFields[j]) {        matched=true;        break;      }      if (!NonTaggedFormatUtil.isOptional(reqFieldType)) {        continue;      }      IAType itemType=((AUnionType)reqFieldType).getActualType();      if (fieldType.equals(BuiltinType.AMISSING) || fieldType.equals(itemType)) {        matched=true;        break;      }    }    if (matched) {      continue;    }    if (NonTaggedFormatUtil.isOptional(reqFieldType)) {      nullFields[i]=true;    } else {      if (inputType.isOpen()) {        return false;      } else {        throw new AlgebricksException("static type mismatch: the input record misses a required closed field " + reqFieldName + ":"+ reqFieldType+ "! Please check the field name and type.");      }    }  }  List<Mutable<ILogicalExpression>> arguments=func.getArguments();  List<Mutable<ILogicalExpression>> originalArguments=new ArrayList<Mutable<ILogicalExpression>>();  originalArguments.addAll(arguments);  arguments.clear();  for (int i=0; i < fieldPermutation.length; i++) {    int pos=fieldPermutation[i];    if (pos >= 0) {      arguments.add(originalArguments.get(2 * pos));      arguments.add(originalArguments.get(2 * pos + 1));    }    if (nullFields[i]) {      arguments.add(new MutableObject<ILogicalExpression>(new ConstantExpression(new AsterixConstantValue(new AString(reqFieldNames[i])))));      arguments.add(new MutableObject<ILogicalExpression>(new ConstantExpression(new AsterixConstantValue(ANull.NULL))));    }  }  for (int i=0; i < openFields.length; i++) {    if (openFields[i]) {      arguments.add(originalArguments.get(2 * i));      Mutable<ILogicalExpression> expRef=originalArguments.get(2 * i + 1);      injectCastToRelaxType(expRef,inputFieldTypes[i],env);      arguments.add(expRef);    }  }  return true;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:06.847 -0500",hash_original_method="2FA07403172C73A0B79A0DF7F37DEBFB",hash_generated_method="292ABABAAF94A2EB587343519213959C") public boolean isInputShutdown(){  return isInputShutdown;}  }
class C{  public static int nextDiscrete(double[] probs){  double sum=0.0;  for (int i=0; i < probs.length; i++)   sum+=probs[i];  double r=MTRandom.nextDouble() * sum;  sum=0.0;  for (int i=0; i < probs.length; i++) {    sum+=probs[i];    if (sum > r)     return i;  }  return probs.length - 1;}  }
class C{  public static Document openDocumentFile(String filePath,Class c){  if (filePath == null) {    String message=Logging.getMessage("nullValue.FileIsNull");    throw new IllegalArgumentException(message);  }  InputStream inputStream=WWIO.openFileOrResourceStream(filePath,c);  return inputStream != null ? openDocumentStream(inputStream) : null;}  }
class C{  public void testParameters() throws Exception {  Similarity sim=getSimilarity("text_params");  assertEquals(IBSimilarity.class,sim.getClass());  IBSimilarity ib=(IBSimilarity)sim;  assertEquals(DistributionLL.class,ib.getDistribution().getClass());  assertEquals(LambdaTTF.class,ib.getLambda().getClass());  assertEquals(NormalizationH3.class,ib.getNormalization().getClass());  NormalizationH3 norm=(NormalizationH3)ib.getNormalization();  assertEquals(900f,norm.getMu(),0.01f);}  }
class C{  public static void wrongParameterNumber(String methodName,String className){  throw new ConversionParameterException(MSG.INSTANCE.message(conversionParameterException,methodName,className));}  }
class C{  public static synchronized String rot13(String input){  StringBuffer output=new StringBuffer();  if (input != null) {    for (int i=0; i < input.length(); i++) {      char inChar=input.charAt(i);      if ((inChar >= 'A') & (inChar <= 'Z')) {        inChar+=13;        if (inChar > 'Z') {          inChar-=26;        }      }      if ((inChar >= 'a') & (inChar <= 'z')) {        inChar+=13;        if (inChar > 'z') {          inChar-=26;        }      }      output.append(inChar);    }  }  return output.toString();}  }
class C{  public String applyFields(final String replaceText,final LogData event){  if (replaceText == null) {    return null;  }  InFixToPostFix.CustomTokenizer tokenizer=new InFixToPostFix.CustomTokenizer(replaceText);  StringBuffer result=new StringBuffer();  boolean found=false;  while (tokenizer.hasMoreTokens()) {    String token=tokenizer.nextToken();    if (isField(token) || token.toUpperCase(Locale.US).startsWith(PROP_FIELD)) {      result.append(getValue(token,event).toString());      found=true;    } else {      result.append(token);    }  }  if (found) {    return result.toString();  }  return null;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  int sourceNode=xctxt.getCurrentNode();  if (m_test.bool(xctxt,sourceNode,this)) {    transformer.executeChildTemplates(this,true);  }}  }
class C{  private void refillEntries(int hash){  for (int count=_size; count >= 0; count--) {    hash=(hash + 1) & _mask;    if (_values[hash] == null)     return;    refillEntry(hash);  }}  }
class C{  @AndroidOnly("The RI doesn't throw the IllegalStateException.") public void test_unwrap_ByteBuffer_ByteBuffer_04(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbd=ByteBuffer.allocate(100);  SSLEngine sse=getEngine(host,port);  try {    sse.unwrap(bbs,bbd);    fail("IllegalStateException wasn't thrown");  } catch (  IllegalStateException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalStateException");  }}  }
class C{  public BufferedRandomAccessFile(final File file,final String mode,final int bufsize) throws IOException {  super(file,mode);  if (!"r".equals(mode)) {    super.close();    throw new IllegalArgumentException("Can only handle read only mode.");  }  if (bufsize < 1) {    super.close();    throw new IllegalArgumentException("Buffer size must be >= 1.");  }  mBuffer=new byte[bufsize];  invalidate();}  }
class C{  protected void saveExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  String path="";  TreeNode node=null;  logger.info("Inicio de saveExecuteLogic");  ActionErrors errores=form.validate(mapping,request);  if ((errores == null) || errores.isEmpty()) {    logger.info("Formulario validado");    DocumentosTreeView treeView=(DocumentosTreeView)getFromTemporalSession(request,DocumentosConstants.DOCUMENT_TREE_KEY);    DocClasificadorVO clasificador=new DocClasificadorVO();    ((ClasificadorForm)form).populate(clasificador);    if (logger.isDebugEnabled())     logger.debug("DocClasificadorVO:\n" + clasificador.toString());    DocTCapturaVO tarea=(DocTCapturaVO)getFromTemporalSession(request,DocumentosConstants.TAREA_KEY);    if (StringUtils.isBlank(clasificador.getId())) {      if (tarea != null) {        ((ClasificadorForm)form).set(getGestionDocumentosElectronicosBI(request).insertClasificadorDesdeTarea(clasificador));      } else {        ((ClasificadorForm)form).set(getGestionDocumentosElectronicosBI(request).insertClasificadorDesdeCuadro(clasificador));      }      if (treeView != null) {        TreeNode parentNode=treeView.getSelectedNode();        if (parentNode != null) {          clasificador.setParent((DocumentosTreeModelItemVO)parentNode.getModelItem());          parentNode.setLeaf(false);        }        node=treeView.insertNode(parentNode,clasificador);        path+=node.getNodePath();      }      popLastInvocation(request);    } else {      if (tarea != null) {        getGestionDocumentosElectronicosBI(request).updateClasificadorDesdeTarea(clasificador);      } else {        getGestionDocumentosElectronicosBI(request).updateClasificadorDesdeCuadro(clasificador);      }      if (treeView != null) {        node=treeView.getSelectedNode();        if (node != null)         path=node.getNodePath();        TreeNode parentNode=treeView.getSelectedNode().getParent();        if (parentNode != null)         clasificador.setParent((DocumentosTreeModelItemVO)parentNode.getModelItem());        TreeNode nodeNuevo=treeView.getNode(node.getNodePath());        nodeNuevo.setTreeModelItem(clasificador);        GestionDocumentosElectronicosBI documentosBI=getGestionDocumentosElectronicosBI(request);        if (documentosBI.tieneDescendientes(clasificador.getTipoObjeto(),clasificador.getIdObjeto(),clasificador.getId()))         nodeNuevo.setLeaf(false);      }    }    updateRelacionRechazada(request);    setReturnActionFordward(request,redirectForwardMethod(request,"/clasificador","method","retrieve" + (clasificador.getId() != null ? "&id=" + clasificador.getId() : "") + (clasificador.getIdObjeto() != null ? "&idObjeto=" + clasificador.getIdObjeto() : "")+ "&tipoObjeto="+ clasificador.getTipoObjeto()+ "&node="+ path+ "&refresh=1"));  } else {    logger.info("Formulario inv\u00E1lido");    obtenerErrores(request,true).add(errores);    setReturnActionFordward(request,mapping.findForward("editar_clasificador"));  }}  }
class C{  public CHM(){  this(DFLT_INITIAL_CAP,DFLT_LOAD_FACTOR,DFLT_CONC_LVL);}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public JavaType constructSpecializedType(JavaType baseType,Class<?> subclass){  if (baseType instanceof SimpleType) {    if (subclass.isArray() || Map.class.isAssignableFrom(subclass) || Collection.class.isAssignableFrom(subclass)) {      if (!baseType.getRawClass().isAssignableFrom(subclass)) {        throw new IllegalArgumentException("Class " + subclass.getClass().getName() + " not subtype of "+ baseType);      }      JavaType subtype=_fromClass(subclass,new TypeBindings(this,baseType.getRawClass()));      Object h=baseType.getValueHandler();      if (h != null) {        subtype=subtype.withValueHandler(h);      }      h=baseType.getTypeHandler();      if (h != null) {        subtype=subtype.withTypeHandler(h);      }      return subtype;    }  }  return baseType.narrowBy(subclass);}  }
class C{  public void addBitmapToCache(String data,BitmapDrawable value){  if (data == null || value == null) {    return;  }  if (mMemoryCache != null) {    if (RecyclingBitmapDrawable.class.isInstance(value)) {      ((RecyclingBitmapDrawable)value).setIsCached(true);    }    mMemoryCache.put(data,value);  }}  }
class C{  public int compareSwappedTo(IntIntPair other){  int fdiff=this.second - other.second;  if (fdiff != 0) {    return fdiff;  }  return this.first - other.first;}  }
class C{  public CachedRowSet createCopySchema() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public static void header(String what,NormalMethod method){  System.out.println("********* START OF:  " + what + "   FOR "+ method);}  }
class C{  private boolean isSingle(List<String> subreddits){  for (  String subreddit : subreddits) {    if (!isSingle(subreddit))     return false;  }  return true;}  }
class C{  public void run(){  final String methodName="run";  MqttToken token=null;  while (running && (in != null)) {    try {      log.fine(CLASS_NAME,methodName,"852");      receiving=in.available() > 0;      MqttWireMessage message=in.readMqttWireMessage();      receiving=false;      if (message instanceof MqttAck) {        token=tokenStore.getToken(message);        if (token != null) {synchronized (token) {            clientState.notifyReceivedAck((MqttAck)message);          }        } else {          throw new MqttException(MqttException.REASON_CODE_UNEXPECTED_ERROR);        }      } else {        clientState.notifyReceivedMsg(message);      }    } catch (    MqttException ex) {      log.fine(CLASS_NAME,methodName,"856",null,ex);      running=false;      clientComms.shutdownConnection(token,ex);    }catch (    IOException ioe) {      log.fine(CLASS_NAME,methodName,"853");      running=false;      if (!clientComms.isDisconnecting()) {        clientComms.shutdownConnection(token,new MqttException(MqttException.REASON_CODE_CONNECTION_LOST,ioe));      }    } finally {      receiving=false;    }  }  log.fine(CLASS_NAME,methodName,"854");}  }
class C{  String tryClangFormat(String code){  Process process=null;  try {    process=Runtime.getRuntime().exec(CLANG_FORMAT);    final OutputStream stdin=process.getOutputStream();    final InputStream stdout=process.getInputStream();    try (BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(stdin,UTF_8))){      writer.write(code);      writer.close();    }     return readStream(stdout);  } catch (  IOException e) {    System.err.println("clang-format has failed to execute: " + e.getMessage());    return code;  } finally {    if (process != null) {      try {        System.err.println(readStream(process.getErrorStream()));      } catch (      @SuppressWarnings("unused") IOException ignored) {      }      process.destroy();    }  }}  }
class C{  @Override public boolean isNullMeasureValue(int ordinal){  return isNullMeasureValue(ordinal,rowMapping[currentRow]);}  }
class C{  @NotNull public AsyncCallbackBuilder<T> success(@NotNull SuccessCallback<T> successCallback){  this.successCallback=successCallback;  return this;}  }
class C{  private void enroll(){  try {    KeyStore keyStore=KeyStore.getInstance("AndroidKeyStore");    keyStore.load(null);    PublicKey publicKey=keyStore.getCertificate(MainActivity.KEY_NAME).getPublicKey();    KeyFactory factory=KeyFactory.getInstance(publicKey.getAlgorithm());    X509EncodedKeySpec spec=new X509EncodedKeySpec(publicKey.getEncoded());    PublicKey verificationKey=factory.generatePublic(spec);    mStoreBackend.enroll("user","password",verificationKey);  } catch (  KeyStoreException|CertificateException|NoSuchAlgorithmException|IOException|InvalidKeySpecException e) {    e.printStackTrace();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.011 -0500",hash_original_method="6342C2CFD6C87CB10ADDB26CDC52A77E",hash_generated_method="6342C2CFD6C87CB10ADDB26CDC52A77E") void addOptionHandler(TelnetOptionHandler opthand) throws InvalidTelnetOptionException {  int optcode=opthand.getOptionCode();  if (TelnetOption.isValidOption(optcode)) {    if (optionHandlers[optcode] == null) {      optionHandlers[optcode]=opthand;      if (isConnected()) {        if (opthand.getInitLocal()) {          try {            _requestWill(optcode);          } catch (          IOException e) {            System.err.println("Exception while initializing option: " + e.getMessage());          }        }        if (opthand.getInitRemote()) {          try {            _requestDo(optcode);          } catch (          IOException e) {            System.err.println("Exception while initializing option: " + e.getMessage());          }        }      }    } else {      throw (new InvalidTelnetOptionException("Already registered option",optcode));    }  } else {    throw (new InvalidTelnetOptionException("Invalid Option Code",optcode));  }}  }
class C{  private JsonToken decodeNumber(char[] chars,int offset,int length){  int i=offset;  int c=chars[i];  if (c == '-') {    c=chars[++i];  }  if (c == '0') {    c=chars[++i];  } else   if (c >= '1' && c <= '9') {    c=chars[++i];    while (c >= '0' && c <= '9') {      c=chars[++i];    }  } else {    return JsonToken.STRING;  }  if (c == '.') {    c=chars[++i];    while (c >= '0' && c <= '9') {      c=chars[++i];    }  }  if (c == 'e' || c == 'E') {    c=chars[++i];    if (c == '+' || c == '-') {      c=chars[++i];    }    if (c >= '0' && c <= '9') {      c=chars[++i];      while (c >= '0' && c <= '9') {        c=chars[++i];      }    } else {      return JsonToken.STRING;    }  }  if (i == offset + length) {    return JsonToken.NUMBER;  } else {    return JsonToken.STRING;  }}  }
class C{  public void writeJPEGImage(File file){  int width=vv.getWidth();  int height=vv.getHeight();  BufferedImage bi=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  Graphics2D graphics=bi.createGraphics();  vv.paint(graphics);  graphics.dispose();  try {    ImageIO.write(bi,"jpeg",file);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  protected void updateUtility(){  for (  Individual individual : population) {    double oldFitness=individual.getFitness();    double newFitness=fitness(individual.getSolution(),idealPoint);    double relativeDecrease=(oldFitness - newFitness) / oldFitness;    if (relativeDecrease > 0.001) {      individual.setUtility(1.0);    } else {      double utility=Math.min(1.0,(0.95 + 0.05 * relativeDecrease / 0.001) * individual.getUtility());      individual.setUtility(utility);    }    individual.setFitness(newFitness);  }}  }
class C{  public BigIntPolynomial mult(BigIntPolynomial poly2){  int N=coeffs.length;  if (poly2.coeffs.length != N) {    throw new IllegalArgumentException("Number of coefficients must be the same");  }  BigIntPolynomial c=multRecursive(poly2);  if (c.coeffs.length > N) {    for (int k=N; k < c.coeffs.length; k++) {      c.coeffs[k - N]=c.coeffs[k - N].add(c.coeffs[k]);    }    c.coeffs=Arrays.copyOf(c.coeffs,N);  }  return c;}  }
class C{  public void clear(){  for (int i=0; i < this.getSeriesCount(); i++) {    this.getSeries(i).clear();  }}  }
class C{  public Map<URI,List<URI>> addTargetVolumeMirrors(){  List<URI> blockMirrors=Lists.newArrayList();  Map<URI,List<URI>> mirrorsMap=new HashMap<>();  URI targetCG=null;  for (  URI volumeId : uris(volumeIds)) {    List<URI> targets=getTargets(volumeId);    for (    URI target : targets) {      if (targetCG == null) {        targetCG=getConsistencyGroup(target);      }      List<URI> mirrors=getMirrors(target);      blockMirrors.addAll(mirrors);      mirrorsMap.put(target,mirrors);    }  }  if (!blockMirrors.isEmpty() && targetCG != null) {    BlockStorageUtils.addVolumesToConsistencyGroup(targetCG,blockMirrors);  }  return mirrorsMap;}  }
class C{  public NameServiceException(String name){  super(name);}  }
class C{  public boolean empty(){  return m_firstFree == 0;}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  public DiscoverRequest(int objectId,int objectInstanceId){  this(new LwM2mPath(objectId,objectInstanceId));}  }
class C{  public String globalInfo(){  return "BestFirst:\n\n" + "Searches the space of attribute subsets by greedy hillclimbing " + "augmented with a backtracking facility. Setting the number of "+ "consecutive non-improving nodes allowed controls the level of "+ "backtracking done. Best first may start with the empty set of "+ "attributes and search forward, or start with the full set of "+ "attributes and search backward, or start at any point and search "+ "in both directions (by considering all possible single attribute "+ "additions and deletions at a given point).\n";}  }
class C{  public Kita(){  super(2,2,3);}  }
class C{  public static int ETIME(){  return Errno.ETIME.intValue();}  }
class C{  private void generateIndexMap(int size){  int mapWidth=((size + 1) / 2) + 1;  int center=(size - 1) / 2;  mGroupDelayedInphaseTapPointIndex=center + 1;  mIndexMap=new int[size][mapWidth];  for (int x=0; x < mapWidth - 1; x++) {    mIndexMap[0][x]=size - 1 - (x * 2);  }  mIndexMap[0][mGroupDelayedInphaseTapPointIndex]=center;  for (int x=1; x < size; x++) {    for (int y=0; y < mapWidth; y++) {      mIndexMap[x][y]=mIndexMap[x - 1][y] + 1;      if (mIndexMap[x][y] >= size) {        mIndexMap[x][y]-=size;      }    }  }}  }
class C{  private String findFirstFrontCameraId(){  Log.d(TAG,"Getting First FRONT Camera");  String cameraId=findFirstCameraIdFacing(CameraCharacteristics.LENS_FACING_FRONT);  if (cameraId == null) {    Log.w(TAG,"No front-facing camera found.");  }  return cameraId;}  }
class C{  public double[] basisFunctions(int span,float u){  final int d1=degree + 1;  double res[]=new double[d1];  double left[]=new double[d1];  double right[]=new double[d1];  res[0]=1;  for (int j=1; j < d1; j++) {    left[j]=u - knots[span + 1 - j];    right[j]=knots[span + j] - u;    double saved=0;    for (int r=0; r < j; r++) {      double tmp=res[r] / (right[r + 1] + left[j - r]);      res[r]=saved + right[r + 1] * tmp;      saved=left[j - r] * tmp;    }    res[j]=saved;  }  return res;}  }
class C{  public void appendLineItemTag(String style){  StringBuilder sb=new StringBuilder("<li");  if (style != null) {    sb.append(" style=\"");    sb.append(style);    sb.append("\"");  }  sb.append(">");  text.append(sb.toString());}  }
class C{  public ShakeAnimation(View view){  this.view=view;  shakeDistance=20;  numOfShakes=2;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public String toString(){  return name;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void checkFieldMaximum(final long value,final long maximum,final String units,final String fieldName,final Boolean humanReadableError){  if (value > maximum) {    if (humanReadableError) {      throw APIException.badRequests.invalidParameterSizeAboveMaximum(fieldName,SizeUtil.humanReadableByteCount(SizeUtil.translateSizeToBytes(value - maximum,units)),SizeUtil.humanReadableByteCount(SizeUtil.translateSizeToBytes(maximum,units)));    } else {      checkFieldMaximum(value,maximum,units,fieldName);    }  }}  }
class C{  public ContextAuthenticationPanel(ExtensionAuthentication extension,Context context){  super(context.getIndex());  this.extension=extension;  initialize();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.909 -0500",hash_original_method="AC187DA6A9C2600FBA62EFD5097D8F4D",hash_generated_method="0D57523B1B110B3F4F960ABB598D0797") public int indexOf(String string){  return getTaintInt();}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  public static void await(Condition cond) throws IgniteInterruptedCheckedException {  try {    cond.await();  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    throw new IgniteInterruptedCheckedException(e);  }}  }
class C{  public String minMetricTipText(){  return "Minimum metric score. Consider only rules with scores higher than " + "this value.";}  }
class C{  public List<Sector> refresh(DrawContext dc,double sectorSize){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (sectorSize < Angle.SECOND.degrees || sectorSize > 180) {    String message=Logging.getMessage("generic.SizeOutOfRange",sectorSize);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (dc.getVisibleSector() == null)   return Collections.emptyList();  this.sectors=new ArrayList<Sector>();  this.sectorSize=sectorSize;  this.swapCylinderLists(dc);  this.tree.traverse(dc.getVisibleSector(),new Context(dc,sectorSize,this.sectors));  Collections.sort(this.sectors);  return this.sectors;}  }
class C{  public double cdf(double x){  return Probability.chiSquare(freedom,x);}  }
class C{  @Override public void notificationOpened(OSNotificationOpenResult openedResult){  Log.w("OneSignalExample","notificationOpened!!!!!!");  DebuggingHelper.printObject(openedResult.action);  DebuggingHelper.printObject(openedResult.notification);}  }
class C{  public void addWaypoint(Coord wp,double speed){  this.coords.add(wp);  this.speeds.add(speed);}  }
class C{  void displayConfirmRemovePolicyEntry(){  JList list=(JList)tw.getComponent(ToolWindow.MW_POLICY_LIST);  int index=list.getSelectedIndex();  PolicyEntry entries[]=tool.getEntry();  Point location=tw.getLocationOnScreen();  setLayout(new GridBagLayout());  JLabel label=new JLabel(PolicyTool.getMessage("Remove.this.Policy.Entry."));  tw.addNewComponent(this,label,CRPE_LABEL1,0,0,2,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.BOTTOM_PADDING);  label=new JLabel(entries[index].codebaseToString());  tw.addNewComponent(this,label,CRPE_LABEL2,0,1,2,1,0.0,0.0,GridBagConstraints.BOTH);  label=new JLabel(entries[index].principalsToString().trim());  tw.addNewComponent(this,label,CRPE_LABEL2 + 1,0,2,2,1,0.0,0.0,GridBagConstraints.BOTH);  Vector<PolicyParser.PermissionEntry> perms=entries[index].getGrantEntry().permissionEntries;  for (int i=0; i < perms.size(); i++) {    PolicyParser.PermissionEntry nextPerm=perms.elementAt(i);    String permString=ToolDialog.PermissionEntryToUserFriendlyString(nextPerm);    label=new JLabel("    " + permString);    if (i == (perms.size() - 1)) {      tw.addNewComponent(this,label,CRPE_LABEL2 + 2 + i,1,3 + i,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.BOTTOM_PADDING);    } else {      tw.addNewComponent(this,label,CRPE_LABEL2 + 2 + i,1,3 + i,1,1,0.0,0.0,GridBagConstraints.BOTH);    }  }  JPanel panel=new JPanel();  panel.setLayout(new GridBagLayout());  JButton okButton=new JButton(PolicyTool.getMessage("OK"));  okButton.addActionListener(new ConfirmRemovePolicyEntryOKButtonListener(tool,tw,this));  tw.addNewComponent(panel,okButton,CRPE_PANEL_OK,0,0,1,1,0.0,0.0,GridBagConstraints.VERTICAL,ToolWindow.LR_PADDING);  JButton cancelButton=new JButton(PolicyTool.getMessage("Cancel"));  ActionListener cancelListener=new CancelButtonListener(this);  cancelButton.addActionListener(cancelListener);  tw.addNewComponent(panel,cancelButton,CRPE_PANEL_CANCEL,1,0,1,1,0.0,0.0,GridBagConstraints.VERTICAL,ToolWindow.LR_PADDING);  tw.addNewComponent(this,panel,CRPE_LABEL2 + 2 + perms.size(),0,3 + perms.size(),2,1,0.0,0.0,GridBagConstraints.VERTICAL,ToolWindow.TOP_BOTTOM_PADDING);  getRootPane().setDefaultButton(okButton);  getRootPane().registerKeyboardAction(cancelListener,escKey,JComponent.WHEN_IN_FOCUSED_WINDOW);  pack();  setLocationRelativeTo(tw);  setVisible(true);}  }
class C{  @Override public void debug(String format,Object arg){  if (logger.isLoggable(Level.FINE)) {    FormattingTuple ft=MessageFormatter.format(format,arg);    log(SELF,Level.FINE,ft.getMessage(),ft.getThrowable());  }}  }
class C{  public DateTimeParser(DateFormat dateFormat){  super(dateFormat);}  }
class C{  public BufferedFileChannel(SageFileChannel fileChannel,boolean direct){  this(fileChannel,DEFAULT_READ_SIZE,DEFAULT_WRITE_SIZE,direct);}  }
class C{  protected synchronized void shutdownStream(){  final OutputStream outputStream=m_outputStream;  m_outputStream=null;  try {    if (null != outputStream) {      if (!(System.out == outputStream && System.err == outputStream)) {        outputStream.close();      }    }  } catch (  final IOException ioe) {    getErrorHandler().error("Error closing OutputStream",ioe,null);  }}  }
class C{  public void addEngineer(String engineerName){  if (engineerName.length() <= 0) {    return;  }  engineers.add(engineerName);  engineersTable.refresh(false);  migrationTask.addEngineers(engineerName);}  }
class C{  public byte[] decrypt(FacesContext context,byte[] securedata){  try {    byte[] macBytes=new byte[macLength];    System.arraycopy(securedata,0,macBytes,0,macBytes.length);    byte[] iv=new byte[ivLength];    System.arraycopy(securedata,macBytes.length,iv,0,iv.length);    byte[] encdata=new byte[securedata.length - macBytes.length - iv.length];    System.arraycopy(securedata,macBytes.length + iv.length,encdata,0,encdata.length);    byte[] rawKey=convertPasswordToKey(getPasswordToSecureState(context));    Mac mac=getMac(rawKey);    mac.update(iv);    mac.update(encdata);    byte[] macBytesCalculated=mac.doFinal();    if (Arrays.equals(macBytes,macBytesCalculated)) {      Cipher cipher=getBlockCipherForDecryption(rawKey,iv);      byte[] plaindata=cipher.doFinal(encdata);      return plaindata;    } else {      if (logger.isLoggable(Level.WARNING)) {        logger.warning("ERROR: MAC did not verify!");      }      return null;    }  } catch (  Exception e) {    if (logger.isLoggable(Level.SEVERE)) {      logger.log(Level.SEVERE,e.getMessage(),e.getCause());    }    throw new RuntimeException(e);  }}  }
class C{  public SynthLookAndFeel(){  factory=new DefaultSynthStyleFactory();  _handler=new Handler();}  }
class C{  public GetItems(int playlistId,String... properties){  super();  addParameterToRequest("playlistid",playlistId);  addParameterToRequest("properties",properties);}  }
class C{  private void appendMultiPolygonTaggedText(MultiPolygon multiPolygon,int level,Writer writer) throws IOException {  appendMultiPolygonText(multiPolygon,level,writer);}  }
class C{  public static Angle computeRowLatitude(int row,Angle delta,Angle origin){  if (delta == null || origin == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (row < 0) {    String msg=Logging.getMessage("generic.RowIndexOutOfRange",row);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (delta.degrees <= 0d) {    String message=Logging.getMessage("generic.DeltaAngleOutOfRange",delta);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double latDegrees=origin.degrees + (row * delta.degrees);  return Angle.fromDegrees(latDegrees);}  }
class C{  public static boolean loadProperties(Properties properties,InputStream propsIn){  try {    properties.load(propsIn);    return true;  } catch (  java.io.IOException e) {    if (logger.isLoggable(Level.FINE)) {      logger.warning("Caught IOException loading properties from InputStream.");    }    return false;  }}  }
class C{  public List<NceConsistRosterEntry> matchingList(String roadName,String roadNumber,String consistNumber,String eng1Address,String eng2Address,String eng3Address,String eng4Address,String eng5Address,String eng6Address,String id){  List<NceConsistRosterEntry> l=new ArrayList<NceConsistRosterEntry>();  for (int i=0; i < numEntries(); i++) {    if (checkEntry(i,roadName,roadNumber,consistNumber,eng1Address,eng2Address,eng3Address,eng4Address,eng5Address,eng6Address,id)) {      l.add(_list.get(i));    }  }  return l;}  }
class C{  public final double[] toArray2(double[] array,int offset){  if (array == null) {    String msg=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return toDoubleArray(array,offset,2);}  }
class C{  public IoBuffer encodeHeader(final RTMP rtmp,final Header header,final Header lastHeader){  final IoBuffer result=IoBuffer.allocate(calculateHeaderSize(rtmp,header,lastHeader));  encodeHeader(rtmp,header,lastHeader,result);  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:28.081 -0500",hash_original_method="3729C161BCA0FC1AAAEBF21C0BD668CD",hash_generated_method="2E490ECF0C5FB204E077B0A60C07CFA0") public static boolean sync(FileOutputStream stream){  try {    if (stream != null) {      stream.getFD().sync();    }    return true;  } catch (  IOException e) {  }  return false;}  }
class C{  private void removeAttackWeakestProfile(){  if (getAIProfiles().containsKey("attack weakest")) {    Map<String,String> profiles=new HashMap<String,String>(getAIProfiles());    profiles.remove("attack weakest");    setAIProfiles(profiles);  } else   if (getAIProfiles().containsKey("strategy")) {    Map<String,String> profiles=new HashMap<String,String>(getAIProfiles());    String desc=profiles.get("strategy");    desc=desc.replace("attack weakest","");    profiles.put("strategy",desc);    setAIProfiles(profiles);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.SCHEDULE_TIME_EVENT__TIME_EVENT:    setTimeEvent((TimeEvent)null);  return;case SexecPackage.SCHEDULE_TIME_EVENT__TIME_VALUE:setTimeValue((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public IStagedResource create(long memoryThresholdInBytes,Object... path){  String filePath=buildFilePath(path);  StagedResource resource=new StagedResource(memoryThresholdInBytes,directory,filePath,this);  this.resourceList.put(filePath,resource);  return resource;}  }
class C{  public static Rect cropRegionForZoom(CameraCharacteristics characteristics,float zoom){  Rect sensor=characteristics.get(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE);  int xCenter=sensor.width() / 2;  int yCenter=sensor.height() / 2;  int xDelta=(int)(0.5f * sensor.width() / zoom);  int yDelta=(int)(0.5f * sensor.height() / zoom);  return new Rect(xCenter - xDelta,yCenter - yDelta,xCenter + xDelta,yCenter + yDelta);}  }
class C{  public SyncMovies(final int hostId,final int movieId,Bundle syncExtras){  this.hostId=hostId;  this.movieId=movieId;  this.syncExtras=syncExtras;}  }
class C{  public void addAccount(Fragment fragment,int result){  fragment.startActivityForResult(createAddAccountIntent(),result);}  }
class C{  public boolean sendRfQ(){  MUser to=MUser.get(getCtx(),getAD_User_ID());  if (to.get_ID() == 0 || to.getEMail() == null || to.getEMail().length() == 0) {    log.log(Level.SEVERE,"No User or no EMail - " + to);    return false;  }  MClient client=MClient.get(getCtx());  String message=m_rfq.getDescription();  if (message == null || message.length() == 0)   message=getHelp(); else   if (m_rfq.getHelp() != null)   message+="\n" + m_rfq.getHelp();  if (message == null)   message=getName();  EMail email=client.createEMail(to.getEMail(),"RfQ: " + getName(),message);  MRole rol=new MRole(getCtx(),Env.getAD_Role_ID(getCtx()),get_TrxName());  if (rol.getSupervisor() != null && rol.getSupervisor().getEMail() != null)   email.addCc(rol.getSupervisor().getEMail());  MUser user=new MUser(getCtx(),Env.getAD_User_ID(getCtx()),get_TrxName());  email.addAttachment(createPDF());  if (user.getEMail() != null && user.getEMailUserPW() != null) {    email.setFrom(user.getEMail());    email.createAuthenticator(user.getEMail(),user.getEMailUserPW());  }  if (EMail.SENT_OK.equals(email.send())) {    setDateInvited(new Timestamp(System.currentTimeMillis()));    save();    return true;  }  return false;}  }
class C{  private static String wildcard(File file){  return file.getAbsolutePath() + File.separatorChar + "*";}  }
class C{  public void draw(GL10 gl,float x,float y,int labelID){  checkState(STATE_DRAWING,STATE_DRAWING);  Label label=mLabels.get(labelID);  gl.glEnable(GL10.GL_TEXTURE_2D);  ((GL11)gl).glTexParameteriv(GL10.GL_TEXTURE_2D,GL11Ext.GL_TEXTURE_CROP_RECT_OES,label.mCrop,0);  ((GL11Ext)gl).glDrawTexiOES((int)x,(int)y,0,(int)label.width,(int)label.height);}  }
class C{  public synchronized void shuffle(){  getCurrentTrack().rewindTo(0);  Collections.shuffle(trackQueue);  client.getDispatcher().dispatch(new ShuffleEvent(this));}  }
class C{  public TableViewerBuilder makeEditable(){  return makeEditable(null,-1);}  }
class C{  void validateIterator(){  refreshIfEmpty();  if (delegate != originalDelegate) {    throw new ConcurrentModificationException();  }}  }
class C{  @Override public boolean isOpaque(SynthContext ctx){  if ("Table.cellRenderer".equals(ctx.getComponent().getName())) {    return true;  }  Boolean opaque=(Boolean)get(ctx,"opaque");  return opaque == null ? false : opaque;}  }
class C{  @SuppressWarnings("unchecked") public static <T>Enumeration<T> emptyEnumeration(){  return (Enumeration<T>)EMPTY_ENUMERATION;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  String prefix;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:employee");  testEmployee=elementList.item(0);  assertNotNull("empEmployeeNotNull",testEmployee);  prefix=testEmployee.getPrefix();  assertEquals("prefix","emp",prefix);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.start_bt:{      this.startActivity(new Intent(this,SingleTaskActivity.class));      break;    }}}  }
class C{  public static Select newSelect(DatabaseManager manager){  return new SelectImpl(manager);}  }
class C{  public synchronized void add(double value){  add(mCategories.size() + "",value);}  }
class C{  public void Advise(Object... exports){  if (exports.length != numExportedVariables) {    return;  }  ConfiguredAdvice[] woven=this.woven.get();  if (woven.length == 0) {    return;  }  for (int j=0; j < woven.length; j++) {    try {      ConfiguredAdvice w=woven[j];      Object[] observed=new Object[w.observedVariableIndices.length];      for (int i=0; i < observed.length; i++) {        observed[i]=exports[w.observedVariableIndices[i]];      }      w.advice.advise(observed);    } catch (    Throwable t) {    }  }}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction tell=new RPAction();  tell.put("type","supportanswer");  tell.put("target",params[0]);  tell.put("text",remainder);  ClientSingletonRepository.getClientFramework().send(tell);  return true;}  }
class C{  int parseMonth(String month,int offset) throws ParseException {  if (month.length() < 3) {    return (parseNumber(month,offset,"month",1,12) - 1) + Calendar.JANUARY;  }  String months[]=getDateFormatSymbols().getMonths();  for (int i=0; i < months.length; i++) {    if (month.equalsIgnoreCase(months[i])) {      return i + Calendar.JANUARY;    }  }  months=getDateFormatSymbols().getShortMonths();  for (int i=0; i < months.length; i++) {    if (month.equalsIgnoreCase(months[i])) {      return i + Calendar.JANUARY;    }  }  return throwInvalid("month",offset);}  }
class C{  public void testGetInstanceString02() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  KeyAgreement keyA;  for (int i=0; i < validValues.length; i++) {    keyA=KeyAgreement.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",keyA.getAlgorithm(),validValues[i]);  }}  }
class C{  public boolean startScanByService(List<UUID> serviceUUIDs){  return false;}  }
class C{  public void visitEnd(){  if (mv != null) {    mv.visitEnd();  }}  }
class C{  public ColorTintFilter(Color mixColor,float mixValue){  if (mixColor == null) {    throw new IllegalArgumentException("mixColor cannot be null");  }  this.mixColor=mixColor;  if (mixValue < 0.0f) {    mixValue=0.0f;  } else   if (mixValue > 1.0f) {    mixValue=1.0f;  }  this.mixValue=mixValue;  int mix_r=(int)(mixColor.getRed() * mixValue);  int mix_g=(int)(mixColor.getGreen() * mixValue);  int mix_b=(int)(mixColor.getBlue() * mixValue);  float factor=1.0f - mixValue;  preMultipliedRed=new int[256];  preMultipliedGreen=new int[256];  preMultipliedBlue=new int[256];  for (int i=0; i < 256; i++) {    int value=(int)(i * factor);    preMultipliedRed[i]=value + mix_r;    preMultipliedGreen[i]=value + mix_g;    preMultipliedBlue[i]=value + mix_b;  }}  }
class C{  public SubqueryExistsExpression(EPStatementObjectModel model){  this.model=model;}  }
class C{  private CanonicalDataSerializableImpl(Random random){  super(random);}  }
class C{  public DAuthorityKeyIdentifier(JDialog parent,PublicKey authorityPublicKey,X500Name authorityCertName,BigInteger authorityCertSerialNumber){  super(parent);  setTitle(res.getString("DAuthorityKeyIdentifier.Title"));  this.authorityPublicKey=authorityPublicKey;  initComponents();  prepopulateWithAuthorityCertDetails(authorityCertName,authorityCertSerialNumber);}  }
class C{  public Time(Date time){  SimpleTimeZone tz=new SimpleTimeZone(0,"Z");  SimpleDateFormat dateF=new SimpleDateFormat("yyyyMMddHHmmss");  dateF.setTimeZone(tz);  String d=dateF.format(time) + "Z";  int year=Integer.parseInt(d.substring(0,4));  if (year < 1950 || year > 2049) {    this.time=new DERGeneralizedTime(d);  } else {    this.time=new DERUTCTime(d.substring(2));  }}  }
class C{  private void distinctEmployees(List<Employee> employees){  Stream<String> employeesNamesStream=employees.stream().map(null);  employeesNamesStream.forEach(null);}  }
class C{  public static String returnError(HttpServletRequest request,HttpServletResponse response){  return "error";}  }
class C{  public static StructuredTranslation fromViterbiDerivation(final Sentence sourceSentence,final HyperGraph hypergraph,final List<FeatureFunction> featureFunctions){  final long startTime=System.currentTimeMillis();  final String translationString=removeSentenceMarkers(getViterbiString(hypergraph));  return new StructuredTranslation(sourceSentence,translationString,extractTranslationTokens(translationString),extractTranslationScore(hypergraph),getViterbiWordAlignmentList(hypergraph),getViterbiFeatures(hypergraph,featureFunctions,sourceSentence).getMap(),(System.currentTimeMillis() - startTime) / 1000.0f);}  }
class C{  public boolean hasProperIntersection(){  return hasProper;}  }
class C{  public Span(Span current,Span savedSpan){  this.begin=current.getBegin();  this.end=current.getEnd();  this.name=current.getName();  this.traceId=current.getTraceId();  this.parents=current.getParents();  this.spanId=current.getSpanId();  this.remote=current.isRemote();  this.exportable=current.isExportable();  this.processId=current.getProcessId();  this.tags=current.tags;  this.logs=current.logs;  this.startNanos=current.startNanos;  this.durationMicros=current.durationMicros;  this.savedSpan=savedSpan;}  }
class C{  public void deleteReference(){  if (decreaseRefCount() == 0) {    T deleted;synchronized (this) {      deleted=mValue;      mValue=null;    }    mResourceReleaser.release(deleted);    removeLiveReference(deleted);  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case mr_A:    return stateVector[0].ordinal() >= State.mr_A.ordinal() && stateVector[0].ordinal() <= State.mr_A_r_X2.ordinal();case mr_A_r_X1:  return stateVector[0] == State.mr_A_r_X1;case mr_A_r_X2:return stateVector[0] == State.mr_A_r_X2;case mr_B:return stateVector[0] == State.mr_B;default :return false;}}  }
class C{  public PcdRunner(GraphSource graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public static WebHttpHandlerBuilder webHandler(WebHandler webHandler){  return new WebHttpHandlerBuilder(webHandler);}  }
class C{  @Override public Object create(String name){  Object o=nameToPrototypeMap.get(name);  if (o == null) {    throw new IllegalArgumentException("Storable name not known to factory: " + name);  }  if (o instanceof Class) {    try {      return ((Class)o).newInstance();    } catch (    Exception e) {      IllegalArgumentException error=new IllegalArgumentException("Storable class not instantiable by factory: " + name);      error.initCause(e);      throw error;    }  } else {    try {      return o.getClass().getMethod("clone",(Class[])null).invoke(o,(Object[])null);    } catch (    Exception e) {      IllegalArgumentException error=new IllegalArgumentException("Storable prototype not cloneable by factory. Name: " + name);      error.initCause(e);      throw error;    }  }}  }
class C{  public void clear(){  root=null;  size=0;}  }
class C{  @Override public void onInsertComplete(int taskId,Object cookie,long insertRowId){}  }
class C{  public void runStrategy(CandleSeries candleSeries,boolean newBar){  try {    CandleItem currentCandleItem=this.getCurrentCandle();    ZonedDateTime startPeriod=currentCandleItem.getPeriod().getStart();    if (!this.isThereOpenPosition()) {      _log.info("No open position so Cancel Strategy Symbol: " + getSymbol() + " Time: "+ startPeriod);      this.cancel();      return;    }    if (this.isThereOpenPosition() && !this.isPositionCovered()) {      Integer quantity=Math.abs(this.getOpenTradePosition().getOpenQuantity());      Money stopPrice=getRiskMultiplerPrice(stopRiskUnits,true,stopAddAmount,true);      Money targetPrice=getRiskMultiplerPrice(targetRiskUnits,true,targetAddAmount,false);      createStopAndTargetOrder(stopPrice,targetPrice,quantity,true);      _log.info("Open position submit Stop/Tgt orders created Symbol: " + getSymbol() + " Time:"+ startPeriod+ " quantity: "+ quantity+ " targetPrice: "+ targetPrice+ " stopPrice: "+ stopPrice);    }    if (startPeriod.isBefore(this.getTradestrategy().getTradingday().getClose().minusHours(30)) && startPeriod.isAfter(this.getTradestrategy().getTradingday().getOpen().plusMinutes(5))) {      CandleItem firstCandle=this.getCandle(TradingCalendar.getDateAtTime(startPeriod,this.getTradestrategy().getTradingday().getOpen()));      if (Side.BOT.equals(getOpenTradePosition().getSide())) {        if (currentCandleItem.getVwap() < firstCandle.getVwap()) {          Money stopPrice=addPennyAndRoundStop(this.getOpenPositionOrder().getAverageFilledPrice().doubleValue(),getOpenTradePosition().getSide(),Action.SELL,0.01);          moveStopOCAPrice(stopPrice,true);          _log.info("Move Stop to b.e. Strategy Mgr Symbol: " + getSymbol() + " Time:"+ startPeriod+ " Price: "+ stopPrice+ " first bar Vwap: "+ firstCandle.getVwap()+ " Curr Vwap: "+ currentCandleItem.getVwap());        }      } else {        if (currentCandleItem.getVwap() > firstCandle.getVwap()) {          Money stopPrice=addPennyAndRoundStop(this.getOpenPositionOrder().getAverageFilledPrice().doubleValue(),getOpenTradePosition().getSide(),Action.BUY,0.01);          moveStopOCAPrice(stopPrice,true);          _log.info("Move Stop to b.e. Strategy Mgr Symbol: " + getSymbol() + " Time:"+ startPeriod+ " Price: "+ stopPrice+ " first bar Vwap: "+ firstCandle.getVwap()+ " Curr Vwap: "+ currentCandleItem.getVwap());        }      }    }    if (startPeriod.equals(this.getTradestrategy().getTradingday().getClose().minusMinutes(30)) && newBar) {      double avgFillPrice=(Math.abs(this.getOpenTradePosition().getTotalNetValue().doubleValue()) / Math.abs(this.getOpenTradePosition().getOpenQuantity()));      String action=Action.SELL;      if (Side.SLD.equals(getOpenTradePosition().getSide()))       action=Action.BUY;      if (getCurrentCandleCount() > 0) {        CandleItem prevCandleItem=(CandleItem)candleSeries.getDataItem(getCurrentCandleCount() - 1);        if (Action.SELL.equals(action)) {          if (avgFillPrice < prevCandleItem.getLow())           avgFillPrice=prevCandleItem.getLow();        } else {          if (avgFillPrice > prevCandleItem.getHigh())           avgFillPrice=prevCandleItem.getHigh();        }      }      Money stopPrice=addPennyAndRoundStop(avgFillPrice,getOpenTradePosition().getSide(),action,0.01);      moveStopOCAPrice(stopPrice,true);      _log.info("Rule move stop to b.e or prev bars H/L Symbol: " + getSymbol() + " Time: "+ startPeriod+ " stopPrice: "+ stopPrice+ " Side: "+ this.getOpenTradePosition().getSide());    }    if (newBar) {      Money target2RPrice=getRiskMultiplerPrice(_hiekinAshiTrailStartR,true,targetAddAmount,false);      if ((target2RPrice.isLessThan(new Money(currentCandleItem.getClose())) && Side.BOT.equals(this.getOpenTradePosition().getSide())) || (target2RPrice.isGreaterThan(new Money(currentCandleItem.getClose())) && Side.SLD.equals(this.getOpenTradePosition().getSide()))) {        Money newStop=getHiekinAshiTrailStop(this.getStopPriceMinUnfilled(),2);        if (!newStop.equals(this.getStopPriceMinUnfilled())) {          moveStopOCAPrice(newStop,true);          _log.info("Hiekin-AshiTrail: " + getSymbol() + " Trail Price: "+ newStop+ " Time: "+ startPeriod+ " Side: "+ this.getOpenTradePosition().getSide());        }      }    }    if (!currentCandleItem.getLastUpdateDate().isBefore(this.getTradestrategy().getTradingday().getClose().minusMinutes(2))) {      cancelOrdersClosePosition(true);      _log.info("Close position 2min before close Symbol: " + getSymbol() + " Time: "+ startPeriod);      this.cancel();    }  } catch (  StrategyRuleException ex) {    _log.error("Error Position Manager exception: " + ex.getMessage(),ex);    error(1,40,"Error Position Manager exception: " + ex.getLocalizedMessage());  }}  }
class C{  public long coordinatorSinceTimestamp(){  return crdSinceTs.get();}  }
class C{  public ExperimentalTextSimilarityScore_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  public CommitComment createCommitComment(Integer projectId,String sha,String note,String path,String line,String line_type) throws IOException {  Query query=new Query().append("id",projectId.toString()).appendIf("sha",sha).appendIf("note",note).appendIf("path",path).appendIf("line",line);  String tailUrl=GitlabProject.URL + "/" + sanitizeProjectId(projectId)+ "/repository/commits/"+ sha+ CommitComment.URL+ query.toString();  return dispatch().to(tailUrl,CommitComment.class);}  }
class C{  protected void lookAheadInGoodDirectionsSearch(BayesNet bayesNet,Instances instances,int nrOfLookAheadSteps,int nrOfGoodOperations) throws Exception {  System.out.println("Initializing Cache");  initCache(bayesNet,instances);  while (nrOfLookAheadSteps > 1) {    System.out.println("Look Ahead Depth: " + nrOfLookAheadSteps);    boolean legalSequence=true;    double sequenceDeltaScore=0;    Operation[] bestOperation=new Operation[nrOfLookAheadSteps];    bestOperation=getOptimalOperations(bayesNet,instances,nrOfLookAheadSteps,nrOfGoodOperations);    for (int i=0; i < nrOfLookAheadSteps; i++) {      if (bestOperation[i] == null) {        legalSequence=false;      } else {        sequenceDeltaScore+=bestOperation[i].m_fDeltaScore;      }    }    while (legalSequence && sequenceDeltaScore > 0) {      System.out.println("Next Iteration..........................");      for (int i=0; i < nrOfLookAheadSteps; i++) {        performOperation(bayesNet,instances,bestOperation[i]);      }      bestOperation=getOptimalOperations(bayesNet,instances,nrOfLookAheadSteps,nrOfGoodOperations);      sequenceDeltaScore=0;      for (int i=0; i < nrOfLookAheadSteps; i++) {        if (bestOperation[i] != null) {          System.out.println(bestOperation[i].m_nOperation + " " + bestOperation[i].m_nHead+ " "+ bestOperation[i].m_nTail);          sequenceDeltaScore+=bestOperation[i].m_fDeltaScore;        } else {          legalSequence=false;        }        System.out.println("DeltaScore: " + sequenceDeltaScore);      }    }    --nrOfLookAheadSteps;  }  Operation oOperation=getOptimalOperation(bayesNet,instances);  while ((oOperation != null) && (oOperation.m_fDeltaScore > 0)) {    performOperation(bayesNet,instances,oOperation);    System.out.println("Performing last greedy steps");    oOperation=getOptimalOperation(bayesNet,instances);  }  m_Cache=null;}  }
class C{  public SpannableBuilder append(String text){  lastAddedOffset=sb.length();  sb.append(text);  return this;}  }
class C{  public boolean isLocal(){  return isLocal;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  String attrName;  String attrValue;  doc=(Document)load("staff",true);  element=doc.createElementNS("http://www.w3.org/DOM","dom:elem");  element.setAttributeNS("http://www.w3.org/DOM/Test/setAttributeNS","attr","value");  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Test/setAttributeNS","attr");  attrName=attribute.getNodeName();  attrValue=attribute.getNodeValue();  assertEquals("elementsetattributens01_attrName","attr",attrName);  assertEquals("elementsetattributens01_attrValue","value",attrValue);}  }
class C{  public static long countApproximateMemoryUsage(Object... o){  try {    final IdentityHashSet<Object> identityHashSet=new IdentityHashSet<Object>();    long sum=0;    for (    Object obj : o) {      sum+=countApproximateMemoryUsage(obj,identityHashSet);    }    return sum;  } catch (  IllegalArgumentException e) {    throw new RuntimeException(e);  }catch (  IllegalAccessException e) {    throw new RuntimeException(e);  }}  }
class C{  public void labelDistances(Hypergraph<V,E> graph,Set<V> rootSet){  initialize(graph,rootSet);  int distance=1;  while (true) {    List<V> newList=new ArrayList<V>();    for (    V currentVertex : mCurrentList) {      if (graph.containsVertex(currentVertex)) {        for (        V next : graph.getSuccessors(currentVertex)) {          visitNewVertex(currentVertex,next,distance,newList);        }      }    }    if (newList.size() == 0)     break;    mCurrentList=newList;    distance++;  }  for (  V v : mUnvisitedVertices) {    distanceDecorator.put(v,new Integer(-1));  }}  }
class C{  private void calcMean(){  ArffSortedTableModel model;  int i;  double mean;  if (m_CurrentCol == -1) {    return;  }  model=(ArffSortedTableModel)m_TableArff.getModel();  if (!model.getAttributeAt(m_CurrentCol).isNumeric()) {    return;  }  mean=0;  for (i=0; i < model.getRowCount(); i++) {    mean+=model.getInstances().instance(i).value(m_CurrentCol - 1);  }  mean=mean / model.getRowCount();  ComponentHelper.showMessageBox(getParent(),"Mean for attribute...","Mean for attribute '" + m_TableArff.getPlainColumnName(m_CurrentCol) + "':\n\t"+ Utils.doubleToString(mean,3),JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);}  }
class C{  public void showErrorNotification(final int errorCode,final Context context){  GoogleApiAvailability.getInstance().showErrorNotification(context,errorCode);}  }
class C{  public NetscapeCertTypeExtension(boolean[] bitString) throws IOException {  this.bitString=bitString;  this.extensionId=NetscapeCertType_Id;  this.critical=true;  encodeThis();}  }
class C{  @Nullable private static String tryFindMagicLiteralString(@NotNull final PsiElement element,final boolean obtainValue){  if (element instanceof PyStringLiteralExpression) {    final PyMagicLiteralExtensionPoint point=PyMagicLiteralTools.getPoint((PyStringLiteralExpression)element);    if (point != null) {      if (obtainValue) {        return ((StringLiteralExpression)element).getStringValue();      } else {        return point.getLiteralType();      }    }  }  return null;}  }
class C{  private static void checkNotMultiple(ElementMetadata<?,?> meta){  if (meta != null && meta.getCardinality() != Cardinality.SINGLE) {    throw new IllegalStateException("Metadata for key " + meta.getKey() + " represents a multiple-cardinality element."+ " The path cannot contain more than one multiple-cardinality"+ " element.");  }}  }
class C{  public void write(final int c) throws IOException {  if (count >= BYTES_MAX)   flushBuffer();  if (c < 0x80) {    m_outputBytes[count++]=(byte)(c);  } else   if (c < 0x800) {    m_outputBytes[count++]=(byte)(0xc0 + (c >> 6));    m_outputBytes[count++]=(byte)(0x80 + (c & 0x3f));  } else   if (c < 0x10000) {    m_outputBytes[count++]=(byte)(0xe0 + (c >> 12));    m_outputBytes[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));    m_outputBytes[count++]=(byte)(0x80 + (c & 0x3f));  } else {    m_outputBytes[count++]=(byte)(0xf0 + (c >> 18));    m_outputBytes[count++]=(byte)(0x80 + ((c >> 12) & 0x3f));    m_outputBytes[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));    m_outputBytes[count++]=(byte)(0x80 + (c & 0x3f));  }}  }
class C{  private PriceModel createPriceModel(Product product) throws Exception {  PriceModel priceModel=new PriceModel();  priceModel.setType(PriceModelType.FREE_OF_CHARGE);  priceModel.setProduct(product);  mgr.persist(priceModel);  mgr.flush();  return priceModel;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  public static <V extends SampledVertex>Set<V> createSampledPartition(Collection<V> vertices){  Set<V> partition=new HashSet<V>();  for (  V vertex : vertices) {    if (vertex.isSampled())     partition.add(vertex);  }  return partition;}  }
class C{  public boolean isNumbered(){  return numbered;}  }
class C{  @Override public void deleteOneToOneChat(ContactId contact){  mImService.tryToDeleteOneToOneChat(contact);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void process(final Task<Diff> task) throws ConfigurationException, IOException, SQLConsumerException {  long startTime=System.currentTimeMillis();  TaskTypes type=task.getTaskType();  if (type == TaskTypes.TASK_FULL || type == TaskTypes.TASK_PARTIAL_FIRST) {    this.sqlEncoder.init();    this.processingTimeSQL=0;  }  super.process(task);  this.processingTimeSQL+=System.currentTimeMillis() - startTime;  if (type == TaskTypes.TASK_FULL || type == TaskTypes.TASK_PARTIAL_LAST) {    ArticleInformation info=task.getHeader();    info.setEncodedSize(this.sqlEncoder.getEncodedSize());    info.setEncodedSQLSize(this.sqlEncoder.getEncodedSQLSize());    info.setExitingTime(System.currentTimeMillis());    info.setProcessingTimeSQL(processingTimeSQL);    String succesReport=info.toString();    this.outputLogger.logMessage(Level.INFO,"\r\n" + succesReport);  }}  }
class C{  @Override public void paintChildren(Graphics g){  if (npBackground == null)   npBackground=NPIconFactory.getInstance().getToastBg();  if (npBackground != null)   npBackground.draw((Graphics2D)g,0,0,this.getWidth(),this.getHeight());  super.paintChildren(g);}  }
class C{  public static IJavaElement create(IFile file,IJavaProject project){  if (file == null) {    return null;  }  if (project == null) {    project=JavaCore.create(file.getProject());  }  if (file.getFileExtension() != null) {    String name=file.getName();    if (Util.isJavaLikeFileName(name))     return createCompilationUnitFrom(file,project);    if (org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(name))     return createClassFileFrom(file,project);    return createJarPackageFragmentRootFrom(file,project);  }  return null;}  }
class C{  private void addBreakpoints(final Set<BreakpointAddress> addresses,final BreakpointStatus status,final BreakpointStorage storage,final BreakpointType type){  Preconditions.checkNotNull(addresses,"IE00718: addresses argument can not be null");  Preconditions.checkNotNull(status,"IE00719: status argument can not be null");  Preconditions.checkNotNull(storage,"IE00720: storage argument can not be null");  Preconditions.checkNotNull(type,"IE00721: type argument can not be null");  if (addresses.size() == 0) {    return;  }  final List<Breakpoint> breakpoints=new ArrayList<>();  for (  final BreakpointAddress address : addresses) {    final Breakpoint breakpoint=new Breakpoint(type,address);    storage.add(breakpoint,status);    breakpoints.add(breakpoint);  }  for (  final BreakpointManagerListener listener : listeners) {    try {      listener.breakpointsAdded(breakpoints);    } catch (    final Exception e) {      CUtilityFunctions.logException(e);    }  }}  }
class C{  protected Object reportReturn(String methodCall,Object value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  public char charAt(int offset) throws BadLocationException {  return ((RGapContent)getContent()).charAt(offset);}  }
class C{  public Coords(){  this(0,0);}  }
class C{  public void init(DSAParameterGenerationParameters params){  this.use186_3=true;  this.L=params.getL();  this.N=params.getN();  this.certainty=params.getCertainty();  this.random=params.getRandom();  this.usageIndex=params.getUsageIndex();  if ((L < 1024 || L > 3072) || L % 1024 != 0) {    throw new IllegalArgumentException("L values must be between 1024 and 3072 and a multiple of 1024");  } else   if (L == 1024 && N != 160) {    throw new IllegalArgumentException("N must be 160 for L = 1024");  } else   if (L == 2048 && (N != 224 && N != 256)) {    throw new IllegalArgumentException("N must be 224 or 256 for L = 2048");  } else   if (L == 3072 && N != 256) {    throw new IllegalArgumentException("N must be 256 for L = 3072");  }  if (digest.getDigestSize() * 8 < N) {    throw new IllegalStateException("Digest output size too small for value of N");  }}  }
class C{  public void accept(String key,String val,Integer arg) throws ConfigurationException {}  }
class C{  @Override public String toString(){  return expressionStr;}  }
class C{  @ReactMethod public void measure(int reactTag,Callback callback){  mUIImplementation.measure(reactTag,callback);}  }
class C{  public PeerAddress(InetAddress addr,int port){  this(addr,port,NetworkParameters.PROTOCOL_VERSION);}  }
class C{  @LargeTest public void testMobileDownload() throws Exception {  assertTrue("Do not have mobile data!",hasMobileData());  downloadFile();}  }
class C{  public ConsulTopologyFraction url(URL url){  this.url=url;  return this;}  }
class C{  @SuppressWarnings("InfiniteLoopStatement") @Override public void run(){  try {    while (true) {      try {        cleanUp(queue.remove());      } catch (      InterruptedException e) {      }    }  } catch (  ShutDown shutDown) {  }}  }
class C{  public T caseTypeVariable(TypeVariable object){  return null;}  }
class C{  public static boolean isURLEncoded(String data){  boolean flag=true;  if (!regex_contains("([^\\x00-\\x7F])",data)) {    try {      String tmp=URLDecoder.decode(data,"ASCII");      if (tmp.equals(data)) {        return false;      }    } catch (    UnsupportedEncodingException ex) {      flag=false;    }  } else {    flag=false;  }  String pattern="(%[a-zA-Z0-9]{2})";  return (flag && regex_contains(pattern,data));}  }
class C{  private BlockConsistencyGroup createBareBlockConsistencyGroup(String name){  BlockConsistencyGroup cg=new BlockConsistencyGroup();  URI cgURI=URIUtil.createId(BlockConsistencyGroup.class);  emptyCgURI=cgURI;  cg.setId(cgURI);  cg.setLabel(name);  _dbClient.createObject(cg);  return cg;}  }
class C{  public OFMatch(){  this.wildcards=OFPFW_ALL;  this.dataLayerDestination=new byte[]{0x0,0x0,0x0,0x0,0x0,0x0};  this.dataLayerSource=new byte[]{0x0,0x0,0x0,0x0,0x0,0x0};  this.dataLayerVirtualLan=Ethernet.VLAN_UNTAGGED;  this.dataLayerVirtualLanPriorityCodePoint=0;  this.dataLayerType=0;  this.inputPort=0;  this.networkProtocol=0;  this.networkTypeOfService=0;  this.networkSource=0;  this.networkDestination=0;  this.transportDestination=0;  this.transportSource=0;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public void addEventType(String eventTypeName,String eventClass,ConfigurationEventTypeLegacy legacyEventTypeDesc){  eventClasses.put(eventTypeName,eventClass);  eventTypesLegacy.put(eventTypeName,legacyEventTypeDesc);}  }
class C{  public void testClearBitPositiveInside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=17;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static void addNeededHiddenField(FacesContext context,String clientId){  Map map=getHiddenFieldMap(context,true);  if (!map.containsKey(clientId)) {    map.put(clientId,Boolean.TRUE);  }}  }
class C{  public boolean isAlreadyProcessed(){  return alreadyProcessed;}  }
class C{  protected void addResource(List defaults,String bundleName){  ResourceBundle bundle=ResourceBundle.getBundle(bundleName);  for (Enumeration keys=bundle.getKeys(); keys.hasMoreElements(); ) {    String key=(String)keys.nextElement();    defaults.add(key);    defaults.add(bundle.getObject(key));  }}  }
class C{  protected void write(DataOutputStream stream) throws Exception {  stream.writeInt(data.length);  stream.write(data,0,data.length);}  }
class C{  public nobr addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void removeInstanceFromRefSet(PhantomLiveRef phantom){  assert Thread.holdsLock(EndpointEntry.this);  assert refSet.contains(phantom);  refSet.remove(phantom);}  }
class C{  public FileSendPacket send(File file){  return send(file,null);}  }
class C{  private boolean validateProduct(MProduct product){  if (!product.isBOM())   return false;  log.config(product.getName());  foundproducts.add(product);  MPPProductBOMLine[] productsBOMs=MPPProductBOMLine.getBOMLines(product);  boolean containsinvalid=false;  boolean invalid=false;  for (int i=0; i < productsBOMs.length; i++) {    MPPProductBOMLine productsBOM=productsBOMs[i];    MProduct pp=new MProduct(getCtx(),productsBOM.getM_Product_ID(),get_TrxName());    if (!pp.isBOM())     log.finer(pp.getName()); else {      if (validproducts.contains(pp)) {      }      if (invalidproducts.contains(pp)) {        containsinvalid=true;      } else       if (foundproducts.contains(pp)) {        invalid=true;        addLog(0,null,null,product.getValue() + " recursively contains " + pp.getValue());      } else {        if (!validateProduct(pp)) {          containsinvalid=true;        }      }    }  }  checkedproducts.add(product);  foundproducts.remove(product);  if (invalid) {    invalidproducts.add(product);    product.setIsVerified(false);    product.save();    return false;  } else   if (containsinvalid) {    containinvalidproducts.add(product);    product.setIsVerified(false);    product.save();    return false;  } else {    validproducts.add(product);    product.setIsVerified(true);    product.save();    return true;  }}  }
class C{  public static UUID mojangUuidToJavaUuid(String id){  Preconditions.checkNotNull(id,"id");  Preconditions.checkArgument(id.matches("^[a-z0-9]{32}"),"Not a valid Mojang UUID.");  return UUID.fromString(id.substring(0,8) + "-" + id.substring(8,12)+ "-"+ id.substring(12,16)+ "-"+ id.substring(16,20)+ "-"+ id.substring(20,32));}  }
class C{  public void incrShortFor(Quaternion other){  double cosom=this.dotProduct(other);  if (cosom < 0) {    incrScale(-1);  }}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  m_ReplaceMissingValues.input(instance);  instance=m_ReplaceMissingValues.output();  m_AttFilter.input(instance);  instance=m_AttFilter.output();  m_NominalToBinary.input(instance);  instance=m_NominalToBinary.output();  double[] instDat=new double[m_NumPredictors + 1];  int j=1;  instDat[0]=1;  for (int k=0; k <= m_NumPredictors; k++) {    if (k != m_ClassIndex) {      instDat[j++]=instance.value(k);    }  }  double[] distribution=evaluateProbability(instDat);  return distribution;}  }
class C{  private Operand bypassMoves(Operand op){  if (!op.isRegister())   return op;  Register r=op.asRegister().getRegister();  Instruction def=r.getFirstDef();  if (def == null) {    return op;  }  if (r.isPhysical()) {    return op;  }  if (Move.conforms(def)) {    return op;  } else   if (def.operator() == PI) {    return bypassMoves(GuardedUnary.getVal(def));  } else {    return op;  }}  }
class C{  @ObjectiveCName("formatNotificationText:") public String formatNotificationText(Notification pendingNotification){  return formatContentText(pendingNotification.getSender(),pendingNotification.getContentDescription().getContentType(),pendingNotification.getContentDescription().getText(),pendingNotification.getContentDescription().getRelatedUser(),pendingNotification.isChannel());}  }
class C{  public void test_getBitsFromByteArray_correctRejection_off_and_len_02(){  BytesUtil.getBits(new byte[1],0,0);  try {    BytesUtil.getBits(new byte[1],0,-1);    fail("Expecting: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }}  }
class C{  public ConcurrentSet(int size){  this.map=new ConcurrentHashMap<>(size);}  }
class C{  public DefaultRunOptions withScriptFiles(List<String> scriptFiles){  this.scriptFiles=scriptFiles;  return this;}  }
class C{  public IndicesAliasesClusterStateUpdateRequest actions(AliasAction[] actions){  this.actions=actions;  return this;}  }
class C{  synchronized public void loadDefaultFavoritesIfNecessary(){  SharedPreferences sp=Utilities.getPrefs(getContext());  if (sp.getBoolean(EMPTY_DATABASE_CREATED,false)) {    Log.d(TAG,"loading default workspace");    AutoInstallsLayout loader=createWorkspaceLoaderFromAppRestriction();    if (loader == null) {      loader=AutoInstallsLayout.get(getContext(),mOpenHelper.mAppWidgetHost,mOpenHelper);    }    if (loader == null) {      final Partner partner=Partner.get(getContext().getPackageManager());      if (partner != null && partner.hasDefaultLayout()) {        final Resources partnerRes=partner.getResources();        int workspaceResId=partnerRes.getIdentifier(Partner.RES_DEFAULT_LAYOUT,"xml",partner.getPackageName());        if (workspaceResId != 0) {          loader=new DefaultLayoutParser(getContext(),mOpenHelper.mAppWidgetHost,mOpenHelper,partnerRes,workspaceResId);        }      }    }    final boolean usingExternallyProvidedLayout=loader != null;    if (loader == null) {      loader=getDefaultLayoutParser();    }    createEmptyDB();    if ((mOpenHelper.loadFavorites(mOpenHelper.getWritableDatabase(),loader) <= 0) && usingExternallyProvidedLayout) {      createEmptyDB();      mOpenHelper.loadFavorites(mOpenHelper.getWritableDatabase(),getDefaultLayoutParser());    }    clearFlagEmptyDbCreated();  }}  }
class C{  private static String hexDigest(byte[] bArr){  StringBuilder sb=new StringBuilder();  for (  byte aBArr : bArr) {    int unsigned=aBArr & 0xff;    if (unsigned < 0x10)     sb.append("0");    sb.append(Integer.toHexString((unsigned)));  }  return sb.toString();}  }
class C{  public EdgeEffect(Context context){  final Resources res=context.getResources();  mEdge=res.getDrawable(R.drawable.overscroll_edge);  mGlow=res.getDrawable(R.drawable.overscroll_glow);  mEdgeHeight=mEdge.getIntrinsicHeight();  mGlowHeight=mGlow.getIntrinsicHeight();  mGlowWidth=mGlow.getIntrinsicWidth();  mMaxEffectHeight=(int)(Math.min(mGlowHeight * MAX_GLOW_HEIGHT * mGlowHeight / mGlowWidth * 0.6f,mGlowHeight * MAX_GLOW_HEIGHT) + 0.5f);  mMinWidth=(int)(res.getDisplayMetrics().density * MIN_WIDTH + 0.5f);  mInterpolator=new DecelerateInterpolator();}  }
class C{  public void addRow(Assignment condition,boolean head,double prob){  addRow(condition,ValueFactory.create(head),prob);}  }
class C{  int findSlab(long addr){  return this.freeList.findSlab(addr);}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case GamlPackage.ENTRY:    return createEntry();case GamlPackage.STANDALONE_BLOCK:  return createStandaloneBlock();case GamlPackage.STRING_EVALUATOR:return createStringEvaluator();case GamlPackage.MODEL:return createModel();case GamlPackage.BLOCK:return createBlock();case GamlPackage.IMPORT:return createImport();case GamlPackage.PRAGMA:return createPragma();case GamlPackage.STATEMENT:return createStatement();case GamlPackage.SGLOBAL:return createS_Global();case GamlPackage.SSPECIES:return createS_Species();case GamlPackage.SEXPERIMENT:return createS_Experiment();case GamlPackage.SDO:return createS_Do();case GamlPackage.SLOOP:return createS_Loop();case GamlPackage.SIF:return createS_If();case GamlPackage.SOTHER:return createS_Other();case GamlPackage.SRETURN:return createS_Return();case GamlPackage.SDECLARATION:return createS_Declaration();case GamlPackage.SREFLEX:return createS_Reflex();case GamlPackage.SDEFINITION:return createS_Definition();case GamlPackage.SASSIGNMENT:return createS_Assignment();case GamlPackage.SDIRECT_ASSIGNMENT:return createS_DirectAssignment();case GamlPackage.SSET:return createS_Set();case GamlPackage.SEQUATIONS:return createS_Equations();case GamlPackage.SSOLVE:return createS_Solve();case GamlPackage.SDISPLAY:return createS_Display();case GamlPackage.SPECIES_OR_GRID_DISPLAY_STATEMENT:return createspeciesOrGridDisplayStatement();case GamlPackage.PARAMETERS:return createParameters();case GamlPackage.ACTION_ARGUMENTS:return createActionArguments();case GamlPackage.ARGUMENT_DEFINITION:return createArgumentDefinition();case GamlPackage.FACET:return createFacet();case GamlPackage.EXPRESSION:return createExpression();case GamlPackage.ARGUMENT_PAIR:return createArgumentPair();case GamlPackage.FUNCTION:return createFunction();case GamlPackage.EXPRESSION_LIST:return createExpressionList();case GamlPackage.VARIABLE_REF:return createVariableRef();case GamlPackage.TYPE_INFO:return createTypeInfo();case GamlPackage.GAML_DEFINITION:return createGamlDefinition();case GamlPackage.EQUATION_DEFINITION:return createEquationDefinition();case GamlPackage.TYPE_DEFINITION:return createTypeDefinition();case GamlPackage.VAR_DEFINITION:return createVarDefinition();case GamlPackage.ACTION_DEFINITION:return createActionDefinition();case GamlPackage.UNIT_FAKE_DEFINITION:return createUnitFakeDefinition();case GamlPackage.TYPE_FAKE_DEFINITION:return createTypeFakeDefinition();case GamlPackage.ACTION_FAKE_DEFINITION:return createActionFakeDefinition();case GamlPackage.SKILL_FAKE_DEFINITION:return createSkillFakeDefinition();case GamlPackage.VAR_FAKE_DEFINITION:return createVarFakeDefinition();case GamlPackage.EQUATION_FAKE_DEFINITION:return createEquationFakeDefinition();case GamlPackage.TERMINAL_EXPRESSION:return createTerminalExpression();case GamlPackage.SACTION:return createS_Action();case GamlPackage.SVAR:return createS_Var();case GamlPackage.PAIR:return createPair();case GamlPackage.IF:return createIf();case GamlPackage.CAST:return createCast();case GamlPackage.BINARY:return createBinary();case GamlPackage.UNIT:return createUnit();case GamlPackage.UNARY:return createUnary();case GamlPackage.ACCESS:return createAccess();case GamlPackage.ARRAY:return createArray();case GamlPackage.POINT:return createPoint();case GamlPackage.PARAMETER:return createParameter();case GamlPackage.UNIT_NAME:return createUnitName();case GamlPackage.TYPE_REF:return createTypeRef();case GamlPackage.SKILL_REF:return createSkillRef();case GamlPackage.ACTION_REF:return createActionRef();case GamlPackage.EQUATION_REF:return createEquationRef();case GamlPackage.INT_LITERAL:return createIntLiteral();case GamlPackage.DOUBLE_LITERAL:return createDoubleLiteral();case GamlPackage.COLOR_LITERAL:return createColorLiteral();case GamlPackage.STRING_LITERAL:return createStringLiteral();case GamlPackage.BOOLEAN_LITERAL:return createBooleanLiteral();case GamlPackage.RESERVED_LITERAL:return createReservedLiteral();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  @Override public void channelChanged(ChannelEvent event){  if (event.getChannel().getChannelType() == ChannelType.STANDARD) {switch (event.getEvent()) {case NOTIFICATION_ADD:case NOTIFICATION_CONFIGURATION_CHANGE:case NOTIFICATION_DELETE:case NOTIFICATION_PROCESSING_START:case NOTIFICATION_PROCESSING_STOP:      schedulePlaylistSave();    break;case NOTIFICATION_ENABLE_REJECTED:case NOTIFICATION_SELECTION_CHANGE:case NOTIFICATION_STATE_RESET:case REQUEST_DELETE:case REQUEST_DESELECT:case REQUEST_DISABLE:case REQUEST_ENABLE:case REQUEST_SELECT:  break;default :throw new IllegalArgumentException("Unrecognized Channel " + "Event [" + event.getEvent().name() + "]");}}}  }
class C{  public static StoreReader createReader(File file,Configuration config){  return StoreImpl.createReader(file,config);}  }
class C{  public static void ensureExit(String utility) throws Exception {  utilityToStart=utility;  try {    int port=TestLibrary.getUnusedRandomPort();    Thread thread=new Thread(new AltSecurityManager(port));    System.err.println("expecting RuntimeException for " + "checkListen in child process");    long start=System.currentTimeMillis();    thread.start();    thread.join(TIME_OUT);    long time=System.currentTimeMillis() - start;    System.err.println("waited " + time + " millis for "+ utilityToStart+ " to die");    if (time >= TIME_OUT) {      if (utility.equals(ACTIVATION)) {        RMID.shutdown(port);      }      TestLibrary.bomb(utilityToStart + " took too long to die...");    } else {      System.err.println(utilityToStart + " terminated on time");    }  }  finally {    vm.destroy();    vm=null;  }}  }
class C{  private static StringBuilder appendCopyJsonExpression(String inVar,StringBuilder builder){  builder.append(COPY_JSONS_PARAM).append(" ? ");  appendNaiveCopyJsonExpression(inVar,builder).append(" : (JsonElement)(").append(inVar).append(")");  return builder;}  }
class C{  public MockPowerPanel(int numChannels){  channels=new ArrayList<>(numChannels);  for (int i=0; i != numChannels; ++i) {    channels.add(new MockCurrentSensor());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static OdbcEscapeToken parseToken(String text,int startPos,int len){  assert validSubstring(text,startPos,len);  assert text.charAt(startPos) == '{';  int pos=startPos + 1;  while (Character.isWhitespace(text.charAt(pos)))   pos++;  OdbcEscapeType curTyp=null;  boolean empty=false;  for (  OdbcEscapeType typ : OdbcEscapeType.sortedValues()) {    if (text.startsWith(typ.body(),pos)) {      if (typ.standard())       pos+=typ.body().length();      empty=(startPos + len == pos + 1);      if (!empty && typ.standard()) {        char charAfter=text.charAt(pos);        if (!Character.isWhitespace(charAfter))         throw new IgniteException("Unexpected escape sequence token: " + substring(text,startPos,len));      }      curTyp=typ;      break;    }  }  if (curTyp == null)   throw new IgniteException("Unsupported escape sequence: " + substring(text,startPos,len));  if (empty && !curTyp.allowEmpty())   throw new IgniteException("Escape sequence cannot be empty: " + substring(text,startPos,len));  return new OdbcEscapeToken(curTyp,pos - (startPos + 1));}  }
class C{  public void startingTestCase(UnitTest test){  Log.p("Starting test case " + test.getClass().getName());}  }
class C{  public void addMessageParams(java.lang.String param){  if (localMessageParams == null) {    localMessageParams=new java.lang.String[]{};  }  localMessageParamsTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localMessageParams);  list.add(param);  this.localMessageParams=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public void select(final T value){  checkWidget();  checkNullElement();  if (!this.elements.contains(value)) {    throw new IllegalArgumentException("Value not present in the widget");  }  this.selection.add(value);  updateSelection();}  }
class C{  public AugmentedNode<ILineSegment> pred(AugmentedNode<ILineSegment> n){  while ((n != state.root() && n == n.parent().left())) {    n=n.parent();  }  if (n == state.root()) {    return null;  }  n=n.parent().left();  while (n.right() != null) {    n=n.right();  }  return n;}  }
class C{  private static void reflectionAppend(Object lhs,Object rhs,Class clazz,EqualsBuilder builder,boolean useTransients,String[] excludeFields){  Field[] fields=clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,true);  for (int i=0; i < fields.length && builder.isEquals; i++) {    Field f=fields[i];    if (!ArrayUtils.contains(excludeFields,f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))) {      try {        builder.append(f.get(lhs),f.get(rhs));      } catch (      IllegalAccessException e) {        throw new InternalError("Unexpected IllegalAccessException");      }    }  }}  }
class C{  private static String wrapLine(String str,int wrapTextLength){  int wtl=wrapTextLength;  if (str.length() <= wtl)   return str;  String sub=str.substring(0,wtl);  String rest=str.substring(wtl);  char firstR=rest.charAt(0);  String ls=SystemUtil.getOSSpecificLineSeparator();  if (firstR == ' ' || firstR == '\t')   return sub + ls + wrapLine(rest.length() > 1 ? rest.substring(1) : "",wrapTextLength);  int indexSpace=sub.lastIndexOf(' ');  int indexTab=sub.lastIndexOf('\t');  int index=indexSpace <= indexTab ? indexTab : indexSpace;  if (index == -1)   return sub + ls + wrapLine(rest,wrapTextLength);  return sub.substring(0,index) + ls + wrapLine(sub.substring(index + 1) + rest,wrapTextLength);}  }
class C{  @Path("showdiff") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponse showDiff(final ShowDiffRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.showDiff(request);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.597 -0500",hash_original_method="3D82246BF1BA99079EA7B971F6EA0CE7",hash_generated_method="6D7C0D8734C2BF95479EC8BFF7C48A84") public ProtocolException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean deleteLoadName(String load){  if (!_loadList.contains(load)) {    return false;  }  _loadList.remove(load);  log.debug("train (" + getName() + ") delete car load "+ load);  setDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY,_loadList.size() + 1,_loadList.size());  return true;}  }
class C{  private int calcLongRepPrices(int pos,int posState,int avail,int anyRepPrice){  int startLen=MATCH_LEN_MIN;  int lenLimit=Math.min(avail,niceLen);  for (int rep=0; rep < REPS; ++rep) {    int len=lz.getMatchLen(opts[optCur].reps[rep],lenLimit);    if (len < MATCH_LEN_MIN)     continue;    while (optEnd < optCur + len)     opts[++optEnd].reset();    int longRepPrice=getLongRepPrice(anyRepPrice,rep,opts[optCur].state,posState);    for (int i=len; i >= MATCH_LEN_MIN; --i) {      int price=longRepPrice + repLenEncoder.getPrice(i,posState);      if (price < opts[optCur + i].price)       opts[optCur + i].set1(price,optCur,rep);    }    if (rep == 0)     startLen=len + 1;    int len2Limit=Math.min(niceLen,avail - len - 1);    int len2=lz.getMatchLen(len + 1,opts[optCur].reps[rep],len2Limit);    if (len2 >= MATCH_LEN_MIN) {      int price=longRepPrice + repLenEncoder.getPrice(len,posState);      nextState.set(opts[optCur].state);      nextState.updateLongRep();      int curByte=lz.getByte(len,0);      int matchByte=lz.getByte(0);      int prevByte=lz.getByte(len,1);      price+=literalEncoder.getPrice(curByte,matchByte,prevByte,pos + len,nextState);      nextState.updateLiteral();      int nextPosState=(pos + len + 1) & posMask;      price+=getLongRepAndLenPrice(0,len2,nextState,nextPosState);      int i=optCur + len + 1+ len2;      while (optEnd < i)       opts[++optEnd].reset();      if (price < opts[i].price)       opts[i].set3(price,optCur,rep,len,0);    }  }  return startLen;}  }
class C{  public Builder nb(){  this.withBorder=false;  this.borderSet=true;  return this;}  }
class C{  public CompositePredicate(Predicate p1,Predicate p2){  m_clauses.add(p1);  m_clauses.add(p2);}  }
class C{  public MutablePeriod(ReadableInstant startInstant,ReadableDuration duration,PeriodType type){  super(startInstant,duration,type);}  }
class C{  public static BoxDataSet serializableInstance(){  return new BoxDataSet(new ShortDataBox(4,4),null);}  }
class C{  private void lookForPlaylistFragment(){  final List<Fragment> fragments=getFragmentManager().getFragments();  if (fragments != null && !fragments.isEmpty()) {    for (    Fragment f : fragments) {      if (f instanceof PlaylistFragment) {        updateApolloFragmentReference((ApolloFragment)f);        return;      }    }  }}  }
class C{  protected GraphicsNodeInputEvent(GraphicsNode source,int id,long when,int modifiers,int lockState){  super(source,id);  this.when=when;  this.modifiers=modifiers;  this.lockState=lockState;}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  private static MimeBodyPart better(MimeBodyPart p,MimeBodyPart best,boolean isHtmlPreferred) throws MessagingException {  String[] preferences;  if (isHtmlPreferred) {    preferences=new String[]{MimeType.MULTIPART_RELATED,MimeType.HTML,MimeType.PLAIN_TEXT};  } else {    preferences=new String[]{MimeType.MULTIPART_RELATED,MimeType.PLAIN_TEXT,MimeType.HTML};  }  return getPoint(p,preferences) > getPoint(best,preferences) ? p : best;}  }
class C{  public void configure(Context context){  this.context=context;  batchUpperLimit=context.getInteger(KafkaSourceConstants.BATCH_SIZE,KafkaSourceConstants.DEFAULT_BATCH_SIZE);  timeUpperLimit=context.getInteger(KafkaSourceConstants.BATCH_DURATION_MS,KafkaSourceConstants.DEFAULT_BATCH_DURATION);  topic=context.getString(KafkaSourceConstants.TOPIC);  if (topic == null) {    throw new ConfigurationException("Kafka topic must be specified.");  }  kafkaProps=KafkaSourceUtil.getKafkaProperties(context);  consumerTimeout=Integer.parseInt(kafkaProps.getProperty(KafkaSourceConstants.CONSUMER_TIMEOUT));  kafkaAutoCommitEnabled=Boolean.parseBoolean(kafkaProps.getProperty(KafkaSourceConstants.AUTO_COMMIT_ENABLED));  if (counter == null) {    counter=new KafkaSourceCounter(getName());  }}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  synchronized void receive(String fileName) throws IOException {  connect();  try {    InputStream in=socket.getInputStream();    OutputStream out=FileUtils.newOutputStream(fileName,false);    IOUtils.copy(in,out);    out.close();  }  finally {    socket.close();  }  server.trace("closed");}  }
class C{  private void processNameTable(Font font){  NameTable name=font.getNameTable();  if (name != null) {    fontFamily=name.getRecord(Table.nameFontFamilyName);    subFamilyName=name.getRecord(Table.nameFontSubfamilyName);    postscriptName=name.getRecord(Table.namePostscriptName);    if (subFamilyName != null) {      style=guessStyleFromSubFamilyName(subFamilyName);    }  } else {    if (Trace.font)     Trace.trace("Font " + fontFamily + " did not have an HEAD Table.");  }}  }
class C{  private void addToStackBefore(LirsEntry existingEntry){  previousInStack=existingEntry.previousInStack;  nextInStack=existingEntry;  previousInStack.nextInStack=this;  nextInStack.previousInStack=this;}  }
class C{  public int copyTasksFrom(MProjectTypePhase fromPhase){  if (fromPhase == null)   return 0;  int count=0;  MProjectTypeTask[] fromTasks=fromPhase.getTasks();  for (int i=0; i < fromTasks.length; i++) {    MProjectTask toTask=new MProjectTask(this,fromTasks[i]);    if (toTask.save())     count++;  }  log.fine("#" + count + " - "+ fromPhase);  if (fromTasks.length != count)   log.log(Level.SEVERE,"Count difference - TypePhase=" + fromTasks.length + " <> Saved="+ count);  return count;}  }
class C{  public void formFeed(){  clear();  penX=0;  penY=0;}  }
class C{  public PrecisionModel(double scale){  modelType=FIXED;  setScale(scale);}  }
class C{  @Nullable public static String toRelativePath(final VirtualFile file,final ModuleChunk chunk,final GenerationOptions genOptions){  final Module module=chunk.getModules()[0];  final File moduleBaseDir=chunk.getBaseDir();  return toRelativePath(file,moduleBaseDir,BuildProperties.getModuleBasedirProperty(module),genOptions);}  }
class C{  private void decryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int xl=BytesTo32bits(src,srcIndex);  int xr=BytesTo32bits(src,srcIndex + 4);  xl^=P[ROUNDS + 1];  for (int i=ROUNDS; i > 0; i-=2) {    xr^=F(xl) ^ P[i];    xl^=F(xr) ^ P[i - 1];  }  xr^=P[0];  Bits32ToBytes(xr,dst,dstIndex);  Bits32ToBytes(xl,dst,dstIndex + 4);}  }
class C{  private double sumSquaredDiffs(){  final double mean=getArithmeticMean();  double squaredDiffs=0;  for (int i=0; i < getSize(); i++) {    final double diff=mean - dataSet[i];    squaredDiffs+=diff * diff;  }  return squaredDiffs;}  }
class C{  public ASN1Primitive toASN1Primitive(){  return seq;}  }
class C{  public ClientMessage createMessageWithProperties(String body,Map<String,Object> properties){  ClientMessage message=createMessage(body);  addMessageProperties(message,properties);  return message;}  }
class C{  public SyncHttpClient(int httpPort){  super(false,httpPort,443);}  }
class C{  static int difference(StringEncoder encoder,String s1,String s2) throws EncoderException {  return differenceEncoded(encoder.encode(s1),encoder.encode(s2));}  }
class C{  void init(){  final String stendhal=ClientGameConfiguration.get("GAME_NAME").toLowerCase();  System.out.println("GAME: " + stendhal);  String topFolder=System.getProperty("user.home") + separator + stendhal+ separator;  String unixLikes="AIX|Digital Unix|FreeBSD|HP UX|Irix|Linux|Mac OS X|Solaris";  String system=System.getProperty("os.name");  if (system.matches(unixLikes)) {    File f=new File(topFolder + "user.dat");    if (!f.exists()) {      topFolder=System.getProperty("user.home") + separator + ".config"+ separator+ stendhal+ separator;    }  }  jarFolder=topFolder + "jar" + separator;  final File folder=new File(jarFolder);  if (!folder.exists()) {    folder.mkdirs();  }  System.setProperty("log4j.ignoreTCL","true");}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image=null;  float progress=0;  int i;  double constantValue=0;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  double noData=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];      if (inputHeader == null) {        showFeedback("One or more of the input parameters have not been set properly.");        return;      }      image=new WhiteboxRaster(inputHeader,"r");      noData=image.getNoDataValue();    } else     if (i == 1) {      outputHeader=args[i];      if (outputHeader == null) {        showFeedback("One or more of the input parameters have not been set properly.");        return;      }    } else     if (i == 2) {      try {        if (args[i].toLowerCase().contains("nodata") || args[i].toLowerCase().contains("no data")) {          constantValue=noData;        } else {          constantValue=Double.parseDouble(args[i]);        }      } catch (      Exception e) {        constantValue=noData;      }    } else     if (i == 3) {      if (args[i].toLowerCase().contains("double")) {        dataType=WhiteboxRaster.DataType.DOUBLE;      } else       if (args[i].toLowerCase().contains("float")) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else       if (args[i].toLowerCase().contains("int")) {        dataType=WhiteboxRaster.DataType.INTEGER;      } else       if (args[i].toLowerCase().contains("byte")) {        dataType=WhiteboxRaster.DataType.BYTE;        if (constantValue > 127 || constantValue < -128) {          noData=-128;        }      }    }  }  try {    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,dataType,constantValue);    output.setNoDataValue(noData);    output.createNewDataFile();    output.setPreferredPalette(image.getPreferredPalette());    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void start(){  if (mIsRunning.compareAndSet(false,true)) {    Thread runnerThread=new Thread(this,DirectoryWatchService.class.getSimpleName());    runnerThread.start();  }}  }
class C{  public static int divide(int dividend,int divisor){  return (int)(toLong(dividend) / toLong(divisor));}  }
class C{  public void saveHistory(){  SharedPreferences sharedPref=PreferenceManager.getDefaultSharedPreferences(mContext);  SharedPreferences.Editor edit=sharedPref.edit();  for (  EditorHandler instance : mEditorHandlers) {    instance.saveHistory(sharedPref,edit);  }  edit.apply();}  }
class C{  public boolean currentOpenFileWasTruncated(){  TrackedFile counterpart=getCounterpart(currentOpenFile);  return counterpart != null && counterpart.getPath().equals(currentOpenFile.getPath()) && counterpart.isSameAs(currentOpenFile) && counterpart.getLastModifiedTime() >= currentOpenFile.getLastModifiedTime() && counterpart.getSize() < currentOpenFile.getSize();}  }
class C{  public boolean isFirstDownloadRepeat() throws IllegalAccessException {  return mFirstDownloadRepeat.getBoolean(mRepeatWrapper);}  }
class C{  public void scan(JSONArray args){  Intent intentScan=new Intent(SCAN_INTENT);  intentScan.addCategory(Intent.CATEGORY_DEFAULT);  if (args.length() > 0) {    JSONObject obj;    JSONArray names;    String key;    Object value;    for (int i=0; i < args.length(); i++) {      try {        obj=args.getJSONObject(i);      } catch (      JSONException e) {        Log.i("CordovaLog",e.getLocalizedMessage());        continue;      }      names=obj.names();      for (int j=0; j < names.length(); j++) {        try {          key=names.getString(j);          value=obj.get(key);          if (value instanceof Integer) {            intentScan.putExtra(key,(Integer)value);          } else           if (value instanceof String) {            intentScan.putExtra(key,(String)value);          }        } catch (        JSONException e) {          Log.i("CordovaLog",e.getLocalizedMessage());          continue;        }      }    }  }  intentScan.setPackage(this.cordova.getActivity().getApplicationContext().getPackageName());  this.cordova.startActivityForResult((CordovaPlugin)this,intentScan,REQUEST_CODE);}  }
class C{  private static void printJobNodes(ArrayList<ArrayList<Lop>> jobNodes) throws DMLRuntimeException {  if (LOG.isTraceEnabled()) {    for (    JobType jt : JobType.values()) {      int i=jt.getId();      if (i > 0 && jobNodes.get(i) != null && !jobNodes.get(i).isEmpty()) {        LOG.trace(jt.getName() + " Job Nodes:");        for (int j=0; j < jobNodes.get(i).size(); j++) {          LOG.trace("    " + jobNodes.get(i).get(j).getID() + ") "+ jobNodes.get(i).get(j).toString());        }      }    }  }}  }
class C{  public Builder limit(Integer limit){  this.limit=limit;  return this;}  }
class C{  public boolean isClassLoader(int objectId){  return loaderLabels.containsKey(objectId);}  }
class C{  public void createKeyPair(){  try {    mKeyPairGenerator.initialize(new KeyGenParameterSpec.Builder(KEY_NAME,KeyProperties.PURPOSE_SIGN).setDigests(KeyProperties.DIGEST_SHA256).setAlgorithmParameterSpec(new ECGenParameterSpec("secp256r1")).setUserAuthenticationRequired(true).build());    mKeyPairGenerator.generateKeyPair();  } catch (  InvalidAlgorithmParameterException e) {    throw new RuntimeException(e);  }}  }
class C{  public void execute() throws IOException {  String key="mqtt-" + (System.currentTimeMillis() / 1000);  String b64Key=Base64.encode(key);  sendHandshakeRequest(b64Key);  receiveHandshakeResponse(b64Key);}  }
class C{  public void push(String type,String decl,int index){  StringBuilder sb=new StringBuilder("(");  sb.append(type).append(")");  sb.append(decl).append("[").append(index).append("]");  push(sb.toString());}  }
class C{  void processMessage(final RegistrationMessage registrationMessage) throws Exception {  final Map<String,Object> model=new HashMap<String,Object>();  model.put("password",registrationMessage.getPassword());  model.put("salutation",registrationMessage.getSalutation());  model.put("firstName",registrationMessage.getFirstname());  model.put("lastName",registrationMessage.getLastname());  model.put("middleName",registrationMessage.getMiddlename());  model.put("additionalData",registrationMessage.getAdditionalData());  final Mail mail=mailService.getGenericDao().getEntityFactory().getByIface(Mail.class);  mailComposer.composeMessage(mail,"DEFAULT",registrationMessage.getLocale(),registrationMessage.getMailTemplatePathChain(),registrationMessage.getTemplateName(),registrationMessage.getShopMailFrom(),registrationMessage.getEmail(),null,null,model);  mailService.create(mail);}  }
class C{  private void detachOffScreenChildren(boolean toLeft){  int numChildren=getChildCount();  int firstPosition=mFirstPosition;  int start=0;  int count=0;  if (toLeft) {    final int galleryLeft=mPaddingLeft;    for (int i=0; i < numChildren; i++) {      int n=mIsRtl ? (numChildren - 1 - i) : i;      final View child=getChildAt(n);      if (child.getRight() >= galleryLeft) {        break;      } else {        start=n;        count++;        mRecycler.put(firstPosition + n,child);      }    }    if (!mIsRtl) {      start=0;    }  } else {    final int galleryRight=getWidth() - mPaddingRight;    for (int i=numChildren - 1; i >= 0; i--) {      int n=mIsRtl ? numChildren - 1 - i : i;      final View child=getChildAt(n);      if (child.getLeft() <= galleryRight) {        break;      } else {        start=n;        count++;        mRecycler.put(firstPosition + n,child);      }    }    if (mIsRtl) {      start=0;    }  }  detachViewsFromParent(start,count);  if (toLeft != mIsRtl) {    mFirstPosition+=count;  }}  }
class C{  public void testScaleNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-10;  int cScale=-10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertTrue("incorrect scale",aNumber.scale() == cScale);}  }
class C{  public void addListener(INotifyChangedListener notifyChangedListener){  changeNotifier.addListener(notifyChangedListener);}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  public void rewind(){  count=0;}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return FetchSysCfgResponse.create(dm,this.getSender());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.331 -0400",hash_original_method="142B9ECADA30F41695AEA5471DF0DE21",hash_generated_method="142B9ECADA30F41695AEA5471DF0DE21") SubMap(ConcurrentSkipListMap<K,V> map,K fromKey,boolean fromInclusive,K toKey,boolean toInclusive,boolean isDescending){  if (fromKey != null && toKey != null && map.compare(fromKey,toKey) > 0)   throw new IllegalArgumentException("inconsistent range");  this.m=map;  this.lo=fromKey;  this.hi=toKey;  this.loInclusive=fromInclusive;  this.hiInclusive=toInclusive;  this.isDescending=isDescending;}  }
class C{  public boolean requiresConnection(){  return false;}  }
class C{  public void visit(){  int num=ByteArray.readU16bit(info,0);  int pos=2;  for (int i=0; i < num; i++) {    int offset=ByteArray.readU16bit(info,pos);    int numLoc=ByteArray.readU16bit(info,pos + 2);    pos=locals(pos + 4,offset,numLoc);    int numStack=ByteArray.readU16bit(info,pos);    pos=stack(pos + 2,offset,numStack);  }}  }
class C{  public final Vec2D clear(){  x=y=0;  return this;}  }
class C{  public ISchedulingRule derivedRule(IResource resource){  return null;}  }
class C{  public void actionPerformed(ActionEvent evt){switch (whichDirection) {case INCREMENT:    html.incrementFontSize();  break;case RESET:html.resetFontSize();break;case DECREMENT:html.decrementFontSize();break;}}  }
class C{  protected static BaseVO updateValueObject(BaseVO voToBeUpdated,DomainObject<?> template){  voToBeUpdated.setKey(template.getKey());  voToBeUpdated.setVersion(template.getVersion());  return voToBeUpdated;}  }
class C{  public void insert(Comparable item){  current=parent=grand=header;  nullNode.element=item;  while (compare(item,current) != 0) {    great=grand;    grand=parent;    parent=current;    current=compare(item,current) < 0 ? current.left : current.right;    if (current.left.color == RED && current.right.color == RED)     handleReorient(item);  }  if (current != nullNode)   throw new DuplicateItemException(item.toString());  current=new RedBlackNode(item,nullNode,nullNode);  if (compare(item,parent) < 0)   parent.left=current; else   parent.right=current;  handleReorient(item);}  }
class C{  public String epsilonTipText(){  return "The epsilon for round-off error (shouldn't be changed).";}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void indexNoteName(IndexWriter w,String noteId,String noteName) throws IOException {  LOG.debug("Indexing Notebook {}, '{}'",noteId,noteName);  if (null == noteName || noteName.isEmpty()) {    LOG.debug("Skipping empty notebook name");    return;  }  indexDoc(w,noteId,noteName,null);}  }
class C{  private void defineComboBoxes(UIDefaults d){  d.put("ComboBox.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("ComboBox.forceOpaque",Boolean.TRUE);  d.put("ComboBox.buttonWhenNotEditable",Boolean.TRUE);  d.put("ComboBox.rendererUseListColors",Boolean.FALSE);  d.put("ComboBox.pressedWhenPopupVisible",Boolean.TRUE);  d.put("ComboBox.squareButton",Boolean.FALSE);  d.put("ComboBox.popupInsets",new InsetsUIResource(-2,2,0,2));  d.put("ComboBox.padding",new InsetsUIResource(2,2,2,2));  d.put("ComboBox:\"ComboBox.arrowButton\".contentMargins",new InsetsUIResource(0,0,0,0));  d.put("ComboBox:\"ComboBox.arrowButton\".size",new Integer(19));  d.put("ComboBox:\"ComboBox.listRenderer\".contentMargins",new InsetsUIResource(2,4,2,4));  d.put("ComboBox:\"ComboBox.listRenderer\".opaque",Boolean.TRUE);  addColor(d,"ComboBox:\"ComboBox.listRenderer\".background","seaGlassLightBackground",0.0f,0.0f,0.0f,0);  addColor(d,"ComboBox:\"ComboBox.listRenderer\"[Disabled].textForeground","seaGlassDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"ComboBox:\"ComboBox.listRenderer\"[Selected].textForeground","seaGlassSelectedText",0.0f,0.0f,0.0f,0);  addColor(d,"ComboBox:\"ComboBox.listRenderer\"[Selected].background","seaGlassSelectionBackground",0.0f,0.0f,0.0f,0);  d.put("ComboBox:\"ComboBox.renderer\".contentMargins",new InsetsUIResource(2,4,2,4));  addColor(d,"ComboBox:\"ComboBox.renderer\"[Disabled].textForeground","seaGlassDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"ComboBox:\"ComboBox.renderer\"[Selected].textForeground","seaGlassSelectedText",0.0f,0.0f,0.0f,0);  addColor(d,"ComboBox:\"ComboBox.renderer\"[Selected].background","seaGlassSelectionBackground",0.0f,0.0f,0.0f,0);  d.put("\"ComboBox.scrollPane\".contentMargins",new InsetsUIResource(0,0,0,0));  String p="ComboBox";  d.put(p + ".States","Enabled,Pressed,Selected,Disabled,Focused,Editable");  d.put(p + ".Editable",new ComboBoxEditableState());  d.put(p + ":\"ComboBox.arrowButton\".Editable",new ComboBoxArrowButtonEditableState());  String c=PAINTER_PREFIX + "ComboBoxPainter";  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,ComboBoxPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Disabled+Pressed].backgroundPainter",new LazyPainter(c,ComboBoxPainter.Which.BACKGROUND_DISABLED_PRESSED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,ComboBoxPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Focused].backgroundPainter",new LazyPainter(c,ComboBoxPainter.Which.BACKGROUND_FOCUSED));  d.put(p + "[Focused+Pressed].backgroundPainter",new LazyPainter(c,ComboBoxPainter.Which.BACKGROUND_PRESSED_FOCUSED));  d.put(p + "[Pressed].backgroundPainter",new LazyPainter(c,ComboBoxPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[Enabled+Selected].backgroundPainter",new LazyPainter(c,ComboBoxPainter.Which.BACKGROUND_ENABLED_SELECTED));  d.put(p + "[Disabled+Editable].backgroundPainter",new LazyPainter(c,ComboBoxPainter.Which.BACKGROUND_DISABLED_EDITABLE));  d.put(p + "[Editable+Enabled].backgroundPainter",new LazyPainter(c,ComboBoxPainter.Which.BACKGROUND_ENABLED_EDITABLE));  d.put(p + "[Editable+Focused].backgroundPainter",new LazyPainter(c,ComboBoxPainter.Which.BACKGROUND_FOCUSED_EDITABLE));  d.put(p + "[Editable+Pressed].backgroundPainter",new LazyPainter(c,ComboBoxPainter.Which.BACKGROUND_PRESSED_EDITABLE));  c=PAINTER_PREFIX + "ComboBoxArrowButtonPainter";  p="ComboBox:\"ComboBox.arrowButton\"";  d.put(p + ".size",new Integer(22));  d.put(p + ".States","Enabled,Pressed,Disabled,Editable");  d.put(p + "[Disabled+Editable].backgroundPainter",new LazyPainter(c,ComboBoxArrowButtonPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Editable+Enabled].backgroundPainter",new LazyPainter(c,ComboBoxArrowButtonPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Editable+Pressed].backgroundPainter",new LazyPainter(c,ComboBoxArrowButtonPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[Editable+Selected].backgroundPainter",new LazyPainter(c,ComboBoxArrowButtonPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Enabled].foregroundPainter",new LazyPainter(c,ComboBoxArrowButtonPainter.Which.FOREGROUND_ENABLED));  d.put(p + "[Disabled].foregroundPainter",new LazyPainter(c,ComboBoxArrowButtonPainter.Which.FOREGROUND_DISABLED));  d.put(p + "[Pressed].foregroundPainter",new LazyPainter(c,ComboBoxArrowButtonPainter.Which.FOREGROUND_PRESSED));  d.put(p + "[Selected].foregroundPainter",new LazyPainter(c,ComboBoxArrowButtonPainter.Which.FOREGROUND_SELECTED));  d.put(p + "[Editable].foregroundPainter",new LazyPainter(c,ComboBoxArrowButtonPainter.Which.FOREGROUND_ENABLED_EDITABLE));  d.put(p + "[Editable+Disabled].foregroundPainter",new LazyPainter(c,ComboBoxArrowButtonPainter.Which.FOREGROUND_DISABLED_EDITABLE));  c=PAINTER_PREFIX + "ComboBoxTextFieldPainter";  p="ComboBox:\"ComboBox.textField\"";  d.put(p + ".contentMargins",new InsetsUIResource(2,6,2,0));  d.put(p + ".background",Color.WHITE);  d.put(p + "[Disabled].textForeground",getDerivedColor("seaGlassDisabledText",0.0f,0.0f,0.0f,0,true));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,ComboBoxTextFieldPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,ComboBoxTextFieldPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Selected].backgroundPainter",new LazyPainter(c,ComboBoxTextFieldPainter.Which.BACKGROUND_SELECTED));}  }
class C{  public boolean isFirstBatchDone(){  return m_FirstBatchDone;}  }
class C{  public ExpandAnimation(View view,int duration){  setDuration(duration);  mAnimatedView=view;  mViewLayoutParams=(LayoutParams)view.getLayoutParams();  mIsVisibleAfter=(view.getVisibility() == View.VISIBLE);  mMarginStart=mViewLayoutParams.bottomMargin;  mMarginEnd=(mMarginStart == 0 ? (0 - view.getHeight()) : 0);  view.setVisibility(View.VISIBLE);}  }
class C{  public static void writeEnumValue(Parcel dest,Enum e){  dest.writeInt(e.ordinal());}  }
class C{  private void mergeCOMNode(Node node) throws IIOInvalidTreeException {  COMMarkerSegment newGuy=new COMMarkerSegment(node);  insertCOMMarkerSegment(newGuy);}  }
class C{  public DiscoverItems discoverNodes(String nodeId) throws XMPPException {  DiscoverItems items=new DiscoverItems();  if (nodeId != null)   items.setNode(nodeId);  items.setTo(to);  DiscoverItems nodeItems=(DiscoverItems)SyncPacketSend.getReply(con,items);  return nodeItems;}  }
class C{  public boolean shardHasContributed(int shardNum){  return sourceShards.get(shardNum);}  }
class C{  public void drawBackground(java.awt.Graphics g){  g.fillRect(0,0,getWidth(),getHeight());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.BOOTSTRAP_MODULE__MODULE_SPECIFIER_WITH_WILDCARD:    setModuleSpecifierWithWildcard((String)newValue);  return;case N4mfPackage.BOOTSTRAP_MODULE__SOURCE_PATH:setSourcePath((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static BaselineShift newInstance(double baselineShiftAsDbl){  BaselineShift baselineShift=new BaselineShift();  baselineShift.baselineShiftAsDbl=baselineShiftAsDbl;  return baselineShift;}  }
class C{  public DelphiRule(){}  }
class C{  public XMLStringDefault(String str){  m_str=str;}  }
class C{  public boolean isQosSupported(){  return qosSupported;}  }
class C{  private void onEvent(CounterManager.Event2C.OnCounterUpdated event){  getModel().setCount(String.valueOf(event.getCount()));}  }
class C{  public void remove(Object key){  m_map.remove(key);}  }
class C{  protected static void substituteQueryCache(Map<String,String> testQueryCache){  queryCache=testQueryCache;}  }
class C{  public int elementAt(final int key){  return stack[pointer - key];}  }
class C{  public ClickableSpanEx(int foregroundColor,int backgroundColor){  mForegroundColor=foregroundColor;  mBackgroundColor=backgroundColor;}  }
class C{  @Override public List<JToolBar> createToolBars(Application app,@Nullable View p){  LinkedList<JToolBar> list=new LinkedList<JToolBar>();  return list;}  }
class C{  public boolean hasFailure(){  return this.firstFailedKey != null;}  }
class C{  public boolean contains(int value){  return getMin() <= value && value <= getMax();}  }
class C{  protected boolean isOverfull(){  int size=objects.size();  boolean full=size >= blockStartAt;  if (full) {    if (LOG_INTERNAL_DATA && logInternalExtendedData())     logger.info("Overfull [" + id() + "]. currentSize="+ size+ ", blockStartAt="+ blockStartAt);  }  return full;}  }
class C{  public static <K,V>void forEachKeyValue(Map<K,V> map,Procedure2<? super K,? super V> procedure2){  ParallelMapIterate.forEachKeyValue(map,procedure2,2,map.size());}  }
class C{  public void createFailureBodyCount(){  new Capacity(-3,0,0);}  }
class C{  @Override public void removeLayoutComponent(Component c){  if (c == viewport) {    viewport=null;  } else   if (c == vsb) {    vsb=null;  } else   if (c == hsb) {    hsb=null;  } else   if (c == rowHead) {    rowHead=null;  } else   if (c == colHead) {    colHead=null;  } else   if (c == lowerLeft) {    lowerLeft=null;  } else   if (c == lowerRight) {    lowerRight=null;  } else   if (c == upperLeft) {    upperLeft=null;  } else   if (c == upperRight) {    upperRight=null;  }}  }
class C{  @Override public void readFile(String name) throws org.jdom2.JDOMException, java.io.IOException {  if (findFile(name) == null) {    log.debug(name + " file could not be found");    fileLoaded=true;    return;  }  Element root=rootFromName(name);  if (root == null) {    log.debug(name + " file could not be read");    return;  }  TrainManager.instance().load(root);  TrainScheduleManager.instance().load(root);  fileLoaded=true;  AutomationManager.instance().load(root);  TrainManager.instance().loadTrainIcons();  TrainManager.instance().runStartUpScripts();  log.debug("Trains have been loaded!");  TrainLogger.instance().enableTrainLogging(Setup.isTrainLoggerEnabled());  setDirty(false);}  }
class C{  public ResultSetInternalMethods execSQL(StatementImpl callingStatement,String sql,int maxRows,Buffer packet,int resultSetType,int resultSetConcurrency,boolean streamResults,String catalog,Field[] cachedMetadata) throws SQLException {  return execSQL(callingStatement,sql,maxRows,packet,resultSetType,resultSetConcurrency,streamResults,catalog,cachedMetadata,false);}  }
class C{  public SearchOptions(String searchValue,boolean matchCase){  this.searchValue=searchValue;  this.matchCase=matchCase;}  }
class C{  public JsonReaderEx beginObject(){  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_BEGIN_OBJECT) {    push(JsonScope.EMPTY_OBJECT);    peeked=PEEKED_NONE;  } else {    throw createParseError("Expected BEGIN_OBJECT but was " + peek());  }  return this;}  }
class C{  private void readFrameRemainder(ParsableByteArray source){  int bytesToRead=Math.min(source.bytesLeft(),frameSize - frameBytesRead);  output.sampleData(source,bytesToRead);  frameBytesRead+=bytesToRead;  if (frameBytesRead < frameSize) {    return;  }  output.sampleMetadata(timeUs,C.SAMPLE_FLAG_SYNC,frameSize,0,null);  timeUs+=frameDurationUs;  frameBytesRead=0;  state=STATE_FINDING_HEADER;}  }
class C{  public boolean isOpen(){  return isOpen;}  }
class C{  public void addFooterView(View v){  AdapterWithHeader adapter=(AdapterWithHeader)super.getAdapter();  if (null != adapter) {    adapter.addFooterView(v);  }}  }
class C{  public AsyncResult WriteAsync(RequestHeader RequestHeader,WriteValue... NodesToWrite){  WriteRequest req=new WriteRequest(RequestHeader,NodesToWrite);  return channel.serviceRequestAsync(req);}  }
class C{  public boolean containsRadians(double radiansLatitude,double radiansLongitude){  return radiansLatitude >= this.minLatitude.radians && radiansLatitude <= this.maxLatitude.radians && radiansLongitude >= this.minLongitude.radians && radiansLongitude <= this.maxLongitude.radians;}  }
class C{  public static int bytesToInt(byte b1,byte b2){  return (UnsignedByte.toInt(b1) << 8) | UnsignedByte.toInt(b2);}  }
class C{  public static Name name(JCTree tree){switch (tree.getTag()) {case IDENT:    return ((JCIdent)tree).name;case SELECT:  return ((JCFieldAccess)tree).name;case TYPEAPPLY:return name(((JCTypeApply)tree).clazz);default :return null;}}  }
class C{  public static void extract(int[] n1,int off1,int n2[],int off2,int len2){  for (int i=0; i < len2; i++) {    n1[off1 + i]=n2[off2 + i];  }}  }
class C{  public boolean equals(Object object){  if (object instanceof DrmSupportInfo) {    DrmSupportInfo info=(DrmSupportInfo)object;    return mFileSuffixList.equals(info.mFileSuffixList) && mMimeTypeList.equals(info.mMimeTypeList) && mDescription.equals(info.mDescription);  }  return false;}  }
class C{  protected EventBean[] determineLimitAndApply(EventBean[] outgoingEvents){  if (outgoingEvents == null) {    return null;  }  determineCurrentLimit();  return applyLimit(outgoingEvents);}  }
class C{  protected AESCipher(int keySize){  core=new CipherCore(new AESCrypt(),AESConstants.AES_BLOCK_SIZE);  fixedKeySize=keySize;}  }
class C{  static void appendColumns(StringBuilder s,String[] columns){  for (int i=0; i < columns.length; i++) {    if (i > 0) {      s.append(", ");    }    s.append(StringUtils.quoteIdentifier(columns[i]));  }}  }
class C{  private JSONObject moveFile(File srcFile,File destFile) throws IOException, JSONException, InvalidModificationException {  if (destFile.exists() && destFile.isDirectory()) {    throw new InvalidModificationException("Can't rename a file to a directory");  }  if (!srcFile.renameTo(destFile)) {    copyAction(srcFile,destFile);    if (destFile.exists()) {      srcFile.delete();    } else {      throw new IOException("moved failed");    }  }  return makeEntryForFile(destFile);}  }
class C{  public boolean needsCustomLayoutForChildren(){  return false;}  }
class C{  public void finishInitialization(){  if (!ConfigurationManager.getInstance().isEmpty()) {    connectionsMenu.addSeparator();    connectionsMenu.add(MANAGE_CONFIGURABLES_ACTION);  }  fileMenu.addSeparator();  fileMenu.add(EXPORT_ACTION);  fileMenu.addSeparator();  fileMenu.add(EXIT_ACTION);  settingsMenu.add(PasswordManager.OPEN_WINDOW);  if (SystemInfoUtilities.getOperatingSystem() != OperatingSystem.OSX || !OSXAdapter.isAdapted()) {    settingsMenu.add(SETTINGS_ACTION);  }  menuBar.add(settingsMenu);  menuBar.add(extensionsMenu);  if (helpMenu.getItemCount() > 0) {    helpMenu.setMargin(menuBarInsets);    menuBar.add(helpMenu);  }}  }
class C{  public InvalidPreferencesFormatException(String message){  super(message);}  }
class C{  public static void mapColumns(IndexColumn[] indexColumns,Table table){  for (  IndexColumn col : indexColumns) {    col.column=table.getColumn(col.columnName);  }}  }
class C{  private void endArguments(){  if (argumentStack % 2 != 0) {    buf.append('>');  }  argumentStack/=2;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:29.392 -0500",hash_original_method="ED55B5B85F7807A50A99A17BF067C0B0",hash_generated_method="754163234CFE1A6C580CF5F819A95EA5") private boolean processPostDialChar(char c){  if (PhoneNumberUtils.is12Key(c)) {    owner.cm.sendDtmf(c,h.obtainMessage(EVENT_DTMF_DONE));  } else   if (c == PhoneNumberUtils.PAUSE) {    if (nextPostDialChar == 1) {      h.sendMessageDelayed(h.obtainMessage(EVENT_PAUSE_DONE),PAUSE_DELAY_FIRST_MILLIS);    } else {      h.sendMessageDelayed(h.obtainMessage(EVENT_PAUSE_DONE),PAUSE_DELAY_MILLIS);    }  } else   if (c == PhoneNumberUtils.WAIT) {    setPostDialState(PostDialState.WAIT);  } else   if (c == PhoneNumberUtils.WILD) {    setPostDialState(PostDialState.WILD);  } else {    return false;  }  return true;}  }
class C{  public final DD selfDivide(double y){  return selfDivide(y,0.0);}  }
class C{  public static double sumSeries(double n){  double sum=0;  for (double i=1; i <= n; i++) {    sum+=i / (i + 1);  }  return sum;}  }
class C{  public AcctProcessor(MAcctProcessor model){  super(model,30);  m_model=model;  m_client=MClient.get(model.getCtx(),model.getAD_Client_ID());}  }
class C{  @Override public final boolean containsKey(Object key){  return -2 != getDataIndexOfKey(key);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void forEachClear(Allocation ain,Allocation aout){  blend(0,ain,aout);}  }
class C{  public List<HostHostBusAdapter> listHostBusAdapters(){  HostStorageDeviceInfo storageDeviceInfo=getStorageDeviceInfo();  if (storageDeviceInfo != null) {    return createList(storageDeviceInfo.getHostBusAdapter());  } else {    return Lists.newArrayList();  }}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  public ChunkLock newChunkLock(String desc){  return new ChunkLock(chunks,name + ": " + desc);}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  final HttpServletRequest httpRequest=new IgnoreCharacterEncodingHttpRequestWrapper((HttpServletRequest)request);  final AuthorizationRequestData rdo=initializeRequestDataObject(httpRequest);  final HttpSession httpSession=httpRequest.getSession();  final String mId=retrieveMarketplaceId(httpRequest,rdo);  if (rdo.isMarketplaceLoginPage()) {    String forwardUrl;    if (authSettings.isServiceProvider()) {      forwardUrl=httpRequest.getParameter("RelayState");    } else {      forwardUrl=(String)httpRequest.getSession().getAttribute(Constants.SESS_ATTR_FORWARD_URL);    }    if (!ADMStringUtils.isBlank(forwardUrl)) {      BesServletRequestReader.copyURLParamToRequestAttribute(httpRequest,Constants.REQ_ATTR_SERVICE_LOGIN_TYPE,forwardUrl);      httpRequest.setAttribute(Constants.REQ_ATTR_LOGIN_REDIRECT_TARGET,forwardUrl);    }  }  final HttpServletResponse httpResponse=(HttpServletResponse)response;  if (rdo.isRequiredToChangePwd() && !BesServletRequestReader.hasPasswordChangeToken(httpRequest)) {    forwardToLoginPage(rdo.getRelativePath(),true,httpRequest,httpResponse,chain);    return;  }  if (BesServletRequestReader.isMarketplaceRedirect(httpRequest)) {    redirectToMarketplace(httpRequest,httpResponse);    return;  }  if (!rdo.isAccessToServiceUrl()) {    updateSessionAndCookie(httpSession,httpRequest,httpResponse,mId);  }  if (ADMStringUtils.isBlank(mId) && rdo.isMarketplace() && !rdo.isMarketplaceErrorPage()) {    handleWrongMarketplaceIdCase(httpRequest,httpResponse,rdo);    return;  }  if (!ADMStringUtils.isBlank(httpRequest.getQueryString())) {    if (hasInvalidChangePasswordToken(httpRequest)) {      handleInvalidURL(httpRequest,httpResponse,rdo);      return;    }  }  chain.doFilter(httpRequest,httpResponse);}  }
class C{  protected Container constructSideNavigationComponent(){  return sideMenu.constructSideNavigationPanel();}  }
class C{  public SystemConfiguration(Properties props){  super();  putAll(props);}  }
class C{  private static void initPrefs(PreferenceActivity activity){  for (  String key : prefKeys) {    initPref(activity.findPreference(key));  }}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public Property secondOfMinute(){  return new Property(this,SECOND_OF_MINUTE);}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException {  return decode(image,null);}  }
class C{  protected SelectedSparseObjectMatrix3D(AbstractIntObjectMap elements,int[] sliceOffsets,int[] rowOffsets,int[] columnOffsets,int offset){  int slices=sliceOffsets.length;  int rows=rowOffsets.length;  int columns=columnOffsets.length;  setUp(slices,rows,columns);  this.elements=elements;  this.sliceOffsets=sliceOffsets;  this.rowOffsets=rowOffsets;  this.columnOffsets=columnOffsets;  this.offset=offset;  this.isNoView=false;}  }
class C{  public TypeDeclaration<T> addMember(BodyDeclaration<?> decl){  List<BodyDeclaration<?>> members=getMembers();  if (isNullOrEmpty(members)) {    members=new ArrayList<>();    setMembers(members);  }  members.add(decl);  decl.setParentNode(this);  return this;}  }
class C{  private void resetActivityTitle(){  mRemoveMembersMenuItem.setEnabled(true);  mSwitchDeletionMenuItem.setEnabled(true);  setActivityTitle(this.getResources().getString(R.string.room_details_title));}  }
class C{  public static TypeBearer mergeType(TypeBearer ft1,TypeBearer ft2){  if ((ft1 == null) || ft1.equals(ft2)) {    return ft1;  } else   if (ft2 == null) {    return null;  } else {    Type type1=ft1.getType();    Type type2=ft2.getType();    if (type1 == type2) {      return type1;    } else     if (type1.isReference() && type2.isReference()) {      if (type1 == Type.KNOWN_NULL) {        return type2;      } else       if (type2 == Type.KNOWN_NULL) {        return type1;      } else       if (type1.isArray() && type2.isArray()) {        TypeBearer componentUnion=mergeType(type1.getComponentType(),type2.getComponentType());        if (componentUnion == null) {          return Type.OBJECT;        }        return ((Type)componentUnion).getArrayType();      } else {        return Type.OBJECT;      }    } else     if (type1.isIntlike() && type2.isIntlike()) {      return Type.INT;    } else {      return null;    }  }}  }
class C{  public CategorizedTextEditGroup(String name,TextEdit[] edits,GroupCategorySet groupCategories){  super(name,edits);  Assert.isNotNull(groupCategories);  fGroupCategories=groupCategories;}  }
class C{  private void completeOrCancelFolderNaming(boolean cancel){  if (!cancel && !TextUtils.isEmpty(mFolderNamer.getText())) {    String name=mFolderNamer.getText().toString();    long id=addFolderToCurrent(mFolderNamer.getText().toString());    descendInto(name,id);  }  setShowFolderNamer(false);  getInputMethodManager().hideSoftInputFromWindow(mListView.getWindowToken(),0);}  }
class C{  public ArrayList<String> GetElementList(String xPathExpression){  try {    ArrayList<String> values=new ArrayList<String>();    List<?> nodeList=XPath.selectNodes(this.xmlDocument,xPathExpression);    Iterator<?> iter=nodeList.iterator();    while (iter.hasNext()) {      org.jdom.Element element=(org.jdom.Element)iter.next();      values.add(element.getText());    }    return values;  } catch (  Exception ex) {    LOG.error("Error in handler: " + ex.getMessage(),ex);    return null;  }}  }
class C{  BooleanQuery makeQuery(BooleanClause.Occur occur,Query... queries){  BooleanQuery.Builder bq=new BooleanQuery.Builder();  for (  Query query : queries) {    if (query != null)     bq.add(query,occur);  }  return bq.build();}  }
class C{  public HBaseRegionSizeCalculator(HTable table) throws IOException {  this(table,new HBaseAdmin(table.getConfiguration()));}  }
class C{  public void renderImmediate(VisualItem item){  Graphics2D g2D=(Graphics2D)this.getGraphics();  prepareGraphics(g2D);  item.render(g2D);}  }
class C{  public void testLocalsAverageCorrectly() throws Exception {  TransferEntropyCalculatorMultiVariateKraskov teCalc=new TransferEntropyCalculatorMultiVariateKraskov();  String kraskov_K="4";  teCalc.setProperty(TransferEntropyCalculatorMultiVariateKraskov.PROP_KRASKOV_ALG_NUM,"2");  teCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,kraskov_K);  super.testLocalsAverageCorrectly(teCalc,2,100,1);}  }
class C{  @Override public int offset(){  return _writeLength;}  }
class C{  private void jbInit() throws Exception {  dialog.setLayout(mainLayout);  dialog.setMinimumSize(new Dimension(500,200));  southPanel.addActionListener(this);  bOK=southPanel.getOKButton();  message.setContentType("text/html");  message.setEditable(false);  message.setBackground(Color.white);  message.setFocusable(false);  getContentPane().add(dialog);  dialog.add(southPanel,BorderLayout.SOUTH);  dialog.add(messagePane,BorderLayout.NORTH);  messagePane.setBorder(null);  messagePane.setMaximumSize(new Dimension(600,300));  centerPanel=new CPanel();  centerPanel.setBorder(null);  centerPanel.setLayout(new BorderLayout());  dialog.add(centerPanel,BorderLayout.CENTER);  this.getRootPane().setDefaultButton(bOK);}  }
class C{  public synchronized BaseType createStructure(final String name) throws CouldntSaveDataException {  Preconditions.checkNotNull(name,"Name can not be null.");  final BaseType structType=instantiateType(name,0,false,null,BaseTypeCategory.STRUCT);  notifyTypeAdded(structType);  return structType;}  }
class C{  public boolean visit(ContinueStatement node){  return true;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.EVENT__DIRECTION:    return direction != DIRECTION_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  private static void fillChangeLog(){  ArrayList<Integer> list=new ArrayList<Integer>(40);  String sql="SELECT t.AD_Table_ID FROM AD_Table t " + "WHERE t.IsChangeLog='Y'" + " OR EXISTS (SELECT * FROM AD_Column c "+ "WHERE t.AD_Table_ID=c.AD_Table_ID AND c.ColumnName='EntityType') "+ "ORDER BY t.AD_Table_ID";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next())     list.add(new Integer(rs.getInt(1)));  } catch (  Exception e) {    s_log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  s_changeLog=new int[list.size()];  for (int i=0; i < s_changeLog.length; i++) {    Integer id=(Integer)list.get(i);    s_changeLog[i]=id.intValue();  }  s_log.info("#" + s_changeLog.length);}  }
class C{  boolean isOne(){  return (intLen == 1) && (value[offset] == 1);}  }
class C{  private static int parseViolationFromMessage(String message){  if (message == null) {    return 0;  }  int violationIndex=message.indexOf("violation=");  if (violationIndex == -1) {    return 0;  }  int numberStartIndex=violationIndex + "violation=".length();  int numberEndIndex=message.indexOf(' ',numberStartIndex);  if (numberEndIndex == -1) {    numberEndIndex=message.length();  }  String violationString=message.substring(numberStartIndex,numberEndIndex);  try {    return Integer.valueOf(violationString).intValue();  } catch (  NumberFormatException e) {    return 0;  }}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,ImageObserver observer){  if (img == null) {    return true;  }  addDrawingRect(x,y,width,height);  mPrintMetrics.drawImage(this,img);  return mGraphics.drawImage(img,x,y,width,height,observer);}  }
class C{  @Override public boolean supportsConcurrentAccess(){  return SUPPORTS_CONCURRENT_ACCESS;}  }
class C{  private Response loadFromCache(final Request request,CacheStrategy cacheStrategy,ClientIdentification.Agent agent,final DigestURL url,final CrawlProfile crawlProfile) throws IOException {  Response response=null;  if (cacheStrategy != CacheStrategy.NOCACHE && crawlProfile != null) {    final ResponseHeader cachedResponse=(url.isLocal()) ? null : Cache.getResponseHeader(url.hash());    if (cachedResponse != null && Cache.hasContent(url.hash())) {      final RequestHeader requestHeader=new RequestHeader();      requestHeader.put(HeaderFramework.USER_AGENT,agent.userAgent);      DigestURL refererURL=null;      if (request.referrerhash() != null)       refererURL=this.sb.getURL(request.referrerhash());      if (refererURL != null)       requestHeader.put(RequestHeader.REFERER,refererURL.toNormalform(true));      response=new Response(request,requestHeader,cachedResponse,crawlProfile,true,null);      if (cacheStrategy == CacheStrategy.IFEXIST || cacheStrategy == CacheStrategy.CACHEONLY) {        final byte[] content=Cache.getContent(url.hash());        if (content != null) {          LoaderDispatcher.log.info("cache hit/useall for: " + url.toNormalform(true));          response.setContent(content);          return response;        }      }      if (response.isFreshForProxy()) {        final byte[] content=Cache.getContent(url.hash());        if (content != null) {          LoaderDispatcher.log.info("cache hit/fresh for: " + url.toNormalform(true));          response.setContent(content);          return response;        }      }      LoaderDispatcher.log.info("cache hit/stale for: " + url.toNormalform(true));      response=null;    } else     if (cachedResponse != null) {      LoaderDispatcher.log.warn("HTCACHE contained response header, but not content for url " + url.toNormalform(true));    }  }  return response;}  }
class C{  public jMatrix arrayRightDivide(jMatrix B){  checkMatrixDimensions(B);  jMatrix X=new jMatrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] / B.A[i][j];    }  }  return X;}  }
class C{  public void close(){  if (DBG)   Log.d(TAG,"close()");  unregisterApp();  mConnState=CONN_STATE_CLOSED;}  }
class C{  public long uptime(){  return TimeUnit.MILLISECONDS.toSeconds(runtime.getUptime());}  }
class C{  private void acceptAndOutputSolutions(){  final IBlockingBuffer<IBindingSet[]> sink=context.getSink();  final UnsyncLocalOutputBuffer<IBindingSet> unsyncBuffer=new UnsyncLocalOutputBuffer<IBindingSet>(op.getChunkCapacity(),sink);  final ICloseableIterator<IBindingSet[]> src;  if (sourceIsPipeline) {    src=context.getSource();  } else   if (op.getProperty(Annotations.NAMED_SET_SOURCE_REF) != null) {    final INamedSolutionSetRef namedSetSourceRef=(INamedSolutionSetRef)op.getRequiredProperty(Annotations.NAMED_SET_SOURCE_REF);    src=context.getAlternateSource(namedSetSourceRef);  } else   if (bsFromBindingsSetSource != null) {    src=context.getSource();  } else {    throw new UnsupportedOperationException("Source was not specified");  }  ((PipelinedHashJoinUtility)state).acceptAndOutputSolutions(unsyncBuffer,src,stats,joinConstraints,subquery,bsFromBindingsSetSource,projectInVars,askVar,context.isLastInvocation(),distinctProjectionBufferThreshold,incomingBindingsBufferThreshold,context);  unsyncBuffer.flush();  sink.flush();}  }
class C{  public static <T>SortedSet<T> asImmutable(SortedSet<T> self){  return Collections.unmodifiableSortedSet(self);}  }
class C{  public static void main(String argv[]){  OpenReplicatorSignaler ctrl=new OpenReplicatorSignaler(argv);  ctrl.go();}  }
class C{  public static void announceForAccessibilityCompat(Context context,CharSequence text){  if (Build.VERSION.SDK_INT >= 4) {    AccessibilityManager accessibilityManager=null;    if (null != context) {      accessibilityManager=(AccessibilityManager)context.getSystemService(Context.ACCESSIBILITY_SERVICE);    }    if (null == accessibilityManager || !accessibilityManager.isEnabled()) {      return;    }    final int eventType;    if (Build.VERSION.SDK_INT < 16) {      eventType=AccessibilityEvent.TYPE_VIEW_FOCUSED;    } else {      eventType=AccessibilityEvent.TYPE_ANNOUNCEMENT;    }    final AccessibilityEvent event=AccessibilityEvent.obtain(eventType);    event.getText().add(text);    event.setClassName(Manager.class.getName());    event.setPackageName(context.getPackageName());    accessibilityManager.sendAccessibilityEvent(event);  }}  }
class C{  public Vertex add(Vertex source,Vertex type,Vertex target){  source.addRelationship(type,target);  return source;}  }
class C{  private void leaveEditMode(final boolean update){  if (update) {    final RegisterInformationInternal editedRegister=m_registerModel.getRegisterInformation(this.m_editedRegister);    if (!Objects.equals(m_editValue,editedRegister.getValue())) {      beginRegisterUpdate();      m_registerModel.setValue(editedRegister.getRegisterName(),m_editValue);      endRegisterUpdate();    }  }  m_caret.setVisible(false);  m_editedRegister=-1;  m_caretPosition=0;  repaint();}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof MBeanPermission))   return false;  MBeanPermission that=(MBeanPermission)obj;  return (this.mask == that.mask) && (this.getName().equals(that.getName()));}  }
class C{  public boolean isInfo(){  return logger.isLoggable(Level.INFO);}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=(int)(getItemHeight() / 2);  Paint paint=new Paint();  paint.setColor(getResources().getColor(R.color.lable_blue));  paint.setStrokeWidth((float)5);  canvas.drawLine(0,center - offset,getWidth(),center - offset,paint);  canvas.drawLine(0,center + offset,getWidth(),center + offset,paint);}  }
class C{  CacheConfiguration cacheConfiguration(String gridName){  CacheConfiguration cacheCfg=defaultCacheConfiguration();  cacheCfg.setCacheMode(REPLICATED);  cacheCfg.setWriteSynchronizationMode(FULL_SYNC);  return cacheCfg;}  }
class C{  private void onMove(final int x,final int y,final Direction direction,final double speed){  double oldx=this.x;  double oldy=this.y;  setSpeed(direction.getdx() * speed,direction.getdy() * speed);  if ((Direction.LEFT == direction) || (Direction.RIGHT == direction)) {    this.y=y;    if (compareDouble(this.x,x,1.0)) {      this.dx=calcDeltaMovement(this.x + this.dx * 0.1,x,direction.getdx()) * speed;    } else {      this.x=x;    }    this.dy=0;  } else   if ((Direction.UP == direction) || (Direction.DOWN == direction)) {    this.x=x;    this.dx=0;    if (compareDouble(this.y,y,1.0)) {      this.dy=calcDeltaMovement(this.y + this.dy * 0.1,y,direction.getdy()) * speed;    } else {      this.y=y;    }  } else {    this.x=x;    this.y=y;  }  if (!compareDouble(this.x,oldx,EPSILON) || !compareDouble(this.y,oldy,EPSILON) || !compareDouble(oldx,(int)oldx,EPSILON)|| !compareDouble(oldy,(int)oldy,EPSILON)) {    onPosition(x,y);  }}  }
class C{  private void deleteClusterDocument(final ClusterDeleteTask currentState){  sendRequest(HostUtils.getCloudStoreHelper(this).createDelete(getClusterDocumentLink(currentState)).setCompletion(null));}  }
class C{  public float readFloatFromXML(Element node) throws Exception {  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  return ((Float)getPrimitive(node)).floatValue();}  }
class C{  @Override public int first(){  cachedBreakPositions=null;  dictionaryCharCount=0;  positionInCache=0;  return super.first();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public BooleanQueryResultFormat(String name,String mimeType,Charset charset,String fileExt){  super(name,mimeType,charset,fileExt);}  }
class C{  public static TableXYDataset createTestTableXYDataset(){  DefaultTableXYDataset result=new DefaultTableXYDataset();  XYSeries series1=new XYSeries("Series 1",false,false);  series1.add(1.0,2.0);  series1.add(2.0,5.0);  XYSeries series2=new XYSeries("Series 2",false,false);  series2.add(1.0,4.0);  series2.add(2.0,3.0);  result.addSeries(series1);  result.addSeries(series2);  return result;}  }
class C{  public String removeHttpHeader(String name){  return headers.remove(name);}  }
class C{  public void delete(){  String targetId=override.isRoleOverride() ? override.getRole().getId() : override.getUser().getId();  ((JDAImpl)override.getJDA()).getRequester().delete(Requester.DISCORD_API_PREFIX + "channels/" + override.getChannel().getId()+ "/permissions/"+ targetId);}  }
class C{  public void run(){  while (this.isRunning) {    try {synchronized (this) {        while (sipStack.maxConnections != -1 && this.nConnections >= sipStack.maxConnections) {          try {            this.wait();            if (!this.isRunning)             return;          } catch (          InterruptedException ex) {            break;          }        }        this.nConnections++;      }      Socket newsock=sock.accept();      if (sipStack.isLoggingEnabled()) {        getSIPStack().getStackLogger().logDebug("Accepting new connection!");      }      incomingTcpMessageChannels.add(new TCPMessageChannel(newsock,sipStack,this));    } catch (    SocketException ex) {      this.isRunning=false;    }catch (    IOException ex) {      if (sipStack.isLoggingEnabled())       getSIPStack().getStackLogger().logException(ex);      continue;    }catch (    Exception ex) {      InternalErrorHandler.handleException(ex);    }  }}  }
class C{  public String globalInfo(){  return "Reads a Matlab file containing a single matrix in ASCII format.";}  }
class C{  @JsonCreator public ClockEntry(@JsonProperty("nodeId") short nodeId,@JsonProperty("version") long version){  if (nodeId < 0)   throw new IllegalArgumentException("Node id " + nodeId + " is not in the range (0, "+ Short.MAX_VALUE+ ").");  if (version < 1)   throw new IllegalArgumentException("Version " + version + " is not in the range (1, "+ Short.MAX_VALUE+ ").");  this.nodeId=nodeId;  this.version=version;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Builder put(String key,int value){  if (key != null) {    mParams.put(key,String.valueOf(value));  }  return this;}  }
class C{  @LargeTest public void testPerformanceVideoItemProperties() throws Exception {  final String videoItemFileName1=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_800kbps_1_17.mp4";  final int videoItemStartTime1=0;  final int videoItemEndTime1=10100;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final int aspectRatio=MediaProperties.ASPECT_RATIO_3_2;  final int fileType=MediaProperties.FILE_MP4;  final int videoCodecType=MediaProperties.VCODEC_H264;  final int duration=77366;  final int videoBitrate=3169971;  final int fps=30;  final int videoProfile=MediaProperties.H264Profile.H264ProfileBaseline;  final int videoLevel=MediaProperties.H264Level.H264Level13;  final int width=1080;  final int height=MediaProperties.HEIGHT_720;  int timeTaken=0;  final String[] loggingInfo=new String[1];  final MediaVideoItem mediaVideoItem=new MediaVideoItem(mVideoEditor,"m0",videoItemFileName1,renderingMode);  mediaVideoItem.setExtractBoundaries(videoItemStartTime1,videoItemEndTime1);  long beginTime=SystemClock.uptimeMillis();  for (int i=0; i < (NUM_OF_ITERATIONS * 10); i++) {    try {      assertEquals("Aspect Ratio Mismatch",aspectRatio,mediaVideoItem.getAspectRatio());      assertEquals("File Type Mismatch",fileType,mediaVideoItem.getFileType());      assertEquals("VideoCodec Mismatch",videoCodecType,mediaVideoItem.getVideoType());      assertEquals("duration Mismatch",duration,mediaVideoItem.getDuration());      assertEquals("Video Profile ",videoProfile,mediaVideoItem.getVideoProfile());      assertEquals("Video Level ",videoLevel,mediaVideoItem.getVideoLevel());      assertEquals("Video height ",height,mediaVideoItem.getHeight());      assertEquals("Video width ",width,mediaVideoItem.getWidth());    } catch (    Exception e1) {      assertTrue("Can not create Video Item with file name = " + e1.toString(),false);    }  }  timeTaken=calculateTimeTaken(beginTime,(NUM_OF_ITERATIONS * 10));  loggingInfo[0]="Time taken to get Media Properties :" + timeTaken;  writeTimingInfo("testPerformanceVideoItemProperties:",loggingInfo);}  }
class C{  protected void removeAnnotation(final Annotation annotation,final boolean fireModelChanged){  if (annotations.containsKey(annotation)) {    Position pos=null;    pos=annotations.get(annotation);    annotations.remove(annotation);    positions.remove(pos);    getAnnotationModelEvent().annotationRemoved(annotation,pos);    if (fireModelChanged) {      fireModelChanged();    }  }}  }
class C{  @Override public void onPrepared(MediaPlayer player){  LogHelper.d(TAG,"onPrepared from MediaPlayer");  configMediaPlayerState();}  }
class C{  public static Paint newGuidelinePaint(){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(SEMI_TRANSPARENT));  paint.setStrokeWidth(DEFAULT_GUIDELINE_THICKNESS_PX);  return paint;}  }
class C{  public boolean isMissingSparse(int indexOfIndex){  if (Double.isNaN(m_AttValues[indexOfIndex])) {    return true;  }  return false;}  }
class C{  public void addEntranceProcessingItem(EntranceProcessingItem epi){  this.entranceProcessingItems.add(epi);  this.addProcessingItem(epi);}  }
class C{  public static <T>Arc<T> readCeilArc(int label,FST<T> fst,Arc<T> follow,Arc<T> arc,BytesReader in) throws IOException {  if (label == FST.END_LABEL) {    if (follow.isFinal()) {      if (follow.target <= 0) {        arc.flags=FST.BIT_LAST_ARC;      } else {        arc.flags=0;        arc.nextArc=follow.target;        arc.node=follow.target;      }      arc.output=follow.nextFinalOutput;      arc.label=FST.END_LABEL;      return arc;    } else {      return null;    }  }  if (!FST.targetHasArcs(follow)) {    return null;  }  fst.readFirstTargetArc(follow,arc,in);  if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {    int low=arc.arcIdx;    int high=arc.numArcs - 1;    int mid=0;    while (low <= high) {      mid=(low + high) >>> 1;      in.setPosition(arc.posArcsStart);      in.skipBytes(arc.bytesPerArc * mid + 1);      final int midLabel=fst.readLabel(in);      final int cmp=midLabel - label;      if (cmp < 0) {        low=mid + 1;      } else       if (cmp > 0) {        high=mid - 1;      } else {        arc.arcIdx=mid - 1;        return fst.readNextRealArc(arc,in);      }    }    if (low == arc.numArcs) {      return null;    }    arc.arcIdx=(low > high ? high : low);    return fst.readNextRealArc(arc,in);  }  fst.readFirstRealTargetArc(follow.target,arc,in);  while (true) {    if (arc.label >= label) {      return arc;    } else     if (arc.isLast()) {      return null;    } else {      fst.readNextRealArc(arc,in);    }  }}  }
class C{  @Override public void deliverResult(T data){  if (isReset()) {    if (data != null) {      onReleaseResources(data);    }  }  T oldData=mData;  mData=data;  if (isStarted()) {    super.deliverResult(data);  }  if (oldData != null) {    onReleaseResources(oldData);  }}  }
class C{  public CompositeBucketIterator(BucketIterator... iters){  this.iters=iters;}  }
class C{  public static boolean isLws(byte b){switch (b) {case 13:case 10:case 32:case 9:    return true;}return false;}  }
class C{  public void addDebugInfo(String name,Object val){  if (debugInfo == null) {    debugInfo=new SimpleOrderedMap<>();  }  debugInfo.add(name,val);}  }
class C{  public Map attributes(){  return this.attributes;}  }
class C{  public static String approxSourceLocation(Node node){  StackTraceElement[] stackTraceElements=approxSourceStackTraceElement(node);  if (stackTraceElements != null && stackTraceElements.length > 0) {    StackTraceElement top=stackTraceElements[0];    if (top.getFileName() != null && top.getLineNumber() >= 0) {      return top.getFileName() + ":" + top.getLineNumber();    }  }  return null;}  }
class C{  public void removeById(String id){  workspaceCache.invalidate(new Key(id,null,true));}  }
class C{  private void validateChildren(DataPageMain dpMain,DataPageExtra dpExtra) throws IOException {  int childTailPageNumber=dpMain._childTailPageNumber;  if (dpMain._leaf) {    if (childTailPageNumber != INVALID_INDEX_PAGE_NUMBER) {      throw new IllegalStateException(withErrorContext("Leaf page has tail " + dpMain));    }    return;  }  if ((dpExtra._entryView.size() == 1) && dpMain.hasChildTail()) {    throw new IllegalStateException(withErrorContext("Single child is tail " + dpMain));  }  for (  Entry e : dpExtra._entryView) {    validateEntryForPage(dpMain,e);    Integer subPageNumber=e.getSubPageNumber();    DataPageMain childMain=_dataPages.get(subPageNumber);    if (childMain != null) {      if (childMain._parentPageNumber != null) {        if (childMain._parentPageNumber != dpMain._pageNumber) {          throw new IllegalStateException(withErrorContext("Child's parent is incorrect " + childMain));        }        boolean expectTail=(subPageNumber == childTailPageNumber);        if (expectTail != childMain._tail) {          throw new IllegalStateException(withErrorContext("Child tail status incorrect " + childMain));        }      }      Entry lastEntry=childMain.getExtra()._entryView.getLast();      if (e.compareTo(lastEntry) != 0) {        throw new IllegalStateException(withErrorContext("Invalid entry " + e + " but child is "+ lastEntry));      }    }  }}  }
class C{  private static CookieOrigin adjustEffectiveHost(final CookieOrigin origin){  String host=origin.getHost();  boolean isLocalHost=true;  for (int i=0; i < host.length(); i++) {    char ch=host.charAt(i);    if (ch == '.' || ch == ':') {      isLocalHost=false;      break;    }  }  if (isLocalHost) {    host+=".local";    return new CookieOrigin(host,origin.getPort(),origin.getPath(),origin.isSecure());  } else {    return origin;  }}  }
class C{  private static BigInteger unsigned(long l){  BigInteger i=BigInteger.valueOf(l & 0x7fffffffffffffffL);  if (l < 0) {    i=i.setBit(Long.SIZE - 1);  }  return i;}  }
class C{  public void testBuildTextFromElement(){  LOGGER.debug("buildTextFromElement");  Element element=new Element(Tag.valueOf("div"),"");  element.text("test");  SimpleTextElementBuilder instance=new SimpleTextElementBuilder();  String expResult="test";  String result=instance.buildTextFromElement(element);  assertEquals(expResult,result);}  }
class C{  public void registerAnimated(Animation cmp){  if (animatableComponents == null) {    animatableComponents=new ArrayList<Animation>();  }  if (!animatableComponents.contains(cmp)) {    animatableComponents.add(cmp);  }  Display.getInstance().notifyDisplay();}  }
class C{  public TooManyListenersException(){  super();}  }
class C{  public static void write(float[] latpoints,float[] lonpoints,int units,int lType,int nsegs,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.POLY_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_POLY);  dos.writeByte(RENDERTYPE_LATLON);  dos.writeByte(lType);  int length=latpoints.length;  if (lonpoints.length < latpoints.length) {    length=lonpoints.length;  }  dos.writeInt(length);  for (int i=0; i < length; i++) {    dos.writeFloat(latpoints[i]);    dos.writeFloat(lonpoints[i]);  }  dos.writeByte(units);  dos.writeInt(nsegs);  properties.write(dos);}  }
class C{  public void runButtonActionPerformed(java.awt.event.ActionEvent e){  if (!testRunning) {    if (readSetupData()) {      if (outTest) {        if (initializeOutputTest()) {          runOutputTest();        }      } else       if (wrapTest) {        if (initializeWraparoundTest()) {          runWraparoundTest();        }      }    }  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static void assertFalse(String message,boolean condition){  if (condition) {    fail(message);  }}  }
class C{  public RoleInfo(){  m_sID=null;  m_sName=null;}  }
class C{  private static void writeToLog(int level,long totalNanos,long count,ProfilingTimerNode parent,String taskName,Log log,String logAppendMessage){  if (log == null) {    return;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < level; i++) {    sb.append('\t');  }  String durationText=String.format("%s%s",formatElapsed(totalNanos),count == 1 ? "" : String.format(" across %d invocations, average: %s",count,formatElapsed(totalNanos / count)));  String text=parent == null ? String.format("total time %s",durationText) : String.format("[%s] took %s",taskName,durationText);  sb.append(text);  sb.append(logAppendMessage);  log.info(sb.toString());}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (m_CutPoints != null) {    convertInstance(instance);    return true;  }  bufferInput(instance);  return false;}  }
class C{  public void removeNotification(@NotNull Notification notification){  int index=notificationWidget.indexOf(notification);  if (index >= 0) {    panel.removeRow(index);    notificationWidget.remove(index);  }}  }
class C{  public static void initializeStatically(final Set<String> extraImports,final Set<String> extraStaticImports){  if (extraImports != null) {    staticExtraImports=extraImports;  }  if (extraStaticImports != null) {    staticExtraStaticImports=extraStaticImports;  }}  }
class C{  public void updateSeries(CandleSeries source,int skip,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleSeries).");  }  if (getLength() == null || getLength() < 1) {    throw new IllegalArgumentException("SMA period must be greater than zero.");  }  if (source.getItemCount() > skip) {    CandleItem candleItem=(CandleItem)source.getDataItem(skip);    if (0 != candleItem.getClose()) {      if (this.yyValues.size() == getLength()) {        if (newBar) {          this.yyValues.removeLast();          this.yyValues.addFirst(candleItem.getClose());        } else {          this.yyValues.removeFirst();          this.yyValues.addFirst(candleItem.getClose());        }      } else {        if (newBar) {          this.yyValues.addFirst(candleItem.getClose());        } else {          this.yyValues.removeFirst();          this.yyValues.addFirst(candleItem.getClose());        }      }      if (this.yyValues.size() == getLength()) {        double high=Collections.max(this.yyValues);        double low=Collections.min(this.yyValues);        double fastKR=0;        if ((high - low) > 0)         fastKR=((candleItem.getClose() - low) / (high - low)) * 100;        if (this.getInverse()) {          fastKR=((high - candleItem.getClose()) / (high - low)) * -100;        }        if (this.fullKRValues.size() == this.getKSmoothing()) {          if (newBar) {            sumFullKRValues=sumFullKRValues - this.fullKRValues.getLast() + fastKR;            this.fullKRValues.removeLast();            this.fullKRValues.addFirst(fastKR);          } else {            sumFullKRValues=sumFullKRValues - this.fullKRValues.getFirst() + fastKR;            this.fullKRValues.removeFirst();            this.fullKRValues.addFirst(fastKR);          }        } else {          if (newBar) {            sumFullKRValues=sumFullKRValues + fastKR;            this.fullKRValues.addFirst(fastKR);          } else {            sumFullKRValues=sumFullKRValues + fastKR - this.fullKRValues.getFirst();            this.fullKRValues.removeFirst();            this.fullKRValues.addFirst(fastKR);          }        }        if (this.fullKRValues.size() == this.getKSmoothing()) {          double fullKR=sumFullKRValues / this.getKSmoothing();          if (this.fullDValues.size() == this.getPercentD()) {            if (newBar) {              sumFullDValues=sumFullDValues - this.fullDValues.getLast() + fullKR;              this.fullDValues.removeLast();              this.fullDValues.addFirst(fullKR);            } else {              sumFullDValues=sumFullDValues - this.fullDValues.getFirst() + fullKR;              this.fullDValues.removeFirst();              this.fullDValues.addFirst(fullKR);            }          } else {            if (newBar) {              sumFullDValues=sumFullDValues + fullKR;              this.fullDValues.addFirst(fullKR);            } else {              sumFullDValues=sumFullDValues + fullKR - this.fullDValues.getFirst();              this.fullDValues.removeFirst();              this.fullDValues.addFirst(fullKR);            }          }          if (this.fullDValues.size() == this.getPercentD()) {            double fullD=sumFullDValues / this.getPercentD();            if (newBar) {              StochasticOscillatorItem dataItem=new StochasticOscillatorItem(candleItem.getPeriod(),new BigDecimal(fullD));              this.add(dataItem,false);            } else {              StochasticOscillatorItem dataItem=(StochasticOscillatorItem)this.getDataItem(this.getItemCount() - 1);              dataItem.setStochasticOscillator(fullD);            }          }        }      }    }  }}  }
class C{  public ProjectContext createProject(String name,String folder){  ProjectRef ref=registry.createProjectRef(name,folder);  String path=ref.getPath();  new File(path).mkdirs();  new File(path,PROJECT_ASSETS_DIR).mkdirs();  new File(path,PROJECT_SCENES_DIR).mkdirs();  ProjectContext newProjectContext=new ProjectContext(-1);  newProjectContext.path=path;  newProjectContext.name=ref.getName();  newProjectContext.assetManager=new EditorAssetManager(new FileHandle(path + "/" + ProjectManager.PROJECT_ASSETS_DIR));  EditorScene scene=new EditorScene();  scene.setName(DEFAULT_SCENE_NAME);  scene.skybox=SkyboxBuilder.createDefaultSkybox();  scene.environment.setFog(new Fog());  scene.setId(newProjectContext.obtainID());  kryoManager.saveScene(newProjectContext,scene);  scene.sceneGraph.batch=modelBatch;  newProjectContext.scenes.add(scene.getName());  newProjectContext.currScene=scene;  saveProject(newProjectContext);  newProjectContext.assetManager.createStandardAssets();  return newProjectContext;}  }
class C{  public List<ContentItem> contentItems(){  return contentItems;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Override public int compareTo(SortContainer o){  if ((m_Value == null) || (o.getValue() == null)) {    if (m_Value == o.getValue()) {      return 0;    }    if (m_Value == null) {      return -1;    } else {      return +1;    }  } else {    return ((Comparable)m_Value).compareTo(o.getValue());  }}  }
class C{  private E awaitMatch(Node s,Node pred,E e,boolean timed,long nanos){  final long deadline=timed ? System.nanoTime() + nanos : 0L;  Thread w=Thread.currentThread();  int spins=-1;  ThreadLocalRandom randomYields=null;  for (; ; ) {    Object item=s.item;    if (item != e) {      s.forgetContents();      return LinkedTransferQueue.<E>cast(item);    }    if ((w.isInterrupted() || (timed && nanos <= 0)) && s.casItem(e,s)) {      unsplice(pred,s);      return e;    }    if (spins < 0) {      if ((spins=spinsFor(pred,s.isData)) > 0)       randomYields=ThreadLocalRandom.current();    } else     if (spins > 0) {      --spins;      if (randomYields.nextInt(CHAINED_SPINS) == 0)       Thread.yield();    } else     if (s.waiter == null) {      s.waiter=w;    } else     if (timed) {      nanos=deadline - System.nanoTime();      if (nanos > 0L)       LockSupport.parkNanos(this,nanos);    } else {      LockSupport.park(this);    }  }}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public void buildColorTable(int[] inPixels,int[] table){  int count=inPixels.length;  maximumColors=table.length;  for (int i=0; i < count; i++) {    insertColor(inPixels[i]);    if (colors > reduceColors)     reduceTree(reduceColors);  }  if (colors > maximumColors)   reduceTree(maximumColors);  buildColorTable(root,table,0);}  }
class C{  private void loadFile(String filename,AbstractFileLoader... loaders){  DataSortedTableModel model;  this.m_Filename=filename;  createTitle();  if (filename.equals("")) {    model=null;  } else {    model=new DataSortedTableModel(filename,loaders);    model.setShowAttributeIndex(getShowAttributeIndex());  }  m_TableData.setModel(model);  setChanged(false);  createName();}  }
class C{  public void writeBit(boolean value,int probability) throws IOException {  int split=low + probability * ((high - low) >>> 12);  if (value) {    high=split;  } else {    low=split + 1;  }  while (low >>> 24 == high >>> 24) {    out.write(high >> 24);    low<<=8;    high=(high << 8) | 0xff;  }}  }
class C{  public void updateDescriptor(DescriptorVO descriptor){  Locale locale=getServiceClient().getLocale();  checkPermission(DescripcionSecurityManager.ADMINISTRAR_DESCRIPTORES_ACTION);  descriptor.setTimestamp(new Date());  iniciarTransaccion();  AuditoriaDescripcion.auditaModificacionDescriptor(locale,this,descriptor);  descriptorDBEntity.updateDescriptorVO(descriptor);  if (Constants.FALSE_STRING.equals(descriptor.getTieneDescr()) && StringUtils.isNotBlank(descriptor.getIdFichaDescr()))   createFicha(descriptor.getId(),TipoFicha.FICHA_DESCRIPTOR);  commit();}  }
class C{  public static boolean isLessThanUnsigned(int n1,int n2){  return (n1 < n2) ^ ((n1 < 0) != (n2 < 0));}  }
class C{  @Override public final HG walkSubTree(double dsq,HG hg){  if (subdivp(dsq,hg)) {    for (int k=0; k < Cell.NSUB; k++) {      Node r=subp[k];      if (r != null)       hg=r.walkSubTree(dsq / 4.0,hg);    }  } else {    hg=gravSub(hg);  }  return hg;}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_lang_String(){  StringTokenizer st=new StringTokenizer("This:is:a:test:String",":");  assertTrue("Created incorrect tokenizer",st.countTokens() == 5 && (st.nextElement().equals("This")));  st=new StringTokenizer("This:is:a:test:String",null);  try {    new StringTokenizer(null,":");    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  @Override public void register(EValidatorRegistrar registrar){}  }
class C{  public TreeBarrier(int parties){  this.parties=parties;  locks=new Lock[parties - 1];  for (int i=0; i < locks.length; i++)   locks[i]=new ReentrantLock(false);  competitionCondition=true;}  }
class C{  public void attrAdded(Attr node,String newv){  if (!mutate) {    declaration=cssEngine.parseStyleDeclaration(SVGStylableElement.this,newv);  }}  }
class C{  protected void tearDown(){}  }
class C{  public long roundTripTime() throws InterruptedException {  latch.await();  return received - sent;}  }
class C{  @Nonnull public BugInstance addParameterAnnotation(int index,String role){  return addInt(index + 1).describe(role);}  }
class C{  public OFActionOutput(short port){  this(port,(short)65535);}  }
class C{  public void onSaveInstanceState(Bundle outState){  Session.saveSession(Session.getActiveSession(),outState);  outState.putParcelable(DIALOG_CALL_BUNDLE_SAVE_KEY,pendingFacebookDialogCall);}  }
class C{  public final void testPSSParameterSpec0205(){  try {    new PSSParameterSpec("SHA-1","MGF1",MGF1ParameterSpec.SHA1,20,-1);    fail("Expected IAE not thrown");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public WrongParameterValueException(String message,Throwable e){  super(message,e);}  }
class C{  public void visitAnnotations(AnnotatedNode node){  super.visitAnnotations(node);  for (  AnnotationNode an : node.getAnnotations()) {    String name=an.getClassNode().getName();    if ((GRAB_CLASS_NAME.equals(name)) || (allowShortGrab && GRAB_SHORT_NAME.equals(name)) || (grabAliases.contains(name))) {      grabAnnotations.add(an);    }    if ((GRABEXCLUDE_CLASS_NAME.equals(name)) || (allowShortGrabExcludes && GRABEXCLUDE_SHORT_NAME.equals(name)) || (grabExcludeAliases.contains(name))) {      grabExcludeAnnotations.add(an);    }    if ((GRABCONFIG_CLASS_NAME.equals(name)) || (allowShortGrabConfig && GRABCONFIG_SHORT_NAME.equals(name)) || (grabConfigAliases.contains(name))) {      grabConfigAnnotations.add(an);    }    if ((GRAPES_CLASS_NAME.equals(name)) || (allowShortGrapes && GRAPES_SHORT_NAME.equals(name)) || (grapesAliases.contains(name))) {      grapesAnnotations.add(an);    }    if ((GRABRESOLVER_CLASS_NAME.equals(name)) || (allowShortGrabResolver && GRABRESOLVER_SHORT_NAME.equals(name)) || (grabResolverAliases.contains(name))) {      grabResolverAnnotations.add(an);    }  }}  }
class C{  public SemImParamsEditor(){}  }
class C{  public static Bootique app(String... args){  if (args == null) {    args=new String[0];  }  return new Bootique(args);}  }
class C{  public boolean finishedParsing(){  return (m_finishedParsing);}  }
class C{  @Override public DeleteObjectsResult deleteObjects(DeleteObjectsRequest deleteObjectsRequest,AmazonS3Client s3Client){  LOGGER.debug("deleteObjects(): deleteObjectRequest.getBucketName() = " + deleteObjectsRequest.getBucketName() + ", deleteObjectRequest.getKeys() = "+ deleteObjectsRequest.getKeys());  List<DeletedObject> deletedObjects=new ArrayList<>();  MockS3Bucket mockS3Bucket=mockS3Buckets.get(deleteObjectsRequest.getBucketName());  for (  KeyVersion keyVersion : deleteObjectsRequest.getKeys()) {    String s3ObjectKey=keyVersion.getKey();    String s3ObjectVersion=keyVersion.getVersion();    String s3ObjectKeyVersion=s3ObjectKey + (s3ObjectVersion != null ? s3ObjectVersion : "");    mockS3Bucket.getObjects().remove(s3ObjectKey);    if (mockS3Bucket.getVersions().remove(s3ObjectKeyVersion) != null) {      DeletedObject deletedObject=new DeletedObject();      deletedObject.setKey(s3ObjectKey);      deletedObject.setVersionId(s3ObjectVersion);      deletedObjects.add(deletedObject);    }  }  return new DeleteObjectsResult(deletedObjects);}  }
class C{  public void stop(){synchronized (mCmdQueue) {    if (mState != STOP) {      Command cmd=new Command();      cmd.requestTime=SystemClock.uptimeMillis();      cmd.code=STOP;      enqueueLocked(cmd);      mState=STOP;    }  }}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ParameterizedAccess.class) {switch (baseFeatureID) {case N4JSPackage.PARAMETERIZED_ACCESS__TYPE_ARGS:      return N4JSPackage.NEW_EXPRESSION__TYPE_ARGS;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private EdgeInitializer(){}  }
class C{  @Override public Long dbSize(){  checkIsInMultiOrPipeline();  client.dbSize();  return client.getIntegerReply();}  }
class C{  @Override public void paint(Graphics g){  Graphics2D g2=(Graphics2D)g;  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  super.paint(g2);}  }
class C{  public LiveAnalysis(){  this(false,false,false,true);}  }
class C{  public static boolean isSameElementType(PsiElement psiElement1,PsiElement psiElement2){  return isSameElementType(psiElement1.getNode(),psiElement2.getNode());}  }
class C{  public static IDs createIDs(final String rawJSON) throws TwitterException {  try {    return IDsConstructor.newInstance(rawJSON);  } catch (  final InstantiationException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new TwitterException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.045 -0500",hash_original_method="80BC7186A49A4C21DCD2AD9B9D266EE5",hash_generated_method="DFA59F9CD1F3FB4E73932E49179602A6") public void unregisterNotifHandler(){  __notifhand=null;}  }
class C{  public void removeConstituent(Constituent constituent){  constituents.remove(constituent);  removeAllTokenFromConstituentMapping(constituent);}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws IOException, SAXException {  return null;}  }
class C{  @Override public int writeTelegram(char[] buffer,int type,Object id){  return enqueueTelegram(buffer);}  }
class C{  public void testBatteryUsage_showMapView(){  recordingLongTrack(false,R.string.track_detail_map_tab);}  }
class C{  private void convertData(){  final IDirectedGraph<INaviViewNode,INaviEdge> graph=naviView.getGraph();  final List<ViewNode> blocks=new ArrayList<ViewNode>();  final List<ViewEdge> edges=new ArrayList<ViewEdge>();  for (  final INaviViewNode block : graph.getNodes()) {    final ViewNode newBlock=convert(block);    cachedNodes.put(block,newBlock);    blocks.add(newBlock);  }  for (  final INaviViewNode block : graph.getNodes()) {    if (block.getParentGroup() != null) {      ((GroupNode)cachedNodes.get(block.getParentGroup())).addNode(cachedNodes.get(block));    }  }  for (  final INaviEdge edge : graph.getEdges()) {    final ViewNode source=cachedNodes.get(edge.getSource());    final ViewNode target=cachedNodes.get(edge.getTarget());    final ViewEdge viewEdge=new ViewEdge(edge,source,target);    edges.add(viewEdge);    cachedEdges.put(edge,viewEdge);  }  viewGraph=new ViewGraph(blocks,edges);}  }
class C{  private boolean accept(AlertDefinitionAPIEntity alertDef){  if (!alertDef.getTags().get("alertExecutorId").equals(alertExecutorId)) {    if (LOG.isDebugEnabled()) {      LOG.debug("alertDef does not belong to this alertExecutorId : " + alertExecutorId + ", alertDef : "+ alertDef);    }    return false;  }  int targetPartitionSeq=partitioner.partition(numPartitions,alertDef.getTags().get(AlertConstants.POLICY_TYPE),alertDef.getTags().get(AlertConstants.POLICY_ID));  if (targetPartitionSeq == partitionSeq)   return true;  return false;}  }
class C{  public static Put flagsToPut(MailboxMessage message,Flags flags){  Put put=new Put(messageRowKey(message));  if (flags.contains(Flag.ANSWERED)) {    put.add(MESSAGES_META_CF,FLAGS_ANSWERED,MARKER_PRESENT);  } else {    put.add(MESSAGES_META_CF,FLAGS_ANSWERED,MARKER_MISSING);  }  if (flags.contains(Flag.DELETED)) {    put.add(MESSAGES_META_CF,FLAGS_DELETED,MARKER_PRESENT);  } else {    put.add(MESSAGES_META_CF,FLAGS_DELETED,MARKER_MISSING);  }  if (flags.contains(Flag.DRAFT)) {    put.add(MESSAGES_META_CF,FLAGS_DRAFT,MARKER_PRESENT);  } else {    put.add(MESSAGES_META_CF,FLAGS_DRAFT,MARKER_MISSING);  }  if (flags.contains(Flag.FLAGGED)) {    put.add(MESSAGES_META_CF,FLAGS_FLAGGED,MARKER_PRESENT);  } else {    put.add(MESSAGES_META_CF,FLAGS_FLAGGED,MARKER_MISSING);  }  if (flags.contains(Flag.RECENT)) {    put.add(MESSAGES_META_CF,FLAGS_RECENT,MARKER_PRESENT);  } else {    put.add(MESSAGES_META_CF,FLAGS_RECENT,MARKER_MISSING);  }  if (flags.contains(Flag.SEEN)) {    put.add(MESSAGES_META_CF,FLAGS_SEEN,MARKER_PRESENT);  } else {    put.add(MESSAGES_META_CF,FLAGS_SEEN,MARKER_MISSING);  }  if (flags.contains(Flag.USER)) {    put.add(MESSAGES_META_CF,FLAGS_USER,MARKER_PRESENT);  } else {    put.add(MESSAGES_META_CF,FLAGS_USER,MARKER_MISSING);  }  for (  String flag : flags.getUserFlags()) {    put.add(MESSAGES_META_CF,userFlagToBytes(flag),MARKER_PRESENT);  }  return put;}  }
class C{  private void validateExpectedPartitionValuesDeleteRequest(ExpectedPartitionValuesDeleteRequest expectedPartitionValuesDeleteRequest){  partitionKeyGroupHelper.validatePartitionKeyGroupKey(expectedPartitionValuesDeleteRequest.getPartitionKeyGroupKey());  expectedPartitionValuesDeleteRequest.setExpectedPartitionValues(validateExpectedPartitionValues(expectedPartitionValuesDeleteRequest.getExpectedPartitionValues()));}  }
class C{  private JCExpression expressionNew(){  if (tree.kind == ReferenceKind.ARRAY_CTOR) {    JCNewArray newArr=make.NewArray(make.Type(types.elemtype(tree.getQualifierExpression().type)),List.of(make.Ident(params.first())),null);    newArr.type=tree.getQualifierExpression().type;    return newArr;  } else {    JCNewClass newClass=make.NewClass(null,List.<JCExpression>nil(),make.Type(tree.getQualifierExpression().type),convertArgs(tree.sym,args.toList(),tree.varargsElement),null);    newClass.constructor=tree.sym;    newClass.constructorType=tree.sym.erasure(types);    newClass.type=tree.getQualifierExpression().type;    setVarargsIfNeeded(newClass,tree.varargsElement);    return newClass;  }}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,Math.max(z1,z2));          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,Math.max(z1,constant2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,Math.max(constant1,z2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void dump(HttpServletRequest request){  log.config("Request " + request.getProtocol() + " "+ request.getMethod());  if (!CLogMgt.isLevelFiner())   return;  log.finer("- Server=" + request.getServerName() + ", Port="+ request.getServerPort());  log.finer("- ContextPath=" + request.getContextPath() + ", ServletPath="+ request.getServletPath()+ ", Query="+ request.getQueryString());  log.finer("- From " + request.getRemoteHost() + "/"+ request.getRemoteAddr()+ " - User="+ request.getRemoteUser());  log.finer("- URI=" + request.getRequestURI() + ", URL="+ request.getRequestURL());  log.finer("- AuthType=" + request.getAuthType());  log.finer("- Secure=" + request.isSecure());  log.finer("- PathInfo=" + request.getPathInfo() + " - "+ request.getPathTranslated());  log.finer("- UserPrincipal=" + request.getUserPrincipal());  boolean first=true;  Enumeration e=request.getHeaderNames();  while (e.hasMoreElements()) {    if (first)     log.finer("- Header:");    first=false;    String key=(String)e.nextElement();    Object value=request.getHeader(key);    log.finer("  - " + key + " = "+ value);  }  first=true;  try {    String enc=request.getCharacterEncoding();    if (enc == null)     request.setCharacterEncoding(WebEnv.ENCODING);  } catch (  Exception ee) {    log.log(Level.SEVERE,"Set CharacterEncoding=" + WebEnv.ENCODING,ee);  }  e=request.getParameterNames();  while (e.hasMoreElements()) {    if (first)     log.finer("- Parameter:");    first=false;    String key=(String)e.nextElement();    String value=WebUtil.getParameter(request,key);    log.finer("  - " + key + " = "+ value);  }  first=true;  e=request.getAttributeNames();  while (e.hasMoreElements()) {    if (first)     log.finer("- Attributes:");    first=false;    String key=(String)e.nextElement();    Object value=request.getAttribute(key);    log.finer("  - " + key + " = "+ value);  }  Cookie[] ccc=request.getCookies();  if (ccc != null) {    for (int i=0; i < ccc.length; i++) {      if (i == 0)       log.finer("- Cookies:");      log.finer("  - " + ccc[i].getName() + ", Domain="+ ccc[i].getDomain()+ ", Path="+ ccc[i].getPath()+ ", MaxAge="+ ccc[i].getMaxAge());    }  }  log.finer("- Encoding=" + request.getCharacterEncoding());  log.finer("- Locale=" + request.getLocale());  first=true;  e=request.getLocales();  while (e.hasMoreElements()) {    if (first)     log.finer("- Locales:");    first=false;    log.finer("  - " + e.nextElement());  }  log.finer("- Class=" + request.getClass().getName());}  }
class C{  private void cleanState(long index){  if (keepAliveIndex > 0) {    log.release(keepAliveIndex);  }  context.sessions().unregisterSession(id);  if (references == 0) {    log.release(id);    log.release(index);  } else {    this.closeIndex=index;  }}  }
class C{  public void loadColumns(List<Integer> selectedCols,ByteBuffer buf){  int pos=buf.position();  for (int i=0; i < selectedCols.size(); i++) {    int c=selectedCols.get(i);    int len=info.codeSystem.codeLength(c,buf);    cols[c].set(buf.array(),buf.arrayOffset() + pos,len);    pos+=len;    buf.position(pos);  }}  }
class C{  public void close(GoogleRelayedCandidateDatagramSocket relayedCandidateSocket){  setSendKeepAliveMessageInterval(SEND_KEEP_ALIVE_MESSAGE_INTERVAL_NOT_SPECIFIED);}  }
class C{  public static <T>List<Tree<T>> depthFirstTraversal(Tree<T> tree){  Stack<Tree<T>> treeStack=new Stack<>();  treeStack.push(tree);  ArrayList<Tree<T>> dfs=new ArrayList<>();  while (!treeStack.isEmpty()) {    Tree<T> t=treeStack.pop();    dfs.add(t);    Stack<Tree<T>> tmpStack=new Stack<>();    for (    Tree<T> child : t.childrenIterator()) {      tmpStack.add(child);    }    while (!tmpStack.isEmpty()) {      treeStack.add(tmpStack.pop());    }  }  return dfs;}  }
class C{  public UserDeletionConstraintException(String message,Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  protected void init_actions(){  action_obj=new CUP$actions();}  }
class C{  public static void v(String tag,String msg){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  Shape hotspot;  EntityCollection entities=null;  if (info != null) {    entities=info.getOwner().getEntityCollection();  }  double x=dataset.getXValue(series,item);  double y=dataset.getYValue(series,item);  if (Double.isNaN(x) || Double.isNaN(y)) {    return;  }  double transX=domainAxis.valueToJava2D(x,dataArea,plot.getDomainAxisEdge());  double transY=rangeAxis.valueToJava2D(y,dataArea,plot.getRangeAxisEdge());  PlotOrientation orientation=plot.getOrientation();  if ((pass == 0) && this.guideLinesVisible) {    g2.setStroke(this.guideLineStroke);    g2.setPaint(this.guideLinePaint);    if (orientation == PlotOrientation.HORIZONTAL) {      g2.draw(new Line2D.Double(transY,dataArea.getMinY(),transY,dataArea.getMaxY()));      g2.draw(new Line2D.Double(dataArea.getMinX(),transX,dataArea.getMaxX(),transX));    } else {      g2.draw(new Line2D.Double(transX,dataArea.getMinY(),transX,dataArea.getMaxY()));      g2.draw(new Line2D.Double(dataArea.getMinX(),transY,dataArea.getMaxX(),transY));    }  } else   if (pass == 1) {    Shape shape=getItemShape(series,item);    if (orientation == PlotOrientation.HORIZONTAL) {      shape=ShapeUtilities.createTranslatedShape(shape,transY,transX);    } else     if (orientation == PlotOrientation.VERTICAL) {      shape=ShapeUtilities.createTranslatedShape(shape,transX,transY);    }    hotspot=shape;    if (shape.intersects(dataArea)) {      g2.setPaint(getPaint(dataset,series,item));      g2.fill(shape);      if (this.drawOutlines) {        if (getUseOutlinePaint()) {          g2.setPaint(getItemOutlinePaint(series,item));        } else {          g2.setPaint(getItemPaint(series,item));        }        g2.setStroke(getItemOutlineStroke(series,item));        g2.draw(shape);      }    }    int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);    int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);    updateCrosshairValues(crosshairState,x,y,domainAxisIndex,rangeAxisIndex,transX,transY,orientation);    if (entities != null) {      addEntity(entities,hotspot,dataset,series,item,transX,transY);    }  }}  }
class C{  public void stopFilteringMulticastV6Packets(){  sendMessage(CMD_STOP_PACKET_FILTERING,MULTICAST_V6,0);}  }
class C{  private static VOServiceDetails createSingleService(String supplierUserKey,VOTechnicalService tp) throws Exception {  container.login(supplierUserKey,ROLE_SERVICE_MANAGER);  VOServiceDetails voProduct=createProduct(tp,"single_product2_" + tp.getTechnicalServiceId() + "_"+ supplierUserKey,sps);  VOPriceModel priceModel=new VOPriceModel();  voProduct=sps.savePriceModel(voProduct,priceModel);  VOMarketplace voMarketplace=new VOMarketplace();  voMarketplace.setMarketplaceId("FUJITSU");  publishServiceToMarketplace(voProduct,voMarketplace,true,true);  container.logout();  return voProduct;}  }
class C{  public Boolean isDot11Configuration(){  return dot11Configuration;}  }
class C{  private boolean okToAdd(Positionable pos,OBlock editBlock){  if (pos instanceof IndicatorTrack) {    OBlock block=((IndicatorTrack)pos).getOccBlock();    if (block != null) {      if (!block.equals(editBlock)) {        int result=JOptionPane.showConfirmDialog(_editor,java.text.MessageFormat.format(Bundle.getMessage("iconBlockConflict"),block.getDisplayName(),editBlock.getDisplayName()),Bundle.getMessage("whichCircuit"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);        if (result == JOptionPane.YES_OPTION) {          java.util.List<Positionable> ic=_circuitMap.get(block);          ic.remove(pos);          ((IndicatorTrack)pos).setOccBlockHandle(new NamedBeanHandle<OBlock>(editBlock.getSystemName(),editBlock));          return true;        }        return false;      }    }  }  return true;}  }
class C{  public Params delayInMs(long delayMs){  this.delayMs=delayMs;  return this;}  }
class C{  void adjustForCurrencyDefaultFractionDigits(FooNumberFormat nf){  DecimalFormatSymbols dfs=nf.getDecimalFormatSymbols();  Currency currency=dfs.getCurrency();  if (currency == null) {    try {      currency=Currency.getInstance(dfs.getInternationalCurrencySymbol());    } catch (    IllegalArgumentException e) {    }  }  if (currency != null) {    int digits=currency.getDefaultFractionDigits();    if (digits != -1) {      int oldMinDigits=nf.getMinimumFractionDigits();      if (oldMinDigits == nf.getMaximumFractionDigits()) {        nf.setMinimumFractionDigits(digits);        nf.setMaximumFractionDigits(digits);      } else {        nf.setMinimumFractionDigits(Math.min(digits,oldMinDigits));        nf.setMaximumFractionDigits(digits);      }    }  }}  }
class C{  public void integrate(){  RatPoly top=pop();  push(top.antiDifferentiate(new RatNum(0)));}  }
class C{  public Precondition_ createPrecondition_(){  Precondition_Impl precondition_=new Precondition_Impl();  return precondition_;}  }
class C{  protected void doRun(){  Object groovy;  groovy=Groovy.newInstance(m_Owner.getFilename(),Object.class);  if (hasMethod(groovy,"run"))   Groovy.invoke(groovy,"run",new Class[]{String[].class},new Object[]{getArgs()}); else   if (hasMethod(groovy,"main"))   Groovy.invoke(groovy,"main",new Class[]{String[].class},new Object[]{getArgs()}); else   throw new IllegalStateException("Neither 'run' nor 'main' method found!");}  }
class C{  public boolean isLeaf(Object nodeObj){  if (debugger == null) {    return true;  }  VariableNode node=(VariableNode)nodeObj;  return children(node).length == 0;}  }
class C{  public void goingToExecuteSUTCode(){  Thread.currentThread().setContextClassLoader(classLoader);}  }
class C{  public void clearBlob(IBlobHandler handler){  if (blobs.containsKey(handler)) {    blobs.get(handler).clearBlob();  }}  }
class C{  IndexingSlowLog(Settings indexSettings,ESLogger indexLogger,ESLogger deleteLogger){  this.indexLogger=indexLogger;  this.deleteLogger=deleteLogger;  this.reformat=indexSettings.getAsBoolean(INDEX_INDEXING_SLOWLOG_REFORMAT,true);  this.indexWarnThreshold=indexSettings.getAsTime(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN,TimeValue.timeValueNanos(-1)).nanos();  this.indexInfoThreshold=indexSettings.getAsTime(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO,TimeValue.timeValueNanos(-1)).nanos();  this.indexDebugThreshold=indexSettings.getAsTime(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG,TimeValue.timeValueNanos(-1)).nanos();  this.indexTraceThreshold=indexSettings.getAsTime(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE,TimeValue.timeValueNanos(-1)).nanos();  this.level=indexSettings.get(INDEX_INDEXING_SLOWLOG_LEVEL,"TRACE").toUpperCase(Locale.ROOT);  this.maxSourceCharsToLog=readSourceToLog(indexSettings);  indexLogger.setLevel(level);  deleteLogger.setLevel(level);}  }
class C{  protected final UsernameTokenType createUsernameToken(String subject,String password){  org.oasis_open.docs.wss._2004._01.oasis_200401_wss_wssecurity_secext_1_0.ObjectFactory objFactory=new org.oasis_open.docs.wss._2004._01.oasis_200401_wss_wssecurity_secext_1_0.ObjectFactory();  UsernameTokenType userNameToken=objFactory.createUsernameTokenType();  AttributedString user=objFactory.createAttributedString();  user.setValue(subject.toString());  userNameToken.setUsername(user);  if (password != null) {    PasswordString pass=objFactory.createPasswordString();    pass.setValue(password);    userNameToken.getAny().add(pass);  }  if (log.isDebugEnabled()) {    log.debug("Username token for user: " + subject + "created");  }  return userNameToken;}  }
class C{  public String invoice(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_Invoice_ID=(Integer)value;  if (isCalloutActive() || C_Invoice_ID == null || C_Invoice_ID.intValue() == 0)   return "";  int C_Payment_ID=Env.getContextAsInt(ctx,WindowNo,"C_Payment_ID");  MPayment payment=new MPayment(ctx,C_Payment_ID,null);  if (payment.getC_Charge_ID() != 0 || payment.getC_Invoice_ID() != 0 || payment.getC_Order_ID() != 0)   return Msg.getMsg(ctx,"PaymentIsAllocated");  mTab.setValue("DiscountAmt",Env.ZERO);  mTab.setValue("WriteOffAmt",Env.ZERO);  mTab.setValue("OverUnderAmt",Env.ZERO);  int C_InvoicePaySchedule_ID=0;  if (Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"C_Invoice_ID") == C_Invoice_ID.intValue() && Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"C_InvoicePaySchedule_ID") != 0) {    C_InvoicePaySchedule_ID=Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"C_InvoicePaySchedule_ID");  }  Timestamp ts=Env.getContextAsDate(ctx,WindowNo,"DateTrx");  String sql="SELECT C_BPartner_ID,C_Currency_ID," + " invoiceOpen(C_Invoice_ID, ?)," + " invoiceDiscount(C_Invoice_ID,?,?), IsSOTrx "+ "FROM C_Invoice WHERE C_Invoice_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_InvoicePaySchedule_ID);    pstmt.setTimestamp(2,ts);    pstmt.setInt(3,C_InvoicePaySchedule_ID);    pstmt.setInt(4,C_Invoice_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      BigDecimal InvoiceOpen=rs.getBigDecimal(3);      if (InvoiceOpen == null)       InvoiceOpen=Env.ZERO;      BigDecimal DiscountAmt=rs.getBigDecimal(4);      if (DiscountAmt == null)       DiscountAmt=Env.ZERO;      mTab.setValue("InvoiceAmt",InvoiceOpen);      mTab.setValue("Amount",InvoiceOpen.subtract(DiscountAmt));      mTab.setValue("DiscountAmt",DiscountAmt);      Env.setContext(ctx,WindowNo,"C_Invoice_ID",C_Invoice_ID.toString());      mTab.setValue("C_Invoice_ID",C_Invoice_ID);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return "";}  }
class C{  public void reset(){  m_Dataset=null;  m_IncrementalIndex=0;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void loadLookup(){  if (!isLookup())   return;  log.fine("(" + getColumnName() + ")");  int displayType=getAD_Reference_ID();  if (DisplayType.isLookup(displayType)) {    MLookupInfo lookupInfo=MLookupFactory.getLookupInfo(getCtx(),0,getAD_Process_Para_ID(),getAD_Reference_ID(),Env.getLanguage(getCtx()),getColumnName(),getAD_Reference_Value_ID(),false,"");    if (lookupInfo == null) {      log.log(Level.SEVERE,"(" + getColumnName() + ") - No LookupInfo");      return;    }    if (displayType == DisplayType.Table && (getColumnName().equals("CreatedBy") || getColumnName().equals("UpdatedBy"))) {      lookupInfo.IsCreadedUpdatedBy=true;      lookupInfo.DisplayType=DisplayType.Search;    }    MLookup ml=new MLookup(lookupInfo,TAB_NO);    m_lookup=ml;  } else   if (displayType == DisplayType.Location) {    MLocationLookup ml=new MLocationLookup(getCtx(),WINDOW_NO);    m_lookup=ml;  } else   if (displayType == DisplayType.Locator) {    MLocatorLookup ml=new MLocatorLookup(getCtx(),WINDOW_NO);    m_lookup=ml;  } else   if (displayType == DisplayType.Account) {    MAccountLookup ma=new MAccountLookup(getCtx(),WINDOW_NO);    m_lookup=ma;  } else   if (displayType == DisplayType.PAttribute) {    MPAttributeLookup pa=new MPAttributeLookup(getCtx(),WINDOW_NO);    m_lookup=pa;  }  if (m_lookup != null)   m_lookup.loadComplete();}  }
class C{  public SubSetImpl(FastSet<E> inner,E from,Boolean fromInclusive,E to,Boolean toInclusive){  this.inner=inner;  this.from=from;  this.fromInclusive=fromInclusive;  this.to=to;  this.toInclusive=toInclusive;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.840 -0500",hash_original_method="5D5C1978E7EFC6390B8F7A214888BA1C",hash_generated_method="9A67C0D07D345C241847770D5D85B358") public int compareTo(Boolean that){  return compare(value,that.value);}  }
class C{  public void generateClasspath(IJavaProject project,List<String> sourceFolders,List<String> library) throws ServerException {  List<IClasspathEntry> classpathEntries=new ArrayList<>();  IClasspathEntry jreContainer=JavaCore.newContainerEntry(new Path(JREContainerInitializer.JRE_CONTAINER));  classpathEntries.add(jreContainer);  addSourceFolders(project,sourceFolders,classpathEntries);  addJars(project,library,classpathEntries);  try {    project.setRawClasspath(classpathEntries.toArray(new IClasspathEntry[classpathEntries.size()]),null);  } catch (  JavaModelException e) {    LOG.warn("Can't set classpath for: " + project.getProject().getFullPath().toOSString(),e);    throw new ServerException(e);  }}  }
class C{  public static boolean exportData(DBHelper db,OutputStreamWriter output,DataFormat format){  DatabaseExporter exporter=null;switch (format) {case CSV:    exporter=new CsvDatabaseExporter();  break;}if (exporter != null) {try {  exporter.exportData(db,output);  return true;} catch (IOException e) {  Log.e(TAG,"Failed to export data",e);}catch (InterruptedException e) {  Log.e(TAG,"Failed to export data",e);}return false;} else {Log.e(TAG,"Unsupported data format exported: " + format.name());return false;}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return CONFIGURATION.createCompatibleImage(width,height,image.getTransparency());}  }
class C{  public void Gen_populate(android.database.Cursor cursor,int[] columnIndices){  if (columnIndices[GEN_ID__ID] >= 0 && !cursor.isNull(columnIndices[GEN_ID__ID])) {    gen__Id=cursor.getLong(columnIndices[GEN_ID__ID]);  }  if (columnIndices[GEN_ID_SENTTEXT] >= 0 && !cursor.isNull(columnIndices[GEN_ID_SENTTEXT])) {    gen_sentText=cursor.getString(columnIndices[GEN_ID_SENTTEXT]);  }}  }
class C{  protected void drawLabel(Canvas c,float x,float y,String label){  c.drawText(label,x,y,mLegendLabelPaint);}  }
class C{  public static final Move uciStringToMove(String move){  Move m=null;  if ((move.length() < 4) || (move.length() > 5))   return m;  int fromSq=TextIO.getSquare(move.substring(0,2));  int toSq=TextIO.getSquare(move.substring(2,4));  if ((fromSq < 0) || (toSq < 0)) {    return m;  }  char prom=' ';  boolean white=true;  if (move.length() == 5) {    prom=move.charAt(4);    if (Position.getY(toSq) == 7) {      white=true;    } else     if (Position.getY(toSq) == 0) {      white=false;    } else {      return m;    }  }  int promoteTo;switch (prom) {case ' ':    promoteTo=Piece.EMPTY;  break;case 'q':promoteTo=white ? Piece.WQUEEN : Piece.BQUEEN;break;case 'r':promoteTo=white ? Piece.WROOK : Piece.BROOK;break;case 'b':promoteTo=white ? Piece.WBISHOP : Piece.BBISHOP;break;case 'n':promoteTo=white ? Piece.WKNIGHT : Piece.BKNIGHT;break;default :return m;}m=new Move(fromSq,toSq,promoteTo);return m;}  }
class C{  @Override public void undo(){  File tempFile;  Instances inst;  ObjectInputStream ooi;  if (canUndo()) {    tempFile=m_UndoList.get(m_UndoList.size() - 1);    try {      ooi=new ObjectInputStream(new BufferedInputStream(new FileInputStream(tempFile)));      inst=(Instances)ooi.readObject();      ooi.close();      setInstances(inst);      notifyListener(new TableModelEvent(this,TableModelEvent.HEADER_ROW));      notifyListener(new TableModelEvent(this));    } catch (    Exception e) {      e.printStackTrace();    }    tempFile.delete();    m_UndoList.remove(m_UndoList.size() - 1);  }}  }
class C{  public final Node peepOrNull(){  return ((null != m_map) && (m_firstFree > 0)) ? m_map[m_firstFree - 1] : null;}  }
class C{  @Override public int numberOfClusters() throws Exception {  if (m_num_clusters == -1) {    throw new Exception("Haven't generated any clusters!");  }  return m_num_clusters;}  }
class C{  @Override protected void doSetValue(Object value){  Assert.isTrue(comboBox != null && (value instanceof String || value instanceof DBPNamedObject || value instanceof Enum));  if (value instanceof DBPNamedObject) {    comboBox.setText(((DBPNamedObject)value).getName());  } else   if (value instanceof Enum) {    comboBox.setText(((Enum)value).name());  } else {    comboBox.setText(CommonUtils.toString(value));  }}  }
class C{  public static void updateCollectionLevelSnapshot(SolrZkClient zkClient,String collectionName,CollectionSnapshotMetaData meta) throws KeeperException, InterruptedException {  String zkPath=getSnapshotMetaDataZkPath(collectionName,Optional.of(meta.getName()));  zkClient.setData(zkPath,Utils.toJSON(meta),-1,true);}  }
class C{  private void doScrollY(int delta){  if (delta != 0) {    if (mSmoothScrollingEnabled) {      smoothScrollBy(0,delta);    } else {      scrollBy(0,delta);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.011 -0400",hash_original_method="AFE3BCD4E8B82AE73B63E431A1526619",hash_generated_method="0D454C643B1A3FB3A4A38381938D367F") private E peekExpired(){  E first=q.peek();  return (first == null || first.getDelay(NANOSECONDS) > 0) ? null : first;}  }
class C{  ExternalProblem(Process process){  this(process.getInputStream(),process.getOutputStream());  RedirectStream.redirect(process.getErrorStream(),System.err);}  }
class C{  BatchService(ArgusHttpClient client){  super(client);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>(11);  result.addElement(new Option("\tThe minimum threshold. (default -Double.MAX_VALUE)","min",1,"-min <double>"));  result.addElement(new Option("\tThe replacement for values smaller than the minimum threshold.\n" + "\t(default -Double.MAX_VALUE)","min-default",1,"-min-default <double>"));  result.addElement(new Option("\tThe maximum threshold. (default Double.MAX_VALUE)","max",1,"-max <double>"));  result.addElement(new Option("\tThe replacement for values larger than the maximum threshold.\n" + "\t(default Double.MAX_VALUE)","max-default",1,"-max-default <double>"));  result.addElement(new Option("\tThe number values are checked for closeness. (default 0)","closeto",1,"-closeto <double>"));  result.addElement(new Option("\tThe replacement for values that are close to '-closeto'.\n" + "\t(default 0)","closeto-default",1,"-closeto-default <double>"));  result.addElement(new Option("\tThe tolerance below which numbers are considered being close to \n" + "\tto each other. (default 1E-6)","closeto-tolerance",1,"-closeto-tolerance <double>"));  result.addElement(new Option("\tThe number of decimals to round to, -1 means no rounding at all.\n" + "\t(default -1)","decimals",1,"-decimals <int>"));  result.addElement(new Option("\tThe list of columns to cleanse, e.g., first-last or first-3,5-last.\n" + "\t(default first-last)","R",1,"-R <col1,col2,...>"));  result.addElement(new Option("\tInverts the matching sense.","V",0,"-V"));  result.addElement(new Option("\tWhether to include the class in the cleansing.\n" + "\tThe class column will always be skipped, if this flag is not\n" + "\tpresent. (default no)","include-class",0,"-include-class"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public static boolean isStore(int opcode){  return (flagsArray[opcode & 0xff] & STORE) != 0;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER__DEFINED_TYPE:    setDefinedType((Type)newValue);  return;case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER__DECLARED_DYNAMIC:setDeclaredDynamic((Boolean)newValue);return;case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER__ALIAS:setAlias((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static void uaRowSumEqNe(MatrixBlock in,MatrixBlock out,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int agg0=sumEqNe(0.0,bv,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int cnt=(ai == 0) ? agg0 : sumEqNe(ai,bv,bOp);    out.quickSetValue(i,0,cnt);  }}  }
class C{  protected Object createJvmRuntimeMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   return new JvmRuntimeImpl(this,server); else   return new JvmRuntimeImpl(this);}  }
class C{  public static int buff2int(byte[] bs,int offset){  return ((bs[offset] >= 0 ? bs[offset] : 256 + bs[offset]) << 24) | ((bs[offset + 1] >= 0 ? bs[offset + 1] : 256 + bs[offset + 1]) << 16) | ((bs[offset + 2] >= 0 ? bs[offset + 2] : 256 + bs[offset + 2]) << 8)| (bs[offset + 3] >= 0 ? bs[offset + 3] : 256 + bs[offset + 3]);}  }
class C{  public HideWorkingSetAction(){  super("Hide Selected Working Set");  setImageDescriptor(ImageRef.CLEAR.asImageDescriptor().orNull());}  }
class C{  public final String uri(){  return _uri;}  }
class C{  public static final boolean validateGroupChannel(Integer iGroupChannel){  if ((iGroupChannel < LnDplxGrpInfoImplConstants.DPLX_MIN_CH) || (iGroupChannel > LnDplxGrpInfoImplConstants.DPLX_MAX_CH)) {    return false;  } else {    return true;  }}  }
class C{  private void storeCookies(){  lock.lock();  SharedPreferences.Editor editor=spePreferences.edit();  editor.putStringSet(COOKIE_JAR,cookieListToStringSet(cookieJar));  Set<URI> uris=uriIndex.keySet();  if (!uris.isEmpty())   editor.putStringSet(URI_LIST,URIToStringSet(uris));  for (  URI uri : uris) {    editor.putStringSet(uri.toString(),cookieListToStringSet(uriIndex.get(uri)));  }  Set<String> domains=domainIndex.keySet();  if (!domains.isEmpty())   editor.putStringSet(STRING_LIST,domains);  for (  String domain : domains) {    editor.putStringSet(domain,cookieListToStringSet(domainIndex.get(domain)));  }  editor.apply();  lock.unlock();}  }
class C{  public static void doMoveFile(final PsiFile file,final PsiDirectory newDirectory) throws IncorrectOperationException {  PsiManager manager=file.getManager();  if (!newDirectory.equals(file.getContainingDirectory())) {    checkMove(file,newDirectory);    try {      final VirtualFile virtualFile=file.getVirtualFile();      LOG.assertTrue(virtualFile != null,file);      virtualFile.move(manager,newDirectory.getVirtualFile());    } catch (    IOException e) {      throw new IncorrectOperationException(e);    }  }}  }
class C{  private static ParsedNamingURL parseURL(String str) throws MalformedURLException {  try {    return intParseURL(str);  } catch (  URISyntaxException ex) {    MalformedURLException mue=new MalformedURLException("invalid URL String: " + str);    mue.initCause(ex);    int indexSchemeEnd=str.indexOf(':');    int indexAuthorityBegin=str.indexOf("//:");    if (indexAuthorityBegin < 0) {      throw mue;    }    if ((indexAuthorityBegin == 0) || ((indexSchemeEnd > 0) && (indexAuthorityBegin == indexSchemeEnd + 1))) {      int indexHostBegin=indexAuthorityBegin + 2;      String newStr=str.substring(0,indexHostBegin) + "localhost" + str.substring(indexHostBegin);      try {        return intParseURL(newStr);      } catch (      URISyntaxException inte) {        throw mue;      }catch (      MalformedURLException inte) {        throw inte;      }    }    throw mue;  }}  }
class C{  public static String readString(ByteBuffer buff,int len){  char[] chars=new char[len];  for (int i=0; i < len; i++) {    int x=buff.get() & 0xff;    if (x < 0x80) {      chars[i]=(char)x;    } else     if (x >= 0xe0) {      chars[i]=(char)(((x & 0xf) << 12) + ((buff.get() & 0x3f) << 6) + (buff.get() & 0x3f));    } else {      chars[i]=(char)(((x & 0x1f) << 6) + (buff.get() & 0x3f));    }  }  return new String(chars);}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  protected void addConvert(ConvertMetadata convert){  throw ValidationException.invalidMappingForConvert(getJavaClassName(),getAttributeName());}  }
class C{  protected boolean isHadoopCluster(){  boolean isHadoopCluster=false;  try {    isHadoopCluster=Shell.getHadoopHome() != null;  } catch (  IOException e) {  }  return isHadoopCluster;}  }
class C{  public SaaSSystemException(Throwable arg0){  super(arg0);  genId();  this.setCauseStackTrace(arg0);}  }
class C{  public boolean validate(LineState state){  AugmentedNode<ILineSegment> s=state.root();  if (s == null)   return true;  return validateNode(s);}  }
class C{  public Matrix4 avg(Matrix4 other,float w){  getScale(tmpVec);  other.getScale(tmpForward);  getRotation(quat);  other.getRotation(quat2);  getTranslation(tmpUp);  other.getTranslation(right);  setToScaling(tmpVec.scl(w).add(tmpForward.scl(1 - w)));  rotate(quat.slerp(quat2,1 - w));  setTranslation(tmpUp.scl(w).add(right.scl(1 - w)));  return this;}  }
class C{  private static Object makeDexElement(File pkg,DexFile dexFile) throws Exception {  return makeDexElement(pkg,false,dexFile);}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public void testGetInputBooksOperador1(){  ISWebServiceBooksSoap client=(ISWebServiceBooksSoap)this.applicationContext.getBean("clientWebServiceBooks");  Security security=new Security();  UsernameTokenClass value=new UsernameTokenClass();  value.setUsername("operador1");  value.setPassword("operador1");  value.setOfficeCode("001");  security.setUsernameToken(value);  ArrayOfWSBook result=client.wsGetInputBooks(security);  assertNotNull(result);  assertEquals(1,result.getWSBook().size());  WSBook wsBook_1=(WSBook)CollectionUtils.find(result.getWSBook(),new BeanPropertyValueEqualsPredicate("id",1));  assertNotNull(wsBook_1);  assertEquals(1,wsBook_1.getId());  assertEquals("Libro de Entrada",wsBook_1.getName());  assertEquals(1,wsBook_1.getType());  assertTrue(wsBook_1.isCanCreate());  assertTrue(wsBook_1.isCanModify());  assertFalse(wsBook_1.isReadOnly());}  }
class C{  public Integer toInteger(){  return Integer.valueOf(intValue());}  }
class C{  protected int lookupCategory(int c){  if (c < Character.MIN_SUPPLEMENTARY_CODE_POINT) {    return charCategoryTable.elementAt((char)c);  } else {    return supplementaryCharCategoryTable.getValue(c);  }}  }
class C{  public void addCqListener(CqListener cql){  if (cql == null) {    throw new IllegalArgumentException(LocalizedStrings.CqAttributesFactory_ADDCQLISTENER_PARAMETER_WAS_NULL.toLocalizedString());  }synchronized (this.clSync) {    ArrayList<CqListener> oldListeners=this.cqListeners;    if (oldListeners == null || oldListeners.size() == 0) {      ArrayList<CqListener> al=new ArrayList<CqListener>(1);      al.add(cql);      this.setCqListeners(al);    } else {      if (!oldListeners.contains(cql)) {        oldListeners.add(cql);      }    }  }}  }
class C{  @Override public synchronized void publish(LogRecord record){  if (!isLoggable(record)) {    return;  }  super.publish(record);  flush();}  }
class C{  public TimeDuration(final long durationMilliseconds){  if (durationMilliseconds < 0) {    this.ms=0;  } else {    this.ms=durationMilliseconds;  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof YWithXInterval)) {    return false;  }  YWithXInterval that=(YWithXInterval)obj;  if (this.y != that.y) {    return false;  }  if (this.xLow != that.xLow) {    return false;  }  if (this.xHigh != that.xHigh) {    return false;  }  return true;}  }
class C{  public ContextMenuEventHandler(NetworkPanel networkPanel){  this.networkPanel=networkPanel;}  }
class C{  @Override public void waitForGC(){  boolean allWaiting;synchronized (count) {    mutatorsBlocked++;    allWaiting=allWaitingForGC();  }  waitForGC(allWaiting,true);synchronized (count) {    mutatorsBlocked--;  }}  }
class C{  public static void grayToBinary(BinaryVariable variable){  int n=variable.getNumberOfBits();  BitSet gray=variable.getBitSet();  variable.set(n - 1,gray.get(n - 1));  for (int i=n - 2; i >= 0; i--) {    variable.set(i,variable.get(i + 1) ^ gray.get(i));  }}  }
class C{  @Override protected void initListeners(){  this.externalLoadSoButton.setOnClickListener(this);}  }
class C{  public void runTest() throws Throwable {  String publicId="http://www.localhost.com/";  String systemId="myDoc.dtd";  String qualifiedName;  Document doc;  DocumentType docType=null;  DOMImplementation domImpl;  java.util.List illegalQNames=new java.util.ArrayList();  illegalQNames.add("edi:{");  illegalQNames.add("edi:}");  illegalQNames.add("edi:~");  illegalQNames.add("edi:'");  illegalQNames.add("edi:!");  illegalQNames.add("edi:@");  illegalQNames.add("edi:#");  illegalQNames.add("edi:$");  illegalQNames.add("edi:%");  illegalQNames.add("edi:^");  illegalQNames.add("edi:&");  illegalQNames.add("edi:*");  illegalQNames.add("edi:(");  illegalQNames.add("edi:)");  illegalQNames.add("edi:+");  illegalQNames.add("edi:=");  illegalQNames.add("edi:[");  illegalQNames.add("edi:]");  illegalQNames.add("edi:\\");  illegalQNames.add("edi:/");  illegalQNames.add("edi:;");  illegalQNames.add("edi:`");  illegalQNames.add("edi:<");  illegalQNames.add("edi:>");  illegalQNames.add("edi:,");  illegalQNames.add("edi:a ");  illegalQNames.add("edi:\"");  doc=(Document)load("staffNS",false);  for (int indexN1009A=0; indexN1009A < illegalQNames.size(); indexN1009A++) {    qualifiedName=(String)illegalQNames.get(indexN1009A);    domImpl=doc.getImplementation();{      boolean success=false;      try {        docType=domImpl.createDocumentType(qualifiedName,publicId,systemId);      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  @Inline @Uninterruptible public static int decRC(ObjectReference object){  Word oldValue, newValue;  int rtn;  if (VM.VERIFY_ASSERTIONS) {    VM.assertions._assert(RCBase.isRCObject(object));    VM.assertions._assert(isLiveRC(object));  }  do {    oldValue=VM.objectModel.prepareAvailableBits(object);    if (isStuck(oldValue))     return DEC_ALIVE;    newValue=oldValue.minus(INCREMENT);    if (newValue.and(READ_MASK).LT(LIVE_THRESHOLD)) {      rtn=DEC_KILL;    } else {      rtn=DEC_ALIVE;    }  } while (!VM.objectModel.attemptAvailableBits(object,oldValue,newValue));  return rtn;}  }
class C{  public ColorConvertOp(ColorSpace srcCspace,ColorSpace dstCspace,RenderingHints hints){  if ((srcCspace == null) || (dstCspace == null)) {    throw new NullPointerException("ColorSpaces cannot be null");  }  if ((srcCspace instanceof ICC_ColorSpace) && (dstCspace instanceof ICC_ColorSpace)) {    profileList=new ICC_Profile[2];    profileList[0]=((ICC_ColorSpace)srcCspace).getProfile();    profileList[1]=((ICC_ColorSpace)dstCspace).getProfile();    getMinMaxValsFromColorSpaces(srcCspace,dstCspace);  } else {    CSList=new ColorSpace[2];    CSList[0]=srcCspace;    CSList[1]=dstCspace;  }  this.hints=hints;}  }
class C{  public int bitCount(){  @SuppressWarnings("deprecation") int bc=bitCount - 1;  if (bc == -1) {    bc=0;    for (int i=0; i < mag.length; i++)     bc+=Integer.bitCount(mag[i]);    if (signum < 0) {      int magTrailingZeroCount=0, j;      for (j=mag.length - 1; mag[j] == 0; j--)       magTrailingZeroCount+=32;      magTrailingZeroCount+=Integer.numberOfTrailingZeros(mag[j]);      bc+=magTrailingZeroCount - 1;    }    bitCount=bc + 1;  }  return bc;}  }
class C{  public static void main(String[] args) throws Exception {  Velocity.init();  for (int i=0, j=args.length; i < j; i++) {    String serName=args[i] + "s";    Template template=Velocity.getTemplate(args[i]);    try {      FileOutputStream fos=new FileOutputStream(serName);      ObjectOutputStream ooo=new ObjectOutputStream(fos);      Object data=template.getData();      ooo.writeObject(data);      ooo.close();      fos.close();    } catch (    NotSerializableException nse) {      System.err.println("Make sure you are using the special velocity in flex/sdk/lib.");      throw nse;    }  }}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (other.getClass() != this.getClass())   return false;  Point2D that=(Point2D)other;  return this.x == that.x && this.y == that.y;}  }
class C{  public VariantCustom(ScriptWrapper wrapper,ExtensionScript extension){  this.wrapper=wrapper;  this.extension=extension;  if (wrapper != null && extension != null && wrapper.isEnabled()) {    try {      this.script=extension.getInterface(wrapper,VariantScript.class);      if (script == null) {        extension.handleFailedScriptInterface(wrapper,Constant.messages.getString("variant.scripts.interface.variant.error",wrapper.getName()));      }    } catch (    Exception ex) {      this.extension.handleScriptException(wrapper,ex);    }  }}  }
class C{  private void doLoad(HttpServletRequest request,InstructionalOfferingModifyForm frm,String instrOffrConfigId) throws Exception {  if (instrOffrConfigId == null || instrOffrConfigId.trim().length() == 0)   throw new Exception(MSG.errorMissingIOConfig());  sessionContext.checkPermission(instrOffrConfigId,"InstrOfferingConfig",Right.MultipleClassSetup);  InstrOfferingConfigDAO iocDao=new InstrOfferingConfigDAO();  InstrOfferingConfig ioc=iocDao.get(Long.valueOf(instrOffrConfigId));  InstructionalOffering io=ioc.getInstructionalOffering();  frm.setDisplayOptionForMaxLimit(CommonValues.Yes.eq(sessionContext.getUser().getProperty(UserProperty.VariableClassLimits)));  frm.setInstrOffrConfigId(ioc.getUniqueId());  frm.setInstrOffrConfigLimit(ioc.getLimit());  frm.setInstrOffrConfigUnlimited(ioc.isUnlimitedEnrollment());  frm.setInstrOfferingId(io.getUniqueId());  frm.setDisplayDisplayInstructors(ApplicationProperty.ClassSetupDisplayInstructorFlags.isTrue());  frm.setDisplayEnabledForStudentScheduling(ApplicationProperty.ClassSetupEnabledForStudentScheduling.isTrue());  frm.setDisplayExternalId(ApplicationProperty.ClassSetupShowExternalIds.isTrue() && !ApplicationProperty.ClassSetupEditExternalIds.isTrue());  frm.setEditExternalId(ApplicationProperty.ClassSetupEditExternalIds.isTrue());  frm.setInstructionalMethod(ioc.getInstructionalMethod() == null ? -1l : ioc.getInstructionalMethod().getUniqueId());  String name=io.getCourseNameWithTitle();  if (io.hasMultipleConfigurations()) {    name+=" [" + ioc.getName() + "]";  }  frm.setInstrOfferingName(name);  if (ioc.getSchedulingSubparts() == null || ioc.getSchedulingSubparts().size() == 0)   throw new Exception(MSG.errorIOConfigNotDefined());  ArrayList subpartList=new ArrayList(ioc.getSchedulingSubparts());  Collections.sort(subpartList,new SchedulingSubpartComparator());  ClassAssignmentProxy proxy=classAssignmentService.getAssignment();  frm.setInstrOffrConfigUnlimitedReadOnly(false);  for (Iterator it=subpartList.iterator(); it.hasNext(); ) {    SchedulingSubpart ss=(SchedulingSubpart)it.next();    if (ss.getClasses() == null || ss.getClasses().size() == 0)     throw new Exception(MSG.errorInitialIOSetupIncomplete());    if (ss.getParentSubpart() == null) {      loadClasses(frm,ss.getClasses(),new Boolean(true),new String(),proxy);    }  }  frm.initializeOrigSubparts();  frm.setDirectionsClassesCanMove();  frm.initalizeSubpartSubtotalsAndDisplayFlags();  frm.initializeEnableAllClassesForStudentScheduling();  frm.initializeDisplayAllClassInstructors();}  }
class C{  private void updateWindow(){  final IGraphPanel window=getActiveGraphWindow();  if (window == null) {    return;  }  setTitle(CWindowTitle.generate(window));  setJMenuBar(window.getMenu());}  }
class C{  private static void quickSort(int[] array,int[] index,int left,int right){  if (left < right) {    int middle=partition(array,index,left,right);    quickSort(array,index,left,middle);    quickSort(array,index,middle + 1,right);  }}  }
class C{  public boolean isWritable(){  return writable;}  }
class C{  public void addOrComponent(final PlanLinkIdentifier delegate){  if (locked)   throw new IllegalStateException("cannot modify a " + getClass().getSimpleName() + " after its areLinked() method has been called");  this.orDelegates.add(delegate);}  }
class C{  public NamedTag readNamedTag() throws IOException {  return readNamedTag(0);}  }
class C{  public static double mouseY(){synchronized (mouseLock) {    return mouseY;  }}  }
class C{  public void notifyVerticalEdgeReached(int startY,int finalY,int overY){  mScrollerY.notifyEdgeReached(startY,finalY,overY);}  }
class C{  @NotNull @Override public Collection<PsiReference> findReferences(PsiElement element){  SearchScope scope=(element instanceof BashPsiElement) ? BashElementSharedImpl.getElementUseScope((BashPsiElement)element,element.getProject()) : GlobalSearchScope.projectScope(element.getProject());  Query<PsiReference> search=ReferencesSearch.search(element,scope);  return search.findAll();}  }
class C{  public static void createChain(SignalProcessor... processors){  int l=processors.length;  if (l >= 2) {    for (int i=1; i < (l - 1); ++i)     processors[i].insert(processors[i - 1],false);    processors[0].connectTo(processors[1],true);    processors[l - 1].connectTo(processors[l - 2],false);  }}  }
class C{  private static String toString(final INaviOperandTreeNode node){switch (node.getType()) {case IMMEDIATE_INTEGER:case REGISTER:    return node.getValue();case OPERATOR:  return Commafier.commafy(toString(node.getChildren())," " + node.getValue() + " ");default :throw new IllegalStateException("IE00711: This should not happen");}}  }
class C{  public GoogleTurnCandidateHarvest(GoogleTurnCandidateHarvester harvester,HostCandidate hostCandidate,String password){  super(harvester,hostCandidate);  this.password=password;}  }
class C{  public void removeTraceListener(JIPTraceListener traceListener){  m_eventNotifier.removeTraceListener(traceListener);}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(this.total);  if (all.size() > 1) {    Enumeration<Integer> iter=all.elements();    buffer.append(" (");    buffer.append(iter.nextElement().toString());    while (iter.hasMoreElements()) {      buffer.append(",");      buffer.append(iter.nextElement().toString());    }    buffer.append(")");  }  if (keep != -1) {    buffer.append(" [");    buffer.append(keep);    buffer.append(" highest]");  }  return buffer.toString();}  }
class C{  public boolean isDrawExtents(){  return false;}  }
class C{  default <S>Optional<S> creating(Class<? extends S> stateClass,Consumer<ProxyingEventBus> busConsumer){  StateBuilder<S> stateBuilder=DispatchingStateBuilder.dispatchingTo(stateClass);  notifying(stateBuilder.toEventsOutChannel(),Consumers.transform(busConsumer,null));  return stateBuilder.get();}  }
class C{  protected Object[] availableIDsArray(){  return this.idsAvailable.toArray();}  }
class C{  public void write(byte b[]) throws IOException {  raf.write(b);}  }
class C{  protected CompilationUnitContext(TemplateContextType type,Document document,int completionOffset,int completionLength,CompilationUnit compilationUnit){  super(type,document,completionOffset,completionLength);  fCompilationUnit=compilationUnit;  fIsManaged=false;}  }
class C{  public CCMenuItem selectedItem(){  return subItems_.get(selectedIndex_);}  }
class C{  public PlacardScrollPaneLayout(){}  }
class C{  private String installContainer(String url,String file){  try {    Installer installer;    URL installURL;    if (file != null) {      installURL=new URL(fileManager.getFileURL(file));    } else {      installURL=new URL(url);    }    installer=new ZipURLInstaller(installURL,fileManager.getInstallDirectory(),fileManager.getInstallDirectory());    installer.install();    return installer.getHome();  } catch (  MalformedURLException e) {    throw new CargoDaemonException("Malformed URL " + e);  }}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  void include(int min,int max,boolean include){  if (include) {    merge(min,max);  } else {    remove(min,max);  }}  }
class C{  public void testNumberAddressUpdates() throws Exception {  final long id=db.getCanonicalAddressId(AMBIGUOUS_NUMBER);  assertThat(db.getAddressFromId(id)).isEqualTo(AMBIGUOUS_NUMBER);  assertThat(db.getCanonicalAddressId(SPECIFIC_NUMBER)).isEqualTo(id);  assertThat(db.getAddressFromId(id)).isEqualTo(SPECIFIC_NUMBER);  assertThat(db.getCanonicalAddressId(AMBIGUOUS_NUMBER)).isEqualTo(id);  assertThat(db.getCanonicalAddressId(AMBIGUOUS_NUMBER)).isEqualTo(id);  assertThat(db.getAddressFromId(id)).isEqualTo(AMBIGUOUS_NUMBER);  assertThat(db.getCanonicalAddressId(SPECIFIC_NUMBER)).isEqualTo(id);  assertThat(db.getAddressFromId(id)).isEqualTo(SPECIFIC_NUMBER);  assertThat(db.getCanonicalAddressId(AMBIGUOUS_NUMBER)).isEqualTo(id);}  }
class C{  public SASJavaExec(String execCommand,String script,String inputString){  this.execCommand=execCommand.trim();  this.script=script.trim();  this.inputString=inputString;}  }
class C{  @Bean public TaskExecutor activitiTaskExecutor(){  ThreadPoolTaskExecutor taskExecutor=new ThreadPoolTaskExecutor();  taskExecutor.setCorePoolSize(configurationHelper.getProperty(ConfigurationValue.ACTIVITI_THREAD_POOL_CORE_POOL_SIZE,Integer.class));  taskExecutor.setMaxPoolSize(configurationHelper.getProperty(ConfigurationValue.ACTIVITI_THREAD_POOL_MAX_POOL_SIZE,Integer.class));  taskExecutor.setKeepAliveSeconds(configurationHelper.getProperty(ConfigurationValue.ACTIVITI_THREAD_POOL_KEEP_ALIVE_SECS,Integer.class));  taskExecutor.setQueueCapacity(configurationHelper.getProperty(ConfigurationValue.ACTIVITI_THREAD_POOL_QUEUE_CAPACITY,Integer.class));  return taskExecutor;}  }
class C{  public SetRouteThread(DefaultRoute aRoute){  r=aRoute;}  }
class C{  @Bean public ExceptionHandlerMethodResolver exceptionHandlerMethodResolver(){  return new ExceptionHandlerMethodResolver(HerdErrorInformationExceptionHandler.class);}  }
class C{  @Inline public static void clearForwardingPointer(ObjectReference object){  object.toAddress().store(Address.zero(),FORWARDING_POINTER_OFFSET);}  }
class C{  public RemoteApplicationResult(RemoteApplicationResult other){  __isset_bitfield=other.__isset_bitfield;  this.success=other.success;  if (other.isSetMsg()) {    this.msg=other.msg;  }}  }
class C{  private final String[] tokenize(String cmdLine){  cmdLine=cmdLine.trim();  return cmdLine.split("\\s+");}  }
class C{  private boolean isMediaTypeMatch(MediaType mediaType,MediaType rangePattern){  String WILDCARD="*";  String rangePatternType=rangePattern.getType();  String rangePatternSubtype=rangePattern.getSubtype();  return (rangePatternType.equals(WILDCARD) || rangePatternType.equals(mediaType.getType())) && (rangePatternSubtype.equals(WILDCARD) || rangePatternSubtype.equals(mediaType.getSubtype()));}  }
class C{  public boolean isClosed(){  return _lifecycle.isDestroyed();}  }
class C{  public static String call(PageContext pc){  return invoke();}  }
class C{  public Person(Long id,Long orgId,String firstName,String lastName,double salary,String resume){  this.id=id;  this.orgId=orgId;  this.firstName=firstName;  this.lastName=lastName;  this.salary=salary;  this.resume=resume;}  }
class C{  private void dragShiftOuput(double y){  double shift=Math.max(0,y);  if (this.inputs.stream().map(null).filter(null).count() == 0) {    this.output.getParent().setTranslateY(9 + shift);    this.curriedOutput.setVisible(false);    this.curriedOutput.setManaged(false);  } else {    this.curriedOutput.setManaged(true);    this.curriedOutput.setVisible(true);    this.curriedOutput.requestLayout();  }}  }
class C{  public static String gluErrorString(int error){switch (error) {case GL10.GL_NO_ERROR:    return "no error";case GL10.GL_INVALID_ENUM:  return "invalid enum";case GL10.GL_INVALID_VALUE:return "invalid value";case GL10.GL_INVALID_OPERATION:return "invalid operation";case GL10.GL_STACK_OVERFLOW:return "stack overflow";case GL10.GL_STACK_UNDERFLOW:return "stack underflow";case GL10.GL_OUT_OF_MEMORY:return "out of memory";default :return null;}}  }
class C{  public static boolean isInArea(Coord coord,Coord SW,Coord NE){  return (getCompassQuarter(SW,coord) == 1 && getCompassQuarter(NE,coord) == 3);}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (cv != null) {    return cv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  @Override public IMqttToken subscribe(String[] topic,int[] qos) throws MqttException, MqttSecurityException {  return subscribe(topic,qos,null,null);}  }
class C{  public synchronized void cachePackageInstallInfo(String packageName,UserHandleCompat user,Bitmap icon,CharSequence title){  remove(packageName,user);  CacheEntry entry=getEntryForPackage(packageName,user);  if (!TextUtils.isEmpty(title)) {    entry.title=title;  }  if (icon != null) {    entry.icon=Utilities.createIconBitmap(icon,mContext);  }}  }
class C{  public BufferUnderflowException(){  super();  throwable=null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("staff",true);  newNode=doc.getDoctype();  assertNotNull("docTypeNotNull",newNode);  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  @SuppressWarnings("deprecation") public int removeNear(final Vector position,final int blockType,final int apothem) throws MaxChangedBlocksException {  checkNotNull(position);  checkArgument(apothem >= 1,"apothem >= 1");  final Mask mask=new FuzzyBlockMask(this,new BaseBlock(blockType,-1));  final Vector adjustment=new Vector(1,1,1).multiply(apothem - 1);  final Region region=new CuboidRegion(this.getWorld(),position.add(adjustment.multiply(-1)),position.add(adjustment));  final Pattern pattern=new SingleBlockPattern(new BaseBlock(BlockID.AIR));  return this.replaceBlocks(region,mask,pattern);}  }
class C{  private String printDFormat(final long x){  return printDFormat(Long.toString(x));}  }
class C{  public boolean equals(Object o){  if (o instanceof AnnihilateMove) {    AnnihilateMove po=(AnnihilateMove)o;    return (po.oldMarker == oldMarker) && super.equals(o);  }  return false;}  }
class C{  private Response deleteFilterHelper(Integer id){  ResponseBuilder responseBuilder=Response.noContent();  ScriptFilterGroupDao sfgd=new ScriptFilterGroupDao();  List<ScriptFilterGroup> scriptFilterGroupForFilter=sfgd.getScriptFilterGroupForFilter(id);  for (Iterator<ScriptFilterGroup> iterator=scriptFilterGroupForFilter.iterator(); iterator.hasNext(); ) {    ScriptFilterGroup scriptFilterGroup=iterator.next();    Set<ScriptFilter> filters=scriptFilterGroup.getFilters();    for (Iterator<ScriptFilter> iterator2=filters.iterator(); iterator2.hasNext(); ) {      ScriptFilter scriptFilter=iterator2.next();      if (scriptFilter.getId() == id) {        iterator2.remove();      }    }    sfgd.saveOrUpdate(scriptFilterGroup);  }  ScriptFilterDao sfd=new ScriptFilterDao();  try {    ScriptFilter scriptFilter=sfd.findById(id);    if (scriptFilter == null) {      LOG.warn("Script with id " + id + " does not exist.");      responseBuilder.status(Status.BAD_REQUEST);      responseBuilder.entity("Filter with id " + id + " does not exist.");    } else {      sfd.delete(scriptFilter);    }  } catch (  RuntimeException e) {    LOG.error("Error deleting script filter : " + e,e);    responseBuilder.status(Status.INTERNAL_SERVER_ERROR);    responseBuilder.entity("A server error occurred while deleting the filter.");  }  return responseBuilder.build();}  }
class C{  protected Command showPopupDialog(Dialog popupDialog,List l){  if (getUIManager().isThemeConstant("popupTitleBool",false)) {    if (getLabelForComponent() != null) {      popupDialog.setTitle(getLabelForComponent().getText());    }  }  if (includeSelectCancel) {    popupDialog.setBackCommand(popupDialog.getMenuBar().getCancelMenuItem());    if (Display.getInstance().isTouchScreenDevice()) {      if (getUIManager().isThemeConstant("popupCancelBodyBool",false)) {        popupDialog.placeButtonCommands(new Command[]{popupDialog.getMenuBar().getCancelMenuItem()});      }    } else {      if (Display.getInstance().isThirdSoftButton()) {        popupDialog.addCommand(popupDialog.getMenuBar().getSelectMenuItem());        popupDialog.addCommand(popupDialog.getMenuBar().getCancelMenuItem());      } else {        popupDialog.addCommand(popupDialog.getMenuBar().getCancelMenuItem());        popupDialog.addCommand(popupDialog.getMenuBar().getSelectMenuItem());      }    }  }  if (actAsSpinnerDialog) {    l.setFixedSelection(List.FIXED_CENTER);    l.setUIID("Spinner");    l.spinnerOverlay=getUIManager().getComponentStyle("SpinnerOverlay");    l.spinnerOverlay.setMargin(0,0,0,0);    l.setAlwaysTensile(false);    l.installDefaultPainter(l.spinnerOverlay);    popupDialog.setDialogUIID("Container");    popupDialog.setUIID("Container");    popupDialog.getTitleComponent().setUIID("Container");    popupDialog.setTransitionInAnimator(CommonTransitions.createSlide(CommonTransitions.SLIDE_VERTICAL,true,200));    popupDialog.setTransitionOutAnimator(CommonTransitions.createSlide(CommonTransitions.SLIDE_VERTICAL,false,200));    return popupDialog.show(Display.getInstance().getDisplayHeight() - popupDialog.getDialogComponent().getPreferredH(),0,0,0,true,true);  }  if (getUIManager().isThemeConstant("centeredPopupBool",false)) {    return popupDialog.showPacked(BorderLayout.CENTER,true);  } else {    int top, bottom, left, right;    Form parentForm=getComponentForm();    int listW=Math.max(getWidth(),l.getPreferredW());    listW=Math.min(listW + l.getSideGap(),parentForm.getContentPane().getWidth());    Component content=popupDialog.getDialogComponent();    Style contentStyle=content.getStyle();    int listH=content.getPreferredH() + contentStyle.getMargin(false,TOP) + contentStyle.getMargin(false,BOTTOM);    Component title=popupDialog.getTitleArea();    listH+=title.getPreferredH() + title.getStyle().getMargin(false,TOP) + title.getStyle().getMargin(false,BOTTOM);    bottom=0;    top=getAbsoluteY();    int formHeight=parentForm.getHeight();    if (parentForm.getSoftButtonCount() > 1) {      Component c=parentForm.getSoftButton(0).getParent();      formHeight-=c.getHeight();      Style s=c.getStyle();      formHeight-=(s.getMargin(TOP) + s.getMargin(BOTTOM));    }    if (listH < formHeight) {      if (top > formHeight / 2) {        bottom=formHeight - top;        top=top - listH;      } else {        top+=getHeight();        bottom=formHeight - top - listH;      }    } else {      top=0;    }    left=getAbsoluteX();    right=parentForm.getWidth() - left - listW;    if (right < 0) {      left+=right;      right=0;    }    popupDialog.setBackCommand(popupDialog.getMenuBar().getCancelMenuItem());    return popupDialog.show(Math.max(top,0),Math.max(bottom,0),Math.max(left,0),Math.max(right,0),false,true);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.914 -0500",hash_original_method="DC74BD7370354E956783B762D3A498AE",hash_generated_method="9AFF01BF9F54091F29523BD38AD6C2B1") public DataLengthException(String message){  super(message);}  }
class C{  public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  private Workflow.Method updateVolumePropertiesMethod(List<URI> volumeURIs,URI systemURI){  return new Workflow.Method(UPDATE_VOLUME_PROEPERTIES_METHOD,volumeURIs,systemURI);}  }
class C{  public synchronized void addToState_incremental(CategoricalTable distrib,boolean followPrevious){  if (!followPrevious) {    setAsCommitted(distrib.getVariable());  }  String var=distrib.getVariable();  if (hasChanceNode(var) && isIncremental(var) & followPrevious) {    IndependentDistribution newtable=queryProb(var).toDiscrete().concatenate(distrib);    getChanceNode(var).setDistrib(newtable);    getChanceNode(var).setId(var + "'");  } else {    addToState(distrib);  }  incrementalVars.add(var);}  }
class C{  public SipUri sipURL(boolean inBrackets) throws ParseException {  if (debug)   dbg_enter("sipURL");  SipUri retval=new SipUri();  Token nextToken=lexer.peekNextToken();  int sipOrSips=TokenTypes.SIP;  String scheme=TokenNames.SIP;  if (nextToken.getTokenType() == TokenTypes.SIPS) {    sipOrSips=TokenTypes.SIPS;    scheme=TokenNames.SIPS;  }  try {    lexer.match(sipOrSips);    lexer.match(':');    retval.setScheme(scheme);    int startOfUser=lexer.markInputPosition();    String userOrHost=user();    String passOrPort=null;    if (lexer.lookAhead() == ':') {      lexer.consume(1);      passOrPort=password();    }    if (lexer.lookAhead() == '@') {      lexer.consume(1);      retval.setUser(userOrHost);      if (passOrPort != null)       retval.setUserPassword(passOrPort);    } else {      lexer.rewindInputPosition(startOfUser);    }    HostNameParser hnp=new HostNameParser(this.getLexer());    HostPort hp=hnp.hostPort(false);    retval.setHostPort(hp);    lexer.selectLexer("charLexer");    while (lexer.hasMoreChars()) {      if (lexer.lookAhead(0) != ';' || !inBrackets)       break;      lexer.consume(1);      NameValue parms=uriParam();      if (parms != null)       retval.setUriParameter(parms);    }    if (lexer.hasMoreChars() && lexer.lookAhead(0) == '?') {      lexer.consume(1);      while (lexer.hasMoreChars()) {        NameValue parms=qheader();        retval.setQHeader(parms);        if (lexer.hasMoreChars() && lexer.lookAhead(0) != '&')         break; else         lexer.consume(1);      }    }    return retval;  }  finally {    if (debug)     dbg_leave("sipURL");  }}  }
class C{  @Override public boolean isUnderspecified(){  return false;}  }
class C{  public static Map<String,Object> performFindList(DispatchContext dctx,Map<String,Object> context){  Integer viewSize=(Integer)context.get("viewSize");  if (viewSize == null)   viewSize=Integer.valueOf(20);  context.put("viewSize",viewSize);  Integer viewIndex=(Integer)context.get("viewIndex");  if (viewIndex == null)   viewIndex=Integer.valueOf(0);  context.put("viewIndex",viewIndex);  Map<String,Object> result=performFind(dctx,context);  int start=viewIndex.intValue() * viewSize.intValue();  List<GenericValue> list=null;  Integer listSize=null;  try {    EntityListIterator it=(EntityListIterator)result.get("listIt");    list=it.getPartialList(start + 1,viewSize);    listSize=it.getResultsSizeAfterPartialList();    it.close();  } catch (  Exception e) {    Debug.logInfo("Problem getting partial list" + e,module);  }  result.put("listSize",listSize);  result.put("list",list);  result.remove("listIt");  return result;}  }
class C{  public InputEventConsistencyVerifier(Object caller,int flags){  this(caller,flags,InputEventConsistencyVerifier.class.getSimpleName());}  }
class C{  void previousPage(PageBtreeCursor cursor,int pageId){  int i;  for (i=entryCount; i >= 0; i--) {    if (childPageIds[i] == pageId) {      i--;      break;    }  }  if (i < 0) {    if (parentPageId == PageBtree.ROOT) {      cursor.setCurrent(null,0);      return;    }    PageBtreeNode previous=(PageBtreeNode)index.getPage(parentPageId);    previous.previousPage(cursor,getPos());    return;  }  PageBtree page=index.getPage(childPageIds[i]);  PageBtreeLeaf leaf=page.getLastLeaf();  cursor.setCurrent(leaf,leaf.entryCount - 1);}  }
class C{  public StartExecParams withExecId(@NotNull String execId){  requireNonNull(execId);  this.execId=execId;  return this;}  }
class C{  public void dispatchToEvents(int nodeHandle,org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {}  }
class C{  protected String toDisplayString(String resourceBundleName,Locale locale){  loadResourceBundle(resourceBundleName,locale);  Object o=table.get(locale);  if (o != null && o instanceof Hashtable) {    Hashtable resourceTable=(Hashtable)o;    o=resourceTable.get(key);    if (o != null && o instanceof String) {      return (String)o;    }  }  return key;}  }
class C{  private boolean checkActionOK(Action action){  repairAction(action);  if (action.getType() == null || action.getClientUserId() == null || action.getClientItemId() == null || action.getClientUserId().length() > MAX_CLIENT_USER_ID_LEN || action.getClientItemId().length() > MAX_CLIENT_ITEM_ID_LEN) {    badActions++;    return false;  } else   return true;}  }
class C{  public static void startLogService(String action,JSONObject jsonObject){  try {    if (jsonObject == null) {      return;    }    String json=jsonObject.toString();    if (TextUtils.isEmpty(json)) {      return;    }    if (aidlService != null) {      aidlService.saveLog(action,json);    } else {      cacheEventList.add(new AIDLCacheEvent(EventType.SAVELOG,action,json));    }  } catch (  RemoteException e) {    EventManager.onError(context,e.getMessage());    Ln.e("EventManager == ","startLogService == ",e);  }}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  public IoBuffer decodeFully(IoBuffer in){  int contentLength=ctx.getContentLength();  IoBuffer decodedBuffer=ctx.getDecodedBuffer();  int oldLimit=in.limit();  if (contentLength > -1) {    if (decodedBuffer == null) {      decodedBuffer=IoBuffer.allocate(contentLength).setAutoExpand(true);    }    if (in.remaining() < contentLength) {      int readBytes=in.remaining();      decodedBuffer.put(in);      ctx.setDecodedBuffer(decodedBuffer);      ctx.setContentLength(contentLength - readBytes);      return null;    }    int newLimit=in.position() + contentLength;    in.limit(newLimit);    decodedBuffer.put(in);    decodedBuffer.flip();    in.limit(oldLimit);    ctx.reset();    return decodedBuffer;  }  int oldPos=in.position();  int matchCount=ctx.getMatchCount();  IoBuffer delimiter=ctx.getDelimiter();  while (in.hasRemaining()) {    byte b=in.get();    if (delimiter.get(matchCount) == b) {      matchCount++;      if (matchCount == delimiter.limit()) {        int pos=in.position();        in.position(oldPos);        in.limit(pos);        if (decodedBuffer == null) {          decodedBuffer=IoBuffer.allocate(in.remaining()).setAutoExpand(true);        }        decodedBuffer.put(in);        decodedBuffer.flip();        in.limit(oldLimit);        ctx.reset();        return decodedBuffer;      }    } else {      in.position(Math.max(0,in.position() - matchCount));      matchCount=0;    }  }  if (in.remaining() > 0) {    in.position(oldPos);    decodedBuffer.put(in);    in.position(in.limit());  }  ctx.setMatchCount(matchCount);  ctx.setDecodedBuffer(decodedBuffer);  return decodedBuffer;}  }
class C{  public boolean isWritable(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].writable;}  }
class C{  @Override @Pure public int hashCode(){  int hc=hashCodeValue;  if (hc == 0) {    hc=baseLocale.hashCode();    if (localeExtensions != null) {      hc^=localeExtensions.hashCode();    }    hashCodeValue=hc;  }  return hc;}  }
class C{  public RefactoringSessionDescriptor(final RefactoringDescriptor[] descriptors,final String version,final String comment){  Assert.isNotNull(descriptors);  Assert.isTrue(version != null && !"".equals(version));  fDescriptors=new RefactoringDescriptor[descriptors.length];  System.arraycopy(descriptors,0,fDescriptors,0,descriptors.length);  fVersion=version;  fComment=comment;}  }
class C{  public Builder(String customerId,String clientId){  if (customerId != null) {    this.customerPk=new CustomerPK(customerId);  } else {    this.customerPk=null;  }  this.user=null;  this.token=null;  this.clientId=clientId;}  }
class C{  private CloseUtil(){  instanceNotAllowed(getClass());}  }
class C{  @Override public void onDestroy(){  unregisterReceiver(disconnectReceiver);  SharedPreferences sp=getSharedPreferences("preference name",MODE_PRIVATE);  SharedPreferences.Editor ed=sp.edit();  ed.putInt("key",0);  ed.commit();  if (foreground) {    stopForegroundCompat(R.string.app_name);  }  AlarmManager am=(AlarmManager)getSystemService(ALARM_SERVICE);synchronized (alarmIntentsLock) {    for (    PendingIntent pendingRIntent : alarmIntents.values()) {      am.cancel(pendingRIntent);    }    for (    ReconnectReceiver receiver : alarmReceivers.values()) {      unregisterReceiver(receiver);    }    alarmIntents.clear();    alarmIntents=null;    alarmReceivers.clear();    alarmReceivers=null;  }}  }
class C{  public boolean manageTopology(){  String topologyName=Context.topologyName(config);  String statemgrClass=Context.stateManagerClass(config);  IStateManager statemgr;  try {    statemgr=ReflectionUtils.newInstance(statemgrClass);  } catch (  IllegalAccessException|InstantiationException|ClassNotFoundException e) {    LOG.log(Level.SEVERE,"Failed to instantiate instances",e);    return false;  }  boolean isSuccessful=false;  try {    statemgr.initialize(config);    SchedulerStateManagerAdaptor adaptor=new SchedulerStateManagerAdaptor(statemgr,5000);    boolean isValid=validateRuntimeManage(adaptor,topologyName);    if (isValid) {      LOG.log(Level.FINE,"Topology: {0} to be {1}ed",new Object[]{topologyName,command});      Config runtime=Config.newBuilder().put(Keys.topologyName(),Context.topologyName(config)).put(Keys.schedulerStateManagerAdaptor(),adaptor).build();      ISchedulerClient schedulerClient=getSchedulerClient(runtime);      if (schedulerClient == null) {        LOG.severe("Failed to initialize scheduler client");        return false;      }      isSuccessful=callRuntimeManagerRunner(runtime,schedulerClient);    }  }  finally {    SysUtils.closeIgnoringExceptions(statemgr);  }  return isSuccessful;}  }
class C{  @ApiOperation(value="Update workspace",notes="Update an existing workspace. A JSON with updated properties is sent." + "The entire WorkspaceDexcriptor should be sent in the payload, not only updates. " + "Roles allowed: accoubnt/owner, workspace/admin, system/admin",response=WorkspaceDescriptor.class) @ApiResponses(value={@ApiResponse(code=200,message="Workspace updated"),@ApiResponse(code=404,message="Not found"),@ApiResponse(code=403,message="Access to required workspace is forbidden"),@ApiResponse(code=500,message="Internal server error")}) @POST @Path("/{id}") @RolesAllowed({"account/owner","workspace/admin","system/admin"}) @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public WorkspaceDescriptor update(@ApiParam("Workspace ID") @PathParam("id") String id,@ApiParam(value="Workspace update",required=true) WorkspaceUpdate update,@Context SecurityContext context) throws NotFoundException, ConflictException, BadRequestException, ServerException {  requiredNotNull(update,"Workspace update");  final Workspace workspace=workspaceDao.getById(id);  final Map<String,String> attributes=update.getAttributes();  if (attributes != null) {    validateAttributes(attributes);    workspace.getAttributes().putAll(attributes);  }  final String newName=update.getName();  if (newName != null) {    workspace.setName(newName);  }  workspaceDao.update(workspace);  LOG.info("EVENT#workspace-updated# WS#{}# WS-ID#{}#",workspace.getName(),workspace.getId());  return toDescriptor(workspace,context);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_CODE_LANGS_1__CODE_LANG_1:    return ((InternalEList<?>)getCodeLang_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
