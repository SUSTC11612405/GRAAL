class C{  public GeometryFactory(PrecisionModel precisionModel,int SRID,CoordinateSequenceFactory coordinateSequenceFactory){  this.precisionModel=precisionModel;  this.coordinateSequenceFactory=coordinateSequenceFactory;  this.SRID=SRID;}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof NTSidUserPrincipal))   return false;  return super.equals(o);}  }
class C{  private void decorateUpdatesForRPTarget(RecoverPointVolumeIngestionContext volumeContext,Volume volume,UnManagedVolume unManagedVolume){  StringSetMap unManagedVolumeInformation=unManagedVolume.getVolumeInformation();  if (!VolumeIngestionUtil.checkUnManagedResourceIsNonRPExported(unManagedVolume) && VolumeIngestionUtil.isRPUnManagedVolumeInImageAccessState(unManagedVolume)) {    String rpAccessState=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_ACCESS_STATE.toString(),unManagedVolume.getVolumeInformation());    _logger.error("RP target unmanaged volume is not exported and is in image access state: " + rpAccessState);    throw IngestionException.exceptions.rpUnManagedTargetVolumeInImageAccessState(unManagedVolume.getNativeGuid(),rpAccessState);  }  volume.setPersonality(PersonalityTypes.TARGET.toString());  volume.setAccessState(Volume.VolumeAccessState.NOT_READY.toString());  volume.setLinkStatus(Volume.LinkStatus.IN_SYNC.toString());  String rpManagedSourceVolume=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_MANAGED_SOURCE_VOLUME.toString(),unManagedVolumeInformation);  _logger.info("attempting to link managed RecoverPoint source volume {} to target volume {}",rpManagedSourceVolume,volume.forDisplay());  if (rpManagedSourceVolume != null) {    Volume sourceVolume=null;    BlockObject bo=volumeContext.getRootIngestionRequestContext().findCreatedBlockObject(URI.create(rpManagedSourceVolume));    if (bo != null && bo instanceof Volume) {      sourceVolume=(Volume)bo;    }    if (sourceVolume == null) {      _logger.error("Could not find managed RP source volume in DB: " + rpManagedSourceVolume);      throw IngestionException.exceptions.noManagedSourceVolumeFound(unManagedVolume.getNativeGuid(),rpManagedSourceVolume);    }    if (sourceVolume.getRpTargets() == null) {      sourceVolume.setRpTargets(new StringSet());    }    sourceVolume.getRpTargets().add(volume.getId().toString());    volumeContext.addManagedSourceVolumeToUpdate(sourceVolume);  } else {    _logger.info("There is no ingested RP source volume associated with this target yet: " + volume.getLabel());    String rpUnManagedSourceVolume=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_UNMANAGED_SOURCE_VOLUME.toString(),unManagedVolumeInformation);    if (rpUnManagedSourceVolume == null) {      _logger.error("There is no uningested RP source volume associated with this target either.  This is an error condition: " + volume.getLabel());      throw IngestionException.exceptions.noUnManagedSourceVolumeFound(unManagedVolume.getNativeGuid());    }    UnManagedVolume unManagedSourceVolume=_dbClient.queryObject(UnManagedVolume.class,URI.create(rpUnManagedSourceVolume));    if (unManagedSourceVolume == null) {      _logger.error("Could not find unmanaged RP source volume in DB: " + rpUnManagedSourceVolume);      throw IngestionException.exceptions.noUnManagedSourceVolumeFound2(unManagedVolume.getNativeGuid(),rpUnManagedSourceVolume);    }    StringSet rpManagedTargetVolumeIdStrs=PropertySetterUtil.extractValuesFromStringSet(SupportedVolumeInformation.RP_MANAGED_TARGET_VOLUMES.toString(),unManagedSourceVolume.getVolumeInformation());    rpManagedTargetVolumeIdStrs.add(volume.getId().toString());    unManagedSourceVolume.putVolumeInfo(SupportedVolumeInformation.RP_MANAGED_TARGET_VOLUMES.toString(),rpManagedTargetVolumeIdStrs);    StringSet rpUnManagedTargetVolumeIdStrs=PropertySetterUtil.extractValuesFromStringSet(SupportedVolumeInformation.RP_UNMANAGED_TARGET_VOLUMES.toString(),unManagedSourceVolume.getVolumeInformation());    rpUnManagedTargetVolumeIdStrs.remove(unManagedVolume.getId().toString());    unManagedSourceVolume.putVolumeInfo(SupportedVolumeInformation.RP_UNMANAGED_TARGET_VOLUMES.toString(),rpUnManagedTargetVolumeIdStrs);    volumeContext.addUnmanagedSourceVolumeToUpdate(unManagedSourceVolume);  }}  }
class C{  public String(byte[] bytes,java.lang.String enc) throws java.io.UnsupportedEncodingException {}  }
class C{  private void appendTag(String tagName,String value){  xml.append("\n<");  xml.append(tagName);  xml.append("><![CDATA[");  xml.append(value);  xml.append("]]></");  xml.append(tagName);  xml.append(">");}  }
class C{  public String string(){  return this.value;}  }
class C{  public void testLinesShowingDiscretenessEffect() throws Exception {  runTest("LINESTRING (130 0, 0 0, 0 150)","LINESTRING (10 10, 10 150, 130 10)",14.142135623730951);  runTest("LINESTRING (130 0, 0 0, 0 150)","LINESTRING (10 10, 10 150, 130 10)",0.5,70.0);}  }
class C{  private void init(){  Log4JLogger.addAppender(this);}  }
class C{  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {synchronized (getUpdateLock()) {    if (clusterState == null) {      LOG.warn("ClusterState watchers have not been initialized");      return;    }    ClusterState.CollectionRef ref=clusterState.getCollectionRef(collection);    if (ref == null || legacyCollectionStates.containsKey(collection)) {      LOG.debug("Checking legacy cluster state for collection {}",collection);      refreshLegacyClusterState(null);      if (!legacyCollectionStates.containsKey(collection)) {        LazyCollectionRef tryLazyCollection=new LazyCollectionRef(collection);        if (tryLazyCollection.get() != null) {          LOG.debug("Adding lazily-loaded reference for collection {}",collection);          lazyCollectionStates.putIfAbsent(collection,tryLazyCollection);          constructState(Collections.singleton(collection));        }      }    } else     if (ref.isLazilyLoaded()) {      LOG.debug("Refreshing lazily-loaded state for collection {}",collection);      if (ref.get() != null) {        return;      }      refreshLegacyClusterState(null);    } else     if (watchedCollectionStates.containsKey(collection)) {      LOG.debug("Forcing refresh of watched collection state for {}",collection);      DocCollection newState=fetchCollectionState(collection,null);      if (updateWatchedCollection(collection,newState)) {        constructState(Collections.singleton(collection));      }    } else {      LOG.error("Collection {} is not lazy or watched!",collection);    }  }}  }
class C{  public static boolean equals(IBinding b1,IBinding b2){  return b1.isEqualTo(b2);}  }
class C{  private Vector<Vector<Object>> queryBPartner(){  String sql="SELECT bp.Name,l.PriceActual,l.PriceList,l.QtyInvoiced," + "i.DateInvoiced,dt.PrintName || ' ' || i.DocumentNo As DocumentNo," + "o.Name,"+ "NULL, i.M_PriceList_ID"+ " FROM C_Invoice i"+ " INNER JOIN C_InvoiceLine l ON (i.C_Invoice_ID=l.C_Invoice_ID)"+ " INNER JOIN C_DocType dt ON (i.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN AD_Org o ON (i.AD_Org_ID=o.AD_Org_ID)"+ " INNER JOIN C_BPartner bp ON (i.C_BPartner_ID=bp.C_BPartner_ID) "+ "WHERE l.M_Product_ID=? "+ "ORDER BY i.DateInvoiced DESC";  Vector<Vector<Object>> data=fillTable(sql,m_M_Product_ID);  sql="SELECT Name from M_Product WHERE M_Product_ID=?";  fillLabel(sql,m_M_Product_ID);  return data;}  }
class C{  boolean beamBeats(int direction,Rect source,Rect rect1,Rect rect2){  final boolean rect1InSrcBeam=beamsOverlap(direction,source,rect1);  final boolean rect2InSrcBeam=beamsOverlap(direction,source,rect2);  if (rect2InSrcBeam || !rect1InSrcBeam) {    return false;  }  if (!isToDirectionOf(direction,source,rect2)) {    return true;  }  if ((direction == View.FOCUS_LEFT || direction == View.FOCUS_RIGHT)) {    return true;  }  return (majorAxisDistance(direction,source,rect1) < majorAxisDistanceToFarEdge(direction,source,rect2));}  }
class C{  @RequestMapping(value="/points",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Points> create(@Valid @RequestBody Points points) throws URISyntaxException {  log.debug("REST request to save Points : {}",points);  if (points.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new points cannot already have an ID").body(null);  }  if (!SecurityUtils.isUserInRole(AuthoritiesConstants.ADMIN)) {    log.debug("No user passed in, using current user: {}",SecurityUtils.getCurrentLogin());    points.setUser(userRepository.findOneByLogin(SecurityUtils.getCurrentLogin()).get());  }  Points result=pointsRepository.save(points);  pointsSearchRepository.save(result);  return ResponseEntity.created(new URI("/api/points/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("points",result.getId().toString())).body(result);}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  private static void doSparqlLogging(final AST2BOpContext ctx){  if (!log.isInfoEnabled())   return;  setupLoggingContext(ctx);  final ASTContainer astContainer=ctx.astContainer;  final String queryString=astContainer.getQueryString();  if (queryString != null) {    log.info(queryString);  } else {    if (astContainer.isQuery()) {      log.info(astContainer.getOriginalAST());    } else {      log.info(astContainer.getOriginalUpdateAST());    }  }  clearLoggingContext();}  }
class C{  public static double manhattanDistance(Problem problem,Solution a,Solution b){  return distance(problem,a,b,1.0);}  }
class C{  public static void bottom(String what,NormalMethod method){  System.out.println("*********   END OF:  " + what + "   FOR "+ method);}  }
class C{  public static boolean isInLocationType(Entity entity,EnumLocationType type){  List<LocationStorage> locations=getLocations(entity);  for (  LocationStorage location : locations) {    if (location.getType() == type)     return true;  }  return false;}  }
class C{  public IndependenceTest indTestSubset(List<Node> vars){  if (vars.isEmpty()) {    throw new IllegalArgumentException("Subset may not be empty.");  }  for (  Node var : vars) {    if (!variables.contains(var)) {      throw new IllegalArgumentException("All vars must be original vars");    }  }  int[] indices=new int[vars.size()];  for (int i=0; i < indices.length; i++) {    indices[i]=variables.indexOf(vars.get(i));  }  ICovarianceMatrix newCorrMatrix=covMatrix.getSubmatrix(indices);  double alphaNew=getAlpha();  return new IndTestCramerT(newCorrMatrix,alphaNew);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSSink({DSSinkKind.LOG}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:47.488 -0500",hash_original_method="45656BEA7940AC3102C43782877B83F7",hash_generated_method="14B8BD2AD5AE0301F8239686BB8B06C7") public int restorePackage(String packageName,RestoreObserver observer){  int err=-1;  if (mObserver != null) {    Log.d(TAG,"restorePackage() called during active restore");    return -1;  }  mObserver=new RestoreObserverWrapper(mContext,observer);  try {    err=mBinder.restorePackage(packageName,mObserver);  } catch (  RemoteException e) {    Log.d(TAG,"Can't contact server to restore package");  }  return err;}  }
class C{  public String toString(){  String s="   GeneralSubtrees:\n" + trees.toString() + "\n";  return s;}  }
class C{  private void localListenerInternal() throws Exception {  int messages=MSGS;  Ignite ignite=grid(SERVER_NODE_IDX);  LATCH=new CountDownLatch(messages);  ClusterGroup grp=grid(SERVER_NODE_IDX).cluster().forLocal();  MessageListener c=new MessageListener();  try {    ignite.message(grp).localListen("localListenerTopic",c);    for (int i=0; i < messages; i++)     ignite.message(grp).send("localListenerTopic",value(i));    assertTrue(LATCH.await(10,TimeUnit.SECONDS));  }  finally {    ignite.message().stopLocalListen("localListenerTopic",c);  }}  }
class C{  public DailyTimeIntervalScheduleBuilder withIntervalInHours(int intervalInHours){  withInterval(intervalInHours,IntervalUnit.HOUR);  return this;}  }
class C{  public void emitDirect(int taskId,String streamId,Tuple anchor,List<Object> tuple){  emitDirect(taskId,streamId,Arrays.asList(anchor),tuple);}  }
class C{  public static String encodeObject(final java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public void performSelection(LocationWrapper wrapper){  Bag b=new Bag();  b.add(wrapper);  performSelection(b);}  }
class C{  public void assertArrayEqual(int[] expected,int[] actual){  TestUtils.assertArrayEqual(expected,actual);}  }
class C{  private void readLastSMS(){  ArrayList<Sms> smsList=mSmsManager.getLastSms();  Collections.sort(smsList);  if (smsList.size() > 0) {    sendSmsListOnXmpp(smsList,null,null);  } else {    send(R.string.chat_no_sms);  }}  }
class C{  static boolean isPromoLongpressTriggeredOnly(){  return getBooleanParam(PROMO_ON_LONGPRESS_ONLY);}  }
class C{  protected final boolean compareAndSetState(long expect,long update){  return unsafe.compareAndSwapLong(this,stateOffset,expect,update);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static short toShort(byte a,byte b){  return (short)((a << BYTE_SIZE) | (b & BYTE_MASK));}  }
class C{  public LongArray(LongArray array){  this.ordered=array.ordered;  size=array.size;  items=new long[size];  System.arraycopy(array.items,0,items,0,size);}  }
class C{  public static void attachMetadata(int state,String artist,String album,String track,int durationInSecs){  mSimpleLastFMIntent.putExtra("state",state);  mSimpleLastFMIntent.putExtra("app-name","ACE Music Player");  mSimpleLastFMIntent.putExtra("app-package","com.aniruddhc.acemusic.player");  mSimpleLastFMIntent.putExtra("artist",artist);  mSimpleLastFMIntent.putExtra("album",album);  mSimpleLastFMIntent.putExtra("track",track);  mSimpleLastFMIntent.putExtra("duration",durationInSecs);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthTextPaneUI();}  }
class C{  public long[] unCompress(byte[] compInput){  try {    return Snappy.uncompressLongArray(compInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return null;}  }
class C{  public static String stringFor(int n){switch (n) {case cudaLimitStackSize:    return "cudaLimitStackSize";case cudaLimitPrintfFifoSize:  return "cudaLimitPrintfFifoSize";case cudaLimitMallocHeapSize:return "cudaLimitMallocHeapSize";case cudaLimitDevRuntimeSyncDepth:return "cudaLimitDevRuntimeSyncDepth";case cudaLimitDevRuntimePendingLaunchCount:return "cudaLimitDevRuntimePendingLaunchCount";}return "INVALID cudaLimit: " + n;}  }
class C{  public Boolean isDirectProvisionedSwitch(){  return directProvisionedSwitch;}  }
class C{  boolean addPermEntry(PolicyEntry pe,PolicyParser.PermissionEntry newPerm,int index){  PolicyParser.GrantEntry grantEntry=pe.getGrantEntry();  if (grantEntry.contains(newPerm) == true)   return false;  Vector<PolicyParser.PermissionEntry> permList=grantEntry.permissionEntries;  if (index != -1)   permList.setElementAt(newPerm,index); else   permList.addElement(newPerm);  modified=true;  return true;}  }
class C{  public static boolean isNullOrEmpty(String input){  if (null == input || input.length() <= 0)   return true;  return false;}  }
class C{  static public void assertEquals(float expected,float actual,float delta){  assertEquals(null,expected,actual,delta);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private final void treeWalk(Element e,Collection theElements){  for (Iterator i=e.getChildren().iterator(); i.hasNext(); ) {    Element child=(Element)i.next();    theElements.add(child);    treeWalk(child,theElements);  }}  }
class C{  public static void reorder(List list,int indexFrom,int indexTwo){  Object obj=list.remove(indexFrom);  list.add(indexTwo,obj);}  }
class C{  public FacilitiesWriter(final ActivityFacilities facilities){  this(new IdentityTransformation(),facilities);}  }
class C{  private NamedTag readNamedTag(int depth) throws IOException {  int type=is.readByte();  return new NamedTag(readNamedTagName(type),readTagPayload(type,depth));}  }
class C{  public GetRequest refresh(boolean refresh){  this.refresh=refresh;  return this;}  }
class C{  public int format(double val,byte[] array){  return format(val,array,0,array.length);}  }
class C{  public boolean isPointer(Value val){  if (!(val.getType() instanceof RefLikeType))   return false;  if (getInternalNode(val) != null)   return true;  return false;}  }
class C{  public boolean hasGlossary(){  return hasExtension(GlossariesElement.class);}  }
class C{  @Override public void recycle(){  mNodeCompat.recycle();}  }
class C{  public Analyzer printAnalysis(PrintStream ps) throws IOException {  if (data.isEmpty()) {    return this;  }  Problem problem=null;  try {    problem=getProblemInstance();    NondominatedPopulation referenceSet=getReferenceSet();    List<Indicator> indicators=new ArrayList<Indicator>();    if (includeHypervolume) {      indicators.add(new Hypervolume(problem,referenceSet));    }    if (includeGenerationalDistance) {      indicators.add(new GenerationalDistance(problem,referenceSet));    }    if (includeInvertedGenerationalDistance) {      indicators.add(new InvertedGenerationalDistance(problem,referenceSet));    }    if (includeAdditiveEpsilonIndicator) {      indicators.add(new AdditiveEpsilonIndicator(problem,referenceSet));    }    if (includeMaximumParetoFrontError) {      indicators.add(new MaximumParetoFrontError(problem,referenceSet));    }    if (includeSpacing) {      indicators.add(new Spacing(problem,referenceSet));    }    if (includeContribution) {      if (epsilon == null) {        indicators.add(new Contribution(referenceSet));      } else {        indicators.add(new Contribution(referenceSet,epsilon));      }    }    if (indicators.isEmpty()) {      System.err.println("no indicators selected");      return this;    }    Map<String,NondominatedPopulation> aggregateSets=new HashMap<String,NondominatedPopulation>();    if (showAggregate) {      for (      String algorithm : data.keySet()) {        NondominatedPopulation aggregateSet=newArchive();        for (        NondominatedPopulation set : data.get(algorithm)) {          aggregateSet.addAll(set);        }        aggregateSets.put(algorithm,aggregateSet);      }    }    Map<String,Map<Indicator,double[]>> metrics=new HashMap<String,Map<Indicator,double[]>>();    for (    String algorithm : data.keySet()) {      Map<Indicator,double[]> entry=new HashMap<Indicator,double[]>();      for (      Indicator indicator : indicators) {        List<NondominatedPopulation> sets=data.get(algorithm);        double[] values=new double[sets.size()];        for (int i=0; i < sets.size(); i++) {          values[i]=indicator.evaluate(sets.get(i));        }        entry.put(indicator,values);      }      metrics.put(algorithm,entry);    }    Map<Indicator,Map<String,List<String>>> indifferences=new HashMap<Indicator,Map<String,List<String>>>();    if (showStatisticalSignificance) {      List<String> algorithms=new ArrayList<String>(metrics.keySet());      for (      Indicator indicator : indicators) {        HashMap<String,List<String>> entry=new HashMap<String,List<String>>();        for (        String algorithm : algorithms) {          entry.put(algorithm,new ArrayList<String>());        }        indifferences.put(indicator,entry);      }      for (      Indicator indicator : indicators) {        if (algorithms.size() < 2) {          continue;        }        KruskalWallisTest kwTest=new KruskalWallisTest(algorithms.size());        for (int i=0; i < algorithms.size(); i++) {          kwTest.addAll(metrics.get(algorithms.get(i)).get(indicator),i);        }        try {          if (!kwTest.test(significanceLevel)) {            for (int i=0; i < algorithms.size() - 1; i++) {              for (int j=i + 1; j < algorithms.size(); j++) {                indifferences.get(indicator).get(algorithms.get(i)).add(algorithms.get(j));                indifferences.get(indicator).get(algorithms.get(j)).add(algorithms.get(i));              }            }          } else {            for (int i=0; i < algorithms.size() - 1; i++) {              for (int j=i + 1; j < algorithms.size(); j++) {                MannWhitneyUTest mwTest=new MannWhitneyUTest();                mwTest.addAll(metrics.get(algorithms.get(i)).get(indicator),0);                mwTest.addAll(metrics.get(algorithms.get(j)).get(indicator),1);                if (!mwTest.test(significanceLevel)) {                  indifferences.get(indicator).get(algorithms.get(i)).add(algorithms.get(j));                  indifferences.get(indicator).get(algorithms.get(j)).add(algorithms.get(i));                }              }            }          }        } catch (        RuntimeException e) {          e.printStackTrace();        }      }    }    Min min=new Min();    Max max=new Max();    Median median=new Median();    for (    String algorithm : metrics.keySet()) {      ps.print(algorithm);      ps.println(':');      for (      Indicator indicator : indicators) {        double[] values=metrics.get(algorithm).get(indicator);        ps.print("    ");        ps.print(indicator.getClass().getSimpleName());        ps.print(": ");        if (values.length == 0) {          ps.print("null");        } else         if (values.length == 1) {          ps.print(values[0]);        } else {          ps.println();          if (showAggregate) {            ps.print("        Aggregate: ");            ps.println(indicator.evaluate(aggregateSets.get(algorithm)));          }          if (statistics.isEmpty()) {            ps.print("        Min: ");            ps.println(min.evaluate(values));            ps.print("        Median: ");            ps.println(median.evaluate(values));            ps.print("        Max: ");            ps.println(max.evaluate(values));          } else {            for (            UnivariateStatistic statistic : statistics) {              ps.print("        ");              ps.print(statistic.getClass().getSimpleName());              ps.print(": ");              ps.println(statistic.evaluate(values));            }          }          ps.print("        Count: ");          ps.print(values.length);          if (showStatisticalSignificance) {            ps.println();            ps.print("        Indifferent: ");            ps.print(indifferences.get(indicator).get(algorithm));          }          if (showIndividualValues) {            ps.println();            ps.print("        Values: ");            ps.print(Arrays.toString(values));          }        }        ps.println();      }    }  }  finally {    if (problem != null) {      problem.close();    }  }  return this;}  }
class C{  public TransformException(String message){  super(message);}  }
class C{  public void testGetAccentColorsByName(){  try {    for (    String name : MaterialPalettes.COLORS_WITH_ACCENT_NAMES) {      List<Integer> colorList=MaterialPalettes.getAccentColorsByName(name);      assertEquals(MaterialPalettes.ACCENT_COLOR_LEVELS.length,colorList.size());    }  } catch (  IllegalAccessException iae) {    fail();  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"CPS");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset++));}  }
class C{  public ParseException(String message,Exception e){  super(message);  this.exception=e;}  }
class C{  public UnsignedShort dec(){  return valueOf(getValue() - 1);}  }
class C{  void loginByNameSecure() throws Exception {  System.out.println("Secure Systems Inc. - login using placeholders");  String name=input("Name?");  String password=input("Password?");  PreparedStatement prep=conn.prepareStatement("SELECT * FROM USERS WHERE " + "NAME=? AND PASSWORD=?");  prep.setString(1,name);  prep.setString(2,password);  ResultSet rs=prep.executeQuery();  if (rs.next()) {    System.out.println("Welcome!");  } else {    System.out.println("Access denied!");  }  rs.close();  prep.close();}  }
class C{  public void decodeTilePixels(byte[] input,Rectangle newRect,short[] sdata){  int bytesInThisTile=unitsInThisTile * 2;  byte byteArray[]=new byte[bytesInThisTile];  decodePackbits(input,bytesInThisTile,byteArray);  unpackShorts(byteArray,sdata,unitsInThisTile);}  }
class C{  private ChatAction createAction(String action) throws CompilationFailedException {  final GroovyShell interp=createGroovyShell();  String code="import games.stendhal.server.entity.npc.action.*;\r\n" + action;  ChatAction created=(ChatAction)interp.evaluate(code);  return created;}  }
class C{  @Override public String encode(TokenOnWire tw){  try {    if (_tokenEncodingDisabler != null) {      return tw.getTokenId().toString();    }    KeyIdKeyPair pair=tw.isProxyToken() ? _keyGenerator.getProxyTokenSignatureKeyPair() : _keyGenerator.getCurrentTokenSignatureKeyPair();    tw.setEncryptionKeyId(pair.getEntry());    byte[] rawTokenBytes=_serializer.toByteArray(TokenOnWire.class,tw);    String signature=SignatureHelper.sign2(rawTokenBytes,pair.getKey(),TOKEN_SIGNING_ALGO);    SignedToken st=new SignedToken(rawTokenBytes,signature);    byte[] rawSignedTokenBytes=_serializer.toByteArray(SignedToken.class,st);    byte[] encodedBytes=Base64.encodeBase64(rawSignedTokenBytes);    return new String(encodedBytes,"UTF-8");  } catch (  Exception ex) {    throw APIException.unauthorized.unableToEncodeToken(ex);  }}  }
class C{  public String estimatorTipText(){  return "Select Estimator algorithm for finding the conditional probability tables" + " of the Bayes Network.";}  }
class C{  public static byte[] decrypt(byte[] encrypted) throws GeneralSecurityException {  SecretKeySpec skeySpec=new SecretKeySpec(Base64.decodeBase64(ENCRYPTION_KEY),"AES");  byte[] decoded=Base64.decodeBase64(encrypted);  Cipher cipher=Cipher.getInstance("AES");  cipher.init(Cipher.DECRYPT_MODE,skeySpec);  return cipher.doFinal(decoded);}  }
class C{  public static Encoding charEncoding(String charsetName){synchronized (charEncodingMap) {    Encoding encoding=charEncodingMap.get(charsetName);    if (encoding == null) {      try {        Charset charset=Charset.forName(charsetName);        if (charset.name().equals("UTF-8"))         encoding=UTF8Encoder.INSTANCE; else         if (charset.newEncoder().maxBytesPerChar() == 1.0)         encoding=SBCSEncoder.INSTANCE;      } catch (      IllegalCharsetNameException|UnsupportedCharsetException|UnsupportedOperationException ex) {        encoding=SBCSEncoder.INSTANCE;      }      if (encoding == null)       encoding=new SlowMBCSEncoder(charsetName);      charEncodingMap.put(charsetName,encoding);    }    return encoding;  }}  }
class C{  public void disableCurlLogging(){  curlConfiguration=null;}  }
class C{  public void run(final String[] args){  if (args.length == 0) {    System.out.println("Too few arguments.");    printUsage();    System.exit(1);  }  Iterator<String> argIter=new ArgumentParser(args).iterator();  String arg=argIter.next();  if (arg.equals("-h") || arg.equals("--help")) {    printUsage();    System.exit(0);  } else {    String inputFile=arg;    if (!argIter.hasNext()) {      System.out.println("Too few arguments.");      printUsage();      System.exit(1);    }    String outputFile=argIter.next();    if (argIter.hasNext()) {      System.out.println("Too many arguments.");      printUsage();      System.exit(1);    }    run(inputFile,outputFile);  }}  }
class C{  public boolean isZipped(){  return zipFile != null;}  }
class C{  public static boolean isTargetTable(final Component source){  return UIComponentIdProvider.TARGET_TABLE_ID.equalsIgnoreCase(source.getId());}  }
class C{  protected void onInitTypeWithOriginalThrowable(Throwable originalThrowable){  if (originalThrowable == null) {    return;  }  String throwableClassName=originalThrowable.getClass().getName();  if (TextUtils.isEmpty(throwableClassName)) {    return;  }  if (throwableClassName.equals(NullPointerException.class.getName())) {    mType=TYPE_NULL_POINTER;  }}  }
class C{  public void stopTouchTypeDetection(){  touchTypeDetector=null;}  }
class C{  public static mat4 createTranslate(vec3 v){  mat4 result=new mat4();  result.m[12]=v.m[0];  result.m[13]=v.m[1];  result.m[14]=v.m[2];  return result;}  }
class C{  @Override public void initView(Application a,View v){}  }
class C{  protected void paintButtonPressed(Graphics g,AbstractButton b){}  }
class C{  private boolean startConnection(){  long now=getCurrentTimeActual();  updateIdleExpireTime(now);  int id=_gId.incrementAndGet();  _launcher.launchChildThread(id);  return true;}  }
class C{  public void paintComponent(Graphics g,Component c,Container p,int x,int y,int w,int h){  paintComponent(g,c,p,x,y,w,h,false);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public static void safeCopy(final Reader reader,final Writer writer) throws IOException {  try {    IOUtils.copy(reader,writer);  }  finally {    IOUtils.closeQuietly(reader);    IOUtils.closeQuietly(writer);  }}  }
class C{  public boolean isFieldSeparatorAtStart(){  return super.isFieldSeparatorAtStart();}  }
class C{  public final int intValue(){  return this.value;}  }
class C{  public void message(AcelaMessage r){  log.warn("unexpected message");}  }
class C{  public void onReturnForeground(){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (Sage.EMBEDDED)   return null;  if (!(o instanceof MetaImage)) {    o=MetaImage.getMetaImage(o == null ? null : o.toString(),stack.getUIComponent());  }  if (o instanceof MetaImage) {    java.awt.image.BufferedImage rv=ImageUtils.cloneImage(((MetaImage)o).getJavaImage(0));    ((MetaImage)o).removeJavaRef(0);    return rv;  }  return null;}  }
class C{  public void testFloatValuePlusZero(){  String a="123809648392384754573567356745735.63567890295784902768787678287E-400";  BigDecimal aNumber=new BigDecimal(a);  int zero=0;  float result=aNumber.floatValue();  assertTrue("incorrect value",Float.floatToIntBits(result) == zero);}  }
class C{  @Restrictions({@Restrict({"SYSTEM_ADMIN","SECURITY_ADMIN"}),@Restrict({"RESTRICTED_SYSTEM_ADMIN","RESTRICTED_SECURITY_ADMIN"})}) public static void save(@Valid SetupForm setup){  checkCompleteAndLicensed();  setup.validate();  if (Validation.hasErrors()) {    protectPasswords();    params.flash();    Validation.keep();    index();  }  Map<String,String> properties=getUpdatedProperties(setup);  completeInitialSetup(properties);}  }
class C{  public static LazySetX<Integer> range(int start,int end){  return fromStreamS(ReactiveSeq.range(start,end));}  }
class C{  public V pop() throws IndexOutOfBoundsException {  if (top == 0) {    throw new IndexOutOfBoundsException("Cannot pop operand off an empty stack.");  }  return values[--top + locals];}  }
class C{  public boolean isAttributeCompatible(Mention b){  if (getType() == MentionType.ENTITY && b.getType() == MentionType.ENTITY) {    Class<? extends Base> aClass=getAnnotation().getClass();    Class<? extends Base> bClass=b.getAnnotation().getClass();    if (!aClass.isAssignableFrom(bClass) && !bClass.isAssignableFrom(aClass)) {      return false;    }  }  return Gender.lenientEquals(getGender(),b.getGender()) && Animacy.strictEquals(getAnimacy(),b.getAnimacy()) && Multiplicity.strictEquals(getMultiplicity(),b.getMultiplicity())&& Person.strictEquals(getPerson(),b.getPerson());}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public AbTitleBar(Context context,AttributeSet attrs){  super(context,attrs);  ininTitleBar(context);}  }
class C{  public boolean computeScrollOffset(){  return mScroller.computeScrollOffset();}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos < buf.length) {      return buf[pos++];    }    return in.read();  }}  }
class C{  @SuppressWarnings("IfMayBeConditional") public static int[] difference(int[] a,int aLen,int[] b,int bLen){  assert a != null;  assert b != null;  assert isIncreasingArray(a,aLen);  assert isIncreasingArray(b,bLen);  int[] res=new int[aLen];  int resLen=0;  int i=0;  int j=0;  while (i < aLen && j < bLen) {    if (a[i] == b[j])     i++; else     if (a[i] < b[j])     res[resLen++]=a[i++]; else     j++;  }  while (i < aLen)   res[resLen++]=a[i++];  return copyIfExceeded(res,resLen);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumentnodeattribute.class,args);}  }
class C{  @DSComment("device administration") @DSSpec(DSCat.DEVICE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:52.678 -0500",hash_original_method="DEBAA688BC0765F8640468141F520924",hash_generated_method="27BF5B51AAA4CF65F3AECBF647F40D39") public boolean isAdminActive(ComponentName who){  if (mService != null) {    try {      return mService.isAdminActive(who);    } catch (    RemoteException e) {      Log.w(TAG,"Failed talking with device policy service",e);    }  }  return false;}  }
class C{  private synchronized void resetNotification(){  mNotificationRepeatTime=0;  mNumScansSinceNetworkStateChange=0;  setNotificationVisible(false,0,false,0);}  }
class C{  public static void flushEL(Writer w){  try {    if (w != null)     w.flush();  } catch (  Exception e) {  }}  }
class C{  public void load(InputStream is){  int nw=0, nh=0, di=0;  IHex[] nd=new IHex[0];  resetStoredElevation();  try {    Reader r=new BufferedReader(new InputStreamReader(is));    StreamTokenizer st=new StreamTokenizer(r);    st.eolIsSignificant(true);    st.commentChar('#');    st.quoteChar('"');    st.wordChars('_','_');    int x_pos=1;    int y_pos=1;    while (st.nextToken() != StreamTokenizer.TT_EOF) {      if ((st.ttype == StreamTokenizer.TT_WORD) && st.sval.equalsIgnoreCase("size")) {        String[] args={"0","0"};        int i=0;        while ((st.nextToken() == StreamTokenizer.TT_WORD) || (st.ttype == '"') || (st.ttype == StreamTokenizer.TT_NUMBER)) {          args[i++]=st.ttype == StreamTokenizer.TT_NUMBER ? (int)st.nval + "" : st.sval;        }        nw=Integer.parseInt(args[0]);        nh=Integer.parseInt(args[1]);        nd=new IHex[nw * nh];        di=0;      } else       if ((st.ttype == StreamTokenizer.TT_WORD) && st.sval.equalsIgnoreCase("option")) {        String[] args={"",""};        int i=0;        while ((st.nextToken() == StreamTokenizer.TT_WORD) || (st.ttype == '"') || (st.ttype == StreamTokenizer.TT_NUMBER)) {          args[i++]=st.ttype == StreamTokenizer.TT_NUMBER ? (int)st.nval + "" : st.sval;        }        if (args[0].equalsIgnoreCase("exit_roads_to_pavement")) {          if (args[1].equalsIgnoreCase("false")) {            roadsAutoExit=false;          } else {            roadsAutoExit=true;          }        }      } else       if ((st.ttype == StreamTokenizer.TT_WORD) && st.sval.equalsIgnoreCase("hex")) {        String[] args={"","0","",""};        int i=0;        while ((st.nextToken() == StreamTokenizer.TT_WORD) || (st.ttype == '"') || (st.ttype == StreamTokenizer.TT_NUMBER)) {          args[i++]=st.ttype == StreamTokenizer.TT_NUMBER ? (int)st.nval + "" : st.sval;        }        int elevation=Integer.parseInt(args[1]);        int newIndex=indexFor(args[0],nw,y_pos);        nd[newIndex]=new Hex(elevation,args[2],args[3],new Coords(x_pos - 1,y_pos - 1));        x_pos++;        if (x_pos > nw) {          y_pos++;          x_pos=1;        }      } else       if ((st.ttype == StreamTokenizer.TT_WORD) && st.sval.equalsIgnoreCase("background")) {        st.nextToken();        File bgFile=new File(Configuration.boardBackgroundsDir(),st.sval);        if (bgFile.exists()) {          backgroundPaths.add(bgFile.getPath());        } else {          System.err.println("Board specified background image, " + "but path couldn't be found! Path: " + bgFile.getPath());        }      } else       if ((st.ttype == StreamTokenizer.TT_WORD) && st.sval.equalsIgnoreCase("end")) {        break;      }    }  } catch (  IOException ex) {    System.err.println("i/o error reading board");    System.err.println(ex);  }  for (int i=0; i < nd.length; i++) {    if (nd[i] == null) {      nd[i]=new Hex();    }  }  if ((nw > 1) || (nh > 1) || (di == (nw * nh))) {    newData(nw,nh,nd);  } else {    System.err.println("board data invalid");  }}  }
class C{  public String[] computeBinding(IType superType,int index) throws JavaModelException, IndexOutOfBoundsException {  initBounds();  computeTypeParameterBinding(superType,index);  return fBounds.toArray(new String[fBounds.size()]);}  }
class C{  @Override public DataTable sample(int newSize){  int rowCount=getRowNumber();  if (rowCount <= newSize) {    return this;  }  int[] sampledSelectedIndices=new int[rowCount];  for (int i=0; i < rowCount; ++i) {    sampledSelectedIndices[i]=i;  }  Random rng=new Random(0);  int swapIdx;  int tmpValue;  for (int i=0; i < rowCount; ++i) {    swapIdx=rng.nextInt(rowCount);    tmpValue=sampledSelectedIndices[swapIdx];    sampledSelectedIndices[swapIdx]=sampledSelectedIndices[i];    sampledSelectedIndices[i]=tmpValue;  }  DataTableView sampledDataTable=new DataTableView(this);  Vector<Integer> sampledSelectedIndicesVector=new Vector<Integer>(newSize);  for (int i=0; i < newSize; ++i) {    sampledSelectedIndicesVector.add(sampledSelectedIndices[i]);  }  sampledDataTable.setSelectedIndices(sampledSelectedIndicesVector);  return sampledDataTable;}  }
class C{  public String[] toArray(){  String[] tokenArray=new String[countTokens()];  for (int i=0; hasMoreTokens(); i++) {    tokenArray[i]=nextToken();  }  return tokenArray;}  }
class C{  public void visitEnd(){  if (mv != null) {    mv.visitEnd();  }}  }
class C{  void recycle(){  flushed=false;  closed=false;  out=null;  byteOut=null;  releaseCharBuffer();  response=null;}  }
class C{  public ControlEditText(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.ControlEditText);  ADD_VALUE=typedArray.getInt(R.styleable.ControlEditText_add_step,ADD_VALUE);  SUB_VALUE=typedArray.getInt(R.styleable.ControlEditText_sub_step,SUB_VALUE);  mMaxNum=typedArray.getInt(R.styleable.ControlEditText_max_value,mMaxNum);  mMinNum=typedArray.getInt(R.styleable.ControlEditText_min_value,mMinNum);  buttonWeight=typedArray.getFloat(R.styleable.ControlEditText_button_weight,buttonWeight);  mRadii=typedArray.getDimension(R.styleable.ControlEditText_border_radii,mRadii);  mBorderWidth=typedArray.getDimension(R.styleable.ControlEditText_border_width,mBorderWidth);  mBorderColor=typedArray.getColor(R.styleable.ControlEditText_border_color,mBorderColor);  mBorderColorPress=typedArray.getColor(R.styleable.ControlEditText_border_color_press,mBorderColorPress);  mErrorTip=typedArray.getBoolean(R.styleable.ControlEditText_show_error,mErrorTip);  String text=typedArray.getString(R.styleable.ControlEditText_error_text);  if (!TextUtils.isEmpty(text)) {    mErrorTipText=text;  }  typedArray.recycle();  init();  initDefaultData();}  }
class C{  public static void checkNotRecording(){  instrumentation.waitForIdleSync();  Assert.assertEquals(trackListActivity.getString(R.string.image_record),(String)SOLO.getCurrentActivity().findViewById(R.id.track_controller_record).getContentDescription());  Assert.assertFalse(SOLO.getCurrentActivity().findViewById(R.id.track_controller_stop).isEnabled());  Assert.assertNull(findTextView(trackListActivity.getString(R.string.generic_recording)));  Assert.assertNull(findTextView(trackListActivity.getString(R.string.generic_paused)));  Assert.assertFalse(SOLO.getCurrentActivity().findViewById(R.id.track_controller_total_time).isShown());}  }
class C{  static void drawPressed3DBorder(Graphics g,Rectangle r){  drawPressed3DBorder(g,r.x,r.y,r.width,r.height);}  }
class C{  @HLEFunction(nid=0xC7C1FC57,version=150) public int sceNetAdhocGetPdpStat(TPointer32 sizeAddr,@CanBeNull TPointer buf){  checkInitialized();  final int objectInfoSize=20;  int size=sizeAddr.getValue();  sizeAddr.setValue(objectInfoSize * pdpObjects.size());  if (log.isDebugEnabled()) {    log.debug(String.format("sceNetAdhocGetPdpStat returning size=%d",sizeAddr.getValue()));  }  if (buf.isNotNull()) {    int offset=0;    for (    int pdpId : pdpObjects.keySet()) {      PdpObject pdpObject=pdpObjects.get(pdpId);      if (offset + objectInfoSize > size || pdpObject == null) {        break;      }      try {        pdpObject.update();      } catch (      IOException e) {      }      if (log.isDebugEnabled()) {        log.debug(String.format("sceNetAdhocGetPdpStat returning %s at 0x%08X",pdpObject,buf.getAddress() + offset));      }      offset+=4;      buf.setValue32(offset,pdpObject.getId());      offset+=4;      pdpObject.getMacAddress().write(buf.getMemory(),buf.getAddress() + offset);      offset+=pdpObject.getMacAddress().sizeof();      buf.setValue16(offset,(short)pdpObject.getPort());      offset+=2;      buf.setValue32(offset,pdpObject.getRcvdData());      offset+=4;    }    fillNextPointersInLinkedList(buf,offset,objectInfoSize);  }  return 0;}  }
class C{  public boolean secure(){  return secure;}  }
class C{  public static void displayPanel(JComponent component,String string){  JFrame frame=new JFrame();  frame.getContentPane().add(component);  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);  frame.setTitle(string);}  }
class C{  protected SelectedDenseObjectMatrix2D(Object[] elements,int[] rowOffsets,int[] columnOffsets,int offset){  this(rowOffsets.length,columnOffsets.length,elements,0,0,1,1,rowOffsets,columnOffsets,offset);}  }
class C{  private String createEqualityKey(){  GridStringBuilder sb=new GridStringBuilder("(").a(usr).a(")@");  if (uri.getScheme() != null)   sb.a(uri.getScheme().toLowerCase());  sb.a("://");  if (uri.getAuthority() != null)   sb.a(uri.getAuthority().toLowerCase());  return sb.toString();}  }
class C{  public void addNewDuration(long duration){  callsNumber.incrementAndGet();  total.addAndGet(duration);synchronized (lock) {    if (duration < minimum.longValue()) {      minimum.set(duration);    }    if (duration > maximum.longValue()) {      maximum.set(duration);    }  }}  }
class C{  @Override public void rescan(){  restart();}  }
class C{  public void testConnectorSecuritySettingsSSL_alias_error(){  resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("test.ssl.alias.wrong.security.properties",true,TUNGSTEN_APPLICATION_NAME.CONNECTOR);  } catch (  ServerRuntimeException e) {    assertTrue("An exception was thrown, that's expected !",true);  }catch (  ConfigurationException e) {    assertFalse("That should not be this kind of Exception being thrown",true);  }  resetSecuritySystemProperties();}  }
class C{  private static void d_uacvar(double[] a,double[] c,int m,int n,CM_COV_Object cbuff,CM cm,int rl,int ru) throws DMLRuntimeException {  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n)   varAgg(a,c,aix,0,n,cbuff,cm);}  }
class C{  private void locationUpdated(Intent intent){  Log.v(TAG,ACTION_LOCATION_UPDATED);  Location location=intent.getParcelableExtra(FusedLocationProviderApi.KEY_LOCATION_CHANGED);  if (location != null) {    LatLng latLngLocation=new LatLng(location.getLatitude(),location.getLongitude());    Utils.storeLocation(this,latLngLocation);    LocalBroadcastManager.getInstance(this).sendBroadcast(intent);  }}  }
class C{  public ViPRCall(ViPRCoreClient client){  if (client == null) {    throw new IllegalArgumentException("ViPR client cannot be null");  }  this.client=client;}  }
class C{  public void updateNull(int columnIndex) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateNull(columnIndex);}  }
class C{  public IVTVBroadcastCaptureDevice(){  super();}  }
class C{  public CsvWriter(Writer writer){  this(new BufferedWriter(writer));}  }
class C{  public static boolean isWhitespace(String s){  if (s == null) {    return false;  }  int sLen=s.length();  for (int i=0; i < sLen; i++) {    if (!Character.isWhitespace(s.charAt(i))) {      return false;    }  }  return true;}  }
class C{  @SuppressWarnings("unchecked") public static <E>void mergeArrayIntoCollection(Object array,Collection<E> collection){  if (collection == null) {    throw new IllegalArgumentException("Collection must not be null");  }  Object[] arr=ObjectUtils.toObjectArray(array);  for (  Object elem : arr) {    collection.add((E)elem);  }}  }
class C{  public Task<QuotaDirectoryRestRep> updateQuotaDirectory(URI id,QuotaDirectoryUpdateParam update){  return postTask(update,getIdUrl(),id);}  }
class C{  public static Subscription cancelledSubscription(){  return CancelledSubscription.INSTANCE;}  }
class C{  protected LinkedList<Diff> diff_bisect(String text1,String text2,long deadline){  int text1_length=text1.length();  int text2_length=text2.length();  int max_d=(text1_length + text2_length + 1) / 2;  int v_offset=max_d;  int v_length=2 * max_d;  int[] v1=new int[v_length];  int[] v2=new int[v_length];  for (int x=0; x < v_length; x++) {    v1[x]=-1;    v2[x]=-1;  }  v1[v_offset + 1]=0;  v2[v_offset + 1]=0;  int delta=text1_length - text2_length;  boolean front=(delta % 2 != 0);  int k1start=0;  int k1end=0;  int k2start=0;  int k2end=0;  for (int d=0; d < max_d; d++) {    if (System.currentTimeMillis() > deadline) {      break;    }    for (int k1=-d + k1start; k1 <= d - k1end; k1+=2) {      int k1_offset=v_offset + k1;      int x1;      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {        x1=v1[k1_offset + 1];      } else {        x1=v1[k1_offset - 1] + 1;      }      int y1=x1 - k1;      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {        x1++;        y1++;      }      v1[k1_offset]=x1;      if (x1 > text1_length) {        k1end+=2;      } else       if (y1 > text2_length) {        k1start+=2;      } else       if (front) {        int k2_offset=v_offset + delta - k1;        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {          int x2=text1_length - v2[k2_offset];          if (x1 >= x2) {            return diff_bisectSplit(text1,text2,x1,y1,deadline);          }        }      }    }    for (int k2=-d + k2start; k2 <= d - k2end; k2+=2) {      int k2_offset=v_offset + k2;      int x2;      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {        x2=v2[k2_offset + 1];      } else {        x2=v2[k2_offset - 1] + 1;      }      int y2=x2 - k2;      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {        x2++;        y2++;      }      v2[k2_offset]=x2;      if (x2 > text1_length) {        k2end+=2;      } else       if (y2 > text2_length) {        k2start+=2;      } else       if (!front) {        int k1_offset=v_offset + delta - k2;        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {          int x1=v1[k1_offset];          int y1=v_offset + x1 - k1_offset;          x2=text1_length - x2;          if (x1 >= x2) {            return diff_bisectSplit(text1,text2,x1,y1,deadline);          }        }      }    }  }  LinkedList<Diff> diffs=new LinkedList<Diff>();  diffs.add(new Diff(Operation.DELETE,text1));  diffs.add(new Diff(Operation.INSERT,text2));  return diffs;}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  protected void write(byte[]... chunks) throws Exception {  IgfsOutputStream os=igfs.create(FILE,true);  if (chunks != null) {    for (    byte[] chunk : chunks)     os.write(chunk);  }  os.close();}  }
class C{  public BulletConstructor(final Model model,final btCollisionShape shape){  this(model,-1f,shape);}  }
class C{  private void limpar(){  Campo.limpar(txtNumOrdem);}  }
class C{  protected Class<?> loadClassEntry(ClassEntry entry) throws IOException, ClassNotFoundException {  Class<?> cl=null;  byte[] bBuf;  int bLen;synchronized (entry) {    cl=entry.getEntryClass();    if (cl != null)     return cl;    entry.preLoad();    String name=entry.getName();    int p=name.lastIndexOf('.');    if (p > 0) {      String packageName=name.substring(0,p);      Package pkg=getPackage(packageName);      ClassPackage classPackage=entry.getClassPackage();      if (pkg == null) {synchronized (_packageLock) {          pkg=getPackage(packageName);          if (pkg != null) {          } else           if (classPackage != null) {            definePackage(packageName,classPackage.getSpecificationTitle(),classPackage.getSpecificationVersion(),classPackage.getSpecificationVendor(),classPackage.getImplementationTitle(),classPackage.getImplementationVersion(),classPackage.getImplementationVendor(),null);          } else {            definePackage(packageName,null,null,null,null,null,null,null);          }        }      }    }    ByteArrayBuffer buffer=new ByteArrayBuffer();    entry.load(buffer);    bBuf=buffer.getBuffer();    bLen=buffer.length();  }  try {    cl=findLoadedClass(entry.getName());    if (cl != null) {      if (entry.getEntryClass() == null)       entry.setEntryClass(cl);      return cl;    }    cl=defineClass(entry.getName(),bBuf,0,bLen,entry.getCodeSource());    entry.setEntryClass(cl);  } catch (  RuntimeException e) {    log().log(Level.FINER,entry.getName() + " [" + e.toString()+ "]",e);    throw e;  }catch (  Exception e) {    log().log(Level.FINER,entry.getName() + " [" + e.toString()+ "]",e);    ClassNotFoundException exn;    exn=new ClassNotFoundException(entry.getName() + " [" + e+ "]",e);    throw exn;  }catch (  LinkageError e) {    cl=findLoadedClass(entry.getName());    if (cl != null) {      log().log(Level.FINE,e.toString(),e);      return cl;    } else     throw e;  }  if (entry.postLoad()) {    _dependencies.add(AlwaysModified.create());    _dependencies.setModified(true);  }  return cl;}  }
class C{  public Hex(int level){  this(level,new ITerrain[Terrains.SIZE],null,new Coords(0,0));}  }
class C{  private Result validate(){  final AccountCreationRules rules=new AccountCreationRules(username,password,email);  final ValidatorList validators=rules.getAllRules();  final Result result=validators.runValidators();  return result;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"BKPT");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:26.754 -0500",hash_original_method="29DE357DDC3ECBFCF076FFF8D1A02781",hash_generated_method="117666C7E7CB9254CE697D62B49826BD") @Deprecated public static final boolean supportsProcesses(){  return true;}  }
class C{  public static Address generateRandomAddressWithPublicKey(){  return Address.fromPublicKey(Utils.generateRandomPublicKey());}  }
class C{  public void add(DataSource source){  sources.add(source);}  }
class C{  public MaterialFilePicker withFragment(Fragment fragment){  if (mSupportFragment != null || mActivity != null) {    throw new RuntimeException("You must pass either Activity, Fragment or SupportFragment");  }  mFragment=fragment;  return this;}  }
class C{  public ConfigurationSocketAdapter configureFromString(String xml) throws RuntimeException {  if (log.isInfoEnabled()) {    log.info("Configuring from string");  }  try {    InputSource source=new InputSource(new StringReader(xml));    DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();    builderFactory.setNamespaceAware(true);    Document doc=builderFactory.newDocumentBuilder().parse(source);    ConfigurationSocketAdapterParser.doConfigure(this,doc);    return this;  } catch (  IOException ioe) {    throw new RuntimeException("could not configure from String: " + ioe.getMessage(),ioe);  }catch (  SAXException e) {    throw new RuntimeException("could not configure from String: " + e.getMessage(),e);  }catch (  ParserConfigurationException e) {    throw new RuntimeException("could not configure from String: " + e.getMessage(),e);  }}  }
class C{  synchronized boolean readCertificates(){  if (metaEntries == null) {    return false;  }  Iterator<String> it=metaEntries.keySet().iterator();  while (it.hasNext()) {    String key=it.next();    if (key.endsWith(".DSA") || key.endsWith(".RSA") || key.endsWith(".EC")) {      verifyCertificate(key);      if (metaEntries == null) {        return false;      }      it.remove();    }  }  return true;}  }
class C{  public static void e(String msg,Throwable throwable){  if (!allowE)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  private Entry entry(int index){  if (index < 0 || index >= size) {    throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  }  Entry e=header;  if (index < (size >> 1)) {    for (int i=0; i <= index; i++)     e=e.next;  } else {    for (int i=size; i > index; i--)     e=e.previous;  }  return e;}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("batch") @Valid Batch batch,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.Batch jpaBatch=new com.wipro.ats.bdre.md.dao.jpa.Batch();    jpaBatch.setBatchId(batch.getBatchId());    jpaBatch.setBatchType(batch.getBatchType());    InstanceExec instanceExec=new InstanceExec();    if (batch.getSourceInstanceExecId() != null) {      instanceExec.setInstanceExecId(batch.getSourceInstanceExecId());      jpaBatch.setInstanceExec(instanceExec);    }    batchDAO.update(jpaBatch);    restWrapper=new RestWrapper(batch,RestWrapper.OK);    LOGGER.info(RECORDWITHID + batch.getBatchId() + " updated in Batch by User:"+ principal.getName()+ batch);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public LongConstant(ConstantPool pool,int index,long value){  super(pool,index);  _value=value;}  }
class C{  public static char[] base64Encode(byte[] a){  int aLen=a.length;  int numFullGroups=aLen / 3;  int numBytesInPartialGroup=aLen - 3 * numFullGroups;  int resultLen=4 * ((aLen + 2) / 3);  char[] result=new char[resultLen];  char[] intToAlpha=intToBase64;  int inCursor=0;  int outCursor=0;  for (int i=0; i < numFullGroups; i++) {    int byte0=a[inCursor++] & 0xff;    int byte1=a[inCursor++] & 0xff;    int byte2=a[inCursor++] & 0xff;    result[outCursor++]=intToAlpha[byte0 >> 2];    result[outCursor++]=intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)];    result[outCursor++]=intToAlpha[(byte1 << 2) & 0x3f | (byte2 >> 6)];    result[outCursor++]=intToAlpha[byte2 & 0x3f];  }  if (numBytesInPartialGroup != 0) {    int byte0=a[inCursor++] & 0xff;    result[outCursor++]=intToAlpha[byte0 >> 2];    if (numBytesInPartialGroup == 1) {      result[outCursor++]=intToAlpha[(byte0 << 4) & 0x3f];      result[outCursor++]='=';      result[outCursor++]='=';    } else {      int byte1=a[inCursor++] & 0xff;      result[outCursor++]=intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)];      result[outCursor++]=intToAlpha[(byte1 << 2) & 0x3f];      result[outCursor++]='=';    }  }  return result;}  }
class C{  public static void unmapNode(int cloudSimEntityID){  if (networkEnabled) {    try {      map.remove(cloudSimEntityID);    } catch (    Exception e) {      Log.printConcatLine("Error in network unmapping. CloudSim node: ",cloudSimEntityID);    }  }}  }
class C{  public synchronized static void init() throws Exception {  ri.init();}  }
class C{  public DateTime withSecondOfMinute(int second){  return withMillis(getChronology().secondOfMinute().set(getMillis(),second));}  }
class C{  public Enumeration<PMElement> elements(){  return gr.elements();}  }
class C{  public void putInteger(int v){  putInteger(v,IntegerTag);}  }
class C{  private boolean containsAggregate(List<Mutable<ILogicalExpression>> exprRefs){  for (  Mutable<ILogicalExpression> exprRef : exprRefs) {    ILogicalExpression expr=exprRef.getValue();    if (expr.getExpressionTag() != LogicalExpressionTag.FUNCTION_CALL) {      continue;    }    AbstractFunctionCallExpression funcExpr=(AbstractFunctionCallExpression)expr;    FunctionIdentifier funcIdent=AsterixBuiltinFunctions.getAggregateFunction(funcExpr.getFunctionIdentifier());    if (funcIdent == null) {      if (containsAggregate(funcExpr.getArguments())) {        return true;      }    } else {      return true;    }  }  return false;}  }
class C{  @RequestMapping(method=RequestMethod.POST) @ResponseStatus(HttpStatus.CREATED) public HttpEntity<?> add(@RequestBody Course input){  Course course=this.courseService.addCourse(input);  HttpHeaders httpHeaders=new HttpHeaders();  httpHeaders.setLocation(linkTo(methodOn(CourseRestController.class,course.getId()).getCourse(course.getId())).toUri());  return new ResponseEntity<>(httpHeaders,HttpStatus.CREATED);}  }
class C{  @Override public CategoricalTable toDiscrete(){  return this;}  }
class C{  public int splitRandomly(ArrayModifiableDBIDs ind,int begin,int end,DoubleDataStore tpro,Random rand){  final int nele=end - begin;  DBIDArrayIter it=ind.iter();  double rs=tpro.doubleValue(it.seek(begin + rand.nextInt(nele)));  int minInd=begin, maxInd=end - 1;  while (minInd < maxInd) {    double currEle=tpro.doubleValue(it.seek(minInd));    if (currEle > rs) {      while (minInd < maxInd && tpro.doubleValue(it.seek(maxInd)) > rs) {        maxInd--;      }      if (minInd == maxInd) {        break;      }      ind.swap(minInd,maxInd);      maxInd--;    }    minInd++;  }  if (minInd == end - 1) {    minInd=(begin + end) >>> 1;  }  return minInd;}  }
class C{  public static Map<String,String> parseElement(List<Element> elementList){  if (elementList == null) {    throw new NullPointerException("Please navigate to right element tag before parse it");  }  Map<String,String> elmentMap=new HashMap<String,String>();  for (  Element element : elementList) {    String exampleXml=filterExampleXml(element.getChildText(Constants.ELEMENT_EXAMPLE_XML_NODE).trim());    elmentMap.put(element.getAttributeValue(Constants.ATTRIBUTE_NAME).trim(),exampleXml);  }  return elmentMap;}  }
class C{  @Override public long toTimelineValue(long millisecond){  return millisecond;}  }
class C{  public void focusGained(FocusEvent evt){  this.setSelectionStart(0);  this.setSelectionEnd(0);}  }
class C{  private ProgressDialog(){}  }
class C{  private static void reflectionAppend(final EqualsResult result,final Set<Pair<IDKey,IDKey>> REGISTRY,final Object lhs,final Object rhs,final Class<?> clazz,final boolean useTransients,final String[] excludeFields){  if (isRegistered(REGISTRY,lhs,rhs)) {    return;  }  register(REGISTRY,lhs,rhs);  final Field[] fields=clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,true);  for (int i=0; i < fields.length && result.isEqual; i++) {    final Field f=fields[i];    if (x.String(f.getName()).notIn(excludeFields) && !f.getName().contains("$") && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))&& (!f.isAnnotationPresent(EqualsExclude.class))) {      try {        result.append(f.get(lhs),f.get(rhs));      } catch (      final IllegalAccessException e) {        throw new InternalError("Unexpected IllegalAccessException");      }    }  }}  }
class C{  @Override public Cursor swapCursor(Cursor newCursor){  Cursor old=super.swapCursor(newCursor);  resetMappings();  return old;}  }
class C{  public BeanBoxDnDCatcher(DragSource ds,Component c,int act,DragGestureListener dgl){  super(ds,c,act,dgl);  dragSource=getDragSource();  dragGestureListener=new ComponentDragGestureListener(this,this);  setSourceActions(DnDConstants.ACTION_MOVE);  beanInfoMap=new HashMap();}  }
class C{  public static boolean isLocalResourceUri(Uri uri){  final String scheme=getSchemeOrNull(uri);  return LOCAL_RESOURCE_SCHEME.equals(scheme);}  }
class C{  protected void addFeatureNode(KMLAbstractFeature feature){  TreeNode featureNode=KMLFeatureTreeNode.fromKMLFeature(feature);  if (featureNode != null)   this.addChild(featureNode);}  }
class C{  private void testMedian(Random rng){  int n=100 * 1024;  int range=Integer.MAX_VALUE >> 16;  Median m=new Median();  int[] data=new int[n];  for (int i=0; i < data.length; i++) {    int x=Math.max(0,range / 2 + (int)(range / 5 * rng.nextGaussian()));    data[i]=x;    m.insert(x);  }  Arrays.sort(data);  int expected=data[data.length / 2];  double estimation=m.estimation();  double error=Math.abs(expected - estimation) / expected;  errorSum+=error;  maxError=Math.max(maxError,error);  minError=Math.min(minError,error);  Assert.assertTrue("p50=" + estimation + ", real="+ expected+ ", error="+ error,error < 0.02);}  }
class C{  public static void store(ProcessingEnvironment env,AnnotatedTypeFactory atypeFactory,ClassTree tree){  for (  Tree mem : tree.getMembers()) {    if (mem.getKind() == Tree.Kind.METHOD) {      storeMethod(env,atypeFactory,(MethodTree)mem);    }  }}  }
class C{  public void clearQueryHolders(){  xPathQueryHolders.clear();}  }
class C{  public JDirectoryChooser(){  super();  setShowingCreateDirectory(true);}  }
class C{  public static <T>Iterator<T> iterator(Mono<T> pub){  ValueSubscriber<T> sub=ValueSubscriber.subscriber();  pub.subscribe(sub);  return sub.iterator();}  }
class C{  @Override public boolean isValidSecondaryFacing(int dir){  int rotate=dir - getFacing();  if (canChangeSecondaryFacing()) {    if (isQuad()) {      return true;    }    return (rotate == 0) || (rotate == 1) || (rotate == -1)|| (rotate == -5);  }  return rotate == 0;}  }
class C{  public SolrInputDocument newDocument(){  addLiterals();  addMetadata();  addContent();  addCapturedContent();  if (log.isDebugEnabled()) {    log.debug("Doc: {}",document);  }  return document;}  }
class C{  private HttpServletRequest processServiceUrl(HttpServletRequest request,HttpServletResponse response,FilterChain chain,String subKey,String contextPath,AuthorizationRequestData rdo) throws ServletException, IOException {  HttpSession session=request.getSession();  ServiceAccess serviceAccess=ServiceAccess.getServiceAcccessFor(session);  if ("/".equals(contextPath) && !BesServletRequestReader.onlyServiceLogin(session)) {    String mId=(String)session.getAttribute(Constants.REQ_PARAM_MARKETPLACE_ID);    SessionListener.cleanup(session);    session=request.getSession();    session.setAttribute(Constants.REQ_PARAM_MARKETPLACE_ID,mId);  }  Map<String,VOSubscription> map=getSubMapFromSession(session);  VOSubscription sub=map.get(subKey);  VOUserDetails userDetails=(VOUserDetails)session.getAttribute(Constants.SESS_ATTR_USER);  if (BesServletRequestReader.onlyServiceLogin(session)) {    session.removeAttribute(Constants.SESS_ATTR_ONLY_SERVICE_LOGIN);    session.removeAttribute(Constants.SESS_ATTR_USER);    if (userDetails != null) {      session.setAttribute(Constants.REQ_PARAM_LOCALE,userDetails.getLocale());    }  }  if (userDetails != null && userDetails.getStatus() != UserAccountStatus.PASSWORD_MUST_BE_CHANGED) {    if (sub == null) {      sub=getSubscription(serviceAccess,subKey);      if (sub == null) {        UserNotAssignedException e=new UserNotAssignedException(subKey,userDetails.getUserId());        logger.logError(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,e,LogMessageIdentifier.ERROR_ACTIVE_SUBSCRIPTION_FOR_CURRENT_USER_FAILED,subKey);        setErrorAttributesAndForward(getDefaultUrl(serviceAccess,rdo,request),request,response,e);        return null;      } else       if (sub.getStatus() != SubscriptionStatus.ACTIVE && sub.getStatus() != SubscriptionStatus.PENDING_UPD) {        SubscriptionStateException e=new SubscriptionStateException("Subscription '" + subKey + "' not active or pending update.",Reason.ONLY_ACTIVE);        logger.logError(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,e,LogMessageIdentifier.ERROR_SUBSCRIPTION_NOT_ACTIVE,subKey);        setErrorAttributesAndForward(getDefaultUrl(serviceAccess,rdo,request),request,response,e);        return null;      } else       if (!sub.getServiceBaseURL().toLowerCase().startsWith(request.getScheme().toLowerCase() + "://")) {        setErrorAttributesAndForward(errorPage,request,response,new ServiceSchemeException());        return null;      }      String userToken=ADMStringUtils.getRandomString(40);      try {synchronized (map) {          createServiceSession(serviceAccess,subKey,session.getId(),userToken);          map.put(subKey,sub);        }      } catch (      ObjectNotFoundException e) {        handleSubscriptionNotFound(chain,request,response,rdo);        return null;      }catch (      ServiceParameterException e) {        setErrorAttributesAndForward(Constants.SERVICE_USAGE_ERROR_URI,request,response,e);        return null;      }catch (      SaaSApplicationException e) {        setErrorAttributesAndForward(errorPage,request,response,e);        return null;      }      if (sub.getServiceAccessType() == ServiceAccessType.LOGIN) {        String url=removeEndingSlash(sub.getServiceBaseURL());        if (sub.getServiceLoginPath() != null) {          url+=sub.getServiceLoginPath();        }        if (url.contains("?")) {          url+="&";        } else {          url+="?";        }        SsoParameters ssoParameters=new SsoParameters();        ssoParameters.setContextPath(contextPath);        ssoParameters.setInstanceId(sub.getServiceInstanceId());        ssoParameters.setLanguage(userDetails.getLocale());        ssoParameters.setSubscriptionKey(subKey);        ssoParameters.setBssId(request.getSession().getId());        ssoParameters.setUsertoken(userToken);        url+=ssoParameters.getQueryString();        JSFUtils.sendRedirect(response,url);        return null;      }    } else {      if (sub.getServiceAccessType() == ServiceAccessType.LOGIN) {        JSFUtils.sendRedirect(response,sub.getServiceBaseURL());        return null;      }    }  } else {    if (sub == null) {      session.setAttribute(Constants.SESS_ATTR_ONLY_SERVICE_LOGIN,Boolean.TRUE);    } else {      if (sub.getServiceAccessType() == ServiceAccessType.LOGIN) {        JSFUtils.sendRedirect(response,sub.getServiceBaseURL());      } else {        chain.doFilter(request,response);      }      return null;    }  }  return request;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public synchronized void stop(){  if (D)   Log.d(TAG,"stop");  if (mConnectThread != null) {    mConnectThread.cancel();    mConnectThread=null;  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  if (mSecureAcceptThread != null) {    mSecureAcceptThread.cancel();    mSecureAcceptThread=null;  }  if (mInsecureAcceptThread != null) {    mInsecureAcceptThread.cancel();    mInsecureAcceptThread=null;  }  setState(STATE_NONE);  if (bluetoothAdapter != null) {    bluetoothAdapter.disable();  }}  }
class C{  Object processCHAR(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      if ((avt.isSimple()) && (value.length() != 1)) {        handleError(handler,XSLTErrorResources.INVALID_TCHAR,new Object[]{name,value},null);        return null;      }      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    if (value.length() != 1) {      handleError(handler,XSLTErrorResources.INVALID_TCHAR,new Object[]{name,value},null);      return null;    }    return new Character(value.charAt(0));  }}  }
class C{  protected void putInfo(IJavaElement element,Object info){switch (element.getElementType()) {case IJavaElement.JAVA_MODEL:    this.modelInfo=info;  break;case IJavaElement.JAVA_PROJECT:this.projectCache.put(element,info);this.rootCache.ensureSpaceLimit(info,element);break;case IJavaElement.PACKAGE_FRAGMENT_ROOT:this.rootCache.put(element,info);this.pkgCache.ensureSpaceLimit(info,element);break;case IJavaElement.PACKAGE_FRAGMENT:this.pkgCache.put(element,info);this.openableCache.ensureSpaceLimit(info,element);break;case IJavaElement.COMPILATION_UNIT:case IJavaElement.CLASS_FILE:this.openableCache.put(element,info);break;default :this.childrenCache.put(element,info);}}  }
class C{  public void memberCrashed(ClientMembershipEvent event){  Notification notification=new Notification(JMXNotificationType.CLIENT_CRASHED,serverSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.CLIENT_CRASHED_PREFIX + event.getMemberId());  serverLevelNotifEmitter.sendNotification(notification);  memberLevelNotifEmitter.sendNotification(notification);}  }
class C{  public Date rescheduleJob(TriggerKey triggerKey,Trigger newTrigger) throws SchedulerException {  try {    return getRemoteScheduler().rescheduleJob(triggerKey,newTrigger);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  protected void addToBottomBox(Component comp){  bottomBox.add(Box.createHorizontalStrut(bottomStrutWidth),bottomBoxIndex);  ++bottomBoxIndex;  bottomBox.add(comp,bottomBoxIndex);  ++bottomBoxIndex;}  }
class C{  private Bson createQuery(){  Long timestamp=Long.parseLong(start);  Integer order=new Long(timestamp % 10).intValue();  timestamp=timestamp / 10;  Integer finalTimestamp=timestamp.intValue();  Integer finalOrder=order;  Bson query=Filters.and(Filters.exists("fromMigrate",false),Filters.gt("ts",new BSONTimestamp(finalTimestamp,finalOrder)),Filters.or(Filters.eq("op","i"),Filters.eq("op","u"),Filters.eq("op","d")),Filters.eq("ns",db));  return query;}  }
class C{  protected String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public PointerHierarchyRepresentationResult run(Database db,Relation<O> relation){  DistanceQuery<O> dq=db.getDistanceQuery(relation,getDistanceFunction());  ArrayDBIDs ids=DBIDUtil.ensureArray(relation.getDBIDs());  final int size=ids.size();  if (size > 0x10000) {    throw new AbortException("This implementation does not scale to data sets larger than " + 0x10000 + " instances (~16 GB RAM), at which point the Java maximum array size is reached.");  }  if (SingleLinkageMethod.class.isInstance(linkage)) {    LOG.verbose("Notice: SLINK is a much faster algorithm for single-linkage clustering!");  }  double[] scratch=new double[triangleSize(size)];  DBIDArrayIter ix=ids.iter(), iy=ids.iter();  boolean square=WardLinkageMethod.class.isInstance(linkage) && !(SquaredEuclideanDistanceFunction.class.isInstance(getDistanceFunction()));  initializeDistanceMatrix(scratch,dq,ix,iy,square);  PointerHierarchyRepresentationBuilder builder=new PointerHierarchyRepresentationBuilder(ids);  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Agglomerative clustering",size - 1,LOG) : null;  int wsize=size;  for (int i=1; i < size; i++) {    int x=findMerge(wsize,scratch,ix,iy,builder);    if (x == wsize - 1) {      --wsize;      for (ix.seek(wsize - 1); builder.isLinked(ix); ix.retract()) {        --wsize;      }    }    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  return builder.complete();}  }
class C{  @SuppressWarnings("ThrowableResultOfMethodCallIgnored") void handleCacheOperationException(Exception e){  IgniteFuture<?> retryFut=null;  if (e instanceof IllegalStateException) {    initCache();    return;  } else   if (X.hasCause(e,IgniteClientDisconnectedException.class)) {    IgniteClientDisconnectedException cause=X.cause(e,IgniteClientDisconnectedException.class);    assert cause != null : e;    retryFut=cause.reconnectFuture();  } else   if (X.hasCause(e,ClusterTopologyException.class)) {    ClusterTopologyException cause=X.cause(e,ClusterTopologyException.class);    assert cause != null : e;    retryFut=cause.retryReadyFuture();  }  if (retryFut != null) {    try {      retryFut.get(retriesTimeout);    } catch (    IgniteException retryErr) {      throw new IgniteException("Failed to wait for retry: " + retryErr);    }  }}  }
class C{  public OnePuzzle(int x){  s=x;}  }
class C{  public void put(final String string,final int tokenType){  if (isIgnoringCase())   put(string.toLowerCase().toCharArray(),tokenType); else   put(string.toCharArray(),tokenType);}  }
class C{  public Automaton<LR1Item,LR1State> createAutomaton() throws GeneratorException {  return new LR1AutomatonFactory().createAutomaton(this,grammarInfo);}  }
class C{  protected static int hashboth(int i1,int i2){  return (i1 + i2);}  }
class C{  public static void navigateTo(@NonNull Context context,@NonNull Class<? extends Activity> targetActivity,@NonNull Intent intent){  context.startActivity(intent);}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public void traverseSupertypes(ClassDescriptor start,InheritanceGraphVisitor visitor) throws ClassNotFoundException {  LinkedList<SupertypeTraversalPath> workList=new LinkedList<SupertypeTraversalPath>();  ClassVertex startVertex=resolveClassVertex(start);  workList.addLast(new SupertypeTraversalPath(startVertex));  while (!workList.isEmpty()) {    SupertypeTraversalPath cur=workList.removeFirst();    ClassVertex vertex=cur.getNext();    assert !cur.hasBeenSeen(vertex.getClassDescriptor());    cur.markSeen(vertex.getClassDescriptor());    if (!visitor.visitClass(vertex.getClassDescriptor(),vertex.getXClass())) {      continue;    }    if (!vertex.isResolved()) {      continue;    }    ClassDescriptor superclassDescriptor=vertex.getXClass().getSuperclassDescriptor();    if (superclassDescriptor != null && traverseEdge(vertex,superclassDescriptor,false,visitor)) {      addToWorkList(workList,cur,superclassDescriptor);    }    for (    ClassDescriptor ifaceDesc : vertex.getXClass().getInterfaceDescriptorList()) {      if (traverseEdge(vertex,ifaceDesc,true,visitor)) {        addToWorkList(workList,cur,ifaceDesc);      }    }  }}  }
class C{  public void prepareChain(int chain[]){  m_Chain=Arrays.copyOf(chain,chain.length);  if (getDebug())   System.out.println("Chain s=" + Arrays.toString(m_Chain));}  }
class C{  public boolean hasYomi(){  return getYomi() != null;}  }
class C{  private void defineDefaultFont(UIDefaults d){  d.put("defaultFont",initializeDefaultFont());}  }
class C{  @POST @Path("service/restart") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response restartService(@QueryParam("node_id") String nodeId,@QueryParam("name") String name,@QueryParam("node_name") String nodeName){  nodeId=determineNodeId(nodeId,nodeName);  List<String> controlNodeServiceNames=ServicesMetadata.getControlNodeServiceNames();  if (_coordinator.getMyNodeId().equals(nodeId)) {    if (!controlNodeServiceNames.contains(name)) {      throw APIException.badRequests.parameterIsNotOneOfAllowedValues("service name",controlNodeServiceNames.toString());    }    auditControl(OperationTypeEnum.RESTART_SERVICE,AuditLogManager.AUDITLOG_SUCCESS,null,name,nodeId);    return restartNodeService(name);  } else {    URI endpoint=_coordinator.getNodeEndpoint(nodeId);    if (endpoint == null) {      throw APIException.badRequests.parameterIsNotValid("node id");    }    boolean isControlNode=CONTROL_NODE_ID_PATTERN.matcher(nodeId).matches();    List<String> availableServices=isControlNode ? controlNodeServiceNames : ServicesMetadata.getExtraNodeServiceNames();    if (!availableServices.contains(name)) {      throw APIException.badRequests.parameterIsNotOneOfAllowedValues("service name",availableServices.toString());    }    try {      SysClientFactory.getSysClient(endpoint).post(URI.create(SysClientFactory.URI_RESTART_SERVICE.getPath() + "?name=" + name),null,null);    } catch (    SysClientException e) {      throw APIException.internalServerErrors.serviceRestartError(name,nodeId);    }    auditControl(OperationTypeEnum.RESTART_SERVICE,AuditLogManager.AUDITLOG_SUCCESS,null,name,nodeId);    return Response.status(Response.Status.ACCEPTED).build();  }}  }
class C{  public boolean match(VariableDeclarationFragment node,Object other){  if (!(other instanceof VariableDeclarationFragment)) {    return false;  }  VariableDeclarationFragment o=(VariableDeclarationFragment)other;  return safeSubtreeMatch(node.getName(),o.getName()) && node.getExtraDimensions() == o.getExtraDimensions() && safeSubtreeMatch(node.getInitializer(),o.getInitializer());}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  requestIds=new HashMap<String,String>();  blueSwatch=(Button)findViewById(R.id.blueswatch);  purpleSwatch=(Button)findViewById(R.id.purpleswatch);  greenSwatch=(Button)findViewById(R.id.greenswatch);  clicksLeft=(TextView)findViewById(R.id.numClicks);  centerButton=(Button)findViewById(R.id.button);}  }
class C{  public String toQuestString(){  return lifecycleState.toQuestString() + ";" + level+ ";"+ date+ ";"+ points;}  }
class C{  private void clearAllSnapshots(){  this.snapshots.clear();  while (this.mnuSnapshot.getItemCount() > 3) {    this.mnuSnapshot.remove(3);  }}  }
class C{  public static EventTable buildIndex(AgentInstanceContext agentInstanceContext,int indexedStreamNum,QueryPlanIndexItem item,EventType eventType,boolean coerceOnAddOnly,boolean unique,String optionalIndexName,Object optionalSerde,boolean isFireAndForget){  String[] indexProps=item.getIndexProps();  Class[] indexCoercionTypes=normalize(item.getOptIndexCoercionTypes());  String[] rangeProps=item.getRangeProps();  Class[] rangeCoercionTypes=normalize(item.getOptRangeCoercionTypes());  EventTableFactoryTableIdentAgentInstance ident=new EventTableFactoryTableIdentAgentInstance(agentInstanceContext);  EventTableIndexService eventTableIndexService=agentInstanceContext.getStatementContext().getEventTableIndexService();  EventTable table;  if (rangeProps == null || rangeProps.length == 0) {    if (indexProps == null || indexProps.length == 0) {      EventTableFactory factory=eventTableIndexService.createUnindexed(indexedStreamNum,optionalSerde,isFireAndForget);      table=factory.makeEventTables(ident)[0];    } else {      if (indexProps.length == 1) {        if (indexCoercionTypes == null || indexCoercionTypes.length == 0) {          EventTableFactory factory=eventTableIndexService.createSingle(indexedStreamNum,eventType,indexProps[0],unique,optionalIndexName,optionalSerde,isFireAndForget);          table=factory.makeEventTables(ident)[0];        } else {          if (coerceOnAddOnly) {            EventTableFactory factory=eventTableIndexService.createSingleCoerceAdd(indexedStreamNum,eventType,indexProps[0],indexCoercionTypes[0],optionalSerde,isFireAndForget);            table=factory.makeEventTables(ident)[0];          } else {            EventTableFactory factory=eventTableIndexService.createSingleCoerceAll(indexedStreamNum,eventType,indexProps[0],indexCoercionTypes[0],optionalSerde,isFireAndForget);            table=factory.makeEventTables(ident)[0];          }        }      } else {        if (indexCoercionTypes == null || indexCoercionTypes.length == 0) {          EventTableFactory factory=eventTableIndexService.createMultiKey(indexedStreamNum,eventType,indexProps,unique,optionalIndexName,optionalSerde,isFireAndForget);          table=factory.makeEventTables(ident)[0];        } else {          if (coerceOnAddOnly) {            EventTableFactory factory=eventTableIndexService.createMultiKeyCoerceAdd(indexedStreamNum,eventType,indexProps,indexCoercionTypes,isFireAndForget);            table=factory.makeEventTables(ident)[0];          } else {            EventTableFactory factory=eventTableIndexService.createMultiKeyCoerceAll(indexedStreamNum,eventType,indexProps,indexCoercionTypes,isFireAndForget);            table=factory.makeEventTables(ident)[0];          }        }      }    }  } else {    if ((rangeProps.length == 1) && (indexProps == null || indexProps.length == 0)) {      if (rangeCoercionTypes == null) {        EventTableFactory factory=eventTableIndexService.createSorted(indexedStreamNum,eventType,rangeProps[0],isFireAndForget);        return factory.makeEventTables(ident)[0];      } else {        EventTableFactory factory=eventTableIndexService.createSortedCoerce(indexedStreamNum,eventType,rangeProps[0],rangeCoercionTypes[0],isFireAndForget);        return factory.makeEventTables(ident)[0];      }    } else {      EventTableFactory factory=eventTableIndexService.createComposite(indexedStreamNum,eventType,indexProps,indexCoercionTypes,rangeProps,rangeCoercionTypes,isFireAndForget);      return factory.makeEventTables(ident)[0];    }  }  return table;}  }
class C{  public X509Name(Vector oids,Vector values){  this(oids,values,new X509DefaultEntryConverter());}  }
class C{  public int size(){  return m_actions.size();}  }
class C{  public Transformer newTransformer(Source source) throws TransformerConfigurationException {  try {    Templates tmpl=newTemplates(source);    if (tmpl == null)     return null;    Transformer transformer=tmpl.newTransformer();    transformer.setURIResolver(m_uriResolver);    return transformer;  } catch (  TransformerConfigurationException ex) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(ex);        return null;      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    }    throw ex;  }}  }
class C{  private <T>MethodSet findOrCreateMethodSet(HashMapRVM<T,MethodSet> hash,T key){  MethodSet result=hash.get(key);  if (result == null) {    result=new MethodSet(key);    hash.put(key,result);  }  return result;}  }
class C{  public int deleteByPrimaryKey(Integer id) throws SQLException {  User key=new User();  key.setId(id);  int rows=sqlMapClient.delete("t_user.ibatorgenerated_deleteByPrimaryKey",key);  return rows;}  }
class C{  private Instances voteDataset(Instances dataset) throws Exception {  for (int i=0; i < dataset.numInstances(); i++) {    Instance inst=dataset.firstInstance();    inst=votedReclassifyExample(inst);    dataset.add(inst);    dataset.delete(0);  }  return dataset;}  }
class C{  protected void drawBarBackground(Canvas canvas,float left,float top,float right,float bottom){  canvas.drawRoundRect(new RectF(left,top,right,bottom),style.cornerRadius,style.cornerRadius,style.barBackgroundPaint);}  }
class C{  public Metadata(MetadataType metadataType,String value,Alias alias,boolean temporal){  mMetadataType=metadataType;  mValue=value;  mValueAlias=alias;  mTemporal=temporal;}  }
class C{  private void internalIteration(){  movies.parallelStream().filter(null).map(null).limit(2).forEach(null);}  }
class C{  private void scanSlotContent(){  if ((parent == null) || (slotName == null)) {    return;  }  for (  ItemPanel panel : panels) {    panel.setEntity(null);  }  final RPSlot rpslot=parent.getSlot(slotName);  contentAdded(rpslot);}  }
class C{  public boolean expired(long expire){  long mod=time.getTime();  long now=System.currentTimeMillis();  long diff=now - mod;  if (diff > expire && getSource() != NETWORK) {    return true;  }  return false;}  }
class C{  public final float readFloat() throws IOException {  return Float.intBitsToFloat(readInt());}  }
class C{  public static int generateBackgroundColor(BookmarkItem item){  int normalizedIndex=MathUtils.positiveModulo(item.getUrl().hashCode(),DEFAULT_BACKGROUND_COLORS.length);  return DEFAULT_BACKGROUND_COLORS[normalizedIndex];}  }
class C{  public Cache(){  this(28,9);}  }
class C{  public static void main(String[] args){  try {    if (args == null || args.length != 2) {      System.err.println("Bad number of arguments: usage is: \n\t" + USAGE);      System.exit(1);    }    try {      InetAddress.getByName(args[0]);    } catch (    UnknownHostException x) {      System.err.println("No such host: " + args[0] + "\n usage is: \n\t"+ USAGE);      System.exit(2);    }catch (    Exception x) {      System.err.println("Bad address: " + args[0] + "\n usage is: \n\t"+ USAGE);      System.exit(2);    }    try {      if (Integer.parseInt(args[1]) <= 0) {        System.err.println("Bad port value: " + args[1] + "\n usage is: \n\t"+ USAGE);        System.exit(2);      }    } catch (    Exception x) {      System.err.println("Bad argument: " + args[1] + "\n usage is: \n\t"+ USAGE);      System.exit(2);    }    System.out.println("\nInitialize the environment map");    final Map<String,Object> env=new HashMap<String,Object>();    final String[] credentials=new String[]{"guest","guestpasswd"};    env.put("jmx.remote.credentials",credentials);    env.put("com.sun.jndi.rmi.factory.socket",new SslRMIClientSocketFactory());    System.out.println("\nCreate the RMI connector client and " + "connect it to the RMI connector server");    final JMXServiceURL url=new JMXServiceURL("service:jmx:rmi:///jndi/rmi://" + args[0] + ":"+ args[1]+ "/jmxrmi");    System.out.println("Connecting to: " + url);    final JMXConnector jmxc=JMXConnectorFactory.connect(url,env);    System.out.println("\nGet the MBeanServerConnection");    final MBeanServerConnection mbsc=jmxc.getMBeanServerConnection();    final ScanManagerMXBean proxy=ScanManager.newSingletonProxy(mbsc);    System.out.println("\nGet ScanDirConfigMXBean from ScanManagerMXBean");    final ScanDirConfigMXBean configMBean=proxy.getConfigurationMBean();    System.out.println("\nGet 'Configuration' attribute on ScanDirConfigMXBean");    System.out.println("\nConfiguration:\n" + configMBean.getConfiguration());    System.out.println("\nInvoke 'close' on ScanManagerMXBean");    try {      proxy.close();    } catch (    SecurityException e) {      System.out.println("\nGot expected security exception: " + e);    }    System.out.println("\nClose the connection to the server");    jmxc.close();    System.out.println("\nBye! Bye!");  } catch (  Exception e) {    System.out.println("\nGot unexpected exception: " + e);    e.printStackTrace();    System.exit(3);  }}  }
class C{  public WHERE WHERE(String condition){  return new WHERE(this,condition);}  }
class C{  @SuppressWarnings("unchecked") protected Ignite startGridWithIgfs(String gridName,String igfsName,IgfsMode mode,@Nullable IgfsSecondaryFileSystem secondaryFs,@Nullable IgfsIpcEndpointConfiguration restCfg,TcpDiscoveryIpFinder ipFinder) throws Exception {  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("dataCache");  igfsCfg.setMetaCacheName("metaCache");  igfsCfg.setName(igfsName);  igfsCfg.setBlockSize(IGFS_BLOCK_SIZE);  igfsCfg.setDefaultMode(mode);  igfsCfg.setIpcEndpointConfiguration(restCfg);  igfsCfg.setSecondaryFileSystem(secondaryFs);  igfsCfg.setPrefetchBlocks(PREFETCH_BLOCKS);  igfsCfg.setSequentialReadsBeforePrefetch(SEQ_READS_BEFORE_PREFETCH);  igfsCfg.setRelaxedConsistency(relaxedConsistency());  igfsCfg.setFragmentizerEnabled(fragmentizerEnabled());  igfsCfg.setInitializeDefaultPathModes(initializeDefaultPathModes());  CacheConfiguration dataCacheCfg=defaultCacheConfiguration();  dataCacheCfg.setName("dataCache");  dataCacheCfg.setNearConfiguration(null);  dataCacheCfg.setCacheMode(PARTITIONED);  dataCacheCfg.setNearConfiguration(null);  dataCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  dataCacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(2));  dataCacheCfg.setBackups(0);  dataCacheCfg.setAtomicityMode(TRANSACTIONAL);  dataCacheCfg.setMemoryMode(memoryMode);  dataCacheCfg.setOffHeapMaxMemory(0);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("metaCache");  metaCacheCfg.setNearConfiguration(null);  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  if (useOptimizedMarshaller())   cfg.setMarshaller(new OptimizedMarshaller());  cfg.setGridName(gridName);  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(ipFinder);  prepareCacheConfigurations(dataCacheCfg,metaCacheCfg);  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(dataCacheCfg,metaCacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  cfg.setConnectorConfiguration(null);  return G.start(cfg);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public StreamResult(OutputStream outputStream){  setOutputStream(outputStream);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:28.241 -0400",hash_original_method="2EF87AD3412C8E9EB3D4F13BE6685C5B",hash_generated_method="FDD416E4802C9DADCD6D4A621EAD160E") private void register(Map<String,Class<? extends SaslClientFactory>> providerMap){  for (  Map.Entry<String,Class<? extends SaslClientFactory>> me : providerMap.entrySet()) {    put("SaslClientFactory." + me.getKey(),me.getValue().getName());  }}  }
class C{  protected void addProject(ProjectConfig project) throws ServerException {  final String href=UriBuilder.fromUri(apiEndpoint).path(WorkspaceService.class).path(WorkspaceService.class,"addProject").build(workspaceId).toString();  try {    httpJsonRequestFactory.fromUrl(href).usePostMethod().setBody(asDto(project)).request();  } catch (  IOException|ApiException e) {    throw new ServerException(e.getMessage());  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  boolean outputResidualImage=false;  double yEstimate;  double residual;  boolean standardizeResiduals=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  if (!args[2].toLowerCase().equals("not specified")) {    outputHeader=args[2];    outputResidualImage=true;    standardizeResiduals=Boolean.parseBoolean(args[3]);  }  if (inputHeader1 == null || inputHeader2 == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double x, y;    float progress=0;    WhiteboxRaster image1=new WhiteboxRaster(inputHeader1,"r");    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    WhiteboxRaster image2=new WhiteboxRaster(inputHeader2,"r");    if (rows != image2.getNumberRows() || cols != image2.getNumberColumns()) {      showFeedback("The input images must have the same dimensions (rows and columns).");      return;    }    double noData2=image2.getNoDataValue();    double sumX=0, sumY=0, sumXY=0, sumXX=0, sumYY=0;    long N=0;    double[] data1, data2;    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        x=data1[col];        y=data2[col];        if (x != noData1 && y != noData2) {          sumX+=x;          sumY+=y;          sumXY+=x * y;          sumXX+=x * x;          sumYY+=y * y;          N++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    double slope=(N * sumXY - (sumX * sumY)) / (N * sumXX - (sumX * sumX));    double intercept=(sumY - slope * sumX) / N;    double r=(N * sumXY - (sumX * sumY)) / ((Math.sqrt(N * sumXX - (sumX * sumX)) * (Math.sqrt(N * sumYY - (sumY * sumY)))));    double rSqr=r * r;    double yMean=sumY / N;    double xMean=sumX / N;    double SSreg=0;    double SStotal=0;    double SSerror=0;    int dfReg=1;    int dfError=(int)(N - 2);    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        x=data1[col];        y=data2[col];        if (x != noData1 && y != noData2) {          yEstimate=slope * x + intercept;          SSerror+=(y - yEstimate) * (y - yEstimate);          SStotal+=(y - yMean) * (y - yMean);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    SSreg=SStotal - SSerror;    double MSreg=SSreg / dfReg;    double MSerror=SSerror / dfError;    double Fstat=MSreg / MSerror;    double SEofEstimate=Math.sqrt(MSerror);    FDistribution f=new FDistribution(1,dfError);    double pValue=1.0 - f.cumulativeProbability(Fstat);    double msse=(Math.max(0d,sumYY - sumXY * sumXY / sumXX)) / (N - 2);    double interceptSE=Math.sqrt(msse * ((1d / N) + (xMean * xMean) / sumXX));    double interceptT=intercept / interceptSE;    TDistribution distribution=new TDistribution(N - 2);    double interceptPValue=2d * (1.0 - distribution.cumulativeProbability(Math.abs(intercept) / interceptSE));    double slopeSE=Math.sqrt(msse / sumXX);    double slopeT=slope / slopeSE;    double slopePValue=2d * (1.0 - distribution.cumulativeProbability(Math.abs(slope) / slopeSE));    if (outputResidualImage) {      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      output.setPreferredPalette("blue_white_red.pal");      if (standardizeResiduals) {        for (row=0; row < rows; row++) {          data1=image1.getRowValues(row);          data2=image2.getRowValues(row);          for (col=0; col < cols; col++) {            x=data1[col];            y=data2[col];            yEstimate=slope * x + intercept;            residual=(y - yEstimate) / SEofEstimate;            output.setValue(row,col,residual);          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }      } else {        for (row=0; row < rows; row++) {          data1=image1.getRowValues(row);          data2=image2.getRowValues(row);          for (col=0; col < cols; col++) {            x=data1[col];            y=data2[col];            yEstimate=slope * x + intercept;            residual=y - yEstimate;            output.setValue(row,col,residual);          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }      }      output.close();    }    DecimalFormat df=new DecimalFormat("###,###,###,##0.000");    DecimalFormat df2=new DecimalFormat("###,###,###,###");    String retstr=null;    retstr="IMAGE REGRESSION REPORT\n\n";    retstr+="Input Image 1 (X):\t\t" + image1.getShortHeaderFile() + "\n";    retstr+="Input Image 2 (Y):\t\t" + image2.getShortHeaderFile() + "\n\n";    retstr+="Model Summary:\n";    retstr+="R\tR Square\tStd. Error of the Estimate\n";    retstr+=df.format(r) + "\t" + df.format(rSqr)+ "\t"+ df.format(SEofEstimate)+ "\n\n";    String ANOVA="\nAnalysis of Variance (ANOVA):\n";    ANOVA+="Source\tSS\tdf\tMS\tF\tP\n";    ANOVA+="Regression\t" + df.format(SSreg) + "\t"+ df2.format(dfReg)+ "\t"+ df.format(MSreg)+ "\t"+ df.format(Fstat)+ "\t"+ df.format(pValue)+ "\n";    ANOVA+="Residual\t" + df.format(SSerror) + "\t"+ df2.format(dfError)+ "\t"+ df.format(MSerror)+ "\n";    ANOVA+="Total\t" + df.format(SStotal) + "\n\n";    retstr+=ANOVA;    String coefficents="Coefficients:\n";    coefficents+="Variable\tB\tStd. Error\tt\tSig.\n";    coefficents+="Constant\t" + df.format(intercept) + "\t"+ df.format(interceptSE)+ "\t"+ df.format(interceptT)+ "\t"+ df.format(interceptPValue)+ "\n";    coefficents+="Slope\t" + df.format(slope) + "\t"+ df.format(slopeSE)+ "\t"+ df.format(slopeT)+ "\t"+ df.format(slopePValue)+ "\n\n";    retstr+=coefficents;    if (intercept >= 0) {      retstr+="Regression Equation:\t\t" + image2.getShortHeaderFile() + " = "+ df.format(slope)+ " \u00D7 "+ image2.getShortHeaderFile()+ " + "+ df.format(intercept)+ "\n";    } else {      retstr+="Regression Equation:\t\t" + image2.getShortHeaderFile() + " = "+ df.format(slope)+ " \u00D7 "+ image2.getShortHeaderFile()+ " - "+ df.format(-intercept)+ "\n";    }    returnData(retstr);    if (outputResidualImage) {      returnData(outputHeader);    }    image1.close();    image2.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static IncludedFieldsParams findIncludedFields(TypedParams<IncludedFieldsParams> includedFields,String elementName){  IncludedFieldsParams includedFieldsParams=null;  if (includedFields != null) {    for (    Map.Entry<String,IncludedFieldsParams> entry : includedFields.getParams().entrySet()) {      if (elementName.equals(entry.getKey())) {        includedFieldsParams=entry.getValue();      }    }  }  return includedFieldsParams;}  }
class C{  public boolean contains(AccessibleState state){  if (states == null) {    return false;  } else {    return states.contains(state);  }}  }
class C{  private static void asXmlStringRecursive(Node node,StringBuilder stringBuilder){  final int nodeType=node.getNodeType();switch (nodeType) {case Node.ELEMENT_NODE:{      stringBuilder.append("<");      stringBuilder.append(node.getNodeName());      stringBuilder.append(">");      final NodeList childNodes=node.getChildNodes();      for (int i=0, count=childNodes.getLength(); i < count; i++) {        Node childNode=childNodes.item(i);        asXmlStringRecursive(childNode,stringBuilder);      }      stringBuilder.append("</");      stringBuilder.append(node.getNodeName());      stringBuilder.append(">");      break;    }case Node.TEXT_NODE:{    final Text text=(Text)node;    stringBuilder.append(text.getData());    break;  }}}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_artists_albums);  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);}  }
class C{  public AsyncHttpClient(AsyncRequestExecutorFactory factory){  this(factory,"");}  }
class C{  public void testVirtualDestinationsDinamicallyIncludedBehavior3() throws Exception {  final String topic="global.test";  final String vq="Consumer.foo." + topic;  startAllBrokers();  final int msgs1=1001;  final int msgs2=1456;  Destination tDest=createDestination(topic,true);  Destination vqDest=createDestination(vq,false);  MessageConsumer clientB1t=createConsumer("BrokerA",tDest);  MessageConsumer clientB2t=createConsumer("BrokerB",tDest);  MessageConsumer clientB1vq=createConsumer("BrokerA",vqDest);  Thread.sleep(2 * 1000);  sendMessages("BrokerA",tDest,msgs1);  sendMessages("BrokerB",tDest,msgs2);  Thread.sleep(5000);  MessageIdList msgsB1t=getConsumerMessages("BrokerA",clientB1t);  msgsB1t.waitForMessagesToArrive(msgs1 + msgs2);  assertEquals(msgs1 + msgs2,msgsB1t.getMessageCount());  MessageIdList msgsB2t=getConsumerMessages("BrokerB",clientB2t);  msgsB2t.waitForMessagesToArrive(msgs1 + msgs2);  assertEquals(msgs1 + msgs2,msgsB2t.getMessageCount());  MessageIdList msgsB1vq=getConsumerMessages("BrokerA",clientB1vq);  msgsB1vq.waitForMessagesToArrive(msgs1 + msgs2);  assertEquals(msgs1 + msgs2,msgsB1vq.getMessageCount());  assertEquals(0,getQueueSize("BrokerA",(ActiveMQDestination)vqDest));  assertEquals(0,getQueueSize("BrokerB",(ActiveMQDestination)vqDest));  destroyAllBrokers();}  }
class C{  public static String SelectAttributes(ASEvaluation ASEvaluator,String[] options) throws Exception {  String trainFileName, searchName;  Instances train=null;  ASSearch searchMethod=null;  String[] optionsTmp=options.clone();  boolean helpRequested=false;  try {    trainFileName=Utils.getOption('i',options);    helpRequested=Utils.getFlag('h',optionsTmp);    if (helpRequested || (trainFileName.length() == 0)) {      searchName=Utils.getOption('s',optionsTmp);      if (searchName.length() != 0) {        String[] searchOptions=Utils.splitOptions(searchName);        searchMethod=(ASSearch)Class.forName(searchOptions[0]).newInstance();      }      if (helpRequested) {        throw new Exception("Help requested.");      } else {        throw new Exception("No training file given.");      }    }  } catch (  Exception e) {    throw new Exception('\n' + e.getMessage() + makeOptionString(ASEvaluator,searchMethod));  }  DataSource source=new DataSource(trainFileName);  train=source.getDataSet();  return SelectAttributes(ASEvaluator,options,train);}  }
class C{  public Quaterniond add(Quaterniondc q2){  x+=q2.x();  y+=q2.y();  z+=q2.z();  w+=q2.w();  return this;}  }
class C{  public void appendChar(int x){  elems=ArrayUtils.ensureCapacity(elems,length + 1);  elems[length]=(byte)((x >> 8) & 0xFF);  elems[length + 1]=(byte)((x) & 0xFF);  length=length + 2;}  }
class C{  public static String toString(Properties properties) throws IOException {  StringWriter writer=new StringWriter();  properties.store(writer,null);  StringBuffer stringBuffer=writer.getBuffer();  filterPropertiesComment(stringBuffer);  return stringBuffer.toString();}  }
class C{  public void revert(final VirtualFile root,final List<FilePath> files) throws VcsException {  for (  List<String> paths : VcsFileUtil.chunkPaths(root,files)) {    GitSimpleHandler handler=new GitSimpleHandler(myProject,root,GitCommand.CHECKOUT);    handler.addParameters("HEAD");    handler.endOptions();    handler.addParameters(paths);    handler.run();  }}  }
class C{  public AmazonSQSExtendedClient(AmazonSQS sqsClient){  this(sqsClient,new ExtendedClientConfiguration());}  }
class C{  void addFieldToClassMembers(Node classMembers,Node field){  for (  Node n : classMembers.children()) {    if (n.isMemberFunctionDef()) {      classMembers.addChildBefore(field,n);      return;    }  }  classMembers.addChildToBack(field);}  }
class C{  public void addShareService(ShareService share){  shareServices.addElement(share);}  }
class C{  protected List<BindingSet> makeList(List<BindingSet> key){  return new ArrayList<BindingSet>(key);}  }
class C{  private ListenableFuture<String> extractTable(DestinationTable sourceTable,String destinationUri,DestinationFormat destinationFormat,boolean printHeader){  checkArgument(sourceTable.type == TableType.TABLE);  Job job=new Job().setConfiguration(new JobConfiguration().setExtract(new JobConfigurationExtract().setSourceTable(sourceTable.getTableReference()).setDestinationFormat(destinationFormat.toString()).setDestinationUris(ImmutableList.of(destinationUri)).setPrintHeader(printHeader)));  return runJobToCompletion(job,destinationUri);}  }
class C{  public void add(RadioButton rb){  if (rb == null)   return;  if (!buttons.contains(rb)) {    buttons.addElement(rb);    if (rb.isSelected()) {      setSelected(buttons.indexOf(rb));    }    rb.setButtonGroup(this);  }}  }
class C{  public LensHandle(){  this(null);}  }
class C{  @Override public PaymentRequest createPaymentRequest(final ServiceDetails paymentServiceDetails,final ReceiptHeader receiptHeader){  final DefaultPaymentRequest paymentRequest=new DefaultPaymentRequest();  LOGGER.debug("inside createPaymentRequest");  final Map<String,String> fields=new HashMap<String,String>(0);  fields.put(CollectionConstants.AXIS_VERSION,collectionApplicationProperties.axisVersion().toString());  fields.put(CollectionConstants.AXIS_COMMAND,collectionApplicationProperties.axisCommand());  fields.put(CollectionConstants.AXIS_ACCESS_CODE,collectionApplicationProperties.axisAccessCode());  fields.put(CollectionConstants.AXIS_MERCHANT_TXN_REF,ApplicationThreadLocals.getCityCode() + CollectionConstants.SEPARATOR_HYPHEN + receiptHeader.getId().toString());  fields.put(CollectionConstants.AXIS_MERCHANT,collectionApplicationProperties.axisMerchant());  fields.put(CollectionConstants.AXIS_LOCALE,collectionApplicationProperties.axisLocale());  fields.put(CollectionConstants.AXIS_TICKET_NO,receiptHeader.getConsumerCode());  fields.put(CollectionConstants.AXIS_ORDER_INFO,ApplicationThreadLocals.getCityCode() + CollectionConstants.SEPARATOR_HYPHEN + ApplicationThreadLocals.getCityName());  final StringBuilder returnUrl=new StringBuilder();  returnUrl.append(paymentServiceDetails.getCallBackurl()).append("?paymentServiceId=").append(paymentServiceDetails.getId());  fields.put(CollectionConstants.AXIS_RETURN_URL,returnUrl.toString());  final BigDecimal amount=receiptHeader.getTotalAmount();  final float rupees=Float.parseFloat(amount.toString());  final Integer rupee=(int)rupees;  final Float exponent=rupees - (float)rupee;  final Integer paise=(int)(rupee * PAISE_RUPEE_CONVERTER.intValue() + exponent * PAISE_RUPEE_CONVERTER.intValue());  fields.put(CollectionConstants.AXIS_AMOUNT,paise.toString());  final String axisSecureSecret=collectionApplicationProperties.axisSecureSecret();  if (axisSecureSecret != null) {    final String secureHash=hashAllFields(fields);    fields.put(CollectionConstants.AXIS_SECURE_HASH,secureHash);  }  final StringBuffer buf=new StringBuffer();  buf.append(paymentServiceDetails.getServiceUrl()).append('?');  appendQueryFields(buf,fields);  paymentRequest.setParameter(CollectionConstants.ONLINEPAYMENT_INVOKE_URL,buf);  LOGGER.info("paymentRequest: " + paymentRequest.getRequestParameters());  return paymentRequest;}  }
class C{  public BlockSwapper(World world,BlockPos coords,IBlockState state){  this.world=world;  this.stateToSet=state;  this.rand=new Random(coords.hashCode());  this.startCoords=coords;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public void execute(ParameterScriptContext context){  try {    Interpreter interpeter=new Interpreter();    interpeter.set("context",context);    interpeter.eval(script);  } catch (  Throwable t) {    Raptor.getInstance().onError("Error executing script " + name,t);  }}  }
class C{  public boolean isMineOrWatched(TransactionBag transactionBag){  return isMine(transactionBag) || isWatched(transactionBag);}  }
class C{  public T caseTraceDirective_(TraceDirective_ object){  return null;}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  protected static OuterInnerDirectionalGraph graphOuterJoins(int numStreams,OuterJoinDesc[] outerJoinDescList){  if ((outerJoinDescList.length + 1) != numStreams) {    throw new IllegalArgumentException("Number of outer join descriptors and number of streams not matching up");  }  OuterInnerDirectionalGraph graph=new OuterInnerDirectionalGraph(numStreams);  for (int i=0; i < outerJoinDescList.length; i++) {    OuterJoinDesc desc=outerJoinDescList[i];    int streamMax=i + 1;    int streamOne;    int streamTwo;    int lowerStream;    int higherStream;    if (desc.getOptLeftNode() != null) {      streamOne=desc.getOptLeftNode().getStreamId();      streamTwo=desc.getOptRightNode().getStreamId();      if ((streamOne > streamMax) || (streamTwo > streamMax) || (streamOne == streamTwo)) {        throw new IllegalArgumentException("Outer join descriptors reference future streams, or same streams");      }      lowerStream=streamOne;      higherStream=streamTwo;      if (streamOne > streamTwo) {        lowerStream=streamTwo;        higherStream=streamOne;      }    } else {      streamOne=i;      streamTwo=i + 1;      lowerStream=i;      higherStream=i + 1;      graph.addUnqualifiedNavigable(streamOne,streamTwo);    }    if (desc.getOuterJoinType() == OuterJoinType.FULL) {      graph.add(streamOne,streamTwo);      graph.add(streamTwo,streamOne);    } else     if (desc.getOuterJoinType() == OuterJoinType.LEFT) {      graph.add(lowerStream,higherStream);    } else     if (desc.getOuterJoinType() == OuterJoinType.RIGHT) {      graph.add(higherStream,lowerStream);    } else     if (desc.getOuterJoinType() == OuterJoinType.INNER) {    } else {      throw new IllegalArgumentException("Outer join descriptors join type not handled, type=" + desc.getOuterJoinType());    }  }  return graph;}  }
class C{  public Set<Assignment> linearise(){  if (range.size() == 1) {    String var=range.keySet().iterator().next();    return range.get(var).stream().map(null).collect(Collectors.toSet());  }  return InferenceUtils.getAllCombinations(range);}  }
class C{  public SieveMailboxMailet(){}  }
class C{  protected void crossover(Program program1,Program program2,Rules rules){  Node node=null;  Node replacement=null;  if (PRNG.nextDouble() <= rules.getFunctionCrossoverProbability()) {    int size=program1.getArgument(0).getNumberOfFunctions();    if (size == 0) {      return;    }    node=program1.getArgument(0).getFunctionAt(PRNG.nextInt(size));  } else {    int size=program1.getArgument(0).getNumberOfTerminals();    if (size == 0) {      return;    }    node=program1.getArgument(0).getTerminalAt(PRNG.nextInt(size));  }  if (PRNG.nextDouble() <= rules.getFunctionCrossoverProbability()) {    int size=program2.getArgument(0).getNumberOfFunctions(node.getReturnType());    if (size == 0) {      return;    }    replacement=program2.getArgument(0).getFunctionAt(node.getReturnType(),PRNG.nextInt(size));  } else {    int size=program2.getArgument(0).getNumberOfTerminals(node.getReturnType());    if (size == 0) {      return;    }    replacement=program2.getArgument(0).getTerminalAt(node.getReturnType(),PRNG.nextInt(size));  }  if (node.isFixed() || replacement.isFixed()) {    return;  }  if (node.getDepth() + replacement.getMaximumHeight() > rules.getMaxVariationDepth()) {    return;  }  Node parent=node.getParent();  for (int i=0; i < parent.getNumberOfArguments(); i++) {    if (parent.getArgument(i) == node) {      parent.setArgument(i,replacement);      break;    }  }}  }
class C{  public static <T>T byte2Obj(byte[] bytes,Class<T> clazz){  if (bytes == null || clazz == null) {    return null;  }  try {    return clazz.equals(byte[].class) ? (T)bytes : objectMapper.readValue(bytes,clazz);  } catch (  Exception e) {    log.info("parse byte[] to Object error, byte[]:{}, Class<T>:{}, error:{}",bytes,clazz.getName(),e);    return null;  }}  }
class C{  public void removeAttributes(AttributeSet attributes){  if (attributes == this) {    table.clear();  } else {    Enumeration names=attributes.getAttributeNames();    while (names.hasMoreElements()) {      Object name=names.nextElement();      Object value=attributes.getAttribute(name);      if (value.equals(getAttribute(name)))       removeAttribute(name);    }  }}  }
class C{  public final void destroy(){  int ngroupsSnapshot;  ThreadGroup[] groupsSnapshot;synchronized (this) {    checkAccess();    if (destroyed || (nthreads > 0)) {      throw new IllegalThreadStateException();    }    ngroupsSnapshot=ngroups;    if (groups != null) {      groupsSnapshot=Arrays.copyOf(groups,ngroupsSnapshot);    } else {      groupsSnapshot=null;    }    if (parent != null) {      destroyed=true;      ngroups=0;      groups=null;      nthreads=0;      threads=null;    }  }  for (int i=0; i < ngroupsSnapshot; i+=1) {    groupsSnapshot[i].destroy();  }  if (parent != null) {    parent.remove(this);  }}  }
class C{  public boolean isEntityStranded(Entity entity){  final int transportId=entity.getTransportId();  Entity transport=getEntity(transportId);  if ((Entity.NONE != transportId) && (null != transport)) {    if (transport instanceof Aero) {      return false;    }    if (transport.isImmobile() || (0 == transport.getWalkMP())) {      return true;    }  }  return false;}  }
class C{  @Override public void writeMessageBegin(TMessage tMessage) throws TException {  if (tMessage.type == TMessageType.CALL || tMessage.type == TMessageType.ONEWAY) {    super.writeMessageBegin(new TMessage(SERVICE_NAME + SEPARATOR + tMessage.name,tMessage.type,tMessage.seqid));  } else {    super.writeMessageBegin(tMessage);  }}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  public static void link(final CFunctionEdge edge,final CBlockNode parent,final CBlockNode child){  parent.m_outgoingEdges.add(Preconditions.checkNotNull(edge,"IE01232: Edge argument can not be null"));  parent.m_children.add(Preconditions.checkNotNull(parent,"IE01233: Parent argument can not be null"));  child.m_parents.add(Preconditions.checkNotNull(child,"IE01234: Child argument can not be null"));}  }
class C{  void shutdown(){  cursor=NONE;  if (nextIndex >= 0)   nextIndex=REMOVED;  if (lastRet >= 0) {    lastRet=REMOVED;    lastItem=null;  }  prevTakeIndex=DETACHED;}  }
class C{  private void showInfoWithVerticalBar(String text,int duration,int barNewValue){  showInfo(text,duration);  LinearLayout.LayoutParams layoutParams=(LinearLayout.LayoutParams)mVerticalBarProgress.getLayoutParams();  layoutParams.weight=barNewValue;  mVerticalBarProgress.setLayoutParams(layoutParams);  mVerticalBar.setVisibility(View.VISIBLE);}  }
class C{  public static double ACCrawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  int len=dvValues.length;  int confusionMatrix[]=getConfusionMatrixValues(useTrainingData,ind,chromosomeNum);  int truePositives=confusionMatrix[0];  int trueNegatives=confusionMatrix[3];  return ((double)(truePositives + trueNegatives) / (double)len);}  }
class C{  @Override public void simplify(SimplifierTool tool){  FixedNode currentNext=next();  if (currentNext instanceof AbstractEndNode) {    AbstractEndNode origLoopEnd=(AbstractEndNode)currentNext;    AbstractMergeNode merge=origLoopEnd.merge();    if (merge instanceof LoopBeginNode && !(origLoopEnd instanceof LoopEndNode)) {      return;    }    if (this.anchored().isNotEmpty()) {      return;    }    if (merge.stateAfter() == null && this.stateAfter() != null) {      return;    }    for (    PhiNode phi : phis()) {      for (      Node usage : phi.usages()) {        if (!(usage instanceof VirtualState) && !merge.isPhiAtMerge(usage)) {          return;        }      }    }    Debug.log("Split %s into ends for %s.",this,merge);    int numEnds=this.forwardEndCount();    for (int i=0; i < numEnds - 1; i++) {      AbstractEndNode end=forwardEndAt(numEnds - 1 - i);      if (tool != null) {        tool.addToWorkList(end);      }      AbstractEndNode newEnd;      if (merge instanceof LoopBeginNode) {        newEnd=graph().add(new LoopEndNode((LoopBeginNode)merge));      } else {        EndNode tmpEnd=graph().add(new EndNode());        merge.addForwardEnd(tmpEnd);        newEnd=tmpEnd;      }      for (      PhiNode phi : merge.phis()) {        ValueNode v=phi.valueAt(origLoopEnd);        ValueNode newInput;        if (isPhiAtMerge(v)) {          PhiNode endPhi=(PhiNode)v;          newInput=endPhi.valueAt(end);        } else {          newInput=v;        }        phi.addInput(newInput);      }      this.removeEnd(end);      end.replaceAtPredecessor(newEnd);      end.safeDelete();      if (tool != null) {        tool.addToWorkList(newEnd.predecessor());      }    }    graph().reduceTrivialMerge(this);  } else   if (currentNext instanceof ReturnNode) {    ReturnNode returnNode=(ReturnNode)currentNext;    if (anchored().isNotEmpty() || returnNode.getMemoryMap() != null) {      return;    }    List<PhiNode> phis=phis().snapshot();    for (    PhiNode phi : phis) {      for (      Node usage : phi.usages()) {        if (usage != returnNode && !(usage instanceof FrameState)) {          return;        }      }    }    ValuePhiNode returnValuePhi=returnNode.result() == null || !isPhiAtMerge(returnNode.result()) ? null : (ValuePhiNode)returnNode.result();    List<EndNode> endNodes=forwardEnds().snapshot();    for (    EndNode end : endNodes) {      ReturnNode newReturn=graph().add(new ReturnNode(returnValuePhi == null ? returnNode.result() : returnValuePhi.valueAt(end)));      if (tool != null) {        tool.addToWorkList(end.predecessor());      }      end.replaceAtPredecessor(newReturn);    }    GraphUtil.killCFG(this);    for (    EndNode end : endNodes) {      end.safeDelete();    }    for (    PhiNode phi : phis) {      if (tool.allUsagesAvailable() && phi.isAlive() && phi.hasNoUsages()) {        GraphUtil.killWithUnusedFloatingInputs(phi);      }    }  }}  }
class C{  @Override public ImmutableCollection<V> values(){  return valueList;}  }
class C{  @Deprecated public static <T>PeekingIterator<T> peekingIterator(PeekingIterator<T> iterator){  return checkNotNull(iterator);}  }
class C{  private Ribbon(Object dummy){  point=new Geo[]{};}  }
class C{  protected String encodeBody(){  if (address == null)   return null;  String retval="";  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval+=LESS_THAN;  }  retval+=address.encode();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval+=GREATER_THAN;  }  if (!parameters.isEmpty()) {    retval+=SEMICOLON + parameters.encode();  }  return retval;}  }
class C{  @Override public void hide(){  if (getVisibility() == View.VISIBLE) {    float pivotX=getPivotX() + getTranslationX();    float pivotY=getPivotY() + getTranslationY();    ScaleAnimation anim=new ScaleAnimation(1,0,1,0,pivotX,pivotY);    anim.setDuration(FAB_ANIM_DURATION);    anim.setInterpolator(getInterpolator());    startAnimation(anim);  }  setVisibility(View.INVISIBLE);}  }
class C{  public void close(){  flush();  try {    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static DoubleMatrix1D minus(DoubleMatrix1D A,double s){  return A.assign(F.minus(s));}  }
class C{  public boolean equals(Object object){  return object == null || object == this;}  }
class C{  public boolean dl(int num){  return (outputTypeSet(num));}  }
class C{  @SuppressWarnings("unchecked") public static <T extends CharSequence>TransformationStrategy<T> utf16(){  return (TransformationStrategy<T>)UTF16;}  }
class C{  public boolean isSignatureValid(ContentVerifierProvider verifierProvider) throws CertException {  TBSCertificate tbsCert=x509Certificate.getTBSCertificate();  if (!CertUtils.isAlgIdEqual(tbsCert.getSignature(),x509Certificate.getSignatureAlgorithm())) {    throw new CertException("signature invalid - algorithm identifier mismatch");  }  ContentVerifier verifier;  try {    verifier=verifierProvider.get((tbsCert.getSignature()));    OutputStream sOut=verifier.getOutputStream();    DEROutputStream dOut=new DEROutputStream(sOut);    dOut.writeObject(tbsCert);    sOut.close();  } catch (  Exception e) {    throw new CertException("unable to process signature: " + e.getMessage(),e);  }  return verifier.verify(x509Certificate.getSignature().getBytes());}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.971 -0500",hash_original_method="E71A30A98691493542EA069FF7EF94B8",hash_generated_method="54CCFDCF5F5F54D5B42CE9010DDF8BB2") public static void dumpHprofData(String fileName,FileDescriptor fd) throws IOException {}  }
class C{  public HoverActionControl(String action){  m_action=action;}  }
class C{  public void close(){  executor.getWatchdog().destroyProcess();  new File(scriptPath).delete();  zeppelinR.remove(hashCode());}  }
class C{  public SubscriptionStateException(String message,Reason reason){  super(message);  bean.setReason(reason);  setMessageKey(initMessageKey());}  }
class C{  public ServiceHelper conf(String key,Object value){  conf=conf.withValue(key,ConfigValueFactory.fromAnyRef(value,"Overridden var in ServiceHelper: " + key));  return this;}  }
class C{  public JToggleButton(Icon icon,boolean selected){  this(null,icon,selected);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,"ISO-8859-1");}  }
class C{  public CheckpointEvent(ClusterNode node,String msg,int type,String cpKey){  super(node,msg,type);  this.cpKey=cpKey;}  }
class C{  public Vector<int[]> computeStartAndEndTimePairs(boolean[] var1Valid,boolean[] var2Valid,boolean[] condValid){  int startTime=0;  int endTime=0;  boolean lookingForStart=true;  Vector<int[]> startAndEndTimePairs=new Vector<int[]>();  for (int t=0; t < var2Valid.length; t++) {    if (lookingForStart) {      if (var1Valid[t] && var2Valid[t] && condValid[t]) {        endTime=t;        lookingForStart=false;        if (t == var1Valid.length - 1) {          int[] timePair=new int[2];          timePair[0]=startTime;          timePair[1]=endTime;          startAndEndTimePairs.add(timePair);        }      } else {        startTime++;      }    } else {      boolean terminateSequence=false;      if (var1Valid[t] && var2Valid[t] && condValid[t]) {        endTime=t;      } else {        terminateSequence=true;      }      if (t == var2Valid.length - 1) {        terminateSequence=true;      }      if (terminateSequence) {        int[] timePair=new int[2];        timePair[0]=startTime;        timePair[1]=endTime;        startAndEndTimePairs.add(timePair);        lookingForStart=true;        startTime=t + 1;      }    }  }  return startAndEndTimePairs;}  }
class C{  @Override public void onUIRefreshBegin(PtrFrameLayout frame){  mDrawable.setAlpha(255);  mDrawable.start();}  }
class C{  public caption addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  default void update(double deltaTime){  if (this instanceof ComponentProvider) {    ((ComponentProvider)this).components().stream().filter(null).forEach(null);  }}  }
class C{  public final double logPdf(double x){  if (offset < 0)   return Math.log(0.0);  return distribution.logPdf(x - offset);}  }
class C{  @Override public boolean isExpired(){  return mSession.isExpired();}  }
class C{  public SignerInformationStore generateCounterSigners(SignerInformation signer,Provider sigProvider) throws NoSuchAlgorithmException, CMSException {  return this.generate(null,new CMSProcessableByteArray(signer.getSignature()),false,sigProvider).getSignerInfos();}  }
class C{  public Vector3f reflect(float x,float y,float z){  float dot=this.dot(x,y,z);  this.x=this.x - (dot + dot) * x;  this.y=this.y - (dot + dot) * y;  this.z=this.z - (dot + dot) * z;  return this;}  }
class C{  void checkStartCode(){  if (!startCode) {    throw new IllegalStateException("Cannot visit instructions before visitCode has been called.");  }}  }
class C{  public MonitorVersionException(String message){  super(message);}  }
class C{  public void encode(final DataOutputStream os,final ICloseableIterator<IBindingSet[]> src2) throws IOException {  final SolutionSetStatserator src=new SolutionSetStatserator(src2);  final IVSolutionSetEncoder encoder=new IVSolutionSetEncoder();  final DataOutputBuffer buf=new DataOutputBuffer();  try {    while (src.hasNext()) {      buf.reset();      final IBindingSet[] chunk=src.next();      for (int i=0; i < chunk.length; i++) {        encoder.encodeSolution(buf,chunk[i]);        if (log.isTraceEnabled())         log.trace("Wrote name=" + name + ", solution="+ chunk[i]);      }      final int bytesBuffered=buf.limit();      os.writeInt(CURRENT_VERSION);      os.writeInt(chunk.length);      os.writeInt(bytesBuffered);      os.write(buf.array(),0,bytesBuffered);      nbytes+=CHUNK_HEADER_SIZE + bytesBuffered;      nsolutions+=chunk.length;      chunkCount++;      if (log.isDebugEnabled())       log.debug("Wrote chunk: name=" + name + ", chunkSize="+ chunk.length+ ", chunkCount="+ chunkCount+ ", bytesBuffered="+ bytesBuffered+ ", solutionSetSize="+ nsolutions);    }    this.stats=src.getStats();    if (log.isDebugEnabled())     log.debug("Wrote solutionSet: name=" + name + ", solutionSetSize="+ nsolutions+ ", chunkCount="+ chunkCount+ ", encodedBytes="+ nbytes);  }  finally {    src.close();  }}  }
class C{  private ArrayList<String> filterYears(ArrayList<String> items){  Iterator<String> iterator;  Calendar now=Calendar.getInstance();  int year=now.get(Calendar.YEAR);  String yearInString=String.valueOf(year);  Log.d(TAG,"Year: " + yearInString);  int prevYear=year - 1;  String prevYearInString=String.valueOf(prevYear);  Log.d(TAG,"Previous year: " + prevYearInString);  for (iterator=items.iterator(); iterator.hasNext(); ) {    String s=iterator.next();    if (s.matches(".*(19|20)\\d{2}.*") && !s.contains(yearInString) && !s.contains(prevYearInString)) {      Log.d(TAG,"Filtering out year " + s);      iterator.remove();    }  }  Log.d(TAG,"Items: " + items.toString());  return items;}  }
class C{  public UTF8StreamReader(int capacity){  _bytes=new byte[capacity];}  }
class C{  public GPathResult parents(){  throw new GroovyRuntimeException("parents() not implemented yet");}  }
class C{  public void onContextChanged(Context context){  mScroller=new StackScroller(context);  mContext=context;}  }
class C{  public boolean isTriggerContainsInlineCode(String vendorName){  return m_interfaces.get(getDBVendorID(vendorName)).isTriggerContainsInlineCode();}  }
class C{  public boolean isRawDataSaved(){  return parameters.getBoolean("rawDataSaved",rawDataSaved);}  }
class C{  public static byte[] copyToByteArray(File in) throws IOException {  Assert.notNull(in,"No input File specified");  return copyToByteArray(new BufferedInputStream(new FileInputStream(in)));}  }
class C{  public static void sourceStats(final String[] args) throws Exception {  final Map<String,Stat> globalExtStatMap=new TreeMap<>();  final String[] folders={"src-launcher","src-sc2-textures","src-sc2-balance-data","src-ext-mod-api","src-app-libs","src-app","app-folder","src-tool","build.xml","README.md","war/news","release/resources/starter-scripts-raw","../ScelightOp/src"};  for (  final String folder : folders) {    final Map<String,Stat> extStatMap=new TreeMap<>();    countSources(Paths.get(folder),extStatMap);    final Stat folderAllStat=new Stat("<ALL>");    for (    final Stat stat : extStatMap.values())     folderAllStat.add(stat);    extStatMap.put(folderAllStat.ext,folderAllStat);    printStats(folder,extStatMap);    for (    final Stat stat : extStatMap.values()) {      Stat globalStat=globalExtStatMap.get(stat.ext);      if (globalStat == null)       globalExtStatMap.put(stat.ext,globalStat=new Stat(stat.ext));      globalStat.add(stat);    }    if ("app-folder".equals(folder))     printStats("SCELIGHT SOURCE STATS (so far)",globalExtStatMap);  }  printStats("PROJECT SOURCE STATS",globalExtStatMap);}  }
class C{  public void flush(){  prepare();}  }
class C{  public void eventSetComplete(EventSet set){  if (shouldResume) {    set.resume();    shouldResume=false;  }}  }
class C{  public void testSolvingMatrixEquationsOfSymmPosDefMatrices() throws Exception {  double[][] A={{6,2,3},{2,5,1},{3,1,4}};  double[][] B={{5},{4},{3}};  double[][] expectedX={{0.55385},{0.53846},{0.20000}};  double[][] X=MatrixUtils.solveViaCholeskyResult(MatrixUtils.CholeskyDecomposition(A),B);  checkMatrix(expectedX,X,OCTAVE_RESOLUTION);  double[][] A2={{6,2,3,1},{2,5,1,0.5},{3,1,4,2},{1,0.5,2,3}};  double[][] B2={{10,5,4,12},{4,6,-1,4.3},{20,1,0,-5},{6,3,2,1}};  double[][] expectedX2={{-1.740519,1.019960,1.445110,4.600798},{0.247505,0.942116,-0.590818,-0.042315},{7.461078,-1.502994,-1.616766,-6.140120},{-2.435130,1.504990,1.361277,2.900200}};  double[][] X2=MatrixUtils.solveViaCholeskyResult(MatrixUtils.CholeskyDecomposition(A2),B2);  checkMatrix(expectedX2,X2,OCTAVE_RESOLUTION);}  }
class C{  public T caseReferencedStateMachine_(ReferencedStateMachine_ object){  return null;}  }
class C{  public Graph search(String targetName){  if (targetName == null) {    throw new IllegalArgumentException("Null target name not permitted");  }  this.target=getVariableForName(targetName);  return search(target);}  }
class C{  public boolean readBoolean(String key){  Boolean value=(Boolean)mCache.get(key);  if (value == null) {    value=Boolean.parseBoolean(readParameter(key));    mCache.put(key,value);  }  return value;}  }
class C{  private static McfData executePathQuery(Analytics analytics,String tableId) throws IOException {  return analytics.data().mcf().get(tableId,"2012-01-01","2012-03-31","mcf:totalConversions").setDimensions("mcf:sourcePath").setSort("-mcf:totalConversions").setMaxResults(25).execute();}  }
class C{  @Override public Expression buildObjectJoinExpression(Expression expression,Expression argument,AbstractSession session){  Expression attributeByAttributeComparison=null;  Enumeration mappingsEnum=getReferenceDescriptor().getMappings().elements();  for (; mappingsEnum.hasMoreElements(); ) {    DatabaseMapping mapping=(DatabaseMapping)mappingsEnum.nextElement();    String attributeName=mapping.getAttributeName();    Expression join=expression.get(attributeName).equal(argument.get(attributeName));    if (attributeByAttributeComparison == null) {      attributeByAttributeComparison=join;    } else {      attributeByAttributeComparison=attributeByAttributeComparison.and(join);    }  }  return attributeByAttributeComparison;}  }
class C{  private UUID[] idsForKeys(int... keys){  return idsForKeys(false,keys);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:31.002 -0500",hash_original_method="70F846D8FDB0E87F2FB9AE4E0EB18175",hash_generated_method="9B05589635D862B5D833B705C4EEAAB3") @Deprecated public static long UTC(int year,int month,int day,int hour,int minute,int second){  GregorianCalendar cal=new GregorianCalendar(false);  cal.setTimeZone(TimeZone.getTimeZone("GMT"));  cal.set(1900 + year,month,day,hour,minute,second);  return cal.getTimeInMillis();}  }
class C{  public static boolean isCoreObjectMethod(Method method){  return ConversionHandler.isCoreObjectMethod(method) && !"toString".equals(method.getName());}  }
class C{  public void saveAsPS(File file) throws IOException, TranscoderException, ClassNotFoundException {  try {    Object t=Class.forName("org.apache.fop.render.ps.PSTranscoder").newInstance();    transcode(file,(Transcoder)t);  } catch (  InstantiationException|IllegalAccessException e) {    throw new ClassNotFoundException("Could not instantiate PS transcoder - is Apache FOP installed?",e);  }}  }
class C{  protected void processGetCommand(String cmd) throws IOException {  String location=cmd.substring(4);  int locationEnd=location.indexOf(" ");  location=location.substring(0,locationEnd);  String contentType;  if (location.endsWith(".gif") || location.endsWith(".GIF")) {    contentType=CONTENT_GIF;  } else   if (location.endsWith(".htm") || location.endsWith(".html") || location.endsWith(".HTM")|| location.endsWith(".HTML")) {    contentType=CONTENT_HTML;  } else   if (location.endsWith(".jpg") || location.endsWith(".JPG") || location.endsWith(".jpeg")|| location.endsWith(".JPEG")) {    contentType=CONTENT_JPEG;  } else   if (location.endsWith(".mov") || location.endsWith(".MOV")) {    contentType=CONTENT_MOV;  } else   if (location.indexOf('?') != -1) {    contentType=null;  } else {    contentType=CONTENT_PLAIN;  }  HttpRequestEvent event=server.fireHttpRequestEvent(location,out);  if (event.isWriterUsed()) {    Writer writer=event.getWriter();    String result=writer.toString();    writeHttpResponse(out,contentType,result);  }  out.flush();  close();}  }
class C{  public void changeSelection(int row,int col,boolean toggle,boolean extend){  int prevSmallest=getSmallestSelectionIndex();  int prevLargest=getLargestSelectionIndex();  col=adjustColumn(row,col);  if (row < 0) {    row=0;  }  repaintSelection();  if (extend) {    leadSelectionIndex=cellToOffset(row,col);  } else {    anchorSelectionIndex=leadSelectionIndex=cellToOffset(row,col);  }  if (getAutoscrolls()) {    ensureCellIsVisible(row,col);  }  repaintSelection();  fireSelectionChangedEvent(prevSmallest,prevLargest);}  }
class C{  private void initRayTracingProgram(){  glUseProgram(rayTracingProgram);  eyeUniform=glGetUniformLocation(rayTracingProgram,"eye");  ray00Uniform=glGetUniformLocation(rayTracingProgram,"ray00");  ray10Uniform=glGetUniformLocation(rayTracingProgram,"ray10");  ray01Uniform=glGetUniformLocation(rayTracingProgram,"ray01");  ray11Uniform=glGetUniformLocation(rayTracingProgram,"ray11");  timeUniform=glGetUniformLocation(rayTracingProgram,"time");  blendFactorUniform=glGetUniformLocation(rayTracingProgram,"blendFactor");  framebufferUniform=glGetUniformLocation(rayTracingProgram,"framebuffer");  boxesUniform=glGetUniformLocation(rayTracingProgram,"boxes");  numBoxesUniform=glGetUniformLocation(rayTracingProgram,"numBoxes");  widthUniform=glGetUniformLocation(rayTracingProgram,"width");  heightUniform=glGetUniformLocation(rayTracingProgram,"height");  bounceCountUniform=glGetUniformLocation(rayTracingProgram,"bounceCount");  glUniform1i(framebufferUniform,0);  glUniform1i(boxesUniform,1);  glUniform1i(numBoxesUniform,Demo20.boxes.length / 2);  glUseProgram(0);}  }
class C{  protected Node newNode(){  return new SVGOMAltGlyphElement();}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public final GraphicsState deepCopy(){  final GraphicsState newGS=new GraphicsState();  newGS.x=x;  newGS.y=y;  if (TR != null) {    newGS.TR=TR;  }  if (TRobj != null) {    newGS.TRobj=TRobj;  }  newGS.maxNonstrokeAlpha=maxNonstrokeAlpha;  newGS.maxStrokeAlpha=maxStrokeAlpha;  newGS.strokeAlpha=strokeAlpha;  newGS.nonstrokeAlpha=nonstrokeAlpha;  newGS.op=op;  newGS.OP=OP;  newGS.OPM=OPM;  newGS.nonstrokeColor=nonstrokeColor;  newGS.strokeColor=strokeColor;  if (current_clipping_shape != null) {    newGS.current_clipping_shape=(Area)current_clipping_shape.clone();  }  if (CTM != null) {    for (int i=0; i < 3; i++) {      System.arraycopy(CTM[i],0,newGS.CTM[i],0,3);    }  }  newGS.hasClipChanged=hasClipChanged;  newGS.current_line_dash_phase=current_line_dash_phase;  if (TRmask != null) {    newGS.TRmask=(GeneralPath)TRmask.clone();  }  newGS.fill_type=fill_type;  newGS.mitre_limit=mitre_limit;  if (current_line_dash_array != null) {    final int size=current_line_dash_array.length;    newGS.current_line_dash_array=new float[size];    System.arraycopy(current_line_dash_array,0,newGS.current_line_dash_array,0,size);  }  newGS.current_line_cap_style=current_line_cap_style;  newGS.current_line_width=current_line_width;  newGS.current_line_join_style=current_line_join_style;  newGS.text_render_type=text_render_type;  newGS.minX=minX;  newGS.minY=minY;  return newGS;}  }
class C{  public long optLong(int index){  return this.optLong(index,0);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.521 -0400",hash_original_method="9D08FE397D927D1C41AD2F0CB4BBD410",hash_generated_method="F940C353051FA951E590FBC54830A9CA") static boolean isSystemWindows(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  public RawDiagnosticFormatter(Options options){  super(null,new SimpleConfiguration(options,EnumSet.of(DiagnosticPart.SUMMARY,DiagnosticPart.DETAILS,DiagnosticPart.SUBDIAGNOSTICS)));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.687 -0500",hash_original_method="0703BC7E6FB4CF479DE68CDEB6E6E012",hash_generated_method="4B6EC5FDAD794F7DFF50406E013371F9") synchronized void cancel(){  if (HttpLog.LOGV) {    HttpLog.v("Request.cancel(): " + getUri());  }  mLoadingPaused=false;  notify();  mCancelled=true;  if (mConnection != null) {    mConnection.cancel();  }}  }
class C{  protected Geometry transformPolygon(Polygon geom,Geometry parent){  if (geom.isEmpty())   return null;  Geometry rawGeom=super.transformPolygon(geom,parent);  if (parent instanceof MultiPolygon) {    return rawGeom;  }  return createValidArea(rawGeom);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ModelPackage.MODEL_REFERENCE__VERSION:    setVersion((String)newValue);  return;case ModelPackage.MODEL_REFERENCE__IMPORTED_NAMESPACE:setImportedNamespace((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public double dot(Vec2 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec2","dot","missingVector"));  }  return this.x * vector.x + this.y * vector.y;}  }
class C{  @Override protected void verifyMatch(Object target,Object deserialized){  AnnualCalendar targetCalendar=(AnnualCalendar)target;  AnnualCalendar deserializedCalendar=(AnnualCalendar)deserialized;  assertNotNull(deserializedCalendar);  assertEquals(targetCalendar.getDescription(),deserializedCalendar.getDescription());  assertEquals(targetCalendar.getDaysExcluded(),deserializedCalendar.getDaysExcluded());  assertNull(deserializedCalendar.getTimeZone());}  }
class C{  boolean addSuperClass(OwlClass c){  return superClasses.add(c);}  }
class C{  public static ParsedSql parseSqlStatement(String sql){  Set<String> namedParameters=new HashSet<String>();  ParsedSql parsedSql=new ParsedSql(sql);  char[] statement=sql.toCharArray();  int namedParameterCount=0;  int unnamedParameterCount=0;  int totalParameterCount=0;  int i=0;  while (i < statement.length) {    int skipToPosition=skipCommentsAndQuotes(statement,i);    if (i != skipToPosition) {      if (skipToPosition >= statement.length) {        break;      }      i=skipToPosition;    }    char c=statement[i];    if (c == ':' || c == '&') {      int j=i + 1;      if (j < statement.length && statement[j] == ':' && c == ':') {        i=i + 2;        continue;      }      while (j < statement.length && !isParameterSeparator(statement[j])) {        j++;      }      if (j - i > 1) {        String parameter=sql.substring(i + 1,j);        if (!namedParameters.contains(parameter)) {          namedParameters.add(parameter);          namedParameterCount++;        }        parsedSql.addNamedParameter(parameter,i,j);        totalParameterCount++;      }      i=j - 1;    } else {      if (c == '?') {        unnamedParameterCount++;        totalParameterCount++;      }    }    i++;  }  parsedSql.setNamedParameterCount(namedParameterCount);  parsedSql.setUnnamedParameterCount(unnamedParameterCount);  parsedSql.setTotalParameterCount(totalParameterCount);  return parsedSql;}  }
class C{  public static LuaValue toTable(Map<?,?> params){  if (params != null) {    final LuaTable result=new LuaTable();    if (params.size() > 0) {      Object valueObj=null;      LuaValue key=null;      for (      final Object keyObj : params.keySet()) {        valueObj=params.get(keyObj);        key=toLuaValue(keyObj);        if (key != LuaValue.NIL) {          result.set(key,toLuaValue(valueObj));        }      }    }    return result;  }  return LuaValue.NIL;}  }
class C{  public DictionaryColumnUniqueIdentifier(CarbonTableIdentifier carbonTableIdentifier,ColumnIdentifier columnIdentifier){  this.carbonTableIdentifier=carbonTableIdentifier;  this.columnIdentifier=columnIdentifier;}  }
class C{  public static byte[] toByteArray(Reader input) throws IOException {  return toByteArray(input,Charset.defaultCharset());}  }
class C{  public void visitEnd(){  if (fv != null) {    fv.visitEnd();  }}  }
class C{  public JFileDataStoreChooser(Shell parent,int style,final List<String> extensions){  this(parent,style,associations(extensions));}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){  if (mv != null) {    return mv.visitParameterAnnotation(parameter,desc,visible);  }  return null;}  }
class C{  @SuppressWarnings("UnusedParameters") private IgfsNewLineRecordResolver(boolean b){  super(new byte[]{SYM_CR,SYM_LF},new byte[]{SYM_LF});}  }
class C{  @Override protected void onNfcFeatureNotFound(){  toast(getString(R.string.noNfcMessage));}  }
class C{  public Object[] parse(@Nullable String source,ParsePosition pos){  if (source == null) {    Object[] empty={};    return empty;  }  int maximumArgumentNumber=-1;  for (int i=0; i <= maxOffset; i++) {    if (argumentNumbers[i] > maximumArgumentNumber) {      maximumArgumentNumber=argumentNumbers[i];    }  }  Object[] resultArray=new Object[maximumArgumentNumber + 1];  int patternOffset=0;  int sourceOffset=pos.index;  ParsePosition tempStatus=new ParsePosition(0);  for (int i=0; i <= maxOffset; ++i) {    int len=offsets[i] - patternOffset;    if (len == 0 || pattern.regionMatches(patternOffset,source,sourceOffset,len)) {      sourceOffset+=len;      patternOffset+=len;    } else {      pos.errorIndex=sourceOffset;      return null;    }    if (formats[i] == null) {      int tempLength=(i != maxOffset) ? offsets[i + 1] : pattern.length();      int next;      if (patternOffset >= tempLength) {        next=source.length();      } else {        next=source.indexOf(pattern.substring(patternOffset,tempLength),sourceOffset);      }      if (next < 0) {        pos.errorIndex=sourceOffset;        return null;      } else {        String strValue=source.substring(sourceOffset,next);        if (!strValue.equals("{" + argumentNumbers[i] + "}"))         resultArray[argumentNumbers[i]]=source.substring(sourceOffset,next);        sourceOffset=next;      }    } else {      tempStatus.index=sourceOffset;      resultArray[argumentNumbers[i]]=formats[i].parseObject(source,tempStatus);      if (tempStatus.index == sourceOffset) {        pos.errorIndex=sourceOffset;        return null;      }      sourceOffset=tempStatus.index;    }  }  int len=pattern.length() - patternOffset;  if (len == 0 || pattern.regionMatches(patternOffset,source,sourceOffset,len)) {    pos.index=sourceOffset + len;  } else {    pos.errorIndex=sourceOffset;    return null;  }  return resultArray;}  }
class C{  private static void shovelInToOut(InputStream in,OutputStream out) throws IOException {synchronized (tmpbuffer) {    int len;    while ((len=in.read(tmpbuffer)) > 0) {      out.write(tmpbuffer,0,len);    }  }}  }
class C{  private boolean checkIfInitiatorsForRPAfterMigration(StringSet initiators){  if (initiators == null) {    return false;  }  boolean isRP=false;  for (  String initiatorId : initiators) {    Initiator initiator=dbClient.queryObject(Initiator.class,URI.create(initiatorId));    if (initiator != null) {      isRP=initiator.checkInternalFlags(Flag.RECOVERPOINT);      if (isRP) {        break;      }    }  }  log.debug("RP initiators? " + (isRP ? "Yes!" : "No!"));  return isRP;}  }
class C{  public ConditionAndActionPortal(ChatCondition condition,String rejectMessage,ChatAction action){  super(rejectMessage);  this.condition=condition;  this.action=action;}  }
class C{  @Override public NamedList<T> clone(){  ArrayList<Object> newList=new ArrayList<>(nvPairs.size());  newList.addAll(nvPairs);  return new NamedList<>(newList);}  }
class C{  protected void runTLCContinueDoing(final int count,final int depth) throws Exception {  final int level=this.trace.getLevel();  printProgresStats(-1);  if (level > depth) {    this.theStateQueue.finishAll();    this.done=true;  } else {    if (count == 0) {      super.reportCoverage(this.workers);    }    this.wait(TLCGlobals.progressInterval);  }}  }
class C{  @Override protected Builder addSignature(WebResource webResource){  if (secretKey == null) {    log.debug("Calling addSignature with null secretKey; local intervdc signing key will be used");  }  return super.addSignature(webResource,secretKey);}  }
class C{  public void saveData() throws BasicException {  if (m_Dirty.isDirty()) {    if (m_iState == ST_UPDATE) {      int i=m_bd.updateRecord(m_iIndex,m_editorrecord.createValue());      m_editorrecord.refresh();      baseMoveTo(i);    } else     if (m_iState == ST_INSERT) {      int i=m_bd.insertRecord(m_editorrecord.createValue());      m_editorrecord.refresh();      baseMoveTo(i);    } else     if (m_iState == ST_DELETE) {      int i=m_bd.removeRecord(m_iIndex);      m_editorrecord.refresh();      baseMoveTo(i);    }  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int length=s.readInt();  this.longs=new AtomicLongArray(length);  for (int i=0; i < length; i++) {    set(i,s.readDouble());  }}  }
class C{  public boolean dependOn(JobDefinition other){  return dependentOnClasses != null && dependentOnClasses.contains(other.cut);}  }
class C{  public static void syncCookieWithSystemBrowser(Context context){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    CookieManager.getInstance().flush();  } else {    CookieSyncManager.createInstance(context);    CookieSyncManager.getInstance().startSync();    CookieSyncManager.getInstance().sync();  }}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("tomcat4x",ContainerType.INSTALLED,Tomcat4xInstalledLocalContainer.class);  containerFactory.registerContainer("tomcat4x",ContainerType.REMOTE,Tomcat4xRemoteContainer.class);  containerFactory.registerContainer("tomcat5x",ContainerType.INSTALLED,Tomcat5xInstalledLocalContainer.class);  containerFactory.registerContainer("tomcat5x",ContainerType.REMOTE,Tomcat5xRemoteContainer.class);  containerFactory.registerContainer("tomcat5x",ContainerType.EMBEDDED,Tomcat5xEmbeddedLocalContainer.class);  containerFactory.registerContainer("tomcat6x",ContainerType.INSTALLED,Tomcat6xInstalledLocalContainer.class);  containerFactory.registerContainer("tomcat6x",ContainerType.REMOTE,Tomcat6xRemoteContainer.class);  containerFactory.registerContainer("tomcat6x",ContainerType.EMBEDDED,Tomcat6xEmbeddedLocalContainer.class);  containerFactory.registerContainer("tomcat7x",ContainerType.INSTALLED,Tomcat7xInstalledLocalContainer.class);  containerFactory.registerContainer("tomcat7x",ContainerType.REMOTE,Tomcat7xRemoteContainer.class);  containerFactory.registerContainer("tomcat7x",ContainerType.EMBEDDED,Tomcat7xEmbeddedLocalContainer.class);  containerFactory.registerContainer("tomcat8x",ContainerType.INSTALLED,Tomcat8xInstalledLocalContainer.class);  containerFactory.registerContainer("tomcat8x",ContainerType.REMOTE,Tomcat8xRemoteContainer.class);  containerFactory.registerContainer("tomcat8x",ContainerType.EMBEDDED,Tomcat8xEmbeddedLocalContainer.class);  containerFactory.registerContainer("tomcat9x",ContainerType.INSTALLED,Tomcat9xInstalledLocalContainer.class);  containerFactory.registerContainer("tomcat9x",ContainerType.REMOTE,Tomcat9xRemoteContainer.class);  containerFactory.registerContainer("tomcat9x",ContainerType.EMBEDDED,Tomcat9xEmbeddedLocalContainer.class);}  }
class C{  public void save() throws IOException {  FileUtil.writeToFile(myFile,myTextArea.getText().getBytes(encoding));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 12:03:05.873 -0400",hash_original_method="50343ACEF9E590EE2CAFFA9DABE84DB9",hash_generated_method="F07D312F05DCAA69887E3DED05ED497F") public void show(){  mStartTime=-1;  mDismissed=false;  removeCallbacks(mDelayedHide);  if (!mPostedShow) {    postDelayed(mDelayedShow,MIN_DELAY);    mPostedShow=true;  }}  }
class C{  public static void logError(String message,Object... args){  logError(null,message,args);}  }
class C{  private void displayProfileProvisionPromptScreen(){  Button btnEnableMngProfile;  Button btnSkipProfile;  setContentView(R.layout.activity_enable_work_profile);  btnEnableMngProfile=(Button)findViewById(R.id.btnSetupWorkProfile);  btnEnableMngProfile.setTag(TAG_BTN_ENABLE_PROFILE);  btnEnableMngProfile.setOnClickListener(onClickListenerButtonClicked);  btnSkipProfile=(Button)findViewById(R.id.btnSkipProfile);  btnSkipProfile.setTag(TAG_BTN_SKIP_PROFILE);  btnSkipProfile.setOnClickListener(onClickListenerButtonClicked);}  }
class C{  public ViewHelperImpl view(View target){  if (target == null)   throw new NullPointerException("target view can;t be null!");  this.v=target;  return this;}  }
class C{  protected boolean declAlreadyDeclared(String prefix){  int startDecls=m_contextIndexes.peek();  java.util.Vector prefixMappings=m_prefixMappings;  int nDecls=prefixMappings.size();  for (int i=startDecls; i < nDecls; i+=2) {    String prefixDecl=(String)prefixMappings.elementAt(i);    if (prefixDecl == null)     continue;    if (prefixDecl.equals(prefix))     return true;  }  return false;}  }
class C{  public void addDhtKey(KeyCacheObject key,boolean invalidateEntry,GridCacheContext ctx) throws IgniteCheckedException {  invalidateEntries.set(idx,invalidateEntry);  addKeyBytes(key,false,ctx);}  }
class C{  public static boolean checkHeaderDictionary(final SAMFileHeader fh,final SAMFileHeader lh){  if (fh.getSortOrder() != lh.getSortOrder()) {    return false;  }  final List<SAMSequenceRecord> flist=fh.getSequenceDictionary().getSequences();  final List<SAMSequenceRecord> llist=lh.getSequenceDictionary().getSequences();  final Iterator<SAMSequenceRecord> fi=flist.iterator();  final Iterator<SAMSequenceRecord> li=llist.iterator();  while (fi.hasNext()) {    if (!li.hasNext()) {      return false;    }    final SAMSequenceRecord fsr=fi.next();    final SAMSequenceRecord lsr=li.next();    if (!fsr.getSequenceName().equals(lsr.getSequenceName()) || fsr.getSequenceLength() != lsr.getSequenceLength()) {      return false;    }  }  if (li.hasNext()) {    return false;  }  return true;}  }
class C{  public static boolean intersectRayTriangle(Vector3 rayStart,Vector3 rayEnd,Vector3 t1,Vector3 t2,Vector3 t3,Vector3 hitPoint){  Vector3 rayDir=Vector3.subtractAndCreate(rayEnd,rayStart);  rayDir.normalize();  p.set(t1,t2,t3);  if (!intersectRayPlane(rayStart,rayEnd,p,i))   return false;  v0.subtractAndSet(t3,t1);  v1.subtractAndSet(t2,t1);  v2.subtractAndSet(i,t1);  double dot00=v0.dot(v0);  double dot01=v0.dot(v1);  double dot02=v0.dot(v2);  double dot11=v1.dot(v1);  double dot12=v1.dot(v2);  double denom=dot00 * dot11 - dot01 * dot01;  if (denom == 0)   return false;  double u=(dot11 * dot02 - dot01 * dot12) / denom;  double v=(dot00 * dot12 - dot01 * dot02) / denom;  if (u >= 0 && v >= 0 && u + v <= 1) {    if (hitPoint != null)     hitPoint.setAll(i);    return true;  } else   return false;}  }
class C{  public static void releaseLock(EntityManager em,long type,String key){  EntityTransaction tx=null;  try {    tx=em.getTransaction();    tx.begin();    GlobalInterlock lock=_findAndRefreshLock(em,type);    if (lock == null) {      throw new GlobalInterlockException("No lock of type " + type + " exists for key "+ key+ ".");    }    String ref=Long.toHexString(lock.lockTime);    if (ref.equalsIgnoreCase(key)) {      em.remove(lock);      em.flush();      tx.commit();    } else {      throw new GlobalInterlockException("This process doesn't own the type " + type + " lock having key "+ key+ ".");    }  }  finally {    if (tx != null && tx.isActive()) {      tx.rollback();    }  }}  }
class C{  public boolean isTurnoutCommand(Mx1Message pMsg){  return pMsg.getElement(0) == 0x4E;}  }
class C{  public static byte radiansToBrads(double angleRadians){  return (byte)Math.round(angleRadians * 128 / Math.PI);}  }
class C{  public RegisterRangeDecodedInstruction(InstructionCodec format,int opcode,int index,IndexType indexType,int target,long literal,int a,int registerCount){  super(format,opcode,index,indexType,target,literal);  this.a=a;  this.registerCount=registerCount;}  }
class C{  public static boolean isGiveBonusMovement(final GameData data){  final boolean isBonus;  data.acquireReadLock();  try {    final String prop=data.getSequence().getStep().getProperties().getProperty(GameStep.PROPERTY_giveBonusMovement);    if (prop != null) {      isBonus=Boolean.parseBoolean(prop);    } else {      isBonus=isCombatDelegate(data);    }  }  finally {    data.releaseReadLock();  }  return isBonus;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.IMPLEMENTED_PROJECTS__IMPLEMENTED_PROJECTS:    return implementedProjects != null && !implementedProjects.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static Set<SootClass> baseClassesToModel(){  if (baseClassesToModel == null) {    baseClassesToModel=VAResultContainerClassGenerator.getClassesAndFieldsToModel(false).keySet();  }  return baseClassesToModel;}  }
class C{  public boolean toThunderState(){  return to;}  }
class C{  @Override public String toString(){  Map<Value,Double> sortedTable=InferenceUtils.getNBest(table,Math.max(table.size(),1));  String str="";  for (  Entry<Value,Double> entry : sortedTable.entrySet()) {    String prob=StringUtils.getShortForm(entry.getValue());    str+="P(" + variable + "="+ entry.getKey()+ "):="+ prob+ "\n";  }  return (str.length() > 0) ? str.substring(0,str.length() - 1) : str;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static void downloadUrlToFileSystemInBackground(String url,String fileName,ActionListener onCompletion){  downloadUrlTo(url,fileName,false,true,false,onCompletion);}  }
class C{  private RopeByteString(ByteString left,ByteString right){  this.left=left;  this.right=right;  leftLength=left.size();  totalLength=leftLength + right.size();  treeDepth=Math.max(left.getTreeDepth(),right.getTreeDepth()) + 1;}  }
class C{  public List<ComputeElementRestRep> listMatchingComputeElements(ComputeVirtualPoolCreateParam input){  ComputeElementListRestRep response=client.post(ComputeElementListRestRep.class,input,baseUrl + "/matching-compute-elements");  return defaultList(response.getList());}  }
class C{  public void fireRequestURL(String url){  fireRequestURL(new InfoDisplayEvent(this,url));}  }
class C{  @Override public void writeAttribute(String namespaceURI,String localName,String value) throws XMLStreamException {  writeAttribute(null,namespaceURI,localName,value);}  }
class C{  public void schedule(TimerTask task,Date when,long period){  if (period <= 0 || when.getTime() < 0) {    throw new IllegalArgumentException();  }  long delay=when.getTime() - System.currentTimeMillis();  scheduleImpl(task,delay < 0 ? 0 : delay,period,false);}  }
class C{  TreeNodeChildrenEnumerator(TreeNode node){  currentChild=node.getLeftChild();}  }
class C{  protected void drawChartValuesText(Canvas canvas,XYSeries series,XYSeriesRenderer renderer,Paint paint,List<Float> points,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  float halfDiffX=getHalfDiffX(points,points.size(),seriesNr);  int start=0;  if (startIndex > 0) {    start=2;  }  for (int i=start; i < points.size(); i+=4) {    int index=startIndex + i / 2;    float x=points.get(i);    if (mType == Type.DEFAULT) {      x+=seriesIndex * 2 * halfDiffX - (seriesNr - 1.5f) * halfDiffX;    }    if (!isNullValue(series.getY(index + 1)) && points.size() > i + 3) {      drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(index + 1)),x,points.get(i + 3) - renderer.getChartValuesSpacing(),paint,0);    }    if (!isNullValue(series.getY(index)) && points.size() > i + 1) {      drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(index)),x,points.get(i + 1) + renderer.getChartValuesTextSize() + renderer.getChartValuesSpacing() - 3,paint,0);    }  }}  }
class C{  public static void appendHexJavaScriptRepresentation(StringBuilder sb,char c){  sb.append("\\u");  String val=Integer.toHexString(c);  for (int j=val.length(); j < 4; j++) {    sb.append('0');  }  sb.append(val);}  }
class C{  private boolean matchSession(ApplicationSession appSession,SessionSearchInfo searchInfo){  boolean sessionMatches=true;  if (searchInfo.isUseSearch()) {    if (searchInfo.isUseSessionId() && appSession.getId() != null) {      sessionMatches=searchInfo.getSessionIdPattern().matcher(appSession.getId()).matches();    }    if (sessionMatches && searchInfo.isUseAgeFrom()) {      sessionMatches=appSession.getAge() >= searchInfo.getAgeFromSec().longValue() * 1000;    }    if (sessionMatches && searchInfo.isUseAgeTo()) {      sessionMatches=appSession.getAge() <= searchInfo.getAgeToSec().longValue() * 1000;    }    if (sessionMatches && searchInfo.isUseIdleTimeFrom()) {      sessionMatches=appSession.getIdleTime() >= searchInfo.getIdleTimeFromSec().longValue() * 1000;    }    if (sessionMatches && searchInfo.isUseIdleTimeTo()) {      sessionMatches=appSession.getIdleTime() <= searchInfo.getIdleTimeToSec().longValue() * 1000;    }    if (searchInfo.isUseLastIp() && appSession.getLastAccessedIp() != null) {      sessionMatches=appSession.getLastAccessedIp().contains(searchInfo.getLastIp());    }    if (sessionMatches && searchInfo.isUseAttrName()) {      boolean attrMatches=false;      List<Pattern> namePatterns=new ArrayList<>();      namePatterns.addAll(searchInfo.getAttrNamePatterns());      for (      Attribute attr : appSession.getAttributes()) {        String attrName=attr.getName();        if (attrName != null) {          for (Iterator<Pattern> it=namePatterns.iterator(); it.hasNext(); ) {            if (it.next().matcher(attrName).matches()) {              it.remove();            }          }          if (namePatterns.isEmpty()) {            attrMatches=true;            break;          }        }      }      sessionMatches=attrMatches;    }  }  return sessionMatches;}  }
class C{  public HashMap<String,DBObject> reloadSequences(){  return (loadDBObjects(DBObject_Sequence.class));}  }
class C{  public void reset(){  contentLength=-1;  matchCount=0;  decodedBuffer=null;}  }
class C{  protected GenericAttr(){}  }
class C{  public boolean isGenLookAction(){  return kind == GENERAL_LOOK;}  }
class C{  public InputTextMessageContent.InputTextMessageContentBuilder parseMode(ParseMode parseMode){  this.parse_mode=parseMode;  return this;}  }
class C{  public FunctionInvocationTargetException(String msg){  super(msg);}  }
class C{  public boolean hasTotalCount(){  return getTotalCount() != 0;}  }
class C{  @Override public void finish(){  super.finish();}  }
class C{  public void assertDocsEnum(PostingsEnum leftDocs,PostingsEnum rightDocs) throws Exception {  if (leftDocs == null) {    assertNull(rightDocs);    return;  }  assertEquals(-1,leftDocs.docID());  assertEquals(-1,rightDocs.docID());  int docid;  while ((docid=leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {    assertEquals(docid,rightDocs.nextDoc());  }  assertEquals(DocIdSetIterator.NO_MORE_DOCS,rightDocs.nextDoc());}  }
class C{  public WebHttpHandlerBuilder exceptionHandlers(WebExceptionHandler... exceptionHandlers){  if (!ObjectUtils.isEmpty(exceptionHandlers)) {    this.exceptionHandlers.addAll(Arrays.asList(exceptionHandlers));  }  return this;}  }
class C{  public CoapResponse post(byte[] payload,int format){  return synchronous(format(newPost().setURI(uri).setPayload(payload),format));}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  static protected String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  @Override public boolean isRunning(){  return (frame != null && frame.isVisible());}  }
class C{  public Builder title(String value){  title=value;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.110 -0500",hash_original_method="50DEBE44F0AD632419D22CF3D0ACBF84",hash_generated_method="6A7243271996456135C67330F3D6B312") public ASN1ValueCollection(int tagNumber,ASN1Type type){  super(tagNumber);  this.type=type;}  }
class C{  public void test_2() throws Exception {  final String namespace="test" + UUID.randomUUID();  final BigdataSailRepositoryConnection cxn=prepareTest(namespace,true,true,true);  insertSparql(cxn);  IValueCentricTextIndexer<?> searchEngine=cxn.getTripleStore().getLexiconRelation().getSearchEngine();  assertEquals(0,searchEngine.count(query("1")));  assertEquals(0,searchEngine.count(query("2")));  assertEquals(0,searchEngine.count(query("3")));  assertEquals(0,searchEngine.count(query("4")));  assertEquals(0,searchEngine.count(query("true")));  assertEquals(0,searchEngine.count(query("false")));  assertEquals(1,searchEngine.count(query("plain")));  assertEquals(1,searchEngine.count(query("datatyped")));  assertEquals(1,searchEngine.count(query("english")));  endTest(cxn);}  }
class C{  private void readWayParams(){  for (  ConfigGroup e : config.getParameterSets(OsmConverterConfigGroup.OsmWayParams.SET_NAME)) {    OsmConverterConfigGroup.OsmWayParams w=(OsmConverterConfigGroup.OsmWayParams)e;    if (w.getOsmKey().equals(OsmTag.HIGHWAY)) {      highwayParams.put(w.getOsmValue(),w);    } else     if (w.getOsmKey().equals(OsmTag.RAILWAY)) {      railwayParams.put(w.getOsmValue(),w);    }  }}  }
class C{  private void createSceneSSBO(){  this.ssbo=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,ssbo);  ByteBuffer ssboData=BufferUtils.createByteBuffer(4 * (4 + 4) * boxes.length / 2);  FloatBuffer fv=ssboData.asFloatBuffer();  for (int i=0; i < boxes.length; i+=2) {    Vector3f min=boxes[i];    Vector3f max=boxes[i + 1];    fv.put(min.x).put(min.y).put(min.z).put(0.0f);    fv.put(max.x).put(max.y).put(max.z).put(0.0f);  }  glBufferData(GL_ARRAY_BUFFER,ssboData,GL_STATIC_DRAW);  glBindBuffer(GL_ARRAY_BUFFER,0);}  }
class C{  public void removeFromThread(){  ThreadCtx.get().setSharedContext(null);}  }
class C{  public CRLException(String message){  super(message);}  }
class C{  public double[] readAllDoubles(){  String[] fields=readAllStrings();  double[] vals=new double[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Double.parseDouble(fields[i]);  return vals;}  }
class C{  public String calculateHash(){  if (digest == null) {    return "";  }  byte[] md5sum=digest.digest();  BigInteger bigInt=new BigInteger(1,md5sum);  String output=bigInt.toString(16);  return String.format("%32s",output).replace(' ','0');}  }
class C{  void releaseReadLock(){  this.readLock.unlock();}  }
class C{  public String labelTipText(){  return "The new label for the merged values.";}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  VectorSeriesCollection clone=(VectorSeriesCollection)super.clone();  clone.data=(List)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public void startCDATA() throws org.xml.sax.SAXException {  m_inCData=true;  append(m_doc.createCDATASection(""));}  }
class C{  private void throwCustomException(int numOfChildViews){  if (numOfChildViews == 1) {    throw new NumberOfFoldingLayoutChildrenException(FOLDING_VIEW_EXCEPTION_MESSAGE);  }}  }
class C{  @SideEffectFree public void log(Level level,@Nullable String msg,@Nullable Throwable thrown){  throw new RuntimeException();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.PROMISIFY_EXPRESSION__EXPRESSION:    setExpression((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  public void connected(boolean connected){  if (connected) {    setFillPaint(CONNECTED_COLOR);  }}  }
class C{  public TickUnit(double size){  this.size=size;}  }
class C{  public void putStatic(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTSTATIC,owner,name,type);}  }
class C{  protected double[] convertListToDoubleArray(List list){  double[] array=new double[list.size()];  for (int i=0; i < array.length; i++) {    array[i]=((Double)list.get(i)).doubleValue();  }  return array;}  }
class C{  public NotificationChain basicSetParentRegion(Region newParentRegion,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newParentRegion,SGraphPackage.VERTEX__PARENT_REGION,msgs);  return msgs;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  private Element nearestEnclosingExceptLocal(Tree tree){  TreePath path=atypeFactory.getPath(tree);  if (path == null) {    Element method=atypeFactory.getEnclosingMethod(tree);    if (method != null) {      return method;    } else {      return InternalUtils.symbol(tree);    }  }  Tree prev=null;  for (  Tree t : path) {switch (t.getKind()) {case VARIABLE:      VariableTree vtree=(VariableTree)t;    ExpressionTree vtreeInit=vtree.getInitializer();  if (vtreeInit != null && prev == vtreeInit) {    Element elt=TreeUtils.elementFromDeclaration((VariableTree)t);    DefaultQualifier d=elt.getAnnotation(DefaultQualifier.class);    DefaultQualifiers ds=elt.getAnnotation(DefaultQualifiers.class);    if (d == null && ds == null) {      break;    }  }if (prev != null && prev.getKind() == Tree.Kind.MODIFIERS) {  break;}return TreeUtils.elementFromDeclaration((VariableTree)t);case METHOD:return TreeUtils.elementFromDeclaration((MethodTree)t);case CLASS:case ENUM:case INTERFACE:case ANNOTATION_TYPE:return TreeUtils.elementFromDeclaration((ClassTree)t);default :}prev=t;}return null;}  }
class C{  public double distanceToSquared(Vec3 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec3","distanceToSquared","missingVector"));  }  double dx=this.x - vector.x;  double dy=this.y - vector.y;  double dz=this.z - vector.z;  return dx * dx + dy * dy + dz * dz;}  }
class C{  public static int uniquePaths(int m,int n){  int[][] paths=new int[m + 1][n + 1];  paths[m - 1][n]=1;  for (int r=m - 1; r >= 0; r--)   for (int c=n - 1; c >= 0; c--)   paths[r][c]=paths[r + 1][c] + paths[r][c + 1];  return paths[0][0];}  }
class C{  protected static double computeH(final int i,double[] dist_i,double[] pij_i,double mbeta){  double sumP=0.;  for (int j=0; j < i; j++) {    sumP+=(pij_i[j]=Math.exp(dist_i[j] * mbeta));  }  for (int j=i + 1; j < dist_i.length; j++) {    sumP+=(pij_i[j]=Math.exp(dist_i[j] * mbeta));  }  if (!(sumP > 0)) {    return Double.NEGATIVE_INFINITY;  }  final double s=1. / sumP;  double sum=0.;  for (int j=0; j < dist_i.length; j++) {    sum+=dist_i[j] * (pij_i[j]*=s);  }  return Math.log(sumP) - mbeta * sum;}  }
class C{  @Override public boolean isNumerical(){  return false;}  }
class C{  @Around("execution(* org.yes.cart.service.domain.impl.CustomerServiceImpl.create(..))") public Object doCreateCustomer(final ProceedingJoinPoint pjp) throws Throwable {  return notifyInternal(pjp,true);}  }
class C{  public boolean isPropertyAnimatable(String pn){  AbstractStylableDocument doc=(AbstractStylableDocument)ownerDocument;  CSSEngine eng=doc.getCSSEngine();  int idx=eng.getPropertyIndex(pn);  if (idx != -1) {    ValueManager[] vms=eng.getValueManagers();    return vms[idx].isAnimatableProperty();  }  idx=eng.getShorthandIndex(pn);  if (idx != -1) {    ShorthandManager[] sms=eng.getShorthandManagers();    return sms[idx].isAnimatableProperty();  }  return false;}  }
class C{  @Override public void visitIdent(JCIdent tree){  if (context == null || !analyzer.lambdaIdentSymbolFilter(tree.sym)) {    super.visitIdent(tree);  } else {    int prevPos=make.pos;    try {      make.at(tree);      LambdaTranslationContext lambdaContext=(LambdaTranslationContext)context;      JCTree ltree=lambdaContext.translate(tree);      if (ltree != null) {        result=ltree;      } else {        super.visitIdent(tree);      }    }  finally {      make.at(prevPos);    }  }}  }
class C{  public AddNodeDialog(java.awt.Frame parent,boolean modal,ProjectAssetManager mgr,Diagram diagram,Point clickPosition){  super(parent,modal);  this.diagram=diagram;  initComponents();  loadDefs(mgr);  fillList(mgr);  this.clickPosition=clickPosition;}  }
class C{  public static void commit(boolean beganTransaction) throws GenericTransactionException {  if (beganTransaction) {    TransactionUtil.commit();  }}  }
class C{  public static ExampleSet createExampleSet(double[][] data,double[] labels){  if (data.length == 0) {    throw new RuntimeException("ExampleSetFactory.createExampleSet(double[][], double[]): data matrix is not allowed to be empty.");  }  int numberOfAttributes=data[0].length;  List<Attribute> attributeList=new ArrayList<Attribute>(numberOfAttributes + (labels != null ? 1 : 0));  for (int a=0; a < numberOfAttributes; a++) {    attributeList.add(AttributeFactory.createAttribute("att" + (a + 1),Ontology.NUMERICAL));  }  Attribute labelAttribute=null;  if (labels != null) {    labelAttribute=AttributeFactory.createAttribute("label",Ontology.NUMERICAL);    attributeList.add(labelAttribute);  }  MemoryExampleTable table=new MemoryExampleTable(attributeList);  for (int e=0; e < data.length; e++) {    double[] dataRow=data[e];    if (labelAttribute != null) {      dataRow=new double[numberOfAttributes + 1];      System.arraycopy(data[e],0,dataRow,0,data[e].length);      dataRow[dataRow.length - 1]=labels[e];    }    table.addDataRow(new DoubleArrayDataRow(dataRow));  }  return table.createExampleSet(labelAttribute);}  }
class C{  public void go(File file) throws IOException {  JCalWriter writer=new JCalWriter(file,wrapInArray());  try {    go(writer);  }  finally {    writer.close();  }}  }
class C{  @Override public Model learn(){  ClassificationProblem problem=(ClassificationProblem)this.problem;  int numExamples=problem.getProblemSize();  int numBases=numExamples + 1;  int prune_point=50;  prune_point=parameter.maxIterations * prune_point / 100;  double[][] x=problem.getInputVectors();  KernelBasisFunction[] kernels=problem.getKernels();  double[][] PHI=new double[numExamples][numBases];  int i, j;  for (j=0; j < numBases - 1; j++) {    for (i=0; i < numExamples; i++) {      PHI[i][j + 1]=kernels[j + 1].eval(x[i]);    }  }  for (i=0; i < numExamples; i++) {    PHI[i][0]=1.0;  }  double[] alphas=new double[numBases];  for (j=0; j < numBases; j++) {    alphas[j]=parameter.initAlpha;  }  Matrix matrixPHI=new Matrix(PHI);  Matrix vectorAlpha=new Matrix(alphas,numBases);  Matrix vectorWeights=new Matrix(numBases,1,0.0);  Matrix prunedVectorWeights=null;  Matrix matrixU=null;  Matrix matrixUInv=null;  LinkedList<Integer> unprunedIndicesList=null;  int[] unprunedIndicesArray=null;  for (i=1; i <= parameter.maxIterations; i++) {    unprunedIndicesList=new LinkedList<Integer>();    for (j=0; j < numBases; j++) {      if (vectorAlpha.get(j,0) >= parameter.alpha_max) {      } else {        unprunedIndicesList.add(Integer.valueOf(j));      }    }    unprunedIndicesArray=new int[unprunedIndicesList.size()];    Iterator iter=unprunedIndicesList.iterator();    for (j=0; j < unprunedIndicesList.size(); j++) {      unprunedIndicesArray[j]=((Integer)iter.next()).intValue();    }    Matrix prunedMatrixPHI=matrixPHI.getMatrix(0,matrixPHI.getRowDimension() - 1,unprunedIndicesArray);    Matrix prunedVectorAlpha=vectorAlpha.getMatrix(unprunedIndicesArray,0,0);    prunedVectorWeights=vectorWeights.getMatrix(unprunedIndicesArray,0,0);    double minGradientChange=1e-6;    double minLambda=Math.pow(2,-8);    Matrix matrixAlphaDiag=new Matrix(prunedVectorAlpha.getRowDimension(),prunedVectorAlpha.getRowDimension(),0);    for (j=0; j < prunedVectorAlpha.getRowDimension(); j++) {      matrixAlphaDiag.set(j,j,prunedVectorAlpha.get(j,0));    }    Matrix vectorY=prunedMatrixPHI.times(prunedVectorWeights);    for (int k=0; k < vectorY.getRowDimension(); k++) {      vectorY.set(k,0,sigmoid(vectorY.get(k,0)));    }    double dataTerm=0;    int[] t=problem.getTargetVectors();    for (int k=0; k < t.length; k++) {      if (t[k] == 1) {        dataTerm-=Math.log(vectorY.get(k,0));      } else {        dataTerm-=Math.log(1.0 - vectorY.get(k,0));      }    }    double penaltyTerm=0;    for (int k=0; k < prunedVectorAlpha.getRowDimension(); k++) {      penaltyTerm+=prunedVectorAlpha.get(k,0) * prunedVectorWeights.get(k,0) * prunedVectorWeights.get(k,0);    }    double error=(dataTerm + penaltyTerm / 2.0) / problem.getProblemSize();    for (j=0; j < 25; j++) {      Matrix matrixIRLSWeights=new Matrix(prunedMatrixPHI.getRowDimension(),prunedMatrixPHI.getRowDimension(),0);      for (int k=0; k < matrixIRLSWeights.getRowDimension(); k++) {        matrixIRLSWeights.set(k,k,vectorY.get(k,0) * (1.0 - vectorY.get(k,0)));      }      Matrix matrixHessian=prunedMatrixPHI.transpose().times(matrixIRLSWeights).times(prunedMatrixPHI);      matrixHessian.plusEquals(matrixAlphaDiag);      Matrix vectorE=new Matrix(vectorY.getRowDimension(),1,0.0);      for (int k=0; k < vectorY.getRowDimension(); k++) {        vectorE.set(k,0,t[k] - vectorY.get(k,0));      }      Matrix vectorPenalty=(Matrix)prunedVectorAlpha.clone();      for (int k=0; k < vectorPenalty.getRowDimension(); k++) {        vectorPenalty.set(k,0,vectorPenalty.get(k,0) * prunedVectorWeights.get(k,0));      }      Matrix vectorGradient=prunedMatrixPHI.transpose().times(vectorE).minus(vectorPenalty);      SECholeskyDecomposition CD=new SECholeskyDecomposition(matrixHessian.getArray());      matrixU=CD.getPTR().times(CD.getL());      matrixUInv=matrixU.inverse();      if (j >= 2 && (vectorGradient.normF() / prunedVectorWeights.getRowDimension()) < minGradientChange) {        break;      }      Matrix vectorDeltaWeights=matrixUInv.transpose().times((matrixUInv.times(vectorGradient)));      double lambda=1;      while (lambda > minLambda) {        Matrix vectorNewWeights=((Matrix)prunedVectorWeights.clone()).plus(vectorDeltaWeights.times(lambda));        vectorY=prunedMatrixPHI.times(vectorNewWeights);        for (int k=0; k < vectorY.getRowDimension(); k++) {          vectorY.set(k,0,sigmoid(vectorY.get(k,0)));        }        dataTerm=0;        for (int k=0; k < t.length; k++) {          if (t[k] == 1) {            dataTerm-=Math.log(vectorY.get(k,0));          } else {            dataTerm-=Math.log(1.0 - vectorY.get(k,0));          }        }        penaltyTerm=0;        for (int k=0; k < prunedVectorAlpha.getRowDimension(); k++) {          penaltyTerm+=prunedVectorAlpha.get(k,0) * vectorNewWeights.get(k,0) * vectorNewWeights.get(k,0);        }        double error_new=(dataTerm + penaltyTerm / 2.0) / problem.getProblemSize();        if (error_new > error) {          lambda=lambda / 2.0;          continue;        }        prunedVectorWeights=vectorNewWeights;        break;      }    }    double[] diagSIGMA=new double[matrixUInv.getRowDimension()];    for (j=0; j < diagSIGMA.length; j++) {      double value=0;      for (int k=0; k < diagSIGMA.length; k++) {        value+=matrixUInv.get(k,j) * matrixUInv.get(k,j);      }      diagSIGMA[j]=value;    }    double[] gammas=new double[diagSIGMA.length];    for (j=0; j < gammas.length; j++) {      gammas[j]=1.0 - prunedVectorAlpha.get(j,0) * diagSIGMA[j];    }    double[] logAlphas=new double[prunedVectorAlpha.getRowDimension()];    for (j=0; j < logAlphas.length; j++) {      logAlphas[j]=Math.log(prunedVectorAlpha.get(j,0));    }    for (j=0; j < prunedVectorAlpha.getRowDimension(); j++) {      double newAlpha=gammas[j] / (prunedVectorWeights.get(j,0) * prunedVectorWeights.get(j,0));      prunedVectorAlpha.set(j,0,newAlpha);    }    double maxLogAlphaChange=0;    for (j=0; j < logAlphas.length; j++) {      double change=Math.abs(logAlphas[j] - Math.log(prunedVectorAlpha.get(j,0)));      if (change > maxLogAlphaChange) {        maxLogAlphaChange=change;      }    }    if (maxLogAlphaChange < parameter.min_delta_log_alpha) {      break;    }    for (j=0; j < prunedVectorAlpha.getRowDimension(); j++) {      vectorAlpha.set(unprunedIndicesArray[j],0,prunedVectorAlpha.get(j,0));    }  }  double[] finalWeights=new double[unprunedIndicesArray.length];  KernelBasisFunction[] finalKernels=new KernelBasisFunction[unprunedIndicesArray.length];  boolean bias=false;  for (j=0; j < unprunedIndicesArray.length; j++) {    finalWeights[j]=prunedVectorWeights.get(j,0);    if (unprunedIndicesArray[j] == 0) {      bias=true;      finalKernels[j]=new KernelBasisFunction(new KernelRadial());    } else {      finalKernels[j]=kernels[unprunedIndicesArray[j]];    }  }  Model model=new Model(finalWeights,finalKernels,bias,false);  return model;}  }
class C{  public boolean toWeatherState(){  return to;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(ServerControllerTest.class);}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator,final boolean useTable){  for (int i=1; i < keys.length; ++i) {    if (keys[i] < keys[i - 1]) {      throw new IllegalArgumentException("keys must be sorted ascending");    }  }  Label def=newLabel();  Label end=newLabel();  if (keys.length > 0) {    int len=keys.length;    int min=keys[0];    int max=keys[len - 1];    int range=max - min + 1;    if (useTable) {      Label[] labels=new Label[range];      Arrays.fill(labels,def);      for (int i=0; i < len; ++i) {        labels[keys[i] - min]=newLabel();      }      mv.visitTableSwitchInsn(min,max,def,labels);      for (int i=0; i < range; ++i) {        Label label=labels[i];        if (label != def) {          mark(label);          generator.generateCase(i + min,end);        }      }    } else {      Label[] labels=new Label[len];      for (int i=0; i < len; ++i) {        labels[i]=newLabel();      }      mv.visitLookupSwitchInsn(def,keys,labels);      for (int i=0; i < len; ++i) {        mark(labels[i]);        generator.generateCase(keys[i],end);      }    }  }  mark(def);  generator.generateDefault();  mark(end);}  }
class C{  private void drawTexts(Canvas canvas,float textSize,Typeface typeface,String[] texts,float[] textGridWidths,float[] textGridHeights){  mPaint.setTextSize(textSize);  mPaint.setTypeface(typeface);  LanguageUtils.getPersianNumbers(texts);  canvas.drawText(texts[0],textGridWidths[3],textGridHeights[0],Integer.parseInt(texts[0]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[1],textGridWidths[4],textGridHeights[1],Integer.parseInt(texts[1]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[2],textGridWidths[5],textGridHeights[2],Integer.parseInt(texts[2]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[3],textGridWidths[6],textGridHeights[3],Integer.parseInt(texts[3]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[4],textGridWidths[5],textGridHeights[4],Integer.parseInt(texts[4]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[5],textGridWidths[4],textGridHeights[5],Integer.parseInt(texts[5]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[6],textGridWidths[3],textGridHeights[6],Integer.parseInt(texts[6]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[7],textGridWidths[2],textGridHeights[5],Integer.parseInt(texts[7]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[8],textGridWidths[1],textGridHeights[4],Integer.parseInt(texts[8]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[9],textGridWidths[0],textGridHeights[3],Integer.parseInt(texts[9]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[10],textGridWidths[1],textGridHeights[2],Integer.parseInt(texts[10]) == selection ? mSelectedPaint : mPaint);  canvas.drawText(texts[11],textGridWidths[2],textGridHeights[1],Integer.parseInt(texts[11]) == selection ? mSelectedPaint : mPaint);}  }
class C{  private void unmarkRemovedDefaultSessionToken(String site,String token){  if (removedDefaultTokens == null)   return;  HashSet<String> removed=removedDefaultTokens.get(site);  if (removed == null)   return;  removed.remove(token);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void removeAtRange(int index,int size){  final int end=Math.min(mSize,index + size);  for (int i=index; i < end; i++) {    removeAt(i);  }}  }
class C{  public boolean onEnterKeyPress(){  return showAppMenu(false);}  }
class C{  public void visitInvokeDynamicInsn(String name,String desc,Handle bsm,Object... bsmArgs){  if (mv != null) {    mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);  }}  }
class C{  public void addLast(Product product){  relatedProducts.add(relatedProducts.size(),product);  notifyItemInserted(relatedProducts.size());}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.265 -0500",hash_original_method="0C2DA7F13CAAE321089EB28883C484D4",hash_generated_method="9D1C96C4E29944823F49260ADAD8981D") private void parseFragment(Reader in) throws IOException, SAXException {  char[] buffer=new char[BUFFER_SIZE / 2];  int length;  while ((length=in.read(buffer)) != -1) {    try {      appendChars(this.pointer,buffer,0,length);    } catch (    ExpatException e) {      throw new ParseException(e.getMessage(),locator);    }  }}  }
class C{  public void translate(double dx,double dy){  this.x+=dx;  this.y+=dy;}  }
class C{  private void scanJarManifestForClassPathEntries(LinkedList<WorkListItem> workList,ICodeBase codeBase) throws IOException {  ICodeBaseEntry manifestEntry=codeBase.lookupResource("META-INF/MANIFEST.MF");  if (manifestEntry == null) {    return;  }  InputStream in=null;  try {    in=manifestEntry.openResource();    Manifest manifest=new Manifest(in);    Attributes mainAttrs=manifest.getMainAttributes();    String classPath=mainAttrs.getValue("Class-Path");    if (classPath != null) {      String[] pathList=classPath.split("\\s+");      for (      String path : pathList) {        ICodeBaseLocator relativeCodeBaseLocator=codeBase.getCodeBaseLocator().createRelativeCodeBaseLocator(path);        addToWorkList(workList,new WorkListItem(relativeCodeBaseLocator,false,ICodeBase.Discovered.IN_JAR_MANIFEST));      }    }  }  finally {    if (in != null) {      IO.close(in);    }  }}  }
class C{  private String computeLicensedAmount(Properties vendorProps){  String units=vendorProps.getProperty(LicenseConstants.STORAGE_CAPACITY_UNITS);  if (units == null) {    return null;  }  BigInteger computedLicensedCapacity=null;  if (units.equalsIgnoreCase(LicenseConstants.TERABYTE)) {    BigInteger licensedCapacity=new BigInteger(vendorProps.getProperty(LicenseConstants.STORAGE_CAPACITY));    computedLicensedCapacity=licensedCapacity.multiply(LicenseConstants.TB_VALUE);  }  if (computedLicensedCapacity != null) {    return computedLicensedCapacity.toString();  } else {    return "0";  }}  }
class C{  private void rebuildNode(){  realizer.regenerate();  graph.updateViews();}  }
class C{  @Deprecated public MessageDialog(String i18nKey,JComponent c,Object... i18nArgs){  this(ApplicationFrame.getApplicationFrame(),i18nKey,c,i18nArgs);}  }
class C{  private static void calculateNamespaces(Map<String,XmlNamespace> namespaces,Element e,ElementMetadata<?,?> metadata){  QName name=(metadata == null) ? e.getElementId() : metadata.getName();  addNamespace(namespaces,name);  Iterator<Attribute> attIter=e.getAttributeIterator(metadata);  while (attIter.hasNext()) {    Attribute att=attIter.next();    AttributeKey<?> attKey=att.getAttributeKey();    AttributeMetadata<?> attMeta=(metadata == null) ? null : metadata.bindAttribute(attKey);    name=(attMeta == null) ? attKey.getId() : attMeta.getName();    addNamespace(namespaces,name);  }  Iterator<Element> childIter=e.getElementIterator(metadata);  while (childIter.hasNext()) {    Element child=childIter.next();    ElementMetadata<?,?> childMeta=(metadata == null) ? null : metadata.bindElement(child.getElementKey());    calculateNamespaces(namespaces,child,childMeta);  }}  }
class C{  public long[] selectZero(long rank,long[] dest){  return selectZero(rank,dest,0,dest.length);}  }
class C{  public void testGetInstanceString01() throws NoSuchAlgorithmException {  try {    KeyAgreement.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException should be thrown if algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyAgreement.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.730 -0400",hash_original_method="694B238FF5AB1AB4441171CB6DC98A7A",hash_generated_method="BD1C54C575DC051B66557980241D013D") @Override public void write(String str,int st,int end) throws IOException {  out.write(str,st,end);}  }
class C{  public void appendLong(long x){  ByteArrayOutputStream buffer=new ByteArrayOutputStream(8);  DataOutputStream bufout=new DataOutputStream(buffer);  try {    bufout.writeLong(x);    appendBytes(buffer.toByteArray(),0,8);  } catch (  IOException e) {    throw new AssertionError("write");  }}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  @Nullable public Collection<TcpDiscoveryAbstractMessage> messages(){  return msgs;}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.564 -0500",hash_original_method="7CC449D7C06EBE9C929936D878A8919D",hash_generated_method="CD6036511F0CD6F301B7588427C26A96") private File[] filenamesToFiles(String[] filenames){  if (filenames == null) {    return null;  }  int count=filenames.length;  File[] result=new File[count];  for (int i=0; i < count; ++i) {    result[i]=new File(this,filenames[i]);  }  return result;}  }
class C{  public void positionLayers(){  NetworkLayoutManager.offsetNeuronGroup(inputLayer,reservoirLayer,Direction.NORTH,betweenLayerInterval);  NetworkLayoutManager.offsetNeuronGroup(reservoirLayer,outputLayer,Direction.NORTH,betweenLayerInterval);  reservoirLayer.offset(-2 * reservoirLayer.getWidth() / 3,0);}  }
class C{  public static void swap(Object[] arr,int a,int b){  Object tmp=arr[a];  arr[a]=arr[b];  arr[b]=tmp;}  }
class C{  @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:26.489 -0500",hash_original_method="040104E30D8A876DF591293449491AA6",hash_generated_method="09CF06890A0238BCB3134F67E4117897") public int show(FragmentTransaction transaction,String tag){  mDismissed=false;  mShownByMe=true;  transaction.add(this,tag);  mViewDestroyed=false;  mBackStackId=transaction.commit();  return mBackStackId;}  }
class C{  public Portfolio findPortfolioById(final Integer id) throws PersistentModelException {  Portfolio instance=m_portfolioHome.findById(id);  if (null == instance)   throw new PersistentModelException("Portfolio not found for id: " + id);  return instance;}  }
class C{  private void completeSpan(int i,int j){  PriorityQueue<CubePruneState> candidates=new PriorityQueue<>();  for (int g=0; g < grammars.length; g++) {    if (!grammars[g].hasRuleForSpan(i,j,inputLattice.distance(i,j)) || null == dotcharts[g].getDotCell(i,j))     continue;    for (    DotNode dotNode : dotcharts[g].getDotCell(i,j).getDotNodes()) {      RuleCollection ruleCollection=dotNode.getRuleCollection();      if (ruleCollection == null)       continue;      List<Rule> rules=ruleCollection.getSortedRules(this.featureFunctions);      SourcePath sourcePath=dotNode.getSourcePath();      if (null == rules || rules.size() == 0)       continue;      if (ruleCollection.getArity() == 0) {        int numTranslationsAdded=0;        for (        Rule rule : rules) {          if (config.num_translation_options > 0 && numTranslationsAdded >= config.num_translation_options) {            break;          }          ComputeNodeResult result=new ComputeNodeResult(this.featureFunctions,rule,null,i,j,sourcePath,this.sentence);          if (stateConstraint == null || stateConstraint.isLegal(result.getDPStates())) {            getCell(i,j).addHyperEdgeInCell(result,rule,i,j,null,sourcePath,true);            numTranslationsAdded++;          }        }      } else {        Rule bestRule=rules.get(0);        List<HGNode> currentTailNodes=new ArrayList<>();        List<SuperNode> superNodes=dotNode.getAntSuperNodes();        for (        SuperNode si : superNodes) {          currentTailNodes.add(si.nodes.get(0));        }        int[] ranks=new int[1 + superNodes.size()];        Arrays.fill(ranks,1);        ComputeNodeResult result=new ComputeNodeResult(featureFunctions,bestRule,currentTailNodes,i,j,sourcePath,sentence);        CubePruneState bestState=new CubePruneState(result,ranks,rules,currentTailNodes,dotNode);        candidates.add(bestState);      }    }  }  applyCubePruning(i,j,candidates);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y, z;  int progress;  int i, n;  double[][] vertices=null;  int pointNum=0;  int numPoints=0;  int numFeatures;  int oneHundredthTotal;  double neighbourhoodRadius;  ShapeType shapeType, outputShapeType;  List<KdTree.Entry<Double>> results;  double[] entry;  double nodeGapThreshold=5;  int[] parts={0};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  neighbourhoodRadius=Double.parseDouble(args[2]);  nodeGapThreshold=Integer.parseInt(args[3]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    outputShapeType=ShapeType.POLYLINE;    DBFField[] fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("VALUE");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(4);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    int recordNum;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      vertices=record.getGeometry().getPoints();      numPoints=vertices.length;      KdTree<Double> pointsTree=new KdTree.SqrEuclid(2,new Integer(numPoints));      for (i=0; i < numPoints; i++) {        x=vertices[i][0];        y=vertices[i][1];        entry=new double[]{y,x};        z=i;        pointsTree.addPoint(entry,z);      }      ArrayList<ShapefilePoint> pnts=new ArrayList<>();      int lineLength=0;      for (i=0; i < numPoints; i++) {        x=vertices[i][0];        y=vertices[i][1];        entry=new double[]{y,x};        results=pointsTree.neighborsWithinRange(entry,neighbourhoodRadius);        double maxVal=0;        double minVal=numPoints;        double range=0;        double j;        double[] values=new double[results.size()];        int k=0;        for (        KdTree.Entry entry2 : results) {          j=(double)entry2.value;          values[k]=j;          k++;          if (j > maxVal) {            maxVal=j;          }          if (j < minVal) {            minVal=j;          }        }        range=maxVal - minVal;        if (range == numPoints - 1) {          maxVal=0;          minVal=numPoints;          values=new double[results.size()];          k=0;          for (          KdTree.Entry entry2 : results) {            j=(double)entry2.value;            if (j < numPoints / 2) {              j+=numPoints;            }            if (j > maxVal) {              maxVal=j;            }            if (j < minVal) {              minVal=j;            }            values[k]=j;            k++;          }          range=maxVal - minVal;        }        Arrays.sort(values);        double maxGap=0;        for (int a=1; a < k; a++) {          if (values[a] - values[a - 1] > maxGap) {            maxGap=values[a] - values[a - 1];          }        }        if (maxGap >= nodeGapThreshold) {          pnts.add(new ShapefilePoint(x,y));          lineLength++;          if (i == numPoints - 1) {            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbPoly=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            Object[] rowData=new Object[1];            rowData[0]=new Double(recordNum);            output.addRecord(wbPoly,rowData);            pnts.clear();            lineLength=0;          }        } else         if (lineLength > 1) {          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbPoly=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          Object[] rowData=new Object[1];          rowData[0]=new Double(recordNum);          output.addRecord(wbPoly,rowData);          pnts.clear();          lineLength=0;        } else {          pnts.clear();          lineLength=0;        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress(progress);      }    }    output.write();    updateProgress("Displaying vector: ",0);    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void initialize(ResourceManager rm){  this.useStanford=rm.getBoolean(LemmatizerConfigurator.USE_STNFRD_CONVENTIONS.key);  wnLemmaReader=new WordnetLemmaReader(rm.getString(LemmatizerConfigurator.WN_PATH.key));  verbLemmaFile=rm.getString(LemmatizerConfigurator.VERB_LEMMA_FILE.key);  exceptionsFile=rm.getString(LemmatizerConfigurator.EXCEPTIONS_FILE.key);  loadVerbMap();  loadExceptionMap();  contractions=new HashMap<>();  contractions.put("'d","have");  contractions.put("'ll","will");  contractions.put("'s","'s");  contractions.put("'re","be");  contractions.put("'m","be");  contractions.put("'ve","have");  toStanford=new HashMap<>();  toStanford.put("her","she");  toStanford.put("him","he");  toStanford.put("is","be");  toStanford.put("their","they");  toStanford.put("them","they");  toStanford.put("me","i");  toStanford.put("an","a");}  }
class C{  public static boolean cochransCriterion(double[][] matrix){  double[] rtotal, ctotal;  double n=0, expect, smallfreq=5;  int smallcount=0, nonZeroRows=0, nonZeroColumns=0, nrows, ncols, row, col;  nrows=matrix.length;  ncols=matrix[0].length;  rtotal=new double[nrows];  ctotal=new double[ncols];  for (row=0; row < nrows; row++) {    for (col=0; col < ncols; col++) {      rtotal[row]+=matrix[row][col];      ctotal[col]+=matrix[row][col];      n+=matrix[row][col];    }  }  for (row=0; row < nrows; row++) {    if (Utils.gr(rtotal[row],0)) {      nonZeroRows++;    }  }  for (col=0; col < ncols; col++) {    if (Utils.gr(ctotal[col],0)) {      nonZeroColumns++;    }  }  for (row=0; row < nrows; row++) {    if (Utils.gr(rtotal[row],0)) {      for (col=0; col < ncols; col++) {        if (Utils.gr(ctotal[col],0)) {          expect=(ctotal[col] * rtotal[row]) / n;          if (Utils.sm(expect,smallfreq)) {            if (Utils.sm(expect,1)) {              return false;            } else {              smallcount++;              if (smallcount > (nonZeroRows * nonZeroColumns) / smallfreq) {                return false;              }            }          }        }      }    }  }  return true;}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,new int[]{},new ECBlocks(7,new ECB(1,19)),new ECBlocks(10,new ECB(1,16)),new ECBlocks(13,new ECB(1,13)),new ECBlocks(17,new ECB(1,9))),new Version(2,new int[]{6,18},new ECBlocks(10,new ECB(1,34)),new ECBlocks(16,new ECB(1,28)),new ECBlocks(22,new ECB(1,22)),new ECBlocks(28,new ECB(1,16))),new Version(3,new int[]{6,22},new ECBlocks(15,new ECB(1,55)),new ECBlocks(26,new ECB(1,44)),new ECBlocks(18,new ECB(2,17)),new ECBlocks(22,new ECB(2,13))),new Version(4,new int[]{6,26},new ECBlocks(20,new ECB(1,80)),new ECBlocks(18,new ECB(2,32)),new ECBlocks(26,new ECB(2,24)),new ECBlocks(16,new ECB(4,9))),new Version(5,new int[]{6,30},new ECBlocks(26,new ECB(1,108)),new ECBlocks(24,new ECB(2,43)),new ECBlocks(18,new ECB(2,15),new ECB(2,16)),new ECBlocks(22,new ECB(2,11),new ECB(2,12))),new Version(6,new int[]{6,34},new ECBlocks(18,new ECB(2,68)),new ECBlocks(16,new ECB(4,27)),new ECBlocks(24,new ECB(4,19)),new ECBlocks(28,new ECB(4,15))),new Version(7,new int[]{6,22,38},new ECBlocks(20,new ECB(2,78)),new ECBlocks(18,new ECB(4,31)),new ECBlocks(18,new ECB(2,14),new ECB(4,15)),new ECBlocks(26,new ECB(4,13),new ECB(1,14))),new Version(8,new int[]{6,24,42},new ECBlocks(24,new ECB(2,97)),new ECBlocks(22,new ECB(2,38),new ECB(2,39)),new ECBlocks(22,new ECB(4,18),new ECB(2,19)),new ECBlocks(26,new ECB(4,14),new ECB(2,15))),new Version(9,new int[]{6,26,46},new ECBlocks(30,new ECB(2,116)),new ECBlocks(22,new ECB(3,36),new ECB(2,37)),new ECBlocks(20,new ECB(4,16),new ECB(4,17)),new ECBlocks(24,new ECB(4,12),new ECB(4,13))),new Version(10,new int[]{6,28,50},new ECBlocks(18,new ECB(2,68),new ECB(2,69)),new ECBlocks(26,new ECB(4,43),new ECB(1,44)),new ECBlocks(24,new ECB(6,19),new ECB(2,20)),new ECBlocks(28,new ECB(6,15),new ECB(2,16))),new Version(11,new int[]{6,30,54},new ECBlocks(20,new ECB(4,81)),new ECBlocks(30,new ECB(1,50),new ECB(4,51)),new ECBlocks(28,new ECB(4,22),new ECB(4,23)),new ECBlocks(24,new ECB(3,12),new ECB(8,13))),new Version(12,new int[]{6,32,58},new ECBlocks(24,new ECB(2,92),new ECB(2,93)),new ECBlocks(22,new ECB(6,36),new ECB(2,37)),new ECBlocks(26,new ECB(4,20),new ECB(6,21)),new ECBlocks(28,new ECB(7,14),new ECB(4,15))),new Version(13,new int[]{6,34,62},new ECBlocks(26,new ECB(4,107)),new ECBlocks(22,new ECB(8,37),new ECB(1,38)),new ECBlocks(24,new ECB(8,20),new ECB(4,21)),new ECBlocks(22,new ECB(12,11),new ECB(4,12))),new Version(14,new int[]{6,26,46,66},new ECBlocks(30,new ECB(3,115),new ECB(1,116)),new ECBlocks(24,new ECB(4,40),new ECB(5,41)),new ECBlocks(20,new ECB(11,16),new ECB(5,17)),new ECBlocks(24,new ECB(11,12),new ECB(5,13))),new Version(15,new int[]{6,26,48,70},new ECBlocks(22,new ECB(5,87),new ECB(1,88)),new ECBlocks(24,new ECB(5,41),new ECB(5,42)),new ECBlocks(30,new ECB(5,24),new ECB(7,25)),new ECBlocks(24,new ECB(11,12),new ECB(7,13))),new Version(16,new int[]{6,26,50,74},new ECBlocks(24,new ECB(5,98),new ECB(1,99)),new ECBlocks(28,new ECB(7,45),new ECB(3,46)),new ECBlocks(24,new ECB(15,19),new ECB(2,20)),new ECBlocks(30,new ECB(3,15),new ECB(13,16))),new Version(17,new int[]{6,30,54,78},new ECBlocks(28,new ECB(1,107),new ECB(5,108)),new ECBlocks(28,new ECB(10,46),new ECB(1,47)),new ECBlocks(28,new ECB(1,22),new ECB(15,23)),new ECBlocks(28,new ECB(2,14),new ECB(17,15))),new Version(18,new int[]{6,30,56,82},new ECBlocks(30,new ECB(5,120),new ECB(1,121)),new ECBlocks(26,new ECB(9,43),new ECB(4,44)),new ECBlocks(28,new ECB(17,22),new ECB(1,23)),new ECBlocks(28,new ECB(2,14),new ECB(19,15))),new Version(19,new int[]{6,30,58,86},new ECBlocks(28,new ECB(3,113),new ECB(4,114)),new ECBlocks(26,new ECB(3,44),new ECB(11,45)),new ECBlocks(26,new ECB(17,21),new ECB(4,22)),new ECBlocks(26,new ECB(9,13),new ECB(16,14))),new Version(20,new int[]{6,34,62,90},new ECBlocks(28,new ECB(3,107),new ECB(5,108)),new ECBlocks(26,new ECB(3,41),new ECB(13,42)),new ECBlocks(30,new ECB(15,24),new ECB(5,25)),new ECBlocks(28,new ECB(15,15),new ECB(10,16))),new Version(21,new int[]{6,28,50,72,94},new ECBlocks(28,new ECB(4,116),new ECB(4,117)),new ECBlocks(26,new ECB(17,42)),new ECBlocks(28,new ECB(17,22),new ECB(6,23)),new ECBlocks(30,new ECB(19,16),new ECB(6,17))),new Version(22,new int[]{6,26,50,74,98},new ECBlocks(28,new ECB(2,111),new ECB(7,112)),new ECBlocks(28,new ECB(17,46)),new ECBlocks(30,new ECB(7,24),new ECB(16,25)),new ECBlocks(24,new ECB(34,13))),new Version(23,new int[]{6,30,54,78,102},new ECBlocks(30,new ECB(4,121),new ECB(5,122)),new ECBlocks(28,new ECB(4,47),new ECB(14,48)),new ECBlocks(30,new ECB(11,24),new ECB(14,25)),new ECBlocks(30,new ECB(16,15),new ECB(14,16))),new Version(24,new int[]{6,28,54,80,106},new ECBlocks(30,new ECB(6,117),new ECB(4,118)),new ECBlocks(28,new ECB(6,45),new ECB(14,46)),new ECBlocks(30,new ECB(11,24),new ECB(16,25)),new ECBlocks(30,new ECB(30,16),new ECB(2,17))),new Version(25,new int[]{6,32,58,84,110},new ECBlocks(26,new ECB(8,106),new ECB(4,107)),new ECBlocks(28,new ECB(8,47),new ECB(13,48)),new ECBlocks(30,new ECB(7,24),new ECB(22,25)),new ECBlocks(30,new ECB(22,15),new ECB(13,16))),new Version(26,new int[]{6,30,58,86,114},new ECBlocks(28,new ECB(10,114),new ECB(2,115)),new ECBlocks(28,new ECB(19,46),new ECB(4,47)),new ECBlocks(28,new ECB(28,22),new ECB(6,23)),new ECBlocks(30,new ECB(33,16),new ECB(4,17))),new Version(27,new int[]{6,34,62,90,118},new ECBlocks(30,new ECB(8,122),new ECB(4,123)),new ECBlocks(28,new ECB(22,45),new ECB(3,46)),new ECBlocks(30,new ECB(8,23),new ECB(26,24)),new ECBlocks(30,new ECB(12,15),new ECB(28,16))),new Version(28,new int[]{6,26,50,74,98,122},new ECBlocks(30,new ECB(3,117),new ECB(10,118)),new ECBlocks(28,new ECB(3,45),new ECB(23,46)),new ECBlocks(30,new ECB(4,24),new ECB(31,25)),new ECBlocks(30,new ECB(11,15),new ECB(31,16))),new Version(29,new int[]{6,30,54,78,102,126},new ECBlocks(30,new ECB(7,116),new ECB(7,117)),new ECBlocks(28,new ECB(21,45),new ECB(7,46)),new ECBlocks(30,new ECB(1,23),new ECB(37,24)),new ECBlocks(30,new ECB(19,15),new ECB(26,16))),new Version(30,new int[]{6,26,52,78,104,130},new ECBlocks(30,new ECB(5,115),new ECB(10,116)),new ECBlocks(28,new ECB(19,47),new ECB(10,48)),new ECBlocks(30,new ECB(15,24),new ECB(25,25)),new ECBlocks(30,new ECB(23,15),new ECB(25,16))),new Version(31,new int[]{6,30,56,82,108,134},new ECBlocks(30,new ECB(13,115),new ECB(3,116)),new ECBlocks(28,new ECB(2,46),new ECB(29,47)),new ECBlocks(30,new ECB(42,24),new ECB(1,25)),new ECBlocks(30,new ECB(23,15),new ECB(28,16))),new Version(32,new int[]{6,34,60,86,112,138},new ECBlocks(30,new ECB(17,115)),new ECBlocks(28,new ECB(10,46),new ECB(23,47)),new ECBlocks(30,new ECB(10,24),new ECB(35,25)),new ECBlocks(30,new ECB(19,15),new ECB(35,16))),new Version(33,new int[]{6,30,58,86,114,142},new ECBlocks(30,new ECB(17,115),new ECB(1,116)),new ECBlocks(28,new ECB(14,46),new ECB(21,47)),new ECBlocks(30,new ECB(29,24),new ECB(19,25)),new ECBlocks(30,new ECB(11,15),new ECB(46,16))),new Version(34,new int[]{6,34,62,90,118,146},new ECBlocks(30,new ECB(13,115),new ECB(6,116)),new ECBlocks(28,new ECB(14,46),new ECB(23,47)),new ECBlocks(30,new ECB(44,24),new ECB(7,25)),new ECBlocks(30,new ECB(59,16),new ECB(1,17))),new Version(35,new int[]{6,30,54,78,102,126,150},new ECBlocks(30,new ECB(12,121),new ECB(7,122)),new ECBlocks(28,new ECB(12,47),new ECB(26,48)),new ECBlocks(30,new ECB(39,24),new ECB(14,25)),new ECBlocks(30,new ECB(22,15),new ECB(41,16))),new Version(36,new int[]{6,24,50,76,102,128,154},new ECBlocks(30,new ECB(6,121),new ECB(14,122)),new ECBlocks(28,new ECB(6,47),new ECB(34,48)),new ECBlocks(30,new ECB(46,24),new ECB(10,25)),new ECBlocks(30,new ECB(2,15),new ECB(64,16))),new Version(37,new int[]{6,28,54,80,106,132,158},new ECBlocks(30,new ECB(17,122),new ECB(4,123)),new ECBlocks(28,new ECB(29,46),new ECB(14,47)),new ECBlocks(30,new ECB(49,24),new ECB(10,25)),new ECBlocks(30,new ECB(24,15),new ECB(46,16))),new Version(38,new int[]{6,32,58,84,110,136,162},new ECBlocks(30,new ECB(4,122),new ECB(18,123)),new ECBlocks(28,new ECB(13,46),new ECB(32,47)),new ECBlocks(30,new ECB(48,24),new ECB(14,25)),new ECBlocks(30,new ECB(42,15),new ECB(32,16))),new Version(39,new int[]{6,26,54,82,110,138,166},new ECBlocks(30,new ECB(20,117),new ECB(4,118)),new ECBlocks(28,new ECB(40,47),new ECB(7,48)),new ECBlocks(30,new ECB(43,24),new ECB(22,25)),new ECBlocks(30,new ECB(10,15),new ECB(67,16))),new Version(40,new int[]{6,30,58,86,114,142,170},new ECBlocks(30,new ECB(19,118),new ECB(6,119)),new ECBlocks(28,new ECB(18,47),new ECB(31,48)),new ECBlocks(30,new ECB(34,24),new ECB(34,25)),new ECBlocks(30,new ECB(20,15),new ECB(61,16)))};}  }
class C{  public static void addAllBeansToContainer(JComponent container,Integer... tab){  int index=0;  if (tab.length > 0) {    index=tab[0].intValue();  }  Vector<Object> components=null;  if (TABBED_COMPONENTS.size() > 0 && index < TABBED_COMPONENTS.size()) {    components=TABBED_COMPONENTS.get(index);  }  if (container != null) {    if (components != null) {      for (int i=0; i < components.size(); i++) {        BeanInstance tempInstance=(BeanInstance)components.elementAt(i);        Object tempBean=tempInstance.getBean();        if (Beans.isInstanceOf(tempBean,JComponent.class)) {          container.add((JComponent)tempBean);        }      }    }    container.revalidate();  }}  }
class C{  public Set<EventBean> lookup(Object[] keys){  for (int i=0; i < keys.length; i++) {    Class coercionType=coercionTypes[i];    Object key=keys[i];    if ((key != null) && (!key.getClass().equals(coercionType))) {      if (key instanceof Number) {        key=JavaClassHelper.coerceBoxed((Number)key,coercionTypes[i]);        keys[i]=key;      }    }  }  MultiKeyUntyped key=new MultiKeyUntyped(keys);  return propertyIndex.get(key);}  }
class C{  public static void HANDLER_BEGIN(int access,String className,String methName,String methDesc){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.HANDLER_BEGIN(access,className,methName,methDesc);  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public Date(String date){  this(date,null);}  }
class C{  public final CC skip(){  setSkip(1);  return this;}  }
class C{  public static InetAddress toInetAddress(String host){  if (host == null || host.length() == 0) {    return null;  }  try {    if (host.indexOf("/") > -1) {      return InetAddress.getByName(host.substring(host.indexOf("/") + 1));    } else {      return InetAddress.getByName(host);    }  } catch (  java.net.UnknownHostException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  private boolean handleHostsAvailabilityError(Throwable e,int attempt,String msg){  if (attempt >= CQL_EXECUTION_ATTEMPTS_COUNT) {    log.error("Host availability problem detected. " + "Number of CQL execution attempts reached maximum " + CQL_EXECUTION_ATTEMPTS_COUNT + ", exception will be thrown to upper execution layer.",e);    throw msg == null ? new IgniteException(e) : new IgniteException(msg,e);  }  if (attempt == CQL_EXECUTION_ATTEMPTS_COUNT / 4 || attempt == CQL_EXECUTION_ATTEMPTS_COUNT / 2 || attempt == CQL_EXECUTION_ATTEMPTS_COUNT / 2 + CQL_EXECUTION_ATTEMPTS_COUNT / 4 || attempt == CQL_EXECUTION_ATTEMPTS_COUNT - 1) {    log.warning("Host availability problem detected, CQL execution attempt  " + (attempt + 1) + ", "+ "refreshing Cassandra session",e);    refresh();    log.warning("Cassandra session refreshed");    return true;  }  log.warning("Host availability problem detected, CQL execution attempt " + (attempt + 1) + ", "+ "sleeping extra "+ CQL_EXECUTION_ATTEMPT_MAX_TIMEOUT+ " milliseconds",e);  try {    Thread.sleep(CQL_EXECUTION_ATTEMPT_MAX_TIMEOUT);  } catch (  InterruptedException ignored) {  }  log.warning("Sleep completed");  return false;}  }
class C{  public void write(int b) throws IOException {  out.write(b);  cksum.update(b);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:45.758 -0500",hash_original_method="87D1D2444773B04D6FA2D1565794C0F5",hash_generated_method="2B5FD71D725A8C7BA746FC6FE649BBBD") @Override protected void tearDown() throws Exception {  shutdownService();  mService=null;  scrubClass(ServiceTestCase.class);  super.tearDown();}  }
class C{  public static String plus(Number value,String right){  return DefaultGroovyMethods.toString(value) + right;}  }
class C{  public static void updateProperty(Configuration conf,String prefix,String alternativePrefix,String key,Properties props,String propsKey,boolean required) throws ConfigurationParseException {  String val=conf.get(prefix + key);  if (val == null) {    val=conf.get(alternativePrefix + key);    LOG.trace("Trying alternative key {}{}",alternativePrefix,key);  }  if (required && val == null) {    throw new ConfigurationParseException("Missing mandatory configuration: " + key);  }  if (val != null) {    props.setProperty(propsKey,val.trim());  }}  }
class C{  protected final void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){  PropertyChangeSupport aChangeSupport=this.changeSupport;  if (aChangeSupport == null) {    return;  }  aChangeSupport.firePropertyChange(propertyName,oldValue,newValue);}  }
class C{  protected Command(final String name){  assert ((name != null) && (name.length() > 0)) : "The parameter 'name' must not be null or empty";  this._name=name;  this._variables=new HashMap<String,List>();}  }
class C{  public Builder topic(String topic){  this.topic=topic;  return this;}  }
class C{  @Override public void writeMap(OutputStreamWriter writer,OsmMap mapData,BoundingBox bb){  osmReader.writeMap(writer,mapData,bb);}  }
class C{  private void swim(int i){  Node<Key> x=nodes[i];  Node<Key> parent=x.parent;  if (parent != null && greater(parent.key,x.key)) {    exchange(x,parent);    swim(i);  }}  }
class C{  public static void closeOthers(final JGraphTab graphTab,final CGraphPanel panel){  final List<CGraphPanel> graphs=new ArrayList<CGraphPanel>();  for (int i=0; i < graphTab.getTabCount(); i++) {    final CGraphPanel currentPanel=((CGraphPanel)graphTab.getComponentAt(i));    if (currentPanel != panel) {      graphs.add(currentPanel);    }  }  close(SwingUtilities.getWindowAncestor(graphTab),graphs);}  }
class C{  @Override public void onClick(View v){  if (v.getId() == R.id.button_restart_drag) {    restartMeasurement();    return;  }  if (v.getId() == R.id.button_start_drag) {    startMeasurement();    return;  }  if (v.getId() == R.id.button_finish_drag) {    finishAndShowStats();    return;  }}  }
class C{  public DTEDFrameCache(int max_size){  super(max_size);}  }
class C{  protected void createDefaultVMDeathRequest(){}  }
class C{  @Override public String toString(){  if (m_root == null) {    return "No classifier built";  }  return "PART decision list\n------------------\n\n" + m_root.toString();}  }
class C{  public boolean isFailover(){  return mIsFailover;}  }
class C{  public static double[] product(double[][] A,double[] v){  double[][] B=new double[1][];  B[0]=v;  return transpose(product(A,transpose(B)))[0];}  }
class C{  public AsyncToken<T> post(final URL url,final HttpPostRequest request,final HttpResponseStrategy<T> responseStrategy){  return this.sendRequest(url,null,responseStrategy);}  }
class C{  public static void insert(TextEdit parent,TextEdit edit){  TextChangeCompatibility.insert(parent,edit);}  }
class C{  public body addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public static float calculateBottom(float left,float top,float right,float targetAspectRatio){  final float width=right - left;  final float bottom=(width / targetAspectRatio) + top;  return bottom;}  }
class C{  public static boolean checkProfanity(String text){  if ((text == null) || text.isEmpty()) {    return false;  }  String lowerText=text.toLowerCase();  for (  String profanity : profanityMap.keySet()) {    if (lowerText.indexOf(profanity) != -1) {      TextStream stream=new TextStream(lowerText);      while (!stream.atEnd()) {        String word=stream.nextWord();        if (word != null) {          if (profanityMap.containsKey(word)) {            return true;          }        }      }      return false;    }  }  return false;}  }
class C{  private void processOS2Table(Font font){  Os2Table os2=font.getOS2Table();  if (os2 != null) {    if (!forceAscii) {      int winAscent=os2.getWinAscent();      ascent=(short)Math.rint(winAscent * emScale * (useTwips ? SwfConstants.TWIPS_PER_PIXEL : 1));      int winDescent=os2.getWinDescent();      descent=(short)Math.rint(winDescent * emScale * (useTwips ? SwfConstants.TWIPS_PER_PIXEL : 1));      int winLeading=os2.getTypoLineGap();      lineGap=(short)Math.rint(winLeading * emScale * (useTwips ? SwfConstants.TWIPS_PER_PIXEL : 1));    }    horizAdvanceX=os2.getAvgCharWidth();    panose=os2.getPanose().toString();    usFirstCharIndex=os2.getFirstCharIndex();  } else {    if (Trace.font)     Trace.trace("Font " + fontFamily + " did not have an OS/2 Table.");  }}  }
class C{  private boolean supportsCoreAttributes(){  return ((id != TAG_STYLE) && (id != TAG_META) && (id != TAG_HEAD)&& (id != TAG_HTML)&& (id != TAG_TITLE)&& (id != TAG_PARAM)&& (id != TAG_BASE));}  }
class C{  public Builder inputText(String text){  Validator.notNull(text,"text cannot be null");  if (input == null) {    input=new HashMap<String,Object>();  }  input.put(TEXT,text);  return this;}  }
class C{  public static void clearForcedUpdateVersion(){  if (ensureInitialized()) {    preferences.clearForcedUpdateVersion();  }}  }
class C{  private boolean isTheSame(int[] arr,int n1,int n2,int n3){  return (arr[0] == n1) && (arr[1] == n2) && (arr[2] == n3);}  }
class C{  public float distance(Vector3 point){  return normal.dot(point) + d;}  }
class C{  private static Pointer computePointer(ByteBuffer buffer){  Pointer result=null;  if (buffer.isDirect()) {    int oldPosition=buffer.position();    buffer.position(0);    result=Pointer.to(buffer.slice()).withByteOffset(oldPosition * Sizeof.BYTE);    buffer.position(oldPosition);  } else   if (buffer.hasArray()) {    ByteBuffer t=ByteBuffer.wrap(buffer.array());    int elementOffset=buffer.position() + buffer.arrayOffset();    result=Pointer.to(t).withByteOffset(elementOffset * Sizeof.BYTE);  }  return result;}  }
class C{  public boolean addSeparateAndConquerLevel(String individualRegex,int jobId,boolean convertToUnmatch,boolean isFlagging){  boolean modified=false;  DataSet oldDataset=this.getLastSeparateAndConquerDataSet(jobId);  DataSet dataset=oldDataset.reduceSeparateAndConquerDataset(individualRegex,convertToUnmatch,isFlagging);  dataset.updateStats();  modified=(dataset.getNumberMatches() != oldDataset.getNumberMatches());  this.getSeparateAndConquerLevels(jobId).add(dataset);  if (this.getStripedDataset() != null) {    modified=this.getStripedDataset().addSeparateAndConquerLevel(individualRegex,jobId,convertToUnmatch,isFlagging) || modified;  }  return modified;}  }
class C{  final TreeNode<K,V> find(int h,Object k,Class<?> kc){  TreeNode<K,V> p=this;  do {    int ph, dir;    K pk;    TreeNode<K,V> pl=p.left, pr=p.right, q;    if ((ph=p.hash) > h)     p=pl; else     if (ph < h)     p=pr; else     if ((pk=p.key) == k || (k != null && k.equals(pk)))     return p; else     if (pl == null)     p=pr; else     if (pr == null)     p=pl; else     if ((kc != null || (kc=comparableClassFor(k)) != null) && (dir=compareComparables(kc,k,pk)) != 0)     p=(dir < 0) ? pl : pr; else     if ((q=pr.find(h,k,kc)) != null)     return q; else     p=pl;  } while (p != null);  return null;}  }
class C{  private DiskState mapVolumeToDiskState(Volume volume,String parentComputeLink,String resourcePoolLink,String authCredentialsLink,List<String> tenantLinks){  DiskState diskState=new DiskState();  diskState.id=volume.getVolumeId();  diskState.name=volume.getVolumeId();  diskState.capacityMBytes=volume.getSize() * GB_TO_MB_MULTIPLIER;  diskState.zoneId=volume.getAvailabilityZone();  diskState.authCredentialsLink=authCredentialsLink;  diskState.resourcePoolLink=resourcePoolLink;  diskState.tenantLinks=tenantLinks;  if (volume.getCreateTime() != null) {    diskState.creationTimeMicros=TimeUnit.MILLISECONDS.toMicros(volume.getCreateTime().getTime());  }  mapAttachmentState(diskState,volume);  mapDiskType(diskState,volume);  mapCustomProperties(diskState,volume);  return diskState;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void checkNewData(SupportBaseView testChildView,EventBean[] expectedValues){  EventBean[] newData=testChildView.getLastNewData();  EPAssertionUtil.assertEqualsExactOrder(expectedValues,newData);  testChildView.clearLastNewData();}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  private void placePlaylistTextField(){  showTableInfoPane();  if (!playlistInfoGridPane.getChildren().contains(playlistTitleTextField)) {    playlistInfoGridPane.getChildren().remove(playlistTitleLabel);    playlistInfoGridPane.add(playlistTitleTextField,0,0);    playlistTitleTextField.requestFocus();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private List<Token> tokenize(String urlString) throws IOException {  try {    URL url=new URL(urlString);    if (parts != null && !parts.isEmpty()) {      List<Token> tokens=new ArrayList<>();      for (      URLPart part : parts) {        tokens.addAll(tokenize(url,part));      }      return tokens;    }    Set<Token> tokens=new HashSet<>();    for (    URLPart urlPart : URLPart.values()) {      tokens.addAll(tokenize(url,urlPart));    }    tokens.addAll(tokenizeSpecial(url));    return Lists.newArrayList(tokens);  } catch (  MalformedURLException e) {    if (allowMalformed) {      if (tokenizeMalformed && parts != null && !parts.isEmpty()) {        return tokenizePartsMalformed(urlString,parts);      }      return tokenizeMalformed(urlString,(parts == null || parts.isEmpty()) ? null : URLPart.WHOLE);    }    throw new IOException("Malformed URL: " + urlString,e);  }}  }
class C{  public void testFailureWithFailureThreshold(){  CircuitBreaker breaker=new CircuitBreaker().withFailureThreshold(3);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  for (int i=0; i < 3; i++) {    assertFalse(breaker.isOpen());    assertFalse(breaker.isClosed());    state.recordFailure();  }  assertTrue(breaker.isOpen());}  }
class C{  public ZoomInTool(){  this(CursorTool.ANY_BUTTON);}  }
class C{  public void removeActionListener(ActionListener l){  dispatcher.removeListener(l);}  }
class C{  private void readChatWeChatMessages(){  if (Cfg.DEBUG) {    Check.log(TAG + " (readChatMessages)");  }  if (!readChatSemaphore.tryAcquire()) {    if (Cfg.DEBUG) {      Check.log(TAG + " (readChatMessages), semaphore red");    }    return;  }  try {    boolean updateMarkup=false;    String dbEncFile=M.e("EnMicroMsg.db");    String dbFile=M.e("MicroMsg.db");    String dbDir="";    lastLine=markup.unserialize(new Long(0));    boolean ret=Path.unprotect(M.e("/data/data/com.tencent.mm/MicroMsg/"),2,false);    if (!ret) {      if (Cfg.DEBUG) {        Check.log(TAG + " (readChatWeChatMessages) Error: cannot unprotect wechat");      }      return;    }    File fList=new File(M.e("/data/data/com.tencent.mm/MicroMsg/"));    File[] files=fList.listFiles();    for (    File f : files) {      if (f.isDirectory() && f.getName().length() == 32) {        dbDir=f.getName();        break;      }    }    if (dbDir.length() == 0) {      if (Cfg.DEBUG) {        Check.log(TAG + " (readChatWhatsappMessages): Database directory not found");      }      return;    }    dbDir=M.e("/data/data/com.tencent.mm/MicroMsg/") + dbDir + "/";    Path.lock(dbDir + dbEncFile);    if (Path.unprotect(dbDir,dbFile,true)) {      if (Cfg.DEBUG) {        Check.log(TAG + " (readChatMessages): can read DB");      }      long newLastLine=0;      GenericSqliteHelper helper=GenericSqliteHelper.openCopy(dbDir,dbFile);      if (helper == null) {        if (Cfg.DEBUG) {          Check.log(TAG + " (readChatMessages) cannot open db");        }        return;      }      try {        setMyAccount(helper);        ChatGroups groups=getChatGroups(helper);        if (ManagerModule.self().isInstancedAgent(ModuleAddressBook.class)) {          saveWechatContacts(helper);        }        newLastLine=fetchMessages(helper,groups,lastLine);      }  finally {        helper.disposeDb();      }      if (newLastLine > lastLine) {        if (Cfg.DEBUG) {          Check.log(TAG + " (readChatMessages): updating markup");        }        try {          markup.writeMarkupSerializable(new Long(newLastLine));        } catch (        IOException e) {          if (Cfg.DEBUG) {            Check.log(TAG + " (readChatWeChatMessages) Error: " + e);          }        }      }    } else {      if (Cfg.DEBUG) {        Check.log(TAG + " (readChatMessages) Error, file not readable: " + dbFile);      }    }  } catch (  Exception ex) {    if (Cfg.DEBUG) {      Check.log(TAG + " (readChatWeChatMessages) Error: ",ex);    }  } finally {    readChatSemaphore.release();  }}  }
class C{  public boolean shaded(int loc,int numHit){switch (loc) {case LOC_HEAD:case LOC_LARM:case LOC_RARM:    return (2 == numHit);case LOC_TORSO:  return (0 < numHit);case LOC_MAINGUN:case LOC_NMISS:return false;case LOC_LEG:return (3 == numHit);}return false;}  }
class C{  public int lastIndexOf(int offset,int value){  for (int i=offset; i-- > 0; ) {    if (_data[i] == value) {      return i;    }  }  return -1;}  }
class C{  public void testMultipleLogsFiltered() throws Exception {  File logDir=prepareLogDir("testMultipleLogsFiltered");  DiskLog log=openLog(logDir,false,1000);  LogConnection conn=log.connect(false);  long seqno=0;  for (int i=0; i < 100; i++) {    THLEvent fe=this.createFilteredTHLEvent(seqno,seqno + 4,(short)0);    conn.store(fe,false);    seqno+=5;  }  conn.store(createFilteredTHLEvent(seqno,seqno,(short)0),false);  conn.commit();  conn.release();  logger.info("Log file count: " + log.fileCount());  assertTrue("More than one log file",log.fileCount() > 1);  log.release();  DiskLog log2=openLog(logDir,true);  LogConnection conn2=log2.connect(true);  assertTrue("Find first filtered event",conn2.seek(0));  for (int i=0; i < 100; i++) {    THLEvent e=conn2.next(false);    long start=i * 5;    long end=start + 4;    validateFilteredEvent(e,start,end);    ReplDBMSFilteredEvent fe=(ReplDBMSFilteredEvent)e.getReplEvent();    logger.info("Found filtered event: start=" + fe.getSeqno() + " end="+ fe.getSeqnoEnd());    if (i > 0 && i % 100 == 0)     logger.info("Reading filtered events from disk: start=" + start + " end="+ end);  }  THLEvent e2=conn2.next(false);  validateFilteredEvent(e2,seqno,seqno);  for (int i=0; i < 100; i++) {    long start=i * 5;    long end=start + 4;    for (long j=start; j <= end; j++) {      assertTrue("Find filtered event for seqno: " + j,conn2.seek(j));      THLEvent e=conn2.next(false);      validateFilteredEvent(e,start,end);      if (j > 0 && j % 250 == 0)       logger.info("Seeking single filtered events from disk: seqno=" + j + " start="+ start+ " end="+ end);    }  }  assertTrue("Find last filtered event for seqno: " + seqno,conn2.seek(seqno));  THLEvent e3=conn2.next(false);  validateFilteredEvent(e3,seqno,seqno);  log2.release();}  }
class C{  public FieldProposalInfo(CompletionProposal proposal,String projectId,String docContext,String vfsId){  super(proposal,projectId,docContext,vfsId);}  }
class C{  public CCodeNodeComments(final CCodeNode codeNode,final INaviFunction parentFunction,final List<IComment> localComments,final ListenerProvider<INaviCodeNodeListener> listeners,final SQLProvider provider){  m_codeNode=Preconditions.checkNotNull(codeNode,"IE02391: codeNode argument can not be null");  m_provider=Preconditions.checkNotNull(provider,"IE02392: provider argument can not be null");  m_parentFunction=parentFunction;  m_listeners=listeners;  CommentManager.get(m_provider).addListener(m_internalCommentListener);  if ((localComments != null) && !localComments.isEmpty()) {    CommentManager.get(m_provider).initializeLocalCodeNodeComment(m_codeNode,localComments);  }}  }
class C{  public ObjectFactory(){}  }
class C{  public static Object[][] formObjectArray(double[][] data){  Object[][] object=new Double[data.length][data[0].length];  for (int i=0; i < object.length; i++) {    for (int j=0; j < object[i].length; j++) {      object[i][j]=new Double(data[i][j]);    }  }  return object;}  }
class C{  private void registerEventHandler(){  if (editor != null) {    editor.addPropertyChangeListener(new WeakPropertyChangeListener(eventHandler));  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void writeBinaryFile(File file,InputStream in) throws IOException {  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));  in=new BufferedInputStream(in);  try {    streamOutput(in,out);  }  finally {    out.close();  }}  }
class C{  private boolean isReversal(){  return m_reversal;}  }
class C{  public void updateArc(int x1,int y1,int w,int h,float s,float e,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkArc.write(x1,y1,w,h,s,e,properties,link.dos);}  }
class C{  @Override public Query createSpatialQuery(QParser parser,SpatialOptions options){  String[] pointStrs=parseCommaSeparatedList(options.pointStr,dimension);  double[] point=new double[dimension];  try {    for (int i=0; i < pointStrs.length; i++) {      point[i]=Double.parseDouble(pointStrs[i]);    }  } catch (  NumberFormatException e) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);  }  IndexSchema schema=parser.getReq().getSchema();  if (dimension == 1) {    String lower=String.valueOf(point[0] - options.distance);    String upper=String.valueOf(point[0] + options.distance);    SchemaField subSF=subField(options.field,0,schema);    return subSF.getType().getRangeQuery(parser,subSF,lower,upper,true,true);  } else {    BooleanQuery tmp=new BooleanQuery();    double[] ur=vectorBoxCorner(point,null,options.distance,true);    double[] ll=vectorBoxCorner(point,null,options.distance,false);    for (int i=0; i < ur.length; i++) {      SchemaField subSF=subField(options.field,i,schema);      Query range=subSF.getType().getRangeQuery(parser,subSF,String.valueOf(ll[i]),String.valueOf(ur[i]),true,true);      tmp.add(range,BooleanClause.Occur.MUST);    }    return tmp;  }}  }
class C{  ByteWrapper genToken(Key nodeId,InetAddress ip,int port,Key lookupKey){  updateTokenTimestamps();  byte[] tdata=new byte[Key.SHA1_HASH_LENGTH + ip.getAddress().length + 2+ 8+ Key.SHA1_HASH_LENGTH+ sessionSecret.length];  ByteBuffer bb=ByteBuffer.wrap(tdata);  nodeId.toBuffer(bb);  bb.put(ip.getAddress());  bb.putShort((short)port);  bb.putLong(timestampCurrent.get());  lookupKey.toBuffer(bb);  bb.put(sessionSecret);  byte[] token=Arrays.copyOf(ThreadLocalUtils.getThreadLocalSHA1().digest(tdata),4);  return new ByteWrapper(token);}  }
class C{  public String serialize(byte version){  return Base64.encodeBase64String(serializeBytes(version));}  }
class C{  @Override public void truncate(int size,Comparator<? super Solution> comparator){  if (size() > size) {    updateIdealPoint();    translateByIdealPoint();    normalizeByIntercepts(calculateIntercepts());    sort(new RankComparator());    int maxRank=(Integer)super.get(size - 1).getAttribute(RANK_ATTRIBUTE);    Population front=new Population();    for (int i=0; i < size(); i++) {      int rank=(Integer)get(i).getAttribute(RANK_ATTRIBUTE);      if (rank >= maxRank) {        front.add(get(i));      }    }    removeAll(front);    for (int i=front.size() - 1; i >= 0; i--) {      int rank=(Integer)front.get(i).getAttribute(RANK_ATTRIBUTE);      if (rank > maxRank) {        front.remove(i);      }    }    List<List<Solution>> members=associateToReferencePoint(this);    List<List<Solution>> potentialMembers=associateToReferencePoint(front);    Set<Integer> excluded=new HashSet<Integer>();    while (size() < size) {      int minIndex=-1;      int minCount=Integer.MAX_VALUE;      for (int i=0; i < members.size(); i++) {        if (!excluded.contains(i) && (members.get(i).size() < minCount)) {          minIndex=i;          minCount=members.get(i).size();        }      }      if (minCount == 0) {        if (potentialMembers.get(minIndex).isEmpty()) {          excluded.add(minIndex);        } else {          Solution minSolution=findSolutionWithMinimumDistance(potentialMembers.get(minIndex),weights.get(minIndex));          add(minSolution);          members.get(minIndex).add(minSolution);          potentialMembers.get(minIndex).remove(minSolution);        }      } else {        if (potentialMembers.get(minIndex).isEmpty()) {          excluded.add(minIndex);        } else {          Solution randSolution=PRNG.nextItem(potentialMembers.get(minIndex));          add(randSolution);          members.get(minIndex).add(randSolution);          potentialMembers.get(minIndex).remove(randSolution);        }      }    }  }}  }
class C{  public void logError(String message){  getLog().log(new Status(IStatus.ERROR,PLUGIN_ID,message));}  }
class C{  public static int choosePort(){  return choosePorts(1)[0];}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeInt(entries.length);  for (  Entry entry : entries) {    if (entry == null) {      break;    }    entry.writeExternal(out);  }}  }
class C{  public static int compare(String cp1,String cp2){  StringTokenizer p1=new StringTokenizer(cp1,mxCellPath.PATH_SEPARATOR);  StringTokenizer p2=new StringTokenizer(cp2,mxCellPath.PATH_SEPARATOR);  int comp=0;  while (p1.hasMoreTokens() && p2.hasMoreTokens()) {    String t1=p1.nextToken();    String t2=p2.nextToken();    if (!t1.equals(t2)) {      if (t1.length() == 0 || t2.length() == 0) {        comp=t1.compareTo(t2);      } else {        comp=Integer.valueOf(t1).compareTo(Integer.valueOf(t2));      }      break;    }  }  if (comp == 0) {    int t1=p1.countTokens();    int t2=p2.countTokens();    if (t1 != t2) {      comp=(t1 > t2) ? 1 : -1;    }  }  return comp;}  }
class C{  @Inject protected DefaultJPAService(AuditService auditService,SystemConfiguration config){  super(config);  _auditService=auditService;}  }
class C{  @Override protected void internalClear(){  this.removeAllTextures(true);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  protected ModelContext(ModelResourceLocation source,ResourceLocation replacement,String customData,boolean inheritsOverrides,boolean cacheOverrides){  this.source=source;  this.replacement=replacement;  this.customData=customData;  this.inheritOverrides=inheritsOverrides;  this.cacheOverrides=cacheOverrides;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  try {    createSelectionPanel(true,true,true);    m_frame.getContentPane().add(selectionPanel,BorderLayout.NORTH);    createMainPanel();    CScrollPane scroll=new CScrollPane(this);    m_frame.getContentPane().add(scroll,BorderLayout.CENTER);    confirmPanel.addActionListener(this);    m_frame.getContentPane().add(confirmPanel,BorderLayout.SOUTH);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  sizeIt();}  }
class C{  public boolean isCallableConstructor(){  LiteralOrComputedPropertyName _declaredName=this.getDeclaredName();  return (_declaredName == null);}  }
class C{  private static void markActiveParameters(@NotNull PsiPerlCallArgumentsImpl container,PerlParameterInfo[] parameterInfos,int offset){  for (  PerlParameterInfo parameterInfo : parameterInfos) {    parameterInfo.setSelected(false);  }  markActiveparametersRecursively(container.getFirstChild(),parameterInfos,0,offset);}  }
class C{  public BitbucketRepositoryFork forkRepository(@NotNull final String owner,@NotNull final String repositorySlug,@NotNull final String forkName,final boolean isForkPrivate) throws IOException, BitbucketException, ServerException {  checkArgument(!isNullOrEmpty(owner),"owner");  checkArgument(!isNullOrEmpty(repositorySlug),"repositorySlug");  checkArgument(!isNullOrEmpty(forkName),"forkName");  final String url=BITBUCKET_1_0_API_URL + "/repositories/" + owner+ "/"+ repositorySlug+ "/fork";  final String data="name=" + encode(forkName,"UTF-8") + "&is_private="+ isForkPrivate;  final String response=doRequest(POST,url,OK,APPLICATION_FORM_URLENCODED,data);  return parseJsonResponse(response,BitbucketRepositoryFork.class);}  }
class C{  @FlashException public static void deregisterNetworks(String virtualArrayId,@As(",") String[] ids){  if (ids != null) {    Networks.deregisterNetworks(uris(ids));  }  networks(virtualArrayId);}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  oos.defaultWriteObject();  oos.writeInt(index.size());  for (int i=0, sz=index.size(); i < sz; ++i) {    oos.writeUTF(index.get(i));  }}  }
class C{  private void initializeLayout(){  GridLayout gl=new GridLayout(0,2);  gl.setVgap(5);  setLayout(gl);  add(new JLabel("Frozen: "));  add(frozenDD);  add(new JLabel("Upper Bound:"));  add(tfUpBound);  add(new JLabel("Lower Bound"));  add(tfLowBound);  add(new JLabel("Increment:"));  add(tfIncrement);  add(new JLabel("Delay:"));  add(tfDelay);  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));}  }
class C{  public VNXeCommandJob detachSnap(String snapId) throws VNXeException {  StringBuilder urlBuilder=new StringBuilder(URL_INSTANCE);  urlBuilder.append(snapId);  urlBuilder.append(URL_DETACH);  _url=urlBuilder.toString();  return postRequestAsync(null);}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  return getList(baseUrl);}  }
class C{  public static <T>T tryCast(Object object,Class<T> klass){  if (klass.isInstance(object)) {    return CoreUtil.<Object,T>downCast(object);  } else {    return null;  }}  }
class C{  private void checkVersion() throws ResourceInitializationException {  try (Statement s=postgresResource.getConnection().createStatement()){    ResultSet rs=s.executeQuery("SELECT PostGIS_Lib_Version() AS version");    rs.next();    String version=rs.getString("version");    String[] versionParts=version.split("\\.");    Integer majorVersion=Integer.parseInt(versionParts[0]);    if (majorVersion < 2) {      throw new BaleenException("Unsupported PostGIS Version");    }  } catch (  SQLException|NumberFormatException|NullPointerException e) {    getMonitor().error("Unable to retrieve PostGIS version");    throw new ResourceInitializationException(e);  }catch (  BaleenException e) {    throw new ResourceInitializationException(e);  }}  }
class C{  public JHFMRVer2EventReader(Map<String,String> baseTags,Configuration configuration,JobHistoryContentFilter filter){  super(baseTags,configuration,filter);}  }
class C{  private static ArrayList<ArrayList<ArrayList<Integer>>> extractChainProperties(){  String vehicleSource=ROOT + PROVINCE + "/Activities/"+ PROVINCE+ "VehicleStats.txt";  MyVehicleIdentifier mvi=new MyVehicleIdentifier(WITHIN_THRESHOLD,1.0);  List<Integer> withinVehicles=mvi.buildVehicleList(vehicleSource,",");  ArrayList<ArrayList<ArrayList<Integer>>> matrix=new ArrayList<ArrayList<ArrayList<Integer>>>();  for (int a=0; a < dimensionStart; a++) {    ArrayList<ArrayList<Integer>> matrixx=new ArrayList<ArrayList<Integer>>();    for (int b=0; b < dimensionActivities; b++) {      ArrayList<Integer> matrixxx=new ArrayList<Integer>(dimensionDuration);      for (int c=0; c < dimensionDuration; c++) {        matrixxx.add(0);      }      matrixx.add(matrixxx);    }    matrix.add(matrixx);  }  String xmlSource=ROOT + PROVINCE + "/XML/";  File xmlFolder=new File(xmlSource);  assert (xmlFolder.isDirectory()) : "The XML source is not a valid folder!";  System.out.println("Processing XML files...");  int filesProcessed=0;  int processLimit=1;  for (  File file : xmlFolder.listFiles()) {    if (file.isFile() && !file.getName().startsWith(".")) {      int vehicleNumber=Integer.parseInt(file.getName().substring(0,file.getName().indexOf(".")));      if (withinVehicles.contains(vehicleNumber)) {        MyXmlConverter mxc=new MyXmlConverter();        Object obj=mxc.readObjectFromFile(xmlSource + file.getName());        Vehicle vehicle=null;        if (obj instanceof Vehicle) {          vehicle=(Vehicle)obj;        } else {          log.warn("Could not convert vehicle XML file to type: Vehicle!");        }        for (        Chain chain : vehicle.getChains()) {          GregorianCalendar chainStart=chain.getActivities().get(0).getEndTime();          Integer index1=chainStart.get(Calendar.HOUR_OF_DAY);          Integer index2=null;          index2=Math.min(20,chain.getActivities().size() - 2);          Integer index3=null;          GregorianCalendar chainEnd=chain.getActivities().get(chain.getActivities().size() - 1).getStartTime();          Long durationMilliseconds=chainEnd.getTimeInMillis() - chainStart.getTimeInMillis();          Integer durationHours=(int)(durationMilliseconds / (1000 * 60 * 60));          index3=Math.min(47,durationHours);          assert ((index1 != null) && (index2 != null) && (index3 != null)) : "One of the indices are null!!";          int dummy=matrix.get(index1).get(index2).get(index3) + 1;          matrix.get(index1).get(index2).set(index3,dummy);        }      }      if (++filesProcessed == processLimit) {        log.info("   ... Files processed: " + filesProcessed);        processLimit*=2;      }    }  }  log.info("   ... Files processed: " + filesProcessed + " (Done)");  return matrix;}  }
class C{  public void applyEffectors(){  if (effectorsEnabled) {    for (    Effector effector : effectors) {      effector.update();    }  }}  }
class C{  @SuppressWarnings("ConstantConditions") private void prepare(IgniteConfiguration igniteCfg,PlatformDotNetConfigurationEx interopCfg){  cfg=igniteCfg;  try (PlatformMemory outMem=memMgr.allocate()){    try (PlatformMemory inMem=memMgr.allocate()){      PlatformOutputStream out=outMem.output();      GridBinaryMarshaller marshaller=PlatformUtils.marshaller();      BinaryRawWriterEx writer=marshaller.writer(out);      PlatformConfigurationUtils.writeDotNetConfiguration(writer,interopCfg.unwrap());      List<PlatformDotNetLifecycleBean> beans=beans(igniteCfg);      writer.writeInt(beans.size());      for (      PlatformDotNetLifecycleBean bean : beans) {        writer.writeString(bean.getTypeName());        writer.writeMap(bean.getProperties());      }      List<PlatformDotNetAffinityFunction> affFuncs=affinityFunctions(igniteCfg);      writer.writeInt(affFuncs.size());      for (      PlatformDotNetAffinityFunction func : affFuncs) {        writer.writeString(func.getTypeName());        writer.writeMap(func.getProperties());      }      out.synchronize();      gate.extensionCallbackInLongLongOutLong(PlatformUtils.OP_PREPARE_DOT_NET,outMem.pointer(),inMem.pointer());      processPrepareResult(marshaller.reader(inMem.input()));    }   } }  }
class C{  private Map<String,Long> scanRoot(String root){  Map<String,Long> scripts=new TreeMap<String,Long>();  File dir=new File(root);  if (!dir.exists()) {    return scripts;  }  try (DirectoryStream<Path> pathes=Files.newDirectoryStream(dir.toPath())){    for (    Path path : pathes) {      File f=path.toFile();      if (!f.isDirectory() || !f.getParentFile().equals(dir)) {        continue;      }      long period;      try {        period=Long.valueOf(f.getName());        if (period < this.minperiod) {          continue;        }      } catch (      NumberFormatException nfe) {        continue;      }      try (DirectoryStream<Path> subpathes=Files.newDirectoryStream(f.toPath(),"*.mc2")){        for (        Path subpath : subpathes) {          File script=subpath.toFile();          scripts.put(script.getAbsolutePath(),period);        }      } catch (      IOException ioe) {      }    }  } catch (  IOException ioe) {  }  return scripts;}  }
class C{  public PubsubFuture<Void> deleteSubscription(final String canonicalSubscriptionName){  validateCanonicalSubscription(canonicalSubscriptionName);  return delete("delete subscription",canonicalSubscriptionName,Void.class);}  }
class C{  private static PipelineOp addExistsSubqueryFast(PipelineOp left,final SubqueryRoot subqueryRoot,final Set<IVariable<?>> doneSet,final AST2BOpContext ctx){  final boolean usePipelinedHashJoin=usePipelinedHashJoin(ctx,subqueryRoot);switch (subqueryRoot.getQueryType()) {case ASK:    break;default :  throw new UnsupportedOperationException();}@SuppressWarnings("rawtypes") final Map<IConstraint,Set<IVariable<IV>>> needsMaterialization=new LinkedHashMap<IConstraint,Set<IVariable<IV>>>();final IConstraint[] joinConstraints=getJoinConstraints(getJoinConstraints(subqueryRoot),needsMaterialization);final String solutionSetName="--set-" + ctx.nextId();final Set<IVariable<?>> joinVarSet=ctx.sa.getJoinVars(subqueryRoot,new LinkedHashSet<IVariable<?>>());@SuppressWarnings("rawtypes") final IVariable[] joinVars=joinVarSet.toArray(new IVariable[0]);final Set<IVariable<?>> projectInVars=ctx.sa.getMaybeIncomingBindings(subqueryRoot,new LinkedHashSet<IVariable<?>>());final Set<IVariable<?>> spannedVars=ctx.sa.getSpannedVariables(subqueryRoot,new HashSet<IVariable<?>>());projectInVars.retainAll(spannedVars);final IVariable<?>[] projectInVarsArr=projectInVars.toArray(new IVariable<?>[projectInVars.size()]);final INamedSolutionSetRef namedSolutionSet=NamedSolutionSetRefUtility.newInstance(usePipelinedHashJoin ? null : ctx.queryId,solutionSetName,joinVars);final JoinTypeEnum joinType=JoinTypeEnum.Exists;final boolean lastPass=true;final boolean release=lastPass;final IVariable<?> askVar=subqueryRoot.getAskVar();if (askVar == null) throw new UnsupportedOperationException();PipelineOp subqueryPlan=null;if (usePipelinedHashJoin) {subqueryPlan=convertJoinGroupOrUnion(null,subqueryRoot.getWhereClause(),new LinkedHashSet<IVariable<?>>(doneSet),ctx);subqueryPlan=(PipelineOp)subqueryPlan.setProperty(BOp.Annotations.NAMESPACE,ctx.getNamespace());}left=addHashIndexOp(left,usePipelinedHashJoin,ctx,subqueryRoot,joinType,joinVars,joinConstraints,projectInVarsArr,namedSolutionSet,null,askVar,subqueryPlan);if (!usePipelinedHashJoin) {left=convertJoinGroupOrUnion(left,subqueryRoot.getWhereClause(),new LinkedHashSet<IVariable<?>>(doneSet),ctx);}if (!usePipelinedHashJoin) {if (ctx.nativeHashJoins) {  left=applyQueryHints(new HTreeSolutionSetHashJoinOp(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.MAX_PARALLEL,1),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(HTreeSolutionSetHashJoinOp.Annotations.RELEASE,release),new NV(HTreeSolutionSetHashJoinOp.Annotations.LAST_PASS,lastPass),new NV(HTreeSolutionSetHashJoinOp.Annotations.NAMED_SET_REF,namedSolutionSet)),subqueryRoot,ctx);} else {  left=applyQueryHints(new JVMSolutionSetHashJoinOp(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.MAX_PARALLEL,1),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(JVMSolutionSetHashJoinOp.Annotations.RELEASE,release),new NV(JVMSolutionSetHashJoinOp.Annotations.LAST_PASS,lastPass),new NV(JVMSolutionSetHashJoinOp.Annotations.NAMED_SET_REF,namedSolutionSet)),subqueryRoot,ctx);}}doneSet.clear();left=addMaterializationSteps3(left,doneSet,needsMaterialization,subqueryRoot.getQueryHints(),ctx);return left;}  }
class C{  public LibraryFilesTableDataLine createDataLine(){  return new LibraryFilesTableDataLine(this);}  }
class C{  @Override public int hashCode(){  int result;  result=(this.domain != null ? this.domain.hashCode() : 0);  result=29 * result + (this.range != null ? this.range.hashCode() : 0);  result=29 * result + this.data.hashCode();  result=29 * result + this.minStartIndex;  result=29 * result + this.maxStartIndex;  result=29 * result + this.minMiddleIndex;  result=29 * result + this.maxMiddleIndex;  result=29 * result + this.minEndIndex;  result=29 * result + this.maxEndIndex;  return result;}  }
class C{  public Element addElementToRegistry(String hashcode,Element element){  if (hashcode == null || element == null)   return (this);  element.setFilterState(getFilterState());  if (ECSDefaults.getDefaultPrettyPrint() != element.getPrettyPrint())   element.setPrettyPrint(getPrettyPrint());  registry.put(hashcode,element);  if (!registryList.contains(hashcode))   registryList.addElement(hashcode);  return (this);}  }
class C{  public ZoomLevelMaker(){}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.TYPE_ARGUMENT;}  }
class C{  private void createExampleDocument(String authToken) throws Throwable {  ExampleServiceState example=new ExampleServiceState();  example.name=UUID.randomUUID().toString();  URI exampleUri=UriUtils.buildFactoryUri(this.host,ExampleService.class);  Operation examplePost=Operation.createPost(exampleUri).setBody(example).forceRemote().addRequestHeader(Operation.REQUEST_AUTH_TOKEN_HEADER,authToken).setCompletion(this.host.getCompletion());  clearClientCookieJar();  this.host.testStart(1);  this.host.send(examplePost);  this.host.testWait();}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[129];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 144; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }        if ((jj_la1_2[i] & (1 << j)) != 0) {          la1tokens[64 + j]=true;        }        if ((jj_la1_3[i] & (1 << j)) != 0) {          la1tokens[96 + j]=true;        }        if ((jj_la1_4[i] & (1 << j)) != 0) {          la1tokens[128 + j]=true;        }      }    }  }  for (int i=0; i < 129; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  public void itemStateChanged(ItemEvent e){  String pName=(String)e.getItem();  if (e.getStateChange() == ItemEvent.SELECTED) {    this.printerName=pName;  }}  }
class C{  private static void verifyDevice(IDevice d,long mac,Short vlan,Integer ip,long swId,int port){  assertNotNull(d);  assertEquals(mac,d.getMACAddress());  if (vlan == null)   assertArrayEquals(new Short[0],d.getVlanId()); else   assertArrayEquals(new Short[]{vlan},d.getVlanId());  if (ip == null)   assertArrayEquals(new Integer[0],d.getIPv4Addresses()); else   assertArrayEquals(new Integer[]{ip},d.getIPv4Addresses());  SwitchPort expectedAp=new SwitchPort(swId,port);  assertArrayEquals(new SwitchPort[]{expectedAp},d.getAttachmentPoints());}  }
class C{  private void ensureOpen() throws IOException {  if (closed) {    throw new IOException("Stream closed");  }}  }
class C{  public static double mean(long[] values){  double total=0.0;  for (int i=0; i < values.length; i++)   total+=values[i];  return total / values.length;}  }
class C{  public void reset(){  value=0;}  }
class C{  public BinaryFunction(int numArgs,long functionIndex){  this.numArgs=numArgs;  if (functionIndex > getNumFunctions()) {    throw new IllegalArgumentException("Function index out of range " + "for " + numArgs + " arguments.");  }  functionColumn=new int[getNumRows()];  resetFunction(functionIndex);}  }
class C{  protected void drawGridBackground(){  Rect gridBackground=new Rect(mOffsetLeft,mOffsetTop,getWidth() - mOffsetRight,getHeight() - mOffsetBottom);  mDrawCanvas.drawRect(gridBackground,mGridBackgroundPaint);}  }
class C{  private String[] loadCredentials(Context context){  Resources resources=context.getResources();  AssetManager assetManager=resources.getAssets();  String[] creds=new String[2];  try {    InputStream inputStream=assetManager.open("amazon.properties");    Properties properties=new Properties();    properties.load(inputStream);    String publicKey=properties.getProperty("public_key");    String privateKey=properties.getProperty("private_key");    creds[0]=publicKey;    creds[1]=privateKey;  } catch (  IOException e) {    System.err.println("Failed get property file");    e.printStackTrace();  }  return creds;}  }
class C{  public CustomSwitchPreference(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  public JBBPOut Byte(final int... value) throws IOException {  assertNotEnded();  assertArrayNotNull(value);  if (this.processCommands) {    for (    final int v : value) {      _writeByte(v);    }  }  return this;}  }
class C{  public boolean isDsTableMaximized(){  return dsTableMaximized;}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  public static ContentValues values(Restaurant restaurant){  String[] proj={ADDRESS};  String sel=_ID + " = ? OR " + GLOBAL_ID+ " = ?";  String[] args=Elements.toStrings(restaurant.localId,restaurant.globalId);  EasyCursor c=new EasyCursor(cr().query(CONTENT_URI,proj,sel,args,null));  int count=c.getCount();  String address=Cursors.firstString(c);  ContentValues vals=new ContentValues(17);  vals.put(GLOBAL_ID,restaurant.globalId);  vals.put(PLACE_ID,restaurant.placeId);  if (!TextUtils.isEmpty(restaurant.placeId)) {    if (count == 0) {      String name=Strings.nullToEmpty(restaurant.name);      vals.put(NAME,name);      vals.put(NORMALISED_NAME,SQLite.normalise(name));    }  } else {    vals.put(NAME,restaurant.name);    vals.put(NORMALISED_NAME,SQLite.normalise(restaurant.name));    if (!TextUtils.isEmpty(restaurant.address) && !restaurant.address.equals(address)) {      vals.put(ADDRESS,restaurant.address);      vals.put(VICINITY,restaurant.address);      try {        RestaurantGeocodeService.geocode(restaurant.address,vals);      } catch (      IOException e) {        Log.e(TAG,"geocoding restaurant address",e);        exception(e);      }    }    vals.put(INTL_PHONE,restaurant.phone);    vals.put(LOCAL_PHONE,restaurant.phone);    vals.put(URL,restaurant.url);  }  vals.put(NOTES,restaurant.notes);  vals.put(GEOFENCE_NOTIFICATIONS,restaurant.showGeofenceNotifications ? 1 : 0);  vals.put(STATUS_ID,restaurant.status.id);  if (count == 0) {    vals.put(DIRTY,0);  }  return vals;}  }
class C{  public DefaultSocketSessionConfig(){}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.379 -0500",hash_original_method="1E9CEB0E6C412AC753472E7FDFD057DD",hash_generated_method="4B2365B4FEF06CC32036F5F5B1C16B06") public static boolean stateSetMatches(int[] stateSpec,int state){  int stateSpecSize=stateSpec.length;  for (int i=0; i < stateSpecSize; i++) {    int stateSpecState=stateSpec[i];    if (stateSpecState == 0) {      return true;    }    if (stateSpecState > 0) {      if (state != stateSpecState) {        return false;      }    } else {      if (state == -stateSpecState) {        return false;      }    }  }  return true;}  }
class C{  @SuppressWarnings("unchecked") private static Class<VirtualMachine> pickVmImplementation(){  String os=System.getProperty("os.name").toLowerCase(Locale.ENGLISH);  try {    if (os.contains("win")) {      return (Class<VirtualMachine>)AgentLoaderHotSpot.class.getClassLoader().loadClass("sun.tools.attach.WindowsVirtualMachine");    }    if (os.contains("nix") || os.contains("nux") || os.indexOf("aix") > 0) {      return (Class<VirtualMachine>)AgentLoaderHotSpot.class.getClassLoader().loadClass("sun.tools.attach.LinuxVirtualMachine");    }    if (os.contains("mac")) {      return (Class<VirtualMachine>)AgentLoaderHotSpot.class.getClassLoader().loadClass("sun.tools.attach.BsdVirtualMachine");    }    if (os.contains("sunos") || os.contains("solaris")) {      return (Class<VirtualMachine>)AgentLoaderHotSpot.class.getClassLoader().loadClass("sun.tools.attach.SolarisVirtualMachine");    }  } catch (  Exception ex) {    throw new RuntimeException(ex);  }  throw new RuntimeException("Can't find a vm implementation for the operational system: " + System.getProperty("os.name"));}  }
class C{  public double[] dual(){  double[] y=new double[m];  for (int i=0; i < m; i++)   y[i]=-a[m][n + i];  return y;}  }
class C{  @Override public boolean add(T o){  throw new UnsupportedOperationException("cannot add to Empty Ranges");}  }
class C{  public UndoEdit performEdits() throws MalformedTreeException, BadLocationException {  if (!fChecked) {    fRoot.dispatchCheckIntegrity(this);  } else {    if (fException != null)     throw fException;  }  return fRoot.dispatchPerformEdits(this);}  }
class C{  private static double pythonTime(){  return System.currentTimeMillis() / 1000;}  }
class C{  @Override public void truncate(long len) throws SQLException {  throw new SQLException("JDBC 3.0 Method truncate not implemented");}  }
class C{  public final QuadEdge rNext(){  return rot.next.invRot();}  }
class C{  void checkForNewVersion(IgniteLogger log){  assert log != null;  log=log.getLogger(getClass());  try {    cmd.set(new UpdateChecker(log));  } catch (  RejectedExecutionException e) {    U.error(log,"Failed to schedule a thread due to execution rejection (safely ignoring): " + e.getMessage());  }}  }
class C{  public BlockChainConfiguration build(){  return new DefaultBlockChainConfiguration(this);}  }
class C{  @Override @Deprecated public void writeFile(final String filename){  this.mainKml=kmlObjectFactory.createKmlType();  this.mainDoc=kmlObjectFactory.createDocumentType();  this.mainKml.setAbstractFeatureGroup(kmlObjectFactory.createDocument(mainDoc));  createStyles();  this.mainFolder=kmlObjectFactory.createFolderType();  this.mainFolder.setName("Comparison, Iteration " + this.iter);  this.mainDoc.getAbstractFeatureGroup().add(kmlObjectFactory.createFolder(this.mainFolder));  this.writer=new KMZWriter(filename);  try {    this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(createLegend()));  } catch (  IOException e) {    log.error("Cannot add legend to the KMZ file.",e);  }  try {    this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(MatsimKMLLogo.writeMatsimKMLLogo(writer)));  } catch (  IOException e) {    log.error("Cannot add logo to the KMZ file.",e);  }  try {    this.writer.addNonKMLFile(MatsimResource.getAsInputStream("icons/plus.png"),CROSSICON);    this.writer.addNonKMLFile(MatsimResource.getAsInputStream("icons/minus.png"),MINUSICON);  } catch (  IOException e) {    log.error("Could not copy copy plus-/minus-icons to the KMZ.",e);  }  FolderType simRealFolder=kmlObjectFactory.createFolderType();  simRealFolder.setName("XY Comparison Plots");  this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createFolder(simRealFolder));  ScreenOverlayType errorGraphBoard=createBiasErrorGraph(PtCountsType.Boarding,filename);  errorGraphBoard.setVisibility(Boolean.TRUE);  this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(errorGraphBoard));  ScreenOverlayType errorGraphAlight=createBiasErrorGraph(PtCountsType.Alighting,filename);  errorGraphAlight.setVisibility(Boolean.TRUE);  this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(errorGraphAlight));  ScreenOverlayType errorGraphOccupancy=createBiasErrorGraph(PtCountsType.Occupancy,filename);  errorGraphOccupancy.setVisibility(Boolean.TRUE);  this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(errorGraphOccupancy));  this.createCountsLoadCurveGraphs();  for (int h=1; h < 25; h++) {    TimeSpanType timespan=kmlObjectFactory.createTimeSpanType();    timespan.setBegin("1999-01-01T" + Time.writeTime(((h - 1) * 3600)));    timespan.setEnd("1999-01-01T" + Time.writeTime((h * 3600)));    this.addCountsSimRealPerHourGraphs(simRealFolder,h,timespan);    FolderType subfolder=kmlObjectFactory.createFolderType();    subfolder.setName(createFolderName(h));    subfolder.setAbstractTimePrimitiveGroup(kmlObjectFactory.createTimeSpan(timespan));    this.mainFolder.getAbstractFeatureGroup().add(kmlObjectFactory.createFolder(subfolder));    if (this.boardCountComparisonFilter != null) {      writeStopData(this.boardCountComparisonFilter.getCountsForHour(Integer.valueOf(h)),subfolder,PtCountsType.Boarding);    }    if (this.alightCountComparisonFilter != null) {      writeStopData(this.alightCountComparisonFilter.getCountsForHour(Integer.valueOf(h)),subfolder,PtCountsType.Alighting);    }    if (this.occupancyCountComparisonFilter != null) {      writeStopData(this.occupancyCountComparisonFilter.getCountsForHour(Integer.valueOf(h)),subfolder,PtCountsType.Occupancy);    }  }  finish();}  }
class C{  public NonRepeatableRequestException(){  super();}  }
class C{  public HorizontalLayout(int gap){  myGap=gap;  myAlignment=-1;}  }
class C{  protected boolean checkAndSetColocatedRegions(){  if (!ColocationHelper.checkMembersColocation(leaderRegion,leaderRegion.getDistributionManager().getDistributionManagerId())) {    return false;  }  Map<String,PartitionedRegion> colocatedRegionsMap=ColocationHelper.getAllColocationRegions(targetRegion);  colocatedRegionsMap.put(targetRegion.getFullPath(),targetRegion);  final LinkedList<PartitionedRegion> colocatedRegions=new LinkedList<PartitionedRegion>();  for (  PartitionedRegion colocatedRegion : colocatedRegionsMap.values()) {    if (!colocatedRegion.isInitialized()) {      return false;    }    if (colocatedRegion.getColocatedWith() == null) {      colocatedRegions.addFirst(colocatedRegion);    } else {      colocatedRegions.addLast(colocatedRegion);    }  }  this.colocatedRegions=colocatedRegions;  return true;}  }
class C{  public MultiMatchQueryBuilder lenient(boolean lenient){  this.lenient=lenient;  return this;}  }
class C{  synchronized void writeSampleData(final int trackIndex,final ByteBuffer byteBuf,final MediaCodec.BufferInfo bufferInfo){  if (mStatredCount > 0)   mMediaMuxer.writeSampleData(trackIndex,byteBuf,bufferInfo);}  }
class C{  public ConstExpConst(Type units){  this(Parameterization.ANCESTRAL_POPULATION_SIZE,false,units);}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.gridBandPaint,stream);  SerialUtilities.writePaint(this.gridBandAlternatePaint,stream);}  }
class C{  public static float interpolateTriangle(float v0X,float v0Y,float f0,float v1X,float v1Y,float f1,float v2X,float v2Y,float f2,float x,float y){  float v12Y=v1Y - v2Y;  float v21X=v2X - v1X;  float v02X=v0X - v2X;  float yv2Y=y - v2Y;  float xv2X=x - v2X;  float v02Y=v0Y - v2Y;  float invDen=1.0f / (v12Y * v02X + v21X * v02Y);  float l1=(v12Y * xv2X + v21X * yv2Y) * invDen;  float l2=(v02X * yv2Y - v02Y * xv2X) * invDen;  return l1 * f0 + l2 * f1 + (1.0f - l1 - l2) * f2;}  }
class C{  public void save(){  new ScriptDao().saveOrUpdate(script);  scriptEvent.fire(new ModifiedScriptMessage(script,this));  messages.info("Script " + script.getName() + " has been saved.");}  }
class C{  @Override public boolean isScreenOn(){  CommandLine command=adbCommand("shell","dumpsys power");  try {    String powerState=ShellCommand.exec(command).toLowerCase();    if (powerState.indexOf("mscreenon=true") > -1 || powerState.indexOf("mpowerstate=0") == -1) {      return true;    }  } catch (  ShellCommandException e) {    log.info("Could not get property init.svc.bootanim",e);  }  return false;}  }
class C{  public Builder senderId(@NonNull final String senderId){  this.mSenderId=senderId;  return this;}  }
class C{  public NoSuchFileException(String file,String other,String reason){  super(file,other,reason);}  }
class C{  public ByteBuffer[] peekChunks(int len) throws BufferUnderflowException {  if (len < 0)   throw new IllegalArgumentException();  if (len > remaining())   throw new BufferUnderflowException();  if (len == 0)   return EMPTY_BUFFERS;  int remaining=len;  ByteBuffer[] result=new ByteBuffer[countChunks(len)];  int index=0;  if (readChunk != null) {    ByteBuffer buf=readChunk.slice();    assert (buf.position() == 0);    buf.order(order);    if (remaining < buf.remaining()) {      buf.limit(remaining);      remaining=0;    } else {      remaining-=buf.remaining();    }    result[index++]=buf;  }  if (!list.isEmpty() && remaining > 0) {    Iterator<ByteBuffer> i=list.iterator();    while (remaining > 0 && i.hasNext()) {      ByteBuffer buf=i.next().slice();      assert (buf.position() == 0);      buf.order(order);      if (remaining < buf.remaining()) {        buf.limit(remaining);        remaining=0;      } else {        remaining-=buf.remaining();      }      result[index++]=buf;    }  }  if (remaining > 0 && writeChunk != null) {    ByteBuffer buf=(ByteBuffer)writeChunk.duplicate().flip();    assert (buf.position() == 0);    buf.order(order);    if (remaining < buf.remaining()) {      buf.limit(remaining);      remaining=0;    } else {      remaining-=buf.remaining();    }    result[index++]=buf;  }  assert (remaining == 0);  return result;}  }
class C{  public TimeClientHandler(){  req=("QUERY TIME ORDER" + System.getProperty("line.separator")).getBytes();}  }
class C{  private void fillEntriesAndSummaries(PreferenceGroup group){  for (int i=0; i < group.getPreferenceCount(); ++i) {    Preference pref=group.getPreference(i);    if (pref instanceof PreferenceGroup) {      fillEntriesAndSummaries((PreferenceGroup)pref);    }    setSummary(pref);    setEntries(pref);  }}  }
class C{  public static String makeString(Object obj1){  if (obj1 != null)   return obj1.toString(); else   return "";}  }
class C{  public boolean canResize(){  return canResize;}  }
class C{  @Deprecated public static Configuration create(){  return createConfiguration();}  }
class C{  public static File resourceToBgzipFile(final String resource,final File file) throws IOException {  try (InputStream stream=Resources.getResourceAsStream(resource)){    return streamToBgzipFile(stream,file);  } }  }
class C{  public PacketHELO(String devicename){  super(PT_HELO);  this.appendPayload(devicename);  this.appendPayload(ICON_NONE);  this.appendPayload((short)0);  this.appendPayload(0);  this.appendPayload(0);}  }
class C{  public DTMConfigurationException(String message,SourceLocator locator,Throwable e){  super(message,locator,e);}  }
class C{  @Override public String toString(String field){  return super.getOptions() + (calcDist ? "geofilt" : "bbox") + "(latlonSource="+ origField+ "("+ latSource+ ","+ lonSource+ ")"+ ",latCenter="+ latCenter+ ",lonCenter="+ lonCenter+ ",dist="+ dist+ ",latMin="+ latMin+ ",latMax="+ latMax+ ",lonMin="+ lonMin+ ",lonMax"+ lonMax+ ",lon2Min="+ lon2Min+ ",lon2Max"+ lon2Max+ ",calcDist="+ calcDist+ ",planetRadius="+ planetRadius+ ")";}  }
class C{  protected void nodeToBeRemoved(Node n){  setSpecified(true);}  }
class C{  public void test_getLocalAddress_after_close() throws Exception {  Socket s=new Socket();  try {    s.bind(new InetSocketAddress("localhost",0));    assertTrue(s.getLocalAddress().toString(),s.getLocalAddress().isLoopbackAddress());    int localPort=s.getLocalPort();    assertTrue(localPort > 0);    s.close();    assertTrue(s.getLocalAddress().isAnyLocalAddress());    assertEquals(localPort,s.getLocalPort());  }  finally {    s.close();  }}  }
class C{  private void initializeLayer(List<Neuron> layer,NeuronUpdateRule nodeType,int nodes){  for (int i=0; i < nodes; i++) {    Neuron node=new Neuron(getParentNetwork(),nodeType);    layer.add(node);  }}  }
class C{  public OracleDocument createDocumentFromByteArray(byte[] content){  return (new OracleDocumentImpl(null,content));}  }
class C{  public Node find(Node a){  int id=find(getNodeId(a));  return graph.getNode(id);}  }
class C{  public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  if (isIndenting()) {    --curIndent;  }  if (w != null) {    try {      if (state == STATE_IN_START_ELEMENT) {        w.write("/>");        state=STATE_OUTSIDE;      } else {        if (state == STATE_OUTSIDE) {          indentMe();        }        w.write("</");        w.write(qName);        w.write('>');      }      state=STATE_OUTSIDE;    } catch (    java.io.IOException e) {      throw new SAXException(e);    }  }}  }
class C{  private void postCreateComponents(DataInputStream in,Container parent,Resources res) throws Exception {  String name=in.readUTF();  Component lastComponent=null;  while (name.length() > 0) {    if (lastComponent == null || !lastComponent.getName().equals(name)) {      lastComponent=findByName(name,parent);    }    Component c=lastComponent;    int property=in.readInt();    modifyingProperty(c,property);switch (property) {case PROPERTY_COMMAND_LEGACY:{        readCommand(in,c,parent,res,true);        break;      }case PROPERTY_COMMAND:{      readCommand(in,c,parent,res,false);      break;    }case PROPERTY_LABEL_FOR:  c.setLabelForComponent((Label)findByName(in.readUTF(),parent));break;case PROPERTY_LEAD_COMPONENT:((Container)c).setLeadComponent(findByName(in.readUTF(),parent));break;case PROPERTY_NEXT_FOCUS_UP:c.setNextFocusUp(findByName(in.readUTF(),parent));break;case PROPERTY_NEXT_FOCUS_DOWN:c.setNextFocusDown(findByName(in.readUTF(),parent));break;case PROPERTY_NEXT_FOCUS_LEFT:c.setNextFocusLeft(findByName(in.readUTF(),parent));break;case PROPERTY_NEXT_FOCUS_RIGHT:c.setNextFocusRight(findByName(in.readUTF(),parent));break;}name=in.readUTF();}}  }
class C{  public void scheduleUpdate(Object target,int priority,boolean paused){  if (ccConfig.COCOS2D_DEBUG >= 1) {    tHashSelectorEntry hashElement=hashForUpdates.get(target);    assert hashElement == null : "CCScheduler: You can't re-schedule an 'update' selector'. Unschedule it first";  }  if (priority == 0) {    this.append(updates0,target,paused);  } else   if (priority < 0) {    this.priority(updatesNeg,target,priority,paused);  } else {    this.priority(updatesPos,target,priority,paused);  }}  }
class C{  private void flush(){  if (changeSet != null) {    final int size=changeSet.size();    final KVO<HistoryChangeRecord>[] b=new KVO[size];{      final IChangeRecord[] a=changeSet.values().toArray(new IChangeRecord[size]);      final HistoryIndexTupleSerializer tupSer=(HistoryIndexTupleSerializer)ndx.getIndexMetadata().getTupleSerializer();      for (int i=0; i < size; i++) {        final IChangeRecord r=a[i];        final HistoryChangeRecord s=new HistoryChangeRecord(r,revisionTimestamp);        final byte[] key=tupSer.serializeKey(s);        final byte[] val=tupSer.serializeVal(s);        b[i]=new KVO<HistoryChangeRecord>(key,val,s);      }    }    java.util.Arrays.sort(b);    for (int i=0; i < size; i++) {      final KVO<HistoryChangeRecord> r=b[i];      ndx.insert(r.key,r.val);    }    reset();  }}  }
class C{  public static Wildcards ofMatches(Wildcards.Flag... setFlags){  int flags=FULL_INT;  for (  Wildcards.Flag flag : setFlags)   flags=flag.matchOn(flags);  return Wildcards.of(flags);}  }
class C{  public ExportException(String s,Exception ex){  super(s,ex);}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public static boolean isEmpty(Collection<?> collection){  return collection == null || collection.isEmpty();}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exception) {    throw new JSONException(exception);  }  this.back();  return c;}  }
class C{  public static AffineTransformation scaleInstance(double xScale,double yScale,double x,double y){  AffineTransformation trans=new AffineTransformation();  trans.translate(-x,-y);  trans.scale(xScale,yScale);  trans.translate(x,y);  return trans;}  }
class C{  protected ShibbolethOAuth2ClientRepository(){}  }
class C{  public static void deleteOrderlines(Properties ctx,MOrder order,String trxName) throws OperationException {  boolean isEmpty=OrderManager.isOrderEmpty(ctx,order.get_ID(),trxName);  if (isEmpty) {    return;  }  if (order.isProcessed()) {    throw new OperationException("Cannot delete order that is already processed");  }  String sql="DELETE FROM C_ORDERLINE WHERE C_ORDER_ID = " + order.get_ID();  int no=DB.executeUpdate(sql,trxName);  if (no == -1) {    throw new OperationException("Could not delete order lines");  }}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  super.endPrefixMapping(prefix);  prefixMapping=prefixMapping.parent;}  }
class C{  public void callWithSeed(final String methodName,final String randomSeed){  callWithSeed(methodName,randomSeed,null,null);}  }
class C{  public VNXeCommandResult detachLunSnap(String snapId){  _logger.info("detaching lun snap:",snapId);  LunSnapRequests req=new LunSnapRequests(_khClient);  return req.detachLunSnapSync(snapId);}  }
class C{  public boolean render(InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException, ParseErrorException {  return jjtGetChild(1).render(context,writer);}  }
class C{  public static short sacPrimitiveTypeForString(String type){  if ("em".equals(type)) {    return CSSPrimitiveValue.CSS_EMS;  } else   if ("ex".equals(type)) {    return CSSPrimitiveValue.CSS_EXS;  } else   if ("px".equals(type)) {    return CSSPrimitiveValue.CSS_PX;  } else   if ("%".equals(type)) {    return CSSPrimitiveValue.CSS_PERCENTAGE;  } else   if ("in".equals(type)) {    return CSSPrimitiveValue.CSS_IN;  } else   if ("cm".equals(type)) {    return CSSPrimitiveValue.CSS_CM;  } else   if ("mm".equals(type)) {    return CSSPrimitiveValue.CSS_MM;  } else   if ("pt".equals(type)) {    return CSSPrimitiveValue.CSS_PT;  } else   if ("pc".equals(type)) {    return CSSPrimitiveValue.CSS_PC;  } else   if (type == null) {    return CSSPrimitiveValue.CSS_PX;  } else {    throw new XRRuntimeException("Unknown type on CSS value: " + type);  }}  }
class C{  public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  public static boolean hasStartingSlash(String path){  Objects.requireNonNull(path,"path must not be null");  return !"".equals(path) && path.charAt(0) == '/';}  }
class C{  public Object clone() throws CloneNotSupportedException {  NodeVector clone=(NodeVector)super.clone();  if ((null != this.m_map) && (this.m_map == clone.m_map)) {    clone.m_map=new int[this.m_map.length];    System.arraycopy(this.m_map,0,clone.m_map,0,this.m_map.length);  }  return clone;}  }
class C{  @Deprecated public static <V>GridTuple<V> t1(){  return new GridTuple<>();}  }
class C{  public static InetAddress truncate(InetAddress address,int maskLength){  int family=familyOf(address);  int maxMaskLength=addressLength(family) * 8;  if (maskLength < 0 || maskLength > maxMaskLength)   throw new IllegalArgumentException("invalid mask length");  if (maskLength == maxMaskLength)   return address;  byte[] bytes=address.getAddress();  for (int i=maskLength / 8 + 1; i < bytes.length; i++)   bytes[i]=0;  int maskBits=maskLength % 8;  int bitmask=0;  for (int i=0; i < maskBits; i++)   bitmask|=(1 << (7 - i));  bytes[maskLength / 8]&=bitmask;  try {    return InetAddress.getByAddress(bytes);  } catch (  UnknownHostException e) {    throw new IllegalArgumentException("invalid address");  }}  }
class C{  public static double computeTextWidth(final Font font,final String text){  TEXT.setText(text);  TEXT.setFont(font);  TEXT.setWrappingWidth(0.0D);  TEXT.setLineSpacing(0.0D);  double d=Math.min(TEXT.prefWidth(-1.0D),0.0D);  TEXT.setWrappingWidth((int)Math.ceil(d));  d=Math.ceil(TEXT.getLayoutBounds().getWidth());  TEXT.setWrappingWidth(DEFAULT_WRAPPING_WIDTH);  TEXT.setLineSpacing(DEFAULT_LINE_SPACING);  TEXT.setText(DEFAULT_TEXT);  return d;}  }
class C{  private void consolidateStore(){  if (!isMaster)   return;  cntConsolidateStoreRuns.increment();  if (logger.isDebugEnabled()) {    logger.debug("Running consolidateStore.");  }  IClosableIterator<Map.Entry<String,Versioned<DeviceSyncRepresentation>>> iter=null;  try {    iter=storeClient.entries();  } catch (  SyncException e) {    cntSyncException.increment();    logger.error("Failed to read devices from sync store",e);    return;  }  try {    while (iter.hasNext()) {      boolean found=false;      Versioned<DeviceSyncRepresentation> versionedDevice=iter.next().getValue();      DeviceSyncRepresentation storedDevice=versionedDevice.getValue();      if (storedDevice == null)       continue;      for (      SyncEntity se : storedDevice.getEntities()) {        try {          IDevice d=findDevice(MacAddress.of(se.macAddress),VlanVid.ofVlan(se.vlan),IPv4Address.of(se.ipv4Address),IPv6Address.NONE,DatapathId.of(se.switchDPID),OFPort.of(se.switchPort));          if (d != null) {            found=true;            break;          }        } catch (        IllegalArgumentException e) {        }      }      if (!found) {        if (logger.isDebugEnabled()) {          logger.debug("Removing device {} from store. No " + "corresponding live device",storedDevice.getKey());        }        cntConsolidateStoreDevicesRemoved.increment();        removeDevice(versionedDevice);      }    }  }  finally {    if (iter != null)     iter.close();  }}  }
class C{  public void write(File file) throws Exception {  write(new BufferedWriter(new FileWriter(file)));}  }
class C{  @SuppressWarnings("unchecked") private void processConfigMessages(List<String> keysToProcess){  if (!coordinatorStreamConsumer.hasNewMessages(coordinatorStreamIterator)) {    return;  }  if (keysToProcess == null) {    throw new IllegalArgumentException("The keys to process list is null");  }  for (  CoordinatorStreamMessage message : coordinatorStreamConsumer.getUnreadMessages(coordinatorStreamIterator,SetConfig.TYPE)) {    String key=null;    try {      SetConfig setConfigMessage=new SetConfig(message);      key=setConfigMessage.getKey();      Map<String,String> valuesMap=(Map<String,String>)setConfigMessage.getMessageMap().get("values");      String value=null;      if (valuesMap != null) {        value=valuesMap.get("value");      }      log.debug("Received set-config message with key: " + key + " and value: "+ value);      if (keysToProcess.contains(key)) {        if (key.equals(YARN_CONTAINER_COUNT_OPT)) {          handleYarnContainerChange(value);        } else         if (key.equals(SERVER_URL_OPT)) {          handleServerURLChange(value);        } else {          log.info("Setting the " + key + " configuration is currently not supported, skipping the message");        }      }    } catch (    Exception e) {      log.debug("Error in reading a message, skipping message with key " + key);    }  }}  }
class C{  public static <U,I,O>SimplePreferenceData<U,I> load(Stream<Tuple4<U,I,Double,O>> tuples,Function4<U,I,Double,O,? extends IdPref<I>> uPrefFun,Function4<U,I,Double,O,? extends IdPref<U>> iPrefFun){  AtomicInteger numPreferences=new AtomicInteger(0);  Map<U,List<IdPref<I>>> userMap=new HashMap<>();  Map<I,List<IdPref<U>>> itemMap=new HashMap<>();  tuples.forEach(null);  return new SimplePreferenceData<>(userMap,itemMap,numPreferences.intValue());}  }
class C{  public boolean isFileSelectable(VirtualFile file){  if (file == null)   return false;  if (file.is(VFileProperty.SYMLINK) && file.getCanonicalPath() == null) {    return false;  }  if (file.isDirectory() && myChooseFolders) {    return true;  }  if (acceptAsJarFile(file)) {    return true;  }  if (acceptAsGeneralFile(file)) {    return true;  }  if (myFileFilter != null && !file.isDirectory() && myFileFilter.value(file)) {    return true;  }  return false;}  }
class C{  public JMenuItem add(String s){  return add(new JMenuItem(s));}  }
class C{  public void prepare(){}  }
class C{  public InlineURIFactory(){  addHandler(new InlineUUIDURIHandler(InlineUUIDURIHandler.NAMESPACE));  addHandler(new InlineIPv4URIHandler(InlineIPv4URIHandler.NAMESPACE));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected int inverseOperator(int op){switch (op) {case LITERAL_and:    return LITERAL_or;case LITERAL_or:  return LITERAL_and;case TOK_EQ:return TOK_NE;case TOK_NE:return TOK_EQ;case TOK_LT:return TOK_GE;case TOK_GE:return TOK_LT;case TOK_LE:return TOK_GT;case TOK_GT:return TOK_LE;default :Support.assertionFailed("unknown operator: " + op);throw new Error("this line of code can never be executed");}}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.DECLARATION__TYPE:    return basicGetType() != null;case TypesPackage.DECLARATION__TYPE_SPECIFIER:  return typeSpecifier != null;case TypesPackage.DECLARATION__NAME:return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case TypesPackage.DECLARATION__ANNOTATIONS:return annotations != null && !annotations.isEmpty();case TypesPackage.DECLARATION__ID:return ID_EDEFAULT == null ? getId() != null : !ID_EDEFAULT.equals(getId());}return super.eIsSet(featureID);}  }
class C{  public NetworkReaderTeleatlas(final Network network,final String jcShpFileName,final String nwShpFileName){  this.network=network;  this.jcShpFileName=jcShpFileName;  this.nwShpFileName=nwShpFileName;}  }
class C{  private boolean isNotSame(int[] m1,int[] m2){  assert m1.length == m2.length;  assert m1.length == 2;  return m1[0] != m2[0] && m1[1] != m2[1];}  }
class C{  public final void actionLoad() throws BasicException {  loadData();  if (m_bd.getSize() == 0) {    actionInsert();  }}  }
class C{  private void closeDbConnection(Connection conn){  try {    conn.close();  } catch (  Exception e) {    Runtime.info("DataSourceResourceLoader Quirk: problem when closing connection: " + e.toString());  }}  }
class C{  public void addCellEditorListener(CellEditorListener l){  realEditor.addCellEditorListener(l);}  }
class C{  public static EncryptionKey[] acquireSecretKeys(PrincipalName princ,String keytab){  if (princ == null)   throw new IllegalArgumentException("Cannot have null pricipal name to look in keytab.");  KeyTab ktab=KeyTab.getInstance(keytab);  return ktab.readServiceKeys(princ);}  }
class C{  public SynchronizingStorageEngine(IStorageEngine<ByteArray,byte[]> localStorage,SyncManager syncManager,IDebugCounterService debugCounter,Scope scope){  super(localStorage,debugCounter);  this.localStorage=localStorage;  this.syncManager=syncManager;  this.scope=scope;}  }
class C{  public static X509Certificate readX509Certificate(File file) throws IOException, CertificateException {  return readX509Certificate(file.toURI().toURL());}  }
class C{  public void sort(DTMIterator v,Vector keys,XPathContext support) throws javax.xml.transform.TransformerException {  m_keys=keys;  int n=v.getLength();  Vector nodes=new Vector();  for (int i=0; i < n; i++) {    NodeCompareElem elem=new NodeCompareElem(v.item(i));    nodes.addElement(elem);  }  Vector scratchVector=new Vector();  mergesort(nodes,scratchVector,0,n - 1,support);  for (int i=0; i < n; i++) {    v.setItem(((NodeCompareElem)nodes.elementAt(i)).m_node,i);  }  v.setCurrentPos(0);}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public void checkAccountOfCurrentUpload(){  if (mCurrentUpload != null && !AccountUtils.exists(mCurrentUpload.getAccount(),getApplicationContext())) {    mCurrentUpload.cancel();  }}  }
class C{  @SuppressWarnings("unchecked") static final <K,V>HashEntry<K,V> entryForHash(Segment<K,V> seg,int h){  HashEntry<K,V>[] tab;  return (seg == null || (tab=seg.table) == null) ? null : (HashEntry<K,V>)UNSAFE.getObjectVolatile(tab,((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);}  }
class C{  public boolean isStandard(){  return (glyphType & 0x3) == STANDARD;}  }
class C{  public static PKCS10CertificationRequest loadCsr(InputStream is) throws IOException {  byte[] streamContents=ReadUtil.readFully(is);  byte[] csrBytes=null;  LineNumberReader lnr=null;  try {    lnr=new LineNumberReader(new InputStreamReader(new ByteArrayInputStream(streamContents)));    String line=lnr.readLine();    StringBuffer sbPem=new StringBuffer();    if ((line != null) && ((line.equals(BEGIN_CSR_FORM_1) || line.equals(BEGIN_CSR_FORM_2)))) {      while ((line=lnr.readLine()) != null) {        if (line.equals(END_CSR_FORM_1) || line.equals(END_CSR_FORM_2)) {          csrBytes=Base64.decode(sbPem.toString());          break;        }        sbPem.append(line);      }    }  }  finally {    IOUtils.closeQuietly(lnr);  }  if (csrBytes == null) {    csrBytes=streamContents;  }  PKCS10CertificationRequest csr=new PKCS10CertificationRequest(csrBytes);  return csr;}  }
class C{  public final boolean hasZeropoint(){  if (m_AttributeMetaInfo == null) {    return true;  }  return m_AttributeMetaInfo.m_HasZeropoint;}  }
class C{  protected <T extends DataObject>void checkForPendingTasks(T object,URI tenantURI){  BlockServiceUtils.checkForPendingTasks(tenantURI,Arrays.asList(object),_dbClient);}  }
class C{  public static boolean isRegOutput(SpaceEffGraphEdge edge){  return (edge.getInfo() & REG_OUTPUT) != 0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void releaseSavepoint(Savepoint sp){  if (isSource())   return;  if (!isValidSavepoint(sp))   return;  String savepointName=null;  try {    savepointName=sp.getSavepointName();  } catch (  SQLException e) {    s_dbEngine.setDBError(true);    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"releaseSavepointNoName",new Object[]{e.getMessage()});  }  if (savepointName == null || savepointName.length() == 0)   savepointName="savepoint";  int errors=s_dbEngine.getTransactionErrors();  if (errors > 0) {    s_dbEngine.resetTransactionErrors();    if (!savepointName.toUpperCase().startsWith("SILENT")) {      String logObject=s_logger.localizeMessage("errors");      if (errors == 1)       logObject=s_logger.localizeMessage("error");      s_logger.log(Level.CONFIG,"errorRollback",new Object[]{Integer.toString(errors),logObject,savepointName});    }    try {      getConnection().rollback(sp);    } catch (    SQLException e) {    }  }  try {    if (m_isSavepointReleaseable) {      getConnection().releaseSavepoint(sp);    }  } catch (  SQLException e) {    s_dbEngine.setDBError(true);    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"releaseSavepointError",new Object[]{savepointName,e.getMessage()});  } finally {    sp=null;  }}  }
class C{  public void updateContextTitle(int count){  if (mActionMode != null) {    mActionMode.setTitle(String.valueOf(count));  }}  }
class C{  public static SdfId[] readTemplateMap(File baseDir) throws IOException {  return readMappingFile(new File(baseDir,TEMPLATE_MAP_FILE));}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.260 -0400",hash_original_method="C29AE678CCE898A5EAC5F93683C50E53",hash_generated_method="246A16E42283A6F4E2576D311979E793") public PriorityQueue(Collection<? extends E> c){  if (c instanceof PriorityQueue) {    getFromPriorityQueue((PriorityQueue<? extends E>)c);  } else   if (c instanceof SortedSet) {    getFromSortedSet((SortedSet<? extends E>)c);  } else {    initSize(c);    addAll(c);  }}  }
class C{  public DataServer(String name,String host,String vendor,String clusterName){  super(ResourceType.DATASERVER,name);  this.host=host;  this.vendor=vendor;  this.clusterName=clusterName;}  }
class C{  public void openDB(){  if (mSQLiteDatabase == null || mSQLiteDatabase.isOpen() == false)   mSQLiteDatabase=SQLiteDatabase.openOrCreateDatabase(dbPath,null);}  }
class C{  public void invoke(Object service,AbstractHessianInput in,AbstractHessianOutput out) throws Exception {  ServiceContext context=ServiceContext.getContext();  in.skipOptionalCall();  String header;  while ((header=in.readHeader()) != null) {    Object value=in.readObject();    context.addHeader(header,value);  }  String methodName=in.readMethod();  int argLength=in.readMethodArgLength();  Method method;  method=getMethod(methodName + "__" + argLength);  if (method == null)   method=getMethod(methodName);  if (method != null) {  } else   if ("_hessian_getAttribute".equals(methodName)) {    String attrName=in.readString();    in.completeCall();    String value=null;    if ("java.api.class".equals(attrName))     value=getAPIClassName(); else     if ("java.home.class".equals(attrName))     value=getHomeClassName(); else     if ("java.object.class".equals(attrName))     value=getObjectClassName();    out.writeReply(value);    out.close();    return;  } else   if (method == null) {    out.writeFault("NoSuchMethodException",escapeMessage("The service has no method named: " + in.getMethod()),null);    out.close();    return;  }  Class<?>[] args=method.getParameterTypes();  if (argLength != args.length && argLength >= 0) {    out.writeFault("NoSuchMethod",escapeMessage("method " + method + " argument length mismatch, received length="+ argLength),null);    out.close();    return;  }  Object[] values=new Object[args.length];  for (int i=0; i < args.length; i++) {    values[i]=in.readObject(args[i]);  }  Object result=null;  try {    result=method.invoke(service,values);  } catch (  Exception e) {    Throwable e1=e;    if (e1 instanceof InvocationTargetException)     e1=((InvocationTargetException)e).getTargetException();    log.log(Level.FINE,this + " " + e1.toString(),e1);    out.writeFault("ServiceException",escapeMessage(e1.getMessage()),e1);    out.close();    return;  }  in.completeCall();  out.writeReply(result);  out.close();}  }
class C{  public static SecurityCheckException convertToApi(org.oscm.internal.types.exception.SecurityCheckException oldEx){  return convertExceptionToApi(oldEx,SecurityCheckException.class);}  }
class C{  private Optional<TClassifier> explicitSuperType(TClassifier tclassifier){  if (tclassifier instanceof TClass) {    TClass tclass=(TClass)tclassifier;    if (tclass.getSuperClassRef() != null && tclass.getSuperClassRef().getDeclaredType() instanceof TClassifier) {      return Optional.of((TClassifier)tclass.getSuperClassRef().getDeclaredType());    }  }  return Optional.absent();}  }
class C{  @Override public boolean supportsSubqueriesInIns(){  debugCodeCall("supportsSubqueriesInIns");  return true;}  }
class C{  public static Future<Void> abortSequence(ExecutorService executorService,AsyncAbortable... abortables){  List<AsyncAbortable> abortableList=Lists.newArrayListWithExpectedSize(abortables.length);  for (  AsyncAbortable abortable : abortables) {    if (null == abortable) {      abortableList.add(AsyncAbortable.NULL);    } else {      abortableList.add(abortable);    }  }  return FutureUtils.processList(abortableList,AsyncAbortable.ABORT_FUNC,executorService).map(VoidFunctions.LIST_TO_VOID_FUNC);}  }
class C{  protected action_part strip_trailing_action(production_part rhs_parts[],int len){  action_part result;  if (rhs_parts == null || len == 0)   return null;  if (rhs_parts[len - 1].is_action()) {    result=(action_part)rhs_parts[len - 1];    rhs_parts[len - 1]=null;    return result;  } else   return null;}  }
class C{  @Override public CharSequence convertToString(Cursor cursor){  if (cursor == null) {    return null;  }  String query=getColumnString(cursor,SearchManager.SUGGEST_COLUMN_QUERY);  if (query != null) {    return query;  }  if (mSearchable.shouldRewriteQueryFromData()) {    String data=getColumnString(cursor,SearchManager.SUGGEST_COLUMN_INTENT_DATA);    if (data != null) {      return data;    }  }  if (mSearchable.shouldRewriteQueryFromText()) {    String text1=getColumnString(cursor,SearchManager.SUGGEST_COLUMN_TEXT_1);    if (text1 != null) {      return text1;    }  }  return null;}  }
class C{  public boolean isCpuMetricDataAvailable(){  return cpuMin != -1;}  }
class C{  protected void addOffCorrectMap(int off,int cumulativeDiff){  if (offsets == null) {    offsets=new int[64];    diffs=new int[64];  } else   if (size == offsets.length) {    offsets=ArrayUtil.grow(offsets);    diffs=ArrayUtil.grow(diffs);  }  assert (size == 0 || off >= offsets[size - 1]) : "Offset #" + size + "("+ off+ ") is less than the last recorded offset "+ offsets[size - 1]+ "\n"+ Arrays.toString(offsets)+ "\n"+ Arrays.toString(diffs);  if (size == 0 || off != offsets[size - 1]) {    offsets[size]=off;    diffs[size++]=cumulativeDiff;  } else {    diffs[size - 1]=cumulativeDiff;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.805 -0500",hash_original_method="776DC8B2F80D9EC817EF7446A13B40B9",hash_generated_method="4413017770EF1F180329D38AA6620E55") public void run(){  runWorker(this);}  }
class C{  @Override public boolean test(Object receiver,String property,Object[] args,Object expectedValue){  if (IS_ANGULAR_CLI_PROJECT_PROPERTY.equals(property)) {    return testIsAngularCLIProject(receiver);  }  return false;}  }
class C{  public Expression convert(Environment env,Context ctx,Type t,Expression e){  if (e.type.isType(TC_ERROR) || t.isType(TC_ERROR)) {    return e;  }  if (e.type.equals(t)) {    return e;  }  try {    if (e.fitsType(env,ctx,t)) {      return new ConvertExpression(where,t,e);    }    if (env.explicitCast(e.type,t)) {      env.error(where,"explicit.cast.needed",opNames[op],e.type,t);      return new ConvertExpression(where,t,e);    }  } catch (  ClassNotFound ee) {    env.error(where,"class.not.found",ee.name,opNames[op]);  }  env.error(where,"incompatible.type",opNames[op],e.type,t);  return new ConvertExpression(where,Type.tError,e);}  }
class C{  public MnemonicCode(InputStream wordstream,String wordListDigest) throws IOException, IllegalArgumentException {  BufferedReader br=new BufferedReader(new InputStreamReader(wordstream,"UTF-8"));  wordList=new ArrayList<String>(2048);  String word;  while ((word=br.readLine()) != null)   wordList.add(word);  br.close();  initializeFromWords(wordList,wordListDigest);}  }
class C{  public JccTranslator(final IConditionGenerator conditionGenerator){  this.conditionGenerator=Preconditions.checkNotNull(conditionGenerator,"Error: Argument conditionGenerator can't be null");}  }
class C{  @Generated(hash=2059241980) public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getUserDao() : null;}  }
class C{  public boolean skipPast(String to) throws JSONException {  boolean b;  char c;  int i;  int j;  int offset=0;  int length=to.length();  char[] circle=new char[length];  for (i=0; i < length; i+=1) {    c=next();    if (c == 0) {      return false;    }    circle[i]=c;  }  for (; ; ) {    j=offset;    b=true;    for (i=0; i < length; i+=1) {      if (circle[j] != to.charAt(i)) {        b=false;        break;      }      j+=1;      if (j >= length) {        j-=length;      }    }    if (b) {      return true;    }    c=next();    if (c == 0) {      return false;    }    circle[offset]=c;    offset+=1;    if (offset >= length) {      offset-=length;    }  }}  }
class C{  public IndTestCorrelationT(ICovarianceMatrix corrMatrix,double alpha){  this.covMatrix=corrMatrix;  this._covMatrix=corrMatrix.getMatrix();  this.variables=Collections.unmodifiableList(corrMatrix.getVariables());  this.indexMap=indexMap(variables);  this.nameMap=mapNames(variables);  setAlpha(alpha);}  }
class C{  public static <T>Observable<T> bindViewImmediate(View view,Observable<T> source){  if (view == null || source == null)   throw new IllegalArgumentException("View and Observable must be given");  return source.takeUntil(Observable.create(new OnSubscribeViewDetachedFromWindowFirst(view))).observeOn(Schedulers.immediate());}  }
class C{  public ElementType parent(){  return theParent;}  }
class C{  private Finalizer(Class<?> finalizableReferenceClass,ReferenceQueue<Object> queue,PhantomReference<Object> frqReference){  this.queue=queue;  this.finalizableReferenceClassReference=new WeakReference<Class<?>>(finalizableReferenceClass);  this.frqReference=frqReference;}  }
class C{  public ResultKey(String algorithm,String problem){  super();  this.algorithm=algorithm;  this.problem=problem;}  }
class C{  public JSONObject optJSONObject(int index){  Object o=this.opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  public boolean hasBreakpoint(final BreakpointType type,final BreakpointAddress address){  checkArguments(type,address);switch (type) {case REGULAR:    return indexedBreakpointStorage.get(address) != null;case ECHO:  return echoBreakpointStorage.get(address) != null;case STEP:return stepBreakpointStorage.get(address) != null;default :throw new IllegalStateException(String.format("IE01007: Invalid breakpoint type '%s'",type));}}  }
class C{  private boolean isClosed(Class<?> connectionClass,Object connection){  return (Boolean)cache.invokeMethod(connectionClass,IS_CLOSED,null,connection,null,true,JAVA_SQL_CONNECTION_FQN);}  }
class C{  public static void serializeGroupDescReply(List<OFGroupDescStatsReply> groupDescReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFGroupDescStatsReply groupDescReply=groupDescReplies.get(0);  jGen.writeStringField("version",groupDescReply.getVersion().toString());  jGen.writeFieldName("groupDesc");  jGen.writeStartArray();  for (  OFGroupDescStatsEntry entry : groupDescReply.getEntries()) {    jGen.writeStartObject();    jGen.writeStringField("groupType",entry.getGroupType().toString());    jGen.writeStringField("groupNumber",entry.getGroup().toString());    jGen.writeFieldName("buckets");    jGen.writeStartArray();    for (    OFBucket buckets : entry.getBuckets()) {      jGen.writeStartObject();      jGen.writeNumberField("weight",buckets.getWeight());      jGen.writeNumberField("watchPortNumber",buckets.getWatchPort().getPortNumber());      jGen.writeStringField("watchGroup",buckets.getWatchGroup().toString());      OFActionListSerializer.serializeActions(jGen,buckets.getActions());      jGen.writeEndObject();    }    jGen.writeEndArray();    jGen.writeEndObject();  }  jGen.writeEndArray();}  }
class C{  public EchoRequestMessage(EchoRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  public boolean resolve(long where,ClassDefinition c,Type t){switch (t.getTypeCode()) {case TC_CLASS:{      ClassDefinition def;      try {        Identifier nm=t.getClassName();        if (!nm.isQualified() && !nm.isInner() && !classExists(nm)) {          resolve(nm);        }        def=getQualifiedClassDefinition(where,nm,c,false);        if (!c.canAccess(this,def.getClassDeclaration())) {          error(where,"cant.access.class",def);          return true;        }        def.noteUsedBy(c,where,env);      } catch (      AmbiguousClass ee) {        error(where,"ambig.class",ee.name1,ee.name2);        return false;      }catch (      ClassNotFound e) {        try {          if (e.name.isInner() && getPackage(e.name.getTopName()).exists()) {            env.error(where,"class.and.package",e.name.getTopName());          }        } catch (        IOException ee) {          env.error(where,"io.exception","package check");        }        error(where,"class.not.found.no.context",e.name);        return false;      }      return true;    }case TC_ARRAY:  return resolve(where,c,t.getElementType());case TC_METHOD:boolean ok=resolve(where,c,t.getReturnType());Type args[]=t.getArgumentTypes();for (int i=args.length; i-- > 0; ) {ok&=resolve(where,c,args[i]);}return ok;}return true;}  }
class C{  public Presentation(Context outerContext,Display display,int theme){  super(createPresentationContext(outerContext,display,theme),theme,false);  mDisplay=display;  mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);  getWindow().setGravity(Gravity.FILL);  setCanceledOnTouchOutside(false);}  }
class C{  public static boolean isValidVector(Vector3f vector){  if (vector == null)   return false;  if (Float.isNaN(vector.x) || Float.isNaN(vector.y) || Float.isNaN(vector.z))   return false;  if (Float.isInfinite(vector.x) || Float.isInfinite(vector.y) || Float.isInfinite(vector.z))   return false;  return true;}  }
class C{  public static void deleteVMs(String documentSelfLink,boolean isMock,VerificationHost host) throws Throwable {  deleteVMs(documentSelfLink,isMock,host,false);}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  private StringBuilder appendIfNotNull(StringBuilder source,String addStr,String delimiter){  if (addStr != null) {    if (addStr.length() == 0) {      delimiter="";    }    return source.append(addStr).append(delimiter);  }  return source;}  }
class C{  public Tokenizer(String s){  this(new ByteArrayInputStream(s.getBytes()));}  }
class C{  public Boolean updatePackingPlan(PackingPlans.PackingPlan packingPlan,String topologyName){  if (getPackingPlan(topologyName) != null) {    deletePackingPlan(topologyName);  }  return setPackingPlan(packingPlan,topologyName);}  }
class C{  public DbSchemaChanger removeAnnotation(String methodName,String annotationName) throws Exception {  CtMethod methodDescriptor=cc.getDeclaredMethod(methodName);  ClassFile ccFile=cc.getClassFile();  ccFile.setVersionToJava5();  ConstPool constpool=ccFile.getConstPool();  MethodInfo minfo=methodDescriptor.getMethodInfo();  AnnotationsAttribute attr=(AnnotationsAttribute)minfo.getAttribute(AnnotationsAttribute.visibleTag);  Annotation[] annotations=attr.getAnnotations();  List<Annotation> list=new ArrayList();  for (  Annotation annotation : annotations) {    if (!annotation.getTypeName().equals(annotationName)) {      list.add(annotation);    }  }  Annotation[] newAnnotations=list.toArray(new Annotation[0]);  attr.setAnnotations(newAnnotations);  minfo.addAttribute(attr);  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Plugin(RajawaliRenderer renderer){  this(renderer,true);}  }
class C{  @Deprecated public int _inc(){  return _inc;}  }
class C{  @Override @Deprecated public void connect(SocketAddress remoteAddr) throws IOException {  if (DBG)   log("connect(remoteAddr) EX DEPRECATED");}  }
class C{  public ArrayList<Row> generateRows(Session session,SearchRow first,SearchRow last){  Value indexFrom=null, indexTo=null;  if (indexColumn >= 0) {    if (first != null) {      indexFrom=first.getValue(indexColumn);    }    if (last != null) {      indexTo=last.getValue(indexColumn);    }  }  ArrayList<Row> rows=New.arrayList();  String catalog="";  ;  boolean admin=session.getUser().isAdmin();switch (type) {case TABLES:{      for (      Table table : getAllTables(session)) {        String tableName=identifier(table.getName());        if (!checkIndex(session,tableName,indexFrom,indexTo)) {          continue;        }        String storageType=table.getTableType();        if (table instanceof TableMate) {          int type2=((TableMate)table).getTableRule().getType();switch (type2) {case TableRule.FIXED_NODE_TABLE:            storageType="FIXED_NODE_TABLE";          break;case TableRule.GLOBAL_NODE_TABLE:        storageType="GLOBAL_NODE_TABLE";      break;case TableRule.SHARDED_NODE_TABLE:    storageType="SHARDED_NODE_TABLE";  break;default :break;}}add(rows,catalog,identifier(table.getSchema().getName()),tableName,table.getTableType(),storageType,"","",null,"" + table.getId(),null,table.getClass().getName(),"" + table.getRowCountApproximation());}break;}case COLUMNS:{final ArrayList<Table> tablesToList;if (indexFrom != null && indexTo != null && indexFrom.equals(indexTo)) {String tableName=identifier(indexFrom.getString());tablesToList=getTablesByName(session,tableName);} else {tablesToList=getAllTables(session);}for (Table table : tablesToList) {String tableName=identifier(table.getName());if (!checkIndex(session,tableName,indexFrom,indexTo)) {continue;}Column[] cols=table.getColumns();String collation=database.getCompareMode().getName();for (int j=0; j < cols.length; j++) {Column c=cols[j];Sequence sequence=c.getSequence();add(rows,catalog,identifier(table.getSchema().getName()),tableName,identifier(c.getName()),String.valueOf(j + 1),c.getDefaultSQL(),c.isNullable() ? "YES" : "NO","" + DataType.convertTypeToSQLType(c.getType()),"" + c.getPrecisionAsInt(),"" + c.getPrecisionAsInt(),"" + c.getPrecisionAsInt(),"10","" + c.getScale(),CHARACTER_SET_NAME,collation,identifier(DataType.getDataType(c.getType()).name),"" + (c.isNullable() ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls),"" + (c.getComputed() ? "TRUE" : "FALSE"),"" + (c.getSelectivity()),c.getCheckConstraintSQL(session,c.getName()),sequence == null ? null : sequence.getName(),replaceNullWithEmpty(c.getComment()),null);}}break;}case INDEXES:{final ArrayList<Table> tablesToList;if (indexFrom != null && indexTo != null && indexFrom.equals(indexTo)) {String tableName=identifier(indexFrom.getString());tablesToList=getTablesByName(session,tableName);} else {tablesToList=getAllTables(session);}for (Table table : tablesToList) {String tableName=identifier(table.getName());if (!checkIndex(session,tableName,indexFrom,indexTo)) {continue;}ArrayList<Index> indexes=table.getIndexes();for (int j=0; indexes != null && j < indexes.size(); j++) {Index index=indexes.get(j);IndexColumn[] cols=index.getIndexColumns();for (int k=0; k < cols.length; k++) {IndexColumn idxCol=cols[k];Column column=idxCol.column;add(rows,catalog,identifier(table.getSchema().getName()),tableName,index.getIndexType().isUnique() ? "FALSE" : "TRUE",identifier(index.getName()),"" + (k + 1),identifier(column.getName()),"0",index.getIndexType().isPrimaryKey() ? "TRUE" : "FALSE",index.getIndexType().getSQL(),null,"" + DatabaseMetaData.tableIndexOther,(idxCol.sortType & SortOrder.DESCENDING) != 0 ? "D" : "A","0","","","","" + index.getId(),"" + idxCol.sortType,"","");}}}break;}case TABLE_TYPES:{add(rows,Table.TABLE);add(rows,Table.SYSTEM_TABLE);add(rows,Table.VIEW);break;}case CATALOGS:{add(rows,catalog);break;}case SETTINGS:{add(rows,"info.BUILD_ID","" + Constants.BUILD_ID);add(rows,"info.VERSION_MAJOR","" + Constants.VERSION_MAJOR);add(rows,"info.VERSION_MINOR","" + Constants.VERSION_MINOR);add(rows,"info.VERSION","" + Constants.getFullVersion());if (admin) {String[] settings={"java.runtime.version","java.vm.name","java.vendor","os.name","os.arch","os.version","sun.os.patch.level","file.separator","path.separator","line.separator","user.country","user.language","user.variant","file.encoding"};for (String s : settings) {add(rows,"property." + s,Utils.getProperty(s,""));}}add(rows,"MODE",database.getMode().getName());add(rows,"QUERY_TIMEOUT","" + session.getQueryTimeout());ArrayList<String> settingNames=New.arrayList();HashMap<String,String> s=database.getSettings().getSettings();for (String k : s.keySet()) {settingNames.add(k);}Collections.sort(settingNames);for (String k : settingNames) {add(rows,k,s.get(k));}break;}case TYPE_INFO:{for (DataType t : DataType.getTypes()) {if (t.hidden || t.sqlType == Value.NULL) {continue;}add(rows,t.name,String.valueOf(t.sqlType),String.valueOf(MathUtils.convertLongToInt(t.maxPrecision)),t.prefix,t.suffix,t.params,String.valueOf(t.autoIncrement),String.valueOf(t.minScale),String.valueOf(t.maxScale),t.decimal ? "10" : null,String.valueOf(t.sqlTypePos),String.valueOf(t.caseSensitive),"" + DatabaseMetaData.typeNullable,"" + DatabaseMetaData.typeSearchable);}break;}case HELP:{String resource="/help.csv";try {byte[] data=Utils.getResource(resource);Reader reader=new InputStreamReader(new ByteArrayInputStream(data));Csv csv=new Csv();csv.setLineCommentCharacter('#');ResultSet rs=csv.read(reader,null);for (int i=0; rs.next(); i++) {add(rows,String.valueOf(i),rs.getString(1).trim(),rs.getString(2).trim(),rs.getString(3).trim(),rs.getString(4).trim());}} catch (Exception e) {throw DbException.convert(e);}break;}case SEQUENCES:{for (SchemaObject obj : database.getAllSchemaObjects(DbObject.SEQUENCE)) {Sequence s=(Sequence)obj;add(rows,catalog,identifier(s.getSchema().getName()),identifier(s.getName()),String.valueOf(s.getCurrentValue()),String.valueOf(s.getIncrement()),s.getBelongsToTable() ? "TRUE" : "FALSE","",String.valueOf(s.getCacheSize()),String.valueOf(s.getMinValue()),String.valueOf(s.getMaxValue()),s.getCycle() ? "TRUE" : "FALSE","" + s.getId());}break;}case USERS:{for (User u : database.getAllUsers()) {if (admin || session.getUser() == u) {add(rows,identifier(u.getName()),String.valueOf(u.isAdmin()),"","" + u.getId());}}break;}case ROLES:{break;}case RIGHTS:{break;}case FUNCTION_ALIASES:{break;}case FUNCTION_COLUMNS:{break;}case SCHEMATA:{String collation=database.getCompareMode().getName();for (Schema schema : database.getAllSchemas()) {add(rows,catalog,identifier(schema.getName()),identifier(schema.getOwner().getName()),CHARACTER_SET_NAME,collation,Constants.SCHEMA_MAIN.equals(schema.getName()) ? "TRUE" : "FALSE","","" + schema.getId());}break;}case TABLE_PRIVILEGES:{}case COLUMN_PRIVILEGES:{}case COLLATIONS:{for (Locale l : Collator.getAvailableLocales()) {add(rows,CompareMode.getName(l),l.toString());}break;}case VIEWS:{for (Table table : getAllTables(session)) {if (!table.getTableType().equals(Table.VIEW)) {continue;}String tableName=identifier(table.getName());if (!checkIndex(session,tableName,indexFrom,indexTo)) {continue;}TableView view=(TableView)table;add(rows,catalog,identifier(table.getSchema().getName()),tableName,"","NONE","NO",view.isInvalid() ? "INVALID" : "VALID","","" + view.getId());}break;}case SESSIONS:{long now=System.currentTimeMillis();for (Session s : database.getSessions()) {if (admin || s == session) {Command command=s.getCurrentCommand();long start=s.getCurrentCommandStart();if (start == 0) {start=now;}add(rows,"" + s.getId(),s.getUser().getName(),new Timestamp(s.getSessionStart()).toString(),command == null ? null : command.toString(),new Timestamp(start).toString(),"" + s.isReadOnly());}}break;}case SESSION_STATE:{for (String name : session.getVariableNames()) {Value v=session.getVariable(name);add(rows,"@" + name,"SET @" + name + " "+ v.getSQL());}for (Table table : session.getLocalTempTables()) {add(rows,"TABLE " + table.getName(),"");}String[] path=session.getSchemaSearchPath();if (path != null && path.length > 0) {StatementBuilder buff=new StatementBuilder("SET SCHEMA_SEARCH_PATH ");for (String p : path) {buff.appendExceptFirst(", ");buff.append(StringUtils.quoteIdentifier(p));}add(rows,"SCHEMA_SEARCH_PATH",buff.toString());}String schema=session.getCurrentSchemaName();if (schema != null) {add(rows,"SCHEMA","SET SCHEMA " + StringUtils.quoteIdentifier(schema));}break;}case QUERY_STATISTICS:{QueryStatisticsData control=database.getQueryStatisticsData();if (control != null) {for (QueryStatisticsData.QueryEntry entry : control.getQueries()) {add(rows,entry.sqlStatement,"" + entry.count,"" + entry.executionTimeMin,"" + entry.executionTimeMax,"" + entry.executionTimeCumulative,"" + entry.executionTimeMean,"" + entry.getExecutionTimeStandardDeviation(),"" + entry.rowCountMin,"" + entry.rowCountMax,"" + entry.rowCountCumulative,"" + entry.rowCountMean,"" + entry.getRowCountStandardDeviation());}}break;}case PARTITIONS:{for (Table table : getAllTables(session)) {String tableName=identifier(table.getName());if (!checkIndex(session,tableName,indexFrom,indexTo)) {continue;}if (table instanceof TableMate) {TableMate tableMate=(TableMate)table;TableRule tableRule=tableMate.getTableRule();int type2=tableRule.getType();switch (type2) {case TableRule.FIXED_NODE_TABLE:add(rows,catalog,identifier(table.getSchema().getName()),tableName,tableRule.getMetadataNode().getShardName(),tableRule.getMetadataNode().getCompositeObjectName(),"fixed","");break;case TableRule.GLOBAL_NODE_TABLE:GlobalTableRule globalRule=(GlobalTableRule)tableMate.getTableRule();for (ObjectNode i : globalRule.getBroadcasts()) {add(rows,catalog,identifier(table.getSchema().getName()),tableName,i.getShardName(),i.getCompositeObjectName(),"broadcast","");}break;case TableRule.SHARDED_NODE_TABLE:ShardedTableRule shardRule=(ShardedTableRule)tableMate.getTableRule();for (ObjectNode i : shardRule.getObjectNodes()) {add(rows,catalog,identifier(table.getSchema().getName()),tableName,i.getShardName(),i.getCompositeObjectName(),"sharded",shardRule.getPartitioner().getClass().getName());}break;default :break;}}}break;}case IN_DOUBT:case CROSS_REFERENCES:case CONSTRAINTS:case CONSTANTS:case TRIGGERS:case LOCKS:break;default :DbException.throwInternalError("type=" + type);}return rows;}  }
class C{  void loadImages(){  images[0]=createImageIcon("list/red.gif",getString("ListDemo.red"));  images[1]=createImageIcon("list/blue.gif",getString("ListDemo.blue"));  images[2]=createImageIcon("list/yellow.gif",getString("ListDemo.yellow"));  images[3]=createImageIcon("list/green.gif",getString("ListDemo.green"));  images[4]=createImageIcon("list/gray.gif",getString("ListDemo.gray"));  images[5]=createImageIcon("list/cyan.gif",getString("ListDemo.cyan"));  images[6]=createImageIcon("list/magenta.gif",getString("ListDemo.magenta"));}  }
class C{  public static void toEntPos(Entity ent,Vec3d pos){  ent.posX=pos.xCoord;  ent.posY=pos.yCoord;  ent.posZ=pos.zCoord;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String[] roles=getStringList(stack);  Show s=getShow(stack);  if (s == null)   return "";  String rv="";  for (int i=0; i < roles.length; i++) {    String str=s.getPeopleString(Show.getRoleForString(roles[i]));    if (str.length() > 0) {      if (rv.length() > 0)       rv+=", ";      rv+=str;    }  }  return rv;}  }
class C{  public void testCargoDaemonWelcomePage() throws Exception {  PingUtils.assertPingTrue("Cargo Daemon not started","Welcome to Cargo Daemon Web site",CargoDaemonBrowserTest.daemonUrl,logger);}  }
class C{  public PrivateKey(byte[] p,boolean compressed) throws HyperLedgerException {  if (p.length != 32) {    throw new HyperLedgerException("Invalid private key");  }  this.priv=new BigInteger(1,p).mod(curve.getN());  this.compressed=compressed;  pub=curve.getG().multiply(priv).getEncoded(compressed);}  }
class C{  private IRTMPEvent decodeServerBW(IoBuffer in){  return new ServerBW(in.getInt());}  }
class C{  public IntsRef next(){  if (emitEmptyString) {    emitEmptyString=false;    return EMPTY;  }  for (int depth=string.length(); depth > 0; ) {    PathNode node=nodes[depth - 1];    int label=node.nextLabel(a);    if (label != -1) {      string.setIntAt(depth - 1,label);      int to=node.to;      if (a.getNumTransitions(to) != 0) {        if (pathStates.get(to)) {          throw new IllegalArgumentException("automaton has cycles");        }        pathStates.set(to);        growStack(depth);        nodes[depth].resetState(a,to);        depth++;        string.setLength(depth);        string.grow(depth);      } else       if (a.isAccept(to)) {        return string.get();      }    } else {      int state=node.state;      assert pathStates.get(state);      pathStates.clear(state);      depth--;      string.setLength(depth);      if (a.isAccept(state)) {        return string.get();      }    }  }  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.623 -0400",hash_original_method="61EC9166C8D178CBF739391CDD148490",hash_generated_method="C098EAE839A3218982538AE4F7B2246C") private static StringBuilder dump(StringBuilder _cbuffer,byte value){  for (int j=0; j < 2; j++) {    _cbuffer.append(_hexcodes[value >> _shifts[j + 6] & 15]);  }  return _cbuffer;}  }
class C{  private void generateRandomClassColomns(){  Random generator=new Random(42);  m_RandClassCols=new int[NUM_RAND_COLS + 1][];  int[] classvals=classValues();  for (int i=0; i < NUM_RAND_COLS; i++) {    m_RandClassCols[i]=randomize(classvals,generator);  }  m_RandClassCols[NUM_RAND_COLS]=classvals;}  }
class C{  public static boolean isDiploid(VcfRecord rec,int sample){  final int[] gtArray=getValidGt(rec,sample);  return gtArray.length == 2;}  }
class C{  public double eval(double i,double j){  double evalKernel=Math.exp(-.5 * (Math.pow((i - j),2) / Math.pow(sigma,2)));  return evalKernel;}  }
class C{  private static int parseInt(String value,int beginIndex,int endIndex) throws NumberFormatException {  if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {    throw new NumberFormatException(value);  }  int i=beginIndex;  int result=0;  int digit;  if (i < endIndex) {    digit=Character.digit(value.charAt(i++),10);    if (digit < 0) {      throw new NumberFormatException("Invalid number: " + value);    }    result=-digit;  }  while (i < endIndex) {    digit=Character.digit(value.charAt(i++),10);    if (digit < 0) {      throw new NumberFormatException("Invalid number: " + value);    }    result*=10;    result-=digit;  }  return -result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();{    boolean success=false;    try {      splitNode=textNode.splitText(300);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public boolean isIncludeCapability(){  return includeCapability;}  }
class C{  @Override public <A>Eval<A[]> toArray(final IntFunction<A[]> generator){  return Eval.later(null);}  }
class C{  public DeleteRequest(ActionRequest request){  super(request);}  }
class C{  public static String toListString(Collection arg,int maxSize){  return toListString(arg,maxSize,false);}  }
class C{  @Override public double utility(double totalWeight,double totalPositiveWeight,Hypothesis hypo){  return hypo.getPositiveWeight() / totalWeight;}  }
class C{  public GenerateXmlRoutes(EObject model,File targetFolder,List<? extends Object> arguments) throws IOException {  initialize(model,targetFolder,arguments);}  }
class C{  public SimpleConstant(String name,boolean booleanValue,String annotation,boolean invisible){  this(name,booleanValue,annotation);  this.invisible=invisible;}  }
class C{  public ObservingEndpoint findObservingEndpoint(InetSocketAddress address){  ObservingEndpoint ep=endpoints.get(address);  if (ep == null)   ep=createObservingEndpoint(address);  return ep;}  }
class C{  private boolean isReadAllowed() throws IOException {  if (!streamOpen && selfClosed) {    throw new IOException("Attempted read on closed stream.");  }  return streamOpen;}  }
class C{  public static PodcastsFragment newInstance(Bundle args){  PodcastsFragment fragment=new PodcastsFragment();  if (args != null) {    fragment.setArguments(args);  }  return fragment;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private void resetList(){  getPreferenceScreen().removeAll();  addPreferencesFromResource(R.xml.website_preferences);  configureGlobalToggles();  if ((mCategory.showJavaScriptSites() && !PrefServiceBridge.getInstance().javaScriptEnabled())) {    getPreferenceScreen().addPreference(new AddExceptionPreference(getActivity(),ADD_EXCEPTION_KEY,getAddExceptionDialogMessage(),this));  }}  }
class C{  public final void testValidateFails(){  MaxLengthValidator maxLengthValidator=new MaxLengthValidator("foo",2);  assertFalse(maxLengthValidator.validate("abc"));}  }
class C{  public CLImage2D createImage2D(CLMem.Usage usage,Image image,boolean allowUnoptimizingDirectRead){  int width=image.getWidth(null), height=image.getHeight(null);  ImageInfo info=ImageIOUtils.getImageInfo(image);  return createImage2D(usage,info.clImageFormat,width,height,0,info.dataGetter.getData(image,null,true,allowUnoptimizingDirectRead,getByteOrder()),true);}  }
class C{  public Task<ComputeSystemRestRep> discover(URI id){  UriBuilder builder=client.uriBuilder(getIdUrl() + "/discover");  return postTaskURI(builder.build(id));}  }
class C{  public T caseEntity(Entity object){  return null;}  }
class C{  @Override public Object createMapComponentFromJoinedRow(AbstractRecord dbRow,JoinedAttributeManager joinManger,ObjectBuildingQuery query,CacheKey parentCacheKey,AbstractSession session,boolean isTargetProtected){  return createMapComponentFromRow(dbRow,query,parentCacheKey,session,isTargetProtected);}  }
class C{  public boolean isOffsetNeeded(){  return offsetNeeded;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.259 -0400",hash_original_method="58E13E76C10508B840C89750DBA2F694",hash_generated_method="130A5B6E47822D08977C6D5311FCEB4E") public PriorityQueue(){  this(DEFAULT_CAPACITY);}  }
class C{  private void addSwatchToRow(TableRow row,View swatch,int rowNumber){  if (rowNumber % 2 == 0) {    row.addView(swatch);  } else {    row.addView(swatch,0);  }}  }
class C{  public CategoryItemEntity(Shape area,String toolTipText,String urlText,CategoryDataset dataset,int series,Object category,int categoryIndex){  super(area,toolTipText,urlText);  ParamChecks.nullNotPermitted(dataset,"dataset");  this.dataset=dataset;  this.series=series;  this.category=category;  this.categoryIndex=categoryIndex;  this.rowKey=dataset.getRowKey(series);  this.columnKey=dataset.getColumnKey(categoryIndex);}  }
class C{  public boolean loadFromAssetStripFrame(String filename,int x,int y,int width,int height){  InputStream inputStream;  BitmapFactory.Options options=new BitmapFactory.Options();  options.inPreferredConfig=Bitmap.Config.ARGB_8888;  try {    inputStream=gameIO.readAsset(filename);    Bitmap temp=BitmapFactory.decodeStream(inputStream,null,options).copy(Bitmap.Config.ARGB_8888,true);    inputStream.close();    e_bitmap=Bitmap.createBitmap(temp,x,y,width,height);  } catch (  IOException e) {    e.printStackTrace();    return false;  }  return true;}  }
class C{  public SocketAddress obtainLocalAddress(InetAddress dst,int dstPort,InetAddress localAddress,int localPort) throws IOException {  String key=makeKey(dst,dstPort);  Socket clientSock=getSocket(key);  if (clientSock == null) {    clientSock=sipStack.getNetworkLayer().createSocket(dst,dstPort,localAddress,localPort);    putSocket(key,clientSock);  }  return clientSock.getLocalSocketAddress();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.120 -0500",hash_original_method="5D8E4B66E2DC4C0F0AE2C3587B4A421D",hash_generated_method="07E69C4F0157179849617A1E3687C2FD") public StringBuffer insert(int index,long l){  addTaint(l);  addTaint(index);  return this;}  }
class C{  public static void main(String[] argv){  runFilter(new Standardize(),argv);}  }
class C{  private boolean cancelDiscardScrollingAnimation(){  if (mOverviewAnimationType == OverviewAnimationType.DISCARD || mOverviewAnimationType == OverviewAnimationType.UNDISCARD || mOverviewAnimationType == OverviewAnimationType.DISCARD_ALL) {    mTabAnimations.cancel(null,StackTab.Property.SCROLL_OFFSET);    return true;  }  return false;}  }
class C{  public PPreferredIdentityHeader createPPreferredIdentityHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  PPreferredIdentity preferredIdentity=new PPreferredIdentity();  preferredIdentity.setAddress(address);  return preferredIdentity;}  }
class C{  public boolean deleteDevice(String mac){  JsonObject out=broadlinkExecuteCommand(BroadlinkConstants.CMD_DEVICE_DELETE_ID,BroadlinkConstants.CMD_DEVICE_DELETE,mac);  int code=out.get(BroadlinkConstants.CODE).getAsInt();  return code == 0;}  }
class C{  private static String convertToMixed(int addressLow,int addressHigh){  if (addressHigh == 0) {    if (addressLow >= 120) {      return "c" + String.valueOf(addressLow - 120) + " ("+ String.valueOf(addressLow)+ ")";    } else     if (addressLow >= 110) {      return "b" + String.valueOf(addressLow - 110) + " ("+ String.valueOf(addressLow)+ ")";    } else     if (addressLow >= 100) {      return "a" + String.valueOf(addressLow - 100) + " ("+ String.valueOf(addressLow)+ ")";    } else {      return String.valueOf(addressLow & 0x7f);    }  } else {    return String.valueOf(LOCO_ADR(addressHigh,addressLow));  }}  }
class C{  private void initContents(){  if (null != initialThreshold) {    thresholdBox.setText(String.valueOf(initialThreshold));  }  lowerThresholdCheckBox.setSelection(initialLowerThreshold);  timerangeSpinner.setSelection((int)initialTimerange);  if (null != initialsEmails) {    String emailsText="";    for (    String email : initialsEmails) {      if (!emailsText.isEmpty()) {        emailsText+=NEW_LINE;      }      emailsText+=email;    }    emailsBox.setText(emailsText);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(DShowMediaPlayer.getUseOverlay());}  }
class C{  @Bean public SpringRejectedJobsHandler springRejectedJobsHandler(){  return new SpringCallerRunsRejectedJobsHandler();}  }
class C{  private String createConnectionName(){  StringBuilder nameBuffer=new StringBuilder();  nameBuffer.append(getConnectionType());  nameBuffer.append("-");  nameBuffer.append(_host);  nameBuffer.append("-");  nameBuffer.append(_port);  return nameBuffer.toString();}  }
class C{  public int hashCode(){  return 352831696 + getBase().hashCode() * 7;}  }
class C{  public UserGuildSettingsUpdateHandler(ImplDiscordAPI api){  super(api,true,"USER_GUILD_SETTINGS_UPDATE");}  }
class C{  public String toString(){  return FMT_DECIMAL_DEGREES.format(northSouth) + "," + FMT_DECIMAL_DEGREES.format(eastWest);}  }
class C{  public boolean isMultiStatus(){  return false;}  }
class C{  static String saveLibrary(final File dir,final String libraryName) throws IOException {  String libraryFileName="lib" + libraryName;  URL libraryResource=findLibraryResource(libraryFileName);  String basename=FilenameUtils.getName(libraryResource.getPath());  File file=new File(dir,basename);  file.deleteOnExit();  try (InputStream in=libraryResource.openStream();OutputStream out=new FileOutputStream(file)){    IOUtils.copy(in,out);  }   return file.getAbsolutePath();}  }
class C{  public boolean isOwner(String groupId,String email) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return doesEntityExist(groupId + "/owner/" + email);}  }
class C{  public void buildQuadTreeFromSurvey(String surveyPopulationFolder){  LOG.info("Parse survey population...");  this.surveyPopulation=new ComprehensivePopulationReader();  this.surveyPopulation.parse(surveyPopulationFolder);  LOG.info("Building QuadTree from survey population...");  Counter counter=new Counter("  persons placed # ");  for (  Id personId : this.surveyPopulation.getScenario().getPopulation().getPersons().keySet()) {    Person person=this.surveyPopulation.getScenario().getPopulation().getPersons().get(personId);    Plan plan=person.createCopyOfSelectedPlanAndMakeSelected();    Coord home=getQtPlanHomeCoordinate(plan);    String a=SaDemographicsEmployment.convertNmbm2004Employment(PersonUtils.isEmployed(person)).toString();    String b=SaDemographicsAge.getAgeClass(PersonUtils.getAge(person)).toString();    Id<Household> hhid=Id.create((String)surveyPopulation.getScenario().getPopulation().getPersonAttributes().getAttribute(personId.toString(),"householdId"),Household.class);    Household household=surveyPopulation.getScenario().getHouseholds().getHouseholds().get(hhid);    String c=SaDemographicsHouseholdSize.getHouseholdSizeClass(household.getMemberIds().size()).toString();    String d=SaDemographicsIncome.convertNmbm2004Income(IncomeTravelSurvey2004.getIncomeEnum(household.getIncome())).toString();    String signature=String.format("%s_%s_%s_%s",a,b,c,d);    if (home != null) {      if (!qtMap.containsKey(signature)) {        qtMap.put(signature,new QuadTree<Plan>(qtExtent[0],qtExtent[1],qtExtent[2],qtExtent[3]));      }      qtMap.get(signature).put(home.getX(),home.getY(),plan);    }    counter.incCounter();  }  counter.printCounter();  LOG.info("Done building QuadTree. Total of " + qtMap.size() + " signature QuadTrees");  for (  String s : qtMap.keySet()) {    LOG.info("  |_ " + s + ": "+ qtMap.get(s).size()+ " observations");  }}  }
class C{  protected void finalize() throws Throwable {  try {    if (this.passwd != null) {      java.util.Arrays.fill(this.passwd,'0');      this.passwd=null;    }    if (this.key != null) {      java.util.Arrays.fill(this.key,(byte)0x00);      this.key=null;    }  }  finally {    super.finalize();  }}  }
class C{  public static Intent makeIntent(Uri url){  return new Intent(ACTION_DOWNLOAD_IMAGE,url);}  }
class C{  private void testSessionClose(int nodes) throws Throwable {  createServers(nodes);  CopycatClient client1=createClient();  CopycatClient client2=createClient();  client1.submit(new TestClose()).thenRun(null);  await(Duration.ofSeconds(10).toMillis(),1);  client1.onEvent("closed",null);  client2.close().thenRun(null);  await(Duration.ofSeconds(10).toMillis(),2);}  }
class C{  public ClearAnnotationModelEvent(AnnotationModel model){  this.annotationModel=model;}  }
class C{  private void onPlaybackEnded(){  pause();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void disassociateComputeImages(ComputeImageServer imageServer){  StringSet successImages=imageServer.getComputeImages();  if (!CollectionUtils.isEmpty(successImages)) {    Iterator<String> itr=successImages.iterator();    while (itr.hasNext()) {      itr.next();      itr.remove();    }  }  StringSet failedImages=imageServer.getFailedComputeImages();  if (!CollectionUtils.isEmpty(failedImages)) {    Iterator<String> itr=failedImages.iterator();    while (itr.hasNext()) {      itr.next();      itr.remove();    }  }}  }
class C{  private static void moveNote(String host,String hash,Note note) throws IOException, JSONException, AuthenticatorException {  HttpURLConnection urlConnection=null;  BufferedReader reader=null;  String jsonStr;  String path=host + "/api/v1/notebooks/" + note.getOldNotebookId()+ "/notes/"+ note.getId()+ "/move/"+ note.getNotebookId();  try {    URL url=new URL(path);    urlConnection=(HttpURLConnection)url.openConnection();    urlConnection.setRequestProperty("Content-Type","application/json; charset=UTF-8");    urlConnection.setRequestProperty("Accept","application/json");    urlConnection.setRequestProperty("Authorization","Basic " + hash);    urlConnection.setConnectTimeout(10000);    urlConnection.setReadTimeout(15000);    urlConnection.setRequestMethod("GET");    urlConnection.connect();    InputStream inputStream=urlConnection.getInputStream();    StringBuilder builder=new StringBuilder();    reader=new BufferedReader(new InputStreamReader(inputStream));    String line;    while ((line=reader.readLine()) != null) {      builder.append(line).append("\n");    }    jsonStr=builder.toString();    int responseCode=urlConnection.getResponseCode();    if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {      throw new AuthenticatorException("Authentication failed");    } else     if (responseCode != HttpURLConnection.HTTP_OK) {      Log.d(LOG_TAG,"Error while creating note, response code: " + urlConnection.getResponseCode());      throw new ConnectException();    } else {      JSONObject json=new JSONObject(jsonStr);      if (!json.getBoolean("success")) {        throw new ConnectException();      }    }  }  finally {    if (urlConnection != null) {      urlConnection.disconnect();    }    if (reader != null) {      try {        reader.close();      } catch (      final IOException e) {        Log.e(LOG_TAG,"Error closing stream",e);      }    }  }}  }
class C{  public void appendBytes(byte[] bs,int start,int len){  elems=ArrayUtils.ensureCapacity(elems,length + len);  System.arraycopy(bs,start,elems,length,len);  length+=len;}  }
class C{  public final boolean isDependentRegionLinefeedStatusChanged(){  return (myFlags & DEPENDENT_REGION_LF_CHANGED_MASK) != 0;}  }
class C{  public boolean areEntityCapsSupportedByServer(){  return areEntityCapsSupported(weakRefConnection.get().getServiceName());}  }
class C{  public void decodeTilePixels(byte[] input,Rectangle newRect,short[] sdata){  byte byteArray[]=new byte[unitsInThisTile * 2];  lzwDecoder.decode(input,byteArray,newRect.height);  unpackShorts(byteArray,sdata,unitsInThisTile);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.259 -0500",hash_original_method="D5BEA44E320721AFAC8F5C9BC1BCBDE4",hash_generated_method="750FE538DFFBF83E01F2E82D4AAF23C6") public StringBuilder reverse(){  reverse0();  return this;}  }
class C{  public ComponentBuilder event(ClickEvent clickEvent){  current.setClickEvent(clickEvent);  return this;}  }
class C{  @Override public void X(final Object e,final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.X()");  }  javascript.execute(formObj,PdfDictionary.X,ActionHandler.FOCUS_EVENT,' ');}  }
class C{  public ShiftingBitSet(){  initWords(BITS_PER_WORD);  sizeIsSticky=false;}  }
class C{  @SmallTest public void testPreconditions(){  assertNotNull(mLeftButton);  assertTrue("center button should be right of left button",mLeftButton.getRight() < mCenterButton.getLeft());  assertTrue("right button should be right of center button",mCenterButton.getRight() < mRightButton.getLeft());}  }
class C{  @Deprecated @Override public void recycle(){  LOG.trace("enter MultipartPostMethod.recycle()");  super.recycle();  parameters.clear();}  }
class C{  public Tasks<FileShareRestRep> pauseFileContinuousCopies(URI id,FileReplicationParam input){  TaskList tasks=client.post(TaskList.class,input,getContinuousCopiesUrl() + "/pause",id);  return new Tasks<FileShareRestRep>(client,tasks.getTaskList(),FileShareRestRep.class);}  }
class C{  public void deleteLogicalPort(String id,FutureCallback<Void> responseCallback) throws IOException {  deleteLogicalPort(id,responseCallback,false);}  }
class C{  private void releaseWaiters(int phase){  QNode q;  Thread t;  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;  while ((q=head.get()) != null && q.phase != (int)(root.state >>> PHASE_SHIFT)) {    if (head.compareAndSet(q,q.next) && (t=q.thread) != null) {      q.thread=null;      LockSupport.unpark(t);    }  }}  }
class C{  public synchronized byte toByteArray()[]{  return Arrays.copyOf(buf,count);}  }
class C{  public boolean isNetworkRoaming(){  return "true".equals(SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ISROAMING));}  }
class C{  public void addLocationToExif(Location location){  final Long ALTITUDE_PRECISION=1L;  mExif.addGpsTags(location.getLatitude(),location.getLongitude());  mExif.addGpsDateTimeStampTag(location.getTime());  if (location.hasAltitude()) {    double altitude=location.getAltitude();    addExifTag(ExifInterface.TAG_GPS_ALTITUDE,rational(altitude,ALTITUDE_PRECISION));    short altitudeRef=altitude < 0 ? ExifInterface.GpsAltitudeRef.SEA_LEVEL_NEGATIVE : ExifInterface.GpsAltitudeRef.SEA_LEVEL;    addExifTag(ExifInterface.TAG_GPS_ALTITUDE_REF,altitudeRef);  }}  }
class C{  public AttachmentSmallMantis(){  requestFileName="attachment-small-mantis.query";  requestContentType="multipart/related; start-info=" + MimeTypes.TEXT_XML + "; type='application/xop+xml'; "+ "boundary=:gkMa5KAvuHP7ahe9IQHONLgnncvv:";  responseFile="attachment-small-mantis.answer";}  }
class C{  @Override public Request<String> logs(ProjectReference projectReference,long processId){  checkNotNull(projectReference);  final Invocation request=getWebTarget().path(projectReference.workspaceId()).path("logs").path(String.valueOf(processId)).request().accept(TEXT_PLAIN).buildGet();  return new SimpleRequest<>(request,String.class,getAuthenticationManager());}  }
class C{  public static void main(String args[]) throws FileNotFoundException {  EvolutionState state=new EvolutionState();  state.output=new Output(true);  state.output.addLog(ec.util.Log.D_STDOUT,false);  state.output.addLog(ec.util.Log.D_STDERR,true);  GrammarParser gp=new GrammarParser();  gp.parseRules(state,new BufferedReader(new FileReader(new File(args[0]))),null);  gp.validateRules();  System.err.println(gp);}  }
class C{  public VOLocalizedText(String locale,String text,int version){  this.locale=locale;  this.text=text;  this.version=version;}  }
class C{  public static void d(String tag,String msg,Object... args){  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public InvalidJarIndexException(String s){  super(s);}  }
class C{  public Matrix4x3f swap(Matrix4x3f other){  MemUtil.INSTANCE.swap(this,other);  byte props=properties;  this.properties=other.properties;  other.properties=props;  return this;}  }
class C{  public int indexOf(String string){  return indexOf(string,0);}  }
class C{  private Response requestCredentials(){  Response response=Response.status(HttpServletResponse.SC_UNAUTHORIZED).header(HttpHeaders.WWW_AUTHENTICATE,"basic realm=\"" + AUTH_REALM_NAME + '"').cacheControl(_cacheControl).header(HEADER_PRAGMA,HEADER_PRAGMA_VALUE).build();  return response;}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Video) {    Video other=(Video)obj;    return Objects.equal(name,other.name) && Objects.equal(url,other.url) && duration == other.duration;  } else {    return false;  }}  }
class C{  private void initializeTable(int capacity){  this.table=new Object[capacity * 2];  this.mask=table.length - 1;  this.clean=0;  this.maximumLoad=capacity * 2 / 3;}  }
class C{  public ProxyConfig(){  type=null;  host=null;  port=-1;  hostAndPort=null;  user=null;  password=null;  expectContinue=false;  nonProxyHosts=Collections.emptySet();}  }
class C{  private void override(final boolean override){  flags=Bits.set(flags,OVERRIDE_BIT,override);}  }
class C{  @SuppressWarnings("unchecked") public static Iterable<? extends ParameterizedTypeRef> declaredSuperTypes(final Type type){  if (type instanceof TClass) {    final TClass c=(TClass)type;    if (c.getSuperClassRef() != null) {      return Iterables.concat(concat(singletonList(c.getSuperClassRef()),c.getImplementedInterfaceRefs()));    } else {      return c.getImplementedInterfaceRefs();    }  }  if (type instanceof TInterface) {    final TInterface r=(TInterface)type;    return r.getSuperInterfaceRefs();  }  if (type instanceof PrimitiveType) {    PrimitiveType assignmentCompatible=((PrimitiveType)type).getAssignmentCompatible();    if (assignmentCompatible != null) {      ParameterizedTypeRef typeRef=TypeRefsFactory.eINSTANCE.createParameterizedTypeRef();      typeRef.setDeclaredType(assignmentCompatible);      return Collections.singletonList(typeRef);    }  }  if (type instanceof TObjectPrototype) {    TObjectPrototype tObjectPrototype=(TObjectPrototype)type;    if (tObjectPrototype.getSuperType() != null) {      return singletonList(tObjectPrototype.getSuperType());    }  }  return Collections.emptyList();}  }
class C{  void optionType(){}  }
class C{  public void onBlueButtonClick(View v){  if (isSubscribed()) {    final SharedPreferences settings=getSharedPreferencesForCurrentUser();    boolean entitled=settings.getBoolean(BLUE_BUTTON,false);    if (!entitled) {      String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.entitlement_sku_blue));      storeRequestId(requestId,BLUE_BUTTON);    } else {      centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.bluebutton));    }  } else {    generateSubscribeDialog();  }}  }
class C{  public void fireVetoableChange(String name,Object oldValue,Object newValue) throws PropertyVetoException {  super.fireVetoableChange(name,oldValue,newValue);  beanContextChildSupport.fireVetoableChange(name,oldValue,newValue);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == AnnotatableElement.class) {switch (baseFeatureID) {case TypesPackage.ANNOTATABLE_ELEMENT__ANNOTATIONS:      return TypesPackage.PACKAGE_MEMBER__ANNOTATIONS;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  protected void loadImage(Image image){  MediaTracker mTracker=getTracker();synchronized (mTracker) {    int id=getNextID();    mTracker.addImage(image,id);    try {      mTracker.waitForID(id,0);    } catch (    InterruptedException e) {      System.out.println("INTERRUPTED while loading Image");    }    loadStatus=mTracker.statusID(id,false);    mTracker.removeImage(image,id);    width=image.getWidth(imageObserver);    height=image.getHeight(imageObserver);  }}  }
class C{  public Polynomial(double c){  order=0;  a=new double[1];  a[0]=c;}  }
class C{  static File createLibsDirectory(Context context){  File libsDirectory=getLibsDirectory(context);  if (!libsDirectory.isDirectory() && !libsDirectory.mkdirs()) {    throw new RuntimeException("could not create libs directory");  }  return libsDirectory;}  }
class C{  public static int convertAlphaFloatToInt(float alphaFloat){  if (alphaFloat > 1f)   return Constant.DEFAULT_ALPHA;  if (alphaFloat < 0f)   return 0;  return (int)(alphaFloat * Constant.DEFAULT_ALPHA);}  }
class C{  @SuppressWarnings("unchecked") public void mouseReleased(MouseEvent e){  VisualizationViewer<V,E> vv=(VisualizationViewer<V,E>)e.getSource();  if (e.getModifiers() == modifiers) {    if (down != null) {      Point2D out=e.getPoint();      if (vertex == null && heyThatsTooClose(down,out,5) == false) {        pickContainedVertices(vv,down,out,true);      }    }  } else   if (e.getModifiers() == this.addToSelectionModifiers) {    if (down != null) {      Point2D out=e.getPoint();      if (vertex == null && heyThatsTooClose(down,out,5) == false) {        pickContainedVertices(vv,down,out,false);      }    }  }  down=null;  vertex=null;  edge=null;  rect.setFrame(0,0,0,0);  vv.removePostRenderPaintable(lensPaintable);  vv.repaint();}  }
class C{  public GifDrawableBuilder(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.947 -0500",hash_original_method="0CB6E06CAEEE818FC3721A3BD57FF4EB",hash_generated_method="7313943BB1C6B61885A855F50AD7A371") public ViewPropertyAnimator alpha(float value){  animateProperty(ALPHA,value);  return this;}  }
class C{  private void unreadChar(char ch){  this.charReadTooMuch=ch;}  }
class C{  public static final String unescapeHtml4(final String input){  return UNESCAPE_HTML4.translate(input);}  }
class C{  public static void addNamespace(String namespace,String bundle){  map.put(namespace,ResourceBundle.getBundle(bundle,Locale.getDefault()));}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.BINDING_PATTERN__PROPERTIES:    getProperties().clear();  getProperties().addAll((Collection<? extends BindingProperty>)newValue);return;case N4JSPackage.BINDING_PATTERN__ELEMENTS:getElements().clear();getElements().addAll((Collection<? extends BindingElement>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void writeExif(Bitmap bmap,OutputStream exifOutStream) throws IOException {  if (bmap == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  bmap.compress(Bitmap.CompressFormat.JPEG,90,s);  s.flush();}  }
class C{  private boolean handleMessageDuplexScanReport(LocoNetMessage m){  if ((m.getElement(0) != LnConstants.OPC_PEER_XFER) || (m.getElement(1) != LnConstants.RE_DPLX_SCAN_OP_LEN) || (m.getElement(2) != LnConstants.RE_DPLX_SCAN_REPORT_B2)|| (m.getElement(3) != LnConstants.RE_DPLX_SCAN_REPORT_B3)) {    return false;  }  handleChannelSignalReport(m.getElement(4),m.getElement(5),m.getElement(6));  return true;}  }
class C{  public Clustering<Model> run(Database database,Relation<V> vrel){  this.fulldatabase=preprocess(database,vrel);  if (LOG.isVerbose()) {    StringBuilder msg=new StringBuilder();    msg.append("DB size: ").append(fulldatabase.size());    msg.append("\nmin Dim: ").append(minDim);    LOG.verbose(msg.toString());  }  processedIDs=DBIDUtil.newHashSet(fulldatabase.size());  noiseDim=dimensionality(fulldatabase);  FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress("CASH Clustering",fulldatabase.size(),LOG) : null;  Clustering<Model> result=doRun(fulldatabase,progress);  LOG.ensureCompleted(progress);  if (LOG.isVerbose()) {    StringBuilder msg=new StringBuilder();    for (    Cluster<Model> c : result.getAllClusters()) {      if (c.getModel() instanceof LinearEquationModel) {        LinearEquationModel s=(LinearEquationModel)c.getModel();        msg.append("\n Cluster: Dim: " + s.getLes().subspacedim() + " size: "+ c.size());      } else {        msg.append("\n Cluster: " + c.getModel().getClass().getName() + " size: "+ c.size());      }    }    LOG.verbose(msg.toString());  }  return result;}  }
class C{  public A last(){  A last=null;  List<A> t=this;  while (t.tail != null) {    last=t.head;    t=t.tail;  }  return last;}  }
class C{  public void trace(Marker marker,String format,Object... argArray){}  }
class C{  public boolean hasHref(){  return getHref() != null;}  }
class C{  private Pair<Double,Double> calculateMinMaxFast(){  debug("ValueSourceData: calculateMinMaxFast()");  Pair<Double,Double> minMaxValues=new Pair<Double,Double>(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY);  GroupCellSeriesData dataForAllGroupCells=getSeriesDataForAllGroupCells();  Set<Double> yValues=dataForAllGroupCells.getDistinctValues(SeriesUsageType.MAIN_SERIES,PlotDimension.VALUE);  for (  Double value : yValues) {    if (value < minMaxValues.getFirst()) {      minMaxValues.setFirst(value);    }    if (value > minMaxValues.getSecond()) {      minMaxValues.setSecond(value);    }  }  if (yValues.isEmpty()) {    minMaxValues.setFirst(Double.NEGATIVE_INFINITY);    minMaxValues.setSecond(Double.POSITIVE_INFINITY);  }  debug("min: " + minMaxValues.getFirst());  debug("max: " + minMaxValues.getSecond());  return minMaxValues;}  }
class C{  public void dump(String prefix,Appendable out) throws IOException {  out.append(prefix).append(this.toString());  for (  Node childNode : children) {    if (childNode != null) {      out.append(LINE_SEPARATOR);      ((SimpleNode)childNode).dump(prefix + " ",out);    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.COMMA_EXPRESSION__EXPRS:    getExprs().clear();  getExprs().addAll((Collection<? extends Expression>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static int memberValueHashCode(Object value){  Class<?> type=value.getClass();  if (!type.isArray())   return value.hashCode();  if (type == byte[].class)   return Arrays.hashCode((byte[])value);  if (type == char[].class)   return Arrays.hashCode((char[])value);  if (type == double[].class)   return Arrays.hashCode((double[])value);  if (type == float[].class)   return Arrays.hashCode((float[])value);  if (type == int[].class)   return Arrays.hashCode((int[])value);  if (type == long[].class)   return Arrays.hashCode((long[])value);  if (type == short[].class)   return Arrays.hashCode((short[])value);  if (type == boolean[].class)   return Arrays.hashCode((boolean[])value);  return Arrays.hashCode((Object[])value);}  }
class C{  public void readGraphics(ObjectInputStream objstream) throws IOException {  Debug.message("omgraphics","OMGraphicList: Reading cached graphics");  try {    while (true) {      try {        OMGraphic omg=(OMGraphic)objstream.readObject();        graphics.add(omg);      } catch (      ClassNotFoundException e) {        e.printStackTrace();      }catch (      OptionalDataException ode) {        ode.printStackTrace();      }    }  } catch (  EOFException e) {  }}  }
class C{  public static boolean isXML11Valid(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public AuthScope(final String host,int port){  this(host,port,ANY_REALM,ANY_SCHEME);}  }
class C{  private void notifyLimitReached(String limitName,String iface){  final int length=mObservers.beginBroadcast();  for (int i=0; i < length; i++) {    try {      mObservers.getBroadcastItem(i).limitReached(limitName,iface);    } catch (    RemoteException e) {    }catch (    RuntimeException e) {    }  }  mObservers.finishBroadcast();}  }
class C{  void sendStoredExceptions(){  if (!wifiOnly || utils.isOnWifi(context)) {    Map<String,StoredException> storedExceptions=getStoredExceptions();    if (storedExceptions != null) {      for (      Map.Entry<String,StoredException> entry : storedExceptions.entrySet()) {        String fileName=entry.getKey();        StoredException storedException=entry.getValue();        for (        CrashReportingService service : services) {          if (service.isEnabled()) {            Callback<Object> callback=new DeleteFileCallback(context,fileName);            service.logEvent(storedException,callback);          }        }      }    }  }}  }
class C{  public static ValueTime fromMillis(long ms){  return fromNanos(DateTimeUtils.nanosFromDate(ms));}  }
class C{  public int checkIfReceiptDetailObjectExist(final List<ReceiptDetail> newReceiptDetailSet,final ReceiptDetail receiptDetailObj){  int check=-1;  for (int m=0; m < newReceiptDetailSet.size(); m++) {    final ReceiptDetail receiptDetail=newReceiptDetailSet.get(m);    if (receiptDetailObj.getAccounthead().getId().equals(receiptDetail.getAccounthead().getId())) {      check=m;      break;    } else     continue;  }  return check;}  }
class C{  public ProfilePreferencesPanel(){  initComponents();  this.spinnerTimeout.setValue(ProfileManager.getDefault().getAutoStartActiveProfileTimeout());  this.profilesTblValueChanged(null);  this.searchPathsTblValueChanged(null);  int index=ProfileManager.getDefault().getAllProfiles().indexOf(ProfileManager.getDefault().getActiveProfile());  if (index != -1) {    this.profilesTbl.setRowSelectionInterval(index,index);  }}  }
class C{  private void updateDatabaseFromHeaders(State state,InnerState innerState){  mInfo.mETag=innerState.mHeaderETag;  mDB.updateDownload(mInfo);}  }
class C{  public double op(final double x){  final double sn=Math.sin(this.asr * (-x + 1) * 0.5);  return Math.exp((sn * hk - hs) / (1.0 - sn * sn));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:00.576 -0500",hash_original_method="F319D2CF7E3E715B8D39AE2FABF6BF7B",hash_generated_method="9E3644C8010B59580E039822D66A62AC") private void loadEriFileFromModem(){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void registerActivityType(Class<? extends Activity> activityClass,ActivityFactory factory){  registerActivityType(activityClass.getName(),activityClass,factory);}  }
class C{  protected void insertDeltaTree(IJavaElement element,JavaElementDelta delta){  JavaElementDelta childDelta=createDeltaTree(element,delta);  if (!equalsAndSameParent(element,getElement())) {    addAffectedChild(childDelta);  }}  }
class C{  void clear(){  keysPressed.clear();  modifiers=0;}  }
class C{  @Deprecated public List<LinkedNotebook> listNotebooks() throws EDAMUserException, EDAMSystemException, TException, EDAMNotFoundException {  return getAsyncPersonalClient().getClient().listLinkedNotebooks(getAsyncPersonalClient().getAuthenticationToken());}  }
class C{  protected void removeLinkFromStorage(Link lt){  String id=getLinkId(lt);  storageSource.deleteRowAsync(LINK_TABLE_NAME,id);}  }
class C{  public void testBug77217() throws Exception {  if (!this.isSetForFabricTest) {    return;  }  this.conn=(FabricMySQLConnection)getNewDefaultDataSource().getConnection(this.username,this.password);  this.conn.setServerGroupName("ha_config1_group");  PreparedStatement ps=this.conn.prepareStatement("select ? from dual");  ps.setFetchSize(Integer.MIN_VALUE);  ps.setString(1,"abc");  ResultSet rs=ps.executeQuery();  rs.next();  assertEquals("abc",rs.getString(1));  rs.close();  ps.close();  this.conn.close();}  }
class C{  public void refilter(){  fixture.refilter();}  }
class C{  void transitionToNextEdge(double residualMove){  indexOnPath+=pathDirection;  if ((pathDirection > 0 && indexOnPath >= pathFromHomeToWork.size()) || (pathDirection < 0 && indexOnPath < 0)) {    System.out.println(this + " has reached its destination");    reachedDestination=true;    indexOnPath-=pathDirection;    return;  }  GeomPlanarGraphEdge edge=(GeomPlanarGraphEdge)pathFromHomeToWork.get(indexOnPath).getEdge();  setupEdge(edge);  speed=progress(residualMove);  currentIndex+=speed;  if (linkDirection == 1 && currentIndex > endIndex) {    transitionToNextEdge(currentIndex - endIndex);  } else   if (linkDirection == -1 && currentIndex < startIndex) {    transitionToNextEdge(startIndex - currentIndex);  }}  }
class C{  public MockMailboxManager(MailboxManager mailboxManager) throws MailboxException, UnsupportedEncodingException {  this.mockMailboxManager=mailboxManager;  feedMockMailboxManager();}  }
class C{  public static void stripInlineContent(List inlineContent){  boolean collapse=false;  boolean allWhitespace=true;  for (Iterator i=inlineContent.iterator(); i.hasNext(); ) {    Styleable node=(Styleable)i.next();    if (node.getStyle().isInline()) {      InlineBox iB=(InlineBox)node;      boolean collapseNext=stripWhitespace(iB,collapse);      if (!iB.isRemovableWhitespace()) {        allWhitespace=false;      }      collapse=collapseNext;    } else {      if (!canCollapseThrough(node)) {        allWhitespace=false;        collapse=false;      }    }  }  if (allWhitespace) {    stripTextContent(inlineContent);  }}  }
class C{  void doReset(){}  }
class C{  public BufferedRandomAccessFile(File file,String mode) throws IOException {  super(file,mode);  this.init(0);}  }
class C{  public void revokePolicy(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"revokePolicy started.");  }  CommonUtils.revokePolicy(context);  operation.setStatus(resources.getString(R.string.operation_value_completed));  resultBuilder.build(operation);  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"revokePolicy completed.");  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case FunctionblockPackage.FUNCTION_BLOCK__CONFIGURATION:    setConfiguration((Configuration)newValue);  return;case FunctionblockPackage.FUNCTION_BLOCK__STATUS:setStatus((Status)newValue);return;case FunctionblockPackage.FUNCTION_BLOCK__FAULT:setFault((Fault)newValue);return;case FunctionblockPackage.FUNCTION_BLOCK__EVENTS:getEvents().clear();getEvents().addAll((Collection<? extends Event>)newValue);return;case FunctionblockPackage.FUNCTION_BLOCK__OPERATIONS:getOperations().clear();getOperations().addAll((Collection<? extends Operation>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected VersionHistory constructVersionHistoryForLastPublishedVersion(Resource resource){  if (resource.isPublished() && resource.getVersionHistory().isEmpty()) {    VersionHistory vh=new VersionHistory(resource.getEmlVersion(),resource.getLastPublished(),resource.getStatus());    vh.setRecordsPublished(resource.getRecordsPublished());    return vh;  }  return null;}  }
class C{  private void checkImageToImageDatastoreMappingDocument(final State current){  Operation getimageToImageDatastoreMappingService=((CloudStoreHelperProvider)getHost()).getCloudStoreHelper().createGet(ImageToImageDatastoreMappingServiceFactory.SELF_LINK + "/" + current.image+ "_"+ current.destinationDatastore).setCompletion(null);  sendRequest(getimageToImageDatastoreMappingService);}  }
class C{  public JDKToolLauncher addVMArg(String arg){  vmArgs.add(arg);  return this;}  }
class C{  protected boolean isInsertModeToggled(){  return fToggleEating;}  }
class C{  private void scrollStarted(ScrollDirection direction,float x,float y){  if (mEdgeSwipeHandler != null) {    mEdgeSwipeHandler.swipeStarted(direction,x,y);    mEdgeSwipeStarted=true;  }}  }
class C{  public Resolution doWithCredential(String userId,Callable<Resolution> action){  Credential credential=loadCredential(userId);  if (credential != null) {    try {      return action.call();    } catch (    Exception e) {      throw new RuntimeException(e);    }  }  return new RedirectResolution(computeAuthorizationUrl());}  }
class C{  public int read(long pos) throws IOException {  if (pos >= length) {    return -1;  }  byte[] buf=getCacheBlock(pos / BUFFER_LENGTH);  if (buf == null) {    return -1;  }  return buf[(int)(pos % BUFFER_LENGTH)] & 0xff;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Override public void endWindow(){  Double val;  for (  Map.Entry<K,MutableDouble> e : denominators.entrySet()) {    K key=e.getKey();    MutableDouble nval=numerators.get(key);    if (nval == null) {      nval=new MutableDouble(0.0);    } else {      numerators.remove(key);    }    if (percent) {      val=(1 - nval.doubleValue() / e.getValue().doubleValue()) * 100;    } else {      val=1 - nval.doubleValue() / e.getValue().doubleValue();    }    margin.emit(new KeyValPair(key,getValue(val.doubleValue())));  }  numerators.clear();  denominators.clear();}  }
class C{  public void addListener(final IAddressSpaceConfigurationListener listener){  m_listeners.addListener(listener);}  }
class C{  public void insertChild(int index,HtmlNode childToAdd){  children.add(index,childToAdd);}  }
class C{  public CollectionConfiguration(final File configurationFile,final boolean lazy) throws IOException {  super(configurationFile);  super.lazy=lazy;  this.rankings=new ArrayList<Ranking>(4);  for (int i=0; i <= 3; i++)   rankings.add(new Ranking());  if (this.isEmpty())   return;  Iterator<Entry> it=this.entryIterator();  for (SchemaConfiguration.Entry etr=it.next(); it.hasNext(); etr=it.next()) {    try {      CollectionSchema f=CollectionSchema.valueOf(etr.key());      f.setSolrFieldName(etr.getValue());    } catch (    final IllegalArgumentException e) {      ConcurrentLog.fine("SolrCollectionWriter","solr schema file " + configurationFile.getAbsolutePath() + " defines unknown attribute '"+ etr.toString()+ "'");      it.remove();    }  }  for (  CollectionSchema field : CollectionSchema.values()) {    if (this.get(field.name()) == null) {      if (CollectionSchema.author_sxt.getSolrFieldName().endsWith(field.name()))       continue;      if (CollectionSchema.coordinate_p_0_coordinate.getSolrFieldName().endsWith(field.name()))       continue;      if (CollectionSchema.coordinate_p_1_coordinate.getSolrFieldName().endsWith(field.name()))       continue;      ConcurrentLog.warn("SolrCollectionWriter"," solr schema file " + configurationFile.getAbsolutePath() + " is missing declaration for '"+ field.name()+ "'");    }  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  lock.lock();  try {    q=new PriorityQueue<E>(Math.max(size,1),comparator);    q.addAll(this);    s.defaultWriteObject();  }  finally {    q=null;    lock.unlock();  }}  }
class C{  public final ByteArrayBuilder append(String string,Charset charset) throws UnsupportedEncodingException {  return append(string.getBytes(charset.name()));}  }
class C{  public void removeParameter(String name){  uriParms.delete(name);}  }
class C{  public String[] processName(String qName,String[] parts,boolean isAttribute){  String[] name=currentContext.processName(qName,isAttribute);  if (name == null)   return null;  System.arraycopy(name,0,parts,0,3);  return parts;}  }
class C{  protected AbstractTacticalSymbol(Position position){  if (position == null) {    String msg=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.position=position;  this.setGlyphAtlas(DEFAULT_GLYPH_ATLAS);}  }
class C{  private void loadHomeScreen(){  Intent i=new Intent();  i.setAction(Intent.ACTION_MAIN);  i.addCategory(Intent.CATEGORY_HOME);  this.startActivity(i);  super.onBackPressed();}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static boolean isInteger(String s){  if (isEmpty(s))   return defaultEmptyOK;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (!isDigit(c))     return false;  }  return true;}  }
class C{  public String toString(){  return this.phdrMetaDataTrackSubDescriptorBO.toString();}  }
class C{  public void close(){  if (fpDDF != null) {    try {      fpDDF.close();    } catch (    IOException ioe) {      Debug.error("DDFModule IOException when closing DDFModule file");    }    fpDDF=null;  }}  }
class C{  public void applyClientDirection(final boolean stopOnNone){  int size;  Direction direction;  size=directions.size();  if (size != 0) {    direction=directions.get(size - 1);    if (hasStatus(StatusType.POISONED) || has("status_confuse")) {      direction=direction.oppositeDirection();    }    setDirection(direction);    setSpeed(getBaseSpeed());  }}  }
class C{  private Optional<ChannelInstance> findByName(final String name){  if (name == null) {    return empty();  }  final String id=this.manager.accessCall(KEY_STORAGE,ChannelServiceAccess.class,null);  return findById(id);}  }
class C{  @Override public Classification<T,K> classify(Collection<T> features){  SortedSet<Classification<T,K>> probabilites=this.categoryProbabilities(features);  if (probabilites.size() > 0) {    return probabilites.last();  }  return null;}  }
class C{  public static CCOrbitCamera action(float t,float r,float dr,float z,float dz,float x,float dx){  return new CCOrbitCamera(t,r,dr,z,dz,x,dx);}  }
class C{  private void showColumn(TableColumn column){  columnModel.removeColumnModelListener(this);  columnModel.addColumn(column);  int position=allColumns.indexOf(column);  int from=columnModel.getColumnCount() - 1;  int to=0;  for (int i=position - 1; i > -1; i--) {    try {      TableColumn visibleColumn=allColumns.get(i);      to=columnModel.getColumnIndex(visibleColumn.getHeaderValue()) + 1;      break;    } catch (    IllegalArgumentException e) {    }  }  columnModel.moveColumn(from,to);  columnModel.addColumnModelListener(this);}  }
class C{  @OnClick(R.id.accept) public void onRemoveClick(View view){  if (SystemClock.elapsedRealtime() - mLastClickTime < 500) {    return;  }  mLastClickTime=SystemClock.elapsedRealtime();  Offer offerToRemove;  if (dataRecyclerAdapter != null) {    offerToRemove=offers.get(getCardPosition(getAdapterPosition()));  } else {    offerToRemove=offers.get(getAdapterPosition() - BINDER_OFFSET);  }  originalOffer=offerToRemove;  createSnackBar(-(int)offerToRemove.getCost());  removeOfferStream.onNext(offerToRemove);  basePlanModel.updateCost(-offerToRemove.getCost(),offerToRemove.doesAffectBaseCost());}  }
class C{  public Entity(@Nonnull MacAddress macAddress,VlanVid vlan,@Nonnull IPv4Address ipv4Address,@Nonnull IPv6Address ipv6Address,@Nonnull DatapathId switchDPID,@Nonnull OFPort switchPort,@Nonnull Date lastSeenTimestamp){  if (macAddress == null) {    throw new IllegalArgumentException("MAC address cannot be null. Try MacAddress.NONE if intention is 'no MAC'");  }  if (ipv4Address == null) {    throw new IllegalArgumentException("IPv4 address cannot be null. Try IPv4Address.NONE if intention is 'no IPv4'");  }  if (ipv6Address == null) {    throw new IllegalArgumentException("IPv6 address cannot be null. Try IPv6Address.NONE if intention is 'no IPv6'");  }  if (switchDPID == null) {    throw new IllegalArgumentException("Switch DPID cannot be null. Try DatapathId.NONE if intention is 'no DPID'");  }  if (switchPort == null) {    throw new IllegalArgumentException("Switch port cannot be null. Try OFPort.ZERO if intention is 'no port'");  }  if (lastSeenTimestamp == null) {    throw new IllegalArgumentException("Last seen time stamp cannot be null. Try Entity.NO_DATE if intention is 'no time'");  }  this.macAddress=macAddress;  this.ipv4Address=ipv4Address;  this.ipv6Address=ipv6Address;  this.vlan=vlan;  this.switchDPID=switchDPID;  this.switchPort=switchPort;  this.lastSeenTimestamp=lastSeenTimestamp;  this.activeSince=lastSeenTimestamp;}  }
class C{  public double area(){  return width() * height();}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public double distanceSquared(Vector3 point){  double xd=this.x - point.x;  double yd=this.y - point.y;  double zd=this.z - point.z;  return xd * xd + yd * yd + zd * zd;}  }
class C{  boolean isSocketScheme(String scheme){  for (  String p : URIHelper.SOCKET_SCHEMES) {    if (p.equals(scheme)) {      return true;    }  }  return false;}  }
class C{  private Response<BitmapDrawable> doResourceParse(){  if (mResources == null) {    return Response.error(new ParseError());  }  final String requestUrl=getUrl();  final int resourceId=Integer.valueOf(Uri.parse(requestUrl).getLastPathSegment());  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  decodeOptions.inInputShareable=true;  decodeOptions.inPurgeable=true;  decodeOptions.inPreferredConfig=mDecodeConfig;  Bitmap bitmap;  if (mMaxWidth == 0 && mMaxHeight == 0) {    bitmap=BitmapFactory.decodeResource(mResources,resourceId,decodeOptions);    addMarker("read-full-size-image-from-resource");  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeResource(mResources,resourceId,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=ImageUtils.findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeResource(mResources,resourceId,decodeOptions);    addMarker(String.format("read-from-resource-scaled-times-%d",decodeOptions.inSampleSize));    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();      addMarker("scaling-read-from-resource-bitmap");    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError());  } else {    BitmapDrawable drawable;    if (Utils.hasHoneycomb()) {      drawable=new BitmapDrawable(mResources,bitmap);    } else {      drawable=new RecyclingBitmapDrawable(mResources,bitmap);    }    return Response.success(drawable,HttpHeaderParser.parseBitmapCacheHeaders(bitmap));  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static CGPoint ccpRotate(final CGPoint v1,final CGPoint v2){  return ccp(v1.x * v2.x - v1.y * v2.y,v1.x * v2.y + v1.y * v2.x);}  }
class C{  public XMLString concat(String str){  return new XString(str().concat(str));}  }
class C{  @AT1 public ConstructorDecl(){}  }
class C{  @Override public boolean canHandleJitter(){  return true;}  }
class C{  public StreamSpecOptions(){  isUnidirectional=false;  isRetainUnion=false;  isRetainIntersection=false;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public static RenderingHints convertColorRendering(Element e,RenderingHints hints){  Value v=getComputedStyle(e,SVGCSSEngine.COLOR_RENDERING_INDEX);  String s=v.getStringValue();  int len=s.length();  if ((len == 4) && (s.charAt(0) == 'a'))   return hints;  if (len < 13)   return hints;  if (hints == null)   hints=new RenderingHints(null);switch (s.charAt(8)) {case 's':    hints.put(RenderingHints.KEY_COLOR_RENDERING,RenderingHints.VALUE_COLOR_RENDER_SPEED);  hints.put(RenderingHints.KEY_ALPHA_INTERPOLATION,RenderingHints.VALUE_ALPHA_INTERPOLATION_SPEED);break;case 'q':hints.put(RenderingHints.KEY_COLOR_RENDERING,RenderingHints.VALUE_COLOR_RENDER_QUALITY);hints.put(RenderingHints.KEY_ALPHA_INTERPOLATION,RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);break;}return hints;}  }
class C{  public boolean hasSVUID(){  return hasSVUID;}  }
class C{  @Override public void onTopic(String target,String topic,String setBy,long date,boolean changed){  if (changed) {    Message message=new Message(service.getString(R.string.message_topic_set,setBy,topic));    message.setColor(Message.COLOR_YELLOW);    server.getConversation(target).addMessage(message);  } else {    Message message=new Message(service.getString(R.string.message_topic,topic));    message.setColor(Message.COLOR_YELLOW);    server.getConversation(target).addMessage(message);  }  ((Channel)server.getConversation(target)).setTopic(topic);  Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target);  service.sendBroadcast(intent);  intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_TOPIC,server.getId(),target);  service.sendBroadcast(intent);}  }
class C{  public void validateStringVariables(String expression,IStringVariableManager manager) throws CoreException {  performStringSubstitution(expression,true,false,manager);}  }
class C{  public static DnsUrl[] fromList(String urlList) throws MalformedURLException {  DnsUrl[] urls=new DnsUrl[(urlList.length() + 1) / 2];  int i=0;  StringTokenizer st=new StringTokenizer(urlList," ");  while (st.hasMoreTokens()) {    urls[i++]=new DnsUrl(st.nextToken());  }  DnsUrl[] trimmed=new DnsUrl[i];  System.arraycopy(urls,0,trimmed,0,i);  return trimmed;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void saveTo(File file,ArrayList<Entity> list) throws IOException {  Writer output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),"UTF-8"));  output.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");  output.write(CommonConstants.NL);  output.write(CommonConstants.NL);  output.write("<unit version=\"" + MegaMek.VERSION + "\" >");  output.write(CommonConstants.NL);  output.write(CommonConstants.NL);  try {    writeEntityList(output,list);  } catch (  IOException exception) {    throw exception;  }  output.write("</unit>");  output.write(CommonConstants.NL);  output.flush();  output.close();}  }
class C{  public static FetchResponse createFetchResponse(){  return new FetchResponse();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public PriceModelMetadata(UUID id){  this.id=id;}  }
class C{  protected boolean isCamelCaseMatching(){  String value=JavaCore.getOption(JavaCore.CODEASSIST_CAMEL_CASE_MATCH);  return JavaCore.ENABLED.equals(value);}  }
class C{  public boolean equals(Object obj){  return super.equals(obj);}  }
class C{  public AffineTransform(double[] flatmatrix){  m00=flatmatrix[0];  m10=flatmatrix[1];  m01=flatmatrix[2];  m11=flatmatrix[3];  if (flatmatrix.length > 5) {    m02=flatmatrix[4];    m12=flatmatrix[5];  }  updateState();}  }
class C{  public void registerDownloadFileChangeListener(OnDownloadFileChangeListener onDownloadFileChangeListener,DownloadFileChangeConfiguration downloadFileChangeConfiguration){  mDownloadFileChangeObserver.addOnDownloadFileChangeListener(onDownloadFileChangeListener,downloadFileChangeConfiguration);}  }
class C{  @WorkerThread @Nullable public static Path tryParsePath(String dAttributeOfPath){  try {    return parsePath(dAttributeOfPath);  } catch (  Exception e) {    Log.e(null,"parse svg path error",e);  }  return null;}  }
class C{  public boolean containsValue(Object value){  return m_values.contains(value);}  }
class C{  private static void removeNonUsedUINodes(Element groupNode){  for (int index=0; index < groupNode.getChildCount(); index++) {    if (groupNode.getType(index) != Element.ELEMENT)     continue;    Element child=(Element)groupNode.getChild(index);    String value=child.getAttributeValue(null,"bind");    if ("encounter.location_id".equalsIgnoreCase(value) || "patient.patient_id".equalsIgnoreCase(value)) {      groupNode.removeChild(index);      index-=1;    }  }}  }
class C{  void markFiltered(){  flags|=FILTERED_ENTRY;  depInfo=null;}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public void putFloat(int key,float value){  map.put(key,value);}  }
class C{  public static <T>LazyPQueueX<T> iterate(long limit,final T seed,final UnaryOperator<T> f){  return fromStreamS(ReactiveSeq.iterate(seed,f).limit(limit));}  }
class C{  protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  int i;  int[] indices;  StringBuilder order;  Instances output;  m_AttributeIndices.setUpper(inputFormat.numAttributes() - 1);  order=new StringBuilder();  indices=m_AttributeIndices.getSelection();  if (indices.length == 0)   throw new WekaException("No attributes defined as class attributes!");  for (i=0; i < indices.length; i++) {    if (i > 0)     order.append(",");    order.append("" + (indices[i] + 1));  }  for (i=0; i < inputFormat.numAttributes(); i++) {    if (m_AttributeIndices.isInRange(i))     continue;    order.append(",");    order.append("" + (i + 1));  }  m_Reorder.setAttributeIndices(order.toString());  m_Reorder.setInputFormat(inputFormat);  output=m_Reorder.getOutputFormat();  output.setClassIndex(indices.length);  output.setRelationName("-C " + indices.length);  return output;}  }
class C{  public HadoopTaskInfo(HadoopTaskType type,HadoopJobId jobId,int taskNum,int attempt,@Nullable HadoopInputSplit inputSplit){  this.type=type;  this.jobId=jobId;  this.taskNum=taskNum;  this.attempt=attempt;  this.inputSplit=inputSplit;}  }
class C{  public BlockOption(int szx,boolean m,int num){  this.setSzx(szx);  this.setM(m);  this.setNum(num);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public JSONObject(){  this.map=new TreeMap<String,Object>();}  }
class C{  public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {}  }
class C{  public boolean isArmed(){  return other.isArmed();}  }
class C{  private static void transferRemoteCandidates(IceMediaStream localStream,IceMediaStream remoteStream){  List<Component> localComponents=localStream.getComponents();  for (  Component localComponent : localComponents) {    int id=localComponent.getComponentID();    Component remoteComponent=remoteStream.getComponent(id);    if (remoteComponent != null)     transferRemoteCandidates(localComponent,remoteComponent); else     localStream.removeComponent(localComponent);  }}  }
class C{  private void sendStatsRequestToAdapter(SingleResourceStatsCollectionTaskState currentState,URI patchUri,Object patchBody){  sendRequest(Operation.createPatch(patchUri).setBody(patchBody).setCompletion(null));}  }
class C{  public void search(){  if (!isPanelSelected()) {    return;  }  getCurrentPanel().search();}  }
class C{  private ConstraintVertex createVertex(Coordinate p,Segment seg){  ConstraintVertex v=null;  if (vertexFactory != null)   v=vertexFactory.createVertex(p,seg); else   v=new ConstraintVertex(p);  v.setOnConstraint(true);  return v;}  }
class C{  public String toBase64(byte[] bytes){  String ret=null;  try {    ret=new String(Base64.encodeBase64(bytes),Charset.forName("utf-8")).trim();  } catch (  Exception e) {    throw new RuntimeException(e);  }  return ret;}  }
class C{  public void save(File file,String type) throws IOException {  final FileOutputStream fos=new FileOutputStream(file);  ImageIO.write(this.image,type,fos);  fos.close();}  }
class C{  public static void deleteSortLocationIfExists(String tempFileLocation) throws CarbonSortKeyAndGroupByException {  File file=new File(tempFileLocation);  if (file.exists()) {    try {      CarbonUtil.deleteFoldersAndFiles(file);    } catch (    CarbonUtilException e) {      LOGGER.error(e);    }  }}  }
class C{  public static final FileTime unixTimeToFileTime(long utime){  return FileTime.from(utime,TimeUnit.SECONDS);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public void testPartitionedPreload() throws Exception {  cacheMode=PARTITIONED;  nearEnabled=true;  checkPreload();}  }
class C{  protected void decodeLineSuffix(PushbackInputStream inStream,OutputStream outStream) throws IOException {  int c;  while (true) {    c=inStream.read();    if (c == -1) {      throw new CEStreamExhausted();    }    if (c == '\n') {      break;    }    if (c == '\r') {      c=inStream.read();      if ((c != '\n') && (c != -1)) {        inStream.unread(c);      }      break;    }  }}  }
class C{  public String generate(long topN,long curTime,boolean filter,boolean norm) throws Exception {  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  long start=System.currentTimeMillis();  LOG.info("GeneratorJob: starting at " + sdf.format(start));  LOG.info("GeneratorJob: Selecting best-scoring urls due for fetch.");  LOG.info("GeneratorJob: starting");  LOG.info("GeneratorJob: filtering: " + filter);  LOG.info("GeneratorJob: normalizing: " + norm);  if (topN != Long.MAX_VALUE) {    LOG.info("GeneratorJob: topN: " + topN);  }  Map<String,Object> results=run(ToolUtil.toArgMap(Nutch.ARG_TOPN,topN,Nutch.ARG_CURTIME,curTime,Nutch.ARG_FILTER,filter,Nutch.ARG_NORMALIZE,norm));  String batchId=getConf().get(BATCH_ID);  long finish=System.currentTimeMillis();  long generateCount=(Long)results.get(GENERATE_COUNT);  LOG.info("GeneratorJob: finished at " + sdf.format(finish) + ", time elapsed: "+ TimingUtil.elapsedTime(start,finish));  LOG.info("GeneratorJob: generated batch id: " + batchId + " containing "+ generateCount+ " URLs");  if (generateCount == 0) {    return null;  }  return batchId;}  }
class C{  public static LogisticRegression2 serializableInstance(){  return new LogisticRegression2(ColtDataSet.serializableInstance());}  }
class C{  public Http1ClientCodec(int maxInitialLineLength,int maxHeaderSize,int maxChunkSize,boolean failOnMissingResponse){  this(maxInitialLineLength,maxHeaderSize,maxChunkSize,failOnMissingResponse,true);}  }
class C{  protected S_DoImpl(){  super();}  }
class C{  private void updateProtectionParamsForVirtualPool(VirtualPool virtualPool,BlockVirtualPoolProtectionUpdateParam param,VirtualPoolHighAvailabilityParam haParam){  if (param != null) {    if (param.getContinuousCopies() != null) {      if ((param.getContinuousCopies().getVpool() == null || String.valueOf(param.getContinuousCopies().getVpool()).isEmpty()) && (param.getContinuousCopies().getMaxMirrors() == null || param.getContinuousCopies().getMaxMirrors() == VirtualPoolProtectionMirrorParam.MAX_DISABLED || String.valueOf(param.getContinuousCopies().getMaxMirrors()).isEmpty())) {        if (virtualPool.getMirrorVirtualPool() != null) {          virtualPool.setMirrorVirtualPool(String.valueOf(NullColumnValueGetter.getNullURI()));        }        virtualPool.setMaxNativeContinuousCopies(VirtualPool.MAX_DISABLED);      } else       if ((param.getContinuousCopies().getVpool() == null || String.valueOf(param.getContinuousCopies().getVpool()).isEmpty())) {        if (virtualPool.getMirrorVirtualPool() != null) {          virtualPool.setMirrorVirtualPool(String.valueOf(NullColumnValueGetter.getNullURI()));        }        if (param.getContinuousCopies().getMaxMirrors() != null) {          virtualPool.setMaxNativeContinuousCopies(param.getContinuousCopies().getMaxMirrors());        }      } else       if ((param.getContinuousCopies().getVpool() != null && !String.valueOf(param.getContinuousCopies().getVpool()).isEmpty()) && (param.getContinuousCopies().getMaxMirrors() == null)) {        updateProtectionMirrorVPool(param.getContinuousCopies().getVpool(),virtualPool);      } else {        if (param.getContinuousCopies().getVpool() != null && !String.valueOf(param.getContinuousCopies().getVpool()).isEmpty()) {          updateProtectionMirrorVPool(param.getContinuousCopies().getVpool(),virtualPool);        }        if (param.getContinuousCopies().getMaxMirrors() != null) {          virtualPool.setMaxNativeContinuousCopies(param.getContinuousCopies().getMaxMirrors());        }      }    }    if (param.getSnapshots() != null) {      if (param.getSnapshots().getMaxSnapshots() != null) {        virtualPool.setMaxNativeSnapshots(param.getSnapshots().getMaxSnapshots());      } else {        virtualPool.setMaxNativeSnapshots(VirtualPool.MAX_DISABLED);      }    }    updateRemoteCopyVPool(virtualPool,param);    if (param.getRecoverPoint() != null) {      if (param.getRecoverPoint().getAdd() == null && param.getRecoverPoint().getRemove() == null && param.getRecoverPoint().getSourcePolicy() == null) {        deleteVPoolProtectionVArraySettings(virtualPool);      } else {        ProtectionSourcePolicy sourcePolicy=param.getRecoverPoint().getSourcePolicy();        if (sourcePolicy != null) {          String nullValue=NullColumnValueGetter.getNullStr();          virtualPool.setJournalSize(StringUtils.defaultString(sourcePolicy.getJournalSize(),nullValue));          virtualPool.setJournalVarray(!NullColumnValueGetter.isNullURI(sourcePolicy.getJournalVarray()) ? sourcePolicy.getJournalVarray().toString() : nullValue);          if (NullColumnValueGetter.isNullValue(virtualPool.getJournalVarray())) {            virtualPool.setJournalVpool(nullValue);          } else {            String defaultVpoolId=nullValue;            if (haParam == null || Boolean.TRUE.equals(haParam.getMetroPoint())) {              defaultVpoolId=virtualPool.getId().toString();            } else             if (Boolean.FALSE.equals(haParam.getMetroPoint()) && haParam.getHaVirtualArrayVirtualPool() != null && Boolean.TRUE.equals(haParam.getHaVirtualArrayVirtualPool().getActiveProtectionAtHASite())) {              if (haParam.getHaVirtualArrayVirtualPool().getVirtualPool() != null) {                defaultVpoolId=haParam.getHaVirtualArrayVirtualPool().getVirtualPool().toString();              }            }            virtualPool.setJournalVpool(!NullColumnValueGetter.isNullURI(sourcePolicy.getJournalVpool()) ? sourcePolicy.getJournalVpool().toString() : defaultVpoolId);          }          if (NullColumnValueGetter.isNotNullValue(virtualPool.getHighAvailability())) {            virtualPool.setStandbyJournalVarray(!NullColumnValueGetter.isNullURI(sourcePolicy.getStandbyJournalVarray()) ? sourcePolicy.getStandbyJournalVarray().toString() : nullValue);            if (NullColumnValueGetter.isNullValue(virtualPool.getStandbyJournalVarray())) {              virtualPool.setStandbyJournalVpool(nullValue);            } else {              String defaultHaVpool=nullValue;              Map<String,String> haVarrayVpoolMap=virtualPool.getHaVarrayVpoolMap();              if (haVarrayVpoolMap != null && !haVarrayVpoolMap.isEmpty()) {                if (NullColumnValueGetter.isNotNullValue(haVarrayVpoolMap.get(virtualPool.getStandbyJournalVarray()))) {                  defaultHaVpool=haVarrayVpoolMap.get(virtualPool.getStandbyJournalVarray());                }              }              virtualPool.setStandbyJournalVpool(!NullColumnValueGetter.isNullURI(sourcePolicy.getStandbyJournalVpool()) ? sourcePolicy.getStandbyJournalVpool().toString() : defaultHaVpool);            }          }          virtualPool.setRpCopyMode(StringUtils.defaultString(sourcePolicy.getRemoteCopyMode(),nullValue));          long rpoValue=(sourcePolicy.getRpoValue() == null) ? 0L : sourcePolicy.getRpoValue();          virtualPool.setRpRpoValue(rpoValue);          virtualPool.setRpRpoType(StringUtils.defaultString(sourcePolicy.getRpoType(),nullValue));        }        if (param.getRecoverPoint().getRemove() != null && !param.getRecoverPoint().getRemove().isEmpty()) {          if (virtualPool.getProtectionVarraySettings() != null && !virtualPool.getProtectionVarraySettings().isEmpty()) {            StringMap settingsMap=virtualPool.getProtectionVarraySettings();            for (            VirtualPoolProtectionVirtualArraySettingsParam settingsParam : param.getRecoverPoint().getRemove()) {              if (settingsParam.getVarray() != null && !settingsParam.getVarray().toString().isEmpty()) {                String vpoolProtectionVarraySettingsUri=virtualPool.getProtectionVarraySettings().get(settingsParam.getVarray().toString());                if (vpoolProtectionVarraySettingsUri == null) {                  throw APIException.badRequests.protectionNoCopyCorrespondingToVirtualArray(settingsParam.getVarray());                }                deleteVPoolProtectionVArraySettings(virtualPool.getProtectionVarraySettings().get(settingsParam.getVarray().toString()));                settingsMap.remove(settingsParam.getVarray().toString());              }            }            virtualPool.setProtectionVarraySettings(settingsMap);          }        }        if (param.getRecoverPoint().getAdd() != null && !param.getRecoverPoint().getAdd().isEmpty()) {          Set<VpoolProtectionVarraySettings> protectionSettingsToAdd=null;          StringMap settingsMap=virtualPool.getProtectionVarraySettings();          if (settingsMap == null) {            settingsMap=new StringMap();          }          for (          VirtualPoolProtectionVirtualArraySettingsParam settingsParam : param.getRecoverPoint().getAdd()) {            VirtualArray virtualArray=_permissionsHelper.getObjectById(settingsParam.getVarray(),VirtualArray.class);            ArgValidator.checkEntity(virtualArray,settingsParam.getVarray(),false);            VpoolProtectionVarraySettings setting=new VpoolProtectionVarraySettings();            setting.setId(URIUtil.createId(VpoolProtectionVarraySettings.class));            setting.setParent(new NamedURI(virtualPool.getId(),virtualPool.getLabel()));            if (settingsParam.getVpool() != null && !String.valueOf(settingsParam.getVpool()).isEmpty()) {              setting.setVirtualPool(settingsParam.getVpool());            }            setting.setJournalSize(settingsParam.getCopyPolicy() != null ? settingsParam.getCopyPolicy().getJournalSize() : null);            setting.setJournalVarray(settingsParam.getCopyPolicy() != null ? settingsParam.getCopyPolicy().getJournalVarray() : settingsParam.getVarray());            setting.setJournalVpool(settingsParam.getCopyPolicy() != null ? settingsParam.getCopyPolicy().getJournalVpool() : settingsParam.getVpool());            settingsMap.put(settingsParam.getVarray().toString(),setting.getId().toString());            if (protectionSettingsToAdd == null) {              protectionSettingsToAdd=new HashSet<VpoolProtectionVarraySettings>();            }            protectionSettingsToAdd.add(setting);          }          if (protectionSettingsToAdd != null) {            for (            VpoolProtectionVarraySettings setting : protectionSettingsToAdd) {              _dbClient.createObject(setting);            }          }          virtualPool.setProtectionVarraySettings(settingsMap);        }        StringMap settingsMap=virtualPool.getProtectionVarraySettings();        if (settingsMap != null && settingsMap.size() == 0) {          virtualPool.setJournalSize(NullColumnValueGetter.getNullStr());          virtualPool.setJournalVarray(NullColumnValueGetter.getNullStr());          virtualPool.setJournalVpool(NullColumnValueGetter.getNullStr());        }      }    }  }}  }
class C{  public void removeElementAt(int i){  if (null == m_map)   return;  if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i); else   m_map[i]=DTM.NULL;}  }
class C{  public void addNodes(Collection<? extends N> c){  for (  N n : c)   addNode(n);}  }
class C{  protected int generateNextNewNodeId(){  int nextId=m_nextNewNodeId;  m_nextNewNodeId=m_nextNewNodeId - 1;  return nextId;}  }
class C{  @SuppressWarnings("unchecked") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int cap=MIN_SEGMENT_TABLE_CAPACITY;  final Segment<K,V>[] segments=this.segments;  for (int k=0; k < segments.length; ++k) {    Segment<K,V> seg=segments[k];    if (seg != null) {      seg.threshold=(int)(cap * seg.loadFactor);      seg.table=(HashEntry<K,V>[])new HashEntry<?,?>[cap];    }  }  for (; ; ) {    K key=(K)s.readObject();    V value=(V)s.readObject();    if (key == null)     break;    put(key,value);  }}  }
class C{  public BERSequence(){}  }
class C{  @Override public int indexOf(Object o){  Integer index=indexes.get(o);  if (index == null)   return -1;  return index;}  }
class C{  public JSONArray(Collection collection){  if (collection != null) {    for (    Object o : collection) {      add(JSONObject.wrap(o));    }  }}  }
class C{  public Transform(Vector2 position,Vector2 orientation){  setPosition(position);  setOrientation(orientation);}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {  m_prefixMappings.addElement(prefix);  m_prefixMappings.addElement(uri);}  }
class C{  private Node addConditionWaiter(){  Node t=lastWaiter;  if (t != null && t.waitStatus != Node.CONDITION) {    unlinkCancelledWaiters();    t=lastWaiter;  }  Node node=new Node(Thread.currentThread(),Node.CONDITION);  if (t == null)   firstWaiter=node; else   t.nextWaiter=node;  lastWaiter=node;  return node;}  }
class C{  protected void clearViewer(){  fInputElement=null;  fTextViewer.getDocument().set("");}  }
class C{  double percentToAproxWidth(Rectangle2D.Double area){  return percentWidth * area.getWidth();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TYPE:    return isSetType();case HELLO:  return isSetHello();case ERROR:return isSetError();case ECHO_REQUEST:return isSetEchoRequest();case ECHO_REPLY:return isSetEchoReply();case GET_REQUEST:return isSetGetRequest();case GET_RESPONSE:return isSetGetResponse();case PUT_REQUEST:return isSetPutRequest();case PUT_RESPONSE:return isSetPutResponse();case DELETE_REQUEST:return isSetDeleteRequest();case DELETE_RESPONSE:return isSetDeleteResponse();case SYNC_VALUE:return isSetSyncValue();case SYNC_VALUE_RESPONSE:return isSetSyncValueResponse();case SYNC_OFFER:return isSetSyncOffer();case SYNC_REQUEST:return isSetSyncRequest();case FULL_SYNC_REQUEST:return isSetFullSyncRequest();case CURSOR_REQUEST:return isSetCursorRequest();case CURSOR_RESPONSE:return isSetCursorResponse();case REGISTER_REQUEST:return isSetRegisterRequest();case REGISTER_RESPONSE:return isSetRegisterResponse();case CLUSTER_JOIN_REQUEST:return isSetClusterJoinRequest();case CLUSTER_JOIN_RESPONSE:return isSetClusterJoinResponse();}throw new IllegalStateException();}  }
class C{  private void outputDocTypeDecl(String name) throws SAXException {  if (true == m_needToOutputDocTypeDecl) {    String doctypeSystem=getDoctypeSystem();    String doctypePublic=getDoctypePublic();    if ((null != doctypeSystem) || (null != doctypePublic)) {      final java.io.Writer writer=m_writer;      try {        writer.write("<!DOCTYPE ");        writer.write(name);        if (null != doctypePublic) {          writer.write(" PUBLIC \"");          writer.write(doctypePublic);          writer.write('"');        }        if (null != doctypeSystem) {          if (null == doctypePublic)           writer.write(" SYSTEM \""); else           writer.write(" \"");          writer.write(doctypeSystem);          writer.write('"');        }        writer.write('>');        outputLineSep();      } catch (      IOException e) {        throw new SAXException(e);      }    }  }  m_needToOutputDocTypeDecl=false;}  }
class C{  public final String toString(){  return (name + ", early reflection delay " + earlyReflectionDelay+ " ns, early reflection intensity "+ earlyReflectionIntensity+ " dB, late deflection delay "+ lateReflectionDelay+ " ns, late reflection intensity "+ lateReflectionIntensity+ " dB, decay time "+ decayTime);}  }
class C{  public static final Collection<Race> findRaces(String stream,Collection<Race> races){  Collection<Race> result=new ArrayList<>();  for (  Race r : races) {    for (    Entrant e : r.getEntrants()) {      if (stream.equalsIgnoreCase(e.twitch)) {        result.add(r);      }    }  }  return result;}  }
class C{  public long longValue(){  return ((Long)value).longValue();}  }
class C{  public boolean equals(Object object){  if (!(object instanceof DatabaseField)) {    return false;  }  return equals((DatabaseField)object);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public float[] generateTransformedValuesHorizontalBarChart(List<? extends Entry> entries,int dataSet,BarData bd,float phaseY){  float[] valuePoints=new float[entries.size() * 2];  int setCount=bd.getDataSetCount();  float space=bd.getGroupSpace();  for (int j=0; j < valuePoints.length; j+=2) {    Entry e=entries.get(j / 2);    float x=e.getXIndex() + (j / 2 * (setCount - 1)) + dataSet+ space * (j / 2) + space / 2f;    float y=e.getVal();    valuePoints[j]=y * phaseY;    valuePoints[j + 1]=x;  }  pointValuesToPixel(valuePoints);  return valuePoints;}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  public GroovyFilter(DefaultStyledDocument doc){  super(doc);  init();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void generateFetchlist(int numResults,Configuration config,boolean filter) throws Exception {  GeneratorJob g=new GeneratorJob();  g.setConf(config);  String batchId=g.generate(numResults,System.currentTimeMillis(),filter,false);  if (batchId == null)   throw new RuntimeException("Generator failed");}  }
class C{  @Override public String toString(){  try {    StringBuffer text=new StringBuffer();    if (m_isLeaf) {      text.append(": NB");      text.append(m_id);    } else {      dumpTreeNB(0,text);    }    text.append("\n" + printLeafModels());    text.append("\n\nNumber of Leaves  : \t" + numLeaves() + "\n");    text.append("\nSize of the tree : \t" + numNodes() + "\n");    return text.toString();  } catch (  Exception e) {    e.printStackTrace();    return "Can't print nb tree.";  }}  }
class C{  public static <T extends BlockObject>boolean validateStoragePortsInVarray(DbClient dbClient,T volume,URI varray,Set<String> portsInUnManagedMask,UnManagedExportMask mask,List<String> errorMessages){  _logger.info("validating storage ports in varray " + varray);  List<URI> storagePortUris=dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVirtualArrayStoragePortsConstraint(varray.toString()));  storagePortUris=filterOutUnregisteredPorts(dbClient,storagePortUris);  Set<String> storagePortUriStr=new HashSet<String>((Collections2.transform(storagePortUris,CommonTransformerFunctions.FCTN_URI_TO_STRING)));  SetView<String> diff=Sets.difference(portsInUnManagedMask,storagePortUriStr);  StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,mask.getStorageSystemUri());  boolean portsValid=true;  if (storageSystem != null) {    if (storageSystem.getSystemType().equalsIgnoreCase(SystemType.xtremio.toString()) || storageSystem.getSystemType().equalsIgnoreCase(SystemType.unity.toString())) {      portsValid=diff.size() < portsInUnManagedMask.size();    } else {      portsValid=diff.isEmpty();    }  }  if (!portsValid) {    _logger.warn("Storage Ports {} in unmanaged mask {} is not available in VArray {}",new Object[]{Joiner.on(",").join(diff),mask.getMaskName(),varray});    if (volume instanceof Volume) {      Volume vol=(Volume)volume;      URI haVarray=checkVplexHighAvailabilityArray(vol,dbClient);      if (null != haVarray) {        _logger.info("found high availabilty virtual array {}, " + "so checking for storage ports over there",haVarray);        storagePortUris=dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVirtualArrayStoragePortsConstraint(haVarray.toString()));        storagePortUris=filterOutUnregisteredPorts(dbClient,storagePortUris);        storagePortUriStr=new HashSet<String>((Collections2.transform(storagePortUris,CommonTransformerFunctions.FCTN_URI_TO_STRING)));        diff=Sets.difference(portsInUnManagedMask,storagePortUriStr);        if (!diff.isEmpty()) {          _logger.warn("Storage Ports {} in unmanaged mask {} are not available in high " + "availability varray {}, matching fails",new Object[]{Joiner.on(",").join(diff),mask.getMaskName(),haVarray});          StringBuffer errorMessage=new StringBuffer("Storage Port(s) ");          errorMessage.append(Joiner.on(", ").join(getStoragePortNames((Collections2.transform(diff,CommonTransformerFunctions.FCTN_STRING_TO_URI)),dbClient)));          errorMessage.append(" in unmanaged export mask ").append(mask.getMaskName());          errorMessage.append(" are available neither in source Virtual Array ");          errorMessage.append(getVarrayName(varray,dbClient));          errorMessage.append(" nor in high availability Virtual Array ");          errorMessage.append(getVarrayName(haVarray,dbClient));          errorMessages.add(errorMessage.toString());          return false;        } else {          _logger.info("Storage Ports {} in unmanaged mask {} found in " + "high availability varray {}, so this mask is okay",new Object[]{Joiner.on(",").join(diff),mask.getMaskName(),haVarray});          return true;        }      }    }    StringBuffer errorMessage=new StringBuffer("Storage Port(s) ");    errorMessage.append(Joiner.on(", ").join(getStoragePortNames((Collections2.transform(diff,CommonTransformerFunctions.FCTN_STRING_TO_URI)),dbClient)));    errorMessage.append(" in unmanaged export mask ").append(mask.getMaskName());    errorMessage.append(" are not available in Virtual Array ").append(getVarrayName(varray,dbClient));    errorMessages.add(errorMessage.toString());    _logger.warn(errorMessages.toString());    return false;  }  return true;}  }
class C{  protected void validate_return(StorageLun[] param){}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public static void printModifiers(int modifiers,StringBuffer buf){  if (Modifier.isPublic(modifiers)) {    buf.append("public ");  }  if (Modifier.isProtected(modifiers)) {    buf.append("protected ");  }  if (Modifier.isPrivate(modifiers)) {    buf.append("private ");  }  if (Modifier.isStatic(modifiers)) {    buf.append("static ");  }  if (Modifier.isAbstract(modifiers)) {    buf.append("abstract ");  }  if (Modifier.isFinal(modifiers)) {    buf.append("final ");  }  if (Modifier.isSynchronized(modifiers)) {    buf.append("synchronized ");  }  if (Modifier.isVolatile(modifiers)) {    buf.append("volatile ");  }  if (Modifier.isNative(modifiers)) {    buf.append("native ");  }  if (Modifier.isStrictfp(modifiers)) {    buf.append("strictfp ");  }  if (Modifier.isTransient(modifiers)) {    buf.append("transient ");  }}  }
class C{  protected void dispatchMouseEvent(String eventType,Element targetElement,Element relatedElement,Point clientXY,GraphicsNodeMouseEvent evt,boolean cancelable){  dispatchMouseEvent(eventType,targetElement,relatedElement,clientXY,evt,cancelable,0);}  }
class C{  protected ExecutionImpl(){  super();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getRootPanel().setAcceleratedDrawing(evalBool(stack.pop()),true));}  }
class C{  public void testSetSeed(){  try {    ThreadLocalRandom.current().setSeed(17);    shouldThrow();  } catch (  UnsupportedOperationException success) {  }}  }
class C{  protected void doCreateAreaSymbols(FeatureMap featureMap,Collection<VPFSymbol> outCollection){  for (  Map.Entry<VPFSymbolKey,CombinedFeature> entry : featureMap.entrySet()) {    CombinedFeature feature=entry.getValue();    for (    VPFSymbolAttributes attr : this.getSymbolAttributes(feature,entry.getKey())) {switch (attr.getFeatureType()) {case AREA:        this.addAreaSymbol(feature,attr,outCollection);      break;case LINE:    this.addAreaSymbol(feature,attr,outCollection);  break;case POINT:this.addPointLabel(feature,attr,outCollection);break;case LABEL:this.addTextLabel(feature,attr,outCollection);break;}}}}  }
class C{  public boolean hasRel(){  return super.hasAttribute(REL);}  }
class C{  public boolean isLogicalFunction(){  return true;}  }
class C{  public SyncHttpClient(int httpPort){  this(false,httpPort,443);}  }
class C{  public body addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public boolean isSendEMail(){  Object oo=get_Value(COLUMNNAME_SendEMail);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static WhereBuilder b(){  return new WhereBuilder();}  }
class C{  @Override protected Dimension calcPreferredSize(){  int w=Display.getInstance().convertToPixels(75,true);  int h=Display.getInstance().convertToPixels(40,true);  return new Dimension(w,h);}  }
class C{  @Override public int hashCode(){  List<A> l=this;  int h=1;  while (l.tail != null) {    h=h * 31 + (l.head == null ? 0 : l.head.hashCode());    l=l.tail;  }  return h;}  }
class C{  private void waitForThreadInit(long timeout){synchronized (networkThread.exceptionMonitorObject) {    long endtime=System.nanoTime() + timeout * 1000 * 1000;    long towait=timeout;    while (!networkThread.socketThreadInitialized) {      try {        networkThread.exceptionMonitorObject.wait(towait);      } catch (      InterruptedException e) {      }      towait=(endtime - System.nanoTime()) / (1000 * 1000);      if (towait <= 0) {        break;      }    }  }}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public boolean postExecuteVisibility(){  return (mEffectType == EffectType.EFFECT_SPIRAL_OUT) || (mEffectType == EffectType.EFFECT_SPIRAL_OUT_FILL);}  }
class C{  public void cancel(){  this.handler.cancel();}  }
class C{  public boolean equals(Item other){  return other == getItem();}  }
class C{  public _ScheduleDays(final _ScheduleDays_Flag[] flags){  super(flags);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.449 -0400",hash_original_method="E9357143661C4CBD062C72A99CA332CD",hash_generated_method="F1CFBA8A44FEEE267762B3A58ED6A9B1") private int handleCC(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index + 2,1,"I","E","H") && !contains(value,index + 2,2,"HU")) {    if ((index == 1 && charAt(value,index - 1) == 'A') || contains(value,index - 1,5,"UCCEE","UCCES")) {      result.append("KS");    } else {      result.append('X');    }    index+=3;  } else {    result.append('K');    index+=2;  }  return index;}  }
class C{  public CF5(){  this(10);}  }
class C{  public void close(){  setOpen(false);}  }
class C{  boolean readBoolean(){  byte ret=readByte();  return (ret != 0);}  }
class C{  void addBridge(DiagnosticPosition pos,MethodSymbol meth,MethodSymbol impl,ClassSymbol origin,boolean hypothetical,ListBuffer<JCTree> bridges){  make.at(pos);  Type origType=types.memberType(origin.type,meth);  Type origErasure=erasure(origType);  Type bridgeType=meth.erasure(types);  long flags=impl.flags() & AccessFlags | SYNTHETIC | BRIDGE | (origin.isInterface() ? DEFAULT : 0);  if (hypothetical)   flags|=HYPOTHETICAL;  MethodSymbol bridge=new MethodSymbol(flags,meth.name,bridgeType,origin);  bridge.params=createBridgeParams(impl,bridge,bridgeType);  bridge.setAttributes(impl);  if (!hypothetical) {    JCMethodDecl md=make.MethodDef(bridge,null);    JCExpression receiver=(impl.owner == origin) ? make.This(origin.erasure(types)) : make.Super(types.supertype(origin.type).tsym.erasure(types),origin);    Type calltype=erasure(impl.type.getReturnType());    JCExpression call=make.Apply(null,make.Select(receiver,impl).setType(calltype),translateArgs(make.Idents(md.params),origErasure.getParameterTypes(),null)).setType(calltype);    JCStatement stat=(origErasure.getReturnType().hasTag(VOID)) ? make.Exec(call) : make.Return(coerce(call,bridgeType.getReturnType()));    md.body=make.Block(0,List.of(stat));    bridges.append(md);  }  origin.members().enter(bridge);  overridden.put(bridge,meth);}  }
class C{  public void startDownload(final String hostname,final int port,final String uri,final int reportInterval){  initReportTask(reportInterval,true);  mTask.setReportInterval(true);  startDownload(hostname,port,uri);}  }
class C{  @Override public String toString(){  return explain(true);}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  private boolean verifyMechListMIC(byte[] mechTypes,byte[] token) throws GSSException {  if (token == null) {    if (DEBUG) {      System.out.println("SpNegoContext: no MIC token validation");    }    return true;  }  if (!mechContext.getIntegState()) {    if (DEBUG) {      System.out.println("SpNegoContext: no MIC token validation" + " - mechanism does not support integrity");    }    return true;  }  boolean valid=false;  try {    MessageProp prop=new MessageProp(0,true);    verifyMIC(token,0,token.length,mechTypes,0,mechTypes.length,prop);    valid=true;  } catch (  GSSException e) {    valid=false;    if (DEBUG) {      System.out.println("SpNegoContext: MIC validation failed! " + e.getMessage());    }  }  return valid;}  }
class C{  public static <T>Optional<T> lowestCommonAncestor(TreeDef.Parented<T> treeDef,List<T> nodes){  if (nodes.size() == 0) {    return Optional.empty();  } else {    Optional<T> soFar=Optional.of(nodes.get(0));    for (int i=1; i < nodes.size() && soFar.isPresent(); ++i) {      soFar=lowestCommonAncestor(treeDef,soFar.get(),nodes.get(i));    }    return soFar;  }}  }
