class C{  public void True(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  public boolean isConnected(final Synapse s){  return (fanIn.contains(s) || fanOut.get(s.getTarget()) != null);}  }
class C{  private Organization validateOrganizationDataForRegistration(VOOrganization organization,VOUserDetails user) throws ValidationException, NonUniqueBusinessKeyException {  Organization caller=dm.getCurrentUser().getOrganization();  String id=organization.getOrganizationId();  if (id != null && id.length() > 0) {    ValidationException vf=new ValidationException(ReasonEnum.EMPTY_VALUE,OrganizationAssembler.FIELD_NAME_ORGANIZATION_ID,new Object[]{id});    logger.logError(Log4jLogger.SYSTEM_LOG,vf,LogMessageIdentifier.WARN_NON_EMPTY_ORGANIZATION_ID_SPECIFIED,"Organization");    throw vf;  }  if (checkIfPlatformUserInGivenTenantExists(organization.getTenantKey(),user.getUserId())) {    throw new NonUniqueBusinessKeyException(DomainObjectException.ClassEnum.USER,user.getUserId());  }  return caller;}  }
class C{  public DriverTask createConsistencyGroup(VolumeConsistencyGroup volumeConsistencyGroup){  DellSCDriverTask task=new DellSCDriverTask("createConsistencyGroup");  String ssn=volumeConsistencyGroup.getStorageSystemId();  try {    StorageCenterAPI api=connectionManager.getConnection(ssn);    ScReplayProfile cg=api.createConsistencyGroup(ssn,volumeConsistencyGroup.getDisplayName());    util.getVolumeConsistencyGroupFromReplayProfile(cg,volumeConsistencyGroup);    task.setStatus(TaskStatus.READY);  } catch (  StorageCenterAPIException|DellSCDriverException dex) {    String error=String.format("Error creating CG %s: %s",volumeConsistencyGroup.getDisplayName(),dex);    LOG.error(error);    task.setFailed(error);  }  return task;}  }
class C{  private void initTuners(){  DeviceList deviceList=new DeviceList();  int result=LibUsb.init(null);  if (result != LibUsb.SUCCESS) {    mLog.error("unable to initialize libusb [" + LibUsb.errorName(result) + "]");  } else {    mLog.info("LibUSB API Version: " + LibUsb.getApiVersion());    mLog.info("LibUSB Version: " + LibUsb.getVersion());    result=LibUsb.getDeviceList(null,deviceList);    if (result < 0) {      mLog.error("unable to get device list from libusb [" + result + " / "+ LibUsb.errorName(result)+ "]");    } else {      mLog.info("discovered [" + result + "] attached USB devices");    }  }  for (  Device device : deviceList) {    DeviceDescriptor descriptor=new DeviceDescriptor();    result=LibUsb.getDeviceDescriptor(device,descriptor);    if (result != LibUsb.SUCCESS) {      mLog.error("unable to read device descriptor [" + LibUsb.errorName(result) + "]");    } else {      TunerInitStatus status=initTuner(device,descriptor);      StringBuilder sb=new StringBuilder();      sb.append("usb device [");      sb.append(String.format("%04X",descriptor.idVendor()));      sb.append(":");      sb.append(String.format("%04X",descriptor.idProduct()));      if (status.isLoaded()) {        Tuner tuner=status.getTuner();        try {          mTunerModel.addTuner(tuner);          sb.append("] LOADED: ");          sb.append(tuner.toString());        } catch (        Exception e) {          sb.append("] NOT LOADED: ");          sb.append(status.getInfo());          sb.append(" Error:" + e.getMessage());        }      } else {        sb.append("] NOT LOADED: ");        sb.append(status.getInfo());      }      mLog.info(sb.toString());    }  }  LibUsb.freeDeviceList(deviceList,true);}  }
class C{  void preRemoveChildEvent(ASTNode node,ASTNode child,StructuralPropertyDescriptor property){synchronized (this.internalASTLock) {    if (this.disableEvents > 0) {      return;    } else {      disableEvents();    }  }  try {    this.eventHandler.preRemoveChildEvent(node,child,property);  }  finally {    reenableEvents();  }}  }
class C{  public static IsNullValue checkedNullValue(){  return instanceByFlagsList[0][CHECKED_NULL];}  }
class C{  protected CCFollow(CCNode followedNode,CGRect rect){  super();  followedNode_=followedNode;  boundarySet=true;  boundaryFullyCovered=false;  CGSize winSize=CCDirector.sharedDirector().winSize();  fullScreenSize=CGPoint.make(winSize.width,winSize.height);  halfScreenSize=CGPoint.ccpMult(fullScreenSize,.5f);  leftBoundary=-((rect.origin.x + rect.size.width) - fullScreenSize.x);  rightBoundary=-rect.origin.x;  topBoundary=-rect.origin.y;  bottomBoundary=-((rect.origin.y + rect.size.height) - fullScreenSize.y);  if (rightBoundary < leftBoundary) {    rightBoundary=leftBoundary=(leftBoundary + rightBoundary) / 2;  }  if (topBoundary < bottomBoundary) {    topBoundary=bottomBoundary=(topBoundary + bottomBoundary) / 2;  }  if ((topBoundary == bottomBoundary) && (leftBoundary == rightBoundary))   boundaryFullyCovered=true;}  }
class C{  public boolean satisfies(HyperGraph graph,HGHandle handle){  int count=0;  if (graph.isLoaded(handle)) {    Object atom=graph.get(handle);    if (!(atom instanceof HGLink))     return false;    HGLink link=(HGLink)atom;    for (int i=0; i < link.getArity(); i++)     if (contains(link.getTargetAt(i)))     count++;  } else {    HGPersistentHandle[] A=graph.getStore().getLink(handle.getPersistent());    for (int i=2; i < A.length; i++)     if (contains(A[i]))     count++;  }  return count == targetSet.size();}  }
class C{  public void onAppLoaded(){  Log.d(TAG,"App Loaded");  if (config().getAutoJoinType() == AutoJoinType.IMMEDIATELY) {    joinGroups();  }}  }
class C{  public static JavaPairRDD<Long[],Long> boudariesDiff(JavaRDD<Long> timestamps,Long firstElement,Long lastElement){  JavaRDD<Long> firstRDD=timestamps.filter(null);  JavaRDD<Long> secondRDD=timestamps.filter(null);  return firstRDD.zip(secondRDD).mapToPair(null);}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor){  callChildVisitors(visitor,true);}  }
class C{  public void validateBusinessObjectData(BusinessObjectDataCreateRequest request,Integer expectedBusinessObjectDataVersion,Boolean expectedLatestVersion,BusinessObjectData actualBusinessObjectData){  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDao.getBusinessObjectFormatByAltKey(new BusinessObjectFormatKey(org.apache.commons.lang3.StringUtils.isNotBlank(request.getNamespace()) ? request.getNamespace() : AbstractServiceTest.NAMESPACE,request.getBusinessObjectDefinitionName(),request.getBusinessObjectFormatUsage(),request.getBusinessObjectFormatFileType(),request.getBusinessObjectFormatVersion()));  List<String> expectedSubPartitionValues=CollectionUtils.isEmpty(request.getSubPartitionValues()) ? new ArrayList<>() : request.getSubPartitionValues();  String expectedStatusCode=org.apache.commons.lang3.StringUtils.isNotBlank(request.getStatus()) ? request.getStatus() : BusinessObjectDataStatusEntity.VALID;  StorageUnitCreateRequest storageUnitCreateRequest=request.getStorageUnits().get(0);  StorageEntity storageEntity=storageDao.getStorageByName(storageUnitCreateRequest.getStorageName());  String expectedStorageDirectoryPath=storageUnitCreateRequest.getStorageDirectory() != null ? storageUnitCreateRequest.getStorageDirectory().getDirectoryPath() : null;  List<StorageFile> expectedStorageFiles=CollectionUtils.isEmpty(storageUnitCreateRequest.getStorageFiles()) ? null : storageUnitCreateRequest.getStorageFiles();  List<Attribute> expectedAttributes=CollectionUtils.isEmpty(request.getAttributes()) ? new ArrayList<>() : request.getAttributes();  validateBusinessObjectData(businessObjectFormatEntity,request.getPartitionValue(),expectedSubPartitionValues,expectedBusinessObjectDataVersion,expectedLatestVersion,expectedStatusCode,storageEntity.getName(),expectedStorageDirectoryPath,expectedStorageFiles,expectedAttributes,actualBusinessObjectData);}  }
class C{  public void start(){  mUpdateExecutor=Executors.newSingleThreadExecutor();  IntentFilter filter=new IntentFilter(Intent.ACTION_LOCALE_CHANGED);  mLocaleChangedReceiver=new LocaleChangedReceiver();  mCtx.registerReceiver(mLocaleChangedReceiver,filter);  String displayLanguage=mRcsSettings.getDisplayLanguage();  if (displayLanguage == null || !displayLanguage.equals(Locale.getDefault().getDisplayLanguage())) {    mUpdateExecutor.execute(mLocaleUpdater);  }}  }
class C{  @Override public void deleteCredentials(final URI targetUri){  BaseSecureStore.validateTargetUri(targetUri);  Trace.writeLine("BaseVsoAuthentication::deleteCredentials");  AtomicReference<Credential> credentials=new AtomicReference<Credential>();  AtomicReference<Token> token=new AtomicReference<Token>();  if (this.PersonalAccessTokenStore.readCredentials(targetUri,credentials)) {    this.PersonalAccessTokenStore.deleteCredentials(targetUri);  } else   if (this.AdaRefreshTokenStore.readToken(targetUri,token)) {    this.AdaRefreshTokenStore.deleteToken(targetUri);  }}  }
class C{  public void AddElement(Object obj){  ptVector.add(obj);}  }
class C{  @Override public String toString(){  return "(SelfPermission " + type + " "+ name+ " "+ actions+ ")";}  }
class C{  public static PerfDataType toPerfDataType(byte type){  for (int j=0; j < basicTypes.length; j++) {    if (basicTypes[j].byteValue() == type) {      return (basicTypes[j]);    }  }  return ILLEGAL;}  }
class C{  private static void swap(Object[] arr,int i,int j){  Object tmp=arr[i];  arr[i]=arr[j];  arr[j]=tmp;}  }
class C{  public Boolean isClusterSupported(){  return clusterSupported;}  }
class C{  protected void changeFileId(int fileId){  m_fileId=fileId;}  }
class C{  public static boolean parseArrayIndex(PsiBuilder b,int l){  if (consumeToken(b,LEFT_BRACKET)) {    boolean r=false;    assert b instanceof PerlBuilder;    if (((PerlBuilder)b).isRegex()) {      r=PerlParserImpl.interpolated_constructs(b,l);      if (!r) {        r=PerlParserImpl.number_constant(b,l);      }    } else {      r=PerlParserImpl.expr(b,l + 1,-1);      if (!r && b.getTokenType() == RIGHT_BRACKET) {        r=true;        b.mark().error("Empty array index");      }    }    return r && consumeToken(b,RIGHT_BRACKET);  }  return false;}  }
class C{  public void onUndeployed(ClassLoader ldr){  if (!ctx.isStopping()) {    for (    GridCacheAdapter<?,?> cache : caches.values()) {      if (cache.context().userCache() && cache.context().deploymentEnabled())       cache.onUndeploy(ldr);    }  }}  }
class C{  public void processCategory(List<String> category,Node node,URL url,Network network){  while (node != null) {    Node header=findTag("h2","Pages in category",node);    if (header == null) {      log("Empty category",Bot.FINE,url);      return;    }    if (this.quickProcess) {      List<String> items=getAllBullets(header);      for (int index=0; index < items.size(); index++) {        String item=items.get(index);        quickProcessWord(item,category,network);      }    } else {      List<String> items=getAllURLBullets(header);      String host="http://" + url.getHost();      for (int index=0; index < items.size(); index++) {        String childURL=items.get(index);        if (childURL.indexOf("http://") == -1) {          items.set(index,host + childURL);        }      }      List<URL> urls=new ArrayList<URL>();      for (int index=0; index < items.size(); index++) {        String item=items.get(index);        try {          URL childURL=new URL(item);          urls.add(childURL);        } catch (        Exception ioException) {          log(ioException);        }      }      if (this.isBatch) {        input(urls);      } else {        for (        URL child : urls) {          input(child);        }      }    }    if (this.followNext) {      if (this.isBatch) {        network.save();      }      Node next=findTag("a",NEXT_TAG,node);      if (next != null) {        String host="http://" + url.getHost();        String nextURL=next.getAttributes().getNamedItem("href").getTextContent();        if (nextURL.indexOf("http://") == -1) {          nextURL=host + nextURL;        }        try {          url=new URL(nextURL);          node=parseURL(url);        } catch (        Exception ioException) {          log(ioException);        }      } else {        return;      }    } else {      return;    }  }}  }
class C{  private void sendStageProgressPatch(final State current,final TaskState.TaskStage stage,final TaskState.SubStage subStage){  if (current != null && current.isSelfProgressionDisabled) {    return;  }  this.sendSelfPatch(buildPatch(stage,subStage,null));}  }
class C{  public AccountHeaderBuilder withTextColor(@ColorInt int textColor){  this.mTextColor=ColorHolder.fromColor(textColor);  return this;}  }
class C{  public void processStatementFilterSingle(EPStatementAgentInstanceHandle handle,EPStatementHandleCallback handleCallback,EventBean theEvent,long version){  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qEventCP(theEvent,handle,services.getSchedulingService().getTime());  }  handle.getStatementAgentInstanceLock().acquireWriteLock();  try {    if (handle.isHasVariables()) {      services.getVariableService().setLocalVersion();    }    if (!handle.isCurrentFilter(version)) {      boolean handled=false;      if (handle.getFilterFaultHandler() != null) {        handled=handle.getFilterFaultHandler().handleFilterFault(theEvent,version);      }      if (!handled) {        handleFilterFault(handle,theEvent);      }    } else {      handleCallback.getFilterCallback().matchFound(theEvent,null);    }    handle.internalDispatch();  } catch (  RuntimeException ex) {    services.getExceptionHandlingService().handleException(ex,handle,ExceptionHandlerExceptionType.PROCESS,theEvent);  } finally {    if (handle.isHasTableAccess()) {      services.getTableService().getTableExprEvaluatorContext().releaseAcquiredLocks();    }    handleCallback.getAgentInstanceHandle().getStatementAgentInstanceLock().releaseWriteLock();    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aEventCP();    }  }}  }
class C{  public IoBuffer buf(){  return this.buf;}  }
class C{  public CIntegerOperandMenu(final COperandTreeNode treeNode,final INaviReplacement replacement){  super("Operand Type");  final JCheckBoxMenuItem unsignedDecimalMenu=new JCheckBoxMenuItem(new CDisplayOperandAction(treeNode,OperandDisplayStyle.UNSIGNED_DECIMAL,"Unsigned Decimal"));  final JCheckBoxMenuItem signedDecimalMenu=new JCheckBoxMenuItem(new CDisplayOperandAction(treeNode,OperandDisplayStyle.SIGNED_DECIMAL,"Signed Decimal"));  final JCheckBoxMenuItem unsignedHexadecimalMenu=new JCheckBoxMenuItem(new CDisplayOperandAction(treeNode,OperandDisplayStyle.UNSIGNED_HEXADECIMAL,"Unsigned Hexadecimal"));  final JCheckBoxMenuItem signedHexadecimalMenu=new JCheckBoxMenuItem(new CDisplayOperandAction(treeNode,OperandDisplayStyle.SIGNED_HEXADECIMAL,"Signed Hexadecimal"));  final JCheckBoxMenuItem unsignedOctalMenu=new JCheckBoxMenuItem(new CDisplayOperandAction(treeNode,OperandDisplayStyle.OCTAL,"Octal"));  final JCheckBoxMenuItem unsignedBinaryMenu=new JCheckBoxMenuItem(new CDisplayOperandAction(treeNode,OperandDisplayStyle.BINARY,"Binary"));  final JCheckBoxMenuItem charMenu=new JCheckBoxMenuItem(new CDisplayOperandAction(treeNode,OperandDisplayStyle.CHAR,"Char"));  final JCheckBoxMenuItem offsetMenu=new JCheckBoxMenuItem(new CDisplayOperandAction(treeNode,OperandDisplayStyle.OFFSET,"Offset"));  add(unsignedHexadecimalMenu);  add(signedHexadecimalMenu);  add(unsignedDecimalMenu);  add(signedDecimalMenu);  add(unsignedOctalMenu);  add(unsignedBinaryMenu);  add(charMenu);  if (replacement != null) {    add(offsetMenu);  }switch (treeNode.getDisplayStyle()) {case UNSIGNED_HEXADECIMAL:    unsignedHexadecimalMenu.setSelected(true);  break;case SIGNED_HEXADECIMAL:signedHexadecimalMenu.setSelected(true);break;case UNSIGNED_DECIMAL:unsignedDecimalMenu.setSelected(true);break;case SIGNED_DECIMAL:signedDecimalMenu.setSelected(true);break;case OCTAL:unsignedOctalMenu.setSelected(true);break;case BINARY:unsignedBinaryMenu.setSelected(true);break;case CHAR:charMenu.setSelected(true);break;case OFFSET:offsetMenu.setSelected(true);break;default :throw new IllegalStateException("IE02248: Unknown selection");}}  }
class C{  public List<String> components(){  String path=this.path;  assert path.length() >= 1 : "Path expected to be absolute: " + path;  return path.length() == 1 ? Collections.<String>emptyList() : Arrays.asList(path.substring(1).split(SLASH));}  }
class C{  public void compress(String path){  try {    File fileToArchive=new File(path);    FileInputStream input=new FileInputStream(fileToArchive);    File archivedFile=new File(fileToArchive.getName() + ".bz2");    archivedFile.createNewFile();    FileOutputStream fos=new FileOutputStream(archivedFile);    BufferedOutputStream bufStr=new BufferedOutputStream(fos);    fos.write("BZ".getBytes());    CBZip2OutputStream bzip2=new CBZip2OutputStream(bufStr);    while (input.available() > 0) {      int size=COMPRESSION_CACHE;      if (input.available() < COMPRESSION_CACHE) {        size=input.available();      }      byte[] bytes=new byte[size];      input.read(bytes);      bzip2.write(bytes);    }    bzip2.close();    bufStr.close();    fos.close();    input.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private static boolean includeSubManifest(String subManifestFile,String[] excludedSubdirs){  boolean result=true;  if (excludedSubdirs != null && excludedSubdirs.length > 0) {    int index=subManifestFile.lastIndexOf("/");    String path=subManifestFile.substring(0,index);    String sd=path.substring(path.lastIndexOf("/") + 1);    for (    String subdir : excludedSubdirs) {      if (sd.equals(subdir)) {        result=false;        break;      }    }  }  return result;}  }
class C{  public static synchronized void xdescribe(String description,SafeBlock block){  notAllowedWhenCIModeEnabled("xdescribe");  isValidContext("xdescribe");  ExampleGroupConfiguration config=new ExampleGroupConfiguration.Builder().description(description).executionFlag(IGNORED).build();  contexts.get().current().addGroup(config,block);}  }
class C{  protected <T extends Node>List<T> createList(){  return new ArrayList<T>();}  }
class C{  public Set<Entry<T,T>> equivalencePairs(){  Collection<Entry<T,T>> entries=equivalences.entries();  Map<T,T> normalized=new HashMap<>(entries.size() / 2);  for (  Entry<T,T> entry : entries) {    T key=entry.getKey();    T val=entry.getValue();    boolean sawReflection;    if (normalized.containsKey(val)) {      T otherKey=normalized.get(val);      if (otherKey == null)       sawReflection=(key == null); else       sawReflection=otherKey.equals(key);    } else {      sawReflection=false;    }    if (!sawReflection)     normalized.put(key,val);  }  return normalized.entrySet();}  }
class C{  public Prepared prepare(String sql){  Prepared p=parse(sql);  p.prepare();  if (currentTokenType != END) {    throw getSyntaxError();  }  return p;}  }
class C{  public byte[] resumeUpload() throws IOException, PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.debug("User resumes transfer (TID=" + mTId + ")");  }  byte[] resp=sendGetInfo(UPLOAD_INFO_REQUEST,false);  resumeTransfer();  if (resp == null) {    if (sLogger.isActivated()) {      sLogger.debug("Unexpected Server response, will restart upload from beginning");    }    return uploadFile();  }  try {    if (isHttpTraceEnabled()) {      String trace="Get Upload Info response:\n".concat(Arrays.toString(resp));      System.out.println(trace);    }    FileTransferHttpResumeInfo ftResumeInfo=ChatUtils.parseFileTransferHttpResumeInfo(resp);    if (ftResumeInfo == null) {      sLogger.error("Cannot parse resume info! restart upload");      return uploadFile();    }    if ((ftResumeInfo.getEnd() - ftResumeInfo.getStart()) >= (mContent.getSize() - 1)) {      if (sLogger.isActivated()) {        sLogger.debug("Nothing to resume: uploaded complete");      }      return sendGetDownloadInfo();    }    if (sendPutForResumingUpload(ftResumeInfo) != null) {      return sendGetDownloadInfo();    }    return null;  } catch (  ParserConfigurationException|SAXException e) {    throw new PayloadException("Unable to parse file transfer resume info!",e);  }}  }
class C{  @Override public int hashCode(){  int result=39;  result=HashUtilities.hashCode(result,getToolTipText());  result=HashUtilities.hashCode(result,getURLText());  return result;}  }
class C{  public boolean isSOAPFault(){  return content.contains("Fault>") || content.contains("fault>");}  }
class C{  public static String nullFormat(final Object obj){  return obj == null ? "null" : obj.toString();}  }
class C{  public void detectAndSendChanges(){  super.detectAndSendChanges();  for (int i=0; i < this.crafters.size(); ++i) {    ICrafting icrafting=(ICrafting)this.crafters.get(i);    icrafting.sendProgressBarUpdate(this,1,this.entity.storage.getEnergyStored());    icrafting.sendProgressBarUpdate(this,2,this.entity.heat);    icrafting.sendProgressBarUpdate(this,3,this.entity.fueltime);    icrafting.sendProgressBarUpdate(this,4,this.entity.storage.getEnergyStored() >> 16);    icrafting.sendProgressBarUpdate(this,5,this.entity.heat >> 16);    icrafting.sendProgressBarUpdate(this,6,this.entity.fueltime >> 16);    icrafting.sendProgressBarUpdate(this,7,this.entity.E);    icrafting.sendProgressBarUpdate(this,8,this.entity.E >> 16);    icrafting.sendProgressBarUpdate(this,9,this.entity.H);    icrafting.sendProgressBarUpdate(this,10,this.entity.H >> 16);    icrafting.sendProgressBarUpdate(this,11,this.entity.off);    icrafting.sendProgressBarUpdate(this,12,this.entity.off >> 16);    icrafting.sendProgressBarUpdate(this,13,this.entity.fueltype);    icrafting.sendProgressBarUpdate(this,14,this.entity.fueltype >> 16);    icrafting.sendProgressBarUpdate(this,15,this.entity.EReal);    icrafting.sendProgressBarUpdate(this,16,this.entity.EReal >> 16);    icrafting.sendProgressBarUpdate(this,17,this.entity.HReal);    icrafting.sendProgressBarUpdate(this,18,this.entity.HReal >> 16);    icrafting.sendProgressBarUpdate(this,19,this.entity.FReal);    icrafting.sendProgressBarUpdate(this,20,this.entity.FReal >> 16);    icrafting.sendProgressBarUpdate(this,21,this.entity.complete);    icrafting.sendProgressBarUpdate(this,22,this.entity.complete >> 16);    icrafting.sendProgressBarUpdate(this,23,this.entity.lx);    icrafting.sendProgressBarUpdate(this,24,this.entity.lx >> 16);    icrafting.sendProgressBarUpdate(this,25,this.entity.ly);    icrafting.sendProgressBarUpdate(this,26,this.entity.ly >> 16);    icrafting.sendProgressBarUpdate(this,27,this.entity.lz);    icrafting.sendProgressBarUpdate(this,28,this.entity.lz >> 16);    icrafting.sendProgressBarUpdate(this,29,this.entity.efficiency);    icrafting.sendProgressBarUpdate(this,30,this.entity.efficiency >> 16);    icrafting.sendProgressBarUpdate(this,31,this.entity.numberOfCells);    icrafting.sendProgressBarUpdate(this,32,this.entity.numberOfCells >> 16);    icrafting.sendProgressBarUpdate(this,33,this.entity.HCooling);    icrafting.sendProgressBarUpdate(this,34,this.entity.HCooling >> 16);  }}  }
class C{  private String sanitize(String input){  return input.replaceAll("\\r|\\n","").trim();}  }
class C{  private void startMon(MonKey key){  map.put(key,MonitorFactory.start(key));}  }
class C{  public static <A>OptionalTValue<A> of(final AnyMValue<Optional<A>> monads){  return new OptionalTValue<>(monads);}  }
class C{  private void initializeNodejsPreferences(IEclipsePreferences node){  if (!useBundledNodeJsEmbedded(node)) {    node.putBoolean(TypeScriptCorePreferenceConstants.USE_NODEJS_EMBEDDED,false);    node.put(TypeScriptCorePreferenceConstants.NODEJS_PATH,IDENodejsProcessHelper.getNodejsPath());  } else {    node.putBoolean(TypeScriptCorePreferenceConstants.USE_NODEJS_EMBEDDED,true);    node.put(TypeScriptCorePreferenceConstants.NODEJS_PATH,"");  }}  }
class C{  public String addURIAttributes(final SolrInputDocument doc,final boolean allAttr,final DigestURL digestURL){  add(doc,CollectionSchema.id,ASCII.String(digestURL.hash()));  if (allAttr || contains(CollectionSchema.host_id_s))   add(doc,CollectionSchema.host_id_s,digestURL.hosthash());  String us=digestURL.toNormalform(true);  add(doc,CollectionSchema.sku,us);  if (allAttr || contains(CollectionSchema.ip_s)) {    final InetAddress address=digestURL.getInetAddress();    if (address != null)     add(doc,CollectionSchema.ip_s,address.getHostAddress());  }  String host=null;  if ((host=digestURL.getHost()) != null) {    String dnc=Domains.getDNC(host);    String subdomOrga=host.length() - dnc.length() <= 0 ? "" : host.substring(0,host.length() - dnc.length() - 1);    int p=subdomOrga.lastIndexOf('.');    String subdom=(p < 0) ? "" : subdomOrga.substring(0,p);    String orga=(p < 0) ? subdomOrga : subdomOrga.substring(p + 1);    if (allAttr || contains(CollectionSchema.host_s))     add(doc,CollectionSchema.host_s,host);    if (allAttr || contains(CollectionSchema.host_dnc_s))     add(doc,CollectionSchema.host_dnc_s,dnc);    if (allAttr || contains(CollectionSchema.host_organization_s))     add(doc,CollectionSchema.host_organization_s,orga);    if (allAttr || contains(CollectionSchema.host_organizationdnc_s))     add(doc,CollectionSchema.host_organizationdnc_s,orga + '.' + dnc);    if (allAttr || contains(CollectionSchema.host_subdomain_s))     add(doc,CollectionSchema.host_subdomain_s,subdom);  }  String filename=digestURL.getFileName();  String extension=MultiProtocolURL.getFileExtension(filename);  String filenameStub=filename.toLowerCase().endsWith("." + extension) ? filename.substring(0,filename.length() - extension.length() - 1) : filename;  if (extension.indexOf(';') >= 0)   extension=extension.substring(0,extension.indexOf(';'));  if (allAttr || contains(CollectionSchema.url_chars_i))   add(doc,CollectionSchema.url_chars_i,us.length());  if (allAttr || contains(CollectionSchema.url_protocol_s))   add(doc,CollectionSchema.url_protocol_s,digestURL.getProtocol());  if (allAttr || contains(CollectionSchema.url_paths_sxt) || contains(CollectionSchema.url_paths_count_i)) {    String[] paths=digestURL.getPaths();    if (allAttr || contains(CollectionSchema.url_paths_count_i))     add(doc,CollectionSchema.url_paths_count_i,paths.length);    if (allAttr || contains(CollectionSchema.url_paths_sxt))     add(doc,CollectionSchema.url_paths_sxt,paths);  }  if (allAttr || contains(CollectionSchema.url_file_name_s))   add(doc,CollectionSchema.url_file_name_s,filenameStub);  if (allAttr || contains(CollectionSchema.url_file_name_tokens_t))   add(doc,CollectionSchema.url_file_name_tokens_t,MultiProtocolURL.toTokens(filenameStub));  if (allAttr || contains(CollectionSchema.url_file_ext_s))   add(doc,CollectionSchema.url_file_ext_s,extension);  Map<String,String> searchpart=digestURL.getSearchpartMap();  if (searchpart == null) {    if (allAttr || contains(CollectionSchema.url_parameter_i))     add(doc,CollectionSchema.url_parameter_i,0);  } else {    if (allAttr || contains(CollectionSchema.url_parameter_i))     add(doc,CollectionSchema.url_parameter_i,searchpart.size());    if (allAttr || contains(CollectionSchema.url_parameter_key_sxt))     add(doc,CollectionSchema.url_parameter_key_sxt,searchpart.keySet().toArray(new String[searchpart.size()]));    if (allAttr || contains(CollectionSchema.url_parameter_value_sxt))     add(doc,CollectionSchema.url_parameter_value_sxt,searchpart.values().toArray(new String[searchpart.size()]));  }  return us;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"QADD");  translateAll(environment,instruction,"QADD",instructions);}  }
class C{  private Intent generateSipIntent(SipRequest request,String featureTag){  String content=request.getContent();  if (content == null) {    return null;  }  content=content.toLowerCase();  Intent intent=null;  String method=request.getMethod();  if (Request.INVITE.equals(method)) {    if (content.contains("msrp")) {      intent=new Intent(MultimediaMessagingSessionIntent.ACTION_NEW_INVITATION);    } else     if (content.contains("rtp")) {      intent=new Intent(MultimediaStreamingSessionIntent.ACTION_NEW_INVITATION);    }  } else   if (Request.MESSAGE.equals(method)) {    intent=new Intent(InstantMultimediaMessageIntent.ACTION_NEW_INSTANT_MESSAGE);  } else {    return null;  }  if (intent != null) {    String mime=formatIntentMimeType(featureTag);    intent.addCategory(Intent.CATEGORY_DEFAULT);    intent.setType(mime.toLowerCase());  }  return intent;}  }
class C{  public void testReceive_UnconnectedCloseReadonly() throws Exception {  assertFalse(this.channel1.isConnected());  ByteBuffer dst=ByteBuffer.allocateDirect(CAPACITY_NORMAL).asReadOnlyBuffer();  assertTrue(dst.isReadOnly());  this.channel1.close();  assertFalse(this.channel1.isOpen());  try {    this.channel1.receive(dst);    fail("Should throw an IllegalArgumentException here.");  } catch (  IllegalArgumentException e) {  }}  }
class C{  private void createKVTable(){  execNonQuery(SQL_CREATE_TABLE,new String[]{TABLE_NAME,COLUMN_KEY,COLUMN_VALUE});}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public SubjectHeader createSubjectHeader(String subject) throws ParseException {  if (subject == null)   throw new NullPointerException("null subject arg");  Subject s=new Subject();  s.setSubject(subject);  return s;}  }
class C{  public boolean isReceiverPointer(){  Value rec=getReceiver();  if (rec == null)   return false;  return PTABridge.v().isPointer(rec);}  }
class C{  public RangeConstraint createRangeConstraint(){  RangeConstraintImpl rangeConstraint=new RangeConstraintImpl();  return rangeConstraint;}  }
class C{  @Override public void visitIntInsn(int opcode,int operand){switch (opcode) {case BIPUSH:case SIPUSH:    super.visitIntInsn(opcode,operand);  mv.visitInsn(DUP);mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],I_V);return;case NEWARRAY:mv.visitInsn(DUP);mv.visitIntInsn(BIPUSH,operand);mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],II_V);super.visitIntInsn(opcode,operand);return;default :check(false);}}  }
class C{  public OverflowQueueWithDMStats(QueueStatHelper stats){  super();  this.stats=stats;}  }
class C{  public static void tripleToEdge(final long[] triple,final long seed,final int numVertices,final int e[]){  tripleToEdge(triple,seed,numVertices,(int)(numVertices * 0xAAAAAAABL >>> 33),e);}  }
class C{  public DBObject_Index_Table(DBConnection parent,String name,int sequence){  super(parent,name,sequence);}  }
class C{  private void checkOrMarkPrivateAccess(Expression source,FieldNode fn,boolean lhsOfAssignment){  if (fn != null && Modifier.isPrivate(fn.getModifiers()) && (fn.getDeclaringClass() != typeCheckingContext.getEnclosingClassNode() || typeCheckingContext.getEnclosingClosure() != null) && fn.getDeclaringClass().getModule() == typeCheckingContext.getEnclosingClassNode().getModule()) {    StaticTypesMarker marker=lhsOfAssignment ? StaticTypesMarker.PV_FIELDS_MUTATION : StaticTypesMarker.PV_FIELDS_ACCESS;    addPrivateFieldOrMethodAccess(source,fn.getDeclaringClass(),marker,fn);  }}  }
class C{  public String property(PropertyType p){  return prop + p.suffix();}  }
class C{  public Matrix3d rotateX(double ang){  return rotateX(ang,this);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @SuppressWarnings("unchecked") public ArrayFastmapDistanceMatrix(List userObjects,DistanceCalculator distanceFunction){  init(distanceFunction,userObjects);}  }
class C{  @Override public HijrahDate date(int prolepticYear,int month,int dayOfMonth){  return HijrahDate.of(this,prolepticYear,month,dayOfMonth);}  }
class C{  public boolean matchName(String regexp) throws IllegalArgumentException {  if (StringUtil.isEmpty(regexp)) {    throw new IllegalArgumentException("Can't perform regular expression since the given input is empty. Check your Velocity template: regexp='" + regexp + "'");  }  return name.matches(regexp);}  }
class C{  private void fill(double x){  BinInfo bin=findBin(x);  if (bin.isUnderflow) {    m_underflow++;  }  if (bin.isOverflow) {    m_overflow++;  }  if (bin.isInRange) {    m_hist[bin.index]++;  }  m_entries++;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static boolean parseSimpleCallArguments(PsiBuilder b,int l){  PsiBuilder.Marker m=b.mark();  if (PerlParserImpl.expr(b,l,-1)) {    m.done(CALL_ARGUMENTS);    return true;  }  m.drop();  return false;}  }
class C{  public static PartialLinearRange createWithStart(final int startOffset){  return new PartialLinearRange(startOffset);}  }
class C{  private void migrateBlockSnapshots(){  log.info("Migrating BlockConsistencyGroup references on BlockSnapshot objects.");  DbClient dbClient=getDbClient();  List<URI> blockSnapshotURIs=dbClient.queryByType(BlockSnapshot.class,false);  Iterator<BlockSnapshot> blockSnapshots=dbClient.queryIterativeObjects(BlockSnapshot.class,blockSnapshotURIs,true);  List<BlockObject> blockObjects=new ArrayList<BlockObject>();  while (blockSnapshots.hasNext()) {    blockObjects.add(blockSnapshots.next());  }  migrateBlockObjects(blockObjects);}  }
class C{  public static void assertWarnings(int expectedSize,List<?> warnings){  assertEquals(warnings.toString(),expectedSize,warnings.size());}  }
class C{  public LIMIT LIMIT(String limit){  return new LIMIT(this,limit);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforedocfragment.class,args);}  }
class C{  public void validateRole(Role requiredRole) throws InsufficientRoleException {  if (token.getRole() != null) {    checkRoleField(requiredRole);  } else {    checkGroupsField(roleMapper.getRoleGroup(requiredRole));  }}  }
class C{  public static ResourceEnumerationTaskState performResourceEnumeration(VerificationHost host,URI peerURI,ResourceEnumerationTaskState enumTask) throws Throwable {  URI uri=createServiceURI(host,peerURI,ResourceEnumerationTaskService.FACTORY_LINK);  return TestUtils.doPost(host,enumTask,ResourceEnumerationTaskState.class,uri);}  }
class C{  @Override public void updateInt(int columnIndex,int x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateInt(" + columnIndex + ", "+ x+ ");");    }    update(columnIndex,ValueInt.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void clearLocalSlots(int start,int len){  start+=_currentFrameBottom;  System.arraycopy(m_nulls,0,_stackFrames,start,len);}  }
class C{  public static double distancePointLine(double pointX,double pointY,double a,double b,double c){  double denom=Math.sqrt(a * a + b * b);  return (a * pointX + b * pointY + c) / denom;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.141 -0500",hash_original_method="B0692BE3743D11D4DF4B4F46D87A99FC",hash_generated_method="624DC3F714BEB21647873A3742666600") public static short parseShort(String string,int radix) throws NumberFormatException {  int intValue=Integer.parseInt(string,radix);  short result=(short)intValue;  if (result == intValue) {    return result;  }  throw new NumberFormatException("Value out of range for short: \"" + string + "\"");}  }
class C{  public final static byte[] encodeString(String s,boolean useUnicode) throws UnsupportedEncodingException {  if (useUnicode) {    return getUTFStringAsByteArray(s);  }  return getOEMStringAsByteArray(s);}  }
class C{  public boolean contains(Rectangle2D r){  return false;}  }
class C{  public void subtract(final float operand){  this.value-=operand;}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  private void loginWithToken(final String token,final ResultListener listener){  final Map<String,Object> authData=new HashMap<String,Object>();  authData.put("resume",token);  call("login",new Object[]{authData},listener);}  }
class C{  protected String pplxToPPL(String cityName){  if (cityName != null) {    Matcher matcher=pattern.matcher(cityName);    if (matcher.find()) {      return matcher.group(1);    } else {      return cityName;    }  } else {    return cityName;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static int clamp(int x,int min,int max){  if (x > max) {    return max;  }  if (x < min) {    return min;  }  return x;}  }
class C{  public T caseCharacterEscapeSequence(CharacterEscapeSequence object){  return null;}  }
class C{  @Override protected void onRemoveNoExternalMessages(String target,String sourceNick,String sourceLogin,String sourceHostname){  Message message=new Message(service.getString(R.string.message_enable_external,sourceNick));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  public boolean configure(final Object nd,final JScrollPane tv,final JTree tree,final TreePath path,final int row){  bg=tree.getBackground();  final boolean sel=tree.isSelectionEmpty() ? false : tree.getSelectionModel().isPathSelected(path);  final boolean exp=tree.isExpanded(path);  final boolean leaf=!exp && tree.getModel().isLeaf(nd);  final boolean lead=path.equals(tree.getSelectionModel().getLeadSelectionPath());  final Component renderer=tree.getCellRenderer().getTreeCellRendererComponent(tree,nd,sel,exp,leaf,row,lead);  if (renderer != null) {    setComponent(renderer);  }  return true;}  }
class C{  public boolean isEstablished(){  return established;}  }
class C{  public ServerBuilder maxConnections(int maxConnections){  this.maxConnections=ServerConfig.validateMaxConnections(maxConnections);  return this;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableList<V> replaceValues(K key,Iterable<? extends V> values){  throw new UnsupportedOperationException();}  }
class C{  public static char[] copyOfRange(char[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      char[] copy=new char[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  private Database connectDB(String url,String user,String pass) throws SQLException {  Database connDB=DatabaseFactory.createDatabase(url,user,pass,checkDirect);  connDB.connect();  println(String.format("Connected to %s: %s",connDB.getType().toString(),url));  return connDB;}  }
class C{  public static Class<?> loadUserClass(String className){  if (allowedClassNames == null) {    String s=SysProperties.ALLOWED_CLASSES;    ArrayList<String> prefixes=New.arrayList();    boolean allowAll=false;    HashSet<String> classNames=New.hashSet();    for (    String p : StringUtils.arraySplit(s,',',true)) {      if (p.equals("*")) {        allowAll=true;      } else       if (p.endsWith("*")) {        prefixes.add(p.substring(0,p.length() - 1));      } else {        classNames.add(p);      }    }    allowedClassNamePrefixes=new String[prefixes.size()];    prefixes.toArray(allowedClassNamePrefixes);    allowAllClasses=allowAll;    allowedClassNames=classNames;  }  if (!allowAllClasses && !allowedClassNames.contains(className)) {    boolean allowed=false;    for (    String s : allowedClassNamePrefixes) {      if (className.startsWith(s)) {        allowed=true;      }    }    if (!allowed) {      throw DbException.get(ErrorCode.ACCESS_DENIED_TO_CLASS_1,className);    }  }  for (  ClassFactory classFactory : getUserClassFactories()) {    if (classFactory.match(className)) {      try {        Class<?> userClass=classFactory.loadClass(className);        if (!(userClass == null)) {          return userClass;        }      } catch (      Exception e) {        throw DbException.get(ErrorCode.CLASS_NOT_FOUND_1,e,className);      }    }  }  try {    return Class.forName(className);  } catch (  ClassNotFoundException e) {    try {      return Class.forName(className,true,Thread.currentThread().getContextClassLoader());    } catch (    Exception e2) {      throw DbException.get(ErrorCode.CLASS_NOT_FOUND_1,e,className);    }  }catch (  NoClassDefFoundError e) {    throw DbException.get(ErrorCode.CLASS_NOT_FOUND_1,e,className);  }catch (  Error e) {    throw DbException.get(ErrorCode.GENERAL_ERROR_1,e,className);  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>Mono<T> instance(){  return (Mono<T>)INSTANCE;}  }
class C{  public List<Node> select(String query){  Collection<List<CssSelector>> selectorsCollection=CSSelly.parse(query);  return select(selectorsCollection);}  }
class C{  public static String humanReadableByteCount(long bytes,boolean si){  int unit=si ? 1000 : 1024;  if (bytes < unit)   return bytes + " B";  int exp=(int)(Math.log(bytes) / Math.log(unit));  String pre=(si ? "kMGTPE" : "KMGTPE").charAt(exp - 1) + (si ? "" : "i");  return String.format("%.1f %sB",bytes / Math.pow(unit,exp),pre);}  }
class C{  public boolean hasPageName(){  return hasExtension(PageName.class);}  }
class C{  public boolean isSetPort(){  return EncodingUtils.testBit(__isset_bitfield,__PORT_ISSET_ID);}  }
class C{  void enableInnerQuery(){  this.isInnerQuery=true;}  }
class C{  public PushPullBlockingQueue(final int capacity,Collection<? extends E> c){  this(capacity);  for (  final E e : c) {    offer(e);  }}  }
class C{  public void actionPerformed(ActionEvent ae){  if (++timerIteration > iterations) {    timer.stop();    timerIteration=0;    endTime=System.nanoTime();    long totalTime=(endTime - startTime) / 1000000;    float calculatedDelayTime=totalTime / (float)iterations;    System.out.printf("  %2d          %5d         %5d        %5.2f\n",sleepTime,iterations,totalTime,calculatedDelayTime);  }}  }
class C{  public void play(int position) throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  LOGD(TAG,"attempting to play media at position " + position + " seconds");  if (mRemoteMediaPlayer == null) {    LOGE(TAG,"Trying to play a video with no active media session");    throw new NoConnectionException();  }  seekAndPlay(position);}  }
class C{  public void print(char ch){  print(String.valueOf(ch));}  }
class C{  public RawSubtitleHandler(){  super(null);}  }
class C{  public static void d(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  public Matrix3f rotationXYZ(float angleX,float angleY,float angleZ){  float cosX=(float)Math.cos(angleX);  float sinX=(float)Math.sin(angleX);  float cosY=(float)Math.cos(angleY);  float sinY=(float)Math.sin(angleY);  float cosZ=(float)Math.cos(angleZ);  float sinZ=(float)Math.sin(angleZ);  float m_sinX=-sinX;  float m_sinY=-sinY;  float m_sinZ=-sinZ;  float nm11=cosX;  float nm12=sinX;  float nm21=m_sinX;  float nm22=cosX;  float nm00=cosY;  float nm01=nm21 * m_sinY;  float nm02=nm22 * m_sinY;  m20=sinY;  m21=nm21 * cosY;  m22=nm22 * cosY;  m00=nm00 * cosZ;  m01=nm01 * cosZ + nm11 * sinZ;  m02=nm02 * cosZ + nm12 * sinZ;  m10=nm00 * m_sinZ;  m11=nm01 * m_sinZ + nm11 * cosZ;  m12=nm02 * m_sinZ + nm12 * cosZ;  return this;}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public void storeLocal(final int local){  storeInsn(getLocalType(local),local);}  }
class C{  @SuppressLint("NewApi") private void hideDayFieldIfNotInFormat(FormEntryPrompt prompt){  String appearance=prompt.getQuestion().getAppearanceAttr();  if (appearance == null) {    if (Build.VERSION.SDK_INT >= 11) {      showCalendar=true;      this.mDatePicker.setCalendarViewShown(true);      if (Build.VERSION.SDK_INT >= 12) {        CalendarView cv=this.mDatePicker.getCalendarView();        cv.setShowWeekNumber(false);      }      this.mDatePicker.setSpinnersShown(true);      hideDay=true;      hideMonth=false;    } else {      return;    }  } else   if ("month-year".equals(appearance)) {    hideDay=true;    if (Build.VERSION.SDK_INT >= 11) {      this.mDatePicker.setCalendarViewShown(false);      this.mDatePicker.setSpinnersShown(true);    }  } else   if ("year".equals(appearance)) {    hideMonth=true;    if (Build.VERSION.SDK_INT >= 11) {      this.mDatePicker.setCalendarViewShown(false);      this.mDatePicker.setSpinnersShown(true);    }  } else   if ("no-calendar".equals(appearance)) {    if (Build.VERSION.SDK_INT >= 11) {      this.mDatePicker.setCalendarViewShown(false);      this.mDatePicker.setSpinnersShown(true);    }  } else {    if (Build.VERSION.SDK_INT >= 11) {      showCalendar=true;      this.mDatePicker.setCalendarViewShown(true);      if (Build.VERSION.SDK_INT >= 12) {        CalendarView cv=this.mDatePicker.getCalendarView();        cv.setShowWeekNumber(false);      }      this.mDatePicker.setSpinnersShown(true);      hideDay=true;      hideMonth=false;    }  }  if (hideMonth || hideDay) {    if (Build.VERSION.SDK_INT > 10) {      mDatePicker.findViewById(Resources.getSystem().getIdentifier("day","id","android")).setVisibility(View.GONE);      if (hideMonth) {        mDatePicker.findViewById(Resources.getSystem().getIdentifier("month","id","android")).setVisibility(View.GONE);      }    } else {      for (      Field datePickerDialogField : this.mDatePicker.getClass().getDeclaredFields()) {        if ("mDayPicker".equals(datePickerDialogField.getName()) || "mDaySpinner".equals(datePickerDialogField.getName())) {          datePickerDialogField.setAccessible(true);          Object dayPicker=new Object();          try {            dayPicker=datePickerDialogField.get(this.mDatePicker);          } catch (          Exception e) {            e.printStackTrace();          }          ((View)dayPicker).setVisibility(View.GONE);        }        if (hideMonth) {          if ("mMonthPicker".equals(datePickerDialogField.getName()) || "mMonthSpinner".equals(datePickerDialogField.getName())) {            datePickerDialogField.setAccessible(true);            Object monthPicker=new Object();            try {              monthPicker=datePickerDialogField.get(this.mDatePicker);            } catch (            Exception e) {              e.printStackTrace();            }            ((View)monthPicker).setVisibility(View.GONE);          }        }      }    }  }}  }
class C{  public synchronized void animatePan(double dx,double dy,long duration){  double panx=dx / m_transform.getScaleX();  double pany=dy / m_transform.getScaleY();  animatePanAbs(panx,pany,duration);}  }
class C{  public String toString(){  if (myToString == null) {    myToString=this.getClass().getName() + "(name=" + getTypeName()+ ")";  }  return myToString;}  }
class C{  public static Date nextDate(){  return nextDate(new Date(),true);}  }
class C{  public int size(){  return samples.size();}  }
class C{  public TestIntervalCategoryDataset(){  this.data=new KeyedObjects2D();}  }
class C{  public ArrayExpression add(Expression expression){  this.getChildren().add(expression);  return this;}  }
class C{  public void e(Exception ex){  if (debug) {    if (logLevel <= Log.ERROR) {      Log.e(tag,"error",ex);    }  }}  }
class C{  @Override public boolean needsAnotherIteration() throws AdeException {  return !m_trained;}  }
class C{  public static GenericValue create(ModelEntity modelEntity){  GenericValue newValue=new GenericValue();  newValue.init(modelEntity);  return newValue;}  }
class C{  public void testConnectorSecuritySettingsSSL_true(){  resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("sample.security.properties",true,TUNGSTEN_APPLICATION_NAME.CONNECTOR);  } catch (  ConfigurationException e) {    assertFalse("Could not load authentication and securiy information",true);  }  assertTrue(authInfo.isConnectorUseSSL());}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.TRACE_RECORD___RECORD_ENTITY_1:    return ((InternalEList<?>)getRecordEntity_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CompositeTitle)) {    return false;  }  CompositeTitle that=(CompositeTitle)obj;  if (!this.container.equals(that.container)) {    return false;  }  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {    return false;  }  return super.equals(obj);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:52.955 -0500",hash_original_method="C9D37AD9E9C3945E93E31952A098B3F5",hash_generated_method="15EA93085150F19B9B0DD272CF8FDBB5") @DSSpec(DSCat.IO_ACTION_METHOD) @DSSink({DSSinkKind.SMS_MMS}) public void sendMultipartTextMessage(String destinationAddress,String scAddress,ArrayList<String> parts,ArrayList<PendingIntent> sentIntents,ArrayList<PendingIntent> deliveryIntents){  if (TextUtils.isEmpty(destinationAddress)) {    throw new IllegalArgumentException("Invalid destinationAddress");  }  if (parts == null || parts.size() < 1) {    throw new IllegalArgumentException("Invalid message body");  }  if (parts.size() > 1) {    try {      ISms iccISms=ISms.Stub.asInterface(ServiceManager.getService("isms"));      if (iccISms != null) {        iccISms.sendMultipartText(destinationAddress,scAddress,parts,sentIntents,deliveryIntents);      }    } catch (    RemoteException ex) {    }  } else {    PendingIntent sentIntent=null;    PendingIntent deliveryIntent=null;    if (sentIntents != null && sentIntents.size() > 0) {      sentIntent=sentIntents.get(0);    }    if (deliveryIntents != null && deliveryIntents.size() > 0) {      deliveryIntent=deliveryIntents.get(0);    }    sendTextMessage(destinationAddress,scAddress,parts.get(0),sentIntent,deliveryIntent);  }}  }
class C{  public static File createTempDirectory(File directory) throws IOException {  return FileUtils.createTempDir(PREFIX,SUFFIX,directory);}  }
class C{  public boolean isArray(){  return false;}  }
class C{  boolean isChunkLive(int chunkId){  String s=meta.get(Chunk.getMetaKey(chunkId));  return s != null;}  }
class C{  protected void activateHumanPlayer(){  if (!(pos.whiteMove ? whitePlayer : blackPlayer).isHumanPlayer()) {    Player tmp=whitePlayer;    whitePlayer=blackPlayer;    blackPlayer=tmp;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.639 -0500",hash_original_method="A36333A6F745F23182438BFF478F971C",hash_generated_method="3E83C3693072E036EE6283AD07E42258") public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.482 -0500",hash_original_method="FC7C0EB4C2CF25B4E39BD000BE1A0318",hash_generated_method="6220C80D2C1C2701913488B36F33A72A") public void removeTransaction(SIPTransaction sipTransaction){  if (stackLogger.isLoggingEnabled()) {    stackLogger.logDebug("Removing Transaction = " + sipTransaction.getTransactionId() + " transaction = "+ sipTransaction);  }  if (sipTransaction instanceof SIPServerTransaction) {    if (stackLogger.isLoggingEnabled())     stackLogger.logStackTrace();    String key=sipTransaction.getTransactionId();    Object removed=serverTransactionTable.remove(key);    String method=sipTransaction.getMethod();    this.removePendingTransaction((SIPServerTransaction)sipTransaction);    this.removeTransactionPendingAck((SIPServerTransaction)sipTransaction);    if (method.equalsIgnoreCase(Request.INVITE)) {      this.removeFromMergeTable((SIPServerTransaction)sipTransaction);    }    SipProviderImpl sipProvider=(SipProviderImpl)sipTransaction.getSipProvider();    if (removed != null && sipTransaction.testAndSetTransactionTerminatedEvent()) {      TransactionTerminatedEvent event=new TransactionTerminatedEvent(sipProvider,(ServerTransaction)sipTransaction);      sipProvider.handleEvent(event,sipTransaction);    }  } else {    String key=sipTransaction.getTransactionId();    Object removed=clientTransactionTable.remove(key);    if (stackLogger.isLoggingEnabled()) {      stackLogger.logDebug("REMOVED client tx " + removed + " KEY = "+ key);      if (removed != null) {        SIPClientTransaction clientTx=(SIPClientTransaction)removed;        if (clientTx.getMethod().equals(Request.INVITE) && this.maxForkTime != 0) {          RemoveForkedTransactionTimerTask ttask=new RemoveForkedTransactionTimerTask(clientTx);          this.timer.schedule(ttask,this.maxForkTime * 1000);        }      }    }    if (removed != null && sipTransaction.testAndSetTransactionTerminatedEvent()) {      SipProviderImpl sipProvider=(SipProviderImpl)sipTransaction.getSipProvider();      TransactionTerminatedEvent event=new TransactionTerminatedEvent(sipProvider,(ClientTransaction)sipTransaction);      sipProvider.handleEvent(event,sipTransaction);    }  }}  }
class C{  public boolean touches(Geometry g){  return baseGeom.touches(g);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:02.216 -0500",hash_original_method="C31E4B8F2A567252600FDAE2EEE40805",hash_generated_method="4CD365A78323C4BB36D47418BB273373") public CertificatePolicies(){}  }
class C{  public final synchronized long size(){  return this.count;}  }
class C{  public Vector3d mulPosition(Matrix4fc mat){  return mulPosition(mat,this);}  }
class C{  public void installDefaults(JSeparator c){  updateStyle(c);}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  public void removeEditor(){  if (editor != null) {    unconfigureEditor();    comboBox.remove(editor);    editor=null;  }}  }
class C{  public AttrValueDTO createEntityAttributeValue(final AttrValueDTO attrValueDTO){  final Attribute atr=attributeService.findById(attrValueDTO.getAttributeDTO().getAttributeId());  final boolean multivalue=atr.isAllowduplicate();  final Category category=service.findById(((AttrValueCategoryDTO)attrValueDTO).getCategoryId());  if (!multivalue) {    for (    final AttrValueCategory avp : category.getAttributes()) {      if (avp.getAttribute().getCode().equals(atr.getCode())) {        attrValueDTO.setAttrvalueId(avp.getAttrvalueId());        return updateEntityAttributeValue(attrValueDTO);      }    }  }  AttrValueCategory valueEntityCategory=getPersistenceEntityFactory().getByIface(AttrValueCategory.class);  attrValueAssembler.assembleEntity(attrValueDTO,valueEntityCategory,getAdaptersRepository(),dtoFactory);  valueEntityCategory.setAttribute(atr);  valueEntityCategory.setCategory(category);  valueEntityCategory=attrValueEntityCategoryDao.create((AttrValueEntityCategory)valueEntityCategory);  attrValueDTO.setAttrvalueId(valueEntityCategory.getAttrvalueId());  return attrValueDTO;}  }
class C{  public VoltageScorer(Hypergraph<V,E> g,V source,V sink){  this(g,Collections.singletonMap(source,1.0),Collections.singletonList(sink));  initialize();}  }
class C{  public boolean canUndo(){  return ((ArffTableModel)getModel()).canUndo();}  }
class C{  public PaintMap(){  this.store=new HashMap();}  }
class C{  protected void onBindDialogView(View view){  View dialogMessageView=view.findViewById(com.android.internal.R.id.message);  if (dialogMessageView != null) {    final CharSequence message=getDialogMessage();    int newVisibility=View.GONE;    if (!TextUtils.isEmpty(message)) {      if (dialogMessageView instanceof TextView) {        ((TextView)dialogMessageView).setText(message);      }      newVisibility=View.VISIBLE;    }    if (dialogMessageView.getVisibility() != newVisibility) {      dialogMessageView.setVisibility(newVisibility);    }  }}  }
class C{  public static void filterLine(InputStream self,Writer writer,String charset,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure predicate) throws IOException {  filterLine(newReader(self,charset),writer,predicate);}  }
class C{  public Entry(SnapshotId snapshotId,State state,List<String> indices,ImmutableMap<ShardId,ShardRestoreStatus> shards){  this.snapshotId=snapshotId;  this.state=state;  this.indices=indices;  if (shards == null) {    this.shards=ImmutableMap.of();  } else {    this.shards=shards;  }}  }
class C{  private void executeCommand(String m_command,int j_command,MWorkflow wf,int activeNode,MWFNode[] nodes,ArrayList nodes_ID,HttpSession sess){  if (j_command != 0) {    sess.setAttribute(ACTIVE_NODE,new Integer(j_command));    return;  }  debug(m_command,"m_command in executeCommand");  boolean isFirst=wf.isFirst(activeNode,Env.getContextAsInt(ctx,"#AD_Client_ID"));  boolean isLast=wf.isLast(activeNode,Env.getContextAsInt(ctx,"#AD_Client_ID"));  boolean notReady=false;  int updatedActiveNode=activeNode;  if (activeNode < 0)   notReady=true;  if (notReady) {    updatedActiveNode=((Integer)nodes_ID.get(0)).intValue();  } else {    if (m_command.equals(NEXT)) {      if (notReady)       updatedActiveNode=((Integer)nodes_ID.get(0)).intValue(); else       updatedActiveNode=wf.getNext(activeNode,Env.getContextAsInt(ctx,"#AD_Client_ID"));    }    if (m_command.equals(BACK)) {      if (notReady)       updatedActiveNode=((Integer)nodes_ID.get(0)).intValue(); else       updatedActiveNode=wf.getPrevious(activeNode,Env.getContextAsInt(ctx,"#AD_Client_ID"));    }    if (m_command.equals(FIRST))     updatedActiveNode=((Integer)nodes_ID.get(0)).intValue();    if (m_command.equals(LAST))     updatedActiveNode=wf.getLast(0,Env.getContextAsInt(ctx,"#AD_Client_ID"));  }  sess.setAttribute(ACTIVE_NODE,new Integer(updatedActiveNode));}  }
class C{  public static void sendGps(int number,int offset,int pause){  if (number < 1) {    return;  }  int pauseInterval=TINY_WAIT_TIME;  if (pause != -1) {    pauseInterval=pause;  }  if (!isEmulator) {    return;  }  PrintStream out=null;  Socket socket=null;  try {    socket=new Socket(ANDROID_LOCAL_IP,emulatorPort);    out=new PrintStream(socket.getOutputStream());    double longitude=START_LONGITUDE + offset * DELTA_LONGITUDE;    double latitude=START_LATITUDE + offset * DELTA_LADITUDE;    for (int i=0; i < number; i++) {      out.println("geo fix " + longitude + " "+ latitude);      longitude+=DELTA_LONGITUDE;      latitude+=DELTA_LADITUDE;      Thread.sleep(pauseInterval);    }    Thread.sleep(SHORT_WAIT_TIME);  } catch (  UnknownHostException e) {    System.exit(-1);  }catch (  IOException e) {    System.exit(-1);  }catch (  InterruptedException e) {    System.exit(-1);  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  public SAXNotSupportedException(){}  }
class C{  public String toStringRanking(){  return new ResultMatrixPlainText(this).toStringRanking();}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("AfterDeathTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  erm=vm().eventRequestManager();  ThreadStartRequest request=erm.createThreadStartRequest();  request.setSuspendPolicy(EventRequest.SUSPEND_ALL);  request.enable();  ThreadDeathRequest request1=erm.createThreadDeathRequest();  request1.setSuspendPolicy(EventRequest.SUSPEND_NONE);  request1.enable();  listenUntilVMDisconnect();  if (!testFailed) {    println("AfterThreadDeathTest: passed");  } else {    throw new Exception("AfterThreadDeathTest: failed");  }}  }
class C{  public KMLImagePyramid(String namespaceURI){  super(namespaceURI);}  }
class C{  public boolean useSuffixPatternMatch(){  return this.useSuffixPatternMatch;}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatablePathDataValue toValue=(AnimatablePathDataValue)to;  AnimatablePathDataValue accValue=(AnimatablePathDataValue)accumulation;  boolean hasTo=to != null;  boolean hasAcc=accumulation != null;  boolean canInterpolate=hasTo && toValue.parameters.length == parameters.length && Arrays.equals(toValue.commands,commands);  boolean canAccumulate=hasAcc && accValue.parameters.length == parameters.length && Arrays.equals(accValue.commands,commands);  AnimatablePathDataValue base;  if (!canInterpolate && hasTo && interpolation >= 0.5) {    base=toValue;  } else {    base=this;  }  int cmdCount=base.commands.length;  int paramCount=base.parameters.length;  AnimatablePathDataValue res;  if (result == null) {    res=new AnimatablePathDataValue(target);    res.commands=new short[cmdCount];    res.parameters=new float[paramCount];    System.arraycopy(base.commands,0,res.commands,0,cmdCount);  } else {    res=(AnimatablePathDataValue)result;    if (res.commands == null || res.commands.length != cmdCount) {      res.commands=new short[cmdCount];      System.arraycopy(base.commands,0,res.commands,0,cmdCount);      res.hasChanged=true;    } else {      if (!Arrays.equals(base.commands,res.commands)) {        System.arraycopy(base.commands,0,res.commands,0,cmdCount);        res.hasChanged=true;      }    }  }  for (int i=0; i < paramCount; i++) {    float newValue=base.parameters[i];    if (canInterpolate) {      newValue+=interpolation * (toValue.parameters[i] - newValue);    }    if (canAccumulate) {      newValue+=multiplier * accValue.parameters[i];    }    if (res.parameters[i] != newValue) {      res.parameters[i]=newValue;      res.hasChanged=true;    }  }  return res;}  }
class C{  @ColorInt private int defaultDisabledColor(int normalColor){  return Coloring.mix(maskColorDisabled,normalColor);}  }
class C{  public void testGetRandomCoordInZoneCenterOnly(){  double minX=Double.POSITIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  final int[] areaCounters=new int[11];  final World world=new World();  ZoneLayer layer=(ZoneLayer)world.createLayer(Id.create("zones",Layer.class));  Zone zone=layer.createZone(Id.create("1",Zone.class),"4.5","9",null,null,null,null);  Zone zone2=layer.createZone(Id.create("2",Zone.class),"30","15","9",null,null,null);  Coord center=zone.getCoord();  final double distance=CoordUtils.calcEuclideanDistance(center,zone2.getCoord());  for (int i=0; i < 700; i++) {    Coord c=WorldUtils.getRandomCoordInZone(zone,layer);    if (c.getX() < minX) {      minX=c.getX();    }    if (c.getY() < minY) {      minY=c.getY();    }    if (c.getX() > maxX) {      maxX=c.getX();    }    if (c.getY() > maxY) {      maxY=c.getY();    }    int areaIndex=(int)(CoordUtils.calcEuclideanDistance(c,center) / distance * 10);    areaCounters[areaIndex]++;  }  assertTrue("random coordinates are not spread enough. minX = " + minX,minX < (4.5 - distance / 2.0));  assertTrue("random coordinates are not spread enough. maxX = " + maxX,maxX > (4.5 + distance / 2.0));  assertTrue("random coordinates are not spread enough. minY = " + minY,minY < (9.0 - distance / 2.0));  assertTrue("random coordinates are not spread enough. maxY = " + maxY,maxY > (9.0 + distance / 2.0));  for (int i=0; i < 7; i++) {    int count=areaCounters[i];    assertTrue("random coordinates seem not to be equally distributed, as area " + i + " has only "+ count+ " points in it.",count > 88);  }  for (int i=8; i < areaCounters.length; i++) {    assertTrue("there should not be any point in area " + i,areaCounters[i] == 0);  }}  }
class C{  public static ZTauElement partModReduction(BigInteger k,int m,byte a,BigInteger[] s,byte mu,byte c){  BigInteger d0;  if (mu == 1) {    d0=s[0].add(s[1]);  } else {    d0=s[0].subtract(s[1]);  }  BigInteger[] v=getLucas(mu,m,true);  BigInteger vm=v[1];  SimpleBigDecimal lambda0=approximateDivisionByN(k,s[0],vm,a,m,c);  SimpleBigDecimal lambda1=approximateDivisionByN(k,s[1],vm,a,m,c);  ZTauElement q=round(lambda0,lambda1,mu);  BigInteger r0=k.subtract(d0.multiply(q.u)).subtract(BigInteger.valueOf(2).multiply(s[1]).multiply(q.v));  BigInteger r1=s[1].multiply(q.u).subtract(s[0].multiply(q.v));  return new ZTauElement(r0,r1);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,-1 * z1);        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void updateDataTypeState(){  boolean isSyncEnabled=mSyncSwitchPreference.isChecked();  boolean syncEverything=mSyncEverything.isChecked();  boolean passwordSyncConfigurable=mProfileSyncService.isSyncInitialized() && mProfileSyncService.isCryptographerReady();  for (  CheckBoxPreference pref : mAllTypes) {    boolean canSyncType=pref != mSyncPasswords || passwordSyncConfigurable;    if (!isSyncEnabled) {      pref.setChecked(true);    } else     if (syncEverything) {      pref.setChecked(canSyncType);    }    pref.setEnabled(isSyncEnabled && !syncEverything && canSyncType);  }  if (isSyncEnabled && !syncEverything) {    Set<Integer> syncTypes=mProfileSyncService.getPreferredDataTypes();    mSyncAutofill.setChecked(syncTypes.contains(ModelType.AUTOFILL));    mSyncBookmarks.setChecked(syncTypes.contains(ModelType.BOOKMARKS));    mSyncOmnibox.setChecked(syncTypes.contains(ModelType.TYPED_URLS));    mSyncPasswords.setChecked(passwordSyncConfigurable && syncTypes.contains(ModelType.PASSWORDS));    mSyncRecentTabs.setChecked(syncTypes.contains(ModelType.PROXY_TABS));    mSyncSettings.setChecked(syncTypes.contains(ModelType.PRIORITY_PREFERENCES));  }}  }
class C{  public static boolean isRowIndexMax(AggregateUnaryOperator uaggOp){  return (uaggOp.aggOp.increOp.fn instanceof Builtin && (((Builtin)(uaggOp.aggOp.increOp.fn)).bFunc == Builtin.BuiltinCode.MAXINDEX));}  }
class C{  public IfStatement toIf(final Expression condition){  final IfStatement $=ast.newIfStatement();  $.setExpression(claim(condition));  if (then != null)   make.plant(then).intoThen($);  if (elze != null)   $.setElseStatement(elze);  return $;}  }
class C{  public void nodesChanged(TreeNode node,int[] childIndices){  if (node != null) {    if (childIndices != null) {      int cCount=childIndices.length;      if (cCount > 0) {        Object[] cChildren=new Object[cCount];        for (int counter=0; counter < cCount; counter++)         cChildren[counter]=node.getChildAt(childIndices[counter]);        fireTreeNodesChanged(this,getPathToRoot(node),childIndices,cChildren);      }    } else     if (node == getRoot()) {      fireTreeNodesChanged(this,getPathToRoot(node),null,null);    }  }}  }
class C{  protected Path createPath(List<Position> positions){  Path path=new Path(positions);  path.setFollowTerrain(true);  path.setPathType(AVKey.GREAT_CIRCLE);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setDelegateOwner(this.getActiveDelegateOwner());  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  private void animatePropertyBy(int constantName,float byValue){  float fromValue=getValue(constantName);  animatePropertyBy(constantName,fromValue,byValue);}  }
class C{  public void deactivate(){  this.isActive=false;}  }
class C{  @Override public void wake(){synchronized (this) {    if (_state == State.FAIL) {      _state=State.STARTING;    }    _failTime=0;  }}  }
class C{  public void updateNotificationInformation(@Nullable String title,@Nullable String album,@Nullable String artist,@Nullable Bitmap notificationImage,@Nullable Bitmap secondaryNotificationImage,@Nullable NotificationMediaState notificationMediaState){  notificationInfo.setTitle(title);  notificationInfo.setAlbum(album);  notificationInfo.setArtist(artist);  notificationInfo.setLargeImage(notificationImage);  notificationInfo.setSecondaryImage(secondaryNotificationImage);  notificationInfo.setMediaState(notificationMediaState);  if (notificationInfo.getShowNotifications() && notificationManager != null && mediaServiceClass != null) {    Notification notification=getNotification(notificationInfo.getPendingIntent(),mediaServiceClass);    notificationManager.notify(notificationInfo.getNotificationId(),notification);  }}  }
class C{  public static float pulse(float a,float b,float x){  return (x < a || x >= b) ? 0.0f : 1.0f;}  }
class C{  @Override public final BufferedImage dataToRGB(byte[] data,final int width,final int height){  BufferedImage image;  data=dataToRGBByteArray(data,width,height);  final DataBuffer db=new DataBufferByte(data,data.length);  final int[] bands={0,1,2};  image=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  final Raster raster=Raster.createInterleavedRaster(db,width,height,width * 3,3,bands,null);  image.setData(raster);  return image;}  }
class C{  public ReversePseudoTopologicalOrderer(){  super();  setReverseOrder(true);}  }
class C{  public DerInputStream toDerInputStream() throws IOException {  if (tag == tag_Sequence || tag == tag_Set)   return new DerInputStream(buffer);  throw new IOException("toDerInputStream rejects tag type " + tag);}  }
class C{  @Override public boolean addressTypeUnique(){  return true;}  }
class C{  public static boolean isSystemApplication(Context context){  if (context == null) {    return false;  }  return isSystemApplication(context,context.getPackageName());}  }
class C{  public static void main(String[] args){  new GuiMain();}  }
class C{  protected boolean isEditingTrigger(int keyCode){  if (!isEditable()) {    return false;  }  int gk=Display.getInstance().getGameAction(keyCode);  if (isQwertyInput()) {    return keyCode > 0 || (gk == Display.GAME_FIRE) || isClearKey(keyCode) || isEnterKey(keyCode) || (leftAndRightEditingTrigger && ((gk == Display.GAME_LEFT) || (gk == Display.GAME_RIGHT)));  }  return (keyCode >= '0' && keyCode <= '9') || isClearKey(keyCode) || (gk == Display.GAME_FIRE)|| (leftAndRightEditingTrigger && ((gk == Display.GAME_LEFT) || (gk == Display.GAME_RIGHT)));}  }
class C{  public static RefactoringStatus createInfoStatus(String msg,RefactoringStatusContext context){  return createStatus(INFO,msg,context,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  private String obtenerMensajeDeUnidadesNoDisponibles(List udocs,List idsUdocsNoDisponibles){  String uDocsMessage="";  if (!ListUtils.isEmpty(udocs) && !ListUtils.isEmpty(idsUdocsNoDisponibles)) {    for (int i=0; i < udocs.size(); i++) {      UDocEnUiDepositoVO uDocEnUiDeposito=(UDocEnUiDepositoVO)udocs.get(i);      for (int j=0; j < idsUdocsNoDisponibles.size(); j++) {        DetallePrestamoVO detallePrestamoVO=(DetallePrestamoVO)idsUdocsNoDisponibles.get(j);        if (uDocEnUiDeposito.getIdunidaddoc().equalsIgnoreCase(detallePrestamoVO.getIdudoc())) {          uDocsMessage+=StringUtils.addCharacterAtLeft(String.valueOf(i + 1),3,"0") + "; ";          break;        }      }    }  }  return uDocsMessage;}  }
class C{  @Override public String toString(){  return toString(keySet().size());}  }
class C{  public T remove(String name){  int idx=indexOf(name,0);  if (idx != -1)   return remove(idx);  return null;}  }
class C{  private static Pointer computePointer(LongBuffer buffer){  Pointer result=null;  if (buffer.isDirect()) {    int oldPosition=buffer.position();    buffer.position(0);    result=Pointer.to(buffer.slice()).withByteOffset(oldPosition * Sizeof.LONG);    buffer.position(oldPosition);  } else   if (buffer.hasArray()) {    LongBuffer t=LongBuffer.wrap(buffer.array());    int elementOffset=buffer.position() + buffer.arrayOffset();    result=Pointer.to(t).withByteOffset(elementOffset * Sizeof.LONG);  }  return result;}  }
class C{  public void scrollToVisible(int row,int col){  scrollToVisible(getJTable(),row,col);}  }
class C{  public DefaultSignedAttributeTableGenerator(AttributeTable attributeTable){  if (attributeTable != null) {    table=attributeTable.toHashtable();  } else {    table=new Hashtable();  }}  }
class C{  @Override public void decrypt(byte[] inbuffer,byte[] outbuffer){  int nLen=inbuffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=8) {    lTemp=BinConverter.byteArrayToLong(inbuffer,nI);    lTemp=decryptBlock(lTemp);    BinConverter.longToByteArray(lTemp,outbuffer,nI);  }  ;}  }
class C{  public final void removeAll(Object from){  removeAll(from,false);}  }
class C{  public T caseParenExpression(ParenExpression object){  return null;}  }
class C{  public static void zipInputStreamToDirectory(InputStream zipInputStream,File directory) throws IOException {  ZipInputStream zipStream=new ZipInputStream(zipInputStream);  try {    ZipEntry entry=null;    while ((entry=zipStream.getNextEntry()) != null) {      File newFile=new File(FilenameUtils.concat(directory.getAbsolutePath(),entry.getName()));      if (entry.isDirectory()) {        newFile.mkdirs();      } else {        newFile.createNewFile();        IOUtils.copy(zipStream,new FileOutputStream(newFile));      }      newFile.setLastModified(entry.getTime());    }  }  finally {    IOUtils.closeQuietly(zipStream);  }}  }
class C{  public boolean canBePushed(){  return false;}  }
class C{  DOMStringListImpl(Vector params){  fStrings=params;}  }
class C{  @Override protected void subAppend(LoggingEvent event){  super.subAppend(event);  if (res != null && qw != null) {    long size=((CountingQuietWriter)qw).getCount();    if (size >= maxFileSize && size >= nextRollover) {      rollOver();    }  }}  }
class C{  @Override public void zoomDomainAxes(double lowerPercent,double upperPercent,PlotRenderingInfo info,Point2D source){  for (  ValueAxis xAxis : this.domainAxes.values()) {    if (xAxis != null) {      xAxis.zoomRange(lowerPercent,upperPercent);    }  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static Border createRoundBorder(int arcWidth,int arcHeight,int color,boolean outline){  Border b=createRoundBorder(arcWidth,arcHeight,color);  b.outline=outline;  return b;}  }
class C{  public S2Point toPoint(){  double phi=lat().radians();  double theta=lng().radians();  double cosphi=Math.cos(phi);  return new S2Point(Math.cos(theta) * cosphi,Math.sin(theta) * cosphi,Math.sin(phi));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void updateCoordinates(char ch){  if (ch == '\n') {    _row++;    _col=1;  } else {    _col++;  }}  }
class C{  public static Stats of(int... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  @Override void onShutdown(){  BlockingQueue<Runnable> q=super.getQueue();  boolean keepDelayed=getExecuteExistingDelayedTasksAfterShutdownPolicy();  boolean keepPeriodic=getContinueExistingPeriodicTasksAfterShutdownPolicy();  if (!keepDelayed && !keepPeriodic) {    for (    Object e : q.toArray())     if (e instanceof RunnableScheduledFuture<?>)     ((RunnableScheduledFuture<?>)e).cancel(false);    q.clear();  } else {    for (    Object e : q.toArray()) {      if (e instanceof RunnableScheduledFuture) {        RunnableScheduledFuture<?> t=(RunnableScheduledFuture<?>)e;        if ((t.isPeriodic() ? !keepPeriodic : !keepDelayed) || t.isCancelled()) {          if (q.remove(t))           t.cancel(false);        }      }    }  }  tryTerminate();}  }
class C{  protected static String readString(DataInput dis,int length) throws IOException, ArrayIndexOutOfBoundsException {  String ret=null;  char[] chars=new char[length];  for (int i=0; i < length; i++) {    chars[i]=dis.readChar();  }  ret=new String(chars);  return ret;}  }
class C{  public boolean isInsertRecord(){  if (isReadOnly())   return false;  return m_vo.IsInsertRecord;}  }
class C{  public Status writeStatus(final Status status) throws IOException {  FileOutputStream fileOut=null;  ObjectOutputStream objectOut=null;  try {    fileOut=new FileOutputStream(new File(workingDirectory,statusFileName));    objectOut=new ObjectOutputStream(fileOut);    objectOut.writeObject(status);    objectOut.flush();    this.status=status;    return this.status;  }  finally {    IOUtils.close(objectOut);    IOUtils.close(fileOut);  }}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public void connect(){  log.debug("connect()");synchronized (mConnectLock) {    if (mConnectTask == null) {      mConnectTask=new ConnectTask();      mConnectTask.execute();    }  }}  }
class C{  protected void actualizarFechasExtremas(){  if (fechaInicial == null || fechaFinal == null) {    CustomDateRange range=service.lookupGestionCuadroClasificacionBI().getFechasExtremasClasificadorSeries(id);    if (range != null) {      fechaInicial=range.getInitialDate();      fechaFinal=range.getFinalDate();    }  }  GestionDescripcionBI descripcionBI=service.lookupGestionDescripcionBI();  if (fechaInicial != null)   descripcionBI.actualizaCampo(TipoFicha.FICHA_ELEMENTO_CF,new CampoFechaVO(id,ID_CAMPO_FECHA_INICIAL,1,fechaInicial,ValorCampoGenericoVOBase.TIPO_ELEMENTO_INDEFINIDO)); else   descripcionBI.vaciaCampo(TipoFicha.FICHA_ELEMENTO_CF,ValorCampoGenericoVO.TIPO_FECHA,id,ID_CAMPO_FECHA_INICIAL);  if (fechaFinal != null)   descripcionBI.actualizaCampo(TipoFicha.FICHA_ELEMENTO_CF,new CampoFechaVO(id,ID_CAMPO_FECHA_FINAL,1,fechaFinal,ValorCampoGenericoVOBase.TIPO_ELEMENTO_INDEFINIDO)); else   descripcionBI.vaciaCampo(TipoFicha.FICHA_ELEMENTO_CF,ValorCampoGenericoVO.TIPO_FECHA,id,ID_CAMPO_FECHA_FINAL);}  }
class C{  public boolean before(TimeOfDay timeOfDay){  if (timeOfDay.hour > hour)   return true;  if (timeOfDay.hour < hour)   return false;  if (timeOfDay.minute > minute)   return true;  if (timeOfDay.minute < minute)   return false;  if (timeOfDay.second > second)   return true;  if (timeOfDay.second < second)   return false;  return false;}  }
class C{  public static SuperReflect on(String name) throws SuperReflectException {  return on(forName(name));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:21:59.555 -0400",hash_original_method="DE1F7EDB373D887510AEE90FFA73BFA3",hash_generated_method="89539093FB979FCD4FDD10C667AA550F") public void stopTone(){}  }
class C{  private String readBoundary() throws IOException {  BufferedReader reader=new BufferedReader(new FileReader(mFileToUpload));  String boundary=reader.readLine();  reader.close();  if (boundary == null || boundary.trim().isEmpty()) {    Log.e(TAG,"Ignoring invalid crash dump: '" + mFileToUpload + "'");    return null;  }  boundary=boundary.trim();  if (!boundary.startsWith("--") || boundary.length() < 10) {    Log.e(TAG,"Ignoring invalidly bound crash dump: '" + mFileToUpload + "'");    return null;  }  boundary=boundary.substring(2);  return boundary;}  }
class C{  public static JFreeChart createWindPlot(String title,String xAxisLabel,String yAxisLabel,WindDataset dataset,boolean legend,boolean tooltips,boolean urls){  ValueAxis xAxis=new DateAxis(xAxisLabel);  ValueAxis yAxis=new NumberAxis(yAxisLabel);  yAxis.setRange(-12.0,12.0);  WindItemRenderer renderer=new WindItemRenderer();  if (tooltips) {    renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());  }  if (urls) {    renderer.setURLGenerator(new StandardXYURLGenerator());  }  XYPlot plot=new XYPlot(dataset,xAxis,yAxis,renderer);  JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);  currentTheme.apply(chart);  return chart;}  }
class C{  public String toCumulativeMarginDistributionString() throws Exception {  if (!m_ClassIsNominal) {    throw new Exception("Class must be nominal for margin distributions");  }  String result="";  double cumulativeCount=0;  double margin;  for (int i=0; i <= k_MarginResolution; i++) {    if (m_MarginCounts[i] != 0) {      cumulativeCount+=m_MarginCounts[i];      margin=i * 2.0 / k_MarginResolution - 1.0;      result=result + Utils.doubleToString(margin,7,3) + ' '+ Utils.doubleToString(cumulativeCount * 100 / m_WithClass,7,3)+ '\n';    } else     if (i == 0) {      result=Utils.doubleToString(-1.0,7,3) + ' ' + Utils.doubleToString(0,7,3)+ '\n';    }  }  return result;}  }
class C{  public int rank(){  double eps=Math.pow(2.0,-52.0);  double tol=Math.max(m,n) * s[0] * eps;  int r=0;  for (int i=0; i < s.length; i++) {    if (s[i] > tol) {      r++;    }  }  return r;}  }
class C{  public JSONObject(Map<?,?> map){  this.map=new HashMap<String,Object>();  if (map != null) {    for (    final Entry<?,?> e : map.entrySet()) {      final Object value=e.getValue();      if (value != null) {        this.map.put(String.valueOf(e.getKey()),wrap(value));      }    }  }}  }
class C{  public void java_lang_Class_getSigners(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable tempFld=helper.tempField("<java.lang.Class signers>");  helper.assign(returnVar,tempFld);}  }
class C{  public static void eachByte(InputStream is,@ClosureParams(value=SimpleType.class,options="byte") Closure closure) throws IOException {  try {    while (true) {      int b=is.read();      if (b == -1) {        break;      } else {        closure.call((byte)b);      }    }    InputStream temp=is;    is=null;    temp.close();  }  finally {    closeWithWarning(is);  }}  }
class C{  public static LayersBuilder from(Collection<Layer> layers){  return new LayersBuilder(layers);}  }
class C{  protected void applyStateChanges(String line){  String[] tokens=StringUtils.tokenizeToStringArray(line," @<>;:=|(),+{}");  List<TokenType> delimitingTokens=extractStringLiteralDelimitingTokens(tokens);  lineEndsWithSingleLineComment=false;  for (  TokenType delimitingToken : delimitingTokens) {    if (!insideQuoteStringLiteral && !insideAlternateQuoteStringLiteral && TokenType.MULTI_LINE_COMMENT.equals(delimitingToken)) {      insideMultiLineComment=!insideMultiLineComment;    }    if (!insideQuoteStringLiteral && !insideAlternateQuoteStringLiteral && !insideMultiLineComment&& TokenType.SINGLE_LINE_COMMENT.equals(delimitingToken)) {      lineEndsWithSingleLineComment=true;      return;    }    if (!insideMultiLineComment && !insideQuoteStringLiteral && TokenType.ALTERNATE_QUOTE.equals(delimitingToken)) {      insideAlternateQuoteStringLiteral=!insideAlternateQuoteStringLiteral;    }    if (!insideMultiLineComment && !insideAlternateQuoteStringLiteral && TokenType.QUOTE.equals(delimitingToken)) {      insideQuoteStringLiteral=!insideQuoteStringLiteral;    }    if (!insideMultiLineComment && !insideQuoteStringLiteral && !insideAlternateQuoteStringLiteral&& TokenType.OTHER.equals(delimitingToken)) {      nonCommentStatementPartSeen=true;    }  }}  }
class C{  public KeyBuilder shift(){  modifiers|=ModifierKeys.SHIFT;  return this;}  }
class C{  public Document createDefaultDocument(){  return new RSyntaxDocument(SyntaxConstants.SYNTAX_STYLE_NONE);}  }
class C{  public static void debug(Object message){  ri.debug(message);}  }
class C{  public Entry(int address,SourcePosition position){  if (address < 0) {    throw new IllegalArgumentException("address < 0");  }  if (position == null) {    throw new NullPointerException("position == null");  }  this.address=address;  this.position=position;}  }
class C{  protected final LinearGradientPaint createGradient(float x1,float y1,float x2,float y2,float[] midpoints,Color[] colors){  if (x1 == x2 && y1 == y2) {    y2+=.00001f;  }  return new LinearGradientPaint(x1,y1,x2,y2,midpoints,colors);}  }
class C{  public static <T>List<Tree<T>> depthLimitedTraversal(Tree<T> tree,int depth){  Stack<Tree<T>> treeStack=new Stack<>();  treeStack.push(tree);  int treeHeight=tree.getHeight();  ArrayList<Tree<T>> dfs=new ArrayList<>();  while (!treeStack.isEmpty()) {    Tree<T> t=treeStack.pop();    dfs.add(t);    Stack<Tree<T>> tmpStack=new Stack<>();    for (    Tree<T> child : t.childrenIterator()) {      tmpStack.add(child);    }    while (!tmpStack.isEmpty()) {      Tree<T> tmpTree=tmpStack.pop();      if (treeHeight - tmpTree.getHeight() < depth)       treeStack.add(tmpStack.pop());    }  }  return dfs;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.627 -0500",hash_original_method="8A5FFBB9A861965CD3F605D3125E7C0B",hash_generated_method="C19AF901AAE80819614D213C4B3272B7") protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect){  if (getChildCount() == 0)   return 0;  int height=getHeight();  int screenTop=getScrollY();  int screenBottom=screenTop + height;  int fadingEdge=getVerticalFadingEdgeLength();  if (rect.top > 0) {    screenTop+=fadingEdge;  }  if (rect.bottom < getChildAt(0).getHeight()) {    screenBottom-=fadingEdge;  }  int scrollYDelta=0;  if (rect.bottom > screenBottom && rect.top > screenTop) {    if (rect.height() > height) {      scrollYDelta+=(rect.top - screenTop);    } else {      scrollYDelta+=(rect.bottom - screenBottom);    }    int bottom=getChildAt(0).getBottom();    int distanceToBottom=bottom - screenBottom;    scrollYDelta=Math.min(scrollYDelta,distanceToBottom);  } else   if (rect.top < screenTop && rect.bottom < screenBottom) {    if (rect.height() > height) {      scrollYDelta-=(screenBottom - rect.bottom);    } else {      scrollYDelta-=(screenTop - rect.top);    }    scrollYDelta=Math.max(scrollYDelta,-getScrollY());  }  return scrollYDelta;}  }
class C{  private <T>List<T> toSortedList(T[] array,Comparator<T> comparator){  List<T> list=new ArrayList<>();  Collections.addAll(list,array);  Collections.sort(list,comparator);  return list;}  }
class C{  public int size(){  return size;}  }
class C{  private static void initializeMessageList(){  messageTextException[0]="Cannot train with no periods";  returnValueException[0]=11;  messageTextException[1]="Error: No periods for";  returnValueException[1]=11;  messageTextException[2]="Clustering did not converge: reached the maximum of";  returnValueException[2]=12;  messageTextException[3]="No trained model for source";  returnValueException[3]=13;  messageTextException[4]="Source";  returnValueException[4]=13;  messageTextException[5]="Source group";  returnValueException[5]=13;  messageTextException[6]="Cannot open";  returnValueException[6]=40;  messageTextException[7]="Cannot open file";  returnValueException[7]=40;  messageTextException[8]="Error in opening file";  returnValueException[8]=40;  messageTextException[9]="Error parsing xml";  returnValueException[9]=40;  messageTextException[10]="Error reading";  returnValueException[10]=40;  messageTextException[11]="Error reading from";  returnValueException[11]=40;  messageTextException[12]="Error: unable to open static file";  returnValueException[12]=40;  messageTextException[13]="Error: unble to initiliaze text score";  returnValueException[13]=40;  messageTextException[14]="Failed opening file";  returnValueException[14]=40;  messageTextException[15]="Failed reading from";  returnValueException[15]=40;  messageTextException[16]="Failed reading properties from";  returnValueException[16]=40;  messageTextException[17]="I/O error occurred while parsing log";  returnValueException[17]=40;  messageTextException[18]="I/O error";  returnValueException[18]=40;  messageTextException[19]="IO problem with file ";  returnValueException[19]=40;  messageTextException[20]="Missing property:";  returnValueException[20]=40;  messageTextException[21]="Database access error";  returnValueException[21]=41;  messageTextException[22]="Db access error";  returnValueException[22]=41;  messageTextException[23]="Db access was disabled";  returnValueException[23]=41;  messageTextException[24]="Db access was disabled";  returnValueException[24]=41;  messageTextException[25]="Db error";  returnValueException[25]=41;  messageTextException[25]="Failed closing connection ";  returnValueException[25]=41;  messageTextException[26]="Failed obtaining connection";  returnValueException[26]=41;  messageTextException[27]="failed querying db";  returnValueException[27]=41;  messageTextException[28]="Failed starting transaction";  returnValueException[28]=41;  messageTextException[29]="Loading driver failed";  returnValueException[29]=41;  messageTextException[30]="Cannot close";  returnValueException[30]=60;  messageTextException[31]="Copy file utility error";  returnValueException[31]=60;  messageTextException[32]="Could not close";  returnValueException[32]=60;  messageTextException[33]="Could not write interval in";  returnValueException[33]=60;  messageTextException[34]="Error closing log";  returnValueException[34]=60;  messageTextException[35]="Error creating DOM object";  returnValueException[35]=60;  messageTextException[36]="Error in closing";  returnValueException[36]=60;  messageTextException[37]="Error in closing file";  returnValueException[37]=60;  messageTextException[38]="Error parsing log";  returnValueException[38]=60;  messageTextException[39]="Error printing DOM";  returnValueException[39]=60;  messageTextException[40]="Error writing DOM to file ";  returnValueException[40]=60;  messageTextException[41]="Error: closing text score file";  returnValueException[41]=60;  messageTextException[42]="Error: unable to open complete file";  returnValueException[42]=60;  messageTextException[43]="Failed creating directory";  returnValueException[43]=60;  messageTextException[44]="Failed creating directory";  returnValueException[44]=60;  messageTextException[45]="Failed locking";  returnValueException[45]=60;  messageTextException[46]="Failed to open output fil";  returnValueException[46]=60;  messageTextException[47]="Failed to rename index.xml";  returnValueException[47]=60;  messageTextException[48]="Failed unlocking";  returnValueException[48]=60;  messageTextException[49]="Failed writing to ";  returnValueException[49]=60;  messageTextException[50]="Failed closing db";  returnValueException[50]=61;  messageTextException[51]="Failed committing";  returnValueException[51]=61;  messageTextException[52]="Failed ending transaction";  returnValueException[52]=61;  messageTextException[53]="failed executing sql statement:";  returnValueException[53]=61;  messageTextException[55]="No data for";  returnValueException[55]=11;}  }
class C{  public static Mosaic createMosaic(final int id){  return new Mosaic(createMosaicId(id),Quantity.fromValue(id));}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void recomputeLOFs(DBIDs ids,LOFResult<O> lofResult){  WritableDoubleDataStore new_lofs=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  DoubleMinMax new_lofminmax=new DoubleMinMax();  computeLOFs(lofResult.getKNNRefer(),ids,lofResult.getLrds(),new_lofs,new_lofminmax);  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    lofResult.getLofs().putDouble(iter,new_lofs.doubleValue(iter));  }  if (new_lofminmax.isValid()) {    if (lofResult.getResult().getOutlierMeta().getActualMaximum() < new_lofminmax.getMax()) {      BasicOutlierScoreMeta scoreMeta=(BasicOutlierScoreMeta)lofResult.getResult().getOutlierMeta();      scoreMeta.setActualMaximum(new_lofminmax.getMax());    }    if (lofResult.getResult().getOutlierMeta().getActualMinimum() > new_lofminmax.getMin()) {      BasicOutlierScoreMeta scoreMeta=(BasicOutlierScoreMeta)lofResult.getResult().getOutlierMeta();      scoreMeta.setActualMinimum(new_lofminmax.getMin());    }  }}  }
class C{  public void add(HDR sipheader,boolean top){  if (top)   this.addFirst(sipheader); else   this.add(sipheader);}  }
class C{  public int addStatementGetIndex(String statementName){  rwLock.acquireWriteLock();  try {    if ((currentLastElement + 1) < metrics.length) {      currentLastElement++;      statementNames[currentLastElement]=statementName;      return currentLastElement;    }    for (int i=0; i < statementNames.length; i++) {      if (statementNames[i] == null) {        statementNames[i]=statementName;        if ((i + 1) > currentLastElement) {          currentLastElement=i;        }        return i;      }    }    int newSize=(int)(metrics.length * 1.5);    String[] newStatementNames=new String[newSize];    StatementMetric[] newMetrics=new StatementMetric[newSize];    System.arraycopy(statementNames,0,newStatementNames,0,statementNames.length);    System.arraycopy(metrics,0,newMetrics,0,metrics.length);    statementNames=newStatementNames;    metrics=newMetrics;    currentLastElement++;    statementNames[currentLastElement]=statementName;    return currentLastElement;  }  finally {    rwLock.releaseWriteLock();  }}  }
class C{  public final void privateInitialize(String serviceName,CordovaInterface cordova,CordovaWebView webView,CordovaPreferences preferences){  assert this.cordova == null;  this.serviceName=serviceName;  this.cordova=cordova;  this.webView=webView;  this.preferences=preferences;  initialize(cordova,webView);  pluginInitialize();}  }
class C{  private static Integer createServerCache() throws Exception {  System.setProperty(HARegionQueue.REGION_ENTRY_EXPIRY_TIME,"1");  System.setProperty("slowStartTimeForTesting",String.valueOf(DISPATCHER_SLOWSTART_TIME));  new Bug36853EventsExpiryDUnitTest().createCache(new Properties());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setDataPolicy(DataPolicy.REPLICATE);  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME,attrs);  CacheServer server=cache.addCacheServer();  assertNotNull(server);  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  server.setPort(port);  server.setNotifyBySubscription(true);  server.start();  return new Integer(server.getPort());}  }
class C{  static CipherSuite valueOf(String s){  if (s == null) {    throw new IllegalArgumentException("Name must not be null");  }  CipherSuite c=nameMap.get(s);  if ((c == null) || (c.allowed == false)) {    throw new IllegalArgumentException("Unsupported ciphersuite " + s);  }  return c;}  }
class C{  public static BigDecimal round(BigDecimal p_Amount,int p_C_Currency_ID,String p_Costing) throws SQLException {  if (p_Amount == null)   return null;  if (p_Amount.signum() == 0 || p_C_Currency_ID == 0)   return p_Amount;  boolean costing=p_Costing != null && "Y".equals(p_Costing);  BigDecimal result=p_Amount;  String sql="SELECT StdPrecision, CostingPrecision " + "FROM C_Currency " + "WHERE C_Currency_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_C_Currency_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    int index=costing ? 2 : 1;    int prec=rs.getInt(index);    if (result.scale() > prec)     result=result.setScale(prec,BigDecimal.ROUND_HALF_UP);  }  rs.close();  pstmt.close();  return result;}  }
class C{  protected void restoreSelection(){  if (cursor >= 0 && cursor < selections.size()) {    ISelection selection=selections.get(cursor);    if (selection != null) {      selectionProvider.setSelection(selection);    }  }}  }
class C{  List<Product> filterProducts(List<Product> products,String marketplaceId){  Set<Long> prodKeysToBeRemoved=new HashSet<Long>();  Map<Long,Product> prodKeysToBeReplaced=new HashMap<Long,Product>();  PlatformUser currentUser=dm.getCurrentUserIfPresent();  boolean currentOrgIsMpOwner=isOrganizationMarketplaceOwner(currentUser,marketplaceId);  for (  Product product : products) {    Product template=product.getTemplate();    boolean replaceTemplate=false;    if (product.getStatus() != ServiceStatus.ACTIVE && !(currentOrgIsMpOwner && product.getStatus() == ServiceStatus.SUSPENDED)) {      prodKeysToBeRemoved.add(Long.valueOf(product.getKey()));      if (template != null) {        prodKeysToBeRemoved.add(Long.valueOf(template.getKey()));      }    } else     if (template != null && product.getType() == ServiceType.CUSTOMER_TEMPLATE) {      prodKeysToBeReplaced.put(Long.valueOf(template.getKey()),product);      prodKeysToBeRemoved.add(Long.valueOf(product.getKey()));      replaceTemplate=true;    }    if (template != null && !replaceTemplate && template.getStatus() != ServiceStatus.ACTIVE && !(currentOrgIsMpOwner && template.getStatus() == ServiceStatus.SUSPENDED)) {      prodKeysToBeRemoved.add(Long.valueOf(template.getKey()));    }    if (isSubscriptionLimitReached(product)) {      prodKeysToBeRemoved.add(Long.valueOf(product.getKey()));    }  }  cleanUpProducts(products,prodKeysToBeRemoved,prodKeysToBeReplaced);  return products;}  }
class C{  @Override public void startExecuting(){  this.timeToRecalcPath=0;  this.oldWaterCost=this.thePet.getPathPriority(PathNodeType.WATER);  this.thePet.setPathPriority(PathNodeType.WATER,0.0F);}  }
class C{  private View findFocusableViewInMyBounds(final boolean topFocus,final int top,final boolean leftFocus,final int left,View preferredFocusable){  final int verticalFadingEdgeLength=getVerticalFadingEdgeLength() / 2;  final int topWithoutFadingEdge=top + verticalFadingEdgeLength;  final int bottomWithoutFadingEdge=top + getHeight() - verticalFadingEdgeLength;  final int horizontalFadingEdgeLength=getHorizontalFadingEdgeLength() / 2;  final int leftWithoutFadingEdge=left + horizontalFadingEdgeLength;  final int rightWithoutFadingEdge=left + getWidth() - horizontalFadingEdgeLength;  if ((preferredFocusable != null) && (preferredFocusable.getTop() < bottomWithoutFadingEdge) && (preferredFocusable.getBottom() > topWithoutFadingEdge)&& (preferredFocusable.getLeft() < rightWithoutFadingEdge)&& (preferredFocusable.getRight() > leftWithoutFadingEdge)) {    return preferredFocusable;  }  return findFocusableViewInBounds(topFocus,topWithoutFadingEdge,bottomWithoutFadingEdge,leftFocus,leftWithoutFadingEdge,rightWithoutFadingEdge);}  }
class C{  private boolean isVmdkFile(InputStream inputStream) throws IOException {  return VMDK_FILE_SIGNATURE.equalsIgnoreCase(DataField.getString(VMDK_SIGNATURE_FIELD,inputStream));}  }
class C{  public static boolean beenDone(@Scope int scope,String tag,CountChecker numberOfTimes){  List<Long> tagSeenDates=tagLastSeenMap.get(tag);  if (tagSeenDates.isEmpty()) {    return false;  }  if (scope == THIS_APP_INSTALL) {    return numberOfTimes.check(tagSeenDates.size());  } else   if (scope == THIS_APP_SESSION) {    int counter=0;    for (    String tagFromList : sessionList) {      if (tagFromList.equals(tag)) {        counter++;      }    }    return numberOfTimes.check(counter);  } else {    int counter=0;    for (    Long seenDate : tagSeenDates) {      if (seenDate > lastAppUpdatedTime) {        counter++;      }    }    return numberOfTimes.check(counter);  }}  }
class C{  private void merge(int middle){  if (array[middle - 1] < array[middle]) {    return;  }  int[] copy=new int[high - low];  System.arraycopy(array,low,copy,0,copy.length);  int copyLow=0;  int copyHigh=high - low;  int copyMiddle=middle - low;  for (int i=low, p=copyLow, q=copyMiddle; i < high; i++) {    if (q >= copyHigh || (p < copyMiddle && copy[p] < copy[q])) {      array[i]=copy[p++];    } else {      array[i]=copy[q++];    }  }}  }
class C{  public URI(String scheme,String schemeSpecificPart,String fragment) throws URISyntaxException {  StringBuilder uri=new StringBuilder();  if (scheme != null) {    uri.append(scheme);    uri.append(':');  }  if (schemeSpecificPart != null) {    ALL_LEGAL_ENCODER.appendEncoded(uri,schemeSpecificPart);  }  if (fragment != null) {    uri.append('#');    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);  }  parseURI(uri.toString(),false);}  }
class C{  public boolean checkWritePermission(InetAddress address){  if (alwaysAuthorized)   return (true);  PrincipalImpl p=new PrincipalImpl(address);  return acl.checkPermission(p,WRITE);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:01.605 -0500",hash_original_method="1FA484546C7B73CA49B2C4AE64A8C83E",hash_generated_method="6377B6D624485818A014047739069E85") private void storeVoiceMailNumber(String number){  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getContext());  SharedPreferences.Editor editor=sp.edit();  editor.putString(VM_NUMBER_CDMA,number);  editor.apply();}  }
class C{  public static void zipFiles(File zip,File... files) throws IOException {  try (BufferedOutputStream bufferedOut=new BufferedOutputStream(new FileOutputStream(zip))){    zipFiles(bufferedOut,files);  } }  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();{    boolean success=false;    try {      splitNode=textNode.splitText(300);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public ArithmeticException(){}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.576 -0400",hash_original_method="AFE1AB9895979A58E234511DD824F565",hash_generated_method="1E311385B5DD82231D5435AC404C14C3") public DrmRights(File rightsFile,String mimeType){  instantiate(rightsFile,mimeType);}  }
class C{  public static TreeNode helper(int[] num,int left,int right){  if (left > right)   return null;  int mid=left + (right - left) / 2;  TreeNode root=new TreeNode(num[mid]);  root.left=helper(num,left,mid - 1);  root.right=helper(num,mid + 1,right);  return root;}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public TextTitle(){  this("");}  }
class C{  public static void showAssetsImage(String path,SimpleDraweeView view){  view.setImageURI(Uri.parse("asset://" + path));}  }
class C{  protected byte[] engineDigest(){  byte[] hash=new byte[DIGEST_LENGTH];  processDigest(hash,0);  return hash;}  }
class C{  public EqExpr newEqExpr(Value op1,Value op2){  return new JEqExpr(op1,op2);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Agent a=(Agent)stack.pop();  return (a == null) ? "" : a.getTitle();}  }
class C{  public String convert(String s,int numRows){  StringBuffer[] sb=new StringBuffer[numRows];  for (int i=0; i < sb.length; i++) {    sb[i]=new StringBuffer();  }  int len=s.length();  int i=0;  while (i < len) {    for (int j=0; j < numRows && i < len; j++) {      sb[j].append(s.charAt(i++));    }    for (int j=numRows - 2; j > 0 && i < len; j--) {      sb[j].append(s.charAt(i++));    }  }  for (int k=1; k < numRows; k++) {    sb[0].append(sb[k]);  }  return sb[0].toString();}  }
class C{  private NavigationItem listMyBoomarks(AppContext userContext,NavigationQuery query,String parent,String[] filters,HierarchyMode hierarchyMode,List<NavigationItem> content) throws ScopeException {  String fullPath=BookmarkManager.INSTANCE.getMyBookmarkPath(userContext);  NavigationItem parentFolder=null;  if (parent.equals(MYBOOKMARKS_FOLDER.getSelfRef())) {    parentFolder=createLinkableFolder(userContext,query,MYBOOKMARKS_FOLDER);  } else {    fullPath+=parent.substring(MYBOOKMARKS_FOLDER.getSelfRef().length());    String name=parent.substring(parent.lastIndexOf("/"));    String grandParent=parent.substring(0,parent.lastIndexOf("/"));    parentFolder=new NavigationItem(name,"",grandParent,parent,NavigationItem.FOLDER_TYPE);  }  listBoomarks(userContext,query,parent,filters,hierarchyMode,fullPath,content);  return parentFolder;}  }
class C{  public SocketHandler(Socket sock,Server s) throws IOException {  super();  _input=sock.getInputStream();  _output=sock.getOutputStream();  _socket=sock;  _server=s;  setup(this,_input);}  }
class C{  public <CT>CT callBatchTasks(DatabaseConnection connection,boolean saved,Callable<CT> callable) throws SQLException {  if (databaseType.isBatchUseTransaction()) {    return TransactionManager.callInTransaction(connection,saved,databaseType,callable);  }  boolean autoCommitAtStart=false;  try {    if (connection.isAutoCommitSupported()) {      autoCommitAtStart=connection.isAutoCommit();      if (autoCommitAtStart) {        connection.setAutoCommit(false);        logger.debug("disabled auto-commit on table {} before batch tasks",tableInfo.getTableName());      }    }    try {      return callable.call();    } catch (    SQLException e) {      throw e;    }catch (    Exception e) {      throw SqlExceptionUtil.create("Batch tasks callable threw non-SQL exception",e);    }  }  finally {    if (autoCommitAtStart) {      connection.setAutoCommit(true);      logger.debug("re-enabled auto-commit on table {} after batch tasks",tableInfo.getTableName());    }  }}  }
class C{  private void openDialogFragment(DialogFragment dialogStandardFragment){  if (!isFinishing()) {    if (mSharedPrefs != null) {      PackageInfo pInfo=null;      try {        pInfo=getPackageManager().getPackageInfo(getPackageName(),0);        String version=pInfo.versionName;        String preVersion=mSharedPrefs.getPreviousVersionNumber();        if (!version.equals(preVersion)) {          if (dialogStandardFragment != null) {            getSupportFragmentManager().beginTransaction().add(dialogStandardFragment,"changelog_dialog").commitAllowingStateLoss();          }          mSharedPrefs.setVersionNumber(version);        }      } catch (      PackageManager.NameNotFoundException e) {        e.printStackTrace();      }    }  }}  }
class C{  public static void loadImage(String path,final int flags,Mat dst) throws IOException {  checkNotNull(path,"The path can not be null");  checkNotNull(dst,"The destination Mat can not be null");  final Mat img=opencv_imgcodecs.imread(path,flags);  if (img != null && !img.empty() && !img.isNull()) {    img.copyTo(dst);  } else {    throw new IOException("Error loading image " + path);  }}  }
class C{  public void groupIterator(Session session,MemoryStoreData storeData){  assert storeData.storageDescription.getObject() instanceof Group : storeData.storageDescription;  MemoryTransaction txn=getTransaction(session);  byte[] uuidBytes=storeData.storageDescription.getUUIDBytes();  storeData.iterator=txn.getRange(uuidBytes,join(uuidBytes,BYTES_FF));}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.user);  ListView userList=(ListView)findViewById(R.id.list);  _adapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,_users);  userList.setAdapter(_adapter);}  }
class C{  private Collection<QueryIndex> indexes(PreparedStatement stmt,String owner,String tbl) throws SQLException {  Map<String,QueryIndex> idxs=new LinkedHashMap<>();  stmt.setString(1,owner);  stmt.setString(2,tbl);  try (ResultSet idxsRs=stmt.executeQuery()){    while (idxsRs.next()) {      String idxName=idxsRs.getString(IDX_NAME_IDX);      QueryIndex idx=idxs.get(idxName);      if (idx == null) {        idx=index(idxName);        idxs.put(idxName,idx);      }      String expr=idxsRs.getString(IDX_EXPR_IDX);      String col=expr == null ? idxsRs.getString(IDX_COL_NAME_IDX) : expr.replaceAll("\"","");      idx.getFields().put(col,!"DESC".equals(idxsRs.getString(IDX_COL_DESCEND_IDX)));    }  }   return idxs.values();}  }
class C{  public void clear(Properties props){  Properties nsProps=getProperties(true);  for (  String name : nsProps.stringPropertyNames()) {    props.remove(name);  }}  }
class C{  public EndRoundDelegate(){}  }
class C{  @Override protected void launch(){  MekaFrame frame=new MekaFrame();  DataViewerMainPanel main=new DataViewerMainPanel(frame);  frame.setTitle(getName());  frame.setDefaultCloseOperation(MekaFrame.DISPOSE_ON_CLOSE);  frame.setIconImage(GUIHelper.getLogoIcon().getImage());  frame.setLayout(new BorderLayout());  frame.add(main,BorderLayout.CENTER);  frame.setJMenuBar(main.getMenu());  frame.setSize(GUIHelper.getDefaultFrameDimensions(DataViewerMainPanel.class));  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public double[] toArrayDegrees(){  return new double[]{this.minLatitude.degrees,this.maxLatitude.degrees,this.minLongitude.degrees,this.maxLongitude.degrees};}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public String toString(){  if (m_probOfClass == null) {    return "NaiveBayesMultinomialText: No model built yet.\n";  }  StringBuffer result=new StringBuffer();  HashSet<String> master=new HashSet<String>();  for (int i=0; i < m_data.numClasses(); i++) {    LinkedHashMap<String,Count> classDict=m_probOfWordGivenClass.get(i);    for (    String key : classDict.keySet()) {      master.add(key);    }  }  result.append("Dictionary size: " + master.size()).append("\n\n");  result.append("The independent frequency of a class\n");  result.append("--------------------------------------\n");  for (int i=0; i < m_data.numClasses(); i++) {    result.append(m_data.classAttribute().value(i)).append("\t").append(Double.toString(m_probOfClass[i])).append("\n");  }  if (master.size() > 150000) {    result.append("\nFrequency table ommitted due to size\n");    return result.toString();  }  result.append("\nThe frequency of a word given the class\n");  result.append("-----------------------------------------\n");  for (int i=0; i < m_data.numClasses(); i++) {    result.append(Utils.padLeft(m_data.classAttribute().value(i),11)).append("\t");  }  result.append("\n");  Iterator<String> masterIter=master.iterator();  while (masterIter.hasNext()) {    String word=masterIter.next();    for (int i=0; i < m_data.numClasses(); i++) {      LinkedHashMap<String,Count> classDict=m_probOfWordGivenClass.get(i);      Count c=classDict.get(word);      if (c == null) {        result.append("<laplace=1>\t");      } else {        result.append(Utils.padLeft(Double.toString(c.m_count),11)).append("\t");      }    }    result.append(word);    result.append("\n");  }  return result.toString();}  }
class C{  private int findIndex(Object key,Object[] array){  int length=array.length;  int index=getModuloHash(key,length);  int last=(index + length - 1) % length;  while (index != last) {    if (array[index] == key || array[index] == null) {      break;    }    index=(index + 1) % length;  }  return index;}  }
class C{  public final void removeColumn(Node variable){  int index=variables.indexOf(variable);  if (index == -1) {    throw new IllegalArgumentException("Not a variables in this data set: " + variable);  }  removeColumn(index);}  }
class C{  public StringOwnTokenizer(String text){  this(text," \t\n\r\f",null);}  }
class C{  @Override public int indexOf(Comparable seriesName){  return this.delegateSet.indexOf(seriesName);}  }
class C{  public final void removeAllElements(){  m_Objects=new Object[m_Objects.length];  m_Size=0;}  }
class C{  private static void cleanStaleInitiatorReferences(ExportGroup exportGroup,DbClient dbClient){  StringSet exportGroupInitiators=exportGroup.getInitiators();  if (!CollectionUtils.isEmpty(exportGroupInitiators) && !CollectionUtils.isEmpty(exportGroup.getExportMasks())) {    Set<String> allMaskInitiators=new HashSet<>();    for (    String mask : exportGroup.getExportMasks()) {      ExportMask maskObj=dbClient.queryObject(ExportMask.class,URI.create(mask));      if (maskObj != null && !CollectionUtils.isEmpty(maskObj.getInitiators())) {        allMaskInitiators.addAll(maskObj.getInitiators());      }    }    Set<String> staleInitiators=Sets.difference(exportGroupInitiators,allMaskInitiators);    if (!CollectionUtils.isEmpty(staleInitiators)) {      Collection<URI> staleInitiatorURIS=Collections2.transform(staleInitiators,CommonTransformerFunctions.FCTN_STRING_TO_URI);      exportGroup.removeInitiators(new ArrayList<>(staleInitiatorURIS));      _log.info("Stale initiators {} will be removed from Export Group {}",staleInitiatorURIS,exportGroup.getId());    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:07.241 -0500",hash_original_method="40EEF7A0A264136F662D7E1DA715A559",hash_generated_method="73B4F21232108BF5282CD85457539E41") public LocalServerSocket(FileDescriptor fd) throws IOException {  impl=new LocalSocketImpl(fd);  impl.listen(LISTEN_BACKLOG);  localAddress=impl.getSockAddress();}  }
class C{  public void assertArrayEqual(int[] expected,int[] actual,String errorMessage){  TestUtils.assertArrayEqual(expected,actual,errorMessage);}  }
class C{  private void pruneHistory(){  final IKeyBuilder keyBuilder=ndx.getIndexMetadata().getKeyBuilder().reset();  keyBuilder.append(releaseTime);  final byte[] toKey=keyBuilder.getKey();  long n=0;  final ITupleIterator<?> itr=ndx.rangeIterator(null,toKey,0,IRangeQuery.REMOVEALL,null);  while (itr.hasNext()) {    itr.next();    n++;  }  if (n > 0 && log.isInfoEnabled()) {    log.info("pruned history: nremoved=" + n + ", minReleaseAge="+ minReleaseAge+ ", releaseTime="+ releaseTime);  }}  }
class C{  public void dequeue(AnthURL url){  readyUrls.remove(url);  if (valueFunction.getNecessities(HostValueUpdateNecessity.ON_QUEUE_CHANGE)) {    scoreUpdateNeeded=true;  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == AccessibleTypeElement.class) {switch (derivedFeatureID) {case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_TYPE_ACCESS_MODIFIER:      return TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_TYPE_ACCESS_MODIFIER;case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_PROVIDED_BY_RUNTIME:    return TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_PROVIDED_BY_RUNTIME;default :  return -1;}}if (baseClass == DeclaredTypeWithAccessModifier.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == ArrayLike.class) {switch (derivedFeatureID) {case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_ELEMENT_TYPE:return TypesPackage.ARRAY_LIKE__DECLARED_ELEMENT_TYPE;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public long optLong(int index){  return this.optLong(index,0);}  }
class C{  @Override public String globalInfo(){  return "Majority Labelset Classifier: Always predict the combination of labels which occurs most frequently in the training set.";}  }
class C{  @Override public void writeBoolean(boolean b){  writeByte(b ? 1 : 0);}  }
class C{  static public void removePropertyChangeListener(PropertyChangeListener l){  listenerList.remove(PropertyChangeListener.class,l);  if (listenerList.getListenerCount(PropertyChangeListener.class) == 0) {    accessibilityListener.removeListeners();  }}  }
class C{  private Object readResolve(){  Chronology base=getBase();  int minDays=getMinimumDaysInFirstWeek();  minDays=(minDays == 0 ? 4 : minDays);  return base == null ? getInstance(DateTimeZone.UTC,minDays) : getInstance(base.getZone(),minDays);}  }
class C{  public static boolean isShowing(){  Form f=Display.getInstance().getCurrent();  return f.getClientProperty("cn1$sideMenuParent") != null;}  }
class C{  public int treceval(){  return treceval;}  }
class C{  public Iterator<String> iterateFormatters(){  return formatters.iterator();}  }
class C{  public static RowLimitClause create(String numRowsVariable){  return new RowLimitClause(null,null,numRowsVariable,null);}  }
class C{  public static boolean isValidMove(int i,int j,int[][] tour){  if (i >= 0 && i < tour.length && j >= 0 && j < tour[0].length && tour[i][j] == 0) {    return true;  } else {    return false;  }}  }
class C{  private void step2(DBIDRef id,DBIDs processedIDs,DistanceQuery<? super O> distQuery,DoubleDataStore coredists,WritableDoubleDataStore m){  double coreP=coredists.doubleValue(id);  for (DBIDIter it=processedIDs.iter(); it.valid(); it.advance()) {    double coreQ=coredists.doubleValue(it);    double dist=MathUtil.max(coreP,coreQ,distQuery.distance(id,it));    m.putDouble(it,dist);  }}  }
class C{  public boolean canBeZero(){  boolean zero=true;  if (getFormat().equals(MONEY_POSITIVE_7_2)) {    zero=false;  } else   if (getFormat().equals(MONEY_POSITIVE_10_2)) {    zero=false;  }  return zero;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public boolean hasId(){  return id != NO_ID;}  }
class C{  public ScaleAndIndexes indexes(int... indexes){  return new ScaleAndIndexes(scale,indexes.clone());}  }
class C{  public IntBag(int capacity){  numObjs=0;  objs=new int[capacity];}  }
class C{  public IndexFields build(){  return new IndexFields(this);}  }
class C{  public boolean isUseMipmaps(){  return this.useMipmaps;}  }
class C{  @Override public double utility(double totalWeight,double totalPositiveWeight,Hypothesis hypo){  double g=hypo.getCoveredWeight() / totalWeight;  double p=hypo.getPositiveWeight() / hypo.getCoveredWeight();  if (hypo.getPrediction() == Hypothesis.POSITIVE_CLASS) {    return Math.sqrt(g) * (p - this.priors[Hypothesis.POSITIVE_CLASS]);  } else {    return Math.sqrt(g) * (p - this.priors[Hypothesis.NEGATIVE_CLASS]);  }}  }
class C{  public SVGFilterDescriptor toSVG(BufferedImageOp filter,Rectangle filterRect){  if (filter instanceof ConvolveOp)   return toSVG((ConvolveOp)filter); else   return null;}  }
class C{  public JavaDocContextType(){  super(ID);  addResolver(new GlobalTemplateVariables.Cursor());  addResolver(new SurroundWithWordSelection());  addResolver(new GlobalTemplateVariables.Dollar());  addResolver(new GlobalTemplateVariables.Date());  addResolver(new GlobalTemplateVariables.Year());  addResolver(new GlobalTemplateVariables.Time());  addResolver(new GlobalTemplateVariables.User());}  }
class C{  @Deprecated public static String toString(final Object[] a){  return Arrays.toString(a);}  }
class C{  public String attributeTypeTipText(){  return "The type of attribute to remove.";}  }
class C{  private void reducingPrimitiveVersion(List<Trade> trades){  OptionalInt totalQuantity=trades.stream().mapToInt(null).reduce(null);  System.out.println("Total quantity (unboxed version): " + totalQuantity.getAsInt());}  }
class C{  public boolean addSpringConfig(SpringConfig springConfig,String configName){  if (springConfig == null) {    throw new IllegalArgumentException("springConfig is required");  }  if (configName == null) {    throw new IllegalArgumentException("configName is required");  }  if (mSpringConfigMap.containsKey(springConfig)) {    return false;  }  mSpringConfigMap.put(springConfig,configName);  return true;}  }
class C{  public Renaming clone(){  Renaming result=new Renaming();  result.identifiers=(Vector<FormalParamNode>)this.identifiers.clone();  result.newNames=(Vector<String>)this.newNames.clone();  return result;}  }
class C{  private int readInt(@Nonnull byte[] buf,@Nonnegative int len) throws IOException {  readBytes(buf,0,len);  int ret=(0xFF & buf[0]) << 24;  ret|=(0xFF & buf[1]) << 16;  ret|=(0xFF & buf[2]) << 8;  ret|=(0xFF & buf[3]);  return (len > 3) ? ret : (ret >>> (8 * (4 - len)));}  }
class C{  public void addAttribute(AttributeInfo info){  AttributeInfo.remove(attributes,info.getName());  attributes.add(info);}  }
class C{  @Interruptible private int endCurrentMap(int firstIndex){  int lastEntry=lastGCMapEntry;  gcMapInformation[lastEntry]=gcMapInformation[lastEntry] & ~NEXT_BIT;  if (DEBUG) {    System.out.println("\nendCurrentMap called with firstIndex: " + firstIndex + ", lastGCMapEntry: "+ lastGCMapEntry);    System.out.println("gc map array before reuse checking");    for (int i=0; i <= lastGCMapEntry; i++) {      System.out.println(i + ": " + gcMapInformation[i]);    }  }  int candidateBeginningIndex=0;  int candidateIndex=candidateBeginningIndex;  int curIndex=firstIndex;  while (candidateIndex < firstIndex && curIndex <= lastEntry) {    int old=gcMapInformation[candidateIndex++];    int cur=gcMapInformation[curIndex++];    if (old != cur) {      if (DEBUG) {        System.out.println("entries at " + (candidateIndex - 1) + " and "+ (curIndex - 1)+ " don't match");      }      while ((old & NEXT_BIT) != 0) {        old=gcMapInformation[candidateIndex++];      }      candidateBeginningIndex=candidateIndex;      curIndex=firstIndex;    } else     if ((old & NEXT_BIT) == 0) {      if (DEBUG) {        System.out.println("found a matching map: [" + candidateBeginningIndex + ", "+ (candidateIndex - 1)+ "] == ["+ firstIndex+ ", "+ lastGCMapEntry+ "]");      }      lastGCMapEntry=firstIndex - 1;      return candidateBeginningIndex;    }  }  return firstIndex;}  }
class C{  public static int[] analyzeGraphGrid(TupleSet ts){  int m, n;  Iterator iter=ts.tuples();  iter.next();  for (n=2; iter.hasNext(); n++) {    Node nd=(Node)iter.next();    if (nd.getDegree() == 2)     break;  }  m=ts.getTupleCount() / n;  return new int[]{m,n};}  }
class C{  public ToHitData losModifiers(IGame game){  return losModifiers(game,0,false);}  }
class C{  protected void initBits(){  bitBuf=0;  bitPos=0;}  }
class C{  public void start(float rotation){  if (mRunning) {    return;  }  mTargetRotation=rotation;  mVelocity=mTargetRotation / ROTATE_ANIMATION_DURATION;  mAppliedRotation=0f;  mLastRuntime=NEVER;  mStop=false;  mRunning=true;  mHeader.post(this);}  }
class C{  public static boolean isSelfCall(JCTree tree){  Name name=calledMethodName(tree);  if (name != null) {    Names names=name.table.names;    return name == names._this || name == names._super;  } else {    return false;  }}  }
class C{  public MyTableRowSorter(M model){  setModel(model);}  }
class C{  protected void visitNode(final Node n,final DijkstraNodeData data,final PseudoRemovePriorityQueue<Node> pendingNodes,final double time,final double cost,final Link outLink){  data.visit(outLink,cost,time,getIterationId());  pendingNodes.add(n,getPriority(data));}  }
class C{  public Bounds translateXFlipped(double x,double y,double entityWidth){  return new BoundingBox(x + entityWidth - bounds.getMinX() - bounds.getWidth(),y + bounds.getMinY(),bounds.getWidth(),bounds.getHeight());}  }
class C{  public void addAncestorListener(AncestorListener listener){  AncestorNotifier ancestorNotifier=getAncestorNotifier();  if (ancestorNotifier == null) {    ancestorNotifier=new AncestorNotifier(this);    putClientProperty(JComponent_ANCESTOR_NOTIFIER,ancestorNotifier);  }  ancestorNotifier.addAncestorListener(listener);}  }
class C{  @Override public XAQueueConnection createXAQueueConnection() throws JMSException {  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createXAQueueConnection()");  }  ActiveMQRASessionFactoryImpl s=new ActiveMQRASessionFactoryImpl(mcf,cm,getResourceAdapter().getTM(),ActiveMQRAConnectionFactory.XA_QUEUE_CONNECTION);  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("Created queue connection: " + s);  }  return s;}  }
class C{  public IgniteFutureTimeoutCheckedException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public int length(){  int m=maxLength >> ADDRESS_BITS;  while (m > 0 && data[m] == 0) {    m--;  }  maxLength=(m << ADDRESS_BITS) + (64 - Long.numberOfLeadingZeros(data[m]));  return maxLength;}  }
class C{  public void shutdownInput() throws IOException {  implCreateIfNeeded();  impl.shutdownInput();}  }
class C{  public OAuthSigning(TwitterAuthConfig authConfig,TwitterAuthToken authToken){  this(authConfig,authToken,new OAuth1aHeaders());}  }
class C{  public static boolean intersectsCircle(float[] polyPoints,double lat,double lon,double radius){  Geo a=new Geo(polyPoints[0],polyPoints[1]);  Geo b=new Geo();  Geo c=new Geo(lat,lon);  int numCoords=polyPoints.length / 2 - 1;  for (int i=1; i < numCoords; i++) {    float lat2=polyPoints[2 * i];    float lon2=polyPoints[2 * i + 1];    b.initialize(lat2,lon2);    if (intersectsCircle(a,b,c,radius))     return true;    a.initialize(b);  }  return false;}  }
class C{  public BreakpointSynchronizer(final IDebugger debugger){  this.debugger=Preconditions.checkNotNull(debugger,"IE00795: Debugger argument can not be null");  manager=Preconditions.checkNotNull(debugger.getBreakpointManager(),"Error: debugger.getBreakpointManager() argument can not be null");  manager.addListener(managerListener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:56.362 -0500",hash_original_method="C591B8BF2CAD63BD466BDA5E0AF86D43",hash_generated_method="9126AE3B0F34FBB9DF05F13B7A451F65") public static boolean isStatusError(int status){  return (status >= 400 && status < 600);}  }
class C{  public JapaneseKatakanaStemFilterFactory(Map<String,String> args){  super(args);  minimumLength=getInt(args,MINIMUM_LENGTH_PARAM,JapaneseKatakanaStemFilter.DEFAULT_MINIMUM_LENGTH);  if (minimumLength < 2) {    throw new IllegalArgumentException("Illegal " + MINIMUM_LENGTH_PARAM + " "+ minimumLength+ " (must be 2 or greater)");  }  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){  deployerFactory.registerDeployer("websphere85x",DeployerType.INSTALLED,WebSphere85xInstalledLocalDeployer.class);}  }
class C{  public static EnumMap<GCMetric,Boolean> create_enabled_map(GCMetric metrics[],boolean value){  if (metrics == null)   return null;  EnumMap<GCMetric,Boolean> map;  map=new EnumMap<GCMetric,Boolean>(GCMetric.class);  for (  GCMetric metric : GCMetric.values()) {    map.put(metric,!value);  }  for (int i=0; i < metrics.length; ++i) {    map.put(metrics[i],value);  }  return map;}  }
class C{  public LoggerInputStreamSink(String tag,InputStream in,Logger outLogger){  this.tag=tag;  if (tag.compareTo("stderr") == 0)   this.info=false; else   this.info=true;  this.inputStream=in;  this.outLogger=outLogger;}  }
class C{  public void addConcept(Class<?> concept,URI type) throws ObjectStoreConfigException {  List<URI> list=concepts.get(concept);  if (list == null && concepts.containsKey(concept))   throw new ObjectStoreConfigException(concept.getSimpleName() + " can only be added once");  if (list == null) {    concepts.put(concept,list=new LinkedList<URI>());  }  list.add(type);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:09:10.069 -0500",hash_original_method="A004EFF3212CF1F0BEAA16DF9FAC4D54",hash_generated_method="082F675AE8270BFAB92FA59495250ADF") public Base64OutputStream(OutputStream out,boolean doEncode){  super(out);  this.doEncode=doEncode;  this.base64=new Base64();}  }
class C{  private PageLeafImpl compact(TableKelp table){  long now=CurrentTime.currentTime() / 1000;  Set<PageLeafEntry> entries=fillEntries(table);  ArrayList<BlockLeaf> blocks=new ArrayList<>();  BlockLeaf block=new BlockLeaf(getId());  blocks.add(block);  Row row=table.row();  for (  PageLeafEntry entry : entries) {    if (entry.getCode() != INSERT && entry.getExpires() <= now) {      continue;    }    while (!block.addEntry(row,entry)) {      block=new BlockLeaf(getId());      blocks.add(block);    }  }  PageLeafImpl newPage=new PageLeafImpl(getId(),getNextId(),getSequence(),_table,getMinKey(),getMaxKey(),blocks);  newPage.validate(table);  newPage.toSorted(table);  if (isDirty()) {    newPage.setDirty();  }  if (_stub != null) {    _stub.copyToCompact(newPage);  }  return newPage;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"cmpsw");  new CmpsGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.WORD,instructions);}  }
class C{  public OpacityFilter(){  this(0x88);}  }
class C{  private Response<Bitmap> doVideoFileParse(){  final String requestUrl=getUrl();  File bitmapFile=new File(requestUrl.substring(8,requestUrl.length()));  if (!bitmapFile.exists() || !bitmapFile.isFile()) {    return Response.error(new ParseError(new FileNotFoundException(String.format("File not found: %s",bitmapFile.getAbsolutePath()))));  }  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  decodeOptions.inInputShareable=true;  decodeOptions.inPurgeable=true;  decodeOptions.inPreferredConfig=mDecodeConfig;  Bitmap bitmap;  if (mMaxWidth == 0 && mMaxHeight == 0) {    bitmap=getVideoFrame(bitmapFile.getAbsolutePath());    addMarker("read-full-size-image-from-file");  } else {    decodeOptions.inJustDecodeBounds=true;    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=ImageUtils.findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=getVideoFrame(bitmapFile.getAbsolutePath());    addMarker(String.format("read-from-file-scaled-times-%d",decodeOptions.inSampleSize));    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();      addMarker("scaling-read-from-file-bitmap");    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError());  } else {    return Response.success(bitmap,HttpHeaderParser.parseBitmapCacheHeaders(bitmap));  }}  }
class C{  @Override public boolean exists(String filename) throws IOException {  if (logger.isDebugEnabled())   logger.debug("Checking that " + filename + " exists answer="+ hdfs.exists(new Path(filename)));  return hdfs.exists(new Path(filename));}  }
class C{  public void addThread(final TargetProcessThread thread){synchronized (m_threads) {    thread.addListener(m_threadListener);    m_threads.add(thread);  }  fireTableDataChanged();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrspecifiedvalue.class,args);}  }
class C{  public boolean fs(){  return this.fs;}  }
class C{  @Override public boolean provides(Class<?> type){  return false;}  }
class C{  public void testSuccessWithSuccessRatio(){  CircuitBreaker breaker=new CircuitBreaker().withSuccessThreshold(2,3);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  state.recordFailure();  state.recordSuccess();  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordSuccess();  assertTrue(breaker.isClosed());}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  return true;}  }
class C{  public CCheckBox(String text,boolean selected){  super(text,selected);  init();}  }
class C{  @Override public double[] projectRelativeDataToRenderSpace(NumberVector data){  return projectRelativeScaledToRender(projectRelativeDataToScaledSpace(data));}  }
class C{  public void error(QueryErrorType errType,String msg) throws IOException {  out.writeByte(ERROR_RECORD_MARKER);  if (errType == QueryErrorType.MALFORMED_QUERY_ERROR) {    out.writeByte(MALFORMED_QUERY_ERROR);  } else {    out.writeByte(QUERY_EVALUATION_ERROR);  }  writeString(msg);}  }
class C{  public IdsQueryBuilder addIds(String... ids){  values.addAll(Arrays.asList(ids));  return this;}  }
class C{  public static Object moveObject(Address toAddress,Object fromObj,int numBytes,RVMClass type){  return JavaHeader.moveObject(toAddress,fromObj,numBytes,type);}  }
class C{  private static String doSubstringConversion(final SubstringConversionFormatterDetails details,final String text){  String convertedText=text;  try {    final String input=extractValueForConversion(details,convertedText);    final String output=convertText(details.getFormat(),input);    convertedText=replaceTextAndTags(details,convertedText,input,output);  } catch (  ConversionException e) {  }  return convertedText;}  }
class C{  public TestConfiguration(String testDirectory,String testScript,String[] outputFiles){  this.testDirectory=testDirectory;  this.testScript=testScript;  this.outputFiles=outputFiles;}  }
class C{  protected List<BeanPropertyWriter> findBeanProperties(SerializationConfig config,BasicBeanDescription beanDesc) throws JsonMappingException {  List<BeanPropertyDefinition> properties=beanDesc.findProperties();  AnnotationIntrospector intr=config.getAnnotationIntrospector();  removeIgnorableTypes(config,beanDesc,properties);  if (config.isEnabled(SerializationConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {    removeSetterlessGetters(config,beanDesc,properties);  }  if (properties.isEmpty()) {    return null;  }  boolean staticTyping=usesStaticTyping(config,beanDesc,null,null);  PropertyBuilder pb=constructPropertyBuilder(config,beanDesc);  ArrayList<BeanPropertyWriter> result=new ArrayList<BeanPropertyWriter>(properties.size());  TypeBindings typeBind=beanDesc.bindingsForBeanType();  for (  BeanPropertyDefinition property : properties) {    AnnotatedMember accessor=property.getAccessor();    AnnotationIntrospector.ReferenceProperty prop=intr.findReferenceType(accessor);    if (prop != null && prop.isBackReference()) {      continue;    }    String name=property.getName();    if (accessor instanceof AnnotatedMethod) {      result.add(_constructWriter(config,typeBind,pb,staticTyping,name,(AnnotatedMethod)accessor));    } else {      result.add(_constructWriter(config,typeBind,pb,staticTyping,name,(AnnotatedField)accessor));    }  }  return result;}  }
class C{  public PlayingController(Game game,Connector connector){  super(new GameCursor(game,GameCursor.Mode.MakeMovesOnMasterSetCursorToLast),connector);  cursor=(GameCursor)getGame();  if (StringUtils.equalsIgnoreCase(game.getHeader(PgnHeader.White),connector.getUserName())) {    isUserWhite=true;  } else   if (StringUtils.equalsIgnoreCase(game.getHeader(PgnHeader.Black),connector.getUserName())) {    isUserWhite=false;  } else {    throw new IllegalArgumentException("Could not deterimne user color " + connector.getUserName() + " "+ game.getHeader(PgnHeader.White)+ " "+ game.getHeader(PgnHeader.Black));  }  if (LOG.isDebugEnabled()) {    LOG.debug("isUserWhite=" + isUserWhite);  }}  }
class C{  private void saveTrustedHost(String fingerprint) throws IOException {  this.fingerprint=fingerprint;  logger.warn("Adding %s as known and trusted certificate for %s.",fingerprint,serverId);  createKnownCertFileIfNotExists();  assertKnownHostFileWritable();  BufferedWriter writer=new BufferedWriter(new FileWriter(knownHosts,true));  writer.write(serverId + " " + this.fingerprint);  writer.newLine();  writer.close();}  }
class C{  public void testLongMissingLast() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",-1));  doc.add(newStringField("value","-1",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",4));  doc.add(newStringField("value","4",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  SortField sortField=new SortField("value",SortField.Type.LONG);  sortField.setMissingValue(Long.MAX_VALUE);  Sort sort=new Sort(sortField);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));  ir.close();  dir.close();}  }
class C{  private Object init() throws PageException {  return init(new Object[0]);}  }
class C{  public TIntLongIterator(TIntLongHashMap map){  super(map);  _map=map;}  }
class C{  public static Character toCharacter(char c){  return new Character(toCharValue(c));}  }
class C{  public AbstractFloatList partFromTo(int from,int to){  if (size == 0)   return new FloatArrayList(0);  checkRangeFromTo(from,to,size);  float[] part=new float[to - from + 1];  System.arraycopy(elements,from,part,0,to - from + 1);  return new FloatArrayList(part);}  }
class C{  public void notationDecl(StylesheetHandler handler,String name,String publicId,String systemId){}  }
class C{  public SelectItem(){  super();}  }
class C{  static public void assertSameSolutions(final IBindingSet[] expected,final IAsynchronousIterator<IBindingSet[]> itr){  try {    int n=0;    while (itr.hasNext()) {      final IBindingSet[] e=itr.next();      if (log.isInfoEnabled())       log.info(n + " : chunkSize=" + e.length);      for (int i=0; i < e.length; i++) {        if (log.isInfoEnabled())         log.info(n + " : " + e[i]);        if (n >= expected.length) {          fail("Willing to deliver too many solutions: n=" + n + " : "+ e[i]);        }        if (!expected[n].equals(e[i])) {          fail("n=" + n + ", expected="+ expected[n]+ ", actual="+ e[i]);        }        n++;      }    }    assertEquals("Wrong number of solutions",expected.length,n);  }  finally {    itr.close();  }}  }
class C{  public static int lastIndexOf(String orig,String subString,int start){  int count=orig.length();  int subCount=subString.length();  if (subCount <= count && start >= 0) {    if (subCount > 0) {      if (start > count - subCount) {        start=count - subCount;      }      char[] target=subString.toCharArray();      int subOffset=0;      char firstChar=target[subOffset];      int end=subOffset + subCount;      while (true) {        int i=orig.lastIndexOf(firstChar,start);        if (i == -1) {          return -1;        }        int o1=i, o2=subOffset;        while (++o2 < end && orig.charAt(++o1) == target[o2]) {        }        if (o2 == end) {          return i;        }        start=i - 1;      }    }    return start < count ? start : count;  }  return -1;}  }
class C{  public static void write(CharSequence from,File to,Charset charset) throws IOException {  asCharSink(to,charset).write(from);}  }
class C{  public void writeOperationsEngineFile(){  makeBackupFile(defaultOperationsFilename());  try {    if (!checkFile(defaultOperationsFilename())) {      java.io.File file=new java.io.File(defaultOperationsFilename());      java.io.File parentDir=file.getParentFile();      if (!parentDir.exists()) {        if (!parentDir.mkdir()) {          log.error("Directory wasn't created");        }      }      if (file.createNewFile()) {        log.debug("File created");      }    }    writeFile(defaultOperationsFilename());  } catch (  Exception e) {    log.error("Exception while writing the new CSV operations file, may not be complete: " + e);  }}  }
class C{  private double distance(double[] p){  double[] p_minus_a=minus(p,centroid);  double[] proj=project(p_minus_a,strongEigenvectors);  return euclideanLength(minusEquals(p_minus_a,proj));}  }
class C{  public void endDestroy(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(destroyInProgressId,-1);  int endDestroyId;  if (timedOut) {    endDestroyId=destroyTimedOutId;  } else   if (failed) {    endDestroyId=destroyFailedId;  } else {    endDestroyId=destroyId;  }  this.stats.incInt(endDestroyId,1);  this.stats.incLong(destroyDurationId,duration);}  }
class C{  public void initializeLocalComment(final List<IComment> comments){  m_node.getComments().initializeLocalCodeNodeComment(comments);}  }
class C{  @Override public void onTapCommand(int tapType,int x,int y,long eventTime){switch (tapType) {case TAP_TYPE_TOUCH:    break;case TAP_TYPE_TOUCH_CANCEL:  break;case TAP_TYPE_TAP:tapCount++;backgroundPaint.setColor(ContextCompat.getColor(getApplicationContext(),tapCount % 2 == 0 ? R.color.background : R.color.background2));break;}invalidate();}  }
class C{  public static <L extends Lock>boolean tryLockAll(long time,TimeUnit unit,L... locks) throws InterruptedException {  Deque<L> stack=new LinkedList<>();  boolean success=false;  try {    long limitNanos=unit.toNanos(time);    long startNanos=System.nanoTime();    for (    L lock : locks) {      long remainingNanos=!success ? limitNanos : limitNanos - (System.nanoTime() - startNanos);      success=lock.tryLock(remainingNanos,TimeUnit.NANOSECONDS);      if (success) {        stack.push(lock);      } else {        break;      }    }  } catch (  RuntimeException|InterruptedException e) {    unlockAll(stack);    throw e;  }  if (!success) {    unlockAll(stack);  }  return success;}  }
class C{  public void popCurrentMatched(){  m_currentMatchTemplates.pop();  m_currentMatchedNodes.pop();}  }
class C{  public Mul3(){  super("mul3",3);}  }
class C{  protected boolean mustResolveHref(){  KMLIcon icon=this.parent.getIcon();  if (icon == null || icon.getHref() == null)   return false;  return this.getImageSource() == null || icon.getUpdateTime() > this.iconRetrievalTime;}  }
class C{  public void store(Key key,PeerAddressDBItem dbi){  PeersSeeds keyEntries=null;  items.compute(key,null);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void testCommentParsing() throws Exception {  createTable("PERSON","(NAME VARCHAR(32), PERID VARCHAR(32))");  this.pstmt=this.conn.prepareStatement("SELECT NAME AS name2749_0_, PERID AS perid2749_0_ FROM PERSON WHERE PERID=? /*FOR UPDATE*/");}  }
class C{  public RectangleConstraint(Range w,double h){  this(0.0,w,LengthConstraintType.RANGE,h,null,LengthConstraintType.FIXED);}  }
class C{  public void printInstructions(){  printInstructionsToStream(System.out);}  }
class C{  public static String buildQueryString(boolean distinct,String tables,String[] columns,String where,String groupBy,String having,String orderBy,String limit){  if (TextUtils.isEmpty(groupBy) && !TextUtils.isEmpty(having)) {    throw new IllegalArgumentException("HAVING clauses are only permitted when using a groupBy clause");  }  if (!TextUtils.isEmpty(limit) && !sLimitPattern.matcher(limit).matches()) {    throw new IllegalArgumentException("invalid LIMIT clauses:" + limit);  }  StringBuilder query=new StringBuilder(120);  query.append("SELECT ");  if (distinct) {    query.append("DISTINCT ");  }  if (columns != null && columns.length != 0) {    appendColumns(query,columns);  } else {    query.append("* ");  }  query.append("FROM ");  query.append(tables);  appendClause(query," WHERE ",where);  appendClause(query," GROUP BY ",groupBy);  appendClause(query," HAVING ",having);  appendClause(query," ORDER BY ",orderBy);  appendClause(query," LIMIT ",limit);  return query.toString();}  }
class C{  public PendingResult<DataApi.DeleteDataItemsResult> onConfigurationDeleted(final long id){  if (mGoogleApiClient == null || !mGoogleApiClient.isConnected())   return null;  return Wearable.DataApi.deleteDataItems(mGoogleApiClient,id2Uri(id));}  }
class C{  public static int eval(String url,String text) throws IOException {  String returnValue=null;  if (url.startsWith("http:")) {    returnValue=doHttp(url,text);  } else   if (url.startsWith("bsh:")) {    returnValue=doBsh(url,text);  } else   throw new IOException("Unrecognized URL type." + "Scheme must be http:// or bsh://");  try {    return Integer.parseInt(returnValue);  } catch (  Exception e) {    return 0;  }}  }
class C{  public void testAddAll4(){  try {    LinkedBlockingQueue q=new LinkedBlockingQueue(1);    Integer[] ints=new Integer[SIZE];    for (int i=0; i < SIZE; ++i)     ints[i]=new Integer(i);    q.addAll(Arrays.asList(ints));    shouldThrow();  } catch (  IllegalStateException success) {  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.GENERATE___GENERATE_1:    setGenerate_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected void fireKNNsInserted(DBIDs insertions,DBIDs updates){  KNNChangeEvent e=new KNNChangeEvent(this,KNNChangeEvent.Type.INSERT,insertions,updates);  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == KNNListener.class) {      ((KNNListener)listeners[i + 1]).kNNsChanged(e);    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.373 -0500",hash_original_method="69D49227DB6AC5D384C2E3A710CB930F",hash_generated_method="0C9E256E310058EA1873381CA2B00688") private void relayoutMeasuredItem(View child){  final int w=child.getMeasuredWidth();  final int h=child.getMeasuredHeight();  final int childLeft=mListPadding.left;  final int childRight=childLeft + w;  final int childTop=child.getTop();  final int childBottom=childTop + h;  child.layout(childLeft,childTop,childRight,childBottom);}  }
class C{  public MapOptions mapMarker(boolean mapMarker){  this.mapMarker=mapMarker;  return this;}  }
class C{  public PE_Header(BinaryInputBuffer in) throws java.io.IOException, BinaryParseException {  Magic=in.readWORD();  MajorLinkerVersion=in.readBYTE();  MinorLinkerVersion=in.readBYTE();  SizeOfCode=in.readDWORD();  SizeOfInitializedData=in.readDWORD();  SizeOfUninitializedData=in.readDWORD();  AddressOfEntryPoint=in.readDWORD();  BaseOfCode=in.readDWORD();  if (Magic == PE32_MAGIC) {    BaseOfData=in.readDWORD();    ImageBase=in.readDWORD();    SectionAlignment=in.readDWORD();    FileAlignment=in.readDWORD();    MajorOperatingSystemVersion=in.readWORD();    MinorOperatingSystemVersion=in.readWORD();    MajorImageVersion=in.readWORD();    MinorImageVersion=in.readWORD();    MajorSubsystemVersion=in.readWORD();    MinorSubsystemVersion=in.readWORD();    Win32VersionValue=in.readDWORD();    SizeOfImage=in.readDWORD();    SizeOfHeaders=in.readDWORD();    CheckSum=in.readDWORD();    Subsystem=in.readWORD();    DllCharacteristics=in.readWORD();    SizeOfStackReserve=in.readDWORD();    SizeOfStackCommit=in.readDWORD();    SizeOfHeapReserve=in.readDWORD();    SizeOfHeapCommit=in.readDWORD();    LoaderFlags=in.readDWORD();    NumberOfRvaAndSizes=in.readDWORD();  } else   if (Magic == PE32_PLUS_MAGIC) {    ImageBase=in.readDDWORD();    SectionAlignment=in.readDWORD();    FileAlignment=in.readDWORD();    MajorOperatingSystemVersion=in.readWORD();    MinorOperatingSystemVersion=in.readWORD();    MajorImageVersion=in.readWORD();    MinorImageVersion=in.readWORD();    MajorSubsystemVersion=in.readWORD();    MinorSubsystemVersion=in.readWORD();    Win32VersionValue=in.readDWORD();    SizeOfImage=in.readDWORD();    SizeOfHeaders=in.readDWORD();    CheckSum=in.readDWORD();    Subsystem=in.readWORD();    DllCharacteristics=in.readWORD();    SizeOfStackReserve=in.readDDWORD();    SizeOfStackCommit=in.readDDWORD();    SizeOfHeapReserve=in.readDDWORD();    SizeOfHeapCommit=in.readDDWORD();    LoaderFlags=in.readDWORD();    NumberOfRvaAndSizes=in.readDWORD();  } else   throw new BinaryParseException("PE_Header: Invalid magic number");  DataDirectory=new ImageDataDirectory[(int)NumberOfRvaAndSizes];  for (int i=0; i < NumberOfRvaAndSizes; i++)   DataDirectory[i]=new ImageDataDirectory(in);}  }
class C{  private void checkAlterPeriodConverters() throws SecurityException {  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkPermission(new JodaTimePermission("ConverterManager.alterPeriodConverters"));  }}  }
class C{  private boolean alreadyListening(final INaviView view){  return viewOpenCount(view) > 0;}  }
class C{  private void createDirtyRegion(final DocumentChangeEvent event){  if (event.getLength() == 0 && event.getText() != null) {    dirtyRegionQueue.addDirtyRegion(new DirtyRegion(event.getOffset(),event.getText().length(),DirtyRegion.INSERT,event.getText()));  } else   if (event.getText() == null || event.getText().length() == 0) {    dirtyRegionQueue.addDirtyRegion(new DirtyRegion(event.getOffset(),event.getLength(),DirtyRegion.REMOVE,null));  } else {    dirtyRegionQueue.addDirtyRegion(new DirtyRegion(event.getOffset(),event.getLength(),DirtyRegion.REMOVE,null));    dirtyRegionQueue.addDirtyRegion(new DirtyRegion(event.getOffset(),event.getText().length(),DirtyRegion.INSERT,event.getText()));  }}  }
class C{  protected void createPerfDataBuffer(ByteBuffer bb,int lvmid) throws MonitorException {  int majorVersion=AbstractPerfDataBufferPrologue.getMajorVersion(bb);  int minorVersion=AbstractPerfDataBufferPrologue.getMinorVersion(bb);  String classname="sun.jvmstat.perfdata.monitor.v" + majorVersion + "_"+ minorVersion+ ".PerfDataBuffer";  try {    Class<?> implClass=Class.forName(classname);    Constructor cons=implClass.getConstructor(new Class[]{Class.forName("java.nio.ByteBuffer"),Integer.TYPE});    impl=(PerfDataBufferImpl)cons.newInstance(new Object[]{bb,new Integer(lvmid)});  } catch (  ClassNotFoundException e) {    throw new IllegalArgumentException("Could not find " + classname + ": "+ e.getMessage(),e);  }catch (  NoSuchMethodException e) {    throw new IllegalArgumentException("Expected constructor missing in " + classname + ": "+ e.getMessage(),e);  }catch (  IllegalAccessException e) {    throw new IllegalArgumentException("Unexpected constructor access in " + classname + ": "+ e.getMessage(),e);  }catch (  InstantiationException e) {    throw new IllegalArgumentException(classname + "is abstract: " + e.getMessage(),e);  }catch (  InvocationTargetException e) {    Throwable cause=e.getCause();    if (cause instanceof MonitorException) {      throw (MonitorException)cause;    }    throw new RuntimeException("Unexpected exception: " + e.getMessage(),e);  }}  }
class C{  public boolean isUnshared(){  return unshared;}  }
class C{  public Enumeration<Object> allowed(){  return m_Allowed.keys();}  }
class C{  protected void createGIFFile(int distance,int max,int[] post_dist,int[] post_height){  int box_height_buffer=20;  int gif_height_buffer=20;  int gif_width_buffer=20;  int text_width=100;  int box_height=max + (box_height_buffer * 2);  int box_width=distance;  int gif_height=box_height + (gif_height_buffer * 2);  int gif_width=box_width + (gif_width_buffer * 2) + text_width;  AcmeGifFormatter formatter=new AcmeGifFormatter();  java.awt.Graphics graphics=formatter.getGraphics(gif_width,gif_height);  Color gray50=new Color(128,128,128);  Color gray90=new Color(230,230,230);  Debug.message("terrain","ProfileGenerator gif creation: drawing boundaries");  graphics.setColor(gray90);  graphics.fillRect(0,0,gif_width,gif_height);  graphics.setColor(gray50);  graphics.fillRect(gif_width_buffer,gif_height_buffer,box_width,box_height);  Debug.message("terrain","ProfileGenerator gif creation: drawing edges");  graphics.setColor(Color.black);  graphics.drawRect(0,0,gif_width - 1,gif_height - 1);  graphics.drawRect(gif_width_buffer,gif_height_buffer,box_width,box_height);  graphics.setColor(Color.yellow);  graphics.drawLine(gif_width_buffer + 1,gif_height_buffer + box_height - box_height_buffer,gif_width_buffer + box_width - 1,gif_height_buffer + box_height - box_height_buffer);  graphics.setColor(Color.black);  FontMetrics f=graphics.getFontMetrics();  Debug.message("terrain","ProfileGenerator gif creation: drawing level lines");  for (int i=1; i < 9; i++) {    graphics.drawLine(gif_width_buffer,gif_height_buffer + box_height - box_height_buffer - (max * i / 8),gif_width_buffer + box_width + 5,gif_height_buffer + box_height - box_height_buffer - (max * i / 8));    int meters=max * i / 8;    int feet=(int)(meters * 3.2);    String lineLabel=meters + "m / " + feet+ "ft";    graphics.drawString(lineLabel,gif_width_buffer + box_width + 10,gif_height_buffer + box_height - box_height_buffer - (max * i / 8) + (f.getAscent() / 2));  }  int total_distance=0;  Debug.message("terrain","ProfileGenerator gif creation: drawing profile");  graphics.setColor(Color.red);  for (int i=1; i < post_height.length; i++) {    graphics.drawLine(gif_width_buffer + total_distance,gif_height_buffer + box_height - box_height_buffer - post_height[i - 1],gif_width_buffer + post_dist[i] + total_distance,gif_height_buffer + box_height - box_height_buffer - post_height[i]);    total_distance+=post_dist[i];  }  javax.swing.ImageIcon ii=new javax.swing.ImageIcon(formatter.getBufferedImage());  javax.swing.JFrame jf=com.bbn.openmap.util.PaletteHelper.getPaletteWindow(new javax.swing.JLabel(ii),"Path Profile",(ComponentListener)null);  jf.setVisible(true);}  }
class C{  public int read(char[] cbuf,int off,int len) throws IOException {  return internalIn.read(cbuf,off,len);}  }
class C{  public Point createPoint(CoordinateSequence coordinates){  return new Point(coordinates,this);}  }
class C{  public static boolean pointInView(View v,float localX,float localY,float slop){  return localX >= -slop && localY >= -slop && localX < (v.getWidth() + slop) && localY < (v.getHeight() + slop);}  }
class C{  public Ellipsoid(String name,double radius,double eccsq){  this(name,radius,eccsq,Double.NaN,Double.NaN);}  }
class C{  public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=input.getBytes(Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  public static int countBits(byte[] data){  int count=0;  for (  byte x : data) {    count+=Integer.bitCount(x & 255);  }  return count;}  }
class C{  protected int nextInContent() throws IOException, XMLException {switch (current) {case -1:    return LexicalUnits.EOF;case '&':  return readReference();case '<':switch (nextChar()) {case '?':  context=PI_CONTEXT;return readPIStart();case '!':switch (nextChar()) {case '-':return readComment();case '[':context=CDATA_SECTION_CONTEXT;return readIdentifier("CDATA[",LexicalUnits.CDATA_START,-1);default :throw createXMLException("invalid.character");}case '/':nextChar();context=END_TAG_CONTEXT;return readName(LexicalUnits.END_TAG);default :depth++;context=START_TAG_CONTEXT;return readName(LexicalUnits.START_TAG);}default :loop: for (; ; ) {switch (current) {default :nextChar();break;case -1:case '&':case '<':break loop;}}return LexicalUnits.CHARACTER_DATA;}}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.OCTAL_INT_LITERAL;}  }
class C{  public boolean hasUTF16LEBom(){  if (buffer.length >= 2)   return (buffer[0] == -1 && buffer[1] == -2); else   return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void assertEquals(String message,String expected,String actual){  if (expected == null && actual == null) {    return;  } else   if (expected == null || actual == null) {    fail("Expected: " + expected + " Actual: "+ actual+ " "+ message);  } else   if (!expected.equals(actual)) {    int al=expected.length();    int bl=actual.length();    for (int i=0; i < expected.length(); i++) {      String s=expected.substring(0,i);      if (!actual.startsWith(s)) {        expected=expected.substring(0,i) + "<*>" + expected.substring(i);        if (al > 20) {          expected="@" + i + " "+ expected;        }        break;      }    }    if (al > 4000) {      expected=expected.substring(0,4000);    }    if (bl > 4000) {      actual=actual.substring(0,4000);    }    fail("Expected: " + expected + " ("+ al+ ") actual: "+ actual+ " ("+ bl+ ") "+ message);  }}  }
class C{  @SuppressWarnings({"unchecked"}) @Nullable public <T>T readValue(@Nullable String spaceName,SwapKey key,@Nullable ClassLoader ldr) throws IgniteCheckedException {  assert key != null;  return unmarshal(read(spaceName,key,ldr),ldr);}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  public RandomPairs generateDistinctPairsOfRandomSets(int n1,int n2,int p1,int p2,int N){  RandomPairs randPairs=new RandomPairs(n1,n2,p1,p2,N);  int numOfPossibleSets1, numOfPossibleSets2;  try {    numOfPossibleSets1=MathsUtils.numOfSets(n1,p1);  } catch (  Exception e) {    numOfPossibleSets1=Integer.MAX_VALUE;  }  try {    numOfPossibleSets2=MathsUtils.numOfSets(n2,p2);  } catch (  Exception e) {    numOfPossibleSets2=Integer.MAX_VALUE;  }  int[][] sets1=generateDistinctRandomSets(n1,p1,N);  int[][] sets2=generateDistinctRandomSets(n2,p2,N);  if ((numOfPossibleSets1 < N) || (numOfPossibleSets2 < N)) {    long totalPossiblePairs=numOfPossibleSets1 * numOfPossibleSets2;    if (totalPossiblePairs < N) {      randPairs.sets1=new int[(int)totalPossiblePairs][];      randPairs.sets2=new int[(int)totalPossiblePairs][];      int pairIndex=0;      for (int i1=0; i1 < sets1.length; i1++) {        for (int i2=0; i2 < sets2.length; i2++) {          randPairs.sets1[pairIndex]=sets1[i1];          randPairs.sets2[pairIndex]=sets2[i2];          pairIndex++;        }      }    } else {      randPairs.sets1=new int[N][];      randPairs.sets2=new int[N][];      HashSet<Vector<Integer>> alreadyChosen=new HashSet<Vector<Integer>>();      for (int i=0; i < N; i++) {        for (; ; ) {          Vector<Integer> candidate=new Vector<Integer>();          int candidate1=random.nextInt(sets1.length);          int candidate2=random.nextInt(sets2.length);          candidate.clear();          candidate.add(candidate1);          candidate.add(candidate2);          if (!alreadyChosen.contains(candidate)) {            randPairs.sets1[i]=sets1[candidate1];            randPairs.sets2[i]=sets2[candidate2];            alreadyChosen.add(candidate);            break;          }        }      }    }  } else {    randPairs.sets1=sets1;    randPairs.sets2=sets2;  }  return randPairs;}  }
class C{  private boolean isColorChanged(double minValue,double maxValue){  DimensionConfigData dimensionConfigData=engine.getPlotInstance().getPlotData().getDimensionConfigData(engine.getPlotInstance().getMasterPlotConfiguration().getDefaultDimensionConfigs().get(PlotDimension.COLOR));  if (dimensionConfigData != null && dimensionConfigData.getColorProvider() instanceof ContinuousColorProvider) {    ContinuousColorProvider colProv=(ContinuousColorProvider)dimensionConfigData.getColorProvider();    if (colProv.isColorMinMaxValueDifferentFromOriginal(minValue,maxValue)) {      return true;    }  }  return false;}  }
class C{  @Override public void unwrapSSLv2(byte[] bytes){  unexpectedMessage();}  }
class C{  public Entity copyInto(Entity entity){  EntityContextState ecs1=beginLoading();  EntityContextState ecs2=entity.getEntityContext().beginLoading();  try {    if (entity.getEntityContext() == this) {      throw new IllegalStateException("Cannot copy entity into same context");    }    Entity ours=null;    if (entity.getUuid() != null) {      ours=getEntityByUuid(entity.getUuid(),false);    }    if (ours == null && entity.getKey().getValue() != null) {      ours=getEntity(entity.getEntityType(),entity.getKey().getValue(),false);    }    if (ours == null) {      ours=new Entity(this,entity);      add(ours);      ours.setEntityState(entity.getEntityState());    }    for (    ValueNode valueNode : entity.getChildren(ValueNode.class)) {      ours.getChild(valueNode.getName(),ValueNode.class).setValueNoEvent(valueNode.getValue());    }    for (    RefNode refNode : entity.getChildren(RefNode.class)) {      Entity refEntity=refNode.getReference();      if (refEntity.getKey().getValue() != null) {        Entity ourRefEntity=getEntity(refNode.getEntityType(),refEntity.getKey().getValue(),false);        if (ourRefEntity == null) {          ourRefEntity=newEntity(refNode.getEntityType(),refEntity.getKey().getValue(),refEntity.getConstraints());        }        ours.getChild(refNode.getName(),RefNode.class).setReference(ourRefEntity);      }    }    return ours;  }  finally {    entity.getEntityContext().endLoading(ecs2);    endLoading(ecs1);  }}  }
class C{  @Override public String firstChunk(List<String> chunks){  if (chunks == null || chunks.size() == 0) {    return null;  }  return chunks.get(0);}  }
class C{  private static String doGetFullPath(String filename,boolean includeSeparator){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  if (prefix >= filename.length()) {    if (includeSeparator) {      return getPrefix(filename);    } else {      return filename;    }  }  int index=indexOfLastSeparator(filename);  if (index < 0) {    return filename.substring(0,prefix);  }  int end=index + (includeSeparator ? 1 : 0);  if (end == 0) {    end++;  }  return filename.substring(0,end);}  }
class C{  public static String readStream(InputStream inputStream) throws IOException {  if (inputStream == null) {    return null;  }  ByteArrayOutputStream bout=new ByteArrayOutputStream();  byte[] buf=new byte[8192];  int r;  while ((r=inputStream.read(buf)) != -1) {    bout.write(buf,0,r);  }  return bout.toString("UTF-8");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.451 -0500",hash_original_method="A67B583D0E7AD982D1504BFCE2629D2E",hash_generated_method="FF4C9CE0D607B3031AB0E0754CA3230A") public void put(long key,E value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~binarySearch(mKeys,0,mSize,key);    }    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealIntArraySize(mSize + 1);      long[] nkeys=new long[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  private List<ClusterNode> nodes(List<List<ClusterNode>> assignments,int part){  return assignments.get(part);}  }
class C{  private static BigInteger gcd(BigInteger n,BigInteger d){  BigInteger n1=n;  BigInteger n2=d;  BigInteger gcd=BigInteger.ONE;  for (BigInteger k=BigInteger.ONE; k.compareTo(n1) <= 0 && k.compareTo(n2) <= 0; k=k.add(BigInteger.ONE)) {    if (n1.remainder(k).compareTo(BigInteger.ZERO) == 0 && n2.remainder(k).compareTo(BigInteger.ZERO) == 0)     gcd=k;  }  return gcd;}  }
class C{  public static void main(String[] args) throws Throwable {  StdOutErrLog.tieSystemOutAndErrToLog();  logger.debug("PID: " + System.getenv().get("JVM_PID"));  logger.info("Child starting with classpath: {}",System.getProperty("java.class.path"));  String appPath=System.getProperty(PROP_APP_PATH);  if (appPath == null) {    logger.error("{} not set in container environment.",PROP_APP_PATH);    System.exit(1);  }  int exitStatus=1;  RecoverableRpcProxy rpcProxy=new RecoverableRpcProxy(appPath,new Configuration());  final StreamingContainerUmbilicalProtocol umbilical=rpcProxy.getProxy();  final String childId=System.getProperty(StreamingApplication.DT_PREFIX + "cid");  try {    StreamingContainerContext ctx=umbilical.getInitContext(childId);    StreamingContainer stramChild=new StreamingContainer(childId,umbilical);    logger.debug("Container Context = {}",ctx);    stramChild.setup(ctx);    try {      stramChild.heartbeatLoop();      exitStatus=0;    }  finally {      stramChild.teardown();    }  } catch (  Error error) {    logger.error("Fatal error in container!",error);    String msg=ExceptionUtils.getStackTrace(error);    umbilical.reportError(childId,null,"FATAL: " + msg);  }catch (  Exception exception) {    logger.error("Fatal exception in container!",exception);    String msg=ExceptionUtils.getStackTrace(exception);    umbilical.reportError(childId,null,msg);  } finally {    rpcProxy.close();    DefaultMetricsSystem.shutdown();    logger.info("Exit status for container: {}",exitStatus);    LogManager.shutdown();  }  if (exitStatus != 0) {    System.exit(exitStatus);  }}  }
class C{  public Properties load(final InputStream inputStream) throws IOException {  Validate.notNull(inputStream);  final String rawContent=IOUtils.toString(inputStream,CharEncoding.UTF_8);  parseProperties(rawContent.replaceAll(REGEX_COMMENTS,""));  return this.properties;}  }
class C{  public Observable<RxCameraData> periodicDataRequest(long intervalMills){  return new PeriodicDataRequest(rxCamera,intervalMills).get();}  }
class C{  private static Pair<String,String> offsetReg(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2){  final String address=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,registerNodeValue2,dw,tmpVar1));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar1,dw,dWordBitMask,dw,address));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public static String rest(String s){  return s.substring(1);}  }
class C{  public boolean isInConflict() throws UnknownHostException {  checkNodeStatusData();  return isInConflict;}  }
class C{  public void useImageCoords(){  if (decimalCoords != null) {    Log.d(TAG,"Decimal coords of image: " + decimalCoords);    if (imageObj.imageCoordsExists) {      double decLongitude=imageObj.getDecLongitude();      double decLatitude=imageObj.getDecLatitude();      app.cacheData.setQtPoint(decLongitude,decLatitude);    }    MwVolleyApi apiCall=new MwVolleyApi(this);    List displayCatList=app.cacheData.findCategory();    boolean catListEmpty=displayCatList.isEmpty();    if (catListEmpty) {      cacheFound=false;      apiCall.request(decimalCoords);      Log.d(TAG,"displayCatList size 0, calling MWAPI" + displayCatList.toString());    } else {      cacheFound=true;      Log.d(TAG,"Cache found, setting categoryList in MwVolleyApi to " + displayCatList.toString());      MwVolleyApi.setGpsCat(displayCatList);    }  }}  }
class C{  private boolean waitForCache(){  GemFireCacheImpl c;  long tilt=System.currentTimeMillis() + MAX_CACHE_WAIT * 1000;  for (; ; ) {    if (quitting()) {      logger.warn(LocalizedMessage.create(LocalizedStrings.CacheClientUpdater_0_ABANDONED_WAIT_DUE_TO_CANCELLATION,this));      return false;    }    if (!this.connected) {      logger.warn(LocalizedMessage.create(LocalizedStrings.CacheClientUpdater_0_ABANDONED_WAIT_BECAUSE_IT_IS_NO_LONGER_CONNECTED,this));      return false;    }    if (System.currentTimeMillis() > tilt) {      logger.warn(LocalizedMessage.create(LocalizedStrings.CacheClientUpdater_0_WAIT_TIMED_OUT_MORE_THAN_1_SECONDS,new Object[]{this,MAX_CACHE_WAIT}));      return false;    }    c=GemFireCacheImpl.getInstance();    if (c != null && !c.isClosed()) {      break;    }    boolean interrupted=Thread.interrupted();    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {      interrupted=true;    } finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }  this.cache=c;  this.cacheHelper=new CachedRegionHelper(c);  return true;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void updateActionBarTitleAndTopic(){  setTitle();  setTopic();}  }
class C{  public void runTest() throws Throwable {  Document doc;  String documentName;  doc=(Document)load("hc_staff",false);  documentName=doc.getNodeName();  assertEquals("documentNodeName","#document",documentName);}  }
class C{  public static void d(String msg){  if (BuildConfig.DEBUG)   android.util.Log.d(TAG,buildMessage(msg));}  }
class C{  protected void startUnderlying() throws Exception {  startGridWithIgfs(GRID_NAME,IGFS_NAME,PRIMARY,null,SECONDARY_REST_CFG,secondaryIpFinder);}  }
class C{  private <T>PubsubFuture<T> post(final String operation,final String path,final Object payload,final Class<T> responseClass){  return request(operation,HttpMethod.POST,path,responseClass,payload);}  }
class C{  @Timed @ExceptionMetered @Path("expiring/{time}") @GET @Produces(APPLICATION_JSON) public Iterable<String> secretListingExpiring(@Auth AutomationClient automationClient,@PathParam("time") Long time){  List<SanitizedSecret> secrets=secretController.getSanitizedSecrets(time,null);  return secrets.stream().map(null).collect(toList());}  }
class C{  public XmlTextParser(){  m_text=null;  m_pos=-1;}  }
class C{  public DistinguishedNameException(){  super("The distinguished name is already in use by a different organization.");}  }
class C{  @Override public void write(int value){  digest.update((byte)value);}  }
class C{  public static <T>T splitEachLine(URL self,String regex,String charset,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return IOGroovyMethods.splitEachLine(newReader(self,charset),regex,closure);}  }
class C{  public static void checkEMail(String emailAddress) throws InvalidEmailException {  if (emailAddress == null) {    throw new InvalidEmailException("No email provided");  }  try {    InternetAddress iNetAddress=new InternetAddress(emailAddress);    iNetAddress.validate();  } catch (  Exception ex) {    throw new InvalidEmailException(ex.getMessage(),ex);  }}  }
class C{  public static boolean isEmergencyNumber(String number,String defaultCountryIso){  return isEmergencyNumberInternal(number,defaultCountryIso,true);}  }
class C{  private String createString(String f){  StringBuilder sb=new StringBuilder();  sb.append("format=" + cudaResourceViewFormat.stringFor(format) + f);  sb.append("width=" + width + f);  sb.append("height=" + height + f);  sb.append("depth=" + depth + f);  sb.append("firstMipmapLevel=" + firstMipmapLevel + f);  sb.append("lastMipmapLevel=" + lastMipmapLevel + f);  sb.append("firstLayer=" + firstLayer + f);  sb.append("lastLayer=" + lastLayer + f);  return sb.toString();}  }
class C{  public Allele(SequenceNameLocus locus,byte[] nt){  this(locus.getSequenceName(),locus.getStart(),locus.getEnd(),nt);}  }
class C{  public static Logger.Factory noOpFactory(){  return NoOpLoggerFactory.instance();}  }
class C{  public void store(@Nonnull final String category,@Nonnull final Rule rule) throws NotificationStoreException {  Objects.requireNonNull(category);  Preconditions.checkArgument(!category.isEmpty(),"category cannot be empty");  Objects.requireNonNull(rule);  Preconditions.checkState(rule.isValid(),"rule is not valid");  final Optional<Context> fetchContext=fetchContext();  final MapUpdate op=new MapUpdate();  op.update(category,getUpdate(rule,fetchContext));  final UpdateMap.Builder builder=new UpdateMap.Builder(LOCATION,op);  if (fetchContext.isPresent()) {    builder.withContext(fetchContext.get());  }  LOGGER.debug("Storing key (async): {}",LOCATION);  try (Timer.Context context=storeTimer.time()){    client.executeAsync(builder.build());  } }  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "DefaultDataSource.gif",BeanVisual.ICON_PATH + "DefaultDataSource_animated.gif");}  }
class C{  public SampleTree(){  try {    for (    LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {      if ("Nimbus".equals(info.getName())) {        UIManager.setLookAndFeel(info.getClassName());        break;      }    }  } catch (  Exception ignored) {  }  JMenuBar menuBar=constructMenuBar();  JPanel panel=new JPanel(true);  frame=new JFrame("SampleTree");  frame.getContentPane().add("Center",panel);  frame.setJMenuBar(menuBar);  frame.setBackground(Color.lightGray);  DefaultMutableTreeNode root=createNewNode("Root");  treeModel=new SampleTreeModel(root);  tree=new JTree(treeModel);  ToolTipManager.sharedInstance().registerComponent(tree);  tree.setCellRenderer(new SampleTreeCellRenderer());  tree.setRowHeight(-1);  JScrollPane sp=new JScrollPane();  sp.setPreferredSize(new Dimension(300,300));  sp.getViewport().add(tree);  panel.setLayout(new BorderLayout());  panel.add("Center",sp);  panel.add("South",constructOptionsPanel());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.pack();  frame.setVisible(true);}  }
class C{  public ObjectFactory(){}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  @Override public void drawAdditionalObjectsOverPage(final int page,final int[] type,final Color[] colors,final Object[] obj) throws PdfException {  if (page == getPageNumber()) {    FXAdditionalData additionaValuesforPage=(FXAdditionalData)externalHandlers.getExternalHandler(Options.JavaFX_ADDITIONAL_OBJECTS);    if (additionaValuesforPage != null) {      additionaValuesforPage.setType(type);      additionaValuesforPage.setObj(obj);    } else {      final DynamicVectorRenderer currentDisplay=fileAccess.getDynamicRenderer();      currentDisplay.drawAdditionalObjectsOverPage(type,colors,obj);      pages.refreshDisplay();    }  }}  }
class C{  @Override public void requestLocationSuccess(String locationName){  weatherUtils.requestWeather(locationName,this);  location.realLocation=locationName;  DatabaseHelper.getInstance(this).insertLocation(location);}  }
class C{  public static String toString(byte[] input,String encoding) throws IOException {  return new String(input,Charsets.toCharset(encoding));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:30.280 -0500",hash_original_method="055C1CABEC6B90DB231CF8138F07B9C1",hash_generated_method="3B58C883A45626CCAC1720C76B088B94") @Override final public boolean equals(Object o){  return super.equals(o);}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case SGraphPackage.REGION__COMPOSITE:    return eInternalContainer().eInverseRemove(this,SGraphPackage.COMPOSITE_ELEMENT__REGIONS,CompositeElement.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  protected void updateAsync(KeyValPair<byte[],byte[]> tuple){  if (taskQueue.size() > taskBarrier) {    try {      logger.info("Queue Size: {}, wait time(milli-seconds): {}",taskQueue.size(),taskQueue.size() / taskBarrier);      Thread.sleep(taskQueue.size() / taskBarrier);    } catch (    Exception e) {    }  }{    Slice key=new Slice(tuple.getKey());    Future<Slice> task=store.getAsync(getTimeByKey(tuple.getKey()),key);    taskQueue.add(task);    taskToPair.put(task,tuple);  }  while (!taskQueue.isEmpty()) {    if (!taskQueue.peek().isDone()) {      break;    }    Future<Slice> task=taskQueue.poll();    insertValueToStore(taskToPair.remove(task));  }}  }
class C{  public static NBTTagCompound save(SharedStorage sharedStorage,NBTTagCompound nbt,boolean packet){  ResourceLocation type=SharedStorage.getStorageTypeID(sharedStorage.getClass());  if (type == null)   throw new RuntimeException("Shared storage type not mapped");  nbt.setString("type",type.toString());  nbt.setUniqueId("uuid",sharedStorage.getUUID());  if (packet) {    nbt.setTag("data",sharedStorage.writeToPacketNBT(new NBTTagCompound()));  } else {    nbt.setTag("data",sharedStorage.writeToNBT(new NBTTagCompound()));  }  return nbt;}  }
class C{  public void close(){  VirtualFile f=getVirtualFile();  if (f != null)   f.close();}  }
class C{  public void addAnnotation(final WorkflowAnnotation newAnnotation){  if (newAnnotation == null) {    throw new IllegalArgumentException("newAnnotation must not be null!");  }synchronized (lock) {    this.annotationsDrawOrder.add(newAnnotation);    this.annotationsEventOrder.add(0,newAnnotation);  }}  }
class C{  public long key(){  return _map._set[_index];}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void attributeAsClass(){  DataSortedTableModel model;  if (m_CurrentCol == -1) {    return;  }  model=(DataSortedTableModel)m_TableData.getModel();  if (model.getAttributeAt(m_CurrentCol) == null) {    return;  }  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  model.attributeAsClassAt(m_CurrentCol);  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  public NSObject put(String key,Object obj){  return put(key,NSObject.fromJavaObject(obj));}  }
class C{  public static String readFileContents(File file) throws IOException {  BufferedReader br=new BufferedReader(new FileReader(file));  StringBuilder sb=new StringBuilder((int)file.length());  try {    char[] buf=new char[4096];    int read;    while ((read=br.read(buf)) != -1) {      sb.append(buf,0,read);    }  }  finally {    br.close();  }  return sb.toString();}  }
class C{  private synchronized void processData(ArrayList rmtGrantors,ArrayList rmtGrantorVersions,ArrayList rmtGrantorSerialNumbers,ArrayList rmtNonGrantors,InternalDistributedMember rmtId){{    Iterator iterGrantorServices=rmtGrantors.iterator();    Iterator iterGrantorVersions=rmtGrantorVersions.iterator();    Iterator iterGrantorSerialNumbers=rmtGrantorSerialNumbers.iterator();    while (iterGrantorServices.hasNext()) {      String serviceName=(String)iterGrantorServices.next();      long versionId=((Long)iterGrantorVersions.next()).longValue();      int serialNumber=((Integer)iterGrantorSerialNumbers.next()).intValue();      GrantorInfo oldgi=(GrantorInfo)this.grantors.get(serviceName);      if (oldgi == null || oldgi.getVersionId() < versionId) {        this.grantors.put(serviceName,new GrantorInfo(rmtId,versionId,serialNumber,false));        this.crashedGrantors.remove(serviceName);      }    }  }{    Iterator it=rmtNonGrantors.iterator();    while (it.hasNext()) {      String serviceName=(String)it.next();      if (!this.grantors.containsKey(serviceName)) {        this.crashedGrantors.add(serviceName);      }    }  }}  }
class C{  private void adjustByteCounts(){  if (byteCount1 > 0x1fffffffffffffffL) {    byteCount2+=(byteCount1 >>> 61);    byteCount1&=0x1fffffffffffffffL;  }}  }
class C{  public static <V,V1 extends V,V2 extends V,V3 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2,String name3,V3 value3){  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2,name3,value3);}  }
class C{  private void dropDateMultTbl(DbConnection dbConn) throws Exception {  String tableName;  if (_logger.isDebugEnabled())   _logger.debug("dropDateMultTbl");  try {    tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.DATE_TIME);    DbTableFns.dropTable(dbConn,tableName);  } catch (  Exception e) {    _logger.error(e);  }}  }
class C{  public int increment(int offset){  CharSequence txt=getText();  int i;  if (txt != null) {    try {      i=Integer.parseInt(txt.toString());    } catch (    NumberFormatException e) {      i=0;    }  } else {    i=0;  }  i=i + offset;  setText(String.valueOf(i));  return i;}  }
class C{  private void makeUsersWithAuthSetupHelper() throws Throwable {  this.host.testStart(3);  AuthorizationSetupHelper.create().setHost(this.host).setUserEmail(this.adminUser).setUserPassword(this.adminUser).setIsAdmin(true).setCompletion(this.host.getCompletion()).start();  AuthorizationSetupHelper.create().setHost(this.host).setUserEmail(this.exampleUser).setUserPassword(this.exampleUser).setIsAdmin(false).setDocumentKind(Utils.buildKind(ExampleServiceState.class)).setCompletion(this.host.getCompletion()).start();  AuthorizationSetupHelper.create().setHost(this.host).setUserEmail(this.exampleWithManagementServiceUser).setUserPassword(this.exampleWithManagementServiceUser).setIsAdmin(false).setDocumentLink(ServiceHostManagementService.SELF_LINK).setCompletion(this.host.getCompletion()).start();  this.host.testWait();}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tSize of each subspace:\n" + "\t\t< 1: percentage of the number of attributes\n" + "\t\t>=1: absolute number of attributes\n","P",1,"-P"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public void terminateProcess(){  if (process != null) {    process.destroy();    process=null;  }}  }
class C{  private int indexOfSearchQuery(String displayName){  if (!TextUtils.isEmpty(mSearchTerm)) {    return displayName.toLowerCase(Locale.getDefault()).indexOf(mSearchTerm.toLowerCase(Locale.getDefault()));  }  return -1;}  }
class C{  public CholeskyDecomposition chol(){  return new CholeskyDecomposition(this);}  }
class C{  public synchronized void open(){}  }
class C{  public static BigInteger createBigInteger(String str){  if (str == null) {    return null;  }  return new BigInteger(str);}  }
class C{  private ZKLogMetadataForWriter(URI uri,String logName,String logIdentifier,Versioned<byte[]> maxLSSNData,Versioned<byte[]> maxTxIdData,Versioned<byte[]> allocationData){  super(uri,logName,logIdentifier);  this.maxLSSNData=maxLSSNData;  this.maxTxIdData=maxTxIdData;  this.allocationData=allocationData;}  }
class C{  public void onEvent(Event e){  if (e.getTarget() == bOk) {    String newText=text.getText();    if (newText == null)     newText="";    String oldText=m_attachment.getTextMsg();    if (oldText == null)     oldText="";    if (!m_change)     m_change=!newText.equals(oldText);    if (newText.length() > 0 || m_attachment.getEntryCount() > 0) {      if (m_change) {        m_attachment.setBinaryData(new byte[0]);        m_attachment.setTextMsg(text.getText());        m_attachment.saveEx();      }    } else     m_attachment.delete(true);    dispose();  } else   if (e.getTarget() == bCancel) {    dispose();  } else   if (e.getTarget() == bDeleteAll) {    deleteAttachment();    dispose();  } else   if (e.getTarget() == bDelete)   deleteAttachmentEntry(); else   if (e.getTarget() == cbContent)   displayData(cbContent.getSelectedIndex(),false); else   if (e.getTarget() == bLoad)   loadFile(); else   if (e.getTarget() == bSave)   saveAttachmentToFile(); else   if (e.getTarget() == bRefresh)   displayData(displayIndex,true); else   if (e.getTarget() instanceof Timer)   displayData(displayIndex,true);}  }
class C{  protected boolean isOnSameScreenAsChildren(){  return true;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public Email body(String body){  if (body == null)   throw new IllegalArgumentException("body == null");  this.body=body;  return this;}  }
class C{  public void doCopySnapshotsToTarget(URI storageURI,List<URI> snapshotList,TaskCompleter taskCompleter,String token){  WorkflowStepCompleter.stepExecuting(token);  StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageURI);  getDevice(storage).doCopySnapshotsToTarget(storage,snapshotList,taskCompleter);}  }
class C{  public void testSimple() throws Exception {  String cursorMark;  SolrParams params=null;  final String intsort="int" + (random().nextBoolean() ? "" : "_dv");  final String intmissingsort=defaultCodecSupportsMissingDocValues() ? intsort : "int";  cursorMark=CURSOR_MARK_START;  params=params("q","*:*","rows","4","fl","id","sort","id desc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==0","/response/start==0","/response/docs==[]");  assertEquals(CURSOR_MARK_START,cursorMark);  assertU(adoc("id","9","str","c","float","-3.2","int","42"));  assertU(adoc("id","7","str","c","float","-3.2","int","-1976"));  assertU(adoc("id","2","str","c","float","-3.2","int","666"));  assertU(adoc("id","0","str","b","float","64.5","int","-42"));  assertU(adoc("id","5","str","b","float","64.5","int","2001"));  assertU(adoc("id","8","str","b","float","64.5","int","4055"));  assertU(adoc("id","6","str","a","float","64.5","int","7"));  assertU(adoc("id","1","str","a","float","64.5","int","7"));  assertU(adoc("id","4","str","a","float","11.1","int","6"));  assertU(adoc("id","3","str","a","float","11.1"));  assertU(commit());  cursorMark=CURSOR_MARK_START;  params=params("q","id:9999999","rows","4","fl","id","sort","id desc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==0","/response/start==0","/response/docs==[]");  assertEquals(CURSOR_MARK_START,cursorMark);  cursorMark=CURSOR_MARK_START;  params=params("q","*:*","rows","0","fl","id","sort","id desc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[]");  assertEquals(CURSOR_MARK_START,cursorMark);  cursorMark=CURSOR_MARK_START;  params=params("q","-int:6","rows","4","fl","id","sort","id desc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==9","/response/start==0","/response/docs==[{'id':9},{'id':8},{'id':7},{'id':6}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==9","/response/start==0","/response/docs==[{'id':5},{'id':3},{'id':2},{'id':1}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==9","/response/start==0","/response/docs==[{'id':0}]");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==9","/response/start==0","/response/docs==[]"));  cursorMark=CURSOR_MARK_START;  params=params("q","float:[0 TO *] int:7 id:6","rows","4","fl","id","facet","true","facet.field","str","json.nl","map","sort","score desc, id desc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==7","/response/start==0","/response/docs==[{'id':6},{'id':1},{'id':8},{'id':5}]","/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==7","/response/start==0","/response/docs==[{'id':4},{'id':3},{'id':0}]","/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==7","/response/start==0","/response/docs==[]","/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}"));  cursorMark=CURSOR_MARK_START;  params=params("q","-int:2001 -int:4055","rows","3","fl","id","facet","true","facet.field","str","json.nl","map","sort",intsort + " asc, id asc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':7},{'id':0},{'id':3}]","/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':4},{'id':1},{'id':6}]","/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':9},{'id':2}]","/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[]","/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}"));  cursorMark=CURSOR_MARK_START;  params=params("q","-int:2001 -int:4055","rows","3","fl","id","json.nl","map","sort",intmissingsort + "_first asc, id asc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':3},{'id':7},{'id':0}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':4},{'id':1},{'id':6}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':9},{'id':2}]");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[]"));  cursorMark=CURSOR_MARK_START;  params=params("q","-int:2001 -int:4055","rows","3","fl","id","json.nl","map","sort",intmissingsort + "_last asc, id asc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':7},{'id':0},{'id':4}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':1},{'id':6},{'id':9}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':2},{'id':3}]");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[]"));  cursorMark=CURSOR_MARK_START;  params=params("q","*:*","rows","6","fl","id","sort","str asc, id desc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':6},{'id':4},{'id':3},{'id':1},{'id':8},{'id':5}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':0},{'id':9},{'id':7},{'id':2}]");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[]"));  cursorMark=CURSOR_MARK_START;  params=params("q","*:*","rows","2","fl","id","sort","float asc, " + intsort + " desc, id desc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':2},{'id':9}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':7},{'id':4}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':3},{'id':8}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':5},{'id':6}]");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':1},{'id':0}]");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[]"));  cursorMark=CURSOR_MARK_START;  params=params("q","id:3 id:7","rows","111","fl","id","sort",intsort + " asc, id asc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==2","/response/start==0","/response/docs==[{'id':7},{'id':3}]");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==2","/response/start==0","/response/docs==[]"));  SentinelIntSet ids;  ids=assertFullWalkNoDups(10,params("q","*:*","rows","4","sort","id desc"));  assertEquals(10,ids.size());  ids=assertFullWalkNoDups(9,params("q","*:*","rows","1","fq","-id:4","sort","id asc"));  assertEquals(9,ids.size());  assertFalse("matched on id:4 unexpectedly",ids.exists(4));  ids=assertFullWalkNoDups(9,params("q","*:*","rows","3","fq","-id:6","sort","float desc, id asc, " + intsort + " asc"));  assertEquals(9,ids.size());  assertFalse("matched on id:6 unexpectedly",ids.exists(6));  ids=assertFullWalkNoDups(9,params("q","float:[0 TO *] int:7 id:6","rows","3","sort","score desc, id desc"));  assertEquals(7,ids.size());  assertFalse("matched on id:9 unexpectedly",ids.exists(9));  assertFalse("matched on id:7 unexpectedly",ids.exists(7));  assertFalse("matched on id:2 unexpectedly",ids.exists(2));  cursorMark=CURSOR_MARK_START;  params=params("q","*:*","rows","2","fl","id","sort","str asc, id asc");  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==10","/response/start==0","/response/docs==[{'id':1},{'id':3}]");  assertU(delI("3"));  assertU(commit());  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==9","/response/start==0","/response/docs==[{'id':4},{'id':6}]");  assertU(delI("0"));  assertU(commit());  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':5},{'id':8}]");  assertU(adoc("id","5","str","c"));  assertU(commit());  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':2},{'id':5}]");  assertU(adoc("id","7","str","a"));  assertU(commit());  cursorMark=assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[{'id':9}]");  assertEquals(cursorMark,assertCursor(req(params,CURSOR_MARK_PARAM,cursorMark),"/response/numFound==8","/response/start==0","/response/docs==[]"));}  }
class C{  public final DD add(DD y){  return copy(this).selfAdd(y);}  }
class C{  public void update(Product product){  index(product);}  }
class C{  static byte[] combinedBufferToByteArray(DoublesSketch sketch,boolean ordered,boolean compact){  final int preLongs=2;  final int extra=2;  int preBytes=(preLongs + extra) << 3;  int flags=(ordered ? ORDERED_FLAG_MASK : 0) | (compact ? COMPACT_FLAG_MASK : 0);  int k=sketch.getK();  long n=sketch.getN();  double[] combinedBuffer=sketch.getCombinedBuffer();  double[] bbItemsArr=null;  final int bbCnt=Util.computeBaseBufferItems(k,n);  if (bbCnt > 0) {    bbItemsArr=new double[bbCnt];    System.arraycopy(combinedBuffer,0,bbItemsArr,0,bbCnt);    if (ordered) {      Arrays.sort(bbItemsArr);    }  }  byte[] outByteArr=null;  if (compact) {    final int retainedItems=sketch.getRetainedItems();    int outBytes=(retainedItems << 3) + preBytes;    outByteArr=new byte[outBytes];    Memory memOut=new NativeMemory(outByteArr);    long cumOffset=memOut.getCumulativeOffset(0L);    insertPre0(outByteArr,cumOffset,preLongs,flags,k);    insertN(outByteArr,cumOffset,n);    insertMinDouble(outByteArr,cumOffset,sketch.getMinValue());    insertMaxDouble(outByteArr,cumOffset,sketch.getMaxValue());    if (bbCnt > 0) {      memOut.putDoubleArray(preBytes,bbItemsArr,0,bbCnt);    }    long bits=sketch.getBitPattern();    if (bits != 0) {      long memOffset=preBytes + (bbCnt << 3);      int combBufOffset=2 * k;      while (bits != 0L) {        if ((bits & 1L) > 0L) {          memOut.putDoubleArray(memOffset,combinedBuffer,combBufOffset,k);          memOffset+=(k << 3);        }        combBufOffset+=k;        bits>>>=1;      }    }  } else {    final int totLevels=Util.computeNumLevelsNeeded(k,n);    int outBytes=(totLevels == 0) ? (bbCnt << 3) + preBytes : (((2 + totLevels) * k) << 3) + preBytes;    outByteArr=new byte[outBytes];    Memory memOut=new NativeMemory(outByteArr);    long cumOffset=memOut.getCumulativeOffset(0L);    insertPre0(outByteArr,cumOffset,preLongs,flags,k);    insertN(outByteArr,cumOffset,n);    insertMinDouble(outByteArr,cumOffset,sketch.getMinValue());    insertMaxDouble(outByteArr,cumOffset,sketch.getMaxValue());    if (bbCnt > 0) {      memOut.putDoubleArray(preBytes,bbItemsArr,0,bbCnt);    }    if (totLevels > 0) {      long memOffset=preBytes + ((2L * k) << 3);      int combBufOffset=2 * k;      memOut.putDoubleArray(memOffset,combinedBuffer,combBufOffset,totLevels * k);    }  }  return outByteArr;}  }
class C{  public void addAll(ExceptionSet other){  exceptionSet.or(other.exceptionSet);  explicitSet.or(other.explicitSet);  size=countBits(exceptionSet);  commonSupertype=null;}  }
class C{  public Builder trustCertificates(KeyStore trustStore) throws GeneralSecurityException {  SSLContext sslContext=SslUtils.getTlsSslContext();  SslUtils.initSslContext(sslContext,trustStore,SslUtils.getPkixTrustManagerFactory());  return setSocketFactory(new SSLSocketFactoryExtension(sslContext));}  }
class C{  protected Customer createCustomer(long id,String name,List<String> phoneNumbers,List<Address> addresses,ZonedDateTime dateTime,List<Order> orders){  final Customer customer=new Customer();  customer.setId(id);  customer.setName(name);  customer.setPhoneNumbers(phoneNumbers);  customer.setAddress(addresses);  customer.setDateTime(dateTime);  customer.setOrders(orders);  return customer;}  }
class C{  public static void main(String argv[]) throws internal_error, java.io.IOException, java.lang.Exception {  boolean did_output=false;  start_time=System.currentTimeMillis();  parse_args(argv);  if (print_progress)   System.err.println("Opening files...");  open_files();  prelim_end=System.currentTimeMillis();  if (print_progress)   System.err.println("Parsing specification from standard input...");  parse_grammar_spec();  parse_end=System.currentTimeMillis();  if (lexer.error_count == 0) {    if (print_progress)     System.err.println("Checking specification...");    check_unused();    check_end=System.currentTimeMillis();    if (print_progress)     System.err.println("Building parse tables...");    build_parser();    build_end=System.currentTimeMillis();    if (print_progress)     System.err.println("Writing parser...");    emit_parser();    did_output=true;    emit_end=System.currentTimeMillis();  } else {    emit_end=parse_end;  }  if (opt_dump_grammar)   dump_grammar();  if (opt_dump_states)   dump_machine();  if (opt_dump_tables)   dump_tables();  dump_end=System.currentTimeMillis();  if (print_progress)   System.err.println("Closing files...");  close_files();  if (!no_summary)   emit_summary(did_output);}  }
class C{  public static boolean isSupportedReplicationModeChange(VirtualPool currentVpool,VirtualPool newVpool,StringBuffer notSuppReasonBuff){  s_logger.info(String.format("Checking isSupportedReplicationModeChange from [%s] to [%s]...",currentVpool.getLabel(),newVpool.getLabel()));  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {    return false;  }  if (!VirtualPool.vPoolSpecifiesProtection(currentVpool) || !VirtualPool.vPoolSpecifiesProtection(newVpool)) {    notSuppReasonBuff.append(String.format("Replication Mode virtual pool change is not supported for target virtual pool %s.  Cannot modify the replication mode if both the source and target vpools do not specify RP protection.",newVpool.getLabel()));    s_logger.info(notSuppReasonBuff.toString());    return false;  }  String[] included=new String[]{RP_COPY_MODE};  if (analyzeChanges(currentVpool,newVpool,included,null,null).isEmpty()) {    notSuppReasonBuff.append(String.format("Replication Mode virtual pool change is not supported for target virtual pool %s. There is no change in replication mode.",newVpool.getLabel()));    s_logger.info(notSuppReasonBuff.toString());    return false;  }  List<String> excluded=new ArrayList<String>();  String[] exclude=new String[]{RP_COPY_MODE,RP_RPO_VALUE,RP_RPO_TYPE,PROTECTION_VARRAY_SETTINGS};  excluded.addAll(Arrays.asList(exclude));  excluded.addAll(Arrays.asList(GENERALLY_EXCLUDED));  Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,null,excluded.toArray(exclude),null);  if (!changes.isEmpty()) {    notSuppReasonBuff.append(String.format("These target virtual pool differences are invalid: "));    fillInNotSupportedReasons(changes,notSuppReasonBuff);    s_logger.info(String.format("Replication Mode virtual pool change not supported. %s. Parameters other than %s were changed.",notSuppReasonBuff.toString(),excluded.toString()));    return false;  }  return true;}  }
class C{  @Override public void write(final String filename){  writeV6(filename);}  }
class C{  public UTMPoint(double northing,double easting,int zone_number,char zone_letter){  this.northing=northing;  this.easting=easting;  this.zone_number=zone_number;  this.zone_letter=checkZone(zone_letter);}  }
class C{  @Override public String toString(){  return toString(new TreePath(this.model.getRoot()));}  }
class C{  public static void serialization(String filePath,Object obj){  ObjectOutputStream out=null;  try {    out=new ObjectOutputStream(new FileOutputStream(filePath));    out.writeObject(obj);    out.close();  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    IOUtils.close(out);  }}  }
class C{  public synchronized void seekToRow(int recordNumber) throws FormatException {  if (recordNumber <= 0) {    throw new IllegalArgumentException("DcwRecordFile: seekToRow(" + recordNumber + ","+ getRecordCount()+ ","+ filename+ ")");  }  if (recordNumber == cursorRow) {    return;  }  cursorRow=recordNumber;  int offset=0;  try {    if ((recordLength == -1) && (recordNumber != 1)) {      offset=vli().recordOffset(recordNumber);    } else {      offset=(recordLength * (recordNumber - 1)) + headerLength;    }    inputFile.seek(offset);  } catch (  IOException io) {    throw new FormatException("SeekToRow IOException " + io.getMessage() + " offset: "+ offset+ " "+ tablename+ " "+ filename);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.SIMPLE_QUANTIFIER__QUANTIFIER:    setQuantifier(QUANTIFIER_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public void print(PrintStream out){  for (Iterator<Character> i=cells.keySet().iterator(); i.hasNext(); ) {    Character ch=i.next();    Cell c=at(ch);    out.print("[" + ch + ":"+ c+ "]");  }  out.println();}  }
class C{  public ClassSignature parseClassSig(String s){  if (DEBUG)   System.out.println("Parsing class sig:" + s);  input=s.toCharArray();  return parseClassSignature();}  }
class C{  public void testMoveRenameFileSourceMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  create(igfs,paths(DIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  igfs.rename(FILE,FILE_NEW);  checkExist(igfs,SUBDIR);  checkExist(igfs,igfsSecondary,FILE_NEW);  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  public boolean isOpen(){  return getStopTimestamp() < 0;}  }
class C{  public ReverseStringFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void add(String category,String[] titles,double[] values){  mCategories.add(category);  mTitles.add(titles);  mValues.add(values);}  }
class C{  protected void doDrawOrderedRenderable(DrawContext dc){  if (dc.isPickingMode())   this.pickPoints(dc); else   this.drawPoints(dc);}  }
class C{  private long nextSeed(){  return seed+=gamma;}  }
class C{  private void updateGroupSources(List<String> batchList,List<Group> currentGroups) throws SQLException, AdeException {  PreparedStatement sourceListStatement=prepareStatement("SELECT SOURCES.SOURCE_INTERNAL_ID, SOURCES.SOURCE_ID FROM " + SOURCES_TABLE + " INNER JOIN "+ MANAGED_SYSTEMS_TABLE+ " ON SOURCES.SOURCE_INTERNAL_ID=MANAGED_SYSTEMS.SOURCE_INTERNAL_ID WHERE "+ "UPPER("+ MANAGED_SYSTEMS_TABLE+ ".OPERATING_SYSTEM)='LINUX' ",ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);  ResultSet sourcesResult=sourceListStatement.executeQuery();  updateGroupSources(currentGroups,sourcesResult,batchList);  sourcesResult.close();  sourceListStatement.close();}  }
class C{  public Bound<T> withoutValidation(){  return new Bound<>(name,filepattern,coder,false,compressionType);}  }
class C{  protected static DbClient createDbClient(){  ENCRYPTION_PROVIDER.setCoordinator(ModelTestSuite.getCoordinator());  DbClientContext localCtx=new DbClientContext();  localCtx.setClusterName("Test");  localCtx.setKeyspaceName("Test");  DbClientImpl dbClient=new DbClientImpl();  dbClient.setCoordinatorClient(ModelTestSuite.getCoordinator());  dbClient.setEncryptionProvider(ENCRYPTION_PROVIDER);  dbClient.setBypassMigrationLock(true);  dbClient.setDbVersionInfo(ModelTestSuite.getDbVersionInfo());  dbClient.setLocalContext(localCtx);  VdcUtil.setDbClient(dbClient);  dbClient.start();  return dbClient;}  }
class C{  public void addCertificatesAndCRLs(CertStore certStore) throws CertStoreException, CMSException {  certs.addAll(CMSUtils.getCertificatesFromStore(certStore));  crls.addAll(CMSUtils.getCRLsFromStore(certStore));}  }
class C{  public boolean functionAvailable(String methName){  Object tblEntry=m_functionID.get(methName);  if (null != tblEntry)   return true; else {    tblEntry=m_functionID_customer.get(methName);    return (null != tblEntry) ? true : false;  }}  }
class C{  public static void w(String tag,String msg){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  CharArraySetting(Properties defaultProps,Properties props,String key,char[] defaultValue){  super(defaultProps,props,key,new String(defaultValue));}  }
class C{  public WRecordAccessDialog(Window parent,int AD_Table_ID,int Record_ID){  super();  setTitle(Msg.translate(Env.getCtx(),"RecordAccessDialog"));  setAttribute("modal",Boolean.TRUE);  setBorder("normal");  setWidth("600px");  setSizable(true);  log.info("AD_Table_ID=" + AD_Table_ID + ", Record_ID="+ Record_ID);  m_AD_Table_ID=AD_Table_ID;  m_Record_ID=Record_ID;  try {    dynInit();    jbInit();  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  AEnv.showWindow(this);}  }
class C{  public static double sinQuick(double angle){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.sin(angle) : Math.sin(angle);  }  return cosTab[((int)(Math.abs(angle - Math.PI / 2) * SIN_COS_INDEXER + 0.5)) & (SIN_COS_TABS_SIZE - 2)];}  }
class C{  public void clearProgressListeners(){  progressSupport.clear();}  }
class C{  @Specialization protected Object assign(RAbstractStringVector xVec,Object value,REnvironment envir,byte inherits,@Cached("createBinaryProfile()") ConditionProfile inheritsProfile,@Cached("create()") ShareObjectNode share){  String x=checkVariable(xVec);  REnvironment env=envir;  if (inheritsProfile.profile(RRuntime.fromLogical(inherits))) {    while (env != REnvironment.emptyEnv()) {      if (env.get(x) != null) {        break;      }      env=env.getParent();    }    if (env == REnvironment.emptyEnv()) {      env=REnvironment.globalEnv();    }  } else {    if (CompilerDirectives.inInterpreter()) {      LoopNode.reportLoopCount(this,-1);    }    if (env == REnvironment.emptyEnv()) {      errorProfile.enter();      throw RError.error(errorContext(),RError.Message.CANNOT_ASSIGN_IN_EMPTY_ENV);    }  }  try {    env.put(x,share.execute(value));  } catch (  PutException ex) {    errorProfile.enter();    throw RError.error(errorContext(),ex);  }  return value;}  }
class C{  @Override public void onCreate(){  Log_OC.d(TAG,"onCreate");  super.onCreate();  mDownloadReceiver=new DownloadCompletedReceiver();  IntentFilter filter=new IntentFilter();  filter.addAction(FileDownloader.getDownloadAddedMessage());  filter.addAction(FileDownloader.getDownloadFinishMessage());  registerReceiver(mDownloadReceiver,filter);  mFolderObserversMap=new HashMap<>();}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  private void writeChunk() throws IOException {  char[] c=Integer.toHexString(count).toCharArray();  int clen=c.length;  int startByte=4 - clen;  int i;  for (i=0; i < clen; i++) {    buf[startByte + i]=(byte)c[i];  }  buf[startByte + (i++)]='\r';  buf[startByte + (i++)]='\n';  buf[startByte + (i++) + count]='\r';  buf[startByte + (i++) + count]='\n';  out.write(buf,startByte,i + count);  count=0;  pos=OFFSET;}  }
class C{  public void fabricateMachineCodeOffsetForPrologueInstruction(Instruction instr){  if (VM.VerifyAssertions) {    boolean prologueInstr=instr.getOpcode() == IR_PROLOGUE_opcode;    boolean hasNoValidOffset=lacksMachineCodeOffset(instr);    if (!prologueInstr || !hasNoValidOffset) {      VM.sysWriteln("Instruction " + instr);    }    VM._assert(prologueInstr,"Instruction was not a valid argument for this method!");    VM._assert(hasNoValidOffset,"Instruction already had a valid machine code offset!");  }  mcOffsets.put(instr,Integer.valueOf(0));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:06.810 -0500",hash_original_method="20DD1F1CA9EDC17BE2B90F2B7E5FF655",hash_generated_method="15634D69F6AFF53B8F514BC3002CEC1C") private void startupSocket(InetAddress dstAddress,int dstPort,InetAddress localAddress,int localPort,boolean streaming) throws IOException {  if (localPort < 0 || localPort > 65535) {    throw new IllegalArgumentException("Local port out of range: " + localPort);  }  InetAddress addr=localAddress == null ? Inet4Address.ANY : localAddress;synchronized (this) {    impl.create(streaming);    isCreated=true;    try {      if (!streaming || !usingSocks()) {        impl.bind(addr,localPort);      }      isBound=true;      impl.connect(dstAddress,dstPort);      isConnected=true;      cacheLocalAddress();    } catch (    IOException e) {      impl.close();      throw e;    }  }}  }
class C{  private Vector2 myUnproject(OrthographicCamera camera,float x,float y){  Vector3 raw=camera.unproject(new Vector3(x,y + overviewCamera.viewportHeight - camera.viewportHeight,0),0,0,camera.viewportWidth,camera.viewportHeight);  return new Vector2(raw.x,raw.y);}  }
class C{  private static void centroid3(Coordinate p1,Coordinate p2,Coordinate p3,Coordinate c){  c.x=p1.x + p2.x + p3.x;  c.y=p1.y + p2.y + p3.y;  return;}  }
class C{  public static void pushParameter(float o){  parametersFloat.push(o);}  }
class C{  @Override public boolean performWhenAllCommitted(@NotNull final Runnable action){  ApplicationManager.getApplication().assertIsDispatchThread();  assert !myProject.isDisposed() : "Already disposed: " + myProject;  if (myUncommittedDocuments.isEmpty()) {    action.run();    return true;  }  CompositeRunnable actions=(CompositeRunnable)actionsWhenAllDocumentsAreCommitted.get(PERFORM_ALWAYS_KEY);  if (actions == null) {    actions=new CompositeRunnable();    actionsWhenAllDocumentsAreCommitted.put(PERFORM_ALWAYS_KEY,actions);  }  actions.add(action);  myDocumentCommitProcessor.log("PDI: added performWhenAllCommitted",null,false,action,myUncommittedDocuments);  return false;}  }
class C{  public void draw(Graphics2D graphics2D,AttributedCharacterIterator aci){  aci.first();  TextPaintInfo tpi=(TextPaintInfo)aci.getAttribute(PAINT_INFO);  if (!tpi.visible)   return;  for (int i=0; i < glyphs.length; i++) {    if (glyphVisible[i]) {      glyphs[i].draw(graphics2D);    }  }}  }
class C{  public static void writeFile(final File file,final FileOutput output,final IProgressMonitor monitor) throws CoreException {  FileOutputStream fout=null;  try {    fout=new FileOutputStream(file);    BufferedOutputStream bout=new BufferedOutputStream(fout);    if (monitor != null) {      monitor.subTask("writing data to " + file.getName());    }    output.writeFile(bout);    bout.flush();  } catch (  IOException e) {    IStatus status=FindbugsPlugin.createErrorStatus("Exception while " + output.getTaskDescription(),e);    throw new CoreException(status);  } finally {    closeQuietly(fout);  }}  }
class C{  public static int binarySearch(int[] arr,int tgt){  int left=0;  int right=arr.length - 1;  int middle=-1;  int pos=-1;  boolean found=false;  while (!found && left <= right) {    middle=(left + right) / 2;    System.out.println("\tChecking midpoint of positions " + left + " & "+ right+ ", value = "+ arr[middle]);    printArrayWithLRM(arr,left,right,middle);    if (arr[middle] == tgt) {      System.out.println("\tIndex " + middle + " held value "+ arr[middle]+ "!");      found=true;      pos=middle;    } else     if (arr[middle] > tgt) {      System.out.println("\tValue " + tgt + " is LESS than "+ arr[middle]+ ", looking to the left");      right=middle - 1;    } else {      System.out.println("\tValue " + tgt + " is GREATER than "+ arr[middle]+ ", looking to the right");      left=middle + 1;    }  }  if (found) {    return pos;  } else {    return -1;  }}  }
class C{  public ClasspathResourceLoader(ClassLoader loader){  this(null,loader);}  }
class C{  @SuppressWarnings("unchecked") public void parseElementByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  getComments(stream);  stream.skipWhitespace();  boolean bracket=false;  if (stream.peek() == '(') {    bracket=true;    stream.skip();    stream.skipWhitespace();  }  try {    String token=stream.peekWord();    if (token == null) {      throw new SelfParseException("Unexpected end, element expected",stream);    }    token=token.toLowerCase();    if (token.equals(FUNCTION)) {      token=EQUATION;    }    if (OPERATORS.contains(token)) {      dataStream.writeLong(network.createVertex(Primitive.EQUATION).getId());      parseOperatorByteCode(dataStream,stream,elements,debug,network);      return;    } else     if (TYPES.contains(token)) {      stream.nextWord();      if (token.equals(VAR)) {        token=VARIABLE;      } else {        ensureNext(':',stream);      }      if (token.equals(FORMULA)) {        dataStream.writeLong(parseFormula(null,stream,elements,debug,network).getId());        return;      }      if (token.equals(PATTERN)) {        ensureNext('"',stream);        dataStream.writeLong(network.createPattern(stream.nextQuotesExcludeDoubleQuote(),this).getId());        return;      }      Long id=null;      if (Character.isDigit(stream.peek())) {        String idText=stream.nextWord();        try {          id=Long.valueOf(idText);        } catch (        NumberFormatException exception) {          throw new SelfParseException("Invalid id: " + idText,stream);        }      }      boolean isPrimitiveShortCut=false;      boolean isInstanceShortCut=false;      char peek=stream.peek();      if ('#' == peek) {        isPrimitiveShortCut=true;        stream.skip();        peek=stream.peek();      } else       if ('^' == peek) {        isInstanceShortCut=true;        stream.skip();        peek=stream.peek();      }      String name=null;      if ((id == null) || (peek == ':')) {        if (id != null) {          stream.skip();        }        name=stream.nextWord();      }      Vertex vertex=null;      Map<String,Vertex> elementsForType=elements.get(token);      if (name != null) {        if (elementsForType != null) {          vertex=elementsForType.get(name);          if (vertex != null) {            dataStream.writeLong(vertex.getId());            return;          }        }      }      if (id != null) {        vertex=network.findById(id);        if (vertex == null) {          throw new SelfParseException("Id element reference not found: " + id,stream);        }        if ((elementsForType != null) && (name != null)) {          elementsForType.put(name,vertex);        }        dataStream.writeLong(vertex.getId());        return;      }      if (token.equals(STATE)) {        vertex=network.createInstance(Primitive.STATE);        vertex.setName(name);      } else       if (token.equals(VARIABLE)) {        vertex=network.createInstance(Primitive.VARIABLE);        vertex.setName(name);        if (isPrimitiveShortCut) {          vertex.addRelationship(Primitive.MEANING,new Primitive(name));        }        if (isInstanceShortCut) {          Vertex meaning=network.createInstance(Primitive.VARIABLE);          meaning.addRelationship(Primitive.INSTANTIATION,new Primitive(name));          vertex.addRelationship(Primitive.MEANING,meaning);        }      } else       if (token.equals(EQUATION)) {        vertex=network.createInstance(Primitive.EQUATION);        vertex.setName(name);      } else {        throw new SelfParseException("Invalid element: " + token,stream);      }      if (name != null) {        elementsForType=elements.get(token);        if (elementsForType != null) {          elementsForType.put(name,vertex);        }      }      dataStream.writeLong(vertex.getId());      return;    }    char next=stream.peek();    try {      if (next == '#') {        stream.skip();        String data=stream.upToAny(PRIMITIVE_TOKENS);        dataStream.writeLong(network.createVertex(new Primitive(data)).getId());        return;      } else       if (next == '"') {        stream.skip();        String data=stream.nextQuotesExcludeDoubleQuote();        dataStream.writeLong(network.createVertex(data).getId());        return;      } else       if (Character.isDigit(next) || next == '-' || next == '+') {        String data=stream.nextWord();        dataStream.writeLong(network.createVertex(new BigInteger(data)).getId());        return;      } else {        String dataType=stream.upTo('(',false,true);        if (dataType.isEmpty()) {          throw new SelfParseException("Invalid element: " + stream.nextWord(),stream);        }        String word=stream.nextWord();        if (word.equals("(")) {          throw new SelfParseException("Invalid element: " + dataType,stream);        }        word=stream.nextWord();        if (word.equals("\"")) {          throw new SelfParseException("Invalid element: " + dataType,stream);        }        String dataValue=stream.upTo('"',false,true);        ensureNext('"',stream);        while ('"' == stream.peek()) {          dataValue=dataValue + "\"" + stream.upTo('"',false,true);          ensureNext('"',stream);        }        ensureNext(')',stream);        Object data=null;        if (dataType.equalsIgnoreCase("DATE")) {          data=Utils.parseDate(dataValue);        } else         if (dataType.equalsIgnoreCase("TIME")) {          data=Utils.parseTime(dataValue);        } else         if (dataType.equalsIgnoreCase("TIMESTAMP")) {          data=Utils.parseTimestamp(dataValue);        } else {          Class<Object> typeClass=(Class<Object>)Class.forName(dataType);          data=typeClass.getConstructor(String.class).newInstance(dataValue);        }        dataStream.writeLong(network.createVertex(data).getId());        return;      }    } catch (    SelfParseException exception) {      throw exception;    }catch (    Exception exception) {      throw new SelfParseException("Invalid data: " + next,stream,exception);    }  }  finally {    if (bracket) {      stream.skipWhitespace();      ensureNext(')',stream);    }  }}  }
class C{  public DoubleMatrix[] jblas_fullSVD(){  return org.jblas.Singular.fullSVD(new DoubleMatrix(this.getArray()));}  }
class C{  public PriorityQueue<A> plus(A... as){  Heap<A> result=root;  int sz=size;  for (  A a : as) {    result=result.plus(comparator,sz++,a);  }  return new PriorityQueue<>(comparator,sz,result,queueType);}  }
class C{  protected void updateParticles(){  for (  ParticleBehavior2D b : behaviors) {    if (index != null && b.supportsSpatialIndex()) {      b.applyWithIndex(index);    } else {      for (      VerletParticle2D p : particles) {        b.apply(p);      }    }  }  for (  VerletParticle2D p : particles) {    p.scaleVelocity(drag);    p.update();  }}  }
class C{  public void truncate(int size,Comparator<? super Solution> comparator){  sort(comparator);  while (data.size() > size) {    data.remove(data.size() - 1);  }}  }
class C{  public TempCharReader(){}  }
class C{  public AsyncResult RegisterServer2Async(RegisterServer2Request req){  return channel.serviceRequestAsync(req);}  }
class C{  private int read(){  _peek=null;  if (_index < _string.length()) {    return _string.charAt(_index++);  } else {    _index++;    return -1;  }}  }
class C{  protected void checkDuplicateChildName(URI id,Class<? extends DataObject> clzz,String nameField,String linkField,String value,DbClient dbClient){  URIQueryResultList uris=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getContainedObjectsConstraint(id,clzz,linkField),uris);  Iterator<?> objs=dbClient.queryIterativeObjects(clzz,uris);  while (objs.hasNext()) {    DataObject obj=(DataObject)objs.next();    if (value.equals(obj.getLabel()) && !obj.getInactive()) {      throw APIException.badRequests.duplicateChildForParent(id);    }  }}  }
class C{  public Sequence(Class<?> type1,Class<?> type2){  super(type2,type1,type2);}  }
class C{  final V doRemove(Object okey,Object value){  Comparable<? super K> key=comparable(okey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return null;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if (c < 0)       return null;      if (c > 0) {        b=n;        n=f;        continue;      }      if (value != null && !value.equals(v))       return null;      if (!n.casValue(v,null))       break;      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(key); else {        findPredecessor(key);        if (head.right == null)         tryReduceLevel();      }      return (V)v;    }  }}  }
class C{  public int topOfIntStack(Interpreter interpreter){  return interpreter.intStack().top();}  }
class C{  public void verbose(boolean v){  verbose=v;}  }
class C{  static <E>E checkType(E obj,Class<? extends E> type){  if (obj != null && !type.isInstance(obj)) {    throw new IndexOutOfBoundsException("" + obj.getClass().getName() + " type: "+ type);  }  return obj;}  }
class C{  public boolean covers(Coordinate p){  return covers(p.x,p.y);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.132 -0500",hash_original_method="1121EB69A68046BEB419CFEB2B6021C8",hash_generated_method="55C434B2E76B6614FDCA0DC7762D91F2") public synchronized StringBuffer insert(int index,char[] chars){  insert0(index,chars);  return this;}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction teleport=new RPAction();  teleport.put("type","teleportto");  teleport.put("target",StringHelper.unquote(remainder));  ClientSingletonRepository.getClientFramework().send(teleport);  return true;}  }
class C{  @Override public boolean isBusy(){  return false;}  }
class C{  public static int ENETUNREACH(){  return Errno.ENETUNREACH.intValue();}  }
class C{  @Override protected void initViews(View self,Bundle savedInstanceState){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:35.573 -0500",hash_original_method="319D9FA5F10AFC0CE6C0218CC418C7B4",hash_generated_method="54975663517FB18AE3E5D5817FD53889") public static ObjectAnimator ofPropertyValuesHolder(Object target,PropertyValuesHolder... values){  ObjectAnimator anim=new ObjectAnimator();  anim.mTarget=target;  anim.setValues(values);  return anim;}  }
class C{  public static void downloadArtwork(MovieSet movieSet,MediaFileType type){  String url=movieSet.getArtworkUrl(type);  if (StringUtils.isBlank(url)) {    return;  }  MovieSetImageFetcherTask task=new MovieSetImageFetcherTask(movieSet,url,type);  TmmTaskManager.getInstance().addImageDownloadTask(task);}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:42.745 -0500",hash_original_method="25E05A20196B2EF8776FA69AEA6A01AB",hash_generated_method="9FAED940D6E9DE757EDACE377DD026C4") @Override public int read() throws IOException {synchronized (lock) {    return in.read();  }}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SACTION;}  }
class C{  public void clearMemoryCache(){  model.clearMemoryCache();}  }
class C{  private PostgreSQLAddressSpaceFunctions(){}  }
class C{  public boolean containsKeyValue(){  return this.lengthKeyValue() > 0;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.recents);  mRecentsView=(Overview)findViewById(R.id.recents_view);  mRecentsView.setCallbacks(this);  mRecentsView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);  IntentFilter filter=new IntentFilter();  filter.addAction(Intent.ACTION_SCREEN_OFF);  filter.addAction(SearchManager.INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED);  try {    Utilities.setShadowProperty("ambientRatio",String.valueOf(1.5f));  } catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }}  }
class C{  public void purgeQueue(){  fDirtyRegions.clear();}  }
class C{  public Pool(int pp,Object[] pool,Types types){  this.pp=pp;  this.pool=pool;  this.types=types;  this.indices=new HashMap<Object,Integer>(pool.length);  for (int i=1; i < pp; i++) {    if (pool[i] != null)     indices.put(pool[i],i);  }}  }
class C{  public boolean isTrialPackage(){  return false;}  }
class C{  public void delete(){  isDeleted=true;}  }
class C{  public <U>Optional<U> mapToObj(IntFunction<U> mapper){  if (!isPresent())   return Optional.empty();  return Optional.ofNullable(mapper.apply(value));}  }
class C{  @Override public void addDirtyDirRecursively(final FilePath newcomer){  final VirtualFile vcsRoot=myVcsManager.getVcsRootFor(newcomer);  if (vcsRoot == null)   return;  myAffectedContentRoots.add(vcsRoot);  for (  Map.Entry<VirtualFile,THashSet<FilePath>> entry : myDirtyFiles.entrySet()) {    final VirtualFile groupRoot=entry.getKey();    if (groupRoot != null && VfsUtilCore.isAncestor(vcsRoot,groupRoot,false)) {      final THashSet<FilePath> files=entry.getValue();      if (files != null) {        for (Iterator<FilePath> it=files.iterator(); it.hasNext(); ) {          FilePath oldBoy=it.next();          if (oldBoy.isUnder(newcomer,false)) {            it.remove();          }        }      }    }  }  THashSet<FilePath> dirsByRoot=myDirtyDirectoriesRecursively.get(vcsRoot);  if (dirsByRoot == null) {    dirsByRoot=new THashSet<FilePath>();    myDirtyDirectoriesRecursively.put(vcsRoot,dirsByRoot);  } else {    for (Iterator<FilePath> it=dirsByRoot.iterator(); it.hasNext(); ) {      FilePath oldBoy=it.next();      if (newcomer.isUnder(oldBoy,false)) {        return;      }      if (oldBoy.isUnder(newcomer,false)) {        it.remove();      }    }  }  dirsByRoot.add(newcomer);}  }
class C{  public synchronized void delete(CloudObject cl){  storageQueue.addElement(cl.getCloudId());  Storage.getInstance().writeObject("CN1StorageQueue",storageQueue);  cl.setStatus(CloudObject.STATUS_DELETE_IN_PROGRESS);}  }
class C{  private InequalityRule(final String inequalitySymbol,final String field,final String value){  super();  this.inequalitySymbol=inequalitySymbol;  if (!RESOLVER.isField(field)) {    throw new IllegalArgumentException("Invalid " + inequalitySymbol + " rule - "+ field+ " is not a supported field");  }  this.field=field;  this.value=value;}  }
class C{  public boolean intersectsSegment(LatLon begin,LatLon end){  if (begin == null) {    String message=Logging.getMessage("nullValue.BeginIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (end == null) {    String message=Logging.getMessage("nullValue.EndIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Vec4 segmentBegin=new Vec4(begin.getLongitude().degrees,begin.getLatitude().degrees,0);  Vec4 segmentEnd=new Vec4(end.getLongitude().degrees,end.getLatitude().degrees,0);  Vec4 tmp=segmentEnd.subtract3(segmentBegin);  Vec4 segmentCenter=segmentBegin.add3(segmentEnd).divide3(2);  Vec4 segmentDirection=tmp.normalize3();  double segmentExtent=tmp.getLength3() / 2.0;  LatLon centroid=this.getCentroid();  Vec4 boxCenter=new Vec4(centroid.getLongitude().degrees,centroid.getLatitude().degrees,0);  double boxExtentX=this.getDeltaLonDegrees() / 2.0;  double boxExtentY=this.getDeltaLatDegrees() / 2.0;  Vec4 diff=segmentCenter.subtract3(boxCenter);  if (Math.abs(diff.x) > (boxExtentX + segmentExtent * Math.abs(segmentDirection.x))) {    return false;  }  if (Math.abs(diff.y) > (boxExtentY + segmentExtent * Math.abs(segmentDirection.y))) {    return false;  }  Vec4 segmentPerp=new Vec4(segmentDirection.y,-segmentDirection.x,0);  return Math.abs(segmentPerp.dot3(diff)) <= (boxExtentX * Math.abs(segmentPerp.x) + boxExtentY * Math.abs(segmentPerp.y));}  }
class C{  public void addLoadConstant(int k){switch (k) {case 0:    add(ByteCode.ICONST_0);  break;case 1:add(ByteCode.ICONST_1);break;case 2:add(ByteCode.ICONST_2);break;case 3:add(ByteCode.ICONST_3);break;case 4:add(ByteCode.ICONST_4);break;case 5:add(ByteCode.ICONST_5);break;default :add(ByteCode.LDC,itsConstantPool.addConstant(k));break;}}  }
class C{  private Object request() throws RuntimeException {  if (!rScriptRunning) {    throw new RuntimeException("r repl is not running");  }  if (!rScriptInitialized) {    waitForRScriptInitialized();  }  rResponseValue=null;synchronized (rRequestNotifier) {    rRequestNotifier.notify();  }  Object respValue=null;synchronized (rResponseNotifier) {    while (rResponseValue == null && rScriptRunning) {      try {        rResponseNotifier.wait(1000);      } catch (      InterruptedException e) {        logger.error(e.getMessage(),e);      }    }    respValue=rResponseValue;    rResponseValue=null;  }  if (rResponseError) {    throw new RuntimeException(respValue.toString());  } else {    return respValue;  }}  }
class C{  void checkClosed(){  if (result == null) {    throw DbException.get(ErrorCode.OBJECT_CLOSED);  }  if (stat != null) {    stat.checkClosed();  }  if (conn != null) {    conn.checkClosed();  }}  }
class C{  public void ensureCapacity(int minimumCapacity){  internal.ensureCapacity(minimumCapacity);}  }
class C{  public Divider(){  super(DIVIDER_ID,null);}  }
class C{  public static UndertowFraction createDefaultHTTPSOnlyFraction(String path,String password,String alias){  UndertowFraction fraction=createDefaultFraction();  fraction.removeHttpListenersFromDefaultServer().enableHTTPS(path,password,alias);  return fraction;}  }
class C{  public Quaternionf rotateYXZ(float angleZ,float angleY,float angleX){  return rotateYXZ(angleZ,angleY,angleX,this);}  }
class C{  private Security(){}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public static void removeSaslMech(String mech){  if (defaultMechs.contains(mech)) {    defaultMechs.remove(mech);  }}  }
class C{  public NATURAL_CROSS_JOIN NATURAL_CROSS_JOIN(String tableToJoin){  return new NATURAL_CROSS_JOIN(this,tableToJoin);}  }
class C{  protected boolean checkPassCode(){  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  String savedPassCodeDigits[]=new String[4];  savedPassCodeDigits[0]=appPrefs.getString(PREFERENCE_PASSCODE_D1,null);  savedPassCodeDigits[1]=appPrefs.getString(PREFERENCE_PASSCODE_D2,null);  savedPassCodeDigits[2]=appPrefs.getString(PREFERENCE_PASSCODE_D3,null);  savedPassCodeDigits[3]=appPrefs.getString(PREFERENCE_PASSCODE_D4,null);  boolean result=true;  for (int i=0; i < mPassCodeDigits.length && result; i++) {    result=(mPassCodeDigits[i] != null) && mPassCodeDigits[i].equals(savedPassCodeDigits[i]);  }  return result;}  }
class C{  protected boolean isNotFullyInitializedReceiver(MethodTree methodTree){  return TreeUtils.isConstructor(methodTree);}  }
class C{  public static final ParameterizedType parameterize(final Class<?> raw,final Map<TypeVariable<?>,Type> typeArgMappings){  Validate.notNull(raw,"raw class is null");  Validate.notNull(typeArgMappings,"typeArgMappings is null");  return parameterizeWithOwner(null,raw,extractTypeArgumentsFrom(typeArgMappings,raw.getTypeParameters()));}  }
class C{  private void write(final String str){  try {    if (writer == null) {      writer=new OutputStreamWriter(System.out);    }    writer.write(str);  } catch (  IOException ioe) {    logger.error("Writer cannot write.",ioe);    System.exit(1);  }}  }
class C{  @Override public void printWarning(final String message){  printWarning(message,preferenceStore.getBoolean(UIPreferenceConstants.CONSOLE_SHOW_ON_NEW_WARNING));}  }
class C{  public Object[] toArray(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return Arrays.copyOf(queue,size);  }  finally {    lock.unlock();  }}  }
class C{  public static boolean isTransformedField(String className,String fieldName,String desc){  return DescriptorMapping.getInstance().isTransformedField(className,fieldName,desc);}  }
class C{  public SimpleDigitalIn(boolean b){  set(b);}  }
class C{  public void paint(Graphics g,int width,int height){  Sprite centerSprite=images[4];  int centerWidth=centerSprite.getWidth();  int centerHeight=centerSprite.getHeight();  for (int y=0; y < height; y+=centerHeight) {    for (int x=0; x < width; x+=centerWidth) {      centerSprite.draw(g,x,y);    }  }  Sprite rightSprite=images[5];  int rightWidth=rightSprite.getWidth();  Sprite leftSprite=images[3];  int leftWidth=leftSprite.getHeight();  Sprite topSprite=images[1];  int topHeight=topSprite.getHeight();  Sprite bottomSprite=images[7];  int bottomHeight=bottomSprite.getHeight();  for (int x=leftWidth; x < width - rightWidth; x+=centerWidth) {    topSprite.draw(g,x,0);  }  for (int y=topHeight; y < height - bottomHeight; y+=centerHeight) {    leftSprite.draw(g,0,y);  }  int rightX=Math.max(width - rightWidth,leftWidth);  for (int y=topHeight; y < height - bottomHeight; y+=centerHeight) {    rightSprite.draw(g,rightX,y);  }  int bottomY=Math.max(height - bottomHeight,topHeight);  for (int x=centerWidth; x < width - centerWidth; x+=centerWidth) {    bottomSprite.draw(g,x,bottomY);  }  Sprite sprite=images[0];  sprite.draw(g,0,0);  sprite=images[2];  sprite.draw(g,rightX,0);  sprite=images[6];  sprite.draw(g,0,bottomY);  sprite=images[8];  sprite.draw(g,rightX,bottomY);}  }
class C{  private void handleEnumerationRequest(EnumerationContext ctx){switch (ctx.stage) {case HOSTDESC:    getHostComputeDescription(ctx,EnumerationStages.PARENTAUTH);  break;case PARENTAUTH:getParentAuth(ctx,EnumerationStages.RESOURCEGROUP);break;case RESOURCEGROUP:getResourceGroup(ctx,EnumerationStages.CLIENT);break;case CLIENT:try {getAccessToken(ctx,ctx.userEmail,Collections.singleton(ComputeScopes.COMPUTE_READONLY),privateKeyFromPkcs8(ctx.privateKey),EnumerationStages.ENUMERATE);} catch (Throwable e) {logSevere(e);ctx.error=e;ctx.stage=EnumerationStages.ERROR;handleEnumerationRequest(ctx);return;}break;case ENUMERATE:switch (ctx.enumRequest.enumerationAction) {case START:ctx.enumerationStartTimeInMicros=Utils.getNowMicrosUtc();ctx.enumRequest.enumerationAction=EnumerationAction.REFRESH;handleEnumerationRequest(ctx);break;case REFRESH:ctx.subStage=EnumerationSubStages.LIST_REMOTE_VMS;handleSubStage(ctx);break;case STOP:ctx.stage=EnumerationStages.FINISHED;handleEnumerationRequest(ctx);break;default :logSevere("Unknown enumeration action %s",ctx.enumRequest.enumerationAction);ctx.stage=EnumerationStages.ERROR;handleEnumerationRequest(ctx);}break;case FINISHED:AdapterUtils.sendPatchToEnumerationTask(this,ctx.enumRequest.taskReference);setOperationDurationStat(ctx.gcpAdapterOperation);ctx.gcpAdapterOperation.complete();break;case ERROR:ctx.gcpAdapterOperation.fail(ctx.error);AdapterUtils.sendFailurePatchToEnumerationTask(this,ctx.enumRequest.taskReference,ctx.error);break;default :String msg=String.format("Unknown GCP enumeration stage %s ",ctx.stage.toString());logSevere(msg);ctx.error=new IllegalStateException(msg);ctx.gcpAdapterOperation.fail(ctx.error);AdapterUtils.sendFailurePatchToEnumerationTask(this,ctx.enumRequest.taskReference,ctx.error);}}  }
class C{  public static void openWarning(String message,String title){  InformationDialog dialog=new InformationDialog(UIHelper.getShellProvider(),message);  dialog.setTitle(title);  dialog.setImage(UIHelper.getSWTImage(SWT.ICON_WARNING));  dialog.open();}  }
class C{  private void configureWizardPage(NewTypeWizardPage page){  page.setTypeName(typeNameWithParameters,false);  boolean isInEnclosingType=typeContainer instanceof IType;  if (isInEnclosingType) {    page.setEnclosingType((IType)typeContainer,false);  } else {    page.setPackageFragment((IPackageFragment)typeContainer,false);  }  page.setEnclosingTypeSelection(isInEnclosingType,false);}  }
class C{  public void addPendingCounter(PageSubscriptionCounter pageSubscriptionCounter){  Set<PageSubscriptionCounter> counter=getOrCreatePendingCounters();  pendingCounters.add(pageSubscriptionCounter);}  }
class C{  public boolean isOverflow(){  return this.type == TYPE_OVERFLOW;}  }
class C{  public int innerProduct(IntMathVec iVec){  check(iVec);  int iSum=0;  for (int i=0; i < iV.length; i++)   iSum+=iVec.iV[i] * iV[i];  return iSum;}  }
class C{  public static BoxDataSet serializableInstance(){  return new BoxDataSet(new ShortDataBox(4,4),null);}  }
class C{  private void traceObject(ObjectReference object,boolean root){  if (VERBOSE) {    Trace.trace(Item.SANITY,"tracing object %s",ObjectModel.getString(object));  }  if (object.isNull())   return;  boolean marked=blackSet.contains(object);  if (!marked) {    blackSet.add(object);    markStack.add(object);  }  visitor.visitObject(object,root,marked);}  }
class C{  public void save(KeyStore keyStore,KeyStoreData keyStoreData){  try {    if (!keyStoreData.getKeyStoreType().isFileBased()) {      LOGGER.error("Keystore is not file-based");    } else {      File file=new File(keyStoreData.getKeyStoreFile());      foutStream=new FileOutputStream(file);      keyStore.store(foutStream,keyStoreData.getPassword().toCharArray());    }  } catch (  IOException|KeyStoreException|CertificateException|NoSuchAlgorithmException ex) {    LOGGER.error("Error saving keystore",ex);  } finally {    SafeCloseUtil.close(foutStream);  }}  }
class C{  public LocoNetMessage writeMode(int status){  LocoNetMessage l=new LocoNetMessage(4);  l.setOpCode(LnConstants.OPC_SLOT_STAT1);  l.setElement(1,slot);  l.setElement(2,(stat & ~LnConstants.DEC_MODE_MASK) | status);  return l;}  }
class C{  protected SVGOMSetElement(){}  }
class C{  public String firstCalledName(){  if (addr instanceof NbtAddress) {    return ((NbtAddress)addr).firstCalledName();  } else {    calledName=((InetAddress)addr).getHostName();    if (isDotQuadIP(calledName)) {      calledName=NbtAddress.SMBSERVER_NAME;    } else {      int i=calledName.indexOf('.');      if (i > 1 && i < 15) {        calledName=calledName.substring(0,i).toUpperCase();      } else       if (calledName.length() > 15) {        calledName=NbtAddress.SMBSERVER_NAME;      } else {        calledName=calledName.toUpperCase();      }    }  }  return calledName;}  }
class C{  public Setting findSetting(String name){  return settings.get(name);}  }
class C{  @Override public void onPageScrolled(int arg0,float arg1,int arg2){}  }
class C{  public void testWatchdogDoesNotFailForObjectsThatAreNearTheDeadline() throws Exception {  CountDownLatch latch=new CountDownLatch(5);  createSlowFinalizer(1,latch);  createSlowFinalizer(1000,latch);  createSlowFinalizer(2000,latch);  createSlowFinalizer(4000,latch);  createSlowFinalizer(8000,latch);  FinalizationTester.induceFinalization();  assertTrue(latch.await(20,TimeUnit.SECONDS));}  }
class C{  public char[] findSource(IType type,String simpleSourceFileName){  long time=0;  if (VERBOSE) {    time=System.currentTimeMillis();  }  PackageFragment pkgFrag=(PackageFragment)type.getPackageFragment();  String name=org.eclipse.jdt.internal.core.util.Util.concatWith(pkgFrag.names,simpleSourceFileName,'/');  char[] source=null;  org.eclipse.jdt.internal.core.JavaModelManager manager=org.eclipse.jdt.internal.core.JavaModelManager.getJavaModelManager();  try {    manager.cacheZipFiles(this);    if (this.rootPath != null) {      source=getSourceForRootPath(this.rootPath,name);    }    if (source == null) {      computeAllRootPaths(type);      if (this.rootPaths != null) {        loop:         for (Iterator iterator=this.rootPaths.iterator(); iterator.hasNext(); ) {          String currentRootPath=(String)iterator.next();          if (!currentRootPath.equals(this.rootPath)) {            source=getSourceForRootPath(currentRootPath,name);            if (source != null) {              this.rootPath=currentRootPath;              break loop;            }          }        }      }    }  }  finally {    manager.flushZipFiles(this);  }  if (VERBOSE) {    System.out.println("spent " + (System.currentTimeMillis() - time) + "ms for "+ type.getElementName());  }  return source;}  }
class C{  private static void onLoadPosition(Window window){  if (!isWindowFrameOrDialog(window)) {    return;  }  String identifierForConfig=window.getClass().getSimpleName();  if (identifierForConfig.equals("JDialog")) {    return;  }  if (identifierForConfig.equals("MainGUI") && Emulator.getMainGUI().isFullScreen()) {    return;  }  if (Settings.getInstance().readBool("gui.saveWindowPos") && Settings.getInstance().readWindowPos(identifierForConfig) != null) {    Emulator.log.debug("loading window position of '" + identifierForConfig + "'");    if (!(identifierForConfig.equals("LogWindow") && Settings.getInstance().readBool("gui.snapLogwindow"))) {      window.setLocation(Settings.getInstance().readWindowPos(identifierForConfig));    }    if (isWindowResizeable(window) && Settings.getInstance().readWindowSize(identifierForConfig) != null) {      window.setSize(Settings.getInstance().readWindowSize(identifierForConfig));    }  } else {    window.setLocationRelativeTo(null);  }}  }
class C{  private int readAnnotationTarget(final Context context,int u){  int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:    target&=0xFFFF0000;  u+=2;break;case 0x13:case 0x14:case 0x15:target&=0xFF000000;u+=1;break;case 0x40:case 0x41:{target&=0xFF000000;int n=readUnsignedShort(u + 1);context.start=new Label[n];context.end=new Label[n];context.index=new int[n];u+=3;for (int i=0; i < n; ++i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);context.start[i]=readLabel(start,context.labels);context.end[i]=readLabel(start + length,context.labels);context.index[i]=readUnsignedShort(u + 4);u+=6;}break;}case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:target&=0xFF0000FF;u+=4;break;default :target&=(target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000;u+=3;break;}int pathLength=readByte(u);context.typeRef=target;context.typePath=pathLength == 0 ? null : new TypePath(b,u);return u + 1 + 2 * pathLength;}  }
class C{  public String toString(){  return "DownloadedUpdateInfo(isValid=" + isValid + ", "+ "currentVersion="+ currentVersion+ ", "+ "availableVersion="+ downloadedVersion+ ", "+ "path="+ path+ ")";}  }
class C{  public JobPriority(int value){  super(value,1,100);}  }
class C{  public AttributeAnnotation(String namespaceUri,String localName,String value){  this.namespaceUri=namespaceUri;  this.localName=localName;  this.value=value;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.legendShape=SerialUtilities.readShape(stream);}  }
class C{  public Enumeration<String> attributeNames(){  return getTable().keys();}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {}  }
class C{  private void notifySelectionListeners(){  for (  final IZyGraphSelectionListener listener : m_selectionListeners) {    try {      listener.selectionChanged();    } catch (    final Exception exception) {      exception.printStackTrace();    }  }}  }
class C{  @Override public void resultSet_close(FilterChain chain,ResultSetProxy resultSet) throws SQLException {  chain.resultSet_close(resultSet);}  }
class C{  public Composer arc(long animDuration,float x,float y,float angle){  if (angle < 1f && angle > -1f) {    return to(animDuration,x,y,Ease.NONE);  }  return arc(animDuration,x,y,angle,Ease.NONE);}  }
class C{  public int defineType(PdxType newType){  Integer existingId=this.typeToId.get(newType);  if (existingId != null) {    int eid=existingId.intValue();    newType.setTypeId(eid);    return eid;  }  int id=distributedTypeRegistry.defineType(newType);  newType.setTypeId(id);  PdxType oldType=this.idToType.get(id);  if (oldType == null) {    this.idToType.put(id,newType);    this.typeToId.put(newType,id);    if (logger.isInfoEnabled()) {      logger.info("Defining: {}",newType.toFormattedString());    }  } else   if (!oldType.equals(newType)) {    Assert.fail("Old type does not equal new type for the same id. oldType=" + oldType + " new type="+ newType);  }  return id;}  }
class C{  public static JMenu leftShift(JMenu self,Action action){  self.add(action);  return self;}  }
class C{  public static void createImageToStorage(String url,Component targetList,int targetOffset,String targetKey,String cacheId,Image placeholderImage,byte priority){  createImageToStorage(url,targetList,null,targetOffset,targetKey,cacheId,false,null,priority,placeholderImage,defaultMaintainAspectRatio);}  }
class C{  private static IgfsEx startSecondary() throws Exception {  return start("secondary",11500,IgfsMode.PRIMARY,null);}  }
class C{  private List<ContainerInitializer> jspInitializers(){  JettyJasperInitializer sci=new JettyJasperInitializer();  ContainerInitializer initializer=new ContainerInitializer(sci,null);  List<ContainerInitializer> initializers=new ArrayList<ContainerInitializer>();  initializers.add(initializer);  return initializers;}  }
class C{  private Node appendNormalized(Node pending,Node current,DocumentFragment parent){  if (pending == null) {    return current;  }  if (pending.getNodeType() != Node.TEXT_NODE || current.getNodeType() != Node.TEXT_NODE) {    parent.appendChild(pending);    return current;  }  Text a=(Text)pending, b=(Text)current;  Text combined=doc.createTextNode(a.getTextContent() + b.getTextContent());  if (needsDebugData) {    Nodes.setFilePositionFor(combined,FilePosition.span(Nodes.getFilePositionFor(a),Nodes.getFilePositionFor(b)));    Nodes.setRawText(combined,Nodes.getRawText(a) + Nodes.getRawText(b));  }  return combined;}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now " + "\"stopped\")");}  }
class C{  public UserEntry suspendUser(String username) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Suspending user '" + username + "'.");  URL retrieveUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/"+ username);  UserEntry userEntry=userService.getEntry(retrieveUrl,UserEntry.class);  userEntry.getLogin().setSuspended(true);  URL updateUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/"+ username);  return userService.update(updateUrl,userEntry);}  }
class C{  @Override public void transform(AffineTransform tx){  invalidateTransformedShape();  if (get(TRANSFORM) != null || (tx.getType() & (AffineTransform.TYPE_TRANSLATION)) != tx.getType()) {    if (get(TRANSFORM) == null) {      set(TRANSFORM,(AffineTransform)tx.clone());    } else {      AffineTransform t=TRANSFORM.getClone(this);      t.preConcatenate(tx);      set(TRANSFORM,t);    }  } else {    Point2D.Double anchor=getStartPoint();    Point2D.Double lead=getEndPoint();    setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));    if (get(FILL_GRADIENT) != null && !get(FILL_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=FILL_GRADIENT.getClone(this);      g.transform(tx);      set(FILL_GRADIENT,g);    }    if (get(STROKE_GRADIENT) != null && !get(STROKE_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=STROKE_GRADIENT.getClone(this);      g.transform(tx);      set(STROKE_GRADIENT,g);    }  }}  }
class C{  public float distanceTo(AnimatableValue other){  return 0f;}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public ActiveDirectoryJoinInfoDTO joinActiveDirectory(ActiveDirectoryJoinRequestDTO joinRequest){  Validate.notEmpty(joinRequest.getUsername(),"Missing username. Username is required to join AD");  Validate.notEmpty(joinRequest.getPassword(),"Missing password. Password is required to join AD");  Validate.notEmpty(joinRequest.getDomain(),"Domain name of AD is missing");  try {    getIDMClient().joinActiveDirectory(joinRequest.getUsername(),joinRequest.getPassword(),joinRequest.getDomain(),joinRequest.getOU());    return ActiveDirectoryInfoMapper.getActiveDirectoryDTO(getIDMClient().getActiveDirectoryJoinStatus());  } catch (  IllegalArgumentException e) {    log.warn("Failed to join active directory on domain '{}' due to a client side error",e);    throw new BadRequestException(sm.getString("res.server.add.joinad.failed",joinRequest.getDomain()),e);  }catch (  Exception ex) {    log.error("Failed to join active directory on domain '{}' due to a server side error",joinRequest.getDomain(),ex);    throw new InternalServerErrorException(sm.getString("ec.500"),ex);  }}  }
class C{  protected CCAnimate(CCAnimation anim,boolean restore){  super(anim.frames().size() * anim.delay());  restoreOriginalFrame=restore;  animation=anim;  origFrame=null;}  }
class C{  public boolean isEmpty(){  return root == null;}  }
class C{  public void receiveErrorqueryAssociatedProcessorsForArray(java.lang.Exception e){}  }
class C{  private void movePrefixedSettingsToNewTable(SQLiteDatabase db,String sourceTable,String destTable,String[] prefixesToMove){  SQLiteStatement insertStmt=null;  SQLiteStatement deleteStmt=null;  db.beginTransaction();  try {    insertStmt=db.compileStatement("INSERT INTO " + destTable + " (name,value) SELECT name,value FROM "+ sourceTable+ " WHERE substr(name,0,?)=?");    deleteStmt=db.compileStatement("DELETE FROM " + sourceTable + " WHERE substr(name,0,?)=?");    for (    String prefix : prefixesToMove) {      insertStmt.bindLong(1,prefix.length() + 1);      insertStmt.bindString(2,prefix);      insertStmt.execute();      deleteStmt.bindLong(1,prefix.length() + 1);      deleteStmt.bindString(2,prefix);      deleteStmt.execute();    }    db.setTransactionSuccessful();  }  finally {    db.endTransaction();    if (insertStmt != null) {      insertStmt.close();    }    if (deleteStmt != null) {      deleteStmt.close();    }  }}  }
class C{  public MiniSolrCloudCluster(int numServers,String hostContext,Path baseDir,String solrXml,SortedMap<ServletHolder,String> extraServlets,SortedMap<Class<? extends Filter>,String> extraRequestFilters,SSLConfig sslConfig) throws Exception {  this(numServers,baseDir,solrXml,JettyConfig.builder().setContext(hostContext).withSSLConfig(sslConfig).withFilters(extraRequestFilters).withServlets(extraServlets).build());}  }
class C{  public PeriodAxis(String label){  this(label,new Day(),new Day());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String outletHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag=false;  double flowDir=0;  double outletID=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outletHeader=args[1];  outputHeader=args[2];  if (inputHeader.isEmpty() || outputHeader.isEmpty() || outletHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster outlet;    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    if (outletHeader.toLowerCase().endsWith(".shp")) {      ArrayList<Double> outletXs=new ArrayList<>();      ArrayList<Double> outletYs=new ArrayList<>();      ShapeFile input=new ShapeFile(outletHeader);      if (input.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The input pour point vector should be \n" + "of a Point or MultiPoint ShapeType.");        return;      }      for (      ShapeFileRecord record : input.records) {        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      outletXs.add(vertices[0][0]);    outletYs.add(vertices[0][1]);  break;case POINTZ:PointZ recPointZ=(PointZ)(record.getGeometry());vertices=recPointZ.getPoints();outletXs.add(vertices[0][0]);outletYs.add(vertices[0][1]);break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());vertices=recPointM.getPoints();outletXs.add(vertices[0][0]);outletYs.add(vertices[0][1]);break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)(record.getGeometry());vertices=recMultiPoint.getPoints();for (int j=0; j < vertices.length; j++) {outletXs.add(vertices[j][0]);outletYs.add(vertices[j][1]);}break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)(record.getGeometry());vertices=recMultiPointZ.getPoints();for (int j=0; j < vertices.length; j++) {outletXs.add(vertices[j][0]);outletYs.add(vertices[j][1]);}break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)(record.getGeometry());vertices=recMultiPointM.getPoints();for (int j=0; j < vertices.length; j++) {outletXs.add(vertices[j][0]);outletYs.add(vertices[j][1]);}break;}}outlet=new WhiteboxRaster(outletHeader.replace(".shp",".dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);outlet.isTemporaryFile=true;int numOutlets=outletXs.size();double outletX, outletY;int outletCol, outletRow;int outletNum=1;for (int a=0; a < numOutlets; a++) {outletX=outletXs.get(a);outletY=outletYs.get(a);outletRow=outlet.getRowFromYCoordinate(outletY);outletCol=outlet.getColumnFromXCoordinate(outletX);outlet.setValue(outletRow,outletCol,outletNum);outletNum++;}} else if (outletHeader.toLowerCase().endsWith(".dep")) {outlet=new WhiteboxRaster(outletHeader,"r");if (outlet.getNumberRows() != rows || outlet.getNumberColumns() != cols) {showFeedback("The input images must be of the same dimensions.");return;}} else {showFeedback("Unrecognized input outlets file type.");return;}WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);output.setDataScale(WhiteboxRasterBase.DataScale.CATEGORICAL);output.setPreferredPalette("categorical1.pal");for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=outlet.getValue(row,col);if (z != 0 && z != noData) {output.setValue(row,col,z);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress("Loop 1 of 2:",(int)progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {if (output.getValue(row,col) == -999 && pntr.getValue(row,col) != noData) {flag=false;x=col;y=row;do {flowDir=pntr.getValue(y,x);if (flowDir > 0) {c=(int)(Math.log(flowDir) / LnOf2);x+=dX[c];y+=dY[c];z=output.getValue(y,x);if (z != -999) {outletID=z;flag=true;}} else {outletID=noData;flag=true;}} while (!flag);flag=false;x=col;y=row;output.setValue(y,x,outletID);do {flowDir=pntr.getValue(y,x);if (flowDir > 0) {c=(int)(Math.log(flowDir) / LnOf2);x+=dX[c];y+=dY[c];z=output.getValue(y,x);if (z != -999) {flag=true;}} else {flag=true;}output.setValue(y,x,outletID);} while (!flag);} else if (pntr.getValue(row,col) == noData) {output.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress("Loop 2 of 2:",(int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());pntr.close();outlet.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static int binarySearch(int[] array,int value){  return binarySearch(array,0,array.length,value);}  }
class C{  public static MaskedWalletRequest createStripeMaskedWalletRequest(ItemInfo itemInfo,String publishableKey,String version){  if ("REPLACE_ME".equals(publishableKey) || "REPLACE_ME".equals(version)) {    throw new IllegalArgumentException("Invalid Stripe configuration, see README for instructions.");  }  PaymentMethodTokenizationParameters parameters=PaymentMethodTokenizationParameters.newBuilder().setPaymentMethodTokenizationType(PaymentMethodTokenizationType.PAYMENT_GATEWAY).addParameter("gateway","stripe").addParameter("stripe:publishableKey",publishableKey).addParameter("stripe:version",version).build();  return createMaskedWalletRequest(itemInfo,parameters);}  }
class C{  public InstructionPrinter(PrintStream stream){  this.stream=stream;}  }
class C{  public int rtf(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  @Override public void clearSelection(){  if (getSelectionCount() > 0) {    Set<Figure> oldSelection=new HashSet<Figure>(selectedFigures);    selectedFigures.clear();    Set<Figure> newSelection=new HashSet<Figure>(selectedFigures);    invalidateHandles();    fireSelectionChanged(oldSelection,newSelection);  }}  }
class C{  public NameAndTypeConstant addNameAndType(String name,String type){  NameAndTypeConstant entry=getNameAndType(name,type);  if (entry != null)   return entry;  Utf8Constant nameEntry=addUTF8(name);  Utf8Constant typeEntry=addUTF8(type);  entry=new NameAndTypeConstant(this,_entries.size(),nameEntry.getIndex(),typeEntry.getIndex());  addConstant(entry);  return entry;}  }
class C{  public static String matchCertificate(KeyStore keyStore,X509Certificate cert) throws CryptoException {  try {    for (Enumeration aliases=keyStore.aliases(); aliases.hasMoreElements(); ) {      String alias=(String)aliases.nextElement();      if (keyStore.isCertificateEntry(alias)) {        X509Certificate compCert=X509CertUtil.convertCertificate(keyStore.getCertificate(alias));        if (cert.equals(compCert)) {          return alias;        }      }    }    return null;  } catch (  KeyStoreException ex) {    throw new CryptoException(res.getString("NoMatchCertificate.exception.message"),ex);  }}  }
class C{  public void handleDecode(Result rawResult,Bundle bundle){  inactivityTimer.onActivity();  beepManager.playBeepSoundAndVibrate();  Intent resultIntent=new Intent();  bundle.putInt("width",mCropRect.width());  bundle.putInt("height",mCropRect.height());  bundle.putString("result",rawResult.getText());  resultIntent.putExtras(bundle);  this.setResult(RESULT_OK,resultIntent);  CaptureActivity.this.finish();}  }
class C{  public TreeRTGPinusMonticola(){  super();}  }
class C{  public void persist(RepositoryProxyCache proxyCache,String content){  File cacheFile=buildFile(proxyCache.getCacheDir(),proxyCache.getFileName(),DEFAULT_FILE_NAME);  new Thread(new CacheWriter(fileManager,cacheFile,content)).start();}  }
class C{  private static void enableDownloadManager(Context context){  try {    Intent intent=new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS);    intent.setData(Uri.parse("package:" + DOWNLOAD_MANAGER_PACKAGE_NAME));    context.startActivity(intent);  } catch (  ActivityNotFoundException e) {    e.printStackTrace();    try {      Intent intent=new Intent(android.provider.Settings.ACTION_MANAGE_APPLICATIONS_SETTINGS);      context.startActivity(intent);    } catch (    ActivityNotFoundException ignored) {    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void endNull(){}  }
class C{  private void putWithValidation(String key,Object value) throws BitcoinURIParseException {  if (parameterMap.containsKey(key)) {    throw new BitcoinURIParseException(String.format(Locale.US,"'%s' is duplicated, URI is invalid",key));  } else {    parameterMap.put(key,value);  }}  }
class C{  public void startLaunchNotifier(){  if (m_launchNotification == null)   throw new NullPointerException();  m_launchNotifierThread.setDaemon(true);  m_launchNotifierThread.start();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void testAddData() throws Exception {  con.addStatement(painter,RDF.TYPE,RDFS.CLASS);  con.addStatement(painting,RDF.TYPE,RDFS.CLASS);  con.addStatement(picasso,RDF.TYPE,painter,context1);  con.addStatement(guernica,RDF.TYPE,painting,context1);  con.addStatement(picasso,paints,guernica,context1);  con.commit();  assertEquals("Repository should contain 5 statements in total",5,countAllElements());  assertEquals("Named context should contain 3 statements",3,countContext1Elements());  assertEquals("Repository should have 1 context identifier",1,countElements(con.getContextIDs()));  assertEquals("Repository should contain 5 statements in total",5,countQueryResults("select * where { ?S ?P ?O }"));  assertEquals("Statement (Painter, type, Class) should be in the repository",1,countQueryResults("select * where { ex:Painter rdf:type rdfs:Class }"));  assertEquals("Statement (picasso, type, Painter) should be in the repository",1,countQueryResults("select * where { ex:picasso rdf:type ex:Painter}"));  assertEquals("Statement (Painter, paints, Painting) should not be in the repository",0,countQueryResults("select * where {ex:Painter ex:paints ex:Painting}"));  assertEquals("Statement (picasso, creates, guernica) should not be in the repository",0,countQueryResults("select * where {ex:picasso ex:creates ex:guernica}"));  assertEquals("Repository should contain 2 statements matching (picasso, _, _)",2,countQueryResults("select * where {ex:picasso ?P ?O}"));  assertEquals("Repository should contain 1 statement matching (picasso, paints, _)",1,countQueryResults("select * where {ex:picasso ex:paints ?O}"));  assertEquals("Repository should contain 4 statements matching (_, type, _)",4,countQueryResults("select * where {?S rdf:type ?O}"));  assertEquals("Repository should contain 2 statements matching (_, _, Class)",2,countQueryResults("select * where {?S ?P rdfs:Class}"));  assertEquals("Repository should contain 0 statements matching (_, _, type)",0,countQueryResults("select * where {?S ?P rdf:type}"));}  }
class C{  public FigureSelectionEvent(DrawingView source,Set<Figure> oldValue,Set<Figure> newValue){  super(source);  this.oldValue=oldValue;  this.newValue=newValue;}  }
class C{  public ExtensionValue(byte[] encoding){  this.encoding=encoding;}  }
class C{  public static void logEvent(String event,String... pairs){  Server server=App.getInstance().getServer();  if (server != null) {    List<String> allPairs=Lists.newArrayList("event",event);    allPairs.addAll(Arrays.asList(pairs));    server.logToServer(allPairs);  }}  }
class C{  protected ExtraCode_Impl(){  super();}  }
class C{  protected void acquireResources(){}  }
class C{  public ReferenceMap(int keyType,int valueType){  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,false);}  }
class C{  @Deprecated public TaskResourceRep sendAlert(String source,Integer eventId,List<String> nodeIds,List<String> logNames,Integer severity,String start,String end,String msgRegex,Integer maxCount,boolean multipleRequests,EventParameters eventParameters){  UriBuilder builder=client.uriBuilder(CALLHOME_ALERT_URL);  addQueryParam(builder,SOURCE_PARAM,source);  addQueryParam(builder,EVENT_ID_PARAM,eventId);  addQueryParam(builder,NODE_ID_PARAM,nodeIds);  addQueryParam(builder,LOG_NAME_PARAM,logNames);  addQueryParam(builder,SEVERITY_PARAM,severity);  addQueryParam(builder,START_TIME_PARAM,start);  addQueryParam(builder,END_TIME_PARAM,end);  addQueryParam(builder,MSG_REGEX_PARAM,msgRegex);  addQueryParam(builder,MAX_COUNT_PARAM,maxCount);  if (multipleRequests) {    addQueryParam(builder,FORCE_PARAM,FORCE);  }  return client.postURI(TaskResourceRep.class,eventParameters,builder.build());}  }
class C{  final public Object[] longArrAsComponentArr(final long[] arr){  final int numDimensions=datatypeConfig.getNumDimensions();  if (arr.length != numDimensions) {    throw new IllegalArgumentException("Encoding has wrong format. Expected " + numDimensions + " components for datatype.");  }  final Object[] componentArr=new Object[arr.length];  for (int i=0; i < arr.length; i++) {    final GeoSpatialDatatypeFieldConfiguration fieldConfig=datatypeConfig.getFields().get(i);    final double precisionAdjustment=fieldConfig.getMultiplier();switch (fieldConfig.getValueType()) {case DOUBLE:      componentArr[i]=(double)arr[i] / precisionAdjustment;    break;case LONG:  componentArr[i]=arr[i] / (long)precisionAdjustment;break;default :throw new RuntimeException("Uncovered decoding case. Please fix code.");}}return componentArr;}  }
class C{  public UpValue(LuaValue[] stack,int index){  this.array=stack;  this.index=index;}  }
class C{  public EulerAngles(){  this(0,0,0);}  }
class C{  public br addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static DateFormat toTimeFormat(String timeFormat,TimeZone tz,Locale locale){  DateFormat df=null;  if (UtilValidate.isEmpty(timeFormat)) {    df=DateFormat.getTimeInstance(DateFormat.MEDIUM,locale);  } else {    df=new SimpleDateFormat(timeFormat,locale == null ? Locale.getDefault() : locale);  }  df.setTimeZone(tz);  return df;}  }
class C{  public Object clone(){  Matrix3d m1=null;  try {    m1=(Matrix3d)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  return m1;}  }
class C{  @Override public int compareTo(final Label o){  if (o.prefix.equals(prefix) && o.suffix.equals(suffix)) {    return Double.compare(value,o.value);  }  return toString().compareTo(o.toString());}  }
class C{  private void moveToQueueEnd(){  tempRemoveFromQueue();  addToQueueBefore(header);}  }
class C{  public void reset(){  if (!m_hasBeenReset && m_shouldReset) {    m_hasBeenReset=true;    if (this.m_outputStream != null) {      try {        m_outputStream.close();      } catch (      java.io.IOException ioe) {      }    }    m_outputStream=null;    m_countersTable=null;    m_xcontext.reset();    m_xcontext.getVarStack().reset();    resetUserParameters();    m_currentTemplateElements.removeAllElements();    m_currentMatchTemplates.removeAllElements();    m_currentMatchedNodes.removeAllElements();    m_serializationHandler=null;    m_outputTarget=null;    m_keyManager=new KeyManager();    m_attrSetStack=null;    m_countersTable=null;    m_currentTemplateRuleIsNull=new BoolStack();    m_doc=DTM.NULL;    m_transformThread=null;    m_xcontext.getSourceTreeManager().reset();  }}  }
class C{  public VirtualMachineDescriptor(AttachProvider provider,String id,String displayName){  if (provider == null) {    throw new NullPointerException("provider cannot be null");  }  if (id == null) {    throw new NullPointerException("identifier cannot be null");  }  if (displayName == null) {    throw new NullPointerException("display name cannot be null");  }  this.provider=provider;  this.id=id;  this.displayName=displayName;}  }
class C{  public static Map<String,Object> convertDocument(DispatchContext dctx,Map<String,? extends Object> context){  XMultiComponentFactory xmulticomponentfactory=null;  String stringUrl="file:///" + context.get("filenameFrom");  String stringConvertedFile="file:///" + context.get("filenameTo");  String filterName="file:///" + context.get("filterName");  String oooHost=(String)context.get("oooHost");  String oooPort=(String)context.get("oooPort");  try {    xmulticomponentfactory=OpenOfficeWorker.getRemoteServer(oooHost,oooPort);    OpenOfficeWorker.convertOODocToFile(xmulticomponentfactory,stringUrl,stringConvertedFile,filterName);    Map results=ServiceUtil.returnSuccess();    return results;  } catch (  IOException e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }catch (  Exception e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }}  }
class C{  public T caseAnnotableExpression(AnnotableExpression object){  return null;}  }
class C{  public RectangularPrism(float width,float height,float depth,boolean hasCubemapTexture,boolean createTextureCoordinates,boolean createVertexColorBuffer,boolean createVBOs){  super();  mWidth=width;  mHeight=height;  mDepth=depth;  mHasCubemapTexture=hasCubemapTexture;  mCreateTextureCoords=createTextureCoordinates;  mCreateVertexColorBuffer=createVertexColorBuffer;  init(createVBOs);}  }
class C{  public CMemoryRefreshButtonSynchronizer(final CMemoryRefreshButton refreshButton,final CDebugPerspectiveModel debugPerspectiveModel,final Action defaultAction,final Action askAction){  Preconditions.checkNotNull(refreshButton,"IE01442: Refresh button argument can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE01443: Debug perspective model argument can not be null");  Preconditions.checkNotNull(defaultAction,"IE01444: Default action argument can not be null");  Preconditions.checkNotNull(askAction,"IE01445: Ask action argument can not be null");  m_refreshButton=refreshButton;  m_debugPerspectiveModel=debugPerspectiveModel;  m_defaultAction=defaultAction;  m_askAction=askAction;  m_refreshButton.setAction(m_defaultAction);  synchronizeDebugger(null,debugPerspectiveModel.getCurrentSelectedDebugger());  debugPerspectiveModel.addListener(m_debugListener);}  }
class C{  public CompositeProcessorTest(String name){  super(name);}  }
class C{  public void notifyThrottleFound(DccThrottle throttle){  if (throttle == null) {    abortWarrant("notifyThrottleFound: null throttle(?)!");    firePropertyChange("throttleFail",null,Bundle.getMessage("noThrottle"));    return;  }  if (_runMode == MODE_LEARN) {    abortWarrant("notifyThrottleFound: No LEARN mode for SCWarrant");    InstanceManager.throttleManagerInstance().releaseThrottle(throttle,this);    firePropertyChange("throttleFail",null,Bundle.getMessage("noThrottle"));    return;  }  if (log.isDebugEnabled()) {    log.debug(_trainName + " notifyThrottleFound address= " + throttle.getLocoAddress().toString()+ " _runMode= "+ _runMode);  }  startupWarrant();  _engineer=new Engineer(this,throttle);  firePropertyChange("runMode",Integer.valueOf(MODE_NONE),Integer.valueOf(_runMode));  runSignalControlledTrain();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isReference(){  return value.isReference();}  }
class C{  public boolean isIgnitable(){  return (containsTerrain(Terrains.WOODS) || containsTerrain(Terrains.JUNGLE) || containsTerrain(Terrains.BUILDING)|| containsTerrain(Terrains.FUEL_TANK)|| containsTerrain(Terrains.FIELDS)|| containsTerrain(Terrains.INDUSTRIAL));}  }
class C{  public void addListener(Listener<ChannelMapEvent> listener){  mEventBroadcaster.addListener(listener);}  }
class C{  public static boolean isBetween(double val,double theshold1,double theshold2){  return theshold2 > theshold1 ? val > theshold1 && val < theshold2 : val > theshold2 && val < theshold1;}  }
class C{  @Override public Object deserialize(byte[] arg0){  String logLine=new String(arg0);  MAPRFSAuditLogParser parser=new MAPRFSAuditLogParser();  MAPRFSAuditLogObject entity=null;  try {    entity=parser.parse(logLine);  } catch (  Exception ex) {    LOG.error("Failing parse audit log message",ex);  }  if (entity == null) {    LOG.warn("Event ignored as it can't be correctly parsed, the log is ",logLine);    return null;  }  Map<String,Object> map=new TreeMap<String,Object>();  map.put("src",entity.src);  map.put("dst",entity.dst);  map.put("host",entity.host);  map.put("timestamp",entity.timestamp);  map.put("status",entity.status);  map.put("user",entity.user);  map.put("cmd",entity.cmd);  map.put("volume",entity.volume);  return map;}  }
class C{  public Configurator loadingBackground(int color){  if (color != 0) {    viewLoadingBackgroundColor=color;  }  return this;}  }
class C{  public double empiricalHSICincompleteCholesky(TetradMatrix Gy,TetradMatrix Gx,TetradMatrix Gz,int m){  int ky=Gy.columns();  int kx=Gx.columns();  int kz=Gz.columns();  TetradMatrix H=KernelUtils.constructH(m);  TetradMatrix Gcy=H.times(Gy);  TetradMatrix Gcx=H.times(Gx);  TetradMatrix Gcz=H.times(Gz);  TetradMatrix A=new TetradMatrix(ky,kx);  TetradMatrix Gcyt=Gcy.transpose();  A=Gcyt.times(Gcx);  TetradMatrix B=Gcy.times(A);  TetradMatrix Kyx=new TetradMatrix(m,m);  TetradMatrix Gcxt=new TetradMatrix(kx,m);  Gcxt=Gcx.transpose();  Kyx=B.times(Gcxt);  double empHSIC=0.0;  double xy=0.0;  for (int i=0; i < m; i++) {    empHSIC+=matrixProductEntry(B,Gcxt,i,i);  }  TetradMatrix Gytz=Gcyt.times(Gcz);  TetradMatrix Gczt=Gcz.transpose();  TetradMatrix Gztx=Gczt.times(Gcx);  TetradMatrix Gztz=Gczt.times(Gcz);  TetradMatrix Gztzr=Gztz.copy();  for (int i=0; i < kz; i++) {    Gztzr.set(i,i,Gztz.get(i,i) + this.regularizer);  }  TetradMatrix ZI=Gztzr.inverse();  TetradMatrix ZIzt=ZI.times(Gczt);  TetradMatrix Gzr=Gcz.copy();  for (int i=0; i < m; i++) {    for (int j=0; j < kz; j++) {      Gzr.set(i,j,Gcz.get(i,j) * (-1.0 / this.regularizer));    }  }  TetradMatrix Zinv=Gzr.times(ZIzt);  for (int i=0; i < m; i++) {    Zinv.set(i,i,Zinv.get(i,i) + (1.0 / this.regularizer));  }  TetradMatrix Gztzinv=Gczt.times(Zinv);  TetradMatrix Gzinvz=Zinv.times(Gcz);  TetradMatrix Gztinv2z=Gztzinv.times(Gzinvz);  TetradMatrix Gytzztzinv2z=Gytz.times(Gztinv2z);  TetradMatrix Gytzztzinv2zztx=Gytzztzinv2z.times(Gztx);  TetradMatrix Gyytzztzinv2zztx=Gcy.times(Gytzztzinv2zztx);  double second=0.0;  for (int i=0; i < m; i++) {    second+=matrixProductEntry(Gyytzztzinv2zztx,Gcxt,i,i);  }  empHSIC-=2 * second;  TetradMatrix Gxtz=Gcxt.times(Gcz);  TetradMatrix Gxtzztinv2z=Gxtz.times(Gztinv2z);  TetradMatrix Gyytzztzinv2zztxxtzztinv2z=Gyytzztzinv2zztx.times(Gxtzztinv2z);  for (int i=0; i < m; i++) {    empHSIC+=matrixProductEntry(Gyytzztzinv2zztxxtzztinv2z,Gczt,i,i);  }  double betaz=0.0;  for (int i=0; i < (m - 1); i++) {    for (int j=(i + 1); j < m; j++) {      betaz+=Math.pow(matrixProductEntry(Gcz,Gczt,i,j),2);      betaz+=Math.pow(matrixProductEntry(Gcz,Gczt,j,i),2);    }  }  empHSIC*=(m / (betaz * (m - 1)));  return empHSIC;}  }
class C{  @Override public String toString(){  return getGroup() + '.' + getName();}  }
class C{  @Ignore("TODO: test is disabled") @Test public void test3Commit2Rollback() throws Exception {  VM vm0=Host.getHost(0).getVM(0);  AsyncInvocation asyncObj1=vm0.invokeAsync(null);  ThreadUtils.join(asyncObj1,30 * 1000);  if (asyncObj1.exceptionOccurred()) {    Assert.fail("asyncObj1 failed",asyncObj1.getException());  }  vm0.invoke(null);}  }
class C{  private void appendSortedMethods(Map<String,PsiMethod> sortedMethods){switch (mSortPosition) {case START:    appendToStart(sortedMethods);  break;case END:appendToEnd(sortedMethods);break;default :appendToStart(sortedMethods);break;}}  }
class C{  private int headerSize(){  return getAlignment();}  }
class C{  public static String md5Hex(String data){  return HexUtil.toHexString(md5(data));}  }
class C{  public void copyMetaDataFrom(EncodedImage encodedImage){  mImageFormat=encodedImage.getImageFormat();  mWidth=encodedImage.getWidth();  mHeight=encodedImage.getHeight();  mRotationAngle=encodedImage.getRotationAngle();  mSampleSize=encodedImage.getSampleSize();  mStreamSize=encodedImage.getSize();}  }
class C{  public String generate(){  KeyNamePair docTypeKNPair=(KeyNamePair)cmbDocType.getSelectedItem();  String docActionSelected=(String)docAction.getValue();  return generate(panel.getStatusBar(),docTypeKNPair,docActionSelected);}  }
class C{  public void typedAdd() throws IOException {  writeCode(TYPED_ADD);}  }
class C{  public static boolean simpleCrossing(S2Point a,S2Point b,S2Point c,S2Point d){  S2Point ab=S2Point.crossProd(a,b);  S2Point cd=S2Point.crossProd(c,d);  double acb=-ab.dotProd(c);  double cbd=-cd.dotProd(b);  double bda=ab.dotProd(d);  double dac=cd.dotProd(a);  return (acb * cbd > 0) && (cbd * bda > 0) && (bda * dac > 0);}  }
class C{  public SnippetStub(String snippetMethodName,HotSpotProviders providers,HotSpotForeignCallLinkage linkage){  this(null,snippetMethodName,providers,linkage);}  }
class C{  protected void wrapUp() throws Exception {  m_target=null;  m_nEvals=m_kernel.numEvals();  m_nCacheHits=m_kernel.numCacheHits();  if ((m_SVM.getKernel() instanceof PolyKernel) && ((PolyKernel)m_SVM.getKernel()).getExponent() == 1.0) {    double[] weights=new double[m_data.numAttributes()];    for (int k=m_supportVectors.getNext(-1); k != -1; k=m_supportVectors.getNext(k)) {      for (int j=0; j < weights.length; j++) {        if (j != m_classIndex) {          weights[j]+=(m_alpha[k] - m_alphaStar[k]) * m_data.instance(k).value(j);        }      }    }    m_weights=weights;    m_alpha=null;    m_alphaStar=null;    m_kernel=null;  }  m_bModelBuilt=true;}  }
class C{  public static String bytesToHex(final byte[] bytes){  StringBuilder builder=new StringBuilder(bytes.length * 2);  for (int i=0; i < bytes.length; i++) {    builder.append(HEXCHARS[(bytes[i] & 0xff) >>> 4]);    builder.append(HEXCHARS[bytes[i] & 0xf]);    builder.append(' ');  }  return builder.toString();}  }
class C{  private void sessionRefreshForUAS() throws PayloadException, NetworkException {  if (mLogger.isActivated()) {    mLogger.debug("Session timer refresh (UAS role)");  }  if ((System.currentTimeMillis() - mLastSessionRefresh) >= mExpirePeriod) {    if (mLogger.isActivated()) {      mLogger.debug("Session timer refresh has failed: close the session");    }    mSession.terminateSession(TerminationReason.TERMINATION_BY_TIMEOUT);    ContactId contact=mSession.getRemoteContact();    mSession.getImsService().getImsModule().getCapabilityService().requestContactCapabilities(contact);  } else {    if (mLogger.isActivated()) {      mLogger.debug("Session timer refresh with success");    }    startProcessing();  }}  }
class C{  @Override public Response proxyRequest(ContainerRequestContext request,String baseUri) throws IOException {  String method=request.getMethod();  String requestURI=request.getUriInfo().getRequestUri().getPath();  CloseableHttpResponse proxiedResponse;switch (method) {case "GET":    proxiedResponse=executeRequest(new HttpGet(baseUri + requestURI),request);  break;case "PUT":proxiedResponse=executeRequest(new HttpPut(baseUri + requestURI),request);break;case "POST":proxiedResponse=executeRequest(new HttpPost(baseUri + requestURI),request);break;case "DELETE":proxiedResponse=executeRequest(new HttpDelete(baseUri + requestURI),request);break;case "PATCH":proxiedResponse=executeRequest(new HttpPatch(baseUri + requestURI),request);break;default :throw new IllegalStateException("Method not supported: " + method);}return getResponse(proxiedResponse);}  }
class C{  public void testBug20825727() throws Exception {  if (!versionMeetsMinimum(5,5,7)) {    return;  }  final String[] testDbUrls;  Properties props=new Properties();  props.setProperty("allowPublicKeyRetrieval","true");  if (this.sha256Conn != null && ((MySQLConnection)this.sha256Conn).versionMeetsMinimum(5,5,7)) {    testDbUrls=new String[]{BaseTestCase.dbUrl,sha256Url};  } else {    testDbUrls=new String[]{BaseTestCase.dbUrl};  }  for (  String testDbUrl : testDbUrls) {    com.mysql.jdbc.Connection testConn=(com.mysql.jdbc.Connection)getConnectionWithProps(testDbUrl,props);    Statement testStmt=testConn.createStatement();    this.rs=testStmt.executeQuery("SELECT @@GLOBAL.HAVE_SSL = 'YES' AS have_ssl");    final boolean sslEnabled=this.rs.next() && this.rs.getBoolean(1);    this.rs=testStmt.executeQuery("SHOW STATUS LIKE '%Rsa_public_key%'");    final boolean rsaEnabled=this.rs.next() && this.rs.getString(1).length() > 0;    System.out.println();    System.out.println("* Testing URL: " + testDbUrl + " [SSL enabled: "+ sslEnabled+ "]  [RSA enabled: "+ rsaEnabled+ "]");    System.out.println("******************************************************************************************************************************" + "*************");    System.out.printf("%-25s : %-25s : %s : %-25s : %-18s : %-18s [%s]%n","Connection Type","Auth. Plugin","pwd ","Encoding Prop.","Encoding Value","Server Encoding","TstRes");    System.out.println("------------------------------------------------------------------------------------------------------------------------------" + "-------------");    boolean clearTextPluginInstalled=false;    boolean secureAuthChanged=false;    try {      String[] plugins;      this.rs=testStmt.executeQuery("SELECT (PLUGIN_LIBRARY LIKE 'auth_test_plugin%') FROM INFORMATION_SCHEMA.PLUGINS" + " WHERE PLUGIN_NAME='cleartext_plugin_server'");      if (!this.rs.next() || !this.rs.getBoolean(1)) {        String ext=System.getProperty("os.name").toUpperCase().indexOf("WINDOWS") > -1 ? ".dll" : ".so";        testStmt.execute("INSTALL PLUGIN cleartext_plugin_server SONAME 'auth_test_plugin" + ext + "'");        clearTextPluginInstalled=true;      }      if (testConn.versionMeetsMinimum(5,7,5)) {        plugins=new String[]{"cleartext_plugin_server,-1","mysql_native_password,0","sha256_password,2"};      } else       if (testConn.versionMeetsMinimum(5,6,6)) {        plugins=new String[]{"cleartext_plugin_server,-1","mysql_native_password,0","mysql_old_password,1","sha256_password,2"};        testStmt.executeUpdate("SET @current_secure_auth = @@global.secure_auth");        testStmt.executeUpdate("SET @@global.secure_auth = off");        secureAuthChanged=true;      } else {        plugins=new String[]{"cleartext_plugin_server,-1","mysql_native_password,0","mysql_old_password,1"};      }      final String simplePwd="my\tpass word";      final String complexPwd="my\tp\u00e4ss w\u263ard";      for (      String encoding : new String[]{"","UTF-8","ISO-8859-1","US-ASCII"}) {        for (        String plugin : plugins) {          String pluginName=plugin.split(",")[0];          int pwdHashingMethod=Integer.parseInt(plugin.split(",")[1]);          String testStep="";          try {            testStep="create user";            testBug20825727CreateUser(testDbUrl,"testBug20825727",simplePwd,encoding,pluginName,pwdHashingMethod);            testStep="login with simple password";            testBug20825727TestLogin(testDbUrl,testConn.getEncoding(),sslEnabled,rsaEnabled,"testBug20825727",simplePwd,encoding,pluginName);            testStep="change password";            testBug20825727ChangePassword(testDbUrl,"testBug20825727",complexPwd,encoding,pluginName,pwdHashingMethod);            testStep="login with complex password";            testBug20825727TestLogin(testDbUrl,testConn.getEncoding(),sslEnabled,rsaEnabled,"testBug20825727",complexPwd,encoding,pluginName);          } catch (          SQLException e) {            e.printStackTrace();            fail("Failed at '" + testStep + "' using encoding '"+ encoding+ "' and plugin '"+ pluginName+ "'. See also system output for more details.");          } finally {            try {              dropUser(testStmt,"'testBug20825727'@'%'");            } catch (            Exception e) {            }          }        }      }    }  finally {      if (clearTextPluginInstalled) {        testStmt.executeUpdate("UNINSTALL PLUGIN cleartext_plugin_server");      }      if (secureAuthChanged) {        testStmt.executeUpdate("SET @@global.secure_auth = @current_secure_auth");      }      testStmt.close();      testConn.close();    }  }}  }
class C{  public void handlePeriodicMaintenance(Operation post){  post.complete();}  }
class C{  public boolean isValidContact(String contact) throws RcsPermissionDeniedException {  if (TextUtils.isEmpty(contact)) {    return false;  }  String strippedContact=stripSeparators(contact);  if (TextUtils.isEmpty(strippedContact)) {    return false;  }  if (strippedContact.startsWith(COUNTRY_CODE_PREFIX)) {    return true;  }  if (strippedContact.startsWith(MSISDN_PREFIX_INTERNATIONAL)) {    return true;  }  if (mCountryCode == null) {    tryToDetermineAndCacheCountryAndAreaCodes();  }  return TextUtils.isEmpty(mCountryAreaCode) || strippedContact.startsWith(mCountryAreaCode);}  }
class C{  public static LongArrayBitVector of(final int... bit){  final LongArrayBitVector bitVector=new LongArrayBitVector(bit.length);  for (  int b : bit)   bitVector.add(b);  return bitVector;}  }
class C{  public Permutation(int n,SecureRandom sr){  if (n <= 0) {    throw new IllegalArgumentException("invalid length");  }  perm=new int[n];  int[] help=new int[n];  for (int i=0; i < n; i++) {    help[i]=i;  }  int k=n;  for (int j=0; j < n; j++) {    int i=RandUtils.nextInt(sr,k);    k--;    perm[j]=help[i];    help[i]=help[k];  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  dnName.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  @Override protected void processAssociationOverride(AssociationOverrideMetadata associationOverride,EmbeddableMapping embeddableMapping,MetadataDescriptor owningDescriptor){  if (getMapping().isOneToOneMapping()) {    processAssociationOverride(associationOverride,embeddableMapping,owningDescriptor.getPrimaryTable(),owningDescriptor);  } else {    super.processAssociationOverride(associationOverride,embeddableMapping,owningDescriptor);  }}  }
class C{  public void reset(){  state=STATE_BEGIN_READING;  length=0;}  }
class C{  public void registerAdditionalContent(@NotNull RunnerLayoutUi ui){}  }
class C{  protected void addExtendedButtonDescription(final int buttonId,final String buttonLabel,final boolean isDefaultButton){  buttonDescriptions.add(new ButtonDescription(buttonId,buttonLabel,isDefaultButton));}  }
class C{  @RequestProcessing(value="/update",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class}) @After(adviceClass={CSRFToken.class,StopwatchEndAdvice.class}) public void showUpdateArticle(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final String articleId=request.getParameter("id");  if (Strings.isEmptyOrNull(articleId)) {    response.sendError(HttpServletResponse.SC_NOT_FOUND);    return;  }  final JSONObject article=articleQueryService.getArticleById(articleId);  if (null == article) {    response.sendError(HttpServletResponse.SC_NOT_FOUND);    return;  }  final JSONObject currentUser=Sessions.currentUser(request);  if (null == currentUser || !currentUser.optString(Keys.OBJECT_ID).equals(article.optString(Article.ARTICLE_AUTHOR_ID))) {    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/post.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  dataModel.put(Article.ARTICLE,article);  filler.fillHeaderAndFooter(request,response,dataModel);  final Auth auth=Auth.create(Symphonys.get("qiniu.accessKey"),Symphonys.get("qiniu.secretKey"));  final String uploadToken=auth.uploadToken(Symphonys.get("qiniu.bucket"));  dataModel.put("qiniuUploadToken",uploadToken);  dataModel.put("qiniuDomain",Symphonys.get("qiniu.domain"));  if (!Symphonys.getBoolean("qiniu.enabled")) {    dataModel.put("qiniuUploadToken","");  }}  }
class C{  @Override public synchronized void removeInstanceListener(InstanceListener tsl){  m_instanceListeners.removeElement(tsl);}  }
class C{  private boolean compareAndDecrementWorkerCount(int expect){  return ctl.compareAndSet(expect,expect - 1);}  }
class C{  public static InMemoryEventIndex create(){  return new InMemoryEventIndex(InMemoryTimestampedTable.create());}  }
class C{  public FunctionNode(final URI functionURI,final Map<String,Object> scalarValues,final ValueExpressionNode... args){  super(args,NV.asMap(new NV[]{new NV(Annotations.SCALAR_VALS,scalarValues),new NV(Annotations.FUNCTION_URI,functionURI)}));  if (functionURI == null)   throw new IllegalArgumentException();}  }
class C{  public static Bitmap loadBitmapOptimizedHQ(String fileName) throws ImageLoadException {  return loadBitmapOptimized(fileName,MAX_PIXELS_HQ);}  }
class C{  MyDate(int year,int month,int day){  this.year=year;  this.month=month;  this.day=day;}  }
class C{  public static void mergeTextures(File destination,File texturePack,double scale,boolean alphas,boolean lumas,ProgressCallback progress) throws Exception {  if (destination == null)   throw new IllegalArgumentException("destination cannot be null");  Log.info("Exporting textures to \"" + destination + "\"");  if (!destination.exists() || !destination.isDirectory()) {    if (destination.exists())     throw new RuntimeException("Cannot create texture directory! File is in the way!");    if (!destination.mkdir())     throw new RuntimeException("Cannot create texture directory!");  }  Map<String,Rectangle> ret=new HashMap<String,Rectangle>();  List<Texture> textures=getTextures(texturePack,scale,progress,alphas,true,destination);  double surface=0;  for (  Texture texture : textures) {    if (texture.repeating)     surface+=texture.image.getWidth() * texture.image.getHeight() * 9.0;    surface+=texture.image.getWidth() * texture.image.getHeight();  }  int maxwidth=(int)Math.sqrt(surface);  int wused=0, hused=0, hcurr=0, wmax=0, hmax=0;  for (  Texture texture : textures) {    if (wused > maxwidth) {      wused=0;      hused+=hcurr;      hcurr=0;    }    int w=texture.image.getWidth();    int h=texture.image.getHeight();    if (texture.repeating) {      ret.put(texture.name,new Rectangle(wused + w,hused + h,w,h));      w*=3;      h*=3;    } else {      ret.put(texture.name,new Rectangle(wused,hused,w,h));    }    wused+=w;    if (hcurr < h)     hcurr=h;    if (wmax < wused)     wmax=wused;    if (hmax < (hused + hcurr))     hmax=hused + hcurr;  }  for (int x=1; x < Short.MAX_VALUE; x*=2)   if (x >= wmax) {    wmax=x;    break;  }  for (int x=1; x < Short.MAX_VALUE; x*=2)   if (x >= hmax) {    hmax=x;    break;  }  Document doc=Xml.newDocument();  Element root=doc.createElement("textures");  root.setAttribute("width","" + wmax);  root.setAttribute("height","" + hmax);  doc.appendChild(root);  for (  Entry<String,Rectangle> entry : ret.entrySet()) {    Element el=doc.createElement("texture");    el.setTextContent(entry.getKey());    Rectangle rect=entry.getValue();    el.setAttribute("u","" + rect.x);    el.setAttribute("v","" + rect.y);    el.setAttribute("w","" + rect.width);    el.setAttribute("h","" + rect.height);    root.appendChild(el);  }  Xml.saveDocument(doc,new File(destination,"texture.uv"));  BufferedImage textureimage=new BufferedImage(wmax,hmax,BufferedImage.TYPE_4BYTE_ABGR);  Graphics2D gtex=textureimage.createGraphics();  BufferedImage lumaimage=new BufferedImage(wmax,hmax,BufferedImage.TYPE_4BYTE_ABGR);  Graphics2D gtexluma=lumaimage.createGraphics();  float texnum=textures.size();  float count=0;  for (  Texture texture : textures) {    Rectangle rect=ret.get(texture.name);    if (texture.repeating) {      for (int x=-1; x <= 1; x++)       for (int y=-1; y <= 1; y++) {        int sx=rect.x + x * rect.width;        int sy=rect.y + y * rect.height;        gtex.drawImage(texture.image,sx,sy,sx + rect.width,sy + rect.height,0,0,rect.width,rect.height,null);        if (lumas)         if (texture.luma)         gtexluma.drawImage(texture.image,sx,sy,sx + rect.width,sy + rect.height,0,0,rect.width,rect.height,null);      }    } else {      gtex.drawImage(texture.image,rect.x,rect.y,rect.x + rect.width,rect.y + rect.height,0,0,rect.width,rect.height,null);      if (lumas)       if (texture.luma)       gtexluma.drawImage(texture.image,rect.x,rect.y,rect.x + rect.width,rect.y + rect.height,0,0,rect.width,rect.height,null);    }    if (progress != null)     progress.setProgress((++count) / texnum);  }  ImageIO.write(textureimage,"png",new File(destination,"texture.png"));  if (lumas)   ImageIO.write(lumaimage,"png",new File(destination,"texture_luma.png"));  if (alphas) {    try {      convertToAlpha(textureimage);      ImageIO.write(textureimage,"png",new File(destination,"texture_a.png"));    } catch (    Exception e) {      Log.info("Cannot save alpha (" + e.getMessage() + ")");    }  }}  }
class C{  public EarCapabilityContainerTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public static void select(DbConnection conn,String sqlCompleta,DbOutputRecordSet rs) throws Exception {  DbSelectStatement stmt=null;  DbOutputRecord rec;  try {    stmt=new DbSelectStatement();    stmt.create(conn,sqlCompleta);    stmt.execute();    int count=0;    while (stmt.next() && count++ < rs.getMaxNumItems()) {      rec=rs.newRecord();      rec.getStatementValues(stmt);    }    stmt.release();  } catch (  Exception e) {    DbSelectStatement.ensureRelease(stmt,e);  }}  }
class C{  public void update(){  if (isClamped()) {    return;  }  updateRule.update(this);}  }
class C{  public static void writeObjectToFile(Object obj,String name) throws IOException {  File file=new File(name);  if (!file.exists()) {    File dir=new File(file.getParentFile().getAbsolutePath());    if (!dir.exists()) {      dir.mkdirs();    }    file.createNewFile();  }  byte[] data=serialize(obj);  try (FileOutputStream fop=new FileOutputStream(file)){    fop.write(data);    fop.flush();    fop.close();  } catch (  IOException e) {    log.error(e.getMessage(),e);  }}  }
class C{  public boolean checkRootBySuAccess(){  if (new ShellExecutor().executeCommand(SU_CHECK_COMMAND) != null) {    if (Constants.DEBUG_MODE_ENABLED) {      Log.d(TAG,"su command is enabled");    }    return true;  } else {    return false;  }}  }
class C{  public void noteUsedBy(ClassDefinition ref,long where,Environment env){  super.noteUsedBy(ref,where,env);  ClassDefinition def=this;  while (def.isInnerClass()) {    def=def.getOuterClass();  }  if (def.isPublic()) {    return;  }  while (ref.isInnerClass()) {    ref=ref.getOuterClass();  }  if (def.getSource().equals(ref.getSource())) {    return;  }  ((SourceClass)def).checkSourceFile(env,where);}  }
class C{  public static boolean isIntegral(TypeMirror type){switch (type.getKind()) {case BYTE:case CHAR:case INT:case LONG:case SHORT:    return true;default :  return false;}}  }
class C{  @Override public void clear(){  prepare(null);}  }
class C{  protected final void popN(int n,FilePosition endPos){  if (DEBUG)   System.err.println("popN(" + n + ", "+ endPos+ ")");  n=Math.min(n,openNodes.size() - 1);  while (--n >= 0) {    Node node=openNodes.remove(openNodes.size() - 1).n;    if (needsDebugData) {      Nodes.setFilePositionFor(node,FilePosition.span(Nodes.getFilePositionFor(node),endPos));      if (openNodes.size() == 1) {        FilePosition rootPos=Nodes.getFilePositionFor(rootElement);        if (rootPos.endCharInFile() <= 1) {          rootPos=Nodes.getFilePositionFor(rootElement.getFirstChild());        }        if (rootPos.startCharInFile() <= endPos.startCharInFile()) {          Nodes.setFilePositionFor(rootElement,FilePosition.span(rootPos,endPos));        }      }    }  }}  }
class C{  public String characters(){  return characters;}  }
class C{  public static boolean isETC2Supported(){  return (Capabilities.getGLESMajorVersion() >= 3);}  }
class C{  public void showNotification(final String styleName,final String caption,final String description,final Boolean autoClose){  decorate(styleName,caption,description,autoClose);  this.show(Page.getCurrent());}  }
class C{  private ManagedEntityConfigXmlGenerator(AdminDistributedSystem system){  this.system=system;}  }
class C{  public boolean processInclude(mxCodec dec,Node node,Object into){  if (node.getNodeType() == Node.ELEMENT_NODE && node.getNodeName().equalsIgnoreCase("include")) {    String name=((Element)node).getAttribute("name");    if (name != null) {      try {        Node xml=mxUtils.loadDocument(mxObjectCodec.class.getResource(name).toString()).getDocumentElement();        if (xml != null) {          dec.decode(xml,into);        }      } catch (      Exception e) {        System.err.println("Cannot process include: " + name);      }    }    return true;  }  return false;}  }
class C{  public void put(String key,T value){  CacheNode<T> old=pmap.get(key);  if (old != null)   remove(old);  if (pmap.size() >= capacity)   remove(lruLast);  CacheNode<T> node=new CacheNode<T>(key,value);  add(node);}  }
class C{  public String database(Properties props){  return props.getProperty(DBNAME_PROPERTY_KEY);}  }
class C{  public Quaterniond rotationAxis(double angle,double axisX,double axisY,double axisZ){  double hangle=angle / 2.0;  double sinAngle=Math.sin(hangle);  double invVLength=1.0 / Math.sqrt(axisX * axisX + axisY * axisY + axisZ * axisZ);  x=axisX * invVLength * sinAngle;  y=axisY * invVLength * sinAngle;  z=axisZ * invVLength * sinAngle;  w=(float)Math.cos(hangle);  return this;}  }
class C{  private void delayAudioNotification(){  mNotificationCountdown=20;}  }
class C{  public void validateMaximum(){  double newMax;  try {    newMax=Double.parseDouble(this.maximumRangeValue.getText());    if (newMax <= this.minimumValue) {      newMax=this.maximumValue;    }  } catch (  NumberFormatException e) {    newMax=this.maximumValue;  }  this.maximumValue=newMax;  this.maximumRangeValue.setText(Double.toString(this.maximumValue));}  }
class C{  public void upload(final InputStream in,String artifact,String version,String fileName,Properties props) throws IOException {  props.put(FILE_NAME_PROPERTY,fileName);  props.put(VERSION_PROPERTY,version);  props.put(ARTIFACT_PROPERTY,artifact);  storeProperties(artifact,version,props);  try (OutputStream out=newOutputStream(getArtifact(artifact,version,fileName))){    IOUtils.copyLarge(in,out);  }  finally {    in.close();  }}  }
class C{  public final ASTRewrite createRewrite(){  return createRewrite(nullProgressMonitor);}  }
class C{  private void assertOrientationSetup(CourseUnitNavigationActivity activity){  boolean isLandscape=activity.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;  ActionBar bar=activity.getSupportActionBar();  View courseUnitNavBar=activity.findViewById(R.id.course_unit_nav_bar);  assertNotNull(courseUnitNavBar);  View pagerView=activity.findViewById(R.id.pager);  assertNotNull(pagerView);  assertThat(pagerView).isInstanceOf(DisableableViewPager.class);  assertEquals(true,(pagerView).isEnabled());}  }
class C{  public ConstantLogisticModel(Parameter N0Parameter,Parameter N1Parameter,Parameter growthRateParameter,Parameter shapeParameter,double alpha,Type units){  this(ConstantLogisticModelParser.CONSTANT_LOGISTIC_MODEL,N0Parameter,N1Parameter,growthRateParameter,shapeParameter,alpha,units);}  }
class C{  public boolean isIngestionInProgress(){  return _ingestionInProgress;}  }
class C{  public GeneralizedSemImListEditor(GeneralizedSemIm semIm,Map<Object,EditorWindow> launchedEditors){  System.out.println("List editor : " + semIm);  this.semIm=semIm;  this.launchedEditors=launchedEditors;  GeneralizedSemPm semPm=semIm.getSemPm();  setLayout(new BorderLayout());  formulasBox=Box.createVerticalBox();  refreshLabels();  JScrollPane scroll=new JScrollPane(formulasBox);  scroll.setPreferredSize(new Dimension(450,450));  add(scroll,BorderLayout.CENTER);}  }
class C{  public static void updateServerTimestampHeader(MultiMap headers){  String serverTimestamp=headers.get(SERVER_TIMESTAMP_HEADER);  if (serverTimestamp == null) {    String nowAsISO=dfISO8601.print(Instant.now());    log.debug("Setting " + SERVER_TIMESTAMP_HEADER + " value to "+ nowAsISO+ "  since header "+ SERVER_TIMESTAMP_HEADER+ " is not defined");    headers.set(SERVER_TIMESTAMP_HEADER,nowAsISO);  } else {    String updatedTimestamp=localizeTimestamp(serverTimestamp);    if (!updatedTimestamp.equals(serverTimestamp)) {      log.debug("Updating" + SERVER_TIMESTAMP_HEADER + " value from "+ serverTimestamp+ "  to "+ updatedTimestamp);      headers.remove(SERVER_TIMESTAMP_HEADER);      headers.set(SERVER_TIMESTAMP_HEADER,updatedTimestamp);    }  }}  }
class C{  public void testNextLongBounded(){  SplittableRandom sr=new SplittableRandom();  for (int i=0; i < 2; i++)   assertEquals(0L,sr.nextLong(1L));  for (long bound=2; bound < MAX_LONG_BOUND; bound+=15485863) {    long f=sr.nextLong(bound);    assertTrue(0 <= f && f < bound);    int i=0;    long j;    while (i < NCALLS && (j=sr.nextLong(bound)) == f) {      assertTrue(0 <= j && j < bound);      ++i;    }    assertTrue(i < NCALLS);  }}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.405 -0500",hash_original_method="40BE022BD5AEEE3B1F4C24A599FDBBB4",hash_generated_method="2E4F8DD9FFAB812A4C4E1772928E04E9") public Bundle(){  mClassLoader=getClass().getClassLoader();}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String outputHeader=null;  float d=0;  int maxRadius=0;  String outputType=null;  boolean useLowest=false;  WhiteboxRaster dem;  WhiteboxRaster output;  int numCols, numRows;  double gridRes=1;  int x=0, y=0, row, col, i, j;  double elevationAB, elevationXY;  int radius;  double distance;  double heightDiff;  double tmpDistance;  double tmpHeightDiff;  boolean downslope;  double noData;  float progress=0;  double rad2deg=180 / Math.PI;  int minX=0, minY=0;  double minElev=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      d=Float.parseFloat(args[i]);    } else     if (i == 3) {      maxRadius=Integer.parseInt(args[i]);    } else     if (i == 4) {      outputType=args[i].toLowerCase();    } else     if (i == 5) {      useLowest=Boolean.parseBoolean(args[i]);    }  }  if ((demHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    updateProgress("Loop 1 of 2:",0);    if (useLowest) {      for (row=0; row < numRows; row++) {        for (col=0; col < numCols; col++) {          if (dem.getValue(row,col) == dem.getMinimumValue()) {            minX=col;            minY=row;            minElev=dem.getValue(row,col);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (numRows - 1));        updateProgress("Loop 1 of 2:",(int)progress);      }    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        radius=0;        downslope=false;        heightDiff=0;        distance=Float.MAX_VALUE;        elevationAB=dem.getValue(row,col);        if ((elevationAB != noData) && (elevationAB > dem.getMinimumValue() + d)) {          do {            radius=radius + 1;            for (i=-radius; i <= radius; i++) {              for (j=-radius; j <= radius; j++) {                if (Math.abs(i) > radius - 1 || Math.abs(j) > radius - 1) {                  x=col + i;                  y=row + j;                  elevationXY=dem.getValue(y,x);                  if (elevationXY != noData) {                    if (elevationAB - elevationXY > d) {                      tmpDistance=Math.sqrt(i * i + j * j) * gridRes;                      tmpHeightDiff=elevationAB - elevationXY;                      if (tmpDistance < distance) {                        downslope=true;                        distance=tmpDistance;                        heightDiff=tmpHeightDiff;                      }                    }                  }                }              }            }          } while ((radius < maxRadius) & (downslope == false));          if (downslope == true) {switch (outputType) {case "tangent":              output.setValue(row,col,heightDiff / distance);            break;case "degrees":          output.setValue(row,col,Math.atan(heightDiff / distance) * rad2deg);        break;case "radians":      output.setValue(row,col,Math.atan(heightDiff / distance));    break;case "distance":  output.setValue(row,col,distance);break;}} else if (useLowest == true) {distance=Math.sqrt(Math.pow((col - minX),2) + Math.pow((row - minY),2)) * gridRes;heightDiff=elevationAB - minElev;switch (outputType) {case "tangent":output.setValue(row,col,heightDiff / distance);break;case "degrees":output.setValue(row,col,Math.atan(heightDiff / distance) * rad2deg);break;case "radians":output.setValue(row,col,Math.atan(heightDiff / distance));break;case "distance":output.setValue(row,col,distance);break;}}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 2 of 2:",(int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());dem.close();output.close();returnData(outputHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void open() throws MediaException {  renderer.open();  if (mLogger.isActivated()) {    mLogger.debug("Media renderer stream opened");  }}  }
class C{  @Override public void panDomainAxes(double panRange,PlotRenderingInfo info,Point2D source){  XYPlot subplot=findSubplot(info,source);  if (subplot == null) {    return;  }  if (!subplot.isDomainPannable()) {    return;  }  PlotRenderingInfo subplotInfo=info.getSubplotInfo(info.getSubplotIndex(source));  if (subplotInfo == null) {    return;  }  for (int i=0; i < subplot.getDomainAxisCount(); i++) {    ValueAxis domainAxis=subplot.getDomainAxis(i);    if (domainAxis != null) {      domainAxis.pan(panRange);    }  }}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  PrintWriter out=null;  try {    String returnString=processPostRequest(request);    response.setContentType("application/json");    out=response.getWriter();    out.println(returnString);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  public static Sdk findAndroidSDK(){  Sdk[] allJDKs=ProjectJdkTable.getInstance().getAllJdks();  for (  Sdk sdk : allJDKs) {    if (sdk.getSdkType().getName().toLowerCase().contains("android")) {      return sdk;    }  }  return null;}  }
class C{  public boolean isLessThan(Days other){  if (other == null) {    return getValue() < 0;  }  return getValue() < other.getValue();}  }
class C{  public int size(){  return buttons.size();}  }
class C{  public void dropConstraints(DatabaseSession session,JPAMSchemaManager schemaManager){  dropConstraints(session,schemaManager,true);}  }
class C{  public synchronized void clearAll(){  projectHolder=null;  clearConfiguration();}  }
class C{  public static void deleteTabs(User user,DashBoard dash,int lastTabIndex){  List<Widget> zeroTabWidgets=new ArrayList<>();  int removedWidgetPrice=0;  for (  Widget widget : dash.widgets) {    if (widget.tabId > lastTabIndex) {      removedWidgetPrice+=widget.getPrice();    } else {      zeroTabWidgets.add(widget);    }  }  user.recycleEnergy(removedWidgetPrice);  dash.widgets=zeroTabWidgets.toArray(new Widget[zeroTabWidgets.size()]);  dash.updatedAt=System.currentTimeMillis();}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public static Object[] findMethodWithExactParameters(Object service,String methodName,Object[] args){  int numParams=(args == null) ? 0 : args.length;  log.debug(" num of params {}",numParams);  Method method=null;  try {    method=service.getClass().getMethod(methodName,ConversionUtils.convertParams(args));    log.debug("Exact method found (skipping list): {}",methodName);    return new Object[]{method,args};  } catch (  NoSuchMethodException nsme) {  }  List<Method> methods=ConversionUtils.findMethodsByNameAndNumParams(service,methodName,numParams);  log.debug("Found {} methods",methods.size());  if (methods.isEmpty()) {    return new Object[]{null,null};  } else   if (methods.size() == 1 && args == null) {    return new Object[]{methods.get(0),null};  } else   if (methods.size() > 1) {    log.debug("Multiple methods found with same name and parameter count.");    log.debug("Parameter conversion will be attempted in order.");  }  Object[] params=null;  for (int i=0; i < methods.size(); i++) {    method=methods.get(i);    boolean valid=true;    Class<?>[] paramTypes=method.getParameterTypes();    for (int j=0; j < args.length; j++) {      if ((args[j] == null && paramTypes[j].isPrimitive()) || (args[j] != null && !args[j].getClass().equals(paramTypes[j]))) {        valid=false;        break;      }    }    if (valid) {      return new Object[]{method,args};    }  }  for (int i=0; i < methods.size(); i++) {    try {      method=methods.get(i);      params=ConversionUtils.convertParams(args,method.getParameterTypes());      if (args.length > 0 && (args[0] instanceof IConnection) && (!(params[0] instanceof IConnection))) {        continue;      }      return new Object[]{method,params};    } catch (    Exception ex) {      log.debug("Parameter conversion failed for {}",method);    }  }  return new Object[]{null,null};}  }
class C{  protected ExecuteClause_Impl(){  super();}  }
class C{  public boolean isSetVersion(){  return EncodingUtils.testBit(__isset_bitfield,__VERSION_ISSET_ID);}  }
class C{  public JavaIndenter(Document document,JavaHeuristicScanner scanner){  Assert.isNotNull(document);  Assert.isNotNull(scanner);  fDocument=document;  fScanner=scanner;  fPrefs=new CorePrefs();}  }
class C{  public boolean isApi(String projectId){  return assocs.containsKey(projectId);}  }
class C{  public static serverObjects respond(final RequestHeader header,final serverObjects post,final serverSwitch env){  final serverObjects prop=new serverObjects();  int c=post == null ? 1 : post.getInt("c",0);  if (c > 0) {    prop.put("mode",0);    return prop;  }  prop.put("mode",1);  prop.put("mode_success",0);  if (post == null)   return prop;  String filename=post.get("data","");  if (filename.isEmpty()) {    prop.put("mode_success_message","file name is empty");    return prop;  }  if (!filename.startsWith(Fulltext.yacy_dump_prefix) || !filename.endsWith(".xml.gz")) {    prop.put("mode_success_message","no index dump file (" + Fulltext.yacy_dump_prefix + "*.xml.gz)");    return prop;  }  String dataString=post.get("data$file","");  if (dataString.length() == 0)   return prop;  byte[] data;  if (filename.endsWith(".base64")) {    data=Base64Order.standardCoder.decode(dataString);    filename=filename.substring(0,filename.length() - 7);  } else {    data=UTF8.getBytes(dataString);  }  if (data == null || data.length == 0)   return prop;  int ttp=filename.indexOf("_t");  if (ttp < 0)   return prop;  if (filename.charAt(ttp + 3) != '.')   return prop;  filename=filename.substring(0,ttp) + "_ts" + filename.substring(ttp + 3);  File tmpFile=new File(yacy.shareDumpDefaultPath,filename + ".tmp");  File finalFile=new File(yacy.shareDumpDefaultPath,filename);  try {    Files.copy(new ByteArrayInputStream(data),tmpFile.toPath(),StandardCopyOption.REPLACE_EXISTING);    tmpFile.renameTo(finalFile);  } catch (  IOException e) {    ConcurrentLog.logException(e);    return prop;  }  prop.put("mode_success",1);  return prop;}  }
class C{  public Dimension minimumLayoutSize(Container parent){  return preferredLayoutSize(parent);}  }
class C{  public static void removeAppender(FileAppender a){  A.notNull(a,"a");  fileAppenders.remove(a);}  }
class C{  JarDigestDepend(JarDepend jarDepend,long digest){  _jarDepend=jarDepend;  _depend=jarDepend.getDepend();  _isDigestModified=_depend.getDigest() != digest;}  }
class C{  public boolean equals(Object other){  if (other == null || !(other instanceof PolynomialGF2mSmallM)) {    return false;  }  PolynomialGF2mSmallM p=(PolynomialGF2mSmallM)other;  if ((field.equals(p.field)) && (degree == p.degree) && (isEqual(coefficients,p.coefficients))) {    return true;  }  return false;}  }
class C{  public void addAll(Set<? extends V> m){  tryPresize(m.size());  Iterator<? extends V> it=m.iterator();  while (it.hasNext()) {    putKey(it.next(),false);  }}  }
class C{  public ImageWriter compression(int compression){  this.compression=compression;  return this;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.writeObject(throwable);  serializeMessages(out);  serializeContext(out);}  }
class C{  public static void release(){  local.set(null);}  }
class C{  private static String prettyPrintDomain(Space space,PrettyPrintOptions options){  if (options != null && options.getStyle() == ReferenceStyle.NAME) {    return PrettyPrintConstant.OPEN_IDENT + space.getDomain().getName() + PrettyPrintConstant.CLOSE_IDENT;  } else {    return PrettyPrintConstant.IDENTIFIER_TAG + PrettyPrintConstant.OPEN_IDENT + space.getDomain().getOid()+ PrettyPrintConstant.CLOSE_IDENT;  }}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  protected void addClassPathes(final GroovyClassLoader classLoader){  if (classpath != null) {    for (int i=0; i < classpath.list().length; i++) {      classLoader.addClasspath(classpath.list()[i]);    }  }}  }
class C{  private Date createDate(final BitcoinController bitcoinController,Transaction transaction){  if (transaction.getUpdateTime() != null) {    return transaction.getUpdateTime();  }  Map<Sha256Hash,Integer> appearsIn=transaction.getAppearsInHashes();  if (appearsIn != null) {    if (!appearsIn.isEmpty()) {      Iterator<Sha256Hash> iterator=appearsIn.keySet().iterator();      if (iterator.hasNext()) {        Sha256Hash appearsInHash=iterator.next();        StoredBlock appearsInStoredBlock;        try {          if (bitcoinController != null && bitcoinController.getMultiBitService() != null && bitcoinController.getMultiBitService().getBlockStore() != null) {            appearsInStoredBlock=bitcoinController.getMultiBitService().getBlockStore().get(appearsInHash);            Block appearsInBlock=appearsInStoredBlock.getHeader();            return new Date(appearsInBlock.getTimeSeconds() * 1000);          }        } catch (        BlockStoreException e) {          e.printStackTrace();        }      }    }  }  return null;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public InlineQueryResultCachedVideoBuilder videoFileId(String videoFileId){  this.video_file_id=videoFileId;  return this;}  }
class C{  public InternalTranslationException(final Exception exception,final Instruction instruction){  super(exception);  m_instruction=instruction;}  }
class C{  public void updateInventory(UpdateInventoryInput input) throws Exception {  int sleep=ran.nextInt(1000);  Thread.sleep(sleep);  System.out.println("Inventory " + input.getPartId() + " updated");}  }
class C{  public void open(File file) throws IOException {  try (final InputStreamReader reader=new InputStreamReader(new FileInputStream(file),StandardCharsets.UTF_8)){    this.open(reader);  }   this.file=Optional.of(file);}  }
class C{  public ArrayList<Prediction> recognize(Gesture gesture){  Instance instance=Instance.createInstance(mSequenceType,mOrientationStyle,gesture,null);  return mClassifier.classify(mSequenceType,mOrientationStyle,instance.vector);}  }
class C{  public void makePackage(ClassLoader loader,String name) throws CannotCompileException {  Object[] args=new Object[]{name,null,null,null,null,null,null,null};  Throwable t;  try {    toClass2(definePackage,loader,args);    return;  } catch (  java.lang.reflect.InvocationTargetException e) {    t=e.getTargetException();    if (t == null)     t=e; else     if (t instanceof IllegalArgumentException) {      return;    }  }catch (  Exception e) {    t=e;  }  throw new CannotCompileException(t);}  }
class C{  public static byte toByte(NibbleArray nibbles,int start){  return toByte(nibbles.get(start),nibbles.get(start + 1));}  }
class C{  private HighTideValues findHighTide(JSONObject responseObject) throws JSONException, ParseException {  JSONArray predictions=(JSONArray)responseObject.get("predictions");  JSONObject lastPrediction=null, firstHighTide=null, secondHighTide=null, lowTide=null;  boolean firstTideDone=false;  for (int i=0; i < predictions.length(); i++) {    JSONObject prediction=(JSONObject)predictions.get(i);    if (lastPrediction == null) {      lastPrediction=prediction;      continue;    }    if (isTideIncreasing(lastPrediction,prediction)) {      if (!firstTideDone) {        firstHighTide=prediction;      } else {        secondHighTide=prediction;      }    } else {      if (!firstTideDone && firstHighTide != null) {        firstTideDone=true;      } else       if (secondHighTide != null) {        break;      }      if (firstTideDone) {        lowTide=prediction;      }    }    lastPrediction=prediction;  }  DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-d HH:mm");  return new HighTideValues(AlexaDateUtil.getFormattedTime(dateFormat.parse(firstHighTide.getString("t"))),getFormattedHeight(firstHighTide.getString("v")),AlexaDateUtil.getFormattedTime(dateFormat.parse(lowTide.getString("t"))),getFormattedHeight(lowTide.getString("v")),AlexaDateUtil.getFormattedTime(dateFormat.parse(secondHighTide.getString("t"))),getFormattedHeight(secondHighTide.getString("v")));}  }
class C{  public Cell(int c,int r){  this.col=c;  this.row=r;}  }
class C{  @Override public void update(DTNHost host){  if (this.passive)   return;  double curTime=SimClock.getTime();  if (curTime - this.lastPing >= this.interval) {    Message m=new Message(host,randomHost(),"ping" + SimClock.getIntTime() + "-"+ host.getAddress(),getPingSize());    m.addProperty("type","ping");    m.setAppID(APP_ID);    host.createNewMessage(m);    super.sendEventToListeners("SentPing",null,host);    this.lastPing=curTime;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static GPNodeConstraints constraintsFor(final String constraintsName,final EvolutionState state){  GPNodeConstraints myConstraints=(GPNodeConstraints)(((GPInitializer)state.initializer).nodeConstraintRepository.get(constraintsName));  if (myConstraints == null)   state.output.error("The GP node constraint \"" + constraintsName + "\" could not be found.");  return myConstraints;}  }
class C{  public SolrQuery addSort(String field,ORDER order){  return addSort(new SortClause(field,order));}  }
class C{  private void checkDestroyed(){  if (this.destroyed) {    IllegalStateException e=new IllegalStateException(LocalizedStrings.DLockToken_ATTEMPTING_TO_USE_DESTROYED_TOKEN_0.toLocalizedString(this));    throw e;  }}  }
class C{  protected double calculateLogCoalescentLikelihood(){  makeIntervalsKnown();  double currentLike=0;  double[] currentGamma=popSizeParameter.getParameterValues();  for (int i=0; i < fieldLength; i++) {    currentLike+=-currentGamma[i] - sufficientStatistics[i] * Math.exp(-currentGamma[i]);  }  return currentLike;}  }
class C{  public static String unquote(String s){  if (s == null)   return null;  if (s.length() < 2)   return s;  char first=s.charAt(0);  char last=s.charAt(s.length() - 1);  if (first != last || (first != '"' && first != '\''))   return s;  StringBuilder b=new StringBuilder(s.length() - 2);  boolean escape=false;  for (int i=1; i < s.length() - 1; i++) {    char c=s.charAt(i);    if (escape) {      escape=false;switch (c) {case 'n':        b.append('\n');      break;case 'r':    b.append('\r');  break;case 't':b.append('\t');break;case 'f':b.append('\f');break;case 'b':b.append('\b');break;case '\\':b.append('\\');break;case '/':b.append('/');break;case '"':b.append('"');break;case 'u':b.append((char)((TypeUtil.convertHexDigit((byte)s.charAt(i++)) << 24) + (TypeUtil.convertHexDigit((byte)s.charAt(i++)) << 16) + (TypeUtil.convertHexDigit((byte)s.charAt(i++)) << 8)+ (TypeUtil.convertHexDigit((byte)s.charAt(i++)))));break;default :b.append(c);}} else if (c == '\\') {escape=true;} else {b.append(c);}}return b.toString();}  }
class C{  public boolean isEmpty(){  return attrMap.isEmpty();}  }
class C{  public void drawHeader(RecyclerView recyclerView,Canvas canvas,View header,Rect offset){  canvas.save();  if (recyclerView.getLayoutManager().getClipToPadding()) {    Rect clipRect=getClipRectForHeader(recyclerView,header);    canvas.clipRect(clipRect);  }  canvas.translate(offset.left,offset.top);  header.draw(canvas);  canvas.restore();}  }
class C{  @Override public View createView(final String name,final String description){  final CView newView=m_module.getContent().getViewContainer().createView(name,description);  return ObjectFinders.getObject(newView,m_views);}  }
class C{  public UpdaterAppsAdapter(Activity activity){  mActivity=activity;  mUpdaterList=new ArrayList<>();  mUpdaterList.add(new AppStarterUpdater());  mUpdaterList.add(new KodiUpdater(activity));  mUpdaterList.add(new SPMCUpdater());}  }
class C{  public boolean empty(){  return m_firstFree == 0;}  }
class C{  private void ensureCapacity(int numMappings){  int newCapacity=Collections.roundUpToPowerOfTwo(capacityForInitSize(numMappings));  HashMapEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (newCapacity <= oldCapacity) {    return;  }  if (newCapacity == oldCapacity * 2) {    doubleCapacity();    return;  }  HashMapEntry<K,V>[] newTable=makeTable(newCapacity);  if (size != 0) {    int newMask=newCapacity - 1;    for (int i=0; i < oldCapacity; i++) {      for (HashMapEntry<K,V> e=oldTable[i]; e != null; ) {        HashMapEntry<K,V> oldNext=e.next;        int newIndex=e.hash & newMask;        HashMapEntry<K,V> newNext=newTable[newIndex];        newTable[newIndex]=e;        e.next=newNext;        e=oldNext;      }    }  }}  }
class C{  public String toString(){  return TradingCalendar.getFormattedDate(getOpen().toLocalDate(),"MM/dd/yyyy");}  }
class C{  public void updatePoiTypes(List<PoiType> newPoiTypes){  for (  PoiType newPoiType : newPoiTypes) {    PoiType byBackendId=poiTypeDao.findByBackendId(newPoiType.getBackendId());    if (byBackendId != null) {      newPoiType.setId(byBackendId.getId());    }    savePoiType(newPoiType);  }}  }
class C{  public static void fill(int[][] array){  for (int i=0; i < array.length; i++) {    for (int j=0; j < array[i].length; j++) {      array[i][j]=(int)(Math.random() * 2);    }  }}  }
class C{  public NodesStatsRequest breaker(boolean breaker){  this.breaker=breaker;  return this;}  }
class C{  private DataProviderEntity createDataProviderEntity(DataProviderCreateRequest request){  DataProviderEntity dataProviderEntity=new DataProviderEntity();  dataProviderEntity.setName(request.getDataProviderName());  return dataProviderEntity;}  }
class C{  protected void sequence_Cast(ISerializationContext context,Cast semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private static BitMatrix convertByteMatrixToBitMatrix(ByteMatrix matrix){  int matrixWidgth=matrix.getWidth();  int matrixHeight=matrix.getHeight();  BitMatrix output=new BitMatrix(matrixWidgth,matrixHeight);  output.clear();  for (int i=0; i < matrixWidgth; i++) {    for (int j=0; j < matrixHeight; j++) {      if (matrix.get(i,j) == 1) {        output.set(i,j);      }    }  }  return output;}  }
class C{  public void allowPublicVisibility(){  allowsPublicVisibility=true;}  }
class C{  public FromClause add(OuterJoinQualifier outerJoinQualifier){  outerJoinQualifiers.add(outerJoinQualifier);  return this;}  }
class C{  @Override protected void updateFromInput(){  parametersMap.clear();  attributesSet.clear();  JmxBeanSensorAssignment assignment=getInput();  if (null != assignment) {    domainText.setText(StringUtils.defaultString(assignment.getDomain()));    if (MapUtils.isNotEmpty(assignment.getObjectNameParameters())) {      parametersMap.putAll(assignment.getObjectNameParameters());    }    if (CollectionUtils.isNotEmpty(assignment.getAttributes())) {      allAttributesButton.setSelection(false);      attributesSet.addAll(assignment.getAttributes());      attributesTableViewer.getTable().setEnabled(true);      addAttributeButton.setEnabled(true);      removeAttributeButton.setEnabled(true);    } else {      allAttributesButton.setSelection(true);      attributesTableViewer.getTable().setEnabled(false);      addAttributeButton.setEnabled(false);      removeAttributeButton.setEnabled(false);    }  }  propertiesTableViewer.refresh();  attributesTableViewer.refresh();}  }
class C{  public static void ensureVirtualizedHere(@SuppressWarnings("unused") Object object){}  }
class C{  public void alignLeft(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new alignLeftAction(nodes));  }  int nMinX=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nX=getPositionX(nodes.get(iNode));    if (nX < nMinX || iNode == 0) {      nMinX=nX;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionX.set(nNode,nMinX);  }}  }
class C{  public boolean userCanEditDir(int connectedUserId,int dirId,String entidad) throws Exception {  boolean can=false;  int parentId;  int dirMgrId=ISicresAdminDefsKeys.NULL_ID;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    if (dirId == ISicresAdminDefsKeys.NULL_ID || dirId == ISicresAdminDefsKeys.ROOT_DIR_ID)     dirMgrId=0; else     dirMgrId=this.getDirMgrId(dirId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_EDIT,dirMgrId,ISicresAdminDefsKeys.NULL_ID,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public static <T>T parseHex2Byte2Json2Obj(String hex,Class<T> clazz){  String json=parseHex2Byte2Json(hex);  T obj=JacksonUtil.readValue(json,clazz);  return obj;}  }
class C{  public static Color ensureContrast(Color c1,Color c2){  double y1=getColorBrightness(c1);  double y2=getColorBrightness(c2);  if (abs(y1 - y2) < 125.0) {    if (y2 < 128.0) {      c1=setColorBrightness(c1,y2 + 125.0);    } else {      c1=setColorBrightness(c1,y2 - 125.0);    }  }  return c1;}  }
class C{  public int copyRecord(Properties ctx,String tableName,PO from){  int idBackup=0;  String colValue=null;  int tableID=get_IDWithColumn(ctx,"AD_Table","TableName",tableName);  POInfo poInfo=POInfo.getPOInfo(ctx,tableID,getTrxName(ctx));  for (int i=0; i < poInfo.getColumnCount(); i++) {    colValue=null;    int columnID=get_IDWithMasterAndColumn(ctx,"AD_Column","ColumnName",poInfo.getColumnName(i),"AD_Table",tableID);    StringBuffer sqlD=new StringBuffer("SELECT AD_Reference_ID FROM AD_COLUMN WHERE AD_Column_ID = '" + columnID + "'");    int referenceID=DB.getSQLValue(getTrxName(ctx),sqlD.toString());    idBackup=DB.getNextID(getClientId(ctx),"AD_Package_Imp_Backup",getTrxName(ctx));    sqlD=new StringBuffer("SELECT MAX(AD_PACKAGE_IMP_DETAIL_ID) FROM AD_PACKAGE_IMP_DETAIL");    int idDetail=DB.getSQLValue(getTrxName(ctx),sqlD.toString()) + 1;    if (referenceID == 10 || referenceID == 14 || referenceID == 34 || referenceID == 17)     if (from != null && from.get_Value(i) != null)     colValue=from.get_Value(i).toString().replaceAll("'","''"); else     if (referenceID == 20 || referenceID == 28)     if (from != null && from.get_Value(i) != null)     colValue=from.get_Value(i).toString().replaceAll("'","''"); else     ;    StringBuffer sqlB=new StringBuffer("INSERT INTO AD_Package_Imp_Backup").append("(AD_Client_ID, AD_Org_ID, CreatedBy, UpdatedBy, ").append("AD_PACKAGE_IMP_BACKUP_ID, AD_PACKAGE_IMP_DETAIL_ID, AD_PACKAGE_IMP_ID,").append(" AD_TABLE_ID, AD_COLUMN_ID, AD_REFERENCE_ID, COLVALUE)").append("VALUES(").append(" " + Env.getAD_Client_ID(ctx)).append(", " + Env.getAD_Org_ID(ctx)).append(", " + Env.getAD_User_ID(ctx)).append(", " + Env.getAD_User_ID(ctx)).append(", " + idBackup).append(", " + idDetail).append(", " + getPackageImpId(ctx)).append(", " + tableID).append(", " + (columnID == -1 ? "null" : columnID)).append(", " + (referenceID == -1 ? "null" : referenceID)).append(", '" + (colValue != null ? colValue : (from != null ? from.get_Value(i) : "null"))).append("')");    int no=DB.executeUpdate(sqlB.toString(),getTrxName(ctx));    if (no == -1)     log.info("Insert to import backup failed");  }  return idBackup;}  }
class C{  public void shouldContain(String expectedString){  if (!stdout.contains(expectedString) && !stderr.contains(expectedString)) {    reportDiagnosticSummary();    throw new RuntimeException("'" + expectedString + "' missing from stdout/stderr \n");  }}  }
class C{  public static String convertToJson(List<String> list) throws IOException {  @SuppressWarnings("deprecation") ObjectWriter ow=new ObjectMapper().defaultPrettyPrintingWriter();  return ow.writeValueAsString(list);}  }
class C{  void showValues(){  final StringBuilder values=new StringBuilder("[");  for (  final byte[] value : valuesRead) {    if (value == null) {      values.append("null ");    } else {      values.append(new String(value)).append(' ');    }  }  values.append(" ]");  System.out.println(padding + "values=" + values);}  }
class C{  protected boolean isRenderNullValues(){  return true;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeObject(m.comparator());  s.writeInt(m.size());  for (Iterator i=m.keySet().iterator(); i.hasNext(); )   s.writeObject(i.next());}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject){  build(namespace,name,nameAlias,elements,attributes,contentHandler,classObject);  if ((null != namespace) && (namespace.equals(Constants.S_XSLNAMESPACEURL) || namespace.equals(Constants.S_BUILTIN_EXTENSIONS_URL) || namespace.equals(Constants.S_BUILTIN_OLD_EXTENSIONS_URL))) {    schema.addAvailableElement(new QName(namespace,name));    if (null != nameAlias)     schema.addAvailableElement(new QName(namespace,nameAlias));  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null)   return stack.getUIMgr().getBoolean("native_output_resolution_switching",false) ? Boolean.TRUE : Boolean.FALSE; else   return Boolean.FALSE;}  }
class C{  protected final void quitNow(){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.quitNow();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.COMPOSITE_ELEMENT__REGIONS:    return ((InternalEList<?>)getRegions()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void testZonesAndTentsDisplayed(){  inUserLoginGoToLocationSelection();  inLocationSelectionCheckZonesAndTentsDisplayed();}  }
class C{  public SnmpOid toOid(){  return new SnmpOid(value);}  }
class C{  public void close(){  close(true);}  }
class C{  public static void addFocusDebugListeners(final org.eclipse.swt.widgets.Composite control,final Container topLevelComponent){  control.addFocusListener(_SWTFocusListener);  control.addListener(SWT.Activate,_SWTActivationListener);  control.addListener(SWT.Deactivate,_SWTActivationListener);  if (topLevelComponent instanceof Window) {    ((Window)topLevelComponent).addWindowFocusListener(_AWTWindowFocusListener);  }  addFocusListenerToTree(topLevelComponent);}  }
class C{  public void paintTabbedPaneTabBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex){}  }
class C{  public ASN1Primitive parsePublicKey() throws IOException {  ASN1InputStream aIn=new ASN1InputStream(keyData.getBytes());  return aIn.readObject();}  }
class C{  private void doTestWithErrorSimulator(HadoopErrorSimulator sim,IgfsPath inFile,boolean useNewMapper,boolean useNewCombiner,boolean useNewReducer) throws Exception {  assertTrue(HadoopErrorSimulator.setInstance(HadoopErrorSimulator.noopInstance,sim));  try {    doTest(inFile,useNewMapper,useNewCombiner,useNewReducer);  } catch (  Throwable t) {    System.out.println(t.toString());  }  assertTrue(HadoopErrorSimulator.setInstance(sim,HadoopErrorSimulator.noopInstance));  doTest(inFile,useNewMapper,useNewCombiner,useNewReducer);}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  @Override public boolean removeNodeConnection(UUID Node1,UUID Node2){  return (graphServer.removeEdge(Node1,Node2)) && (graphServer.removeEdge(Node2,Node1));}  }
class C{  public void testGradeElevationAndLatitudeLongitude(){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_settings),true);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.track_detail_stats_tab));  assertTrue(EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.settings_stats_units_title)));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_stats_grade_elevation));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_stats_coordinate));  EndToEndTestUtils.SOLO.goBack();  EndToEndTestUtils.SOLO.goBack();  EndToEndTestUtils.startRecording();  instrumentation.waitForIdleSync();  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.track_detail_stats_tab));  assertTrue(EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.stats_elevation),1,EndToEndTestUtils.NORMAL_WAIT_TIME,true));  assertTrue(EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.stats_grade)));  assertTrue(EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.stats_latitude)));  assertTrue(EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.stats_longitude)));  EndToEndTestUtils.stopRecording(true);  assertTrue(EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.stats_elevation),1,EndToEndTestUtils.NORMAL_WAIT_TIME,true));  assertTrue(EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.stats_grade)));  assertNull(EndToEndTestUtils.findTextView(trackListActivity.getString(R.string.stats_latitude)));  assertNull(EndToEndTestUtils.findTextView(trackListActivity.getString(R.string.stats_longitude)));}  }
class C{  private int scanElement(){  while (current != -1) {    if (current == '>') {      return CHARACTER_DATA_CONTEXT;    } else     if (XMLUtilities.isXMLSpace((char)current)) {      return ATTRIBUTE_NAME_CONTEXT;    }    nextChar();  }  if (current == -1) {    return EOF_CONTEXT;  }  return ELEMENT_CONTEXT;}  }
class C{  public int compareTo(CrawlDatum that){  if (that.score != this.score)   return (that.score - this.score) > 0 ? 1 : -1;  if (that.status != this.status)   return this.status - that.status;  if (that.fetchTime != this.fetchTime)   return (that.fetchTime - this.fetchTime) > 0 ? 1 : -1;  if (that.retries != this.retries)   return that.retries - this.retries;  if (that.fetchInterval != this.fetchInterval)   return (that.fetchInterval - this.fetchInterval) > 0 ? 1 : -1;  if (that.modifiedTime != this.modifiedTime)   return (that.modifiedTime - this.modifiedTime) > 0 ? 1 : -1;  return SignatureComparator._compare(this,that);}  }
class C{  public static long jenkins(final BitVector bv,final long seed){  final long length=bv.length();  long a, b, c, from=0;  if (length == 0)   return seed ^ 0x36071e726d0ba0c5L;  a=b=seed;  c=ARBITRARY_BITS;  while (length - from > Long.SIZE * 2) {    a+=bv.getLong(from,from + Long.SIZE);    b+=bv.getLong(from + Long.SIZE,from + 2 * Long.SIZE);    c+=bv.getLong(from + 2 * Long.SIZE,Math.min(from + 3 * Long.SIZE,length));    a-=b;    a-=c;    a^=(c >>> 43);    b-=c;    b-=a;    b^=(a << 9);    c-=a;    c-=b;    c^=(b >>> 8);    a-=b;    a-=c;    a^=(c >>> 38);    b-=c;    b-=a;    b^=(a << 23);    c-=a;    c-=b;    c^=(b >>> 5);    a-=b;    a-=c;    a^=(c >>> 35);    b-=c;    b-=a;    b^=(a << 49);    c-=a;    c-=b;    c^=(b >>> 11);    a-=b;    a-=c;    a^=(c >>> 12);    b-=c;    b-=a;    b^=(a << 18);    c-=a;    c-=b;    c^=(b >>> 22);    from+=3 * Long.SIZE;  }  c+=length;  long residual=length - from;  if (residual > 0) {    if (residual > Long.SIZE) {      a+=bv.getLong(from,from + Long.SIZE);      residual-=Long.SIZE;    }    if (residual != 0)     b+=bv.getLong(length - residual,length);  }  a-=b;  a-=c;  a^=(c >>> 43);  b-=c;  b-=a;  b^=(a << 9);  c-=a;  c-=b;  c^=(b >>> 8);  a-=b;  a-=c;  a^=(c >>> 38);  b-=c;  b-=a;  b^=(a << 23);  c-=a;  c-=b;  c^=(b >>> 5);  a-=b;  a-=c;  a^=(c >>> 35);  b-=c;  b-=a;  b^=(a << 49);  c-=a;  c-=b;  c^=(b >>> 11);  a-=b;  a-=c;  a^=(c >>> 12);  b-=c;  b-=a;  b^=(a << 18);  c-=a;  c-=b;  c^=(b >>> 22);  return c;}  }
class C{  public static void runTrialOneHelper(int size,TrialSuite set,IPoint[] pts,IPivotIndex selector,int ratio){  Integer[] ar=new Integer[size];  for (int i=0, idx=0; i < pts.length; i++) {    ar[idx++]=(int)(pts[i].getX() * BASE);    ar[idx++]=(int)(pts[i].getY() * BASE);  }  QuickSortOneHelper<Integer> qs=new QuickSortOneHelper<Integer>(ar);  qs.setThresholdRatio(ratio);  qs.setPivotMethod(selector);  System.gc();  long start=System.currentTimeMillis();  qs.qsort(0,size - 1);  long end=System.currentTimeMillis();  set.addTrial(size,start,end);  for (int i=0; i < ar.length - 1; i++) {    assert (ar[i] <= ar[i + 1]);  }}  }
class C{  public static Class<?> loadOrGetCachedClass(String className){  if (TextUtils.isEmpty(className)) {    LogUtils.log(Log.DEBUG,"Missing class name. Failed to load class.");    return null;  }  if (mCachedClasses.containsKey(className))   return mCachedClasses.get(className);  Class<?> insideClazz=null;  try {    insideClazz=ClassLoadingCache.class.getClassLoader().loadClass(className);    if (insideClazz == null) {      LogUtils.log(Log.DEBUG,"Failed to load class: %s",className);    }  } catch (  ClassNotFoundException e) {    LogUtils.log(Log.DEBUG,"Failed to load class: %s",className);  }  mCachedClasses.put(className,insideClazz);  return insideClazz;}  }
class C{  @Override public boolean isValidCombination(int minsPerWeek,DatePattern datePattern,TimePattern timePattern){  if (datePattern == null)   return false;  return minsPerWeek == timePattern.getNrMeetings() * timePattern.getMinPerMtg();}  }
class C{  public void doEntryPut(PutAllEntryData entry,DistributedRegion rgn){  @Released EntryEventImpl ev=PutAllMessage.createEntryEvent(entry,getSender(),this.context,rgn,this.possibleDuplicate,this.needsRouting,this.callbackArg,true,skipCallbacks);  try {    super.basicOperateOnRegion(ev,rgn);  }  finally {    if (ev.getVersionTag() != null && !ev.getVersionTag().isRecorded()) {      if (rgn.getVersionVector() != null) {        rgn.getVersionVector().recordVersion(getSender(),ev.getVersionTag());      }    }    ev.release();  }}  }
class C{  @Deprecated public static <K,V>Map<K,V> zip(Collection<? extends K> keys,V dfltVal){  A.notNull(keys,"keys");  Map<K,V> m=new HashMap<>(keys.size(),1.0f);  for (  K k : keys)   m.put(k,dfltVal);  return m;}  }
class C{  public boolean isLayoutIdInRecord(int layoutId){  return mLayoutIds != null && mLayoutIds.contains(layoutId);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    Rectangle visible=target.getVisibleRect();    Rectangle newVis=new Rectangle(visible);    int selectedIndex=target.getCaretPosition();    int scrollAmount=direction * target.getScrollableBlockIncrement(visible,SwingConstants.VERTICAL,direction);    int initialY=visible.y;    Caret caret=target.getCaret();    Point magicPosition=caret.getMagicCaretPosition();    if (selectedIndex != -1) {      try {        Rectangle dotBounds=target.modelToView(selectedIndex);        int x=(magicPosition != null) ? magicPosition.x : dotBounds.x;        int h=dotBounds.height;        if (h > 0) {          scrollAmount=scrollAmount / h * h;        }        newVis.y=constrainY(target,initialY + scrollAmount,visible.height);        int newIndex;        if (visible.contains(dotBounds.x,dotBounds.y)) {          newIndex=target.viewToModel(new Point(x,constrainY(target,dotBounds.y + scrollAmount,0)));        } else {          if (direction == -1) {            newIndex=target.viewToModel(new Point(x,newVis.y));          } else {            newIndex=target.viewToModel(new Point(x,newVis.y + visible.height));          }        }        newIndex=constrainOffset(target,newIndex);        if (newIndex != selectedIndex) {          int newY=getAdjustedY(target,newVis,newIndex);          if (direction == -1 && newY <= initialY || direction == 1 && newY >= initialY) {            newVis.y=newY;            if (select) {              target.moveCaretPosition(newIndex);            } else {              target.setCaretPosition(newIndex);            }          }        }      } catch (      BadLocationException ble) {      }    } else {      newVis.y=constrainY(target,initialY + scrollAmount,visible.height);    }    if (magicPosition != null) {      caret.setMagicCaretPosition(magicPosition);    }    target.scrollRectToVisible(newVis);  }}  }
class C{  static String toClassName(String s){  int i=s.indexOf('$');  if (i > 0)   s=s.substring(0,i);  return s.replace("/",".");}  }
class C{  public void addColumn(){  getColumnConstraints().add(new ColumnConstraints());}  }
class C{  protected WritableRaster(SampleModel sampleModel,DataBuffer dataBuffer,Point origin){  this(sampleModel,dataBuffer,new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);}  }
class C{  private Object populate(InputNode node,Object result) throws Exception {  Collection list=(Collection)result;  while (true) {    InputNode next=node.getNext();    if (next == null) {      return list;    }    list.add(root.read(next));  }}  }
class C{  public static void abruptallyTerminate(){  abruptTerminate=true;}  }
class C{  public static Object sync(Context cx,Scriptable thisObj,Object[] args,Function funObj){  if (args.length >= 1 && args.length <= 2 && args[0] instanceof Function) {    Object syncObject=null;    if (args.length == 2 && args[1] != Undefined.instance) {      syncObject=args[1];    }    return new Synchronizer((Function)args[0],syncObject);  } else {    throw reportRuntimeError("msg.sync.args");  }}  }
class C{  public MmsException(Throwable cause){  super(cause);}  }
class C{  public void testMembersPy2() throws Exception {  ensureCorrectMembersForHugeChild(false);}  }
class C{  protected String doMountObb(String obbFilePath,String key,int expectedState){  Log.i(LOG_TAG,"doMountObb() on " + obbFilePath + " using key: "+ key);  assertTrue("Null path was passed in for OBB file!",obbFilePath != null);  ObbListener obbListener=new ObbListener();  assertTrue("mountObb call failed",mSm.mountObb(obbFilePath,key,obbListener));  assertTrue("Failed to get OBB mount status change for file: " + obbFilePath,doWaitForObbStateChange(obbListener));  assertEquals("OBB mount state not what was expected!",expectedState,obbListener.state());  if (OnObbStateChangeListener.MOUNTED == expectedState) {    assertEquals(obbFilePath,obbListener.officialPath());    assertTrue("Obb should be mounted, but SM reports it is not!",mSm.isObbMounted(obbListener.officialPath()));  } else   if (OnObbStateChangeListener.UNMOUNTED == expectedState) {    assertFalse("Obb should not be mounted, but SM reports it is!",mSm.isObbMounted(obbListener.officialPath()));  }  assertEquals("Mount state is not what was expected!",expectedState,obbListener.state());  return obbListener.officialPath();}  }
class C{  @Override public void close(){}  }
class C{  public static void deleteCookieWebUser(HttpServletRequest request,HttpServletResponse response,String COOKIE_NAME){  Cookie cookie=new Cookie(COOKIE_NAME," ");  cookie.setComment("adempiere Web User");  cookie.setPath(request.getContextPath());  cookie.setMaxAge(1);  response.addCookie(cookie);}  }
class C{  private PropertyFilter(String filterString){  this.propertyNames=new HashSet<>();  for (  String token : SPLITTER.split(filterString)) {    if (token.length() > 0 && !token.equals(ALL)) {      for (      char ch : token.toCharArray()) {        if (Character.isWhitespace(ch) || ILLEGAL_CHARACTERS.indexOf(ch) != -1) {          throw new IllegalArgumentException(String.format("Invalid filter '%s' contains illegal characters.",filterString));        }      }      this.propertyNames.add(token);    } else {      throw new IllegalArgumentException(String.format("Invalid filter '%s'. Filter must contains either '*' OR comma-separated list of properties.",filterString));    }  }}  }
class C{  public void invalidateCache(){  isCacheValid=false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  XYDifferenceRenderer clone=(XYDifferenceRenderer)super.clone();  clone.legendLine=ShapeUtilities.clone(this.legendLine);  return clone;}  }
class C{  @Override public void propertyChange(PropertyChangeEvent evt){  if ("UI".equals(evt.getPropertyName())) {    slider.removeMouseMotionListener(this);    slider.removeMouseListener(this);    slider.removePropertyChangeListener("UI",this);    attachTo(slider);  }}  }
class C{  @Override public boolean removeAll(Collection<?> c){  for (  Object o : c) {    remove(o);  }  return true;}  }
class C{  public synchronized void store(LogConnection connection) throws ReplicatorException {  assertNotDone(connection);  if (writeConnection != null && writeConnection.isDone())   writeConnection=null;  int readConnectionsSize=readConnections.size();  for (int i=0; i < readConnectionsSize; i++) {    int index=readConnectionsSize - i - 1;    if (readConnections.get(index).isDone())     readConnections.remove(index);  }  if (!connection.isReadonly() && writeConnection != null)   throw new THLException("Write connection already exists: connection=" + writeConnection.toString());  if (connection.isReadonly())   readConnections.add(connection); else   writeConnection=connection;}  }
class C{  public final double doOperation() throws OperatorFailedException {  final double scale=(scaleFactor + (MathUtils.nextDouble() * ((1.0 / scaleFactor) - scaleFactor)));  double logq;  final Bounds<Double> bounds=variable.getBounds();  final int dim=variable.getSize();  if (scaleAllIndependently) {    logq=0;    for (int i=0; i < dim; i++) {      final double scaleOne=(scaleFactor + (MathUtils.nextDouble() * ((1.0 / scaleFactor) - scaleFactor)));      final double value=scaleOne * variable.getValue(i);      logq-=Math.log(scaleOne);      if (value < bounds.getLowerLimit(i) || value > bounds.getUpperLimit(i)) {        throw new OperatorFailedException("proposed value outside boundaries");      }      variable.setValue(i,value);    }  } else   if (scaleAll) {    if (degreesOfFreedom > 0)     logq=-degreesOfFreedom * Math.log(scale); else     logq=(dim - 2) * Math.log(scale);    for (int i=0; i < dim; i++) {      variable.setValue(i,variable.getValue(i) * scale);    }    for (int i=0; i < dim; i++) {      if (variable.getValue(i) < variable.getBounds().getLowerLimit(i) || variable.getValue(i) > variable.getBounds().getUpperLimit(i)) {        throw new OperatorFailedException("proposed value outside boundaries");      }    }  } else {    logq=-Math.log(scale);    int index;    if (indicator != null) {      final int idim=indicator.getDimension();      final boolean impliedOne=idim == (dim - 1);      int[] loc=new int[idim + 1];      int nLoc=0;      final boolean takeOne=indicatorOnProb >= 1.0 || MathUtils.nextDouble() < indicatorOnProb;      if (impliedOne && takeOne) {        loc[nLoc]=0;        ++nLoc;      }      for (int i=0; i < idim; i++) {        final double value=indicator.getStatisticValue(i);        if (takeOne == (value > 0)) {          loc[nLoc]=i + (impliedOne ? 1 : 0);          ++nLoc;        }      }      if (nLoc > 0) {        final int rand=MathUtils.nextInt(nLoc);        index=loc[rand];      } else {        throw new OperatorFailedException("no active indicators");      }    } else {      index=MathUtils.nextInt(dim);    }    final double oldValue=variable.getValue(index);    if (oldValue == 0) {      Logger.getLogger("dr.inference").warning("The " + ScaleOperatorParser.SCALE_OPERATOR + " for "+ variable.getVariableName()+ " has failed since the parameter has a value of 0.0."+ "\nTo fix this problem, initalize the value of "+ variable.getVariableName()+ " to be a positive real number");      throw new OperatorFailedException("");    }    final double newValue=scale * oldValue;    if (newValue < bounds.getLowerLimit(index) || newValue > bounds.getUpperLimit(index)) {      throw new OperatorFailedException("proposed value outside boundaries");    }    variable.setValue(index,newValue);    cleanupOperation(newValue,oldValue);  }  return logq;}  }
class C{  public void testCargoDaemonWelcomePage() throws Exception {  PingUtils.assertPingTrue("Cargo Daemon not started","Welcome to Cargo Daemon Web site",CargoDaemonDeployableTest.daemonUrl,logger);}  }
class C{  public boolean isSupportsMorphing(){  return supportsMorphing;}  }
class C{  public synchronized void updateCitationIdentifierForDOI(){  Preconditions.checkNotNull(eml);  if (doi != null) {    Citation citation=eml.getCitation();    if (identifierStatus.equals(IdentifierStatus.PUBLIC_PENDING_PUBLICATION) || identifierStatus.equals(IdentifierStatus.PUBLIC)) {      if (citation == null) {        setCitationAutoGenerated(true);        eml.setCitation(new Citation("Will be replaced by auto-generated citation",doi.getUrl().toString()));      } else {        citation.setIdentifier(doi.getUrl().toString());      }      log.debug("DOI=" + doi.getUrl().toString() + " set as resource's citation identifier");    } else     if (identifierStatus.equals(IdentifierStatus.UNAVAILABLE) || identifierStatus.equals(IdentifierStatus.UNRESERVED)) {      if (citation == null) {        setCitationAutoGenerated(true);        Citation generated=new Citation();        generated.setCitation("Will be replaced by auto-generated citation");        eml.setCitation(generated);      } else {        citation.setIdentifier(null);      }      log.debug("DOI=" + doi.getUrl().toString() + " unset as resource's citation identifier");    }  }}  }
class C{  public boolean isIndicesSupported(){  return indicesSupported;}  }
class C{  private Map<String,String> produceStream(String topic){  List<Integer> subnet=new ArrayList<>();  for (int i=1; i <= CNT; i++)   subnet.add(i);  Collections.shuffle(subnet);  List<ProducerRecord<String,String>> messages=new ArrayList<>(CNT);  Map<String,String> keyValMap=new HashMap<>();  for (int evt=0; evt < CNT; evt++) {    long runtime=System.currentTimeMillis();    String ip=KEY_PREFIX + subnet.get(evt);    String msg=runtime + VALUE_URL + ip;    messages.add(new ProducerRecord<>(topic,ip,msg));    keyValMap.put(ip,msg);  }  embeddedBroker.sendMessages(messages);  return keyValMap;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.JS_DOC_NODE__MARKERS:    getMarkers().clear();  getMarkers().addAll((Collection<? extends Marker>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  int send5Baud(int address) throws IOException {  int result=0;  setProtStat(ProtStatus.CONNECTING);  sendByte5Baud(address);  message="";  return (result);}  }
class C{  public static Object extractInnerConnectionFromBoneCP(Object pooledConnection) throws IOException {  return extractInnerConnectionFromPooledConnection(pooledConnection,BONECP_INNER_CONNECTION_VARNAME);}  }
class C{  public long epochMilli(){  return (value >> (SUB_MILLI_BITS + NODE_ID_BITS)) + START_OF_SEQUENCE_TIME;}  }
class C{  private Table createTableMetadata(String schema,String tableName,boolean header){  Table metadata=new Table(schema,tableName);  if (header) {    metadata.AddColumn(new Column("tungsten_opcode",Types.CHAR,1));    metadata.AddColumn(new Column("tungsten_seqno",Types.INTEGER));    metadata.AddColumn(new Column("tungsten_row_id",Types.INTEGER));    metadata.AddColumn(new Column("tungsten_commit_timestamp",Types.TIMESTAMP));  }  metadata.AddColumn(new Column("id",Types.INTEGER));  metadata.AddColumn(new Column("mydata",Types.VARCHAR));  return metadata;}  }
class C{  public final void testRemoveAllHelperTextIdsFromCollection(){  Collection<Integer> helperTextIds=new LinkedList<>();  helperTextIds.add(android.R.string.cancel);  helperTextIds.add(android.R.string.copy);  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTextIds(helperTextIds);  passwordEditText.addHelperTextId(android.R.string.copyUrl);  passwordEditText.removeAllHelperTextIds(helperTextIds);  passwordEditText.removeAllHelperTextIds(helperTextIds);  assertEquals(1,passwordEditText.getHelperTexts().size());  assertEquals(getContext().getText(android.R.string.copyUrl),passwordEditText.getHelperTexts().iterator().next());}  }
class C{  public DecoderException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public TeXParser(String parseString,ArrayOfAtoms aoa,boolean firstpass){  this(false,parseString,(TeXFormula)aoa,firstpass);}  }
class C{  public boolean isOpaque(){  if (!opaqueTested) {    opaque=Display.impl.isOpaque(this,image);    opaqueTested=true;  }  return opaque;}  }
class C{  public InlineQueryResultCachedPhotoBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  public static void addProvider(final String prefix,final ImageProvider provider){  if (API.manualAPI != null)   API.manualAPI.addProvider(prefix,provider);}  }
class C{  public static void frame(double x,double y,double z,double x2,double y2,double z2,Color color){  x=x - Minecraft.getMinecraft().getRenderManager().renderPosX;  y=y - Minecraft.getMinecraft().getRenderManager().renderPosY;  z=z - Minecraft.getMinecraft().getRenderManager().renderPosZ;  x2=x2 - Minecraft.getMinecraft().getRenderManager().renderPosX;  y2=y2 - Minecraft.getMinecraft().getRenderManager().renderPosY;  z2=z2 - Minecraft.getMinecraft().getRenderManager().renderPosZ;  GL11.glBlendFunc(770,771);  GL11.glEnable(GL_BLEND);  GL11.glLineWidth(2.0F);  GL11.glDisable(GL11.GL_TEXTURE_2D);  GL11.glDisable(GL_DEPTH_TEST);  GL11.glDepthMask(false);  RenderUtil.setColor(color);  RenderGlobal.drawOutlinedBoundingBox(new AxisAlignedBB(x,y,z,x2,y2,z2),-1);  GL11.glEnable(GL11.GL_TEXTURE_2D);  GL11.glEnable(GL_DEPTH_TEST);  GL11.glDepthMask(true);  GL11.glDisable(GL_BLEND);}  }
class C{  public final InternalDistributedMember basicGetPrimaryMember(){  return (InternalDistributedMember)this.primaryMember.get();}  }
class C{  public boolean resultToContext(){  return this.resultToContext;}  }
class C{  public CModulesTableMenu(final Window parent,final CDebugPerspectiveModel debugPerspectiveModel,final MemoryModule module){  Preconditions.checkNotNull(parent,"IE01458: Parent argument can not be null");  Preconditions.checkNotNull(module,"IE01459: Module argument can not be null");  add(CActionProxy.proxy(new CGotoModule(parent,debugPerspectiveModel,module)));}  }
class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new OutputLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    bufOff=0;    len-=gapLen;    inOff+=gapLen;    while (len > buf.length) {      resultLen+=cipher.processBlock(in,inOff,out,outOff + resultLen);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  if (bufOff == buf.length) {    resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);    bufOff=0;  }  return resultLen;}  }
class C{  public long length() throws IOException {  return inputReader.length();}  }
class C{  public void addNotify(ComponentPeer peer){  if (peer == componentPeer)   return;  componentPeer=peer;  for (Component c=component; c != null && peer instanceof LightweightPeer; c=c.getParent()) {    peer=c.getPeer();  }  if (peer instanceof DropTargetPeer) {    nativePeer=peer;    ((DropTargetPeer)peer).addDropTarget(this);  } else {    nativePeer=null;  }}  }
class C{  @Override protected void createEditPolicies(){  installEditPolicy(EditPolicy.CONTAINER_ROLE,new DiagramContainerEditPolicy());  installEditPolicy(EditPolicy.LAYOUT_ROLE,null);}  }
class C{  public String unify(String statement){  JSONArray table=this.getData();  if (table != null && table.length() > 0) {    JSONObject row=table.getJSONObject(0);    for (    String key : row.keySet()) {      int i=statement.indexOf("$" + key + "$");      if (i >= 0) {        statement=statement.substring(0,i) + row.get(key).toString() + statement.substring(i + key.length() + 2);      }    }  }  return statement;}  }
class C{  public DateMidnight(){  super();}  }
class C{  public final void run(){  while (boxes != null) {    if (isOnline()) {      clm.cleanup(JAR_TIMEOUT);      try {        Thread.sleep(REFRESHRATE);      } catch (      InterruptedException e) {      }    } else {      try {        Thread.sleep(1000);      } catch (      InterruptedException e) {      }    }    Thread.yield();  }}  }
class C{  public SnackbarBuilder callback(Snackbar.Callback callback){  callbackBuilder.callback(callback);  return this;}  }
class C{  public DefaultJvmLauncher(Java java){  this.java=java;}  }
class C{  private static BloomFilter<Integer> createBloomFilterAll(Hasher h,double falsePosProb,int expectedNbElemInFilter,int start,int end,int metric){  BloomFilter<Integer> bf=new BloomFilter<Integer>(h,falsePosProb,expectedNbElemInFilter,metric);  int i;  for (i=start; i <= end; i++) {    bf.add(i);  }  return bf;}  }
class C{  private Map<Unit,Collection<Unit>> transporting(final Collection<Unit> units){  return TransportTracker.transporting(units);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public ImageSharingDeleteTask(ImageSharingServiceImpl imageSharingService,RichcallService richcallService,LocalContentResolver contentResolver,ContactId contact){  super(contentResolver,ImageSharingData.CONTENT_URI,ImageSharingData.KEY_SHARING_ID,ImageSharingData.KEY_CONTACT,contact);  mImageSharingService=imageSharingService;  mRichcallService=richcallService;}  }
class C{  public static boolean isAncestor(final TreeNode node,final TreeNode parent){  if (parent == node) {    return true;  }  for (int i=0; i < parent.getChildCount(); i++) {    if (isAncestor(node,parent.getChildAt(i))) {      return true;    }  }  return false;}  }
class C{  public static String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.positivePaint=SerialUtilities.readPaint(stream);  this.negativePaint=SerialUtilities.readPaint(stream);  this.legendLine=SerialUtilities.readShape(stream);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public synchronized void sendVarsByWhiteboardId(ArrayList whiteboardObjParam,Long whiteboardId){  try {    Map whiteboardObj=new HashMap();    int i=0;    for (Iterator iter=whiteboardObjParam.iterator(); iter.hasNext(); ) {      Object obj=iter.next();      whiteboardObj.put(i,obj);      i++;    }    IConnection current=Red5.getConnectionLocal();    RoomClient currentClient=this.clientListManager.getClientByStreamId(current.getClient().getId());    if (currentClient == null) {      return;    }    Long room_id=currentClient.getRoom_id();    String action=whiteboardObj.get(2).toString();    if (action.equals("deleteMindMapNodes")) {      List actionObject=(List)whiteboardObj.get(3);      List<List> itemObjects=(List)actionObject.get(3);      Map whiteboardTempObj=new HashMap();      whiteboardTempObj.put(2,"delete");      for (      List itemObject : itemObjects) {        List<Object> tempActionObject=new LinkedList<Object>();        tempActionObject.add("mindmapnode");        tempActionObject.add(itemObject.get(0));        tempActionObject.add(null);        tempActionObject.add(null);        tempActionObject.add(null);        tempActionObject.add(null);        tempActionObject.add(null);        tempActionObject.add(null);        tempActionObject.add(itemObject.get(1));        whiteboardTempObj.put(3,tempActionObject);        WhiteboardManagement.getInstance().addWhiteBoardObjectById(room_id,whiteboardTempObj,whiteboardId);      }    } else {      WhiteboardManagement.getInstance().addWhiteBoardObjectById(room_id,whiteboardObj,whiteboardId);    }    Map<String,Object> sendObject=new HashMap<String,Object>();    sendObject.put("id",whiteboardId);    sendObject.put("param",whiteboardObjParam);    boolean showDrawStatus=getWhiteboardDrawStatus();    Collection<Set<IConnection>> conCollection=current.getScope().getConnections();    for (    Set<IConnection> conset : conCollection) {      for (      IConnection conn : conset) {        if (conn != null) {          if (conn instanceof IServiceCapableConnection) {            if (conn.getClient().getId().equals(current.getClient().getId())) {              continue;            }            RoomClient rcl=this.clientListManager.getSyncClientByStreamId(conn.getClient().getId());            if (rcl == null) {              continue;            }            if (!currentClient.getStreamid().equals(rcl.getStreamid())) {              ((IServiceCapableConnection)conn).invoke("sendVarsToWhiteboardById",new Object[]{showDrawStatus ? currentClient : null,sendObject},this);            }          }        }      }    }  } catch (  Exception err) {    log.error("[sendVarsByWhiteboardId]",err);  }}  }
class C{  public final static String CONSIST_STAT(int s){  return ((s & CONSIST_MASK) == CONSIST_MID) ? "Mid Consist" : (((s & CONSIST_MASK) == CONSIST_TOP) ? "Consist TOP" : (((s & CONSIST_MASK) == CONSIST_SUB) ? "Sub Consist" : "Not Consisted"));}  }
class C{  @Override public void endProcessTokens(){  if (tokens.isConnected()) {    tokens.emit(otuple);    otuple=null;  }}  }
class C{  public static void launchPreferenceDialog(){  create();  dlg.open();}  }
class C{  boolean checkIfChildObscuredBySibling(){  return true;}  }
class C{  public void schedule(String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,long endTime) throws JobManagerException {  schedule(serviceName,context,startTime,frequency,interval,-1,endTime);}  }
class C{  public ReferenceEntry(final AbstractReferenceMap<K,V> parent,final HashEntry<K,V> next,final int hashCode,final K key,final V value){  super(next,hashCode,null,null);  this.parent=parent;  this.key=toReference(parent.keyType,key,hashCode);  this.value=toReference(parent.valueType,value,hashCode);}  }
class C{  private static DroidsafeExecutionStatus common_init(IDroidsafeProgressMonitor monitor){  startTime=new Date();  monitor.subTask("Initializing Environment");  G.reset();  Project.v().init();  try {    File completedFile=new File(Project.v().getOutputDir() + File.separator + COMPLETION_FILE_NAME);    if (completedFile.exists() && !completedFile.isDirectory()) {      completedFile.delete();    }  } catch (  Exception e) {    logger.error("Could not delete completed file!",e);  }  SootConfig.init();  API.v().init();  Project.v().loadClasses();  Permissions.init();  ResourcesSoot.reset();  JimpleRelationships.reset();  AllocLocationModel.reset();  CallLocationModel.reset();  ObjectSensitivityCloner.reset();  RCFG.reset();  driverMsg("Create tags for the overriden system methods in user code.");  monitor.subTask("Create tags for overriden system methods");  TagImplementedSystemMethods.run();  monitor.worked(1);  if (monitor.isCanceled()) {    return DroidsafeExecutionStatus.CANCEL_STATUS;  }  return DroidsafeExecutionStatus.OK_STATUS;}  }
class C{  public boolean isZoomSliderVisible(){  return zoomSliderVisible;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS02.class,args);}  }
class C{  void verifyInResponseTo(Node nodeAssertion,Node nodeConfirmationData) throws AssertionValidationException {  if (!requestId.equals(XMLConverter.getStringAttValue(nodeConfirmationData,SamlXmlTags.ATTRIBUTE_IN_RESPONSE_TO))) {    String assertionId=XMLConverter.getStringAttValue(nodeAssertion,SamlXmlTags.ATTRIBUTE_ID);    AssertionValidationException exception=new AssertionValidationException(String.format("The assertion (id=%s) with the InResponse attribute: %s does not correspond to the request id: %s.",assertionId,XMLConverter.getStringAttValue(nodeConfirmationData,SamlXmlTags.ATTRIBUTE_IN_RESPONSE_TO),requestId),AssertionValidationException.ReasonEnum.WRONG_REQUEST,new String[]{assertionId,XMLConverter.getStringAttValue(nodeConfirmationData,SamlXmlTags.ATTRIBUTE_IN_RESPONSE_TO),requestId});    throw exception;  }}  }
class C{  public Label(Position position,String text,TextAttributes attributes){  if (position == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Label","constructor","missingPosition"));  }  this.position.set(position);  this.text=text;  this.attributes=attributes;}  }
class C{  public static void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public void markEdge(IGraphEntity n1,IGraphEntity n2){  String k1=getKey(n1);  String k2=getKey(n2);  Node<EdgePair> n=edges.head();  while (n != null) {    EdgePair ep=n.value();    if (ep.startKey.equals(k1) && ep.endKey.equals(k2)) {      ep.mark();      break;    }    n=n.next();  }}  }
class C{  private JSONArray readArray() throws JSONException {  JSONArray result=new JSONArray();  boolean hasTrailingSeparator=false;  while (true) {switch (nextCleanInternal()) {case -1:      throw syntaxError("Unterminated array");case ']':    if (hasTrailingSeparator) {      result.put(null);    }  return result;case ',':case ';':result.put(null);hasTrailingSeparator=true;continue;default :pos--;}result.put(nextValue());switch (nextCleanInternal()) {case ']':return result;case ',':case ';':hasTrailingSeparator=true;continue;default :throw syntaxError("Unterminated array");}}}  }
class C{  public static boolean isNotInstanceOf(final Object obj,final Class... types){  boolean condition=true;  if (types != null) {    for (int index=0; index < types.length && condition; index++) {      condition&=!types[index].isInstance(obj);    }  }  return condition;}  }
class C{  public void enter(NodeInfo element,Context context){  if (element.getNodeType() == NodeInfo.ELEMENT) {    if (TRACE) {      trace(indent + "<Instruction element=\"" + element.getDisplayName()+ "\" line=\""+ element.getLineNumber()+ "\">");      indent+=" ";    }    myDebugger.enter(new SaxonFrameImpl(myDebugger.getCurrentFrame(),context,(StyleElement)element));  }}  }
class C{  public InvalidateRegionOperation(RegionEventImpl event){  super(event);}  }
class C{  public EMail createEMail(MUser from,MUser to,String subject,String message,boolean html){  if (to == null) {    log.warning("No To user");    return null;  }  if (to.getEMail() == null || to.getEMail().length() == 0) {    log.warning("No To address: " + to);    return null;  }  return createEMail(from,to.getEMail(),subject,message,html);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean addFeatureVector(DBIDRef id,V vector){  if (contains(vector)) {    ids.add(id);    return true;  }  return false;}  }
class C{  private void onActionMove(MotionEvent event){  float x=event.getX();  float y=event.getY();switch (this.mode) {case DRAW:case ERASER:    if ((this.drawer != Drawer.QUADRATIC_BEZIER) && (this.drawer != Drawer.QUBIC_BEZIER)) {      if (!isDown) {        return;      }      Path path=this.getCurrentPath();switch (this.drawer) {case PEN:        path.lineTo(x,y);      break;case LINE:    path.reset();  path.moveTo(this.startX,this.startY);path.lineTo(x,y);break;case RECTANGLE:path.reset();path.addRect(this.startX,this.startY,x,y,Path.Direction.CCW);break;case CIRCLE:double distanceX=Math.abs((double)(this.startX - x));double distanceY=Math.abs((double)(this.startX - y));double radius=Math.sqrt(Math.pow(distanceX,2.0) + Math.pow(distanceY,2.0));path.reset();path.addCircle(this.startX,this.startY,(float)radius,Path.Direction.CCW);break;case ELLIPSE:RectF rect=new RectF(this.startX,this.startY,x,y);path.reset();path.addOval(rect,Path.Direction.CCW);break;default :break;}} else {if (!isDown) {return;}Path path=this.getCurrentPath();path.reset();path.moveTo(this.startX,this.startY);path.quadTo(this.controlX,this.controlY,x,y);}break;case TEXT:this.startX=x;this.startY=y;break;default :break;}}  }
class C{  public boolean step(){  boolean returnval=false;synchronized (state.schedule) {    Steppable[] _before2=before2;    Steppable[] _after2=after2;    System.arraycopy(before,0,before2,0,beforeSize);    System.arraycopy(after,0,after2,0,afterSize);    int _beforeSize=beforeSize;    int _afterSize=afterSize;    afterSize=0;    beforeSize=0;    for (int x=0; x < _beforeSize; x++)     _before2[x].step(state);    returnval=state.schedule.step(state);    for (int x=0; x < _afterSize; x++)     _after2[x].step(state);  }  return returnval;}  }
class C{  @Override protected void shutdownOutput() throws IOException {  try {    Libcore.os.shutdown(fd,SHUT_WR);  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsSocketException();  }}  }
class C{  public AuthenticationException(String message){  super(message);}  }
class C{  protected void writeDirect(byte[] b,int off,int len){  write(b,off,len);}  }
class C{  public static void zipFiles(OutputStream output,File... files) throws IOException {  try (ZipOutputStream zipOut=new ZipOutputStream(output)){    for (    File f : files) {      if (f.isDirectory()) {        addDirectoryEntry(zipOut,f.getName());        final String parentPath=f.getParentFile().getAbsolutePath();        addDirectoryRecursively(zipOut,parentPath,f,IoUtil.ANY_FILTER);      } else       if (f.isFile()) {        addFileEntry(zipOut,f.getName(),f);      }    }  } }  }
class C{  public void makeCurrent(EGLSurface eglSurface){  if (mEGLDisplay == EGL14.EGL_NO_DISPLAY) {    Log.d(TAG,"NOTE: makeCurrent w/o display");  }  if (!EGL14.eglMakeCurrent(mEGLDisplay,eglSurface,eglSurface,mEGLContext)) {    throw new RuntimeException("eglMakeCurrent failed");  }}  }
class C{  private void configureCharsetProperties() throws SQLException {  if (getEncoding() != null) {    try {      String testString="abc";      StringUtils.getBytes(testString,getEncoding());    } catch (    UnsupportedEncodingException UE) {      String oldEncoding=getEncoding();      try {        setEncoding(CharsetMapping.getJavaEncodingForMysqlCharset(oldEncoding));      } catch (      RuntimeException ex) {        SQLException sqlEx=SQLError.createSQLException(ex.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);        sqlEx.initCause(ex);        throw sqlEx;      }      if (getEncoding() == null) {        throw SQLError.createSQLException("Java does not support the MySQL character encoding '" + oldEncoding + "'.",SQLError.SQL_STATE_INVALID_CONNECTION_ATTRIBUTE,getExceptionInterceptor());      }      try {        String testString="abc";        StringUtils.getBytes(testString,getEncoding());      } catch (      UnsupportedEncodingException encodingEx) {        throw SQLError.createSQLException("Unsupported character encoding '" + getEncoding() + "'.",SQLError.SQL_STATE_INVALID_CONNECTION_ATTRIBUTE,getExceptionInterceptor());      }    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.EVENT_VALUE_REFERENCE_EXPRESSION__VALUE:    setValue((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  @Override public void frequencyChanged(FrequencyChangeEvent event){  if (event.getEvent() == Event.NOTIFICATION_CHANNEL_FREQUENCY_CORRECTION_CHANGE) {    mChannelFrequencyCorrection=event.getValue().intValue();  }}  }
class C{  public Page replaceAll(PageFactory factory){  return replaceAll(factory,new NoAnimationFactory());}  }
class C{  public static void instanceListToArffFileMultiLabel(File outputFile,FeatureStore featureStore,boolean useDenseInstances,boolean useWeights) throws Exception {  AttributeStore attributeStore=WekaFeatureEncoder.getAttributeStore(featureStore);  List<Attribute> outcomeAttributes=createOutcomeAttributes(new ArrayList<String>(featureStore.getUniqueOutcomes()));  for (  Attribute attribute : outcomeAttributes) {    attributeStore.addAttributeAtBegin(attribute.name(),attribute);  }  Instances wekaInstances=new Instances(RELATION_NAME + ": -C " + outcomeAttributes.size()+ " ",attributeStore.getAttributes(),featureStore.getNumberOfInstances());  wekaInstances.setClassIndex(outcomeAttributes.size());  if (!outputFile.exists()) {    outputFile.mkdirs();    outputFile.createNewFile();  }  ArffSaver saver=new ArffSaver();  saver.setRetrieval(Saver.INCREMENTAL);  saver.setFile(outputFile);  saver.setCompressOutput(true);  saver.setInstances(wekaInstances);  for (int i=0; i < featureStore.getNumberOfInstances(); i++) {    Instance instance=featureStore.getInstance(i);    double[] featureValues=getFeatureValues(attributeStore,instance);    List<String> instanceOutcome=instance.getOutcomes();    for (    Attribute label : outcomeAttributes) {      String labelname=label.name();      featureValues[attributeStore.getAttributeOffset(labelname)]=instanceOutcome.contains(labelname.split(CLASS_ATTRIBUTE_PREFIX)[1]) ? 1.0d : 0.0d;    }    weka.core.Instance wekaInstance;    if (useDenseInstances) {      wekaInstance=new DenseInstance(1.0,featureValues);    } else {      wekaInstance=new SparseInstance(1.0,featureValues);    }    wekaInstance.setDataset(wekaInstances);    Double instanceWeight=featureStore.getWeight(i);    if (useWeights) {      wekaInstance.setWeight(instanceWeight);    }    saver.writeIncremental(wekaInstance);  }  saver.writeIncremental(null);}  }
class C{  public boolean isEmpty(){  return count == 0;}  }
class C{  public static CCTextureAtlas textureAtlas(CCTexture2D tex,int capacity){  return new CCTextureAtlas(tex,capacity);}  }
class C{  protected TagElement makeTag(Element elem,boolean fictional){  return new TagElement(elem,fictional);}  }
class C{  public void testTUC1080(){  SecurityHelperTest.resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("test.ssl.alias.emptyKeystore.security.properties",true,TUNGSTEN_APPLICATION_NAME.ANY);    assertFalse("The keystore is empty: An exception should have been thrown",true);  } catch (  ServerRuntimeException e) {    assertTrue("There should not be any exception thrown",false);  }catch (  ConfigurationException e) {    assertTrue("That's expected: the keystore is empty",true);  }  SecurityHelperTest.resetSecuritySystemProperties();}  }
class C{  protected void startClients(ChannelPipelineFactory pipelineFactory){  final ClientBootstrap bootstrap=new ClientBootstrap(new NioClientSocketChannelFactory(bossExecutor,workerExecutor));  bootstrap.setOption("child.reuseAddr",true);  bootstrap.setOption("child.keepAlive",true);  bootstrap.setOption("child.tcpNoDelay",true);  bootstrap.setOption("child.sendBufferSize",SEND_BUFFER_SIZE);  bootstrap.setOption("child.connectTimeoutMillis",CONNECT_TIMEOUT);  bootstrap.setPipelineFactory(pipelineFactory);  clientBootstrap=bootstrap;  ScheduledExecutorService ses=syncManager.getThreadPool().getScheduledExecutor();  reconnectTask=new SingletonTask(ses,new ConnectTask());  reconnectTask.reschedule(0,TimeUnit.SECONDS);}  }
class C{  public void clearFilterChangeEvents(){  this.onFilterChange.clear();}  }
class C{  public static String toString(LuaTable table){  JSONObject obj=toJSONObject(table);  try {    return obj.toString(2);  } catch (  JSONException e) {    e.printStackTrace();  }  return obj.toString();}  }
class C{  @SuppressWarnings("unused") @Test public void testParentExitPartial(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    Region r=_createRegion("r",sc);{      State s1=_createState("s1",r);{        _createExitAssignment(v1,s1,1);        Region r_s1=_createRegion("r",s1);{          State s3=_createState("s3",r_s1);{            Region r_s3=_createRegion("r",s3);{              State s4=_createState("s4",r_s3);              _createExitAssignment(v1,s4,3);              State s5=_createState("s5",r_s3);            }          }        }      }      State s2=_createState("s2",r);{        Region r_s1=_createRegion("r",s2);{          _createState("s6",r_s1);        }      }    }  }  _createTransition(findState(sc,"s4"),findState(sc,"s6"));  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s1=flow.getStates().get(0);  assertEquals("sc.r.s1",_s1.getName());  assertNotNull(_s1.getExitAction());  ExecutionState _s3=flow.getStates().get(1);  assertEquals("sc.r.s1.r.s3",_s3.getName());  assertNull(_s3.getExitAction());  ExecutionState _s4=flow.getStates().get(2);  assertEquals("sc.r.s1.r.s3.r.s4",_s4.getName());  assertNotNull(_s4.getExitAction());  Reaction _t=_s4.getReactions().get(0);  assertTrue(_t.isTransition());  Sequence _effect=(Sequence)_t.getEffect();  assertEquals(2,_effect.getSteps().size());  assertCall(_effect,0,_s1.getExitSequence());}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case S:    return isSetS();}throw new IllegalStateException();}  }
class C{  public void testAddFirst(){  LinkedBlockingDeque q=populatedDeque(3);  q.pollLast();  q.addFirst(four);  assertSame(four,q.peekFirst());}  }
class C{  private void performTransitions(State msgProcessedState,Message msg){  State orgState=mStateStack[mStateStackTopIndex].state;  boolean recordLogMsg=mSm.recordLogRec(mMsg) && (msg.obj != mSmHandlerObj);  if (mLogRecords.logOnlyTransitions()) {    if (mDestState != null) {      mLogRecords.add(mSm,mMsg,mSm.getLogRecString(mMsg),msgProcessedState,orgState,mDestState);    }  } else   if (recordLogMsg) {    mLogRecords.add(mSm,mMsg,mSm.getLogRecString(mMsg),msgProcessedState,orgState,mDestState);  }  State destState=mDestState;  if (destState != null) {    while (true) {      if (mDbg)       mSm.log("handleMessage: new destination call exit/enter");      StateInfo commonStateInfo=setupTempStateStackWithStatesToEnter(destState);      invokeExitMethods(commonStateInfo);      int stateStackEnteringIndex=moveTempStateStackToStateStack();      invokeEnterMethods(stateStackEnteringIndex);      moveDeferredMessageAtFrontOfQueue();      if (destState != mDestState) {        destState=mDestState;      } else {        break;      }    }    mDestState=null;  }  if (destState != null) {    if (destState == mQuittingState) {      mSm.onQuitting();      cleanupAfterQuitting();    } else     if (destState == mHaltingState) {      mSm.onHalting();    }  }}  }
class C{  public static boolean isForbiddenSpeculation(RVMMethod caller,RVMMethod callee){  return caller.getDeclaringClass().isInBootImage() && !callee.getDeclaringClass().getDescriptor().isRVMDescriptor();}  }
class C{  protected void clearOutEvents(){}  }
class C{  protected boolean isArc(BayesNet bayesNet,int iAttributeHead,int iAttributeTail){  for (int iParent=0; iParent < bayesNet.getParentSet(iAttributeHead).getNrOfParents(); iParent++) {    if (bayesNet.getParentSet(iAttributeHead).getParent(iParent) == iAttributeTail) {      return true;    }  }  return false;}  }
class C{  public void sort(){  Arrays.sort(vector,0,size);}  }
class C{  public static Character toCharacter(String str) throws PageException {  return new Character(toCharValue(str));}  }
class C{  private boolean isDataValid(){  StringBuffer errors=new StringBuffer();  int errorNumber=0;  if (errorNumber > 0) {    JOptionPane.showMessageDialog(this,errors,Bundle.getMessage("ErrorOnPage"),JOptionPane.ERROR_MESSAGE);    return false;  }  return true;}  }
class C{  public void supportTlsIntolerantServer(SSLSocket socket){  socket.setEnabledProtocols(new String[]{"SSLv3"});}  }
class C{  public boolean hasNext(){  return hasNextInetSocketAddress() || hasNextProxy() || hasNextPostponed();}  }
class C{  public static void registerModWiki(String mod,IWikiProvider provider){  WikiHooks.registerModWiki(mod,provider);}  }
class C{  @Override public boolean showContextMenu(){  if (isPressed() && mSelectedPosition >= 0) {    int index=mSelectedPosition - mFirstPosition;    View v=getChildAt(index);    return dispatchLongPress(v,mSelectedPosition,mSelectedRowId);  }  return false;}  }
class C{  @Override public boolean isNumerical(){  return false;}  }
class C{  static public MetadataSettings CreateMetadataSettings(){  MetadataSettings metadataSettings=new MetadataSettingsImpl();  List<String> idFormats=new LinkedList<String>();  idFormats.add(SamlNames.EMAIL_ADDRESS);  idFormats.add(SamlNames.PERSISTENT);  List<SingleSignOnService> ssoServices=new LinkedList<SingleSignOnService>();  SingleSignOnService ssoService0=new SingleSignOnService(TestConfig.SsoService_loc,TestConfig.SsoService_binding_0);  ssoServices.add(ssoService0);  List<SingleLogoutService> idpSloServices=new LinkedList<SingleLogoutService>();  SingleLogoutService idpSloService0=new SingleLogoutService(TestConfig.IdpSloService_loc,TestConfig.IdpSloService_binding_0);  idpSloServices.add(idpSloService0);  IDPConfiguration idpConfiguration=new IDPConfiguration(TestConfig.tenantName,TestConfig.idpEntityID,TestUtils.getCertificate(),idFormats,ssoServices,idpSloServices);  List<String> spIDFormats=new LinkedList<String>();  spIDFormats.add(SamlNames.EMAIL_ADDRESS);  spIDFormats.add(SamlNames.PERSISTENT);  List<AssertionConsumerService> ascoServices=new LinkedList<AssertionConsumerService>();  AssertionConsumerService asco=new AssertionConsumerService(TestConfig.ACS0_endpoint,true,TestConfig.ACS0_binding,0);  ascoServices.add(asco);  List<SingleLogoutService> spSloServices=new LinkedList<SingleLogoutService>();  SingleLogoutService spSloServices0=new SingleLogoutService(TestConfig.SpSloService_loc,TestConfig.SpSloService_binding_0);  spSloServices.add(spSloServices0);  SPConfiguration spConfiguration=new SPConfiguration(TestConfig.tenantName,TestConfig.spEntityID,TestConfig.authnSigned,signingKey,null,TestConfig.SpSign_algorithm_URI,spIDFormats,ascoServices,spSloServices);  metadataSettings.addIDPConfiguration(idpConfiguration);  metadataSettings.addSPConfiguration(spConfiguration);  return metadataSettings;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public final LC insets(String s){  insets=ConstraintParser.parseInsets(s,true);  return this;}  }
class C{  public JettyResponseListener doConnect(final ConnectOptions opts) throws Exception {  assertHttpClientRunning();  final String requestURL=opts.getRequestURL(getContextPath(),getUseLBS());  final StringBuilder urlString=new StringBuilder(requestURL);  ConnectOptions.addQueryParams(urlString,opts.requestParams);  final boolean isLongRequestURL=urlString.length() > getMaxRequestURLLength();  if (isLongRequestURL && opts.method.equals("POST") && opts.entity == null) {    urlString.setLength(0);    urlString.append(requestURL);    opts.entity=ConnectOptions.getFormEntity(opts.requestParams);  } else   if (isLongRequestURL && opts.method.equals("GET") && opts.entity == null) {    opts.method="POST";    urlString.setLength(0);    urlString.append(requestURL);    opts.entity=ConnectOptions.getFormEntity(opts.requestParams);  }  if (log.isDebugEnabled()) {    log.debug("*** Request ***");    log.debug(requestURL);    log.debug(opts.method);    log.debug("query=" + opts.getRequestParam("query"));    log.debug(urlString.toString());  }  Request request=null;  try {    request=(HttpRequest)newRequest(urlString.toString(),opts.method);    if (opts.requestHeaders != null) {      for (      Map.Entry<String,String> e : opts.requestHeaders.entrySet()) {        request.header(e.getKey(),e.getValue());        if (log.isDebugEnabled())         log.debug(e.getKey() + ": " + e.getValue());      }    }    if (opts.entity != null) {      final EntityContentProvider cp=new EntityContentProvider(opts.entity);      request.content(cp,cp.getContentType());    }    final long queryTimeoutMillis;{      final String s=opts.getHeader(HTTP_HEADER_BIGDATA_MAX_QUERY_MILLIS);      queryTimeoutMillis=s == null ? -1L : StringUtil.toLong(s);    }    final JettyResponseListener listener=new JettyResponseListener(request,queryTimeoutMillis);    request.send(listener);    return listener;  } catch (  Throwable t) {    try {      if (request != null)       request.abort(t);    } catch (    Throwable t2) {      log.warn(t2);    }    throw new RuntimeException(requestURL + " : " + t,t);  }}  }
class C{  private void createNewTableEntry(String tableName,ADDataElement data2,Vector<String> keyColumnNames2,Vector<Column> columns) throws SQLException {  String insertStatement="INSERT INTO " + tableName + "(";  for (int i=0; i < columns.size(); i++) {    if (i != 0) {      insertStatement+=",";    }    insertStatement+=columns.get(i).getColumnName();  }  insertStatement+=")values(";  for (int i=0; i < columns.size(); i++) {    if (i != 0) {      insertStatement+=",";    }    String type=columns.get(i).getDataType();    String columnName=columns.get(i).getColumnName();    int precision=columns.get(i).getDataPrecision();    int scale=columns.get(i).getDataScale();    if (data2.getValueForColumn(columnName) == null) {      insertStatement+="null";    } else {      if (type.equals("BLOB")) {        insertStatement+="'" + data2.getValueForColumn(columnName).replaceAll("'","''") + "'";      } else       if (type.equals("RAW")) {      } else       if (type.equals("CLOB")) {        insertStatement+="'" + data2.getValueForColumn(columnName).replaceAll("'","''") + "'";      } else       if (type.equals("CHAR") || type.equals("NCHAR") || type.equals("NVARCHAR2")|| type.equals("VARCHAR2")) {        insertStatement+="'" + data2.getValueForColumn(columnName).replaceAll("'","''") + "'";      } else       if (type.equals("DATE")) {        String date=data2.getValueForColumn(columnName);        if (date.indexOf(' ') != -1) {          date=date.substring(0,date.indexOf(' '));        }        insertStatement+="to_date('" + date + "','"+ TIME_FORMAT+ "')";      } else       if (type.equals("NUMBER")) {        if (scale == 0) {          insertStatement+=data2.getValueForColumn(columnName);        } else {          insertStatement+=data2.getValueForColumn(columnName);        }      }    }  }  insertStatement+=");";  m_newTableEntry.add(insertStatement);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public static FeatureTreeNode createChildMetadataNode(String name,FeatureTreeNode parent) throws FeatureParsingException {  FeatureTreeNode node=new FeatureTreeNode(name,parent);  node.isMetadataNode=true;  return node;}  }
class C{  private void showEnrollementFailedErrorMessage(){  CommonDialogUtils.stopProgressDialog(progressDialog);  CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.error_enrollment_failed),getResources().getString(R.string.error_enrollment_failed_detail),getResources().getString(R.string.button_ok),senderIdFailedClickListener);}  }
class C{  @Override public int size(){  return mapping.length;}  }
class C{  private void startAuthentication(){  if (CommonUtils.isNetworkAvailable(context)) {    String clientId=Preference.getString(context,Constants.CLIENT_ID);    String clientSecret=Preference.getString(context,Constants.CLIENT_SECRET);    String clientName;    if (clientId == null || clientSecret == null) {      String clientCredentials=Preference.getString(context,getResources().getString(R.string.shared_pref_client_credentials));      if (clientCredentials != null) {        try {          JSONObject payload=new JSONObject(clientCredentials);          clientId=payload.getString(Constants.CLIENT_ID);          clientSecret=payload.getString(Constants.CLIENT_SECRET);          clientName=payload.getString(Constants.CLIENT_NAME);          if (clientName != null && !clientName.isEmpty()) {            Preference.putString(context,Constants.CLIENT_NAME,clientName);          }          if (clientId != null && !clientId.isEmpty() && clientSecret != null && !clientSecret.isEmpty()) {            initializeIDPLib(clientId,clientSecret);          }        } catch (        JSONException e) {          String msg="error occurred while parsing client credential payload";          Log.e(TAG,msg,e);          CommonDialogUtils.stopProgressDialog(progressDialog);          showInternalServerErrorMessage();        }      } else {        String msg="error occurred while retrieving client credentials";        Log.e(TAG,msg);        CommonDialogUtils.stopProgressDialog(progressDialog);        showInternalServerErrorMessage();      }    } else {      initializeIDPLib(clientId,clientSecret);    }  } else {    CommonDialogUtils.stopProgressDialog(progressDialog);    CommonDialogUtils.showNetworkUnavailableMessage(context);  }}  }
class C{  ByteString readByteString() throws IOException {  int firstByte=readByte();  boolean huffmanDecode=(firstByte & 0x80) == 0x80;  int length=readInt(firstByte,PREFIX_7_BITS);  if (huffmanDecode) {    return ByteString.of(Huffman.get().decode(source.readByteArray(length)));  } else {    return source.readByteString(length);  }}  }
class C{  @Category(FlakyTest.class) @Test public void testPartitionedRegionWithPersistentGatewaySender(){  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  createReceiverInVMs(vm2,vm3);  LogWriterUtils.getLogWriter().info("Created remote receivers");  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  LogWriterUtils.getLogWriter().info("Created local site cache");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("Created local site senders");  vm4.invoke(createPartitionedRegionRunnable());  vm5.invoke(createPartitionedRegionRunnable());  vm6.invoke(createPartitionedRegionRunnable());  vm7.invoke(createPartitionedRegionRunnable());  LogWriterUtils.getLogWriter().info("Created local site persistent PR");  startSenderInVMs("ln",vm4,vm5,vm6,vm7);  LogWriterUtils.getLogWriter().info("Started the senders");  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm2.invoke(null);  vm3.invoke(null);}  }
class C{  private void writeStringToFile(String str,File file) throws IOException {  if (!file.exists() && file.isDirectory()) {    return;  }  try (BufferedWriter bw=new BufferedWriter(WriterFactory.newWriter(file,this.encoding))){    bw.write(str);  } }  }
class C{  public String toString(ObjectMatrix1D matrix){  ObjectMatrix2D easy=matrix.like2D(1,matrix.size());  easy.viewRow(0).assign(matrix);  return toString(easy);}  }
class C{  @Override public void freeAllChunks(Address anyChunk){  lock.acquire();  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(anyChunk.EQ(Conversions.chunkAlign(anyChunk,true)));  if (!anyChunk.isZero()) {    int chunk=getChunkIndex(anyChunk);    while (nextLink[chunk] != 0) {      freeContiguousChunks(nextLink[chunk]);    }    while (prevLink[chunk] != 0) {      freeContiguousChunks(prevLink[chunk]);    }    freeContiguousChunks(chunk);  }  lock.release();}  }
class C{  public CLoadProjectAction(final JTree projectTree,final INaviProject[] projects){  super("Load Project");  m_projectTree=Preconditions.checkNotNull(projectTree,"IE01904: Project tree argument can not be null");  m_projects=Preconditions.checkNotNull(projects,"IE01905: Projects argument can't be null").clone();  for (  final INaviProject project : projects) {    Preconditions.checkNotNull(project,"IE01906: Projects list contains a null-element");  }  putValue(ACCELERATOR_KEY,HotKeys.LOAD_HK.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_LOAD_PROJECT".charAt(0));}  }
class C{  public TextEditor trim(){  text=new StringBuffer(text.toString().trim());  return this;}  }
class C{  public void unread(char ch) throws IOException {  this.currentReader.pbReader.unread(ch);}  }
class C{  public Long dbSize(){  checkIsInMulti();  client.dbSize();  return client.getIntegerReply();}  }
class C{  public static String[] split(String src,String delimiter){  int maxparts=(src.length() / delimiter.length()) + 2;  int[] positions=new int[maxparts];  int dellen=delimiter.length();  int i, j=0;  int count=0;  positions[0]=-dellen;  while ((i=src.indexOf(delimiter,j)) != -1) {    count++;    positions[count]=i;    j=i + dellen;  }  count++;  positions[count]=src.length();  String[] result=new String[count];  for (i=0; i < count; i++) {    result[i]=src.substring(positions[i] + dellen,positions[i + 1]);  }  return result;}  }
class C{  public final GVector scale(GVector v){  if (length != v.length) {    throw new MatrixSizeException();  }  double[] tmp=new double[length];  for (int i=0; i < length; i++) {    tmp[i]=values[i] * v.values[i];  }  return new GVector(tmp);}  }
class C{  @Override public void checkPermission(Permission perm){  if (perm instanceof FilePermission) {  } else   if (perm instanceof SocketPermission) {    SocketPermission sp=(SocketPermission)perm;    h_Socket(sp);  } else   if (perm instanceof RuntimePermission) {    RuntimePermission rp=(RuntimePermission)perm;    h_Runtime(rp);  }}  }
class C{  public void testCreate(){  System.out.println("create");  ContentDataService contentDataService=null;  Downloader downloader=null;  Map<String,String> fileMap=null;  DateFactory dateFactory=null;  FileContentLoaderFactoryImpl instance=new FileContentLoaderFactoryImpl();  ContentLoader contentLoader=instance.create(contentDataService,downloader,dateFactory,fileMap);  assertTrue(contentLoader instanceof FileContentLoaderImpl);}  }
class C{  public static boolean isAcute(Coordinate a,Coordinate b,Coordinate c){  if (!Angle.isAcute(a,b,c))   return false;  if (!Angle.isAcute(b,c,a))   return false;  if (!Angle.isAcute(c,a,b))   return false;  return true;}  }
class C{  public NameClassPair(String name,String className,boolean isRelative){  this.name=name;  this.className=className;  this.isRel=isRelative;}  }
class C{  public TextTable(CoverageTable cov,TileDirectory tile) throws FormatException {  super(cov,tile,"txt");  if ((coordColumn=whatColumn("shape_line")) == -1) {    throw new FormatException("texttable couldn't get " + "shape_line column");  }  if ((textColumn=whatColumn("string")) == -1) {    throw new FormatException("texttable couldn't get " + "string column");  }}  }
class C{  public long calculatedChecksum(){  return this.data.checksum();}  }
class C{  private Element encodeEntityInstance(HashSet<Entity> visited,final Entity entity,final Element parent,boolean isRef,MetaClass metaClass,View view) throws InvocationTargetException, NoSuchMethodException, IllegalAccessException {  if (!readPermitted(metaClass))   return null;  if (parent == null)   throw new NullPointerException("No parent specified");  Document doc=parent.getOwnerDocument();  if (doc == null)   throw new NullPointerException("No document specified");  if (entity == null) {    return encodeRef(parent,entity);  }  isRef|=!visited.add(entity);  if (isRef) {    return encodeRef(parent,entity);  }  Element root=doc.createElement(ELEMENT_INSTANCE);  parent.appendChild(root);  root.setAttribute(ATTR_ID,ior(entity));  MetadataTools metadataTools=AppBeans.get(MetadataTools.NAME);  List<MetaProperty> properties=ConverterHelper.getOrderedProperties(metaClass);  for (  MetaProperty property : properties) {    Element child;    if (!attrViewPermitted(metaClass,property.getName()))     continue;    if (!isPropertyIncluded(view,property,metadataTools)) {      continue;    }    Object value=entity.getValue(property.getName());switch (property.getType()) {case DATATYPE:      String nodeType;    if (property.equals(metadataTools.getPrimaryKeyProperty(metaClass)) && !property.getJavaType().equals(String.class)) {      continue;    } else     if (property.getAnnotatedElement().isAnnotationPresent(Version.class)) {      nodeType="version";    } else {      nodeType="basic";    }  child=doc.createElement(nodeType);child.setAttribute(ATTR_NAME,property.getName());if (value == null) {encodeNull(child);} else {String str=property.getRange().asDatatype().format(value);encodeBasic(child,str,property.getJavaType());}break;case ENUM:child=doc.createElement("enum");child.setAttribute(ATTR_NAME,property.getName());if (value == null) {encodeNull(child);} else {String str=property.getRange().asEnumeration().format(value);encodeBasic(child,str,property.getJavaType());}break;case COMPOSITION:case ASSOCIATION:{MetaClass meta=propertyMetaClass(property);if (!readPermitted(meta)) {child=null;break;}View propertyView=(view == null ? null : view.getProperty(property.getName()).getView());if (!property.getRange().getCardinality().isMany()) {boolean isEmbedded=property.getAnnotatedElement().isAnnotationPresent(Embedded.class);child=doc.createElement(isEmbedded ? "embedded" : property.getRange().getCardinality().name().replace(UNDERSCORE,DASH).toLowerCase());child.setAttribute(ATTR_NAME,property.getName());if (isEmbedded) {encodeEntityInstance(visited,(Entity)value,child,false,property.getRange().asClass(),propertyView);} else {encodeEntityInstance(visited,(Entity)value,child,false,property.getRange().asClass(),propertyView);}} else {child=doc.createElement(getCollectionReferenceTag(property));child.setAttribute(ATTR_NAME,property.getName());child.setAttribute(ATTR_MEMBER_TYPE,typeOfEntityProperty(property));if (value == null) {encodeNull(child);break;}Collection<?> members=(Collection<?>)value;for (Object o : members) {Element member=doc.createElement(ELEMENT_MEMBER);child.appendChild(member);if (o == null) {encodeNull(member);} else {encodeEntityInstance(visited,(Entity)o,member,true,property.getRange().asClass(),propertyView);}}}break;}default :throw new IllegalStateException("Unknown property type");}if (child != null) {root.appendChild(child);}}return root;}  }
class C{  public void registerVariable(String label){  if (!variables.containsKey(label)) {    variables.put(label,nextReservableAddress);  }  if (constants.containsKey(label)) {    System.out.println(label + " is now a variable!");    constants.remove(label);  }}  }
class C{  public void closeConnection() throws IOException {  if (!isConnected())   return;  socket.close();}  }
class C{  public void createServer(VM server){  createServer(server,0,false,0);}  }
class C{  public long timeout(){  return timeout;}  }
class C{  public FMDemodulatorModule(int pass,int stop){  assert (stop > pass);  mIQFilter=new ComplexFIRFilter_CB_CB(FilterFactory.getLowPass(SAMPLE_RATE,pass,stop,60,WindowType.HAMMING,true),1.0f);  mDemodulator=new FMDemodulator_CB(1.0f);  mIQFilter.setListener(mDemodulator);}  }
class C{  static void checkSignedShort(final int value,final String msg){  if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {    throw new IllegalArgumentException(msg + " (must be a signed short): " + value);  }}  }
class C{  public void changeDomain(Domain domain){  this.domain=domain;  changeSettings(domain.getSettings());  curState=domain.getInitialState().copy();  curState.setParameters(domain.getParameters());  if (!paused) {    startSystem();  }}  }
class C{  public int compare(IPoint o1,IPoint o2){  double fp=FloatingPoint.value(o1.getY() - o2.getY());  if (fp > 0) {    return -1;  }  if (fp < 0) {    return +1;  }  fp=FloatingPoint.value(o1.getX() - o2.getX());  if (fp < 0) {    return -1;  }  if (fp > 0) {    return +1;  }  return 0;}  }
class C{  protected Request beforeExecute(Request request){  return request;}  }
class C{  public boolean isStopOnFocusLost(){  return this.stopOnFocusLost;}  }
class C{  public FilterRegex(String regex1){  setRegex(regex1);}  }
class C{  public static CreateStatement orAbort(CharSequence table){  return produce(table,"ABORT");}  }
class C{  @Override public MemBufferHolder<BigDataPMemAllocator> retrieveBuffer(long phandler,boolean autoreclaim){  MemBufferHolder<BigDataPMemAllocator> ret=null;  ByteBuffer bb=m_nvmasvc.retrieveByteBuffer(m_nid,getEffectiveAddress(phandler));  if (null != bb) {    ret=new MemBufferHolder<BigDataPMemAllocator>(this,bb);    if (autoreclaim) {      m_bufcollector.register(ret);    }  }  return ret;}  }
class C{  public WeekViewEvent(long id,String name,Calendar startTime,Calendar endTime){  this.mId=id;  this.mName=name;  this.mStartTime=startTime;  this.mEndTime=endTime;}  }
class C{  public boolean add(E e){  return map.put(e,PRESENT) == null;}  }
class C{  public Log4jRollingFileAppender(Layout layout,String filename,boolean append) throws IOException {  super(layout,filename,append);  init();}  }
class C{  static byte[] toByteArray(InputStream in,int expectedSize) throws IOException {  byte[] bytes=new byte[expectedSize];  int remaining=expectedSize;  while (remaining > 0) {    int off=expectedSize - remaining;    int read=in.read(bytes,off,remaining);    if (read == -1) {      return Arrays.copyOf(bytes,off);    }    remaining-=read;  }  int b=in.read();  if (b == -1) {    return bytes;  }  FastByteArrayOutputStream out=new FastByteArrayOutputStream();  out.write(b);  copy(in,out);  byte[] result=new byte[bytes.length + out.size()];  System.arraycopy(bytes,0,result,0,bytes.length);  out.writeTo(result,bytes.length);  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:40.643 -0500",hash_original_method="C0C0DA6EE7D207BF80500DD7F8FC5437",hash_generated_method="4A60D11061AA1D64F4A2230CC4D37412") public Item(Uri uri){  mText=null;  mIntent=null;  mUri=uri;}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public void moveNorth(double amount){  if (!isBlocked()) {    setY(getY() - (float)amount);  }}  }
class C{  public Textifier visitAnnotation(final String desc,final boolean visible){  buf.setLength(0);  buf.append(tab).append('@');  appendDescriptor(FIELD_DESCRIPTOR,desc);  buf.append('(');  text.add(buf.toString());  Textifier t=createTextifier();  text.add(t.getText());  text.add(visible ? ")\n" : ") // invisible\n");  return t;}  }
class C{  boolean isValid(){  return uncompressedFilenameToDictionaryInfo != null && dictionaryFilesOrdered != null;}  }
class C{  public static Instruction _osrHelper(Instruction barrier,GenerationContext gc){  Instruction inst=OsrPoint.create(YIELDPOINT_OSR,null,0);  gc.saveOSRBarrierForInst(barrier,inst);  return inst;}  }
