class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    if (requestedCameraId >= 0) {      theCamera=OpenCameraInterface.open(requestedCameraId);    } else {      theCamera=OpenCameraInterface.open();    }    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  public boolean intersects(Rectangle2D r){  return intersects(r.getX(),r.getY(),r.getWidth(),r.getHeight());}  }
class C{  public void test_vmstat_header_and_data_parse(){  final Pattern pattern=VMStatCollector.pattern;  final String h0="Mach Virtual Memory Statistics: (page size of 4096 bytes, cache hits 0%)";  final String h1="  free active   spec inactive   wire   faults     copy    0fill reactive  pageins  pageout";  final String d1="404670  1238K  42678   161330 183963  144830K  2032186 81929280  1353888   351293   149940";{    final String[] fields=pattern.split(h0.trim(),0);    for (int i=0; i < fields.length; i++) {      if (log.isInfoEnabled())       log.info("fields[" + i + "]=["+ fields[i]+ "]");    }    assertField(h0,fields,0,"Mach");    assertField(h0,fields,7,"4096");  }{    final String[] fields=pattern.split(h1.trim(),0);    for (int i=0; i < fields.length; i++) {      if (log.isInfoEnabled())       log.info("fields[" + i + "]=["+ fields[i]+ "]");    }    assertField(h1,fields,0,"free");    assertField(h1,fields,1,"active");    assertField(h1,fields,2,"spec");    assertField(h1,fields,3,"inactive");    assertField(h1,fields,4,"wire");    assertField(h1,fields,5,"faults");    assertField(h1,fields,6,"copy");    assertField(h1,fields,7,"0fill");    assertField(h1,fields,8,"reactive");    assertField(h1,fields,9,"pageins");    assertField(h1,fields,10,"pageout");  }{    final String[] fields=pattern.split(d1.trim(),0);    assertField(d1,fields,0,"404670");    assertField(d1,fields,1,"1238K");    assertField(d1,fields,2,"42678");    assertField(d1,fields,3,"161330");    assertField(d1,fields,4,"183963");    assertField(d1,fields,5,"144830K");    assertField(d1,fields,6,"2032186");    assertField(d1,fields,7,"81929280");    assertField(d1,fields,8,"1353888");    assertField(d1,fields,9,"351293");    assertField(d1,fields,10,"149940");  }}  }
class C{  public CGPoint convertToUI(CGPoint glPoint){  CGSize winSize=surfaceSize_;  int oppositeY=(int)(winSize.height - glPoint.y);  CGPoint uiPoint=null;switch (deviceOrientation_) {case kCCDeviceOrientationPortrait:    uiPoint=CGPoint.ccp(glPoint.x,oppositeY);  break;case kCCDeviceOrientationLandscapeLeft:uiPoint=CGPoint.ccp(glPoint.x,oppositeY);break;default :return null;}uiPoint=CGPoint.ccpMult(uiPoint,1 / contentScaleFactor_);return uiPoint;}  }
class C{  @Override public Object invoke(Object proxy,final Method method,final Object[] args) throws Throwable {  if (method.getDeclaringClass() == Object.class) {    return method.invoke(this,args);  }  Provider<?> provider=getBindingFromNewInjector(method,args).getProvider();  try {    return provider.get();  } catch (  ProvisionException e) {    if (e.getErrorMessages().size() == 1) {      Message onlyError=Iterables.getOnlyElement(e.getErrorMessages());      Throwable cause=onlyError.getCause();      if (cause != null && canRethrow(method,cause)) {        throw cause;      }    }    throw e;  }}  }
class C{  public NodeMap(){}  }
class C{  public SetContainerHostMapping(CoordinatorStreamMessage message){  super(message.getKeyArray(),message.getMessageMap());}  }
class C{  public IA32ConditionOperand(ConditionOperand c){  translate(c);}  }
class C{  protected void charactersFlush(){  if (m_textPendingStart >= 0) {    int length=m_chars.size() - m_textPendingStart;    boolean doStrip=false;    if (getShouldStripWhitespace()) {      doStrip=m_chars.isWhitespace(m_textPendingStart,length);    }    if (doStrip) {      m_chars.setLength(m_textPendingStart);    } else {      if (length > 0) {        int exName=m_expandedNameTable.getExpandedTypeID(DTM.TEXT_NODE);        int dataIndex=m_data.size();        m_previous=addNode(m_coalescedTextType,exName,m_parents.peek(),m_previous,dataIndex,false);        m_data.addElement(m_textPendingStart);        m_data.addElement(length);      }    }    m_textPendingStart=-1;    m_textType=m_coalescedTextType=DTM.TEXT_NODE;  }}  }
class C{  public static double[] toDouble(float[] in){  double[] result=new double[in.length];  for (int i=0; i < in.length; i++) {    result[i]=(double)in[i];  }  return result;}  }
class C{  public RecyclerListAdapter(@Nullable List<T> itemList){  this.items=itemList;}  }
class C{  public static int hash(int seed,float aFloat){  return hash(seed,Float.floatToIntBits(aFloat));}  }
class C{  public LuceneService() throws IOException {  this(new SimpleFSDirectory(new File("./searchDirectory")));}  }
class C{  public void removeAll(){  this.connectionToTimes.clear();}  }
class C{  private boolean errorIfNextTokenIsKeywordInsteadOfTypeExpression(){  int lt=lookahead();  if (lt == VOID_TOKEN) {    error(ParseError.syntax,kError_Parser_keywordInsteadOfTypeExpr,Token.getTokenClassName(lt));    match(VOID_TOKEN);    return true;  } else   if (lt != IDENTIFIER_TOKEN && inXMLTokenSet(lt)) {    error(ParseError.syntax,kError_Parser_keywordInsteadOfTypeExpr,Token.getTokenClassName(lt));    lt=lookahead();    if (inXMLTokenSet(lt)) {      shift();    } else {      match(lt);    }    return true;  } else   if (ctx.dialect(8) && lt == IDENTIFIER_TOKEN && scanner.getCurrentTokenText().equals("Object")) {    error(kError_ColonObjectAnnoOutOfService);    return true;  }  return false;}  }
class C{  @Override public void agentAdded(Agent agent,Environment source){  updateTracks();  super.agentAdded(agent,source);}  }
class C{  private int freeSpace(){  return buffer.capacity() - buffer.limit() + buffer.position();}  }
class C{  public void addArg(String key){  if (!args.get(key).equals(Collections.singletonList(""))) {    args.put(key,"");  }}  }
class C{  @Override public boolean addImage(PLIImage image){  if (image != null) {synchronized (mTextures) {      mTextures.add(new PLTexture(image));      return true;    }  }  return false;}  }
class C{  public void switchRowPresentation(){  if (formComponent.isVisible()) {    formComponent.setVisible(false);    for (    EmbeddedPanel ep : includedPanel) {      activateChild(false,ep);    }    for (    HorizontalEmbeddedPanel ep : horizontalIncludedPanel) {      activateChild(false,ep);    }  } else {    formComponent.setVisible(true);    repaintComponents(false);    for (    EmbeddedPanel ep : includedPanel) {      activateChild(true,ep);    }    for (    HorizontalEmbeddedPanel ep : horizontalIncludedPanel) {      activateChild(true,ep);    }  }  listPanel.setVisible(!formComponent.isVisible());  if (listPanel.isVisible()) {    if (listPanel != null && listPanel.getADTabPanel() != null && listPanel.getADTabPanel().getGlobalToolbar() != null)     listPanel.getADTabPanel().getGlobalToolbar().setCurrentPanel(this);    listPanel.refresh(gridTab);    listPanel.scrollToCurrentRow();    repaintComponents(true);  } else {    listPanel.deactivate();  }  autoResize();}  }
class C{  @Override public int generate(){  int numVertices=SizableIterable.sizeOf(vertices);  final Iterator<Vertex> iter=vertices.iterator();  final ArrayList<ArrayList<Vertex>> communities=new ArrayList<>(expectedNumCommunities);  final Distribution communityDist=communitySize.initialize(expectedNumCommunities,numVertices);  final Map<String,Object> context=new HashMap<>();  while (iter.hasNext()) {    final int nextSize=communityDist.nextValue(random);    context.put("communityIndex",communities.size());    final ArrayList<Vertex> community=new ArrayList<>(nextSize);    for (int i=0; i < nextSize && iter.hasNext(); i++) {      community.add(processVertex(iter.next(),context));    }    if (!community.isEmpty())     communities.add(community);  }  final double inCommunityPercentage=1.0 - crossCommunityPercentage;  final Distribution degreeDist=edgeDegree.initialize(numVertices,expectedNumEdges);  if (crossCommunityPercentage > 0 && communities.size() < 2)   throw new IllegalArgumentException("Cannot have cross links with only one community");  int addedEdges=0;  for (  ArrayList<Vertex> community : communities) {    for (    Vertex v : community) {      final int randomDegree=degreeDist.nextValue(random);      final int degree=Math.min(randomDegree,(int)Math.ceil((community.size() - 1) / inCommunityPercentage) - 1);      final Set<Vertex> inlinks=new HashSet<>();      final Set<Vertex> outlinks=new HashSet<>();      for (int i=0; i < degree; i++) {        Vertex selected=null;        if (random.nextDouble() < crossCommunityPercentage || (community.size() - 1 <= inlinks.size())) {          int tries=0;          ArrayList<Vertex> othercomm=null;          while (null == selected && tries < 100) {            while (null == othercomm) {              othercomm=communities.get(random.nextInt(communities.size()));              if (othercomm.equals(community))               othercomm=null;            }            selected=othercomm.get(random.nextInt(othercomm.size()));            if (outlinks.contains(selected))             selected=null;            tries++;          }          if (selected != null)           outlinks.add(selected);        } else {          int tries=0;          while (selected == null && tries < 100) {            selected=community.get(random.nextInt(community.size()));            if (v.equals(selected) || inlinks.contains(selected))             selected=null;            tries++;          }          if (selected != null)           inlinks.add(selected);        }        if (selected != null) {          addEdge(v,selected);          addedEdges++;        }      }    }  }  return addedEdges;}  }
class C{  public void addAnnotation(Method ann,String type) throws ObjectStoreConfigException {  addAnnotation(ann,vf.createURI(type));}  }
class C{  public static void main(String[] args){  try (Ignite ignored=G.start("examples/config/example-cache.xml")){    JOptionPane.showMessageDialog(null,new JComponent[]{new JLabel("Ignite started."),new JLabel("Press OK to stop Ignite.")},"Ignite",JOptionPane.INFORMATION_MESSAGE);  } }  }
class C{  public NamedList normalize(NamedList input){  input.remove("avgRequestsPerSecond");  for (int i=0; i < input.size(); i++) {    Object v=input.getVal(i);    if (v instanceof NamedList) {      input.setVal(i,normalize((NamedList)v));    }  }  return input;}  }
class C{  public void addTenant(Tenant tenant,String adminAccountName,char[] adminPwd) throws Exception {  getService().addTenant(tenant,adminAccountName,adminPwd,this.getServiceContext());}  }
class C{  public JComboBox<String> matchingComboBox(String mfg,String family,String decoderMfgID,String decoderVersionID,String decoderProductID,String model){  List<DecoderFile> l=matchingDecoderList(mfg,family,decoderMfgID,decoderVersionID,decoderProductID,model);  return jComboBoxFromList(l);}  }
class C{  public Collection<Tree> subTrees(Collection<Tree> n){  n.add(this);  List<Tree> kids=getChildren();  for (  Tree kid : kids) {    kid.subTrees(n);  }  return n;}  }
class C{  public DoubleMatrix1D viewRow(int row){  checkRow(row);  return new DelegateDoubleMatrix1D(this,row);}  }
class C{  public int indexOf(java.lang.CharSequence csq){  return indexOf(csq,0);}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public void remove(IoServiceListener listener){  if (listener != null) {    listeners.remove(listener);  }}  }
class C{  @SuppressWarnings("rawtypes") public static void createProjectConstraint(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();    String entryName=normalizeEntryName(entry);    if (entryName.startsWith(CONSTRAINTS)) {      String filename=FilenameUtils.getName(entry.getName());      ConstraintSet constraintSet=new ConstraintSet();      constraintSet.setProject(aProject);      constraintSet.setName(filename);      aRepository.createConstraintSet(constraintSet);      aRepository.writeConstraintSet(constraintSet,zip.getInputStream(entry));      LOG.info("Imported constraint [" + filename + "] for project ["+ aProject.getName()+ "] with id ["+ aProject.getId()+ "]");    }  }}  }
class C{  public ConfigValue preUpdate(ConfigValue configValue){  return configValue;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 12:03:11.484 -0400",hash_original_method="05B43A5154FC1BD8706BCB0054C3C22B",hash_generated_method="BDA4934466CE005223F4C2717B6FF822") private void drawCircle(Canvas canvas,float cx,float cy,int color,float pct){  mPaint.setColor(color);  canvas.save();  canvas.translate(cx,cy);  float radiusScale=INTERPOLATOR.getInterpolation(pct);  canvas.scale(radiusScale,radiusScale);  canvas.drawCircle(0,0,cx,mPaint);  canvas.restore();}  }
class C{  @Override protected void onUnregistered(Context context,String registrationId){}  }
class C{  public void insertUpdate(DocumentEvent changes,Shape a,ViewFactory f){  super.insertUpdate(changes,adjustAllocation(a),f);  updateVisibilityModel();}  }
class C{  public JsonSchema generateJsonSchema(Class<?> t,SerializationConfig cfg) throws JsonMappingException {  return _serializerProvider.generateJsonSchema(t,cfg,_serializerFactory);}  }
class C{  public final boolean sameNodeAs(Node other){  if (!(other instanceof DTMNodeProxy))   return false;  DTMNodeProxy that=(DTMNodeProxy)other;  return this.dtm == that.dtm && this.node == that.node;}  }
class C{  public GzipAsynchOutputStream(File file) throws IOException {  this(file,DEFAULT_PIPE_SIZE,DEFAULT_GZIP_BUFFER_SIZE);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.SIMPLE_ATTRIBUTE___NAME_1:    setName_1(NAME_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public boolean hasAtMeMsg(String groupId){  return atMeGroupList.contains(groupId);}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.getCamera().release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  private static boolean hasMvcOrJaxrsAnnotations(Method method){  return Arrays.stream(method.getDeclaredAnnotations()).anyMatch(null);}  }
class C{  public BERSequence(ASN1EncodableVector v){  super(v);}  }
class C{  public String scheme(){  return scheme;}  }
class C{  public void remove(ASTNode node,TextEditGroup editGroup){  if (node == null) {    throw new IllegalArgumentException();  }  RewriteEvent event=getEvent().removeEntry(node);  if (editGroup != null) {    getRewriteStore().setEventEditGroup(event,editGroup);  }}  }
class C{  @Override public int id(){  return type.id();}  }
class C{  private void notLockGrantorId(LockGrantorId notLockGrantorId,long timeToWait,final TimeUnit timeUnit){  if (notLockGrantorId.isLocal(getSerialNumber())) {    if (logger.isTraceEnabled(LogMarker.DLS)) {      logger.trace(LogMarker.DLS,"notLockGrantorId {} returning early because notGrantor {} was equal to the local dm {}",this.serviceName,notLockGrantorId,this.dm.getId());    }    return;  }  boolean ownLockGrantorFutureResult=false;  FutureResult lockGrantorFutureResultRef=null;  long statStart=-1;  LockGrantorId currentLockGrantorId=null;  try {    Assert.assertHoldsLock(this.destroyLock,false);synchronized (this.lockGrantorIdLock) {      currentLockGrantorId=this.lockGrantorId;      if (this.lockGrantorFutureResult != null) {        lockGrantorFutureResultRef=this.lockGrantorFutureResult;      } else       if (!notLockGrantorId.sameAs(currentLockGrantorId)) {        return;      } else {        ownLockGrantorFutureResult=true;        lockGrantorFutureResultRef=new FutureResult(this.dm.getCancelCriterion());        this.lockGrantorFutureResult=lockGrantorFutureResultRef;      }    }    statStart=getStats().startGrantorWait();    if (!ownLockGrantorFutureResult) {      if (timeToWait >= 0) {        waitForLockGrantorFutureResult(lockGrantorFutureResultRef,timeToWait,timeUnit);      }      return;    }    InternalDistributedMember elder=getElderId();    Assert.assertTrue(elder != null);    LockGrantorId elderLockGrantorId=null;    GrantorInfo gi=peekGrantor();    if (gi.getId() != null) {      elderLockGrantorId=new LockGrantorId(this.dm,gi.getId(),gi.getVersionId(),gi.getSerialNumber());    }    if (notLockGrantorId.sameAs(elderLockGrantorId)) {      sleep(NOT_GRANTOR_SLEEP);      return;    } else {      nullLockGrantorId(notLockGrantorId);      if (logger.isTraceEnabled(LogMarker.DLS)) {        logger.trace(LogMarker.DLS,"notLockGrantorId cleared lockGrantorId for service {}",this.serviceName);      }    }  }  finally {synchronized (this.lockGrantorIdLock) {      if (statStart > -1) {        getStats().endGrantorWait(statStart,false);      }      if (ownLockGrantorFutureResult) {        Assert.assertTrue(this.lockGrantorFutureResult == lockGrantorFutureResultRef);        lockGrantorFutureResultRef.cancel(false);        this.lockGrantorFutureResult=null;      }    }  }}  }
class C{  protected Fact createComponentIssue(MAcctSchema as){  final Fact fact=new Fact(this,as,Fact.POST_Actual);  BigDecimal totalCost=Env.ZERO;  FactLine dr=null;  FactLine cr=null;  MAccount debit=m_line.getAccount(ProductCost.ACCTTYPE_P_WorkInProcess,as);  MAccount credit=m_line.getAccount(ProductCost.ACCTTYPE_P_Asset,as);  if (m_cc.isFloorStock()) {    credit=m_line.getAccount(ProductCost.ACCTTYPE_P_FloorStock,as);  }  for (  MCostDetail cd : getCostDetails()) {    BigDecimal cost=MCostDetail.getTotalCost(cd,as);    if (cost.compareTo(Env.ZERO) == 0)     continue;    if (cost.scale() > as.getStdPrecision())     cost=cost.setScale(as.getStdPrecision(),RoundingMode.HALF_UP);    dr=fact.createLine(m_line,debit,as.getC_Currency_ID(),cost);    totalCost=totalCost.add(cost);  }  cr=fact.createLine(m_line,credit,as.getC_Currency_ID(),totalCost.negate());  return fact;}  }
class C{  private void onTrackSegmentEnd(){  boolean hasPower=powerList.size() == locationList.size();  boolean hasCadence=cadenceList.size() == locationList.size();  boolean hasHeartRate=heartRateList.size() == locationList.size();  for (int i=0; i < locationList.size(); i++) {    Location location=locationList.get(i);    if (!hasPower && !hasCadence && !hasHeartRate) {      insertTrackPoint(location);    } else {      SensorDataSet.Builder builder=Sensor.SensorDataSet.newBuilder();      if (hasPower) {        builder.setPower(Sensor.SensorData.newBuilder().setValue(powerList.get(i)).setState(Sensor.SensorState.SENDING));      }      if (hasCadence) {        builder.setCadence(Sensor.SensorData.newBuilder().setValue(cadenceList.get(i)).setState(Sensor.SensorState.SENDING));      }      if (hasHeartRate) {        builder.setHeartRate(Sensor.SensorData.newBuilder().setValue(heartRateList.get(i)).setState(Sensor.SensorState.SENDING));      }      SensorDataSet sensorDataSet=builder.setCreationTime(location.getTime()).build();      MyTracksLocation myTracksLocation=new MyTracksLocation(location,sensorDataSet);      insertTrackPoint(myTracksLocation);    }  }}  }
class C{  public void test_lastIndexOfSubListLjava_util_ListLjava_util_List(){  String string1="A-B-C-D-E-S-JF-SUB-G-H-I-J-SUBL-K-L-LIST-M-N--S-S-O-SUBLIS-P-Q-R-SUBLIST-S-T-U-V-W-X-Y-Z-END";  List list=new ArrayList();  try {    Collections.lastIndexOfSubList(null,list);    fail("Expected NullPointerException for null list first parameter");  } catch (  NullPointerException e) {  }  try {    Collections.lastIndexOfSubList(list,null);    fail("Expected NullPointerException for null list second parameter");  } catch (  NullPointerException e) {  }  testwithCharList(1,string1,"B",false);  testwithCharList(2,string1,"LIST",false);  testwithCharList(3,string1,"SUBLIST",false);  testwithCharList(4,string1,"END",false);  testwithCharList(5,string1,"NONE",false);  testwithCharList(6,"","",false);  testwithCharList(7,"LIST","",false);  testwithCharList(8,"","SUBLIST",false);}  }
class C{  private static Pattern compilePattern(final String s){  StringBuilder rc=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char ch=s.charAt(i);switch (ch) {case '?':      rc.append('.');    break;case '*':  rc.append(".*");break;case '.':rc.append('\\');default :rc.append(ch);}}return Pattern.compile(rc.toString());}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  private void _serializeComponent(PageContext pc,Set test,Component component,StringBuilder sb,boolean serializeQueryByColumns,Set<Object> done) throws ConverterException {  ComponentSpecificAccess cw=ComponentSpecificAccess.toComponentSpecificAccess(Component.ACCESS_PRIVATE,component);  _serializeStruct(pc,test,cw,sb,serializeQueryByColumns,false,done);}  }
class C{  public ieci.tecdoc.sgm.cripto.firma.ws.server.Firma firmar(ieci.tecdoc.sgm.cripto.firma.ws.server.Contenido poContenido){  ieci.tecdoc.sgm.cripto.firma.ws.server.Firma firma=new ieci.tecdoc.sgm.cripto.firma.ws.server.Firma();  try {    ServicioFirmaDigital servicio=getServicioFirmaDigital();    firma.setFirmaB64(servicio.firmar(Base64Util.decode(poContenido.getContenidoB64())));  } catch (  SOAPException e) {    logger.error("Error al realizar la firma.",e);    return (ieci.tecdoc.sgm.cripto.firma.ws.server.Firma)ServiciosUtils.completeReturnError(firma);  }catch (  Exception e) {    logger.error("Error al realizar la firma.",e);    return (ieci.tecdoc.sgm.cripto.firma.ws.server.Firma)ServiciosUtils.completeReturnError(firma);  }  return (ieci.tecdoc.sgm.cripto.firma.ws.server.Firma)ServiciosUtils.completeReturnOK(firma);}  }
class C{  public h5(String value){  addElement(value);}  }
class C{  public MutableCallSite(MethodHandle target){  super(target);}  }
class C{  public void test_SERVICE_DESCRIPTION() throws Exception {  final Graph g=RemoteRepository.asGraph(m_repo.getServiceDescription());  final ValueFactory f=g.getValueFactory();  assertEquals(1,countMatches(g,null,SD.endpoint,f.createURI(m_repo.getSparqlEndPoint())));  assertEquals(1,countMatches(g,null,SD.supportedLanguage,SD.SPARQL10Query));  assertEquals(1,countMatches(g,null,SD.supportedLanguage,SD.SPARQL11Query));  assertEquals(1,countMatches(g,null,SD.supportedLanguage,SD.SPARQL11Update));  assertEquals(1,countMatches(g,null,SD.feature,SD.BasicFederatedQuery));}  }
class C{  public static SipRequest createMessage(SipDialogPath dialog,String featureTag,String contentType,byte[] content) throws PayloadException {  try {    URI requestURI=SipUtils.ADDR_FACTORY.createURI(dialog.getTarget());    CallIdHeader callIdHeader=SipUtils.HEADER_FACTORY.createCallIdHeader(dialog.getCallId());    CSeqHeader cseqHeader=SipUtils.HEADER_FACTORY.createCSeqHeader(dialog.getCseq(),Request.MESSAGE);    Address fromAddress=SipUtils.ADDR_FACTORY.createAddress(dialog.getLocalParty());    FromHeader fromHeader=SipUtils.HEADER_FACTORY.createFromHeader(fromAddress,dialog.getLocalTag());    Address toAddress=SipUtils.ADDR_FACTORY.createAddress(dialog.getRemoteParty());    ToHeader toHeader=SipUtils.HEADER_FACTORY.createToHeader(toAddress,dialog.getRemoteTag());    Request message=SipUtils.MSG_FACTORY.createRequest(requestURI,Request.MESSAGE,callIdHeader,cseqHeader,fromHeader,toHeader,dialog.getSipStack().getViaHeaders(),SipUtils.buildMaxForwardsHeader());    Vector<String> route=dialog.getRoute();    for (int i=0; i < route.size(); i++) {      Header routeHeader=SipUtils.HEADER_FACTORY.createHeader(RouteHeader.NAME,route.elementAt(i));      message.addHeader(routeHeader);    }    setPPreferedIdentityHeader(message);    message.addHeader(dialog.getSipStack().getContact());    message.addHeader(SipUtils.buildUserAgentHeader());    if (featureTag != null) {      SipUtils.setFeatureTags(message,new String[]{featureTag});    }    String[] type=contentType.split("/");    message.setContent(content,SipUtils.HEADER_FACTORY.createContentTypeHeader(type[0],type[1]));    message.setContentLength(SipUtils.HEADER_FACTORY.createContentLengthHeader(content.length));    ViaHeader viaHeader=(ViaHeader)message.getHeader(ViaHeader.NAME);    viaHeader.setRPort();    String remoteInstanceId=dialog.getRemoteSipInstance();    if (remoteInstanceId != null) {      SipUtils.setRemoteInstanceID(message,remoteInstanceId);    }    return new SipRequest(message);  } catch (  ParseException|InvalidArgumentException e) {    throw new PayloadException("Can't create SIP message for featureTag : " + featureTag + " with contentType : "+ contentType,e);  }}  }
class C{  public void init(){  setCanGrabGraphic(false);  setStateMachine(new TextStateMachine(this));  gPoints=new GrabPoint[2];}  }
class C{  public DeletionConstraintExceptionBean(DomainObjectExceptionBean sup,ClassEnum depClassEnum){  super(sup,sup.getClassEnum());  setDependentClassEnum(depClassEnum);}  }
class C{  public IndicesAliasesRequestBuilder addAliasAction(AliasAction aliasAction){  request.addAliasAction(aliasAction);  return this;}  }
class C{  public static Response.Builder readHttp2HeadersList(List<Header> headerBlock) throws IOException {  String status=null;  Headers.Builder headersBuilder=new Headers.Builder();  for (int i=0, size=headerBlock.size(); i < size; i++) {    ByteString name=headerBlock.get(i).name;    String value=headerBlock.get(i).value.utf8();    if (name.equals(RESPONSE_STATUS)) {      status=value;    } else     if (!HTTP_2_SKIPPED_RESPONSE_HEADERS.contains(name)) {      headersBuilder.add(name.utf8(),value);    }  }  if (status == null)   throw new ProtocolException("Expected ':status' header not present");  StatusLine statusLine=StatusLine.parse("HTTP/1.1 " + status);  return new Response.Builder().protocol(Protocol.HTTP_2).code(statusLine.code).message(statusLine.message).headers(headersBuilder.build());}  }
class C{  public File resolve(String name,boolean isModule){  int n;  n=name.indexOf('\n');  if (n >= 0) {    ToolIO.out.println("*** Warning: module name '" + name + "' contained NEWLINE; "+ "Only the part before NEWLINE is considered.");    name=name.substring(0,n);  }  String sourceFileName=null;  if (isModule) {    if (name.toLowerCase().endsWith(".tla")) {      name=name.substring(0,name.length() - 4);    }    sourceFileName=name + ".tla";  } else {    sourceFileName=name;  }  return locate(sourceFileName);}  }
class C{  public void addForward(EdgeInfo ei){  forward.append(ei);}  }
class C{  public TimeEvent basicGetTimeEvent(){  return timeEvent;}  }
class C{  @Override public void memberRemoved(PersistentMemberID persistentID,boolean revoked){  this.membershipChanged=true;}  }
class C{  public Object remove(String name){  return nameValuePairs.remove(name);}  }
class C{  private void generateDependenciesForExtension(SourceWriter sw,JClassType extension) throws UnableToCompleteException {  if (extension.getConstructors().length == 0) {    throw new UnableToCompleteException();  }  sw.println("List<DependencyDescription> deps = new ArrayList<>();");  JConstructor jConstructor=extension.getConstructors()[0];  JType[] parameterTypes=jConstructor.getParameterTypes();  for (  JType jType : parameterTypes) {    JClassType argType=jType.isClassOrInterface();    if (argType != null && (argType.isAnnotationPresent(SDK.class) || argType.isAnnotationPresent(Extension.class))) {      String id="";      String version="";      if (argType.isAnnotationPresent(SDK.class)) {        id=argType.getAnnotation(SDK.class).title();      } else       if (argType.isAnnotationPresent(Extension.class)) {        id=argType.getQualifiedSourceName();        version=argType.getAnnotation(Extension.class).version();      }      sw.println("deps.add(new DependencyDescription(\"%s\", \"%s\"));",escape(id),escape(version));    }  }}  }
class C{  String rrToString(){  return (Address.toDottedQuad(toArray(addr)));}  }
class C{  public void updateEstadoDocumentoVital(String idDocVit,int estado){  String qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,idDocVit)).toString();  Map cols=Collections.singletonMap(CAMPO_ESTADO_DOC_VIT,new Integer(estado));  updateFields(qual,cols,TABLE_NAME);}  }
class C{  public static void main(String... args) throws Exception {  Service service=Services.usingName("test").usingModuleDiscovery(true).withShutdownInterrupt(true).build();  try (Service.Instance instance=service.start(args)){    instance.waitForShutdown();  } }  }
class C{  public DefaultDrawing(){}  }
class C{  public boolean hasTouch(){  return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredFinal: ");  result.append(declaredFinal);  result.append(", declaredStatic: ");  result.append(declaredStatic);  result.append(", declaredOverride: ");  result.append(declaredOverride);  result.append(", hasNoBody: ");  result.append(hasNoBody);  result.append(", declaredMemberAccessModifier: ");  result.append(declaredMemberAccessModifier);  result.append(", declaredAbstract: ");  result.append(declaredAbstract);  result.append(", lacksThisOrSuperUsage: ");  result.append(lacksThisOrSuperUsage);  result.append(')');  return result.toString();}  }
class C{  public void reshuffle(){  Card prev=discardPile.popCard();  discardPile.dealAll(drawPile);  discardPile.addCard(prev);  drawPile.shuffle();}  }
class C{  public static <T>T withObjectInputStream(InputStream inputStream,@ClosureParams(value=SimpleType.class,options="java.io.ObjectInputStream") Closure<T> closure) throws IOException {  return withStream(newObjectInputStream(inputStream),closure);}  }
class C{  public static int intersectTriangles(Vec4[] v,Vec4[] u,Vec4[] intersectionVertices){  double e1x=v[1].x - v[0].x;  double e1y=v[1].y - v[0].y;  double e1z=v[1].z - v[0].z;  double e2x=v[2].x - v[0].x;  double e2y=v[2].y - v[0].y;  double e2z=v[2].z - v[0].z;  Vec4 n1=new Vec4(e1y * e2z - e1z * e2y,e1z * e2x - e1x * e2z,e1x * e2y - e1y * e2x);  double d1=-n1.dot3(v[0]);  double du0=n1.dot3(u[0]) + d1;  double du1=n1.dot3(u[1]) + d1;  double du2=n1.dot3(u[2]) + d1;  if (Math.abs(du0) < EPSILON)   du0=0;  if (Math.abs(du1) < EPSILON)   du1=0;  if (Math.abs(du2) < EPSILON)   du2=0;  double du0du1=du0 * du1;  double du0du2=du0 * du2;  if (du0du1 > 0 && du0du2 > 0)   return -1;  e1x=u[1].x - u[0].x;  e1y=u[1].y - u[0].y;  e1z=u[1].z - u[0].z;  e2x=u[2].x - u[0].x;  e2y=u[2].y - u[0].y;  e2z=u[2].z - u[0].z;  Vec4 n2=new Vec4(e1y * e2z - e1z * e2y,e1z * e2x - e1x * e2z,e1x * e2y - e1y * e2x);  double d2=-n2.dot3(u[0]);  double dv0=n2.dot3(v[0]) + d2;  double dv1=n2.dot3(v[1]) + d2;  double dv2=n2.dot3(v[2]) + d2;  if (Math.abs(dv0) < EPSILON)   dv0=0;  if (Math.abs(dv1) < EPSILON)   dv1=0;  if (Math.abs(dv2) < EPSILON)   dv2=0;  double dv0dv1=dv0 * dv1;  double dv0dv2=dv0 * dv2;  if (dv0dv1 > 0 && dv0dv2 > 0)   return -1;  Vec4 ld=n1.cross3(n2);  double max=Math.abs(ld.x);  int index=0;  double b=Math.abs(ld.y);  double c=Math.abs(ld.z);  if (b > max) {    max=b;    index=1;  }  if (c > max) {    index=2;  }  double vp0=v[0].x;  double vp1=v[1].x;  double vp2=v[2].x;  double up0=u[0].x;  double up1=u[1].x;  double up2=u[2].x;  if (index == 1) {    vp0=v[0].y;    vp1=v[1].y;    vp2=v[2].y;    up0=u[0].y;    up1=u[1].y;    up2=u[2].y;  } else   if (index == 2) {    vp0=v[0].z;    vp1=v[1].z;    vp2=v[2].z;    up0=u[0].z;    up1=u[1].z;    up2=u[2].z;  }  TriangleIntersection isectA=compute_intervals_isectline(v,vp0,vp1,vp2,dv0,dv1,dv2,dv0dv1,dv0dv2);  if (isectA == null)   return coplanarTriangles(n1,v,u) ? 0 : -1;  int smallest1=0;  if (isectA.s0 > isectA.s1) {    double cc=isectA.s0;    isectA.s0=isectA.s1;    isectA.s1=cc;    smallest1=1;  }  TriangleIntersection isectB=compute_intervals_isectline(u,up0,up1,up2,du0,du1,du2,du0du1,du0du2);  int smallest2=0;  if (isectB.s0 > isectB.s1) {    double cc=isectB.s0;    isectB.s0=isectB.s1;    isectB.s1=cc;    smallest2=1;  }  if (isectA.s1 < isectB.s0 || isectB.s1 < isectA.s0)   return -1;  if (isectB.s0 < isectA.s0) {    if (smallest1 == 0)     intersectionVertices[0]=isectA.p0; else     intersectionVertices[0]=isectA.p1;    if (isectB.s1 < isectA.s1) {      if (smallest2 == 0)       intersectionVertices[1]=isectB.p1; else       intersectionVertices[1]=isectB.p0;    } else {      if (smallest1 == 0)       intersectionVertices[1]=isectA.p1; else       intersectionVertices[1]=isectA.p0;    }  } else {    if (smallest2 == 0)     intersectionVertices[0]=isectB.p0; else     intersectionVertices[0]=isectB.p1;    if (isectB.s1 > isectA.s1) {      if (smallest1 == 0)       intersectionVertices[1]=isectA.p1; else       intersectionVertices[1]=isectA.p0;    } else {      if (smallest2 == 0)       intersectionVertices[1]=isectB.p1; else       intersectionVertices[1]=isectB.p0;    }  }  return 1;}  }
class C{  public OMAreaList(java.util.List<OMGeometry> list){  addAll(list);  init();}  }
class C{  public void addPattern(int[] pattern,double weight){  if (patternLength == 0) {    patternLength=pattern.length;  }  if (patternLength != 0 && pattern.length != patternLength) {    throw new IllegalArgumentException("Added pattern's length (" + pattern.length + ") does not match those of existing patterns ("+ patternLength+ ")");  }  for (int i=0; i < patternCount; i++) {    if (comparePatterns(patterns[i],pattern)) {      weights[i]+=weight;      return;    }  }  if (patternCount == patterns.length) {    int[][] newPatterns=new int[patternCount + COUNT_INCREMENT][];    double[] newWeights=new double[patternCount + COUNT_INCREMENT];    for (int i=0; i < patternCount; i++) {      newPatterns[i]=patterns[i];      newWeights[i]=weights[i];    }    patterns=newPatterns;    weights=newWeights;  }  patterns[patternCount]=pattern;  weights[patternCount]=weight;  patternCount++;}  }
class C{  public Instances testCV(int numFolds,int numFold){  int numInstForFold, first, offset;  Instances test;  if (numFolds < 2) {    throw new IllegalArgumentException("Number of folds must be at least 2!");  }  if (numFolds > numInstances()) {    throw new IllegalArgumentException("Can't have more folds than instances!");  }  numInstForFold=numInstances() / numFolds;  if (numFold < numInstances() % numFolds) {    numInstForFold++;    offset=numFold;  } else   offset=numInstances() % numFolds;  test=new Instances(this,numInstForFold);  first=numFold * (numInstances() / numFolds) + offset;  copyInstances(first,test,numInstForFold);  return test;}  }
class C{  private void addTest(Test newTest){  if (m_RuleList == null) {    m_RuleList=new ArrayList<Test>();  }  m_RuleList.add(newTest);}  }
class C{  public void clearHosts(){  this.portToMac.clear();}  }
class C{  public DrawerBuilder withTranslucentNavigationBarProgrammatically(boolean translucentNavigationBarProgrammatically){  this.mTranslucentNavigationBarProgrammatically=translucentNavigationBarProgrammatically;  if (translucentNavigationBarProgrammatically) {    this.mTranslucentNavigationBar=true;  }  return this;}  }
class C{  public PoissonSlow(double mean,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setMean(mean);}  }
class C{  public void interrupt(){  super.interrupt();  mUploadManager.interrupt();  if (mFileInfoDoc == null) {    removeSession();    mListener.handleUploadAborted();  }}  }
class C{  public void addClasspath(List<File> classpath) throws IOException {  Validate.notNull(classpath);  Validate.noNullElements(classpath);  for (  File classpathElement : classpath) {    if (classpathElement.isFile()) {      addJar(classpathElement);    } else     if (classpathElement.isDirectory()) {      addDirectory(classpathElement);    } else {      throw new IllegalStateException();    }  }}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  public void removeDataSource(){  Integer lastSeriesIndex=dataset.getSeriesCount() - 1;  if (lastSeriesIndex >= 0) {    this.fireDataSourceRemoved(lastSeriesIndex);    dataset.removeSeries(lastSeriesIndex);  }}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  LOGGER.info("Starting step with Id " + this.getId());  Set<RawProtein<PantherRawMatch>> rawMatches=rawMatchDAO.getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);  Set<RawProtein<PantherRawMatch>> filteredMatches=postProcessor.process(rawMatches);  LOGGER.info("Finally persisting filtered raw matches.");  filteredMatchDAO.persist(filteredMatches);  LOGGER.info("Step with Id " + this.getId() + " finished.");}  }
class C{  private boolean checkNodes(SpeakerNPC npc,FixedPath path,StringBuilder msg){  boolean ok=true;  List<Node> nodes=path.getNodeList();  Iterator<Node> it=nodes.iterator();  Node previous=it.next();  Node current=previous;  while (it.hasNext()) {    current=it.next();    if (!checkTwoNodes(npc,previous,current,msg)) {      ok=false;    }    previous=current;  }  if (path.isLoop() && !checkTwoNodes(npc,current,path.getNodeList().get(0),msg)) {    ok=false;  }  return ok;}  }
class C{  private void writeLargeDataToFile(File file,int size) throws FileNotFoundException, IOException {  FileOutputStream fos=new FileOutputStream(file);  byte[] buf=new byte[size];  try {    fos.write(buf);  }  finally {    fos.close();  }}  }
class C{  public static final Vec3D max(ReadonlyVec3D a,ReadonlyVec3D b){  return new Vec3D(MathUtils.max(a.x(),b.x()),MathUtils.max(a.y(),b.y()),MathUtils.max(a.z(),b.z()));}  }
class C{  public String asString(){  StringBuilder buff=new StringBuilder();  DataUtils.appendMap(buff,"chunk",id);  DataUtils.appendMap(buff,"block",block);  DataUtils.appendMap(buff,"len",len);  if (maxLen != maxLenLive) {    DataUtils.appendMap(buff,"liveMax",maxLenLive);  }  if (pageCount != pageCountLive) {    DataUtils.appendMap(buff,"livePages",pageCountLive);  }  DataUtils.appendMap(buff,"map",mapId);  DataUtils.appendMap(buff,"max",maxLen);  if (next != 0) {    DataUtils.appendMap(buff,"next",next);  }  DataUtils.appendMap(buff,"pages",pageCount);  DataUtils.appendMap(buff,"root",metaRootPos);  DataUtils.appendMap(buff,"time",time);  if (unused != 0) {    DataUtils.appendMap(buff,"unused",unused);  }  DataUtils.appendMap(buff,"version",version);  return buff.toString();}  }
class C{  public AuthenticationHeader(String hdrname,MessageHeader response,HttpCallerInfo hci,boolean dontUseNegotiate){  this.hci=hci;  this.dontUseNegotiate=dontUseNegotiate;  rsp=response;  this.hdrname=hdrname;  schemes=new HashMap<String,SchemeMapValue>();  parse();}  }
class C{  public CNNameParser(){}  }
class C{  int initialize(int nextAvailableRegister){  this.reg=nextAvailableRegister;  this.spec=RegisterSpec.make(nextAvailableRegister,type.ropType);  return size();}  }
class C{  @Override protected void initData(){}  }
class C{  public SMTPResponse(String code,CharSequence description){  super(code,description);}  }
class C{  public boolean isPrimitive(){  return true;}  }
class C{  public boolean onScheduleAsLibrary(Config config,Config runtime,IScheduler scheduler,PackingPlan packing){  boolean ret=false;  try {    scheduler.initialize(config,runtime);    ret=scheduler.onSchedule(packing);    if (ret) {      ret=SchedulerUtils.setLibSchedulerLocation(runtime,scheduler,false);    } else {      LOG.severe("Failed to invoke IScheduler as library");    }  }  finally {    scheduler.close();  }  return ret;}  }
class C{  public static void checkAndSetTimeParamAsInteger(Element context,AVList params,String paramKey,String paramName,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o == null) {    Long d=WWXML.getTimeInMillis(context,paramName,xpath);    if (d != null)     params.setValue(paramKey,d.intValue());  }}  }
class C{  private String skipUntilEL(){  char prev=0;  StringBuilder buf=new StringBuilder();  while (hasNextChar()) {    char ch=nextChar();    if (prev == '\\') {      prev=0;      if (ch == '\\') {        buf.append('\\');        if (!escapeBS)         prev='\\';      } else       if (ch == '$' || ch == '#') {        buf.append(ch);      }    } else     if (prev == '$' || prev == '#') {      if (ch == '{') {        this.isDollarExpr=(prev == '$');        prev=0;        break;      }      buf.append(prev);      if (ch == '\\' || ch == '$' || ch == '#') {        prev=ch;      } else {        buf.append(ch);      }    } else     if (ch == '\\' || ch == '$' || ch == '#') {      prev=ch;    } else {      buf.append(ch);    }  }  if (prev != 0) {    buf.append(prev);  }  return buf.toString();}  }
class C{  public void write(byte[] data,int offset,int length) throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.write(byte[], int, int)");  if (offset < 0) {    throw new IllegalArgumentException("Array offset may not be negative");  }  if (length < 0) {    throw new IllegalArgumentException("Array length may not be negative");  }  if (offset + length > data.length) {    throw new IllegalArgumentException("Given offset and length exceed the array length");  }  assertOpen();  this.outputStream.write(data,offset,length);}  }
class C{  public boolean isStateActive(State state){synchronized (statemachine) {    return statemachine.isStateActive(state);  }}  }
class C{  public WorkspaceImpl startWorkspace(WorkspaceConfig config,String namespace,boolean isTemporary) throws ServerException, NotFoundException, ConflictException {  requireNonNull(config,"Required non-null configuration");  requireNonNull(namespace,"Required non-null namespace");  final WorkspaceImpl workspace=doCreateWorkspace(config,accountManager.getByName(namespace),emptyMap(),isTemporary);  performAsyncStart(workspace,workspace.getConfig().getDefaultEnv(),false);  return normalizeState(workspace);}  }
class C{  private static double log(final double x,final double[] hiPrec){  if (x == 0) {    return Double.NEGATIVE_INFINITY;  }  long bits=Double.doubleToRawLongBits(x);  if (((bits & 0x8000000000000000L) != 0 || x != x) && x != 0.0) {    if (hiPrec != null) {      hiPrec[0]=Double.NaN;    }    return Double.NaN;  }  if (x == Double.POSITIVE_INFINITY) {    if (hiPrec != null) {      hiPrec[0]=Double.POSITIVE_INFINITY;    }    return Double.POSITIVE_INFINITY;  }  int exp=(int)(bits >> 52) - 1023;  if ((bits & 0x7ff0000000000000L) == 0) {    if (x == 0) {      if (hiPrec != null) {        hiPrec[0]=Double.NEGATIVE_INFINITY;      }      return Double.NEGATIVE_INFINITY;    }    bits<<=1;    while ((bits & 0x0010000000000000L) == 0) {      --exp;      bits<<=1;    }  }  if ((exp == -1 || exp == 0) && x < 1.01 && x > 0.99 && hiPrec == null) {    double xa=x - 1.0;    double xb=xa - x + 1.0;    double tmp=xa * HEX_40000000;    double aa=xa + tmp - tmp;    double ab=xa - aa;    xa=aa;    xb=ab;    final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length - 1];    double ya=lnCoef_last[0];    double yb=lnCoef_last[1];    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {      aa=ya * xa;      ab=ya * xb + yb * xa + yb * xb;      tmp=aa * HEX_40000000;      ya=aa + tmp - tmp;      yb=aa - ya + ab;      final double[] lnCoef_i=LN_QUICK_COEF[i];      aa=ya + lnCoef_i[0];      ab=yb + lnCoef_i[1];      tmp=aa * HEX_40000000;      ya=aa + tmp - tmp;      yb=aa - ya + ab;    }    aa=ya * xa;    ab=ya * xb + yb * xa + yb * xb;    tmp=aa * HEX_40000000;    ya=aa + tmp - tmp;    yb=aa - ya + ab;    return ya + yb;  }  final double[] lnm=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];  final double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));  double lnza=0.0;  double lnzb=0.0;  if (hiPrec != null) {    double tmp=epsilon * HEX_40000000;    double aa=epsilon + tmp - tmp;    double ab=epsilon - aa;    double xa=aa;    double xb=ab;    final double numer=bits & 0x3ffffffffffL;    final double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);    aa=numer - xa * denom - xb * denom;    xb+=aa / denom;    final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1];    double ya=lnCoef_last[0];    double yb=lnCoef_last[1];    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {      aa=ya * xa;      ab=ya * xb + yb * xa + yb * xb;      tmp=aa * HEX_40000000;      ya=aa + tmp - tmp;      yb=aa - ya + ab;      final double[] lnCoef_i=LN_HI_PREC_COEF[i];      aa=ya + lnCoef_i[0];      ab=yb + lnCoef_i[1];      tmp=aa * HEX_40000000;      ya=aa + tmp - tmp;      yb=aa - ya + ab;    }    aa=ya * xa;    ab=ya * xb + yb * xa + yb * xb;    lnza=aa + ab;    lnzb=-(lnza - aa - ab);  } else {    lnza=-0.16624882440418567;    lnza=lnza * epsilon + 0.19999954120254515;    lnza=lnza * epsilon + -0.2499999997677497;    lnza=lnza * epsilon + 0.3333333333332802;    lnza=lnza * epsilon + -0.5;    lnza=lnza * epsilon + 1.0;    lnza*=epsilon;  }  double a=LN_2_A * exp;  double b=0.0;  double c=a + lnm[0];  double d=-(c - a - lnm[0]);  a=c;  b+=d;  c=a + lnza;  d=-(c - a - lnza);  a=c;  b+=d;  c=a + LN_2_B * exp;  d=-(c - a - LN_2_B * exp);  a=c;  b+=d;  c=a + lnm[1];  d=-(c - a - lnm[1]);  a=c;  b+=d;  c=a + lnzb;  d=-(c - a - lnzb);  a=c;  b+=d;  if (hiPrec != null) {    hiPrec[0]=a;    hiPrec[1]=b;  }  return a + b;}  }
class C{  public void close(){  if (sLogger.isActivated()) {    sLogger.debug("Close session");  }  mCancelTransfer=true;  if (mConnection != null) {    mConnection.close();  }  if (mRequestTransaction != null) {    mRequestTransaction.terminate();  }  if (mReportTransaction != null) {    mReportTransaction.terminate();  }  if (mMsrpTransaction != null) {    mMsrpTransaction.terminate();  }}  }
class C{  public ParseFile(String name,byte[] data){  this(name,data,null);}  }
class C{  public SelectIterator(Class<?> dataClass,Dao<T,ID> classDao,GenericRowMapper<T> rowMapper,ConnectionSource connectionSource,DatabaseConnection connection,CompiledStatement compiledStmt,String statement,ObjectCache objectCache) throws SQLException {  this.dataClass=dataClass;  this.classDao=classDao;  this.rowMapper=rowMapper;  this.connectionSource=connectionSource;  this.connection=connection;  this.compiledStmt=compiledStmt;  this.results=compiledStmt.runQuery(objectCache);  this.statement=statement;  if (statement != null) {    logger.debug("starting iterator @{} for '{}'",hashCode(),statement);  }}  }
class C{  public EGLSurface createOffscreenSurface(int width,int height){  int[] surfaceAttribs={EGL14.EGL_WIDTH,width,EGL14.EGL_HEIGHT,height,EGL14.EGL_NONE};  EGLSurface eglSurface=EGL14.eglCreatePbufferSurface(mEGLDisplay,mEGLConfig,surfaceAttribs,0);  checkEglError("eglCreatePbufferSurface");  if (eglSurface == null) {    throw new RuntimeException("surface was null");  }  return eglSurface;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'GROUP_CLOUD_DEVICE_DB' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'GROUP_ID' INTEGER NOT NULL ,"+ "'BSSID' TEXT NOT NULL );");}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeObject(conservativeApproximation);}  }
class C{  public int findEngineByRoadNumber(String roadNumber){  if (sysList != null) {    if (!roadNumber.equals(_roadNumber)) {      return getIndex(0,roadNumber);    }    int index=getIndex(_index,roadNumber);    if (index > 0) {      return index;    }    return getIndex(0,roadNumber);  }  return -1;}  }
class C{  public ScriptedMetricBuilder reduceScript(Script reduceScript){  this.reduceScript=reduceScript;  return this;}  }
class C{  public boolean isCompressed(byte[] bytes) throws IOException {  if ((bytes == null) || (bytes.length < 2)) {    return false;  } else {    return ((bytes[0] == (byte)(GZIPInputStream.GZIP_MAGIC)) && (bytes[1] == (byte)(GZIPInputStream.GZIP_MAGIC >> 8)));  }}  }
class C{  public static ClusterSearchShardsRequest clusterSearchShardsRequest(String... indices){  return new ClusterSearchShardsRequest(indices);}  }
class C{  IntChunks(final long length,final int chunkBits){  super(length);  assert chunkBits >= 0 && chunkBits <= 31;  mChunkBits=chunkBits;  mChunkSize=1 << mChunkBits;  mChunkMask=mChunkSize - 1;  final long ch=(length + mChunkSize - 1) / mChunkSize;  if (ch > Integer.MAX_VALUE) {    throw new RuntimeException("length requested too long length=" + length + " mChunkSize="+ mChunkSize);  }  final int chunks=(int)ch;  mArray=new int[chunks][];  long left=mLength;  long total=0;  for (int i=0; i < chunks; i++) {    final int assignedLength=left <= mChunkSize ? (int)left : mChunkSize;    assert assignedLength > 0;    mArray[i]=new int[assignedLength];    left-=assignedLength;    total+=assignedLength;  }  assert left == 0;  mTotalLength=total;  assert integrity();}  }
class C{  @Override protected char[] escape(int cp){  if (cp < safeOctets.length && safeOctets[cp]) {    return null;  } else   if (cp == ' ' && plusForSpace) {    return PLUS_SIGN;  } else   if (cp <= 0x7F) {    char[] dest=new char[3];    dest[0]='%';    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    dest[1]=UPPER_HEX_DIGITS[cp >>> 4];    return dest;  } else   if (cp <= 0x7ff) {    char[] dest=new char[6];    dest[0]='%';    dest[3]='%';    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[1]=UPPER_HEX_DIGITS[0xC | cp];    return dest;  } else   if (cp <= 0xffff) {    char[] dest=new char[9];    dest[0]='%';    dest[1]='E';    dest[3]='%';    dest[6]='%';    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp];    return dest;  } else   if (cp <= 0x10ffff) {    char[] dest=new char[12];    dest[0]='%';    dest[1]='F';    dest[3]='%';    dest[6]='%';    dest[9]='%';    dest[11]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0x7];    return dest;  } else {    throw new IllegalArgumentException("Invalid unicode character value " + cp);  }}  }
class C{  @NoInline @UnpreemptibleNoWarn private static void throwLargeArrayOutOfMemoryError(){  throw new OutOfMemoryError();}  }
class C{  public void copyResource(String resourceName,String destFile,FileHandler handler,FilterChain filterChain,String encoding) throws IOException {  InputStream resource=ResourceUtils.resourceLoader.getResourceAsStream(resourceName);  if (resource == null) {    throw new IOException("Resource [" + resourceName + "] not found in resource loader "+ ResourceUtils.resourceLoader);  }  BufferedReader in=null;  BufferedWriter out=null;  try {    ChainReaderHelper helper=new ChainReaderHelper();    helper.setBufferSize(8192);    helper.setPrimaryReader(new BufferedReader(createReader(resource,encoding)));    Vector filterChains=new Vector();    filterChains.add(filterChain);    helper.setFilterChains(filterChains);    in=new BufferedReader(helper.getAssembledReader());    out=new BufferedWriter(new OutputStreamWriter(handler.getOutputStream(destFile)));    String line;    while ((line=in.readLine()) != null) {      if (line.isEmpty()) {        out.newLine();      } else {        out.write(line);        out.newLine();      }    }  }  finally {    if (in != null) {      in.close();    }    if (out != null) {      out.close();    }  }}  }
class C{  public void requestsOrdered(TOMMessage[] requests){  clientsLock.lock();  Logger.println("(ClientsManager.requestOrdered) Updating client manager");  for (  TOMMessage request : requests) {    requestOrdered(request);  }  Logger.println("(ClientsManager.requestOrdered) Finished updating client manager");  clientsLock.unlock();}  }
class C{  @RequestMapping(value="/export/contacts.xls",method=RequestMethod.GET) @Timed @Transactional(readOnly=true) public ModelAndView exportContacts(@RequestParam(value="filter",required=false) String filterString) throws Exception {  Collection<Contact> contacts=contactRepository.findAll(objectMapper.readValue(filterString,Filter.class).getSpec());  lazyService.initializeForJsonView(contacts,Contact.WithEverything.class);  List<Integer> years=contacts.stream().flatMap(null).map(null).distinct().collect(Collectors.toList());  Map<String,Object> map=new HashMap<>();  map.put("contacts",contacts);  map.put("years",years);  return new ModelAndView(new ExcelContacts(),map);}  }
class C{  public ApplicationSecurityEnforcer(Class appMainClass,String securityPolicy,String appJarFile){  this(appMainClass,securityPolicy);}  }
class C{  public void visitEnd(){  if (fv != null) {    fv.visitEnd();  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardXYBarPainter)) {    return false;  }  return true;}  }
class C{  @Nullable public static String showInputDialog(String message,@Nls(capitalization=Nls.Capitalization.Title) String title,@Nullable Icon icon,@Nullable String initialValue,@Nullable InputValidator validator){  if (isApplicationInUnitTestOrHeadless()) {    return ourTestInputImplementation.show(message);  } else {    InputDialog dialog=new InputDialog(message,title,icon,initialValue,validator);    dialog.show();    return dialog.getInputString();  }}  }
class C{  public void clear(){  graphics.clear();  if (areaSubList != null) {    areaSubList.clear();    areaSubList=null;  }  if (edgeSubList != null) {    edgeSubList.clear();    edgeSubList=null;  }  if (textSubList != null) {    textSubList.clear();    textSubList=null;  }  if (pointSubList != null) {    pointSubList.clear();    pointSubList=null;  }}  }
class C{  @Override protected void initMovement(){  old_moves=null;  enemies_moved=0;  double max_modifier=1.4;  ArrayList<Entity> entities=new ArrayList<Entity>(game.getEntitiesVector());  double num_entities=Math.sqrt(entities.size()) / 100;  ArrayList<CEntity> friends=new ArrayList<CEntity>();  ArrayList<CEntity> foes=new ArrayList<CEntity>();  double friend_sum=0;  double foe_sum=0;  double max_foe_bv=0;  CEntity max_foe=null;  for (int i=0; i < entities.size(); i++) {    Entity entity=entities.get(i);    CEntity centity=centities.get(entity);    centity.enemy_num=i;    double old_value=centity.bv * (centity.overall_armor_percent + 1);    centity.reset();    double new_value=centity.bv * (centity.overall_armor_percent + 1);    double percent=1 + ((new_value - old_value) / old_value);    if (entity.getOwner().equals(getLocalPlayer())) {      friends.add(centity);      friend_sum+=new_value;      if (percent < .85) {        centity.strategy.attack=.85;      } else       if (percent < .95) {        centity.strategy.attack=1;      } else       if ((percent <= 1) && (centity.strategy.attack < max_modifier)) {        if (percent == 1) {          if (centity.strategy.attack < 1) {            centity.strategy.attack=Math.min(1.4 * centity.strategy.attack,1);          } else {            centity.strategy.attack*=(1.0 + num_entities);          }        } else {          centity.strategy.attack*=(1.0 + (2 * num_entities));        }      }    } else     if (!entity.getOwner().isEnemyOf(getLocalPlayer())) {      friend_sum+=new_value;    } else {      foes.add(centity);      foe_sum+=new_value;      if (entity.isCommander()) {        new_value*=3;      }      if ((new_value > max_foe_bv) || (max_foe == null)) {        max_foe_bv=new_value;        max_foe=centity;      }      if (getEntitiesOwned().size() > 2) {        if (centity.strategy.target > 2) {          centity.strategy.target=1 + (.5 * (centity.strategy.target - 2));        }        if ((percent < .85) && (centity.strategy.target < max_modifier)) {          centity.strategy.target*=(1.0 + (6 * num_entities));        } else         if ((percent < .95) && (centity.strategy.target < max_modifier)) {          centity.strategy.target*=(1.0 + (4 * num_entities));        } else         if (percent <= 1) {          if (percent == 1) {            centity.strategy.target/=(1.0 + (2 * num_entities));          } else {            centity.strategy.target/=(1.0 + num_entities);          }        }        if (centity.strategy.target < 1) {          centity.strategy.target=1;        }      }    }  }  System.out.println("Us " + friend_sum + " Them "+ foe_sum);  double unit_values=friend_sum;  double enemy_values=foe_sum;  Iterator<CEntity> i=foes.iterator();  if (friends.size() > 1) {    if ((Strategy.MainTarget == null) || (null == game.getEntity(Strategy.MainTarget.getEntity().getId()))) {      Strategy.MainTarget=max_foe;    }    if (null == Strategy.MainTarget) {      System.err.println("TestBot#initMovement() - no main target for bot");    } else     if (null == Strategy.MainTarget.strategy) {      System.err.println("TestBot#initMovement() - no strategy for main target");    } else {      Strategy.MainTarget.strategy.target+=.2;      while (i.hasNext()) {        CEntity centity=i.next();        if ((friend_sum - foe_sum) >= ((.9 * unit_values) - enemy_values)) {          if (Compute.randomInt(2) == 1) {            centity.strategy.target+=.3;          }        } else         if (friend_sum > (.9 * foe_sum)) {          centity.strategy.target+=.15;        } else         if (centity.strategy.target < 2) {          centity.strategy.target+=.3;        }        System.out.println(centity.getEntity().getShortName() + " " + centity.strategy.target);      }    }  }  double ratio=friend_sum / foe_sum;  double mod=1;  if (ratio < .9) {    mod=.95;  } else   if (ratio < 1) {  } else {    mod=(1.0 + num_entities);  }  i=friends.iterator();  while (i.hasNext()) {    CEntity centity=i.next();    if (!((mod < 1) && (centity.strategy.attack < .6)) && !((mod > 1) && (centity.strategy.attack >= max_modifier))) {      centity.strategy.attack*=mod;    }  }  System.gc();}  }
class C{  public static String calculateYouTubeUrl(String pYouTubeFmtQuality,boolean pFallback,String pYouTubeVideoId) throws IOException, ClientProtocolException, UnsupportedEncodingException {  String lUriStr=null;  HttpClient lClient=new DefaultHttpClient();  HttpGet lGetMethod=new HttpGet(OpenYouTubePlayerActivity.YOUTUBE_VIDEO_INFORMATION_URL + pYouTubeVideoId);  HttpResponse lResp=null;  lResp=lClient.execute(lGetMethod);  ByteArrayOutputStream lBOS=new ByteArrayOutputStream();  String lInfoStr=null;  lResp.getEntity().writeTo(lBOS);  lInfoStr=new String(lBOS.toString("UTF-8"));  String[] lArgs=lInfoStr.split("&");  Map<String,String> lArgMap=new HashMap<String,String>();  for (int i=0; i < lArgs.length; i++) {    String[] lArgValStrArr=lArgs[i].split("=");    if (lArgValStrArr != null) {      if (lArgValStrArr.length >= 2) {        lArgMap.put(lArgValStrArr[0],URLDecoder.decode(lArgValStrArr[1]));      }    }  }  String lFmtList=URLDecoder.decode(lArgMap.get("fmt_list"));  ArrayList<Format> lFormats=new ArrayList<Format>();  if (null != lFmtList) {    String lFormatStrs[]=lFmtList.split(",");    for (    String lFormatStr : lFormatStrs) {      Format lFormat=new Format(lFormatStr);      lFormats.add(lFormat);    }  }  String lStreamList=lArgMap.get("url_encoded_fmt_stream_map");  if (null != lStreamList) {    String lStreamStrs[]=lStreamList.split(",");    ArrayList<VideoStream> lStreams=new ArrayList<VideoStream>();    for (    String lStreamStr : lStreamStrs) {      VideoStream lStream=new VideoStream(lStreamStr);      lStreams.add(lStream);    }    int lFormatId=Integer.parseInt(pYouTubeFmtQuality);    Format lSearchFormat=new Format(lFormatId);    while (!lFormats.contains(lSearchFormat) && pFallback) {      int lOldId=lSearchFormat.getId();      int lNewId=getSupportedFallbackId(lOldId);      if (lOldId == lNewId) {        break;      }      lSearchFormat=new Format(lNewId);    }    int lIndex=lFormats.indexOf(lSearchFormat);    if (lIndex >= 0) {      VideoStream lSearchStream=lStreams.get(lIndex);      lUriStr=lSearchStream.getUrl();    }  }  return lUriStr;}  }
class C{  public static boolean isSnapshotInConsistencyGroup(List<BlockSnapshot> snapshots,DbClient dbClient){  return getSnapshotsConsistencyGroup(snapshots,dbClient) != null;}  }
class C{  public T textAttr(String value){  return attr("text",value);}  }
class C{  public static String layoutCompoundLabel(FontMetrics fm,String text,Icon icon,int verticalAlignment,int horizontalAlignment,int verticalTextPosition,int horizontalTextPosition,Rectangle viewR,Rectangle iconR,Rectangle textR,int textIconGap){  if (icon != null) {    iconR.width=icon.getIconWidth();    iconR.height=icon.getIconHeight();  } else {    iconR.width=iconR.height=0;  }  boolean textIsEmpty=(text == null) || (text.equals(""));  String rettext="";  if (textIsEmpty) {    textR.width=textR.height=0;  } else {    Dimension dim=new Dimension(SwingUtilities.computeStringWidth(fm,text),fm.getHeight());    textR.width=dim.width;    textR.height=dim.height;  }  int gap=(textIsEmpty || (icon == null)) ? 0 : textIconGap;  if (!textIsEmpty) {    int availTextWidth;    if (horizontalTextPosition == CENTER) {      availTextWidth=viewR.width;    } else {      availTextWidth=viewR.width - (iconR.width + gap);    }    if (textR.width > availTextWidth) {      String clipString="...";      int totalWidth=SwingUtilities.computeStringWidth(fm,clipString);      int nChars;      rettext="";      for (nChars=text.length() - 1; nChars >= 0; nChars--) {        totalWidth+=fm.charWidth(text.charAt(nChars));        if (totalWidth > availTextWidth) {          break;        }        rettext=text.charAt(nChars) + rettext;      }      rettext=clipString + rettext;      textR.width=SwingUtilities.computeStringWidth(fm,rettext);    }  }  if (verticalTextPosition == TOP) {    if (horizontalTextPosition != CENTER) {      textR.y=0;    } else {      textR.y=-(textR.height + gap);    }  } else   if (verticalTextPosition == CENTER) {    textR.y=(iconR.height / 2) - (textR.height / 2);  } else {    if (horizontalTextPosition != CENTER) {      textR.y=iconR.height - textR.height;    } else {      textR.y=(iconR.height + gap);    }  }  if (horizontalTextPosition == LEFT) {    textR.x=-(textR.width + gap);  } else   if (horizontalTextPosition == CENTER) {    textR.x=(iconR.width / 2) - (textR.width / 2);  } else {    textR.x=(iconR.width + gap);  }  int labelR_x=Math.min(iconR.x,textR.x);  int labelR_width=Math.max(iconR.x + iconR.width,textR.x + textR.width) - labelR_x;  int labelR_y=Math.min(iconR.y,textR.y);  int labelR_height=Math.max(iconR.y + iconR.height,textR.y + textR.height) - labelR_y;  int dx, dy;  if (verticalAlignment == TOP) {    dy=viewR.y - labelR_y;  } else   if (verticalAlignment == CENTER) {    dy=(viewR.y + (viewR.height / 2)) - (labelR_y + (labelR_height / 2));  } else {    dy=(viewR.y + viewR.height) - (labelR_y + labelR_height);  }  if (horizontalAlignment == LEFT) {    dx=viewR.x - labelR_x;  } else   if (horizontalAlignment == RIGHT) {    dx=(viewR.x + viewR.width) - (labelR_x + labelR_width);  } else {    dx=(viewR.x + (viewR.width / 2)) - (labelR_x + (labelR_width / 2));  }  textR.x+=dx;  textR.y+=dy;  iconR.x+=dx;  iconR.y+=dy;  return rettext;}  }
class C{  @Override public void clear(){  super.clear();  double[] keys=_set;  Object[] values=_values;  for (int i=keys.length; i-- > 0; ) {    keys[i]=(double)0;    values[i]=null;  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == DelegatingMember.class) {switch (derivedFeatureID) {case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_BASE_TYPE:      return ImPackage.DELEGATING_MEMBER__DELEGATION_BASE_TYPE;case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:    return ImPackage.DELEGATING_MEMBER__DELEGATION_SUPER_CLASS_STEPS;case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_TARGET:  return ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET;case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:return ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET_IS_ABSTRACT;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public NbtTagString(String name){  super(name);}  }
class C{  public static String createPath(final String[] pathElements,String separator){  separator=ObjectUtils.defaultIfNull(separator,File.separator);  final StringBuilder buffer=new StringBuilder();  for (  String pathElement : pathElements) {    buffer.append(separator).append(pathElement);  }  return buffer.toString();}  }
class C{  @Override public int neighborsIndexOf(final IScope scope,final int placeIndex,final int n){  throw GamaRuntimeException.warning("The diffusion of signals must rely on a neighbors cache in the grid",scope);}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public BeanTransformerAdapter(){}  }
class C{  private boolean loadLOBData(){  if (isStoreAttachmentsOnFileSystem) {    return loadLOBDataFromFileSystem();  }  return loadLOBDataFromDB();}  }
class C{  @Override public void reset() throws IOException {  throw new IOException("reset not supported");}  }
class C{  protected static boolean isOn(String property){  return ("true,on,yes,1".indexOf(property) > -1);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.269 -0500",hash_original_method="485F32D8EAC40E4F4B6CB1DCBDB98D35",hash_generated_method="B3E15975F95E46A025B1FE5211A37494") public ConcurrentHashMap(Map<? extends K,? extends V> m){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);  putAll(m);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.BOOLEAN_LITERAL__TRUE:    return true_ != TRUE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @Override public void insertFront(Item x){  insert(x,0);}  }
class C{  public int extraArcs(BayesNet other){  try {    Sync(other);    int nExtra=0;    for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {      for (int iParent=0; iParent < other.getParentSet(m_order[iAttribute]).getNrOfParents(); iParent++) {        int nParent=m_order[other.getParentSet(m_order[iAttribute]).getParent(iParent)];        if (!m_ParentSets[iAttribute].contains(nParent) && !m_ParentSets[nParent].contains(iAttribute)) {          nExtra++;        }      }    }    return nExtra;  } catch (  Exception e) {    System.err.println(e.getMessage());    return 0;  }}  }
class C{  public static IndexCursor createPrimaryKeyCursor(Table table) throws IOException {  return createCursor(table.getPrimaryKeyIndex());}  }
class C{  public static SortClause desc(String item){  return new SortClause(item,ORDER.desc);}  }
class C{  public GridProfile(){}  }
class C{  public void removeListener(final SelectionListener listener1){  if (this.listener == listener1)   this.listener=null;}  }
class C{  protected Match createMatchFromPacket(IOFSwitch sw,OFPort inPort,FloodlightContext cntx){  Ethernet eth=IFloodlightProviderService.bcStore.get(cntx,IFloodlightProviderService.CONTEXT_PI_PAYLOAD);  VlanVid vlan=VlanVid.ofVlan(eth.getVlanID());  MacAddress srcMac=eth.getSourceMACAddress();  MacAddress dstMac=eth.getDestinationMACAddress();  Match.Builder mb=sw.getOFFactory().buildMatch();  mb.setExact(MatchField.IN_PORT,inPort);  if (FLOWMOD_DEFAULT_MATCH_MAC) {    mb.setExact(MatchField.ETH_SRC,srcMac).setExact(MatchField.ETH_DST,dstMac);  }  if (FLOWMOD_DEFAULT_MATCH_VLAN) {    if (!vlan.equals(VlanVid.ZERO)) {      mb.setExact(MatchField.VLAN_VID,OFVlanVidMatch.ofVlanVid(vlan));    }  }  if (eth.getEtherType() == EthType.IPv4) {    IPv4 ip=(IPv4)eth.getPayload();    IPv4Address srcIp=ip.getSourceAddress();    IPv4Address dstIp=ip.getDestinationAddress();    if (FLOWMOD_DEFAULT_MATCH_IP_ADDR) {      mb.setExact(MatchField.ETH_TYPE,EthType.IPv4).setExact(MatchField.IPV4_SRC,srcIp).setExact(MatchField.IPV4_DST,dstIp);    }    if (FLOWMOD_DEFAULT_MATCH_TRANSPORT) {      if (!FLOWMOD_DEFAULT_MATCH_IP_ADDR) {        mb.setExact(MatchField.ETH_TYPE,EthType.IPv4);      }      if (ip.getProtocol().equals(IpProtocol.TCP)) {        TCP tcp=(TCP)ip.getPayload();        mb.setExact(MatchField.IP_PROTO,IpProtocol.TCP).setExact(MatchField.TCP_SRC,tcp.getSourcePort()).setExact(MatchField.TCP_DST,tcp.getDestinationPort());      } else       if (ip.getProtocol().equals(IpProtocol.UDP)) {        UDP udp=(UDP)ip.getPayload();        mb.setExact(MatchField.IP_PROTO,IpProtocol.UDP).setExact(MatchField.UDP_SRC,udp.getSourcePort()).setExact(MatchField.UDP_DST,udp.getDestinationPort());      }    }  } else   if (eth.getEtherType() == EthType.ARP) {    mb.setExact(MatchField.ETH_TYPE,EthType.ARP);  } else   if (eth.getEtherType() == EthType.IPv6) {    IPv6 ip=(IPv6)eth.getPayload();    IPv6Address srcIp=ip.getSourceAddress();    IPv6Address dstIp=ip.getDestinationAddress();    if (FLOWMOD_DEFAULT_MATCH_IP_ADDR) {      mb.setExact(MatchField.ETH_TYPE,EthType.IPv6).setExact(MatchField.IPV6_SRC,srcIp).setExact(MatchField.IPV6_DST,dstIp);    }    if (FLOWMOD_DEFAULT_MATCH_TRANSPORT) {      if (!FLOWMOD_DEFAULT_MATCH_IP_ADDR) {        mb.setExact(MatchField.ETH_TYPE,EthType.IPv6);      }      if (ip.getNextHeader().equals(IpProtocol.TCP)) {        TCP tcp=(TCP)ip.getPayload();        mb.setExact(MatchField.IP_PROTO,IpProtocol.TCP).setExact(MatchField.TCP_SRC,tcp.getSourcePort()).setExact(MatchField.TCP_DST,tcp.getDestinationPort());      } else       if (ip.getNextHeader().equals(IpProtocol.UDP)) {        UDP udp=(UDP)ip.getPayload();        mb.setExact(MatchField.IP_PROTO,IpProtocol.UDP).setExact(MatchField.UDP_SRC,udp.getSourcePort()).setExact(MatchField.UDP_DST,udp.getDestinationPort());      }    }  }  return mb.build();}  }
class C{  public static float mixFriction(float friction1,float friction2){  return MathUtils.sqrt(friction1 * friction2);}  }
class C{  private void loadProperties(Event event,Entity entity,Transition transition,int actionType) throws TransitionRollbackException {  try {    propertiesManager.loadProperties();    properties=propertiesManager.getProperties();    if (this.securityInfo != null) {      String jsonSecurityInfo=this.securityInfo.toJSON();      properties.put(AuthenticationInfo.SECURITY_INFO_PROPERTY,jsonSecurityInfo);    }  } catch (  ReplicatorException e) {    if (logger.isDebugEnabled())     logger.debug("Unable to load properties",e);    throw new TransitionRollbackException("Unable to load properties file: " + e.getMessage(),event,entity,transition,actionType,e);  }}  }
class C{  public static boolean isSuccessResponseType(char type){  return ((type & 0x0110) == STUN_SUCCESS_RESP);}  }
class C{  protected void addConnection(final Territory t1,final Territory t2){  if (t1.equals(t2)) {    throw new IllegalArgumentException("Cannot connect a territory to itself");  }  if (!m_territories.contains(t1) || !m_territories.contains(t2)) {    throw new IllegalArgumentException("Map doesnt know about one of " + t1 + " "+ t2);  }  setConnection(t1,t2);  setConnection(t2,t1);}  }
class C{  public Chunk handleChunk(Chunk request){  if (false)   Log.v("ddm-heap","Handling " + name(request.type) + " chunk");  int type=request.type;  if (type == CHUNK_MPRS) {    return handleMPRS(request);  } else   if (type == CHUNK_MPRE) {    return handleMPRE(request);  } else   if (type == CHUNK_MPSS) {    return handleMPSS(request);  } else   if (type == CHUNK_MPSE) {    return handleMPSE(request);  } else   if (type == CHUNK_MPRQ) {    return handleMPRQ(request);  } else {    throw new RuntimeException("Unknown packet " + ChunkHandler.name(type));  }}  }
class C{  private IV pickOrBuildBestLabel(){switch (bestLabels.size()) {case 1:    return bestLabels.get(0);case 0:  return bestEffortLabel();default :return joinLabels();}}  }
class C{  public OutputBitStream(final File file,final int bufSize) throws FileNotFoundException {  this(new FileOutputStream(file),bufSize);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MInventory[");  sb.append(get_ID()).append("-").append(getDocumentNo()).append(",M_Warehouse_ID=").append(getM_Warehouse_ID()).append("]");  return sb.toString();}  }
class C{  public static final String nameForDaemon(final String daemonName){  return NAME_PREFIX + daemonName;}  }
class C{  public EventValueReferenceExpression createEventValueReferenceExpression(){  EventValueReferenceExpressionImpl eventValueReferenceExpression=new EventValueReferenceExpressionImpl();  return eventValueReferenceExpression;}  }
class C{  public static Enumeration<String> listStemmers(){  initStemmers();  return m_Stemmers.elements();}  }
class C{  public Triangle groundRayTest(Vector3 testPoint,float distance,Bits allowedMeshParts){  tmpRayVerticalRayTest.set(tmpVerticalRayTest1.set(testPoint),tmpVerticalRayTest2.set(Constants.V3_DOWN));  return rayTest(tmpRayVerticalRayTest,distance,allowedMeshParts);}  }
class C{  public TransactionInput(Outpoint source,int sequence,Script script){  Objects.requireNonNull(source,"Transaction source must not be null");  Objects.requireNonNull(script,"Transaction input script must not be null");  this.source=source;  this.sequence=sequence;  this.script=script;}  }
class C{  static public String normalize(String n){  String r=n.toLowerCase(Locale.US).trim();  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {    r=deAccent(r);  }  StringBuilder b=new StringBuilder();  for (  char c : r.toCharArray()) {    c=Character.toLowerCase(c);    if (Character.isLetterOrDigit(c)) {      b.append(c);    } else     if (Character.isWhitespace(c)) {      if (b.length() > 0 && !Character.isWhitespace(b.charAt(b.length() - 1))) {        b.append(' ');      }    } else {switch (c) {case '&':case '/':case '_':case '.':        if (b.length() > 0 && !Character.isWhitespace(b.charAt(b.length() - 1))) {          b.append(' ');        }      break;case '\'':    break;}}}return b.toString();}  }
class C{  public void cancelSetup(){  dialogFrame.getDialog().dispose();  System.exit(0);}  }
class C{  public boolean hasMaxPhotosExt(){  return hasExtension(GphotoMaxPhotos.class);}  }
class C{  public float rotateBox(float speed,float degree,boolean invert,float offset,float weight,float f,float f1){  if (invert)   return -MathHelper.cos(f * speed + offset) * degree * f1 + weight * f1; else   return MathHelper.cos(f * speed + offset) * degree * f1 + weight * f1;}  }
class C{  protected final void checkServletVersions(WebXml theWebXml){  if (this.webXml.getVersion() != null && this.webXml.getVersion().compareTo(theWebXml.getVersion()) < 0) {    getLogger().warn("Merging elements from a version " + theWebXml.getVersion() + " descriptor into a version "+ this.webXml.getVersion()+ ", some elements may be skipped",this.getClass().getName());  }}  }
class C{  private void fixupCFGForOsr(IR ir){  for (int i=0, n=osrPoints.size(); i < n; i++) {    Instruction osr=osrPoints.get(i);    BasicBlock bb=osr.getBasicBlock();    BasicBlock newBB=bb.segregateInstruction(osr,ir);    bb.recomputeNormalOut(ir);    newBB.recomputeNormalOut(ir);  }}  }
class C{  public void testNearCloseWithTry() throws Exception {  String curVal=null;  grid(0).getOrCreateCache(getNearConfig());  NearCacheConfiguration nearCfg=new NearCacheConfiguration();  for (int i=0; i < 3; i++) {    try (IgniteCache<String,String> cache2=grid(2).getOrCreateNearCache(CACHE_NAME_NEAR,nearCfg)){      IgniteCache<String,String> cache0=grid(0).cache(CACHE_NAME_NEAR);      IgniteCache<String,String> cache1=grid(1).cache(CACHE_NAME_NEAR);      assert cache2.localPeek(KEY_VAL) == null;      assert cache0.get(KEY_VAL) == null || cache0.get(KEY_VAL).equals(curVal);      assert cache1.get(KEY_VAL) == null || cache1.get(KEY_VAL).equals(curVal);      assert cache2.get(KEY_VAL) == null || cache2.get(KEY_VAL).equals(curVal);      curVal=KEY_VAL + curVal;      cache2.put(KEY_VAL,curVal);      assert cache2.localPeek(KEY_VAL).equals(curVal);      assert cache0.get(KEY_VAL).equals(curVal);      assert cache1.get(KEY_VAL).equals(curVal);      assert cache2.get(KEY_VAL).equals(curVal);    }   }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ListMultimap(ListMultimap<K,V> orig){  this(copy(orig.map));}  }
class C{  public EditSessionEvent(@Nullable World world,Actor actor,int maxBlocks,Stage stage){  this.world=world;  this.actor=actor;  this.maxBlocks=maxBlocks;  this.stage=stage;}  }
class C{  public Map<String,String> parse(final String str,char separator){  if (str == null) {    return new HashMap<>();  }  return parse(str.toCharArray(),separator);}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple5<Window<T>,Window<T>,Window<T>,Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2,final WindowSpecification<T> specification3,final WindowSpecification<T> specification4,final WindowSpecification<T> specification5){  return fromStream(Seq.super.window(specification1,specification2,specification3,specification4,specification5));}  }
class C{  public BasicSplitPaneDivider createDefaultDivider(){  SeaGlassSplitPaneDivider divider=new SeaGlassSplitPaneDivider(this);  divider.setDividerSize(splitPane.getDividerSize());  return divider;}  }
class C{  public boolean redo(){  boolean canRedo=undoManager.canRedo();  if (canRedo) {    undoManager.redo();    canRedo=undoManager.canRedo();  } else {    UIManager.getLookAndFeel().provideErrorFeedback(editor);  }  return canRedo;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  WhiteboxRaster image2;  int cols=0;  int rows=0;  double noData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, b, i;  String inputFilesString=null;  String[] imageFiles;  double[] imageTotals;  long[] imageNs;  double[] imageAverages;  String[] shortNames=null;  String[] units=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 1) {    showFeedback("At least one image must be specified for an image correlation.");    return;  }  try {    imageTotals=new double[numImages];    imageNs=new long[numImages];    imageAverages=new double[numImages];    shortNames=new String[numImages];    units=new String[numImages];    double[] data;    for (a=0; a < numImages; a++) {      updateProgress("Image " + (a + 1) + ", Calculating image averages:",-1);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (!image.getZUnits().toLowerCase().equals("not specified")) {        units[a]=image.getZUnits();      } else {        units[a]="";      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotals[a]+=data[col];            imageNs[a]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();      imageAverages[a]=imageTotals[a] / imageNs[a];      progress=(int)(100f * (a + 1) / numImages);      updateProgress("Image " + (a + 1) + ", Calculating image average:",(int)progress);    }    String retstr=null;    retstr="IMAGE AVERAGE\n";    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numImages; a++) {      if (units[a].equals("")) {        retstr=retstr + "\n" + shortNames[a]+ "\t"+ df.format(imageAverages[a]);      } else {        retstr=retstr + "\n" + shortNames[a]+ "\t"+ df.format(imageAverages[a])+ units[a];      }    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public DateTime withMillisOfSecond(int millis){  return withMillis(getChronology().millisOfSecond().set(getMillis(),millis));}  }
class C{  public void write(byte[] data){}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (cv != null) {    return cv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public void reset(){  mDistanceMap.clear();  mIncomingEdgeMap.clear();}  }
class C{  private Rect computeLayout(){  RectF r=new RectF(mCropRect.left,mCropRect.top,mCropRect.right,mCropRect.bottom);  mMatrix.mapRect(r);  return new Rect(Math.round(r.left),Math.round(r.top),Math.round(r.right),Math.round(r.bottom));}  }
class C{  public final boolean attachToContext(Context context){  if (context instanceof InternalEventContext) {    InternalEventContext iec=(InternalEventContext)context;    iec.attachEventCartridge(this);    return true;  } else {    return false;  }}  }
class C{  public static double areaUnderCurve(XYCurve curve){  DoubleArray data=curve.data;  double prevx=data.get(0), prevy=data.get(1);  if (prevx > curve.minx) {    throw new UnsupportedOperationException("Curves must be monotone on X for areaUnderCurve to be valid.");  }  double area=0.0;  for (int pos=2; pos < data.size(); pos+=2) {    final double curx=data.get(pos), cury=data.get(pos + 1);    if (prevx > curx) {      throw new UnsupportedOperationException("Curves must be monotone on X for areaUnderCurve to be valid.");    }    area+=(curx - prevx) * (prevy + cury) * .5;    prevx=curx;    prevy=cury;  }  if (prevx < curve.maxx) {    throw new UnsupportedOperationException("Curves must be complete on X for areaUnderCurve to be valid.");  }  return area;}  }
class C{  private void saveFile(File folder,String file,String u){  if (!folder.exists()) {    folder.mkdir();  }  BufferedInputStream in=null;  FileOutputStream fout=null;  try {    final URL url=new URL(u);    final int fileLength=url.openConnection().getContentLength();    in=new BufferedInputStream(url.openStream());    fout=new FileOutputStream(folder.getAbsolutePath() + "/" + file);    final byte[] data=new byte[Updater.BYTE_SIZE];    int count;    if (this.announce) {      this.plugin.getLogger().info("About to download a new update: " + this.versionName);    }    long downloaded=0;    while ((count=in.read(data,0,Updater.BYTE_SIZE)) != -1) {      downloaded+=count;      fout.write(data,0,count);      final int percent=(int)((downloaded * 100) / fileLength);      if (this.announce && ((percent % 10) == 0)) {        this.plugin.getLogger().info("Downloading update: " + percent + "% of "+ fileLength+ " bytes.");      }    }    for (    final File xFile : new File(this.plugin.getDataFolder().getParent(),this.updateFolder).listFiles()) {      if (xFile.getName().endsWith(".zip")) {        xFile.delete();      }    }    final File dFile=new File(folder.getAbsolutePath() + "/" + file);    if (dFile.getName().endsWith(".zip")) {      this.unzip(dFile.getCanonicalPath());    }    if (this.announce) {      this.plugin.getLogger().info("Finished updating.");    }  } catch (  final Exception ex) {    this.plugin.getLogger().warning("The auto-updater tried to download a new update, but was unsuccessful.");    this.result=Updater.UpdateResult.FAIL_DOWNLOAD;  } finally {    try {      if (in != null) {        in.close();      }      if (fout != null) {        fout.close();      }    } catch (    final Exception ex) {    }  }}  }
class C{  private static int computeArrayInitializationPos(IDocument document,ITextSelection line,int offset,String partitioning){  int pos=offset + line.getOffset();  if (pos == 0)   return -1;  int p=firstNonWhitespaceBackward(document,pos - 1,partitioning,-1);  if (p == -1)   return -1;  try {    char ch=document.getChar(p);    if (ch != '=' && ch != ']')     return -1;    if (p == 0)     return offset;    p=firstNonWhitespaceBackward(document,p - 1,partitioning,-1);    if (p == -1)     return -1;    ch=document.getChar(p);    if (Character.isJavaIdentifierPart(ch) || ch == ']' || ch == '[')     return offset;  } catch (  BadLocationException e) {  }  return -1;}  }
class C{  public void append(int key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=Math.max(pos + 1,mKeys.length * 2);    int[] nkeys=new int[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public ApplicationDirector(){  applicationDirector=this;}  }
class C{  protected void syncUserPreferencesWithTable(){  TableItem[] itemList=availableFactoriesTableViewer.getTable().getItems();  UserPreferences currentProps=getCurrentProps();  for (int i=0; i < itemList.length; i++) {    DetectorFactory factory=(DetectorFactory)itemList[i].getData();    currentProps.enableDetector(factory,itemList[i].getChecked());  }}  }
class C{  public long executeForLastInsertedRowId(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return 0;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    return mConnection.executeForLastInsertedRowId(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__TYPE_ARGS:    return getTypeArgs();case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__TARGET:  return getTarget();case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__PROPERTY:if (resolve) return getProperty();return basicGetProperty();case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__PROPERTY_AS_TEXT:return getPropertyAsText();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected int readShort(){  return read() | (read() << 8);}  }
class C{  public String outputClassificationTipText(){  return "Whether to add an attribute with the actual classification.";}  }
class C{  public void print(char c){  return;}  }
class C{  void checksum(){  if (transitions == null) {    crc32=0;    return;  }  Checksum sum=new Checksum();  for (int i=0; i < transitions.size(); i++) {    int offset=offsets.get(i);    sum.update(transitions.get(i) + offset);    sum.update(offset);    sum.update(dstOffsets.get(i));  }  crc32=(int)sum.getValue();}  }
class C{  private void modifyStorageViewVirtualVolumes(VPlexStorageViewInfo storageViewInfo,String virtualVolumesArg,URI requestURI) throws VPlexApiException {  ClientResponse response=null;  try {    s_logger.info("Modify storage view virtual volumes request URI is {}",requestURI.toString());    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_O,virtualVolumesArg);    argsMap.put(VPlexApiConstants.ARG_DASH_V,storageViewInfo.getPath());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Storage view modify virtual volumes POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Storage view modify virtual volumes response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Storage view volume changes completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.modifyViewVolumesFailureStatus(storageViewInfo.getName(),String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully updated volumes for storage view {}",storageViewInfo.getName());  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedModifyViewVolumes(storageViewInfo.getName(),e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public _ScheduleDays(final _ScheduleDays_Flag[] flags){  super(flags);}  }
class C{  public void modifyEnergyStored(int energy){  this.energy+=energy;  if (this.energy > capacity) {    this.energy=capacity;  } else   if (this.energy < 0) {    this.energy=0;  }}  }
class C{  private void drawStringInRect(Graphics2D g2,Rectangle2D bounds,Font font,String text){  g2.setFont(font);  FontMetrics fm=g2.getFontMetrics(font);  Rectangle2D r=TextUtilities.getTextBounds(text,g2,fm);  double x=bounds.getX();  if (r.getWidth() < bounds.getWidth()) {    x=x + (bounds.getWidth() - r.getWidth()) / 2;  }  LineMetrics metrics=font.getLineMetrics(text,g2.getFontRenderContext());  g2.drawString(text,(float)x,(float)(bounds.getMaxY() - this.bottomInnerGap - metrics.getDescent()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.446 -0400",hash_original_method="FA52A4C3707CCDDDF489C2F17047599B",hash_generated_method="B147CA4DC03A3AF6F27BF3CF82100557") private int handleAEIOUY(String value,DoubleMetaphoneResult result,int index){  if (index == 0) {    result.append('A');  }  return index + 1;}  }
class C{  public static boolean hasSelfPermissions(Context context,String... permissions){  for (  String permission : permissions) {    if (permissionExists(permission) && !hasSelfPermission(context,permission)) {      return false;    }  }  return true;}  }
class C{  private static Iterator<EdgeInfo> parse(int sup[],int dem[],int sup_transship[][],int[] warehouse_costs,int[] warehouse_limits,int dem_transship[][],int costs[][]){  int m=sup.length;  int n=dem.length;  int w=warehouse_costs.length;  if (m != costs.length) {    throw new IllegalArgumentException("costs matrix has " + costs.length + " suppliers but sup vector has "+ m);  }  for (int i=0; i < m; i++) {    if (costs[i].length != n) {      throw new IllegalArgumentException("costs matrix has " + costs[i].length + " entries but dem vector has "+ n);    }  }  if (w != 0) {    if (sup_transship.length != m) {      throw new IllegalArgumentException("The size of supplier transshipment costs doesn't match the number of suppliers.");    }    if (dem_transship.length != w) {      throw new IllegalArgumentException("The size of demanders transshipment costs doesn't match the number of warehouses.");    }    for (int i=0; i < w; i++) {      if (dem_transship[i].length != n) {        throw new IllegalArgumentException("The size of demanders transshipment costs doesn't match the number of warehouses.");      }    }    for (int i=0; i < m; i++) {      if (sup_transship[i].length != w) {        throw new IllegalArgumentException("The size of supplier transshipment costs doesn't match the number of warehouses.");      }    }  }  ArrayList<EdgeInfo> edges=new ArrayList<EdgeInfo>();  int supply_offset=1;  int w_offset=1 + m;  int demand_offset=1 + m + 2 * w;  int target=1 + m + 2 * w + n;  for (int i=0; i < m; i++) {    edges.add(new EdgeInfo(0,supply_offset + i,sup[i],0));  }  for (int j=0; j < n; j++) {    edges.add(new EdgeInfo(demand_offset + j,target,dem[j],0));  }  for (int k=0; k < w; k++) {    edges.add(new EdgeInfo(w_offset + 2 * k,w_offset + (2 * k + 1),warehouse_limits[k],warehouse_costs[k]));  }  for (int i=0; i < m; i++) {    for (int k=0; k < w; k++) {      edges.add(new EdgeInfo(supply_offset + i,w_offset + 2 * k,sup[i],sup_transship[i][k]));    }  }  for (int i=0; i < w; i++) {    for (int j=0; j < n; j++) {      edges.add(new EdgeInfo(w_offset + 2 * i + 1,demand_offset + j,dem[j],dem_transship[i][j]));    }  }  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      edges.add(new EdgeInfo(supply_offset + i,demand_offset + j,Integer.MAX_VALUE,costs[i][j]));    }  }  return edges.iterator();}  }
class C{  private Iterable<Field> fieldsWithAnnotation(Class<?> cls,Class<? extends Annotation> annCls){  assert cls != null;  assert annCls != null;  Collection<Field> fields=fieldsFromCache(cls,annCls);  if (fields == null) {    fields=new ArrayList<>();    for (    Field field : cls.getDeclaredFields()) {      Annotation ann=field.getAnnotation(annCls);      if (ann != null || needsRecursion(field))       fields.add(field);    }    cacheFields(cls,annCls,fields);  }  return fields;}  }
class C{  void handleException(SQLException e) throws SQLException {switch (e.getErrorCode()) {case ErrorCode.CONCURRENT_UPDATE_1:case ErrorCode.DUPLICATE_KEY_1:case ErrorCode.ROW_NOT_FOUND_WHEN_DELETING_1:case ErrorCode.LOCK_TIMEOUT_1:    break;default :  throw e;}}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  int i;  int numSamplePoints=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  numSamplePoints=Integer.parseInt(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    if (rows * cols < numSamplePoints) {      showFeedback("The number of samples cannot exceed the number of cells.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    image.close();    NonDuplicatingPriorityQueue queue=new NonDuplicatingPriorityQueue(numSamplePoints);    Random generator=new Random();    GridCell gc;    i=0;    do {      row=generator.nextInt(rows);      col=generator.nextInt(cols);      gc=new GridCell(row,col);      if (queue.add(gc)) {        i++;        progress=(int)(100f * i / numSamplePoints);        updateProgress("Loop 1 of 2:",progress);      }    } while (i < numSamplePoints);    Iterator<GridCell> it=queue.iterator();    i=1;    do {      gc=queue.poll();      output.setValue(gc.row,gc.col,i);      i++;      progress=(int)(100f * i / numSamplePoints);      updateProgress("Loop 2 of 2:",progress);    } while (i < numSamplePoints);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String stringForSACPrimitiveType(short type){  return (String)sacTypesStrings.get(new Short(type));}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public static boolean containsOnlyWorkingSets(List<?> elements){  if (elements.isEmpty())   return false;  for (Iterator<?> iter=elements.iterator(); iter.hasNext(); ) {    if (!isWorkingSet(iter.next()))     return false;  }  return true;}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (contentHandler != null) {    contentHandler.endElement(uri,localName,qName);  }}  }
class C{  @Override public boolean nullsAreSortedAtStart(){  debugCodeCall("nullsAreSortedAtStart");  return false;}  }
class C{  public void reset(){  System.arraycopy(IV,0,cfbV,0,IV.length);  cipher.reset();}  }
class C{  public void message(LocoNetMessage m){  if (stopRequested == true) {    return;  }  if (handleMessageDuplexScanReport(m)) {    return;  }  if (handleMessageDuplexChannelReport(m)) {    return;  }  return;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doPost(request,response);}  }
class C{  public DSignJar(JFrame parent,PrivateKey signPrivateKey,KeyPairType signKeyPairType,String signatureName,Provider provider) throws CryptoException {  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.signPrivateKey=signPrivateKey;  this.signKeyPairType=signKeyPairType;  this.provider=provider;  setTitle(res.getString("DSignJar.Title"));  initComponents(signatureName);}  }
class C{  private String createResponseUrlFromLogoutResponse(final LogoutResponse samlResponse,final String idpUrl,String relayState) throws MarshallingException, IOException, WebssoClientException, NoSuchAlgorithmException {  logger.info("generateResponseUrl to IDP," + idpUrl);  String retval=null;  Validate.notNull(samlResponse,"Null LogoutResponse object.");  Validate.notNull(idpUrl,"idpUrl can not be null");  String encodedResponse=SamlUtils.encodeSAMLObject(samlResponse,true);  SPConfiguration spConfig=this.getMetadataSettings().getSPConfiguration(this.getTenant());  String signingAlgo=spConfig.getSigningAlgorithm();  PrivateKey key=spConfig.getSigningPrivateKey();  if (null == key && null == signingAlgo) {    throw new WebssoClientException("SP Configuration does not have signing key/algorithm set.");  }  String toBeSigned=SamlUtils.generateRedirectUrlQueryStringParameters(null,encodedResponse,relayState,spConfig.getSigningAlgorithm(),null);  SamlUtils samlUtils=new SamlUtils(null,key,signingAlgo,null,SamlUtils.getSpSloLocation(spConfig,SamlNames.HTTP_REDIRECT));  String signature=samlUtils.signMessage(toBeSigned);  retval=samlResponse.getDestination();  String queryString=SamlUtils.generateRedirectUrlQueryStringParameters(null,encodedResponse,relayState,signingAlgo,signature);  retval=retval + "?" + queryString;  logger.info("Generated URL " + retval);  return retval;}  }
class C{  public static void tombstonegc() throws Exception {  LocalRegion r=(LocalRegion)cache.getRegion("/" + REGION_NAME);  assertNotNull(r);  DistributedMember id=r.getCache().getDistributedSystem().getDistributedMember();  RegionEventImpl regionEvent=new RegionEventImpl(r,Operation.REGION_DESTROY,null,true,id);  FilterInfo clientRouting=r.getFilterProfile().getLocalFilterRouting(regionEvent);  assertTrue(clientRouting.getInterestedClients().size() > 0);  regionEvent.setLocalFilterInfo(clientRouting);  Map<VersionSource,Long> map=Collections.emptyMap();  ClientTombstoneMessage message=ClientTombstoneMessage.gc(r,map,new EventID(r.getCache().getDistributedSystem()));  CacheClientNotifier.notifyClients(regionEvent,message);}  }
class C{  public PrintServiceAttributeEvent(PrintService source,PrintServiceAttributeSet attributes){  super(source);  this.attributes=AttributeSetUtilities.unmodifiableView(attributes);}  }
class C{  public void startGroupInfoActivity(Context context,int gid){  Bundle b=new Bundle();  b.putInt(Intents.EXTRA_GROUP_ID,gid);  startActivity(context,b,GroupInfoActivity.class);}  }
class C{  public Pos3D translate(ForgeDirection direction,double amount){  return translate(direction.offsetX * amount,direction.offsetY * amount,direction.offsetZ * amount);}  }
class C{  public static int convertWidthInCharsToPixels(FontMetrics fontMetrics,int chars){  return fontMetrics.getAverageCharWidth() * chars;}  }
class C{  public void addExportedLibRelative(String pLibPath) throws MalformedURLException {  URL url=new File(getPluginPath() + File.separator + pLibPath).toURI().toURL();  fExportedLibs.add(url);}  }
class C{  public static String toString(int v[],int w){  StringBuilder sb=new StringBuilder("[ ");  for (int k=0; k < v.length; k++) {    sb.append(String.format("%" + w + "d ",v[k]));  }  sb.append("]");  return sb.toString();}  }
class C{  @RequestMapping(value="/contacts/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public void delete(@PathVariable Long id){  log.debug("REST request to delete Contact : {}",id);  contactRepository.delete(id);}  }
class C{  public NonUtf8ResponseContentType(){  requestFileName="getstate.query";  responseFile="getstate-iso88591.answer";  responseContentType=TEXT_XML;  responseServiceContentType=contentTypeWithCharset(TEXT_XML,ISO_8859_1.name());}  }
class C{  public static boolean isUrl(String url){  Pattern pattern=Pattern.compile("^([hH][tT]{2}[pP]://|[hH][tT]{2}[pP][sS]://)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\\/])+$");  return pattern.matcher(url).matches();}  }
class C{  public void listSiteContents(String kind) throws IOException, ServiceException {  String url=kind.equals("all") ? getContentFeedUrl() : getContentFeedUrl() + "?kind=" + kind;  ContentFeed contentFeed=service.getFeed(new URL(url),ContentFeed.class);  for (  WebPageEntry entry : contentFeed.getEntries(WebPageEntry.class)) {    System.out.println("WebPageEntry:");    System.out.println("  title: " + entry.getTitle().getPlainText());    System.out.println("  id: " + getEntryId(entry));    if (entry.getParentLink() != null) {      System.out.println("  parent id: " + getEntryId(entry.getParentLink().getHref()));    }    System.out.println("  authors: " + entry.getAuthors().get(0).getEmail());    System.out.println("  content: " + getContentBlob(entry));    System.out.println("");  }  for (  ListPageEntry entry : contentFeed.getEntries(ListPageEntry.class)) {    System.out.println("ListPageEntry:");    System.out.println("  title: " + entry.getTitle().getPlainText());    System.out.println("  id: " + getEntryId(entry));    if (entry.getParentLink() != null) {      System.out.println("  parent id: " + getEntryId(entry.getParentLink().getHref()));    }    for (    Column col : entry.getData().getColumns()) {      System.out.print("  [" + col.getIndex() + "] "+ col.getName()+ "\t");    }    System.out.println("");  }  for (  ListItemEntry entry : contentFeed.getEntries(ListItemEntry.class)) {    if (entry.getParentLink() != null) {      System.out.println("  parent id: " + getEntryId(entry.getParentLink().getHref()));    }    for (    Field field : entry.getFields()) {      System.out.print("  [" + field.getIndex() + "] "+ field.getValue()+ "\t");    }    System.out.println("\n");  }  for (  FileCabinetPageEntry entry : contentFeed.getEntries(FileCabinetPageEntry.class)) {    System.out.println("FileCabinetPageEntry:");    System.out.println("  title: " + entry.getTitle().getPlainText());    System.out.println("  id: " + getEntryId(entry));    if (entry.getParentLink() != null) {      System.out.println("  parent id: " + getEntryId(entry.getParentLink().getHref()));    }    System.out.println("  content: " + getContentBlob(entry));    System.out.println("");  }  for (  CommentEntry entry : contentFeed.getEntries(CommentEntry.class)) {    System.out.println("CommentEntry:");    System.out.println("  id: " + getEntryId(entry));    if (entry.getParentLink() != null) {      System.out.println("  parent id: " + getEntryId(entry.getParentLink().getHref()));    }    System.out.println("  in-reply-to: " + entry.getInReplyTo().toString());    System.out.println("  content: " + getContentBlob(entry));    System.out.println("");  }  for (  AnnouncementsPageEntry entry : contentFeed.getEntries(AnnouncementsPageEntry.class)) {    System.out.println("AnnouncementsPageEntry:");    System.out.println("  title: " + entry.getTitle().getPlainText());    System.out.println("  id: " + getEntryId(entry));    if (entry.getParentLink() != null) {      System.out.println("  parent id: " + getEntryId(entry.getParentLink().getHref()));    }    System.out.println("  content: " + getContentBlob(entry));    System.out.println("");  }  for (  AnnouncementEntry entry : contentFeed.getEntries(AnnouncementEntry.class)) {    System.out.println("AnnouncementEntry:");    System.out.println("  title: " + entry.getTitle().getPlainText());    System.out.println("  id: " + getEntryId(entry));    if (entry.getParentLink() != null) {      System.out.println("  parent id: " + getEntryId(entry.getParentLink().getHref()));    }    System.out.println("  draft?: " + entry.isDraft());    System.out.println("  content: " + getContentBlob(entry));    System.out.println("");  }  for (  AttachmentEntry entry : contentFeed.getEntries(AttachmentEntry.class)) {    System.out.println("AttachmentEntry:");    System.out.println("  title: " + entry.getTitle().getPlainText());    System.out.println("  id: " + getEntryId(entry));    if (entry.getParentLink() != null) {      System.out.println("  parent id: " + getEntryId(entry.getParentLink().getHref()));    }    if (entry.getSummary() != null) {      System.out.println("  description: " + entry.getSummary().getPlainText());    }    System.out.println("  revision: " + entry.getRevision().getValue());    MediaContent content=(MediaContent)entry.getContent();    System.out.println("  src: " + content.getUri());    System.out.println("  content type: " + content.getMimeType().getMediaType());    System.out.println("");  }  for (  WebAttachmentEntry entry : contentFeed.getEntries(WebAttachmentEntry.class)) {    System.out.println("WebAttachmentEntry:");    System.out.println("  title: " + entry.getTitle().getPlainText());    System.out.println("  id: " + getEntryId(entry));    if (entry.getParentLink() != null) {      System.out.println("  parent id: " + getEntryId(entry.getParentLink().getHref()));    }    if (entry.getSummary() != null) {      System.out.println("  description: " + entry.getSummary().getPlainText());    }    System.out.println("  src: " + ((MediaContent)entry.getContent()).getUri());    System.out.println("");  }}  }
class C{  private int determineTransportType(ServiceRecord serviceRecord){  String cid=serviceRecord.getCid();  if ("ippp".equalsIgnoreCase(cid)) {    int ippType=getEncodedIntFromIPPPServiceRecord(serviceRecord,SERVICE_RECORD_TYPE_IPPP_TAG);    if (ippType == SERVICE_RECORD_TYPE_IPPP_PUBLIC) {      int result=0;      srBis=serviceRecord;      result|=TRANSPORT_BIS_B;      return result;    } else     if ((ippType == SERVICE_RECORD_TYPE_IPPP_CORPORATE) || (ippType != SERVICE_RECORD_TYPE_IPPP_PROVISIONING)) {      srMds=serviceRecord;      return TRANSPORT_MDS;    }  }  if ("wptcp".equalsIgnoreCase(cid)) {    String interfaceName=getEncodedStringFieldFromWptcpServiceRecord(serviceRecord,ENCODED_TYPE_INTERFACE);    if (SERVICE_RECORD_TYPE_WPTCP_INTERFACE_WIFI.equals(interfaceName)) {      srTcpWiFi=serviceRecord;      return TRANSPORT_TCP_WIFI;    } else {      String mmscUrl=getEncodedStringFieldFromWptcpServiceRecord(serviceRecord,ENCODED_TYPE_MMSC_URL);      String httpProxyAddress=getEncodedStringFieldFromWptcpServiceRecord(serviceRecord,ENCODED_TYPE_HTTP_PROXY_ADDRESS);      if ((mmscUrl == null) || (mmscUrl.trim().length() == 0)) {        if (getEncodedIntFieldFromWptcpServiceRecord(serviceRecord,ENCODED_TYPE_PROXY_AUTH_USERNAME_TYPE) != AUTH_TYPE_BBAUTH_TOKEN_NEGOTIATION) {          if ((httpProxyAddress == null) || (httpProxyAddress.trim().length() == 0)) {            srTcpCellularWithApn=serviceRecord;            return TCP_CELLULAR_APN_SERVICE_BOOK;          } else {            srWap2=serviceRecord;            return TRANSPORT_WAP2;          }        }      }    }  }  if ("wap".equalsIgnoreCase(cid)) {    String mmscUrl=getEncodedStringFieldFromWapServiceRecord(serviceRecord,SERVICE_RECORD_TYPE_WAP_MMSC_URL_TAG);    if ((mmscUrl == null) || (mmscUrl.trim().length() == 0)) {      srWap=serviceRecord;      return TRANSPORT_WAP;    }  }  return -1;}  }
class C{  public String toString(){  int iMax=length() - 1;  if (iMax == -1) {    return "[]";  }  StringBuilder b=new StringBuilder((17 + 2) * (iMax + 1));  b.append('[');  for (int i=0; ; i++) {    b.append(longBitsToDouble(longs.get(i)));    if (i == iMax) {      return b.append(']').toString();    }    b.append(',').append(' ');  }}  }
class C{  public void clear(){  root=null;  size=0;}  }
class C{  private static void dualPivotQuicksort(byte[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  byte ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    byte t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    byte t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    byte t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    byte t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    byte t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    byte t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    byte t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    byte t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    byte t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  byte pivot1=ae2;  a[e2]=a[left];  byte pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public static AccountType newInstance(String value){  final AccountType returnInstance=new AccountType();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  public void dup2X2(){  mv.visitInsn(Opcodes.DUP2_X2);}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  private boolean excludeFromTotal(Context ctx){  return isSelfIgnored() && getServletContext().equals(ctx.getServletContext());}  }
class C{  public League(String namesCSV,String lastNamesCSV,boolean difficulty){  isHardMode=difficulty;  heismanDecided=false;  hasScheduledBowls=false;  bowlGames=new Game[10];  leagueHistory=new ArrayList<String[]>();  heismanHistory=new ArrayList<String>();  currentWeek=0;  conferences=new ArrayList<Conference>();  conferences.add(new Conference("SOUTH",this));  conferences.add(new Conference("LAKES",this));  conferences.add(new Conference("NORTH",this));  conferences.add(new Conference("COWBY",this));  conferences.add(new Conference("PACIF",this));  conferences.add(new Conference("MOUNT",this));  allAmericans=new ArrayList<Player>();  newsStories=new ArrayList<ArrayList<String>>();  for (int i=0; i < 16; ++i) {    newsStories.add(new ArrayList<String>());  }  newsStories.get(0).add("New Season!>Ready for the new season, coach? Whether the National Championship is " + "on your mind, or just a winning season, good luck!");  leagueRecords=new LeagueRecords();  userTeamRecords=new LeagueRecords();  longestWinStreak=new TeamStreak(getYear(),getYear(),0,"XXX");  yearStartLongestWinStreak=new TeamStreak(getYear(),getYear(),0,"XXX");  longestActiveWinStreak=new TeamStreak(getYear(),getYear(),0,"XXX");  nameList=new ArrayList<String>();  String[] namesSplit=namesCSV.split(",");  for (  String n : namesSplit) {    nameList.add(n.trim());  }  lastNameList=new ArrayList<String>();  namesSplit=lastNamesCSV.split(",");  for (  String n : namesSplit) {    lastNameList.add(n.trim());  }  conferences.get(0).confTeams.add(new Team("Alabama","ALA","SOUTH",this,95,"GEO"));  conferences.get(0).confTeams.add(new Team("Georgia","GEO","SOUTH",this,90,"ALA"));  conferences.get(0).confTeams.add(new Team("Florida","FLA","SOUTH",this,85,"TEN"));  conferences.get(0).confTeams.add(new Team("Tennessee","TEN","SOUTH",this,80,"FLA"));  conferences.get(0).confTeams.add(new Team("Atlanta","ATL","SOUTH",this,75,"KYW"));  conferences.get(0).confTeams.add(new Team("New Orleans","NOR","SOUTH",this,75,"LOU"));  conferences.get(0).confTeams.add(new Team("Arkansas","ARK","SOUTH",this,70,"KTY"));  conferences.get(0).confTeams.add(new Team("Louisiana","LOU","SOUTH",this,65,"NOR"));  conferences.get(0).confTeams.add(new Team("Key West","KYW","SOUTH",this,65,"ATL"));  conferences.get(0).confTeams.add(new Team("Kentucky","KTY","SOUTH",this,50,"ARK"));  conferences.get(1).confTeams.add(new Team("Ohio State","OHI","LAKES",this,90,"MIC"));  conferences.get(1).confTeams.add(new Team("Michigan","MIC","LAKES",this,90,"OHI"));  conferences.get(1).confTeams.add(new Team("Michigan St","MSU","LAKES",this,80,"MIN"));  conferences.get(1).confTeams.add(new Team("Wisconsin","WIS","LAKES",this,70,"IND"));  conferences.get(1).confTeams.add(new Team("Minnesota","MIN","LAKES",this,70,"MSU"));  conferences.get(1).confTeams.add(new Team("Univ of Chicago","CHI","LAKES",this,70,"DET"));  conferences.get(1).confTeams.add(new Team("Detroit St","DET","LAKES",this,65,"CHI"));  conferences.get(1).confTeams.add(new Team("Indiana","IND","LAKES",this,65,"WIS"));  conferences.get(1).confTeams.add(new Team("Cleveland St","CLE","LAKES",this,55,"MIL"));  conferences.get(1).confTeams.add(new Team("Milwaukee","MIL","LAKES",this,45,"CLE"));  conferences.get(2).confTeams.add(new Team("New York St","NYS","NORTH",this,90,"NYC"));  conferences.get(2).confTeams.add(new Team("New Jersey","NWJ","NORTH",this,85,"PEN"));  conferences.get(2).confTeams.add(new Team("New York City","NYC","NORTH",this,75,"NYS"));  conferences.get(2).confTeams.add(new Team("Pennsylvania","PEN","NORTH",this,75,"NWJ"));  conferences.get(2).confTeams.add(new Team("Maryland","MAR","NORTH",this,70,"WDC"));  conferences.get(2).confTeams.add(new Team("Washington DC","WDC","NORTH",this,70,"MAR"));  conferences.get(2).confTeams.add(new Team("Boston St","BOS","NORTH",this,65,"VER"));  conferences.get(2).confTeams.add(new Team("Pittsburgh","PIT","NORTH",this,60,"MAI"));  conferences.get(2).confTeams.add(new Team("Maine","MAI","NORTH",this,50,"PIT"));  conferences.get(2).confTeams.add(new Team("Vermont","VER","NORTH",this,45,"BOS"));  conferences.get(3).confTeams.add(new Team("Oklahoma","OKL","COWBY",this,90,"TEX"));  conferences.get(3).confTeams.add(new Team("Texas","TEX","COWBY",this,90,"OKL"));  conferences.get(3).confTeams.add(new Team("Houston","HOU","COWBY",this,80,"DAL"));  conferences.get(3).confTeams.add(new Team("Dallas","DAL","COWBY",this,80,"HOU"));  conferences.get(3).confTeams.add(new Team("Nebraska","NEB","COWBY",this,70,"PAS"));  conferences.get(3).confTeams.add(new Team("Oklahoma St","OKS","COWBY",this,70,"TUL"));  conferences.get(3).confTeams.add(new Team("El Paso St","PAS","COWBY",this,60,"NEB"));  conferences.get(3).confTeams.add(new Team("Missouri","MSR","COWBY",this,60,"AUS"));  conferences.get(3).confTeams.add(new Team("Tulsa","TUL","COWBY",this,55,"OKS"));  conferences.get(3).confTeams.add(new Team("Univ of Austin","AUS","COWBY",this,50,"MSR"));  conferences.get(4).confTeams.add(new Team("California","CAL","PACIF",this,90,"ULA"));  conferences.get(4).confTeams.add(new Team("Oregon","ORE","PACIF",this,85,"WAS"));  conferences.get(4).confTeams.add(new Team("Los Angeles","ULA","PACIF",this,80,"CAL"));  conferences.get(4).confTeams.add(new Team("Oakland St","OAK","PACIF",this,75,"HOL"));  conferences.get(4).confTeams.add(new Team("Washington","WAS","PACIF",this,75,"ORE"));  conferences.get(4).confTeams.add(new Team("Hawaii","HAW","PACIF",this,70,"SAM"));  conferences.get(4).confTeams.add(new Team("Seattle","SEA","PACIF",this,70,"SAN"));  conferences.get(4).confTeams.add(new Team("Hollywood St","HOL","PACIF",this,70,"OAK"));  conferences.get(4).confTeams.add(new Team("San Diego St","SAN","PACIF",this,60,"SEA"));  conferences.get(4).confTeams.add(new Team("American Samoa","SAM","PACIF",this,25,"HAW"));  conferences.get(5).confTeams.add(new Team("Colorado","COL","MOUNT",this,80,"DEN"));  conferences.get(5).confTeams.add(new Team("Yellowstone St","YEL","MOUNT",this,75,"ALB"));  conferences.get(5).confTeams.add(new Team("Utah","UTA","MOUNT",this,75,"SAL"));  conferences.get(5).confTeams.add(new Team("Univ of Denver","DEN","MOUNT",this,75,"COL"));  conferences.get(5).confTeams.add(new Team("Albuquerque","ALB","MOUNT",this,70,"YEL"));  conferences.get(5).confTeams.add(new Team("Salt Lake St","SAL","MOUNT",this,65,"UTA"));  conferences.get(5).confTeams.add(new Team("Wyoming","WYO","MOUNT",this,60,"MON"));  conferences.get(5).confTeams.add(new Team("Montana","MON","MOUNT",this,55,"WYO"));  conferences.get(5).confTeams.add(new Team("Las Vegas","LSV","MOUNT",this,50,"PHO"));  conferences.get(5).confTeams.add(new Team("Phoenix","PHO","MOUNT",this,45,"LSV"));  teamList=new ArrayList<Team>();  for (int i=0; i < conferences.size(); ++i) {    for (int j=0; j < conferences.get(i).confTeams.size(); ++j) {      teamList.add(conferences.get(i).confTeams.get(j));    }  }  for (int i=0; i < conferences.size(); ++i) {    conferences.get(i).setUpSchedule();  }  for (int i=0; i < conferences.size(); ++i) {    conferences.get(i).setUpOOCSchedule();  }  for (int i=0; i < conferences.size(); ++i) {    conferences.get(i).insertOOCSchedule();  }}  }
class C{  public SecurityVerifyHeader createSecurityVerifyHeader(){  SecurityVerify secVerify=new SecurityVerify();  return secVerify;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  @Override public boolean isForceCreate(){  return forceCreate;}  }
class C{  public static int nullHashCode(Object o){  return o == null ? 0 : o.hashCode();}  }
class C{  protected void deploy(HttpServletResponse response,String contextPath,String warURL) throws IOException {  String context=contextPath;  boolean error=false;  if (context == null) {    File file=new File(warURL);    String fileName=file.getName();    if (fileName.endsWith(".war")) {      fileName=fileName.substring(0,fileName.lastIndexOf(".war"));    }    context="/" + fileName;  }  if (getContextHandler(context) != null) {    sendError(response,"An application is already deployed at this context : " + context);    error=true;  } else   if (!context.startsWith("/")) {    sendError(response,"The path does not start with a forward slash");    error=true;  }  if (error) {    return;  } else {    File webappDest=new File(webAppDirectory,context + ".war");    URI uri=null;    try {      uri=new URI(warURL);    } catch (    URISyntaxException e) {      sendError(response,"Cannot parse URL " + warURL);      Log.warn(e);      return;    }    File webappSource=new File(uri);    FileInputStream fileInputStream=new FileInputStream(webappSource);    FileOutputStream fileOutputStream=new FileOutputStream(webappDest);    int i=fileInputStream.read();    while (i != -1) {      fileOutputStream.write(i);      i=fileInputStream.read();    }    fileInputStream.close();    fileOutputStream.flush();    fileOutputStream.close();    WebAppContext webappcontext=new WebAppContext();    webappcontext.setContextPath(context);    webappcontext.setWar(webappDest.getPath());    chc.addHandler(webappcontext);    try {      webappcontext.start();    } catch (    Exception e) {      sendError(response,"Unexpected error when trying to start the webapp");      Log.warn(e);      return;    }  }  sendMessage(response,"Webapp deployed at context " + contextPath);}  }
class C{  public void loadAIMLFile(File file,boolean createStates,boolean indexStatic,String encoding){  try {    loadAIMLFile(new FileInputStream(file),file.getName(),createStates,false,indexStatic,encoding,MAX_FILE_SIZE);  } catch (  IOException exception) {    throw new SelfParseException("Parsing error occurred",exception);  }}  }
class C{  public static boolean isValid(double side1,double side2,double side3){  boolean valid=side1 + side2 > side3 || side1 + side3 > side2 || side2 + side3 > side1;  return valid;}  }
class C{  protected static SQLException convertException(Exception e){  SQLException e2=new SQLException("Error while indexing document","FULLTEXT");  e2.initCause(e);  return e2;}  }
class C{  @Override public Resource createRelative(String relativePath) throws IOException {  throw new FileNotFoundException("Cannot create a relative resource for " + getDescription());}  }
class C{  public TechnicalInformation(Type type){  this(type,"");}  }
class C{  public boolean removeFromTree(){  return parent != null ? parent.removeChild(this) : false;}  }
class C{  public void reload(){  reload(headers.isEmpty());}  }
class C{  public CharSeq forEachChar(BiConsumer<Character,Integer> action){  Objects.requireNonNull(action);  eachChar().forEach(action);  return this;}  }
class C{  @Override public void printImage(BufferedImage image){  m_ticketcurrent.printImage(image);}  }
class C{  public Tag addClassTag(Class<? extends Object> clazz,Tag tag){  if (tag == null) {    throw new NullPointerException("Tag must be provided.");  }  return classTags.put(clazz,tag);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void error(String msg){  System.out.println("DOM ERROR! class: " + this.getClass().getName());  throw new RuntimeException(XMLMessages.createXMLMessage(msg,null));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:27.842 -0500",hash_original_method="7C078FD6C37638384F8322CDEBAF3CFB",hash_generated_method="08075CE8CD7971BB2DB7E904E4F83711") static private boolean isShortCode(String dialString,GSMPhone phone){  if (dialString == null) {    return false;  }  if (dialString.length() == 0) {    return false;  }  if (PhoneNumberUtils.isLocalEmergencyNumber(dialString,phone.getContext())) {    return false;  } else {    return isShortCodeUSSD(dialString,phone);  }}  }
class C{  public String nextLine(int length){  if (length < 0)   throw new IllegalArgumentException("length cannot be negative");  if (!hasMoreWords())   throw new IllegalStateException("no more words.");  StringBuilder b=new StringBuilder("");  for (; ; ) {    assert b.length() <= length;    String nextWord=words.peek();    if (nextWord == null) {      return b.toString();    }    int lengthWithNextWord=b.length() + (b.length() > 0 ? 1 : 0) + nextWord.length();    if (lengthWithNextWord > length) {      return b.toString();    }    if (b.length() > 0)     b.append(" ");    b.append(nextWord);    words.remove();  }}  }
class C{  public List<?> extractData(File stegoFile) throws OpenStegoException {  if (!this.plugin.getPurposes().contains(OpenStegoPlugin.Purpose.DATA_HIDING)) {    throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.PLUGIN_DOES_NOT_SUPPORT_DH);  }  return extractData(CommonUtil.getFileBytes(stegoFile),stegoFile.getName());}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  public FilteredCausedDelayHandler(final Scenario scenario,final int noOfTimeBins,final double simulationEndTime,final String userGroup,final PersonFilter personFilter){  this(scenario,noOfTimeBins,userGroup,personFilter,null);  LOGGER.info("Usergroup filtering is used, result will include all links but persons from given user group only.");}  }
class C{  private void dialogClosedCancel(){  dispose();}  }
class C{  public WrapLayout(int align,int hgap,int vgap){  super(align,hgap,vgap);}  }
class C{  protected void bcsPreSerializationHook(ObjectOutputStream oos) throws IOException {}  }
class C{  public static void deleteTargetDeviceGroup(final StorageSystem storage,final CIMObjectPath targetGroupPath,final DbClient dbClient,final SmisCommandHelper helper,final CIMObjectPathFactory cimPath){  _log.info(format("Removing target device group {0} from storage system {1}",targetGroupPath.toString(),storage.getId()));  try {    CIMObjectPath replicationSvc=cimPath.getControllerReplicationSvcPath(storage);    CIMArgument[] outArgs=new CIMArgument[5];    CIMArgument[] inArgs=helper.getDeleteReplicationGroupInputArguments(storage,targetGroupPath,true);    helper.invokeMethod(storage,replicationSvc,DELETE_GROUP,inArgs,outArgs);  } catch (  Exception e) {    _log.error(format("An error occurred when removing target device group {0} from storage system {1}",targetGroupPath,storage.getId()),e);  }}  }
class C{  public final long maxBucketOrd(){  return docCounts.size();}  }
class C{  public void testNullStoredField() throws Exception {  Directory dir=newDirectory();  Analyzer analyzer=new MockAnalyzer(random());  IndexWriter iw=new IndexWriter(dir,new IndexWriterConfig(analyzer));  Document doc=new Document();  iw.addDocument(doc);  expectThrows(IllegalArgumentException.class,null);  assertNull(iw.getTragicException());  iw.close();  DirectoryReader r=DirectoryReader.open(dir);  assertEquals(1,r.numDocs());  r.close();  dir.close();}  }
class C{  public ElemTemplateElement appendChildElem(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_ATTRIBUTE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  public IPRange(IP startIp,IP endIp){  int result=endIp.compareTo(startIp);  if (result > 0 || result == 0)   Preconditions.checkArgument(result > 0 || result == 0,"maxIP must equal or bigger than minIP");  this.startIP=startIp;  this.endIP=endIp;}  }
class C{  protected List<Position> computeArcPositions(DrawContext dc,ArcData arcData){  Globe globe=dc.getGlobe();  Angle da=arcData.arcAngle.divide(this.intervals);  double globeRadius=globe.getRadiusAt(arcData.center.getLatitude(),arcData.center.getLongitude());  double radiusRadians=arcData.radius / globeRadius;  int intervals=this.getIntervals();  List<Position> positions=new ArrayList<Position>(intervals);  for (int i=0; i < intervals; i++) {    double angle=i * da.radians + arcData.startAngle.radians;    LatLon ll=LatLon.greatCircleEndPosition(arcData.center,angle,radiusRadians);    positions.add(new Position(ll,0));  }  positions.add(this.position3);  return positions;}  }
class C{  public StringAttributeRule(String name,String description,String[] valid,boolean optional){  this(name,description,null,optional,0,Integer.MAX_VALUE);  validValues=new ArrayList<String>();  for (  String aValid : valid) {    validValues.add(aValid);  }  this.example=null;}  }
class C{  public V view(){  return getView();}  }
class C{  public void split(int[] points,Object[] pieces){  int point0, point1;  point0=0;  point1=points[0];  for (int x=0; x < pieces.length; x++) {    pieces[x]=new Gene[point1 - point0];    System.arraycopy(genome,point0,pieces[x],0,point1 - point0);    point0=point1;    if (x >= pieces.length - 2)     point1=genome.length; else     point1=points[x + 1];  }}  }
class C{  public void executeASync(ProcessInfo pi){  log.config("-");}  }
class C{  public QuotaBytesTotal(){  super(KEY);}  }
class C{  public Wine runBackground(File workingDirectory,String executableToRun,List<String> arguments,Map<String,String> environment) throws ScriptFailureException {  runAndGetProcess(workingDirectory,executableToRun,arguments,environment);  return this;}  }
class C{  public SearchableEnvironmentRequestor(ISearchRequestor requestor){  this.requestor=requestor;  this.unitToSkip=null;  this.project=null;  this.nameLookup=null;  this.checkAccessRestrictions=false;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tNumber of runs","U",1,"-U <integer>"));  newVector.addElement(new Option("\tRandom number seed","A",1,"-A <seed>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  protected byte[] toJsonBytesAddressDetails(final String state,final String country) throws Exception {  final AddressRO address=new AddressRO();  address.setAddrline1("In the middle of");  address.setCity("Nowhere");  address.setPostcode("0001");  address.setStateCode(state);  address.setCountryCode(country);  return toJsonBytes(address);}  }
class C{  public static String emptyToNull(String s){  if (s == null)   return null;  return s.length() == 0 ? null : s;}  }
class C{  public void recordState(State currentState){  mStateDepository.add(currentState);}  }
class C{  public boolean isAuthRequested(){  return authRequested;}  }
class C{  public void onFileTransferDeliveryExpirationReceived(Intent intent){  ContactId contact=ContactUtil.createContactIdFromTrustedData(intent.getStringExtra(EXTRA_CONTACT));  String fileTransferId=intent.getStringExtra(EXTRA_ID);  onFileTransferDeliveryExpirationReceived(contact,fileTransferId);}  }
class C{  private void updateAccount(MCharge charge,MAccount account){  StringBuffer sql=createUpdateAccountSql(charge,account);  int noAffectedRows=DB.executeUpdate(sql.toString(),null);  if (noAffectedRows != 1) {    log.log(Level.SEVERE,"Update #" + noAffectedRows + "\n"+ sql.toString());  }  return;}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  @Override public void run(){  Collections.sort(files);  for (int i=files.size() - 1; i >= 0; i--) {    new File(files.get(i)).delete();  }}  }
class C{  public final static HeaderElement[] parseElements(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseElements(buffer,cursor);}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int next;  m_lastFetched=next=(DTM.NULL == m_lastFetched) ? m_cdtm.getFirstChild(m_context) : m_cdtm.getNextSibling(m_lastFetched);  if (DTM.NULL != next) {    m_pos++;    return next;  } else {    m_foundLast=true;    return DTM.NULL;  }}  }
class C{  private static void stopEventStream(Context context){  Log.d(LOG_TAG,"stopEventStream");  sendEventStreamAction(context,EventStreamService.StreamAction.STOP);}  }
class C{  public int positionFromNodeNumber(int nodeNumber){  if (nodeNumber < numInputs)   throw new IllegalArgumentException("Sorry, nodeNumber (" + nodeNumber + ") cannot be less than numInputs ("+ numInputs+ ").");  return (nodeNumber - numInputs) * (maxArity + 1);}  }
class C{  public void doAction(JvmLauncher java){  setupSysProps(java);  java.setMainClass("org.objectweb.jonas.server.Bootstrap");  java.addClasspathEntries(new File(getHome(),"lib/common/ow_jonas_bootstrap.jar"));  java.addClasspathEntries(new File(getHome(),"lib/commons/jonas/jakarta-commons/commons-logging-api.jar"));  java.addClasspathEntries(new File(getConfiguration().getHome(),"conf"));  try {    addToolsJarToClasspath(java);  } catch (  IOException ex) {    throw new ContainerException("IOException occured during java command line setup",ex);  }}  }
class C{  public Process(final InputStream in) throws IOException, XMLException {  initContext();  readProcess(new InputStreamReader(in,XMLImporter.PROCESS_FILE_CHARSET));}  }
class C{  public void addRecord(OMGraphic graphic,ArrayList<Object> record){  OMGraphicList list=getEsriGraphicList();  graphic.putAttribute(SHAPE_DBF_INFO_ATTRIBUTE,record);  if (list != null) {    graphic.putAttribute(SHAPE_INDEX_ATTRIBUTE,new Integer(list.size()));    list.add(graphic);    _model.addRecord(record);  } else {    Debug.error("EsriPlugIn.addRecord(): invalid data files!");  }}  }
class C{  public String toXML(boolean header){  return null;}  }
class C{  private void indexCRL(X509CRL crl){  X500Principal issuer=crl.getIssuerX500Principal();  Object oldEntry=crlIssuers.put(issuer,crl);  if (oldEntry != null) {    if (oldEntry instanceof X509CRL) {      if (crl.equals(oldEntry)) {        return;      }      List<X509CRL> list=new ArrayList<>(2);      list.add(crl);      list.add((X509CRL)oldEntry);      crlIssuers.put(issuer,list);    } else {      @SuppressWarnings("unchecked") List<X509CRL> list=(List<X509CRL>)oldEntry;      if (list.contains(crl) == false) {        list.add(crl);      }      crlIssuers.put(issuer,list);    }  }}  }
class C{  public static void removeFindBugsNature(IProject project,IProgressMonitor monitor) throws CoreException {  if (!hasFindBugsNature(project)) {    return;  }  IProjectDescription description=project.getDescription();  String[] prevNatures=description.getNatureIds();  ArrayList<String> newNaturesList=new ArrayList<String>();  for (int i=0; i < prevNatures.length; i++) {    if (!FindbugsPlugin.NATURE_ID.equals(prevNatures[i])) {      newNaturesList.add(prevNatures[i]);    }  }  String[] newNatures=newNaturesList.toArray(new String[newNaturesList.size()]);  description.setNatureIds(newNatures);  project.setDescription(description,monitor);}  }
class C{  public synchronized void disableType(String prefix){  enabledTypes.remove(prefix);}  }
class C{  private void startCountdown(){  mTimeoutTV.removeCallbacks(mTimeoutCounter);  mTimeoutCount=60;  mTimeoutTV.post(mTimeoutCounter);}  }
class C{  public void runEventHandler(String script,Event evt,String lang,String desc){  Interpreter interpreter=getInterpreter(lang);  if (interpreter == null)   return;  try {    checkCompatibleScriptURL(lang,docPURL);    Object event;    if (evt instanceof ScriptEventWrapper) {      event=((ScriptEventWrapper)evt).getEventObject();    } else {      event=evt;    }    interpreter.bindObject(EVENT_NAME,event);    interpreter.bindObject(ALTERNATE_EVENT_NAME,event);    interpreter.evaluate(new StringReader(script),desc);  } catch (  IOException ioe) {  }catch (  InterpreterException ie) {    handleInterpreterException(ie);  }catch (  SecurityException se) {    handleSecurityException(se);  }}  }
class C{  public static void copy(URL from,OutputStream to) throws IOException {  asByteSource(from).copyTo(to);}  }
class C{  public void parse(InputStream in) throws SAXException, IOException {  parse(new InputSource(in));}  }
class C{  public SerialTurnout(String systemName,String userName){  super(systemName,userName);  tSystemName=systemName;  int num=SerialAddress.getBitFromSystemName(systemName);  output=(num % 100) - 1;  bank=(num / 100) - 1;}  }
class C{  public TextClock(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.TextClock,defStyle,0);  try {    mFormat12=a.getText(R.styleable.TextClock_format12Hour);    mFormat24=a.getText(R.styleable.TextClock_format24Hour);    mTimeZone=a.getString(R.styleable.TextClock_timeZone);  }  finally {    a.recycle();  }  init();}  }
class C{  public Pair(FIRST first,SECOND second){  this.first=first;  this.second=second;}  }
class C{  private ActionBarBackground fadeBackground(Drawable oldDrawable,Drawable newDrawable){  if (oldDrawable == null) {    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {      newDrawable.setCallback(drawableCallback);    } else {      mActionBar.setBackgroundDrawable(newDrawable);    }  } else {    TransitionDrawable td=new TransitionDrawable(new Drawable[]{oldDrawable,newDrawable});    td.setCrossFadeEnabled(true);    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {      td.setCallback(drawableCallback);    } else {      int paddingTop=mToolbar.getPaddingTop();      mActionBar.setBackgroundDrawable(td);      mToolbar.setPadding(mToolbar.getPaddingLeft(),paddingTop,mToolbar.getPaddingRight(),mToolbar.getPaddingBottom());    }    td.startTransition(500);  }  mOldBackground=newDrawable;  return this;}  }
class C{  @Override public JavaType mapAbstractType(DeserializationConfig config,JavaType type) throws JsonMappingException {  while (true) {    JavaType next=_mapAbstractType2(config,type);    if (next == null) {      return type;    }    Class<?> prevCls=type.getRawClass();    Class<?> nextCls=next.getRawClass();    if ((prevCls == nextCls) || !prevCls.isAssignableFrom(nextCls)) {      throw new IllegalArgumentException("Invalid abstract type resolution from " + type + " to "+ next+ ": latter is not a subtype of former");    }    type=next;  }}  }
class C{  protected static void appendByteArrayType(StringBuilder sb){  sb.append("BLOB");}  }
class C{  public BytesTermAttributeImpl(){}  }
class C{  public void initialize(Map<String,Object> properties){  return;}  }
class C{  public Iterator<SearchTree<VertexType>> childIterator(){  return m_childList.iterator();}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  if ((unit instanceof Aero) && !(unit instanceof FighterSquadron) && !(unit instanceof Dropship)&& !(unit instanceof Jumpship)) {    result=true;  }  if (currentSpace < 1) {    result=false;  }  if (getRecoverySlots() < 1) {    result=false;  }  return result;}  }
class C{  public static String byteArrayToHexString(byte[] bytes){  if (bytes == null || bytes.length == 0) {    return null;  }  final char[] hexArray={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};  char[] hexChars=new char[bytes.length * 2];  int value;  for (int j=0; j < bytes.length; j++) {    value=bytes[j] & 0xFF;    hexChars[j * 2]=hexArray[value >>> 4];    hexChars[j * 2 + 1]=hexArray[value & 0x0F];  }  return new String(hexChars);}  }
class C{  @SuppressWarnings("unchecked") public NocacheFastmapDistanceMatrix(List userObjects,DistanceCalculator distanceFunction){  init(distanceFunction,userObjects);}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  int k_max=in.readInt();  knnDistances=new double[k_max];  for (int i=0; i < k_max; i++) {    knnDistances[i]=in.readDouble();  }}  }
class C{  protected void error(String msg,Exception e) throws org.xml.sax.SAXException {  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  TransformerException pe;  if (!(e instanceof TransformerException)) {    pe=(null == e) ? new TransformerException(msg,locator) : new TransformerException(msg,locator,e);  } else   pe=(TransformerException)e;  if (null != handler) {    try {      handler.error(pe);    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else   throw new org.xml.sax.SAXException(pe);}  }
class C{  public Object toBean(ResultSet rs,Class type) throws SQLException {  PropertyDescriptor[] props=this.propertyDescriptors(type);  ResultSetMetaData rsmd=rs.getMetaData();  int[] columnToProperty=this.mapColumnsToProperties(rsmd,props);  return this.createBean(rs,type,props,columnToProperty);}  }
class C{  public E last(){  return backingMap.lastKey();}  }
class C{  public void keyTyped(KeyEvent e){}  }
class C{  Cube remove(int cubeY){  int index=binarySearch(cubeY);  return index < cubes.size() && cubes.get(index).getY() == cubeY ? cubes.remove(index) : null;}  }
class C{  public static Motion createFrictionMotion(int sourceValue,int maxValue,float initVelocity,float friction){  Motion frictionMotion=new Motion(sourceValue,initVelocity,friction);  frictionMotion.destinationValue=maxValue;  frictionMotion.motionType=FRICTION;  return frictionMotion;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public TypeScriptCompositeImageDescriptor(ImageDescriptor baseImage,String typeKey,Point size){  fBaseImage=baseImage;  Assert.isNotNull(fBaseImage);  this.typeKey=typeKey;  fSize=size;  Assert.isNotNull(fSize);}  }
class C{  public boolean contains(Object elem){  return indexOf(elem,0) >= 0;}  }
class C{  public CSVParser(char separatorChar){  this.separatorChar=separatorChar;}  }
class C{  public Rational multiply(Rational secondRational){  long n=r[0] * secondRational.getNumerator();  long d=r[1] * secondRational.getDenominator();  return new Rational(n,d);}  }
class C{  public QueryService addCriteria(String ldpath,Number value){  return addCriteria(ldpath,value,Comparison.EQ);}  }
class C{  public String checkRoute(){  if (log.isDebugEnabled())   log.debug("checkRoute for warrant \"" + getDisplayName() + "\".");  String msg=null;  OBlock startBlock=_orders.get(0).getBlock();  for (  BlockOrder bo : _orders) {    OBlock block=bo.getBlock();    if ((block.getState() & OBlock.OCCUPIED) != 0 && !startBlock.equals(block)) {      msg=Bundle.getMessage("BlockRougeOccupied",block.getDisplayName());      _totalAllocated=false;    }  }  return msg;}  }
class C{  public String useBinNumbersTipText(){  return "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";}  }
class C{  public static String handleException(Object source,String msg,Throwable t){  return handleException(source,msg,t,false);}  }
class C{  static void skipTag(IXMLReader reader) throws IOException, XMLParseException {  int level=1;  while (level > 0) {    char ch=reader.read();switch (ch) {case '<':      ++level;    break;case '>':  --level;break;}}}  }
class C{  public void addLayoutCallback(LayoutCallback callback){  if (callback == null)   throw new NullPointerException();  if (callbackList == null)   callbackList=new ArrayList<LayoutCallback>(1);  callbackList.add(callback);  grid=null;}  }
class C{  protected boolean compressOutputSnappy(){  return false;}  }
class C{  public boolean isPresenceDiscoverySupported(){  return getXdmServer() != null && readBoolean(RcsSettingsData.CAPABILITY_PRESENCE_DISCOVERY);}  }
class C{  public void stop(){  isAlive.set(false);  for (  KafkaConsumer<byte[],byte[]> c : consumers.values()) {    c.wakeup();  }  kafkaConsumerExecutor.shutdownNow();  holdingBuffer.clear();  IOUtils.closeQuietly(this);}  }
class C{  protected void parsec() throws ParseException, IOException {  current=reader.read();  skipSpaces();  boolean expectNumber=true;  for (; ; ) {switch (current) {default :      if (expectNumber)       reportUnexpected(current);    return;case '+':case '-':case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  break;}float x1=parseFloat();skipCommaSpaces();float y1=parseFloat();skipCommaSpaces();float x2=parseFloat();skipCommaSpaces();float y2=parseFloat();skipCommaSpaces();float x=parseFloat();skipCommaSpaces();float y=parseFloat();pathHandler.curvetoCubicRel(x1,y1,x2,y2,x,y);expectNumber=skipCommaSpaces2();}}  }
class C{  public static boolean isCommutative(int opcode){  return (flagsArray[opcode & 0xff] & COMMUTATIVE) != 0;}  }
class C{  public ButtonBubble(Window owner,String nextDockableKey,AlignedSide preferredAlignment,String i18nKey,String buttonKeyToAttach,boolean addListener,boolean listenToPerspective,Object... arguments){  this(owner,nextDockableKey,preferredAlignment,i18nKey,buttonKeyToAttach,addListener,listenToPerspective,null,arguments);}  }
class C{  public int write(byte[] data,int offset,int count){  count=writeLimit(count);  writeOp(data,offset,count,array,write_pos,array.length);  write_pos=(write_pos + count) % array.length;  buffered+=count;  return count;}  }
class C{  private static String numberToString(Number number){  if (number == null) {    throw new RuntimeException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public synchronized void moveStep(Step step,int delta){  checkNotNull(step,"The step can not be null");  checkArgument(this.steps.contains(step),"The step must exist in the pipeline to be moved");  writeStepsSafelyConsume(null);  eventBus.post(new StepMovedEvent(step,delta));}  }
class C{  public void addVolumesToCG(URI vplexURI,URI cgURI,List<URI> vplexVolumeURIs,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    log.info("Updated workflow step state to execute for add volumes to consistency group.");    StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,dbClient);    VPlexApiClient client=getVPlexAPIClient(vplexApiFactory,vplexSystem,dbClient);    log.info("Got VPLEX API client.");    Volume firstVPlexVolume=getDataObject(Volume.class,vplexVolumeURIs.get(0),dbClient);    String cgName=getVplexCgName(firstVPlexVolume,cgURI);    List<Volume> vplexVolumes=new ArrayList<Volume>();    List<String> vplexVolumeNames=new ArrayList<String>();    for (    URI vplexVolumeURI : vplexVolumeURIs) {      Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,dbClient);      vplexVolumes.add(vplexVolume);      vplexVolumeNames.add(vplexVolume.getDeviceLabel());      log.info("VPLEX volume:" + vplexVolume.getDeviceLabel());    }    log.info("Got VPLEX volume names.");    long startTime=System.currentTimeMillis();    client.addVolumesToConsistencyGroup(cgName,vplexVolumeNames);    long elapsed=System.currentTimeMillis() - startTime;    log.info(String.format("TIMER: Adding %s virtual volume(s) %s to the consistency group %s took %f seconds",vplexVolumeNames.size(),vplexVolumeNames,cgName,(double)elapsed / (double)1000));    for (    Volume vplexVolume : vplexVolumes) {      vplexVolume.setConsistencyGroup(cgURI);      dbClient.updateObject(vplexVolume);    }    WorkflowStepCompleter.stepSucceded(stepId);    log.info("Updated workflow step state to success for add volumes to consistency group.");  } catch (  VPlexApiException vae) {    log.error("Exception adding volumes to consistency group: " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    log.error("Exception adding volumes to consistency group: " + ex.getMessage(),ex);    ServiceError svcError=VPlexApiException.errors.jobFailed(ex);    WorkflowStepCompleter.stepFailed(stepId,svcError);  }}  }
class C{  public ClientConnection(String urlstring,Map<String,byte[]> map) throws ClientProtocolException, IOException {  this(urlstring,map,true);}  }
class C{  public long toDays(){  return TimeUnit.DAYS.convert(length,timeUnit);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.ARRAY_LIKE__DECLARED_ELEMENT_TYPE:    return basicSetDeclaredElementType(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public int next(){  int result=_currentNode;  if (result == END)   return DTM.NULL;  if (_nodeType == NULL) {    _currentNode=END;    return returnNode(makeNodeHandle(result));  } else   if (_nodeType >= DTM.NTYPES) {    if (_nodeType == _exptype2(result)) {      _currentNode=END;      return returnNode(makeNodeHandle(result));    }  } else {    if (_nodeType == _type2(result)) {      _currentNode=END;      return returnNode(makeNodeHandle(result));    }  }  return DTM.NULL;}  }
class C{  public boolean exists(String key){  return exists(key,false);}  }
class C{  public void addColumnToModify(Column column){  if (!columnsToModify.contains(column)) {    columnsToModify.add(column);  }}  }
class C{  public static PdfDecoderInt openNewMultiplePage(final GUIFactory currentGUI,final Values commonValues){  return null;}  }
class C{  private Operand asReg(Instruction s,Operator movop,Operand op){  if (op.isRegister()) {    return op;  }  RegisterOperand tmp=regpool.makeTemp(op);  EMIT(CPOS(s,MIR_Move.create(movop,tmp,op)));  return tmp.copy();}  }
class C{  public GenericEntry insert(String domain,GenericEntry entry) throws IOException, MalformedURLException, ServiceException {  URL singleUrl=new URL(HTTPS_PROTOCOL + "://" + APPS_APIS_DOMAIN+ URL_PREFIX+ "/"+ domain+ URL_SUFFIX);  return insert(singleUrl,entry);}  }
class C{  private void generateSharedEventOffset(TXState txState){  assert this.farSideEventOffset == -1;  generateNearSideEventOffset(txState);  this.farSideEventOffset=this.nearSideEventOffset;}  }
class C{  protected final void openSession(){  openSessionForRead(null,null);}  }
class C{  public WriteMutation(Cache.Entry entry,String table,PersistenceController ctrl){  super(table,ctrl);  this.entry=entry;}  }
class C{  public void registerTemplate(String className,Class template){  templates.put(className,new InjectionTemplate(template.getName()));}  }
class C{  public static long checkStreamExists(String regionName,String streamName,AWSConfig awsConfig,List<Stage.ConfigIssue> issues,Stage.Context context){  long numShards=0;  try {    numShards=getShardCount(regionName,awsConfig,streamName);  } catch (  AmazonClientException e) {    issues.add(context.createConfigIssue(Groups.KINESIS.name(),KINESIS_CONFIG_BEAN + ".streamName",Errors.KINESIS_01,e.toString()));  }  return numShards;}  }
class C{  public boolean isPlaying(){  if (mLocalPlayer != null) {    return mLocalPlayer.isPlaying();  } else   if (mAllowRemote) {    try {      return mRemotePlayer.isPlaying(mRemoteToken);    } catch (    RemoteException e) {      Log.w(TAG,"Problem checking ringtone: " + e);      return false;    }  } else {    Log.w(TAG,"Neither local nor remote playback available");    return false;  }}  }
class C{  public static double rRMSEmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  public void deleteQuota(String id) throws IsilonException {  delete(_baseUrl.resolve(URI_QUOTAS),id,"quota");}  }
class C{  public MutableValueBuffer(final int nvalues){  this(0,new byte[nvalues][]);}  }
class C{  public long longValue(){  return value;}  }
class C{  public static void validateNotNull(Object object,String description){  if (object == null) {    throw new NullPointerException(description + " must not be null");  }}  }
class C{  private synchronized int _activityCount(){  return m_activities.size();}  }
class C{  public CActionDeleteInstruction(final JFrame parent,final ZyGraph graph,final NaviNode codeNode,final INaviInstruction instruction){  super("Delete Instruction");  m_parent=Preconditions.checkNotNull(parent,"IE00926: Parent argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE00927: Graph argument can not be null");  m_codeNode=Preconditions.checkNotNull(codeNode,"IE00928: Code node argument can't be null");  m_instruction=Preconditions.checkNotNull(instruction,"IE00929: Instruction argument can't be null");}  }
class C{  public static void register(){  CommandCenter.register(PROGRESS_STATUS,new ProgressStatusQueryAction());}  }
class C{  public static boolean restAvailable(GridClientNode node,GridClientProtocol p){  return !node.availableAddresses(p,false).isEmpty();}  }
class C{  public static boolean isGreaterEqual(Date d1,Date d2){  return isEqual(d1,d2) || d1 != null && d1.compareTo(d2) > 0;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (primitiveArray) {    return convertFromWrapperToPrimitiveTypes();  } else {    return this;  }}  }
class C{  private void fireRosterPresenceEvent(Presence presence){  for (  RosterListener listener : rosterListeners) {    listener.presenceChanged(presence);  }}  }
class C{  void checkCompletesNormally(RecursiveTask<Integer> a,int expected){  Integer r=a.join();  assertEquals(expected,(int)r);  checkCompletedNormally(a,r);}  }
class C{  private Boolean isRemoteReceivedHeaderInvalidBasic(){  return fieldRemoteReceivedHeaderInvalid;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypeRefsPackage.COMPOSED_TYPE_REF__CACHED_COMPOSED_MEMBERS:    return getCachedComposedMembers();case TypeRefsPackage.COMPOSED_TYPE_REF__ORIGINAL_COMPOSED_TYPE_REF:  if (resolve)   return getOriginalComposedTypeRef();return basicGetOriginalComposedTypeRef();case TypeRefsPackage.COMPOSED_TYPE_REF__TYPE_REFS:return getTypeRefs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected void checkDistributionType(int type){  m_Filter=getFilter();  ((RandomProjection)m_Filter).setDistribution(new SelectedTag(type,RandomProjection.TAGS_DSTRS_TYPE));  Instances result=useFilter();  checkResult(result);}  }
class C{  protected int index(int slice,int row,int column){  return this.offset + sliceOffsets[sliceZero + slice * sliceStride] + rowOffsets[rowZero + row * rowStride]+ columnOffsets[columnZero + column * columnStride];}  }
class C{  public Cuboid expand(double other){  return new Cuboid(min.subtract(Vector3DUtil.ONE.scalarMultiply(other)),max.add(Vector3DUtil.ONE.scalarMultiply(other)));}  }
class C{  public final boolean isClassB(){  return (ipAddress & 0x00000003) == 1;}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  public boolean isId(Attr node){  if (node.getNamespaceURI() != null)   return false;  return ATTR_ID.equals(node.getNodeName());}  }
class C{  public LinearL1SCD(){  this(DEFAULT_EPOCHS,DEFAULT_REG,DEFAULT_LOSS);}  }
class C{  @Override protected void profileRemoved(Profile profile){  if (profile instanceof GatewaySenderProfile) {    GatewaySenderProfile sp=(GatewaySenderProfile)profile;    if (!sp.isParallel) {      if (advisePrimaryGatewaySender() != null) {        return;      }      if (!this.sender.isPrimary()) {        if (!adviseEldestGatewaySender()) {          if (logger.isDebugEnabled()) {            logger.debug("Sender {} is not the eldest in the system. Giving preference to eldest sender to become primary...",this.sender);          }          return;        }        launchLockObtainingVolunteerThread();      }    }  }}  }
class C{  public void writeRawMessageSetExtension(final int fieldNumber,final ByteString value) throws IOException {  writeTag(WireFormat.MESSAGE_SET_ITEM,WireFormat.WIRETYPE_START_GROUP);  writeUInt32(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber);  writeBytes(WireFormat.MESSAGE_SET_MESSAGE,value);  writeTag(WireFormat.MESSAGE_SET_ITEM,WireFormat.WIRETYPE_END_GROUP);}  }
class C{  public SVGOMAnimatedBoolean(AbstractElement elt,String ns,String ln,boolean val){  super(elt,ns,ln);  defaultValue=val;}  }
class C{  protected void computeLaidoutText(BridgeContext ctx,Element e,GraphicsNode node){  TextNode tn=(TextNode)node;  elemTPI.clear();  AttributedString as=buildAttributedString(ctx,e);  if (as == null) {    tn.setAttributedCharacterIterator(null);    return;  }  addGlyphPositionAttributes(as,e,ctx);  if (ctx.isDynamic()) {    laidoutText=new AttributedString(as.getIterator());  }  tn.setAttributedCharacterIterator(as.getIterator());  TextPaintInfo pi=new TextPaintInfo();  setBaseTextPaintInfo(pi,e,node,ctx);  setDecorationTextPaintInfo(pi,e);  addPaintAttributes(as,e,tn,pi,ctx);  if (usingComplexSVGFont) {    tn.setAttributedCharacterIterator(as.getIterator());  }  if (ctx.isDynamic()) {    checkBBoxChange();  }}  }
class C{  static Class<?> canonicalize(Class<?> t,int how){  Class<?> ct;  if (t == Object.class) {  } else   if (!t.isPrimitive()) {switch (how) {case UNWRAP:      ct=Wrapper.asPrimitiveType(t);    if (ct != t)     return ct;  break;case RAW_RETURN:case ERASE:return Object.class;}} else if (t == void.class) {switch (how) {case RAW_RETURN:return int.class;case WRAP:return Void.class;}} else {switch (how) {case WRAP:return Wrapper.asWrapperType(t);case INTS:if (t == int.class || t == long.class) return null;if (t == double.class) return long.class;return int.class;case LONGS:if (t == long.class) return null;return long.class;case RAW_RETURN:if (t == int.class || t == long.class || t == float.class || t == double.class) return null;return int.class;}}return null;}  }
class C{  private void launchAnim4(){  animatedVector4.start();}  }
class C{  @Override public void dispose(){  if (manager != null) {    manager.dispose();    manager=null;  }  DBPPreferenceStore store=DBeaverCore.getGlobalPreferenceStore();  store.removePropertyChangeListener(preferencesChangeListener);  ResourcesPlugin.getWorkspace().removeResourceChangeListener(this);  super.dispose();}  }
class C{  public RotateHandle(Figure owner){  super(owner);}  }
class C{  public boolean isToJoinAnd(){  if (m_toJoinAnd == null && getAD_WF_Next_ID() != 0) {    MWFNode next=MWFNode.get(getCtx(),getAD_WF_Next_ID());    setToJoinAnd(MWFNode.JOINELEMENT_AND.equals(next.getJoinElement()));  }  if (m_toJoinAnd != null)   return m_toJoinAnd.booleanValue();  return false;}  }
class C{  public Class<? extends IEObjectHoverProvider> bindIEObjectHoverProvider(){  return TypesHoverProvider.class;}  }
class C{  public ParallaxPage firstParallaxFactor(float factor){  this.firstParallaxFactor=factor;  return this;}  }
class C{  public boolean removeFirstOccurrence(Object o){  return remove(o);}  }
class C{  protected Float wrapValue(float k){  return new Float(k);}  }
class C{  public PaymentDataException(){  super();}  }
class C{  @Override public boolean write(OFMessage m){  return this.write(Collections.singletonList(m)).isEmpty();}  }
class C{  private void emitSolutions(final IBindingSet bs,final Gearing gearing){  IBindingSet bset=bs.clone();  if (gearing.inVar == null) {    final IVariable<?> constantHybridVar=getConstantHybridVariable(gearing.inConst);    if (constantHybridVar != null) {      bset.set(constantHybridVar,gearing.inConst);    }  }  if (gearing.outVar == null) {    final IVariable<?> constantHybridVar=getConstantHybridVariable(gearing.outConst);    if (constantHybridVar != null) {      bset.set(constantHybridVar,gearing.outConst);    }  }  if (gearing.outVar != null) {    final IConstant<?> out=bset.get(gearing.tVarOut);    if (out != null) {      bset.set(gearing.outVar,out);    }  }  if (edgeVar != null) {    final IConstant<?> edge=middleTerm.isConstant() ? (IConstant<?>)middleTerm : bs.get((IVariable<?>)middleTerm);    if (edge != null) {      bset.set(edgeVar,edge);    }  }  if ((bset=distinctVarFilter.accept(bset)) != null) {    out.add(bset);  }}  }
class C{  public static List<Audit> findAll(EntityManager em){  requireArgument(em != null,"Entity manager cannot be null.");  TypedQuery<Audit> query=em.createNamedQuery("Audit.findAll",Audit.class);  try {    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<Audit>(0);  }}  }
class C{  public CreateIndexRequest source(byte[] source){  return source(source,0,source.length);}  }
class C{  protected void parseDefineBitsJPEG3(InStream in) throws IOException {  int id=in.readUI16();  int size=(int)in.readUI32();  byte[] imageData=in.read(size);  byte[] alphaData=in.read();  tagtypes.tagDefineBitsJPEG3(id,imageData,alphaData);}  }
class C{  @SuppressWarnings("unchecked") public <T extends IAbstractNodeData>T encodeLive(final T node){  if (node == null)   throw new IllegalArgumentException();  if (node.isCoded()) {    throw new IllegalStateException();  }  if (_writeBuffer == null) {    allocWriteBuffer();  } else {    _writeBuffer.reset();  }  final T codedNode;  if (node.isLeaf()) {    codedNode=(T)leafCoder.encodeLive((ILeafData)node,_writeBuffer);  } else {    codedNode=(T)nodeCoder.encodeLive((IDirectoryData)node,_writeBuffer);  }  _writeBuffer=new DataOutputBuffer(0,_writeBuffer.trim());  return codedNode;}  }
class C{  public CheckAnnotatePermission addRequestCode(int requestCode){  this.mRequestCode=requestCode;  return this;}  }
class C{  public static void main(final String[] args){  try {    Config config=new Config();    config.addExcludedElement("StartTime");    config.addExcludedElement("EndTime");    config.addExcludedElement("URL");    config.addExcludedElement("DateLong");    config.addExcludedElement("TimeLong");    config.addExcludedElement("TimeShort");    config.addExcludedElement("TimeMedium");    config.addExcludedElement("DateMedium");    config.addExcludedElement("DateShort");    config.addExcludedElement("Hours");    config.addExcludedElement("Seconds");    config.addExcludedElement("Minutes");    config.addExcludedElement("Days");    config.setCustomDifference(false);    config.setApplyEListToSiblings(true);    config.setIgnoringOrder(false);    XMLDog dog=new XMLDog(config);    long t1=System.currentTimeMillis();    Differences diff=dog.compare("c:\\test\\1.xml","c:\\test\\2.xml");    System.out.println(diff.toString());    long t2=System.currentTimeMillis();    System.out.println("Time to compare the docs " + (t2 - t1) + " millisecs");  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static boolean convertDisplay(Element e){  if (!(e instanceof CSSStylableElement)) {    return true;  }  Value v=getComputedStyle(e,SVGCSSEngine.DISPLAY_INDEX);  return v.getStringValue().charAt(0) != 'n';}  }
class C{  public DateAxis(String label,TimeZone zone){  this(label,zone,Locale.getDefault());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private double findDistance(final Neuron n){  double ret=0;  for (  Synapse incoming : n.getFanIn()) {    ret+=Math.pow(incoming.getStrength() - incoming.getSource().getActivation(),2);  }  return ret;}  }
class C{  private void processTag(HTMLElement element,int align){  if ((cancelled) && (!cancelledCaught)) {    return;  }  int curAlign=align;  HTMLFont oldFont=font;  int oldFontColor=textColor;  for (int i=0; i < element.getNumChildren(); i++) {    if ((cancelled) && (!cancelledCaught)) {      break;    }    HTMLElement child=(HTMLElement)element.getChildAt(i);switch (child.getTagId()) {case HTMLElement.TAG_TEXT:      String text=child.getText();    if ((curComboBox != null) && (optionTag)) {      OptionItem oi=new OptionItem(text,optionValue);      curComboBox.addItem(oi);      if (optionSelected) {        curComboBox.setSelectedItem(oi);        if (curForm != null) {          curForm.setDefaultValue(curComboBox,oi);        }      }    } else     if (curTextArea != null) {      curTextArea.setText(text);      if (curForm != null) {        curForm.setDefaultValue(curTextArea,text);      }    } else     if (element.getTagId() == HTMLElement.TAG_LEGEND) {      if (fieldsets.size() > 0) {        Container fset=(Container)fieldsets.lastElement();        fset.getStyle().setBorder(Border.createLineBorder(1,text));        fset.getStyle().setPadding(Component.TOP,fset.getStyle().getFont().getHeight() + 1);      }    } else     if ((curTable != null) && (element.getTagId() == HTMLElement.TAG_CAPTION)) {      curTable.captionTextTag=child;    } else {      Vector comps=null;      if (preTagCount != 0) {        comps=showPreTagText(text,curAlign);      } else {        if (FIXED_WIDTH) {          comps=showTextFixedWidth(text,curAlign);        } else {          comps=showText(text,curAlign);        }      }      if (loadCSS) {        child.setAssociatedComponents(comps);      }    }  break;case HTMLElement.TAG_A:link=child.getAttributeById(HTMLElement.ATTR_HREF);if ((link != null) && (docInfo == null) && (!DocumentInfo.isAbsoluteURL(link))) {if (htmlCallback != null) {  htmlCallback.parsingError(HTMLCallback.ERROR_NO_BASE_URL,child.getTagName(),child.getAttributeName(new Integer(HTMLElement.ATTR_HREF)),link,"Disabling relative link (" + link + "), since page was set by setBody/setHTML/setDOM so there's no way to access relative URLs");}link=null;}if ((link != null) && (htmlCallback != null)) {int linkProps=htmlCallback.getLinkProperties(this,convertURL(link));if ((linkProps & HTMLCallback.LINK_FORBIDDEN) != 0) {link=null;} else if ((linkProps & HTMLCallback.LINK_VISTED) != 0) {linkVisited=true;}}anchor=child.getAttributeById(HTMLElement.ATTR_NAME);if (link != null) {String aKey=child.getAttributeById(HTMLElement.ATTR_ACCESSKEY);if ((aKey != null) && (aKey.length() == 1)) {accesskey=aKey.charAt(0);}}break;case HTMLElement.TAG_H1:case HTMLElement.TAG_H2:case HTMLElement.TAG_H3:case HTMLElement.TAG_H4:case HTMLElement.TAG_H5:case HTMLElement.TAG_H6:font=(HTMLFont)fonts.get(child.getTagName());if (font == null) {font=oldFont;}case HTMLElement.TAG_P:curAlign=getHorizAlign(child.getAttributeById(HTMLElement.ATTR_ALIGN),align,true);adjustAlignment(align,curAlign);newLineIfNotEmpty(curAlign);newLineIfLastWasNotEmpty(curAlign);pushContainer(child);break;case HTMLElement.TAG_DIV:case HTMLElement.TAG_CENTER:curAlign=child.getTagId() == HTMLElement.TAG_DIV ? getHorizAlign(child.getAttributeById(HTMLElement.ATTR_ALIGN),align,true) : Component.CENTER;adjustAlignment(align,curAlign);newLineIfNotEmpty(curAlign);pushContainer(child);break;case HTMLElement.TAG_FIELDSET:newLineIfNotEmpty(curAlign);Container newCont=new Container();newCont.setUIID("HTMLFieldset");if (fieldsets.size() == 0) {newCont.getStyle().setMargin(Component.LEFT,0);}newCont.setLayout(new BoxLayout(BoxLayout.Y_AXIS));curContainer.addComponent(newCont);fieldsets.addElement(newCont);curContainer=newCont;if (loadCSS) {child.setAssociatedComponents(newCont);}break;case HTMLElement.TAG_BR:if (loadCSS) {child.setAssociatedComponents(curLine);}newLine(curAlign);break;case HTMLElement.TAG_DL:newLineIfNotEmpty(curAlign);newLine(curAlign);pushContainer(child);break;case HTMLElement.TAG_DT:newLineIfNotEmpty(curAlign);pushContainer(child);break;case HTMLElement.TAG_UL:case HTMLElement.TAG_DIR:case HTMLElement.TAG_MENU:newLineIfNotEmpty(curAlign);ulLevel++;listIndent+=INDENT_UL;if ((ulLevel == 1) && (olIndex == Integer.MIN_VALUE)) {newLine(curAlign);} else {listIndent+=INDENT_UL;}pushContainer(child);break;case HTMLElement.TAG_OL:newLineIfNotEmpty(curAlign);if (olIndex != Integer.MIN_VALUE) {String indexStr=ORDERED_LIST_TYPE_IDENTIFIERS[listType] + "" + olIndex;olUpperLevelIndex.addElement(indexStr);}olIndex=getInt(child.getAttributeById(HTMLElement.ATTR_START),1);listType=getOrderedListType(child);if ((olUpperLevelIndex.size() == 0) && (ulLevel == 0)) {newLine(curAlign);} else {listIndent+=INDENT_OL;}pushContainer(child);break;case HTMLElement.TAG_LI:Container listItemCont=new Container(new BorderLayout());listItemCont.getStyle().setMargin(Component.LEFT,leftIndent + listIndent);curContainer.addComponent(listItemCont);containers.addElement(curContainer);HTMLListItem bullet=null;if (((HTMLElement)child.getParent()).getTagId() == HTMLElement.TAG_OL) {olIndex=getInt(child.getAttributeById(HTMLElement.ATTR_VALUE),olIndex);int itemListType=getOrderedListType(child,listType);HTMLListIndex listIndex=new HTMLListIndex(olIndex,itemListType);listIndex.getUnselectedStyle().setFgColor(textColor);listIndex.getSelectedStyle().setFgColor(textColor);listIndex.getUnselectedStyle().setFont(font.getFont());bullet=listIndex;bullet.getUnselectedStyle().setAlignment(Component.RIGHT);bullet.setPreferredW(font.getFont().stringWidth("8888. "));} else {bullet=new HTMLBullet(getUnorderedListType(child,ulLevel),font.getFont().getHeight(),textColor,this);}Container bulletCont=new Container(new BorderLayout());bulletCont.addComponent(BorderLayout.NORTH,bullet);listItemCont.addComponent(BorderLayout.WEST,bulletCont);Container listItemText=new Container(new BoxLayout(BoxLayout.Y_AXIS));listItemCont.addComponent(BorderLayout.CENTER,listItemText);curContainer=listItemText;if (loadCSS) {child.setAssociatedComponents(listItemText);}break;case HTMLElement.TAG_BLOCKQUOTE:newLineIfNotEmpty(curAlign);updateMargin(INDENT_BLOCKQUOTE);newLine(curAlign);pushContainer(child);break;case HTMLElement.TAG_DD:newLineIfNotEmpty(curAlign);updateMargin(INDENT_DD);pushContainer(child);break;case HTMLElement.TAG_HR:newLineIfNotEmpty(curAlign);Label hr=new Label();hr.setUIID("HTMLHR");int hrWidth=calcSize(width,child.getAttributeById(HTMLElement.ATTR_WIDTH),width,false);int hrHeight=getInt(child.getAttributeById(HTMLElement.ATTR_SIZE),HR_THICKNESS);hr.setPreferredW(hrWidth);hr.setPreferredH(hrHeight);curLine.addComponent(hr);newLine(curAlign);if (loadCSS) {child.setAssociatedComponents(hr);}break;case HTMLElement.TAG_STYLE:break;case HTMLElement.TAG_IMG:handleImage(child,curAlign,null);break;case HTMLElement.TAG_PRE:preTagCount++;pushContainer(child);case HTMLElement.TAG_EM:case HTMLElement.TAG_STRONG:case HTMLElement.TAG_DFN:case HTMLElement.TAG_CODE:case HTMLElement.TAG_SAMP:case HTMLElement.TAG_KBD:case HTMLElement.TAG_VAR:case HTMLElement.TAG_CITE:case HTMLElement.TAG_TT:font=(HTMLFont)fonts.get(child.getTagName());if (font == null) {font=oldFont;}break;case HTMLElement.TAG_B:case HTMLElement.TAG_I:case HTMLElement.TAG_BIG:case HTMLElement.TAG_SMALL:font=getCounterpartFont(child.getTagId(),font);break;case HTMLElement.TAG_FORM:curForm=new HTMLForm(this,child.getAttributeById(HTMLElement.ATTR_ACTION),child.getAttributeById(HTMLElement.ATTR_METHOD),child.getAttributeById(HTMLElement.ATTR_ENCTYPE));pushContainer(child);break;case HTMLElement.TAG_BUTTON:handleInput(child,curAlign);break;case HTMLElement.TAG_INPUT:handleInput(child,curAlign);break;case HTMLElement.TAG_SELECT:String multi=child.getAttributeById(HTMLElement.ATTR_MULTIPLE);if ((multi != null) || (child.getAttributeById(HTMLElement.ATTR_SIZE) != null)) {curComboBox=new MultiComboBox(multi != null);Container comboCont=new Container(new BorderLayout());curComboBox.setItemGap(0);comboCont.setUIID("ComboBox");curComboBox.setUIID("List");comboCont.addComponent(BorderLayout.CENTER,curComboBox);} else {curComboBox=new HTMLComboBox();}String name=child.getAttributeById(HTMLElement.ATTR_NAME);if (curForm != null) {curForm.addInput(name,curComboBox,null);}child.setAssociatedComponents(curComboBox);if (eventsListener != null) {eventsListener.registerComponent(curComboBox,child);}if ((!PROCESS_HTML_MP1_ONLY) && (child.getAttributeById(HTMLElement.ATTR_DISABLED) != null)) {curComboBox.setEnabled(false);}break;case HTMLElement.TAG_OPTGROUP:if (curComboBox != null) {String label=child.getAttributeById(HTMLElement.ATTR_LABEL);if (label != null) {curComboBox.addItem(label);}}break;case HTMLElement.TAG_OPTION:optionTag=true;optionValue=child.getAttributeById(HTMLElement.ATTR_VALUE);if ((curComboBox != null) && (child.getAttributeById(HTMLElement.ATTR_SELECTED) != null)) {optionSelected=true;}break;case HTMLElement.TAG_TEXTAREA:curTextArea=new TextArea(getInt(child.getAttributeById(HTMLElement.ATTR_ROWS),DEFAULT_TEXTAREA_ROWS),getInt(child.getAttributeById(HTMLElement.ATTR_COLS),DEFAULT_TEXTAREA_COLS));if (!PROCESS_HTML_MP1_ONLY) {if (child.getAttributeById(HTMLElement.ATTR_DISABLED) != null) {curTextArea.setEnabled(false);}if (child.getAttributeById(HTMLElement.ATTR_READONLY) != null) {curTextArea.setEditable(false);}}addCmp(curTextArea,curAlign);if (eventsListener != null) {eventsListener.registerComponent(curTextArea,child);}child.setAssociatedComponents(curTextArea);String aKey=element.getAttributeById(HTMLElement.ATTR_ACCESSKEY);if ((aKey != null) && (aKey.length() == 1)) {addAccessKey(aKey.charAt(0),curTextArea,false);}break;case HTMLElement.TAG_Q:addQuote(child,curAlign,true);quoteTagCount++;break;case HTMLElement.TAG_TABLE:newLineIfNotEmpty(curAlign);if (curTable != null) {tables.addElement(curTable);HTMLTableModel newTable=new HTMLTableModel();curTable=newTable;} else {curTable=new HTMLTableModel();}width=width / 2;break;case HTMLElement.TAG_TR:break;case HTMLElement.TAG_TH:case HTMLElement.TAG_TD:if (curTable != null) {handleTableCell(child,curAlign);}break;case HTMLElement.TAG_LABEL:labelForID=child.getAttributeById(HTMLElement.ATTR_FOR);aKey=child.getAttributeById(HTMLElement.ATTR_ACCESSKEY);if ((aKey != null) && (aKey.length() == 1)) {accesskey=aKey.charAt(0);}break;case HTMLElement.TAG_FONT:textColor=HTMLElement.getColor(child.getAttributeById(HTMLElement.ATTR_COLOR),textColor);String family=child.getAttributeById(HTMLElement.ATTR_FACE);int size=getInt(child.getAttributeById(HTMLElement.ATTR_SIZE));if ((family != null) || (size != 0)) {HTMLFont f=getClosestHTMLFont(family,size,0,0);if (f != null) {font=f;}}break;case HTMLElement.TAG_U:case HTMLElement.TAG_INS:if (underlineCount == 0) {textDecoration|=Style.TEXT_DECORATION_UNDERLINE;}underlineCount++;break;case HTMLElement.TAG_S:case HTMLElement.TAG_STRIKE:case HTMLElement.TAG_DEL:if (strikethruCount == 0) {textDecoration|=Style.TEXT_DECORATION_STRIKETHRU;}strikethruCount++;break;case HTMLElement.TAG_MAP:String mapName=child.getAttributeById(HTMLElement.ATTR_NAME);curImageMap=new ImageMapData(mapName);break;case HTMLElement.TAG_AREA:handleImageMapArea(child);break;case HTMLElement.TAG_SUP:superscript++;break;case HTMLElement.TAG_SUB:superscript--;break;case HTMLElement.TAG_TBODY:if (curTable != null) {curTable.startSegment(HTMLTableModel.SEGMENT_TBODY);}break;case HTMLElement.TAG_THEAD:if (curTable != null) {curTable.startSegment(HTMLTableModel.SEGMENT_THEAD);}break;case HTMLElement.TAG_TFOOT:if (curTable != null) {curTable.startSegment(HTMLTableModel.SEGMENT_TFOOT);}break;}if (child.getNumChildren() > 0) {processTag(child,curAlign);}switch (child.getTagId()) {case HTMLElement.TAG_H1:case HTMLElement.TAG_H2:case HTMLElement.TAG_H3:case HTMLElement.TAG_H4:case HTMLElement.TAG_H5:case HTMLElement.TAG_H6:font=oldFont;case HTMLElement.TAG_P:curAlign=align;newLineIfNotEmpty(curAlign);popContainer();newLine(curAlign);break;case HTMLElement.TAG_DIV:case HTMLElement.TAG_CENTER:curAlign=align;newLineIfNotEmpty(curAlign);popContainer();break;case HTMLElement.TAG_FIELDSET:newLineIfNotEmpty(curAlign);Container fieldsetContainer=(Container)fieldsets.lastElement();curContainer=fieldsetContainer.getParent();fieldsets.removeElement(fieldsetContainer);break;case HTMLElement.TAG_BLOCKQUOTE:newLineIfNotEmpty(curAlign);newLine(curAlign);updateMargin(-INDENT_BLOCKQUOTE);popContainer();break;case HTMLElement.TAG_DT:popContainer();break;case HTMLElement.TAG_DD:newLineIfNotEmpty(curAlign);updateMargin(-INDENT_DD);popContainer();break;case HTMLElement.TAG_DL:newLine(curAlign);popContainer();break;case HTMLElement.TAG_A:link=null;linkVisited=false;mainLink=null;anchor=null;accesskey='\0';break;case HTMLElement.TAG_UL:case HTMLElement.TAG_DIR:case HTMLElement.TAG_MENU:ulLevel--;if ((ulLevel == 0) && (olIndex == Integer.MIN_VALUE)) {newLine(curAlign);} else {listIndent-=INDENT_UL;}listIndent-=INDENT_UL;popContainer();break;case HTMLElement.TAG_OL:if (olUpperLevelIndex.size() != 0) {String indexStr=(String)olUpperLevelIndex.lastElement();olUpperLevelIndex.removeElementAt(olUpperLevelIndex.size() - 1);listType=getOrderedListType(indexStr.charAt(0),HTMLListIndex.LIST_NUMERIC);olIndex=getInt(indexStr.substring(1));listIndent-=INDENT_OL;} else {olIndex=Integer.MIN_VALUE;}if ((olIndex == Integer.MIN_VALUE) && (ulLevel == 0)) {newLine(curAlign);}popContainer();break;case HTMLElement.TAG_LI:if (olIndex != Integer.MIN_VALUE) {olIndex++;}newLineIfNotEmpty(curAlign);Container prevContainer=(Container)containers.lastElement();curContainer=prevContainer;containers.removeElement(curContainer);break;case HTMLElement.TAG_PRE:preTagCount--;popContainer();case HTMLElement.TAG_FONT:textColor=oldFontColor;case HTMLElement.TAG_EM:case HTMLElement.TAG_STRONG:case HTMLElement.TAG_DFN:case HTMLElement.TAG_CODE:case HTMLElement.TAG_SAMP:case HTMLElement.TAG_KBD:case HTMLElement.TAG_VAR:case HTMLElement.TAG_CITE:case HTMLElement.TAG_B:case HTMLElement.TAG_I:case HTMLElement.TAG_BIG:case HTMLElement.TAG_SMALL:case HTMLElement.TAG_TT:font=oldFont;break;case HTMLElement.TAG_FORM:if ((curForm != null) && (!curForm.hasSubmitButton) && (curForm.getNumFields() > 0)) {Button submitButton=new Button(curForm.createSubmitCommand(null,null));addCmp(submitButton,curAlign);}curForm=null;popContainer();break;case HTMLElement.TAG_TEXTAREA:String name=child.getAttributeById(HTMLElement.ATTR_NAME);if (curForm != null) {curForm.addInput(name,curTextArea,null);}curTextArea=null;break;case HTMLElement.TAG_SELECT:if (curComboBox instanceof MultiComboBox) {Container comboCont=curComboBox.getParent();int minSize=Math.min(MIN_MULTI_COMBOBOX_ITEMS,curComboBox.size());int maxSize=Math.min(curComboBox.size(),MAX_MULTI_COMBOBOX_ITEMS);int size=Math.min(maxSize,Math.max(getInt(child.getAttributeById(HTMLElement.ATTR_SIZE)),minSize));Component renderCmp=curComboBox.getRenderer().getListCellRendererComponent(curComboBox,"X",0,false);comboCont.setPreferredH((renderCmp.getPreferredH() + renderCmp.getStyle().getMargin(Component.TOP) + renderCmp.getStyle().getMargin(Component.BOTTOM)+ curComboBox.getItemGap()) * size + curComboBox.getStyle().getPadding(Component.TOP) + curComboBox.getStyle().getPadding(Component.BOTTOM));addCmp(comboCont,curAlign);} else {addCmp(curComboBox,curAlign);}curComboBox=null;break;case HTMLElement.TAG_OPTION:optionTag=false;optionSelected=false;optionValue=null;break;case HTMLElement.TAG_Q:quoteTagCount--;addQuote(child,curAlign,false);break;case HTMLElement.TAG_TABLE:newLineIfNotEmpty(curAlign);curTable.commitRowIfNotEmpty();if (curTable.getRowCount() != 0) {HTMLTable table=new HTMLTable(curTable);table.getStyle().setBgTransparency(0);if (loadCSS) {child.setAssociatedComponents(table);}int borderSize=getInt(child.getAttributeById(HTMLElement.ATTR_BORDER));int[] borderPad=new int[4];if (borderSize > 0) {int frame=PROCESS_HTML_MP1_ONLY ? -1 : HTMLUtils.getStringVal(child.getAttributeById(HTMLElement.ATTR_FRAME),HTMLElement.ALLOWED_TABLE_FRAME_STRINGS);Border border=Border.createLineBorder(borderSize);if (frame == -1) {for (int s=0; s < borderPad.length; s++) {borderPad[s]=borderSize;}} else {Border[] borders=new Border[4];for (int j=0; j < HTMLElement.ALLOWED_TABLE_FRAME_VALS[frame].length; j++) {int side=HTMLElement.ALLOWED_TABLE_FRAME_VALS[frame][j];borders[side]=border;borderPad[side]=borderSize;}border=Border.createCompoundBorder(borders[Component.TOP],borders[Component.BOTTOM],borders[Component.LEFT],borders[Component.RIGHT]);}table.getUnselectedStyle().setBorder(border);table.getSelectedStyle().setBorder(border);table.getUnselectedStyle().setPadding(borderPad[Component.TOP],borderPad[Component.BOTTOM],borderPad[Component.LEFT],borderPad[Component.RIGHT]);table.getSelectedStyle().setPadding(borderPad[Component.TOP],borderPad[Component.BOTTOM],borderPad[Component.LEFT],borderPad[Component.RIGHT]);} else {table.getUnselectedStyle().setBorder(null);table.getSelectedStyle().setBorder(null);table.setDrawBorder(false);}if (!PROCESS_HTML_MP1_ONLY) {int rules=HTMLUtils.getStringVal(child.getAttributeById(HTMLElement.ATTR_RULES),HTMLElement.ALLOWED_TABLE_RULES_STRINGS,Table.INNER_BORDERS_ALL);table.setInnerBorderMode(rules);int spacing=getInt(child.getAttributeById(HTMLElement.ATTR_CELLSPACING),-1);if (spacing != -1) {table.setBorderSpacing(spacing,spacing);}int padding=getInt(child.getAttributeById(HTMLElement.ATTR_CELLPADDING),-1);if (padding != -1) {for (int r=0; r < curTable.getRowCount(); r++) {for (int c=0; c < curTable.getColumnCount(); c++) {Component cmp=(Component)curTable.getValueAt(r,c);if (cmp != null) {cmp.getUnselectedStyle().setPadding(padding,padding,padding,padding);cmp.getSelectedStyle().setPadding(padding,padding,padding,padding);}}}}}if (curTable.captionTextTag != null) {Container captionedTable=new Container(new BoxLayout(BoxLayout.Y_AXIS));TextArea caption=new TextArea(curTable.captionTextTag.getText());curTable.captionTextTag.setAssociatedComponents(caption);caption.setUIID("HTMLTableCaption");caption.setEditable(false);caption.setFocusable(false);caption.getStyle().setBorder(null);caption.getStyle().setAlignment(Component.CENTER);captionedTable.addComponent(caption);captionedTable.addComponent(table);addCmp(captionedTable,curAlign);} else {addCmp(table,curAlign);}newLineIfNotEmpty(curAlign);}if (tables.size() == 0) {curTable=null;} else {curTable=(HTMLTableModel)tables.lastElement();tables.removeElement(curTable);}width=width * 2;if (width > displayWidth) {width=displayWidth;}break;case HTMLElement.TAG_TR:if (curTable != null) {curTable.commitRow();}break;case HTMLElement.TAG_TH:case HTMLElement.TAG_TD:if (curTable != null) {newLineIfNotEmpty(curAlign);curContainer=(Container)tableCells.lastElement();tableCells.removeElement(curContainer);}break;case HTMLElement.TAG_LABEL:labelForID=null;accesskey='\0';break;case HTMLElement.TAG_U:case HTMLElement.TAG_INS:underlineCount--;if (underlineCount == 0) {textDecoration-=Style.TEXT_DECORATION_UNDERLINE;}break;case HTMLElement.TAG_S:case HTMLElement.TAG_STRIKE:case HTMLElement.TAG_DEL:strikethruCount--;if (strikethruCount == 0) {textDecoration-=Style.TEXT_DECORATION_STRIKETHRU;}break;case HTMLElement.TAG_MAP:if (curImageMap != null) {if (imageMapData == null) {imageMapData=new Hashtable();}imageMapData.put(curImageMap.name,curImageMap);if ((imageMapComponents != null) && (imageMapComponents.containsKey(curImageMap.name))) {HTMLImageMap imageMap=(HTMLImageMap)imageMapComponents.get(curImageMap.name);imageMap.mapData=curImageMap;}curImageMap=null;}break;case HTMLElement.TAG_SUP:superscript--;break;case HTMLElement.TAG_SUB:superscript++;break;case HTMLElement.TAG_TBODY:case HTMLElement.TAG_THEAD:case HTMLElement.TAG_TFOOT:if (curTable != null) {curTable.endSegment();}break;}}}  }
class C{  @Deprecated public AnnotationMapper(final Mapper wrapped,final ConverterRegistry converterRegistry,final ConverterLookup converterLookup,final ClassLoader classLoader,final ReflectionProvider reflectionProvider,final JVM jvm){  this(wrapped,converterRegistry,converterLookup,new ClassLoaderReference(classLoader),reflectionProvider);}  }
class C{  private void processSkipEntries(){  for (Iterator<SkipEntry> i=skipRecords.iterator(); i.hasNext(); ) {    SkipEntry skipRecord=i.next();    int labelOffset=actionOffsets[skipRecord.skipTarget - startCount];    skipRecord.action.skipTarget=getLabel(labelOffset);  }}  }
class C{  protected void fireTreeStructureChanged(TreePath parentPath){  Object[] pairs=listeners.getListenerList();  TreeModelEvent e=null;  for (int i=pairs.length - 2; i >= 0; i-=2) {    if (pairs[i] == TreeModelListener.class) {      if (e == null) {        e=new TreeModelEvent(this,parentPath,null,null);      }      ((TreeModelListener)pairs[i + 1]).treeStructureChanged(e);    }  }}  }
class C{  public PrincipalId authenticate(String tenantName,String principal,String password) throws Exception {  return getService().authenticate(tenantName,principal,password,this.getServiceContext());}  }
class C{  public static boolean doesFileExistInJar(Class<?> classFromJar,String fileSource){  try {    URL source=classFromJar.getResource(fileSource);    return source != null;  } catch (  NullPointerException e) {    return false;  }}  }
class C{  public static Edge directedEdge(Node nodeA,Node nodeB){  return new Edge(nodeA,nodeB,Endpoint.TAIL,Endpoint.ARROW);}  }
class C{  public GCTrace findGCTrace(String gcTraceName){  ArgumentChecking.notNull(gcTraceName,"gcTraceName");  for (  GCTrace trace : this) {    if (trace.getName().equals(gcTraceName)) {      return trace;    }  }  return null;}  }
class C{  public Entity defEntity(String name,int type,int ch){  char data[]={(char)ch};  return defineEntity(name,type,data);}  }
class C{  public static ArtMethod of(Method method){  return of((Object)method);}  }
class C{  public int readSignedExpGolombCodedInt(){  int codeNum=readExpGolombCodeNum();  return ((codeNum % 2) == 0 ? -1 : 1) * ((codeNum + 1) / 2);}  }
class C{  private static void error(String s1) throws ImageFormatException {  throw new ImageFormatException(s1);}  }
class C{  public void createSubUsageScenario10_changeServiceIdAndRemoveUnitInBP() throws Exception {  VendorData supplierData=setupNewSupplier("2012-11-01 08:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customerData=registerCustomer(supplierData);  VOServiceDetails serviceDetails=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,"SCENARIO10_RUCSINBP_PU_WEEK_SERVICE");  UserGroup unit1=createUnitAndAssignVisibleService(customerData,"Unit1","Unit1 reference",serviceDetails,supplierData.getMarketplace(0));  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(0.3));  VOSubscriptionDetails subDetails=subscribeWithAssignToUnit(customerData.getAdminUser(),"SCENARIO10_PERUNIT_WEEK_RUCSINBP",unit1.getKey(),serviceDetails,DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(0.3),"ADMIN");  VOServiceDetails upgradeService=createAndRegisterCompatibleService(supplierData,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES,serviceDetails,"SCENARIO10_RUCSINBP_PU_WEEK_UPGSERVICE");  VOSubscriptionDetails upgradedSubDetails=upgrade(customerData.getAdminUser(),subDetails,upgradeService,DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.3));  serviceDetails=updateServiceId(supplierData,serviceDetails,"SCENARIO10_RUCSINBP_PU_WEEK_NEW_SERVICE","2012-12-20 00:00:00");  upgradedSubDetails=changeSubscriptionUnit(customerData.getAdminKey(),upgradedSubDetails,0,"2012-12-20 00:00:00");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("SCENARIO10_PERUNIT_WEEK_RUCSINBP",new TestData(supplierData));}  }
class C{  public void paintLockRelease(){  paintLockImage=null;}  }
class C{  public void invokeInterface(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEINTERFACE,owner,method);}  }
class C{  private void dynInit(){  try {    editorPane.setPage("http://www.adempiere.com/wiki/index.php/ServerSetupHelp");  } catch (  IOException ex) {    editorPane.setText(res.getString("PleaseCheck") + "	http://www.adempiere.org/support <p>(" + res.getString("UnableToConnect")+ ")");  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public PowerDatacenterBroker(String name) throws Exception {  super(name);}  }
class C{  public Coordinate inCentre(){  return inCentre(p0,p1,p2);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  private double[] prepareBatch(int currentBatchNum,Iterator<Example> reader,Attribute batchAttribute) throws UndefinedParameterError {  final int batchSize=this.getParameterAsInt(PARAMETER_BATCH_SIZE);  int batchCount=0;  int[] classCount=new int[2];  while (batchCount++ < batchSize && reader.hasNext()) {    Example example=reader.next();    example.setValue(batchAttribute,currentBatchNum);    example.setWeight(1);    classCount[(int)example.getLabel()]++;  }  double[] classPriors=new double[2];  classPriors[0]=(double)classCount[0] / --batchCount;  classPriors[1]=(double)classCount[1] / batchCount;  return classPriors;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x99D86281,version=271) public int sceUsbCamReadVideoFrame(TPointer jpegBuffer,int jpegBufferSize){  this.jpegBuffer=jpegBuffer;  this.jpegBufferSize=jpegBufferSize;  return writeCurrentVideoImage(jpegBuffer,jpegBufferSize);}  }
class C{  public T join(){  try {    long spin=1;    while (!done) {      LockSupport.parkNanos(spin++);    }    if (completedExceptionally)     throw new SimpleReactCompletionException(exception());    return result();  }  finally {    markComplete();  }}  }
class C{  public static byte[] toByteArray(File file) throws IOException {  return asByteSource(file).read();}  }
class C{  public void addEntry(double start,int from,int to,double duration){  addEntry(start,from,-1,to,duration);}  }
class C{  public static void matmultTSMM(MatrixObject left,MatrixObject output,boolean isLeftTransposed) throws DMLRuntimeException {  if (isInSparseFormat(left)) {    throw new DMLRuntimeException("Sparse GPU TSMM is not implemented");  }  int transa=isLeftTransposed ? cublasOperation.CUBLAS_OP_N : cublasOperation.CUBLAS_OP_T;  int m=(int)(isLeftTransposed ? left.getNumColumns() : left.getNumRows());  int k=(int)(isLeftTransposed ? left.getNumRows() : left.getNumColumns());  if (m == -1)   throw new DMLRuntimeException("Incorrect dimensions");  double[] alpha={1.0d};  double[] beta={0.0d};  int lda=(int)(isLeftTransposed ? m : k);  int ldc=m;  if (!left.getGPUObject().isAllocated)   throw new DMLRuntimeException("Input is not allocated:" + left.getGPUObject().isAllocated);  if (!output.getGPUObject().isAllocated)   throw new DMLRuntimeException("Output is not allocated:" + output.getGPUObject().isAllocated);  Pointer A=((JCudaObject)left.getGPUObject()).jcudaDenseMatrixPtr;  Pointer C=((JCudaObject)output.getGPUObject()).jcudaDenseMatrixPtr;  JCublas2.cublasDsyrk(cublasHandle,cublasFillMode.CUBLAS_FILL_MODE_UPPER,transa,m,k,Pointer.to(alpha),A,lda,Pointer.to(beta),C,ldc);  JCublas2.cublasDsyrk(cublasHandle,cublasFillMode.CUBLAS_FILL_MODE_LOWER,transa,m,k,Pointer.to(alpha),A,lda,Pointer.to(beta),C,ldc);}  }
class C{  public static <E>Iterator<E> toIterator(Enumeration<E> enumeration){  return new EnumerationIterator<E>(enumeration);}  }
class C{  public void mutableDivide(double c,double d){  final double[] r=new double[2];  cDiv(real,imag,c,d,r);  this.real=r[0];  this.imag=r[1];}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public int countNode(XPathContext support,ElemNumber numberElem,int node) throws TransformerException {  int count=0;  Vector counters=getCounters(numberElem);  int nCounters=counters.size();  int target=numberElem.getTargetNode(support,node);  if (DTM.NULL != target) {    for (int i=0; i < nCounters; i++) {      Counter counter=(Counter)counters.elementAt(i);      count=counter.getPreviouslyCounted(support,target);      if (count > 0)       return count;    }    count=0;    if (m_newFound == null)     m_newFound=new NodeSetDTM(support.getDTMManager());    for (; DTM.NULL != target; target=numberElem.getPreviousNode(support,target)) {      if (0 != count) {        for (int i=0; i < nCounters; i++) {          Counter counter=(Counter)counters.elementAt(i);          int cacheLen=counter.m_countNodes.size();          if ((cacheLen > 0) && (counter.m_countNodes.elementAt(cacheLen - 1) == target)) {            count+=(cacheLen + counter.m_countNodesStartCount);            if (cacheLen > 0)             appendBtoFList(counter.m_countNodes,m_newFound);            m_newFound.removeAllElements();            return count;          }        }      }      m_newFound.addElement(target);      count++;    }    Counter counter=new Counter(numberElem,new NodeSetDTM(support.getDTMManager()));    m_countersMade++;    appendBtoFList(counter.m_countNodes,m_newFound);    m_newFound.removeAllElements();    counters.addElement(counter);  }  return count;}  }
class C{  public AddUserFields(){  m_attributeSpecs=new ArrayList<AttributeSpec>();}  }
class C{  protected void zMult(final DoubleMatrix1D y,final DoubleMatrix1D z,cern.colt.list.IntArrayList nonZeroIndexes,DoubleMatrix1D[] allRows,final double alpha,final double beta){  if (columns != y.size() || rows > z.size())   throw new IllegalArgumentException("Incompatible args: " + toStringShort() + ", "+ y.toStringShort()+ ", "+ z.toStringShort());  z.assign(cern.jet.math.Functions.mult(beta / alpha));  for (int i=indexes.length; --i >= 0; ) {    if (indexes[i] != null) {      for (int k=indexes[i].size(); --k >= 0; ) {        int j=indexes[i].getQuick(k);        double value=values[i].getQuick(k);        z.setQuick(i,z.getQuick(i) + value * y.getQuick(j));      }    }  }  z.assign(cern.jet.math.Functions.mult(alpha));}  }
class C{  public DirectedSurfacePolyline(Iterable<? extends LatLon> iterable){  super(iterable);}  }
class C{  @RpcMethod public void powerVmOp(String vmId,PowerVmOp op,AsyncMethodCallback<Host.AsyncClient.power_vm_op_call> handler) throws RpcException {  ensureClient();  PowerVmOpRequest powerVmOpRequest=new PowerVmOpRequest(vmId,op);  clientProxy.setTimeout(POWER_VM_OP_TIMEOUT_MS);  logger.info("power_vm_op vm {}, target {}, request {}",vmId,getHostIp(),powerVmOpRequest);  try {    clientProxy.power_vm_op(powerVmOpRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  private boolean checkForAllFailedHosts(){  boolean allbad=true;  for (  int m_remoteHostsStatu : m_remoteHostsStatus) {    if (m_remoteHostsStatu != CONNECTION_FAILED) {      allbad=false;      break;    }  }  if (allbad) {    m_plottingAborted=true;    notifyListeners(false,true,true,"Plotting aborted! All connections " + "to remote hosts failed.");  }  return allbad;}  }
class C{  @Deprecated public byte[] writeObject(Object object) throws JsonProcessingException, IllegalAccessException {  try {    return writeDocument(new JSONAPIDocument<>(object));  } catch (  DocumentSerializationException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override protected void onDraw(Canvas canvas){  if (adaptedImage != null)   canvas.drawBitmap(adaptedImage,0,0,paint);}  }
class C{  public MulExpr newMulExpr(Value op1,Value op2){  return new JMulExpr(op1,op2);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.msg.SystemMessage sm=getSysMsg(stack);  if (sm != null)   return new Long(sm.getEndTimestamp()); else   return null;}  }
class C{  private void resetBounds(){  Rectangle node1RelativeBounds, node2RelativeBounds;switch (this.mode) {case HALF_ANCHORED:    Rectangle temp=new Rectangle(this.mouseTrackPoint.x,this.mouseTrackPoint.y,0,0);  Rectangle r=getNode1().getBounds().union(temp.getBounds());r=r.union(new Rectangle(r.x - 3,r.y - 3,r.width + 6,r.height + 6));setBounds(r);node1RelativeBounds=new Rectangle(getNode1().getBounds());this.relativeMouseTrackPoint=new Point(this.mouseTrackPoint);node1RelativeBounds.translate(-getLocation().x,-getLocation().y);getRelativeMouseTrackPoint().translate(-getLocation().x,-getLocation().y);break;case ANCHORED_UNSELECTED:case ANCHORED_SELECTED:Rectangle r1=node1.getBounds();Rectangle r2=node2.getBounds();Point c1=new Point((int)(r1.x + r1.width / 2.0),(int)(r1.y + r1.height / 2.0));Point c2=new Point((int)(r2.x + r2.width / 2.0),(int)(r2.y + r2.height / 2.0));double angle=Math.atan2(c1.y - c2.y,c1.x - c2.x);angle+=Math.PI / 2;Point d=new Point((int)(offset * Math.cos(angle)),(int)(offset * Math.sin(angle)));r1.translate(d.x,d.y);r2.translate(d.x,d.y);Rectangle r3=r1.getBounds().union(r2.getBounds());r3=r3.union(new Rectangle(r3.x - 3,r3.y - 3,r3.width + 6,r3.height + 6));setBounds(r3);node1RelativeBounds=new Rectangle(getNode1().getBounds());node2RelativeBounds=new Rectangle(getNode2().getBounds());node1RelativeBounds.translate(-getLocation().x,-getLocation().y);node2RelativeBounds.translate(-getLocation().x,-getLocation().y);break;default :throw new IllegalStateException();}}  }
class C{  public Matrix computeInverse(){  if (numRows != numColumns) {    throw new ArithmeticException("Matrix is not invertible.");  }  int[][] tmpMatrix=new int[numRows][numRows];  for (int i=numRows - 1; i >= 0; i--) {    tmpMatrix[i]=IntUtils.clone(matrix[i]);  }  int[][] invMatrix=new int[numRows][numRows];  for (int i=numRows - 1; i >= 0; i--) {    invMatrix[i][i]=1;  }  for (int i=0; i < numRows; i++) {    if (tmpMatrix[i][i] == 0) {      boolean foundNonZero=false;      for (int j=i + 1; j < numRows; j++) {        if (tmpMatrix[j][i] != 0) {          foundNonZero=true;          swapColumns(tmpMatrix,i,j);          swapColumns(invMatrix,i,j);          j=numRows;          continue;        }      }      if (!foundNonZero) {        throw new ArithmeticException("Matrix is not invertible.");      }    }    int coef=tmpMatrix[i][i];    int invCoef=field.inverse(coef);    multRowWithElementThis(tmpMatrix[i],invCoef);    multRowWithElementThis(invMatrix[i],invCoef);    for (int j=0; j < numRows; j++) {      if (j != i) {        coef=tmpMatrix[j][i];        if (coef != 0) {          int[] tmpRow=multRowWithElement(tmpMatrix[i],coef);          int[] tmpInvRow=multRowWithElement(invMatrix[i],coef);          addToRow(tmpRow,tmpMatrix[j]);          addToRow(tmpInvRow,invMatrix[j]);        }      }    }  }  return new GF2mMatrix(field,invMatrix);}  }
class C{  public void fromArray(int[] permutation){  if (!isPermutation(permutation)) {    throw new IllegalArgumentException("invalid permutation");  }  if (this.permutation.length != permutation.length) {    throw new IllegalArgumentException("invalid permutation length");  }  this.permutation=permutation.clone();}  }
class C{  public void testOneNodeSequentialEvent() throws Throwable {  testSequentialEvent(1);}  }
class C{  public static <T>DatabaseTableConfig<T> fromClass(ConnectionSource connectionSource,Class<T> clazz) throws SQLException {  DatabaseType databaseType=connectionSource.getDatabaseType();  String tableName=DatabaseTableConfig.extractTableName(clazz);  List<DatabaseFieldConfig> fieldConfigs=new ArrayList<DatabaseFieldConfig>();  for (Class<?> classWalk=clazz; classWalk != null; classWalk=classWalk.getSuperclass()) {    for (    Field field : classWalk.getDeclaredFields()) {      DatabaseFieldConfig config=configFromField(databaseType,tableName,field);      if (config != null && config.isPersisted()) {        fieldConfigs.add(config);      }    }  }  if (fieldConfigs.size() == 0) {    return null;  } else {    return new DatabaseTableConfig<T>(clazz,tableName,fieldConfigs);  }}  }
class C{  private String escape(String token){  return token.replace("~","~0").replace("/","~1").replace("\\","\\\\").replace("\"","\\\"");}  }
class C{  public ReaderMonitor(final LuceneIndex index,Directory directory){  super(index);  try {    IndexReader indexReader=DirectoryReader.open(directory);    indexSearcher=new IndexSearcher(indexReader);  } catch (  IOException e) {    indexSearcherCreateException=e;  }}  }
class C{  public void removeEntryFromNotifRegionMap(DistributedMember member){  notifRegionMap.remove(member);}  }
class C{  private List<SolrDocument> analyze(SolrQueryRequest req,QueryFunctions functions,JoinFunction key,Map<String,List<SolrDocument>> collectedDocs,boolean isJoined) throws IOException, IllegalStateException, ParseException {  final SolrParams params=req.getParams();  final long queryStart=Long.parseLong(params.get(ChronixQueryParams.QUERY_START_LONG));  final long queryEnd=Long.parseLong(params.get(ChronixQueryParams.QUERY_END_LONG));  final String fields=params.get(CommonParams.FL,Schema.DATA);  final boolean dataShouldReturned=fields.contains(DATA_WITH_LEADING_AND_TRAILING_COMMA);  final boolean dataAsJson=fields.contains(ChronixQueryParams.DATA_AS_JSON);  boolean decompressDataAsItIsRequested=(!functions.isEmpty() || dataAsJson || dataShouldReturned);  final List<SolrDocument> resultDocuments=Collections.synchronizedList(new ArrayList<>(collectedDocs.size()));  collectedDocs.entrySet().parallelStream().forEach(null);  return resultDocuments;}  }
class C{  public void startElement(String qName,AttributeList qAtts) throws SAXException {  ArrayList<SAXParseException> exceptions=null;  if (!namespaces) {    if (contentHandler != null) {      attAdapter.setAttributeList(qAtts);      contentHandler.startElement("","",qName.intern(),attAdapter);    }    return;  }  nsSupport.pushContext();  int length=qAtts.getLength();  for (int i=0; i < length; i++) {    String attQName=qAtts.getName(i);    if (!attQName.startsWith("xmlns"))     continue;    String prefix;    int n=attQName.indexOf(':');    if (n == -1 && attQName.length() == 5) {      prefix="";    } else     if (n != 5) {      continue;    } else     prefix=attQName.substring(n + 1);    String value=qAtts.getValue(i);    if (!nsSupport.declarePrefix(prefix,value)) {      reportError("Illegal Namespace prefix: " + prefix);      continue;    }    if (contentHandler != null)     contentHandler.startPrefixMapping(prefix,value);  }  atts.clear();  for (int i=0; i < length; i++) {    String attQName=qAtts.getName(i);    String type=qAtts.getType(i);    String value=qAtts.getValue(i);    if (attQName.startsWith("xmlns")) {      String prefix;      int n=attQName.indexOf(':');      if (n == -1 && attQName.length() == 5) {        prefix="";      } else       if (n != 5) {        prefix=null;      } else {        prefix=attQName.substring(6);      }      if (prefix != null) {        if (prefixes) {          if (uris)           atts.addAttribute(nsSupport.XMLNS,prefix,attQName.intern(),type,value); else           atts.addAttribute("","",attQName.intern(),type,value);        }        continue;      }    }    try {      String attName[]=processName(attQName,true,true);      atts.addAttribute(attName[0],attName[1],attName[2],type,value);    } catch (    SAXException e) {      if (exceptions == null) {        exceptions=new ArrayList<SAXParseException>();      }      exceptions.add((SAXParseException)e);      atts.addAttribute("",attQName,attQName,type,value);    }  }  if (exceptions != null && errorHandler != null) {    for (    SAXParseException ex : exceptions) {      errorHandler.error(ex);    }  }  if (contentHandler != null) {    String name[]=processName(qName,false,false);    contentHandler.startElement(name[0],name[1],name[2],atts);  }}  }
class C{  public ScoreStatsControlerListener(ControlerConfigGroup controlerConfigGroup,final Population population,final String filename,final boolean createPNG) throws UncheckedIOException {  this.controlerConfigGroup=controlerConfigGroup;  this.population=population;  this.fileName=filename;  this.createPNG=createPNG;  if (filename.toLowerCase(Locale.ROOT).endsWith(".txt")) {    this.out=IOUtils.getBufferedWriter(filename);  } else {    this.out=IOUtils.getBufferedWriter(filename + ".txt");  }  try {    this.out.write("ITERATION\tavg. EXECUTED\tavg. WORST\tavg. AVG\tavg. BEST\n");  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  public void unregisterInterestList(List keys,boolean isClosing,boolean keepAlive){  RegisterInterestTracker rit=this.pool.getRITracker();  boolean removed=rit.removeInterestList(this.region,keys,false,true) || rit.removeInterestList(this.region,keys,false,false) || rit.removeInterestList(this.region,keys,true,true)|| rit.removeInterestList(this.region,keys,true,false);  if (removed) {    UnregisterInterestListOp.execute(this.pool,this.regionName,keys,isClosing,keepAlive);  }}  }
class C{  public RegionFactory<K,V> addGatewaySenderId(String gatewaySenderId){  this.attrsFactory.addGatewaySenderId(gatewaySenderId);  return this;}  }
class C{  private final Hop createHop(SipURI sipUri,Request request){  String transport=sipUri.isSecure() ? SIPConstants.TLS : sipUri.getTransportParam();  if (transport == null) {    ViaHeader via=(ViaHeader)request.getHeader(ViaHeader.NAME);    transport=via.getTransport();  }  int port;  if (sipUri.getPort() != -1) {    port=sipUri.getPort();  } else {    if (transport.equalsIgnoreCase(SIPConstants.TLS))     port=5061; else     port=5060;  }  String host=sipUri.getMAddrParam() != null ? sipUri.getMAddrParam() : sipUri.getHost();  AddressResolver addressResolver=this.sipStack.getAddressResolver();  return addressResolver.resolveAddress(new HopImpl(host,port,transport));}  }
class C{  public String[] validBaudRates(){  return new String[]{"9,600 bps"};}  }
class C{  private List<Sheep> sheepInPen(StendhalRPZone zone){  List<Sheep> sheep=new LinkedList<Sheep>();  Area pen=getPen(zone);  for (  RPEntity entity : zone.getPlayerAndFriends()) {    if (entity instanceof Sheep) {      if (pen.contains(entity)) {        sheep.add((Sheep)entity);      }    }  }  return sheep;}  }
class C{  @Override public Cancel watch(Watch watch){  return _file.watch(watch);}  }
class C{  public Word and(Word w2){  return new Word(value.and(w2.value));}  }
class C{  public void writeFacilityAttributes(String facilityAttributeFile){  ObjectAttributesXmlWriter ow=new ObjectAttributesXmlWriter(this.facilityAttributes);  ow.writeFile(facilityAttributeFile);}  }
class C{  private GrantorInfo becomeGrantor(InternalDistributedMember predecessor){  return GrantorRequestProcessor.becomeGrantor(this,getSerialNumber(),predecessor,this.ds);}  }
class C{  public void runWithRetries(RetryableTask task) throws Exception {  boolean maxSleepIntervalHit=false;  for (int i=0; i < numAttempts; i++) {    try {      task.run();      return;    } catch (    Exception e) {      if (i == numAttempts - 1) {        throw e;      }      int sleepTime;      if (maxSleepIntervalHit) {        sleepTime=maxSleepInterval;      } else {        sleepTime=baseSleepInterval * (int)Math.pow(2,i);      }      LOG.error("Got an exception! Sleeping for " + sleepTime + " seconds and retrying.",e);      try {        Thread.sleep(sleepTime * 1000);      } catch (      InterruptedException ie) {        LOG.error("Unexpected interruption!",ie);        throw ie;      }    }  }}  }
class C{  private static boolean isTableFieldNode(Element node){  return (node.getAttributeValue(null,ATTRIBUTE_OPENMRS_ATTRIBUTE) != null && node.getAttributeValue(null,ATTRIBUTE_OPENMRS_TABLE) != null);}  }
class C{  public String minimumBucketSizeTipText(){  return "The minimum number of objects in a bucket " + "(passed to OneR).";}  }
class C{  public String addAndStartProcess(ClusterProcess process,int timeout){  process.setCluster(this);  memberPocesses.add(process);  LOGGER.debug(String.format("Starting %s (%s) container",process.getName(),process.getContainerId()));  try {    process.start(timeout);  } catch (  Exception exc) {    String msg=String.format("Failed to start %s (%s) container",process.getName(),process.getContainerId());    LOGGER.error(msg,exc);    throw new MinimesosException(msg,exc);  }  return process.getContainerId();}  }
class C{  public CtClass[] mayThrow(){  return super.mayThrow();}  }
class C{  @Ignore("disabled for some reason?") @Test public void testP2PViewChangeReject() throws Exception {  final Host host=Host.getHost(0);  final VM peer2=host.getVM(1);  final VM peer3=host.getVM(2);  CredentialGenerator gen=new LdapUserCredentialGenerator();  gen.init();  Properties extraProps=gen.getSystemProperties();  String authenticator=gen.getAuthenticator();  String authInit=gen.getAuthInit();  if (extraProps == null) {    extraProps=new Properties();  }  CredentialGenerator gen2=new DummyCredentialGenerator();  gen2.init();  Properties extraProps2=gen2.getSystemProperties();  String authenticator2=gen2.getAuthenticator();  if (extraProps2 == null) {    extraProps2=new Properties();  }  Properties props=new Properties();  int port=getRandomAvailablePort(SOCKET);  final String locators=getIPLiteral() + "[" + port+ "]";  props.setProperty(SECURITY_PEER_AUTH_INIT,authInit);  props.setProperty(SECURITY_PEER_AUTHENTICATOR,authenticator);  Properties credentials=gen.getValidCredentials(1);  Properties javaProps=gen.getJavaProperties();  props.putAll(credentials);  props.putAll(extraProps);  startTheLocator(props,javaProps,port);  try {    props=new Properties();    props.setProperty(MCAST_PORT,"0");    props.setProperty(LOCATORS,locators);    props.setProperty(SECURITY_PEER_AUTH_INIT,authInit);    props.setProperty(SECURITY_PEER_AUTHENTICATOR,authenticator2);    credentials=gen.getValidCredentials(3);    Properties javaProps2=gen2.getJavaProperties();    props.putAll(credentials);    props.putAll(extraProps2);    createDS(props,javaProps2);    props=new Properties();    props.setProperty(MCAST_PORT,"0");    props.setProperty(LOCATORS,locators);    props.setProperty(SECURITY_PEER_AUTH_INIT,authInit);    props.setProperty(SECURITY_PEER_AUTHENTICATOR,authenticator);    credentials=gen.getValidCredentials(7);    javaProps=gen.getJavaProperties();    props.putAll(credentials);    props.putAll(extraProps);    createDS(peer2,props,javaProps);    createDS(peer3,props,javaProps);    pause(2000);    locatorVM.invoke(null);    verifyMembers(2);    peer2.invoke(null);    peer3.invoke(null);    disconnectFromDS();    pause(2000);    locatorVM.invoke(null);    peer2.invoke(null);    peer3.invoke(null);    peer2.invoke(null);    pause(2000);    locatorVM.invoke(null);    peer3.invoke(null);    peer3.invoke(null);    pause(2000);    locatorVM.invoke(null);  }  finally {    locatorVM.invoke(null);  }}  }
class C{  protected String compute(String text,String regex,String replacement){  if (text == null || regex == null || replacement == null) {    return null;  } else {    if (regex.length() == 0) {      throw new FunctionInputException("expression_parser.function_missing_arguments","regex",getFunctionName());    }    return text.replaceAll(regex,replacement);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static HttpServer httpd(String scheme,boolean proxy,String principal,String ktab) throws Exception {  MyHttpHandler h=new MyHttpHandler();  HttpServer server=HttpServer.create(new InetSocketAddress(0),0);  HttpContext hc=server.createContext("/",h);  hc.setAuthenticator(new MyServerAuthenticator(proxy,scheme,principal,ktab));  server.start();  return server;}  }
class C{  public static Entry createComment(BloggerService myService,String postId,String commentText) throws ServiceException, IOException {  String commentsFeedUri=feedUri + "/" + postId+ COMMENTS_FEED_URI_SUFFIX;  URL feedUrl=new URL(commentsFeedUri);  Entry myEntry=new Entry();  myEntry.setContent(new PlainTextConstruct(commentText));  return myService.insert(feedUrl,myEntry);}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (conversation.getType() != Conversation.TYPE_CHANNEL) {    throw new CommandException(service.getString(R.string.only_usable_from_channel));  }  if (params.length == 2) {    service.getConnection(server.getId()).kick(conversation.getName(),params[1]);  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  int cols, rows, col, row, a, numImages, loopNum, progress;  double noData;  String inputFilesString;  String[] imageFiles;  String[] shortNames;  long[] imageNs;  boolean isZeroBackground;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  isZeroBackground=Boolean.parseBoolean(args[1]);  try {    imageNs=new long[numImages];    shortNames=new String[numImages];    double[] data;    loopNum=0;    for (a=0; a < numImages; a++) {      loopNum++;      updateProgress("Loop " + loopNum + " of "+ numImages+ ":",0);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (isZeroBackground) {        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData && data[col] != 0) {              imageNs[a]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(row * 100.0 / rows);          updateProgress("Loop " + loopNum + " of "+ numImages+ ":",progress);        }      } else {        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              imageNs[a]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(row * 100.0 / rows);          updateProgress("Loop " + loopNum + " of "+ numImages+ ":",progress);        }      }      image.close();    }    String retstr;    DecimalFormat df=new DecimalFormat("###,###,###,###");    retstr="Number of Grid Cells:\n\n";    for (a=0; a < numImages; a++) {      retstr+=shortNames[a] + ":\t" + df.format(imageNs[a])+ "\n";    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void loadedModule(final INaviModule module){  createChildren();  m_model.nodeStructureChanged(CModuleNode.this);}  }
class C{  public static final Criterion uid(UidRange[] range){  return new UidCriterion(range);}  }
class C{  public boolean isValid(INode n){  if (!(n instanceof EightPuzzleNode)) {    throw new IllegalArgumentException("SlideMove expects state objects of class EightPuzzleNode");  }  EightPuzzleNode state=(EightPuzzleNode)n;  if (fromR < 0 || fromR > EightPuzzleNode.MaxC) {    return false;  }  if (fromC < 0 || fromC > EightPuzzleNode.MaxR) {    return false;  }  if (toR < 0 || toR > EightPuzzleNode.MaxC) {    return false;  }  if (toC < 0 || toC > EightPuzzleNode.MaxR) {    return false;  }  return state.isAdjacentAndEmpty(fromR,fromC,toR,toC);}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof RC5Parameters) {    RC5Parameters p=(RC5Parameters)params;    _noRounds=p.getRounds();    setKey(p.getKey());  } else   if (params instanceof KeyParameter) {    KeyParameter p=(KeyParameter)params;    setKey(p.getKey());  } else {    throw new IllegalArgumentException("invalid parameter passed to RC532 init - " + params.getClass().getName());  }  this.forEncryption=forEncryption;}  }
class C{  private CIMObjectPath[] exposePathsWithVolumesOnly(StorageSystem storage,URI exportMaskURI,VolumeURIHLU[] volumeURIHLUs) throws Exception {  CIMArgument[] inArgs=_helper.getCreateOrGrowStorageGroupInputArguments(storage,exportMaskURI,volumeURIHLUs,null,null);  CIMArgument[] outArgs=new CIMArgument[5];  _helper.invokeMethod(storage,_cimPath.getControllerConfigSvcPath(storage),"ExposePaths",inArgs,outArgs);  return _cimPath.getProtocolControllersFromOutputArgs(outArgs);}  }
class C{  public Builder minutes(Integer minutes){  this.minutes=minutes;  return this;}  }
class C{  @CanIgnoreReturnValue public Builder addEscape(char c,String replacement){  checkNotNull(replacement);  replacementMap.put(c,replacement);  return this;}  }
class C{  protected void calculateIntegratePartials(double[] inPartials,double[] proportions,double[] outPartials){  int u=0;  int v=0;  for (int k=0; k < patternCount; k++) {    for (int i=0; i < stateCount; i++) {      outPartials[u]=inPartials[v] * proportions[0];      u++;      v++;    }  }  for (int l=1; l < matrixCount; l++) {    u=0;    for (int k=0; k < patternCount; k++) {      for (int i=0; i < stateCount; i++) {        outPartials[u]+=inPartials[v] * proportions[l];        u++;        v++;      }    }  }}  }
class C{  public boolean isAfter(long millisInstant){  return (getStartMillis() > millisInstant);}  }
class C{  private String retrieveProperty(String key) throws IOException {  String ret=null;  if (null == m_properties) {    Properties systemProperties=new Properties();    loadPropertiesAsResource(m_theConfig,getSystemPropertyFileName(),systemProperties);    Properties deploymentProperties=new Properties(systemProperties);    loadPropertiesAsFile(getDeploymentPropertyFileName(),deploymentProperties);    m_properties=deploymentProperties;  }  ret=m_properties.getProperty(key);  if (null == ret) {    throw new PropertyNotFoundException("The property \"" + key + "\" was not found in the property file \""+ getDeploymentPropertyFileName()+ "\". \n Check the file is in the applications root dir.");  }  return ret;}  }
class C{  public EncoderTestSuiteBuilder encoded(String chars){  for (int i=0, n=chars.length(); i < n; ++i) {    char ch=chars.charAt(i);    _encoded.set(ch);    _valid.clear(ch);    _invalid.clear(ch);  }  return this;}  }
class C{  private PlatformJob nextClosureJob(PlatformAbstractTask task,BinaryRawReaderEx reader){  return platformCtx.createClosureJob(task,reader.readLong(),reader.readObjectDetached());}  }
class C{  public static void announceForAccessibilityCompat(Context context,CharSequence text){  if (Build.VERSION.SDK_INT >= 4) {    AccessibilityManager accessibilityManager=(AccessibilityManager)context.getSystemService(Context.ACCESSIBILITY_SERVICE);    if (!accessibilityManager.isEnabled()) {      return;    }    final int eventType;    if (Build.VERSION.SDK_INT < 16) {      eventType=AccessibilityEvent.TYPE_VIEW_FOCUSED;    } else {      eventType=AccessibilityEventCompat.TYPE_ANNOUNCEMENT;    }    final AccessibilityEvent event=AccessibilityEvent.obtain(eventType);    event.getText().add(text);    event.setClassName(Manager.class.getName());    event.setPackageName(context.getPackageName());    accessibilityManager.sendAccessibilityEvent(event);  }}  }
class C{  public void insertNode(Node n,int pos){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  insertElementAt(n,pos);}  }
class C{  @CanIgnoreReturnValue V checkValue(@Nullable V value){  return value;}  }
class C{  public String makeEndpointsKey(){  return FCZoneReference.makeEndpointsKey(_endPoints);}  }
class C{  public void initializeAllEngines(){  this.factories.keySet().stream().forEach(null);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.610 -0500",hash_original_method="593B1F2EF0668764A615A5DB85CFDCCD",hash_generated_method="96B0B2272C559422F2F421A9F89F6A66") private String nextToInternal(String excluded){  int start=pos;  for (; pos < in.length(); pos++) {    char c=in.charAt(pos);    if (c == '\r' || c == '\n' || excluded.indexOf(c) != -1) {      return in.substring(start,pos);    }  }  return in.substring(start);}  }
class C{  public PrivateKey(BigInteger priv,boolean compressed) throws HyperLedgerException {  if (priv.compareTo(BigInteger.ZERO) <= 0 || priv.compareTo(curve.getN()) >= 0) {    throw new HyperLedgerException("invalid key");  }  this.priv=priv;  this.compressed=compressed;  pub=curve.getG().multiply(priv).getEncoded(compressed);}  }
class C{  @EventHandler(ignoreCancelled=true) public void onHangingPlace(HangingPlaceEvent event){  if (!canInteract(event.getPlayer())) {    event.setCancelled(true);  }}  }
class C{  boolean isObscuredByChildren(){  if (!blockOverdraw) {    return false;  }  if (!getLayout().obscuresPotential(this)) {    return false;  }  Style s=getStyle();  if (s.getPadding(TOP) != 0 || s.getPadding(LEFT) != 0 || s.getPadding(RIGHT) != 0 || s.getPadding(BOTTOM) != 0) {    return false;  }  int size=components.size();  for (int iter=0; iter < size; iter++) {    Component cmp=components.get(iter);    s=cmp.getStyle();    if (cmp.getWidth() == 0 || cmp.getHeight() == 0) {      continue;    }    if (cmp instanceof Container) {      if (!((Container)cmp).getLayout().obscuresPotential(this)) {        return false;      }      if (s.getOpacity() != 0xff || s.getMargin(TOP) != 0 || s.getMargin(LEFT) != 0 || s.getMargin(RIGHT) != 0 || s.getMargin(BOTTOM) != 0) {        return false;      }      if ((s.getBgTransparency() & 0xff) != 0xff && !((Container)cmp).isObscuredByChildren()) {        return false;      }    } else {      if ((s.getBgTransparency() & 0xff) != 0xff || s.getOpacity() != 0xff || s.getMargin(TOP) != 0 || s.getMargin(LEFT) != 0 || s.getMargin(RIGHT) != 0 || s.getMargin(BOTTOM) != 0) {        return false;      }    }  }  return true;}  }
class C{  public ZoneOffsetTransition createTransition(int year){  LocalDate date;  if (dom < 0) {    date=LocalDate.of(year,month,month.length(IsoChronology.INSTANCE.isLeapYear(year)) + 1 + dom);    if (dow != null) {      date=date.with(previousOrSame(dow));    }  } else {    date=LocalDate.of(year,month,dom);    if (dow != null) {      date=date.with(nextOrSame(dow));    }  }  if (timeEndOfDay) {    date=date.plusDays(1);  }  LocalDateTime localDT=LocalDateTime.of(date,time);  LocalDateTime transition=timeDefinition.createDateTime(localDT,standardOffset,offsetBefore);  return new ZoneOffsetTransition(transition,offsetBefore,offsetAfter);}  }
class C{  @Inline public Address popNursery(){  return collectNursery.pop();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentfragmentnodetype.class,args);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case MESSAGE_TYPE:    return isSetMessageType();case SW_PORT_TUPLE:  return isSetSwPortTuple();case DATA:return isSetData();}throw new IllegalStateException();}  }
class C{  public OpenSSLSignatureRawRSA() throws NoSuchAlgorithmException {  super("NONEwithRSA");}  }
class C{  protected boolean canConnect(ConnectionFigure f,Connector startConnector,Connector endConnector){  return f.canConnect(startConnector,endConnector);}  }
class C{  protected void fillAttributedStringBuffer(BridgeContext ctx,Element element,boolean top,Integer bidiLevel,Map initialAttributes,AttributedStringBuffer asb,List lnLocs){  if ((!SVGUtilities.matchUserAgent(element,ctx.getUserAgent())) || (!CSSUtilities.convertDisplay(element))) {    return;  }  String s=XMLSupport.getXMLSpace(element);  boolean preserve=s.equals(SVG_PRESERVE_VALUE);  boolean prevEndsWithSpace;  Element nodeElement=element;  int elementStartChar=asb.length();  if (top) {    endLimit=startLen=asb.length();  }  if (preserve) {    endLimit=startLen;  }  Map map=initialAttributes == null ? new HashMap() : new HashMap(initialAttributes);  initialAttributes=getAttributeMap(ctx,element,null,bidiLevel,map);  Object o=map.get(TextAttribute.BIDI_EMBEDDING);  Integer subBidiLevel=bidiLevel;  if (o != null) {    subBidiLevel=(Integer)o;  }  int lineBreak=-1;  if (lnLocs.size() != 0) {    lineBreak=((Integer)lnLocs.get(lnLocs.size() - 1)).intValue();  }  for (Node n=getFirstChild(element); n != null; n=getNextSibling(n)) {    if (preserve) {      prevEndsWithSpace=false;    } else {      int len=asb.length();      if (len == startLen) {        prevEndsWithSpace=true;      } else {        prevEndsWithSpace=(asb.getLastChar() == ' ');        int idx=lnLocs.size() - 1;        if (!prevEndsWithSpace && (idx >= 0)) {          Integer i=(Integer)lnLocs.get(idx);          if (i.intValue() == len) {            prevEndsWithSpace=true;          }        }      }    }switch (n.getNodeType()) {case Node.ELEMENT_NODE:      if (!SVG_NAMESPACE_URI.equals(n.getNamespaceURI()))       break;    nodeElement=(Element)n;  String ln=n.getLocalName();if (ln.equals(SVG12Constants.SVG_FLOW_LINE_TAG)) {  int before=asb.length();  fillAttributedStringBuffer(ctx,nodeElement,false,subBidiLevel,initialAttributes,asb,lnLocs);  lineBreak=asb.length();  lnLocs.add(new Integer(lineBreak));  if (before != lineBreak) {    initialAttributes=null;  }} else if (ln.equals(SVG12Constants.SVG_FLOW_SPAN_TAG) || ln.equals(SVG12Constants.SVG_ALT_GLYPH_TAG)) {  int before=asb.length();  fillAttributedStringBuffer(ctx,nodeElement,false,subBidiLevel,initialAttributes,asb,lnLocs);  if (asb.length() != before) {    initialAttributes=null;  }} else if (ln.equals(SVG_A_TAG)) {  if (ctx.isInteractive()) {    NodeEventTarget target=(NodeEventTarget)nodeElement;    UserAgent ua=ctx.getUserAgent();    SVGAElementBridge.CursorHolder ch;    ch=new SVGAElementBridge.CursorHolder(CursorManager.DEFAULT_CURSOR);    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_CLICK,new SVGAElementBridge.AnchorListener(ua,ch),false,null);    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEOVER,new SVGAElementBridge.CursorMouseOverListener(ua,ch),false,null);    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEOUT,new SVGAElementBridge.CursorMouseOutListener(ua,ch),false,null);  }  int before=asb.length();  fillAttributedStringBuffer(ctx,nodeElement,false,subBidiLevel,initialAttributes,asb,lnLocs);  if (asb.length() != before) {    initialAttributes=null;  }} else if (ln.equals(SVG_TREF_TAG)) {  String uriStr=XLinkSupport.getXLinkHref((Element)n);  Element ref=ctx.getReferencedElement((Element)n,uriStr);  s=TextUtilities.getElementContent(ref);  s=normalizeString(s,preserve,prevEndsWithSpace);  if (s.length() != 0) {    int trefStart=asb.length();    Map m=new HashMap();    getAttributeMap(ctx,nodeElement,null,bidiLevel,m);    asb.append(s,m);    int trefEnd=asb.length() - 1;    TextPaintInfo tpi;    tpi=(TextPaintInfo)elemTPI.get(nodeElement);    tpi.startChar=trefStart;    tpi.endChar=trefEnd;  }}break;case Node.TEXT_NODE:case Node.CDATA_SECTION_NODE:s=n.getNodeValue();s=normalizeString(s,preserve,prevEndsWithSpace);if (s.length() != 0) {asb.append(s,map);if (preserve) {endLimit=asb.length();}initialAttributes=null;}}}if (top) {boolean strippedSome=false;while ((endLimit < asb.length()) && (asb.getLastChar() == ' ')) {int idx=lnLocs.size() - 1;int len=asb.length();if (idx >= 0) {Integer i=(Integer)lnLocs.get(idx);if (i.intValue() >= len) {i=new Integer(len - 1);lnLocs.set(idx,i);idx--;while (idx >= 0) {i=(Integer)lnLocs.get(idx);if (i.intValue() < len - 1) break;lnLocs.remove(idx);idx--;}}}asb.stripLast();strippedSome=true;}if (strippedSome) {Iterator iter=elemTPI.values().iterator();while (iter.hasNext()) {TextPaintInfo tpi=(TextPaintInfo)iter.next();if (tpi.endChar >= asb.length()) {tpi.endChar=asb.length() - 1;if (tpi.startChar > tpi.endChar) tpi.startChar=tpi.endChar;}}}}int elementEndChar=asb.length() - 1;TextPaintInfo tpi=(TextPaintInfo)elemTPI.get(element);tpi.startChar=elementStartChar;tpi.endChar=elementEndChar;}  }
class C{  public ASTNode generateAST(String query) throws ParseException {  ParseDriver pd=new ParseDriver();  return pd.parse(query);}  }
class C{  public CModulesCheckBoxPanel(final CModulesTableModel modulesTableModel){  super(new BorderLayout());  final JCheckBox checkBox=new JCheckBox("Show full module paths");  checkBox.addItemListener(new InternalCheckboxListener());  add(checkBox);  m_modulesTableModel=modulesTableModel;}  }
class C{  protected boolean isOnlyReceipt(){  return m_isOnlyReceipt;}  }
class C{  final public void add(long x){  cat.add(x);}  }
class C{  public PtCountCountComparisonKMLWriter(final List<CountSimComparison> boardCountSimCompList,final List<CountSimComparison> alightCountSimCompList,final List<CountSimComparison> occupancyCountSimCompList,final CoordinateTransformation coordTransform,final Counts boradCounts,final Counts alightCounts,HashMap<String,String> stopIDMap,Map<String,TreeSet<String>> stopID2lineIdMap,boolean writePlacemarkName){  super(boardCountSimCompList,alightCountSimCompList,occupancyCountSimCompList);  this.coordTransform=coordTransform;  this.boardCounts=boradCounts;  this.alightCounts=alightCounts;  this.stopIDMap=stopIDMap;  this.stopID2lineIdMap=stopID2lineIdMap;  this.writePlacemarkName=writePlacemarkName;}  }
class C{  protected void readHeader() throws IOException, IllegalArgumentException {  if (gotHeader)   return;  if (iis == null) {    throw new IllegalStateException("Input source not set!");  }  int profileData=0, profileSize=0;  this.metadata=new BMPMetadata();  iis.mark();  byte[] marker=new byte[2];  iis.read(marker);  if (marker[0] != 0x42 || marker[1] != 0x4d)   throw new IllegalArgumentException(I18N.getString("BMPImageReader1"));  bitmapFileSize=iis.readUnsignedInt();  iis.skipBytes(4);  bitmapOffset=iis.readUnsignedInt();  long size=iis.readUnsignedInt();  if (size == 12) {    width=iis.readShort();    height=iis.readShort();  } else {    width=iis.readInt();    height=iis.readInt();  }  metadata.width=width;  metadata.height=height;  int planes=iis.readUnsignedShort();  bitsPerPixel=iis.readUnsignedShort();  metadata.bitsPerPixel=(short)bitsPerPixel;  numBands=3;  if (size == 12) {    metadata.bmpVersion=VERSION_2;    if (bitsPerPixel == 1) {      imageType=VERSION_2_1_BIT;    } else     if (bitsPerPixel == 4) {      imageType=VERSION_2_4_BIT;    } else     if (bitsPerPixel == 8) {      imageType=VERSION_2_8_BIT;    } else     if (bitsPerPixel == 24) {      imageType=VERSION_2_24_BIT;    }    int numberOfEntries=(int)((bitmapOffset - 14 - size) / 3);    int sizeOfPalette=numberOfEntries * 3;    palette=new byte[sizeOfPalette];    iis.readFully(palette,0,sizeOfPalette);    metadata.palette=palette;    metadata.paletteSize=numberOfEntries;  } else {    compression=iis.readUnsignedInt();    imageSize=iis.readUnsignedInt();    long xPelsPerMeter=iis.readInt();    long yPelsPerMeter=iis.readInt();    long colorsUsed=iis.readUnsignedInt();    long colorsImportant=iis.readUnsignedInt();    metadata.compression=(int)compression;    metadata.xPixelsPerMeter=(int)xPelsPerMeter;    metadata.yPixelsPerMeter=(int)yPelsPerMeter;    metadata.colorsUsed=(int)colorsUsed;    metadata.colorsImportant=(int)colorsImportant;    if (size == 40) {switch ((int)compression) {case BI_JPEG:case BI_PNG:        metadata.bmpVersion=VERSION_3;      imageType=VERSION_3_XP_EMBEDDED;    break;case BI_RGB:case BI_RLE8:case BI_RLE4:  if (bitmapOffset < (size + 14)) {    throw new IIOException(I18N.getString("BMPImageReader7"));  }int numberOfEntries=(int)((bitmapOffset - 14 - size) / 4);int sizeOfPalette=numberOfEntries * 4;palette=new byte[sizeOfPalette];iis.readFully(palette,0,sizeOfPalette);metadata.palette=palette;metadata.paletteSize=numberOfEntries;if (bitsPerPixel == 1) {imageType=VERSION_3_1_BIT;} else if (bitsPerPixel == 4) {imageType=VERSION_3_4_BIT;} else if (bitsPerPixel == 8) {imageType=VERSION_3_8_BIT;} else if (bitsPerPixel == 24) {imageType=VERSION_3_24_BIT;} else if (bitsPerPixel == 16) {imageType=VERSION_3_NT_16_BIT;redMask=0x7C00;greenMask=0x3E0;blueMask=(1 << 5) - 1;metadata.redMask=redMask;metadata.greenMask=greenMask;metadata.blueMask=blueMask;} else if (bitsPerPixel == 32) {imageType=VERSION_3_NT_32_BIT;redMask=0x00FF0000;greenMask=0x0000FF00;blueMask=0x000000FF;metadata.redMask=redMask;metadata.greenMask=greenMask;metadata.blueMask=blueMask;}metadata.bmpVersion=VERSION_3;break;case BI_BITFIELDS:if (bitsPerPixel == 16) {imageType=VERSION_3_NT_16_BIT;} else if (bitsPerPixel == 32) {imageType=VERSION_3_NT_32_BIT;}redMask=(int)iis.readUnsignedInt();greenMask=(int)iis.readUnsignedInt();blueMask=(int)iis.readUnsignedInt();metadata.redMask=redMask;metadata.greenMask=greenMask;metadata.blueMask=blueMask;if (colorsUsed != 0) {sizeOfPalette=(int)colorsUsed * 4;palette=new byte[sizeOfPalette];iis.readFully(palette,0,sizeOfPalette);metadata.palette=palette;metadata.paletteSize=(int)colorsUsed;}metadata.bmpVersion=VERSION_3_NT;break;default :throw new IIOException(I18N.getString("BMPImageReader2"));}} else if (size == 108 || size == 124) {if (size == 108) metadata.bmpVersion=VERSION_4; else if (size == 124) metadata.bmpVersion=VERSION_5;redMask=(int)iis.readUnsignedInt();greenMask=(int)iis.readUnsignedInt();blueMask=(int)iis.readUnsignedInt();alphaMask=(int)iis.readUnsignedInt();long csType=iis.readUnsignedInt();int redX=iis.readInt();int redY=iis.readInt();int redZ=iis.readInt();int greenX=iis.readInt();int greenY=iis.readInt();int greenZ=iis.readInt();int blueX=iis.readInt();int blueY=iis.readInt();int blueZ=iis.readInt();long gammaRed=iis.readUnsignedInt();long gammaGreen=iis.readUnsignedInt();long gammaBlue=iis.readUnsignedInt();if (size == 124) {metadata.intent=iis.readInt();profileData=iis.readInt();profileSize=iis.readInt();iis.skipBytes(4);}metadata.colorSpace=(int)csType;if (csType == LCS_CALIBRATED_RGB) {metadata.redX=redX;metadata.redY=redY;metadata.redZ=redZ;metadata.greenX=greenX;metadata.greenY=greenY;metadata.greenZ=greenZ;metadata.blueX=blueX;metadata.blueY=blueY;metadata.blueZ=blueZ;metadata.gammaRed=(int)gammaRed;metadata.gammaGreen=(int)gammaGreen;metadata.gammaBlue=(int)gammaBlue;}int numberOfEntries=(int)((bitmapOffset - 14 - size) / 4);int sizeOfPalette=numberOfEntries * 4;palette=new byte[sizeOfPalette];iis.readFully(palette,0,sizeOfPalette);metadata.palette=palette;metadata.paletteSize=numberOfEntries;switch ((int)compression) {case BI_JPEG:case BI_PNG:if (size == 108) {imageType=VERSION_4_XP_EMBEDDED;} else if (size == 124) {imageType=VERSION_5_XP_EMBEDDED;}break;default :if (bitsPerPixel == 1) {imageType=VERSION_4_1_BIT;} else if (bitsPerPixel == 4) {imageType=VERSION_4_4_BIT;} else if (bitsPerPixel == 8) {imageType=VERSION_4_8_BIT;} else if (bitsPerPixel == 16) {imageType=VERSION_4_16_BIT;if ((int)compression == BI_RGB) {redMask=0x7C00;greenMask=0x3E0;blueMask=0x1F;}} else if (bitsPerPixel == 24) {imageType=VERSION_4_24_BIT;} else if (bitsPerPixel == 32) {imageType=VERSION_4_32_BIT;if ((int)compression == BI_RGB) {redMask=0x00FF0000;greenMask=0x0000FF00;blueMask=0x000000FF;}}metadata.redMask=redMask;metadata.greenMask=greenMask;metadata.blueMask=blueMask;metadata.alphaMask=alphaMask;}} else {throw new IIOException(I18N.getString("BMPImageReader3"));}}if (height > 0) {isBottomUp=true;} else {isBottomUp=false;height=Math.abs(height);}ColorSpace colorSpace=ColorSpace.getInstance(ColorSpace.CS_sRGB);if (metadata.colorSpace == PROFILE_LINKED || metadata.colorSpace == PROFILE_EMBEDDED) {iis.mark();iis.skipBytes(profileData - size);byte[] profile=new byte[profileSize];iis.readFully(profile,0,profileSize);iis.reset();try {if (metadata.colorSpace == PROFILE_LINKED && isLinkedProfileAllowed() && !isUncOrDevicePath(profile)) {String path=new String(profile,"windows-1252");colorSpace=new ICC_ColorSpace(ICC_Profile.getInstance(path));} else {colorSpace=new ICC_ColorSpace(ICC_Profile.getInstance(profile));}} catch (Exception e) {colorSpace=ColorSpace.getInstance(ColorSpace.CS_sRGB);}}if (bitsPerPixel == 0 || compression == BI_JPEG || compression == BI_PNG) {colorModel=null;sampleModel=null;} else if (bitsPerPixel == 1 || bitsPerPixel == 4 || bitsPerPixel == 8) {numBands=1;if (bitsPerPixel == 8) {int[] bandOffsets=new int[numBands];for (int i=0; i < numBands; i++) {bandOffsets[i]=numBands - 1 - i;}sampleModel=new PixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,width,height,numBands,numBands * width,bandOffsets);} else {sampleModel=new MultiPixelPackedSampleModel(DataBuffer.TYPE_BYTE,width,height,bitsPerPixel);}byte r[], g[], b[];if (imageType == VERSION_2_1_BIT || imageType == VERSION_2_4_BIT || imageType == VERSION_2_8_BIT) {size=palette.length / 3;if (size > 256) {size=256;}int off;r=new byte[(int)size];g=new byte[(int)size];b=new byte[(int)size];for (int i=0; i < (int)size; i++) {off=3 * i;b[i]=palette[off];g[i]=palette[off + 1];r[i]=palette[off + 2];}} else {size=palette.length / 4;if (size > 256) {size=256;}int off;r=new byte[(int)size];g=new byte[(int)size];b=new byte[(int)size];for (int i=0; i < size; i++) {off=4 * i;b[i]=palette[off];g[i]=palette[off + 1];r[i]=palette[off + 2];}}if (ImageUtil.isIndicesForGrayscale(r,g,b)) colorModel=ImageUtil.createColorModel(null,sampleModel); else colorModel=new IndexColorModel(bitsPerPixel,(int)size,r,g,b);} else if (bitsPerPixel == 16) {numBands=3;sampleModel=new SinglePixelPackedSampleModel(DataBuffer.TYPE_USHORT,width,height,new int[]{redMask,greenMask,blueMask});colorModel=new DirectColorModel(colorSpace,16,redMask,greenMask,blueMask,0,false,DataBuffer.TYPE_USHORT);} else if (bitsPerPixel == 32) {numBands=alphaMask == 0 ? 3 : 4;int[] bitMasks=numBands == 3 ? new int[]{redMask,greenMask,blueMask} : new int[]{redMask,greenMask,blueMask,alphaMask};sampleModel=new SinglePixelPackedSampleModel(DataBuffer.TYPE_INT,width,height,bitMasks);colorModel=new DirectColorModel(colorSpace,32,redMask,greenMask,blueMask,alphaMask,false,DataBuffer.TYPE_INT);} else {numBands=3;int[] bandOffsets=new int[numBands];for (int i=0; i < numBands; i++) {bandOffsets[i]=numBands - 1 - i;}sampleModel=new PixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,width,height,numBands,numBands * width,bandOffsets);colorModel=ImageUtil.createColorModel(colorSpace,sampleModel);}originalSampleModel=sampleModel;originalColorModel=colorModel;iis.reset();iis.skipBytes(bitmapOffset);gotHeader=true;}  }
class C{  private void removeAllObjects(){  logger.debug("CLEANING screen object list");  texts.clear();}  }
class C{  public static String convertTabsToSpaces(String line,int tabWidth){  int tab_index, tab_size;  int last_tab_index=0;  int added_chars=0;  if (tabWidth == 0) {    return remove(line,'\t');  }  StringBuilder result=new StringBuilder();  while ((tab_index=line.indexOf('\t',last_tab_index)) != -1) {    tab_size=tabWidth - ((tab_index + added_chars) % tabWidth);    if (tab_size == 0) {      tab_size=tabWidth;    }    added_chars+=tab_size - 1;    result.append(line.substring(last_tab_index,tab_index));    result.append(repeat(' ',tab_size));    last_tab_index=tab_index + 1;  }  if (last_tab_index == 0) {    return line;  }  result.append(line.substring(last_tab_index));  return result.toString();}  }
class C{  private boolean tryToUpdateExistingHeapNode(AStarNode parent,AStarNode checkedOne){  Iterator<AStarNode> iter=queue.iterator();  AStarNode itNode;  while (iter.hasNext()) {    itNode=iter.next();    if (itNode.equals(checkedOne)) {      itNode.updateDistance(checkedOne.getG(),parent);      return true;    }  }  return false;}  }
class C{  public Process exec(String[] progArray,String[] envp) throws java.io.IOException {  return exec(progArray,envp,null);}  }
class C{  public String providersTipText(){  return "The dataset providers to use.";}  }
class C{  public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {  ConfigurationProvider confProvider=beanFactory.getBean(ConfigurationProvider.class);  for (  String name : beans.keySet()) {    try {      HierarchicalConfiguration config=confProvider.getConfiguration(name);      String repClass=config.getString("[@class]");      BeanDefinitionRegistry registry=(BeanDefinitionRegistry)beanFactory;      BeanDefinition def=BeanDefinitionBuilder.genericBeanDefinition(repClass).getBeanDefinition();      registry.registerBeanDefinition(name,def);      String aliases=beans.get(name);      String[] aliasArray=aliases.split(",");      if (aliasArray != null) {        for (        String anAliasArray : aliasArray) {          String alias=anAliasArray.trim();          if (alias.length() > 0) {            registry.registerAlias(name,anAliasArray);          }        }      }    } catch (    ConfigurationException e) {      throw new FatalBeanException("Unable to parse configuration for bean " + name,e);    }  }}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  public static JsonMappingException wrapWithPath(Throwable src,Object refFrom,String refFieldName){  return wrapWithPath(src,new Reference(refFrom,refFieldName));}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < this.length()) {    this.myArrayList.set(index,value);  } else {    while (index != this.length()) {      this.put(JSONObject.NULL);    }    this.put(value);  }  return this;}  }
class C{  public static Spinner createTime(int min,int max,int currentValue,int step,boolean twentyFourHours,boolean showSeconds){  Spinner s=new Spinner(new SpinnerNumberModel(min,max,currentValue,step),DateTimeRenderer.createTimeRenderer(twentyFourHours,showSeconds));  return s;}  }
class C{  protected PositionIterator(Iterable<? extends Position> positions,double interval,Globe globe){  if (positions == null) {    String message=Logging.getMessage("nullValue.PositionsListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (globe == null) {    String message=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (interval <= 0) {    String message=Logging.getMessage("generic.LengthIsInvalid");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.interval=Angle.fromRadians(interval / globe.getRadius());  this.positions=positions.iterator();  this.nextControlPosition=this.positions.next();}  }
class C{  public void push(int x){  s.push(x);  if (minStack.isEmpty() || x <= minStack.peek()) {    minStack.push(x);  }}  }
class C{  @Override public boolean addOutputSensor(String sensorName,int state){  OutputSensor outputSensor=new OutputSensor(sensorName);  if (!outputSensor.setState(state)) {    return false;  }  _outputSensorList.add(outputSensor);  return true;}  }
class C{  public String convertSWFToHTML(URL in) throws Exception {  HttpURLConnection conn=(HttpURLConnection)in.openConnection();  conn.setAllowUserInteraction(false);  conn.setRequestProperty("User-agent","www.tumba.pt");  conn.setInstanceFollowRedirects(true);  conn.connect();  return convertSWFToHTML(conn.getInputStream());}  }
class C{  public String toString(){  return schema;}  }
class C{  private void finish(){  mmLastY=0;  mRunning=false;  removeCallbacks(this);  if (!mAbort) {    autoScrollFinished();  }}  }
class C{  public ImmutableArray(final Type[] array){  super(array);}  }
class C{  public static String toUnderlineName(String s){  if (s == null) {    return null;  }  StringBuilder sb=new StringBuilder();  boolean upperCase=false;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    boolean nextUpperCase=true;    if (i < (s.length() - 1)) {      nextUpperCase=Character.isUpperCase(s.charAt(i + 1));    }    if ((i >= 0) && Character.isUpperCase(c)) {      if (!upperCase || !nextUpperCase) {        if (i > 0) {          sb.append(GlobalConstants.UNDERLINE);        }      }      upperCase=true;    } else {      upperCase=false;    }    sb.append(Character.toLowerCase(c));  }  return sb.toString();}  }
class C{  public static void run(){  singleton=new APICallSpecialization();  singleton.findSpecializedMethods();}  }
class C{  public boolean scheduleImmediate(boolean immediatelyAfter,Steppable event){  return _scheduleImmediate(immediatelyAfter,event);}  }
class C{  protected void fireConnectionError(SQLException ex){  String sqlState=ex.getSQLState();  if (isFatalState(sqlState)) {    fireFatalConnectionError(ex);  }}  }
class C{  public void testWrite1() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestOutputStream tos=new TestOutputStream();  CipherOutputStream cos=new CipherOutputStream(tos,new NullCipher());  for (int i=0; i < data.length; i++) {    cos.write(data[i]);  }  cos.flush();  byte[] result=tos.toByteArray();  if (!Arrays.equals(result,data)) {    fail("CipherOutputStream wrote incorrect data.");  }}  }
class C{  public boolean isOneShot(){  return getType().hasFlag(WeaponType.F_ONESHOT);}  }
class C{  public Matrix4 avg(Matrix4[] t,float[] w){  tmpVec.set(t[0].getScale(tmpUp).scl(w[0]));  quat.set(t[0].getRotation(quat2).exp(w[0]));  tmpForward.set(t[0].getTranslation(tmpUp).scl(w[0]));  for (int i=1; i < t.length; i++) {    tmpVec.add(t[i].getScale(tmpUp).scl(w[i]));    quat.mul(t[i].getRotation(quat2).exp(w[i]));    tmpForward.add(t[i].getTranslation(tmpUp).scl(w[i]));  }  quat.nor();  setToScaling(tmpVec);  rotate(quat);  setTranslation(tmpForward);  return this;}  }
class C{  private void specialisedPredicates(){  DoublePredicate doublePredicate=null;  LongPredicate longPredicate=null;}  }
class C{  private static void d_uavar(double[] a,double[] c,int m,int n,CM_COV_Object cbuff,CM cm,int rl,int ru) throws DMLRuntimeException {  int len=Math.min((ru - rl) * n,a.length);  var(a,rl * n,len,cbuff,cm);  c[0]=cbuff.getRequiredResult(AggregateOperationTypes.VARIANCE);  c[1]=cbuff.mean._sum;  c[2]=cbuff.w;  c[3]=cbuff.m2._correction;  c[4]=cbuff.mean._correction;}  }
class C{  @Override public Object call(Context cx,Scriptable scope,Scriptable thisObj,Object[] args){  if (!ScriptRuntime.hasTopCall(cx)) {    return ScriptRuntime.doTopCall(this,cx,scope,thisObj,args);  }  return Interpreter.interpret(this,cx,scope,thisObj,args);}  }
class C{  public UriBuilder uriTemplate(String uriTemplate){  Matcher match=uriPattern.matcher(uriTemplate);  if (match.matches()) {    scheme(match.group(1));    String host=match.group(2);    if (host != null) {      int at=host.indexOf('@');      if (at > -1) {        String user=host.substring(0,at);        host=host.substring(at + 1);        userInfo(user);      }    }    host(host);    if (match.group(4) != null)     port(Integer.valueOf(match.group(4)));    if (match.group(5) != null)     path(match.group(5));    if (match.group(7) != null)     replaceQuery(match.group(7));    if (match.group(9) != null)     fragment(match.group(9));    return this;  }  match=sspPattern.matcher(uriTemplate);  if (match.matches()) {    scheme(match.group(1));    schemeSpecificPart(match.group(2));    return this;  }  match=pathPattern.matcher(uriTemplate);  if (match.matches()) {    if (match.group(1) != null)     path(match.group(1));    if (match.group(3) != null)     replaceQuery(match.group(3));    if (match.group(5) != null)     fragment(match.group(5));    return this;  }  throw new RuntimeException("Illegal uri template: " + uriTemplate);}  }
class C{  public static Map<String,String> convertBundleToMap(ResourceBundle rb){  Map<String,String> map=new HashMap<String,String>();  Enumeration<String> keys=rb.getKeys();  while (keys.hasMoreElements()) {    String key=keys.nextElement();    map.put(key,rb.getString(key));  }  return map;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public synchronized List<Vertex> findAllQuery(String jpql,Map parameters,int pageSize,int page){  try {    Query query=this.entityManager.createQuery(jpql);    setHints(query);    query.setFirstResult(pageSize * page);    query.setMaxResults(pageSize);    for (    Map.Entry parameter : (Set<Map.Entry>)parameters.entrySet()) {      query.setParameter((String)parameter.getKey(),parameter.getValue());    }    return query.getResultList();  } catch (  Exception badQuery) {    this.bot.log(this,badQuery);    return new ArrayList<Vertex>();  }}  }
class C{  public void unblockContact(){  Log.i(TAG,"testUnblockContact");  try {    contactApi.unblockContact(remote);    RcsContact contact=contactApi.getRcsContact(remote);    assertFalse(contact.isBlocked());  } catch (  RcsServiceNotAvailableException e) {    Log.e(TAG,"RCS service not available");  }catch (  RcsPersistentStorageException e) {    Log.e(TAG,"RCS service not available");  }catch (  RcsGenericException e) {    Log.e(TAG,"Unexpected error",e);  }}  }
class C{  public boolean hasPrimary(){  return super.hasAttribute(PRIMARY);}  }
class C{  @Override public boolean isNumerical(){  return false;}  }
class C{  public void warn(Object message){}  }
class C{  private static void createRegion() throws Exception {  HARegionQueueDUnitTest test=new HARegionQueueDUnitTest();  cache=test.createCache();  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setDataPolicy(DataPolicy.REPLICATE);  HARegion.getInstance("HARegionQueueDUnitTest_region",(GemFireCacheImpl)cache,null,factory.create());}  }
class C{  final void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE| ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (methodParameters != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      size+=8 + ctanns.getSize();    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      size+=8 + ictanns.getSize();    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));      ctanns.put(out);    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));      ictanns.put(out);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (methodParameters != null) {    out.putShort(cw.newUTF8("MethodParameters"));    out.putInt(methodParameters.length + 1).putByte(methodParametersCount);    out.putByteArray(methodParameters.data,0,methodParameters.length);  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public boolean isEnabled(){  return mEnabled;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @SuppressWarnings("unused") public static byte[] selectCodeTab(byte cp){  byte[] result=new byte[3];  result[0]=ESC;  result[1]=116;  result[2]=cp;  return result;}  }
class C{  public void add(Coordinate pt){  add(pt,true);}  }
class C{  @SuppressWarnings({"unchecked"}) public <K>K key(){  return (K)key;}  }
class C{  public ActivityObject(ActivityObject parent){  this.id=parent.getId();  this.projectId=parent.getProjectId();  this.companyId=parent.getCompanyId();  this.subject=parent.getSubject();  this.target=parent.getTarget();  this.content=parent.getContent();  this.creatorId=parent.getCreatorId();  this.action=parent.getAction();  this.attachId=parent.getAttachId();  this.attachType=parent.getAttachType();  this.created=parent.getCreated();  this.creatorName=parent.getCreatorName();  this.projectName=parent.getProjectName();  this.creatorAvatar=parent.getCreatorAvatar();  this.trash=parent.getTrash();}  }
class C{  public static ExecutionSystem newExecutionSystem(URI uri,Map<String,?> env,ClassLoader loader) throws IOException {  List<ExecutionSystemProvider> providers=ExecutionSystemProvider.installedProviders();  return new SchemeProviderFinder<>(ExecutionSystemProvider.class,providers).setFallbackLoader(loader).findOrThrow(uri.getScheme()).newExecutionSystem(uri,env);}  }
class C{  public double sumOfWeights(){  double sum=0;  for (int i=0; i < numInstances(); i++) {    sum+=instance(i).weight();  }  return sum;}  }
class C{  private void checkWriterFuture() throws InterruptedException, ExecutionException {  if (wf.isDone()) {    wf.get();  }}  }
class C{  private static boolean evalDateOp(final IRepFilterBean filterBean,final long value){  final long fvalue=((Date)filterBean.getValue()).getTime();  final long accuracy=1000;switch ((Operator)filterBean.getOperator()) {case EQUAL:    return Math.abs(value - fvalue) <= accuracy;case GREATER_THAN:case GREATER_THAN_OR_EQUAL:  return value - accuracy > fvalue;case LESS_THAN:case LESS_THAN_OR_EQUAL:return value + accuracy < fvalue;case NOT_EQUAL:return Math.abs(value - fvalue) > accuracy;default :throw new RuntimeException("Unhandled operator: " + filterBean.getOperator());}}  }
class C{  public Set adviseCacheOp(){  return adviseAllEventsOrCached(true);}  }
class C{  public Observable<BeerSearchResult> searchBeers(String query){  return routes.searchBeers(KEY,Session.get().getUserId(),Normalizer.get().normalizeSearchQuery(query)).flatMapIterable(null);}  }
class C{  public static <K,V>ConcurrentHashMap<K,V> concurrentHashMap(int initialCapacity,float loadFactor){  return new ConcurrentHashMap<K,V>(initialCapacity);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:05.827 -0500",hash_original_method="F9B960B049B919C822FEECA2E3BD7537",hash_generated_method="0F244610EE4E1DE2BBEE8C7AC9256CCA") @Override public StringBuffer format(long value,StringBuffer buffer,FieldPosition field){  return format((double)value,buffer,field);}  }
class C{  public static byte[] toBytes(char[] chars){  CharBuffer charBuffer=CharBuffer.wrap(chars);  ByteBuffer byteBuffer=Charset.forName(PanboxConstants.STANDARD_CHARSET).encode(charBuffer);  byte[] bytes=Arrays.copyOfRange(byteBuffer.array(),byteBuffer.position(),byteBuffer.limit());  eraseChars(charBuffer.array());  Arrays.fill(byteBuffer.array(),(byte)0);  return bytes;}  }
class C{  @Override protected final Address allocSlowOnce(int bytes,int align,int offset){  Address ptr=space.getSpace(hot,copy,lineUseCount);  if (ptr.isZero()) {    lineUseCount=0;    return ptr;  }  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(Block.isAligned(ptr));  lineUseCount=LINES_IN_BLOCK;  if (requestForLarge) {    largeCursor=ptr;    largeLimit=ptr.plus(BYTES_IN_BLOCK);  } else {    cursor=ptr;    limit=ptr.plus(BYTES_IN_BLOCK);  }  return alloc(bytes,align,offset);}  }
class C{  public Options addOption(Option opt){  String key=opt.getKey();  if (opt.hasLongOpt()) {    longOpts.put(opt.getLongOpt(),opt);  }  if (opt.isRequired()) {    if (requiredOpts.contains(key)) {      requiredOpts.remove(requiredOpts.indexOf(key));    }    requiredOpts.add(key);  }  shortOpts.put(key,opt);  return this;}  }
class C{  public void trimToSize(){  modCount++;  int oldCapacity=elementData.length;  if (size < oldCapacity) {    Object oldData[]=elementData;    elementData=(E[])new Object[size];    System.arraycopy(oldData,0,elementData,0,size);  }}  }
class C{  public static <K,V>ImmutableSetMultimap<K,V> of(K k1,V v1){  ImmutableSetMultimap.Builder<K,V> builder=ImmutableSetMultimap.builder();  builder.put(k1,v1);  return builder.build();}  }
class C{  public List<URI> findVolumesInReplicationGroup(StorageSystem storage,CIMObjectPath replicationGroupPath,List<URI> volumeURIList) throws Exception {  List<URI> returnVolumes=new ArrayList<URI>();  CloseableIterator<CIMObjectPath> volumePathItr=null;  try {    List<BlockObject> bos=new ArrayList<>();    for (    URI boURI : volumeURIList) {      bos.add(BlockObject.fetch(_dbClient,boURI));    }    volumePathItr=getAssociatorNames(storage,replicationGroupPath,null,SmisConstants.CIM_STORAGE_VOLUME,null,null);    while (volumePathItr.hasNext()) {      CIMObjectPath volumePath=volumePathItr.next();      for (      BlockObject bo : bos) {        if (bo.getNativeGuid().equalsIgnoreCase(getVolumeNativeGuid(volumePath))) {          returnVolumes.add(bo.getId());        }      }    }    return returnVolumes;  }  finally {    closeCIMIterator(volumePathItr);  }}  }
class C{  public Boolean isPaused(){  return paused;}  }
class C{  public ECIESKeyEncapsulation(DerivationFunction kdf,SecureRandom rnd){  this.kdf=kdf;  this.rnd=rnd;  this.CofactorMode=false;  this.OldCofactorMode=false;  this.SingleHashMode=false;}  }
class C{  private static int checkTypeArgument(final String signature,int pos){  char c=getChar(signature,pos);  if (c == '*') {    return pos + 1;  } else   if (c == '+' || c == '-') {    pos++;  }  return checkFieldTypeSignature(signature,pos);}  }
class C{  public Response addUserToGroups(String username,UserGroupsEntity userGroupsEntity){  return restClient.post("users/" + username + "/groups/",userGroupsEntity,new HashMap<String,String>());}  }
class C{  public OffMultilineCommentReplacer(IComment comment){  this(comment,false);}  }
class C{  protected DefaultTransformListHandler(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.replaceData(40,3,"ABC");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public static void writeConfigFile(OutputStream outputStream,Class<?>[] classes) throws SQLException, IOException {  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(outputStream),4096);  try {    writeHeader(writer);    for (    Class<?> clazz : classes) {      writeConfigForTable(writer,clazz);    }    System.out.println("Done.");  }  finally {    writer.close();  }}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10,E e11){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11);}  }
class C{  public void execute(String sql){  try {    stat.execute(sql);  } catch (  SQLException e) {    throw convert(e);  }}  }
class C{  protected void init(String owner,MethodNode m) throws AnalyzerException {}  }
class C{  public void addRule(String rule){  if (rule != null) {    final String baseUnitsDisable="BASE_SIZE_DISABLE";    final String baseUnits="BASE_SIZE ";    final String w3cLengthUnitsEnable="W3C_LENGTH_UNITS_ENABLE";    final String w3cLengthUnitsDisable="W3C_LENGTH_UNITS_DISABLE";    if (rule == baseUnitsDisable) {      sizeMap=sizeMapDefault;    } else     if (rule.startsWith(baseUnits)) {      rebaseSizeMap(Integer.parseInt(rule.substring(baseUnits.length())));    } else     if (rule == w3cLengthUnitsEnable) {      w3cLengthUnits=true;    } else     if (rule == w3cLengthUnitsDisable) {      w3cLengthUnits=false;    } else {      CssParser parser=new CssParser();      try {        parser.parse(getBase(),new StringReader(rule),false,false);      } catch (      IOException ioe) {      }    }  }}  }
class C{  public T caseStringLit_(StringLit_ object){  return null;}  }
class C{  public WhitenedPCA(DataSet dataSet){  SingularValueDecomposition svd=getSVD(dataSet);  setRegularization(svd);  setDimensions(svd.getRank());  setUpTransform(svd);}  }
class C{  void inheritDomains(OwlProperty prop){  for (  OwlClass superclass : this.superClasses) {    prop.addDomain(superclass);  }}  }
class C{  @Override public void clearActiveSession(){  restoreAllSessionsIfNecessary();  if (activeSessionRef.get() != null) {    clearSession(activeSessionRef.get().getId());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.738 -0500",hash_original_method="5CB9E6037B66ED3BBABE76506745A953",hash_generated_method="7CF64B31DF0C0EACE880634D44CE7E8D") public Reader retrieveArticle(String articleId,ArticlePointer pointer) throws IOException {  return __retrieve(NNTPCommand.ARTICLE,articleId,pointer);}  }
class C{  public static boolean rmidRunning(int port){  int allowedNotReady=50;  int connectionRefusedExceptions=0;  final long rmidWaitingStepTime=100;  for (int i=0; i <= 74; i++) {    try {      LocateRegistry.getRegistry(port).lookup(SYSTEM_NAME);      mesg("Activation System available after " + (i * rmidWaitingStepTime) + " milliseconds");      return true;    } catch (    java.rmi.ConnectException e) {      mesg("Remote connection refused after " + (i * rmidWaitingStepTime) + " milliseconds");      if ((connectionRefusedExceptions++) >= allowedNotReady) {        return false;      }    }catch (    java.rmi.NoSuchObjectException nsoe) {      mesg("Activation System still unavailable after more than " + (i * rmidWaitingStepTime) + " milliseconds");    }catch (    NotBoundException e) {      return false;    }catch (    Exception e) {      mesg("caught an exception trying to" + " start rmid, last exception was: " + e.getMessage());      e.printStackTrace();    }    try {      Thread.sleep(100);    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();      mesg("Thread interrupted while checking if Activation System is running. Exiting check");      return false;    }  }  return false;}  }
class C{  void beginHandshake() throws SSLException {  engine.beginHandshake();}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public SearchBuilder filter(ConditionBuilder<?,?>... builders){  filter.addAll(Arrays.asList(builders));  return this;}  }
class C{  protected CompletionScorer(final CompletionWeight weight,final NRTSuggester suggester,final LeafReader reader,final Bits filterDocs,final boolean filtered,final Automaton automaton) throws IOException {  this.weight=weight;  this.suggester=suggester;  this.reader=reader;  this.automaton=automaton;  this.filtered=filtered;  this.filterDocs=filterDocs;}  }
class C{  private void generateImportError(ActionError error,ActionMapping mappings,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  errors.add(ActionErrors.GLOBAL_MESSAGE,error);  obtenerErrores(request,true).add(errors);  setReturnActionFordward(request,mappings.findForward("import_udocs_relacion"));}  }
class C{  private void putResize(long key,V value){  if (key == 0) {    zeroValue=value;    hasZeroValue=true;    return;  }  int index1=(int)(key & mask);  long key1=keyTable[index1];  if (key1 == EMPTY) {    keyTable[index1]=key;    valueTable[index1]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  int index2=hash2(key);  long key2=keyTable[index2];  if (key2 == EMPTY) {    keyTable[index2]=key;    valueTable[index2]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  int index3=hash3(key);  long key3=keyTable[index3];  if (key3 == EMPTY) {    keyTable[index3]=key;    valueTable[index3]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  push(key,value,index1,key1,index2,key2,index3,key3);}  }
class C{  private OptionalDouble(double value){  this.isPresent=true;  this.value=value;}  }
class C{  public Response(String status,String mimeType,String txt){  this.status=status;  this.mimeType=mimeType;  this.data=new ByteArrayInputStream(txt.getBytes());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.631 -0400",hash_original_method="92F5494CF4D9D109324ADFB75FCABD0E",hash_generated_method="743547C659F4AEF6D23A61E94065CC20") public AgeFileFilter(long cutoff){  this(cutoff,true);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:08.565 -0500",hash_original_method="BC7BB9D16048D8ABD4B4822412C22F80",hash_generated_method="BB768A6DB07301C01C1E1BDACA468A39") public TextAppearanceSpan(String family,int style,int size,ColorStateList color,ColorStateList linkColor){  mTypeface=family;  mStyle=style;  mTextSize=size;  mTextColor=color;  mTextColorLink=linkColor;}  }
class C{  private boolean connectEnumSuperclass(){  SourceTypeBinding sourceType=this.referenceContext.binding;  ReferenceBinding rootEnumType=getJavaLangEnum();  if ((rootEnumType.tagBits & TagBits.HasMissingType) != 0) {    sourceType.tagBits|=TagBits.HierarchyHasProblems;    sourceType.superclass=rootEnumType;    return false;  }  boolean foundCycle=detectHierarchyCycle(sourceType,rootEnumType,null);  TypeVariableBinding[] refTypeVariables=rootEnumType.typeVariables();  if (refTypeVariables == Binding.NO_TYPE_VARIABLES) {    problemReporter().nonGenericTypeCannotBeParameterized(0,null,rootEnumType,new TypeBinding[]{sourceType});    return false;  } else   if (1 != refTypeVariables.length) {    problemReporter().incorrectArityForParameterizedType(null,rootEnumType,new TypeBinding[]{sourceType});    return false;  }  ParameterizedTypeBinding superType=environment().createParameterizedType(rootEnumType,new TypeBinding[]{environment().convertToRawType(sourceType,false)},null);  sourceType.tagBits|=(superType.tagBits & TagBits.HierarchyHasProblems);  sourceType.superclass=superType;  if (refTypeVariables[0].boundCheck(superType,sourceType) != TypeConstants.OK) {    problemReporter().typeMismatchError(rootEnumType,refTypeVariables[0],sourceType,null);  }  return !foundCycle;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ReplicatorRuntime(TungstenProperties properties,OpenReplicatorContext context,ReplicatorMonitor monitor){  this.properties=new TungstenProperties(properties.map());  this.properties.trim();  this.context=context;  this.replicatorMonitor=monitor;}  }
class C{  public void writeTo(String zoneID,DataOutput out) throws IOException {  DateTimeZone zone=toDateTimeZone(zoneID,false);  if (zone instanceof FixedDateTimeZone) {    out.writeByte('F');    out.writeUTF(zone.getNameKey(0));    writeMillis(out,zone.getOffset(0));    writeMillis(out,zone.getStandardOffset(0));  } else {    if (zone instanceof CachedDateTimeZone) {      out.writeByte('C');      zone=((CachedDateTimeZone)zone).getUncachedZone();    } else {      out.writeByte('P');    }    ((PrecalculatedZone)zone).writeTo(out);  }}  }
class C{  public String fetchWeatherForecast(String city,Integer userId,String language,String units){  String cityFound;  String responseToUser;  try {    String completURL=BASEURL + FORECASTPATH + "?"+ getCityQuery(city)+ FORECASTPARAMS.replace("@language@",language).replace("@units@",units)+ APIIDEND;    CloseableHttpClient client=HttpClientBuilder.create().setSSLHostnameVerifier(new NoopHostnameVerifier()).build();    HttpGet request=new HttpGet(completURL);    CloseableHttpResponse response=client.execute(request);    HttpEntity ht=response.getEntity();    BufferedHttpEntity buf=new BufferedHttpEntity(ht);    String responseString=EntityUtils.toString(buf,"UTF-8");    JSONObject jsonObject=new JSONObject(responseString);    BotLogger.info(LOGTAG,jsonObject.toString());    if (jsonObject.getInt("cod") == 200) {      cityFound=jsonObject.getJSONObject("city").getString("name") + " (" + jsonObject.getJSONObject("city").getString("country")+ ")";      saveRecentWeather(userId,cityFound,jsonObject.getJSONObject("city").getInt("id"));      responseToUser=String.format(LocalisationService.getInstance().getString("weatherForcast",language),cityFound,convertListOfForecastToString(jsonObject,language,units,true));    } else {      BotLogger.warn(LOGTAG,jsonObject.toString());      responseToUser=LocalisationService.getInstance().getString("cityNotFound",language);    }  } catch (  Exception e) {    BotLogger.error(LOGTAG,e);    responseToUser=LocalisationService.getInstance().getString("errorFetchingWeather",language);  }  return responseToUser;}  }
class C{  protected SizeRequirements calculateMajorAxisRequirements(int axis,SizeRequirements r){  float min=0;  float pref=0;  float max=0;  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    min+=v.getMinimumSpan(axis);    pref+=v.getPreferredSpan(axis);    max+=v.getMaximumSpan(axis);  }  if (r == null) {    r=new SizeRequirements();  }  r.alignment=0.5f;  r.minimum=(int)min;  r.preferred=(int)pref;  r.maximum=(int)max;  return r;}  }
class C{  public static String resourceToString(final String resource) throws IOException {  final InputStream str=Resources.getResourceAsStream(resource);  if (str == null) {    throw new RuntimeException("Unable to find resource:" + resource);  }  final String res=FileUtils.streamToString(str);  str.close();  return res;}  }
class C{  @Override public <T,R>String translate(QuerySelect<T,R> query){  return translateSelectQuery(query);}  }
class C{  public static boolean isTargetClassName(String className){  if (!Properties.TARGET_CLASS_PREFIX.isEmpty() && className.startsWith(Properties.TARGET_CLASS_PREFIX)) {    try {      Class<?> clazz=Class.forName(className);      return !CoverageAnalysis.isTest(clazz);    } catch (    ClassNotFoundException e) {      logger.info("Could not find class " + className);    }  }  if (className.equals(Properties.TARGET_CLASS) || className.startsWith(Properties.TARGET_CLASS + "$")) {    return true;  }  if (targetClasses != null && targetClasses.contains(className)) {    return true;  }  return false;}  }
class C{  public long restartTime(long now){  if (mNumFailed == 0) {    return now;  }  if (mRetryAfter > 0) {    return mLastMod + mRetryAfter;  }  return mLastMod + Constants.RETRY_FIRST_DELAY * (1000 + mFuzz) * (1 << (mNumFailed - 1));}  }
class C{  private void throwServicePolicyNoProtectionException(){  throw APIException.badRequests.protectionNotSpecifiedInVirtualPool();}  }
class C{  public static BigInteger hash(int version,BigInteger a,BigInteger b) throws SMException {  try {    MessageDigest sha256=MessageDigest.getInstance("SHA-256");    sha256.update((byte)version);    sha256.update(SerializationUtils.writeMpi(a));    if (b != null)     sha256.update(SerializationUtils.writeMpi(b));    return new BigInteger(1,sha256.digest());  } catch (  NoSuchAlgorithmException e) {    throw new SMException("cannot find SHA-256");  }catch (  IOException e) {    throw new SMException("cannot serialize bigint");  }}  }
class C{  public void addShadow(){  setLayerType(LAYER_TYPE_SOFTWARE,paintBorder);  paintBorder.setShadowLayer(4.0f,0.0f,2.0f,Color.BLACK);}  }
class C{  public void popCurrentTemplateName(){  templateNameStack.pop();  return;}  }
class C{  public void inlinePrintNoQuotes(Object o){  if (forceincomments) {    commentPrint(o);    return;  }  if (inline.length() > 0) {    inline.append(SEPARATOR);  }  String str=o.toString().replace(NEWLINE," ");  str=str.replace("\\","\\\\").replace("\"","\\\"");  inline.append(str);}  }
class C{  public boolean httpOnly(){  return httpOnly;}  }
class C{  public void clearAllConnectionsFor(BlockPos node,World world,boolean doDrops){  if (getMultimap(world.provider.getDimension()).containsKey(node))   getMultimap(world.provider.getDimension()).get(node).clear();  IImmersiveConnectable iic=toIIC(node,world);  if (iic != null)   iic.removeCable(null);  for (  Set<Connection> conl : getMultimap(world.provider.getDimension()).values()) {    Iterator<Connection> it=conl.iterator();    while (it.hasNext()) {      Connection con=it.next();      if (node.equals(con.start) || node.equals(con.end)) {        it.remove();        IImmersiveConnectable other;        if (node.equals(con.start))         other=toIIC(con.end,world); else         other=toIIC(con.start,world);        if (iic != null)         iic.removeCable(con);        if (other != null)         other.removeCable(con);        if (node.equals(con.end)) {          double dx=node.getX() + .5 + Math.signum(con.start.getX() - con.end.getX());          double dy=node.getY() + .5 + Math.signum(con.start.getY() - con.end.getY());          double dz=node.getZ() + .5 + Math.signum(con.start.getZ() - con.end.getZ());          if (doDrops && world.getGameRules().getBoolean("doTileDrops"))           world.spawnEntityInWorld(new EntityItem(world,dx,dy,dz,con.cableType.getWireCoil(con)));          if (world.isBlockLoaded(con.start))           world.addBlockEvent(con.start,world.getBlockState(con.start).getBlock(),-1,0);        } else         if (world.isBlockLoaded(con.end))         world.addBlockEvent(con.end,world.getBlockState(con.end).getBlock(),-1,0);      }    }  }  if (world.isBlockLoaded(node))   world.addBlockEvent(node,world.getBlockState(node).getBlock(),-1,0);  IESaveData.setDirty(world.provider.getDimension());  resetCachedIndirectConnections();}  }
class C{  public static boolean isAncestorLocal(Declaration decl){  Scope container=decl.getContainer();  while (container != null) {    if (container instanceof FunctionOrValue || container instanceof ControlBlock || container instanceof NamedArgumentList) {      return true;    }    container=container.getContainer();  }  return false;}  }
class C{  protected void processChange(Database currentModel,Database desiredModel,AddPrimaryKeyChange change,StringBuilder ddl){  writeExternalPrimaryKeysCreateStmt(change.getChangedTable(),change.getPrimaryKeyColumns(),ddl);  change.apply(currentModel,delimitedIdentifierModeOn);}  }
class C{  public static Typeface robotoThinItalic(Context context){  sRobotoThinItalic=getFontFromRes(R.raw.roboto_thinitalic,context);  return sRobotoThinItalic;}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  protected boolean scanStartElementAfterName() throws IOException, XNIException {  String rawname=fElementQName.rawname;  if (fBindNamespaces) {    fNamespaceContext.pushContext();    if (fScannerState == SCANNER_STATE_ROOT_ELEMENT) {      if (fPerformValidation) {        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_GRAMMAR_NOT_FOUND",new Object[]{rawname},XMLErrorReporter.SEVERITY_ERROR);        if (fDoctypeName == null || !fDoctypeName.equals(rawname)) {          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"RootElementTypeMustMatchDoctypedecl",new Object[]{fDoctypeName,rawname},XMLErrorReporter.SEVERITY_ERROR);        }      }    }  }  fCurrentElement=fElementStack.pushElement(fElementQName);  boolean empty=false;  fAttributes.removeAllAttributes();  do {    int c=fEntityScanner.peekChar();    if (c == '>') {      fEntityScanner.scanChar();      break;    } else     if (c == '/') {      fEntityScanner.scanChar();      if (!fEntityScanner.skipChar('>')) {        reportFatalError("ElementUnterminated",new Object[]{rawname});      }      empty=true;      break;    } else     if (!isValidNameStartChar(c) || !fSawSpace) {      reportFatalError("ElementUnterminated",new Object[]{rawname});    }    scanAttribute(fAttributes);    fSawSpace=fEntityScanner.skipSpaces();  } while (true);  if (fBindNamespaces) {    if (fElementQName.prefix == XMLSymbols.PREFIX_XMLNS) {      fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"ElementXMLNSPrefix",new Object[]{fElementQName.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);    }    String prefix=fElementQName.prefix != null ? fElementQName.prefix : XMLSymbols.EMPTY_STRING;    fElementQName.uri=fNamespaceContext.getURI(prefix);    fCurrentElement.uri=fElementQName.uri;    if (fElementQName.prefix == null && fElementQName.uri != null) {      fElementQName.prefix=XMLSymbols.EMPTY_STRING;      fCurrentElement.prefix=XMLSymbols.EMPTY_STRING;    }    if (fElementQName.prefix != null && fElementQName.uri == null) {      fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"ElementPrefixUnbound",new Object[]{fElementQName.prefix,fElementQName.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);    }    int length=fAttributes.getLength();    for (int i=0; i < length; i++) {      fAttributes.getName(i,fAttributeQName);      String aprefix=fAttributeQName.prefix != null ? fAttributeQName.prefix : XMLSymbols.EMPTY_STRING;      String uri=fNamespaceContext.getURI(aprefix);      if (fAttributeQName.uri != null && fAttributeQName.uri == uri) {        continue;      }      if (aprefix != XMLSymbols.EMPTY_STRING) {        fAttributeQName.uri=uri;        if (uri == null) {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributePrefixUnbound",new Object[]{fElementQName.rawname,fAttributeQName.rawname,aprefix},XMLErrorReporter.SEVERITY_FATAL_ERROR);        }        fAttributes.setURI(i,uri);      }    }    if (length > 1) {      QName name=fAttributes.checkDuplicatesNS();      if (name != null) {        if (name.uri != null) {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributeNSNotUnique",new Object[]{fElementQName.rawname,name.localpart,name.uri},XMLErrorReporter.SEVERITY_FATAL_ERROR);        } else {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributeNotUnique",new Object[]{fElementQName.rawname,name.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);        }      }    }  }  if (fDocumentHandler != null) {    if (empty) {      fMarkupDepth--;      if (fMarkupDepth < fEntityStack[fEntityDepth - 1]) {        reportFatalError("ElementEntityMismatch",new Object[]{fCurrentElement.rawname});      }      fDocumentHandler.emptyElement(fElementQName,fAttributes,null);      if (fBindNamespaces) {        fNamespaceContext.popContext();      }      fElementStack.popElement(fElementQName);    } else {      fDocumentHandler.startElement(fElementQName,fAttributes,null);    }  }  if (DEBUG_CONTENT_SCANNING)   System.out.println("<<< scanStartElementAfterName(): " + empty);  return empty;}  }
class C{  public static SimpleScheduleBuilder repeatHourlyForTotalCount(int count){  if (count < 1)   throw new IllegalArgumentException("Total count of firings must be at least one! Given count: " + count);  return simpleSchedule().withIntervalInHours(1).withRepeatCount(count - 1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.619 -0400",hash_original_method="D965BC25FEFA85E7AE63C2091AC1AA93",hash_generated_method="C10458EEF3FB564B7915B3AE25B019F7") public void undiscoverable(BluetoothAdapter adapter){  int mask=BluetoothReceiver.SCAN_MODE_CONNECTABLE_FLAG;  if (!adapter.isEnabled()) {    fail("undiscoverable() bluetooth not enabled");  }  int scanMode=adapter.getScanMode();  if (scanMode == BluetoothAdapter.SCAN_MODE_CONNECTABLE) {    return;  }  BluetoothReceiver receiver=getBluetoothReceiver(mask);  assertEquals(BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE,scanMode);  long start=System.currentTimeMillis();  assertTrue(adapter.setScanMode(BluetoothAdapter.SCAN_MODE_CONNECTABLE));  while (System.currentTimeMillis() - start < DISCOVERABLE_UNDISCOVERABLE_TIMEOUT) {    scanMode=adapter.getScanMode();    if (scanMode == BluetoothAdapter.SCAN_MODE_CONNECTABLE && (receiver.getFiredFlags() & mask) == mask) {      writeOutput(String.format("undiscoverable() completed in %d ms",(receiver.getCompletedTime() - start)));      removeReceiver(receiver);      return;    }    sleep(POLL_TIME);  }  int firedFlags=receiver.getFiredFlags();  removeReceiver(receiver);  fail(String.format("undiscoverable() timeout: scanMode=%d (expected %d), flags=0x%x " + "(expected 0x%x)",scanMode,BluetoothAdapter.SCAN_MODE_CONNECTABLE,firedFlags,mask));}  }
class C{  private void notifyNetworkConnectivityChange(){synchronized (mConnectivityMonitor) {    Log.v(LOG_TAG,"notify network connectivity changed");    mConnectivityMonitor.notifyAll();  }}  }
class C{  public void addValue(String variable,Value val){  if (!range.containsKey(variable)) {    range.put(variable,new HashSet<Value>());  }  range.get(variable).add(val);}  }
class C{  void load(){  String url=getUrl();  if (url != null) {    RunProxy proxy=new RunProxy(debugGui,RunProxy.LOAD_FILE);    proxy.fileName=url;    proxy.text=sourceInfo.source();    new Thread(proxy).start();  }}  }
class C{  public BaseShareRequest(String requestUrl,IOneDriveClient client,List<Option> options){  super(requestUrl,client,options,Share.class);}  }
class C{  public static void commitAndCloseQuietly(Connection conn){  try {    commitAndClose(conn);  } catch (  SQLException e) {  }}  }
class C{  @Override public boolean isRowAvailable(){  if (arrayFromInner == null) {    return (false);  } else   if ((index >= 0) && (index < arrayFromInner.length)) {    return (true);  } else {    return (false);  }}  }
class C{  private void lockedQueryPrivate(Object key,int operator,Collection results,CompiledValue iterOps,RuntimeIterator runtimeItr,ExecutionContext context,Set keysToRemove,List projAttrib,SelectResults intermediateResults,boolean isIntersection) throws TypeMismatchException, FunctionDomainException, NameResolutionException, QueryInvocationTargetException {  if (keysToRemove == null) {    keysToRemove=new HashSet(0);  }  int limit=-1;  Boolean applyLimit=(Boolean)context.cacheGet(CompiledValue.CAN_APPLY_LIMIT_AT_INDEX);  if (applyLimit != null && applyLimit.booleanValue()) {    limit=((Integer)context.cacheGet(CompiledValue.RESULT_LIMIT)).intValue();  }  Boolean orderByClause=(Boolean)context.cacheGet(CompiledValue.CAN_APPLY_ORDER_BY_AT_INDEX);  boolean applyOrderBy=false;  boolean asc=true;  List orderByAttrs=null;  boolean multiColOrderBy=false;  if (orderByClause != null && orderByClause.booleanValue()) {    orderByAttrs=(List)context.cacheGet(CompiledValue.ORDERBY_ATTRIB);    CompiledSortCriterion csc=(CompiledSortCriterion)orderByAttrs.get(0);    asc=!csc.getCriterion();    applyOrderBy=true;    multiColOrderBy=orderByAttrs.size() > 1;  }  evaluate(key,operator,results,iterOps,runtimeItr,context,keysToRemove,projAttrib,intermediateResults,isIntersection,limit,applyOrderBy,orderByAttrs);}  }
class C{  @Nullable @SuppressWarnings("unchecked") private Figure readUseElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  HashMap<AttributeKey,Object> a2=new HashMap<AttributeKey,Object>();  readTransformAttribute(elem,a);  readOpacityAttribute(elem,a2);  readUseShapeAttributes(elem,a2);  readFontAttributes(elem,a2);  String href=readAttribute(elem,"xlink:href",null);  if (href != null && href.startsWith("#")) {    IXMLElement refElem=identifiedElements.get(href.substring(1));    if (refElem == null) {      if (DEBUG) {        System.out.println("SVGInputFormat couldn't find href for <use> element:" + href);      }    } else {      Figure obj=readElement(refElem);      if (obj != null) {        Figure figure=(Figure)obj.clone();        for (        Map.Entry<AttributeKey,Object> entry : a2.entrySet()) {          figure.set(entry.getKey(),entry.getValue());        }        AffineTransform tx=(TRANSFORM.get(a) == null) ? new AffineTransform() : TRANSFORM.get(a);        double x=toNumber(elem,readAttribute(elem,"x","0"));        double y=toNumber(elem,readAttribute(elem,"y","0"));        tx.translate(x,y);        figure.transform(tx);        return figure;      }    }  }  return null;}  }
class C{  private static Struct[] ReadFromFile(String file) throws FileNotFoundException, VerifierException {  ArrayList<Struct> structs=new ArrayList<Struct>();  Scanner fileReader=new Scanner(new FileReader(file));  String cursor=new String();  while (fileReader.hasNext()) {    cursor="";    do {      cursor+=fileReader.nextLine();    } while (!cursor.contains(";"));    cursor=cursor.substring(0,cursor.length() - 1);    String[] variables=cursor.split(",");    variables=removeUnuseful(variables);    if (!variables[0].contains(":")) {      if (!variables[0].contains(".")) {        structs.add(new Struct(variables[0],null,Variable.createVariableFromString(variables)));      } else {        structs.add(new Struct(variables[0].split(":")[0],null,Variable.createVariableFromString(variables)));      }    } else {      Struct[] tmp=structs.toArray(new Struct[0]);      Struct superclass=null;      for (      Struct s : tmp) {        if (s.structQualifiedName.equals(variables[0].split(":")[1].contains(".") ? variables[0].split(":")[1] : Struct.defaultPackageName + "." + variables[0].split(":")[1])) {          superclass=s;          break;        }      }      if (superclass != null) {        structs.add(new Struct(variables[0].split(":")[0],superclass,Variable.createVariableFromString(variables)));      }    }  }  getPointerClass(structs);  fileReader.close();  return structs.toArray(new Struct[0]);}  }
class C{  public boolean shouldSelectCell(EventObject anEvent){  return delegate.shouldSelectCell(anEvent);}  }
class C{  public BackpropNetwork(Network network,int[] nodesPerLayer,Point2D initialPosition){  super(network,nodesPerLayer,initialPosition,new Neuron(network,new LinearRule()));  setLabel("Backprop");}  }
class C{  public static void closeEL(Writer w){  try {    if (w != null)     w.close();  } catch (  Throwable e) {  }}  }
class C{  public void initialize(GL10 gl){  mState=STATE_INITIALIZED;  int[] textures=new int[1];  gl.glGenTextures(1,textures,0);  mTextureID=textures[0];  gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureID);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_MIN_FILTER,GL10.GL_NEAREST);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_MAG_FILTER,GL10.GL_NEAREST);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_WRAP_S,GL10.GL_CLAMP_TO_EDGE);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_WRAP_T,GL10.GL_CLAMP_TO_EDGE);  gl.glTexEnvf(GL10.GL_TEXTURE_ENV,GL10.GL_TEXTURE_ENV_MODE,GL10.GL_REPLACE);}  }
class C{  public GoalDirectedStagedDeepening(INode goal,IScore eval,IVisitor visitor){  super(visitor);  this.goal=goal;  this.eval=eval;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementchangeattributevalue.class,args);}  }
class C{  protected void fireActionEvent(ActionEvent a){  if (isEnabled() && !Display.getInstance().hasDragOccured()) {    if (disposeDialogOnSelection) {      ((Dialog)getComponentForm()).dispose();    }    super.fireActionEvent();    dispatcher.fireActionEvent(a);    if (isCommandList() && !a.isConsumed()) {      T i=getSelectedItem();      if (i != null && i instanceof Command && ((Command)i).isEnabled()) {        ((Command)i).actionPerformed(a);        if (!a.isConsumed()) {          Form f=getComponentForm();          if (f != null) {            f.actionCommandImpl((Command)i);          }        }      }    }    Display d=Display.getInstance();    if (d.isBuiltinSoundsEnabled()) {      d.playBuiltinSound(Display.SOUND_TYPE_BUTTON_PRESS);    }  }}  }
class C{  public void close(){  for (  CFrame w : windows) {    w.removeComponentListener(eventListener);    w.removeWindowListener(eventListener);    w.dispose();  }  windows=new ArrayList<CFrame>();}  }
class C{  public static void main(String[] args){  int option=Integer.parseInt(args[0]);  GridType gridType=GridType.valueOf(args[1]);  KdeType kdeType=KdeType.valueOf(args[2]);  GridExample example=new GridExample(option,gridType,kdeType);  example.run();  try {    AnalysisLauncher.open(example);  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException("Cannot visualise!!");  }}  }
class C{  public void andNot(BitSet set){  int unitsInCommon=Math.min(unitsInUse,set.unitsInUse);  for (int i=0; i < unitsInCommon; i++) {    bits[i]&=~set.bits[i];  }  recalculateUnitsInUse();}  }
class C{  public Iterator<MethodOrMethodContext> sourceMethods(){  return srcMethodToEdge.keySet().iterator();}  }
class C{  public static void main(String[] args){  if (args.length != 2) {    throw new RuntimeException("Wrong number of input arguments.");  }  String path2OsmFile=args[0];  String path2OutputNetwork=args[1];  convertOSMNetwork(path2OsmFile,path2OutputNetwork);}  }
class C{  public Writer(int size){  output=new ByteArrayOutputStream(size);  numOfEntries=0;  output.write(0);  output.write(0);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_METHOD_BODY_1__PRECONDITION_1:    return precondition_1 != null && !precondition_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public final void addHelperTextId(@StringRes final int resourceId){  addHelperText(getResources().getText(resourceId));}  }
class C{  protected CoreContainer(Object testConstructor){  solrHome=null;  loader=null;  coresLocator=null;  cfg=null;  containerProperties=null;}  }
class C{  private String giveTextInBestLanguage(String elementName){  if (mElementMap.containsKey(elementName + mRequestedLanguage)) {    return mElementMap.get(elementName + mRequestedLanguage);  } else   if (mElementMap.containsKey(elementName + DEFAULT_LANGUAGE)) {    return mElementMap.get(elementName + DEFAULT_LANGUAGE);  } else   if (mElementMap.containsKey(elementName + mFirstLanguage)) {    return mElementMap.get(elementName + mFirstLanguage);  } else {    return mElementMap.get(elementName);  }}  }
class C{  boolean isBitmapReady(int position){  return bitmaps[position] != null && bitmaps[position].get() != null;}  }
class C{  @Override public void restoreSnapshot(BlockSnapshot snapshot,Volume parentVolume,String syncDirection,String taskId){  s_logger.info(String.format("Request to restore VPlex volume %s from snapshot %s.",parentVolume.getId().toString(),snapshot.getId().toString()));  super.restoreSnapshot(snapshot,parentVolume,syncDirection,taskId);}  }
class C{  public void writeIOR(String iorFile,org.omg.CORBA.Object iorObj) throws IOException {  if (iorFile != null) {    ORB orb=initORB(null);    java.io.FileWriter outFile=new java.io.FileWriter(iorFile);    java.io.PrintWriter writer=new java.io.PrintWriter(outFile);    String ior=orb.object_to_string(iorObj);    writer.println(ior);    writer.close();    if (Debug.debugging("corba")) {      Debug.output(orb.object_to_string(iorObj));    }  }}  }
class C{  public void addIQProvider(String elementName,String namespace,Object provider){  if (!(provider instanceof IQProvider || (provider instanceof Class && IQ.class.isAssignableFrom((Class<?>)provider)))) {    throw new IllegalArgumentException("Provider must be an IQProvider " + "or a Class instance.");  }  String key=getProviderKey(elementName,namespace);  iqProviders.put(key,provider);}  }
class C{  public Maybe<Zipper<A>> maybeForwards(int steps){  return maybeToPosition(position + steps);}  }
class C{  protected TableLayout.Constraint createCellConstraint(Object value,int row,int column){  if (includeHeader) {    row++;  }  TableLayout t=(TableLayout)getLayout();  return t.createConstraint(row,column);}  }
class C{  public ListenableFuture<CameraProxy> openLegacyPortabilityDevice(Lifetime requestLifetime,CameraId cameraId){  CameraDeviceKey key=new CameraDeviceKey(ApiType.CAMERA_API_PORTABILITY_API1,cameraId);  return openDevice(requestLifetime,key,mPortabilityCameraActionProvider);}  }
class C{  public void connect(){  if (zkStateReader == null) {synchronized (this) {      if (zkStateReader == null) {        ZkStateReader zk=null;        try {          zk=new ZkStateReader(zkHost,zkClientTimeout,zkConnectTimeout);          zk.createClusterStateWatchersAndUpdate();          zkStateReader=zk;        } catch (        InterruptedException e) {          zk.close();          Thread.currentThread().interrupt();          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);        }catch (        KeeperException e) {          zk.close();          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);        }catch (        Exception e) {          if (zk != null)           zk.close();          throw e;        }      }    }  }}  }
class C{  public void cleanup(){  try {    for (    FileItem item : files.values()) {      item.delete();    }    files.clear();    parameters.clear();  } catch (  Throwable t) {    return;  }}  }
class C{  public static float unifyRotationDiff(float rotate,float targetRotate){  float d=targetRotate - rotate;  while (d >= 180) {    d-=360;  }  while (d < -180) {    d+=360;  }  return d;}  }
class C{  @Override protected Money handleTransactionThatIsOnTimePaymentOfInstallment(final LoanRepaymentScheduleInstallment currentInstallment,final LoanTransaction loanTransaction,final Money transactionAmountUnprocessed,final List<LoanTransactionToRepaymentScheduleMapping> transactionMappings){  final LocalDate transactionDate=loanTransaction.getTransactionDate();  final MonetaryCurrency currency=transactionAmountUnprocessed.getCurrency();  Money transactionAmountRemaining=transactionAmountUnprocessed;  Money principalPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money interestPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money feeChargesPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money penaltyChargesPortion=Money.zero(transactionAmountRemaining.getCurrency());  if (loanTransaction.isChargesWaiver()) {    penaltyChargesPortion=currentInstallment.waivePenaltyChargesComponent(transactionDate,loanTransaction.getPenaltyChargesPortion(currency));    transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);    feeChargesPortion=currentInstallment.waiveFeeChargesComponent(transactionDate,loanTransaction.getFeeChargesPortion(currency));    transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);  } else   if (loanTransaction.isInterestWaiver()) {    interestPortion=currentInstallment.waiveInterestComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(interestPortion);    loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  } else   if (loanTransaction.isChargePayment()) {    if (loanTransaction.isPenaltyPayment()) {      penaltyChargesPortion=currentInstallment.payPenaltyChargesComponent(transactionDate,transactionAmountRemaining);      transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);    } else {      feeChargesPortion=currentInstallment.payFeeChargesComponent(transactionDate,transactionAmountRemaining);      transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);    }  } else {    penaltyChargesPortion=currentInstallment.payPenaltyChargesComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);    feeChargesPortion=currentInstallment.payFeeChargesComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);    interestPortion=currentInstallment.payInterestComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(interestPortion);    principalPortion=currentInstallment.payPrincipalComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(principalPortion);  }  if (principalPortion.plus(interestPortion).plus(feeChargesPortion).plus(penaltyChargesPortion).isGreaterThanZero()) {    transactionMappings.add(LoanTransactionToRepaymentScheduleMapping.createFrom(currentInstallment,principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion));  }  loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  return transactionAmountRemaining;}  }
class C{  @Override protected void finalize(){  try {    super.finalize();  } catch (  Throwable t) {    throw new AssertionError(t);  }}  }
class C{  private Object readResolve(){  return Days.days(getValue());}  }
class C{  public boolean isBeforeNow(){  return isBefore(DateTimeUtils.currentTimeMillis());}  }
class C{  public boolean supportsConversion(Class<?> targetType,Object valueToConvert){  boolean rVal=false;  if (Quantity.class.equals(targetType)) {    rVal=true;  }  return (rVal);}  }
class C{  public JWTEditor(IBurpExtenderCallbacks callbacks){  this.callbacks=callbacks;  this.helpers=callbacks.getHelpers();}  }
class C{  private Instruction makePhiInstruction(Register r,BasicBlock bb){  int n=bb.getNumberOfIn();  Enumeration<BasicBlock> in=bb.getIn();  TypeReference type=null;  Instruction s=Phi.create(PHI,new RegisterOperand(r,type),n);  for (int i=0; i < n; i++) {    RegisterOperand junk=new RegisterOperand(r,type);    Phi.setValue(s,i,junk);    BasicBlock pred=in.nextElement();    Phi.setPred(s,i,new BasicBlockOperand(pred));  }  s.setSourcePosition(SSA_SYNTH_BCI,ir.getGc().getInlineSequence());  return s;}  }
class C{  public final void removeLessThanThreshold(int threshold){  final Iterator<Map.Entry<K,Integer>> it=mCount.entrySet().iterator();  while (it.hasNext()) {    final Map.Entry<K,Integer> pairs=it.next();    final int value=pairs.getValue();    if (value < threshold) {      mSum-=value;      it.remove();    }  }}  }
class C{  private char readEscapeCharacter() throws JSONException {  char escaped=in.charAt(pos++);switch (escaped) {case 'u':    if (pos + 4 > in.length()) {      throw syntaxError("Unterminated escape sequence");    }  String hex=in.substring(pos,pos + 4);pos+=4;return (char)Integer.parseInt(hex,16);case 't':return '\t';case 'b':return '\b';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '\'':case '"':case '\\':default :return escaped;}}  }
class C{  public void downloadAttachment(AttachmentEntry entry,String directory) throws IOException, ServiceException {  String url=((OutOfLineContent)entry.getContent()).getUri();  downloadFile(url,directory + entry.getTitle().getPlainText());}  }
class C{  public static double regularizedIncBeta(double x,double alpha,double beta){  if (alpha <= 0.0 || beta <= 0.0 || Double.isNaN(alpha) || Double.isNaN(beta) || Double.isNaN(x)) {    return Double.NaN;  }  if (x <= 0.0) {    return 0.0;  }  if (x >= 1.0) {    return 1.0;  }  if (alpha > SWITCH && beta > SWITCH) {    return regularizedIncBetaQuadrature(alpha,beta,x);  }  double bt=Math.exp(-logBeta(alpha,beta) + alpha * Math.log(x) + beta * Math.log1p(-x));  if (x < (alpha + 1.0) / (alpha + beta + 2.0)) {    return bt * regularizedIncBetaCF(alpha,beta,x) / alpha;  } else {    return 1.0 - bt * regularizedIncBetaCF(beta,alpha,1.0 - x) / beta;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.167 -0500",hash_original_method="2D6F810980DCFBBC547D7B9A11965950",hash_generated_method="832A9429C16C86298C91242E8C17B8AB") public void reset(){  isSimplePath=true;  if (mDetectSimplePaths) {    mLastDirection=null;    if (rects != null)     rects.setEmpty();  }}  }
class C{  public static int indexOf(int[] array,int value){  for (int i=0; i < array.length; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  protected static double[][] computePij(double[][] dist,double perplexity,double initialScale){  final int size=dist.length;  final double logPerp=Math.log(perplexity);  double[][] pij=new double[size][size];  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Optimizing perplexities",size,LOG) : null;  Duration timer=LOG.isStatistics() ? LOG.newDuration(TSNE.class.getName() + ".runtime.pijmatrix").begin() : null;  for (int i=0; i < size; i++) {    computePi(i,dist[i],pij[i],perplexity,logPerp);    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  if (timer != null) {    LOG.statistics(timer.end());  }  double sum=0.;  for (int i=1; i < size; i++) {    final double[] pij_i=pij[i];    for (int j=0; j < i; j++) {      sum+=(pij_i[j]+=pij[j][i]);    }  }  final double scale=initialScale / (2. * sum);  for (int i=1; i < size; i++) {    final double[] pij_i=pij[i];    for (int j=0; j < i; j++) {      pij_i[j]=pij[j][i]=MathUtil.max(pij_i[j] * scale,MIN_PIJ);    }  }  return pij;}  }
class C{  public SignerId(byte[] subjectKeyId){  this(null,null,subjectKeyId);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public LocationUuidFilter(LocationTree tree,Location subroot){  if (tree == null || subroot == null) {    mTentSelectionString="";    mTentSelectionArgs=new String[0];    mUuid=null;    mDescription="";    return;  }  List<Location> allPossibleLocations=tree.locationsInSubtree(subroot);  StringBuilder sb=new StringBuilder().append(Contracts.Patients.LOCATION_UUID).append(" IN (");  String prefix="";  for (int i=0; i < allPossibleLocations.size(); i++) {    sb.append(prefix).append("?");    prefix=",";  }  sb.append(")");  mTentSelectionString=sb.toString();  mTentSelectionArgs=new String[allPossibleLocations.size()];  for (int i=0; i < allPossibleLocations.size(); i++) {    mTentSelectionArgs[i]=allPossibleLocations.get(i).uuid;  }  mUuid=subroot.uuid;  mDescription=subroot.name;}  }
class C{  private void initListeners(){  ClassLoader parent=getParent();  for (; parent != null; parent=parent.getParent()) {    if (parent instanceof EnvironmentClassLoader) {      EnvironmentClassLoader loader=(EnvironmentClassLoader)parent;      if (_stopListener == null)       _stopListener=new WeakStopListener(this);      loader.addListener(_stopListener);      return;    }  }}  }
class C{  @Field(27) public __VARIANT_NAME_3_union ppunkVal(Pointer<Pointer<IUnknown>> ppunkVal){  this.io.setPointerField(this,27,ppunkVal);  return this;}  }
class C{  public SendText(String text,boolean done){  super();  addParameterToRequest("text",text);  addParameterToRequest("done",done);}  }
class C{  public AddMaterialParameterDialog(java.awt.Frame parent,boolean modal,Diagram diagram,Point clickPosition){  super(parent,modal);  initComponents();  DefaultComboBoxModel model=new DefaultComboBoxModel();  model.addElement("Color");  for (  VarType varType : VarType.values()) {    model.addElement(varType.name());  }  this.diagram=diagram;  this.clickPosition=clickPosition;  typeField.setModel(model);}  }
class C{  public void run(Runnable runnable){  if (this.goForward()) {    for (int i=this.from; i <= this.to; i+=this.step) {      runnable.run();    }  } else {    for (int i=this.from; i >= this.to; i+=this.step) {      runnable.run();    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodehasattributes04.class,args);}  }
class C{  public boolean isCompleted(){  return name.get() == Completed.name.get();}  }
class C{  @Nullable public GridCloseableIterator<Map.Entry<byte[],byte[]>> rawIterator(@Nullable String spaceName) throws IgniteCheckedException {  try {    IgniteSpiCloseableIterator<Map.Entry<byte[],byte[]>> it=getSpi().rawIterator(spaceName);    return it == null ? null : new GridSpiCloseableIteratorWrapper<>(it);  } catch (  IgniteSpiException e) {    throw new IgniteCheckedException("Failed to get iterator over swap space [space=" + spaceName + ']',e);  }}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  StringBuffer sb=new StringBuffer();  int i;  JSONArray ja;  String key;  Iterator keys;  int length;  Object object;  String tagName;  String value;  tagName=jo.optString("tagName");  if (tagName == null) {    return XML.escape(jo.toString());  }  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  keys=jo.keys();  while (keys.hasNext()) {    key=keys.next().toString();    if (!"tagName".equals(key) && !"childNodes".equals(key)) {      XML.noSpace(key);      value=jo.optString(key);      if (value != null) {        sb.append(' ');        sb.append(XML.escape(key));        sb.append('=');        sb.append('"');        sb.append(XML.escape(value));        sb.append('"');      }    }  }  ja=jo.optJSONArray("childNodes");  if (ja == null) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    length=ja.length();    for (i=0; i < length; i+=1) {      object=ja.get(i);      if (object != null) {        if (object instanceof String) {          sb.append(XML.escape(object.toString()));        } else         if (object instanceof JSONObject) {          sb.append(toString((JSONObject)object));        } else         if (object instanceof JSONArray) {          sb.append(toString((JSONArray)object));        } else {          sb.append(object.toString());        }      }    }    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  public static QName valueOf(String s){  if ((s == null) || s.equals("")) {    throw new IllegalArgumentException("invalid QName literal");  }  if (s.charAt(0) == '{') {    int i=s.indexOf('}');    if (i == -1) {      throw new IllegalArgumentException("invalid QName literal");    }    if (i == s.length() - 1) {      throw new IllegalArgumentException("invalid QName literal");    } else {      return new QName(s.substring(1,i),s.substring(i + 1));    }  } else {    return new QName(s);  }}  }
class C{  public void show(Component invoker,int x,int y){  if (DEBUG) {    System.out.println("in JPopupMenu.show ");  }  setInvoker(invoker);  Frame newFrame=getFrame(invoker);  if (newFrame != frame) {    if (newFrame != null) {      this.frame=newFrame;      if (popup != null) {        setVisible(false);      }    }  }  Point invokerOrigin;  if (invoker != null) {    invokerOrigin=invoker.getLocationOnScreen();    long lx, ly;    lx=((long)invokerOrigin.x) + ((long)x);    ly=((long)invokerOrigin.y) + ((long)y);    if (lx > Integer.MAX_VALUE)     lx=Integer.MAX_VALUE;    if (lx < Integer.MIN_VALUE)     lx=Integer.MIN_VALUE;    if (ly > Integer.MAX_VALUE)     ly=Integer.MAX_VALUE;    if (ly < Integer.MIN_VALUE)     ly=Integer.MIN_VALUE;    setLocation((int)lx,(int)ly);  } else {    setLocation(x,y);  }  setVisible(true);}  }
class C{  public ChartRenderingInfo(){  this(new StandardEntityCollection());}  }
class C{  private boolean dynInit(VButton button) throws Exception {  m_DocStatus=(String)m_mTab.getValue("DocStatus");  log.config(m_DocStatus);  if (m_mTab.getValue("C_BPartner_ID") == null) {    ADialog.error(0,this,"SaveErrorRowNotFound");    return false;  }  m_DocStatus=(String)m_mTab.getValue("DocStatus");  if (m_DocStatus == null)   m_DocStatus="";  if (m_DocStatus.equals("RE") || m_DocStatus.equals("VO") || m_DocStatus.equals("CL"))   return false;  if (m_DocStatus.equals("CO") || m_DocStatus.equals("WP"))   m_onlyRule=false; else   m_onlyRule=true;  if (!m_onlyRule && !m_isSOTrx && m_mTab.getValue("M_Warehouse_ID") != null)   m_onlyRule=true;  centerPanel.setVisible(!m_onlyRule);  m_Amount=(BigDecimal)m_mTab.getValue("GrandTotal");  if (!m_onlyRule && m_Amount.compareTo(Env.ZERO) == 0) {    ADialog.error(m_WindowNo,this,"PaymentZero");    return false;  }  bAmountField.setValue(m_Amount);  sAmountField.setValue(m_Amount);  kAmountField.setValue(m_Amount);  m_AD_Client_ID=((Integer)m_mTab.getValue("AD_Client_ID")).intValue();  m_Cash_As_Payment=MSysConfig.getBooleanValue("CASH_AS_PAYMENT",true,m_AD_Client_ID);  m_AD_Org_ID=((Integer)m_mTab.getValue("AD_Org_ID")).intValue();  m_C_BPartner_ID=((Integer)m_mTab.getValue("C_BPartner_ID")).intValue();  m_PaymentRule=(String)m_mTab.getValue("PaymentRule");  m_C_Currency_ID=((Integer)m_mTab.getValue("C_Currency_ID")).intValue();  m_DateAcct=(Timestamp)m_mTab.getValue("DateAcct");  if (m_mTab.getValue("C_PaymentTerm_ID") != null)   m_C_PaymentTerm_ID=((Integer)m_mTab.getValue("C_PaymentTerm_ID")).intValue();  if (m_mTab.getValue("C_Payment_ID") != null) {    m_C_Payment_ID=((Integer)m_mTab.getValue("C_Payment_ID")).intValue();    if (m_C_Payment_ID != 0) {      m_mPayment=new MPayment(Env.getCtx(),m_C_Payment_ID,null);      m_mPaymentOriginal=new MPayment(Env.getCtx(),m_C_Payment_ID,null);      m_CCType=m_mPayment.getCreditCardType();      kNumberField.setText(m_mPayment.getCreditCardNumber());      kNameField.setText(m_mPayment.getA_Name());      kExpField.setText(m_mPayment.getCreditCardExp(null));      kApprovalField.setText(m_mPayment.getVoiceAuthCode());      kStatus.setText(m_mPayment.getR_PnRef());      kAmountField.setValue(m_mPayment.getPayAmt());      kTypeCombo.setReadWrite(!m_mPayment.isApproved());      kNumberField.setReadWrite(!m_mPayment.isApproved());      kNameField.setReadWrite(!m_mPayment.isApproved());      kExpField.setReadWrite(!m_mPayment.isApproved());      kApprovalField.setReadWrite(!m_mPayment.isApproved());      kOnline.setReadWrite(!m_mPayment.isApproved());      kAmountField.setReadWrite(!m_mPayment.isApproved());      m_C_BankAccount_ID=m_mPayment.getC_BankAccount_ID();      sRoutingField.setText(m_mPayment.getRoutingNo());      sNumberField.setText(m_mPayment.getAccountNo());      sCheckField.setText(m_mPayment.getCheckNo());      sStatus.setText(m_mPayment.getR_PnRef());      sAmountField.setValue(m_mPayment.getPayAmt());      tRoutingField.setText(m_mPayment.getRoutingNo());      tNumberField.setText(m_mPayment.getAccountNo());      tStatus.setText(m_mPayment.getR_PnRef());      bAmountField.setValue(m_mPayment.getPayAmt());    }  }  if (m_mPayment == null) {    m_mPayment=new MPayment(Env.getCtx(),0,null);    m_mPayment.setAD_Org_ID(m_AD_Org_ID);    m_mPayment.setAmount(m_C_Currency_ID,m_Amount);  }  m_cashLine=null;  m_C_CashLine_ID=0;  if (m_mTab.getValue("C_CashLine_ID") != null) {    m_C_CashLine_ID=((Integer)m_mTab.getValue("C_CashLine_ID")).intValue();    if (m_C_CashLine_ID == 0)     m_cashLine=null; else {      m_cashLine=new MCashLine(Env.getCtx(),m_C_CashLine_ID,null);      m_DateAcct=m_cashLine.getStatementDate();      m_C_CashBook_ID=m_cashLine.getCashBook().getC_CashBook_ID();      bAmountField.setValue(m_cashLine.getAmount());    }  }  bDateField.setValue(m_DateAcct);  if (s_Currencies == null)   loadCurrencies();  Integer C_Currency_ID=new Integer(m_C_Currency_ID);  if (s_Currencies.containsKey(C_Currency_ID)) {    Enumeration<Integer> en=s_Currencies.keys();    while (en.hasMoreElements()) {      Object key=en.nextElement();      bCurrencyCombo.addItem(s_Currencies.get(key));      sCurrencyCombo.addItem(s_Currencies.get(key));    }    sCurrencyCombo.addActionListener(this);    sCurrencyCombo.setSelectedItem(s_Currencies.get(C_Currency_ID));    bCurrencyCombo.addActionListener(this);    bCurrencyCombo.setSelectedItem(s_Currencies.get(C_Currency_ID));  } else {    bCurrencyLabel.setVisible(false);    bCurrencyCombo.setVisible(false);    sCurrencyLabel.setVisible(false);    sCurrencyCombo.setVisible(false);  }  if (m_PaymentRule == null)   m_PaymentRule="";  ValueNamePair vp=null;  HashMap<?,?> values=button.getValues();  Object[] a=values.keySet().toArray();  for (int i=0; i < a.length; i++) {    String PaymentRule=(String)a[i];    if (X_C_Order.PAYMENTRULE_DirectDebit.equals(PaymentRule) && !m_isSOTrx)     continue; else     if (X_C_Order.PAYMENTRULE_DirectDeposit.equals(PaymentRule) && m_isSOTrx)     continue;    ValueNamePair pp=new ValueNamePair(PaymentRule,(String)values.get(a[i]));    paymentCombo.addItem(pp);    if (PaymentRule.toString().equals(m_PaymentRule))     vp=pp;  }  paymentCombo.addActionListener(this);  if (vp != null)   paymentCombo.setSelectedItem(vp);  String SQL=MRole.getDefault().addAccessSQL("SELECT C_PaymentTerm_ID, Name FROM C_PaymentTerm WHERE IsActive='Y' ORDER BY Name","C_PaymentTerm",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  KeyNamePair kp=null;  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int key=rs.getInt(1);      String name=rs.getString(2);      KeyNamePair pp=new KeyNamePair(key,name);      pTermCombo.addItem(pp);      if (key == m_C_PaymentTerm_ID)       kp=pp;    }    rs.close();    pstmt.close();  } catch (  SQLException ept) {    log.log(Level.SEVERE,SQL,ept);  }  if (kp != null)   pTermCombo.setSelectedItem(kp);  SQL="SELECT a.C_BP_BankAccount_ID, NVL(b.Name, ' ')||'_'||NVL(a.AccountNo, ' ') AS Acct " + "FROM C_BP_BankAccount a" + " LEFT OUTER JOIN C_Bank b ON (a.C_Bank_ID=b.C_Bank_ID) "+ "WHERE C_BPartner_ID=?"+ "AND a.IsActive='Y' AND a.IsACH='Y'";  kp=null;  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    pstmt.setInt(1,m_C_BPartner_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int key=rs.getInt(1);      String name=rs.getString(2);      KeyNamePair pp=new KeyNamePair(key,name);      tAccountCombo.addItem(pp);    }    rs.close();    pstmt.close();  } catch (  SQLException eac) {    log.log(Level.SEVERE,SQL,eac);  }  if (kp != null)   tAccountCombo.setSelectedItem(kp);  ValueNamePair[] ccs=m_mPayment.getCreditCards();  vp=null;  for (int i=0; i < ccs.length; i++) {    kTypeCombo.addItem(ccs[i]);    if (ccs[i].getValue().equals(m_CCType))     vp=ccs[i];  }  if (vp != null)   kTypeCombo.setSelectedItem(vp);  SQL=MRole.getDefault().addAccessSQL("SELECT C_BankAccount_ID, Name || ' ' || AccountNo, IsDefault " + "FROM C_BankAccount ba" + " INNER JOIN C_Bank b ON (ba.C_Bank_ID=b.C_Bank_ID) "+ "WHERE b.IsActive='Y'","ba",MRole.SQL_FULLYQUALIFIED,MRole.SQL_RO);  kp=null;  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int key=rs.getInt(1);      String name=rs.getString(2);      KeyNamePair pp=new KeyNamePair(key,name);      sBankAccountCombo.addItem(pp);      if (key == m_C_BankAccount_ID)       kp=pp;      if (kp == null && rs.getString(3).equals("Y"))       kp=pp;    }    rs.close();    pstmt.close();  } catch (  SQLException ept) {    log.log(Level.SEVERE,SQL,ept);  }  if (kp != null)   sBankAccountCombo.setSelectedItem(kp);  SQL=MRole.getDefault().addAccessSQL("SELECT C_CashBook_ID, Name, AD_Org_ID FROM C_CashBook WHERE IsActive='Y'","C_CashBook",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  kp=null;  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int key=rs.getInt(1);      String name=rs.getString(2);      KeyNamePair pp=new KeyNamePair(key,name);      bCashBookCombo.addItem(pp);      if (key == m_C_CashBook_ID)       kp=pp;      if (kp == null && key == m_AD_Org_ID)       kp=pp;    }    rs.close();    pstmt.close();  } catch (  SQLException epc) {    log.log(Level.SEVERE,SQL,epc);  }  if (kp != null) {    bCashBookCombo.setSelectedItem(kp);    if (m_C_CashBook_ID == 0)     m_C_CashBook_ID=kp.getKey();  }  return true;}  }
class C{  public TcpProxy(String host,int remoteport) throws IOException {  this.host=host;  this.remoteport=remoteport;  socket=new TcpProxySocket(host,remoteport);  Executors.newSingleThreadScheduledExecutor().schedule(socket,0,TimeUnit.MILLISECONDS);}  }
class C{  ArchivedCoupling(final ArchiveContents parent,final org.simbrain.workspace.Coupling<?> coupling){  this.archivedProducer=new ArchivedAttribute(parent,coupling.getProducer());  this.archivedConsumer=new ArchivedAttribute(parent,coupling.getConsumer());}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public static double asDouble(String str,double def){  try {    return Double.parseDouble(str);  } catch (  NumberFormatException e) {    return def;  }}  }
class C{  public boolean isNotBad(){  return (value & SEVERITY_MASK) != SEVERITY_BAD;}  }
class C{  public static boolean initDebug(){  return StaticHelper.initOpenCV(false);}  }
class C{  private PlaceObject flexText(GraphicContentNode node){  if (node instanceof TextNode) {    TextNode textNode=((TextNode)node);    String className=createUniqueName(graphicClass.getClassName() + "_Text");    FXGSymbolClass spriteSymbolClass=new FXGSymbolClass();    spriteSymbolClass.setPackageName(packageName);    spriteSymbolClass.setClassName(className);    graphicClass.addAdditionalSymbolClass(spriteSymbolClass);    DefineSprite textSprite=createDefineSprite(className);    PlaceObject po3=placeObject(textSprite,node.createGraphicContext());    spriteStack.push(textSprite);    StringBuilder buf=new StringBuilder(4096);    buf.append("package ").append(packageName).append("\n");    buf.append("{\n\n");    buf.append("import flash.events.Event;\n");    buf.append("import flashx.textLayout.elements.*;\n");    buf.append("import flashx.textLayout.formats.TextLayoutFormat;\n");    buf.append("import mx.core.IFlexModuleFactory;\n");    buf.append("import mx.core.mx_internal;\n");    buf.append("import spark.components.RichText;\n");    buf.append("import spark.core.SpriteVisualElement;\n\n");    buf.append("use namespace mx_internal;\n\n");    String blendModeImport=generateBlendModeImport(node.blendMode);    if (blendModeImport != null)     buf.append(blendModeImport);    String blendModeShader=generateBlendMode(node.blendMode);    buf.append("public class ").append(className).append(" extends SpriteVisualElement\n");    buf.append("{\n");    buf.append("    public function ").append(className).append("()\n");    buf.append("    {\n");    buf.append("        super();\n");    buf.append("        this.nestedSpriteVisualElement = true;\n");    if (hasAdvancedGraphics(node))     buf.append("        this.cacheAsBitmap = true;\n");    MaskingNode maskNode=node.getMask();    if (maskNode != null && (node.getMaskType() == MaskType.ALPHA || node.getMaskType() == MaskType.LUMINOSITY)) {      int maskIndex=maskNode.getMaskIndex();      buf.append("        this.mask = this.parent.getChildAt(").append(maskIndex).append(");\n");    }    if (blendModeShader != null)     buf.append(blendModeShader);    buf.append("        createText();\n");    buf.append("    }\n");    buf.append("\n");    buf.append("    private var _richTextComponent:RichText;\n\n");    buf.append("    private function createText():void\n");    buf.append("    {\n");    SourceContext textSource=generateRichText(textNode);    if (textSource.functionBuffer != null)     buf.append(textSource.functionBuffer.toString());    buf.append("    }\n");    if (textSource.classBuffer != null)     buf.append(textSource.classBuffer.toString());    buf.append(generateModuleFactoryOverride("_richTextComponent"));    buf.append("}\n");    buf.append("}\n");    spriteSymbolClass.setGeneratedSource(buf.toString());    spriteSymbolClass.setSymbol(textSprite);    spriteStack.pop();    return po3;  }  return null;}  }
class C{  public void removeMethod(SootMethod method){  methods.remove(method);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public long flush(){  return 0L;}  }
class C{  @Override public Object clone(){  TDoubleArrayList clone=null;  try {    clone=(TDoubleArrayList)super.clone();    clone._data=_data.clone();  } catch (  CloneNotSupportedException e) {  }  return clone;}  }
class C{  @Override public void close() throws IOException {}  }
class C{  private void removeNonBooleanAttributes(ExampleSet exampleSet){  Collection<Attribute> deleteAttributes=new ArrayList<Attribute>();  for (  Attribute attribute : exampleSet.getAttributes()) {    if (!attribute.isNominal() || attribute.getMapping().size() != 2) {      deleteAttributes.add(attribute);    }  }  for (  Attribute attribute : deleteAttributes) {    exampleSet.getAttributes().remove(attribute);  }}  }
class C{  public JFileChooser(File currentDirectory,FileSystemView fsv){  setup(fsv);  setCurrentDirectory(currentDirectory);}  }
class C{  public int findFirstVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),false,true);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public ERDGraphicalViewer(ERDEditorPart editor,ValidationMessageHandler messageHandler){  super();  this.editor=editor;  this.messageHandler=messageHandler;  themeManager=editor.getSite().getWorkbenchWindow().getWorkbench().getThemeManager();  themeManager.addPropertyChangeListener(this);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Float(stack.getUIMgrSafe().getVideoFrame().getRate());}  }
class C{  public void onDebuggerStatement(Context cx){  dim.handleBreakpointHit(this,cx);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (singleton_1: ");  result.append(singleton_1);  result.append(')');  return result.toString();}  }
class C{  public void debug(String msg,Object arg0,Object arg1){  innerLog(Level.DEBUG,null,msg,arg0,arg1,UNKNOWN_ARG,null);}  }
class C{  private Array _deserializeArray(Element el) throws ConverterException {  Array array=new ArrayImpl();  NodeList list=el.getChildNodes();  int len=list.getLength();  for (int i=0; i < len; i++) {    Node node=list.item(i);    if (node instanceof Element)     try {      array.append(_deserialize((Element)node));    } catch (    PageException e) {      throw toConverterException(e);    }  }  return array;}  }
class C{  public void addMigrations(final Set<Migration> migrations){  this.migrations.addAll(migrations);}  }
class C{  public void clear(){  this.size=0;}  }
class C{  private void initGzipFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering GZip Filter");  FilterRegistration.Dynamic compressingFilter=servletContext.addFilter("gzipFilter",new GZipServletFilter());  Map<String,String> parameters=new HashMap<>();  compressingFilter.setInitParameters(parameters);  compressingFilter.addMappingForUrlPatterns(disps,true,"*.css");  compressingFilter.addMappingForUrlPatterns(disps,true,"*.json");  compressingFilter.addMappingForUrlPatterns(disps,true,"*.html");  compressingFilter.addMappingForUrlPatterns(disps,true,"*.js");  compressingFilter.addMappingForUrlPatterns(disps,true,"*.svg");  compressingFilter.addMappingForUrlPatterns(disps,true,"*.ttf");  compressingFilter.addMappingForUrlPatterns(disps,true,"/api/*");  compressingFilter.addMappingForUrlPatterns(disps,true,"/metrics/*");  compressingFilter.setAsyncSupported(true);}  }
class C{  private static ValueLob createSmallLob(int type,byte[] small){  return new ValueLob(type,small);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public static TypeReference newTypeReference(int sort){  return new TypeReference(sort << 24);}  }
class C{  public static String stringFor(int result){switch (result) {case NVRTC_SUCCESS:    return "NVRTC_SUCCESS";case NVRTC_ERROR_OUT_OF_MEMORY:  return "NVRTC_ERROR_OUT_OF_MEMORY";case NVRTC_ERROR_PROGRAM_CREATION_FAILURE:return "NVRTC_ERROR_PROGRAM_CREATION_FAILURE";case NVRTC_ERROR_INVALID_INPUT:return "NVRTC_ERROR_INVALID_INPUT";case NVRTC_ERROR_INVALID_PROGRAM:return "NVRTC_ERROR_INVALID_PROGRAM";case NVRTC_ERROR_INVALID_OPTION:return "NVRTC_ERROR_INVALID_OPTION";case NVRTC_ERROR_COMPILATION:return "NVRTC_ERROR_COMPILATION";case NVRTC_ERROR_BUILTIN_OPERATION_FAILURE:return "NVRTC_ERROR_BUILTIN_OPERATION_FAILURE";case NVRTC_ERROR_NO_NAME_EXPRESSIONS_AFTER_COMPILATION:return "NVRTC_ERROR_NO_NAME_EXPRESSIONS_AFTER_COMPILATION";case NVRTC_ERROR_NO_LOWERED_NAMES_BEFORE_COMPILATION:return "NVRTC_ERROR_NO_LOWERED_NAMES_BEFORE_COMPILATION";case NVRTC_ERROR_NAME_EXPRESSION_NOT_VALID:return "NVRTC_ERROR_NAME_EXPRESSION_NOT_VALID";case NVRTC_ERROR_INTERNAL_ERROR:return "NVRTC_ERROR_INTERNAL_ERROR";case JCUDA_INTERNAL_ERROR:return "JCUDA_INTERNAL_ERROR";}return "INVALID nvrtcResult: " + result;}  }
class C{  public void delete() throws IOException {  IOUtils.closeQuietly(this);  deleteContents(directory);}  }
class C{  public static void initiateTileEntityEvent(TileEntity te,int event,boolean limitRange){  try {    if (NetworkManager_initiateTileEntityEvent == null)     NetworkManager_initiateTileEntityEvent=Class.forName(getPackage() + ".core.network.NetworkManager").getMethod("initiateTileEntityEvent",TileEntity.class,Integer.TYPE,Boolean.TYPE);    if (instance == null)     instance=getInstance();    NetworkManager_initiateTileEntityEvent.invoke(instance,te,event,limitRange);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void remove(int objectID){  Object object=idToObject.remove(objectID);  if (TRACE)   trace("kryonet","Object " + objectID + " removed from ObjectSpace: "+ object);}  }
class C{  private static void loadPagePool(ConfigServer configServer,Config config,Document doc){}  }
class C{  public static boolean attemptWord(Object object,Offset offset,Word oldValue,Word newValue){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  public static boolean shouldAllThrowIOExceptions(){  return VirtualFileSystem.getInstance().setShouldAllThrowIOExceptions();}  }
class C{  @Nullable public static PsiMethod findEqualsMethod(PsiClass clazz){  PsiMethod[] methods=clazz.findMethodsByName("equals",false);  for (  PsiMethod method : methods) {    if (!method.hasModifierProperty(PsiModifier.PUBLIC)) {      continue;    }    if (method.hasModifierProperty(PsiModifier.STATIC)) {      continue;    }    PsiType returnType=method.getReturnType();    if (!PsiType.BOOLEAN.equals(returnType)) {      continue;    }    PsiParameter[] parameters=method.getParameterList().getParameters();    if (parameters.length != 1) {      continue;    }    if (!(parameters[0].getType().getCanonicalText().equals(JAVA_LANG_OBJECT))) {      continue;    }    return method;  }  return null;}  }
class C{  protected void releaseBlob(int releaseOperation) throws SQLException {synchronized (getSynchronizationObject()) {    getDatabase().releaseObject(releaseOperation,getHandle());  }}  }
class C{  public final void testGetEncoded(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  EncodedKeySpec meks=new MyEncodedKeySpec(encodedKey);  byte[] ek=meks.getEncoded();  boolean result=true;  for (int i=0; i < encodedKey.length; i++) {    if (encodedKey[i] != ek[i]) {      result=false;    }  }  assertTrue(result);}  }
class C{  public boolean isDeprecated(){  return deprecated;}  }
class C{  private void configureAnnotationModel(final DocumentHandle documentHandle){  final AnnotationModel annotationModel=configuration.getAnnotationModel();  if (annotationModel == null) {    return;  }  if (textEditor instanceof HasAnnotationRendering) {    ((HasAnnotationRendering)textEditor).configure(annotationModel,documentHandle);  }  annotationModel.setDocumentHandle(documentHandle);  documentHandle.getDocEventBus().addHandler(DocumentChangeEvent.TYPE,annotationModel);  documentHandle.getDocEventBus().addHandler(QueryAnnotationsEvent.TYPE,annotationModel);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String flowAccumulationHeader=null;  String streamsHeader=null;  double mdInfPower=1;  String outputType=null;  String flowAccumTotalHeader=null;  String flowAccumRightHeader=null;  String flowAccumLeftHeader=null;  double initialValue;  double z;  int numRows;  int numCols;  double noData;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      flowAccumulationHeader=args[i];    } else     if (i == 2) {      streamsHeader=args[i];    } else     if (i == 3) {      mdInfPower=Double.parseDouble(args[i]);    } else     if (i == 4) {      outputType=args[i].toLowerCase();    } else     if (i == 5) {      caThreshold=Double.parseDouble(args[i]);    } else     if (i == 6) {      flowAccumTotalHeader=args[i];    } else     if (i == 7) {      flowAccumRightHeader=args[i];    } else     if (i == 8) {      flowAccumLeftHeader=args[i];    }  }  if ((demHeader == null) || (flowAccumulationHeader == null) || (streamsHeader == null)|| (flowAccumTotalHeader == null)|| (flowAccumRightHeader == null)|| (flowAccumLeftHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    flowAccumulation=new WhiteboxRaster(flowAccumulationHeader,"r");    streams=new WhiteboxRaster(streamsHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    flowAccumTotal=new WhiteboxRaster(flowAccumTotalHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    flowAccumTotal.setPreferredPalette("blueyellow.pal");    flowAccumTotal.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    flowAccumTotal.setZUnits("dimensionless");    flowAccumRight=new WhiteboxRaster(flowAccumRightHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    flowAccumRight.setPreferredPalette("blueyellow.pal");    flowAccumRight.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    flowAccumRight.setZUnits("dimensionless");    flowAccumLeft=new WhiteboxRaster(flowAccumLeftHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    flowAccumLeft.setPreferredPalette("blueyellow.pal");    flowAccumLeft.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    flowAccumLeft.setZUnits("dimensionless");    updateProgress("Loop 1 of 2:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        z=dem.getValue(row,col);        if (z != noData) {          flowAccumTotal.setValue(row,col,0);          flowAccumRight.setValue(row,col,0);          flowAccumLeft.setValue(row,col,0);        } else {          flowAccumTotal.setValue(row,col,noData);          flowAccumRight.setValue(row,col,noData);          flowAccumLeft.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("",(int)progress);    }    updateProgress("Loop 2 of 2:",0);switch (outputType) {case "specific catchment area (sca)":      initialValue=gridRes;    caThreshold=caThreshold * gridRes;  break;case "total catchment area":initialValue=gridRes * gridRes;caThreshold=caThreshold * gridRes * gridRes;break;default :initialValue=1;break;}for (int row=0; row < numRows; row++) {for (int col=0; col < numCols; col++) {if (streams.getValue(row,col) > 0) {flowAccumTotal.setValue(row,col,initialValue - caThreshold);flowAccumRight.setValue(row,col,(initialValue - caThreshold) / 2);flowAccumLeft.setValue(row,col,(initialValue - caThreshold) / 2);for (int c=0; c < 8; c++) {MDInfAccum(row + yd[c],col + xd[c],row,col,(c + 4) % 8,mdInfPower,noData);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("",(int)progress);}flowAccumTotal.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");flowAccumTotal.addMetadataEntry("Created on " + new Date());flowAccumRight.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");flowAccumRight.addMetadataEntry("Created on " + new Date());flowAccumLeft.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");flowAccumLeft.addMetadataEntry("Created on " + new Date());dem.close();flowAccumulation.close();streams.close();flowAccumTotal.close();flowAccumRight.close();flowAccumLeft.close();returnData(flowAccumTotalHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  static final public void addThreadInterruptedChecks(Template template){  try {    new ThreadInterruptionSupportTemplatePostProcessor().postProcess(template);  } catch (  TemplatePostProcessorException e) {    throw new RuntimeException("Template post-processing failed",e);  }}  }
class C{  private String parseResponse(long start,int maxRecords,BatchMaker batchMaker) throws StageException {  HttpSourceOffset sourceOffset=new HttpSourceOffset(resolvedUrl,currentParameterHash,System.currentTimeMillis(),getCurrentPage());  InputStream in=null;  if (parser == null) {    in=response.readEntity(InputStream.class);    try {      parser=parserFactory.getParser(sourceOffset.toString(),in,"0");    } catch (    DataParserException e) {      if (e.getErrorCode() == JSON_PARSER_00) {        LOG.warn("No data returned in HTTP response body.",e);        return sourceOffset.toString();      }      throw e;    }  }  try {    int subRecordCount=0;    Record record=null;    do {      record=parser.parse();      if (record == null) {        break;      }      if (conf.pagination.mode != PaginationMode.NONE && record.has(conf.pagination.resultFieldPath)) {        subRecordCount=parsePaginatedResult(batchMaker,sourceOffset.toString(),record);        recordCount+=subRecordCount;      } else {        addResponseHeaders(record.getHeader());        batchMaker.addRecord(record);        ++recordCount;      }    } while (recordCount < maxRecords && !waitTimeExpired(start));    if (record == null) {      cleanupResponse(in);      incrementSourceOffset(sourceOffset,subRecordCount);    }  } catch (  IOException e) {    errorRecordHandler.onError(Errors.HTTP_00,e.toString(),e);  }  return sourceOffset.toString();}  }
class C{  public static int hashCode(byte[][] field){  int result=0;  for (int i=0, size=field == null ? 0 : field.length; i < size; i++) {    byte[] element=field[i];    if (element != null) {      result=31 * result + Arrays.hashCode(element);    }  }  return result;}  }
class C{  public static void scaleM(double[] sm,int smOffset,double[] m,int mOffset,double x,double y,double z){  for (int i=0; i < 4; i++) {    int smi=smOffset + i;    int mi=mOffset + i;    sm[smi]=m[mi] * x;    sm[4 + smi]=m[4 + mi] * y;    sm[8 + smi]=m[8 + mi] * z;    sm[12 + smi]=m[12 + mi];  }}  }
class C{  public static byte[] decodeBase64(byte[] base64Data){  base64Data=discardNonBase64(base64Data);  if (base64Data.length == 0) {    return new byte[0];  }  int numberQuadruple=base64Data.length / FOURBYTE;  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0, marker0=0, marker1=0;  int encodedIndex=0;  int dataIndex=0;{    int lastData=base64Data.length;    while (base64Data[lastData - 1] == PAD) {      if (--lastData == 0) {        return new byte[0];      }    }    decodedData=new byte[lastData - numberQuadruple];  }  for (int i=0; i < numberQuadruple; i++) {    dataIndex=i * 4;    marker0=base64Data[dataIndex + 2];    marker1=base64Data[dataIndex + 3];    b1=base64Alphabet[base64Data[dataIndex]];    b2=base64Alphabet[base64Data[dataIndex + 1]];    if (marker0 != PAD && marker1 != PAD) {      b3=base64Alphabet[marker0];      b4=base64Alphabet[marker1];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);    } else     if (marker0 == PAD) {      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);    } else     if (marker1 == PAD) {      b3=base64Alphabet[marker0];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    }    encodedIndex+=3;  }  return decodedData;}  }
class C{  public char charAt(int pos){  return str.charAt(pos);}  }
class C{  public void detach(){  if (m_allowDetach) {    m_traverser=null;    super.detach();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void showError(String message,OutputStream output){  try {    byte[] buffer=ResponseUtils.generateJavaScriptLogFileDownLoad(message).getBytes("UTF-8");    IOUtils.copy(new BufferedInputStream(new ByteArrayInputStream(buffer)),output);  } catch (  IOException e) {    _logger.fatal("Error en ShowError",e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static ServiceParameter parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ServiceParameter object=new ServiceParameter();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"serviceParameter".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (ServiceParameter)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","parameterId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setParameterId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","value").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  ProblemBuilder withReferenceSet(File referenceSetFile){  this.referenceSetFile=referenceSetFile;  return this;}  }
class C{  protected Object[] evaluateSortCriteria(Object value){  CompiledSortCriterion csc;  Object[] array=null;  if (orderByAttrs != null) {    array=new Object[orderByAttrs.size()];    Iterator orderiter=orderByAttrs.iterator();    int i=0;    while (orderiter.hasNext()) {      csc=(CompiledSortCriterion)orderiter.next();      Object[] arr=new Object[2];      arr[0]=csc.evaluate(value,context);      arr[1]=Boolean.valueOf(csc.getCriterion());      array[i++]=arr;    }  }  return array;}  }
class C{  public static byte[] decode(final char[] data){  final int len=data.length;  final byte[] out=new byte[len >> 1];  for (int i=0, j=0; j < len; i++) {    int f=toDigit(data[j],j) << 4;    j++;    f=f | toDigit(data[j],j);    j++;    out[i]=(byte)(f & 0xFF);  }  return out;}  }
class C{  RegionIdleExpiryTask(LocalRegion reg){  super(reg);}  }
class C{  public int method1(String s){  return 0;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String substring;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  substring=child.substringData(9,10);  assertEquals("characterdataSubStringExceedsValueAssert","Martin",substring);}  }
class C{  private String generateExecutionData(String data){  return "global.$executionData = " + data + ";";}  }
class C{  @SuppressWarnings("unchecked") public final void testFactoryMethodWithContextAndResourceIdParameters(){  CharSequence errorMessage=getContext().getText(android.R.string.cancel);  Validator<Object> validator1=new AbstractValidatorImplementation("foo",true);  Validator<Object> validator2=new AbstractValidatorImplementation("bar",true);  Validator<Object>[] validators=new Validator[2];  validators[0]=validator1;  validators[1]=validator2;  DisjunctiveValidator<Object> disjunctiveValidator=DisjunctiveValidator.create(getContext(),android.R.string.cancel,validators);  assertEquals(errorMessage,disjunctiveValidator.getErrorMessage());  assertEquals(validators,disjunctiveValidator.getValidators());}  }
class C{  public Builder brokerList(String brokerList){  this.brokerList=brokerList;  return this;}  }
class C{  public NotificationPlayer(String tag){  if (tag != null) {    mTag=tag;  } else {    mTag="NotificationPlayer";  }}  }
class C{  public static void assertNotEquals(String itemName,char notExpected,char actual){  try {    if (notExpected == actual) {      Assert.fail(itemName + " should not be equal:<" + notExpected+ '>');    }  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public static void main(String[] args) throws ZeroVectorException {  FlagConfig flagConfig=FlagConfig.getFlagConfig(args);  args=flagConfig.remainingArgs;  ObjectVector[] resultsVectors=Search.getSearchResultVectors(flagConfig);  PrincipalComponents pcs=new PrincipalComponents(resultsVectors);  pcs.plotVectors();}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  this.put(d);  return this;}  }
class C{  public static ConferenceDFragment newInstance(){  ConferenceDFragment f=new ConferenceDFragment();  return f;}  }
class C{  public static void loadExcludesFile(File file) throws IOException {  excludes.clear();  excludes.putAll(loadPropertiesFromFile(file));}  }
class C{  @Override public String globalInfo(){  return "Exports the statistics using multiple exporters.";}  }
class C{  @Override public synchronized void close(){  if (mRefCount >= 0) {    mRefCount--;    if (mRefCount < 0) {      try {        mObject.close();      } catch (      Exception e) {        throw new RuntimeException(e);      } finally {        mObject=null;      }    }  }}  }
class C{  public static String removeQuotes(String s){  if (s == null) {    return null;  }  String trimmed=s.trim();  if (trimmed.length() == 0) {    return trimmed;  }  int i=nextNonQuoteIndex(trimmed,0,true);  int j=nextNonQuoteIndex(trimmed,trimmed.length() - 1,false);  return trimmed.substring(i,j + 1);}  }
class C{  public CompositeElement basicGetComposite(){  if (eContainerFeatureID() != SGraphPackage.REGION__COMPOSITE)   return null;  return (CompositeElement)eInternalContainer();}  }
class C{  public static void writeToFileComplex_3D(String format,int n1,int n2,int n3,double[] x,String filename){  int sliceStride=n2 * n3 * 2;  int rowStride=n3 * 2;  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename));    for (int k=0; k < 2 * n3; k=k + 2) {      out.newLine();      out.write("(:,:," + k / 2 + ")=");      out.newLine();      out.newLine();      for (int i=0; i < n1; i++) {        for (int j=0; j < n2; j++) {          if (x[i * sliceStride + j * rowStride + k + 1] == 0) {            out.write(String.format(format,x[i * sliceStride + j * rowStride + k]) + "\t");            continue;          }          if (x[i * sliceStride + j * rowStride + k] == 0) {            out.write(String.format(format,x[i * sliceStride + j * rowStride + k + 1]) + "i\t");            continue;          }          if (x[i * sliceStride + j * rowStride + k + 1] < 0) {            out.write(String.format(format,x[i * sliceStride + j * rowStride + k]) + " - " + String.format(format,-x[i * sliceStride + j * rowStride + k + 1])+ "i\t");            continue;          }          out.write(String.format(format,x[i * sliceStride + j * rowStride + k]) + " + " + String.format(format,x[i * sliceStride + j * rowStride + k + 1])+ "i\t");        }        out.newLine();      }    }    out.newLine();    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public ImmutableStack<T> pop(){  return tail;}  }
class C{  public void refreshAuthInfo() throws IOException {  advertiser.setDiscoverable(!authInfo.hasUser());}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof SegmentedTimeline) {    SegmentedTimeline other=(SegmentedTimeline)o;    boolean b0=(this.segmentSize == other.getSegmentSize());    boolean b1=(this.segmentsIncluded == other.getSegmentsIncluded());    boolean b2=(this.segmentsExcluded == other.getSegmentsExcluded());    boolean b3=(this.startTime == other.getStartTime());    boolean b4=equals(this.exceptionSegments,other.getExceptionSegments());    return b0 && b1 && b2&& b3&& b4;  } else {    return (false);  }}  }
class C{  public void addTreeModelListener(TreeModelListener l){}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case FunctionblockPackage.RETURN_OBJECT_TYPE__RETURN_TYPE:    setReturnType((Type)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected String saveNewSpecial(Object value,int index){  if (value == null)   return "NULL";  return value.toString();}  }
class C{  public CustomScoreQuery(Query subQuery){  this(subQuery,new FunctionQuery[0]);}  }
class C{  protected void csrf(HttpSecurity http) throws Exception {  http.csrf().csrfTokenRepository(csrfTokenRepository()).and().addFilterAfter(new LemonCsrfFilter(),CsrfFilter.class);}  }
class C{  public Solution(int numberOfVariables,int numberOfObjectives,int numberOfConstraints){  variables=new Variable[numberOfVariables];  objectives=new double[numberOfObjectives];  constraints=new double[numberOfConstraints];  attributes=new HashMap<String,Serializable>();}  }
class C{  protected void addSeparator(String parent){  if (parent != null && isSubmenu(parent)) {    getSubmenu(parent).addSeparator();  } else {    addSeparator();  }}  }
class C{  public ComputeNodeResult(List<FeatureFunction> featureFunctions,Rule rule,List<HGNode> tailNodes,int i,int j,SourcePath sourcePath,Sentence sentence){  this.viterbiCost=0.0f;  if (LOG.isDebugEnabled()) {    LOG.debug("ComputeNodeResult():");    LOG.debug("-> RULE {}",rule);  }  if (null != tailNodes) {    for (    HGNode item : tailNodes) {      if (LOG.isDebugEnabled()) {        LOG.debug("-> item.bestedge: {}",item);        LOG.debug("-> TAIL NODE {}",item);      }      viterbiCost+=item.bestHyperedge.getBestDerivationScore();    }  }  List<DPState> allDPStates=new ArrayList<>();  this.transitionCost=0.0f;  this.futureCostEstimate=0.0f;  for (  FeatureFunction feature : featureFunctions) {    FeatureFunction.ScoreAccumulator acc=feature.new ScoreAccumulator();    DPState newState=feature.compute(rule,tailNodes,i,j,sourcePath,sentence,acc);    this.transitionCost+=acc.getScore();    if (LOG.isDebugEnabled()) {      LOG.debug("FEATURE {} = {} * {} = {}",feature.getName(),acc.getScore() / Decoder.weights.getSparse(feature.getName()),Decoder.weights.getSparse(feature.getName()),acc.getScore());    }    if (feature.isStateful()) {      futureCostEstimate+=feature.estimateFutureCost(rule,newState,sentence);      allDPStates.add(((StatefulFF)feature).getStateIndex(),newState);    }  }  this.viterbiCost+=transitionCost;  if (LOG.isDebugEnabled())   LOG.debug("-> COST = {}",transitionCost);  this.dpStates=allDPStates;}  }
class C{  public ReplDBMSEvent(long seqno,short fragno,boolean lastFrag,String sourceId,long epochNumber,Timestamp extractedTstamp,DBMSEvent event){  this.seqno=seqno;  this.fragno=fragno;  this.lastFrag=lastFrag;  this.epochNumber=epochNumber;  if (sourceId == null)   this.sourceId="NONE"; else   this.sourceId=sourceId;  if (extractedTstamp == null)   this.extractedTstamp=new Timestamp(System.currentTimeMillis()); else   this.extractedTstamp=extractedTstamp;  if (event == null)   this.event=new DBMSEvent(); else   this.event=event;}  }
class C{  private static float CallFloatMethodA(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallFloatMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Float,false);  return Reflection.unwrapFloat(returnObj);}  }
class C{  public boolean unsubscribeSMIProviderConnection(String smisProviderURI){  _log.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  boolean isSuccess=false;  try {    _log.debug("Un-Subscribe initiated for SMIS provider :{}",smisProviderURI);    CimConnection cimConnection=getSMISProviderConnection(smisProviderURI);    if (null != cimConnection) {      _connectionManager.unsubscribe(cimConnection);      isSuccess=true;    }  } catch (  Exception e) {    _log.error("Un-subscription for the SMIS provider {} is failed",smisProviderURI);    _log.error(e.getMessage(),e);  }  _log.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());  return isSuccess;}  }
class C{  protected GridCacheNodeFailureAbstractTest(){  super(false);}  }
class C{  public static int computeRawMessageSetExtensionSize(final int fieldNumber,final ByteString value){  return computeTagSize(WireFormat.MESSAGE_SET_ITEM) * 2 + computeUInt32Size(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber) + computeBytesSize(WireFormat.MESSAGE_SET_MESSAGE,value);}  }
class C{  public void render(){  int totalTabs=this.tabs.size();  int topTabs=this.visibleTab + 1;  int bottomTabs=totalTabs - topTabs;  Iterator<String> itr=this.tabs.keySet().iterator();  this.topPanel.removeAll();  GridLayout topLayout=(GridLayout)this.topPanel.getLayout();  topLayout.setRows(topTabs);  TabInfo tabInfo=null;  for (int i=0; i < topTabs; i++) {    String tabName=itr.next();    tabInfo=this.tabs.get(tabName);    this.topPanel.add(tabInfo.getHeader());  }  this.topPanel.validate();  this.visibleComponent.removeAll();  this.visibleComponent.add(tabInfo.getComponent(),BorderLayout.NORTH);  this.visibleComponent.validate();  GridBagConstraints c=new GridBagConstraints();  c.fill=GridBagConstraints.BOTH;  c.gridy=1;  c.weightx=1.0;  c.weighty=1.0;  this.add(this.visibleComponent,c);  this.bottomPanel.removeAll();  GridLayout bottomLayout=(GridLayout)this.bottomPanel.getLayout();  bottomLayout.setRows(bottomTabs);  for (int i=0; i < bottomTabs; i++) {    String tabName=itr.next();    tabInfo=this.tabs.get(tabName);    this.bottomPanel.add(tabInfo.getHeader());  }  this.bottomPanel.validate();  validate();}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.SIMPLE_TYPE_REFERENCE__OWNER:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return basicSetOwner((Composite)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public static double logpdf(double val,int v){  return GammaDistribution.logGamma((v + 1) * .5) - GammaDistribution.logGamma(v * .5) - .5 * Math.log(v * Math.PI) + Math.log1p(val * val / v) * -.5 * (v + 1);}  }
class C{  public static final double myRand(double seed){  double t=16807.0 * seed + 1;  seed=t - (2147483647.0 * Math.floor(t / 2147483647.0));  return seed;}  }
class C{  public void populateDAO(Object value,int row,int column){  final Strategy element=(Strategy)getData().getAspect().get(row);switch (column) {case 0:{      element.setName(((String)value).trim());      break;    }case 1:{    element.setDescription((String)value);    break;  }case 2:{  element.setClassName(((String)value).trim());  break;}case 3:{if (value instanceof DAOStrategyManager) {  if (!Decode.NONE.equals(((DAOStrategyManager)value).getDisplayName())) {    element.setStrategyManager((Strategy)((DAOStrategyManager)value).getObject());  } else {    element.setStrategyManager(null);  }}break;}case 4:{element.setMarketData(new Boolean(((YesNo)value).getCode()));break;}default :{}}element.setDirty(true);}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public Builder backgroundDrawableRes(@DrawableRes int sliderBackgroundDrawableRes){  return this;}  }
class C{  protected void convertUnicode(){  if (ch == '\\' && unicodeConversionBp != bp) {    bp++;    ch=buf[bp];    if (ch == 'u') {      do {        bp++;        ch=buf[bp];      } while (ch == 'u');      int limit=bp + 3;      if (limit < buflen) {        int d=digit(bp,16);        int code=d;        while (bp < limit && d >= 0) {          bp++;          ch=buf[bp];          d=digit(bp,16);          code=(code << 4) + d;        }        if (d >= 0) {          ch=(char)code;          unicodeConversionBp=bp;          return;        }      }      log.error(bp,"illegal.unicode.esc");    } else {      bp--;      ch='\\';    }  }}  }
class C{  @PostMapping("/users/{changeEmailCode}/change-email") public void changeEmail(@PathVariable String changeEmailCode){  log.debug("Changing email of user ...");  lemonService.changeEmail(changeEmailCode);}  }
class C{  public BitcoinURI(@Nullable NetworkParameters params,String input) throws BitcoinURIParseException {  checkNotNull(input);  log.debug("Attempting to parse '{}' for {}",input,params == null ? "any" : params.getId());  URI uri;  try {    uri=new URI(input);  } catch (  URISyntaxException e) {    throw new BitcoinURIParseException("Bad URI syntax",e);  }  String schemeSpecificPart;  if (input.startsWith("bitcoin://")) {    schemeSpecificPart=input.substring("bitcoin://".length());  } else   if (input.startsWith("bitcoin:")) {    schemeSpecificPart=input.substring("bitcoin:".length());  } else {    throw new BitcoinURIParseException("Unsupported URI scheme: " + uri.getScheme());  }  String[] addressSplitTokens=schemeSpecificPart.split("\\?");  if (addressSplitTokens.length == 0)   throw new BitcoinURIParseException("No data found after the bitcoin: prefix");  String addressToken=addressSplitTokens[0];  String[] nameValuePairTokens;  if (addressSplitTokens.length == 1) {    nameValuePairTokens=new String[]{};  } else {    if (addressSplitTokens.length == 2) {      nameValuePairTokens=addressSplitTokens[1].split("&");    } else {      throw new BitcoinURIParseException("Too many question marks in URI '" + uri + "'");    }  }  parseParameters(params,addressToken,nameValuePairTokens);  if (!addressToken.isEmpty()) {    try {      Address address=new Address(params,addressToken);      putWithValidation(FIELD_ADDRESS,address);    } catch (    final AddressFormatException e) {      throw new BitcoinURIParseException("Bad address",e);    }  }  if (addressToken.isEmpty() && getPaymentRequestUrl() == null) {    throw new BitcoinURIParseException("No address and no r= parameter found");  }}  }
class C{  @Override final public void onFailure(int statusCode,Header[] headers,String responseBody,Throwable error){  final HttpManager.HttpConfig httpConfig=this.httpConfig;  if (DEBUG)   Log.v(LOG_TAG,"onFailure statusCode = " + statusCode + " responseBody = "+ responseBody);  if (httpConfig != null) {    ErrorCodeHandler errorCodeHandler=httpConfig.getErrorCodeHandler();    if (errorCodeHandler != null) {      final String content=errorCodeHandler.processError(statusCode);      processResult(headers,content);    } else {      processResult(headers,responseBody);    }  }}  }
class C{  public final String encodeVersionIntoGroupPath(final String groupName,final ResourceType resourceType,final boolean minimize){  final CacheKey key=new CacheKey(groupName,resourceType,minimize);  final CacheValue cacheValue=cacheStrategy.get(key);  final String groupUrl=groupExtractor.encodeGroupUrl(groupName,resourceType,minimize);  return formatVersionedResource(cacheValue.getHash(),groupUrl);}  }
class C{  protected final JsonToken _handleUnexpectedValue(int i) throws IOException, JsonParseException {  if (i != INT_APOSTROPHE || !isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {    _reportUnexpectedChar(i,"expected a valid value (number, String, array, object, 'true', 'false' or 'null')");  }  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();  int outPtr=_textBuffer.getCurrentSegmentSize();  while (true) {    if (_inputPtr >= _inputEnd) {      if (!loadMore()) {        _reportInvalidEOF(": was expecting closing quote for a string value");      }    }    char c=_inputBuffer[_inputPtr++];    i=(int)c;    if (i <= INT_BACKSLASH) {      if (i == INT_BACKSLASH) {        c=_decodeEscaped();      } else       if (i <= INT_APOSTROPHE) {        if (i == INT_APOSTROPHE) {          break;        }        if (i < INT_SPACE) {          _throwUnquotedSpace(i,"string value");        }      }    }    if (outPtr >= outBuf.length) {      outBuf=_textBuffer.finishCurrentSegment();      outPtr=0;    }    outBuf[outPtr++]=c;  }  _textBuffer.setCurrentLength(outPtr);  return JsonToken.VALUE_STRING;}  }
class C{  public void associateAsyncPrettyPrinterWithId(String requestId,AsyncPrettyPrinter asyncPrettyPrinter){  if (mRequestIdMap.put(requestId,asyncPrettyPrinter) != null) {    throw new IllegalArgumentException("cannot associate different " + "pretty printers with the same request id: " + requestId);  }}  }
class C{  @Override public final void postSetUp() throws Exception {  final Host host=Host.getHost(0);  server1=host.getVM(0);  server2=host.getVM(1);  client1=host.getVM(2);  client2=host.getVM(3);}  }
class C{  @Override public boolean checkAndPut(byte[] row,byte[] family,byte[] qualifier,CompareFilter.CompareOp compareOp,byte[] value,Put put) throws IOException {  return false;}  }
class C{  public static void registerSatelliteProperty(ItemStack stack,SatelliteProperties properties){  if (stack == null) {    Logger.getLogger(Constants.modId).warning("null satellite property being registered!");  } else   if (!itemPropertiesRegistry.containsKey(stack))   itemPropertiesRegistry.put(stack,properties); else   Logger.getLogger(Constants.modId).warning("Duplicate satellite property being registered for " + stack.toString());}  }
class C{  public Collection<Stmt> targetsOfLoopExit(Stmt loopExit){  assert getLoopExits().contains(loopExit);  List<Unit> succs=g.getSuccsOf(loopExit);  Collection<Stmt> res=new HashSet<Stmt>();  for (  Unit u : succs) {    Stmt s=(Stmt)u;    res.add(s);  }  res.removeAll(loopStatements);  return res;}  }
class C{  public static void fArraySet(float[] a,int i,float v){  try {    a[i]=v;  } catch (  Throwable t) {    a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)]=v;  }}  }
class C{  public boolean canBeSubmittedAfterUnknownFailure(Jobs jobs){  if (stateUnknown) {    if (this.getExecutions().size() < this.getStep(jobs).getRetries()) {      this.stateUnknown=false;      return true;    }  }  return false;}  }
class C{  public ReadInputDiscretesResponse(int count){  super();  setFunctionCode(Modbus.READ_INPUT_DISCRETES);  setBitCount(count);}  }
class C{  public void open() throws IOException {  if (isOpen)   return;  try {    tbl=EagleConfigFactory.load().getHTable(schema.getTable());  } catch (  RuntimeException ex) {    throw new IOException(ex);  }  String rowkeyRegex=buildRegex2(searchTags);  RegexStringComparator regexStringComparator=new RegexStringComparator(rowkeyRegex);  regexStringComparator.setCharset(Charset.forName("ISO-8859-1"));  RowFilter filter=new RowFilter(CompareOp.EQUAL,regexStringComparator);  FilterList filterList=new FilterList();  filterList.addFilter(filter);  Scan s1=new Scan();  s1.setStartRow(stopKey);  s1.setStopRow(startKey);  s1.setFilter(filterList);  s1.setCaching(100);  s1.setCacheBlocks(true);  for (  byte[] qualifier : qualifiers) {    s1.addColumn(schema.getColumnFamily().getBytes(),qualifier);  }  rs=tbl.getScanner(s1);  isOpen=true;}  }
class C{  private void loadData(){  DataProvider provider=DataProvider.getInstance();  provider.init(GApplication.getRockyApplication());  provider.loadCategoryList(getContext());  provider.loadChapterList(getContext());}  }
class C{  public static int indexOfChars(String str,String chars,int fromIndex){  final int len=str.length();  for (int pos=fromIndex; pos < len; pos++) {    if (chars.indexOf(str.charAt(pos)) >= 0) {      return pos;    }  }  return -1;}  }
class C{  public void reset(){synchronized (lock) {    time=BEFORE_SIMULATION;    steps=0;    queue=createHeap();    sealed=false;  }}  }
class C{  protected void drawLinear(Canvas c,LineDataSet dataSet,List<Entry> entries){  int dataSetIndex=mChart.getLineData().getIndexOfDataSet(dataSet);  Transformer trans=mChart.getTransformer(dataSet.getAxisDependency());  float phaseX=mAnimator.getPhaseX();  float phaseY=mAnimator.getPhaseY();  mRenderPaint.setStyle(Paint.Style.STROKE);  Canvas canvas=null;  if (dataSet.isDashedLineEnabled()) {    canvas=mBitmapCanvas;  } else {    canvas=c;  }  Entry entryFrom=dataSet.getEntryForXIndex(mMinX);  Entry entryTo=dataSet.getEntryForXIndex(mMaxX);  int minx=Math.max(dataSet.getEntryPosition(entryFrom),0);  int maxx=Math.min(dataSet.getEntryPosition(entryTo) + 1,entries.size());  int range=(maxx - minx) * 4 - 4;  LineBuffer buffer=mLineBuffers[dataSetIndex];  buffer.setPhases(phaseX,phaseY);  buffer.limitFrom(minx);  buffer.limitTo(maxx);  buffer.feed(entries);  trans.pointValuesToPixel(buffer.buffer);  if (dataSet.getColors().size() > 1) {    for (int j=0; j < range; j+=4) {      if (!mViewPortHandler.isInBoundsRight(buffer.buffer[j]))       break;      if (!mViewPortHandler.isInBoundsLeft(buffer.buffer[j + 2]) || (!mViewPortHandler.isInBoundsTop(buffer.buffer[j + 1]) && !mViewPortHandler.isInBoundsBottom(buffer.buffer[j + 3])) || (!mViewPortHandler.isInBoundsTop(buffer.buffer[j + 1]) && !mViewPortHandler.isInBoundsBottom(buffer.buffer[j + 3])))       continue;      mRenderPaint.setColor(dataSet.getColor(j / 4 + minx));      canvas.drawLine(buffer.buffer[j],buffer.buffer[j + 1],buffer.buffer[j + 2],buffer.buffer[j + 3],mRenderPaint);    }  } else {    mRenderPaint.setColor(dataSet.getColor());    canvas.drawLines(buffer.buffer,0,range,mRenderPaint);  }  mRenderPaint.setPathEffect(null);  if (dataSet.isDrawFilledEnabled() && entries.size() > 0) {    drawLinearFill(c,dataSet,entries,minx,maxx,trans);  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  @SuppressWarnings("static-access") private void output(Level level,String sourceClass,String sourceMethod,String msg,Object[] params){  String message=formatMessage(level,sourceClass,sourceMethod,msg,params);  if (s_gui != null) {    if (level.equals(Level.WARNING) && msg.equals("migrateDoNotInterrupt")) {      s_gui.doNotInterrupt();    } else {      if (level.equals(Level.INFO)) {        s_gui.getStep().setText(message);        s_gui.getAction().setText("");        s_gui.getDetail().setText("");      } else       if (level.equals(Level.CONFIG)) {        s_gui.getAction().setText(message);        s_gui.getDetail().setText("");      } else       if (level.equals(Level.FINE)) {        s_gui.getDetail().setText(message);      } else       if (level.equals(Level.SEVERE)) {        s_gui.logError(message);      } else       if (level.equals(Level.WARNING)) {        s_gui.logWarning(message);      }      if (level.intValue() >= getMaxLogLevel().intValue()) {        s_gui.logTrace(message);      }    }  } else {    if (!s_parameters.isSilentMode()) {      if (level.equals(Level.WARNING) && msg.equals("migrateDoNotInterrupt")) {        System.out.println("");        System.out.print(message);        System.out.println("");      } else {        if (level.intValue() >= getMaxLogLevel().intValue()) {          System.out.print(message);        }      }    }  }}  }
class C{  public FileShareExport(List<String> clients,String securityType,String permissions,String rootUserMapping,String protocol,String storagePortName,String storagePort,String path,String mountPath,String subDirectory,String comments){  _clients=clients;  for (  String secType : securityType.split(SEC_SEPARATOR)) {    if (_securityType == null) {      _securityType=new HashSet<SecurityTypes>();    }    _securityType.add(Enum.valueOf(SecurityTypes.class,secType.trim()));  }  _permissions=Enum.valueOf(Permissions.class,permissions);  _rootUserMapping=rootUserMapping;  _storagePortName=storagePortName;  _protocol=Enum.valueOf(StorageProtocol.File.class,protocol);  _storagePort=storagePort;  _path=path;  _mountPath=mountPath;  _comments=comments;  _subDirectory=subDirectory;}  }
class C{  public void generateOptimizedBoolean(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  if ((this.constant != Constant.NotAConstant) && (this.constant.typeID() == TypeIds.T_boolean)) {    super.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);    return;  }switch ((this.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT) {case LESS:    generateOptimizedLessThan(currentScope,trueLabel,falseLabel,valueRequired);  return;case LESS_EQUAL:generateOptimizedLessThanOrEqual(currentScope,trueLabel,falseLabel,valueRequired);return;case GREATER:generateOptimizedGreaterThan(currentScope,trueLabel,falseLabel,valueRequired);return;case GREATER_EQUAL:generateOptimizedGreaterThanOrEqual(currentScope,trueLabel,falseLabel,valueRequired);return;case AND:generateOptimizedLogicalAnd(currentScope,trueLabel,falseLabel,valueRequired);return;case OR:generateOptimizedLogicalOr(currentScope,trueLabel,falseLabel,valueRequired);return;case XOR:generateOptimizedLogicalXor(currentScope,trueLabel,falseLabel,valueRequired);return;}super.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);}  }
class C{  public static Class<?> loadClassSafe(final String klassName){  try {    return Class.forName(klassName);  } catch (  ClassNotFoundException e) {    return null;  }}  }
class C{  public void parse(String line,String timeKey) throws Exception {  if (line.startsWith(FLAG)) {    String[] items=line.split(",",6);    if (items.length != 6) {      return;    }    if (!items[1].equals(timeKey)) {      return;    }    Usage usage=new Usage();    usage.setUser(NumberUtils.toFloat(items[2]));    usage.setSys(NumberUtils.toFloat(items[3]));    usage.setWait(NumberUtils.toFloat(items[4]));    if (CPU_ALL.equals(items[0])) {      allUsage=usage;    } else {      usage.setName(items[0]);      cpuList.add(usage);    }  }}  }
class C{  public static double precision(double truePositive,double falsePositive){  return truePositive / (falsePositive + truePositive);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static double roundUpY(final double startValue){  return startValue + yStep;}  }
class C{  static HttpParams newDefaultHttpParams(){  HttpParams params=new BasicHttpParams();  HttpConnectionParams.setStaleCheckingEnabled(params,false);  HttpConnectionParams.setSocketBufferSize(params,8192);  ConnManagerParams.setMaxTotalConnections(params,200);  ConnManagerParams.setMaxConnectionsPerRoute(params,new ConnPerRouteBean(20));  return params;}  }
class C{  public static SourceConfiguration copy(SourceConfiguration config){  if (config != null) {switch (config.getSourceType()) {case MIXER:      SourceConfigMixer originalMixer=(SourceConfigMixer)config;    SourceConfigMixer copyMixer=new SourceConfigMixer();  copyMixer.setChannel(originalMixer.getChannel());copyMixer.setMixer(originalMixer.getMixer());return copyMixer;case RECORDING:SourceConfigRecording originalRec=(SourceConfigRecording)config;SourceConfigRecording copyRec=new SourceConfigRecording();copyRec.setFrequency(originalRec.getFrequency());copyRec.setRecordingAlias(originalRec.getRecordingAlias());return copyRec;case TUNER:SourceConfigTuner originalTuner=(SourceConfigTuner)config;SourceConfigTuner copyTuner=new SourceConfigTuner();copyTuner.setFrequency(originalTuner.getFrequency());return copyTuner;case NONE:default :return new SourceConfigNone();}}return null;}  }
class C{  @Override public Token recoverInline(Parser recognizer) throws RecognitionException {  InputMismatchException e=new InputMismatchException(recognizer);  String policies=recognizer.getInputStream().getText();  StringTokenizer tk=new StringTokenizer(policies,";");  String policy="";  int idx=0;  while (tk.hasMoreElements()) {    policy=(String)tk.nextElement();    idx+=policy.length();    if (idx >= e.getOffendingToken().getStartIndex()) {      break;    }  }  String message=Messages.get(Messages.DEFAULT_LOCALE,"error_invalid_firewallconfig",new Object[]{e.getOffendingToken().getText(),policy});  throw new RuntimeException(message);}  }
class C{  public Configurator recordNoCommands(){  recordCommandStateChanges=true;  return this;}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  private static void decodeC40Segment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < C40_BASIC_SET_CHARS.length) {          char c40char=C40_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(c40char + 128));            upperShift=false;          } else {            result.append(c40char);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < C40_SHIFT2_SET_CHARS.length) {char c40char=C40_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(c40char + 128));  upperShift=false;} else {  result.append(c40char);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (upperShift) {result.append((char)(cValue + 224));upperShift=false;} else {result.append((char)(cValue + 96));}shift=0;break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  public static DateTimeFormatter hour(){  return hourElement();}  }
class C{  public static double assignProbabilitiesToInstances(Relation<? extends NumberVector> relation,List<? extends EMClusterModel<?>> models,WritableDataStore<double[]> probClusterIGivenX){  final int k=models.size();  double emSum=0.;  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    NumberVector vec=relation.get(iditer);    double[] probabilities=new double[k];{      int i=0;      for (      EMClusterModel<?> m : models) {        probabilities[i]=m.estimateDensity(vec);        ++i;      }    }    double priorProbability=0.;    for (int i=0; i < k; i++) {      priorProbability+=probabilities[i];    }    double logP=Math.max(Math.log(priorProbability),MIN_LOGLIKELIHOOD);    emSum+=(logP == logP) ? logP : 0.;    double[] clusterProbabilities=new double[k];    if (priorProbability > 0.) {      for (int i=0; i < k; i++) {        clusterProbabilities[i]=probabilities[i] / priorProbability;      }    }    probClusterIGivenX.put(iditer,clusterProbabilities);  }  return emSum / relation.size();}  }
class C{  public boolean equals(Object t1){  try {    Matrix4f m2=(Matrix4f)t1;    return (this.m00 == m2.m00 && this.m01 == m2.m01 && this.m02 == m2.m02 && this.m03 == m2.m03 && this.m10 == m2.m10 && this.m11 == m2.m11 && this.m12 == m2.m12 && this.m13 == m2.m13 && this.m20 == m2.m20 && this.m21 == m2.m21 && this.m22 == m2.m22 && this.m23 == m2.m23 && this.m30 == m2.m30 && this.m31 == m2.m31 && this.m32 == m2.m32 && this.m33 == m2.m33);  } catch (  ClassCastException e1) {    return false;  }catch (  NullPointerException e2) {    return false;  }}  }
class C{  public static double[][] valueMatrix(List<EvaluationStatistics> stats,String measurement){  List<Number> result;  List<String> classifiers=EvaluationStatisticsUtils.commandLines(stats,true);  List<String> relations=EvaluationStatisticsUtils.relations(stats,true);  int N=relations.size();  int k=classifiers.size();  double V[][]=new double[N][k];  for (int i=0; i < N; i++) {    for (int j=0; j < k; j++) {      List<Number> measurements=EvaluationStatisticsUtils.measurements(stats,classifiers.get(j),relations.get(i),measurement);      V[i][j]=(double)measurements.get(0);    }  }  return V;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  if (xctxt.isSecureProcessing())   throw new javax.xml.transform.TransformerException(XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,new Object[]{toString()}));  XObject result;  Vector argVec=new Vector();  int nArgs=m_argVec.size();  for (int i=0; i < nArgs; i++) {    Expression arg=(Expression)m_argVec.elementAt(i);    XObject xobj=arg.execute(xctxt);    xobj.allowDetachToRelease(false);    argVec.addElement(xobj);  }  ExtensionsProvider extProvider=(ExtensionsProvider)xctxt.getOwnerObject();  Object val=extProvider.extFunction(this,argVec);  if (null != val) {    result=XObject.create(val,xctxt);  } else {    result=new XNull();  }  return result;}  }
class C{  public TeXFormula addStrut(int widthUnit,float width,int heightUnit,float height,int depthUnit,float depth) throws InvalidUnitException {  return add(new SpaceAtom(widthUnit,width,heightUnit,height,depthUnit,depth));}  }
class C{  public boolean containsPoint(float scrnX,float scrnY){  return (scrnX >= minX && scrnX <= maxX && scrnY >= minY && scrnY <= maxY);}  }
class C{  public double eval(double params[]){  double p1=params[0];  double p2=params[1];  double p3=params[2];  double p4=params[3];  return (p1 != p2) ? p3 : p4;}  }
class C{  public ZBForceSampleRequest(XBeeAddress64 dest64){  super(XBeeRequest.DEFAULT_FRAME_ID,dest64,XBeeAddress16.ZNET_BROADCAST,false,"IS",null);}  }
class C{  public static <T>List<T> createUnsafeList(int initial){  return new UnsafeArrayList<>(initial);}  }
class C{  @Override public ImmutableSet<Entry<K,V>> entries(){  ImmutableSet<Entry<K,V>> result=entries;  return result == null ? (entries=new EntrySet<K,V>(this)) : result;}  }
class C{  public static boolean contains(int[] self,Object value){  for (  int next : self) {    if (DefaultTypeTransformation.compareEqual(value,next))     return true;  }  return false;}  }
class C{  public StorageException(String message,Throwable cause){  super(message,cause);}  }
class C{  public synchronized void run(){  running=true;  while (running) {    if (s == null) {      try {        log(this + " Moving to wait state");        wait();      } catch (      InterruptedException e) {        continue;      }      if (!running)       break;    }    try {      handleClient();    } catch (    Exception e) {      e.printStackTrace();    }    s=null;    Vector pool=threads;synchronized (pool) {      if (pool.size() >= workers) {        activeThreads.remove(this);        return;      } else {        pool.addElement(this);      }    }  }  log(this + " terminated");}  }
class C{  public void clearTours(){synchronized (tours) {    tours.clear();  }  if (autoRepaint) {    repaint();  }}  }
class C{  public static boolean launch(String toLaunch){  if (toLaunch == null) {    throw new IllegalArgumentException("launch string must not be null");  }  if (File.separatorChar == '/' && toLaunch.charAt(0) == '/' && System.getProperty("os.name").startsWith("Mac OS X") == false) {    toLaunch="/." + toLaunch;  }  if (toLaunch.startsWith("\\\\")) {    return launchUNC(toLaunch);  } else {    return Program.launch(toLaunch);  }}  }
class C{  public boolean isMeasureWithLargestChildEnabled(){  return mUseLargestChild;}  }
class C{  @Override public <R>LazyImmutable<R> map(final Function<? super T,? extends R> fn){  final T val=get();  if (val == UNSET)   return (LazyImmutable)this; else   return LazyImmutable.of(fn.apply(val));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetprevioussiblingnull.class,args);}  }
class C{  protected void updateSelectedPathsFromSelectedRows(){  if (!updatingListSelectionModel) {    updatingListSelectionModel=true;    try {      int min=listSelectionModel.getMinSelectionIndex();      int max=listSelectionModel.getMaxSelectionIndex();      clearSelection();      if (min != -1 && max != -1) {        for (int counter=min; counter <= max; counter++) {          if (listSelectionModel.isSelectedIndex(counter)) {            TreePath selPath=tree.getPathForRow(counter);            if (selPath != null) {              addSelectionPath(selPath);            }          }        }      }    }  finally {      updatingListSelectionModel=false;    }  }}  }
class C{  @Override public void write(final DataOutput out) throws IOException {  group.write(out);  key.write(out);  value.write(out);}  }
class C{  public static <T>Mono<Boolean> sequenceEqual(Publisher<? extends T> source1,Publisher<? extends T> source2){  return sequenceEqual(source1,source2,equalsBiPredicate(),QueueSupplier.SMALL_BUFFER_SIZE);}  }
class C{  public int charDistance(char a,char b){  return Math.abs(Character.getNumericValue(a) - Character.getNumericValue(b));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.374 -0500",hash_original_method="232A1CFA6D80CA7330EFAD4BFAE5B761",hash_generated_method="FD34A2227005D779019D5DA5D9DC12A9") public static String stripSeparators(String phoneNumber){  if (phoneNumber == null) {    return null;  }  int len=phoneNumber.length();  StringBuilder ret=new StringBuilder(len);  for (int i=0; i < len; i++) {    char c=phoneNumber.charAt(i);    if (isNonSeparator(c)) {      ret.append(c);    }  }  return ret.toString();}  }
class C{  public static Border createImageScaledBorder(Image top,Image bottom,Image left,Image right,Image topLeft,Image topRight,Image bottomLeft,Image bottomRight,Image background){  Border b=new Border();  b.type=TYPE_IMAGE_SCALED;  b.images=new Image[]{top,bottom,left,right,topLeft,topRight,bottomLeft,bottomRight,background};  return b;}  }
class C{  public final boolean isProtected(){  return Modifier.isProtected(getModifiers());}  }
class C{  public void release(){  stop();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected void determineCoverageGoals(){  List<TryCatchCoverageTestFitness> goals=new TryCatchCoverageFactory().getCoverageGoals();  for (  TryCatchCoverageTestFitness goal : goals) {    if (Properties.TEST_ARCHIVE)     TestsArchive.instance.addGoalToCover(this,goal);    branchesId.add(goal.getBranch().getActualBranchId());    if (goal.getBranchExpressionValue())     branchCoverageTrueMap.put(goal.getBranch().getActualBranchId(),goal); else     branchCoverageFalseMap.put(goal.getBranch().getActualBranchId(),goal);  }  totalGoals=goals.size();}  }
class C{  private static Room findLatestOneToOneRoom(final MXSession aSession,final String aSearchedUserId){  long serverTimeStamp=0, newServerTimeStamp;  RoomSummary summary;  Room mostRecentRoomRetValue=null;  IMXStore mStore=aSession.getDataHandler().getStore();  ArrayList<Room> roomsFoundList=findOneToOneRoomList(aSession,aSearchedUserId);  if (!roomsFoundList.isEmpty()) {    for (    Room room : roomsFoundList) {      summary=mStore.getSummary(room.getRoomId());      try {        if ((null != summary) && ((newServerTimeStamp=summary.getLatestReceivedEvent().getOriginServerTs()) > serverTimeStamp)) {          mostRecentRoomRetValue=room;          serverTimeStamp=newServerTimeStamp;        }      } catch (      Exception ex) {        Log.e(LOG_TAG,"## findLatestOneToOneRoom(): Exception Msg=" + ex.getMessage());      }    }  }  return mostRecentRoomRetValue;}  }
class C{  @Nullable private static String resolveProjectHome(){  assert Thread.holdsLock(IgniteUtils.class);  String ggHome0=IgniteSystemProperties.getString(IGNITE_HOME);  if (!F.isEmpty(ggHome0))   return ggHome0;  String appWorkDir=System.getProperty("user.dir");  if (appWorkDir != null) {    ggHome0=findProjectHome(new File(appWorkDir));    if (ggHome0 != null)     return ggHome0;  }  URI classesUri;  Class<IgniteUtils> cls=IgniteUtils.class;  try {    ProtectionDomain domain=cls.getProtectionDomain();    if (domain == null || domain.getCodeSource() == null || domain.getCodeSource().getLocation() == null) {      logResolveFailed(cls,null);      return null;    }    classesUri=domain.getCodeSource().getLocation().toURI();    if (isWindows() && classesUri.getAuthority() != null)     classesUri=new URI(classesUri.toString().replace("file://","file:/"));  } catch (  URISyntaxException|SecurityException e) {    logResolveFailed(cls,e);    return null;  }  File classesFile;  try {    classesFile=new File(classesUri);  } catch (  IllegalArgumentException e) {    logResolveFailed(cls,e);    return null;  }  return findProjectHome(classesFile);}  }
class C{  public void addComponent(Component button){  if (m_addlButtons == null) {    m_addlButtons=new CPanel(new FlowLayout(FlowLayout.LEFT));    this.add(m_addlButtons,BorderLayout.WEST);  }  m_addlButtons.add(button);}  }
class C{  public static EWMA fifteenMinuteEWMA(){  return new EWMA(M15_ALPHA,INTERVAL,TimeUnit.SECONDS);}  }
class C{  protected boolean shouldRenderSelection(){  return Display.getInstance().shouldRenderSelection(this);}  }
class C{  public Vertex parseStateByteCode(Vertex state,BinaryData data,Network network) throws IOException {  if (data.getCache() != null) {    return (Vertex)data.getCache();  }  BinaryData bytes=data;  if (!state.isTemporary()) {    bytes=(BinaryData)network.findData(data);    if (bytes == null) {      bytes=data;    }  }  ByteArrayInputStream byteStream=new ByteArrayInputStream(bytes.getBytes());  DataInputStream dataStream=new DataInputStream(byteStream);  Vertex cache=parseStateByteCode(dataStream,network);  Collection<Relationship> cases=state.getRelationships(Primitive.DO);  if (cases != null) {    for (    Relationship equation : cases) {      cache.addRelationship(equation,true);    }  }  cache.setName(state.getName());  data.setCache(cache);  bytes.setCache(cache);  return cache;}  }
class C{  private OAEPParameterSpec(){}  }
class C{  private void init(String jndiLocation){  pathToConnectionPool="//JDBCConnectionPool[@Name='" + jndiLocation + "']";  pathToTxDataSource="//JDBCTxDataSource[@Name='" + jndiLocation + "']";  pathToDataSource="//JDBCDataSource[@Name='" + jndiLocation + "']";}  }
class C{  protected synchronized void availableHost(int hostNum){  if (hostNum >= 0) {    if (m_remoteHostFailureCounts[hostNum] < MAX_FAILURES) {      m_remoteHostsQueue.push(new Integer(hostNum));    } else {      notifyListeners(false,true,false,"Max failures exceeded for host " + (m_remoteHosts.elementAt(hostNum)) + ". Removed from host list.");      m_removedHosts++;    }  }  if (m_failedCount == (MAX_FAILURES * m_remoteHosts.size())) {    m_plottingAborted=true;    notifyListeners(false,true,true,"Plotting aborted! Max failures " + "exceeded on all remote hosts.");    return;  }  if (m_subExpQueue.size() == 0 && (m_remoteHosts.size() == (m_remoteHostsQueue.size() + m_removedHosts))) {    if (m_plotTrainingData) {      plotTrainingData();    }    notifyListeners(false,true,true,"Plotting completed successfully.");    return;  }  if (checkForAllFailedHosts()) {    return;  }  if (m_plottingAborted && (m_remoteHostsQueue.size() + m_removedHosts) == m_remoteHosts.size()) {    notifyListeners(false,true,true,"Plotting aborted. All remote tasks " + "finished.");  }  if (!m_subExpQueue.empty() && !m_plottingAborted) {    if (!m_remoteHostsQueue.empty()) {      int availHost, waitingTask;      try {        availHost=((Integer)m_remoteHostsQueue.pop()).intValue();        waitingTask=((Integer)m_subExpQueue.pop()).intValue();        launchNext(waitingTask,availHost);      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }}  }
class C{  public static boolean isContent(int c){  return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public boolean isLoading(){  if (m_loaderThread != null && m_loaderThread.isAlive())   return true;  return false;}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("glassfish2x",GlassFish2xContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("glassfish3x",GlassFish3xContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("glassfish4x",GlassFish4xContainerCapability.class);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static void prinoutKeyInfo(KeyInfo ki,PrintStream os) throws XMLSecurityException {  for (int i=0; i < ki.lengthKeyName(); i++) {    KeyName x=ki.itemKeyName(i);    os.println("KeyName(" + i + ")=\""+ x.getKeyName()+ "\"");  }  for (int i=0; i < ki.lengthKeyValue(); i++) {    KeyValue x=ki.itemKeyValue(i);    PublicKey pk=x.getPublicKey();    os.println("KeyValue Nr. " + i);    os.println(pk);  }  for (int i=0; i < ki.lengthMgmtData(); i++) {    MgmtData x=ki.itemMgmtData(i);    os.println("MgmtData(" + i + ")=\""+ x.getMgmtData()+ "\"");  }  for (int i=0; i < ki.lengthX509Data(); i++) {    X509Data x=ki.itemX509Data(i);    os.println("X509Data(" + i + ")=\""+ (x.containsCertificate() ? "Certificate " : "")+ (x.containsIssuerSerial() ? "IssuerSerial " : "")+ "\"");  }}  }
class C{  public SQLTransientConnectionException(String reason){  super(reason,null,0);}  }
class C{  private void clearCaches(){  sumCache=null;  varianceCache=null;  minCache=null;  maxCache=null;}  }
class C{  public String typeName(){  return "invokedynamic";}  }
class C{  public RegionState(S id,Collection<Region<S,E>> regions,Collection<E> deferred){  super(id,deferred,null,null,null,regions);}  }
class C{  public void createErrorDialog(String message,Throwable throwable,int code){  IStatus status=new Status(IStatus.ERROR,ID,code,message,throwable);  StatusManager.getManager().handle(status,StatusManager.SHOW | StatusManager.LOG);}  }
class C{  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) boolean shouldOverrideUrlLoading(WebView view,String url){  if (this.appView.pluginManager.onOverrideUrlLoading(url)) {    return true;  } else   if (url.startsWith("file://") | url.startsWith("data:")) {    return url.contains("app_webview");  } else   if (appView.getWhitelist().isUrlWhiteListed(url)) {    return false;  } else   if (appView.getExternalWhitelist().isUrlWhiteListed(url)) {    try {      Intent intent=new Intent(Intent.ACTION_VIEW);      intent.setData(Uri.parse(url));      intent.addCategory(Intent.CATEGORY_BROWSABLE);      intent.setComponent(null);      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) {        intent.setSelector(null);      }      this.cordova.getActivity().startActivity(intent);      return true;    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(TAG,"Error loading url " + url,e);    }  }  return true;}  }
class C{  UnselectAction(){  super(unselectAction);}  }
class C{  public void p(Object o) throws IOException {  write(o.toString());}  }
class C{  protected void checkCollectionType(Collection c){  if (type != null) {    for (Iterator iter=c.iterator(); iter.hasNext(); ) {      Object element=iter.next();      checkType(element);    }  }}  }
class C{  public SaaSApplicationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,cause);  this.bean=bean;}  }
class C{  public void initRestAssured(){  super.initRestAssured();  base=SERVER_ROOT + "/tests/";  RestAssured.requestSpecification.basePath(base);}  }
class C{  public static Number atan(Number a){  return Math.atan(a.doubleValue());}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  @DSComment("no suspicious activity") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:56.396 -0500",hash_original_method="D07BFAC609E59F2C654790B31AE5FD0D",hash_generated_method="A24B785DD11572D2B52D969BDBCFE967") public static ByteOrder nativeOrder(){  return NATIVE_ORDER;}  }
class C{  public static int[] transformIntArray(Integer[] source){  int[] destin=new int[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public QName(String namespaceURI,String prefix,String localName,boolean validate){  if (localName == null)   throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_NULL,null));  if (validate) {    if (!XML11Char.isXML11ValidNCName(localName)) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }    if ((null != prefix) && (!XML11Char.isXML11ValidNCName(prefix))) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_PREFIX_INVALID,null));    }  }  _namespaceURI=namespaceURI;  _prefix=prefix;  _localName=localName;  m_hashCode=toString().hashCode();}  }
class C{  @Override public SerializationConfig with(Feature... features){  int flags=_featureFlags;  for (  Feature f : features) {    flags|=f.getMask();  }  return new SerializationConfig(this,flags);}  }
class C{  void legalTagContext(TagElement tag) throws ChangedCharSetException {  if (legalElementContext(tag.getElement())) {    markFirstTime(tag.getElement());    return;  }  if (tag.breaksFlow() && (stack != null) && !stack.tag.breaksFlow()) {    endTag(true);    legalTagContext(tag);    return;  }  for (TagStack s=stack; s != null; s=s.next) {    if (s.tag.getElement() == dtd.head) {      while (stack != s) {        endTag(true);      }      endTag(true);      legalTagContext(tag);      return;    }  }  error("tag.unexpected",tag.getElement().getName());}  }
class C{  private void processExtraThumbs(){  extraThumbs.clear();  for (  JToggleButton button : buttons) {    if (button.getClientProperty("MediaArtworkExtrathumb") instanceof JCheckBox && button.getClientProperty("MediaArtwork") instanceof MediaArtwork && button.getClientProperty("MediaArtworkSize") instanceof JComboBox) {      JCheckBox chkbx=(JCheckBox)button.getClientProperty("MediaArtworkExtrathumb");      if (chkbx.isSelected()) {        MediaArtwork artwork=(MediaArtwork)button.getClientProperty("MediaArtwork");        @SuppressWarnings("rawtypes") JComboBox cb=(JComboBox)button.getClientProperty("MediaArtworkSize");        if (cb.getSelectedItem() instanceof ImageSizeAndUrl) {          ImageSizeAndUrl size=(ImageSizeAndUrl)cb.getSelectedItem();          if (size != null) {            extraThumbs.add(size.getUrl());          } else {            extraThumbs.add(artwork.getDefaultUrl());          }        } else         if (cb.getSelectedItem() instanceof String) {          extraThumbs.add(artwork.getDefaultUrl());        }      }    }  }}  }
class C{  @Override public void process(Map<K,V> tuple){  V val=tuple.get(getKey());  if (val == null) {    return;  }  if (compareValue(val.doubleValue())) {    ltuple=cloneTuple(tuple);  }}  }
class C{  @Category(FlakyTest.class) @Test public void testMatchingCqs() throws Exception {  final Host host=Host.getHost(0);  VM server=host.getVM(0);  VM client=host.getVM(1);  cqDUnitTest.createServer(server);  final int port=server.invoke(null);  final String host0=NetworkUtils.getServerHostName(server.getHost());  cqDUnitTest.createClient(client,port,host0);  for (int i=0; i < 4; i++) {    cqDUnitTest.createCQ(client,"testMatchingCqs_" + i,cqDUnitTest.cqs[0]);    cqDUnitTest.executeCQ(client,"testMatchingCqs_" + i,false,null);  }  validateMatchingCqs(server,1,cqDUnitTest.cqs[0],4);  int size=1;  cqDUnitTest.createValues(server,cqDUnitTest.regions[0],size);  cqDUnitTest.waitForCreated(client,"testMatchingCqs_0",CqQueryDUnitTest.KEY + size);  cqDUnitTest.waitForCreated(client,"testMatchingCqs_3",CqQueryDUnitTest.KEY + size);  cqDUnitTest.closeCQ(client,"testMatchingCqs_0");  validateMatchingCqs(server,1,cqDUnitTest.cqs[0],3);  cqDUnitTest.createValues(server,cqDUnitTest.regions[0],size);  cqDUnitTest.waitForUpdated(client,"testMatchingCqs_3",CqQueryDUnitTest.KEY + size);  cqDUnitTest.stopCQ(client,"testMatchingCqs_1");  validateMatchingCqs(server,1,cqDUnitTest.cqs[0],2);  cqDUnitTest.clearCQListenerEvents(client,"testMatchingCqs_3");  cqDUnitTest.createValues(server,cqDUnitTest.regions[0],size);  cqDUnitTest.waitForUpdated(client,"testMatchingCqs_3",CqQueryDUnitTest.KEY + size);  cqDUnitTest.validateCQ(client,"testMatchingCqs_1",CqQueryDUnitTest.noTest,size,size,0,size,size,0,size * 2);  cqDUnitTest.executeCQ(client,"testMatchingCqs_1",false,null);  cqDUnitTest.clearCQListenerEvents(client,"testMatchingCqs_3");  cqDUnitTest.createValues(server,cqDUnitTest.regions[0],size);  cqDUnitTest.waitForUpdated(client,"testMatchingCqs_3",CqQueryDUnitTest.KEY + size);  cqDUnitTest.validateCQ(client,"testMatchingCqs_1",CqQueryDUnitTest.noTest,size,size * 2,0,size,size * 2,0,size * 3);  cqDUnitTest.createCQ(client,"testMatchingCqs_4",cqDUnitTest.cqs[1]);  cqDUnitTest.executeCQ(client,"testMatchingCqs_4",false,null);  cqDUnitTest.createCQ(client,"testMatchingCqs_5",cqDUnitTest.cqs[1]);  cqDUnitTest.executeCQ(client,"testMatchingCqs_5",false,null);  cqDUnitTest.createCQ(client,"testMatchingCqs_6",cqDUnitTest.cqs[2]);  cqDUnitTest.executeCQ(client,"testMatchingCqs_6",false,null);  validateMatchingCqs(server,3,cqDUnitTest.cqs[1],2);  cqDUnitTest.closeCQ(client,"testMatchingCqs_6");  validateMatchingCqs(server,2,cqDUnitTest.cqs[1],2);  cqDUnitTest.closeCQ(client,"testMatchingCqs_5");  cqDUnitTest.closeCQ(client,"testMatchingCqs_4");  cqDUnitTest.closeCQ(client,"testMatchingCqs_3");  cqDUnitTest.closeCQ(client,"testMatchingCqs_2");  cqDUnitTest.closeCQ(client,"testMatchingCqs_1");  validateMatchingCqs(server,0,null,0);  cqDUnitTest.createValues(server,cqDUnitTest.regions[0],size);  cqDUnitTest.closeClient(client);  cqDUnitTest.closeServer(server);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.829 -0500",hash_original_method="23F3E2D78AEB517CE17DC4369118F50D",hash_generated_method="22901CDB72E9C4745CFCB1E17C33D51C") public boolean hasLrParam(){  return uriParms.getNameValue("lr") != null;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public int calcScore(String text){  int score=0;  if (text == null || text.length() == 0) {    return score;  }  String[] tokens=text.split("\\s+");  for (int i=0; i < tokens.length; i++) {    String word=tokens[i].toLowerCase();    if (m_criticalWordsSet.contains(word)) {      score++;    }  }  return score;}  }
class C{  protected void checkParameters() throws BuildException {  if (this.moduleSet.getModules().isEmpty() && this.files == null) {    throw new BuildException("You must specify a <module>, <moduleset> and/or <files>");  }}  }
class C{  public static Map<URI,BlockObject> verifySourceAndFullCopy(URI sourceURI,URI fullCopyURI,UriInfo uriInfo,DbClient dbClient){  BlockObject fcSourceObj=queryFullCopyResource(sourceURI,uriInfo,true,dbClient);  Volume fullCopyVolume=(Volume)queryFullCopyResource(fullCopyURI,uriInfo,false,dbClient);  verifyVolumeIsFullCopy(fullCopyVolume);  verifyCopyIsForSource(fullCopyVolume,sourceURI);  Map<URI,BlockObject> resourceMap=new HashMap<URI,BlockObject>();  resourceMap.put(sourceURI,fcSourceObj);  resourceMap.put(fullCopyURI,fullCopyVolume);  return resourceMap;}  }
class C{  @Override public boolean onKeyUp(int keyCode,KeyEvent event){  if (LOG_KEY_EVENTS)   Log.i(EmulatorDebug.LOG_TAG,"onKeyUp(keyCode=" + keyCode + ", event="+ event+ ")");  if (mEmulator == null)   return true;  if (mOnKeyListener.onKeyUp(keyCode,event)) {    invalidate();    return true;  } else   if (event.isSystem()) {    return super.onKeyUp(keyCode,event);  }  return true;}  }
class C{  void clearRegion(DiskRegion dr,RegionVersionVector rvv){  lock.lock();  try {    this.ifTotalRecordCount++;    if (dr.getClearRVV() == null) {      this.ifLiveRecordCount++;    } else {    }    dr.setClearRVV(rvv);    writeClearRecord(dr,rvv);  }  finally {    lock.unlock();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.184 -0500",hash_original_method="BF637AC6A5CBD4DC0512611361485C35",hash_generated_method="5720A95E75AB25376B8B192DFC3620A0") public SIPHeader parse() throws ParseException {  Expires expires=new Expires();  if (debug)   dbg_enter("parse");  try {    lexer.match(TokenTypes.EXPIRES);    lexer.SPorHT();    lexer.match(':');    lexer.SPorHT();    String nextId=lexer.getNextId();    lexer.match('\n');    try {      int delta=Integer.parseInt(nextId);      expires.setExpires(delta);      return expires;    } catch (    NumberFormatException ex) {      throw createParseException("bad integer format");    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  public void load(Element element,Object o){  Editor pe=(Editor)o;  MultiSensorIcon l=new MultiSensorIcon(pe);  int rotation=0;  try {    rotation=element.getAttribute("rotate").getIntValue();  } catch (  org.jdom2.DataConversionException e) {  }catch (  NullPointerException e) {  }  NamedIcon icon=loadSensorIcon("inactive",rotation,l,element,pe);  if (icon != null) {    l.setInactiveIcon(icon);  } else {    return;  }  icon=loadSensorIcon("unknown",rotation,l,element,pe);  if (icon != null) {    l.setUnknownIcon(icon);  } else {    return;  }  icon=loadSensorIcon("inconsistent",rotation,l,element,pe);  if (icon != null) {    l.setInconsistentIcon(icon);  } else {    return;  }  Attribute a=element.getAttribute("updown");  if ((a != null) && a.getValue().equals("true")) {    l.setUpDown(true);  } else {    l.setUpDown(false);  }  List<Element> items=element.getChildren();  for (int i=0; i < items.size(); i++) {    Element item=items.get(i);    if (item.getAttribute("sensor") != null) {      String sensor=item.getAttribute("sensor").getValue();      if (item.getAttribute("url") != null) {        String name=item.getAttribute("url").getValue();        icon=NamedIcon.getIconByName(name);        if (icon == null) {          icon=pe.loadFailed("MultiSensor \"" + l.getNameString() + "\" ",name);          if (icon == null) {            log.error("MultiSensor \"" + l.getNameString() + "\" removed for url= "+ name);            return;          }        }        try {          int deg=0;          a=item.getAttribute("degrees");          if (a != null) {            deg=a.getIntValue();            double scale=1.0;            a=item.getAttribute("scale");            if (a != null) {              scale=item.getAttribute("scale").getDoubleValue();            }            icon.setLoad(deg,scale,l);          }          if (deg == 0) {            a=item.getAttribute("rotate");            if (a != null) {              rotation=a.getIntValue();              icon.setRotation(rotation,l);            }          }        } catch (        org.jdom2.DataConversionException dce) {        }      } else {        String name=item.getAttribute("icon").getValue();        icon=NamedIcon.getIconByName(name);        if (icon == null) {          icon=pe.loadFailed("MultiSensor \"" + l.getNameString(),name);          if (icon == null) {            log.info("MultiSensor \"" + l.getNameString() + " removed for url= "+ name);            return;          }        }        if (rotation != 0) {          icon.setRotation(rotation,l);        }      }      l.addEntry(sensor,icon);    }  }  pe.putItem(l);  loadCommonAttributes(l,Editor.SENSORS,element);}  }
class C{  public IllinoisLemmatizer(ResourceManager nonDefaultRm){  super(ViewNames.LEMMA,new String[]{ViewNames.POS},nonDefaultRm.getBoolean(AnnotatorConfigurator.IS_LAZILY_INITIALIZED.key,Configurator.TRUE),new LemmatizerConfigurator().getConfig(nonDefaultRm));}  }
class C{  private byte[] generateExplicitNonce(){  DatagramWriter writer=new DatagramWriter();  writer.write(epoch,EPOCH_BITS);  writer.writeLong(sequenceNumber,SEQUENCE_NUMBER_BITS);  return writer.toByteArray();}  }
class C{  public V value(){  return value;}  }
class C{  public double normalDistanceSquared(final Vector v){  double t=dotProduct(v);  double deltaX=this.x * t - v.x;  double deltaY=this.y * t - v.y;  double deltaZ=this.z * t - v.z;  return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;}  }
class C{  public static int sum(int[] ints){  int sum=0;  for (  int j : ints) {    sum+=j;  }  return sum;}  }
class C{  public synchronized void onDone(){  this.done=true;  for (int i=0; i < this.listenerHolders.size(); i++) {    (this.listenerHolders.get(i)).listener.onDone();  }}  }
class C{  public void updateLablesAndValues(final String[] lables,float[] newValues){  int nEntries=size();  if (newValues.length != nEntries)   throw new IllegalArgumentException("New set values given doesn't match previous " + "number of entries.");  for (int i=0; i < nEntries; i++) {    setLable(i,lables[i]);    setValue(i,newValues[i]);  }}  }
class C{  protected void checkResultByText(final String message,@NotNull String fileText,final boolean ignoreTrailingSpaces){  checkResultByText(message,fileText,ignoreTrailingSpaces,null);}  }
class C{  @Override public NativePooledByteBuffer newByteBuffer(byte[] bytes){  NativePooledByteBufferOutputStream outputStream=new NativePooledByteBufferOutputStream(mPool,bytes.length);  try {    outputStream.write(bytes,0,bytes.length);    return outputStream.toByteBuffer();  } catch (  IOException ioe) {    throw Throwables.propagate(ioe);  } finally {    outputStream.close();  }}  }
class C{  public String[] filterMimeTypes(String mimeType){  ArrayList<String> array=null;  for (int i=0; i < mMimeTypes.length; i++) {    if (compareMimeTypes(mMimeTypes[i],mimeType)) {      if (array == null) {        array=new ArrayList<String>();      }      array.add(mMimeTypes[i]);    }  }  if (array == null) {    return null;  }  String[] rawArray=new String[array.size()];  array.toArray(rawArray);  return rawArray;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void write(File file,CharSequence data,String encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:22.172 -0500",hash_original_method="9322B8B253BE8A74DE6E5A2942EC5C84",hash_generated_method="5328B5B0EE5413B4A356B5BF1F2BF7E6") public Chunk handleChunk(Chunk request){  return null;}  }
class C{  public static Bundler of(Bundle b){  return new Bundler(b);}  }
class C{  public Period(long duration,PeriodType type,Chronology chronology){  super(duration,type,chronology);}  }
class C{  public void printJobNoMoreEvents(PrintJobEvent pje){}  }
class C{  public boolean isAllowStatistics(){  Object oo=get_Value(COLUMNNAME_IsAllowStatistics);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void cleanupDestination(State state,int finalStatus){  closeDestination(state);  if (state.mFilename != null && DownloaderService.isStatusError(finalStatus)) {    new File(state.mFilename).delete();    state.mFilename=null;  }}  }
class C{  protected CMemorySectionWrapper(final MemorySection object){  super(object);}  }
class C{  public Process executeAsync(final CommandLine command,final Map<String,String> environment,final ExecuteResultHandler handler) throws IOException {  if (workingDirectory != null && !workingDirectory.exists()) {    throw new IOException(workingDirectory + " doesn't exist.");  }  return executeInternal(command,environment,workingDirectory,streamHandler,handler);}  }
class C{  public void disconnectPort(AbstractSerialPortController p){  istream=null;  ostream=null;  if (controller != p) {    log.warn("disconnectPort: disconnect called from non-connected AbstractPortController");  }  controller=null;}  }
class C{  protected int searchForOpenBracket(int startPosition,char openBracket,char closeBracket,IDocument document) throws BadLocationException {  int stack=1;  int openPos=startPosition - 1;  char nextChar;  while (openPos >= 0 && stack > 0) {    nextChar=document.getChar(openPos);    if (nextChar == closeBracket && nextChar != openBracket)     stack++; else     if (nextChar == openBracket)     stack--;    openPos--;  }  if (stack == 0)   return openPos + 1;  return -1;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:01.507 -0500",hash_original_method="C8EF6B60BE95B81385F7554432463CF1",hash_generated_method="C8EF6B60BE95B81385F7554432463CF1") void handleTimerInEmergencyCallbackMode(int action){switch (action) {case CANCEL_ECM_TIMER:    removeCallbacks(mExitEcmRunnable);  mEcmTimerResetRegistrants.notifyResult(Boolean.TRUE);break;case RESTART_ECM_TIMER:long delayInMillis=SystemProperties.getLong(TelephonyProperties.PROPERTY_ECM_EXIT_TIMER,DEFAULT_ECM_EXIT_TIMER_VALUE);postDelayed(mExitEcmRunnable,delayInMillis);mEcmTimerResetRegistrants.notifyResult(Boolean.FALSE);break;default :Log.e(LOG_TAG,"handleTimerInEmergencyCallbackMode, unsupported action " + action);}}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void customizerClosing(){  m_dataVis.setOffscreenXAxis(m_xAxisBack);  m_dataVis.setOffscreenYAxis(m_yAxisBack);  m_dataVis.setOffscreenWidth(m_widthBack);  m_dataVis.setOffscreenHeight(m_heightBack);  m_dataVis.setOffscreenAdditionalOpts(m_optsBack);  m_dataVis.setOffscreenRendererName(m_rendererNameBack);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.keys(getString(stack));}  }
class C{  private void addContact(){  Intent intent=new Intent(this,ViewActivity.class);  startActivity(intent);}  }
class C{  public static double crossTrackDistanceDeg(double lat1,double lon1,double lat2,double lon2,double latQ,double lonQ,double dist1Q){  return crossTrackDistanceRad(MathUtil.deg2rad(lat1),MathUtil.deg2rad(lon1),MathUtil.deg2rad(lat2),MathUtil.deg2rad(lon2),MathUtil.deg2rad(latQ),MathUtil.deg2rad(lonQ),dist1Q);}  }
class C{  public boolean equals(String obj2){  return str().equals(obj2);}  }
class C{  public static Number min(Number a,Number b){  if (isFloatingPoint(a) || isFloatingPoint(b)) {    return Math.min(a.doubleValue(),b.doubleValue());  } else {    return Math.min(a.longValue(),b.longValue());  }}  }
class C{  private void checkIfUserHasPermissions(){  StorageOSUser user=getUserFromContext();  if ((!_permissionsHelper.userHasGivenRoleInAnyTenant(user,Role.SECURITY_ADMIN,Role.TENANT_ADMIN)) && (!_permissionsHelper.userHasGivenProjectACL(user,ACL.OWN))) {    throw APIException.forbidden.insufficientPermissionsForUser(user.getName());  }}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  public static boolean isPlainArrayType(int type){  return (type >= GridBinaryMarshaller.BYTE_ARR && type <= GridBinaryMarshaller.DATE_ARR) || type == GridBinaryMarshaller.TIMESTAMP_ARR;}  }
class C{  @Override public boolean isClosed() throws SQLException {  try {    debugCodeCall("isClosed");    return session == null || session.isClosed();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public GetDirectory(String directory,String media,ListType.Sort sort_params,String... properties){  super();  addParameterToRequest("directory",directory);  addParameterToRequest("media",media);  addParameterToRequest("properties",properties);  addParameterToRequest(SORT_NODE,sort_params.toJsonNode());}  }
class C{  protected SSLContextImpl(DefaultSSLContextImpl dummy) throws GeneralSecurityException, IOException {synchronized (DefaultSSLContextImpl.class) {    if (DEFAULT_SSL_CONTEXT_IMPL == null) {      clientSessionContext=new ClientSessionContext();      serverSessionContext=new ServerSessionContext();      DEFAULT_SSL_CONTEXT_IMPL=(DefaultSSLContextImpl)this;    } else {      clientSessionContext=DEFAULT_SSL_CONTEXT_IMPL.engineGetClientSessionContext();      serverSessionContext=DEFAULT_SSL_CONTEXT_IMPL.engineGetServerSessionContext();    }    sslParameters=new SSLParametersImpl(DEFAULT_SSL_CONTEXT_IMPL.getKeyManagers(),DEFAULT_SSL_CONTEXT_IMPL.getTrustManagers(),null,clientSessionContext,serverSessionContext);  }}  }
class C{  @Override synchronized void doAbortInternal() throws SQLException {  this.currentConnection.abortInternal();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Matrix4d scaleAroundLocal(double sx,double sy,double sz,double ox,double oy,double oz){  return scaleAroundLocal(sx,sy,sz,ox,oy,oz,this);}  }
class C{  @After public void tearDown() throws Exception {  File dir=new File(m_tmpDir);  StrategyPanel.deleteDir(dir);  TradestrategyTest.clearDBData();}  }
class C{  public ScopedCache with(Scope scope){  return new ScopedCache(scope,name);}  }
class C{  @Deprecated public static Bitmap loadContactPhoto(Context context,Uri person,int placeholderImageResource,BitmapFactory.Options options){  if (person == null) {    return loadPlaceholderPhoto(placeholderImageResource,context,options);  }  InputStream stream=openContactPhotoInputStream(context.getContentResolver(),person);  Bitmap bm=stream != null ? BitmapFactory.decodeStream(stream,null,options) : null;  if (bm == null) {    bm=loadPlaceholderPhoto(placeholderImageResource,context,options);  }  return bm;}  }
class C{  public static <T>T templateFor(final Class<T> mixinType,Association<?> association){  NullArgumentException.validateNotNull("Mixin class",mixinType);  NullArgumentException.validateNotNull("Association",association);  return mixinType.cast(Proxy.newProxyInstance(mixinType.getClassLoader(),array(mixinType),new TemplateHandler<T>(null,association(association),null,null)));}  }
class C{  public SchematicReader(NBTInputStream inputStream){  checkNotNull(inputStream);  this.inputStream=inputStream;}  }
class C{  public static org.oscm.internal.vo.VOMarketplace convertToUp(org.oscm.vo.VOMarketplace oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOMarketplace newVO=new org.oscm.internal.vo.VOMarketplace();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setCategoriesEnabled(oldVO.isCategoriesEnabled());  newVO.setMarketplaceId(oldVO.getMarketplaceId());  newVO.setName(oldVO.getName());  newVO.setOpen(oldVO.isOpen());  newVO.setOwningOrganizationId(oldVO.getOwningOrganizationId());  newVO.setOwningOrganizationName(oldVO.getOwningOrganizationName());  newVO.setReviewEnabled(oldVO.isReviewEnabled());  newVO.setSocialBookmarkEnabled(oldVO.isSocialBookmarkEnabled());  newVO.setTaggingEnabled(oldVO.isTaggingEnabled());  return newVO;}  }
class C{  void loadIncludedPrograms(Loader loader,Set<Program> visited) throws IOException {  if (!visited.add(this)) {    if (includedPrograms == null) {      loader.errorReporter().error(location(),"Circular include; file includes itself transitively");      throw new IllegalStateException("Circular include: " + location().path() + " includes itself transitively");    }    return;  }  Preconditions.checkState(this.includedPrograms == null,"Included programs already resolved");  ImmutableList.Builder<Program> includes=ImmutableList.builder();  for (  String thriftImport : thriftIncludes) {    Program included=loader.resolveIncludedProgram(location(),thriftImport);    included.loadIncludedPrograms(loader,visited);    includes.add(included);  }  this.includedPrograms=includes.build();  LinkedHashMap<String,Named> symbolMap=new LinkedHashMap<>();  for (  Named named : allTypeNames()) {    Named oldValue=symbolMap.put(named.name(),named);    if (oldValue != null) {      throw duplicateSymbol(named.name(),oldValue,named);    }  }  this.symbols=ImmutableMap.copyOf(symbolMap);  LinkedHashMap<String,Constant> constSymbolMap=new LinkedHashMap<>();  for (  Constant constant : constants()) {    Constant oldValue=constSymbolMap.put(constant.name(),constant);    if (oldValue != null) {      throw duplicateSymbol(constant.name(),oldValue,constant);    }  }  this.constSymbols=ImmutableMap.copyOf(constSymbolMap);}  }
class C{  private static void check(byte[] encoding) throws IOException {  int length=encoding.length;  if (length < 1 || (encoding[length - 1] & 0x80) != 0) {    throw new IOException("ObjectIdentifier() -- " + "Invalid DER encoding, not ended");  }  for (int i=0; i < length; i++) {    if (encoding[i] == (byte)0x80 && (i == 0 || (encoding[i - 1] & 0x80) == 0)) {      throw new IOException("ObjectIdentifier() -- " + "Invalid DER encoding, useless extra octet detected");    }  }}  }
class C{  public synchronized void addPrivilegedThread(Thread t) throws SecurityException {  if (privilegedThreads.contains(Thread.currentThread())) {    logger.debug("Adding privileged thread: \"" + t.getName() + "\"");    privilegedThreads.add(t);  } else {    String current=Thread.currentThread().getName();    String msg="Unprivileged thread \"" + current + "\" cannot add a privileged thread: failed to add \""+ t.getName()+ "\"";    msg+="\nCurrent privileged threads are: ";    for (    Thread p : privilegedThreads) {      msg+="\n\"" + p.getName() + "\"";    }    throw new SecurityException(msg);  }}  }
class C{  public void replaceNewWithOldResources(StringSet knownIniSet,StringSet knownNetworkIdSet,StringSet knownVolumeSet,StringSet knownPortSet){  if (getKnownInitiatorUris() == null) {    setKnownInitiatorUris(new StringSet());  } else {    getKnownInitiatorUris().replace(knownIniSet);  }  if (getKnownInitiatorNetworkIds() == null) {    setKnownInitiatorNetworkIds(new StringSet());  } else {    getKnownInitiatorNetworkIds().replace(knownNetworkIdSet);  }  if (getKnownStoragePortUris() == null) {    setKnownStoragePortUris(new StringSet());  } else {    getKnownStoragePortUris().replace(knownPortSet);  }  if (getKnownVolumeUris() == null) {    setKnownVolumeUris(new StringSet());  } else {    getKnownVolumeUris().replace(knownVolumeSet);  }}  }
class C{  public JSONStringer key(String name) throws JSONException {  if (name == null) {    throw new JSONException("Names must be non-null");  }  beforeKey();  string(name);  return this;}  }
class C{  public boolean evaluate(InternalContextAdapter context) throws MethodInvocationException {  Node left=jjtGetChild(0);  Node right=jjtGetChild(1);  if (left != null && left.evaluate(context))   return true;  if (right != null && right.evaluate(context))   return true;  return false;}  }
class C{  protected DefaultAngleHandler(){}  }
class C{  public boolean isValidTld(String tld){  tld=unicodeToASCII(tld);  if (allowLocal && isValidLocalTld(tld)) {    return true;  }  return isValidInfrastructureTld(tld) || isValidGenericTld(tld) || isValidCountryCodeTld(tld);}  }
class C{  private static void repeat(String pattern,int count,Appendable out) throws IOException {  while (count >= pattern.length()) {    out.append(pattern);    count-=pattern.length();  }  if (count > 0) {    out.append(pattern,0,count);  }}  }
class C{  @SuppressLint("InlinedApi") private void createCameraSource(boolean autoFocus,boolean useFlash){  Context context=getApplicationContext();  TextRecognizer textRecognizer=new TextRecognizer.Builder(context).build();  textRecognizer.setProcessor(new OcrDetectorProcessor(mGraphicOverlay));  if (!textRecognizer.isOperational()) {    Log.w(TAG,"Detector dependencies are not yet available.");    IntentFilter lowstorageFilter=new IntentFilter(Intent.ACTION_DEVICE_STORAGE_LOW);    boolean hasLowStorage=registerReceiver(null,lowstorageFilter) != null;    if (hasLowStorage) {      Toast.makeText(this,R.string.low_storage_error,Toast.LENGTH_LONG).show();      Log.w(TAG,getString(R.string.low_storage_error));    }  }  mCameraSource=new CameraSource.Builder(getApplicationContext(),textRecognizer).setFacing(CameraSource.CAMERA_FACING_BACK).setRequestedPreviewSize(1280,1024).setRequestedFps(2.0f).setFlashMode(useFlash ? Camera.Parameters.FLASH_MODE_TORCH : null).setFocusMode(autoFocus ? Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE : null).build();}  }
class C{  public IndTestLaggedRegression(DataSet timeSeries,double alpha,int numLags){  if (!(alpha >= 0 && alpha <= 1)) {    throw new IllegalArgumentException("Alpha mut be in [0, 1]");  }  this.timeSeries=timeSeries;  this.variables=Collections.unmodifiableList(timeSeries.getVariables());  setAlpha(alpha);  timeLags=TimeSeriesUtils.createLagData(timeSeries,numLags);  regression=new RegressionDataset(timeLags);}  }
class C{  public void restart(Password password) throws PageException {  checkWriteAccess();  ConfigServerImpl cs=(ConfigServerImpl)ConfigImpl.getConfigServer(config,password);  CFMLEngineFactory factory=cs.getCFMLEngine().getCFMLEngineFactory();synchronized (factory) {    try {      factory.restart(cs.getPassword());    } catch (    Exception e) {      throw Caster.toPageException(e);    }  }}  }
class C{  protected Script_IMImpl(){  super();}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=usersDAO.totalRecordCount();    List<com.wipro.ats.bdre.md.dao.jpa.Users> jpaUsers=usersDAO.list(startPage,pageSize);    List<Users> usersList=new ArrayList<Users>();    for (    com.wipro.ats.bdre.md.dao.jpa.Users users : jpaUsers) {      Users returnUsers=new Users();      returnUsers.setUsername(users.getUsername());      returnUsers.setPassword(users.getPassword());      returnUsers.setEnabled((users.getEnabled()) ? (short)1 : 0);      returnUsers.setCounter(counter);      usersList.add(returnUsers);    }    restWrapper=new RestWrapper(usersList,RestWrapper.OK);    LOGGER.info("All records listed from Users by User:" + principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private synchronized void removeRange(int fromIndex,int toIndex){  Object[] elements=getArray();  int len=elements.length;  if (fromIndex < 0 || fromIndex >= len || toIndex > len || toIndex < fromIndex)   throw new IndexOutOfBoundsException();  int newlen=len - (toIndex - fromIndex);  int numMoved=len - toIndex;  if (numMoved == 0)   setArray(copyOf(elements,newlen)); else {    Object[] newElements=new Object[newlen];    System.arraycopy(elements,0,newElements,0,fromIndex);    System.arraycopy(elements,toIndex,newElements,fromIndex,numMoved);    setArray(newElements);  }}  }
class C{  public List<Recommendation> scheduleStorageForCosChangeUnprotected(final Volume volume,final VirtualPool vpool,final List<VirtualArray> targetVarrays,final VirtualPoolChangeParam param){  _log.debug("Schedule storage for vpool change to vpool {} for volume {}.",String.valueOf(vpool.getId()),String.valueOf(volume.getId()));  List<StoragePool> matchedPoolsForVpool=VirtualPool.getValidStoragePools(vpool,_dbClient,true);  StoragePool sourcePool=null;  Iterator<StoragePool> iter=matchedPoolsForVpool.iterator();  while (iter.hasNext()) {    StoragePool pool=iter.next();    if (pool.getId().equals(volume.getPool())) {      sourcePool=pool;      break;    }  }  if (sourcePool == null) {    _log.error("Volume's storage pool does not belong to vpool {} .",vpool.getLabel());    throw APIException.badRequests.noMatchingStoragePoolsForVpoolAndVarray(vpool.getLabel(),volume.getVirtualArray().toString());  }  VirtualPoolCapabilityValuesWrapper wrapper=new VirtualPoolCapabilityValuesWrapper();  wrapper.put(VirtualPoolCapabilityValuesWrapper.SIZE,volume.getCapacity());  wrapper.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,new Integer(1));  wrapper.put(VirtualPoolCapabilityValuesWrapper.BLOCK_CONSISTENCY_GROUP,volume.getConsistencyGroup());  List<StoragePool> sourcePools=new ArrayList<StoragePool>();  sourcePools.add(sourcePool);  return scheduleStorageSourcePoolConstraint(_dbClient.queryObject(VirtualArray.class,volume.getVirtualArray()),_dbClient.queryObject(Project.class,volume.getProject().getURI()),vpool,wrapper,sourcePools,volume,volume.getConsistencyGroup());}  }
class C{  public void addToRow(TableRowElement row,List l){  for (Iterator li=l.iterator(); li.hasNext(); ) {    row.addElement(li.next().toString());  }}  }
class C{  @SuppressWarnings("rawtypes") public WikibaseCornerBOp(final IValueExpression<? extends IV> left,final IValueExpression<? extends IV> right,final Corners corner,final GlobalAnnotations globals){  this(new BOp[]{left,right},anns(globals,new NV(Annotations.OP,corner)));}  }
class C{  public static String format(int n,String col){  String res=padd + n;  return res.substring(res.length() - col.length());}  }
class C{  public TestStackResponse TestStack(TestStackRequest req) throws ServiceFaultException, ServiceResultException {  return (TestStackResponse)channel.serviceRequest(req);}  }
class C{  public static Object parseWithException(Reader in) throws IOException, ParseException {  JSONParser parser=new JSONParser();  return parser.parse(in);}  }
class C{  public ElasticInterpolator(EasingMode easingMode){  super(easingMode);}  }
class C{  protected DiscreteCalcAndArguments assignCalcObjectDiscrete() throws Exception {  String timeDiffPropValueStr, basePropValueStr;  try {    timeDiffPropValueStr=propertyValues.get(DISCRETE_PROPNAME_TIME_DIFF);  } catch (  Exception ex) {    JOptionPane.showMessageDialog(this,ex.getMessage());    resultsLabel.setText("Cannot find a value for property " + DISCRETE_PROPNAME_TIME_DIFF);    return null;  }  try {    basePropValueStr=propertyValues.get(DISCRETE_PROPNAME_BASE);  } catch (  Exception ex) {    JOptionPane.showMessageDialog(this,ex.getMessage());    resultsLabel.setText("Cannot find a value for property " + DISCRETE_PROPNAME_BASE);    return null;  }  int timeDiff=Integer.parseInt(timeDiffPropValueStr);  int base=Integer.parseInt(basePropValueStr);  return new DiscreteCalcAndArguments(new MutualInformationCalculatorDiscrete(base,timeDiff),base,base + ", " + timeDiff);}  }
class C{  private static short computeSeedHash(long seed){  long[] seedArr={seed};  short seedHash=(short)((MurmurHash3.hash(seedArr,0L)[0]) & 0xFFFFL);  if (seedHash == 0) {    throw new SketchesArgumentException("The given seed: " + seed + " produced a seedHash of zero. "+ "You must choose a different seed.");  }  return seedHash;}  }
class C{  private ViewHolder createCourseDetailFieldViewHolder(LayoutInflater inflater,LinearLayout parent){  ViewHolder holder=new ViewHolder();  holder.rowView=inflater.inflate(R.layout.course_detail_field,parent,false);  holder.rowIcon=(IconImageView)holder.rowView.findViewById(R.id.course_detail_field_icon);  holder.rowFieldName=(TextView)holder.rowView.findViewById(R.id.course_detail_field_name);  holder.rowFieldText=(TextView)holder.rowView.findViewById(R.id.course_detail_field_text);  courseDetailFieldLayout.addView(holder.rowView,0);  return holder;}  }
class C{  public static Propbank fromString(String propTxt){  String[] columns=propTxt.split(" ");  Propbank propbank=new Propbank();  try {    propbank.setPropTxt(propTxt);    propbank.setFilename(columns[0]);    propbank.setSentenceNumber(Integer.parseInt(columns[1]));    propbank.setTerminal(PropbankRelation.fromString(columns[2]));    int labelsStart;    if (columns[5].indexOf(':') >= 0) {      labelsStart=5;      propbank.setBaseForm(columns[3]);      propbank.setFrameSet(columns[4]);    } else {      labelsStart=6;      propbank.setTaggerName(columns[3]);      String[] baseFormAndFrameSet=columns[4].split("\\.");      propbank.setBaseForm(baseFormAndFrameSet[0]);      propbank.setFrameSet(baseFormAndFrameSet[1]);      propbank.setInflectionValue(columns[5]);    }    for (int i=labelsStart; i < columns.length; i++) {      propbank.addProplabel(Proplabel.fromString(columns[i]));    }  } catch (  ArrayIndexOutOfBoundsException e) {    throw new PropbankFormatException("invalid Propbank entry: " + propTxt);  }catch (  NumberFormatException e) {    throw new PropbankFormatException("invalid Propbank entry: " + propTxt);  }  return propbank;}  }
class C{  public FileLexerSource(File file,String path) throws IOException {  super(new BufferedReader(new DeferredFileReader(file)),true);  this.path=path;}  }
class C{  void sendMessageToHandlerWithControllerReset(List<OFMessage> messages) throws Exception {  sendMessageToHandlerNoControllerReset(messages);}  }
class C{  @Override public boolean isRunning(){  for (  Node node : mNodes) {    if (node.animation.isRunning()) {      return true;    }  }  return false;}  }
class C{  public String toString(){  return getValue() ? "true" : "false";}  }
class C{  public static boolean caseIgnoreMatch(String s1,String s2){  if (s1 == s2) {    return true;  }  int len=s1.length();  if (len != s2.length()) {    return false;  }  for (int i=0; i < len; i++) {    char c1=s1.charAt(i);    char c2=s2.charAt(i);    if (c1 != c2 && toLower(c1) != toLower(c2)) {      return false;    }  }  return true;}  }
class C{  @DSComment("Content uri manipulation utility") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:44.700 -0500",hash_original_method="C70CD309A79900820DE9DAE7972FEBC6",hash_generated_method="89F7743D876391CFF6AA77061F69F3F3") public static Uri withAppendedId(Uri contentUri,long id){  return appendId(contentUri.buildUpon(),id).build();}  }
class C{  protected boolean updateEstimators(DTNHost host){  double currentTime=SimClock.getTime();  if (meetings.containsKey(host)) {    double timeDiff=currentTime - meetings.get(host);    nrofSamplesIET++;    meanIET=(((double)nrofSamplesIET - 1) / (double)nrofSamplesIET) * meanIET + (1 / (double)nrofSamplesIET) * timeDiff;    meetings.put(host,currentTime);  } else {    meetings.put(host,currentTime);  }  nrofTotENC++;  if (encounters.containsKey(host)) {    int encounterNro=nrofTotENC - encounters.get(host);    nrofSamplesENC++;    meanENC=(((double)nrofSamplesENC - 1) / (double)nrofSamplesENC) * meanENC + (1 / (double)nrofSamplesENC) * (double)encounterNro;    encounters.put(host,nrofTotENC);    return true;  } else {    encounters.put(host,nrofTotENC);    return false;  }}  }
class C{  public static int SAX(int levels,double value){  if (levels > SAX_MAX_LEVELS || levels < 1) {    throw new RuntimeException();  }  if (null == INVNORM_BOUNDS[levels - 1]) {synchronized (INVNORM_BOUNDS) {      if (null == INVNORM_BOUNDS[levels - 1]) {        INVNORM_BOUNDS[levels - 1]=getBounds(1 << levels);      }    }  }  int idx=Arrays.binarySearch(INVNORM_BOUNDS[levels - 1],value);  if (idx >= 0) {    return idx;  } else {    return -idx - 1;  }}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String srcPath,int reqWidth,int reqHeight){  final Options options=new Options();  options.inScaled=true;  options.inPurgeable=true;  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.GINGERBREAD_MR1) {    options.inPreferQualityOverSpeed=false;  }  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB) {    options.inMutable=false;  }  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(srcPath,options);  options.inSampleSize=calculateSampleFactor(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(srcPath,options);}  }
class C{  public static DeletionConstraintException convertToApi(org.oscm.internal.types.exception.DeletionConstraintException oldEx){  org.oscm.internal.types.exception.beans.DeletionConstraintExceptionBean bean=(org.oscm.internal.types.exception.beans.DeletionConstraintExceptionBean)getFaultInfo(oldEx);  DeletionConstraintExceptionBean v13Bean=convertBeanToApi(bean,DeletionConstraintExceptionBean.class);  if (bean != null) {    DomainObjectException.ClassEnum v13ClassEnum=EnumConverter.convert(bean.getClassEnum(),DomainObjectException.ClassEnum.class);    v13Bean.setClassEnum(v13ClassEnum);    DomainObjectException.ClassEnum v13DependentClassEnum=EnumConverter.convert(bean.getDependentClassEnum(),DomainObjectException.ClassEnum.class);    v13Bean.setDependentClassEnum(v13DependentClassEnum);  }  return newApiException(DeletionConstraintException.class,getExceptionMessage(oldEx),v13Bean,oldEx.getStackTrace());}  }
class C{  public LocalDate toLocalDate(){  return new LocalDate(getLocalMillis(),getChronology());}  }
class C{  public Builder play(Animator anim){  if (anim != null) {    mNeedsSort=true;    return new Builder(anim);  }  return null;}  }
class C{  static int mergeExplicitPolicy(int explicitPolicy,X509CertImpl currCert,boolean finalCert) throws CertPathValidatorException {  if ((explicitPolicy > 0) && !X509CertImpl.isSelfIssued(currCert)) {    explicitPolicy--;  }  try {    PolicyConstraintsExtension polConstExt=currCert.getPolicyConstraintsExtension();    if (polConstExt == null)     return explicitPolicy;    int require=polConstExt.get(PolicyConstraintsExtension.REQUIRE).intValue();    if (debug != null) {      debug.println("PolicyChecker.mergeExplicitPolicy() " + "require Index from cert = " + require);    }    if (!finalCert) {      if (require != -1) {        if ((explicitPolicy == -1) || (require < explicitPolicy)) {          explicitPolicy=require;        }      }    } else {      if (require == 0)       explicitPolicy=require;    }  } catch (  IOException e) {    if (debug != null) {      debug.println("PolicyChecker.mergeExplicitPolicy " + "unexpected exception");      e.printStackTrace();    }    throw new CertPathValidatorException(e);  }  return explicitPolicy;}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  @Override public final void write(byte[] source,int offset,int len){  this.buffer.put(source,offset,len);}  }
class C{  private static boolean isRtlLocale(Locale locale){  return (TextUtils.getLayoutDirectionFromLocale(locale) == View.LAYOUT_DIRECTION_RTL);}  }
class C{  public AMDemodulatorModule(){  mIQFilter=new ComplexFIRFilter_CB_CB(FilterFactory.getLowPass(SAMPLE_RATE,5000,73,WindowType.HAMMING),1.0f);  mDemodulator=new AMDemodulator_CB(500.0f);  mIQFilter.setListener(mDemodulator);  mLowPassFilter=new RealFIRFilter_RB_RB(FilterFactory.getLowPass(48000,3000,31,WindowType.COSINE),1.0f);  mDemodulator.setListener(mLowPassFilter);  mAGC=new AutomaticGainControl_RB();  mLowPassFilter.setListener(mAGC);}  }
class C{  public Doctype removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  private void incrementVar(double i){  double oldVal=realVar.getConcreteValue();  double newVal;  if (i > 0) {    if (oldVal <= realVar.getMaxValue() - i) {      newVal=oldVal + i;    } else {      newVal=realVar.getMaxValue();    }  } else {    if (oldVal >= realVar.getMinValue() - i) {      newVal=oldVal + i;    } else {      newVal=realVar.getMinValue();    }  }  realVar.setConcreteValue(newVal);}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public static ConfigWebImpl newInstance(CFMLEngine engine,CFMLFactoryImpl factory,ConfigServerImpl configServer,Resource configDir,boolean isConfigDirACustomSetting,ServletConfig servletConfig) throws SAXException, ClassException, PageException, IOException, TagLibException, FunctionLibException, NoSuchAlgorithmException, BundleException {  String hash=SystemUtil.hash(servletConfig.getServletContext());  Map<String,String> labels=configServer.getLabels();  String label=null;  if (labels != null) {    label=labels.get(hash);  }  if (label == null)   label=hash;  if (configDir.equals(configServer.getConfigDir()))   throw new ApplicationException("the web context [" + label + "] has defined the same configuration directory ["+ configDir+ "] as the server context");  ConfigWeb[] webs=configServer.getConfigWebs();  if (!ArrayUtil.isEmpty(webs)) {    for (int i=0; i < webs.length; i++) {      if (configDir.equals(webs[i].getConfigDir()))       throw new ApplicationException("the web context [" + label + "] has defined the same configuration directory ["+ configDir+ "] as the web context ["+ webs[i].getLabel()+ "]");    }  }  SystemOut.print(SystemUtil.getPrintWriter(SystemUtil.OUT),"===================================================================\n" + "WEB CONTEXT (" + label + ")\n"+ "-------------------------------------------------------------------\n"+ "- config:"+ configDir+ (isConfigDirACustomSetting ? " (custom setting)" : "")+ "\n"+ "- webroot:"+ ReqRspUtil.getRootPath(servletConfig.getServletContext())+ "\n"+ "- hash:"+ hash+ "\n"+ "- label:"+ label+ "\n"+ "===================================================================\n");  int iDoNew=doNew(engine,configDir,false);  boolean doNew=iDoNew != NEW_NONE;  Resource configFile=configDir.getRealResource("lucee-web.xml." + TEMPLATE_EXTENSION);  String strPath=servletConfig.getServletContext().getRealPath("/WEB-INF");  Resource path=ResourcesImpl.getFileResourceProvider().getResource(strPath);  if (!configFile.exists()) {    createConfigFile("web",configFile);  }  Document doc=null;  Resource bugFile;  int count=1;  doc=loadDocumentCreateIfFails(configFile,"web");  if (path.exists())   createHtAccess(path.getRealResource(".htaccess"));  if (configDir.exists())   createHtAccess(configDir.getRealResource(".htaccess"));  createContextFiles(configDir,servletConfig,doNew);  ConfigWebImpl configWeb=new ConfigWebImpl(factory,configServer,servletConfig,configDir,configFile);  load(configServer,configWeb,doc,false,doNew);  createContextFilesPost(configDir,configWeb,servletConfig,false,doNew);  ((CFMLEngineImpl)ConfigWebUtil.getEngine(configWeb)).onStart(configWeb,false);  return configWeb;}  }
class C{  protected void handleException(Logger log){  Exception exception=getSolrResponse().getException();  if (null != exception) {    NamedList info=new SimpleOrderedMap();    int code=ResponseUtils.getErrorInfo(exception,info,log);    setStatus(Status.valueOf(code));    getSolrResponse().add("error",info);    String message=(String)info.get("msg");    if (null != message && !message.trim().isEmpty()) {      getSolrResponse().getToLog().add("msg","{" + message.trim() + "}");    }  }}  }
class C{  private boolean checkIfTradeMayBeOffered(Player partner){  String noItemMessage=player.getZone().getNoItemMoveMessage();  if (noItemMessage != null) {    player.sendPrivateText(noItemMessage);    return false;  }  if (!player.nextTo(partner)) {    player.sendPrivateText("You are too far away to start trading with " + partner.getName());    return false;  }  if (partner.getIgnore(player.getName()) != null) {    return false;  }  if ((partner.getAwayMessage() != null) || (partner.getTradeState() != TradeState.NO_ACTIVE_TRADE)) {    player.sendPrivateText("Sorry, " + partner.getName() + " is busy.");    return false;  }  if (!player.getChatBucket().checkAndAdd(0)) {    return false;  }  if (GagManager.checkIsGaggedAndInformPlayer(player)) {    return false;  }  return true;}  }
class C{  public ExtensionHeader createMinSEHeader(int expires) throws InvalidArgumentException {  if (expires < 0)   throw new InvalidArgumentException("bad value " + expires);  MinSE e=new MinSE();  e.setExpires(expires);  return e;}  }
class C{  public void scanJarFile(){  fileCombo.removeAllItems();  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    while ((entry=zin.getNextJarEntry()) != null) {      String nameOfEntry=entry.getName();      if (nameOfEntry.endsWith(".groovy") && nameOfEntry.indexOf("groovyExamples") != -1)       fileCombo.addItem(nameOfEntry);      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[92];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 69; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }        if ((jj_la1_2[i] & (1 << j)) != 0) {          la1tokens[64 + j]=true;        }      }    }  }  for (int i=0; i < 92; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  public Object next() throws IOException, InterruptedException {  while (!tlogs.isEmpty()) {    lastPositionInTLog=tlogReader.currentPos();    Object o=tlogReader.next();    if (o != null) {      pointer.set(currentTlog.tlogFile);      nextToLastVersion=lastVersion;      lastVersion=getVersion(o);      numRecordsReadInCurrentTlog++;      return o;    }    if (tlogs.size() > 1) {      tlogReader.close();      tlogs.removeLast();      currentTlog=tlogs.peekLast();      tlogReader=currentTlog.getReader(0);      pointer.set(currentTlog.tlogFile);      numRecordsReadInCurrentTlog=0;      log.debug("Init new tlog reader for {} - tlogReader = {}",currentTlog.tlogFile,tlogReader);    } else {      return null;    }  }  return null;}  }
class C{  public Vector3f(){}  }
class C{  public ParallelBucketOperator(int maxParallelOperations,ExecutorService executor,BucketOperator operator){  this.maxParallelOperations=maxParallelOperations;  this.operationSemaphore=new Semaphore(maxParallelOperations);  this.delegate=operator;  this.executor=executor;}  }
class C{  public final void requestCredDeleg(boolean value) throws GSSException {  if (state == STATE_NEW && isInitiator()) {    if (myCred == null || !(myCred instanceof Krb5ProxyCredential)) {      credDelegState=value;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.608 -0500",hash_original_method="BA996E98F19E8451E86BBFBC5F7B64F6",hash_generated_method="7506DB28380DFC1375932D9C5FB7929C") public boolean seekXWapApplicationId(int startIndex,int endIndex){  int index=startIndex;  try {    for (index=startIndex; index <= endIndex; ) {      if (decodeIntegerValue(index)) {        int fieldValue=(int)getValue32();        if (fieldValue == PARAMETER_ID_X_WAP_APPLICATION_ID) {          unsigned32bit=index + 1;          return true;        }      } else {        if (!decodeTextString(index))         return false;      }      index+=getDecodedDataLength();      if (index > endIndex)       return false;      byte val=wspData[index];      if (0 <= val && val <= WAP_PDU_SHORT_LENGTH_MAX) {        index+=wspData[index] + 1;      } else       if (val == WAP_PDU_LENGTH_QUOTE) {        if (index + 1 >= endIndex)         return false;        index++;        if (!decodeUintvarInteger(index))         return false;        index+=getDecodedDataLength();      } else       if (WAP_PDU_LENGTH_QUOTE < val && val <= 127) {        if (!decodeTextString(index))         return false;        index+=getDecodedDataLength();      } else {        index++;      }    }  } catch (  ArrayIndexOutOfBoundsException e) {    return false;  }  return false;}  }
class C{  public static DateTime toDate(Object o,TimeZone tz) throws PageException {  return DateCaster.toDateAdvanced(o,tz);}  }
class C{  private void publish(){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  String actionTaken=context.getString(R.string.toast_pub_success,(Object[])additionalArgs);  c.addAction(actionTaken);  Notify.toast(context,actionTaken,Toast.LENGTH_SHORT);}  }
class C{  public void testResourcesAvailable(){  new BulgarianAnalyzer().close();}  }
class C{  public Object remove(final Object obj){  LocationAndIndex lai=(LocationAndIndex)(locationAndIndexHash.remove(obj));  if (lai != null) {    Bag objs=(Bag)(objectHash.get(lai.location));    objs.remove(obj);    int objsNumObjs=objs.numObjs;    if (removeEmptyBags && objsNumObjs == 0)     objectHash.remove(lai.location); else     if (replaceLargeBags && objsNumObjs >= MIN_BAG_SIZE && objsNumObjs * LARGE_BAG_RATIO <= objs.objs.length)     objs.shrink(objsNumObjs * REPLACEMENT_BAG_RATIO);    allObjects.remove(lai.index);    if (allObjects.numObjs > lai.index)     ((LocationAndIndex)(locationAndIndexHash.get(allObjects.objs[lai.index]))).index=lai.index;    assert sim.util.LocationLog.it(this,lai.location);    return lai.location;  } else   return null;}  }
class C{  public void addMessageListener(MessageListener listener){  m_notifier.add(listener);}  }
class C{  public void testCloseIndexFalse() throws Exception {  String algLines[]={"# ----- properties ","content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource","docs.file=" + getReuters20LinesFile(),"ram.flush.mb=-1","max.buffered=2","content.source.log.step=3","doc.term.vector=false","content.source.forever=false","directory=RAMDirectory","doc.stored=false","doc.tokenized=false","debug.level=1","# ----- alg ","{ \"Rounds\"","  ResetSystemErase","  CreateIndex","  { \"AddDocs\"  AddDoc > : * ","  CloseIndex(false)","} : 2"};  Benchmark benchmark=execBenchmark(algLines);  IndexReader ir=DirectoryReader.open(benchmark.getRunData().getDirectory());  int ndocsExpected=20;  assertEquals("wrong number of docs in the index!",ndocsExpected,ir.numDocs());  ir.close();}  }
class C{  public CTagFilterTree(final ITagManager tagManager){  super(new CFilterTreeModel(tagManager.getRootTag()));  m_tagManager=tagManager;  setDigIn(false);  final DefaultTreeCellRenderer renderer=new DefaultTreeCellRenderer();  renderer.setOpenIcon(ICON_CONTAINER_TAG);  renderer.setClosedIcon(ICON_CONTAINER_TAG);  renderer.setLeafIcon(ICON_TAG);  setCellRenderer(renderer);  setRootVisible(false);  TreeHelpers.expandAll(this,true);  tagManager.addListener(m_tagManagerListener);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
