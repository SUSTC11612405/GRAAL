class C{  public DirectoryIteratorException(IOException cause){  super(Objects.requireNonNull(cause));}  }
class C{  public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (mv != null) {    mv.visitLocalVariable(name,desc,signature,start,end,index);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s != null) ? new Integer(s.getImageCount()) : new Integer(0);}  }
class C{  public boolean checkForRp(){  return NullColumnValueGetter.isNotNullValue(getRpCopyName());}  }
class C{  protected void paintContent(SynthContext context,Graphics g,Rectangle bounds){  SynthLookAndFeel.updateSubregion(context,g,bounds);  context.getPainter().paintToolBarContentBackground(context,g,bounds.x,bounds.y,bounds.width,bounds.height,toolBar.getOrientation());  context.getPainter().paintToolBarContentBorder(context,g,bounds.x,bounds.y,bounds.width,bounds.height,toolBar.getOrientation());}  }
class C{  public static Properties convertBundleToProperties(ResourceBundle rb){  Properties props=new Properties();  for (Enumeration<String> keys=rb.getKeys(); keys.hasMoreElements(); ) {    String key=keys.nextElement();    props.put(key,rb.getString(key));  }  return props;}  }
class C{  protected void zoom(double ratio){  double scale=getScaleX();  if (scale <= 0.2 && ratio < 1)   return;  if (scale >= 3 && ratio > 1)   return;  setScaleX(scale * ratio);  setScaleY(scale * ratio);  setTranslateX(getTranslateX() * ratio);  setTranslateY(getTranslateY() * ratio);}  }
class C{  public boolean isValidUse(AnnotatedArrayType type,Tree tree){  return true;}  }
class C{  boolean overrideOn(){  return overrideOn;}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public String toString(){  return "[Session-" + sessionCount + ", "+ getCipherSuite()+ "]";}  }
class C{  public Bitmap toBitmap(){  setDrawingCacheEnabled(false);  if (!isDrawingCacheEnabled()) {    setDrawingCacheEnabled(true);  }  if (mRenderer.isApplyBackgroundColor()) {    setDrawingCacheBackgroundColor(mRenderer.getBackgroundColor());  }  setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_HIGH);  return getDrawingCache(true);}  }
class C{  public void makeEmpty(){  header.right=nullNode;}  }
class C{  public static void validateMirrorCountForVplexDistVolume(Volume sourceVolume,VirtualPool sourceVPool,int count,int currentMirrorCount,int requestedMirrorCount,DbClient dbClient){  int sourceVpoolMaxCC=sourceVPool.getMaxNativeContinuousCopies() != null ? sourceVPool.getMaxNativeContinuousCopies() : 0;  VirtualPool haVpool=VirtualPool.getHAVPool(sourceVPool,dbClient);  int haVpoolMaxCC=0;  if (haVpool != null) {    haVpoolMaxCC=haVpool.getMaxNativeContinuousCopies();  }  if ((currentMirrorCount > 0 && (sourceVpoolMaxCC + haVpoolMaxCC) < requestedMirrorCount) || (sourceVpoolMaxCC > 0 && sourceVpoolMaxCC < count) || (haVpoolMaxCC > 0 && haVpoolMaxCC < count)) {    if (sourceVpoolMaxCC > 0 && haVpoolMaxCC > 0) {      Integer currentSourceMirrorCount=getSourceOrHAContinuousCopyCount(sourceVolume,sourceVPool,dbClient);      Integer currentHAMirrorCount=getSourceOrHAContinuousCopyCount(sourceVolume,haVpool,dbClient);      throw APIException.badRequests.invalidParameterBlockMaximumCopiesForVolumeExceededForSourceAndHA(sourceVpoolMaxCC,haVpoolMaxCC,sourceVolume.getLabel(),sourceVPool.getLabel(),haVpool.getLabel(),currentSourceMirrorCount,currentHAMirrorCount);    } else     if (sourceVpoolMaxCC > 0 && haVpoolMaxCC == 0) {      Integer currentSourceMirrorCount=getSourceOrHAContinuousCopyCount(sourceVolume,sourceVPool,dbClient);      throw APIException.badRequests.invalidParameterBlockMaximumCopiesForVolumeExceededForSource(sourceVpoolMaxCC,sourceVolume.getLabel(),sourceVPool.getLabel(),currentSourceMirrorCount);    } else     if (sourceVpoolMaxCC == 0 && haVpoolMaxCC > 0) {      Integer currentHAMirrorCount=getSourceOrHAContinuousCopyCount(sourceVolume,haVpool,dbClient);      throw APIException.badRequests.invalidParameterBlockMaximumCopiesForVolumeExceededForHA(haVpoolMaxCC,sourceVolume.getLabel(),haVpool.getLabel(),currentHAMirrorCount);    }  }}  }
class C{  public void copyFrom(Frame<ValueType> other){  lastUpdateTimestamp=other.lastUpdateTimestamp;  if (true) {    int size=slotList.size();    if (size == other.slotList.size()) {      for (int i=0; i < size; i++) {        slotList.set(i,other.slotList.get(i));      }    } else {      slotList.clear();      for (      ValueType v : other.slotList) {        slotList.add(v);      }    }  } else {    slotList.clear();    slotList.addAll(other.slotList);  }  isTop=other.isTop;  isBottom=other.isBottom;}  }
class C{  protected void doUpLine(byte[] curLine,byte[] prevLine){  if (prevLine == null) {    return;  }  for (int i=0; i < curLine.length; i++) {    curLine[i]+=prevLine[i];  }}  }
class C{  @Override public String toString(){  return buf.toString();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.898 -0500",hash_original_method="C183CC13D668537DB52873A8A3264758",hash_generated_method="EF3ED02C218F9DCEE08DD51AAB959F02") public int indexOf(int c){  return getTaintInt();}  }
class C{  public boolean isDisposed(){  Object oo=get_Value(COLUMNNAME_IsDisposed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public boolean isValor(){  return valor;}  }
class C{  public void add(IntersectionMatrix im){  for (int i=0; i < 3; i++) {    for (int j=0; j < 3; j++) {      setAtLeast(i,j,im.get(i,j));    }  }}  }
class C{  public InlineQueryResultCachedDocumentBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public void updateIndex(String indexPath) throws IOException {  IndexReader reader=DirectoryReader.open(FSDirectory.open(new File(indexPath)));  int numDocs=reader.numDocs();  boolean hasDeletions=reader.hasDeletions();  int countUpdated=0;  IndexReader readerRo=DirectoryReader.open(FSDirectory.open(new File(indexPath + "-ro")));  ImageSearcher searcher=new GenericImageSearcher(numReferenceObjectsUsed,featureClass,featureFieldName);  Map<String,Analyzer> perField=new HashMap<String,Analyzer>(1);  perField.put("ro-order",new WhitespaceAnalyzer(LuceneUtils.LUCENE_VERSION));  PerFieldAnalyzerWrapper aWrapper=new PerFieldAnalyzerWrapper(new SimpleAnalyzer(LuceneUtils.LUCENE_VERSION),perField);  IndexWriter iw=new IndexWriter(FSDirectory.open(new File(indexPath)),new IndexWriterConfig(LuceneUtils.LUCENE_VERSION,aWrapper).setOpenMode(IndexWriterConfig.OpenMode.CREATE));  StringBuilder sb=new StringBuilder(256);  Bits liveDocs=MultiFields.getLiveDocs(reader);  for (int i=0; i < numDocs; i++) {    if (reader.hasDeletions() && !liveDocs.get(i))     continue;    Document document=reader.document(i);    if (document.getField("ro-order") == null) {      ImageSearchHits hits=searcher.search(document,readerRo);      sb.delete(0,sb.length());      for (int j=0; j < numReferenceObjectsUsed; j++) {        sb.append(hits.doc(j).getValues("ro-id")[0]);        sb.append(' ');      }      document.add(new TextField("ro-order",sb.toString(),Field.Store.YES));      iw.updateDocument(new Term(DocumentBuilder.FIELD_NAME_IDENTIFIER,document.getValues(DocumentBuilder.FIELD_NAME_IDENTIFIER)[0]),document);      countUpdated++;    }    progress.setNumDocsProcessed(progress.getNumDocsProcessed() + 1);    System.out.println("countUpdated = " + countUpdated);  }  iw.commit();  iw.close();}  }
class C{  private Tuple<Coord,Coord> scaleLinkCoordinates(double linkLength,Coord linkStartCoord,Coord linkEndCoord){  double nodeOffsetMeter=20.0;  Point2D.Double linkStart=new Point2D.Double(linkStartCoord.getX(),linkStartCoord.getY());  Point2D.Double linkEnd=new Point2D.Double(linkEndCoord.getX(),linkEndCoord.getY());  Point2D.Double deltaLink=new Point2D.Double(linkEnd.x - linkStart.x,linkEnd.y - linkStart.y);  double euclideanLinkLength=this.calculateEuclideanLinkLength(deltaLink);  double linkScale=1.0;  if ((euclideanLinkLength * 0.2) > (2.0 * nodeOffsetMeter)) {    linkScale=(euclideanLinkLength - (2.0 * nodeOffsetMeter)) / euclideanLinkLength;  } else {    linkScale=euclideanLinkLength * 0.8 / euclideanLinkLength;  }  Tuple<Double,Double> scaledLink=VectorUtils.scaleVector(linkStart,linkEnd,linkScale);  Point2D.Double scaledLinkEnd=scaledLink.getSecond();  Point2D.Double scaledLinkStart=scaledLink.getFirst();  Coord start=new Coord(scaledLinkStart.x,scaledLinkStart.y);  Coord end=new Coord(scaledLinkEnd.x,scaledLinkEnd.y);  return new Tuple<Coord,Coord>(start,end);}  }
class C{  public void performPersistRequest(Request request){  persistentRequests.send(new PersistentRequestsActor.PerformRequest(request));}  }
class C{  public static List<Pair<String,Object>> asPairs(final Object... keyValues){  final List list=Arrays.asList(keyValues);  return IntStream.range(1,list.size()).filter(null).mapToObj(null).collect(Collectors.toList());}  }
class C{  private void mergeSortSourcesAndSetFrontier(final int nsources,final int nvertices,final IArraySlice<Value>[] frontiers,final IStaticFrontier frontier){  @SuppressWarnings("unchecked") final Iterator<Value>[] itrs=new Iterator[nsources];  for (int i=0; i < nsources; i++) {    itrs[i]=frontiers[i].iterator();  }  final Iterator<Value> itr=new MergeSortIterator(itrs);  frontier.resetFrontier(nvertices,false,itr);}  }
class C{  public final void process(){  Word traceState=TRACE_NEW_RECORD;  int entriesNotFlushed=0;  boolean loggedRecord=false;  if (!OMIT_OUTPUT)   Log.writeln();  while (checkDequeue(1)) {    while (!bufferOffset(head).isZero()) {      head=head.minus(BYTES_IN_ADDRESS);      Word val=head.loadWord();      if (traceState.EQ(TRACE_NEW_RECORD)) {        loggedRecord=false;        if (val.EQ(TRACE_GCSTART)) {          if (!OMIT_OTHERS) {            Log.write('G');            Log.write('C');            Log.writeln('B',true);          }        } else         if (val.EQ(TRACE_GCEND)) {          if (!OMIT_OTHERS) {            Log.write('G');            Log.write('C');            Log.writeln('E',true);          }        } else {          traceState=val;        }      } else {        if (traceState.EQ(TRACE_EXACT_ALLOC) || traceState.EQ(TRACE_ALLOC)) {          if (!OMIT_ALLOCS) {            Log.write((traceState.EQ(TRACE_EXACT_ALLOC)) ? 'A' : 'a');            Log.write(' ');            Log.write(val);            loggedRecord=true;          }          traceState=TRACE_ALLOC_SIZE;        } else         if (traceState.EQ(TRACE_EXACT_IMMORTAL_ALLOC) || traceState.EQ(TRACE_IMMORTAL_ALLOC)) {          if (!OMIT_ALLOCS) {            Log.write((traceState.EQ(TRACE_EXACT_IMMORTAL_ALLOC)) ? 'I' : 'i');            Log.write(' ');            Log.write(val);            loggedRecord=true;          }          traceState=TRACE_ALLOC_SIZE;        } else         if (traceState.EQ(TRACE_BOOT_ALLOC)) {          if (!OMIT_BOOTALLOCS) {            Log.write('B');            Log.write(' ');            Log.write(val);            loggedRecord=true;          }          traceState=TRACE_BOOT_ALLOC_SIZE;        } else         if (traceState.EQ(TRACE_DEATH)) {          if (!OMIT_UNREACHABLES) {            Log.write('D');            Log.write(' ');            Log.write(val);            loggedRecord=true;          }          traceState=TRACE_DEATH_TIME;        } else         if (traceState.EQ(TRACE_BOOT_ALLOC_SIZE)) {          if (!OMIT_BOOTALLOCS)           Log.write(val);          traceState=TRACE_NEW_RECORD;        } else         if (traceState.EQ(TRACE_ALLOC_SIZE)) {          if (!OMIT_ALLOCS)           Log.write(val);          traceState=TRACE_ALLOC_FP;        } else         if (traceState.EQ(TRACE_ALLOC_FP)) {          if (!OMIT_ALLOCS)           Log.write(val);          traceState=TRACE_ALLOC_THREAD;        } else         if (traceState.EQ(TRACE_ALLOC_THREAD)) {          if (!OMIT_ALLOCS)           Log.write(val);          traceState=TRACE_NEW_RECORD;        } else         if (traceState.EQ(TRACE_TIB_SET)) {          if (!OMIT_UPDATES) {            Log.write('T');            Log.write(' ');            Log.write(val);            loggedRecord=true;          }          traceState=TRACE_TIB_VALUE;        } else         if (traceState.EQ(TRACE_STATIC_SET)) {          if (!OMIT_UPDATES) {            Log.write('S');            Log.write(' ');            Log.write(val);            loggedRecord=true;          }          traceState=TRACE_STATIC_TARGET;        } else         if (traceState.EQ(TRACE_TIB_VALUE) || traceState.EQ(TRACE_STATIC_TARGET)) {          if (!OMIT_UPDATES)           Log.write(val);          traceState=TRACE_NEW_RECORD;        } else         if (traceState.EQ(TRACE_DEATH_TIME)) {          if (!OMIT_UNREACHABLES)           Log.write(val);          traceState=TRACE_NEW_RECORD;        } else         if (traceState.EQ(TRACE_FIELD_SET) || traceState.EQ(TRACE_ARRAY_SET)) {          if (!OMIT_UPDATES) {            Log.write('U');            Log.write(' ');            Log.write(val);            loggedRecord=true;          }          traceState=TRACE_FIELD_SLOT;        } else         if (traceState.EQ(TRACE_FIELD_TARGET) || traceState.EQ(TRACE_ARRAY_TARGET)) {          if (!OMIT_UPDATES)           Log.write(val);          traceState=TRACE_NEW_RECORD;        } else         if (traceState.EQ(TRACE_FIELD_SLOT) || traceState.EQ(TRACE_ARRAY_ELEMENT)) {          if (!OMIT_UPDATES)           Log.write(val);          traceState=TRACE_FIELD_TARGET;        } else {          VM.assertions.fail("Cannot understand directive!\n");        }        if (traceState.EQ(TRACE_NEW_RECORD) && loggedRecord) {          entriesNotFlushed++;          Log.writeln();        } else         if (loggedRecord) {          Log.write(' ');        }      }      if (entriesNotFlushed == 10) {        if (!OMIT_OUTPUT)         Log.flush();        entriesNotFlushed=0;      }    }  }  resetLocal();}  }
class C{  public JToolbarButton(String txt){  super(txt);  initialize();}  }
class C{  private static void createScript() throws Exception {  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection("jdbc:h2:mem:test");  Statement stat=conn.createStatement();  stat.execute("CREATE TABLE TEST(NAME VARCHAR)");  stat.execute("INSERT INTO TEST VALUES('Hello World')");  stat.execute("SCRIPT TO 'script.sql'");  stat.close();  conn.close();}  }
class C{  private void sendSqlData(boolean compression,char[] arr) throws SQLException {  try (Connection connection=setConnection("&useCompression=" + compression)){    Statement stmt=connection.createStatement();    stmt.execute("TRUNCATE BufferTest");    stmt.execute("INSERT INTO BufferTest VALUES ('" + new String(arr) + "')");    checkResult(arr);  } }  }
class C{  void sendMessage(byte[] bytes,TransportAddress srcAddr,TransportAddress remoteAddr) throws IllegalArgumentException, IOException {  Connector ap=getConnector(srcAddr,remoteAddr);  if (ap == null) {    throw new IllegalArgumentException("No socket found for " + srcAddr + "->"+ remoteAddr);  }  ap.sendMessage(bytes,remoteAddr);}  }
class C{  private EnumDeclaration generateEnum(){  final String valueString="value";  EnumDeclaration newEnum=new EnumDeclaration(ModifierSet.PUBLIC,null,getEnumerationClassName(),null,generateEnumConstantDeclarations(),null);  FieldDeclaration valueField=new FieldDeclaration(ModifierSet.addModifier(ModifierSet.FINAL,ModifierSet.PUBLIC),ASTHelper.INT_TYPE,Collections.singletonList(new VariableDeclarator(new VariableDeclaratorId(valueString))));  ASTHelper.addMember(newEnum,valueField);  ConstructorDeclaration enumConstructor=new ConstructorDeclaration(0,null,null,name,Collections.singletonList(ASTHelper.createParameter(ASTHelper.INT_TYPE,valueString)),null,getDefaultConstructorBlockStatement(valueString));  ASTHelper.addMember(newEnum,enumConstructor);  return newEnum;}  }
class C{  public static boolean isOrderEmpty(Properties ctx,int orderId,String trxName){  int[] orderlineIDs=getAllOrderlineIDs(ctx,orderId,trxName);  if (orderlineIDs == null || orderlineIDs.length == 0) {    return true;  }  return false;}  }
class C{  public void clearMarkAllHighlights(){  Highlighter h=getHighlighter();  if (h != null && markAllHighlights != null) {    int count=markAllHighlights.size();    for (int i=0; i < count; i++)     h.removeHighlight(markAllHighlights.get(i));    markAllHighlights.clear();  }  markedWord=null;  repaint();}  }
class C{  public String epsilonParameterTipText(){  return "The epsilon parameter of the epsilon insensitive loss function.(default 0.001).";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:08.862 -0500",hash_original_method="FD504A8EE66FE46638165E4FA7669C08",hash_generated_method="A7B536DB29EACCA84CD9D770118ACB70") public static void makeDefaultPhone(Context context){synchronized (Phone.class) {    if (!sMadeDefaults) {      sLooper=Looper.myLooper();      sContext=context;      if (sLooper == null) {        throw new RuntimeException("PhoneFactory.makeDefaultPhone must be called from Looper thread");      }      int retryCount=0;      for (; ; ) {        boolean hasException=false;        retryCount++;        try {          new LocalServerSocket("com.android.internal.telephony");        } catch (        java.io.IOException ex) {          hasException=true;        }        if (!hasException) {          break;        } else         if (retryCount > SOCKET_OPEN_MAX_RETRY) {          throw new RuntimeException("PhoneFactory probably already running");        } else {          try {            Thread.sleep(SOCKET_OPEN_RETRY_MILLIS);          } catch (          InterruptedException er) {          }        }      }      sPhoneNotifier=new DefaultPhoneNotifier();      int preferredNetworkMode=RILConstants.PREFERRED_NETWORK_MODE;      if (BaseCommands.getLteOnCdmaModeStatic() == Phone.LTE_ON_CDMA_TRUE) {        preferredNetworkMode=Phone.NT_MODE_GLOBAL;      }      int networkMode=Settings.Secure.getInt(context.getContentResolver(),Settings.Secure.PREFERRED_NETWORK_MODE,preferredNetworkMode);      Log.i(LOG_TAG,"Network Mode set to " + Integer.toString(networkMode));      int cdmaSubscription;      int lteOnCdma=BaseCommands.getLteOnCdmaModeStatic();switch (lteOnCdma) {case Phone.LTE_ON_CDMA_FALSE:        cdmaSubscription=RILConstants.SUBSCRIPTION_FROM_NV;      Log.i(LOG_TAG,"lteOnCdma is 0 use SUBSCRIPTION_FROM_NV");    break;case Phone.LTE_ON_CDMA_TRUE:  cdmaSubscription=RILConstants.SUBSCRIPTION_FROM_RUIM;Log.i(LOG_TAG,"lteOnCdma is 1 use SUBSCRIPTION_FROM_RUIM");break;case Phone.LTE_ON_CDMA_UNKNOWN:default :cdmaSubscription=Settings.Secure.getInt(context.getContentResolver(),Settings.Secure.PREFERRED_CDMA_SUBSCRIPTION,preferredCdmaSubscription);Log.i(LOG_TAG,"lteOnCdma not set, using PREFERRED_CDMA_SUBSCRIPTION");break;}Log.i(LOG_TAG,"Cdma Subscription set to " + cdmaSubscription);sCommandsInterface=new RIL(context,networkMode,cdmaSubscription);int phoneType=getPhoneType(networkMode);if (phoneType == Phone.PHONE_TYPE_GSM) {Log.i(LOG_TAG,"Creating GSMPhone");sProxyPhone=new PhoneProxy(new GSMPhone(context,sCommandsInterface,sPhoneNotifier));} else if (phoneType == Phone.PHONE_TYPE_CDMA) {switch (BaseCommands.getLteOnCdmaModeStatic()) {case Phone.LTE_ON_CDMA_TRUE:Log.i(LOG_TAG,"Creating CDMALTEPhone");sProxyPhone=new PhoneProxy(new CDMALTEPhone(context,sCommandsInterface,sPhoneNotifier));break;case Phone.LTE_ON_CDMA_FALSE:default :Log.i(LOG_TAG,"Creating CDMAPhone");sProxyPhone=new PhoneProxy(new CDMAPhone(context,sCommandsInterface,sPhoneNotifier));break;}}sMadeDefaults=true;}}}  }
class C{  public static String toStringExclude(Object object,final String excludeFieldName){  return toStringExclude(object,new String[]{excludeFieldName});}  }
class C{  private boolean isSet(int flag){  return ((flags & flag) == flag);}  }
class C{  public static DocumentEvent mergeUnprocessedDocumentEvents(Document unprocessedDocument,List<DocumentEvent> documentEvents) throws BadLocationException {  if (documentEvents.size() == 0)   return null;  final Iterator<DocumentEvent> iterator=documentEvents.iterator();  final DocumentEvent firstEvent=iterator.next();  final Document document=unprocessedDocument;  int offset=firstEvent.getOffset();  int length=firstEvent.getLength();  final StringBuffer text=new StringBuffer(firstEvent.getText() == null ? "" : firstEvent.getText());  while (iterator.hasNext()) {    final int delta=text.length() - length;    final DocumentEvent event=(DocumentEvent)iterator.next();    final int eventOffset=event.getOffset();    final int eventLength=event.getLength();    final String eventText=event.getText() == null ? "" : event.getText();    if (eventOffset > offset + length + delta) {      final String string=document.get(offset + length,(eventOffset - delta) - (offset + length));      text.append(string);      text.append(eventText);      length=(eventOffset - delta) + eventLength - offset;    } else     if (eventOffset + eventLength < offset) {      final String string=document.get(eventOffset + eventLength,offset - (eventOffset + eventLength));      text.insert(0,string);      text.insert(0,eventText);      length=offset + length - eventOffset;      offset=eventOffset;    } else {      final int start=Math.max(0,eventOffset - offset);      final int end=Math.min(text.length(),eventLength + eventOffset - offset);      text.replace(start,end,eventText);      offset=Math.min(offset,eventOffset);      final int totalDelta=delta + eventText.length() - eventLength;      length=text.length() - totalDelta;    }  }  return new DocumentEvent(document,offset,length,text.toString());}  }
class C{  public boolean isSortingCategories(){  return model.isSortingCategories();}  }
class C{  public long available() throws IOException, InterruptedException {  try {    available=fileChannel.size() - offset;    return available;  } catch (  ClosedByInterruptException e) {    throw new InterruptedException(e.getClass().getName());  }}  }
class C{  public InlineQueryResultCachedMpeg4GifBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public void checkOwnsNoSchemas(){  for (  Schema s : database.getAllSchemas()) {    if (this == s.getOwner()) {      throw DbException.get(ErrorCode.CANNOT_DROP_2,getName(),s.getName());    }  }}  }
class C{  public static <V>boolean isEmpty(V[] sourceArray){  return (sourceArray == null || sourceArray.length == 0);}  }
class C{  public void paintScrollBarTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public AccessibilityWebContentKeyBinding(long keyCodeAndModifiers,int[] actionSequence){  mKeyCodeAndModifiers=keyCodeAndModifiers;  mActionSequence=actionSequence;}  }
class C{  public MultiMatchQueryBuilder field(String field,float boost){  fields.add(field);  if (fieldsBoosts == null) {    fieldsBoosts=new ObjectFloatHashMap<>();  }  fieldsBoosts.put(field,boost);  return this;}  }
class C{  @Override public X509Certificate generateIssuerCert(PublicKey publicKey,PrivateKey privateKey,KeyPair issuerKeys,String domainName,BigInteger serialNumber,Date startDate,Date expiryDate) throws GeneralSecurityException, IOException {  X509CertInfo info=new X509CertInfo();  CertificateExtensions ext=new CertificateExtensions();  CertificateValidity interval=new CertificateValidity(startDate,expiryDate);  X500Name dn=new X500Name(domainName);  KeyIdentifier keyIdentifier=new KeyIdentifier(publicKey);  AuthorityKeyIdentifierExtension authorityKeyIdentifierExtension;  PrivateKey signerKey;  X500Name issuerName;  if (issuerKeys == null) {    issuerName=dn;    authorityKeyIdentifierExtension=new AuthorityKeyIdentifierExtension(keyIdentifier,null,null);    signerKey=privateKey;  } else {    X509Certificate issuerCert=issuerKeys.getCertificate().getCertificate();    issuerName=new X500Name(issuerCert.getSubjectX500Principal().getName());    authorityKeyIdentifierExtension=new AuthorityKeyIdentifierExtension(new KeyIdentifier(issuerCert.getPublicKey()),null,null);    signerKey=issuerKeys.getPrivateKey().getPrivateKey();  }  info.set(X509CertInfo.VALIDITY,interval);  info.set(X509CertInfo.SERIAL_NUMBER,new CertificateSerialNumber(serialNumber));  info.set(X509CertInfo.SUBJECT,new CertificateSubjectName(dn));  info.set(X509CertInfo.KEY,new CertificateX509Key(publicKey));  info.set(X509CertInfo.VERSION,new CertificateVersion(CertificateVersion.V3));  info.set(X509CertInfo.ISSUER,new CertificateIssuerName(issuerName));  AlgorithmId algo=AlgorithmId.get(CertificateUtils.getCertificateSignatureAlgorithm());  info.set(X509CertInfo.ALGORITHM_ID,new CertificateAlgorithmId(algo));  boolean isCritical=false;  boolean isCA=true;  int pathLen=0;  ext.set(SubjectKeyIdentifierExtension.NAME,new SubjectKeyIdentifierExtension(keyIdentifier.getIdentifier()));  ext.set(AuthorityKeyIdentifierExtension.NAME,authorityKeyIdentifierExtension);  ext.set(BasicConstraintsExtension.NAME,new BasicConstraintsExtension(isCritical,isCA,pathLen));  boolean[] ok={true,false,false,false,false,true,true,false,false,false};  KeyUsageExtension kue=new KeyUsageExtension(ok);  ext.set(KeyUsageExtension.NAME,kue);  info.set(X509CertInfo.EXTENSIONS,ext);  return signCert(info,signerKey);}  }
class C{  public boolean isEqual(AttributeSet attr){  if (attr instanceof SmallAttributeSet) {    return attr == this;  }  return ((getAttributeCount() == attr.getAttributeCount()) && containsAttributes(attr));}  }
class C{  @Setup public void init(){  array=new _1._2._3._4._5.Unfriendly[250];  for (int i=0; i < array.length / 10; ++i) {    final int idx=i * 10;    for (int j=0; j < 10; ++j) {      array[idx]=new _1._2._3._4._5.Unfriendly(idx + 9 - j,array[idx]);      if (j < 9) {        array[idx + j + 1]=array[idx];      }    }  }}  }
class C{  public boolean isForm(){  Object oo=get_Value(COLUMNNAME_IsForm);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void sendPublish(SipRequest publish) throws PayloadException, NetworkException {  try {    if (sLogger.isActivated()) {      sLogger.info(new StringBuilder("Send PUBLISH, expire=").append(publish.getExpires()).append("ms").toString());    }    if (mPublished) {      mAuthenticationAgent.setProxyAuthorizationHeader(publish);    }    SipTransactionContext ctx=mImsModule.getSipManager().sendSipMessageAndWait(publish);    if (ctx.isSipResponse()) {      final int statusCode=ctx.getStatusCode();switch (statusCode) {case Response.OK:        if (publish.getExpires() != 0) {          handle200OK(ctx);        } else {          handle200OkUnpublish(ctx);        }      break;case Response.PROXY_AUTHENTICATION_REQUIRED:    handle407Authentication(ctx);  break;case Response.CONDITIONAL_REQUEST_FAILED:handle412ConditionalRequestFailed(ctx);break;case Response.INTERVAL_TOO_BRIEF:handle423IntervalTooBrief(ctx);break;default :handleError(new PresenceError(PresenceError.PUBLISH_FAILED,ctx.getStatusCode() + " " + ctx.getReasonPhrase()));break;}} else {if (sLogger.isActivated()) {sLogger.debug("No response received for PUBLISH");}handleError(new PresenceError(PresenceError.PUBLISH_FAILED));}} catch (InvalidArgumentException e) {throw new PayloadException("Publish has failed!",e);}catch (ParseException e) {throw new PayloadException("Publish has failed!",e);}}  }
class C{  private MWFActivity resetDisplay(IDColumn id){  fAnswerText.setVisible(false);  fAnswerList.setVisible(false);  fAnswerButton.setVisible(false);  fTextMsg.setReadWrite(id != null);  bZoom.setEnabled(id != null);  bOK.setEnabled(id != null);  fForward.setValue(null);  fForward.setEnabled(id != null);  statusBar.setStatusDB(String.valueOf(selTable.getSelectedRow() + 1) + "/" + selTable.getRowCount());  m_activity=null;  m_column=null;  if (id != null)   m_activity=new MWFActivity(Env.getCtx(),id.getRecord_ID(),null);  if (m_activity == null) {    fNode.setText("");    fDescription.setText("");    fHelp.setText("");    fHistory.setText("");    statusBar.setStatusDB("0/0");    statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"WFNoActivities"));  }  return m_activity;}  }
class C{  @Override public double evaluate(Recommendation<U,I> recommendation){  RelevanceModel.UserRelevanceModel<U,I> userRelModel=relModel.getModel(recommendation.getUser());  UserIntentModel<U,I,F> uim=intentModel.getModel(recommendation.getUser());  DoubleAdder erria=new DoubleAdder();  Object2DoubleMap<F> pNoPrevRel=new Object2DoubleOpenHashMap<>();  pNoPrevRel.defaultReturnValue(0.0);  uim.getIntents().forEach(null);  AtomicInteger rank=new AtomicInteger();  recommendation.getItems().stream().limit(cutoff).forEach(null);  return erria.doubleValue();}  }
class C{  public static void main(final String[] args) throws IOException {  Banner.banner();  String namespace=null;  boolean forceCreate=false;  int i=0;  while (i < args.length) {    final String arg=args[i];    if (arg.startsWith("-")) {      if (arg.equals("-namespace")) {        namespace=args[++i];      } else       if (arg.equals("-forceCreate")) {        forceCreate=true;      } else {        System.err.println("Unknown argument: " + arg);        usage();      }    } else {      break;    }    i++;  }  final int remaining=args.length - i;  if (remaining < 1) {    System.err.println("Not enough arguments.");    usage();  }  final String propertyFileName=args[i++];  final Properties properties=processProperties(propertyFileName);  File journal=new File(properties.getProperty(Options.FILE));  if (journal.exists()) {    System.out.println("Journal: " + properties.getProperty(Options.FILE));    Journal jnl=null;    try {      jnl=new Journal(properties);      System.out.println("Rebuild text index:");      if (namespace == null) {        List<String> namespaces=jnl.getGlobalRowStore().getNamespaces(jnl.getLastCommitTime());        for (        String nm : namespaces) {          AbstractTripleStore kb=(AbstractTripleStore)jnl.getResourceLocator().locate(nm,ITx.UNISOLATED);          if (kb.getLexiconRelation().isTextIndex()) {            kb.getLexiconRelation().rebuildTextIndex(false);            System.out.println(nm + " - completed");          } else {            System.out.println(nm + " -  no text index");          }        }      } else {        AbstractTripleStore kb=(AbstractTripleStore)jnl.getResourceLocator().locate(namespace,ITx.UNISOLATED);        if (kb != null) {          kb.getLexiconRelation().rebuildTextIndex(forceCreate);          System.out.println(namespace + " - completed");        } else {          System.err.println("Namespace " + namespace + " does not exist");        }      }    }  finally {      jnl.close();    }  } else {    System.err.println("Journal " + journal + " does not exist");  }}  }
class C{  public JLTransform(){  this(50);}  }
class C{  public TextEditor replaceAll(Pattern pattern,Replacement replacement){  Matcher m=pattern.matcher(text);  int lastIndex=0;  StringBuilder sb=new StringBuilder();  while (m.find()) {    sb.append(text.subSequence(lastIndex,m.start()));    sb.append(replacement.replacement(m));    lastIndex=m.end();  }  sb.append(text.subSequence(lastIndex,text.length()));  text=sb;  return this;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void sendMessages(){  List<MurmurMessage> messages=getMessages(0);  MurmurMessage exchangeInfoMessage=new MurmurMessage("ExchangeAgreement",Integer.toString(messages.size()),1d);  if (lengthValueWrite(out,exchangeInfoMessage.toJSON(MurmurApplication.getContext(),0,0))) {    for (    MurmurMessage message : messages) {      List<MurmurMessage> packet=new ArrayList<>();      packet.add(message);      CleartextMessages messagesMessage=new CleartextMessages((ArrayList<MurmurMessage>)packet);      lengthValueWrite(out,messagesMessage.toJson(MurmurApplication.getContext()));    }  }}  }
class C{  public static void deleteDirectory(File directory) throws IOException {  if (directory.exists()) {    if (!isSymlink(directory)) {      cleanDirectory(directory);    }    if (!directory.delete()) {      String message="Unable to delete directory " + directory + ".";      throw new IOException(message);    }  }}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static byte[] I2OSP(int x,int oLen) throws ArithmeticException {  if (x < 0) {    return null;  }  int octL=IntegerFunctions.ceilLog256(x);  if (octL > oLen) {    throw new ArithmeticException("Cannot encode given integer into specified number of octets.");  }  byte[] result=new byte[oLen];  for (int i=oLen - 1; i >= oLen - octL; i--) {    result[i]=(byte)(x >>> (8 * (oLen - 1 - i)));  }  return result;}  }
class C{  public static Sentence convert(Sentence s){  Sentence result=null;  Sentence nnfSentence=ConvertToNNF.convert(s);  Sentence dnfSentence=DistributeAndOverOr.distribute(nnfSentence);  result=dnfSentence;  return result;}  }
class C{  public final void backSolveSVD(GMatrix U,GMatrix W,GMatrix V,GVector b){  if (!(U.nRow == b.size() && U.nRow == U.nCol && U.nRow == W.nRow)) {    throw new MatrixSizeException();  }  if (!(W.nCol == values.length && W.nCol == V.nCol && W.nCol == V.nRow)) {    throw new MatrixSizeException();  }  GMatrix tmp=new GMatrix(U.nRow,W.nCol);  tmp.mul(U,V);  tmp.mulTransposeRight(U,W);  tmp.invert();  mul(tmp,b);}  }
class C{  public static InformesBean obtenerInformes(String entidad) throws RPAdminDAOException {  InformesBean informesBean;  try {    informesBean=AdapterVOSigem.adapterSIGEMInformesBean(ISicresRPAdminInformeManager.obtenerInformes(entidad));  } catch (  ISicresRPAdminDAOException e) {    logger.error("Error obteniendo informes");    throw new RPAdminDAOException(RPAdminDAOException.EXC_GENERIC_EXCEPCION,e);  }  return informesBean;}  }
class C{  protected SVGOMTextElement(){}  }
class C{  public Composer leftSide(float leftSide){  this.mLeftSide=leftSide;  return this;}  }
class C{  public ExampleSourceConfigurationWizard(ConfigurationListener listener){  super("Example Source Wizard",listener);  dataViewPane.setVisible(false);  addTitleStep();  addDataLoadingStep();  addColumnSeparatorStep();  addNameDefinitionStep();  addValueTypeDefinitionStep();  addAttributeTypeDefinitionStep();  addResultFileDefinitionStep();  addBottomComponent(dataViewPane);}  }
class C{  public static ReasonCode valueOf(int value){  ReasonCode reasonCode=mValueToEnum.get(value);  if (reasonCode != null) {    return reasonCode;  }  throw new IllegalArgumentException("No enum const class " + ReasonCode.class.getName() + ""+ value+ "!");}  }
class C{  int size(){  return cipherSuites.size();}  }
class C{  public HttpRequest maxRetries(int maxRetries){  mMaxRetries=maxRetries;  return this;}  }
class C{  public static int multiplyColorAlpha(int color,int alpha){  if (alpha == 255) {    return color;  }  if (alpha == 0) {    return color & 0x00FFFFFF;  }  alpha=alpha + (alpha >> 7);  int colorAlpha=color >>> 24;  int multipliedAlpha=colorAlpha * alpha >> 8;  return (multipliedAlpha << 24) | (color & 0x00FFFFFF);}  }
class C{  public Builder withDelayAutoscaleDownBySecs(long delayAutoscaleDownBySecs){  if (delayAutoscaleDownBySecs < 0L)   throw new IllegalArgumentException("Delay secs can't be negative: " + delayAutoscaleDownBySecs);  this.delayAutoscaleDownBySecs=delayAutoscaleDownBySecs;  return this;}  }
class C{  public int readUnsignedIntToInt(){  int result=shiftIntoInt(data,position,4);  position+=4;  if (result < 0) {    throw new IllegalArgumentException("Top bit not zero: " + result);  }  return result;}  }
class C{  public boolean hasDigest(){  return value != null;}  }
class C{  public void addActionListener(String event,EventListener listener){  List<?> list1=pnlBtnLeft.getChildren();  List<?> list2=pnlBtnRight.getChildren();  Iterator<?> iter1=list1.iterator();  Iterator<?> iter2=list2.iterator();  while (iter1.hasNext()) {    Button button=(Button)iter1.next();    button.addEventListener(event,listener);  }  while (iter2.hasNext()) {    Button button=(Button)iter2.next();    button.addEventListener(event,listener);  }}  }
class C{  public static boolean decodeToFile(String dataToDecode,String filename){  boolean success=false;  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));    success=true;  } catch (  java.io.IOException e) {    success=false;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }  return success;}  }
class C{  private void determineColors(){switch (getWindowDecorationStyle()) {case JRootPane.FRAME:    activeBackground=UIManager.getColor("activeCaption");  activeForeground=UIManager.getColor("activeCaptionText");activeShadow=UIManager.getColor("activeCaptionBorder");break;case JRootPane.ERROR_DIALOG:activeBackground=UIManager.getColor("OptionPane.errorDialog.titlePane.background");activeForeground=UIManager.getColor("OptionPane.errorDialog.titlePane.foreground");activeShadow=UIManager.getColor("OptionPane.errorDialog.titlePane.shadow");break;case JRootPane.QUESTION_DIALOG:case JRootPane.COLOR_CHOOSER_DIALOG:case JRootPane.FILE_CHOOSER_DIALOG:activeBackground=UIManager.getColor("OptionPane.questionDialog.titlePane.background");activeForeground=UIManager.getColor("OptionPane.questionDialog.titlePane.foreground");activeShadow=UIManager.getColor("OptionPane.questionDialog.titlePane.shadow");break;case JRootPane.WARNING_DIALOG:activeBackground=UIManager.getColor("OptionPane.warningDialog.titlePane.background");activeForeground=UIManager.getColor("OptionPane.warningDialog.titlePane.foreground");activeShadow=UIManager.getColor("OptionPane.warningDialog.titlePane.shadow");break;case JRootPane.PLAIN_DIALOG:case JRootPane.INFORMATION_DIALOG:default :activeBackground=UIManager.getColor("activeCaption");activeForeground=UIManager.getColor("activeCaptionText");activeShadow=UIManager.getColor("activeCaptionBorder");break;}}  }
class C{  @CacheEvict(value={"productService-randomProductByCategory","productService-productByQuery","productService-productSearchResultDTOByQuery","productService-productQtyByQuery","productService-productByIdList","productService-distinctAttributeValues","productService-distinctBrands","productService-productQtyByCategoryId"},allEntries=true) public Product create(final Product instance){  ProductSku sku=productDao.getEntityFactory().getByIface(ProductSku.class);  sku.setCode(instance.getCode());  sku.setName(instance.getName());  sku.setDisplayName(instance.getDisplayName());  sku.setDescription(instance.getDescription());  sku.setProduct(instance);  sku.setRank(500);  instance.getSku().add(sku);  return getGenericDao().create(instance);}  }
class C{  @Override protected void determineLabelPositions(DrawContext dc){  Iterable<? extends Position> positions=this.getPositions();  if (positions == null)   return;  Iterator<? extends Position> iterator=positions.iterator();  Iterator<EchelonSymbol> echelonIterator=this.echelonSymbols.iterator();  Iterator<TacticalGraphicLabel> labelIterator;  if (this.labels != null)   labelIterator=this.labels.iterator(); else   labelIterator=Collections.<TacticalGraphicLabel>emptyList().iterator();  Position posA=iterator.next();  while (iterator.hasNext() && (labelIterator.hasNext() || echelonIterator.hasNext())) {    Position posB=iterator.next();    TacticalGraphicLabel topLabel=this.haveTopLabel ? labelIterator.next() : null;    TacticalGraphicLabel bottomLabel=this.haveBottomLabel ? labelIterator.next() : null;    LatLon ll=LatLon.interpolate(0.5,posA,posB);    Position labelPosition=new Position(ll,0);    if (topLabel != null) {      topLabel.setPosition(labelPosition);      topLabel.setOrientationPosition(posB);    }    if (bottomLabel != null) {      bottomLabel.setPosition(labelPosition);      bottomLabel.setOrientationPosition(posB);    }    if (echelonIterator.hasNext()) {      EchelonSymbol symbol=echelonIterator.next();      symbol.setPosition(labelPosition);      symbol.setOrientationPosition(posB);    }    if (this.haveHostileLabels) {      TacticalGraphicLabel label=labelIterator.next();      ll=LatLon.interpolate(0.25,posA,posB);      label.setPosition(new Position(ll,0));      label.setOrientationPosition(posB);      label=labelIterator.next();      ll=LatLon.interpolate(0.75,posA,posB);      label.setPosition(new Position(ll,0));      label.setOrientationPosition(posB);    }    posA=posB;  }}  }
class C{  public NibbleArray snapshot(){  return new NibbleArray(data.clone());}  }
class C{  public static void main(final String[] args) throws FileNotFoundException {  gameName="stendhal";  databaseImplementation=getDatabaseImplementation();  databaseSystem=getDatabaseSystem();  if (databaseSystem.equals("mysql")) {    databaseName=getDatabaseName();    databaseHost=getDatabaseHost();    databaseUsername=getDatabaseUsername();    databasePassword=getDatabasePassword();    System.out.println("Using \"" + databaseName + "\" as database name\n");    System.out.println("Using \"" + databaseHost + "\" as database host\n");    System.out.println("Using \"" + databaseUsername + "\" as database user\n");    System.out.println("Using \"" + databasePassword + "\" as database user password\n");    System.out.println("In order to make these options effective please run:");    System.out.println("# mysql");    System.out.println("  create database " + databaseName + ";");    System.out.println("  grant all on " + databaseName + ".* to "+ databaseUsername+ "@localhost identified by '"+ databasePassword+ "';");    System.out.println("  exit");  } else {    System.out.println("Using integrated h2 database.");  }  tcpPort=getTCPPort();  worldImplementation=getWorldImplementation();  ruleprocessorImplementation=getRuleProcessorImplementation();  turnLength=getTurnLength();  statisticsFilename=getStatisticsFilename();  final String keySize=getRSAKeyBits();  System.out.println("Using key of " + keySize + " bits.");  System.out.println("Please wait while the key is generated.");  rsakey=RSAKey.generateKey(Integer.valueOf(keySize));  final PrintWriter out=new PrintWriter(new FileOutputStream(filename));  write(out);  out.close();  System.out.println(filename + " has been generated.");}  }
class C{  public void mouseClicked(int x,int y,int button){  for (  ManualWidgetBase widget : widgets)   widget.mouseClicked(x,y,button);}  }
class C{  public void paintFileChooserBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public Bean(){}  }
class C{  public static int testLoop1Snippet(int a,int b){  try {    return container.a;  }  finally {    for (int i=0; i < a; i++) {      if (b < 0) {        container.b=10;      } else {        container.a=15;      }    }  }}  }
class C{  protected void selectUTMRenderables(DrawContext dc){  ArrayList<GraticuleTile> tileList=getVisibleTiles(dc);  if (tileList.size() > 0) {    for (    GraticuleTile gt : tileList) {      gt.selectRenderables(dc);    }  }}  }
class C{  private String createWorkflowStepForRecreateReplicationSet(Workflow workflow,ProtectionSystem rpSystem,List<Volume> vplexVolumes,String waitFor){  List<URI> vplexVolumeURIs=new ArrayList<>();  Map<String,RecreateReplicationSetRequestParams> params=getRecreateReplicationSetParams(rpSystem,vplexVolumes,vplexVolumeURIs);  Workflow.Method executeMethod=new Workflow.Method(RPDeviceController.METHOD_RECREATE_RSET_STEP,rpSystem.getId(),vplexVolumeURIs,params);  workflow.createStep(RPDeviceController.STEP_POST_VOLUME_RESTORE,"Recreate RP replication set step for snapshot session restore",waitFor,rpSystem.getId(),rpSystem.getSystemType(),RPDeviceController.class,executeMethod,rollbackMethodNullMethod(),null);  return RPDeviceController.STEP_POST_VOLUME_RESTORE;}  }
class C{  protected static MPaymentProcessor[] find(Properties ctx,String tender,String CCType,int AD_Client_ID,int C_Currency_ID,BigDecimal Amt,String trxName){  ArrayList<MPaymentProcessor> list=new ArrayList<MPaymentProcessor>();  StringBuffer sql=new StringBuffer("SELECT * " + "FROM C_PaymentProcessor " + "WHERE AD_Client_ID=? AND IsActive='Y'"+ " AND (C_Currency_ID IS NULL OR C_Currency_ID=?)"+ " AND (MinimumAmt IS NULL OR MinimumAmt = 0 OR MinimumAmt <= ?)");  if (MPayment.TENDERTYPE_DirectDeposit.equals(tender))   sql.append(" AND AcceptDirectDeposit='Y'"); else   if (MPayment.TENDERTYPE_DirectDebit.equals(tender))   sql.append(" AND AcceptDirectDebit='Y'"); else   if (MPayment.TENDERTYPE_Check.equals(tender))   sql.append(" AND AcceptCheck='Y'"); else   if (MPayment.CREDITCARDTYPE_ATM.equals(CCType))   sql.append(" AND AcceptATM='Y'"); else   if (MPayment.CREDITCARDTYPE_Amex.equals(CCType))   sql.append(" AND AcceptAMEX='Y'"); else   if (MPayment.CREDITCARDTYPE_Visa.equals(CCType))   sql.append(" AND AcceptVISA='Y'"); else   if (MPayment.CREDITCARDTYPE_MasterCard.equals(CCType))   sql.append(" AND AcceptMC='Y'"); else   if (MPayment.CREDITCARDTYPE_Diners.equals(CCType))   sql.append(" AND AcceptDiners='Y'"); else   if (MPayment.CREDITCARDTYPE_Discover.equals(CCType))   sql.append(" AND AcceptDiscover='Y'"); else   if (MPayment.CREDITCARDTYPE_PurchaseCard.equals(CCType))   sql.append(" AND AcceptCORPORATE='Y'");  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),trxName);    pstmt.setInt(1,AD_Client_ID);    pstmt.setInt(2,C_Currency_ID);    pstmt.setBigDecimal(3,Amt);    ResultSet rs=pstmt.executeQuery();    while (rs.next())     list.add(new MPaymentProcessor(ctx,rs,trxName));    rs.close();    pstmt.close();  } catch (  SQLException e) {    s_log.log(Level.SEVERE,"find - " + sql,e);    return null;  }  if (list.size() == 0)   s_log.warning("find - not found - AD_Client_ID=" + AD_Client_ID + ", C_Currency_ID="+ C_Currency_ID+ ", Amt="+ Amt); else   s_log.fine("find - #" + list.size() + " - AD_Client_ID="+ AD_Client_ID+ ", C_Currency_ID="+ C_Currency_ID+ ", Amt="+ Amt);  MPaymentProcessor[] retValue=new MPaymentProcessor[list.size()];  list.toArray(retValue);  return retValue;}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  static public SerialSensorManager instance(){  if (_instance == null) {    _instance=new SerialSensorManager();  }  return _instance;}  }
class C{  public UnicodeSpec(){  this(0xffff);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void changeColor(int newColor){  tabs.setIndicatorColor(newColor);  Drawable colorDrawable=new ColorDrawable(newColor);  Drawable bottomDrawable=getResources().getDrawable(R.drawable.actionbar_bottom);  LayerDrawable ld=new LayerDrawable(new Drawable[]{colorDrawable,bottomDrawable});  if (oldBackground == null) {    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1)     ld.setCallback(drawableCallback); else     getSupportActionBar().setBackgroundDrawable(ld);  } else {    TransitionDrawable td=new TransitionDrawable(new Drawable[]{oldBackground,ld});    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1)     td.setCallback(drawableCallback); else     getSupportActionBar().setBackgroundDrawable(td);    td.startTransition(200);  }  oldBackground=ld;  currentColor=newColor;  try {    getSupportActionBar().setDisplayShowTitleEnabled(false);    getSupportActionBar().setDisplayShowTitleEnabled(true);  } catch (  NullPointerException e) {    Log.e("NPE",e.getMessage());  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Element child1;  Element child2;  Element child3;  Node appendedChild;  NodeList elementList;  String nullNS=null;  doc=(Document)load("staffNS",false);  element=doc.createElementNS("http://www.w3.org/DOM","root");  child1=doc.createElementNS("http://www.w3.org/DOM/Level1","dom:child");  child2=doc.createElementNS(nullNS,"child");  child3=doc.createElementNS("http://www.w3.org/DOM/Level2","dom:child");  appendedChild=element.appendChild(child1);  appendedChild=element.appendChild(child2);  appendedChild=element.appendChild(child3);  elementList=element.getElementsByTagNameNS(nullNS,"child");  assertSize("elementgetelementsbytagnamens04_1",1,elementList);  elementList=element.getElementsByTagNameNS("*","child");  assertSize("elementgetelementsbytagnamens04_2",3,elementList);}  }
class C{  public boolean hasTimestampExt(){  return hasExtension(GphotoTimestamp.class);}  }
class C{  private void buildNotification(){  Intent intentPlayPause=new Intent(NOTIFICATION_INTENT_PLAY_PAUSE);  Intent intentOpenPlayer=new Intent(NOTIFICATION_INTENT_OPEN_PLAYER);  Intent intentCancel=new Intent(NOTIFICATION_INTENT_CANCEL);  PendingIntent playPausePending=PendingIntent.getBroadcast(this,23,intentPlayPause,0);  PendingIntent openPending=PendingIntent.getBroadcast(this,31,intentOpenPlayer,0);  PendingIntent cancelPending=PendingIntent.getBroadcast(this,12,intentCancel,0);  RemoteViews mNotificationTemplate=new RemoteViews(this.getPackageName(),R.layout.notification);  Notification.Builder notificationBuilder=new Notification.Builder(this);  if (artImage == null)   artImage=BitmapFactory.decodeResource(getResources(),R.drawable.default_art);  mNotificationTemplate.setTextViewText(R.id.notification_line_one,singerName);  mNotificationTemplate.setTextViewText(R.id.notification_line_two,songName);  mNotificationTemplate.setImageViewResource(R.id.notification_play,isPlaying() ? R.drawable.btn_playback_pause : R.drawable.btn_playback_play);  mNotificationTemplate.setImageViewBitmap(R.id.notification_image,artImage);  mNotificationTemplate.setOnClickPendingIntent(R.id.notification_collapse,cancelPending);  mNotificationTemplate.setOnClickPendingIntent(R.id.notification_play,playPausePending);  Notification notification=notificationBuilder.setSmallIcon(smallImage).setContentIntent(openPending).setPriority(Notification.PRIORITY_DEFAULT).setContent(mNotificationTemplate).setUsesChronometer(true).build();  notification.flags=Notification.FLAG_ONGOING_EVENT;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    RemoteViews mExpandedView=new RemoteViews(this.getPackageName(),R.layout.notification_expanded);    mExpandedView.setTextViewText(R.id.notification_line_one,singerName);    mExpandedView.setTextViewText(R.id.notification_line_two,songName);    mExpandedView.setImageViewResource(R.id.notification_expanded_play,isPlaying() ? R.drawable.btn_playback_pause : R.drawable.btn_playback_play);    mExpandedView.setImageViewBitmap(R.id.notification_image,artImage);    mExpandedView.setOnClickPendingIntent(R.id.notification_collapse,cancelPending);    mExpandedView.setOnClickPendingIntent(R.id.notification_expanded_play,playPausePending);    notification.bigContentView=mExpandedView;  }  if (mNotificationManager != null)   mNotificationManager.notify(NOTIFICATION_ID,notification);}  }
class C{  public static DataSet readInContinuousData(File file,char delimiter,Set<String> excludeVariables) throws IOException {  if (excludeVariables == null || excludeVariables.isEmpty()) {    return readInContinuousData(file,delimiter);  }  byte delim=(byte)delimiter;  int numRow=DataUtility.countLine(file) - 1;  List<Node> nodes=new LinkedList<>();  double[][] data;  try (FileChannel fc=new RandomAccessFile(file,"r").getChannel()){    MappedByteBuffer buffer=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());    StringBuilder dataBuilder=new StringBuilder();    byte currentChar;    byte prevChar=NEW_LINE;    int[] excludes=new int[excludeVariables.size()];    for (int i=0; i < excludes.length; i++) {      excludes[i]=-1;    }    int numCol=0;    int excludeIndex=0;    while (buffer.hasRemaining()) {      currentChar=buffer.get();      if (currentChar == CARRIAGE_RETURN) {        currentChar=NEW_LINE;      }      if (currentChar == delim || (currentChar == NEW_LINE && prevChar != NEW_LINE)) {        String value=dataBuilder.toString().trim();        if (excludeVariables.contains(value)) {          excludes[excludeIndex++]=numCol;        } else {          nodes.add(new ContinuousVariable(value));        }        numCol++;        dataBuilder.delete(0,dataBuilder.length());        if (currentChar == NEW_LINE) {          prevChar=currentChar;          break;        }      } else {        if (currentChar == SINGLE_QUOTE || currentChar == DOUBLE_QUOTE) {          continue;        }        dataBuilder.append((char)currentChar);      }      prevChar=currentChar;    }    if (prevChar == delim) {      String leftover=dataBuilder.toString().trim();      if (excludeVariables.contains(leftover)) {        excludes[excludeIndex++]=numCol;      } else {        nodes.add(new ContinuousVariable(leftover));      }      numCol++;    }    String leftover=dataBuilder.toString().trim();    if (leftover.length() > 0) {      if (excludeVariables.contains(leftover)) {        excludes[excludeIndex++]=numCol;      } else {        nodes.add(new ContinuousVariable(leftover));      }      numCol++;    }    int founded=0;    for (    int var : excludes) {      if (var != -1) {        founded++;      }    }    if (founded == 0) {      data=new double[numRow][numCol];      int row=0;      int col=0;      while (buffer.hasRemaining()) {        currentChar=buffer.get();        if (currentChar == CARRIAGE_RETURN) {          currentChar=NEW_LINE;        }        if (currentChar == delim || (currentChar == NEW_LINE && prevChar != NEW_LINE)) {          String value=dataBuilder.toString().trim();          if (value.length() > 0) {            try {              data[row][col++]=Double.parseDouble(value);            } catch (            NumberFormatException exception) {              throw new IOException(String.format("Unable to parse data at line %d column %d\n",row + 2,col),exception);            }          } else {            col++;          }          dataBuilder.delete(0,dataBuilder.length());          if (currentChar == NEW_LINE) {            col=0;            row++;          }        } else {          if (currentChar == SINGLE_QUOTE || currentChar == DOUBLE_QUOTE) {            continue;          }          dataBuilder.append((char)currentChar);        }        prevChar=currentChar;      }      String value=dataBuilder.toString().trim();      if (value.length() > 0) {        try {          data[row][col++]=Double.parseDouble(value);        } catch (        NumberFormatException exception) {          throw new IOException(String.format("Unable to parse data at line %d column %d\n",row + 2,col),exception);        }      }    } else {      int[] excludedVars=new int[founded];      int index=0;      for (      int varIndex : excludes) {        if (varIndex != -1) {          excludedVars[index++]=varIndex;        }      }      data=new double[numRow][numCol];      int row=0;      int col=0;      int dataCol=0;      while (buffer.hasRemaining()) {        currentChar=buffer.get();        if (currentChar == CARRIAGE_RETURN) {          currentChar=NEW_LINE;        }        if (currentChar == delim || (currentChar == NEW_LINE && prevChar != NEW_LINE)) {          if (Arrays.binarySearch(excludedVars,col) < 0) {            String value=dataBuilder.toString().trim();            if (value.length() > 0) {              try {                data[row][dataCol++]=Double.parseDouble(value);              } catch (              NumberFormatException exception) {                throw new IOException(String.format("Unable to parse data at line %d column %d\n",row + 2,col),exception);              }            }          }          dataBuilder.delete(0,dataBuilder.length());          col++;          if (currentChar == NEW_LINE) {            col=0;            dataCol=0;            row++;          }        } else {          if (currentChar == SINGLE_QUOTE || currentChar == DOUBLE_QUOTE) {            continue;          }          dataBuilder.append((char)currentChar);        }        prevChar=currentChar;      }      String value=dataBuilder.toString().trim();      if (value.length() > 0) {        if (Arrays.binarySearch(excludedVars,col) < 0) {          try {            data[row][dataCol++]=Double.parseDouble(value);          } catch (          NumberFormatException exception) {            throw new IOException(String.format("Unable to parse data at line %d column %d\n",row + 2,col),exception);          }        }      }    }  }   return new BoxDataSet(new DoubleDataBox(data),nodes);}  }
class C{  public LinearRegression(float[] x,float[] y){  if (x.length != y.length) {    throw new IllegalArgumentException("array lengths are not equal");  }  N=x.length;  double sumx=0.0, sumy=0.0, sumx2=0.0;  for (int i=0; i < N; i++)   sumx+=x[i];  for (int i=0; i < N; i++)   sumx2+=x[i] * x[i];  for (int i=0; i < N; i++)   sumy+=y[i];  double xbar=sumx / N;  double ybar=sumy / N;  double xxbar=0.0, yybar=0.0, xybar=0.0;  for (int i=0; i < N; i++) {    xxbar+=(x[i] - xbar) * (x[i] - xbar);    yybar+=(y[i] - ybar) * (y[i] - ybar);    xybar+=(x[i] - xbar) * (y[i] - ybar);  }  beta=xybar / xxbar;  alpha=ybar - beta * xbar;  double rss=0.0;  double ssr=0.0;  for (int i=0; i < N; i++) {    double fit=beta * x[i] + alpha;    rss+=(fit - y[i]) * (fit - y[i]);    ssr+=(fit - ybar) * (fit - ybar);  }  int degreesOfFreedom=N - 2;  R2=ssr / yybar;  svar=rss / degreesOfFreedom;  svar1=svar / xxbar;  svar0=svar / N + xbar * xbar * svar1;}  }
class C{  private void fillBuffer(){  fillBuffer(bufferSize,false);}  }
class C{  @Override public double evaluate(Recommendation<U,I> recommendation){  UserRelevanceModel<U,I> urm=relModel.getModel(recommendation.getUser());  double ndcg=0.0;  int rank=0;  Object2IntOpenHashMap<F> redundancy=new Object2IntOpenHashMap<>();  redundancy.defaultReturnValue(0);  for (  Tuple2od<I> pair : recommendation.getItems()) {    if (urm.isRelevant(pair.v1)) {      double gain=featureData.getItemFeatures(pair.v1).sequential().map(null).mapToDouble(null).sum();      ndcg+=gain * disc.disc(rank);    }    rank++;    if (rank >= cutoff) {      break;    }  }  if (ndcg > 0) {    ndcg/=idcg.getModel(recommendation.getUser()).ideal;  }  return ndcg;}  }
class C{  public static MultiMap<Class<?>,NonreceiverTerm> toMap(Collection<ConstantSet> constantSets){  final MultiMap<Class<?>,NonreceiverTerm> map=new MultiMap<>();  for (  ConstantSet cs : constantSets) {    Class<?> clazz;    try {      clazz=TypeNames.getTypeForName(cs.classname);    } catch (    ClassNotFoundException e) {      throw new Error("Class " + cs.classname + " not found on the classpath.");    }    for (    Integer x : cs.ints) {      map.add(clazz,new NonreceiverTerm(JavaTypes.INT_TYPE,x));    }    for (    Long x : cs.longs) {      map.add(clazz,new NonreceiverTerm(JavaTypes.LONG_TYPE,x));    }    for (    Float x : cs.floats) {      map.add(clazz,new NonreceiverTerm(JavaTypes.FLOAT_TYPE,x));    }    for (    Double x : cs.doubles) {      map.add(clazz,new NonreceiverTerm(JavaTypes.DOUBLE_TYPE,x));    }    for (    String x : cs.strings) {      map.add(clazz,new NonreceiverTerm(JavaTypes.STRING_TYPE,x));    }    for (    Class<?> x : cs.classes) {      map.add(clazz,new NonreceiverTerm(JavaTypes.CLASS_TYPE,x));    }  }  return map;}  }
class C{  public UnknownService(){  requestFileName="getstate.query";}  }
class C{  public void testReflection(){  for (  Method method : TolerantUpdateProcessor.class.getMethods()) {    if (method.getDeclaringClass().equals(Object.class)) {      continue;    }    assertEquals("base class(es) has changed, TolerantUpdateProcessor needs updated to ensure it " + "overrides all solr update lifcycle methods with exception tracking: " + method.toString(),TolerantUpdateProcessor.class,method.getDeclaringClass());  }}  }
class C{  private void updateItemFont(MenuElement menu){  menu.getComponent().setFont(itemFont);  for (  MenuElement child : menu.getSubElements()) {    updateItemFont(child);  }}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public void gameOfLife(int[][] board){  int m=board.length;  int n=board[0].length;  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      int lives=-board[i][j];      for (int k=Math.max(i - 1,0); k < Math.min(i + 2,m); k++) {        for (int l=Math.max(j - 1,0); l < Math.min(j + 2,n); l++) {          lives+=board[k][l] & 1;        }      }      if ((lives | board[i][j]) == 3) {        board[i][j]|=2;      }    }  }  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      board[i][j]>>=1;    }  }}  }
class C{  public Code39Reader(){  usingCheckDigit=false;  extendedMode=false;}  }
class C{  public String bitcoinValueToString(BigInteger value,boolean addUnit,boolean blankZero){  if (blankZero && value.compareTo(BigInteger.ZERO) == 0) {    return "";  }  boolean negative=value.compareTo(BigInteger.ZERO) < 0;  if (negative) {    value=value.negate();  }  String toReturn="";  if (negative) {    toReturn="-";  }  if (value == null) {    throw new IllegalArgumentException("Value cannot be null");  }  BigDecimal valueInBTC=new BigDecimal(value).divide(new BigDecimal(Utils.COIN));  toReturn=toReturn + numberFormat.format(valueInBTC.doubleValue());  if (addUnit) {    toReturn=toReturn + " " + getString("sendBitcoinPanel.amountUnitLabel");  }  return toReturn;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS_ESCAPE_SEQUENCE__CHARACTER:    setCharacter(CHARACTER_EDEFAULT);  return;case RegularExpressionPackage.CHARACTER_CLASS_ESCAPE_SEQUENCE__SEQUENCE:setSequence(SEQUENCE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void print(String s){  try {    spl.color(s);  } catch (  IOException e) {  }}  }
class C{  public String nextToken(){  return nextToken(true);}  }
class C{  protected String encodeBody(){  return parameters.encode();}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(Class<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  public ServerExecutionException(String arg0,Throwable arg1){  super(arg0,arg1);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void ensurePoolCapacity(int minCapacity){  pool.ensureCapacity(minCapacity);}  }
class C{  @Override public void initGui(){  Keyboard.enableRepeatEvents(true);  buttonList.clear();  buttonList.add(new GuiButton(0,width / 2 - 100,height / 4 + 120 + 12,"Add"));  buttonList.add(new GuiButton(1,width / 2 - 100,height / 4 + 144 + 12,"Cancel"));  nameBox=new GuiTextField(0,fontRendererObj,width / 2 - 100,80,200,20);  nameBox.setFocused(true);}  }
class C{  public void reset(IRI... uris){  if (uris != null && uris.length > 0) {    Iterable<?> uriList=Arrays.asList(uris);    templateCache.invalidateAll(uriList);    argumentCache.invalidateAll(uriList);  } else {    templateCache.invalidateAll();    argumentCache.invalidateAll();  }}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  public ZipLong(long value){  this.value=value;}  }
class C{  protected void sequence_Elision(ISerializationContext context,BindingElement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void crashApplication(ProcessRecord r,ApplicationErrorReport.CrashInfo crashInfo){  long timeMillis=System.currentTimeMillis();  String shortMsg=crashInfo.exceptionClassName;  String longMsg=crashInfo.exceptionMessage;  String stackTrace=crashInfo.stackTrace;  if (shortMsg != null && longMsg != null) {    longMsg=shortMsg + ": " + longMsg;  } else   if (shortMsg != null) {    longMsg=shortMsg;  }  AppErrorResult result=new AppErrorResult();synchronized (this) {    if (mController != null) {      try {        String name=r != null ? r.processName : null;        int pid=r != null ? r.pid : Binder.getCallingPid();        if (!mController.appCrashed(name,pid,shortMsg,longMsg,timeMillis,crashInfo.stackTrace)) {          Slog.w(TAG,"Force-killing crashed app " + name + " at watcher's request");          Process.killProcess(pid);          return;        }      } catch (      RemoteException e) {        mController=null;        Watchdog.getInstance().setActivityController(null);      }    }    final long origId=Binder.clearCallingIdentity();    if (r != null && r.instrumentationClass != null) {      Slog.w(TAG,"Error in app " + r.processName + " running instrumentation "+ r.instrumentationClass+ ":");      if (shortMsg != null)       Slog.w(TAG,"  " + shortMsg);      if (longMsg != null)       Slog.w(TAG,"  " + longMsg);      Bundle info=new Bundle();      info.putString("shortMsg",shortMsg);      info.putString("longMsg",longMsg);      finishInstrumentationLocked(r,Activity.RESULT_CANCELED,info);      Binder.restoreCallingIdentity(origId);      return;    }    if (r == null || !makeAppCrashingLocked(r,shortMsg,longMsg,stackTrace)) {      Binder.restoreCallingIdentity(origId);      return;    }    Message msg=Message.obtain();    msg.what=SHOW_ERROR_MSG;    HashMap data=new HashMap();    data.put("result",result);    data.put("app",r);    msg.obj=data;    mHandler.sendMessage(msg);    Binder.restoreCallingIdentity(origId);  }  int res=result.get();  Intent appErrorIntent=null;synchronized (this) {    if (r != null && !r.isolated) {      mProcessCrashTimes.put(r.info.processName,r.uid,SystemClock.uptimeMillis());    }    if (res == AppErrorDialog.FORCE_QUIT_AND_REPORT) {      appErrorIntent=createAppErrorIntentLocked(r,timeMillis,crashInfo);    }  }  if (appErrorIntent != null) {    try {      mContext.startActivityAsUser(appErrorIntent,new UserHandle(r.userId));    } catch (    ActivityNotFoundException e) {      Slog.w(TAG,"bug report receiver dissappeared",e);    }  }}  }
class C{  private static int try_failure(int count,String s,String e){  print(">    " + s + "*** failure ***\n>      Message: "+ e+ "\n");  return ++count;}  }
class C{  public ImageShowAdapter(Context context,List<String> imagePaths,int width,int height){  mContext=context;  this.mImagePaths=imagePaths;  this.mWidth=width;  this.mHeight=height;  mAbImageLoader=new AbImageLoader(mContext);  mAbImageLoader.setMaxWidth(this.mWidth);  mAbImageLoader.setMaxHeight(this.mHeight);  mAbImageLoader.setLoadingImage(R.drawable.image_loading);  mAbImageLoader.setErrorImage(R.drawable.image_error);  mAbImageLoader.setEmptyImage(R.drawable.image_empty);}  }
class C{  public static void moveDir(Configuration conf,Path src,Path dest) throws IOException {  FileSystem srcFs=FileSystem.get(src.toUri(),conf);  FileSystem destFs=FileSystem.get(dest.toUri(),conf);  if (!srcFs.getUri().equals(destFs.getUri())) {    throw new IOException("Source and destination filesystems " + "are different! src: " + srcFs.getUri() + " dest: "+ destFs.getUri());  }  Path destPathParent=dest.getParent();  if (destFs.exists(destPathParent)) {    if (!destFs.isDirectory(destPathParent)) {      throw new IOException("File exists instead of destination " + destPathParent);    } else {      LOG.debug("Parent directory exists: " + destPathParent);    }  } else {    destFs.mkdirs(destPathParent);  }  boolean successful=srcFs.rename(src,dest);  if (!successful) {    throw new IOException("Error while moving from " + src + " to "+ dest);  }}  }
class C{  protected ScriptingEnvironment initializeScriptingEnvironment(BridgeContext ctx){  SVGOMDocument d=(SVGOMDocument)ctx.getDocument();  ScriptingEnvironment se;  if (d.isSVG12()) {    se=new SVG12ScriptingEnvironment(ctx);    ctx.xblManager=new DefaultXBLManager(d,ctx);    d.setXBLManager(ctx.xblManager);  } else {    se=new ScriptingEnvironment(ctx);  }  return se;}  }
class C{  protected EnumIntegerType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public Geometry create(){  if (generator == null)   throw new NullPointerException("Missing child generator");  if (numberGeometries < 1)   throw new IllegalStateException("Too few child geoms to create");  ArrayList geoms=new ArrayList(numberGeometries);  GridGenerator grid=GeometryGenerator.createGridGenerator();  grid.setBoundingBox(boundingBox);  grid.setGeometryFactory(geometryFactory);switch (generationAlgorithm) {case BOX:    int nrow=(int)Math.sqrt(numberGeometries);  int ncol=numberGeometries / nrow;grid.setNumberRows(nrow);grid.setNumberColumns(ncol);break;case VERT:grid.setNumberRows(1);grid.setNumberColumns(numberGeometries);break;case HORZ:grid.setNumberRows(numberGeometries);grid.setNumberColumns(1);break;default :throw new IllegalStateException("Invalid Alg. Specified");}while (grid.canCreate()) {generator.setBoundingBox(grid.createEnv());geoms.add(generator.create());}if (generator instanceof PointGenerator) {return geometryFactory.createMultiPoint((Point[])geoms.toArray(new Point[numberGeometries]));} else {if (generator instanceof LineStringGenerator) {return geometryFactory.createMultiLineString((LineString[])geoms.toArray(new LineString[numberGeometries]));} else {if (generator instanceof PolygonGenerator) {return geometryFactory.createMultiPolygon((Polygon[])geoms.toArray(new Polygon[numberGeometries]));} else {return geometryFactory.createGeometryCollection((Geometry[])geoms.toArray(new Geometry[numberGeometries]));}}}}  }
class C{  public void testEndOfMessage(){  OlimexRfidProtocol instance=new OlimexRfidProtocol();  assertEquals(true,instance.endOfMessage(msgStandalone));}  }
class C{  protected static Object[] concatenate(Object[] a1,Object[] a2){  int a1Len=a1.length;  int a2Len=a2.length;  if (a1Len == 0)   return a2;  if (a2Len == 0)   return a1;  Object[] res=new Object[a1Len + a2Len];  System.arraycopy(a1,0,res,0,a1Len);  System.arraycopy(a2,0,res,a1Len,a2Len);  return res;}  }
class C{  public boolean isAlarmsVisible(){  return null == alarmsVisible ? _alarmsVisible : alarmsVisible.get();}  }
class C{  @Override public MutableTrigger build(){  CalendarIntervalTriggerImpl st=new CalendarIntervalTriggerImpl();  st.setRepeatInterval(interval);  st.setRepeatIntervalUnit(intervalUnit);  st.setMisfireInstruction(misfireInstruction);  st.setTimeZone(timeZone);  st.setPreserveHourOfDayAcrossDaylightSavings(preserveHourOfDayAcrossDaylightSavings);  st.setSkipDayIfHourDoesNotExist(skipDayIfHourDoesNotExist);  return st;}  }
class C{  public DimensionalTable(List<String> headerNames){  setHeaderNames(headerNames);  initialize();}  }
class C{  public MatDefNavigatorPanel(){  initComponents();  lookup=ExplorerUtils.createLookup(mgr,getActionMap());}  }
class C{  private void resetIcon(){  if (lastIdx != -1 && lastIdx < tabbedPane.getTabCount()) {    if (lastIdx == tabbedPane.getSelectedIndex())     tabbedPane.setIconAt(lastIdx,CancelSearchIconProxy.createSelected()); else     tabbedPane.setIconAt(lastIdx,CancelSearchIconProxy.createPlain());    lastIdx=-1;  }}  }
class C{  public static String encodeValue(String segment,String[] encoding){  ArrayList<String> params=new ArrayList<String>();  boolean foundParam=false;  StringBuffer newSegment=new StringBuffer();  if (savePathParams(segment,newSegment,params)) {    foundParam=true;    segment=newSegment.toString();  }  String result=encodeFromArray(segment,encoding,false);  result=encodeNonCodes(result);  segment=result;  if (foundParam) {    segment=pathParamReplacement(segment,params);  }  return segment;}  }
class C{  public void onCreate(@Nullable Bundle savedInstanceState,@Nullable Bundle arguments,ComponentCreator<C> creator){  if (savedInstanceState == null) {    mFragmentId=UUID.randomUUID().toString();  } else {    mFragmentId=savedInstanceState.getString("identifier");    mOnSaveInstanceCalled=false;  }  component=ComponentHolder.getInstance().getComponent(mFragmentId);  if (component == null) {    component=creator.create();    ComponentHolder.getInstance().putComponent(mFragmentId,component);    component.getPresenter().onCreate(arguments,savedInstanceState);  }}  }
class C{  public Clustering<Model> run(Relation<?> relation){  HashMap<String,DBIDs> labelmap=new HashMap<>();  ModifiableDBIDs noiseids=DBIDUtil.newArray();  Clustering<Model> clustering=new Clustering<>("By Label Hierarchical Clustering","bylabel-clustering");  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    final Object val=relation.get(iditer);    if (val == null) {      noiseids.add(iditer);      continue;    }    String label=val.toString();    assign(labelmap,label,iditer);  }  ArrayList<Cluster<Model>> clusters=new ArrayList<>(labelmap.size());  for (  Entry<String,DBIDs> entry : labelmap.entrySet()) {    DBIDs ids=entry.getValue();    if (ids instanceof DBID) {      noiseids.add((DBID)ids);      continue;    }    Cluster<Model> clus=new Cluster<Model>(entry.getKey(),ids,ClusterModel.CLUSTER);    clusters.add(clus);  }  for (  Cluster<Model> cur : clusters) {    boolean isrootcluster=true;    for (    Cluster<Model> oth : clusters) {      if (oth != cur && oth.getName().startsWith(cur.getName())) {        clustering.addChildCluster(oth,cur);        if (LOG.isDebuggingFiner()) {          LOG.debugFiner(oth.getName() + " is a child of " + cur.getName());        }        isrootcluster=false;      }    }    if (isrootcluster) {      clustering.addToplevelCluster(cur);    }  }  if (noiseids.size() > 0) {    Cluster<Model> c=new Cluster<Model>("Noise",noiseids,ClusterModel.CLUSTER);    c.setNoise(true);    clustering.addToplevelCluster(c);  }  return clustering;}  }
class C{  public void addNoSubclassDependency(RVMClass source,int dependent_cmid){  MethodSet s=findOrCreateMethodSet(noSubclassHash,source);  s.add(dependent_cmid);}  }
class C{  public void validateSolrConnectionString(){  if (solrMode.equals(SINGLE_NODE_MODE) && solrHost.contains(",")) {    throw new IllegalArgumentException(String.format("Multiple hosts '%s' found for Single Node Solr.",solrHost));  }}  }
class C{  @Override public void release() throws ReplicatorException, InterruptedException {}  }
class C{  protected StoragePool checkPoolExistsInDB(String nativeGuid) throws IOException {  StoragePool pool=null;  URIQueryResultList queryResult=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePoolByNativeGuidConstraint(nativeGuid),queryResult);  while (queryResult.iterator().hasNext()) {    URI poolURI=queryResult.iterator().next();    if (null != poolURI) {      StoragePool poolInDB=_dbClient.queryObject(StoragePool.class,poolURI);      if (!poolInDB.getInactive()) {        pool=poolInDB;        break;      }    }  }  return pool;}  }
class C{  public boolean canTraverseOutsideSubtree(){  return m_arg0.canTraverseOutsideSubtree();}  }
class C{  public static Value readValue(SessionInterface session,ResultSet rs,int columnIndex,int type){  try {    Value v;switch (type) {case Value.NULL:{        return ValueNull.INSTANCE;      }case Value.BYTES:{      byte[] buff=rs.getBytes(columnIndex);      v=buff == null ? (Value)ValueNull.INSTANCE : ValueBytes.getNoCopy(buff);      break;    }case Value.UUID:{    byte[] buff=rs.getBytes(columnIndex);    v=buff == null ? (Value)ValueNull.INSTANCE : ValueUuid.get(buff);    break;  }case Value.BOOLEAN:{  boolean value=rs.getBoolean(columnIndex);  v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueBoolean.get(value);  break;}case Value.BYTE:{byte value=rs.getByte(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueByte.get(value);break;}case Value.DATE:{Date value=rs.getDate(columnIndex);v=value == null ? (Value)ValueNull.INSTANCE : ValueDate.get(value);break;}case Value.TIME:{Time value=rs.getTime(columnIndex);v=value == null ? (Value)ValueNull.INSTANCE : ValueTime.get(value);break;}case Value.TIMESTAMP:{Timestamp value=rs.getTimestamp(columnIndex);v=value == null ? (Value)ValueNull.INSTANCE : ValueTimestamp.get(value);break;}case Value.DECIMAL:{BigDecimal value=rs.getBigDecimal(columnIndex);v=value == null ? (Value)ValueNull.INSTANCE : ValueDecimal.get(value);break;}case Value.DOUBLE:{double value=rs.getDouble(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueDouble.get(value);break;}case Value.FLOAT:{float value=rs.getFloat(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueFloat.get(value);break;}case Value.INT:{int value=rs.getInt(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueInt.get(value);break;}case Value.LONG:{long value=rs.getLong(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueLong.get(value);break;}case Value.SHORT:{short value=rs.getShort(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueShort.get(value);break;}case Value.STRING_IGNORECASE:{String s=rs.getString(columnIndex);v=(s == null) ? (Value)ValueNull.INSTANCE : ValueStringIgnoreCase.get(s);break;}case Value.STRING_FIXED:{String s=rs.getString(columnIndex);v=(s == null) ? (Value)ValueNull.INSTANCE : ValueStringFixed.get(s);break;}case Value.STRING:{String s=rs.getString(columnIndex);v=(s == null) ? ValueNull.INSTANCE : ValueString.get(s);break;}case Value.CLOB:{if (session == null) {v=ValueLobDb.createSmallLob(Value.CLOB,rs.getString(columnIndex).getBytes(Constants.UTF8));} else {Reader in=rs.getCharacterStream(columnIndex);if (in == null) {v=ValueNull.INSTANCE;} else {v=ValueLobDb.createTempClob(new BufferedReader(in),-1);}}break;}case Value.BLOB:{if (session == null) {v=ValueLobDb.createSmallLob(Value.BLOB,rs.getBytes(columnIndex));} else {InputStream in=rs.getBinaryStream(columnIndex);v=(in == null) ? (Value)ValueNull.INSTANCE : ValueLobDb.createTempBlob(in,-1);}break;}case Value.JAVA_OBJECT:{if (SysProperties.serializeJavaObject) {byte[] buff=rs.getBytes(columnIndex);v=buff == null ? ValueNull.INSTANCE : ValueJavaObject.getNoCopy(null,buff);} else {Object o=rs.getObject(columnIndex);v=o == null ? ValueNull.INSTANCE : ValueJavaObject.getNoCopy(o,null);}break;}case Value.ARRAY:{Array array=rs.getArray(columnIndex);if (array == null) {return ValueNull.INSTANCE;}Object[] list=(Object[])array.getArray();if (list == null) {return ValueNull.INSTANCE;}int len=list.length;Value[] values=new Value[len];for (int i=0; i < len; i++) {values[i]=DataType.convertToValue(session,list[i],Value.NULL);}v=ValueArray.get(values);break;}case Value.RESULT_SET:{ResultSet x=(ResultSet)rs.getObject(columnIndex);if (x == null) {return ValueNull.INSTANCE;}return ValueResultSet.get(rs);}default :throw DbException.throwInternalError("type=" + type);}return v;} catch (SQLException e) {throw DbException.convert(e);}}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  int delete(final String table,final String whereClause,final String[] whereArgs,final boolean autoNotify){  final SQLiteDatabase database=getWritableDatabase();  final int deleteCount=database.delete(table,whereClause,whereArgs);  if (autoNotify && (deleteCount > 0)) {    notifyChange(table);  }  return deleteCount;}  }
class C{  public UserCredentials(Collection<Field> fields,Map<String,String> values){  super(fields);  this.values=values;}  }
class C{  public static boolean isSubset(Repository rep1,Repository rep2) throws RepositoryException {  Set<Statement> model1, model2;  RepositoryConnection con1=rep1.getConnection();  try {    model1=Iterations.asSet(con1.getStatements(null,null,null,true));  }  finally {    con1.close();  }  RepositoryConnection con2=rep2.getConnection();  try {    model2=Iterations.asSet(con2.getStatements(null,null,null,true));  }  finally {    con2.close();  }  return Models.isSubset(model1,model2);}  }
class C{  public EdgeRenderer(int edgeType,int arrowType){  this();  setEdgeType(edgeType);  setArrowType(arrowType);}  }
class C{  protected AbstractUpdate(){  super();}  }
class C{  public NPCSetDirection(Direction direction){  this.direction=checkNotNull(direction);}  }
class C{  public static void println(int priority,String tag,String msg,Throwable tr){  if (mLogNode != null) {    mLogNode.println(priority,tag,msg,tr);  }}  }
class C{  private void appendPointTaggedText(Coordinate coordinate,int level,Writer writer,PrecisionModel precisionModel) throws IOException {  appendPoint(coordinate,level,writer,precisionModel);}  }
class C{  protected void performInitialization(){  initialize();  initGUI();  finishInit();}  }
class C{  public LinearSGD(LossFunc loss,double eta,DecayRate decay,double lambda0,double lambda1){  setLoss(loss);  setEta(eta);  setEtaDecay(decay);  setGradientUpdater(new SimpleSGD());  setLambda0(lambda0);  setLambda1(lambda1);}  }
class C{  public long toHours(){  return timeUnit.toHours(length);}  }
class C{  public boolean isWordPart(char aChar){  return Character.isLetterOrDigit(aChar) || aChar == '-' || aChar == '_';}  }
class C{  private void emitPermutationsAppCache(TreeLogger logger,LinkerContext context,ArtifactSet artifacts,String startScreenId,OfflineScreen offlineScreen) throws UnableToCompleteException {  for (  EmittedArtifact emitted : artifacts.find(EmittedArtifact.class)) {    if (emitted.getVisibility() == Visibility.Private) {      continue;    }    String pathName=emitted.getPartialPath();    if (acceptCachedResource(pathName)) {      if (!allArtifacts.contains(pathName)) {        cachedArtifacts.add(pathName);      }    }  }  Set<ArtifactsGroup> keySet=artifactsByGroup.keySet();  for (  ArtifactsGroup group : keySet) {    Set<String> set=artifactsByGroup.get(group);    set.addAll(cachedArtifacts);    artifacts.add(createCacheManifest(context,logger,set,group.getGroupId(),startScreenId,offlineScreen));    artifacts.add(createCacheManifestLoader(context,logger,group.getGroupId(),startScreenId));  }}  }
class C{  public int memory(){  return values.elements().length;}  }
class C{  public ESRIPoint(double _x,double _y){  x=_x;  y=_y;}  }
class C{  void debugHull(){  StringBuilder buf=new StringBuilder();  for (  IntIntPair p : hull) {    buf.append(p.first).append(" (").append(p.second).append(") ");  }  LOG.debugFinest(buf);}  }
class C{  public static EObject findCommonAncestor(List<EObject> o1Anchestors,List<EObject> o2Anchestors){  int max=Math.min(o1Anchestors.size(),o2Anchestors.size());  EObject commonAncestor=null;  for (int i=0; i < max; i++) {    if (o1Anchestors.get(i) == o2Anchestors.get(i)) {      commonAncestor=o1Anchestors.get(i);    } else {      break;    }  }  return commonAncestor;}  }
class C{  @LargeTest public void testThumbnailWithNegativeWidth() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";  final int tnCount=10;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  try {    final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);    final int outWidth=-1;    final int outHeight=mediaVideoItem.getHeight();    final long thumbNailStartTime=mediaVideoItem.getBoundaryBeginTime() / 2;    final long thumbNailEndTime=mediaVideoItem.getBoundaryEndTime();    mediaVideoItem.getThumbnailList(outWidth,outHeight,thumbNailStartTime,thumbNailEndTime,tnCount);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Thumbnail List with negative Height",flagForException);}  }
class C{  public void addAll(Mnemonic source){  if (wordcase != source.wordcase)   throw new IllegalArgumentException(source.description + ": wordcases do not match");  strings.putAll(source.strings);  values.putAll(source.values);}  }
class C{  private Volume findVirtualVolumeManagedByVipr(VPlexVirtualVolumeInfo info){  if (info != null) {    s_logger.info("Determining if Virtual Volume {} is managed by ViPR",info.getName());    String volumeNativeGuid=info.getPath();    s_logger.info("...checking ViPR's Volume table for volume native guid {}",volumeNativeGuid);    URIQueryResultList result=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeNativeIdConstraint(volumeNativeGuid),result);    if (result.iterator().hasNext()) {      Volume volume=_dbClient.queryObject(Volume.class,result.iterator().next());      if (null != volume && !volume.getInactive()) {        return volume;      }    }  }  return null;}  }
class C{  public synchronized void init(final String whereKey,final String isValue,final Iterator<Map.Entry<byte[],Map<String,String>>> table){  Map<String,Collection<byte[]>> valueIdxMap=new HashMap<String,Collection<byte[]>>();  this.index.put(whereKey,valueIdxMap);  Map.Entry<byte[],Map<String,String>> line;  while (table.hasNext()) {    line=table.next();    String value=line.getValue().get(whereKey);    if (value == null)     continue;    indexupdate(line.getKey(),valueIdxMap,value.toLowerCase());  }}  }
class C{  public final byte[] update(byte[] input,int inputOffset,int inputLen){  checkCipherState();  if (input == null || inputOffset < 0 || inputLen > (input.length - inputOffset) || inputLen < 0) {    throw new IllegalArgumentException("Bad arguments");  }  chooseFirstProvider();  if (inputLen == 0) {    return null;  }  return spi.engineUpdate(input,inputOffset,inputLen);}  }
class C{  public String validate(String value){  if (value == null) {    return null;  }  for (int i=0; i < patterns.length; i++) {    Matcher matcher=patterns[i].matcher(value);    if (matcher.matches()) {      int count=matcher.groupCount();      if (count == 1) {        return matcher.group(1);      }      StringBuilder buffer=new StringBuilder();      for (int j=0; j < count; j++) {        String component=matcher.group(j + 1);        if (component != null) {          buffer.append(component);        }      }      return buffer.toString();    }  }  return null;}  }
class C{  public Range keyHashRange(String routeKey){  if (routeKey.indexOf(SEPARATOR) < 0) {    int hash=sliceHash(routeKey,null,null,null);    return new Range(hash,hash);  }  return new KeyParser(routeKey).getRange();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void write(ByteAppendable os,char ch) throws IOException {  os.write(ch < 0x100 ? ch : 0x3f);}  }
class C{  public static void changeSubject(MimeMessage message,String newValue) throws MessagingException {  String rawSubject=message.getHeader(RFC2822Headers.SUBJECT,null);  String mimeCharset=determineMailHeaderEncodingCharset(rawSubject);  if (mimeCharset == null) {    message.setSubject(newValue);  } else {    String javaCharset=javax.mail.internet.MimeUtility.javaCharset(mimeCharset);    try {      message.setSubject(newValue,javaCharset);    } catch (    MessagingException e) {      message.setSubject(newValue);    }  }}  }
class C{  public ModuleFilterSpecifier createModuleFilterSpecifier(){  ModuleFilterSpecifierImpl moduleFilterSpecifier=new ModuleFilterSpecifierImpl();  return moduleFilterSpecifier;}  }
class C{  protected byte[] toJsonBytesGuestDetails(final String email) throws Exception {  final RegisterRO register=new RegisterRO();  register.setEmail(email);  register.setCustomerType("B2G");  register.setCustom(new HashMap<String,String>());  register.getCustom().put("firstname","Bob");  register.getCustom().put("lastname","Doe");  return toJsonBytes(register);}  }
class C{  private void createMetaFile() throws GeneratorException, InterruptedException {  checkForInterruption();  setState(STATE.METADATA);  try {    MetaDescriptorWriter.writeMetaFile(new File(dwcaFolder,"meta.xml"),archive);  } catch (  IOException e) {    throw new GeneratorException("Meta.xml file could not be written",e);  }  addMessage(Level.INFO,"meta.xml archive descriptor written");}  }
class C{  public void loadQuest(final IQuest quest){  final String regex=System.getProperty("stendhal.quest.regex",".*");  if (!quest.getName().matches(regex)) {    return;  }  try {    initQuestAndAddToWorld(quest);  } catch (  Exception e) {    logger.error("Quest(" + quest.getName() + ") loading failed.",e);  }}  }
class C{  public static double root(double eps,int maxIterations,double a,double b,int pos,Function f,double... args){  if (b <= a)   throw new ArithmeticException("a musbt be < b for Bisection to work");  if (args == null || args.length == 0) {    pos=0;    args=new double[1];  }  args[pos]=b;  double fb=f.f(args);  args[pos]=a;  double fa=f.f(args);  if (fa * fb >= 0)   throw new ArithmeticException("The given interval does not appear to bracket the root");  while (b - a > 2 * eps && maxIterations-- > 0) {    args[pos]=(a + b) * 0.5;    double ftmp=f.f(args);    if (fa * ftmp < 0) {      b=args[pos];      fb=ftmp;    } else     if (fb * ftmp < 0) {      a=args[pos];      fa=ftmp;    } else     break;  }  return (a + b) * 0.5;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:43.004 -0500",hash_original_method="9646D8356AAE31876A9E9F3AB6644735",hash_generated_method="A593400102316B2AAD640F9202795286") public static final void dumpReferenceTables(){}  }
class C{  public void testDirectDynamic() throws Exception {  assertEquals(SweetSpotSimilarity.class,getSimilarity("text_sim1").getClass());}  }
class C{  @Configurable public void addArg(String arg){  if (_args == null)   _args=new ArrayList<String>();  _args.add(arg);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isGpsProviderEnabled(){  if (!isAllowed()) {    return false;  }  String provider=LocationManager.GPS_PROVIDER;  if (locationManager.getProvider(provider) == null) {    return false;  }  return locationManager.isProviderEnabled(provider);}  }
class C{  protected String renderBaseElement(String scheme,String serverName,int port,String uri){  StringBuffer tag=new StringBuffer("<base href=\"");  tag.append(createServerUriStringBuffer(scheme,serverName,port,uri).toString());  tag.append("/\"");  if (this.target != null) {    tag.append(" target=\"");    tag.append(this.target);    tag.append("\"");  }  tag.append(" />");  return tag.toString();}  }
class C{  public static void sortByIndex(int start,int end,int[] indexes,double[] values){  int tempIx;  double tempVal;  int length=end - start;  if (length < 7) {    for (int i=start + 1; i < end; i++) {      for (int j=i; j > start && indexes[j - 1] > indexes[j]; j--) {        tempIx=indexes[j];        indexes[j]=indexes[j - 1];        indexes[j - 1]=tempIx;        tempVal=values[j];        values[j]=values[j - 1];        values[j - 1]=tempVal;      }    }    return;  }  int middle=(start + end) / 2;  if (length > 7) {    int bottom=start;    int top=end - 1;    if (length > 40) {      length/=8;      bottom=med3(indexes,bottom,bottom + length,bottom + (2 * length));      middle=med3(indexes,middle - length,middle,middle + length);      top=med3(indexes,top - (2 * length),top - length,top);    }    middle=med3(indexes,bottom,middle,top);  }  int partionValue=indexes[middle];  int a, b, c, d;  a=b=start;  c=d=end - 1;  while (true) {    while (b <= c && indexes[b] <= partionValue) {      if (indexes[b] == partionValue) {        tempIx=indexes[a];        indexes[a]=indexes[b];        indexes[b]=tempIx;        tempVal=values[a];        values[a++]=values[b];        values[b]=tempVal;      }      b++;    }    while (c >= b && indexes[c] >= partionValue) {      if (indexes[c] == partionValue) {        tempIx=indexes[c];        indexes[c]=indexes[d];        indexes[d]=tempIx;        tempVal=values[c];        values[c]=values[d];        values[d--]=tempVal;      }      c--;    }    if (b > c) {      break;    }    tempIx=indexes[b];    indexes[b]=indexes[c];    indexes[c]=tempIx;    tempVal=values[b];    values[b++]=values[c];    values[c--]=tempVal;  }  length=a - start < b - a ? a - start : b - a;  int l=start;  int h=b - length;  while (length-- > 0) {    tempIx=indexes[l];    indexes[l]=indexes[h];    indexes[h]=tempIx;    tempVal=values[l];    values[l++]=values[h];    values[h++]=tempVal;  }  length=d - c < end - 1 - d ? d - c : end - 1 - d;  l=b;  h=end - length;  while (length-- > 0) {    tempIx=indexes[l];    indexes[l]=indexes[h];    indexes[h]=tempIx;    tempVal=values[l];    values[l++]=values[h];    values[h++]=tempVal;  }  if ((length=b - a) > 0) {    sortByIndex(start,start + length,indexes,values);  }  if ((length=d - c) > 0) {    sortByIndex(end - length,end,indexes,values);  }}  }
class C{  public AccountId(final Address address){  if (null == address) {    throw new IllegalArgumentException("address is required");  }  this.address=address;  this.checkValidity();}  }
class C{  public static String detectGwtModuleLogicalName(Path folder) throws IOException {  final String resourcesDir=folder.toString();  Finder finder=new Finder("*" + GWT_MODULE_XML_SUFFIX);  Files.walkFileTree(folder,EnumSet.of(FileVisitOption.FOLLOW_LINKS),Integer.MAX_VALUE,finder);  if (finder.getFirstMatchedFile() == null) {    throw new IllegalArgumentException("GWT module descriptor (*.gwt.xml) not found.");  }  String filePath=finder.getFirstMatchedFile().toString();  filePath=filePath.substring(filePath.indexOf(resourcesDir) + resourcesDir.length() + 1,filePath.length() - GWT_MODULE_XML_SUFFIX.length());  return filePath.replace(File.separatorChar,'.');}  }
class C{  protected String convertToXML(String text){  text=text.replace("&","&amp;");  text=text.replace("<","&lt;");  text=text.replace(">","&gt;");  text=text.replace("\"","&quot;");  return text;}  }
class C{  public boolean isPaged(){  if (media.equals("print")) {    return true;  }  if (media.equals("projection")) {    return true;  }  if (media.equals("embossed")) {    return true;  }  if (media.equals("handheld")) {    return true;  }  if (media.equals("tv")) {    return true;  }  return false;}  }
class C{  protected void addToTopBox(Component comp){  topBox.add(Box.createHorizontalStrut(topStrutWidth),topBoxIndex);  ++topBoxIndex;  topBox.add(comp,topBoxIndex);  ++topBoxIndex;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:32.619 -0500",hash_original_method="FBC240376FAD4D50980C7C25336A97EE",hash_generated_method="73DB8AE50ED830F8DB18E178AD310B32") public static String[] listServices() throws RemoteException {  try {    return getIServiceManager().listServices();  } catch (  RemoteException e) {    Log.e(TAG,"error in listServices",e);    return null;  }}  }
class C{  public void testFailureWithSuccessAndFailureThresholds(){  CircuitBreaker breaker=new CircuitBreaker().withSuccessThreshold(3).withFailureThreshold(2);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  state.recordSuccess();  state.recordSuccess();  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordFailure();  assertTrue(breaker.isOpen());}  }
class C{  private void readParameterAnnotations(final MethodVisitor mv,final Context context,int v,final boolean visible){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(context.desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  char[] c=context.buffer;  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,c),visible);      v=readAnnotationValues(v + 2,c,true,av);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:23.905 -0400",hash_original_method="1CC41FC150F37B76A5F679E2DF486BF3",hash_generated_method="EDE18B9709DE172DB1C2EBF463B76758") public ListMenuPresenter(int itemLayoutRes,int themeRes){  mItemLayoutRes=itemLayoutRes;  mThemeRes=themeRes;}  }
class C{  public String type(){  return type;}  }
class C{  public static Referenceable createClusterEntity(final org.apache.falcon.entity.v0.cluster.Cluster cluster) throws Exception {  LOG.info("Creating cluster Entity : {}",cluster.getName());  Referenceable clusterRef=new Referenceable(FalconDataTypes.FALCON_CLUSTER.getName());  clusterRef.set(AtlasClient.NAME,cluster.getName());  clusterRef.set(AtlasClient.DESCRIPTION,cluster.getDescription());  clusterRef.set(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME,cluster.getName());  clusterRef.set(FalconDataModelGenerator.COLO,cluster.getColo());  if (cluster.getACL() != null) {    clusterRef.set(AtlasClient.OWNER,cluster.getACL().getGroup());  }  if (StringUtils.isNotEmpty(cluster.getTags())) {    clusterRef.set(FalconDataModelGenerator.TAGS,EventUtil.convertKeyValueStringToMap(cluster.getTags()));  }  return clusterRef;}  }
class C{  public void write(String record) throws IOException {  Chunk ch=currentChunk();  boolean hasNewLine=record.endsWith("\n");  int rawBytesToWrite=record.length();  if (!hasNewLine) {    rawBytesToWrite+=1;  }  if ((ch.rawBytes + rawBytesToWrite) > chunkThreshold) {    finishChunk();    initChunkWriter();    Chunk newCh=new Chunk();    newCh.firstOffset=ch.firstOffset + ch.numRecords;    newCh.byteOffset=ch.byteOffset + ch.compressedByteLength;    chunks.add(newCh);    ch=newCh;  }  writer.append(record);  if (!hasNewLine) {    writer.newLine();  }  ch.rawBytes+=rawBytesToWrite;  ch.numRecords++;}  }
class C{  public void checkForDuplicateNamespace(String namespace){  TenantOrgList list=new TenantOrgList();  TenantOrg rootTenant=_permissionsHelper.getRootTenant();  if (rootTenant.getNamespace() != null && rootTenant.getNamespace().equalsIgnoreCase(namespace)) {    throw APIException.badRequests.duplicateNamespace(namespace);  }  NamedElementQueryResultList subtenants=new NamedElementQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getTenantOrgSubTenantConstraint(rootTenant.getId()),subtenants);  for (  NamedElementQueryResultList.NamedElement el : subtenants) {    TenantOrg currTenant=_dbClient.queryObject(TenantOrg.class,el.getId());    if (currTenant.getNamespace() != null && currTenant.getNamespace().equalsIgnoreCase(namespace)) {      throw APIException.badRequests.duplicateNamespace(namespace);    }  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 188) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public synchronized void clear(){  mXY.clear();  mStringXY.clear();  initRange();}  }
class C{  public InlineQueryResultAudio.InlineQueryResultAudioBuilder id(String id){  this.id=id;  return this;}  }
class C{  protected void engineInit(SecureRandom random){  this.random=random;}  }
class C{  private static int numericCompaction(int[] codewords,int codeIndex,StringBuilder result) throws FormatException {  int count=0;  boolean end=false;  int[] numericCodewords=new int[MAX_NUMERIC_CODEWORDS];  while (codeIndex < codewords[0] && !end) {    int code=codewords[codeIndex++];    if (codeIndex == codewords[0]) {      end=true;    }    if (code < TEXT_COMPACTION_MODE_LATCH) {      numericCodewords[count]=code;      count++;    } else {      if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      }    }    if (count % MAX_NUMERIC_CODEWORDS == 0 || code == NUMERIC_COMPACTION_MODE_LATCH || end) {      String s=decodeBase900toBase10(numericCodewords,count);      result.append(s);      count=0;    }  }  return codeIndex;}  }
class C{  public void arrayValue(int numValues) throws IOException {  output.write('[');  write16bit(numValues);}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  private SpeechletResponse handleOneshotTideRequest(final Intent intent,final Session session){  CityDateValues<String,String> cityObject=null;  try {    cityObject=getCityStationFromIntent(intent,true);  } catch (  Exception e) {    String speechOutput="Currently, I know tide information for these coastal cities: " + getAllStationsText() + "Which city would you like tide information for?";    return newAskResponse(speechOutput,speechOutput);  }  CityDateValues<String,String> dateObject=getDateFromIntent(intent);  return getFinalTideResponse(cityObject,dateObject);}  }
class C{  private void publishData(String path,byte[] data){  try {    if (data != null && data.length > 0) {      ByteArrayInputStream bii=new ByteArrayInputStream(data);      ObjectInputStream ois=new ObjectInputStream(bii);      Object dataObj=ois.readObject();      ZooKeeperDataWrapper wrapper=(ZooKeeperDataWrapper)(dataObj);      JetstreamMessage tm=(JetstreamMessage)wrapper.getOrginalData();      String trackerKey=createKey(path,wrapper);      m_changeTracker.put(trackerKey,wrapper.getTimestamp());      try {        LOGGER.warn("Publishing the change for topic :" + path + " TrackerKey :"+ trackerKey+ " Timestamp : "+ wrapper.getTimestamp());        m_transportListener.postMessage(tm,m_queueStats);      } catch (      Throwable mse) {        StringBuffer buf=new StringBuffer();        buf.append("Error dispatching to message service - ");        buf.append(mse.getLocalizedMessage());        LOGGER.error("Exception publishing data for path :" + path + buf.toString(),mse);      }      m_totalMsgsRcvd.increment();      m_msgsRcvdPerSec.increment();    }  } catch (  ClassNotFoundException e) {    LOGGER.error(" ClassNotFoundException while publishing data to transport Listener :" + path,e);  }catch (  IOException e) {    LOGGER.error(" IOException while publishing data to transport Listener :" + path,e);  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.majorTickPaint,stream);  SerialUtilities.writeStroke(this.majorTickStroke,stream);  SerialUtilities.writePaint(this.minorTickPaint,stream);  SerialUtilities.writeStroke(this.minorTickStroke,stream);  SerialUtilities.writePaint(this.tickLabelPaint,stream);}  }
class C{  public PaletteColorChooserPreviewPanel(){  initComponents();  setToolTipText("on");}  }
class C{  public static final Intent addDrmFile(ContentResolver cr,File file,String title){  FileInputStream fis=null;  Intent result=null;  try {    fis=new FileInputStream(file);    if (title == null) {      title=file.getName();      int lastDot=title.lastIndexOf('.');      if (lastDot > 0) {        title=title.substring(0,lastDot);      }    }    result=addDrmFile(cr,fis,title);  } catch (  Exception e) {    Log.e(TAG,"pushing file failed",e);  } finally {    try {      if (fis != null)       fis.close();    } catch (    IOException e) {      Log.e(TAG,"IOException in DrmStore.addDrmFile()",e);    }  }  return result;}  }
class C{  @SuppressWarnings("unchecked") private static <Type extends Message>Type copyAsType(final Type typeDefaultInstance,final Message source){  return (Type)typeDefaultInstance.newBuilderForType().mergeFrom(source).build();}  }
class C{  public List<Industry> industries(){  return industries;}  }
class C{  public static String trimLength(String str,int length){  if (str == null)   return str;  if (length <= 0)   throw new IllegalArgumentException("Trim length invalid: " + length);  if (str.length() > length)   return str.substring(0,length);  return str;}  }
class C{  public void clickLinkWait(String locator){  logger.info("INFO: click action will be performed on selector: " + locator);  this.fluentWaitPresent(locator);  this.findElement(locator).click();  logger.info("INFO: clickLink was performed on: " + locator);}  }
class C{  public static void initiateItemEvent(EntityPlayer player,ItemStack itemStack,int event,boolean limitRange){  try {    if (NetworkManager_initiateItemEvent == null)     NetworkManager_initiateItemEvent=Class.forName(getPackage() + ".core.network.NetworkManager").getMethod("initiateItemEvent",EntityPlayer.class,ItemStack.class,Integer.TYPE,Boolean.TYPE);    if (instance == null)     instance=getInstance();    NetworkManager_initiateItemEvent.invoke(instance,player,itemStack,event,limitRange);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public BigdataReader(JiniFederation fed){  this.fed=fed;}  }
class C{  public void dispose(){synchronized (processes) {    for (    INodejsProcess server : processes) {      try {        server.kill();      } catch (      Throwable e) {        e.printStackTrace();      }    }    processes.clear();  }}  }
class C{  public Exception convertException(Exception e){  return e;}  }
class C{  public String[] next(){  String[] temp=nextLine;  try {    nextLine=reader.readNext();  } catch (  IOException e) {    throw new RuntimeException(e);  }  return temp;}  }
class C{  public void summarize(){  if (this.processList == null)   return;  for (  ProcessListEntry e : this.processList) {    if ("system user".equalsIgnoreCase(e.getUser()))     continue;    if (!this.userSummary.containsKey(e.getUser()))     this.userSummary.put(e.getUser(),1); else     this.userSummary.put(e.getUser(),this.userSummary.get(e.getUser()) + 1);    if (!this.hostSummary.containsKey(e.getHost()))     this.hostSummary.put(e.getHost(),1); else     this.hostSummary.put(e.getHost(),this.hostSummary.get(e.getHost()) + 1);    if (e.getState() != null) {      if (!this.stateSummary.containsKey(e.getState()))       this.stateSummary.put(e.getState(),1); else       this.stateSummary.put(e.getState(),this.stateSummary.get(e.getState()) + 1);    }    if (!this.commandSummary.containsKey(e.getCommand()))     this.commandSummary.put(e.getCommand(),1); else     this.commandSummary.put(e.getCommand(),this.commandSummary.get(e.getCommand()) + 1);    if (!this.commandHostSummary.containsKey(e.getHost() + "-" + e.getCommand()))     this.commandHostSummary.put(e.getHost() + "-" + e.getCommand(),1); else     this.commandHostSummary.put(e.getHost() + "-" + e.getCommand(),this.commandHostSummary.get(e.getHost() + "-" + e.getCommand()) + 1);    if ("sleep".equalsIgnoreCase(e.getCommand()))     continue;    String s=stripComments(e.getInfo());    if (s == null || s.isEmpty())     continue;    int t=e.getTime();    if (t == Integer.MAX_VALUE || t < 0)     t=0;    ProcessListEntryAggregate.updateDataMap(this.queries,s,t);    totalAccumultaedTime+=t;    String ns=this.normalize(s);    ProcessListEntryAggregate.updateDataMap(this.normalizedQueries,ns,t);    String s2=this.stripLimit(s);    ProcessListEntryAggregate.updateDataMap(this.queriesWithLimitStripped,s2,t);    for (    ProcessListEntryProcessor pr : this.appProcessorList)     pr.processEntry(e);  }}  }
class C{  private boolean looksLikeMethodCall(){  nextToken();  return fToken == Symbols.TokenIDENT;}  }
class C{  @Override public void processStarts() throws OperatorException {  super.processStarts();  Iterator i=getListenerListCopy().iterator();  while (i.hasNext()) {    ((ProcessListener)i.next()).processStarts(this.process);  }}  }
class C{  private CFilterRuleParser(){}  }
class C{  public String debug(String prefix){  String thisDesc="\n" + prefix + "- "+ field+ " ("+ count+ ", %"+ percent+ ")";  if (subItems != null && !subItems.isEmpty()) {    for (    GraphicLogAnalysisResultItem item : subItems) {      thisDesc+=item.debug(prefix + "  ");    }  }  return thisDesc;}  }
class C{  public PollerData(){  currentProgress=0.0;  isError=false;  isComplete=false;  isStuckProgress=false;  jobId=PcConstants.NA;  uuidHasBeenSet=false;}  }
class C{  public RFC3394WrapEngine(BlockCipher engine){  this(engine,false);}  }
class C{  public void addCommandToLeftBar(Command cmd){  checkIfInitialized();  cmd.putClientProperty("TitleCommand",Boolean.TRUE);  cmd.putClientProperty("Left",Boolean.TRUE);  sideMenu.addCommand(cmd,0);}  }
class C{  private OptimizedObjectStreamRegistry(){}  }
class C{  private void popFloat(FPR reg){  asm.emitLFS(reg,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_FLOAT,FP);  discardSlot();}  }
class C{  public Name findName(int firstQuad,int secondQuad){  int hash=(secondQuad == 0) ? calcHash(firstQuad) : calcHash(firstQuad,secondQuad);  int ix=(hash & _mainHashMask);  int val=_mainHash[ix];  if ((((val >> 8) ^ hash) << 8) == 0) {    Name name=_mainNames[ix];    if (name == null) {      return null;    }    if (name.equals(firstQuad,secondQuad)) {      return name;    }  } else   if (val == 0) {    return null;  }  val&=0xFF;  if (val > 0) {    val-=1;    Bucket bucket=_collList[val];    if (bucket != null) {      return bucket.find(hash,firstQuad,secondQuad);    }  }  return null;}  }
class C{  public static CassandraConfig parse(CassandraProtos.CassandraConfig config) throws IOException {  return create(config.getVersion(),config.getCpus(),config.getMemoryMb(),config.getDiskMb(),VolumeRequirement.VolumeType.values()[config.getDiskType()],(config.hasReplaceIp()) ? config.getReplaceIp() : "",HeapConfig.parse(config.getHeap()),Location.parse(config.getLocation()),config.getJmxPort(),config.getPublishDiscoveryInfo(),CassandraApplicationConfig.parse(config.getApplication()));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.725 -0500",hash_original_method="2A2E0ABF3B3B1A4964ED7A72D14B2724",hash_generated_method="FA677E6C1FA5D2A4A5104A5809BB044A") private OpenSSLSignature(String algorithm) throws NoSuchAlgorithmException {  super(algorithm);  if ("RSA-MD2".equals(algorithm)) {    throw new NoSuchAlgorithmException(algorithm);  }  this.evpAlgorithm=algorithm;}  }
class C{  static public InputSource fileInputSource(String filename){  return fileInputSource(new File(filename));}  }
class C{  public static String[] toStringArray(short[] array){  if (array == null) {    return null;  }  String[] result=new String[array.length];  for (int i=0; i < array.length; i++) {    result[i]=String.valueOf(array[i]);  }  return result;}  }
class C{  @Override public String globalInfo(){  return "Takes RAndom partition of labELs; like RAkEL but labelsets are disjoint / non-overlapping subsets.";}  }
class C{  public boolean entityHasChecksForPermission(Class<?> resourceClass,Class<? extends Annotation> annotationClass){  EntityBinding binding=getEntityBinding(resourceClass);  return binding.entityPermissions.hasChecksForPermission(annotationClass);}  }
class C{  public ServiceChangedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @Override public Iterator iterator(){  return new StructIterator(fieldValuesIterator());}  }
class C{  public void parse(ExtensionProfile extProfile,Reader reader) throws IOException, ParseException {  new XmlParser().parse(reader,new Handler(extProfile),atomPubNs.getUri(),"service");}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttributes){  for (ElemTemplateElement node=m_firstChild; node != null; node=node.m_nextSibling) {    node.callVisitors(visitor);  }}  }
class C{  public static <A>FluxTSeq<A> of(AnyMSeq<? extends Flux<A>> monads){  return new FluxTSeq<>(monads);}  }
class C{  public void onPause(boolean multitasking){}  }
class C{  private void scrollBy(final int increment){  index+=increment;  if (index < 0) {    index=0;  }  if (index >= items.size()) {    index=items.size() - 1;  }  redraw();}  }
class C{  public void addRefactoringDescriptor(final RefactoringDescriptorProxy proxy,IProgressMonitor monitor){  Assert.isNotNull(proxy);  if (monitor == null)   monitor=new NullProgressMonitor();  try {    fireRefactoringHistoryEvent(proxy,RefactoringHistoryEvent.ADDED);  }  finally {    monitor.done();  }}  }
class C{  @Override public void displayTextCycle(Cycle cycle){  this.textCycle=cycle;  if (alreadyInitializedRecyclerList) {    populateRecyclerList();  } else {    initRecyclerView();    alreadyInitializedRecyclerList=true;    populateRecyclerList();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.085 -0500",hash_original_method="1F863325AF2C0E7F13338BA09821D55A",hash_generated_method="AAA224C6EEF138024ADBB901DEBA5E26") public static String normalize(String value){  if (value == null)   return value;  value=value.trim();  if (value.indexOf("  ") == -1)   return value;  boolean space=false;  int len=value.length();  StringBuffer b=new StringBuffer(len);  for (int i=0; i < len; i++) {    char v=value.charAt(i);    if (v == ' ') {      if (!space)       b.append(v);      space=true;    } else {      b.append(v);      space=false;    }  }  return b.toString();}  }
class C{  public boolean forEach(TFloatProcedure procedure){  byte[] states=_states;  float[] set=_set;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  public JobName(String jobName,Locale locale){  super(jobName,locale);}  }
class C{  public void testConfiguredVariant(){  m_Filter=getConfiguredFilterVariant();  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());}  }
class C{  public T textChanged(Object handler,String method){  if (view instanceof TextView) {    TextView tv=(TextView)view;    Common common=new Common().forward(handler,method,true,TEXT_CHANGE_SIG);    tv.addTextChangedListener(common);  }  return self();}  }
class C{  private Node<K,V> findPredecessorOfLast(){  for (; ; ) {    Index<K,V> q=head;    for (; ; ) {      Index<K,V> d, r;      if ((r=q.right) != null) {        if (r.indexesDeletedNode()) {          q.unlink(r);          break;        }        if (r.node.next != null) {          q=r;          continue;        }      }      if ((d=q.down) != null)       q=d; else       return q.node;    }  }}  }
class C{  private void importAll(int pos,final TypeSymbol tsym,Env<AttrContext> env){  if (tsym.kind == PCK && tsym.members().elems == null && !tsym.exists()) {    if (((PackageSymbol)tsym).fullname.equals(names.java_lang)) {      JCDiagnostic msg=diags.fragment("fatal.err.no.java.lang");      throw new FatalError(msg);    } else {      log.error(DiagnosticFlag.RESOLVE_ERROR,pos,"doesnt.exist",tsym);    }  }  env.toplevel.starImportScope.importAll(tsym.members());}  }
class C{  public AvatarValueModel(String name,Avatar defaultValue){  super(name,defaultValue);}  }
class C{  public void addDisconnectedEventListener(PeerDisconnectedEventListener listener){  addDisconnectedEventListener(Threading.USER_THREAD,listener);}  }
class C{  protected void assertFilledCart(ShoppingCart cart,String guid){  final List<CartItem> items=cart.getCartItemList();  assertEquals(2,items.size());  final CartItem item=items.get(0);  assertEquals("ABC",item.getProductSkuCode());  assertEquals(BigDecimal.TEN,item.getQty());  assertEquals(new BigDecimal("49.99"),item.getSalePrice());  assertEquals(new BigDecimal("99.99"),item.getListPrice());  assertEquals(new BigDecimal("39.99"),item.getPrice());  assertFalse(item.isGift());  assertTrue(item.isPromoApplied());  assertEquals("PROMO1",item.getAppliedPromo());  final CartItem gift=items.get(1);  assertEquals("GIFT",gift.getProductSkuCode());  assertEquals(BigDecimal.ONE,gift.getQty());  assertEquals(new BigDecimal("9.99"),gift.getSalePrice());  assertEquals(new BigDecimal("9.99"),gift.getListPrice());  assertEquals(new BigDecimal("0.00"),gift.getPrice());  assertTrue(gift.isGift());  assertTrue(gift.isPromoApplied());  assertEquals("GIFT",gift.getAppliedPromo());  final List<CartItem> shipping=cart.getShippingList();  assertEquals(1,shipping.size());  final CartItem ship=shipping.get(0);  assertEquals("10",ship.getProductSkuCode());  assertEquals(BigDecimal.ONE,ship.getQty());  assertEquals(new BigDecimal("4.99"),ship.getSalePrice());  assertEquals(new BigDecimal("4.99"),ship.getListPrice());  assertEquals(new BigDecimal("4.99"),ship.getPrice());  assertFalse(ship.isGift());  assertFalse(ship.isPromoApplied());  assertNull(ship.getAppliedPromo());  final List<String> coupons=cart.getCoupons();  assertEquals(1,coupons.size());  assertEquals("COUPON-001",coupons.get(0));  assertEquals(guid,cart.getGuid());  assertEquals("EUR",cart.getCurrencyCode());  assertEquals("en",cart.getCurrentLocale());  assertEquals("bob@doe.com",cart.getShoppingContext().getCustomerEmail());  assertEquals("Bob Doe",cart.getShoppingContext().getCustomerName());  assertEquals(10L,cart.getShoppingContext().getShopId());  assertEquals("SHOP10",cart.getShoppingContext().getShopCode());  assertEquals(Arrays.asList("SHOP10","SHOP20"),cart.getShoppingContext().getCustomerShops());  assertEquals("GB",cart.getShoppingContext().getCountryCode());  assertEquals("GB-GB",cart.getShoppingContext().getStateCode());  assertEquals(Long.valueOf(10L),cart.getOrderInfo().getBillingAddressId());  assertTrue(cart.getOrderInfo().isBillingAddressNotRequired());  assertEquals(Long.valueOf(11L),cart.getOrderInfo().getDeliveryAddressId());  assertTrue(cart.getOrderInfo().isDeliveryAddressNotRequired());  assertEquals(Long.valueOf(12L),cart.getOrderInfo().getCarrierSlaId());  assertTrue(cart.getOrderInfo().isMultipleDelivery());  assertEquals("my message",cart.getOrderInfo().getOrderMessage());  assertEquals("pg1Label",cart.getOrderInfo().getPaymentGatewayLabel());  assertTrue(cart.getOrderInfo().isSeparateBillingAddress());}  }
class C{  public void draw(String text,int x,int y,String effect){  this.draw(text,x,y,this.lineHeight,effect);}  }
class C{  @SuppressWarnings("unchecked") public static Map<String,?> dsl_to_json(final String dsl) throws ValidationException {  checkArgument(StringUtils.isNotEmpty(dsl),"dsl text is null or empty");  final ScriptEngine engine=new ScriptEngineManager().getEngineByName("JavaScript");  engine.put("input",dsl);  try {    engine.eval(script);    final Object json=engine.get("output");    checkState(json instanceof Map,"Expected compiled object to be an instance of Map, but it is %s",Helper.getClassName(json));    return Helper.deepCopy((Map<String,?>)json,JSCollectionDetector.get());  } catch (  Exception e) {    throw new ValidationException("Failed to compile DSL:\n" + dsl,e);  }}  }
class C{  public List<GraphWidget> reattachWidgets(MuninFoo muninFoo,MuninMaster oldMaster){  List<GraphWidget> toBeUpdated_graphWidgets=new ArrayList<>();  List<GraphWidget> graphWidgets=muninFoo.sqlite.dbHlpr.getGraphWidgets();  if (graphWidgets.isEmpty())   return toBeUpdated_graphWidgets;  for (  MuninNode node : oldMaster.getChildren()) {    for (    MuninPlugin plugin : node.getPlugins()) {      for (      GraphWidget graphWidget : graphWidgets) {        if (graphWidget.getPlugin().equals(plugin)) {          MuninPlugin newPlugin=this.getNode(node.getUrl()).getPlugin(graphWidget.getPlugin().getName());          graphWidget.setPlugin(newPlugin);          toBeUpdated_graphWidgets.add(graphWidget);        }      }    }  }  return toBeUpdated_graphWidgets;}  }
class C{  public boolean isAbstract(){  EList<N4Modifier> _declaredModifiers=this.getDeclaredModifiers();  return _declaredModifiers.contains(N4Modifier.ABSTRACT);}  }
class C{  @Deprecated public void visitMethodInsn(int opcode,String owner,String name,String desc){  if (api >= Opcodes.ASM5) {    boolean itf=opcode == Opcodes.INVOKEINTERFACE;    visitMethodInsn(opcode,owner,name,desc,itf);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc);  }}  }
class C{  @SuppressWarnings("unchecked") static public void assertSameIterationAnyOrder(String msg,final Resource[] expected,final CloseableIteration<?,? extends Exception> actual) throws Exception {  final int nrange=expected.length;  final java.util.Map range=new java.util.HashMap();  for (int j=0; j < nrange; j++) {    range.put(expected[j],expected[j]);  }  for (int j=0; j < nrange; j++) {    if (!actual.hasNext()) {      fail(msg + ": Index exhausted while expecting more object(s)" + ": index="+ j);    }    final Object actualObject=actual.next();    if (range.remove(actualObject) == null) {      fail("Object not expected" + ": index=" + j + ", object="+ actualObject);    }  }  if (actual.hasNext()) {    fail("Iterator will deliver too many objects.");  }}  }
class C{  public static SimpleXid createRandom(){  int formatId=next.getAndIncrement();  byte[] bq=new byte[MAXBQUALSIZE];  MathUtils.randomBytes(bq);  byte[] gt=new byte[MAXGTRIDSIZE];  MathUtils.randomBytes(gt);  return new SimpleXid(formatId,bq,gt);}  }
class C{  public Object createImplementation(){  return new IOSImplementation();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.571 -0500",hash_original_method="83D32C5BCB0549BFFFB2F2ED18850933",hash_generated_method="667DA670555A625D54C35C40EDD4F8D3") public boolean decodeShortInteger(int startIndex){  if ((wspData[startIndex] & 0x80) == 0) {    return false;  }  unsigned32bit=wspData[startIndex] & 0x7f;  dataLength=1;  return true;}  }
class C{  public static BytesRef hashFile(Directory directory,String file) throws IOException {  final BytesRefBuilder fileHash=new BytesRefBuilder();  try (final IndexInput in=directory.openInput(file,IOContext.READONCE)){    hashFile(fileHash,new InputStreamIndexInput(in,in.length()),in.length());  }   return fileHash.get();}  }
class C{  protected final void writeDoctype(String rootTag,String dtdUrl) throws UncheckedIOException {  try {    this.writer.write("<!DOCTYPE " + rootTag + " SYSTEM \""+ dtdUrl+ "\">\n");  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  Button buttonActivity1=(Button)this.findViewById(R.id.activity_simple_open);  buttonActivity1.setOnClickListener(btnActivitySimpleOpen);  Button buttonActivity2=(Button)this.findViewById(R.id.activity_open_downloads);  buttonActivity2.setOnClickListener(btnActivityOpenDownloads);  Button buttonActivity3=(Button)this.findViewById(R.id.activity_select_folders);  buttonActivity3.setOnClickListener(btnActivitySelectFolders);  Button buttonActivity4=(Button)this.findViewById(R.id.activity_create_files);  buttonActivity4.setOnClickListener(btnActivityCreateFiles);  Button buttonActivity5=(Button)this.findViewById(R.id.activity_select_images);  buttonActivity5.setOnClickListener(btnActivitySelectImages);  Button buttonActivity6=(Button)this.findViewById(R.id.activity_ask_confirmation);  buttonActivity6.setOnClickListener(btnActivityAskConfirmation);  Button buttonActivity7=(Button)this.findViewById(R.id.activity_custom_labels);  buttonActivity7.setOnClickListener(btnActivityCustomLabels);  Button buttonActivity8=(Button)this.findViewById(R.id.activity_cancel_button);  buttonActivity8.setOnClickListener(btnActivityCancelButton);  Button buttonActivity9=(Button)this.findViewById(R.id.activity_filter_folders);  buttonActivity9.setOnClickListener(btnActivityFilterFolders);  Button buttonDialog1=(Button)this.findViewById(R.id.dialog_simple_open);  buttonDialog1.setOnClickListener(btnDialogSimpleOpen);  Button buttonDialog2=(Button)this.findViewById(R.id.dialog_open_downloads);  buttonDialog2.setOnClickListener(btnDialogOpenDownloads);  Button buttonDialog3=(Button)this.findViewById(R.id.dialog_select_folders);  buttonDialog3.setOnClickListener(btnDialogSelectFolders);  Button buttonDialog4=(Button)this.findViewById(R.id.dialog_create_files);  buttonDialog4.setOnClickListener(btnDialogCreateFiles);  Button buttonDialog5=(Button)this.findViewById(R.id.dialog_select_images);  buttonDialog5.setOnClickListener(btnDialogSelectImages);  Button buttonDialog6=(Button)this.findViewById(R.id.dialog_ask_confirmation);  buttonDialog6.setOnClickListener(btnDialogAskConfirmation);  Button buttonDialog7=(Button)this.findViewById(R.id.dialog_custom_labels);  buttonDialog7.setOnClickListener(btnDialogCustomLabels);  Button buttonDialog8=(Button)this.findViewById(R.id.dialog_cancel_button);  buttonDialog8.setOnClickListener(btnDialogCancelButton);  Button buttonDialog9=(Button)this.findViewById(R.id.dialog_filter_folders);  buttonDialog9.setOnClickListener(btnDialogFilterFolders);}  }
class C{  private int readAnnotationTarget(final Context context,int u){  int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:    target&=0xFFFF0000;  u+=2;break;case 0x13:case 0x14:case 0x15:target&=0xFF000000;u+=1;break;case 0x40:case 0x41:{target&=0xFF000000;int n=readUnsignedShort(u + 1);context.start=new Label[n];context.end=new Label[n];context.index=new int[n];u+=3;for (int i=0; i < n; ++i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);context.start[i]=readLabel(start,context.labels);context.end[i]=readLabel(start + length,context.labels);context.index[i]=readUnsignedShort(u + 4);u+=6;}break;}case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:target&=0xFF0000FF;u+=4;break;default :target&=(target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000;u+=3;break;}int pathLength=readByte(u);context.typeRef=target;context.typePath=pathLength == 0 ? null : new TypePath(b,u);return u + 1 + 2 * pathLength;}  }
class C{  public static Node lockDecorator(Node node,String tooltipText){  node.setDisable(true);  final StackPane pane=new StackPane();  final ContextMenu menu=new ContextMenu();  final MenuItem item=new MenuItem("Enable editing");  final Tooltip tooltip=new Tooltip(tooltipText);  Tooltip.install(pane,tooltip);  menu.getItems().add(item);  final EventHandler<MouseEvent> contextMenuToggle=null;  final EventHandler<ActionEvent> menuItemClicked=null;  item.setOnAction(menuItemClicked);  pane.setOnMousePressed(contextMenuToggle);  pane.getChildren().add(node);  return pane;}  }
class C{  public void disconnect(){  try {    mCtx.unbindService(apiConnection);  } catch (  IllegalArgumentException e) {  }}  }
class C{  public boolean canRepresentSigned(int x){  return (x >= min && x <= max);}  }
class C{  public boolean isAtContact(){  return isAtElement(RDE_CONTACT_URI,"contact");}  }
class C{  private Solution findSolutionWithMinimumDistance(List<Solution> solutions,double[] weight){  double minDistance=Double.POSITIVE_INFINITY;  Solution minSolution=null;  for (int i=0; i < solutions.size(); i++) {    double[] objectives=(double[])solutions.get(i).getAttribute(NORMALIZED_OBJECTIVES);    double distance=pointLineDistance(weight,objectives);    if (distance < minDistance) {      minDistance=distance;      minSolution=solutions.get(i);    }  }  return minSolution;}  }
class C{  private void requestMoveOperation(Intent data,int resultCode){  OCFile folderToMoveAt=data.getParcelableExtra(FolderPickerActivity.EXTRA_FOLDER);  OCFile targetFile=data.getParcelableExtra(FolderPickerActivity.EXTRA_FILE);  getFileOperationsHelper().moveFile(folderToMoveAt,targetFile);  Log.d(TAG,"requestMoveOperation result code : " + resultCode);}  }
class C{  @Override public void serializeWithType(T value,JsonGenerator jgen,SerializerProvider provider,TypeSerializer typeSer) throws IOException, JsonGenerationException {  typeSer.writeTypePrefixForScalar(value,jgen);  serialize(value,jgen,provider);  typeSer.writeTypeSuffixForScalar(value,jgen);}  }
class C{  public DoubleLinkedList<IMove> validMoves(){  DoubleLinkedList<IMove> list=new DoubleLinkedList<IMove>();  list.insert(new IncrementMove(0));  list.insert(new IncrementMove(1));  CutInHalfMove ch=new CutInHalfMove();  if (ch.isValid(this)) {    list.insert(ch);  }  return list;}  }
class C{  public DrawerBuilder withStickyFooterDivider(boolean stickyFooterDivider){  this.mStickyFooterDivider=stickyFooterDivider;  return this;}  }
class C{  public static String toHexString(DatabaseImpl db,int pageNumber,int size) throws IOException {  ByteBuffer buffer=db.getPageChannel().createPageBuffer();  db.getPageChannel().readPage(buffer,pageNumber);  return toHexString(buffer,size);}  }
class C{  public UnknownServiceException(String detailMessage){  super(detailMessage);}  }
class C{  private void parseIssuer(NameIDType issuer) throws MalformedTokenException {  this._issuerId=null;  if (issuer != null) {    try {      this._issuerId=new IssuerNameId(issuer.getValue(),issuer.getFormat());      if (_log.isDebugEnabled()) {        _log.debug(_issuerId + " successfully extracted from the token");      }    } catch (    Exception ex) {      _log.debug("Cannot parse issuer.",ex);      throw new MalformedTokenException("Invalid issuer.",ex);    }  }}  }
class C{  public NotificationChain basicSetDeclaredTypeRef(TypeRef newDeclaredTypeRef,NotificationChain msgs){  TypeRef oldDeclaredTypeRef=declaredTypeRef;  declaredTypeRef=newDeclaredTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.GETTER_DECLARATION__DECLARED_TYPE_REF,oldDeclaredTypeRef,newDeclaredTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean onCustomEvent(DiscoveryCustomMessage msg,AffinityTopologyVersion topVer){  if (msg instanceof CacheAffinityChangeMessage)   return sharedCtx.affinity().onCustomEvent(((CacheAffinityChangeMessage)msg));  return msg instanceof DynamicCacheChangeBatch && onCacheChangeRequested((DynamicCacheChangeBatch)msg,topVer);}  }
class C{  public static Number sub(Number a,Number b){  if (isFloatingPoint(a) || isFloatingPoint(b)) {    return a.doubleValue() - b.doubleValue();  } else {    return a.longValue() - b.longValue();  }}  }
class C{  public static String[] trim(String[] arr){  for (int i=0; i < arr.length; i++) {    arr[i]=arr[i].trim();  }  return arr;}  }
class C{  public void run(){  ActivationLibrary.deactivate(this,getID());}  }
class C{  public void addDOMListeners(){  SVGOMDocument doc=(SVGOMDocument)document;  XBLEventSupport evtSupport=(XBLEventSupport)doc.initializeEventSupport();  domAttrModifiedEventListener=new EventListenerWrapper(new DOMAttrModifiedEventListener());  evtSupport.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",domAttrModifiedEventListener,true);  domNodeInsertedEventListener=new EventListenerWrapper(new DOMNodeInsertedEventListener());  evtSupport.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",domNodeInsertedEventListener,true);  domNodeRemovedEventListener=new EventListenerWrapper(new DOMNodeRemovedEventListener());  evtSupport.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",domNodeRemovedEventListener,true);  domCharacterDataModifiedEventListener=new EventListenerWrapper(new DOMCharacterDataModifiedEventListener());  evtSupport.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMCharacterDataModified",domCharacterDataModifiedEventListener,true);  animatedAttributeListener=new AnimatedAttrListener();  doc.addAnimatedAttributeListener(animatedAttributeListener);  focusManager=new SVG12FocusManager(document);  CSSEngine cssEngine=doc.getCSSEngine();  cssPropertiesChangedListener=new CSSPropertiesChangedListener();  cssEngine.addCSSEngineListener(cssPropertiesChangedListener);}  }
class C{  public static String normalizeFPNumber(String value){  return normalizeFPNumber(value,null,null,null,null);}  }
class C{  public static int parseInt(String s){  s=trimPlusSign(s);  return Integer.parseInt(s);}  }
class C{  public static String encodeHex(byte b){  return encodeHex(new byte[]{b});}  }
class C{  private State applyPatch(State current,State patch){  if (patch.taskState.stage != current.taskState.stage || patch.taskState.subStage != current.taskState.subStage) {    ServiceUtils.logInfo(this,"Moving from %s:%s to stage %s:%s",current.taskState.stage,current.taskState.subStage,patch.taskState.stage,patch.taskState.subStage);  }  PatchUtils.patchState(current,patch);  return current;}  }
class C{  public synchronized int numLogs(){  return logs.size();}  }
class C{  @Override public synchronized void load(){  super.load();  if (descriptionPersister.isRecoveryBuildRequired()) {    descriptionPersister.scheduleRecoveryBuildOnContributions();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:36.103 -0500",hash_original_method="C0BF7A54D71A4DAEEC772A3C3067C193",hash_generated_method="F1B883FF392B1F42E1D10C00B65D9580") static protected boolean hasList(SIPHeader sipHeader){  if (sipHeader instanceof SIPHeaderList)   return false; else {    Class<?> headerClass=sipHeader.getClass();    return headerListTable.get(headerClass) != null;  }}  }
class C{  public SendMessageBatchResult sendMessageBatch(String queueUrl,List<SendMessageBatchRequestEntry> entries) throws AmazonServiceException, AmazonClientException {  return amazonSqsToBeExtended.sendMessageBatch(queueUrl,entries);}  }
class C{  public long[] sort(int n){  while (--n >= 0) {    long result=heap[1];    heap[1]=heap[size];    heap[size]=result;    size--;    downHeap();  }  return heap;}  }
class C{  Operand popLong(){  Operand r=pop();  if (VM.VerifyAssertions)   opt_assert(r.isLong());  popDummy();  return r;}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  if (m_savedLastOrder == null)   m_savedLastOrder=new IntStack();  m_savedLastOrder.push(getElemDef().getLastOrder());  getElemDef().setLastOrder(-1);}  }
class C{  public static <T>void onNextDropped(T t){  if (t != null) {    Consumer<Object> hook=Hooks.onNextDroppedHook;    if (hook == null) {      throw Exceptions.failWithCancel();    }    hook.accept(t);  }}  }
class C{  public void isSaved(){  m_nSavedPointer=m_nCurrentEditAction;}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  @Override public void postAddInit(){}  }
class C{  @Override public CharSequence convertToString(Cursor cursor){  if (cursor == null) {    return null;  }  String query=getColumnString(cursor,SearchManager.SUGGEST_COLUMN_QUERY);  if (query != null) {    return query;  }  return null;}  }
class C{  public IllegalFormatConversionException(char c,Class<?> arg){  if (arg == null)   throw new NullPointerException();  this.c=c;  this.arg=arg;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.TRANSITION_SPECIFICATION__REACTION:    return getReaction();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Object clone(){  RandomSampler copy=(RandomSampler)super.clone();  copy.my_RandomGenerator=(RandomEngine)this.my_RandomGenerator.clone();  return copy;}  }
class C{  @Override public Vertex parseStateByteCode(Vertex state,BinaryData data,Network network) throws IOException {  if (data.getCache() != null) {    return (Vertex)data.getCache();  }  BinaryData bytes=data;  if (!state.isTemporary()) {    bytes=(BinaryData)network.findData(data);    if (bytes == null) {      bytes=data;    }  }  ByteArrayInputStream byteStream=new ByteArrayInputStream(bytes.getBytes());  DataInputStream dataStream=new DataInputStream(byteStream);  long id=dataStream.readLong();  Vertex vertex=network.findById(id);  if (vertex != null && !vertex.is(Primitive.SELF4)) {    return new SelfDecompiler().parseStateByteCode(state,data,network);  }  Vertex cache=parseStateByteCode(dataStream,network);  Collection<Relationship> cases=state.getRelationships(Primitive.DO);  if (cases != null) {    for (    Relationship expression : cases) {      cache.addRelationship(expression,true);    }  }  cache.setName(state.getName());  data.setCache(cache);  bytes.setCache(cache);  return cache;}  }
class C{  public IncompatibleRolesException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void runTest(){  try {    assureResultsDirectoryExists(RESULTS_DIR);    Configuration c=new Configuration(TEST_CONFIG);    FileWriter result=new FileWriter(getFileName(RESULTS_DIR,"output","res"));    message(result,"Testing order of keys ...");    showIterator(result,c.getKeys());    message(result,"Testing retrieval of CSV values ...");    showVector(result,c.getVector("resource.loader"));    message(result,"Testing subset(prefix).getKeys() ...");    Configuration subset=c.subset("file.resource.loader");    showIterator(result,subset.getKeys());    message(result,"Testing getVector(prefix) ...");    showVector(result,subset.getVector("path"));    message(result,"Testing getString(key) ...");    result.write(c.getString("config.string.value"));    result.write("\n\n");    message(result,"Testing getBoolean(key) ...");    result.write(new Boolean(c.getBoolean("config.boolean.value")).toString());    result.write("\n\n");    message(result,"Testing getByte(key) ...");    result.write(new Byte(c.getByte("config.byte.value")).toString());    result.write("\n\n");    message(result,"Testing getShort(key) ...");    result.write(new Short(c.getShort("config.short.value")).toString());    result.write("\n\n");    message(result,"Testing getInt(key) ...");    result.write(new Integer(c.getInt("config.int.value")).toString());    result.write("\n\n");    message(result,"Testing getLong(key) ...");    result.write(new Long(c.getLong("config.long.value")).toString());    result.write("\n\n");    message(result,"Testing getFloat(key) ...");    result.write(new Float(c.getFloat("config.float.value")).toString());    result.write("\n\n");    message(result,"Testing getDouble(key) ...");    result.write(new Double(c.getDouble("config.double.value")).toString());    result.write("\n\n");    message(result,"Testing escaped-comma scalar...");    result.write(c.getString("escape.comma1"));    result.write("\n\n");    message(result,"Testing escaped-comma vector...");    showVector(result,c.getVector("escape.comma2"));    result.write("\n\n");    result.flush();    result.close();    if (!isMatch(RESULTS_DIR,COMPARE_DIR,"output","res","cmp")) {      fail("Output incorrect.");    }  } catch (  Exception e) {    System.err.println("Cannot setup ConfigurationTestCase!");    e.printStackTrace();    System.exit(1);  }}  }
class C{  public T caseIntLiteral(IntLiteral object){  return null;}  }
class C{  public void focusGained(FocusEvent e){  if (log.isDebugEnabled()) {    log.debug("CV " + getCvName() + ","+ getSecondCvNum()+ " focusGained");  }  enterField();}  }
class C{  public static final String removeIllegalChars(String name){  String ret="";  String delim=DELIMITERS;  char[] illegal=SearchSettings.ILLEGAL_CHARS.getValue();  StringBuilder sb=new StringBuilder(delim.length() + illegal.length);  sb.append(illegal).append(delim);  StringTokenizer st=new StringTokenizer(name,sb.toString());  while (st.hasMoreTokens())   ret+=st.nextToken().trim() + " ";  return ret.trim();}  }
class C{  public ConsumesRequestCondition(String[] consumes,String[] headers){  this(parseExpressions(consumes,headers));}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case DomPackage.TAG___GET_VALUE_BY_KEY__STRING:    return getValueByKey((String)arguments.get(0));case DomPackage.TAG___TO_STRING:  return toString();}return super.eInvoke(operationID,arguments);}  }
class C{  public BoundingBox ext(BoundingBox a_bounds){  crn_dirty=true;  return this.set(min.set(min(min.x,a_bounds.min.x),min(min.y,a_bounds.min.y),min(min.z,a_bounds.min.z)),max.set(max(max.x,a_bounds.max.x),max(max.y,a_bounds.max.y),max(max.z,a_bounds.max.z)));}  }
class C{  public static TestSuiteLocalSearchObjective buildNewTestSuiteLocalSearchObjective(List<FitnessFunction<? extends Chromosome>> fitness,TestSuiteChromosome suite,int index){  List<TestSuiteFitnessFunction> ffs=new ArrayList<>();  for (  FitnessFunction<? extends Chromosome> ff : fitness) {    TestSuiteFitnessFunction tff=(TestSuiteFitnessFunction)ff;    ffs.add(tff);  }  return new TestSuiteLocalSearchObjective(ffs,suite,index);}  }
class C{  public Matrix4f(Matrix4f m1){  this.m00=m1.m00;  this.m01=m1.m01;  this.m02=m1.m02;  this.m03=m1.m03;  this.m10=m1.m10;  this.m11=m1.m11;  this.m12=m1.m12;  this.m13=m1.m13;  this.m20=m1.m20;  this.m21=m1.m21;  this.m22=m1.m22;  this.m23=m1.m23;  this.m30=m1.m30;  this.m31=m1.m31;  this.m32=m1.m32;  this.m33=m1.m33;}  }
class C{  private int findIndex(Object key,Object[] array){  int length=array.length;  int index=getModuloHash(key,length);  int last=(index + length - 2) % length;  while (index != last) {    if (array[index] == key || (array[index] == null)) {      break;    }    index=(index + 2) % length;  }  return index;}  }
class C{  private void updateEnabled(){  removeFileButton.setEnabled((!engine.isRunning()) && fileList.getSelectedIndices().length > 0);  runSelectedButton.setEnabled((!engine.isRunning()) && fileList.getSelectedIndices().length > 0);  runAllButton.setEnabled(!engine.isRunning());  addFileButton.setEnabled(!engine.isRunning());}  }
class C{  public JSlider(BoundedRangeModel brm){  this.orientation=JSlider.HORIZONTAL;  setModel(brm);  updateUI();}  }
class C{  public boolean isVirtualMmuUsageSupported(){  return virtualMmuUsageSupported;}  }
class C{  @BeforeSuite public void initLogging() throws IOException {  LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();  JoranConfigurator configurator=new JoranConfigurator();  configurator.setContext(context);  context.reset();  StatusPrinter.printInCaseOfErrorsOrWarnings(context);}  }
class C{  public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {}  }
class C{  public boolean removeSession(String clientId,ChannelHandlerContext session){  return this.repo.remove(clientId,session);}  }
class C{  @RpcMethod public void ping(AsyncMethodCallback<AgentControl.AsyncClient.ping_call> handler) throws RpcException {  ensureClient();  PingRequest pingRequest=new PingRequest();  clientProxy.setTimeout(PING_TIMEOUT_MS);  try {    clientProxy.ping(pingRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public boolean handleAck(SIPServerTransaction ackTransaction){  SIPRequest sipRequest=ackTransaction.getOriginalRequest();  if (isAckSeen() && getRemoteSeqNumber() == sipRequest.getCSeq().getSeqNumber()) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("ACK already seen by dialog -- dropping Ack" + " retransmission");    }    acquireTimerTaskSem();    try {      if (this.timerTask != null) {        this.timerTask.cancel();        this.timerTask=null;      }    }  finally {      releaseTimerTaskSem();    }    return false;  } else   if (this.getState() == DialogState.TERMINATED) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dialog is terminated -- dropping ACK");    return false;  } else {    SIPServerTransaction tr=getInviteTransaction();    SIPResponse sipResponse=(tr != null ? tr.getLastResponse() : null);    if (tr != null && sipResponse != null && sipResponse.getStatusCode() / 100 == 2 && sipResponse.getCSeq().getMethod().equals(Request.INVITE) && sipResponse.getCSeq().getSeqNumber() == sipRequest.getCSeq().getSeqNumber()) {      ackTransaction.setDialog(this,sipResponse.getDialogId(false));      ackReceived(sipRequest);      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("ACK for 2XX response --- sending to TU ");      return true;    } else {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug(" INVITE transaction not found  -- Discarding ACK");      return false;    }  }}  }
class C{  static private String decodeString(String original,boolean isHex,int coding){  String decoded=original;  byte[] input=stringToByteArray(original,isHex);switch (coding) {case GPS_ENC_NONE:    decoded=original;  break;case GPS_ENC_SUPL_GSM_DEFAULT:decoded=decodeGSMPackedString(input);break;case GPS_ENC_SUPL_UTF8:decoded=decodeUTF8String(input);break;case GPS_ENC_SUPL_UCS2:decoded=decodeUCS2String(input);break;case GPS_ENC_UNKNOWN:decoded=original;break;default :Log.e(TAG,"Unknown encoding " + coding + " for NI text "+ original);break;}return decoded;}  }
class C{  public static String ceiling(String[] params) throws FBSQLParseException {  if (params.length != 1)   throw new FBSQLParseException("Incorrect number of " + "parameters of function ceiling : " + params.length);  return "ceiling(" + params[0] + ")";}  }
class C{  public int compareTo(ReadablePartial partial){  if (this == partial) {    return 0;  }  if (partial instanceof LocalTime) {    LocalTime other=(LocalTime)partial;    if (iChronology.equals(other.iChronology)) {      return (iLocalMillis < other.iLocalMillis ? -1 : (iLocalMillis == other.iLocalMillis ? 0 : 1));    }  }  return super.compareTo(partial);}  }
class C{  public Label(){}  }
class C{  protected String convertDataSourceToResourceAndGetXMLEntry(DataSource ds){  Resource dataSourceResource=convertToResource(ds);  return toConfigurationEntry(dataSourceResource);}  }
class C{  public LocatorListResponse(){}  }
class C{  public Component withRandomData(){  this.setName(SampleDataService.getRandomKit());  return this;}  }
class C{  @Override public Range findRangeBounds(XYDataset dataset){  return findRangeBounds(dataset,true);}  }
class C{  static Object find(String factoryId,String fallbackClassName) throws ConfigurationError {  ClassLoader classLoader=findClassLoader();  String systemProp=System.getProperty(factoryId);  if (systemProp != null && systemProp.length() > 0) {    if (debug)     debugPrintln("found " + systemProp + " in the system property "+ factoryId);    return newInstance(systemProp,classLoader);  }  try {    String javah=System.getProperty("java.home");    String configFile=javah + File.separator + "lib"+ File.separator+ "jaxp.properties";    String factoryClassName=null;    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          File f=new File(configFile);          firstTime=false;          if (f.exists()) {            if (debug)             debugPrintln("Read properties file " + f);            cacheProps.load(new FileInputStream(f));          }        }      }    }    factoryClassName=cacheProps.getProperty(factoryId);    if (debug)     debugPrintln("found " + factoryClassName + " in $java.home/jaxp.properties");    if (factoryClassName != null) {      return newInstance(factoryClassName,classLoader);    }  } catch (  Exception ex) {    if (debug) {      ex.printStackTrace();    }  }  Object provider=findJarServiceProvider(factoryId);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  if (debug)   debugPrintln("loaded from fallback value: " + fallbackClassName);  return newInstance(fallbackClassName,classLoader);}  }
class C{  @Override public IntArrayIterator resetForNode(int node){  long nodeInfo=arrayBasedIntToIntArrayMap.getNodeInfo(node);  if (nodeInfo == -1L) {    this.degree=0;  } else {    this.position=IntToIntPairArrayIndexBasedMap.getFirstValueFromNodeInfo(nodeInfo);    this.degree=IntToIntPairArrayIndexBasedMap.getSecondValueFromNodeInfo(nodeInfo);  }  currentEdge=0;  return this;}  }
class C{  @Provides @Singleton @NetworkInterceptors List<Interceptor> provideNetworkInterceptors(){  return Arrays.asList(new StethoInterceptor(),new LoggingInterceptor());}  }
class C{  public int read(byte[] buf,int offset,int length) throws IOException {  try {    return readInt(buf,offset,length);  } catch (  IOException e) {    _isKeepalive=false;    throw e;  }catch (  RuntimeException e) {    _isKeepalive=false;    throw e;  }}  }
class C{  protected void cleanupEntities(){  cntCleanupEntitiesRuns.increment();  Calendar c=Calendar.getInstance();  c.add(Calendar.MILLISECOND,-ENTITY_TIMEOUT);  Date cutoff=c.getTime();  ArrayList<Entity> toRemove=new ArrayList<Entity>();  ArrayList<Entity> toKeep=new ArrayList<Entity>();  Iterator<Device> diter=deviceMap.values().iterator();  LinkedList<DeviceUpdate> deviceUpdates=new LinkedList<DeviceUpdate>();  while (diter.hasNext()) {    Device d=diter.next();    while (true) {      deviceUpdates.clear();      toRemove.clear();      toKeep.clear();      for (      Entity e : d.getEntities()) {        if (e.getLastSeenTimestamp() != null && 0 > e.getLastSeenTimestamp().compareTo(cutoff)) {          toRemove.add(e);        } else {          toKeep.add(e);        }      }      if (toRemove.size() == 0) {        break;      }      cntEntityRemovedTimeout.increment();      for (      Entity e : toRemove) {        removeEntity(e,d.getEntityClass(),d.getDeviceKey(),toKeep);      }      if (toKeep.size() > 0) {        Device newDevice=allocateDevice(d.getDeviceKey(),d.getDHCPClientName(),d.oldAPs,d.attachmentPoints,toKeep,d.getEntityClass());        EnumSet<DeviceField> changedFields=EnumSet.noneOf(DeviceField.class);        for (        Entity e : toRemove) {          changedFields.addAll(findChangedFields(newDevice,e));        }        DeviceUpdate update=null;        if (changedFields.size() > 0) {          update=new DeviceUpdate(d,CHANGE,changedFields);        }        if (!deviceMap.replace(newDevice.getDeviceKey(),d,newDevice)) {          d=deviceMap.get(d.getDeviceKey());          if (null != d)           continue;        }        if (update != null) {          cntDeviceChanged.increment();          deviceUpdates.add(update);        }      } else {        DeviceUpdate update=new DeviceUpdate(d,DELETE,null);        if (!deviceMap.remove(d.getDeviceKey(),d)) {          d=deviceMap.get(d.getDeviceKey());          if (null != d)           continue;          cntDeviceDeleted.increment();        }        deviceUpdates.add(update);      }      processUpdates(deviceUpdates);      break;    }  }  debugEventService.flushEvents();}  }
class C{  public Bound<T> withRootElement(String rootElementName){  return new Bound<>(classToBind,rootElementName,baseOutputFilename);}  }
class C{  public void migrateProperties(){}  }
class C{  private boolean isValidAuthority(String authority){  if (authority == null) {    return false;  }  Matcher authorityMatcher=AUTHORITY_PATTERN.matcher(authority);  if (!authorityMatcher.matches()) {    return false;  }  boolean ipV4Address=false;  boolean hostname=false;  String hostIP=authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);  Matcher matchIPV4Pat=IP_V4_DOMAIN_PATTERN.matcher(hostIP);  ipV4Address=matchIPV4Pat.matches();  if (ipV4Address) {    for (int i=1; i <= 4; i++) {      String ipSegment=matchIPV4Pat.group(i);      if (ipSegment == null || ipSegment.length() <= 0) {        return false;      }      try {        if (Integer.parseInt(ipSegment) > 255) {          return false;        }      } catch (      NumberFormatException e) {        return false;      }    }  } else {    hostname=DOMAIN_PATTERN.matcher(hostIP).matches();  }  if (hostname) {    char[] chars=hostIP.toCharArray();    int size=1;    for (int i=0; i < chars.length; i++) {      if (chars[i] == '.') {        size++;      }    }    String[] domainSegment=new String[size];    int segCount=0;    int segLen=0;    Matcher atomMatcher=ATOM_PATTERN.matcher(hostIP);    while (atomMatcher.find()) {      domainSegment[segCount]=atomMatcher.group();      segLen=domainSegment[segCount].length() + 1;      hostIP=(segLen >= hostIP.length()) ? "" : hostIP.substring(segLen);      segCount++;    }    String topLevel=domainSegment[segCount - 1];    if (topLevel.length() < 2 || topLevel.length() > maxTldLength) {      return false;    }    if (!ALPHA_PATTERN.matcher(topLevel.substring(0,1)).matches()) {      return false;    }    if (segCount < 2) {      return false;    }  }  if (!hostname && !ipV4Address) {    return false;  }  String port=authorityMatcher.group(PARSE_AUTHORITY_PORT);  if (port != null) {    if (!PORT_PATTERN.matcher(port).matches()) {      return false;    }  }  String extra=authorityMatcher.group(PARSE_AUTHORITY_EXTRA);  return isBlankOrNull(extra);}  }
class C{  @Override protected void sendFunctionGroup5(){  log.debug("sendFunctionGroup5(): f21 {} f22 {} f23 {} f24 {} f25 {} f26 {} f27 {} f28 {}",f21,f22,f23,f24,f25,f26,f27,f28);  DCCppMessage msg=DCCppMessage.makeFunctionGroup5OpsMsg(this.getDccAddress(),f21,f22,f23,f24,f25,f26,f27,f28);  log.debug("sendFunctionGroup5(): Message: {}",msg.toString());  queueMessage(msg,THROTTLEIDLE);}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  FacesConfigBean fcb=null;  try {    fcb=(FacesConfigBean)digester.peek();  } catch (  Exception e) {    throw new IllegalStateException("No parent FacesConfigBean on object stack");  }  FactoryBean fb=fcb.getFactory();  if (fb == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[FactoryRule]{" + digester.getMatch() + "} New "+ CLASS_NAME);    }    Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);    fb=(FactoryBean)clazz.newInstance();    fcb.setFactory(fb);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[FactoryRule]{" + digester.getMatch() + "} Old "+ CLASS_NAME);    }  }  digester.push(fb);}  }
class C{  public boolean isSetEchoReply(){  return this.echoReply != null;}  }
class C{  static LocalSymbolTable makeNewLocalSymbolTable(ValueFactory imageFactory,SymbolTable defaultSystemSymtab,List<String> localSymbols,SymbolTable... imports){  LocalSymbolTableImports unifiedSymtabImports=new LocalSymbolTableImports(defaultSystemSymtab,imports);  return new LocalSymbolTable(imageFactory,unifiedSymtabImports,localSymbols);}  }
class C{  public static int length(){  return resolverVector.size();}  }
class C{  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader,int znodeVersion,String resourceName,byte[] content,boolean createIfNotExists){  int latestVersion=znodeVersion;  final ZkController zkController=zkLoader.getZkController();  final SolrZkClient zkClient=zkController.getZkClient();  final String resourceLocation=zkLoader.getConfigSetZkPath() + "/" + resourceName;  String errMsg="Failed to persist resource at {0} - old {1}";  try {    try {      Stat stat=zkClient.setData(resourceLocation,content,znodeVersion,true);      latestVersion=stat.getVersion();      log.info("Persisted config data to node {} ",resourceLocation);      touchConfDir(zkLoader);    } catch (    NoNodeException e) {      if (createIfNotExists) {        try {          zkClient.create(resourceLocation,content,CreateMode.PERSISTENT,true);          latestVersion=0;          touchConfDir(zkLoader);        } catch (        KeeperException.NodeExistsException nee) {          try {            Stat stat=zkClient.exists(resourceLocation,null,true);            log.debug("failed to set data version in zk is {} and expected version is {} ",stat.getVersion(),znodeVersion);          } catch (          Exception e1) {            log.warn("could not get stat");          }          log.info(StrUtils.formatString(errMsg,resourceLocation,znodeVersion));          throw new ResourceModifiedInZkException(ErrorCode.CONFLICT,StrUtils.formatString(errMsg,resourceLocation,znodeVersion) + ", retry.");        }      }    }  } catch (  KeeperException.BadVersionException bve) {    int v=-1;    try {      Stat stat=zkClient.exists(resourceLocation,null,true);      v=stat.getVersion();    } catch (    Exception e) {      log.error(e.getMessage());    }    log.info(StrUtils.formatString(errMsg + " zkVersion= " + v,resourceLocation,znodeVersion));    throw new ResourceModifiedInZkException(ErrorCode.CONFLICT,StrUtils.formatString(errMsg,resourceLocation,znodeVersion) + ", retry.");  }catch (  ResourceModifiedInZkException e) {    throw e;  }catch (  Exception e) {    if (e instanceof InterruptedException) {      Thread.currentThread().interrupt();    }    final String msg="Error persisting resource at " + resourceLocation;    log.error(msg,e);    throw new SolrException(ErrorCode.SERVER_ERROR,msg,e);  }  return latestVersion;}  }
class C{  public boolean isEqual(){  return this.isEqual;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttributes02.class,args);}  }
class C{  private boolean xCollission(OdorWorldEntity entityToCheck,float xCheck){  for (  OdorWorldEntity entity : entityList) {    if (entity == entityToCheck) {      continue;    }    if ((entityToCheck.getX() > entity.getX()) && (entityToCheck.getX() < (entity.getX() + entity.getWidth()))) {      return true;    }  }  return false;}  }
class C{  public CompleteDiff(){  this.part=null;}  }
class C{  public static String conventBytesToHexString(byte[] data){  return convertBytesToHexString(data,0,data.length);}  }
class C{  public long writeDataGrain(long sector,byte[] grain) throws IOException {  assert grain.length == SparseUtil.DEFAULT_GRAIN_SIZE_BYTES;  assert sector % SparseUtil.DEFAULT_GRAIN_SIZE == 0;  assert sector >= nextSector;  addToGrainTable(sector);  int maxSize=grain.length + (grain.length >> 9) + 13;  byte[] compressed=new byte[maxSize];  Deflater deflater=new Deflater();  deflater.setInput(grain);  deflater.finish();  int cmpSize=deflater.deflate(compressed,0,maxSize,Deflater.SYNC_FLUSH);  grainHeader.clear();  grainHeader.putLong(sector);  grainHeader.putInt(cmpSize);  write(grainHeader.array(),0,SparseUtil.STREAMED_GRAIN_HEADER_SIZE);  write(compressed,0,cmpSize);  padTo(SparseUtil.DISKLIB_SECTOR_SIZE);  nextSector+=SparseUtil.DEFAULT_GRAIN_SIZE;  updateLastWriteTime(sector);  unflushedDataGrains=true;  return currentOffset;}  }
class C{  public static synchronized int removeMarkups(){  int numDeleted=0;  AutoFile dir=new AutoFile(Path.markup());  String[] list=dir.list();  for (  String filename : list) {    AutoFile file=new AutoFile(Path.markup(),filename);    file.delete();    numDeleted++;  }  return numDeleted;}  }
class C{  public static VOPaymentType toVOPaymentType(PaymentType paymentType,LocalizerFacade localizerFacade){  if (paymentType == null) {    return null;  }  VOPaymentType voPaymentType=new VOPaymentType();  voPaymentType.setPaymentTypeId(paymentType.getPaymentTypeId());  voPaymentType.setCollectionType(paymentType.getCollectionType());  voPaymentType.setName(localizerFacade.getText(paymentType.getKey(),LocalizedObjectTypes.PAYMENT_TYPE_NAME));  updateValueObject(voPaymentType,paymentType);  return voPaymentType;}  }
class C{  void scale(float f){  xx*=f;  xy*=f;  xz*=f;  xo*=f;  yx*=f;  yy*=f;  yz*=f;  yo*=f;  zx*=f;  zy*=f;  zz*=f;  zo*=f;}  }
class C{  @SuppressWarnings("unchecked") private List<Playlist> parsePlaylistFromJsonFile(File playlistsFile){  List<Playlist> playlists;  int totalPlaylists;  step=0;  try {    JsonReader.assignInstantiator(ObservableListWrapper.class,new ObservableListWrapperCreator());    playlists=(List<Playlist>)parseJsonFile(playlistsFile);    totalPlaylists=playlists.size();    for (    Playlist playlist : playlists) {      if (playlist.isFolder())       playlist.getContainedPlaylists().forEach(null);      setPlaylistProperties(playlist);      notifyPreloader(++step,totalPlaylists,"Loading playlists...");    }    LOG.info("Loaded playlists from {}",playlistsFile);  } catch (  IOException exception) {    playlists=new ArrayList<>();    LOG.error("Error loading playlists: {}",exception.getMessage(),exception);  }  return playlists;}  }
class C{  public static <T>void compilationConstant(Object value){  if (!CompilerDirectives.isCompilationConstant(value)) {    neverPartOfCompilation("Value is not compilation constant");  }}  }
class C{  public void startNonText(StylesheetHandler handler) throws org.xml.sax.SAXException {  if (this == handler.getCurrentProcessor()) {    handler.popProcessor();  }  int nChars=m_accumulator.length();  if ((nChars > 0) && ((null != m_xslTextElement) || !XMLCharacterRecognizer.isWhiteSpace(m_accumulator)) || handler.isSpacePreserve()) {    ElemTextLiteral elem=new ElemTextLiteral();    elem.setDOMBackPointer(m_firstBackPointer);    elem.setLocaterInfo(handler.getLocator());    try {      elem.setPrefixes(handler.getNamespaceSupport());    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }    boolean doe=(null != m_xslTextElement) ? m_xslTextElement.getDisableOutputEscaping() : false;    elem.setDisableOutputEscaping(doe);    elem.setPreserveSpace(true);    char[] chars=new char[nChars];    m_accumulator.getChars(0,nChars,chars,0);    elem.setChars(chars);    ElemTemplateElement parent=handler.getElemTemplateElement();    parent.appendChild(elem);  }  m_accumulator.setLength(0);  m_firstBackPointer=null;}  }
class C{  @Override public void debugPrint(PrintStream out) throws AdeException {  super.debugPrint(out);  out.println("Trained=" + m_trained);  out.println("Total interval count=" + m_totalIntervalCount);  for (  String key : m_msgData.keySet()) {    final FullBernoulliMsgData value=(FullBernoulliMsgData)m_msgData.get(key);    out.println(key + " : " + value);  }}  }
class C{  public final static NumericIV numericalFunc(final Literal lit,final NumericOp op){  if (!checkNumericDatatype(lit))   throw new IllegalArgumentException("not numeric: " + lit);  final URI dte1=lit.getDatatype();  if (dte1.equals(XMLSchema.DECIMAL)) {    return numericalFunc(lit.decimalValue(),op);  } else   if (dte1.equals(XMLSchema.INTEGER)) {    return numericalFunc(lit.integerValue(),op);  } else   if (dte1.equals(XMLSchema.FLOAT)) {    return numericalFunc(lit.floatValue(),op);  } else   if (dte1.equals(XMLSchema.INT)) {    return numericalFunc(lit.intValue(),op);  } else   if (dte1.equals(XMLSchema.DOUBLE)) {    return numericalFunc(lit.doubleValue(),op);  } else {    return numericalFunc(lit.longValue(),op);  }}  }
class C{  public RE(REProgram program,int matchFlags){  setProgram(program);  setMatchFlags(matchFlags);}  }
class C{  public AsyncResult ReadAsync(ReadRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public AnimatableNumberOptionalNumberValue(AnimationTarget target,float n,float on){  super(target);  number=n;  optionalNumber=on;  hasOptionalNumber=true;}  }
class C{  public BooleanLiteral createBooleanLiteral(){  BooleanLiteralImpl booleanLiteral=new BooleanLiteralImpl();  return booleanLiteral;}  }
class C{  public void removeService(DeviceService service){  removeServiceWithId(service.getServiceName());}  }
class C{  public boolean hasInverseRelationship(Primitive type,Vertex target){  return hasInverseRelationship(this.network.createVertex(type),target);}  }
class C{  public List<Annotation> parse(String content,URL documentURL,RDFFormat format){  RDFParser parser=Rio.createParser(format);  try {    StatementSailHandler handler=new StatementSailHandler(this.anno4j.getRepository().getConnection());    parser.setRDFHandler(handler);    byte[] bytes=content.getBytes("UTF-8");    try (InputStream stream=new ByteArrayInputStream(bytes)){      parser.parse(stream,documentURL.toString());    }   } catch (  RDFHandlerException|RDFParseException|IOException|RepositoryException e) {    e.printStackTrace();  }  return getAnnotations();}  }
class C{  public void write(final int c) throws IOException {  if (count >= BYTES_MAX)   flushBuffer();  if (c < 0x80) {    m_outputBytes[count++]=(byte)(c);  } else   if (c < 0x800) {    m_outputBytes[count++]=(byte)(0xc0 + (c >> 6));    m_outputBytes[count++]=(byte)(0x80 + (c & 0x3f));  } else   if (c < 0x10000) {    m_outputBytes[count++]=(byte)(0xe0 + (c >> 12));    m_outputBytes[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));    m_outputBytes[count++]=(byte)(0x80 + (c & 0x3f));  } else {    m_outputBytes[count++]=(byte)(0xf0 + (c >> 18));    m_outputBytes[count++]=(byte)(0x80 + ((c >> 12) & 0x3f));    m_outputBytes[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));    m_outputBytes[count++]=(byte)(0x80 + (c & 0x3f));  }}  }
class C{  public CircleView(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  init();}  }
class C{  public void display(){  System.out.println(getLabel() + ": ");  for (int i=0; i < size(); i++) {    System.out.println(getCard(i));  }  System.out.println();}  }
class C{  public static IProposalComputer newWithTypeProposalComputer(ContentAssistRequest contentAssistRequest,IJavaProject javaProject){  IDOMAttr attribute=XmlContentAssistUtilities.getAttribute(contentAssistRequest);  if (attribute == null || attribute.getOwnerElement() == null) {    return null;  }  if (!attribute.equals(UiBinderXmlModelUtilities.getTypeAttribute(attribute.getOwnerElement()))) {    return null;  }  String attrValue=XmlContentAssistUtilities.getAttributeValueUsingMatchString(contentAssistRequest);  return new CodeCompleteProposalComputer(new int[]{CompletionProposal.TYPE_REF,CompletionProposal.PACKAGE_REF},javaProject,attrValue,XmlContentAssistUtilities.getAttributeValueOffset(contentAssistRequest),attrValue.length(),null,false);}  }
class C{  public static String apiToMagic(int targetApiLevel){  String version;  if (targetApiLevel >= API_CURRENT) {    version=VERSION_CURRENT;  } else {    version=VERSION_FOR_API_13;  }  return MAGIC_PREFIX + version + MAGIC_SUFFIX;}  }
class C{  public static double nextDouble(){  wasAccessed=true;  return (currentNumber++ % 10.0) / 10.0;}  }
class C{  private void processGroup(final String group,final File parentFoder) throws Exception {  ByteArrayOutputStream resultOutputStream=null;  InputStream resultInputStream=null;  try {    getLog().info("processing group: " + group);    final HttpServletRequest request=Mockito.mock(HttpServletRequest.class);    Mockito.when(request.getContextPath()).thenReturn(normalizeContextPath(contextPath));    Mockito.when(request.getRequestURI()).thenReturn(group);    final HttpServletResponse response=Mockito.mock(HttpServletResponse.class);    resultOutputStream=new ByteArrayOutputStream();    Mockito.when(response.getOutputStream()).thenReturn(new DelegatingServletOutputStream(resultOutputStream));    final WroConfiguration config=Context.get().getConfig();    config.setIgnoreEmptyGroup(true);    Context.set(Context.webContext(request,response,Mockito.mock(FilterConfig.class)),config);    Context.get().setAggregatedFolderPath(getAggregatedPathResolver().resolve());    getManagerFactory().create().process();    resultInputStream=new UnclosableBufferedInputStream(resultOutputStream.toByteArray());    final File destinationFile=new File(parentFoder,rename(group,resultInputStream));    final File parentFolder=destinationFile.getParentFile();    if (!parentFolder.exists()) {      parentFolder.mkdirs();    }    destinationFile.createNewFile();    resultInputStream.reset();    getLog().debug("Created file: " + destinationFile.getName());    final OutputStream fos=new FileOutputStream(destinationFile);    IOUtils.copy(resultInputStream,fos);    fos.close();    if (destinationFile.length() == 0) {      getLog().debug("No content found for group: " + group);      destinationFile.delete();    } else {      getLog().info("file size: " + destinationFile.getName() + " -> "+ destinationFile.length()+ " bytes");      getLog().info(destinationFile.getAbsolutePath() + " (" + destinationFile.length()+ " bytes"+ ")");    }  }  finally {    if (getBuildContext() != null) {      getBuildContext().refresh(parentFoder);    }    if (resultOutputStream != null) {      resultOutputStream.close();    }    if (resultInputStream != null) {      resultInputStream.close();    }  }}  }
class C{  public static boolean sync(final FileOutputStream stream){  if (stream == null) {    Log.e(FileUtils.class,"sync(): Null parameter given");    return false;  }  try {    stream.getFD().sync();    return true;  } catch (  SyncFailedException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return false;}  }
class C{  @Override public UpdateResponse deleteByQuery(String query,int commitWithinMs) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.deleteByQuery(query,commitWithinMs);  if (this.solr1 != null)   ur=this.solr1.deleteByQuery(query,commitWithinMs);  return ur;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case FunctionblockPackage.FUNCTIONBLOCK_MODEL__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case FunctionblockPackage.FUNCTIONBLOCK_MODEL__NAMESPACE:  return NAMESPACE_EDEFAULT == null ? namespace != null : !NAMESPACE_EDEFAULT.equals(namespace);case FunctionblockPackage.FUNCTIONBLOCK_MODEL__VERSION:return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);case FunctionblockPackage.FUNCTIONBLOCK_MODEL__REFERENCES:return references != null && !references.isEmpty();case FunctionblockPackage.FUNCTIONBLOCK_MODEL__DESCRIPTION:return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);case FunctionblockPackage.FUNCTIONBLOCK_MODEL__DISPLAYNAME:return DISPLAYNAME_EDEFAULT == null ? displayname != null : !DISPLAYNAME_EDEFAULT.equals(displayname);case FunctionblockPackage.FUNCTIONBLOCK_MODEL__CATEGORY:return CATEGORY_EDEFAULT == null ? category != null : !CATEGORY_EDEFAULT.equals(category);case FunctionblockPackage.FUNCTIONBLOCK_MODEL__FUNCTIONBLOCK:return functionblock != null;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__ENTITIES:return entities != null && !entities.isEmpty();case FunctionblockPackage.FUNCTIONBLOCK_MODEL__ENUMS:return enums != null && !enums.isEmpty();case FunctionblockPackage.FUNCTIONBLOCK_MODEL__SUPER_TYPE:return superType != null;}return super.eIsSet(featureID);}  }
class C{  public static char[] encode(byte[] in,int iOff,int iLen){  int oDataLen=(iLen * 4 + 2) / 3;  int oLen=((iLen + 2) / 3) * 4;  char[] out=new char[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++] & 0xff;    int i1=ip < iEnd ? in[ip++] & 0xff : 0;    int i2=ip < iEnd ? in[ip++] & 0xff : 0;    int o0=i0 >>> 2;    int o1=((i0 & 3) << 4) | (i1 >>> 4);    int o2=((i1 & 0xf) << 2) | (i2 >>> 6);    int o3=i2 & 0x3F;    out[op++]=map1[o0];    out[op++]=map1[o1];    out[op]=op < oDataLen ? map1[o2] : '=';    op++;    out[op]=op < oDataLen ? map1[o3] : '=';    op++;  }  return out;}  }
class C{  public IntArrayTag(int... value){  super(TagType.INT_ARRAY);  this.value=value;}  }
class C{  public NumberRangeModel(int lo,int hi,int min,int max){  this(new Integer(lo),new Integer(hi),new Integer(min),new Integer(hi));}  }
class C{  public void addAuthScore(final String auth,final Integer score){  authScores.put(auth,score);}  }
class C{  public List<URI> filterInitiators(List<URI> initiators,ExportMask exportMask){  List<URI> storageViewInitiators=new ArrayList<URI>();  for (  URI initiator : initiators) {    if (exportMask.getZoningMap() != null && exportMask.getZoningMap().containsKey(initiator.toString()) && !exportMask.getZoningMap().get(initiator.toString()).isEmpty()) {      storageViewInitiators.add(initiator);    }  }  return storageViewInitiators;}  }
class C{  private int writeShort(String value,int offset,int end) throws IOException {  int ch;  OutputStreamWithBuffer os=_os;  byte[] buffer=os.buffer();  int bOffset=os.offset();  end=Math.min(end,offset + buffer.length - bOffset);  for (; offset < end && (ch=value.charAt(offset)) < 0x80; offset++) {    buffer[bOffset++]=(byte)ch;  }  os.offset(bOffset);  return offset;}  }
class C{  public int hashCode(){  return font.hashCode() ^ glyphs.length;}  }
class C{  @Override protected int calcAttackValue(){  return super.calcAttackValue();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:35.331 -0500",hash_original_method="A43956F6FF4A555825F3E2E8A2C0DABA",hash_generated_method="6ADB27F1DD86DDE7D5CB770B0C34E70A") public void removeHandler(Handler handler){  if (this.isNamed) {    LogManager.getLogManager().checkAccess();  }  if (handler == null) {    return;  }  this.handlers.remove(handler);  updateDalvikLogHandler();}  }
class C{  @Transactional public void makeRead(final JSONObject notification) throws ServiceException {  if (notification.optBoolean(Notification.NOTIFICATION_HAS_READ)) {    return;  }  final String id=notification.optString(Keys.OBJECT_ID);  try {    final JSONObject record=notificationRepository.get(id);    record.put(Notification.NOTIFICATION_HAS_READ,true);    notificationRepository.update(id,record);  } catch (  final RepositoryException e) {    final String msg="Makes notification as read failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  @Override public ValueExpression resolveVariable(String variable){  Object obj=UelUtil.resolveVariable(variable,this.elContext.variables,null);  if (obj != null) {    return new BasicValueExpression(variable,this.elContext);  }  return null;}  }
class C{  protected void retrieveColonPosition(ASTNode node){  int start=node.getStartPosition();  int length=node.getLength();  int end=start + length;  this.scanner.resetTo(end,this.compilationUnitSourceLength);  try {    int token;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameCOLON:        node.setSourceRange(start,this.scanner.currentPosition - start);      return;  }}} catch (InvalidInputException e) {}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.719 -0400",hash_original_method="2502C66FB29FAFF0F2F046B5ECEC3668",hash_generated_method="EE721D72F775EB5292443307E088537E") private static byte[] readBytes(InputStream source,int length) throws IOException {  byte[] result=new byte[length];  for (int i=0; i < length; i++) {    int bytik=source.read();    if (bytik == -1) {      return null;    }    result[i]=(byte)bytik;  }  return result;}  }
class C{  public void clearStickyHeader(){  if (stickyHeader != null) {    stickyHeader.recycle();  }  stickyHeader=null;  currentStickyId=RecyclerView.NO_ID;}  }
class C{  void updatePriorityList(){  prioritySortedNeuronList=this.getFlatNeuronList();  resortPriorities();}  }
class C{  final public boolean drawRuleEquals(Position other){  for (int i=0; i < 64; i++) {    if (squares[i] != other.squares[i])     return false;  }  if (whiteMove != other.whiteMove)   return false;  if (castleMask != other.castleMask)   return false;  if (epSquare != other.epSquare)   return false;  return true;}  }
class C{  public static double missingValue(){  return Double.NaN;}  }
class C{  private void notifyListeners(LifecycleState oldState,LifecycleState newState){  notifyWait();  if (_listeners == null) {    return;  }  ArrayList<LifecycleListener> listeners=null;synchronized (this) {    notifyAll();    if (_listeners != null) {      for (int i=0; i < _listeners.size(); i++) {        LifecycleListener listener=_listeners.get(i).get();        if (listener != null) {          if (listeners == null) {            listeners=new ArrayList<LifecycleListener>();          }          listeners.add(listener);        } else {          _listeners.remove(i);          i--;        }      }    }  }  if (listeners != null) {    for (    LifecycleListener listener : listeners) {      listener.lifecycleEvent(oldState,newState);    }  }}  }
class C{  public BLAKE256(){  super();}  }
class C{  public void dispose(){  this.close(true);  BinaryFile.removeClosable(this);}  }
class C{  public boolean tryConsume(String chars){  if (startsWith(chars)) {    skipChars(chars.length());    return true;  }  return false;}  }
class C{  protected String[] extractListOfUuids(List<? extends BaseOpenmrsData> data){  String[] retVal=new String[data.size()];  for (int i=0; i < data.size(); i++) {    retVal[i]=data.get(i).getUuid();  }  return retVal;}  }
class C{  public final double priorEntropy() throws Exception {  return m_delegate.priorEntropy();}  }
class C{  public MonetaryFormat positiveSign(char positiveSign){  checkArgument(!Character.isDigit(positiveSign));  if (positiveSign == this.positiveSign)   return this; else   return new MonetaryFormat(negativeSign,positiveSign,zeroDigit,decimalMark,minDecimals,decimalGroups,shift,roundingMode,codes,codeSeparator,codePrefixed);}  }
class C{  private void pruneBlockedQueue(final DocumentsWriterDeleteQueue flushingQueue){  Iterator<BlockedFlush> iterator=blockedFlushes.iterator();  while (iterator.hasNext()) {    BlockedFlush blockedFlush=iterator.next();    if (blockedFlush.dwpt.deleteQueue == flushingQueue) {      iterator.remove();      assert !flushingWriters.containsKey(blockedFlush.dwpt) : "DWPT is already flushing";      flushingWriters.put(blockedFlush.dwpt,Long.valueOf(blockedFlush.bytes));      flushQueue.add(blockedFlush.dwpt);    }  }}  }
class C{  public UTF8StreamWriter(int capacity){  _bytes=new byte[capacity];}  }
class C{  protected void noteRemoval(K key,V oldValue){  for (  CacheListener<K,V> listener : listeners) {    listener.noteKeyRemoval(this,key,oldValue);  }}  }
class C{  public boolean isTokenValid(){  return tokenIntern.equals(token);}  }
class C{  public void storeProperties(String artifact,String version,Properties props) throws IOException {  Path propertiesFile=getPropertiesFile(artifact,version);  Path dir=propertiesFile.getParent();  if (!Files.exists(dir)) {    Files.createDirectories(dir);  }  try (OutputStream out=new BufferedOutputStream(newOutputStream(propertiesFile))){    props.store(out,null);  } }  }
class C{  public JSONArray append(double value){  Double d=new Double(value);  JSONObject.testValidity(d);  this.append(d);  return this;}  }
class C{  public StreamEx<V> values(){  return map(null);}  }
class C{  public static String join(Object... array){  if (array == null) {    return null;  }  if (array.length == 0) {    return StringPool.EMPTY;  }  if (array.length == 1) {    return String.valueOf(array[0]);  }  final StringBuilder sb=new StringBuilder(array.length * 16);  for (int i=0; i < array.length; i++) {    sb.append(array[i]);  }  return sb.toString();}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  allocateElements(size);  head=0;  tail=size;  for (int i=0; i < size; i++)   elements[i]=s.readObject();}  }
class C{  public XSOMParser(){  this(new JAXPParser());}  }
class C{  public String shutdownPipeline(final String pipelineId){  String id=StringUtils.lowerCase(StringUtils.trim(pipelineId));  MicroPipeline pipeline=this.pipelines.get(id);  if (pipeline != null) {    pipeline.shutdown();    this.pipelines.remove(id);    if (logger.isDebugEnabled())     logger.debug("pipeline shutdown[id=" + pipelineId + "]");  }  return pipelineId;}  }
class C{  public void makeVisible(TreePath path){  if (path != null) {    TreePath parentPath=path.getParentPath();    if (parentPath != null) {      expandPath(parentPath);    }  }}  }
class C{  protected static int skipWapValue(ByteArrayInputStream pduDataStream,int length){  assert (null != pduDataStream);  byte[] area=new byte[length];  int readLen=pduDataStream.read(area,0,length);  if (readLen < length) {    return -1;  } else {    return readLen;  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FFldDef id [");  buffer.append(id);  buffer.append("] name [");  buffer.append(name);  buffer.append("] type [");  buffer.append(type);  buffer.append("] len [");  buffer.append(len);  buffer.append("] nulls [");  buffer.append(nulls);  buffer.append("] colname [");  buffer.append(colname);  buffer.append("] isdoc [");  buffer.append(isdoc);  buffer.append("] ismult [");  buffer.append(ismult);  buffer.append("] remarks [");  buffer.append(remarks);  buffer.append("]");  return buffer.toString();}  }
class C{  private boolean passesAllCriteria(final T o){  for (int i=0; i < allFilterCriteria.size(); i++) {    final FilterCriteria<T> filterCriteria=allFilterCriteria.get(i);    if (!filterCriteria.passes(o)) {      return false;    }  }  return true;}  }
class C{  public RangeQueryBuilder from(int from){  this.from=from;  return this;}  }
class C{  private void assertIdStatus(int id,boolean status){  checkIfIdIsDisplayedWithText(id,Boolean.toString(status));}  }
class C{  public void addReceivedNotification(String notification){  if (UsefulBits.isEmpty(notification))   return;  Set<String> notifications;  if (!prefs.contains(PREF_RECEIVED_NOTIFICATIONS)) {    notifications=new HashSet<>();    notifications.add(notification);    editor.putStringSet(PREF_RECEIVED_NOTIFICATIONS,notifications).apply();  } else {    notifications=prefs.getStringSet(PREF_RECEIVED_NOTIFICATIONS,null);    if (notifications == null)     notifications=new HashSet<>();    if (!notifications.contains(notification)) {      notifications.add(notification);      editor.putStringSet(PREF_RECEIVED_NOTIFICATIONS,notifications).apply();    }  }}  }
class C{  protected boolean isEditingEndTrigger(int keyCode){  int k=Display.getInstance().getGameAction(keyCode);  boolean endTrigger=false;  if (isQwertyInput()) {    if (isSingleLineTextArea()) {      endTrigger=keyCode < 0 && (k == Display.GAME_FIRE || k == Display.GAME_UP || k == Display.GAME_DOWN || isEnterKey(keyCode));    } else {      endTrigger=keyCode < 0 && (k == Display.GAME_FIRE);    }  } else {    if (isSingleLineTextArea()) {      endTrigger=(k == Display.GAME_FIRE || k == Display.GAME_UP || k == Display.GAME_DOWN);    } else {      endTrigger=(k == Display.GAME_FIRE);    }  }  return endTrigger;}  }
class C{  public StaticMediaNode(String primary,String secondary,Object thumb,Object icon,Object data){  this(primary,secondary,thumb,icon,data,DATATYPE_VIRTUAL);}  }
class C{  public boolean isTKIP(){  return tkip;}  }
class C{  public static boolean isEmittedFile(IFile jsOrJsMapFile){  if (!isJsOrJsMapFile(jsOrJsMapFile)) {    return false;  }  String tsFilename=IDEResourcesManager.getInstance().getTypeScriptFilename(jsOrJsMapFile);  if (StringUtils.isEmpty(tsFilename)) {    return false;  }  return jsOrJsMapFile.getParent().exists(new Path(tsFilename)) || jsOrJsMapFile.getParent().exists(new Path(tsFilename + "x"));}  }
class C{  public DefaultCDATA(Element parent,String text){  super(text);  this.parent=parent;}  }
class C{  public synchronized int indexOf(Object object,int location){  if (object != null) {    for (int i=location; i < elementCount; i++) {      if (object.equals(elementData[i])) {        return i;      }    }  } else {    for (int i=location; i < elementCount; i++) {      if (elementData[i] == null) {        return i;      }    }  }  return -1;}  }
class C{  public static Document toDocument(String xml) throws SAXException {  try {    return toDocument(new StringReader(xml));  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static Border createRaisedSoftBevelBorder(){  if (sharedSoftRaisedBevel == null) {    sharedSoftRaisedBevel=new SoftBevelBorder(BevelBorder.RAISED);  }  return sharedSoftRaisedBevel;}  }
class C{  void createButtons(){  if (scrollForwardButton != null) {    tabPane.remove(scrollForwardButton);    scrollForwardButton.removeActionListener(this);    tabPane.remove(scrollBackwardButton);    scrollBackwardButton.removeActionListener(this);  }  final int tabPlacement=tabPane.getTabPlacement();  if (tabPlacement == TOP || tabPlacement == BOTTOM) {    scrollForwardButton=createScrollButton(EAST);    scrollBackwardButton=createScrollButton(WEST);  } else {    scrollForwardButton=createScrollButton(SOUTH);    scrollBackwardButton=createScrollButton(NORTH);  }  scrollForwardButton.addActionListener(this);  scrollBackwardButton.addActionListener(this);  tabPane.add(scrollForwardButton);  tabPane.add(scrollBackwardButton);}  }
class C{  public void addAttributeMatchesFirstPartCondition(String namespaceURI,String name,String value){  _specificityC++;  addCondition(Condition.createAttributeMatchesFirstPartCondition(namespaceURI,name,value));}  }
class C{  public void addGlueRules(ArrayList<FeatureFunction> featureFunctions){  HieroFormatReader reader=new HieroFormatReader();  String goalNT=FormatUtils.cleanNonTerminal(joshuaConfiguration.goal_symbol);  String defaultNT=FormatUtils.cleanNonTerminal(joshuaConfiguration.default_non_terminal);  String[] ruleStrings=new String[]{String.format("[%s] ||| %s ||| %s ||| 0",goalNT,Vocabulary.START_SYM,Vocabulary.START_SYM),String.format("[%s] ||| [%s,1] [%s,2] ||| [%s,1] [%s,2] ||| -1",goalNT,goalNT,defaultNT,goalNT,defaultNT),String.format("[%s] ||| [%s,1] %s ||| [%s,1] %s ||| 0",goalNT,goalNT,Vocabulary.STOP_SYM,goalNT,Vocabulary.STOP_SYM)};  for (  String ruleString : ruleStrings) {    Rule rule=reader.parseLine(ruleString);    addRule(rule);    rule.estimateRuleCost(featureFunctions);  }}  }
class C{  private boolean isEmbedded(MetaProperty metaProperty){  return metaProperty.getAnnotatedElement().isAnnotationPresent(javax.persistence.Embedded.class);}  }
class C{  private HashSet<Resource> preferMp3(HashSet<Resource> files){  HashMap<String,Resource> map=new HashMap<String,Resource>();  for (  Resource file : files) {    String path=stripExtension(file.getPath());    if (file.getPath().endsWith(".mp3") || !map.containsKey(path)) {      map.put(path,file);    }  }  return new HashSet<Resource>(map.values());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int mediaMask=DBObject.MEDIA_MASK_ALL;  if (curNumberOfParameters == 11) {    mediaMask=getMediaMask(stack);  }  boolean miscb=evalBool(stack.pop());  boolean yearb=evalBool(stack.pop());  boolean erb=evalBool(stack.pop());  boolean ratedb=evalBool(stack.pop());  boolean catb=evalBool(stack.pop());  boolean peopleb=evalBool(stack.pop());  boolean descb=evalBool(stack.pop());  boolean epsb=evalBool(stack.pop());  boolean titb=evalBool(stack.pop());  String str=getString(stack);  if (Sage.DBG)   System.out.println("CALLING SearchSelectedFieldsNTE: " + str);  return Wizard.getInstance().searchFieldsNTE(str,titb,epsb,descb,peopleb,catb,ratedb,erb,yearb,miscb,mediaMask,false);}  }
class C{  protected WDSBlueMixProxyResource mock_bluemix_rest_client_is_created(int status_code,Object entity) throws Exception {  wdsresource=mock(WDSBlueMixProxyResource.class);  ResponseBuilder responseBuilder=mock(ResponseBuilder.class);  response=mock(Response.class);  when(response.getStatus()).thenReturn(status_code);  when(response.getEntity()).thenReturn(entity);  when((responseBuilder).build()).thenReturn(response);  return wdsresource;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == StructuralTypeRef.class) {switch (baseFeatureID) {case TypeRefsPackage.STRUCTURAL_TYPE_REF__AST_STRUCTURAL_MEMBERS:      return TypeRefsPackage.BOUND_THIS_TYPE_REF__AST_STRUCTURAL_MEMBERS;case TypeRefsPackage.STRUCTURAL_TYPE_REF__STRUCTURAL_TYPE:    return TypeRefsPackage.BOUND_THIS_TYPE_REF__STRUCTURAL_TYPE;case TypeRefsPackage.STRUCTURAL_TYPE_REF__GEN_STRUCTURAL_MEMBERS:  return TypeRefsPackage.BOUND_THIS_TYPE_REF__GEN_STRUCTURAL_MEMBERS;case TypeRefsPackage.STRUCTURAL_TYPE_REF__POSTPONED_SUBSTITUTIONS:return TypeRefsPackage.BOUND_THIS_TYPE_REF__POSTPONED_SUBSTITUTIONS;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  static Instruction makeMoveInstruction(IR ir,Register r1,Register r2,TypeReference t){  Operator mv=IRTools.getMoveOp(t);  RegisterOperand o1=new RegisterOperand(r1,t);  RegisterOperand o2=new RegisterOperand(r2,t);  Instruction s=Move.create(mv,o1,o2);  s.setSourcePosition(SSA_SYNTH_BCI,ir.getGc().getInlineSequence());  return s;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.816 -0500",hash_original_method="879F2FC8DE697B067D571C3BF31ADD98",hash_generated_method="B1F77C3D14748D4B11A7AB0A42350225") public BerInputStream(byte[] encoded) throws IOException {  this(encoded,0,encoded.length);}  }
class C{  private List<StoragePort> allocatePorts(StoragePortsAllocator allocator,List<StoragePort> candidatePorts,int portsRequested,NetworkLite net,URI varrayURI){  Collections.shuffle(candidatePorts);  if (simulation) {    StoragePortsAllocator.PortAllocationContext context=StoragePortsAllocator.getPortAllocationContext(net,"arrayX",allocator.getContext());    for (    StoragePort port : candidatePorts) {      context.addPort(port,null,null,null,null);    }    List<StoragePort> portsAllocated=allocator.allocatePortsForNetwork(portsRequested,context,false,null,false);    allocator.setContext(context);    return portsAllocated;  } else {    Map<StoragePort,Long> sportMap=_blockScheduler.computeStoragePortUsage(candidatePorts);    List<StoragePort> portsAllocated=allocator.selectStoragePorts(_dbClient,sportMap,net,varrayURI,portsRequested,null,false);    return portsAllocated;  }}  }
class C{  public static boolean isAppliance(){  if (Play.mode.isDev()) {    return false;  }  return PlatformUtils.isAppliance();}  }
class C{  public Message fromStream(InputStream in) throws IOException {  return fromPdu(new PduInputStream(in,NoopCipher.NOOP_CIPHER).read());}  }
class C{  public Comment makeComment(String string){  return new Comment(string);}  }
class C{  public DefaultLocalTransition(State<S,E> source,State<S,E> target,Collection<Action<S,E>> actions,E event,Guard<S,E> guard,Trigger<S,E> trigger,SecurityRule securityRule){  super(source,target,actions,event,guard,trigger,securityRule);}  }
class C{  public boolean only_regular_locals(){  return soot.PhaseOptions.getBoolean(options,"only-regular-locals");}  }
class C{  void bugMessage(Throwable ex){  log.printLines(PrefixKind.JAVAC,"msg.bug",JavaCompiler.version());  ex.printStackTrace(log.getWriter(WriterKind.NOTICE));}  }
class C{  public void write(OutputNode node,Object source) throws Exception {  Map map=(Map)source;  if (group.isInline()) {    if (!map.isEmpty()) {      write(node,map);    } else     if (!node.isCommitted()) {      node.remove();    }  } else {    write(node,map);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public final String toString(){  return this.image;}  }
class C{  void pushProcessor(XSLTElementProcessor processor){  m_processors.push(processor);}  }
class C{  public FaceletException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void sendJsonClickableHoverableMessage(CommandSender sender,String message,String command,String hover){  String json="{\"text\":\"" + message + "\",\"clickEvent\":{\"action\":\"suggest_command\",\"value\":\""+ command+ "\"},\"hoverEvent\":{\"action\":\"show_text\",\"value\":[{\"text\":\""+ hover+ "\",\"color\":\"dark_purple\"}]}}";  if (sender instanceof Player) {    try {      PacketSender.sendChatPacket((Player)sender,json);    } catch (    Exception e) {      plugin.getLogger().severe("Errors while trying to display clickable and hoverable message in /aach help command. Displaying standard message instead.");      sender.sendMessage(message);    }  } else {    sender.sendMessage(message);  }}  }
class C{  public boolean hasLeagcyValue(){  return mLegacyCameraId != null;}  }
class C{  public static float parseFloat(CharSequence csq){  return (float)parseDouble(csq);}  }
class C{  public FPGrowth(){  resetOptions();}  }
class C{  private static Collection<ClientId> parseClientIdParameters(String clientIdParameters){  Collection<ClientId> toReturn=new ArrayList<>();  Iterable<String> splitSubsystemParams=Splitter.on(",").trimResults().omitEmptyStrings().split(clientIdParameters);  Splitter codeSplitter=Splitter.on("/").trimResults();  for (  String oneSubsystemParam : splitSubsystemParams) {    List<String> codes=Lists.newArrayList(codeSplitter.split(oneSubsystemParam));    if (codes.size() != NUM_COMPONENTS) {      throw new IllegalStateException(" SOAP body logging override parameter should be comma-separated list of four " + "slash-separated codes" + " identifying one subsystem,"+ " for example \"FI/ORG/1234567-1/subsystem1\", detected bad value: "+ oneSubsystemParam);    }    ClientId id=ClientId.create(codes.get(FIRST_COMPONENT),codes.get(SECOND_COMPONENT),codes.get(THIRD_COMPONENT),codes.get(FOURTH_COMPONENT));    toReturn.add(id);  }  return toReturn;}  }
class C{  public void checkAutoFollowSearch(int friendCount){  if (getAutoFollowSearch().isEmpty()) {    return;  }  log("Processing autofollow search",Level.FINE,getAutoFollowSearch());  try {    Network memory=getBot().memory().newMemory();    Vertex twitter=memory.createVertex(getPrimitive());    Vertex vertex=twitter.getRelationship(Primitive.LASTAUTOFOLLOWSEARCH);    long last=0;    long max=0;    int count=0;    if (vertex != null) {      last=((Number)vertex.getData()).longValue();    }    for (    String followSearch : getAutoFollowSearch()) {      Query query=new Query(followSearch);      if (vertex != null) {        query.setSinceId(last);      }      SearchResource search=getConnection().search();      QueryResult result=search.search(query);      List<Status> tweets=result.getTweets();      if (tweets != null) {        for (        Status tweet : tweets) {          if (count > this.maxSearch) {            break;          }          if (tweet.getId() > last) {            log("Autofollow search",Level.FINE,tweet.getText(),tweet.getUser().getScreenName(),followSearch);            if (checkFriendship(tweet.getUser().getId(),false)) {              friendCount++;              if (friendCount >= getMaxFriends()) {                log("Max friend limit",Level.FINE,getMaxFriends());                return;              }            }            count++;            if (tweet.getId() > max) {              max=tweet.getId();            }          }        }      }      if (count > this.maxSearch) {        break;      }    }    if (max != 0) {      twitter.setRelationship(Primitive.LASTAUTOFOLLOWSEARCH,memory.createVertex(max));      memory.save();    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  public LabelSet(int indices[]){  this.indices=indices;}  }
class C{  protected final void flushRewriteSession(){  fActiveRewriteSession=null;  try {    fDocument.removePositionCategory(fPositionCategory);  } catch (  BadPositionCategoryException x) {  }  fDocument.addPositionCategory(fPositionCategory);  fIsInitialized=false;}  }
class C{  public static String createCsvFilePath(Shell shell,String text,String defaultFileName){  return createFilePath(shell,text,PreferenceConstants.DEFAULT_FOLDER_CSV_EXPORT,csvExtensions,SWT.SAVE,defaultFileName);}  }
class C{  public li addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void updateRow() throws SQLException {  crsInternal.updateRow();}  }
class C{  private void init(Values v,TreeMap<String,Object> myDefaults){  List<State> states=new ArrayList<State>();  Map<String,Integer> stateCodes=new HashMap<String,Integer>();  List<RuntimeState> runtimeStates=new ArrayList<RuntimeState>();  String statesString=(String)myDefaults.get(prefix + ".States");  if (statesString != null) {    String[] s=statesString.split(",");    for (int i=0; i < s.length; i++) {      s[i]=s[i].trim();      if (!State.isStandardStateName(s[i])) {        String stateName=prefix + "." + s[i];        State customState=(State)myDefaults.get(stateName);        if (customState != null) {          states.add(customState);        }      } else {        states.add(State.getStandardState(s[i]));      }    }    if (states.size() > 0) {      v.stateTypes=states.toArray(new State[states.size()]);    }    int code=1;    for (    State state : states) {      stateCodes.put(state.getName(),code);      code<<=1;    }  } else {    states.add(State.Enabled);    states.add(State.MouseOver);    states.add(State.Pressed);    states.add(State.Disabled);    states.add(State.Focused);    states.add(State.Selected);    states.add(State.Default);    stateCodes.put("Enabled",ENABLED);    stateCodes.put("MouseOver",MOUSE_OVER);    stateCodes.put("Pressed",PRESSED);    stateCodes.put("Disabled",DISABLED);    stateCodes.put("Focused",FOCUSED);    stateCodes.put("Selected",SELECTED);    stateCodes.put("Default",DEFAULT);  }  for (  String key : myDefaults.keySet()) {    String temp=key.substring(prefix.length());    if (temp.indexOf('"') != -1 || temp.indexOf(':') != -1)     continue;    temp=temp.substring(1);    String stateString=null;    String property=null;    int bracketIndex=temp.indexOf(']');    if (bracketIndex < 0) {      property=temp;    } else {      stateString=temp.substring(0,bracketIndex);      property=temp.substring(bracketIndex + 2);    }    if (stateString == null) {      if ("contentMargins".equals(property)) {        v.contentMargins=(Insets)myDefaults.get(key);      } else       if ("States".equals(property)) {      } else {        v.defaults.put(property,myDefaults.get(key));      }    } else {      boolean skip=false;      int componentState=0;      String[] stateParts=stateString.split("\\+");      for (      String s : stateParts) {        if (stateCodes.containsKey(s)) {          componentState|=stateCodes.get(s);        } else {          skip=true;          break;        }      }      if (skip)       continue;      RuntimeState rs=null;      for (      RuntimeState s : runtimeStates) {        if (s.state == componentState) {          rs=s;          break;        }      }      if (rs == null) {        rs=new RuntimeState(componentState,stateString);        runtimeStates.add(rs);      }      if ("backgroundPainter".equals(property)) {        rs.backgroundPainter=getPainter(myDefaults,key);      } else       if ("foregroundPainter".equals(property)) {        rs.foregroundPainter=getPainter(myDefaults,key);      } else       if ("borderPainter".equals(property)) {        rs.borderPainter=getPainter(myDefaults,key);      } else {        rs.defaults.put(property,myDefaults.get(key));      }    }  }  Collections.sort(runtimeStates,STATE_COMPARATOR);  v.states=runtimeStates.toArray(new RuntimeState[runtimeStates.size()]);}  }
class C{  public Polygon2D reduceVertices(float minEdgeLen){  minEdgeLen*=minEdgeLen;  List<Vec2D> reduced=new ArrayList<Vec2D>();  Vec2D prev=vertices.get(0);  reduced.add(prev);  int num=vertices.size() - 1;  for (int i=1; i < num; i++) {    Vec2D v=vertices.get(i);    if (prev.distanceToSquared(v) >= minEdgeLen) {      reduced.add(v);      prev=v;    }  }  if (vertices.get(0).distanceToSquared(vertices.get(num)) >= minEdgeLen) {    reduced.add(vertices.get(num));  }  vertices=reduced;  return this;}  }
class C{  private boolean ruleR10(Node a,Node c){  List<Node> intoCArrows=graph.getNodesInTo(c,Endpoint.ARROW);  for (  Node b : intoCArrows) {    if (b == a)     continue;    if (!(graph.getEndpoint(c,b) == Endpoint.TAIL))     continue;    for (    Node d : intoCArrows) {      if (d == a || d == b)       continue;      if (!(graph.getEndpoint(d,c) == Endpoint.TAIL))       continue;      List<List<Node>> ucPdPsToB=getUcPdPaths(a,b);      List<List<Node>> ucPdPsToD=getUcPdPaths(a,d);      for (      List<Node> u1 : ucPdPsToB) {        Node m=u1.get(1);        for (        List<Node> u2 : ucPdPsToD) {          Node n=u2.get(1);          if (m.equals(n))           continue;          if (graph.isAdjacentTo(m,n))           continue;          logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("R10",graph.getEdge(c,a)));          graph.setEndpoint(c,a,Endpoint.TAIL);          changeFlag=true;          return true;        }      }    }  }  return false;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public int append(int intValue){  return append(OctetUtil.intToBytes(intValue));}  }
class C{  public void testOrAndSwitchRecursive(){  final ASTFilterNormalizationOptimizer rewriter=new ASTFilterNormalizationOptimizer();  final IBindingSet[] bsets=new IBindingSet[]{new ListBindingSet()};  final QueryRoot given=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    given.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    given.setWhereClause(whereClause);    final StatementPatternNode spn=new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS);    whereClause.addChild(spn);    final FunctionNode bound1=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s1")});    final FunctionNode bound2=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s2")});    final FunctionNode bound3=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s3")});    final FunctionNode bound4=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s4")});    final FunctionNode bound5=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s5")});    final FunctionNode bound6=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s6")});    final FunctionNode bound7=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s7")});    final FunctionNode bound8=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s8")});    final FunctionNode bound9=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s9")});    final FunctionNode bound10=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s10")});    final FunctionNode bound11=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s11")});    final FunctionNode bound12=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s12")});    final FunctionNode bound13=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s13")});    final FunctionNode bound14=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s14")});    final FunctionNode bound15=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s15")});    final FunctionNode bound16=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s16")});    final FilterNode filterNode=new FilterNode(FunctionNode.OR(FunctionNode.AND(FunctionNode.OR(FunctionNode.AND(bound1,bound2),FunctionNode.AND(bound3,bound4)),FunctionNode.OR(FunctionNode.AND(bound5,bound6),FunctionNode.AND(bound7,bound8))),FunctionNode.AND(FunctionNode.OR(FunctionNode.AND(bound9,bound10),FunctionNode.AND(bound11,bound12)),FunctionNode.OR(FunctionNode.AND(bound13,bound14),FunctionNode.AND(bound15,bound16)))));    assertFalse(StaticAnalysis.isCNF(filterNode));    whereClause.addChild(filterNode);  }  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    expected.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    expected.setWhereClause(whereClause);    final StatementPatternNode spn=new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS);    whereClause.addChild(spn);    final FunctionNode bound1=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s1")});    final FunctionNode bound2=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s2")});    final FunctionNode bound3=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s3")});    final FunctionNode bound4=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s4")});    final FunctionNode bound5=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s5")});    final FunctionNode bound6=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s6")});    final FunctionNode bound7=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s7")});    final FunctionNode bound8=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s8")});    final FunctionNode bound9=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s9")});    final FunctionNode bound10=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s10")});    final FunctionNode bound11=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s11")});    final FunctionNode bound12=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s12")});    final FunctionNode bound13=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s13")});    final FunctionNode bound14=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s14")});    final FunctionNode bound15=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s15")});    final FunctionNode bound16=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s16")});    final List<FunctionNode> lefts=new ArrayList<FunctionNode>();    lefts.add(FunctionNode.OR(bound1,bound3));    lefts.add(FunctionNode.OR(bound1,bound4));    lefts.add(FunctionNode.OR(bound2,bound3));    lefts.add(FunctionNode.OR(bound2,bound4));    lefts.add(FunctionNode.OR(bound5,bound7));    lefts.add(FunctionNode.OR(bound5,bound8));    lefts.add(FunctionNode.OR(bound6,bound7));    lefts.add(FunctionNode.OR(bound6,bound8));    final List<FunctionNode> rights=new ArrayList<FunctionNode>();    rights.add(FunctionNode.OR(bound9,bound11));    rights.add(FunctionNode.OR(bound9,bound12));    rights.add(FunctionNode.OR(bound10,bound11));    rights.add(FunctionNode.OR(bound10,bound12));    rights.add(FunctionNode.OR(bound13,bound15));    rights.add(FunctionNode.OR(bound13,bound16));    rights.add(FunctionNode.OR(bound14,bound15));    rights.add(FunctionNode.OR(bound14,bound16));    for (    final FunctionNode left : lefts) {      for (      final FunctionNode right : rights) {        whereClause.addChild(new FilterNode(FunctionNode.OR(left,right)));      }    }  }  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(given),store);  final IQueryNode actual=rewriter.optimize(context,new QueryNodeWithBindingSet(given,bsets)).getQueryNode();  assertSameAST(expected,actual);}  }
class C{  public DefaultWriteRequest(Object message,WriteFuture future,SocketAddress destination){  if (message == null) {    throw new IllegalArgumentException("message");  }  if (future == null) {    future=UNUSED_FUTURE;  }  this.message=message;  this.future=future;  this.destination=destination;}  }
class C{  public static DenseTernaryPolynomial generateRandom(int N,SecureRandom random){  DenseTernaryPolynomial poly=new DenseTernaryPolynomial(N);  for (int i=0; i < N; i++) {    poly.coeffs[i]=random.nextInt(3) - 1;  }  return poly;}  }
class C{  @Override protected void onPause(){  super.onPause();  mPreview.stop();}  }
class C{  private int inliningActionCost(int inlinedBodyEstimate,boolean needsGuard,boolean preEx,OptOptions opts){  int guardCost=0;  if (needsGuard & !preEx) {    guardCost+=NormalMethod.CALL_COST;    if (opts.guardWithMethodTest()) {      guardCost+=3 * NormalMethod.SIMPLE_OPERATION_COST;    } else     if (opts.guardWithCodePatch()) {      guardCost+=NormalMethod.SIMPLE_OPERATION_COST;    } else {      guardCost+=2 * NormalMethod.SIMPLE_OPERATION_COST;    }  }  return guardCost + inlinedBodyEstimate;}  }
class C{  public TestCase replaceTest(String targetClass,String fileName,String testName,String[] classPath){  Map<String,TestCase> tests=getTestCases(fileName,classPath);  TestCase target=tests.get(testName);  System.out.println("Found target test: " + target.toCode());  tests.remove(testName);  return replaceTest(targetClass,new ArrayList<TestCase>(tests.values()),target);}  }
class C{  protected char charAt(String value,int index){  if (index < 0 || index >= value.length()) {    return Character.MIN_VALUE;  }  return value.charAt(index);}  }
class C{  public static String extractGroupName(String groupName){  Pattern p=Pattern.compile("^\\S+\\+(\\S+)$");  Matcher matcher=p.matcher(groupName);  if (matcher.matches()) {    return matcher.group(1);  }  return groupName;}  }
class C{  public boolean removeModule(ModuleHandle moduleHandle){  boolean noLoadedModules=false;  boolean wasModuleRemoved=false;synchronized (privateInstanceLock) {    if (modules.remove(moduleHandle)) {      wasModuleRemoved=true;      noLoadedModules=(modules.size() == 0);    }  }  if (noLoadedModules) {    setTerminated(true);  }  return wasModuleRemoved;}  }
class C{  public void loadArgs(){  loadArgs(0,argumentTypes.length);}  }
class C{  public OMArc(int x1,int y1,int w,int h,double s,double e){  super(RENDERTYPE_XY,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  this.x1=x1;  this.y1=y1;  width=w;  height=h;  start=s;  extent=e;}  }
class C{  @SuppressFBWarnings(value="LI_LAZY_INIT_STATIC",justification="This race condition is fine, as explained in the comment below.") public static Handling log(){  if (log == null) {    log=createHandling(DurianPlugins.get(Plugins.Log.class,null));  }  return log;}  }
class C{  public Vertex parsePush(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  Vertex equation=network.createInstance(Primitive.PUSH);  Vertex value=parseElement(stream,elements,debug,network);  equation.addRelationship(Primitive.ARGUMENT,value,Integer.MAX_VALUE);  return equation;}  }
class C{  public void addListener(final IBookmarkManagerListener listener){  m_listeners.addListener(listener);}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  public ComputedCSSColorValue(int idx){  super(null);  valueProvider=this;  index=idx;}  }
class C{  public synchronized void add(long[] argIds,int argLength){  if (length + argLength > data.length) {    long[] oldData=data;    data=new long[argLength + length];    System.arraycopy(oldData,0,data,0,oldData.length);  }  System.arraycopy(argIds,0,data,length,argLength);  length+=argLength;}  }
class C{  @SuppressWarnings("serial") public void testServiceSparql11Variable(){  final ServiceNode serviceNode=(ServiceNode)new Helper(){{      tmp=service(varNode(z),joinGroupNode(statementPatternNode(varNode(x),constantNode(a),varNode(y))));    }  }.getTmp();  final Set<IVariable<?>> requiredBound=new HashSet<IVariable<?>>(){{      add(Var.var("z"));    }  };  final Set<IVariable<?>> desiredBound=new HashSet<IVariable<?>>(){{      add(Var.var("x"));      add(Var.var("y"));    }  };  final StaticAnalysis sa=new StaticAnalysis(new QueryRoot(QueryType.SELECT),null);  assertEquals(requiredBound,serviceNode.getRequiredBound(sa));  assertEquals(desiredBound,serviceNode.getDesiredBound(sa));}  }
class C{  public void testDivideRoundHalfDownNeg1(){  String a="-92948782094488478231212478987482988798104576347813847567949855464535634534563456";  int aScale=-24;  String b="74723342238476237823754692930187879183479";  int bScale=13;  String c="-1.2439055763572051712242335979928354832010167729111113605E+76";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_DOWN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  BindingResolver(){}  }
class C{  private static Options createOptions(){  Options options=new Options();  options.addOption("v","verbose",false,"verbose");  options.addOption("c","configuration-dir",true,"configuration directory");  options.addOption("h","help",false,"help");  return options;}  }
class C{  private GPNode pickCompatibleNode(final GPNode original,final GPFunctionSet set,final EvolutionState state,final GPType returntype,final int thread){  int numValidNodes=0;  int type=returntype.type;  GPInitializer initializer=((GPInitializer)state.initializer);  int len=original.constraints(initializer).childtypes.length;  boolean failed;  if (initializer.numAtomicTypes + initializer.numSetTypes == 1)   numValidNodes=set.nodesByArity[type][len].length; else   for (int x=0; x < set.nodesByArity[type][len].length; x++) {    failed=false;    for (int y=0; y < set.nodesByArity[type][len][x].constraints(initializer).childtypes.length; y++)     if (!set.nodesByArity[type][len][x].constraints(initializer).childtypes[y].compatibleWith(initializer,original.children[y].constraints(initializer).returntype)) {      failed=true;      break;    }    if (!failed)     numValidNodes++;  }  int nodenum=state.random[thread].nextInt(numValidNodes);  int prosnode=0;  if (numValidNodes == set.nodesByArity[type][len].length)   return set.nodesByArity[type][len][nodenum]; else   for (int x=0; x < set.nodesByArity[type][len].length; x++) {    failed=false;    for (int y=0; y < set.nodesByArity[type][len][x].constraints(initializer).childtypes.length; y++)     if (!set.nodesByArity[type][len][x].constraints(initializer).childtypes[y].compatibleWith(initializer,original.children[y].constraints(initializer).returntype)) {      failed=true;      break;    }    if (!failed) {      if (prosnode == nodenum)       return set.nodesByArity[type][len][x];      prosnode++;    }  }  throw new InternalError();}  }
class C{  private Serializer(){  serializers.add(new ByteSerializer());  serializers.add(new StringSerializer());  serializers.add(new DateSerializer());  serializers.add(new ObjectSerializer());}  }
class C{  public Progress(String title,ConnectionRequest request,boolean showPercentage){  super(title);  this.request=request;  SliderBridge b=new SliderBridge(request);  b.setRenderPercentageOnTop(showPercentage);  b.setRenderValueOnTop(true);  setLayout(new BoxLayout(BoxLayout.Y_AXIS));  addComponent(b);  Command cancel=new Command(UIManager.getInstance().localize("cancel","Cancel"));  if (Display.getInstance().isTouchScreenDevice() || getSoftButtonCount() < 2) {    Button btn=new Button(cancel);    Container cnt=new Container(new FlowLayout(CENTER));    cnt.addComponent(btn);    addComponent(cnt);  } else {    addCommand(cancel);  }  setDisposeWhenPointerOutOfBounds(false);  setAutoDispose(false);  NetworkManager.getInstance().addProgressListener(this);}  }
class C{  static void debug(int level,String line){  if ((selectedDebugLevel & level) != 0) {    System.out.println(DEBUG_HEADER + line);  }}  }
class C{  public CheckoutHeader(final String id){  super(id);}  }
class C{  public void testBasicInsertByKey() throws Exception {  if (!this.isSetForFabricTest) {    return;  }  Statement stmt;  this.conn.clearServerSelectionCriteria();  this.conn.setShardTable("employees");  stmt=this.conn.createStatement();  this.conn.setShardKey("1");  assertEquals("fabric_test1_shard2",this.conn.getCurrentServerGroup().getName());  stmt.executeUpdate("insert into employees values (1, 'William', 'Gisbon')");  this.conn.setShardKey("6");  assertEquals("fabric_test1_shard2",this.conn.getCurrentServerGroup().getName());  stmt.executeUpdate("insert into employees values (6, 'Samuel', 'Delany')");  this.conn.setShardKey("9");  assertEquals("fabric_test1_shard1",this.conn.getCurrentServerGroup().getName());  stmt.executeUpdate("insert into employees values (9, 'William', 'Turner')");  this.conn.setShardKey("19");  assertEquals("fabric_test1_shard1",this.conn.getCurrentServerGroup().getName());  stmt.executeUpdate("insert into employees values (19, 'Albrecht', 'Durer')");  assertBasicDataIsInProperPlaces();}  }
class C{  public TypeReference(int typeRef){  this.value=typeRef;}  }
class C{  public static org.smpte_ra.schemas.st2067_2_2016.UserTextType buildCPLUserTextType_2016(String value,String language){  org.smpte_ra.schemas.st2067_2_2016.UserTextType userTextType=new org.smpte_ra.schemas.st2067_2_2016.UserTextType();  userTextType.setValue(value);  userTextType.setLanguage(language);  return userTextType;}  }
class C{  public static Process execute(final String[] commandArray,final String[] envp,final File dir) throws IOException {  return Runtime.getRuntime().exec(commandArray,envp,dir);}  }
class C{  public static String gsmCellLocationJSON(GsmCellLocation location){  final Calendar calendar=Calendar.getInstance();  final JSONObject json=new JSONObject();  if (location != null) {    try {      json.put("provider",CELLLOCATION_PROVIDER);      json.put("type",GSM);      json.put("timestamp",calendar.getTimeInMillis());      json.put("cid",location.getCid());      json.put("lac",location.getLac());      json.put("psc",location.getPsc());    } catch (    JSONException exc) {      logJSONException(exc);    }  }  return json.toString();}  }
class C{  boolean shouldUpdateSelectedStateFromAction(){  return true;}  }
class C{  @InterfaceAudience.Private @InterfaceStability.Unstable public synchronized long remainingInFile(){  return contentLength - pos;}  }
class C{  public static boolean instanceofByteArray(Object o){  return getImplementation().instanceofByteArray(o);}  }
class C{  public static Network removeAllPtTagsFromNetwork(Network network){  log.info("Untagging pt network links");  int removedTags=0;  for (  Link link : network.getLinks().values()) {    Set<String> allowedModes=new TreeSet<String>(link.getAllowedModes());    if (allowedModes.remove(TransportMode.pt)) {      removedTags++;    }    link.setAllowedModes(allowedModes);  }  log.info("Finished - Removed " + removedTags + " tags from links.");  return network;}  }
class C{  private int rotateLeft(int x,int y){  return ((x << (y & (32 - 1))) | (x >>> (32 - (y & (32 - 1)))));}  }
class C{  public RenewSpec(boolean renewable){  this(renewable,false,0);}  }
class C{  public int indexOf(int elem,int index){  runTo(-1);  return super.indexOf(elem,index);}  }
class C{  protected static Rectangle2D convertRegion(String xStr,String yStr,String wStr,String hStr,short unitsType,GraphicsNode targetNode,UnitProcessor.Context uctx){  double x, y, w, h;switch (unitsType) {case OBJECT_BOUNDING_BOX:    x=UnitProcessor.svgHorizontalCoordinateToObjectBoundingBox(xStr,SVG_X_ATTRIBUTE,uctx);  y=UnitProcessor.svgVerticalCoordinateToObjectBoundingBox(yStr,SVG_Y_ATTRIBUTE,uctx);w=UnitProcessor.svgHorizontalLengthToObjectBoundingBox(wStr,SVG_WIDTH_ATTRIBUTE,uctx);h=UnitProcessor.svgVerticalLengthToObjectBoundingBox(hStr,SVG_HEIGHT_ATTRIBUTE,uctx);Rectangle2D bounds=targetNode.getGeometryBounds();if (bounds != null) {x=bounds.getX() + x * bounds.getWidth();y=bounds.getY() + y * bounds.getHeight();w*=bounds.getWidth();h*=bounds.getHeight();} else {x=y=w=h=0;}break;case USER_SPACE_ON_USE:x=UnitProcessor.svgHorizontalCoordinateToUserSpace(xStr,SVG_X_ATTRIBUTE,uctx);y=UnitProcessor.svgVerticalCoordinateToUserSpace(yStr,SVG_Y_ATTRIBUTE,uctx);w=UnitProcessor.svgHorizontalLengthToUserSpace(wStr,SVG_WIDTH_ATTRIBUTE,uctx);h=UnitProcessor.svgVerticalLengthToUserSpace(hStr,SVG_HEIGHT_ATTRIBUTE,uctx);break;default :throw new Error("invalid unitsType:" + unitsType);}return new Rectangle2D.Double(x,y,w,h);}  }
class C{  private void checkClosed() throws GridClientClosedException {  if (closed.get())   throw new GridClientClosedException("Client was closed (no public methods of client can be used anymore).");}  }
class C{  public DeleteResourcesProcessor(IResource[] resources,boolean deleteContents){  fResources=removeDescendants(resources);  fDeleteContents=deleteContents;}  }
class C{  public static <T>JavaFXBidirectionalBinder<T> bind(javafx.beans.property.Property<T> property){  requireNonNull(property,"property");  return new DefaultJavaFXBidirectionalBinder<>(property);}  }
class C{  public JSONArray optJSONArray(String key){  Object o=this.opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public boolean canSetParameter(String name,Object value){  if (value instanceof Boolean) {    if (name.equalsIgnoreCase(DOMConstants.DOM_CDATA_SECTIONS) || name.equalsIgnoreCase(DOMConstants.DOM_COMMENTS) || name.equalsIgnoreCase(DOMConstants.DOM_ENTITIES)|| name.equalsIgnoreCase(DOMConstants.DOM_INFOSET)|| name.equalsIgnoreCase(DOMConstants.DOM_ELEMENT_CONTENT_WHITESPACE)|| name.equalsIgnoreCase(DOMConstants.DOM_NAMESPACES)|| name.equalsIgnoreCase(DOMConstants.DOM_NAMESPACE_DECLARATIONS)|| name.equalsIgnoreCase(DOMConstants.DOM_SPLIT_CDATA)|| name.equalsIgnoreCase(DOMConstants.DOM_WELLFORMED)|| name.equalsIgnoreCase(DOMConstants.DOM_DISCARD_DEFAULT_CONTENT)|| name.equalsIgnoreCase(DOMConstants.DOM_FORMAT_PRETTY_PRINT)|| name.equalsIgnoreCase(DOMConstants.DOM_XMLDECL)) {      return true;    } else     if (name.equalsIgnoreCase(DOMConstants.DOM_CANONICAL_FORM) || name.equalsIgnoreCase(DOMConstants.DOM_CHECK_CHAR_NORMALIZATION) || name.equalsIgnoreCase(DOMConstants.DOM_DATATYPE_NORMALIZATION)|| name.equalsIgnoreCase(DOMConstants.DOM_VALIDATE_IF_SCHEMA)|| name.equalsIgnoreCase(DOMConstants.DOM_VALIDATE)) {      return !((Boolean)value).booleanValue();    } else     if (name.equalsIgnoreCase(DOMConstants.DOM_IGNORE_UNKNOWN_CHARACTER_DENORMALIZATIONS)) {      return ((Boolean)value).booleanValue();    }  } else   if (name.equalsIgnoreCase(DOMConstants.DOM_ERROR_HANDLER) && value == null || value instanceof DOMErrorHandler) {    return true;  }  return false;}  }
class C{  public ReplaceAll(){  super("text_transformation.replace_all",3);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypableElement.class) {switch (baseOperationID) {default :      return -1;  }}if (baseClass == Expression.class) {switch (baseOperationID) {case N4JSPackage.EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:    return N4JSPackage.EXPRESSION_ANNOTATION_LIST___IS_VALID_SIMPLE_ASSIGNMENT_TARGET;default :  return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private void report(String id,double startDistance,double time,int hopCount){  write(format(startDistance) + " " + format(time)+ " "+ hopCount+ " "+ id);}  }
class C{  public Anonymous_eventDefinition_1_ createAnonymous_eventDefinition_1_(){  Anonymous_eventDefinition_1_Impl anonymous_eventDefinition_1_=new Anonymous_eventDefinition_1_Impl();  return anonymous_eventDefinition_1_;}  }
class C{  public void onSelectionStringChangedWebCoreThread(String selection,int token){  if (mAccessibilityInjectorFallback != null) {    mAccessibilityInjectorFallback.onSelectionStringChangedWebCoreThread(selection,token);  }}  }
class C{  void copyAARowNoRLE(final int[] alphaRow,final int y,final int px0,final int px1){  if (DO_MONITORS) {    rdrCtx.stats.mon_rdr_copyAARow.start();  }  final int px_bbox1=FloatMath.min(px1,bboxX1);  if (DO_LOG_BOUNDS) {    MarlinUtils.logInfo("row = [" + px0 + " ... "+ px_bbox1+ " ("+ px1+ ") [ for y="+ y);  }  final int row=y - bboxY0;  rowAAx0[row]=px0;  rowAAx1[row]=px_bbox1;  rowAAEnc[row]=0;  final long pos=rowAAChunkPos;  rowAAChunkIndex[row]=pos;  final long needSize=pos + ((px_bbox1 - px0 + 3) & -4);  rowAAChunkPos=needSize;  final OffHeapArray _rowAAChunk=rowAAChunk;  if (_rowAAChunk.length < needSize) {    expandRowAAChunk(needSize);  }  if (DO_STATS) {    rdrCtx.stats.stat_cache_rowAA.add(px_bbox1 - px0);  }  final int[] _touchedTile=touchedTile;  final int _TILE_SIZE_LG=TILE_SIZE_LG;  final int from=px0 - bboxX0;  final int to=px_bbox1 - bboxX0;  final Unsafe _unsafe=OffHeapArray.UNSAFE;  final long SIZE_BYTE=1L;  final long addr_alpha=ALPHA_MAP_UNSAFE.address;  long addr_off=_rowAAChunk.address + pos;  for (int x=from, val=0; x < to; x++) {    val+=alphaRow[x];    if (DO_AA_RANGE_CHECK) {      if (val < 0) {        System.out.println("Invalid coverage = " + val);        val=0;      }      if (val > MAX_AA_ALPHA) {        System.out.println("Invalid coverage = " + val);        val=MAX_AA_ALPHA;      }    }    if (val == 0) {      _unsafe.putByte(addr_off,(byte)0);    } else {      _unsafe.putByte(addr_off,_unsafe.getByte(addr_alpha + val));      _touchedTile[x >> _TILE_SIZE_LG]+=val;    }    addr_off+=SIZE_BYTE;  }  int tx=from >> _TILE_SIZE_LG;  if (tx < tileMin) {    tileMin=tx;  }  tx=((to - 1) >> _TILE_SIZE_LG) + 1;  if (tx > tileMax) {    tileMax=tx;  }  if (DO_LOG_BOUNDS) {    MarlinUtils.logInfo("clear = [" + from + " ... "+ to+ "[");  }  IntArrayCache.fill(alphaRow,from,px1 - bboxX0,0);  if (DO_MONITORS) {    rdrCtx.stats.mon_rdr_copyAARow.stop();  }}  }
class C{  public static WarArchive open(String file) throws IOException {  return new DefaultWarArchive(file);}  }
class C{  public void removeRenderStatement(String instanceId){  if (!WXUtils.isUiThread()) {    throw new WXRuntimeException("[WXRenderManager] removeRenderStatement can only be called in main thread");  }  WXRenderStatement statement=mRegistries.remove(instanceId);  if (statement != null) {    statement.destroy();  }}  }
class C{  private void createRasterProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/rasterInstanced.vs",GL_VERTEX_SHADER);  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/raster.fs",GL_FRAGMENT_SHADER);  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertexPosition");  glBindAttribLocation(program,1,"vertexNormal");  glBindAttribLocation(program,2,"boxCenter");  glBindAttribLocation(program,3,"boxHalfSize");  glBindFragDataLocation(program,0,"worldPosition_out");  glBindFragDataLocation(program,1,"worldNormal_out");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.rasterProgram=program;}  }
class C{  private static void initializeNNCache(double[] scratch,double[] bestd,int[] besti){  final int size=bestd.length;  Arrays.fill(bestd,Double.POSITIVE_INFINITY);  Arrays.fill(besti,-1);  for (int x=0, p=0; x < size; x++) {    assert (p == AGNES.triangleSize(x));    double bestdx=Double.POSITIVE_INFINITY;    int bestix=-1;    for (int y=0; y < x; y++, p++) {      final double v=scratch[p];      if (v < bestd[y]) {        bestd[y]=v;        besti[y]=x;      }      if (v < bestdx) {        bestdx=v;        bestix=y;      }    }    bestd[x]=bestdx;    besti[x]=bestix;  }}  }
class C{  public static void map(ItemStack stack,LexiconEntry entry,int page,boolean force){  EntryData data=new EntryData(entry,page);  String str=stackToString(stack);  if (force || !mappings.containsKey(str))   mappings.put(str,data);  if (entry.getIcon() == null)   entry.setIcon(stack.copy());}  }
class C{  public PaletteColorChooserMainPanel(){  initComponents();  setOpaque(false);  tabbedPane.setTabLayoutPolicy(JTabbedPane.WRAP_TAB_LAYOUT);  tabbedPane.setUI((TabbedPaneUI)PaletteTabbedPaneUI.createUI(tabbedPane));  tabbedPane.putClientProperty("Palette.TabbedPane.paintContentBorder",false);}  }
class C{  public static String processTemplate(String template,Map<String,?> replacements) throws IOException {  final VelocityContext vc=new VelocityContext();  for (  Map.Entry<String,?> me : replacements.entrySet()) {    vc.put(me.getKey(),me.getValue());  }  final String ret;  try (final StringWriter sw=new StringWriter()){    Velocity.getTemplate(TEMPLATE_DIR + "/" + template).merge(vc,sw);    sw.flush();    ret=sw.toString();  }   return ret;}  }
class C{  public static void main(String[] args){  TestRunner.run(RouteTest.class);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public String func(Double arg){  called=true;  actualValue=arg;  return "called";}  }
class C{  @Override public void agentActed(Agent agent,Action command,Environment source){  MapEnvironment mEnv=getMapEnv();  String msg="";  if (mEnv.getAgents().size() > 1)   msg="A" + mEnv.getAgents().indexOf(agent) + ": ";  notify(msg + command.toString());  updateTracks();  repaint();}  }
class C{  public double nextErlang(int a) throws Exception {  if (a < 1)   throw new Exception("Shape parameter of Erlang distribution must be greater than 1!");  double product=1.0;  for (int i=1; i <= a; i++)   product*=super.nextDouble();  return -Math.log(product);}  }
class C{  public static String collapseWhitespace(String str){  return str.replaceAll("\\s+"," ");}  }
class C{  public SamReadingContext(Collection<File> files,int numThreads,SamFilterParams filterParams,SAMFileHeader header) throws IOException {  this(files,numThreads,filterParams,header,SamRangeUtils.createReferenceRanges(header,filterParams));}  }
class C{  private InputStream handleBinaryStream(final InputStream in){  return in;}  }
class C{  public void printStackTrace(){  printStackTrace(new java.io.PrintWriter(System.err,true));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:14.554 -0500",hash_original_method="20A60861C26C58A53A0282FABD9ED153",hash_generated_method="20A60861C26C58A53A0282FABD9ED153") void draw(Canvas c,float x,int top,int y,int bottom){  if (!mHasTabs) {    if (mDirections == Layout.DIRS_ALL_LEFT_TO_RIGHT) {      drawRun(c,0,mLen,false,x,top,y,bottom,false);      return;    }    if (mDirections == Layout.DIRS_ALL_RIGHT_TO_LEFT) {      drawRun(c,0,mLen,true,x,top,y,bottom,false);      return;    }  }  float h=0;  int[] runs=mDirections.mDirections;  RectF emojiRect=null;  int lastRunIndex=runs.length - 2;  for (int i=0; i < runs.length; i+=2) {    int runStart=runs[i];    int runLimit=runStart + (runs[i + 1] & Layout.RUN_LENGTH_MASK);    if (runLimit > mLen) {      runLimit=mLen;    }    boolean runIsRtl=(runs[i + 1] & Layout.RUN_RTL_FLAG) != 0;    int segstart=runStart;    for (int j=mHasTabs ? runStart : runLimit; j <= runLimit; j++) {      int codept=0;      Bitmap bm=null;      if (mHasTabs && j < runLimit) {        codept=mChars[j];        if (codept >= 0xd800 && codept < 0xdc00 && j + 1 < runLimit) {          codept=Character.codePointAt(mChars,j);          if (codept >= Layout.MIN_EMOJI && codept <= Layout.MAX_EMOJI) {            bm=Layout.EMOJI_FACTORY.getBitmapFromAndroidPua(codept);          } else           if (codept > 0xffff) {            ++j;            continue;          }        }      }      if (j == runLimit || codept == '\t' || bm != null) {        h+=drawRun(c,segstart,j,runIsRtl,x + h,top,y,bottom,i != lastRunIndex || j != mLen);        if (codept == '\t') {          h=mDir * nextTab(h * mDir);        } else         if (bm != null) {          float bmAscent=ascent(j);          float bitmapHeight=bm.getHeight();          float scale=-bmAscent / bitmapHeight;          float width=bm.getWidth() * scale;          if (emojiRect == null) {            emojiRect=new RectF();          }          emojiRect.set(x + h,y + bmAscent,x + h + width,y);          c.drawBitmap(bm,null,emojiRect,mPaint);          h+=width;          j++;        }        segstart=j + 1;      }    }  }}  }
class C{  public double area(){  return x.length() * y.length();}  }
class C{  public boolean addStrictCompare(String keyProperty,ExprIdentNode keyPropNode,ExprIdentNode indexPropertyIdent){  QueryGraphValueDesc value=findIdentEntry(indexPropertyIdent);  if (value != null && value.getEntry() instanceof QueryGraphValueEntryHashKeyedExpr) {    QueryGraphValueEntryHashKeyedExpr expr=(QueryGraphValueEntryHashKeyedExpr)value.getEntry();    if (expr.isConstant()) {      return false;    }  }  if (value != null && value.getEntry() instanceof QueryGraphValueEntryHashKeyedProp) {    return false;  }  items.add(new QueryGraphValueDesc(new ExprNode[]{indexPropertyIdent},new QueryGraphValueEntryHashKeyedProp(keyPropNode,keyProperty)));  return true;}  }
class C{  public void destroy(){}  }
class C{  public boolean[] array(int index){  return buffers[index];}  }
class C{  public static boolean isWhitespace(char c){  return !RegExpUtils.resetAndTest(regexpNotWhitespace,String.valueOf(c));}  }
class C{  public static String fetchPin(String body){  int i=START_INDEX;  while (i < body.length()) {    if (body.charAt(i) == BODY_SEPARATOR) {      return body.substring(START_INDEX,i);    }    i++;  }  return body.substring(START_INDEX,i);}  }
class C{  protected Region(String name,String ui,boolean subregion){  this(name,subregion);  if (ui != null) {    getUItoRegionMap().put(ui,this);  }}  }
class C{  protected SQLException throwUnsupportedOption(String option) throws SQLException {  showUsage();  throw new SQLException("Unsupported option: " + option);}  }
class C{  private int searchMergeList(int a,int b){  if (mergeList == null) {    return 0;  } else {    int[] entry;    for (int i=0; i < mergeList.size(); i++) {      entry=mergeList.elementAt(i);      if ((entry[0] == a && entry[1] == b) || (entry[0] == b && entry[1] == a)) {        return entry[2];      }      if ((entry[2] == a && (entry[0] == b || entry[1] == b))) {        return entry[2];      }      if ((entry[2] == b && (entry[0] == a || entry[1] == a))) {        return entry[2];      }    }    return 0;  }}  }
class C{  protected void cleanup(ChannelHandlerContext ctx){  SMTPSession smtpSession=(SMTPSession)ctx.getAttachment();  if (smtpSession != null) {    LifecycleUtil.dispose(smtpSession.getAttachment(SMTPConstants.MAIL,State.Transaction));    LifecycleUtil.dispose(smtpSession.getAttachment(SMTPConstants.DATA_MIMEMESSAGE_STREAMSOURCE,State.Transaction));  }  super.cleanup(ctx);}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  super.onChangedAdded(object,changes);  if (changes.has("debug")) {    debug=changes.get("debug");    fireChange(PROP_DEBUG);  }  if (changes.has("metamorphosis")) {    metamorphosis=object.get("metamorphosis");    fireChange(PROP_METAMORPHOSIS);  }}  }
class C{  public void addTargetListener(String ns,String an,boolean isCSS,AnimationTargetListener l){  if (!isCSS) {    if (targetListeners == null) {      targetListeners=new DoublyIndexedTable();    }    LinkedList ll=(LinkedList)targetListeners.get(ns,an);    if (ll == null) {      ll=new LinkedList();      targetListeners.put(ns,an,ll);    }    ll.add(l);  }}  }
class C{  public boolean hasError(){  return HTTP_OK != this.status;}  }
class C{  public boolean containsAll(long[] array){  for (int i=array.length; i-- > 0; ) {    if (!contains(array[i])) {      return false;    }  }  return true;}  }
class C{  public boolean isValidCurrent(){  return isValidCurrent(RecurrenceUtil.now());}  }
class C{  public Hashtable(){  this(11,0.75f);}  }
class C{  public E removeLast(){  if (head == null) {    throw new NoSuchElementException("Nothing in List");  }  E value=last.value;  last=last.prev;  if (last != null) {    last.next=null;  } else {    head=null;  }  size--;  return value;}  }
class C{  public static Coordinate centroid(Coordinate a,Coordinate b,Coordinate c){  double x=(a.x + b.x + c.x) / 3;  double y=(a.y + b.y + c.y) / 3;  return new Coordinate(x,y);}  }
class C{  public final boolean hasMoreBytecodes(){  return bcIndex < bcLength;}  }
class C{  JarDepend(Depend depend){  _depend=depend;}  }
class C{  public static Date daysAfterNow(int numDays){  if (numDays <= 0) {    throw new IllegalArgumentException();  }  final Calendar cal=new GregorianCalendar();  cal.setTime(new Date());  cal.add(Calendar.DAY_OF_YEAR,numDays);  return cal.getTime();}  }
class C{  ParameterDefinition createOrUpdateProductParameterDefinition(String id,ParameterValueType valueType,String mandatory,String defaultValue,String minValue,String maxValue,String configurable,String modificationType) throws UpdateConstraintException, ImportException {  if (paramDef == null) {    createParameterDefinition(id,valueType,mandatory,defaultValue,minValue,maxValue,configurable,modificationType);  } else {    updateParameterDefinition(id,valueType,mandatory,defaultValue,minValue,maxValue,configurable,modificationType);  }  return paramDef;}  }
class C{  @TargetApi(Build.VERSION_CODES.KITKAT) public static Transition makeFadeTransition(){  return new Fade().excludeTarget(android.R.id.navigationBarBackground,true).excludeTarget(android.R.id.statusBarBackground,true);}  }
class C{  public InlineQueryResultLocation build(){  return new InlineQueryResultLocation(id,latitude,longitude,title,reply_markup,input_message_content,thumb_url,thumb_width,thumb_height);}  }
class C{  public void clearDiskCache(){  if (null != mFileCache) {    mFileCache.clearCache();  }}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  public static final void copy(InputStream in,OutputStream out,boolean closeIS,boolean closeOS) throws IOException {  try {    copy(in,out,0xffff);  }  finally {    if (closeIS)     closeEL(in);    if (closeOS)     closeEL(out);  }}  }
class C{  public void flushForTesting(){  getDiskStore().flushForTesting();}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  private static List<AccessorTuple> filterMissingApiFieldsAndEnrichExistingTuples(List<AccessorTuple> computedMissingApiFields,List<AccessorTuple> concreteAccessorTuples){  return computedMissingApiFields.stream().filter(null).collect(Collectors.toList());}  }
class C{  @Transactional public void voteDownArticle(final String userId,final String articleId) throws ServiceException {  try {    down(userId,articleId,Vote.DATA_TYPE_C_ARTICLE);  } catch (  final RepositoryException e) {    final String msg="User[id=" + userId + "] vote down an article[id="+ articleId+ "] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public void testInternalDTDSubset() throws Exception {  DocumentType expected=new DefaultDocumentType();  expected.setElementName("greeting");  expected.setInternalDeclarations(getInternalDeclarations());  assertSameDocumentType(expected,readDocument(XML_INTERNAL_FILE,true,false).getDocType());}  }
class C{  public static int binarySearch(byte[] array,byte value){  return binarySearch(array,0,array.length,value);}  }
class C{  protected HybridTimestampFactory(){  this(10);}  }
class C{  int generate(byte[] output,boolean predictionResistant){  if (R.length == 8) {    if (reseedCounter > BLOCK64_RESEED_MAX) {      return -1;    }    if (isTooLarge(output,BLOCK64_MAX_BITS_REQUEST / 8)) {      throw new IllegalArgumentException("Number of bits per request limited to " + BLOCK64_MAX_BITS_REQUEST);    }  } else {    if (reseedCounter > BLOCK128_RESEED_MAX) {      return -1;    }    if (isTooLarge(output,BLOCK128_MAX_BITS_REQUEST / 8)) {      throw new IllegalArgumentException("Number of bits per request limited to " + BLOCK128_MAX_BITS_REQUEST);    }  }  if (predictionResistant || V == null) {    V=entropySource.getEntropy();  }  int m=output.length / R.length;  for (int i=0; i < m; i++) {    engine.processBlock(DT,0,I,0);    process(R,I,V);    process(V,R,I);    System.arraycopy(R,0,output,i * R.length,R.length);    increment(DT);  }  int bytesToCopy=(output.length - m * R.length);  if (bytesToCopy > 0) {    engine.processBlock(DT,0,I,0);    process(R,I,V);    process(V,R,I);    System.arraycopy(R,0,output,m * R.length,bytesToCopy);    increment(DT);  }  reseedCounter++;  return output.length;}  }
class C{  public Builder serverId(int serverId){  this.innerServerId=serverId;  return this;}  }
class C{  public static double calculateSimilarity(List<Activity> activities1,List<Activity> activities2,double sameActivityTypePenalty,double sameActivityLocationPenalty,double actTimeParameter){  double simil=0.;  Iterator<Activity> it1=activities1.iterator();  Iterator<Activity> it2=activities2.iterator();  for (; it1.hasNext() && it2.hasNext(); ) {    Activity act1=it1.next();    Activity act2=it2.next();    if (act1.getType().equals(act2.getType())) {      simil+=sameActivityTypePenalty;    }    if (act1.getCoord().equals(act2.getCoord())) {      simil+=sameActivityLocationPenalty;    }    if (Double.isInfinite(act1.getEndTime()) && Double.isInfinite(act2.getEndTime())) {    } else {      double delta=Math.abs(act1.getEndTime() - act2.getEndTime());      simil+=actTimeParameter * Math.exp(-delta / (300 / Math.log(2)));    }  }  return simil;}  }
class C{  public void reset(){  typeSize=0;  pointSize=0;  dirty=true;}  }
class C{  static SecDnsCreateExtension validateSecDnsExtension(SecDnsCreateExtension secDnsCreate) throws EppException {  if (secDnsCreate == null) {    return null;  }  if (secDnsCreate.getDsData() == null) {    throw new DsDataRequiredException();  }  if (secDnsCreate.getMaxSigLife() != null) {    throw new MaxSigLifeNotSupportedException();  }  validateDsData(secDnsCreate.getDsData());  return secDnsCreate;}  }
class C{  public void unregisterResources(){  if (myContext != null && receiverRegistered) {synchronized (MqttAndroidClient.this) {      LocalBroadcastManager.getInstance(myContext).unregisterReceiver(this);      receiverRegistered=false;    }    if (bindedService) {      try {        myContext.unbindService(serviceConnection);        bindedService=false;      } catch (      IllegalArgumentException e) {      }    }  }}  }
class C{  protected void checkMetrics(){  Component host=getContainer();  Font f=host.getFont();  if (currentFont != f) {    currentFont=f;    metrics=getContainer().getFontMetrics(currentFont);    longestLine=null;    tabSize=getTabSize() * metrics.charWidth('m');  }}  }
class C{  public static X509Certificate generateSelfSignedCertificate(KeyPair pair,String dn) throws GeneralSecurityException, IOException {  PrivateKey privateKey=pair.getPrivate();  X509CertInfo info=new X509CertInfo();  Date from=new Date();  Date to=new Date(from.getTime() + 31536000000l);  CertificateValidity interval=new CertificateValidity(from,to);  BigInteger sn=new BigInteger(64,new SecureRandom());  X500Name owner=new X500Name(dn);  info.set(X509CertInfo.VALIDITY,interval);  info.set(X509CertInfo.SERIAL_NUMBER,new CertificateSerialNumber(sn));  info.set(X509CertInfo.SUBJECT,new CertificateSubjectName(owner));  info.set(X509CertInfo.ISSUER,new CertificateIssuerName(owner));  info.set(X509CertInfo.KEY,new CertificateX509Key(pair.getPublic()));  info.set(X509CertInfo.VERSION,new CertificateVersion(CertificateVersion.V3));  AlgorithmId algo=new AlgorithmId(AlgorithmId.md5WithRSAEncryption_oid);  info.set(X509CertInfo.ALGORITHM_ID,new CertificateAlgorithmId(algo));  X509CertImpl cert=new X509CertImpl(info);  cert.sign(privateKey,SIGNATURE_ALGORITHM);  algo=(AlgorithmId)cert.get(X509CertImpl.SIG_ALG);  info.set(CertificateAlgorithmId.NAME + "." + CertificateAlgorithmId.ALGORITHM,algo);  cert=new X509CertImpl(info);  cert.sign(privateKey,SIGNATURE_ALGORITHM);  return cert;}  }
class C{  private boolean providesHttpRequestMetrics(Class<?> c){  return implementsInterface(c,HTTP_SERVLET_REQUEST_CLASS,HTTP_REQUEST_WHITE_LIST,HTTP_REQUEST_BLACK_LIST);}  }
class C{  public static void addTest(Mutation mutation,TestChromosome test){  testMap.put(mutation,test);}  }
class C{  public static boolean isPageSuccessful(){  return false;}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer();  for (int i=0; i < data.length; i++) {    result.append((i == 0 ? "" : ",") + data[i]);  }  return result.toString();}  }
class C{  static int makeTag(final int fieldNumber,final int wireType){  return (fieldNumber << TAG_TYPE_BITS) | wireType;}  }
class C{  public AlertProcessor(MAlertProcessor model){  super(model,180);  m_model=model;  m_client=MClient.get(model.getCtx(),model.getAD_Client_ID());}  }
class C{  public BeanContextServicesSupport(BeanContextServices peer){  super(peer);}  }
class C{  public boolean eof(){  return _content.length <= _index;}  }
class C{  public boolean letsFibreGoOut(byte aSide,int aCoverID,int aCoverVariable,ICoverable aTileEntity){  return false;}  }
class C{  private void send(float sample){  if (mListener != null) {    mListener.receive(sample);  }}  }
class C{  private static Map<String,Integer> optionArgDefs(){  Map<String,Integer> optionArgDefs=new HashMap<>();  optionArgDefs.put("train",0);  optionArgDefs.put("dependencies",1);  optionArgDefs.put("sourceSentences",1);  optionArgDefs.put("targetSentences",1);  optionArgDefs.put("alignment",1);  optionArgDefs.put("classMap",1);  optionArgDefs.put("model",1);  optionArgDefs.put("devSourceSentences",1);  optionArgDefs.put("devTargetSentences",1);  optionArgDefs.put("devAlignment",1);  optionArgDefs.put("devDependencies",1);  return optionArgDefs;}  }
class C{  public static Quaternion createFromEuler(float pitch,float yaw,float roll){  pitch*=0.5;  yaw*=0.5;  roll*=0.5;  float sinPitch=MathUtils.sin(pitch);  float cosPitch=MathUtils.cos(pitch);  float sinYaw=MathUtils.sin(yaw);  float cosYaw=MathUtils.cos(yaw);  float sinRoll=MathUtils.sin(roll);  float cosRoll=MathUtils.cos(roll);  float cosPitchCosYaw=cosPitch * cosYaw;  float sinPitchSinYaw=sinPitch * sinYaw;  Quaternion q=new Quaternion();  q.x=sinRoll * cosPitchCosYaw - cosRoll * sinPitchSinYaw;  q.y=cosRoll * sinPitch * cosYaw + sinRoll * cosPitch * sinYaw;  q.z=cosRoll * cosPitch * sinYaw - sinRoll * sinPitch * cosYaw;  q.w=cosRoll * cosPitchCosYaw + sinRoll * sinPitchSinYaw;  return q;}  }
class C{  public static List<Trip> removeUnfinishedTrips(List<Trip> trips,List<Id<Person>> failedAgents){  List<Trip> finishedTrips=new LinkedList<>();  for (  Trip tempTrip : trips) {    if (!(tempTrip.endLinkId == null) && !tempTrip.purpose.equals("null") && !tempTrip.purpose.equals("stuck")) {      finishedTrips.add(tempTrip.clone());    } else {      if (failedAgents != null)       failedAgents.add(tempTrip.agentId);    }  }  return Collections.unmodifiableList(finishedTrips);}  }
class C{  @Override protected void onEnter(NativeEvent evt){  isEnter=true;  super.onEnter(evt);}  }
class C{  public AttachmentObject(AttachmentObject parent){  this.id=parent.getId();  this.projectId=parent.getProjectId();  this.name=parent.getName();  this.size=parent.getSize();  this.contentType=parent.getContentType();  this.creatorId=parent.getCreatorId();  this.attachId=parent.getAttachId();  this.attachType=parent.getAttachType();  this.created=parent.getCreated();  this.creatorName=parent.getCreatorName();  this.targetType=parent.getTargetType();  this.targetId=parent.getTargetId();  this.companyId=parent.getCompanyId();  this.deleted=parent.getDeleted();  this.creatorAvatar=parent.getCreatorAvatar();}  }
class C{  @Category(FlakyTest.class) @Test public void testQueryExecutionLocally() throws Exception {  setup(2);  final Host host=Host.getHost(0);  VM server1=host.getVM(0);  VM server2=host.getVM(1);  final int numberOfEntries=100;  server1.invoke("Create BridgeServer",null);  server1.invoke("createRegion",null);  server2.invoke("Create BridgeServer",null);  server2.invoke("createRegion",null);  server1.invoke("Create Bridge Server",null);  server2.invoke("Create Bridge Server",null);  server1.invoke("execute queries on Server",null);  server2.invoke("execute queries on Server",null);  stopServer(server1);  stopServer(server2);}  }
class C{  public void dispose(){  if (log.isDebugEnabled()) {    log.debug("dispose local");  }  super.dispose();}  }
class C{  @PostConstruct public void initApplication(){  if (env.getActiveProfiles().length == 0) {    log.warn("No Spring profile configured, running with default configuration");  } else {    log.info("Running with Spring profile(s) : {}",Arrays.toString(env.getActiveProfiles()));    Collection<String> activeProfiles=Arrays.asList(env.getActiveProfiles());    if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'dev' and 'prod' profiles at the same time.");    }    if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_CLOUD)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'dev' and 'cloud' profiles at the same time.");    }  }}  }
class C{  public void readData(DataInput din) throws IOException {  m_length=din.readUnsignedByte();  if (m_length < 2 || m_length > 255) {    return;  }  m_slaveId=din.readUnsignedByte();  m_status=din.readUnsignedByte();  m_data=new byte[m_length - 2];  if (m_length > 2) {    din.readFully(m_data,0,m_length - 2);  }}  }
class C{  protected boolean isFileExistsForGivenColumn(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier){  PathService pathService=CarbonCommonFactory.getPathService();  CarbonTablePath carbonTablePath=pathService.getCarbonTablePath(dictionaryColumnUniqueIdentifier.getColumnIdentifier(),carbonStorePath,dictionaryColumnUniqueIdentifier.getCarbonTableIdentifier());  String dictionaryFilePath=carbonTablePath.getDictionaryFilePath(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId());  String dictionaryMetadataFilePath=carbonTablePath.getDictionaryMetaFilePath(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId());  return CarbonUtil.isFileExists(dictionaryFilePath) && CarbonUtil.isFileExists(dictionaryMetadataFilePath);}  }
class C{  public static void putInt(int val,byte[] buf,int off){  assert off + 4 <= buf.length;  buf[off]=int0(val);  buf[off + 1]=int1(val);  buf[off + 2]=int2(val);  buf[off + 3]=int3(val);}  }
class C{  private List<Quote> downloadUrl(String urlParam) throws IOException, XmlPullParserException {  InputStream is=null;  try {    URL url=new URL(urlParam);    HttpURLConnection conn=(HttpURLConnection)url.openConnection();    conn.setReadTimeout(10000);    conn.setConnectTimeout(15000);    conn.setRequestMethod("GET");    conn.setDoInput(true);    conn.connect();    int response=conn.getResponseCode();    Log.d("Quotes_Generator","The response is: " + response);    if (response == 200) {      is=conn.getInputStream();      return readXML(is);    }  }  finally {    if (is != null) {      is.close();    }  }  return null;}  }
class C{  public Bindings add(String property,JList list){  registerPropertyChangeListener(list);  return add(new JListBinding(property,list));}  }
class C{  private void removeJarFiles(final String dirPath,final String[] jarNames) throws IOException {  if (jarNames != null) {    for (int i=0; i < jarNames.length; i++) {      File jarFile=new File(FilenameUtils.concat(dirPath,jarNames[i]));      if (jarFile.exists()) {        FileUtils.forceDelete(jarFile);      }    }  } else {    File dir=new File(dirPath);    String[] jarFileNames=dir.list(jarFileFilter);    if (jarFileNames.length != 0) {      File jarFileToBeDeleted;      for (      String jarFileName : jarFileNames) {        String fullPath=FilenameUtils.concat(dirPath,jarFileName);        jarFileToBeDeleted=new File(fullPath);        FileUtils.forceDelete(jarFileToBeDeleted);      }    }  }}  }
class C{  public boolean isAuthorized(Service service,ServiceDocument document,Operation op){  if (!this.isAuthorizationEnabled()) {    return true;  }  AuthorizationContext ctx=op.getAuthorizationContext();  if (ctx == null) {    return false;  }  if (ctx.isSystemUser()) {    return true;  }  if (document == null) {    Class<? extends ServiceDocument> clazz=service.getStateType();    try {      document=clazz.newInstance();    } catch (    InstantiationException|IllegalAccessException e) {      log(Level.SEVERE,"Unable to instantiate %s: %s",clazz.toString(),e.toString());      return false;    }    document.documentSelfLink=service.getSelfLink();    document.documentKind=Utils.buildKind(clazz);  }  ServiceDocumentDescription documentDescription=buildDocumentDescription(service);  QueryFilter queryFilter=ctx.getResourceQueryFilter(op.getAction());  if (queryFilter == null || !queryFilter.evaluate(document,documentDescription)) {    return false;  }  return true;}  }
class C{  @Override public boolean compareCount(int val1,int val2){  return val1 > val2;}  }
class C{  public void testEmpty(){  storedQueue.clear();  assertTrue(storedQueue.isEmpty());}  }
class C{  public int hashCode(){  return (usesShift) ? (~key) : key;}  }
class C{  Operation findBestArcToAdd(BayesNet bayesNet,Instances instances,Operation oBestOperation){  int nNrOfAtts=instances.numAttributes();  for (int iAttributeHead=0; iAttributeHead < nNrOfAtts; iAttributeHead++) {    if (bayesNet.getParentSet(iAttributeHead).getNrOfParents() < m_nMaxNrOfParents) {      for (int iAttributeTail=0; iAttributeTail < nNrOfAtts; iAttributeTail++) {        if (addArcMakesSense(bayesNet,instances,iAttributeHead,iAttributeTail)) {          Operation oOperation=new Operation(iAttributeTail,iAttributeHead,Operation.OPERATION_ADD);          if (m_Cache.get(oOperation) > oBestOperation.m_fDeltaScore) {            if (isNotTabu(oOperation)) {              oBestOperation=oOperation;              oBestOperation.m_fDeltaScore=m_Cache.get(oOperation);            }          }        }      }    }  }  return oBestOperation;}  }
class C{  public void process(){  if (isProcessed()) {    log.fine("@AlreadyProcessed@");    return;  }  MDepreciationWorkfile assetwk=getA_Depreciation_Workfile();  if (assetwk == null) {    throw new AssetException("@NotFound@ @A_Depreciation_Workfile_ID@");  }  String entryType=getA_Entry_Type();  if (MDepreciationExp.A_ENTRY_TYPE_Depreciation.equals(entryType)) {    checkExistsNotProcessedEntries(getCtx(),getA_Asset_ID(),getDateAcct(),getPostingType(),get_TrxName());    if (!assetwk.getAsset().getA_Asset_Status().equals(MAsset.A_ASSET_STATUS_Activated)) {      throw new AssetNotActiveException(assetwk.getAsset().get_ID());    }    setDateAcct(assetwk.getDateAcct());    assetwk.adjustAccumulatedDepr(getExpense(),getExpense_F(),false);  } else {  }  setProcessed(true);  updateFrom(assetwk);  saveEx();  assetwk.setA_Current_Period();  assetwk.saveEx();}  }
class C{  public static void load(final String bundleName,final ClassLoader loader,final Field[] fields){  final String[] variants=buildVariants(bundleName);  for (int i=variants.length; --i >= 0; ) {    InputStream input=(loader == null) ? ClassLoader.getSystemResourceAsStream(variants[i]) : loader.getResourceAsStream(variants[i]);    if (input == null)     continue;    try {      final MessagesProperties properties=new MessagesProperties(fields,bundleName);      properties.load(input);    } catch (    IOException e) {    } finally {      try {        input.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public DistinguishedNameException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  protected void replaceLogixManager(){  if (InstanceManager.getDefault(jmri.LogixManager.class).getClass().getName().equals(DefaultLogixManager.class.getName())) {    return;  }  if (InstanceManager.getNullableDefault(jmri.LogixManager.class) != null) {    ConfigureManager cmOD=InstanceManager.getNullableDefault(jmri.ConfigureManager.class);    if (cmOD != null) {      cmOD.deregister(InstanceManager.getDefault(jmri.LogixManager.class));    }  }  DefaultLogixManager pManager=DefaultLogixManager.instance();  InstanceManager.store(pManager,LogixManager.class);  ConfigureManager cmOD=InstanceManager.getNullableDefault(jmri.ConfigureManager.class);  if (cmOD != null) {    cmOD.registerConfig(pManager,jmri.Manager.LOGIXS);  }}  }
class C{  public boolean hasNext(){  return point != v2;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void assignNodeLocation(FXGNode node){  if (node != null) {    node.setStartLine(startLine);    node.setStartColumn(startColumn);    node.setEndLine(locator.getLineNumber());    node.setEndColumn(locator.getColumnNumber());  }}  }
class C{  @VisibleForTesting boolean onCreate(Context context){  if (!canAccess()) {    return false;  }  DatabaseHelper databaseHelper=new DatabaseHelper(context);  try {    db=databaseHelper.getWritableDatabase();  } catch (  SQLiteException e) {    Log.e(TAG,"Unable to open database for writing.",e);  }  return db != null;}  }
class C{  private String concatenate(int id,byte[] salt,HashAlgorithmConfig config,byte[] hash){  assert salt != null;  assert config != null;  assert hash != null;  String versionAsString=Integer.toHexString(CURRENT_VERSION);  String idAsString=Integer.toHexString(id);  String saltAsString=Base64.encode(salt);  String configAsString=configCoder.encode(config);  String hashAsString=Base64.encode(hash);  return versionAsString + HASH_DELIMITER + idAsString+ HASH_DELIMITER+ saltAsString+ HASH_DELIMITER+ configAsString+ HASH_DELIMITER+ hashAsString;}  }
class C{  public void fireActionEvent(ActionEvent ev){  if (listeners == null || listeners.size() == 0) {    return;  }  boolean isEdt=Display.getInstance().isEdt();  if (isEdt && listeners.size() == 1) {    ActionListener a=(ActionListener)listeners.get(0);    a.actionPerformed(ev);    return;  }  ActionListener[] array;synchronized (this) {    array=new ActionListener[listeners.size()];    int alen=array.length;    for (int iter=0; iter < alen; iter++) {      array[iter]=(ActionListener)listeners.get(iter);    }  }  if (isEdt) {    fireActionSync(array,ev);  } else {    actionListenerArray=true;    Runnable cl=new CallbackClass(array,ev);    if (blocking) {      Display.getInstance().callSeriallyAndWait(cl);    } else {      Display.getInstance().callSerially(cl);    }  }}  }
class C{  private boolean isNormalShutdown(final Throwable t){  return isNormalShutdown(resourceManager,t);}  }
class C{  public TechnicalServiceMultiSubscriptions(String message){  super(message);}  }
class C{  public SyncHttpClient(SchemeRegistry schemeRegistry){  super(schemeRegistry);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.983 -0400",hash_original_method="C0CBB028B302FA13274EDDF227B1F519",hash_generated_method="35C9FC921E493168D2F7BA1612BAA8DC") private void doCreate(FileEntry entry){  for (  FileAlterationListener listener : listeners) {    if (entry.isDirectory()) {      listener.onDirectoryCreate(entry.getFile());    } else {      listener.onFileCreate(entry.getFile());    }  }  FileEntry[] children=entry.getChildren();  for (  FileEntry aChildren : children) {    doCreate(aChildren);  }}  }
class C{  public static byte[] hashToBytes(char[] data,long seed){  if ((data == null) || (data.length == 0)) {    return null;  }  return toByteArray(hash(data,seed));}  }
class C{  public CoapClient(URI uri){  this(uri.toString());}  }
class C{  public static org.oscm.vo.VOTriggerProcess convertToApi(org.oscm.internal.vo.VOTriggerProcess oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOTriggerProcess newVO=new org.oscm.vo.VOTriggerProcess();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setActivationDate(oldVO.getActivationDate());  newVO.setReason(oldVO.getReason());  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.types.enumtypes.TriggerProcessStatus.class));  newVO.setTriggerDefinition(convertToApi(oldVO.getTriggerDefinition()));  newVO.setUser(convertToApi(oldVO.getUser()));  newVO.setTargetNames(oldVO.getTargetNames());  newVO.setParameter(oldVO.getParameter());  return newVO;}  }
class C{  public static int fixLighting(World world,Region selection,@Nullable FaweQueue queue,final FaweQueue.RelightMode mode){  final Vector bot=selection.getMinimumPoint();  final Vector top=selection.getMaximumPoint();  final int minX=bot.getBlockX() >> 4;  final int minZ=bot.getBlockZ() >> 4;  final int maxX=top.getBlockX() >> 4;  final int maxZ=top.getBlockZ() >> 4;  int count=0;  if (queue == null) {    queue=SetQueue.IMP.getNewQueue(world,true,false);  }  if (queue instanceof NMSMappedFaweQueue) {    final NMSMappedFaweQueue nmsQueue=(NMSMappedFaweQueue)queue;    NMSRelighter relighter=new NMSRelighter(nmsQueue);    for (int x=minX; x <= maxX; x++) {      for (int z=minZ; z <= maxZ; z++) {        relighter.addChunk(x,z,null,65535);        count++;      }    }    if (mode != FaweQueue.RelightMode.NONE) {      boolean sky=nmsQueue.hasSky();      if (sky) {        relighter.fixSkyLighting();      }      relighter.fixBlockLighting();    } else {      relighter.removeLighting();    }    relighter.sendChunks();  }  return count;}  }
class C{  boolean leafNodeNeedsBase(int par1){  return (double)par1 >= (double)this.heightLimit * 0.2D;}  }
class C{  public HessianFieldException(String message){  super(message);}  }
class C{  public void unloadChangePubKey(){  changePubKey=null;}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {  try {    write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));  } catch (  org.apache.thrift.TException te) {    throw new java.io.IOException(te);  }}  }
class C{  public BaleenPipeline(String name,String yaml,File source,CollectionProcessingEngine engine){  super(name,yaml,source,engine);}  }
class C{  private void paintCheckIconDisabledAndSelected(Graphics2D g,int width,int height){  Shape s=shapeGenerator.createCheckMark(0,0,width,height);  g.setPaint(iconDisabledSelected);  g.fill(s);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:20.856 -0500",hash_original_method="F527C5C3DD4F0176588A0C261AD76B7A",hash_generated_method="E21B90D8FFA2C73529233B2579E8CE52") private Message obtainCompleteMessage(int what){  pendingOperations++;  lastRelevantPoll=null;  needsPoll=true;  if (DBG_POLL)   log("obtainCompleteMessage: pendingOperations=" + pendingOperations + ", needsPoll="+ needsPoll);  return obtainMessage(what);}  }
class C{  public List<URI> volumeURIs(List<URI> uris,boolean delete,boolean remediate,ValCk... checks){  List<URI> remediatedURIs=new ArrayList<URI>();  List<Volume> volumes=dbClient.queryObject(Volume.class,uris);  List<Volume> remediatedVolumes=volumes(volumes,delete,remediate,checks);  for (  Volume volume : remediatedVolumes) {    remediatedURIs.add(volume.getId());  }  return remediatedURIs;}  }
class C{  public static String encodeString(String s){  s=StringUtil.gsub("\\","\\\\",s);  s=StringUtil.gsub("\t","\\t",s);  s=StringUtil.gsub("\n","\\n",s);  s=StringUtil.gsub("\r","\\r",s);  s=StringUtil.gsub("\b","\\b",s);  s=StringUtil.gsub("\f","\\f",s);  s=StringUtil.gsub("\"","\\\"",s);  s=StringUtil.gsub("'","\\'",s);  return s;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  String sql="UPDATE M_AttributeSet mas" + " SET IsInstanceAttribute='Y' " + "WHERE M_AttributeSet_ID=" + getM_AttributeSet_ID() + " AND IsInstanceAttribute='N'"+ " AND (IsSerNo='Y' OR IsLot='Y' OR IsGuaranteeDate='Y'"+ " OR EXISTS (SELECT * FROM M_AttributeUse mau"+ " INNER JOIN M_Attribute ma ON (mau.M_Attribute_ID=ma.M_Attribute_ID) "+ "WHERE mau.M_AttributeSet_ID=mas.M_AttributeSet_ID"+ " AND mau.IsActive='Y' AND ma.IsActive='Y'"+ " AND ma.IsInstanceAttribute='Y')"+ ")";  int no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("afterSave - Set Instance Attribute");  sql="UPDATE M_AttributeSet mas" + " SET IsInstanceAttribute='N' " + "WHERE M_AttributeSet_ID=" + getM_AttributeSet_ID() + " AND IsInstanceAttribute='Y'"+ "	AND IsSerNo='N' AND IsLot='N' AND IsGuaranteeDate='N'"+ " AND NOT EXISTS (SELECT * FROM M_AttributeUse mau"+ " INNER JOIN M_Attribute ma ON (mau.M_Attribute_ID=ma.M_Attribute_ID) "+ "WHERE mau.M_AttributeSet_ID=mas.M_AttributeSet_ID"+ " AND mau.IsActive='Y' AND ma.IsActive='Y'"+ " AND ma.IsInstanceAttribute='Y')";  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("afterSave - Reset Instance Attribute");  return success;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix05.class,args);}  }
class C{  void warn(String msg,Object[] args) throws TransformerException {  String fmsg=XSLMessages.createXPATHWarning(msg,args);  ErrorListener ehandler=this.getErrorListener();  if (null != ehandler) {    ehandler.warning(new TransformerException(fmsg,m_sourceLocator));  } else {    System.err.println(fmsg);  }}  }
class C{  @Nullable public static <T,C extends Collection<T>>C forceEmptyToNull(@Nullable C potentiallyEmpty){  return potentiallyEmpty == null || potentiallyEmpty.isEmpty() ? null : potentiallyEmpty;}  }
class C{  public boolean isSetString_thing(){  return this.string_thing != null;}  }
class C{  public CCLens3D(CGPoint pos,float r,ccGridSize gridSize,float d){  super(gridSize,d);  position=pos;  radius=r;  lensEffect=0.7f;  lastPosition=CGPoint.ccp(-1,-1);}  }
class C{  public static VasaAssociationObject parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  VasaAssociationObject object=new VasaAssociationObject();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"VasaAssociationObject".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (VasaAssociationObject)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    java.util.ArrayList list2=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","associatedId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(BaseStorageEntity.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","associatedId").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(BaseStorageEntity.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.setAssociatedId((BaseStorageEntity[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(BaseStorageEntity.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","entityId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list2.add(null);        reader.next();      } else {        list2.add(BaseStorageEntity.Factory.parse(reader));      }      boolean loopDone2=false;      while (!loopDone2) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone2=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","entityId").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list2.add(null);              reader.next();            } else {              list2.add(BaseStorageEntity.Factory.parse(reader));            }          } else {            loopDone2=true;          }        }      }      object.setEntityId((BaseStorageEntity[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(BaseStorageEntity.class,list2));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public SVGDescriptor toSVG(GraphicContext gc){  return toSVG(gc.getComposite());}  }
class C{  private void mult2(int modulus){  for (int i=0; i < coeffs.length; i++) {    coeffs[i]*=2;    coeffs[i]%=modulus;  }}  }
class C{  public InvalidPropetiesException(){  super();}  }
class C{  public double p(F f){  return featureProbs.getDouble(f);}  }
class C{  public OneToOneChatMessageDeleteTask(ChatServiceImpl chatService,InstantMessagingService imService,LocalContentResolver contentResolver,ContactId contact){  super(contentResolver,MessageData.CONTENT_URI,MessageData.KEY_MESSAGE_ID,MessageData.KEY_CONTACT,SELECTION_ONETOONE_CHATMESSAGES_BY_CHATID,contact.toString());  mChatService=chatService;  mImService=imService;  setAllAtOnce(true);}  }
class C{  public static long factorial(int n){  long nFac=1;  for (long i=n; i > 0; i--) {    nFac*=i;  }  return nFac;}  }
class C{  public SortField(String field,Type type,boolean reverse){  initFieldType(field,type);  this.reverse=reverse;}  }
class C{  public static WrappedByteBuffer wrap(byte[] bytes){  return new WrappedByteBuffer(bytes);}  }
class C{  public static boolean equal(File file1,File file2) throws IOException {  checkNotNull(file1);  checkNotNull(file2);  if (file1 == file2 || file1.equals(file2)) {    return true;  }  long len1=file1.length();  long len2=file2.length();  if (len1 != 0 && len2 != 0 && len1 != len2) {    return false;  }  return asByteSource(file1).contentEquals(asByteSource(file2));}  }
class C{  public static boolean allVolumesInUnamangedCGIngested(UnManagedConsistencyGroup unManagedCG){  return unManagedCG.getUnManagedVolumesMap().isEmpty();}  }
class C{  public void execute(){  Ccd ccd=new Ccd(getIndependenceTest());  ccd.setDepth(getParams().getInt("depth",-1));  ccd.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));  Graph graph=ccd.search();  setResultGraph(graph);  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else {    GraphUtils.circleLayout(graph,200,200,150);  }}  }
class C{  public void findAndInit(Iterator it){  while (it.hasNext()) {    findAndInit(it.next());  }}  }
class C{  public boolean isTransacted(){  if (ActiveMQRAConnectionRequestInfo.trace) {    ActiveMQRALogger.LOGGER.trace("isTransacted() " + transacted);  }  return transacted;}  }
class C{  @Category(FlakyTest.class) @Test public void test_FPAmetadataFetch(){  final Host host=Host.getHost(0);  VM server1=host.getVM(0);  VM server2=host.getVM(1);  VM server3=host.getVM(2);  VM server4=host.getVM(3);  Boolean simpleFPR=false;  final int portLocator=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  final String hostLocator=NetworkUtils.getServerHostName(server1.getHost());  final String locator=hostLocator + "[" + portLocator+ "]";  server3.invoke(null);  try {    List<FixedPartitionAttributes> fpaList=new ArrayList<FixedPartitionAttributes>();    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q1",true,3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q2",false,3));    Integer port1=(Integer)server1.invoke(null);    fpaList.clear();    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q3",true,3));    Integer port2=(Integer)server2.invoke(null);    fpaList.clear();    createClientWithLocator(hostLocator,portLocator);    putIntoPartitionedRegionsThreeQs();    getFromPartitionedRegionsFor3Qs();    Wait.pause(2000);    server1.invoke(null);    server2.invoke(null);    int totalBucketOnServer=0;    totalBucketOnServer+=(Integer)server1.invoke(null);    totalBucketOnServer+=(Integer)server2.invoke(null);    int currentRedundancy=1;    verifyMetadata(totalBucketOnServer,currentRedundancy);    updateIntoSinglePRFor3Qs();    fpaList.clear();    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q4",true,3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q2",true,3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q1",false,3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q3",false,3));    Integer port4=(Integer)server4.invoke(null);    Wait.pause(2000);    putIntoPartitionedRegions();    getFromPartitionedRegions();    Wait.pause(2000);    server1.invoke(null);    server2.invoke(null);    server4.invoke(null);    totalBucketOnServer=0;    totalBucketOnServer+=(Integer)server1.invoke(null);    totalBucketOnServer+=(Integer)server2.invoke(null);    totalBucketOnServer+=(Integer)server4.invoke(null);    updateIntoSinglePR();  }  finally {    server3.invoke(null);  }}  }
class C{  @LargeTest public void testEffectNullMediaItem() throws Exception {  boolean flagForException=false;  try {    mVideoEditorHelper.createEffectItem(null,"effect1",1000,4000,EffectColor.TYPE_COLOR,EffectColor.GREEN);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Effect with null MediaItem",flagForException);}  }
class C{  public void showSpecial(long timeoutMS){  show(timeoutMS);}  }
class C{  public void discardPartialRecord(){  partialRecord=null;}  }
class C{  private void updateContentDescription(Time time){  final int flags=DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_24HOUR;  String contentDescription=DateUtils.formatDateTime(getContext(),time.toMillis(false),flags);  setContentDescription(contentDescription);}  }
class C{  void paintToOffscreen(Graphics g,int x,int y,int w,int h,int maxX,int maxY){  try {    setFlag(ANCESTOR_USING_BUFFER,true);    if ((y + h) < maxY || (x + w) < maxX) {      setFlag(IS_PAINTING_TILE,true);    }    if (getFlag(IS_REPAINTING)) {      paint(g);    } else {      if (!rectangleIsObscured(x,y,w,h)) {        paintComponent(g);        paintBorder(g);      }      paintChildren(g);    }  }  finally {    setFlag(ANCESTOR_USING_BUFFER,false);    setFlag(IS_PAINTING_TILE,false);  }}  }
class C{  @Inject EntryUploaderImpl(EntryInserter entryInserter,EntryProvider entryProvider,EntryUpdater entryUpdater){  this.entryInserter=checkNotNull(entryInserter);  this.entryProvider=checkNotNull(entryProvider);  this.entryUpdater=checkNotNull(entryUpdater);}  }
class C{  public DeflaterEstimatorLz4(){}  }
class C{  public ControlFlowException(){  super(null,null);}  }
class C{  public boolean isHasMinutes(){  return hasMinutes;}  }
class C{  public void actionPerformed(ActionEvent e){  setup();  controller.reset();  if (computerGoesFirst) {    controller.playTurn();  }  if (computerPlaysSelf) {    int i=0;    while (controller.playTurn() == GameController.IN_PROGRESS) {      if (++i > 100) {        break;      }    }    int state=controller.getCurrentState();switch (state) {case GameController.DRAW:      applet.output("Game is drawn");    break;case GameController.X_WINS:  applet.output("X Wins!");break;case GameController.O_WINS:applet.output("O Wins!");break;}}applet.repaint();}  }
class C{  public static HttpURLConnection createDetectConnection(String url,int connectTimeout,String charset,String requestMethod,Map<String,String> headers) throws Exception {  RequestParam requestParam=new RequestParam(url,connectTimeout,charset);  requestParam.setRequestMethod(requestMethod);  requestParam.setHeaders(headers);  return createHttpUrlConnection(requestParam);}  }
class C{  public void persistConnection(Connection connection) throws PersistenceException {  SQLiteDatabase db=getWritableDatabase();  long newRowId=db.insert(TABLE_CONNECTIONS,null,getValues(connection));  db.close();  if (newRowId == -1) {    throw new PersistenceException("Failed to persist connection: " + connection.handle());  } else {    connection.assignPersistenceId(newRowId);  }}  }
class C{  protected void fireEscapingEvent(String name,String data) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_PI,name,data);  }}  }
class C{  public String toString(){  return this.name;}  }
class C{  public SshMeta(String commandLine,String userName,int sshPort,SshLoginType sshLoginType,String privKeyRelativePath,String password,boolean privKeyUsePassphrase,String passphrase,int sshConnectionTimeoutMillis,boolean runAsSuperUser){  super();  this.commandLine=commandLine;  this.userName=userName;  this.sshPort=sshPort;  this.sshLoginType=sshLoginType;  this.privKeyRelativePath=privKeyRelativePath;  this.password=password;  this.privKeyUsePassphrase=privKeyUsePassphrase;  this.passphrase=passphrase;  this.sshConnectionTimeoutMillis=sshConnectionTimeoutMillis;  this.runAsSuperUser=runAsSuperUser;}  }
class C{  public Segment(Vector3 a,Vector3 b){  this.a.set(a);  this.b.set(b);}  }
class C{  private void drawAccessibilityFocusedDrawableIfNeeded(Canvas canvas){  AccessibilityManager manager=AccessibilityManager.getInstance(mView.mContext);  if (!manager.isEnabled() || !manager.isTouchExplorationEnabled()) {    return;  }  if (mAccessibilityFocusedHost == null || mAccessibilityFocusedHost.mAttachInfo == null) {    return;  }  Drawable drawable=getAccessibilityFocusedDrawable();  if (drawable == null) {    return;  }  AccessibilityNodeProvider provider=mAccessibilityFocusedHost.getAccessibilityNodeProvider();  Rect bounds=mView.mAttachInfo.mTmpInvalRect;  if (provider == null) {    mAccessibilityFocusedHost.getBoundsOnScreen(bounds);  } else {    if (mAccessibilityFocusedVirtualView == null) {      return;    }    mAccessibilityFocusedVirtualView.getBoundsInScreen(bounds);  }  bounds.offset(-mAttachInfo.mWindowLeft,-mAttachInfo.mWindowTop);  bounds.intersect(0,0,mAttachInfo.mViewRootImpl.mWidth,mAttachInfo.mViewRootImpl.mHeight);  drawable.setBounds(bounds);  drawable.draw(canvas);}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (get(i) == MISSING_VALUE) {      count++;    }  }  return count;}  }
class C{  protected void decrementAmiSlaveProvision(DockerSlaveTemplate container){synchronized (provisionedImages) {    int currentProvisioning=0;    if (provisionedImages.containsKey(container)) {      currentProvisioning=provisionedImages.get(container);    }    provisionedImages.put(container,Math.max(currentProvisioning - 1,0));  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    System.out.println("Usage: java filename");    System.exit(1);  }  File file=new File(args[0]);  if (!file.exists()) {    System.out.println("File " + args[0] + " does not exist");    System.exit(2);  }  int characters=0;  int words=0;  int lines=0;  try (Scanner input=new Scanner(file)){    while (input.hasNext()) {      lines++;      String line=input.nextLine();      characters+=line.length();    }  }   try (Scanner input=new Scanner(file)){    while (input.hasNext()) {      String line=input.next();      words++;    }  }   System.out.println("File " + file.getName() + " has");  System.out.println(characters + " characters");  System.out.println(words + " words");  System.out.println(lines + " lines");}  }
class C{  public boolean isDepreciated(){  Object oo=get_Value(COLUMNNAME_IsDepreciated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void handleError(@NotNull Throwable throwable,@NotNull String remoteUrl,Notification notification){  String errorMessage=throwable.getMessage();  notification.setType(ERROR);  if (errorMessage == null) {    console.printError(constant.fetchFail(remoteUrl));    notification.setMessage(constant.fetchFail(remoteUrl));    return;  }  try {    errorMessage=dtoFactory.createDtoFromJson(errorMessage,ServiceError.class).getMessage();    if (errorMessage.equals("Unable get private ssh key")) {      console.printError(constant.messagesUnableGetSshKey());      notification.setMessage(constant.messagesUnableGetSshKey());      return;    }    console.printError(errorMessage);    notification.setMessage(errorMessage);  } catch (  Exception e) {    console.printError(errorMessage);    notification.setMessage(errorMessage);  }}  }
class C{  @Override public void updateClassifier(Instance instance) throws Exception {  if (!instance.classIsMissing()) {    if (m_Classifiers.length == 1) {      ((UpdateableClassifier)m_Classifiers[0]).updateClassifier(instance);      return;    }    for (int i=0; i < m_Classifiers.length; i++) {      if (m_Classifiers[i] != null) {        m_ClassFilters[i].input(instance);        Instance converted=m_ClassFilters[i].output();        if (converted != null) {          converted.dataset().setClassIndex(m_ClassAttribute.index());          ((UpdateableClassifier)m_Classifiers[i]).updateClassifier(converted);          if (m_Method == METHOD_1_AGAINST_1) {            m_SumOfWeights[i]+=converted.weight();          }        }      }    }  }}  }
class C{  private byte[] responseBodyBytes(final URLConnection connection){  try {    final InputStream inputStream=connection.getInputStream();    final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();    int bytesRead;    final byte[] bytes=new byte[16384];    while ((bytesRead=inputStream.read(bytes,0,bytes.length)) != -1) {      byteArrayOutputStream.write(bytes,0,bytesRead);    }    byteArrayOutputStream.flush();    return byteArrayOutputStream.toByteArray();  } catch (  IOException e) {    return new byte[0];  }}  }
class C{  private static int applyMaskPenaltyRule1Internal(ByteMatrix matrix,boolean isHorizontal){  int penalty=0;  int iLimit=isHorizontal ? matrix.getHeight() : matrix.getWidth();  int jLimit=isHorizontal ? matrix.getWidth() : matrix.getHeight();  byte[][] array=matrix.getArray();  for (int i=0; i < iLimit; i++) {    int numSameBitCells=0;    int prevBit=-1;    for (int j=0; j < jLimit; j++) {      int bit=isHorizontal ? array[i][j] : array[j][i];      if (bit == prevBit) {        numSameBitCells++;      } else {        if (numSameBitCells >= 5) {          penalty+=N1 + (numSameBitCells - 5);        }        numSameBitCells=1;        prevBit=bit;      }    }    if (numSameBitCells >= 5) {      penalty+=N1 + (numSameBitCells - 5);    }  }  return penalty;}  }
class C{  public void mouseReleased(MouseEvent ev){  if (!tryPopup(ev) && SwingUtilities.isLeftMouseButton(ev)) {    hmo.handleHeaderColumnReleased(ev.getPoint());  }}  }
class C{  public EffectWeightedRandomList add(int weight,@Nonnull IEffect effect){  effects.add(new WeightedEffect(weight,effect));  return this;}  }
class C{  void fatalError(String s){  error(program + ": " + s);}  }
class C{  public TraceItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isEnabledNot(Capability c){  return m_NotCapabilities.handles(c);}  }
class C{  public static Validator<CharSequence> iPv4Address(@NonNull final Context context,@StringRes final int resourceId){  return new IPv4AddressValidator(context,resourceId);}  }
class C{  public void writeLong(long v){  try {    dos.writeLong(v);  } catch (  Exception e) {    handleException(e);  }}  }
class C{  public final void log(String message){  log(null,0,message);}  }
class C{  public Instrumenter attachAdaptiveTimeContinuationCollector(){  includeAdaptiveTimeContinuation=true;  return this;}  }
class C{  public void zoomOutBoth(double x,double y){  Plot plot=this.chart.getPlot();  if (plot == null) {    return;  }  boolean savedNotify=plot.isNotify();  plot.setNotify(false);  zoomOutDomain(x,y);  zoomOutRange(x,y);  plot.setNotify(savedNotify);}  }
class C{  public void renameAttribute(){  DataSortedTableModel model;  String newName;  if (m_CurrentCol == -1) {    return;  }  model=(DataSortedTableModel)m_TableData.getModel();  if (model.getAttributeAt(m_CurrentCol) == null) {    return;  }  newName=ComponentHelper.showInputBox(getParent(),"Rename attribute...","Enter new Attribute name",model.getAttributeAt(m_CurrentCol).name());  if (newName == null) {    return;  }  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  model.renameAttributeAt(m_CurrentCol,newName);  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  public static boolean isDefaultScaleDownEnabled(){  return DEFAULT_SCALE_DOWN_ENABLED;}  }
class C{  public CancelException(String message){  super(message);}  }
class C{  public ByteString toByteString(){  BaggageMessage message=buildMessage();  return message == null ? ByteString.EMPTY : message.toByteString();}  }
class C{  public JCatalogTab(){  initComponents();  flowpanel=new JFlowPanel();  JScrollPane scroll=new JScrollPane(flowpanel);  scroll.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);  scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);  scroll.getVerticalScrollBar().setPreferredSize(new Dimension(35,35));  add(scroll,BorderLayout.CENTER);}  }
class C{  @Override public AgentAppEnvironmentView createEnvironmentView(){  return new CSPView();}  }
class C{  public boolean isServerTrusted(X509Certificate[] chain){  return (true);}  }
class C{  @Override public RectF evaluate(float fraction,RectF startValue,RectF endValue){  RectF rectF=new RectF(startValue.left + (int)((endValue.left - startValue.left) * fraction),startValue.top + (int)((endValue.top - startValue.top) * fraction),startValue.right + (int)((endValue.right - startValue.right) * fraction),startValue.bottom + (int)((endValue.bottom - startValue.bottom) * fraction));  return rectF;}  }
class C{  public synchronized void incrementSynchronizedBlock(){synchronized (this) {    this.total++;  }}  }
class C{  public static double shutterSpeedToExposureTime(double shutterSpeed){  return (float)(1 / Math.exp(shutterSpeed * Math.log(2)));}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public ConcurrentModificationException(){}  }
class C{  private PorterDuffColorFilter updateTintFilter(ColorStateList tint,PorterDuff.Mode tintMode){  if (tint == null || tintMode == null) {    return null;  }  final int color=tint.getColorForState(getState(),Color.TRANSPARENT);  return new PorterDuffColorFilter(color,tintMode);}  }
class C{  public void initializeScreenInfo(Activity activity){  DisplayMetrics metric=new DisplayMetrics();  activity.getWindowManager().getDefaultDisplay().getMetrics(metric);  mDensity=metric.density;  mDensityDpi=metric.densityDpi;  if (metric.heightPixels >= metric.widthPixels) {    screenWidthForPortrait=metric.widthPixels;    screenHeightForPortrait=metric.heightPixels;  } else {    screenWidthForPortrait=metric.heightPixels;    screenHeightForPortrait=metric.widthPixels;  }}  }
class C{  public boolean startsWith(String prefix){  return startsWith(prefix,0);}  }
class C{  public boolean isN4ObjectOnLeftWithDefSite(){  return isN4ObjectOnLeftWithDefSite;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:32.162 -0500",hash_original_method="01B7EFBCCE4449D378FBB0354733064C",hash_generated_method="557C53C56C5D392F3318C8E0C0B8F3E1") public void tunnelTarget(boolean secure,HttpParams params) throws IOException {  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker == null) || !this.tracker.isConnected()) {    throw new IllegalStateException("Connection not open.");  }  if (this.tracker.isTunnelled()) {    throw new IllegalStateException("Connection is already tunnelled.");  }  this.connection.update(null,tracker.getTargetHost(),secure,params);  this.tracker.tunnelTarget(secure);}  }
class C{  public <T>TypedListGeneratorBuilder<T> arrayListsOf(Source<T> source){  return new TypedListGeneratorBuilder<T>(source,Lists.arrayListCollector());}  }
class C{  public void testMoveDirectorySourceMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);  create(igfs,paths(DIR,DIR_NEW,SUBDIR_NEW),null);  igfs.rename(SUBSUBDIR,SUBDIR_NEW);  checkExist(igfs,SUBDIR);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,SUBSUBDIR.name()));  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  @Override public boolean onError(MediaPlayer mp,int what,int extra){  LogHelper.e(TAG,"Media player error: what=" + what + ", extra="+ extra);  if (mCallback != null) {    mCallback.onError("MediaPlayer error " + what + " ("+ extra+ ")");  }  return true;}  }
class C{  public CatchVariable createCatchVariable(){  CatchVariableImpl catchVariable=new CatchVariableImpl();  return catchVariable;}  }
class C{  private TElementary(){}  }
class C{  private static String toJson(Collection<? extends Entity> entities,boolean identifierOnly) throws EntityException, SerializationException {  if (entities == null) {    return new JSONObject().toString();  }  List<Database> databases=new ArrayList<>();  List<Table> tables=new ArrayList<>();  List<Partition> partitions=new ArrayList<>();  List<Partition> dummyPartitions=new ArrayList<>();  List<String> localDirectories=new ArrayList<>();  List<String> dfsDirectories=new ArrayList<>();  Map<Partition,String> partitionNames=new HashMap<>();  for (  Entity e : entities) {switch (e.getType()) {case DATABASE:      databases.add(e.getDatabase());    break;case TABLE:  tables.add(e.getTable().getTTable());break;case PARTITION:partitions.add(e.getPartition().getTPartition());partitionNames.put(e.getPartition().getTPartition(),e.getPartition().getName());break;case DUMMYPARTITION:dummyPartitions.add(e.getPartition().getTPartition());partitionNames.put(e.getPartition().getTPartition(),e.getPartition().getName());break;case LOCAL_DIR:try {localDirectories.add(e.getLocation().toString());} catch (Exception ex) {throw new EntityException(ex);}break;case DFS_DIR:try {dfsDirectories.add(e.getLocation().toString());} catch (Exception ex) {throw new EntityException(ex);}break;case UDF:LOG.info("Skipping logging of UDF type to audit log - " + "displayName: " + e.getUDF().getDisplayName());break;default :throw new EntityException("Unhandled type: " + e.getType() + " entity: "+ e);}}TSerializer serializer=new TSerializer(new TJSONProtocol.Factory());JSONArray jsonDatabases=new JSONArray();JSONArray jsonTables=new JSONArray();JSONArray jsonPartitions=new JSONArray();JSONArray jsonDummyPartitions=new JSONArray();JSONArray jsonLocalDirs=new JSONArray();JSONArray jsonDfsDirs=new JSONArray();JSONObject obj=new JSONObject();try {for (Database db : databases) {if (identifierOnly) {String jsonDatabase=String.format("%s",db.getName());jsonDatabases.put(jsonDatabase);} else {jsonDatabases.put(new JSONObject(serializer.toString(db)));}}for (Table t : tables) {if (identifierOnly) {String jsonTable=String.format("%s.%s",t.getDbName(),t.getTableName());jsonTables.put(jsonTable);} else {jsonTables.put(new JSONObject(serializer.toString(t)));}}for (Partition p : partitions) {if (identifierOnly) {String partitionName=String.format("%s.%s/%s",p.getDbName(),p.getTableName(),partitionNames.get(p));jsonPartitions.put(partitionName);} else {jsonPartitions.put(new JSONObject(serializer.toString(p)));}}for (Partition p : dummyPartitions) {if (identifierOnly) {String dummyPartitionJson=String.format("%s.%s/%s",p.getDbName(),p.getTableName(),partitionNames.get(p));jsonDummyPartitions.put(dummyPartitionJson);} else {jsonDummyPartitions.put(new JSONObject(serializer.toString(p)));}}for (String dir : localDirectories) {jsonLocalDirs.put(dir);}for (String dir : dfsDirectories) {jsonDfsDirs.put(dir);}if (jsonDatabases.length() > 0) {obj.put("databases",jsonDatabases);}if (jsonTables.length() > 0) {obj.put("tables",jsonTables);}if (jsonPartitions.length() > 0) {obj.put("partitions",jsonPartitions);}if (jsonDummyPartitions.length() > 0) {obj.put("dummy_partitions",jsonDummyPartitions);}if (jsonLocalDirs.length() > 0) {obj.put("local_directories",jsonLocalDirs);}if (jsonDfsDirs.length() > 0) {obj.put("dfs_directories",jsonDfsDirs);}} catch (TException|JSONException e) {throw new SerializationException(e);}return obj.toString();}  }
class C{  @Override public synchronized boolean startAll(){  HashMap<String,ConfModule> agents;  agents=status.getModulesMap();  if (agents == null) {    if (Cfg.DEBUG) {      Check.log(TAG + " Agents map null");    }    return false;  }  if (instances == null) {    if (Cfg.DEBUG) {      Check.log(TAG + " Running Agents map null");    }    return false;  }  final Iterator<String> it=agents.keySet().iterator();  while (it.hasNext()) {    final String key=it.next();    if (Cfg.DEBUG) {      Check.asserts(key != null,"null type");    }    final ConfModule conf=agents.get(key);    start(key);  }  return true;}  }
class C{  public LongPolynomial2 mult(LongPolynomial2 poly2){  int N=coeffs.length;  if (poly2.coeffs.length != N || numCoeffs != poly2.numCoeffs) {    throw new IllegalArgumentException("Number of coefficients must be the same");  }  LongPolynomial2 c=multRecursive(poly2);  if (c.coeffs.length > N) {    if (numCoeffs % 2 == 0) {      for (int k=N; k < c.coeffs.length; k++) {        c.coeffs[k - N]=(c.coeffs[k - N] + c.coeffs[k]) & 0x7FF0007FFL;      }      c.coeffs=Arrays.copyOf(c.coeffs,N);    } else {      for (int k=N; k < c.coeffs.length; k++) {        c.coeffs[k - N]=c.coeffs[k - N] + (c.coeffs[k - 1] >> 24);        c.coeffs[k - N]=c.coeffs[k - N] + ((c.coeffs[k] & 2047) << 24);        c.coeffs[k - N]&=0x7FF0007FFL;      }      c.coeffs=Arrays.copyOf(c.coeffs,N);      c.coeffs[c.coeffs.length - 1]&=2047;    }  }  c=new LongPolynomial2(c.coeffs);  c.numCoeffs=numCoeffs;  return c;}  }
class C{  public void removeMessage(String id){  messages.remove(id);  if (newestMessage != null && newestMessage.getId().equals(id)) {    newestMessage=null;  }  if (oldestMessage != null && oldestMessage.getId().equals(id)) {    oldestMessage=null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.189 -0400",hash_original_method="689C62989A677981FF2F1905F44BBBBB",hash_generated_method="570610B758B5186619E4BF994E47D9E3") public static void writeByteArrayToFile(File file,byte[] data,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    out.write(data);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  @Override public boolean equals(final Object obj){  if (obj instanceof FastDateFormat == false) {    return false;  }  final FastDateFormat other=(FastDateFormat)obj;  return printer.equals(other.printer);}  }
class C{  public BillingAdapterNotFoundException(Object[] params){  super(params);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>(2);  result.addElement(new Option("\tThe regular expression to match the attribute names against.\n" + "\t(default: " + DEFAULT_EXPRESSION + ")","E",1,"-E <regular expression>"));  result.addElement(new Option("\tFlag for inverting the matching sense. If set, attributes are kept\n" + "\tinstead of deleted.\n" + "\t(default: off)","V",0,"-V"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public boolean isExtern(){  return extern;}  }
class C{  @Override public boolean equals(Object launchSession){  return super.equals(launchSession);}  }
class C{  public boolean isDrawn(){  return drawn;}  }
class C{  private void injectProvisionedCapacity(final Stat stat,final Map<String,Object> keyMap){  final DbClient dbClient=(DbClient)keyMap.get(VNXFileConstants.DBCLIENT);  try {    final FileShare fileObj=dbClient.queryObject(FileShare.class,stat.getResourceId());    _logger.info("injectProvisioned Capacity existing {} from File System {}",stat.getProvisionedCapacity(),fileObj.getCapacity());    stat.setProvisionedCapacity(fileObj.getCapacity());  } catch (  final Exception e) {    _logger.error("No FileShare found using resource {}",stat.getResourceId());  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.EXECUTION_REGION__DEEP_ENTER_SEQUENCE:    setDeepEnterSequence((Sequence)newValue);  return;case SexecPackage.EXECUTION_REGION__SHALLOW_ENTER_SEQUENCE:setShallowEnterSequence((Sequence)newValue);return;case SexecPackage.EXECUTION_REGION__HISTORY_VECTOR:setHistoryVector((StateVector)newValue);return;case SexecPackage.EXECUTION_REGION__NODES:getNodes().clear();getNodes().addAll((Collection<? extends ExecutionNode>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  void handleAlgorithm(ParsedDirective pd) throws SaslException {  if (null != m_algorithm)   throw new SaslException("Too many algorithm directives.");  m_algorithm=pd.getValue();  if (!"md5-sess".equals(m_algorithm))   throw new SaslException("Invalid algorithm directive value: " + m_algorithm);}  }
class C{  private void pruneScrapViews(){  final int maxViews=activeViews.length;  final int viewTypeCount=this.viewTypeCount;  final SparseArray<View>[] scrapViews=this.scrapViews;  for (int i=0; i < viewTypeCount; ++i) {    final SparseArray<View> scrapPile=scrapViews[i];    int size=scrapPile.size();    final int extras=size - maxViews;    size--;    for (int j=0; j < extras; j++) {      scrapPile.remove(scrapPile.keyAt(size--));    }  }}  }
class C{  @Override public long ramBytesUsed(){  return (long)file.numBuffers() * (long)BUFFER_SIZE;}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public org.dom4j.Attribute createAttribute(Element elem,Attribute attr){  return factory.createAttribute(elem,createQName(attr.getName()),attr.getValue());}  }
class C{  private int readCodepoint(){  @SuppressWarnings("hiding") String css=this.css;  char ch=css.charAt(pos);  if (Character.isHighSurrogate(ch) && pos + 1 < cssLimit) {    char next=css.charAt(pos + 1);    if (Character.isLowSurrogate(next)) {      ++pos;      return 0x10000 + (((ch - 0xd800) << 10) | (next - 0xdc00));    }  }  return ch;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:16.639 -0400",hash_original_method="A615451C1EE7AA4EA688C4592F92E595",hash_generated_method="D16B2A7B7A668BE0DFD90FBBC3CACBF7") public void addSubjectAlternativeName(int tag,byte[] name) throws IOException {  GeneralName alt_name=new GeneralName(tag,name);  if (subjectAltNames == null) {    subjectAltNames=new ArrayList[9];  }  if (subjectAltNames[tag] == null) {    subjectAltNames[tag]=new ArrayList<GeneralName>();  }  subjectAltNames[tag].add(alt_name);}  }
class C{  private void init(Context context,AttributeSet attrs,int defStyleAttr){  defaultShapeWidth=dp2px(4);  defaultShapeRadius=dp2px(7);  paint=new Paint(Paint.ANTI_ALIAS_FLAG);  paintShadow=new Paint(Paint.ANTI_ALIAS_FLAG);  setLayerType(LAYER_TYPE_SOFTWARE,paintShadow);  shadowWidth=dp2px(2);  paintShadow.setShadowLayer(shadowWidth,0.0f,dp2px(1),Color.parseColor("#66000000"));  TypedArray attributes=context.obtainStyledAttributes(attrs,R.styleable.OpAnimationView,defStyleAttr,0);  setBackgroundColor(attributes.getColor(R.styleable.OpAnimationView_backgroundColor,Color.parseColor("#FF4081")));  setShapeColor(attributes.getColor(R.styleable.OpAnimationView_shapeColor,Color.parseColor("#ffffff")));  shapeWidth=attributes.getDimensionPixelOffset(R.styleable.OpAnimationView_shapeWidth,defaultShapeWidth);  shapeRadius=attributes.getDimensionPixelOffset(R.styleable.OpAnimationView_shapeRadius,defaultShapeRadius);  setShapeWidth(shapeWidth);  setShapeRadius(shapeRadius);  attributes.recycle();}  }
class C{  public DefaultComboBoxModel(final E items[]){  objects=new Vector<E>(items.length);  int i, c;  for (i=0, c=items.length; i < c; i++)   objects.addElement(items[i]);  if (getSize() > 0) {    selectedObject=getElementAt(0);  }}  }
class C{  public static void clearPersistedReplicaFlags(IngestionRequestContext requestContext,List<Volume> volumes,Set<DataObject> updatedObjects,DbClient dbClient){  for (  Volume volume : volumes) {    if (!Volume.PersonalityTypes.METADATA.toString().equals(volume.getPersonality())) {      clearFullCopiesFlags(requestContext,volume,updatedObjects,dbClient);      clearMirrorsFlags(requestContext,volume,updatedObjects,dbClient);      clearSnapshotsFlags(requestContext,volume,updatedObjects,dbClient);      clearSnapshotSessionsFlags(volume,updatedObjects,dbClient);      clearAssociatedVolumesReplicaFlags(requestContext,volume,updatedObjects,dbClient);      volume.clearInternalFlags(BlockIngestOrchestrator.INTERNAL_VOLUME_FLAGS);    }  }}  }
class C{  public AnalogChebyshevII(int order,double epsilon){  super();  double alpha=(1.0 + Math.sqrt(1.0 + epsilon * epsilon)) / epsilon;  double p=Math.pow(alpha,1.0 / order);  double a=0.5 * (p - 1 / p);  double b=0.5 * (p + 1 / p);  System.out.println("alpha: " + alpha);  System.out.println("p:     " + p);  System.out.println("a:     " + a);  System.out.println("b:     " + b);  int nRealPoles=order - 2 * (order / 2);  int nComplexPolePairs=order / 2;  int nPoles=nRealPoles + 2 * nComplexPolePairs;  if (nRealPoles == 1) {    double[] td={1.0 / a,1.0};    addSection(new Rational(new Polynomial(1.0),new Polynomial(td)));  }  double dAngle=Math.PI / nPoles;  for (int i=0; i < nComplexPolePairs; i++) {    double angle=-Math.PI / 2 + dAngle / 2 * (1 + nRealPoles) + i * dAngle;    Complex pole=Complex.divide(1.0,new Complex(a * Math.sin(angle),b * Math.cos(angle)));    double[] td={pole.real() * pole.real() + pole.imag() * pole.imag(),-2 * pole.real(),1.0};    double zeroimag=1.0 / Math.cos((2 * i + 1) * Math.PI / (2 * order));    double[] tn={zeroimag * zeroimag,0.0,1.0};    addSection(new Rational(new Polynomial(tn),new Polynomial(td)));  }  double DCvalue=evaluate(0.0).abs();  sections.get(0).timesEquals(1.0 / DCvalue);}  }
class C{  private static void writeToQueue(Ignite ignite) throws IgniteException {  final String queueName=queue.name();  ignite.compute().broadcast(new QueueClosure(queueName,true));  System.out.println("Queue size after writing [expected=" + ignite.cluster().nodes().size() * RETRIES + ", actual=" + queue.size() + ']');  System.out.println("Iterate over queue.");  for (  String item : queue)   System.out.println("Queue item: " + item);}  }
class C{  @Override protected <T extends Number>double[] doPredict(Collection<T> values,int numPredictions){  return next(values,numPredictions);}  }
class C{  private boolean endsWith(char s[],int len,String suffix){  final int suffixLen=suffix.length();  if (suffixLen > len)   return false;  for (int i=suffixLen - 1; i >= 0; i--)   if (s[len - (suffixLen - i)] != suffix.charAt(i))   return false;  return true;}  }
class C{  public boolean ready() throws IOException {  return false;}  }
class C{  @RequestMapping(value="/activate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> activateAccount(@RequestParam(value="key") String key){  return userService.activateRegistration(key).map(null).orElse(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));}  }
class C{  @SuppressWarnings("unchecked") public synchronized E pop(){  if (elementCount == 0) {    throw new EmptyStackException();  }  final int index=--elementCount;  final E obj=(E)elementData[index];  elementData[index]=null;  modCount++;  return obj;}  }
class C{  public static PluginsCollectionConfig fromXml(final InputStream toConvert) throws JAXBException {  Unmarshaller stringUnmarshaller=getUnmarshaller();  return (PluginsCollectionConfig)stringUnmarshaller.unmarshal(toConvert);}  }
class C{  protected static byte[] hkdfExpand(byte[] ikm,byte[] salt,byte[] info,int length) throws InvalidKeyException, NoSuchAlgorithmException {  HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest());  hkdf.init(new HKDFParameters(ikm,salt,info));  byte[] okm=new byte[length];  hkdf.generateBytes(okm,0,length);  return okm;}  }
class C{  public static boolean equals(Session session,Value xv,Value yv){  xv=safeValue(xv,Isolate.DEFAULT_ID);  yv=safeValue(yv,Isolate.DEFAULT_ID);  Object x=xv.getValueAsObject();  Object y=yv.getValueAsObject();  if (xv.getType() == yv.getType()) {    if (x == Value.UNDEFINED)     return true;    if (x == null)     return true;    if (x instanceof Double) {      double dx=((Double)x).doubleValue();      double dy=((Double)y).doubleValue();      return dx == dy;    }    if (x instanceof String || x instanceof Boolean)     return x.equals(y);    if (xv.getId() != -1 || yv.getId() != -1)     return xv.getId() == yv.getId();    return false;  } else {    if (x == null && y == Value.UNDEFINED)     return true;    if (x == Value.UNDEFINED && y == null)     return true;    if (x instanceof Double && y instanceof String) {      double dx=((Double)x).doubleValue();      double dy=toNumber(session,yv);      return dx == dy;    }    if (x instanceof String && y instanceof Double) {      double dx=toNumber(session,xv);      double dy=((Double)y).doubleValue();      return dx == dy;    }    if (x instanceof Boolean)     return equals(session,DValue.forPrimitive(new Double(toNumber(session,xv)),xv.getIsolateId()),yv);    if (y instanceof Boolean)     return equals(session,xv,DValue.forPrimitive(new Double(toNumber(session,yv)),xv.getIsolateId()));    if ((x instanceof String || x instanceof Double) && yv.getType() == VariableType.OBJECT) {      return equals(session,xv,toPrimitive(session,yv,null,yv.getIsolateId()));    }    if (xv.getType() == VariableType.OBJECT && (y instanceof String || y instanceof Double)) {      return equals(session,toPrimitive(session,xv,null,xv.getIsolateId()),yv);    }    return false;  }}  }
class C{  protected final boolean headStarved(int arity){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(arity == queue.getArity());  if (tail.NE(tailBufferEnd)) {    head=normalizeTail(arity).plus(BYTES_IN_ADDRESS);    tail=Deque.TAIL_INITIAL_VALUE;    tailBufferEnd=Deque.TAIL_INITIAL_VALUE;    return false;  }  head=queue.dequeueAndWait(arity);  return (head.EQ(Deque.HEAD_INITIAL_VALUE) || bufferOffset(head).isZero());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:11.154 -0500",hash_original_method="D279ABCEA3115671095B1C76CF272D07",hash_generated_method="E3C18E6A880457434E2503225DBCC1E0") public boolean hasMimeType(String mimeType){  return MimeUtils.hasMimeType(mimeType);}  }
class C{  public boolean isConfidentialInfo(){  Object oo=get_Value(COLUMNNAME_IsConfidentialInfo);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public QueryBuilder<T,ID> orderByRaw(String rawSql){  return orderByRaw(rawSql,(ArgumentHolder[])null);}  }
class C{  static TypeToken<?> fromSuperclassTypeParameter(Class<?> subclass){  return new SimpleTypeToken<Object>(subclass);}  }
class C{  @Override public void addParameter(String type,Map<String,Object> processVariables,String uuidElement,Map<String,String> emailParameter) throws MissingParameterException {  CnATreeElement element=getRemindService().retrieveElement(uuidElement,RetrieveInfo.getPropertyInstance());  if (element == null) {    throw new MissingParameterException("Obejct was not found, UUID is: " + uuidElement);  }  String title=element.getTitle();  String taskTitle=getTaskService().loadTaskTitle(type,processVariables);  String taskTitleHtml=taskTitle;  String taskDescription=getTaskService().loadTaskDescription(type,processVariables);  if (isHtml()) {    title=replaceSpecialChars(title);    taskDescription=replaceSpecialChars(taskDescription);    taskTitleHtml=replaceSpecialChars(taskTitle);  }  emailParameter.put(TEMPLATE_TASK_DESCRIPTION,taskDescription);  emailParameter.put(TEMPLATE_ELEMENT_TITLE,title);  emailParameter.put(TEMPLATE_TASK_TITLE,taskTitleHtml);  emailParameter.put(IRemindService.TEMPLATE_SUBJECT,Messages.getString("IndividualDeadlineAssigneeEmailHandler.1",taskTitle));}  }
class C{  public FileResource createSignaturesFile(){  return addSignaturesResource(new FileResource());}  }
class C{  public JavaMethod export(JavaClass source,JavaClass target){  JavaMethod method=new JavaMethod(_loader);  method.setName(_name);  method.setDescriptor(_descriptor);  method.setAccessFlags(_accessFlags);  target.getConstantPool().addUTF8(_name);  target.getConstantPool().addUTF8(_descriptor);  for (int i=0; i < _attributes.size(); i++) {    Attribute attr=_attributes.get(i);    method.addAttribute(attr.export(source,target));  }  return method;}  }
class C{  private void insertBucket(int index,long start){  if (bucketCount >= bucketStart.length) {    final int newLength=Math.max(bucketStart.length,10) * 3 / 2;    bucketStart=Arrays.copyOf(bucketStart,newLength);    if (activeTime != null)     activeTime=Arrays.copyOf(activeTime,newLength);    if (rxBytes != null)     rxBytes=Arrays.copyOf(rxBytes,newLength);    if (rxPackets != null)     rxPackets=Arrays.copyOf(rxPackets,newLength);    if (txBytes != null)     txBytes=Arrays.copyOf(txBytes,newLength);    if (txPackets != null)     txPackets=Arrays.copyOf(txPackets,newLength);    if (operations != null)     operations=Arrays.copyOf(operations,newLength);  }  if (index < bucketCount) {    final int dstPos=index + 1;    final int length=bucketCount - index;    System.arraycopy(bucketStart,index,bucketStart,dstPos,length);    if (activeTime != null)     System.arraycopy(activeTime,index,activeTime,dstPos,length);    if (rxBytes != null)     System.arraycopy(rxBytes,index,rxBytes,dstPos,length);    if (rxPackets != null)     System.arraycopy(rxPackets,index,rxPackets,dstPos,length);    if (txBytes != null)     System.arraycopy(txBytes,index,txBytes,dstPos,length);    if (txPackets != null)     System.arraycopy(txPackets,index,txPackets,dstPos,length);    if (operations != null)     System.arraycopy(operations,index,operations,dstPos,length);  }  bucketStart[index]=start;  setLong(activeTime,index,0L);  setLong(rxBytes,index,0L);  setLong(rxPackets,index,0L);  setLong(txBytes,index,0L);  setLong(txPackets,index,0L);  setLong(operations,index,0L);  bucketCount++;}  }
class C{  @RequestMapping(value="/templates/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public void delete(@PathVariable Long id){  log.debug("REST request to delete template : {}",id);  templateRepository.delete(id);}  }
class C{  public ConsulTopologyFraction(){  this.url=DEFAULT_URL;}  }
class C{  public void simulateMouseOver(){  findElement();  String mouseOverScript="if(document.createEvent){var evObj = document.createEvent('MouseEvents');evObj.initEvent('mouseover', true, false); arguments[0].dispatchEvent(evObj);} else if(document.createEventObject) { arguments[0].fireEvent('onmouseover');}";  JavascriptExecutor js=(JavascriptExecutor)driver;  js.executeScript(mouseOverScript,element);}  }
class C{  public static PriorityAttribute createPriorityAttribute(long priority) throws IllegalArgumentException {  PriorityAttribute attribute=new PriorityAttribute();  attribute.setPriority(priority);  return attribute;}  }
class C{  public void storeDefaults(String key,String defaultValue,String[] possibleValues){  Defaults defaults=new Defaults(defaultValue,possibleValues);  mDefaultsInternalStore.put(key,defaults);}  }
class C{  public GeneralPath(Shape shape){  this(WIND_NON_ZERO,BUFFER_SIZE);  if (shape.getClass() == GeneralPath.class) {    setPath((GeneralPath)shape,null);  } else {    PathIterator p=shape.getPathIterator();    setWindingRule(p.getWindingRule());    append(p,false);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public DistributionException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean hasNext(){  if (prefetch || isSortTempFileCompressionEnabled) {    return this.prefetchRecordsProceesed < this.entryCount;  }  return this.numberOfObjectRead < this.entryCount;}  }
class C{  private ValueSource(DomainConfigManager domainConfigManager,DataTableColumn mainDataTableColumn,AggregationFunctionType aggregationFunctionType,boolean grouped,int Id){  this.domainConfigManager=domainConfigManager;  this.Id=Id;  this.dataTableColumnMap.put(SeriesUsageType.MAIN_SERIES,mainDataTableColumn);  setAggregationFunction(SeriesUsageType.MAIN_SERIES,aggregationFunctionType);  setAggregationFunction(SeriesUsageType.INDICATOR_1,AggregationFunctionType.standard_deviation);  setAggregationFunction(SeriesUsageType.INDICATOR_2,AggregationFunctionType.standard_deviation);  aggregationWindowing.addAggregationWindowingListener(this);  format=new SeriesFormat();  format.addChangeListener(this);  setUseDomainGrouping(grouped);  this.setAutoNaming(true);}  }
class C{  private void animateOffset(final V child,final int offset,boolean forceAnimation,boolean withAnimation){  if (!behaviorTranslationEnabled && !forceAnimation) {    return;  }  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {    ensureOrCancelObjectAnimation(child,offset,withAnimation);    translationObjectAnimator.start();  } else {    ensureOrCancelAnimator(child,withAnimation);    translationAnimator.translationY(offset).start();  }}  }
class C{  public FastObjectGridPortrayal2D(boolean immutableField){  setImmutableField(immutableField);}  }
class C{  public boolean scanBottomRow(Coord4D start){  ForgeDirection back=MekanismUtils.getBack(facing);  Coord4D current=start;  for (int i=1; i <= 4; i++) {    TileEntity tile=current.getTileEntity(worldObj);    if (!addTankPart(tile)) {      return false;    }    current=current.getFromSide(back);  }  return true;}  }
class C{  public void onBackPressed(){  UiThreadUtil.assertOnUiThread();  ReactContext reactContext=mCurrentReactContext;  if (mCurrentReactContext == null) {    FLog.w(ReactConstants.TAG,"Instance detached from instance manager");    invokeDefaultOnBackPressed();  } else {    DeviceEventManagerModule deviceEventManagerModule=Assertions.assertNotNull(reactContext).getNativeModule(DeviceEventManagerModule.class);    deviceEventManagerModule.emitHardwareBackPressed();  }}  }
class C{  protected void unhandledMessageReceived(OFMessage m){  counters.unhandledMessage.increment();  if (log.isDebugEnabled()) {    String msg=getSwitchStateMessage(m,"Ignoring unexpected message");    log.debug(msg);  }}  }
class C{  public PseudoTcpSocketImpl(long conv_id,String local_ip,int local_port) throws SocketException, UnknownHostException {  this(conv_id,new DatagramSocket(local_port,InetAddress.getByName(local_ip)));}  }
class C{  protected static Set processCRLF(X509CRL crl,Object cert,X509Certificate defaultCRLSignCert,PublicKey defaultCRLSignKey,ExtendedPKIXParameters paramsPKIX,List certPathCerts) throws AnnotatedException {  X509CertStoreSelector selector=new X509CertStoreSelector();  try {    byte[] issuerPrincipal=CertPathValidatorUtilities.getIssuerPrincipal(crl).getEncoded();    selector.setSubject(issuerPrincipal);  } catch (  IOException e) {    throw new AnnotatedException("Subject criteria for certificate selector to find issuer certificate for CRL could not be set.",e);  }  Collection coll;  try {    coll=CertPathValidatorUtilities.findCertificates(selector,paramsPKIX.getStores());    coll.addAll(CertPathValidatorUtilities.findCertificates(selector,paramsPKIX.getAdditionalStores()));    coll.addAll(CertPathValidatorUtilities.findCertificates(selector,paramsPKIX.getCertStores()));  } catch (  AnnotatedException e) {    throw new AnnotatedException("Issuer certificate for CRL cannot be searched.",e);  }  coll.add(defaultCRLSignCert);  Iterator cert_it=coll.iterator();  List validCerts=new ArrayList();  List validKeys=new ArrayList();  while (cert_it.hasNext()) {    X509Certificate signingCert=(X509Certificate)cert_it.next();    if (signingCert.equals(defaultCRLSignCert)) {      validCerts.add(signingCert);      validKeys.add(defaultCRLSignKey);      continue;    }    try {      CertPathBuilder builder=CertPathBuilder.getInstance("PKIX",BouncyCastleProvider.PROVIDER_NAME);      selector=new X509CertStoreSelector();      selector.setCertificate(signingCert);      ExtendedPKIXParameters temp=(ExtendedPKIXParameters)paramsPKIX.clone();      temp.setTargetCertConstraints(selector);      ExtendedPKIXBuilderParameters params=(ExtendedPKIXBuilderParameters)ExtendedPKIXBuilderParameters.getInstance(temp);      if (certPathCerts.contains(signingCert)) {        params.setRevocationEnabled(false);      } else {        params.setRevocationEnabled(true);      }      List certs=builder.build(params).getCertPath().getCertificates();      validCerts.add(signingCert);      validKeys.add(CertPathValidatorUtilities.getNextWorkingKey(certs,0));    } catch (    CertPathBuilderException e) {      throw new AnnotatedException("Internal error.",e);    }catch (    CertPathValidatorException e) {      throw new AnnotatedException("Public key of issuer certificate of CRL could not be retrieved.",e);    }catch (    Exception e) {      throw new RuntimeException(e.getMessage());    }  }  Set checkKeys=new HashSet();  AnnotatedException lastException=null;  for (int i=0; i < validCerts.size(); i++) {    X509Certificate signCert=(X509Certificate)validCerts.get(i);    boolean[] keyusage=signCert.getKeyUsage();    if (keyusage != null && (keyusage.length < 7 || !keyusage[CRL_SIGN])) {      lastException=new AnnotatedException("Issuer certificate key usage extension does not permit CRL signing.");    } else {      checkKeys.add(validKeys.get(i));    }  }  if (checkKeys.isEmpty() && lastException == null) {    throw new AnnotatedException("Cannot find a valid issuer certificate.");  }  if (checkKeys.isEmpty() && lastException != null) {    throw lastException;  }  return checkKeys;}  }
class C{  private void addFeature(JsonNode feature,int index){  PointFeature feat=null;  try {    feat=PointFeature.fromJsonNode(feature);  } catch (  EmptyPolygonException e) {    LOG.warn("Empty MultiPolygon, skipping.");    return;  }catch (  UnsupportedGeometryException e) {    LOG.warn(e.message);    return;  }  if (feat == null) {    return;  }  addFeature(feat,index);}  }
class C{  public cudaPos(long x,long y,long z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  @DSComment("GUI, dialog") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:26.487 -0500",hash_original_method="8FAA759F9028DD0FC2323799369D6711",hash_generated_method="5C6D90FF7F0EA4F4D76354EF83F7E041") public void show(FragmentManager manager,String tag){  mDismissed=false;  mShownByMe=true;  FragmentTransaction ft=manager.beginTransaction();  ft.add(this,tag);  ft.commit();}  }
class C{  private void createProperty(){  Map<String,String> locationProperties=new TreeMap<>();  locationProperties.put("build","${basedir}/build");  locationProperties.put("build.classes","${build}/classes");  locationProperties.put("src.dir","${basedir}/src");  Element nameProperty=doc.createElement("property");  nameProperty.setAttribute("name","name");  nameProperty.setAttribute("value",projectName);  Node node=root.getFirstChild();  node=root.insertBefore(nameProperty,node);  for (  Map.Entry<String,String> locationProperty : locationProperties.entrySet()) {    Element locationElement=doc.createElement("property");    locationElement.setAttribute("name",locationProperty.getKey());    locationElement.setAttribute("location",locationProperty.getValue());    node=node.getNextSibling();    node=root.insertBefore(locationElement,node);  }}  }
class C{  public void testLoadGZip() throws Exception {  final URL url=this.getClass().getClassLoader().getResource("com/bigdata/rdf/rio/small.rdf.gz");  final String update="LOAD <" + url.toExternalForm() + ">";  final String ns="http://bigdata.com/test/data#";  m_repo.prepareUpdate(update).evaluate();  assertTrue(hasStatement(f.createURI(ns,"mike"),RDFS.LABEL,f.createLiteral("Michael Personick"),true));}  }
class C{  public int timePassed(){  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_MULTIPLE_IS_A1__EXTENDS_NAME_1:    return getExtendsName_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static String bytesToHexString(byte[] bytes){  if (bytes == null) {    return null;  }  final StringBuilder hex=new StringBuilder(bytes.length * 2);  int nibble1, nibble2;  for (  byte b : bytes) {    nibble1=(b >>> 4) & 0xf;    nibble2=b & 0xf;    hex.append(HEX_ALPHABET[nibble1]);    hex.append(HEX_ALPHABET[nibble2]);  }  return hex.toString();}  }
class C{  public ListTag(TagType type,List<T> value){  super(TagType.LIST);  this.type=type;  this.value=new ArrayList<>(value);  for (  Tag elem : value) {    if (type != elem.getType()) {      throw new IllegalArgumentException("ListTag(" + type + ") cannot hold tags of type "+ elem.getType());    }  }}  }
class C{  public static void wtf(String tag,String msg,Throwable thr){  log(LEVEL.ASSERT,tag,msg,thr);}  }
class C{  @Override public void dispose(){  if (getParentFrame() != null) {    getParentFrame().removeChildFrame(this);    getParentFrame().createTitle("");  }  super.dispose();}  }
class C{  public String encode(final String pString,final String charset) throws EncoderException {  if (pString == null) {    return null;  }  try {    return encodeText(pString,charset);  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public Att removeAtt(String namespace,String localName){  for (int i=0; i < attributes.size(); i++) {    Att att=attributes.get(i);    if (att.getLocalName().equals(localName) && att.getNamespace().equals(namespace)) {      attributes.remove(i);      return att;    }  }  return null;}  }
class C{  public double matthewsCorrelationCoefficient(int classIndex){  double numTP=numTruePositives(classIndex);  double numTN=numTrueNegatives(classIndex);  double numFP=numFalsePositives(classIndex);  double numFN=numFalseNegatives(classIndex);  double n=(numTP * numTN) - (numFP * numFN);  double d=(numTP + numFP) * (numTP + numFN) * (numTN + numFP)* (numTN + numFN);  d=Math.sqrt(d);  if (d == 0) {    d=1;  }  return n / d;}  }
class C{  public WampClientBuilder withUri(String uri){  this.uri=uri;  return this;}  }
class C{  public void restore(BackupConfig initialConfig) throws IOException, IllegalArgumentException {  BackupConfig backupConfig=initialConfig.clone();  if (backupConfig.getBackupFile() == null || backupConfig.getBackupFile().isEmpty()) {    throw new IllegalArgumentException("Backup file is unknown.");  }  Path compressedBackupFile=Paths.get(backupConfig.getBackupFile());  if (!Files.exists(compressedBackupFile)) {    throw new IllegalArgumentException(format("Backup file '%s' doesn't exist.",compressedBackupFile));  }  try {    Artifact artifact=getArtifact(backupConfig.getArtifactName());    Path tempDir=backupConfig.obtainArtifactTempDirectory();    TarUtils.uncompress(compressedBackupFile,tempDir);    String backupFileName=removeGzipExtension(compressedBackupFile).getFileName().toString();    Path backupFile=tempDir.resolve(backupFileName);    TarUtils.unpackAllFiles(backupFile,tempDir);    backupConfig.setBackupFile(backupFile.toString());    backupConfig.setBackupDirectory(tempDir.toString());    BackupConfig storedBackupConfig=backupConfig.loadConfigFromTempDir();    checkBackup(artifact,storedBackupConfig);    Command restoreCommand=artifact.getRestoreCommand(backupConfig);    restoreCommand.execute();    FileUtils.deleteQuietly(tempDir.toFile());  } catch (  IllegalArgumentException|IllegalStateException|BackupException e) {    throw e;  }catch (  Exception e) {    throw new BackupException(e.getMessage(),e);  }}  }
class C{  private RevCommit resolveParentRevCommit(RevCommit revCommit) throws MissingObjectException, IncorrectObjectTypeException, IOException {  RevCommit parent=null;  try (RevWalk walker=new RevWalk(repo)){    parent=walker.parseCommit(revCommit.getParents()[0].getId());  }   return parent;}  }
class C{  public SessionPingedEvent(final String sessionId,final long timeout){  this(sessionId,timeout,null);}  }
class C{  public void writeString(String s) throws IOException {  byte[] ba=s.getBytes(encoding);  messageOutput.write(ba);  messageOutput.write(0);}  }
class C{  public Boolean isIpv6Supported(){  return ipv6Supported;}  }
class C{  void move(boolean moveUp){  final ISelection selection=fTableViewer.getSelection();  if (selection instanceof IStructuredSelection) {    final IStructuredSelection ss=(IStructuredSelection)selection;    final String selected=(String)ss.getFirstElement();    int index=fLocationList.indexOf(selected);    if (moveUp && index - 1 >= 0) {      fLocationList.remove(index);      fLocationList.add(index - 1,selected);      fTableViewer.refresh();      updateEnablementMoveButtons(ss);    } else     if (!moveUp && index + 1 < fLocationList.size()) {      fLocationList.remove(index);      fLocationList.add(index + 1,selected);      fTableViewer.refresh();      updateEnablementMoveButtons(ss);    }  }}  }
class C{  public static int binarySearch(Object[] a,Object key,Comparator c){  if (c == null) {    return binarySearch(a,key);  }  int low=0;  int high=a.length - 1;  while (low <= high) {    int mid=(low + high) >> 1;    Object midVal=a[mid];    int cmp=c.compare(midVal,key);    if (cmp < 0)     low=mid + 1; else     if (cmp > 0)     high=mid - 1; else     return mid;  }  return -(low + 1);}  }
class C{  public static void forceDeleteOnExit(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectoryOnExit(file);  } else {    file.deleteOnExit();  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  protected String defaultClassifierString(){  return "weka.classifiers.trees.J48";}  }
class C{  private int partitionSmall(T pivot,int from,int to){  int tempIndex=0, dataIndex=from;  for (int i=from; i <= to; i++) {    T x=data[i];    if (comp.compare(x,pivot) <= 0) {      if (tempIndex > 0) {        data[dataIndex]=x;      }      dataIndex++;    } else {      temp[tempIndex++]=x;    }  }  if (tempIndex > 0) {    System.arraycopy(temp,0,data,dataIndex,tempIndex);  }  return dataIndex;}  }
class C{  @Override public byte[] decode(byte[] data) throws Exception {  if (data[0] == 0 && data[1] == 0 && data[2] == 0) {    return data;  }  int bufSize=512000;  FastByteArrayOutputStream bos=null;  boolean failed=true;  final int orgSize=data.length;  if (data != null) {    while (failed) {      final Inflater inf=new Inflater();      inf.setInput(data);      final int size=data.length;      bos=new FastByteArrayOutputStream(size);      if (size < bufSize) {        bufSize=size;      }      final byte[] buf=new byte[bufSize];      int count;      try {        while (!inf.finished()) {          count=inf.inflate(buf);          bos.write(buf,0,count);          if (inf.getRemaining() == 0) {            break;          }        }        failed=false;      } catch (      final Exception ee) {        LogWriter.writeLog("Exception in Flate " + ee);        failed=true;        hasError=true;        if (data.length == orgSize && data.length > 10000) {          failed=false;        } else         if (data.length > 10) {          final byte[] newData=new byte[data.length - 1];          System.arraycopy(data,0,newData,0,data.length - 1);          data=newData;        } else {          failed=false;        }      }    }    data=bos.toByteArray();    return applyPredictor(predictor,data,colors,bitsPerComponent,columns);  }  return data;}  }
class C{  public static void putDoubleField(Object obj,long fieldOff,double val){  UNSAFE.putDouble(obj,fieldOff,val);}  }
class C{  private void unregisterElement(Element element){  elements.remove(element);  for (  Element child : element.getChildren()) {    unregisterElement(child);  }}  }
class C{  public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (dataset instanceof HeikinAshiDataset) {    EntityCollection entities=null;    if (info != null) {      entities=info.getOwner().getEntityCollection();    }    HeikinAshiDataset highLowData=(HeikinAshiDataset)dataset;    double x=highLowData.getXValue(series,item);    double yHigh=highLowData.getHighValue(series,item);    double yLow=highLowData.getLowValue(series,item);    double yOpen=highLowData.getOpenValue(series,item);    double yClose=highLowData.getCloseValue(series,item);    RectangleEdge domainEdge=plot.getDomainAxisEdge();    double xx=domainAxis.valueToJava2D(x,dataArea,domainEdge);    RectangleEdge edge=plot.getRangeAxisEdge();    double yyHigh=rangeAxis.valueToJava2D(yHigh,dataArea,edge);    double yyLow=rangeAxis.valueToJava2D(yLow,dataArea,edge);    double yyOpen=rangeAxis.valueToJava2D(yOpen,dataArea,edge);    double yyClose=rangeAxis.valueToJava2D(yClose,dataArea,edge);    int itemCount=highLowData.getItemCount(series);    double xxWidth=dataArea.getWidth() / itemCount;    xxWidth-=2 * this.getAutoWidthGap();    xxWidth*=this.getAutoWidthFactor();    xxWidth=Math.min(xxWidth,this.maxCandleWidth);    double stickWidth=Math.max(Math.min(3,this.maxCandleWidth),xxWidth);    Paint outlinePaint=null;    outlinePaint=getItemOutlinePaint(series,item);    g2.setStroke(getItemStroke(series,item));    g2.setPaint(outlinePaint);    double yyMaxOpenClose=Math.max(yyOpen,yyClose);    double yyMinOpenClose=Math.min(yyOpen,yyClose);    double maxOpenClose=Math.max(yOpen,yClose);    double minOpenClose=Math.min(yOpen,yClose);    Shape body=null;    boolean highlight=highlight(series,item);    if (yHigh > maxOpenClose) {      if (highlight) {        body=new Rectangle2D.Double(xx - (stickWidth / 2),yyHigh - 10,stickWidth,(yyMaxOpenClose - yyHigh) + 10);        g2.setPaint(Color.YELLOW);        g2.fill(body);        g2.draw(body);      }    }    if (yHigh > maxOpenClose) {      if (nightMode) {        if (yClose > yOpen) {          g2.setPaint(upPaint);        } else {          g2.setPaint(downPaint);        }      } else {        g2.setPaint(Color.black);      }      g2.draw(new Line2D.Double(xx,yyHigh,xx,yyMaxOpenClose));    }    if (yLow < minOpenClose) {      if (highlight) {        body=new Rectangle2D.Double(xx - (stickWidth / 2),yyMinOpenClose,stickWidth,(yyLow - yyMinOpenClose) + 10);        g2.setPaint(Color.YELLOW);        g2.fill(body);        g2.draw(body);      }      if (yLow < minOpenClose) {        if (nightMode) {          if (yClose > yOpen) {            g2.setPaint(upPaint);          } else {            g2.setPaint(downPaint);          }        } else {          g2.setPaint(Color.BLACK);        }        g2.draw(new Line2D.Double(xx,yyLow,xx,yyMinOpenClose));      }    }    body=new Rectangle2D.Double(xx - (stickWidth / 2),yyMinOpenClose,stickWidth,yyMaxOpenClose - yyMinOpenClose);    if (nightMode) {      g2.setPaint(Color.white);    } else {      if (yClose > yOpen) {        g2.setPaint(upPaint);      } else {        g2.setPaint(downPaint);      }    }    g2.fill(body);    g2.draw(body);    if (nightMode) {      if (yClose > yOpen) {        g2.setPaint(upPaint);      } else {        g2.setPaint(downPaint);      }    } else {      g2.setPaint(outlinePaint);    }    g2.draw(body);    if (entities != null) {      String tip=null;      XYToolTipGenerator generator=getToolTipGenerator(series,item);      if (generator != null) {        tip=generator.generateToolTip(dataset,series,item);      }      XYItemEntity entity=new XYItemEntity(body,dataset,series,item,tip,null);      entities.add(entity);    }  }}  }
class C{  public static String quote(String string){  if (string == null || string.length() == 0) {    return "\"\"";  }  char b;  char c=0;  int i;  int len=string.length();  StringBuffer sb=new StringBuffer(len + 4);  String t;  sb.append('"');  for (i=0; i < len; i+=1) {    b=c;    c=string.charAt(i);switch (c) {case '\\':case '"':      sb.append('\\');    sb.append(c);  break;case '/':if (b == '<') {  sb.append('\\');}sb.append(c);break;case '\b':sb.append("\\b");break;case '\t':sb.append("\\t");break;case '\n':sb.append("\\n");break;case '\f':sb.append("\\f");break;case '\r':sb.append("\\r");break;default :if (c < ' ') {t="000" + Integer.toHexString(c);sb.append("\\u" + t.substring(t.length() - 4));} else {sb.append(c);}}}sb.append('"');return sb.toString();}  }
class C{  public Builder tenant(String tenant){  Validate.notEmpty(tenant,"tenant");  this.tenant=tenant;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.578 -0500",hash_original_method="C4B929220DC6CCE2C4298A937E6A511E",hash_generated_method="A0943E9334B8AE3796A872F9E87CEFEF") public boolean decodeUintvarInteger(int startIndex){  int index=startIndex;  unsigned32bit=0;  while ((wspData[index] & 0x80) != 0) {    if ((index - startIndex) >= 4) {      return false;    }    unsigned32bit=(unsigned32bit << 7) | (wspData[index] & 0x7f);    index++;  }  unsigned32bit=(unsigned32bit << 7) | (wspData[index] & 0x7f);  dataLength=index - startIndex + 1;  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public static void signMessage(Message message,KEYRecord key,PrivateKey privkey,SIGRecord previous) throws DNSSEC.DNSSECException {  int validity=Options.intValue("sig0validity");  if (validity < 0)   validity=VALIDITY;  long now=System.currentTimeMillis();  Date timeSigned=new Date(now);  Date timeExpires=new Date(now + validity * 1000);  SIGRecord sig=DNSSEC.signMessage(message,previous,key,privkey,timeSigned,timeExpires);  message.addRecord(sig,Section.ADDITIONAL);}  }
class C{  public boolean remove(int val){  int index=index(val);  if (index >= 0) {    removeAt(index);    return true;  }  return false;}  }
class C{  public java.nio.ByteBuffer run(Retriever retriever){  if (retriever == null) {    String message=Logging.getMessage("nullValue.RetrieverIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  String message=this.validate(retriever);  if (message == null) {    this.onRetrievalSuceeded(retriever);  } else {    this.onRetrievalFailed(retriever);    Logging.logger().severe(message);  }  this.signalRetrievalComplete();  return retriever.getBuffer();}  }
class C{  private void step_1(){  final SpeakerNPC npc=npcs.get(NPC_NAME);  npc.addOffer("I don't sell anything!");  npc.addGoodbye();  npc.addJob("My current job is unimportant, I will be the king of Kalavan!");  npc.add(ConversationStates.IDLE,ConversationPhrases.GREETING_MESSAGES,new AndCondition(new GreetingMatchesNameCondition(npc.getName()),new QuestNotStartedCondition(QUEST_SLOT)),ConversationStates.ATTENDING,"Greetings. Be quick with your matters, I have a lot of work to do." + " And next time clean your boots, you are lucky that I'm not the king...yet!",null);  npc.addQuest("Hmm you could be useful for my #plan...");  npc.addReply("plan","Soon I will dethrone the king of Kalavan and become the new king! Right now I need myself a new #crown.");  npc.add(ConversationStates.ATTENDING,"crown",new QuestNotStartedCondition(QUEST_SLOT),ConversationStates.QUEST_OFFERED,"Yes, I need jewels and gold for my new crown. Will you help me?",null);  npc.add(ConversationStates.QUEST_OFFERED,ConversationPhrases.YES_MESSAGES,null,ConversationStates.QUESTION_1,null,new MultipleActions(new SetQuestAction(QUEST_SLOT,NEEDED_ITEMS),new SayRequiredItemsFromCollectionAction(QUEST_SLOT,"I want my crown to be beautiful and shiny. I need [items]. " + "Do you have some of those now with you?")));  npc.add(ConversationStates.QUEST_OFFERED,ConversationPhrases.NO_MESSAGES,null,ConversationStates.IDLE,"Oh you don't want to help me?! Get lost, you are wasting my precious time!",new SetQuestAndModifyKarmaAction(QUEST_SLOT,"rejected",-5.0));}  }
class C{  public static double max(final double... array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  }  Validate.isTrue(array.length != 0,"Array cannot be empty.");  double max=array[0];  for (int j=1; j < array.length; j++) {    max=max(array[j],max);  }  return max;}  }
class C{  public static Date parseRfc822Date(String dateString) throws ParseException {  return getRfc822DateFormat().parse(dateString);}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof ExternalInputInfo) {    ExternalInputInfo eii=(ExternalInputInfo)o;    return this.id.equals(eii.id) && this.name.equals(eii.name);  }  return false;}  }
class C{  public void addListener(final SelectionListener listener1){  this.listener=listener1;}  }
class C{  public boolean handleSyncOffer(String storeName,byte[] key,Iterable<VectorClock> versions) throws SyncException {  SynchronizingStorageEngine store=storeRegistry.get(storeName);  if (store == null)   return true;  List<Versioned<byte[]>> values=store.get(new ByteArray(key));  if (values == null || values.size() == 0)   return true;  for (  VectorClock vc : versions) {    for (    Versioned<byte[]> value : values) {      VectorClock existingVc=(VectorClock)value.getVersion();      if (!vc.compare(existingVc).equals(Occurred.BEFORE))       return true;    }  }  return false;}  }
class C{  private void informProjectNotification(final ViewNotificationContainer projectNotificationContainer,final SQLProvider provider) throws CouldntLoadDataException {  if (projectNotificationContainer.getDatabaseOperation().equals("INSERT")) {    final INaviProject project=projectNotificationContainer.getNotificationProject().get();    if (!project.isLoaded()) {      return;    }    final Integer viewId=projectNotificationContainer.getViewId();    final ImmutableNaviViewConfiguration databaseViewConfiguration=provider.loadFlowGraphInformation(project,viewId);    final CProjectViewGenerator generator=new CProjectViewGenerator(provider,project);    final INaviView view=generator.generate(databaseViewConfiguration);    project.getContent().addView(view);  }  if (projectNotificationContainer.getDatabaseOperation().equals("UPDATE")) {    return;  }  if (projectNotificationContainer.getDatabaseOperation().equals("DELETE")) {    final INaviProject project=projectNotificationContainer.getNotificationProject().get();    if (!project.isLoaded()) {      return;    }    final Integer viewId=projectNotificationContainer.getViewId();    final INaviView view=ViewManager.get(provider).getView(viewId);    project.getContent().deleteViewInternal(view);  }}  }
class C{  public static String toString(byte[] ba){  return new String(ba);}  }
class C{  public FrequencyChangeProcessorWrapper(IFrequencyChangeProcessor handler){  mProcessor=handler;}  }
class C{  private void markClassLines(ReferenceType refType){  for (  Method meth : refType.methods()) {    try {      for (      Location loc : meth.allLineLocations()) {        showExecutable(loc.lineNumber(),refType);      }    } catch (    AbsentInformationException exc) {    }  }  for (  BreakpointRequest bp : env.getExecutionManager().eventRequestManager().breakpointRequests()) {    if (bp.location() != null) {      Location loc=bp.location();      if (loc.declaringType().equals(refType)) {        showBreakpoint(loc.lineNumber(),true);      }    }  }}  }
class C{  public X509CRLImpl(byte[] encoding) throws IOException {  this((CertificateList)CertificateList.ASN1.decode(encoding));}  }
class C{  public RepeatedFieldBuilder(List<MType> messages,boolean isMessagesListMutable,GeneratedMessage.BuilderParent parent,boolean isClean){  this.messages=messages;  this.isMessagesListMutable=isMessagesListMutable;  this.parent=parent;  this.isClean=isClean;}  }
class C{  private void updateSearchStyle(JTextComponent c,SeaGlassContext context,String prefix){  searchIconWidth=0;  Object o=style.get(context,prefix + ".searchIconWidth");  if (o != null && o instanceof Integer) {    searchIconWidth=(Integer)o;  }  popupIconWidth=0;  o=style.get(context,prefix + ".popupIconWidth");  if (o != null && o instanceof Integer) {    popupIconWidth=(Integer)o;  }  cancelIconWidth=0;  o=style.get(context,prefix + ".cancelIconWidth");  if (o != null && o instanceof Integer) {    cancelIconWidth=(Integer)o;  }  searchLeftInnerMargin=0;  o=style.get(context,prefix + ".searchLeftInnerMargin");  if (o != null && o instanceof Integer) {    searchLeftInnerMargin=(Integer)o;  }  searchRightInnerMargin=0;  o=style.get(context,prefix + ".searchRightInnerMargin");  if (o != null && o instanceof Integer) {    searchRightInnerMargin=(Integer)o;  }  placeholderColor=Color.GRAY;  o=style.get(context,"placeholderTextColor");  if (o != null && o instanceof Color) {    placeholderColor=(Color)o;  }  Border border=c.getBorder();  if (border == null || border instanceof UIResource && !(border instanceof TextFieldBorder)) {    c.setBorder(createTextFieldBorder(context));  }  if (isSearchField.isInState(c)) {    o=c.getClientProperty("JTextField.Search.PlaceholderText");    if (o != null && o instanceof String) {      placeholderText=(String)o;    } else     if (placeholderText != null) {      placeholderText=null;    }    o=c.getClientProperty("JTextField.Search.FindAction");    if (o != null && o instanceof ActionListener) {      if (findAction == null) {        findAction=(ActionListener)o;      }    }    o=c.getClientProperty("JTextField.Search.FindPopup");    if (o != null && o instanceof JPopupMenu) {      if (findPopup == null) {        findPopup=(JPopupMenu)o;      }    }    o=c.getClientProperty("JTextField.Search.CancelAction");    if (o != null && o instanceof ActionListener) {      if (cancelAction == null) {        cancelAction=(ActionListener)o;      }    }    installMouseListeners();  } else {    placeholderText=null;    if (findAction != null) {      findAction=null;    }    if (findPopup != null) {      findPopup=null;    }    if (cancelAction != null) {      cancelAction=null;    }    uninstallMouseListeners();  }}  }
class C{  default Column distance(Column column2){  FloatColumn newColumn=FloatColumn.create(name() + column2.name() + "[distance]");  for (int r=0; r < size(); r++) {    String value1=getString(r);    String value2=column2.getString(r);    newColumn.set(r,StringUtils.getLevenshteinDistance(value1,value2));  }  return newColumn;}  }
class C{  public Word plus(Word w2){  return null;}  }
class C{  public void addObservations(int states[][][],int h,int j){  int timeSteps=states.length;  if (timeSteps - startObservationTime <= 0) {    return;  }  int agentRows=states[0].length;  if (agentRows == 0) {    return;  }  int agentColumns=states[0][0].length;  if (periodicBoundaryConditions) {    observations+=(timeSteps - startObservationTime) * agentRows * agentColumns;  } else {    observations+=(timeSteps - startObservationTime) * (agentRows - Math.abs(h)) * (agentColumns - Math.abs(j));  }  int[][][] pastVal=new int[agentRows][agentColumns][destEmbeddingDelay];  for (int r=0; r < agentRows; r++) {    for (int c=0; c < agentColumns; c++) {      for (int d=0; d < destEmbeddingDelay; d++) {        pastVal[r][c][d]=0;        for (int p=0; p < k - 1; p++) {          pastVal[r][c][d]+=states[startObservationTime + d - 1 - (k - 1) * destEmbeddingDelay + p * destEmbeddingDelay][r][c];          pastVal[r][c][d]*=base;        }      }    }  }  int[][][] sourcePastVal=new int[agentRows][agentColumns][sourceEmbeddingDelay];  for (int r=0; r < agentRows; r++) {    for (int c=0; c < agentColumns; c++) {      int sourceAgentRow=r - h;      if ((sourceAgentRow < 0) || (sourceAgentRow >= agentRows)) {        if (periodicBoundaryConditions) {          sourceAgentRow=(sourceAgentRow + agentRows) % agentRows;        } else {          continue;        }      }      int sourceAgentColumn=c - j;      if ((sourceAgentColumn < 0) || (sourceAgentColumn >= agentColumns)) {        if (periodicBoundaryConditions) {          sourceAgentColumn=(sourceAgentColumn + agentColumns) % agentColumns;        } else {          continue;        }      }      for (int d=0; d < sourceEmbeddingDelay; d++) {        sourcePastVal[r][c][d]=0;        for (int p=0; p < sourceHistoryEmbedLength - 1; p++) {          sourcePastVal[r][c][d]+=states[startObservationTime + d - delay - (sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay + p * sourceEmbeddingDelay][sourceAgentRow][sourceAgentColumn];          sourcePastVal[r][c][d]*=base;        }      }    }  }  int destVal, destEmbeddingPhase=0, sourceEmbeddingPhase=0;  for (int t=startObservationTime; t < timeSteps; t++) {    for (int r=0; r < agentRows; r++) {      for (int c=0; c < agentColumns; c++) {        int sourceAgentRow=r - h;        if ((sourceAgentRow < 0) || (sourceAgentRow >= agentRows)) {          if (periodicBoundaryConditions) {            sourceAgentRow=(sourceAgentRow + agentRows) % agentRows;          } else {            continue;          }        }        int sourceAgentColumn=c - j;        if ((sourceAgentColumn < 0) || (sourceAgentColumn >= agentColumns)) {          if (periodicBoundaryConditions) {            sourceAgentColumn=(sourceAgentColumn + agentColumns) % agentColumns;          } else {            continue;          }        }        if (k > 0) {          pastVal[r][c][destEmbeddingPhase]+=states[t - 1][r][c];        }        sourcePastVal[r][c][sourceEmbeddingPhase]+=states[t - delay][sourceAgentRow][sourceAgentColumn];        destVal=states[t][r][c];        int thisPastVal=pastVal[r][c][destEmbeddingPhase];        int thisSourceVal=sourcePastVal[r][c][sourceEmbeddingPhase];        sourceNextPastCount[thisSourceVal][destVal][thisPastVal]++;        sourcePastCount[thisSourceVal][thisPastVal]++;        nextPastCount[destVal][thisPastVal]++;        pastCount[thisPastVal]++;        nextCount[destVal]++;        if (k > 0) {          pastVal[r][c][destEmbeddingPhase]-=maxShiftedValue[states[t - 1 - (k - 1) * destEmbeddingDelay][r][c]];          pastVal[r][c][destEmbeddingPhase]*=base;        }        sourcePastVal[r][c][sourceEmbeddingPhase]-=maxShiftedSourceValue[states[t - delay - (sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay][sourceAgentRow][sourceAgentColumn]];        sourcePastVal[r][c][sourceEmbeddingPhase]*=base;      }    }    destEmbeddingPhase=(destEmbeddingPhase + 1) % destEmbeddingDelay;    sourceEmbeddingPhase=(sourceEmbeddingPhase + 1) % sourceEmbeddingDelay;  }}  }
class C{  public Vector4d add(Vector4dc v){  x+=v.x();  y+=v.y();  z+=v.z();  w+=v.w();  return this;}  }
class C{  public static synchronized boolean isLocalHostChanged() throws IOException {  InetAddress locHost0=locHost;  return locHost0 != null && !resetLocalHost().equals(locHost0);}  }
class C{  public boolean isSpring(){  return this.frequency > 0.0;}  }
class C{  @DELETE @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/shares/{shareName}") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskResourceRep deleteShare(@PathParam("id") URI id,@PathParam("shareName") String shareName) throws InternalException {  ArgValidator.checkFieldUriType(id,Snapshot.class,"id");  Snapshot snap=queryResource(id);  FileShare fs=_permissionsHelper.getObjectById(snap.getParent(),FileShare.class);  ArgValidator.checkFieldNotNull(shareName,"shareName");  ArgValidator.checkEntity(snap,id,isIdEmbeddedInURL(id));  String task=UUID.randomUUID().toString();  if (!CifsShareUtility.doesShareExist(snap,shareName)) {    _log.error("CIFS share does not exist",shareName);    throw APIException.notFound.invalidParameterObjectHasNoSuchShare(id,shareName);  }  SMBFileShare smbShare=snap.getSMBFileShares().get(shareName);  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  Operation op=_dbClient.createTaskOpStatus(Snapshot.class,snap.getId(),task,ResourceOperationTypeEnum.DELETE_FILE_SNAPSHOT_SHARE);  FileSMBShare fileSMBShare=new FileSMBShare(shareName,smbShare.getDescription(),smbShare.getPermissionType(),smbShare.getPermission(),Integer.toString(smbShare.getMaxUsers()),smbShare.getNativeId(),smbShare.getPath());  FileServiceApi fileServiceApi=FileService.getFileShareServiceImpl(fs,_dbClient);  fileServiceApi.deleteShare(device.getId(),snap.getId(),fileSMBShare,task);  auditOp(OperationTypeEnum.DELETE_FILE_SNAPSHOT_SHARE,true,AuditLogManager.AUDITOP_BEGIN,smbShare.getName(),smbShare.getPermissionType(),smbShare.getPermission(),smbShare.getMaxUsers(),smbShare.getDescription(),snap.getId().toString());  return toTask(snap,task,op);}  }
class C{  public EuclideanDistance(){  super();}  }
class C{  public synchronized void put(ParsedURL purl,Filter filt){  super.putImpl(purl,filt);}  }
class C{  public static DebuggerOptions newInstance(final DebuggerOptions options){  return new DebuggerOptions(options.canDetach,options.canAttach,options.canTerminate,options.canMemmap,options.stackAvailable,options.canValidMemory,options.canHalt,options.haltBeforeCommunicating,options.canMultithread,options.canSoftwareBreakpoints,options.breakpointCounter,options.pageSize,new ArrayList<DebuggerException>(options.exceptions),options.canBreakOnModuleLoad,options.canBreakOnModuleUnload,options.canTraceCount);}  }
class C{  public boolean isLow(){  return value != null && value >= 6 && value <= 9;}  }
class C{  private void doGenerate(){  if (checkExistingCertificate()) {    return;  }  try {    final KeyStore newrootca=SslCertificateUtils.createRootCA();    setRootca(newrootca);  } catch (  final Exception e) {    logger.error("Error while generating Root CA certificate",e);  }}  }
class C{  public static long min(final long... array){  validateArray(array);  long min=array[0];  for (int i=1; i < array.length; i++) {    if (array[i] < min) {      min=array[i];    }  }  return min;}  }
class C{  public static void printScore(int dice1,int dice2){  System.out.println("You rolled " + dice1 + " + "+ dice2+ " = "+ (dice1 + dice2));}  }
class C{  public Shape3DPortrayal3D(Shape3D shape){  this(shape,Color.white);}  }
class C{  private void initialize(String title){  this.setSize(640,400);  this.setTitle(title);  this.setContentPane(getJContentPane());}  }
class C{  public static boolean isFTLIdentifierStart(final char c){  if (c < 0xAA) {    if (c >= 'a' && c <= 'z' || c >= '@' && c <= 'Z') {      return true;    } else {      return c == '$' || c == '_';    }  } else {    if (c < 0xA7F8) {      if (c < 0x2D6F) {        if (c < 0x2128) {          if (c < 0x2090) {            if (c < 0xD8) {              if (c < 0xBA) {                return c == 0xAA || c == 0xB5;              } else {                return c == 0xBA || c >= 0xC0 && c <= 0xD6;              }            } else {              if (c < 0x2071) {                return c >= 0xD8 && c <= 0xF6 || c >= 0xF8 && c <= 0x1FFF;              } else {                return c == 0x2071 || c == 0x207F;              }            }          } else {            if (c < 0x2115) {              if (c < 0x2107) {                return c >= 0x2090 && c <= 0x209C || c == 0x2102;              } else {                return c == 0x2107 || c >= 0x210A && c <= 0x2113;              }            } else {              if (c < 0x2124) {                return c == 0x2115 || c >= 0x2119 && c <= 0x211D;              } else {                return c == 0x2124 || c == 0x2126;              }            }          }        } else {          if (c < 0x2C30) {            if (c < 0x2145) {              if (c < 0x212F) {                return c == 0x2128 || c >= 0x212A && c <= 0x212D;              } else {                return c >= 0x212F && c <= 0x2139 || c >= 0x213C && c <= 0x213F;              }            } else {              if (c < 0x2183) {                return c >= 0x2145 && c <= 0x2149 || c == 0x214E;              } else {                return c >= 0x2183 && c <= 0x2184 || c >= 0x2C00 && c <= 0x2C2E;              }            }          } else {            if (c < 0x2D00) {              if (c < 0x2CEB) {                return c >= 0x2C30 && c <= 0x2C5E || c >= 0x2C60 && c <= 0x2CE4;              } else {                return c >= 0x2CEB && c <= 0x2CEE || c >= 0x2CF2 && c <= 0x2CF3;              }            } else {              if (c < 0x2D2D) {                return c >= 0x2D00 && c <= 0x2D25 || c == 0x2D27;              } else {                return c == 0x2D2D || c >= 0x2D30 && c <= 0x2D67;              }            }          }        }      } else {        if (c < 0x31F0) {          if (c < 0x2DD0) {            if (c < 0x2DB0) {              if (c < 0x2DA0) {                return c == 0x2D6F || c >= 0x2D80 && c <= 0x2D96;              } else {                return c >= 0x2DA0 && c <= 0x2DA6 || c >= 0x2DA8 && c <= 0x2DAE;              }            } else {              if (c < 0x2DC0) {                return c >= 0x2DB0 && c <= 0x2DB6 || c >= 0x2DB8 && c <= 0x2DBE;              } else {                return c >= 0x2DC0 && c <= 0x2DC6 || c >= 0x2DC8 && c <= 0x2DCE;              }            }          } else {            if (c < 0x3031) {              if (c < 0x2E2F) {                return c >= 0x2DD0 && c <= 0x2DD6 || c >= 0x2DD8 && c <= 0x2DDE;              } else {                return c == 0x2E2F || c >= 0x3005 && c <= 0x3006;              }            } else {              if (c < 0x3040) {                return c >= 0x3031 && c <= 0x3035 || c >= 0x303B && c <= 0x303C;              } else {                return c >= 0x3040 && c <= 0x318F || c >= 0x31A0 && c <= 0x31BA;              }            }          }        } else {          if (c < 0xA67F) {            if (c < 0xA4D0) {              if (c < 0x3400) {                return c >= 0x31F0 && c <= 0x31FF || c >= 0x3300 && c <= 0x337F;              } else {                return c >= 0x3400 && c <= 0x4DB5 || c >= 0x4E00 && c <= 0xA48C;              }            } else {              if (c < 0xA610) {                return c >= 0xA4D0 && c <= 0xA4FD || c >= 0xA500 && c <= 0xA60C;              } else {                return c >= 0xA610 && c <= 0xA62B || c >= 0xA640 && c <= 0xA66E;              }            }          } else {            if (c < 0xA78B) {              if (c < 0xA717) {                return c >= 0xA67F && c <= 0xA697 || c >= 0xA6A0 && c <= 0xA6E5;              } else {                return c >= 0xA717 && c <= 0xA71F || c >= 0xA722 && c <= 0xA788;              }            } else {              if (c < 0xA7A0) {                return c >= 0xA78B && c <= 0xA78E || c >= 0xA790 && c <= 0xA793;              } else {                return c >= 0xA7A0 && c <= 0xA7AA;              }            }          }        }      }    } else {      if (c < 0xAB20) {        if (c < 0xAA44) {          if (c < 0xA8FB) {            if (c < 0xA840) {              if (c < 0xA807) {                return c >= 0xA7F8 && c <= 0xA801 || c >= 0xA803 && c <= 0xA805;              } else {                return c >= 0xA807 && c <= 0xA80A || c >= 0xA80C && c <= 0xA822;              }            } else {              if (c < 0xA8D0) {                return c >= 0xA840 && c <= 0xA873 || c >= 0xA882 && c <= 0xA8B3;              } else {                return c >= 0xA8D0 && c <= 0xA8D9 || c >= 0xA8F2 && c <= 0xA8F7;              }            }          } else {            if (c < 0xA984) {              if (c < 0xA930) {                return c == 0xA8FB || c >= 0xA900 && c <= 0xA925;              } else {                return c >= 0xA930 && c <= 0xA946 || c >= 0xA960 && c <= 0xA97C;              }            } else {              if (c < 0xAA00) {                return c >= 0xA984 && c <= 0xA9B2 || c >= 0xA9CF && c <= 0xA9D9;              } else {                return c >= 0xAA00 && c <= 0xAA28 || c >= 0xAA40 && c <= 0xAA42;              }            }          }        } else {          if (c < 0xAAC0) {            if (c < 0xAA80) {              if (c < 0xAA60) {                return c >= 0xAA44 && c <= 0xAA4B || c >= 0xAA50 && c <= 0xAA59;              } else {                return c >= 0xAA60 && c <= 0xAA76 || c == 0xAA7A;              }            } else {              if (c < 0xAAB5) {                return c >= 0xAA80 && c <= 0xAAAF || c == 0xAAB1;              } else {                return c >= 0xAAB5 && c <= 0xAAB6 || c >= 0xAAB9 && c <= 0xAABD;              }            }          } else {            if (c < 0xAAF2) {              if (c < 0xAADB) {                return c == 0xAAC0 || c == 0xAAC2;              } else {                return c >= 0xAADB && c <= 0xAADD || c >= 0xAAE0 && c <= 0xAAEA;              }            } else {              if (c < 0xAB09) {                return c >= 0xAAF2 && c <= 0xAAF4 || c >= 0xAB01 && c <= 0xAB06;              } else {                return c >= 0xAB09 && c <= 0xAB0E || c >= 0xAB11 && c <= 0xAB16;              }            }          }        }      } else {        if (c < 0xFB46) {          if (c < 0xFB13) {            if (c < 0xAC00) {              if (c < 0xABC0) {                return c >= 0xAB20 && c <= 0xAB26 || c >= 0xAB28 && c <= 0xAB2E;              } else {                return c >= 0xABC0 && c <= 0xABE2 || c >= 0xABF0 && c <= 0xABF9;              }            } else {              if (c < 0xD7CB) {                return c >= 0xAC00 && c <= 0xD7A3 || c >= 0xD7B0 && c <= 0xD7C6;              } else {                return c >= 0xD7CB && c <= 0xD7FB || c >= 0xF900 && c <= 0xFB06;              }            }          } else {            if (c < 0xFB38) {              if (c < 0xFB1F) {                return c >= 0xFB13 && c <= 0xFB17 || c == 0xFB1D;              } else {                return c >= 0xFB1F && c <= 0xFB28 || c >= 0xFB2A && c <= 0xFB36;              }            } else {              if (c < 0xFB40) {                return c >= 0xFB38 && c <= 0xFB3C || c == 0xFB3E;              } else {                return c >= 0xFB40 && c <= 0xFB41 || c >= 0xFB43 && c <= 0xFB44;              }            }          }        } else {          if (c < 0xFF21) {            if (c < 0xFDF0) {              if (c < 0xFD50) {                return c >= 0xFB46 && c <= 0xFBB1 || c >= 0xFBD3 && c <= 0xFD3D;              } else {                return c >= 0xFD50 && c <= 0xFD8F || c >= 0xFD92 && c <= 0xFDC7;              }            } else {              if (c < 0xFE76) {                return c >= 0xFDF0 && c <= 0xFDFB || c >= 0xFE70 && c <= 0xFE74;              } else {                return c >= 0xFE76 && c <= 0xFEFC || c >= 0xFF10 && c <= 0xFF19;              }            }          } else {            if (c < 0xFFCA) {              if (c < 0xFF66) {                return c >= 0xFF21 && c <= 0xFF3A || c >= 0xFF41 && c <= 0xFF5A;              } else {                return c >= 0xFF66 && c <= 0xFFBE || c >= 0xFFC2 && c <= 0xFFC7;              }            } else {              if (c < 0xFFDA) {                return c >= 0xFFCA && c <= 0xFFCF || c >= 0xFFD2 && c <= 0xFFD7;              } else {                return c >= 0xFFDA && c <= 0xFFDC;              }            }          }        }      }    }  }}  }
class C{  public int size(){  return cnt;}  }
class C{  private void updateSyncStateFromSwitch(){  updateSyncEverythingState();  updateDataTypeState();  updateEncryptionState();}  }
class C{  public static void create(){  try {    Region r1=cache.getRegion(Region.SEPARATOR + REGION_NAME1);    Region r2=cache.getRegion(Region.SEPARATOR + REGION_NAME2);    r1.create("key-1","value");    r2.create("key-1","value");  } catch (  Exception ex) {    ex.printStackTrace();    Assert.fail("failed while region.create()",ex);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean canRepresentUnsigned(int x){  return (x >= umin && x <= umax);}  }
class C{  protected List executeCriteriaReturnScrCaList(Locale locale,StringBuffer query,BaseCriterioBusquedaVO baseCriterioBusqueda) throws HibernateException {  List result=null;  Session session=null;  try {    session=getSession();    Criteria criteriaResults=session.createCriteria(getScrCaLanguage(locale.getLanguage()));    criteriaResults.add(Expression.sql(query.toString()));    if (baseCriterioBusqueda != null) {      criteriaResults.setFirstResult(baseCriterioBusqueda.getOffset().intValue());      criteriaResults.setMaxResults(baseCriterioBusqueda.getLimit().intValue());    }    result=criteriaResults.list();  }  finally {    this.closeSession(session);  }  return result;}  }
class C{  public ShutdownServerScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  private static long parseTfdt(ParsableByteArray tfdt){  tfdt.setPosition(Atom.HEADER_SIZE);  int fullAtom=tfdt.readInt();  int version=Atom.parseFullAtomVersion(fullAtom);  return version == 1 ? tfdt.readUnsignedLongToLong() : tfdt.readUnsignedInt();}  }
class C{  public int hashCode(){  int result=17;  if (tableName != null) {    result=37 * tableName.hashCode();  }  if (repositoryName != null) {    result=37 * repositoryName.hashCode();  }  return result;}  }
class C{  public static ZTauElement round(SimpleBigDecimal lambda0,SimpleBigDecimal lambda1,byte mu){  int scale=lambda0.getScale();  if (lambda1.getScale() != scale) {    throw new IllegalArgumentException("lambda0 and lambda1 do not " + "have same scale");  }  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger f0=lambda0.round();  BigInteger f1=lambda1.round();  SimpleBigDecimal eta0=lambda0.subtract(f0);  SimpleBigDecimal eta1=lambda1.subtract(f1);  SimpleBigDecimal eta=eta0.add(eta0);  if (mu == 1) {    eta=eta.add(eta1);  } else {    eta=eta.subtract(eta1);  }  SimpleBigDecimal threeEta1=eta1.add(eta1).add(eta1);  SimpleBigDecimal fourEta1=threeEta1.add(eta1);  SimpleBigDecimal check1;  SimpleBigDecimal check2;  if (mu == 1) {    check1=eta0.subtract(threeEta1);    check2=eta0.add(fourEta1);  } else {    check1=eta0.add(threeEta1);    check2=eta0.subtract(fourEta1);  }  byte h0=0;  byte h1=0;  if (eta.compareTo(ECConstants.ONE) >= 0) {    if (check1.compareTo(MINUS_ONE) < 0) {      h1=mu;    } else {      h0=1;    }  } else {    if (check2.compareTo(ECConstants.TWO) >= 0) {      h1=mu;    }  }  if (eta.compareTo(MINUS_ONE) < 0) {    if (check1.compareTo(ECConstants.ONE) >= 0) {      h1=(byte)-mu;    } else {      h0=-1;    }  } else {    if (check2.compareTo(MINUS_TWO) < 0) {      h1=(byte)-mu;    }  }  BigInteger q0=f0.add(BigInteger.valueOf(h0));  BigInteger q1=f1.add(BigInteger.valueOf(h1));  return new ZTauElement(q0,q1);}  }
class C{  public IfStatement createIfStatement(){  IfStatementImpl ifStatement=new IfStatementImpl();  return ifStatement;}  }
class C{  public Object refresh(){  try {    int size=getRowCount();    for (int i=0; i < size; i++) {      BTDownloadDataLine ud=get(i);      ud.update();    }    fireTableRowsUpdated(0,size);  } catch (  Exception e) {    System.out.println("ATTENTION: Send the following output to the FrostWire Development team.");    System.out.println("===============================START COPY & PASTE=======================================");    e.printStackTrace();    System.out.println("===============================END COPY & PASTE=======================================");    return Boolean.FALSE;  }  return Boolean.TRUE;}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  if (!super.equals(o)) {    return false;  }  final MTreeDirectoryEntry that=(MTreeDirectoryEntry)o;  if (Math.abs(coveringRadius - that.coveringRadius) < Double.MIN_NORMAL) {    return false;  }  if (Math.abs(parentDistance - that.parentDistance) < Double.MIN_NORMAL) {    return false;  }  return !(routingObjectID != null ? !DBIDUtil.equal(routingObjectID,that.routingObjectID) : that.routingObjectID != null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public MockVariant(int start,int end,byte[][] alleles,int id){  super(id,"",start - 1,end - 1,toAlleles("",start - 1,end - 1,alleles),false);}  }
class C{  default B resolved(final BookMeta src){  this.meta().setResolved(src.isResolved());  return this.getBuilder();}  }
class C{  public Boolean isIntraVmAffinity(){  return intraVmAffinity;}  }
class C{  ElemTemplateElement popElemTemplateElement(){  return (ElemTemplateElement)m_elems.pop();}  }
class C{  public SVDMatrix(Matrix Arg,boolean thin,boolean wantu,boolean wantv){  final double[][] A=Arg.toDoubleArray();  m=(int)Arg.getRowCount();  n=(int)Arg.getColumnCount();  this.thin=thin;  ncu=thin ? Math.min(m,n) : m;  s=new double[Math.min(m + 1,n)];  U=new double[m][ncu];  V=new double[n][n];  final double[] e=new double[n];  final double[] work=new double[m];  final int nct=Math.min(m - 1,n);  final int nrt=Math.max(0,Math.min(n - 2,m));  final int lu=Math.max(nct,nrt);  for (int k=0; k < lu; k++) {    if (k < nct) {      s[k]=0;      for (int i=k; i < m; i++) {        s[k]=MathUtil.hypot(s[k],A[i][k]);      }      if (s[k] != 0.0) {        if (A[k][k] < 0.0) {          s[k]=-s[k];        }        for (int i=k; i < m; i++) {          A[i][k]/=s[k];        }        A[k][k]+=1.0;      }      s[k]=-s[k];    }    for (int j=k + 1; j < n; j++) {      if ((k < nct) & (s[k] != 0.0)) {        double t=0;        for (int i=k; i < m; i++) {          t+=A[i][k] * A[i][j];        }        t=-t / A[k][k];        for (int i=k; i < m; i++) {          A[i][j]+=t * A[i][k];        }      }      e[j]=A[k][j];    }    if (wantu & (k < nct)) {      for (int i=k; i < m; i++) {        U[i][k]=A[i][k];      }    }    if (k < nrt) {      e[k]=0;      for (int i=k + 1; i < n; i++) {        e[k]=MathUtil.hypot(e[k],e[i]);      }      if (e[k] != 0.0) {        if (e[k + 1] < 0.0) {          e[k]=-e[k];        }        for (int i=k + 1; i < n; i++) {          e[i]/=e[k];        }        e[k + 1]+=1.0;      }      e[k]=-e[k];      if ((k + 1 < m) & (e[k] != 0.0)) {        for (int i=k + 1; i < m; i++) {          work[i]=0.0;        }        for (int j=k + 1; j < n; j++) {          for (int i=k + 1; i < m; i++) {            work[i]+=e[j] * A[i][j];          }        }        for (int j=k + 1; j < n; j++) {          double t=-e[j] / e[k + 1];          for (int i=k + 1; i < m; i++) {            A[i][j]+=t * work[i];          }        }      }      if (wantv) {        for (int i=k + 1; i < n; i++) {          V[i][k]=e[i];        }      }    }  }  int p=Math.min(n,m + 1);  if (nct < n) {    s[nct]=A[nct][nct];  }  if (m < p) {    s[p - 1]=0.0;  }  if (nrt + 1 < p) {    e[nrt]=A[nrt][p - 1];  }  e[p - 1]=0.0;  if (wantu) {    for (int j=nct; j < ncu; j++) {      for (int i=0; i < m; i++) {        U[i][j]=0.0;      }      U[j][j]=1.0;    }    for (int k=nct - 1; k >= 0; k--) {      if (s[k] != 0.0) {        for (int j=k + 1; j < ncu; j++) {          double t=0;          for (int i=k; i < m; i++) {            t+=U[i][k] * U[i][j];          }          t=-t / U[k][k];          for (int i=k; i < m; i++) {            U[i][j]+=t * U[i][k];          }        }        for (int i=k; i < m; i++) {          U[i][k]=-U[i][k];        }        U[k][k]+=1.0;        for (int i=0; i < k - 1; i++) {          U[i][k]=0.0;        }      } else {        for (int i=0; i < m; i++) {          U[i][k]=0.0;        }        U[k][k]=1.0;      }    }  }  if (wantv) {    for (int k=n - 1; k >= 0; k--) {      if ((k < nrt) & (e[k] != 0.0)) {        for (int j=k + 1; j < n; j++) {          double t=0;          for (int i=k + 1; i < n; i++) {            t+=V[i][k] * V[i][j];          }          t=-t / V[k + 1][k];          for (int i=k + 1; i < n; i++) {            V[i][j]+=t * V[i][k];          }        }      }      for (int i=0; i < n; i++) {        V[i][k]=0.0;      }      V[k][k]=1.0;    }  }  final int pp=p - 1;  while (p > 0) {    int k, kase;    for (k=p - 2; k >= -1; k--) {      if (k == -1) {        break;      }      if (Math.abs(e[k]) <= TINY + EPSILON * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {        e[k]=0.0;        break;      }    }    if (k == p - 2) {      kase=4;    } else {      int ks;      for (ks=p - 1; ks >= k; ks--) {        if (ks == k) {          break;        }        double t=(ks != p ? Math.abs(e[ks]) : 0.) + (ks != k + 1 ? Math.abs(e[ks - 1]) : 0.);        if (Math.abs(s[ks]) <= TINY + EPSILON * t) {          s[ks]=0.0;          break;        }      }      if (ks == k) {        kase=3;      } else       if (ks == p - 1) {        kase=1;      } else {        kase=2;        k=ks;      }    }    k++;switch (kase) {case 1:{        double f=e[p - 2];        e[p - 2]=0.0;        for (int j=p - 2; j >= k; j--) {          double t=MathUtil.hypot(s[j],f);          double cs=s[j] / t;          double sn=f / t;          s[j]=t;          if (j != k) {            f=-sn * e[j - 1];            e[j - 1]=cs * e[j - 1];          }          if (wantv) {            for (int i=0; i < n; i++) {              t=cs * V[i][j] + sn * V[i][p - 1];              V[i][p - 1]=-sn * V[i][j] + cs * V[i][p - 1];              V[i][j]=t;            }          }        }      }    break;case 2:{    double f=e[k - 1];    e[k - 1]=0.0;    for (int j=k; j < p; j++) {      double t=MathUtil.hypot(s[j],f);      double cs=s[j] / t;      double sn=f / t;      s[j]=t;      f=-sn * e[j];      e[j]=cs * e[j];      if (wantu) {        for (int i=0; i < m; i++) {          t=cs * U[i][j] + sn * U[i][k - 1];          U[i][k - 1]=-sn * U[i][j] + cs * U[i][k - 1];          U[i][j]=t;        }      }    }  }break;case 3:{final double scale=Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]),Math.abs(s[p - 2])),Math.abs(e[p - 2])),Math.abs(s[k])),Math.abs(e[k]));final double sp=s[p - 1] / scale;final double spm1=s[p - 2] / scale;final double epm1=e[p - 2] / scale;final double sk=s[k] / scale;final double ek=e[k] / scale;final double b=((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;final double c=(sp * epm1) * (sp * epm1);double shift=0.0;if ((b != 0.0) | (c != 0.0)) {  shift=Math.sqrt(b * b + c);  if (b < 0.0) {    shift=-shift;  }  shift=c / (b + shift);}double f=(sk + sp) * (sk - sp) + shift;double g=sk * ek;for (int j=k; j < p - 1; j++) {  double t=MathUtil.hypot(f,g);  double cs=f / t;  double sn=g / t;  if (j != k) {    e[j - 1]=t;  }  f=cs * s[j] + sn * e[j];  e[j]=cs * e[j] - sn * s[j];  g=sn * s[j + 1];  s[j + 1]=cs * s[j + 1];  if (wantv) {    for (int i=0; i < n; i++) {      t=cs * V[i][j] + sn * V[i][j + 1];      V[i][j + 1]=-sn * V[i][j] + cs * V[i][j + 1];      V[i][j]=t;    }  }  t=MathUtil.hypot(f,g);  cs=f / t;  sn=g / t;  s[j]=t;  f=cs * e[j] + sn * s[j + 1];  s[j + 1]=-sn * e[j] + cs * s[j + 1];  g=sn * e[j + 1];  e[j + 1]=cs * e[j + 1];  if (wantu && (j < m - 1)) {    for (int i=0; i < m; i++) {      t=cs * U[i][j] + sn * U[i][j + 1];      U[i][j + 1]=-sn * U[i][j] + cs * U[i][j + 1];      U[i][j]=t;    }  }}e[p - 2]=f;}break;case 4:{if (s[k] <= 0.0) {s[k]=(s[k] < 0.0 ? -s[k] : 0.0);if (wantv) {for (int i=0; i < n; i++) {  V[i][k]=-V[i][k];}}}while (k < pp) {if (s[k] >= s[k + 1]) {break;}double t=s[k];s[k]=s[k + 1];s[k + 1]=t;if (wantv && (k < n - 1)) {for (int i=0; i < n; i++) {  t=V[i][k + 1];  V[i][k + 1]=V[i][k];  V[i][k]=t;}}if (wantu && (k < m - 1)) {for (int i=0; i < m; i++) {  t=U[i][k + 1];  U[i][k + 1]=U[i][k];  U[i][k]=t;}}k++;}p--;}break;}}}  }
class C{  public ReplDBMSFilteredEvent(String lastFilteredId,Long firstFilteredSeqno,Long lastFilteredSeqno,Short lastFragno){  super(firstFilteredSeqno,new DBMSEvent(lastFilteredId));  this.seqnoEnd=lastFilteredSeqno;  this.fragnoEnd=lastFragno;}  }
class C{  public ScrambledZipfianGenerator(long _items){  this(0,_items - 1);}  }
class C{  public long create_chunk_large_offset_atom(MP4DataStream bitstream) throws IOException {  create_full_atom(bitstream);  chunks=new Vector<Long>();  entryCount=(int)bitstream.readBytes(4);  readed+=4;  for (int i=0; i < entryCount; i++) {    long chunkOffset=bitstream.readBytes(8);    chunks.addElement(Long.valueOf(chunkOffset));    readed+=8;  }  return readed;}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Constants.INDENT);  buffer.append("saltSource: ");  buffer.append(saltSource);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pSaltSourceData: ");  buffer.append(Functions.toHexString(pSaltSourceData));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulSaltSourceDataLen: ");  buffer.append(pSaltSourceData.length);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("iterations: ");  buffer.append(iterations);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("prf: ");  buffer.append(prf);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pPrfData: ");  buffer.append(Functions.toHexString(pPrfData));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulPrfDataLen: ");  buffer.append(pPrfData.length);  return buffer.toString();}  }
class C{  public OPTRecord(int payloadSize,int xrcode,int version,int flags){  this(payloadSize,xrcode,version,flags,null);}  }
class C{  public static void run(AdSense adsense,String adClientId,String customChannelId,int maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all ad units for custom channel %s\n",customChannelId);  System.out.println("=================================================================");  String pageToken=null;  do {    AdUnits adUnits=adsense.customchannels().adunits().list(adClientId,customChannelId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (adUnits.getItems() != null && !adUnits.getItems().isEmpty()) {      for (      AdUnit unit : adUnits.getItems()) {        System.out.printf("Ad unit with code \"%s\", name \"%s\" and status \"%s\" was found.\n",unit.getCode(),unit.getName(),unit.getStatus());      }    } else {      System.out.println("No ad units found.");    }    pageToken=adUnits.getNextPageToken();  } while (pageToken != null);  System.out.println();}  }
class C{  public DefaultCloseFuture(IoSession session){  super(session);}  }
class C{  public static void assertJDelete(String request,String... tests) throws Exception {  assertJDelete(request,JSONTestUtil.DEFAULT_DELTA,tests);}  }
class C{  public boolean isMenu(){  return TREETYPE_Menu.equals(getTreeType());}  }
class C{  public int size(Object indexKey){  return hashIndexSetProperties.size;}  }
class C{  @Delete public String remove(String json){  IACLService ACL=(IACLService)getContext().getAttributes().get(IACLService.class.getCanonicalName());  ACLRule rule;  try {    rule=jsonToRule(json);  } catch (  Exception e) {    log.error("Error parsing ACL rule: " + json,e);    return "{\"status\" : \"Failed! " + e.getMessage() + "\"}";  }  boolean exists=false;  Iterator<ACLRule> iter=ACL.getRules().iterator();  while (iter.hasNext()) {    ACLRule r=iter.next();    if (r.getId() == rule.getId()) {      exists=true;      break;    }  }  String status=null;  if (!exists) {    status="Failed! a rule with this ID doesn't exist.";    log.error(status);  } else {    ACL.removeRule(rule.getId());    status="Success! Rule deleted";  }  return ("{\"status\" : \"" + status + "\"}");}  }
class C{  public static void main(String[] args){  log.info("===============================================================================");  log.info(" Determining the toll potential of agents.");  log.info("-------------------------------------------------------------------------------");  String baseFilename=args[0];  String linksFilename=args[1];  String outputFolder=args[2];  List<Id<Vehicle>> breakList=new ArrayList<>();  for (int i=3; i < args.length; i++) {    breakList.add(Id.create(args[i],Vehicle.class));  }  MyTollPotentialCalculator mtpc=new MyTollPotentialCalculator();  List<Id<Link>> linkList=mtpc.readLinkIdsFromRoadPricingScheme(linksFilename);  log.info("-------------------------------------------------------------------------------");  mtpc.processEventsFile(baseFilename,linkList,breakList,mtpc.scheme);  mtpc.writeMaps(outputFolder);  log.info("-------------------------------------------------------------------------------");  log.info("                                 Completed");  log.info("===============================================================================");}  }
class C{  @SuppressWarnings("deprecation") @Override public void stop(){  Enumeration<String> en=m_listenees.keys();  while (en.hasMoreElements()) {    Object tempO=m_listenees.get(en.nextElement());    if (tempO instanceof BeanCommon) {      ((BeanCommon)tempO).stop();    }  }  if (m_filterThread != null) {    m_filterThread.interrupt();    m_filterThread.stop();    m_filterThread=null;    m_visual.setStatic();  }}  }
class C{  private void onWifiP2pStateChanged(Context context,Intent intent){  int state=intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE,DEFAULT_EXTRA_INT);  if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {    Log.d(TAG,"Wifi Direct enabled");  } else   if (state == WifiP2pManager.WIFI_P2P_STATE_DISABLED) {    Log.d(TAG,"Wifi Direct disabled");  } else   if (state == DEFAULT_EXTRA_INT) {    Log.e(TAG,"Wifi P2P state changed event handled, but the intent " + "doesn't include an int to tell whether it's enabled or " + "disabled!");  }}  }
class C{  public void update(byte[] buffer){  update(buffer,0,buffer.length);}  }
class C{  public boolean reverseAccrualIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return false;}  }
class C{  public void addSeries(final String title,final double[] xs,final double[] ys){  XYSeries series=new XYSeries(title,false,true);  for (int i=0, n=Math.min(xs.length,ys.length); i < n; i++) {    series.add(xs[i],ys[i]);  }  this.dataset.addSeries(series);}  }
class C{  @UnpreemptibleNoWarn("No point threading until threading is booted") @Entrypoint public static void boot(){  writingBootImage=false;  runningVM=true;  verboseBoot=BootRecord.the_boot_record.verboseBoot;  verboseSignalHandling=BootRecord.the_boot_record.verboseSignalHandling != 0;  sysWriteLockOffset=Entrypoints.sysWriteLockField.getOffset();  if (verboseBoot >= 1)   VM.sysWriteln("Booting");  if (verboseBoot >= 1)   VM.sysWriteln("Setting up current RVMThread");  if (VM.BuildForIA32) {    org.jikesrvm.ia32.ThreadLocalState.boot();  } else {    if (VM.VerifyAssertions)     VM._assert(VM.BuildForPowerPC);    org.jikesrvm.ppc.ThreadLocalState.boot();  }  if (verboseBoot >= 1)   VM.sysWriteln("Doing thread initialization");  RVMThread currentThread=RVMThread.getCurrentThread();  currentThread.stackLimit=Magic.objectAsAddress(currentThread.getStack()).plus(StackFrameLayout.getStackSizeGuard());  finishBooting();}  }
class C{  @Override protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  try {    ((XBeeListener)client).message((XBeeMessage)m);  } catch (  java.lang.ClassCastException cce) {    ((IEEE802154Listener)client).message((IEEE802154Message)m);  }}  }
class C{  public IvParameterSpec(byte[] iv,int offset,int len){  if (iv == null) {    throw new IllegalArgumentException("IV missing");  }  if (iv.length - offset < len) {    throw new IllegalArgumentException("IV buffer too short for given offset/length combination");  }  if (len < 0) {    throw new ArrayIndexOutOfBoundsException("len is negative");  }  this.iv=new byte[len];  System.arraycopy(iv,offset,this.iv,0,len);}  }
class C{  public List<ConsoleHandler> consoleHandlers(){  return subresources().consoleHandlers();}  }
class C{  public Date readLongDateTime(int index){  throw new UnsupportedOperationException();}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override protected CommandLine createCommandLine(BuilderConfiguration config) throws BuilderException {  File workDir=config.getWorkDir();  File scriptFile=new java.io.File(workDir.getParentFile(),workDir.getName() + ".yo-script");  try (Writer fw=new OutputStreamWriter(new FileOutputStream(scriptFile),"UTF-8")){    List<String> targets=config.getTargets();    int i=0;    while (i < targets.size()) {      fw.write("yo --no-insight ".concat(targets.get(i++)).concat(" ").concat(targets.get(i++)).concat("\n"));    }  } catch (  IOException e) {    throw new BuilderException(e);  }  if (!scriptFile.setExecutable(true)) {    throw new BuilderException("Unable to set executable flag on '" + scriptFile + "'");  }  final CommandLine commandLine=new CommandLine(scriptFile.getAbsolutePath());  commandLineToFile.put(commandLine,scriptFile);  return commandLine;}  }
class C{  protected final void copyBitcoinHeaderTo(final Block block){  block.nonce=nonce;  block.prevBlockHash=prevBlockHash;  block.merkleRoot=getMerkleRoot();  block.version=version;  block.time=time;  block.difficultyTarget=difficultyTarget;  block.transactions=null;  block.hash=getHash();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.430 -0500",hash_original_method="C5A2747735A9CF7D4575D6EE52958D1F",hash_generated_method="059683897E09276870652FDEEC4AF7CE") public void fling(int velocityX){  if (getChildCount() > 0) {    int width=getWidth() - mPaddingRight - mPaddingLeft;    int right=getChildAt(0).getWidth();    mScroller.fling(mScrollX,mScrollY,velocityX,0,0,Math.max(0,right - width),0,0,width / 2,0);    final boolean movingRight=velocityX > 0;    View currentFocused=findFocus();    View newFocused=findFocusableViewInMyBounds(movingRight,mScroller.getFinalX(),currentFocused);    if (newFocused == null) {      newFocused=this;    }    if (newFocused != currentFocused) {      newFocused.requestFocus(movingRight ? View.FOCUS_RIGHT : View.FOCUS_LEFT);    }    invalidate();  }}  }
class C{  public static synchronized boolean isEventObserved(Class<? extends MvcEvent> eventType){  return observedEvents == null ? false : observedEvents.contains(eventType);}  }
class C{  private final int _skipColon() throws IOException, JsonParseException {  if (_inputPtr >= _inputEnd) {    loadMoreGuaranteed();  }  int i=_inputBuffer[_inputPtr++];  if (i == INT_COLON) {    if (_inputPtr < _inputEnd) {      i=_inputBuffer[_inputPtr] & 0xFF;      if (i > INT_SPACE && i != INT_SLASH) {        ++_inputPtr;        return i;      }    }  } else {    i&=0xFF;    space_loop:     while (true) {switch (i) {case INT_SPACE:case INT_TAB:        break;case INT_CR:      _skipCR();    break;case INT_LF:  _skipLF();break;case INT_SLASH:_skipComment();break;default :if (i < INT_SPACE) {_throwInvalidSpace(i);}break space_loop;}if (_inputPtr >= _inputEnd) {loadMoreGuaranteed();}i=_inputBuffer[_inputPtr++] & 0xFF;}if (i != INT_COLON) {_reportUnexpectedChar(i,"was expecting a colon to separate field name and value");}}while (_inputPtr < _inputEnd || loadMore()) {i=_inputBuffer[_inputPtr++] & 0xFF;if (i > INT_SPACE) {if (i != INT_SLASH) {return i;}_skipComment();} else if (i != INT_SPACE) {if (i == INT_LF) {_skipLF();} else if (i == INT_CR) {_skipCR();} else if (i != INT_TAB) {_throwInvalidSpace(i);}}}throw _constructError("Unexpected end-of-input within/between " + _parsingContext.getTypeDesc() + " entries");}  }
class C{  public void addTransactionPendingAck(SIPServerTransaction serverTransaction){  String branchId=((SIPRequest)serverTransaction.getRequest()).getTopmostVia().getBranch();  if (branchId != null) {    this.terminatedServerTransactionsPendingAck.put(branchId,serverTransaction);  }}  }
class C{  CharSequence processPattern(CharSequence input){  final Matcher m=pattern.matcher(input);  final StringBuffer cumulativeOutput=new StringBuffer();  int cumulative=0;  int lastMatchEnd=0;  while (m.find()) {    final int groupSize=m.end() - m.start();    final int skippedSize=m.start() - lastMatchEnd;    lastMatchEnd=m.end();    final int lengthBeforeReplacement=cumulativeOutput.length() + skippedSize;    m.appendReplacement(cumulativeOutput,replacement);    final int replacementSize=cumulativeOutput.length() - lengthBeforeReplacement;    if (groupSize != replacementSize) {      if (replacementSize < groupSize) {        cumulative+=groupSize - replacementSize;        int atIndex=lengthBeforeReplacement + replacementSize;        addOffCorrectMap(atIndex,cumulative);      } else {        for (int i=groupSize; i < replacementSize; i++) {          addOffCorrectMap(lengthBeforeReplacement + i,--cumulative);        }      }    }  }  m.appendTail(cumulativeOutput);  return cumulativeOutput;}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  @Override public boolean spawnPig(World world,double x,double y,double z){  setNumPigs(getNumPigs() - 1);  return super.spawnPig(world,x,y,z);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){}  }
class C{  public DateConverter(final TimeZone timeZone){  this(DEFAULT_PATTERN,DEFAULT_ACCEPTABLE_FORMATS,timeZone);}  }
class C{  private ActionErrors validateFormAlBajar(HttpServletRequest request,NivelArchivoVO nivelArchivoVO,ActionErrors errors,int lastPosition){  validateNivelArchivoSinArchivo(request,nivelArchivoVO,errors);  validateNivelArchivoNoLastSelected(request,nivelArchivoVO,errors,lastPosition);  return errors;}  }
class C{  public CActionDeleteUnselectedNodes(final ZyGraph graph){  super("Delete Unselected Nodes");  m_graph=graph;}  }
class C{  public void objHasBeenPlaced(){  if (getObjectCreationMode() == ObjectCreationMode.MULTIPLE_OBJECTS) {    setObjToPlace(MathObject.newInstanceWithType(getObjToPlace().getType()));  } else {    setObjectCreationMode(ObjectCreationMode.NOT_PLACING_OBJECT);    setObjToPlace(null);    objectToolbar.updateButton();  }}  }
class C{  public Uri buildRequestUri(int track,int chunkIndex){  Assertions.checkState(tracks != null);  Assertions.checkState(chunkStartTimes != null);  Assertions.checkState(chunkIndex < chunkStartTimes.size());  String chunkUrl=chunkTemplate.replace(URL_PLACEHOLDER_BITRATE,Integer.toString(tracks[track].bitrate)).replace(URL_PLACEHOLDER_START_TIME,chunkStartTimes.get(chunkIndex).toString());  return Util.getMergedUri(baseUri,chunkUrl);}  }
class C{  public EmbeddedZookeeper() throws IOException {  this.port=getAvailablePort();  this.snapshotDir=getTempDir();  this.logDir=getTempDir();  this.factory=new NIOServerCnxnFactory();  factory.configure(new InetSocketAddress("127.0.0.1",port),1024);  try {    int tickTime=500;    factory.startup(new ZooKeeperServer(snapshotDir,logDir,tickTime));  } catch (  InterruptedException e) {    throw new IOException(e);  }}  }
class C{  public synchronized void accelerateTimeTravel(){  if (speedIndex < SPEEDS.length - 1) {    Log.d(TAG,"Accelerating speed to: " + SPEEDS[speedIndex]);    ++speedIndex;  } else {    Log.d(TAG,"Already at max forward speed");  }}  }
class C{  public void putEntryInLocalMonitoringRegion(String name,Object data){  if (localMonitoringRegion != null && !localMonitoringRegion.isDestroyed()) {    localMonitoringRegion.put(name,data);  }}  }
class C{  protected void installDefaults(){  updateStyle(splitPane);  setOrientation(splitPane.getOrientation());  setContinuousLayout(splitPane.isContinuousLayout());  resetLayoutManager();  if (nonContinuousLayoutDivider == null) {    setNonContinuousLayoutDivider(createDefaultNonContinuousLayoutDivider(),true);  } else {    setNonContinuousLayoutDivider(nonContinuousLayoutDivider,true);  }  if (managingFocusForwardTraversalKeys == null) {    managingFocusForwardTraversalKeys=new HashSet();    managingFocusForwardTraversalKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,0));  }  splitPane.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,managingFocusForwardTraversalKeys);  if (managingFocusBackwardTraversalKeys == null) {    managingFocusBackwardTraversalKeys=new HashSet();    managingFocusBackwardTraversalKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,InputEvent.SHIFT_MASK));  }  splitPane.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,managingFocusBackwardTraversalKeys);}  }
class C{  private boolean qualifies(final IAbstractCriteriumTreeNode node,final NaviNode naviNode){  if (node.getCriterium() instanceof IAbstractRootCriterium) {    return qualifiesRootNode(node,naviNode);  } else   if (node.getCriterium() instanceof IAbstractAndCriterium) {    return qualifiesAndNode(node,naviNode);  } else   if (node.getCriterium() instanceof IAbstractOrCriterium) {    return qualifiesOrNode(node,naviNode);  } else   if (node.getCriterium() instanceof IAbstractNotCriterium) {    return qualifiesNotNode(node,naviNode);  }  return node.getCriterium().matches(naviNode);}  }
class C{  public static Object invokeMethod(Object instance,Class<?> clazz,String methodName,Object... arguments) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException {  return getMethod(clazz,methodName,DataType.getPrimitive(arguments)).invoke(instance,arguments);}  }
class C{  public static Mapping<LocalDate> date(Constraint... constraints){  return date("yyyy-MM-dd",constraints);}  }
class C{  public int compare(double[] a1,double[] a2){  if (a1 == a2) {    return 0;  }  int len=Math.min(a1.length,a2.length);  for (int i=0; i < len; i++) {    if (a1[i] != a2[i]) {      return ((a1[i] > a2[i]) ? 1 : -1);    }  }  return a1.length - a2.length;}  }
class C{  private String testConfigurationFile(String fileName){  File file=new File(fileName);  final String portStr=System.getProperty("rmi.port",null);  final int port=portStr != null ? Integer.parseInt(portStr) : basePort;  if (fileName.endsWith("ok.properties")) {    String errStr=null;    for (int i=0; i < PORT_TEST_LEN; i++) {      try {        errStr=testConfiguration(file,port + testPort++);        return errStr;      } catch (      BindException e) {      }    }    return "Can not locate available port";  }  if (fileName.endsWith("ko.properties")) {    return testConfigurationKo(file,port + testPort++);  }  return fileName + ": test file suffix must be one of [ko|ok].properties";}  }
class C{  public void incEventsNotQueuedConflated(){  this.stats.incInt(eventsNotQueuedConflatedId,1);}  }
class C{  public boolean hasChild(){  final String c=this.record.get("child");  return (c != null && Base64Order.enhancedCoder.decode(c) != null) ? true : false;}  }
class C{  @Override public void encrypt(int[] buffer){  int nLen=buffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=2) {    lTemp=BinConverter.intArrayToLong(buffer,nI);    lTemp=encryptBlock(lTemp);    BinConverter.longToIntArray(lTemp,buffer,nI);  }  ;}  }
class C{  public void refresh(StepExecution freshStepExecution){  if (!this.getId().equals(freshStepExecution.getId())) {    throw new IllegalArgumentException("Coding error - calling StepExecution.refresh (freshStepExecution) with a StepExecution object with the wrong id.");  }  assert (this != freshStepExecution);  this.completedTime=freshStepExecution.completedTime;  this.createdTime=freshStepExecution.createdTime;  this.proportionCompleted=freshStepExecution.proportionCompleted;  this.startedRunningTime=freshStepExecution.startedRunningTime;  this.submittedTime=freshStepExecution.submittedTime;  this.state=freshStepExecution.state;  this.setException(freshStepExecution.getException());}  }
class C{  public Camera(){  super();  mLocalOrientation=Quaternion.getIdentity();  mIsCamera=true;  mFrustum=new Frustum();  mFrustumCorners=new Vector3[8];  for (int i=0; i < 8; i++) {    mFrustumCorners[i]=new Vector3();  }}  }
class C{  public static <V>List<V> invertList(List<V> sourceList){  if (isEmpty(sourceList)) {    return sourceList;  }  List<V> invertList=new ArrayList<V>(sourceList.size());  for (int i=sourceList.size() - 1; i >= 0; i--) {    invertList.add(sourceList.get(i));  }  return invertList;}  }
class C{  public ItemStack yankSlot(@Nonnull IInventory inv,int slot){  final ItemStack stack=inv.getStackInSlot(slot);  if (stack != null) {    return inv.decrStackSize(slot,stack.stackSize);  }  return null;}  }
class C{  @Nullable public static IgfsPath readPath(BinaryRawReader reader){  if (reader.readBoolean()) {    IgfsPath path=new IgfsPath();    path.readRawBinary(reader);    return path;  } else   return null;}  }
class C{  JavaFileObject genCode(Env<AttrContext> env,JCClassDecl cdef) throws IOException {  try {    if (gen.genClass(env,cdef) && (errorCount() == 0))     return writer.writeClass(cdef.sym);  } catch (  ClassWriter.PoolOverflow ex) {    log.error(cdef.pos(),"limit.pool");  }catch (  ClassWriter.StringOverflow ex) {    log.error(cdef.pos(),"limit.string.overflow",ex.value.substring(0,20));  }catch (  CompletionFailure ex) {    chk.completionError(cdef.pos(),ex);  }  return null;}  }
class C{  static Float toFloat(String text){  if (text == null) {    return null;  }  return new Float(text);}  }
class C{  public void stop(){  this.left.stop();  this.right.stop();  this.highGear.off();}  }
class C{  public InputBuilder<T> emit(T record,int times){  if (times < 1) {    throw new IllegalArgumentException("Times has to be greater than 1.");  }  for (int i=0; i < times; i++) {    emit(record);  }  return this;}  }
class C{  public Instance nextElement(Instances dataset){  Instance result;  result=null;  if (isIncremental()) {    if (m_IncrementalBuffer != null) {      result=m_IncrementalBuffer;      m_IncrementalBuffer=null;    } else {      try {        result=m_Loader.getNextInstance(dataset);      } catch (      Exception e) {        e.printStackTrace();        result=null;      }    }  } else {    if (m_BatchCounter < m_BatchBuffer.numInstances()) {      result=m_BatchBuffer.instance(m_BatchCounter);      m_BatchCounter++;    }  }  if (result != null) {    result.setDataset(dataset);  }  return result;}  }
class C{  public Tree<L> shallowClone(){  ArrayList<Tree<L>> newChildren=new ArrayList<Tree<L>>(children.size());  for (  Tree<L> child : children) {    newChildren.add(child.shallowClone());  }  return new Tree<L>(label,newChildren);}  }
class C{  private GrantorInfo peekGrantor(){  return GrantorRequestProcessor.peekGrantor(this,this.ds);}  }
class C{  public void releaseMap(){  if (tgaInfo != null)   TGA.destroy(tgaInfo);  tgaInfo=null;  posToAtlasIndex=null;}  }
class C{  public static MekaFrame launchFrame(Class panelCls,String title,boolean center) throws Exception {  JPanel panel=(JPanel)panelCls.newInstance();  return launchFrame(panel,title,center);}  }
class C{  public static boolean downloadUrlToStorage(String url,String fileName,boolean showProgress){  return downloadUrlTo(url,fileName,showProgress,false,true,null);}  }
class C{  public static Integer toInteger(double d){  return Integer.valueOf((int)d);}  }
class C{  public ConstructHiveContextStatement(String serverAddress,Statement wrappedStatement){  this.serverAddress=serverAddress;  this.wrappedStatement=wrappedStatement;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String name=getString(stack);  byte type=WidgetMeta.getTypeForName(getString(stack));  Widget w=getWidget(stack);  if (w == null)   return null;  Widget[] wkids=(type == -1) ? w.contents() : w.contents(type);  if (name == null)   return (wkids.length > 0) ? wkids[0] : null; else {    for (int i=0; i < wkids.length; i++)     if (wkids[i].getUntranslatedName().equals(name))     return wkids[i];    return null;  }}  }
class C{  @Reference(authors="F. J. Rohlf",title="Methods of comparing classifications",booktitle="Annual Review of Ecology and Systematics",url="http://dx.doi.org/10.1146/annurev.es.05.110174.000533") public double computeTau(long c,long d,double m,long wd,long bd){  double tie=(wd * (wd - 1) + bd * (bd - 1)) >>> 1;  return (c - d) / Math.sqrt((m - tie) * m);}  }
class C{  public void deleteKey(IFitsHeader key){  deleteKey(key.key());}  }
class C{  public OptionFormat parse(String option) throws ParserException, IOException {  nextToken();  while (lookahead.ttype != StreamTokenizer.TT_EOF) {    if ((lookahead.ttype != StreamTokenizer.TT_WORD) || (lookahead.sval.compareTo(START) != 0)) {      nextToken();      continue;    }    match(START);    if ((lookahead.ttype == StreamTokenizer.TT_WORD) && (lookahead.sval.compareTo(option) == 0)) {      pushBack();      return optionStmt();    } else {      nextToken();    }  }  return null;}  }
class C{  public Map<String,Tuple<Version,String>> versions(){  return versions;}  }
class C{  public void addActionListener(ActionListener l){  eventDispatcher.addListener(l);}  }
class C{  public void addStartUpScript(String pathname){  _startUpScripts.add(pathname);  setDirtyAndFirePropertyChange("addStartUpScript",pathname,null);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector result=new Vector();  OptionUtils.add(result,super.listOptions());  OptionUtils.addOption(result,fileTipText(),"" + getDefaultFile(),'F');  return OptionUtils.toEnumeration(result);}  }
class C{  @Override public void onWebsocketHandshakeSentAsClient(WebSocket conn,ClientHandshake request) throws InvalidDataException {}  }
class C{  public void keyPressed(KeyEvent e){  int code=e.getKeyCode();  if (code == KeyEvent.VK_BACK_SPACE || code == KeyEvent.VK_LEFT) {    if (outputMark == getCaretPosition()) {      e.consume();    }  } else   if (code == KeyEvent.VK_HOME) {    int caretPos=getCaretPosition();    if (caretPos == outputMark) {      e.consume();    } else     if (caretPos > outputMark) {      if (!e.isControlDown()) {        if (e.isShiftDown()) {          moveCaretPosition(outputMark);        } else {          setCaretPosition(outputMark);        }        e.consume();      }    }  } else   if (code == KeyEvent.VK_ENTER) {    returnPressed();    e.consume();  } else   if (code == KeyEvent.VK_UP) {    historyIndex--;    if (historyIndex >= 0) {      if (historyIndex >= history.size()) {        historyIndex=history.size() - 1;      }      if (historyIndex >= 0) {        String str=history.get(historyIndex);        int len=getDocument().getLength();        replaceRange(str,outputMark,len);        int caretPos=outputMark + str.length();        select(caretPos,caretPos);      } else {        historyIndex++;      }    } else {      historyIndex++;    }    e.consume();  } else   if (code == KeyEvent.VK_DOWN) {    int caretPos=outputMark;    if (history.size() > 0) {      historyIndex++;      if (historyIndex < 0) {        historyIndex=0;      }      int len=getDocument().getLength();      if (historyIndex < history.size()) {        String str=history.get(historyIndex);        replaceRange(str,outputMark,len);        caretPos=outputMark + str.length();      } else {        historyIndex=history.size();        replaceRange("",outputMark,len);      }    }    select(caretPos,caretPos);    e.consume();  }}  }
class C{  public void autoSize(){  if (!autoResize)   return;}  }
class C{  private void checkSplitEdgesCorrectness(List splitEdges){  Coordinate[] edgePts=edge.getCoordinates();  SegmentString split0=(SegmentString)splitEdges.get(0);  Coordinate pt0=split0.getCoordinate(0);  if (!pt0.equals2D(edgePts[0]))   throw new RuntimeException("bad split edge start point at " + pt0);  SegmentString splitn=(SegmentString)splitEdges.get(splitEdges.size() - 1);  Coordinate[] splitnPts=splitn.getCoordinates();  Coordinate ptn=splitnPts[splitnPts.length - 1];  if (!ptn.equals2D(edgePts[edgePts.length - 1]))   throw new RuntimeException("bad split edge end point at " + ptn);}  }
class C{  public Matrix4x3f rotateYXZ(float angleY,float angleX,float angleZ){  return rotateYXZ(angleY,angleX,angleZ,this);}  }
class C{  private void initializeGui(){  setTitle("Log in to Google Spreadsheets");  Container panel=getContentPane();  panel.setLayout(new BorderLayout());  JPanel topPanel=new JPanel();  topPanel.setLayout(new GridLayout(4,1));  topPanel.add(new JLabel("Log in to Google Spreadsheets!"));  usernameField=new JTextField();  topPanel.add(usernameField);  passwordField=new JPasswordField();  topPanel.add(passwordField);  submitButton=new JButton("Log in!");  submitButton.addActionListener(new ActionHandler());  topPanel.add(submitButton);  panel.add(topPanel,BorderLayout.NORTH);  captchaImage=new JLabel("(A CAPTCHA may appear here)",SwingConstants.CENTER);  panel.add(captchaImage,BorderLayout.CENTER);  captchaAnswerField=new JTextField();  captchaAnswerField.setText("(type captcha answer here)");  panel.add(captchaAnswerField,BorderLayout.SOUTH);  setSize(300,240);  setVisible(true);}  }
class C{  public static EWMA fifteenMinuteEWMA(){  return new EWMA(M15_ALPHA,INTERVAL,TimeUnit.SECONDS);}  }
class C{  protected void beforeShow(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void flushSystemProducer(){  if (systemProducer != null) {    systemProducer.flush(SOURCE);  }}  }
class C{  public void visitInsn(int opcode){  if (mv != null) {    mv.visitInsn(opcode);  }}  }
class C{  public String func(String arg){  called=true;  actualValue=arg;  return "called";}  }
class C{  public synchronized boolean removeElement(Object object){  int index;  if ((index=indexOf(object,0)) == -1) {    return false;  }  removeElementAt(index);  return true;}  }
class C{  public INode copy(){  Column[] copy=new Column[8];  for (int i=0; i < 8; i++) {    copy[i]=cols[i].copy();  }  short[] freeCopy=new short[4];  short[] foundationCopy=new short[4];  for (int i=0; i < 4; i++) {    freeCopy[i]=freeEncoding[i];    foundationCopy[i]=foundationEncoding[i];  }  FreeCellNode node=new FreeCellNode(freeCopy,foundationCopy,copy);  return node;}  }
class C{  @Override public void flush() throws IOException {}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int emojiAlignment,int textSize){  addEmojis(context,text,emojiSize,emojiAlignment,textSize,0,-1,false);}  }
class C{  public synchronized final void removeRow(final int p,final boolean keepOrder){  assert p >= 0 : "p = " + p;  assert p < this.chunkcount : "p = " + p + ", chunkcount = "+ this.chunkcount;  assert this.chunkcount > 0 : "chunkcount = " + this.chunkcount;  assert this.sortBound <= this.chunkcount : "sortBound = " + this.sortBound + ", chunkcount = "+ this.chunkcount;  if (keepOrder && (p < this.sortBound)) {    final int addr=p * this.rowdef.objectsize;    System.arraycopy(this.chunkcache,addr + this.rowdef.objectsize,this.chunkcache,addr,(this.chunkcount - p - 1) * this.rowdef.objectsize);    this.sortBound--;  } else {    if (p != this.chunkcount - 1) {      System.arraycopy(this.chunkcache,(this.chunkcount - 1) * this.rowdef.objectsize,this.chunkcache,p * this.rowdef.objectsize,this.rowdef.objectsize);    }    if (this.sortBound > p)     this.sortBound=p;  }  this.chunkcount--;  this.lastTimeWrote=System.currentTimeMillis();  checkShrink();}  }
class C{  @Override public MapsCard toolbarColor(@ColorRes int toolbarColor){  if (toolbarColor == 0) {    Log.e("ToolbarColor","Impossible to set Toolbar Color to 0, default value transparent is set! Please Check it");    mToolbarColor=android.R.color.transparent;  } else {    mToolbarColor=toolbarColor;  }  return this;}  }
class C{  public static ImmutableMap<String,MySQLDataSources> buildShardMap(InputStream mysqlConfigStream,PropertiesConfiguration configuration){  MySQLConfigSchema mysqlConfig;  try {    mysqlConfig=MySQLConfigSchema.read(Preconditions.checkNotNull(mysqlConfigStream),configuration.getString("SHARD_ALLOWED_HOSTNAME_PREFIX"));  } catch (  Exception e) {    LOG.error("Failed to load mysql configuration",e);    throw new RuntimeException(e);  }  ImmutableMap.Builder<String,MySQLDataSources> shardMapBuilder=new ImmutableMap.Builder<String,MySQLDataSources>();  int numDbPerQueue=configuration.getInt("MYSQL_NUM_DB_PER_QUEUE",1);  for (  MySQLConfigSchema.Shard shard : mysqlConfig.shards) {    MySQLDataSources dataSources=new MySQLDataSources(configuration,shard.shardConfig.master.host,shard.shardConfig.master.port,shard.shardConfig.user,shard.shardConfig.passwd,shard.shardConfig.dequeueOnly);    for (int dbId=0; dbId < numDbPerQueue; dbId++) {      shardMapBuilder.put(MySQLBackendUtils.constructShardName(shard.id,dbId),dataSources);    }  }  return shardMapBuilder.build();}  }
class C{  public NodesStatsRequest(String... nodesIds){  super(nodesIds);}  }
class C{  public boolean equalsTypeAndFilter(FilterSpecCompiled other){  if (this.filterForEventType != other.filterForEventType) {    return false;  }  if (this.parameters.length != other.parameters.length) {    return false;  }  for (int i=0; i < this.parameters.length; i++) {    FilterSpecParam[] lineThis=this.parameters[i];    FilterSpecParam[] lineOther=other.parameters[i];    if (lineThis.length != lineOther.length) {      return false;    }    for (int j=0; j < lineThis.length; j++) {      if (!lineThis[j].equals(lineOther[j])) {        return false;      }    }  }  return true;}  }
class C{  public void testSetF13Momentary(){  boolean f13Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF13Momentary(f13Momentary);}  }
class C{  protected void paintChild(Graphics g,Rectangle alloc,int index){  View child=getView(index);  child.paint(g,alloc);}  }
class C{  public static void configureIfNecessary(String resourceName){  if (System.getProperty("log4j.configuration") == null) {    URL confUrl=Thread.currentThread().getContextClassLoader().getResource(resourceName);    if (confUrl != null) {      LogManager.resetConfiguration();      PropertyConfigurator.configure(confUrl);      java.util.logging.LogManager.getLogManager().reset();      SLF4JBridgeHandler.install();    }  }}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public boolean check(){  if (child == 0) {    return true;  }  if (secret == null) {    return false;  }  return Arrays.equals(secretHash,Tools.hashSecret(secret));}  }
class C{  private static Period extractPeriodFromXml(byte[] xmlBytes) throws EppException {  EppInput eppInput=unmarshal(EppInput.class,xmlBytes);  return ((DomainCommand.Create)((ResourceCommandWrapper)eppInput.getCommandWrapper().getCommand()).getResourceCommand()).getPeriod();}  }
class C{  public Attendee addAttendee(String email){  Attendee prop=new Attendee(null,email);  addAttendee(prop);  return prop;}  }
class C{  private QJoin findJoin(String propertyName,QueryObject<?> queryObject){  for (  QJoin join : queryObject.getJoins()) {    if (join.getFkeyProperty().equals(propertyName)) {      return join;    }  }  return null;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof Day)) {    return false;  }  Day that=(Day)obj;  if (!this.serialDate.equals(that.getSerialDate())) {    return false;  }  return true;}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  protected RTAMouseListener createMouseListener(){  return new RTextAreaMutableCaretEvent(this);}  }
class C{  public final void increaseScheduledWriteBytes(int increment){  throughputCalculationLock.lock();  try {    scheduledWriteBytes+=increment;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  public void variationMove(Move lastMove){  if (!vars.contains(currVariation)) {    vars.add(currVariation);    updateVariations();  }  currVariation.addMove(GameUtils.getPseudoSan(lastMove.getPiece(),lastMove.getCapture(),lastMove.getFrom(),lastMove.getTo()));  updateVariations();  updateToGame();}  }
class C{  public static GeneralCommandLine createAndSetupCmdLine(@Nullable final String workingDir,@Nullable final Map<String,String> userDefinedEnv,final boolean passParentEnv,@NotNull final String executablePath,@NotNull final String... arguments){  GeneralCommandLine cmdLine=new GeneralCommandLine();  cmdLine.setExePath(toSystemDependentName(executablePath));  if (workingDir != null) {    cmdLine.setWorkDirectory(toSystemDependentName(workingDir));  }  List<String> fixedArguments=new ArrayList<String>();  Collections.addAll(fixedArguments,arguments);  cmdLine.addParameters(fixedArguments);  cmdLine.setPassParentEnvironment(passParentEnv);  Map<String,String> env=cmdLine.getEnvironment();  if (userDefinedEnv != null) {    env.putAll(userDefinedEnv);  }  EnvironmentUtil.inlineParentOccurrences(env);  return cmdLine;}  }
class C{  private static int ipToBytes(String ip,byte[] bytes,boolean mustHave4) throws IPMatcherException {  String[] parts=ip.split("\\.");  if (parts.length > 4 || mustHave4 && parts.length != 4) {    throw new IPMatcherException("Malformed IP specification " + ip);  }  try {    for (int i=0; i < parts.length; i++) {      int p=Integer.parseInt(parts[i]);      if (p < 0 || p > 255) {        throw new IPMatcherException("Malformed IP specification " + ip);      }      bytes[i]=(byte)(p < 128 ? p : p - 256);    }  } catch (  NumberFormatException nfe) {    throw new IPMatcherException("Malformed IP specification " + ip,nfe);  }  return parts.length;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TMEMBER__ANNOTATIONS:    return annotations != null && !annotations.isEmpty();case TypesPackage.TMEMBER__AST_ELEMENT:  return astElement != null;case TypesPackage.TMEMBER__DECLARED_FINAL:return declaredFinal != DECLARED_FINAL_EDEFAULT;case TypesPackage.TMEMBER__DECLARED_STATIC:return declaredStatic != DECLARED_STATIC_EDEFAULT;case TypesPackage.TMEMBER__DECLARED_OVERRIDE:return declaredOverride != DECLARED_OVERRIDE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void testCatalog() throws Exception {  String currentCatalog=this.conn.getCatalog();  this.conn.setCatalog(currentCatalog);  assertTrue(currentCatalog.equals(this.conn.getCatalog()));}  }
class C{  private int[] blackWhiteRange(int fixedDimension,int maxWhiteRun,int minDim,int maxDim,boolean horizontal){  int center=(minDim + maxDim) >> 1;  int start=center;  while (start >= minDim) {    if (horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)) {      start--;    } else {      int whiteRunStart=start;      do {        start--;      } while (start >= minDim && !(horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)));      int whiteRunSize=whiteRunStart - start;      if (start < minDim || whiteRunSize > maxWhiteRun) {        start=whiteRunStart;        break;      }    }  }  start++;  int end=center;  while (end < maxDim) {    if (horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)) {      end++;    } else {      int whiteRunStart=end;      do {        end++;      } while (end < maxDim && !(horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)));      int whiteRunSize=end - whiteRunStart;      if (end >= maxDim || whiteRunSize > maxWhiteRun) {        end=whiteRunStart;        break;      }    }  }  end--;  return end > start ? new int[]{start,end} : null;}  }
class C{  @SuppressLint("JavascriptInterface") public void addJavascriptInterface(Object object,String name){  if (TextUtils.equals(name,JAVASCRIPT_INTERFACE_NAME)) {    throw new IllegalArgumentException(JAVASCRIPT_INTERFACE_NAME + " is a reserved Javascript Interface name.");  }  if (javascriptInterfaces.get(name) == null) {    javascriptInterfaces.put(name,object);    webView.addJavascriptInterface(object,name);    TurbolinksLog.d("Adding JavascriptInterface: " + name + " for "+ object.getClass().toString());  }}  }
class C{  public DoubleVector(double... vals){  mValues=vals.clone();}  }
class C{  public static void passedUse(Object object,Object caller,int useID){  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (isThreadNeqCurrentThread())   return;  tracer.trace.usePassed(object,caller,useID);}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitIntegerMemberValue(this);}  }
class C{  public static void createAndWaitForStream(AmazonKinesisClient kinesisClient,String streamName,int shardCount){  StreamStatus streamStatus=getStreamState(kinesisClient,streamName);  if (streamStatus != null) {    if (streamStatus == StreamStatus.ACTIVE) {      return;    }    if (streamStatus == StreamStatus.DELETING) {      waitForStreamState(kinesisClient,streamName,null);      createStream(streamName,shardCount,kinesisClient);    }  } else {    createStream(streamName,shardCount,kinesisClient);  }  waitForStreamState(kinesisClient,streamName,StreamStatus.ACTIVE);}  }
class C{  public static void encodingStats(){  if (DEBUG) {    Log.write("refs: ");    Log.writeln(startRefs + shortRefs + longRefs+ runRefs);    Log.write("start: ");    Log.writeln(startRefs);    Log.write("short: ");    Log.writeln(shortRefs);    Log.write("long: ");    Log.writeln(longRefs);    Log.write("run: ");    Log.writeln(runRefs);    Log.write("size: ");    Log.writeln(codeIndex);  }}  }
class C{  public void createSecondaryVolumeForMirror(StorageSystem storageSystem,URI sourceVolume,BlockMirror mirror) throws Exception {  log.info("SecondaryVolume for mirror creation operation started");  String taskId=UUID.randomUUID().toString();  TaskCompleter taskCompleter=new BlockMirrorCreateCompleter(mirror.getId(),taskId);  String asyncTaskMessageId=null;  HDSApiClient hdsApiClient=HDSUtils.getHDSApiClient(hdsApiFactory,storageSystem);  String systemObjectID=HDSUtils.getSystemObjectID(storageSystem);  StoragePool targetPool=dbClient.queryObject(StoragePool.class,mirror.getPool());  Volume source=dbClient.queryObject(Volume.class,sourceVolume);  TenantOrg tenant=dbClient.queryObject(TenantOrg.class,source.getTenant().getURI());  String tenantName=tenant.getLabel();  String targetLabelToUse=nameGenerator.generate(tenantName,mirror.getLabel(),mirror.getId().toString(),'-',HDSConstants.MAX_VOLUME_NAME_LENGTH);  if (mirror.getThinlyProvisioned()) {    asyncTaskMessageId=hdsApiClient.createThinVolumes(systemObjectID,targetPool.getNativeId(),mirror.getCapacity(),1,targetLabelToUse,HDSConstants.QUICK_FORMAT_TYPE,storageSystem.getModel());  } else {    String poolObjectID=HDSUtils.getPoolObjectID(targetPool);    asyncTaskMessageId=hdsApiClient.createThickVolumes(systemObjectID,poolObjectID,mirror.getCapacity(),1,targetLabelToUse,null,storageSystem.getModel(),null);  }  if (asyncTaskMessageId != null) {    HDSJob createHDSJob=new HDSBlockCreateMirrorJob(asyncTaskMessageId,mirror.getStorageController(),targetPool.getId(),taskCompleter);    hdsCommandHelper.waitForAsyncHDSJob(createHDSJob);  }  log.info("SecondaryVolume for mirror creation operation completed successfully");}  }
class C{  public void initializeNodes(){  String str="";  for (int i=0; i < 128; i++) {    configNodeAddresses[i]=-1;    configNodes[i]=null;  }  SerialNode node=(SerialNode)_memo.getTrafficController().getNode(0);  int index=1;  while (node != null) {    configNodes[numConfigNodes]=node;    configNodeAddresses[numConfigNodes]=node.getNodeAddress();    str=Integer.toString(configNodeAddresses[numConfigNodes]);    nodeSelBox.addItem(str);    if (index == 1) {      selNode=node;      selNodeNum=configNodeAddresses[numConfigNodes];      selNodeID="y";    }    numConfigNodes++;    node=(SerialNode)_memo.getTrafficController().getNode(index);    index++;  }}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  public static int dividedLeftBetter(ArrayList<Coords> in,IGame game,AttackInfo ai,boolean targetInBuilding,LosEffects los){  boolean diagramLos=game.getOptions().booleanOption("tacops_LOS1");  boolean partialCover=game.getOptions().booleanOption("tacops_partial_cover");  LosEffects leftTotal=new LosEffects();  LosEffects rightTotal=new LosEffects();  for (int i=1; i < in.size() - 2; i+=3) {    LosEffects left=losForCoords(game,ai,in.get(i),los.getThruBldg(),diagramLos,partialCover);    LosEffects right=losForCoords(game,ai,in.get(i + 1),los.getThruBldg(),diagramLos,partialCover);    left.add(los);    right.add(los);    if (ai.targetInfantry && targetInBuilding) {      if (null == left.getThruBldg()) {        left.infProtected=true;      } else       if (null == right.getThruBldg()) {        right.infProtected=true;      }    }    int lVal=left.losModifiers(game).getValue();    int rVal=right.losModifiers(game).getValue();    if ((lVal > rVal) || ((lVal == rVal) && left.isAttackerCover())) {      leftTotal.add(left);    } else {      rightTotal.add(right);    }  }  int leftTotalValue=leftTotal.losModifiers(game).getValue();  int rightTotalValue=rightTotal.losModifiers(game).getValue();  if (leftTotalValue > rightTotalValue) {    return 1;  } else   if (leftTotalValue < rightTotalValue) {    return 0;  } else {    return 2;  }}  }
class C{  public SourceClip(SourceClipBO sourceClipBO,GenericPackage genericPackage){  this.sourceClipBO=sourceClipBO;  this.genericPackage=genericPackage;  this.mxfDataDefinition=MXFDataDefinition.getDataDefinition(new MXFUID(this.sourceClipBO.data_definition));}  }
class C{  public SendableAudioMessage.SendableAudioMessageBuilder performer(String performer){  this.performer=performer;  return this;}  }
class C{  public void addUniqueAttribute(String name,String value,int flags) throws SAXException {  if (m_elemContext.m_startTagOpen) {    try {      final String patchedName=patchName(name);      final java.io.Writer writer=m_writer;      if ((flags & NO_BAD_CHARS) > 0 && m_xmlcharInfo.onlyQuotAmpLtGt) {        writer.write(' ');        writer.write(patchedName);        writer.write("=\"");        writer.write(value);        writer.write('"');      } else {        writer.write(' ');        writer.write(patchedName);        writer.write("=\"");        writeAttrString(writer,value,this.getEncoding());        writer.write('"');      }    } catch (    IOException e) {      throw new SAXException(e);    }  }}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public boolean init(){  if (MODE == MODE_HORIZONTAL) {    centerPanel.setLayout(new ALayout());  }  if (MODE == MODE_VERTICAL) {    gbc.anchor=GridBagConstraints.NORTHWEST;    gbc.weightx=0;    gbc.weighty=0;    gbc.gridy=m_line++;    gbc.gridx=0;    gbc.gridwidth=1;    gbc.insets=nullInset;    gbc.fill=GridBagConstraints.HORIZONTAL;    centerPanel.add(Box.createVerticalStrut(10),gbc);  }  log.config("");  MClient client=MClient.get(Env.getCtx());  String ASPFilter="";  if (client.isUseASP())   ASPFilter="   AND (   p.AD_Process_Para_ID IN ( " + "              SELECT pp.AD_Process_Para_ID " + "                FROM ASP_Process_Para pp, ASP_Process p, ASP_Level l, ASP_ClientLevel cl "+ "               WHERE p.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND cl.AD_Client_ID = " + client.getAD_Client_ID() + "                 AND cl.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND pp.ASP_Process_ID = p.ASP_Process_ID "+ "                 AND pp.IsActive = 'Y' "+ "                 AND p.IsActive = 'Y' "+ "                 AND l.IsActive = 'Y' "+ "                 AND cl.IsActive = 'Y' "+ "                 AND pp.ASP_Status = 'S') "+ "        OR p.AD_Process_Para_ID IN ( "+ "              SELECT AD_Process_Para_ID "+ "                FROM ASP_ClientException ce "+ "               WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "                 AND ce.IsActive = 'Y' "+ "                 AND ce.AD_Process_Para_ID IS NOT NULL "+ "                 AND ce.AD_Tab_ID IS NULL "+ "                 AND ce.AD_Field_ID IS NULL "+ "                 AND ce.ASP_Status = 'S') "+ "       ) "+ "   AND p.AD_Process_Para_ID NOT IN ( "+ "          SELECT AD_Process_Para_ID "+ "            FROM ASP_ClientException ce "+ "           WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "             AND ce.IsActive = 'Y' "+ "             AND ce.AD_Process_Para_ID IS NOT NULL "+ "             AND ce.AD_Tab_ID IS NULL "+ "             AND ce.AD_Field_ID IS NULL "+ "             AND ce.ASP_Status = 'H')";  String sql=null;  if (Env.isBaseLanguage(Env.getCtx(),"AD_Process_Para"))   sql="SELECT p.Name, p.Description, p.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode, p.ReadOnlyLogic, p.DisplayLogic "+ "FROM AD_Process_Para p"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND p.IsActive='Y' " + ASPFilter + " ORDER BY SeqNo"; else   sql="SELECT t.Name, t.Description, t.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode, p.ReadOnlyLogic, p.DisplayLogic "+ "FROM AD_Process_Para p"+ " INNER JOIN AD_Process_Para_Trl t ON (p.AD_Process_Para_ID=t.AD_Process_Para_ID)"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND t.AD_Language='" + Env.getAD_Language(Env.getCtx()) + "'"+ " AND p.IsActive='Y' "+ ASPFilter+ " ORDER BY SeqNo";  int cols=0;  int col=2;  int row=0;  boolean hasFields=false;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_processInfo.getAD_Process_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      hasFields=true;      if (MODE == MODE_HORIZONTAL) {        createField(rs,row,cols);        cols=cols + col;        if (cols >= 4) {          cols=0;          row++;        }      }      if (MODE == MODE_VERTICAL) {        createField(rs);      }    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (m_mFields.size() != m_mFields2.size() || m_mFields.size() != m_vEditors.size() || m_mFields2.size() != m_vEditors2.size())   log.log(Level.SEVERE,"View & Model vector size is different");  if (hasFields) {    if (MODE == MODE_VERTICAL) {      gbc.gridy=m_line++;      centerPanel.add(Box.createVerticalStrut(10),gbc);      gbc.gridx=3;      centerPanel.add(Box.createHorizontalStrut(12),gbc);    }    dynamicDisplay();  } else   dispose();  return hasFields;}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder("CharClasses:");  result.append(Out.NL);  for (int i=0; i < classes.size(); i++)   result.append("class ").append(i).append(":").append(Out.NL).append(classes.get(i)).append(Out.NL);  return result.toString();}  }
class C{  void chooseFirstProvider(){  if ((spi != null) || (serviceIterator == null)) {    return;  }synchronized (lock) {    if (spi != null) {      return;    }    if (debug != null) {      int w=--warnCount;      if (w >= 0) {        debug.println("Mac.init() not first method " + "called, disabling delayed provider selection");        if (w == 0) {          debug.println("Further warnings of this type will " + "be suppressed");        }        new Exception("Call trace").printStackTrace();      }    }    Exception lastException=null;    while ((firstService != null) || serviceIterator.hasNext()) {      Service s;      if (firstService != null) {        s=firstService;        firstService=null;      } else {        s=serviceIterator.next();      }      if (JceSecurity.canUseProvider(s.getProvider()) == false) {        continue;      }      try {        Object obj=s.newInstance(null);        if (obj instanceof MacSpi == false) {          continue;        }        spi=(MacSpi)obj;        provider=s.getProvider();        firstService=null;        serviceIterator=null;        return;      } catch (      NoSuchAlgorithmException e) {        lastException=e;      }    }    ProviderException e=new ProviderException("Could not construct MacSpi instance");    if (lastException != null) {      e.initCause(lastException);    }    throw e;  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"MRS");  translateAll(environment,instruction,"MRS",instructions);}  }
class C{  public Builder(@NonNull AuthorizationServiceConfiguration configuration,@NonNull List<Uri> redirectUri){  setConfiguration(configuration);  setRedirectUriValues(redirectUri);}  }
