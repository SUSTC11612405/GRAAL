class C{  public FakeAddOperation(CSN csn,Entry entry){  super(csn);  this.entry=entry;}  }
class C{  public float readFloat() throws SQLException {  Float attrib=(Float)getNextAttribute();  return (attrib == null) ? 0 : attrib.floatValue();}  }
class C{  public void registerCallbackHandler(SMSObjectListener changeListener) throws SMSException {  objectListener=changeListener;  if (!notificationInitialized) {    String notificationFlag=SystemProperties.get(NOTIFICATION_PROPERTY,"true");    if (notificationFlag.equalsIgnoreCase("true")) {      try {        URL url=WebtopNaming.getNotificationURL();        PLLClient.addNotificationHandler(JAXRPCUtil.SMS_SERVICE,new SMSNotificationHandler());        client.send("registerNotificationURL",url.toString(),null,null);        if (debug.messageEnabled()) {          debug.message("SMSJAXRPCObject: Using " + "notification mechanism for cache updates: " + url);        }      } catch (      Exception e) {        if (debug.warningEnabled()) {          debug.warning("SMSJAXRPCObject: Registering for " + "notification via URL failed: " + e.getMessage() + "\nUsing polling mechanism for updates");        }        startPollingThreadIfEnabled(getCachePollingInterval());      }    } else {      startPollingThreadIfEnabled(getCachePollingInterval());    }    notificationInitialized=true;  }}  }
class C{  @Override public void postDelayed(Runnable runnable,long delayMillis){  if (runnable == null)   return;  TaskProxy.sHandler.postDelayed(runnable,delayMillis);}  }
class C{  public LineBreakMeasurer(AttributedCharacterIterator text,BreakIterator breakIter,FontRenderContext frc){  if (text.getEndIndex() - text.getBeginIndex() < 1) {    throw new IllegalArgumentException("Text must contain at least one character.");  }  this.breakIter=breakIter;  this.measurer=new TextMeasurer(text,frc);  this.limit=text.getEndIndex();  this.pos=this.start=text.getBeginIndex();  charIter=new CharArrayIterator(measurer.getChars(),this.start);  this.breakIter.setText(charIter);}  }
class C{  public ServiceRouteHeader createServiceRouteHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  ServiceRoute serviceRoute=new ServiceRoute();  serviceRoute.setAddress(address);  return serviceRoute;}  }
class C{  public static boolean hasVaryAll(Headers responseHeaders){  return varyFields(responseHeaders).contains("*");}  }
class C{  private ZonedDateTime resolveOffset(ZoneOffset offset){  if (offset.equals(this.offset) == false && zone.getRules().isValidOffset(dateTime,offset)) {    return new ZonedDateTime(dateTime,offset,zone);  }  return this;}  }
class C{  public void cleanup(SQLiteDatabase db){  Log.w(TAG,"Resetting database");  dropTables(db);  onCreate(db);}  }
class C{  private static void deregisterLocalBackend(DN baseDN){synchronized (registeredLocalBackendsLock) {    LocalBackendWorkflowElement existingLocalBackend=registeredLocalBackends.get(baseDN);    if (existingLocalBackend != null) {      TreeMap<DN,LocalBackendWorkflowElement> newLocalBackends=new TreeMap<>(registeredLocalBackends);      newLocalBackends.remove(baseDN);      registeredLocalBackends=newLocalBackends;    }  }}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println(myPort + "  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat,JFormattedTextField.AbstractFormatter displayFormat){  this(defaultFormat,displayFormat,null);}  }
class C{  public void logMessage(SIPMessage message,String from,String to,boolean sender,long time){  checkLogFile();  if (message.getFirstLine() == null)   return;  CallID cid=(CallID)message.getCallId();  String callId=null;  if (cid != null)   callId=cid.getCallId();  String firstLine=message.getFirstLine().trim();  String inputText=(logContent ? message.encode() : message.encodeMessage(new StringBuilder()).toString());  String tid=message.getTransactionId();  TimeStampHeader tsHdr=(TimeStampHeader)message.getHeader(TimeStampHeader.NAME);  long tsval=tsHdr == null ? 0 : tsHdr.getTime();  logMessage(inputText,from,to,sender,callId,firstLine,null,tid,time,tsval);}  }
class C{  public IllegalMonitorStateException(String s){  super(s);}  }
class C{  public Attributes(int size){  map=new HashMap<>(size);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AlphabetElement createAlphabetElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AlphabetElementImpl();}  }
class C{  public void testCompareEqualScale1(){  String a="12380964839238475457356735674573563567890295784902768787678287";  int aScale=18;  String b="4573563567890295784902768787678287";  int bScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  int result=1;  assertEquals("incorrect result",result,aNumber.compareTo(bNumber));}  }
class C{  public boolean doesSignatureFieldExist(String name){  return getBlankSignatureNames().contains(name) || getSignatureNames().contains(name);}  }
class C{  public final int value_at(int class_i,int class_j,int p_layer){  try {    return clearance_rows[class_j].column[class_i].layer[p_layer];  } catch (  Exception exc) {    return 0;  }}  }
class C{  @TargetApi(VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){  if (Utils.hasGingerbread()) {    return Environment.isExternalStorageRemovable();  }  return true;}  }
class C{  protected void removeFromProfilesMap(String ct,Client c){  if (c == null) {    return;  }  Set parentSet=c.getProperties(PARENT_ID);  Map m=getStylesProfileMap(ct,parentSet);  if (m != null) {    m.remove(ct);  }}  }
class C{  public synchronized void stopPooling(){  stopPooling=true;  while (poolingThread != null && pooling) {    try {      poolingThread.interrupt();      Thread.sleep(100);    } catch (    Throwable t) {    }  }  poolingThread=null;  pooling=false;}  }
class C{  public void test_scheduleLjava_util_TimerTaskLjava_util_Date() throws Exception {  Timer t=null;  try {    t=new Timer();    TimerTestTask testTask=new TimerTestTask();    Date d=new Date(System.currentTimeMillis() + 100);    t.cancel();    try {      t.schedule(testTask,d);      fail("Scheduling a task after Timer.cancel() should throw exception");    } catch (    IllegalStateException expected) {    }    t=new Timer();    testTask=new TimerTestTask();    d=new Date(System.currentTimeMillis() + 100);    testTask.cancel();    try {      t.schedule(testTask,d);      fail("Scheduling a task after cancelling it should throw exception");    } catch (    IllegalStateException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    d=new Date(-100);    try {      t.schedule(testTask,d);      fail("Scheduling a task with negative date should throw IllegalArgumentException");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    d=new Date(System.currentTimeMillis() + 100);    try {      t.schedule(null,d);      fail("Scheduling a null task should throw NullPointerException");    } catch (    NullPointerException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    try {      t.schedule(testTask,null);      fail("Scheduling a null date should throw NullPointerException");    } catch (    NullPointerException expected) {    }    t.cancel();    t=new Timer();    d=new Date(-100);    try {      t.schedule(null,d);      fail("Scheduling a null task with negative date should throw IllegalArgumentException first");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    d=new Date(System.currentTimeMillis() + 200);    t.schedule(testTask,d);    awaitRun(testTask);    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 100);    t.schedule(testTask,d);    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 150);    t.schedule(testTask,d);    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 70);    t.schedule(testTask,d);    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 10);    t.schedule(testTask,d);    Thread.sleep(400);    assertTrue("Multiple tasks should have incremented counter 4 times not " + timerCounter,timerCounter == 4);    t.cancel();  }  finally {    if (t != null)     t.cancel();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentcreateelementcasesensitive.class,args);}  }
class C{  public void select_all(){  Arrays.fill(sel_array,true);}  }
class C{  public Scanner reset(){  delimiter=DEFAULT_DELIMITER;  setLocale(Locale.getDefault());  currentRadix=DEFAULT_RADIX;  return this;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.ReferenceType createReferenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.ReferenceTypeImpl();}  }
class C{  protected AbstractAttribute(){}  }
class C{  private static void ImportPrefs(Preferences prefsNode,Element map){  NodeList entries=map.getChildNodes();  for (int i=0, numEntries=entries.getLength(); i < numEntries; i++) {    Element entry=(Element)entries.item(i);    prefsNode.put(entry.getAttribute("key"),entry.getAttribute("value"));  }}  }
class C{  public void submitRequirements(Callback[] info){  authDebug.message("AuthContextLocal::submitRequirements()");  inSubmitRequirements=true;  try {    informationRequired=null;    amlc.submitRequiredInfo(info);    if (!amlc.isPureJAAS()) {      amlc.runLogin();    }    if (amlc.getStatus() == LoginStatus.AUTH_SUCCESS) {      loginStatus=AuthContext.Status.SUCCESS;    } else     if (amlc.getStatus() == LoginStatus.AUTH_FAILED) {      loginStatus=AuthContext.Status.FAILED;    }    authDebug.message("AuthContextLocal::submitRequirements end");    if (authDebug.messageEnabled()) {      authDebug.message("Status at the end of submitRequirements() : " + loginStatus);    }  }  finally {    inSubmitRequirements=false;  }}  }
class C{  private void parse_lambda() throws SyntaxException {  LineCol lineCol=current.getLineCol();  List<VariableDef> variableDefList=new ArrayList<>();  Set<String> set=new HashSet<>();  if (((Element)current).getContent().equals("(")) {    nextNode(false);    if (current instanceof ElementStartNode) {      List<Statement> list=parseElemStart((ElementStartNode)current,false,Collections.emptySet(),false);      for (      Statement statement : list) {        if (statement instanceof AST.Access) {          AST.Access access=(AST.Access)statement;          if (access.exp == null) {            VariableDef v=new VariableDef(access.name,Collections.emptySet(),annos,access.line_col());            annos.clear();            variableDefList.add(v);            set.add(access.name);          } else {            err.UnexpectedTokenException("variable",access.exp.toString(),access.exp.line_col());            err.debug("ignore the variable");          }        } else         if (statement instanceof VariableDef) {          VariableDef v=(VariableDef)statement;          variableDefList.add(v);          set.add(v.getName());        } else {          err.UnexpectedTokenException("variable",statement.toString(),statement.line_col());          err.debug("ignore the variable");        }      }      nextNode(false);    }  } else {    assert isValidName(((Element)current).getContent());    String name=((Element)current).getContent();    set.add(name);    variableDefList.add(new VariableDef(name,Collections.emptySet(),Collections.emptySet(),current.getLineCol()));  }  nextNode(false);  expecting("->",current.previous(),current,err);  nextNode(false);  List<Statement> stmts;  if (current instanceof ElementStartNode) {    stmts=parseElemStart((ElementStartNode)current,true,set,false);    nextNode(true);  } else {    stmts=new ArrayList<>();    stmts.add(get_exp(false));  }  AST.Lambda l=new AST.Lambda(variableDefList,stmts,lineCol);  parsedExps.push(l);  parse_expression();}  }
class C{  public boolean hasGlobalArgument(String argumentName){  return globalArgumentMap.containsKey(argumentName);}  }
class C{  public void write(ByteArrayOutputStream tagBuffer){  setTextEncoding(ID3TextEncodingConversion.getTextEncoding(getHeader(),getTextEncoding()));  if (!((TextEncodedStringNullTerminated)getObject(DataTypes.OBJ_DESCRIPTION)).canBeEncoded()) {    this.setTextEncoding(ID3TextEncodingConversion.getUnicodeTextEncoding(getHeader()));  }  super.write(tagBuffer);}  }
class C{  @Override public void addLdapConnectionArgument(final Argument argument) throws ArgumentException {  addGlobalArgument(argument,null);}  }
class C{  public void openFileChooser(ValueCallback<Uri> uploadMsg,String acceptType,String capture){  openFileChooser(uploadMsg,acceptType);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  protected void writeEndParagraph() throws IOException {  writeEndMask(fontMask);  if (inFontTag()) {    endSpanTag();  } else {    write(NEWLINE);  }  writeEndTag("</p>");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrfirstchild.class,args);}  }
class C{  public JKInvalidUserException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void windowGainedFocus(WindowEvent e){  ((WindowFocusListener)a).windowGainedFocus(e);  ((WindowFocusListener)b).windowGainedFocus(e);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  acModel=(AuthConfigurationModel)getModel();  acModel.reset(getRealmName(),getConfigName());  tablePopulated=false;  removePageSessionAttribute(ENTRY_LIST);  removePageSessionAttribute(ReorderAuthChainsViewBean.PG_SESSION_TRACKING);  forwardTo();}  }
class C{  public final double cos_angle(PlaVectorInt p_other){  double result=scalar_product(p_other);  result/=to_float().distance() * p_other.to_float().distance();  return result;}  }
class C{  public static void savePlayers(){  server.savePlayers();}  }
class C{  public void testClientTransactionTimeout(){  try {    Request invite=createTiInviteRequest(null,null,null);    ClientTransaction tran=null;    try {      eventCollector.collectRequestEvent(riSipProvider);      tran=tiSipProvider.getNewClientTransaction(invite);      tran.sendRequest();    } catch (    SipException ex) {      throw new TiUnexpectedError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    waitForMessage();    RequestEvent inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNotNull("RequestEvent",inviteReceivedEvent);    try {      eventCollector.collectTimeoutEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    waitForTimeout();    TimeoutEvent timeoutEvent=eventCollector.extractCollectedTimeoutEvent();    assertNotNull("Timeout event",timeoutEvent);    assertTrue("Timeout event type ",timeoutEvent.getTimeout().equals(Timeout.TRANSACTION));  } catch (  Exception ex) {    logger.error("unexpected exception ",ex);    ex.printStackTrace();    fail("unexpected exception");  }}  }
class C{  public void insert_string(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_string",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_string(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  @Deprecated public static boolean isRunning(){  return DirectoryServer.isRunning();}  }
class C{  public static final void checkToken(String token) throws ParseException {  if (token == null || token.length() == 0) {    throw new ParseException("null or empty token",-1);  } else {    for (int i=0; i < token.length(); ++i) {      if (!LexerCore.isTokenChar(token.charAt(i))) {        throw new ParseException("Invalid character(s) in string (not allowed in 'token')",i);      }    }  }}  }
class C{  static boolean canPopupOverlapTaskBar(){  boolean result=true;  Toolkit tk=Toolkit.getDefaultToolkit();  if (tk instanceof SunToolkit) {    result=((SunToolkit)tk).canPopupOverlapTaskBar();  }  return result;}  }
class C{  static boolean analyzePredicate(Compiler compiler,int opPos,int stepType) throws javax.xml.transform.TransformerException {  int argLen;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:    argLen=compiler.getArgLength(opPos);  break;default :argLen=compiler.getArgLengthOfStep(opPos);}int pos=compiler.getFirstPredicateOpPos(opPos);int nPredicates=compiler.countPredicates(pos);return (nPredicates > 0) ? true : false;}  }
class C{  public AttributeStatement createAttributeStatement(org.w3c.dom.Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ATTRIBUTE_STATEMENT,elem);  if (obj == null) {    return new AttributeStatementImpl(elem);  } else {    return (AttributeStatement)obj;  }}  }
class C{  public static String hexDecode(final String value){  return decode(value,4,16);}  }
class C{  public synchronized String generateTag(){  return Integer.toHexString(rand.nextInt());}  }
class C{  final void advance(){  if (next == null)   throw new NoSuchElementException();  lastReturned=next;  while ((next=next.next) != null) {    Object x=next.value;    if (x != null && x != next) {      @SuppressWarnings("unchecked") V vv=(V)x;      nextValue=vv;      break;    }  }}  }
class C{  public void flush(){  if (compressionStream != null) {    try {      if (log.isDebugEnabled()) {        log.debug("Flushing the compression stream!");      }      compressionStream.flush();    } catch (    IOException e) {      if (log.isDebugEnabled()) {        log.debug("Ignored exception while flushing gzip filter",e);      }    }  }}  }
class C{  public void testUnsupportedCallbackException05(){  myCallback c=new myCallback();  assertNotNull("Callback object is null",c);  UnsupportedCallbackException ucE=new UnsupportedCallbackException(c,null);  assertNull("getMessage() must return null.",ucE.getMessage());  assertEquals("Incorrect callback object was returned",c,ucE.getCallback());}  }
class C{  public boolean update(Long ruleID,Long eventID,String ruleName,String ruleDesc,Boolean enabled,Boolean notification){  SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  String insertTime=dateFormat.format(new Timestamp(System.currentTimeMillis()));  if (ruleID == null) {    throw new IllegalArgumentException("primary key null.");  }  ContentValues args=new ContentValues();  if (eventID != null) {    args.put(KEY_EVENTID,eventID);  }  if (ruleName != null) {    args.put(KEY_RULENAME,ruleName);  }  if (ruleDesc != null) {    args.put(KEY_RULEDESC,ruleDesc);  }  if (enabled != null) {    args.put(KEY_ENABLED,enabled);  }  if (notification != null) {    args.put(KEY_NOTIFICATION,notification);  }  if (args.size() > 0) {    args.put(KEY_UPDATED,insertTime);    return database.update(DATABASE_TABLE,args,KEY_RULEID + "=" + ruleID,null) > 0;  }  return false;}  }
class C{  public void rescheduling(){  rescheduled=false;}  }
class C{  public static Attribute empty(AttributeType attributeType,String name){  return AttributeBuilder.create(attributeType,name,Collections.<ByteString>emptySet());}  }
class C{  void addToParent(Element faultE){  Document doc=faultE.getOwnerDocument();  Element detailE=doc.createElement(SOAPBindingConstants.TAG_DETAIL);  faultE.appendChild(detailE);  if (statusCode != null) {    Element statusE=doc.createElementNS(SOAPBindingConstants.NS_SOAP_BINDING,SOAPBindingConstants.PTAG_STATUS);    String localPart=statusCode.getLocalPart();    String ns=statusCode.getNamespaceURI();    if (ns != null && ns.length() > 0) {      String prefix;      if (ns.equals(SOAPBindingConstants.NS_SOAP)) {        prefix=SOAPBindingConstants.PREFIX_SOAP;      } else       if (ns.equals(SOAPBindingConstants.NS_SOAP_BINDING)) {        prefix=SOAPBindingConstants.PREFIX_SOAP_BINDING;      } else       if (ns.equals(SOAPBindingConstants.NS_SOAP_BINDING_11)) {        prefix=SOAPBindingConstants.PREFIX_SOAP_BINDING_11;      } else {        prefix=SOAPBindingConstants.DEFAULT_PREFIX_FAULT_CODE_VALUE;        statusE.setAttributeNS(SOAPBindingConstants.NS_XML,"xmlns:" + prefix,ns);      }      statusE.setAttributeNS(null,SOAPBindingConstants.ATTR_CODE,prefix + ":" + localPart);    } else {      statusE.setAttributeNS(null,SOAPBindingConstants.ATTR_CODE,localPart);    }    if (statusRef != null) {      statusE.setAttributeNS(null,SOAPBindingConstants.ATTR_REF,statusRef);    }    if (statusComment != null) {      statusE.setAttributeNS(null,SOAPBindingConstants.ATTR_COMMENT,statusComment);    }    detailE.appendChild(statusE);  }  if (correlationHeader != null) {    correlationHeader.addToParent(detailE);  }  if (consentHeader != null) {    consentHeader.addToParent(detailE);  }  if (usageDirectiveHeaders != null && !usageDirectiveHeaders.isEmpty()) {    Iterator iter=usageDirectiveHeaders.iterator();    while (iter.hasNext()) {      ((UsageDirectiveHeader)iter.next()).addToParent(detailE);    }  }  if (providerHeader != null) {    providerHeader.addToParent(detailE);  }  if (processingContextHeader != null) {    processingContextHeader.addToParent(detailE);  }  if (serviceInstanceUpdateHeader != null) {    serviceInstanceUpdateHeader.addToParent(detailE);  }  if (otherChildren != null && !otherChildren.isEmpty()) {    Iterator iter=otherChildren.iterator();    while (iter.hasNext()) {      Element childE=(Element)iter.next();      detailE.appendChild(doc.importNode(childE,true));    }  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if ((request == null) || (response == null)) {    String[] data={SAMLUtils.bundle.getString("nullInputParameter")};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.NULL_PARAMETER,data);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"nullInputParameter",SAMLUtils.bundle.getString("nullInputParameter"));    return;  }  SAMLUtils.checkHTTPContentLength(request);  Object token=getSession(request);  if (token == null) {    response.sendRedirect(SAMLUtils.getLoginRedirectURL(request));    return;  }  String target=request.getParameter(SAMLConstants.POST_TARGET_PARAM);  if (target == null || target.length() == 0) {    String[] data={SAMLUtils.bundle.getString("missingTargetSite")};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.MISSING_TARGET,data,token);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_BAD_REQUEST,"missingTargetSite",SAMLUtils.bundle.getString("missingTargetSite"));    return;  }  SAMLServiceManager.SiteEntry destSite=getDestSite(target);  String destSiteUrl=null;  if ((destSite == null) || ((destSiteUrl=destSite.getPOSTUrl()) == null)) {    String[] data={SAMLUtils.bundle.getString("targetForbidden"),target};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.TARGET_FORBIDDEN,data,token);    SAMLUtils.sendError(request,response,response.SC_BAD_REQUEST,"targetForbidden",SAMLUtils.bundle.getString("targetForbidden") + " " + target);    return;  }  Response samlResponse=null;  try {    String version=destSite.getVersion();    int majorVersion=SAMLConstants.PROTOCOL_MAJOR_VERSION;    int minorVersion=SAMLConstants.PROTOCOL_MINOR_VERSION;    if (version != null) {      StringTokenizer st=new StringTokenizer(version,".");      if (st.countTokens() == 2) {        majorVersion=Integer.parseInt(st.nextToken().trim());        minorVersion=Integer.parseInt(st.nextToken().trim());      }    }    AssertionManager am=AssertionManager.getInstance();    SessionProvider sessionProvider=SessionManager.getProvider();    Assertion assertion=am.createSSOAssertion(sessionProvider.getSessionID(token),null,request,response,destSite.getSourceID(),target,majorVersion + "." + minorVersion);    StatusCode statusCode=new StatusCode(SAMLConstants.STATUS_CODE_SUCCESS);    Status status=new Status(statusCode);    List contents=new ArrayList();    contents.add(assertion);    samlResponse=new Response(null,status,destSiteUrl,contents);    samlResponse.setMajorVersion(majorVersion);    samlResponse.setMinorVersion(minorVersion);  } catch (  SessionException sse) {    SAMLUtils.debug.error("SAMLPOSTProfileServlet.doGet: Exception " + "Couldn't get SessionProvider:",sse);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"couldNotCreateResponse",sse.getMessage());    return;  }catch (  NumberFormatException ne) {    SAMLUtils.debug.error("SAMLPOSTProfileServlet.doGet: Exception " + "when creating Response: ",ne);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"couldNotCreateResponse",ne.getMessage());    return;  }catch (  SAMLException se) {    SAMLUtils.debug.error("SAMLPOSTProfileServlet.doGet: Exception " + "when creating Response: ",se);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"couldNotCreateResponse",se.getMessage());    return;  }  byte signedBytes[]=null;  try {    samlResponse.signXML();    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("SAMLPOSTProfileServlet.doGet: " + "signed samlResponse is" + samlResponse.toString(true,true,true));    }    signedBytes=SAMLUtils.getResponseBytes(samlResponse);  } catch (  Exception e) {    SAMLUtils.debug.error("SAMLPOSTProfileServlet.doGet: Exception " + "when signing the response:",e);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"errorSigningResponse",SAMLUtils.bundle.getString("errorSigningResponse"));    return;  }  String encodedResponse=null;  try {    encodedResponse=Base64.encode(signedBytes,true).trim();  } catch (  Exception e) {    SAMLUtils.debug.error("SAMLPOSTProfileServlet.doGet: Exception " + "when encoding the response:",e);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"errorEncodeResponse",SAMLUtils.bundle.getString("errorEncodeResponse"));    return;  }  if (LogUtils.isAccessLoggable(java.util.logging.Level.FINE)) {    String[] data={SAMLUtils.bundle.getString("redirectTo"),target,destSiteUrl,new String(signedBytes,"UTF-8")};    LogUtils.access(java.util.logging.Level.FINE,LogUtils.REDIRECT_TO_URL,data,token);  } else {    String[] data={SAMLUtils.bundle.getString("redirectTo"),target,destSiteUrl};    LogUtils.access(java.util.logging.Level.INFO,LogUtils.REDIRECT_TO_URL,data,token);  }  response.setContentType("text/html; charset=UTF-8");  try (PrintWriter out=response.getWriter()){    out.println("<HTML>");    out.println("<BODY Onload=\"document.forms[0].submit()\">");    out.println("<FORM METHOD=\"POST\" ACTION=\"" + ESAPI.encoder().encodeForHTMLAttribute(destSiteUrl) + "\">");    out.println("<INPUT TYPE=\"HIDDEN\" NAME=\"" + SAMLConstants.POST_SAML_RESPONSE_PARAM + "\" ");    out.println("VALUE=\"" + ESAPI.encoder().encodeForHTMLAttribute(encodedResponse) + "\">");    out.println("<INPUT TYPE=\"HIDDEN\" NAME=\"" + SAMLConstants.POST_TARGET_PARAM + "\" VALUE=\""+ ESAPI.encoder().encodeForHTMLAttribute(target)+ "\"> </FORM>");    out.println("</BODY></HTML>");  } }  }
class C{  public void paramValueAvaliable(List<SParameter> params,List<Instruction> instructions,SemanticScope scope,LineCol lineCol) throws SyntaxException {  for (  SParameter param : params) {    if (param.isNotEmpty()) {      Ins.Nop nop=new Ins.Nop();      Ins.IfNe ifNe=new Ins.IfNe(cast(BoolTypeDef.get(),new Ins.TLoad(param,scope,lineCol),lineCol),nop,lineCol);      instructions.add(ifNe);      instructions.add(new Ins.AThrow(new Ins.New(getJava_lang_IllegalArgumentException_cons(),lineCol),lineCol));      instructions.add(nop);    } else     if (param.isNotNull()) {      if (param.type() instanceof PrimitiveTypeDef) {        continue;      }      Ins.Nop nop=new Ins.Nop();      Ins.IfNonNull ifNonNull=new Ins.IfNonNull(new Ins.TLoad(param,scope,lineCol),nop,lineCol);      instructions.add(ifNonNull);      instructions.add(new Ins.AThrow(new Ins.New(getJava_lang_NullPointerException_cons(),lineCol),lineCol));      instructions.add(nop);      Ins.Nop nop2=new Ins.Nop();      Ins.IfACmpNe ifACmpNe=new Ins.IfACmpNe(new Ins.TLoad(param,scope,lineCol),invoke_Unit_get(lineCol),nop2,lineCol);      instructions.add(ifACmpNe);      instructions.add(new Ins.AThrow(new Ins.New(getJava_lang_IllegalArgumentException_cons(),lineCol),lineCol));      instructions.add(nop2);    }  }}  }
class C{  JAASLoginThread(AMLoginContext amlc){  this.amlc=amlc;}  }
class C{  public MockResponse clearHeaders(){  headers.clear();  return this;}  }
class C{  public void testUpdate4(){  int newValue1=-1;  int newValue2=-2;  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field2="+ newValue1+ ", field3="+ newValue2+ " WHERE id > 10";  try {    int num=statement.executeUpdate(updateQuery);    int expectedUpdated=9;    assertEquals("Not all records in the database were updated",expectedUpdated,num);    String selectQuery="SELECT id, field2, field3 FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    while (result.next()) {      int id=result.getInt("id");    }    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  private void exportBackend() throws Exception {  if (ldif == null) {    ldif=File.createTempFile("LDAPBinaryOptionTestCase",".ldif");  }  exportConfig=new LDIFExportConfig(ldif.getAbsolutePath(),ExistingFileBehavior.OVERWRITE);  backend=DirectoryServer.getBackend("test");  backend.exportLDIF(exportConfig);}  }
class C{  public static ActiveRequestorException newReceiverException(Throwable throwable){  return new ActiveRequestorException(SOAPConstants.SOAP_RECEIVER_FAULT,"unexpectedError",throwable.getMessage());}  }
class C{  public void testPutWhenOffsetIsNonZero(){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(40);  byteBuffer.order(ByteOrder.nativeOrder());  ShortBuffer shortBuffer=byteBuffer.asShortBuffer();  short[] source={2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};  shortBuffer.put(source,2,2);  shortBuffer.put(source,4,2);  assertEquals(4,shortBuffer.get(0));  assertEquals(5,shortBuffer.get(1));  assertEquals(6,shortBuffer.get(2));  assertEquals(7,shortBuffer.get(3));}  }
class C{  protected void handleALL_SESSION_TRANSFERCOMPLETE(SessionMessage msg,Member sender){  counterReceive_EVT_ALL_SESSION_TRANSFERCOMPLETE++;  if (log.isDebugEnabled()) {    log.debug(sm.getString("deltaManager.receiveMessage.transfercomplete",getName(),sender.getHost(),Integer.valueOf(sender.getPort())));  }  stateTransferCreateSendTime=msg.getTimestamp();  stateTransfered=true;}  }
class C{  public void create(SSOToken token,String dn,Map attrs) throws SMSException, SSOException {  internalCreate(token,dn,attrs);  objectChanged(dn,ADD);}  }
class C{  public static Cookie createCookie(String cookieName,String cookieValue,String cookieDomain){  if (utilDebug.messageEnabled()) {    utilDebug.message("cookieName='{}', cookieValue='{}', cookieDomain='{}'",cookieName,cookieValue,cookieDomain);  }  Cookie cookie=null;  try {    cookie=CookieUtils.newCookie(cookieName,cookieValue,"/",cookieDomain);  } catch (  Exception e) {    if (utilDebug.messageEnabled()) {      utilDebug.message("Error creating cookie. : " + e.getMessage());    }  }  if (utilDebug.messageEnabled()) {    utilDebug.message("createCookie Cookie is set : " + cookie);  }  return cookie;}  }
class C{  private static boolean isMimeText(String file){  if (file == null)   return false;  if (!file.contains("."))   return false;  file=file.substring(file.lastIndexOf("/") + 1);  return MimeTypes.getInstance().getMimeType(file).startsWith("text/");}  }
class C{  public void addProgressUpdateListener(ProgressUpdateListener l){  listeners.add(l);}  }
class C{  public void paintRootPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public AuthorityBinding(int authKind,String location,String binding) throws SAMLException {  if (location == null || location.length() == 0) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AuthorityBinding: The " + "Location URI can not be null or empty!");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  } else {    _location=location;  }  if (binding == null || binding.length() == 0) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AuthorityBinding: The " + "binding URI can not be null or empty!");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  } else {    _binding=binding;  }  if (authKind >= AuthorityKindType.AUTHENTICATION && authKind <= AuthorityKindType.AUTHORIZATION) {    _authorityKind=authKind;  } else {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AuthorityBinding:The type of " + "authority is illegal!");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));  }}  }
class C{  public BadRequestException(final String error,final String message){  super(400,error,message);}  }
class C{  private static synchronized Date parseDateString(String textRepresentation) throws ParseException {  try {    return sdfDefault.parse(textRepresentation);  } catch (  ParseException ex) {    return sdfGnuStep.parse(textRepresentation);  }}  }
class C{  public SQLRecoverableException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  public DynamicLayout(LayoutContext layoutContext,CharSequence base,TextPaint paint,int width,Alignment align,float spacingmult,float spacingadd,boolean includepad){  this(layoutContext,base,base,paint,width,align,spacingmult,spacingadd,includepad);}  }
class C{  public void paintCheckBoxBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public JToggleButton(String text,boolean selected){  this(text,null,selected);}  }
class C{  public void test_setByteLjava_lang_ObjectB() throws Exception {  TestField x=new TestField();  Field f=null;  byte val=0;  try {    f=x.getClass().getDeclaredField("byteField");    f.setByte(x,(byte)1);    val=f.getByte(x);  } catch (  Exception e) {    fail("Exception during setByte test : " + e.getMessage());  }  assertEquals("Returned incorrect float field value",1,val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setByte(x,Byte.MIN_VALUE);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("bytePFField");    assertFalse(f.isAccessible());    f.setByte(x,Byte.MIN_VALUE);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("byteField");    f.setByte(null,Byte.MIN_VALUE);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("byteSField");  f.setByte(null,Byte.MIN_VALUE);  val=f.getByte(x);  assertEquals("Returned incorrect byte field value",Byte.MIN_VALUE,val);}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator,final boolean useTable){  for (int i=1; i < keys.length; ++i) {    if (keys[i] < keys[i - 1]) {      throw new IllegalArgumentException("keys must be sorted ascending");    }  }  Label def=newLabel();  Label end=newLabel();  if (keys.length > 0) {    int len=keys.length;    int min=keys[0];    int max=keys[len - 1];    int range=max - min + 1;    if (useTable) {      Label[] labels=new Label[range];      Arrays.fill(labels,def);      for (int i=0; i < len; ++i) {        labels[keys[i] - min]=newLabel();      }      mv.visitTableSwitchInsn(min,max,def,labels);      for (int i=0; i < range; ++i) {        Label label=labels[i];        if (label != def) {          mark(label);          generator.generateCase(i + min,end);        }      }    } else {      Label[] labels=new Label[len];      for (int i=0; i < len; ++i) {        labels[i]=newLabel();      }      mv.visitLookupSwitchInsn(def,keys,labels);      for (int i=0; i < len; ++i) {        mark(labels[i]);        generator.generateCase(keys[i],end);      }    }  }  mark(def);  generator.generateDefault();  mark(end);}  }
class C{  public boolean contains_in_interiour(ShapeTileBox p_other){  if (p_other.is_empty()) {    return true;  }  if (p_other.box_ll.v_x <= box_ll.v_x || p_other.box_ll.v_y <= box_ll.v_y || p_other.box_ur.v_x >= box_ur.v_x || p_other.box_ur.v_y >= box_ur.v_y) {    return false;  }  return true;}  }
class C{  private void sendRequestPendingResponse(SIPRequest sipRequest,SIPServerTransaction transaction){  if (transaction.getState() != TransactionState.TERMINATED) {    SIPResponse sipResponse=sipRequest.createResponse(Response.REQUEST_PENDING);    ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();    if (serverHeader != null) {      sipResponse.setHeader(serverHeader);    }    try {      RetryAfter retryAfter=new RetryAfter();      retryAfter.setRetryAfter(1);      sipResponse.setHeader(retryAfter);      if (sipRequest.getMethod().equals(Request.INVITE)) {        sipStack.addTransactionPendingAck(transaction);      }      transaction.sendResponse(sipResponse);      transaction.releaseSem();    } catch (    Exception ex) {      logger.logError("Problem sending error response",ex);      transaction.releaseSem();      sipStack.removeTransaction(transaction);    }  }}  }
class C{  public DispatchHandler addUnconditionalBinding(Handler handler,URI baseURI){  bindings.add(new Binding(null,handler,baseURI));  return this;}  }
class C{  void release(){  for (int i=0; i < n; i++) {    filters[i]=null;  }  n=0;  pos=0;  servlet=null;  servletSupportsAsync=false;}  }
class C{  private void applyPattern(String pattern,boolean localized){  char zeroDigit=PATTERN_ZERO_DIGIT;  char groupingSeparator=PATTERN_GROUPING_SEPARATOR;  char decimalSeparator=PATTERN_DECIMAL_SEPARATOR;  char percent=PATTERN_PERCENT;  char perMill=PATTERN_PER_MILLE;  char digit=PATTERN_DIGIT;  char separator=PATTERN_SEPARATOR;  String exponent=PATTERN_EXPONENT;  char minus=PATTERN_MINUS;  if (localized) {    zeroDigit=symbols.getZeroDigit();    groupingSeparator=symbols.getGroupingSeparator();    decimalSeparator=symbols.getDecimalSeparator();    percent=symbols.getPercent();    perMill=symbols.getPerMill();    digit=symbols.getDigit();    separator=symbols.getPatternSeparator();    exponent=symbols.getExponentSeparator();    minus=symbols.getMinusSign();  }  boolean gotNegative=false;  decimalSeparatorAlwaysShown=false;  isCurrencyFormat=false;  useExponentialNotation=false;  int phaseOneStart=0;  int phaseOneLength=0;  int start=0;  for (int j=1; j >= 0 && start < pattern.length(); --j) {    boolean inQuote=false;    StringBuffer prefix=new StringBuffer();    StringBuffer suffix=new StringBuffer();    int decimalPos=-1;    int multiplier=1;    int digitLeftCount=0, zeroDigitCount=0, digitRightCount=0;    byte groupingCount=-1;    int phase=0;    StringBuffer affix=prefix;    for (int pos=start; pos < pattern.length(); ++pos) {      char ch=pattern.charAt(pos);switch (phase) {case 0:case 2:        if (inQuote) {          if (ch == QUOTE) {            if ((pos + 1) < pattern.length() && pattern.charAt(pos + 1) == QUOTE) {              ++pos;              affix.append("''");            } else {              inQuote=false;            }            continue;          }        } else {          if (ch == digit || ch == zeroDigit || ch == groupingSeparator || ch == decimalSeparator) {            phase=1;            if (j == 1) {              phaseOneStart=pos;            }            --pos;            continue;          } else           if (ch == CURRENCY_SIGN) {            boolean doubled=(pos + 1) < pattern.length() && pattern.charAt(pos + 1) == CURRENCY_SIGN;            if (doubled) {              ++pos;            }            isCurrencyFormat=true;            affix.append(doubled ? "'\u00A4\u00A4" : "'\u00A4");            continue;          } else           if (ch == QUOTE) {            if (ch == QUOTE) {              if ((pos + 1) < pattern.length() && pattern.charAt(pos + 1) == QUOTE) {                ++pos;                affix.append("''");              } else {                inQuote=true;              }              continue;            }          } else           if (ch == separator) {            if (phase == 0 || j == 0) {              throw new IllegalArgumentException("Unquoted special character '" + ch + "' in pattern \""+ pattern+ '"');            }            start=pos + 1;            pos=pattern.length();            continue;          } else           if (ch == percent) {            if (multiplier != 1) {              throw new IllegalArgumentException("Too many percent/per mille characters in pattern \"" + pattern + '"');            }            multiplier=100;            affix.append("'%");            continue;          } else           if (ch == perMill) {            if (multiplier != 1) {              throw new IllegalArgumentException("Too many percent/per mille characters in pattern \"" + pattern + '"');            }            multiplier=1000;            affix.append("'\u2030");            continue;          } else           if (ch == minus) {            affix.append("'-");            continue;          }        }      affix.append(ch);    break;case 1:  if (j == 1) {    ++phaseOneLength;  } else {    if (--phaseOneLength == 0) {      phase=2;      affix=suffix;    }    continue;  }if (ch == digit) {  if (zeroDigitCount > 0) {    ++digitRightCount;  } else {    ++digitLeftCount;  }  if (groupingCount >= 0 && decimalPos < 0) {    ++groupingCount;  }} else if (ch == zeroDigit) {  if (digitRightCount > 0) {    throw new IllegalArgumentException("Unexpected '0' in pattern \"" + pattern + '"');  }  ++zeroDigitCount;  if (groupingCount >= 0 && decimalPos < 0) {    ++groupingCount;  }} else if (ch == groupingSeparator) {  groupingCount=0;} else if (ch == decimalSeparator) {  if (decimalPos >= 0) {    throw new IllegalArgumentException("Multiple decimal separators in pattern \"" + pattern + '"');  }  decimalPos=digitLeftCount + zeroDigitCount + digitRightCount;} else if (pattern.regionMatches(pos,exponent,0,exponent.length())) {  if (useExponentialNotation) {    throw new IllegalArgumentException("Multiple exponential " + "symbols in pattern \"" + pattern + '"');  }  useExponentialNotation=true;  minExponentDigits=0;  pos=pos + exponent.length();  while (pos < pattern.length() && pattern.charAt(pos) == zeroDigit) {    ++minExponentDigits;    ++phaseOneLength;    ++pos;  }  if ((digitLeftCount + zeroDigitCount) < 1 || minExponentDigits < 1) {    throw new IllegalArgumentException("Malformed exponential " + "pattern \"" + pattern + '"');  }  phase=2;  affix=suffix;  --pos;  continue;} else {  phase=2;  affix=suffix;  --pos;  --phaseOneLength;  continue;}break;}}if (zeroDigitCount == 0 && digitLeftCount > 0 && decimalPos >= 0) {int n=decimalPos;if (n == 0) {++n;}digitRightCount=digitLeftCount - n;digitLeftCount=n - 1;zeroDigitCount=1;}if ((decimalPos < 0 && digitRightCount > 0) || (decimalPos >= 0 && (decimalPos < digitLeftCount || decimalPos > (digitLeftCount + zeroDigitCount))) || groupingCount == 0 || inQuote) {throw new IllegalArgumentException("Malformed pattern \"" + pattern + '"');}if (j == 1) {posPrefixPattern=prefix.toString();posSuffixPattern=suffix.toString();negPrefixPattern=posPrefixPattern;negSuffixPattern=posSuffixPattern;int digitTotalCount=digitLeftCount + zeroDigitCount + digitRightCount;int effectiveDecimalPos=decimalPos >= 0 ? decimalPos : digitTotalCount;setMinimumIntegerDigits(effectiveDecimalPos - digitLeftCount);setMaximumIntegerDigits(useExponentialNotation ? digitLeftCount + getMinimumIntegerDigits() : MAXIMUM_INTEGER_DIGITS);setMaximumFractionDigits(decimalPos >= 0 ? (digitTotalCount - decimalPos) : 0);setMinimumFractionDigits(decimalPos >= 0 ? (digitLeftCount + zeroDigitCount - decimalPos) : 0);setGroupingUsed(groupingCount > 0);this.groupingSize=(groupingCount > 0) ? groupingCount : 0;this.multiplier=multiplier;setDecimalSeparatorAlwaysShown(decimalPos == 0 || decimalPos == digitTotalCount);} else {negPrefixPattern=prefix.toString();negSuffixPattern=suffix.toString();gotNegative=true;}}if (pattern.length() == 0) {posPrefixPattern=posSuffixPattern="";setMinimumIntegerDigits(0);setMaximumIntegerDigits(MAXIMUM_INTEGER_DIGITS);setMinimumFractionDigits(0);setMaximumFractionDigits(MAXIMUM_FRACTION_DIGITS);}if (!gotNegative || (negPrefixPattern.equals(posPrefixPattern) && negSuffixPattern.equals(posSuffixPattern))) {negSuffixPattern=posSuffixPattern;negPrefixPattern="'-" + posPrefixPattern;}expandAffixes();}  }
class C{  public static StringArgument adminUidHiddenArgument(final LocalizableMessage description) throws ArgumentException {  return adminUidArgument(true,description);}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof AccessControlContext))   return false;  AccessControlContext that=(AccessControlContext)obj;  if (!equalContext(that))   return false;  if (!equalLimitedContext(that))   return false;  return true;}  }
class C{  void paint(JComponent paintingComponent,JComponent bufferComponent,Graphics g,int x,int y,int w,int h){  PaintManager paintManager=getPaintManager();  if (!isPaintingThread()) {    if (paintManager.getClass() != PaintManager.class) {      paintManager=new PaintManager();      paintManager.repaintManager=this;    }  }  if (!paintManager.paint(paintingComponent,bufferComponent,g,x,y,w,h)) {    g.setClip(x,y,w,h);    paintingComponent.paintToOffscreen(g,x,y,w,h,x + w,y + h);  }}  }
class C{  protected String tradAlphaCount(long val,XResourceBundle thisBundle){  if (val > Long.MAX_VALUE) {    this.error(XSLTErrorResources.ER_NUMBER_TOO_BIG);    return XSLTErrorResources.ERROR_STRING;  }  char[] table=null;  int lookupIndex=1;  char buf[]=new char[100];  int charPos;  charPos=0;  IntArrayWrapper groups=(IntArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_NUMBERGROUPS);  StringArrayWrapper tables=(StringArrayWrapper)(thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_NUM_TABLES));  String numbering=thisBundle.getString(org.apache.xml.utils.res.XResourceBundle.LANG_NUMBERING);  if (numbering.equals(org.apache.xml.utils.res.XResourceBundle.LANG_MULT_ADD)) {    String mult_order=thisBundle.getString(org.apache.xml.utils.res.XResourceBundle.MULT_ORDER);    LongArrayWrapper multiplier=(LongArrayWrapper)(thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_MULTIPLIER));    CharArrayWrapper zeroChar=(CharArrayWrapper)thisBundle.getObject("zero");    int i=0;    while (i < multiplier.getLength() && val < multiplier.getLong(i)) {      i++;    }    do {      if (i >= multiplier.getLength())       break;      if (val < multiplier.getLong(i)) {        if (zeroChar.getLength() == 0) {          i++;        } else {          if (buf[charPos - 1] != zeroChar.getChar(0))           buf[charPos++]=zeroChar.getChar(0);          i++;        }      } else       if (val >= multiplier.getLong(i)) {        long mult=val / multiplier.getLong(i);        val=val % multiplier.getLong(i);        int k=0;        while (k < groups.getLength()) {          lookupIndex=1;          if (mult / groups.getInt(k) <= 0)           k++; else {            CharArrayWrapper THEletters=(CharArrayWrapper)thisBundle.getObject(tables.getString(k));            table=new char[THEletters.getLength() + 1];            int j;            for (j=0; j < THEletters.getLength(); j++) {              table[j + 1]=THEletters.getChar(j);            }            table[0]=THEletters.getChar(j - 1);            lookupIndex=(int)mult / groups.getInt(k);            if (lookupIndex == 0 && mult == 0)             break;            char multiplierChar=((CharArrayWrapper)(thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_MULTIPLIER_CHAR))).getChar(i);            if (lookupIndex < table.length) {              if (mult_order.equals(org.apache.xml.utils.res.XResourceBundle.MULT_PRECEDES)) {                buf[charPos++]=multiplierChar;                buf[charPos++]=table[lookupIndex];              } else {                if (lookupIndex == 1 && i == multiplier.getLength() - 1) {                } else                 buf[charPos++]=table[lookupIndex];                buf[charPos++]=multiplierChar;              }              break;            } else             return XSLTErrorResources.ERROR_STRING;          }        }        i++;      }    } while (i < multiplier.getLength());  }  int count=0;  String tableName;  while (count < groups.getLength()) {    if (val / groups.getInt(count) <= 0)     count++; else {      CharArrayWrapper theletters=(CharArrayWrapper)thisBundle.getObject(tables.getString(count));      table=new char[theletters.getLength() + 1];      int j;      for (j=0; j < theletters.getLength(); j++) {        table[j + 1]=theletters.getChar(j);      }      table[0]=theletters.getChar(j - 1);      lookupIndex=(int)val / groups.getInt(count);      val=val % groups.getInt(count);      if (lookupIndex == 0 && val == 0)       break;      if (lookupIndex < table.length) {        buf[charPos++]=table[lookupIndex];      } else       return XSLTErrorResources.ERROR_STRING;      count++;    }  }  return new String(buf,0,charPos);}  }
class C{  public IntermediateResponse(Operation operation,String oid,ByteString value,List<Control> controls){  this.operation=operation;  this.oid=oid;  this.value=value;  if (controls != null) {    this.controls=controls;  } else {    this.controls=new ArrayList<>(0);  }}  }
class C{  public static int calculateShadowColorLeftBottom(int baseColor){  return Color.rgb((int)(Color.red(baseColor) * 173f / 214),(int)(Color.green(baseColor) * 209f / 230),(int)(Color.blue(baseColor) * 113f / 133));}  }
class C{  public void addReply(String topicId,String body,String access_token,Callback<ResponseBody> callback){  topicApi=getRetrofitForSimpleJson().create(TopicApi.class);  topicApi.addReply(topicId,body,access_token).enqueue(callback);}  }
class C{  public void insert_long(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_long",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_long(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  protected DefinitionKind(int _value){  this._value=_value;}  }
class C{  public String findInLine(Pattern pattern){  ensureOpen();  if (pattern == null)   throw new NullPointerException();  clearCaches();  int endPosition=0;  saveState();  while (true) {    String token=findPatternInBuffer(separatorPattern(),0);    if (token != null) {      endPosition=matcher.start();      break;    }    if (needInput) {      readInput();    } else {      endPosition=buf.limit();      break;    }  }  revertState();  int horizonForLine=endPosition - position;  if (horizonForLine == 0)   return null;  return findWithinHorizon(pattern,horizonForLine);}  }
class C{  public void testSecretKeyFactory08() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      SecretKeyFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException was not thrown as expected (provider is null, algorithm: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  private static Status destroyTokenAndGenerateStatus(String sessionIndex,Object session,HttpServletRequest request,HttpServletResponse response,boolean cleanUp) throws SAML2Exception {  Status status=null;  if (session != null) {    try {      if (cleanUp) {        MultiProtocolUtils.invalidateSession(session,request,response,SingleLogoutManager.SAML2);      }      if (debug.messageEnabled()) {        debug.message("IDPLogoutUtil.destroyTAGR: " + "Local session destroyed.");      }      status=SAML2Utils.generateStatus(SAML2Constants.SUCCESS,"");    } catch (    Exception e) {      debug.error("IDPLogoutUtil.destroyTAGR: ",e);      status=SAML2Utils.generateStatus(SAML2Constants.RESPONDER,"");    }  } else {    if (debug.messageEnabled()) {      debug.message("IDPLogoutUtil.destroyTAGR: " + "No such session with index " + sessionIndex + " exists.");    }    status=SAML2Utils.generateStatus(SAML2Constants.SUCCESS,"");  }  return status;}  }
class C{  private void toString(StringBuilder buffer){  buffer.append("AuthenticationInfo(isAuthenticated=");  buffer.append(isAuthenticated);  buffer.append(",isRoot=");  buffer.append(isRoot);  buffer.append(",mustChangePassword=");  buffer.append(mustChangePassword);  buffer.append(",authenticationDN=\"");  if (authenticationEntry != null) {    buffer.append(authenticationEntry.getName());  }  if (authorizationEntry == null) {    buffer.append("\",authorizationDN=\"\"");  } else {    buffer.append("\",authorizationDN=\"");    buffer.append(authorizationEntry.getName());    buffer.append("\"");  }  if (authenticationType != null) {    buffer.append(",authType=");    buffer.append(authenticationType);  }  if (saslMechanism != null) {    buffer.append(",saslMechanism=");    buffer.append(saslMechanism);  }  buffer.append(")");}  }
class C{  public static NewSuffixOptions createImportFromLDIF(List<String> baseDNs,List<String> ldifPaths,String rejectedFile,String skippedFile){  NewSuffixOptions ops=new NewSuffixOptions(baseDNs);  ops.type=Type.IMPORT_FROM_LDIF_FILE;  ops.ldifPaths.addAll(ldifPaths);  ops.rejectedFile=rejectedFile;  ops.skippedFile=skippedFile;  return ops;}  }
class C{  public boolean seek(int index){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("seek",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    return $self.seek(index);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public PdfCanvas moveTextWithLeading(float x,float y){  currentGs.setLeading(-y);  contentStream.getOutputStream().writeFloat(x).writeSpace().writeFloat(y).writeSpace().writeBytes(TD);  return this;}  }
class C{  public static <K,V>Map<K,V> synchronizedMap(Map<K,V> map){  if (map == null) {    throw new NullPointerException("map == null");  }  return new SynchronizedMap<K,V>(map);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.LayoutElement createLayoutElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.LayoutElementImpl();}  }
class C{  private void startHotRefresh(){  try {    String host=new URL(mUri.toString()).getHost();    String wsUrl="ws://" + host + ":8082";    mWXHandler.obtainMessage(Constants.HOT_REFRESH_CONNECT,0,0,wsUrl).sendToTarget();  } catch (  MalformedURLException e) {    e.printStackTrace();  }}  }
class C{  FormatSpecifierParser(String format){  this.format=format;  this.length=format.length();}  }
class C{  @Override public void destroy(){}  }
class C{  private void notifyAllPlugins(NotifierPlugin.MutateType type,Document document){  for (  NotifierPlugin plugin : plugins) {    plugin.doNotify(type,document);  }}  }
class C{  public int length(){  return count;}  }
class C{  @SuppressWarnings("unused") static <T>ReplayPromise<Collection<T>> replayPromiseCollection(Class<T> componentType,final Duration timeout,final long time){  return new ReplayPromiseImpl<>(timeout,time);}  }
class C{  public UninstallLauncher(String[] args){  super(args,LOG_FILE_PREFIX);  String scriptName;  if (isWindows()) {    scriptName=Installation.WINDOWS_UNINSTALL_FILE_NAME;  } else {    scriptName=Installation.UNIX_UNINSTALL_FILE_NAME;  }  if (System.getProperty(ServerConstants.PROPERTY_SCRIPT_NAME) == null) {    System.setProperty(ServerConstants.PROPERTY_SCRIPT_NAME,scriptName);  }  initializeParser();}  }
class C{  private void readCentralDir() throws IOException {  long scanOffset=raf.length() - ENDHDR;  if (scanOffset < 0) {    throw new ZipException("File too short to be a zip file: " + raf.length());  }  raf.seek(0);  final int headerMagic=Integer.reverseBytes(raf.readInt());  if (headerMagic != LOCSIG) {    throw new ZipException("Not a zip archive");  }  long stopOffset=scanOffset - 65536;  if (stopOffset < 0) {    stopOffset=0;  }  while (true) {    raf.seek(scanOffset);    if (Integer.reverseBytes(raf.readInt()) == ENDSIG) {      break;    }    scanOffset--;    if (scanOffset < stopOffset) {      throw new ZipException("End Of Central Directory signature not found");    }  }  byte[] eocd=new byte[ENDHDR - 4];  raf.readFully(eocd);  BufferIterator it=HeapBufferIterator.iterator(eocd,0,eocd.length,ByteOrder.LITTLE_ENDIAN);  int diskNumber=it.readShort() & 0xffff;  int diskWithCentralDir=it.readShort() & 0xffff;  int numEntries=it.readShort() & 0xffff;  int totalNumEntries=it.readShort() & 0xffff;  it.skip(4);  long centralDirOffset=((long)it.readInt()) & 0xffffffffL;  int commentLength=it.readShort() & 0xffff;  if (numEntries != totalNumEntries || diskNumber != 0 || diskWithCentralDir != 0) {    throw new ZipException("Spanned archives not supported");  }  if (commentLength > 0) {    byte[] commentBytes=new byte[commentLength];    raf.readFully(commentBytes);    comment=new String(commentBytes,0,commentBytes.length,StandardCharsets.UTF_8);  }  RAFStream rafStream=new RAFStream(raf,centralDirOffset);  BufferedInputStream bufferedStream=new BufferedInputStream(rafStream,4096);  byte[] hdrBuf=new byte[CENHDR];  for (int i=0; i < numEntries; ++i) {    ZipEntry newEntry=new ZipEntry(hdrBuf,bufferedStream);    if (newEntry.localHeaderRelOffset >= centralDirOffset) {      throw new ZipException("Local file header offset is after central directory");    }    String entryName=newEntry.getName();    if (entries.put(entryName,newEntry) != null) {      throw new ZipException("Duplicate entry name: " + entryName);    }  }}  }
class C{  public CLIRequest(CLIRequest parent,String[] argv,SSOToken ssoToken){  this.parent=parent;  this.argv=argv;  this.ssoToken=ssoToken;}  }
class C{  public boolean hasMember(Guid guid) throws UMSException {  Principal principal=getPrincipal();  if (principal == null) {    throw new IllegalArgumentException(i18n.getString(IUMSConstants.BAD_PRINCIPAL_HDL));  }  PersistentObject member=UMSObject.getObject(principal,guid);  return hasMember(member);}  }
class C{  @Override public String toJson(){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionSerializer());  return gson.create().toJson(this);}  }
class C{  protected boolean saveComposedText(int pos){  if (composedTextExists()) {    int start=composedTextStart.getOffset();    int len=composedTextEnd.getOffset() - composedTextStart.getOffset();    if (pos >= start && pos <= start + len) {      try {        getDocument().remove(start,len);        return true;      } catch (      BadLocationException ble) {      }    }  }  return false;}  }
class C{  public static ProgressDialog showProgressDialog(Activity activity,int titleResourceId,int messageResourceId){  if (activity == null) {    return null;  }  ActivityUtils.lockOrientation(activity);  ProgressDialog progressDialog=ProgressDialog.show(activity,titleResourceId > 0 ? activity.getString(titleResourceId) : null,activity.getString(messageResourceId),false,false);  progressDialog.setOwnerActivity(activity);  return progressDialog;}  }
class C{  public void remove(int offset,int length){  if (length == 0)   return;  int startLine=lineMgr.getLineOfOffset(offset);  int endLine=lineMgr.getLineOfOffset(offset + length);  int numLines=endLine - startLine;  lineMgr.contentRemoved(startLine,offset,numLines,length);}  }
class C{  private Naming(){}  }
class C{  private static void createDecryptMethod(MethodNode mn,boolean isStatic){  if (isStatic) {    mn.visitCode();    mn.visitInsn(Opcodes.ICONST_0);    mn.visitVarInsn(Opcodes.ISTORE,3);    mn.visitInsn(Opcodes.ICONST_0);    mn.visitVarInsn(Opcodes.ISTORE,4);    Label lbl0=new Label();    mn.visitJumpInsn(Opcodes.GOTO,lbl0);    Label lbl1=new Label();    mn.visitLabel(lbl1);    mn.visitFrame(Opcodes.F_APPEND,2,new Object[]{Opcodes.INTEGER,Opcodes.INTEGER},0,null);    mn.visitVarInsn(Opcodes.ALOAD,0);    mn.visitVarInsn(Opcodes.ILOAD,4);    mn.visitInsn(Opcodes.CALOAD);    mn.visitVarInsn(Opcodes.ISTORE,5);    mn.visitVarInsn(Opcodes.ALOAD,1);    mn.visitVarInsn(Opcodes.ILOAD,3);    mn.visitVarInsn(Opcodes.ALOAD,1);    mn.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/String","length","()I",false);    mn.visitInsn(Opcodes.IREM);    mn.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/String","charAt","(I)C",false);    mn.visitVarInsn(Opcodes.ISTORE,6);    mn.visitVarInsn(Opcodes.ILOAD,5);    mn.visitVarInsn(Opcodes.ILOAD,2);    mn.visitInsn(Opcodes.IADD);    mn.visitVarInsn(Opcodes.ILOAD,6);    mn.visitInsn(Opcodes.ISUB);    mn.visitInsn(Opcodes.I2C);    mn.visitVarInsn(Opcodes.ISTORE,7);    mn.visitVarInsn(Opcodes.ALOAD,0);    mn.visitVarInsn(Opcodes.ILOAD,4);    mn.visitVarInsn(Opcodes.ILOAD,7);    mn.visitInsn(Opcodes.CASTORE);    mn.visitIincInsn(3,1);    mn.visitIincInsn(4,1);    mn.visitLabel(lbl0);    mn.visitFrame(Opcodes.F_SAME,0,null,0,null);    mn.visitVarInsn(Opcodes.ILOAD,4);    mn.visitVarInsn(Opcodes.ALOAD,0);    mn.visitInsn(Opcodes.ARRAYLENGTH);    mn.visitJumpInsn(Opcodes.IF_ICMPLT,lbl1);    mn.visitTypeInsn(Opcodes.NEW,"java/lang/String");    mn.visitInsn(Opcodes.DUP);    mn.visitVarInsn(Opcodes.ALOAD,0);    mn.visitMethodInsn(Opcodes.INVOKESPECIAL,"java/lang/String","<init>","([C)V",false);    mn.visitInsn(Opcodes.ARETURN);    mn.visitMaxs(3,8);    mn.visitEnd();  } else {    mn.visitCode();    mn.visitInsn(Opcodes.ICONST_0);    mn.visitVarInsn(Opcodes.ISTORE,4);    mn.visitInsn(Opcodes.ICONST_0);    mn.visitVarInsn(Opcodes.ISTORE,5);    Label l0=new Label();    mn.visitJumpInsn(Opcodes.GOTO,l0);    Label l1=new Label();    mn.visitLabel(l1);    mn.visitFrame(Opcodes.F_APPEND,2,new Object[]{Opcodes.INTEGER,Opcodes.INTEGER},0,null);    mn.visitVarInsn(Opcodes.ALOAD,1);    mn.visitVarInsn(Opcodes.ILOAD,5);    mn.visitInsn(Opcodes.CALOAD);    mn.visitVarInsn(Opcodes.ISTORE,6);    mn.visitVarInsn(Opcodes.ALOAD,2);    mn.visitVarInsn(Opcodes.ILOAD,4);    mn.visitVarInsn(Opcodes.ALOAD,2);    mn.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/String","length","()I",false);    mn.visitInsn(Opcodes.IREM);    mn.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/String","charAt","(I)C",false);    mn.visitVarInsn(Opcodes.ISTORE,7);    mn.visitVarInsn(Opcodes.ILOAD,6);    mn.visitVarInsn(Opcodes.ILOAD,3);    mn.visitInsn(Opcodes.IADD);    mn.visitVarInsn(Opcodes.ILOAD,7);    mn.visitInsn(Opcodes.ISUB);    mn.visitInsn(Opcodes.I2C);    mn.visitVarInsn(Opcodes.ISTORE,8);    mn.visitVarInsn(Opcodes.ALOAD,1);    mn.visitVarInsn(Opcodes.ILOAD,5);    mn.visitVarInsn(Opcodes.ILOAD,8);    mn.visitInsn(Opcodes.CASTORE);    mn.visitIincInsn(4,1);    mn.visitIincInsn(5,1);    mn.visitLabel(l0);    mn.visitFrame(Opcodes.F_SAME,0,null,0,null);    mn.visitVarInsn(Opcodes.ILOAD,5);    mn.visitVarInsn(Opcodes.ALOAD,1);    mn.visitInsn(Opcodes.ARRAYLENGTH);    mn.visitJumpInsn(Opcodes.IF_ICMPLT,l1);    mn.visitTypeInsn(Opcodes.NEW,"java/lang/String");    mn.visitInsn(Opcodes.DUP);    mn.visitVarInsn(Opcodes.ALOAD,1);    mn.visitMethodInsn(Opcodes.INVOKESPECIAL,"java/lang/String","<init>","([C)V",false);    mn.visitInsn(Opcodes.ARETURN);    mn.visitMaxs(3,9);    mn.visitEnd();  }}  }
class C{  public PortUnreachableException(){}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_left.fixupVariables(vars,globalsSize);  m_right.fixupVariables(vars,globalsSize);}  }
class C{  public static String swapXMLProperty(String xml,String propertyName,String propertyXML){  String ccHead="<cc name=\"" + propertyName + "\"";  int start=xml.indexOf(ccHead);  if (start != -1) {    start=xml.lastIndexOf(PropertyTemplate.PROPERTY_START_OPEN_TAG,start);    int end=xml.indexOf("</property>",start);    if (end != -1) {      xml=xml.substring(0,start) + propertyXML + xml.substring(end + 11);    }  }  return xml;}  }
class C{  private SOAPMessage FormSOAPError(HttpServletResponse resp,String faultCode,String faultString,String detail){  SOAPMessage msg=null;  SOAPEnvelope envelope=null;  SOAPFault sf=null;  SOAPBody body=null;  SOAPElement se=null;  try {    msg=msgFactory.createMessage();    envelope=msg.getSOAPPart().getEnvelope();    body=envelope.getBody();    sf=body.addFault();    Name qName=envelope.createName(faultCode,null,SOAPConstants.URI_NS_SOAP_ENVELOPE);    sf.setFaultCode(qName);    sf.setFaultString(SAMLUtils.bundle.getString(faultString));    if ((detail != null) && !(detail.length() == 0)) {      Detail det=sf.addDetail();      se=(SOAPElement)det.addDetailEntry(envelope.createName("Problem"));      se.addAttribute(envelope.createName("details"),SAMLUtils.bundle.getString(detail));    }  } catch (  SOAPException e) {    SAMLUtils.debug.error("FormSOAPError:",e);    String[] data={SAMLUtils.bundle.getString("soapFaultError")};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.SOAP_FAULT_ERROR,data);    resp.setStatus(resp.SC_INTERNAL_SERVER_ERROR);  }  return msg;}  }
class C{  public JRadioButton(String text,Icon icon,boolean selected){  super(text,icon,selected);  setBorderPainted(false);  setHorizontalAlignment(LEADING);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.ProxyRestrictionType createProxyRestrictionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.ProxyRestrictionTypeImpl();}  }
class C{  public void focusPreviousComponent(Component aComponent){  if (aComponent != null) {    aComponent.transferFocusBackward();  }}  }
class C{  private MutableBigInteger binaryGCD(MutableBigInteger v){  MutableBigInteger u=this;  MutableBigInteger r=new MutableBigInteger();  int s1=u.getLowestSetBit();  int s2=v.getLowestSetBit();  int k=(s1 < s2) ? s1 : s2;  if (k != 0) {    u.rightShift(k);    v.rightShift(k);  }  boolean uOdd=(k == s1);  MutableBigInteger t=uOdd ? v : u;  int tsign=uOdd ? -1 : 1;  int lb;  while ((lb=t.getLowestSetBit()) >= 0) {    t.rightShift(lb);    if (tsign > 0)     u=t; else     v=t;    if (u.intLen < 2 && v.intLen < 2) {      int x=u.value[u.offset];      int y=v.value[v.offset];      x=binaryGcd(x,y);      r.value[0]=x;      r.intLen=1;      r.offset=0;      if (k > 0)       r.leftShift(k);      return r;    }    if ((tsign=u.difference(v)) == 0)     break;    t=(tsign >= 0) ? u : v;  }  if (k > 0)   u.leftShift(k);  return u;}  }
class C{  public static final Action[] augmentList(Action[] list1,Action[] list2){  Hashtable<String,Action> h=new Hashtable<String,Action>();  for (  Action a : list1) {    String value=(String)a.getValue(Action.NAME);    h.put((value != null ? value : ""),a);  }  for (  Action a : list2) {    String value=(String)a.getValue(Action.NAME);    h.put((value != null ? value : ""),a);  }  Action[] actions=new Action[h.size()];  int index=0;  for (Enumeration e=h.elements(); e.hasMoreElements(); ) {    actions[index++]=(Action)e.nextElement();  }  return actions;}  }
class C{  private void doSignal(Node first){  do {    if ((firstWaiter=first.nextWaiter) == null)     lastWaiter=null;    first.nextWaiter=null;  } while (!transferForSignal(first) && (first=firstWaiter) != null);}  }
class C{  public Client addClient(SSOToken token,String clientType,Map cMap,boolean store) throws AMClientCapException {  Client client=null;  if ((cMap == null) || (cMap.isEmpty())) {    return client;  }  if (debug.messageEnabled()) {    debug.message(CLASS + "Adding new Client: " + cMap);  }  if (store) {synchronized (internalClientData) {      intCapInstance.addClient(token,cMap);      cMap=mergeWithParent(cMap);      internalClientData.put(clientType,cMap);    }  } else {    cMap=mergeWithParent(cMap);  }  client=addToIndexes(clientType,cMap,store);  if (!store) {    loadedClientsMap.put(clientType,client);  }  return client;}  }
class C{  public boolean processStartFromRemote(ServerStartMsg serverStartMsg) throws DirectoryException {  session.setProtocolVersion(getCompatibleVersion(serverStartMsg.getVersion()));  tmpGenerationId=serverStartMsg.getGenerationId();  serverId=serverStartMsg.getServerId();  serverURL=serverStartMsg.getServerURL();  groupId=serverStartMsg.getGroupId();  heartbeatInterval=serverStartMsg.getHeartbeatInterval();  setBaseDNAndDomain(serverStartMsg.getBaseDN(),true);  setInitialServerState(serverStartMsg.getServerState());  setSendWindowSize(serverStartMsg.getWindowSize());  if (heartbeatInterval < 0) {    heartbeatInterval=0;  }  return serverStartMsg.getSSLEncryption();}  }
class C{  @Override public String toString(){  return date.toString();}  }
class C{  public long remove(Object key){  Object k=maskNull(key);  int h=System.identityHashCode(k);  Entry<K>[] tab=getTable();  int i=indexFor(h,tab.length);  Entry<K> prev=tab[i];  Entry<K> e=prev;  while (e != null) {    Entry<K> next=e.next;    if (h == e.hash && k == e.get()) {      modCount++;      size--;      if (prev == e)       tab[i]=next; else       prev.next=next;      return e.value;    }    prev=e;    e=next;  }  return 0;}  }
class C{  static boolean isEncoded(final ByteSequence value){  try {    decodeAuthPassword(value.toString());    return true;  } catch (  final Exception e) {    return false;  }}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  @Deprecated public static void track(String path,Object marker,FileDeleteStrategy deleteStrategy){  theInstance.track(path,marker,deleteStrategy);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("staff",true);  newNode=doc.createComment("This is a new Comment node");  newValue=newNode.getNodeValue();  assertEquals("initial","This is a new Comment node",newValue);  newNode.setNodeValue("This should have an effect");  newValue=newNode.getNodeValue();  assertEquals("afterChange","This should have an effect",newValue);}  }
class C{  public int compareTo(XMLString anotherString){  return m_str.compareTo(anotherString.toString());}  }
class C{  protected void clearReferences(){  clearReferencesJdbc();  clearReferencesThreads();  checkThreadLocalsForLeaks();  if (clearReferencesRmiTargets) {    clearReferencesRmiTargets();  }  IntrospectionUtils.clear();  if (clearReferencesLogFactoryRelease) {    org.apache.juli.logging.LogFactory.release(this);  }  java.beans.Introspector.flushCaches();  TomcatURLStreamHandlerFactory.release(this);}  }
class C{  @Override public String delete(String path) throws MalformedURLException, IOException, AuthenticationException {  String resp=null;  ensureValidToken();  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),MessageFormat.format("/webhdfs/v1/{0}?op=DELETE",URLUtil.encodePath(path))),token);  conn.setRequestMethod("DELETE");  conn.setInstanceFollowRedirects(false);  conn.connect();  resp=result(conn,true);  conn.disconnect();  return resp;}  }
class C{  private HasMetadata convertKubernetesItemToOpenShift(HasMetadata item){  if (item instanceof ConfigMap) {    if (Objects.equals("true",getOrCreateAnnotations(item).get(APP_CATALOG_ANNOTATION))) {      return null;    }  }  HasMetadata dependencyResource=openshiftDependencyResources.convertKubernetesItemToOpenShift(item);  if (dependencyResource != null) {    return dependencyResource;  }  KubernetesToOpenShiftConverter converter=openShiftConverters.get(item.getKind());  return converter != null ? converter.convert(item) : item;}  }
class C{  public boolean containsCookie(String cookieStr,String cookieName){  boolean foundCookieName=false;  String cookieNameInStr=null;  if (sessionDebug.messageEnabled()) {    sessionDebug.message("CookieNameStr is :" + cookieNameInStr);    sessionDebug.message("cookieName is :" + cookieName);  }  if (!StringUtils.isBlank(cookieStr)) {    cookieNameInStr=cookieStr.substring(0,cookieStr.indexOf("="));  }  if ((cookieNameInStr != null) && (cookieNameInStr.equals(cookieName))) {    foundCookieName=true;  }  return foundCookieName;}  }
class C{  public PersistentObject next() throws UMSException {  SearchResultEntry ldapEntry;  if (m_attrVals != null) {    if (m_attrIndex < m_attrVals.length) {      String dn=m_attrVals[m_attrIndex++];      PersistentObject pO=new PersistentObject();      pO.setGuid(new Guid(dn));      pO.setPrincipal(m_principal);      return pO;    } else {      throw new NoSuchElementException();    }  }  if ((ldapEntry=currentEntry) != null) {    String id=ldapEntry.getName().toString();    Collection<Attribute> attributes=new ArrayList<>();    for (    Attribute attribute : ldapEntry.getAllAttributes()) {      attributes.add(attribute);    }    AttrSet attrSet=new AttrSet(attributes);    Class javaClass=TemplateManager.getTemplateManager().getJavaClassForEntry(id,attrSet);    PersistentObject pO=null;    try {      pO=(PersistentObject)javaClass.newInstance();    } catch (    Exception e) {      String args[]=new String[1];      args[0]=e.toString();      String msg=i18n.getString(IUMSConstants.NEW_INSTANCE_FAILED,args);      throw new UMSException(msg);    }    pO.setAttrSet(attrSet);    pO.setGuid(new Guid(ldapEntry.getName().toString()));    pO.setPrincipal(m_principal);    return pO;  }  return null;}  }
class C{  private void executeNotAssuredScenario() throws Exception {  checkAssuredParametersOnReceivedUpdateMsg();  scenarioExecuted=true;}  }
class C{  public final void writeShort(int v) throws IOException {  out.write((v >>> 8) & 0xFF);  out.write((v >>> 0) & 0xFF);  incCount(2);}  }
class C{  public static boolean isConversionSupported(AudioFormat.Encoding targetEncoding,AudioFormat sourceFormat){  List codecs=getFormatConversionProviders();  for (int i=0; i < codecs.size(); i++) {    FormatConversionProvider codec=(FormatConversionProvider)codecs.get(i);    if (codec.isConversionSupported(targetEncoding,sourceFormat)) {      return true;    }  }  return false;}  }
class C{  public boolean isPathEditable(TreePath path){  return isEditable();}  }
class C{  public SQLTransientException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public StringReader(String s){  this.str=s;  this.length=s.length();}  }
class C{  public void incrementChainModuleIndex(){  ++chainModuleIndex;}  }
class C{  @Override public int border_line_count(){  return lines_size();}  }
class C{  String replaceTokensWithOrientToken(String queryString) throws PrepareNotSupported {  Matcher matcher=tokenPattern.matcher(queryString);  StringBuffer buf=new StringBuffer();  while (matcher.find()) {    String origToken=matcher.group(1);    String tokenKey=origToken;    String tokenPrefix=null;    String[] tokenKeyParts=tokenKey.split(":",2);    if (tokenKeyParts.length == 2) {      tokenPrefix=tokenKeyParts[0];      tokenKey=tokenKeyParts[1];    }    matcher.appendReplacement(buf,"");    if (tokenPrefix != null && tokenPrefix.equals(PREFIX_DOTNOTATION)) {      buf.append(JSON_POINTER_TO_DOT_NOTATION.apply(tokenKey));    } else     if (tokenKey != null && tokenKey.length() > 0) {      String newToken=":" + tokenKey;      buf.append(newToken);    }  }  matcher.appendTail(buf);  return buf.toString();}  }
class C{  public static ListSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,InstantiableRelationDefinition<?,?> r) throws ArgumentException {  return new ListSubCommandHandler(parser,p,r,r.getPluralName(),r.getUserFriendlyPluralName());}  }
class C{  private BigInteger remainderKnuth(BigInteger val){  MutableBigInteger q=new MutableBigInteger(), a=new MutableBigInteger(this.mag), b=new MutableBigInteger(val.mag);  return a.divideKnuth(b,q).toBigInteger(this.signum);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(noderemovechildgetnodename.class,args);}  }
class C{  private Response createResponse(final JsonValue jsonResponse) throws IOException {  Response response=new Response(Status.OK);  response.getHeaders().put(CACHE_CONTROL_HEADER_NAME,NO_CACHE_CACHE_CONTROL_HEADER);  response.getHeaders().put(PRAGMA_HEADER_NAME,PRAGMA_NO_CACHE_HEADER);  response.getHeaders().put(EXPIRES_HEADER_NAME,ALWAYS_EXPIRE_HEADER);  response.getHeaders().put(CONTENT_TYPE_HEADER_NAME,"application/json");  response.setEntity(jsonResponse.getObject());  return response;}  }
class C{  public static void createService(String xml,NewServiceWrapper newServiceModifications,SSOToken adminToken) throws UpgradeException {  createService(xml,adminToken);  for (  Map.Entry<String,ServiceSchemaModificationWrapper> schemaMods : newServiceModifications.getModifiedSchemaMap().entrySet()) {    final ServiceSchemaModificationWrapper ssmWrapper=schemaMods.getValue();    if (ssmWrapper != null && ssmWrapper.hasBeenModified()) {      modifyAttributesInExistingSchema(newServiceModifications.getServiceName(),schemaMods.getKey(),ssmWrapper,getServiceSchema(ssmWrapper.getServiceName(),null,schemaMods.getKey(),adminToken),adminToken);    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.OldProvidedNameIdentifierElement createOldProvidedNameIdentifierElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.OldProvidedNameIdentifierElementImpl();}  }
class C{  public void ssoTokenChanged(SSOTokenEvent evt){  try {    SSOTokenID tokenId=evt.getToken().getTokenID();    String tokenIdStr=tokenId.toString();    if (tokenIdStr == null) {      debug.error("PolicySSOTokenListener: " + "token id string is null");      return;    }synchronized (PolicyEvaluator.policyResultsCache) {      if (!(resultsCache.isEmpty())) {        Set svcInCache=resultsCache.keySet();        Iterator svcInCacheIter=svcInCache.iterator();        while (svcInCacheIter.hasNext()) {          String svcName=(String)svcInCacheIter.next();          Map svcValue=(Map)resultsCache.get(svcName);          if ((svcValue != null) && (!(svcValue.isEmpty()))) {            Set rscInCache=svcValue.keySet();            Iterator rscInCacheIter=rscInCache.iterator();            while (rscInCacheIter.hasNext()) {              String rscName=(String)rscInCacheIter.next();              Map rscValues=(Map)svcValue.get(rscName);              if ((rscValues != null) && (!(rscValues.isEmpty()))) {                if ((rscValues.remove(tokenIdStr)) != null) {                  if (debug.messageEnabled()) {                    debug.message("cleaned up the " + "policy results for an " + "expired token "+ tokenIdStr);                  }                }              }            }          }        }      }    }    PolicyEvaluator.userNSRoleCache.remove(tokenIdStr);    if (debug.messageEnabled()) {      debug.message("PolicySSOTokenListener.ssoTokenChanged():" + "cleaned up user nsRole cache for an expired token " + tokenIdStr);    }    SubjectEvaluationCache.subjectEvaluationCache.remove(tokenIdStr);    if (debug.messageEnabled()) {      debug.message("PolicySSOTokenListener.ssoTokenChanged():" + "cleaned up subject evaluation cache for an expired token" + " "+ tokenIdStr);    }    LDAPRoles.userLDAPRoleCache.remove(tokenIdStr);    if (debug.messageEnabled()) {      debug.message("PolicySSOTokenListener.ssoTokenChanged()cleaned " + "up user role cache of LDAPRoles " + "for an expired token "+ tokenIdStr);    }    if (evt.getType() == SSOTokenEvent.SSO_TOKEN_PROPERTY_CHANGED) {      if (debug.messageEnabled()) {        debug.message("PolicySSOTokenListener.ssoTokenChanged():" + " receieved sso token property change notification, " + " clearing cached subject result cache "+ " for tokenIdStr XXXXXX");      }      PolicyCache.getInstance().clearSubjectResultCache(tokenIdStr);    }    PolicyEvaluator.ssoListenerRegistry.remove(tokenIdStr);  } catch (  Exception e) {    debug.error("PolicySSOTokenListener.ssoTokenChanged():policy sso " + "token listener",e);  }}  }
class C{  final boolean unlink(Index<K,V> succ){  return node.value != null && casRight(succ,succ.right);}  }
class C{  static boolean containsHtml(String text){  return text != null && text.indexOf('<') != -1 && text.indexOf('>') != -1;}  }
class C{  public static void removeService(String serviceName,String version){  try {    ServiceManager scm=getServiceManager();    scm.removeService(serviceName,version);  } catch (  SSOException e) {    debug.error("invalid sso token",e);  }catch (  SMSException sme) {    debug.error("invalid service name ",sme);  }catch (  Exception me) {    debug.error("invalid service name ",me);  }}  }
class C{  public EnumConstantNotPresentException(Class<? extends Enum> enumType,String constantName){  super(enumType.getName() + "." + constantName);  this.enumType=enumType;  this.constantName=constantName;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    if (serverTransaction == null) {      System.out.println("null server transaction -- ignoring the ACK!");      return;    }    Dialog dialog=serverTransaction.getDialog();    System.out.println("Dialog Created = " + dialog.getDialogId() + " Dialog State = "+ dialog.getState());    System.out.println("Waiting for INFO");  } catch (  Exception ex) {    ex.printStackTrace();    DialogTimeoutTest.fail("Shootme: Failed on process ACK",ex);  }}  }
class C{  public void test_ConstructorLjava_security_SecureRandomSpi_java_security_Provider(){  try {    new MySecureRandom(null,null);  } catch (  Exception e) {    fail("Constructor threw exception : " + e);  }  try {    MyProvider p=new MyProvider();    MySecureRandom sr=new MySecureRandom(new MySecureRandomSpi(),p);    assertEquals("unknown",sr.getAlgorithm());    assertEquals(p,sr.getProvider());    sr=new MySecureRandom(new MySecureRandomSpi(),null);    sr=new MySecureRandom(null,p);  } catch (  Exception e) {    fail("Constructor threw exception : " + e);  }}  }
class C{  void compWriteObjectNotify(){  byte count=JComponent.getWriteObjCounter(this);  JComponent.setWriteObjCounter(this,(byte)(count + 1));  if (count != 0) {    return;  }  uninstallUIAndProperties();  if (getToolTipText() != null || this instanceof javax.swing.table.JTableHeader) {    ToolTipManager.sharedInstance().unregisterComponent(JComponent.this);  }}  }
class C{  public void printlnMessage(String str){  buff.append(str).append("\n");}  }
class C{  public synchronized String toString(){  return super.toString();}  }
class C{  public Builder noStore(){  this.noStore=true;  return this;}  }
class C{  public Object clone() throws CloneNotSupportedException {  return new IntVector(this);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.RealmElement createRealmElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RealmElementImpl(value);}  }
class C{  public boolean isErrorLoggable(Level level){  return errorLogger.isLoggable(level);}  }
class C{  public YamlConfigurationOptions indent(int value){  Validate.isTrue(value >= 2,"Indent must be at least 2 characters");  Validate.isTrue(value <= 9,"Indent cannot be greater than 9 characters");  this.indent=value;  return this;}  }
class C{  public TreeSelectionEvent(Object source,TreePath[] paths,boolean[] areNew,TreePath oldLeadSelectionPath,TreePath newLeadSelectionPath){  super(source);  this.paths=paths;  this.areNew=areNew;  this.oldLeadSelectionPath=oldLeadSelectionPath;  this.newLeadSelectionPath=newLeadSelectionPath;}  }
class C{  public MidiUnavailableException(String message){  super(message);}  }
class C{  protected String[] hashToStringArray(Hashtable<String,?> h) throws NullPointerException {  Vector<String> v=new Vector<>();  Enumeration<String> e=h.keys();  while (e.hasMoreElements()) {    String k=e.nextElement();    v.add(k + "=" + h.get(k).toString());  }  String[] strArr=new String[v.size()];  v.copyInto(strArr);  return strArr;}  }
class C{  @Issue("JENKINS-29922") @Test public void dollar_class_must_die_onearg() throws Exception {  WorkflowJob p=r.jenkins.createProject(WorkflowJob.class,"die4");  p.setDefinition(new CpsFlowDefinition("newYork 'Empire'"));  r.assertLogContains("The Empire State",r.assertBuildStatusSuccess(p.scheduleBuild2(0)));}  }
class C{  @DataProvider(name="createChangeStatusData") public Object[][] createChangeStatusData(){  return new Object[][]{{ServerStatus.NORMAL_STATUS,ServerStatus.FULL_UPDATE_STATUS},{ServerStatus.DEGRADED_STATUS,ServerStatus.NORMAL_STATUS},{ServerStatus.FULL_UPDATE_STATUS,ServerStatus.DEGRADED_STATUS}};}  }
class C{  public static void saveAsJar(Map<String,byte[]> outBytes,String fileName){  try {    JarOutputStream out=new JarOutputStream(new java.io.FileOutputStream(fileName));    for (    String entry : outBytes.keySet()) {      String ext=entry.contains(".") ? "" : ".class";      out.putNextEntry(new ZipEntry(entry + ext));      out.write(outBytes.get(entry));      out.closeEntry();    }    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public ModifyDNOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,DN entryDN,RDN newRDN,boolean deleteOldRDN,DN newSuperior){  super(clientConnection,operationID,messageID,requestControls);  this.entryDN=entryDN;  this.newRDN=newRDN;  this.deleteOldRDN=deleteOldRDN;  this.newSuperior=newSuperior;  rawEntryDN=ByteString.valueOfUtf8(entryDN.toString());  rawNewRDN=ByteString.valueOfUtf8(newRDN.toString());  if (newSuperior == null) {    rawNewSuperior=null;  } else {    rawNewSuperior=ByteString.valueOfUtf8(newSuperior.toString());  }  responseControls=new ArrayList<>();  cancelRequest=null;  modifications=null;}  }
class C{  public int executeSearch(LDAPConnection connection,String baseDN,List<LDAPFilter> filters,Set<String> attributes,LDAPSearchOptions searchOptions,int wrapColumn) throws IOException, LDAPException {  int matchingEntries=0;  for (  LDAPFilter filter : filters) {    ByteString asn1OctetStr=ByteString.valueOfUtf8(baseDN);    SearchRequestProtocolOp protocolOp=new SearchRequestProtocolOp(asn1OctetStr,searchOptions.getSearchScope(),searchOptions.getDereferencePolicy(),searchOptions.getSizeLimit(),searchOptions.getTimeLimit(),searchOptions.getTypesOnly(),filter,attributes);    if (!searchOptions.showOperations()) {      try {        boolean typesOnly=searchOptions.getTypesOnly();        LDAPMessage message=new LDAPMessage(nextMessageID.getAndIncrement(),protocolOp,searchOptions.getControls());        connection.getLDAPWriter().writeMessage(message);        byte opType;        do {          int resultCode=0;          LocalizableMessage errorMessage=null;          DN matchedDN=null;          LDAPMessage responseMessage=connection.getLDAPReader().readMessage();          responseControls=responseMessage.getControls();          opType=responseMessage.getProtocolOpType();switch (opType) {case OP_TYPE_SEARCH_RESULT_ENTRY:            for (            Control c : responseControls) {              if (c.getOID().equals(OID_ENTRY_CHANGE_NOTIFICATION)) {                try {                  EntryChangeNotificationControl ecn=EntryChangeNotificationControl.DECODER.decode(c.isCritical(),((LDAPControl)c).getValue());                  out.println(INFO_LDAPSEARCH_PSEARCH_CHANGE_TYPE.get(ecn.getChangeType()));                  DN previousDN=ecn.getPreviousDN();                  if (previousDN != null) {                    out.println(INFO_LDAPSEARCH_PSEARCH_PREVIOUS_DN.get(previousDN));                  }                } catch (                Exception e) {                }              } else               if (c.getOID().equals(OID_ACCOUNT_USABLE_CONTROL)) {                try {                  AccountUsableResponseControl acrc=AccountUsableResponseControl.DECODER.decode(c.isCritical(),((LDAPControl)c).getValue());                  out.println(INFO_LDAPSEARCH_ACCTUSABLE_HEADER.get());                  if (acrc.isUsable()) {                    out.println(INFO_LDAPSEARCH_ACCTUSABLE_IS_USABLE.get());                    if (acrc.getSecondsBeforeExpiration() > 0) {                      int timeToExp=acrc.getSecondsBeforeExpiration();                      LocalizableMessage timeToExpStr=secondsToTimeString(timeToExp);                      out.println(INFO_LDAPSEARCH_ACCTUSABLE_TIME_UNTIL_EXPIRATION.get(timeToExpStr));                    }                  } else {                    out.println(INFO_LDAPSEARCH_ACCTUSABLE_NOT_USABLE.get());                    if (acrc.isInactive()) {                      out.println(INFO_LDAPSEARCH_ACCTUSABLE_ACCT_INACTIVE.get());                    }                    if (acrc.isReset()) {                      out.println(INFO_LDAPSEARCH_ACCTUSABLE_PW_RESET.get());                    }                    if (acrc.isExpired()) {                      out.println(INFO_LDAPSEARCH_ACCTUSABLE_PW_EXPIRED.get());                      if (acrc.getRemainingGraceLogins() > 0) {                        out.println(INFO_LDAPSEARCH_ACCTUSABLE_REMAINING_GRACE.get(acrc.getRemainingGraceLogins()));                      }                    }                    if (acrc.isLocked()) {                      out.println(INFO_LDAPSEARCH_ACCTUSABLE_LOCKED.get());                      if (acrc.getSecondsBeforeUnlock() > 0) {                        int timeToUnlock=acrc.getSecondsBeforeUnlock();                        LocalizableMessage timeToUnlockStr=secondsToTimeString(timeToUnlock);                        out.println(INFO_LDAPSEARCH_ACCTUSABLE_TIME_UNTIL_UNLOCK.get(timeToUnlockStr));                      }                    }                  }                } catch (                Exception e) {                }              } else               if (c.getOID().equals(OID_ECL_COOKIE_EXCHANGE_CONTROL)) {                try {                  EntryChangelogNotificationControl ctrl=EntryChangelogNotificationControl.DECODER.decode(c.isCritical(),((LDAPControl)c).getValue());                  out.println(INFO_LDAPSEARCH_PUBLIC_CHANGELOG_COOKIE_EXC.get(c.getOID(),ctrl.getCookie()));                } catch (                Exception e) {                  logger.traceException(e);                }              }            }          SearchResultEntryProtocolOp searchEntryOp=responseMessage.getSearchResultEntryProtocolOp();        StringBuilder sb=new StringBuilder();      toLDIF(searchEntryOp,sb,wrapColumn,typesOnly);    out.print(sb.toString());  matchingEntries++;break;case OP_TYPE_SEARCH_RESULT_REFERENCE:SearchResultReferenceProtocolOp searchRefOp=responseMessage.getSearchResultReferenceProtocolOp();out.println(searchRefOp.toString());break;case OP_TYPE_SEARCH_RESULT_DONE:SearchResultDoneProtocolOp searchOp=responseMessage.getSearchResultDoneProtocolOp();resultCode=searchOp.getResultCode();errorMessage=searchOp.getErrorMessage();matchedDN=searchOp.getMatchedDN();for (Control c : responseMessage.getControls()) {if (c.getOID().equals(OID_SERVER_SIDE_SORT_RESPONSE_CONTROL)) {try {ServerSideSortResponseControl sortResponse=ServerSideSortResponseControl.DECODER.decode(c.isCritical(),((LDAPControl)c).getValue());int rc=sortResponse.getResultCode();if (rc != LDAPResultCode.SUCCESS) {LocalizableMessage msg=WARN_LDAPSEARCH_SORT_ERROR.get(LDAPResultCode.toString(rc));err.println(msg);}} catch (Exception e) {LocalizableMessage msg=WARN_LDAPSEARCH_CANNOT_DECODE_SORT_RESPONSE.get(getExceptionMessage(e));err.println(msg);}} else if (c.getOID().equals(OID_VLV_RESPONSE_CONTROL)) {try {VLVResponseControl vlvResponse=VLVResponseControl.DECODER.decode(c.isCritical(),((LDAPControl)c).getValue());int rc=vlvResponse.getVLVResultCode();if (rc == LDAPResultCode.SUCCESS) {LocalizableMessage msg=INFO_LDAPSEARCH_VLV_TARGET_OFFSET.get(vlvResponse.getTargetPosition());out.println(msg);msg=INFO_LDAPSEARCH_VLV_CONTENT_COUNT.get(vlvResponse.getContentCount());out.println(msg);} else {LocalizableMessage msg=WARN_LDAPSEARCH_VLV_ERROR.get(LDAPResultCode.toString(rc));err.println(msg);}} catch (Exception e) {LocalizableMessage msg=WARN_LDAPSEARCH_CANNOT_DECODE_VLV_RESPONSE.get(getExceptionMessage(e));err.println(msg);}}}break;default :if (opType == OP_TYPE_EXTENDED_RESPONSE) {ExtendedResponseProtocolOp op=responseMessage.getExtendedResponseProtocolOp();if (op.getOID().equals(OID_NOTICE_OF_DISCONNECTION)) {resultCode=op.getResultCode();errorMessage=op.getErrorMessage();matchedDN=op.getMatchedDN();break;}}printWrappedText(err,INFO_SEARCH_OPERATION_INVALID_PROTOCOL.get(opType));}if (resultCode != SUCCESS) {LocalizableMessage msg=INFO_OPERATION_FAILED.get("SEARCH");throw new LDAPException(resultCode,errorMessage,msg,matchedDN,null);} else if (errorMessage != null) {out.println();printWrappedText(out,errorMessage);}} while (opType != OP_TYPE_SEARCH_RESULT_DONE);} catch (DecodeException ae) {logger.traceException(ae);throw new IOException(ae.getMessage());}}}if (searchOptions.countMatchingEntries()) {LocalizableMessage message=INFO_LDAPSEARCH_MATCHING_ENTRY_COUNT.get(matchingEntries);out.println(message);out.println();}return matchingEntries;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiDesktopPaneUI();  return MultiLookAndFeel.createUIs(mui,((MultiDesktopPaneUI)mui).uis,a);}  }
class C{  public static String convertDateString(String srcDateString,java.util.Locale srcLocale,java.util.Locale dstLocale){  Date date=parseDateString(srcDateString,srcLocale);  return getDateString(date,dstLocale);}  }
class C{  public void test_DSAKeyPairGenerator01(){  DSAParams dsaParams=new DSAParameterSpec(p,q,g);  SecureRandom random=null;  MyDSA dsa=new MyDSA(dsaParams);  try {    random=SecureRandom.getInstance("SHA1PRNG");  } catch (  Exception e) {    fail("Unexpected exception for SecureRandom: " + e);  }  try {    dsa.initialize(dsaParams,random);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    dsa.initialize(dsaParams,null);    fail("InvalidParameterException was not thrown");  } catch (  InvalidParameterException ipe) {  }catch (  Exception e) {    fail(e + " was thrown instead of InvalidParameterException");  }  try {    dsa.initialize(null,random);    fail("InvalidParameterException was not thrown");  } catch (  InvalidParameterException ipe) {  }catch (  Exception e) {    fail(e + " was thrown instead of InvalidParameterException");  }}  }
class C{  public void decrementMaxForwards() throws TooManyHopsException {  if (maxForwards > 0)   maxForwards--; else   throw new TooManyHopsException("has already reached 0!");}  }
class C{  public AMKeyProvider(KeyStoreConfig kc) throws KeyStoreException, IOException {  this.keystoreFile=kc.getKeyStoreFile();  this.keystorePass=new String(kc.getKeyStorePassword());  this.privateKeyPass=new String(kc.getKeyPassword());  this.keystoreType=kc.getKeyStoreType();  this.storePassPath=kc.getKeyStorePasswordFile();  this.keyPassPath=kc.getKeyPasswordFile();  mapPk2Cert();}  }
class C{  public void dragFrame(JComponent f,int newX,int newY){  if (dragMode == OUTLINE_DRAG_MODE) {    JDesktopPane desktopPane=getDesktopPane(f);    if (desktopPane != null) {      Graphics g=JComponent.safelyGetGraphics(desktopPane);      g.setXORMode(Color.white);      if (currentLoc != null) {        g.drawRect(currentLoc.x,currentLoc.y,f.getWidth() - 1,f.getHeight() - 1);      }      g.drawRect(newX,newY,f.getWidth() - 1,f.getHeight() - 1);      sun.java2d.SurfaceData sData=((sun.java2d.SunGraphics2D)g).getSurfaceData();      if (!sData.isSurfaceLost()) {        currentLoc=new Point(newX,newY);      }      ;      g.dispose();    }  } else   if (dragMode == FASTER_DRAG_MODE) {    dragFrameFaster(f,newX,newY);  } else {    setBoundsForFrame(f,newX,newY,f.getWidth(),f.getHeight());  }}  }
class C{  public int intValue(){  return (int)longValue;}  }
class C{  public String toPattern(){  StringBuffer buffer=new StringBuffer();  for (int i=0; i <= maxOffset; i++) {    appendQuoted(buffer,strings[i]);    buffer.append('{');    buffer.append(argumentNumbers[i]);    Format format=formats[i];    String pattern=null;    if (format instanceof ChoiceFormat) {      buffer.append(",choice,");      pattern=((ChoiceFormat)format).toPattern();    } else     if (format instanceof DecimalFormat) {      pattern=decodeDecimalFormat(buffer,format);    } else     if (format instanceof SimpleDateFormat) {      pattern=decodeSimpleDateFormat(buffer,format);    } else     if (format != null) {      throw new IllegalArgumentException("Unknown format");    }    if (pattern != null) {      boolean quote=false;      int index=0, length=pattern.length(), count=0;      while (index < length) {        char ch=pattern.charAt(index++);        if (ch == '\'') {          quote=!quote;        }        if (!quote) {          if (ch == '{') {            count++;          }          if (ch == '}') {            if (count > 0) {              count--;            } else {              buffer.append("'}");              ch='\'';            }          }        }        buffer.append(ch);      }    }    buffer.append('}');  }  if (maxOffset + 1 < strings.length) {    appendQuoted(buffer,strings[maxOffset + 1]);  }  return buffer.toString();}  }
class C{  public void test_unwrap_ByteBuffer$ByteBuffer_05(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer[] bbd={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    SSLEngineResult res=sse.unwrap(bbs,bbd);    assertEquals(0,res.bytesConsumed());    assertEquals(0,res.bytesProduced());  } catch (  Exception ex) {    fail("Unexpected exception: " + ex);  }}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {}  }
class C{  public static void show(Context context,int title,int message){  show(context,context.getString(title),context.getString(message));}  }
class C{  public boolean hasMember(Guid guid) throws UMSException {  String filter=getSearchFilter();  if (filter == null) {    return false;  }  String dn=guid.getDn();  String rdn=DN.valueOf(dn).rdn().toString();  filter="(&" + filter + "("+ rdn+ "))";  String[] attributesToGet={"dn"};  SearchResults searchResults=DataLayer.getInstance().search(getPrincipal(),getSearchBase(),getSearchScope(),filter,attributesToGet,false,null);  while (searchResults.hasMoreElements()) {    String s=searchResults.next().getDN();    if (Guid.equals(s,dn)) {      searchResults.abandon();      return true;    }  }  return false;}  }
class C{  public static boolean sslServerSocketSupportsSessionTickets(){  return false;}  }
class C{  public Cell(){  this(1,1);}  }
class C{  public static void removeAllByDN(Set<String> originalSet,Collection<String> toDelete){  Set<DN> setDNs=toDNs(toDelete);  for (Iterator<String> iter=originalSet.iterator(); iter.hasNext(); ) {    String strDN=iter.next();    DN dn=DN.valueOf(strDN);    if (containsDN(setDNs,dn)) {      iter.remove();    }  }}  }
class C{  public DatatypeConfigurationException(String message,Throwable cause){  super(message,cause);}  }
class C{  private TemplateSubPatternAssociation insertAssociationIntoList(TemplateSubPatternAssociation head,TemplateSubPatternAssociation item,boolean isWildCardInsert){  double priority=getPriorityOrScore(item);  double workPriority;  int importLevel=item.getImportLevel();  int docOrder=item.getDocOrderPos();  TemplateSubPatternAssociation insertPoint=head;  TemplateSubPatternAssociation next;  boolean insertBefore;  while (true) {    next=insertPoint.getNext();    if (null == next)     break; else {      workPriority=getPriorityOrScore(next);      if (importLevel > next.getImportLevel())       break; else       if (importLevel < next.getImportLevel())       insertPoint=next; else       if (priority > workPriority)       break; else       if (priority < workPriority)       insertPoint=next; else       if (docOrder >= next.getDocOrderPos())       break; else       insertPoint=next;    }  }  if ((null == next) || (insertPoint == head)) {    workPriority=getPriorityOrScore(insertPoint);    if (importLevel > insertPoint.getImportLevel())     insertBefore=true; else     if (importLevel < insertPoint.getImportLevel())     insertBefore=false; else     if (priority > workPriority)     insertBefore=true; else     if (priority < workPriority)     insertBefore=false; else     if (docOrder >= insertPoint.getDocOrderPos())     insertBefore=true; else     insertBefore=false;  } else   insertBefore=false;  if (isWildCardInsert) {    if (insertBefore) {      item.setNext(insertPoint);      String key=insertPoint.getTargetString();      item.setTargetString(key);      putHead(key,item);      return item;    } else {      item.setNext(next);      insertPoint.setNext(item);      return head;    }  } else {    if (insertBefore) {      item.setNext(insertPoint);      if (insertPoint.isWild() || item.isWild())       m_wildCardPatterns=item; else       putHead(item.getTargetString(),item);      return item;    } else {      item.setNext(next);      insertPoint.setNext(item);      return head;    }  }}  }
class C{  public ColumnDocumentRenderer(Document document,boolean immediateFlush,Rectangle[] columns){  super(document,immediateFlush);  this.columns=columns;}  }
class C{  public static boolean isNetworkAvailable(Context context){  try {    ConnectivityManager connectivityManager=(ConnectivityManager)context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);    NetworkInfo activeNetworkInfo=connectivityManager.getActiveNetworkInfo();    return activeNetworkInfo != null && activeNetworkInfo.isConnected();  } catch (  Exception e) {    return false;  }}  }
class C{  public static DynamicMBean createMBean(ContextEnvironment environment) throws Exception {  String mname=createManagedName(environment);  ManagedBean managed=registry.findManagedBean(mname);  if (managed == null) {    Exception e=new Exception("ManagedBean is not found with " + mname);    throw new MBeanException(e);  }  String domain=managed.getDomain();  if (domain == null)   domain=mserver.getDefaultDomain();  DynamicMBean mbean=managed.createMBean(environment);  ObjectName oname=createObjectName(domain,environment);  if (mserver.isRegistered(oname)) {    mserver.unregisterMBean(oname);  }  mserver.registerMBean(mbean,oname);  return (mbean);}  }
class C{  public static void resetCurrentFileList(String logName){  currentFileList.remove(PREFIX + logName);}  }
class C{  public static boolean checkImageSize(final InputStream stream,final IConfiguration conf) throws IOException {  BufferedImage bi=ImageIO.read(stream);  stream.close();  if (bi == null) {    return false;  }  if (bi.getHeight() > conf.getImgHeight() || bi.getWidth() > conf.getImgWidth()) {    return false;  }  return true;}  }
class C{  private boolean processOneRequest(InputStream in,OutputStream out,Socket socket) throws IOException, InterruptedException {  RecordedRequest request=readRequest(in,sequenceNumber);  if (request == null) {    return false;  }  MockResponse response=dispatch(request);  writeResponse(out,response);  if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AT_END) {    in.close();    out.close();  } else   if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_INPUT_AT_END) {    socket.shutdownInput();  } else   if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_OUTPUT_AT_END) {    socket.shutdownOutput();  }  sequenceNumber++;  return true;}  }
class C{  public static boolean syncReplicatedDomains(Set currServerSet,String port,String passwd){  Debug debug=Debug.getInstance(SetupConstants.DEBUG_NAME);  debug.message("EmbeddedOpenDS:syncReplication:Domains:started");  String[] args={"-p",port,"-h","localhost","-D","cn=directory manager","-w",passwd,"list-replication-domains","--provider-name","Multimaster Synchronization","--property","replication-server","--no-prompt","--trustAll","--noPropertiesFile"};  if (debug.messageEnabled()) {    String dbgcmd=concat(args).replaceAll(passwd,"****");    debug.message("EmbeddedOpenDS:syncReplication:exec dsconfig:" + dbgcmd);  }  ByteArrayOutputStream bos=new ByteArrayOutputStream();  ByteArrayOutputStream boe=new ByteArrayOutputStream();  DSConfig.main(args,bos,boe);  String str=bos.toString();  String stre=boe.toString();  if (stre.length() != 0) {    debug.error("EmbeddedOpenDS:syncReplication:stderr:" + stre);  }  BufferedReader brd=new BufferedReader(new StringReader(str));  String line=null;  try {    line=brd.readLine();    line=brd.readLine();    while ((line=brd.readLine()) != null) {      try {        int dcolon=line.indexOf(':');        String domainname=line.substring(0,dcolon).trim();        int stcolon=dcolon + 1;        String replservers=line.substring(stcolon + 1);        if (debug.messageEnabled()) {          debug.message("EmbeddedOpenDS:syncRepl:domain=" + domainname + " replservers="+ replservers);        }        StringTokenizer stok=new StringTokenizer(replservers,",");        List cmdlist=new ArrayList();        cmdlist.add("-p");        cmdlist.add(port);        cmdlist.add("-h");        cmdlist.add("localhost");        cmdlist.add("-D");        cmdlist.add("cn=directory manager");        cmdlist.add("-w");        cmdlist.add(passwd);        cmdlist.add("--no-prompt");        cmdlist.add("--trustAll");        cmdlist.add("set-replication-domain-prop");        cmdlist.add("--provider-name");        cmdlist.add("Multimaster Synchronization");        cmdlist.add("--domain-name");        cmdlist.add(domainname);        cmdlist.add("--noPropertiesFile");        int numremoved=0;        while (stok.hasMoreTokens()) {          String tok=stok.nextToken().trim();          if (!currServerSet.contains(tok)) {            cmdlist.add("--remove");            cmdlist.add("replication-server:" + tok);            numremoved++;          }        }        if (numremoved > 0) {          String[] args1=(String[])cmdlist.toArray(new String[cmdlist.size()]);          if (debug.messageEnabled()) {            String dbgcmd1=concat(args1).replaceAll(passwd,"****");            debug.message("EmbeddedOpenDS:syncReplication:Execute:" + dbgcmd1);          }          bos=new ByteArrayOutputStream();          boe=new ByteArrayOutputStream();          DSConfig.main(args1,bos,boe);          str=bos.toString();          stre=boe.toString();          if (stre.length() != 0) {            debug.error("EmbeddedOpenDS:syncRepl:stderr=" + stre);          }          if (debug.messageEnabled()) {            debug.message("EmbeddedOpenDS:syncReplication:Result:" + str);          }        }      } catch (      Exception ex) {        debug.error("EmbeddedOpenDS:syncReplication:Failed:",ex);        return false;      }    }  } catch (  Exception ex) {    debug.error("EmbeddedOpenDS:syncReplication:Failed:",ex);    return false;  }  return true;}  }
class C{  private void doSignal(Node first){  do {    if ((firstWaiter=first.nextWaiter) == null)     lastWaiter=null;    first.nextWaiter=null;  } while (!transferForSignal(first) && (first=firstWaiter) != null);}  }
class C{  public void run(){synchronized (thisTurn) {    if (!thisTurn.isEmpty()) {      for (Iterator iter=thisTurn.iterator(); iter.hasNext(); ) {        ScheduleableAction action=(ScheduleableAction)iter.next();        action.doAction();        if (removeElementAfterAction) {          iter.remove();        }      }    }  }synchronized (nextTurn[containerNeeded - 1]) {    Set tempSet=thisTurn;    for (int i=0; i < containerNeeded + 1; i++) {      if (i == 0) {        thisTurn=nextTurn[0];      } else {        if (i == containerNeeded) {          nextTurn[containerNeeded - 1]=tempSet;        } else {          nextTurn[i - 1]=nextTurn[i];        }      }    }  }}  }
class C{  @Override public void removeAll(){  for (  Foo foo : findAll()) {    remove(foo);  }}  }
class C{  public void testUlpZero(){  String a="0";  int aScale=2;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.ulp();  String res="0.01";  int resScale=2;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  private void sendError(HttpServletRequest request,HttpServletResponse response){  try {    FSUtils.forwardRequest(request,response,errorPage);  } catch (  Exception exp) {    FSUtils.debug.error("FSPreLogin:: sendError " + "Error during sending error page");  }}  }
class C{  public void saveDeviceProfiles(String username,String realm,List<JsonValue> profiles) throws InternalServerErrorException {  final AMIdentity identity=getIdentity(username,realm);  Set<String> vals=new HashSet<>();  try {    final DeviceService deviceService=serviceFactory.create(realm);    final DeviceSerialisation deviceSerialisation=deviceService.getDeviceSerialisationStrategy();    final String attrName=deviceService.getConfigStorageAttributeName();    for (    JsonValue profile : profiles) {      vals.add(deviceSerialisation.deviceProfileToString(profile));    }    Map<String,Set> attrMap=new HashMap<>();    attrMap.put(attrName,vals);    identity.setAttributes(attrMap);    identity.store();  } catch (  SSOException|IdRepoException|SMSException e) {    throw new InternalServerErrorException(e.getMessage(),e);  }}  }
class C{  public IntVector(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new int[blocksize];}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public static GetEffectiveRightsRequestControl newControl(final boolean isCritical,final String authorizationName,final String... attributes){  Reject.ifNull((Object)attributes);  final DN dn=authorizationName == null ? null : DN.valueOf(authorizationName);  List<AttributeType> copyOfAttributes;  if (attributes != null && attributes.length > 0) {    copyOfAttributes=new ArrayList<>(attributes.length);    for (    final String attribute : attributes) {      copyOfAttributes.add(Schema.getDefaultSchema().getAttributeType(attribute));    }    copyOfAttributes=Collections.unmodifiableList(copyOfAttributes);  } else {    copyOfAttributes=Collections.emptyList();  }  return new GetEffectiveRightsRequestControl(isCritical,dn,copyOfAttributes);}  }
class C{  private static ByteBuffer readCookieValueRfc6265(ByteBuffer bb){  boolean quoted=false;  if (bb.hasRemaining()) {    if (bb.get() == QUOTE_BYTE) {      quoted=true;    } else {      bb.rewind();    }  }  int start=bb.position();  int end=bb.limit();  while (bb.hasRemaining()) {    byte b=bb.get();    if (isCookieOctet[(b & 0xFF)]) {    } else     if (b == SEMICOLON_BYTE || b == SPACE_BYTE || b == TAB_BYTE) {      end=bb.position() - 1;      bb.position(end);      break;    } else     if (quoted && b == QUOTE_BYTE) {      end=bb.position() - 1;      break;    } else {      return null;    }  }  return new ByteBuffer(bb.bytes,start,end - start);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ContextHandler[");  sb.append("name=");  sb.append(getName());  if (handlerclass != null) {    sb.append(", class=");    sb.append(handlerclass);  }  if (this.soapHeaders != null) {    sb.append(", soap-headers=");    sb.append(this.soapHeaders);  }  if (this.getSoapRolesSize() > 0) {    sb.append(", soap-roles=");    sb.append(soapRoles);  }  if (this.getPortNamesSize() > 0) {    sb.append(", port-name=");    sb.append(portNames);  }  if (this.listProperties() != null) {    sb.append(", init-param=");    sb.append(this.listProperties());  }  sb.append("]");  return (sb.toString());}  }
class C{  public static double readSwappedDouble(byte[] data,int offset){  return Double.longBitsToDouble(readSwappedLong(data,offset));}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorType createAuthenticatorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorTypeImpl();}  }
class C{  private LDAPReplicationDomain createReplicationDomain(DN baseDn,int serverId) throws Exception {  SortedSet<String> replServers=new TreeSet<>();  replServers.add("localhost:" + rs1Port);  replServers.add("localhost:" + rs2Port);  DomainFakeCfg domainConf=new DomainFakeCfg(baseDn,serverId,replServers);  LDAPReplicationDomain replicationDomain=MultimasterReplication.createNewDomain(domainConf);  replicationDomain.start();  return replicationDomain;}  }
class C{  public static Intent buildTerminalShortcutIntent(File script,Parcelable iconResource){  Intent intent=new Intent();  intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,buildStartInTerminalIntent(script));  intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,script.getName());  intent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,iconResource);  return intent;}  }
class C{  public boolean isSuperUser(String uuid){  boolean isSuperUser=false;  try {    AMIdentity adminUserId=null;    String adminUser=SystemProperties.get(Constants.AUTHENTICATION_SUPER_USER);    if (adminUser != null) {      adminUserId=new AMIdentity(dsameAdminTokenProvider.getAdminToken(),adminUser,IdType.USER,"/",null);    }    AMIdentity user=IdUtils.getIdentity(dsameAdminTokenProvider.getAdminToken(),uuid);    isSuperUser=adminUserId.equals(user);  } catch (  SSOException ssoe) {    sessionDebug.error("SessionService.isSuperUser: Cannot get the admin token for this operation.");  }catch (  IdRepoException idme) {    sessionDebug.error("SessionService.isSuperUser: Cannot get the user identity.");  }  if (sessionDebug.messageEnabled()) {    sessionDebug.message("SessionService.isSuperUser: " + isSuperUser);  }  return isSuperUser;}  }
class C{  OpenSSLEngine(long sslCtx,String fallbackApplicationProtocol,boolean clientMode,OpenSSLSessionContext sessionContext,boolean alpn){  if (sslCtx == 0) {    throw new IllegalArgumentException(sm.getString("engine.noSSLContext"));  }  session=new OpenSSLSession();  destroyed=true;  ssl=SSL.newSSL(sslCtx,!clientMode);  networkBIO=SSL.makeNetworkBIO(ssl);  destroyed=false;  this.fallbackApplicationProtocol=fallbackApplicationProtocol;  this.clientMode=clientMode;  this.sessionContext=sessionContext;  this.alpn=alpn;}  }
class C{  public static List parseValues(String fileName) throws CLIException {  BufferedReader in=null;  List values=new ArrayList();  try {    in=new BufferedReader(new FileReader(fileName));    String line=in.readLine();    while (line != null) {      line=line.trim();      if (line.length() > 0) {        values.add(line);      }      line=in.readLine();    }  } catch (  IOException e) {    throw new CLIException(e,ExitCodes.IO_EXCEPTION);  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException e) {      }    }  }  return values;}  }
class C{  private void serializeCompactRDFSchemas(int level) throws IOException, XMPException {  writeIndent(level + 1);  write(RDF_SCHEMA_START);  writeTreeName();  Set<String> usedPrefixes=new HashSet<>();  usedPrefixes.add("xml");  usedPrefixes.add("rdf");  for (Iterator it=xmp.getRoot().iterateChildren(); it.hasNext(); ) {    XMPNode schema=(XMPNode)it.next();    declareUsedNamespaces(schema,usedPrefixes,level + 3);  }  boolean allAreAttrs=true;  for (Iterator it=xmp.getRoot().iterateChildren(); it.hasNext(); ) {    XMPNode schema=(XMPNode)it.next();    allAreAttrs&=serializeCompactRDFAttrProps(schema,level + 2);  }  if (!allAreAttrs) {    write('>');    writeNewline();  } else {    write("/>");    writeNewline();    return;  }  for (Iterator it=xmp.getRoot().iterateChildren(); it.hasNext(); ) {    XMPNode schema=(XMPNode)it.next();    serializeCompactRDFElementProps(schema,level + 2);  }  writeIndent(level + 1);  write(RDF_SCHEMA_END);  writeNewline();}  }
class C{  public void testCertStore11() throws InvalidAlgorithmParameterException, NoSuchAlgorithmException {  if (!initParams()) {    return;  }  Provider provider=null;  for (int i=0; i < dValid.length; i++) {    try {      CertStore.getInstance(dValid[i],dParams,provider);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public void verifyAndDeleteObject(SSOToken token,String profileDN) throws AMException {  try {    EmailNotificationHelper mailer=null;    Map attributes=null;    Guid guid=new Guid(profileDN);    PersistentObject po=UMSObject.getObject(token,guid);    if (po instanceof com.iplanet.ums.User) {      Attr attr=new Attr(USER_STATUS_ATTRIBUTE,"deleted");      if (debug.messageEnabled()) {        debug.message("Compliance:verifyAndDeleteObject: " + "Soft-delete mode, setting inetuserstatus " + "to deleted. "+ "profileDN="+ profileDN);      }      po.modify(attr,ModificationType.REPLACE);      po.save();      mailer=new EmailNotificationHelper(profileDN);      if (mailer != null) {        mailer.setUserDeleteNotificationList();        attributes=DirectoryServicesFactory.getInstance().getAttributes(token,profileDN,AMObject.USER);        if (mailer.isPresentUserDeleteNotificationList()) {          mailer.sendUserDeleteNotification(attributes);        }      }      return;    }    if (po instanceof com.iplanet.ums.Resource) {      Attr attr=new Attr(RESOURCE_STATUS_ATTRIBUTE,"deleted");      if (debug.messageEnabled()) {        debug.message("Compliance:verifyAndDeleteObject: " + "Soft-delete mode, setting icsstatus " + "to deleted");      }      po.modify(attr,ModificationType.REPLACE);      po.save();      return;    }    if (po instanceof com.iplanet.ums.StaticGroup || po instanceof com.iplanet.ums.AssignableDynamicGroup || po instanceof com.iplanet.ums.DynamicGroup) {      Attr attr=new Attr(GROUP_STATUS_ATTRIBUTE,"deleted");      if (debug.messageEnabled()) {        debug.message("Compliance:verifyAndDeleteObject: " + "Soft-delete mode, setting inetgroupstatus " + "to deleted");      }      po.modify(attr,ModificationType.REPLACE);      po.save();      return;    }    if (po instanceof com.iplanet.ums.Organization) {      if (debug.messageEnabled()) {        debug.message("Compliance:verifyAndDeleteObject: " + "Soft-delete mode, setting inetdomainstatus " + "to deleted");      }      Attr attr=new Attr(ORG_STATUS_ATTRIBUTE,"deleted");      po.modify(attr,ModificationType.REPLACE);      po.save();      DCTreeServicesImpl dcTreeImpl=(DCTreeServicesImpl)DirectoryServicesFactory.getInstance().getDCTreeServicesImpl();      if (dcTreeImpl.isRequired()) {        dcTreeImpl.updateDomainStatus(token,profileDN,"deleted");      }    } else {      UMSObject.removeObject(token,guid);    }  } catch (  UMSException ue) {    debug.error("Compliance.deleteObject(): ",ue);    throw new AMException(AMSDKBundle.getString("773"),"773");  }catch (  SSOException se) {    debug.error("Compliance.deleteObject(): ",se);    throw new AMException(AMSDKBundle.getString("773"),"773");  }}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aRealm,StoreDescription parentDesc) throws Exception {  if (aRealm instanceof CombinedRealm) {    CombinedRealm combinedRealm=(CombinedRealm)aRealm;    Realm[] realms=combinedRealm.getNestedRealms();    storeElementArray(aWriter,indent,realms);  }  CredentialHandler credentialHandler=((Realm)aRealm).getCredentialHandler();  if (credentialHandler != null) {    storeElement(aWriter,indent,credentialHandler);  }}  }
class C{  protected FocusListener createFocusListener(){  return getHandler();}  }
class C{  public Headers readHeaders() throws IOException {  Headers.Builder headers=new Headers.Builder();  for (String line; (line=source.readUtf8LineStrict()).length() != 0; ) {    Internal.instance.addLenient(headers,line);  }  return headers.build();}  }
class C{  public boolean containsValue(boolean val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSNumber.class)) {      NSNumber num=(NSNumber)o;      if (num.isBoolean() && num.boolValue() == val)       return true;    }  }  return false;}  }
class C{  public HashDocAttributeSet(DocAttribute attribute){  super(attribute,DocAttribute.class);}  }
class C{  public final void readResponse() throws IOException {  if (hasResponse()) {    responseHeaders.setResponseSource(responseSource);    return;  }  if (responseSource == null) {    throw new IllegalStateException("readResponse() without sendRequest()");  }  if (!responseSource.requiresConnection()) {    return;  }  if (sentRequestMillis == -1) {    if (requestBodyOut instanceof RetryableOutputStream) {      int contentLength=((RetryableOutputStream)requestBodyOut).contentLength();      requestHeaders.setContentLength(contentLength);    }    transport.writeRequestHeaders();  }  if (requestBodyOut != null) {    requestBodyOut.close();    if (requestBodyOut instanceof RetryableOutputStream) {      transport.writeRequestBody((RetryableOutputStream)requestBodyOut);    }  }  transport.flushRequest();  responseHeaders=transport.readResponseHeaders();  responseHeaders.setLocalTimestamps(sentRequestMillis,System.currentTimeMillis());  responseHeaders.setResponseSource(responseSource);  if (responseSource == ResponseSource.CONDITIONAL_CACHE) {    if (cachedResponseHeaders.validate(responseHeaders)) {      release(false);      ResponseHeaders combinedHeaders=cachedResponseHeaders.combine(responseHeaders);      setResponse(combinedHeaders,cachedResponseBody);      OkResponseCache responseCache=client.getOkResponseCache();      responseCache.trackConditionalCacheHit();      responseCache.update(cacheResponse,policy.getHttpConnectionToCache());      return;    } else {      Util.closeQuietly(cachedResponseBody);    }  }  if (hasResponseBody()) {    maybeCache();  }  initContentStream(transport.getTransferStream(cacheRequest));}  }
class C{  public OrSubject(Set<EntitlementSubject> eSubjects){  super(eSubjects);}  }
class C{  public void backup(int amount){  inBuf+=amount;  if ((bufpos-=amount) < 0)   bufpos+=bufsize;}  }
class C{  private int compareMagnitude(BigDecimal val){  long ys=val.intCompact;  long xs=this.intCompact;  if (xs == 0)   return (ys == 0) ? 0 : -1;  if (ys == 0)   return 1;  long sdiff=(long)this.scale - val.scale;  if (sdiff != 0) {    long xae=(long)this.precision() - this.scale;    long yae=(long)val.precision() - val.scale;    if (xae < yae)     return -1;    if (xae > yae)     return 1;    BigInteger rb=null;    if (sdiff < 0) {      if (sdiff > Integer.MIN_VALUE && (xs == INFLATED || (xs=longMultiplyPowerTen(xs,(int)-sdiff)) == INFLATED) && ys == INFLATED) {        rb=bigMultiplyPowerTen((int)-sdiff);        return rb.compareMagnitude(val.intVal);      }    } else {      if (sdiff <= Integer.MAX_VALUE && (ys == INFLATED || (ys=longMultiplyPowerTen(ys,(int)sdiff)) == INFLATED) && xs == INFLATED) {        rb=val.bigMultiplyPowerTen((int)sdiff);        return this.intVal.compareMagnitude(rb);      }    }  }  if (xs != INFLATED)   return (ys != INFLATED) ? longCompareMagnitude(xs,ys) : -1; else   if (ys != INFLATED)   return 1; else   return this.intVal.compareMagnitude(val.intVal);}  }
class C{  private static int parseNumber(CharSequence offsetId,int pos,boolean precededByColon){  if (precededByColon && offsetId.charAt(pos - 1) != ':') {    throw new DateTimeException("Invalid ID for ZoneOffset, colon not found when expected: " + offsetId);  }  char ch1=offsetId.charAt(pos);  char ch2=offsetId.charAt(pos + 1);  if (ch1 < '0' || ch1 > '9' || ch2 < '0' || ch2 > '9') {    throw new DateTimeException("Invalid ID for ZoneOffset, non numeric characters found: " + offsetId);  }  return (ch1 - 48) * 10 + (ch2 - 48);}  }
class C{  public static void main(String[] args){  final BooleanArgument displayUsage;  BooleanArgument checkStartability=null;  BooleanArgument quietMode=null;  IntegerArgument timeout=null;  BooleanArgument fullVersion=null;  BooleanArgument noDetach=null;  BooleanArgument systemInfo=null;  BooleanArgument useLastKnownGoodConfig=null;  StringArgument configFile=null;  ArgumentParser argParser=new ArgumentParser("org.opends.server.core.DirectoryServer",DirectoryServer.toolDescription,false);  argParser.setShortToolDescription(REF_SHORT_DESC_START_DS.get());  try {    BooleanArgument.builder("windowsNetStart").description(INFO_DSCORE_DESCRIPTION_WINDOWS_NET_START.get()).hidden().buildAndAddToParser(argParser);    configFile=StringArgument.builder("configFile").shortIdentifier('f').description(INFO_DSCORE_DESCRIPTION_CONFIG_FILE.get()).hidden().required().valuePlaceholder(INFO_CONFIGFILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    checkStartability=BooleanArgument.builder("checkStartability").description(INFO_DSCORE_DESCRIPTION_CHECK_STARTABILITY.get()).hidden().buildAndAddToParser(argParser);    fullVersion=BooleanArgument.builder("fullVersion").shortIdentifier('F').description(INFO_DSCORE_DESCRIPTION_FULLVERSION.get()).hidden().buildAndAddToParser(argParser);    systemInfo=BooleanArgument.builder("systemInfo").shortIdentifier('s').description(INFO_DSCORE_DESCRIPTION_SYSINFO.get()).buildAndAddToParser(argParser);    useLastKnownGoodConfig=BooleanArgument.builder("useLastKnownGoodConfig").shortIdentifier('L').description(INFO_DSCORE_DESCRIPTION_LASTKNOWNGOODCFG.get()).buildAndAddToParser(argParser);    noDetach=BooleanArgument.builder("nodetach").shortIdentifier('N').description(INFO_DSCORE_DESCRIPTION_NODETACH.get()).buildAndAddToParser(argParser);    quietMode=quietArgument();    argParser.addArgument(quietMode);    timeout=IntegerArgument.builder("timeout").shortIdentifier('t').description(INFO_DSCORE_DESCRIPTION_TIMEOUT.get()).required().lowerBound(0).defaultValue(DEFAULT_TIMEOUT).valuePlaceholder(INFO_SECONDS_PLACEHOLDER.get()).buildAndAddToParser(argParser);    displayUsage=showUsageArgument();    argParser.addArgument(displayUsage);    argParser.setUsageArgument(displayUsage);    argParser.setVersionHandler(new DirectoryServerVersionHandler());  } catch (  ArgumentException ae) {    LocalizableMessage message=ERR_DSCORE_CANNOT_INITIALIZE_ARGS.get(ae.getMessage());    System.err.println(message);    System.exit(1);  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(System.err,ERR_DSCORE_ERROR_PARSING_ARGS.get(ae.getMessage()));    System.exit(1);  }  if (checkStartability.isPresent()) {    if (argParser.usageOrVersionDisplayed()) {      System.exit(NOTHING_TO_DO);    } else     if (fullVersion.isPresent() || systemInfo.isPresent()) {      List<String> newArgList=new LinkedList<>();      for (      String arg : args) {        if (!"--checkstartability".equalsIgnoreCase(arg)) {          newArgList.add(arg);        }      }      String[] newArgs=new String[newArgList.size()];      newArgList.toArray(newArgs);      main(newArgs);      System.exit(NOTHING_TO_DO);    } else {      System.exit(checkStartability(argParser));    }  } else   if (argParser.usageOrVersionDisplayed()) {    System.exit(0);  } else   if (fullVersion.isPresent()) {    printFullVersionInformation();    return;  } else   if (systemInfo.isPresent()) {    RuntimeInformation.printInfo();    return;  } else   if (noDetach.isPresent() && timeout.isPresent()) {    argParser.displayMessageAndUsageReference(System.err,ERR_DSCORE_ERROR_NODETACH_TIMEOUT.get());    System.exit(1);  }  String lockFile=LockFileManager.getServerLockFileName();  try {    StringBuilder failureReason=new StringBuilder();    if (!LockFileManager.acquireExclusiveLock(lockFile,failureReason)) {      System.err.println(ERR_CANNOT_ACQUIRE_EXCLUSIVE_SERVER_LOCK.get(lockFile,failureReason));      System.exit(1);    }  } catch (  Exception e) {    logger.traceException(e);    System.err.println(ERR_CANNOT_ACQUIRE_EXCLUSIVE_SERVER_LOCK.get(lockFile,stackTraceToSingleLineString(e)));    System.exit(1);  }  serverLocked=true;  DirectoryEnvironmentConfig environmentConfig=new DirectoryEnvironmentConfig();  try {    environmentConfig.setProperty(PROPERTY_CONFIG_FILE,configFile.getValue());    environmentConfig.setProperty(PROPERTY_USE_LAST_KNOWN_GOOD_CONFIG,String.valueOf(useLastKnownGoodConfig.isPresent()));  } catch (  Exception e) {    System.err.println("WARNING:  Unable to set environment properties in environment config : " + stackTraceToSingleLineString(e));  }  boolean pidFileMarkedForDeletion=false;  boolean startingFileMarkedForDeletion=false;  try {    String pidFilePath;    String startingFilePath;    File instanceRoot=environmentConfig.getInstanceRoot();    if (instanceRoot == null) {      pidFilePath="logs/server.pid";      startingFilePath="logs/server.starting";    } else {      pidFilePath=instanceRoot.getAbsolutePath() + File.separator + "logs"+ File.separator+ "server.pid";      startingFilePath=instanceRoot.getAbsolutePath() + File.separator + "logs"+ File.separator+ "server.starting";    }    File pidFile=new File(pidFilePath);    if (pidFile.exists()) {      pidFile.deleteOnExit();      pidFileMarkedForDeletion=true;    }    File startingFile=new File(startingFilePath);    if (startingFile.exists()) {      startingFile.deleteOnExit();      startingFileMarkedForDeletion=true;    }  } catch (  Exception e) {  }  PrintStream serverOutStream;  try {    File serverRoot=environmentConfig.getServerRoot();    if (serverRoot == null) {      System.err.println("WARNING:  Unable to determine server root in " + "order to redirect standard output and standard error.");    } else {      File instanceRoot=environmentConfig.getInstanceRoot();      File logDir=new File(instanceRoot.getAbsolutePath() + File.separator + "logs");      if (logDir.exists()) {        FileOutputStream fos=new FileOutputStream(new File(logDir,"server.out"),true);        serverOutStream=new PrintStream(fos);        if (noDetach.isPresent() && !quietMode.isPresent()) {          MultiOutputStream multiStream=new MultiOutputStream(System.out,serverOutStream);          serverOutStream=new PrintStream(multiStream);        }        System.setOut(serverOutStream);        System.setErr(serverOutStream);        if (!pidFileMarkedForDeletion) {          File f=new File(logDir,"server.pid");          if (f.exists()) {            f.deleteOnExit();          }        }        if (!startingFileMarkedForDeletion) {          File f=new File(logDir,"server.starting");          if (f.exists()) {            f.deleteOnExit();          }        }      } else {        System.err.println("WARNING:  Unable to redirect standard output " + "and standard error because the logs directory " + logDir.getAbsolutePath() + " does not exist.");      }    }  } catch (  Exception e) {    System.err.println("WARNING:  Unable to redirect standard output and " + "standard error:  " + stackTraceToSingleLineString(e));  }  ErrorLogPublisher startupErrorLogPublisher=TextErrorLogPublisher.getServerStartupTextErrorPublisher(new TextWriter.STDOUT());  ErrorLogger.getInstance().addLogPublisher(startupErrorLogPublisher);  DebugLogPublisher startupDebugLogPublisher=DebugLogger.getInstance().addPublisherIfRequired(new TextWriter.STDOUT());  DirectoryServer theDirectoryServer=DirectoryServer.getInstance();  try {    theDirectoryServer.setEnvironmentConfig(environmentConfig);    theDirectoryServer.bootstrapServer();    theDirectoryServer.initializeConfiguration();  } catch (  InitializationException ie) {    logger.traceException(ie);    LocalizableMessage message=ERR_DSCORE_CANNOT_BOOTSTRAP.get(ie.getMessage());    System.err.println(message);    System.exit(1);  }catch (  Exception e) {    LocalizableMessage message=ERR_DSCORE_CANNOT_BOOTSTRAP.get(stackTraceToSingleLineString(e));    System.err.println(message);    System.exit(1);  }  try {    theDirectoryServer.startServer();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_DSCORE_CANNOT_START.get(stackTraceToSingleLineString(e));    shutDown(theDirectoryServer.getClass().getName(),message);  }  ErrorLogger.getInstance().removeLogPublisher(startupErrorLogPublisher);  if (startupDebugLogPublisher != null) {    DebugLogger.getInstance().removeLogPublisher(startupDebugLogPublisher);  }}  }
class C{  public void removeRange(int fromIndex,int toIndex){  if (fromIndex > toIndex) {    throw new IllegalArgumentException("fromIndex must be <= toIndex");  }  for (int i=toIndex; i >= fromIndex; i--) {    delegate.removeElementAt(i);  }  fireIntervalRemoved(this,fromIndex,toIndex);}  }
class C{  private void procAppear(View scrollView,int x,int y,int oldx,int oldy){  String direction="";  if (mOrientation == VERTICAL) {    direction=y - oldy > 0 ? "up" : "down";  } else   if (mOrientation == HORIZONTAL) {    direction=x - oldx > 0 ? "right" : "left";  }  ConcurrentHashMap<String,AppearData> appearMap=mAppearMap.get(mDomObj.ref);  if (appearMap == null) {    return;  }  Iterator<Entry<String,AppearData>> iterator=appearMap.entrySet().iterator();  Entry<String,AppearData> entry=null;  AppearData appearData;  if (mScrollRect == null) {    mScrollRect=new Rect();    getInnerView().getHitRect(mScrollRect);  }  while (iterator.hasNext()) {    entry=iterator.next();    appearData=entry.getValue();    if (!appearData.mAppear && appearData.mAppearComponent.getView().getLocalVisibleRect(mScrollRect)) {      appearData.mAppear=true;      if (appearData.hasAppear) {        Map<String,Object> params=new HashMap<>();        params.put("direction",direction);        WXSDKManager.getInstance().fireEvent(mInstanceId,appearData.mAppearComponent.getRef(),WXEventType.APPEAR,params);      }    } else     if (appearData.mAppear && !appearData.mAppearComponent.getView().getLocalVisibleRect(mScrollRect)) {      appearData.mAppear=false;      if (appearData.hasDisappear) {        Map<String,Object> params=new HashMap<>();        params.put("direction",direction);        WXSDKManager.getInstance().fireEvent(mInstanceId,appearData.mAppearComponent.getRef(),WXEventType.DISAPPEAR,params);      }    }  }}  }
class C{  public IllegalBlockingModeException(){}  }
class C{  public void insert(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode next=location.next;  if (next == null) {    last=insn;  } else {    next.prev=insn;  }  location.next=insn;  insn.next=next;  insn.prev=location;  cache=null;  insn.index=0;}  }
class C{  public PasswordPolicyRequestControl(boolean isCritical){  super(OID_PASSWORD_POLICY_CONTROL,isCritical);}  }
class C{  protected void doLoad() throws ClassNotFoundException, IOException {  if (log.isDebugEnabled()) {    log.debug("Start: Loading persisted sessions");  }  sessions.clear();  File file=file();  if (file == null) {    return;  }  if (log.isDebugEnabled()) {    log.debug(sm.getString("standardManager.loading",pathname));  }  Loader loader=null;  ClassLoader classLoader=null;  Log logger=null;  try (FileInputStream fis=new FileInputStream(file.getAbsolutePath());BufferedInputStream bis=new BufferedInputStream(fis)){    Context c=getContext();    loader=c.getLoader();    logger=c.getLogger();    if (loader != null) {      classLoader=loader.getClassLoader();    }    if (classLoader == null) {      classLoader=getClass().getClassLoader();    }synchronized (sessions) {      try (ObjectInputStream ois=new CustomObjectInputStream(bis,classLoader,logger,getSessionAttributeValueClassNamePattern(),getWarnOnSessionAttributeFilterFailure())){        Integer count=(Integer)ois.readObject();        int n=count.intValue();        if (log.isDebugEnabled())         log.debug("Loading " + n + " persisted sessions");        for (int i=0; i < n; i++) {          StandardSession session=getNewSession();          session.readObjectData(ois);          session.setManager(this);          sessions.put(session.getIdInternal(),session);          session.activate();          if (!session.isValidInternal()) {            session.setValid(true);            session.expire();          }          sessionCounter++;        }      }  finally {        if (file.exists()) {          file.delete();        }      }    }  } catch (  FileNotFoundException e) {    if (log.isDebugEnabled()) {      log.debug("No persisted data file found");    }    return;  }  if (log.isDebugEnabled()) {    log.debug("Finish: Loading persisted sessions");  }}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=protocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);      logger.info("Dialog State is " + serverTransactionId.getDialog().getState());    } else {      logger.info("null server tx.");    }  } catch (  Exception ex) {    String s="Unexpected exception";    logger.error(s,ex);    ReInviteInfoAckOverlapTest.fail(s);  }}  }
class C{  public static boolean isXML11Invalid(int c){  return !isXML11Valid(c);}  }
class C{  void writeStyles(StyleSheet sheet) throws IOException {  if (sheet != null) {    Enumeration styles=sheet.getStyleNames();    if (styles != null) {      boolean outputStyle=false;      while (styles.hasMoreElements()) {        String name=(String)styles.nextElement();        if (!StyleContext.DEFAULT_STYLE.equals(name) && writeStyle(name,sheet.getStyle(name),outputStyle)) {          outputStyle=true;        }      }      if (outputStyle) {        writeStyleEndTag();      }    }  }}  }
class C{  public String toXMLString(){  StringBuilder xmlsb=new StringBuilder(1000);  xmlsb.append("<").append(GET_RESOURCE_RESULTS);  xmlsb.append(" ").append(USER_SSOTOKEN).append("=\"").append((userSSOToken != null) ? userSSOToken : PolicyUtils.EMPTY_STRING).append("\"");  xmlsb.append(" ").append(SERVICE_NAME).append("=\"").append(serviceName).append("\"");  xmlsb.append(" ").append(RESOURCE_NAME).append("=\"").append(XMLUtils.escapeSpecialCharacters(resourceName)).append("\"");  xmlsb.append(" ").append(RESOURCE_SCOPE).append("=\"").append(resourceScope).append("\">").append(CRLF);  if (envParms != null) {    xmlsb.append(PolicyUtils.envParametersToXMLString(envParms));  }  if (respAttributes != null) {    xmlsb.append(PolicyUtils.responseAttributesToXMLString(respAttributes));  }  xmlsb.append("</").append(GET_RESOURCE_RESULTS).append(">").append(CRLF);  return xmlsb.toString();}  }
class C{  public boolean isKbaEnabled(){  return kbaEnabled;}  }
class C{  public static IOFileFilter ageFileFilter(long cutoff){  return new AgeFileFilter(cutoff);}  }
class C{  private void change_position(PlaPointFloat p_new_position){  current_position=p_new_position.round();  if (!current_position.equals(previous_position)) {    PlaVectorInt translate_vector=current_position.difference_by(previous_position);    Iterator<board.items.BrdItem> it=item_list.iterator();    while (it.hasNext()) {      board.items.BrdItem curr_item=it.next();      curr_item.translate_by(translate_vector);    }    previous_position=current_position;    i_brd.repaint();  }}  }
class C{  public Observable<List<Order>> retrieveOrdersForAccountObservable(String accountId){  io.vertx.rx.java.ObservableFuture<List<Order>> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  retrieveOrdersForAccount(accountId,resultHandler.toHandler());  return resultHandler;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  NamedNodeMap attributes;  Notation notation;  Element element;  NodeList elementList;  Node newNode;  String nullNS=null;  doc=(Document)load("staffNS",true);  docType=doc.getDoctype();  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notation=(Notation)notations.getNamedItem("notation1");  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)elementList.item(0);  attributes=element.getAttributes();{    boolean success=false;    try {      newNode=attributes.setNamedItemNS(notation);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  boolean noSchemaReplication(){  return noSchemaReplicationArg.isPresent();}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite sending Trying");    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      logger.info("null server tx -- getting a new one");      st=sipProvider.getNewServerTransaction(request);    }    logger.info("getNewServerTransaction : " + st);    String txId=((ViaHeader)request.getHeader(ViaHeader.NAME)).getBranch();    this.serverTxTable.put(txId,st);    Response response=protocolObjects.messageFactory.createResponse(Response.TRYING,request);    ListeningPoint lp=sipProvider.getListeningPoint(protocolObjects.transport);    int myPort=lp.getPort();    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ";transport="+ protocolObjects.transport+ ">");    int timeToSleep=(int)(Math.random() * 1000);    Thread.sleep(timeToSleep);    st.sendResponse(response);    Response ringingResponse=protocolObjects.messageFactory.createResponse(Response.RINGING,request);    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)ringingResponse.getHeader(ToHeader.NAME);    String toTag=actAsNonRFC3261UAS ? null : new Integer((int)(Math.random() * 10000)).toString();    if (!actAsNonRFC3261UAS)     toHeader.setTag(toTag);    ringingResponse.addHeader(contactHeader);    st.sendResponse(ringingResponse);    Dialog dialog=st.getDialog();    dialog.setApplicationData(st);    this.inviteSeen=true;    new Timer().schedule(new MyTimerTask(requestEvent,st),1000);  } catch (  Exception ex) {    ex.printStackTrace();    logger.error("Unexpected exception",ex);    TestCase.fail("Unexpected exception occured");  }}  }
class C{  private void assertDeleteMsgCSNEquals(ReplicationMsg msg,CSN nextCSN,String msgNumber){  Assertions.assertThat(msg).isInstanceOf(DeleteMsg.class);  DeleteMsg del=(DeleteMsg)msg;  assertEquals(del.getCSN(),nextCSN,"The " + msgNumber + " message received by a new client was the wrong one.");}  }
class C{  public static void registerSupportedFeature(String featureOID){synchronized (directoryServer.supportedFeatures) {    directoryServer.supportedFeatures.add(featureOID);  }}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  private static void enableDownloadManager(Context context){  try {    Intent intent=new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS);    intent.setData(Uri.parse("package:" + DOWNLOAD_MANAGER_PACKAGE_NAME));    context.startActivity(intent);  } catch (  ActivityNotFoundException e) {    e.printStackTrace();    try {      Intent intent=new Intent(android.provider.Settings.ACTION_MANAGE_APPLICATIONS_SETTINGS);      context.startActivity(intent);    } catch (    ActivityNotFoundException ignored) {    }  }}  }
class C{  private static void registerLocalBackend(LocalBackendWorkflowElement localBackend){synchronized (registeredLocalBackendsLock) {    DN baseDN=localBackend.getBaseDN();    LocalBackendWorkflowElement existingLocalBackend=registeredLocalBackends.get(baseDN);    if (existingLocalBackend == null) {      TreeMap<DN,LocalBackendWorkflowElement> newLocalBackends=new TreeMap<>(registeredLocalBackends);      newLocalBackends.put(baseDN,localBackend);      registeredLocalBackends=newLocalBackends;    }  }}  }
class C{  public StateInteractive mouse_moved(){  PlaPointFloat mouse_position=i_brd.coordinate_transform.board_to_user(i_brd.get_current_mouse_position());  i_brd.screen_messages.set_mouse_position(mouse_position);  return this;}  }
class C{  private static String layoutCompoundLabelImpl(JComponent c,FontMetrics fm,String text,Icon icon,int verticalAlignment,int horizontalAlignment,int verticalTextPosition,int horizontalTextPosition,Rectangle viewR,Rectangle iconR,Rectangle textR,int textIconGap){  if (icon != null) {    iconR.width=icon.getIconWidth();    iconR.height=icon.getIconHeight();  } else {    iconR.width=iconR.height=0;  }  boolean textIsEmpty=(text == null) || text.equals("");  int lsb=0;  int rsb=0;  int gap;  View v;  if (textIsEmpty) {    textR.width=textR.height=0;    text="";    gap=0;  } else {    int availTextWidth;    gap=(icon == null) ? 0 : textIconGap;    if (horizontalTextPosition == CENTER) {      availTextWidth=viewR.width;    } else {      availTextWidth=viewR.width - (iconR.width + gap);    }    v=(c != null) ? (View)c.getClientProperty("html") : null;    if (v != null) {      textR.width=Math.min(availTextWidth,(int)v.getPreferredSpan(View.X_AXIS));      textR.height=(int)v.getPreferredSpan(View.Y_AXIS);    } else {      textR.width=SwingUtilities2.stringWidth(c,fm,text);      lsb=SwingUtilities2.getLeftSideBearing(c,fm,text);      if (lsb < 0) {        textR.width-=lsb;      }      if (textR.width > availTextWidth) {        text=SwingUtilities2.clipString(c,fm,text,availTextWidth);        textR.width=SwingUtilities2.stringWidth(c,fm,text);      }      textR.height=fm.getHeight();    }  }  if (verticalTextPosition == TOP) {    if (horizontalTextPosition != CENTER) {      textR.y=0;    } else {      textR.y=-(textR.height + gap);    }  } else   if (verticalTextPosition == CENTER) {    textR.y=(iconR.height / 2) - (textR.height / 2);  } else {    if (horizontalTextPosition != CENTER) {      textR.y=iconR.height - textR.height;    } else {      textR.y=(iconR.height + gap);    }  }  if (horizontalTextPosition == LEFT) {    textR.x=-(textR.width + gap);  } else   if (horizontalTextPosition == CENTER) {    textR.x=(iconR.width / 2) - (textR.width / 2);  } else {    textR.x=(iconR.width + gap);  }  int labelR_x=Math.min(iconR.x,textR.x);  int labelR_width=Math.max(iconR.x + iconR.width,textR.x + textR.width) - labelR_x;  int labelR_y=Math.min(iconR.y,textR.y);  int labelR_height=Math.max(iconR.y + iconR.height,textR.y + textR.height) - labelR_y;  int dx, dy;  if (verticalAlignment == TOP) {    dy=viewR.y - labelR_y;  } else   if (verticalAlignment == CENTER) {    dy=(viewR.y + (viewR.height / 2)) - (labelR_y + (labelR_height / 2));  } else {    dy=(viewR.y + viewR.height) - (labelR_y + labelR_height);  }  if (horizontalAlignment == LEFT) {    dx=viewR.x - labelR_x;  } else   if (horizontalAlignment == RIGHT) {    dx=(viewR.x + viewR.width) - (labelR_x + labelR_width);  } else {    dx=(viewR.x + (viewR.width / 2)) - (labelR_x + (labelR_width / 2));  }  textR.x+=dx;  textR.y+=dy;  iconR.x+=dx;  iconR.y+=dy;  if (lsb < 0) {    textR.x-=lsb;    textR.width+=lsb;  }  if (rsb > 0) {    textR.width-=rsb;  }  return text;}  }
class C{  public void removeCellEditorListener(CellEditorListener l){  realEditor.removeCellEditorListener(l);}  }
class C{  public void add(WXDomObject child,int index){  if (child == null || index < -1 || sDestroy.get()) {    return;  }  if (children == null) {    children=new ArrayList<>();  }  int count=children.size();  index=index >= count ? -1 : index;  if (index == -1) {    children.add(child);    super.addChildAt(child,super.getChildCount());  } else {    children.add(index,child);    super.addChildAt(child,index);  }  child.parent=this;}  }
class C{  private boolean hasAttributes(){  ModelEvent event=RuleBuilder.instance().getChosenEvent();  List<ModelAttribute> attributes=UIDbHelperStore.instance().db().getAttributesForEvent(event);  return !attributes.isEmpty();}  }
class C{  private boolean validateISCookie(HttpServletRequest request){  boolean isValidToken=false;  FSUtils.debug.message("FSPreLogin::validateISCookie.Called ");  try {    SessionProvider sessionProvider=SessionManager.getProvider();    Object ssoToken=sessionProvider.getSession(request);    isValidToken=sessionProvider.isValid(ssoToken);  } catch (  SessionException ssoe) {    FSUtils.debug.message("FSPreLogin::validateISCookie():",ssoe);  }catch (  Exception ex) {    FSUtils.debug.message("FSPreLogin::validateISCookie():",ex);  }  return isValidToken;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.QueryType createQueryType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.QueryTypeImpl();}  }
class C{  public Tailer(File file,TailerListener listener,long delayMillis,boolean end,int bufSize){  this(file,listener,delayMillis,end,false,bufSize);}  }
class C{  public boolean containsKey(Object key){  return map.containsKey(key);}  }
class C{  public boolean isSpecified(String qName){  int index=getIndex(qName);  if (index < 0)   throw new IllegalArgumentException("No such attribute: " + qName);  return specified[index];}  }
class C{  public BigInteger(byte[] val){  if (val.length == 0)   throw new NumberFormatException("Zero length BigInteger");  if (val[0] < 0) {    mag=makePositive(val);    signum=-1;  } else {    mag=stripLeadingZeroBytes(val);    signum=(mag.length == 0 ? 0 : 1);  }  if (mag.length >= MAX_MAG_LENGTH) {    checkRange();  }}  }
class C{  public static boolean isPackageProtectionEnabled(){  if (packageDefinitionEnabled && Globals.IS_SECURITY_ENABLED) {    return true;  }  return false;}  }
class C{  public String toXMLString() throws FSMsgException {  return toXMLString(true,true);}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(mtu).toString();}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  public void showCorner(boolean leftTop,boolean rightTop,boolean leftBottom,boolean rightBottom){  if (SDK_LOLLIPOP) {    ((OptRoundRectDrawable)getBackground()).showCorner(leftTop,rightTop,leftBottom,rightBottom);  } else {    ((OptRoundRectDrawableWithShadow)getBackground()).showCorner(leftTop,rightTop,leftBottom,rightBottom);  }}  }
class C{  public Subject(SubjectConfirmation subjectConfirmation) throws SAMLException {  if (subjectConfirmation == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Subject:  null " + "SubjectConfirmation specified");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  _subjectConfirmation=subjectConfirmation;}  }
class C{  @Override public <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return _fooLocalService.dynamicQuery(dynamicQuery);}  }
class C{  public void test_DivideBigDecimalRoundingModeFLOOR(){  String a="3736186567876876578956958765675671119238118911893939591735";  String b="74723342238476237823787879183470";  RoundingMode rm=RoundingMode.FLOOR;  String c="50000260373164286401361913";  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  BigDecimal bNumber=new BigDecimal(new BigInteger(b));  BigDecimal result=aNumber.divide(bNumber,rm);  assertEquals("incorrect value",c,result.toString());}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  AffineTransform multiply(AffineTransform t1,AffineTransform t2){  return new AffineTransform(t1.m00 * t2.m00 + t1.m10 * t2.m01,t1.m00 * t2.m10 + t1.m10 * t2.m11,t1.m01 * t2.m00 + t1.m11 * t2.m01,t1.m01 * t2.m10 + t1.m11 * t2.m11,t1.m02 * t2.m00 + t1.m12 * t2.m01 + t2.m02,t1.m02 * t2.m10 + t1.m12 * t2.m11 + t2.m12);}  }
class C{  @Override public void createDaysStreamingQuoteTable(String date){  if (conn != null) {    Statement stmt;    try {      stmt=conn.createStatement();      quoteTable=ZStreamingConfig.getStreamingQuoteTbNameAppendFormat(date);      String sql="CREATE TABLE " + quoteTable + " "+ "(Time time NOT NULL, "+ " InstrumentToken varchar(32) NOT NULL, "+ " LastTradedPrice DECIMAL(20,4) NOT NULL, "+ " LastTradedQty BIGINT NOT NULL, "+ " AvgTradedPrice DECIMAL(20,4) NOT NULL, "+ " Volume BIGINT NOT NULL, "+ " BuyQty BIGINT NOT NULL, "+ " SellQty BIGINT NOT NULL, "+ " OpenPrice DECIMAL(20,4) NOT NULL, "+ " HighPrice DECIMAL(20,4) NOT NULL, "+ " LowPrice DECIMAL(20,4) NOT NULL, "+ " ClosePrice DECIMAL(20,4) NOT NULL, "+ " PRIMARY KEY (InstrumentToken, Time)) "+ " ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;";      stmt.executeUpdate(sql);      System.out.println("StreamingQuoteDAOModeQuote.createDaysStreamingQuoteTable(): SQL table for Streaming quote created, table name: [" + quoteTable + "]");    } catch (    SQLException e) {      System.out.println("StreamingQuoteDAOModeQuote.createDaysStreamingQuoteTable(): ERROR: SQLException on creating Table, cause: " + e.getMessage());    }  } else {    System.out.println("StreamingQuoteDAOModeQuote.createDaysStreamingQuoteTable(): ERROR: DB conn is null !!!");  }}  }
class C{  private static void decodeAnsiX12Segment(BitSource bits,StringBuilder result) throws FormatException {  int[] cValues=new int[3];  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];      if (cValue == 0) {        result.append('\r');      } else       if (cValue == 1) {        result.append('*');      } else       if (cValue == 2) {        result.append('>');      } else       if (cValue == 3) {        result.append(' ');      } else       if (cValue < 14) {        result.append((char)(cValue + 44));      } else       if (cValue < 40) {        result.append((char)(cValue + 51));      } else {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);}  }
class C{  public void log(Level logLevel,String msg,Object[] params){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setParameters(params);  setResourceBundle(record);  log(record);}  }
class C{  public static SAXSource createSAXSource(InputSource source) throws JAXBException {  try {    SAXParser saxParser=getSafeSAXParser(false);    return new SAXSource(saxParser.getXMLReader(),source);  } catch (  Exception ex) {    throw new JAXBException("Unable to create SAXSource",ex);  }}  }
class C{  public boolean acceptFile(String filePath,String fileName){  if (filepathMatcher == null)   return false;  return fileName != null && filepathMatcher.reset(fileName).matches() || filePath != null && filepathMatcher.reset(filePath).matches();}  }
class C{  private void release(WNode h){  if (h != null) {    WNode q;    Thread w;    U.compareAndSwapInt(h,WSTATUS,WAITING,0);    if ((q=h.next) == null || q.status == CANCELLED) {      for (WNode t=wtail; t != null && t != h; t=t.prev)       if (t.status <= 0)       q=t;    }    if (q != null && (w=q.thread) != null)     U.unpark(w);  }}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public boolean forget(String messageId){  MessagePromise messagePromise=cache.getIfPresent(messageId);  if (messagePromise != null) {    cache.invalidate(messageId);    return true;  }  return false;}  }
class C{  public org.omg.CORBA.Object _get_interface_def(){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  public int size(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return count;  }  finally {    lock.unlock();  }}  }
class C{  protected int checkKnownCookie(){  int retVal=0;  debug.message("{}.checkKnownCookie:",ADAPTIVE);  HttpServletRequest req=getHttpServletRequest();  if (req != null) {    Cookie cookie=CookieUtils.getCookieFromReq(req,knownCookieName);    if (cookie != null) {      if (knownCookieValue.equalsIgnoreCase(CookieUtils.getCookieValue(cookie))) {        retVal=knownCookieScore;      }    }  }  if (knownCookieValue == null) {    knownCookieValue="1";  }  if (knownCookieSave) {    postAuthNMap.put("COOKIENAME",knownCookieName);    postAuthNMap.put("COOKIEVALUE",knownCookieValue);  }  if (!knownCookieInvert) {    retVal=knownCookieScore - retVal;  }  return retVal;}  }
class C{  public void stop() throws LifecycleException {  getServer();  server.stop();}  }
class C{  public License(License toCopy){  this(toCopy.getFilename(),toCopy.getLicenseText());}  }
class C{  protected void initialize(Properties p){}  }
class C{  private final boolean shouldCollectText(){  return collectText[stackTop];}  }
class C{  SubjectType(String type){  this.type=type;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodehasattributes03.class,args);}  }
class C{  @Override public void checkClientTrusted(X509Certificate[] chain,String authType){}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return new XNumber(Math.ceil(m_arg0.execute(xctxt).num()));}  }
class C{  public StringBuffer append(double d){  RealToString.getInstance().appendDouble(this,d);  return this;}  }
class C{  public AttributeQuery createAttributeQuery() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ATTRIBUTE_QUERY);  if (obj == null) {    return new AttributeQueryImpl();  } else {    return (AttributeQuery)obj;  }}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.SubjectLocalityType createSubjectLocalityType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl();}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public static void encrypt(PdfReader reader,OutputStream os,EncryptionProperties properties){  encrypt(reader,os,properties,null);}  }
class C{  public String toString(){  return Long.toString(get());}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.SubjectType createSubjectType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.SubjectTypeImpl();}  }
class C{  private static void verifyCodewordCount(int[] codewords,int numECCodewords) throws FormatException {  if (codewords.length < 4) {    throw FormatException.getFormatInstance();  }  int numberOfCodewords=codewords[0];  if (numberOfCodewords > codewords.length) {    throw FormatException.getFormatInstance();  }  if (numberOfCodewords == 0) {    if (numECCodewords < codewords.length) {      codewords[0]=codewords.length - numECCodewords;    } else {      throw FormatException.getFormatInstance();    }  }}  }
class C{  protected boolean filterHeader(int index){  if (this.headerName == null)   return true;  final String name=((Header)this.allHeaders.get(index)).getName();  return this.headerName.equalsIgnoreCase(name);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    if (serverTransaction == null) {      System.out.println("null server transaction -- ignoring the ACK!");      return;    }    Dialog dialog=serverTransaction.getDialog();    System.out.println("Dialog Created = " + dialog.getDialogId() + " Dialog State = "+ dialog.getState());    System.out.println("Waiting for INFO");  } catch (  Exception ex) {    ex.printStackTrace();    TxTimeoutTest.fail("Shootme: Failed on process ACK",ex);  }}  }
class C{  public void appendRemainingComponent(String name){  if (name != null) {    CompositeName rname=new CompositeName();    try {      rname.add(name);    } catch (    InvalidNameException e) {    }    appendRemainingName(rname);  }}  }
class C{  public void replaceRule(Rule rule) throws InvalidNameException {  if (rule.getName() == null) {    rule.setName("rule" + ServiceTypeManager.generateRandomName());  }  rules.put(rule.getName(),rule);}  }
class C{  public void appendBits(int value,int numBits){  if (numBits < 0 || numBits > 32) {    throw new IllegalArgumentException("Num bits must be between 0 and 32");  }  int numBitsLeft=numBits;  while (numBitsLeft > 0) {    if ((sizeInBits & 0x7) == 0 && numBitsLeft >= 8) {      int newByte=(value >> (numBitsLeft - 8)) & 0xff;      appendByte(newByte);      numBitsLeft-=8;    } else {      int bit=(value >> (numBitsLeft - 1)) & 1;      appendBit(bit);      --numBitsLeft;    }  }}  }
class C{  public NoRouteToHostException(){}  }
class C{  public void recycle(){  for (int i=0; i < numberOfSpans; i++) {    spans[i]=null;  }}  }
class C{  @Override public void invoke(Request request,Response response) throws IOException, ServletException {  getNext().invoke(request,response);}  }
class C{  public void testCase15(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.ModifyResponseType createModifyResponseType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ModifyResponseTypeImpl();}  }
class C{  private long nextSeed(){  return seed+=gamma;}  }
class C{  static void exhaustInputStream(final InputStream inStream) throws IOException {  byte buffer[]=new byte[1024];  while (inStream.read(buffer) >= 0) {    ;  }}  }
class C{  void writeNormalizedChars(char ch[],int start,int length,boolean isCData,boolean useSystemLineSeparator) throws IOException, org.xml.sax.SAXException {  final java.io.Writer writer=m_writer;  int end=start + length;  for (int i=start; i < end; i++) {    char c=ch[i];    if (CharInfo.S_LINEFEED == c && useSystemLineSeparator) {      writer.write(m_lineSep,0,m_lineSepLen);    } else     if (isCData && (!escapingNotNeeded(c))) {      if (m_cdataTagOpen)       closeCDATA();      if (Encodings.isHighUTF16Surrogate(c)) {        writeUTF16Surrogate(c,ch,i,end);        i++;      } else {        writer.write("&#");        String intStr=Integer.toString((int)c);        writer.write(intStr);        writer.write(';');      }    } else     if (isCData && ((i < (end - 2)) && (']' == c) && (']' == ch[i + 1])&& ('>' == ch[i + 2]))) {      writer.write(CDATA_CONTINUE);      i+=2;    } else {      if (escapingNotNeeded(c)) {        if (isCData && !m_cdataTagOpen) {          writer.write(CDATA_DELIMITER_OPEN);          m_cdataTagOpen=true;        }        writer.write(c);      } else       if (Encodings.isHighUTF16Surrogate(c)) {        if (m_cdataTagOpen)         closeCDATA();        writeUTF16Surrogate(c,ch,i,end);        i++;      } else {        if (m_cdataTagOpen)         closeCDATA();        writer.write("&#");        String intStr=Integer.toString((int)c);        writer.write(intStr);        writer.write(';');      }    }  }}  }
class C{  public DeleteResponseProtocolOp(int resultCode,LocalizableMessage errorMessage,DN matchedDN,List<String> referralURLs){  this.resultCode=resultCode;  this.errorMessage=errorMessage;  this.matchedDN=matchedDN;  this.referralURLs=referralURLs;}  }
class C{  public Builder implementation(final SyntaxImpl implementation){  this.impl=implementation;  return this;}  }
class C{  private String completeDefinitionWhenAddingSchemaElement(String definition,Set<String> modifiedSchemaFiles) throws DirectoryException {  String givenSchemaFile=SchemaUtils.parseSchemaFileFromElementDefinition(definition);  String finalSchemaFile=givenSchemaFile == null ? FILE_USER_SCHEMA_ELEMENTS : givenSchemaFile;  modifiedSchemaFiles.add(finalSchemaFile);  return SchemaUtils.addSchemaFileToElementDefinitionIfAbsent(definition,finalSchemaFile);}  }
class C{  void preModify(HashMapEntry<K,V> e){}  }
class C{  private BackupProtos.Screen packScreen(Cursor c){  BackupProtos.Screen screen=new BackupProtos.Screen();  screen.id=c.getLong(ID_INDEX);  screen.rank=c.getInt(SCREEN_RANK_INDEX);  return screen;}  }
class C{  public synchronized void undo() throws CannotUndoException {  if (inProgress) {    UndoableEdit edit=editToBeUndone();    if (edit == null) {      throw new CannotUndoException();    }    undoTo(edit);  } else {    super.undo();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Node s;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  s=domesticAttr.getNextSibling();  assertNull("attrNextSiblingNullAssert",s);}  }
class C{  public NSNumber(long l){  doubleValue=longValue=l;  type=INTEGER;}  }
class C{  public FrameBodyUFID(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public static int findChildNode(BasicNode parent,DN childDn){  int childCount=parent.getChildCount();  int i=0;  while (i < childCount && !childDn.equals(((BasicNode)parent.getChildAt(i)).getDN())) {    i++;  }  if (i >= childCount) {    i=-(childCount + 1);  }  return i;}  }
class C{  public static void createResizedImage(final File sourceFile,final File destFile,final int width,final int height,final float quality) throws IOException {  BufferedImage image=ImageIO.read(sourceFile);  Dimension dimension=new Dimension(width,height);  if (image.getHeight() == dimension.height && image.getWidth() == dimension.width) {    writeUntouchedImage(sourceFile,destFile);  } else {    resizeImage(image,dimension.width,dimension.height,quality,destFile);  }}  }
class C{  public AttributeBuilder(AttributeType attributeType){  this(AttributeDescription.create(attributeType));}  }
class C{  @Override public long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,com.liferay.portal.kernel.dao.orm.Projection projection){  return _fooLocalService.dynamicQueryCount(dynamicQuery,projection);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix04.class,args);}  }
class C{  boolean addIndexEntry(String resourceName,String policyName){  Iterator iter=topLevelEntries.iterator();  boolean processed=false;  while (!processed && (iter.hasNext())) {    ResourceIndexEntry resourceIndexEntry=(ResourceIndexEntry)iter.next();    if (resourceIndexEntry.addIndexEntry(resourceType,resourceName,policyName)) {      processed=true;    }  }  if (!processed) {    ResourceIndexEntry resourceIndexEntry=new ResourceIndexEntry(resourceName,policyName);    Set currentEntries=new HashSet();    currentEntries.addAll(topLevelEntries);    Iterator iter1=currentEntries.iterator();    while (iter1.hasNext()) {      ResourceIndexEntry rie=(ResourceIndexEntry)iter1.next();      ResourceMatch rm=resourceType.compare(resourceName,rie.getResourceName(),false);      if (rm.equals(ResourceMatch.SUB_RESOURCE_MATCH)) {        rie.setParent(resourceIndexEntry);        topLevelEntries.remove(rie);      }    }    topLevelEntries.add(resourceIndexEntry);    processed=true;  }  return processed;}  }
class C{  private JsonValue authenticate(HttpServletRequest request,HttpServletResponse response,JsonValue postBody,String authIndexType,String indexValue,String sessionUpgradeSSOTokenId) throws RestAuthException {  LoginProcess loginProcess=null;  try {    AuthIndexType indexType=getAuthIndexType(authIndexType);    String authId=null;    String sessionId=null;    if (postBody != null) {      authId=getAuthId(postBody);      if (authId != null) {        SignedJwt jwt=authIdHelper.reconstructAuthId(authId);        sessionId=getSessionId(jwt);        indexType=getAuthIndexType(jwt);        indexValue=getAuthIndexValue(jwt);        String realmDN=getRealmDomainName(jwt);        AuditRequestContext.putProperty(SESSION_ID,sessionId);        authIdHelper.verifyAuthId(realmDN,authId);      }    }    LoginConfiguration loginConfiguration=new LoginConfiguration().httpRequest(request).httpResponse(response).indexType(indexType).indexValue(indexValue).sessionId(sessionId).forceAuth(request.getParameter(AuthUtils.FORCE_AUTH)).sessionUpgrade(sessionUpgradeSSOTokenId);    loginProcess=loginAuthenticator.getLoginProcess(loginConfiguration);    return processAuthentication(request,response,postBody,authId,loginProcess,loginConfiguration);  } catch (  RestAuthException e) {    if (loginProcess != null) {      String failureUrl=urlValidator.getRedirectUrl(loginProcess.getAuthContext().getOrgDN(),loginProcess.getFailureURL(),null);      e.setFailureUrl(failureUrl);    }    throw e;  }catch (  L10NMessageImpl e) {    throw new RestAuthException(amAuthErrorCodeResponseStatusMapping.getAuthLoginExceptionResponseStatus(e.getErrorCode()),e);  }catch (  JsonException e) {    throw new RestAuthException(ResourceException.INTERNAL_ERROR,e);  }catch (  SignatureException e) {    throw new RestAuthException(ResourceException.INTERNAL_ERROR,e);  }catch (  AuthLoginException e) {    throw new RestAuthException(amAuthErrorCodeResponseStatusMapping.getAuthLoginExceptionResponseStatus(e.getErrorCode()),e);  }catch (  JwsSigningException jse) {    DEBUG.error("JwsSigningException",jse);    throw new RestAuthException(ResourceException.INTERNAL_ERROR,"JwsSigningException, " + jse.getMessage());  }}  }
class C{  public final void testRead04() throws IOException {  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      DigestInputStream dis=new DigestInputStream(null,md);      try {        for (int i=0; i < MY_MESSAGE_LEN; i++) {          dis.read();        }      } catch (      Exception e) {        return;      }      fail("InputStream not set. read() must not work");    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public void addStringToTable(byte[] oldString,byte newString){  int length=oldString.length;  byte[] string=new byte[length + 1];  System.arraycopy(oldString,0,string,0,length);  string[length]=newString;  stringTable[tableIndex++]=string;  if (tableIndex == 511) {    bitsToGet=10;  } else   if (tableIndex == 1023) {    bitsToGet=11;  } else   if (tableIndex == 2047) {    bitsToGet=12;  }}  }
class C{  public static boolean isEmpty(String str){  return str == null || str.trim().equals("");}  }
class C{  private void sendEmailToUser(String emailAddress,String password) throws MessagingException {  String obj[]=new String[1];  obj[0]=password;  ResourceBundle rb=PWResetResBundleCacher.getBundle(bundleName,userLocale);  String msg=MessageFormat.format(rb.getString("resetPassMail.message"),(Object[])obj);  String subject=rb.getString("resetSubject.message");  String to[]=new String[1];  to[0]=emailAddress;  String from=rb.getString("fromAddress.label");  String charset=g11nSettings.getDefaultCharsetForLocale(userLocale);  AMSendMail sendMail=new AMSendMail();  sendMail.postMail(to,subject,msg,from,charset);}  }
class C{  private static String makeHHString(int i){  String s=Integer.toHexString(i).toUpperCase();  if (s.length() == 1) {    s="0" + s;  }  return s;}  }
class C{  public void shift(float from,float to,int microseconds){  if (from < minimum) {    throw new IllegalArgumentException("Requested value " + from + " smaller than allowable minimum value "+ minimum+ ".");  }  if (from > maximum) {    throw new IllegalArgumentException("Requested value " + from + " exceeds allowable maximum value "+ maximum+ ".");  }  setValue(to);}  }
class C{  public void change_entries(BrdTracep p_obj,Polyline p_new_polyline,int p_keep_at_start_count,int p_keep_at_end_count){  for (  AwtreeShapeSearch curr_tree : search_trees) {    curr_tree.change_entries(p_obj,p_new_polyline,p_keep_at_start_count,p_keep_at_end_count);  }}  }
class C{  public String encodeRedirectUrl(String url){  return this._getHttpServletResponse() != null ? this._getHttpServletResponse().encodeRedirectUrl(url) : null;}  }
class C{  SQLiteDatabaseConfiguration(SQLiteDatabaseConfiguration other){  if (other == null) {    throw new IllegalArgumentException("other must not be null.");  }  this.path=other.path;  this.label=other.label;  updateParametersFrom(other);}  }
class C{  public void testAddDiffScalePosNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="7472334294161400358170962860775454459810457634.781384756794987";  int cScale=15;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.add(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public FileAlterationObserver(File directory,FileFilter fileFilter){  this(directory,fileFilter,(IOCase)null);}  }
class C{  public FrameBodyTSST(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  private int _convertSurrogate(int firstPart,int secondPart){  if (secondPart < SURR2_FIRST || secondPart > SURR2_LAST) {    throw new IllegalArgumentException("Broken surrogate pair: first char 0x" + Integer.toHexString(firstPart) + ", second 0x"+ Integer.toHexString(secondPart)+ "; illegal combination");  }  return 0x10000 + ((firstPart - SURR1_FIRST) << 10) + (secondPart - SURR2_FIRST);}  }
class C{  public byte[] nextByteArray(final int length){  final byte[] result=new byte[length];  System.arraycopy(byteArray,bytes.position(),result,0,length);  bytes.skip(length);  return result;}  }
class C{  public int hashCode(){  return pattern.hashCode();}  }
class C{  void drawLetter(Graphics g,char letter,int ax,int ay,int aw,int ah,float align,int index){  String str=formatItemNum(index,letter);  str=isLeftToRight ? str + "." : "." + str;  FontMetrics fm=SwingUtilities2.getFontMetrics(null,g);  int stringwidth=SwingUtilities2.stringWidth(null,fm,str);  int gap=isLeftToRight ? -(stringwidth + bulletgap) : (aw + bulletgap);  int x=ax + gap;  int y=Math.max(ay + fm.getAscent(),ay + (int)(ah * align));  SwingUtilities2.drawString(null,g,str,x,y);}  }
class C{  public static void println(Object o){  if (o instanceof char[]) {    System.out.println((char[])o);  } else {    System.out.println(o);  }}  }
class C{  public void disconnect(){  if (isClosed() || !isConnected()) {    return;  }  impl.disconnect();  address=null;  port=-1;  isConnected=false;}  }
class C{  private boolean containsByte(final byte b,final byte[] msg,final int from,final int to){  boolean result=false;  for (int i=from; i < to; i++) {    if (msg[i] == b) {      result=true;      break;    }  }  return result;}  }
class C{  public MetadataContainer(final GUID containerGUID,final long pos,final BigInteger size){  this(determineType(containerGUID),pos,size);}  }
class C{  protected boolean isXMLName(String s,boolean xml11Version){  if (s == null) {    return false;  }  if (!xml11Version)   return XMLChar.isValidName(s); else   return XML11Char.isXML11ValidName(s);}  }
class C{  public boolean isCommitOnSelChange(){  return getFieldFlag(FF_COMMIT_ON_SEL_CHANGE);}  }
class C{  public void changeToParentDirectory(){  selectedFile=null;  File oldValue=getCurrentDirectory();  setCurrentDirectory(getFileSystemView().getParentDirectory(oldValue));}  }
class C{  public StateInteractive assign_items_to_new_net(){  r_brd.generate_snapshot();  boolean items_already_connected=false;  RuleNet new_net=r_brd.brd_rules.nets.new_net();  for (  BrdItem curr_item : items_list) {    if (curr_item instanceof BrdArea) {      r_brd.make_conductive((BrdArea)curr_item,new_net.net_number);    } else     if (curr_item instanceof BrdAbit) {      if (curr_item.is_connected()) {        items_already_connected=true;      } else {        curr_item.set_net_no(new_net.net_number);      }    }  }  if (items_already_connected) {    i_brd.screen_messages.set_status_message(resources.getString("some_items_are_not_changed_because_they_are_already_connected"));  } else {    i_brd.screen_messages.set_status_message(resources.getString("new_net_created_from_selected_items"));  }  actlog_start_scope(LogfileScope.ASSIGN_SELECTED_TO_NEW_NET);  i_brd.update_ratsnest();  i_brd.repaint();  return return_state;}  }
class C{  public boolean isEditable(final int row,final int column){  if (isEditable(column)) {    final int actualIndex=getTableColumn(column).getIndex();    final JKTableRecord record=getRecord(row);    return record.isColumnEnabled(actualIndex);  }  return false;}  }
class C{  protected void onRequestHandlerNotFound(RequestContext requestContext,String handlerName) throws ServletException {  ViewBeanManager viewBeanManager=requestContext.getViewBeanManager();  AuthExceptionViewBean vb=(AuthExceptionViewBean)viewBeanManager.getViewBean(com.sun.identity.authentication.UI.AuthExceptionViewBean.class);  vb.forwardTo(requestContext);  throw new CompleteRequestException();}  }
class C{  public DeflaterInputStream(InputStream in,Deflater defl){  this(in,defl,512);}  }
class C{  public Cursor fetch(Long ruleFilterID){  if (ruleFilterID == null) {    throw new IllegalArgumentException("primary key null.");  }  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_RULEFILTERID + "=" + ruleFilterID,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  ChangeNumberIndexer(ChangelogDB changelogDB,ChangelogStateProvider changelogStateProvider,ECLEnabledDomainPredicate predicate){  super("Change number indexer");  this.changelogDB=changelogDB;  this.changelogStateProvider=changelogStateProvider;  this.predicate=predicate;}  }
class C{  public GetEffectiveRightsRequestControl(boolean isCritical,DN authzDN,List<AttributeType> attrs){  super(OID_GET_EFFECTIVE_RIGHTS,isCritical);  this.authzDN=authzDN;  this.attrs=attrs;}  }
class C{  public boolean hasThumbnail(){  return mData.hasCompressedThumbnail();}  }
class C{  public void testToBigIntegerNeg2(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+15";  BigInteger bNumber=new BigInteger("-123809648392384754573567356745735635678902957849");  BigDecimal aNumber=new BigDecimal(a);  BigInteger result=aNumber.toBigInteger();  assertTrue("incorrect value",result.equals(bNumber));}  }
class C{  public static boolean needPolicyEvalUpdate(){  return policyEvalUpdate;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.DSTURI createDSTURI() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.DSTURIImpl();}  }
class C{  OneStepIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis);  int firstStepPos=OpMap.getFirstChildPos(opPos);  m_axis=WalkerFactory.getAxisFromStep(compiler,firstStepPos);}  }
class C{  private boolean split_inside_drill_pad_allowed(PlaPointInt intersection){  Collection<BrdItem> overlap_items=r_board.pick_items(intersection,get_layer());  boolean pad_found=false;  for (  BrdItem curr_item : overlap_items) {    if (!curr_item.shares_net(this))     continue;    if (curr_item instanceof BrdAbitPin) {      BrdAbit curr_drill_item=(BrdAbit)curr_item;      pad_found=true;      if (curr_drill_item.center_get().equals(intersection)) {        return true;      }    } else     if (curr_item instanceof BrdTracep) {      BrdTracep curr_trace=(BrdTracep)curr_item;      if (curr_trace == this)       continue;      if (curr_trace.corner_first().equals(intersection) || curr_trace.corner_last().equals(intersection)) {        return true;      }    }  }  return pad_found == false;}  }
class C{  public boolean removeHash(String hashName){  try {    String realname=Utils.md5(hashName);    String directory=path + "/" + Utils.md5(dbName)+ "/"+ realname;    if (new File(directory).exists()) {      try {        Utils.deleteRecursive(new File(directory));        if (hashes != null)         hashes.remove(hashName);        persist();        return true;      } catch (      Exception e) {        return false;      }    } else {      return false;    }  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  private static void updateTextFieldComponent(JTextField field,LocalizableMessage text,LocalizableMessage tooltip,int size,TextStyle textStyle){  field.setColumns(size);  if (text != null) {    field.setText(text.toString());  }  if (tooltip != null) {    field.setToolTipText(tooltip.toString());  }  if (textStyle != null) {    setTextStyle(field,textStyle);  }}  }
class C{  private PlaPointFloat left_right_tangential_point(PlaPointFloat p_from_point,PlaPointFloat p_to_point,PlaPointFloat p_center,double p_dist){  PlaPointFloat curr_tangential_point=p_from_point.left_tangential_point(p_center,p_dist);  if (curr_tangential_point == null) {    System.out.println("LocateFoundConnectionAlgo. left_right_tangential_point: left tangential point is null");    return null;  }  PlaSegmentFloat first_line=new PlaSegmentFloat(p_from_point,curr_tangential_point);  curr_tangential_point=p_to_point.right_tangential_point(p_center,p_dist);  if (curr_tangential_point == null) {    System.out.println("LocateFoundConnectionAlgo. left_right_tangential_point: right tangential point is null");    return null;  }  PlaSegmentFloat second_line=new PlaSegmentFloat(p_to_point,curr_tangential_point);  return first_line.intersection(second_line);}  }
class C{  public final int hashCode(){  return super.hashCode();}  }
class C{  public void testValueOfLongNegative1(){  long longVal=-268209772258930018L;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={-4,71,32,-94,23,55,-46,-98};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  void logFailed(String str,String error){  logFailed(str,"LOGIN_FAILED",true,error);}  }
class C{  @Override public void onLowMemory(){  super.onLowMemory();}  }
class C{  SandboxedGroovyScriptEngine(final GroovyEngineFactory factory,final ScriptEngine realEngine,final GroovyValueFilter sandbox){  Reject.ifNull(factory,realEngine,sandbox);  this.realEngine=realEngine;  this.sandbox=sandbox;  this.factory=factory;}  }
class C{  public boolean isEditable(){  return editable;}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public void init(String componentName) throws DataStoreProviderException {}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  String prefixLIB="";  String uriLIB="";  String uriSAML="";  if (includeNS) {    prefixLIB=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    uriLIB=IFSConstants.LIB_12_NAMESPACE_STRING;    uriSAML=IFSConstants.assertionDeclareStr;  }  String instantString=null;  try {    instantString=DateUtils.toUTCDateFormat(issueInstant);  } catch (  Exception e) {    FSUtils.debug.error("FSNameIdentifierMappingResponse.toXMLString:" + " could not convert issueInstant to String.",e);  }  StringBuffer xml=new StringBuffer(1000);  if (includeHeader) {    xml.append(IFSConstants.XML_PREFIX).append(SAMLConstants.DEFAULT_ENCODING).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.QUESTION_MARK).append(IFSConstants.RIGHT_ANGLE).append(IFSConstants.NL);  }  xml.append(IFSConstants.LEFT_ANGLE).append(prefixLIB).append(IFSConstants.NAMEID_MAPPING_RESPONSE).append(uriLIB).append(uriSAML).append(IFSConstants.SPACE).append(IFSConstants.RESPONSE_ID).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(responseID).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.IN_RESPONSE_TO).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(inResponseTo).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE).append(IFSConstants.MAJOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(majorVersion).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE).append(IFSConstants.MINOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(minorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE).append(IFSConstants.ISSUE_INSTANT).append(IFSConstants.EQUAL_TO).append(instantString).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.RIGHT_ANGLE);  if (signed) {    if (signatureString != null) {      xml.append(signatureString);    } else     if (signature != null) {      signatureString=XMLUtils.print(signature);      xml.append(signatureString);    }  }  xml.append(IFSConstants.LEFT_ANGLE).append(prefixLIB).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE).append(providerID).append(IFSConstants.START_END_ELEMENT).append(prefixLIB).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE).append(status.toString(includeNS,true));  if (nameIdentifier != null) {    xml.append(nameIdentifier.toString());  }  xml.append(IFSConstants.START_END_ELEMENT).append(prefixLIB).append(IFSConstants.NAMEID_MAPPING_RESPONSE).append(IFSConstants.RIGHT_ANGLE);  return xml.toString();}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","uncaughtException.message");}  }
class C{  public ParserAdapter(Parser parser){  super();  setup(parser);}  }
class C{  public Builder removeAllNames(){  this.names.clear();  return this;}  }
class C{  protected final static VersionInfo fromMap(String pckg,Map info,ClassLoader clsldr){  if (pckg == null) {    throw new IllegalArgumentException("Package identifier must not be null.");  }  String module=null;  String release=null;  String timestamp=null;  if (info != null) {    module=(String)info.get(PROPERTY_MODULE);    if ((module != null) && (module.length() < 1))     module=null;    release=(String)info.get(PROPERTY_RELEASE);    if ((release != null) && ((release.length() < 1) || (release.equals("${pom.version}"))))     release=null;    timestamp=(String)info.get(PROPERTY_TIMESTAMP);    if ((timestamp != null) && ((timestamp.length() < 1) || (timestamp.equals("${mvn.timestamp}"))))     timestamp=null;  }  String clsldrstr=null;  if (clsldr != null)   clsldrstr=clsldr.toString();  return new VersionInfo(pckg,module,release,timestamp,clsldrstr);}  }
class C{  private Connections(){}  }
class C{  public String toString(){  int modifiers=0;  if (!GraphicsEnvironment.isHeadless()) {    modifiers=Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();  }  if (usesShiftModifier()) {    modifiers|=Event.SHIFT_MASK;  }  return KeyEvent.getKeyModifiersText(modifiers) + "+" + KeyEvent.getKeyText(key);}  }
class C{  public DecodingException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  private int checkChangelogQueueSize(int changelog_queue_size) throws Exception {  return searchNbMonitorEntries("(max-waiting-changes=" + changelog_queue_size + ")");}  }
class C{  ASN1ByteChannelReader(ReadableByteChannel channel,int bufferSize,int maxElementSize){  this.byteChannel=channel;  this.byteBuffer=ByteBuffer.allocate(bufferSize);  this.byteBuffer.flip();  this.saveBuffer=new ByteStringBuilder();  this.saveBufferReader=saveBuffer.asReader();  CombinedBufferInputStream bufferStream=new CombinedBufferInputStream();  this.reader=ASN1.getReader(bufferStream,maxElementSize);}  }
class C{  public boolean removePermittedDomain(String domainName){  return Lists.remove(permittedDomains,domainName);}  }
class C{  protected void countProximityPosition(int i){  if (!isReverseAxes())   super.countProximityPosition(i); else   if (i < m_proximityPositions.length)   m_proximityPositions[i]--;}  }
class C{  public AnnotationVisitor visitAnnotationDefault(){  if (mv != null) {    return mv.visitAnnotationDefault();  }  return null;}  }
class C{  public AsynchronousTextWriter(String name,int capacity,boolean autoFlush,TextWriter writer){  this.name=name;  this.autoFlush=autoFlush;  this.writer=writer;  this.queue=new LinkedBlockingQueue<>(capacity);  this.capacity=capacity;  this.writerThread=null;  this.stopRequested=new AtomicBoolean(false);  writerThread=new WriterThread();  writerThread.start();  DirectoryServer.registerShutdownListener(this);}  }
class C{  public void testCompareToPosZero(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  assertEquals(1,aNumber.compareTo(bNumber));}  }
class C{  public FSNameIdentifierHelper(BaseConfigType hostedConfig){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSNameIdentifierGeneratorHelper constructor" + " called");  }  try {    String className=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.NAMEID_IMPL_CLASS);    generator=(INameIdentifier)(Class.forName(className).newInstance());  } catch (  ClassNotFoundException exp) {    FSUtils.debug.error("FSNameIdentifierGeneratorHelper constructor." + "Not able to create instance of Generator Impl",exp);  }catch (  Exception exp) {    FSUtils.debug.error("FSNameIdentifierGeneratorHelper constructor." + "Not able to create instance of Generator Impl",exp);  }}  }
class C{  public DecoderException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public static SignerInformation replaceUnsignedAttributes(SignerInformation signerInformation,AttributeTable unsignedAttributes){  SignerInfo sInfo=signerInformation.info;  ASN1Set unsignedAttr=null;  if (unsignedAttributes != null) {    unsignedAttr=new DERSet(unsignedAttributes.toASN1EncodableVector());  }  return new SignerInformation(new SignerInfo(sInfo.getSID(),sInfo.getDigestAlgorithm(),sInfo.getAuthenticatedAttributes(),sInfo.getDigestEncryptionAlgorithm(),sInfo.getEncryptedDigest(),unsignedAttr),signerInformation.contentType,signerInformation.content,null);}  }
class C{  private int handleG(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (charAt(value,index + 1) == 'H') {    index=handleGH(value,result,index);  } else   if (charAt(value,index + 1) == 'N') {    if (index == 1 && isVowel(charAt(value,0)) && !slavoGermanic) {      result.append("KN","N");    } else     if (!contains(value,index + 2,2,"EY") && charAt(value,index + 1) != 'Y' && !slavoGermanic) {      result.append("N","KN");    } else {      result.append("KN");    }    index=index + 2;  } else   if (contains(value,index + 1,2,"LI") && !slavoGermanic) {    result.append("KL","L");    index+=2;  } else   if (index == 0 && (charAt(value,index + 1) == 'Y' || contains(value,index + 1,2,ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {    result.append('K','J');    index+=2;  } else   if ((contains(value,index + 1,2,"ER") || charAt(value,index + 1) == 'Y') && !contains(value,0,6,"DANGER","RANGER","MANGER") && !contains(value,index - 1,1,"E","I")&& !contains(value,index - 1,3,"RGY","OGY")) {    result.append('K','J');    index+=2;  } else   if (contains(value,index + 1,1,"E","I","Y") || contains(value,index - 1,4,"AGGI","OGGI")) {    if ((contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) || contains(value,index + 1,2,"ET")) {      result.append('K');    } else     if (contains(value,index + 1,4,"IER")) {      result.append('J');    } else {      result.append('J','K');    }    index+=2;  } else   if (charAt(value,index + 1) == 'G') {    index+=2;    result.append('K');  } else {    index++;    result.append('K');  }  return index;}  }
class C{  public URL(String mimeType){  super(mimeType,"java.net.URL");}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public FrameBodyTIT2(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public synchronized void unregisterService(String serviceName) throws AMException, SSOException {  if (debug.messageEnabled()) {    debug.message("AMOrganizationImpl.unregisterService(" + serviceName + ")");  }  SSOTokenManager.getInstance().validateToken(super.token);  if (isRegisteredForSubOrgs(serviceName)) {    Object args[]={serviceName};    throw new AMException(AMSDKBundle.getString("445",args,super.locale),"445",args);  }  try {    if (AMServiceUtils.serviceHasSubSchema(super.token,serviceName,SchemaType.DYNAMIC)) {      try {        dsServices.unRegisterService(super.token,super.entryDN,super.profileType,serviceName,AMTemplate.DYNAMIC_TEMPLATE);      } catch (      AMException le) {        if (debug.messageEnabled()) {          debug.message("AMOrganizationImpl.unregister " + "exception in dsManager.unRegisterService" + "DYNAMIC_TEMPLATE serviceName="+ serviceName);        }      }    }    if (AMServiceUtils.serviceHasSubSchema(super.token,serviceName,SchemaType.ORGANIZATION)) {      if (orgTemplateExists(serviceName)) {        AMTemplate template=getTemplate(serviceName,AMTemplate.ORGANIZATION_TEMPLATE);        dsServices.unRegisterService(super.token,super.entryDN,super.profileType,serviceName,AMTemplate.ORGANIZATION_TEMPLATE);        template.delete();      }    }    Set serviceStatus=getAttribute(SERVICE_STATUS_ATTRIBUTE);    Iterator iter=serviceStatus.iterator();    while (iter.hasNext()) {      String status=(String)iter.next();      if (status.equalsIgnoreCase(serviceName)) {        serviceStatus.remove(status);        setAttribute(SERVICE_STATUS_ATTRIBUTE,serviceStatus);        store();        break;      }    }  } catch (  SMSException smsex) {    Object args[]={serviceName};    throw new AMException(AMSDKBundle.getString("913",args,super.locale),"913",args);  }}  }
class C{  public void revokeReadPermission(Collection attributeNames){  Iterator it=attributeNames.iterator();  if (it != null) {    while (it.hasNext()) {      String temp=(String)it.next();      readables.remove(temp.toLowerCase());    }  }}  }
class C{  private void visitImplicitFirstFrame(){  int frameIndex=startFrame(0,descriptor.length() + 1,0);  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & ACC_CONSTRUCTOR) == 0) {      frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);    } else {      frame[frameIndex++]=6;    }  }  int i=1;  loop:   while (true) {    int j=i;switch (descriptor.charAt(i++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':      frame[frameIndex++]=1;    break;case 'F':  frame[frameIndex++]=2;break;case 'J':frame[frameIndex++]=4;break;case 'D':frame[frameIndex++]=3;break;case '[':while (descriptor.charAt(i) == '[') {++i;}if (descriptor.charAt(i) == 'L') {++i;while (descriptor.charAt(i) != ';') {++i;}}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i));break;case 'L':while (descriptor.charAt(i) != ';') {++i;}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++));break;default :break loop;}}frame[1]=frameIndex - 3;endFrame();}  }
class C{  public ShapelessRecipe addIngredient(MaterialData ingredient){  return addIngredient(1,ingredient);}  }
class C{  public void next(){  index++;}  }
class C{  public static void createAgentGroup(SSOToken ssoToken,String realm,String agentGroupName,String agentType,Map attrValues,String serverURL,String agentURL) throws IdRepoException, SSOException, SMSException, MalformedURLException, ConfigurationException {  if ((serverURL == null) || (serverURL.trim().length() == 0)) {    throw new ConfigurationException("create.agent.invalid.server.url",null);  }  FQDNUrl urlAgent=null;  if ((agentURL != null) && (agentURL.trim().length() > 0)) {    urlAgent=new FQDNUrl(agentURL);  }  createAgentGroupEx(ssoToken,realm,agentGroupName,agentType,attrValues,new FQDNUrl(serverURL),urlAgent);}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo updateFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.updateFoo(foo);}  }
class C{  void clear(){  ib=null;}  }
class C{  public static <T>Observable.Transformer<T,T> applyComputationSchedulers(){  return (Observable.Transformer<T,T>)computationTransformer;}  }
class C{  public File createFile(String prefix,String suffix) throws IOException {  return File.createTempFile(prefix,suffix,getFolder());}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  private static long dosToJavaTime(long dtime){  @SuppressWarnings("deprecation") Date d=new Date((int)(((dtime >> 25) & 0x7f) + 80),(int)(((dtime >> 21) & 0x0f) - 1),(int)((dtime >> 16) & 0x1f),(int)((dtime >> 11) & 0x1f),(int)((dtime >> 5) & 0x3f),(int)((dtime << 1) & 0x3e));  return d.getTime();}  }
class C{  @Override public void paintComponent(Graphics p_g){  super.paintComponent(p_g);  if (itera_board != null)   itera_board.draw(p_g);  if (custom_cursor != null)   custom_cursor.draw(p_g);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws javax.servlet.ServletException, java.io.IOException {  doGet(request,response);}  }
class C{  private void verifyPassword(){  if (!checkPassword(mPassword.getText().toString())) {    return;  }  if (mStage == Stage.NEW_FINGERPRINT_ENROLLED) {    SharedPreferences.Editor editor=mSharedPreferences.edit();    editor.putBoolean(getString(R.string.use_fingerprint_to_authenticate_key),mUseFingerprintFutureCheckBox.isChecked());    editor.apply();    if (mUseFingerprintFutureCheckBox.isChecked()) {      mActivity.createKey();      mStage=Stage.FINGERPRINT;    }  }  mPassword.setText("");  mActivity.onPurchased(false);  dismiss();}  }
class C{  public DsApplIfOpsEntryImpl(SnmpMib mib,MBeanServer server,ObjectName connectionHandlerObjectName,int applIndex,int connectionHandlerIndex){  super(mib);  this.server=server;  this.connectionHandlerName=connectionHandlerObjectName;  this.ApplIndex=new Integer(applIndex);  this.DsApplIfProtocolIndex=new Integer(connectionHandlerIndex);  this.monitor=SNMPMonitor.getMonitor(server);}  }
class C{  public void testDivideRoundHalfUpNeg(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="-1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void paintSplitPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void removeAttribute(Object name){  table.remove(name);}  }
class C{  public void run(){  try {    ThreadAuditor.ThreadHandle threadHandle=sipStack.getThreadAuditor().addCurrentThread();    while (true) {      EventWrapper eventWrapper=null;      LinkedList eventsToDeliver;synchronized (this.eventMutex) {        while (pendingEvents.isEmpty()) {          if (this.isStopped) {            if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))             logger.logDebug("Stopped event scanner!!");            return;          }          try {            threadHandle.ping();            eventMutex.wait(threadHandle.getPingIntervalInMillisecs());          } catch (          InterruptedException ex) {            if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))             logger.logDebug("Interrupted!");            return;          }        }        eventsToDeliver=pendingEvents;        pendingEvents=new LinkedList();      }      ListIterator iterator=eventsToDeliver.listIterator();      while (iterator.hasNext()) {        eventWrapper=(EventWrapper)iterator.next();        if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {          logger.logDebug("Processing " + eventWrapper + "nevents "+ eventsToDeliver.size());        }        try {          deliverEvent(eventWrapper);        } catch (        Exception e) {          if (logger.isLoggingEnabled()) {            logger.logError("Unexpected exception caught while delivering event -- carrying on bravely",e);          }        }      }    }  }  finally {    if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {      if (!this.isStopped) {        logger.logFatalError("Event scanner exited abnormally");      }    }  }}  }
class C{  public static FontProgram createType1Font(byte[] afm,byte[] pfb) throws java.io.IOException {  return createType1Font(afm,pfb,DEFAULT_CACHED);}  }
class C{  public boolean equals(Object object){  if (this == object) {    return true;  } else   if (object == null || getClass() != object.getClass()) {    return false;  }  return SSOSessionID.equals(object);}  }
class C{  public Dimension preferredLayoutSize(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    int nrows=rows;    int ncols=cols;    if (nrows > 0) {      ncols=(ncomponents + nrows - 1) / nrows;    } else {      nrows=(ncomponents + ncols - 1) / ncols;    }    int w=0;    int h=0;    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      Dimension d=comp.getPreferredSize();      if (w < d.width) {        w=d.width;      }      if (h < d.height) {        h=d.height;      }    }    return new Dimension(insets.left + insets.right + ncols * w + (ncols - 1) * hgap,insets.top + insets.bottom + nrows * h + (nrows - 1) * vgap);  }}  }
class C{  public int process(Callback[] callbacks,int state) throws AuthLoginException {  if (errorMsg != null) {    throw new AuthLoginException(amAuthJDBC,errorMsg,null);  }  if (debug.messageEnabled()) {    debug.message("State: " + state);  }  if (state != ISAuthConstants.LOGIN_START) {    throw new AuthLoginException(amAuthJDBC,"invalidState",null);  }  if (callbacks != null && callbacks.length == 0) {    userName=(String)sharedState.get(getUserKey());    password=(String)sharedState.get(getPwdKey());    if (userName == null || password == null) {      return ISAuthConstants.LOGIN_START;    }    getCredentialsFromSharedState=true;  } else {    userName=((NameCallback)callbacks[0]).getName();    if (debug.messageEnabled()) {      debug.message("Authenticating this user: " + userName);    }    passwordCharArray=((PasswordCallback)callbacks[1]).getPassword();    password=new String(passwordCharArray);    if (userName == null || userName.length() == 0) {      throw new AuthLoginException(amAuthJDBC,"noUserName",null);    }  }  storeUsernamePasswd(userName,password);  if (userName.length() > MAX_NAME_LENGTH) {    throw new AuthLoginException(amAuthJDBC,"userNameTooLong",null);  }  validateUserName(userName,CollectionHelper.getMapAttr(options,INVALID_CHARS));  Connection database=null;  PreparedStatement thisStatement=null;  ResultSet results=null;  try {    if (useJNDI) {      Context initctx=new InitialContext();      DataSource ds=(DataSource)initctx.lookup(jndiName);      if (debug.messageEnabled()) {        debug.message("Datasource Acquired: " + ds.toString());      }      database=ds.getConnection();      debug.message("Using JNDI Retrieved Connection pool");    } else {      Class.forName(driver);      database=DriverManager.getConnection(url,dbuser,dbpassword);    }    if (debug.messageEnabled()) {      debug.message("Connection Acquired: " + database.toString());    }    if (debug.messageEnabled()) {      debug.message("PreparedStatement to build: " + statement);    }    thisStatement=database.prepareStatement(statement);    thisStatement.setString(1,userName);    if (debug.messageEnabled()) {      debug.message("Statement to execute: " + thisStatement);    }    results=thisStatement.executeQuery();    if (results == null) {      debug.message("returned null from executeQuery()");      throw new AuthLoginException(amAuthJDBC,"nullResult",null);    }    int index=0;    while (results.next()) {      index++;      if (index > 1) {        if (debug.messageEnabled()) {          debug.message("Too many results." + "UID should be a primary key");        }        throw new AuthLoginException(amAuthJDBC,"multiEntry",null);      }      resultPassword=results.getString(passwordColumn).trim();    }    if (index == 0) {      if (debug.messageEnabled()) {        debug.message("No results from your SQL query." + "UID should be valid");      }      throw new AuthLoginException(amAuthJDBC,"nullResult",null);    }  } catch (  Throwable e) {    if (getCredentialsFromSharedState && !isUseFirstPassEnabled()) {      getCredentialsFromSharedState=false;      return ISAuthConstants.LOGIN_START;    }    if (debug.messageEnabled()) {      debug.message("JDBC Exception:",e);    }    throw new AuthLoginException(e);  } finally {    if (results != null) {      try {        results.close();      } catch (      Exception e) {      }    }    if (thisStatement != null) {      try {        thisStatement.close();      } catch (      Exception e) {      }    }    if (database != null) {      try {        database.close();      } catch (      Exception dbe) {        debug.error("Error in closing database connection: " + dbe.getMessage());        if (debug.messageEnabled()) {          debug.message("Fail to close database:",dbe);        }      }    }  }  if (!transform.equals(DEFAULT_TRANSFORM)) {    try {      JDBCPasswordSyntaxTransform syntaxTransform=(JDBCPasswordSyntaxTransform)Class.forName(transform).newInstance();      if (debug.messageEnabled()) {        debug.message("Got my Transform Object" + syntaxTransform.toString());      }      password=syntaxTransform.transform(password);      if (debug.messageEnabled()) {        debug.message("Password transformed by: " + transform);      }    } catch (    Throwable e) {      if (debug.messageEnabled()) {        debug.message("Syntax Transform Exception:" + e.toString());      }      throw new AuthLoginException(e);    }  }  if (password != null && password.equals(resultPassword)) {    userTokenId=userName;    return ISAuthConstants.LOGIN_SUCCEED;  } else {    debug.message("password not match. Auth failed.");    setFailureID(userName);    throw new InvalidPasswordException(amAuthJDBC,"loginFailed",null,userName,null);  }}  }
class C{  public final boolean owns(ConditionObject condition){  return condition.isOwnedBy(this);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.NameIdentifierMappingRequestType createNameIdentifierMappingRequestType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.NameIdentifierMappingRequestTypeImpl();}  }
class C{  public static File checkFolderPath(final String path,final boolean create){  final File file=new File(path);  if (!file.exists()) {    if (create) {      file.mkdir();    }    return null;  }  return file;}  }
class C{  private Entry initializeEntry() throws DirectoryException {  DN dn=DN.valueOf(TEST_ROOT_DN_STRING);  Map<ObjectClass,String> objectClasses=new HashMap<>();  objectClasses.put(CoreSchema.getOrganizationObjectClass(),ORGANIZATION);  Entry entry=new Entry(dn,objectClasses,null,null);  UUID uuid=UUID.randomUUID();  AttributeType entryuuidAttrType=getEntryUUIDAttributeType();  List<Attribute> uuidList=Attributes.createAsList(entryuuidAttrType,uuid.toString());  entry.getOperationalAttributes().put(entryuuidAttrType,uuidList);  return entry;}  }
class C{  public void addAll(AccessibleRelation[] relations){  if (relations.length != 0) {    if (this.relations == null) {      this.relations=new Vector(relations.length);    }    for (int i=0; i < relations.length; i++) {      add(relations[i]);    }  }}  }
class C{  public TestInternalSearchListener(){  searchEntries=new ArrayList<>();  searchReferences=new ArrayList<>();}  }
class C{  public final int compare(Object obj1,Object obj2){  byte[] bytes1=(byte[])obj1;  byte[] bytes2=(byte[])obj2;  return (bytes1[0] | 0x20) - (bytes2[0] | 0x20);}  }
class C{  private Map<String,Object> buildPatchForPasswords(final List<String> newPasswords) throws JsonCryptoException {  final Map<String,Object> patchFields=new HashMap<>();  JsonValue crypto=new JsonCrypto(encryptor.getType(),encryptor.encrypt(new JsonValue(newPasswords.get(0)))).toJsonValue();switch (compatMode) {case V2:    patchFields.put("replace",new JsonPointer(currentConfig.getPasswordAttribute()).toString());  patchFields.put("value",crypto.asMap());break;case V3:patchFields.put("operation","replace");patchFields.put("field",new JsonPointer(currentConfig.getPasswordAttribute()).toString());patchFields.put("value",crypto.asMap());break;default :throw new IllegalArgumentException("Unknown compatibility mode: " + compatMode);}return patchFields;}  }
class C{  private String chooseDefaultIconRef(){  MavenProject project=getProject();  EnricherContext context=getContext();  if (hasClass(project,"io.fabric8.funktion.runtime.Main") || hasDependency(project,"io.fabric8.funktion")) {    return "funktion";  }  if (hasClass(project,"org.apache.camel.CamelContext")) {    return "camel";  }  if (hasPlugin(project,"org.springframework.boot:spring-boot-maven-plugin") || hasClass(project,"org.springframework.boot.SpringApplication")) {    return "spring-boot";  }  if (hasClass(project,"org.springframework.core.Constants")) {    return "spring";  }  if (hasClass(project,"org.vertx.java.core.Handler","io.vertx.core.Handler")) {    return "vertx";  }  if (hasPlugin(project,"org.wildfly.swarm:wildfly-swarm-plugin") || hasDependency(project,"org.wildfly.swarm")) {    return "wildfly-swarm";  }  return null;}  }
class C{  public ByteArrayScanner(byte[] bytes){  this.bytes=ByteString.wrap(bytes).asReader();  this.byteArray=bytes;}  }
class C{  public boolean hasSubSchema(){  if (subSchemas != null) {    return (subSchemas.isEmpty()) ? false : true;  }  return false;}  }
class C{  public static String readUTF16LEStr(InputStream stream) throws IOException {  int strLen=readUINT16(stream);  byte[] buf=new byte[strLen];  int read=stream.read(buf);  if (read == strLen || (strLen == 0 && read == -1)) {    if (buf.length >= 2) {      if (buf[buf.length - 1] == 0 && buf[buf.length - 2] == 0) {        byte[] copy=new byte[buf.length - 2];        System.arraycopy(buf,0,copy,0,buf.length - 2);        buf=copy;      }    }    return new String(buf,AsfHeader.ASF_CHARSET.name());  }  throw new IllegalStateException("Invalid Data for current interpretation");}  }
class C{  public void end(){  len=pos;  int dLen=len - 4;  buf[0]=(byte)0x41;  buf[1]=(byte)0x42;  buf[2]=(byte)((dLen >>> 8) & 0xFF);  buf[3]=(byte)(dLen & 0xFF);}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  public static net.aimeizi.person.QueryParameter.Builder newBuilder(){  return new net.aimeizi.person.QueryParameter.Builder();}  }
class C{  public String toXMLString() throws XACMLException {  return toXMLString(true,false);}  }
class C{  public static boolean isDownwardAxisOfMany(int axis){  return ((Axis.DESCENDANTORSELF == axis) || (Axis.DESCENDANT == axis) || (Axis.FOLLOWING == axis)|| (Axis.PRECEDING == axis));}  }
class C{  public InternalSession releaseSession(SessionID sessionId){  InternalSession internalSession=internalSessionCache.remove(sessionId);  internalSession.setPersistenceManager(null);  return internalSession;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.TransformElement createTransformElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.TransformElementImpl();}  }
class C{  public String normalizeId(String anId){  return (anId == null ? null : anId.toLowerCase());}  }
class C{  public void addArgument(Argument argument) throws ArgumentException {  final String argumentLongID=argument.getLongIdentifier();  if (getArgumentForLongIdentifier(argumentLongID) != null) {    throw new ArgumentException(ERR_ARG_SUBCOMMAND_DUPLICATE_ARGUMENT_NAME.get(name,argumentLongID));  }  if (parser.hasGlobalArgument(argumentLongID)) {    throw new ArgumentException(ERR_ARG_SUBCOMMAND_ARGUMENT_GLOBAL_CONFLICT.get(argumentLongID,name));  }  Character shortID=argument.getShortIdentifier();  if (shortID != null) {    if (shortIDMap.containsKey(shortID)) {      throw new ArgumentException(ERR_ARG_SUBCOMMAND_DUPLICATE_SHORT_ID.get(argumentLongID,name,String.valueOf(shortID),shortIDMap.get(shortID).getLongIdentifier()));    }    Argument arg=parser.getGlobalArgumentForShortID(shortID);    if (arg != null) {      throw new ArgumentException(ERR_ARG_SUBCOMMAND_ARGUMENT_SHORT_ID_GLOBAL_CONFLICT.get(argumentLongID,name,String.valueOf(shortID),arg.getLongIdentifier()));    }  }  String longID=argument.getLongIdentifier();  if (!parser.longArgumentsCaseSensitive()) {    longID=toLowerCase(longID);    if (longIDMap.containsKey(longID)) {      throw new ArgumentException(ERR_ARG_SUBCOMMAND_DUPLICATE_LONG_ID.get(argumentLongID,name));    }  }  Argument arg=parser.getGlobalArgumentForLongID(longID);  if (arg != null) {    throw new ArgumentException(ERR_ARG_SUBCOMMAND_ARGUMENT_LONG_ID_GLOBAL_CONFLICT.get(argumentLongID,name));  }  arguments.add(argument);  if (shortID != null) {    shortIDMap.put(shortID,argument);  }  if (longID != null) {    longIDMap.put(longID,argument);  }}  }
class C{  public static void main(String[] args){  try {    WebBrowserErrorDialog dlg=new WebBrowserErrorDialog(new JFrame(),new WebBrowserException("http://opendj.org",LocalizableMessage.raw("toto"),null));    dlg.packAndShow();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void testDivideToIntegralValueMathContextDOWN(){  String a="3736186567876876578956958769675785435673453453653543654354365435675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=70;  int precision=75;  RoundingMode rm=RoundingMode.DOWN;  MathContext mc=new MathContext(precision,rm);  String c="2.7792318551469036747477068339450205874992634417590178670822889E+62";  int resScale=-1;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divideToIntegralValue(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void postScale(float deltaScale,float px,float py){  if (deltaScale > 1 && getCurrentScale() * deltaScale <= getMaxScale()) {    super.postScale(deltaScale,px,py);  } else   if (deltaScale < 1 && getCurrentScale() * deltaScale >= getMinScale()) {    super.postScale(deltaScale,px,py);  }}  }
class C{  public static String[] decodeUserPassword(String userPasswordValue) throws DirectoryException {  if (userPasswordValue == null || userPasswordValue.length() == 0) {    LocalizableMessage message=ERR_ATTR_SYNTAX_USERPW_NO_VALUE.get();    throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);  }  if (userPasswordValue.charAt(0) != '{') {    LocalizableMessage message=ERR_ATTR_SYNTAX_USERPW_NO_OPENING_BRACE.get();    throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);  }  int closePos=userPasswordValue.indexOf('}');  if (closePos < 0) {    LocalizableMessage message=ERR_ATTR_SYNTAX_USERPW_NO_CLOSING_BRACE.get();    throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);  }  String schemeName=userPasswordValue.substring(1,closePos);  String encodedValue=userPasswordValue.substring(closePos + 1);  if (schemeName.length() == 0) {    LocalizableMessage message=ERR_ATTR_SYNTAX_USERPW_NO_SCHEME.get();    throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);  }  return new String[]{toLowerCase(schemeName),encodedValue};}  }
class C{  public boolean isReverseAxes(){  return true;}  }
class C{  public void startElement(String qName,AttributeList qAtts) throws SAXException {  Vector exceptions=null;  if (!namespaces) {    if (contentHandler != null) {      attAdapter.setAttributeList(qAtts);      contentHandler.startElement("","",qName.intern(),attAdapter);    }    return;  }  nsSupport.pushContext();  int length=qAtts.getLength();  for (int i=0; i < length; i++) {    String attQName=qAtts.getName(i);    if (!attQName.startsWith("xmlns"))     continue;    String prefix;    int n=attQName.indexOf(':');    if (n == -1 && attQName.length() == 5) {      prefix="";    } else     if (n != 5) {      continue;    } else     prefix=attQName.substring(n + 1);    String value=qAtts.getValue(i);    if (!nsSupport.declarePrefix(prefix,value)) {      reportError("Illegal Namespace prefix: " + prefix);      continue;    }    if (contentHandler != null)     contentHandler.startPrefixMapping(prefix,value);  }  atts.clear();  for (int i=0; i < length; i++) {    String attQName=qAtts.getName(i);    String type=qAtts.getType(i);    String value=qAtts.getValue(i);    if (attQName.startsWith("xmlns")) {      String prefix;      int n=attQName.indexOf(':');      if (n == -1 && attQName.length() == 5) {        prefix="";      } else       if (n != 5) {        prefix=null;      } else {        prefix=attQName.substring(6);      }      if (prefix != null) {        if (prefixes) {          if (uris)           atts.addAttribute(nsSupport.XMLNS,prefix,attQName.intern(),type,value); else           atts.addAttribute("","",attQName.intern(),type,value);        }        continue;      }    }    try {      String attName[]=processName(attQName,true,true);      atts.addAttribute(attName[0],attName[1],attName[2],type,value);    } catch (    SAXException e) {      if (exceptions == null)       exceptions=new Vector();      exceptions.addElement(e);      atts.addAttribute("",attQName,attQName,type,value);    }  }  if (exceptions != null && errorHandler != null) {    for (int i=0; i < exceptions.size(); i++)     errorHandler.error((SAXParseException)(exceptions.elementAt(i)));  }  if (contentHandler != null) {    String name[]=processName(qName,false,false);    contentHandler.startElement(name[0],name[1],name[2],atts);  }}  }
class C{  public AssertionError(char detailMessage){  this(String.valueOf(detailMessage));}  }
class C{  public void testShiftLeft2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=-27;  byte rBytes[]={48,7,12,-97,-42,-117,37,-85,96};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftLeft(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private static boolean findActivity(ArrayList<AppInfo> apps,ComponentName component,UserHandleCompat user){  final int N=apps.size();  for (int i=0; i < N; i++) {    final AppInfo info=apps.get(i);    if (info.user.equals(user) && info.componentName.equals(component)) {      return true;    }  }  return false;}  }
class C{  public void paintSpinnerBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private String diffLdif(String actualLdif,String expectedLdif) throws Exception {  actualLdif=stripPassword(actualLdif);  expectedLdif=stripPassword(expectedLdif);  File actualLdifFile=getTemporaryLdifFile("aci-tests-actual");  File expectedLdifFile=getTemporaryLdifFile("aci-tests-expected");  File diffLdifFile=getTemporaryLdifFile("aci-tests-diff");  TestCaseUtils.writeFile(actualLdifFile,actualLdif);  TestCaseUtils.writeFile(expectedLdifFile,expectedLdif);  diffLdifFile.delete();  String[] args={"--sourceLDIF",actualLdifFile.getAbsolutePath(),"--targetLDIF",expectedLdifFile.getAbsolutePath(),"--outputLDIF",diffLdifFile.getAbsolutePath()};  int retVal=LDIFDiff.mainDiff(args,true,System.out,System.err);  assertEquals(retVal,0,"LDIFDiff failed");  if (diffLdifFile.exists()) {    return stripComments(TestCaseUtils.readFile(diffLdifFile));  }  return "";}  }
class C{  public JarOutputStream(OutputStream out) throws IOException {  super(out);}  }
class C{  public static void logCompareResponse(CompareOperation compareOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logCompareResponse(compareOperation);  }}  }
class C{  private boolean contains(int s){  return (indexOf(s,0) >= 0);}  }
class C{  public static <T>List<T> synchronizedList(List<T> list){  if (list == null) {    throw new NullPointerException("list == null");  }  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<T>(list);  }  return new SynchronizedList<T>(list);}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(3000);  String o=SAMLUtilsCommon.makeStartElementTagXML("AudienceRestrictionCondition",includeNS,declareNS);  xml.append(o).append(sc.NL);  Iterator it=_audience.iterator();  while (it.hasNext()) {    o=SAMLUtilsCommon.makeStartElementTagXML("Audience",includeNS,false);    xml.append(o).append((String)it.next());    o=SAMLUtilsCommon.makeEndElementTagXML("Audience",includeNS);    xml.append(o);  }  o=SAMLUtilsCommon.makeEndElementTagXML("AudienceRestrictionCondition",includeNS);  xml.append(o);  return xml.toString();}  }
class C{  public boolean functionAvailable(String ns,String funcName) throws javax.xml.transform.TransformerException {  try {    if (funcName == null) {      String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ARG_CANNOT_BE_NULL,new Object[]{"Function Name"});      throw new NullPointerException(fmsg);    }    javax.xml.namespace.QName myQName=new QName(ns,funcName);    javax.xml.xpath.XPathFunction xpathFunction=resolver.resolveFunction(myQName,0);    if (xpathFunction == null) {      return false;    }    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  @After public void unregisterIdlingResource(){  Espresso.unregisterIdlingResources(mAddTaskIntentsTestRule.getActivity().getCountingIdlingResource());}  }
class C{  public String format(TemporalAccessor temporal){  StringBuilder buf=new StringBuilder(32);  formatTo(temporal,buf);  return buf.toString();}  }
class C{  @Override protected void afterRead(int n) throws IOException {  if (n == -1) {    close();  }}  }
class C{  @Post public Representation registerPermissionRequest(JsonRepresentation entity) throws UmaException, NotFoundException, ServerException {  JsonValue permissionRequest=json(toMap(entity));  String resourceSetId=getResourceSetId(permissionRequest);  OAuth2Request oAuth2Request=requestFactory.create(getRequest());  String clientId=getClientId(oAuth2Request);  OAuth2ProviderSettings providerSettings=providerSettingsFactory.get(oAuth2Request);  String resourceOwnerId=getResourceOwnerId(oAuth2Request);  ResourceSetDescription resourceSetDescription=getResourceSet(resourceSetId,resourceOwnerId,providerSettings);  Set<String> scopes=validateScopes(permissionRequest,resourceSetDescription);  for (  PermissionRequestFilter filter : extensionFilterManager.getFilters(PermissionRequestFilter.class)) {    filter.onPermissionRequest(resourceSetDescription,scopes,clientId);  }  String ticket=umaProviderSettingsFactory.get(getRequest()).getUmaTokenStore().createPermissionTicket(resourceSetId,scopes,clientId).getId();  return setResponse(201,Collections.<String,Object>singletonMap("ticket",ticket));}  }
class C{  public static void checkConnectionStateParameters(HttpsURLConnection clientConnection,SSLSocket serverPeer) throws Exception {  SSLSession session=serverPeer.getSession();  assertEquals(session.getCipherSuite(),clientConnection.getCipherSuite());  assertEquals(session.getLocalPrincipal(),clientConnection.getPeerPrincipal());  assertEquals(session.getPeerPrincipal(),clientConnection.getLocalPrincipal());  Certificate[] serverCertificates=clientConnection.getServerCertificates();  Certificate[] localCertificates=session.getLocalCertificates();  assertTrue("Server certificates differ from expected",Arrays.equals(serverCertificates,localCertificates));  localCertificates=clientConnection.getLocalCertificates();  serverCertificates=session.getPeerCertificates();  assertTrue("Local certificates differ from expected",Arrays.equals(serverCertificates,localCertificates));}  }
class C{  public boolean subSchemaChanged(){  if (!hasSubSchema()) {    return hasNewSubSchema();  } else {    boolean modified=hasNewSubSchema();    modified|=subSchema.subSchemaChanged();    return modified;  }}  }
class C{  private static <T,C extends Collection<T>>boolean collectionMatch(final C expected,final C actual){  if (expected == null && actual == null) {    return true;  }  if (expected == null || actual == null) {    return false;  }  if (expected.size() != actual.size()) {    return false;  }  for (  T value : expected) {    if (!actual.contains(value)) {      return false;    }  }  return true;}  }
class C{  public void leave(Thread threadId,MetricReference metricReference){  TImeMetricInfo info=metricStatisticsMap.get(metricReference);  HashMap<MetricReference,Object> attribs=getAttributes(threadId);  long delta=System.currentTimeMillis() - (Long)attribs.get(metricReference);  info.totalTime+=delta;  info.numberOfEvents++;  info.averageTime=info.totalTime / info.numberOfEvents;  attribs.put(metricReference,Long.MIN_VALUE);}  }
class C{  protected boolean isText(Element elem){  return (elem.getName() == AbstractDocument.ContentElementName);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode07.class,args);}  }
class C{  private void updateDataArray(){  TreeSet<BaseDNDescriptor> sortedSet=new TreeSet<>(this);  sortedSet.addAll(data);  dataArray.clear();  for (  BaseDNDescriptor desc : sortedSet) {    dataArray.add(new String[]{Utilities.unescapeUtf8(desc.getDn().toString()),desc.getBackend().getBackendID(),getValueForEntries(desc),getStringForReplState(desc),getValueForMissingChanges(desc),getValueForOldestMissingChange(desc)});  }}  }
class C{  public VorbisCommentTagField(byte[] raw) throws UnsupportedEncodingException {  String field=new String(raw,"UTF-8");  int i=field.indexOf("=");  if (i == -1) {    this.id=ERRONEOUS_ID;    this.content=field;  } else {    this.id=field.substring(0,i).toUpperCase();    if (field.length() > i) {      this.content=field.substring(i + 1);    } else {      this.content="";    }  }  checkCommon();}  }
class C{  public SAML2InvalidNameIDPolicyException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public AuthenticatorResult authenticate(String username,String password,Context context) throws ResourceException {  final ConnectionFactory connectionFactory=connectionFactoryProvider.get();  if (connectionFactory == null) {    throw new InternalServerErrorException("No ConnectionFactory available");  }  final ActionResponse result=connectionFactory.getConnection().action(context,Requests.newActionRequest(passThroughAuth,"authenticate").setAdditionalParameter("username",username).setAdditionalParameter("password",password));  return result.getJsonContent().isDefined(ResourceResponse.FIELD_CONTENT_ID) ? AuthenticatorResult.SUCCESS : AuthenticatorResult.FAILED;}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map<String,Set<String>> attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_MODIFY_ENTITLEMENT_SVC",null);  try {    ServiceSchemaManager ssm=new ServiceSchemaManager(EntitlementService.SERVICE_NAME,getAdminSSOToken());    validateData(attributeValues,ssm);    ServiceSchema gss=ssm.getGlobalSchema();    gss.setAttributeDefaults(attributeValues);    getOutputWriter().printlnMessage(getResourceString("set-entitlement-config-succeeded"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_MODIFY_ENTITLEMENT_SVC",null);  } catch (  SMSException e) {    String[] paramExs={e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_MODIFY_ENTITLEMENT_SVC",paramExs);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] paramExs={e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_MODIFY_ENTITLEMENT_SVC",paramExs);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  CLIException e) {    String[] paramExs={e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_MODIFY_ENTITLEMENT_SVC",paramExs);    throw e;  }}  }
class C{  public static boolean useResponseAuthentication(){  return useRespAuth;}  }
class C{  public ClientConfigGapicContext(Model model,ApiConfig config){  super(model,config);}  }
class C{  public String toString(){  return ("JMXPrincipal:  " + name);}  }
class C{  public void unassignPolicies(String serviceName,Set policyDNs) throws AMException, SSOException {  unassignPolicies(serviceName,policyDNs,true);}  }
class C{  public boolean isSignatureValid(ContentVerifierProvider verifierProvider) throws CertException {  TBSCertList tbsCRL=x509CRL.getTBSCertList();  if (!CertUtils.isAlgIdEqual(tbsCRL.getSignature(),x509CRL.getSignatureAlgorithm())) {    throw new CertException("signature invalid - algorithm identifier mismatch");  }  ContentVerifier verifier;  try {    verifier=verifierProvider.get((tbsCRL.getSignature()));    OutputStream sOut=verifier.getOutputStream();    DEROutputStream dOut=new DEROutputStream(sOut);    dOut.writeObject(tbsCRL);    sOut.close();  } catch (  Exception e) {    throw new CertException("unable to process signature: " + e.getMessage(),e);  }  return verifier.verify(x509CRL.getSignature().getBytes());}  }
class C{  public boolean mkdir(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkWrite(path);  }  if (isInvalid()) {    return false;  }  return fs.createDirectory(this);}  }
class C{  public boolean equals(Object o){  if (o instanceof Subjects) {    Subjects s=(Subjects)o;    if (s.users.size() == this.users.size()) {      Iterator subjects=users.entrySet().iterator();      while (subjects.hasNext()) {        Object ss=((Map.Entry)subjects.next()).getValue();        if (!s.users.containsValue(ss)) {          return (false);        }      }      return (true);    }  }  return (false);}  }
class C{  public AMSearchResults searchStaticGroups(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchStaticGroups(wildcard,null,searchControl);}  }
class C{  public void normalizeDocument(){}  }
class C{  public SwappedDataInputStream(InputStream input){  super(input);}  }
class C{  protected SizeRequirements calculateMajorAxisRequirements(int axis,SizeRequirements r){  float min=0;  float pref=0;  float max=0;  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    min+=v.getMinimumSpan(axis);    pref+=v.getPreferredSpan(axis);    max+=v.getMaximumSpan(axis);  }  if (r == null) {    r=new SizeRequirements();  }  r.alignment=0.5f;  r.minimum=(int)min;  r.preferred=(int)pref;  r.maximum=(int)max;  return r;}  }
class C{  private NameIDInfoKey(){}  }
class C{  public Object clone(){  AuthenticatedAgents theClone=null;  try {    theClone=(AuthenticatedAgents)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  return theClone;}  }
class C{  public void addTopicFavorite(String topicId,String access_token,Callback<Status> callback){  topicApi=getRetrofitForSimpleJson().create(TopicApi.class);  topicApi.addFavorite(topicId,access_token).enqueue(callback);}  }
class C{  public Set registerServices(InputStream xmlServiceSchema) throws SMSException, SSOException {  return registerServices(xmlServiceSchema,null);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.PseudonymElement createPseudonymElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.PseudonymElementImpl();}  }
class C{  private static Writer initWriter(File file,Object encoding,boolean append) throws IOException {  if (file == null) {    throw new NullPointerException("File is missing");  }  if (encoding == null) {    throw new NullPointerException("Encoding is missing");  }  boolean fileExistedAlready=file.exists();  OutputStream stream=null;  Writer writer=null;  try {    stream=new FileOutputStream(file,append);    if (encoding instanceof Charset) {      writer=new OutputStreamWriter(stream,(Charset)encoding);    } else     if (encoding instanceof CharsetEncoder) {      writer=new OutputStreamWriter(stream,(CharsetEncoder)encoding);    } else {      writer=new OutputStreamWriter(stream,(String)encoding);    }  } catch (  IOException ex) {    IOUtils.closeQuietly(writer);    IOUtils.closeQuietly(stream);    if (fileExistedAlready == false) {      FileUtils.deleteQuietly(file);    }    throw ex;  }catch (  RuntimeException ex) {    IOUtils.closeQuietly(writer);    IOUtils.closeQuietly(stream);    if (fileExistedAlready == false) {      FileUtils.deleteQuietly(file);    }    throw ex;  }  return writer;}  }
class C{  public void addInterface(MappedClass interfaze){  interfaces.add(interfaze);}  }
class C{  public static int fillStackTraceElements(Thread t,StackTraceElement[] stackTraceElements){  Arrays.fill(stackTraceElements,null);  StackTraceElement[] st=t.getStackTrace();  int n=Math.min(st.length,stackTraceElements.length);  System.arraycopy(st,0,stackTraceElements,0,n);  return n;}  }
class C{  public boolean insert(BrdAbit p_drill_item,PlaVectorInt p_vector,int p_max_recursion_depth,int p_max_via_recursion_depth,ShapeTileOctagon p_tidy_region){  if (p_drill_item.is_shove_fixed())   return false;  boolean attach_allowed=false;  if (p_drill_item instanceof BrdAbitVia) {    attach_allowed=((BrdAbitVia)p_drill_item).attach_allowed;  }  Collection<BrdItem> ignore_items=new LinkedList<BrdItem>();  ignore_items.add(p_drill_item);  AwtreeShapeSearch search_tree=r_board.search_tree_manager.get_default_tree();  for (int curr_layer=p_drill_item.first_layer(); curr_layer <= p_drill_item.last_layer(); ++curr_layer) {    int curr_ind=curr_layer - p_drill_item.first_layer();    ShapeTile curr_shape=p_drill_item.get_tree_shape(search_tree,curr_ind);    if (curr_shape == null)     continue;    ShapeConvex new_shape=(ShapeConvex)curr_shape.translate_by(p_vector);    ShapeTile curr_tile_shape;    curr_tile_shape=new_shape.bounding_octagon();    if (p_tidy_region != null) {      p_tidy_region=p_tidy_region.union(curr_tile_shape.bounding_octagon());    }    BrdFromSide from_side=new BrdFromSide(p_drill_item.center_get(),curr_tile_shape);    if (!r_board.shove_pad_algo.forced_pad(curr_tile_shape,from_side,curr_layer,p_drill_item.net_nos,p_drill_item.clearance_idx(),attach_allowed,ignore_items,p_max_recursion_depth,p_max_via_recursion_depth)) {      return false;    }    ShapeTileBox curr_bounding_box=curr_shape.bounding_box();    for (int j=0; j < 4; ++j) {      r_board.changed_area_join(curr_bounding_box.corner_approx(j),curr_layer);    }  }  p_drill_item.move_by(p_vector);  return true;}  }
class C{  void paintToOffscreen(Graphics g,int x,int y,int w,int h,int maxX,int maxY){  try {    setFlag(ANCESTOR_USING_BUFFER,true);    if ((y + h) < maxY || (x + w) < maxX) {      setFlag(IS_PAINTING_TILE,true);    }    if (getFlag(IS_REPAINTING)) {      paint(g);    } else {      if (!rectangleIsObscured(x,y,w,h)) {        paintComponent(g);        paintBorder(g);      }      paintChildren(g);    }  }  finally {    setFlag(ANCESTOR_USING_BUFFER,false);    setFlag(IS_PAINTING_TILE,false);  }}  }
class C{  final boolean isOnSyncQueue(Node node){  if (node.waitStatus == Node.CONDITION || node.prev == null)   return false;  if (node.next != null)   return true;  return findNodeFromTail(node);}  }
class C{  public XRTreeFrag(int root,XPathContext xctxt){  super(null);  initDTM(root,xctxt);}  }
class C{  @Override public void firePropertyChange(String propertyName,char oldValue,char newValue){}  }
class C{  public static void deregisterMonitorProvider(MonitorProvider<? extends MonitorProviderCfg> monitorProvider){  String monitorName=toLowerCase(monitorProvider.getMonitorInstanceName());  MonitorProvider<?> provider=directoryServer.monitorProviders.remove(monitorName);  if (provider != null) {    try {      DN monitorDN=getMonitorProviderDN(provider);      JMXMBean mBean=directoryServer.mBeans.get(monitorDN);      if (mBean != null) {        mBean.removeMonitorProvider(provider);      }    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  public static boolean verifySLOResponse(LogoutResponse sloResponse,String realm,String remoteEntity,String hostEntity,String hostEntityRole) throws SAML2Exception, SessionException {  String method="verifySLOResponse : ";  boolean needVerifySignature=SAML2Utils.getWantLogoutResponseSigned(realm,hostEntity,hostEntityRole);  if (needVerifySignature == false) {    if (debug.messageEnabled()) {      debug.message(method + "SLOResponse doesn't need to be verified.");    }    return true;  }  Set<X509Certificate> signingCerts;  if (hostEntityRole.equalsIgnoreCase(SAML2Constants.IDP_ROLE)) {    SPSSODescriptorElement spSSODesc=metaManager.getSPSSODescriptor(realm,remoteEntity);    signingCerts=KeyUtil.getVerificationCerts(spSSODesc,remoteEntity,SAML2Constants.SP_ROLE);  } else {    IDPSSODescriptorElement idpSSODesc=metaManager.getIDPSSODescriptor(realm,remoteEntity);    signingCerts=KeyUtil.getVerificationCerts(idpSSODesc,remoteEntity,SAML2Constants.IDP_ROLE);  }  if (!signingCerts.isEmpty()) {    boolean valid=sloResponse.isSignatureValid(signingCerts);    if (debug.messageEnabled()) {      debug.message(method + "Signature is : " + valid);    }    return valid;  } else {    debug.error("Incorrect configuration for Signing Certificate.");    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }}  }
class C{  public void add(RxAction action,Subscription subscription){  Pair<Integer,Subscription> old=mMap.put(action.getType(),getPair(action,subscription));  if (old != null && !old.second.isUnsubscribed())   old.second.unsubscribe();}  }
class C{  public void testDisconnect_NonBlockWithServerServerClosed() throws IOException {  this.channel1.configureBlocking(false);  assertFalse(this.channel1.isBlocking());  connectLocalServer();  this.datagramSocket1.close();  assertTrue(this.channel1.isOpen());  assertTrue(this.channel1.isConnected());  disconnectAfterConnected();}  }
class C{  @Override public void initializeExtendedOperationHandler(PasswordPolicyStateExtendedOperationHandlerCfg config) throws ConfigException, InitializationException {  userFilter=SearchFilter.objectClassPresent();  requestAttributes=newLinkedHashSet("*","+");  DirectoryServer.registerSupportedExtension(OID_PASSWORD_POLICY_STATE_EXTOP,this);}  }
class C{  public void auditAccessSuccess(){  if (!accessAttemptAudited) {    auditAccessAttempt();  }  if (auditEventPublisher.isAuditing(realm,ACCESS_TOPIC,EventName.AM_ACCESS_OUTCOME)) {    final long endTime=currentTimeMillis();    final long elapsedTime=endTime - startTime;    AuditEvent auditEvent=auditEventFactory.accessEvent(realm).forHttpServletRequest(httpServletRequest).timestamp(endTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(EventName.AM_ACCESS_OUTCOME).component(component).response(SUCCESSFUL,"",elapsedTime,MILLISECONDS).userId(userId).request(PLL,method).trackingId(trackingId).toEvent();    auditEventPublisher.tryPublish(ACCESS_TOPIC,auditEvent);    reset();  }}  }
class C{  public void update(int n,byte[] b,int off,int len,ManifestEntryVerifier mev) throws IOException {  if (n != -1) {    if (parsingBlockOrSF) {      baos.write(b,off,n);    } else {      mev.update(b,off,n);    }  } else {    processEntry(mev);  }}  }
class C{  public void removePolicyListener(PolicyListener policyListener){  policyCache.removePolicyListener(policyListener);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.EmploymentIdentityType createEmploymentIdentityType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.EmploymentIdentityTypeImpl();}  }
class C{  public PdfWin(PdfString f){  this(new PdfDictionary());  getPdfObject().put(PdfName.F,f);}  }
class C{  public static boolean isWifiConnected(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo mWifi=connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);  return mWifi != null && mWifi.isConnected();}  }
class C{  public OAuthVerificationException(final String message){  super(message);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.FilterPseudonymsElement createFilterPseudonymsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FilterPseudonymsElementImpl();}  }
class C{  private AuthorizationIdentityRequestControl(final boolean isCritical){  this.isCritical=isCritical;}  }
class C{  protected void findleaks(boolean statusLine,PrintWriter writer,StringManager smClient){  if (!(host instanceof StandardHost)) {    writer.println(smClient.getString("managerServlet.findleaksFail"));    return;  }  String[] results=((StandardHost)host).findReloadedContextMemoryLeaks();  if (results.length > 0) {    if (statusLine) {      writer.println(smClient.getString("managerServlet.findleaksList"));    }    for (    String result : results) {      if ("".equals(result)) {        result="/";      }      writer.println(result);    }  } else   if (statusLine) {    writer.println(smClient.getString("managerServlet.findleaksNone"));  }}  }
class C{  private static void addObjectClass(Map<ObjectClass,String> objectClasses,ByteSequenceReader entryBuffer,int startPos,int endPos){  entryBuffer.position(startPos);  final String ocName=entryBuffer.readStringUtf8(endPos - startPos);  objectClasses.put(DirectoryServer.getSchema().getObjectClass(ocName),ocName);}  }
class C{  public DataBufferByte(int size){  super(STABLE,TYPE_BYTE,size);  data=new byte[size];  bankdata=new byte[1][];  bankdata[0]=data;}  }
class C{  public ThreadDeath(){}  }
class C{  public boolean isLogEnabled(){  return logStatus;}  }
class C{  public void appendHeading(){  appendHeading(LocalizableMessage.EMPTY);}  }
class C{  protected void fixDocBase() throws IOException {  Host host=(Host)context.getParent();  File appBase=host.getAppBaseFile();  String docBase=context.getDocBase();  if (docBase == null) {    String path=context.getPath();    if (path == null) {      return;    }    ContextName cn=new ContextName(path,context.getWebappVersion());    docBase=cn.getBaseName();  }  File file=new File(docBase);  if (!file.isAbsolute()) {    docBase=(new File(appBase,docBase)).getPath();  } else {    docBase=file.getCanonicalPath();  }  file=new File(docBase);  String origDocBase=docBase;  ContextName cn=new ContextName(context.getPath(),context.getWebappVersion());  String pathName=cn.getBaseName();  boolean unpackWARs=true;  if (host instanceof StandardHost) {    unpackWARs=((StandardHost)host).isUnpackWARs();    if (unpackWARs && context instanceof StandardContext) {      unpackWARs=((StandardContext)context).getUnpackWAR();    }  }  boolean docBaseInAppBase=docBase.startsWith(appBase.getPath() + File.separatorChar);  if (docBase.toLowerCase(Locale.ENGLISH).endsWith(".war") && !file.isDirectory()) {    URL war=UriUtil.buildJarUrl(new File(docBase));    if (unpackWARs) {      docBase=ExpandWar.expand(host,war,pathName);      file=new File(docBase);      docBase=file.getCanonicalPath();      if (context instanceof StandardContext) {        ((StandardContext)context).setOriginalDocBase(origDocBase);      }    } else {      ExpandWar.validate(host,war,pathName);    }  } else {    File docDir=new File(docBase);    File warFile=new File(docBase + ".war");    URL war=null;    if (warFile.exists() && docBaseInAppBase) {      war=UriUtil.buildJarUrl(warFile);    }    if (docDir.exists()) {      if (war != null && unpackWARs) {        ExpandWar.expand(host,war,pathName);      }    } else {      if (war != null) {        if (unpackWARs) {          docBase=ExpandWar.expand(host,war,pathName);          file=new File(docBase);          docBase=file.getCanonicalPath();        } else {          docBase=warFile.getCanonicalPath();          ExpandWar.validate(host,war,pathName);        }      }      if (context instanceof StandardContext) {        ((StandardContext)context).setOriginalDocBase(origDocBase);      }    }  }  docBaseInAppBase=docBase.startsWith(appBase.getPath() + File.separatorChar);  if (docBaseInAppBase) {    docBase=docBase.substring(appBase.getPath().length());    docBase=docBase.replace(File.separatorChar,'/');    if (docBase.startsWith("/")) {      docBase=docBase.substring(1);    }  } else {    docBase=docBase.replace(File.separatorChar,'/');  }  context.setDocBase(docBase);}  }
class C{  public BaseID createBaseID(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.BASEID,xml);  if (obj == null) {    return new BaseIDImpl(xml);  } else {    return (BaseID)obj;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgettagname.class,args);}  }
class C{  public char current(){  if (count != 0 && pos < offset + count) {    return array[pos];  }  return DONE;}  }
class C{  private ZonedDateTime resolveInstant(LocalDateTime newDateTime){  return ofInstant(newDateTime,offset,zone);}  }
class C{  private static boolean isSeparator(char ch){  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;}  }
class C{  @Override public NamingEnumeration<Binding> listBindings(Name name) throws NamingException {  while ((!name.isEmpty()) && (name.get(0).length() == 0))   name=name.getSuffix(1);  if (name.isEmpty()) {    return new NamingContextBindingsEnumeration(bindings.values().iterator(),this);  }  NamingEntry entry=bindings.get(name.get(0));  if (entry == null) {    throw new NameNotFoundException(sm.getString("namingContext.nameNotBound",name,name.get(0)));  }  if (entry.type != NamingEntry.CONTEXT) {    throw new NamingException(sm.getString("namingContext.contextExpected"));  }  return ((Context)entry.value).listBindings(name.getSuffix(1));}  }
class C{  public ServiceInformation(){}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.RetrievalMethodType createRetrievalMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.RetrievalMethodTypeImpl();}  }
class C{  public QueryResponseWrapper query(Query toQuery,int limit,long offset) throws IndexParseException, FieldNotIndexedException {  ParsedQuery parsedQuery=ParsedQueryFactory.getParsedQuery(toQuery.getDatabase(),toQuery,queries.getSession());  return queries.query(parsedQuery,limit,offset);}  }
class C{  public static <T>void removeAll(Collection<T> collection,Collection<T> elements){  if (CollectionUtils.isEmpty(collection) || CollectionUtils.isEmpty(elements)) {    return;  }  for (  T element : elements) {    collection.remove(element);  }}  }
class C{  public static void displaySingleComponent(ConsoleApplication app,ManagedObject<?> mo,Collection<PropertyDefinition<?>> c){  String ufn=mo.getManagedObjectPath().getName();  if (ufn == null) {    ufn=mo.getManagedObjectDefinition().getUserFriendlyName().toString();  }  app.println(INFO_DSCFG_HELP_HEADING_COMPONENT.get(ufn));  final AbstractManagedObjectDefinition<?,?> d=mo.getManagedObjectDefinition();  app.println();  app.println(d.getSynopsis());  if (d.getDescription() != null) {    app.println();    app.println(d.getDescription());  }  app.println();  app.println();  displayPropertyOptionKey(app);  app.println();  app.println();  final TableBuilder builder=new TableBuilder();  builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_NAME.get());  builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_OPTIONS.get());  builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_SYNTAX.get());  builder.addSortKey(0);  for (  final PropertyDefinition<?> pd : c) {    builder.startRow();    builder.appendCell(pd.getName());    builder.appendCell(getPropertyOptionSummary(pd));    final PropertyDefinitionUsageBuilder v=new PropertyDefinitionUsageBuilder(false);    builder.appendCell(v.getUsage(pd));  }  builder.print(new TextTablePrinter(app.getErrorStream()));}  }
class C{  public void testValueOfLongMin(){  long longVal=Long.MIN_VALUE;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={-128,0,0,0,0,0,0,0};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  protected void childJustRemovedHook(Object child,BCSChild bcsc){}  }
class C{  private void authzDNCheck(final AuthorizeCallback callback){  final String responseAuthzID=callback.getAuthorizationID();  DN authzDN;  callback.setAuthorized(true);  try {    authzDN=DN.valueOf(responseAuthzID.substring(3));  } catch (  final LocalizedIllegalArgumentException e) {    logger.traceException(e);    setCallbackMsg(ERR_SASL_AUTHZID_INVALID_DN.get(responseAuthzID,e.getMessageObject()));    callback.setAuthorized(false);    return;  }  final DN actualAuthzDN=DirectoryServer.getActualRootBindDN(authzDN);  if (actualAuthzDN != null) {    authzDN=actualAuthzDN;  }  if (!authzDN.equals(authEntry.getName())) {    if (authzDN.isRootDN()) {      authzEntry=null;    } else {      try {        authzEntry=DirectoryServer.getEntry(authzDN);        if (authzEntry == null) {          setCallbackMsg(ERR_SASL_AUTHZID_NO_SUCH_ENTRY.get(authzDN));          callback.setAuthorized(false);          return;        }      } catch (      final DirectoryException e) {        logger.traceException(e);        setCallbackMsg(ERR_SASL_AUTHZID_CANNOT_GET_ENTRY.get(authzDN,e.getMessageObject()));        callback.setAuthorized(false);        return;      }    }    final AuthenticationInfo authInfo=new AuthenticationInfo(authEntry,DirectoryServer.isRootDN(authEntry.getName()));    if (!hasPrivilege(authInfo)) {      callback.setAuthorized(false);    } else {      callback.setAuthorized(hasPermission(authInfo));    }  }}  }
class C{  private void nameCallback(final NameCallback nameCallback){  userName=nameCallback.getDefaultName();  final String lowerUserName=toLowerCase(userName);  if (lowerUserName.startsWith("dn:")) {    DN userDN;    try {      userDN=DN.valueOf(userName.substring(3));    } catch (    final LocalizedIllegalArgumentException e) {      logger.traceException(e);      setCallbackMsg(ERR_SASL_CANNOT_DECODE_USERNAME_AS_DN.get(mechanism,userName,e.getMessageObject()));      return;    }    if (userDN.isRootDN()) {      setCallbackMsg(ERR_SASL_USERNAME_IS_NULL_DN.get(mechanism));      return;    }    final DN rootDN=DirectoryServer.getActualRootBindDN(userDN);    if (rootDN != null) {      userDN=rootDN;    }    getAuthEntry(userDN);  } else {    String entryID=userName;    if (lowerUserName.startsWith("u:")) {      if (lowerUserName.equals("u:")) {        setCallbackMsg(ERR_SASL_ZERO_LENGTH_USERNAME.get(mechanism,mechanism));        return;      }      entryID=userName.substring(2);    }    try {      authEntry=identityMapper.getEntryForID(entryID);    } catch (    final DirectoryException e) {      logger.traceException(e);      setCallbackMsg(ERR_SASLDIGESTMD5_CANNOT_MAP_USERNAME.get(userName,e.getMessageObject()));    }  }}  }
class C{  @Override public void onUIReset(PtrFrameLayout frame){  mScale=1f;  mDrawable.stop();}  }
class C{  public void addAttributeCertificate(X509AttributeCertificateHolder attrCert) throws CMSException {  certs.add(new DERTaggedObject(false,2,attrCert.toASN1Structure()));}  }
class C{  public void addField(MappedMember mm){  fields.add(mm);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataappenddatagetdata.class,args);}  }
class C{  public boolean equals(Object p_test){  if (p_test instanceof URI) {    URI testURI=(URI)p_test;    if (((m_scheme == null && testURI.m_scheme == null) || (m_scheme != null && testURI.m_scheme != null && m_scheme.equals(testURI.m_scheme))) && ((m_userinfo == null && testURI.m_userinfo == null) || (m_userinfo != null && testURI.m_userinfo != null && m_userinfo.equals(testURI.m_userinfo))) && ((m_host == null && testURI.m_host == null) || (m_host != null && testURI.m_host != null && m_host.equals(testURI.m_host)))&& m_port == testURI.m_port && ((m_path == null && testURI.m_path == null) || (m_path != null && testURI.m_path != null && m_path.equals(testURI.m_path))) && ((m_queryString == null && testURI.m_queryString == null) || (m_queryString != null && testURI.m_queryString != null && m_queryString.equals(testURI.m_queryString))) && ((m_fragment == null && testURI.m_fragment == null) || (m_fragment != null && testURI.m_fragment != null && m_fragment.equals(testURI.m_fragment)))) {      return true;    }  }  return false;}  }
class C{  protected void paintBackground(Graphics g,JMenuItem menuItem,Color bgColor){  ButtonModel model=menuItem.getModel();  Color oldColor=g.getColor();  int menuWidth=menuItem.getWidth();  int menuHeight=menuItem.getHeight();  if (menuItem.isOpaque()) {    if (model.isArmed() || (menuItem instanceof JMenu && model.isSelected())) {      g.setColor(bgColor);      g.fillRect(0,0,menuWidth,menuHeight);    } else {      g.setColor(menuItem.getBackground());      g.fillRect(0,0,menuWidth,menuHeight);    }    g.setColor(oldColor);  } else   if (model.isArmed() || (menuItem instanceof JMenu && model.isSelected())) {    g.setColor(bgColor);    g.fillRect(0,0,menuWidth,menuHeight);    g.setColor(oldColor);  }}  }
class C{  private <T extends PluginCfg>DirectoryServerPlugin<T> loadPlugin(String className,Set<PluginType> pluginTypes,T configuration,boolean initialize) throws InitializationException {  try {    PluginCfgDefn definition=PluginCfgDefn.getInstance();    ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    Class<? extends DirectoryServerPlugin> pluginClass=propertyDefinition.loadClass(className,DirectoryServerPlugin.class);    DirectoryServerPlugin<T> plugin=pluginClass.newInstance();    if (initialize) {      plugin.initializeInternal(serverContext,configuration.dn(),pluginTypes,configuration.isInvokeForInternalOperations());      plugin.initializePlugin(pluginTypes,configuration);    } else {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!plugin.isConfigurationAcceptable(configuration,unacceptableReasons)) {        String buffer=Utils.joinAsString(".  ",unacceptableReasons);        throw new InitializationException(ERR_CONFIG_PLUGIN_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),buffer));      }    }    return plugin;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_PLUGIN_CANNOT_INITIALIZE.get(className,configuration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  public void assign(org.omg.DynamicAny.DynAny dyn_any) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("assign",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.assign(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public List<Modification> updateConcatenatedSchemaIfChangesDetected() throws InitializationException {  try {    Set<String> newATs=new LinkedHashSet<>();    Set<String> newOCs=new LinkedHashSet<>();    Set<String> newNFs=new LinkedHashSet<>();    Set<String> newDCRs=new LinkedHashSet<>();    Set<String> newDSRs=new LinkedHashSet<>();    Set<String> newMRUs=new LinkedHashSet<>();    Set<String> newLSs=new LinkedHashSet<>();    generateConcatenatedSchema(newATs,newOCs,newNFs,newDCRs,newDSRs,newMRUs,newLSs);    File concatFile=getConcatenatedSchemaFile();    Set<String> oldATs=new LinkedHashSet<>();    Set<String> oldOCs=new LinkedHashSet<>();    Set<String> oldNFs=new LinkedHashSet<>();    Set<String> oldDCRs=new LinkedHashSet<>();    Set<String> oldDSRs=new LinkedHashSet<>();    Set<String> oldMRUs=new LinkedHashSet<>();    Set<String> oldLSs=new LinkedHashSet<>();    readConcatenatedSchema(concatFile,oldATs,oldOCs,oldNFs,oldDCRs,oldDSRs,oldMRUs,oldLSs);    List<Modification> mods=new LinkedList<>();    compareConcatenatedSchema(oldATs,newATs,attributeTypesType,mods);    compareConcatenatedSchema(oldOCs,newOCs,objectClassesType,mods);    compareConcatenatedSchema(oldNFs,newNFs,nameFormsType,mods);    compareConcatenatedSchema(oldDCRs,newDCRs,ditContentRulesType,mods);    compareConcatenatedSchema(oldDSRs,newDSRs,ditStructureRulesType,mods);    compareConcatenatedSchema(oldMRUs,newMRUs,matchingRuleUsesType,mods);    compareConcatenatedSchema(oldLSs,newLSs,ldapSyntaxesType,mods);    if (!mods.isEmpty()) {      writeConcatenatedSchema();    }    return filterOutConfigSchemaElementFromModifications(mods);  } catch (  InitializationException ie) {    throw ie;  }catch (  Exception e) {    logger.traceException(e);    logger.error(ERR_SCHEMA_ERROR_DETERMINING_SCHEMA_CHANGES,getExceptionMessage(e));    return Collections.emptyList();  }}  }
class C{  public String encryptKey(SessionID key){  try {    return SessionUtils.getEncryptedStorageKey(key);  } catch (  Exception e) {    String message=MessageFormat.format("Failed to create encrypted storage key for:\n" + "Session ID: {0}",key);    throw new IllegalStateException(message,e);  }}  }
class C{  public String toString(){  return toString(true,true);}  }
class C{  public EventSetDescriptor(Class<?> sourceClass,String eventSetName,Class<?> listenerType,String listenerMethodName) throws IntrospectionException {  this(sourceClass,eventSetName,listenerType,new String[]{listenerMethodName},Introspector.ADD_PREFIX + getListenerClassName(listenerType),Introspector.REMOVE_PREFIX + getListenerClassName(listenerType),Introspector.GET_PREFIX + getListenerClassName(listenerType) + "s");  String eventName=NameGenerator.capitalize(eventSetName) + "Event";  Method[] listenerMethods=getListenerMethods();  if (listenerMethods.length > 0) {    Class[] args=getParameterTypes(getClass0(),listenerMethods[0]);    if (!"vetoableChange".equals(eventSetName) && !args[0].getName().endsWith(eventName)) {      throw new IntrospectionException("Method \"" + listenerMethodName + "\" should have argument \""+ eventName+ "\"");    }  }}  }
class C{  public static void cacheResult(Foo foo){  getPersistence().cacheResult(foo);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationcreatedocument07.class,args);}  }
class C{  public static GitHubLicenseEntry fromGitHub(String gitRepo){  return new GitHubLicenseEntry(DEF_LICENSE_NAME,gitRepo,DEF_BRANCH,null,FILE_TXT);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public void mouse_dragged(Point p_point){  if (interactive_state != null && gdi_context != null) {    current_mouse_position=gdi_context.coordinate_transform.screen_to_board(p_point);    StateInteractive return_state=interactive_state.mouse_dragged(current_mouse_position);    if (return_state != interactive_state) {      set_interactive_state(return_state);      repaint();    }  }}  }
class C{  private String addNonce(String url){  if ((url == null) || (nonce == null)) {    return (url);  }  String path=url;  String query="";  String anchor="";  int pound=path.indexOf('#');  if (pound >= 0) {    anchor=path.substring(pound);    path=path.substring(0,pound);  }  int question=path.indexOf('?');  if (question >= 0) {    query=path.substring(question);    path=path.substring(0,question);  }  StringBuilder sb=new StringBuilder(path);  if (query.length() > 0) {    sb.append(query);    sb.append('&');  } else {    sb.append('?');  }  sb.append(Constants.CSRF_NONCE_REQUEST_PARAM);  sb.append('=');  sb.append(nonce);  sb.append(anchor);  return (sb.toString());}  }
class C{  public boolean beginHrefExceptionDisplay(ChildDisplayEvent event){  return true;}  }
class C{  private TBSCertList(int version,AlgorithmIdentifier signature,Name issuer,Date thisUpdate,Date nextUpdate,List<RevokedCertificate> revokedCertificates,Extensions crlExtensions,byte[] encoding){  this.version=version;  this.signature=signature;  this.issuer=issuer;  this.thisUpdate=thisUpdate;  this.nextUpdate=nextUpdate;  this.revokedCertificates=revokedCertificates;  this.crlExtensions=crlExtensions;  this.encoding=encoding;}  }
class C{  public String decode(String pString,String charset) throws DecoderException, UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(decode(pString.getBytes(StringEncodings.US_ASCII)),charset);}  }
class C{  boolean hadAnnotations(){  return hadAnnotations;}  }
class C{  public void signXML(String certAlias) throws SAMLException {  FSUtils.debug.message("FSLogoutNotification.signXML: Called");  if (signed) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSLogoutNotification.signXML: " + "the assertion is already signed.");    }    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"alreadySigned",null);  }  if (certAlias == null || certAlias.length() == 0) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"cannotFindCertAlias",null);  }  try {    XMLSignatureManager manager=XMLSignatureManager.getInstance();    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,null,IFSConstants.ID,this.id,false);    } else     if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,null,IFSConstants.REQUEST_ID,this.getRequestID(),false);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("invalid minor version.");      }    }    signature=XMLUtils.toDOMDocument(signatureString,FSUtils.debug).getDocumentElement();    signed=true;    xmlString=this.toXMLString(true,true);  } catch (  Exception e) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"signFailed",null);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns06.class,args);}  }
class C{  protected static void notifyEntryEvent(String dn,int eventType,boolean cosType){synchronized (objImplListeners) {    if (objImplListeners.isEmpty()) {      return;    }    AMEvent dpEvent=new AMEvent(new AMEvent(dn),eventType);switch (eventType) {case AMEvent.OBJECT_ADDED:      if (cosType) {        if (debug.messageEnabled()) {          debug.message("AMObjectImpl.notifyEntryEvent(..): " + "change/remove cos event!" + dn);        }        notifyAffectedDNs(dn,dpEvent);      }    break;case AMEvent.OBJECT_CHANGED:case AMEvent.OBJECT_REMOVED:  if (cosType) {    if (debug.messageEnabled()) {      debug.message("AMObjectImpl.notifyEntryEvent(..): " + "change/remove cos event!" + dn);    }    notifyAffectedDNs(dn,dpEvent);  } else {    if (debug.messageEnabled()) {      debug.message("AMObjectImpl.notifyEntryEvent(..): " + "change/remove entry event!" + dn);    }    Set objImplSet=(Set)objImplListeners.get(dn.toLowerCase());    if (objImplSet == null) {      return;    }    Iterator itr=((HashSet)((HashSet)objImplSet).clone()).iterator();    while (itr.hasNext()) {      AMObjectImpl dpObjImpl=(AMObjectImpl)itr.next();      dpObjImpl.sendEvents(dpEvent);    }  }break;case AMEvent.OBJECT_RENAMED:if (debug.messageEnabled()) {debug.message("AMObjectImpl.notifyEntryEvent(..): " + "rename entry event!" + dn);}notifyAffectedDNs(dn,dpEvent);break;default :;}}}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException {  String queryParam=request.getQueryString();  if ((queryParam != null) && (queryParam.equalsIgnoreCase("wsdl"))) {    try {      if (wsdl == null) {        InputStream is=servletCtx.getResourceAsStream("/WEB-INF/wsdl/IdentityServices.wsdl");        BufferedReader br=new BufferedReader(new InputStreamReader(is));        StringBuilder sb=new StringBuilder(1000);        String line;        while ((line=br.readLine()) != null) {          sb.append(line).append("\n");        }        wsdl=sb.toString();        int start=wsdl.indexOf("REPLACE_WITH_ACTUAL_URL");        if (start != -1) {          String nwsdl=wsdl.substring(0,start);          nwsdl+=request.getRequestURL().toString();          if (!nwsdl.endsWith("/IdentityServices")) {            nwsdl+="/IdentityServices";          }          wsdl=nwsdl + wsdl.substring(start + 23);        }      }      response.setContentType("text/xml");      PrintWriter out=response.getWriter();      out.write(wsdl);      out.flush();      out.close();    } catch (    IOException ioe) {    }  } else {    response.setCharacterEncoding("UTF-8");    super.doGet(request,response);  }}  }
class C{  @Deprecated protected boolean filter(String name){  return filter(name,true) || filter(name,false);}  }
class C{  public static void dsconfig(String... args){  String[] fullArgs=new String[args.length + 11];  fullArgs[0]="-h";  fullArgs[1]=hostname;  fullArgs[2]="-p";  fullArgs[3]=String.valueOf(ports.serverAdminPort);  fullArgs[4]="-D";  fullArgs[5]="cn=Directory Manager";  fullArgs[6]="-w";  fullArgs[7]="password";  fullArgs[8]="-n";  fullArgs[9]="--noPropertiesFile";  fullArgs[10]="-X";  System.arraycopy(args,0,fullArgs,11,args.length);  assertEquals(DSConfig.main(fullArgs,System.out,System.err),0);}  }
class C{  protected void resetSizeAt(int index){  sizes[index]=0;  doReset=true;}  }
class C{  private MutableBigInteger divideLongMagnitude(long ldivisor,MutableBigInteger quotient){  MutableBigInteger rem=new MutableBigInteger(new int[intLen + 1]);  System.arraycopy(value,offset,rem.value,1,intLen);  rem.intLen=intLen;  rem.offset=1;  int nlen=rem.intLen;  int limit=nlen - 2 + 1;  if (quotient.value.length < limit) {    quotient.value=new int[limit];    quotient.offset=0;  }  quotient.intLen=limit;  int[] q=quotient.value;  int shift=Long.numberOfLeadingZeros(ldivisor);  if (shift > 0) {    ldivisor<<=shift;    rem.leftShift(shift);  }  if (rem.intLen == nlen) {    rem.offset=0;    rem.value[0]=0;    rem.intLen++;  }  int dh=(int)(ldivisor >>> 32);  long dhLong=dh & LONG_MASK;  int dl=(int)(ldivisor & LONG_MASK);  for (int j=0; j < limit; j++) {    int qhat=0;    int qrem=0;    boolean skipCorrection=false;    int nh=rem.value[j + rem.offset];    int nh2=nh + 0x80000000;    int nm=rem.value[j + 1 + rem.offset];    if (nh == dh) {      qhat=~0;      qrem=nh + nm;      skipCorrection=qrem + 0x80000000 < nh2;    } else {      long nChunk=(((long)nh) << 32) | (nm & LONG_MASK);      if (nChunk >= 0) {        qhat=(int)(nChunk / dhLong);        qrem=(int)(nChunk - (qhat * dhLong));      } else {        long tmp=divWord(nChunk,dh);        qhat=(int)(tmp & LONG_MASK);        qrem=(int)(tmp >>> 32);      }    }    if (qhat == 0)     continue;    if (!skipCorrection) {      long nl=rem.value[j + 2 + rem.offset] & LONG_MASK;      long rs=((qrem & LONG_MASK) << 32) | nl;      long estProduct=(dl & LONG_MASK) * (qhat & LONG_MASK);      if (unsignedLongCompare(estProduct,rs)) {        qhat--;        qrem=(int)((qrem & LONG_MASK) + dhLong);        if ((qrem & LONG_MASK) >= dhLong) {          estProduct-=(dl & LONG_MASK);          rs=((qrem & LONG_MASK) << 32) | nl;          if (unsignedLongCompare(estProduct,rs))           qhat--;        }      }    }    rem.value[j + rem.offset]=0;    int borrow=mulsubLong(rem.value,dh,dl,qhat,j + rem.offset);    if (borrow + 0x80000000 > nh2) {      divaddLong(dh,dl,rem.value,j + 1 + rem.offset);      qhat--;    }    q[j]=qhat;  }  if (shift > 0)   rem.rightShift(shift);  quotient.normalize();  rem.normalize();  return rem;}  }
class C{  public TagField createArtworkField(byte[] data,String mimeType){  AbstractID3v2Frame frame=createFrame(getFrameAndSubIdFromGenericKey(FieldKey.COVER_ART).getFrameId());  FrameBodyAPIC body=(FrameBodyAPIC)frame.getBody();  body.setObjectValue(DataTypes.OBJ_PICTURE_DATA,data);  body.setObjectValue(DataTypes.OBJ_PICTURE_TYPE,PictureTypes.DEFAULT_ID);  body.setObjectValue(DataTypes.OBJ_MIME_TYPE,mimeType);  body.setObjectValue(DataTypes.OBJ_DESCRIPTION,"");  return frame;}  }
class C{  public IdCacheStats(String name){  nameOfCache=name;  stats=Stats.getInstance(name);}  }
class C{  @Override public Principal authenticate(X509Certificate[] certs){  Principal authenticatedUser=null;  String username=null;  if (certs != null && certs.length > 0) {    username=certs[0].getSubjectDN().getName();  }  for (  Realm realm : realms) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("combinedRealm.authStart",username,realm.getClass().getName()));    }    authenticatedUser=realm.authenticate(certs);    if (authenticatedUser == null) {      if (log.isDebugEnabled()) {        log.debug(sm.getString("combinedRealm.authFail",username,realm.getClass().getName()));      }    } else {      if (log.isDebugEnabled()) {        log.debug(sm.getString("combinedRealm.authSuccess",username,realm.getClass().getName()));      }      break;    }  }  return authenticatedUser;}  }
class C{  public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {    return path;  }  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  public static boolean deleteSite(SSOToken ssoToken,String siteName) throws SMSException, SSOException, ConfigurationException {  boolean deleted=false;  ServiceConfig sc=getRootSiteConfig(ssoToken);  if (sc != null) {    ServiceConfig cfg=sc.getSubConfig(siteName);    if (cfg != null) {      Set svrs=listServers(ssoToken,siteName);      if ((svrs != null) && !svrs.isEmpty()) {        removeServersFromSite(ssoToken,siteName,svrs);      }      sc.removeSubConfig(siteName);      deleted=true;    }  }  return deleted;}  }
class C{  public synchronized void dropActionChanged(DropTargetDragEvent dtde){  if (!active)   return;  if (dtListener != null)   dtListener.dropActionChanged(dtde);  updateAutoscroll(dtde.getLocation());}  }
class C{  public void test_isEqual$B$B(){  assertTrue("isEqual is not correct",MessageDigest.isEqual(AR1,AR2));}  }
class C{  public void recycle(){  clear();}  }
class C{  private void prepareAndStart(){  cleanup();  this.getJobFromBackend().setHandler(null);}  }
class C{  public CsrfException(){  super(400,"bad_request",null);}  }
class C{  public Object clone(){  try {    X509CertSelector copy=(X509CertSelector)super.clone();    if (subjectAlternativeNames != null) {      copy.subjectAlternativeNames=cloneSet(subjectAlternativeNames);      copy.subjectAlternativeGeneralNames=cloneSet(subjectAlternativeGeneralNames);    }    if (pathToGeneralNames != null) {      copy.pathToNames=cloneSet(pathToNames);      copy.pathToGeneralNames=cloneSet(pathToGeneralNames);    }    return copy;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e.toString(),e);  }}  }
class C{  void updateIDFFEntityConfig(String realm,String cotName,Set trustedProviders) throws COTException {  String classMethod="COTManager:updateIDFFEntityConfig";  IDFFCOTUtils idffCotUtils=new IDFFCOTUtils(callerSession);  String entityId=null;  if (trustedProviders != null && !trustedProviders.isEmpty()) {    for (Iterator iter=trustedProviders.iterator(); iter.hasNext(); ) {      entityId=(String)iter.next();      try {        idffCotUtils.updateEntityConfig(realm,cotName,entityId);      } catch (      IDFFMetaException idfe) {        throw new COTException(idfe);      }catch (      JAXBException jbe) {        debug.error(classMethod,jbe);        String[] data={jbe.getMessage(),cotName,entityId,realm};        LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_COT_DESCRIPTOR,data);        throw new COTException(jbe);      }    }  }}  }
class C{  public void loadSchemaFiles(List schemaFiles) throws ConfiguratorException {  try {    for (Iterator i=schemaFiles.iterator(); i.hasNext(); ) {      String file=(String)i.next();      int idx=file.lastIndexOf("/");      String schemaFile=(idx != -1) ? file.substring(idx + 1) : file;      Object[] params={schemaFile};      SetupProgress.reportStart("emb.loadingschema",params);      LdifUtils.createSchemaFromLDIF(basedir + "/" + schemaFile,ld.getConnection());      SetupProgress.reportEnd("emb.success",null);    }  } catch (  IOException e) {    Debug.getInstance(SetupConstants.DEBUG_NAME).error("AMSetupDSConfig.loadSchemaFiles:failed",e);    SetupProgress.reportEnd("emb.failed",null);    InstallLog.getInstance().write("AMSetupDSConfig.loadSchemaFiles:failed",e);    throw new ConfiguratorException("configurator.ldiferror",null,locale);  }}  }
class C{  public void finish() throws IOException {  ensureOpen();  if (finished) {    return;  }  if (current != null) {    closeEntry();  }  long off=written;  for (  XEntry xentry : xentries)   writeCEN(xentry);  writeEND(off,written - off);  finished=true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element firstNode;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Attr setAttr;  Node setNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  firstNode=(Element)elementList.item(0);  domesticAttr=doc.createAttribute("domestic");  domesticAttr.setValue("Yes");  setAttr=firstNode.setAttributeNode(domesticAttr);  elementList=doc.getElementsByTagName("address");  testNode=elementList.item(2);  attributes=testNode.getAttributes();{    boolean success=false;    try {      setNode=attributes.setNamedItem(domesticAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  public void test_MultipleAccessToOneTable() throws SQLException {  for (int i=0; i < numThreads; i++) {    threadPool.runTask(createTask1(i));  }}  }
class C{  private void initialize(Object[] sorted){  keys.removeAllElements();  data.removeAllElements();  int n=sorted.length;  for (int i=0; i < n; i+=2) {    keys.addElement(sorted[i]);    data.addElement(sorted[i + 1]);  }}  }
class C{  protected boolean logFoundJars(Vector v,String desc){  if ((null == v) || (v.size() < 1))   return false;  boolean errors=false;  logMsg("#---- BEGIN Listing XML-related jars in: " + desc + " ----");  for (int i=0; i < v.size(); i++) {    Hashtable subhash=(Hashtable)v.elementAt(i);    for (Enumeration keys=subhash.keys(); keys.hasMoreElements(); ) {      Object key=keys.nextElement();      String keyStr=(String)key;      try {        if (keyStr.startsWith(ERROR)) {          errors=true;        }        logMsg(keyStr + "=" + subhash.get(keyStr));      } catch (      Exception e) {        errors=true;        logMsg("Reading-" + key + "= threw: "+ e.toString());      }    }  }  logMsg("#----- END Listing XML-related jars in: " + desc + " -----");  return errors;}  }
class C{  public int indexOf(ElementInfo child){  ArrayList children=this.children;  if (children != null) {    return children.indexOf(child);  }  return -1;}  }
class C{  public static String createPath(String... elements){  StringBuilder result=new StringBuilder();  for (  String element : elements) {    result.append(File.pathSeparator);    result.append(element);  }  return result.toString();}  }
class C{  @Inject public SetToJsonBytesConverter(@Named("cts-json-object-mapper") ObjectMapper mapper){  this.mapper=mapper;}  }
class C{  @SuppressWarnings("unused") static <T>Promise<List<T>> blockingPromiseList(Class<T> componentType){  return new BlockingPromise<>();}  }
class C{  public PushMessageChallengeResponsePredicate(byte[] secret,String challenge,String location){  Reject.ifNull(secret,challenge,location);  this.location=location;  this.answer=new HS256Helper(secret,challenge).answerAsString();}  }
class C{  public Node elementAt(int i){  if (null == m_map)   return null;  return m_map[i];}  }
class C{  Parsed(){}  }
class C{  public static void write(FileDescriptor fd,byte[] bytes,int byteOffset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(bytes.length,byteOffset,byteCount);  if (byteCount == 0) {    return;  }  try {    while (byteCount > 0) {      int bytesWritten=Libcore.os.write(fd,bytes,byteOffset,byteCount);      byteCount-=bytesWritten;      byteOffset+=bytesWritten;    }  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getCustomerDao() : null;}  }
class C{  private static void updateNetwork(WifiManager wifiManager,WifiConfiguration config){  Integer foundNetworkID=findNetworkInExistingConfig(wifiManager,config.SSID);  if (foundNetworkID != null) {    Log.i(TAG,"Removing old configuration for network " + config.SSID);    wifiManager.removeNetwork(foundNetworkID);    wifiManager.saveConfiguration();  }  int networkId=wifiManager.addNetwork(config);  if (networkId >= 0) {    if (wifiManager.enableNetwork(networkId,true)) {      Log.i(TAG,"Associating to network " + config.SSID);      wifiManager.saveConfiguration();    } else {      Log.w(TAG,"Failed to enable network " + config.SSID);    }  } else {    Log.w(TAG,"Unable to add network " + config.SSID);  }}  }
class C{  public RootPrivilegeChangeListener(){  defaultRootPrivileges=Privilege.getDefaultRootPrivileges();}  }
class C{  private static LambdaForm invokeHandleForm(MethodType mtype,boolean customized,int which){  boolean isCached;  if (!customized) {    mtype=mtype.basicType();    isCached=true;  } else {    isCached=false;  }  boolean isLinker, isGeneric;  String debugName;switch (which) {case MethodTypeForm.LF_EX_LINKER:    isLinker=true;  isGeneric=false;debugName="invokeExact_MT";break;case MethodTypeForm.LF_EX_INVOKER:isLinker=false;isGeneric=false;debugName="exactInvoker";break;case MethodTypeForm.LF_GEN_LINKER:isLinker=true;isGeneric=true;debugName="invoke_MT";break;case MethodTypeForm.LF_GEN_INVOKER:isLinker=false;isGeneric=true;debugName="invoker";break;default :throw new InternalError();}LambdaForm lform;if (isCached) {lform=mtype.form().cachedLambdaForm(which);if (lform != null) return lform;}final int THIS_MH=0;final int CALL_MH=THIS_MH + (isLinker ? 0 : 1);final int ARG_BASE=CALL_MH + 1;final int OUTARG_LIMIT=ARG_BASE + mtype.parameterCount();final int INARG_LIMIT=OUTARG_LIMIT + (isLinker && !customized ? 1 : 0);int nameCursor=OUTARG_LIMIT;final int MTYPE_ARG=customized ? -1 : nameCursor++;final int CHECK_TYPE=nameCursor++;final int CHECK_CUSTOM=(CUSTOMIZE_THRESHOLD >= 0) ? nameCursor++ : -1;final int LINKER_CALL=nameCursor++;MethodType invokerFormType=mtype.invokerType();if (isLinker) {if (!customized) invokerFormType=invokerFormType.appendParameterTypes(MemberName.class);} else {invokerFormType=invokerFormType.invokerType();}Name[] names=arguments(nameCursor - INARG_LIMIT,invokerFormType);assert (names.length == nameCursor) : Arrays.asList(mtype,customized,which,nameCursor,names.length);if (MTYPE_ARG >= INARG_LIMIT) {assert (names[MTYPE_ARG] == null);BoundMethodHandle.SpeciesData speciesData=BoundMethodHandle.speciesData_L();names[THIS_MH]=names[THIS_MH].withConstraint(speciesData);NamedFunction getter=speciesData.getterFunction(0);names[MTYPE_ARG]=new Name(getter,names[THIS_MH]);}MethodType outCallType=mtype.basicType();Object[] outArgs=Arrays.copyOfRange(names,CALL_MH,OUTARG_LIMIT,Object[].class);Object mtypeArg=(customized ? mtype : names[MTYPE_ARG]);if (!isGeneric) {names[CHECK_TYPE]=new Name(NF_checkExactType,names[CALL_MH],mtypeArg);} else {names[CHECK_TYPE]=new Name(NF_checkGenericType,names[CALL_MH],mtypeArg);outArgs[0]=names[CHECK_TYPE];}if (CHECK_CUSTOM != -1) {names[CHECK_CUSTOM]=new Name(NF_checkCustomized,outArgs[0]);}names[LINKER_CALL]=new Name(outCallType,outArgs);lform=new LambdaForm(debugName,INARG_LIMIT,names);if (isLinker) lform.compileToBytecode();if (isCached) lform=mtype.form().setCachedLambdaForm(which,lform);return lform;}  }
class C{  private void select_all_in_region(){  PlaPointInt p1=corner1.round();  PlaPointInt p2=corner2.round();  ShapeTileBox b=new ShapeTileBox(Math.min(p1.v_x,p2.v_x),Math.min(p1.v_y,p2.v_y),Math.max(p1.v_x,p2.v_x),Math.max(p1.v_y,p2.v_y));  int select_layer;  if (i_brd.itera_settings.select_on_all_visible_layers) {    select_layer=-1;  } else {    select_layer=i_brd.itera_settings.layer_no;  }  Set<BrdItem> found_items=i_brd.itera_settings.item_selection_filter.filter(r_brd.overlapping_items(b,select_layer));  if (i_brd.itera_settings.select_on_all_visible_layers) {    Set<BrdItem> visible_items=new TreeSet<BrdItem>();    Iterator<BrdItem> it=found_items.iterator();    while (it.hasNext()) {      BrdItem curr_item=it.next();      for (int i=curr_item.first_layer(); i <= curr_item.last_layer(); ++i) {        if (i_brd.gdi_context.get_layer_visibility(i) > 0) {          visible_items.add(curr_item);          break;        }      }    }    found_items=visible_items;  }  boolean something_found=(found_items.size() > 0);  if (something_found) {    if (return_state instanceof StateSelectedItem) {      ((StateSelectedItem)return_state).get_item_list().addAll(found_items);    } else {      return_state=StateSelectedItem.get_instance(found_items,return_state,i_brd,actlog);    }  } else {    i_brd.screen_messages.set_status_message(resources.getString("nothing_selected"));  }}  }
class C{  private void waitForConnectionToRs(String testCase,FakeReplicationServer rs) throws Exception {  int nsec=-1;  do {    nsec++;    if (nsec == 10) {      fail(testCase + ": timeout waiting for domain connection to fake RS after " + nsec+ " seconds.");    }    Thread.sleep(1000);  } while (!rs.isHandshakeOk());}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  if (changeSupport == null) {    changeSupport=new PropertyChangeSupport(this);  }  changeSupport.addPropertyChangeListener(listener);}  }
class C{  private Node enq(final Node node){  for (; ; ) {    Node t=tail;    if (t == null) {      if (compareAndSetHead(new Node()))       tail=head;    } else {      node.prev=t;      if (compareAndSetTail(t,node)) {        t.next=node;        return t;      }    }  }}  }
class C{  public boolean isPreformatted(){  return (this == PRE || this == TEXTAREA);}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  support.removePropertyChangeListener(listener);}  }
class C{  public synchronized void addConsumer(ImageConsumer ic){  if (proxies == null) {    proxies=new Hashtable();  }  if (!proxies.containsKey(ic)) {    ImageFilter imgf=filter.getFilterInstance(ic);    proxies.put(ic,imgf);    src.addConsumer(imgf);  }}  }
class C{  public int findHeaderPositionUnder(int x,int y){  for (int i=0; i < mHeaderRects.size(); i++) {    Rect rect=mHeaderRects.get(mHeaderRects.keyAt(i));    if (rect.contains(x,y)) {      int position=mHeaderRects.keyAt(i);      if (mVisibilityAdapter == null || mVisibilityAdapter.isPositionVisible(position)) {        return position;      }    }  }  return -1;}  }
class C{  public Dimension preferredLayoutSize(Container target){synchronized (target.getTreeLock()) {    Dimension dim=new Dimension(0,0);    boolean ltr=target.getComponentOrientation().isLeftToRight();    Component c=null;    if ((c=getChild(EAST,ltr)) != null) {      Dimension d=c.getPreferredSize();      dim.width+=d.width + hgap;      dim.height=Math.max(d.height,dim.height);    }    if ((c=getChild(WEST,ltr)) != null) {      Dimension d=c.getPreferredSize();      dim.width+=d.width + hgap;      dim.height=Math.max(d.height,dim.height);    }    if ((c=getChild(CENTER,ltr)) != null) {      Dimension d=c.getPreferredSize();      dim.width+=d.width;      dim.height=Math.max(d.height,dim.height);    }    if ((c=getChild(NORTH,ltr)) != null) {      Dimension d=c.getPreferredSize();      dim.width=Math.max(d.width,dim.width);      dim.height+=d.height + vgap;    }    if ((c=getChild(SOUTH,ltr)) != null) {      Dimension d=c.getPreferredSize();      dim.width=Math.max(d.width,dim.width);      dim.height+=d.height + vgap;    }    Insets insets=target.getInsets();    dim.width+=insets.left + insets.right;    dim.height+=insets.top + insets.bottom;    return dim;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("XML","1.0");  assertTrue("throw_True",state);}  }
class C{  protected int length(){  int length=0;  for (  IRenderer child : childRenderers) {    if (child instanceof TextRenderer) {      length+=((TextRenderer)child).lineLength();    }  }  return length;}  }
class C{  public static Cookie createSessionCookie(Context context,String sessionId,boolean secure){  SessionCookieConfig scc=context.getServletContext().getSessionCookieConfig();  Cookie cookie=new Cookie(SessionConfig.getSessionCookieName(context),sessionId);  cookie.setMaxAge(scc.getMaxAge());  cookie.setComment(scc.getComment());  if (context.getSessionCookieDomain() == null) {    if (scc.getDomain() != null) {      cookie.setDomain(scc.getDomain());    }  } else {    cookie.setDomain(context.getSessionCookieDomain());  }  if (scc.isSecure() || secure) {    cookie.setSecure(true);  }  if (scc.isHttpOnly() || context.getUseHttpOnly()) {    cookie.setHttpOnly(true);  }  String contextPath=context.getSessionCookiePath();  if (contextPath == null || contextPath.length() == 0) {    contextPath=scc.getPath();  }  if (contextPath == null || contextPath.length() == 0) {    contextPath=context.getEncodedPath();  }  if (context.getSessionCookiePathUsesTrailingSlash()) {    if (!contextPath.endsWith("/")) {      contextPath=contextPath + "/";    }  } else {    if (contextPath.length() == 0) {      contextPath="/";    }  }  cookie.setPath(contextPath);  return cookie;}  }
class C{  @Override public void finish() throws Exception {}  }
class C{  public void testShiftRightNegZeroes(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,0,0,0,0,0,0,0,0,0};  int aSign=-1;  int number=68;  byte rBytes[]={-25,-4,121,-80,20,-70,109,48};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public Charset charset(){  return charset != null ? Charset.forName(charset) : null;}  }
class C{  static public void assertEquals(long expected,long actual){  assertEquals(null,expected,actual);}  }
class C{  public PdfOCProperties(PdfDocument document){  this(new PdfDictionary().makeIndirect(document));}  }
class C{  protected RowView createTableRow(Element elem){  Object o=elem.getAttributes().getAttribute(StyleConstants.NameAttribute);  if (o == HTML.Tag.TR) {    return new RowView(elem);  }  return null;}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  private void removeSubtree(SSOToken token,String entryDN,boolean softDelete) throws AMException, SSOException {  int type=AMObject.UNKNOWN_OBJECT_TYPE;  try {    Guid guid=new Guid(entryDN);    PersistentObject po=UMSObject.getObjectHandle(internalToken,guid);    SearchControl control=new SearchControl();    control.setSearchScope(SearchControl.SCOPE_SUB);    String searchFilter="(|(objectclass=*)(objectclass=ldapsubEntry))";    List list=new ArrayList();    int entryRDNs=DN.valueOf(entryDN).size();    int maxRDNCount=entryRDNs;    SearchResults children=po.getChildren(searchFilter,control);    while (children.hasMoreElements()) {      PersistentObject object=children.next();      DN dn=DN.valueOf(object.getDN());      if (debug.messageEnabled()) {        debug.message("DirectoryServicesImpl.removeEntry(): " + "found child: " + object.getDN());      }      int count=dn.size();      if (count > maxRDNCount) {        maxRDNCount=count;      }      list.add(dn);    }    if (debug.messageEnabled()) {      debug.message("DirectoryServicesImpl.removeEntry(): max " + "RDNs: " + maxRDNCount);    }    int len=list.size();    for (int i=maxRDNCount; i >= entryRDNs; i--) {      for (int j=0; j < len; j++) {        DN dn=(DN)list.get(j);        if (dn.size() == i) {          if (debug.messageEnabled()) {            debug.message("DirectoryServicesImpl." + "removeEntry(): del " + dn.toString());          }          String rfcDN=dn.toString();          type=AMObject.UNKNOWN_OBJECT_TYPE;          try {            type=getObjectType(internalToken,rfcDN);          } catch (          AMException ae) {            Guid g=new Guid(rfcDN);            UMSObject.removeObject(token,g);          }          if (type != AMObject.UNKNOWN_OBJECT_TYPE && type != AMObject.UNDETERMINED_OBJECT_TYPE) {            try {              removeSingleEntry(token,rfcDN,type,softDelete);            } catch (            AMPreCallBackException amp) {              debug.error("DirectoryServicesImpl." + "removeSubTree: Aborting delete of: " + rfcDN + " due to pre-callback exception",amp);            }          }          list.remove(j);          j--;          len--;        }      }    }  } catch (  AccessRightsException e) {    debug.error("DirectoryServicesImpl.removeEntry() Insufficient " + "access rights to remove entry: " + entryDN,e);    throw new AMException(token,"460");  }catch (  EntryNotFoundException e) {    String entry=getEntryName(e);    debug.error("DirectoryServicesImpl.removeEntry() Entry not found: " + entry,e);    String msgid=getEntryNotFoundMsgID(type);    Object args[]={entry};    String locale=CommonUtils.getUserLocale(token);    throw new AMException(AMSDKBundle.getString(msgid,args,locale),msgid,args);  }catch (  UMSException e) {    debug.error("DirectoryServicesImpl.removeEntry() Unable to remove: " + " Internal error occurred: ",e);    throw new AMException(token,"325",e);  }}  }
class C{  public boolean hasExpired(long maxtime){  long delta=System.currentTimeMillis() - lastHeardFrom;  return delta > maxtime;}  }
class C{  protected void storeConnectorAttribtues(PrintWriter aWriter,int indent,Object bean,StoreDescription aDesc) throws Exception {  if (aDesc.isAttributes()) {    printAttributes(aWriter,indent,false,bean,aDesc);  }}  }
class C{  @Override public String toString(){  String condition=acceptLarger ? ">=" : "<";  return super.toString() + "(" + condition+ size+ ")";}  }
class C{  private void sendRegistrationToServer(String token){}  }
class C{  private void resetIgnoreValueCase(){  if (properties != null) {    Set values=(Set)properties.get(VALUE_CASE_INSENSITIVE);    if ((values != null) && !values.isEmpty()) {      for (Iterator iter=values.iterator(); iter.hasNext(); ) {        String value=(String)iter.next();        if (IGNORE_VALUE_CASE_FALSE_STRING.equalsIgnoreCase(value.trim())) {          ignoreValueCase=false;        } else {          ignoreValueCase=IGNORE_VALUE_CASE_DEFAULT;        }      }    } else {      ignoreValueCase=IGNORE_VALUE_CASE_DEFAULT;    }  }  if (debug.messageEnabled()) {    debug.message("SessionPropertyCondition.resetIgnoreValueCase():" + "ignoreValueCase= " + ignoreValueCase);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode11.class,args);}  }
class C{  public ProtocolException(){  super();}  }
class C{  protected void installComboBoxModelListeners(ComboBoxModel model){  if (model != null && (listDataListener=createListDataListener()) != null) {    model.addListDataListener(listDataListener);  }}  }
class C{  public void testGetInstance01() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException, CertPathBuilderException {  try {    CertPathBuilder.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathBuilder.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  CertPathBuilder cerPB;  for (int i=0; i < validValues.length; i++) {    cerPB=CertPathBuilder.getInstance(validValues[i]);    assertEquals("Incorrect type",cerPB.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",cerPB.getProvider(),mProv);    checkResult(cerPB);  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthMenuItemUI();}  }
class C{  public void acceptInput(String input){  if (currentPrompt != null) {    if (localEchoEnabled) {      context.getForWhom().sendRawMessage(prefix.getPrefix(context) + input);    }    for (    ConversationCanceller canceller : cancellers) {      if (canceller.cancelBasedOnInput(context,input)) {        abandon(new ConversationAbandonedEvent(this,canceller));        return;      }    }    currentPrompt=currentPrompt.acceptInput(context,input);    outputNextPrompt();  }}  }
class C{  private static int hexToBinary(final byte b) throws IOException {  final int i=Character.digit((char)b,16);  if (i == -1) {    throw new IOException("Invalid quoted printable encoding: not a valid hex digit: " + b);  }  return i;}  }
class C{  @Deprecated public static int parseLevel(String s){  if ((s == null) || (s.length() < 1))   return -1;  try {    return Integer.parseInt(s);  } catch (  NumberFormatException e) {  }  if (s.length() < 1)   return -1;  if ("SILENT".startsWith(s.toUpperCase()))   return SILENT; else   if ("BRIEF".startsWith(s.toUpperCase()))   return BRIEF; else   if ("VERBOSE".startsWith(s.toUpperCase()))   return VERBOSE;  return -1;}  }
class C{  @Override public void customize(ConfigurableEmbeddedServletContainer container){  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);  mappings.add("html","text/html;charset=utf-8");  mappings.add("json","text/html;charset=utf-8");  container.setMimeMappings(mappings);  setLocationForStaticAssets(container);}  }
class C{  public SQLIntegrityConstraintViolationException(String reason){  super(reason,null,0);}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  String toString(boolean includePrivateCredentials){  String s=ResourcesMgr.getString("Subject.");  String suffix="";synchronized (principals) {    Iterator<Principal> pI=principals.iterator();    while (pI.hasNext()) {      Principal p=pI.next();      suffix=suffix + ResourcesMgr.getString(".Principal.") + p.toString()+ ResourcesMgr.getString("NEWLINE");    }  }synchronized (pubCredentials) {    Iterator<Object> pI=pubCredentials.iterator();    while (pI.hasNext()) {      Object o=pI.next();      suffix=suffix + ResourcesMgr.getString(".Public.Credential.") + o.toString()+ ResourcesMgr.getString("NEWLINE");    }  }  if (includePrivateCredentials) {synchronized (privCredentials) {      Iterator<Object> pI=privCredentials.iterator();      while (pI.hasNext()) {        try {          Object o=pI.next();          suffix+=ResourcesMgr.getString(".Private.Credential.") + o.toString() + ResourcesMgr.getString("NEWLINE");        } catch (        SecurityException se) {          suffix+=ResourcesMgr.getString(".Private.Credential.inaccessible.");          break;        }      }    }  }  return s + suffix;}  }
class C{  protected boolean scrollTop(TextView widget,Spannable buffer){  final Layout layout=widget.getLayout();  if (getTopLine(widget) >= 0) {    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(0));    return true;  }  return false;}  }
class C{  public static Set wrapInSet(Object obj){  Set set=null;  if (obj != null) {    set=new HashSet(2);    set.add(obj);  } else {    set=Collections.EMPTY_SET;  }  return set;}  }
class C{  public void removeListDataListener(ListDataListener l){  listenerList.remove(ListDataListener.class,l);}  }
class C{  public boolean isSupported(String feature,String version){  return false;}  }
class C{  @Override public String toString(){  return aciString;}  }
class C{  public boolean contributesToDomainState(){  return true;}  }
class C{  public UndoableEdit remove(int where,int nitems) throws BadLocationException {  if (where + nitems >= count) {    throw new BadLocationException("Invalid range",count);  }  String removedString=getString(where,nitems);  UndoableEdit edit=new RemoveUndo(where,removedString);  replace(where,nitems,empty,0,0);  if (marks != null) {    updateMarksForRemove(where,nitems);  }  return edit;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AuthenticatingAuthorityElement createAuthenticatingAuthorityElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthenticatingAuthorityElementImpl();}  }
class C{  static void useSubentriesRequestControl(Connection connection) throws LdapException {  if (isSupported(SubentriesRequestControl.OID)) {    final SearchRequest request=Requests.newSearchRequest("dc=example,dc=com",SearchScope.WHOLE_SUBTREE,"cn=*Class of Service","cn","subtreeSpecification").addControl(SubentriesRequestControl.newControl(true,true));    final ConnectionEntryReader reader=connection.search(request);    final LDIFEntryWriter writer=new LDIFEntryWriter(System.out);    try {      while (reader.hasNext()) {        if (reader.isEntry()) {          final SearchResultEntry entry=reader.readEntry();          writer.writeEntry(entry);        }      }      writer.close();    } catch (    final LdapException e) {      System.err.println(e.getMessage());      System.exit(e.getResult().getResultCode().intValue());    }catch (    final SearchResultReferenceIOException e) {      System.err.println("Got search reference(s): " + e.getReference().getURIs());    }catch (    final IOException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());    }  } else {    System.err.println("SubentriesRequestControl not supported");  }}  }
class C{  public boolean containsSegment(LineSegment other){  return other != null && containsPoint(other.startPoint) && containsPoint(other.endPoint);}  }
class C{  public static void doAsPrivilege(final String methodName,final Servlet targetObject,final Class<?>[] targetType,final Object[] targetArguments) throws Exception {  doAsPrivilege(methodName,targetObject,targetType,targetArguments,null);}  }
class C{  private static void deleteDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    return;  }  directory.deleteOnExit();  if (!isSymlink(directory)) {    cleanDirectoryOnExit(directory);  }}  }
class C{  public void testScaleNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-10;  int cScale=-10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertTrue("incorrect scale",aNumber.scale() == cScale);}  }
class C{  protected boolean engineVerify(byte[] sigBytes,int offset,int length) throws SignatureException {  return checkSignature(sigBytes,offset,length);}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  void initFromCameraParameters(OpenCamera camera){  Camera.Parameters parameters=camera.getCamera().getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  int displayRotation=display.getRotation();  int cwRotationFromNaturalToDisplay;switch (displayRotation) {case Surface.ROTATION_0:    cwRotationFromNaturalToDisplay=0;  break;case Surface.ROTATION_90:cwRotationFromNaturalToDisplay=90;break;case Surface.ROTATION_180:cwRotationFromNaturalToDisplay=180;break;case Surface.ROTATION_270:cwRotationFromNaturalToDisplay=270;break;default :if (displayRotation % 90 == 0) {cwRotationFromNaturalToDisplay=(360 + displayRotation) % 360;} else {throw new IllegalArgumentException("Bad rotation: " + displayRotation);}}Log.i(TAG,"Display at: " + cwRotationFromNaturalToDisplay);int cwRotationFromNaturalToCamera=camera.getOrientation();Log.i(TAG,"Camera at: " + cwRotationFromNaturalToCamera);if (camera.getFacing() == CameraFacing.FRONT) {cwRotationFromNaturalToCamera=(360 - cwRotationFromNaturalToCamera) % 360;Log.i(TAG,"Front camera overriden to: " + cwRotationFromNaturalToCamera);}cwRotationFromDisplayToCamera=(360 + cwRotationFromNaturalToCamera - cwRotationFromNaturalToDisplay) % 360;Log.i(TAG,"Final display orientation: " + cwRotationFromDisplayToCamera);if (camera.getFacing() == CameraFacing.FRONT) {Log.i(TAG,"Compensating rotation for front camera");cwNeededRotation=(360 - cwRotationFromDisplayToCamera) % 360;} else {cwNeededRotation=cwRotationFromDisplayToCamera;}Log.i(TAG,"Clockwise rotation from display to camera: " + cwNeededRotation);Point theScreenResolution=new Point();display.getSize(theScreenResolution);screenResolution=theScreenResolution;Log.i(TAG,"Screen resolution in current orientation: " + screenResolution);cameraResolution=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);Log.i(TAG,"Camera resolution: " + cameraResolution);bestPreviewSize=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);Log.i(TAG,"Best available preview size: " + bestPreviewSize);boolean isScreenPortrait=screenResolution.x < screenResolution.y;boolean isPreviewSizePortrait=bestPreviewSize.x < bestPreviewSize.y;if (isScreenPortrait == isPreviewSizePortrait) {previewSizeOnScreen=bestPreviewSize;} else {previewSizeOnScreen=new Point(bestPreviewSize.y,bestPreviewSize.x);}Log.i(TAG,"Preview size on screen: " + previewSizeOnScreen);}  }
class C{  private boolean matchesFilter(Entry e){  try {    return filter.matchesEntry(e);  } catch (  DirectoryException ex) {    return false;  }}  }
class C{  boolean appendMarker(Node<K,V> f){  return casNext(f,new Node<K,V>(f));}  }
class C{  public static void registerInitializationCompletedListener(InitializationCompletedListener listener){  directoryServer.initializationCompletedListeners.add(listener);}  }
class C{  public void addSessionListener(SessionListener listener,boolean force) throws SessionException {  if (!force && sessionState != SessionState.VALID) {    throw new SessionException(SessionBundle.rbName,"invalidSessionState",null);  }  localSessionEventListeners.add(listener);}  }
class C{  public Result createResult() throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESULT);  if (object == null) {    return new ResultImpl();  } else {    return (Result)object;  }}  }
class C{  public static boolean isPropertyInherited(int property){  return property >= 0 && property <= MAX_INHERITED_PROPERTY_ID && INHERITED_PROPERTIES[property];}  }
class C{  public boolean verify(X509Certificate cert,Provider sigProvider) throws NoSuchAlgorithmException, CertificateExpiredException, CertificateNotYetValidException, CMSException {  Time signingTime=getSigningTime();  if (signingTime != null) {    cert.checkValidity(signingTime.getDate());  }  return doVerify(cert.getPublicKey(),sigProvider);}  }
class C{  public void testMinUnequal2(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  String b="94488478231212478987482988429808779810457634781384756794987";  int bScale=41;  String c="94488478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.min(bNumber));}  }
class C{  @Override public Foo fetchByUuid_C_Last(String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  int count=countByUuid_C(uuid,companyId);  if (count == 0) {    return null;  }  List<Foo> list=findByUuid_C(uuid,companyId,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  protected void drainChannel(final SelectionKey key,ObjectReader reader) throws Exception {  reader.access();  ReadableByteChannel channel=(ReadableByteChannel)key.channel();  int count=-1;  buffer.clear();  SocketAddress saddr=null;  if (channel instanceof SocketChannel) {    while ((count=channel.read(buffer)) > 0) {      buffer.flip();      if (buffer.hasArray())       reader.append(buffer.array(),0,count,false); else       reader.append(buffer,count,false);      buffer.clear();      if (reader.hasPackage())       break;    }  } else   if (channel instanceof DatagramChannel) {    DatagramChannel dchannel=(DatagramChannel)channel;    saddr=dchannel.receive(buffer);    buffer.flip();    if (buffer.hasArray())     reader.append(buffer.array(),0,buffer.limit() - buffer.position(),false); else     reader.append(buffer,buffer.limit() - buffer.position(),false);    buffer.clear();    count=reader.hasPackage() ? 1 : -1;  }  int pkgcnt=reader.count();  if (count < 0 && pkgcnt == 0) {    remoteEof(key);    return;  }  ChannelMessage[] msgs=pkgcnt == 0 ? ChannelData.EMPTY_DATA_ARRAY : reader.execute();  registerForRead(key,reader);  for (int i=0; i < msgs.length; i++) {    if (ChannelData.sendAckAsync(msgs[i].getOptions()))     sendAck(key,(WritableByteChannel)channel,Constants.ACK_COMMAND,saddr);    try {      if (Logs.MESSAGES.isTraceEnabled()) {        try {          Logs.MESSAGES.trace("NioReplicationThread - Received msg:" + new UniqueId(msgs[i].getUniqueId()) + " at "+ new java.sql.Timestamp(System.currentTimeMillis()));        } catch (        Throwable t) {        }      }      getCallback().messageDataReceived(msgs[i]);      if (ChannelData.sendAckSync(msgs[i].getOptions()))       sendAck(key,(WritableByteChannel)channel,Constants.ACK_COMMAND,saddr);    } catch (    RemoteProcessException e) {      if (log.isDebugEnabled())       log.error(sm.getString("nioReplicationTask.process.clusterMsg.failed"),e);      if (ChannelData.sendAckSync(msgs[i].getOptions()))       sendAck(key,(WritableByteChannel)channel,Constants.FAIL_ACK_COMMAND,saddr);    }catch (    Exception e) {      log.error(sm.getString("nioReplicationTask.process.clusterMsg.failed"),e);      if (ChannelData.sendAckSync(msgs[i].getOptions()))       sendAck(key,(WritableByteChannel)channel,Constants.FAIL_ACK_COMMAND,saddr);    }    if (getUseBufferPool()) {      BufferPool.getBufferPool().returnBuffer(msgs[i].getMessage());      msgs[i].setMessage(null);    }  }  if (count < 0) {    remoteEof(key);    return;  }}  }
class C{  private HashMapEntry<K,V>[] doubleCapacity(){  HashMapEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    return oldTable;  }  int newCapacity=oldCapacity * 2;  HashMapEntry<K,V>[] newTable=makeTable(newCapacity);  if (size == 0) {    return newTable;  }  for (int j=0; j < oldCapacity; j++) {    HashMapEntry<K,V> e=oldTable[j];    if (e == null) {      continue;    }    int highBit=e.hash & oldCapacity;    HashMapEntry<K,V> broken=null;    newTable[j | highBit]=e;    for (HashMapEntry<K,V> n=e.next; n != null; e=n, n=n.next) {      int nextHighBit=n.hash & oldCapacity;      if (nextHighBit != highBit) {        if (broken == null)         newTable[j | nextHighBit]=n; else         broken.next=n;        broken=e;        highBit=nextHighBit;      }    }    if (broken != null)     broken.next=null;  }  return newTable;}  }
class C{  @NeovimHandler("IntellijOnWrite") public void intellijOnWrite(String path){  ApplicationManager.getApplication().invokeAndWait(null,ModalityState.any());}  }
class C{  @Override public int compareTo(ArtComponent p_other){  int me_more=smd_pin_count - p_other.smd_pin_count;  if (me_more > 0)   return 1; else   if (me_more < 0)   return -1; else   return brd_component.id_no - p_other.brd_component.id_no;}  }
class C{  @Override public void close() throws SQLException {  if (isClosed()) {    return;  }  try {    try {      if (_conn != null) {        _conn.removeTrace(this);        _conn=null;      }      final List<AbandonedTrace> resultSets=getTrace();      if (resultSets != null) {        final ResultSet[] set=resultSets.toArray(new ResultSet[resultSets.size()]);        for (        final ResultSet element : set) {          element.close();        }        clearTrace();      }      if (_stmt != null) {        _stmt.close();      }    } catch (    final SQLException e) {      handleException(e);    }  }  finally {    _closed=true;    _stmt=null;  }}  }
class C{  public ReplicationServerHandler(Session session,int queueSize,ReplicationServer replicationServer,int rcvWindowSize){  super(session,queueSize,replicationServer,rcvWindowSize);}  }
class C{  public static void main(String[] args){  final int exitCode=configMain(args,System.out,System.err);  if (exitCode != SUCCESS) {    System.exit(filterExitCode(exitCode));  }}  }
class C{  private void flushViewDirtyRegion(Graphics g,Rectangle dirty){  JComponent view=(JComponent)getView();  if (dirty != null && dirty.width > 0 && dirty.height > 0) {    dirty.x+=view.getX();    dirty.y+=view.getY();    Rectangle clip=g.getClipBounds();    if (clip == null) {      g.setClip(0,0,getWidth(),getHeight());    }    g.clipRect(dirty.x,dirty.y,dirty.width,dirty.height);    clip=g.getClipBounds();    if (clip.width > 0 && clip.height > 0) {      paintView(g);    }  }}  }
class C{  public AbstractString(String identifier,AbstractTagFrameBody frameBody,String value){  super(identifier,frameBody,value);}  }
class C{  public void testCase15(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={0};  int aSign=1;  int bSign=0;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  try {    aNumber.remainder(bNumber);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  public void unregister(Class<?> service,Object provider){  ArrayList<ServiceUnregisterEvent> unregisteredEvents=new ArrayList<ServiceUnregisterEvent>();synchronized (providers) {    Iterator<Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>>> it=providers.entrySet().iterator();    try {      while (it.hasNext()) {        Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>> entry=it.next();        if (entry.getKey() != service) {          continue;        }        Iterator<RegisteredServiceProvider<?>> it2=entry.getValue().iterator();        try {          while (it2.hasNext()) {            RegisteredServiceProvider<?> registered=it2.next();            if (registered.getProvider() == provider) {              it2.remove();              unregisteredEvents.add(new ServiceUnregisterEvent(registered));            }          }        } catch (        NoSuchElementException e) {        }        if (entry.getValue().size() == 0) {          it.remove();        }      }    } catch (    NoSuchElementException e) {    }  }  for (  ServiceUnregisterEvent event : unregisteredEvents) {    Bukkit.getServer().getPluginManager().callEvent(event);  }}  }
class C{  protected boolean isDefaultManager(StandardManager smanager){  if (!"SESSIONS.ser".equals(smanager.getPathname()) || (smanager.getMaxActiveSessions() != -1)) {    return false;  }  return true;}  }
class C{  public Mp4TrackField(String id,ByteBuffer data) throws UnsupportedEncodingException {  super(id,data);}  }
class C{  public void addFirst(E e){  if (e == null)   throw new NullPointerException();  elements[head=(head - 1) & (elements.length - 1)]=e;  if (head == tail)   doubleCapacity();}  }
class C{  protected boolean testUnlessCondition(){  if (unlessCondition == null || "".equals(unlessCondition)) {    return true;  }  return getProject().getProperty(unlessCondition) == null;}  }
class C{  private float[] calculateShiftToPositionBBoxOfPointsAt(float left,float top,List<Point> points){  double minX=Double.MAX_VALUE;  double maxY=-Double.MAX_VALUE;  for (  Point point : points) {    minX=Math.min(point.getX(),minX);    maxY=Math.max(point.getY(),maxY);  }  float dx=(float)(left - minX);  float dy=(float)(top - maxY);  return new float[]{dx,dy};}  }
class C{  public long skip(long n) throws IOException {  return in.skip(n);}  }
class C{  static ReplayPromise<Boolean> replayPromiseBoolean(final Duration timeout,final long time){  return new ReplayPromiseImpl<>(timeout,time);}  }
class C{  public ParameterBlock add(short s){  return add(new Short(s));}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  public final BufferedImage filter(BufferedImage src,BufferedImage dst){  if (src == null) {    throw new NullPointerException("src image is null");  }  if (src == dst) {    throw new IllegalArgumentException("src image cannot be the " + "same as the dst image");  }  boolean needToConvert=false;  ColorModel srcCM=src.getColorModel();  ColorModel dstCM;  BufferedImage origDst=dst;  if (srcCM instanceof IndexColorModel) {    IndexColorModel icm=(IndexColorModel)srcCM;    src=icm.convertToIntDiscrete(src.getRaster(),false);    srcCM=src.getColorModel();  }  if (dst == null) {    dst=createCompatibleDestImage(src,null);    dstCM=srcCM;    origDst=dst;  } else {    dstCM=dst.getColorModel();    if (srcCM.getColorSpace().getType() != dstCM.getColorSpace().getType()) {      needToConvert=true;      dst=createCompatibleDestImage(src,null);      dstCM=dst.getColorModel();    } else     if (dstCM instanceof IndexColorModel) {      dst=createCompatibleDestImage(src,null);      dstCM=dst.getColorModel();    }  }  if (ImagingLib.filter(this,src,dst) == null) {    throw new ImagingOpException("Unable to convolve src image");  }  if (needToConvert) {    ColorConvertOp ccop=new ColorConvertOp(hints);    ccop.filter(dst,origDst);  } else   if (origDst != dst) {    java.awt.Graphics2D g=origDst.createGraphics();    try {      g.drawImage(dst,0,0,null);    }  finally {      g.dispose();    }  }  return origDst;}  }
class C{  public synchronized StringBuffer insert(int index,char[] chars,int start,int length){  insert0(index,chars,start,length);  return this;}  }
class C{  public ObligationsImpl(String xml) throws XACMLException {  Document document=XMLUtils.toDOMDocument(xml,XACMLSDKUtils.debug);  if (document != null) {    Element rootElement=document.getDocumentElement();    processElement(rootElement);  } else {    XACMLSDKUtils.debug.error("ResponseImpl.processElement(): invalid XML input");    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("errorObtainingElement"));  }}  }
class C{  public static OAuth2BearerWWWAuthenticateHeader valueOf(final String string){  if (string != null) {    try {      return new OAuth2BearerWWWAuthenticateHeader(OAuth2Error.valueOfWWWAuthenticateHeader(string));    } catch (    final IllegalArgumentException e) {    }  }  return new OAuth2BearerWWWAuthenticateHeader();}  }
class C{  @Override public void onInflate(final Activity activity,final AttributeSet attrs,final Bundle savedInstanceState){  delegate.onInflate(activity,attrs,savedInstanceState);}  }
class C{  private void writeNewline() throws IOException {  writer.write(options.getNewline());}  }
class C{  private long overflowFree(long delay){  Delayed head=(Delayed)super.getQueue().peek();  if (head != null) {    long headDelay=head.getDelay(NANOSECONDS);    if (headDelay < 0 && (delay - headDelay < 0))     delay=Long.MAX_VALUE + headDelay;  }  return delay;}  }
class C{  public static String match(String self,String pattern) throws Exception {  return match(self,pattern,-1);}  }
class C{  String formatRomanNumerals(int num){  return formatRomanNumerals(0,num);}  }
class C{  @Inject public XacmlRouterProvider(ResourceApiVersionBehaviourManager versionBehaviourManager,@Named("InvalidRealmNames") Set<String> invalidRealms){  this.versionBehaviourManager=versionBehaviourManager;  this.invalidRealmNames=invalidRealms;}  }
class C{  public void insertRow(final int row,final Vector rowData){  this.dataVector.insertElementAt(rowData,row);  justifyRows(row,row + 1);  fireTableRowsInserted(row,row);}  }
class C{  public boolean containsValue(Object value){  return contains(value);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.ResourceAccessStatementType createResourceAccessStatementType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.ResourceAccessStatementTypeImpl();}  }
class C{  public static void printAsHex(int perLine,String prefix,String delimiter,byte[] data){  for (int i=0; i < data.length; i++) {    String tail=Integer.toHexString(0x000000ff & data[i]);    if (tail.length() == 1) {      tail="0" + tail;    }    System.out.print(prefix + "0x" + tail+ delimiter);    if (((i + 1) % perLine) == 0) {      System.out.println("");    }  }  System.out.println("");}  }
class C{  public String addImport(String namespace){  imports.add(namespace);  return "";}  }
class C{  @SuppressWarnings("deprecation") public void resize(Dimension d){  resize(d.width,d.height);}  }
class C{  public boolean isEnabledAt(int index){  return pages.get(index).isEnabled();}  }
class C{  public boolean removeAll(Collection<?> c){  Objects.requireNonNull(c);  boolean modified=false;  if (size() > c.size()) {    for (Iterator<?> i=c.iterator(); i.hasNext(); )     modified|=remove(i.next());  } else {    for (Iterator<?> i=iterator(); i.hasNext(); ) {      if (c.contains(i.next())) {        i.remove();        modified=true;      }    }  }  return modified;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.ExtensionsType createExtensionsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.ExtensionsTypeImpl();}  }
class C{  private int epochDayToEpochMonth(int epochDay){  int ndx=Arrays.binarySearch(hijrahEpochMonthStartDays,epochDay);  if (ndx < 0) {    ndx=-ndx - 2;  }  return ndx;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String bundleName=getStringOptionValue(IArgument.RESOURCE_BUNDLE_NAME);  String localeName=getStringOptionValue(IArgument.RESOURCE_BUNDLE_LOCALE);  try {    String[] params={bundleName,localeName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_RESOURCE_BUNDLE",params);    ResourceBundle rb=ISResourceBundle.getResourceBundle(adminSSOToken,bundleName,localeName);    IOutput outputWriter=getOutputWriter();    if (rb != null) {      for (Enumeration e=rb.getKeys(); e.hasMoreElements(); ) {        String key=(String)e.nextElement();        outputWriter.printlnMessage(key + "=" + rb.getString(key));      }      outputWriter.printlnMessage(getResourceString("resourcebundle-returned"));      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_GET_RESOURCE_BUNDLE",params);    } else {      outputWriter.printlnMessage(getResourceString("resourcebundle-not-found"));      String[] args={bundleName,localeName,"resource bundle not found"};      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_GET_RESOURCE_BUNDLE",args);      throw new CLIException(getResourceString("resourcebundle-not-found"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  } catch (  SSOException e) {    String[] args={bundleName,localeName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_GET_RESOURCE_BUNDLE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  MissingResourceException e) {    String[] args={bundleName,localeName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_GET_RESOURCE_BUNDLE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void write(String s){  write(s,0,s.length());}  }
class C{  boolean isPrivate(){  return Scope.PRIVATE.equals(scope);}  }
class C{  public void afterEvaluation(ELContext context,String expression){}  }
class C{  public TagField createField(Artwork artwork) throws FieldDataInvalidException {  try {    char[] testdata=Base64Coder.encode(createMetadataBlockDataPicture(artwork).getRawContent());    String base64image=new String(testdata);    TagField imageTagField=createField(VorbisCommentFieldKey.METADATA_BLOCK_PICTURE,base64image);    return imageTagField;  } catch (  UnsupportedEncodingException uee) {    throw new RuntimeException(uee);  }}  }
class C{  long divide(long v,MutableBigInteger quotient){  if (v == 0)   throw new ArithmeticException("BigInteger divide by zero");  if (intLen == 0) {    quotient.intLen=quotient.offset=0;    return 0;  }  if (v < 0)   v=-v;  int d=(int)(v >>> 32);  quotient.clear();  if (d == 0)   return divideOneWord((int)v,quotient) & LONG_MASK; else {    return divideLongMagnitude(v,quotient).toLong();  }}  }
class C{  public javax.sip.address.URI createURI(String uri) throws ParseException {  if (uri == null)   throw new NullPointerException("null arg");  try {    URLParser urlParser=new URLParser(uri);    String scheme=urlParser.peekScheme();    if (scheme == null)     throw new ParseException("bad scheme",0);    if (scheme.equalsIgnoreCase("sip") || scheme.equalsIgnoreCase("sips")) {      return this.createSipURI(uri);    } else     if (scheme.equalsIgnoreCase("tel")) {      return this.createTelURL(uri);    }    if (!SCHEME_PATTERN.matcher(scheme).matches()) {      throw new ParseException("the scheme " + scheme + " from the following uri "+ uri+ " doesn't match ALPHA *(ALPHA / DIGIT / \"+\" / \"-\" / \".\" ) from RFC3261",0);    }  } catch (  ParseException ex) {    throw new ParseException(ex.getMessage(),0);  }  return new gov.nist.javax.sip.address.GenericURI(uri);}  }
class C{  @Inject public ListApplicationTypes(ApplicationServiceFactory applicationServiceFactory){  super(applicationServiceFactory);}  }
class C{  public static boolean isConfiguration(SchemaElement fileElement){  String fileName=getElementSchemaFile(fileElement);  if (fileName != null) {    return configurationSchemaFileNames.contains(fileName);  }  String xOrigin=getElementOrigin(fileElement);  return xOrigin != null && configurationSchemaOrigins.contains(xOrigin);}  }
class C{  private boolean noEvents(){  for (int i=0; i < NUM_PRIORITIES; i++) {    if (queues[i].head != null) {      return false;    }  }  return true;}  }
class C{  public InputMethodEvent(Component source,int id,long when,AttributedCharacterIterator text,int committedCharacterCount,TextHitInfo caret,TextHitInfo visiblePosition){  super(source,id);  if (id < INPUT_METHOD_FIRST || id > INPUT_METHOD_LAST) {    throw new IllegalArgumentException("id outside of valid range");  }  if (id == CARET_POSITION_CHANGED && text != null) {    throw new IllegalArgumentException("text must be null for CARET_POSITION_CHANGED");  }  this.when=when;  this.text=text;  int textLength=0;  if (text != null) {    textLength=text.getEndIndex() - text.getBeginIndex();  }  if (committedCharacterCount < 0 || committedCharacterCount > textLength) {    throw new IllegalArgumentException("committedCharacterCount outside of valid range");  }  this.committedCharacterCount=committedCharacterCount;  this.caret=caret;  this.visiblePosition=visiblePosition;}  }
class C{  public static Foo fetchByUuid_C_First(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_C_First(uuid,companyId,orderByComparator);}  }
class C{  public int nextOffset(float wrappingWidth){  return nextOffset(wrappingWidth,limit,false);}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfBoolean makeIndirect(PdfDocument document){  return (PdfBoolean)super.makeIndirect(document);}  }
class C{  private void generateBinarySecurityToken(Object credential) throws DSTException {  try {    SecurityTokenManagerClient manager=new SecurityTokenManagerClient(credential);    if (certAlias == null) {      certAlias=SystemPropertiesManager.get("com.sun.identity.liberty.ws.wsc.certalias");    }    manager.setCertAlias(certAlias);    token=manager.getX509CertificateToken();    token.setWSFVersion(wsfVersion);  } catch (  Exception e) {    DSTUtils.debug.error("DSTClient:generateBinarySecurityToken:" + "Error in generating binary security token.",e);    throw new DSTException(e);  }}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("TransactionIdControl(id=");  buffer.append(transactionId);  buffer.append(")");}  }
class C{  private void loadAndInstallPasswordStorageScheme(String className,PasswordStorageSchemeCfg configuration) throws InitializationException {  PasswordStorageScheme<? extends PasswordStorageSchemeCfg> schemeClass;  schemeClass=loadPasswordStorageScheme(className,configuration,true);  DN configEntryDN=configuration.dn();  storageSchemes.put(configEntryDN,schemeClass);  DirectoryServer.registerPasswordStorageScheme(configEntryDN,schemeClass);}  }
class C{  public static boolean equals(short[] a,short a2[]){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length)   return false;  for (int i=0; i < length; i++)   if (a[i] != a2[i])   return false;  return true;}  }
class C{  public String convertOrgNameToRealmName(String orgName){  return DNMapper.orgNameToRealmName(orgName);}  }
class C{  public void readBoolean() throws IOException {  if (tag != ASN1Constants.TAG_BOOLEAN) {    throw expected("boolean");  }  if (length != 1) {    throw new ASN1Exception("Wrong length for ASN.1 boolean at [" + tagOffset + "]");  }  readContent();}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  private int handleCC(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index + 2,1,"I","E","H") && !contains(value,index + 2,2,"HU")) {    if ((index == 1 && charAt(value,index - 1) == 'A') || contains(value,index - 1,5,"UCCEE","UCCES")) {      result.append("KS");    } else {      result.append('X');    }    index+=3;  } else {    result.append('K');    index+=2;  }  return index;}  }
class C{  @SuppressWarnings("unused") public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  String subConfigName=(String)getDisplayFieldValue(TF_EVENT_HANDLER_NAME);  if (StringUtils.isBlank(subConfigName)) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,ERROR_MESSAGE,"message.missing.name");    forwardTo();  }  AbstractAuditModel model=(AbstractAuditModel)getModel();  try {    AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);    String schemaName=(String)getPageSessionAttribute(AUDIT_HANDLER_TYPE);    @SuppressWarnings("unchecked") Map<String,Set<String>> values=ps.getAttributeValues(model.getEventHandlerAttributeNames(schemaName));    model.createEventHandler(subConfigName,schemaName,values);    backToProfileViewBean();  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,ERROR_MESSAGE,e.getMessage());    forwardTo();  }}  }
class C{  @Deprecated public void addAdvices(ConditionDecision decision){  if (decision != null) {    Map<String,Set<String>> otherAdvices=decision.getAdvice();    if (otherAdvices != null && !otherAdvices.isEmpty()) {      advice.putAll(otherAdvices);    }  }}  }
class C{  public static Fragment5 newInstance(int sectionNumber){  Fragment5 fragment=new Fragment5();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  private boolean isSimilarSignature(Method possiblyMatchingMethod,String desiredMethodName,Class<?>[] desiredParamTypes){  return possiblyMatchingMethod.getName().equals(desiredMethodName) && match(possiblyMatchingMethod.getParameterTypes(),desiredParamTypes);}  }
class C{  public void run(){  runWorker(this);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof QueuedJobCount);}  }
class C{  public boolean addAll(int index,Collection<? extends E> c){  rangeCheckForAdd(index);  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacityInternal(size + numNew);  int numMoved=size - index;  if (numMoved > 0)   System.arraycopy(elementData,index,elementData,index + numNew,numMoved);  System.arraycopy(a,0,elementData,index,numNew);  size+=numNew;  return numNew != 0;}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public StateInteractive autoroute(ThreadStoppable p_thread){  boolean saved_board_read_only=i_brd.set_board_read_only(true);  String start_message=resources.getString("autoroute") + " " + resources.getString("stop_message");  i_brd.screen_messages.set_status_message(start_message);  Integer not_found_count=0;  Integer found_count=0;  Collection<BrdItem> autoroute_item_list=new LinkedList<BrdItem>();  for (  BrdItem curr_item : items_list) {    if (!(curr_item instanceof BrdConnectable))     continue;    for (int index=0; index < curr_item.net_count(); ++index) {      if (curr_item.get_unconnected_set(curr_item.get_net_no(index)).isEmpty())       continue;      autoroute_item_list.add(curr_item);    }  }  int items_to_go_count=autoroute_item_list.size();  i_brd.screen_messages.set_interactive_autoroute_info(found_count,not_found_count,items_to_go_count);  items_list.clear();  boolean ratsnest_hidden_before=i_brd.get_ratsnest().hide();  for (  BrdItem curr_item : autoroute_item_list) {    if (is_stop_requested(p_thread))     break;    if (curr_item.net_count() != 1)     continue;    boolean contains_plane=false;    RuleNet route_net=r_brd.brd_rules.nets.get(curr_item.get_net_no(0));    if (route_net != null) {      contains_plane=route_net.contains_plane();      i_brd.userPrintln(classname + "autoroute: net " + route_net.name);    }    int via_costs;    if (contains_plane)     via_costs=i_brd.itera_settings.autoroute_settings.get_plane_via_costs(); else     via_costs=i_brd.itera_settings.autoroute_settings.get_via_costs();    r_brd.changed_area_clear();    ArtResult autoroute_result;    try {      autoroute_result=r_brd.autoroute(curr_item,i_brd.itera_settings,via_costs,p_thread);    } catch (    Exception exc) {      autoroute_result=ArtResult.EXCEPTION;      i_brd.userPrintln(classname + "autoroute",exc);    }    if (autoroute_result == ArtResult.ROUTED) {      ++found_count;      i_brd.repaint();    } else     if (autoroute_result != ArtResult.ALREADY_CONNECTED) {      ++not_found_count;    }    --items_to_go_count;    i_brd.screen_messages.set_interactive_autoroute_info(found_count,not_found_count,items_to_go_count);  }  i_brd.screen_messages.clear();  String curr_message;  if (is_stop_requested(p_thread)) {    curr_message=resources.getString("interrupted");  } else {    curr_message=resources.getString("completed");  }  String end_message=resources.getString("autoroute") + " " + curr_message+ ": "+ found_count.toString()+ " "+ resources.getString("connections_found")+ ", "+ not_found_count.toString()+ " "+ resources.getString("connections_not_found");  i_brd.screen_messages.set_status_message(end_message);  i_brd.set_board_read_only(saved_board_read_only);  actlog_start_scope(LogfileScope.AUTOROUTE_SELECTED);  i_brd.update_ratsnest();  if (!ratsnest_hidden_before) {    i_brd.get_ratsnest().show();  }  return return_state;}  }
class C{  public boolean isClosed(){  return this.closed;}  }
class C{  protected boolean declAlreadyDeclared(String prefix){  int startDecls=m_contextIndexes.peek();  java.util.Vector prefixMappings=m_prefixMappings;  int nDecls=prefixMappings.size();  for (int i=startDecls; i < nDecls; i+=2) {    String prefixDecl=(String)prefixMappings.elementAt(i);    if (prefixDecl == null)     continue;    if (prefixDecl.equals(prefix))     return true;  }  return false;}  }
class C{  @Deprecated public static void initDatabase(String cqlPath,Session session) throws IOException {  logger.warn("Initing database from CQL file: " + cqlPath);  InputStream cqlStream=Utils.class.getResourceAsStream(cqlPath);  String cql=IOUtils.toString(cqlStream);  String[] statements=cql.split("\\Q;\\E");  for (  String statement : statements) {    statement=statement.trim();    statement=statement.replaceAll("\\Q\n\\E"," ");    if (!statement.equals("") && !statement.startsWith("//")) {      logger.info("Executing CQL statement: " + statement);      session.execute(statement);    }  }}  }
class C{  static int addOne(int[] a,int offset,int mlen,int carry){  offset=a.length - 1 - mlen- offset;  long t=(a[offset] & LONG_MASK) + (carry & LONG_MASK);  a[offset]=(int)t;  if ((t >>> 32) == 0)   return 0;  while (--mlen >= 0) {    if (--offset < 0) {      return 1;    } else {      a[offset]++;      if (a[offset] != 0)       return 0;    }  }  return 1;}  }
class C{  public static <C extends ConfigurationClient,S extends Configuration>CreateSubCommandHandler<C,S> create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,OptionalRelationDefinition<C,S> r) throws ArgumentException {  return new CreateSubCommandHandler<>(parser,p,r,null,p.child(r));}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf).append("LDAP Modification").append(EOL);  buffer.append(indentBuf);  buffer.append("  Modification Type:  ").append(modificationType);  buffer.append(" (").append(modificationType.intValue()).append(")");  buffer.append(EOL);  buffer.append("  Attribute:");  buffer.append(EOL);  attribute.toString(buffer,indent + 4);}  }
class C{  private void simulateEntryAdd(Entry entry,ConfigurationRepository configRepository) throws IOException {  ArgumentCaptor<ConfigAddListener> registeredListener=ArgumentCaptor.forClass(ConfigAddListener.class);  verify(configRepository).registerAddListener(eq(entry.getName().parent()),registeredListener.capture());  registeredListener.getValue().configAddIsAcceptable(entry,new LocalizableMessageBuilder());}  }
class C{  private BackupProtos.Resource packIcon(int dpi,Bitmap icon){  BackupProtos.Resource res=new BackupProtos.Resource();  res.dpi=dpi;  res.data=Utilities.flattenBitmap(icon);  return res;}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public int size(){  return m.size();}  }
class C{  private void loadAndInstallNotificationHandler(String className,AccountStatusNotificationHandlerCfg configuration) throws InitializationException {  AccountStatusNotificationHandler<? extends AccountStatusNotificationHandlerCfg> handlerClass;  handlerClass=loadNotificationHandler(className,configuration,true);  DN configEntryDN=configuration.dn();  notificationHandlers.put(configEntryDN,handlerClass);  DirectoryServer.registerAccountStatusNotificationHandler(configEntryDN,handlerClass);}  }
class C{  public int enumerate(Thread[] threads,boolean recurse){  return enumerateGeneric(threads,recurse,0,true);}  }
class C{  public void testIdentityStringIdentityScope() throws Exception {  IdentityScope s=IdentityScope.getSystemScope();  Identity i=new IdentityStub("iii2",s);  assertNotNull(i);  assertEquals("iii2",i.getName());  assertSame(s,i.getScope());  assertSame(i,s.getIdentity(i.getName()));}  }
class C{  public void insert_component_obstacle(PlaArea p_area,int p_layer,int p_clearance_class,ItemFixState p_fixed_state){  if (p_area == null) {    System.out.println("BasicBoard.insert_component_obstacle: p_area is null");    return;  }  BrdAreaObstacleComp obs=new BrdAreaObstacleComp(p_area,p_layer,PlaVectorInt.ZERO,0,false,p_clearance_class,0,0,null,p_fixed_state,this);  insert_item(obs);}  }
class C{  private Attribute createAttribute(String name,Collection<? extends Object> values){  AttributeBuilder builder=new AttributeBuilder(name);  builder.addAllStrings(values);  return builder.toAttribute();}  }
class C{  public JKInvalidUserException(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.AuthenticationQueryElement createAuthenticationQueryElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.AuthenticationQueryElementImpl();}  }
class C{  public String toString(){  StringBuffer out=new StringBuffer(50);  out.append("Encoding infos content:\n");  Set<String> set=content.keySet();  for (  String key : set) {    Object val=content.get(key);    out.append("\t");    out.append(key);    out.append(" : ");    out.append(val);    out.append("\n");  }  return out.toString().substring(0,out.length() - 1);}  }
class C{  public static void deregisterInternalPlugin(InternalDirectoryServerPlugin plugin){  directoryServer.pluginConfigManager.deregisterInternalPlugin(plugin);}  }
class C{  private void updateError(CSN csn){  try {    remotePendingChanges.commit(csn);  } catch (  NoSuchElementException e) {    if (logger.isTraceEnabled()) {      logger.trace("LDAPReplicationDomain.updateError: Unable to find remote " + "pending change for CSN %s",csn);    }  }}  }
class C{  public static double content(Pnt[] simplex){  Pnt[] matrix=new Pnt[simplex.length];  for (int i=0; i < matrix.length; i++)   matrix[i]=simplex[i].extend(1);  int fact=1;  for (int i=1; i < matrix.length; i++)   fact=fact * i;  return determinant(matrix) / fact;}  }
class C{  private EnumEvalResult evaluate(AciEvalContext evalCtx){  return body.evaluate(evalCtx);}  }
class C{  public int hashCode(){  return (field << 24) | (beginIndex << 16) | endIndex;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  try {    handleButton1Request(getCachedPolicy());  } catch (  AMConsoleException e) {    debug.warning("ResponseProviderEditViewBean.handleButton1Request",e);    redirectToStartURL();  }}  }
class C{  boolean contains_all_corners(DsnStructureOutlineShape p_other_shape){  if (convex_shapes == null) {    return false;  }  int corner_count=p_other_shape.shape.border_line_count();  for (int index=0; index < corner_count; ++index) {    PlaPointInt curr_corner=p_other_shape.shape.corner(index);    boolean is_contained=false;    for (int jndex=0; jndex < convex_shapes.length; ++jndex) {      if (!convex_shapes[jndex].contains(curr_corner))       continue;      is_contained=true;      break;    }    if (!is_contained)     return false;  }  return true;}  }
class C{  protected SortingFocusTraversalPolicy(){}  }
class C{  public void update(byte[] buf,int off,int len) throws SignatureException {  if (RSAdata != null || digestAttr != null || isTsp)   messageDigest.update(buf,off,len); else   sig.update(buf,off,len);}  }
class C{  public void warning(String msg){  if (debugLevel > Debug.ERROR) {    formatAndWrite("WARNING: ",msg,null);  }}  }
class C{  public void removeListener(final TimeoutEventListener listener){  listeners.remove(listener);}  }
class C{  private Class<?> createClass(String className){  Class<?> clazz;  boolean internal=false;  if (System.getSecurityManager() != null) {    if (className != null && className.startsWith(DEFAULT_PACKAGE)) {      internal=true;    }  }  try {    if (classLoader != null && !internal) {      clazz=Class.forName(className,false,classLoader);    } else {      clazz=Class.forName(className);    }  } catch (  Throwable t) {    if (debug) {      t.printStackTrace();    }    return null;  }  return clazz;}  }
class C{  public void handleTblButtonAddRequest(RequestInvocationEvent event){  EntityAddViewBean vb=(EntityAddViewBean)getViewBean(EntityAddViewBean.class);  setPageSessionAttribute(EntityAddViewBean.ENTITY_TYPE,(String)getPageSessionAttribute(PG_SESSION_ENTITY_TYPE));  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public static Foo findByUuid_Last(java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_Last(uuid,orderByComparator);}  }
class C{  public boolean isVariableBitRate(){  return (Boolean)content.get(FIELD_VBR);}  }
class C{  public FrameBodyTDRC(FrameBodyTYER body){  originalID=ID3v23Frames.FRAME_ID_V3_TYER;  year=body.getText();  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);  setObjectValue(DataTypes.OBJ_TEXT,getFormattedText());}  }
class C{  @Override public String toString(){  return super.toString() + ": connectionId=" + connectionId;}  }
class C{  public MouseWheelEvent(Component source,int id,long when,int modifiers,int x,int y,int clickCount,boolean popupTrigger,int scrollType,int scrollAmount,int wheelRotation){  this(source,id,when,modifiers,x,y,0,0,clickCount,popupTrigger,scrollType,scrollAmount,wheelRotation);}  }
class C{  public boolean isMalformed(){  return this.type == TYPE_MALFORMED_INPUT;}  }
class C{  private boolean split_wtrace(LinkedList<BrdTracep> clean_list,int seg_index,PlaSegmentInt curr_segment,AwtreeFindEntry overlap_tentry,BrdTracep found_trace){  PlaSegmentInt found_line_segment=found_trace.polyline.segment_get(overlap_tentry.shape_index_in_object + 1);  ArrayList<PlaLineInt> intersecting_lines=found_line_segment.intersection(curr_segment);  if (intersecting_lines.size() < 1)   return false;  boolean other_split=split_wtrace_other(found_trace,clean_list,intersecting_lines,overlap_tentry);  intersecting_lines=curr_segment.intersection(found_line_segment);  boolean own_split=split_wtrace_own(seg_index,clean_list,intersecting_lines);  if (other_split || own_split)   remove_if_cycle(clean_list);  return own_split;}  }
class C{  public ShapeTileBox screen_to_board(Rectangle p_rect){  PlaPointFloat corner_1=screen_to_board(new Point2D.Double(p_rect.getX(),p_rect.getY()));  PlaPointFloat corner_2=screen_to_board(new Point2D.Double(p_rect.getX() + p_rect.getWidth(),p_rect.getY() + p_rect.getHeight()));  int llx=(int)Math.floor(Math.min(corner_1.v_x,corner_2.v_x));  int lly=(int)Math.floor(Math.min(corner_1.v_y,corner_2.v_y));  int urx=(int)Math.ceil(Math.max(corner_1.v_x,corner_2.v_x));  int ury=(int)Math.ceil(Math.max(corner_1.v_y,corner_2.v_y));  return new ShapeTileBox(llx,lly,urx,ury);}  }
class C{  public ErodingKeyedObjectPool(final KeyedObjectPool<K,V> keyedPool,final float factor){  this(keyedPool,new ErodingFactor(factor));}  }
class C{  public UnitValue(int unitType,float value){  this.unitType=unitType;  this.value=value;}  }
class C{  void updateMask(){  if (getFormat() != null) {    Document doc=getFormattedTextField().getDocument();    validMask=false;    if (doc != null) {      try {        string=doc.getText(0,doc.getLength());      } catch (      BadLocationException ble) {        string=null;      }      if (string != null) {        try {          Object value=stringToValue(string);          AttributedCharacterIterator iterator=getFormat().formatToCharacterIterator(value);          updateMask(iterator);        } catch (        ParseException pe) {        }catch (        IllegalArgumentException iae) {        }catch (        NullPointerException npe) {        }      }    }  }}  }
class C{  public static boolean isASCII(String input){  if (input == null) {    return true;  }  for (int i=0; i < input.length(); i++) {    int c=input.charAt(i);    if (c > 0x7F) {      return false;    }  }  return true;}  }
class C{  public boolean isAccessibleRowSelected(int r){  return false;}  }
class C{  private static void hexEncode(char c,StringBuilder buffer){  if ((c & (byte)0xFF) == c) {    buffer.append('%');    buffer.append(byteToHex((byte)c));  } else {    buffer.append('%');    byte b1=(byte)((c >>> 8) & 0xFF);    buffer.append(byteToHex(b1));    buffer.append('%');    byte b2=(byte)(c & 0xFF);    buffer.append(byteToHex(b2));  }}  }
class C{  public String toString(){  return getClassName() + "[" + getObjectName()+ "]";}  }
class C{  public static boolean isXML11Valid(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  protected Expression and(int opPos) throws TransformerException {  return compileOperation(new And(),opPos);}  }
class C{  public void processInvite(Request request,ServerTransaction st){  try {    System.out.println("Processing Re-INVITE ");    Response response=ProtocolObjects.messageFactory.createResponse(Response.OK,request);    ((ToHeader)response.getHeader(ToHeader.NAME)).setTag(((ToHeader)request.getHeader(ToHeader.NAME)).getTag());    response.addHeader(this.contactHeader);    st.sendResponse(response);    TestCase.assertEquals("Re-Inivte Dialog must match ",this.dialog,st.getDialog());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public boolean isValid(boolean reset){  try {    final SessionState state=session.getState(reset);    return state == SessionState.VALID && !session.isTimedOut();  } catch (  SessionException e) {    return false;  }}  }
class C{  public static boolean matchPattern(String line,String pattern,boolean matchBegin,boolean matchEnd,boolean ignoreCase){  boolean matchB=false;  boolean matchE=false;  boolean matchP=false;  boolean match=false;  int patLen=pattern.length();  line=line.trim();  int lineLen=line.length();  if (lineLen >= patLen) {    if (matchBegin) {      matchB=line.regionMatches(ignoreCase,0,pattern,0,patLen);    } else     if (matchEnd) {      int frmOff=lineLen - patLen;      matchE=line.regionMatches(ignoreCase,frmOff,pattern,0,patLen);    } else {      if (ignoreCase) {        String tempLine=new String(line);        String tempPattern=new String(pattern);        tempLine=tempLine.toLowerCase();        tempPattern=tempPattern.toLowerCase();        if (tempLine.indexOf(tempPattern) >= 0) {          matchP=true;        }      } else {        if (line.indexOf(pattern) >= 0) {          matchP=true;        }      }    }  }  if (matchB || matchE || matchP) {    match=true;  }  return match;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public static JEditorPane makePlainTextPane(String text,Font font){  JEditorPane pane=new JEditorPane();  pane.setContentType("text/plain");  if (text != null) {    pane.setText(text);  }  pane.setFont(font);  pane.setEditable(false);  pane.setBorder(new EmptyBorder(0,0,0,0));  pane.setOpaque(false);  pane.setFocusCycleRoot(false);  return pane;}  }
class C{  public final void layerProtocol(boolean secure){  if (!this.connected) {    throw new IllegalStateException("No layered protocol unless connected.");  }  this.layered=LayerType.LAYERED;  this.secure=secure;}  }
class C{  public static List<SearchResultEntry> findChildrenOfClass(String name){  List<SearchResultEntry> results=new ArrayList<SearchResultEntry>();  for (  ClassNode cn : VisualizerWindow.instance.getNodes().values()) {    if (cn.superName.toLowerCase().contains(name.toLowerCase())) {      results.add(new SearchResultEntry(cn));    } else {      for (      String inter : cn.interfaces) {        if (inter.toLowerCase().contains(name.toLowerCase())) {          results.add(new SearchResultEntry(cn));          break;        }      }    }  }  return results;}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  Dialog dialog=requestEvent.getDialog();  System.out.println("local party = " + dialog.getLocalParty());  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public void addClassResolver(IClassResolver resolver){  m_resolvers.addElement(resolver);}  }
class C{  public void completePendingPageChanges(){  if (!mPendingAnimations.isEmpty()) {    HashMap<View,Runnable> pendingViews=new HashMap<>(mPendingAnimations);    for (    Map.Entry<View,Runnable> e : pendingViews.entrySet()) {      e.getKey().animate().cancel();      e.getValue().run();    }  }}  }
class C{  public List<Certificate> localCertificates(){  return localCertificates;}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof JDBCPrincipal)) {    return false;  }  JDBCPrincipal that=(JDBCPrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  public static <K,V>Map<K,V> unmodifiableMap(Map<? extends K,? extends V> m){  return new UnmodifiableMap<>(m);}  }
class C{  public void propertyChange(PropertyChangeEvent e){  String name=e.getPropertyName();  Object oldValue=e.getOldValue();  Object newValue=e.getNewValue();  if (name.compareTo("model") == 0) {    if (oldValue != null && oldValue instanceof ListModel) {      ((ListModel)oldValue).removeListDataListener(this);    }    if (newValue != null && newValue instanceof ListModel) {      ((ListModel)newValue).addListDataListener(this);    }  } else   if (name.compareTo("selectionModel") == 0) {    if (oldValue != null && oldValue instanceof ListSelectionModel) {      ((ListSelectionModel)oldValue).removeListSelectionListener(this);    }    if (newValue != null && newValue instanceof ListSelectionModel) {      ((ListSelectionModel)newValue).addListSelectionListener(this);    }    firePropertyChange(AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  this.inviteRequest=request;}  }
class C{  public JsonValue invalidSession(){  return json(object(field(VALID,false)));}  }
class C{  public void test_getProvider() throws NoSuchAlgorithmException, NoSuchProviderException {  assertEquals("Incorrect provider",getDefaultProvider(),TrustManagerFactory.getInstance(getDefaultAlgorithm()).getProvider());  assertEquals("Incorrect provider",getDefaultProvider(),TrustManagerFactory.getInstance(getDefaultAlgorithm(),getDefaultProviderName()).getProvider());  assertEquals("Incorrect provider",getDefaultProvider(),TrustManagerFactory.getInstance(getDefaultAlgorithm(),getDefaultProvider()).getProvider());}  }
class C{  public void reverse(){  int[] newBits=new int[bits.length];  int size=this.size;  for (int i=0; i < size; i++) {    if (get(size - i - 1)) {      newBits[i >> 5]|=1 << (i & 0x1F);    }  }  bits=newBits;}  }
class C{  public StoreException(String message,Throwable cause){  super(message,cause);}  }
class C{  public final void mousePressed(MouseEvent e){  dragActive=true;}  }
class C{  public FromHeader createFromHeader(Address address,String tag) throws ParseException {  if (address == null)   throw new NullPointerException("null address arg");  From from=new From();  from.setAddress(address);  if (tag != null)   from.setTag(tag);  return from;}  }
class C{  private boolean useLocalTrustStoreIfPossible(){  try {    if (InetAddress.getLocalHost().getHostName().equals(state.hostName) && secureArgsList.getAdminPortFromConfig() == portNumber) {      final String trustStoreFileAbsolute=secureArgsList.getTruststoreFileFromConfig();      if (trustStoreFileAbsolute != null) {        secureArgsList.getTrustStorePathArg().addValue(trustStoreFileAbsolute);        return true;      }    }  } catch (  Exception ex) {  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix07.class,args);}  }
class C{  private boolean isAllowedByIp(String ip) throws PolicyException {  boolean allowed=false;  IPv6AddressRange iPv6AddressRange=IPv6AddressRange.fromFirstAndLast(startIP,endIP);  IPv6Address requestIP=IPv6Address.fromString(ip);  if (iPv6AddressRange.contains(requestIP)) {    allowed=true;  }  return allowed;}  }
class C{  public BlockIterator(Location loc,double yOffset){  this(loc.getWorld(),loc.toVector(),loc.getDirection(),yOffset,0);}  }
class C{  public void validate(ElemTemplateElement elem,StylesheetHandler handler) throws SAXException {  String msg="";  while (elem != null) {    if (elem instanceof ElemExsltFuncResult && elem.getNextSiblingElem() != null && !(elem.getNextSiblingElem() instanceof ElemFallback)) {      msg="func:result has an illegal following sibling (only xsl:fallback allowed)";      handler.error(msg,new SAXException(msg));    }    if ((elem instanceof ElemApplyImport || elem instanceof ElemApplyTemplates || elem instanceof ElemAttribute|| elem instanceof ElemCallTemplate|| elem instanceof ElemComment|| elem instanceof ElemCopy|| elem instanceof ElemCopyOf|| elem instanceof ElemElement|| elem instanceof ElemLiteralResult|| elem instanceof ElemNumber|| elem instanceof ElemPI|| elem instanceof ElemText|| elem instanceof ElemTextLiteral|| elem instanceof ElemValueOf) && !(ancestorIsOk(elem))) {      msg="misplaced literal result in a func:function container.";      handler.error(msg,new SAXException(msg));    }    ElemTemplateElement nextElem=elem.getFirstChildElem();    while (nextElem == null) {      nextElem=elem.getNextSiblingElem();      if (nextElem == null)       elem=elem.getParentElem();      if (elem == null || elem instanceof ElemExsltFunction)       return;    }    elem=nextElem;  }}  }
class C{  public void endDocument() throws SAXException {  if (documentHandler != null)   documentHandler.endDocument();}  }
class C{  public void actionPerformed(ActionEvent e){  JEditorPane editor=getEditor(e);  if (editor != null) {    String family=this.family;    if ((e != null) && (e.getSource() == editor)) {      String s=e.getActionCommand();      if (s != null) {        family=s;      }    }    if (family != null) {      MutableAttributeSet attr=new SimpleAttributeSet();      StyleConstants.setFontFamily(attr,family);      setCharacterAttributes(editor,attr,false);    } else {      UIManager.getLookAndFeel().provideErrorFeedback(editor);    }  }}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public boolean isFlavorTextType(){  return (DataTransferer.isFlavorCharsetTextType(this) || DataTransferer.isFlavorNoncharsetTextType(this));}  }
class C{  private String resetPreferredIDPCookie(String existingCookieValue,String toAddCookieValue,boolean bIsSAML2){  StringBuffer returnCookie=new StringBuffer();  String encodedCookieToAdd=Base64.encode(generateSuccinctID(toAddCookieValue,bIsSAML2));  StringTokenizer st=new StringTokenizer(existingCookieValue,IDPDiscoveryConstants.PREFERRED_COOKIE_SEPERATOR);  while (st.hasMoreTokens()) {    String curIdpString=(String)st.nextToken();    if (curIdpString.equals(encodedCookieToAdd)) {      continue;    } else {      returnCookie.append(curIdpString + " ");    }  }  returnCookie.append(encodedCookieToAdd);  return returnCookie.toString();}  }
class C{  @Inject public SeriesTaskExecutor(ExecutorService poolService,SeriesTaskExecutorThreadFactory processorFactory,ThreadMonitor monitor,CTSQueueConfiguration configuration,@Named(DataLayerConstants.DATA_LAYER_DEBUG) Debug debug){  this.debug=debug;  this.monitor=monitor;  this.configuration=configuration;  this.processorFactory=processorFactory;  this.poolService=poolService;}  }
class C{  @Override public StateInteractive cancel(){  return this;}  }
class C{  private boolean removeWaitingTrigger(Trigger trigger) throws JobPersistenceException {synchronized (lock) {    try {      boolean result=false;      int retries=0;      while (writeRetries == -1 || retries <= writeRetries && !shutdown) {        try {          result=removeRepoListName(getTriggerId(trigger.getGroup(),trigger.getName()),WAITING_TRIGGERS_RESOURCE_PATH,"names");          break;        } catch (        PreconditionFailedException e) {          logger.debug("Removing waiting trigger failed {}, retrying",e);          retries++;        }      }      return result;    } catch (    ResourceException e) {      throw new JobPersistenceException("Error removing waiting trigger",e);    }  }}  }
class C{  public PluginResult.SubordinateDelete invokeSubordinateDeletePlugins(DeleteOperation deleteOperation,Entry entry){  PluginResult.SubordinateDelete result=null;  for (  DirectoryServerPlugin p : subordinateDeletePlugins) {    if (deleteOperation.isInternalOperation() && !p.invokeForInternalOperations()) {      continue;    }    try {      result=p.processSubordinateDelete(deleteOperation,entry);    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage message=ERR_PLUGIN_SUBORDINATE_DELETE_PLUGIN_EXCEPTION.get(p.getPluginEntryDN(),deleteOperation.getConnectionID(),deleteOperation.getOperationID(),stackTraceToSingleLineString(e));      logger.error(message);      return PluginResult.SubordinateDelete.stopProcessing(DirectoryServer.getServerErrorResultCode(),message);    }    if (result == null) {      LocalizableMessage message=ERR_PLUGIN_SUBORDINATE_DELETE_PLUGIN_RETURNED_NULL.get(p.getPluginEntryDN(),deleteOperation.getConnectionID(),deleteOperation.getOperationID());      logger.error(message);      return PluginResult.SubordinateDelete.stopProcessing(DirectoryServer.getServerErrorResultCode(),message);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.SubordinateDelete.continueOperationProcessing();  }  return result;}  }
class C{  public String toXMLString() throws FSMsgException {  return this.toXMLString(true,true);}  }
class C{  private static byte[] peekFirstNotEmptyBytes(InputStream inputStream,int length) throws IOException {  final int markLength=32 * 1024;  int bytesRead=0;  int bytesFound=0;  byte[] firstBytes=new byte[length];  byte[] buffer=new byte[512];  inputStream.mark(markLength);  try {    while (bytesRead < markLength) {      int bytesMarked=IOUtils.read(inputStream,buffer);      if (bytesMarked <= 0)       return null;      bytesRead+=bytesMarked;      for (int i=0; i < bytesMarked; i++) {        byte b=buffer[i];        boolean empty=IoUtils.isEmptyOrWhitespace(b) || IoUtils.isBomByte(b);        if ((!empty || bytesFound > 0) && b != 0) {          firstBytes[bytesFound]=b;          bytesFound++;        }        if (bytesFound == firstBytes.length) {          return firstBytes;        }      }      if (bytesMarked < buffer.length) {        return null;      }    }  }  finally {    inputStream.reset();  }  return null;}  }
class C{  public synchronized int read() throws IOException {  if (!connected) {    throw new IOException("Pipe not connected");  } else   if (closedByReader) {    throw new IOException("Pipe closed");  } else   if (writeSide != null && !writeSide.isAlive() && !closedByWriter && (in < 0)) {    throw new IOException("Write end dead");  }  readSide=Thread.currentThread();  int trials=2;  while (in < 0) {    if (closedByWriter) {      return -1;    }    if ((writeSide != null) && (!writeSide.isAlive()) && (--trials < 0)) {      throw new IOException("Pipe broken");    }    notifyAll();    try {      wait(1000);    } catch (    InterruptedException ex) {      throw new java.io.InterruptedIOException();    }  }  int ret=buffer[out++];  if (out >= buffer.length) {    out=0;  }  if (in == out) {    in=-1;  }  return ret;}  }
class C{  public boolean containsValue(Object value){  return map.containsValue(value);}  }
class C{  boolean isBaseHeader(){  return value == BASE_HEADER;}  }
class C{  private int moveFiles() throws IOException {  this.filesMoved=0;  this.addMoveNode=false;  for (  FilePostParam file : files) {    if (!FileUtils.checkFileName(file.getName())) {      return Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST;    }    if (Pattern.compile(Constants.INVALID_PATH_REGEX).matcher(file.getFolder()).find()) {      return Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST;    }    if (configuration.getTypes().get(file.getType()) == null) {      return Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST;    }    if (file.getFolder() == null || file.getFolder().equals("")) {      return Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST;    }    if (FileUtils.checkFileExtension(file.getName(),this.configuration.getTypes().get(this.type)) == 1) {      creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_EXTENSION,file.getName(),file.getFolder(),file.getType());      continue;    }    if (!this.type.equals(file.getType()) && FileUtils.checkFileExtension(file.getName(),this.configuration.getTypes().get(file.getType())) == 1) {      creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_EXTENSION,file.getName(),file.getFolder(),file.getType());      continue;    }    if (FileUtils.checkIfFileIsHidden(file.getName(),this.configuration)) {      return Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST;    }    if (FileUtils.checkIfDirIsHidden(file.getFolder(),this.configuration)) {      return Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST;    }    if (!AccessControlUtil.getInstance(this.configuration).checkFolderACL(file.getType(),file.getFolder(),this.userRole,AccessControlUtil.CKFINDER_CONNECTOR_ACL_FILE_VIEW)) {      return Constants.Errors.CKFINDER_CONNECTOR_ERROR_UNAUTHORIZED;    }    File sourceFile=new File(configuration.getTypes().get(file.getType()).getPath() + file.getFolder(),file.getName());    File destFile=new File(configuration.getTypes().get(this.type).getPath() + this.currentFolder,file.getName());    File sourceThumb=new File(configuration.getThumbsPath() + File.separator + file.getType()+ file.getFolder()+ file.getName());    try {      if (!sourceFile.exists() || !sourceFile.isFile()) {        creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_FILE_NOT_FOUND,file.getName(),file.getFolder(),file.getType());        continue;      }      if (!this.type.equals(file.getType())) {        Long maxSize=configuration.getTypes().get(this.type).getMaxSize();        if (maxSize != null && maxSize < sourceFile.length()) {          creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_UPLOADED_TOO_BIG,file.getName(),file.getFolder(),file.getType());          continue;        }      }      if (sourceFile.equals(destFile)) {        creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_SOURCE_AND_TARGET_PATH_EQUAL,file.getName(),file.getFolder(),file.getType());        continue;      } else       if (destFile.exists()) {        if (file.getOptions() != null && file.getOptions().indexOf("overwrite") != -1) {          if (!handleOverwrite(sourceFile,destFile)) {            creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,file.getName(),file.getFolder(),file.getType());            continue;          } else {            this.filesMoved++;            FileUtils.delete(sourceThumb);          }        } else         if (file.getOptions() != null && file.getOptions().indexOf("autorename") != -1) {          if (!handleAutoRename(sourceFile,destFile)) {            creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,file.getName(),file.getFolder(),file.getType());            continue;          } else {            this.filesMoved++;            FileUtils.delete(sourceThumb);          }        } else {          creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ALREADY_EXIST,file.getName(),file.getFolder(),file.getType());          continue;        }      } else {        if (FileUtils.copyFromSourceToDestFile(sourceFile,destFile,true,configuration)) {          this.filesMoved++;          moveThumb(file);        }      }    } catch (    SecurityException e) {      if (configuration.isDebugMode()) {        throw e;      } else {        creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,file.getName(),file.getFolder(),file.getType());        continue;      }    }catch (    IOException e) {      if (configuration.isDebugMode()) {        throw e;      } else {        creator.appendErrorNodeChild(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,file.getName(),file.getFolder(),file.getType());        continue;      }    }  }  this.addMoveNode=true;  if (creator.hasErrors()) {    return Constants.Errors.CKFINDER_CONNECTOR_ERROR_MOVE_FAILED;  } else {    return Constants.Errors.CKFINDER_CONNECTOR_ERROR_NONE;  }}  }
class C{  public final HashCode append(int value){  hashCode=combine(hashCode,value);  return this;}  }
class C{  public boolean swapCamera(){synchronized (SyncOp) {    LogTools.d("RESClient,swapCamera()");    return videoClient.swapCamera();  }}  }
class C{  public OmnidroidRuntimeException(int code,String message,Throwable cause){  super(message,cause);  this.code=code;}  }
class C{  @DataProvider public Object[][] validSchemaElements(){  return new Object[][]{{"(1.2.8.5 NAME 'testtype' DESC 'full type' OBSOLETE SUP cn " + " EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch" + " SUBSTR caseIgnoreSubstringsMatch"+ " SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE"+ " USAGE userApplications )",ATD_SYNTAX,false},{"(testtype-oid NAME 'testtype' DESC 'full type' OBSOLETE SUP cn " + " EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch" + " SUBSTR caseIgnoreSubstringsMatch"+ " SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE"+ " USAGE userApplications )",ATD_SYNTAX,false},{"(testtype_oid NAME 'testtype' DESC 'full type' OBSOLETE SUP cn " + " EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch" + " SUBSTR caseIgnoreSubstringsMatch"+ " SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE"+ " USAGE userApplications )",ATD_SYNTAX,true},{"(testtype.oid NAME 'testtype' DESC 'full type' OBSOLETE SUP cn " + " EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch" + " SUBSTR caseIgnoreSubstringsMatch"+ " SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE"+ " USAGE userApplications )",ATD_SYNTAX,true},{"(1.2.8.5 NAME 'test-type' DESC 'full type' OBSOLETE SUP cn " + " EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch" + " SUBSTR caseIgnoreSubstringsMatch"+ " SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE"+ " USAGE userApplications )",ATD_SYNTAX,false},{"(1.2.8.5 NAME 'test.type' DESC 'full type' OBSOLETE SUP cn " + " EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch" + " SUBSTR caseIgnoreSubstringsMatch"+ " SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE"+ " USAGE userApplications )",ATD_SYNTAX,true},{"(1.2.8.5 NAME 'test_type' DESC 'full type' OBSOLETE SUP cn " + " EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch" + " SUBSTR caseIgnoreSubstringsMatch"+ " SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE"+ " USAGE userApplications )",ATD_SYNTAX,true}};}  }
class C{  private Object[] ensureCapacity(int minCapacity){  if (tmp.length < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) Object[] newArray=new Object[newSize];    tmp=newArray;  }  return tmp;}  }
class C{  public TimeZoneAdjustment createTimeZoneAdjustment(Date d,int offset){  ZoneField timeZoneAdjustmentImpl=new ZoneField();  try {    Hashtable map=new Hashtable();    map.put(d,new Integer(offset));    timeZoneAdjustmentImpl.setZoneAdjustments(map);  } catch (  SdpException s) {    s.printStackTrace();  }  return timeZoneAdjustmentImpl;}  }
class C{  private void convertEnvParams(Map envParams) throws PolicyException {  if ((envParams == null) || (envParams.isEmpty())) {    return;  }  Set reqIPSet=(Set)envParams.get(REQUEST_IP);  String reqIP=null;  if (reqIPSet != null) {    if (!reqIPSet.isEmpty()) {      Iterator items=reqIPSet.iterator();      reqIP=(String)items.next();      envParams.put(REQUEST_IP,reqIP);    } else {      envParams.put(REQUEST_IP,null);    }  }  if (debug.messageEnabled()) {    debug.message("PolicyRequestHandler.convertEnvParams(): " + REQUEST_IP + " is "+ reqIP);  }  Set reqTimeSet=(Set)envParams.get(REQUEST_TIME);  Long reqTime=null;  if (reqTimeSet != null) {    if (!reqTimeSet.isEmpty()) {      Iterator items=reqTimeSet.iterator();      String reqTimeStr=(String)items.next();      reqTime=new Long(reqTimeStr);      envParams.put(REQUEST_TIME,reqTime);    } else {      envParams.put(REQUEST_TIME,null);    }  }  if (debug.messageEnabled()) {    debug.message("PolicyRequestHandler.convertEnvParams(): " + REQUEST_TIME + " is "+ reqTime);  }  try {    Set reqTimeZoneSet=(Set)envParams.get(REQUEST_TIME_ZONE);    TimeZone reqTimeZone=null;    if (reqTimeZoneSet != null) {      if (!reqTimeZoneSet.isEmpty()) {        Iterator items=reqTimeZoneSet.iterator();        String reqTimeZoneStr=(String)items.next();        reqTimeZone=TimeZone.getTimeZone(reqTimeZoneStr);        envParams.put(REQUEST_TIME_ZONE,reqTimeZone);      } else {        envParams.put(REQUEST_TIME_ZONE,null);      }    }    if (debug.messageEnabled()) {      debug.message("PolicyRequestHandler.convertEnvParams(): " + REQUEST_TIME_ZONE + " is "+ reqTimeZone);    }  } catch (  Exception e) {    throw new PolicyException(ResBundleUtils.rbName,"invalid_request_time_zone_in_request",null,e);  }}  }
class C{  public int end(){  if (first < 0)   throw new IllegalStateException("No match available");  return last;}  }
class C{  public void actionPerformed(ActionEvent e){  start.actionPerformed(e);  end.actionPerformed(e);}  }
class C{  public ProxiedAuthV1Control(boolean isCritical,ByteString rawAuthorizationDN){  super(OID_PROXIED_AUTH_V1,isCritical);  this.rawAuthorizationDN=rawAuthorizationDN;  authorizationDN=null;}  }
class C{  public NameFileComparator(IOCase caseSensitivity){  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  protected Transferable createTransferable(JComponent c){  if (c instanceof JTree) {    tree=(JTree)c;    TreePath[] paths=tree.getSelectionPaths();    if (paths == null || paths.length == 0) {      return null;    }    StringBuffer plainBuf=new StringBuffer();    StringBuffer htmlBuf=new StringBuffer();    htmlBuf.append("<html>\n<body>\n<ul>\n");    TreeModel model=tree.getModel();    TreePath lastPath=null;    TreePath[] displayPaths=getDisplayOrderPaths(paths);    for (    TreePath path : displayPaths) {      Object node=path.getLastPathComponent();      boolean leaf=model.isLeaf(node);      String label=getDisplayString(path,true,leaf);      plainBuf.append(label + "\n");      htmlBuf.append("  <li>" + label + "\n");    }    plainBuf.deleteCharAt(plainBuf.length() - 1);    htmlBuf.append("</ul>\n</body>\n</html>");    tree=null;    return new BasicTransferable(plainBuf.toString(),htmlBuf.toString());  }  return null;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssSamlV11Token10Element createWssSamlV11Token10Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssSamlV11Token10ElementImpl();}  }
class C{  public static void fill(byte[] a,byte val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public VersionMonitorTestCase() throws Exception {  super("cn=Version,cn=Monitor Providers,cn=config");}  }
class C{  public Kue process(String type,Handler<Job> handler){  processInternal(type,handler,false);  setupTimers();  return this;}  }
class C{  public ReverseRelationshipValidator(RelationshipProvider relationshipProvider){  super(relationshipProvider);}  }
class C{  public String toString(){  if (assertionE != null) {    return XMLUtils.print(SAMLUtils.getCanonicalElement(assertionE));  }  StringBuffer buffer=new StringBuffer();  String assertionString=assertion.toString(true,true);  if (removeCarriageReturns) {    assertionString=assertionString.replaceAll("\r\n","\n");  }  buffer.append("<wst:RequestedSecurityToken>").append(assertionString).append("</wst:RequestedSecurityToken>");  return buffer.toString();}  }
class C{  public void addAll(List<T> items){synchronized (lock) {    this.items.addAll(identifiedItemFactory.createList(items));  }  itemPositionChangeChecked=new SparseBooleanArray(this.items.size());  notifyDataSetChanged();}  }
class C{  private void sendMessage(int msg){  Message.obtain(mHandler,msg,"error").sendToTarget();}  }
class C{  @SuppressWarnings("unchecked") public synchronized E pop(){  if (elementCount == 0) {    throw new EmptyStackException();  }  final int index=--elementCount;  final E obj=(E)elementData[index];  elementData[index]=null;  modCount++;  return obj;}  }
class C{  private Map.Entry<K,V> doRemoveLastEntry(){  for (; ; ) {    Node<K,V> b=findPredecessorOfLast();    Node<K,V> n=b.next;    if (n == null) {      if (b.isBaseHeader())       return null; else       continue;    }    for (; ; ) {      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (b.value == null || v == n)       break;      if (f != null) {        b=n;        n=f;        continue;      }      if (!n.casValue(v,null))       break;      K key=n.key;      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(key); else {        findPredecessor(key,comparator);        if (head.right == null)         tryReduceLevel();      }      @SuppressWarnings("unchecked") V vv=(V)v;      return new AbstractMap.SimpleImmutableEntry<K,V>(key,vv);    }  }}  }
class C{  public NameAlreadyBoundException(){  super();}  }
class C{  private void adjust_clearance_table(){  clearance_table_model=new WinClearanceTableModel(board_frame.board_panel.itera_board,layer_combo_box);  clearance_table=new JTable(clearance_table_model);  main_panel.remove(center_panel);  center_panel=add_clearance_table(board_frame);  main_panel.add(center_panel,java.awt.BorderLayout.CENTER);  pack();  board_frame.refresh_windows();}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  private void convertandWriteTagsAtomToFreeAtom(FileChannel fileWriteChannel,Mp4BoxHeader tagsHeader) throws IOException {  Mp4FreeBox freeBox=new Mp4FreeBox(tagsHeader.getDataLength());  fileWriteChannel.write(freeBox.getHeader().getHeaderData());  fileWriteChannel.write(freeBox.getData());}  }
class C{  public static boolean debugEnabled(){  return enabled;}  }
class C{  @Advice.OnMethodExit public static void exit(){  ConnectorImpl.cassandraSetupComplete();}  }
class C{  public ListTag(){}  }
class C{  public V remove(Object key){  Node<K,V> e;  return (e=removeNode(hash(key),key,null,false,true)) == null ? null : e.value;}  }
class C{  public static void extractZipArchive(File zipFile,File targetDirectory,List<String> executableDirectories,List<String> executableFiles) throws IOException {  try (ZipInputStream zipStream=new ZipInputStream(new FileInputStream(zipFile))){    ZipEntry fileEntry;    while ((fileEntry=zipStream.getNextEntry()) != null) {      File targetFile=new File(targetDirectory.getPath(),fileEntry.getName());      if (fileEntry.isDirectory()) {        targetFile.mkdirs();        continue;      }      extractFileFromZip(zipStream,targetFile);      for (      String suffix : EXECUTABLE_FILES_SUFFIXES) {        if (fileEntry.getName().toLowerCase().endsWith(suffix)) {          targetFile.setExecutable(true);        }      }    }  }   for (  String dir : executableDirectories) {    File directory=new File(targetDirectory.getPath(),dir);    for (    File file : directory.listFiles()) {      if (file.isFile()) {        file.setExecutable(true);      }    }  }  for (  String name : executableFiles) {    File file=new File(targetDirectory.getPath(),name);    if (file.exists()) {      file.setExecutable(true);    }  }}  }
class C{  public void testGetInstance01() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {  try {    AlgorithmParameterGenerator.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException should be thrown");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  AlgorithmParameterGenerator apG;  for (int i=0; i < validValues.length; i++) {    apG=AlgorithmParameterGenerator.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",apG.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",apG.getProvider(),mProv);    checkResult(apG);  }}  }
class C{  public static void writeSwappedDouble(OutputStream output,double value) throws IOException {  writeSwappedLong(output,Double.doubleToLongBits(value));}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.KeyInfoElement createKeyInfoElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.KeyInfoElementImpl();}  }
class C{  public static String unescapeSom(String s){  int idx=s.indexOf('\\');  if (idx < 0)   return s;  StringBuilder sb=new StringBuilder();  int last=0;  while (idx >= 0) {    sb.append(s.substring(last,idx));    last=idx + 1;    idx=s.indexOf('\\',idx + 1);  }  sb.append(s.substring(last));  return sb.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("XML","2.0");  assertTrue("throw_True",state);}  }
class C{  private NumericShaper(int ranges,int defaultContext,boolean isContextual){  this.fRanges=ranges;  this.fDefaultContextIndex=getIndexFromRange(defaultContext);  this.fContextual=isContextual;  if (!fContextual) {    fSingleRangeIndex=getIndexFromRange(ranges);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node createdNode;  String localName;  doc=(Document)load("staffNS",false);  createdNode=doc.createElement("test:employee");  localName=createdNode.getLocalName();  assertNull("localNameNull",localName);}  }
class C{  private static void dualPivotQuicksort(char[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  char ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    char t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    char t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    char t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    char t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    char t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    char t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    char t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    char t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    char t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  char pivot1=ae2;  a[e2]=a[left];  char pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  private void handleCOT(String fileName){  String cotFile=fedletHomeDir + File.separator + fileName+ COT_FILE_SUFFIX;  if (debug.messageEnabled()) {    debug.message("FedletConfigurationImpl.handleCOT: " + "cotFile=" + cotFile);  }  FileInputStream fis=null;  try {    fis=new FileInputStream(cotFile);    Properties props=new Properties();    props.load(fis);    Map attrMap=new HashMap();    if (props != null) {      Enumeration keys=props.propertyNames();      while (keys.hasMoreElements()) {        String key=(String)keys.nextElement();        String vals=props.getProperty(key);        if ((vals != null) && (vals.length() > 0)) {          attrMap.put(key,toValSet(key,vals));        }      }    }    Set cotName=(Set)attrMap.get(COT_NAME);    if (cotName == null) {      debug.error("FedletConfigImpl.handleCOT: null COT name in " + cotFile);    } else {      cotMap.put((String)cotName.iterator().next(),attrMap);      if (debug.messageEnabled()) {        debug.message("FedletConfigurationImpl.handleCOT: " + "done processing cot " + cotName);      }    }  } catch (  FileNotFoundException fnf) {    debug.error("FedletConfigurationImpl.handleCOT: " + cotFile + " for component "+ componentName,fnf);  }catch (  IOException ioe) {    debug.error("FedletConfigurationImpl.getConfiguration:" + cotFile + " for component "+ componentName,ioe);  } finally {    if (fis != null) {      try {        fis.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  private ModifyOperation replaceAttrEntry(DN dn,String attrName,Object... attrValStrings){  ModifyRequest modifyRequest=Requests.newModifyRequest(dn).addModification(REPLACE,attrName,attrValStrings);  return getRootConnection().processModify(modifyRequest);}  }
class C{  public PluginResult.IntermediateResponse invokeIntermediateResponsePlugins(IntermediateResponse intermediateResponse){  PluginResult.IntermediateResponse result=null;  Operation operation=intermediateResponse.getOperation();  for (  DirectoryServerPlugin p : intermediateResponsePlugins) {    try {      result=p.processIntermediateResponse(intermediateResponse);    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage message=ERR_PLUGIN_INTERMEDIATE_RESPONSE_PLUGIN_EXCEPTION.get(p.getPluginEntryDN(),operation.getConnectionID(),operation.getOperationID(),stackTraceToSingleLineString(e));      logger.error(message);      return PluginResult.IntermediateResponse.stopProcessing(false,DirectoryServer.getServerErrorResultCode(),message);    }    if (result == null) {      LocalizableMessage message=ERR_PLUGIN_INTERMEDIATE_RESPONSE_PLUGIN_RETURNED_NULL.get(p.getPluginEntryDN(),operation.getConnectionID(),operation.getOperationID());      logger.error(message);      return PluginResult.IntermediateResponse.stopProcessing(false,DirectoryServer.getServerErrorResultCode(),message);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.IntermediateResponse.continueOperationProcessing(true);  }  return result;}  }
class C{  public static Date timestampToDate(long timestamp){  Calendar cal=Calendar.getInstance();  cal.set(1904,0,1,0,0,0);  int hours=(int)(timestamp / 3600);  int seconds=(int)(timestamp - (long)hours * 3600L);  cal.add(Calendar.HOUR_OF_DAY,hours);  cal.add(Calendar.SECOND,seconds);  Date dat=cal.getTime();  return dat;}  }
class C{  public Dimension maximumLayoutSize(Container target){  Dimension size;synchronized (this) {    checkContainer(target);    checkRequests();    size=new Dimension(xTotal.maximum,yTotal.maximum);  }  Insets insets=target.getInsets();  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);  return size;}  }
class C{  public NO_RESOURCES(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public JKNotAllowedOperationException(Throwable cause){  super(cause);}  }
class C{  private void clear(){  webContainer.unregister(contextRoot);  logger.debug("Unregistered UI servlet at {}",contextRoot);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.MustSupportRefExternalURIElement createMustSupportRefExternalURIElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.MustSupportRefExternalURIElementImpl();}  }
class C{  public UnsupportedCallbackException(Callback callback,String msg){  super(msg);  this.callback=callback;}  }
class C{  private boolean validateSyntax(Set values,boolean encodePassword) throws SMSException {  AttributeSchema.Syntax syntax=as.getSyntax();  if (syntax == null)   return (true);  if ((syntax.equals(AttributeSchema.Syntax.STRING)) || (syntax.equals(AttributeSchema.Syntax.PARAGRAPH)) || (syntax.equals(AttributeSchema.Syntax.SCRIPT))|| (syntax.equals(AttributeSchema.Syntax.URL))|| (syntax.equals(AttributeSchema.Syntax.XML))|| (syntax.equals(AttributeSchema.Syntax.BOOLEAN))|| (syntax.equals(AttributeSchema.Syntax.DATE))) {    return (true);  }  if (syntax.equals(AttributeSchema.Syntax.EMAIL)) {    Iterator it=values.iterator();    while (it.hasNext()) {      String val=((String)it.next()).trim();      if ((values.size() == 1) && (val.length() == 0)) {        break;      }      if (!mailValidator.validate(val)) {        return (false);      }    }    return (true);  }  if (syntax.equals(AttributeSchema.Syntax.PASSWORD) || syntax.equals(AttributeSchema.Syntax.ENCRYPTED_PASSWORD)) {    if (encodePassword) {      Set encValues=new HashSet();      Set remValues=new HashSet();      for (Iterator it=values.iterator(); it.hasNext(); ) {        String value=(String)it.next();        try {          encValues.add(AccessController.doPrivileged(new EncodeAction(value)));        } catch (        Throwable e) {          debug.error("AttributeValidator: Unable to encode",e);          encValues.add(value);        }        remValues.add(value);      }      values.removeAll(remValues);      values.addAll(encValues);    }    return (true);  }  if (syntax.equals(AttributeSchema.Syntax.NUMERIC) || syntax.equals(AttributeSchema.Syntax.NUMBER)) {    Iterator it=values.iterator();    while (it.hasNext()) {      if (!numberValidator.validate((String)it.next())) {        return (false);      }    }    return (true);  }  if (syntax.equals(AttributeSchema.Syntax.PERCENT) || syntax.equals(AttributeSchema.Syntax.DECIMAL_NUMBER)) {    Iterator it=values.iterator();    while (it.hasNext()) {      if (!floatValidator.validate((String)it.next())) {        return (false);      }    }    return (true);  }  if (syntax.equals(AttributeSchema.Syntax.NUMBER_RANGE)) {    Iterator it=values.iterator();    while (it.hasNext()) {      String s=(String)it.next();      int i, start, end;      try {        i=Integer.parseInt(s);        String startRange=as.getStartRange();        String endRange=as.getEndRange();        if ((startRange == null) && (endRange == null)) {          return (true);        }        start=Integer.parseInt(startRange);        end=Integer.parseInt(endRange);      } catch (      Exception e) {        return (false);      }      if ((i < start) || (i > end)) {        return (false);      }    }    return (true);  }  if (syntax.equals(AttributeSchema.Syntax.DECIMAL_RANGE)) {    Iterator it=values.iterator();    while (it.hasNext()) {      String s=(String)it.next();      float f, start, end;      try {        f=Float.parseFloat(s);        String startRange=as.getStartRange();        String endRange=as.getEndRange();        if ((startRange == null) && (endRange == null)) {          return (true);        }        start=Float.parseFloat(startRange);        end=Float.parseFloat(endRange);      } catch (      Exception e) {        return (false);      }      if ((f < start) || (f > end)) {        return (false);      }    }    return (true);  }  if (syntax.equals(AttributeSchema.Syntax.DN)) {    Iterator it=values.iterator();    while (it.hasNext()) {      if (!dnValidator.validate((String)it.next()))       return (false);    }    return (true);  }  String[] args={as.getName()};  throw new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-invalid_attribute_syntax",args);}  }
class C{  private boolean isUpdateMsgFiltered(UpdateMsg updateMsg,DataServerHandler dsHandler){  final ServerStatus dsStatus=dsHandler.getStatus();  if (dsStatus == ServerStatus.BAD_GEN_ID_STATUS) {    if (logger.isTraceEnabled()) {      debug("updateMsg " + updateMsg.getCSN() + " will not be sent to directory server "+ dsHandler.getServerId()+ " with generation id "+ dsHandler.getGenerationId()+ " different from local "+ "generation id "+ generationId);    }    return true;  } else   if (dsStatus == ServerStatus.FULL_UPDATE_STATUS) {    if (logger.isTraceEnabled()) {      debug("updateMsg " + updateMsg.getCSN() + " will not be sent to directory server "+ dsHandler.getServerId()+ " as it is in full update");    }    return true;  }  return updateMsg instanceof ReplicaOfflineMsg;}  }
class C{  public NoninvertibleTransformException(String message){  super(message);}  }
class C{  public void open(HttpRoute route,HttpContext context,HttpParams params) throws IOException {  if (route == null) {    throw new IllegalArgumentException("Route must not be null.");  }  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker != null) && this.tracker.isConnected()) {    throw new IllegalStateException("Connection already open.");  }  this.tracker=new RouteTracker(route);  final HttpHost proxy=route.getProxyHost();  connOperator.openConnection(this.connection,(proxy != null) ? proxy : route.getTargetHost(),route.getLocalAddress(),context,params);  RouteTracker localTracker=tracker;  if (localTracker == null) {    throw new IOException("Request aborted");  }  if (proxy == null) {    localTracker.connectTarget(this.connection.isSecure());  } else {    localTracker.connectProxy(proxy,this.connection.isSecure());  }}  }
class C{  @Override public void init(int mode,Key key,AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException {  Utils.checkNotNull(key);  Utils.checkNotNull(params);  cipher.init(mode,key,params);}  }
class C{  protected void paintBorder(Graphics g){  if (isBorderPainted()) {    super.paintBorder(g);  }}  }
class C{  public PolicyEvaluationException(String message,Throwable nestedException,String reqId){  super(message,nestedException);  this.reqId=reqId;}  }
class C{  public void logp(Level logLevel,String sourceClass,String sourceMethod,String msg,Object[] params){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(params);  setResourceBundle(record);  log(record);}  }
class C{  public static <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return getService().dynamicQuery(dynamicQuery);}  }
class C{  public static SimpleBindRequest unmodifiableSimpleBindRequest(final SimpleBindRequest request){  if (request instanceof UnmodifiableSimpleBindRequestImpl) {    return request;  }  return new UnmodifiableSimpleBindRequestImpl(request);}  }
class C{  boolean isYoung(){  return mYoung;}  }
class C{  public void elementDecl(String name,String model) throws SAXException {}  }
class C{  protected FileFileFilter(){}  }
class C{  public void checkFileExists(File file) throws FileNotFoundException {  logger.config("Reading file:" + "path" + file.getPath() + ":abs:"+ file.getAbsolutePath());  if (!file.exists()) {    logger.severe("Unable to find:" + file.getPath());    throw new FileNotFoundException(ErrorMessage.UNABLE_TO_FIND_FILE.getMsg(file.getPath()));  }}  }
class C{  public boolean isDone(){  TaskState ts=getTaskState();  return ts != null && TaskState.isDone(ts);}  }
class C{  private void checkETag(String eTag,JSONObject json,String tokenId) throws JSONException, CoreTokenException {  String tokenType=getSingleStringValue(json,CoreTokenConstants.TOKEN_TYPE);  if (CoreTokenConfigService.noETagEnfTypes.contains(tokenType)) {    return;  }  if (CoreTokenUtils.debug.messageEnabled()) {    CoreTokenUtils.debug.message("OpenSSOCoreTokenStore.checkETag: " + "check etag for token type " + tokenType + ", ETag="+ eTag);  }  if ((eTag == null) || (eTag.length() == 0)) {    throw new CoreTokenException(220,null,409);  }  String tokenETag=getSingleStringValue(json,CoreTokenConstants.VERSION_TAG);  if ((tokenETag == null) || !tokenETag.equals(eTag)) {    Object[] args={eTag};    throw new CoreTokenException(208,args,412);  }}  }
class C{  public TRANSIENT(){  this("");}  }
class C{  public PluginResult.IntermediateResponse invokeSearchResultReferencePlugins(SearchReferenceSearchOperation searchOperation,SearchResultReference searchReference){  PluginResult.IntermediateResponse result=null;  for (  DirectoryServerPlugin p : searchResultReferencePlugins) {    if (isInternalOperation(searchOperation,p)) {      continue;    }    try {      result=p.processSearchReference(searchOperation,searchReference);    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage message=ERR_PLUGIN_SEARCH_REFERENCE_PLUGIN_EXCEPTION.get(p.getPluginEntryDN(),searchOperation.getConnectionID(),searchOperation.getOperationID(),searchReference.getReferralURLString(),stackTraceToSingleLineString(e));      logger.error(message);      return PluginResult.IntermediateResponse.stopProcessing(false,DirectoryServer.getServerErrorResultCode(),message);    }    if (result == null) {      LocalizableMessage message=ERR_PLUGIN_SEARCH_REFERENCE_PLUGIN_RETURNED_NULL.get(p.getPluginEntryDN(),searchOperation.getConnectionID(),searchOperation.getOperationID(),searchReference.getReferralURLString());      logger.error(message);      return PluginResult.IntermediateResponse.stopProcessing(false,DirectoryServer.getServerErrorResultCode(),message);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.IntermediateResponse.continueOperationProcessing(true);  }  return result;}  }
class C{  public GenericObject next(ListIterator li){  return (NetObject)super.next(li);}  }
class C{  @Override public int compareTo(ZoneOffsetTransition transition){  return this.getInstant().compareTo(transition.getInstant());}  }
class C{  private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);}  }
class C{  public void testShiftRight4(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=45;  byte rBytes[]={12,1,-61,39,-11,-94,-55};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void reset(){  addCount.set(0);  deleteCount.set(0);  modifyCount.set(0);  modifyDNCount.set(0);}  }
class C{  public Map<String,Object> convertDataToObjects(Map<String,String> data){  Map<String,Object> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      results.put(key,data.get(key));    }  }  return results;}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (cv != null) {    return cv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public boolean mustCheckUnsavedChanges(){  return displayedEntryPanel != null && saveChanges.isVisible() && saveChanges.isEnabled();}  }
class C{  private boolean handleActualRequestFlow(final HttpServletRequest req,final HttpServletResponse res){  if (req.getHeaderNames() != null) {    while (req.getHeaderNames().hasMoreElements()) {      String header=req.getHeaderNames().nextElement();      if (!acceptedHeaders.contains(header.toLowerCase()) && !simpleHeaders.contains(header.toLowerCase())) {        DEBUG.warning("CORS Fail - Headers do not match allowed headers.");        return false;      }    }  }  final String originHeader=req.getHeader(CORSConstants.ORIGIN);  if (exposedHeaders.size() > 0) {    res.setHeader(CORSConstants.AC_EXPOSE_HEADERS,csvHelper.listToCSVString(exposedHeaders));  }  addOriginAndCredsHeaders(res,originHeader);  return true;}  }
class C{  protected void doPut(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  String protocol=req.getProtocol();  String msg=lStrings.getString("http.method_put_not_supported");  if (protocol.endsWith("1.1")) {    resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED,msg);  } else {    resp.sendError(HttpServletResponse.SC_BAD_REQUEST,msg);  }}  }
class C{  public ServerEditSDKViewBean(){  super("ServerEditSDK",DEFAULT_DISPLAY_URL);}  }
class C{  public static Point destination(Point point1,double distance,double bearing,String units) throws TurfException {  double degrees2radians=Math.PI / 180;  double radians2degrees=180 / Math.PI;  Position coordinates1=point1.getCoordinates();  double longitude1=degrees2radians * coordinates1.getLongitude();  double latitude1=degrees2radians * coordinates1.getLatitude();  double bearingRad=degrees2radians * bearing;  double radians=TurfHelpers.distanceToRadians(distance,units);  double latitude2=Math.asin(Math.sin(latitude1) * Math.cos(radians) + Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearingRad));  double longitude2=longitude1 + Math.atan2(Math.sin(bearingRad) * Math.sin(radians) * Math.cos(latitude1),Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));  return Point.fromCoordinates(Position.fromCoordinates(radians2degrees * longitude2,radians2degrees * latitude2));}  }
class C{  public boolean containsValue(Object value,boolean identity){  V[] valueTable=this.valueTable;  if (value == null) {    if (hasZeroValue && zeroValue == null)     return true;    long[] keyTable=this.keyTable;    for (int i=capacity + stashSize; i-- > 0; )     if (keyTable[i] != EMPTY && valueTable[i] == null)     return true;  } else   if (identity) {    if (value == zeroValue)     return true;    for (int i=capacity + stashSize; i-- > 0; )     if (valueTable[i] == value)     return true;  } else {    if (hasZeroValue && value.equals(zeroValue))     return true;    for (int i=capacity + stashSize; i-- > 0; )     if (value.equals(valueTable[i]))     return true;  }  return false;}  }
class C{  private static DN decode(final SubstringReader reader,final Schema schema,final Map<String,DN> cache){  reader.skipWhitespaces();  if (reader.remaining() == 0) {    return ROOT_DN;  }  final RDN rdn;  try {    rdn=RDN.decode(reader,schema);  } catch (  final UnknownSchemaElementException e) {    throw new LocalizedIllegalArgumentException(ERR_DN_TYPE_NOT_FOUND.get(reader.getString(),e.getMessageObject()));  }  LinkedList<Pair<Integer,RDN>> parentRDNs=null;  DN parent=null;  while (reader.remaining() > 0 && reader.read() == ',') {    reader.skipWhitespaces();    if (reader.remaining() == 0) {      throw new LocalizedIllegalArgumentException(ERR_ATTR_SYNTAX_DN_ATTR_NO_NAME.get(reader.getString()));    }    reader.mark();    final String parentString=reader.read(reader.remaining());    parent=cache.get(parentString);    if (parent != null) {      break;    }    reader.reset();    if (parentRDNs == null) {      parentRDNs=new LinkedList<>();    }    parentRDNs.add(Pair.of(reader.pos(),RDN.decode(reader,schema)));  }  if (parent == null) {    parent=ROOT_DN;  }  if (parentRDNs != null) {    Iterator<Pair<Integer,RDN>> iter=parentRDNs.descendingIterator();    int parentsLeft=parentRDNs.size();    while (iter.hasNext()) {      Pair<Integer,RDN> parentRDN=iter.next();      parent=new DN(schema,parent,parentRDN.getSecond());      if (parentsLeft-- < DN_CACHE_SIZE) {        cache.put(reader.getString().substring(parentRDN.getFirst()),parent);      }    }  }  return new DN(schema,parent,rdn);}  }
class C{  String addListener(SSOToken token,ServiceListener listener){  registerListener(token);  String id=SMSUtils.getUniqueID();synchronized (listenerObjects) {    listenerObjects.put(id,listener);  }  if (debug.messageEnabled()) {    debug.message("ServiceConfigManagerImpl(" + serviceName + "):addListener Class: "+ listener.getClass().getName()+ " Listener ID: "+ id);  }  return (id);}  }
class C{  public void paintSliderBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintSliderBorder(context,g,x,y,w,h);}  }
class C{  public synchronized <T>void sendEvent(T event,String key){  sendEvent(event,key,false);}  }
class C{  public AMSearchResults searchFilteredRoles(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchFilteredRoles(wildcard,null,searchControl);}  }
class C{  public void deleteArtworkField() throws KeyNotFoundException {}  }
class C{  public DigestMD5SASLMechanismHandler(){  super();}  }
class C{  Representation toRepresentation(Context context,Request request,Response response,AuthorizationToken authorizationToken,String redirectUri){  final Form tokenForm=toForm(authorizationToken);  final Reference redirectReference=new Reference(redirectUri);  if (authorizationToken.isFragment()) {    redirectReference.setFragment(tokenForm.getQueryString());  } else {    final Iterator<Parameter> iter=tokenForm.iterator();    while (iter.hasNext()) {      redirectReference.addQueryParameter(iter.next());    }  }  if (isFormPostRequest(requestFactory.create(request))) {    return getFormPostRepresentation(context,authorizationToken,redirectReference.toString());  }  final Redirector dispatcher=new Redirector(context,redirectReference.toString(),Redirector.MODE_CLIENT_FOUND);  dispatcher.handle(request,response);  return response == null ? null : response.getEntity();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  EntityReference entRef;  Element entElement;  CharacterData entElementText;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entRef=(EntityReference)genderNode.getFirstChild();  assertNotNull("entRefNotNull",entRef);  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  entElementText=(CharacterData)entElement.getFirstChild();  assertNotNull("entElementTextNotNull",entElementText);{    boolean success=false;    try {      entElementText.setNodeValue("newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  @Override public void onDowngrade(SQLiteDatabase db,int oldVersion,int newVersion){  dropAllTables(db);  onCreate(db);}  }
class C{  public void eventDispatched(AWTEvent event){  getListener().eventDispatched(event);}  }
class C{  private int evictToRecoverBytes(int bytesToRecover){  int entriesToEvict=0;  if (bytesToRecover > 0) {    for (int j=dynamicTable.length - 1; j >= nextHeaderIndex && bytesToRecover > 0; j--) {      bytesToRecover-=dynamicTable[j].hpackSize;      dynamicTableByteCount-=dynamicTable[j].hpackSize;      headerCount--;      entriesToEvict++;    }    System.arraycopy(dynamicTable,nextHeaderIndex + 1,dynamicTable,nextHeaderIndex + 1 + entriesToEvict,headerCount);    nextHeaderIndex+=entriesToEvict;  }  return entriesToEvict;}  }
class C{  public TreePath(Object singlePath){  if (singlePath == null)   throw new IllegalArgumentException("path in TreePath must be non null.");  lastPathComponent=singlePath;  parentPath=null;}  }
class C{  @SuppressWarnings("unused") public boolean hasChangingColor(){  return items[0].hasColor();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(500);  sb.append("<Description xmlns=\"").append(DiscoConstants.DISCO_NS).append("\"");  if ((id != null) && id.length() != 0) {    sb.append(" id=\"").append(id).append("\"");  }  sb.append(">");  if (mechID != null) {    Iterator iter=mechID.iterator();    while (iter.hasNext()) {      sb.append("<SecurityMechID>").append((String)iter.next()).append("</SecurityMechID>");    }  }  if (credentialRef != null) {    Iterator iter2=credentialRef.iterator();    while (iter2.hasNext()) {      sb.append("<CredentialRef>").append((String)iter2.next()).append("</CredentialRef>");    }  }  if (soapEndpoint != null) {    sb.append("<Endpoint>").append(soapEndpoint).append("</Endpoint>");    if (soapAction != null) {      sb.append("<SoapAction>").append(soapAction).append("</SoapAction>");    }  } else {    sb.append("<WsdlURI>").append(wsdlURI).append("</WsdlURI>");    sb.append("<ServiceNameRef");    String prefix=null;    String namespace=serviceNameRef.getNamespaceURI();    if ((namespace != null) && namespace.length() != 0) {      sb.append(" xmlns:");      prefix=serviceNameRef.getPrefix();      if ((prefix == null) || prefix.length() == 0) {        prefix="ns1";      }      sb.append(prefix).append("=\"").append(namespace).append("\"");    }    sb.append(">");    if (prefix != null) {      sb.append(prefix).append(":");    }    sb.append(serviceNameRef.getLocalPart()).append("</ServiceNameRef>");  }  sb.append("</Description>");  return sb.toString();}  }
class C{  public static RecordProperties fromJson(JsonValue jsonProperties){  RecordProperties recordProperties=new RecordProperties();  recordProperties.issueID=jsonProperties.get(RecordConstants.ISSUE_ID_LABEL).required().asLong();  recordProperties.referenceID=jsonProperties.get(RecordConstants.REFERENCE_ID_LABEL).required().asString();  if (!REFERENCE_ID_PATTERN.matcher(recordProperties.referenceID).matches()) {    debug.message("{} format is incorrect. Format expected: {}. Value: '{}'",RecordConstants.REFERENCE_ID_LABEL,REFERENCE_ID_REGEX,recordProperties.referenceID);    throw new IllegalArgumentException(RecordConstants.REFERENCE_ID_LABEL + " format is incorrect. Format expected: " + REFERENCE_ID_REGEX+ " . Value: '"+ recordProperties.referenceID+ "'");  }  recordProperties.description=jsonProperties.get(RecordConstants.DESCRIPTION_LABEL).required().asString();  fromThreadDumpJson(recordProperties,jsonProperties);  fromConfigExportJson(recordProperties,jsonProperties);  fromDebugLogsJson(recordProperties,jsonProperties);  recordProperties.zipEnable=jsonProperties.get(RecordConstants.ZIP_ENABLE_LABEL).required().asBoolean();  return recordProperties;}  }
class C{  public void addBackup(BackupInfo backupInfo) throws ConfigException {  String backupID=backupInfo.getBackupID();  if (backups.containsKey(backupID)) {    throw new ConfigException(ERR_BACKUPDIRECTORY_ADD_DUPLICATE_ID.get(backupID,path));  }  backups.put(backupID,backupInfo);}  }
class C{  private void markDeleted(){  ArrayList childElements=getChildElements();  if (childElements != null && childElements.size() > 0) {    for (int i=0; i < childElements.size(); i++) {      XMLElement nextChild=(XMLElement)childElements.get(i);      nextChild.markDeleted();    }  }  isDeleted=true;}  }
class C{  public static void i(String tag,String msg,Object... args){  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof DigitList))   return false;  DigitList other=(DigitList)obj;  if (count != other.count || decimalAt != other.decimalAt)   return false;  for (int i=0; i < count; i++)   if (digits[i] != other.digits[i])   return false;  return true;}  }
class C{  private void flushInternal() throws IOException {  if (count > 0) {    out.write(buf,0,count);    count=0;  }}  }
class C{  @Override public void println() throws IOException {  newLine();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textparseintolistofelements.class,args);}  }
class C{  protected Transferable createTransferable(JComponent c){  Object[] values=null;  if (c instanceof JList) {    values=((JList)c).getSelectedValues();  } else   if (c instanceof JTable) {    JTable table=(JTable)c;    int[] rows=table.getSelectedRows();    if (rows != null) {      values=new Object[rows.length];      for (int i=0; i < rows.length; i++) {        values[i]=table.getValueAt(rows[i],0);      }    }  }  if (values == null || values.length == 0) {    return null;  }  StringBuffer plainBuf=new StringBuffer();  StringBuffer htmlBuf=new StringBuffer();  htmlBuf.append("<html>\n<body>\n<ul>\n");  for (  Object obj : values) {    String val=((obj == null) ? "" : obj.toString());    plainBuf.append(val + "\n");    htmlBuf.append("  <li>" + val + "\n");  }  plainBuf.deleteCharAt(plainBuf.length() - 1);  htmlBuf.append("</ul>\n</body>\n</html>");  return new FileTransferable(plainBuf.toString(),htmlBuf.toString(),values);}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public SQLSyntaxErrorException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public void put(E e){  offer(e);}  }
class C{  public void startDocument() throws org.xml.sax.SAXException {  m_stylesheetLevel++;  pushSpaceHandling(false);}  }
class C{  public StylesheetHandler(TransformerFactoryImpl processor) throws TransformerConfigurationException {  Class func=org.apache.xalan.templates.FuncDocument.class;  m_funcTable.installFunction("document",func);  func=org.apache.xalan.templates.FuncFormatNumb.class;  m_funcTable.installFunction("format-number",func);  m_optimize=((Boolean)processor.getAttribute(TransformerFactoryImpl.FEATURE_OPTIMIZE)).booleanValue();  m_incremental=((Boolean)processor.getAttribute(TransformerFactoryImpl.FEATURE_INCREMENTAL)).booleanValue();  m_source_location=((Boolean)processor.getAttribute(TransformerFactoryImpl.FEATURE_SOURCE_LOCATION)).booleanValue();  init(processor);}  }
class C{  public static boolean verifyOcspCertificates(BasicOCSPResp ocsp,KeyStore keystore,String provider){  try {    for (    X509Certificate certStoreX509 : SignUtils.getCertificates(keystore)) {      try {        return SignUtils.isSignatureValid(ocsp,certStoreX509,provider);      } catch (      Exception ex) {      }    }  } catch (  Exception e) {  }  return false;}  }
class C{  @Override public TagResult generateValue(TemplateEntry templateEntry,TemplateValue templateValue){  List<TemplateValue> values=templateEntry.getValues(attributeType);  if (values == null || values.isEmpty()) {    return TagResult.OMIT_FROM_ENTRY;  }  if (assertionValue == null) {    return TagResult.SUCCESS_RESULT;  }  for (  TemplateValue v : values) {    if (assertionValue.equals(v.getValue().toString())) {      return TagResult.SUCCESS_RESULT;    }  }  return TagResult.OMIT_FROM_ENTRY;}  }
class C{  int run(final String[] args){  final LocalizableMessage toolDescription=INFO_MAKELDIF_TOOL_DESCRIPTION.get();  final ArgumentParser argParser=new ArgumentParser(MakeLDIF.class.getName(),toolDescription,false,true,1,1,"template-file-path");  argParser.setVersionHandler(newSdkVersionHandler());  argParser.setShortToolDescription(REF_SHORT_DESC_MAKELDIF.get());  argParser.setDocToolDescriptionSupplement(SUPPLEMENT_DESCRIPTION_MAKELDIF.get());  BooleanArgument showUsage;  IntegerArgument randomSeed;  StringArgument ldifFile;  StringArgument resourcePath;  StringArgument constants;  IntegerArgument wrapColumn;  try {    resourcePath=StringArgument.builder(OPTION_LONG_RESOURCE_PATH).shortIdentifier('r').description(INFO_MAKELDIF_DESCRIPTION_RESOURCE_PATH.get()).docDescriptionSupplement(SUPPLEMENT_DESCRIPTION_RESOURCE_PATH.get()).valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    ldifFile=StringArgument.builder(OPTION_LONG_OUTPUT_LDIF_FILENAME).shortIdentifier(OPTION_SHORT_OUTPUT_LDIF_FILENAME).description(INFO_MAKELDIF_DESCRIPTION_LDIF.get()).valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    randomSeed=IntegerArgument.builder(OPTION_LONG_RANDOM_SEED).shortIdentifier(OPTION_SHORT_RANDOM_SEED).description(INFO_MAKELDIF_DESCRIPTION_SEED.get()).defaultValue(0).valuePlaceholder(INFO_SEED_PLACEHOLDER.get()).buildAndAddToParser(argParser);    constants=StringArgument.builder(OPTION_LONG_CONSTANT).shortIdentifier('c').description(INFO_MAKELDIF_DESCRIPTION_CONSTANT.get()).multiValued().valuePlaceholder(INFO_CONSTANT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    showUsage=BooleanArgument.builder(OPTION_LONG_HELP).shortIdentifier(OPTION_SHORT_HELP).description(INFO_MAKELDIF_DESCRIPTION_HELP.get()).buildAndAddToParser(argParser);    wrapColumn=IntegerArgument.builder("wrapColumn").shortIdentifier('w').description(INFO_MAKELDIF_DESCRIPTION_WRAP_COLUMN.get()).lowerBound(0).defaultValue(0).valuePlaceholder(INFO_MAKELDIF_WRAP_COLUMN_PLACEHOLDER.get()).buildAndAddToParser(argParser);    argParser.setUsageArgument(showUsage,getOutputStream());  } catch (  ArgumentException ae) {    errPrintln(ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return EXIT_CODE_FAILURE;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(getErrStream(),ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return EXIT_CODE_FAILURE;  }  if (argParser.usageOrVersionDisplayed()) {    return 0;  }  final String templatePath=argParser.getTrailingArguments().get(0);  return run(templatePath,resourcePath,ldifFile,randomSeed,constants,wrapColumn);}  }
class C{  @Override public void addIntHeader(String name,int value){  if (!included)   ((HttpServletResponse)getResponse()).addIntHeader(name,value);}  }
class C{  public void clear(){  initialize();}  }
class C{  public void removeNode(int n){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  this.removeElement(n);}  }
class C{  public boolean isPowered(){  return (getData() & 0x8) == 0x8;}  }
class C{  protected void processItemEvent(ItemEvent e){  ItemListener listener=itemListener;  if (listener != null) {    listener.itemStateChanged(e);  }}  }
class C{  @Override public void doGet(HttpServletRequest req,HttpServletResponse res) throws IOException, ServletException {  if (debug > 0)   log("SSIServlet.doGet()");  requestHandler(req,res);}  }
class C{  public PluginResult.PreParse invokePreParseBindPlugins(PreParseBindOperation bindOperation){  PluginResult.PreParse result=null;  for (  DirectoryServerPlugin p : preParseBindPlugins) {    if (isInternalOperation(bindOperation,p)) {      continue;    }    try {      result=p.doPreParse(bindOperation);    } catch (    Exception e) {      return handlePreParseException(e,bindOperation,p);    }    if (result == null) {      return handlePreParseResult(bindOperation,p);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PreParse.continueOperationProcessing();  }  return result;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  configDN=DN.valueOf("cn=Referential Integrity ,cn=Plugins,cn=config");}  }
class C{  public void revalidate(){}  }
class C{  public boolean verifyXMLSignature(org.w3c.dom.Document document,java.lang.String certAlias) throws XMLSignatureException {  return sp.verifyXMLSignature(document,certAlias);}  }
class C{  protected void BooleanExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_BOOL);  Expr();  int opLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos;  if (opLen == 2) {    error(XPATHErrorResources.ER_BOOLEAN_ARG_NO_LONGER_OPTIONAL,null);  }  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,opLen);}  }
class C{  public boolean addIfAbsent(E e){  Object[] snapshot=getArray();  return indexOf(e,snapshot,0,snapshot.length) >= 0 ? false : addIfAbsent(e,snapshot);}  }
class C{  public static boolean equalsOnSystem(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SYSTEM);}  }
class C{  public boolean isFocusTraversable(JComboBox a){  boolean returnValue=((ComboBoxUI)(uis.elementAt(0))).isFocusTraversable(a);  for (int i=1; i < uis.size(); i++) {    ((ComboBoxUI)(uis.elementAt(i))).isFocusTraversable(a);  }  return returnValue;}  }
class C{  protected void paintComponent(Graphics g){  if (ui != null) {    super.paintComponent(g);  } else   if (isOpaque()) {    g.setColor(getBackground());    g.fillRect(0,0,getWidth(),getHeight());  }}  }
class C{  public COSNotFoundException(String msg,Throwable rootCause){  super(msg,rootCause);}  }
class C{  public void updateUI(){  setUI((MenuItemUI)UIManager.getUI(this));  if (popupMenu != null) {    popupMenu.setUI((PopupMenuUI)UIManager.getUI(popupMenu));  }}  }
class C{  public JMXAlertHandler(){  super();}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSNameRegistrationRequest.toXMLString: " + "providerId is null in the request with requestId:" + requestID);    String[] args={requestID};    throw new FSMsgException("nullProviderIdWRequestId",args);  }  if ((requestID == null) || (requestID.length() == 0)) {    requestID=SAMLUtils.generateID();    if (requestID == null) {      FSUtils.debug.error("FSNameRegistrationRequest.toXMLString: " + "couldn't generate RequestID.");      throw new FSMsgException("errorGenerateID",null);    }  }  StringBuffer xml=new StringBuffer(1000);  if (includeHeader) {    xml.append("<?xml version=\"1.0\" encoding=\"").append(IFSConstants.DEFAULT_ENCODING).append("\" ?>\n");  }  String prefix="";  String uri="";  String uriSAML="";  if (includeNS) {    prefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      uri=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      uri=IFSConstants.LIB_NAMESPACE_STRING;    }    uriSAML=IFSConstants.assertionDeclareStr;  }  String instantString=DateUtils.toUTCDateFormat(issueInstant);  if (requestID != null) {    xml.append("<").append(prefix).append("RegisterNameIdentifierRequest").append(uri).append(uriSAML);    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION && id != null && !(id.length() == 0)) {      xml.append(" id=\"").append(id).append("\" ");    }    xml.append(" RequestID=\"").append(requestID).append("\" ").append(" MajorVersion=\"").append(majorVersion).append("\" ").append(" MinorVersion=\"").append(minorVersion).append("\" ").append(" IssueInstant=\"").append(instantString).append("\"").append(">");    if ((respondWiths != null) && (respondWiths != Collections.EMPTY_LIST)) {      Iterator i=respondWiths.iterator();      while (i.hasNext()) {        xml.append("<").append(prefix).append("RespondWith>").append((String)i.next()).append("</").append(prefix).append("RespondWith>");      }    }    if (signed) {      if (signatureString != null) {        xml.append(signatureString);      } else       if (signature != null) {        signatureString=XMLUtils.print(signature);        xml.append(signatureString);      }    }    xml.append("<").append(prefix).append("ProviderID").append(">").append(providerId).append("</").append(prefix).append("ProviderID").append(">");    if (idpProvidedNameIdentifier != null && idpProvidedNameIdentifier.getName().length() != 0) {      xml.append(idpProvidedNameIdentifier.toXMLString());    }    if (spProvidedNameIdentifier != null && spProvidedNameIdentifier.getName().length() != 0) {      xml.append(spProvidedNameIdentifier.toXMLString());    }    if (oldProvidedNameIdentifier != null && oldProvidedNameIdentifier.getName().length() != 0) {      xml.append(oldProvidedNameIdentifier.toXMLString());    }    if (relayState != null) {      xml.append("<").append(prefix).append("RelayState").append(">").append(relayState).append("</").append(prefix).append("RelayState").append(">");    }    xml.append("</").append(prefix).append("RegisterNameIdentifierRequest>");  } else {    FSUtils.debug.error("FSNameRegistrationRequest.toString: " + "requestID is null ");    throw new FSMsgException("nullRequestID",null);  }  return xml.toString();}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  EntityResourceOfferingViewBeanBase vb=(EntityResourceOfferingViewBeanBase)getReturnToViewBean();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public HashPrintServiceAttributeSet(PrintServiceAttribute[] attributes){  super(attributes,PrintServiceAttribute.class);}  }
class C{  protected String urlString() throws ParseException {  StringBuilder retval=new StringBuilder();  lexer.selectLexer("charLexer");  while (lexer.hasMoreChars()) {    char la=lexer.lookAhead(0);    if (la == ' ' || la == '\t' || la == '\n' || la == '>' || la == '<')     break;    lexer.consume(0);    retval.append(la);  }  return retval.toString();}  }
class C{  public Set searchDynamicGroups(String wildcard,int level,String groupSearchTemplate,Map avPairs) throws AMException, SSOException {  if (AMCompliance.isComplianceUserDeletionEnabled() && AMCompliance.isAncestorOrgDeleted(super.token,super.entryDN,AMObject.ORGANIZATION)) {    if (debug.warningEnabled()) {      debug.warning("AMOrganization.searchAssDynGroup: " + "ancestor org is deleted for: " + super.entryDN + " :returning empty set");    }    return Collections.EMPTY_SET;  }  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.DYNAMIC_GROUP,groupSearchTemplate),wildcard,avPairs,level);}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        int vdim=ELEMENT_OF + (u & DIM);        v=vdim | OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      int tdim=(((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (t & DIM);      int udim=(((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (u & DIM);      v=Math.min(tdim,udim) | OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  NodeList childList;  boolean success;  Node addressNode;  Node appendedChild;  Node importedDocFrag;  doc=(Document)load("staffNS",true);  docFragment=doc.createDocumentFragment();  childList=doc.getElementsByTagNameNS("*","address");  addressNode=childList.item(0);  appendedChild=docFragment.appendChild(addressNode);  importedDocFrag=doc.importNode(docFragment,true);  success=importedDocFrag.hasChildNodes();  assertTrue("documentimportnode10",success);}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public static void fill(byte[] array,byte value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public void test_createSocket(){  SSLSocketFactory sf=(SSLSocketFactory)SSLSocketFactory.getDefault();  int sport=startServer("test_createSocket()");  int[] invalid={Integer.MIN_VALUE,-1,65536,Integer.MAX_VALUE};  try {    Socket st=new Socket("localhost",sport);    Socket s=sf.createSocket(st,"localhost",sport,false);    assertFalse(s.isClosed());  } catch (  Exception ex) {    fail("Unexpected exception " + ex);  }  try {    Socket st=new Socket("localhost",sport);    Socket s=sf.createSocket(st,"localhost",sport,true);    s.close();    assertTrue(st.isClosed());  } catch (  Exception ex) {    fail("Unexpected exception " + ex);  }  try {    sf.createSocket(null,"localhost",sport,true);    fail("IOException wasn't thrown");  } catch (  IOException ioe) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalid.length; i++) {    try {      Socket s=sf.createSocket(new Socket(),"localhost",1080,false);      fail("IOException wasn't thrown");    } catch (    IOException ioe) {    }  }  try {    Socket st=new Socket("bla-bla",sport);    Socket s=sf.createSocket(st,"bla-bla",sport,false);    fail("UnknownHostException wasn't thrown: " + "bla-bla");  } catch (  UnknownHostException uhe) {  }catch (  Exception e) {    fail(e + " was thrown instead of UnknownHostException");  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.ReferenceType createReferenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.ReferenceTypeImpl();}  }
class C{  public static UIOutput createOutputText(){  return JSFComponentFactory.createOutputText(null);}  }
class C{  public final void tunnelTarget(boolean secure){  if (!this.connected) {    throw new IllegalStateException("No tunnel unless connected.");  }  if (this.proxyChain == null) {    throw new IllegalStateException("No tunnel without proxy.");  }  this.tunnelled=TunnelType.TUNNELLED;  this.secure=secure;}  }
class C{  public boolean isBackToBackUserAgent(){  return super.isBackToBackUserAgent;}  }
class C{  public double[] board_to_dsn(Polyline polyline){  int lines_len=polyline.plaline_len();  double[] result=new double[4 * lines_len];  for (int index=0; index < lines_len; ++index) {    PlaLineInt aline=polyline.plaline(index);    PlaPointFloat a=aline.point_a.to_float();    PlaPointFloat b=aline.point_b.to_float();    result[4 * index + 0]=board_to_dsn(a.v_x) + base_x;    result[4 * index + 1]=board_to_dsn(a.v_y) + base_y;    result[4 * index + 2]=board_to_dsn(b.v_x) + base_x;    result[4 * index + 3]=board_to_dsn(b.v_y) + base_y;  }  return result;}  }
class C{  public static Set delimStringToSet(String str,String delimiter){  Set valSet=new HashSet();  StringTokenizer st=new StringTokenizer(str,delimiter);  while (st.hasMoreTokens()) {    valSet.add(st.nextToken().trim());  }  return valSet;}  }
class C{  private void populateComponentMaps(){  final HashMap<FieldName,LabelFieldDescriptor> hm=new HashMap<>();  final LabelFieldDescriptor baseDNLabelDescriptor=new LabelFieldDescriptor(INFO_BASE_DN_LABEL.get(),INFO_BASE_DN_TOOLTIP.get(),LabelFieldDescriptor.FieldType.TEXTFIELD,LabelFieldDescriptor.LabelType.PRIMARY,UIFactory.DN_FIELD_SIZE);  hm.put(FieldName.DIRECTORY_BASE_DN,baseDNLabelDescriptor);  final LabelFieldDescriptor importPathLabelDescriptor=new LabelFieldDescriptor(INFO_IMPORT_PATH_LABEL.get(),INFO_IMPORT_PATH_TOOLTIP.get(),LabelFieldDescriptor.FieldType.TEXTFIELD,LabelFieldDescriptor.LabelType.SECONDARY,UIFactory.PATH_FIELD_SIZE);  hm.put(FieldName.LDIF_PATH,importPathLabelDescriptor);  final LabelFieldDescriptor entryNumberLabelDescriptor=new LabelFieldDescriptor(INFO_NUMBER_ENTRIES_LABEL.get(),INFO_NUMBER_ENTRIES_TOOLTIP.get(),LabelFieldDescriptor.FieldType.TEXTFIELD,LabelFieldDescriptor.LabelType.SECONDARY,UIFactory.NUMBER_ENTRIES_FIELD_SIZE);  hm.put(FieldName.NUMBER_ENTRIES,entryNumberLabelDescriptor);  for (  final FieldName fieldName : hm.keySet()) {    final LabelFieldDescriptor desc=hm.get(fieldName);    final String defaultValue=fieldName == FieldName.NUMBER_ENTRIES ? Integer.toString(defaultUserData.getNewSuffixOptions().getNumberEntries()) : getDefaultValue(fieldName);    final JTextComponent field=UIFactory.makeJTextComponent(desc,defaultValue);    final JLabel label=UIFactory.makeJLabel(desc);    label.setLabelFor(field);    hmFields.put(fieldName,field);    hmLabels.put(fieldName,label);  }  final JLabel dataLabel=UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,INFO_DIRECTORY_DATA_LABEL.get(),UIFactory.TextStyle.PRIMARY_FIELD_VALID);  hmLabels.put(FieldName.DATA_OPTIONS,dataLabel);  final JLabel backendTypeLabel=UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,INFO_BACKEND_TYPE_LABEL.get(),UIFactory.TextStyle.PRIMARY_FIELD_VALID);  hmLabels.put(FieldName.BACKEND_TYPE,backendTypeLabel);  createDirectoryDataChoiceRadioButton(dataLabel);  checkEnablingState();}  }
class C{  public ExternalChangelogRequestControl(boolean isCritical,MultiDomainServerState cookie){  super(OID_ECL_COOKIE_EXCHANGE_CONTROL,isCritical);  this.cookie=cookie;}  }
class C{  @Override public int hashCode(){  int hashCode=0;  hashCode+=scheme.hashCode();  if (host != null) {    hashCode+=toLowerCase(host).hashCode();  }  hashCode+=port;  try {    hashCode+=getBaseDN().hashCode();  } catch (  Exception e) {    logger.traceException(e);    if (rawBaseDN != null) {      hashCode+=rawBaseDN.hashCode();    }  }  hashCode+=getScope().intValue();  for (  String attr : attributes) {    hashCode+=toLowerCase(attr).hashCode();  }  try {    hashCode+=getFilter().hashCode();  } catch (  Exception e) {    logger.traceException(e);    if (rawFilter != null) {      hashCode+=rawFilter.hashCode();    }  }  for (  String ext : extensions) {    hashCode+=ext.hashCode();  }  return hashCode;}  }
class C{  @Override public void sendUrgentData(int data) throws IOException {  throw new SocketException("Method sendUrgentData() is not supported.");}  }
class C{  private Proxy nextProxy() throws IOException {  if (!hasNextProxy()) {    throw new SocketException("No route to " + address.url().host() + "; exhausted proxy configurations: "+ proxies);  }  Proxy result=proxies.get(nextProxyIndex++);  resetNextInetSocketAddress(result);  return result;}  }
class C{  public void testCallingCompletedTerminatedScenario(){  try {    Request invite=createTiInviteRequest(null,null,null);    ClientTransaction tran=null;    try {      eventCollector.collectRequestEvent(riSipProvider);      tran=tiSipProvider.getNewClientTransaction(invite);      tran.sendRequest();    } catch (    SipException ex) {      throw new TiUnexpectedError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    waitForMessage();    RequestEvent inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (inviteReceivedEvent == null || inviteReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The invite request was not received by the RI!");    assertEquals(TransactionState.CALLING,tran.getState());    try {      eventCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    if (tran.getRetransmitTimer() > MESSAGES_ARRIVE_FOR)     sleep((long)tran.getRetransmitTimer() - MESSAGES_ARRIVE_FOR);    waitForMessage();    inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNotNull("The invite request was not retransmitted!",inviteReceivedEvent);    assertNotNull("The invite request was not retransmitted!",inviteReceivedEvent.getRequest());    assertEquals(Request.INVITE,inviteReceivedEvent.getRequest().getMethod());    assertEquals(TransactionState.CALLING,tran.getState());    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    SipEventCollector ackCollector=new SipEventCollector();    try {      ackCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    Response busyHere=null;    try {      busyHere=riMessageFactory.createResponse(Response.BUSY_HERE,inviteReceivedEvent.getRequest());      addStatus(inviteReceivedEvent.getRequest(),busyHere);      ((ToHeader)busyHere.getHeader("to")).setTag("ack-to-test");      riSipProvider.sendResponse((Response)busyHere.clone());    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send a BUSY HERE response back to the TI",ex);    }    waitForMessage();    ResponseEvent responseEvent=eventCollector.extractCollectedResponseEvent();    assertNotNull("The Tested Implementation did not pass a 300-699 response to the TU!",responseEvent);    assertNotNull("The Tested Implementation did not pass a 300-699 response to the TU!",responseEvent.getResponse());    assertSame("The BUSY_HERE response was not associated with the right transaction",tran,responseEvent.getClientTransaction());    assertSame("A response different from BUSY_HERE was passed to the TU",tran,responseEvent.getClientTransaction());    assertEquals("The ClientTransaction did not pass in the COMPLETED state after " + "receiving 300-699 final response",tran.getState(),TransactionState.COMPLETED);    RequestEvent ackReceivedEvent=ackCollector.extractCollectedRequestEvent();    assertNotNull("The TI did not send an ACK request",ackReceivedEvent);    assertNotNull("The TI did not send an ACK request",ackReceivedEvent.getRequest());    assertEquals(Request.ACK,ackReceivedEvent.getRequest().getMethod());    waitForMessage();    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    try {      ackCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    try {      riSipProvider.sendResponse((Response)busyHere.clone());    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send a BUSY HERE response back to the TI",ex);    }    waitForMessage();    responseEvent=eventCollector.extractCollectedResponseEvent();    assertNull("The Tested Implementation passed a retransmitted 300-699 response " + "to the TU instead of just silently acknowledging it!",responseEvent);    assertEquals("The ClientTransaction did not stay long enough in the COMPLETED " + "state.",tran.getState(),TransactionState.COMPLETED);    ackReceivedEvent=ackCollector.extractCollectedRequestEvent();    assertNotNull("The TI did not send an ACK request to the second response",ackReceivedEvent);    assertNotNull("The TI did not send an ACK request to the second response",ackReceivedEvent.getRequest());    assertEquals(Request.ACK,ackReceivedEvent.getRequest().getMethod());    assertEquals("The To header field in the ACK MUST equal the To header field " + " in the response being acknowledged","ack-to-test",((ToHeader)ackReceivedEvent.getRequest().getHeader("to")).getTag());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public TraditionalWorkQueueMonitor(TraditionalWorkQueue workQueue){  this.workQueue=workQueue;}  }
class C{  protected boolean processKeyBinding(KeyStroke ks,KeyEvent e,int condition,boolean pressed){  InputMap map=getInputMap(condition,false);  ActionMap am=getActionMap(false);  if (map != null && am != null && isEnabled()) {    Object binding=map.get(ks);    Action action=(binding == null) ? null : am.get(binding);    if (action != null) {      return SwingUtilities.notifyAction(action,ks,e,this,e.getModifiers());    }  }  return false;}  }
class C{  public synchronized E pop(){  E obj;  int len=size();  obj=peek();  removeElementAt(len - 1);  return obj;}  }
class C{  public boolean isFromWithParam(){  return m_isFromWithParam;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  NodeList elementList;  Element testName;  Node firstChild;  String childValue;  doc=(Document)load("staff",true);  root=doc.getDocumentElement();  root.normalize();  elementList=root.getElementsByTagName("name");  testName=(Element)elementList.item(2);  firstChild=testName.getFirstChild();  childValue=firstChild.getNodeValue();  assertEquals("elementNormalizeAssert","Roger\n Jones",childValue);}  }
class C{  public FSSAMLServiceViewBean(){  super("FSSAMLService");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public void refresh(){  board.RoutingBoard routing_board=board_handling.get_routing_board();  ComboBoxModel<RuleViaInfoList> new_model=new DefaultComboBoxModel<RuleViaInfoList>(routing_board.brd_rules.via_rules);  via_rule_combo_box.setModel(new_model);  freert.rules.ClearanceMatrix clearance_matrix=board_handling.get_routing_board().brd_rules.clearance_matrix;  if (this.clearance_combo_box.get_class_count() != routing_board.brd_rules.clearance_matrix.get_class_count()) {    this.clearance_combo_box.adjust(clearance_matrix);  }  this.clearance_combo_box.setSelectedIndex(board_handling.itera_settings.get_manual_trace_clearance_class());  int via_rule_index=board_handling.itera_settings.get_manual_via_rule_index();  if (via_rule_index < this.via_rule_combo_box.getItemCount()) {    this.via_rule_combo_box.setSelectedIndex(board_handling.itera_settings.get_manual_via_rule_index());  }  this.set_selected_layer(this.layer_combo_box.get_selected_layer());  this.repaint();}  }
class C{  public void testCase16(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={0};  byte rBytes[]={1,2,3,4,5,6,7};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static String jsonAttributeName(String name){  return "\"" + name + "\":";}  }
class C{  private void ensureOpen() throws IOException {  if (out == null)   throw new IOException("Stream closed");}  }
class C{  private void checkParamIndex(int idx) throws SQLException {  if ((idx < 1)) {    throw new SQLException("Invalid Parameter Index");  }}  }
class C{  private List<Integer> ChangeableViewGroupExist(int iCheckingItem,int iDraggingItem){  List<Integer> list=new ArrayList<>();  int xOri=listViews.get(iCheckingItem).getPoint().x;  int yOri=listViews.get(iCheckingItem).getPoint().y;  int xDes=xOri + listViews.get(iDraggingItem).getWidthNum();  int yDes=yOri + listViews.get(iDraggingItem).getHeightNum();  int iArea=0;  for (int x=0; x < listViews.size(); ++x) {    DetailView detailView=listViews.get(x);    Point pBegin=detailView.getPoint();    Point pEnd=new Point(pBegin.x + detailView.getWidthNum(),pBegin.y + detailView.getHeightNum());    if (pBegin.x >= xOri && pBegin.y >= yOri && pEnd.x <= xDes && pEnd.y <= yDes) {      list.add(x);      iArea+=detailView.getHeightNum() * detailView.getWidthNum();    }  }  if (iArea != listViews.get(iDraggingItem).getHeightNum() * listViews.get(iDraggingItem).getWidthNum()) {    list.clear();  }  return list;}  }
class C{  public boolean containsValue(Object value){  Node<K,V>[] tab;  V v;  if ((tab=table) != null && size > 0) {    for (int i=0; i < tab.length; ++i) {      for (Node<K,V> e=tab[i]; e != null; e=e.next) {        if ((v=e.value) == value || (value != null && value.equals(v)))         return true;      }    }  }  return false;}  }
class C{  public static MethodNode generateGetter(String methodName,String fieldName,String className,String fieldDesc){  MethodNode methodNode=new MethodNode(ACC_PUBLIC,methodName,"()" + fieldDesc,null,null);  methodNode.instructions.insert(new VarInsnNode(ALOAD,0));  methodNode.instructions.insert(new FieldInsnNode(GETFIELD,className,fieldName,fieldDesc));  methodNode.instructions.insert(new InsnNode(Type.getType(fieldDesc).getOpcode(IRETURN)));  return methodNode;}  }
class C{  public AccessToken refreshToken(OAuth2Request request) throws InvalidClientException, InvalidRequestException, BadRequestException, ServerException, ExpiredTokenException, InvalidGrantException, InvalidScopeException, NotFoundException {  Reject.ifTrue(isEmpty(request.<String>getParameter(REFRESH_TOKEN)),"Missing parameter, 'refresh_token'");  confirmationKeyValidator.validateRequest(request);  final OAuth2ProviderSettings providerSettings=providerSettingsFactory.get(request);  final OAuth2Uris uris=urisFactory.get(request);  final ClientRegistration clientRegistration=clientAuthenticator.authenticate(request,uris.getTokenEndpoint());  final String tokenId=request.getParameter(REFRESH_TOKEN);  final RefreshToken refreshToken=tokenStore.readRefreshToken(request,tokenId);  if (refreshToken == null) {    logger.error("Refresh token does not exist for id: " + tokenId);    throw new InvalidRequestException("RefreshToken does not exist");  }  AuditRequestContext.putProperty(OAUTH2_GRANT.toString(),refreshToken.getAuditTrackingId());  if (!refreshToken.getClientId().equalsIgnoreCase(clientRegistration.getClientId())) {    logger.error("Refresh Token was issued to a different client id: " + clientRegistration.getClientId());    throw new InvalidRequestException("Token was issued to a different client");  }  if (refreshToken.isExpired()) {    logger.warn("Refresh Token is expired for id: " + refreshToken.getTokenId());    throw new InvalidGrantException("grant is invalid");  }  final Set<String> scope=splitScope(request.<String>getParameter(SCOPE));  final String grantType=request.getParameter(GRANT_TYPE);  final Set<String> tokenScope;  if (refreshToken.getScope() != null) {    tokenScope=new TreeSet<String>(refreshToken.getScope());  } else {    tokenScope=new TreeSet<String>();  }  final Set<String> validatedScope=providerSettings.validateRefreshTokenScope(clientRegistration,Collections.unmodifiableSet(scope),Collections.unmodifiableSet(tokenScope),request);  final String validatedClaims=providerSettings.validateRequestedClaims(refreshToken.getClaims());  RefreshToken newRefreshToken=null;  if (providerSettings.issueRefreshTokensOnRefreshingToken()) {    newRefreshToken=tokenStore.createRefreshToken(grantType,clientRegistration.getClientId(),refreshToken.getResourceOwnerId(),refreshToken.getRedirectUri(),refreshToken.getScope(),request,validatedClaims,refreshToken.getAuthGrantId(),refreshToken.getAuthTimeSeconds());    tokenStore.deleteRefreshToken(request,refreshToken.toString());  }  final AccessToken accessToken=tokenStore.createAccessToken(grantType,OAuth2Constants.Bearer.BEARER,null,refreshToken.getResourceOwnerId(),clientRegistration.getClientId(),refreshToken.getRedirectUri(),validatedScope,newRefreshToken == null ? refreshToken : newRefreshToken,null,validatedClaims,request,refreshToken.getAuthTimeSeconds());  if (newRefreshToken != null) {    accessToken.addExtraData(REFRESH_TOKEN,newRefreshToken.toString());  }  providerSettings.additionalDataToReturnFromTokenEndpoint(accessToken,request);  if (validatedScope != null && !validatedScope.isEmpty()) {    accessToken.addExtraData(SCOPE,joinScope(validatedScope));  }  return accessToken;}  }
class C{  public AttrSet read(java.security.Principal principal,Guid guid) throws UMSException {  return read(principal,guid,null);}  }
class C{  public KeyTable(int doc,PrefixResolver nscontext,QName name,Vector keyDeclarations,XPathContext xctxt) throws javax.xml.transform.TransformerException {  m_docKey=doc;  m_keyDeclarations=keyDeclarations;  KeyIterator ki=new KeyIterator(name,keyDeclarations);  m_keyNodes=new XNodeSet(ki);  m_keyNodes.allowDetachToRelease(false);  m_keyNodes.setRoot(doc,xctxt);}  }
class C{  int[] findNearestVacantArea(int pixelX,int pixelY,int spanX,int spanY,int[] result){  return findNearestVacantArea(pixelX,pixelY,spanX,spanY,spanX,spanY,result,null);}  }
