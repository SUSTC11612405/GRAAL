class C{  public Builder obsolete(final boolean isObsolete){  this.isObsolete=isObsolete;  return this;}  }
class C{  public GeneralNamesException(){  super();}  }
class C{  @Override public void initialize(MessagePolicy requestPolicy,MessagePolicy responsePolicy,CallbackHandler handler,Map<String,Object> options) throws AuthenticationException {  this.handler=handler;}  }
class C{  public SystemConfigurationException(String errorCode,Object[] args){  super(BUNDLE_NAME,errorCode,args);}  }
class C{  public JLabel(){  this("",null,LEADING);}  }
class C{  public void test_Constructor01(){  try {    new KeyStoreBuilderParameters((KeyStore.Builder)null);    fail();  } catch (  NullPointerException expected) {  }  KeyStore.ProtectionParameter pp=new ProtectionParameterImpl();  KeyStore.Builder bld=KeyStore.Builder.newInstance("testType",null,pp);  assertNotNull("Null object KeyStore.Builder",bld);  KeyStoreBuilderParameters ksp=new KeyStoreBuilderParameters(bld);  assertNotNull(ksp.getParameters());}  }
class C{  public PrivateMLet(URL[] urls,boolean delegateToCLR){  super(urls,delegateToCLR);}  }
class C{  public NumberFormatStringTokenizer(String str){  this.str=str;  maxPosition=str.length();}  }
class C{  @Override public void close() throws IOException {  if (response == null || closed)   return;  flush();  if (out != null)   out.close();  out=null;  closed=true;}  }
class C{  protected void registerChildren(){  super.registerChildren();  registerChild(PW_QUESTION_TITLE,StaticTextField.class);  registerChild(BUTTON_OK,Button.class);  registerChild(BUTTON_PREVIOUS,Button.class);  registerChild(PASSWORD_RESET_TILEDVIEW,PWResetQuestionTiledView.class);}  }
class C{  public Executor(Logger logger,File cmd){  this.logger=logger;  this.cmd=cmd.getAbsolutePath();}  }
class C{  public BERSet(ASN1Encodable[] a){  super(a,false);}  }
class C{  private HashMapEntry<K,V>[] makeTable(int newCapacity){  @SuppressWarnings("unchecked") HashMapEntry<K,V>[] newTable=(HashMapEntry<K,V>[])new HashMapEntry[newCapacity];  table=newTable;  threshold=(newCapacity >> 1) + (newCapacity >> 2);  return newTable;}  }
class C{  public boolean registerClient(LDAPClientConnection clientConnection){  if (shutdownRequested) {    clientConnection.disconnect(DisconnectReason.SERVER_SHUTDOWN,true,ERR_LDAP_REQHANDLER_REJECT_DUE_TO_SHUTDOWN.get());    return false;  }synchronized (pendingConnectionsLock) {    pendingConnections.add(clientConnection);  }  selector.wakeup();  return true;}  }
class C{  public SCPlatform30ViewBean(){  super("SCPlatform30",DEFAULT_DISPLAY_URL,AMAdminConstants.PLATFORM_SERVICE);}  }
class C{  public String doFederation(HttpServletRequest request,HttpServletResponse response) throws FSPostLoginException {  String metaAlias=request.getParameter(IFSConstants.META_ALIAS);  String LRURL=request.getParameter(IFSConstants.LRURL);  String selectedProvider=request.getParameter(IFSConstants.SELECTEDPROVIDER);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSPostLogin::doFederation metaAlias " + metaAlias);    FSUtils.debug.message("FSPostLogin::doFederation lrurl " + LRURL);    FSUtils.debug.message("FSPostLogin::doFederation selected provider" + selectedProvider);  }  Map headerMap=new HashMap();  Enumeration headerNames=request.getHeaderNames();  while (headerNames.hasMoreElements()) {    String hn=headerNames.nextElement().toString();    String hv=request.getHeader(hn);    headerMap.put(hn,hv);  }  FSLoginHelper plh=new FSLoginHelper(request);  Map retMap=new HashMap();  String authLevel=null;  HttpSession httpSession=request.getSession(false);  if (httpSession != null) {    authLevel=(String)httpSession.getAttribute(IFSConstants.AUTH_LEVEL_KEY);  }  try {    retMap=plh.createAuthnRequest(headerMap,LRURL,authLevel,metaAlias,selectedProvider,true);  } catch (  FSLoginHelperException fsLoginExp) {    FSUtils.debug.error("FSPostLogin::doFederate in exception ",fsLoginExp);    throw new FSPostLoginException("FSPostLogin::doFederate exception " + fsLoginExp.getMessage());  }  Map retHeaderMap=(Map)retMap.get(IFSConstants.HEADER_KEY);  Iterator hdrNames=retHeaderMap.keySet().iterator();  while (hdrNames.hasNext()) {    String name=hdrNames.next().toString();    String value=(String)retHeaderMap.get(name);    response.addHeader(name,value);  }  String urlKey=(String)retMap.get(IFSConstants.URL_KEY);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSPostLogin::doFederation returning with " + urlKey);  }  return urlKey;}  }
class C{  final Node<K,V>[] resize(){  Node<K,V>[] oldTab=table;  int oldCap=(oldTab == null) ? 0 : oldTab.length;  int oldThr=threshold;  int newCap, newThr=0;  if (oldCap > 0) {    if (oldCap >= MAXIMUM_CAPACITY) {      threshold=Integer.MAX_VALUE;      return oldTab;    } else     if ((newCap=oldCap << 1) < MAXIMUM_CAPACITY && oldCap >= DEFAULT_INITIAL_CAPACITY)     newThr=oldThr << 1;  } else   if (oldThr > 0)   newCap=oldThr; else {    newCap=DEFAULT_INITIAL_CAPACITY;    newThr=(int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);  }  if (newThr == 0) {    float ft=(float)newCap * loadFactor;    newThr=(newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE);  }  threshold=newThr;  @SuppressWarnings({"rawtypes","unchecked"}) Node<K,V>[] newTab=(Node<K,V>[])new Node[newCap];  table=newTab;  if (oldTab != null) {    for (int j=0; j < oldCap; ++j) {      Node<K,V> e;      if ((e=oldTab[j]) != null) {        oldTab[j]=null;        if (e.next == null)         newTab[e.hash & (newCap - 1)]=e; else         if (e instanceof TreeNode)         ((TreeNode<K,V>)e).split(this,newTab,j,oldCap); else {          Node<K,V> loHead=null, loTail=null;          Node<K,V> hiHead=null, hiTail=null;          Node<K,V> next;          do {            next=e.next;            if ((e.hash & oldCap) == 0) {              if (loTail == null)               loHead=e; else               loTail.next=e;              loTail=e;            } else {              if (hiTail == null)               hiHead=e; else               hiTail.next=e;              hiTail=e;            }          } while ((e=next) != null);          if (loTail != null) {            loTail.next=null;            newTab[j]=loHead;          }          if (hiTail != null) {            hiTail.next=null;            newTab[j + oldCap]=hiHead;          }        }      }    }  }  return newTab;}  }
class C{  private void clampPositionToTopStackEnd(StackScrollState.ViewState childViewState,int childHeight){  childViewState.yTranslation=Math.max(childViewState.yTranslation,mCollapsedSize - childHeight);}  }
class C{  public void testConstructorStringRadix36(){  String value="skdjgocvhdjfkl20jndjkf347ejg457";  int radix=36;  byte rBytes[]={0,-12,-116,112,-105,12,-36,66,108,66,-20,-37,-15,108,-7,52,-99,-109,-8,-45,-5};  BigInteger aNumber=new BigInteger(value,radix);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public int rtf(){  return m_dtmRoot;}  }
class C{  private void siftDown(int k,RunnableScheduledFuture<?> key){  int half=size >>> 1;  while (k < half) {    int child=(k << 1) + 1;    RunnableScheduledFuture<?> c=queue[child];    int right=child + 1;    if (right < size && c.compareTo(queue[right]) > 0)     c=queue[child=right];    if (key.compareTo(c) <= 0)     break;    queue[k]=c;    setIndex(c,k);    k=child;  }  queue[k]=key;  setIndex(key,k);}  }
class C{  public static DragSourceListener add(DragSourceListener a,DragSourceListener b){  return (DragSourceListener)addInternal(a,b);}  }
class C{  public void testConstructor_I() throws Exception {  int[] port_invalid={-1,65536,Integer.MIN_VALUE,Integer.MAX_VALUE};  SSLServerSocket ssl=new mySSLServerSocket(0);  for (int i=0; i < port_invalid.length; i++) {    try {      new mySSLServerSocket(port_invalid[i]);      fail("IllegalArgumentException should be thrown");    } catch (    IllegalArgumentException expected) {    }  }  try {    new mySSLServerSocket(ssl.getLocalPort());    fail("IOException Expected when opening an already opened port");  } catch (  IOException expected) {  }}  }
class C{  public MessageBytes addValue(String name){  MimeHeaderField mh=createHeader();  mh.getName().setString(name);  return mh.getValue();}  }
class C{  private void buildInvoke(MethodVisitor methodVisitor,CodeInfo info,Ins.Invoke invoke,boolean requireValue){  Label label=new Label();  if (invoke instanceof Ins.InvokeSpecial) {    buildValueAccess(methodVisitor,info,((Ins.InvokeSpecial)invoke).target(),true);    for (    Value v : invoke.arguments()) {      buildValueAccess(methodVisitor,info,v,true);    }    Ins.InvokeSpecial invokeSpecial=(Ins.InvokeSpecial)invoke;    SInvokable invokable=invokeSpecial.invokable();    String name;    String desc;    if (invokable instanceof SMethodDef) {      name=((SMethodDef)invokable).name();      desc=methodDesc(invokable.getReturnType(),invokable.getParameters().stream().map(null).collect(Collectors.toList()));    } else     if (invokable instanceof SConstructorDef) {      name="<init>";      desc=methodDesc(VoidType.get(),invokable.getParameters().stream().map(null).collect(Collectors.toList()));    } else     throw new LtBug("cannot invoke special on " + invokable);    String owner=typeToInternalName(invokable.declaringType());    methodVisitor.visitLabel(label);    methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL,owner,name,desc,false);    info.pop(1 + invoke.arguments().size());    if (!invoke.invokable().getReturnType().equals(VoidType.get())) {      STypeDef typeDef=invoke.invokable().getReturnType();      if (typeDef.equals(DoubleTypeDef.get()) || typeDef.equals(LongTypeDef.get()))       info.push(CodeInfo.Size._2); else       info.push(CodeInfo.Size._1);    }  } else   if (invoke instanceof Ins.InvokeVirtual) {    buildValueAccess(methodVisitor,info,((Ins.InvokeVirtual)invoke).target(),true);    for (    Value v : invoke.arguments()) {      buildValueAccess(methodVisitor,info,v,true);    }    Ins.InvokeVirtual invokeSpecial=(Ins.InvokeVirtual)invoke;    SInvokable invokable=invokeSpecial.invokable();    String name;    String desc;    if (invokable instanceof SMethodDef) {      name=((SMethodDef)invokable).name();      desc=methodDesc(invokable.getReturnType(),invokable.getParameters().stream().map(null).collect(Collectors.toList()));    } else     throw new LtBug("cannot invoke virtual on " + invokable);    String owner=typeToInternalName(invokable.declaringType());    methodVisitor.visitLabel(label);    methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,owner,name,desc,false);    info.pop(1 + invoke.arguments().size());    if (!invoke.invokable().getReturnType().equals(VoidType.get())) {      STypeDef typeDef=invoke.invokable().getReturnType();      if (typeDef.equals(DoubleTypeDef.get()) || typeDef.equals(LongTypeDef.get()))       info.push(CodeInfo.Size._2); else       info.push(CodeInfo.Size._1);    }  } else   if (invoke instanceof Ins.InvokeStatic) {    for (    Value v : invoke.arguments()) {      buildValueAccess(methodVisitor,info,v,true);    }    Ins.InvokeStatic invokeStatic=(Ins.InvokeStatic)invoke;    SInvokable invokable=invokeStatic.invokable();    String name;    String desc;    if (invokable instanceof SMethodDef) {      name=((SMethodDef)invokable).name();      desc=methodDesc(invokable.getReturnType(),invokable.getParameters().stream().map(null).collect(Collectors.toList()));    } else     throw new LtBug("cannot invoke static on " + invokable);    String owner=typeToInternalName(invokable.declaringType());    methodVisitor.visitLabel(label);    methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,owner,name,desc,false);    info.pop(invoke.arguments().size());    if (!invoke.invokable().getReturnType().equals(VoidType.get())) {      STypeDef typeDef=invoke.invokable().getReturnType();      if (typeDef.equals(DoubleTypeDef.get()) || typeDef.equals(LongTypeDef.get()))       info.push(CodeInfo.Size._2); else       info.push(CodeInfo.Size._1);    }  } else   if (invoke instanceof Ins.InvokeInterface) {    buildValueAccess(methodVisitor,info,((Ins.InvokeInterface)invoke).target(),true);    for (    Value v : invoke.arguments()) {      buildValueAccess(methodVisitor,info,v,true);    }    Ins.InvokeInterface invokeInterface=(Ins.InvokeInterface)invoke;    SInvokable invokable=invokeInterface.invokable();    String name;    String desc;    if (invokable instanceof SMethodDef) {      name=((SMethodDef)invokable).name();      desc=methodDesc(invokable.getReturnType(),invokable.getParameters().stream().map(null).collect(Collectors.toList()));    } else     throw new LtBug("cannot invoke interface on " + invokable);    String owner=typeToInternalName(invokable.declaringType());    methodVisitor.visitLabel(label);    methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE,owner,name,desc,true);    info.pop(1 + invoke.arguments().size());    if (!invoke.invokable().getReturnType().equals(VoidType.get())) {      STypeDef typeDef=invoke.invokable().getReturnType();      if (typeDef.equals(DoubleTypeDef.get()) || typeDef.equals(LongTypeDef.get()))       info.push(CodeInfo.Size._2); else       info.push(CodeInfo.Size._1);    }  } else   if (invoke instanceof Ins.InvokeDynamic) {    for (    Value v : invoke.arguments()) {      buildValueAccess(methodVisitor,info,v,true);    }    Ins.InvokeDynamic invokeDynamic=(Ins.InvokeDynamic)invoke;    SInvokable bootstrapMethod=invokeDynamic.invokable();    methodVisitor.visitLabel(label);    methodVisitor.visitInvokeDynamicInsn(invokeDynamic.methodName(),methodDesc(invokeDynamic.returnType(),invokeDynamic.arguments().stream().map(null).collect(Collectors.toList())),new Handle(invokeDynamic.indyType(),typeToInternalName(bootstrapMethod.declaringType()),((SMethodDef)bootstrapMethod).name(),methodDesc(bootstrapMethod.getReturnType(),bootstrapMethod.getParameters().stream().map(null).collect(Collectors.toList())),false),getIndyArgs(invokeDynamic));    info.pop(invoke.arguments().size());    if (!invoke.invokable().getReturnType().equals(VoidType.get())) {      STypeDef typeDef=invoke.invokable().getReturnType();      if (typeDef.equals(DoubleTypeDef.get()) || typeDef.equals(LongTypeDef.get()))       info.push(CodeInfo.Size._2); else       info.push(CodeInfo.Size._1);    }  } else   throw new LtBug("unknown invoke type " + invoke);  VisitLineNumber(methodVisitor,invoke.line_col(),label);  if (invoke.invokable().getReturnType().equals(VoidType.get()) && requireValue) {    methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,"lt/lang/Unit","get","()Llt/lang/Unit;",false);    info.push(CodeInfo.Size._1);  }}  }
class C{  public Map<String,Object> toMap(){  Map<String,Object> map=new HashMap<>();  map.put("id",category);  map.put("category",MESSAGE_CATEGORY.get(category));  List<Map<String,Object>> messageEntries=new LinkedList<>();  for (  MessageRefEntry entry : messages) {    messageEntries.add(entry.toMap());  }  map.put("entries",messageEntries);  return map;}  }
class C{  public static String downloadString(URL url,Proxy proxy,int readTimeout,int socketTimeout,String encoding){  HttpURLConnection connection=null;  InputStream inputStream=null;  try {    connection=(HttpURLConnection)(proxy == null ? url.openConnection() : url.openConnection(proxy));    connection.setRequestProperty("User-Agent","Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.85 Safari/537.36");    connection.setReadTimeout(readTimeout);    connection.setConnectTimeout(socketTimeout);    connection.connect();    if (connection.getResponseCode() >= 400) {      throw new IOException("Response status is " + connection.getResponseCode());    }    if (connection.getResponseCode() >= 301) {      String location=connection.getHeaderField("Location");      return downloadString(new URL(location),proxy,readTimeout,socketTimeout,encoding);    }    if (connection.getResponseCode() == 204) {      return StringUtils.EMPTY;    }    inputStream=connection.getInputStream();    return IOUtils.toString(inputStream,encoding);  } catch (  IOException ex) {    if (LOG.isDebugEnabled()) {      LOG.warn("Error downloading string from {}:\r\n",url,ex);    } else {      LOG.warn("Cannot download string from {}: {}",url,ex.getMessage());    }    return null;  } finally {    IOUtils.closeQuietly(inputStream);    if (connection != null) {      connection.disconnect();    }  }}  }
class C{  public void delete(String privilegeName) throws EntitlementException {  delete(privilegeName,true);}  }
class C{  public SQLNonTransientException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public void requestFocus(){}  }
class C{  protected void processServletContainerInitializers(){  List<ServletContainerInitializer> detectedScis;  try {    WebappServiceLoader<ServletContainerInitializer> loader=new WebappServiceLoader<>(context);    detectedScis=loader.load(ServletContainerInitializer.class);  } catch (  IOException e) {    log.error(sm.getString("contextConfig.servletContainerInitializerFail",context.getName()),e);    ok=false;    return;  }  for (  ServletContainerInitializer sci : detectedScis) {    initializerClassMap.put(sci,new HashSet<Class<?>>());    HandlesTypes ht;    try {      ht=sci.getClass().getAnnotation(HandlesTypes.class);    } catch (    Exception e) {      if (log.isDebugEnabled()) {        log.info(sm.getString("contextConfig.sci.debug",sci.getClass().getName()),e);      } else {        log.info(sm.getString("contextConfig.sci.info",sci.getClass().getName()));      }      continue;    }    if (ht == null) {      continue;    }    Class<?>[] types=ht.value();    if (types == null) {      continue;    }    for (    Class<?> type : types) {      if (type.isAnnotation()) {        handlesTypesAnnotations=true;      } else {        handlesTypesNonAnnotations=true;      }      Set<ServletContainerInitializer> scis=typeInitializerMap.get(type);      if (scis == null) {        scis=new HashSet<>();        typeInitializerMap.put(type,scis);      }      scis.add(sci);    }  }}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle alloc=a.getBounds();  c.paintIcon(getContainer(),g,alloc.x,alloc.y);}  }
class C{  public void paintSliderBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public TypeName(String fullName,String nickname){  this.topLevelAlias=TypeAlias.create(fullName,nickname);  this.pattern=null;  this.innerTypeNames=Arrays.asList();}  }
class C{  protected int findAndEliminateRedundant(int start,int firstOccuranceIndex,ExpressionOwner firstOccuranceOwner,ElemTemplateElement psuedoVarRecipient,Vector paths) throws org.w3c.dom.DOMException {  MultistepExprHolder head=null;  MultistepExprHolder tail=null;  int numPathsFound=0;  int n=paths.size();  Expression expr1=firstOccuranceOwner.getExpression();  if (DEBUG)   assertIsLocPathIterator(expr1,firstOccuranceOwner);  boolean isGlobal=(paths == m_absPaths);  LocPathIterator lpi=(LocPathIterator)expr1;  int stepCount=countSteps(lpi);  for (int j=start; j < n; j++) {    ExpressionOwner owner2=(ExpressionOwner)paths.elementAt(j);    if (null != owner2) {      Expression expr2=owner2.getExpression();      boolean isEqual=expr2.deepEquals(lpi);      if (isEqual) {        LocPathIterator lpi2=(LocPathIterator)expr2;        if (null == head) {          head=new MultistepExprHolder(firstOccuranceOwner,stepCount,null);          tail=head;          numPathsFound++;        }        tail.m_next=new MultistepExprHolder(owner2,stepCount,null);        tail=tail.m_next;        paths.setElementAt(null,j);        numPathsFound++;      }    }  }  if ((0 == numPathsFound) && isGlobal) {    head=new MultistepExprHolder(firstOccuranceOwner,stepCount,null);    numPathsFound++;  }  if (null != head) {    ElemTemplateElement root=isGlobal ? psuedoVarRecipient : findCommonAncestor(head);    LocPathIterator sharedIter=(LocPathIterator)head.m_exprOwner.getExpression();    ElemVariable var=createPseudoVarDecl(root,sharedIter,isGlobal);    if (DIAGNOSE_MULTISTEPLIST)     System.err.println("Created var: " + var.getName() + (isGlobal ? "(Global)" : ""));    QName uniquePseudoVarName=var.getName();    while (null != head) {      ExpressionOwner owner=head.m_exprOwner;      if (DIAGNOSE_MULTISTEPLIST)       diagnoseLineNumber(owner.getExpression());      changeToVarRef(uniquePseudoVarName,owner,paths,root);      head=head.m_next;    }    paths.setElementAt(var.getSelect(),firstOccuranceIndex);  }  return numPathsFound;}  }
class C{  public void reset(){  count=0;  totalTime=0;}  }
class C{  private ValueEncoder(){}  }
class C{  private void determineSyntaxAndEncoding(String absFileName,Jar jar,String jspConfigPageEnc) throws JasperException, IOException {  isXml=false;  boolean isExternal=false;  boolean revert=false;  JspConfig jspConfig=ctxt.getOptions().getJspConfig();  JspConfig.JspProperty jspProperty=jspConfig.findJspProperty(absFileName);  if (jspProperty.isXml() != null) {    isXml=JspUtil.booleanValue(jspProperty.isXml());    isExternal=true;  } else   if (absFileName.endsWith(".jspx") || absFileName.endsWith(".tagx")) {    isXml=true;    isExternal=true;  }  if (isExternal && !isXml) {    sourceEnc=jspConfigPageEnc;    if (sourceEnc != null) {      return;    }    sourceEnc="ISO-8859-1";  } else {    Object[] ret=XMLEncodingDetector.getEncoding(absFileName,jar,ctxt,err);    sourceEnc=(String)ret[0];    if (((Boolean)ret[1]).booleanValue()) {      isEncodingSpecifiedInProlog=true;    }    if (((Boolean)ret[2]).booleanValue()) {      isBomPresent=true;    }    skip=((Integer)ret[3]).intValue();    if (!isXml && sourceEnc.equals("UTF-8")) {      sourceEnc="ISO-8859-1";      revert=true;    }  }  if (isXml) {    return;  }  JspReader jspReader=null;  try {    jspReader=new JspReader(ctxt,absFileName,sourceEnc,jar,err);  } catch (  FileNotFoundException ex) {    throw new JasperException(ex);  }  Mark startMark=jspReader.mark();  if (!isExternal) {    jspReader.reset(startMark);    if (hasJspRoot(jspReader)) {      if (revert) {        sourceEnc="UTF-8";      }      isXml=true;      return;    } else {      if (revert && isBomPresent) {        sourceEnc="UTF-8";      }      isXml=false;    }  }  if (!isBomPresent) {    sourceEnc=jspConfigPageEnc;    if (sourceEnc == null) {      sourceEnc=getPageEncodingForJspSyntax(jspReader,startMark);      if (sourceEnc == null) {        sourceEnc="ISO-8859-1";        isDefaultPageEncoding=true;      }    }  }}  }
class C{  public void slashSlashComments(boolean flag){  slashSlashComments=flag;}  }
class C{  public void initializeAdministrationConnector(AdministrationConnectorCfg configuration) throws ConfigException, InitializationException {  this.config=configuration;  adminConnectionHandler=new LDAPConnectionHandler(new SynchronousStrategy(),FRIENDLY_NAME);  adminConnectionHandler.initializeConnectionHandler(serverContext,new LDAPConnectionCfgAdapter(config));  adminConnectionHandler.setAdminConnectionHandler();  config.addChangeListener(this);}  }
class C{  public DERSet(){}  }
class C{  public CopyOnWriteArraySet(){  al=new CopyOnWriteArrayList<E>();}  }
class C{  public java.lang.String toString(){  StringBuffer sb=new StringBuffer(2000);  sb.append("<QueryResponse xmlns=\"").append(DiscoConstants.DISCO_NS).append("\"");  if ((id != null) && id.length() != 0) {    sb.append(" id=\"").append(id).append("\"");  }  sb.append(">");  if (status != null) {    sb.append(status.toString());  }  if (offerings != null) {    Iterator iter=offerings.iterator();    while (iter.hasNext()) {      sb.append(((ResourceOffering)iter.next()).toString());    }  }  if (creds != null) {    sb.append("<Credentials xmlns=\"").append(DiscoConstants.DISCO_NS).append("\">");    Iterator iter2=creds.iterator();    while (iter2.hasNext()) {      sb.append(iter2.next().toString());    }    sb.append("</Credentials>");  }  sb.append("</QueryResponse>");  return sb.toString();}  }
class C{  private static long bit(int bitIndex){  return 1L << (bitIndex & ((1 << 6) - 1));}  }
class C{  public void update(final List<ScanResult> results){  for (  final ScanResult result : results) {    final ExtendedBluetoothDevice device=findDevice(result);    if (device == null) {      mDevices.add(new ExtendedBluetoothDevice(result));    } else {      device.name=result.getScanRecord() != null ? result.getScanRecord().getDeviceName() : null;      device.rssi=result.getRssi();    }  }  notifyDataSetChanged();}  }
class C{  public Object clone(){  SessionPropertyCondition theClone=null;  try {    theClone=(SessionPropertyCondition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (properties != null) {    theClone.properties=new HashMap();    Iterator it=properties.keySet().iterator();    while (it.hasNext()) {      Object o=it.next();      Set values=new HashSet();      values.addAll((Set)properties.get(o));      theClone.properties.put(o,values);    }  }  return theClone;}  }
class C{  public boolean isAccessToUnderlyingConnectionAllowed(){  return this.accessToUnderlyingConnectionAllowed;}  }
class C{  private String replaceTokens(String s,String alertType,String alertID,String alertMessage){  return s.replace("%%alert-type%%",alertType).replace("%%alert-id%%",alertID).replace("%%alert-message%%",alertMessage).replace("\\n","\r\n");}  }
class C{  protected AWTEventMulticaster(EventListener a,EventListener b){  this.a=a;  this.b=b;}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public static boolean isFinal(int mod){  return (mod & ACC_FINAL) != 0;}  }
class C{  public boolean removeListener(Subject adminSubject,String url) throws EntitlementException {  if (registry != null) {    return registry.removeListener(adminSubject,url);  }  return false;}  }
class C{  public boolean isWhitespace(){  return (glyphType & 0x4) == WHITESPACE;}  }
class C{  public TagException(){}  }
class C{  @DataProvider public Object[][] paramsCreateFilterFromStringValidFilters(){  return new Object[][]{{"(&)","(&)"},{"(|)","(|)"},{"(sn=test)","(sn=test)"},{"(sn=*)","(sn=*)"},{"(sn=)","(sn=)"},{"(sn=*test*)","(sn=*test*)"},{"(!(sn=test))","(!(sn=test))"},{"(|(sn=test)(sn=test2))","(|(sn=test)(sn=test2))"},{"(&(sn=test))","(sn=test)"},{"(|(sn=test))","(sn=test)"},{"(&(objectclass=person)(|(sn=test)))","(&(objectClass=person)(sn=test))"}};}  }
class C{  public void toByteString(ByteStringBuilder builder){  builder.appendLong(timeStamp).appendShort(serverId & 0xffff).appendInt(seqnum);}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("LDAPPostReadRequestControl(criticality=");  buffer.append(isCritical());  buffer.append(",attrs=\"");  if (!rawAttributes.isEmpty()) {    Iterator<String> iterator=rawAttributes.iterator();    buffer.append(iterator.next());    while (iterator.hasNext()) {      buffer.append(",");      buffer.append(iterator.next());    }  }  buffer.append("\")");}  }
class C{  public FileWriterWithEncoding(File file,CharsetEncoder encoding) throws IOException {  this(file,encoding,false);}  }
class C{  public void logException(Throwable ex){  if (needsLogging) {    this.getLogger().error(ex.getMessage(),ex);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild=null;  Node newChild;  Node child;  String childName;  Node insertedNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  newChild=doc.createElement("newChild");  insertedNode=employeeNode.insertBefore(newChild,refChild);  child=employeeNode.getLastChild();  childName=child.getNodeName();  assertEquals("nodeInsertBeforeRefChildNullAssert1","newChild",childName);}  }
class C{  public static void removePropertyChangeListener(PropertyChangeListener listener){synchronized (classLock) {    getLAFState().getPropertyChangeSupport(true).removePropertyChangeListener(listener);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.EmptyType createEmptyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.EmptyTypeImpl();}  }
class C{  public static TargetControl decode(EnumTargetOperator operator,String expr) throws AciException {  Set<String> controlOIDs=Aci.decodeOID(expr,WARN_ACI_SYNTAX_INVALID_TARGETCONTROL_EXPRESSION.get(expr));  return new TargetControl(operator,controlOIDs);}  }
class C{  public boolean equals(Object obj2){  if (null == obj2)   return false; else   if (obj2 instanceof XNodeSet)   return obj2.equals(this); else   if (obj2 instanceof XNumber)   return obj2.equals(this); else   return str().equals(obj2.toString());}  }
class C{  @Override public Foo fetchByPrimaryKey(long fooId){  return fetchByPrimaryKey((Serializable)fooId);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode14.class,args);}  }
class C{  public ByteBufferOutputStream append(ByteBufferOutputStream buf){  return append(buf.buf,0,buf.count);}  }
class C{  protected SearchOperationWrapper(SearchOperation search){  super(search);}  }
class C{  public void put(E e){  offer(e);}  }
class C{  public static String formatDateLong(Date d){  if (d == null) {    return "";  }  return new SimpleDateFormat(LONG_DATE_FORMAT).format(d);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImp;  Node ownerElement;  Element element;  Attr attr;  Attr attrImp;  NodeList addresses;  doc=(Document)load("staffNS",false);  docImp=(Document)load("staff",false);  addresses=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)addresses.item(1);  assertNotNull("empAddressNotNull",element);  attr=element.getAttributeNodeNS("http://www.nist.gov","zone");  attrImp=(Attr)docImp.importNode(attr,true);  ownerElement=attrImp.getOwnerElement();  assertNull("attrgetownerelement04",ownerElement);}  }
class C{  public NumberFormatter(NumberFormat format){  super(format);  setFormat(format);  setAllowsInvalid(true);  setCommitsOnValidEdit(false);  setOverwriteMode(false);}  }
class C{  public AreaBreak(PageSize pageSize){  this(AreaBreakType.NEXT_PAGE);  this.pageSize=pageSize;}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String realm=getStringOptionValue(IArgument.REALM_NAME);  String name=getStringOptionValue(PARAM_NAME);  String[] params={realm,name};  Subject userSubject=SubjectUtils.createSubject(getAdminSSOToken());  ApplicationPrivilegeManager apm=ApplicationPrivilegeManager.getInstance(realm,userSubject);  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SHOW_APPLICATION_PRIVILEGE",params);  try {    ApplicationPrivilege appPrivilege=apm.getPrivilege(name);    outputInfo("show-application-privilege-output-name",name);    String description=appPrivilege.getDescription();    if (description == null) {      description="";    }    outputInfo("show-application-privilege-output-description",description);    outputInfo("show-application-privilege-output-actions",getDisplayAction(appPrivilege));    outputInfo("show-application-privilege-output-subjects",getSubjects(appPrivilege));    outputInfo("show-application-privilege-output-resources",getApplicationToResources(appPrivilege));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_SHOW_APPLICATION_PRIVILEGE",params);  } catch (  EntitlementException ex) {    String[] paramExs={realm,name,ex.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_SHOW_APPLICATION_PRIVILEGE",paramExs);    throw new CLIException(ex,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  @Override public boolean isPrintValue(Object bean,Object bean2,String attrName,StoreDescription desc){  boolean isPrint=super.isPrintValue(bean,bean2,attrName,desc);  if (isPrint) {    if ("jkHome".equals(attrName)) {      Connector connector=((Connector)bean);      File catalinaBase=getCatalinaBase();      File jkHomeBase=getJkHomeBase((String)connector.getProperty("jkHome"),catalinaBase);      isPrint=!catalinaBase.equals(jkHomeBase);    }  }  return isPrint;}  }
class C{  public void seek(long position) throws IOException {  Utils.checkArgument(position >= 0,"Cannot seek to negative offset.");  checkStream();  if (position >= getStreamPosition() && position <= getStreamOffset()) {    int forward=(int)(position - getStreamPosition());    if (forward > 0) {      outBuffer.position(outBuffer.position() + forward);    }  } else {    input.seek(position);    resetStreamOffset(position);  }}  }
class C{  private boolean lockBackend(Backend<?> b){  try {    String lockFile=LockFileManager.getBackendLockFileName(b);    StringBuilder failureReason=new StringBuilder();    if (!LockFileManager.acquireSharedLock(lockFile,failureReason)) {      logger.error(ERR_BACKUPDB_CANNOT_LOCK_BACKEND,b.getBackendID(),failureReason);      return false;    }  } catch (  Exception e) {    logger.error(ERR_BACKUPDB_CANNOT_LOCK_BACKEND,b.getBackendID(),getExceptionMessage(e));    return false;  }  return true;}  }
class C{  public SAML2InvalidNameIDPolicyException(String message){  super(message);}  }
class C{  private boolean isAllowedByIp(String ip) throws PolicyException {  boolean allowed=false;  long requestIp=stringToIp(ip);  Iterator ipValues=ipList.iterator();  while (ipValues.hasNext()) {    long startIp=((Long)ipValues.next()).longValue();    if (ipValues.hasNext()) {      long endIp=((Long)ipValues.next()).longValue();      if ((requestIp >= startIp) && (requestIp <= endIp)) {        allowed=true;        break;      }    }  }  if ((requestIp >= startIp) && (requestIp <= endIp)) {    allowed=true;  }  return allowed;}  }
class C{  public long skip(long n) throws java.io.IOException {  if (n <= 0) {    return 0;  }  int adj=0;  if (isBack) {    isBack=false;    if (n == 1) {      return 1;    } else {      --n;      adj=1;    }  }  long pos;  long len;  long newpos;  pos=getPosition();  len=length();  newpos=pos + n;  if (newpos > len) {    newpos=len;  }  seek(newpos);  return newpos - pos + adj;}  }
class C{  public synchronized int capacity(){  return elementData.length;}  }
class C{  private SearchRequestProtocolOp buildSearchRequestProtocolOp() throws LDAPException {  return new SearchRequestProtocolOp(baseDN,scope,dereferencePolicy,sizeLimit,timeLimit,typesOnly,filter,attributes);}  }
class C{  public AMAttrSchemaComparator(Collator collator){  this.collator=collator;}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String realm=getStringOptionValue(IArgument.REALM_NAME);  String[] params={realm};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_APPLICATIONS",params);  try {    Set<String> names=applicationServiceFactory.create(getAdminSubject(),realm).getApplicationNames();    IOutput writer=getOutputWriter();    if ((names == null) || names.isEmpty()) {      writer.printlnMessage(getResourceString("list-applications-no-entries"));    } else {      for (      String n : names) {        writer.printlnMessage(n);      }    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_LIST_APPLICATIONS",params);  } catch (  EntitlementException ex) {    String[] paramsEx={realm,ex.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_LIST_APPLICATIONS",paramsEx);    throw new CLIException(ex,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public JSONObject toJSONObject() throws JSONException {  JSONObject jo=new JSONObject();  jo.put("name",name);  jo.put("applicationName",applicationName);  if (resourceNames != null) {    jo.put("resourceNames",resourceNames);  }  if (actionValues != null) {    jo.put("actionsValues",actionValues);  }  if (advices != null) {    jo.put("advices",advices);  }  if (attributes != null) {    jo.put("attributes",attributes);  }  return jo;}  }
class C{  public Test(File f) throws ParserConfigurationException, SAXException, IOException {  parseXML(f);}  }
class C{  protected void addSubComponents(){  add(iconButton);  add(maxButton);  add(closeButton);}  }
class C{  public synchronized Object send(String message,String cookies) throws Exception {  exceptionClassName=exceptionMessage=null;  resourceBundleName=exceptionCode=null;  smsExceptionCode=null;  messageArgs=null;  errorString=null;  ldapErrorCode=0;  isException=false;  InputStream in_buf=call(message,cookies);  SOAPContentHandler handler=new SOAPContentHandler();  try {    SAXParser saxParser;    if (debug.warningEnabled()) {      saxParser=XMLUtils.getSafeSAXParser(true);    } else {      saxParser=XMLUtils.getSafeSAXParser(false);    }    XMLReader parser=saxParser.getXMLReader();    parser.setContentHandler(handler);    parser.setErrorHandler(new SOAPErrorHandler());    parser.parse(new InputSource(in_buf));  } catch (  ParserConfigurationException pce) {    if (debug.warningEnabled()) {      debug.warning("SOAPClient:send parser config exception",pce);    }  }catch (  SAXException saxe) {    if (debug.warningEnabled()) {      debug.warning("SOAPClient:send SAX exception",saxe);    }  }  if (isException) {    throw (exception);  }  return (handler.getObject());}  }
class C{  private void createComponents(){  noSuffixLabel=UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,INFO_SUFFIX_LIST_EMPTY.get(),UIFactory.TextStyle.SECONDARY_FIELD_VALID);}  }
class C{  public void delete(Identifier identifier){  logger.debug("Deleting index: " + identifier.toString());  indexesRepo.delete(identifier);}  }
class C{  public static Set<DN> asSetOfDN(Entry entry,String attrDesc){  Attribute attr=entry.getAttribute(attrDesc);  return attr != null ? attr.parse().asSetOfDN() : Collections.<DN>emptySet();}  }
class C{  public AMSearchResults searchGroupContainers(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP_CONTAINER),getSearchFilter(AMObject.GROUP_CONTAINER),wildcard,avPairs,searchControl);}  }
class C{  private void installWindowListeners(JRootPane root,Component parent){  if (parent instanceof Window) {    window=(Window)parent;  } else {    window=SwingUtilities.getWindowAncestor(parent);  }  if (window != null) {    if (mouseInputListener == null) {      mouseInputListener=createWindowMouseInputListener(root);    }    window.addMouseListener(mouseInputListener);    window.addMouseMotionListener(mouseInputListener);  }}  }
class C{  private boolean checkEqualAdviceExpressionValues(final AdviceExpression ae1,final AdviceExpression ae2){  if (ae1 == ae2) {    return true;  }  if (ae1 == null || ae2 == null) {    return false;  }  if (!compareStrings(ae1.getAdviceId(),ae2.getAdviceId())) {    return false;  }  EffectType effectType1=ae1.getAppliesTo();  EffectType effectType2=ae2.getAppliesTo();  if (effectType1 == null && effectType2 != null || effectType1 != null && effectType2 == null) {    return false;  }  if (effectType1 != null && effectType2 != null && !effectType1.equals(effectType2)) {    return false;  }  return (compareListsOfAttributeAssignmentExpression(ae1.getAttributeAssignmentExpression(),ae2.getAttributeAssignmentExpression()));}  }
class C{  public static IntroFragment newInstance(String title,String description){  Bundle args=new Bundle();  args.putString(TITLE,title);  args.putString(DESCRIPTION,description);  IntroFragment fragment=new IntroFragment();  fragment.setArguments(args);  return fragment;}  }
class C{  public void save(Bundle bundle){  Validate.notNull(bundle,"bundle");  SharedPreferences.Editor editor=cache.edit();  for (  String key : bundle.keySet()) {    try {      serializeKey(key,bundle,editor);    } catch (    JSONException e) {      Logger.log(LoggingBehavior.CACHE,Log.WARN,TAG,"Error processing value for key: '" + key + "' -- "+ e);      return;    }  }  editor.apply();}  }
class C{  private static void scanPathRecursive(File dir,final StringBuilder sb,final int l){  File[] files=dir.listFiles();  if (files == null)   return;  for (  File f : files) {    if (f.isDirectory()) {      scanPathRecursive(f,sb,l);    } else     if (f.getName().endsWith(".class")) {      sb.append(f.getAbsolutePath().substring(l)).append("\n");    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  boolean state;  doc=(Document)load("staff",true);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(2);  ((Element)testNode).setAttribute("street","Yes");  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  state=streetAttr.getSpecified();  assertTrue("streetSpecified",state);}  }
class C{  public Membership(Member local,boolean includeLocal){  this(local,new MemberComparator(),includeLocal);}  }
class C{  public static GeneralizedTime currentTime(){  return valueOf(Calendar.getInstance());}  }
class C{  public JToolBar(int orientation){  this(null,orientation);}  }
class C{  public static Cookie newCookie(String name,String value,String path){  return newCookie(name,value,defAge,path,null);}  }
class C{  public void visitTypeInsn(int opcode,String type){  if (mv != null) {    mv.visitTypeInsn(opcode,type);  }}  }
class C{  public UpgradeException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  @Override public void firePropertyChange(String propertyName,float oldValue,float newValue){}  }
class C{  public void write_value(java.io.Serializable value,String repository_id){  throw new org.omg.CORBA.NO_IMPLEMENT();}  }
class C{  private void clearDuplicatesAndNulls(){  if (dups != null) {    assert (ownedCount() >= 1);    for (    Name dup : dups) {      for (int i=firstChange; i < length; i++) {        if (names[i] == dup && originalNames[i] != dup) {          names[i]=null;          assert (Arrays.asList(names).contains(dup));          break;        }      }    }    dups.clear();  }  int oldLength=length;  for (int i=firstChange; i < length; i++) {    if (names[i] == null) {      System.arraycopy(names,i + 1,names,i,(--length - i));      --i;    }  }  if (length < oldLength) {    Arrays.fill(names,length,oldLength,null);  }  assert (!Arrays.asList(names).subList(0,length).contains(null));}  }
class C{  @Override public void initializeForTemplate(TemplateFile templateFile,Template template,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  initializeInternal(templateFile,arguments,lineNumber);}  }
class C{  public boolean messageEnabled(){  return (debugLevel > Debug.WARNING);}  }
class C{  private void formatAndLogThrowable(LoggingLevel level,Color color,String msg,Throwable t){  if (!USE_COLORS) {    formatAndLogThrowable(level,msg,t);    return;  }  if (PhotonLogger.level.id < level.id) {    return;  }  LocalDateTime dateTime=LocalDateTime.now();  String formatted=formatLogLine(level,dateTime,msg);  LoggingService.logThrowable(dateTime,t,formatted,color);}  }
class C{  public static int secondaryIdentityHash(Object key){  return secondaryHash(System.identityHashCode(key));}  }
class C{  public boolean verifyXMLSignature(java.lang.String xmlString,java.lang.String idAttrName,java.lang.String certAlias) throws XMLSignatureException {  return sp.verifyXMLSignature(xmlString,idAttrName,certAlias);}  }
class C{  private static Collection<List<?>> decodeGeneralNames(Extension extension) throws IOException {  if (extension == null) {    return null;  }  Collection<List<?>> collection=((GeneralNames)GeneralNames.ASN1.decode(extension.getExtnValue())).getPairsList();  if (collection.size() == 0) {    return null;  }  return Collections.unmodifiableCollection(collection);}  }
class C{  public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.bool(xctxt) || m_right.bool(xctxt));}  }
class C{  public int checkACLForRole(final String resourceType,final String folder,final String currentUserRole){  CheckEntry[] ce=new CheckEntry[currentUserRole != null ? 4 : 2];  ce[0]=new CheckEntry("*","*");  ce[1]=new CheckEntry("*",resourceType);  if (currentUserRole != null) {    ce[2]=new CheckEntry(currentUserRole,"*");    ce[3]=new CheckEntry(currentUserRole,resourceType);  }  int acl=0;  for (  CheckEntry checkEntry : ce) {    List<ACLEntry> aclEntrieForType=findACLEntryByRoleAndType(checkEntry.type,checkEntry.role);    for (    ACLEntry aclEntry : aclEntrieForType) {      String cuttedPath=folder;      while (true) {        if (cuttedPath.length() > 1 && cuttedPath.lastIndexOf("/") == cuttedPath.length() - 1) {          cuttedPath=cuttedPath.substring(0,cuttedPath.length() - 1);        }        if (aclEntry.folder.equals(cuttedPath)) {          acl=checkACLForFolder(aclEntry,cuttedPath);          break;        } else {          if (cuttedPath.length() == 1) {            break;          }          if (cuttedPath.lastIndexOf("/") > -1) {            cuttedPath=cuttedPath.substring(0,cuttedPath.lastIndexOf("/") + 1);          } else {            break;          }        }      }    }  }  return acl;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  FederationViewBean vb=(FederationViewBean)getViewBean(FederationViewBean.class);  backTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  private boolean shouldSynthensizeKeyEvents(){  if (!checkedInputOverride) {    needToSendKeyTypedEvent=!METHOD_OVERRIDDEN.get(getClass());    checkedInputOverride=true;  }  return needToSendKeyTypedEvent;}  }
class C{  public String toString(){  return (as.toString());}  }
class C{  public FrameBodyTPE4(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  private Map<String,Object> convertToken(Token token){  if (token == null) {    return null;  }  return tokenAdapter.fromToken(token).asMap();}  }
class C{  public void insert_string(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_string",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_string(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void testClearBitPositiveInside4(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=50;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void validatePassword(String password) throws AMException {}  }
class C{  MemberName compileToBytecode(){  if (vmentry != null && isCompiled) {    return vmentry;  }  MethodType invokerType=methodType();  assert (vmentry == null || vmentry.getMethodType().basicType().equals(invokerType));  try {    vmentry=InvokerBytecodeGenerator.generateCustomizedCode(this,invokerType);    if (TRACE_INTERPRETER)     traceInterpreter("compileToBytecode",this);    isCompiled=true;    return vmentry;  } catch (  Error|Exception ex) {    throw newInternalError(this.toString(),ex);  }}  }
class C{  protected SimpleJavaFileObject(URI uri,Kind kind){  uri.getClass();  kind.getClass();  if (uri.getPath() == null)   throw new IllegalArgumentException("URI must have a path: " + uri);  this.uri=uri;  this.kind=kind;}  }
class C{  static boolean isPrintableCharacter(final char c){switch (c) {case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':case '\'':case '(':case ')':case '+':case ',':case '-':case '.':case '=':case '/':case ':':case '?':case ' ':    return true;default :  return false;}}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer result=new StringBuffer(3000);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAMLConstants.ASSERTION_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.assertionDeclareStr;  }  result.append("<").append(prefix).append("AttributeStatement ").append(uri).append(">\n");  result.append(this._subject.toString(includeNS,false));  Iterator iter=_attributes.iterator();  while (iter.hasNext()) {    Attribute att=(Attribute)iter.next();    result.append(att.toString(includeNS,false));  }  result.append("</").append(prefix).append("AttributeStatement>\n");  return (result.toString());}  }
class C{  public ServerSiteModelImpl(HttpServletRequest req,Map map){  super(req,map);}  }
class C{  public From(To to){  super(NAME);  address=to.address;  parameters=to.parameters;}  }
class C{  protected boolean isRootPaneCheckingEnabled(){  return rootPaneCheckingEnabled;}  }
class C{  public final PlaPointInt mirror_horizontal(PlaPointInt p_pole){  PlaVectorInt v=difference_by(p_pole);  v=v.mirror_at_x_axis();  return p_pole.translate_by(v);}  }
class C{  private static void deleteEntry(DN dstDN){  DeleteOperation delOperation=getRootConnection().processDelete(dstDN);  if (delOperation.getResultCode() != ResultCode.SUCCESS) {    logger.debug(INFO_TRUSTSTORESYNC_DELETE_FAILED,dstDN,delOperation.getErrorMessage());  }}  }
class C{  public void addAttributes(Map<? extends AttributedCharacterIterator.Attribute,?> attributes,int start,int end){  Iterator<?> it=attributes.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<?,?> entry=(Map.Entry<?,?>)it.next();    addAttribute((AttributedCharacterIterator.Attribute)entry.getKey(),entry.getValue(),start,end);  }}  }
class C{  public void logEvent(String eventName,Bundle parameters){  logEvent(eventName,null,parameters,false);}  }
class C{  public void testAlgorithmParameterGenerator03() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  String provider=null;  for (int i=0; i < algs.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(algs[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }    try {      AlgorithmParameterGenerator.getInstance(algs[i],"");      fail("IllegalArgumentException must be thrown when provider is empty");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  private synchronized void writeToOutputStream(int oneByte){  if (mClosed) {    return;  }  try {    mOutputStream.write(oneByte);    reportDecodedSizeIfApplicable();  } catch (  IOException e) {    handleIOExceptionWritingToStream(e);  }}  }
class C{  private void spread(int targetSpan,int span[]){  if (targetSpan == 0) {    return;  }  int tempSpace=0;  int remainingSpace=targetSpan;  for (int i=0; i < span.length; i++) {    if (absoluteChildren[i] > 0) {      span[i]=absoluteChildren[i];      remainingSpace-=span[i];    }  }  tempSpace=remainingSpace;  for (int i=0; i < span.length; i++) {    if (percentChildren[i] > 0 && tempSpace > 0) {      span[i]=(percentChildren[i] * tempSpace) / 100;      remainingSpace-=span[i];    } else     if (percentChildren[i] > 0 && tempSpace <= 0) {      span[i]=targetSpan / span.length;      remainingSpace-=span[i];    }  }  if (remainingSpace > 0 && relativeTotals > 0) {    for (int i=0; i < span.length; i++) {      if (relativeChildren[i] > 0) {        span[i]=(remainingSpace * relativeChildren[i]) / relativeTotals;      }    }  } else   if (remainingSpace > 0) {    float vTotal=(float)(targetSpan - remainingSpace);    float[] tempPercents=new float[span.length];    remainingSpace=targetSpan;    for (int i=0; i < span.length; i++) {      tempPercents[i]=((float)span[i] / vTotal) * 100.00f;      span[i]=(int)(((float)targetSpan * tempPercents[i]) / 100.00f);      remainingSpace-=span[i];    }    int i=0;    while (remainingSpace != 0) {      if (remainingSpace < 0) {        span[i++]--;        remainingSpace++;      } else {        span[i++]++;        remainingSpace--;      }      if (i == span.length)       i=0;    }  }}  }
class C{  public void testCreateDocument3() throws Throwable {  Document doc;  DOMImplementation domImpl;  Document newDoc;  DocumentType docType=null;  String namespaceURI="http://www.w3.org/DOMTest/L2";  String qualifiedName;  List<String> qualifiedNames=new ArrayList<String>();  qualifiedNames.add("_:_");  qualifiedNames.add("_:h0");  qualifiedNames.add("_:test");  qualifiedNames.add("l_:_");  qualifiedNames.add("ns:_0");  qualifiedNames.add("ns:a0");  qualifiedNames.add("ns0:test");  qualifiedNames.add("a.b:c");  qualifiedNames.add("a-b:c");  qualifiedNames.add("a-b:c");  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  for (int indexN1006B=0; indexN1006B < qualifiedNames.size(); indexN1006B++) {    qualifiedName=(String)qualifiedNames.get(indexN1006B);    newDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    assertNotNull("domimplementationcreatedocument03",newDoc);  }}  }
class C{  public static void stopServer(){  LDAPServer.getInstance().stop();}  }
class C{  public void testDivideBigDecimalScaleMathContextFLOOR(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=15;  String b="748766876876723342238476237823787879183470";  int bScale=70;  int precision=21;  RoundingMode rm=RoundingMode.FLOOR;  MathContext mc=new MathContext(precision,rm);  String c="4.98978611802562512995E+70";  int resScale=-50;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return encode((byte[])pObject);  } else   if (pObject instanceof String) {    return encode((String)pObject);  } else {    throw new EncoderException("Objects of type " + pObject.getClass().getName() + " cannot be URL encoded");  }}  }
class C{  private void parseElement(Element element) throws SAML2Exception {  AssertionFactory assertionFactory=AssertionFactory.getInstance();  ProtocolFactory protoFactory=ProtocolFactory.getInstance();  requestId=element.getAttribute(SAML2Constants.ID);  validateID(requestId);  version=element.getAttribute(SAML2Constants.VERSION);  validateVersion(version);  String issueInstantStr=element.getAttribute(SAML2Constants.ISSUE_INSTANT);  validateIssueInstant(issueInstantStr);  destinationURI=element.getAttribute(SAML2Constants.DESTINATION);  consent=element.getAttribute(SAML2Constants.CONSENT);  String notOnOrAfterStr=element.getAttribute(SAML2Constants.NOTONORAFTER);  validateNotOnOrAfterStr(notOnOrAfterStr);  reason=element.getAttribute(SAML2Constants.REASON);  String sessionIndexStr=null;  NodeList nList=element.getChildNodes();  if ((nList != null) && (nList.getLength() > 0)) {    for (int i=0; i < nList.getLength(); i++) {      Node childNode=nList.item(i);      String cName=childNode.getLocalName();      if (cName != null) {        if (cName.equals(SAML2Constants.ISSUER)) {          nameID=assertionFactory.createIssuer((Element)childNode);        } else         if (cName.equals(SAML2Constants.SIGNATURE)) {          signatureString=XMLUtils.print((Element)childNode);          isSigned=true;        } else         if (cName.equals(SAML2Constants.EXTENSIONS)) {          extensions=protoFactory.createExtensions((Element)childNode);        } else         if (cName.equals(SAML2Constants.BASEID)) {          baseId=assertionFactory.createBaseID((Element)childNode);        } else         if (cName.equals(SAML2Constants.NAMEID)) {          nameId=assertionFactory.createNameID((Element)childNode);        } else         if (cName.equals(SAML2Constants.ENCRYPTEDID)) {          encryptedId=assertionFactory.createEncryptedID((Element)childNode);        } else         if (cName.equals(SAML2Constants.SESSION_INDEX)) {          if ((sessionIndexList == null) || (sessionIndexList.isEmpty())) {            sessionIndexList=new ArrayList();          }          sessionIndexStr=XMLUtils.getElementString((Element)childNode);          sessionIndexList.add(sessionIndexStr);        }      }    }    validateBaseIDorNameIDorEncryptedID();    if ((sessionIndexList != null) && (!sessionIndexList.isEmpty())) {      sessionIndexList=Collections.unmodifiableList(sessionIndexList);    }  }}  }
class C{  private boolean contains(String[] names,String name){  assert name != null;  for (int i=0; i < names.length; i++) {    if (name.equals(names[i])) {      return true;    }  }  return false;}  }
class C{  private void mergeServerGroups(ADSContext adsCtx) throws ADSContextException {  Set<Map<ServerGroupProperty,Object>> serverGroups1=readServerGroupRegistry();  Set<Map<ServerGroupProperty,Object>> serverGroups2=adsCtx.readServerGroupRegistry();  for (  Map<ServerGroupProperty,Object> group2 : serverGroups2) {    Map<ServerGroupProperty,Object> group1=null;    String uid2=(String)group2.get(ServerGroupProperty.UID);    for (    Map<ServerGroupProperty,Object> gr : serverGroups1) {      String uid1=(String)gr.get(ServerGroupProperty.UID);      if (uid1.equalsIgnoreCase(uid2)) {        group1=gr;        break;      }    }    if (group1 != null) {      Set<String> member1List=getServerGroupMemberList(uid2);      if (member1List == null) {        member1List=new HashSet<>();      }      Set<String> member2List=adsCtx.getServerGroupMemberList(uid2);      if (member2List != null && !member2List.isEmpty()) {        member1List.addAll(member2List);        Map<ServerGroupProperty,Object> newProperties=new HashMap<>();        newProperties.put(ServerGroupProperty.MEMBERS,member1List);        updateServerGroup(uid2,newProperties);      }    } else {      createServerGroup(group2);    }  }}  }
class C{  @Override public void registerServiceListener(){  try {    serviceListenerRegistration.registerServiceListener(AMSTSConstants.REST_STS_SERVICE_NAME,AMSTSConstants.REST_STS_SERVICE_VERSION,serviceListener);    logger.debug("In RestSTSInstancePublisherImpl ctor, successfully added ServiceListener for service " + AMSTSConstants.REST_STS_SERVICE_NAME);  } catch (  STSInitializationException e) {    final String message="Exception caught registering ServiceListener in " + "RestSTSInstancePublisherImpl#registerServiceListener. This means that rest-sts-instances published " + "to other site instances will not be propagated to the rest-sts-instnace CREST router on this server."+ e;    logger.error(message,e);  }}  }
class C{  private void process(Message message){  for (  String s : this.headers) {    Header header=message.getHeaders().get(s);    if (header != null) {      List<String> in=header.getValues();      List<String> out=new ArrayList<>();      message.getHeaders().remove(s);      for (      String value : in) {        out.add(operation == Operation.ENCRYPT ? encrypt(value) : decrypt(value));      }      message.getHeaders().put(s,out);    }  }}  }
class C{  public static DocAttributeSet synchronizedView(DocAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new SynchronizedDocAttributeSet(attributeSet);}  }
class C{  public OriginFieldParser(String originField){  lexer=new Lexer("charLexer",originField);}  }
class C{  public void start(){  start=currentTimeMillis();  end=start;}  }
class C{  public static VirtualListViewRequestControl newOffsetControl(final boolean isCritical,final int offset,final int contentCount,final int beforeCount,final int afterCount,final ByteString contextID){  Reject.ifFalse(beforeCount >= 0,"beforeCount is less than 0");  Reject.ifFalse(afterCount >= 0,"afterCount is less than 0");  Reject.ifFalse(offset > 0,"offset is less than 1");  Reject.ifFalse(contentCount >= 0,"contentCount is less than 0");  return new VirtualListViewRequestControl(isCritical,beforeCount,afterCount,contentCount,offset,null,contextID);}  }
class C{  public void catchException(final Label start,final Label end,final Type exception){  Label doCatch=new Label();  if (exception == null) {    mv.visitTryCatchBlock(start,end,doCatch,null);  } else {    mv.visitTryCatchBlock(start,end,doCatch,exception.getInternalName());  }  mark(doCatch);}  }
class C{  @Override public boolean isPowered(){  return (getData() & 0x8) != 0;}  }
class C{  public void clear(){  backups.clear();}  }
class C{  private void moveScope(Map<String,JsonValue> moveFrom,Map<String,JsonValue> moveTo,Context context,PolicyResourceDelegate policyResourceDelegate,Set<String> allMovingRights,Set<JsonValue> createdPolicies,Set<JsonValue> updatedPolicies,String scope,boolean newPolicyActive,List<Promise<List<ResourceResponse>,ResourceException>> promises,String user) throws BadRequestException {  JsonPointer scopePointer=new JsonPointer(BACKEND_POLICY_ACTION_VALUES_KEY).child(scope);  for (  Map.Entry<String,JsonValue> ownedPolicy : moveFrom.entrySet()) {    String owner=ownedPolicy.getKey();    JsonValue policy=ownedPolicy.getValue();    JsonValue ownedMoveTo=moveTo.get(owner);    boolean policyToMoveToAlreadyExists=ownedMoveTo != null;    if (policyToMoveToAlreadyExists) {      ownedMoveTo.put(scopePointer,true);      if (!createdPolicies.contains(ownedMoveTo)) {        updatedPolicies.add(ownedMoveTo);      }      policy.remove(scopePointer);    } else     if (allScopesAreSwitchingState(allMovingRights,policy)) {      policy.put(ACTIVE_KEY,true);    } else {      JsonValue newPolicy=UmaPolicy.valueOf(resourceSet,json(object(field(POLICY_ID_KEY,resourceSet.getId()),field(PERMISSIONS_KEY,array(object(field(SUBJECT_KEY,user),field(SCOPES_KEY,array(scope)))))))).asUnderlyingPolicies(owner).iterator().next();      newPolicy.put(ACTIVE_KEY,newPolicyActive);      createdPolicies.add(newPolicy);      moveTo.put(owner,newPolicy);      policy.remove(scopePointer);    }    if (policy.get(BACKEND_POLICY_ACTION_VALUES_KEY).size() == 0) {      updatedPolicies.remove(policy);      promises.add(policyResourceDelegate.deletePolicies(context,singleton(policy.get("_id").asString())));    } else {      updatedPolicies.add(policy);    }  }}  }
class C{  public MetadataBlockDataPicture(byte[] imageData,int pictureType,String mimeType,String description,int width,int height,int colourDepth,int indexedColouredCount){  this.pictureType=pictureType;  if (mimeType != null) {    this.mimeType=mimeType;  }  this.description=description;  this.width=width;  this.height=height;  this.colourDepth=colourDepth;  this.indexedColouredCount=indexedColouredCount;  this.imageData=imageData;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_camera);  ButterKnife.bind(this);  initViews();  setListeners();}  }
class C{  public UnknownDependencyException(final Throwable throwable){  super(throwable);}  }
class C{  public MBeanParameterInfo(String name,String type,String description,Descriptor descriptor){  super(name,description,descriptor);  this.type=type;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  String nullVersion=null;  doc=(Document)load("staff",false);  domImpl=doc.getImplementation();  state=domImpl.hasFeature("XML",nullVersion);  assertTrue("hasXMLnull",state);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrinsertbefore7.class,args);}  }
class C{  public static QueryExp gt(ValueExp v1,ValueExp v2){  return new BinaryRelQueryExp(GT,v1,v2);}  }
class C{  public boolean hasWindow(){  return mWindow != null;}  }
class C{  public SSOPrincipal(String name){  principal=name;}  }
class C{  protected void tearDown(){  objArray=null;  hs=null;}  }
class C{  public StandardPipeline(){  this(null);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.X509DataType.X509Certificate createX509DataTypeX509Certificate(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.X509DataTypeImpl.X509CertificateImpl(value);}  }
class C{  public final void redirect(final ConnectionSecurityProvider provider){  redirect=provider.getChannel();}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  public Point indexToLocation(JList a,int b){  Point returnValue=((ListUI)(uis.elementAt(0))).indexToLocation(a,b);  for (int i=1; i < uis.size(); i++) {    ((ListUI)(uis.elementAt(i))).indexToLocation(a,b);  }  return returnValue;}  }
class C{  @Override public Future<Integer> read(ByteBuffer dst){  if (!handshakeComplete) {    throw new IllegalStateException(sm.getString("channel.nio.ssl.incompleteHandshake"));  }  return new FutureRead(dst);}  }
class C{  private void verifyTargetSessionIsLocalOrStateless(SessionRequest req,SessionID sid) throws SessionException, SessionRequestException, ForwardSessionRequestException {  if (statelessSessionManager.containsJwt(sid)) {    return;  }  String hostServerID=foreignSessionHandler.getCurrentHostServer(sid);  if (!serverConfig.isLocalServer(hostServerID)) {    try {      throw new ForwardSessionRequestException(forward(SESSION_SERVICE_URL_SERVICE.getSessionServiceURL(hostServerID),req));    } catch (    SessionException se) {      if (!sessionService.checkServerUp(hostServerID)) {        String retryHostServerID=foreignSessionHandler.getCurrentHostServer(sid);        if (retryHostServerID.equals(hostServerID)) {          throw se;        } else {          if (!serverConfig.isLocalServer(retryHostServerID)) {            throw new ForwardSessionRequestException(forward(SESSION_SERVICE_URL_SERVICE.getSessionServiceURL(hostServerID),req));          }        }      } else {        throw se;      }    }  }  if (!sessionService.checkSessionLocal(sid)) {    throw new SessionRequestException(sid,SessionBundle.getString("sessionNotObtained"));  }}  }
class C{  public Set<BrdItem> pick_items(PlaPointFloat p_location,ItemSelectionFilter p_item_filter){  PlaPointInt location=p_location.round();  Set<BrdItem> result=r_board.pick_items(location,itera_settings.get_layer_no(),p_item_filter);  if (!(result.size() == 0 && itera_settings.select_on_all_visible_layers))   return result;  for (int index=0; index < gdi_context.layer_count(); ++index) {    if (index == itera_settings.layer_no || gdi_context.get_layer_visibility(index) <= 0)     continue;    result.addAll(r_board.pick_items(location,index,p_item_filter));  }  return result;}  }
class C{  public void processPersistenceChecks(){  processMaxIdleSwaps();  processMaxActiveSwaps();  processMaxIdleBackups();}  }
class C{  public static void clear(){  currentContext.remove();}  }
class C{  private static void rdf_NodeElementList(XMPMetaImpl xmp,XMPNode xmpParent,Node rdfRdfNode) throws XMPException {  for (int i=0; i < rdfRdfNode.getChildNodes().getLength(); i++) {    Node child=rdfRdfNode.getChildNodes().item(i);    if (!isWhitespaceNode(child)) {      rdf_NodeElement(xmp,xmpParent,child,true);    }  }}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public boolean isRenameOnRotate(){  return renameOnRotate;}  }
class C{  public ReferToHeader createReferToHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  ReferTo referTo=new ReferTo();  referTo.setAddress(address);  return referTo;}  }
class C{  public float transformX(int x){  return ((float)x - offsetWx) * scalingX / extentWx;}  }
class C{  void appendAttribute(int namespaceIndex,int localNameIndex,int prefixIndex,boolean isID,int m_char_current_start,int contentLength){  int w0=ATTRIBUTE_NODE | namespaceIndex << 16;  int w1=currentParent;  int w2=0;  int w3=localNameIndex | prefixIndex << 16;  System.out.println("set w3=" + w3 + " "+ (w3 >> 16)+ "/"+ (w3 & 0xffff));  int ourslot=appendNode(w0,w1,w2,w3);  previousSibling=ourslot;  w0=TEXT_NODE;  w1=ourslot;  w2=m_char_current_start;  w3=contentLength;  appendNode(w0,w1,w2,w3);  previousSiblingWasParent=true;  return;}  }
class C{  public StateInteractive filter(){  StateInteractive result=this;  items_list=i_brd.itera_settings.item_selection_filter.filter(items_list);  if (items_list.isEmpty())   result=return_state;  i_brd.repaint();  return result;}  }
class C{  public Map<String,String> convertDataToStrings(Map<String,Object> data){  Map<String,String> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      Object object=data.get(key);      if (object instanceof WebAuthenticationDetails) {        WebAuthenticationDetails authenticationDetails=(WebAuthenticationDetails)object;        results.put("remoteAddress",authenticationDetails.getRemoteAddress());        results.put("sessionId",authenticationDetails.getSessionId());      } else       if (object != null) {        results.put(key,object.toString());      } else {        results.put(key,"null");      }    }  }  return results;}  }
class C{  public void processRefer(RequestEvent requestEvent,ServerTransaction serverTransaction) throws ParseException, SipException, InvalidArgumentException {  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request refer=requestEvent.getRequest();  System.out.println("referee: got an REFER sending Accepted");  System.out.println("referee:  " + refer.getMethod());  System.out.println("referee : dialog = " + requestEvent.getDialog());  ReferToHeader refTo=(ReferToHeader)refer.getHeader(ReferToHeader.NAME);  if (refTo == null) {    Response bad=messageFactory.createResponse(Response.BAD_REQUEST,refer);    bad.setReasonPhrase("Missing Refer-To");    sipProvider.sendResponse(bad);    return;  }  Response response=null;  ServerTransaction st=requestEvent.getServerTransaction();  if (st == null) {    st=sipProvider.getNewServerTransaction(refer);  }  String toTag=Integer.toHexString((int)(Math.random() * Integer.MAX_VALUE));  response=messageFactory.createResponse(202,refer);  ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);  if (toHeader.getTag() != null) {    System.err.println("####ERROR: To-tag!=null but no dialog match! My dialog=" + dialog.getState());  }  toHeader.setTag(toTag);  this.dialog=st.getDialog();  this.dialog.terminateOnBye(false);  if (dialog != null) {    System.out.println("Dialog " + dialog);    System.out.println("Dialog state " + dialog.getState());    System.out.println("local tag=" + dialog.getLocalTag());    System.out.println("remote tag=" + dialog.getRemoteTag());  }  Address address=addressFactory.createAddress("Referee <sip:127.0.0.1>");  ((SipURI)address.getURI()).setPort(udpProvider.getListeningPoint("udp").getPort());  ContactHeader contactHeader=headerFactory.createContactHeader(address);  response.addHeader(contactHeader);  ExpiresHeader expires=(ExpiresHeader)refer.getHeader(ExpiresHeader.NAME);  if (expires == null) {    expires=headerFactory.createExpiresHeader(30);  }  response.addHeader(expires);  st.sendResponse(response);  referEvent=headerFactory.createEventHeader("refer");  long id=((CSeqHeader)refer.getHeader("CSeq")).getSeqNumber();  referEvent.setEventId(Long.toString(id));  sendNotify(Response.TRYING,"Trying");  sendInvite(refTo);}  }
class C{  public String toString(){  String aString=aliases.isEmpty() ? "" : "\r\n  aliases: " + aliases.toString();  String attrs=attributes.isEmpty() ? "" : "\r\n  attributes: " + attributes.toString();  return provider.getName() + ": " + type+ "."+ algorithm+ " -> "+ className+ aString+ attrs+ "\r\n";}  }
class C{  public boolean isLeaf(Object node){  if (asksAllowsChildren)   return !((TreeNode)node).getAllowsChildren();  return ((TreeNode)node).isLeaf();}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  return exp1.apply(name) && exp2.apply(name);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notationList;  Node notation;  String notationName;  java.util.Collection actual=new java.util.ArrayList();  java.util.Collection expected=new java.util.ArrayList();  expected.add("notation1");  expected.add("notation2");  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notationList=docType.getNotations();  assertNotNull("notationsNotNull",notationList);  for (int indexN1005B=0; indexN1005B < notationList.getLength(); indexN1005B++) {    notation=(Node)notationList.item(indexN1005B);    notationName=notation.getNodeName();    actual.add(notationName);  }  assertEquals("names",expected,actual);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuffer xmlString=new StringBuffer(150);  xmlString.append(SAML2Constants.START_TAG);  if (includeNSPrefix) {    xmlString.append(SAML2Constants.PROTOCOL_PREFIX);  }  xmlString.append(SAML2Constants.NAMEIDPOLICY).append(SAML2Constants.SPACE);  if (declareNS) {    xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR);  }  if (StringUtils.isNotEmpty(format)) {    xmlString.append(SAML2Constants.SPACE).append(FORMAT).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(format).append(SAML2Constants.QUOTE);  }  if (StringUtils.isNotEmpty(spNameQualifier)) {    xmlString.append(SAML2Constants.SPACE).append(SPNAMEQUALIFIER).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(spNameQualifier).append(SAML2Constants.QUOTE);  }  if (allowCreate != null) {    xmlString.append(SAML2Constants.SPACE).append(ALLOWCREATE).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(allowCreate.toString()).append(SAML2Constants.QUOTE);  }  xmlString.append(SAML2Constants.END_TAG).append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.NAMEIDPOLICY).append(SAML2Constants.END_TAG);  return xmlString.toString();}  }
class C{  public void mousePressed(MouseEvent e){  getHandler().mousePressed(e);}  }
class C{  public void startServer() throws ConfigException, InitializationException {  try {    BuildVersion.checkVersionMismatch();  } catch (  InitializationException e) {    logger.traceException(e);    throw new InitializationException(e.getMessageObject());  }synchronized (directoryServer) {    if (!isBootstrapped) {      LocalizableMessage message=ERR_CANNOT_START_BEFORE_BOOTSTRAP.get();      throw new InitializationException(message);    }    if (isRunning) {      LocalizableMessage message=ERR_CANNOT_START_WHILE_RUNNING.get();      throw new InitializationException(message);    }    logger.info(NOTE_DIRECTORY_SERVER_STARTING,getVersionString(),BUILD_ID,REVISION);    if (!serverLocked) {      String lockFile=LockFileManager.getServerLockFileName();      try {        StringBuilder failureReason=new StringBuilder();        if (!LockFileManager.acquireExclusiveLock(lockFile,failureReason)) {          LocalizableMessage message=ERR_CANNOT_ACQUIRE_EXCLUSIVE_SERVER_LOCK.get(lockFile,failureReason);          throw new InitializationException(message);        }        serverLocked=true;      } catch (      InitializationException ie) {        throw ie;      }catch (      Exception e) {        logger.traceException(e);        LocalizableMessage message=ERR_CANNOT_ACQUIRE_EXCLUSIVE_SERVER_LOCK.get(lockFile,stackTraceToSingleLineString(e));        throw new InitializationException(message,e);      }    }    startUpTime=System.currentTimeMillis();    startTimeUTC=TimeThread.getGMTTime();    boolean startConnectionHandlers=!environmentConfig.disableConnectionHandlers();    diskSpaceMonitor.startDiskSpaceMonitor();    initializeSchema();    configurationHandler.reinitializeWithFullSchema(schemaHandler.getSchema());    commonAudit=new CommonAudit(serverContext);    httpRouter=new Router();    pluginConfigManager.initializePluginConfigManager();    virtualAttributeConfigManager.initializeVirtualAttributes();    coreConfigManager=new CoreConfigManager(serverContext);    coreConfigManager.initializeCoreConfig();    initializeCryptoManager();    rotationPolicyConfigManager=new LogRotationPolicyConfigManager(serverContext);    rotationPolicyConfigManager.initializeLogRotationPolicyConfig();    retentionPolicyConfigManager=new LogRetentionPolicyConfigManager(serverContext);    retentionPolicyConfigManager.initializeLogRetentionPolicyConfig();    loggerConfigManager=new LoggerConfigManager(serverContext);    loggerConfigManager.initializeLoggerConfig();    RuntimeInformation.logInfo();    new AlertHandlerConfigManager(serverContext).initializeAlertHandlers();    entryCacheConfigManager=new EntryCacheConfigManager(serverContext);    entryCacheConfigManager.initializeDefaultEntryCache();    if (startConnectionHandlers) {      AdministrationConnector.createSelfSignedCertificateIfNeeded(serverContext);    }    keyManagerProviderConfigManager=new KeyManagerProviderConfigManager(serverContext);    keyManagerProviderConfigManager.initializeKeyManagerProviders();    trustManagerProviderConfigManager=new TrustManagerProviderConfigManager(serverContext);    trustManagerProviderConfigManager.initializeTrustManagerProviders();    certificateMapperConfigManager=new CertificateMapperConfigManager(serverContext);    certificateMapperConfigManager.initializeCertificateMappers();    identityMapperConfigManager=new IdentityMapperConfigManager(serverContext);    identityMapperConfigManager.initializeIdentityMappers();    initializeRootDNConfigManager();    initializeAuthenticatedUsers();    initializeSubentryManager();    initializeGroupManager();    AccessControlConfigManager.getInstance().initializeAccessControl(serverContext);    initializeRootAndAdminDataBackends();    initializeAuthenticationPolicyComponents();    new CryptoManagerSync();    initializeRemainingBackends();    createAndRegisterRemainingWorkflows();    entryCacheConfigManager.initializeEntryCache();    initializeExtendedOperations();    initializeSASLMechanisms();    if (startConnectionHandlers) {      initializeConnectionHandlers();    }    monitorConfigManager=new MonitorConfigManager(serverContext);    monitorConfigManager.initializeMonitorProviders();    pluginConfigManager.initializeUserPlugins(null);    if (!environmentConfig.disableSynchronization()) {      synchronizationProviderConfigManager=new SynchronizationProviderConfigManager(serverContext);      synchronizationProviderConfigManager.initializeSynchronizationProviders();    }    workQueue=new WorkQueueConfigManager(serverContext).initializeWorkQueue();    PluginResult.Startup startupPluginResult=pluginConfigManager.invokeStartupPlugins();    if (!startupPluginResult.continueProcessing()) {      throw new InitializationException(ERR_STARTUP_PLUGIN_ERROR.get(startupPluginResult.getErrorMessage(),startupPluginResult.getErrorMessage().ordinal()));    }    for (    InitializationCompletedListener listener : initializationCompletedListeners) {      try {        listener.initializationCompleted();      } catch (      Exception e) {        logger.traceException(e);      }    }    if (startConnectionHandlers) {      startConnectionHandlers();      new IdleTimeLimitThread().start();    }    if (saveConfigOnSuccessfulStartup) {      configurationHandler.writeSuccessfulStartupConfig();    }    isRunning=true;    LocalizableMessage message=NOTE_DIRECTORY_SERVER_STARTED.get();    logger.info(message);    sendAlertNotification(this,ALERT_TYPE_SERVER_STARTED,message);    InternalClientConnection rootConnection=InternalClientConnection.getRootConnection();    if (!environmentConfig.disableAdminDataSynchronization()) {      AdministrationDataSync admDataSync=new AdministrationDataSync(rootConnection);      admDataSync.synchronize();    }    httpEndpointConfigManager=new HttpEndpointConfigManager(serverContext);    httpEndpointConfigManager.registerTo(serverContext.getServerManagementContext().getRootConfiguration());    deleteUnnecessaryFiles();  }}  }
class C{  public String toString(){  if (attrs.size() == 0) {    return ("No attributes");  } else {    return attrs.toString();  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  propertySheetModel.clear();  populateValues=true;  forwardTo();}  }
class C{  public static void register(Class<?> clazz){  checkInit();  TYPE_CENTER.register(clazz);}  }
class C{  protected PrivateKey engineGeneratePrivate(KeySpec keySpec) throws InvalidKeySpecException {  if (keySpec != null) {    if (keySpec instanceof DSAPrivateKeySpec) {      return new DSAPrivateKeyImpl((DSAPrivateKeySpec)keySpec);    }    if (keySpec instanceof PKCS8EncodedKeySpec) {      return new DSAPrivateKeyImpl((PKCS8EncodedKeySpec)keySpec);    }  }  throw new InvalidKeySpecException("'keySpec' is neither DSAPrivateKeySpec nor PKCS8EncodedKeySpec");}  }
class C{  private void processIncrementModification(Attribute attr) throws DirectoryException {  AttributeDescription attrDesc=attr.getAttributeDescription();  AttributeType t=attrDesc.getAttributeType();  RDN rdn=modifiedEntry.getName().rdn();  if (rdn != null && rdn.hasAttributeType(t)) {    throw newDirectoryException(modifiedEntry,ResultCode.NOT_ALLOWED_ON_RDN,ERR_MODIFY_INCREMENT_RDN.get(entryDN,attrDesc));  }  if (attr.isEmpty()) {    throw newDirectoryException(modifiedEntry,ResultCode.PROTOCOL_ERROR,ERR_MODIFY_INCREMENT_REQUIRES_VALUE.get(entryDN,attrDesc));  } else   if (attr.size() > 1) {    throw newDirectoryException(modifiedEntry,ResultCode.PROTOCOL_ERROR,ERR_MODIFY_INCREMENT_REQUIRES_SINGLE_VALUE.get(entryDN,attrDesc));  }  MatchingRule eqRule=t.getEqualityMatchingRule();  ByteString v=attr.iterator().next();  long incrementValue;  try {    String nv=eqRule.normalizeAttributeValue(v).toString();    incrementValue=Long.parseLong(nv);  } catch (  Exception e) {    logger.traceException(e);    throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,ERR_MODIFY_INCREMENT_PROVIDED_VALUE_NOT_INTEGER.get(entryDN,attrDesc,v),e);  }  Attribute modifiedAttr=modifiedEntry.getAttribute(attrDesc);  if (modifiedAttr == null) {    throw newDirectoryException(modifiedEntry,ResultCode.CONSTRAINT_VIOLATION,ERR_MODIFY_INCREMENT_REQUIRES_EXISTING_VALUE.get(entryDN,attrDesc));  }  AttributeDescription modifiedAttrDesc=modifiedAttr.getAttributeDescription();  AttributeBuilder builder=new AttributeBuilder(modifiedAttrDesc);  for (  ByteString existingValue : modifiedAttr) {    long currentValue;    try {      currentValue=Long.parseLong(existingValue.toString());    } catch (    Exception e) {      logger.traceException(e);      throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,ERR_MODIFY_INCREMENT_REQUIRES_INTEGER_VALUE.get(entryDN,modifiedAttrDesc,existingValue),e);    }    long newValue=currentValue + incrementValue;    builder.add(String.valueOf(newValue));  }  modifiedEntry.replaceAttribute(builder.toAttribute());}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public X509Certificate generate(PrivateKey key,SecureRandom random) throws CertificateEncodingException, IllegalStateException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  TBSCertificate tbsCert=generateTbsCert();  byte[] signature;  try {    signature=X509Util.calculateSignature(sigOID,signatureAlgorithm,key,random,tbsCert);  } catch (  IOException e) {    throw new ExtCertificateEncodingException("exception encoding TBS cert",e);  }  try {    return generateJcaObject(tbsCert,signature);  } catch (  CertificateParsingException e) {    throw new ExtCertificateEncodingException("exception producing certificate object",e);  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  UMUserResourceOfferingViewBeanBase vb=(UMUserResourceOfferingViewBeanBase)getReturnToViewBean();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public static ManagedObjectDefinitionResource createForProfile(String profile){  return new ManagedObjectDefinitionResource("config.profiles." + profile);}  }
class C{  @DataProvider public Object[][] urlEncodingData(){  return new Object[][]{{"ldap:///dc=example,dc=com???(cn=test)","dc=example,dc=com","(cn=test)",false},{"ldap:///dc=example,dc=com???(cn=test)","dc=example,dc=com","(cn=test)",true},{"ldap:///dc=%5c%22example%5c%22,dc=com???(cn=test)","dc=\\\"example\\\",dc=com","(cn=test)",false},{"ldap:///dc=%5c%22example%5c%22,dc=com???(cn=test)","dc=\\\"example\\\",dc=com","(cn=test)",true},{"ldap:///dc=example,dc=com???(cn=%22test%22)","dc=example,dc=com","(cn=\"test\")",false},{"ldap:///dc=example,dc=com???(cn=%22test%22)","dc=example,dc=com","(cn=\"test\")",true}};}  }
class C{  public MaterialBarcodeScannerBuilder withResultListener(@NonNull MaterialBarcodeScanner.OnResultListener onResultListener){  this.onResultListener=onResultListener;  return this;}  }
class C{  public static Attribute nextAttribute(ByteBuffer bfr){  if (!bfr.hasRemaining()) {    return null;  }  bfr.mark();  bfr.get();  final byte len=bfr.get();  final int length=(len) & 0xFF;  final byte[] attrData=new byte[length];  bfr.reset();  bfr.get(attrData);  return AttributeFactory.createAttribute(attrData);}  }
class C{  public A first(){  return elements.head;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element badElement;  doc=(Document)load("hc_staff",true);{    boolean success=false;    try {      badElement=doc.createElement("");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public void start() throws IOException {  this.isRunning=true;  Thread thread=new Thread(this);  thread.setDaemon(true);  thread.setName("MessageProcessorThread-UDP-" + getIpAddress().getHostAddress() + '/'+ getPort());  thread.setPriority(sipStack.getThreadPriority());  thread.start();}  }
class C{  @Override public void initializeForBranch(TemplateFile templateFile,Branch branch,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  initializeInternal(templateFile,arguments,lineNumber,warnings);}  }
class C{  public static void main(String[] args){  if (args.length == 1) {    System.out.println(hash(args[0]));  } else   if (args.length == 2 && args[0].equals("-f")) {    String passwd=TextCrypt.readFromPasswordFile(args[1]);    if (passwd != null) {      System.out.println(hash(passwd.trim()));    }  }}  }
class C{  public String toXMLString(){  StringBuilder xmlsb=new StringBuilder(1000);  xmlsb.append("<").append(POLICY_SERVICE_ROOT).append(" ").append(POLICYSERVICE_VERSION).append("=").append("\"").append(version).append("\"");  if ((revision != null) && (revision.trim().length() != 0)) {    xmlsb.append(" ").append(POLICYSERVICE_REVISION).append("=").append("\"").append(revision).append("\"");  }  xmlsb.append(">" + CRLF);switch (methodID) {case POLICY_REQUEST_ID:    if (policyReq != null) {      xmlsb.append(policyReq.toXMLString());    }  break;case POLICY_RESPONSE_ID:if (policyRes != null) {  xmlsb.append(policyRes.toXMLString());}break;case POLICY_NOTIFICATION_ID:if (policyNotification != null) {xmlsb.append(policyNotification.toXMLString());}break;default :break;}xmlsb.append("</").append(POLICY_SERVICE_ROOT).append(">").append(CRLF);return xmlsb.toString();}  }
class C{  void saveProfiles(AMIdentityWrapper amIdentity,List<Map<String,Object>> profiles){  try {    Set<String> vals=new HashSet<String>();    for (    Map<String,Object> profile : profiles) {      StringWriter writer=new StringWriter();      MAPPER.writeValue(writer,profile);      vals.add(writer.toString());    }    Map<String,Set> profilesMap=new HashMap<String,Set>();    profilesMap.put(LDAP_DEVICE_PRINT_ATTRIBUTE_NAME,vals);    amIdentity.setAttributes(profilesMap);    amIdentity.store();    DEBUG.message("Profiles stored");  } catch (  Exception e) {    DEBUG.error("Could not store profiles. " + e);  }}  }
class C{  public void play(URL url){  AudioClip clip=getAudioClip(url);  if (clip != null) {    clip.play();  }}  }
class C{  public boolean merge(final Frame<? extends V> frame,final boolean[] access){  boolean changes=false;  for (int i=0; i < locals; ++i) {    if (!access[i] && !values[i].equals(frame.values[i])) {      values[i]=frame.values[i];      changes=true;    }  }  return changes;}  }
class C{  public List<String> methodDescriptionComments(Method method){  return splitToLines(getTrimmedDocs(method));}  }
class C{  public StandardHost(){  super();  pipeline.setBasic(new StandardHostValve());}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (suffixes != null) {    for (int i=0; i < suffixes.length; i++) {      if (i > 0) {        buffer.append(",");      }      buffer.append(suffixes[i]);    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  String tempPrefix="";  if (includeNS) {    if (prefix == null) {      prefix=DSTConstants.DEFAULT_NS_PREFIX;    }    tempPrefix=prefix + ":";  }  if (declareNS) {    if (nameSpaceURI == null) {      DSTUtils.debug.error("DSTModification.toString: Name Space is " + "not defined");      return "";    }  }  StringBuffer sb=new StringBuffer(300);  sb.append("<").append(tempPrefix).append("Modification");  if (id != null && id.length() != 0) {    sb.append(" id=\"").append(id).append("\"");  }  sb.append(" overrideAllowed=\"");  if (overrideAllowed) {    sb.append("true").append("\"");  } else {    sb.append("false").append("\"");  }  if (notChangedSince != null) {    sb.append(" notChangedSince=\"").append(DateUtils.toUTCDateFormat(notChangedSince)).append("\"");  }  if (declareNS) {    sb.append(" xmlns:").append(prefix).append("=\"").append(nameSpaceURI).append("\"").append(" xmlns=\"").append(nameSpaceURI).append("\"");  }  sb.append(">").append("<").append(tempPrefix).append("Select").append(">").append(appendPrefix(select,prefix)).append("</").append(tempPrefix).append("Select").append(">").append("<").append(tempPrefix).append("NewData").append(">");  Iterator iter=newData.iterator();  while (iter.hasNext()) {    Node node=(Node)iter.next();    sb.append(XMLUtils.print(node));  }  sb.append("</").append(tempPrefix).append("NewData").append(">").append("</").append(tempPrefix).append("Modification").append(">");  return sb.toString();}  }
class C{  public static VersionInfoDialogFragment newInstance(String title,String version,String copyrightOwner,int imageId){  VersionInfoDialogFragment fragment=new VersionInfoDialogFragment();  Bundle args=new Bundle();  args.putString(ARG_TITLE,title);  args.putString(ARG_VERSION,version);  args.putString(ARG_OWNER,copyrightOwner);  args.putInt(ARG_IMAGE_ID,imageId);  fragment.setArguments(args);  return fragment;}  }
class C{  public String keyspace(){  return keyspace;}  }
class C{  public void testCertStore12() throws InvalidAlgorithmParameterException {  if (!initParams()) {    return;  }  try {    CertStore.getInstance(null,dParams,dProv);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when type is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertStore.getInstance(invalidValues[i],dParams,dProv);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_domimplementationfeaturenull.class,args);}  }
class C{  public UserNamePasswordValidationException(String message){  super(message);}  }
class C{  public DeflaterOutputStream(OutputStream out,Deflater def,boolean syncFlush){  this(out,def,512,syncFlush);}  }
class C{  public static void main(String[] args){  DOMTestCase.doMain(alltests.class,args);}  }
class C{  @Override public synchronized void reset() throws IOException {  if (!markSupported) {    throw new UnsupportedOperationException("Mark not supported");  }  if (mark < 0) {    throw new IOException("No position has been marked");  }  if (position > mark + readlimit) {    throw new IOException("Marked position [" + mark + "] is no longer valid - passed the read limit ["+ readlimit+ "]");  }  position=mark;  eof=false;}  }
class C{  @Inject public SelfServiceRequestHandler(Class<? extends ConsoleConfigBuilder<C>> consoleConfigBuilderType,ConsoleConfigHandler consoleConfigHandler,ServiceConfigProviderFactory providerFactory,SelfServiceFactory serviceFactory){  serviceCache=new ConcurrentHashMap<>();  this.consoleConfigBuilderType=consoleConfigBuilderType;  this.consoleConfigHandler=consoleConfigHandler;  this.providerFactory=providerFactory;  this.serviceFactory=serviceFactory;  this.descriptorKey=consoleConfigBuilderType.getSimpleName();  this.descriptor=apiDescription().id("fake:id").version("fake").paths(paths().put("",versionedPath().put(VersionedPath.UNVERSIONED,resource().title(i18nString(TITLE)).description(i18nString(DESCRIPTION)).mvccSupported(false).resourceSchema(schema().schema(schemaFromResource("resource")).build()).read(read().description(i18nString(READ_DESCRIPTION)).build()).action(action().name("submitRequirements").description(i18nString(ACTION + "submitRequirements." + DESCRIPTION)).request(schema().schema(schemaFromResource("submit.req")).build()).response(schema().schema(schemaFromResource("submit.resp")).build()).build()).build()).build()).build()).build();  consoleConfigHandler.registerListener(this,consoleConfigBuilderType);}  }
class C{  public boolean isOnLine2(){  return onLine2;}  }
class C{  protected void doUnlock(HttpServletRequest req,HttpServletResponse resp) throws IOException {  if (readOnly) {    resp.sendError(WebdavStatus.SC_FORBIDDEN);    return;  }  if (isLocked(req)) {    resp.sendError(WebdavStatus.SC_LOCKED);    return;  }  String path=getRelativePath(req);  String lockTokenHeader=req.getHeader("Lock-Token");  if (lockTokenHeader == null)   lockTokenHeader="";  LockInfo lock=resourceLocks.get(path);  Enumeration<String> tokenList=null;  if (lock != null) {    tokenList=lock.tokens.elements();    while (tokenList.hasMoreElements()) {      String token=tokenList.nextElement();      if (lockTokenHeader.indexOf(token) != -1) {        lock.tokens.removeElement(token);      }    }    if (lock.tokens.isEmpty()) {      resourceLocks.remove(path);      lockNullResources.remove(path);    }  }  Enumeration<LockInfo> collectionLocksList=collectionLocks.elements();  while (collectionLocksList.hasMoreElements()) {    lock=collectionLocksList.nextElement();    if (path.equals(lock.path)) {      tokenList=lock.tokens.elements();      while (tokenList.hasMoreElements()) {        String token=tokenList.nextElement();        if (lockTokenHeader.indexOf(token) != -1) {          lock.tokens.removeElement(token);          break;        }      }      if (lock.tokens.isEmpty()) {        collectionLocks.removeElement(lock);        lockNullResources.remove(path);      }    }  }  resp.setStatus(WebdavStatus.SC_NO_CONTENT);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private <T>void modifyPropertyValues(ManagedObject<?> mo,PropertyDefinition<T> pd,Map<PropertyDefinition,Set> changes,ModificationType modType,String s) throws ArgumentException {  Set<T> values=changes.get(pd);  if (values == null) {    values=mo.getPropertyValues(pd);  }  if (s == null || s.length() == 0) {    values.clear();  } else {    T value;    try {      value=pd.decodeValue(s);    } catch (    PropertyException e) {      throw ArgumentExceptionFactory.adaptPropertyException(e,mo.getManagedObjectDefinition());    }switch (modType) {case ADD:      values.add(value);    break;case REMOVE:  if (!values.remove(value)) {    throw ArgumentExceptionFactory.unknownValueForMultiValuedProperty(s,pd.getName());  }break;case SET:values=new TreeSet<>(pd);values.add(value);break;}}changes.put(pd,values);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.FilterPseudonymsType createFilterPseudonymsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FilterPseudonymsTypeImpl();}  }
class C{  public void warn(XPathContext xctxt,String msg,Object args[]) throws javax.xml.transform.TransformerException {  String formattedMsg=XSLMessages.createWarning(msg,args);  ErrorListener errHandler=xctxt.getErrorListener();  errHandler.warning(new TransformerException(formattedMsg,(SAXSourceLocator)xctxt.getSAXLocator()));}  }
class C{  public Object clone(){  TelURLImpl retval=(TelURLImpl)super.clone();  if (this.telephoneNumber != null)   retval.telephoneNumber=(TelephoneNumber)this.telephoneNumber.clone();  return retval;}  }
class C{  public void unbindDisappearEvent(WXComponent component){  ConcurrentHashMap<String,AppearData> appearMap=mAppearMap.get(getInnerView());  if (appearMap == null) {    return;  }  AppearData appearData=appearMap.get(component.getRef());  if (appearData == null) {    return;  }  appearData.hasDisappear=false;  if (!appearData.hasAppear) {    appearMap.remove(component.getRef());  }}  }
class C{  public CustomHeaderExtractor(String customHeaderUsername,String customHeaderPassword){  this.customHeaderUsername=checkNotNull(customHeaderUsername,"customHeaderUsername cannot be null");  this.customHeaderPassword=checkNotNull(customHeaderPassword,"customHeaderPassword cannot be null");}  }
class C{  protected void addWrapper(ContextVersion context,String path,Wrapper wrapper,boolean jspWildCard,boolean resourceOnly){synchronized (context) {    if (path.endsWith("/*")) {      String name=path.substring(0,path.length() - 2);      MappedWrapper newWrapper=new MappedWrapper(name,wrapper,jspWildCard,resourceOnly);      MappedWrapper[] oldWrappers=context.wildcardWrappers;      MappedWrapper[] newWrappers=new MappedWrapper[oldWrappers.length + 1];      if (insertMap(oldWrappers,newWrappers,newWrapper)) {        context.wildcardWrappers=newWrappers;        int slashCount=slashCount(newWrapper.name);        if (slashCount > context.nesting) {          context.nesting=slashCount;        }      }    } else     if (path.startsWith("*.")) {      String name=path.substring(2);      MappedWrapper newWrapper=new MappedWrapper(name,wrapper,jspWildCard,resourceOnly);      MappedWrapper[] oldWrappers=context.extensionWrappers;      MappedWrapper[] newWrappers=new MappedWrapper[oldWrappers.length + 1];      if (insertMap(oldWrappers,newWrappers,newWrapper)) {        context.extensionWrappers=newWrappers;      }    } else     if (path.equals("/")) {      MappedWrapper newWrapper=new MappedWrapper("",wrapper,jspWildCard,resourceOnly);      context.defaultWrapper=newWrapper;    } else {      final String name;      if (path.length() == 0) {        name="/";      } else {        name=path;      }      MappedWrapper newWrapper=new MappedWrapper(name,wrapper,jspWildCard,resourceOnly);      MappedWrapper[] oldWrappers=context.exactWrappers;      MappedWrapper[] newWrappers=new MappedWrapper[oldWrappers.length + 1];      if (insertMap(oldWrappers,newWrappers,newWrapper)) {        context.exactWrappers=newWrappers;      }    }  }}  }
class C{  public static synchronized void updateModuleInstanceTable(String realm,String serviceName){  realm=com.sun.identity.sm.DNMapper.orgNameToDN(realm);  if (MODULE_INSTANCE_TABLE.containsKey(realm)) {    buildModuleInstanceForService(realm,serviceName);  }}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  static void checkDesc(final String desc,final boolean canBeVoid){  int end=checkDesc(desc,0,canBeVoid);  if (end != desc.length()) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrinsertdataoffsetgreater.class,args);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String siteName=getStringOptionValue(IArgument.SITE_NAME);  String siteID=getStringOptionValue(IArgument.SITE_ID);  String[] params={siteName,siteID};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_SITE_ID",params);    if (SiteConfiguration.isSiteExist(adminSSOToken,siteName)) {      SiteConfiguration.setSiteID(adminSSOToken,siteName,siteID);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("set-site-id-succeeded"),(Object[])params));    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("set-site-id-no-exists"),(Object[])params));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_SITE_ID",params);  } catch (  SSOException ssoe) {    String[] args={siteName,siteID,ssoe.getMessage()};    debugError("SetSitePrimaryURL.handleRequest",ssoe);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SITE_ID",args);    throw new CLIException(ssoe,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  ConfigurationException ce) {    String[] args={siteName,siteID,ce.getMessage()};    debugError("SetSitePrimaryURL.handleRequest",ce);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SITE_ID",args);    throw new CLIException(ce,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException smse) {    String[] args={siteName,siteID,smse.getMessage()};    debugError("SetSitePrimaryURL.handleRequest",smse);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SITE_ID",args);    throw new CLIException(smse,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String realm=getStringOptionValue(IArgument.REALM_NAME);  String name=getStringOptionValue(PARAM_NAME);  String[] params={realm,name};  try {    Map<String,Set<String>> mapAppToResources=getApplicationResourcesMap(rc,realm);    boolean bAdd=isOptionSet(PARAM_ADD);    Subject userSubject=SubjectUtils.createSubject(getAdminSSOToken());    ApplicationPrivilegeManager apm=ApplicationPrivilegeManager.getInstance(realm,userSubject);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_UPDATE_APPLICATION_PRIVILEGE",params);    ApplicationPrivilege appPrivilege=apm.getPrivilege(name);    Map<String,Set<String>> origAppToResources=getApplicationToResources(appPrivilege);    Map map=(bAdd) ? mergeMap(origAppToResources,mapAppToResources) : mapAppToResources;    appPrivilege.setApplicationResources(map);    apm.replacePrivilege(appPrivilege);    Object[] msgParam={name};    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("update-application-privilege-succeeded"),msgParam));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_UPDATE_APPLICATION_PRIVILEGE",params);  } catch (  EntitlementException ex) {    String[] paramExs={realm,name,ex.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_UPDATE_APPLICATION_PRIVILEGE",paramExs);    throw new CLIException(ex,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void addAlertGenerator(AlertGenerator generator){synchronized (alertGenerators) {    if (!alertGenerators.contains(generator)) {      alertGenerators.add(generator);    }  }}  }
class C{  public static Position[] simplify(Position[] points,boolean highestQuality){  return simplify(points,SIMPLIFY_DEFAULT_TOLERANCE,highestQuality);}  }
class C{  public TokenDataStore(JavaBeanAdapter<T> adapter,TaskExecutor taskExecutor,TaskFactory taskFactory){  this(adapter,taskExecutor,taskFactory,InjectorHolder.getInstance(Key.get(Debug.class,Names.named(DataLayerConstants.DATA_LAYER_DEBUG))));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetfirstchild.class,args);}  }
class C{  ArchiveException(String message,Exception cause){  super(message,cause);}  }
class C{  public BasicTextFieldUI(){  super();}  }
class C{  public void treeCollapsed(TreeExpansionEvent e){  fireVisibleDataPropertyChange();  TreePath path=e.getPath();  if (path != null) {    AccessibleJTreeNode node=new AccessibleJTreeNode(JTree.this,path,null);    PropertyChangeEvent pce=new PropertyChangeEvent(node,AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.EXPANDED,AccessibleState.COLLAPSED);    firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,pce);  }}  }
class C{  private void dumpBfr(ByteBuffer bfr){  System.out.println("Packet contents: ");  bfr.mark();  int i=0;  for (; bfr.hasRemaining(); ) {    if (i == 16) {      System.out.println();      i=0;    }    i++;    final byte b=bfr.get();    final int j=(b) & 0xFF;    String bt=Integer.toHexString(j);    if (bt.length() == 1) {      bt="0" + bt;    }    System.out.print(bt + " ");  }  bfr.reset();  System.out.println();}  }
class C{  @Override ObservedObject createObservedObject(ObjectName object){  final StringMonitorObservedObject smo=new StringMonitorObservedObject(object);  smo.setStatus(MATCHING_OR_DIFFERING);  return smo;}  }
class C{  public TypeConstraintException(String message,String errorCode,Throwable exception){  super(message);  this.errorCode=errorCode;  this.linkedException=exception;}  }
class C{  public void zoom_frame(Point2D p_position1,Point2D p_position2){  double width_of_zoom_frame=Math.abs(p_position1.getX() - p_position2.getX());  double height_of_zoom_frame=Math.abs(p_position1.getY() - p_position2.getY());  double center_x=Math.min(p_position1.getX(),p_position2.getX()) + (width_of_zoom_frame / 2);  double center_y=Math.min(p_position1.getY(),p_position2.getY()) + (height_of_zoom_frame / 2);  Point2D center_point=new Point2D.Double(center_x,center_y);  Rectangle display_rect=board_frame.getViewportBorderBounds();  double width_factor=display_rect.getWidth() / width_of_zoom_frame;  double height_factor=display_rect.getHeight() / height_of_zoom_frame;  Point2D changed_location=zoom(Math.min(width_factor,height_factor),center_point);  set_viewport_center(changed_location);}  }
class C{  public SimplexOctaveGenerator(World world,int octaves){  this(new Random(world.getSeed()),octaves);}  }
class C{  public void testSecretKeyFactory05() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      SecretKeyFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException was not thrown as expected (algorithm: ".concat(validValues[i]).concat(" provider: null"));    } catch (    IllegalArgumentException e) {    }    try {      SecretKeyFactory.getInstance(validValues[i],"");      fail("IllegalArgumentException was not thrown as expected (algorithm: ".concat(validValues[i]).concat(" provider: empty"));    } catch (    IllegalArgumentException e) {    }    for (int j=1; j < invalidValues.length; j++) {      try {        SecretKeyFactory.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException was not thrown as expected (algorithm: ".concat(validValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  public void testCase1(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={0};  int aSign=1;  int bSign=0;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  try {    aNumber.divide(bNumber);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  public Matrix(){}  }
class C{  public AttributedString(String text,Map<? extends Attribute,?> attributes){  if (text == null || attributes == null) {    throw new NullPointerException();  }  this.text=text;  if (text.length() == 0) {    if (attributes.isEmpty())     return;    throw new IllegalArgumentException("Can't add attribute to 0-length text");  }  int attributeCount=attributes.size();  if (attributeCount > 0) {    createRunAttributeDataVectors();    Vector<Attribute> newRunAttributes=new Vector<>(attributeCount);    Vector<Object> newRunAttributeValues=new Vector<>(attributeCount);    runAttributes[0]=newRunAttributes;    runAttributeValues[0]=newRunAttributeValues;    Iterator<? extends Map.Entry<? extends Attribute,?>> iterator=attributes.entrySet().iterator();    while (iterator.hasNext()) {      Map.Entry<? extends Attribute,?> entry=iterator.next();      newRunAttributes.addElement(entry.getKey());      newRunAttributeValues.addElement(entry.getValue());    }  }}  }
class C{  public boolean doAuthenticateHashedPassword(Request request,String hashedPassword){  ProxyAuthorizationHeader authHeader=(ProxyAuthorizationHeader)request.getHeader(ProxyAuthorizationHeader.NAME);  if (authHeader == null)   return false;  String realm=authHeader.getRealm();  String username=authHeader.getUsername();  if (username == null || realm == null) {    return false;  }  String nonce=authHeader.getNonce();  URI uri=authHeader.getURI();  if (uri == null) {    return false;  }  String A2=request.getMethod().toUpperCase() + ":" + uri.toString();  String HA1=hashedPassword;  byte[] mdbytes=messageDigest.digest(A2.getBytes());  String HA2=toHexString(mdbytes);  String cnonce=authHeader.getCNonce();  String KD=HA1 + ":" + nonce;  if (cnonce != null) {    KD+=":" + cnonce;  }  KD+=":" + HA2;  mdbytes=messageDigest.digest(KD.getBytes());  String mdString=toHexString(mdbytes);  String response=authHeader.getResponse();  return mdString.equals(response);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationfeaturexmlversion2.class,args);}  }
class C{  public boolean isPasswordPolicySubentry(){  return hasObjectClass(OC_PWD_POLICY_SUBENTRY_LC);}  }
class C{  public static void stop(){  if (INSTANCE != null) {    INSTANCE.scheduler.shutdown();    INSTANCE=null;  }}  }
class C{  @Override public boolean isRequestedSessionIdValid(){  if (crossContext) {    String requestedSessionId=getRequestedSessionId();    if (requestedSessionId == null)     return false;    if (context == null)     return false;    Manager manager=context.getManager();    if (manager == null)     return false;    Session session=null;    try {      session=manager.findSession(requestedSessionId);    } catch (    IOException e) {    }    if ((session != null) && session.isValid()) {      return true;    } else {      return false;    }  } else {    return super.isRequestedSessionIdValid();  }}  }
class C{  public OutputStream _request(String operation,boolean responseExpected){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  int size(){  return users.size();}  }
class C{  public void handleButton1Request(RequestInvocationEvent event){  backTrail();  forwardToRealmView(event);}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s4_linear_with_only_annotated_tags_and_branch();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public void testKeyPairGenerator06() throws NoSuchProviderException, NoSuchAlgorithmException, IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  KeyPairGenerator kpg;  for (int i=0; i < algs.length; i++) {    kpg=KeyPairGenerator.getInstance(algs[i],validProviderName);    assertEquals("Incorrect algorithm",kpg.getAlgorithm().toUpperCase(),algs[i].toUpperCase());    assertEquals("Incorrect provider",kpg.getProvider().getName(),validProviderName);  }}  }
class C{  @Override public void contextDestroyed(ServletContextEvent event){  log("contextDestroyed()");  this.context=null;}  }
class C{  public void handleEvent(EventObject sipEvent,SIPTransaction transaction){  if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {    logger.logDebug("handleEvent " + sipEvent + "currentTransaction = "+ transaction+ "this.sipListener = "+ this.getSipListener()+ "sipEvent.source = "+ sipEvent.getSource());    if (sipEvent instanceof RequestEvent) {      Dialog dialog=((RequestEvent)sipEvent).getDialog();      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))       logger.logDebug("Dialog = " + dialog);    } else     if (sipEvent instanceof ResponseEvent) {      Dialog dialog=((ResponseEvent)sipEvent).getDialog();      if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))       logger.logDebug("Dialog = " + dialog);    }    logger.logStackTrace();  }  EventWrapper eventWrapper=new EventWrapper(sipEvent,transaction);  if (!sipStack.isReEntrantListener()) {    this.eventScanner.addEvent(eventWrapper);  } else {    this.eventScanner.deliverEvent(eventWrapper);  }}  }
class C{  public void clear(){synchronized (lock) {    items.clear();  }  itemPositionChangeChecked=new SparseBooleanArray(items.size());  notifyDataSetChanged();}  }
class C{  public int hashCode(){  return this.credentialClass.hashCode();}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public ModifyDNMsg(PostOperationModifyDNOperation operation){  super((OperationContext)operation.getAttachment(SYNCHROCONTEXT),operation.getEntryDN());  encodedMods=encodeMods(operation.getModifications());  ModifyDnContext ctx=(ModifyDnContext)operation.getAttachment(SYNCHROCONTEXT);  newSuperiorEntryUUID=ctx.getNewSuperiorEntryUUID();  deleteOldRdn=operation.deleteOldRDN();  final ByteString rawNewSuperior=operation.getRawNewSuperior();  newSuperior=rawNewSuperior != null ? rawNewSuperior.toString() : null;  newRDN=operation.getRawNewRDN().toString();}  }
class C{  public void resetFragments(){  resetFragments(mCurrentPosition);}  }
class C{  @Override public void destroy(){  String onStr="JMImplementation:type=MBeanServerDelegate";  ObjectName objectName;  try {    objectName=new ObjectName(onStr);    mBeanServer.removeNotificationListener(objectName,this,null,null);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  protected HashAttributeSet(Attribute[] attributes,Class<?> interfaceName){  if (interfaceName == null) {    throw new NullPointerException("null interface");  }  myInterface=interfaceName;  int n=attributes == null ? 0 : attributes.length;  for (int i=0; i < n; ++i) {    add(attributes[i]);  }}  }
class C{  public FieldFrameBodyIMG(String imageString){  readString(imageString);}  }
class C{  private boolean searchFilterSatisfied(String searchFilter) throws SSOException, PolicyException {  if (debug.messageEnabled()) {    debug.message("LDAPFilterCondition.searchFilterSatified():" + "entering, searchFitler=" + searchFilter);  }  boolean filterSatisfied=false;  String[] attrs={userRDNAttrName};  Connection ld=null;  try (Connection conn=connPool.getConnection()){    SearchRequest searchRequest=LDAPRequests.newSearchRequest(baseDN,userSearchScope,searchFilter,attrs);    ConnectionEntryReader reader=conn.search(searchRequest);    if (reader.hasNext()) {      if (reader.isReference()) {        reader.readReference();      } else {        SearchResultEntry entry=reader.readEntry();        if (entry != null) {          String dn=entry.getName().toString();          if (dn != null && dn.length() != 0) {            debug.message("LDAPFilterCondition.searchFilterSatified(): dn={}",dn);            filterSatisfied=true;          }        }      }    }  } catch (  LdapException le) {    ResultCode resultCode=le.getResult().getResultCode();    if (ResultCode.SIZE_LIMIT_EXCEEDED.equals(resultCode)) {      debug.warning("LDAPFilterCondition.searchFilterSatified(): exceeded the size limit");    } else     if (ResultCode.TIME_LIMIT_EXCEEDED.equals(resultCode)) {      debug.warning("LDAPFilterCondition.searchFilterSatified(): exceeded the time limit");    } else     if (ResultCode.INVALID_CREDENTIALS.equals(resultCode)) {      throw new PolicyException(ResBundleUtils.rbName,"ldap_invalid_password",null,null);    } else     if (ResultCode.NO_SUCH_OBJECT.equals(resultCode)) {      String[] objs={baseDN};      throw new PolicyException(ResBundleUtils.rbName,"no_such_ldap_users_base_dn",objs,null);    }    String errorMsg=le.getMessage();    String additionalMsg=le.getResult().getDiagnosticMessage();    if (additionalMsg != null) {      throw new PolicyException(errorMsg + ": " + additionalMsg);    } else {      throw new PolicyException(errorMsg);    }  }catch (  SearchResultReferenceIOException e) {    debug.warning("LDAPFilterCondition.searchFilterSatified()" + ": Partial results have been received, status code 9." + " The message provided by the LDAP server is: \n"+ e.getMessage());  }  debug.message("LDAPFilterCondition.searchFilterSatified():returning, filterSatisfied={}",filterSatisfied);  return filterSatisfied;}  }
class C{  @Inject public DeviceCodeVerificationResource(XUIState xuiState,@Named("OAuth2Router") Router router,BaseURLProviderFactory baseURLProviderFactory,OAuth2Representation representation,TokenStore tokenStore,OAuth2RequestFactory requestFactory,AuthorizationService authorizationService,OAuth2ProviderSettingsFactory providerSettingsFactory,ExceptionHandler exceptionHandler,ResourceOwnerSessionValidator resourceOwnerSessionValidator,ClientRegistrationStore clientRegistrationStore,OAuth2Utils oAuth2Utils,CsrfProtection csrfProtection){  super(router,baseURLProviderFactory,xuiState,resourceOwnerSessionValidator);  this.representation=representation;  this.tokenStore=tokenStore;  this.requestFactory=requestFactory;  this.authorizationService=authorizationService;  this.providerSettingsFactory=providerSettingsFactory;  this.exceptionHandler=exceptionHandler;  this.resourceOwnerSessionValidator=resourceOwnerSessionValidator;  this.clientRegistrationStore=clientRegistrationStore;  this.oAuth2Utils=oAuth2Utils;  this.csrfProtection=csrfProtection;}  }
class C{  private void createDatasetsNode(Node n){  while (n.getChildNodes().getLength() == 0) {    n=n.getNextSibling();  }  if (n != null) {    Element e=n.getOwnerDocument().createElement("xfa:datasets");    e.setAttribute("xmlns:xfa",XFA_DATA_SCHEMA);    datasetsNode=e;    n.appendChild(datasetsNode);  }}  }
class C{  private int epochMonthLength(int epochMonth){  return hijrahEpochMonthStartDays[epochMonth + 1] - hijrahEpochMonthStartDays[epochMonth];}  }
class C{  public void unsetCompression(){  if (getCompressionMode() != MODE_EXPLICIT) {    throw new IllegalStateException("Compression mode not MODE_EXPLICIT!");  }  this.compressionQuality=JPEG.DEFAULT_QUALITY;}  }
class C{  protected boolean isAllocationValid(){  return (majorAllocValid && minorAllocValid);}  }
class C{  public boolean isEmpty(){  return hlist.isEmpty();}  }
class C{  public boolean hasMoreTokens(){  newPosition=skipDelimiters(currentPosition);  return (newPosition < maxPosition);}  }
class C{  public void windowClosing(WindowEvent e){  setSelected(false);}  }
class C{  public ProviderDoesNotExistException(){  super();}  }
class C{  private int readField(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  String signature=null;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  Object value=null;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("ConstantValue".equals(attrName)) {      int item=readUnsignedShort(u + 8);      value=item == 0 ? null : readConst(item,c);    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);  if (fv == null) {    return u;  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    fv.visitAttribute(attributes);    attributes=attr;  }  fv.visitEnd();  return u;}  }
class C{  private static boolean filterServersWithSameGenerationId(RSEvaluations evals,long localServerId,long generationId){  final Map<Integer,ReplicationServerInfo> bestServers=evals.bestRSs;  final LocalEvaluation eval=new LocalEvaluation();  boolean emptyState=true;  for (  Entry<Integer,ReplicationServerInfo> entry : bestServers.entrySet()) {    final Integer rsId=entry.getKey();    final ReplicationServerInfo rsInfo=entry.getValue();    if (rsInfo.getGenerationId() == generationId) {      eval.accept(rsId,rsInfo);      if (!rsInfo.serverState.isEmpty()) {        emptyState=false;      }    } else     if (rsInfo.getGenerationId() == -1) {      eval.reject(rsInfo,NOTE_RS_HAS_NO_GENERATION_ID.get(rsId,generationId,localServerId));    } else {      eval.reject(rsInfo,NOTE_RS_HAS_DIFFERENT_GENERATION_ID_THAN_DS.get(rsId,rsInfo.getGenerationId(),localServerId,generationId));    }  }  if (emptyState) {    for (    Entry<Integer,ReplicationServerInfo> entry : bestServers.entrySet()) {      ReplicationServerInfo rsInfo=entry.getValue();      if (rsInfo.getGenerationId() == -1) {        eval.accept(entry.getKey(),rsInfo);      }    }  }  return evals.keepBest(eval);}  }
class C{  public static boolean isComparable(Object object){  return (object instanceof Comparable);}  }
class C{  public byte[] toBytes(){  byte[] output=new byte[32];  do {    for (int i=0; i < 9; i++) {      if ((i & 1) == 1) {        while (c[i] < 0) {          c[i]+=0x2000000;          c[i + 1]--;        }      } else {        while (c[i] < 0) {          c[i]+=0x4000000;          c[i + 1]--;        }      }    }    while (c[9] < 0) {      c[9]+=0x2000000;      c[0]-=19;    }  } while (c[0] < 0);  c[1]<<=2;  c[2]<<=3;  c[3]<<=5;  c[4]<<=6;  c[6]<<=1;  c[7]<<=3;  c[8]<<=4;  c[9]<<=6;  output[0]=0;  output[16]=0;  bytesFromCoefficients(output,0,0);  bytesFromCoefficients(output,1,3);  bytesFromCoefficients(output,2,6);  bytesFromCoefficients(output,3,9);  bytesFromCoefficients(output,4,12);  bytesFromCoefficients(output,5,16);  bytesFromCoefficients(output,6,19);  bytesFromCoefficients(output,7,22);  bytesFromCoefficients(output,8,25);  bytesFromCoefficients(output,9,28);  return output;}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=ProtocolObjects.messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    logger.info("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    logger.error(ex);    fail(unexpectedException);  }}  }
class C{  public Builder add(String line){  int index=line.indexOf(":");  if (index == -1) {    throw new IllegalArgumentException("Unexpected header: " + line);  }  return add(line.substring(0,index).trim(),line.substring(index + 1));}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_UPDATE\"";  db.execSQL(sql);}  }
class C{  public BrdShapeAndFromSide(BrdTracep p_trace,int p_index,boolean p_in_shove_check){  AwtreeShapeSearch search_tree=p_trace.r_board.search_tree_manager.get_default_tree();  ShapeTile curr_shape=p_trace.get_tree_shape(search_tree,p_index);  BrdFromSide curr_from_side=null;  boolean cut_off_at_start=false;  boolean cut_off_at_end=false;  curr_shape=curr_shape.to_Simplex();  PlaLineInt end_cutline=calc_cutline_at_end(p_index,p_trace);  if (end_cutline != null) {    ShapeTile cut_plane=new ShapeTileSimplex(end_cutline);    ShapeTile tmp_shape=curr_shape.intersection(cut_plane);    if (tmp_shape != curr_shape && !tmp_shape.is_empty()) {      curr_shape=tmp_shape.to_Simplex();      cut_off_at_end=true;    }  }  PlaLineInt start_cutline=calc_cutline_at_start(p_index,p_trace);  if (start_cutline != null) {    ShapeTile cut_plane=new ShapeTileSimplex(start_cutline);    ShapeTile tmp_shape=curr_shape.intersection(cut_plane);    if (tmp_shape != curr_shape && !tmp_shape.is_empty()) {      curr_shape=tmp_shape.to_Simplex();      cut_off_at_start=true;    }  }  int from_side_no=-1;  PlaLineInt curr_cut_line=null;  if (cut_off_at_start == true) {    curr_cut_line=start_cutline;    from_side_no=curr_shape.border_line_index(curr_cut_line);  }  if (from_side_no < 0 && cut_off_at_end == true) {    curr_cut_line=end_cutline;    from_side_no=curr_shape.border_line_index(curr_cut_line);  }  if (from_side_no >= 0) {    PlaPointFloat border_intersection=curr_cut_line.intersection_approx(curr_shape.border_line(from_side_no));    if (!border_intersection.is_NaN())     curr_from_side=new BrdFromSide(from_side_no,border_intersection);  }  if (curr_from_side == null && !p_in_shove_check) {    curr_from_side=new BrdFromSide(p_trace.polyline(),p_index,curr_shape);  }  shape=curr_shape;  from_side=curr_from_side;}  }
class C{  private LDAPReplicationDomain startNewReplicationDomain(DomainFakeCfg domainConf,SortedSet<String> eclInclude,SortedSet<String> eclIncludeForDeletes) throws Exception {  LDAPReplicationDomain domain=MultimasterReplication.findDomain(domainConf.getBaseDN(),null);  if (domain == null) {    domainConf.setExternalChangelogDomain(new ExternalChangelogDomainFakeCfg(true,eclInclude,eclIncludeForDeletes));    domainConf.setChangetimeHeartbeatInterval(10);    domain=MultimasterReplication.createNewDomain(domainConf);    domain.start();    domains.add(domain);  }  return domain;}  }
class C{  @Override public Foo[] findByUuid_C_PrevAndNext(long fooId,String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByUuid_C_PrevAndNext(session,foo,uuid,companyId,orderByComparator,true);    array[1]=foo;    array[2]=getByUuid_C_PrevAndNext(session,foo,uuid,companyId,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  private String fileToString(File file) throws IOException {  InputStream in=new BufferedInputStream(new FileInputStream(file),1024);  Reader reader;  in.mark(3);  int byte1=in.read();  int byte2=in.read();  if (byte1 == 0xFF && byte2 == 0xFE) {    reader=new InputStreamReader(in,"UTF-16LE");  } else   if (byte1 == 0xFF && byte2 == 0xFF) {    reader=new InputStreamReader(in,"UTF-16BE");  } else {    int byte3=in.read();    if (byte1 == 0xEF && byte2 == 0xBB && byte3 == 0xBF) {      reader=new InputStreamReader(in,"UTF-8");    } else {      in.reset();      reader=new InputStreamReader(in);    }  }  StringWriter out=new StringWriter();  char[] buffer=new char[1024];  int count;  while ((count=reader.read(buffer)) != -1) {    out.write(buffer,0,count);  }  in.close();  return out.toString();}  }
class C{  @Override public Uri insert(Uri uri,ContentValues values){  Log.d(TAG,"FmRadioContentProvider.insert");  Uri rowUri=null;  mSqlDb=mDbHelper.getWritableDatabase();  ContentValues v=new ContentValues(values);  if (!v.containsKey(FmRadioStation.Station.COLUMN_STATION_NAME) || !v.containsKey(FmRadioStation.Station.COLUMN_STATION_FREQ) || !v.containsKey(FmRadioStation.Station.COLUMN_STATION_TYPE)) {    Log.e(TAG,"Error: Invalid values.");    return rowUri;  }  long rowId=mSqlDb.insert(TABLE_NAME,null,v);  if (rowId <= 0) {    Log.e(TAG,"Error: Failed to insert row into " + uri);  }  rowUri=ContentUris.appendId(FmRadioStation.Station.CONTENT_URI.buildUpon(),rowId).build();  getContext().getContentResolver().notifyChange(rowUri,null);  return rowUri;}  }
class C{  public String toPattern(){  return pattern;}  }
class C{  public boolean isResourceNameAllowed(){  return (as.isResourceNameAllowed());}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  System.out.println("Got an INVITE  " + request);  if (socketDisconnectWorstCase) {    ((SIPTransactionStack)sipStack).closeAllSockets();  }  this.inviteSeen=true;  try {    System.out.println("shootme: got an Invite sending OK");    Response response=messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ";transport=tls>");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }    } else {      System.out.println("This is a RE INVITE ");      if (st.getDialog() != dialog) {        System.out.println("Whoopsa Daisy Dialog Mismatch");        TlsTest.fail("Whoopsa Daisy Dialog Mismatch");      }    }    System.out.println("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      ContentTypeHeader contentTypeHeader=headerFactory.createContentTypeHeader("application","sdp");      System.out.println("response = " + response);      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      System.out.println("Dialog " + dialog);      System.out.println("Dialog state " + dialog.getState());    }    st.sendResponse(response);    TransactionExt stExt=(TransactionExt)st;    Certificate[] certs=stExt.getPeerCertificates();    System.out.println("Certs = " + certs);    if (certs != null) {      for (      Certificate cert : certs) {        System.out.println("Cert = " + cert);      }    }    response=messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    this.inviteTid=st;  } catch (  Exception ex) {    ex.printStackTrace();    TlsTest.fail("Unexpected exception");  }}  }
class C{  protected Transferable createTransferable(JComponent c){  if (c instanceof JTable) {    JTable table=(JTable)c;    int[] rows;    int[] cols;    if (!table.getRowSelectionAllowed() && !table.getColumnSelectionAllowed()) {      return null;    }    if (!table.getRowSelectionAllowed()) {      int rowCount=table.getRowCount();      rows=new int[rowCount];      for (int counter=0; counter < rowCount; counter++) {        rows[counter]=counter;      }    } else {      rows=table.getSelectedRows();    }    if (!table.getColumnSelectionAllowed()) {      int colCount=table.getColumnCount();      cols=new int[colCount];      for (int counter=0; counter < colCount; counter++) {        cols[counter]=counter;      }    } else {      cols=table.getSelectedColumns();    }    if (rows == null || cols == null || rows.length == 0 || cols.length == 0) {      return null;    }    StringBuffer plainBuf=new StringBuffer();    StringBuffer htmlBuf=new StringBuffer();    htmlBuf.append("<html>\n<body>\n<table>\n");    for (int row=0; row < rows.length; row++) {      htmlBuf.append("<tr>\n");      for (int col=0; col < cols.length; col++) {        Object obj=table.getValueAt(rows[row],cols[col]);        String val=((obj == null) ? "" : obj.toString());        plainBuf.append(val + "\t");        htmlBuf.append("  <td>" + val + "</td>\n");      }      plainBuf.deleteCharAt(plainBuf.length() - 1).append("\n");      htmlBuf.append("</tr>\n");    }    plainBuf.deleteCharAt(plainBuf.length() - 1);    htmlBuf.append("</table>\n</body>\n</html>");    return new BasicTransferable(plainBuf.toString(),htmlBuf.toString());  }  return null;}  }
class C{  public void insert_short(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_short",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_short(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean nextIsSep(){  if (Character.isLetterOrDigit(str.charAt(currentPosition)))   return false; else   return true;}  }
class C{  final void initDocument(int documentNumber){  m_docHandle=documentNumber << DOCHANDLE_SHIFT;  nodes.writeSlot(0,DOCUMENT_NODE,-1,-1,0);  done=false;}  }
class C{  @Override public int countAll(){  Long count=(Long)finderCache.getResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY,this);  if (count == null) {    Session session=null;    try {      session=openSession();      Query q=session.createQuery(_SQL_COUNT_FOO);      count=(Long)q.uniqueResult();      finderCache.putResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY,count);    } catch (    Exception e) {      finderCache.removeResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  private Expression compileOperation(Operation operation,int opPos) throws TransformerException {  int leftPos=getFirstChildPos(opPos);  int rightPos=getNextOpPos(leftPos);  operation.setLeftRight(compile(leftPos),compile(rightPos));  return operation;}  }
class C{  private LocalizableMessage checkAnyListenAddressInUse(Collection<InetAddress> listenAddresses,int listenPort,boolean allowReuseAddress,DN configEntryDN){  for (  InetAddress a : listenAddresses) {    try {      if (StaticUtils.isAddressInUse(a,listenPort,allowReuseAddress)) {        throw new IOException(ERR_CONNHANDLER_ADDRESS_INUSE.get().toString());      }    } catch (    IOException e) {      logger.traceException(e);      return ERR_CONNHANDLER_CANNOT_BIND.get("LDAP",configEntryDN,a.getHostAddress(),listenPort,getExceptionMessage(e));    }  }  return null;}  }
class C{  public static char highSurrogate(int c){  return (char)(((c - 0x00010000) >> 10) + 0xD800);}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public void testConstrStringWithExponentWithoutPoint3(){  String a="238768787678287e-214";  int aScale=214;  BigInteger bA=new BigInteger("238768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.PrincipalAuthenticationMechanismType createPrincipalAuthenticationMechanismType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PrincipalAuthenticationMechanismTypeImpl();}  }
class C{  public static int mainCLI(String[] args,OutputStream outStream,OutputStream errStream,InputStream inStream){  PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  System.setProperty(Constants.CLI_JAVA_PROPERTY,"true");  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  JavaPropertiesTool tool=new JavaPropertiesTool(out,err,inStream);  return tool.execute(args);}  }
class C{  public static boolean isDefinedNSDecl(SerializationHandler serializer,int attr,DTM dtm){  if (DTM.NAMESPACE_NODE == dtm.getNodeType(attr)) {    String prefix=dtm.getNodeNameX(attr);    String uri=serializer.getNamespaceURIFromPrefix(prefix);    if ((null != uri) && uri.equals(dtm.getStringValue(attr)))     return true;  }  return false;}  }
class C{  public static String reverse(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return new StringBuilder(value).reverse().toString();}  }
class C{  public void updateConversationState(){  Conversation.State state=this.anonymousConversation.getState();  conversationStateTextView.setText(state.toString());switch (state) {case ESTABLISHED:    this.meetingJoined=true;  break;case IDLE:conversationStateTextView.setText("");this.meetingJoined=false;if (this.anonymousConversation != null) {this.anonymousConversation.removeOnPropertyChangedCallback(this.conversationPropertyChangeListener);this.anonymousConversation=null;}break;default :}this.updateUiState();if (meetingJoined) {this.navigateToConversationsActivity();}}  }
class C{  public int read() throws IOException {  return sd.read();}  }
class C{  public void sendUserDeleteNotification(Map attributes){  try {    if (deleteNotifyList != null && !deleteNotifyList.isEmpty()) {      sendEmail(deleteNotifyList,attributes,"497","491","494");    }  } catch (  MessagingException e) {    if (debug.warningEnabled()) {      debug.warning("EmailNotificationHelper." + "sendUserDeleteNotification() Unable to send " + "email for user: "+ entryDN,e);    }  }}  }
class C{  public AMPostCallBackException(String msg,String errorCode,UMSException ue){  super(msg,errorCode,ue);}  }
class C{  public void testNegateMathContextPositive(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  int precision=37;  RoundingMode rm=RoundingMode.FLOOR;  MathContext mc=new MathContext(precision,rm);  String c="-929487820944884782312124789.8748298843";  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal res=aNumber.negate(mc);  assertEquals("incorrect value",c,res.toString());  assertEquals("incorrect scale",cScale,res.scale());}  }
class C{  public Object clone(){  ListeningPointImpl lip=new ListeningPointImpl(this.sipStack,this.port,null);  lip.sipStack=this.sipStack;  return lip;}  }
class C{  public void flushPending() throws SAXException {  if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;  }  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  }  if (m_cdataTagOpen) {    closeCDATA();    m_cdataTagOpen=false;  }  if (m_writer != null) {    try {      m_writer.flush();    } catch (    IOException e) {    }  }}  }
class C{  public JarInputStream(InputStream in,boolean verify) throws IOException {  super(in);  this.doVerify=verify;  JarEntry e=(JarEntry)super.getNextEntry();  if (e != null && e.getName().equalsIgnoreCase("META-INF/"))   e=(JarEntry)super.getNextEntry();  first=checkManifest(e);}  }
class C{  public void copyAndAddExtension(String oid,boolean critical,X509Certificate cert) throws CertificateParsingException {  byte[] extValue=cert.getExtensionValue(oid);  if (extValue == null) {    throw new CertificateParsingException("extension " + oid + " not present");  }  try {    ASN1Encodable value=X509ExtensionUtil.fromExtensionValue(extValue);    this.addExtension(oid,critical,value);  } catch (  IOException e) {    throw new CertificateParsingException(e.toString());  }}  }
class C{  public RedirectCallback(String redirectUrl,Map redirectData,String method,String statusParameter,String redirectBackUrlCookie){  this.redirectUrl=redirectUrl;  this.redirectData=redirectData;  this.method=method;  this.statusParameter=statusParameter;  this.redirectBackUrlCookie=redirectBackUrlCookie;}  }
class C{  public DLSet(ASN1Encodable[] a){  super(a,false);}  }
class C{  public Builder flicker(boolean flicker){  this.flicker=flicker;  return this;}  }
class C{  public Paragraph add(ILeafElement element){  childElements.add(element);  return this;}  }
class C{  public String evaluate(XPathContext xctxt,int context,org.apache.xml.utils.PrefixResolver nsNode) throws javax.xml.transform.TransformerException {  if (null != m_simpleString) {    return m_simpleString;  } else   if (null != m_parts) {    final FastStringBuffer buf=getBuffer();    String out=null;    int n=m_parts.size();    try {      for (int i=0; i < n; i++) {        AVTPart part=(AVTPart)m_parts.elementAt(i);        part.evaluate(xctxt,buf,context,nsNode);      }      out=buf.toString();    }  finally {      if (USE_OBJECT_POOL) {        StringBufferPool.free(buf);      } else {        buf.setLength(0);      }    }    return out;  } else {    return "";  }}  }
class C{  private FakeReplicationServer createFakeReplicationServer(int serverId,int groupId,int rsId,long generationId,boolean assured,AssuredMode assuredMode,int safeDataLevel,ServerState serverState,int scenario) throws Exception {  int rsPort=getRsPort(rsId);  FakeReplicationServer fakeReplicationServer=new FakeReplicationServer(rsPort,serverId,assured,assuredMode,safeDataLevel,groupId,DN.valueOf(TEST_ROOT_DN_STRING),generationId);  fakeReplicationServer.connect(serverState);  fakeReplicationServer.start(scenario);  return fakeReplicationServer;}  }
class C{  public ConvolveOp(Kernel kernel,int edgeCondition,RenderingHints hints){  this.kernel=kernel;  this.edgeHint=edgeCondition;  this.hints=hints;}  }
class C{  private void noteDuplicate(int pos1,int pos2){  Name n=names[pos1];  assert (n == names[pos2]);  assert (originalNames[pos1] != null);  assert (originalNames[pos2] == null || originalNames[pos2] == n);  if (dups == null) {    dups=new ArrayList<>();  }  dups.add(n);}  }
class C{  public GenericPrincipal(String name,String password,List<String> roles,Principal userPrincipal,LoginContext loginContext,GSSCredential gssCredential){  super();  this.name=name;  this.password=password;  this.userPrincipal=userPrincipal;  if (roles == null) {    this.roles=new String[0];  } else {    this.roles=roles.toArray(new String[roles.size()]);    if (this.roles.length > 1) {      Arrays.sort(this.roles);    }  }  this.loginContext=loginContext;  this.gssCredential=gssCredential;}  }
class C{  public final BufferedImage filter(BufferedImage src,BufferedImage dst){  ColorModel srcCM=src.getColorModel();  int numBands=srcCM.getNumColorComponents();  ColorModel dstCM;  if (srcCM instanceof IndexColorModel) {    throw new IllegalArgumentException("LookupOp cannot be " + "performed on an indexed image");  }  int numComponents=ltable.getNumComponents();  if (numComponents != 1 && numComponents != srcCM.getNumComponents() && numComponents != srcCM.getNumColorComponents()) {    throw new IllegalArgumentException("Number of arrays in the " + " lookup table (" + numComponents + " is not compatible with the "+ " src image: "+ src);  }  boolean needToConvert=false;  int width=src.getWidth();  int height=src.getHeight();  if (dst == null) {    dst=createCompatibleDestImage(src,null);    dstCM=srcCM;  } else {    if (width != dst.getWidth()) {      throw new IllegalArgumentException("Src width (" + width + ") not equal to dst width ("+ dst.getWidth()+ ")");    }    if (height != dst.getHeight()) {      throw new IllegalArgumentException("Src height (" + height + ") not equal to dst height ("+ dst.getHeight()+ ")");    }    dstCM=dst.getColorModel();    if (srcCM.getColorSpace().getType() != dstCM.getColorSpace().getType()) {      needToConvert=true;      dst=createCompatibleDestImage(src,null);    }  }  BufferedImage origDst=dst;  if (ImagingLib.filter(this,src,dst) == null) {    WritableRaster srcRaster=src.getRaster();    WritableRaster dstRaster=dst.getRaster();    if (srcCM.hasAlpha()) {      if (numBands - 1 == numComponents || numComponents == 1) {        int minx=srcRaster.getMinX();        int miny=srcRaster.getMinY();        int[] bands=new int[numBands - 1];        for (int i=0; i < numBands - 1; i++) {          bands[i]=i;        }        srcRaster=srcRaster.createWritableChild(minx,miny,srcRaster.getWidth(),srcRaster.getHeight(),minx,miny,bands);      }    }    if (dstCM.hasAlpha()) {      int dstNumBands=dstRaster.getNumBands();      if (dstNumBands - 1 == numComponents || numComponents == 1) {        int minx=dstRaster.getMinX();        int miny=dstRaster.getMinY();        int[] bands=new int[numBands - 1];        for (int i=0; i < numBands - 1; i++) {          bands[i]=i;        }        dstRaster=dstRaster.createWritableChild(minx,miny,dstRaster.getWidth(),dstRaster.getHeight(),minx,miny,bands);      }    }    filter(srcRaster,dstRaster);  }  if (needToConvert) {    ColorConvertOp ccop=new ColorConvertOp(hints);    ccop.filter(dst,origDst);  }  return origDst;}  }
class C{  public FrameBodyTIPL(byte textEncoding,String text){  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,textEncoding);  setText(text);}  }
class C{  public static boolean isOpenIdConnectClient(ClientRegistration clientRegistration){  return clientRegistration.getAllowedScopes().contains(OPENID);}  }
class C{  @Override public int read() throws IOException {  return in.read();}  }
class C{  private void genPropertiesIndex(){  TreeSet<String> propMoList=new TreeSet<>();  for (  AbstractManagedObjectDefinition<?,?> mo : moList.values()) {    for (    PropertyDefinition<?> prop : mo.getPropertyDefinitions()) {      propMoList.add(prop.getName() + "," + prop.getManagedObjectDefinition().getName());    }  }  String lettersPointers="";  String firstChar=".";  for (  String propMoStr : propMoList) {    String[] propMoArray=propMoStr.split(",");    String propName=propMoArray[0];    AbstractManagedObjectDefinition mo=moList.get(propMoArray[1]);    if (!propName.startsWith(firstChar)) {      firstChar=propName.substring(0,1);      String letter=firstChar.toUpperCase();      htmlBuff.append(getAnchor(letter)).append(getHeading2(letter));      lettersPointers+=getLink(letter,"#" + letter) + " ";    }    String propLink=getLink(propName,mo.getName() + ".html" + "#"+ propName,MAIN_FRAME);    String moLink=getLink(mo.getUserFriendlyName().toString(),mo.getName() + ".html",MAIN_FRAME,"#666");    paragraph(propLink + "  [ " + moLink+ " ]");  }  String indexBody=htmlBuff.toString();  htmlBuff=new StringBuffer();  htmlHeader(DynamicConstants.PRODUCT_NAME + " Configuration Reference - Properties View");  tabMenu(PROPERTIES_INDEX_FILE);  viewHelp("This view provides a list of all configuration properties, " + "in alphabetical order, and indicates the configuration component to " + "which each property applies.");  newline();  paragraph(lettersPointers);  htmlBuff.append(indexBody);  htmlFooter();  generateFile(PROPERTIES_INDEX_FILE);}  }
class C{  @Override public void install(String contextName,File webapp) throws IOException {  Member[] members=getCluster().getMembers();  if (members.length == 0)   return;  Member localMember=getCluster().getLocalMember();  FileMessageFactory factory=FileMessageFactory.getInstance(webapp,false);  FileMessage msg=new FileMessage(localMember,webapp.getName(),contextName);  if (log.isDebugEnabled())   log.debug(sm.getString("farmWarDeployer.sendStart",contextName,webapp));  msg=factory.readMessage(msg);  while (msg != null) {    for (int i=0; i < members.length; i++) {      if (log.isDebugEnabled())       log.debug(sm.getString("farmWarDeployer.sendFragment",contextName,webapp,members[i]));      getCluster().send(msg,members[i]);    }    msg=factory.readMessage(msg);  }  if (log.isDebugEnabled())   log.debug(sm.getString("farmWarDeployer.sendEnd",contextName,webapp));}  }
class C{  public static AMIdentity createATestGroup(SSOToken adminToken,String groupName,String realm) throws IdRepoException, SSOException {  AMIdentityRepository amir=new AMIdentityRepository(adminToken,realm);  return amir.createIdentity(IdType.GROUP,groupName,Collections.EMPTY_MAP);}  }
class C{  public StatusImpl(){  isMutable=true;}  }
class C{  public static boolean isEquals(Object actual,Object expected){  return actual == expected || (actual == null ? expected == null : actual.equals(expected));}  }
class C{  private void handleInvalidCORS(final HttpServletRequest request,final HttpServletResponse response,final FilterChain filterChain){  String origin=request.getHeader(CorsFilter.REQUEST_HEADER_ORIGIN);  String method=request.getMethod();  String accessControlRequestHeaders=request.getHeader(REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS);  response.setContentType("text/plain");  response.setStatus(HttpServletResponse.SC_FORBIDDEN);  response.resetBuffer();  if (log.isDebugEnabled()) {    StringBuilder message=new StringBuilder("Invalid CORS request; Origin=");    message.append(origin);    message.append(";Method=");    message.append(method);    if (accessControlRequestHeaders != null) {      message.append(";Access-Control-Request-Headers=");      message.append(accessControlRequestHeaders);    }    log.debug(message.toString());  }}  }
class C{  public static void showMessageDialog(Component parentComponent,Object message,String title,int messageType,Icon icon) throws HeadlessException {  showOptionDialog(parentComponent,message,title,DEFAULT_OPTION,messageType,icon,null,null);}  }
class C{  public void recompose(StylesheetRoot root) throws TransformerException {}  }
class C{  public final Node peepOrNull(){  return ((null != m_map) && (m_firstFree > 0)) ? m_map[m_firstFree - 1] : null;}  }
class C{  public static MenuResult<Void> modifyManagedObject(ConsoleApplication app,ManagementContext context,ManagedObject<?> mo,SubCommandHandler handler) throws ClientException {  ManagedObjectDefinition<?,?> d=mo.getManagedObjectDefinition();  LocalizableMessage ufn=d.getUserFriendlyName();  PropertyValueEditor editor=new PropertyValueEditor(app,context);  while (true) {    if (app.isInteractive()) {      SortedSet<PropertyDefinition<?>> properties=new TreeSet<>();      for (      PropertyDefinition<?> pd : d.getAllPropertyDefinitions()) {        if (cannotDisplay(app,pd)) {          continue;        }        properties.add(pd);      }      MenuResult<Void> result=editor.edit(mo,properties,false);      if (result.isSuccess()) {        result=checkReferences(app,context,mo,handler);        if (result.isAgain()) {          continue;        }      }      if (result.isQuit()) {        if (!app.isMenuDrivenMode()) {          app.println();          app.println(INFO_DSCFG_CONFIRM_MODIFY_FAIL.get(ufn));        }        return MenuResult.quit();      } else       if (result.isCancel()) {        return MenuResult.cancel();      }    }    try {      if (mo.isModified()) {        mo.commit();        if (app.isVerbose() || app.isInteractive()) {          app.println();          app.println(INFO_DSCFG_CONFIRM_MODIFY_SUCCESS.get(ufn));        }        for (        PropertyEditorModification<?> mod : editor.getModifications()) {          try {            handler.getCommandBuilder().addArgument(createArgument(mod));          } catch (          ArgumentException ae) {            throw new RuntimeException("Unexpected error generating the command builder: " + ae,ae);          }        }        handler.setCommandBuilderUseful(true);      }      return MenuResult.success();    } catch (    MissingMandatoryPropertiesException e) {      if (app.isInteractive()) {        app.errPrintln();        displayMissingMandatoryPropertyException(app,e);        app.errPrintln();        if (!app.confirmAction(INFO_DSCFG_PROMPT_EDIT_AGAIN.get(ufn),true)) {          return MenuResult.cancel();        }      } else {        throw new ClientException(ReturnCode.CONSTRAINT_VIOLATION,e.getMessageObject(),e);      }    }catch (    AuthorizationException e) {      LocalizableMessage msg=ERR_DSCFG_ERROR_MODIFY_AUTHZ.get(ufn);      throw new ClientException(ReturnCode.INSUFFICIENT_ACCESS_RIGHTS,msg);    }catch (    ConcurrentModificationException e) {      LocalizableMessage msg=ERR_DSCFG_ERROR_MODIFY_CME.get(ufn);      throw new ClientException(ReturnCode.CONSTRAINT_VIOLATION,msg);    }catch (    OperationRejectedException e) {      if (app.isInteractive()) {        app.errPrintln();        displayOperationRejectedException(app,e);        app.errPrintln();        if (!app.confirmAction(INFO_DSCFG_PROMPT_EDIT_AGAIN.get(ufn),true)) {          return MenuResult.cancel();        }      } else {        throw new ClientException(ReturnCode.CONSTRAINT_VIOLATION,e.getMessageObject(),e);      }    }catch (    LdapException e) {      LocalizableMessage msg=ERR_DSCFG_ERROR_MODIFY_CE.get(ufn,e.getMessage());      throw new ClientException(ReturnCode.OTHER,msg);    }catch (    ManagedObjectAlreadyExistsException e) {      throw new IllegalStateException(e);    }  }}  }
class C{  public URIReferenceException(String message,Throwable cause,URIReference uriReference){  this(message,cause);  if (uriReference == null) {    throw new NullPointerException("uriReference cannot be null");  }  this.uriReference=uriReference;}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  protected void fireTreeStructureChanged(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeStructureChanged(e);    }  }}  }
class C{  public void parse(String systemId) throws SAXException, IOException {  parse(new InputSource(systemId));}  }
class C{  @Override public void close(){  try {    flush();  } catch (  AMLogException ale) {    Debug.error(tableName + ":DBHandler:close/flush error: " + ale.getMessage());  }  if (conn != null) {    try {      conn.close();    } catch (    SQLException ce) {      Debug.error(tableName + ":DBHandler: Unable To Close Connection",ce);    }  }  stopBufferTimer();}  }
class C{  private static String rightsString(AciLDAPOperationContainer container,AciHandler handler,boolean skipCheck,String rightStr){  StringBuilder resString=new StringBuilder();  container.resetEffectiveRightsParams();  if (skipCheck && container.isAuthzidAuthorizationDN()) {    resString.append(rightStr).append(":1");    container.setEvaluationResult(EnumEvalReason.SKIP_ACI,null);    container.setEvalSummary(createSummary(container,true));  } else {    boolean ret;    if (container.hasRights(ACI_READ) && container.getCurrentAttributeType() == null) {      ret=handler.accessAllowedEntry(container);    } else {      ret=handler.accessAllowed(container);    }    resString.append(rightStr).append(ret ? ":1" : ":0");  }  return resString.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getNamedItemNS04.class,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementassociatedattribute.class,args);}  }
class C{  public static RequestRateConfiguration create(Map<String,Object> options) throws ConfigurationException {  RequestRateConfiguration conf=new RequestRateConfiguration();  Yaml yaml=new Yaml();  String str=yaml.dumpAsMap(options);  conf.values=yaml.loadAs(str,RequestRateConfiguration.Values.class);  return conf;}  }
class C{  public void write(Writer out,Document doc,int pos,int len) throws IOException, BadLocationException {  throw new IOException("RTF is an 8-bit format");}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SignatureType createSignatureType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignatureTypeImpl();}  }
class C{  public static void checkContentLength(HttpServletRequest servletRequest) throws L10NMessageImpl {  int length=servletRequest.getContentLength();  if (length > maxContentLength) {    Object[] args={new Integer(length),new Integer(maxContentLength)};    throw new L10NMessageImpl(bundleName,"contentLengthTooLarge",args);  } else {    return;  }}  }
class C{  public static void main(String[] args){  OpenSSOConfigurator configurator=InjectorHolder.getInstance(OpenSSOConfigurator.class);  configurator.execute(args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(removeNamedItemNS01.class,args);}  }
class C{  public static ConnectionFactory newFailoverConnectionFactory(Set<LDAPURL> servers,String username,char[] password,int heartBeatInterval,String heartBeatTimeUnit,Options ldapOptions){  List<ConnectionFactory> factories=new ArrayList<ConnectionFactory>(servers.size());  for (  LDAPURL ldapurl : servers) {    factories.add(newConnectionFactory(ldapurl,username,password,heartBeatInterval,heartBeatTimeUnit,ldapOptions));  }  return loadBalanceFactories(factories);}  }
class C{  public LastCookieVirtualProvider(ReplicationServer replicationServer){  this.replicationServer=replicationServer;}  }
class C{  public TabSet(TabStop[] tabs){  if (tabs != null) {    int tabCount=tabs.length;    this.tabs=new TabStop[tabCount];    System.arraycopy(tabs,0,this.tabs,0,tabCount);  } else   this.tabs=null;}  }
class C{  @Override public void startActivityFromFragment(final Fragment fragment,final Intent intent,final int requestCode,@Nullable final Bundle options){  super.startActivityFromFragment(fragment,intent,requestCode,options);}  }
class C{  public boolean hasReplayError(){  return hasReplayError;}  }
class C{  public boolean beginContentStaticTextExceptionDisplay(ChildDisplayEvent event){  return true;}  }
class C{  public javax.sip.header.ExtensionHeader createExtensionHeader(String name,String value) throws ParseException {  if (name == null)   throw new NullPointerException("bad name");  gov.nist.javax.sip.header.ExtensionHeaderImpl ext=new gov.nist.javax.sip.header.ExtensionHeaderImpl();  ext.setName(name);  ext.setValue(value);  return ext;}  }
class C{  public static List<VerificationException> verifyCertificates(Certificate[] certs,KeyStore keystore,Collection<CRL> crls,Calendar calendar){  List<VerificationException> result=new ArrayList<>();  for (int k=0; k < certs.length; ++k) {    X509Certificate cert=(X509Certificate)certs[k];    String err=verifyCertificate(cert,crls,calendar);    if (err != null)     result.add(new VerificationException(cert,err));    try {      for (      X509Certificate certStoreX509 : SignUtils.getCertificates(keystore)) {        try {          if (verifyCertificate(certStoreX509,crls,calendar) != null)           continue;          try {            cert.verify(certStoreX509.getPublicKey());            return result;          } catch (          Exception e) {            continue;          }        } catch (        Exception ex) {        }      }    } catch (    Exception e) {    }    int j;    for (j=0; j < certs.length; ++j) {      if (j == k)       continue;      X509Certificate certNext=(X509Certificate)certs[j];      try {        cert.verify(certNext.getPublicKey());        break;      } catch (      Exception e) {      }    }    if (j == certs.length) {      result.add(new VerificationException(cert,"Cannot be verified against the KeyStore or the certificate chain"));    }  }  if (result.size() == 0)   result.add(new VerificationException((Certificate)null,"Invalid state. Possible circular certificate chain"));  return result;}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {}  }
class C{  public void clear(){  modCount++;  for (int i=0; i < size; i++)   elementData[i]=null;  size=0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrinsertbefore5.class,args);}  }
class C{  private void uninstallListeners(){  if (window != null) {    window.removeWindowListener(windowListener);    window.removePropertyChangeListener(propertyChangeListener);  }}  }
class C{  public boolean isNegative(){  return years < 0 || months < 0 || days < 0;}  }
class C{  public static boolean isLECPProfile(HttpServletRequest request){  return FSServiceUtils.isLECPProfile(request);}  }
class C{  @Override public Enumeration<Permission> elements(){  return perms.elements();}  }
class C{  private Response processRequest(Request req,PLLAuditor auditor) throws PolicyEvaluationException {  String content=req.getContent();  if (debug.messageEnabled()) {    debug.message("PolicyRequestHandler.processRequest(): content is " + content);  }  PolicyService psReq=PolicyService.parseXML(content);  if (debug.messageEnabled()) {    debug.message("PolicyRequestHandler.processRequest(): " + "policy service object:" + psReq.toXMLString());  }  PolicyService psRes=processPolicyServiceRequest(psReq,auditor);  if (debug.messageEnabled()) {    debug.message("PolicyRequestHandler.processRequest(): " + "get response from policy framework: \n" + psRes.toXMLString());  }  return new Response(psRes.toXMLString());}  }
class C{  public PlaSegmentInt(PlaLineInt p_start_line,PlaLineInt p_middle_line,PlaLineInt p_end_line){  start=p_start_line;  middle=p_middle_line;  end=p_end_line;  start_point=middle.intersection(start,"should never happen");  end_point=middle.intersection(end,"should never happen");}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public void removeCompressedThumbnail(){  mData.setCompressedThumbnail(null);}  }
class C{  @Override public int process(Callback[] callbacks,int state) throws AuthLoginException {  try {    if (StringUtils.isEmpty(userName)) {      throw new AuthLoginException("amAuth","noUserName",null);    }    final OathDeviceSettings settings=getOathDeviceSettings(id.getName(),id.getRealm());    try {      detectNecessity(id);    } catch (    Exception e) {      throw new AuthLoginException(amAuthOATH,"authFailed",null);    }    int selectedIndex;switch (state) {case LOGIN_OPTIONAL:case LOGIN_NO_DEVICE:case LOGIN_OPT_DEVICE:case LOGIN_SAVED_DEVICE:      if (null == callbacks) {        throw new AuthLoginException(amAuthOATH,"authFailed",null);      }  }switch (state) {case LOGIN_START:    return beginLogin(settings);case LOGIN_OPTIONAL:  selectedIndex=((ConfirmationCallback)callbacks[0]).getSelectedIndex();if (selectedIndex == SKIP_OATH_INDEX) {  realmOathService.setUserSkipOath(id,AuthenticatorOathService.SKIPPABLE);  return ISAuthConstants.LOGIN_SUCCEED;}case LOGIN_NO_DEVICE:selectedIndex=((ConfirmationCallback)callbacks[0]).getSelectedIndex();if (selectedIndex == REGISTER_DEVICE_OPTION_VALUE_INDEX) {newDevice=createBasicDevice();paintRegisterDeviceCallback(id,newDevice);return REGISTER_DEVICE;}case LOGIN_OPT_DEVICE:selectedIndex=((ConfirmationCallback)callbacks[1]).getSelectedIndex();if (selectedIndex == OPT_DEVICE_SKIP_INDEX) {realmOathService.setUserSkipOath(id,AuthenticatorOathService.SKIPPABLE);realmOathService.removeAllUserDevices(id);return ISAuthConstants.LOGIN_SUCCEED;}case LOGIN_SAVED_DEVICE:return doLoginSavedDevice(callbacks,state,settings);case REGISTER_DEVICE:if (isOptional) {replaceHeader(LOGIN_OPT_DEVICE,MODULE_NAME);return LOGIN_OPT_DEVICE;} else {replaceHeader(LOGIN_SAVED_DEVICE,MODULE_NAME);return LOGIN_SAVED_DEVICE;}case RECOVERY_USED:if (isOptional) {realmOathService.setUserSkipOath(id,AuthenticatorOathService.NOT_SKIPPABLE);}return ISAuthConstants.LOGIN_SUCCEED;default :throw new AuthLoginException("amAuth","invalidLoginState",new Object[]{state});}} catch (SSOException|IdRepoException|IOException e) {debug.error("OATH.process() : SSOException",e);throw new AuthLoginException(amAuthOATH,"authFailed",null);}}  }
class C{  private synchronized void removeLock(FileLock lock){  locks.remove(lock);}  }
class C{  public void visitMaxs(int maxStack,int maxLocals){  if (mv != null) {    mv.visitMaxs(maxStack,maxLocals);  }}  }
class C{  public Set copyValuesOnly(Map map){  if (map == null || map.isEmpty()) {    return null;  }  Set attrsWithValues=new HashSet();  Iterator itr=map.keySet().iterator();  if (!byteValues) {    while (itr.hasNext()) {      String name=(String)itr.next();      Set values=(Set)map.get(name);      if ((values == null) || (values.isEmpty())) {        this.put(name,Collections.EMPTY_SET);        attrsWithValues.add(name);      } else {        this.put(name,getSetCopy(values));        attrsWithValues.add(name);      }    }  } else {    while (itr.hasNext()) {      String name=(String)itr.next();      byte[][] values=(byte[][])map.get(name);      this.put(name,values);      attrsWithValues.add(name);    }  }  return attrsWithValues;}  }
class C{  public SignedJwtVerificationPredicate(byte[] secret,String location){  Reject.ifNull(secret);  this.secret=secret;  this.location=location;}  }
class C{  @Override public void close(){  StaticUtils.close(asn1Writer,debugOutputStream);  StaticUtils.close(socket);}  }
class C{  public static boolean isEnclosedBetween(final String input,final String leftEncloser,String rightEncloser){  if (input == null) {    throw new IllegalArgumentException("input can't be null");  }  if (leftEncloser == null) {    throw new IllegalArgumentException("leftEncloser can't be null");  }  if (rightEncloser == null) {    throw new IllegalArgumentException("rightEncloser can't be null");  }  return input.startsWith(leftEncloser) && input.endsWith(rightEncloser);}  }
class C{  public int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler ch,int start,int length) throws org.xml.sax.SAXException {  int stateForNextChunk=SUPPRESS_LEADING_WS;  int stop=start + length;  int startChunk=start >>> m_chunkBits;  int startColumn=start & m_chunkMask;  int stopChunk=stop >>> m_chunkBits;  int stopColumn=stop & m_chunkMask;  for (int i=startChunk; i < stopChunk; ++i) {    if (i == 0 && m_innerFSB != null)     stateForNextChunk=m_innerFSB.sendNormalizedSAXcharacters(ch,startColumn,m_chunkSize - startColumn); else     stateForNextChunk=sendNormalizedSAXcharacters(m_array[i],startColumn,m_chunkSize - startColumn,ch,stateForNextChunk);    startColumn=0;  }  if (stopChunk == 0 && m_innerFSB != null)   stateForNextChunk=m_innerFSB.sendNormalizedSAXcharacters(ch,startColumn,stopColumn - startColumn); else   if (stopColumn > startColumn) {    stateForNextChunk=sendNormalizedSAXcharacters(m_array[stopChunk],startColumn,stopColumn - startColumn,ch,stateForNextChunk | SUPPRESS_TRAILING_WS);  }  return stateForNextChunk;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.RequestEnvelopeType createRequestEnvelopeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestEnvelopeTypeImpl();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node newChild;  Node appendNode;  String childName;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  newChild=doc.createElement("newChild");  appendNode=employeeNode.appendChild(newChild);  childName=appendNode.getNodeName();  assertEquals("nodeAppendChildGetNodeNameAssert1","newChild",childName);}  }
class C{  public Set createDynamicGroups(Map groupsMap) throws AMException, SSOException {  Iterator iter=groupsMap.keySet().iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupName=(String)iter.next();    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + groupName+ ","+ super.entryDN;    Map attributes=(Map)groupsMap.get(groupName);    AMDynamicGroupImpl groupImpl=new AMDynamicGroupImpl(super.token,groupDN);    groupImpl.setAttributes(attributes);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  public void addReferral(Referral referral) throws NameAlreadyExistsException {  addReferral(null,referral);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  @Override public Foo fetchByUuid_C_Last(String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  int count=countByUuid_C(uuid,companyId);  if (count == 0) {    return null;  }  List<Foo> list=findByUuid_C(uuid,companyId,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  static void checkStreamCipher(CryptoCipher cipher) throws IOException {  if (!cipher.getAlgorithm().equals("AES/CTR/NoPadding")) {    throw new IOException("AES/CTR/NoPadding is required");  }}  }
class C{  @Deprecated public void disallow(final PlayerPreLoginEvent.Result result,final String message){  this.result=result == null ? null : Result.valueOf(result.name());  this.message=message;}  }
class C{  public JRadioButton(String text){  this(text,null,false);}  }
class C{  boolean isHiddenInConfigUI(){  return "yes".equalsIgnoreCase(hideConfigUI);}  }
class C{  @Override public void treeExpanded(TreeExpansionEvent event){  if (!automaticallyExpandedNode) {    automaticExpand=false;  }  BasicNode basicNode=(BasicNode)event.getPath().getLastPathComponent();  if (basicNode.isRefreshNeededOnExpansion()) {    basicNode.setRefreshNeededOnExpansion(false);    startRefreshNode(basicNode,null,true);  }}  }
class C{  public boolean markSupported(){  return true;}  }
class C{  private void execScript(JsonValue input) throws ExecutionException, ResourceException {  ScriptEntry script=taskScannerContext.getScriptEntry();  if (script != null) {    String resourceID=taskScannerContext.getObjectID();    Context context=taskScannerContext.getContext();    try {      Script scope=script.getScript(context);      scope.put("input",input.getObject());      scope.put("objectID",retrieveFullID(resourceID,input));      Object returnedValue=scope.eval();      JsonValue _input=retrieveUpdatedObject(resourceID,input);      logger.debug("After script execution: {}",_input);      if (returnedValue == Boolean.TRUE) {        _input=updateValueWithObject(resourceID,_input,taskScannerContext.getCompletedField(),DATE_UTIL.now());        taskScannerContext.getStatistics().taskSucceded();        logger.debug("Updated CompletedField: {}",_input);      } else {        taskScannerContext.getStatistics().taskFailed();      }    } catch (    ScriptException se) {      taskScannerContext.getStatistics().taskFailed();      String msg=taskScannerContext.getScriptName() + " script invoked by " + taskScannerContext.getInvokerName()+ " encountered exception";      logger.debug(msg,se);      throw new ExecutionException(msg,se);    }  }}  }
class C{  public void testDeflateWithoutSettingInput() throws Exception {  deflateInflate(Deflater.FULL_FLUSH);  assertTrue(totalDeflated > 0);  assertEquals(0,totalInflated);}  }
class C{  public boolean isEmpty(){  return true;}  }
class C{  void parseInvalidTag() throws IOException {  while (true) {    skipSpace();switch (ch) {case '>':case -1:      ch=readCh();    return;case '<':  return;default :ch=readCh();}}}  }
class C{  private FilteredIterable(final Iterable<M> iterable,final Predicate<? super M,P> predicate,final P p){  this.iterable=iterable;  this.predicate=predicate;  this.parameter=p;}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  private void filterEntry(AciContainer container,Entry filteredEntry){  for (  AttributeType attrType : getAllAttrs(filteredEntry)) {    if (container.hasAllUserAttributes() && !attrType.isOperational()) {      continue;    }    if (container.hasAllOpAttributes() && attrType.isOperational()) {      continue;    }    container.setCurrentAttributeType(attrType);    if (!accessAllowed(container)) {      filteredEntry.removeAttribute(attrType);    }  }}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,String provider,SecureRandom random) throws NoSuchProviderException, SecurityException, SignatureException, InvalidKeyException {  try {    return generate(key,provider,random);  } catch (  NoSuchProviderException e) {    throw e;  }catch (  SignatureException e) {    throw e;  }catch (  InvalidKeyException e) {    throw e;  }catch (  GeneralSecurityException e) {    throw new SecurityException("exception: " + e);  }}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent data){  onActivityResult(requestCode,resultCode,data,null);}  }
class C{  private static boolean inRange(int policyLow,int policyHigh,int targetLow,int targetHigh){  final int ephemeralLow=EphemeralRange.low;  final int ephemeralHigh=EphemeralRange.high;  if (targetLow == 0) {    if (!inRange(policyLow,policyHigh,ephemeralLow,ephemeralHigh)) {      return false;    }    if (targetHigh == 0) {      return true;    }    targetLow=1;  }  if (policyLow == 0 && policyHigh == 0) {    return targetLow >= ephemeralLow && targetHigh <= ephemeralHigh;  }  if (policyLow != 0) {    return targetLow >= policyLow && targetHigh <= policyHigh;  }  if (policyHigh >= ephemeralLow - 1) {    return targetHigh <= ephemeralHigh;  }  return (targetLow <= policyHigh && targetHigh <= policyHigh) || (targetLow >= ephemeralLow && targetHigh <= ephemeralHigh);}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation());  unchecked(null);}  }
class C{  public boolean isAllowUnlimited(){  return allowUnlimited;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.newattr.com";  String qualifiedName="emp:newAttr";  Document doc;  NodeList elementList;  Node testAddr;  Attr newAttr;  Attr newAddrAttr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);  newAddrAttr=((Element)testAddr).setAttributeNodeNS(newAttr);  assertNull("throw_Null",newAddrAttr);}  }
class C{  public void addChildElementAt(XMLElement child,int index,boolean addAfterNewLine) throws Exception {  failIfDeleted();  boolean addOuterWhitespace=true;  if (getEndToken() == null) {    insertEndToken();    addOuterWhitespace=false;  }  ArrayList childElements=getChildElements();  if (childElements == null) {    childElements=new ArrayList();    addOuterWhitespace=false;  }  if (index == -1) {    index=childElements.size();    addOuterWhitespace=false;  }  BoundedToken addAfterToken=null;  if (index == 0) {    addAfterToken=getStartToken();  } else   if (index <= childElements.size()) {    XMLElement lastChildElement=(XMLElement)childElements.get(index - 1);    if (lastChildElement.getEndToken() != null) {      addAfterToken=lastChildElement.getEndToken();    } else {      addAfterToken=lastChildElement.getStartToken();    }  }  if (addAfterToken != null) {    getDocument().addXMLElementAfterTokenIndex(addAfterToken.getTokenIndex(),child,addAfterNewLine,addOuterWhitespace);  } else {    throw new Exception("Failed to add child element: no such index: " + index + ", element: "+ this);  }  childElements.add(index,child);  setChildElements(childElements);}  }
class C{  public String substring(int start,int end){  char[] buf=new char[end - start];  getChars(start,end,buf,0);  return new String(buf);}  }
class C{  private PlaSegmentFloat calc_door_line_segment(ShapeTile p_door_shape){  ShapeTile first_room_shape=first_room.get_shape();  ShapeTile second_room_shape=second_room.get_shape();  PlaPointInt first_corner=null;  PlaPointInt second_corner=null;  int corner_count=p_door_shape.border_line_count();  for (int index=0; index < corner_count; ++index) {    PlaPointInt curr_corner=p_door_shape.corner(index);    if (!(!first_room_shape.contains_inside(curr_corner) && !second_room_shape.contains_inside(curr_corner)))     continue;    if (first_corner == null) {      first_corner=curr_corner;    } else     if (second_corner == null && !first_corner.equals(curr_corner)) {      second_corner=curr_corner;      break;    }  }  if (first_corner == null || second_corner == null)   return null;  return new PlaSegmentFloat(first_corner.to_float(),second_corner.to_float());}  }
class C{  public static Map<String,MappedClass> fillInTheGaps(Map<String,MappedClass> mappedClasses,MappingMode mode){  for (  String originalName : mappedClasses.keySet()) {    mappedClasses=fillGap(mappedClasses.get(originalName),mappedClasses,mode);  }  return mappedClasses;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.ProtectionTokenElement createProtectionTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.ProtectionTokenElementImpl();}  }
class C{  public Builder withMessageDispatcherConcurrency(int concurrency){  config.setMessageDispatcherConcurrency(concurrency);  return this;}  }
class C{  private BuildVersion(final int major,final int minor,final int point){  this(major,minor,point,"");}  }
class C{  protected boolean isToggleSelectionEvent(MouseEvent event){  return (SwingUtilities.isLeftMouseButton(event) && BasicGraphicsUtils.isMenuShortcutKeyDown(event));}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node entRef;  Node entText;  Node createdNode;  Node replacedChild;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  entText=entRef.getFirstChild();  createdNode=doc.createElement("newChild");{    boolean success=false;    try {      replacedChild=entRef.replaceChild(createdNode,entText);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public Diode(BlockFace facingDirection){  this(facingDirection,DEFAULT_DELAY,DEFAULT_STATE);}  }
class C{  public boolean hasBinaryAttributes(){  return false;}  }
class C{  public boolean displayConfirmation(LocalizableMessage msg,LocalizableMessage title){  return Utilities.displayConfirmation(getFrame(),msg,title);}  }
class C{  public void updateUI(){  setUI((SeparatorUI)UIManager.getUI(this));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getAttributeNS05.class,args);}  }
class C{  CharSequence buildHistory(){  SQLiteOpenHelper helper=new DBHelper(activity);  SQLiteDatabase db=null;  Cursor cursor=null;  try {    db=helper.getWritableDatabase();    cursor=db.query(DBHelper.TABLE_NAME,COLUMNS,null,null,null,null,DBHelper.TIMESTAMP_COL + " DESC");    DateFormat format=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM);    StringBuilder historyText=new StringBuilder(1000);    while (cursor.moveToNext()) {      historyText.append('"').append(massageHistoryField(cursor.getString(0))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(1))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(2))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(3))).append("\",");      long timestamp=cursor.getLong(3);      historyText.append('"').append(massageHistoryField(format.format(new Date(timestamp)))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(4))).append("\"\r\n");    }    return historyText;  }  finally {    close(cursor,db);  }}  }
class C{  @Override public void onDrawFrame(GL10 gl10){  GLES20.glClearColor(1.0f,0.0f,0.0f,1.0f);  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);  GLES20.glEnable(GLES20.GL_DEPTH_TEST);  GLES20.glEnable(GLES20.GL_CULL_FACE);  GLES20.glEnable(GLES20.GL_BLEND);  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);  long currentTimeMillis=System.currentTimeMillis();  updateWithDelta(currentTimeMillis - lastTimeMillis);  lastTimeMillis=currentTimeMillis;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("(");  sb.append("timestamp: " + timestamp);  List<? extends Certificate> certs=signerCertPath.getCertificates();  if (!certs.isEmpty()) {    sb.append("TSA: " + certs.get(0));  } else {    sb.append("TSA: <empty>");  }  sb.append(")");  return sb.toString();}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  String tempPrefix="";  if (includeNS) {    if (prefix == null) {      prefix=DSTConstants.DEFAULT_NS_PREFIX;    }    tempPrefix=prefix + ":";  }  if (declareNS) {    if (nameSpaceURI == null) {      DSTUtils.debug.error("DSTModifyResponse.toString: NameSpace is" + " not defined");      return "";    }  }  StringBuffer sb=new StringBuffer(300);  sb.append("<").append(tempPrefix).append("ModifyResponse");  if (id != null && id.length() != 0) {    sb.append(" id=\"").append(id).append("\"");  }  if (itemIDRef != null && itemIDRef.length() != 0) {    sb.append(" itemIDRef=\"").append(itemIDRef).append("\"");  }  if (timeStamp != null) {    sb.append(" timeStamp=\"").append(DateUtils.toUTCDateFormat(timeStamp)).append("\"");  }  if (declareNS) {    sb.append(" xmlns:").append(prefix).append("=\"").append(nameSpaceURI).append("\"").append(" xmlns=\"").append(nameSpaceURI).append("\"");  }  sb.append(">").append(status.toString()).append("</").append(tempPrefix).append("ModifyResponse").append(">");  return sb.toString();}  }
class C{  public int previousNode(){  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_ITERATE,null));  if ((m_next - 1) > 0) {    m_next--;    return this.elementAt(m_next);  } else   return DTM.NULL;}  }
class C{  @Override public void delete(SSOToken token,IdType type,String name) throws IdRepoException {  if (DEBUG.messageEnabled()) {    DEBUG.message("delete invoked");  }  String dn=getDN(type,name);  Connection conn=null;  try {    conn=createConnection();    conn.delete(LDAPRequests.newDeleteRequest(dn));  } catch (  LdapException ere) {    DEBUG.error("Unable to delete entry: " + dn,ere);    handleErrorResult(ere);  } finally {    IOUtils.closeIfNotNull(conn);  }  if (dnCacheEnabled) {    dnCache.remove(generateDNCacheKey(name,type));  }}  }
class C{  public static <V>boolean addListNotNullValue(List<V> sourceList,V value){  return (sourceList != null && value != null) ? sourceList.add(value) : false;}  }
class C{  public void createWindowSurface(Object surface){  if (mEGLSurface != EGL14.EGL_NO_SURFACE) {    throw new IllegalStateException("surface already created");  }  mEGLSurface=mEglCore.createWindowSurface(surface);}  }
class C{  String isDITLoaded(boolean ssl){  String baseDN="ou=services," + suffix;  String filter="(|(ou=DAI)(ou=sunIdentityRepositoryService))";  try (Connection conn=getLDAPConnection(ssl)){    ConnectionEntryReader results=conn.search(LDAPRequests.newSearchRequest(baseDN,SearchScope.WHOLE_SUBTREE,filter,"dn"));    return Boolean.toString(results.hasNext());  } catch (  LdapException e) {    if (Debug.getInstance(SetupConstants.DEBUG_NAME).messageEnabled()) {      Debug.getInstance(SetupConstants.DEBUG_NAME).message("AMSetupDSConfig.isDITLoaded: LDAP Operation return code: " + e.getResult().getResultCode());    }    return "false";  }}  }
class C{  public Node appendChild(Node newChild) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public ServerSideSortResponseControl(int resultCode,String attributeType){  this(false,resultCode,attributeType);}  }
class C{  public final void destroy(){  stopIdleThreads();  try {    Thread.sleep(500);  } catch (  InterruptedException e) {  }synchronized (allThreadList) {    int numThreads=allThreadList.length;    int i=0;    while (i < numThreads) {      IPSThread ipsThread=allThreadList[i];      allThreadList[i++]=null;      if (ipsThread.isAlive()) {        ipsThread.stop();      }    }  }}  }
class C{  public boolean hasSdcard(){  String state=Environment.getExternalStorageState();  if (state.equals(Environment.MEDIA_MOUNTED)) {    return true;  } else {    return false;  }}  }
class C{  public final boolean isFinished(){  return mFinished;}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(MAC_MATERIAL,keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  private void sendLogEntry(String logEntry){  Message.obtain(mHandler,MSG_NEW_LOG_ENTRY,logEntry).sendToTarget();}  }
class C{  public static boolean isAscii(String s){  if (s == null) {    return true;  }  try {    if (!s.equals(new String(s.getBytes(ASCII_CHARSET),ASCII_CHARSET))) {      return false;    }  } catch (  java.io.UnsupportedEncodingException uee) {    return false;  }  return true;}  }
class C{  public Matrix multiply(Matrix by){  Matrix rslt=new Matrix();  float[] a=vals;  float[] b=by.vals;  float[] c=rslt.vals;  c[I11]=a[I11] * b[I11] + a[I12] * b[I21] + a[I13] * b[I31];  c[I12]=a[I11] * b[I12] + a[I12] * b[I22] + a[I13] * b[I32];  c[I13]=a[I11] * b[I13] + a[I12] * b[I23] + a[I13] * b[I33];  c[I21]=a[I21] * b[I11] + a[I22] * b[I21] + a[I23] * b[I31];  c[I22]=a[I21] * b[I12] + a[I22] * b[I22] + a[I23] * b[I32];  c[I23]=a[I21] * b[I13] + a[I22] * b[I23] + a[I23] * b[I33];  c[I31]=a[I31] * b[I11] + a[I32] * b[I21] + a[I33] * b[I31];  c[I32]=a[I31] * b[I12] + a[I32] * b[I22] + a[I33] * b[I32];  c[I33]=a[I31] * b[I13] + a[I32] * b[I23] + a[I33] * b[I33];  return rslt;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  NodeList genList;  Node gen;  NodeList gList;  Node g;  NamedNodeMap attrList;  Attr attrNode;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  assertNotNull("genderNotNull",gender);  genList=gender.getChildNodes();  gen=genList.item(0);  assertNotNull("genderFirstChildNotNull",gen);  gList=gen.getChildNodes();  g=gList.item(0);  assertNotNull("genderFirstGrandchildNotNull",g);  attrList=g.getAttributes();  assertNotNull("attributesNotNull",attrList);  attrNode=(Attr)attrList.getNamedItem("domestic");  assertNotNull("attrNotNull",attrNode);{    boolean success=false;    try {      attrNode.setValue("newvalue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("setValue_throws_NO_MODIFICATION",success);  }{    boolean success=false;    try {      attrNode.setNodeValue("newvalue2");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("setNodeValue_throws_NO_MODIFICATION",success);  }}  }
class C{  static void writeStringToFile(final String string,final File file) throws IOException {  createFile(file);  try (PrintWriter printWriter=new PrintWriter(file)){    printWriter.print(string);  } }  }
class C{  @Get public Representation authorize() throws OAuth2RestletException {  final OAuth2Request request=requestFactory.create(getRequest());  for (  AuthorizeRequestHook hook : hooks) {    hook.beforeAuthorizeHandling(request,getRequest(),getResponse());  }  try {    final AuthorizationToken authorizationToken=authorizationService.authorize(request);    final String redirectUri=redirectUriResolver.resolve(request);    Representation response=representation.toRepresentation(getContext(),getRequest(),getResponse(),authorizationToken,redirectUri);    for (    AuthorizeRequestHook hook : hooks) {      hook.afterAuthorizeSuccess(request,getRequest(),getResponse());    }    return response;  } catch (  IllegalArgumentException e) {    if (e.getMessage().contains("client_id")) {      throw new OAuth2RestletException(400,"invalid_request",e.getMessage(),request.<String>getParameter("state"));    }    throw new OAuth2RestletException(400,"invalid_request",e.getMessage(),request.<String>getParameter("redirect_uri"),request.<String>getParameter("state"));  }catch (  ResourceOwnerAuthenticationRequired e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),e.getRedirectUri().toString(),null);  }catch (  ResourceOwnerConsentRequired e) {    return representation.getRepresentation(getContext(),request,"authorize.ftl",getDataModel(e,request));  }catch (  InvalidClientException e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("state"));  }catch (  RedirectUriMismatchException e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("state"));  }catch (  DuplicateRequestParameterException e) {    throw new OAuth2RestletException(400,"invalid_request",e.getMessage(),request.<String>getParameter("state"));  }catch (  OAuth2ProviderNotFoundException e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("state"));  }catch (  OAuth2Exception e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter("redirect_uri"),request.<String>getParameter("state"),e.getParameterLocation());  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String qualifiedName="gov:faculty";  Document doc;  Element newElement;  String elementName;  doc=(Document)load("staffNS",false);  newElement=doc.createElementNS(namespaceURI,qualifiedName);  elementName=newElement.getTagName();  assertEquals("throw_Equals",qualifiedName,elementName);}  }
class C{  public DataFormatException(){  super();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  TransformerImpl transformer=(TransformerImpl)xctxt.getOwnerObject();  XNodeSet nodes=null;  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  int docContext=dtm.getDocumentRoot(context);  if (DTM.NULL == docContext) {  }  String xkeyname=getArg0().execute(xctxt).str();  QName keyname=new QName(xkeyname,xctxt.getNamespaceContext());  XObject arg=getArg1().execute(xctxt);  boolean argIsNodeSetDTM=(XObject.CLASS_NODESET == arg.getType());  KeyManager kmgr=transformer.getKeyManager();  if (argIsNodeSetDTM) {    XNodeSet ns=(XNodeSet)arg;    ns.setShouldCacheNodes(true);    int len=ns.getLength();    if (len <= 1)     argIsNodeSetDTM=false;  }  if (argIsNodeSetDTM) {    Hashtable usedrefs=null;    DTMIterator ni=arg.iter();    int pos;    UnionPathIterator upi=new UnionPathIterator();    upi.exprSetParent(this);    while (DTM.NULL != (pos=ni.nextNode())) {      dtm=xctxt.getDTM(pos);      XMLString ref=dtm.getStringValue(pos);      if (null == ref)       continue;      if (null == usedrefs)       usedrefs=new Hashtable();      if (usedrefs.get(ref) != null) {        continue;      } else {        usedrefs.put(ref,ISTRUE);      }      XNodeSet nl=kmgr.getNodeSetDTMByKey(xctxt,docContext,keyname,ref,xctxt.getNamespaceContext());      nl.setRoot(xctxt.getCurrentNode(),xctxt);      upi.addIterator(nl);    }    int current=xctxt.getCurrentNode();    upi.setRoot(current,xctxt);    nodes=new XNodeSet(upi);  } else {    XMLString ref=arg.xstr();    nodes=kmgr.getNodeSetDTMByKey(xctxt,docContext,keyname,ref,xctxt.getNamespaceContext());    nodes.setRoot(xctxt.getCurrentNode(),xctxt);  }  return nodes;}  }
class C{  public ResourceMatch isResourceMatch(String serviceName,String resourceName){  ResourceMatch rm=null;  if (!serviceName.equalsIgnoreCase(serviceTypeName)) {    rm=ResourceMatch.NO_MATCH;  } else {    String res=getResourceNames().iterator().next();    rm=serviceType.compare(resourceName,res);  }  return rm;}  }
class C{  @Override public boolean isRespectWidth(){  return true;}  }
class C{  @DataProvider(name="createDNEqualityData") public Object[][] createDNEqualityData(){  return new Object[][]{{"cn=hello world,dc=com","cn=hello world,dc=com",0},{"cn=hello world,dc=com","CN=hello world,dc=com",0},{"cn=hello   world,dc=com","cn=hello world,dc=com",0},{"  cn =  hello world  ,dc=com","cn=hello world,dc=com",0},{"cn=hello world\\ ,dc=com","cn=hello world,dc=com",0},{"cn=HELLO WORLD,dc=com","cn=hello world,dc=com",0},{"cn=HELLO+sn=WORLD,dc=com","sn=world+cn=hello,dc=com",0},{"governingStructureRule=10,dc=com","governingStructureRule=9,dc=com",1},{"governingStructureRule=999,dc=com","governingStructureRule=1000,dc=com",-1},{"governingStructureRule=-1,dc=com","governingStructureRule=0,dc=com",-1},{"governingStructureRule=0,dc=com","governingStructureRule=-1,dc=com",1},{"cn=aaa,dc=com","cn=aaaa,dc=com",-1},{"cn=AAA,dc=com","cn=aaaa,dc=com",-1},{"cn=aaa,dc=com","cn=AAAA,dc=com",-1},{"cn=aaaa,dc=com","cn=aaa,dc=com",1},{"cn=AAAA,dc=com","cn=aaa,dc=com",1},{"cn=aaaa,dc=com","cn=AAA,dc=com",1},{"cn=aaab,dc=com","cn=aaaa,dc=com",1},{"cn=aaaa,dc=com","cn=aaab,dc=com",-1},{"dc=aaa,dc=aaa","dc=bbb",-1},{"dc=bbb,dc=aaa","dc=bbb",-1},{"dc=ccc,dc=aaa","dc=bbb",-1},{"dc=aaa,dc=bbb","dc=bbb",1},{"dc=bbb,dc=bbb","dc=bbb",1},{"dc=ccc,dc=bbb","dc=bbb",1},{"dc=aaa,dc=ccc","dc=bbb",1},{"dc=bbb,dc=ccc","dc=bbb",1},{"dc=ccc,dc=ccc","dc=bbb",1},{"","dc=bbb",-1},{"dc=bbb","",1}};}  }
class C{  private Future<Job> reattempt(){  if (this.backoff != null) {    long delay=this.getBackoffImpl().apply(attempts);    return this.setDelay(delay).setPromote_at(System.currentTimeMillis() + delay).update().compose(null);  } else {    return this.inactive();  }}  }
class C{  private DiagnosticsAgent(){}  }
class C{  private T[] ensureCapacity(int minCapacity){  if (tmp.length < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) T[] newArray=(T[])new Object[newSize];    tmp=newArray;  }  return tmp;}  }
class C{  private static boolean isTokenChar(char c){  return ((c > 040) && (c < 0177)) && (TSPECIALS.indexOf(c) < 0);}  }
class C{  @Before public void beforeTestMethodAction(){}  }
class C{  protected void propertyChange(PropertyChangeEvent evt){  super.propertyChange(evt);}  }
class C{  public synchronized long skip(long n){  long k=count - pos;  if (n < k) {    k=n < 0 ? 0 : n;  }  pos+=k;  return k;}  }
class C{  public void paintArrowButtonForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int direction){}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public TransactionAlreadyExistsException(){  super();}  }
class C{  final void sync(){  if (font == null) {    setPropertiesFromAttributes();  }}  }
class C{  public static boolean isServerMode(){  return IsServerModeHolder.isServerMode;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public PlaPoint end_point(){  return end_point;}  }
class C{  static MemberName generateNamedFunctionInvoker(MethodTypeForm typeForm){  MethodType invokerType=NamedFunction.INVOKER_METHOD_TYPE;  String invokerName="invoke_" + shortenSignature(basicTypeSignature(typeForm.erasedType()));  InvokerBytecodeGenerator g=new InvokerBytecodeGenerator("NFI",invokerName,invokerType);  return g.loadMethod(g.generateNamedFunctionInvokerImpl(typeForm));}  }
class C{  public void removeFromParent(){  MutableTreeNode parent=(MutableTreeNode)getParent();  if (parent != null) {    parent.remove(this);  }}  }
class C{  public void testCase16(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  int aSign=-1;  int bSign=-1;  byte rBytes[]={1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  protected void fireColumnRemoved(TableColumnModelEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TableColumnModelListener.class) {      ((TableColumnModelListener)listeners[i + 1]).columnRemoved(e);    }  }}  }
class C{  public void insertElementAt(int value,int at){  if (null == m_map) {    m_map=new int[m_blocksize];    m_mapSize=m_blocksize;  } else   if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  if (at <= (m_firstFree - 1)) {    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);  }  m_map[at]=value;  m_firstFree++;}  }
class C{  public boolean containsKey(Object key){  Object[] k;  try {    k=(Object[])key;  } catch (  ClassCastException e) {    return false;  }  return this.containsKey(k);}  }
class C{  public static long overlayInode(final long socketIdentifier,final long inode){  return inode << 48 | socketIdentifier;}  }
class C{  public SignatureVisitor visitParameterType(){  return this;}  }
class C{  public PrefixResolverDefault(Node xpathExpressionContext){  m_context=xpathExpressionContext;}  }
class C{  public String toString(){  return this.encode();}  }
class C{  private static final <T>boolean removeMap(MapElement<T>[] oldMap,MapElement<T>[] newMap,String name){  int pos=find(oldMap,name);  if ((pos != -1) && (name.equals(oldMap[pos].name))) {    System.arraycopy(oldMap,0,newMap,0,pos);    System.arraycopy(oldMap,pos + 1,newMap,pos,oldMap.length - pos - 1);    return true;  }  return false;}  }
class C{  public static void assertSame(int expected,int actual){  if (expected != actual) {    throw new RuntimeException("EXPECTED: " + expected + "; ACTUAL: "+ actual);  }}  }
class C{  @Indexable(type=IndexableType.DELETE) @Override public Foo deleteFoo(long fooId) throws PortalException {  return fooPersistence.remove(fooId);}  }
class C{  public static RawHeaders fromNameValueBlock(List<String> nameValueBlock) throws IOException {  if (nameValueBlock.size() % 2 != 0) {    throw new IllegalArgumentException("Unexpected name value block: " + nameValueBlock);  }  String status=null;  String version=null;  RawHeaders result=new RawHeaders();  for (int i=0; i < nameValueBlock.size(); i+=2) {    String name=nameValueBlock.get(i);    String values=nameValueBlock.get(i + 1);    for (int start=0; start < values.length(); ) {      int end=values.indexOf('\0',start);      if (end == -1) {        end=values.length();      }      String value=values.substring(start,end);      if (":status".equals(name)) {        status=value;      } else       if (":version".equals(name)) {        version=value;      } else {        result.namesAndValues.add(name);        result.namesAndValues.add(value);      }      start=end + 1;    }  }  if (status == null)   throw new ProtocolException("Expected ':status' header not present");  if (version == null)   throw new ProtocolException("Expected ':version' header not present");  result.setStatusLine(version + " " + status);  return result;}  }
class C{  private void enableExternalChangeLog() throws ConfigException {  if (DirectoryServer.hasBackend(ChangelogBackend.BACKEND_ID)) {    return;  }  try {    changelogBackend=new ChangelogBackend(this,domainPredicate);    changelogBackend.openBackend();    try {      DirectoryServer.registerBackend(changelogBackend);    } catch (    Exception e) {      logger.error(WARN_CONFIG_BACKEND_CANNOT_REGISTER_BACKEND.get(changelogBackend.getBackendID(),getExceptionMessage(e)));    }    registerVirtualAttributeRules();  } catch (  Exception e) {    throw new ConfigException(LocalizableMessage.raw("Error when enabling external changelog"),e);  }}  }
class C{  public boolean startPrefixMapping(String prefix,String uri,boolean shouldFlush) throws org.xml.sax.SAXException {  boolean pushed;  int pushDepth;  if (shouldFlush) {    flushPending();    pushDepth=m_elemContext.m_currentElemDepth + 1;  } else {    pushDepth=m_elemContext.m_currentElemDepth;  }  pushed=m_prefixMap.pushNamespace(prefix,uri,pushDepth);  if (pushed) {    String name;    if (EMPTYSTRING.equals(prefix)) {      name="xmlns";      addAttributeAlways(XMLNS_URI,name,name,"CDATA",uri,false);    } else {      if (!EMPTYSTRING.equals(uri)) {        name="xmlns:" + prefix;        addAttributeAlways(XMLNS_URI,prefix,name,"CDATA",uri,false);      }    }  }  return pushed;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.ProxySubjectElement createProxySubjectElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.ProxySubjectElementImpl();}  }
class C{  @Override public void collide(){  wasHit=true;}  }
class C{  public boolean isDomainPattern(){  return _domain_pattern;}  }
class C{  public void write(String str){  buf.append(str);}  }
class C{  public Object clone(){  QualifiedCollection theClone=null;  try {    theClone=(QualifiedCollection)super.clone();  } catch (  CloneNotSupportedException ingnored) {  }  if (theClone != null) {    theClone.setCollection(getCollection());    theClone.setExclusive(isExclusive());  }  return theClone;}  }
class C{  public ProviderException(String s){  super(s);}  }
class C{  public String toPattern(){  StringBuffer result=new StringBuffer();  for (int i=0; i < choiceLimits.length; ++i) {    if (i != 0) {      result.append('|');    }    double less=previousDouble(choiceLimits[i]);    double tryLessOrEqual=Math.abs(Math.IEEEremainder(choiceLimits[i],1.0d));    double tryLess=Math.abs(Math.IEEEremainder(less,1.0d));    if (tryLessOrEqual < tryLess) {      result.append("" + choiceLimits[i]);      result.append('#');    } else {      if (choiceLimits[i] == Double.POSITIVE_INFINITY) {        result.append("\u221E");      } else       if (choiceLimits[i] == Double.NEGATIVE_INFINITY) {        result.append("-\u221E");      } else {        result.append("" + less);      }      result.append('<');    }    String text=choiceFormats[i];    boolean needQuote=text.indexOf('<') >= 0 || text.indexOf('#') >= 0 || text.indexOf('\u2264') >= 0 || text.indexOf('|') >= 0;    if (needQuote)     result.append('\'');    if (text.indexOf('\'') < 0)     result.append(text); else {      for (int j=0; j < text.length(); ++j) {        char c=text.charAt(j);        result.append(c);        if (c == '\'')         result.append(c);      }    }    if (needQuote)     result.append('\'');  }  return result.toString();}  }
class C{  @Descriptor("Hash the input string.") public void secureHash(CommandSession session,@Parameter(names={"-j","--json"},presentValue="false",absentValue="true") boolean isString,@Parameter(names={"-a","--algorithm"},absentValue="SHA-256") String algorithm){  session.getConsole().append("Enter the ").append(isString ? "String" : "Json").println(" value");  secureHash(session,isString,algorithm,loadFromConsole(session));}  }
class C{  private Object writeReplace(){  return new SerializationProxy(this);}  }
class C{  private void encodeSize(ByteBuffer headerBuffer,int size){  headerBuffer.put((byte)((size & 0x00FF0000) >> 16));  headerBuffer.put((byte)((size & 0x0000FF00) >> 8));  headerBuffer.put((byte)(size & 0x000000FF));  logger.fine("Frame Size Is Actual:" + size + ":Encoded bin:"+ Integer.toBinaryString(size)+ ":Encoded Hex"+ Integer.toHexString(size));}  }
class C{  public StringDateTime(String identifier,AbstractTagFrameBody frameBody){  super(identifier,frameBody);}  }
class C{  public static JavacErrorDetail[] parseJavacErrors(String errMsg,String fname,Node.Nodes page) throws JasperException, IOException {  return parseJavacMessage(errMsg,fname,page);}  }
class C{  private String readQuotedId(boolean returnText) throws IOException, XmlPullParserException {  int quote=peekCharacter();  char[] delimiter;  if (quote == '"') {    delimiter=DOUBLE_QUOTE;  } else   if (quote == '\'') {    delimiter=SINGLE_QUOTE;  } else {    throw new XmlPullParserException("Expected a quoted string",this,null);  }  position++;  return readUntil(delimiter,returnText);}  }
class C{  public int length(){  return namesAndValues.size() / 2;}  }
class C{  public ShowHideOnScroll(View view,int animShow,int animHide){  super(view.getContext());  mView=view;  mShow=animShow;  mHide=animHide;}  }
class C{  public String versionCompact(){  return properties.getProperty("version.compact");}  }
class C{  public AbstractFelixCommandsService(Object service){  this.service=service;}  }
class C{  protected Rectangle applyBorderBox(Rectangle rect,boolean reverse){  Border[] borders=getBorders();  return applyBorderBox(rect,borders,reverse);}  }
class C{  public synchronized void start(){  if (isRunning == true)   return;  isRunning=true;  if (operationHandlerThread == null) {    operationHandlerThread=new HandlerThread(name,priority);  }  operationHandlerThread.start();  operationHandlerThreadHandler=new Handler(operationHandlerThread.getLooper());  for (  AndroidOperation op : operationQueue) {    op.queueing(operationHandlerThreadHandler);  }  operationQueue.clear();}  }
class C{  public static Map toMap(Object[] keys,Object[] values){  Map map=new HashMap<>();  int i=0;  for (  Object key : keys) {    map.put(key,values[i++]);  }  return map;}  }
class C{  private <T extends EntryCacheCfg>EntryCache<T> loadEntryCache(String className,T configuration,boolean initialize) throws InitializationException {  EntryCache<T> entryCache=null;  if (!cacheOrderMap.isEmpty()) {    entryCache=cacheOrderMap.get(configuration.getCacheLevel());  }  try {    EntryCacheCfgDefn definition=EntryCacheCfgDefn.getInstance();    ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    @SuppressWarnings("unchecked") Class<? extends EntryCache<T>> cacheClass=(Class<? extends EntryCache<T>>)propertyDefinition.loadClass(className,EntryCache.class);    EntryCache<T> cache;    if (initialize || entryCache == null) {      cache=cacheClass.newInstance();    } else {      cache=entryCache;    }    if (initialize) {      cache.initializeEntryCache(configuration);    } else     if (!configuration.isEnabled()) {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!cache.isConfigurationAcceptable(configuration,unacceptableReasons)) {        String buffer=Utils.joinAsString(".  ",unacceptableReasons);        throw new InitializationException(ERR_CONFIG_ENTRYCACHE_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),buffer));      }    }    return cache;  } catch (  Exception e) {    logger.traceException(e);    if (!initialize) {      if (e instanceof InitializationException) {        throw (InitializationException)e;      } else {        LocalizableMessage message=ERR_CONFIG_ENTRYCACHE_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),e.getCause() != null ? e.getCause().getMessage() : stackTraceToSingleLineString(e));        throw new InitializationException(message);      }    }    LocalizableMessage message=ERR_CONFIG_ENTRYCACHE_CANNOT_INITIALIZE_CACHE.get(className,e.getCause() != null ? e.getCause().getMessage() : stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  static boolean copyTo(ByteBuffer inBuffer,CharBuffer outBuffer,CharsetDecoder decoder){  final CoderResult result=decoder.decode(inBuffer,outBuffer,true);  decoder.flush(outBuffer);  return !result.isError() && !result.isOverflow();}  }
class C{  public boolean isRecursive(){  return recursive;}  }
class C{  public boolean isPollingEnabled(){  if (!SystemProperties.isServerMode()) {    pollingEnabled=SystemProperties.getAsBoolean(ENABLE_POLLING_PROPERTY,false);  }  if (debug.messageEnabled()) {    debug.message("Session.isPollingEnabled is " + pollingEnabled);  }  if (!pollerPoolInitialized) {    initPollerPool();  }  return pollingEnabled;}  }
class C{  public static boolean isCurrentUserInRole(String authority){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    if (authentication.getPrincipal() instanceof UserDetails) {      UserDetails springSecurityUser=(UserDetails)authentication.getPrincipal();      return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(authority));    }  }  return false;}  }
class C{  public void writeDeleteResult(final int messageID,final Result result) throws IOException {  logger.trace("ENCODE LDAP DELETE RESULT(messageID=%d, result=%s)",messageID,result);  writeMessageHeader(messageID);{    writeResultHeader(LDAP.OP_TYPE_DELETE_RESPONSE,result);    writeResultFooter(writer);  }  writeMessageFooter(result.getControls());}  }
class C{  protected ClusterStateService(ForeignSessionHandler foreignSessionHandler,String localServerId,int timeout,long period,Map<String,String> serverMembers,Map<String,String> siteMembers) throws Exception {  if ((localServerId == null) || (localServerId.isEmpty())) {    String message="ClusterStateService: Local Server Id argument is null, unable to instantiate Cluster State Service!";    sessionDebug.error(message);    throw new IllegalArgumentException(message);  }synchronized (this) {    this.foreignSessionHandler=foreignSessionHandler;    this.localServerId=localServerId;    this.timeout=timeout;    this.period=period;    serverSelectionList=new StateInfo[serverMembers.size() + siteMembers.size()];    for (    Map.Entry<String,String> entry : serverMembers.entrySet()) {      populateMap(servers,getServerInfo(entry.getKey(),entry.getValue()));    }    for (    Map.Entry<String,String> entry : siteMembers.entrySet()) {      populateMap(sites,getServerInfo(entry.getKey(),entry.getValue()));    }    Arrays.sort(serverSelectionList);    SystemTimer.getTimer().schedule(this,new Date((currentTimeMillis() / 1000) * 1000));  }}  }
class C{  public static void removeConstraint(Constraint constraint){  TestChildCfgDefn.getInstance().deregisterConstraint(constraint);}  }
class C{  public void addViewItem(ViewItem item,DataType initData) throws IllegalStateException {  int key=item.getID();  if (items.containsKey(key)) {    throw new IllegalStateException("ViewItem with ID = " + key + " already exists!");  } else {    items.put(key,item);    layout.addView(item.buildUI(initData));  }}  }
class C{  public static UUID nameUUIDFromBytes(byte[] name){  if (name == null) {    throw new NullPointerException("name == null");  }  try {    MessageDigest md=MessageDigest.getInstance("MD5");    return makeUuid(md.digest(name),3);  } catch (  NoSuchAlgorithmException e) {    throw new AssertionError(e);  }}  }
class C{  private void addPWPolicyControl(PasswordPolicyErrorType errorType){  for (  Control c : getRequestControls()) {    if (OID_PASSWORD_POLICY_CONTROL.equals(c.getOID())) {      addResponseControl(new PasswordPolicyResponseControl(null,0,errorType));    }  }}  }
class C{  public void readGeneralizedTime() throws IOException {  if (tag == ASN1Constants.TAG_GENERALIZEDTIME) {    readContent();    if (buffer[offset - 1] != 'Z') {      throw new ASN1Exception("ASN.1 GeneralizedTime: encoded format is not implemented");    }    if (length != 15 && (length < 17 || length > 19)) {      throw new ASN1Exception("ASN.1 GeneralizedTime wrongly encoded at [" + contentOffset + "]");    }    if (length > 16) {      byte char14=buffer[contentOffset + 14];      if (char14 != '.' && char14 != ',') {        throw new ASN1Exception("ASN.1 GeneralizedTime wrongly encoded at [" + contentOffset + "]");      }    }    if (times == null) {      times=new int[7];    }    times[0]=strToInt(contentOffset,4);    times[1]=strToInt(contentOffset + 4,2);    times[2]=strToInt(contentOffset + 6,2);    times[3]=strToInt(contentOffset + 8,2);    times[4]=strToInt(contentOffset + 10,2);    times[5]=strToInt(contentOffset + 12,2);    if (length > 16) {      times[6]=strToInt(contentOffset + 15,length - 16);      if (length == 17) {        times[6]=times[6] * 100;      } else       if (length == 18) {        times[6]=times[6] * 10;      }    }  } else   if (tag == ASN1Constants.TAG_C_GENERALIZEDTIME) {    throw new ASN1Exception("Decoding constructed ASN.1 GeneralizedTime type is not supported");  } else {    throw expected("GeneralizedTime");  }}  }
class C{  @Inject public OpenAMSettingsImpl(@Assisted("serviceName") String serviceName,@Assisted("serviceVersion") String serviceVersion){  this.serviceName=serviceName;  this.serviceVersion=serviceVersion;}  }
class C{  public void addErrors(final Element errorsNode){  for (  ErrorNode item : this.errorList) {    Element childElem=this.getDocument().createElement("Error");    childElem.setAttribute("code",String.valueOf(item.errorCode));    childElem.setAttribute("name",item.name);    childElem.setAttribute("type",item.type);    childElem.setAttribute("folder",item.folder);    errorsNode.appendChild(childElem);  }}  }
class C{  private void cleanDB() throws FileNotFoundException, IOException, Exception {  TestCaseUtils.initializeTestBackend(false);  Entry topEntry=TestCaseUtils.makeEntry("dn:" + TEST_ROOT_DN_STRING,"objectClass: top","objectClass: organization","o: test","entryuuid: " + stringUID(1));  MemoryBackend memoryBackend=(MemoryBackend)DirectoryServer.getBackend(TEST_BACKEND_ID);  memoryBackend.addEntry(topEntry,null);}  }
class C{  public boolean useSecureConnection(){  return connectionType == LDAPS;}  }
class C{  private static String encode(String s,String enc) throws UnsupportedEncodingException {  boolean needToChange=false;  boolean wroteUnencodedChar=false;  int maxBytesPerChar=10;  StringBuffer out=new StringBuffer(s.length());  ByteArrayOutputStream buf=new ByteArrayOutputStream(maxBytesPerChar);  OutputStreamWriter writer=new OutputStreamWriter(buf,enc);  for (int i=0; i < s.length(); i++) {    int c=s.charAt(i);    if (dontNeedEncoding.get(c)) {      if (c == ' ') {        c='+';        needToChange=true;      }      out.append((char)c);      wroteUnencodedChar=true;    } else {      try {        if (wroteUnencodedChar) {          writer=new OutputStreamWriter(buf,enc);          wroteUnencodedChar=false;        }        writer.write(c);        if (c >= 0xD800 && c <= 0xDBFF) {          if ((i + 1) < s.length()) {            int d=s.charAt(i + 1);            if (d >= 0xDC00 && d <= 0xDFFF) {              writer.write(d);              i++;            }          }        }        writer.flush();      } catch (      IOException e) {        buf.reset();        continue;      }      byte[] ba=buf.toByteArray();      for (int j=0; j < ba.length; j++) {        out.append('%');        char ch=Character.forDigit((ba[j] >> 4) & 0xF,16);        if (Character.isLetter(ch)) {          ch-=caseDiff;        }        out.append(ch);        ch=Character.forDigit(ba[j] & 0xF,16);        if (Character.isLetter(ch)) {          ch-=caseDiff;        }        out.append(ch);      }      buf.reset();      needToChange=true;    }  }  return (needToChange ? out.toString() : s);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public static void deregisterRestoreTaskListener(RestoreTaskListener listener){  directoryServer.restoreTaskListeners.remove(listener);}  }
class C{  void recomposeDecimalFormats(DecimalFormatProperties dfp){  DecimalFormatSymbols oldDfs=(DecimalFormatSymbols)m_decimalFormatSymbols.get(dfp.getName());  if (null == oldDfs) {    m_decimalFormatSymbols.put(dfp.getName(),dfp.getDecimalFormatSymbols());  } else   if (!dfp.getDecimalFormatSymbols().equals(oldDfs)) {    String themsg;    if (dfp.getName().equals(new QName(""))) {      themsg=XSLMessages.createWarning(XSLTErrorResources.WG_ONE_DEFAULT_XSLDECIMALFORMAT_ALLOWED,new Object[0]);    } else {      themsg=XSLMessages.createWarning(XSLTErrorResources.WG_XSLDECIMALFORMAT_NAMES_MUST_BE_UNIQUE,new Object[]{dfp.getName()});    }    error(themsg);  }}  }
class C{  protected <V>V parseJson(InputStream stream,Type type) throws IOException {  return parseJson(stream,type,null);}  }
class C{  public int hashCode(){  return (field.hashCode() << 6 + (a.hashCode() << 4) + (b.hashCode() << 2));}  }
class C{  private synchronized String loadLibraryAsResource(String libname){  try {    InputStream is=getResourceAsStream(libname.replace(File.separatorChar,'/'));    if (is != null) {      try {        File directory=new File(libraryDirectory);        directory.mkdirs();        File file=Files.createTempFile(directory.toPath(),libname + ".",null).toFile();        file.deleteOnExit();        FileOutputStream fileOutput=new FileOutputStream(file);        try {          byte[] buf=new byte[4096];          int n;          while ((n=is.read(buf)) >= 0) {            fileOutput.write(buf,0,n);          }        }  finally {          fileOutput.close();        }        if (file.exists()) {          return file.getAbsolutePath();        }      }  finally {        is.close();      }    }  } catch (  Exception e) {    MLET_LOGGER.logp(Level.FINEST,MLet.class.getName(),"loadLibraryAsResource","Failed to load library : " + libname,e);    return null;  }  return null;}  }
class C{  private boolean acceptSequence(char... sequence){  for (int i=0; i < sequence.length; i++) {    if (data[index + i] != sequence[i])     return false;  }  return true;}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  super.handleButton2Request(event);}  }
class C{  public static ComponentUI createUI(JComponent b){  return new SynthRadioButtonUI();}  }
class C{  protected void registerChannel(Selector selector,SelectableChannel channel,int ops,Object attach) throws Exception {  if (channel == null)   return;  channel.configureBlocking(false);  channel.register(selector,ops,attach);}  }
class C{  public static boolean isSubscript(AttributeSet a){  Boolean subscript=(Boolean)a.getAttribute(Subscript);  if (subscript != null) {    return subscript.booleanValue();  }  return false;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.ManifestType createManifestType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.ManifestTypeImpl();}  }
class C{  public void delete(String tokenId,ResultHandler<String,?> handler) throws CoreTokenException {  delete(tokenId,null,handler);}  }
class C{  public boolean hasSuffix(DN suffixDn) throws IllegalArgumentException {  return findSuffixNode(suffixDn,rootNode) != null;}  }
class C{  public org.omg.CosNaming.NamingContext new_context(){  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("new_context",true);    $in=_invoke($out);    org.omg.CosNaming.NamingContext $result=org.omg.CosNaming.NamingContextHelper.read($in);    return $result;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    return new_context();  } finally {    _releaseReply($in);  }}  }
class C{  protected WritableRaster(SampleModel sampleModel,Point origin){  this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);}  }
class C{  public void insert_boolean(boolean value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_boolean",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_boolean(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  @Override public void initParams(final HttpServletRequest request,final IConfiguration configuration,final Object... params) throws ConnectorException {  super.initParams(request,configuration,params);  this.newFileName=request.getParameter("FileName").replaceAll("\"","\\\\\"");  this.fileName=getParameter(request,"FileName");  try {    if (request.getHeader("User-Agent").indexOf("MSIE") != -1) {      this.newFileName=URLEncoder.encode(this.newFileName,"UTF-8");      this.newFileName=this.newFileName.replace("+"," ").replace("%2E",".");    } else {      this.newFileName=MimeUtility.encodeWord(this.newFileName,"utf-8","Q");    }  } catch (  UnsupportedEncodingException ex) {  }}  }
class C{  public Attributes2Impl(){  declared=EmptyArray.BOOLEAN;  specified=EmptyArray.BOOLEAN;}  }
class C{  public void makeImmutable(){  if (isMutable) {    isMutable=false;  }}  }
class C{  public void testShiftRight1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=0;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private void newBootFeedbackFrame(){  feedbackFrame=new JFrame("Boot .. ");  ImageIcon icon=new ImageIcon(getClass().getResource("log.gif"));  feedbackFrame.setIconImage(icon.getImage());  feedbackFrame.addWindowListener(new CloserListener());  JPanel workPanel=(JPanel)feedbackFrame.getContentPane();  progressBar=new JProgressBar();  progressBar.setMinimum(0);  progressBar.setMaximum(progress_max);  workPanel.add(new JLabel("Program is starting"),BorderLayout.NORTH);  workPanel.add(progressBar,BorderLayout.CENTER);  workPanel.add(newProgressStepPanel(),BorderLayout.SOUTH);  feedbackFrame.pack();  feedbackFrame.setLocationRelativeTo(null);  feedbackFrame.setVisible(true);  new Thread(new BootingProgress()).start();}  }
class C{  public boolean isReadable(){  return isRead;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeprocessinginstructionsetnodevalue.class,args);}  }
class C{  public String filter(final String template,final Object... assertionValues){  return Filter.format(template,assertionValues).toString();}  }
class C{  public static long calculateCurrentViewChecksum(){  return JKJsfUtil.calculateChecksum(FacesContext.getCurrentInstance().getViewRoot());}  }
class C{  private boolean mustAdd(ObjectClass oc){  final String filterText=filter.getText().trim();  if (filterText.isEmpty()) {    return true;  }  final Object filterType=filterAttribute.getSelectedItem();  if (FILTER_NAME.equals(filterType)) {    return mustAddObjectClassName(oc,filterText);  } else   if (FILTER_TYPE.equals(filterType)) {    return mustAddType(filterText,StandardObjectClassPanel.getTypeValue(oc));  } else   if (FILTER_REQUIRED_ATTRIBUTES.equals(filterType) || FILTER_OPTIONAL_ATTRIBUTES.equals(filterType)) {    return mustAddAttributeName(oc,filterText,filterType);  } else   if (FILTER_CHILD_CLASS.equals(filterType)) {    return mustAddAnyObjectClassName(oc,filterText);  } else   if (FILTER_PARENT_CLASS.equals(filterType)) {    return mustAddParentObjectClassName(oc,filterText);  }  return false;}  }
class C{  public final void testGetMaxPathLength() throws Exception {  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  keyTest.load(null,null);  ByteArrayInputStream certArray=new ByteArrayInputStream(certificate.getBytes());  ByteArrayInputStream certArray2=new ByteArrayInputStream(certificate2.getBytes());  CertificateFactory cf=CertificateFactory.getInstance("X.509");  X509Certificate cert[]=new X509Certificate[2];  cert[0]=(X509Certificate)cf.generateCertificate(certArray);  cert[1]=(X509Certificate)cf.generateCertificate(certArray2);  keyTest.setCertificateEntry("alias1",cert[0]);  keyTest.setCertificateEntry("alias2",cert[0]);  keyTest.setCertificateEntry("alias3",cert[1]);  PKIXBuilderParameters p=new PKIXBuilderParameters(keyTest,new X509CertSelector());  assertEquals(5,p.getMaxPathLength());  p.setMaxPathLength(10);  assertEquals(10,p.getMaxPathLength());}  }
class C{  public boolean isNew(){  return (session != null) ? session.isNew() : isNew;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddr;  Node textNode;  NamedNodeMap attrList;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=elementList.item(0);  textNode=testAddr.getFirstChild();  attrList=textNode.getAttributes();  assertNull("text_attributes_is_null",attrList);}  }
class C{  public static void paintComponent(Graphics g,Component c,Container p,int x,int y,int w,int h){  getCellRendererPane(c,p).paintComponent(g,c,p,x,y,w,h,false);}  }
class C{  private long reconcileState(){  final Phaser root=this.root;  long s=state;  if (root != this) {    int phase, p;    while ((phase=(int)(root.state >>> PHASE_SHIFT)) != (int)(s >>> PHASE_SHIFT) && !UNSAFE.compareAndSwapLong(this,stateOffset,s,s=(((long)phase << PHASE_SHIFT) | ((phase < 0) ? (s & COUNTS_MASK) : (((p=(int)s >>> PARTIES_SHIFT) == 0) ? EMPTY : ((s & PARTIES_MASK) | p))))))     s=state;  }  return s;}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  public final void testClone01(){  Vector<Certificate> certificates=new Vector<Certificate>();  certificates.add(new MyCertificate("TEST",new byte[]{(byte)4}));  CollectionCertStoreParameters cp1=new CollectionCertStoreParameters(certificates);  CollectionCertStoreParameters cp2=(CollectionCertStoreParameters)cp1.clone();  assertTrue(cp1 != cp2);}  }
class C{  public void writeSearchResultReference(final int messageID,final SearchResultReference reference) throws IOException {  logger.trace("ENCODE LDAP SEARCH RESULT REFERENCE(messageID=%d, reference=%s)",messageID,reference);  writeMessageHeader(messageID);{    writer.writeStartSequence(LDAP.OP_TYPE_SEARCH_RESULT_REFERENCE);{      for (      final String url : reference.getURIs()) {        writer.writeOctetString(url);      }    }    writer.writeEndSequence();  }  writeMessageFooter(reference.getControls());}  }
class C{  public Vector(Collection<? extends E> c){  elementData=c.toArray();  elementCount=elementData.length;  if (elementData.getClass() != Object[].class)   elementData=Arrays.copyOf(elementData,elementCount,Object[].class);}  }
class C{  public void maximizeFrame(JInternalFrame f){  if (f.isIcon()) {    try {      f.setIcon(false);    } catch (    PropertyVetoException e2) {    }  } else {    f.setNormalBounds(f.getBounds());    Rectangle desktopBounds=f.getParent().getBounds();    setBoundsForFrame(f,0,0,desktopBounds.width,desktopBounds.height);  }  try {    f.setSelected(true);  } catch (  PropertyVetoException e2) {  }}  }
class C{  protected void checkAntVersion(Hashtable h){  if (null == h)   h=new Hashtable();  try {    final String ANT_VERSION_CLASS="org.apache.tools.ant.Main";    final String ANT_VERSION_METHOD="getAntVersion";    final Class noArgs[]=new Class[0];    Class clazz=ObjectFactory.findProviderClass(ANT_VERSION_CLASS,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(ANT_VERSION_METHOD,noArgs);    Object returnValue=method.invoke(null,new Object[0]);    h.put(VERSION + "ant",(String)returnValue);  } catch (  Exception e) {    h.put(VERSION + "ant",CLASS_NOTPRESENT);  }}  }
class C{  public FileChangeSet(final File directory,final Set<File> addedFiles,final Set<File> modifiedFiles,final Set<File> removedFiles){  this.directory=directory;  this.addedFiles=addedFiles;  this.modifiedFiles=modifiedFiles;  this.removedFiles=removedFiles;}  }
class C{  public CertificateEncodingException(){  super();}  }
class C{  public CreateMetaDataModelImpl(HttpServletRequest req,Map map){  super(req,map);  String uri=req.getRequestURI().toString();  int idx=uri.indexOf('/',1);  uri=uri.substring(0,idx);  if (AMSystemConfig.isConsoleRemote) {    requestURL=SystemProperties.getServerInstanceName();  } else {    requestURL=req.getScheme() + "://" + req.getServerName()+ ":"+ req.getServerPort()+ uri;  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  try {    Map map=getValues();    String name=(String)map.get(ATTR_NAME);    Set values=(Set)map.get(ATTR_VALUES);    Map mapValues=(Map)getPageSessionAttribute(SessionPropertyConditionHelper.PG_SESSION_PROPERTY_VALUES);    boolean okToAdd=true;    if (mapValues == null) {      mapValues=new HashMap();      setPageSessionAttribute(SessionPropertyConditionHelper.PG_SESSION_PROPERTY_VALUES,(HashMap)mapValues);    } else {      Set check=(Set)mapValues.get(name);      if (check != null) {        okToAdd=false;        setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","policy.condition.session.property.name.already.exists.message");        forwardTo();      }    }    if (okToAdd) {      mapValues.put(name,values);      forwardToCallingViewBean();    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiOptionPaneUI();  return MultiLookAndFeel.createUIs(mui,((MultiOptionPaneUI)mui).uis,a);}  }
class C{  protected CanReadFileFilter(){}  }
class C{  private void installDefaultTransferHandlerIfNecessary(){  if (getTransferHandler() == null) {    if (defaultTransferHandler == null) {      defaultTransferHandler=new DefaultTransferHandler();    }    setTransferHandler(defaultTransferHandler);  }}  }
class C{  private final void primitiveLeftShift(int n){  int[] val=value;  int n2=32 - n;  for (int i=offset, c=val[i], m=i + intLen - 1; i < m; i++) {    int b=c;    c=val[i + 1];    val[i]=(b << n) | (c >>> n2);  }  val[offset + intLen - 1]<<=n;}  }
class C{  private ImageIcon createIcon(String path,String description){  ImageIcon icon=Utilities.createImageIcon(path);  if (description != null) {    icon.setDescription(description);    icon.getAccessibleContext().setAccessibleDescription(description);  }  return icon;}  }
class C{  @Action(operationDescription=@Operation(description=SNS_MESSAGE_RESOURCE + ACTION + "authenticate."+ DESCRIPTION,errors=@ApiError(code=400,description=SNS_MESSAGE_RESOURCE + ERROR_400_DESCRIPTION)),request=@Schema(schemaResource="SnsMessageResource.authenticate.schema.json"),response=@Schema(schemaResource="SnsMessageResource.response.schema.json")) public Promise<ActionResponse,ResourceException> authenticate(Context context,ActionRequest actionRequest){  return handle(context,actionRequest,RequestType.AUTHENTICATE);}  }
class C{  public TableModelEvent(TableModel source){  this(source,0,Integer.MAX_VALUE,ALL_COLUMNS,UPDATE);}  }
class C{  public boolean isValidOffset(ZoneOffset offset){  return isGap() ? false : (getOffsetBefore().equals(offset) || getOffsetAfter().equals(offset));}  }
class C{  public static void deregisterRetentionPolicy(DN configEntryDN){  Reject.ifNull(configEntryDN);  directoryServer.retentionPolicies.remove(configEntryDN);}  }
class C{  public static synchronized void sdkInitialize(Context context){  if (sdkInitialized == true) {    return;  }  Settings.loadDefaultsFromMetadataIfNeeded(context);  Utility.loadAppSettingsAsync(context,Settings.getApplicationId());  BoltsMeasurementEventListener.getInstance(context.getApplicationContext());  sdkInitialized=true;}  }
class C{  public boolean hasFeature(String feature,String version){  if (("CORE".equals(feature.toUpperCase()) || "XML".equals(feature.toUpperCase())) && ("1.0".equals(version) || "2.0".equals(version)))   return true;  return false;}  }
class C{  public Object[] toArray(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return q.toArray();  }  finally {    lock.unlock();  }}  }
class C{  public static String formatNumber(Number count){  Format numberFormatter=getNumberFormatter(DEFAULT_NUMBER_FORMAT);  return numberFormatter.format(count);}  }
class C{  public boolean validateSchema(){  return validateSchema;}  }
class C{  @Override public Promise<AuthStatus,AuthenticationException> secureResponse(MessageInfoContext messageInfo,Subject subject){  return newResultPromise(SEND_SUCCESS);}  }
class C{  protected String paramString(){  String paintTicksString=(paintTicks ? "true" : "false");  String paintTrackString=(paintTrack ? "true" : "false");  String paintLabelsString=(paintLabels ? "true" : "false");  String isInvertedString=(isInverted ? "true" : "false");  String snapToTicksString=(snapToTicks ? "true" : "false");  String snapToValueString=(snapToValue ? "true" : "false");  String orientationString=(orientation == HORIZONTAL ? "HORIZONTAL" : "VERTICAL");  return super.paramString() + ",isInverted=" + isInvertedString+ ",majorTickSpacing="+ majorTickSpacing+ ",minorTickSpacing="+ minorTickSpacing+ ",orientation="+ orientationString+ ",paintLabels="+ paintLabelsString+ ",paintTicks="+ paintTicksString+ ",paintTrack="+ paintTrackString+ ",snapToTicks="+ snapToTicksString+ ",snapToValue="+ snapToValueString;}  }
class C{  private static SearchScope createScope(String expression) throws AciException {  if (expression.equalsIgnoreCase("base")) {    return SearchScope.BASE_OBJECT;  } else   if (expression.equalsIgnoreCase("onelevel")) {    return SearchScope.SINGLE_LEVEL;  } else   if (expression.equalsIgnoreCase("subtree")) {    return SearchScope.WHOLE_SUBTREE;  } else   if (expression.equalsIgnoreCase("subordinate")) {    return SearchScope.SUBORDINATES;  } else {    LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGETSCOPE_EXPRESSION.get(expression);    throw new AciException(message);  }}  }
class C{  public StringSelection(String data){  this.data=data;}  }
class C{  public void updateTemplate(String ruleGroup,String templateJson,boolean delete){  try {    AlertTemplate template=AlertTemplateSerializer.deserialize(templateJson);    if (delete) {      templateMap.remove(template.getTemplateId());      logger.info("Deleted template:" + template.getTemplateId());    } else {      templateMap.put(template.getTemplateId(),template);    }  } catch (  Exception e) {    logger.log(Level.SEVERE,"Alert template error",e);  }}  }
class C{  private void resetToXMLStream(){  return;}  }
class C{  private XStringForFSB(String val){  super(val);  throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FSB_CANNOT_TAKE_STRING,null));}  }
class C{  protected String paramString(){  String kitString=(kit != null ? kit.toString() : "");  String typeHandlersString=(typeHandlers != null ? typeHandlers.toString() : "");  return super.paramString() + ",kit=" + kitString+ ",typeHandlers="+ typeHandlersString;}  }
class C{  @Override public void initialize(Map<String,Set<String>> configParams) throws IdRepoException {  if (DEBUG.messageEnabled()) {    DEBUG.message("initialize invoked");  }  super.initialize(configParams);  String hostServerId=null;  String hostSiteId="";  try {    hostServerId=WebtopNaming.getAMServerID();    hostSiteId=WebtopNaming.getSiteID(hostServerId);  } catch (  ServerEntryNotFoundException senfe) {    if (DEBUG.warningEnabled()) {      DEBUG.warning("ServerEntryNotFoundException, hostServerId=" + hostServerId + ", hostSiteId="+ hostSiteId);    }  }  dnCacheEnabled=CollectionHelper.getBooleanMapAttr(configMap,LDAP_DNCACHE_ENABLED,true);  if (dnCacheEnabled) {    dnCache=new Cache(CollectionHelper.getIntMapAttr(configParams,LDAP_DNCACHE_SIZE,1500,DEBUG));  }  ldapServers=LDAPUtils.prioritizeServers(configParams.get(LDAP_SERVER_LIST),hostServerId,hostSiteId);  defaultSizeLimit=CollectionHelper.getIntMapAttr(configParams,LDAP_MAX_RESULTS,100,DEBUG);  defaultTimeLimit=CollectionHelper.getIntMapAttr(configParams,LDAP_TIME_LIMIT,5,DEBUG);  int maxPoolSize=CollectionHelper.getIntMapAttr(configParams,LDAP_CONNECTION_POOL_MAX_SIZE,10,DEBUG);  String username=CollectionHelper.getMapAttr(configParams,LDAP_SERVER_USER_NAME);  char[] password=CollectionHelper.getMapAttr(configParams,LDAP_SERVER_PASSWORD,"").toCharArray();  heartBeatInterval=CollectionHelper.getIntMapAttr(configParams,LDAP_SERVER_HEARTBEAT_INTERVAL,10,DEBUG);  heartBeatTimeUnit=CollectionHelper.getMapAttr(configParams,LDAP_SERVER_HEARTBEAT_TIME_UNIT,"SECONDS");  String connectionMode=CollectionHelper.getMapAttr(configParams,LDAP_CONNECTION_MODE);  useStartTLS=LDAP_CONNECTION_MODE_STARTTLS.equalsIgnoreCase(connectionMode);  isSecure=LDAP_CONNECTION_MODE_LDAPS.equalsIgnoreCase(connectionMode) || useStartTLS;  protocolVersion=CollectionHelper.getMapAttr(configParams,LDAP_SERVER_SECURE_PROTOCOL_VERSION,"TLSv1");  bindConnectionFactory=createConnectionFactory(null,null,maxPoolSize);  connectionFactory=createConnectionFactory(username,password,maxPoolSize);  supportedTypesAndOperations=IdRepoUtils.parseSupportedTypesAndOperations(configParams.get(LDAP_SUPPORTED_TYPES_AND_OPERATIONS));  userStatusAttr=CollectionHelper.getMapAttr(configParams,LDAP_USER_STATUS_ATTR_NAME);  if (userStatusAttr == null || userStatusAttr.isEmpty()) {    alwaysActive=true;    userStatusAttr=DEFAULT_USER_STATUS_ATTR;  }  activeValue=CollectionHelper.getMapAttr(configParams,LDAP_STATUS_ACTIVE,STATUS_ACTIVE);  inactiveValue=CollectionHelper.getMapAttr(configParams,LDAP_STATUS_INACTIVE,STATUS_INACTIVE);  creationAttributeMapping=IdRepoUtils.parseAttributeMapping(configParams.get(LDAP_CREATION_ATTR_MAPPING));  userNamingAttr=CollectionHelper.getMapAttr(configParams,LDAP_USER_NAMING_ATTR);  groupNamingAttr=CollectionHelper.getMapAttr(configParams,LDAP_GROUP_NAMING_ATTR);  roleNamingAttr=CollectionHelper.getMapAttr(configParams,LDAP_ROLE_NAMING_ATTR);  filteredRoleNamingAttr=CollectionHelper.getMapAttr(configParams,LDAP_FILTERED_ROLE_NAMING_ATTR);  userSearchAttr=CollectionHelper.getMapAttr(configParams,LDAP_USER_SEARCH_ATTR);  userAttributesAllowed=new CaseInsensitiveHashSet();  Set<String> allowAttrs=configParams.get(LDAP_USER_ATTRS);  if (allowAttrs != null) {    userAttributesAllowed.addAll(allowAttrs);  }  groupAttributesAllowed=new CaseInsensitiveHashSet();  allowAttrs=configParams.get(LDAP_GROUP_ATTRS);  if (allowAttrs != null) {    groupAttributesAllowed.addAll(allowAttrs);  }  roleAttributesAllowed=new CaseInsensitiveHashSet();  allowAttrs=configParams.get(LDAP_ROLE_ATTRS);  if (allowAttrs != null) {    roleAttributesAllowed.addAll(allowAttrs);  }  filteredRoleAttributesAllowed=new CaseInsensitiveHashSet();  allowAttrs=configParams.get(LDAP_FILTERED_ROLE_ATTRS);  if (allowAttrs != null) {    filteredRoleAttributesAllowed.addAll(allowAttrs);  }  userObjectClasses=getNonNullSettingValues(LDAP_USER_OBJECT_CLASS);  groupObjectClasses=getNonNullSettingValues(LDAP_GROUP_OBJECT_CLASS);  roleObjectClasses=getNonNullSettingValues(LDAP_ROLE_OBJECT_CLASS);  filteredRoleObjectClasses=getNonNullSettingValues(LDAP_FILTERED_ROLE_OBJECT_CLASS);  defaultGroupMember=CollectionHelper.getMapAttr(configParams,LDAP_DEFAULT_GROUP_MEMBER);  uniqueMemberAttr=CollectionHelper.getMapAttr(configParams,LDAP_UNIQUE_MEMBER,UNIQUE_MEMBER_ATTR);  memberURLAttr=CollectionHelper.getMapAttr(configParams,LDAP_MEMBER_URL);  memberOfAttr=CollectionHelper.getMapAttr(configParams,LDAP_MEMBER_OF);  peopleContainerName=CollectionHelper.getMapAttr(configParams,LDAP_PEOPLE_CONTAINER_NAME);  peopleContainerValue=CollectionHelper.getMapAttr(configParams,LDAP_PEOPLE_CONTAINER_VALUE);  groupContainerName=CollectionHelper.getMapAttr(configParams,LDAP_GROUP_CONTAINER_NAME);  groupContainerValue=CollectionHelper.getMapAttr(configParams,LDAP_GROUP_CONTAINER_VALUE);  roleAttr=CollectionHelper.getMapAttr(configParams,LDAP_ROLE_ATTR,ROLE_ATTR);  roleDNAttr=CollectionHelper.getMapAttr(configParams,LDAP_ROLE_DN_ATTR,ROLE_DN_ATTR);  roleFilterAttr=CollectionHelper.getMapAttr(configParams,LDAP_ROLE_FILTER_ATTR,ROLE_FILTER_ATTR);  rootSuffix=CollectionHelper.getMapAttr(configParams,LDAP_SERVER_ROOT_SUFFIX);  userSearchFilter=LDAPUtils.parseFilter(CollectionHelper.getMapAttr(configParams,LDAP_USER_SEARCH_FILTER),Filter.objectClassPresent());  groupSearchFilter=LDAPUtils.parseFilter(CollectionHelper.getMapAttr(configParams,LDAP_GROUP_SEARCH_FILTER),Filter.objectClassPresent());  roleSearchFilter=LDAPUtils.parseFilter(CollectionHelper.getMapAttr(configParams,LDAP_ROLE_SEARCH_FILTER),DEFAULT_ROLE_SEARCH_FILTER);  filteredRoleSearchFilter=LDAPUtils.parseFilter(CollectionHelper.getMapAttr(configParams,LDAP_FILTERED_ROLE_SEARCH_FILTER),DEFAULT_FILTERED_ROLE_SEARCH_FILTER);  String serviceInfo=CollectionHelper.getMapAttr(configParams,LDAP_SERVICE_ATTRS);  serviceMap=new HashMap<String,Map<String,Set<String>>>(new SOAPClient("dummy").decodeMap(serviceInfo));  defaultScope=LDAPUtils.getSearchScope(CollectionHelper.getMapAttr(configParams,LDAP_SEARCH_SCOPE),SearchScope.WHOLE_SUBTREE);  roleScope=LDAPUtils.getSearchScope(CollectionHelper.getMapAttr(configParams,LDAP_ROLE_SEARCH_SCOPE),SearchScope.WHOLE_SUBTREE);  if (configParams.containsKey(LDAP_ADAM_TYPE)) {    helper=new ADAMHelper();  } else   if (configParams.containsKey(LDAP_AD_TYPE)) {    helper=new ADHelper();  } else {    helper=new DirectoryHelper();  }  if (DEBUG.messageEnabled()) {    DEBUG.message("IdRepo configuration:\n" + IdRepoUtils.getAttrMapWithoutPasswordAttrs(configMap,asSet(LDAP_SERVER_PASSWORD)));  }}  }
class C{  public void resizeFrame(JComponent f,int newX,int newY,int newWidth,int newHeight){  if (dragMode == DEFAULT_DRAG_MODE || dragMode == FASTER_DRAG_MODE) {    setBoundsForFrame(f,newX,newY,newWidth,newHeight);  } else {    JDesktopPane desktopPane=getDesktopPane(f);    if (desktopPane != null) {      Graphics g=JComponent.safelyGetGraphics(desktopPane);      g.setXORMode(Color.white);      if (currentBounds != null) {        g.drawRect(currentBounds.x,currentBounds.y,currentBounds.width - 1,currentBounds.height - 1);      }      g.drawRect(newX,newY,newWidth - 1,newHeight - 1);      sun.java2d.SurfaceData sData=((sun.java2d.SunGraphics2D)g).getSurfaceData();      if (!sData.isSurfaceLost()) {        currentBounds=new Rectangle(newX,newY,newWidth,newHeight);      }      g.setPaintMode();      g.dispose();    }  }}  }
class C{  @AfterClass public void freeDictionaryMemory() throws Exception {  TestCaseUtils.restartServer();}  }
class C{  @NonNull public static Agera empty(){  return new AgeraEmpty();}  }
class C{  public boolean isCanceled(){  return isCanceled;}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setAutoIncrementPatch(true);  unchecked(null);}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public SAMLRequestVersionDeprecatedException(String s){  super(s);}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  return generateDerivedParameters(keySize);}  }
class C{  protected Rule(){}  }
class C{  public int size(){  return map.size();}  }
class C{  public Collection<?> values(){  return Collections.unmodifiableCollection(contents.values());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodens04.class,args);}  }
class C{  public void visitInvokeDynamicInsn(String name,String desc,Handle bsm,Object... bsmArgs){  if (mv != null) {    mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);  }}  }
class C{  public static List<Foo> findAll(){  return getPersistence().findAll();}  }
class C{  public double[] board_to_dsn_rel(PlaPointFloat p_point){  double[] result=new double[2];  result[0]=board_to_dsn(p_point.v_x);  result[1]=board_to_dsn(p_point.v_y);  return result;}  }
class C{  public void focusNextComponent(Component aComponent){  if (aComponent != null) {    aComponent.transferFocus();  }}  }
class C{  public static void verifySignature(Document doc) throws SAML2MetaException {  NodeList sigElements=null;  try {    Element nscontext=org.apache.xml.security.utils.XMLUtils.createDSctx(doc,"ds",Constants.SignatureSpecNS);    sigElements=XPathAPI.selectNodeList(doc,"//ds:Signature",nscontext);  } catch (  Exception ex) {    if (debug.messageEnabled()) {      debug.message("SAML2MetaSecurityUtils.verifySignature:",ex);      throw new SAML2MetaException(ex.getMessage());    }  }  int numSigs=sigElements.getLength();  if (debug.messageEnabled()) {    debug.message("SAML2MetaSecurityUtils.verifySignature:" + " # of signatures = " + numSigs);  }  if (numSigs == 0) {    return;  }  doc.getDocumentElement().setIdAttribute(SAML2Constants.ID,true);  initializeKeyStore();  for (int i=0; i < numSigs; i++) {    Element sigElement=(Element)sigElements.item(i);    String sigParentName=sigElement.getParentNode().getLocalName();    Object[] objs={sigParentName};    if (debug.messageEnabled()) {      debug.message("SAML2MetaSecurityUtils.verifySignature: " + "verifying signature under " + sigParentName);    }    try {      XMLSignature signature=new XMLSignature(sigElement,"");      signature.addResourceResolver(new com.sun.identity.saml.xmlsig.OfflineResolver());      KeyInfo ki=signature.getKeyInfo();      X509Certificate x509cert=null;      if (ki != null && ki.containsX509Data()) {        if (keyStore != null) {          StorageResolver sr=new StorageResolver(new KeyStoreResolver(keyStore));          ki.addStorageResolver(sr);        }        x509cert=ki.getX509Certificate();      }      if (x509cert == null) {        if (debug.messageEnabled()) {          debug.message("SAML2MetaSecurityUtils.verifySignature:" + " try to find cert in KeyDescriptor");        }        String xpath="following-sibling::*[local-name()=\"" + TAG_KEY_DESCRIPTOR + "\" and namespace-uri()=\""+ NS_META+ "\"]";        Node node=XPathAPI.selectSingleNode(sigElement,xpath);        if (node != null) {          Element kd=(Element)node;          String use=kd.getAttributeNS(null,ATTR_USE);          if ((use.length() == 0) || use.equals("signing")) {            NodeList nl=kd.getChildNodes();            for (int j=0; j < nl.getLength(); j++) {              Node child=nl.item(j);              if (child.getNodeType() == Node.ELEMENT_NODE) {                String localName=child.getLocalName();                String ns=child.getNamespaceURI();                if (TAG_KEY_INFO.equals(localName) && NS_XMLSIG.equals(ns)) {                  ki=new KeyInfo((Element)child,"");                  if (ki.containsX509Data()) {                    if (keyStore != null) {                      KeyStoreResolver ksr=new KeyStoreResolver(keyStore);                      StorageResolver sr=new StorageResolver(ksr);                      ki.addStorageResolver(sr);                    }                    x509cert=ki.getX509Certificate();                  }                }                break;              }            }          }        }      }      if (x509cert == null) {        throw new SAML2MetaException("verify_no_cert",objs);      }      if (checkCert && ((keyProvider == null) || (keyProvider.getCertificateAlias(x509cert) == null))) {        throw new SAML2MetaException("untrusted_cert",objs);      }      PublicKey pk=x509cert.getPublicKey();      if (!signature.checkSignatureValue(pk)) {        throw new SAML2MetaException("verify_fail",objs);      }    } catch (    SAML2MetaException sme) {      throw sme;    }catch (    Exception ex) {      debug.error("SAML2MetaSecurityUtils.verifySignature: ",ex);      throw new SAML2MetaException(Locale.getString(SAML2MetaUtils.resourceBundle,"verify_fail",objs) + "\n" + ex.getMessage());    }  }}  }
class C{  public InvalidSearchFilterException(){  super();}  }
class C{  @Override public HijrahDate dateYearDay(Era era,int yearOfEra,int dayOfYear){  return dateYearDay(prolepticYear(era,yearOfEra),dayOfYear);}  }
class C{  public static Completion of(String value){  return new SimpleCompletion(value,"");}  }
class C{  public void removeEvents(){  scene.setOnKeyPressed(null);  scene.setOnKeyReleased(null);  up=down=left=right=sprint=jump=shootFireball=false;}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,new int[]{},new ECBlocks(7,new ECB(1,19)),new ECBlocks(10,new ECB(1,16)),new ECBlocks(13,new ECB(1,13)),new ECBlocks(17,new ECB(1,9))),new Version(2,new int[]{6,18},new ECBlocks(10,new ECB(1,34)),new ECBlocks(16,new ECB(1,28)),new ECBlocks(22,new ECB(1,22)),new ECBlocks(28,new ECB(1,16))),new Version(3,new int[]{6,22},new ECBlocks(15,new ECB(1,55)),new ECBlocks(26,new ECB(1,44)),new ECBlocks(18,new ECB(2,17)),new ECBlocks(22,new ECB(2,13))),new Version(4,new int[]{6,26},new ECBlocks(20,new ECB(1,80)),new ECBlocks(18,new ECB(2,32)),new ECBlocks(26,new ECB(2,24)),new ECBlocks(16,new ECB(4,9))),new Version(5,new int[]{6,30},new ECBlocks(26,new ECB(1,108)),new ECBlocks(24,new ECB(2,43)),new ECBlocks(18,new ECB(2,15),new ECB(2,16)),new ECBlocks(22,new ECB(2,11),new ECB(2,12))),new Version(6,new int[]{6,34},new ECBlocks(18,new ECB(2,68)),new ECBlocks(16,new ECB(4,27)),new ECBlocks(24,new ECB(4,19)),new ECBlocks(28,new ECB(4,15))),new Version(7,new int[]{6,22,38},new ECBlocks(20,new ECB(2,78)),new ECBlocks(18,new ECB(4,31)),new ECBlocks(18,new ECB(2,14),new ECB(4,15)),new ECBlocks(26,new ECB(4,13),new ECB(1,14))),new Version(8,new int[]{6,24,42},new ECBlocks(24,new ECB(2,97)),new ECBlocks(22,new ECB(2,38),new ECB(2,39)),new ECBlocks(22,new ECB(4,18),new ECB(2,19)),new ECBlocks(26,new ECB(4,14),new ECB(2,15))),new Version(9,new int[]{6,26,46},new ECBlocks(30,new ECB(2,116)),new ECBlocks(22,new ECB(3,36),new ECB(2,37)),new ECBlocks(20,new ECB(4,16),new ECB(4,17)),new ECBlocks(24,new ECB(4,12),new ECB(4,13))),new Version(10,new int[]{6,28,50},new ECBlocks(18,new ECB(2,68),new ECB(2,69)),new ECBlocks(26,new ECB(4,43),new ECB(1,44)),new ECBlocks(24,new ECB(6,19),new ECB(2,20)),new ECBlocks(28,new ECB(6,15),new ECB(2,16))),new Version(11,new int[]{6,30,54},new ECBlocks(20,new ECB(4,81)),new ECBlocks(30,new ECB(1,50),new ECB(4,51)),new ECBlocks(28,new ECB(4,22),new ECB(4,23)),new ECBlocks(24,new ECB(3,12),new ECB(8,13))),new Version(12,new int[]{6,32,58},new ECBlocks(24,new ECB(2,92),new ECB(2,93)),new ECBlocks(22,new ECB(6,36),new ECB(2,37)),new ECBlocks(26,new ECB(4,20),new ECB(6,21)),new ECBlocks(28,new ECB(7,14),new ECB(4,15))),new Version(13,new int[]{6,34,62},new ECBlocks(26,new ECB(4,107)),new ECBlocks(22,new ECB(8,37),new ECB(1,38)),new ECBlocks(24,new ECB(8,20),new ECB(4,21)),new ECBlocks(22,new ECB(12,11),new ECB(4,12))),new Version(14,new int[]{6,26,46,66},new ECBlocks(30,new ECB(3,115),new ECB(1,116)),new ECBlocks(24,new ECB(4,40),new ECB(5,41)),new ECBlocks(20,new ECB(11,16),new ECB(5,17)),new ECBlocks(24,new ECB(11,12),new ECB(5,13))),new Version(15,new int[]{6,26,48,70},new ECBlocks(22,new ECB(5,87),new ECB(1,88)),new ECBlocks(24,new ECB(5,41),new ECB(5,42)),new ECBlocks(30,new ECB(5,24),new ECB(7,25)),new ECBlocks(24,new ECB(11,12),new ECB(7,13))),new Version(16,new int[]{6,26,50,74},new ECBlocks(24,new ECB(5,98),new ECB(1,99)),new ECBlocks(28,new ECB(7,45),new ECB(3,46)),new ECBlocks(24,new ECB(15,19),new ECB(2,20)),new ECBlocks(30,new ECB(3,15),new ECB(13,16))),new Version(17,new int[]{6,30,54,78},new ECBlocks(28,new ECB(1,107),new ECB(5,108)),new ECBlocks(28,new ECB(10,46),new ECB(1,47)),new ECBlocks(28,new ECB(1,22),new ECB(15,23)),new ECBlocks(28,new ECB(2,14),new ECB(17,15))),new Version(18,new int[]{6,30,56,82},new ECBlocks(30,new ECB(5,120),new ECB(1,121)),new ECBlocks(26,new ECB(9,43),new ECB(4,44)),new ECBlocks(28,new ECB(17,22),new ECB(1,23)),new ECBlocks(28,new ECB(2,14),new ECB(19,15))),new Version(19,new int[]{6,30,58,86},new ECBlocks(28,new ECB(3,113),new ECB(4,114)),new ECBlocks(26,new ECB(3,44),new ECB(11,45)),new ECBlocks(26,new ECB(17,21),new ECB(4,22)),new ECBlocks(26,new ECB(9,13),new ECB(16,14))),new Version(20,new int[]{6,34,62,90},new ECBlocks(28,new ECB(3,107),new ECB(5,108)),new ECBlocks(26,new ECB(3,41),new ECB(13,42)),new ECBlocks(30,new ECB(15,24),new ECB(5,25)),new ECBlocks(28,new ECB(15,15),new ECB(10,16))),new Version(21,new int[]{6,28,50,72,94},new ECBlocks(28,new ECB(4,116),new ECB(4,117)),new ECBlocks(26,new ECB(17,42)),new ECBlocks(28,new ECB(17,22),new ECB(6,23)),new ECBlocks(30,new ECB(19,16),new ECB(6,17))),new Version(22,new int[]{6,26,50,74,98},new ECBlocks(28,new ECB(2,111),new ECB(7,112)),new ECBlocks(28,new ECB(17,46)),new ECBlocks(30,new ECB(7,24),new ECB(16,25)),new ECBlocks(24,new ECB(34,13))),new Version(23,new int[]{6,30,54,74,102},new ECBlocks(30,new ECB(4,121),new ECB(5,122)),new ECBlocks(28,new ECB(4,47),new ECB(14,48)),new ECBlocks(30,new ECB(11,24),new ECB(14,25)),new ECBlocks(30,new ECB(16,15),new ECB(14,16))),new Version(24,new int[]{6,28,54,80,106},new ECBlocks(30,new ECB(6,117),new ECB(4,118)),new ECBlocks(28,new ECB(6,45),new ECB(14,46)),new ECBlocks(30,new ECB(11,24),new ECB(16,25)),new ECBlocks(30,new ECB(30,16),new ECB(2,17))),new Version(25,new int[]{6,32,58,84,110},new ECBlocks(26,new ECB(8,106),new ECB(4,107)),new ECBlocks(28,new ECB(8,47),new ECB(13,48)),new ECBlocks(30,new ECB(7,24),new ECB(22,25)),new ECBlocks(30,new ECB(22,15),new ECB(13,16))),new Version(26,new int[]{6,30,58,86,114},new ECBlocks(28,new ECB(10,114),new ECB(2,115)),new ECBlocks(28,new ECB(19,46),new ECB(4,47)),new ECBlocks(28,new ECB(28,22),new ECB(6,23)),new ECBlocks(30,new ECB(33,16),new ECB(4,17))),new Version(27,new int[]{6,34,62,90,118},new ECBlocks(30,new ECB(8,122),new ECB(4,123)),new ECBlocks(28,new ECB(22,45),new ECB(3,46)),new ECBlocks(30,new ECB(8,23),new ECB(26,24)),new ECBlocks(30,new ECB(12,15),new ECB(28,16))),new Version(28,new int[]{6,26,50,74,98,122},new ECBlocks(30,new ECB(3,117),new ECB(10,118)),new ECBlocks(28,new ECB(3,45),new ECB(23,46)),new ECBlocks(30,new ECB(4,24),new ECB(31,25)),new ECBlocks(30,new ECB(11,15),new ECB(31,16))),new Version(29,new int[]{6,30,54,78,102,126},new ECBlocks(30,new ECB(7,116),new ECB(7,117)),new ECBlocks(28,new ECB(21,45),new ECB(7,46)),new ECBlocks(30,new ECB(1,23),new ECB(37,24)),new ECBlocks(30,new ECB(19,15),new ECB(26,16))),new Version(30,new int[]{6,26,52,78,104,130},new ECBlocks(30,new ECB(5,115),new ECB(10,116)),new ECBlocks(28,new ECB(19,47),new ECB(10,48)),new ECBlocks(30,new ECB(15,24),new ECB(25,25)),new ECBlocks(30,new ECB(23,15),new ECB(25,16))),new Version(31,new int[]{6,30,56,82,108,134},new ECBlocks(30,new ECB(13,115),new ECB(3,116)),new ECBlocks(28,new ECB(2,46),new ECB(29,47)),new ECBlocks(30,new ECB(42,24),new ECB(1,25)),new ECBlocks(30,new ECB(23,15),new ECB(28,16))),new Version(32,new int[]{6,34,60,86,112,138},new ECBlocks(30,new ECB(17,115)),new ECBlocks(28,new ECB(10,46),new ECB(23,47)),new ECBlocks(30,new ECB(10,24),new ECB(35,25)),new ECBlocks(30,new ECB(19,15),new ECB(35,16))),new Version(33,new int[]{6,30,58,86,114,142},new ECBlocks(30,new ECB(17,115),new ECB(1,116)),new ECBlocks(28,new ECB(14,46),new ECB(21,47)),new ECBlocks(30,new ECB(29,24),new ECB(19,25)),new ECBlocks(30,new ECB(11,15),new ECB(46,16))),new Version(34,new int[]{6,34,62,90,118,146},new ECBlocks(30,new ECB(13,115),new ECB(6,116)),new ECBlocks(28,new ECB(14,46),new ECB(23,47)),new ECBlocks(30,new ECB(44,24),new ECB(7,25)),new ECBlocks(30,new ECB(59,16),new ECB(1,17))),new Version(35,new int[]{6,30,54,78,102,126,150},new ECBlocks(30,new ECB(12,121),new ECB(7,122)),new ECBlocks(28,new ECB(12,47),new ECB(26,48)),new ECBlocks(30,new ECB(39,24),new ECB(14,25)),new ECBlocks(30,new ECB(22,15),new ECB(41,16))),new Version(36,new int[]{6,24,50,76,102,128,154},new ECBlocks(30,new ECB(6,121),new ECB(14,122)),new ECBlocks(28,new ECB(6,47),new ECB(34,48)),new ECBlocks(30,new ECB(46,24),new ECB(10,25)),new ECBlocks(30,new ECB(2,15),new ECB(64,16))),new Version(37,new int[]{6,28,54,80,106,132,158},new ECBlocks(30,new ECB(17,122),new ECB(4,123)),new ECBlocks(28,new ECB(29,46),new ECB(14,47)),new ECBlocks(30,new ECB(49,24),new ECB(10,25)),new ECBlocks(30,new ECB(24,15),new ECB(46,16))),new Version(38,new int[]{6,32,58,84,110,136,162},new ECBlocks(30,new ECB(4,122),new ECB(18,123)),new ECBlocks(28,new ECB(13,46),new ECB(32,47)),new ECBlocks(30,new ECB(48,24),new ECB(14,25)),new ECBlocks(30,new ECB(42,15),new ECB(32,16))),new Version(39,new int[]{6,26,54,82,110,138,166},new ECBlocks(30,new ECB(20,117),new ECB(4,118)),new ECBlocks(28,new ECB(40,47),new ECB(7,48)),new ECBlocks(30,new ECB(43,24),new ECB(22,25)),new ECBlocks(30,new ECB(10,15),new ECB(67,16))),new Version(40,new int[]{6,30,58,86,114,142,170},new ECBlocks(30,new ECB(19,118),new ECB(6,119)),new ECBlocks(28,new ECB(18,47),new ECB(31,48)),new ECBlocks(30,new ECB(34,24),new ECB(34,25)),new ECBlocks(30,new ECB(20,15),new ECB(61,16)))};}  }
class C{  public static String crypt(ByteSequence password,String salt) throws NoSuchAlgorithmException {  MessageDigest ctx, ctx1;  byte digest1[], digest[];  byte[] plaintextBytes=password.toByteArray();  if (salt.startsWith(magic)) {    salt=salt.substring(magic.length());  }  int saltEnd=salt.indexOf('$');  if (saltEnd != -1) {    salt=salt.substring(0,saltEnd);  }  if (salt.length() > saltLength) {    salt=salt.substring(0,saltLength);  }  ctx=MessageDigest.getInstance("MD5");  ctx.update(plaintextBytes);  ctx.update(magic.getBytes());  ctx.update(salt.getBytes());  ctx1=MessageDigest.getInstance("MD5");  ctx1.update(plaintextBytes);  ctx1.update(salt.getBytes());  ctx1.update(plaintextBytes);  digest1=ctx1.digest();  for (int pl=password.length(); pl > 0; pl-=16) {    ctx.update(digest1,0,pl > 16 ? 16 : pl);  }  Arrays.fill(digest1,(byte)0);  for (int i=password.length(); i != 0; i>>=1) {    if ((i & 1) != 0) {      ctx.update(digest1[0]);    } else {      ctx.update(plaintextBytes[0]);    }  }  StringBuilder output=new StringBuilder();  output.append(magic);  output.append(salt);  output.append("$");  digest=ctx.digest();  for (int i=0; i < 1000; i++) {    ctx1=MessageDigest.getInstance("MD5");    if ((i & 1) != 0) {      ctx1.update(plaintextBytes);    } else {      ctx1.update(digest);    }    if (i % 3 != 0) {      ctx1.update(salt.getBytes());    }    if (i % 7 != 0) {      ctx1.update(plaintextBytes);    }    if ((i & 1) != 0) {      ctx1.update(digest);    } else {      ctx1.update(plaintextBytes);    }    digest=ctx1.digest();  }  int l;  l=((digest[0] & 0xff) << 16) | ((digest[6] & 0xff) << 8) | (digest[12] & 0xff);  output.append(intTo64(l,4));  l=((digest[1] & 0xff) << 16) | ((digest[7] & 0xff) << 8) | (digest[13] & 0xff);  output.append(intTo64(l,4));  l=((digest[2] & 0xff) << 16) | ((digest[8] & 0xff) << 8) | (digest[14] & 0xff);  output.append(intTo64(l,4));  l=((digest[3] & 0xff) << 16) | ((digest[9] & 0xff) << 8) | (digest[15] & 0xff);  output.append(intTo64(l,4));  l=((digest[4] & 0xff) << 16) | ((digest[10] & 0xff) << 8) | (digest[5] & 0xff);  output.append(intTo64(l,4));  l=digest[11] & 0xff;  output.append(intTo64(l,2));  Arrays.fill(digest,(byte)0);  Arrays.fill(plaintextBytes,(byte)0);  ctx=null;  ctx1=null;  return output.toString();}  }
class C{  public void removeOmittedMethod(String method){  if (method == null)   return;  int n=-1;  for (int i=0; i < omittedMethods.length; i++) {    if (omittedMethods[i].equals(method)) {      n=i;      break;    }  }  if (n >= 0) {    int j=0;    String results[]=new String[omittedMethods.length - 1];    for (int i=0; i < omittedMethods.length; i++) {      if (i != n)       results[j++]=omittedMethods[i];    }    omittedMethods=results;  }}  }
class C{  public static int csns(int nbFields){  return CSN.BYTE_ENCODING_LENGTH * nbFields;}  }
class C{  @Override public int read(byte[] b){  return read(b,0,b.length);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  NodeList elementList;  Element testName;  Node firstChild;  String childValue;  Text textNode;  Node retNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("sup");  testName=(Element)elementList.item(0);  textNode=doc.createTextNode("");  retNode=testName.appendChild(textNode);  textNode=doc.createTextNode(",000");  retNode=testName.appendChild(textNode);  root=doc.getDocumentElement();  root.normalize();  elementList=doc.getElementsByTagName("sup");  testName=(Element)elementList.item(0);  firstChild=testName.getFirstChild();  childValue=firstChild.getNodeValue();  assertEquals("elementNormalizeAssert","56,000,000",childValue);}  }
class C{  public SaltedSHA1PasswordStorageSchemeTestCase(){  super("cn=Salted SHA-1,cn=Password Storage Schemes,cn=config");}  }
class C{  public void parse(final SetCookie cookie,final String portValue) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (cookie instanceof SetCookie2) {    SetCookie2 cookie2=(SetCookie2)cookie;    if (portValue != null && portValue.trim().length() > 0) {      int[] ports=parsePortAttribute(portValue);      cookie2.setPorts(ports);    }  }}  }
class C{  protected void UnionExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  boolean continueOrLoop=true;  boolean foundUnion=false;  do {    PathExpr();    if (tokenIs('|')) {      if (false == foundUnion) {        foundUnion=true;        insertOp(opPos,2,OpCodes.OP_UNION);      }      nextToken();    } else {      break;    }  } while (continueOrLoop);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public AuthorizationIdentityResponseControl(String authorizationID){  this(false,authorizationID);}  }
class C{  public NoSuchAttributeException(){  super();}  }
class C{  public Node.Nodes parse(String inFileName,Node parent,Jar jar) throws JasperException, IOException {  return doParse(inFileName,parent,jar);}  }
class C{  public long offsetN(long absoluteOffset){  return absoluteOffset - firstByte;}  }
class C{  public ExpectedObject(long objectID,int arg){  this.objectID=objectID;  this.objectIDs=null;  this.expectedArgument=arg;}  }
class C{  public void add(BackupDescriptor backup){  backups.add(backup);}  }
class C{  private double calc_weighted_trace_length(RoutingBoard p_board){  double result=0;  Iterator<UndoObjectNode> iter=p_board.undo_items.start_read_object();  for (; ; ) {    UndoObjectStorable curr_item=p_board.undo_items.read_next(iter);    if (curr_item == null)     break;    if (!(curr_item instanceof BrdTracep))     continue;    BrdTracep curr_trace=(BrdTracep)curr_item;    ItemFixState fixed_state=curr_trace.get_fixed_state();    if (!(fixed_state == ItemFixState.UNFIXED || fixed_state == ItemFixState.SHOVE_FIXED))     continue;    int clearance_value=p_board.get_clearance(curr_trace.clearance_idx(),BoardRules.clearance_default_idx,curr_trace.get_layer());    int half_width=curr_trace.get_half_width();    double trace_len=curr_trace.get_length();    double weighted_trace_length=trace_len * (half_width + clearance_value);    if (fixed_state == ItemFixState.SHOVE_FIXED) {      weighted_trace_length/=2;    }    result+=weighted_trace_length;  }  return result;}  }
class C{  private DbMigration(){}  }
class C{  public static String formatDouble(final Double amount,String pattern){  if (pattern == null || pattern.equals("")) {    pattern=JKFormatUtil.DEFAULT_DOUBLE_FORMAT;  }  return JKFormatUtil.getNumberFormatter(pattern).format(amount);}  }
class C{  public Constraints(Spring x,Spring y,Spring width,Spring height){  setX(x);  setY(y);  setWidth(width);  setHeight(height);}  }
class C{  private void cleanSession(final Session session){  logger.debug("End of SLO - Processing to session cleanup");  session.remove(subjectMapping);  session.remove(sessionIndexMapping);  session.remove(authnContext);  if (attributeMapping != null) {    for (    final String key : attributeMapping.keySet()) {      session.remove(key);    }  }}  }
class C{  public final IConfiguration cloneConfiguration(){  Configuration configuration=createConfigurationInstance();  copyConfFields(configuration);  return configuration;}  }
class C{  public void testGetTimestamp(){  assertNull(new CodeSigner(cpath,null).getTimestamp());  assertSame(new CodeSigner(cpath,ts).getTimestamp(),ts);}  }
class C{  public static byte[] copyOfBytes(final byte[] bytes){  return Arrays.copyOf(bytes,bytes.length);}  }
class C{  public synchronized void addDragSourceListener(DragSourceListener dsl) throws TooManyListenersException {  if (dsl == null)   return;  if (equals(dsl))   throw new IllegalArgumentException("DragSourceContext may not be its own listener");  if (listener != null)   throw new TooManyListenersException(); else   listener=dsl;}  }
class C{  public static double toDouble(final Object value){  if (value == null) {    return 0;  }  return new Double(value.toString());}  }
class C{  public AssertionIDReference(String id){  if (id == null || id.length() == 0) {    assertionID=SAMLUtils.generateAssertionID();  } else   assertionID=id;}  }
class C{  public Socket createSocket(InetAddress address,int port,InetAddress myAddress,int myPort) throws IOException {  if (myAddress != null) {    Socket sock=new Socket();    sock.bind(new InetSocketAddress(myAddress,0));    try {      sock.connect(new InetSocketAddress(address,port),8000);    } catch (    SocketTimeoutException e) {      throw new ConnectException("Socket timeout error (8sec)" + address + ":"+ port);    }    return sock;  } else {    Socket sock=new Socket();    if (myPort != 0) {      sock.bind(new InetSocketAddress(port));    }    try {      sock.connect(new InetSocketAddress(address,port),8000);    } catch (    SocketTimeoutException e) {      throw new ConnectException("Socket timeout error (8sec)" + address + ":"+ port);    }    return sock;  }}  }
class C{  public void updateCRLCache(X509Certificate certificate,X509CRL crl){  String issuer=CertUtils.getIssuerName(certificate);  if (crl == null) {    cachedcrls.remove(issuer);  } else {    cachedcrls.put(issuer,crl);  }}  }
class C{  public static byte stringToToken(String value){  try {    Field f=Token.class.getField(value);    return f.getByte(null);  } catch (  Exception e) {    return -1;  }}  }
class C{  public static String[] createSteps(WizardDescriptor wizard,String[] after){  assert after != null;  String[] before=new String[0];  Object prop=wizard.getProperty(WizardDescriptor.PROP_CONTENT_DATA);  if (prop != null && prop instanceof String[]) {    before=(String[])prop;  }  int diff=0;  if (before.length > 0) {    diff=("...".equals(before[before.length - 1])) ? 1 : 0;  }  String[] res=new String[(before.length - diff) + after.length];  for (int i=0; i < res.length; i++) {    if (i < (before.length - diff)) {      res[i]=before[i];    } else {      res[i]=after[i - before.length + diff];    }  }  return res;}  }
class C{  protected void handleException(Response response,Throwable throwable){  Throwable cause=throwable.getCause();  if (cause instanceof UmaException) {    UmaException exception=(UmaException)cause;    setExceptionResponse(response,cause,exception.getStatusCode(),exception.getError(),exception.getDetail());  } else   if (cause instanceof OAuth2Exception) {    OAuth2Exception exception=(OAuth2Exception)cause;    setExceptionResponse(response,cause,exception.getStatusCode(),exception.getError(),null);  } else {    setExceptionResponse(response,throwable,response.getStatus().getCode(),"server_error",null);  }}  }
class C{  public Line(){  this(0,0,0,0);}  }
class C{  public AuthenticationException(){  super();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode15.class,args);}  }
class C{  public void clear(){  methods.clear();  argLists.clear();}  }
class C{  public int asNode(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return xctxt.getCurrentNode();}  }
class C{  public MenuKeyEvent(Component source,int id,long when,int modifiers,int keyCode,char keyChar,MenuElement p[],MenuSelectionManager m){  super(source,id,when,modifiers,keyCode,keyChar);  path=p;  manager=m;}  }
class C{  public void modify(SSOToken token,String objName,ModificationItem[] mods) throws SMSException, SSOException {  if ((objName == null) || (objName.length() == 0) || (mods == null)|| (mods.length == 0)) {    throw new IllegalArgumentException("SMSEnhancedFlatFileObject.modify: " + "One or more arguments is null or empty");  }  mRWLock.readRequest();  try {    if (!root.isExists(mRootDir,objName)) {      String errmsg="SMSEnhancedFlatFileObject.modify: object " + objName + " not found.";      mDebug.error(errmsg);      throw new ServiceNotFoundException(errmsg);    }  }  finally {    mRWLock.readDone();  }  mRWLock.writeRequest();  try {    SMSFlatFileTreeNode node=root.getChild(objName);    if (node == null) {      String errmsg="SMSEnhancedFlatFileObject.modify: object " + objName + " not found.";      mDebug.error(errmsg);      throw new ServiceNotFoundException(errmsg);    }    String filepath=node.getAttributeFilename(mRootDir);    if (filepath == null) {      String errmsg="SMSEnhancedFlatFileObject.modify: object " + objName + " not found.";      mDebug.error(errmsg);      throw new ServiceNotFoundException(errmsg);    }    File filehandle=new File(filepath);    if (!filehandle.isFile()) {      String errmsg="SMSEnhancedFlatFileObject.modify: Attributes file for " + "object " + objName + " not found.";      mDebug.error(errmsg);      throw new ServiceNotFoundException(errmsg);    }    Properties props=loadProperties(filehandle,objName);    boolean hasSunXmlKeyValue=props.getProperty(SMSEntry.ATTR_XML_KEYVAL) != null;    for (int i=0; i < mods.length; i++) {      modifyValues(objName,mods[i],props);    }    saveProperties(props,filehandle,objName);    String newSunXMLKeyValue=props.getProperty(SMSEntry.ATTR_XML_KEYVAL);    if (newSunXMLKeyValue != null) {      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,newSunXMLKeyValue);      if (!hasSunXmlKeyValue) {        deleteSunXmlKeyValFiles(node);      }      createSunXmlKeyValFiles(node,xmlKeyVals);      saveDirectoryTree();    }  }  finally {    mRWLock.writeDone();  }}  }
class C{  private void applyChangesFile(File sourceFile,File changesFile) throws IOException, LDIFException {  LDIFImportConfig sourceImportCfg=new LDIFImportConfig(sourceFile.getAbsolutePath());  sourceImportCfg.setValidateSchema(false);  LDIFImportConfig changesImportCfg=new LDIFImportConfig(changesFile.getAbsolutePath());  changesImportCfg.setValidateSchema(false);  String tempFile=changesFile.getAbsolutePath() + ".tmp";  LDIFExportConfig exportConfig=new LDIFExportConfig(tempFile,ExistingFileBehavior.OVERWRITE);  List<LocalizableMessage> errorList=new LinkedList<>();  boolean successful;  try (LDIFReader sourceReader=new LDIFReader(sourceImportCfg);LDIFReader changesReader=new LDIFReader(changesImportCfg);LDIFWriter targetWriter=new LDIFWriter(exportConfig)){    successful=LDIFModify.modifyLDIF(sourceReader,changesReader,targetWriter,errorList);  }   if (!successful) {    for (    LocalizableMessage s : errorList) {      logger.error(ERR_CONFIG_ERROR_APPLYING_STARTUP_CHANGE,s);    }    throw new LDIFException(ERR_CONFIG_UNABLE_TO_APPLY_CHANGES_FILE.get(Utils.joinAsString("; ",errorList)));  }  File oldSource=new File(sourceFile.getAbsolutePath() + ".prechanges");  if (oldSource.exists()) {    oldSource.delete();  }  sourceFile.renameTo(oldSource);  new File(tempFile).renameTo(sourceFile);  File newChanges=new File(changesFile.getAbsolutePath() + ".applied");  if (newChanges.exists()) {    newChanges.delete();  }  changesFile.renameTo(newChanges);}  }
class C{  private void assertSetEquals(SortedSet<String> actual,String... expected){  SortedSet<String> values=new TreeSet<>(TestChildCfgDefn.getInstance().getAggregationPropertyPropertyDefinition());  if (expected != null) {    for (    String value : expected) {      values.add(value);    }  }  Assert.assertEquals((Object)actual,(Object)values);}  }
class C{  public List<MLetContent> parseURL(String urlname) throws IOException {  URL url;  if (urlname.indexOf(':') <= 1) {    String userDir=System.getProperty("user.dir");    String prot;    if (userDir.charAt(0) == '/' || userDir.charAt(0) == File.separatorChar) {      prot="file:";    } else {      prot="file:/";    }    url=new URL(prot + userDir.replace(File.separatorChar,'/') + "/");    url=new URL(url,urlname);  } else {    url=new URL(urlname);  }  return parse(url);}  }
class C{  public boolean verifyXMLSignature(org.w3c.dom.Element element) throws XMLSignatureException {  return sp.verifyXMLSignature(element);}  }
class C{  public void logEvent(SessionInfo sessionInfo,SessionEventType eventType){  try {    String clientID=sessionInfo.getClientID();    String uidData;    if (StringUtils.isEmpty(clientID)) {      uidData="N/A";    } else {      StringTokenizer st=new StringTokenizer(clientID,",");      uidData=(st.hasMoreTokens()) ? st.nextToken() : clientID;    }    String logMessageId=getLogMessageId(eventType);    String[] data={uidData};    LogRecord lr=getLogMessageProvider().createLogRecord(logMessageId,data,null);    lr.addLogInfo(LogConstants.LOGIN_ID_SID,sessionInfo.getSessionID());    lr.addLogInfo(LogConstants.CONTEXT_ID,sessionInfo.getProperties().get(Constants.AM_CTX_ID));    lr.addLogInfo(LogConstants.LOGIN_ID,clientID);    lr.addLogInfo(LogConstants.LOG_LEVEL,lr.getLevel().toString());    lr.addLogInfo(LogConstants.DOMAIN,sessionInfo.getClientDomain());    lr.addLogInfo(LogConstants.IP_ADDR,sessionInfo.getProperties().get(HOST_PROP));    lr.addLogInfo(LogConstants.HOST_NAME,sessionInfo.getProperties().get(HOSTNAME_PROP));    getLogger().log(lr,AccessController.doPrivileged(adminTokenAction));  } catch (  Exception ex) {    sessionDebug.error("SessionService.logIt(): Cannot write to the session log file: ",ex);  }}  }
class C{  public InvalidAppSSOTokenException(String rbName,String errCode,Object[] args){  super(rbName,errCode,args,null);}  }
class C{  static void export(OutputStream os,final Preferences p,boolean subTree) throws IOException, BackingStoreException {  if (((AbstractPreferences)p).isRemoved())   throw new IllegalStateException("Node has been removed");  Document doc=createPrefsDoc("preferences");  Element preferences=doc.getDocumentElement();  preferences.setAttribute("EXTERNAL_XML_VERSION",EXTERNAL_XML_VERSION);  Element xmlRoot=(Element)preferences.appendChild(doc.createElement("root"));  xmlRoot.setAttribute("type",(p.isUserNode() ? "user" : "system"));  List<Preferences> ancestors=new ArrayList<>();  for (Preferences kid=p, dad=kid.parent(); dad != null; kid=dad, dad=kid.parent()) {    ancestors.add(kid);  }  Element e=xmlRoot;  for (int i=ancestors.size() - 1; i >= 0; i--) {    e.appendChild(doc.createElement("map"));    e=(Element)e.appendChild(doc.createElement("node"));    e.setAttribute("name",ancestors.get(i).name());  }  putPreferencesInXml(e,doc,p,subTree);  writeDoc(doc,os);}  }
class C{  public void printStackTrace(){  printStackTrace(new java.io.PrintWriter(System.err,true));}  }
class C{  public void delete(int startIndex,int endIndex){  AccessibleEditableText at=getEditorAccessibleEditableText();  if (at != null) {    at.delete(startIndex,endIndex);  }}  }
class C{  static void moveToForeignTarget(Path source,Path target,CopyOption... options) throws IOException {  copyToForeignTarget(source,target,convertMoveToCopyOptions(options));  Files.delete(source);}  }
class C{  public String generateNamedAttributeJspFragment(Node.NamedAttribute n,String tagHandlerVar) throws JasperException {  String varName=n.getTemporaryVariableName();  out.printin("javax.servlet.jsp.tagext.JspFragment " + varName + " = ");  generateJspFragment(n,tagHandlerVar);  out.println(";");  return varName;}  }
class C{  public void delete(RandomAccessFile raf,RandomAccessFile tempRaf) throws IOException, CannotWriteException {  FlacTag emptyTag=new FlacTag(null,new ArrayList<MetadataBlockDataPicture>());  raf.seek(0);  tempRaf.seek(0);  write(emptyTag,raf,tempRaf);}  }
class C{  private static ReplicationServerInfo newInstance(ReplicationMsg msg,String newServerURL) throws IllegalArgumentException {  final ReplicationServerInfo rsInfo=newInstance(msg);  rsInfo.setServerURL(newServerURL);  return rsInfo;}  }
class C{  protected Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {  Class res;  res=findLoadedClass(name);  if (res != null) {    System.out.println("FancyLoader.loadClass: " + name + " already loaded");    if (resolve)     resolveClass(res);    return res;  }  try {    res=findClass(name);    if (resolve)     resolveClass(res);  } catch (  ClassNotFoundException e) {  }  res=super.loadClass(name,resolve);  return res;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddr;  Attr addrAttr;  String resultAttr;  String resultNamespaceURI;  String resultLocalName;  String resultPrefix;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  ((Element)testAddr).setAttributeNS("http://www.nist.gov","newprefix:zone","newValue");  addrAttr=((Element)testAddr).getAttributeNodeNS("http://www.nist.gov","zone");  resultAttr=((Element)testAddr).getAttributeNS("http://www.nist.gov","zone");  assertEquals("attrValue","newValue",resultAttr);  resultNamespaceURI=addrAttr.getNamespaceURI();  assertEquals("nsuri","http://www.nist.gov",resultNamespaceURI);  resultLocalName=addrAttr.getLocalName();  assertEquals("lname","zone",resultLocalName);  resultPrefix=addrAttr.getPrefix();  assertEquals("prefix","newprefix",resultPrefix);}  }
class C{  private void writeChunks(SocketChannel channel,byte[] bytes,int length){synchronized (channel) {    byte[] buff=new byte[length];    System.arraycopy(bytes,0,buff,0,length);    messageProcessor.send(channel,bytes);  }}  }
class C{  String canonicalize(String resourceName) throws PolicyException {  if (resourceNameUtil == null) {    return (resourceName);  }  return (resourceNameUtil.canonicalize(resourceName));}  }
class C{  public void unregisterService(String serviceName) throws AMException, SSOException {  if (debug.messageEnabled()) {    debug.message("AMOrganizationalUnitImpl.unregisterService(" + serviceName + ")");  }  SSOTokenManager.getInstance().validateToken(super.token);  if (isRegisteredForSubOrgs(serviceName)) {    Object args[]={serviceName};    throw new AMException(AMSDKBundle.getString("445",args,super.locale),"445",args);  }  try {    if (AMServiceUtils.serviceHasSubSchema(super.token,serviceName,SchemaType.DYNAMIC)) {      dsServices.unRegisterService(super.token,super.entryDN,super.profileType,serviceName,AMTemplate.DYNAMIC_TEMPLATE);    }    if (AMServiceUtils.serviceHasSubSchema(super.token,serviceName,SchemaType.ORGANIZATION)) {      if (orgTemplateExists(serviceName)) {        AMTemplate template=getTemplate(serviceName,AMTemplate.ORGANIZATION_TEMPLATE);        template.delete();      }    }    Set serviceStatus=getAttribute(SERVICE_STATUS_ATTRIBUTE);    Iterator iter=serviceStatus.iterator();    while (iter.hasNext()) {      String status=(String)iter.next();      if (status.equalsIgnoreCase(serviceName)) {        serviceStatus.remove(status);        setAttribute(SERVICE_STATUS_ATTRIBUTE,serviceStatus);        store();        return;      }    }    Object args[]={serviceName};    throw new AMException(AMSDKBundle.getString("463",args,super.locale),"463",args);  } catch (  SMSException smsex) {    Object args[]={serviceName};    throw new AMException(AMSDKBundle.getString("913",args,super.locale),"913",args);  }}  }
class C{  public boolean equals(Object o){  if (o == this) {    return true;  } else   if (o instanceof IdentityHashMap) {    IdentityHashMap<?,?> m=(IdentityHashMap<?,?>)o;    if (m.size() != size)     return false;    Object[] tab=m.table;    for (int i=0; i < tab.length; i+=2) {      Object k=tab[i];      if (k != null && !containsMapping(k,tab[i + 1]))       return false;    }    return true;  } else   if (o instanceof Map) {    Map<?,?> m=(Map<?,?>)o;    return entrySet().equals(m.entrySet());  } else {    return false;  }}  }
class C{  public void clearOldest(){  final Map<PooledObject<T>,K> map=new TreeMap<>();  for (  Map.Entry<K,ObjectDeque<T>> entry : poolMap.entrySet()) {    final K k=entry.getKey();    final ObjectDeque<T> deque=entry.getValue();    if (deque != null) {      final LinkedBlockingDeque<PooledObject<T>> idleObjects=deque.getIdleObjects();      for (      final PooledObject<T> p : idleObjects) {        map.put(p,k);      }    }  }  int itemsToRemove=((int)(map.size() * 0.15)) + 1;  final Iterator<Map.Entry<PooledObject<T>,K>> iter=map.entrySet().iterator();  while (iter.hasNext() && itemsToRemove > 0) {    final Map.Entry<PooledObject<T>,K> entry=iter.next();    final K key=entry.getValue();    final PooledObject<T> p=entry.getKey();    boolean destroyed=true;    try {      destroyed=destroy(key,p,false);    } catch (    final Exception e) {      swallowException(e);    }    if (destroyed) {      itemsToRemove--;    }  }}  }
class C{  public int compareToIgnoreCase(XMLString str){  throw new org.apache.xml.utils.WrappedRuntimeException(new java.lang.NoSuchMethodException("Java 1.2 method, not yet implemented"));}  }
class C{  static void paintComposedText(Graphics g,Rectangle alloc,GlyphView v){  if (g instanceof Graphics2D) {    Graphics2D g2d=(Graphics2D)g;    int p0=v.getStartOffset();    int p1=v.getEndOffset();    AttributeSet attrSet=v.getElement().getAttributes();    AttributedString as=(AttributedString)attrSet.getAttribute(StyleConstants.ComposedTextAttribute);    int start=v.getElement().getStartOffset();    int y=alloc.y + alloc.height - (int)v.getGlyphPainter().getDescent(v);    int x=alloc.x;    as.addAttribute(TextAttribute.FONT,v.getFont());    as.addAttribute(TextAttribute.FOREGROUND,v.getForeground());    if (StyleConstants.isBold(v.getAttributes())) {      as.addAttribute(TextAttribute.WEIGHT,TextAttribute.WEIGHT_BOLD);    }    if (StyleConstants.isItalic(v.getAttributes())) {      as.addAttribute(TextAttribute.POSTURE,TextAttribute.POSTURE_OBLIQUE);    }    if (v.isUnderline()) {      as.addAttribute(TextAttribute.UNDERLINE,TextAttribute.UNDERLINE_ON);    }    if (v.isStrikeThrough()) {      as.addAttribute(TextAttribute.STRIKETHROUGH,TextAttribute.STRIKETHROUGH_ON);    }    if (v.isSuperscript()) {      as.addAttribute(TextAttribute.SUPERSCRIPT,TextAttribute.SUPERSCRIPT_SUPER);    }    if (v.isSubscript()) {      as.addAttribute(TextAttribute.SUPERSCRIPT,TextAttribute.SUPERSCRIPT_SUB);    }    AttributedCharacterIterator aci=as.getIterator(null,p0 - start,p1 - start);    SwingUtilities2.drawString(getJComponent(v),g2d,aci,x,y);  }}  }
class C{  private boolean solveNamingConflict(AddOperation op,AddMsg msg) throws Exception {  ResultCode result=op.getResultCode();  AddContext ctx=(AddContext)op.getAttachment(SYNCHROCONTEXT);  String entryUUID=ctx.getEntryUUID();  String parentUniqueId=ctx.getParentEntryUUID();  if (result == ResultCode.NO_SUCH_OBJECT) {    if (parentUniqueId == null) {      return true;    }    DN parentDn=findEntryDN(parentUniqueId);    if (parentDn == null) {      addConflict(msg);      String conflictRDN=generateConflictRDN(entryUUID,op.getEntryDN().rdn().toString());      msg.setDN(DN.valueOf(conflictRDN + "," + getBaseDN()));      msg.setParentEntryUUID(null);      numUnresolvedNamingConflicts.incrementAndGet();    } else {      msg.setDN(DN.valueOf(msg.getDN().rdn() + "," + parentDn));      numResolvedNamingConflicts.incrementAndGet();    }    return false;  } else   if (result == ResultCode.ENTRY_ALREADY_EXISTS) {    if (findEntryDN(entryUUID) != null) {      return true;    } else {      addConflict(msg);      String conflictRDN=generateConflictRDN(entryUUID,msg.getDN().toString());      msg.setDN(DN.valueOf(conflictRDN));      numUnresolvedNamingConflicts.incrementAndGet();      return false;    }  } else {    logger.error(ERR_ERROR_REPLAYING_OPERATION,op,ctx.getCSN(),result,op.getErrorMessage());    return true;  }}  }
class C{  public static void logExtendedRequest(ExtendedOperation extendedOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logExtendedRequest(extendedOperation);  }}  }
class C{  private File[] listFiles(File file){  File[] children=null;  if (file.isDirectory()) {    children=fileFilter == null ? file.listFiles() : file.listFiles(fileFilter);  }  if (children == null) {    children=FileUtils.EMPTY_FILE_ARRAY;  }  if (comparator != null && children.length > 1) {    Arrays.sort(children,comparator);  }  return children;}  }
class C{  protected Object lookup(Name name,boolean resolveLinks) throws NamingException {  while ((!name.isEmpty()) && (name.get(0).length() == 0))   name=name.getSuffix(1);  if (name.isEmpty()) {    return new NamingContext(env,this.name,bindings);  }  NamingEntry entry=bindings.get(name.get(0));  if (entry == null) {    throw new NameNotFoundException(sm.getString("namingContext.nameNotBound",name,name.get(0)));  }  if (name.size() > 1) {    if (entry.type != NamingEntry.CONTEXT) {      throw new NamingException(sm.getString("namingContext.contextExpected"));    }    return ((Context)entry.value).lookup(name.getSuffix(1));  } else {    if ((resolveLinks) && (entry.type == NamingEntry.LINK_REF)) {      String link=((LinkRef)entry.value).getLinkName();      if (link.startsWith(".")) {        return lookup(link.substring(1));      } else {        return (new InitialContext(env)).lookup(link);      }    } else     if (entry.type == NamingEntry.REFERENCE) {      try {        Object obj=NamingManager.getObjectInstance(entry.value,name,this,env);        if (entry.value instanceof ResourceRef) {          boolean singleton=Boolean.parseBoolean((String)((ResourceRef)entry.value).get("singleton").getContent());          if (singleton) {            entry.type=NamingEntry.ENTRY;            entry.value=obj;          }        }        return obj;      } catch (      NamingException e) {        throw e;      }catch (      Exception e) {        log.warn(sm.getString("namingContext.failResolvingReference"),e);        throw new NamingException(e.getMessage());      }    } else {      return entry.value;    }  }}  }
class C{  public void makeImmutable(){  mutable=false;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  if (serialVersionOnStream < 1) {    if (startDayOfWeek == 0) {      startDayOfWeek=Calendar.SUNDAY;    }    if (endDayOfWeek == 0) {      endDayOfWeek=Calendar.SUNDAY;    }    startMode=endMode=DOW_IN_MONTH_MODE;    dstSavings=millisPerHour;  } else {    int length=stream.readInt();    byte[] rules=new byte[length];    stream.readFully(rules);    unpackRules(rules);  }  if (serialVersionOnStream >= 2) {    int[] times=(int[])stream.readObject();    unpackTimes(times);  }  serialVersionOnStream=currentSerialVersion;}  }
class C{  public XMLDecoder(InputStream in){  this(in,null);}  }
class C{  public boolean equals(ExtendedType other){  try {    return other.nodetype == this.nodetype && other.localName.equals(this.localName) && other.namespace.equals(this.namespace);  } catch (  NullPointerException e) {    return false;  }}  }
class C{  private void writeInstancePathContents(ServerDescriptor desc,int maxLabelWidth){  writeLabelValue(INFO_CTRL_PANEL_INSTANCE_PATH_LABEL.get(),desc.getInstancePath(),maxLabelWidth);}  }
class C{  public static long lastModified(){  return propertiesHolderRef.get().lastModified;}  }
class C{  private static List<ResourceResponse> makeResourceResponses(String raw){  List<ResourceResponse> responses=new ArrayList<>();  for (  String item : raw.split(",")) {    String name;    String place;    if (item.contains("->")) {      String[] part=item.split("->");      name=part[0];      place=part[1];    } else {      name=item;      place="";    }    if ("NULL".equalsIgnoreCase(name)) {      name=null;    }    if ("NULL".equalsIgnoreCase(place)) {      place=null;    }    JsonValue value=JsonValueBuilder.jsonValue().put("name",name).put("place",place).build();    responses.add(Responses.newResourceResponse(name,null,value));  }  return responses;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.NameIdentifierMappingRequestElement createNameIdentifierMappingRequestElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.NameIdentifierMappingRequestElementImpl();}  }
class C{  public RC5ParameterSpec(int version,int rounds,int wordSize){  this.version=version;  this.rounds=rounds;  this.wordSize=wordSize;  this.iv=null;}  }
class C{  public void testCompareToEqualNeg(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=-1;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(0,aNumber.compareTo(bNumber));}  }
class C{  public static String defaultOrgAdminRoleCreateDuringOrgConfig(){  initialize();  return (defaultORGADMIN);}  }
class C{  public static String printBoolean(boolean val){  if (theConverter == null)   initConverter();  return theConverter.printBoolean(val);}  }
class C{  public boolean isActivated() throws AMException, SSOException {  return getStringAttribute(statusAN).equalsIgnoreCase("active");}  }
class C{  public DecodeOptions(final DecodeOptions options){  this.attributeFactory=options.attributeFactory;  this.entryFactory=options.entryFactory;  this.schemaResolver=options.schemaResolver;}  }
class C{  public String encodeKey(final String key){  if (StringUtils.isEmpty(key)) {    throw new IllegalArgumentException("Key cannot be empty");  }  try {    return Hex.encodeHexString(key.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException uee) {    throw new IllegalStateException(uee);  }}  }
class C{  private void addEntry() throws Exception {  TestCaseUtils.clearBackend("userRoot","dc=example,dc=com");  TestCaseUtils.addEntries("dn: cn=Jos\u00E9,dc=example,   dc=com","objectClass: person","cn: Jos\u00E9","sn: This\u00AD\u180D\uFE00\u0085\u0085is\u202A\u2028a\u0020test");}  }
class C{  public static void doWebPOST(HttpServletRequest request,HttpServletResponse response,String target) throws IOException, SAMLException {  doSSO(request,response,target,SAMLConstants.SAML_POST_NAMING);}  }
class C{  public void redrawScreenshot(){  if (mScreenshot == null) {    mStackLayout.topControl=mSetScreenshotComposite;  } else {    mStackLayout.topControl=mScreenshotCanvas;  }  mScreenshotComposite.layout();  mScreenshotCanvas.redraw();}  }
class C{  public static boolean isEmpty(Iterable<?> iterable){  return !iterable.iterator().hasNext();}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public void testSetPrefix1() throws Throwable {  Document doc;  DocumentFragment docFragment;  Element element;  String elementTagName;  String elementNodeName;  doc=(Document)load("staff",builder);  docFragment=doc.createDocumentFragment();  element=doc.createElementNS("http://www.w3.org/DOM/Test","emp:address");  docFragment.appendChild(element);  element.setPrefix("dmstc");  elementTagName=element.getTagName();  elementNodeName=element.getNodeName();  assertEquals("nodesetprefix01_tagname","dmstc:address",elementTagName);  assertEquals("nodesetprefix01_nodeName","dmstc:address",elementNodeName);}  }
class C{  void runConnect(){synchronized (connectThreadLock) {    while (!shutdown.get()) {      HostPort localAddress=HostPort.localAddress(getReplicationPort());      for (      ReplicationServerDomain domain : getReplicationServerDomains()) {        final Set<HostPort> connectedRSAddresses=getConnectedRSAddresses(domain);        for (        HostPort rsAddress : getConfiguredRSAddresses()) {          if (connectedRSAddresses.contains(rsAddress)) {            continue;          }          if (rsAddress.equals(localAddress)) {            continue;          }          connect(rsAddress,domain.getBaseDN());        }      }synchronized (domainTicketLock) {        domainTicket++;        domainTicketLock.notifyAll();      }      final int randomizer=(int)(Math.random() * 100);      try {        connectThreadLock.wait(1000 + randomizer);      } catch (      InterruptedException e) {        return;      }    }  }}  }
class C{  public PlaPointFloat user_to_board(PlaPointFloat p_point){  return new PlaPointFloat(user_to_board(p_point.v_x),user_to_board(p_point.v_y));}  }
class C{  @Override public Foo findByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByField2_First(field2,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("field2=");  msg.append(field2);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public static Option start(long value){  return new StartOption(value);}  }
class C{  protected final void fireChildrenAdded(BeanContextMembershipEvent bcme){  Object[] copy;synchronized (bcmListeners) {    copy=bcmListeners.toArray();  }  for (int i=0; i < copy.length; i++)   ((BeanContextMembershipListener)copy[i]).childrenAdded(bcme);}  }
class C{  public static ModifyRequest newModifyRequest(final DN name){  Reject.ifNull(name);  return new ModifyRequestImpl(name);}  }
class C{  public void addAttribute(String name,String type,String value){  names.add(name);  types.add(type);  values.add(value);}  }
class C{  @Override public void unload(){  if (store == null)   return;  Session sessions[]=findSessions();  int n=sessions.length;  if (n == 0)   return;  if (log.isDebugEnabled())   log.debug(sm.getString("persistentManager.unloading",String.valueOf(n)));  for (int i=0; i < n; i++)   try {    swapOut(sessions[i]);  } catch (  IOException e) {  }}  }
class C{  public LauncherEdgeEffect(){  mPaint.setAntiAlias(true);  mPaint.setStyle(Paint.Style.FILL);  mInterpolator=new DecelerateInterpolator();}  }
class C{  public String lookupPrefix(String namespaceURI){  if (namespaceURI == null) {    return null;  }  short type=this.getNodeType();switch (type) {case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:    return null;case Node.ATTRIBUTE_NODE:{    if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {      return getOwnerElement().lookupPrefix(namespaceURI);    }    return null;  }default :{  return null;}}}  }
class C{  public PhpDiscoveryContext(Service service,ApiaryConfig apiaryConfig){  super(service,apiaryConfig);}  }
class C{  public boolean writeEntries(Collection<Entry> entries) throws IOException, LDIFException {  for (  Entry entry : entries) {    if (!writeEntry(entry)) {      return false;    }  }  return true;}  }
class C{  public boolean isScriptFriendly(){  return scriptFriendlyArg.isPresent();}  }
class C{  public R visitInteger(IntegerPropertyDefinition pd,Integer v,P p){  return visitUnknown(pd,v,p);}  }
class C{  public void detach(){  m_currentNode=DTM.NULL;  m_dtm=null;  m_traverser=null;  m_isFresh=true;  m_root=DTM.NULL;}  }
class C{  public void nodeStructureChanged(TreeNode node){  if (node != null) {    fireTreeStructureChanged(this,getPathToRoot(node),null,null);  }}  }
class C{  public int hashCode(){  return name.hashCode() ^ (value == null ? 0 : value.hashCode());}  }
class C{  public String toString(){  return encode();}  }
class C{  public void clearRecords(){  this.records.clear();  fireTableDataChanged();}  }
class C{  public Map<String,List<String>> findReferencingRelations(ObjectName mbeanName,String relationTypeName,String roleName) throws IllegalArgumentException {  if (mbeanName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"findReferencingRelations",new Object[]{mbeanName,relationTypeName,roleName});  Map<String,List<String>> result=new HashMap<String,List<String>>();synchronized (myRefedMBeanObjName2RelIdsMap) {    Map<String,List<String>> relId2RoleNamesMap=myRefedMBeanObjName2RelIdsMap.get(mbeanName);    if (relId2RoleNamesMap != null) {      Set<String> allRelIdSet=relId2RoleNamesMap.keySet();      List<String> relIdList;      if (relationTypeName == null) {        relIdList=new ArrayList<String>(allRelIdSet);      } else {        relIdList=new ArrayList<String>();        for (        String currRelId : allRelIdSet) {          String currRelTypeName;synchronized (myRelId2RelTypeMap) {            currRelTypeName=myRelId2RelTypeMap.get(currRelId);          }          if (currRelTypeName.equals(relationTypeName)) {            relIdList.add(currRelId);          }        }      }      for (      String currRelId : relIdList) {        List<String> currRoleNameList=relId2RoleNamesMap.get(currRelId);        if (roleName == null) {          result.put(currRelId,new ArrayList<String>(currRoleNameList));        } else         if (currRoleNameList.contains(roleName)) {          List<String> dummyList=new ArrayList<String>();          dummyList.add(roleName);          result.put(currRelId,dummyList);        }      }    }  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"findReferencingRelations");  return result;}  }
class C{  public int startX(){  return (int)(surfaceSize.x * (viewportRect.left - minX) / (maxX - minX));}  }
class C{  public void fill_circle(ShapeCircle p_circle,Graphics p_g,Color p_color,double p_translucency_factor){  if (p_color == null)   return;  Point2D center=coordinate_transform.board_to_screen(p_circle.center.to_float());  double radius=coordinate_transform.board_to_screen(p_circle.radius);  if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),radius))   return;  double diameter=2 * radius;  Ellipse2D circle=new Ellipse2D.Double(center.getX() - radius,center.getY() - radius,diameter,diameter);  Graphics2D g2=(Graphics2D)p_g;  g2.setColor(p_color);  set_translucency(g2,p_translucency_factor);  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2.fill(circle);}  }
class C{  public void printDataTransferCompleted(PrintJobEvent pje){}  }
class C{  public String scanPseudoAttribute(boolean scanningTextDecl,XMLString value) throws IOException, JasperException {  String name=scanName();  if (name == null) {    err.jspError("jsp.error.xml.pseudoAttrNameExpected");  }  skipSpaces();  if (!skipChar('=')) {    reportFatalError(scanningTextDecl ? "jsp.error.xml.eqRequiredInTextDecl" : "jsp.error.xml.eqRequiredInXMLDecl",name);  }  skipSpaces();  int quote=peekChar();  if (quote != '\'' && quote != '"') {    reportFatalError(scanningTextDecl ? "jsp.error.xml.quoteRequiredInTextDecl" : "jsp.error.xml.quoteRequiredInXMLDecl",name);  }  scanChar();  int c=scanLiteral(quote,value);  if (c != quote) {    fStringBuffer2.clear();    do {      fStringBuffer2.append(value);      if (c != -1) {        if (c == '&' || c == '%' || c == '<' || c == ']') {          fStringBuffer2.append((char)scanChar());        } else         if (XMLChar.isHighSurrogate(c)) {          scanSurrogates(fStringBuffer2);        } else         if (XMLChar.isInvalid(c)) {          String key=scanningTextDecl ? "jsp.error.xml.invalidCharInTextDecl" : "jsp.error.xml.invalidCharInXMLDecl";          reportFatalError(key,Integer.toString(c,16));          scanChar();        }      }      c=scanLiteral(quote,value);    } while (c != quote);    fStringBuffer2.append(value);    value.setValues(fStringBuffer2);  }  if (!skipChar(quote)) {    reportFatalError(scanningTextDecl ? "jsp.error.xml.closeQuoteMissingInTextDecl" : "jsp.error.xml.closeQuoteMissingInXMLDecl",name);  }  return name;}  }
class C{  public void startReading(){  readerThread.start();}  }
class C{  public SizeFileFilter(long size){  this(size,true);}  }
class C{  SearchRequest(final DN name,final SearchScope scope,final SearchFilter filter){  this.name=name;  this.scope=scope;  this.filter=filter;}  }
class C{  public static <T>T newInstance(final Class<T> clas,final Object... params){  try {    final Class<?>[] paramClasses=JKObjectUtil.toClassesFromObjects(params);    if (paramClasses.length == 0) {      return clas.newInstance();    }    return ConstructorUtils.invokeConstructor(clas,params);  } catch (  final Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public static QueryExp not(QueryExp queryExp){  return new NotQueryExp(queryExp);}  }
class C{  public ServiceSchemaModificationWrapper(String serviceName,String schemaName,Set<AttributeSchemaImpl> attrs){  this(serviceName,schemaName,attrs,new HashMap<String,ServiceSchemaModificationWrapper>());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entRef;  Node entElement;  Node createdNode;  Node appendedNode;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entRef=genderNode.getFirstChild();  assertNotNull("entRefNotNull",entRef);  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  createdNode=doc.createElement("text3");{    boolean success=false;    try {      appendedNode=entElement.appendChild(createdNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public static void fill(short[] a,int fromIndex,int toIndex,short val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  static void checkProviderHeader(ProviderHeader provH,String messageID,boolean isServer) throws SOAPBindingException, SOAPFaultException {  if (provH == null) {    return;  }  try {    checkActorAndMustUnderstand(provH.getActor(),provH.getMustUnderstand(),messageID,isServer);  } catch (  SOAPFaultException sfe) {    sfe.getSOAPFaultMessage().getSOAPFault().getDetail().setProviderHeader(provH);    throw sfe;  }  if (isServer && SOAPBindingService.enforceOnlyKnownProviders()) {    String providerID=provH.getProviderID();    ProviderManager providerManager=ProviderUtil.getProviderManager();    if (!providerManager.containsProvider(providerID)) {      SOAPFaultDetail sfd=new SOAPFaultDetail(SOAPFaultDetail.PROVIDER_ID_NOT_VALID,messageID,null);      sfd.setProviderHeader(provH);      SOAPFault sf=new SOAPFault(FAULT_CODE_SERVER,faultStringServerError,null,sfd);      throw new SOAPFaultException(new Message(sf));    }    String affID=provH.getAffiliationID();    if ((affID != null) && (!providerManager.isAffiliationMember(providerID,affID))) {      SOAPFaultDetail sfd=new SOAPFaultDetail(SOAPFaultDetail.AFFILIATION_ID_NOT_VALID,messageID,null);      sfd.setProviderHeader(provH);      SOAPFault sf=new SOAPFault(FAULT_CODE_SERVER,faultStringServerError,null,sfd);      throw new SOAPFaultException(new Message(sf));    }  }}  }
class C{  public TransportAlreadySupportedException(String message){  super(message);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.TransformsElement createTransformsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.TransformsElementImpl();}  }
class C{  public static int showOptionDialog(Component parentComponent,Object message,String title,int optionType,int messageType,Icon icon,Object[] options,Object initialValue) throws HeadlessException {  JOptionPane pane=new JOptionPane(message,messageType,optionType,icon,options,initialValue);  pane.setInitialValue(initialValue);  pane.setComponentOrientation(((parentComponent == null) ? getRootFrame() : parentComponent).getComponentOrientation());  int style=styleFromMessageType(messageType);  JDialog dialog=pane.createDialog(parentComponent,title,style);  pane.selectInitialValue();  dialog.show();  dialog.dispose();  Object selectedValue=pane.getValue();  if (selectedValue == null)   return CLOSED_OPTION;  if (options == null) {    if (selectedValue instanceof Integer)     return ((Integer)selectedValue).intValue();    return CLOSED_OPTION;  }  for (int counter=0, maxCounter=options.length; counter < maxCounter; counter++) {    if (options[counter].equals(selectedValue))     return counter;  }  return CLOSED_OPTION;}  }
class C{  public void removeNotify(){synchronized (getTreeLock()) {    TextComponentPeer peer=(TextComponentPeer)this.peer;    if (peer != null) {      text=peer.getText();      selectionStart=peer.getSelectionStart();      selectionEnd=peer.getSelectionEnd();    }    super.removeNotify();  }}  }
class C{  public ItalicAction(){  super("font-italic");}  }
class C{  public boolean functionAvailable(String methName){  Object tblEntry=m_functionID.get(methName);  if (null != tblEntry)   return true; else {    tblEntry=m_functionID_customer.get(methName);    return (null != tblEntry) ? true : false;  }}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  startNonText(handler);  handler.getCurrentProcessor().endElement(handler,uri,localName,rawName);  handler.popProcessor();}  }
class C{  private static Class<?> loadBuilderClass(String builderClassName) throws ClassNotFoundException {  final ClassLoader loader=Thread.currentThread().getContextClassLoader();  if (loader != null) {    return loader.loadClass(builderClassName);  }  return ReflectUtil.forName(builderClassName);}  }
class C{  public static boolean isEnabled(){  return enabled;}  }
class C{  private void showUploadFinishedNotification(@Nullable Uri downloadUrl,@Nullable Uri fileUri){  Intent intent=new Intent(this,MainActivity.class).putExtra(EXTRA_DOWNLOAD_URL,downloadUrl).putExtra(EXTRA_FILE_URI,fileUri).addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);  boolean success=downloadUrl != null;  String message=success ? "Upload finished" : "Upload failed";  int icon=success ? R.drawable.ic_check_white_24 : R.drawable.ic_error_white_24dp;  NotificationCompat.Builder builder=new NotificationCompat.Builder(this).setSmallIcon(icon).setContentTitle(getString(R.string.app_name)).setContentText(message).setAutoCancel(true).setContentIntent(pendingIntent);  NotificationManager manager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  manager.notify(NOTIF_ID_DOWNLOAD,builder.build());}  }
class C{  public NotSerializableException(String classname){  super(classname);}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  private void goToBackup(){  mStage=Stage.BACKUP;  updateStage();}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.defaultWriteObject();}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  removePageSessionAttribute(PAGE_MODIFIED);  super.handleButton1Request(event);}  }
class C{  static void selfInterrupt(){  Thread.currentThread().interrupt();}  }
class C{  public ProcessInstanceResource(ProcessEngine processEngine,Function<ProcessEngine,HistoricProcessInstanceQuery,NeverThrowsException> queryFunction){  this.processEngine=processEngine;  this.queryFunction=queryFunction;}  }
class C{  public void notifyHorizontalEdgeReached(int startX,int finalX,int overX){  mScrollerX.notifyEdgeReached(startX,finalX,overX);}  }
class C{  private static Document parseXml(Object input,ParseOptions options) throws XMPException {  if (input instanceof InputStream) {    return parseXmlFromInputStream((InputStream)input,options);  } else   if (input instanceof byte[]) {    return parseXmlFromBytebuffer(new ByteBuffer((byte[])input),options);  } else {    return parseXmlFromString((String)input,options);  }}  }
class C{  public int length(){  return str().length();}  }
class C{  private void addDataAndRegisteredParamId(Long ruleActionId,Event event,HashMap<Long,String> paramsData,HashMap<Long,Long> paramsRegisteredParamId){  if (!database.isOpen()) {    throw new IllegalStateException(TAG + " is already closed.");  }  Long paramId;  String paramData;  Long paramRegisteredParamId;  Cursor cursor=ruleActionParameterDbAdapter.fetchAll(ruleActionId,null,null);  for (int i=0; i < cursor.getCount(); i++) {    cursor.moveToNext();    paramId=getLongFromCursor(cursor,RuleActionParameterDbAdapter.KEY_RULEACTIONPARAMETERID);    paramData=getStringFromCursor(cursor,RuleActionParameterDbAdapter.KEY_RULEACTIONPARAMETERDATA);    paramRegisteredParamId=getLongFromCursor(cursor,RuleActionParameterDbAdapter.KEY_ACTIONPARAMETERID);    paramsData.put(paramId,fillParamWithEventAttrib(paramData,event));    paramsRegisteredParamId.put(paramId,paramRegisteredParamId);  }  cursor.close();}  }
class C{  public void onLoadMore(){  isReady=false;  mLoadingType=LoadingType.LOADING;  QuickConfig.eLoad("onLoadMore");  if (listener != null) {    if (iLoadFooterView != null) {      iLoadFooterView.setVisibility(View.VISIBLE);      ((ILoadMoreFrameLayout)iLoadFooterView).loading();      mQuickRcvAdapter.addFooterView(iLoadFooterView);      recyclerView.scrollToPosition(recyclerView.getLayoutManager().getItemCount() - 1);    }    listener.onLoadMore();  }}  }
class C{  protected XMLPropertyListParser(){}  }
class C{  public E last(){  return backingMap.lastKey();}  }
class C{  private String parseString(){  return readInputUntil(WHITESPACE_SPACE,WHITESPACE_TAB,WHITESPACE_NEWLINE,WHITESPACE_CARRIAGE_RETURN,ARRAY_ITEM_DELIMITER_TOKEN,DICTIONARY_ITEM_DELIMITER_TOKEN,DICTIONARY_ASSIGN_TOKEN,ARRAY_END_TOKEN);}  }
class C{  @Override public void write(int value){  digest.update((byte)value);}  }
class C{  public synchronized E lastElement(){  if (elementCount == 0) {    throw new NoSuchElementException();  }  return elementData(elementCount - 1);}  }
class C{  public void menuSelectionChanged(boolean isIncluded){  if (DEBUG) {    System.out.println("In JPopupMenu.menuSelectionChanged " + isIncluded);  }  if (invoker instanceof JMenu) {    JMenu m=(JMenu)invoker;    if (isIncluded)     m.setPopupMenuVisible(true); else     m.setPopupMenuVisible(false);  }  if (isPopupMenu() && !isIncluded)   setVisible(false);}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  m_qnameID=sroot.getComposeState().getQNameID(m_qname);  int parentToken=m_parentNode.getXSLToken();  if (parentToken == Constants.ELEMNAME_TEMPLATE || parentToken == Constants.EXSLT_ELEMNAME_FUNCTION)   ((ElemTemplate)m_parentNode).m_inArgsSize++;}  }
class C{  @SuppressWarnings("PointlessArithmeticExpression") public void computeClosestPoints(){  float centerX=contentRect.centerX();  float closestDistance=Float.MAX_VALUE;  for (int i=0; i < pointsCountWithinXRange * 2; i+=2) {    float x=getDrawX(xRangePoints[i]);    float distance=Math.abs(x - centerX);    if (distance <= closestDistance) {      if (distance == closestDistance) {        closestPointsCount++;      } else {        closestPointsCount=0;      }      closestDistance=distance;      if (closestPointsBuffer.length < (closestPointsCount * 2 + 2)) {        closestPointsBuffer=new float[closestPointsBuffer.length * 2];      }      closestPointsBuffer[closestPointsCount * 2 + 0]=xRangePoints[i];      closestPointsBuffer[closestPointsCount * 2 + 1]=xRangePoints[i + 1];    }  }  if (pointsCountWithinXRange > 0) {    closestPointsCount++;  }}  }
class C{  public SetupParameters baseDn(String baseDn){  this.baseDn=baseDn;  return this;}  }
class C{  public AuditEvent convertToAuditEvent(PersistentAuditEvent persistentAuditEvent){  Instant instant=persistentAuditEvent.getAuditEventDate().atZone(ZoneId.systemDefault()).toInstant();  return new AuditEvent(Date.from(instant),persistentAuditEvent.getPrincipal(),persistentAuditEvent.getAuditEventType(),convertDataToObjects(persistentAuditEvent.getData()));}  }
class C{  private static void parse(Reader in,ContentHandler contentHandler) throws IOException, SAXException {  XMLReader reader=new ExpatReader();  reader.setContentHandler(contentHandler);  reader.parse(new InputSource(in));}  }
class C{  private static void signResponse(String realm,String idpEntityID,Response response) throws SAML2Exception {  String classMethod="IDPSSOUtil:signResponse";  KeyProvider kp=KeyUtil.getKeyProviderInstance();  if (kp == null) {    SAML2Utils.debug.error(classMethod + "Unable to get a key provider instance.");    throw new SAML2Exception(SAML2Utils.bundle.getString("nullKeyProvider"));  }  String idpSignCertAlias=SAML2Utils.getSigningCertAlias(realm,idpEntityID,SAML2Constants.IDP_ROLE);  if (idpSignCertAlias == null) {    SAML2Utils.debug.error(classMethod + "Unable to get the hosted IDP signing certificate alias.");    throw new SAML2Exception(SAML2Utils.bundle.getString("missingSigningCertAlias"));  }  String encryptedKeyPass=SAML2Utils.getSigningCertEncryptedKeyPass(realm,idpEntityID,SAML2Constants.IDP_ROLE);  PrivateKey key;  if (encryptedKeyPass == null || encryptedKeyPass.isEmpty()) {    key=kp.getPrivateKey(idpSignCertAlias);  } else {    key=kp.getPrivateKey(idpSignCertAlias,encryptedKeyPass);  }  response.sign(key,kp.getX509Certificate(idpSignCertAlias));}  }
class C{  public JAXBPermission(String name){  super(name);}  }
class C{  public Iterator<E> iterator(){  return new Itr(toArray());}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SignatureValueElement createSignatureValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureValueElementImpl();}  }
class C{  public Set createAssignableDynamicGroups(Set groupNames) throws AMException, SSOException {  Iterator iter=groupNames.iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + ((String)iter.next())+ ","+ entryDN;    AMAssignableDynamicGroupImpl groupImpl=new AMAssignableDynamicGroupImpl(token,groupDN);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  public static synchronized MBeanServer createServer(){  if (mserver == null) {    mserver=Registry.getRegistry(null,null).getMBeanServer();  }  return (mserver);}  }
class C{  @Override public void close() throws IOException {  if (!closed) {    inf.end();    closed=true;    eof=true;    super.close();  }}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  int index=getViewIndex(pos,b);  Shape ca=locator.getChildAllocation(index,a);  ChildState cs=getChildState(index);synchronized (cs) {    View cv=cs.getChildView();    Shape v=cv.modelToView(pos,ca,b);    return v;  }}  }
class C{  public boolean blocksForInput(ConversationContext context){  return true;}  }
class C{  public static void error(Level level,String msgid,String data[],Object session){  if (logger != null) {    try {      logger.error(level,msgid,data,session);    } catch (    LogException le) {      FSUtils.debug.error("LogUtil.error: Couldn't write log:",le);    }  }}  }
class C{  public AssertionIDRequest createAssertionIDRequest() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ASSERTION_ID_REQUEST);  if (obj == null) {    return new AssertionIDRequestImpl();  } else {    return (AssertionIDRequest)obj;  }}  }
class C{  static public void assertEquals(byte expected,byte actual){  assertEquals(null,expected,actual);}  }
class C{  public void warning(SAXParseException e) throws SAXException {}  }
class C{  public AMIdentity createUserIdentity(String userName,Map userAttributes,Set userRoles) throws IdRepoException, SSOException {  AMIdentity amIdentityUser=amIdRepo.createIdentity(IdType.USER,userName,userAttributes);  if (userRoles != null && !userRoles.isEmpty()) {    for (    final Object userRole : userRoles) {      String trole=(String)userRole;      try {        if (trole.length() != 0) {          amIdentityRole=getRole(trole);          amIdentityRole.addMember(amIdentityUser);        }      } catch (      Exception e) {        DEBUG.message("createUserProfile():invalid role: ",e);      }    }  }  return amIdentityUser;}  }
class C{  StringVector processPREFIX_URLLIST(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nStrings=tokenizer.countTokens();  StringVector strings=new StringVector(nStrings);  for (int i=0; i < nStrings; i++) {    String prefix=tokenizer.nextToken();    String url=handler.getNamespaceForPrefix(prefix);    if (url != null)     strings.addElement(url); else     throw new org.xml.sax.SAXException(XSLMessages.createMessage(XSLTErrorResources.ER_CANT_RESOLVE_NSPREFIX,new Object[]{prefix}));  }  return strings;}  }
class C{  public OverScroller(Context context){  this(context,null);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.EncryptedType createEncryptedType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptedTypeImpl();}  }
class C{  public void removeComment(){  comment=null;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite sending RINGING");    Response response=messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Created a new server transaction for " + request.getMethod() + " serverTransaction = "+ st);    }    inviteTid=st;    dialog=st.getDialog();    st.sendResponse(response);  } catch (  Exception ex) {    logger.error(ex);    fail(unexpectedException);  }}  }
class C{  public boolean isLocalNotificationService(URL url){  try {    URL localURL=WebtopNaming.getNotificationURL();    return isUrlPrefix(localURL,url);  } catch (  URLNotFoundException ex) {    return false;  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  subCommand=rc.getSubCommand();  requestContext=rc;  rb=rc.getSubCommand().getResourceBundle();  IOutput outputWriter=getOutputWriter();  outputWriter.printlnMessage("");  CommandManager mgr=getCommandManager();  if (mgr.isVerbose()) {    ResourceBundle mrc=mgr.getResourceBundle();    String msg=mrc.getString("verbose-executeCmd");    String[] arg={getClass().getName()};    outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])arg));  }}  }
class C{  public FacebookAuthorizationException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  protected void updateIncludeExclude(Collection<LocalizableMessage> errors,String backendName){  updateErrors(lDnsToInclude,dnsToInclude,lAttributesToInclude,attributesToInclude,lInclusionFilter,inclusionFilter,errors,backendName);  updateErrors(lDnsToExclude,dnsToExclude,lAttributesToExclude,attributesToExclude,lExclusionFilter,exclusionFilter,errors,backendName);}  }
class C{  public String toXMLString(){  return "<" + REMOVE_LISTENER + " "+ SERVICE_NAME+ "=\""+ serviceName+ "\" "+ NOTIFICATION_URL+ "=\""+ notificationURL+ "\"/>"+ CRLF;}  }
class C{  @Override public void modify(Privilege privilege) throws EntitlementException {  modify(privilege.getName(),privilege);}  }
class C{  private PointF transformCoordBitmapToTouch(float bx,float by){  matrix.getValues(m);  float origW=getDrawable().getIntrinsicWidth();  float origH=getDrawable().getIntrinsicHeight();  float px=bx / origW;  float py=by / origH;  float finalX=m[Matrix.MTRANS_X] + getImageWidth() * px;  float finalY=m[Matrix.MTRANS_Y] + getImageHeight() * py;  return new PointF(finalX,finalY);}  }
class C{  void updateValue(){  updateValue(null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementretrieveallattributes.class,args);}  }
class C{  public static boolean logout(InternalSession intSession,SSOToken token,HttpServletRequest request,HttpServletResponse response) throws SSOException {  if (token == null) {    return false;  }  processPostAuthenticationPlugins(intSession,token,request,response);  boolean isTokenValid=false;  try {    isTokenValid=SSOTokenManager.getInstance().isValidToken(token);    if (isTokenValid) {      AuthD.getAuth().logLogout(token);      auditLogout(token);      SSOTokenManager.getInstance().logout(token);      if (utilDebug.messageEnabled()) {        utilDebug.message("AuthUtils.logout: logout successful.");      }    }  } catch (  SSOException se) {    if (utilDebug.warningEnabled()) {      utilDebug.warning("AuthUtils.logout: SSOException" + " checking validity of SSO Token",se);    }  }  return isTokenValid;}  }
class C{  private boolean jobExists(String jobName) throws SchedulerException {  return inMemoryScheduler.jobExists(jobName) || persistentScheduler.jobExists(jobName);}  }
class C{  public static String dumpAsString(Object obj,boolean verbose){  StringBuffer buf=new StringBuffer();  if (obj instanceof ASN1Primitive) {    _dumpAsString("",verbose,(ASN1Primitive)obj,buf);  } else   if (obj instanceof ASN1Encodable) {    _dumpAsString("",verbose,((ASN1Encodable)obj).toASN1Primitive(),buf);  } else {    return "unknown object type " + obj.toString();  }  return buf.toString();}  }
class C{  public OpenIdConnectToken(String signingKeyId,String encryptionKeyId,byte[] clientSecret,KeyPair signingKeyPair,Key encryptionKey,String signingAlgorithm,String encryptionAlgorithm,String encryptionMethod,boolean isIDTokenEncryptionEnabled,String iss,String sub,String aud,String azp,long exp,long iat,long authTime,String nonce,String ops,String atHash,String cHash,String acr,List<String> amr,String auditTrackingId,String realm){  super(new HashMap<String,Object>());  this.clientSecret=clientSecret;  this.signingAlgorithm=signingAlgorithm;  this.isIDTokenEncryptionEnabled=isIDTokenEncryptionEnabled;  this.encryptionAlgorithm=encryptionAlgorithm;  this.encryptionMethod=encryptionMethod;  this.signingKeyPair=signingKeyPair;  this.encryptionKey=encryptionKey;  this.signingKeyId=signingKeyId;  this.encryptionKeyId=encryptionKeyId;  setIss(iss);  setSub(sub);  setAud(aud);  setAzp(azp);  setExp(exp);  setIat(iat);  setAuthTime(authTime);  setNonce(nonce);  setOps(ops);  setAtHash(atHash);  setCHash(cHash);  setAcr(acr);  setAmr(amr);  setTokenType(OAuth2Constants.JWTTokenParams.JWT_TOKEN);  setTokenName(OAuth2Constants.JWTTokenParams.ID_TOKEN);  set(AUDIT_TRACKING_ID,auditTrackingId);  setRealm(realm);}  }
class C{  protected static Map attrSetToMap(AttrSet attrSet,boolean fetchByteValues){  Map attributesMap=new AMHashMap(fetchByteValues);  if (attrSet == null) {    return attributesMap;  }  int attrSetSize=attrSet.size();  if (!fetchByteValues) {    for (int i=0; i < attrSetSize; i++) {      Attr attr=attrSet.elementAt(i);      String values[]=attr.getStringValues();      attributesMap.put(attr.getName(),stringArrayToSet(values));    }  } else {    for (int i=0; i < attrSetSize; i++) {      Attr attr=attrSet.elementAt(i);      attributesMap.put(attr.getName(),attr.getByteValues());    }  }  return attributesMap;}  }
class C{  public void registerIdentityProviderListener(IdentityProviderListener listener){  identityProviderListeners.put(listener.getListenerName(),listener);}  }
class C{  public void outputText(int x,int y,int flag,int x1,int y1,int x2,int y2,String text) throws IOException {  MetaFont font=state.getCurrentFont();  float refX=state.transformX(x);  float refY=state.transformY(y);  float angle=state.transformAngle(font.getAngle());  float sin=(float)Math.sin(angle);  float cos=(float)Math.cos(angle);  float fontSize=font.getFontSize(state);  FontProgram fp=font.getFont();  int align=state.getTextAlign();  int normalizedWidth=0;  byte[] bytes=font.encoding.convertToBytes(text);  for (  byte b : bytes) {    normalizedWidth+=fp.getWidth(0xff & b);  }  float textWidth=fontSize / FontProgram.UNITS_NORMALIZATION * normalizedWidth;  float tx=0;  float ty=0;  float descender=fp.getFontMetrics().getTypoDescender();  float ury=fp.getFontMetrics().getBbox()[3];  cb.saveState();  cb.concatMatrix(cos,sin,-sin,cos,refX,refY);  if ((align & MetaState.TA_CENTER) == MetaState.TA_CENTER) {    tx=-textWidth / 2;  } else   if ((align & MetaState.TA_RIGHT) == MetaState.TA_RIGHT) {    tx=-textWidth;  }  if ((align & MetaState.TA_BASELINE) == MetaState.TA_BASELINE) {    ty=0;  } else   if ((align & MetaState.TA_BOTTOM) == MetaState.TA_BOTTOM) {    ty=-descender;  } else {    ty=-ury;  }  Color textColor;  if (state.getBackgroundMode() == MetaState.OPAQUE) {    textColor=state.getCurrentBackgroundColor();    cb.setFillColor(textColor);    cb.rectangle(tx,ty + descender,textWidth,ury - descender);    cb.fill();  }  textColor=state.getCurrentTextColor();  cb.setFillColor(textColor);  cb.beginText();  cb.setFontAndSize(PdfFontFactory.createFont(state.getCurrentFont().getFont(),PdfEncodings.CP1252,true),fontSize);  cb.setTextMatrix(tx,ty);  cb.showText(text);  cb.endText();  if (font.isUnderline()) {    cb.rectangle(tx,ty - fontSize / 4,textWidth,fontSize / 15);    cb.fill();  }  if (font.isStrikeout()) {    cb.rectangle(tx,ty + fontSize / 3,textWidth,fontSize / 15);    cb.fill();  }  cb.restoreState();}  }
class C{  public boolean debug(int mask,int level){  return ((debug_mask & mask) != 0) && ((debug_level & level) != 0);}  }
class C{  protected void fireTreeNodesInserted(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeNodesInserted(e);    }  }}  }
class C{  public void registerApplicationClasspathSpis(){  ClassLoader loader=Thread.currentThread().getContextClassLoader();  Iterator categories=getCategories();  while (categories.hasNext()) {    Class<IIOServiceProvider> c=(Class)categories.next();    Iterator<IIOServiceProvider> riter=ServiceLoader.load(c,loader).iterator();    while (riter.hasNext()) {      try {        IIOServiceProvider r=riter.next();        registerServiceProvider(r);      } catch (      ServiceConfigurationError err) {        if (System.getSecurityManager() != null) {          err.printStackTrace();        } else {          throw err;        }      }    }  }}  }
class C{  public void testAddSuperscriptSpan(){  mRichTextView.formatSpan(0,5,RichTextView.FormatType.SUPERSCRIPT);  Object[] spans=mRichTextView.getSpans();  assertEquals(1,spans.length);  Object firstSpan=spans[0];  assertTrue(firstSpan instanceof SuperscriptSpan);}  }
class C{  public JKReportException(){  super();}  }
class C{  public boolean update(Long dataFilterID,String dataFilterName,String dataFilterDisplayName,Long filterOnDataTypeID,Long compareWithDataTypeID){  if (dataFilterID == null) {    throw new IllegalArgumentException("primary key null.");  }  ContentValues args=new ContentValues();  if (dataFilterName != null) {    args.put(KEY_DATAFILTERNAME,dataFilterName);  }  if (dataFilterDisplayName != null) {    args.put(KEY_DATAFILTERDISPLAYNAME,dataFilterDisplayName);  }  if (filterOnDataTypeID != null) {    args.put(KEY_FILTERONDATATYPEID,filterOnDataTypeID);  }  if (compareWithDataTypeID != null) {    args.put(KEY_COMPAREWITHDATATYPEID,compareWithDataTypeID);  }  if (args.size() > 0) {    return database.update(DATABASE_TABLE,args,KEY_DATAFILTERID + "=" + dataFilterID,null) > 0;  }  return false;}  }
class C{  public void addIterator(DTMIterator expr){  if (null == m_iterators) {    m_iterators=new DTMIterator[1];    m_iterators[0]=expr;  } else {    DTMIterator[] exprs=m_iterators;    int len=m_iterators.length;    m_iterators=new DTMIterator[len + 1];    System.arraycopy(exprs,0,m_iterators,0,len);    m_iterators[len]=expr;  }  expr.nextNode();  if (expr instanceof Expression)   ((Expression)expr).exprSetParent(this);}  }
class C{  public Attribute createAttribute(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ATTRIBUTE);  if (obj == null) {    return new AttributeImpl();  } else {    return (Attribute)obj;  }}  }
class C{  protected synchronized void insertAttributeSetAt(AttributeSet as,int index){  int numAttrs=attrs.length;  AttributeSet newAttrs[]=new AttributeSet[numAttrs + 1];  if (index < numAttrs) {    if (index > 0) {      System.arraycopy(attrs,0,newAttrs,0,index);      System.arraycopy(attrs,index,newAttrs,index + 1,numAttrs - index);    } else {      System.arraycopy(attrs,0,newAttrs,1,numAttrs);    }  } else {    System.arraycopy(attrs,0,newAttrs,0,numAttrs);  }  newAttrs[index]=as;  attrs=newAttrs;}  }
class C{  public int executeForChangedRowCount(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return 0;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    return mConnection.executeForChangedRowCount(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  public void stepOver(){  if (!isRunning())   return;  Line previousLine=currentLine;  do {    int nextMethodID=trace.getNextEventIDInMethod(currentEventID);    if (nextMethodID < 0)     nextMethodID=trace.getNextEventIDInThread(currentEventID);    setCurrentEventID(nextMethodID);  } while (isRunning() && currentLine != null && currentLine == previousLine);}  }
class C{  boolean skipReplicationPortCheck(){  return skipPortCheckArg.isPresent();}  }
class C{  boolean preCompile(HttpServletRequest request) throws ServletException {  String queryString=request.getQueryString();  if (queryString == null) {    return false;  }  int start=queryString.indexOf(Constants.PRECOMPILE);  if (start < 0) {    return false;  }  queryString=queryString.substring(start + Constants.PRECOMPILE.length());  if (queryString.length() == 0) {    return true;  }  if (queryString.startsWith("&")) {    return true;  }  if (!queryString.startsWith("=")) {    return false;  }  int limit=queryString.length();  int ampersand=queryString.indexOf('&');  if (ampersand > 0) {    limit=ampersand;  }  String value=queryString.substring(1,limit);  if (value.equals("true")) {    return true;  } else   if (value.equals("false")) {    return true;  } else {    throw new ServletException("Cannot have request parameter " + Constants.PRECOMPILE + " set to "+ value);  }}  }
class C{  private void removeMapping(TreeStateNode node){  treePathMapping.remove(node.getTreePath());}  }
class C{  private WeekFields(DayOfWeek firstDayOfWeek,int minimalDaysInFirstWeek){  Objects.requireNonNull(firstDayOfWeek,"firstDayOfWeek");  if (minimalDaysInFirstWeek < 1 || minimalDaysInFirstWeek > 7) {    throw new IllegalArgumentException("Minimal number of days is invalid");  }  this.firstDayOfWeek=firstDayOfWeek;  this.minimalDays=minimalDaysInFirstWeek;}  }
class C{  Path keep(final Path path) throws IOException {  boolean changed=CHANGED_STATES.contains(fileStateChecker.getCurrentFileState(path));  final Path destination=root.resolve(changed ? path.toString() + NEW_SUFFIX + timestamp : path.toString());  copyNewFile(path,destination);  if (!changed) {    fileStateChecker.updateState(path);  }  return changed ? destination : null;}  }
class C{  public final void popExpressionState(){  m_currentNodes.quickPop(1);  m_currentExpressionNodes.quickPop(1);  m_prefixResolvers.pop();}  }
class C{  public TIMEOUT(){  this("");}  }
class C{  public void addPrivilege(Privilege privilege){  privileges.add(privilege);}  }
class C{  public void countDown(){  sync.releaseShared(1);}  }
class C{  public void insert_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_any",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public int indexOf(int elem){  if (null == m_map)   return -1;  for (int i=0; i < m_firstFree; i++) {    int node=m_map[i];    if (node == elem)     return i;  }  return -1;}  }
class C{  public TagTreePointer removeContentItem(PdfPage page,int mcid){  PdfMcr mcr=document.getStructTreeRoot().findMcrByMcid(page.getPdfObject(),mcid);  if (mcr == null) {    return null;  }  PdfStructElem parent=(PdfStructElem)mcr.getParent();  parent.removeKid(mcr);  return new TagTreePointer(document).setCurrentStructElem(parent);}  }
class C{  public static boolean contains(String s1,String s2){  if (s1 == null || s2 == null) {    return false;  }  return s1.contains(s2);}  }
class C{  static String referralTypeName(Referral referral){  if (referral == null) {    return (null);  }  String answer=null;  String className=referral.getClass().getName();  Iterator items=PolicyManager.getPluginSchemaNames(REFERRAL).iterator();  while (items.hasNext()) {    String pluginName=(String)items.next();    PluginSchema ps=PolicyManager.getPluginSchema(REFERRAL,pluginName);    if (className.equals(ps.getClassName())) {      answer=pluginName;      break;    }  }  return (answer);}  }
class C{  public boolean addAll(Collection c){  throw new UnsupportedOperationException();}  }
class C{  public void testGetNamespaceURI() throws Throwable {  Document doc;  Element element;  Element elementNS;  Attr attr;  Attr attrNS;  String elemNSURI;  String elemNSURINull;  String attrNSURI;  String attrNSURINull;  String nullNS=null;  doc=(Document)load("staff",builder);  element=doc.createElementNS(nullNS,"elem");  elementNS=doc.createElementNS("http://www.w3.org/DOM/Test/elem","qual:qelem");  attr=doc.createAttributeNS(nullNS,"attr");  attrNS=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","qual:qattr");  elemNSURI=elementNS.getNamespaceURI();  elemNSURINull=element.getNamespaceURI();  attrNSURI=attrNS.getNamespaceURI();  attrNSURINull=attr.getNamespaceURI();  assertEquals("nodegetnamespaceuri03_elemNSURI","http://www.w3.org/DOM/Test/elem",elemNSURI);  assertNull("nodegetnamespaceuri03_1",elemNSURINull);  assertEquals("nodegetnamespaceuri03_attrNSURI","http://www.w3.org/DOM/Test/attr",attrNSURI);  assertNull("nodegetnamespaceuri03_2",attrNSURINull);}  }
class C{  private void advanceRunState(int targetState){  for (; ; ) {    int c=ctl.get();    if (runStateAtLeast(c,targetState) || ctl.compareAndSet(c,ctlOf(targetState,workerCountOf(c))))     break;  }}  }
class C{  private void parse_expression() throws SyntaxException {  if (current == null) {    return;  }  if (current instanceof Element) {    String content=((Element)current).getContent();    boolean doCheckParsedExps=true;    while (true) {      if (doCheckParsedExps) {        if (parsedExps.empty()) {          if (isOneVariableOperatorPreMustCheckExps(content)) {            annosIsEmpty();            modifiersIsEmpty();            parse_oneVarPreOperation();            return;          }        }        doCheckParsedExps=false;      } else {        if (current.getTokenType() == TokenType.NUMBER) {          annosIsEmpty();          modifiersIsEmpty();          NumberLiteral numberLiteral=new NumberLiteral(content,current.getLineCol());          parsedExps.push(numberLiteral);          nextNode(true);          parse_expression();        } else         if (current.getTokenType() == TokenType.BOOL) {          annosIsEmpty();          modifiersIsEmpty();          BoolLiteral boolLiteral=new BoolLiteral(content,current.getLineCol());          parsedExps.push(boolLiteral);          nextNode(true);          parse_expression();        } else         if (current.getTokenType() == TokenType.STRING) {          annosIsEmpty();          modifiersIsEmpty();          StringLiteral stringLiteral=new StringLiteral(content,current.getLineCol());          parsedExps.push(stringLiteral);          nextNode(true);          parse_expression();        } else         if (current.getTokenType() == TokenType.REGEX) {          annosIsEmpty();          modifiersIsEmpty();          RegexLiteral regexLiteral=new RegexLiteral(content,current.getLineCol());          parsedExps.push(regexLiteral);          nextNode(true);          parse_expression();        } else         if (isTwoVariableOperator(content) && (current.getTokenType() == TokenType.KEY || (current.getTokenType() == TokenType.SYMBOL))) {          annosIsEmpty();          modifiersIsEmpty();          parse_twoVarOperation();        } else         if (current.getTokenType() == TokenType.KEY) {switch (content) {case "type":            annosIsEmpty();          modifiersIsEmpty();        LineCol lineCol=current.getLineCol();      nextNode(false);    AST.Access access=parse_cls_for_type_spec();  parsedExps.push(new AST.TypeOf(access,lineCol));parse_expression();break;case "null":annosIsEmpty();modifiersIsEmpty();parsedExps.push(new AST.Null(current.getLineCol()));nextNode(true);parse_expression();break;case "as":annosIsEmpty();modifiersIsEmpty();if (parsedExps.isEmpty()) {err.UnexpectedTokenException("expression","as",current.getLineCol());err.debug("ignore the statement");throw new ParseFail();} else {lineCol=current.getLineCol();Expression exp=parsedExps.pop();nextNode(false);AST.Access type=parse_cls_for_type_spec();AST.AsType asType=new AST.AsType(exp,type,lineCol);parsedExps.push(asType);}break;case "require":annosIsEmpty();modifiersIsEmpty();nextNode(false);lineCol=current.getLineCol();Expression exp=get_exp(false);parsedExps.push(new AST.Require(exp,lineCol));parse_expression();break;case "new":annosIsEmpty();modifiersIsEmpty();lineCol=current.getLineCol();Expression next=next_exp(false);AST.New aNew;if (next instanceof AST.Invocation) {if (((AST.Invocation)next).invokeWithNames) {err.SyntaxException("constructing an object does not support invokeWithNames",next.line_col());}aNew=new AST.New((AST.Invocation)next,lineCol);} else if (next instanceof AST.Access) {aNew=new AST.New(new AST.Invocation(next,Collections.emptyList(),false,next.line_col()),lineCol);} else {err.UnexpectedTokenException("invoking a constructor",next.toString(),next.line_col());throw new ParseFail();}parsedExps.push(aNew);parse_expression();break;default :err.UnexpectedTokenException(content,current.getLineCol());err.debug("ignore the token");nextNode(true);}} else if (current.getTokenType() == TokenType.SYMBOL) {if (content.equals(".")) {annosIsEmpty();modifiersIsEmpty();parse_access(true);} else if (isOneVariableOperatorPreWithoutCheckingExps(content)) {annosIsEmpty();modifiersIsEmpty();parse_oneVarPreOperation();} else if (isOneVariableOperatorPost(content)) {annosIsEmpty();modifiersIsEmpty();parse_oneVarPostOperation();} else if (isAssign(content)) {annosIsEmpty();modifiersIsEmpty();parse_assign();} else if (content.equals(":")) {annosIsEmpty();modifiersIsEmpty();if (isParsingMap) {return;} else {parse_type_spec();}} else if (content.equals("[")) {annosIsEmpty();modifiersIsEmpty();if (parsedExps.empty()) {parse_array_exp();} else {parse_index_access();}} else if (content.equals("{")) {annosIsEmpty();modifiersIsEmpty();parse_map();} else if (content.equals("@")) {annosIsEmpty();modifiersIsEmpty();boolean tmp=annotationAsExpression;annotationAsExpression=true;parse_anno();annotationAsExpression=tmp;if (!annos.isEmpty()) {AST.Anno anno=annos.iterator().next();parsedExps.push(new AST.AnnoExpression(anno));annos.clear();}} else if (content.equals("#")) {annosIsEmpty();modifiersIsEmpty();LineCol lineCol=current.getLineCol();if (parsedExps.isEmpty()) {Expression theType=next_exp(true);if (theType instanceof AST.Access) {List<Statement> ast;if (current instanceof ElementStartNode) {ast=parseElemStart((ElementStartNode)current,false,Collections.emptySet(),false);nextNode(true);} else {ast=Collections.emptyList();}parsedExps.push(new AST.GeneratorSpec((AST.Access)theType,ast,lineCol));} else if (theType instanceof AST.GeneratorSpec) {parsedExps.push(theType);} else {err.UnexpectedTokenException("a type",theType.toString(),theType.line_col());}} else {Expression exp=parsedExps.pop();if (!(exp instanceof AST.Access)) {err.UnexpectedTokenException(exp.toString(),lineCol);exp=new AST.Access(null,"x",lineCol);}AST.Access generator=(AST.Access)exp;parsedExps.push(new AST.GeneratorSpec(generator,Collections.singletonList(next_exp(false)),lineCol));}} else if (content.equals("(")) {annosIsEmpty();modifiersIsEmpty();if (isLambda((Element)current)) {parse_lambda();} else {nextNode(false);if (current instanceof Element) {expecting(")",current.previous(),current,err);if (!parsedExps.empty()) {Expression invocationExp=parsedExps.pop();AST.Invocation invocation=new AST.Invocation(invocationExp,Collections.emptyList(),false,invocationExp.line_col());parsedExps.push(invocation);} else {err.SyntaxException("it should be the method to invoke",parsedExps.empty() ? current.getLineCol() : parsedExps.peek().line_col());}nextNode(true);parse_expression();} else if (current instanceof ElementStartNode) {ElementStartNode startNode=(ElementStartNode)current;List<Statement> statements=parseElemStart(startNode,true,Collections.emptySet(),false);if (!parsedExps.empty()) {Expression invocationExp=parsedExps.pop();List<Expression> args=new LinkedList<>();Statement lastStmt=null;if (!statements.isEmpty()) {lastStmt=statements.get(statements.size() - 1);}boolean endWithVarDef=!statements.isEmpty() && lastStmt instanceof VariableDef && ((VariableDef)lastStmt).getInit() != null && ((VariableDef)lastStmt).getModifiers().isEmpty() && ((VariableDef)lastStmt).getAnnos().isEmpty();boolean hasNonVarDef=false;for (int i=statements.size() - 1; i >= 0; --i) {Statement stmt=statements.get(i);if ((stmt instanceof Expression)) {args.add(0,(Expression)stmt);if (stmt instanceof VariableDef) {if (((VariableDef)stmt).getType() != null) {err.UnexpectedTokenException("argument","variable definition",stmt.line_col());}if (((VariableDef)stmt).getInit() == null || !((VariableDef)stmt).getAnnos().isEmpty() || !((VariableDef)stmt).getModifiers().isEmpty()) {hasNonVarDef=true;} else {if (hasNonVarDef) {err.SyntaxException("params with assignment should be at the end",stmt.line_col());}}} else {hasNonVarDef=true;}} else {err.UnexpectedTokenException("expression",stmt.toString(),stmt.line_col());err.debug("ignore the argument");}}AST.Invocation invocation=new AST.Invocation(invocationExp,args,endWithVarDef,current.getLineCol());parsedExps.push(invocation);} else {if (statements.size() == 1) {Statement stmt=statements.get(0);if (stmt instanceof Expression) {parsedExps.push((Expression)stmt);} else {AST.Procedure procedure=new AST.Procedure(statements,startNode.getLineCol());parsedExps.push(procedure);}} else {AST.Procedure procedure=new AST.Procedure(statements,startNode.getLineCol());parsedExps.push(procedure);}}nextNode(false);expecting(")",startNode,current,err);nextNode(true);parse_expression();}}} else {err.UnexpectedTokenException(content,current.getLineCol());err.debug("ignore the token");nextNode(true);}} else if (current.getTokenType() == TokenType.VALID_NAME) {if (isLambda((Element)current)) {parse_lambda();} else if (isPackage((Element)current)) {annosIsEmpty();modifiersIsEmpty();parse_package(true);} else {if (parsedExps.empty()) {parse_var();} else {parse_operator_like_invocation();}}} else {err.UnexpectedTokenException(content,current.getLineCol());err.debug("ignore the token");nextNode(true);}break;}}} else if (current instanceof ElementStartNode) {if (!expectingStartNode) {Expression exp=parsedExps.pop();List<Statement> lambdaStmts=parseElemStart((ElementStartNode)current,true,Collections.emptySet(),false);AST.Lambda lambda=new AST.Lambda(Collections.singletonList(new VariableDef("it",Collections.emptySet(),Collections.emptySet(),LineCol.SYNTHETIC)),lambdaStmts,LineCol.SYNTHETIC_WITH_FILE(current.getLineCol().fileName));AST.Invocation invocation=new AST.Invocation(exp,Collections.singletonList(lambda),false,LineCol.SYNTHETIC_WITH_FILE(current.getLineCol().fileName));parsedExps.push(invocation);nextNode(true);if (current instanceof EndingNode && ((EndingNode)current).getType() == EndingNode.SYNTHETIC) {nextNode(true);}parse_expression();}}}  }
class C{  public static String format(String pattern,Integer i,String l){  MessageFormat mf=new MessageFormat("");  mf.setLocale(getLocale(l));  mf.applyPattern(pattern);  String msg=format(mf,i);  return msg;}  }
class C{  private int[] blackWhiteRange(int fixedDimension,int maxWhiteRun,int minDim,int maxDim,boolean horizontal){  int center=(minDim + maxDim) / 2;  int start=center;  while (start >= minDim) {    if (horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)) {      start--;    } else {      int whiteRunStart=start;      do {        start--;      } while (start >= minDim && !(horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)));      int whiteRunSize=whiteRunStart - start;      if (start < minDim || whiteRunSize > maxWhiteRun) {        start=whiteRunStart;        break;      }    }  }  start++;  int end=center;  while (end < maxDim) {    if (horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)) {      end++;    } else {      int whiteRunStart=end;      do {        end++;      } while (end < maxDim && !(horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)));      int whiteRunSize=end - whiteRunStart;      if (end >= maxDim || whiteRunSize > maxWhiteRun) {        end=whiteRunStart;        break;      }    }  }  end--;  return end > start ? new int[]{start,end} : null;}  }
class C{  public String next(){  return next(ANY_PATTERN);}  }
class C{  public SyntaxPrinter(){  this.pimpl=new Visitor();}  }
class C{  public static void dump(byte[] data,long offset,OutputStream stream,int index) throws IOException, ArrayIndexOutOfBoundsException, IllegalArgumentException {  if (index < 0 || index >= data.length) {    throw new ArrayIndexOutOfBoundsException("illegal index: " + index + " into array of length "+ data.length);  }  if (stream == null) {    throw new IllegalArgumentException("cannot write to nullstream");  }  long display_offset=offset + index;  StringBuilder buffer=new StringBuilder(74);  for (int j=index; j < data.length; j+=16) {    int chars_read=data.length - j;    if (chars_read > 16) {      chars_read=16;    }    dump(buffer,display_offset).append(' ');    for (int k=0; k < 16; k++) {      if (k < chars_read) {        dump(buffer,data[k + j]);      } else {        buffer.append("  ");      }      buffer.append(' ');    }    for (int k=0; k < chars_read; k++) {      if (data[k + j] >= ' ' && data[k + j] < 127) {        buffer.append((char)data[k + j]);      } else {        buffer.append('.');      }    }    buffer.append(EOL);    stream.write(buffer.toString().getBytes());    stream.flush();    buffer.setLength(0);    display_offset+=chars_read;  }}  }
class C{  private void updateLaunchLaterErrorMessages(Collection<LocalizableMessage> errorMessages){  setPrimaryValid(lTime);  setPrimaryValid(lDay);  setPrimaryValid(lMonth);  setPrimaryValid(lYear);  int previousErrorNumber=errorMessages.size();  int y=Integer.parseInt(year.getSelectedItem().toString());  int d=-1;  int m=month.getSelectedIndex();  int[] h={-1};  int[] min={-1};  checkTime(time,lTime,h,min,errorMessages);  try {    d=Integer.parseInt(day.getText().trim());    if (d < 0 || d > 31) {      errorMessages.add(ERR_CTRL_PANEL_INVALID_DAY.get());      setPrimaryInvalid(lDay);    }  } catch (  Exception ex) {    errorMessages.add(ERR_CTRL_PANEL_INVALID_DAY.get());    setPrimaryInvalid(lDay);  }  if (errorMessages.size() == previousErrorNumber) {    GregorianCalendar calendar=new GregorianCalendar(y,m,d,h[0],min[0]);    Date date=calendar.getTime();    if (calendar.get(Calendar.MONTH) != m) {      errorMessages.add(ERR_CTRL_PANEL_INVALID_DAY_IN_MONTH.get(d,month.getSelectedItem()));      setPrimaryInvalid(lDay);      setPrimaryInvalid(lMonth);    } else     if (date.before(new Date())) {      errorMessages.add(ERR_CTRL_PANEL_DATE_ALREADY_PASSED.get());      setPrimaryInvalid(lTime);      setPrimaryInvalid(lDay);      setPrimaryInvalid(lMonth);      setPrimaryInvalid(lYear);    }  }}  }
class C{  public net.aimeizi.person.Person.Builder clearSex(){  fieldSetFlags()[2]=false;  return this;}  }
class C{  public RemoteServletRequest(){  debug=Debug.getInstance("remoteRequest");}  }
class C{  @Deprecated public void _INVALID_setAmount(int amount){  setAmount(amount);}  }
class C{  public void makeYoungest(FastRemovalDequeue<JspServletWrapper>.Entry unloadHandle){  if (log.isTraceEnabled()) {    JspServletWrapper jsw=unloadHandle.getContent();    log.trace(Localizer.getMessage("jsp.message.jsp_queue_update",jsw.getJspUri(),context.getContextPath()));  }  jspQueue.moveFirst(unloadHandle);}  }
class C{  public void insert_char(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_char",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_char(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void testSHAProvider(){  MessageDigest md=null;  try {    md=MessageDigest.getInstance("SHA");  } catch (  NoSuchAlgorithmException e) {    fail("unexpected exception: " + e);  }  byte[] bytes=new byte[]{1,1,1,1,1};  try {    md.update(bytes,-1,1);    fail("No expected IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    md.update(bytes,1,-1);    fail("No expected IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    md=MessageDigest.getInstance("SHA");  } catch (  NoSuchAlgorithmException e) {    fail("unexpected exception: " + e);  }  try {    md.digest(bytes,0,-1);    fail("No expected DigestException");  } catch (  DigestException e) {  }  try {    md.digest(bytes,-1,0);    fail("No expected DigestException");  } catch (  DigestException e) {  }  try {    md=MessageDigest.getInstance("UnknownDigest");    fail("expected NoSuchAlgorithmException");  } catch (  NoSuchAlgorithmException e) {  }}  }
class C{  public void addLayoutComponent(String name,Component comp){}  }
class C{  public static AccountUsabilityResponseControl newControl(final boolean isInactive,final boolean isReset,final boolean isExpired,final int remainingGraceLogins,final boolean isLocked,final int secondsBeforeUnlock){  return new AccountUsabilityResponseControl(false,false,isInactive,isReset,isExpired,remainingGraceLogins,isLocked,secondsBeforeUnlock,-1);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetlocalname03.class,args);}  }
class C{  public AccountExpiredException(String msg){  super(msg);}  }
class C{  public void mouseClicked(MouseEvent e){  if (getComponent() == null) {    return;  }  int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),e);  if (!e.isConsumed()) {    if (SwingUtilities.isLeftMouseButton(e)) {      if (nclicks == 1) {        selectedWordEvent=null;      } else       if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(e)) {        selectWord(e);        selectedWordEvent=null;      } else       if (nclicks == 3 && SwingUtilities2.canEventAccessSystemClipboard(e)) {        Action a=null;        ActionMap map=getComponent().getActionMap();        if (map != null) {          a=map.get(DefaultEditorKit.selectLineAction);        }        if (a == null) {          if (selectLine == null) {            selectLine=new DefaultEditorKit.SelectLineAction();          }          a=selectLine;        }        a.actionPerformed(new ActionEvent(getComponent(),ActionEvent.ACTION_PERFORMED,null,e.getWhen(),e.getModifiers()));      }    } else     if (SwingUtilities.isMiddleMouseButton(e)) {      if (nclicks == 1 && component.isEditable() && component.isEnabled() && SwingUtilities2.canEventAccessSystemClipboard(e)) {        JTextComponent c=(JTextComponent)e.getSource();        if (c != null) {          try {            Toolkit tk=c.getToolkit();            Clipboard buffer=tk.getSystemSelection();            if (buffer != null) {              adjustCaret(e);              TransferHandler th=c.getTransferHandler();              if (th != null) {                Transferable trans=null;                try {                  trans=buffer.getContents(null);                } catch (                IllegalStateException ise) {                  UIManager.getLookAndFeel().provideErrorFeedback(c);                }                if (trans != null) {                  th.importData(c,trans);                }              }              adjustFocus(true);            }          } catch (          HeadlessException he) {          }        }      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  Attr attribute;  Attr newAttribute;  doc=(Document)load("staff",false);  element=doc.createElement("address");  attribute=doc.createAttribute("domestic");  newAttribute=element.setAttributeNode(attribute);  state=element.hasAttribute("domestic");  assertTrue("elementhasattribute04",state);}  }
class C{  public static boolean isExtOpApplicable(Aci aci,AciTargetMatchContext matchCtx){  ExtOp extOp=aci.getTargets().getExtOp();  return extOp != null && extOp.isApplicable(matchCtx);}  }
class C{  public boolean retainAll(Collection<?> c){  if (!(c instanceof JumboEnumSet))   return super.retainAll(c);  JumboEnumSet<?> es=(JumboEnumSet<?>)c;  if (es.elementType != elementType) {    boolean changed=(size != 0);    clear();    return changed;  }  for (int i=0; i < elements.length; i++)   elements[i]&=es.elements[i];  return recalculateSize();}  }
class C{  public JspRuntimeContext(ServletContext context,Options options){  this.context=context;  this.options=options;  ClassLoader loader=Thread.currentThread().getContextClassLoader();  if (loader == null) {    loader=this.getClass().getClassLoader();  }  if (log.isDebugEnabled()) {    if (loader != null) {      log.debug(Localizer.getMessage("jsp.message.parent_class_loader_is",loader.toString()));    } else {      log.debug(Localizer.getMessage("jsp.message.parent_class_loader_is","<none>"));    }  }  parentClassLoader=loader;  classpath=initClassPath();  if (context instanceof org.apache.jasper.servlet.JspCServletContext) {    codeSource=null;    permissionCollection=null;    return;  }  if (Constants.IS_SECURITY_ENABLED) {    SecurityHolder holder=initSecurity();    codeSource=holder.cs;    permissionCollection=holder.pc;  } else {    codeSource=null;    permissionCollection=null;  }  String appBase=context.getRealPath("/");  if (!options.getDevelopment() && appBase != null && options.getCheckInterval() > 0) {    lastCompileCheck=System.currentTimeMillis();  }  if (options.getMaxLoadedJsps() > 0) {    jspQueue=new FastRemovalDequeue<>(options.getMaxLoadedJsps());    if (log.isDebugEnabled()) {      log.debug(Localizer.getMessage("jsp.message.jsp_queue_created","" + options.getMaxLoadedJsps(),context.getContextPath()));    }  }  jspIdleTimeout=options.getJspIdleTimeout() * 1000;}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfStream copyTo(PdfDocument document){  return (PdfStream)super.copyTo(document,true);}  }
class C{  public void handleParentagepathHrefRequest(RequestInvocationEvent event){  String path=(String)getDisplayFieldValue(PARENTAGE_PATH_HREF);  setPageSessionAttribute(AMAdminConstants.CURRENT_REALM,path);  setCurrentLocation(path);  unlockPageTrailForSwapping();  forwardTo();}  }
class C{  public StampedLock(){  state=ORIGIN;}  }
class C{  public void testSecretKeyFactory04() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  try {    SecretKeyFactory.getInstance(null,defaultProviderName);    fail("NullPointerException or NoSuchAlgorithmException should be thrown if algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SecretKeyFactory.getInstance(invalidValues[i],defaultProviderName);      fail("NoSuchAlgorithmException was not thrown as expected (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public int hashCode(){  return hash;}  }
class C{  public JAXBException(String message,Throwable exception){  this(message,null,exception);}  }
class C{  public Base64(final boolean urlSafe){  this(MIME_CHUNK_SIZE,CHUNK_SEPARATOR,urlSafe);}  }
class C{  @Override public void close() throws IOException {  close(false);}  }
class C{  private boolean canBeFetched(int i){  AbstractNodeTask task=waitingQueue.get(i);  return workingList.get(task.getNode()) == null;}  }
class C{  public boolean writeTemplateEntry(TemplateEntry templateEntry) throws IOException, LDIFException {  ifNull(templateEntry);  return templateEntry.toLDIF(exportConfig);}  }
class C{  public HomePageViewBean(){  super("HomePage");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  ptModel=new CCPageTitleModel(getClass().getClassLoader().getResourceAsStream("com/sun/identity/console/simplePageTitle.xml"));  registerChildren();}  }
class C{  public Builder orderingMatchingRule(String orderingMatchingRuleOID){  this.orderingMatchingRuleOID=orderingMatchingRuleOID;  return this;}  }
class C{  public OperationStore(){  this(new OperationRateFactory(),new HashMap<CTSOperation,OperationMonitor>());}  }
class C{  public LDAPAttribute(String attributeType,ByteString value){  this.attributeType=attributeType;  values=newArrayList(value);}  }
class C{  public void insertIcon(Icon g){  MutableAttributeSet inputAttributes=getInputAttributes();  inputAttributes.removeAttributes(inputAttributes);  StyleConstants.setIcon(inputAttributes,g);  replaceSelection(" ",false);  inputAttributes.removeAttributes(inputAttributes);}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  public void visitAttribute(Attribute attr){  if (fv != null) {    fv.visitAttribute(attr);  }}  }
class C{  public TIFFDirectory(RandomAccessFileOrArray stream,long ifd_offset,int directory) throws java.io.IOException {  long global_save_offset=stream.getPosition();  stream.seek(0L);  int endian=stream.readUnsignedShort();  if (!isValidEndianTag(endian)) {    throw new IOException(IOException.BadEndiannessTag0x4949Or0x4d4d);  }  isBigEndian=endian == 0x4d4d;  stream.seek(ifd_offset);  int dirNum=0;  while (dirNum < directory) {    int numEntries=readUnsignedShort(stream);    stream.seek(ifd_offset + 12 * numEntries);    ifd_offset=readUnsignedInt(stream);    stream.seek(ifd_offset);    dirNum++;  }  initialize(stream);  stream.seek(global_save_offset);}  }
class C{  public void clearStack(){  top=0;}  }
class C{  public JTextField(int columns){  this(null,null,columns);}  }
class C{  public String toString(){  return ("FederationPrincipal:  " + name);}  }
class C{  private Socket createSSLSocket(SSLConnectionFactory sslConnectionFactory) throws SSLConnectionException, LDAPConnectionException {  ConnectException ce=null;  try {    for (    InetAddress inetAddress : InetAddress.getAllByName(hostName)) {      try {        return sslConnectionFactory.createSocket(inetAddress,portNumber);      } catch (      ConnectException ce2) {        if (ce == null) {          ce=ce2;        }      }    }  } catch (  UnknownHostException uhe) {    LocalizableMessage msg=INFO_RESULT_CLIENT_SIDE_CONNECT_ERROR.get();    throw new LDAPConnectionException(msg,CLIENT_SIDE_CONNECT_ERROR,null,uhe);  }catch (  Exception ex) {    logger.traceException(ex);    throw new LDAPConnectionException(LocalizableMessage.raw(ex.getMessage()),ex);  }  if (ce != null) {    LocalizableMessage msg=INFO_RESULT_CLIENT_SIDE_CONNECT_ERROR.get();    throw new LDAPConnectionException(msg,CLIENT_SIDE_CONNECT_ERROR,null,ce);  }  return null;}  }
class C{  protected void fireMenuKeyReleased(MenuKeyEvent event){  if (DEBUG) {    System.out.println("in JMenuItem.fireMenuKeyReleased for " + getText() + "  "+ KeyStroke.getKeyStrokeForEvent(event));  }  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuKeyListener.class) {      ((MenuKeyListener)listeners[i + 1]).menuKeyReleased(event);    }  }}  }
class C{  public AsyncBoxView(Element elem,int axis){  super(elem);  stats=new ArrayList<ChildState>();  this.axis=axis;  locator=new ChildLocator();  flushTask=new FlushTask();  minorSpan=Short.MAX_VALUE;  estimatedMajorSpan=false;}  }
class C{  public void join(ShapeTile p_shape,int p_layer){  if (p_shape == null)   return;  if (p_layer < 0 || p_layer >= octa_arr.length)   return;  int corner_count=p_shape.border_line_count();  for (int index=0; index < corner_count; ++index)   join(p_shape.corner_approx(index),p_layer);  area_cleared=false;}  }
class C{  public void makeImmutable(){  mutable=false;}  }
class C{  public ServerNotActiveException(String s){  super(s);}  }
class C{  public void hierarchyChanged(HierarchyEvent e){  ((HierarchyListener)a).hierarchyChanged(e);  ((HierarchyListener)b).hierarchyChanged(e);}  }
class C{  public HashMap(Map<? extends K,? extends V> m){  this.loadFactor=DEFAULT_LOAD_FACTOR;  putMapEntries(m,false);}  }
class C{  public Rest2LdapEndpoint(Rest2ldapEndpointCfg configuration,ServerContext serverContext){  super(configuration,serverContext);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String patternType=getStringOptionValue(IArgument.AGENT_TYPE);  String filter=getStringOptionValue(IArgument.FILTER);  if (patternType == null) {    patternType="";  }  if ((filter == null) || (filter.length() == 0)) {    filter="*";  }  String[] params={realm,patternType,filter};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_AGENTS",params);  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    IdSearchResults isr=amir.searchIdentities(IdType.AGENTONLY,filter,new IdSearchControl());    Set results=isr.getSearchResults();    if ((results != null) && !results.isEmpty()) {      for (Iterator i=results.iterator(); i.hasNext(); ) {        AMIdentity amid=(AMIdentity)i.next();        if (!matchType(amid,patternType)) {          i.remove();        }      }    }    if ((results != null) && !results.isEmpty()) {      for (Iterator i=results.iterator(); i.hasNext(); ) {        AMIdentity amid=(AMIdentity)i.next();        Object[] args={amid.getName(),amid.getUniversalId()};        outputWriter.printlnMessage(MessageFormat.format(getResourceString("format-search-agent-results"),args));      }    } else {      outputWriter.printlnMessage(getResourceString("search-agent-no-entries"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_LIST_AGENTS",params);  } catch (  IdRepoException e) {    String[] args={realm,patternType,filter,e.getMessage()};    debugError("ListAgents.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AGENTS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,patternType,filter,e.getMessage()};    debugError("ListAgents.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AGENTS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  private static int base64toInt(char c){  int result;  if (c >= base64ToInt.length)   result=-1; else   result=base64ToInt[c];  if (result < 0)   throw new IllegalArgumentException("Illegal character " + c);  return result;}  }
class C{  public void reset(){  super.reset();  bodyContent=null;  buffer=null;  displayed=false;  abortedException=null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatagetlength.class,args);}  }
class C{  public boolean isLogo(){  return logo;}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public void runTo(int index){  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_CANNOT_INDEX,null));  if ((index >= 0) && (m_next < m_firstFree))   m_next=index; else   m_next=m_firstFree - 1;}  }
class C{  static void invokePropertyChange(Object listener,Object ev){  try {    propertyChangeMethod.invoke(listener,ev);  } catch (  IllegalAccessException x) {    throw new AssertionError(x);  }catch (  InvocationTargetException x) {    Throwable cause=x.getCause();    if (cause instanceof Error)     throw (Error)cause;    if (cause instanceof RuntimeException)     throw (RuntimeException)cause;    throw new AssertionError(x);  }}  }
class C{  @Override public void customize(ConfigurableEmbeddedServletContainer container){  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);  mappings.add("html","text/html;charset=utf-8");  mappings.add("json","text/html;charset=utf-8");  container.setMimeMappings(mappings);}  }
class C{  public static void remove(String key){  if (mSharedPreferences == null) {    return;  }  mSharedPreferences.edit().remove(key).apply();}  }
class C{  @Override public void createDatabase(Database db) throws InvalidObjectException, MetaException {  if (db == null)   throw new InvalidObjectException("Invalid database object null");  try {    Database database=metastore.getDatabase(db.getName());    if (database != null) {      throw new MetaException("Database already exists: " + db.getName());    }  } catch (  NoSuchObjectException e) {  }  try {    metastore.createDatabase(db);  } catch (  InvalidObjectException|MetaException e) {    LOG.error("Unable to create database: {}",e.getMessage());    throw e;  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  logger.info("Got an INVITE  " + request);  timer.schedule(new DelayedInviteResponsesTask(requestEvent,sipProvider),100);}  }
class C{  public GSERParser readStartSequence() throws DecodeException {  next(GSER_SEQUENCE_START);  skip(GSER_SP);  return this;}  }
class C{  public boolean isCookieEncodingEnabled(){  return cookieEncoding;}  }
class C{  public SQLNonTransientConnectionException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  private MessageTypeInfo createMessageTypeInfo(Field field,Method method,ApiaryConfig apiaryConfig,boolean deep){  Type type=apiaryConfig.getType(field.getTypeUrl());  String typeName=typeNameGenerator.getMessageTypeName(field.getTypeUrl());  Map<String,FieldInfo> fields=new HashMap<>();  if (deep) {    for (    Field field2 : type.getFieldsList()) {      fields.put(field2.getName(),createFieldInfo(field2,type,method));    }  }  return MessageTypeInfo.newBuilder().typeName(typeName).subpackage(typeNameGenerator.getSubpackage(false)).fields(fields).build();}  }
class C{  private void drawResultPoints(Bitmap barcode,float scaleFactor,Result rawResult){  ResultPoint[] points=rawResult.getResultPoints();  if (points != null && points.length > 0) {    Canvas canvas=new Canvas(barcode);    Paint paint=new Paint();    paint.setColor(getResources().getColor(R.color.result_points));    if (points.length == 2) {      paint.setStrokeWidth(4.0f);      drawLine(canvas,paint,points[0],points[1],scaleFactor);    } else     if (points.length == 4 && (rawResult.getBarcodeFormat() == BarcodeFormat.UPC_A || rawResult.getBarcodeFormat() == BarcodeFormat.EAN_13)) {      drawLine(canvas,paint,points[0],points[1],scaleFactor);      drawLine(canvas,paint,points[2],points[3],scaleFactor);    } else {      paint.setStrokeWidth(10.0f);      for (      ResultPoint point : points) {        if (point != null) {          canvas.drawPoint(scaleFactor * point.getX(),scaleFactor * point.getY(),paint);        }      }    }  }}  }
class C{  private static boolean writeToFile(String filePath,Writer writer){  boolean success=false;  try {    if (writer != null) {      File destFile=new File(filePath);      if (destFile.exists()) {        destFile.delete();      }      byte[] data=writer.toString().getBytes();      writer.close();      FileOutputStream out=new FileOutputStream(destFile);      out.write(data);      out.flush();      out.close();      success=true;    }  } catch (  Exception ex) {    Debug.log("FileUtils.writeToFile() threw exception : ",ex);  }  return success;}  }
class C{  public void deleteField(FieldKey fieldKey) throws KeyNotFoundException {  id3Tag.deleteField(fieldKey);}  }
class C{  public InvalidValue(){  super();}  }
class C{  public void paintScrollBarThumbBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  @Override public void enqueueRequest(Operation operation) throws DirectoryException {  DirectoryServer.checkCanEnqueueRequest(operation,true);  operation.run();  operation.operationCompleted();}  }
class C{  public GSERParser(CharSequence value){  Reject.checkNotNull(value);  this.gserValue=value.toString();  this.pos=0;  this.length=value.length();}  }
class C{  private PooledObject<T> create(final K key) throws Exception {  int maxTotalPerKeySave=getMaxTotalPerKey();  if (maxTotalPerKeySave < 0) {    maxTotalPerKeySave=Integer.MAX_VALUE;  }  final int maxTotal=getMaxTotal();  final ObjectDeque<T> objectDeque=poolMap.get(key);  boolean loop=true;  while (loop) {    final int newNumTotal=numTotal.incrementAndGet();    if (maxTotal > -1 && newNumTotal > maxTotal) {      numTotal.decrementAndGet();      if (getNumIdle() == 0) {        return null;      }      clearOldest();    } else {      loop=false;    }  }  Boolean create=null;  while (create == null) {synchronized (objectDeque.makeObjectCountLock) {      final long newCreateCount=objectDeque.getCreateCount().incrementAndGet();      if (newCreateCount > maxTotalPerKeySave) {        objectDeque.getCreateCount().decrementAndGet();        if (objectDeque.makeObjectCount == 0) {          create=Boolean.FALSE;        } else {          objectDeque.makeObjectCountLock.wait();        }      } else {        objectDeque.makeObjectCount++;        create=Boolean.TRUE;      }    }  }  if (!create.booleanValue()) {    numTotal.decrementAndGet();    return null;  }  PooledObject<T> p=null;  try {    p=factory.makeObject(key);  } catch (  final Exception e) {    numTotal.decrementAndGet();    objectDeque.getCreateCount().decrementAndGet();    throw e;  } finally {synchronized (objectDeque.makeObjectCountLock) {      objectDeque.makeObjectCount--;      objectDeque.makeObjectCountLock.notifyAll();    }  }  createdCount.incrementAndGet();  objectDeque.getAllObjects().put(new IdentityWrapper<>(p.getObject()),p);  return p;}  }
class C{  protected void adjustEntry(Object key){  Entry tab[]=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      if (prev != null) {        prev.next=e.next;      } else {        tab[index]=e.next;      }    }  }}  }
class C{  public static String decodeUnicodeStr(String s){  StringBuilder sb=new StringBuilder(s.length());  char[] chars=s.toCharArray();  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if (c == '\\' && chars[i + 1] == 'u') {      char cc=0;      for (int j=0; j < 4; j++) {        char ch=Character.toLowerCase(chars[i + 2 + j]);        if ('0' <= ch && ch <= '9' || 'a' <= ch && ch <= 'f') {          cc|=(Character.digit(ch,16) << (3 - j) * 4);        } else {          cc=0;          break;        }      }      if (cc > 0) {        i+=5;        sb.append(cc);        continue;      }    }    sb.append(c);  }  return sb.toString();}  }
class C{  public PropertyListFormatException(String message){  super(message);}  }
class C{  protected HttpURLConnection createDelete(String uri) throws IOException {  return createConnection(uri,METHOD_DELETE);}  }
class C{  private void arrayToAttributeTypes(String[] attributeArray,String attrStr) throws AciException {  for (  String attr : attributeArray) {    String attribute=attr.toLowerCase();    if (attribute.equals("*")) {      if (!allUserAttributes) {        allUserAttributes=true;      } else {        LocalizableMessage message=WARN_ACI_TARGETATTR_INVALID_ATTR_TOKEN.get(attrStr);        throw new AciException(message);      }    } else     if (attribute.equals("+")) {      if (!allOpAttributes) {        allOpAttributes=true;      } else {        LocalizableMessage message=WARN_ACI_TARGETATTR_INVALID_ATTR_TOKEN.get(attrStr);        throw new AciException(message);      }    } else {      AttributeType attrType=DirectoryServer.getSchema().getAttributeType(attribute);      if (attrType.isOperational()) {        opAttributes.add(attrType);      } else {        attributes.add(attrType);      }    }  }}  }
class C{  public static void closeQuietly(AutoCloseable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public int indexOfObject(Object obj){  NSObject nso=NSObject.wrap(obj);  for (int i=0; i < array.length; i++) {    if (array[i].equals(nso)) {      return i;    }  }  return -1;}  }
class C{  private static BigInteger toUnsignedBigInteger(long i){  if (i >= 0L)   return BigInteger.valueOf(i); else {    int upper=(int)(i >>> 32);    int lower=(int)i;    return (BigInteger.valueOf(Integer.toUnsignedLong(upper))).shiftLeft(32).add(BigInteger.valueOf(Integer.toUnsignedLong(lower)));  }}  }
class C{  public String addResourceLink(String resourceLinkName,String type) throws MalformedObjectNameException {  NamingResourcesImpl nresources=(NamingResourcesImpl)this.resource;  if (nresources == null) {    return null;  }  ContextResourceLink resourceLink=nresources.findResourceLink(resourceLinkName);  if (resourceLink != null) {    throw new IllegalArgumentException("Invalid resource link name - already exists'" + resourceLinkName + "'");  }  resourceLink=new ContextResourceLink();  resourceLink.setName(resourceLinkName);  resourceLink.setType(type);  nresources.addResourceLink(resourceLink);  ManagedBean managed=registry.findManagedBean("ContextResourceLink");  ObjectName oname=MBeanUtils.createObjectName(managed.getDomain(),resourceLink);  return (oname.toString());}  }
class C{  public static synchronized void cleanup(){  LDAPProfile.getInstance().popWrapper();  AbstractManagedObjectDefinition<?,?> root=RootCfgDefn.getInstance();  root.deregisterRelationDefinition(RD_TEST_ONE_TO_MANY_PARENT);  root.deregisterRelationDefinition(RD_TEST_ONE_TO_ZERO_OR_ONE_PARENT);  TestParentCfgDefn parentDef=TestParentCfgDefn.getInstance();  ManagedObjectDefinitionI18NResource.getInstance().removeResourceBundle(parentDef);  TestChildCfgDefn childDef=TestChildCfgDefn.getInstance();  ManagedObjectDefinitionI18NResource.getInstance().removeResourceBundle(childDef);}  }
class C{  public boolean isFragment(){  return fragment;}  }
class C{  protected static final boolean classEquals(Class first,Class second){  return first.equals(second) || first.getName().equals(second.getName());}  }
class C{  public synchronized StringBuffer reverse(){  reverse0();  return this;}  }
class C{  public LicenseRejectedException(License rejectedLicense){  super("User rejected required license terms");  this.rejectedLicense=rejectedLicense;}  }
class C{  public static void resetShutdownCalled(){  shutdownCalled=false;}  }
class C{  public static Note flat(int octave,Tone tone){  Validate.isTrue(octave != 2,"Octave cannot be 2 for flats");  tone=tone == Tone.G ? Tone.F : Tone.values()[tone.ordinal() - 1];  return new Note(octave,tone,tone.isSharpable());}  }
class C{  public NO_RESPONSE(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public static ConfigParameters configParams(){  return new ConfigParameters();}  }
class C{  public boolean hasKey() throws SdpParseException {  String key=getKeyData();  return key != null;}  }
class C{  public static void parseCookies(Map headers,HashMap cookieTable){  if (headers == null || headers.isEmpty()) {    return;  }  if (debug.messageEnabled()) {    debug.message("header in parseCookies(): " + headers);  }  for (Iterator hrs=headers.entrySet().iterator(); hrs.hasNext(); ) {    Map.Entry me=(Map.Entry)hrs.next();    String key=(String)me.getKey();    if (key != null && (key.equalsIgnoreCase("Set-cookie") || (key.equalsIgnoreCase("cookie")))) {      List list=(List)me.getValue();      if (list == null || list.isEmpty()) {        continue;      }      Cookie cookie=null;      for (Iterator it=list.iterator(); it.hasNext(); ) {        String cookieStr=(String)it.next();        if (debug.messageEnabled()) {          debug.message("cookie: " + cookieStr);        }        StringTokenizer stz=new StringTokenizer(cookieStr,";");        if (stz.hasMoreTokens()) {          String nameValue=stz.nextToken();          int index=nameValue.indexOf("=");          if (index == -1) {            continue;          }          String tmpName=nameValue.substring(0,index).trim();          String value=nameValue.substring(index + 1);          cookie=new Cookie(tmpName,value);          cookieTable.put(tmpName,cookie);        }      }    }  }}  }
class C{  public static void unbanIP(String address){  server.unbanIP(address);}  }
class C{  void popNamespaces(int elemDepth,ContentHandler saxHandler){  while (true) {    if (m_nodeStack.isEmpty())     return;    MappingRecord map=(MappingRecord)(m_nodeStack.peek());    int depth=map.m_declarationDepth;    if (elemDepth < 1 || map.m_declarationDepth < elemDepth)     break;    MappingRecord nm1=(MappingRecord)m_nodeStack.pop();    String prefix=map.m_prefix;    Stack prefixStack=getPrefixStack(prefix);    MappingRecord nm2=(MappingRecord)prefixStack.peek();    if (nm1 == nm2) {      prefixStack.pop();      if (saxHandler != null) {        try {          saxHandler.endPrefixMapping(prefix);        } catch (        SAXException e) {        }      }    }  }}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.SASLRequestType createSASLRequestType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.SASLRequestTypeImpl();}  }
class C{  public boolean isDone(){  return (index > 1);}  }
class C{  private void doAcquireShared(long arg){  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          if (interrupted)           selfInterrupt();          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  @SuppressWarnings("unchecked") public Object[] toArray(Object[] array){  return events.toArray(array);}  }
class C{  public void assignServices(Set serviceNames) throws AMException, SSOException {  if (serviceNames == null || serviceNames.isEmpty()) {    return;  }  Set assignedSerivces=getAssignedServices();  Set newOCs=new HashSet();  Set canAssign=new HashSet();  Iterator iter=serviceNames.iterator();  while (iter.hasNext()) {    String serviceName=(String)iter.next();    if (assignedSerivces.contains(serviceName)) {      debug.error(AMSDKBundle.getString("125"));      throw new AMException(AMSDKBundle.getString("125",super.locale),"125");    }    canAssign.add(serviceName);    Set serviceOCs=AMServiceUtils.getServiceObjectClasses(token,canAssign);    newOCs.addAll(serviceOCs);  }  Set oldOCs=getAttribute("objectclass");  newOCs=AMCommonUtils.combineOCs(newOCs,oldOCs);  setAttribute("objectclass",newOCs);  store();  Iterator it=canAssign.iterator();  while (it.hasNext()) {    String thisService=(String)it.next();    try {      ServiceSchemaManager ssm=new ServiceSchemaManager(thisService,token);      ServiceSchema ss=null;      Object args[]={thisService};      ss=ssm.getSchema(SchemaType.USER);      if (ss == null) {        ss=ssm.getSchema(SchemaType.DYNAMIC);      }      if (ss == null) {        debug.error(AMSDKBundle.getString("1001"));        throw new AMException(AMSDKBundle.getString("1001",args,super.locale),"1001",args);      }    } catch (    SMSException se) {      debug.error("AMUserImpl: schema type validation failed-> " + thisService,se);    }  }}  }
class C{  public ServiceSchemaModificationWrapper(String serviceName,String schemaName,Set<AttributeSchemaImpl> attrs,Map<String,ServiceSchemaModificationWrapper> subSchemas){  this.serviceName=serviceName;  this.schemaName=schemaName;  this.attributes=attrs;  this.subSchemas=subSchemas;}  }
class C{  public static boolean verifyNameIdMappingResponseSignature(Element elt,SOAPMessage msg,String realm){  FSUtils.debug.message("FSNameMappingHandler.verifyNameIdMappingResponseSignature:Called");  try {    FSNameIdentifierMappingResponse nimRes=new FSNameIdentifierMappingResponse(elt);    if (metaManager == null) {      FSUtils.debug.error("FSNameMappingHandler.verifyNameIdMappingResponseSignature:" + " Unable to get meta manager");      return false;    }    String entityId=nimRes.getProviderID();    X509Certificate cert=KeyUtil.getVerificationCert(metaManager.getIDPDescriptor(realm,entityId),entityId,true);    if (cert == null) {      FSUtils.debug.error("FSNameMappingHandler." + "verifyNameIdMappingResponseSignature: couldn't obtain " + "the cert for signature verification.");      return false;    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameMappingHandler.verifyNameIdMappingResponseSignature:" + " Provider's cert is found.");      FSUtils.debug.message("FSNameMappingHandler.verifyNameIdMappingResponseSignature:" + "xmlString to be verified: " + XMLUtils.print(elt));    }    Document doc=(Document)FSServiceUtils.createSOAPDOM(msg);    XMLSignatureManager manager=XMLSignatureManager.getInstance();    return manager.verifyXMLSignature(doc,cert);  } catch (  Exception e) {    FSUtils.debug.error("FSNameMappingHandler.verifyNameIdMappingResponseSignature: " + "Exception occured while verifying signature:",e);    return false;  }}  }
class C{  public EmbeddedOpenSSO(ServletContext servletct,String baseDir,Map configData){  this.baseDir=baseDir;  this.servletct=servletct;  if (servletct != null) {    uri=servletct.getContextPath();  } else {    uri="/eopensso";  }  this.configData=configData;}  }
class C{  private boolean isOriginAllowed(final String origin){  if (anyOriginAllowed) {    return true;  }  return allowedOrigins.contains(origin);}  }
class C{  private String resourceId(){  return subSchemaPath.isEmpty() ? null : lastSchemaNodeName();}  }
class C{  public ApiKey createApiKey(EntityManager em,String tenantId,ApplicationManager am) throws Exception {  Tenant tenant=getTenant(em,tenantId);  if (tenant == null) {    throw new NullPointerException("Tenant can't be empty");  }  EntityTransaction t=em.getTransaction();  try {    String apiKey=UUID.randomUUID().toString();    ApiKey key=new ApiKey(apiKey,true);    key.setTenant(tenant);    t.begin();    em.persist(key);    sendApikeyToKafka(am,CREATED_APIKEY,tenant.getTenant_id(),key.getApikey());    em.flush();    t.commit();    logger.info("Created api key for tenant:" + tenantId);    return key;  } catch (  Exception e) {    if (t.isActive()) {      t.rollback();    }    logger.log(Level.SEVERE,"Failed to create apikey for tenant:" + tenant,e);    throw e;  }}  }
class C{  public void testDivideExceptionInvalidRM(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  try {    aNumber.divide(bNumber,100);    fail("IllegalArgumentException has not been caught");  } catch (  IllegalArgumentException e) {    assertEquals("Improper exception message","Invalid rounding mode",e.getMessage());  }}  }
class C{  public CharVector(char[] a,int capacity){  if (capacity > 0) {    blockSize=capacity;  } else {    blockSize=DEFAULT_BLOCK_SIZE;  }  array=a;  n=a.length;}  }
class C{  BCRSAPrivateCrtKey(RSAPrivateCrtKey key){  this.modulus=key.getModulus();  this.publicExponent=key.getPublicExponent();  this.privateExponent=key.getPrivateExponent();  this.primeP=key.getPrimeP();  this.primeQ=key.getPrimeQ();  this.primeExponentP=key.getPrimeExponentP();  this.primeExponentQ=key.getPrimeExponentQ();  this.crtCoefficient=key.getCrtCoefficient();}  }
class C{  public ProtocolException(String message){  super(message);}  }
class C{  public SystemInfoMonitorTestCase() throws Exception {  super("cn=System Info,cn=Monitor Providers,cn=config");}  }
class C{  protected byte[] encodeMods(List<Modification> mods){  if (mods == null || mods.isEmpty()) {    return new byte[0];  }  ByteStringBuilder byteBuilder=new ByteStringBuilder();  ASN1Writer writer=ASN1.getWriter(byteBuilder);  for (  Modification mod : mods) {    Attribute attr=mod.getAttribute();    AttributeType type=attr.getAttributeDescription().getAttributeType();    if (!AttributeUsage.DSA_OPERATION.equals(type.getUsage()) && !EntryHistorical.isHistoricalAttribute(attr)) {      LDAPModification ldapmod=new LDAPModification(mod.getModificationType(),new LDAPAttribute(mod.getAttribute()));      try {        ldapmod.write(writer);      } catch (      Exception e) {      }    }  }  return byteBuilder.toByteArray();}  }
class C{  @SuppressWarnings("unchecked") public void writeClob(Clob x) throws SQLException {  if (x == null) {    attribs.add(null);  } else {    attribs.add(new SerialClob(x));  }}  }
class C{  public PdfException(Throwable cause){  this(UnknownPdfException,cause);}  }
class C{  public IDRepoModelImpl(HttpServletRequest req,Map map){  super(req,map);}  }
class C{  public boolean isOptional(final AttributeType attributeType){  return optionalAttributes.contains(attributeType);}  }
class C{  private static DN makeDNFromServerUniqueId(String serverUniqueId) throws ADSContextException {  return DN.valueOf("cn=" + Rdn.escapeValue(serverUniqueId) + ","+ getServerContainerDN());}  }
class C{  public void readOID() throws IOException {  if (tag != ASN1Constants.TAG_OID) {    throw expected("OID");  }  if (length < 1) {    throw new ASN1Exception("Wrong length for ASN.1 object identifier at [" + tagOffset + "]");  }  readContent();  if ((buffer[offset - 1] & 0x80) != 0) {    throw new ASN1Exception("Wrong encoding at [" + (offset - 1) + "]");  }  oidElement=1;  for (int i=0; i < length; i++, ++oidElement) {    while ((buffer[contentOffset + i] & 0x80) == 0x80) {      i++;    }  }}  }
class C{  protected void nonBlockingFlush(){  LinkedList writeBuffer=null;synchronized (this) {    if (recordBuffer.size() <= 0) {      if (Debug.messageEnabled()) {        Debug.message(fileName + ":FileHandler.flush: no records in buffer to write");      }      return;    }    writeBuffer=recordBuffer;    recordBuffer=new LinkedList();  }  LogTask task=new LogTask(writeBuffer);  try {    LoggingThread.getInstance().run(task);  } catch (  ThreadPoolException ex) {synchronized (this) {      task.run();    }  }}  }
class C{  public boolean checkArguments(List arguments){  boolean validArgs=true;  if (arguments != null && arguments.size() > 0) {    String specifiedArgs=formatArgs(arguments);    Debug.log("MigrateHandler: invalid argument(s) specified - " + specifiedArgs);    printConsoleMessage(LOC_HR_MSG_INVALID_OPTION,new Object[]{specifiedArgs});    validArgs=false;  }  return validArgs;}  }
class C{  public static boolean areAnyGranted(String authorities) throws IOException {  AuthorizeFaceletsTag authorizeTag=new AuthorizeFaceletsTag();  authorizeTag.setIfAnyGranted(authorities);  return authorizeTag.authorize();}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public void javacError(String errorReport,Exception e) throws JasperException {  errHandler.javacError(errorReport,e);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.example.org/schema";  DocumentType docType=null;  DOMImplementation domImpl;  Document aNewDoc;  String charact;  domImpl=getImplementation();{    boolean success=false;    try {      aNewDoc=domImpl.createDocument(namespaceURI,"",docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  protected void updateNextObject(){  if (!updateNextIndex()) {    findNextValidParent();  }}  }
class C{  public boolean isLockedOut(){  boolean isLockedOut=amlc.isLockedOut();  if (authDebug.messageEnabled()) {    authDebug.message("isLockedOut : " + isLockedOut);  }  return isLockedOut;}  }
class C{  @NonNull public static Interpolator pingPong(Interpolator interpolator){  return join(interpolator,reverse(interpolator));}  }
class C{  public boolean shouldUpdateStyleOnAncestorChanged(){  return false;}  }
class C{  public static SearchFilter createExtensibleMatchFilter(AttributeType attributeType,ByteString assertionValue,String matchingRuleID,boolean dnAttributes) throws DirectoryException {  if (attributeType == null && matchingRuleID == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_CREATE_EXTENSIBLE_MATCH_NO_AT_OR_MR.get();    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  return new SearchFilter(FilterType.EXTENSIBLE_MATCH,null,null,attributeType,null,assertionValue,null,null,null,matchingRuleID,dnAttributes);}  }
class C{  public ObjectId(){  _time=(int)(System.currentTimeMillis() / 1000);  _machine=_genmachine;  _inc=_nextInc.getAndIncrement();  _new=true;}  }
class C{  public String dump(int mode){  StringBuilder sb=new StringBuilder();  BlockChar blockChar=new BlockChar();  for (int y=0; y < height - 7; y+=8) {    int pos=y * width * 4;    if (html) {      String last="";      for (int x=0; x < width - 3; x+=4) {        blockChar.load(data,pos,width * 4);        String fg=hex6(blockChar.fgColor[0],blockChar.fgColor[1],blockChar.fgColor[2]);        String bg=hex6(blockChar.bgColor[0],blockChar.bgColor[1],blockChar.bgColor[2]);        String style="background-color:#" + bg + ";color:#"+ fg;        if (!style.equals(last)) {          if (!last.isEmpty()) {            sb.append("</tt>");          }          sb.append("<tt style='").append(style).append("'>");          last=style;        }        sb.append("&#" + ((int)blockChar.character) + ";");        pos+=16;      }      sb.append("</tt><br />\n");    } else {      String lastFg="";      String lastBg="";      for (int x=0; x < width - 3; x+=4) {        blockChar.load(data,pos,width * 4);        String fg=Ansi.color(Ansi.FG | mode,blockChar.fgColor[0],blockChar.fgColor[1],blockChar.fgColor[2]);        String bg=Ansi.color(Ansi.BG | mode,blockChar.bgColor[0],blockChar.bgColor[1],blockChar.bgColor[2]);        if (!fg.equals(lastFg)) {          sb.append(fg);          lastFg=fg;        }        if (!bg.equals(lastBg)) {          sb.append(bg);          lastBg=bg;        }        sb.append(blockChar.character);        pos+=16;      }      sb.append(Ansi.RESET).append("\n");    }  }  return sb.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getNamedItemNS03.class,args);}  }
class C{  @Override public void execute() throws BuildException {  if (testIfCondition() && testUnlessCondition()) {    try {      String error=null;      MBeanServerConnection jmxServerConnection=getJMXConnection();      error=jmxExecute(jmxServerConnection);      if (error != null && isFailOnError()) {        throw new BuildException(error);      }    } catch (    Exception e) {      if (isFailOnError()) {        throw new BuildException(e);      } else {        handleErrorOutput(e.getMessage());      }    } finally {      closeRedirector();    }  }}  }
class C{  private DeferredFileOutputStream(int threshold,File outputFile,String prefix,String suffix,File directory){  super(threshold);  this.outputFile=outputFile;  memoryOutputStream=new ByteArrayOutputStream();  currentOutputStream=memoryOutputStream;  this.prefix=prefix;  this.suffix=suffix;  this.directory=directory;}  }
class C{  public TerminationActionAttribute(byte[] octets){  super(octets);  OctetUtils.toIntVal(octets);}  }
class C{  private void startServer(boolean verifyCanConnect,boolean suppressOutput) throws ApplicationException {  if (suppressOutput && !StandardOutputSuppressor.isSuppressed()) {    StandardOutputSuppressor.suppress();  }  if (suppressOutput && application != null) {    application.setNotifyListeners(false);  }  try {    if (application != null) {      LocalizableMessageBuilder mb=new LocalizableMessageBuilder();      mb.append(application.getFormattedProgress(INFO_PROGRESS_STARTING.get()));      mb.append(application.getLineBreak());      application.notifyListeners(mb.toMessage());    }    try {      startServerViaAnotherProcess();      if (verifyCanConnect) {        verifyCanConnect();      }    } catch (    IOException|InterruptedException ioe) {      throw new ApplicationException(ReturnCode.START_ERROR,getThrowableMsg(INFO_ERROR_STARTING_SERVER.get(),ioe),ioe);    }  }  finally {    if (suppressOutput) {      if (StandardOutputSuppressor.isSuppressed()) {        StandardOutputSuppressor.unsuppress();      }      if (application != null) {        application.setNotifyListeners(true);      }    }  }}  }
class C{  private String tidyFormat(String format){  boolean escape=false;  StringBuilder result=new StringBuilder();  int len=format.length();  char x;  for (int i=0; i < len; i++) {    x=format.charAt(i);    if (escape || x != 'S') {      result.append(x);    } else {      result.append(msecPattern);    }    if (x == '\'') {      escape=!escape;    }  }  return result.toString();}  }
class C{  public WeakHashMap(Map<? extends K,? extends V> m){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR);  putAll(m);}  }
class C{  public static ImageData create(java.awt.Image image,java.awt.Color color) throws java.io.IOException {  return ImageDataFactory.create(image,color,false);}  }
class C{  private static String which(String classname,ClassLoader loader){  String classnameAsResource=classname.replace('.','/') + ".class";  if (loader == null)   loader=ClassLoader.getSystemClassLoader();  URL it=ss.getResourceAsURL(loader,classnameAsResource);  if (it != null) {    return it.toString();  } else {    return null;  }}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(networkNumber).toString();}  }
class C{  XSLTSchema(){  build();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.AttributeQueryElement createAttributeQueryElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.AttributeQueryElementImpl();}  }
class C{  public Node appendChild(Node newChild) throws DOMException {  if (null == newChild) {    error(XSLTErrorResources.ER_NULL_CHILD,null);  }  ElemTemplateElement elem=(ElemTemplateElement)newChild;  if (null == m_firstChild) {    m_firstChild=elem;  } else {    ElemTemplateElement last=(ElemTemplateElement)getLastChild();    last.m_nextSibling=elem;  }  elem.m_parentNode=this;  return newChild;}  }
class C{  public PdfIndirectReference add(PdfIndirectReference reference){  if (reference == null) {    return null;  }  int objNr=reference.getObjNumber();  this.count=Math.max(this.count,objNr);  ensureCount(objNr);  xref[objNr]=reference;  return reference;}  }
class C{  public void testSubListAndNonStructuralChanges(){  CopyOnWriteArrayList<String> list=new CopyOnWriteArrayList<String>();  list.addAll(Arrays.asList("a","b","c","d","e"));  List<String> bcd=list.subList(1,4);  list.set(2,"C");  try {    bcd.get(1);    fail();  } catch (  ConcurrentModificationException expected) {  }}  }
class C{  public void changePassword(Guid guid,String attrName,String oldPassword,String newPassword) throws UMSException {  Modification modification=new Modification(ModificationType.REPLACE,Attributes.singletonAttribute(attrName,newPassword));  String id=guid.getDn();  try {    DSConfigMgr dsCfg=DSConfigMgr.getDSConfigMgr();    String hostAndPort=dsCfg.getHostName("default");    SimpleBindRequest bindRequest=LDAPRequests.newSimpleBindRequest(id,oldPassword.toCharArray());    Options options=Options.defaultOptions().set(AUTHN_BIND_REQUEST,bindRequest);    try (ConnectionFactory factory=new LDAPConnectionFactory(hostAndPort,389,options)){      Connection ldc=factory.getConnection();      ldc.modify(LDAPRequests.newModifyRequest(id).addModification(modification));    } catch (    LdapException ldex) {      if (debug.warningEnabled()) {        debug.warning("DataLayer.changePassword:",ldex);      }      ResultCode errorCode=ldex.getResult().getResultCode();      if (ResultCode.NO_SUCH_OBJECT.equals(errorCode)) {        throw new EntryNotFoundException(id,ldex);      } else       if (ResultCode.INSUFFICIENT_ACCESS_RIGHTS.equals(errorCode)) {        throw new AccessRightsException(id,ldex);      } else {        throw new UMSException(id,ldex);      }    }  } catch (  LDAPServiceException ex) {    debug.error("DataLayer.changePassword:",ex);    throw new UMSException(id,ex);  }}  }
class C{  public boolean isAccepted(){  for (  License license : licenses) {    if (!license.isAccepted()) {      return false;    }  }  return true;}  }
class C{  public JSeparator(){  this(HORIZONTAL);}  }
class C{  public boolean isValid(){  return (validCode == VALID_CODE_VALID);}  }
class C{  @Override public AttributedCharacterIterator formatToCharacterIterator(Object obj){  CharacterIteratorFieldDelegate delegate=new CharacterIteratorFieldDelegate();  StringBuffer sb=new StringBuffer();  if (obj instanceof Double || obj instanceof Float) {    format(((Number)obj).doubleValue(),sb,delegate);  } else   if (obj instanceof Long || obj instanceof Integer || obj instanceof Short|| obj instanceof Byte|| obj instanceof AtomicInteger|| obj instanceof AtomicLong) {    format(((Number)obj).longValue(),sb,delegate);  } else   if (obj instanceof BigDecimal) {    format((BigDecimal)obj,sb,delegate);  } else   if (obj instanceof BigInteger) {    format((BigInteger)obj,sb,delegate,false);  } else   if (obj == null) {    throw new NullPointerException("formatToCharacterIterator must be passed non-null object");  } else {    throw new IllegalArgumentException("Cannot format given Object as a Number");  }  return delegate.getIterator(sb.toString());}  }
class C{  public void testConstrStringExceptionEmptyExponent1(){  String a="-238768.787678287e";  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public void initialize(String pdpEntityId,String pepEntityId,Map properties) throws XACMLException {}  }
class C{  public void paint(Graphics g,Shape allocation){  Rectangle alloc=allocation.getBounds();  view.setSize(alloc.width,alloc.height);  view.paint(g,allocation);}  }
class C{  private JsonValue validateSession(final SSOToken ssoToken){  try {    if (!ssoTokenManager.isValidToken(ssoToken)) {      if (LOGGER.messageEnabled()) {        LOGGER.message("SessionResource.validateSession() :: Session validation for token, " + ssoToken.getTokenID() + ", returned false.");      }      return sessionResourceUtil.invalidSession();    }    if (LOGGER.messageEnabled()) {      LOGGER.message("SessionResource.validateSession() :: Session validation for token, " + ssoToken.getTokenID() + ", returned true.");    }    final AMIdentity identity=sessionResourceUtil.getIdentity(ssoToken);    return json(object(field(sessionResourceUtil.VALID,true),field("uid",identity.getName()),field("realm",sessionResourceUtil.convertDNToRealm(identity.getRealm()))));  } catch (  SSOException e) {    if (LOGGER.errorEnabled()) {      LOGGER.error("SessionResource.validateSession() :: Session validation for token, " + ssoToken.getTokenID() + ", failed to return.",e);    }    return sessionResourceUtil.invalidSession();  }catch (  IdRepoException e) {    if (LOGGER.errorEnabled()) {      LOGGER.error("SessionResource.validateSession() :: Session validation for token, " + ssoToken.getTokenID() + ", failed to return.",e);    }    return sessionResourceUtil.invalidSession();  }}  }
class C{  @Override public void cancelAllOperationsExcept(CancelRequest cancelRequest,int messageID){synchronized (opsInProgressLock) {    try {      for (      int msgID : operationsInProgress.keySet()) {        if (msgID == messageID) {          continue;        }        Operation o=operationsInProgress.get(msgID);        if (o != null) {          try {            o.abort(cancelRequest);            if (keepStats) {              statTracker.updateAbandonedOperation();            }          } catch (          Exception e) {            logger.traceException(e);          }        }        operationsInProgress.remove(msgID);        lastCompletionTime.set(TimeThread.getTime());      }      for (      PersistentSearch persistentSearch : getPersistentSearches()) {        if (persistentSearch.getMessageID() == messageID) {          continue;        }        persistentSearch.cancel();        lastCompletionTime.set(TimeThread.getTime());      }    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  public void stopAutoScroll(){  isAutoScroll=false;  handler.removeMessages(SCROLL_WHAT);}  }
class C{  private String skipUntilEL(){  StringBuilder buf=new StringBuilder();  while (hasNextChar()) {    char ch=nextChar();    if (ch == '\\') {      char p0=peek(0);      if (p0 == '$' || (p0 == '#' && !isDeferredSyntaxAllowedAsLiteral)) {        buf.append(nextChar());      } else {        buf.append(ch);      }    } else     if ((ch == '$' || (ch == '#' && !isDeferredSyntaxAllowedAsLiteral)) && peek(0) == '{') {      this.type=ch;      nextChar();      break;    } else {      buf.append(ch);    }  }  return buf.toString();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureMethodElement createSignatureMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureMethodElementImpl();}  }
class C{  static long toLong(String v){  String buildPart="1";  long buildType=700;  if (v.endsWith("-SNAPSHOT")) {    buildPart="";    v=v.substring(0,v.indexOf("-SNAPSHOT"));    buildType=0;  } else   if (v.contains("-alpha-")) {    buildPart=v.substring(v.lastIndexOf('-') + 1);    v=v.substring(0,v.indexOf("-alpha-"));    buildType=100;  } else   if (v.contains("-beta-")) {    buildPart=v.substring(v.lastIndexOf('-') + 1);    v=v.substring(0,v.indexOf("-beta-"));    buildType=300;  } else   if (v.contains("-rc-")) {    buildPart=v.substring(v.lastIndexOf('-') + 1);    v=v.substring(0,v.indexOf("-rc-"));    buildType=500;  }  String[] parts=v.split("\\.");  if (parts.length > 3) {    throw new IllegalArgumentException("Illegal version number: " + v);  }  long major=parts.length > 0 ? Long.parseLong(parts[0]) : 0;  long minor=parts.length > 1 ? Long.parseLong(parts[1]) : 0;  long rev=parts.length > 2 ? Long.parseLong(parts[2]) : 0;  long build=buildPart.isEmpty() ? 0 : Long.parseLong(buildPart);  long result=(((major * 1000 + minor) * 1000 + rev) * 1000) + build + buildType;  return result;}  }
class C{  public void testNumericRepresentations() throws JSONException {  JSONStringer stringer=new JSONStringer();  stringer.array();  stringer.value(Long.MAX_VALUE);  stringer.value(Double.MIN_VALUE);  stringer.endArray();  assertEquals("[9223372036854775807,4.9E-324]",stringer.toString());}  }
class C{  private SAMLStatsAccessor(){}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.ObjectType createObjectType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.ObjectTypeImpl();}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public RandomTag(){  characterSet=null;  decimalFormat=null;  lengthRange=1;  maxLength=0;  minLength=0;  randomType=0;  maxValue=0L;  minValue=0L;  valueRange=1L;}  }
class C{  @Override public boolean read(java.io.ObjectInputStream p_object_stream){  if (!super.read(p_object_stream))   stat.userPrintln(classname + "read ERROR a");  if (!manual_rule_window.read(p_object_stream))   stat.userPrintln(classname + "read ERROR b");  refresh();  return true;}  }
class C{  private void decodeRules(){  decodeStartRule();  decodeEndRule();}  }
class C{  protected void diagnoseNumPaths(Vector paths,int numPathsEliminated,int numUniquePathsEliminated){  if (numPathsEliminated > 0) {    if (paths == m_paths) {      System.err.println("Eliminated " + numPathsEliminated + " total paths!");      System.err.println("Consolodated " + numUniquePathsEliminated + " redundent paths!");    } else {      System.err.println("Eliminated " + numPathsEliminated + " total global paths!");      System.err.println("Consolodated " + numUniquePathsEliminated + " redundent global paths!");    }  }}  }
class C{  public Rectangle modelToView(int pos) throws BadLocationException {  return getUI().modelToView(this,pos);}  }
class C{  public static String checkDoubleQuote(String cookie){  String double_quote="\"";  if ((cookie != null) && cookie.startsWith(double_quote) && cookie.endsWith(double_quote)) {    int last=cookie.length() - 1;    cookie=cookie.substring(1,last);  }  return cookie;}  }
class C{  public static ArgumentException unknownSubType(RelationDefinition<?,?> r,String typeName,String typeUsage){  LocalizableMessage msg=ERR_DSCFG_ERROR_SUB_TYPE_UNRECOGNIZED.get(typeName,r.getUserFriendlyName(),typeUsage);  return new ArgumentException(msg);}  }
class C{  public PlaPointFloat[] tangential_points(PlaPointFloat p_to_point,double p_distance){  double dx=Math.abs(v_x - p_to_point.v_x);  double dy=Math.abs(v_y - p_to_point.v_y);  boolean situation_turned=(dy > dx);  PlaPointFloat pole;  PlaPointFloat circle_center;  if (situation_turned) {    pole=new PlaPointFloat(-v_y,v_x);    circle_center=new PlaPointFloat(-p_to_point.v_y,p_to_point.v_x);  } else {    pole=this;    circle_center=p_to_point;  }  dx=pole.v_x - circle_center.v_x;  dy=pole.v_y - circle_center.v_y;  double dx_square=dx * dx;  double dy_square=dy * dy;  double dist_square=dx_square + dy_square;  double radius_square=p_distance * p_distance;  double discriminant=radius_square * dy_square - (radius_square - dx_square) * dist_square;  if (discriminant <= 0) {    return new PlaPointFloat[0];  }  double square_root=Math.sqrt(discriminant);  PlaPointFloat[] result=new PlaPointFloat[2];  double a1=radius_square * dy;  double dy1=(a1 + p_distance * square_root) / dist_square;  double dy2=(a1 - p_distance * square_root) / dist_square;  double first_point_y=dy1 + circle_center.v_y;  double first_point_x=(radius_square - dy * dy1) / dx + circle_center.v_x;  double second_point_y=dy2 + circle_center.v_y;  double second_point_x=(radius_square - dy * dy2) / dx + circle_center.v_x;  if (situation_turned) {    result[0]=new PlaPointFloat(first_point_y,-first_point_x);    result[1]=new PlaPointFloat(second_point_y,-second_point_x);  } else {    result[0]=new PlaPointFloat(first_point_x,first_point_y);    result[1]=new PlaPointFloat(second_point_x,second_point_y);  }  return result;}  }
class C{  public boolean hasDisplayableAttributes(String serviceName){  SchemaType st=SchemaType.USER;  if ((getEntityType() != null) && (!getEntityType().equals("user"))) {    st=SchemaType.DYNAMIC;  }  return hasAttributeSchema(serviceName,st);}  }
class C{  public Object clone(){  AuthLevelCondition theClone=null;  try {    theClone=(AuthLevelCondition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (properties != null) {    theClone.properties=new HashMap();    Iterator it=properties.keySet().iterator();    while (it.hasNext()) {      Object o=it.next();      Set values=new HashSet();      values.addAll((Set)properties.get(o));      theClone.properties.put(o,values);    }  }  return theClone;}  }
class C{  public void continuousQuery(ContinuousQueryListener listener,TokenFilter filter) throws CoreTokenException {  dispatcher.continuousQuery(listener,filter);}  }
class C{  public JInternalFrame(String title,boolean resizable,boolean closable){  this(title,resizable,closable,false,false);}  }
class C{  public StylesheetComposed(Stylesheet parent){  super(parent);}  }
