class C{  public LeftIndexedReaderAccessibleInfo(LongToInternalIntBiMap leftNodesToIndexBiMap,LongToInternalIntBiMap rightNodesToIndexBiMap,EdgePool leftNodeEdgePool){  this.leftNodesToIndexBiMap=leftNodesToIndexBiMap;  this.rightNodesToIndexBiMap=rightNodesToIndexBiMap;  this.leftNodeEdgePool=leftNodeEdgePool;}  }
class C{  void stop(){  timer.stop();}  }
class C{  public static <T>List<T> toList(Iterator<T> self){  List<T> answer=new ArrayList<T>();  while (self.hasNext()) {    answer.add(self.next());  }  return answer;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.PARAMETER___ANONYMOUS_PARAMETER_11:    getAnonymous_parameter_1_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public SeaGlassDropShadowEffect(){  color=UIManager.getColor("seaGlassDropShadow");  angle=90;  distance=1;  size=2;  opacity=0.15f;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildCrulamin(zone);}  }
class C{  @Get("json") public Map<String,Object> retrieve(){  return retrieveInternal(false);}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  protected void onException(Exception e) throws RuntimeException {  onThrowable(e);}  }
class C{  public boolean isNull(){  return !linkSourceContent.isSuccess() && extendedTrim(linkSourceContent.getHtmlCode()).equals("") && !isImage(linkSourceContent.getFinalUrl());}  }
class C{  public static ExternalLibraryPreferenceModel createFromJson(final String jsonString){  try {    final ExternalLibraryPreferenceModel model=new ObjectMapper().readValue(jsonString,ExternalLibraryPreferenceModel.class);    return new ExternalLibraryPreferenceModel(model.getExternalLibraryLocationsAsUris());  } catch (  final Exception e) {    throw new RuntimeException("Error occurred while trying to deserialize JSON string.",e);  }}  }
class C{  final Node succ(Node p){  Node next=p.next;  return (p == next) ? head : next;}  }
class C{  public NominalToNumericModel(ExampleSet exampleSet,int codingType,boolean useUnderscoreInName,Map<String,Double> sourceAttributeToComparisonGroupMap,Map<String,Double> attributeTo1ValueMap,Map<String,Pair<Double,Double>> attributeToValuesMap,boolean useComparisonGroups,int unexpectedValueHandling){  this(exampleSet,codingType);  this.useUnderscoreInName=useUnderscoreInName;  this.sourceAttributeToComparisonGroupMap=sourceAttributeToComparisonGroupMap;  this.attributeTo1ValueMap=attributeTo1ValueMap;  this.attributeToValuesMap=attributeToValuesMap;  this.useComparisonGroups=useComparisonGroups || codingType == NominalToNumeric.EFFECT_CODING;  this.unexpectedValueHandling=unexpectedValueHandling;  if (useComparisonGroups) {    assert sourceAttributeToComparisonGroupMap != null;    sourceAttributeToComparisonGroupStringsMap=new LinkedHashMap<>();    for (    Map.Entry<String,Double> entry : sourceAttributeToComparisonGroupMap.entrySet()) {      String attributeName=entry.getKey();      double comparisonGroup=entry.getValue();      Attribute attribute=exampleSet.getAttributes().get(attributeName);      String comparisonGroupString=attribute.getMapping().mapIndex((int)comparisonGroup);      sourceAttributeToComparisonGroupStringsMap.put(attributeName,comparisonGroupString);    }  }  if (codingType == NominalToNumeric.DUMMY_CODING || codingType == NominalToNumeric.EFFECT_CODING) {    attributeToAllNominalValues=new HashMap<>();    for (    Attribute attribute : exampleSet.getAttributes()) {      if (!attribute.isNumerical()) {        String attributeName=attribute.getName();        List<String> values=new LinkedList<>();        for (        String value : attribute.getMapping().getValues()) {          values.add(value);        }        attributeToAllNominalValues.put(attributeName,values);      }    }    targetAttributeToSourceAttributeMap=new HashMap<>();    for (    Attribute sourceAttribute : exampleSet.getAttributes()) {      if (!sourceAttribute.isNumerical()) {        String sourceAttributeName=sourceAttribute.getName();        for (        String targetAttribute : getTargetAttributesFromSourceAttribute(sourceAttribute)) {          targetAttributeToSourceAttributeMap.put(targetAttribute,sourceAttributeName);        }      }    }  }}  }
class C{  private static ImmutableMap<RootKey,AttributeMetadataRegistry> buildAttributes(MetadataRegistry registry,Schema schema){  Builder<RootKey,AttributeMetadataRegistry> attributeBuilder=ImmutableMap.builder();  for (  Map.Entry<RootKey,AttributeMetadataRegistryBuilder> entry : registry.getAttributes().entrySet()) {    attributeBuilder.put(entry.getKey(),entry.getValue().create(schema));  }  return attributeBuilder.build();}  }
class C{  public StringSendPacket send(String str,SendListener listener){  StringSendPacket entity=null;  try {    entity=new StringSendPacket(str,listener);    send(entity);  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }  return entity;}  }
class C{  public Collection engineGenerateCRLs(InputStream inStream) throws CRLException {  CRL crl;  List crls=new ArrayList();  while ((crl=engineGenerateCRL(inStream)) != null) {    crls.add(crl);  }  return crls;}  }
class C{  void editConditionalPressed(int rx){  if (inEditConditionalMode) {    javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,java.text.MessageFormat.format(rbx.getString("Error34"),new Object[]{_curConditional.getSystemName()}),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);    return;  }  _curConditional=_conditionalManager.getBySystemName(_curLogix.getConditionalByNumberOrder(rx));  if (_curConditional == null) {    log.error("Attempted edit of non-existant conditional.");    return;  }  _variableList=_curConditional.getCopyOfStateVariables();  conditionalRowNumber=rx;  _actionList=_curConditional.getCopyOfActions();  makeEditConditionalWindow();}  }
class C{  public boolean addAll(int index,Collection c){  if (index > size || index < 0) {    throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  }  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacity(size + numNew);  int numMoved=size - index;  if (numMoved > 0) {    System.arraycopy(elementData,index,elementData,index + numNew,numMoved);  }  System.arraycopy(a,0,elementData,index,numNew);  size+=numNew;  return numNew != 0;}  }
class C{  public void writeProperty(String group,String propertyName,VCardParameters parameters,VCardDataType dataType,JCardValue value) throws IOException {  if (!open) {    throw new IllegalStateException(Messages.INSTANCE.getExceptionMessage(1));  }  generator.setCurrentValue(JCardPrettyPrinter.PROPERTY_VALUE);  generator.writeStartArray();  generator.writeString(propertyName);  generator.writeStartObject();  for (  Map.Entry<String,List<String>> entry : parameters) {    String name=entry.getKey().toLowerCase();    List<String> values=entry.getValue();    if (values.isEmpty()) {      continue;    }    if (values.size() == 1) {      generator.writeStringField(name,values.get(0));    } else {      generator.writeArrayFieldStart(name);      for (      String paramValue : values) {        generator.writeString(paramValue);      }      generator.writeEndArray();    }  }  if (group != null) {    generator.writeStringField("group",group);  }  generator.writeEndObject();  generator.writeString((dataType == null) ? "unknown" : dataType.getName().toLowerCase());  if (value.getValues().isEmpty()) {    generator.writeString("");  } else {    for (    JsonValue jsonValue : value.getValues()) {      writeValue(jsonValue);    }  }  generator.writeEndArray();  generator.setCurrentValue(null);}  }
class C{  void discardCompilationUnit(final ICompilationUnit u){  try {    u.close();    u.delete(true,null);  } catch (  final JavaModelException e) {    monitor.logEvaluationError(this,e);  }catch (  final NullPointerException e) {    monitor.logEvaluationError(this,e);  }}  }
class C{  public static String createInstructionLine(final INaviInstruction instruction,final CGraphModel graphModel){  final ZyGraphViewSettings graphSettings=graphModel.getGraph().getSettings();  final BackEndDebuggerProvider provider=graphModel.getDebuggerProvider();  final INodeModifier modifier=new CDefaultModifier(graphSettings,provider);  return ZyInstructionBuilder.buildInstructionLine(instruction,graphSettings,modifier).first();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.DELEGATING_MEMBER__DELEGATION_BASE_TYPE:    return delegationBaseType != null;case ImPackage.DELEGATING_MEMBER__DELEGATION_SUPER_CLASS_STEPS:  return delegationSuperClassSteps != DELEGATION_SUPER_CLASS_STEPS_EDEFAULT;case ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET:return delegationTarget != null;case ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET_IS_ABSTRACT:return delegationTargetIsAbstract != DELEGATION_TARGET_IS_ABSTRACT_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public Matrix4d rotateYXZ(Vector3d angles){  return rotateYXZ(angles.y,angles.x,angles.z);}  }
class C{  public void store(CacheObject k,CacheObject v,byte[] ver,long expires) throws IgniteCheckedException {  CacheObjectContext coctx=objectContext();  Object key=k.isPlatformType() ? k.value(coctx,false) : k;  Object val=v.isPlatformType() ? v.value(coctx,false) : v;  Document doc=new Document();  boolean stringsFound=false;  if (type.valueTextIndex() || type.valueClass() == String.class) {    doc.add(new Field(VAL_STR_FIELD_NAME,val.toString(),Field.Store.YES,Field.Index.ANALYZED));    stringsFound=true;  }  for (int i=0, last=idxdFields.length - 1; i < last; i++) {    Object fieldVal=type.value(idxdFields[i],key,val);    if (fieldVal != null) {      doc.add(new Field(idxdFields[i],fieldVal.toString(),Field.Store.YES,Field.Index.ANALYZED));      stringsFound=true;    }  }  String keyStr=org.apache.commons.codec.binary.Base64.encodeBase64String(k.valueBytes(coctx));  try {    writer.deleteDocuments(new Term(KEY_FIELD_NAME,keyStr));    if (!stringsFound)     return;    doc.add(new Field(KEY_FIELD_NAME,keyStr,Field.Store.YES,Field.Index.NOT_ANALYZED));    if (type.valueClass() != String.class)     doc.add(new Field(VAL_FIELD_NAME,v.valueBytes(coctx)));    doc.add(new Field(VER_FIELD_NAME,ver));    doc.add(new Field(EXPIRATION_TIME_FIELD_NAME,DateTools.timeToString(expires,DateTools.Resolution.MILLISECOND),Field.Store.YES,Field.Index.NOT_ANALYZED));    writer.addDocument(doc);  } catch (  IOException e) {    throw new IgniteCheckedException(e);  } finally {    updateCntr.incrementAndGet();  }}  }
class C{  public boolean cancelLeaseOfMAC(MacAddress mac){  DHCPBinding binding=getDHCPbindingFromMAC(mac);  if (binding != null) {    binding.clearLeaseTimes();    binding.setLeaseStatus(false);    this.setPoolAvailability(this.getPoolAvailability() + 1);    this.setPoolFull(false);    return true;  }  return false;}  }
class C{  protected void onDestroyView(ViewGroup container){  isCreatedView=false;  setViewToAnimate(null);}  }
class C{  public BufferedImage createGraphFromScores(int[] scores,int[] chartSlices){  BufferedImage bi=new BufferedImage(WIDTH,HEIGHT,BufferedImage.TYPE_INT_RGB);  Graphics2D g2d=bi.createGraphics();  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2d.setRenderingHints(renderHints);  g2d.setColor(Color.white);  g2d.fill(graphRect);  g2d.setColor(Color.black);  borderRect.setLocation(1,1);  g2d.draw(borderRect);  borderRect.setLocation((WIDTH / 2) + 1,1);  g2d.draw(borderRect);  int x_pie=innerOffset;  int y_pie=innerOffset;  int border=20;  Ellipse2D.Double elb=new Ellipse2D.Double(x_pie - border / 2,y_pie - border / 2,pieWidth + border,pieHeight + border);  g2d.setColor(dropShadow);  g2d.fill(elb);  g2d.setColor(Color.black);  g2d.draw(elb);  int startAngle=0;  int legendWidth=20;  int x_legendText=halfWidth + innerOffset / 2 + legendWidth + 5;  int x_legendBar=halfWidth + innerOffset / 2;  int textHeight=20;  int curElement=0;  int y_legend=0;  Dimension legendDim=new Dimension(legendWidth,textHeight / 2);  Rectangle legendRect=new Rectangle(legendDim);  int lastElement=chartSlices.length;  float numberOfScores=0;  for (int i=0; i < scores.length; i++) {    numberOfScores+=1;  }  if (scores == null || numberOfScores == 0) {    int sweepAngle=360;    g2d.setColor(Color.GRAY);    g2d.fillArc(x_pie,y_pie,pieWidth,pieHeight,startAngle,sweepAngle);    y_legend=curElement * textHeight + innerOffset;    String display="No dispositions for";    g2d.setColor(Color.black);    g2d.drawString(display,x_legendText,y_legend);    curElement++;    y_legend=curElement * textHeight + innerOffset;    display="this date range.";    g2d.setColor(Color.black);    g2d.drawString(display,x_legendText,y_legend);    return bi;  } else {    float[] floatScores=convertIntToFloatArray(scores);    float[] scoresPerSlice=calcScorePerSlice(chartSlices,floatScores);    for (int i=0; i < chartSlices.length; i++) {      float perc=(scoresPerSlice[i] / numberOfScores);      int sweepAngle=(int)(perc * 360);      if (i == lastElement) {        sweepAngle=360 - startAngle;      }      g2d.setColor(getPieColor());      g2d.fillArc(x_pie,y_pie,pieWidth,pieHeight,startAngle,sweepAngle);      startAngle+=sweepAngle;      y_legend=curElement * textHeight + innerOffset;      String display=null;      if (i == 0) {        display="100 - " + chartSlices[0];      } else {        display=chartSlices[i - 1] - 1 + " - " + chartSlices[i];      }      g2d.setColor(Color.black);      g2d.drawString(display,x_legendText,y_legend);      display="" + (int)scoresPerSlice[i];      g2d.setColor(Color.black);      g2d.drawString(display,x_legendText + 80,y_legend);      display=" (" + (int)(perc * 100) + "%)";      g2d.setColor(Color.black);      g2d.drawString(display,x_legendText + 110,y_legend);      g2d.setColor(getPieColor());      legendRect.setLocation(x_legendBar,y_legend - textHeight / 2);      g2d.fill(legendRect);      setNewColor();      curElement++;    }    return bi;  }}  }
class C{  public void lazyCalculateMatrix(){  if (d != null) {    return;  }  int n=vertices.size();  backtrace=new int[n][n];  for (int i=0; i < n; i++) {    Arrays.fill(backtrace[i],-1);  }  d=new double[n][n];  for (int i=0; i < n; i++) {    Arrays.fill(d[i],Double.POSITIVE_INFINITY);  }  for (int i=0; i < n; i++) {    d[i][i]=0.0;  }  Set<E> edges=graph.edgeSet();  for (  E edge : edges) {    V v1=graph.getEdgeSource(edge);    V v2=graph.getEdgeTarget(edge);    int v_1=vertices.indexOf(v1);    int v_2=vertices.indexOf(v2);    d[v_1][v_2]=graph.getEdgeWeight(edge);    if (!((GamaGraph<V,E>)graph).isDirected()) {      d[v_2][v_1]=graph.getEdgeWeight(edge);    }  }  for (int k=0; k < n; k++) {    for (int i=0; i < n; i++) {      for (int j=0; j < n; j++) {        double ik_kj=d[i][k] + d[k][j];        if (ik_kj < d[i][j]) {          d[i][j]=ik_kj;          backtrace[i][j]=k;          diameter=diameter > d[i][j] ? diameter : d[i][j];        }      }    }  }}  }
class C{  public static String processApidInfo(String apidnum,String apidgaps){  String stringParsed="";  if (apidnum != null && apidgaps != null) {    String[] apidnumList=apidnum.trim().split(";");    String[] apidgapsList=apidgaps.trim().split(";");    if (apidnumList.length == apidgapsList.length) {      for (int i=0; i < apidnumList.length; i++) {        stringParsed=stringParsed + "Apid#: " + (apidnumList[i].isEmpty() ? "-" : apidnumList[i])+ " Apid total gaps: "+ (apidgapsList[i].isEmpty() ? "-" : apidgapsList[i])+ "; ";      }    } else {      for (int i=0; i < apidnumList.length; i++) {        stringParsed=stringParsed + "Apid#: " + (apidnumList[i].isEmpty() ? "-" : apidnumList[i])+ "; ";      }    }  } else {    logger.error("Error getting Information on missing ISPs APID");  }  logger.debug(" *************  missing ISPs APID:  " + stringParsed);  stringParsed=stringParsed.replace("Apid#: - Apid total gaps: -;","N/A").replace("Apid#: -;","N/A");  if (stringParsed.length() > MAX_METADATA_SIZE) {    stringParsed=stringParsed.substring(0,MAX_METADATA_SIZE - 4) + "...";  }  return stringParsed;}  }
class C{  @Override public void zoomRangeAxes(double lowerPercent,double upperPercent,PlotRenderingInfo state,Point2D source){  zoom((upperPercent + lowerPercent) / 2.0);}  }
class C{  @Ignore("TODO") @Test public void testRedundancySpecifiedNonFailoverEPFailsDetectionByRegisterInterest() throws Exception {  createClientCache(NetworkUtils.getServerHostName(Host.getHost(0)),PORT1,PORT2,PORT3,PORT4,1,250,500);  waitConnectedServers(4);  assertEquals(1,pool.getRedundantNames().size());  assertTrue(pool.getRedundantNames().contains(SERVER4));  verifyOrderOfEndpoints();  server2.invoke(null);  createEntriesK1andK2();  registerK1AndK2();  verifyDeadServers(1);  verifyRedundantServersContain(SERVER4);  verifyLiveAndRedundantServers(3,1);  verifyOrderOfEndpoints();}  }
class C{  public void split() throws Exception {  int i;  Instances leftSubset, rightSubset;  SplitEvaluate bestSplit, currentSplit;  boolean[] attsBelow;  if (!m_isLeaf) {    bestSplit=new YongSplitInfo(0,m_numInstances - 1,-1);    currentSplit=new YongSplitInfo(0,m_numInstances - 1,-1);    for (i=0; i < m_numAttributes; i++) {      if (i != m_classIndex) {        m_instances.sort(i);        currentSplit.attrSplit(i,m_instances);        if ((Math.abs(currentSplit.maxImpurity() - bestSplit.maxImpurity()) > 1.e-6) && (currentSplit.maxImpurity() > bestSplit.maxImpurity() + 1.e-6)) {          bestSplit=currentSplit.copy();        }      }    }    if (bestSplit.splitAttr() < 0 || bestSplit.position() < 1 || bestSplit.position() > m_numInstances - 1) {      m_isLeaf=true;    } else {      m_splitAtt=bestSplit.splitAttr();      m_splitValue=bestSplit.splitValue();      leftSubset=new Instances(m_instances,m_numInstances);      rightSubset=new Instances(m_instances,m_numInstances);      for (i=0; i < m_numInstances; i++) {        if (m_instances.instance(i).value(m_splitAtt) <= m_splitValue) {          leftSubset.add(m_instances.instance(i));        } else {          rightSubset.add(m_instances.instance(i));        }      }      leftSubset.compactify();      rightSubset.compactify();      m_left=new RuleNode(m_globalDeviation,m_globalAbsDeviation,this);      m_left.setMinNumInstances(m_splitNum);      m_left.setRegressionTree(m_regressionTree);      m_left.setSaveInstances(m_saveInstances);      m_left.buildClassifier(leftSubset);      m_right=new RuleNode(m_globalDeviation,m_globalAbsDeviation,this);      m_right.setMinNumInstances(m_splitNum);      m_right.setRegressionTree(m_regressionTree);      m_right.setSaveInstances(m_saveInstances);      m_right.buildClassifier(rightSubset);      if (!m_regressionTree) {        attsBelow=attsTestedBelow();        attsBelow[m_classIndex]=true;        int count=0, j;        for (j=0; j < m_numAttributes; j++) {          if (attsBelow[j]) {            count++;          }        }        int[] indices=new int[count];        count=0;        for (j=0; j < m_numAttributes; j++) {          if (attsBelow[j] && (j != m_classIndex)) {            indices[count++]=j;          }        }        indices[count]=m_classIndex;        m_indices=indices;      } else {        m_indices=new int[1];        m_indices[0]=m_classIndex;        m_numParameters=1;      }    }  }  if (m_isLeaf) {    int[] indices=new int[1];    indices[0]=m_classIndex;    m_indices=indices;    m_numParameters=1;  }}  }
class C{  public Builder maxContentLength(final int maxContentLength){  this.maxContentLength=maxContentLength;  return this;}  }
class C{  public CounterGenerator(int countstart){  counter=new AtomicInteger(countstart);  setLastInt(counter.get() - 1);}  }
class C{  public void deleteBucket(String bucketName,String namespace) throws ECSException {  ClientResponse clientResp=null;  if (null != bucketName) {    String deleteBody=" {  }  ";    final String path=MessageFormat.format(URI_DEACTIVATE_BUCKET,bucketName,namespace);    try {      clientResp=post(path,deleteBody);    } catch (    Exception e) {      _log.error("Error occured while delete of bucket : {}",bucketName,e);    } finally {      if (null == clientResp) {        throw ECSException.exceptions.bucketDeleteFailed(bucketName,"no response");      } else       if (clientResp.getStatus() != 200) {        throw ECSException.exceptions.bucketDeleteFailed(bucketName,getResponseDetails(clientResp));      }      closeResponse(clientResp);    }  }}  }
class C{  protected boolean canUseOtherDirection(){  return false;}  }
class C{  public static long[] toLongArray(Long[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i];  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.272 -0400",hash_original_method="C646D0163855D571424284A7112C5149",hash_generated_method="11589AAF8778A39B9A9F2E352222AD5F") Node<K,V> findNear(K kkey,int rel){  Comparable<? super K> key=comparable(kkey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return ((rel & LT) == 0 || b.isBaseHeader()) ? null : b;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if ((c == 0 && (rel & EQ) != 0) || (c < 0 && (rel & LT) == 0))       return n;      if (c <= 0 && (rel & LT) != 0)       return b.isBaseHeader() ? null : b;      b=n;      n=f;    }  }}  }
class C{  public String toString(){  Iterator i=children.iterator();  String ret="(" + head + (i.hasNext() ? " " : "");  while (i.hasNext())   ret+=((GrammarNode)(i.next())).getHead() + (i.hasNext() ? " " : "");  return ret + ")";}  }
class C{  public void slerp(Quaternion q2,float changeAmnt){  if (this.x == q2.x && this.y == q2.y && this.z == q2.z && this.w == q2.w) {    return;  }  float result=(this.x * q2.x) + (this.y * q2.y) + (this.z * q2.z)+ (this.w * q2.w);  if (result < 0.0f) {    q2.x=-q2.x;    q2.y=-q2.y;    q2.z=-q2.z;    q2.w=-q2.w;    result=-result;  }  float scale0=1 - changeAmnt;  float scale1=changeAmnt;  if ((1 - result) > 0.1f) {    float theta=FastMath.acos(result);    float invSinTheta=1f / FastMath.sin(theta);    scale0=FastMath.sin((1 - changeAmnt) * theta) * invSinTheta;    scale1=FastMath.sin((changeAmnt * theta)) * invSinTheta;  }  this.x=(scale0 * this.x) + (scale1 * q2.x);  this.y=(scale0 * this.y) + (scale1 * q2.y);  this.z=(scale0 * this.z) + (scale1 * q2.z);  this.w=(scale0 * this.w) + (scale1 * q2.w);}  }
class C{  @Override public IMessage onMessage(final MessagePlayerReceivedLoot message,final MessageContext ctx){  Minecraft.getMinecraft().addScheduledTask(null);  return null;}  }
class C{  public void buildPalette(ColorMap colorMap){  this.colorMap=colorMap;  palette.build(colorMap);  palette.repaint();  palette.invalidate();  revalidate();}  }
class C{  protected void processTuple(GenericRecord tuple){  try {    Object obj=getPOJOFromGenericRecord(tuple);    if (obj != null) {      output.emit(obj);      recordCount++;    } else     if (errorPort.isConnected()) {      errorPort.emit(tuple);      errorCount++;    }  } catch (  InstantiationException|IllegalAccessException e) {    LOG.error("Could not initialize object of class -" + getClass().getName(),e);    errorCount++;  }}  }
class C{  protected static boolean isInheritDoc(IDocument document,IRegion wordRegion){  try {    String word=document.get(wordRegion.getOffset(),wordRegion.getLength());    return "inheritDoc".equals(word);  } catch (  BadLocationException e) {    return false;  }}  }
class C{  public boolean isMandatory(){  Object oo=get_Value(COLUMNNAME_IsMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void calculateSteps(Tree tree,NodeRef node,PatternList patterns){  if (!tree.isExternal(node)) {    for (int i=0; i < tree.getChildCount(node); i++) {      calculateSteps(tree,tree.getChild(node,i),patterns);    }    for (int i=0; i < patterns.getPatternCount(); i++) {      boolean[] uState=stateSets[tree.getChild(node,0).getNumber()][i];      boolean[] iState=stateSets[tree.getChild(node,0).getNumber()][i];      for (int j=1; j < tree.getChildCount(node); j++) {        uState=union(uState,stateSets[tree.getChild(node,j).getNumber()][i]);        iState=intersection(iState,stateSets[tree.getChild(node,j).getNumber()][i]);      }      if (size(iState) > 0) {        stateSets[node.getNumber()][i]=iState;      } else {        stateSets[node.getNumber()][i]=uState;        siteScores[i]++;      }    }  }}  }
class C{  public BroadcastTriggerListener(String name){  if (name == null) {    throw new IllegalArgumentException("Listener name cannot be null!");  }  this.name=name;  listeners=new LinkedList<TriggerListener>();}  }
class C{  public ServiceCompatibilityException(String message){  super(message);}  }
class C{  public JSONWriter value(double d) throws JSONException {  return this.value(new Double(d));}  }
class C{  public void layoutNetwork(){  NetworkLayoutManager.offsetNeuronGroup(inputLayer,competitive,Direction.NORTH,200);}  }
class C{  public static Object copy(Serializable obj) throws IOException, ClassNotFoundException {  DataPipe pipe=new DataPipe();  ObjectOutputStream s=new ObjectOutputStream(pipe.output);  ObjectInputStream u=new ObjectInputStream(pipe.input);  s.writeObject(obj);  return u.readObject();}  }
class C{  public PricedEventHistory(PricedEvent c){  super(c);  if (c.getPriceModel() != null) {    setPriceModelObjKey(c.getPriceModel().getKey());  }  if (c.getEvent() != null) {    setEventObjKey(c.getEvent().getKey());  }}  }
class C{  public String toString(){  Object method=getProperties().get("toString");  if (method != null && method instanceof Closure) {    Closure closure=(Closure)method;    closure.setDelegate(this);    return closure.call().toString();  } else {    return expandoProperties.toString();  }}  }
class C{  public T casePackageMember(PackageMember object){  return null;}  }
class C{  public boolean isWSPullPointSupport(){  return wsPullPointSupport;}  }
class C{  public static int toLog2(int value,String argName){  checkIfPowerOf2(value,argName);  return Integer.numberOfTrailingZeros(value);}  }
class C{  protected Arithmetic(){}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return EPG.getInstance().getAllProviderNames();}  }
class C{  static void writeEpochSec(long epochSec,DataOutput out) throws IOException {  if (epochSec >= -4575744000L && epochSec < 10413792000L && epochSec % 900 == 0) {    int store=(int)((epochSec + 4575744000L) / 900);    out.writeByte((store >>> 16) & 255);    out.writeByte((store >>> 8) & 255);    out.writeByte(store & 255);  } else {    out.writeByte(255);    out.writeLong(epochSec);  }}  }
class C{  public ProxyObjectInputStream(InputStream in) throws IOException {  super(in);  loader=Thread.currentThread().getContextClassLoader();  if (loader == null) {    loader=ClassLoader.getSystemClassLoader();  }}  }
class C{  public static String readCharacters(XMLEventReader eventReader){  if (eventReader == null) {    String message=Logging.getMessage("nullValue.EventReaderIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  StringBuilder sb=new StringBuilder();  try {    int depth=0;    while (eventReader.hasNext()) {      XMLEvent nextEvent=eventReader.peek();      if (nextEvent.isStartElement()) {        ++depth;        eventReader.nextEvent();      } else       if (nextEvent.isEndElement()) {        if (--depth > 0) {          eventReader.nextEvent();        } else {          break;        }      } else       if (nextEvent.isCharacters()) {        Characters characters=eventReader.nextEvent().asCharacters();        if (!characters.isWhiteSpace())         sb.append(characters.getData());      } else {        eventReader.nextEvent();      }    }  } catch (  XMLStreamException e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseXml",eventReader);    Logging.logger().finest(message);  }  return sb.toString();}  }
class C{  protected static void init(){  String notificationfactoryClassName=null;  try {    notificationfactoryClassName=System.getProperty(NOTIFICATION_FACTORY_NAME);  } catch (  SecurityException e) {    throw new RuntimeException(e);  }  if (notificationfactoryClassName != null) {    Class<?> nfc;    try {      nfc=Class.forName(notificationfactoryClassName);      factory=(INotificationManagerFactory)nfc.newInstance();    } catch (    ClassNotFoundException|InstantiationException|IllegalAccessException e) {      throw new RuntimeException(e);    }  } else {    factory=new SyslogNotificationFactory();  }}  }
class C{  public String buildCommandLine(Draft3Job job,File workingDir,FilePathMapper filePathMapper) throws BindingException {  Draft3CommandLineTool commandLineTool=(Draft3CommandLineTool)job.getApp();  List<Object> commandLineParts=buildCommandLineParts(job,workingDir,filePathMapper);  StringBuilder builder=new StringBuilder();  for (  Object commandLinePart : commandLineParts) {    builder.append(commandLinePart).append(PART_SEPARATOR);  }  String stdin=null;  try {    stdin=commandLineTool.getStdin(job);  } catch (  Draft3ExpressionException e) {    logger.error("Failed to extract standard input.",e);    throw new BindingException("Failed to extract standard input.",e);  }  if (!StringUtils.isEmpty(stdin)) {    builder.append(PART_SEPARATOR).append("<").append(PART_SEPARATOR).append(stdin);  }  String stdout=null;  try {    stdout=commandLineTool.getStdout(job);  } catch (  Draft3ExpressionException e) {    logger.error("Failed to extract standard output.",e);    throw new BindingException("Failed to extract standard outputs.",e);  }  if (!StringUtils.isEmpty(stdout)) {    builder.append(PART_SEPARATOR).append(">").append(PART_SEPARATOR).append(stdout);  }  String commandLine=normalizeCommandLine(builder.toString());  logger.info("Command line built. CommandLine = {}",commandLine);  return commandLine;}  }
class C{  public static Boolean xor(Boolean left,Boolean right){  return left ^ right;}  }
class C{  protected static Pair<String,String> lsrImmediate(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue,final String immediateNodeValue){  final String shifterOperand=environment.getNextVariableString();  final String shifterCarryOut=environment.getNextVariableString();  long baseOffset=offset;  if (immediateNodeValue.equals("0")) {    final String tmpVar1=environment.getNextVariableString();    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,minusThirtyOneSet,wordSize,tmpVar1));    instructions.add(ReilHelpers.createAnd(baseOffset++,wordSize,tmpVar1,byteSize,oneSet,byteSize,shifterCarryOut));    return new Pair<String,String>(String.valueOf(0),shifterCarryOut);  } else {    final String tmpVar1=environment.getNextVariableString();    final String tmpVar2=environment.getNextVariableString();    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,"-" + immediateNodeValue,qWordSize,tmpVar1));    instructions.add(ReilHelpers.createAnd(baseOffset++,qWordSize,tmpVar1,dWordSize,bitMaskAllBitsSet,dWordSize,shifterOperand));    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,String.valueOf(-(Integer.decode(immediateNodeValue) - 1)),dWordSize,tmpVar2));    instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar2,byteSize,oneSet,byteSize,shifterCarryOut));    return new Pair<String,String>(shifterOperand,shifterCarryOut);  }}  }
class C{  public static void addBeanInstances(Vector<Object> beanInstances,JComponent container){  if (container != null) {    for (int i=0; i < beanInstances.size(); i++) {      Object bean=((BeanInstance)beanInstances.elementAt(i)).getBean();      if (Beans.isInstanceOf(bean,JComponent.class)) {        container.add((JComponent)bean);      }    }    container.revalidate();    container.repaint();  }  TABBED_COMPONENTS.add(beanInstances);}  }
class C{  protected SynchronizationImpl(){  super();}  }
class C{  public Map<List<String>,List<Double>> result(){  Map<List<String>,List<Double>> result=new HashMap<List<String>,List<Double>>();  for (  Map.Entry<GroupbyKey,List<Function>> entry : this.group2FunctionMap.entrySet()) {    List<Double> values=new ArrayList<Double>();    for (    Function f : entry.getValue()) {      values.add(f.result());    }    GroupbyKey key=entry.getKey();    List<BytesWritable> list1=key.getValue();    List<String> list2=new ArrayList<String>();    for (    BytesWritable e : list1) {      list2.add(new String(e.copyBytes()));    }    result.put(list2,values);  }  return result;}  }
class C{  public boolean isIbssSupported(){  enforceAccessPermission();  if (mWifiStateMachineChannel != null) {    return (mWifiStateMachine.syncIsIbssSupported(mWifiStateMachineChannel) == 1);  } else {    Slog.e(TAG,"mWifiStateMachineChannel is not initialized");    return false;  }}  }
class C{  public void testSinglePageBehaviour(final View v){  final Intent testActivity=new Intent(this,TestSinglePageActivity.class);  startActivity(testActivity);}  }
class C{  public void testMoveDirectoryDestinationMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);  create(igfs,paths(DIR,SUBDIR,SUBSUBDIR),null);  igfs.rename(SUBSUBDIR,SUBDIR_NEW);  checkExist(igfs,DIR_NEW,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,SUBSUBDIR.name()));  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  public DHGenParameterSpec(int primeSize,int exponentSize){  this.primeSize=primeSize;  this.exponentSize=exponentSize;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void writeString(String s){  int len=s.length();  writeVarInt(len);  writeStringWithoutLength(s,len);}  }
class C{  public boolean invalidateIt(){  if (!isValidAction(ACTION_Invalidate))   return false;  if (m_document != null) {    if (m_document.invalidateIt()) {      m_status=STATUS_Invalid;      m_document.setDocStatus(m_status);      return true;    }    return false;  }  m_status=STATUS_Invalid;  return true;}  }
class C{  public synchronized void logUndo(Page page,Data old){  if (logMode == LOG_MODE_OFF) {    return;  }  checkOpen();  database.checkWritingAllowed();  if (!recoveryRunning) {    int pos=page.getPos();    if (!log.getUndo(pos)) {      if (old == null) {        old=readPage(pos);      }      openForWriting();      log.addUndo(pos,old);    }  }}  }
class C{  public void gameKeyRelease(int gameKey){  TestUtils.gameKeyRelease(gameKey);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.710 -0400",hash_original_method="8A09FBF09ED2852585642BCE8CE60ACB",hash_generated_method="891D10478196629BFF2049839AF1F4C7") public Object[] toArray(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return Arrays.copyOf(queue,size);  }  finally {    lock.unlock();  }}  }
class C{  protected ObjectFactory1D(){}  }
class C{  public static void write(final char[] data,final Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public short readShort() throws EOFException, FormatException {  assertSize(2);  curptr+=2;  bytesinbuffer-=2;  return MoreMath.BuildShort(buffer,curptr - 2,MSBFirst);}  }
class C{  public void addObligation(final Obligation obligation,int basicBlockId) throws ObligationAcquiredOrReleasedInLoopException {  Map<ObligationSet,State> updatedStateMap=new HashMap<ObligationSet,State>();  if (stateMap.isEmpty()) {    State s=new State(factory);    s.getObligationSet().add(obligation);    updatedStateMap.put(s.getObligationSet(),s);  } else {    for (    State state : stateMap.values()) {      checkCircularity(state,obligation,basicBlockId);      state.getObligationSet().add(obligation);      updatedStateMap.put(state.getObligationSet(),state);    }  }  replaceMap(updatedStateMap);}  }
class C{  WpsResult startWpsWithPinFromAccessPoint(WpsInfo config){  WpsResult result=new WpsResult();  if (mWifiNative.startWpsRegistrar(config.BSSID,config.pin)) {    markAllNetworksDisabled();    result.status=WpsResult.Status.SUCCESS;  } else {    loge("Failed to start WPS pin method configuration");    result.status=WpsResult.Status.FAILURE;  }  return result;}  }
class C{  public q addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  protected int matchNodes(int firstNode,int lastNode,int idxStart){  int idx=idxStart;  int next, opcode, opdata;  int idxNew;  char[] instruction=program.instruction;  for (int node=firstNode; node < lastNode; ) {    opcode=instruction[node];    next=node + (short)instruction[node + offsetNext];    opdata=instruction[node + offsetOpdata];switch (opcode) {case OP_MAYBE:case OP_STAR:{        if ((idxNew=matchNodes(node + nodeSize,maxNode,idx)) != -1) {          return idxNew;        }        break;      }case OP_PLUS:{      if ((idxNew=matchNodes(next,maxNode,idx)) != -1) {        return idxNew;      }      node=next + (short)instruction[next + offsetNext];      continue;    }case OP_RELUCTANTMAYBE:case OP_RELUCTANTSTAR:{    if ((idxNew=matchNodes(next,maxNode,idx)) != -1) {      return idxNew;    }    return matchNodes(node + nodeSize,next,idx);  }case OP_RELUCTANTPLUS:{  if ((idxNew=matchNodes(next + (short)instruction[next + offsetNext],maxNode,idx)) != -1) {    return idxNew;  }  break;}case OP_OPEN:if ((program.flags & REProgram.OPT_HASBACKREFS) != 0) {startBackref[opdata]=idx;}if ((idxNew=matchNodes(next,maxNode,idx)) != -1) {if (opdata >= parenCount) {parenCount=opdata + 1;}if (getParenStart(opdata) == -1) {setParenStart(opdata,idx);}}return idxNew;case OP_CLOSE:if ((program.flags & REProgram.OPT_HASBACKREFS) != 0) {endBackref[opdata]=idx;}if ((idxNew=matchNodes(next,maxNode,idx)) != -1) {if (opdata >= parenCount) {parenCount=opdata + 1;}if (getParenEnd(opdata) == -1) {setParenEnd(opdata,idx);}}return idxNew;case OP_BACKREF:{int s=startBackref[opdata];int e=endBackref[opdata];if (s == -1 || e == -1) {return -1;}if (s == e) {break;}int l=e - s;if (search.isEnd(idx + l - 1)) {return -1;}final boolean caseFold=((matchFlags & MATCH_CASEINDEPENDENT) != 0);for (int i=0; i < l; i++) {if (compareChars(search.charAt(idx++),search.charAt(s + i),caseFold) != 0) {return -1;}}}break;case OP_BOL:if (idx != 0) {if ((matchFlags & MATCH_MULTILINE) == MATCH_MULTILINE) {if (isNewline(idx - 1)) {break;}}return -1;}break;case OP_EOL:if (!search.isEnd(0) && !search.isEnd(idx)) {if ((matchFlags & MATCH_MULTILINE) == MATCH_MULTILINE) {if (isNewline(idx)) {break;}}return -1;}break;case OP_ESCAPE:switch (opdata) {case E_NBOUND:case E_BOUND:{char cLast=((idx == 0) ? '\n' : search.charAt(idx - 1));char cNext=((search.isEnd(idx)) ? '\n' : search.charAt(idx));if ((RECharacter.isLetterOrDigit(cLast) == RECharacter.isLetterOrDigit(cNext)) == (opdata == E_BOUND)) {return -1;}}break;case E_ALNUM:case E_NALNUM:case E_DIGIT:case E_NDIGIT:case E_SPACE:case E_NSPACE:if (search.isEnd(idx)) {return -1;}char c=search.charAt(idx);switch (opdata) {case E_ALNUM:case E_NALNUM:if (!((RECharacter.isLetterOrDigit(c) || c == '_') == (opdata == E_ALNUM))) {return -1;}break;case E_DIGIT:case E_NDIGIT:if (!(RECharacter.isDigit(c) == (opdata == E_DIGIT))) {return -1;}break;case E_SPACE:case E_NSPACE:if (!(RECharacter.isWhitespace(c) == (opdata == E_SPACE))) {return -1;}break;}idx++;break;default :internalError("Unrecognized escape '" + opdata + "'");}break;case OP_ANY:if ((matchFlags & MATCH_SINGLELINE) == MATCH_SINGLELINE) {if (search.isEnd(idx)) {return -1;}} else {if (search.isEnd(idx) || isNewline(idx)) {return -1;}}idx++;break;case OP_ATOM:{if (search.isEnd(idx)) {return -1;}int startAtom=node + nodeSize;if (search.isEnd(opdata + idx - 1)) {return -1;}final boolean caseFold=((matchFlags & MATCH_CASEINDEPENDENT) != 0);for (int i=0; i < opdata; i++) {if (compareChars(search.charAt(idx++),instruction[startAtom + i],caseFold) != 0) {return -1;}}}break;case OP_POSIXCLASS:{if (search.isEnd(idx)) {return -1;}switch (opdata) {case POSIX_CLASS_ALNUM:if (!RECharacter.isLetterOrDigit(search.charAt(idx))) {return -1;}break;case POSIX_CLASS_ALPHA:if (!RECharacter.isLetter(search.charAt(idx))) {return -1;}break;case POSIX_CLASS_DIGIT:if (!RECharacter.isDigit(search.charAt(idx))) {return -1;}break;case POSIX_CLASS_BLANK:if (!RECharacter.isSpaceChar(search.charAt(idx))) {return -1;}break;case POSIX_CLASS_SPACE:if (!RECharacter.isWhitespace(search.charAt(idx))) {return -1;}break;case POSIX_CLASS_CNTRL:if (RECharacter.getType(search.charAt(idx)) != RECharacter.CONTROL) {return -1;}break;case POSIX_CLASS_GRAPH:switch (RECharacter.getType(search.charAt(idx))) {case RECharacter.MATH_SYMBOL:case RECharacter.CURRENCY_SYMBOL:case RECharacter.MODIFIER_SYMBOL:case RECharacter.OTHER_SYMBOL:break;default :return -1;}break;case POSIX_CLASS_LOWER:if (RECharacter.getType(search.charAt(idx)) != RECharacter.LOWERCASE_LETTER) {return -1;}break;case POSIX_CLASS_UPPER:if (RECharacter.getType(search.charAt(idx)) != RECharacter.UPPERCASE_LETTER) {return -1;}break;case POSIX_CLASS_PRINT:if (RECharacter.getType(search.charAt(idx)) == RECharacter.CONTROL) {return -1;}break;case POSIX_CLASS_PUNCT:{int type=RECharacter.getType(search.charAt(idx));switch (type) {case RECharacter.DASH_PUNCTUATION:case RECharacter.START_PUNCTUATION:case RECharacter.END_PUNCTUATION:case RECharacter.CONNECTOR_PUNCTUATION:case RECharacter.OTHER_PUNCTUATION:break;default :return -1;}}break;case POSIX_CLASS_XDIGIT:{boolean isXDigit=((search.charAt(idx) >= '0' && search.charAt(idx) <= '9') || (search.charAt(idx) >= 'a' && search.charAt(idx) <= 'f') || (search.charAt(idx) >= 'A' && search.charAt(idx) <= 'F'));if (!isXDigit) {return -1;}}break;case POSIX_CLASS_JSTART:if (!RECharacter.isJavaIdentifierStart(search.charAt(idx))) {return -1;}break;case POSIX_CLASS_JPART:if (!RECharacter.isJavaIdentifierPart(search.charAt(idx))) {return -1;}break;default :internalError("Bad posix class");break;}idx++;}break;case OP_ANYOF:{if (search.isEnd(idx)) {return -1;}char c=search.charAt(idx);boolean caseFold=(matchFlags & MATCH_CASEINDEPENDENT) != 0;int idxRange=node + nodeSize;int idxEnd=idxRange + (opdata * 2);boolean match=false;for (int i=idxRange; !match && i < idxEnd; ) {char s=instruction[i++];char e=instruction[i++];match=((compareChars(c,s,caseFold) >= 0) && (compareChars(c,e,caseFold) <= 0));}if (!match) {return -1;}idx++;}break;case OP_BRANCH:{if (instruction[next] != OP_BRANCH) {node+=nodeSize;continue;}int nextBranch;do {if ((idxNew=matchNodes(node + nodeSize,maxNode,idx)) != -1) {return idxNew;}nextBranch=(short)instruction[node + offsetNext];node+=nextBranch;} while (nextBranch != 0 && (instruction[node] == OP_BRANCH));return -1;}case OP_OPEN_CLUSTER:case OP_CLOSE_CLUSTER:case OP_NOTHING:case OP_GOTO:break;case OP_CONTINUE:node+=nodeSize;continue;case OP_END:setParenEnd(0,idx);return idx;default :internalError("Invalid opcode '" + opcode + "'");}node=next;}internalError("Corrupt program");return -1;}  }
class C{  public void reverse(){  reverse(x);}  }
class C{  public void add(long x){  Cell[] as;  long b, v;  int[] hc;  Cell a;  int n;  if ((as=cells) != null || !casBase(b=base,b + x)) {    boolean uncontended=true;    if ((hc=threadHashCode.get()) == null || as == null || (n=as.length) < 1 || (a=as[(n - 1) & hc[0]]) == null || !(uncontended=a.cas(v=a.value,v + x)))     retryUpdate(x,hc,uncontended);  }}  }
class C{  public TagExample(TagObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getTagname() != null) {    criteria.andTagnameEqualTo(sample.getTagname());  }  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void registerReportableObject(Reportable obj){  reportObjects.add(obj);}  }
class C{  private static void makeFile(final InputStream inputStream,final File file) throws IOException {  try (final InputStream in=inputStream;final FileOutputStream fos=new FileOutputStream(file)){    byte[] bytes=new byte[65536];    int numRead;    while ((numRead=in.read(bytes)) != -1) {      fos.write(bytes,0,numRead);    }  } }  }
class C{  public static InputStream toInputStream(String input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public CertificateHolderAuthorization(ASN1ObjectIdentifier oid,int rights) throws IOException {  setOid(oid);  setAccessRights((byte)rights);}  }
class C{  @SuppressWarnings("unchecked") private void mergeLo(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len1);  System.arraycopy(a,base1,tmp,0,len1);  int cursor1=0;  int cursor2=base2;  int dest=base1;  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      if (((Comparable)a[cursor2]).compareTo(tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      count1=gallopRight((Comparable)a[cursor2],tmp,cursor1,len1,0);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft((Comparable)tmp[cursor1],a,cursor2,len2,0);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    if (DEBUG)     assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len2 == 0;    if (DEBUG)     assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  public void addComponentsRight(Button button){  if (!buttonMap.containsKey(button.getId()))   buttonMap.put(button.getId(),button);  pnlBtnRight.appendChild(button);}  }
class C{  private void checkReference(Address refaddr,int verbosity){  ObjectReference ref=refaddr.loadObjectReference();  if (!MemoryManager.validRef(ref)) {    Log.writeln();    Log.writeln("Invalid ref reported while scanning stack");    printMethodHeader();    Log.write(refaddr);    Log.write(":");    Log.flush();    MemoryManager.dumpRef(ref);    dumpStackFrame(verbosity);    Log.writeln();    Log.writeln("Dumping stack starting at frame with bad ref:");    RVMThread.dumpStack(ip,fp);    Address top_ip=thread.getContextRegisters().getInnermostInstructionAddress();    Address top_fp=thread.getContextRegisters().getInnermostFramePointer();    RVMThread.dumpStack(top_ip,top_fp);    Log.writeln("Failing iterators:");    Offset offset=compiledMethod.getInstructionOffset(ip);    iterator=iteratorGroup.selectIterator(compiledMethod);    iterator.setupIterator(compiledMethod,offset,fp);    int i=0;    for (Address addr=iterator.getNextReferenceAddress(); !addr.isZero(); addr=iterator.getNextReferenceAddress()) {      ObjectReference ref2=addr.loadObjectReference();      Log.write("Iterator ");      Log.write(i++);      Log.write(": ");      Log.write(addr);      Log.write(": ");      Log.flush();      MemoryManager.dumpRef(ref2);    }    VM.sysFail("\n\nScanStack: Detected bad GC map; exiting RVM with fatal error");  }}  }
class C{  public void testNegNegFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-1,127,-10,-57,-101,1,2,2,2,-96,-16,8,-40,-59,68,-88,-88,16,73};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static List<Car> createCarList(){  final CarProducer audi=new CarProducer(R.mipmap.audi,"Audi");  final Car audiA1=new Car(audi,"A1",150,25000);  final Car audiA3=new Car(audi,"A3",120,35000);  final Car audiA4=new Car(audi,"A4",210,42000);  final Car audiA5=new Car(audi,"S5",333,60000);  final Car audiA6=new Car(audi,"A6",250,55000);  final Car audiA7=new Car(audi,"A7",420,87000);  final Car audiA8=new Car(audi,"A8",320,110000);  final CarProducer bmw=new CarProducer(R.mipmap.bmw,"BMW");  final Car bmw1=new Car(bmw,"1er",170,25000);  final Car bmw3=new Car(bmw,"3er",230,42000);  final Car bmwX3=new Car(bmw,"X3",230,45000);  final Car bmw4=new Car(bmw,"4er",250,39000);  final Car bmwM4=new Car(bmw,"M4",350,60000);  final Car bmw5=new Car(bmw,"5er",230,46000);  final CarProducer porsche=new CarProducer(R.mipmap.porsche,"Porsche");  final Car porsche911=new Car(porsche,"911",280,45000);  final Car porscheCayman=new Car(porsche,"Cayman",330,52000);  final Car porscheCaymanGT4=new Car(porsche,"Cayman GT4",385,86000);  final List<Car> cars=new ArrayList<>();  cars.add(audiA3);  cars.add(audiA1);  cars.add(porscheCayman);  cars.add(audiA7);  cars.add(audiA8);  cars.add(audiA4);  cars.add(bmwX3);  cars.add(porsche911);  cars.add(bmw1);  cars.add(audiA6);  cars.add(audiA5);  cars.add(bmwM4);  cars.add(bmw5);  cars.add(porscheCaymanGT4);  cars.add(bmw3);  cars.add(bmw4);  return cars;}  }
class C{  private XYSeries createSeriesB(){  XYSeries s=new XYSeries("B",true,false);  s.add(1.0,null);  s.add(2.0,2.2);  return s;}  }
class C{  public ConsistencyException(){  super();}  }
class C{  IDebugCounter registerCounterLocal(IDebugCounterService countersService,String hierarchy,String stringId,String messageType){  String counterHierarchy=stringId + hierarchy + "/"+ messageType;  String counterDescription="Number of " + messageType + " messages in this connection";  return countersService.registerCounter(COUNTER_MODULE,counterHierarchy,counterDescription);}  }
class C{  private void registerElements(Model model,Expression path) throws Exception {  String prefix=path.getPrefix();  String name=path.getFirst();  int index=path.getIndex();  if (name != null) {    Model next=model.register(name,prefix,index);    Expression child=path.getPath(1);    if (path.isPath()) {      registerElements(next,child);    }  }  registerElement(model,path);}  }
class C{  public static String substring(String str,int start){  if (str == null) {    return null;  }  if (start < 0) {    start=str.length() + start;  }  if (start < 0) {    start=0;  }  if (start > str.length()) {    return "";  }  return str.substring(start);}  }
class C{  public long optLong(String key){  return this.optLong(key,0);}  }
class C{  private void createCimConnection(CimConnectionInfo connectionInfo) throws Exception {  String hostAndPort=generateConnectionCacheKey(connectionInfo.getHost(),connectionInfo.getPort());  s_logger.info("Creating connection to CIM provider on host/port {}",hostAndPort);  try {    CimConnection connection=new CimConnection(connectionInfo,_listener,_configuration.getIndicationFilterMap());    connection.connect(_configuration.getSubscriptionsIdentifier(),_configuration.getDeleteStaleSubscriptionsOnConnect());    _connections.put(hostAndPort,connection);    connectionLastTouch.put(hostAndPort,System.currentTimeMillis());  } catch (  Exception e) {    throw new Exception(MessageFormatter.format("Failed creating connection to CIM provider on host/port {}",hostAndPort).getMessage(),e);  }}  }
class C{  private void synchronizeFolder(OCFile folder){  if (mFailedResultsCounter > MAX_FAILED_RESULTS || isFinisher(mLastFailedResult))   return;  RefreshFolderOperation synchFolderOp=new RefreshFolderOperation(folder,mCurrentSyncTime,true,mIsShareSupported,false,getStorageManager(),getAccount(),getContext());  RemoteOperationResult result=synchFolderOp.execute(getClient());  sendLocalBroadcast(EVENT_FULL_SYNC_FOLDER_CONTENTS_SYNCED,folder.getRemotePath(),result);  if (result.isSuccess() || result.getCode() == ResultCode.SYNC_CONFLICT) {    if (result.getCode() == ResultCode.SYNC_CONFLICT) {      mConflictsFound+=synchFolderOp.getConflictsFound();      mFailsInFavouritesFound+=synchFolderOp.getFailsInFavouritesFound();    }    if (synchFolderOp.getForgottenLocalFiles().size() > 0) {      mForgottenLocalFiles.putAll(synchFolderOp.getForgottenLocalFiles());    }    if (result.isSuccess()) {      List<OCFile> children=synchFolderOp.getChildren();      syncChildren(children);    }  } else {    if (result.getCode() == RemoteOperationResult.ResultCode.UNAUTHORIZED || result.isIdPRedirection()) {      mSyncResult.stats.numAuthExceptions++;    } else     if (result.getException() instanceof DavException) {      mSyncResult.stats.numParseExceptions++;    } else     if (result.getException() instanceof IOException) {      mSyncResult.stats.numIoExceptions++;    }    mFailedResultsCounter++;    mLastFailedResult=result;  }}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  Exception e) {    return new InternalError();  }}  }
class C{  private URL findByClassloader(String resource){  return BIRTReportService.class.getResource(resource);}  }
class C{  public double draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,Rectangle2D reservedArea,RectangleEdge edge){  Rectangle2D colorBarArea=null;  double thickness=calculateBarThickness(dataArea,edge);  if (this.colorBarThickness > 0) {    thickness=this.colorBarThickness;  }  double length;  if (RectangleEdge.isLeftOrRight(edge)) {    length=dataArea.getHeight();  } else {    length=dataArea.getWidth();  }  if (this.colorBarLength > 0) {    length=this.colorBarLength;  }  if (edge == RectangleEdge.BOTTOM) {    colorBarArea=new Rectangle2D.Double(dataArea.getX(),plotArea.getMaxY() + this.outerGap,length,thickness);  } else   if (edge == RectangleEdge.TOP) {    colorBarArea=new Rectangle2D.Double(dataArea.getX(),reservedArea.getMinY() + this.outerGap,length,thickness);  } else   if (edge == RectangleEdge.LEFT) {    colorBarArea=new Rectangle2D.Double(plotArea.getX() - thickness - this.outerGap,dataArea.getMinY(),thickness,length);  } else   if (edge == RectangleEdge.RIGHT) {    colorBarArea=new Rectangle2D.Double(plotArea.getMaxX() + this.outerGap,dataArea.getMinY(),thickness,length);  }  this.axis.refreshTicks(g2,new AxisState(),colorBarArea,edge);  drawColorBar(g2,colorBarArea,edge);  AxisState state=null;  assert colorBarArea != null;  if (edge == RectangleEdge.TOP) {    cursor=colorBarArea.getMinY();    state=this.axis.draw(g2,cursor,reservedArea,colorBarArea,RectangleEdge.TOP,null);  } else   if (edge == RectangleEdge.BOTTOM) {    cursor=colorBarArea.getMaxY();    state=this.axis.draw(g2,cursor,reservedArea,colorBarArea,RectangleEdge.BOTTOM,null);  } else   if (edge == RectangleEdge.LEFT) {    cursor=colorBarArea.getMinX();    state=this.axis.draw(g2,cursor,reservedArea,colorBarArea,RectangleEdge.LEFT,null);  } else   if (edge == RectangleEdge.RIGHT) {    cursor=colorBarArea.getMaxX();    state=this.axis.draw(g2,cursor,reservedArea,colorBarArea,RectangleEdge.RIGHT,null);  }  assert state != null;  return state.getCursor();}  }
class C{  @Override public CreateSnapshotRequest indices(String... indices){  this.indices=indices;  return this;}  }
class C{  public void createClusterConfigRootDirs() throws ConfigurationException {  clusterConfigDir=new File(ClusterConfiguration.getClusterConfigRootDirName(clusterHomeName));  clusterConfigRootDir=new File(getClusterConfigRootDirName(clusterHomeName));  if (!clusterConfigDir.exists()) {    logger.debug("Creating new 'cluster' directory: " + clusterConfigDir.getAbsolutePath());    clusterConfigDir.mkdirs();  }  if (!clusterConfigDir.isDirectory() || !clusterConfigDir.canWrite()) {    throw new ConfigurationException("'cluster' directory invalid or unreadable: " + clusterConfigDir.getAbsolutePath());  }  if (!clusterConfigRootDir.exists()) {    logger.debug("Creating new cluster configuration directory: " + clusterConfigRootDir.getAbsolutePath());    clusterConfigRootDir.mkdirs();  }  if (!clusterConfigRootDir.isDirectory() || !clusterConfigRootDir.canWrite()) {    throw new ConfigurationException("cluster configuration directory invalid or unreadable: " + clusterConfigRootDir.getAbsolutePath());  }}  }
class C{  private void trace(){  glUseProgram(computeProgram);  glDisable(GL_DEPTH_TEST);  updateComputeUbo();  glBindImageTexture(framebufferImageBinding,raytraceTexture,0,false,0,GL_READ_WRITE,GL_RGBA32F);  glBindImageTexture(worldPositionImageBinding,positionTexture,0,false,0,GL_READ_ONLY,GL_RGBA32F);  glBindImageTexture(worldNormalImageBinding,normalTexture,0,false,0,GL_READ_ONLY,GL_RGBA16F);  glBindBufferBase(GL_UNIFORM_BUFFER,computeUboBinding,ubo);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,ssbo);  int worksizeX=mathRoundPoT(width);  int worksizeY=mathRoundPoT(height);  glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);  glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,0);  glBindBufferBase(GL_UNIFORM_BUFFER,computeUboBinding,0);  glBindImageTexture(framebufferImageBinding,0,0,false,0,GL_READ_WRITE,GL_RGBA32F);  glBindImageTexture(worldPositionImageBinding,0,0,false,0,GL_READ_ONLY,GL_RGBA32F);  glBindImageTexture(worldNormalImageBinding,0,0,false,0,GL_READ_ONLY,GL_RGBA16F);  glUseProgram(0);  frameNumber++;}  }
class C{  public static boolean canRW(Resource res){  return res.isReadable() && res.isWriteable();}  }
class C{  public void takeSnapshot(){  if (SimApplet.isApplet()) {    Object[] options={"Oops"};    JOptionPane.showOptionDialog(this,"You cannot save snapshots from an applet.","MASON Applet Restriction",JOptionPane.OK_OPTION,JOptionPane.ERROR_MESSAGE,null,options,options[0]);    return;  }  canvas.beginCapturing(false);  FileDialog fd=new FileDialog(getFrame(),"Save Snapshot as 24-bit PNG...",FileDialog.SAVE);  fd.setFile("Untitled.png");  fd.setVisible(true);  ;  if (fd.getFile() != null)   try {    File snapShotFile=new File(fd.getDirectory(),Utilities.ensureFileEndsWith(fd.getFile(),".png"));    BufferedImage image=canvas.getLastImage();    PNGEncoder tmpEncoder=new PNGEncoder(image,false,PNGEncoder.FILTER_NONE,9);    OutputStream stream=new BufferedOutputStream(new FileOutputStream(snapShotFile));    stream.write(tmpEncoder.pngEncode());    stream.close();    image.flush();  } catch (  FileNotFoundException e) {  }catch (  IOException e) {  }}  }
class C{  public LineReader(String filename) throws IOException {  display_progress=(Decoder.VERBOSE >= 1);  progress=0;  InputStream stream=null;  long totalBytes=-1;  if (filename.equals("-")) {    rawStream=null;    stream=new FileInputStream(FileDescriptor.in);  } else {    totalBytes=new File(filename).length();    rawStream=new ProgressInputStream(new FileInputStream(filename),totalBytes);    try {      stream=new GZIPInputStream(rawStream);    } catch (    Exception e) {      rawStream.close();      stream=rawStream=new ProgressInputStream(new FileInputStream(filename),totalBytes);    }  }  this.reader=new BufferedReader(new InputStreamReader(stream,StandardCharsets.UTF_8));}  }
class C{  public static final TColor newGray(float gray){  return newGrayAlpha(gray,1);}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  MigrationList response=client.get(MigrationList.class,baseUrl);  return defaultList(response.getMigrations());}  }
class C{  public static void mixStereoInMemory(int inAddr,int inOutAddr,int samples,float inLeftVolume,float inRightVolume){  if (Math.abs(inLeftVolume) < 0.0001f) {    inLeftVolume=0.f;  }  if (Math.abs(inRightVolume) < 0.0001f) {    inRightVolume=0.f;  }  if (inLeftVolume == 0.f && inRightVolume == 0.f) {    return;  }  if (inLeftVolume == 1.f && inRightVolume == 1.f) {    mixStereoInMemory(inAddr,inOutAddr,samples);    return;  }  if (inLeftVolume < 0.f || inLeftVolume > 1.f) {    if (Modules.log.isEnabledFor(Level.WARN)) {      Modules.log.warn(String.format("Utils.mixStereoInMemory left volume outside range %f",inLeftVolume));    }  }  if (inRightVolume < 0.f || inRightVolume > 1.f) {    if (Modules.log.isEnabledFor(Level.WARN)) {      Modules.log.warn(String.format("Utils.mixStereoInMemory right volume outside range %f",inRightVolume));    }  }  int length=samples << 2;  IMemoryReader inReader=MemoryReader.getMemoryReader(inAddr,length,4);  IMemoryReader inOutReader=MemoryReader.getMemoryReader(inOutAddr,length,4);  IMemoryWriter inOutWriter=MemoryWriter.getMemoryWriter(inOutAddr,length,4);  for (int i=0; i < samples; i++) {    int inStereoValue=inReader.readNext();    if (inStereoValue == 0) {      inOutReader.skip(1);      inOutWriter.skip(1);    } else {      inStereoValue=getStereo(inStereoValue,inLeftVolume,inRightVolume);      int inOutStereoValue=inOutReader.readNext();      inOutStereoValue=mixStereo(inStereoValue,inOutStereoValue);      inOutWriter.writeNext(inOutStereoValue);    }  }  inOutWriter.flush();}  }
class C{  public static void bindVirtualKeyboard(TextArea t,VirtualKeyboard vkb){  t.putClientProperty(MARKER_VKB,vkb);}  }
class C{  public TIntArrayList(int capacity){  _data=new int[capacity];  _pos=0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void clear(){  if (paoFields != null) {    paoFields=null;  }  paoFields=null;  nFieldCount=0;  pachData=null;  nDataSize=0;  nReuseHeader=false;}  }
class C{  private static void save(Bitmap src,String fileName,Bitmap.CompressFormat format,int quality) throws ImageSaveException {  FileOutputStream outputStream=null;  try {    outputStream=new FileOutputStream(fileName);    src.compress(format,quality,outputStream);    outputStream.close();  } catch (  IOException e) {    throw new ImageSaveException(e);  } finally {    if (outputStream != null) {      try {        outputStream.close();      } catch (      IOException e1) {        e1.printStackTrace();      }    }  }}  }
class C{  public ScatterHome(String title,int height,Set<Report> toolResults,String focus){  this.focus=focus;  display("          " + title,height,toolResults);}  }
class C{  @SuppressWarnings("unused") @Contract(pure=true) public final boolean isOperationRunning(@NonNull final String tag){  return mHelper.isOperationRunning(tag);}  }
class C{  private MovementModifier(){}  }
class C{  protected void sendFunctionGroup2(){  log.debug("sendFunctionGroup2() called");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:14.686 -0500",hash_original_method="F581C713CF99D0BA42CA770E334518CE",hash_generated_method="7F77BD1CD1FB490660CE5D1D562D6B90") private void indexFiles(){  String[] initialFiles=this.initialFiles;  if (initialFiles != null) {    this.initialFiles=null;    Set<CacheFile> diskOnly=new TreeSet<CacheFile>();    for (    String name : initialFiles) {      if (!accessOrder.containsKey(name)) {        diskOnly.add(new CacheFile(directory,name));      }    }    if (!diskOnly.isEmpty()) {      Map<String,File> newOrder=newAccessOrder();      for (      CacheFile cacheFile : diskOnly) {        newOrder.put(cacheFile.name,cacheFile);      }      newOrder.putAll(accessOrder);      this.accessOrder=newOrder;    }  }}  }
class C{  public void addRegion(Region r){  regions.add(r);}  }
class C{  public static boolean isShowLicenseDialog(){  return s_license_dialog;}  }
class C{  public static String normalizeName(String name){  String fileName=NAME_FORBIDDEN_PATTERN.matcher(name).replaceAll("_");  fileName=fileName.replaceAll(String.format("([%1$s])([%1$s]+)","-_"),"$1");  fileName=StringUtils.strip(fileName,"_-");  fileName=fileName.trim();  return fileName;}  }
class C{  public void addParser(Parser parser){  if (parser != null && !parsers.contains(parser)) {    if (running) {      timer.stop();    }    parsers.add(parser);    if (parsers.size() == 1) {      ToolTipManager.sharedInstance().registerComponent(textArea);    }    if (running) {      timer.restart();    }  }}  }
class C{  public void startFunctionExecution(boolean haveResult){  this._stats.incInt(_functionExecutionCallsId,1);  this._stats.incInt(_functionExecutionsRunningId,1);  if (haveResult) {    this._stats.incInt(_functionExecutionsHasResultRunningId,1);  }  aggregateStats.startFunctionExecution(haveResult);}  }
class C{  public void modifyEnergyStored(int energy){  this.energy+=energy;  if (this.energy > capacity) {    this.energy=capacity;  } else   if (this.energy < 0) {    this.energy=0;  }}  }
class C{  public boolean engineCanResolve(Element element,String baseURI,StorageResolver storage){  return XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_KEYNAME);}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  private UserInfo(String address,String alias,int gender,int age,int height,int weight,int type){  this.btAddress=address;  this.alias=alias;  this.gender=gender;  this.age=age;  this.height=height;  this.weight=weight;  this.type=type;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMHandlerElement(prefix,(AbstractDocument)doc);}  }
class C{  @Deprecated public static int[] readInts(){  return new In().readAllInts();}  }
class C{  public boolean findWifiConfigurationBySsid(String ssid){  List<WifiConfiguration> configuredNetworks=wifiManager.getConfiguredNetworks();  boolean isAvailable=false;  for (  WifiConfiguration configuration : configuredNetworks) {    if (configuration.SSID.equals(ssid)) {      isAvailable=true;      break;    }  }  return isAvailable;}  }
class C{  public Quaternionf rotationZ(float angle){  float cos=(float)Math.cos(angle * 0.5);  float sin=(float)Math.sin(angle * 0.5);  w=cos;  x=0.0f;  y=0.0f;  z=sin;  return this;}  }
class C{  public void findAndInit(Iterator it){  while (it.hasNext()) {    findAndInit(it.next());  }}  }
class C{  public AbstractAgent(AgentProgram aProgram){  program=aProgram;}  }
class C{  private void removeAllNodes(@Nullable Object key){  Iterators.clear(new ValueForKeyIterator(key));}  }
class C{  public static int encodeZigZag32(final int n){  return (n << 1) ^ (n >> 31);}  }
class C{  public TermsBuilder executionHint(String executionHint){  this.executionHint=executionHint;  return this;}  }
class C{  static String[] prependToStringArray(String[] array,String str){  String[] result=new String[array.length];  for (int i=0; i < result.length; i++) {    if (i == 0) {      result[0]=str + array[0];    } else {      result[i]=StringHelper.copyString(" ",str.length()) + array[i];    }  }  return result;}  }
class C{  public byte[] generateClass(boolean generateInitCode){  int classMods=getASMModifiers(classModifiers) | ACC_PUBLIC;  if (isInterface)   classMods|=ACC_INTERFACE;  String[] interfaceNames=new String[interfaces.length];  for (int i=0; i < interfaces.length; i++)   interfaceNames[i]=Type.getInternalName(interfaces[i]);  String sourceFile="BeanShell Generated via ASM (www.objectweb.org)";  ClassWriter cw=new ClassWriter(true);  cw.visit(classMods,fqClassName,superClassName,interfaceNames,sourceFile);  if (!isInterface) {    generateField(BSHTHIS + className,"Lbsh/This;",ACC_PUBLIC,cw);    generateField(BSHSTATIC + className,"Lbsh/This;",ACC_PUBLIC + ACC_STATIC,cw);  }  for (int i=0; i < vars.length; i++) {    String type=vars[i].getTypeDescriptor();    if (vars[i].hasModifier("private") || type == null)     continue;    int modifiers;    if (isInterface)     modifiers=ACC_PUBLIC | ACC_STATIC | ACC_FINAL; else     modifiers=getASMModifiers(vars[i].getModifiers());    generateField(vars[i].getName(),type,modifiers,cw);  }  if (generateInitCode)   generateStaticInitializer(cw);  boolean hasConstructor=false;  for (int i=0; i < constructors.length; i++) {    if (constructors[i].hasModifier("private"))     continue;    int modifiers=getASMModifiers(constructors[i].getModifiers());    generateConstructor(i,constructors[i].getParamTypeDescriptors(),modifiers,cw);    hasConstructor=true;  }  if (!isInterface && !hasConstructor)   generateConstructor(DEFAULTCONSTRUCTOR,new String[0],ACC_PUBLIC,cw);  for (int i=0; i < methods.length; i++) {    String returnType=methods[i].getReturnTypeDescriptor();    if (methods[i].hasModifier("private"))     continue;    int modifiers=getASMModifiers(methods[i].getModifiers());    if (isInterface)     modifiers|=(ACC_PUBLIC | ACC_ABSTRACT);    generateMethod(className,fqClassName,methods[i].getName(),returnType,methods[i].getParamTypeDescriptors(),modifiers,cw);    boolean isStatic=(modifiers & ACC_STATIC) > 0;    boolean overridden=classContainsMethod(superClass,methods[i].getName(),methods[i].getParamTypeDescriptors());    if (!isStatic && overridden)     generateSuperDelegateMethod(superClassName,methods[i].getName(),returnType,methods[i].getParamTypeDescriptors(),modifiers,cw);  }  return cw.toByteArray();}  }
class C{  private static boolean isValidPlacement(final StendhalRPZone zone,final Entity entity,final Shape allowedArea,final int oldX,final int oldY,final int newX,final int newY,final boolean checkPath){  if (!zone.collides(entity,newX,newY)) {    if ((allowedArea != null) && (!allowedArea.contains(newX,newY))) {      return false;    }    if (!checkPath) {      return true;    }    final List<Node> path=Path.searchPath(entity,zone,oldX,oldY,new Rectangle(newX,newY,1,1),400,false);    if (!path.isEmpty()) {      return true;    }  }  return false;}  }
class C{  public BusinessObjectData createBusinessObjectDataFromEntity(BusinessObjectDataEntity businessObjectDataEntity,Boolean includeBusinessObjectDataStatusHistory){  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectDataEntity.getBusinessObjectFormat();  BusinessObjectData businessObjectData=new BusinessObjectData();  businessObjectData.setNamespace(businessObjectFormatEntity.getBusinessObjectDefinition().getNamespace().getCode());  businessObjectData.setBusinessObjectDefinitionName(businessObjectFormatEntity.getBusinessObjectDefinition().getName());  businessObjectData.setId(businessObjectDataEntity.getId());  businessObjectData.setBusinessObjectFormatUsage(businessObjectFormatEntity.getUsage());  businessObjectData.setBusinessObjectFormatFileType(businessObjectFormatEntity.getFileType().getCode());  businessObjectData.setBusinessObjectFormatVersion(businessObjectFormatEntity.getBusinessObjectFormatVersion());  businessObjectData.setPartitionKey(businessObjectDataEntity.getBusinessObjectFormat().getPartitionKey());  businessObjectData.setPartitionValue(businessObjectDataEntity.getPartitionValue());  businessObjectData.setSubPartitionValues(getSubPartitionValues(businessObjectDataEntity));  businessObjectData.setStatus(businessObjectDataEntity.getStatus().getCode());  businessObjectData.setVersion(businessObjectDataEntity.getVersion());  businessObjectData.setLatestVersion(businessObjectDataEntity.getLatestVersion());  businessObjectData.setStorageUnits(storageUnitHelper.createStorageUnitsFromEntities(businessObjectDataEntity.getStorageUnits()));  List<Attribute> attributes=new ArrayList<>();  businessObjectData.setAttributes(attributes);  for (  BusinessObjectDataAttributeEntity attributeEntity : businessObjectDataEntity.getAttributes()) {    Attribute attribute=new Attribute();    attributes.add(attribute);    attribute.setName(attributeEntity.getName());    attribute.setValue(attributeEntity.getValue());  }  List<BusinessObjectDataKey> businessObjectDataKeys=new ArrayList<>();  businessObjectData.setBusinessObjectDataParents(businessObjectDataKeys);  for (  BusinessObjectDataEntity parent : businessObjectDataEntity.getBusinessObjectDataParents()) {    businessObjectDataKeys.add(createBusinessObjectDataKeyFromEntity(parent));  }  Collections.sort(businessObjectDataKeys,new BusinessObjectDataKeyComparator());  businessObjectDataKeys=new ArrayList<>();  businessObjectData.setBusinessObjectDataChildren(businessObjectDataKeys);  for (  BusinessObjectDataEntity parent : businessObjectDataEntity.getBusinessObjectDataChildren()) {    businessObjectDataKeys.add(createBusinessObjectDataKeyFromEntity(parent));  }  Collections.sort(businessObjectDataKeys,new BusinessObjectDataKeyComparator());  if (BooleanUtils.isTrue(includeBusinessObjectDataStatusHistory)) {    List<BusinessObjectDataStatusChangeEvent> businessObjectDataStatusChangeEvents=new ArrayList<>();    businessObjectData.setBusinessObjectDataStatusHistory(businessObjectDataStatusChangeEvents);    for (    BusinessObjectDataStatusHistoryEntity businessObjectDataStatusHistoryEntity : businessObjectDataEntity.getHistoricalStatuses()) {      businessObjectDataStatusChangeEvents.add(new BusinessObjectDataStatusChangeEvent(businessObjectDataStatusHistoryEntity.getStatus().getCode(),HerdDateUtils.getXMLGregorianCalendarValue(businessObjectDataStatusHistoryEntity.getCreatedOn()),businessObjectDataStatusHistoryEntity.getCreatedBy()));    }  }  return businessObjectData;}  }
class C{  private void clearRemoteNotificationsInternal(){  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(Wearable.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    Iterator<String> itr=Utils.getNodes(googleApiClient).iterator();    while (itr.hasNext()) {      Wearable.MessageApi.sendMessage(googleApiClient,itr.next(),Constants.CLEAR_NOTIFICATIONS_PATH,null);    }  }  googleApiClient.disconnect();}  }
class C{  public void textAlign(int align){  textAlign(align,BASELINE);}  }
class C{  public GetContainerLogsParams withTimestamps(boolean timestamps){  this.timestamps=timestamps;  return this;}  }
class C{  public boolean isLeaf(){  return right == null && left == null;}  }
class C{  boolean cancel(int propertyConstant){  if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {    int count=mNameValuesHolder.size();    for (int i=0; i < count; ++i) {      NameValuesHolder nameValuesHolder=mNameValuesHolder.get(i);      if (nameValuesHolder.mNameConstant == propertyConstant) {        mNameValuesHolder.remove(i);        mPropertyMask&=~propertyConstant;        return true;      }    }  }  return false;}  }
class C{  @Override public void error(String msg,Throwable t){  if (logger.isLoggable(Level.SEVERE)) {    log(SELF,Level.SEVERE,msg,t);  }}  }
class C{  protected V alternativeGet(K key){  if (key == null) {    throw new NullPointerException("key == null");  }  V mapValue;synchronized (this) {    mapValue=map.get(key);    if (mapValue != null) {      hitCount++;      return mapValue;    }    missCount++;  }  return alternative(key,level);}  }
class C{  protected void postorder(TreeNode<E> root){  if (root == null)   return;  postorder(root.left);  postorder(root.right);  System.out.print(root.element + " ");}  }
class C{  @Override public String toString(){synchronized (this) {    return "DLockToken" + "@" + Integer.toHexString(hashCode()) + ", name: "+ this.name+ ", thread: <"+ getThreadName()+ ">"+ ", recursion: "+ this.recursion+ ", leaseExpireTime: "+ this.leaseExpireTime+ ", leaseId: "+ this.leaseId+ ", ignoreForRecovery: "+ this.ignoreForRecovery+ ", lesseeThread: "+ this.lesseeThread+ ", usageCount: "+ this.usageCount+ ", currentTime: "+ getCurrentTime();  }}  }
class C{  public In(URL url){  try {    URLConnection site=url.openConnection();    InputStream is=site.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    System.err.println("Could not open " + url);  }}  }
class C{  public void playTogether(Collection<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    Builder builder=null;    for (    Animator anim : items) {      if (builder == null) {        builder=play(anim);      } else {        builder.with(anim);      }    }  }}  }
class C{  private synchronized ResourceBundle findResourceBundle(String name,boolean useCallersClassLoader){  if (name == null) {    return null;  }  Locale currentLocale=Locale.getDefault();  final LoggerBundle lb=loggerBundle;  if (lb.userBundle != null && name.equals(lb.resourceBundleName)) {    return lb.userBundle;  } else   if (catalog != null && currentLocale.equals(catalogLocale) && name.equals(catalogName)) {    return catalog;  }  if (name.equals(SYSTEM_LOGGER_RB_NAME)) {    catalog=findSystemResourceBundle(currentLocale);    catalogName=name;    catalogLocale=currentLocale;    return catalog;  }  ClassLoader cl=Thread.currentThread().getContextClassLoader();  if (cl == null) {    cl=ClassLoader.getSystemClassLoader();  }  try {    catalog=ResourceBundle.getBundle(name,currentLocale,cl);    catalogName=name;    catalogLocale=currentLocale;    return catalog;  } catch (  MissingResourceException ex) {  }  if (useCallersClassLoader) {    ClassLoader callersClassLoader=getCallersClassLoader();    if (callersClassLoader == null || callersClassLoader == cl) {      return null;    }    try {      catalog=ResourceBundle.getBundle(name,currentLocale,callersClassLoader);      catalogName=name;      catalogLocale=currentLocale;      return catalog;    } catch (    MissingResourceException ex) {      return null;    }  } else {    return null;  }}  }
class C{  public String toString(){  final String TAB="    ";  String retValue="";  retValue="MMDocument ( " + "csvLineNo = " + this.csvLineNo + TAB+ "DocBaseType = "+ this.DocBaseType+ TAB+ "DocumentNo = "+ this.DocumentNo+ TAB+ "LocatorValue = "+ this.LocatorValue+ TAB+ "LocatorValueTo = "+ this.LocatorValueTo+ TAB+ "ProductValue = "+ this.ProductValue+ TAB+ "Price = "+ this.Price+ TAB+ "Qty = "+ this.Qty+ TAB+ "QtyOrdered = "+ this.QtyOrdered+ TAB+ "QtyReserved = "+ this.QtyReserved+ TAB+ "ASI = "+ this.ASI+ TAB+ "Date = "+ this.Date+ TAB+ "PODocumentNo = "+ this.PODocumentNo+ TAB+ "IsReversal = "+ this.IsReversal+ TAB+ "document = "+ this.document+ TAB+ " )";  return retValue;}  }
class C{  public static double milesToKilometer(double miles){  return miles / MILES_PER_KILOMETER;}  }
class C{  public boolean hasVibrobladesInLocation(int location){  if ((location != Mech.LOC_RARM) && (location != Mech.LOC_LARM)) {    return false;  }  for (int slot=0; slot < this.getNumberOfCriticals(location); slot++) {    CriticalSlot cs=getCritical(location,slot);    if (cs == null) {      continue;    }    if (cs.getType() != CriticalSlot.TYPE_EQUIPMENT) {      continue;    }    Mounted m=cs.getMount();    EquipmentType type=m.getType();    if ((type instanceof MiscType) && ((MiscType)type).isVibroblade()) {      return !(m.isDestroyed() || m.isMissing() || m.isBreached());    }  }  return false;}  }
class C{  private void checkSendTrackToGoogle(){  if (!sendToGoogle(activityMyTracks.getString(R.string.export_google_maps)) || !sendToGoogle(activityMyTracks.getString(R.string.export_google_fusion_tables)) || !sendToGoogle(activityMyTracks.getString(R.string.export_google_spreadsheets))) {    return;  }  assertTrue(GoogleUtils.deleteMaps(activityMyTracks.getApplicationContext(),GoogleUtils.ACCOUNT_1,EndToEndTestUtils.trackName));  assertTrue(GoogleUtils.deleteFusionTables(activityMyTracks.getApplicationContext(),GoogleUtils.ACCOUNT_1,EndToEndTestUtils.trackName));  assertTrue(GoogleUtils.deleteSpreadsheetsRow(activityMyTracks.getApplicationContext(),GoogleUtils.ACCOUNT_1,EndToEndTestUtils.trackName));}  }
class C{  public final boolean equals(Object anObject){  if (anObject instanceof AWTKeyStroke) {    AWTKeyStroke ks=(AWTKeyStroke)anObject;    return (ks.keyChar == keyChar && ks.keyCode == keyCode && ks.onKeyRelease == onKeyRelease && ks.modifiers == modifiers);  }  return false;}  }
class C{  public void write(int c) throws IOException {synchronized (lock) {    ensureOpen();    if (nextChar >= nChars)     flushBuffer();    cb[nextChar++]=(char)c;  }}  }
class C{  public void println() throws IOException {  newLine();}  }
class C{  @Override public double execute(double in1,double in2){  return (in1 < in2 ? 1.0 : 0.0);}  }
class C{  public void pOlnI(Object o) throws IOException {  pO(o.toString());  pln();  pI();}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public RuntimeException(){}  }
class C{  public void putString(String key,String value){  checkForNullKey(key);  checkForNullValue(value);  preferences.edit().putString(key,value).apply();}  }
class C{  public void check(Probe probe) throws InterruptedException {  Timeout timeout=newTimeout(timeoutMillis);  probe.sample();  while (!probe.isSatisfied()) {    if (timeout.hasTimeout()) {      throw new AssertionError(describeFailureOf(probe));    }    sleep(pollDelayMillis);    probe.sample();  }}  }
class C{  public final AssertSubscriber<T> assertTerminated(){  if (cdl.getCount() != 0) {    throw new AssertionError("Not terminated",null);  }  return this;}  }
class C{  public boolean isAtSourceHost(){  return atSourceHost;}  }
class C{  public void paintIcon(Component c,Graphics g,int x,int y){  _x=x;  _y=y;  _cancelIcon.paintIcon(c,g,x,y);}  }
class C{  public boolean isIncludeNullsActivity(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsActivity);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addInputMethodListener(InputMethodListener l){  m_textPane.addInputMethodListener(l);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  private void nonContextualShape(char[] text,int start,int count){  char maxDigit=(char)0x0039;  char minDigit=(char)((fRanges == ETHIOPIC) ? 0x0031 : 0x0030);  for (int ind=start; ind < start + count; ind++) {    if (minDigit <= text[ind] && text[ind] <= maxDigit) {      text[ind]=(char)(digitsLowRanges[fSingleRangeIndex] + text[ind]);    }  }}  }
class C{  public void updateFloatingButton(){  if (SelectedTrackList.getInstance().getSelectedItems().size() > 0) {    mFloatingButtonExport.show();  } else {    mFloatingButtonExport.hide();  }}  }
class C{  public DataStoreModelsImpl(SQL modelsTable,IModelFileHandler<T> modelFileHandler){  this(modelsTable,modelFileHandler,DEFAULT_MODELS_CACHE_SIZE);}  }
class C{  @VisibleForTesting void writeElevation(double elevation,StringBuilder builder,int resId,String lineBreak){  long elevationInM=Math.round(elevation);  long elevationInFt=Math.round(elevation * UnitConversions.M_TO_FT);  builder.append(context.getString(resId,elevationInM,elevationInFt));  builder.append(lineBreak);}  }
class C{  protected final boolean isOkToUse(Control control){  return (control != null) && (Display.getCurrent() != null) && !control.isDisposed();}  }
class C{  public final int refreshClustersFromDataStore(int componentId,int currentMaxClusterId,Collection<TextClusterData> clustersData) throws AdeException {  final TextClusterReader textClustersReader=new TextClusterReader(componentId,currentMaxClusterId,clustersData);  textClustersReader.executeQuery();  return textClustersReader.m_maxClusterId;}  }
class C{  public String toString(){  return "ZonedChronology[" + getBase() + ", "+ getZone().getID()+ ']';}  }
class C{  public void putParcelableArrayList(String key,ArrayList<? extends Parcelable> value){  unparcel();  mMap.put(key,value);  mFdsKnown=false;}  }
class C{  public InclusivePositionUpdater(String category){  fCategory=category;}  }
class C{  protected Individual produceCurrent(int subpopulation,EvolutionState state,int thread){  return state.population.subpops[subpopulation].individuals[selectionMethodCurrent[subpopulation].produce(subpopulation,state,thread)];}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.ENTITY_ATTRIBUTE_SOURCE__ATTRIBUTE:    return attribute != ATTRIBUTE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public final static String streamToString(InputStream in) throws IOException {  StringBuffer out=new StringBuffer();  byte[] b=new byte[4096];  for (int n; (n=in.read(b)) != -1; ) {    out.append(new String(b,0,n));  }  return out.toString();}  }
class C{  public Tomcat7x8xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(TomcatPropertySet.CUSTOM_VALVE,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.CONTEXT_ALLOWMULTIPART,Boolean.TRUE);  this.propertySupportMap.remove(TomcatPropertySet.CONNECTOR_EMPTY_SESSION_PATH);}  }
class C{  @Override public void introspect(ContextH3 context){}  }
class C{  public final static String readUTF(DataInput in) throws IOException {  int utflen=in.readUnsignedShort();  byte[] bytearr=null;  char[] chararr=null;  if (in instanceof DataInputStream) {    DataInputStream dis=(DataInputStream)in;    if (dis.bytearr.length < utflen) {      dis.bytearr=new byte[utflen * 2];      dis.chararr=new char[utflen * 2];    }    chararr=dis.chararr;    bytearr=dis.bytearr;  } else {    bytearr=new byte[utflen];    chararr=new char[utflen];  }  int c, char2, char3;  int count=0;  int chararr_count=0;  in.readFully(bytearr,0,utflen);  while (count < utflen) {    c=(int)bytearr[count] & 0xff;    if (c > 127)     break;    count++;    chararr[chararr_count++]=(char)c;  }  while (count < utflen) {    c=(int)bytearr[count] & 0xff;switch (c >> 4) {case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:      count++;    chararr[chararr_count++]=(char)c;  break;case 12:case 13:count+=2;if (count > utflen) throw new UTFDataFormatException("malformed input: partial character at end");char2=(int)bytearr[count - 1];if ((char2 & 0xC0) != 0x80) throw new UTFDataFormatException("malformed input around byte " + count);chararr[chararr_count++]=(char)(((c & 0x1F) << 6) | (char2 & 0x3F));break;case 14:count+=3;if (count > utflen) throw new UTFDataFormatException("malformed input: partial character at end");char2=(int)bytearr[count - 2];char3=(int)bytearr[count - 1];if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) throw new UTFDataFormatException("malformed input around byte " + (count - 1));chararr[chararr_count++]=(char)(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));break;default :throw new UTFDataFormatException("malformed input around byte " + count);}}return new String(chararr,0,chararr_count);}  }
class C{  public void connectFailed(Route failedRoute,IOException failure){  if (failedRoute.proxy().type() != Proxy.Type.DIRECT && address.proxySelector() != null) {    address.proxySelector().connectFailed(address.url().uri(),failedRoute.proxy().address(),failure);  }  routeDatabase.failed(failedRoute);}  }
class C{  public static <T>RemoveQuery<T> finish(T query,long correlationId){  return finish(query,correlationId,"default");}  }
class C{  public boolean isParse(){  Object oo=get_Value(COLUMNNAME_Parse);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.363 -0500",hash_original_method="B34C300D12B589B0218EA4927548AE87",hash_generated_method="AF17F7DA43E32801C07AE88C94AAD385") private View findFocusableViewInMyBounds(final boolean leftFocus,final int left,View preferredFocusable){  final int fadingEdgeLength=getHorizontalFadingEdgeLength() / 2;  final int leftWithoutFadingEdge=left + fadingEdgeLength;  final int rightWithoutFadingEdge=left + getWidth() - fadingEdgeLength;  if ((preferredFocusable != null) && (preferredFocusable.getLeft() < rightWithoutFadingEdge) && (preferredFocusable.getRight() > leftWithoutFadingEdge)) {    return preferredFocusable;  }  return findFocusableViewInBounds(leftFocus,leftWithoutFadingEdge,rightWithoutFadingEdge);}  }
class C{  private V doGet(Object key){  if (key == null)   throw new NullPointerException();  Comparator<? super K> cmp=comparator;  outer:   for (; ; ) {    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {      Object v;      int c;      if (n == null)       break outer;      Node<K,V> f=n.next;      if (n != b.next)       break;      if ((v=n.value) == null) {        n.helpDelete(b,f);        break;      }      if (b.value == null || v == n)       break;      if ((c=cpr(cmp,key,n.key)) == 0) {        @SuppressWarnings("unchecked") V vv=(V)v;        return vv;      }      if (c < 0)       break outer;      b=n;      n=f;    }  }  return null;}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public Object[] toArray(){  Object[] elements=getArray();  return copyOf(elements,elements.length);}  }
class C{  @SuppressWarnings("deprecation") public BaseSeed(CropCard crop,int size,int statGrowth,int statGain,int statResistance,int stackSize){  super();  this.crop=crop;  this.id=Crops.instance.getIdFor(crop);  this.size=size;  this.statGrowth=statGrowth;  this.statGain=statGain;  this.statResistance=statResistance;  this.stackSize=stackSize;}  }
class C{  protected Piece(){  super();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double centreVal;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int k=0;  int kMinusOne=0;  int p=0;  double aLargeValue=Float.MAX_VALUE;  double currentNearestVal;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      k=Integer.parseInt(args[i]);    } else     if (i == 6) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (k < 3 || k > filterSizeX * filterSizeY) {    showFeedback("The k-value of the k-nearest mean filter is set inappropriately.");  }  kMinusOne--;  double[] nearestVals=new double[k];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    double[][] absDiffVals=new double[2][numPixelsInFilter];    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreVal=inputFile.getValue(row,col);        if (centreVal != noData) {          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              absDiffVals[0][a]=(z - centreVal) * (z - centreVal);              absDiffVals[1][a]=z;            } else {              absDiffVals[0][a]=noData;            }          }          n=0;          sum=0;          for (int m=0; m < k; m++) {            p=-1;            currentNearestVal=aLargeValue;            for (a=0; a < numPixelsInFilter; a++) {              if (absDiffVals[0][a] != noData && absDiffVals[0][a] < currentNearestVal) {                p=a;                currentNearestVal=absDiffVals[0][a];              }            }            if (p >= 0) {              n++;              sum+=absDiffVals[1][p];              absDiffVals[0][p]=noData;            }          }          if (n == k) {            outputFile.setValue(row,col,sum / n);          } else {            outputFile.setValue(row,col,centreVal);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static IPath toFilterPath(String filePath,IProject project){  IPath path=new Path(filePath);  IPath commonPath;  if (project != null) {    commonPath=project.getLocation();    IPath relativePath=getRelativePath(path,commonPath);    if (!relativePath.equals(path)) {      return relativePath;    }  }  commonPath=ResourcesPlugin.getWorkspace().getRoot().getLocation();  return getRelativePath(path,commonPath);}  }
class C{  @Override public ElectronicTaxReceiptArchive findById(ElectronicTaxReceiptArchive entity) throws DataAccessException {  if (!entity.getId().trim().isEmpty()) {    return dynamoDBMapper.load(getType(),entity.getId());  } else {    return null;  }}  }
class C{  public ParcelFileDescriptor executeForBlobFileDescriptor(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return null;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    return mConnection.executeForBlobFileDescriptor(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  public Object evaluate(float fraction,Object startValue,Object endValue){  int startInt=(Integer)startValue;  int startA=(startInt >> 24) & 0xff;  int startR=(startInt >> 16) & 0xff;  int startG=(startInt >> 8) & 0xff;  int startB=startInt & 0xff;  int endInt=(Integer)endValue;  int endA=(endInt >> 24) & 0xff;  int endR=(endInt >> 16) & 0xff;  int endG=(endInt >> 8) & 0xff;  int endB=endInt & 0xff;  return (startA + (int)(fraction * (endA - startA))) << 24 | (startR + (int)(fraction * (endR - startR))) << 16 | (startG + (int)(fraction * (endG - startG))) << 8 | (startB + (int)(fraction * (endB - startB)));}  }
class C{  public void syncUnreadReportCount(){  unReadReports=reportRepository.getUnreadCount();}  }
class C{  private BreakpointConditionParser(){}  }
class C{  public SystemVersion(final String url) throws JAXBException {  _dsDispatcher=new DSDispatcher();  _uriBuilder=new UriBuilder();  List<String> _matrixParamSet;  _matrixParamSet=_uriBuilder.addPathSegment(url);  _matrixParamSet=_uriBuilder.addPathSegment("system/version");  _templateAndMatrixParameterValues=new HashMap<String,Object>();}  }
class C{  public FDBigInteger multBy10(){  if (nWords == 0) {    return this;  }  if (isImmutable) {    int[] res=new int[nWords + 1];    res[nWords]=multAndCarryBy10(data,nWords,res);    return new FDBigInteger(res,offset);  } else {    int p=multAndCarryBy10(this.data,this.nWords,this.data);    if (p != 0) {      if (nWords == data.length) {        if (data[0] == 0) {          System.arraycopy(data,1,data,0,--nWords);          offset++;        } else {          data=Arrays.copyOf(data,data.length + 1);        }      }      data[nWords++]=p;    } else {      trimLeadingZeros();    }    return this;  }}  }
class C{  public static boolean isConnectionFast(int type,int subType){  if (type == ConnectivityManager.TYPE_WIFI) {    return true;  } else   if (type == ConnectivityManager.TYPE_MOBILE) {switch (subType) {case TelephonyManager.NETWORK_TYPE_1xRTT:      return false;case TelephonyManager.NETWORK_TYPE_CDMA:    return false;case TelephonyManager.NETWORK_TYPE_EDGE:  return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:default :return false;}} else {return false;}}  }
class C{  protected boolean matches(Node object){  if (object instanceof Element) {    Element element=(Element)object;    return qName.equals(element.getQName());  }  return false;}  }
class C{  public static void load(final JFrame parent,final IViewContainer container,final INaviView view){  Preconditions.checkNotNull(parent,"IE00011: Parent argument can not be null");  Preconditions.checkNotNull(container,"IE00012: Container argument can not be null");  Preconditions.checkNotNull(view,"IE00013: View argument can not be null");  if (view.isLoaded()) {    return;  }  final ViewLoaderThread thread=new ViewLoaderThread(view);  CProgressDialog.showEndless(parent,String.format("Loading view '%s'",view.getName()),thread);  final Exception exception=thread.getException();  if (exception != null) {    if (exception instanceof CouldntLoadDataException) {      CUtilityFunctions.logException(exception);      final String message="E00050: Could not load view";      final String description=CUtilityFunctions.createDescription(String.format("The view '%s' could not be loaded.",view.getName()),new String[]{"There were problems with the database connection.","Malformed data was found in the database."},new String[]{"The view was not loaded."});      NaviErrorDialog.show(parent,message,description,exception);    } else     if (exception instanceof CPartialLoadException) {      CUtilityFunctions.logException(exception);      final String moduleName=((CPartialLoadException)exception).getModule().getConfiguration().getName();      final String message="E00051: Could not load view";      final String description=CUtilityFunctions.createDescription(String.format("The view '%s' could not be loaded because it " + "depends on the unloaded module '%s'.",view.getName(),moduleName),new String[]{String.format("Module '%s' is not loaded.",moduleName)},new String[]{String.format("The view can not be loaded before the module '%s' is loaded.",moduleName)});      NaviErrorDialog.show(parent,message,description,exception);    }  }}  }
class C{  public void removeDeviceListener(DeviceListener l){  if (listeners == null) {    return;  }  if (listeners.contains(l)) {    listeners.remove(l);  }}  }
class C{  private void createSessionFactories(AccessType accessType){  sesFactory1=startHibernate(accessType,getTestGridName(0));  sesFactory2=startHibernate(accessType,getTestGridName(1));}  }
class C{  public FilterableTripleHandler(StringBuffer osw,List<String> negativeFilterNamespaces,List<String> positivFilterNamespaces){  this.writer=osw;  this.negativeFilterNamespaces=negativeFilterNamespaces;  this.positiveFilterNamespaces=positivFilterNamespaces;  for (  String ex : EXTRACTORS) {    triplesPerExtractor.put(ex,new Long(0));  }}  }
class C{  @SuppressWarnings("unchecked") <T>T parse(Class<T> clazz) throws JsonParserException {  advanceToken();  Object parsed=currentValue();  if (advanceToken() != Token.EOF)   throw createParseException(null,"Expected end of input, got " + token,true);  if (clazz != Object.class && (parsed == null || clazz != parsed.getClass()))   throw createParseException(null,"JSON did not contain the correct type, expected " + clazz.getName() + ".",true);  return (T)(parsed);}  }
class C{  private void saveNonVolatiles(Instruction inst){  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  int nNonvolatileGPRS=ir.compiledMethod.getNumberOfNonvolatileGPRs();  int n=nNonvolatileGPRS - 1;  for (Enumeration<Register> e=phys.enumerateNonvolatileGPRsBackwards(); e.hasMoreElements() && n >= 0; n--) {    Register nv=e.nextElement();    int offset=getNonvolatileGPROffset(n);    Operand M=new StackLocationOperand(true,-offset,WORDSIZE);    inst.insertBefore(MIR_Move.create(IA32_MOV,M,new RegisterOperand(nv,PRIMITIVE_TYPE_FOR_WORD)));  }}  }
class C{  @Override public void onVenueClicked(Venue venue){  if (!mVenuesAdapter.isProgressEnabled()) {    mCheckInPresenter.checkInAtVenue(venue);  }}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public static byte[] serialize(Object value) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  serialize(value,out);  return out.toByteArray();}  }
class C{  @Override public void update(VisualNode root){  try {    if (!updatesAreLocked) {      this.root=root;      this.vis.getNode(root);      this.vis.runLater(null);      this.vis.start();    }  } catch (  Exception ex) {    Logger.getLogger(getClass().getName()).log(Level.SEVERE,"Failed to update graph.",ex);  }}  }
class C{  public ProjectPCA(Projector projector){  super(projector);}  }
class C{  public static CryptoEngine secp256k1Engine(){  return SECP256K1_ENGINE;}  }
class C{  boolean attachWebView(WebView webView,boolean screenshotsEnabled,boolean pullToRefreshEnabled){  if (webView.getParent() == refreshLayout)   return false;  refreshLayout.setEnabled(pullToRefreshEnabled);  if (webView.getParent() instanceof TurbolinksSwipeRefreshLayout) {    TurbolinksSwipeRefreshLayout previousRefreshLayout=(TurbolinksSwipeRefreshLayout)webView.getParent();    TurbolinksView previousTurbolinksView=(TurbolinksView)previousRefreshLayout.getParent();    if (screenshotsEnabled)     previousTurbolinksView.screenshotView();    previousRefreshLayout.removeView(webView);  }  if (getBackground() instanceof ColorDrawable) {    webView.setBackgroundColor(((ColorDrawable)getBackground()).getColor());  }  refreshLayout.addView(webView);  return true;}  }
class C{  public Hyperlink(String text,boolean asHTML,String token){  super(text,asHTML,token);}  }
class C{  public static <T>Flux<T> reverse(Flux<T> flux){  return Flux.fromIterable(null);}  }
class C{  public XMLString toLowerCase(){  return new XString(str().toLowerCase());}  }
class C{  public static void main(String[] args){  Main rmic=new Main(System.err,"rmic");  System.exit(rmic.compile(args) ? 0 : 1);}  }
class C{  public String toString(){  if (unparsed != null) {    return unparsed;  }  StringBuilder builder=new StringBuilder();  int size=rdns.size();  if ((size - 1) >= 0) {    builder.append(rdns.get(size - 1));  }  for (int next=size - 2; next >= 0; next--) {    builder.append(',');    builder.append(rdns.get(next));  }  unparsed=builder.toString();  return unparsed;}  }
class C{  private void markSubroutineWalkDFS(final BitSet sub,int index,final BitSet anyvisited){  while (true) {    AbstractInsnNode node=instructions.get(index);    if (sub.get(index)) {      return;    }    sub.set(index);    if (anyvisited.get(index)) {      dualCitizens.set(index);      if (LOGGING) {        log("Instruction #" + index + " is dual citizen.");      }    }    anyvisited.set(index);    if (node.getType() == AbstractInsnNode.JUMP_INSN && node.getOpcode() != JSR) {      JumpInsnNode jnode=(JumpInsnNode)node;      int destidx=instructions.indexOf(jnode.label);      markSubroutineWalkDFS(sub,destidx,anyvisited);    }    if (node.getType() == AbstractInsnNode.TABLESWITCH_INSN) {      TableSwitchInsnNode tsnode=(TableSwitchInsnNode)node;      int destidx=instructions.indexOf(tsnode.dflt);      markSubroutineWalkDFS(sub,destidx,anyvisited);      for (int i=tsnode.labels.size() - 1; i >= 0; --i) {        LabelNode l=tsnode.labels.get(i);        destidx=instructions.indexOf(l);        markSubroutineWalkDFS(sub,destidx,anyvisited);      }    }    if (node.getType() == AbstractInsnNode.LOOKUPSWITCH_INSN) {      LookupSwitchInsnNode lsnode=(LookupSwitchInsnNode)node;      int destidx=instructions.indexOf(lsnode.dflt);      markSubroutineWalkDFS(sub,destidx,anyvisited);      for (int i=lsnode.labels.size() - 1; i >= 0; --i) {        LabelNode l=lsnode.labels.get(i);        destidx=instructions.indexOf(l);        markSubroutineWalkDFS(sub,destidx,anyvisited);      }    }switch (instructions.get(index).getOpcode()) {case GOTO:case RET:case TABLESWITCH:case LOOKUPSWITCH:case IRETURN:case LRETURN:case FRETURN:case DRETURN:case ARETURN:case RETURN:case ATHROW:      return;  }  index++;  if (index >= instructions.size()) {    return;  }}}  }
class C{  @Override public void apply() throws ConfigurationException {  try {    new CloudSdk.Builder().sdkPath(Paths.get(cloudSdkPanel.getCloudSdkDirectory())).build().validateCloudSdk();    CloudSdkService.getInstance().setSdkHomePath(cloudSdkPanel.getCloudSdkDirectory());  } catch (  AppEngineException aee) {    throw new RuntimeConfigurationError(GctBundle.message("appengine.cloudsdk.location.invalid.message"));  }}  }
class C{  public Element export(Document doc,tla2sany.xml.SymbolContext context){  try {    Element e=getSemanticElement(doc,context);    try {      Element loc=getLocationElement(doc);      e.insertBefore(loc,e.getFirstChild());    } catch (    UnsupportedOperationException uoe) {      uoe.printStackTrace();      throw uoe;    }catch (    RuntimeException ee) {    }    return e;  } catch (  RuntimeException ee) {    System.err.println("failed for node.toString(): " + toString() + "\n with error ");    ee.printStackTrace();    throw ee;  }}  }
class C{  public static void write(final CharSequence data,final Writer output) throws IOException {  if (data != null) {    IOUtils.write(data.toString(),output);  }}  }
class C{  public static boolean isGroupChatInvitation(SipRequest request){  ContactHeader contactHeader=(ContactHeader)request.getHeader(ContactHeader.NAME);  String param=contactHeader.getParameter("isfocus");  return param != null;}  }
class C{  public static boolean checkMirrorConsistencyGroup(List<URI> mirrors,DbClient dbClient,TaskCompleter completer){  BlockConsistencyGroup group=ConsistencyGroupUtils.getMirrorsConsistencyGroup(mirrors,dbClient);  if (group != null) {    if (completer != null) {      completer.addConsistencyGroupId(group.getId());    }    return true;  }  return false;}  }
class C{  public void testSetDateAndTimeLjava_util_Date(){  X509CRLSelector selector=new X509CRLSelector();  TestCRL crl=new TestCRL(new Date(200),new Date(300));  selector.setDateAndTime(null);  assertTrue("Any CRL should match in the case of null dateAndTime.",selector.match(crl));  selector.setDateAndTime(new Date(200));  assertTrue("The CRL should match the selection criteria.",selector.match(crl));  selector.setDateAndTime(new Date(250));  assertTrue("The CRL should match the selection criteria.",selector.match(crl));  selector.setDateAndTime(new Date(300));  assertTrue("The CRL should match the selection criteria.",selector.match(crl));  selector.setDateAndTime(new Date(150));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl));  selector.setDateAndTime(new Date(350));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl));}  }
class C{  public Frequency(long windowSize,long windowThreshold){  this.windowSize=windowSize;  this.windowThreshold=windowThreshold;}  }
class C{  private void paintHover(Graphics2D g,JComponent c,int width,int height){  paintMenu(g,c,width,height,hover);}  }
class C{  public RecyclingBitmapDrawable put(final Resources res,final String key,Bitmap bmp,final boolean asPNG){  RecyclingBitmapDrawable rcb=new RecyclingBitmapDrawable(res,bmp);  put(res,key,rcb,asPNG);  return rcb;}  }
class C{  public Sampletable1Example(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static void main(String[] args){  if (!(args.length == 1 && !args[0].startsWith("-") || args.length == 2 && (args[0].equals("-q") || args[0].equals("--quiet")) && !args[1].startsWith("-"))) {    System.err.println("usage: java edu.illinois.cs.cogcomp.lbj.pos.POSTag [-q] <testing set>\n" + "       If -q is specified, the only output is timing and accuracy\n" + "       information.  Otherwise, the testing set is output with\n"+ "       extra tags indicating whether each prediction was correct.");    System.exit(1);  }  boolean quiet=args.length == 2;  testingFile=args[args.length - 1];  POSTagger tagger=new POSTagger();  BufferedReader in=open();  int correct=0, incorrect=0;  for (String line=readLine(in); line != null; line=readLine(in)) {    LinkedVector sentence=POSBracketToVector.parsePOSBracketForm(line);    for (Word word=(Word)sentence.get(0); word != null; word=(Word)word.next) {      String label=word.partOfSpeech;      word.partOfSpeech=null;      String prediction=tagger.discreteValue(word);      if (prediction.equals(label)) {        ++correct;        if (!quiet)         System.out.print("+");      } else {        ++incorrect;        if (!quiet)         System.out.print("-[" + label + "]");      }      if (!quiet)       System.out.print(word + " ");    }    if (!quiet)     System.out.println();  }  System.out.println("Accuracy: " + (100 * correct / (double)(correct + incorrect)) + "%");}  }
class C{  public File file(){  return file;}  }
class C{  public SchedulingThread(String name,LockType lockType){  super(name);  this.lockType=lockType;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:27.893 -0500",hash_original_method="1E47DBAC30060B20437BE89450E78A73",hash_generated_method="6A957EBFBE1B410FA9909AE20F97CB3F") public void start() throws IOException {  Thread thread=new Thread(this);  thread.setName("TCPMessageProcessorThread");  thread.setPriority(Thread.MAX_PRIORITY);  thread.setDaemon(true);  this.sock=sipStack.getNetworkLayer().createServerSocket(getPort(),0,getIpAddress());  if (getIpAddress().getHostAddress().equals(IN_ADDR_ANY) || getIpAddress().getHostAddress().equals(IN6_ADDR_ANY)) {    super.setIpAddress(sock.getInetAddress());  }  this.isRunning=true;  thread.start();}  }
class C{  public RatNum mul(RatNum arg){  checkRep();  return new RatNum(this.numer * arg.numer,this.denom * arg.denom);}  }
class C{  protected Vec4 intersectPolygonAltitudeAt(Line ray){  double elevation=0.0;  if (this.controlPoints.size() > 0) {    elevation=this.controlPoints.get(0).getCenterPosition().getElevation();  }  return AirspaceEditorUtil.intersectGlobeAt(this.wwd,elevation,ray);}  }
class C{  private LosEffects.AttackInfo buildAttackInfo(Coords c1,Coords c2,int h1,int h2){  LosEffects.AttackInfo ai=new LosEffects.AttackInfo();  ai.attackPos=c1;  ai.targetPos=c2;  ai.attackHeight=h1;  ai.targetHeight=h2;  ai.attackAbsHeight=server.getGame().getBoard().getHex(c1).floor() + h1;  ai.targetAbsHeight=server.getGame().getBoard().getHex(c2).floor() + h2;  return ai;}  }
class C{  @Entrypoint public static void yieldpointFromNativePrologue(){}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + toString());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:19.334 -0500",hash_original_method="C774B2E8DA9F32069C4712123B43B6CD",hash_generated_method="D3AE039B798452ECC87270B249B0B99C") public void run(){  sync.innerRun();}  }
class C{  public List<NamedRelatedResourceRep> listMatchingStoragePools(FileVirtualPoolParam input){  StoragePoolList response=client.post(StoragePoolList.class,input,baseUrl + "/matching-pools");  return defaultList(response.getPools());}  }
class C{  public RestoreSnapshotRequestBuilder(ElasticsearchClient client,RestoreSnapshotAction action,String repository,String name){  super(client,action,new RestoreSnapshotRequest(repository,name));}  }
class C{  public void addFiles(Collection<String> files){  checkFileNames(files);  for (  String f : files) {    setFiles.add(namedForThisSegment(f));  }}  }
class C{  public ListIterator listIterator(int index){  return new ListItr(index);}  }
class C{  public static double[] means(double[][] input){  double[] theMeans=sums(input);  for (int i=0; i < theMeans.length; i++) {    theMeans[i]=theMeans[i] / input.length;  }  return theMeans;}  }
class C{  protected void noRecordSelected(){  m_C_Invoice_ID=0;  p_centerLayout.getSouth().setOpen(false);  return;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.133 -0500",hash_original_method="5096545BB8D7E235F81B2D74AA90BB35",hash_generated_method="F16077268B84C9A843A28E77999DA1F2") @DSVerified @DSSafe(DSCat.SAFE_LIST) @Override public boolean containsKey(Object key){  return super.containsKey(key);}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  public void write(Object source,File out) throws Exception {  OutputStream file=new FileOutputStream(out);  try {    write(source,file);  }  finally {    file.close();  }}  }
class C{  public static boolean isDynamicDocument(BridgeContext ctx,Document doc){  Element elt=doc.getDocumentElement();  if ((elt != null) && SVGConstants.SVG_NAMESPACE_URI.equals(elt.getNamespaceURI())) {    if (elt.getAttributeNS(null,SVGConstants.SVG_ONABORT_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONERROR_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONRESIZE_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONUNLOAD_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONSCROLL_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONZOOM_ATTRIBUTE).length() > 0) {      return true;    }    return isDynamicElement(ctx,doc.getDocumentElement());  }  return false;}  }
class C{  protected void informResourceLoaderAwareObjectsForFieldType(FieldType fieldType){  if (!fieldType.supportsAnalyzers())   return;  Analyzer indexAnalyzer=fieldType.getIndexAnalyzer();  if (indexAnalyzer != null && indexAnalyzer instanceof TokenizerChain)   informResourceLoaderAwareObjectsInChain((TokenizerChain)indexAnalyzer);  Analyzer queryAnalyzer=fieldType.getQueryAnalyzer();  if (queryAnalyzer != null && queryAnalyzer != indexAnalyzer && queryAnalyzer instanceof TokenizerChain)   informResourceLoaderAwareObjectsInChain((TokenizerChain)queryAnalyzer);  if (fieldType instanceof TextField) {    TextField textFieldType=(TextField)fieldType;    Analyzer multiTermAnalyzer=textFieldType.getMultiTermAnalyzer();    if (multiTermAnalyzer != null && multiTermAnalyzer != indexAnalyzer && multiTermAnalyzer != queryAnalyzer && multiTermAnalyzer instanceof TokenizerChain)     informResourceLoaderAwareObjectsInChain((TokenizerChain)multiTermAnalyzer);  }}  }
class C{  public void store(char value,Offset offset){}  }
class C{  public void testUnsizedIntsCountSeq(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.ints().limit(size).forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  public static void initFromStream(final InputStream settingsStream) throws SettingsError {  props=new Properties();  try {    props.load(settingsStream);  } catch (  IOException e) {    throw new SettingsError(e);  }  String outFile=props.getProperty(SETTING_OUTPUT_S);  if (outFile != null) {    if (outFile.trim().length() == 0) {      out=System.out;    } else {      try {        out=new PrintStream(new File(outFile));      } catch (      FileNotFoundException e) {        throw new SettingsError("Can't open Settings output file:" + e);      }    }  }}  }
class C{  public SignatureVisitor visitInterfaceBound(){  return this;}  }
class C{  public static void customizeCache(Context context,int memoryCacheSizeInKB,int defaultDiskCacheSizeInKB){  customizeCache(context,memoryCacheSizeInKB,defaultDiskCacheSizeInKB,0);}  }
class C{  public static <T>T withDataOutputStream(File file,@ClosureParams(value=SimpleType.class,options="java.io.DataOutputStream") Closure<T> closure) throws IOException {  return IOGroovyMethods.withStream(newDataOutputStream(file),closure);}  }
class C{  public GeoRssPoint(Point copyFrom){  super(Namespaces.GEO_RSS_NAMESPACE,NAME,copyFrom);}  }
class C{  public static double stirlingCorrection(int k){  final double C1=8.33333333333333333e-02;  final double C3=-2.77777777777777778e-03;  final double C5=7.93650793650793651e-04;  final double C7=-5.95238095238095238e-04;  double r, rr;  if (k > 30) {    r=1.0 / (double)k;    rr=r * r;    return r * (C1 + rr * (C3 + rr * (C5 + rr * C7)));  } else   return stirlingCorrection[k];}  }
class C{  public XNumber(double d){  super();  m_val=d;}  }
class C{  public static String prtIndent(int indent,String str){  return (spaces.substring(0,Math.min(indent * 2,spaces.length())) + str);}  }
class C{  public static NokiaItemType valueOf(byte typeId){switch (typeId) {case 0x00:    return TEXT_ISO_8859_1;case 0x01:  return TEXT_UNICODE;case 0x02:return OTA_BITMAP;case 0x03:return RINGTONE;case 0x04:return PROFILE_NAME;case 0x05:return SCREEN_SAVER;default :return new NokiaItemType(typeId,String.valueOf(typeId));}}  }
class C{  public static void loadLibraryFromJar(String path) throws IOException {  if (!path.startsWith("/")) {    throw new IllegalArgumentException("The path has to be absolute (start with '/').");  }  String[] parts=path.split("/");  String filename=(parts.length > 1) ? parts[parts.length - 1] : null;  String prefix="";  String suffix=null;  if (filename != null) {    parts=filename.split("\\.",2);    prefix=parts[0];    suffix=(parts.length > 1) ? "." + parts[parts.length - 1] : null;  }  if (filename == null || prefix.length() < 3) {    throw new IllegalArgumentException("The filename has to be at least 3 characters long.");  }  File temp=File.createTempFile(prefix,suffix);  temp.deleteOnExit();  if (!temp.exists()) {    throw new FileNotFoundException("File " + temp.getAbsolutePath() + " does not exist.");  }  byte[] buffer=new byte[1024];  int readBytes;  InputStream is=NativeUtils.class.getResourceAsStream(path);  if (is == null) {    throw new FileNotFoundException("File " + path + " was not found inside JAR.");  }  OutputStream os=new FileOutputStream(temp);  try {    while ((readBytes=is.read(buffer)) != -1) {      os.write(buffer,0,readBytes);    }  }  finally {    os.close();    is.close();  }  System.load(temp.getAbsolutePath());}  }
class C{  private void seeDetails(){  stopPreview(false);  mContainerActivity.showDetails(getFile());}  }
class C{  @Deprecated public List<?> range(Value begin,Value end,String filterModule,String filterName,Value... filterArgs) throws AerospikeException {  throw new NotImplementedException();}  }
class C{  protected String colorToRGB(final Color color){  return String.format("#%02x%02x%02x",color.getRed(),color.getGreen(),color.getBlue());}  }
class C{  public boolean isSetError(){  return this.error != null;}  }
class C{  public LookupListTable lookupList(){  if (lookupListTable.get() == null) {    lookupListTable.compareAndSet(null,gsub.createLookupList());  }  return lookupListTable.get();}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x9988172D,version=150) public int sceHttpSetSendTimeOut(int templateId,int timeout){  return 0;}  }
class C{  protected void waitDeployableMonitor(boolean starting){  if (getConfiguration() != null && getConfiguration().getDeployables() != null) {    for (    DeployableElement deployableElement : getConfiguration().getDeployables()) {      DeployableMonitor deployableMonitor=deployableElement.createDeployableMonitor();      if (deployableMonitor != null) {        DeployerWatchdog watchdog=new DeployerWatchdog(deployableMonitor);        watchdog.setLogger(container.getLogger());        deployableMonitor.setLogger(container.getLogger());        watchdog.watch(starting);      }    }  }}  }
class C{  private boolean shouldSearchGroupInLDAP(){  boolean continueToGroupSearch=false;  if (!CollectionUtils.isEmpty(this._groupObjectClasses) && !CollectionUtils.isEmpty(this._groupMemberAttributes)) {    continueToGroupSearch=true;  }  return continueToGroupSearch;}  }
class C{  public void loadFile(String filename,AbstractFileLoader... loaders){  DataPanel panel;  AbstractFileLoader loader;  panel=new DataPanel(filename,loaders);  panel.addChangeListener(this);  m_TabbedPane.addTab(panel.getTitle(),panel);  m_TabbedPane.setSelectedIndex(m_TabbedPane.getTabCount() - 1);  if (loaders == null)   loader=ConverterUtils.getLoaderForFile(filename); else   loader=loaders[0];  m_RecentFilesHandler.addRecentItem(new RecentFilesHandlerWithCommandline.Setup(new File(filename),loader));}  }
class C{  public byte[] poll() throws KeeperException, InterruptedException {  TimerContext time=stats.time(dir + "_poll");  try {    return removeFirst();  }  finally {    time.stop();  }}  }
class C{  private void clearSearchHistory(){  SearchRecentSuggestions suggestions=new SearchRecentSuggestions(this,SearchSuggestionSampleProvider.AUTHORITY,SearchSuggestionSampleProvider.MODE);  suggestions.clearHistory();}  }
class C{  public LayoutAnimationController(Context context,AttributeSet attrs){  TypedArray a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.LayoutAnimation);  Animation.Description d=Animation.Description.parseValue(a.peekValue(com.android.internal.R.styleable.LayoutAnimation_delay));  mDelay=d.value;  mOrder=a.getInt(com.android.internal.R.styleable.LayoutAnimation_animationOrder,ORDER_NORMAL);  int resource=a.getResourceId(com.android.internal.R.styleable.LayoutAnimation_animation,0);  if (resource > 0) {    setAnimation(context,resource);  }  resource=a.getResourceId(com.android.internal.R.styleable.LayoutAnimation_interpolator,0);  if (resource > 0) {    setInterpolator(context,resource);  }  a.recycle();}  }
class C{  public int compareTo(HighWaterResource o){  if (!this.isInitialized() && !o.isInitialized())   return 0;  if (!this.isInitialized())   return -1;  if (!o.isInitialized())   return 1;  if (this.highWaterEpoch > o.getHighWaterEpoch())   return 1; else   if (this.highWaterEpoch < o.getHighWaterEpoch())   return -1; else {    String oToCompare=o.getHighWaterEventId();    String thisToCompare=this.highWaterEventId;    int sessionDelimiter;    if ((sessionDelimiter=o.highWaterEventId.indexOf(SESSION_DELIMITER)) != -1) {      oToCompare=o.getHighWaterEventId().substring(0,sessionDelimiter);    } else {      oToCompare=o.getHighWaterEventId();    }    if ((sessionDelimiter=this.highWaterEventId.indexOf(SESSION_DELIMITER)) != -1) {      thisToCompare=this.highWaterEventId.substring(0,sessionDelimiter);    } else {      thisToCompare=this.highWaterEventId;    }    if (oToCompare.length() == 0 && thisToCompare.length() > 0) {      return 1;    } else     if (thisToCompare.length() == 0 && oToCompare.length() > 0) {      return -1;    }    return (thisToCompare.compareTo(oToCompare));  }}  }
class C{  public Matrix3f rotateXYZ(float angleX,float angleY,float angleZ){  return rotateXYZ(angleX,angleY,angleZ,this);}  }
class C{  public void run(String username,String password) throws AuthenticationException {  for (  String s : WELCOME_MESSAGE) {    out.println(s);  }  BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));  login(username,password);  try {    loadSheet(reader);  } catch (  ServiceException se) {    se.printStackTrace();  }catch (  IOException ioe) {    ioe.printStackTrace();  }  while (executeCommand(reader)) {  }}  }
class C{  @Override public void executeScript(List<ScriptCommand> configurationScript){  String newLine=System.getProperty("line.separator");  StringBuffer buffer=new StringBuffer();  for (  ScriptCommand configuration : configurationScript) {    buffer.append(configuration.readScript());    buffer.append(newLine);  }  buffer.append("dumpStack()");  getLogger().debug("Sending WLST script: " + newLine + buffer.toString(),this.getClass().getName());  try {    File tempFile=File.createTempFile("wlst",".py");    tempFile.deleteOnExit();    getFileHandler().writeTextFile(tempFile.getAbsolutePath(),buffer.toString(),null);    executeScriptFiles(Arrays.asList(tempFile.getAbsolutePath()));  } catch (  Exception e) {    throw new CargoException("Cannot execute WLST script.",e);  }}  }
class C{  @HLEFunction(nid=0x383F7BCC,version=150,checkInsideInterrupt=true) public int sceKernelTerminateDeleteThread(@CheckArgument("checkThreadID") int uid){  if (!isDispatchThreadEnabled() && Modules.SysMemUserForUserModule.hleKernelGetCompiledSdkVersion() > 0x0307FFFF) {    return SceKernelErrors.ERROR_KERNEL_WAIT_CAN_NOT_WAIT;  }  SceKernelThreadInfo thread=getThreadCurrentIsInvalid(uid);  triggerThreadEvent(thread,currentThread,THREAD_EVENT_EXIT);  triggerThreadEvent(thread,currentThread,THREAD_EVENT_DELETE);  terminateThread(thread);  setToBeDeletedThread(thread);  return 0;}  }
class C{  public void addToAggregate(int row,VisualItem member){  validRowCheck(row,true);  if (!aggregateContains(row,member)) {    int ar=m_aggregated.addRow();    m_aggregated.setInt(ar,AGGREGATE,row);    m_aggregated.setInt(ar,MEMBER_HASH,getHashCode(member));    m_aggregated.set(ar,MEMBER,member);    fireTableEvent(row,row,EventConstants.ALL_COLUMNS,EventConstants.UPDATE);  }}  }
class C{  static void putLongReverse(long ptr,Vector arr){  for (int i=arr.size() - 1; i >= 0; i--, ptr+=getLongSize()) {    putLong(ptr,((Long)arr.elementAt(i)).longValue());  }}  }
class C{  void shiftPc(int where,int gapLength,boolean exclusive){  int n=tableLength();  for (int i=0; i < n; ++i) {    int pos=i * 10 + 2;    int pc=ByteArray.readU16bit(info,pos);    int len=ByteArray.readU16bit(info,pos + 2);    if (pc > where || (exclusive && pc == where && pc != 0))     ByteArray.write16bit(pc + gapLength,info,pos); else     if (pc + len > where || (exclusive && pc + len == where))     ByteArray.write16bit(len + gapLength,info,pos + 2);  }}  }
class C{  public T caseVarFakeDefinition(VarFakeDefinition object){  return null;}  }
class C{  static void checkMethodDesc(final String desc){  if (desc == null || desc.length() == 0) {    throw new IllegalArgumentException("Invalid method descriptor (must not be null or empty)");  }  if (desc.charAt(0) != '(' || desc.length() < 3) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }  int start=1;  if (desc.charAt(start) != ')') {    do {      if (desc.charAt(start) == 'V') {        throw new IllegalArgumentException("Invalid descriptor: " + desc);      }      start=checkDesc(desc,start,false);    } while (start < desc.length() && desc.charAt(start) != ')');  }  start=checkDesc(desc,start + 1,true);  if (start != desc.length()) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }}  }
class C{  static void verifyNoChild(final String name,final Optional<Aggregation> aggregation){  aggregation.ifPresent(null);}  }
class C{  public static <T>List<T> shiftElementsToEnd(final List<T> source,final int count){  final ArrayList<T> rVal=new ArrayList<>(source.size());  for (int i=count; i < source.size(); i++) {    rVal.add(source.get(i));  }  for (int i=0; i < count; i++) {    rVal.add(source.get(i));  }  if (source.size() != rVal.size()) {    throw new IllegalStateException("Didnt work for: " + count + " "+ source+ " : "+ rVal);  }  return rVal;}  }
class C{  public void open(){  int retVal;  retVal=m_FileChooser.showOpenDialog(this);  if (retVal != MekaFileChooser.APPROVE_OPTION)   return;  open(m_FileChooser.getSelectedFile());}  }
class C{  public void closed(int tenant,long time_nanos){  finished(Operation.CLOSE,tenant,0,time_nanos);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.480 -0500",hash_original_method="029A9450FF46747D2F1AB4761630FBFA",hash_generated_method="1EAFA6B363821B49200357A12D6C9ECB") public boolean isEmpty(){  return head == tail;}  }
class C{  private boolean isDecTblMultCreated(){  boolean isMDec=false;  if (_flds.getMultFldsCount() > 0) {    for (int i=0; i < _flds.count(); i++) {      ArchiveFldImpl fld=(ArchiveFldImpl)_flds.get(i);      if (fld.isMult()) {        int type=fld.getType();        if (type == ArchiveFldType.SHORT_DECIMAL || type == ArchiveFldType.LONG_DECIMAL)         isMDec=true;      }    }  }  return isMDec;}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public double[] readAllDoubles(){  String[] fields=readAllStrings();  double[] vals=new double[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Double.parseDouble(fields[i]);  return vals;}  }
class C{  private void removeFromMemCacheLocked(String packageName,UserHandleCompat user){  HashSet<ComponentKey> forDeletion=new HashSet<ComponentKey>();  for (  ComponentKey key : mCache.keySet()) {    if (key.componentName.getPackageName().equals(packageName) && key.user.equals(user)) {      forDeletion.add(key);    }  }  for (  ComponentKey condemned : forDeletion) {    mCache.remove(condemned);  }}  }
class C{  public static int minIndex(double[] doubles){  double minimum=0;  int minIndex=0;  for (int i=0; i < doubles.length; i++) {    if ((i == 0) || (doubles[i] < minimum)) {      minIndex=i;      minimum=doubles[i];    }  }  return minIndex;}  }
class C{  protected double computeDensity(DoubleDBIDList referenceDists,DoubleDBIDListIter iter,int index){  final int size=referenceDists.size();  final double xDist=iter.seek(index).doubleValue();  int lef=index, rig=index;  double sum=0.;  double lef_d=(--lef >= 0) ? xDist - iter.seek(lef).doubleValue() : Double.POSITIVE_INFINITY;  double rig_d=(++rig < size) ? iter.seek(rig).doubleValue() - xDist : Double.POSITIVE_INFINITY;  for (int i=0; i < k; ++i) {    if (lef >= 0 && rig < size) {      if (lef_d < rig_d) {        sum+=lef_d;        lef_d=(--lef >= 0) ? xDist - iter.seek(lef).doubleValue() : Double.POSITIVE_INFINITY;      } else {        sum+=rig_d;        rig_d=(++rig < size) ? iter.seek(rig).doubleValue() - xDist : Double.POSITIVE_INFINITY;      }    } else     if (lef >= 0) {      sum+=lef_d;      lef_d=(--lef >= 0) ? xDist - iter.seek(lef).doubleValue() : Double.POSITIVE_INFINITY;    } else     if (rig < size) {      sum+=rig_d;      rig_d=(++rig < size) ? iter.seek(rig).doubleValue() - xDist : Double.POSITIVE_INFINITY;    } else {      throw new IndexOutOfBoundsException("Less than k objects?");    }  }  return k / sum;}  }
class C{  public CacheJndiTmFactory(){}  }
class C{  @Override public boolean isSearchable(int column) throws SQLException {  try {    debugCodeCall("isSearchable",column);    checkColumnIndex(column);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  LeastFrequentKeyValueMap<String,Integer> oper=new LeastFrequentKeyValueMap<String,Integer>();  CollectorTestSink matchSink=new CollectorTestSink();  oper.least.setSink(matchSink);  oper.beginWindow(0);  HashMap<String,Integer> amap=new HashMap<String,Integer>(1);  HashMap<String,Integer> bmap=new HashMap<String,Integer>(1);  HashMap<String,Integer> cmap=new HashMap<String,Integer>(1);  int atot1=5;  int btot1=3;  int ctot1=6;  amap.put("a",1);  bmap.put("b",2);  cmap.put("c",4);  for (int i=0; i < atot1; i++) {    oper.data.process(amap);  }  for (int i=0; i < btot1; i++) {    oper.data.process(bmap);  }  for (int i=0; i < ctot1; i++) {    oper.data.process(cmap);  }  atot1=4;  btot1=3;  ctot1=10;  amap.put("a",5);  bmap.put("b",4);  cmap.put("c",3);  for (int i=0; i < atot1; i++) {    oper.data.process(amap);  }  for (int i=0; i < btot1; i++) {    oper.data.process(bmap);  }  for (int i=0; i < ctot1; i++) {    oper.data.process(cmap);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",3,matchSink.collectedTuples.size());  int vcount;  for (  Object o : matchSink.collectedTuples) {    HashMap<String,HashMap<Integer,Integer>> omap=(HashMap<String,HashMap<Integer,Integer>>)o;    for (    Map.Entry<String,HashMap<Integer,Integer>> e : omap.entrySet()) {      String key=e.getKey();      if (key.equals("a")) {        vcount=e.getValue().get(5);        Assert.assertEquals("Key \"a\" has value ",4,vcount);      } else       if (key.equals("b")) {        vcount=e.getValue().get(2);        Assert.assertEquals("Key \"a\" has value ",3,vcount);        vcount=e.getValue().get(4);        Assert.assertEquals("Key \"a\" has value ",3,vcount);      } else       if (key.equals("c")) {        vcount=e.getValue().get(4);        Assert.assertEquals("Key \"a\" has value ",6,vcount);      }    }  }}  }
class C{  public DrawerBuilder withActionBarDrawerToggle(boolean actionBarDrawerToggleEnabled){  this.mActionBarDrawerToggleEnabled=actionBarDrawerToggleEnabled;  return this;}  }
class C{  public void recordControllerEstimateCostDoNothing(RVMMethod method,int optLevel,double cost){  if (Controller.options.LOGGING_LEVEL >= 3) {synchronized (log) {      log.print(getTime() + "  Estimated cost of doing nothing (leaving at ");      if (optLevel == -1) {        log.print("baseline");      } else {        log.print("O" + optLevel);      }      log.println(") to " + method + " is "+ cost);    }  }}  }
class C{  public static void checkNotEmpty(String string){  if (string.isEmpty()) {    throw new NullPointerException();  }}  }
class C{  public IntervalXYToolTipGenerator(){  this(DEFAULT_TOOL_TIP_FORMAT,NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());}  }
class C{  public static boolean isWhitespaceTextNode(Node node){  if (node == null)   return false;  if (node.getNodeType() == Node.TEXT_NODE)   return StringUtil.isWhitespaceStr(node.getNodeValue());  return false;}  }
class C{  public void clear(){  textArea.setText("");}  }
class C{  public static void writeStringToFile(File file,String data,String encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  public String toString(){  return m_obj.toString();}  }
class C{  public GuacamoleSecurityException(Throwable cause){  super(cause);}  }
class C{  protected void tearDown(){}  }
class C{  private void onOpenEditor(String path,EditorPartPresenter editor){  final List<Breakpoint> fileBreakpoints=breakpoints.get(path);  if (fileBreakpoints != null) {    final BreakpointRenderer breakpointRenderer=getBreakpointRendererForEditor(editor);    if (breakpointRenderer != null) {      for (      final Breakpoint breakpoint : fileBreakpoints) {        reAddBreakpointMark(breakpointRenderer,breakpoint);      }    }  }  if (currentBreakpoint != null && path.equals(currentBreakpoint.getPath())) {    BreakpointRenderer breakpointRenderer=getBreakpointRendererForFile(path);    if (breakpointRenderer != null) {      breakpointRenderer.setLineActive(currentBreakpoint.getLineNumber(),true);    }  }}  }
class C{  public SmsUdhElement(SmsUdhIei udhIei,byte[] udhIeiData){  udhIei_=udhIei;  udhIeiData_=udhIeiData;}  }
class C{  public final double doOperation(){  double logHastingRatio=0;  curNode=-1;  operatorSelect=MathUtils.randomChoicePDF(operatorWeight);  logHastingRatio=performProposal();  Tree_Clustering_Shared_Routines.updateUndriftedVirusLocations(numNodes,numdata,treeModel,virusLocationsTreeNode,indicators,mu,virusLocations,correspondingTreeIndexForVirus);  CompositeSetClusterLabelsTreeNodesAndVirusesUsingIndicators();  moveCounter++;  return (logHastingRatio);}  }
class C{  public MetalinkFilePiecesBuilder addHash(String hash){  if (hash.isEmpty())   throw new IllegalArgumentException("Empty hash not allowed");  this.hash.add(hash);  return this;}  }
class C{  public void resolve(final Class<?> remoteType){  if (m_methodName != null) {    return;  }  final Tuple<String,Class<?>[]> values=RemoteInterfaceHelper.getMethodInfo(m_methodNumber,remoteType);  m_methodName=values.getFirst();  m_argTypes=classesToString(values.getSecond(),m_args);  if (s_logger.isLoggable(Level.FINE)) {    s_logger.fine("Remote Method for class:" + remoteType.getSimpleName() + " Resolved To:"+ debugMethodText());  }}  }
class C{  public void createAsteroids(){  level++;  for (int x=0; x < numAsteroids; x++) {    double angle=random.nextDouble() * Math.PI * 2;    Double2D loc=null;    for (int i=0; i < 1000; i++) {      if (random.nextBoolean())       loc=new Double2D(0,random.nextDouble() * height); else       loc=new Double2D(random.nextDouble() * width,0);      boolean bad=false;      for (int j=0; j < numShips; j++)       if (ships[j] != null && field.getObjectLocation(ships[j]).distance(loc) < SAFE_DISTANCE) {        bad=true;        break;      }      if (!bad)       break;    }    new Asteroid(this,Asteroid.MAXIMUM_SIZE,new MutableDouble2D(Asteroid.INITIAL_VELOCITY * Math.cos(angle),Asteroid.INITIAL_VELOCITY * Math.sin(angle)),loc);  }}  }
class C{  private void zApplyAllowKeyboardEditing(){  parent.getComponentTimeTextField().setEditable(allowKeyboardEditing);  Color textFieldBorderColor=(allowKeyboardEditing) ? InternalConstants.colorEditableTextFieldBorder : InternalConstants.colorNotEditableTextFieldBorder;  parent.getComponentTimeTextField().setBorder(new CompoundBorder(new MatteBorder(1,1,1,1,textFieldBorderColor),new EmptyBorder(1,3,2,2)));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.196 -0500",hash_original_method="72B50A956CBF7B7731470BDB2A5220D2",hash_generated_method="4F97F0FA0FA474D4CCAFFDEF31355305") @SuppressWarnings({"UnusedDeclaration"}) public void computeBounds(RectF bounds,boolean exact){  bounds.addTaint(exact);  bounds.addTaint(getTaint());}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public Action(int kind){  if (kind != FORWARD_ACTION && kind != BACKWARD_ACTION)   throw new GeneratorException();  this.content="";  this.priority=Integer.MAX_VALUE;  this.kind=kind;}  }
class C{  private void expandFromVM(){  if (type != null) {    return;  }  if (!isResolved()) {    return;  }  MethodHandleNatives.expand(this);}  }
class C{  public void postDeregister(){  try {    if (logStream != null) {synchronized (this) {        logStream.flush();        logStream.close();        logFile=null;        logStream=null;      }    }  } catch (  Exception x) {    LOG.finest("Failed to close log properly: " + x);  }}  }
class C{  private MAccount createAccount(MAcctSchema targetAS,MAccount sourceAcct){  int AD_Client_ID=targetAS.getAD_Client_ID();  int C_AcctSchema_ID=targetAS.getC_AcctSchema_ID();  int AD_Org_ID=0;  int Account_ID=0;  int C_SubAcct_ID=0;  int M_Product_ID=0;  int C_BPartner_ID=0;  int AD_OrgTrx_ID=0;  int C_LocFrom_ID=0;  int C_LocTo_ID=0;  int C_SalesRegion_ID=0;  int C_Project_ID=0;  int C_Campaign_ID=0;  int C_Activity_ID=0;  int User1_ID=0;  int User2_ID=0;  int UserElement1_ID=0;  int UserElement2_ID=0;  MAcctSchemaElement[] elements=targetAS.getAcctSchemaElements();  for (int i=0; i < elements.length; i++) {    MAcctSchemaElement ase=elements[i];    String elementType=ase.getElementType();    if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_Organization))     AD_Org_ID=sourceAcct.getAD_Org_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_Account))     Account_ID=sourceAcct.getAccount_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_SubAccount))     C_SubAcct_ID=sourceAcct.getC_SubAcct_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_BPartner))     C_BPartner_ID=sourceAcct.getC_BPartner_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_Product))     M_Product_ID=sourceAcct.getM_Product_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_Activity))     C_Activity_ID=sourceAcct.getC_Activity_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_LocationFrom))     C_LocFrom_ID=sourceAcct.getC_LocFrom_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_LocationTo))     C_LocTo_ID=sourceAcct.getC_LocTo_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_Campaign))     C_Campaign_ID=sourceAcct.getC_Campaign_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_OrgTrx))     AD_OrgTrx_ID=sourceAcct.getAD_OrgTrx_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_Project))     C_Project_ID=sourceAcct.getC_Project_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_SalesRegion))     C_SalesRegion_ID=sourceAcct.getC_SalesRegion_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_UserList1))     User1_ID=sourceAcct.getUser1_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_UserList2))     User2_ID=sourceAcct.getUser2_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_UserElement1))     UserElement1_ID=sourceAcct.getUserElement1_ID(); else     if (elementType.equals(MAcctSchemaElement.ELEMENTTYPE_UserElement2))     UserElement2_ID=sourceAcct.getUserElement2_ID();  }  return MAccount.get(getCtx(),AD_Client_ID,AD_Org_ID,C_AcctSchema_ID,Account_ID,C_SubAcct_ID,M_Product_ID,C_BPartner_ID,AD_OrgTrx_ID,C_LocFrom_ID,C_LocTo_ID,C_SalesRegion_ID,C_Project_ID,C_Campaign_ID,C_Activity_ID,User1_ID,User2_ID,UserElement1_ID,UserElement2_ID,null);}  }
class C{  public Iterator<Vector<Object>> iterator(){  if (infoRecords != null) {    return infoRecords.iterator();  } else {    return new Vector<Vector<Object>>().iterator();  }}  }
class C{  public static void storeImage(Bitmap image,File pictureFile){  if (pictureFile == null) {    Log.d(TAG,"Error creating media file, check storage permissions: ");    return;  }  try {    FileOutputStream fos=new FileOutputStream(pictureFile);    image.compress(Bitmap.CompressFormat.PNG,90,fos);    fos.close();  } catch (  FileNotFoundException e) {    Log.d(TAG,"File not found: " + e.getMessage());  }catch (  IOException e) {    Log.d(TAG,"Error accessing file: " + e.getMessage());  }}  }
class C{  public void fireRequestCursor(java.awt.Cursor cursor){  for (  InfoDisplayListener listener : IDListeners) {    listener.requestCursor(cursor);  }}  }
class C{  private static List<String> generateGetMethodNames(final Field field){  final List<String> prefix=new LinkedList<String>();  prefix.add("get" + AttributeHelper.getAttributeName(field));  if (field.getType() == boolean.class || field.getType() == Boolean.class) {    prefix.add("is" + AttributeHelper.getAttributeName(field));    String fieldName=field.getName();    if (fieldName.length() > 2 && fieldName.startsWith("is") && Character.isUpperCase(fieldName.charAt(2)))     prefix.add(fieldName);  }  return prefix;}  }
class C{  public Object visit(ASTIfStatement node,Object data){  return showNode(node,data);}  }
class C{  public static boolean validateExportMaskMatchesComputeResourceInitiators(DbClient dbClient,ExportGroup exportGroup,StringSet computeInitiators,UnManagedExportMask unManagedExportMask,List<String> errorMessages){  if (computeInitiators == null) {    String errorMessage=String.format("ExportGroup %s has no initiators and therefore unmanaged export mask %s can't be ingested with it.",exportGroup.getLabel(),unManagedExportMask.getMaskName());    errorMessages.add(errorMessage.toString());    _logger.warn(errorMessage);    return false;  }  if (unManagedExportMask.getKnownInitiatorUris() == null) {    String errorMessage=String.format("Unmanaged export mask %s has no initiators and therefore it can't be ingested.  (ExportGroup: %s)",unManagedExportMask.getMaskName(),exportGroup.getLabel());    errorMessages.add(errorMessage.toString());    _logger.warn(errorMessage);    return false;  }  if (StringSetUtil.hasIntersection(unManagedExportMask.getKnownInitiatorUris(),computeInitiators)) {    String message=String.format("Unmanaged export mask has initiators that match the export group (%s) initiators and therefore will be attempted to be ingested.",unManagedExportMask.getMaskName(),exportGroup.getLabel());    _logger.info(message);    return true;  }  String errorMessage=String.format("ExportGroup %s has no initiators that match unmanaged export mask %s and therefore can't be ingested with it.",exportGroup.getLabel(),unManagedExportMask.getMaskName());  errorMessages.add(errorMessage.toString());  _logger.warn(errorMessage);  return false;}  }
class C{  public BrowsePathTarget clone(){  BrowsePathTarget result=new BrowsePathTarget();  result.TargetId=TargetId;  result.RemainingPathIndex=RemainingPathIndex;  return result;}  }
class C{  private void parseGroup() throws XMLStreamException {  int groupCounter=1;  while (reader.hasNext()) {    int event=reader.next();    if (event == XMLStreamConstants.START_ELEMENT) {      applyTransform();      final String elementName=reader.getLocalName();      if (elementName.equalsIgnoreCase(CIRCLE_ELEMENT))       parseCircle(); else       if (elementName.equalsIgnoreCase(ELLIPSE_ELEMENT))       parseEllipse(); else       if (elementName.equalsIgnoreCase(LINE_ELEMENT))       parseLine(); else       if (elementName.equalsIgnoreCase(POLYLINE_ELEMENT))       parsePolyline(); else       if (elementName.equalsIgnoreCase(POLYGON_ELEMENT))       parsePolygon(); else       if (elementName.equalsIgnoreCase(RECT_ELEMENT))       parseRect();    } else     if (event == XMLStreamConstants.END_ELEMENT) {      applyTransformEnd();      if (reader.getLocalName().equalsIgnoreCase(GROUP_ELEMENT)) {        groupCounter--;        if (groupCounter == 0)         break;      }    }  }}  }
class C{  protected final boolean isTransientEntity(final Object object){  return object instanceof Identifiable && ((Identifiable)object).getId() <= 0L;}  }
class C{  @Override public boolean canWrite(Object obj,Throwable err){  return err == null;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("PP_Product_BOM_ID"))     p_PP_Product_BOM_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  p_Record_ID=getRecord_ID();}  }
class C{  public DocumentPartitioningChangedEvent(Document document){  fDocument=document;}  }
class C{  @Synchronized("accessLock") @SuppressWarnings("unchecked") public C createChannel(@NonNull String name){  C chan=(C)botFactory.createChannel(bot,name);  channelNameMap.put(name.toLowerCase(locale),chan);  return chan;}  }
class C{  public Collection<MailAddress> match(Mail mail) throws MessagingException {  Collection<MailAddress> finalResult=null;  boolean first=true;  for (  Matcher matcher : getMatchers()) {    Collection<MailAddress> matchedAddresses=Optional.fromNullable(matcher.match(mail)).or(new ArrayList<MailAddress>());    if (first) {      finalResult=matchedAddresses;      first=false;    } else {      finalResult=performXor(finalResult,matchedAddresses);    }  }  return finalResult;}  }
class C{  public static Collection<InetAddress> toInetAddresses(ClusterNode node) throws IgniteCheckedException {  return toInetAddresses(node.addresses(),node.hostNames());}  }
class C{  public InlineQueryResultGif.InlineQueryResultGifBuilder thumbUrl(URL thumbUrl){  this.thumb_url=thumbUrl;  return this;}  }
class C{  public Float evaluate(float fraction,Number startValue,Number endValue){  float startFloat=startValue.floatValue();  return startFloat + fraction * (endValue.floatValue() - startFloat);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  NdefMessage other=(NdefMessage)obj;  return Arrays.equals(mRecords,other.mRecords);}  }
class C{  public int lastIndexOfFromTo(Object element,int from,int to,boolean testForEquality){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  Object[] theElements=elements;  if (testForEquality && element != null) {    for (int i=to; i >= from; i--) {      if (element.equals(theElements[i])) {        return i;      }    }  } else {    for (int i=to; i >= from; i--) {      if (element == theElements[i]) {        return i;      }    }  }  return -1;}  }
class C{  protected Word(double fontSize){  this.fontSize=fontSize;}  }
class C{  public static int createAndLinkProgram(final int vertexShaderHandle,final int fragmentShaderHandle,final String[] attributes){  int programHandle=GLES20.glCreateProgram();  if (programHandle != 0) {    GLES20.glAttachShader(programHandle,vertexShaderHandle);    GLES20.glAttachShader(programHandle,fragmentShaderHandle);    if (attributes != null) {      final int size=attributes.length;      for (int i=0; i < size; i++) {        GLES20.glBindAttribLocation(programHandle,i,attributes[i]);      }    }    GLES20.glLinkProgram(programHandle);    final int[] linkStatus=new int[1];    GLES20.glGetProgramiv(programHandle,GLES20.GL_LINK_STATUS,linkStatus,0);    if (linkStatus[0] == 0) {      Log.e(TAG,"Error compiling program: " + GLES20.glGetProgramInfoLog(programHandle));      GLES20.glDeleteProgram(programHandle);      programHandle=0;    }  }  if (programHandle == 0) {    throw new RuntimeException("Error creating program.");  }  return programHandle;}  }
class C{  public GridTaskNameAnnotationSelfTest(){  super(true);}  }
class C{  public NetMember newNetMember(InetAddress i,int p){  return new GMSMember(MemberAttributes.INVALID,i,p,false,true,Version.CURRENT_ORDINAL,0,0);}  }
class C{  private int registerObject(Object caller){  if (caller == null) {    return 0;  }  for (  Integer objectId : knownCallerObjects.keySet()) {    if (knownCallerObjects.get(objectId) == caller) {      return objectId;    }  }  objectCounter++;  knownCallerObjects.put(objectCounter,caller);  return objectCounter;}  }
class C{  private com.vmware.identity.samlservice.SamlValidator.ValidationResult validateLogoutResponse(com.vmware.identity.samlservice.SamlValidator.ValidationResult vr,IdmAccessor accessor,LogoutResponse response,SessionManager sm){  Validate.notNull(response.getIssuer());  try {    @SuppressWarnings("unused") String acsUrl=accessor.getSloForRelyingParty(response.getIssuer().getValue(),OasisNames.HTTP_REDIRECT);  } catch (  IllegalStateException e) {    log.debug("Caught illegal state exception while Validating " + e.toString() + ", returning 400");    vr=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,e.getMessage(),null);  }  if (vr == null && response.getID() == null) {    vr=new ValidationResult(OasisNames.REQUESTER);    log.debug("Validation FAILED - Request ID is missing");  }  if (vr == null) {    SAMLVersion version=response.getVersion();    if ((version.getMajorVersion() > Shared.REQUIRED_SAML_VERSION.getMajorVersion()) || version.getMajorVersion() == Shared.REQUIRED_SAML_VERSION.getMajorVersion() && version.getMinorVersion() > Shared.REQUIRED_SAML_VERSION.getMinorVersion()) {      vr=new ValidationResult(OasisNames.VERSION_MISMATCH,OasisNames.REQUEST_VERSION_TOO_HIGH);      log.debug("Validation FAILED - Version is too high");    } else     if ((version.getMajorVersion() < Shared.REQUIRED_SAML_VERSION.getMajorVersion()) || version.getMajorVersion() == Shared.REQUIRED_SAML_VERSION.getMajorVersion() && version.getMinorVersion() < Shared.REQUIRED_SAML_VERSION.getMinorVersion()) {      vr=new ValidationResult(OasisNames.VERSION_MISMATCH,OasisNames.REQUEST_VERSION_TOO_LOW);      log.debug("Validation FAILED - Version is too low");    }  }  if (vr == null) {    DateTime dtPlus=response.getIssueInstant();    DateTime dtMinus=response.getIssueInstant();    DateTime instant=new DateTime();    long clockTolerance=accessor.getClockTolerance();    if (dtPlus == null) {      vr=new ValidationResult(OasisNames.REQUESTER);      log.debug("Validation FAILED - Issue Instant is missing");    } else {      dtPlus=dtPlus.plus(clockTolerance);      dtMinus=dtMinus.minus(clockTolerance);      if (dtPlus.isBefore(instant) || dtMinus.isAfter(instant)) {        vr=new ValidationResult(OasisNames.REQUESTER);        log.debug("Validation FAILED - Issue Instant outside of clock tolerance");        log.debug("clockTolerance {} ",clockTolerance);        log.debug("now {}",instant);        log.debug("dtPlus {}",dtPlus.toString());        log.debug("dtMinus {}",dtMinus.toString());      }    }  }  if (vr == null) {    String inResponseTo=response.getInResponseTo();    if (inResponseTo == null) {      vr=new ValidationResult(OasisNames.REQUESTER);      log.debug("Validation FAILED - inResponseTo is missing");    } else {      Session session=sm.getByLogoutRequestId(inResponseTo);      if (session == null) {        log.info("Unable to identify a session the SLO response is referring to. This could be caused by site-affinity switch.");      }    }  }  if (vr == null) {    Status status=null;    StatusCode statusCode=null;    if (vr == null) {      status=response.getStatus();      if (status == null) {        vr=new ValidationResult(OasisNames.REQUESTER);        log.debug("Validation FAILED - unable to find status code");      }    }    if (vr == null) {      statusCode=status.getStatusCode();      if (statusCode == null) {        vr=new ValidationResult(OasisNames.REQUESTER);        log.debug("Validation FAILED - unable to find status code");      }    }    if (vr == null) {      String code=statusCode.getValue();      if (!OasisNames.SUCCESS.equals(code)) {        vr=new ValidationResult(OasisNames.SUCCESS,OasisNames.PARTIAL_LOGOUT);        log.debug("Validation FAILED - partially logged out session");      }    }  }  if (vr == null) {    vr=new ValidationResult();  }  return vr;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public GridArrangement(int rows,int columns){  this.rows=rows;  this.columns=columns;}  }
class C{  public void addEntity(Entity entity){  if (entity.uuid != 0L) {    throw new IllegalArgumentException("Entity is already registered with an Engine id = " + entity.uuid);  }  entity.uuid=obtainEntityId();  entities.add(entity);  entitiesById.put(entity.getId(),entity);}  }
class C{  public ElsaSerializerPojo make(){  return new ElsaSerializerPojo(objectStack,singletons,registeredSers,registeredSerHeaders,registeredDeser,unknownClassNotification,new ElsaClassInfoResolver.ArrayBased(classes.toArray(new Class[0])));}  }
class C{  public AvatarImage(AccountInfo account){  this(account,AccountInfo.AvatarInfo.DEFAULT_SIZE,true);}  }
class C{  private void takePicture(){synchronized (mCameraStateLock) {    mPendingUserCaptures++;    if (mState != STATE_PREVIEW) {      return;    }    try {      if (!mNoAFRun) {        mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_START);      }      if (!isLegacyLocked()) {        mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER,CameraMetadata.CONTROL_AE_PRECAPTURE_TRIGGER_START);      }      mState=STATE_WAITING_FOR_3A_CONVERGENCE;      startTimerLocked();      mCaptureSession.capture(mPreviewRequestBuilder.build(),mPreCaptureCallback,mBackgroundHandler);    } catch (    CameraAccessException e) {      e.printStackTrace();    }  }}  }
class C{  private static void _fixAliases(KeyStore keyStore){  Field field;  KeyStoreSpi keyStoreVeritable;  try {    field=keyStore.getClass().getDeclaredField("keyStoreSpi");    field.setAccessible(true);    keyStoreVeritable=(KeyStoreSpi)field.get(keyStore);    if ("sun.security.mscapi.KeyStore$MY".equals(keyStoreVeritable.getClass().getName())) {      Collection<?> entries;      String alias, hashCode;      X509Certificate[] certificates;      field=keyStoreVeritable.getClass().getEnclosingClass().getDeclaredField("entries");      field.setAccessible(true);      entries=(Collection<?>)field.get(keyStoreVeritable);      for (      Object entry : entries) {        field=entry.getClass().getDeclaredField("certChain");        field.setAccessible(true);        certificates=(X509Certificate[])field.get(entry);        hashCode=Integer.toString(certificates[0].hashCode());        field=entry.getClass().getDeclaredField("alias");        field.setAccessible(true);        alias=(String)field.get(entry);        if (!alias.equals(hashCode)) {          field.set(entry,alias.concat(" - ").concat(hashCode));        }      }    }  } catch (  Exception exception) {    LOG.error(exception.getMessage(),exception);  }}  }
class C{  public DefaultTupleSet(){  m_tuples=new LinkedHashSet();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.549 -0500",hash_original_method="0B4DA3D002D9BEE66893798DFD4DBDF7",hash_generated_method="D3393C2385D07821FEECC3C8F0475B32") public final long incrementAndGet(){  return value++;}  }
class C{  public void store(String fileName,InputStream in) throws IOException {  passive();  send("STOR " + fileName);  readCode(150);  IOUtils.copyAndClose(in,outData);  readCode(226);}  }
class C{  public void shutdown() throws Exception {  Activatable.unexportObject(this,true);  ActivationLibrary.deactivate(this,getID());}  }
class C{  public Assignment(Assignment ass,String var,String val){  this();  addAssignment(ass);  addPair(var,val);}  }
class C{  @Override public PowerLawDegreeEdgeIterator resetForNode(int inputNode){  if (regularDegreeEdgeIterators.length < powerLawDegreeEdgePool.getNumPools()) {    reinitializeRegularDegreeEdgeIterators(powerLawDegreeEdgePool.getNumPools());  }  node=inputNode;  nodeDegree=powerLawDegreeEdgePool.getNodeDegree(inputNode);  currentEdge=0;  currentPool=0;  currentRegularDegreeEdgeIterator=regularDegreeEdgeIterators[currentPool];  currentRegularDegreeEdgeIterator.resetForNode(node);  currentPoolSize=powerLawDegreeEdgePool.getDegreeForPool(currentPool);  edgeInCurrentPool=0;  return this;}  }
class C{  public static boolean isEffectivelyFinal(Element element){  Symbol sym=(Symbol)element;  if (sym.getEnclosingElement().getKind() == ElementKind.METHOD && (sym.getEnclosingElement().flags() & ABSTRACT) != 0) {    return true;  }  return (sym.flags() & (FINAL | EFFECTIVELY_FINAL)) != 0;}  }
class C{  public void destroy(){  close();  poRecord=null;  paoFieldDefns=null;}  }
class C{  public TypeAliasDefinition createTypeAliasDefinition(){  TypeAliasDefinitionImpl typeAliasDefinition=new TypeAliasDefinitionImpl();  return typeAliasDefinition;}  }
class C{  public static NodeIdentity deserializeWithPublicKey(final Deserializer deserializer){  return new NodeIdentity(deserializer,false);}  }
class C{  @Deprecated public DateTime toDateTimeAtMidnight(){  return toDateTimeAtMidnight(null);}  }
class C{  public void destroyBeans(FacesContext facesContext,Map<String,Object> viewMap){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"Destroying @ViewScoped beans from view map: {0}",viewMap);  }  ApplicationAssociate applicationAssociate=ApplicationAssociate.getInstance(facesContext.getExternalContext());  if (applicationAssociate != null) {    destroyBeans(applicationAssociate,viewMap);  }}  }
class C{  public static SemGraphWrapper serializableInstance(){  return new SemGraphWrapper(SemGraph.serializableInstance());}  }
class C{  private void addClasspath(String path){  if (classpath == null) {    classpath=path;  } else {    classpath+=File.pathSeparator + path;  }}  }
class C{  public static URI stripScheme(URI uri) throws URISyntaxException {  return new URI(stripPrefix(uri.getSchemeSpecificPart().trim(),"//"));}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  @Override public boolean offer(PartiallyMinedBlock block){  if (contains(block)) {    this.remove(block);  }  return super.offer(block);}  }
class C{  public void ensureNotDone() throws IOException {  if (mOperationDone) {    throw new IOException("Operation has completed");  }}  }
class C{  private void compute(){  Map<Link,Double> absDeltaThetas=new TreeMap<>(new LinkIdComparator());  for (  Link l : this.network.getLinks().values()) {    Node from=l.getFromNode();    Node to=l.getToNode();    Coord cFrom=from.getCoord();    Coord cTo=to.getCoord();    double xTo=cTo.getX();    double yTo=cTo.getY();    double thetaL=Math.atan2(yTo - cFrom.getY(),xTo - cFrom.getX());    Collection<? extends Link> outLinks=to.getOutLinks().values();    absDeltaThetas.clear();    if (outLinks.size() > 1) {      for (      Link out : outLinks) {        Coord cOut=out.getToNode().getCoord();        double deltaTheta=Math.atan2(cOut.getY() - yTo,cOut.getX() - xTo) - thetaL;        while (deltaTheta < -Math.PI) {          deltaTheta+=2.0 * Math.PI;        }        while (deltaTheta > Math.PI) {          deltaTheta-=2.0 * Math.PI;        }        absDeltaThetas.put(out,Math.abs(deltaTheta));      }      this.subsequentLinks.put(l.getId(),computeSubsequentLink(absDeltaThetas).getId());    } else     if (outLinks.size() == 1) {      this.subsequentLinks.put(l.getId(),outLinks.iterator().next().getId());    }  }}  }
class C{  public String bPartner(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_BPartner_ID=(Integer)value;  if (C_BPartner_ID == null || C_BPartner_ID.intValue() == 0)   return "";  String sql="SELECT p.AD_Language,p.C_PaymentTerm_ID," + " COALESCE(p.M_PriceList_ID,g.M_PriceList_ID) AS M_PriceList_ID, p.PaymentRule,p.POReference," + " p.SO_Description,p.IsDiscountPrinted,"+ " p.SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,"+ " l.C_BPartner_Location_ID,c.AD_User_ID,"+ " COALESCE(p.PO_PriceList_ID,g.PO_PriceList_ID) AS PO_PriceList_ID, p.PaymentRulePO,p.PO_PaymentTerm_ID "+ "FROM C_BPartner p"+ " INNER JOIN C_BP_Group g ON (p.C_BP_Group_ID=g.C_BP_Group_ID)"+ " LEFT OUTER JOIN C_BPartner_Location l ON (p.C_BPartner_ID=l.C_BPartner_ID AND l.IsBillTo='Y' AND l.IsActive='Y')"+ " LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID) "+ "WHERE p.C_BPartner_ID=? AND p.IsActive='Y'";  boolean IsSOTrx=Env.getContext(ctx,WindowNo,"IsSOTrx").equals("Y");  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_BPartner_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      String s=rs.getString(IsSOTrx ? "PaymentRule" : "PaymentRulePO");      if (s != null && s.length() != 0) {        if (Env.getContext(ctx,WindowNo,"DocBaseType").endsWith("C"))         s="P"; else         if (IsSOTrx && (s.equals("S") || s.equals("U")))         s="P";      }      Integer ii=new Integer(rs.getInt(IsSOTrx ? "C_PaymentTerm_ID" : "PO_PaymentTerm_ID"));      if (!rs.wasNull())       mTab.setValue("C_PaymentTerm_ID",ii);      int locID=rs.getInt("C_BPartner_Location_ID");      if (C_BPartner_ID.toString().equals(Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_ID"))) {        String loc=Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_Location_ID");        if (loc.length() > 0)         locID=Integer.parseInt(loc);      }      if (locID == 0)       mTab.setValue("C_BPartner_Location_ID",null); else       mTab.setValue("C_BPartner_Location_ID",new Integer(locID));      int contID=rs.getInt("AD_User_ID");      if (C_BPartner_ID.toString().equals(Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_ID"))) {        String cont=Env.getContext(ctx,WindowNo,Env.TAB_INFO,"AD_User_ID");        if (cont.length() > 0)         contID=Integer.parseInt(cont);      }      if (contID == 0)       mTab.setValue("AD_User_ID",null); else       mTab.setValue("AD_User_ID",new Integer(contID));      if (IsSOTrx) {        double CreditLimit=rs.getDouble("SO_CreditLimit");        if (CreditLimit != 0) {          double CreditAvailable=rs.getDouble("CreditAvailable");          if (!rs.wasNull() && CreditAvailable < 0)           mTab.fireDataStatusEEvent("CreditLimitOver",DisplayType.getNumberFormat(DisplayType.Amount).format(CreditAvailable),false);        }      }    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);  }  setDocumentNo(ctx,WindowNo,mTab);  return tax(ctx,WindowNo,mTab,mField,value);}  }
class C{  public static <T>ArrayList<T> newArrayList(){  return new ArrayList<T>();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.411 -0400",hash_original_method="CAAF4DC59EF8C31987E09418AE767741",hash_generated_method="783EC516262EA72A86DBF4C974A1E3E1") @Override public long skip(long n) throws IOException {  throw exception;}  }
class C{  private void backupConfigurationFile(){  try {    File backup=new File(getBackupFileName());    FileUtils.copyFile(getAuthConfiguration().getFile(),backup);  } catch (  Exception t) {    log.error("Error while creating backup of authorization configuration.",t);  }}  }
class C{  public SeriesSelection(int seriesIndex,int pointIndex,double xValue,double value){  mSeriesIndex=seriesIndex;  mPointIndex=pointIndex;  mXValue=xValue;  mValue=value;}  }
class C{  public boolean removeAll(Object key1){  boolean modified=false;  MapIterator it=mapIterator();  while (it.hasNext()) {    MultiKey multi=(MultiKey)it.next();    if (multi.size() >= 1 && (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0)))) {      it.remove();      modified=true;    }  }  return modified;}  }
class C{  public ClientMessage sendMessage(String body){  ClientMessage message=createMessage(body);  sendMessage(message);  return message;}  }
class C{  public ArrayConverter(Class defaultType,Converter elementConverter,int defaultSize){  this(defaultType,elementConverter);  this.defaultSize=defaultSize;  Object defaultValue=null;  if (defaultSize >= 0) {    defaultValue=Array.newInstance(defaultType.getComponentType(),defaultSize);  }  setDefaultValue(defaultValue);}  }
class C{  public void flush() throws IOException {  OutputStream os=this.os;  this.os=null;  if (os != null)   server.flush(channel);}  }
class C{  public void removeSeriesRenderer(SimpleSeriesRenderer renderer){  mRenderers.remove(renderer);}  }
class C{  public static double quantile(DoubleArrayList sortedData,double phi){  double[] sortedElements=sortedData.elements();  int n=sortedData.size();  double index=phi * (n - 1);  int lhs=(int)index;  double delta=index - lhs;  double result;  if (n == 0)   return 0.0;  if (lhs == n - 1) {    result=sortedElements[lhs];  } else {    result=(1 - delta) * sortedElements[lhs] + delta * sortedElements[lhs + 1];  }  return result;}  }
class C{  protected DomainObjectException.ClassEnum class2Enum(Class<?> objclass){  DomainObjectException.ClassEnum classEnum=null;  if (objclass == Organization.class) {    classEnum=DomainObjectException.ClassEnum.ORGANIZATION;  } else   if (objclass == PlatformUser.class) {    classEnum=DomainObjectException.ClassEnum.USER;  } else   if (objclass == Subscription.class) {    classEnum=DomainObjectException.ClassEnum.SUBSCRIPTION;  } else   if (objclass == Product.class) {    classEnum=DomainObjectException.ClassEnum.SERVICE;  } else   if (objclass == TechnicalProduct.class) {    classEnum=DomainObjectException.ClassEnum.TECHNICAL_SERVICE;  } else   if (objclass == ParameterDefinition.class) {    classEnum=DomainObjectException.ClassEnum.PARAMETER_DEFINITION;  } else   if (objclass == ParameterOption.class) {    classEnum=DomainObjectException.ClassEnum.PARAMETER_OPTION;  } else   if (objclass == Parameter.class) {    classEnum=DomainObjectException.ClassEnum.PARAMETER;  } else   if (objclass == PricedParameter.class) {    classEnum=DomainObjectException.ClassEnum.PRICED_PARAMETER;  } else   if (objclass == OrganizationRole.class) {    classEnum=DomainObjectException.ClassEnum.ORGANIZATION_ROLE;  } else   if (objclass == Report.class) {    classEnum=DomainObjectException.ClassEnum.REPORT;  } else   if (objclass == Event.class) {    classEnum=DomainObjectException.ClassEnum.EVENT;  } else   if (objclass == TechnicalProductOperation.class) {    classEnum=DomainObjectException.ClassEnum.TECHNICAL_SERVICE_OPERATION;  } else   if (objclass == OperationParameter.class) {    classEnum=DomainObjectException.ClassEnum.OPERATION_PARAMETER;  } else   if (objclass == RoleDefinition.class) {    classEnum=DomainObjectException.ClassEnum.ROLE_DEFINITION;  } else   if (objclass == PaymentType.class) {    classEnum=DomainObjectException.ClassEnum.PAYMENT_TYPE;  } else   if (objclass == SupportedCurrency.class) {    classEnum=DomainObjectException.ClassEnum.SUPPORTED_CURRENCY;  } else   if (objclass == UdaDefinition.class) {    classEnum=DomainObjectException.ClassEnum.UDA_DEFINITION;  } else   if (objclass == Uda.class) {    classEnum=DomainObjectException.ClassEnum.UDA;  } else   if (objclass == SupportedCountry.class) {    classEnum=DomainObjectException.ClassEnum.SUPPORTED_COUNTRY;  } else   if (objclass == OrganizationToCountry.class) {    classEnum=DomainObjectException.ClassEnum.ORGANIZATION_TO_COUNTRY;  } else   if (objclass == OrganizationReference.class) {    classEnum=DomainObjectException.ClassEnum.ORGANIZATION_REFERENCE;  } else   if (objclass == Marketplace.class) {    classEnum=DomainObjectException.ClassEnum.MARKETPLACE;  } else   if (objclass == Tag.class) {    classEnum=DomainObjectException.ClassEnum.TAG;  } else   if (objclass == TechnicalProductTag.class) {    classEnum=DomainObjectException.ClassEnum.TECHNICAL_SERVICE_TAG;  } else   if (objclass == UserRole.class) {    classEnum=DomainObjectException.ClassEnum.USER_ROLE;  } else   if (objclass == ProductReview.class) {    classEnum=DomainObjectException.ClassEnum.PRODUCT_REVIEW;  } else   if (objclass == BillingContact.class) {    classEnum=DomainObjectException.ClassEnum.BILLING_CONTACT;  } else   if (objclass == PaymentInfo.class) {    classEnum=DomainObjectException.ClassEnum.PAYMENT_INFO;  } else   if (objclass == MarketplaceToOrganization.class) {    classEnum=DomainObjectException.ClassEnum.MARKETPLACE_TO_ORGANIZATION;  } else   if (objclass == ProductToPaymentType.class) {    classEnum=DomainObjectException.ClassEnum.PRODUCT_TO_PAYMENTTYPE;  } else   if (objclass == PSP.class) {    classEnum=DomainObjectException.ClassEnum.PSP;  } else   if (objclass == Category.class) {    classEnum=DomainObjectException.ClassEnum.CATEGORY;  } else   if (objclass == MarketingPermission.class) {    classEnum=DomainObjectException.ClassEnum.MARKETING_PERMISSION;  } else   if (objclass == TriggerDefinition.class) {    classEnum=DomainObjectException.ClassEnum.TRIGGER_DEFINITION;  } else   if (objclass == ReportResultCache.class) {    classEnum=DomainObjectException.ClassEnum.REPORT_RESULT_CACHE;  } else   if (objclass == OrganizationSetting.class) {    classEnum=DomainObjectException.ClassEnum.ORGANIZATION_SETTING;  } else   if (objclass == PlatformSetting.class) {    classEnum=DomainObjectException.ClassEnum.PLATFORM_SETTING;  } else   if (objclass == LocalizedResource.class) {    classEnum=DomainObjectException.ClassEnum.LOCALIZED_RESOURCE;  } else   if (objclass == SupportedLanguage.class) {    classEnum=DomainObjectException.ClassEnum.SUPPORTED_LANGUAGE;  } else   if (objclass == UserGroup.class) {    classEnum=DomainObjectException.ClassEnum.USER_GROUP;  } else   if (objclass == UserGroupToUser.class) {    classEnum=DomainObjectException.ClassEnum.USER_GROUP_TO_USER;  } else   if (objclass == UserGroupToInvisibleProduct.class) {    classEnum=DomainObjectException.ClassEnum.USER_GROUP_TO_INVISIBLE_PRODUCT;  } else   if (objclass == OperationRecord.class) {    classEnum=DomainObjectException.ClassEnum.OPERATION_RECORD;  } else   if (objclass == BillingAdapter.class) {    classEnum=DomainObjectException.ClassEnum.BILLING_ADAPTER;  } else   if (objclass == UnitRoleAssignment.class) {    classEnum=DomainObjectException.ClassEnum.UNIT_ROLE_ASSIGNMENT;  } else   if (objclass == MarketplaceAccess.class) {    classEnum=DomainObjectException.ClassEnum.MARKETPLACE_ACCESS;  } else   if (objclass == Tenant.class) {    classEnum=DomainObjectException.ClassEnum.TENANT;  }  return classEnum;}  }
class C{  public ThermiteRandom(long seed){  this.seed=seed;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  rootEClass=createEClass(ROOT);  createEReference(rootEClass,ROOT__ROOTS);  defRootEClass=createEClass(DEF_ROOT);  statechartRootEClass=createEClass(STATECHART_ROOT);  createEReference(statechartRootEClass,STATECHART_ROOT__DEF);  stateRootEClass=createEClass(STATE_ROOT);  createEReference(stateRootEClass,STATE_ROOT__DEF);  transitionRootEClass=createEClass(TRANSITION_ROOT);  createEReference(transitionRootEClass,TRANSITION_ROOT__DEF);  statechartSpecificationEClass=createEClass(STATECHART_SPECIFICATION);  stateSpecificationEClass=createEClass(STATE_SPECIFICATION);  createEReference(stateSpecificationEClass,STATE_SPECIFICATION__SCOPE);  transitionSpecificationEClass=createEClass(TRANSITION_SPECIFICATION);  createEReference(transitionSpecificationEClass,TRANSITION_SPECIFICATION__REACTION);  statechartScopeEClass=createEClass(STATECHART_SCOPE);  interfaceScopeEClass=createEClass(INTERFACE_SCOPE);  internalScopeEClass=createEClass(INTERNAL_SCOPE);  importScopeEClass=createEClass(IMPORT_SCOPE);  createEReference(importScopeEClass,IMPORT_SCOPE__IMPORTS);  eventDefinitionEClass=createEClass(EVENT_DEFINITION);  variableDefinitionEClass=createEClass(VARIABLE_DEFINITION);  createEReference(variableDefinitionEClass,VARIABLE_DEFINITION__INITIAL_VALUE);  operationDefinitionEClass=createEClass(OPERATION_DEFINITION);  typeAliasDefinitionEClass=createEClass(TYPE_ALIAS_DEFINITION);  localReactionEClass=createEClass(LOCAL_REACTION);  transitionReactionEClass=createEClass(TRANSITION_REACTION);  guardEClass=createEClass(GUARD);  createEReference(guardEClass,GUARD__EXPRESSION);  entryPointSpecEClass=createEClass(ENTRY_POINT_SPEC);  createEAttribute(entryPointSpecEClass,ENTRY_POINT_SPEC__ENTRYPOINT);  exitPointSpecEClass=createEClass(EXIT_POINT_SPEC);  createEAttribute(exitPointSpecEClass,EXIT_POINT_SPEC__EXITPOINT);  eventSpecEClass=createEClass(EVENT_SPEC);  regularEventSpecEClass=createEClass(REGULAR_EVENT_SPEC);  createEReference(regularEventSpecEClass,REGULAR_EVENT_SPEC__EVENT);  timeEventSpecEClass=createEClass(TIME_EVENT_SPEC);  createEAttribute(timeEventSpecEClass,TIME_EVENT_SPEC__TYPE);  createEReference(timeEventSpecEClass,TIME_EVENT_SPEC__VALUE);  createEAttribute(timeEventSpecEClass,TIME_EVENT_SPEC__UNIT);  builtinEventSpecEClass=createEClass(BUILTIN_EVENT_SPEC);  entryEventEClass=createEClass(ENTRY_EVENT);  exitEventEClass=createEClass(EXIT_EVENT);  alwaysEventEClass=createEClass(ALWAYS_EVENT);  simpleScopeEClass=createEClass(SIMPLE_SCOPE);  reactionTriggerEClass=createEClass(REACTION_TRIGGER);  createEReference(reactionTriggerEClass,REACTION_TRIGGER__TRIGGERS);  createEReference(reactionTriggerEClass,REACTION_TRIGGER__GUARD);  defaultTriggerEClass=createEClass(DEFAULT_TRIGGER);  reactionEffectEClass=createEClass(REACTION_EFFECT);  createEReference(reactionEffectEClass,REACTION_EFFECT__ACTIONS);  eventRaisingExpressionEClass=createEClass(EVENT_RAISING_EXPRESSION);  createEReference(eventRaisingExpressionEClass,EVENT_RAISING_EXPRESSION__EVENT);  createEReference(eventRaisingExpressionEClass,EVENT_RAISING_EXPRESSION__VALUE);  eventValueReferenceExpressionEClass=createEClass(EVENT_VALUE_REFERENCE_EXPRESSION);  createEReference(eventValueReferenceExpressionEClass,EVENT_VALUE_REFERENCE_EXPRESSION__VALUE);  activeStateReferenceExpressionEClass=createEClass(ACTIVE_STATE_REFERENCE_EXPRESSION);  createEReference(activeStateReferenceExpressionEClass,ACTIVE_STATE_REFERENCE_EXPRESSION__VALUE);  timeEventTypeEEnum=createEEnum(TIME_EVENT_TYPE);  timeUnitEEnum=createEEnum(TIME_UNIT);}  }
class C{  public void put(Key key,Value val){  if (key == null)   throw new NullPointerException("called put() with null key");  if (val == null)   st.remove(key); else   st.put(key,val);}  }
class C{  public static <S>S loadSingle(Class<S> service,boolean required){  assert !service.getName().startsWith("jdk.vm.ci") : "JVMCI services must be loaded via " + Services.class.getName();  if (Java8OrEarlier) {    return Services.loadSingle(service,required);  }  Iterable<S> providers=ServiceLoader.load(service);  S singleProvider=null;  try {    for (Iterator<S> it=providers.iterator(); it.hasNext(); ) {      singleProvider=it.next();      if (it.hasNext()) {        throw new InternalError(String.format("Multiple %s providers found",service.getName()));      }    }  } catch (  ServiceConfigurationError e) {  }  if (singleProvider == null) {    if (required) {      throw new InternalError(String.format("No provider for %s found",service.getName()));    }  } else {    Services.exportJVMCITo(singleProvider.getClass());  }  return singleProvider;}  }
class C{  public static synchronized long nextEpoch(){  return curSTR.getEpoch() + ServerConfig.getEpochInterval();}  }
class C{  public ItemBuilder amount(final int amount){  this.itemStack.setAmount(amount);  return this;}  }
class C{  protected Node newNode(){  return new GenericDocument();}  }
class C{  public void pathValueToPixel(Path path){  path.transform(mMatrixValueToPx);  path.transform(mViewPortHandler.getMatrixTouch());  path.transform(mMatrixOffset);}  }
class C{  public String uploadNewNERTask2(String template,String jobID1,List<JCas> documentsJCas,List<JCas> goldsJCas) throws JsonProcessingException, IOException, CrowdException {  Log LOG=LogFactory.getLog(getClass());  omittedSentences=0;  BufferedReader br=getReaderForRawJudgments(jobID1);  String line;  ObjectMapper mapper=new ObjectMapper();  ObjectWriter writer=mapper.writer();  Vector<NamedEntityTask2Data> uploadData=new Vector<NamedEntityTask2Data>();  while ((line=br.readLine()) != null) {    try {      JsonNode elem=mapper.readTree(line);      String text=elem.path(JSON_FIELD_DATA).path(NamedEntityTask1Data.FIELD_TEXT).asText();      String state=elem.path(JSON_FIELD_STATE).asText();      if (state.equals(JSON_VALUE_HIDDEN_GOLD)) {        continue;      }      String document=elem.path(JSON_FIELD_DATA).path(JSON_FIELD_DOCUMENT).asText();      int offset=elem.path(JSON_FIELD_DATA).path(NamedEntityTask1Data.FIELD_OFFSET).asInt();      if (state.equals(JSON_VALUE_GOLDEN)) {        String markertext_gold=elem.path(JSON_FIELD_DATA).path(NamedEntityTask1Data.FIELD_MARKERTEXT_GOLD).asText();        String types=elem.path(JSON_FIELD_DATA).path(NamedEntityTask1Data.FIELD_TYPES).asText();        if (!types.equals(JSON_VALUE_EMPTY_ARRAY)) {          List<String> NEtypes=Arrays.asList(types.substring(1,types.length() - 1).split(","));          JsonNode markers=mapper.readTree(markertext_gold);          if (NEtypes.size() != markers.size()) {            LOG.warn("Warning, skipping ill formated gold item in task1! (NEtypes.size() != markers.size())");            continue;          }          int i=0;          for (          JsonNode marker : markers) {            int start=marker.path(JSON_FIELD_START_MARKER).asInt();            int end=marker.path(JSON_FIELD_END_MARKER).asInt();            NamedEntityTask2Data task2_gold_datum=new NamedEntityTask2Data(text,extractSpan(text,start,end),writer.writeValueAsString(marker),String.valueOf(getFirstSpanOffset(text)),document,task2NeMap.get(NEtypes.get(i)),bogusNER2Reason);            task2_gold_datum.setDocOffset(offset);            uploadData.add(task2_gold_datum);            i++;          }        }      } else {        if (!elem.path(JSON_FIELD_RESULTS).path(JSON_FIELD_JUDGMENTS).isMissingNode()) {          Map<String,Integer> votings=new HashMap<String,Integer>();          for (          JsonNode judgment : elem.path(JSON_FIELD_RESULTS).path(JSON_FIELD_JUDGMENTS)) {            if (!judgment.path(JSON_FIELD_DATA).path(NamedEntityTask1Data.FIELD_MARKERTEXT).isMissingNode()) {              String markertext=judgment.path(JSON_FIELD_DATA).path(NamedEntityTask1Data.FIELD_MARKERTEXT).asText();              JsonNode markers=mapper.readTree(markertext);              for (              JsonNode marker : markers) {                String voteText=writer.writeValueAsString(marker);                if (!votings.containsKey(voteText)) {                  votings.put(voteText,1);                } else {                  votings.put(voteText,votings.get(voteText) + 1);                }              }            } else {              LOG.warn("Warning, missing path in JSON result file from crowdflower: results/judgments");            }          }          int votes_needed=2;          List<String> majorityMarkers=new ArrayList<String>();          for (          String vote : votings.keySet()) {            if (votings.get(vote) >= votes_needed) {              majorityMarkers.add(vote);            }          }          for (          String strMarker : majorityMarkers) {            if (!strMarker.equals(JSON_VALUE_NONE1) && !strMarker.equals(JSON_VALUE_NONE2)) {              JsonNode marker=mapper.readTree(strMarker);              int start=marker.path(JSON_FIELD_START_MARKER).asInt();              int end=marker.path(JSON_FIELD_END_MARKER).asInt();              NamedEntityTask2Data task2_datum=new NamedEntityTask2Data(text,extractSpan(text,start,end),strMarker,String.valueOf(getFirstSpanOffset(text)),document);              task2_datum.setDocOffset(offset);              uploadData.add(task2_datum);            }          }        } else {          LOG.warn("Warning, missing path in JSON result file from crowdflower: data/markertext");        }      }    } catch (    Exception e) {      omittedSentences++;      LOG.warn("Warning, omitted a sentence from task2 upload because of an error in processing it: " + e.getMessage());    }  }  LOG.info("Data generation complete. Creating new Job for Ner task 2.");  CrowdJob job=createJob(template);  setAllowedCountries(job);  crowdclient.updateAllowedCountries(job);  LOG.info("Done, new job id is: " + job.getId() + ". Now generating data for NER task 2");  crowdclient.uploadData(job,uploadData);  LOG.info("Done uploading data to task2 #" + job.getId() + ".");  return job.getId();}  }
class C{  public boolean use24hFormat(){  return preferences.getBoolean(resources.getString(R.string.key_24h_format),Boolean.parseBoolean(resources.getString(R.string.default_24h_format)));}  }
class C{  protected void finalize() throws Throwable {  this.currentReader.lineReader=null;  this.currentReader.pbReader=null;  this.currentReader.systemId=null;  this.currentReader.publicId=null;  this.currentReader=null;  this.readers.clear();  super.finalize();}  }
class C{  public boolean onKeyUp(View view,Editable content,int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_SHIFT_LEFT || keyCode == KeyEvent.KEYCODE_SHIFT_RIGHT) {    release(content,CAP,event);    return true;  }  if (keyCode == KeyEvent.KEYCODE_ALT_LEFT || keyCode == KeyEvent.KEYCODE_ALT_RIGHT || keyCode == KeyEvent.KEYCODE_NUM) {    release(content,ALT,event);    return true;  }  if (keyCode == KeyEvent.KEYCODE_SYM) {    release(content,SYM,event);    return true;  }  return false;}  }
class C{  public void scheduleCoreOperation(Runnable task){  mBackgroundHandler.post(task);}  }
class C{  public final void writeBytes(String s) throws IOException {  int len=s.length();  for (int i=0; i < len; i++) {    write((byte)s.charAt(i));  }}  }
class C{  public void scroll(int amount){  this.setValue(this.getValue() + amount);}  }
class C{  @Override public void executeAction(Agent agent,Action action){  if (action instanceof StateChangeAction) {    StateChangeAction a=(StateChangeAction)action;    if (a.updateCSP())     csp=a.getCSP();    if (a.updateAssignment())     assignment=a.getAssignment();    if (agent == null)     updateEnvironmentViewsAgentActed(agent,action);  }}  }
class C{  public void testRecognizeSymmetricNat_Local_v6_Public_v4() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(mappedClientAddress_v4,responseServerAddress_v6,responseServerAddress_v6);  Response testIResponse2=null;  Response testIResponse3=MessageFactory.create3489BindingResponse(mappedClientAddress_v4_Port2,responseServerAddress_v6,responseServerAddress_v6);  responseServer_v6.addMessage(testIResponse1);  responseServer_v6.addMessage(testIResponse2);  responseServer_v6.addMessage(testIResponse3);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.SYMMETRIC_NAT);  expectedReturn.setPublicAddress(mappedClientAddress_v4);  StunDiscoveryReport actualReturn=stunAddressDiscoverer_v6.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a v4-v6 sym env.",expectedReturn,actualReturn);}  }
class C{  public void start(){  stopAt=System.currentTimeMillis() + MAX_PROCESSING_TIME;}  }
class C{  public boolean compareAndAssign(WorkflowStateConstant oldState,WorkflowStateConstant newState){  if (newState == Limbo || oldState == Failed || oldState == Completed || oldState == Canceled)   throw new IllegalArgumentException("Invalid state change to " + newState.name.get() + " from "+ oldState.name.get());  if (name.compareAndSet(oldState.name.get(),newState.name.get())) {    for (    StateListener l : listeners)     l.stateChanged(this);    return true;  } else   return false;}  }
class C{  public Serializable processCommand(String sessionID,String commandLine) throws Exception {  Command cmd=parser.parseOne(commandLine);  if (cmd == null) {    throw new Exception("Cannot execute null command");  }  String command=cmd.getTokens()[0];  String[] params=getParams(cmd.getTokens(),true);  String result=null;  if (command.equals(CD)) {    String path=(params != null ? params[0] : null);    cd(sessionID,path);  } else   if (command.equals(LIST)) {    String path=(params != null ? params[0] : null);    ResourceNode startNode=getStartNode(sessionID,path);    List<ResourceNode> entries=ls(sessionID,path,cmd.isRecursive());    result=formatEntries(entries,startNode,cmd.isLong(),cmd.isAbsolute());  } else   if (command.equals(CREATE)) {    String path=(params != null ? params[0] : null);    create(sessionID,path,cmd.includeParents());  } else   if (command.equals(RM)) {    String path=(params != null ? params[0] : null);    rm(sessionID,path);  } else   if (command.equals(CP)) {    String source=(params != null ? params[0] : null);    String destination=(source != null && params.length == 2) ? params[1] : null;    cp(sessionID,source,destination);  } else   if (command.equals(PWD)) {    result=pwd(sessionID);  } else   if (command.equals(CHKEXEC)) {    String path=(params != null ? params[0] : null);    return String.format("%s",isExecutable(sessionID,path));  } else   if (command.equals(WHICH)) {    String path=(params != null ? params[0] : null);    return String.format("%s",which(sessionID,path));  } else   if (command.equals(CONNECT)) {    throw new Exception("This interface to CONNECT is no longer supported");  } else   if (command.equals(SERVICE)) {    String serviceSpec=(params != null ? params[0] : null);    String serviceCmd=(params != null && params.length > 1 ? params[1] : null);    return executeExtension(ResourceType.SERVICE,serviceSpec,"command",serviceCmd,null);  } else   if (command.equals(LOCATE_SERVICE)) {    String serviceSpec=(params != null ? params[0] : null);    String serviceCmd=(params != null && params.length > 1 ? params[1] : null);    return executeExtension(ResourceType.SERVICE,serviceSpec,"command",serviceCmd,null);  } else   if (command.equals(EXECUTE)) {    cmd=parser.parseOne(commandLine,false);    params=getParams(cmd.getTokens(),false);    String type=(params != null ? params[0] : null);    String extensionName=(params != null ? params[1] : null);    String theCommand=(params != null && params.length > 2 ? params[2] : null);    if (type == null || extensionName == null || theCommand == null) {      throw new DirectoryException(String.format("Incorrectly formed command for execute:'%s'.",command));    }    ResourceType extensionType=ResourceType.valueOf(type.toUpperCase());    String argList[]=null;    if (params != null && params.length > 3) {      argList=new String[params.length - 3];      for (int i=3; i < params.length; i++)       argList[i - 3]=params[i];    }    return executeExtension(extensionType,extensionName,KEY_COMMAND,theCommand,argList);  } else {    if (isExecutable(sessionID,command)) {      throw new DirectoryException(String.format("Cannot execute '%s' in this context.",command));    }  }  return result;}  }
class C{  public void checkInterval(int begin,int end){  if (begin >= end) {    throw new IllegalArgumentException("Invalid SegmentTreeNode insert: begin (" + begin + ") must be strictly less than end ("+ end+ ")");  }}  }
class C{  protected final void resize(int requiredSize){  int newCapacity=((queue.length < 64) ? ((queue.length + 1) << 1) : ((queue.length >> 1) * 3));  if (newCapacity < 0) {    throw new OutOfMemoryError();  }  if (requiredSize > newCapacity) {    newCapacity=requiredSize;  }  queue=Arrays.copyOf(queue,newCapacity);}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getFlashcardEntityDao() : null;}  }
class C{  public void incBatchesResized(){  this.stats.incInt(batchesResizedId,1);}  }
class C{  private Region find(long size){  validate(!VALIDATING || Long.bitCount(size) == 1);  Node<Region> currentNode=getRoot();  Region currentRegion=currentNode.getPayload();  if (currentRegion == null || (currentRegion.available() & size) == 0) {    return null;  } else {    while (true) {      Region left=currentNode.getLeft().getPayload();      if (left != null && (left.available() & size) != 0) {        currentNode=currentNode.getLeft();        currentRegion=currentNode.getPayload();      } else       if ((currentRegion.availableHere() & size) != 0) {        long mask=size - 1;        long a=(currentRegion.start() + mask) & ~mask;        return new Region(a,a + size - 1);      } else {        Region right=currentNode.getRight().getPayload();        if (right != null && (right.available() & size) != 0) {          currentNode=currentNode.getRight();          currentRegion=currentNode.getPayload();        } else {          throw new AssertionError();        }      }    }  }}  }
class C{  private void removeSubmenu(final JMenu menu){  final ScreenMenu screenMenu=fSubmenus.get(menu);  if (screenMenu == null)   return;  menu.removeComponentListener(this);  remove(screenMenu);  fSubmenus.remove(menu);}  }
class C{  public static int calcSerializedSize(Object o){  int result;  if (o instanceof byte[]) {    result=getByteSize((byte[])o) - Sizeable.PER_OBJECT_OVERHEAD;  } else   if (o instanceof byte[][]) {    result=getArrayOfBytesSize((byte[][])o,false);  } else   if (o instanceof CachedDeserializable) {    result=((CachedDeserializable)o).getSizeInBytes() + 4 - overhead();  } else   if (o instanceof Sizeable) {    result=((Sizeable)o).getSizeInBytes() + 4;  } else   if (o instanceof HeapDataOutputStream) {    result=((HeapDataOutputStream)o).size() + 4;  } else {    result=4;    NullDataOutputStream dos=new NullDataOutputStream();    try {      DataSerializer.writeObject(o,dos);      result+=dos.size();    } catch (    IOException ex) {      RuntimeException ex2=new IllegalArgumentException(LocalizedStrings.CachedDeserializableFactory_COULD_NOT_CALCULATE_SIZE_OF_OBJECT.toLocalizedString());      ex2.initCause(ex);      throw ex2;    }  }  return result;}  }
class C{  public static void clearInternalFlags(IngestionRequestContext requestContext,BlockObject blockObject,Set<DataObject> updatedObjects,DbClient dbClient){  _logger.info("clearInternalFlags for blockObject " + blockObject.forDisplay());  boolean isVplexBackendVolume=false;  boolean isRPVolume=false;  UnManagedVolume unManagedVolume=getUnManagedVolumeForBlockObject(blockObject,dbClient);  if (unManagedVolume != null) {    UnManagedVolume loadedUnmanagedVolume=requestContext.findDataObjectByType(UnManagedVolume.class,unManagedVolume.getId(),false);    unManagedVolume=((loadedUnmanagedVolume != null) ? loadedUnmanagedVolume : unManagedVolume);  }  if (unManagedVolume != null) {    isVplexBackendVolume=VolumeIngestionUtil.isVplexBackendVolume(unManagedVolume);    isRPVolume=VolumeIngestionUtil.checkUnManagedResourceIsRecoverPointEnabled(unManagedVolume);    String exportGroupType=unManagedVolume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.EXPORTGROUP_TYPE.toString());    Set<URI> supportedVirtualArrays=new HashSet<URI>();    supportedVirtualArrays.add(blockObject.getVirtualArray());    if (blockObject instanceof Volume && RPHelper.isMetroPointVolume(dbClient,(Volume)blockObject)) {      StringSet vplexBackendVolumes=PropertySetterUtil.extractValuesFromStringSet(SupportedVolumeInformation.VPLEX_BACKEND_VOLUMES.toString(),unManagedVolume.getVolumeInformation());      if (vplexBackendVolumes != null && !vplexBackendVolumes.isEmpty()) {        StringSet vplexBackendVolumeGUIDs=getListofVolumeIds(vplexBackendVolumes);        List<BlockObject> associatedVolumes=getVolumeObjects(vplexBackendVolumeGUIDs,requestContext,dbClient);        for (        BlockObject associatedVolume : associatedVolumes) {          supportedVirtualArrays.add(associatedVolume.getVirtualArray());        }      }    }    StringSet unmanagedExportMasks=unManagedVolume.getUnmanagedExportMasks();    if (null != unmanagedExportMasks && !unmanagedExportMasks.isEmpty()) {      List<URI> unManagedMaskUris=new ArrayList<URI>(Collections2.transform(unmanagedExportMasks,CommonTransformerFunctions.FCTN_STRING_TO_URI));      List<UnManagedExportMask> unManagedMasks=new ArrayList<UnManagedExportMask>();      for (      URI uri : unManagedMaskUris) {        UnManagedExportMask uem=requestContext.findDataObjectByType(UnManagedExportMask.class,uri,true);        if (uem != null) {          unManagedMasks.add(uem);        }      }      for (      UnManagedExportMask unManagedExportMask : unManagedMasks) {        Map<URI,ExportMask> exportMaskMap=new HashMap<URI,ExportMask>();        List<URI> initiatorUris=new ArrayList<URI>(Collections2.transform(unManagedExportMask.getKnownInitiatorUris(),CommonTransformerFunctions.FCTN_STRING_TO_URI));        for (        URI ini : initiatorUris) {          List<URI> exportMaskUris=dbClient.queryByConstraint(AlternateIdConstraint.Factory.getExportMaskInitiatorConstraint(ini.toString()));          if (null == exportMaskUris) {            continue;          }          for (          URI eMaskUri : exportMaskUris) {            ExportMask eMask=requestContext.findDataObjectByType(ExportMask.class,eMaskUri,true);            if (null != eMask && eMask.getStorageDevice().equals(unManagedExportMask.getStorageSystemUri())) {              if (!exportMaskMap.containsKey(eMaskUri)) {                _logger.info("Found Mask {} with matching initiator and matching Storage System",eMaskUri);                exportMaskMap.put(eMaskUri,eMask);              }            } else {              _logger.info("Found Mask {} with matching initiator and unmatched Storage System. Skipping mask",eMaskUri);            }          }        }        Set<ExportGroup> exportGroups=new HashSet<ExportGroup>();        for (        ExportMask exportMask : exportMaskMap.values()) {          String normalizedWWN=BlockObject.normalizeWWN(blockObject.getWWN());          if (null == normalizedWWN) {            throw IngestionException.exceptions.exportedVolumeIsMissingWwn(unManagedVolume.getLabel());          }          boolean foundExportMask=false;          if (exportMask.hasAnyExistingVolumes() && exportMask.getExistingVolumes().containsKey(normalizedWWN)) {            _logger.info("Removing block object {} from existing volumes and adding to user created volumes of export mask {}",blockObject.getNativeGuid(),exportMask.getMaskName());            exportMask.removeFromExistingVolumes(blockObject);            exportMask.addToUserCreatedVolumes(blockObject);            updatedObjects.add(exportMask);            foundExportMask=true;            exportGroups.addAll(ExportMaskUtils.getExportGroups(dbClient,exportMask));          }          if (foundExportMask) {            _logger.info("breaking relationship between UnManagedExportMask {} and UnManagedVolume {}",unManagedExportMask.getMaskName(),unManagedVolume.forDisplay());            unManagedVolume.getUnmanagedExportMasks().remove(unManagedExportMask.getId().toString());            unManagedExportMask.getUnmanagedVolumeUris().remove(unManagedVolume.getId().toString());            updatedObjects.add(unManagedExportMask);          }        }        boolean isJournalExport=false;        if (unManagedExportMask.getMaskName().toLowerCase().contains(RP_JOURNAL)) {          isJournalExport=true;        }        _logger.info("exportGroupType is " + exportGroupType);        URI computeResource=requestContext.getCluster() != null ? requestContext.getCluster() : requestContext.getHost();        _logger.info("computeResource is " + computeResource);        for (        ExportGroup exportGroup : exportGroups) {          _logger.info("Processing exportGroup {} to add block object",exportGroup.forDisplay());          _logger.info("exportGroup.getType() is " + exportGroup.getType());          boolean exportGroupTypeMatches=(null != exportGroupType) && exportGroupType.equalsIgnoreCase(exportGroup.getType());          boolean isRPJournalExportGroup=exportGroup.checkInternalFlags(Flag.RECOVERPOINT_JOURNAL);          if (isJournalExport && !isRPJournalExportGroup) {            _logger.info("Block object is associated with RP journal mask but export group is not marked for RP journals. Not adding to the export group");            continue;          } else           if (!isJournalExport && isRPJournalExportGroup) {            _logger.info("Block object is not associated with RP journal mask but export group is marked for RP journals. Not adding to the export group");            continue;          }          if (exportGroup.getProject().getURI().equals(getBlockProject(blockObject)) && supportedVirtualArrays.contains(exportGroup.getVirtualArray()) && (exportGroupTypeMatches || isVplexBackendVolume)) {            ExportGroup loadedExportGroup=requestContext.findDataObjectByType(ExportGroup.class,exportGroup.getId(),false);            if (loadedExportGroup == null) {              loadedExportGroup=requestContext.findExportGroup(exportGroup.getLabel(),exportGroup.getProject().getURI(),exportGroup.getVirtualArray(),computeResource,exportGroup.getType());            }            if (loadedExportGroup != null) {              _logger.info("Adding block object {} to already-loaded export group {}",blockObject.getNativeGuid(),loadedExportGroup.getLabel());              exportGroup=loadedExportGroup;            } else {              _logger.info("Adding block object {} to newly-loaded export group {}",blockObject.getNativeGuid(),exportGroup.getLabel());              updatedObjects.add(exportGroup);            }            exportGroup.addVolume(blockObject.getId(),ExportGroup.LUN_UNASSIGNED);          }        }      }    } else {      _logger.info("No unmanaged export masks found for the unmanaged volume {}",unManagedVolume.getNativeGuid());    }    if (canDeleteUnManagedVolume(unManagedVolume)) {      _logger.info("Set unmanaged volume inactive: {}",unManagedVolume.forDisplay());      unManagedVolume.setInactive(true);      requestContext.getUnManagedVolumesToBeDeleted().add(unManagedVolume);    } else {      updatedObjects.add(unManagedVolume);    }  } else {    _logger.info("No unmanaged volume found for the block object {}",blockObject.getNativeGuid());  }  blockObject.clearInternalFlags(BlockIngestOrchestrator.INTERNAL_VOLUME_FLAGS);  if (getRPUnmanagedVolume(unManagedVolume,dbClient) == null) {    clearSnapshotSessionsFlags(blockObject,updatedObjects,dbClient);  }  if ((blockObject instanceof Volume) && (isVplexBackendVolume || isRPVolume)) {    blockObject.addInternalFlags(Flag.INTERNAL_OBJECT);  }}  }
class C{  private JsonObject readConfig(){  File newCfg=new File(ClientProxy.ROOT,"mcef2.new");  File cfgFle=new File(ClientProxy.ROOT,"mcef2.json");  boolean ok=Util.download("config2.json",newCfg,null);  Mirror.reset();  if (ok) {    Util.delete(cfgFle);    if (newCfg.renameTo(cfgFle))     return readConfig(cfgFle); else {      Log.warning("Couldn't rename mcef2.new to mcef2.json.");      return readConfig(newCfg);    }  } else {    Log.warning("Couldn't read remote config. Using local configuration file.");    return readConfig(cfgFle);  }}  }
class C{  public GeyserProcessor(Server server){  super(server);}  }
class C{  void log(Transaction t,long logId,int mapId,Object key,Object oldValue){  Long undoKey=getOperationId(t.getId(),logId);  Object[] log=new Object[]{mapId,key,oldValue};synchronized (undoLog) {    if (logId == 0) {      if (undoLog.containsKey(undoKey)) {        throw DataUtils.newIllegalStateException(DataUtils.ERROR_TOO_MANY_OPEN_TRANSACTIONS,"An old transaction with the same id " + "is still open: {0}",t.getId());      }    }    undoLog.put(undoKey,log);  }}  }
class C{  public static String toString(JSONArray names,JSONArray ja) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  StringBuffer sb=new StringBuffer();  for (int i=0; i < ja.length(); i+=1) {    JSONObject jo=ja.optJSONObject(i);    if (jo != null) {      sb.append(rowToString(jo.toJSONArray(names)));    }  }  return sb.toString();}  }
class C{  private boolean checkOverride(Environment env,MemberDefinition method,ClassDeclaration clazz){  boolean success=true;  if (!isMethod()) {    throw new CompilerError("checkOverride(), expected method");  }  if (isSynthetic()) {    if (method.isFinal() || (!method.isConstructor() && !method.isStatic() && !isStatic())) {    }    return true;  }  if (getName() != method.getName() || !getType().equalArguments(method.getType())) {    throw new CompilerError("checkOverride(), signature mismatch");  }  if (method.isStatic() && !isStatic()) {    reportError(env,"override.static.with.instance",clazz,method);    success=false;  }  if (!method.isStatic() && isStatic()) {    reportError(env,"hide.instance.with.static",clazz,method);    success=false;  }  if (method.isFinal()) {    reportError(env,"override.final.method",clazz,method);    success=false;  }  if (method.reportDeprecated(env) && !isDeprecated() && this instanceof sun.tools.javac.SourceMember) {    reportError(env,"warn.override.is.deprecated",clazz,method);  }  if (getAccessLevel() > method.getAccessLevel()) {    reportError(env,"override.more.restrictive",clazz,method);    success=false;  }  if (!sameReturnType(method)) {  }  if (!exceptionsFit(env,method)) {    reportError(env,"override.incompatible.exceptions",clazz,method);    success=false;  }  return success;}  }
class C{  private synchronized void writeXMLFile(){  try {    Source source=new DOMSource(doc);    Result result=new StreamResult(userFile);    Transformer xformer=TransformerFactory.newInstance().newTransformer();    xformer.transform(source,result);  } catch (  TransformerConfigurationException e) {    e.printStackTrace();  }catch (  TransformerException e) {    e.printStackTrace();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:33.710 -0400",hash_original_method="DF2C39BEED6B604C45F0C32200E0C6A6",hash_generated_method="74F4634D63FEE77A6C7C423A9EEA0729") public ReflectiveOperationException(String message){  super(message);}  }
class C{  public static CGPoint ccpMult(final CGPoint v,final float s){  return ccp(v.x * s,v.y * s);}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,Node[] trees,int nbatches) throws Exception {  int ncycles=trees.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(trees[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  void findBB(){  if (nvert <= 0) {    return;  }  float v[]=vert;  float _xmin=v[0], _xmax=_xmin;  float _ymin=v[1], _ymax=_ymin;  float _zmin=v[2], _zmax=_zmin;  for (int i=nvert * 3; (i-=3) > 0; ) {    float x=v[i];    if (x < _xmin) {      _xmin=x;    }    if (x > _xmax) {      _xmax=x;    }    float y=v[i + 1];    if (y < _ymin) {      _ymin=y;    }    if (y > _ymax) {      _ymax=y;    }    float z=v[i + 2];    if (z < _zmin) {      _zmin=z;    }    if (z > _zmax) {      _zmax=z;    }  }  this.xmax=_xmax;  this.xmin=_xmin;  this.ymax=_ymax;  this.ymin=_ymin;  this.zmax=_zmax;  this.zmin=_zmin;}  }
class C{  public boolean isRoot(){  return (getParent() == null);}  }
class C{  public AggregateFilter clone(){  AggregateFilter result=new AggregateFilter();  result.StartTime=StartTime;  result.AggregateType=AggregateType;  result.ProcessingInterval=ProcessingInterval;  result.AggregateConfiguration=AggregateConfiguration == null ? null : AggregateConfiguration.clone();  return result;}  }
class C{  public void dismiss(){  dismissInternal(false);}  }
class C{  public static void main(String[] args){  AnonymousClassTest act=new AnonymousClassTest();  act.returnTypePass();  act.argumentTypePass();  act.argumentTypeFail();  act.returnTypeFail();}  }
class C{  public Statement likeContains(String keyword){  return like('%' + keyword + '%');}  }
class C{  private void update(long timeFactor){  if (lastUpdate < timeFactor - nbElements)   lastUpdate=timeFactor - nbElements - 1;  if (values != null) {    for (long i=lastUpdate + 1; i <= timeFactor; i++) {      values[(int)(i % nbElements)]=0;    }    values[(int)((timeFactor + 1) % nbElements)]=0;  }  lastUpdate=timeFactor;}  }
class C{  public Polygon2D smooth(float amount,float baseWeight){  Vec2D centroid=getCentroid();  int num=vertices.size();  List<Vec2D> filtered=new ArrayList<Vec2D>(num);  for (int i=0, j=num - 1, k=1; i < num; i++) {    Vec2D a=vertices.get(i);    Vec2D dir=vertices.get(j).sub(a).addSelf(vertices.get(k).sub(a)).addSelf(a.sub(centroid).scaleSelf(baseWeight));    filtered.add(a.add(dir.scaleSelf(amount)));    j++;    if (j == num) {      j=0;    }    k++;    if (k == num) {      k=0;    }  }  vertices.clear();  vertices.addAll(filtered);  return this;}  }
class C{  public static GefaehrdungsUmsetzung createScenario(BausteinUmsetzung parent,Gefaehrdung gef,String language){  GefaehrdungsUmsetzung scenario=build(parent,gef,language);  return scenario;}  }
class C{  public static String checkNotEmpty(String string){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && TextUtils.isEmpty(string)) {    throw new IllegalArgumentException();  }  return string;}  }
class C{  public BorderLayout(){  this(0,0);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected int extension_button_presentation(int button_pres){  return button_pres;}  }
class C{  public Future<SyncReply> sendRequest(int xid,SyncMessage request) throws RemoteStoreException {  ensureConnected();  RemoteSyncFuture future=new RemoteSyncFuture(xid,connectionGeneration);  futureMap.put(Integer.valueOf(xid),future);  if (futureMap.size() > MAX_PENDING_REQUESTS) {synchronized (futureNotify) {      while (futureMap.size() > MAX_PENDING_REQUESTS) {        try {          futureNotify.wait();        } catch (        InterruptedException e) {          throw new RemoteStoreException("Could not send request",e);        }      }    }  }  channel.write(request);  return future;}  }
class C{  protected void pi(String target,String body) throws SAXException {  mHandCont.processingInstruction(target,body);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void addAddition(String addition){  LocalDate additionDate=parseDateFormat(addition);  additions.add(additionDate);  MapUtils.getSet(additionDate,dateStats).add(this.getId());}  }
class C{  public Builder deleteTitle(){  deleteFields.add("title");  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Builder txTimeStart(long time){  this.innerStartTimeInNanos=time;  return this;}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  @Override @AfterMethod void afterMethod() throws Throwable {  serverCtx.execute(null);  clientCtx.execute(null);  await(0,2);  clientCtx.close();  super.afterMethod();}  }
class C{  public final int bitIndex(){  return _bitIndex;}  }
class C{  private int findBound(final int[] query,boolean isSource,boolean lowerBound,int startFrom){  int[] sa=isSource ? this.srcSuffixArray : this.tgtSuffixArray;  return findBound(query,isSource,lowerBound,startFrom,sa.length - 1);}  }
class C{  protected CCSpeed(CCIntervalAction action,float r){  other=action;  speed=r;}  }
class C{  public void init(CipherParameters param){  if (param instanceof ParametersWithRandom) {    ParametersWithRandom p=(ParametersWithRandom)param;    if (!(p.getParameters() instanceof ECPublicKeyParameters)) {      throw new IllegalArgumentException("ECPublicKeyParameters are required for new public key transform.");    }    this.key=(ECPublicKeyParameters)p.getParameters();    this.random=p.getRandom();  } else {    if (!(param instanceof ECPublicKeyParameters)) {      throw new IllegalArgumentException("ECPublicKeyParameters are required for new public key transform.");    }    this.key=(ECPublicKeyParameters)param;    this.random=new SecureRandom();  }}  }
class C{  @Override public void drawRangeMarker(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Marker marker,Rectangle2D dataArea){  Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());  if (marker instanceof ValueMarker) {    ValueMarker vm=(ValueMarker)marker;    double value=vm.getValue();    Range range=axis.getRange();    if (!range.contains(value)) {      return;    }    GeneralPath path=null;    PlotOrientation orientation=plot.getOrientation();    if (orientation == PlotOrientation.HORIZONTAL) {      float x=(float)axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());      float y=(float)adjusted.getMaxY();      path=new GeneralPath();      path.moveTo(x,y);      path.lineTo((float)(x + getXOffset()),y - (float)getYOffset());      path.lineTo((float)(x + getXOffset()),(float)(adjusted.getMinY() - getYOffset()));      path.lineTo(x,(float)adjusted.getMinY());      path.closePath();    } else     if (orientation == PlotOrientation.VERTICAL) {      float y=(float)axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());      float x=(float)dataArea.getX();      path=new GeneralPath();      path.moveTo(x,y);      path.lineTo(x + (float)this.xOffset,y - (float)this.yOffset);      path.lineTo((float)(adjusted.getMaxX() + this.xOffset),y - (float)this.yOffset);      path.lineTo((float)(adjusted.getMaxX()),y);      path.closePath();    }    g2.setPaint(marker.getPaint());    g2.fill(path);    g2.setPaint(marker.getOutlinePaint());    g2.draw(path);  } else {    super.drawRangeMarker(g2,plot,axis,marker,adjusted);  }}  }
class C{  @Override public boolean isRowAvailable(){  if (array == null) {    return (false);  } else   if ((index >= 0) && (index < array.length)) {    return (true);  } else {    return (false);  }}  }
class C{  public void clear(){  bitset.clear();  numberOfAddedElements=0;}  }
class C{  @Deprecated public static void dragViewToTop(ActivityInstrumentationTestCase test,View v){  dragViewToTop((InstrumentationTestCase)test,v,4);}  }
class C{  public static WindowActionEvent createWindowClosingEvent(Window.ClosingEvent event){  return new WindowActionEvent(event,WindowAction.CLOSING);}  }
class C{  protected void sendMessage(boolean closed){  log.debug("*** sendMessage ***");  if (getInverted()) {    closed=!closed;  }  TamsMessage m=new TamsMessage("xT " + _number + ","+ (closed ? "r" : "g")+ ",1");  tc.sendTamsMessage(m,this);}  }
class C{  public void appendNodes(NodeSet nodes){  int nNodes=nodes.size();  if (null == m_map) {    m_mapSize=nNodes + m_blocksize;    m_map=new Node[m_mapSize];  } else   if ((m_firstFree + nNodes) >= m_mapSize) {    m_mapSize+=(nNodes + m_blocksize);    Node newMap[]=new Node[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + nNodes);    m_map=newMap;  }  System.arraycopy(nodes.m_map,0,m_map,m_firstFree,nNodes);  m_firstFree+=nNodes;}  }
class C{  protected void notifyModified(){  if (updateCounter.get() > 0) {    return;  }  if (modified) {    updateVersion();    lastModified=System.currentTimeMillis();  }  if (modified && storage != null) {    if (!storage.save(this)) {      log.error("Could not store shared object.");    }  }  sendUpdates();  modified=false;}  }
class C{  public void addField(Field field){  getFields().add(field);}  }
class C{  public Z21Reply(byte[] a,int l){  super();  _nDataChars=l;  setBinary(true);  for (int i=0; i < _nDataChars; i++) {    _dataChars[i]=a[i];  }}  }
class C{  public void accept(AmqpSession txnSession) throws Exception {  accept(txnSession,true);}  }
class C{  public void testFileDual() throws Exception {  start();  igfsPrimary.create(FILE_RMT,true).close();  checkEvictionPolicy(0,0);  int blockSize=igfsPrimary.info(FILE_RMT).blockSize();  append(FILE_RMT,blockSize);  checkEvictionPolicy(1,blockSize);  append(FILE_RMT,blockSize);  checkEvictionPolicy(2,blockSize * 2);  read(FILE_RMT,0,blockSize);  checkEvictionPolicy(2,blockSize * 2);}  }
class C{  void updateIdealPointAndIntercepts(Solution solution){  if (!solution.violatesConstraints()) {    for (int j=0; j < problem.getNumberOfObjectives(); j++) {      idealPoint[j]=Math.min(idealPoint[j],solution.getObjective(j));      intercepts[j]=Math.max(intercepts[j],solution.getObjective(j));    }    Population feasibleSolutions=getFeasibleSolutions(population);    feasibleSolutions.add(solution);    Population nondominatedSolutions=getNondominatedFront(feasibleSolutions);    if (!nondominatedSolutions.isEmpty()) {      Population extremePoints=new Population();      for (int i=0; i < problem.getNumberOfObjectives(); i++) {        extremePoints.add(largestObjectiveValue(i,nondominatedSolutions));      }      if (numberOfUniqueSolutions(extremePoints) != problem.getNumberOfObjectives()) {        for (int i=0; i < problem.getNumberOfObjectives(); i++) {          intercepts[i]=extremePoints.get(i).getObjective(i);        }      } else {        try {          RealMatrix b=new Array2DRowRealMatrix(problem.getNumberOfObjectives(),1);          RealMatrix A=new Array2DRowRealMatrix(problem.getNumberOfObjectives(),problem.getNumberOfObjectives());          for (int i=0; i < problem.getNumberOfObjectives(); i++) {            b.setEntry(i,0,1.0);            for (int j=0; j < problem.getNumberOfObjectives(); j++) {              A.setEntry(i,j,extremePoints.get(i).getObjective(j));            }          }          double numerator=new LUDecomposition(A).getDeterminant();          b.scalarMultiply(numerator);          RealMatrix normal=MatrixUtils.inverse(A).multiply(b);          for (int i=0; i < problem.getNumberOfObjectives(); i++) {            intercepts[i]=numerator / normal.getEntry(i,0);            if (intercepts[i] <= 0 || Double.isNaN(intercepts[i]) || Double.isInfinite(intercepts[i])) {              intercepts[i]=extremePoints.get(i).getObjective(i);            }          }        } catch (        RuntimeException e) {          for (int i=0; i < problem.getNumberOfObjectives(); i++) {            intercepts[i]=extremePoints.get(i).getObjective(i);          }        }      }    }  }}  }
class C{  public static void boot(){}  }
class C{  public UAX29URLEmailTokenizerImpl(java.io.Reader in){  this.zzReader=in;}  }
class C{  public static void clearMirrorsFlags(IngestionRequestContext requestContext,Volume volume,Set<DataObject> updatedObjects,DbClient dbClient){  if (volume.getMirrors() != null) {    for (    String volumeId : volume.getMirrors()) {      BlockObject bo=requestContext.findDataObjectByType(BlockMirror.class,URI.create(volumeId),true);      if (null != bo && bo instanceof BlockMirror) {        _logger.info("Clearing internal volume flag of mirror {} of RP volume {}",bo.getLabel(),volume.getLabel());        bo.clearInternalFlags(BlockIngestOrchestrator.INTERNAL_VOLUME_FLAGS);        updatedObjects.add(bo);      }    }  }}  }
class C{  private void calculateNoise(double[] arrayIn,int nx,int ny){  DoubleArrayPointer array=new DoubleArrayPointer(arrayIn);  initializeNoise();  if (nx < MINIMUM_PIXEL_WIDTH) {    nx=nx * ny;    ny=1;  }  if (calculateNoiseShortRow(array,nx,ny)) {    return;  }  DoubleArrayPointer rowpix;  int nrows=0, nrows2=0;  long ngoodpix=0;  double[] differences2=new double[nx];  double[] differences3=new double[nx];  double[] differences5=new double[nx];  double[] diffs2=new double[ny];  double[] diffs3=new double[ny];  double[] diffs5=new double[ny];  for (int jj=0; jj < ny; jj++) {    rowpix=array.copy(jj * nx);    int ii=0;    ii=findNextValidPixelWithNullCheck(nx,rowpix,ii);    if (ii == nx) {      continue;    }    double v1=getNextPixelAndCheckMinMax(rowpix,ii);    ngoodpix++;    ii=findNextValidPixelWithNullCheck(nx,rowpix,++ii);    if (ii == nx) {      continue;    }    double v2=getNextPixelAndCheckMinMax(rowpix,ii);    ngoodpix++;    ii=findNextValidPixelWithNullCheck(nx,rowpix,++ii);    if (ii == nx) {      continue;    }    double v3=getNextPixelAndCheckMinMax(rowpix,ii);    ngoodpix++;    ii=findNextValidPixelWithNullCheck(nx,rowpix,++ii);    if (ii == nx) {      continue;    }    double v4=getNextPixelAndCheckMinMax(rowpix,ii);    ngoodpix++;    ii=findNextValidPixelWithNullCheck(nx,rowpix,++ii);    if (ii == nx) {      continue;    }    double v5=getNextPixelAndCheckMinMax(rowpix,ii);    ngoodpix++;    ii=findNextValidPixelWithNullCheck(nx,rowpix,++ii);    if (ii == nx) {      continue;    }    double v6=getNextPixelAndCheckMinMax(rowpix,ii);    ngoodpix++;    ii=findNextValidPixelWithNullCheck(nx,rowpix,++ii);    if (ii == nx) {      continue;    }    double v7=getNextPixelAndCheckMinMax(rowpix,ii);    ngoodpix++;    ii=findNextValidPixelWithNullCheck(nx,rowpix,++ii);    if (ii == nx) {      continue;    }    double v8=getNextPixelAndCheckMinMax(rowpix,ii);    ngoodpix++;    int nvals=0;    int nvals2=0;    for (ii++; ii < nx; ii++) {      ii=findNextValidPixelWithNullCheck(nx,rowpix,ii);      if (ii == nx) {        continue;      }      double v9=getNextPixelAndCheckMinMax(rowpix,ii);      if (!(v5 == v6 && v6 == v7)) {        differences2[nvals2]=Math.abs(v5 - v7);        nvals2++;      }      if (!(v3 == v4 && v4 == v5 && v5 == v6 && v6 == v7)) {        differences3[nvals]=Math.abs(2 * v5 - v3 - v7);        differences5[nvals]=Math.abs(N6 * v5 - N4 * v3 - N4 * v7 + v1 + v9);        nvals++;      } else {        ngoodpix++;      }      v1=v2;      v2=v3;      v3=v4;      v4=v5;      v5=v6;      v6=v7;      v7=v8;      v8=v9;    }    ngoodpix+=nvals;    if (nvals == 0) {      continue;    } else     if (nvals == 1) {      if (nvals2 == 1) {        diffs2[nrows2]=differences2[0];        nrows2++;      }      diffs3[nrows]=differences3[0];      diffs5[nrows]=differences5[0];    } else {      if (nvals2 > 1) {        diffs2[nrows2]=quickSelect(differences2,nvals);        nrows2++;      }      diffs3[nrows]=quickSelect(differences3,nvals);      diffs5[nrows]=quickSelect(differences5,nvals);    }    nrows++;  }  computeMedianOfValuesEachRow(nrows,nrows2,diffs2,diffs3,diffs5);  setNoiseResult(ngoodpix);}  }
class C{  public void clear(){  m_nodeTuples.invalidateAll();  m_edgeTuples.invalidateAll();  super.clear();  m_links.clear();}  }
class C{  @Override public void requestThrottleSetup(LocoAddress address,boolean control){  Z21XNetThrottle throttle;  if (log.isDebugEnabled()) {    log.debug("Requesting Throttle: " + address);  }  if (throttles.containsKey(address)) {    notifyThrottleKnown(throttles.get(address),address);  } else {    throttle=new Z21XNetThrottle((XNetSystemConnectionMemo)adapterMemo,address,tc);    throttles.put(address,throttle);    notifyThrottleKnown(throttle,address);  }}  }
class C{  public static GeoTimeSerie timeshift(GeoTimeSerie gts,long delta){  GeoTimeSerie shifted=gts.clone();  for (int i=0; i < shifted.values; i++) {    shifted.ticks[i]=shifted.ticks[i] + delta;  }  if (isBucketized(shifted)) {    shifted.lastbucket=shifted.lastbucket + delta;  }  return shifted;}  }
class C{  public static Image loadImage(URL imageURL,boolean flipIt){  try {    BufferedImage bImage=ImageIO.read(imageURL);    if (bImage == null) {      System.out.println("Unable to read image.");      return (null);    }    Image image=convertToArdor3DImage(bImage,flipIt);    return (image);  } catch (  Exception e) {    System.out.println("Unable to read image, see log.");    e.printStackTrace();    return (null);  }}  }
class C{  private void verifyUserIsAuthorizedForRequest(Project project,VirtualPool vpool,VirtualArray varray){  StorageOSUser user=getUserFromContext();  if (!(_permissionsHelper.userHasGivenRole(user,project.getTenantOrg().getURI(),Role.TENANT_ADMIN) || _permissionsHelper.userHasGivenACL(user,project.getId(),ACL.OWN,ACL.ALL))) {    throw APIException.forbidden.insufficientPermissionsForUser(user.getName());  }  URI vipr_tenantId=URI.create(user.getTenantId());  _permissionsHelper.checkTenantHasAccessToVirtualPool(vipr_tenantId,vpool);  _permissionsHelper.checkTenantHasAccessToVirtualArray(vipr_tenantId,varray);}  }
class C{  @AssistedInject public UserDirectoryResource(@Assisted UserContext userContext,@Assisted Directory<User> directory,DirectoryObjectTranslator<User,APIUser> translator,DirectoryObjectResourceFactory<User,APIUser> resourceFactory){  super(userContext,directory,translator,resourceFactory);}  }
class C{  public void flip(int bitIndex){  int i=bitIndex >> 6;  ensureCapacity(i + 1);  bits[i]^=1L << bitIndex;}  }
class C{  public String processName(){  return Messages.process_name;}  }
class C{  private boolean isValidType(Token t){  return textArea.getMarkOccurrencesOfTokenType(t.type);}  }
class C{  public void index() throws IOException {  init();  df.setMaximumFractionDigits(3);  HashSet<Integer> docIDs=selectVocabularyDocs();  KMeans k;  if (useParallelClustering)   k=new ParallelKMeans(numClusters); else   k=new KMeans(numClusters);  LinkedList<double[]> features=new LinkedList<double[]>();  Bits liveDocs=MultiFields.getLiveDocs(reader);  for (Iterator<Integer> iterator=docIDs.iterator(); iterator.hasNext(); ) {    int nextDoc=iterator.next();    if (reader.hasDeletions() && !liveDocs.get(nextDoc))     continue;    Document d=reader.document(nextDoc);    features.clear();    IndexableField[] fields=d.getFields(localFeatureFieldName);    String file=d.getValues(DocumentBuilder.FIELD_NAME_IDENTIFIER)[0];    for (int j=0; j < fields.length; j++) {      LireFeature f=getFeatureInstance();      f.setByteArrayRepresentation(fields[j].binaryValue().bytes,fields[j].binaryValue().offset,fields[j].binaryValue().length);      double[] feat=new double[f.getDoubleHistogram().length];      System.arraycopy(f.getDoubleHistogram(),0,feat,0,feat.length);      features.add(f.getDoubleHistogram());    }    k.addImage(file,features);  }  if (pm != null) {    pm.setProgress(5);    pm.setNote("Starting clustering");  }  if (k.getFeatureCount() < numClusters) {    throw new UnsupportedOperationException("Only " + features.size() + " features found to cluster in "+ numClusters+ ". Try to use less clusters or more images.");  }  System.out.println("Number of local features: " + df.format(k.getFeatureCount()));  System.out.println("Starting clustering ...");  k.init();  System.out.println("Step.");  double time=System.currentTimeMillis();  double laststress=k.clusteringStep();  if (pm != null) {    pm.setProgress(8);    pm.setNote("Step 1 finished");  }  System.out.println(getDuration(time) + " -> Next step.");  time=System.currentTimeMillis();  double newStress=k.clusteringStep();  if (pm != null) {    pm.setProgress(11);    pm.setNote("Step 2 finished");  }  double threshold=Math.max(20d,(double)k.getFeatureCount() / 1000d);  System.out.println("Threshold = " + df.format(threshold));  int cstep=3;  while (Math.abs(newStress - laststress) > threshold && cstep < 12) {    System.out.println(getDuration(time) + " -> Next step. Stress difference ~ |" + (int)newStress+ " - "+ (int)laststress+ "| = "+ df.format(Math.abs(newStress - laststress)));    time=System.currentTimeMillis();    laststress=newStress;    newStress=k.clusteringStep();    if (pm != null) {      pm.setProgress(cstep * 3 + 5);      pm.setNote("Step " + cstep + " finished");    }    cstep++;  }  clusters=k.getClusters();  Cluster.writeClusters(clusters,clusterFile);  System.out.println("Creating histograms ...");  time=System.currentTimeMillis();  IndexWriter iw=LuceneUtils.createIndexWriter(((DirectoryReader)reader).directory(),true,LuceneUtils.AnalyzerType.WhitespaceAnalyzer,256d);  if (pm != null) {    pm.setProgress(50);    pm.setNote("Clustering finished");  }  LinkedList<Thread> threads=new LinkedList<Thread>();  int numThreads=8;  int step=reader.maxDoc() / numThreads;  for (int part=0; part < numThreads; part++) {    Indexer indexer=null;    if (part < numThreads - 1)     indexer=new Indexer(part * step,(part + 1) * step,iw,null); else     indexer=new Indexer(part * step,reader.maxDoc(),iw,pm);    Thread t=new Thread(indexer);    threads.add(t);    t.start();  }  for (Iterator<Thread> iterator=threads.iterator(); iterator.hasNext(); ) {    Thread next=iterator.next();    try {      next.join();    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  if (pm != null) {    pm.setProgress(95);    pm.setNote("Indexing finished, optimizing index now.");  }  System.out.println(getDuration(time));  iw.commit();  iw.forceMerge(1);  iw.close();  if (pm != null) {    pm.setProgress(100);    pm.setNote("Indexing & optimization finished");    pm.close();  }  System.out.println("Finished.");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:05.492 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return 0;}  }
class C{  public void deleteAllDistributionPreferences(org.hibernate.Session hibSession){  for (Iterator i1=getInstrOfferingConfigs().iterator(); i1.hasNext(); ) {    InstrOfferingConfig cfg=(InstrOfferingConfig)i1.next();    for (Iterator i2=cfg.getSchedulingSubparts().iterator(); i2.hasNext(); ) {      SchedulingSubpart ss=(SchedulingSubpart)i2.next();      ss.deleteAllDistributionPreferences(hibSession);    }  }}  }
class C{  private Session currentSession(){  return sessionFactory.getCurrentSession();}  }
class C{  public boolean allShardsStarted(){  return allShardsStarted;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public String auditStack(Set activeCallIDs,long leakedDialogTimer,long leakedTransactionTimer){  String auditReport=null;  String leakedDialogs=auditDialogs(activeCallIDs,leakedDialogTimer);  String leakedServerTransactions=auditTransactions(serverTransactionTable,leakedTransactionTimer);  String leakedClientTransactions=auditTransactions(clientTransactionTable,leakedTransactionTimer);  if (leakedDialogs != null || leakedServerTransactions != null || leakedClientTransactions != null) {    auditReport="SIP Stack Audit:\n" + (leakedDialogs != null ? leakedDialogs : "") + (leakedServerTransactions != null ? leakedServerTransactions : "")+ (leakedClientTransactions != null ? leakedClientTransactions : "");  }  return auditReport;}  }
class C{  private static Address copyArrayToBootImage(int arrayCount,Address arrayImageAddress,Object jdkObject,Class<?> jdkType,RVMArray rvmArrayType,boolean allocOnly,Address overwriteAddress,Object parentObject,boolean untraced) throws IllegalAccessException {  if (verbosity.isAtLeast(DETAILED)) {    if (depth == DEPTH_CUTOFF)     say(SPACES.substring(0,depth + 1),"TOO DEEP: cutting off"); else     if (depth < DEPTH_CUTOFF) {      String tab=SPACES.substring(0,depth + 1);      if (depth == 0 && jtocCount >= 0)       tab=tab + "jtoc #" + String.valueOf(jtocCount)+ ": ";      int arraySize=rvmArrayType.getInstanceSize(arrayCount);      say(tab,"Copying array  ",jdkType.getName(),"   length=",String.valueOf(arrayCount),(arraySize >= LARGE_ARRAY_SIZE) ? " large object!!!" : "");    }  }  RVMType rvmElementType=rvmArrayType.getElementType();  if (rvmElementType.isPrimitiveType()) {    if (rvmElementType.equals(RVMType.BooleanType)) {      boolean[] values=(boolean[])jdkObject;      for (int i=0; i < arrayCount; ++i)       bootImage.setByte(arrayImageAddress.plus(i),values[i] ? 1 : 0);    } else     if (rvmElementType.equals(RVMType.ByteType)) {      byte[] values=(byte[])jdkObject;      for (int i=0; i < arrayCount; ++i)       bootImage.setByte(arrayImageAddress.plus(i),values[i]);    } else     if (rvmElementType.equals(RVMType.CharType)) {      char[] values=(char[])jdkObject;      for (int i=0; i < arrayCount; ++i)       bootImage.setHalfWord(arrayImageAddress.plus(i << LOG_BYTES_IN_CHAR),values[i]);    } else     if (rvmElementType.equals(RVMType.ShortType)) {      short[] values=(short[])jdkObject;      for (int i=0; i < arrayCount; ++i)       bootImage.setHalfWord(arrayImageAddress.plus(i << LOG_BYTES_IN_SHORT),values[i]);    } else     if (rvmElementType.equals(RVMType.IntType)) {      int[] values=(int[])jdkObject;      for (int i=0; i < arrayCount; ++i)       bootImage.setFullWord(arrayImageAddress.plus(i << LOG_BYTES_IN_INT),values[i]);    } else     if (rvmElementType.equals(RVMType.LongType)) {      long[] values=(long[])jdkObject;      for (int i=0; i < arrayCount; ++i)       bootImage.setDoubleWord(arrayImageAddress.plus(i << LOG_BYTES_IN_LONG),values[i]);    } else     if (rvmElementType.equals(RVMType.FloatType)) {      float[] values=(float[])jdkObject;      for (int i=0; i < arrayCount; ++i)       bootImage.setFullWord(arrayImageAddress.plus(i << LOG_BYTES_IN_FLOAT),Float.floatToIntBits(values[i]));    } else     if (rvmElementType.equals(RVMType.DoubleType)) {      double[] values=(double[])jdkObject;      for (int i=0; i < arrayCount; ++i)       bootImage.setDoubleWord(arrayImageAddress.plus(i << LOG_BYTES_IN_DOUBLE),Double.doubleToLongBits(values[i]));    } else {      fail("unexpected primitive array type: " + rvmArrayType);    }  } else {    boolean isTIB=parentObject instanceof TIB;    Object[] values=(Object[])jdkObject;    Class<?> jdkClass=jdkObject.getClass();    if (!allocOnly) {      for (int i=0; i < arrayCount; ++i) {        if (values[i] != null) {          if (verbosity.isAtLeast(DETAILED))           traceContext.push(values[i].getClass().getName(),jdkClass.getName(),i);          if (isTIB && values[i] instanceof Word) {            bootImage.setAddressWord(arrayImageAddress.plus(i << LOG_BYTES_IN_ADDRESS),(Word)values[i],false,false);          } else           if (isTIB && values[i] == LazyCompilationTrampoline.getInstructions()) {            Address codeAddress=arrayImageAddress.plus(((TIB)parentObject).lazyMethodInvokerTrampolineIndex() << LOG_BYTES_IN_ADDRESS);            bootImage.setAddressWord(arrayImageAddress.plus(i << LOG_BYTES_IN_ADDRESS),codeAddress.toWord(),false,false);          } else {            copyReferenceFieldToBootImage(arrayImageAddress.plus(i << LOG_BYTES_IN_ADDRESS),values[i],jdkObject,!untraced,!untraced,null,null);          }          if (verbosity.isAtLeast(DETAILED))           traceContext.pop();        } else {          bootImage.setNullAddressWord(arrayImageAddress.plus(i << LOG_BYTES_IN_ADDRESS),!untraced,!untraced,true);        }      }    }  }  return arrayImageAddress;}  }
class C{  public void modifyVariableId(String oldNodeId,String newNodeId){  BNode node=nodes.remove(oldNodeId);  chanceNodes.remove(oldNodeId);  utilityNodes.remove(oldNodeId);  actionNodes.remove(oldNodeId);  if (node != null) {    addNode(node);  } else {    log.warning("node " + oldNodeId + " did not exist, cannot change its identifier");  }}  }
class C{  public static Map<String,Object> createDatastoreVolumeParam(DatastoreToVolumeTable table,DatastoreToVolumeParams params,int hluInc){  Map<String,Object> map=new HashMap<String,Object>();  map.putAll(table.getParams());  map.putAll(params.getParams(hluInc));  return map;}  }
class C{  void movePaddle(float arenaX){  float paddleWidth=mPaddle.getXScale() / 2;  final float minX=BORDER_WIDTH + paddleWidth;  final float maxX=ARENA_WIDTH - BORDER_WIDTH - paddleWidth;  if (arenaX < minX) {    arenaX=minX;  } else   if (arenaX > maxX) {    arenaX=maxX;  }  mPaddle.setXPosition(arenaX);}  }
class C{  boolean resolveUnboxing(Expression expression){  return false;}  }
class C{  private PDFObject findResource(String name,String inDict) throws IOException {  if (inDict != null) {    PDFObject in=resources.get(inDict);    if (in == null || in.getType() != PDFObject.DICTIONARY) {      throw new PDFParseException("No dictionary called " + inDict + " found in the resources");    }    return in.getDictRef(name);  } else {    return resources.get(name);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.313 -0500",hash_original_method="6FEFF94D9E21F991F21729F6F5F461A6",hash_generated_method="31282EAB2BB247C7F5C281A556545124") public void drawText(CharSequence text,int start,int end,float x,float y,Paint paint){  if (text instanceof String || text instanceof SpannedString || text instanceof SpannableString) {    native_drawText(mNativeCanvas,text.toString(),start,end,x,y,paint.mBidiFlags,paint.mNativePaint);  } else   if (text instanceof GraphicsOperations) {    ((GraphicsOperations)text).drawText(this,start,end,x,y,paint);  } else {    char[] buf=TemporaryBuffer.obtain(end - start);    TextUtils.getChars(text,start,end,buf,0);    native_drawText(mNativeCanvas,buf,0,end - start,x,y,paint.mBidiFlags,paint.mNativePaint);    TemporaryBuffer.recycle(buf);  }}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public T caseAnonymous_codeLangs_1_(Anonymous_codeLangs_1_ object){  return null;}  }
class C{  private void updateTopStackMethodCall(int branch,int bytecode_id,double true_distance,double false_distance){  if (traceCalls) {    if (stack.isEmpty()) {      return;    }    stack.peek().branchTrace.add(branch);    stack.peek().trueDistanceTrace.add(true_distance);    stack.peek().falseDistanceTrace.add(false_distance);    assert ((true_distance == 0.0) || (false_distance == 0.0));    if (ArrayUtil.contains(Properties.CRITERION,Criterion.DEFUSE) || ArrayUtil.contains(Properties.CRITERION,Criterion.ALLDEFS)) {      stack.peek().defuseCounterTrace.add(duCounter);    }  }}  }
class C{  public String encodedUsername(){  if (username.isEmpty())   return "";  int usernameStart=scheme.length() + 3;  int usernameEnd=delimiterOffset(url,usernameStart,url.length(),":@");  return url.substring(usernameStart,usernameEnd);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_CASE_ACTIVATION___TRACECASE_ACT_NAME_1:    setTracecase_act_name_1((String)newValue);  return;case UmplePackage.TRACE_CASE_ACTIVATION___ANONYMOUS_TRACE_CASE_ACTIVATION_11:getAnonymous_traceCaseActivation_1_1().clear();getAnonymous_traceCaseActivation_1_1().addAll((Collection<? extends String>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean startPrepMirrorFilePair(URI storage,URI fileshareURI,String policyName,String opId){  TaskCompleter completer=null;  try {    StorageSystem system=dbClient.queryObject(StorageSystem.class,storage);    FileShare fileShare=dbClient.queryObject(FileShare.class,fileshareURI);    List<URI> combined=new ArrayList<URI>();    combined.add(fileshareURI);    if (fileShare.getParentFileShare() != null) {      combined.add(fileShare.getParentFileShare().getURI());    }    completer=new MirrorFileStartTaskCompleter(FileShare.class,fileshareURI,opId,storage);    WorkflowStepCompleter.stepExecuting(opId);    getRemoteMirrorDevice(system).doStartMirrorLink(system,fileShare,completer,policyName);  } catch (  Exception e) {    ServiceError error=DeviceControllerException.errors.jobFailed(e);    if (null != completer) {      completer.error(dbClient,error);    }    WorkflowStepCompleter.stepFailed(opId,error);    return false;  }  return true;}  }
class C{  private static void nota(VBox box,String mensagem,String tipo){  HBox nota=new HBox(label(mensagem,tipo));  nota.getStylesheets().add("br/com/museuid/css/dialog.css");  nota.getChildren().add(close(box,nota));  nota.getStyleClass().add("box-nota");  Animacao.fade(nota,0.5,1,1);  ++qtNotas;  if (qtNotas >= 11) {    box.getChildren().remove(box.getChildren().size() - 1);    --qtNotas;  }  box.getChildren().add(nota);}  }
class C{  public void addClass(@DottedClassName String className,@CheckForNull String sourceFile,boolean isInterface,int size,boolean updatePackageStats){  if (!hasClassStats) {    totalClasses=0;    totalSize=0;  }  hasClassStats=true;  String packageName;  int lastDot=className.lastIndexOf('.');  if (lastDot < 0) {    packageName="";  } else {    packageName=className.substring(0,lastDot);  }  PackageStats stat=getPackageStats(packageName);  stat.addClass(className,sourceFile,isInterface,size,updatePackageStats);  totalClasses++;  totalSize+=size;  totalClassesFromPackageStats=0;  totalSizeFromPackageStats=0;}  }
class C{  public boolean bind() throws VersionException {  boolean bound=false;  if (m_isConnected)   return false;  m_isConnected=true;  m_protocol.addListener(ListenerIndex.PlayerSession,this);  bound=m_protocol.bind();  sendStopWarning();  sendStopOnFault();  sendEnumerateOverride();  sendFailureNotify();  sendInvokeSetters();  sendSwfloadNotify();  sendGetterTimeout();  sendSetterTimeout();  boolean responded=sendSquelch(true,Isolate.DEFAULT_ID);  setPreference(SessionManager.PLAYER_SUPPORTS_GET,playerSupportsGet() ? 1 : 0);  if (supportsConcurrency()) {    sendConcurrentDebugger();  }  if (supportsWideLineNumbers()) {    sendWideLineDebugger();  }  Thread t=new Thread(this,"SWF/SWD reader");  t.setDaemon(true);  t.start();  if (!responded)   throw new VersionException();  return bound;}  }
class C{  public static Object unregisterNamespace(String name){  REnvironment nsreg=RContext.getInstance().stateREnvironment.getNamespaceRegistry();  Object ns=nsreg.get(name);  if (ns != null) {    try {      nsreg.rm(name);    } catch (    PutException ex) {      throw RInternalError.shouldNotReachHere(ex);    }  }  return ns;}  }
class C{  void valueClass(Class<?> valCls){  this.valCls=valCls;}  }
class C{  @Inline public static boolean intTryCompareAndSwap(Object ref,Offset offset,int old,int value){  if (NEEDS_INT_GC_WRITE_BARRIER || NEEDS_INT_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().intTryCompareAndSwap(src,src.toAddress().plus(offset),old,value,offset.toWord(),Word.zero(),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  private void definitionRef(String definitionName,MarkupDocBuilder docBuilder){  buildDefinitionTitle(copyMarkupDocBuilder().crossReference(new DefinitionDocumentResolverDefault().apply(definitionName),definitionName,definitionName).toString(),"ref-" + definitionName,docBuilder);}  }
class C{  public void save(File file) throws IOException {  FileUtil.writeFile(file,getEncodedPrivateKey());}  }
class C{  int doFinal(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws IllegalBlockSizeException, ShortBufferException, BadPaddingException {  if (requireReinit) {    throw new IllegalStateException("Must use either different key or iv for GCM encryption");  }  int estOutSize=getOutputSizeByOperation(inputLen,true);  int outputCapacity=output.length - outputOffset;  int minOutSize=(decrypting ? (estOutSize - blockSize) : estOutSize);  if ((output == null) || (outputCapacity < minOutSize)) {    throw new ShortBufferException("Output buffer must be " + "(at least) " + minOutSize + " bytes long");  }  int len=buffered + inputLen;  int totalLen=len + cipher.getBufferedLength();  int paddingLen=0;  if (unitBytes != blockSize) {    if (totalLen < diffBlocksize) {      paddingLen=diffBlocksize - totalLen;    } else {      paddingLen=blockSize - ((totalLen - diffBlocksize) % blockSize);    }  } else   if (padding != null) {    paddingLen=padding.padLength(totalLen);  }  if (decrypting && (padding != null) && (paddingLen > 0)&& (paddingLen != blockSize)) {    throw new IllegalBlockSizeException("Input length must be multiple of " + blockSize + " when decrypting with padded cipher");  }  byte[] finalBuf=input;  int finalOffset=inputOffset;  int finalBufLen=inputLen;  if ((buffered != 0) || (!decrypting && padding != null) || ((input == output) && (outputOffset < (inputOffset + inputLen)) && (inputOffset < (outputOffset + buffer.length)))) {    if (decrypting || padding == null) {      paddingLen=0;    }    finalBuf=new byte[len + paddingLen];    finalOffset=0;    if (buffered != 0) {      System.arraycopy(buffer,0,finalBuf,0,buffered);    }    if (inputLen != 0) {      System.arraycopy(input,inputOffset,finalBuf,buffered,inputLen);    }    if (paddingLen != 0) {      padding.padWithLen(finalBuf,(buffered + inputLen),paddingLen);    }    finalBufLen=finalBuf.length;  }  int outLen=0;  if (decrypting) {    if (outputCapacity < estOutSize) {      cipher.save();    }    byte[] outWithPadding=new byte[estOutSize];    outLen=finalNoPadding(finalBuf,finalOffset,outWithPadding,0,finalBufLen);    if (padding != null) {      int padStart=padding.unpad(outWithPadding,0,outLen);      if (padStart < 0) {        throw new BadPaddingException("Given final block not " + "properly padded");      }      outLen=padStart;    }    if (outputCapacity < outLen) {      cipher.restore();      throw new ShortBufferException("Output buffer too short: " + (outputCapacity) + " bytes given, "+ outLen+ " bytes needed");    }    System.arraycopy(outWithPadding,0,output,outputOffset,outLen);  } else {    try {      outLen=finalNoPadding(finalBuf,finalOffset,output,outputOffset,finalBufLen);    }  finally {      requireReinit=(cipherMode == GCM_MODE);    }  }  buffered=0;  diffBlocksize=blockSize;  if (cipherMode != ECB_MODE) {    cipher.reset();  }  return outLen;}  }
class C{  public String toString(String pre){  StringBuilder result=new StringBuilder();  result.append(pre).append("Dimensions: [");  int start=BitsUtil.nextSetBit(dimensions,0);  for (int d=start; d >= 0; d=BitsUtil.nextSetBit(dimensions,d + 1)) {    if (d != start) {      result.append(", ");    }    result.append(d + 1);  }  result.append("]");  return result.toString();}  }
class C{  public KeyUsageExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.KeyUsage_Id;  this.critical=critical.booleanValue();  byte[] extValue=(byte[])value;  if (extValue[0] == DerValue.tag_OctetString) {    this.extensionValue=new DerValue(extValue).getOctetString();  } else {    this.extensionValue=extValue;  }  DerValue val=new DerValue(this.extensionValue);  this.bitString=val.getUnalignedBitString().toBooleanArray();}  }
class C{  public static String readStream(InputStream is,String charsetName) throws IOException {  Charset charset=Charset.forName(System.getProperty("file.encoding"));  if (Charset.isSupported(charsetName)) {    charset=Charset.forName(charsetName);  }  StringBuilder out=new StringBuilder();  try (BufferedReader reader=new BufferedReader(new InputStreamReader(is,charset),4096)){    String line;    while ((line=reader.readLine()) != null) {      out.append(line).append("\n");    }  }   return out.toString();}  }
class C{  public boolean isShowLabels(){  return mShowLabels;}  }
class C{  public void sendPayload(byte[] content) throws RcsPermissionDeniedException, RcsGenericException {  try {    mSessionIntf.sendPayload(content);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public boolean isRunning(boolean traceError){  return service.isRunning(traceError);}  }
class C{  @Override public final boolean hasMoreElements(){  if (m_Counter < m_Vector.size()) {    return true;  }  return false;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void checkpoint(NetworkParameters params,InputStream checkpoints,BlockStore store,long time) throws IOException, BlockStoreException {  checkNotNull(params);  checkNotNull(store);  checkArgument(!(store instanceof FullPrunedBlockStore),"You cannot use checkpointing with a full store.");  time-=86400 * 7;  checkArgument(time > 0);  log.info("Attempting to initialize a new block store with a checkpoint for time {} ({})",time,Utils.dateTimeFormat(time * 1000));  BufferedInputStream stream=new BufferedInputStream(checkpoints);  CheckpointManager manager=new CheckpointManager(params,stream);  StoredBlock checkpoint=manager.getCheckpointBefore(time);  store.put(checkpoint);  store.setChainHead(checkpoint);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SSAT16");  translateAll(environment,instruction,"SSAT16",instructions);}  }
class C{  protected void drawCloud(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){  GeneralPath path=new GeneralPath();  path.moveTo((float)(x + 0.25 * w),(float)(y + 0.25 * h));  path.curveTo((float)(x + 0.05 * w),(float)(y + 0.25 * h),(float)x,(float)(y + 0.5 * h),(float)(x + 0.16 * w),(float)(y + 0.55 * h));  path.curveTo((float)x,(float)(y + 0.66 * h),(float)(x + 0.18 * w),(float)(y + 0.9 * h),(float)(x + 0.31 * w),(float)(y + 0.8 * h));  path.curveTo((float)(x + 0.4 * w),(float)(y + h),(float)(x + 0.7 * w),(float)(y + h),(float)(x + 0.8 * w),(float)(y + 0.8 * h));  path.curveTo((float)(x + w),(float)(y + 0.8 * h),(float)(x + w),(float)(y + 0.6 * h),(float)(x + 0.875 * w),(float)(y + 0.5 * h));  path.curveTo((float)(x + w),(float)(y + 0.3 * h),(float)(x + 0.8 * w),(float)(y + 0.1 * h),(float)(x + 0.625 * w),(float)(y + 0.2 * h));  path.curveTo((float)(x + 0.5 * w),(float)(y + 0.05 * h),(float)(x + 0.3 * w),(float)(y + 0.05 * h),(float)(x + 0.25 * w),(float)(y + 0.25 * h));  path.closePath();  drawPath(path,fillColor,fillPaint,penColor,shadow);}  }
class C{  public Object clone() throws CloneNotSupportedException {  SHA1_MessageDigestImpl cloneObj=(SHA1_MessageDigestImpl)super.clone();  cloneObj.buffer=buffer.clone();  cloneObj.oneByte=oneByte.clone();  return cloneObj;}  }
class C{  public void updateDate(String columnName,java.sql.Date x) throws SQLException {  updateDate(findColumn(columnName),x);}  }
class C{  public RecyclerViewCacheUtil withCacheSize(int cacheSize){  CACHE_SIZE=cacheSize;  return this;}  }
class C{  public void cast(final Type from,final Type to){  if (from != to) {    if (from == Type.DOUBLE_TYPE) {      if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.D2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.D2L);      } else {        mv.visitInsn(Opcodes.D2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.FLOAT_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.F2D);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.F2L);      } else {        mv.visitInsn(Opcodes.F2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.LONG_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.L2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.L2F);      } else {        mv.visitInsn(Opcodes.L2I);        cast(Type.INT_TYPE,to);      }    } else {      if (to == Type.BYTE_TYPE) {        mv.visitInsn(Opcodes.I2B);      } else       if (to == Type.CHAR_TYPE) {        mv.visitInsn(Opcodes.I2C);      } else       if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.I2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.I2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.I2L);      } else       if (to == Type.SHORT_TYPE) {        mv.visitInsn(Opcodes.I2S);      }    }  }}  }
class C{  public void removeCorners(){  if (topLeft != null) {    remove(topLeft);    topLeft=null;  }  if (bottomRight != null) {    remove(bottomRight);    bottomRight=null;  }}  }
class C{  public void notifyDataSetInvalidated(){  mDataSetObservable.notifyInvalidated();}  }
class C{  protected static boolean checkKOML() throws Exception {  if (!KOML.isPresent())   throw new Exception("KOML is not present!"); else   return true;}  }
class C{  public static Object toCFTypex(SQLItem item) throws PageException {  try {    return _toCFTypex(item);  } catch (  PageException e) {    if (item.isNulls())     return item.getValue();    throw e;  }}  }
class C{  protected void executeAction(String contextName) throws Exception {}  }
class C{  @SuppressWarnings("unchecked") @Nullable public static <K,V>CacheEntryPredicate[] readEntryFilterArray(ObjectInput in) throws IOException, ClassNotFoundException {  int len=in.readInt();  CacheEntryPredicate[] arr=null;  if (len > 0) {    arr=new CacheEntryPredicate[len];    for (int i=0; i < len; i++)     arr[i]=(CacheEntryPredicate)in.readObject();  }  return arr;}  }
class C{  void stop(){  if (!configuration.customExecutor) {    ((ExecutorService)taskExecutor).shutdownNow();  }  if (!configuration.customExecutorForCachedImages) {    ((ExecutorService)taskExecutorForCachedImages).shutdownNow();  }  cacheKeysForImageAwares.clear();  uriLocks.clear();}  }
class C{  public byte ID(){  return 10;}  }
class C{  BCRSAPrivateCrtKey(RSAPrivateCrtKeySpec spec){  this.modulus=spec.getModulus();  this.publicExponent=spec.getPublicExponent();  this.privateExponent=spec.getPrivateExponent();  this.primeP=spec.getPrimeP();  this.primeQ=spec.getPrimeQ();  this.primeExponentP=spec.getPrimeExponentP();  this.primeExponentQ=spec.getPrimeExponentQ();  this.crtCoefficient=spec.getCrtCoefficient();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:18.858 -0500",hash_original_method="65569EBD49455AAF0883C4D69A42B604",hash_generated_method="33D01536F41ABBD8CD10D02B7232AC4D") public void clear(){  mCapabilities.clear();}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public Tree shallowClone(){  ArrayList<Tree> newChildren=new ArrayList<>(children.size());  for (  Tree child : children) {    newChildren.add(child.shallowClone());  }  Tree newTree=new Tree(label,newChildren);  newTree.setIsTerminal(isTerminal());  newTree.setBoundary(isBoundary());  return newTree;}  }
class C{  public static MultipleObjectsBundle fromStream(BundleStreamSource source){  MultipleObjectsBundle bundle=new MultipleObjectsBundle();  boolean stop=false;  DBIDVar var=null;  ArrayModifiableDBIDs ids=null;  int size=0;  while (!stop) {    BundleStreamSource.Event ev=source.nextEvent();switch (ev) {case END_OF_STREAM:      stop=true;    break;case META_CHANGED:  BundleMeta smeta=source.getMeta();bundle.meta=new BundleMeta();for (int i=0; i < bundle.columns.size(); i++) {bundle.meta.add(smeta.get(i));}for (int i=bundle.metaLength(); i < smeta.size(); i++) {List<Object> data=new ArrayList<>(bundle.dataLength() + 1);bundle.appendColumn(smeta.get(i),data);}if (var == null && source.hasDBIDs()) {var=DBIDUtil.newVar();ids=DBIDUtil.newArray();}continue;case NEXT_OBJECT:if (var != null && source.assignDBID(var)) {ids.add(var);}for (int i=0; i < bundle.metaLength(); i++) {@SuppressWarnings("unchecked") final List<Object> col=(List<Object>)bundle.columns.get(i);col.add(source.data(i));}++size;continue;default :LoggingUtil.warning("Unknown event: " + ev);continue;}}if (ids != null) {if (size != ids.size()) {LOG.warning("Not every object had an DBID - discarding DBIDs: " + size + " != "+ ids.size());} else {bundle.setDBIDs(ids);}}return bundle;}  }
class C{  public void displayError(Exception e){  try {    e.printStackTrace();    SVGAbstractTranscoder.this.handler.error(new TranscoderException(e));  } catch (  TranscoderException ex) {    throw new RuntimeException(ex.getMessage());  }}  }
class C{  @Override public void relocate(){  int w=480, h=245;  int x=(this.getWidth() - w) / 2, y=(this.getHeight() - h) / 2;  diffToolLabel.setLocation(x,y);  diffToolField.setLocation(x + 160,y);  diffToolLogLevelComboBox.setLocation(x + 380,y);}  }
class C{  public String key(){  return key;}  }
class C{  public final ArrayList<Move> pseudoLegalMoves(Position pos){  ArrayList<Move> moveList=getMoveListObj();  final boolean wtm=pos.whiteMove;  for (int x=0; x < 8; x++) {    for (int y=0; y < 8; y++) {      int sq=Position.getSquare(x,y);      int p=pos.getPiece(sq);      if ((p == Piece.EMPTY) || (Piece.isWhite(p) != wtm)) {        continue;      }      if ((p == Piece.WROOK) || (p == Piece.BROOK) || (p == Piece.WQUEEN)|| (p == Piece.BQUEEN)) {        if (addDirection(moveList,pos,sq,7 - x,1))         return moveList;        if (addDirection(moveList,pos,sq,7 - y,8))         return moveList;        if (addDirection(moveList,pos,sq,x,-1))         return moveList;        if (addDirection(moveList,pos,sq,y,-8))         return moveList;      }      if ((p == Piece.WBISHOP) || (p == Piece.BBISHOP) || (p == Piece.WQUEEN)|| (p == Piece.BQUEEN)) {        if (addDirection(moveList,pos,sq,Math.min(7 - x,7 - y),9))         return moveList;        if (addDirection(moveList,pos,sq,Math.min(x,7 - y),7))         return moveList;        if (addDirection(moveList,pos,sq,Math.min(x,y),-9))         return moveList;        if (addDirection(moveList,pos,sq,Math.min(7 - x,y),-7))         return moveList;      }      if ((p == Piece.WKNIGHT) || (p == Piece.BKNIGHT)) {        if (x < 6 && y < 7 && addDirection(moveList,pos,sq,1,10))         return moveList;        if (x < 7 && y < 6 && addDirection(moveList,pos,sq,1,17))         return moveList;        if (x > 0 && y < 6 && addDirection(moveList,pos,sq,1,15))         return moveList;        if (x > 1 && y < 7 && addDirection(moveList,pos,sq,1,6))         return moveList;        if (x > 1 && y > 0 && addDirection(moveList,pos,sq,1,-10))         return moveList;        if (x > 0 && y > 1 && addDirection(moveList,pos,sq,1,-17))         return moveList;        if (x < 7 && y > 1 && addDirection(moveList,pos,sq,1,-15))         return moveList;        if (x < 6 && y > 0 && addDirection(moveList,pos,sq,1,-6))         return moveList;      }      if ((p == Piece.WKING) || (p == Piece.BKING)) {        if (x < 7 && addDirection(moveList,pos,sq,1,1))         return moveList;        if (x < 7 && y < 7 && addDirection(moveList,pos,sq,1,9))         return moveList;        if (y < 7 && addDirection(moveList,pos,sq,1,8))         return moveList;        if (x > 0 && y < 7 && addDirection(moveList,pos,sq,1,7))         return moveList;        if (x > 0 && addDirection(moveList,pos,sq,1,-1))         return moveList;        if (x > 0 && y > 0 && addDirection(moveList,pos,sq,1,-9))         return moveList;        if (y > 0 && addDirection(moveList,pos,sq,1,-8))         return moveList;        if (x < 7 && y > 0 && addDirection(moveList,pos,sq,1,-7))         return moveList;        int k0=wtm ? Position.getSquare(4,0) : Position.getSquare(4,7);        if (Position.getSquare(x,y) == k0) {          int aCastle=wtm ? Position.A1_CASTLE : Position.A8_CASTLE;          int hCastle=wtm ? Position.H1_CASTLE : Position.H8_CASTLE;          int rook=wtm ? Piece.WROOK : Piece.BROOK;          if (((pos.getCastleMask() & (1 << hCastle)) != 0) && (pos.getPiece(k0 + 1) == Piece.EMPTY) && (pos.getPiece(k0 + 2) == Piece.EMPTY)&& (pos.getPiece(k0 + 3) == rook)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 + 1)) {            moveList.add(getMoveObj(k0,k0 + 2,Piece.EMPTY));          }          if (((pos.getCastleMask() & (1 << aCastle)) != 0) && (pos.getPiece(k0 - 1) == Piece.EMPTY) && (pos.getPiece(k0 - 2) == Piece.EMPTY)&& (pos.getPiece(k0 - 3) == Piece.EMPTY)&& (pos.getPiece(k0 - 4) == rook)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 - 1)) {            moveList.add(getMoveObj(k0,k0 - 2,Piece.EMPTY));          }        }      }      if ((p == Piece.WPAWN) || (p == Piece.BPAWN)) {        int yDir=wtm ? 8 : -8;        if (pos.getPiece(sq + yDir) == Piece.EMPTY) {          addPawnMoves(moveList,sq,sq + yDir);          if ((y == (wtm ? 1 : 6)) && (pos.getPiece(sq + 2 * yDir) == Piece.EMPTY)) {            addPawnMoves(moveList,sq,sq + yDir * 2);          }        }        if (x > 0) {          int toSq=sq + yDir - 1;          int cap=pos.getPiece(toSq);          if (cap != Piece.EMPTY) {            if (Piece.isWhite(cap) != wtm) {              if (cap == (wtm ? Piece.BKING : Piece.WKING)) {                returnMoveList(moveList);                moveList=getMoveListObj();                moveList.add(getMoveObj(sq,toSq,Piece.EMPTY));                return moveList;              } else {                addPawnMoves(moveList,sq,toSq);              }            }          } else           if (toSq == pos.getEpSquare()) {            addPawnMoves(moveList,sq,toSq);          }        }        if (x < 7) {          int toSq=sq + yDir + 1;          int cap=pos.getPiece(toSq);          if (cap != Piece.EMPTY) {            if (Piece.isWhite(cap) != wtm) {              if (cap == (wtm ? Piece.BKING : Piece.WKING)) {                returnMoveList(moveList);                moveList=getMoveListObj();                moveList.add(getMoveObj(sq,toSq,Piece.EMPTY));                return moveList;              } else {                addPawnMoves(moveList,sq,toSq);              }            }          } else           if (toSq == pos.getEpSquare()) {            addPawnMoves(moveList,sq,toSq);          }        }      }    }  }  return moveList;}  }
class C{  private boolean contains(Object[] set,Object element){  for (  Object i : set) {    if (i.equals(element)) {      return true;    }  }  return false;}  }
class C{  Builder(URL swaggerUrl){  try {    this.swaggerLocation=swaggerUrl.toURI();  } catch (  URISyntaxException e) {    throw new IllegalArgumentException("swaggerURL is in a wrong format",e);  }  this.swagger=readSwagger(swaggerUrl.toString());}  }
class C{  public boolean isSpannedBy(MIMEType other){  return other.spans(this,true);}  }
class C{  protected void addConsistencyGroupTask(URI groupUri,TaskList taskList,String taskId,ResourceOperationTypeEnum operationTypeEnum){  BlockConsistencyGroup group=_dbClient.queryObject(BlockConsistencyGroup.class,groupUri);  Operation op=_dbClient.createTaskOpStatus(BlockConsistencyGroup.class,group.getId(),taskId,operationTypeEnum);  taskList.getTaskList().add(TaskMapper.toTask(group,taskId,op));}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (MISSING_VALUE.equals(get(i))) {      count++;    }  }  return count;}  }
class C{  public WeakRef(Object obj){  super(obj);  setHashValue(obj);}  }
class C{  private StorageUnit createStorageUnit(String s3KeyPrefix,List<String> files,Long fileSizeBytes){  StorageUnit storageUnit=new StorageUnit();  Storage storage=new Storage();  storageUnit.setStorage(storage);  storage.setName("TEST_STORAGE");  List<StorageFile> storageFiles=new ArrayList<>();  storageUnit.setStorageFiles(storageFiles);  if (!CollectionUtils.isEmpty(files)) {    for (    String file : files) {      StorageFile storageFile=new StorageFile();      storageFiles.add(storageFile);      storageFile.setFilePath(String.format("%s/%s",s3KeyPrefix,file));      storageFile.setFileSizeBytes(fileSizeBytes);    }  }  storageUnit.setStorageUnitStatus(StorageUnitStatusEntity.ENABLED);  return storageUnit;}  }
class C{  public DoubleArray resize(DoubleArray array,long size){  if (array instanceof BigDoubleArray) {    return resizeInPlace((BigDoubleArray)array,size);  } else {    AbstractArray arr=(AbstractArray)array;    final DoubleArray newArray=newDoubleArray(size,arr.clearOnResize);    for (long i=0, end=Math.min(size,array.size()); i < end; ++i) {      newArray.set(i,array.get(i));    }    array.close();    return newArray;  }}  }
class C{  public void writeFile() throws NotFoundException, IOException, CannotCompileException {  writeFile(".");}  }
class C{  @ApiMethod(httpMethod="POST") public final void registerDevice(@Named("regId") final String regId,final User user) throws UnauthorizedException {  EndpointUtil.throwIfNotAuthenticated(user);  if (findRecord(regId) != null) {    LOG.info("Device " + regId + " already registered, skipping register");    return;  }  Registration record=new Registration();  record.setRegId(regId);  ofy().save().entity(record).now();}  }
class C{  public SieveFileRepository(){}  }
class C{  public Builder maxItemsPerRequest(Integer maxItemsPerRequest){  this.maxItemsPerRequest=maxItemsPerRequest;  return this;}  }
class C{  public static String insertBlanks(String s){  String result="";  for (int i=0; i < s.length(); i++) {    if (s.charAt(i) == '(' || s.charAt(i) == ')' || s.charAt(i) == '+' || s.charAt(i) == '-' || s.charAt(i) == '*' || s.charAt(i) == '/')     result+=" " + s.charAt(i) + " "; else     result+=s.charAt(i);  }  return result;}  }
class C{  public int length(){  return this.map.size();}  }
class C{  public FXGException(Throwable cause){  super(cause);  this.arguments=null;  message=null;  lineNumber=-1;  columnNumber=-1;}  }
class C{  protected void onProgress(int itemcount,int size){}  }
class C{  private void initializeLogger() throws Exception {  if (logSystem instanceof PrimordialLogSystem) {    PrimordialLogSystem pls=(PrimordialLogSystem)logSystem;    logSystem=LogManager.createLogSystem(this);    if (logSystem == null) {      logSystem=new NullLogSystem();    } else {      pls.dumpLogMessages(logSystem);    }  }}  }
class C{  public PreferenceBuilder<PreferenceClass> titleName(String titleName){  prefTitleName=titleName;  return this;}  }
class C{  public static boolean isTempFileExist(DownloadFileInfo downloadFileInfo){  if (!DownloadFileUtil.isLegal(downloadFileInfo)) {    return false;  }  if (downloadFileInfo.getDownloadedSizeLong() >= 0) {    return FileUtil.isFileExist(downloadFileInfo.getTempFilePath());  }  return false;}  }
class C{  @Override public boolean connectionAllowed(String eventName){  return true;}  }
class C{  public void visitInvokeDynamicInsn(String name,String desc,Handle bsm,Object... bsmArgs){  if (mv != null) {    mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);  }}  }
class C{  public AttributeEvaluatorException(String message){  super(message);}  }
class C{  @Override protected final String replaceImageUrl(final String cssUri,final String imageUrl){  if (!imageUrls.contains(imageUrl)) {    imageUrls.add(imageUrl);    return super.replaceImageUrl(cssUri,imageUrl);  }  LOG.debug("duplicate Image url detected: '{}', skipping dataUri replacement",imageUrl);  return imageUrl;}  }
class C{  public static void main(String[] args){  long startMsec=System.currentTimeMillis();  List<Object[]> data=(List<Object[]>)data();  Object[] chosenData=data.get(0);  FormatChangeTest t=new FormatChangeTest((Integer)chosenData[0],(Integer)chosenData[1],(Double)chosenData[2]);  t.setUpBase();  t.setUp();  t.testFormatChangeCP();  t.tearDown();  long elapsedMsec=System.currentTimeMillis() - startMsec;  System.err.printf("Finished in %1.3f sec\n",elapsedMsec / 1000.0);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.PARAMETERIZED_ACCESS__TYPE_ARGS:    return ((InternalEList<?>)getTypeArgs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3),entryOf(k4,v4),entryOf(k5,v5));}  }
class C{  protected int index(int row,int column){  return rowZero + row * rowStride + columnZero + column * columnStride;}  }
class C{  public float scale(float domainValue){  return mRangeA + (domainValue - mDomainA) * mScale;}  }
class C{  protected final void assertionError(String message,Throwable cause){  StringBuilder b=new StringBuilder();  if (cdl.getCount() != 0) {    b.append("(active) ");  }  b.append(message);  List<Throwable> err=errors;  if (!err.isEmpty()) {    b.append(" (+ ").append(err.size()).append(" errors)");  }  AssertionError e=new AssertionError(b.toString(),cause);  for (  Throwable t : err) {    e.addSuppressed(t);  }  throw e;}  }
class C{  public int entryPoint(State state,Type pushed){  int pc=curCP();  alive=true;  State newState=state.dup();  setDefined(newState.defined);  this.state=newState;  Assert.check(state.stacksize <= max_stack);  this.state.push(pushed);  if (debugCode)   System.err.println("entry point " + state);  pendingStackMap=needStackMap;  return pc;}  }
class C{  protected boolean hasReceiversFor(DistributedMember endPoint){synchronized (this.receivers) {    for (Iterator it=receivers.iterator(); it.hasNext(); ) {      Connection con=(Connection)it.next();      if (endPoint.equals(con.getRemoteAddress())) {        return true;      }    }  }  return false;}  }
class C{  public final short readShort() throws java.io.IOException {  readFully(scratch,0,2);  return (short)((scratch[0] << 8) | (scratch[1] & 0xff));}  }
class C{  private void updateMembership(MembershipRecord r1,boolean spreadGossip){  Preconditions.checkArgument(r1 != null,"Membership record can't be null");  MembershipRecord r0=membershipTable.get(r1.id());  if (!r1.isOverrides(r0)) {    return;  }  if (r1.member().equals(member)) {    int currentIncarnation=Math.max(r0.incarnation(),r1.incarnation());    MembershipRecord r2=new MembershipRecord(member,ALIVE,currentIncarnation + 1);    membershipTable.put(member.id(),r2);    LOGGER.debug("Local membership record r0={}, but received r1={}, spread r2={}",r0,r1,r2);    spreadMembershipGossip(r2);    return;  }  if (r1.isDead()) {    membershipTable.remove(r1.id());  } else {    membershipTable.put(r1.id(),r1);  }  if (r1.isSuspect()) {    scheduleRemoveMemberTask(r1);  } else {    cancelRemoveMemberTask(r1.id());  }  if (r1.isDead() && r0 != null) {    MembershipEvent membershipEvent=new MembershipEvent(MembershipEvent.Type.REMOVED,r1.member());    subject.onNext(membershipEvent);  } else   if (r0 == null && !r1.isDead()) {    MembershipEvent membershipEvent=new MembershipEvent(MembershipEvent.Type.ADDED,r1.member());    subject.onNext(membershipEvent);  }  if (spreadGossip) {    spreadMembershipGossip(r1);  }}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) private void applyShadow(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    setLayerType(LAYER_TYPE_SOFTWARE,paintBorder);  }}  }
class C{  public static ArrayList<Byte> byteArrayToArrayList(byte[] byteArray){  return byteArrayToArrayList(byteArray,0);}  }
class C{  public void moveToPosition(float camX,float camY){  glPanel.moveToPosition(camX,camY);}  }
class C{  private static double dot(int g[],double x,double y){  return g[0] * x + g[1] * y;}  }
class C{  synchronized void addLinkingAddress(Address toBeLinked,boolean objField,boolean root,String rvmFieldName,TypeReference rvmFieldType,Object parent){  if (linkingAddresses == null) {    linkingAddresses=new LinkedList<LinkInfo>();  }  linkingAddresses.add(new LinkInfo(toBeLinked,objField,root,rvmFieldName,rvmFieldType,parent));}  }
class C{  public SpringTransactionManager(){  setNestedTransactionAllowed(false);}  }
class C{  public static boolean isAtLeastJava14(){  return true;}  }
class C{  public void addParameter(String paramName,String paramValue) throws IllegalArgumentException {  log.trace("enter PostMethod.addParameter(String, String)");  if ((paramName == null) || (paramValue == null)) {    throw new IllegalArgumentException("Arguments to addParameter(String, String) cannot be null");  }  super.clearRequestBody();  this.params.add(new NameValuePair(paramName,paramValue));}  }
class C{  public WriteFuture stopSsl(IoSession session) throws SSLException {  SslHandler sslHandler=getSslSessionHandler(session);  NextFilter nextFilter=(NextFilter)session.getAttribute(NEXT_FILTER);  WriteFuture future;  try {synchronized (sslHandler) {      future=initiateClosure(nextFilter,session);    }    sslHandler.flushScheduledEvents();  } catch (  SSLException se) {    sslHandler.release();    throw se;  }  return future;}  }
class C{  public static void dropPartition(HiveMetastoreClient ms,HiveObjectSpec spec) throws HiveMetastoreException {  if (spec.isPartition()) {    ms.dropPartition(spec.getDbName(),spec.getTableName(),spec.getPartitionName(),true);    return;  } else {    throw new HiveMetastoreException("unpartitioned table provided" + spec.toString());  }}  }
class C{  public AliasEvent(Alias alias,Event event){  mAlias=alias;  mEvent=event;}  }
class C{  public static void validatePositiveNumber(long fieldValue,String fieldName){  if (fieldValue <= 0) {    logAndThrow(String.format("%s should be a positive number: %d",fieldName,fieldValue));  }}  }
class C{  protected void createGraphics(OMGraphicList list){  OMPoly poly;  poly=new OMPoly(new double[]{10f,-150f,35f,-150f,35f,-145f,25f,-145f,25f,-135f,35f,-135f,35f,-130f,10f,-130f,10f,-135f,20f,-135f,20f,-145f,10f,-145f,10f,-150f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(Color.black);  poly.setFillPaint(Color.green);  list.add(poly);  poly=new OMPoly(new double[]{10f,-120f,35f,-120f,35f,-100f,30f,-100f,30f,-115f,25f,-115f,25f,-105f,20f,-105f,20f,-115f,15f,-115f,15f,-100f,10f,-100f,10f,-120f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(Color.black);  poly.setFillPaint(Color.green);  list.add(poly);  poly=new OMPoly(new double[]{10f,-90f,35f,-90f,35f,-85f,15f,-85f,15f,-75f,10f,-75f,10f,-90f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(Color.black);  poly.setFillPaint(Color.green);  list.add(poly);  poly=new OMPoly(new double[]{10f,-70f,35f,-70f,35f,-65f,15f,-65f,15f,-55f,10f,-55f,10f,-70f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(Color.black);  poly.setFillPaint(Color.green);  list.add(poly);  poly=new OMPoly(new double[]{10f,-50f,35f,-50f,35f,-30f,10f,-30f,10f,-50f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(Color.black);  poly.setFillPaint(OMGraphic.clear);  list.add(poly);  poly=new OMPoly(new double[]{15f,-45f,30f,-45f,30f,-35f,15f,-35f,15f,-45f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(Color.black);  poly.setFillPaint(OMGraphic.clear);  list.add(poly);  poly=new OMPoly(new double[]{10f,-50f,35f,-50f,35f,-30f,10f,-30f,10f,-45f,15f,-45f,15f,-35f,30f,-35f,30f,-45f,10f,-45f,10f,-50f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(OMGraphic.clear);  poly.setFillPaint(Color.green);  list.add(poly);  poly=new OMPoly(new double[]{-35f,-5f,-10f,-5f,-10f,0f,-25f,0f,-25f,5f,-20f,5f,-20f,10f,-25f,10f,-25f,15f,-10f,15f,-10f,20f,-35f,20f,-35f,10f,-30f,10f,-30f,5f,-35f,5f,-35f,-5f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(Color.black);  poly.setFillPaint(Color.green);  list.add(poly);  poly=new OMPoly(new double[]{-35f,30f,-10f,30f,-10f,50f,-35f,50f,-35f,30f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(Color.black);  poly.setFillPaint(OMGraphic.clear);  list.add(poly);  poly=new OMPoly(new double[]{-30f,35f,-15f,35f,-15f,45f,-30f,45f,-30f,35f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(Color.black);  poly.setFillPaint(OMGraphic.clear);  list.add(poly);  poly=new OMPoly(new double[]{-35f,30f,-10f,30f,-10f,50f,-35f,50f,-35f,35f,-30f,35f,-30f,45f,-15f,45f,-15f,35f,-35f,35f,-35f,30f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(OMGraphic.clear);  poly.setFillPaint(Color.green);  list.add(poly);  poly=new OMPoly(new double[]{-35f,60f,-10f,60f,-10f,75f,-20f,75f,-25f,70f,-30f,80f,-35f,80f,-35f,75f,-30f,70f,-30f,65f,-35f,65f,-35f,60f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(Color.black);  poly.setFillPaint(OMGraphic.clear);  list.add(poly);  poly=new OMPoly(new double[]{-20f,65f,-15f,65f,-15f,70f,-20f,70f,-20f,65f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(Color.black);  poly.setFillPaint(OMGraphic.clear);  list.add(poly);  poly=new OMPoly(new double[]{-35f,60f,-10f,60f,-10f,75f,-20f,75f,-25f,70f,-30f,80f,-35f,80f,-35f,75f,-30f,70f,-30f,65f,-20f,65f,-20f,70f,-15f,70f,-15f,65f,-35f,65f,-35f,60f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(OMGraphic.clear);  poly.setFillPaint(Color.green);  list.add(poly);  poly=new OMPoly(new double[]{-35f,90f,-10f,90f,-10f,95f,-30f,95f,-30f,105f,-35f,105f,-35f,90f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(Color.black);  poly.setFillPaint(Color.green);  list.add(poly);  poly=new OMPoly(new double[]{-35f,110f,-10f,110f,-10f,125f,-15f,130f,-30f,130f,-35f,125f,-35f,110f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(Color.black);  poly.setFillPaint(OMGraphic.clear);  list.add(poly);  poly=new OMPoly(new double[]{-30f,115f,-15f,115f,-15f,120f,-20f,125f,-25f,125f,-30f,120f,-30f,115f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(Color.black);  poly.setFillPaint(OMGraphic.clear);  list.add(poly);  poly=new OMPoly(new double[]{-35f,110f,-10f,110f,-10f,125f,-15f,130f,-30f,130f,-35f,125f,-35f,115f,-30f,115f,-30f,120f,-25f,125f,-20f,125f,-15f,120f,-15f,115f,-35f,115f,-35f,110f},OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB,32);  poly.setLinePaint(OMGraphic.clear);  poly.setFillPaint(Color.green);  list.add(poly);}  }
class C{  private void markerWithDefaultIcon(GoogleMap googleMap,LatLng latLng,String publicId){  MarkerOptions options=new MarkerOptions();  options.position(latLng);  Marker marker=googleMap.addMarker(options);  publicMarkerIds.put(marker.getId(),publicId);}  }
class C{  public void line(String srcName,Paint color,float width){  line(srcName,color,null,width,false);}  }
class C{  public static void printList(GeometricObject[] list){  System.out.print("Sorted elements: ");  for (  GeometricObject e : list) {    System.out.printf("%.2f ",e.getArea());  }  System.out.println();}  }
class C{  public TSink<byte[]> sendBytes(TStream<byte[]> stream){  Objects.requireNonNull(stream,"stream");  return sendBinary(stream,null);}  }
class C{  public LeavesInfo(String id,String name,String employeeid,String startdate,String enddate,String notes){  m_sID=id;  m_sName=name;  m_sEmployeeID=employeeid;  m_sStartDate=startdate;  m_sEndDate=enddate;  m_sNotes=notes;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  String prefix;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("employee");  testEmployee=elementList.item(0);  prefix=testEmployee.getPrefix();  assertNull("throw_Null",prefix);}  }
class C{  public static String toString(ToXContent toXContent,Params params){  try {    XContentBuilder builder=XContentFactory.jsonBuilder();    if (params.paramAsBoolean("pretty",true)) {      builder.prettyPrint();    }    if (params.paramAsBoolean("human",true)) {      builder.humanReadable(true);    }    builder.startObject();    toXContent.toXContent(builder,params);    builder.endObject();    return builder.string();  } catch (  IOException e) {    try {      XContentBuilder builder=XContentFactory.jsonBuilder().prettyPrint();      builder.startObject();      builder.field("error",e.getMessage());      builder.endObject();      return builder.string();    } catch (    IOException e2) {      throw new ElasticsearchException("cannot generate error message for deserialization",e);    }  }}  }
class C{  @Override public boolean add(Token tok){  super.add(tok);  int type=tok.getType();  if (type == InternalN4JSParser.EqualsSignGreaterThanSign) {    for (int i=size() - 2; i >= 0; i--) {      Token prev=get(i);      if (prev.getChannel() == Token.HIDDEN_CHANNEL) {        if (SemicolonInjectionHelper.isSemicolonEquivalent(prev)) {          prev.setChannel(Token.DEFAULT_CHANNEL);          break;        }      } else {        break;      }    }  } else   if (type == InternalN4JSParser.RULE_EOL || type == InternalN4JSParser.RULE_ML_COMMENT || type == InternalN4JSParser.RULE_WS || type == InternalN4JSParser.RULE_SL_COMMENT) {    tok.setChannel(Token.HIDDEN_CHANNEL);  } else {    tok.setChannel(Token.DEFAULT_CHANNEL);  }  return true;}  }
class C{  public SRegMessage(){  _parameters=new ParameterList();  if (DEBUG)   _log.debug("Created empty SRegMessage.");}  }
class C{  public HtmlPolicyBuilder disallowWithoutAttributes(String... elementNames){  invalidateCompiledState();  for (  String elementName : elementNames) {    elementName=HtmlLexer.canonicalName(elementName);    skipIfEmpty.add(elementName);  }  return this;}  }
class C{  public static double normal(double mu,double sigma){  double x=mu + sigma * Math.cos(2 * Math.PI * raw()) * Math.sqrt(-2 * Math.log(raw()));  return x;}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  this.put(index,new Long(value));  return this;}  }
class C{  public void writeBool(boolean b) throws TException {  if (booleanField_ != null) {    writeFieldBeginInternal(booleanField_,b ? Types.BOOLEAN_TRUE : Types.BOOLEAN_FALSE);    booleanField_=null;  } else {    writeByteDirect(b ? Types.BOOLEAN_TRUE : Types.BOOLEAN_FALSE);  }}  }
class C{  public void testScanQueryMetrics() throws Exception {  IgniteCache<String,Integer> cache=grid(0).context().cache().jcache("A");  ScanQuery<String,Integer> qry=new ScanQuery<>();  testQueryMetrics(cache,qry);}  }
class C{  public String text(String tag){  XmlDom dom=child(tag);  if (dom == null)   return null;  return dom.text();}  }
class C{  public static VcpcRunner serializableInstance(){  return new VcpcRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public static String quote(String str){  return (str != null ? "'" + str + "'" : null);}  }
class C{  public Response deleteSystemProperty(String propertyName){  return restClient.delete("system/properties/" + propertyName,new HashMap<String,String>());}  }
class C{  public boolean isPlayerVictor(int playerId){  return isPlayerVictor(getPlayer(playerId));}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  CombinedRangeXYPlot result=(CombinedRangeXYPlot)super.clone();  result.subplots=(List)ObjectUtilities.deepClone(this.subplots);  for (Iterator it=result.subplots.iterator(); it.hasNext(); ) {    Plot child=(Plot)it.next();    child.setParent(result);  }  ValueAxis rangeAxis=result.getRangeAxis();  if (rangeAxis != null) {    rangeAxis.configure();  }  return result;}  }
class C{  public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  if (mv != null) {    mv.visitLookupSwitchInsn(dflt,keys,labels);  }}  }
class C{  @Nullable public static String compactClass(@Nullable Object obj){  if (obj == null)   return null;  return U.compact(obj.getClass().getName());}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  int length=length();  s.writeInt(length);  for (int i=0; i < length; i++) {    s.writeDouble(get(i));  }}  }
class C{  public Node item(int index){  if (m_iter != null) {    int node;    int count=m_cachedNodes.size();    if (count > index) {      node=m_cachedNodes.elementAt(index);      return m_dtm.getNode(node);    } else     if (m_last == -1) {      while (((node=m_iter.next()) != DTMAxisIterator.END) && count <= index) {        m_cachedNodes.addElement(node);        count++;      }      if (node == DTMAxisIterator.END) {        m_last=count;      } else {        return m_dtm.getNode(node);      }    }  }  return null;}  }
class C{  public boolean isBasicCollection(){  return false;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  m_requests.add(request);  new Thread(this).start();}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public static String formatURL(String url){  if (!Strings.isNullOrEmpty(url)) {    try {      URI uri=URI.create(url);      if (uri.isAbsolute()) {        return url;      } else {        return "http://" + url;      }    } catch (    IllegalArgumentException e) {      return null;    }  } else {    return null;  }}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.add:    String command=commandInput.getText().toString().trim();  if (!command.startsWith("/")) {    command="/" + command;  }commands.add(command);adapter.add(command);commandInput.setText("/");okButton.setEnabled(true);break;case R.id.cancel:setResult(RESULT_CANCELED);finish();break;case R.id.ok:Intent intent=new Intent();intent.putExtra(Extra.COMMANDS,commands);setResult(RESULT_OK,intent);finish();break;}}  }
class C{  public void replaceAnnFile(String pathAnnFile){  m_pathAnnFile=pathAnnFile;  m_readerAnnFile=null;  m_isUpdateAnnFile=true;  if (!isModified())   setEditFlag(FolderEditFlag.UPDATE);}  }
class C{  private static Map<String,UserDerivation> loadUserFile(String userFileName){  Map<String,UserDerivation> map=new HashMap<>();  LineNumberReader reader=IOTools.getReaderFromFile(userFileName);  try {    boolean seenHeader=false;    for (String line; (line=reader.readLine()) != null; ) {      String[] fields=line.trim().split("\\t");      assert fields.length == 7 : "Ill-formed line: " + String.valueOf(reader.getLineNumber());      if (!seenHeader) {        seenHeader=true;        continue;      }      String id=String.format("%s:%s:%s",fields[2],fields[0],fields[1]);      id=id.replace(".src.json",".tgt");      assert !map.containsKey(id) : "Duplicate key: " + id;      map.put(id,new UserDerivation(fields[3],fields[4],fields[5],fields[6]));    }    reader.close();  } catch (  IOException e) {    throw new RuntimeException(e);  }  return map;}  }
class C{  public Entity ce(){  return getClient().getGame().getEntity(cen);}  }
class C{  public TransferProtocolClient(){}  }
class C{  public ActivityTransitionExitHelper background(View background){  this.background=background;  return this;}  }
class C{  @Override public void service(Mail mail) throws MessagingException {  Collection<MailAddress> recipients=mail.getRecipients();  Collection<MailAddress> errors=new Vector<MailAddress>();  MimeMessage message=null;  if (deliveryHeader != null || resetReturnPath) {    message=mail.getMessage();  }  if (resetReturnPath) {    message.setHeader(RFC2822Headers.RETURN_PATH,(mail.getSender() == null ? "<>" : "<" + mail.getSender() + ">"));  }  Enumeration<?> headers;  InternetHeaders deliveredTo=new InternetHeaders();  if (deliveryHeader != null) {    headers=message.getMatchingHeaders(new String[]{deliveryHeader});    while (headers.hasMoreElements()) {      Header header=(Header)headers.nextElement();      deliveredTo.addHeader(header.getName(),header.getValue());    }  }  for (Iterator<MailAddress> i=recipients.iterator(); i.hasNext(); ) {    MailAddress recipient=i.next();    try {      if (deliveryHeader != null) {        message.addHeader(deliveryHeader,recipient.toString());      }      storeMail(mail.getSender(),recipient,mail);      if (deliveryHeader != null) {        if (i.hasNext()) {          message.removeHeader(deliveryHeader);          headers=deliveredTo.getAllHeaders();          while (headers.hasMoreElements()) {            Header header=(Header)headers.nextElement();            message.addHeader(header.getName(),header.getValue());          }        }      }    } catch (    Exception ex) {      log("Error while storing mail.",ex);      errors.add(recipient);    }  }  if (!errors.isEmpty()) {    getMailetContext().sendMail(mail.getSender(),errors,mail.getMessage(),Mail.ERROR);  }  if (consume) {    mail.setState(Mail.GHOST);  }}  }
class C{  void emitFirst(Object n){synchronized (this) {    if (!first || emitting) {      return;    }    first=false;    emitting=n != null;  }  if (n != null) {    emitLoop(null,n);  }}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  public SearchSourceBuilder postFilter(XContentBuilder postFilter){  return postFilter(postFilter.bytes());}  }
class C{  public static boolean hasMvAggregate(JsonObject jo,String resultProperty,String variableName,JsonUnivariateAggregate aggregate){  JsonElement je=jo.get(resultProperty);  if (je != null && je.isJsonObject()) {    JsonObject jo2=je.getAsJsonObject();    je=jo2.get(variableName);    if (je != null && je.isJsonObject()) {      jo2=je.getAsJsonObject();      je=jo2.get(aggregate.name());      if (je != null)       return true;    }  }  return false;}  }
class C{  public void permissionDenied(Permission permission){  incCurrentCount(permission.getClass());  rememberRecentReadFilePermissions(permission);  String permissionClassName=permission.getClass().getName();  String type=getPermissionType(permission);  if (!deniedCount.containsKey(permissionClassName)) {    deniedCount.put(permissionClassName,new HashMap<String,Integer>());  }  if (deniedCount.get(permissionClassName).containsKey(type)) {    deniedCount.get(permissionClassName).put(type,deniedCount.get(permissionClassName).get(type) + 1);  } else {    deniedCount.get(permissionClassName).put(type,1);  }  hasNewExceptions=true;}  }
class C{  public void showModeless(){  modal=false;  setDisposed(false);  if (top > -1) {    show(top,bottom,left,right,includeTitle,false);  } else {    if (getDialogPosition() == null) {      showDialog(false,false);    } else {      showPacked(getDialogPosition(),false);    }  }}  }
class C{  public Object call(String key,Object[] params){  return context.call(toJSPointer() + "." + key,this,params);}  }
class C{  public void removeAndIgnore(){  innerRemove();  ignoreShard(current);}  }
class C{  private void listXExample(){  Map<Integer,List<Person>> map=ListX.of(new Person("Bella",12),new Person("Alisa",10)).groupBy(null);  System.out.println(map.get(12).get(0));}  }
class C{  public void removeRequestListener(RequestListener listener){  removeMessageListener(new RequestListenerMessageEventHandler(listener));}  }
class C{  public Object readReference(XMLFormat.InputElement xml) throws XMLStreamException {  CharArray value=xml._reader.getAttributeValue(_refURI,_refName);  if (value == null)   return null;  int ref=value.toInt();  if (ref >= _idToObject.size())   throw new XMLStreamException("Reference: " + value + " not found");  return _idToObject.get(ref);}  }
class C{  private ReplaceTokens.Token createServerNameToken(){  String serverName=getPropertyValue(JRun4xPropertySet.SERVER_NAME);  ReplaceTokens.Token tokenServerName=new ReplaceTokens.Token();  tokenServerName.setKey(JRun4xPropertySet.SERVER_NAME);  tokenServerName.setValue(serverName);  return tokenServerName;}  }
class C{  public TeXFormula(){  parser=new TeXParser("",this,false);}  }
class C{  @Override protected void executePendingBatch() throws ReplicatorException {  if (this.pendingPreparedStatement == null) {    return;  }  if (logger.isDebugEnabled()) {    logger.debug("Executing current pending batch: statement=" + this.pendingSqlStatement + " change count="+ this.pendingRowChanges.size());  }  int[] checkCounts;  int updateCount=0;  try {    checkCounts=pendingPreparedStatement.executeBatch();    for (int i=0; i < checkCounts.length; i++) {      int updatedRows=checkCounts[i];      if (logger.isDebugEnabled()) {        logger.debug("Checking update status: update=" + i + " updatedRows="+ updatedRows);      }      if (updatedRows == Statement.SUCCESS_NO_INFO) {        continue;      } else       if (updatedRows == Statement.EXECUTE_FAILED) {        RowReference rowRef=this.pendingRowChanges.get(i);        ApplierException applierException=new ApplierException("Batch update failed without exception");        applierException.setExtraData(logFailedRowChangeSQL(this.pendingSqlStatement,rowRef.rowChanges,rowRef.row));        throw applierException;      } else       if (updatedRows == 0) {        RowReference rowRef=this.pendingRowChanges.get(i);        if (runtime.getApplierFailurePolicyOn0RowUpdates() == FailurePolicy.WARN) {          logger.warn("UPDATE or DELETE statement did not process any row\n" + logFailedRowChangeSQL(this.pendingSqlStatement,rowRef.rowChanges,rowRef.row));        } else         if (runtime.getApplierFailurePolicyOn0RowUpdates() == FailurePolicy.STOP) {          ReplicatorException replicatorException=new ReplicatorException("SQL statement did not process any row");          replicatorException.setExtraData(logFailedRowChangeSQL(this.pendingSqlStatement,rowRef.rowChanges,rowRef.row));          throw replicatorException;        } else {        }      } else {        updateCount+=updatedRows;      }      if (logger.isDebugEnabled()) {        logger.debug("Applied event (update count " + updateCount + "): "+ this.pendingSqlStatement.toString());      }    }  } catch (  BatchUpdateException e) {    ApplierException applierException;    int updateCounts[]=e.getUpdateCounts();    int index=updateCounts.length + 1;    if (index < this.pendingRowChanges.size()) {      applierException=new ApplierException(e);      ;      RowReference rowRef=this.pendingRowChanges.get(index);      applierException.setExtraData(logFailedRowChangeSQL(this.pendingSqlStatement,rowRef.rowChanges,rowRef.row));    } else {      applierException=new ApplierException("Batch update failed: statement=" + this.pendingSqlStatement,e);    }    throw applierException;  }catch (  SQLException e) {    ApplierException applierException=new ApplierException("Batch update failed: statement=" + this.pendingSqlStatement,e);    throw applierException;  } finally {    releasePendingBatch();  }}  }
class C{  public DrawerBuilder withMultiSelect(boolean multiSelect){  this.mMultiSelect=multiSelect;  return this;}  }
class C{  public void finishAll(){synchronized (activities) {    for (int i=activities.size() - 1; i >= 0; i--) {      activities.get(i).finish();      activities.remove(i);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.425 -0500",hash_original_method="930DD52B84605C74F4CF39C7CC283746",hash_generated_method="25376D0D6F4E43BFA7DF4F7F9D511468") public static String toCallerIDMinMatch(String phoneNumber){  String np=extractNetworkPortionAlt(phoneNumber);  return internalGetStrippedReversed(np,MIN_MATCH);}  }
class C{  public static File buildJar(String className) throws Exception {  File jar=new File(className + ".jar");  List<String> jarArgs=new ArrayList<>();  jarArgs.add("-cfm");  jarArgs.add(jar.getAbsolutePath());  File manifestFile=getManifest(className);  jarArgs.add(manifestFile.getAbsolutePath());  String testClassPath=System.getProperty("test.class.path","?");  for (  String path : testClassPath.split(File.pathSeparator)) {    jarArgs.add("-C");    jarArgs.add(path);    jarArgs.add(".");  }  System.out.println("Running jar " + jarArgs.toString());  sun.tools.jar.Main jarTool=new sun.tools.jar.Main(System.out,System.err,"jar");  if (!jarTool.run(jarArgs.toArray(new String[jarArgs.size()]))) {    throw new Exception("jar failed: args=" + jarArgs.toString());  }  manifestFile.delete();  jar.deleteOnExit();  return jar;}  }
class C{  public void addSelectionListener(final SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  selectionListeners.add(listener);}  }
class C{  public synchronized void removeOption(String key){  Key k=new Key(key);  options.remove(key);  HashSet<String> on=optionNames.get(k.getSectionName());  if (on != null) {    on.remove(k.getOptionName());    if (on.isEmpty()) {      cleanupSection(k.getSectionName());    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue05.class,args);}  }
class C{  public static void start() throws Exception {  init();  SignerClient.init(actorSystem);}  }
class C{  public boolean isBefore(@NonNull CalendarDay other){  if (other == null) {    throw new IllegalArgumentException("other cannot be null");  }  if (year == other.year) {    return ((month == other.month) ? (day < other.day) : (month < other.month));  } else {    return year < other.year;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:33.711 -0400",hash_original_method="7009A6FE18DDB7DEEE74B6A284659EE0",hash_generated_method="130D242C7828BA36B1B183EDE0AFFEF2") public ReflectiveOperationException(Throwable cause){  super(cause);}  }
class C{  private void fieldInsn(final int opcode,final Type ownerType,final String name,final Type fieldType){  mv.visitFieldInsn(opcode,ownerType.getInternalName(),name,fieldType.getDescriptor());}  }
class C{  private static void thresholdBlock(byte[] luminances,int xoffset,int yoffset,int threshold,int stride,BitMatrix matrix){  for (int y=0, offset=yoffset * stride + xoffset; y < BLOCK_SIZE; y++, offset+=stride) {    for (int x=0; x < BLOCK_SIZE; x++) {      if ((luminances[offset + x] & 0xFF) <= threshold) {        matrix.set(xoffset + x,yoffset + y);      }    }  }}  }
class C{  public ThriftReply(int seqId,Throwable cause){  super(cause);  this.seqId=seqId;}  }
class C{  public Tap(TapType type,String name,int delay){  mType=type;  mName=name;  mDelay=delay;}  }
class C{  public BaseThumbnailSetRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public void addHistory(MessageHistory history){synchronized (messageHistories) {    messageHistories.add(history);  }}  }
class C{  public boolean isZero(){  return OriginalFirstThunk == 0;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.264 -0500",hash_original_method="FC082FCC77B50E96B6B6DB58BAB97957",hash_generated_method="1868059E578F334541C694CC2C8E1356") public ConcurrentHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public MailMessage addRecipientCc(String address){  if (address != null) {    cc.add(address);  }  return this;}  }
class C{  private boolean shouldWeAsk(String permission){  return (sharedPreferences.getBoolean(permission,true));}  }
class C{  public static long longFromBase64(String value){  int pos=0;  long longVal=base64Values[value.charAt(pos++)];  int len=value.length();  while (pos < len) {    longVal<<=6;    longVal|=base64Values[value.charAt(pos++)];  }  return longVal;}  }
class C{  public void writeText(Object text,String componentPropertyName) throws IOException {  if (text == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"text"));  }  closeStartIfNecessary();  if (dontEscape) {    writer.write(text.toString());  } else {    ensureTextBufferCapacity(text.toString());    HtmlUtils.writeText(writer,true,true,buffer,text.toString(),textBuffer);  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.add(new Option("\tEnables debug output.\n" + "\t(default: off)","D",0,"-D"));  result.add(new Option("\tStores the filename in an additional attribute.\n" + "\t(default: off)","F",0,"-F"));  result.add(new Option("\tThe directory to work on.\n" + "\t(default: current directory)","dir",0,"-dir <directory>"));  result.add(new Option("\tThe character set to use, e.g UTF-8.\n\t" + "(default: use the default character set)","charset",1,"-charset <charset name>"));  return result.elements();}  }
class C{  public void split(){  if (!needsSplitting()) {    return;  }  Node parent=getParentNode();  String[] parts=getData().split("\\]\\]>");  parent.insertBefore(new CDATASectionImpl(document,parts[0] + "]]"),this);  for (int p=1; p < parts.length - 1; p++) {    parent.insertBefore(new CDATASectionImpl(document,">" + parts[p] + "]]"),this);  }  setData(">" + parts[parts.length - 1]);}  }
class C{  private void awaitItems() throws IgniteInterruptedCheckedException {  U.await(takeLatch);}  }
class C{  private Sprite[] extractTiles(final SpriteStore store,final Sprite sprite,final int size){  final int rows=sprite.getHeight() / size;  final int cols=sprite.getWidth() / size;  final Sprite[] sprites=new Sprite[rows * cols];  int idx=0;  int y=0;  for (int row=0; row < rows; row++) {    int x=0;    for (int col=0; col < cols; col++) {      sprites[idx++]=store.getTile(sprite,x,y,size,size);      x+=size;    }    y+=size;  }  return sprites;}  }
class C{  private List<Volume> fetchVolumeDetailsById(List<String> volumeIdList) throws SOSFailure {  final String methodName="fetchVolumeDetailsById(): ";  final String VOLUME_DETAIL_URI="/block/volumes/%s";  log.trace(methodName + "Entry with input: volumeIdList[" + volumeIdList+ "]");  List<Volume> volumeDetailList=new ArrayList<Volume>();  try {    if (volumeIdList != null) {      for (      String volumeId : volumeIdList) {        Volume volume=_client.queryObject(String.format(VOLUME_DETAIL_URI,volumeId),Volume.class);        if (volume != null) {          if (!volume.isInactive() && volume.getId() != null) {            volumeDetailList.add(volume);            log.trace(methodName + volume);          }        }      }    }  } catch (  NoSuchAlgorithmException e) {    log.error(methodName + "NoSuchAlgorithmException occured",e);    throw new SOSFailure(e);  }catch (  UniformInterfaceException e) {    log.error(methodName + "UniformInterfaceException occured",e);    throw new SOSFailure(e);  }  log.trace(methodName + "Exit returning volume list of size[" + volumeDetailList.size()+ "]");  return volumeDetailList;}  }
class C{  public MemoryStore(){  setSupportedIsolationLevels(IsolationLevels.NONE,IsolationLevels.READ_COMMITTED,IsolationLevels.SNAPSHOT_READ,IsolationLevels.SNAPSHOT,IsolationLevels.SERIALIZABLE);  setDefaultIsolationLevel(IsolationLevels.SNAPSHOT_READ);}  }
class C{  public static byte mask(final byte bits,final int... m){  byte b=0;  for (int i=0; i < m.length; i++) {    if (m[i] < 0 || m[i] > 7) {      throw new IndexOutOfBoundsException();    }    b|=(0x1 << m[i]);  }  b&=bits;  return b;}  }
class C{  private static int parseNumericFontWeight(String fontWeightString){  return fontWeightString.length() == 3 && fontWeightString.endsWith("00") && fontWeightString.charAt(0) <= '9' && fontWeightString.charAt(0) >= '1' ? 100 * (fontWeightString.charAt(0) - '0') : -1;}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  return readDirect(b,off,len);}  }
class C{  public MethodInfo findMethod(MethodInfo mproto){  Deque<ClassDetail> q=new ArrayDeque<ClassDetail>();  q.push(this);  while (!q.isEmpty()) {    ClassDetail detail=q.pop();    MethodInfo mi=detail.findMethodHere(mproto);    if (mi != null) {      return mi;    }    if (detail.superClass != null)     q.push(detail.superClass.getDetails());    for (    ClassInfo i : detail.interfaces)     q.push(i.getDetails());  }  return null;}  }
class C{  public PagingList<ResultSet> pagingQuery(String table,String[] columns,String selection,String[] selectionArgs,String groupBy,String having,String orderBy,int page,int pageSize){  if (orderBy == null && pageSize != 0)   throw new SQLException("orderBy cann't be null if define page and pageSize");  String orderWithLimit;  if (orderBy != null && pageSize != 0) {    orderWithLimit=String.format("%s LIMIT %s , %s",orderBy,(page - 1) * pageSize,pageSize);  } else {    orderWithLimit=orderBy;  }  Cursor cursor=null;  Cursor totalCursor=null;  try {    openDB();    PagingList<ResultSet> resultList=new PagingList<ResultSet>();    totalCursor=mSQLiteDatabase.query(table,new String[]{"count(*) as totalSize"},selection,selectionArgs,groupBy,having,null);    if (totalCursor.moveToNext()) {      int totalSize=totalCursor.getInt(0);      resultList.setTotalSize(totalSize);    }    cursor=mSQLiteDatabase.query(table,columns,selection,selectionArgs,groupBy,having,orderWithLimit);    if (cursor.getCount() < 1) {      return resultList;    } else {      parseCursorToResult(cursor,resultList);      return resultList;    }  } catch (  Exception ex) {    ex.printStackTrace();    return null;  } finally {    if (cursor != null)     cursor.close();    if (totalCursor != null)     totalCursor.close();  }}  }
class C{  public void logWarn(Object message){  logInternal(WARN,message,null);}  }
class C{  protected final void addComponent(String name,String componentType,String rendererType,Class handlerType){  this.factories.put(name,new UserComponentHandlerFactory(componentType,rendererType,handlerType));}  }
class C{  private static double[] initBoundingBox(double numberOfRows,double numberOfColumns){  double[] box=new double[4];  box[0]=0;  box[1]=0;  box[2]=numberOfColumns - 1;  box[3]=numberOfRows - 1;  logger.info("Using bounding box with xmin=" + box[0] + ", ymin="+ box[1]+ ", xmax="+ box[2]+ ", ymax="+ box[3]);  return box;}  }
class C{  public void onSerialDataReceive(OneSheeldDevice device,int data){}  }
class C{  public ActionEvent(Object source,int id,String command,int modifiers){  this(source,id,command,0,modifiers);}  }
class C{  private HttpResponse cursorToHttpResponse(Cursor cursor,String url){  if (cursor == null) {    return null;  }  if (url == null) {    url=cursor.getString(DbConstants.HTTP_CACHE_TABLE_URL_INDEX);  }  if (StringUtils.isEmpty(url)) {    return null;  }  HttpResponse httpResponse=new HttpResponse(url);  httpResponse.setResponseBody(cursor.getString(DbConstants.HTTP_CACHE_TABLE_RESPONSE_INDEX));  httpResponse.setExpiredTime(cursor.getLong(DbConstants.HTTP_CACHE_TABLE_EXPIRES_INDEX));  httpResponse.setType(cursor.getInt(DbConstants.HTTP_CACHE_TABLE_TYPE_INDEX));  return httpResponse;}  }
class C{  private boolean checkRangeStatements(AST selectStatement){  for (  AST rangeStatement : getRangeofSelectStatement(selectStatement)) {    AST child=rangeStatement.getFirstChild();    while (child != null) {      if (!isSelectionTargetValid(child)) {        return false;      }      child=child.getNextSibling();    }  }  return true;}  }
class C{  static boolean eq(Object o1,Object o2){  return o1 == null ? o2 == null : o1.equals(o2);}  }
class C{  public CPluginCachedCriterium(final View2D view2D,final com.google.security.zynamics.binnavi.API.plugins.ICriteriaSelectionPlugin.ICriterium plugin){  m_view2D=view2D;  m_plugin=plugin;  m_value=plugin.getFixedCriterium();}  }
class C{  public Element store(Object o){  Element warrants=new Element("warrants");  warrants.setAttribute("class","jmri.jmrit.logix.configurexml.WarrantManagerXml");  if (!GraphicsEnvironment.isHeadless()) {    storeNXParams(warrants);  }  WarrantManager manager=(WarrantManager)o;  Iterator<String> iter=manager.getSystemNameList().iterator();  while (iter.hasNext()) {    String sname=iter.next();    Warrant warrant=manager.getBySystemName(sname);    String uname=warrant.getUserName();    if (log.isDebugEnabled())     log.debug("Warrant: sysName= " + sname + ", userName= "+ uname);    Element elem=new Element("warrant");    elem.setAttribute("systemName",sname);    if (uname == null)     uname="";    if (uname.length() > 0) {      elem.setAttribute("userName",uname);    }    if (warrant instanceof SCWarrant) {      elem.setAttribute("wtype","SC");      elem.setAttribute("timeToPlatform","" + ((SCWarrant)warrant).getTimeToPlatform());    } else {      elem.setAttribute("wtype","normal");    }    String comment=warrant.getComment();    if (comment != null) {      Element c=new Element("comment");      c.addContent(comment);      elem.addContent(c);    }    List<BlockOrder> orders=warrant.getBlockOrders();    for (int j=0; j < orders.size(); j++) {      elem.addContent(storeOrder(orders.get(j),"blockOrder"));    }    BlockOrder viaOrder=warrant.getViaOrder();    if (viaOrder != null) {      elem.addContent(storeOrder(viaOrder,"viaOrder"));    }    BlockOrder avoidOrder=warrant.getAvoidOrder();    if (avoidOrder != null) {      elem.addContent(storeOrder(avoidOrder,"avoidOrder"));    }    List<ThrottleSetting> throttleCmds=warrant.getThrottleCommands();    for (int j=0; j < throttleCmds.size(); j++) {      elem.addContent(storeCommand(throttleCmds.get(j),"throttleCommand"));    }    elem.addContent(storeTrain(warrant,"train"));    warrants.addContent(elem);  }  return warrants;}  }
class C{  public static boolean await(final Condition condition,final long timeout) throws InterruptedException {  boolean awaited=false;  long timeoutRemaining=timeout;  long awaitStarted=System.currentTimeMillis();  while (!awaited && timeoutRemaining > 0) {    awaited=condition.await(timeoutRemaining,TimeUnit.MILLISECONDS);    timeoutRemaining-=System.currentTimeMillis() - awaitStarted;  }  return awaited;}  }
class C{  private void findWorkingDirectoryPath(){  absoluteWorkingDirectoryPath=files[0].getAbsolutePath();  boolean endsWithSlash=absoluteWorkingDirectoryPath.endsWith(File.separator);  absoluteWorkingDirectoryPath=absoluteWorkingDirectoryPath.substring(0,absoluteWorkingDirectoryPath.lastIndexOf(File.separatorChar,endsWithSlash ? absoluteWorkingDirectoryPath.length() - 2 : absoluteWorkingDirectoryPath.length() - 1));  CustomLogger.log("we found the absolute path " + absoluteWorkingDirectoryPath);}  }
class C{  void parse(){  ByteBuffer bb=byteBuffer;  bb.clear();  size=bb.getShort();  if (size > buffer.length) {    throw new IllegalStateException("Message size " + size + " is > buffer size "+ buffer.length);  }  bb.limit(size);  type=bb.get();  fromMemberId=bb.getShort();  term=bb.getInt();  commandSize=0;  numCommands=0;  timestamp=0;switch (type) {case TYPE_APPEND_ENTRY_REQ:    prevRid.set(bb.getInt(),bb.getInt());  commitIndex=bb.getInt();entryTerm=bb.getInt();isHeartbeat=entryTerm == 0;commandSize=bb.getShort();bufferOffset=bb.position();if (messageTracing) {if (isHeartbeat) {if (heartbeatTracing) {tracingInfo=String.format("H(cterm=%d eterm=%d index=%d ci=%d)",term,prevRid.term,prevRid.index,commitIndex);}} else {tracingInfo=String.format("AE(cterm=%d pterm=%d eterm=%d index=%d ci=%d size=%d)",term,prevRid.term,entryTerm,prevRid.index + 1,commitIndex,size - overhead[TYPE_APPEND_ENTRY_REQ]);}}numCommands=1;int s=overhead[TYPE_APPEND_ENTRY_REQ] + commandSize;int bo=bufferOffset;int cs=commandSize;while (s < size) {numCommands++;bo+=cs;cs=(0x0ff & buffer[bo]) << 8 | (0x0ff & buffer[bo + 1]);bo+=2;s+=cs + 2;}break;case TYPE_APPEND_ENTRY_REP:mnIndex=bb.getInt();success=bb.get() == 1;isHeartbeat=bb.get() == 1;if (messageTracing && (heartbeatTracing || !isHeartbeat)) {tracingInfo=String.format("%s(cterm=%d %s=%d %s)",isHeartbeat ? "h" : "ae",term,success ? "matchIndex" : "nextIndex",mnIndex,success ? "ok" : "fail");}break;case TYPE_REQUEST_VOTE_REQ:isPrevote=bb.get() == 1;prevRid.set(bb.getInt(),bb.getInt());if (messageTracing) {tracingInfo=String.format("RV(cterm=%d pterm=%d index=%d) %s",term,prevRid.term,prevRid.index,isPrevote ? "prevote" : "");}break;case TYPE_REQUEST_VOTE_REP:isPrevote=bb.get() == 1;voteGranted=bb.get() == 1;if (messageTracing) {tracingInfo=String.format("rv(cterm=%d %s) %s",term,voteGranted ? "yes" : "no",isPrevote ? "prevote" : "");}break;default :throw new IllegalStateException("Unknown message type " + type);}}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  private static void midPoint(PointF point,MotionEvent event){  float x=event.getX(0) + event.getX(1);  float y=event.getY(0) + event.getY(1);  point.set(x / 2f,y / 2f);}  }
class C{  public GCspyWait(){  super(Options.set,"GCSpy Wait","Should the VM wait for the visualiser to connect?",false);}  }
class C{  int toAttributes(int pAttr){  int attr=pAttr;  return attr;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (key: ");  result.append(key);  result.append(')');  return result.toString();}  }
class C{  private void init(String nomi_url,Integer max_point_number,Boolean bounding_box_flag){  if ((nomi_url != null) && !nomi_url.trim().isEmpty())   nominatimUrl=nomi_url.trim();  if (bounding_box_flag != null)   boundingBoxFlag=bounding_box_flag;  if (max_point_number != null)   maxPointNumber=max_point_number;}  }
class C{  @ObjectiveCName("sendDocumentWithPeer:withName:withMime:withThumb:withDescriptor:") public void sendDocument(Peer peer,String fileName,String mimeType,FastThumb fastThumb,String descriptor){  modules.getMessagesModule().sendDocument(peer,fileName,mimeType,fastThumb,descriptor);}  }
class C{  public void flushBuffer(){  try {    _out.flushBuffer();  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public SabresQuery<T> whereGreaterThanOrEqual(String key,Object value){  addWhere(key,Where.greaterThanOrEqual(key,SabresValue.create(value)));  return this;}  }
class C{  public void addContent(String header,Component body){  addContent(new Label(header),body);}  }
class C{  public RelationalVal(String string){  super(string);}  }
class C{  public static boolean isWeakKey(byte[] key,int offset){  if (key.length - offset < DES_KEY_LENGTH) {    throw new IllegalArgumentException("key material too short.");  }  nextkey:   for (int i=0; i < N_DES_WEAK_KEYS; i++) {    for (int j=0; j < DES_KEY_LENGTH; j++) {      if (key[j + offset] != DES_weak_keys[i * DES_KEY_LENGTH + j]) {        continue nextkey;      }    }    return true;  }  return false;}  }
class C{  void outputEntityDecl(String name,String value) throws IOException {  final java.io.Writer writer=m_writer;  writer.write("<!ENTITY ");  writer.write(name);  writer.write(" \"");  writer.write(value);  writer.write("\">");  writer.write(m_lineSep,0,m_lineSepLen);}  }
class C{  public void test_simpleRemoveAll(){  final IRawStore store=new SimpleMemoryRawStore();  try {    final Random r=new Random();    final HTreeIndexMetadata metadata=new HTreeIndexMetadata(UUID.randomUUID());    metadata.setAddressBits(2);    final HTree htree=HTree.create(store,metadata);    final byte[] key=new byte[]{1,2,3};    final byte[] val=new byte[24];    r.nextBytes(val);    final int entries=23;    for (int i=0; i < entries; i++) {      htree.insert(key,val);    }    final byte[] altkey=new byte[]{2,3,4};    final int altentries=11;    for (int i=0; i < altentries; i++) {      htree.insert(altkey,val);    }    assertEquals(entries + altentries,htree.getEntryCount());    final DirectoryPage root=(DirectoryPage)htree.getRoot();    TestCase3.assertEquals(val,htree.lookupFirst(key));    assertEquals(entries,htree.removeAll(key));    assertEquals(altentries,htree.getEntryCount());    TestCase3.assertEquals(null,htree.lookupFirst(key));  }  finally {    store.destroy();  }}  }
class C{  private static SecretKey constructAESKey(int len) throws IllegalArgumentException {  if ((len != 16) && (len != 24) && (len != 32)) {    throw new IllegalArgumentException("Wrong Key Length: " + len);  }  byte[] keyval=new byte[len];  return new SecretKeySpec(keyval,"AES");}  }
class C{  public static void failure(String s){  allPassed=false;  System.out.println(ANSI_RED + "FAILURE: " + s+ ANSI_RESET);}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,Map map){  buffer.append(map);}  }
class C{  void loadUrlAndTrackFromTimestamp(LoadUrlParams params,long timestamp){  mTabObserver.trackNextPageLoadFromTimestamp(timestamp);  if (mShouldReplaceCurrentEntry)   params.setShouldReplaceCurrentEntry(true);  mShouldReplaceCurrentEntry=false;  loadUrl(params);}  }
class C{  void acknowledgeCancel(){  boolean shouldStartFlow=false;  Object discardedIntermediateValue=null;synchronized (this) {    if (runState == CANCEL_REQUESTED) {      runState=IDLE;      if (intermediateValue != currentValue) {        discardedIntermediateValue=intermediateValue;        intermediateValue=currentValue;      }      shouldStartFlow=restartNeeded;    }  }  if (discardedIntermediateValue != null) {    discardedValuesDisposer.accept(discardedIntermediateValue);  }  if (shouldStartFlow) {    maybeStartFlow();  }}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof RealmAttribute))   return false;  if (obj == this)   return true;  RealmAttribute att=(RealmAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || !Arrays.equals(att.realm,realm))   return false;  return true;}  }
class C{  public String optString(int index,String defaultValue){  Object o=opt(index);  return o != null ? o.toString() : defaultValue;}  }
class C{  public static double expQuick(double value){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.exp(value) : Math.exp(value);  }  if (false) {    return Double.longBitsToDouble((long)(EXP_QUICK_A * value + (EXP_QUICK_B - EXP_QUICK_C)));  }  return Double.longBitsToDouble(((long)(int)(EXP_QUICK_A / (1L << 32) * value + (EXP_QUICK_B - EXP_QUICK_C) / (1L << 32))) << 32);}  }
class C{  public int search(String text){  return search(text,false);}  }
class C{  @Override public void configure(JobConf job){  String[] parts=job.get(MRConfigurationNames.MR_TASK_ATTEMPT_ID).split("_");  if (parts[0].equalsIgnoreCase("task")) {    _mapTaskID=Integer.parseInt(parts[parts.length - 1]);  } else   if (parts[0].equalsIgnoreCase("attempt")) {    _mapTaskID=Integer.parseInt(parts[parts.length - 2]);  } else {    throw new RuntimeException("Unrecognized format for taskID: " + job.get(MRConfigurationNames.MR_TASK_ATTEMPT_ID));  }  try {    _partFileName=TfUtils.getPartFileName(job);    _partFileWithHeader=TfUtils.isPartFileWithHeader(job);    _agents=new TfUtils(job);  } catch (  IOException e) {    throw new RuntimeException(e);  }catch (  JSONException e) {    throw new RuntimeException(e);  }}  }
class C{  @SuppressWarnings("SignalWithoutCorrespondingAwait") private long internalUpdate(long l,@Nullable Callable<Long> updateCall,boolean updated) throws IgniteCheckedException {  checkRemoved();  assert l > 0;  lock.lock();  try {    if (locVal + l <= upBound) {      long curVal=locVal;      locVal+=l;      return updated ? locVal : curVal;    }  }  finally {    lock.unlock();  }  if (updateCall == null)   updateCall=internalUpdate(l,updated);  while (true) {    if (updateGuard.compareAndSet(false,true)) {      try {        return CU.outTx(updateCall,ctx);      }  finally {        lock.lock();        try {          updateGuard.set(false);          cond.signalAll();        }  finally {          lock.unlock();        }      }    } else {      lock.lock();      try {        while (locVal >= upBound && updateGuard.get())         U.await(cond,500,MILLISECONDS);        checkRemoved();        if (locVal + l <= upBound) {          long curVal=locVal;          locVal+=l;          return updated ? locVal : curVal;        }      }  finally {        lock.unlock();      }    }  }}  }
class C{  public String userIdFromDate(Object prefixLength,String dateFormat){  return userIdDate(prefixLength,dateFormat);}  }
class C{  public synchronized StatusHistoryEntry addFavorite(String title,String game){  return setFavorite(title,game,true);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.SHIFT_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)newValue);  return;case ExpressionsPackage.SHIFT_EXPRESSION__OPERATOR:setOperator((ShiftOperator)newValue);return;case ExpressionsPackage.SHIFT_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private synchronized void processDirectionPress(final Direction direction,final boolean facing){  if (directionRelease != null) {    if (directionRelease.check(direction,facing)) {      directionRelease=null;      return;    } else {      client.removeDirection(directionRelease.getDirection(),directionRelease.isFacing());      directionRelease=null;    }  }  if (client.addDirection(direction,facing)) {    User user=User.get();    if (user != null) {      user.predictMovement(direction,facing);    }  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static Comparable<?> max(Comparable<?>[] ar){  Comparable ret=ar[0];  for (int i=1; i < ar.length; i++) {    if (ret.compareTo(ar[i]) < 0) {      ret=ar[i];    }  }  return ret;}  }
class C{  public ResourceServlet(Resource resource){  this.resource=resource;}  }
class C{  public int hashCode(){  return m_AD_Language.hashCode();}  }
class C{  protected void visitTerm(TermsEnum te,int termNum) throws IOException {}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:29.135 -0500",hash_original_method="C26983A19295502D4CFCF4D89E5CA369",hash_generated_method="620EF765CC501E9F296E5352F3847065") public Drawable loadThumbnail(PackageManager pm){  if (mThumbnailResource < 0)   return null;  return pm.getDrawable(mService.serviceInfo.packageName,mThumbnailResource,mService.serviceInfo.applicationInfo);}  }
class C{  public static double sumColumn(double[][] m,int columnIndex){  double sum=0;  for (int row=0; row < m.length; row++) {    sum+=m[row][columnIndex];  }  return sum;}  }
class C{  public void testTruncating() throws Exception {  Reader reader=new StringReader("abcdefg 1234567 ABCDEFG abcde abc 12345 123");  TokenStream stream=new MockTokenizer(MockTokenizer.WHITESPACE,false);  ((Tokenizer)stream).setReader(reader);  stream=tokenFilterFactory("Truncate",TruncateTokenFilterFactory.PREFIX_LENGTH_KEY,"5").create(stream);  assertTokenStreamContents(stream,new String[]{"abcde","12345","ABCDE","abcde","abc","12345","123"});}  }
class C{  public OptionalInt mapToInt(ToIntFunction<? super T> mapper){  if (!isPresent())   return OptionalInt.empty();  return OptionalInt.of(mapper.applyAsInt(value));}  }
class C{  public String reportInstrumentation(){  int setCount=0;  for (  List sizeList : sizeToSets.values()) {    setCount+=sizeList.size();  }  if (setCount != registeredSets) {    throw new IllegalStateException("ThrowableSet.reportInstrumentation() assertion failure: registeredSets != list count");  }  StringBuffer buf=new StringBuffer("registeredSets: ").append(setCount).append("\naddsOfRefType: ").append(addsOfRefType).append("\naddsOfAnySubType: ").append(addsOfAnySubType).append("\naddsOfSet: ").append(addsOfSet).append("\naddsInclusionFromMap: ").append(addsInclusionFromMap).append("\naddsInclusionFromMemo: ").append(addsInclusionFromMemo).append("\naddsInclusionFromSearch: ").append(addsInclusionFromSearch).append("\naddsInclusionInterrupted: ").append(addsInclusionInterrupted).append("\naddsExclusionWithoutSearch: ").append(addsExclusionWithoutSearch).append("\naddsExclusionWithSearch: ").append(addsExclusionWithSearch).append("\nremovesOfAnySubType: ").append(removesOfAnySubType).append("\nremovesFromMap: ").append(removesFromMap).append("\nremovesFromMemo: ").append(removesFromMemo).append("\nremovesFromSearch: ").append(removesFromSearch).append("\nregistrationCalls: ").append(registrationCalls).append("\ncatchableAsQueries: ").append(catchableAsQueries).append("\ncatchableAsFromMap: ").append(catchableAsFromMap).append("\ncatchableAsFromSearch: ").append(catchableAsFromSearch).append('\n');  return buf.toString();}  }
class C{  @RequestMapping(value="/users",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<?> createUser(@RequestBody ManagedUserDTO managedUserDTO,HttpServletRequest request) throws URISyntaxException {}  }
class C{  public void testGetters1(){  LayoutBuilder b=builder();  FontMetricsInt fmi=b.paint.getFontMetricsInt();  Log.i("TG1:paint",fmi.toString());  Layout l=b.build();  assertVertMetrics(l,0,0,fmi.ascent,fmi.descent);  assertEquals(0,l.getLineStart(0));  assertEquals(Layout.DIR_LEFT_TO_RIGHT,l.getParagraphDirection(0));  assertEquals(false,l.getLineContainsTab(0));  assertEquals(Layout.DIRS_ALL_LEFT_TO_RIGHT,l.getLineDirections(0));  assertEquals(0,l.getEllipsisCount(0));  assertEquals(0,l.getEllipsisStart(0));  assertEquals(b.width,l.getEllipsizedWidth());}  }
class C{  public void doGetJson(HttpServletRequest request,HttpServletResponse response,String type,String location,String id) throws ServletException, IOException {  response.setContentType("application/json; charset=utf-8");  PrintWriter writer=response.getWriter();  if (id != null) {  } else {    String tmp=request.getParameter(__PG_START_PARAM);    int pgStart=(tmp == null ? -1 : Integer.parseInt(tmp.trim()));    tmp=request.getParameter(__PG_SIZE_PARAM);    int pgSize=(tmp == null ? -1 : Integer.parseInt(tmp.trim()));    Uri mediaUri=MediaType.getContentUriByType(type,location);    StringBuilder builder=new StringBuilder();    MediaCollection collection=null;    writer.println("{");    try {      collection=new MediaCollection(resolver.query(mediaUri,null,null,null,MediaStore.MediaColumns.TITLE + " ASC"),pgStart,pgSize);      writer.println("\"total\": " + collection.getTotal() + ", ");      writer.println("\"media\": ");      writer.print("[ ");      ContentValues media=null;      int count=pgSize;      while ((pgSize <= 0 || count-- > 0) && (media=collection.next()) != null) {        builder.setLength(0);        toJson(media,mediaUri,builder,type,location);        Log.d(TAG,builder.toString());        writer.print(builder.toString());        if (collection.hasNext()) {          writer.print(",");        }      }      writer.print(" ]");    }  finally {      writer.println("}");      collection.close();    }  }}  }
class C{  public static void sendIdeaEmail(Context context){  Intent intent=new Intent(Intent.ACTION_SEND);  intent.setType("text/plain");  intent.putExtra(Intent.EXTRA_EMAIL,new String[]{context.getString(R.string.feedback_email)});  intent.putExtra(Intent.EXTRA_SUBJECT,context.getString(R.string.feedback_idea_subject));  intent.putExtra(Intent.EXTRA_TEXT,context.getString(R.string.feedback_idea_message));  sendIntent(context,intent);}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  if ("getDeviceInfo".equals(action)) {    JSONObject r=new JSONObject();    r.put("uuid",Device.uuid);    r.put("version",this.getOSVersion());    r.put("platform",this.getPlatform());    r.put("model",this.getModel());    r.put("manufacturer",this.getManufacturer());    r.put("isVirtual",this.isVirtual());    r.put("serial",this.getSerialNumber());    callbackContext.success(r);  } else {    return false;  }  return true;}  }
class C{  public boolean isDrawCenterTextEnabled(){  return mDrawCenterText;}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec08(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,null,BigInteger.ONE,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  private static long lf_ch(long x,long y,long z){  return (x & y) ^ ((~x) & z);}  }
class C{  public T caseSourceFragment(SourceFragment object){  return null;}  }
class C{  public void removeListener(final IPerspectiveModelListener listener){  m_listeners.removeListener(listener);}  }
class C{  private void defineInternalFrameIconifyButtons(UIDefaults d){  String p="InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.iconifyButton\"";  String c=PAINTER_PREFIX + "TitlePaneIconifyButtonPainter";  d.put(p + ".States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,WindowNotFocused,WindowMinimized");  d.put(p + ".WindowNotFocused",new TitlePaneIconifyButtonWindowNotFocusedState());  d.put(p + ".WindowMinimized",new TitlePaneIconifyButtonWindowMinimizedState());  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,TitlePaneIconifyButtonPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,TitlePaneIconifyButtonPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[MouseOver].backgroundPainter",new LazyPainter(c,TitlePaneIconifyButtonPainter.Which.BACKGROUND_MOUSEOVER));  d.put(p + "[Pressed].backgroundPainter",new LazyPainter(c,TitlePaneIconifyButtonPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[Enabled+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneIconifyButtonPainter.Which.BACKGROUND_ENABLED_WINDOWNOTFOCUSED));  d.put(p + "[MouseOver+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneIconifyButtonPainter.Which.BACKGROUND_MOUSEOVER_WINDOWNOTFOCUSED));  d.put(p + "[Pressed+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneIconifyButtonPainter.Which.BACKGROUND_PRESSED_WINDOWNOTFOCUSED));  d.put(p + "[Disabled+WindowMinimized].backgroundPainter",new LazyPainter(c,TitlePaneIconifyButtonPainter.Which.BACKGROUND_MINIMIZED_DISABLED));  d.put(p + "[Enabled+WindowMinimized].backgroundPainter",new LazyPainter(c,TitlePaneIconifyButtonPainter.Which.BACKGROUND_MINIMIZED_ENABLED));  d.put(p + "[MouseOver+WindowMinimized].backgroundPainter",new LazyPainter(c,TitlePaneIconifyButtonPainter.Which.BACKGROUND_MINIMIZED_MOUSEOVER));  d.put(p + "[Pressed+WindowMinimized].backgroundPainter",new LazyPainter(c,TitlePaneIconifyButtonPainter.Which.BACKGROUND_MINIMIZED_PRESSED));  d.put(p + "[Enabled+WindowMinimized+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneIconifyButtonPainter.Which.BACKGROUND_MINIMIZED_ENABLED_WINDOWNOTFOCUSED));  d.put(p + "[MouseOver+WindowMinimized+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneIconifyButtonPainter.Which.BACKGROUND_MINIMIZED_MOUSEOVER_WINDOWNOTFOCUSED));  d.put(p + "[Pressed+WindowMinimized+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneIconifyButtonPainter.Which.BACKGROUND_MINIMIZED_PRESSED_WINDOWNOTFOCUSED));  d.put(p + ".icon",new SeaGlassIcon(p,"iconPainter",26,18));}  }
class C{  public void removeTrailingEmptyLines(){  Line line=this.lineTail;  while (line != null && line.isEmpty) {    this.removeLine(line);    line=this.lineTail;  }}  }
class C{  public void stopExpiring(){  stateLock.writeLock().lock();  try {    if (running) {      running=false;      expirerThread.interrupt();    }  }  finally {    stateLock.writeLock().unlock();  }}  }
class C{  public static Class<?> wrapperFor(Type primitiveType){  return requireNonNull(WRAPPERS.get(primitiveType.getTypeName()),"No wrapper found for type '" + primitiveType.getTypeName() + "'.");}  }
class C{  public static SelectorExtractor selectorh(String query){  return new SelectorExtractor(query).htmlParser();}  }
class C{  public Anonymous_constantDeclaration_1_ createAnonymous_constantDeclaration_1_(){  Anonymous_constantDeclaration_1_Impl anonymous_constantDeclaration_1_=new Anonymous_constantDeclaration_1_Impl();  return anonymous_constantDeclaration_1_;}  }
class C{  public static int roundingModeFromString(String value){  if (value == null)   return -1;  value=value.trim();  if ("ROUND_HALF_UP".equals(value))   return BigDecimal.ROUND_HALF_UP; else   if ("ROUND_HALF_DOWN".equals(value))   return BigDecimal.ROUND_HALF_DOWN; else   if ("ROUND_HALF_EVEN".equals(value))   return BigDecimal.ROUND_HALF_EVEN; else   if ("ROUND_UP".equals(value))   return BigDecimal.ROUND_UP; else   if ("ROUND_DOWN".equals(value))   return BigDecimal.ROUND_DOWN; else   if ("ROUND_CEILING".equals(value))   return BigDecimal.ROUND_CEILING; else   if ("ROUND_FLOOR".equals(value))   return BigDecimal.ROUND_FLOOR; else   if ("ROUND_UNNECCESSARY".equals(value))   return BigDecimal.ROUND_UNNECESSARY;  return -1;}  }
class C{  public void cancelForVersion(int major,int minor) throws SQLException {  String dbVersion=sharedConnection.getMetaData().getDatabaseProductVersion();  Assume.assumeFalse(dbVersion.startsWith(major + "." + minor));}  }
class C{  public Task<ComputeImageRestRep> update(URI id,ComputeImageUpdate input){  return putTask(input,getIdUrl(),id);}  }
class C{  public boolean isAccessibilityComputationAreaFromShapeFile(){  return accessibilityComputationAreaFromShapeFile;}  }
class C{  public void buildClassifier(Instances data) throws Exception {  m_Classifier.buildClassifier(setUp(data));}  }
class C{  public static boolean postFileToServer(String server,String deviceId,String timestamp,File file){  try {    Log.d(LOG_TAG,"Uploading begining");    HttpClient httpClient=new DefaultHttpClient();    String uri=server;    if (!uri.endsWith("/")) {      uri+="/";    }    uri+="upload";    Log.d(LOG_TAG,"Upload url:" + uri);    HttpPost postRequest=new HttpPost(uri);    Part[] parts={new StringPart("device_id",deviceId),new StringPart("timestamp",timestamp),new FilePart("file",file)};    MultipartEntity reqEntity=new MultipartEntity(parts,postRequest.getParams());    postRequest.setEntity(reqEntity);    HttpResponse res=httpClient.execute(postRequest);    res.getEntity().getContent().close();  } catch (  IOException e) {    Log.e(LOG_TAG,"Could not upload file with error: " + e);    return false;  }  return true;}  }
class C{  public final void normalizeCP(){  double mag=1.0 / Math.sqrt(m00 * m00 + m10 * m10 + m20 * m20);  m00=m00 * mag;  m10=m10 * mag;  m20=m20 * mag;  mag=1.0 / Math.sqrt(m01 * m01 + m11 * m11 + m21 * m21);  m01=m01 * mag;  m11=m11 * mag;  m21=m21 * mag;  m02=m10 * m21 - m11 * m20;  m12=m01 * m20 - m00 * m21;  m22=m00 * m11 - m01 * m10;}  }
class C{  public boolean add(Coordinate[] coord,boolean allowRepeated,int start,int end){  int inc=1;  if (start > end)   inc=-1;  for (int i=start; i != end; i+=inc) {    add(coord[i],allowRepeated);  }  return true;}  }
class C{  @Override public final String toString(){  return name;}  }
class C{  public SyncOfferMessage(SyncOfferMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }  if (other.isSetVersions()) {    List<KeyedVersions> __this__versions=new ArrayList<KeyedVersions>();    for (    KeyedVersions other_element : other.versions) {      __this__versions.add(new KeyedVersions(other_element));    }    this.versions=__this__versions;  }}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(AdSenseHostSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from " + "https://code.google.com/apis/console/?api=adsensehost into " + "adsensehost-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,Collections.singleton(AdSenseHostScopes.ADSENSEHOST)).setDataStoreFactory(DATA_STORE_FACTORY).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Playlist p=getPlaylist(stack);  return new Integer(p == null ? 0 : p.getNumSegments());}  }
class C{  private void addNewKeyToComponent(String key,Component component) throws ProviderConflictException {  Component root=getRootComponent();  if (componentLocator.keySet().contains(key)) {    String msg=String.format("Type %s has already been registered " + "in this component(%s).",key,getComponentId());    throw new ProviderConflictException(msg);  }  if (root != this && root.componentLocator.keySet().contains(key)) {    String msg=String.format("\nClass type %s cannot be registered to component(%s)\nsince it's  " + "already been registered in its root component(%s).\n\nYou can prepare a child " + "component and register providers to it first. Then attach the child component\nto the "+ "component tree with allowOverridden flag set true",key,getComponentId(),getRootComponent().getComponentId());    throw new ProviderConflictException(msg);  }  root.componentLocator.put(key,component);}  }
class C{  public DChangePassword(JDialog parent,Dialog.ModalityType modality,Password oldPassword,PasswordQualityConfig passwordQualityConfig){  this(parent,res.getString("DChangePassword.Title"),modality,oldPassword,passwordQualityConfig);}  }
class C{  public boolean isProcess(){  return X_AD_Menu.ACTION_Process.equals(m_imageIndicator);}  }
class C{  public int playTurn(){  if (tooManyMoves()) {    return setCompletionState(DRAW);  }  if (player() == xPlayer) {    player(oPlayer);    if (!makeMove(xPlayer)) {      return setCompletionState(IN_PROGRESS);    }    advance();    if (gameState.isWin()) {      return setCompletionState(X_WINS);    }  } else {    player(xPlayer);    if (!makeMove(oPlayer)) {      return setCompletionState(IN_PROGRESS);    }    advance();    if (gameState.isWin()) {      return setCompletionState(O_WINS);    }  }  if (gameState.isDraw()) {    return setCompletionState(DRAW);  }  return setCompletionState(IN_PROGRESS);}  }
class C{  public MultipartBuilder attachment(String content,String filename){  ByteArrayInputStream is=new ByteArrayInputStream(content.getBytes());  return bodyPart(new StreamDataBodyPart(ATTACHMENT_NAME,is,filename));}  }
class C{  public static void run(String gtfsFolder,String serviceIdsParam,String outputCoordinateSystem,String scheduleFile,String vehicleFile,String shapeFile){  Logger.getLogger(MGC.class).setLevel(Level.ERROR);  TransitSchedule schedule=ScheduleTools.createSchedule();  Vehicles vehicles=VehicleUtils.createVehiclesContainer();  CoordinateTransformation transformation=outputCoordinateSystem != null ? TransformationFactory.getCoordinateTransformation("WGS84",outputCoordinateSystem) : new IdentityTransformation();  GtfsConverter gtfsConverter=new GtfsConverter(schedule,vehicles,transformation);  String param=serviceIdsParam == null ? DAY_WITH_MOST_SERVICES : serviceIdsParam;  gtfsConverter.run(gtfsFolder,param);  boolean authExists=true;  ScheduleTools.writeTransitSchedule(gtfsConverter.getSchedule(),scheduleFile);  if (vehicleFile != null) {    ScheduleTools.writeVehicles(gtfsConverter.getVehicles(),vehicleFile);  }  if (shapeFile != null) {    try {      MGC.getCRS(outputCoordinateSystem);    } catch (    Exception e) {      authExists=false;      log.warn("Code " + outputCoordinateSystem + " not recognized by geotools. Shapefile not written.");    }    if (authExists)     GtfsShapeFileTools.writeGtfsTripsToFile(gtfsConverter.getGtfsRoutes(),gtfsConverter.getServiceIds(),outputCoordinateSystem,shapeFile);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @SuppressWarnings("unchecked") private static List<Integer> parseRecodeColIDs(String spec,String[] colnames) throws IOException {  if (spec == null)   throw new IOException("Missing transform specification.");  List<Integer> specRecodeIDs=null;  try {    JSONObject jSpec=new JSONObject(spec);    List<Integer> rcIDs=Arrays.asList(ArrayUtils.toObject(TfMetaUtils.parseJsonIDList(jSpec,colnames,TfUtils.TXMETHOD_RECODE)));    List<Integer> dcIDs=Arrays.asList(ArrayUtils.toObject(TfMetaUtils.parseJsonIDList(jSpec,colnames,TfUtils.TXMETHOD_DUMMYCODE)));    specRecodeIDs=new ArrayList<Integer>(CollectionUtils.union(rcIDs,dcIDs));  } catch (  Exception ex) {    throw new IOException(ex);  }  return specRecodeIDs;}  }
class C{  @Override public void abort(){  transaction.abort();}  }
class C{  static RegisterOperand InsertLoadOffset(Instruction s,IR ir,Operator operator,TypeReference type,Operand reg2,Offset offset){  return InsertLoadOffset(s,ir,operator,type,reg2,offset,null,null);}  }
class C{  public void put(String key,Boolean value){  mValues.put(key,value);}  }
class C{  private void angularObjectUpdated(NotebookSocket conn,HashSet<String> userAndRoles,Notebook notebook,Message fromMessage){  String noteId=(String)fromMessage.get("noteId");  String paragraphId=(String)fromMessage.get("paragraphId");  String interpreterGroupId=(String)fromMessage.get("interpreterGroupId");  String varName=(String)fromMessage.get("name");  Object varValue=fromMessage.get("value");  String user=fromMessage.principal;  AngularObject ao=null;  boolean global=false;  Note note=notebook.getNote(noteId);  if (note != null) {    List<InterpreterSetting> settings=notebook.getInterpreterFactory().getInterpreterSettings(note.getId());    for (    InterpreterSetting setting : settings) {      if (setting.getInterpreterGroup(user,note.getId()) == null) {        continue;      }      if (interpreterGroupId.equals(setting.getInterpreterGroup(user,note.getId()).getId())) {        AngularObjectRegistry angularObjectRegistry=setting.getInterpreterGroup(user,note.getId()).getAngularObjectRegistry();        ao=angularObjectRegistry.get(varName,noteId,paragraphId);        if (ao == null) {          ao=angularObjectRegistry.get(varName,noteId,null);          if (ao == null) {            ao=angularObjectRegistry.get(varName,null,null);            if (ao == null) {              LOG.warn("Object {} is not binded",varName);            } else {              ao.set(varValue,false);              global=true;            }          } else {            ao.set(varValue,false);            global=false;          }        } else {          ao.set(varValue,false);          global=false;        }        break;      }    }  }  if (global) {    for (    Note n : notebook.getAllNotes()) {      List<InterpreterSetting> settings=notebook.getInterpreterFactory().getInterpreterSettings(note.getId());      for (      InterpreterSetting setting : settings) {        if (setting.getInterpreterGroup(user,n.getId()) == null) {          continue;        }        if (interpreterGroupId.equals(setting.getInterpreterGroup(user,n.getId()).getId())) {          AngularObjectRegistry angularObjectRegistry=setting.getInterpreterGroup(user,n.getId()).getAngularObjectRegistry();          this.broadcastExcept(n.getId(),new Message(OP.ANGULAR_OBJECT_UPDATE).put("angularObject",ao).put("interpreterGroupId",interpreterGroupId).put("noteId",n.getId()).put("paragraphId",ao.getParagraphId()),conn);        }      }    }  } else {    this.broadcastExcept(note.getId(),new Message(OP.ANGULAR_OBJECT_UPDATE).put("angularObject",ao).put("interpreterGroupId",interpreterGroupId).put("noteId",note.getId()).put("paragraphId",ao.getParagraphId()),conn);  }}  }
class C{  public boolean isUseSiteStructuralTyping(){  return false;}  }
class C{  private static JFreeChart createChart(XYDataset dataset){  JFreeChart chart=ChartFactory.createTimeSeriesChart("International Coffee Organisation : Coffee Prices",null,"US cents/lb",dataset);  String fontName="Palatino";  chart.getTitle().setFont(new Font(fontName,Font.BOLD,18));  chart.addSubtitle(new TextTitle("Source: http://www.ico.org/historical/2010-19/PDF/HIST-PRICES.pdf",new Font(fontName,Font.PLAIN,14)));  XYPlot plot=(XYPlot)chart.getPlot();  plot.setDomainPannable(true);  plot.setRangePannable(true);  plot.setDomainCrosshairVisible(true);  plot.setRangeCrosshairVisible(true);  plot.getDomainAxis().setLowerMargin(0.0);  plot.getDomainAxis().setLabelFont(new Font(fontName,Font.BOLD,14));  plot.getDomainAxis().setTickLabelFont(new Font(fontName,Font.PLAIN,12));  plot.getRangeAxis().setLabelFont(new Font(fontName,Font.BOLD,14));  plot.getRangeAxis().setTickLabelFont(new Font(fontName,Font.PLAIN,12));  chart.getLegend().setItemFont(new Font(fontName,Font.PLAIN,14));  chart.getLegend().setFrame(BlockBorder.NONE);  chart.getLegend().setHorizontalAlignment(HorizontalAlignment.CENTER);  XYItemRenderer r=plot.getRenderer();  if (r instanceof XYLineAndShapeRenderer) {    XYLineAndShapeRenderer renderer=(XYLineAndShapeRenderer)r;    renderer.setBaseShapesVisible(false);    renderer.setDrawSeriesLineAsPath(true);    renderer.setAutoPopulateSeriesStroke(false);    renderer.setBaseStroke(new BasicStroke(3.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_BEVEL),false);    renderer.setSeriesPaint(0,Color.RED);    renderer.setSeriesPaint(1,new Color(24,123,58));    renderer.setSeriesPaint(2,new Color(149,201,136));    renderer.setSeriesPaint(3,new Color(1,62,29));    renderer.setSeriesPaint(4,new Color(81,176,86));    renderer.setSeriesPaint(5,new Color(0,55,122));    renderer.setSeriesPaint(6,new Color(0,92,165));  }  return chart;}  }
class C{  public static void compute_tables(){  double start_depth=Constants.PreProcParam.RADIAL_IMG_INIT;  double image_size=Constants.PreProcParam.IMAGE_SIZE;  double start_of_data=Constants.PreProcParam.STEP_RADIAL_INIT;  double delta_r=Constants.PreProcParam.RADIAL_DATA_INIT;  int N_samples=(int)Math.floor(Constants.PreProcParam.NUM_SAMPLES);  double delta_theta=Constants.PreProcParam.STEP_ANGLE_INIT;  double theta_start=Constants.PreProcParam.NUM_LINES / 2 * delta_theta;  int N_lines=Constants.PreProcParam.NUM_LINES;  double scaling=Constants.PreProcParam.SCALE_FACTOR;  int Nz=Constants.PreProcParam.N_z;  int Nx=Constants.PreProcParam.N_x;  int Ncoef_max=4;  double weight_coef[]=new double[Nz * Nx * Ncoef_max];  int index_samp_line[]=new int[Nz * Nx];  int image_index[]=new int[Nz * Nx];  make_tables(start_depth,image_size,start_of_data,delta_r,N_samples,theta_start,-delta_theta,N_lines,scaling,Nz,Nx,weight_coef,index_samp_line,image_index);  image=new int[Nz * Nx];  N_samples=(int)Math.floor(Constants.PreProcParam.NUM_SAMPLES);  num=new int[Nz * Nx];}  }
class C{  public final boolean update(String name,String text,long lastModified){  VirtualLocalFile f=files.get(name);  if (f != null) {    f.text=text;    f.lastModified=lastModified;    return true;  } else {    return false;  }}  }
class C{  protected void statementPrepareAfter(PreparedStatementProxy statement){  statementLog("{conn-" + statement.getConnectionProxy().getId() + ", pstmt-"+ statement.getId()+ "} created. ");}  }
class C{  public List<TriggerKey> selectTriggerToAcquire(Connection conn,long noLaterThan,long noEarlierThan,int maxCount) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  List<TriggerKey> nextTriggers=new LinkedList<TriggerKey>();  try {    ps=conn.prepareStatement(rtp(SELECT_NEXT_TRIGGER_TO_ACQUIRE));    if (maxCount < 1)     maxCount=1;    ps.setMaxRows(maxCount);    ps.setFetchSize(maxCount);    ps.setString(1,STATE_WAITING);    ps.setBigDecimal(2,new BigDecimal(String.valueOf(noLaterThan)));    ps.setBigDecimal(3,new BigDecimal(String.valueOf(noEarlierThan)));    rs=ps.executeQuery();    while (rs.next() && nextTriggers.size() <= maxCount) {      nextTriggers.add(triggerKey(rs.getString(COL_TRIGGER_NAME),rs.getString(COL_TRIGGER_GROUP)));    }    return nextTriggers;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  @Override public int hashCode(){  return classHash() ^ slop ^ termArraysHashCode()^ Arrays.hashCode(positions);}  }
class C{  public String toString(){  return m_code;}  }
class C{  @Override public void start(){  super.start();  if (m_needToInitialize) {    doInitialize(m_battleTracker,m_bridge);    m_needToInitialize=false;  }  if (m_needToScramble) {    doScrambling();    m_needToScramble=false;  }  if (m_needToKamikazeSuicideAttacks) {    doKamikazeSuicideAttacks();    m_needToKamikazeSuicideAttacks=false;  }  if (m_needToClearEmptyAirBattleAttacks) {    clearEmptyAirBattleAttacks(m_battleTracker,m_bridge);    m_needToClearEmptyAirBattleAttacks=false;  }  if (m_needToAddBombardmentSources) {    addBombardmentSources();    m_needToAddBombardmentSources=false;  }}  }
class C{  void dropResource(final R resource){  final Thread tx=Thread.currentThread();synchronized (resourceQueues) {    final ResourceQueue<R,Thread> resourceQueue=resourceQueues.get(resource);    if (resourceQueue == null) {      throw new IllegalArgumentException("No such resource: " + resource);    }    resourceQueue.clear(tx);    resourceQueues.remove(resource);  }}  }
class C{  public void slowmodeOn(String channel,int time){  if (onChannel(channel,true)) {    if (time <= 0) {      sendMessage(channel,".slow","Trying to turn on slowmode..");    } else {      sendMessage(channel,".slow " + time,"Trying to turn on slowmode (" + time + "s)");    }  }}  }
class C{  public void instanceOf(final Type type){  typeInsn(Opcodes.INSTANCEOF,type);}  }
class C{  @Override public Object clone(){  ParserState newState=new ParserState();  newState.fillCS=fillCS;  newState.strokeCS=strokeCS;  newState.textFormat=(PDFTextFormat)textFormat.clone();  return newState;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  @POST @Path("validate") @Consumes(MediaType.APPLICATION_JSON) public Response validate(ValidationData validationData,@Context UriInfo uriInfo) throws ApiException, MessagingException, IOException {  inputDataValidator.validateUserMail(validationData.getEmail());  creationValidator.ensureUserCreationAllowed(validationData.getEmail(),validationData.getUsername());  Map<String,String> props=new HashMap<>();  props.put("logo.cid","codenvyLogo");  props.put("bearertoken",handler.generateBearerToken(validationData.getEmail(),validationData.getUsername(),Collections.singletonMap("initiator","email")));  props.put("additional.query.params",uriInfo.getRequestUri().getQuery());  props.put("com.codenvy.masterhost.url",uriInfo.getBaseUriBuilder().replacePath(null).build().toString());  File logo=new File(this.getClass().getResource(LOGO).getPath());  AttachmentDto attachmentDto=newDto(AttachmentDto.class).withContent(Base64.getEncoder().encodeToString(Files.toByteArray(logo))).withContentId(LOGO_CID).withFileName("logo.png");  EmailBeanDto emailBeanDto=newDto(EmailBeanDto.class).withBody(Deserializer.resolveVariables(readAndCloseQuietly(getResource("/" + MAIL_TEMPLATE)),props)).withFrom(mailSender).withTo(validationData.getEmail()).withReplyTo(null).withSubject("Verify Your Codenvy Account").withMimeType(TEXT_HTML).withAttachments(Collections.singletonList(attachmentDto));  mailSenderClient.sendMail(emailBeanDto);  LOG.info("EVENT#signup-validation-email-send# EMAIL#{}#",validationData.getEmail());  LOG.info("Email validation message send to {}",validationData.getEmail());  return Response.ok().build();}  }
class C{  protected Shape createArcShape(float x,float y,float fwidth,float fheight){  return new Ellipse2D.Float(x,y,fwidth,fheight);}  }
class C{  private void computeImpliedCovar(){  TetradMatrix edgeCoefT=edgeCoef().transpose();  this.implCovar=MatrixUtils.impliedCovar(edgeCoefT,errCovar(errorVariances()));  int size=getMeasuredNodes().size();  this.implCovarMeas=new TetradMatrix(size,size);  for (int i=0; i < size; i++) {    for (int j=0; j < size; j++) {      Node iNode=getMeasuredNodes().get(i);      Node jNode=getMeasuredNodes().get(j);      int _i=getVariableNodes().indexOf(iNode);      int _j=getVariableNodes().indexOf(jNode);      this.implCovarMeas.set(i,j,this.implCovar.get(_i,_j));    }  }}  }
class C{  public void update(EntityMissile missileObj){}  }
class C{  public int optInt(int index){  return optInt(index,0);}  }
class C{  public static Token newDecimal(String text,int startLine,int startColumn){  return new Token(Types.DECIMAL_NUMBER,text,startLine,startColumn);}  }
class C{  @Override public String toString(){  return mediaType;}  }
class C{  public static void logPreferenceChange(boolean enabled){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchPreferenceStateChange",enabled ? PREFERENCE_ENABLED : PREFERENCE_DISABLED,PREFERENCE_HISTOGRAM_BOUNDARY);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(stack.getUIMgrSafe().getOverscanOffsetY());}  }
class C{  public DataIndex(final String nexusRoot) throws JAXBException {  _jc=JAXBContext.newInstance("org.jetbrains.idea.maven.services.nexus",getClass().getClassLoader());  _jaxbDispatcher=new JAXBDispatcher(_jc);  _dsDispatcher=new DSDispatcher();  _uriBuilder=new UriBuilder();  List<String> _matrixParamSet;  _matrixParamSet=_uriBuilder.addPathSegment(nexusRoot);  _matrixParamSet=_uriBuilder.addPathSegment("data_index");  _templateAndMatrixParameterValues=new HashMap<String,Object>();}  }
class C{  public static Uri downloadImage(Context context,Uri url){  if (!isExternalStorageWritable()) {    Log.d(TAG,"external storage is not writable");    return null;  }  try (InputStream inputStream=(InputStream)new URL(url.toString()).getContent()){    return DownloadUtils.createDirectoryAndSaveFile(context,inputStream,url.toString());  } catch (  Exception e) {    Log.e(TAG,"Exception while downloading. Returning null." + e.toString());    return null;  }}  }
class C{  @Override public boolean isCellEditable(EventObject anEvent){  if (anEvent instanceof MouseEvent) {    return ((MouseEvent)anEvent).getClickCount() >= clickCountToEdit;  }  return true;}  }
class C{  public TLongLongHashMapDecorator(TLongLongHashMap map){  super();  this._map=map;}  }
class C{  protected static SQLException throwException(String message) throws SQLException {  throw new SQLException(message,"FULLTEXT");}  }
class C{  private URL buildPath(BlobPath path) throws MalformedURLException {  String[] paths=path.toArray();  if (paths.length == 0) {    return path();  }  URL blobPath=new URL(this.path,paths[0] + "/");  if (paths.length > 1) {    for (int i=1; i < paths.length; i++) {      blobPath=new URL(blobPath,paths[i] + "/");    }  }  return blobPath;}  }
class C{  private void calculateMatching(){  int[][] mapFC=new int[numFClusters][numGT0Classes];  int[][] mapGT=new int[numGT0Classes][numGT0Classes];  int[] sumsFC=new int[numFClusters];  pointInclusionProbFC=new double[numPoints][numFClusters];  for (int p=0; p < numPoints; p++) {    CMMPoint cmdp=gtAnalysis.getPoint(p);    for (int fc=0; fc < numFClusters; fc++) {      Cluster cl=clustering.get(fc);      pointInclusionProbFC[p][fc]=cl.getInclusionProbability(cmdp);      if (pointInclusionProbFC[p][fc] >= pointInclusionProbThreshold) {        if (cmdp.isNoise())         continue;        mapFC[fc][cmdp.workclass()]++;        sumsFC[fc]++;      }    }    if (!cmdp.isNoise()) {      for (int hc=0; hc < numGT0Classes; hc++) {        if (hc == cmdp.workclass()) {          mapGT[hc][hc]++;        } else {          if (gtAnalysis.getGT0Cluster(hc).getInclusionProbability(cmdp) >= 1) {            mapGT[hc][cmdp.workclass()]++;          }        }      }    }  }  matchMap=new int[numFClusters];  for (int fc=0; fc < numFClusters; fc++) {    int matchIndex=-1;    for (int hc0=0; hc0 < numGT0Classes; hc0++) {      if (mapFC[fc][hc0] != 0) {        if (matchIndex == -1)         matchIndex=hc0; else {          matchIndex=-1;          break;        }      }    }    int minDiff=Integer.MAX_VALUE;    if (sumsFC[fc] != 0 && matchIndex == -1) {      ArrayList<Integer> fitCandidates=new ArrayList<Integer>();      for (int hc0=0; hc0 < numGT0Classes; hc0++) {        int errDiff=0;        for (int hc1=0; hc1 < numGT0Classes; hc1++) {          double freq_diff=mapFC[fc][hc1] - mapGT[hc0][hc1];          if (freq_diff > 0) {            errDiff+=freq_diff;          }        }        if (errDiff == 0) {          fitCandidates.add(hc0);        }        if (errDiff < minDiff) {          minDiff=errDiff;          matchIndex=hc0;        }        if (debug) {        }      }      if (fitCandidates.size() != 0) {        int bestGTfit=fitCandidates.get(0);        for (int i=1; i < fitCandidates.size(); i++) {          int GTfit=fitCandidates.get(i);          if (mapFC[fc][GTfit] > mapFC[fc][bestGTfit])           bestGTfit=fitCandidates.get(i);        }        matchIndex=bestGTfit;      }    }    matchMap[fc]=matchIndex;    int realMatch=-1;    if (matchIndex == -1) {      if (debug)       System.out.println("No cluster match: needs to be implemented?");    } else {      realMatch=gtAnalysis.getGT0Cluster(matchMap[fc]).getLabel();    }    clustering.get(fc).setMeasureValue("CMM Match","C" + realMatch);    clustering.get(fc).setMeasureValue("CMM Workclass","C" + matchMap[fc]);  }  if (debug) {    for (int i=0; i < numFClusters; i++) {      System.out.print("C" + ((int)clustering.get(i).getId()) + " N:"+ ((int)clustering.get(i).getWeight())+ "  |  ");      for (int j=0; j < numGT0Classes; j++) {        System.out.print(mapFC[i][j] + " ");      }      System.out.print(" = " + sumsFC[i] + " | ");      String match="-";      if (matchMap[i] != -1) {        match=Integer.toString(gtAnalysis.getGT0Cluster(matchMap[i]).getLabel());      }      System.out.println(" --> " + match + "(work:"+ matchMap[i]+ ")");    }  }}  }
class C{  public static Host.AsyncClient.start_image_scan_call buildStartImageScanMethodCall(StartImageScanResponse response){  Host.AsyncClient.start_image_scan_call call=mock(Host.AsyncClient.start_image_scan_call.class);  try {    when(call.getResult()).thenReturn(response);  } catch (  Exception e) {    throw new RuntimeException("Failed to mock call.getResult");  }  return call;}  }
class C{  public void testCheckpointCleanup() throws Exception {  try {    checkpointSpi=new TestCheckpointSpi("task-checkpoints",cntr);    Ignite taskIgnite=startGrid(0);    checkpointSpi=new TestCheckpointSpi("job-checkpoints",cntr);    Ignite jobIgnite=startGrid(1);    taskIgnite.compute().execute(new CheckpointCountingTestTask(),jobIgnite.cluster().localNode());  }  finally {    stopAllGrids();  }  assertEquals(cntr.get(),0);}  }
class C{  static double calculateNewMeanNonFinite(double previousMean,double value){  if (isFinite(previousMean)) {    return value;  } else   if (isFinite(value) || previousMean == value) {    return previousMean;  } else {    return NaN;  }}  }
class C{  public void parse(int size) throws Exception {  if (parsed) {    return;  } else {    parsed=true;  }  if (method == POST) {    ByteArrayOutputStream out=new ByteArrayOutputStream();    if (Deploy.pipe(input,out,size,size) > 0)     parameters=new String(out.toByteArray());  }  if (Event.LOG) {    input.event().log("query " + parameters,Event.VERBOSE);  }  if (parameters != null) {    StringTokenizer amp=new StringTokenizer(parameters,"&");    while (amp.hasMoreTokens()) {      String equ=amp.nextToken();      int pos=equ.indexOf('=');      String key=null;      String value="false";      if (pos == -1) {        pos=equ.length();        key=equ.substring(0,pos);      } else {        key=equ.substring(0,pos);        value=equ.length() > pos + 1 ? URLDecoder.decode(equ.substring(pos + 1),"UTF-8") : "";      }      put(key,value);    }  }}  }
class C{  public boolean removeAddressSpace(final INaviAddressSpace addressSpace) throws CouldntDeleteException {  Preconditions.checkNotNull(addressSpace,"IE00251: The value null is not a valid address space");  Preconditions.checkState(m_project.isLoaded(),"IE00252: You can only delete address spaces from loaded projects");  Preconditions.checkArgument(m_addressSpaces.contains(addressSpace),"IE00253: Address space does not belong to the project");  Preconditions.checkState(!addressSpace.isLoaded(),"IE00868: You can only delete unloaded address spaces");  m_provider.deleteAddressSpace(addressSpace);  m_addressSpaces.remove(addressSpace);  for (  final IProjectListener listener : m_listeners) {    try {      listener.removedAddressSpace(m_project,addressSpace);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  m_project.getConfiguration().updateModificationDate();  return true;}  }
class C{  public void remove(BasicBlock bb){  for (int i=0; i < local.length; i++) {    if (bb == local[i]) {      ExceptionHandlerBasicBlock[] newLocal=new ExceptionHandlerBasicBlock[local.length - 1];      for (int j=0; j < i; j++)       newLocal[j]=local[j];      for (int j=i + 1; j < local.length; j++)       newLocal[j - 1]=local[j];      local=newLocal;      return;    }  }  throw new OptimizingCompilerException("Removing block not present in bag: " + bb);}  }
class C{  public void removeException(ClassType type){  if (null == exceptions) {    return;  }  exceptions.remove(type);}  }
class C{  private void loadTableInfo(){  log.config("");  if (m_sql == null)   return;  loading=true;  String sql=m_sql;  int Account_ID=((Integer)fieldAccount.getValue()).intValue();  if (Account_ID != 0)   sql+=" AND fa.Account_ID=?";  if (((Integer)fieldAcctSchema.getValue()) > 0)   sql+=" AND fa.C_AcctSchema_ID = ?";  sql+=" AND ((SELECT SUM(f.amtacctdr-f.amtacctcr) FROM Fact_Reconciliation rec " + " INNER JOIN Fact_Acct f ON (f.Fact_Acct_ID = rec.Fact_Acct_ID) " + " WHERE r.MatchCode=rec.MatchCode) ";  if (isReconciled.isSelected())   sql+="= 0) "; else   sql+="<> 0 OR r.MatchCode IS NULL) ";  if (fieldBPartner.getValue() != null)   sql+=" AND fa.C_BPartner_ID = ?";  if (fieldProduct.getValue() != null)   sql+=" AND fa.M_Product_ID = ?";  if (fieldDateAcct.getValue() != null)   sql+=" AND fa.DateAcct >= ?";  if (fieldDateAcct2.getValue() != null)   sql+=" AND fa.DateAcct <= ?";  sql+=" ORDER BY 1,5,3,6";  log.finest(sql + "Account_ID =" + Account_ID);  try {    int index=1;    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(index++,m_AD_Client_ID);    pstmt.setInt(index++,(Integer)fieldAccount.getValue());    if (((Integer)fieldAcctSchema.getValue()) > 0)     pstmt.setInt(index++,(Integer)fieldAcctSchema.getValue());    if (fieldBPartner.getValue() != null)     pstmt.setInt(index++,(Integer)fieldBPartner.getValue());    if (fieldProduct.getValue() != null)     pstmt.setInt(index++,(Integer)fieldProduct.getValue());    if (fieldDateAcct.getValue() != null)     pstmt.setTimestamp(index++,(Timestamp)fieldDateAcct.getValue());    if (fieldDateAcct2.getValue() != null)     pstmt.setTimestamp(index++,(Timestamp)fieldDateAcct2.getValue());    ResultSet rs=pstmt.executeQuery();    miniTable.loadTable(rs);    rs.close();    pstmt.close();    log.log(Level.FINE,sql);  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  loading=false;  calculateSelection();}  }
class C{  @Override public double approximatedValueAt(int k){  return approximation.getValueAt(k);}  }
class C{  private void cleanState(){  username=null;  if (password != null) {    for (int i=0; i < password.length; i++)     password[i]=' ';    password=null;  }  ctx=null;  if (clearPass) {    sharedState.remove(NAME);    sharedState.remove(PWD);  }}  }
class C{  public static void sort(int[] keys,int[] values,int offset,int length){  hybridsort(keys,values,offset,offset + length - 1);}  }
class C{  public boolean isLocal(){  return Arrays.asList("127.0.0.1","0:0:0:0:0:0:0:1").stream().anyMatch(null);}  }
class C{  public static <S extends HasDataChangedHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DataChangedEvent event=new DataChangedEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void testStartWithOneEmptyEarDeployed() throws Exception {  if (getContainer().getId().startsWith("geronimo")) {    return;  }  Deployable ear=new DefaultDeployableFactory().createDeployable(getContainer().getId(),getTestData().getTestDataFileFor("empty-ear"),DeployableType.EAR);  getLocalContainer().getConfiguration().addDeployable(ear);  getLocalContainer().start();  assertEquals(State.STARTED,getContainer().getState());  getLocalContainer().stop();  assertEquals(State.STOPPED,getContainer().getState());}  }
class C{  public RetryPolicy withMaxDuration(long maxDuration,TimeUnit timeUnit){  Assert.notNull(timeUnit,"timeUnit");  Assert.state(timeUnit.toNanos(maxDuration) > delay.toNanos(),"maxDuration must be greater than the delay");  this.maxDuration=new Duration(maxDuration,timeUnit);  return this;}  }
class C{  @Override final public FunctionNode visit(ASTBNodeFunc node,Object data) throws VisitorException {  if (node.jjtGetNumChildren() == 0) {    return noneary(node,FunctionRegistry.BNODE);  }  return unary(node,FunctionRegistry.BNODE);}  }
class C{  public void stopRecognition(){  this.stopRecording();  if (uploader != null) {    uploader.stop();    uploader.close();  }}  }
class C{  protected void finalize() throws Throwable {  this.delegate=null;  super.finalize();}  }
class C{  public void enrich(){  if (this.enriched)   return;  StringBuilder t=new StringBuilder(this.text);  List<String> links=extract(t,URL_PATTERN,1);  t=new StringBuilder(SPACEX_PATTERN.matcher(t).replaceAll(" ").trim());  this.without_l_len=t.length();  List<String> users=extract(t,USER_PATTERN,1);  t=new StringBuilder(SPACEX_PATTERN.matcher(t).replaceAll(" ").trim());  this.without_lu_len=t.length();  List<String> hashtags=extract(t,HASHTAG_PATTERN,1);  t=new StringBuilder(SPACEX_PATTERN.matcher(t).replaceAll(" ").trim());  this.without_luh_len=t.length();  Set<String> hosts=new LinkedHashSet<String>();  for (  String u : links) {    try {      URL url=new URL(u);      hosts.add(url.getHost());    } catch (    MalformedURLException e) {    }  }  this.hosts=new String[hosts.size()];  int j=0;  for (  String host : hosts)   this.hosts[j++]=host.toLowerCase();  this.mentions=new String[users.size()];  for (int i=0; i < users.size(); i++)   this.mentions[i]=users.get(i).substring(1);  this.hashtags=new String[hashtags.size()];  for (int i=0; i < hashtags.size(); i++)   this.hashtags[i]=hashtags.get(i).substring(1).toLowerCase();  this.links=new String[links.size()];  for (int i=0; i < links.size(); i++)   this.links[i]=links.get(i);  this.classifier=Classifier.classify(this.text);  for (  String link : this.links) {    if (link.endsWith(".mp4") || link.endsWith(".m4v") || link.indexOf("vimeo.com") > 0 || link.indexOf("youtube.com") > 0 || link.indexOf("youtu.be") > 0 || link.indexOf("vine.co") > 0 || link.indexOf("ted.com") > 0) {      this.videos.add(link);      continue;    }    if (link.endsWith(".mp3") || link.indexOf("soundcloud.com") > 0) {      this.audio.add(link);      continue;    }    if (link.endsWith(".jpg") || link.endsWith(".jpeg") || link.endsWith(".png")|| link.endsWith(".gif")|| link.indexOf("flickr.com") > 0 || link.indexOf("instagram.com") > 0 || link.indexOf("imgur.com") > 0 || link.indexOf("giphy.com") > 0 || link.indexOf("pic.twitter.com") > 0) {      this.images.add(link);      continue;    }  }  if ((this.location_point == null || this.location_point.length == 0) && DAO.geoNames != null) {    GeoMark loc=null;    if (this.place_name != null && this.place_name.length() > 0 && (this.location_source == null || this.location_source == LocationSource.ANNOTATION || this.location_source == LocationSource.PLACE)) {      loc=DAO.geoNames.analyse(this.place_name,null,5,Integer.toString(this.text.hashCode()));      this.place_context=PlaceContext.FROM;      this.location_source=LocationSource.PLACE;    }    if (loc == null) {      loc=DAO.geoNames.analyse(this.text,this.hashtags,5,Integer.toString(this.text.hashCode()));      this.place_context=PlaceContext.ABOUT;      this.location_source=LocationSource.ANNOTATION;    }    if (loc != null) {      if (this.place_name == null || this.place_name.length() == 0)       this.place_name=loc.getNames().iterator().next();      this.location_radius=0;      this.location_point=new double[]{loc.lon(),loc.lat()};      this.location_mark=new double[]{loc.mlon(),loc.mlat()};      this.place_country=loc.getISO3166cc();    }  }  this.enriched=true;}  }
class C{  public void flush() throws java.io.IOException {}  }
class C{  public static <T>List<T[]> split(T[] array,int n){  Class theClass=array[0].getClass();  if (array.length >= n) {    @SuppressWarnings("unchecked") List<T[]> out=new ArrayList<>();    int minSegmentSize=(int)Math.floor(array.length / (double)n);    int start=0;    int stop=minSegmentSize;    for (int i=0; i < n - 1; i++) {      int segmentSize=stop - start;      T[] segment=(T[])Array.newInstance(theClass,segmentSize);      int j=0;      for (int k=start; k < stop; k++) {        segment[j]=array[k];        j++;      }      out.add(segment);      start=stop;      stop+=segmentSize;    }    int segmentSize=array.length - start;    stop=start + segmentSize;    T[] segment=(T[])Array.newInstance(theClass,segmentSize);    int j=0;    for (int k=start; k < stop; k++) {      segment[j]=array[k];      j++;    }    out.add(segment);    return out;  } else {    throw new IllegalArgumentException("n must not be smaller set size!");  }}  }
class C{  public ComponentBuilder italic(Boolean italic){  this.current.setItalic(italic);  return this;}  }
class C{  public Resource[] scanForResources(String path,String prefix,String suffix) throws IOException {  LOG.debug("Scanning for filesystem resources at '" + path + "' (Prefix: '"+ prefix+ "', Suffix: '"+ suffix+ "')");  if (!new File(path).isDirectory()) {    throw new CassandraMigrationException("Invalid filesystem path: " + path);  }  Set<Resource> resources=new TreeSet<Resource>();  Set<String> resourceNames=findResourceNames(path,prefix,suffix);  for (  String resourceName : resourceNames) {    resources.add(new FileSystemResource(resourceName));    LOG.debug("Found filesystem resource: " + resourceName);  }  return resources.toArray(new Resource[resources.size()]);}  }
class C{  public static String toString(Object object) throws JSONException {  return toString(object,null);}  }
class C{  private void showPopupMenu(final MouseEvent event){  final int index=m_tabbedPane.indexAtLocation(event.getX(),event.getY());  if (index == -1) {    return;  }  final CGraphPanel child=(CGraphPanel)m_tabbedPane.getComponentAt(index);  final JPopupMenu menu=new JGraphTabMenu(m_tabbedPane,child);  menu.show(event.getComponent(),event.getX(),event.getY());}  }
class C{  public void runTest() throws Throwable {  Document doc;  int nodeType;  doc=(Document)load("staff",false);  nodeType=(int)doc.getNodeType();  assertEquals("nodeDocumentNodeTypeAssert1",9,nodeType);}  }
class C{  public boolean performProtectionOperationStep(URI protectionSystem,URI cgId,URI volId,URI copyID,String pointInTime,String imageAccessMode,String op,String stepId) throws ControllerException {  WorkflowStepCompleter.stepExecuting(stepId);  try {    ProtectionSystem rpSystem=getRPSystem(protectionSystem);    _workflowService.getWorkflowFromStepId(stepId);    List<String> lockKeys=new ArrayList<String>();    lockKeys.add(ControllerLockingUtil.getConsistencyGroupStorageKey(_dbClient,cgId,rpSystem.getId()));    boolean lockAcquired=_workflowService.acquireWorkflowStepLocks(stepId,lockKeys,LockTimeoutValue.get(LockType.RP_CG));    if (!lockAcquired) {      throw DeviceControllerException.exceptions.failedToAcquireLock(lockKeys.toString(),String.format("failed to get lock while restoring volumes in RP consistency group: %s",cgId.toString()));    }    Volume protectionVolume=(copyID == null) ? _dbClient.queryObject(Volume.class,volId) : _dbClient.queryObject(Volume.class,copyID);    RecoverPointClient rp=RPHelper.getRecoverPointClient(rpSystem);    RecoverPointVolumeProtectionInfo volumeProtectionInfo=rp.getProtectionInfoForVolume(RPHelper.getRPWWn(protectionVolume.getId(),_dbClient));    if (op.equals(STOP)) {      rp.disableProtection(volumeProtectionInfo);      setProtectionSetStatus(volumeProtectionInfo,ProtectionStatus.DISABLED.toString(),rpSystem);      _log.info("doStopProtection {} - complete",rpSystem.getId());    } else     if (op.equals(START)) {      rp.enableProtection(volumeProtectionInfo);      setProtectionSetStatus(volumeProtectionInfo,ProtectionStatus.ENABLED.toString(),rpSystem);    } else     if (op.equals(SYNC)) {      Set<String> volumeWWNs=new HashSet<String>();      volumeWWNs.add(RPHelper.getRPWWn(protectionVolume.getId(),_dbClient));      CreateBookmarkRequestParams request=new CreateBookmarkRequestParams();      request.setVolumeWWNSet(volumeWWNs);      request.setBookmark("Sync-Snapshot");      rp.createBookmarks(request);    } else     if (op.equals(PAUSE)) {      rp.pauseTransfer(volumeProtectionInfo);      setProtectionSetStatus(volumeProtectionInfo,ProtectionStatus.PAUSED.toString(),rpSystem);    } else     if (op.equals(RESUME)) {      rp.resumeTransfer(volumeProtectionInfo);      setProtectionSetStatus(volumeProtectionInfo,ProtectionStatus.ENABLED.toString(),rpSystem);    } else     if (op.equals(FAILOVER_TEST)) {      RPCopyRequestParams copyParams=new RPCopyRequestParams();      copyParams.setCopyVolumeInfo(volumeProtectionInfo);      rp.failoverCopyTest(copyParams);    } else     if (op.equals(FAILOVER)) {      if (protectionVolume.getLinkStatus() != null && protectionVolume.getLinkStatus().equalsIgnoreCase(Volume.LinkStatus.FAILED_OVER.name())) {        Volume targetVolume=null;        if (protectionVolume.checkPersonality(Volume.PersonalityTypes.SOURCE.toString())) {          targetVolume=_dbClient.queryObject(Volume.class,volId);        } else {          targetVolume=protectionVolume;        }        volumeProtectionInfo=rp.getProtectionInfoForVolume(RPHelper.getRPWWn(targetVolume.getId(),_dbClient));        RPCopyRequestParams copyParams=new RPCopyRequestParams();        copyParams.setCopyVolumeInfo(volumeProtectionInfo);        rp.failoverCopyCancel(copyParams);        updatePostFailoverCancel(targetVolume);      } else {        RPCopyRequestParams copyParams=new RPCopyRequestParams();        copyParams.setCopyVolumeInfo(volumeProtectionInfo);        if (pointInTime != null) {          copyParams.setApitTime(TimeUtils.getDateTimestamp(pointInTime));        }        rp.failoverCopy(copyParams);        updatePostFailover(protectionVolume);      }    } else     if (op.equals(FAILOVER_CANCEL)) {      if (protectionVolume.checkPersonality(Volume.PersonalityTypes.SOURCE.name())) {        throw DeviceControllerExceptions.recoverpoint.failoverWrongTargetSpecified();      } else {        if (protectionVolume.getLinkStatus() != null && protectionVolume.getLinkStatus().equalsIgnoreCase(Volume.LinkStatus.FAILED_OVER.name())) {          volumeProtectionInfo=rp.getProtectionInfoForVolume(RPHelper.getRPWWn(protectionVolume.getId(),_dbClient));          RPCopyRequestParams copyParams=new RPCopyRequestParams();          copyParams.setCopyVolumeInfo(volumeProtectionInfo);          rp.failoverCopyCancel(copyParams);          updatePostFailoverCancel(protectionVolume);        } else {          throw DeviceControllerExceptions.recoverpoint.failoverWrongTargetSpecified();        }      }    } else     if (op.equals(SWAP)) {      RPCopyRequestParams copyParams=new RPCopyRequestParams();      copyParams.setCopyVolumeInfo(volumeProtectionInfo);      rp.swapCopy(copyParams);      protectionVolume=updatePostSwapPersonalities(protectionVolume);      rp.setCopyAsProduction(copyParams);      if (RPHelper.isMetroPointVolume(_dbClient,protectionVolume)) {        if (!rp.doesStandbyProdCopyExist(volumeProtectionInfo)) {          _log.info(String.format("Adding back standby production copy after swap back to original VPlex Metro for Metropoint volume %s (%s)",protectionVolume.getLabel(),protectionVolume.getId().toString()));          List<Volume> standbyLocalCopyVols=_rpHelper.getMetropointStandbyCopies(protectionVolume);          CreateCopyParams standbyLocalCopyParams=null;          List<CreateRSetParams> rSets=new ArrayList<CreateRSetParams>();          Set<URI> journalVolumes=new HashSet<URI>();          if (!standbyLocalCopyVols.isEmpty()) {            for (            Volume standbyCopyVol : standbyLocalCopyVols) {              if (rp.doesProtectionVolumeExist(RPHelper.getRPWWn(standbyCopyVol.getId(),_dbClient))) {                RecoverPointVolumeProtectionInfo standbyCdpCopy=rp.getProtectionInfoForVolume(RPHelper.getRPWWn(standbyCopyVol.getId(),_dbClient));                rp.deleteCopy(standbyCdpCopy);              }              CreateVolumeParams vol=new CreateVolumeParams();              vol.setWwn(RPHelper.getRPWWn(standbyCopyVol.getId(),_dbClient));              vol.setInternalSiteName(standbyCopyVol.getInternalSiteName());              vol.setProduction(false);              List<CreateVolumeParams> volumes=new ArrayList<CreateVolumeParams>();              volumes.add(vol);              CreateRSetParams rSet=new CreateRSetParams();              rSet.setName(standbyCopyVol.getRSetName());              rSet.setVolumes(volumes);              rSets.add(rSet);              List<Volume> standbyJournals=RPHelper.findExistingJournalsForCopy(_dbClient,standbyCopyVol.getConsistencyGroup(),standbyCopyVol.getRpCopyName());              for (              Volume standbyJournal : standbyJournals) {                journalVolumes.add(standbyJournal.getId());              }            }            String rpCopyName=null;            List<CreateVolumeParams> journalVols=new ArrayList<CreateVolumeParams>();            for (            URI journalVolId : journalVolumes) {              Volume standbyLocalJournal=_dbClient.queryObject(Volume.class,journalVolId);              if (standbyLocalJournal != null) {                _log.info(String.format("Found standby local journal volume %s (%s) for metropoint volume %s (%s)",standbyLocalJournal.getLabel(),standbyLocalJournal.getId().toString(),protectionVolume.getLabel(),protectionVolume.getId().toString()));                rpCopyName=standbyLocalJournal.getRpCopyName();                CreateVolumeParams journalVolParams=new CreateVolumeParams();                journalVolParams.setWwn(RPHelper.getRPWWn(standbyLocalJournal.getId(),_dbClient));                journalVolParams.setInternalSiteName(standbyLocalJournal.getInternalSiteName());                journalVols.add(journalVolParams);              }            }            if (!journalVols.isEmpty()) {              standbyLocalCopyParams=new CreateCopyParams();              standbyLocalCopyParams.setName(rpCopyName);              standbyLocalCopyParams.setJournals(journalVols);            } else {              _log.error("no journal volumes found for standby production copy for source volume " + protectionVolume.getLabel());            }          }          String standbyProductionCopyName=RPHelper.getStandbyProductionCopyName(_dbClient,protectionVolume);          if (standbyProductionCopyName != null) {            List<Volume> existingStandbyJournals=RPHelper.findExistingJournalsForCopy(_dbClient,protectionVolume.getConsistencyGroup(),standbyProductionCopyName);            Volume standbyProdJournal=existingStandbyJournals.get(0);            if (standbyProdJournal != null) {              _log.info(String.format("Found standby production journal volume %s (%s) for metropoint volume %s (%s)",standbyProdJournal.getLabel(),standbyProdJournal.getId().toString(),protectionVolume.getLabel(),protectionVolume.getId().toString()));              List<CreateVolumeParams> journalVols=new ArrayList<CreateVolumeParams>();              CreateVolumeParams journalVolParams=new CreateVolumeParams();              journalVolParams.setWwn(RPHelper.getRPWWn(standbyProdJournal.getId(),_dbClient));              journalVolParams.setInternalSiteName(standbyProdJournal.getInternalSiteName());              journalVols.add(journalVolParams);              CreateCopyParams standbyProdCopyParams=new CreateCopyParams();              standbyProdCopyParams.setName(standbyProdJournal.getRpCopyName());              standbyProdCopyParams.setJournals(journalVols);              rp.addStandbyProductionCopy(standbyProdCopyParams,standbyLocalCopyParams,rSets,copyParams);            } else {              _log.error(String.format("Cannot add standby production copy because the standby production journal could not be found for copy %s.",standbyProductionCopyName));            }          }        }      }      try {        Thread.sleep(5000);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();      }      RPHelper.cleanupSnapshots(_dbClient,rpSystem);    } else     if (op.equals(FAILOVER_TEST_CANCEL)) {      RPCopyRequestParams copyParams=new RPCopyRequestParams();      copyParams.setCopyVolumeInfo(volumeProtectionInfo);      rp.failoverCopyTestCancel(copyParams);    } else     if (op.equals(CHANGE_ACCESS_MODE)) {      RPCopyRequestParams copyParams=new RPCopyRequestParams();      copyParams.setCopyVolumeInfo(volumeProtectionInfo);      copyParams.setImageAccessMode(imageAccessMode);      if (imageAccessMode != null) {        rp.updateImageAccessMode(copyParams);        if (Copy.ImageAccessMode.DIRECT_ACCESS.name().equalsIgnoreCase(imageAccessMode)) {          _log.info(String.format("Updated imaged access mode for copy %s at %s to DIRECT_ACCESS. Removing all bookmarks associated with that copy and site.",volumeProtectionInfo.getRpCopyName(),volumeProtectionInfo.getRpSiteName()));          try {            Thread.sleep(5000);          } catch (          InterruptedException e) {            Thread.currentThread().interrupt();          }          RPHelper.cleanupSnapshots(_dbClient,rpSystem);        }      } else {        throw DeviceControllerExceptions.recoverpoint.imageAccessModeNotSupported(imageAccessMode);      }    } else {      throw DeviceControllerExceptions.recoverpoint.protectionOperationNotSupported(op);    }    _log.info("performProtectionOperation: after " + op + " operation successful");    WorkflowStepCompleter.stepSucceded(stepId);    return true;  } catch (  InternalException e) {    _log.error("Operation failed with Exception: ",e);    return stepFailed(stepId,(ServiceCoded)e,"removeProtection operation failed.");  }catch (  Exception e) {    stepFailed(stepId,e,"removeProtection operation failed.");    return false;  }}  }
class C{  public List parseFailed(String parseModule){  return moduleStore.removeKey(parseModule);}  }
class C{  public final void addAllHelperTextColorIds(@NonNull final int... resourceIds){  ensureNotNull(resourceIds,"The array may not be null");  for (  int resourceId : resourceIds) {    addHelperTextColorId(resourceId);  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 90) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public ToastBuilder gravity(int gravity){  this.gravity=gravity;  return this;}  }
class C{  public void init(int size){  clean_cache();  cache_size=size;  if (cache_size < 1) {    cache_size=1;  }  ;  elements=new Object[cache_size];  last_used=new long[cache_size];  index=new int[cache_size + 1];  for (int i=0; i < cache_size; i++) {    elements[i]=null;    last_used[i]=0;    index[i]=Integer.MAX_VALUE;  }  ;  index[cache_size]=Integer.MAX_VALUE;}  }
class C{  public void testDefaultMemoryArguments() throws Exception {  AbstractInstalledLocalContainerStub container=new AbstractInstalledLocalContainerStub(configuration);  container.startInternal();  JvmLauncher java=container.getJava();  String commandLine=java.getCommandLine();  checkString(commandLine,"-Xms128m");  checkString(commandLine,"-Xmx512m");}  }
class C{  public static void append(File file,Object text,String charset) throws IOException {  append(file,text,charset,false);}  }
class C{  public void clear(){  mSize=0;}  }
class C{  public KeyAlreadyExistsException(String msg){  super(msg);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[inBuff >>> 18];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[inBuff >>> 18];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[inBuff >>> 18];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public int numNodes(){  int numNodes=0;  BreadthFirstEnumeration<DeLiCluNode,DeLiCluEntry> bfs=new BreadthFirstEnumeration<>(this,getRootPath());  while (bfs.hasMoreElements()) {    Entry entry=bfs.nextElement().getEntry();    if (!entry.isLeafEntry()) {      numNodes++;    }  }  return numNodes;}  }
class C{  public static void main(String[] args){  LOG.info("Starting R5 Analyst Worker version {}",R5Version.version);  LOG.info("R5 commit is {}",R5Version.commit);  LOG.info("R5 describe is {}",R5Version.describe);  Properties config=new Properties();  try {    File cfg;    if (args.length > 0)     cfg=new File(args[0]); else     cfg=new File("worker.conf");    InputStream cfgis=new FileInputStream(cfg);    config.load(cfgis);    cfgis.close();  } catch (  Exception e) {    LOG.info("Error loading worker configuration",e);    return;  }  try {    new AnalystWorker(config).run();  } catch (  Exception e) {    LOG.error("Error in analyst worker",e);    return;  }}  }
class C{  protected void processCloudlet(SimEvent ev,int type){  int cloudletId=0;  int userId=0;  int vmId=0;  try {    int data[]=(int[])ev.getData();    cloudletId=data[0];    userId=data[1];    vmId=data[2];  } catch (  ClassCastException c) {    try {      Cloudlet cl=(Cloudlet)ev.getData();      cloudletId=cl.getCloudletId();      userId=cl.getUserId();      vmId=cl.getVmId();    } catch (    Exception e) {      Log.printConcatLine(super.getName(),": Error in processing Cloudlet");      Log.printLine(e.getMessage());      return;    }  }catch (  Exception e) {    Log.printConcatLine(super.getName(),": Error in processing a Cloudlet.");    Log.printLine(e.getMessage());    return;  }switch (type) {case CloudSimTags.CLOUDLET_CANCEL:    processCloudletCancel(cloudletId,userId,vmId);  break;case CloudSimTags.CLOUDLET_PAUSE:processCloudletPause(cloudletId,userId,vmId,false);break;case CloudSimTags.CLOUDLET_PAUSE_ACK:processCloudletPause(cloudletId,userId,vmId,true);break;case CloudSimTags.CLOUDLET_RESUME:processCloudletResume(cloudletId,userId,vmId,false);break;case CloudSimTags.CLOUDLET_RESUME_ACK:processCloudletResume(cloudletId,userId,vmId,true);break;default :break;}}  }
class C{  public static void resetTargetClass(){  TARGET_CLASS_INSTANCE=null;}  }
class C{  private WindowUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  private List<String> parseSamlAttributeValues(List<org.opensaml.xml.XMLObject> list){  List<String> valStrings=new LinkedList<String>();  Validate.notNull(list,"Attributes");  Iterator<org.opensaml.xml.XMLObject> iter=list.iterator();  while (iter.hasNext()) {    String valStr=iter.next().getDOM().getTextContent();    if (valStr != null) {      valStrings.add(valStr);    }    logger.trace("attribute value " + valStr);  }  return valStrings;}  }
class C{  public RoleBuilder withName(String name){  this.name=name;  return this;}  }
class C{  static public int applyExistingStatements(final AbstractTripleStore focusStore,final AbstractTripleStore database,final IElementFilter<ISPO> filter){  return applyExistingStatements(focusStore,database,filter,null);}  }
class C{  public void unmap(int addr,int len){  for (int i=0; i < len; i+=PAGE_SIZE) {    int pte=getPTE(addr + i);    if (getPage(pte) != null) {      readableMemory[pte]=null;      writableMemory[pte]=null;      executableMemory[pte]=null;    } else {      throw new Error("Unmapping memory that's not mapped addr=0x" + Integer.toHexString(addr) + " len="+ len);    }  }}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(this.getModifiers());}  }
class C{  protected Node export(Node n,AbstractDocument d){  super.export(n,d);  AbstractElementNS ae=(AbstractElementNS)n;  ae.namespaceURI=namespaceURI;  return n;}  }
class C{  public SearchResult(String name,String className,Object obj,Attributes attrs){  super(name,className,obj);  this.attrs=attrs;}  }
class C{  public LookupTranslator(final CharSequence[]... lookup){  lookupMap=new HashMap<String,String>();  prefixSet=new HashSet<Character>();  int _shortest=Integer.MAX_VALUE;  int _longest=0;  if (lookup != null) {    for (    final CharSequence[] seq : lookup) {      this.lookupMap.put(seq[0].toString(),seq[1].toString());      this.prefixSet.add(seq[0].charAt(0));      final int sz=seq[0].length();      if (sz < _shortest) {        _shortest=sz;      }      if (sz > _longest) {        _longest=sz;      }    }  }  shortest=_shortest;  longest=_longest;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_ptr_recycler);  initViews();}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public Chain(int pc,Chain next,Code.State state){  this.pc=pc;  this.next=next;  this.state=state;}  }
class C{  protected void pushWriteContext(Context c){  writeContextStack_.push(writeContext_);  writeContext_=c;}  }
class C{  public boolean execAuth(String path){  if (user == null) {    return false;  }  if ("root".equals(user.getUsername())) {    return true;  }  if ("/*".equals(path)) {    return false;  }  String index=normalizeUrlPath(path);  for (  String filter : user.getIndexFilters()) {    if (ifFilterCoversIndex(index,filter)) {      return true;    }  }  return false;}  }
class C{  private int validateVersion(String version) throws WebApplicationException {  if (version == null) {    throw WebException.notFound().message(CommonParams.ERROR_INVALID_VERSION).build();  }  if (!version.matches(CommonParams.PATTERN_VERSION)) {    throw WebException.notFound().message(CommonParams.ERROR_INVALID_VERSION).build();  }  int vnr=Integer.parseInt(version.substring(CommonParams.PATTERN_VERSION_OFFSET));  boolean exists=false;  for (  int i : CommonParams.VERSIONS) {    if (i == vnr) {      exists=true;      break;    }  }  if (!exists) {    throw WebException.notFound().message(CommonParams.ERROR_INVALID_VERSION).build();  }  return vnr;}  }
class C{  public void incFunctionExecutionExceptions(){  this._stats.incInt(_functionExecutionExceptions,1);}  }
class C{  public V1 addAction(int icon,CharSequence title,Action.OnActionListener listener){  N.addAction(icon,title,listener);  return this;}  }
class C{  public void initShortPressAction(){  mShortPressAction=new Action();}  }
class C{  public static <NodeType extends IGraphNode<NodeType> & ISelectableNode>void selectPredecessors(final ISelectableGraph<NodeType> graph,final NodeType node){  graph.selectNodes(GraphAlgorithms.getPredecessors(node),true);}  }
class C{  private String printFFormat(double x){  return fFormatString(x);}  }
class C{  public boolean isSuffixVisible(){  return suffixVisible;}  }
class C{  protected static Vector<FieldContainer> findFields(AttributedCharacterIterator iterator){  Vector<FieldContainer> result=new Vector<FieldContainer>();  while (iterator.getIndex() != iterator.getEndIndex()) {    int start=iterator.getRunStart();    int end=iterator.getRunLimit();    Iterator<Attribute> it=iterator.getAttributes().keySet().iterator();    while (it.hasNext()) {      AttributedCharacterIterator.Attribute attribute=it.next();      Object value=iterator.getAttribute(attribute);      result.add(new FieldContainer(start,end,attribute,value));    }    iterator.setIndex(end);  }  return result;}  }
class C{  public void finish(){  m_bias=0;  m_out.flush();}  }
class C{  public static UARTConfigurationSynchronizer from(final Context context,final GoogleApiClient.ConnectionCallbacks listener){  if (mInstance == null)   mInstance=new UARTConfigurationSynchronizer();  mInstance.init(context,listener);  return mInstance;}  }
class C{  public void installUI(JComponent c){  super.installUI(c);  c.setOpaque(false);  c.setBorder(null);}  }
class C{  @Override public void licenceFile(String textToShow,String licenceFilePath) throws CancelException {  licenceFile(textToShow,new File(licenceFilePath));}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private void println(Level level,String msg){  if (logLevel != Level.OFF) {    if (configLogger == null) {      startupLogRecords.add(new LogRecord(level,msg));    } else {      configLogger.log(level,msg);    }  }}  }
class C{  protected void testParentImmutability(Variation variation){  ParentImmutabilityTest.test(createParents(10),variation);}  }
class C{  protected StateSwitchImpl(){  super();}  }
class C{  public void fillOval(int x,int y,int width,int height){  Ellipse2D oval=new Ellipse2D.Float(x,y,width,height);  fill(oval);}  }
class C{  @Override public final synchronized V put(final K s,final V v){  if (this.levelB.containsKey(s)) {    final V r=this.levelB.put(s,v);    assert (this.levelB.size() <= this.cacheSize);    return r;  }  final V r=this.levelA.put(s,v);  assert (this.levelA.size() <= this.cacheSize);  return r;}  }
class C{  public void testGetNotAfter(){  if (this.cert == null) {    return;  }  assertEquals("The NotAfter date is not correct.",tbt_cert.getNotAfter(),cert.getNotAfter());}  }
class C{  private void write(String s) throws SAXException {  try {    output.write(s);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public VNXeCommandResult deleteLunSync(String lunId,boolean forceSnapDeletion) throws VNXeException {  _logger.info("deleting lun: " + lunId);  DeleteStorageResourceRequest req=new DeleteStorageResourceRequest(_khClient);  return req.deleteLunSync(lunId,forceSnapDeletion);}  }
class C{  public MultiElementListSelectionDialog(Shell parent,ILabelProvider renderer){  super(parent,renderer);}  }
class C{  @Override public boolean isCharacters(){  return eventType == XMLStreamConstants.CHARACTERS || eventType == XMLStreamConstants.CDATA;}  }
class C{  public boolean isAbsolute(){  return fs.isAbsolute(this);}  }
class C{  public T caseDisjunction(Disjunction object){  return null;}  }
class C{  public void paintIcon(Component c,Graphics g,int x,int y){  JComponent component=(JComponent)c;  int iconWidth=getIconWidth();  g.translate(x,y);  g.setColor(component.isEnabled() ? MetalLookAndFeel.getControlInfo() : MetalLookAndFeel.getControlShadow());  g.drawLine(0,0,iconWidth - 1,0);  g.drawLine(1,1,1 + (iconWidth - 3),1);  g.drawLine(2,2,2 + (iconWidth - 5),2);  g.drawLine(3,3,3 + (iconWidth - 7),3);  g.drawLine(4,4,4 + (iconWidth - 9),4);  g.translate(-x,-y);}  }
class C{  @RequestProcessing(value="/admin/order/{orderId}/confirm",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,MallAdminCheck.class,CSRFCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void confirmOrder(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String orderId) throws Exception {  context.renderJSON().renderFalseResult();  final JSONObject order=orderQueryService.getOrder(orderId);  if (null == order) {    context.renderMsg("Order not found");    return;  }  if (Order.ORDER_STATUS_C_INIT != order.optInt(Order.ORDER_STATUS)) {    context.renderMsg("Order has been handled");    return;  }  final JSONObject handler=(JSONObject)request.getAttribute(User.USER);  order.put(Order.ORDER_CONFIRM_TIME,System.currentTimeMillis());  order.put(Order.ORDER_HANDLER_ID,handler.optString(Keys.OBJECT_ID));  order.put(Order.ORDER_STATUS,Order.ORDER_STATUS_C_CONFIRMED);  orderMgmtService.updateOrder(order);  context.renderTrueResult().renderMsg(langPropsService.get("confirmSuccLabel"));}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.PROPERTY_METHOD_DECLARATION___GET_DEFINED_MEMBER:    return getDefinedMember();case N4JSPackage.PROPERTY_METHOD_DECLARATION___EXISTS_EXPLICIT_SUPER_CALL:  return existsExplicitSuperCall();case N4JSPackage.PROPERTY_METHOD_DECLARATION___GET_DEFINED_TYPE_ELEMENT:return getDefinedTypeElement();case N4JSPackage.PROPERTY_METHOD_DECLARATION___IS_STATIC:return isStatic();case N4JSPackage.PROPERTY_METHOD_DECLARATION___IS_ASYNC:return isAsync();case N4JSPackage.PROPERTY_METHOD_DECLARATION___GET_LOCAL_ARGUMENTS_VARIABLE:return getLocalArgumentsVariable();case N4JSPackage.PROPERTY_METHOD_DECLARATION___GET_DEFINED_FUNCTION_OR_ACCESSOR:return getDefinedFunctionOrAccessor();}return super.eInvoke(operationID,arguments);}  }
class C{  public CyclicNumberAxis(double period,String label){  this(0,period,label);}  }
class C{  @SuppressWarnings("unchecked") public RegionAttributes<K,V> create(){  if (this.regionAttributes.hasDataPolicy() && this.regionAttributes.dataPolicy.withPartitioning() && this.regionAttributes.partitionAttributes == null) {    this.regionAttributes.partitionAttributes=(new PartitionAttributesFactory()).create();    ((PartitionAttributesImpl)this.regionAttributes.partitionAttributes).setOffHeap(this.regionAttributes.getOffHeap());  }{    RegionAttributesImpl attrs=this.regionAttributes;    if (!attrs.hasStatisticsEnabled() && !attrs.getStatisticsEnabled() && (attrs.getRegionTimeToLive().getTimeout() != 0 || attrs.getRegionIdleTimeout().getTimeout() != 0 || attrs.getEntryTimeToLive().getTimeout() != 0 || attrs.getEntryIdleTimeout().getTimeout() != 0 || attrs.getCustomEntryIdleTimeout() != null || attrs.getCustomEntryTimeToLive() != null)) {      setStatisticsEnabled(true);    }    if (attrs.getDataPolicy().withReplication() && !attrs.getDataPolicy().withPersistence() && attrs.getScope().isDistributed()) {      RegionAttributesImpl<?,?> rattr=attrs;      if (!rattr.isForBucketRegion()) {        if (attrs.getEvictionAttributes().getAction().isLocalDestroy() || attrs.getEntryIdleTimeout().getAction().isLocal() || attrs.getEntryTimeToLive().getAction().isLocal()|| attrs.getRegionIdleTimeout().getAction().isLocalInvalidate()|| attrs.getRegionTimeToLive().getAction().isLocalInvalidate()) {          setDataPolicy(DataPolicy.PRELOADED);          setSubscriptionAttributes(new SubscriptionAttributes(InterestPolicy.ALL));        }      }    }  }  validateAttributes(this.regionAttributes);  return (RegionAttributes<K,V>)this.regionAttributes.clone();}  }
class C{  public void addJarPath(final String strJarPath){synchronized (m_jarVect) {    m_jarVect.addElement(strJarPath);  }}  }
class C{  private void showMessage(String message){  Toast.makeText(SampleStringActivity.this,message,Toast.LENGTH_SHORT).show();}  }
class C{  protected String compute(Date dateDate,String sizeString,String formatString){  if (dateDate == null || sizeString == null || formatString == null) {    return null;  }  String result;  DateFormat dateFormat;  int formatting;  if (sizeString.equals(ExpressionParserConstants.DATE_FORMAT_FULL)) {    formatting=DateFormat.FULL;  } else   if (sizeString.equals(ExpressionParserConstants.DATE_FORMAT_LONG)) {    formatting=DateFormat.LONG;  } else   if (sizeString.equals(ExpressionParserConstants.DATE_FORMAT_MEDIUM)) {    formatting=DateFormat.MEDIUM;  } else   if (sizeString.equals(ExpressionParserConstants.DATE_FORMAT_SHORT)) {    formatting=DateFormat.SHORT;  } else {    throw new FunctionInputException("invalid_argument.date_size",getFunctionName());  }  if (formatString.equals(ExpressionParserConstants.DATE_SHOW_DATE_ONLY)) {    dateFormat=(DateFormat)DateFormat.getDateInstance(formatting).clone();  } else   if (formatString.equals(ExpressionParserConstants.DATE_SHOW_TIME_ONLY)) {    dateFormat=(DateFormat)DateFormat.getTimeInstance(formatting).clone();  } else   if (formatString.equals(ExpressionParserConstants.DATE_SHOW_DATE_AND_TIME)) {    dateFormat=(DateFormat)DateFormat.getDateTimeInstance(formatting,formatting).clone();  } else {    throw new FunctionInputException("invalid_argument.date_format",getFunctionName());  }  result=dateFormat.format(dateDate);  return result;}  }
class C{  public void addKeys(Collection<?> keys){synchronized (this) {    if (this.succeededKeys.getVersionTags().size() > 0) {      throw new IllegalStateException("attempt to store versionless keys when there are already versioned results");    }    this.succeededKeys.addAllKeys(keys);  }}  }
class C{  public synchronized void close(){  if (!this.mIsClosed) {    this.mSocket.close();    this.mIsClosed=true;  }}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=61 * hash + (this.bitset != null ? this.bitset.hashCode() : 0);  hash=61 * hash + this.expectedNumberOfFilterElements;  hash=61 * hash + this.bitSetSize;  hash=61 * hash + this.k;  return hash;}  }
class C{  public void rollbackMethodNull(String stepId) throws WorkflowException {  WorkflowStepCompleter.stepSucceded(stepId);}  }
class C{  @VisibleForTesting static OMAEntry parseOMAEntry(String entry){  int index=entry.indexOf(",");  long downloadId=Long.parseLong(entry.substring(0,index));  return new OMAEntry(downloadId,entry.substring(index + 1));}  }
class C{  public String jsFunction_readChar() throws IOException {  int i=getReader().read();  if (i == -1)   return null;  char[] charArray={(char)i};  return new String(charArray);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  BlockContainer clone=(BlockContainer)super.clone();  return clone;}  }
class C{  public StateVectorItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.errorIndicatorPaint=SerialUtilities.readPaint(stream);  this.errorIndicatorStroke=SerialUtilities.readStroke(stream);}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  if (null != m_resultDTDHandler)   m_resultDTDHandler.unparsedEntityDecl(name,publicId,systemId,notationName);}  }
class C{  public ProductFilter1(){  initComponents();}  }
class C{  public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int i;  int progress;  String reflectionAxis="vertical";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("v")) {        reflectionAxis="vertical";      } else       if (args[i].toLowerCase().contains("ho")) {        reflectionAxis="horizontal";      } else       if (args[i].toLowerCase().contains("b")) {        reflectionAxis="both";      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    int rowsLessOne=numRows - 1;    int colsLessOne=numCols - 1;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    double[] data;    if (reflectionAxis.equals("vertical")) {      for (row=0; row < numRows; row++) {        data=image.getRowValues(row);        for (col=0; col < numCols; col++) {          output.setValue(rowsLessOne - row,col,data[col]);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (numRows - 1));        updateProgress("Finding patch min row and columns:",progress);      }    } else     if (reflectionAxis.equals("horizontal")) {      for (row=0; row < numRows; row++) {        data=image.getRowValues(row);        for (col=0; col < numCols; col++) {          output.setValue(row,colsLessOne - col,data[col]);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (numRows - 1));        updateProgress("Finding patch min row and columns:",progress);      }    } else     if (reflectionAxis.equals("both")) {      for (row=0; row < numRows; row++) {        data=image.getRowValues(row);        for (col=0; col < numCols; col++) {          output.setValue(rowsLessOne - row,colsLessOne - col,data[col]);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (numRows - 1));        updateProgress("Finding patch min row and columns:",progress);      }    }    output.setDisplayMinimum(image.getDisplayMinimum());    output.setDisplayMaximum(image.getDisplayMaximum());    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static short hexToShort(final String src,final int srcPos,final short dstInit,final int dstPos,final int nHex){  if (0 == nHex) {    return dstInit;  }  if ((nHex - 1) * 4 + dstPos >= 16) {    throw new IllegalArgumentException("(nHexs-1)*4+dstPos is greather or equal to than 16");  }  short out=dstInit;  int shift=0;  for (int i=0; i < nHex; i++) {    shift=i * 4 + dstPos;    final int bits=(0xf & hexDigitToInt(src.charAt(i + srcPos))) << shift;    final int mask=0xf << shift;    out=(short)((out & ~mask) | bits);  }  return out;}  }
class C{  public static boolean isIgnoring(String name){  if (User.isNull()) {    return false;  }  return User.get().ignore.contains(name);}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  if (requestCode == GET_CODE) {    Editable text=(Editable)mResults.getText();    if (resultCode == RESULT_CANCELED) {      text.append("(cancelled)");    } else {      text.append("(okay ");      text.append(Integer.toString(resultCode));      text.append(") ");      if (data != null) {        text.append(data.getAction());      }    }    text.append("\n");  }}  }
class C{  public static void improveUX(FieldGroup fieldGroup,Button saveButton,Button clearButton){  saveButton.setEnabled(false);  if (clearButton != null) {    clearButton.setEnabled(false);  }  Property.ValueChangeListener buttonStateListener=null;  fieldGroup.getFields().forEach(null);}  }
class C{  @Override final public <T extends Throwable>T halt(final T cause){  final boolean didHalt;  lock.lock();  try {    if (didHalt=!halt) {      firstCause=(cause != null ? cause : new IllegalArgumentException());      error=!isNormalTerminationCause(firstCause);      deadline=isDeadlineTerminationCause(firstCause);      try {        halted.signalAll();      }  finally {        halt=true;      }    }  }  finally {    lock.unlock();  }  try {    logCause(didHalt,cause);  } catch (  Throwable ex) {  }  return cause;}  }
class C{  private double[] cutPointsForSubset(Instances instances,int attIndex,int first,int lastPlusOne){  double[][] counts, bestCounts;  double[] priorCounts, left, right, cutPoints;  double currentCutPoint=-Double.MAX_VALUE, bestCutPoint=-1, currentEntropy, bestEntropy, priorEntropy, gain;  int bestIndex=-1, numCutPoints=0;  double numInstances=0;  if ((lastPlusOne - first) < 2) {    return null;  }  counts=new double[2][instances.numClasses()];  for (int i=first; i < lastPlusOne; i++) {    numInstances+=instances.instance(i).weight();    counts[1][(int)instances.instance(i).classValue()]+=instances.instance(i).weight();  }  priorCounts=new double[instances.numClasses()];  System.arraycopy(counts[1],0,priorCounts,0,instances.numClasses());  priorEntropy=ContingencyTables.entropy(priorCounts);  bestEntropy=priorEntropy;  bestCounts=new double[2][instances.numClasses()];  for (int i=first; i < (lastPlusOne - 1); i++) {    counts[0][(int)instances.instance(i).classValue()]+=instances.instance(i).weight();    counts[1][(int)instances.instance(i).classValue()]-=instances.instance(i).weight();    if (instances.instance(i).value(attIndex) < instances.instance(i + 1).value(attIndex)) {      currentCutPoint=(instances.instance(i).value(attIndex) + instances.instance(i + 1).value(attIndex)) / 2.0;      currentEntropy=ContingencyTables.entropyConditionedOnRows(counts);      if (currentEntropy < bestEntropy) {        bestCutPoint=currentCutPoint;        bestEntropy=currentEntropy;        bestIndex=i;        System.arraycopy(counts[0],0,bestCounts[0],0,instances.numClasses());        System.arraycopy(counts[1],0,bestCounts[1],0,instances.numClasses());      }      numCutPoints++;    }  }  if (!m_UseBetterEncoding) {    numCutPoints=(lastPlusOne - first) - 1;  }  gain=priorEntropy - bestEntropy;  if (gain <= 0) {    return null;  }  if ((m_UseKononenko && KononenkosMDL(priorCounts,bestCounts,numInstances,numCutPoints)) || (!m_UseKononenko && FayyadAndIranisMDL(priorCounts,bestCounts,numInstances,numCutPoints))) {    left=cutPointsForSubset(instances,attIndex,first,bestIndex + 1);    right=cutPointsForSubset(instances,attIndex,bestIndex + 1,lastPlusOne);    if ((left == null) && (right) == null) {      cutPoints=new double[1];      cutPoints[0]=bestCutPoint;    } else     if (right == null) {      cutPoints=new double[left.length + 1];      System.arraycopy(left,0,cutPoints,0,left.length);      cutPoints[left.length]=bestCutPoint;    } else     if (left == null) {      cutPoints=new double[1 + right.length];      cutPoints[0]=bestCutPoint;      System.arraycopy(right,0,cutPoints,1,right.length);    } else {      cutPoints=new double[left.length + right.length + 1];      System.arraycopy(left,0,cutPoints,0,left.length);      cutPoints[left.length]=bestCutPoint;      System.arraycopy(right,0,cutPoints,left.length + 1,right.length);    }    return cutPoints;  } else {    return null;  }}  }
class C{  @Override public TransLog findOne(String id){  return null;}  }
class C{  private ZoneMember makeZoneMember(CIMInstance membershipInstance) throws WBEMException {  String address=cimStringProperty(membershipInstance,"ConnectivityMemberID");  ZoneMember.ConnectivityMemberType type=ZoneMember.ConnectivityMemberType.byValue(cimIntegerProperty(membershipInstance,"ConnectivityMemberType"));  ZoneMember zm=new ZoneMember(address,type);  zm.setInstanceID(cimStringProperty(membershipInstance,"InstanceID"));  zm.setCimObjectPath(membershipInstance.getObjectPath());  return zm;}  }
class C{  public SList(){  size=0;  sentinel=new Node(null,null);}  }
class C{  protected void init(){}  }
class C{  void die(HaitiFood state){  stopper.stop();  state.population.remove(this);  state.peopleList.remove(this);  state.deaths_total++;  state.deaths_this_tick++;}  }
class C{  public static boolean isEnglishLocale(Locale locale){  return Locale.ENGLISH.getLanguage().equals(locale.getLanguage());}  }
class C{  protected void noteUpdate(K key,V newValue,V oldValue){  for (  CacheListener<K,V> listener : listeners) {    listener.noteKeyUpdate(this,key,newValue,oldValue);  }}  }
class C{  GroestlSmallCore(){}  }
class C{  public static StringBuffer arrayToStringBuffer(Object[] elements,String[] delimeters){  Assert.isNotNull(delimeters);  StringBuffer buffer;  if (elements.length == 0) {    buffer=new StringBuffer(3);    buffer.append(delimeters[0]);    buffer.append(SPACE);  } else {    buffer=new StringBuffer((elements.length * 3) + 2);    buffer.append(delimeters[0]);    for (int i=0; i < elements.length; i++) {      buffer.append(elements[i].toString());      if (i != elements.length - 1) {        buffer.append(delimeters[1]);        buffer.append(SPACE);      }    }  }  buffer.append(delimeters[2]);  return buffer;}  }
class C{  public double flesch(List<String> words,int nrofSentences){  words=filterWords(words);  int nrofSyllables=this.syllableCounter.countSyllables(words);  return flesch(nrofSyllables,words.size(),nrofSentences);}  }
class C{  private boolean isUserLastAdminForOrganization(PlatformUser userToBeDeleted){  if (userToBeDeleted.isOrganizationAdmin()) {    List<VOUserDetails> usersForOrganization=getUsersForOrganization();    int count=0;    for (    VOUserDetails currentUser : usersForOrganization) {      if (currentUser.hasAdminRole()) {        count++;      }    }    if (count <= 1) {      return true;    }  }  return false;}  }
class C{  public int size(){  return size;}  }
class C{  private ArrayDBIDs greedy(DistanceQuery<V> distFunc,DBIDs sampleSet,int m,Random random){  ArrayModifiableDBIDs medoids=DBIDUtil.newArray(m);  ArrayModifiableDBIDs s=DBIDUtil.newArray(sampleSet);  DBIDArrayIter iter=s.iter();  DBIDVar m_i=DBIDUtil.newVar();  int size=s.size();  s.swap(random.nextInt(size),--size);  medoids.add(s.pop(m_i));  if (LOG.isDebugging()) {    LOG.debugFiner("medoids " + medoids.toString());  }  int worst=-1;  double worstd=Double.NEGATIVE_INFINITY;  WritableDoubleDataStore distances=DataStoreUtil.makeDoubleStorage(s,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  for (iter.seek(0); iter.getOffset() < size; iter.advance()) {    final double dist=distFunc.distance(iter,m_i);    distances.putDouble(iter,dist);    if (dist > worstd) {      worstd=dist;      worst=iter.getOffset();    }  }  for (int i=1; i < m; i++) {    s.swap(worst,--size);    medoids.add(s.pop(m_i));    worst=-1;    worstd=Double.NEGATIVE_INFINITY;    for (iter.seek(0); iter.getOffset() < size; iter.advance()) {      double dist_new=distFunc.distance(iter,m_i);      double dist_old=distances.doubleValue(iter);      double dist=(dist_new < dist_old) ? dist_new : dist_old;      distances.putDouble(iter,dist);      if (dist > worstd) {        worstd=dist;        worst=iter.getOffset();      }    }    if (LOG.isDebugging()) {      LOG.debugFiner("medoids " + medoids.toString());    }  }  return medoids;}  }
class C{  public static String commonDir(String dir1,String dir2){  String[] path1Elements=dir1.split("/");  String[] path2Elements=dir2.split("/");  List<String> commonPath=new ArrayList<>();  int pathIndex=0;  while (pathIndex < path1Elements.length && pathIndex < path2Elements.length) {    if (path1Elements[pathIndex].equals(path2Elements[pathIndex])) {      commonPath.add(path1Elements[pathIndex]);    } else {      break;    }    pathIndex++;  }  return org.apache.commons.lang.StringUtils.join(commonPath,"/");}  }
class C{  protected boolean beforeDelete(){  if (Env.ZERO.compareTo(getQtyDelivered()) != 0) {    log.saveError("DeleteError",Msg.translate(getCtx(),"QtyDelivered") + "=" + getQtyDelivered());    return false;  }  if (Env.ZERO.compareTo(getQtyReserved()) != 0) {    log.saveError("DeleteError",Msg.translate(getCtx(),"QtyReserved") + "=" + getQtyReserved());    return false;  }  return true;}  }
class C{  public SWFText tagDefineText2(int id,Rect bounds,Matrix matrix) throws IOException {  startTag(TAG_DEFINETEXT2,id,true);  return defineText(bounds,matrix,true);}  }
class C{  public LayerDrawable(Drawable[] layers){  this(layers,null);}  }
class C{  private MemberVisibility isVisible(TModule contextModule,Type contextType,Type declaredReceiverType,TMember member,boolean supercall){  int startIndex=member.getMemberAccessModifier().getValue();  boolean visibility=false;  String firstVisible="PUBLIC";  for (int i=startIndex; i < MemberAccessModifier.values().length; i++) {    boolean visibilityForModifier=false;    MemberAccessModifier modifier=MemberAccessModifier.get(i);switch (modifier) {case PRIVATE:      visibilityForModifier=isModuleVisible(contextModule,member);    break;case PROJECT:  visibilityForModifier=isProjectVisible(contextModule,member);break;case PROTECTED_INTERNAL:visibilityForModifier=isProtectedInternalVisible(contextType,contextModule,declaredReceiverType,member,supercall);break;case PROTECTED:visibilityForModifier=isProtectedVisible(contextType,contextModule,declaredReceiverType,member,supercall);break;case PUBLIC_INTERNAL:visibilityForModifier=isPublicInternalVisible(contextType,contextModule,declaredReceiverType,member);break;case PUBLIC:visibilityForModifier=true;break;default :break;}if (i - startIndex < 1) {visibility=visibilityForModifier;}if (visibilityForModifier) {firstVisible=modifier.getName();break;}}return new MemberVisibility(visibility,firstVisible);}  }
class C{  public boolean isReusable(){  return false;}  }
class C{  public DSAPublicKeyImpl(byte[] encoded) throws InvalidKeyException {  super(encoded);}  }
class C{  public static Writable filterLine(File self,String charset,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure closure) throws IOException {  return IOGroovyMethods.filterLine(newReader(self,charset),closure);}  }
class C{  protected static ExifParser parse(InputStream inputStream,int options,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,options,iRef);}  }
class C{  public void removeDataChangedListener(DataChangedListener l){  listeners.removeListener(l);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:26.586 -0500",hash_original_method="2D94F093F10F1A8356EDEC86FADDCA70",hash_generated_method="5641FECC4850BFBA421BE67B82DBDED5") public MatchResult match(){  if (!matchSuccessful) {    throw new IllegalStateException();  }  return matcher.toMatchResult();}  }
class C{  public void init(Synapse s){  Randomizer rand=new Randomizer();  rand.setPdf(ProbDistribution.NORMAL);  rand.setClipping(true);  rand.setUpperBound(Double.MAX_VALUE);  rand.setLowerBound(0.0000001);  if (s.getSource().getPolarity() == Polarity.EXCITATORY && s.getTarget().getPolarity() == Polarity.EXCITATORY) {    rand.setParam1(0.5);    rand.setParam2(0.25);    U=rand.getRandom();    rand.setParam1(1100);    rand.setParam2(550);    D=rand.getRandom();    rand.setParam1(50);    rand.setParam2(25);    F=rand.getRandom();    spikeDecay.setTimeConstant(3);  } else   if (s.getSource().getPolarity() == Polarity.EXCITATORY && s.getTarget().getPolarity() == Polarity.INHIBITORY) {    rand.setParam1(0.05);    rand.setParam2(0.025);    U=rand.getRandom();    rand.setParam1(125);    rand.setParam2(62.5);    D=rand.getRandom();    rand.setParam1(120);    rand.setParam2(60);    F=rand.getRandom();    spikeDecay.setTimeConstant(3);  } else   if (s.getSource().getPolarity() == Polarity.INHIBITORY && s.getTarget().getPolarity() == Polarity.EXCITATORY) {    rand.setParam1(0.25);    rand.setParam2(0.125);    U=rand.getRandom();    rand.setParam1(700);    rand.setParam2(350);    D=rand.getRandom();    rand.setParam1(20);    rand.setParam2(10);    F=rand.getRandom();    spikeDecay.setTimeConstant(6);  } else   if (s.getSource().getPolarity() == Polarity.INHIBITORY && s.getTarget().getPolarity() == Polarity.INHIBITORY) {    rand.setParam1(0.32);    rand.setParam2(0.16);    U=rand.getRandom();    rand.setParam1(144);    rand.setParam2(72);    D=rand.getRandom();    rand.setParam1(60);    rand.setParam2(30);    F=rand.getRandom();    spikeDecay.setTimeConstant(6);  } else {    rand.setParam1(0.5);    rand.setParam2(0.25);    U=rand.getRandom();    rand.setParam1(1100);    rand.setParam2(550);    D=rand.getRandom();    rand.setParam1(50);    rand.setParam2(25);    F=rand.getRandom();    spikeDecay.setTimeConstant(3);  }  u=U;}  }
class C{  private void updateDatabaseFrom6(SQLiteDatabase db) throws SQLiteException {  if (db != null && db.isOpen()) {    try {      Log.d(TAG,"Will begin migration from database version 6 to next.");      db.beginTransaction();      db.execSQL("CREATE TABLE IF NOT EXISTS `historycall` (`accountID` VARCHAR , `callID` VARCHAR , " + "`call_end` BIGINT , `TIMESTAMP_START` BIGINT , `contactID` BIGINT , " + "`contactKey` VARCHAR , `direction` INTEGER , `missed` SMALLINT , "+ "`number` VARCHAR , `recordPath` VARCHAR ) ;");      db.execSQL("CREATE INDEX IF NOT EXISTS `historycall_TIMESTAMP_START_idx` ON `historycall` " + "( `TIMESTAMP_START` );");      db.execSQL("CREATE TABLE IF NOT EXISTS `historytext` (`accountID` VARCHAR , `callID` VARCHAR , " + "`contactID` BIGINT , `contactKey` VARCHAR , `direction` INTEGER , " + "`id` BIGINT , `message` VARCHAR , `number` VARCHAR , `read` SMALLINT , "+ "`TIMESTAMP` BIGINT , PRIMARY KEY (`id`) );");      db.execSQL("CREATE INDEX IF NOT EXISTS `historytext_TIMESTAMP_idx` ON `historytext` ( `TIMESTAMP` );");      db.execSQL("CREATE INDEX IF NOT EXISTS `historytext_id_idx` ON `historytext` ( `id` );");      Cursor hasATable=db.rawQuery("SELECT name FROM sqlite_master WHERE type=? AND name=?;",new String[]{"table","a"});      if (hasATable.getCount() > 0) {        db.execSQL("INSERT INTO `historycall` (TIMESTAMP_START, call_end, number, missed," + "direction, recordPath, accountID, contactID, contactKey, callID) " + "SELECT TIMESTAMP_START,b,c,d,e,f,g,h,i,j FROM a;");        db.execSQL("DROP TABLE IF EXISTS a_TIMESTAMP_START_idx;");        db.execSQL("DROP TABLE a;");      }      hasATable.close();      Cursor hasETable=db.rawQuery("SELECT name FROM sqlite_master WHERE type=? AND name=?;",new String[]{"table","e"});      if (hasETable.getCount() > 0) {        db.execSQL("INSERT INTO historytext (id, TIMESTAMP, number, direction, accountID," + "contactID, contactKey, callID, message, read) " + "SELECT id,TIMESTAMP,c,d,e,f,g,h,i,j FROM e;");        db.execSQL("DROP TABLE IF EXISTS e_TIMESTAMP_idx;");        db.execSQL("DROP TABLE IF EXISTS e_id_idx;");        db.execSQL("DROP TABLE e;");      }      hasETable.close();      db.setTransactionSuccessful();      db.endTransaction();      Log.d(TAG,"Migration from database version 6 to next, done.");    } catch (    SQLiteException exception) {      Log.e(TAG,"Migration from database version 6 to next, failed.");      throw exception;    }  }}  }
class C{  public void close(){  if (mConnectedAddressList == null)   return;  for (  String address : mConnectedAddressList) {    if (mBluetoothGattMap.get(address) != null) {      mBluetoothGattMap.get(address).close();    }  }  mBluetoothGattMap.clear();  mConnectedAddressList.clear();}  }
class C{  @SuppressWarnings("unchecked") private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  for (int i=0; i < segments.length; ++i) {    segments[i].setTable(new HashEntry[1]);  }  for (; ; ) {    int key=s.readInt();    V value=(V)s.readObject();    put(key,value);  }}  }
class C{  public MLdapProcessor(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  public static Optional<String> packageName(String longName){  if (longName.contains(DOT)) {    return Optional.of(longName.substring(0,longName.lastIndexOf(DOT)));  } else {    return Optional.empty();  }}  }
class C{  public void ensureContains(InfoField field){  for (  InfoField f : getInfoLines()) {    if (f.getId().equals(field.getId())) {      if (f.getType() == field.getType() && f.getNumber().equals(field.getNumber())) {        return;      } else {        throw new VcfFormatException("A VCF INFO field " + field.getId() + " which is incompatible is already present in the VCF header.");      }    }  }  addInfoField(field);}  }
class C{  void syncSummaryView(View view){  boolean useDefaultSummary=true;  if (isChecked && !isEmpty(summaryOn)) {    summaryView.setText(summaryOn);    useDefaultSummary=false;  } else   if (!isChecked && !isEmpty(summaryOff)) {    summaryView.setText(summaryOff);    useDefaultSummary=false;  }  if (useDefaultSummary) {    CharSequence summary=getSummary();    if (!isEmpty(summary)) {      summaryView.setText(summary);      useDefaultSummary=false;    }  }  int newVisibility=View.GONE;  if (!useDefaultSummary) {    newVisibility=View.VISIBLE;  }  if (newVisibility != summaryView.getVisibility()) {    summaryView.setVisibility(newVisibility);  }}  }
class C{  public static byte toByteFromNibbles(byte[] nibbles){  return toByte(nibbles[0],nibbles[1]);}  }
class C{  public static OFGroup createMPLSTunnelLable1(U32 index){  return OFGroup.of(0 | (index.getRaw() & 0x00ffFFff) | (MPLSSubType.MPLS_TUNNEL_LABEL_1 << 24)| (OFDPAGroupType.MPLS_LABEL << 28));}  }
class C{  protected String paramString(){  String wrapString=(wrap ? "true" : "false");  String wordString=(word ? "true" : "false");  return super.paramString() + ",colums=" + columns+ ",columWidth="+ columnWidth+ ",rows="+ rows+ ",rowHeight="+ rowHeight+ ",word="+ wordString+ ",wrap="+ wrapString;}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  private String findSVMName(FileShare fs){  String portGroup=null;  URI port=fs.getStoragePort();  if (port == null) {    _log.info("No storage port URI to retrieve svm name");  } else {    StoragePort stPort=_dbClient.queryObject(StoragePort.class,port);    if (stPort != null) {      URI haDomainUri=stPort.getStorageHADomain();      if (haDomainUri == null) {        _log.info("No Port Group URI for port {}",port);      } else {        StorageHADomain haDomain=_dbClient.queryObject(StorageHADomain.class,haDomainUri);        if (haDomain != null && haDomain.getVirtual() == true) {          portGroup=stPort.getPortGroup();          _log.debug("using port {} and svm {}",stPort.getPortNetworkId(),portGroup);        }      }    }  }  return portGroup;}  }
class C{  public ProfileReport stop(){  if (!isValid()) {    return null;  }  if (_state != StateProfile.ACTIVE) {    return null;  }  _profileTask.stop();  ProfileReport report=_profileTask.getReport();  if (_backgroundPeriod > 0) {    _profileTask.setPeriod(_backgroundPeriod);    _profileTask.start();    _state=StateProfile.BACKGROUND;  } else {    _state=StateProfile.IDLE;  }  return report;}  }
class C{  void verify(int num) throws AdeInternalException {  double secsToEnd=(m_endTime - m_startTime) / 1000.0;  double secsToNext=(m_flushOrNext - m_endTime) / 1000.0;  System.out.printf("[%s]: time %5.3f, till next %5.3f",toString(),secsToEnd,secsToNext);  System.out.flush();  if (m_num != num)   throw new AdeInternalException("Wrong num");  if (m_pos != m_len - 1)   throw new AdeInternalException("Not fully read");  if (m_flushOrNext == 0)   throw new AdeInternalException("Message not flushed");  if (m_flushOrNext < m_endTime)   throw new AdeInternalException("Message flushed before end");  if (m_endTime < m_startTime)   throw new AdeInternalException("Message end before start");  long diff=m_flushOrNext - m_endTime - FLUSH_TIME * 4;  if (diff > 1000)   throw new AdeInternalException("Flush time too large by " + diff + " millis");  System.out.println(": verified ok");}  }
class C{  public WaterfallPanel(SettingsManager settingsManager){  super();  mSettingsManager=settingsManager;  mSettingsManager.addListener(this);  mColorSpectrumCursor=getColor(ColorSettingName.SPECTRUM_CURSOR);  reset();}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Literal.class) {switch (baseOperationID) {case N4JSPackage.LITERAL___GET_VALUE_AS_STRING:      return N4JSPackage.DOUBLE_LITERAL___GET_VALUE_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == NumericLiteral.class) {switch (baseOperationID) {case N4JSPackage.NUMERIC_LITERAL___GET_VALUE_AS_STRING:  return N4JSPackage.DOUBLE_LITERAL___GET_VALUE_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public In(File file){  try {    scanner=new Scanner(file,CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    System.err.println("Could not open " + file);  }}  }
class C{  void selectItem(int index){  currentIndex=index;  if (isSelected(index)) {    return;  }  if (!multipleSelections) {    if (selected.length == 0) {      selected=new int[1];      selected[0]=index;    } else {      int oldSel=selected[0];      selected[0]=index;      if (!isItemHidden(oldSel)) {        repaint(oldSel,oldSel,PAINT_ITEMS);      }    }  } else {    int newsel[]=new int[selected.length + 1];    int i=0;    while (i < selected.length && index > selected[i]) {      newsel[i]=selected[i];      i++;    }    newsel[i]=index;    System.arraycopy(selected,i,newsel,i + 1,selected.length - i);    selected=newsel;  }  if (!isItemHidden(index)) {    repaint(index,index,PAINT_ITEMS);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static final void checkQueueForDependenciesAndExecuteUnblockedTasks(){  List<ProgressThread> toRemove=new LinkedList<>();synchronized (LOCK) {    for (    ProgressThread pg : queuedThreads) {      if (!pg.isBlockedByDependencies()) {        if (!pg.isWaiting()) {          toRemove.add(pg);          EXECUTOR.execute(pg.makeWrapper());        }      }    }  }  for (  ProgressThread pg : toRemove) {synchronized (LOCK) {      queuedThreads.remove(pg);    }  }}  }
class C{  public Textifier visitAnnotation(final String desc,final boolean visible){  buf.setLength(0);  buf.append(tab).append('@');  appendDescriptor(FIELD_DESCRIPTOR,desc);  buf.append('(');  text.add(buf.toString());  Textifier t=createTextifier();  text.add(t.getText());  text.add(visible ? ")\n" : ") // invisible\n");  return t;}  }
class C{  public void enableAllowCrop(boolean allowCrop){  if (allowCrop && mHaveLayout) {    throw new IllegalArgumentException("Cannot set crop after view has been laid out");  }  if (!allowCrop && mAllowCrop) {    throw new IllegalArgumentException("Cannot unset crop mode");  }  mAllowCrop=allowCrop;}  }
class C{  @Override public void removeEventListener2(IGeolocSharingListener listener){  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  if (sLogger.isActivated()) {    sLogger.info("Remove a Geoloc sharing event listener");  }  try {synchronized (mLock) {      mBroadcaster.removeEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public List<ADStructure> parse(byte[] payload){  if (payload == null) {    return null;  }  return parse(payload,0,payload.length);}  }
class C{  private void checkForFailures() throws IOException {  if (failures.isEmpty()) {    return;  }  StringBuilder logEntry=new StringBuilder();  int i=0;  for (; i < 10 && !failures.isEmpty(); ++i) {    BigtableWriteException exc=failures.remove();    logEntry.append("\n").append(exc.getMessage());    if (exc.getCause() != null) {      logEntry.append(": ").append(exc.getCause().getMessage());    }  }  String message=String.format("At least %d errors occurred writing to Bigtable. First %d errors: %s",i + failures.size(),i,logEntry.toString());  logger.error(message);  throw new IOException(message);}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  protected long unwrapValue(Object value){  return ((Long)value).longValue();}  }
class C{  public static float min(final float a,final float b,final float c){  return min(min(a,b),c);}  }
class C{  public static Position fromRadians(double latitudeRadians,double longitudeRadians,double altitude){  Position pos=new Position();  pos.latitude=Math.toDegrees(latitudeRadians);  pos.longitude=Math.toDegrees(longitudeRadians);  pos.altitude=altitude;  return pos;}  }
class C{  public String encrypt(EncryptData encryptData){  GsonBuilder gsonBuilder=new GsonBuilder();  gsonBuilder.registerTypeAdapter(EncryptData.class,new EncryptDataJsonSerializer());  Gson gson=gsonBuilder.create();  String payload=gson.toJson(encryptData);  try {    String protectedHeader=createProtectedHeader();    String encodededProtectedHeader=encryptUtil.base64UrlEncode(protectedHeader.getBytes());    byte[] contentEncryptionKey=encryptUtil.generateSecureRandomBytes(CONTENT_ENCRYPTION_KEY_SIZE);    byte[] encryptedContentEncryptionKey=encryptUtil.encryptContentEncryptionKey(contentEncryptionKey,(RSAPublicKey)publicKeyResponse.getPublicKey());    String encodedEncryptedContentEncryptionKey=encryptUtil.base64UrlEncode(encryptedContentEncryptionKey);    byte[] macKey=Arrays.copyOf(contentEncryptionKey,CONTENT_ENCRYPTION_KEY_SIZE / 2);    byte[] encKey=Arrays.copyOfRange(contentEncryptionKey,CONTENT_ENCRYPTION_KEY_SIZE / 2,CONTENT_ENCRYPTION_KEY_SIZE);    byte[] initializationVector=encryptUtil.generateSecureRandomBytes(INITIALIZATION_VECTOR);    String encodededinitializationVector=encryptUtil.base64UrlEncode(initializationVector);    byte[] cipherText=encryptUtil.encryptPayload(payload,encKey,initializationVector);    String encodedCipherText=encryptUtil.base64UrlEncode(cipherText);    byte[] additionalAuthenticatedData=encodededProtectedHeader.getBytes(Charset.forName("UTF-8"));    byte[] al=calculateAdditionalAuthenticatedDataLength(additionalAuthenticatedData);    byte[] calculatedHmac=calculateHMAC(macKey,additionalAuthenticatedData,initializationVector,cipherText,al);    byte[] authenticationTag=Arrays.copyOf(calculatedHmac,calculatedHmac.length / 2);    String encodedAuthenticationTag=encryptUtil.base64UrlEncode(authenticationTag);    return buildCompactRespresentation(encodededProtectedHeader,encodedEncryptedContentEncryptionKey,encodededinitializationVector,encodedCipherText,encodedAuthenticationTag);  } catch (  EncryptDataException e) {    Log.i(TAG,"Error while encrypting fields" + e.getMessage());  }  return null;}  }
class C{  public void println(final String str){  if ((str != null) && (str.length() > 0)) {    _append(str + "\n");  }}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  if (keyidentifier != null) {    v.add(new DERTaggedObject(false,0,keyidentifier));  }  if (certissuer != null) {    v.add(new DERTaggedObject(false,1,certissuer));  }  if (certserno != null) {    v.add(new DERTaggedObject(false,2,certserno));  }  return new DERSequence(v);}  }
class C{  public SaxEventSource(Reader reader){  Preconditions.checkNotNull(reader,"reader");  this.reader=reader;}  }
class C{  public boolean canMultithread(){  return canMultithread;}  }
class C{  private static void addContext(int size,Locale locale,Element parent){  Element context=parent.addElement(XML_CONTEXT_TEXT);  context.addElement(XML_INIT_TEXT).addText("1");  context.addElement(XML_PASO_TEXT).addText(Integer.toString(size));  context.addElement(XML_END_TEXT).addText(Integer.toString(size));  context.addElement(XML_TOTAL_TEXT).addText(Integer.toString(size));}  }
class C{  protected boolean shouldCheckExistingGroups(){  return true;}  }
class C{  public void before(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){  String newValue=newProps.getProperty(SYSTEM_LOGIN_BANNER);  if (newValue != null && !testInput(newValue)) {    throw APIException.badRequests.parameterValueContainsInvalidCharacters(SYSTEM_LOGIN_BANNER,LEGAL_CHARACTERS_MESSAGE);  }}  }
class C{  public TransformW(TransformW Tx){  this.m00=Tx.m00;  this.m10=Tx.m10;  this.m01=Tx.m01;  this.m11=Tx.m11;  this.m02=Tx.m02;  this.m12=Tx.m12;  this.state=Tx.state;  this.type=Tx.type;}  }
class C{  public synchronized void clearXTextLabels(){  mXTextLabels.clear();}  }
class C{  public Sphere(Vec4 center,double radius){  if (center == null) {    String message=Logging.getMessage("nullValue.CenterIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (radius <= 0) {    String message=Logging.getMessage("Geom.Sphere.RadiusIsZeroOrNegative",radius);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.center=center;  this.radius=radius;}  }
class C{  public String toString(){  StringBuilder builder=new StringBuilder();  if (_operator.numberOfOperands() == 1) {    builder.append(_operator.toString());    builder.append(SExprTokenizer.OPEN_PAREN);    builder.append(_operands.get(0).toString());    builder.append(SExprTokenizer.CLOSE_PAREN);  } else   if (_operator.numberOfOperands() == 2) {    builder.append(SExprTokenizer.OPEN_PAREN);    builder.append(_operands.get(0).toString());    builder.append(_operator.toString());    builder.append(_operands.get(1).toString());    builder.append(SExprTokenizer.CLOSE_PAREN);  } else {    builder.append(SExprTokenizer.OPEN_PAREN);    builder.append(_operator.toString());    for (    Expr opr : _operands) {      builder.append(" ");      builder.append(opr.toString());    }    builder.append(SExprTokenizer.CLOSE_PAREN);  }  return builder.toString();}  }
class C{  private ServiceBuilderImpl(){  _services=null;  _address="null";  _name=_address;  _workers=0;  _api=null;  _queueSize=0;  _queueSizeMax=0;  _offerTimeout=0;  _queueFullHandler=null;  _isPublic=false;  _isAutoStart=false;  _isJournal=false;  _journalMaxCount=0;  _journalDelay=0;}  }
class C{  public static void write(File file,CharSequence data,boolean append) throws IOException {  write(file,data,null,append);}  }
class C{  @Override public int filterRGB(int x,int y,int rgb){  raster[y * width + x]=rgb;  return rgb;}  }
class C{  @Override public void run(){  try {    doRun();  }  finally {  }}  }
class C{  int selectIntegerUnregisteredQuery(Connection c,String sql,Object... vs) throws PalantirSqlException, PalantirInterruptedException {  return basicSql.selectIntegerInternal(c,SQLString.getUnregisteredQuery(sql),vs);}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    String data=newText.getText();    if (data != null && data.length() > 0) {      log.config(data);      if (m_chat.get_ID() == 0)       m_chat.saveEx();      MChatEntry entry=new MChatEntry(m_chat,data);      entry.saveEx();    }  }  dispose();}  }
class C{  public boolean isVisible(){  return m_isCaretVisible;}  }
class C{  public AnimatedLayout(LayoutManager2 proxy){  this.proxy=proxy;  animations=new WeakHashMap<Container,Animator>(5);}  }
class C{  protected void initializeWorld(){  SimulationBody floor=new SimulationBody();  floor.addFixture(Geometry.createRectangle(50.0,0.2));  floor.setMass(MassType.INFINITE);  floor.translate(0,-3);  this.world.addBody(floor);  final int n=5;  for (int i=0; i < n; i++) {    SimulationBody sb=new SimulationBody();    double w=1.0;    double h=Math.random() * 0.3 + 0.1;    sb.addFixture(Geometry.createIsoscelesTriangle(w,h));    sb.translate((Math.random() > 0.5 ? -1 : 1) * Math.random() * 5.0,h * 0.5 - 2.9);    sb.setMass(MassType.INFINITE);    this.world.addBody(sb);  }  SimulationBody right=new SimulationBody();  right.addFixture(Geometry.createRectangle(0.2,20));  right.setMass(MassType.INFINITE);  right.translate(10,7);  this.world.addBody(right);  SimulationBody left=new SimulationBody();  left.addFixture(Geometry.createRectangle(0.2,20));  left.setMass(MassType.INFINITE);  left.translate(-10,7);  this.world.addBody(left);  wheel=new SimulationBody();  wheel.addFixture(Geometry.createCircle(0.5),1.0,20.0,0.1);  wheel.setMass(MassType.NORMAL);  this.world.addBody(wheel);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().playbackControl(VideoFrame.DVD_CONTROL_CHAPTER_PREV);  return null;}  }
class C{  public void readAll(){  for (int row=0; row < _numRows; row++) {    readState[row]=READ;  }  issueNextOperation();}  }
class C{  public static double correlation(ExampleSet exampleSet,Attribute firstAttribute,Attribute secondAttribute,boolean squared){  double sumProd=0.0d;  double sumFirst=0.0d;  double sumSecond=0.0d;  double sumFirstSquared=0.0d;  double sumSecondSquared=0.0d;  int counter=0;  Iterator<Example> reader=exampleSet.iterator();  while (reader.hasNext()) {    Example example=reader.next();    double first=example.getValue(firstAttribute);    double second=example.getValue(secondAttribute);    double prod=first * second;    if (!Double.isNaN(prod)) {      sumProd+=prod;      sumFirst+=first;      sumFirstSquared+=first * first;      sumSecond+=second;      sumSecondSquared+=second * second;      counter++;    }  }  double divisor=Math.sqrt((counter * sumFirstSquared - sumFirst * sumFirst) * (counter * sumSecondSquared - sumSecond * sumSecond));  double r;  if (divisor == 0) {    r=Double.NaN;  } else {    r=(counter * sumProd - sumFirst * sumSecond) / divisor;  }  if (squared) {    return r * r;  } else {    return r;  }}  }
class C{  public String verboseToString(){  String out=resultToString(getResult());switch (result) {case BACK:case FAIL:    out=out + vertex.throwableToString();  break;case FOLLOW:case SUCCEED:out=out + vertex.moreToString();break;case POSSIBLE:break;default :break;}out=out + "Certificate contains:\n" + vertex.certToString();return out;}  }
class C{  public CompositeSlot createCompositeSlot(){  CompositeSlotImpl compositeSlot=new CompositeSlotImpl();  return compositeSlot;}  }
class C{  protected boolean reclassifyDevice(Device device){  if (device == null) {    logger.debug("In reclassify for null device");    return false;  }  boolean needToReclassify=false;  for (  Entity entity : device.entities) {    IEntityClass entityClass=this.entityClassifier.classifyEntity(entity);    if (entityClass == null || device.getEntityClass() == null) {      needToReclassify=true;      break;    }    if (!entityClass.getName().equals(device.getEntityClass().getName())) {      needToReclassify=true;      break;    }  }  if (needToReclassify == false) {    return false;  }  cntDeviceReclassifyDelete.updateCounterNoFlush();  LinkedList<DeviceUpdate> deviceUpdates=new LinkedList<DeviceUpdate>();  this.deleteDevice(device);  deviceUpdates.add(new DeviceUpdate(device,DeviceUpdate.Change.DELETE,null));  if (!deviceUpdates.isEmpty())   processUpdates(deviceUpdates);  for (  Entity entity : device.entities) {    this.learnDeviceByEntity(entity);  }  debugEvents.flushEvents();  return true;}  }
class C{  public void merge(BloomFilter filter){  if (!this.matchesAll() && !filter.matchesAll()) {    checkArgument(filter.data.length == this.data.length && filter.hashFuncs == this.hashFuncs && filter.nTweak == this.nTweak);    for (int i=0; i < data.length; i++)     this.data[i]|=filter.data[i];  } else {    this.data=new byte[]{(byte)0xff};  }}  }
class C{  private void analize(){  StringTokenizer tokenizer2=new StringTokenizer(tokenizer.nextToken(),",");  String nextToken=null;  nextToken=tokenizer2.nextToken();  title=nextToken.substring(1,nextToken.length() - 1);  l=Integer.parseInt(tokenizer2.nextToken());  t=Integer.parseInt(tokenizer2.nextToken());  r=Integer.parseInt(tokenizer2.nextToken());  b=Integer.parseInt(tokenizer2.nextToken());  nextToken=tokenizer2.nextToken();  fontName=nextToken.substring(1,nextToken.length() - 1);  fontSize=Integer.parseInt(tokenizer2.nextToken());  numCtrls=Integer.parseInt(tokenizer2.nextToken());  FCtrlDef ctrlDef=null;  for (int i=0; i < numCtrls; i++) {    nextToken=tokenizer.nextToken();    ctrlDef=new FCtrlDef(nextToken);    ctrldefs.put(new Integer(i),ctrlDef);  }  tokenizer2=new StringTokenizer(tokenizer.nextToken(),",");  type=Integer.parseInt(tokenizer2.nextToken());  pictId=Integer.parseInt(tokenizer2.nextToken());  nextToken=tokenizer2.nextToken();  info=nextToken.substring(1,nextToken.length() - 1);}  }
class C{  public boolean isEmpty(){  return head == tail;}  }
class C{  protected void createDownloadDescriptor(Map<Artifact,Version> artifacts) throws IOException {  Map<Path,Long> binaries=new LinkedHashMap<>();  for (  Map.Entry<Artifact,Version> e : artifacts.entrySet()) {    Artifact artifact=e.getKey();    Version version=e.getValue();    Path pathToBinaries=getPathToBinaries(artifact,version);    Long binariesSize=getBinariesSize(artifact,version);    binaries.put(pathToBinaries,binariesSize);  }  downloadProgress=new DownloadProgress(binaries,artifacts);}  }
class C{  private void initMain(){  try {    FXMLLoader loader=new FXMLLoader(this.getClass().getResource(Resources.FXML + "Main.fxml"));    BorderPane view=loader.load();    double width=stage.getScene().getWidth();    double height=stage.getScene().getHeight();    view.setPrefWidth(width);    view.setPrefHeight(height);    Scene scene=new Scene(view);    stage.setScene(scene);    mainController=loader.getController();    mediaPlayer.volumeProperty().bind(mainController.getVolumeSlider().valueProperty().divide(200));  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  protected void sequence_AnnotationNoAtSign(ISerializationContext context,Annotation semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void copyTreeToClipboard(){  Clipboard cb=new Clipboard(Display.getDefault());  String text=contentToText();  TextTransfer textTransfer=TextTransfer.getInstance();  cb.setContents(new Object[]{text},new Transfer[]{textTransfer});}  }
class C{  public DTLSSession(SessionId id,InetSocketAddress peerAddress,SessionTicket ticket,long initialSequenceNo){  this(peerAddress,false,initialSequenceNo);  sessionIdentifier=id;  masterSecret=ticket.getMasterSecret();  peerIdentity=ticket.getClientIdentity();  cipherSuite=ticket.getCipherSuite();  compressionMethod=ticket.getCompressionMethod();}  }
class C{  public ConnectionDetachedPacketCollector(int maxSize){  this.resultQueue=new ArrayBlockingQueue<Packet>(maxSize);}  }
