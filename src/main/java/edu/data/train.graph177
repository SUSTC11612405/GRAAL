class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public boolean isRunning(){  return cacheServer.isRunning();}  }
class C{  private static byte[] createBlob(byte[] targetInformation,byte[] clientNonce,long time){  byte[] blobSignature=new byte[]{(byte)0x01,(byte)0x01,(byte)0x00,(byte)0x00};  byte[] reserved=new byte[]{(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00};  byte[] unknown1=new byte[]{(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00};  byte[] unknown2=new byte[]{(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00};  time+=11644473600000l;  time*=10000;  byte[] timestamp=new byte[8];  for (int i=0; i < 8; i++) {    timestamp[i]=(byte)time;    time>>>=8;  }  byte[] blob=new byte[blobSignature.length + reserved.length + timestamp.length+ clientNonce.length+ unknown1.length+ targetInformation.length+ unknown2.length];  int offset=0;  System.arraycopy(blobSignature,0,blob,offset,blobSignature.length);  offset+=blobSignature.length;  System.arraycopy(reserved,0,blob,offset,reserved.length);  offset+=reserved.length;  System.arraycopy(timestamp,0,blob,offset,timestamp.length);  offset+=timestamp.length;  System.arraycopy(clientNonce,0,blob,offset,clientNonce.length);  offset+=clientNonce.length;  System.arraycopy(unknown1,0,blob,offset,unknown1.length);  offset+=unknown1.length;  System.arraycopy(targetInformation,0,blob,offset,targetInformation.length);  offset+=targetInformation.length;  System.arraycopy(unknown2,0,blob,offset,unknown2.length);  return blob;}  }
class C{  public static void escapeJavaScript(Writer out,String str) throws IOException {  escapeJavaStyleString(out,str,true,true);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void hideLayerPalettes(){  for (  Component comp : getComponents()) {    ((Layer)comp).hidePalette();  }}  }
class C{  public MockAccountLookup(){  this(UnknownAccountBehavior.MOCK_ACCOUNT);}  }
class C{  public Builder to(final TextPosition to){  this.to=to;  return this;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void unexportLun(String lunId,List<VNXeHostInitiator> initiators){  _logger.info("Unexporting lun: {}",lunId);  for (  VNXeHostInitiator initiator : initiators) {    _logger.info("removing host: {} ",initiator.getName());  }  VNXeLun lun=getLun(lunId);  if (lun == null) {    _logger.info("Could not find lun in the vxne: {}",lunId);    throw VNXeException.exceptions.vnxeCommandFailed("Could not find lun : " + lunId);  }  Set<String> removingHosts=findHostsByInitiators(initiators);  if (removingHosts.isEmpty()) {    _logger.info("No host found.");    return;  }  List<BlockHostAccess> hostAccesses=lun.getHostAccess();  if (hostAccesses == null || hostAccesses.isEmpty()) {    _logger.info("No block host access found for the lun: {}",lunId);    return;  }  List<BlockHostAccess> changedHostAccessList=new ArrayList<BlockHostAccess>();  for (  BlockHostAccess hostAccess : hostAccesses) {    String hostId=hostAccess.getHost().getId();    if (removingHosts.contains(hostId)) {      if (hostAccess.getAccessMask() == HostLUNAccessEnum.BOTH.getValue()) {        hostAccess.setAccessMask(HostLUNAccessEnum.SNAPSHOT.getValue());      } else       if (hostAccess.getAccessMask() == HostLUNAccessEnum.PRODUCTION.getValue()) {        hostAccess.setAccessMask(HostLUNAccessEnum.NOACCESS.getValue());      }    }    changedHostAccessList.add(hostAccess);  }  if (changedHostAccessList.isEmpty()) {    _logger.info("The unexport hosts were not exported.");    return;  }  LunParam lunParam=new LunParam();  lunParam.setHostAccess(changedHostAccessList);  LunModifyParam modifyParam=new LunModifyParam();  modifyParam.setLunParameters(lunParam);  int type=lun.getType();  if (type == VNXeLun.LUNTypeEnum.Standalone.getValue()) {    BlockLunRequests lunReq=new BlockLunRequests(_khClient);    lunReq.modifyLunSync(modifyParam,lun.getStorageResource().getId());  } else {    modifyParam.setLun(new VNXeBase(lunId));    List<LunModifyParam> list=new ArrayList<LunModifyParam>();    list.add(modifyParam);    LunGroupModifyParam groupParam=new LunGroupModifyParam();    groupParam.setLunModify(list);    if (!_khClient.isUnity()) {      LunGroupRequests lunGroupReq=new LunGroupRequests(_khClient);      lunGroupReq.modifyLunGroupSync(lun.getStorageResource().getId(),groupParam);    } else {      ConsistencyGroupRequests cgReq=new ConsistencyGroupRequests(_khClient);      cgReq.modifyConsistencyGroupSync(lun.getStorageResource().getId(),groupParam);    }  }  _logger.info("Done unexporting lun: {}",lunId);}  }
class C{  public static TempPath createFile(Path dir) throws IOException {  return wrap(Files.createTempFile(dir,PREFIX,SUFFIX));}  }
class C{  public static String resolve(String str){  if ((str == null) || str.equals("")) {    return str;  }  Matcher m=PROPERTY_PATTERN.matcher(str);  StringBuffer sb=new StringBuffer();  int start=0;  while (m.find()) {    String propertyName=m.group(1);    String propertyValue=System.getProperty(propertyName,null);    if (propertyValue == null) {      propertyValue=m.group();    }    sb.append(str.substring(start,m.start()));    sb.append(propertyValue);    start=m.end();  }  if (start < str.length()) {    sb.append(str.substring(start));  }  return sb.toString();}  }
class C{  public static byte[] step3(SMState astate,byte[] input) throws SMException {  astate.smProgState=PROG_CHEATED;  BigInteger[] msg2=unserialize(input);  if (checkGroupElem(msg2[0]) || checkGroupElem(msg2[3]) || checkGroupElem(msg2[6])|| checkGroupElem(msg2[7])|| checkExpon(msg2[2])|| checkExpon(msg2[5])|| checkExpon(msg2[9])|| checkExpon(msg2[10])) {    throw new SMException("Invalid Parameter");  }  BigInteger[] msg3=new BigInteger[8];  astate.g3o=msg2[3];  if (checkKnowLog(msg2[1],msg2[2],astate.g1,msg2[0],3) != 0 || checkKnowLog(msg2[4],msg2[5],astate.g1,msg2[3],4) != 0) {    throw new SMException("Proof checking failed");  }  astate.g2=msg2[0].modPow(astate.x2,MODULUS_S);  astate.g3=msg2[3].modPow(astate.x3,MODULUS_S);  if (checkEqualCoords(msg2[8],msg2[9],msg2[10],msg2[6],msg2[7],astate,5) != 0)   throw new SMException("Invalid Parameter");  BigInteger r=randomExponent();  astate.p=astate.g3.modPow(r,MODULUS_S);  msg3[0]=astate.p;  BigInteger qa1=astate.g1.modPow(r,MODULUS_S);  BigInteger qa2=astate.g2.modPow(astate.secret,MODULUS_S);  astate.q=qa1.multiply(qa2).mod(MODULUS_S);  msg3[1]=astate.q;  BigInteger[] res=proofEqualCoords(astate,r,6);  msg3[2]=res[0];  msg3[3]=res[1];  msg3[4]=res[2];  BigInteger inv=msg2[6].modInverse(MODULUS_S);  astate.pab=astate.p.multiply(inv).mod(MODULUS_S);  inv=msg2[7].modInverse(MODULUS_S);  astate.qab=astate.q.multiply(inv).mod(MODULUS_S);  msg3[5]=astate.qab.modPow(astate.x3,MODULUS_S);  res=proofEqualLogs(astate,7);  msg3[6]=res[0];  msg3[7]=res[1];  byte[] output=serialize(msg3);  astate.smProgState=PROG_OK;  return output;}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  if (m_cobwebTree == null) {    return "Cobweb hasn't been built yet!";  } else {    m_cobwebTree.dumpTree(0,text);    return "Number of merges: " + m_numberMerges + "\nNumber of splits: "+ m_numberSplits+ "\nNumber of clusters: "+ numberOfClusters()+ "\n"+ text.toString()+ "\n\n";  }}  }
class C{  private void reportError(@NonNull String msg,@NonNull Element e){  messager.printMessage(Diagnostic.Kind.ERROR,msg,e);}  }
class C{  private void closeFileObject(String typeName,FileObject fileObject){  if ((typeName != null)) {    if (!(fileObject instanceof JavaFileObject))     throw new AssertionError("JavaFileOject not found for " + fileObject);    JavaFileObject javaFileObject=(JavaFileObject)fileObject;switch (javaFileObject.getKind()) {case SOURCE:      generatedSourceNames.add(typeName);    generatedSourceFileObjects.add(javaFileObject);  openTypeNames.remove(typeName);break;case CLASS:generatedClasses.put(typeName,javaFileObject);openTypeNames.remove(typeName);break;default :break;}}}  }
class C{  public final boolean isClient(){  return client;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TANONYMOUS_FORMAL_PARAMETER___GET_NAME:    return getName();case TypesPackage.TANONYMOUS_FORMAL_PARAMETER___GET_DEFINED_NAME:  return getDefinedName();}return super.eInvoke(operationID,arguments);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:51.344 -0500",hash_original_method="C6E3D4490B2BE3A7CABB292DA8889494",hash_generated_method="E479441811656982FFCD05CE3882A748") public boolean cancel(){  return native_cancel();}  }
class C{  @Override public Type PATH(){  return pathType;}  }
class C{  @Override public void layoutChildren(){  double srcX=synapseGroup.getSourceNeuronGroup().getCenterX();  double srcY=synapseGroup.getSourceNeuronGroup().getCenterY();  double tarX=synapseGroup.getTargetNeuronGroup().getCenterX();  double tarY=synapseGroup.getTargetNeuronGroup().getCenterY();  double x=(srcX + tarX) / 2;  double y=(srcY + tarY) / 2;  interactionBox.centerFullBoundsOnPoint(x,y);}  }
class C{  private void addEntry(CacheDataPage cacheDataPage,int entryIdx,Entry newEntry) throws IOException {  updateEntry(cacheDataPage,entryIdx,newEntry,UpdateType.ADD);}  }
class C{  @Deprecated public SelectionInputDialog(String key,boolean editable,Collection<T> selectionValues,T initialSelectionValue,Object... keyArguments){  this(ApplicationFrame.getApplicationFrame(),key,editable,selectionValues,initialSelectionValue,keyArguments);}  }
class C{  public String[] runCommand() throws IOException {  return runCommand(mCommand);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.235 -0400",hash_original_method="A0C3EA85396A82E08004B94E96C47EED",hash_generated_method="177CD40C8F795186EB6168D24BA6C45E") protected PublicKey engineGeneratePublic(KeySpec keySpec) throws InvalidKeySpecException {  if (keySpec != null) {    if (keySpec instanceof DSAPublicKeySpec) {      return new DSAPublicKeyImpl((DSAPublicKeySpec)keySpec);    }    if (keySpec instanceof X509EncodedKeySpec) {      return new DSAPublicKeyImpl((X509EncodedKeySpec)keySpec);    }  }  throw new InvalidKeySpecException("'keySpec' is neither DSAPublicKeySpec nor X509EncodedKeySpec");}  }
class C{  public void addDispatcher(String dispatcherId,int threadsCount){synchronized (dispatchers) {    if (dispatchers.containsKey(dispatcherId)) {      return;    }    ActorDispatcher dispatcher=new ActorDispatcher(dispatcherId,ThreadPriority.LOW,this,Runtime.isSingleThread() ? 1 : threadsCount);    dispatchers.put(dispatcherId,dispatcher);  }}  }
class C{  public static boolean isOutgoingFolder(int messageType){  return (messageType == MESSAGE_TYPE_FAILED) || (messageType == MESSAGE_TYPE_OUTBOX) || (messageType == MESSAGE_TYPE_SENT)|| (messageType == MESSAGE_TYPE_QUEUED);}  }
class C{  public MeasurementGroup addMeasure(String name,double val,double min,double max,boolean lowerisbetter){  measurements.add(new Measurement(name,val,min,max,lowerisbetter));  return this;}  }
class C{  private static String standardizeCharacter(char c){  if (c >= '!' && c <= 'Z')   return String.valueOf(c);  int index=Arrays.binarySearch(s_char,c);  if (index < 0)   return String.valueOf(c);  return s_string[index];}  }
class C{  public PlotEntity(Shape area,Plot plot,String toolTipText,String urlText){  super(area,toolTipText,urlText);  ParamChecks.nullNotPermitted(plot,"plot");  this.plot=plot;}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableNumberOptionalNumberValue res;  if (result == null) {    res=new AnimatableNumberOptionalNumberValue(target);  } else {    res=(AnimatableNumberOptionalNumberValue)result;  }  float newNumber, newOptionalNumber;  boolean newHasOptionalNumber;  if (to != null && interpolation >= 0.5) {    AnimatableNumberOptionalNumberValue toValue=(AnimatableNumberOptionalNumberValue)to;    newNumber=toValue.number;    newOptionalNumber=toValue.optionalNumber;    newHasOptionalNumber=toValue.hasOptionalNumber;  } else {    newNumber=number;    newOptionalNumber=optionalNumber;    newHasOptionalNumber=hasOptionalNumber;  }  if (res.number != newNumber || res.hasOptionalNumber != newHasOptionalNumber || res.optionalNumber != newOptionalNumber) {    res.number=number;    res.optionalNumber=optionalNumber;    res.hasOptionalNumber=hasOptionalNumber;    res.hasChanged=true;  }  return res;}  }
class C{  static void create(Thread parent,long stacksize){  int boundedStackSize=stackSizeFromAPIToJikesRVM(stacksize);  RVMThread vmd=new RVMThread(parent,boundedStackSize,parent.name,parent.daemon,parent.priority);  parent.vmThread=new VMThread(vmd);  vmd.start();}  }
class C{  public static TestRunnerConfig initialize(String[] commandLineArgs){  Preconditions.checkNotNull(commandLineArgs);  TestRunnerConfig result=new TestRunnerConfig();  JCommander jCommander=new JCommander();  jCommander.setAcceptUnknownOptions(true);  jCommander.addObject(result);  jCommander.parse(commandLineArgs);  ARGUMENTS=result;  return ARGUMENTS;}  }
class C{  public void elements(long[] bits,int size){  if (size < 0 || size > bits.length * QuickBitVector.BITS_PER_UNIT)   throw new IllegalArgumentException();  this.bits=bits;  this.nbits=size;}  }
class C{  public static String domToString(Document domDoc){  StringWriter output=new StringWriter();  Transformer transformer=null;  try {    transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"yes");    transformer.transform(new DOMSource(domDoc),new StreamResult(output));  } catch (  TransformerConfigurationException e) {    log.fatal("### Error - Misconfigured Transformer Configuration, this should never happen: " + e.getMessage());  }catch (  TransformerFactoryConfigurationError e) {    log.fatal("### Error - Misconfigured Transformer Factory, this should never happen: " + e.getMessage());  }catch (  TransformerException e) {    log.fatal("### Error - Illegal Input, this should never happen: " + e.getMessage());  }  return output.toString();}  }
class C{  @Nullable static Help findBestHelp(@NotNull final CommandLineArgument argument){  final Option option=argument.findOptionForOptionArgument();  if (option != null) {    return option.getHelp();  }  final Argument realArgument=argument.findRealArgument();  return (realArgument != null ? realArgument.getHelp() : null);}  }
class C{  public boolean canDetach(){  return targetInformation.getDebuggerOptions().canDetach();}  }
class C{  public N4EnumLiteral createN4EnumLiteral(){  N4EnumLiteralImpl n4EnumLiteral=new N4EnumLiteralImpl();  return n4EnumLiteral;}  }
class C{  public static void copyStringValues(Instance instance,boolean instSrcCompat,Instances srcDataset,AttributeLocator srcLoc,Instances destDataset,AttributeLocator destLoc){  if (srcDataset == destDataset) {    return;  }  if (srcLoc.getAttributeIndices().length != destLoc.getAttributeIndices().length) {    throw new IllegalArgumentException("Src and Dest string indices differ in length: " + srcLoc.getAttributeIndices().length + " != "+ destLoc.getAttributeIndices().length);  }  if (srcLoc.getLocatorIndices().length != destLoc.getLocatorIndices().length) {    throw new IllegalArgumentException("Src and Dest locator indices differ in length: " + srcLoc.getLocatorIndices().length + " != "+ destLoc.getLocatorIndices().length);  }  for (int i=0; i < srcLoc.getAttributeIndices().length; i++) {    int instIndex=instSrcCompat ? srcLoc.getActualIndex(srcLoc.getAttributeIndices()[i]) : destLoc.getActualIndex(destLoc.getAttributeIndices()[i]);    Attribute src=srcDataset.attribute(srcLoc.getActualIndex(srcLoc.getAttributeIndices()[i]));    Attribute dest=destDataset.attribute(destLoc.getActualIndex(destLoc.getAttributeIndices()[i]));    if (!instance.isMissing(instIndex)) {      if (instance instanceof SparseInstance && src.value((int)instance.value(instIndex)).equals(Attribute.DUMMY_STRING_VAL)) {        continue;      }      int valIndex=dest.addStringValue(src,(int)instance.value(instIndex));      instance.setValue(instIndex,valIndex);    }  }  int[] srcIndices=srcLoc.getLocatorIndices();  int[] destIndices=destLoc.getLocatorIndices();  for (int i=0; i < srcIndices.length; i++) {    int index=instSrcCompat ? srcLoc.getActualIndex(srcIndices[i]) : destLoc.getActualIndex(destIndices[i]);    if (instance.isMissing(index)) {      continue;    }    Instances rel=instSrcCompat ? instance.relationalValue(index) : instance.relationalValue(index);    AttributeLocator srcStrAttsNew=srcLoc.getLocator(srcIndices[i]);    Instances srcDatasetNew=srcStrAttsNew.getData();    AttributeLocator destStrAttsNew=destLoc.getLocator(destIndices[i]);    Instances destDatasetNew=destStrAttsNew.getData();    for (int n=0; n < rel.numInstances(); n++) {      copyStringValues(rel.instance(n),instSrcCompat,srcDatasetNew,srcStrAttsNew,destDatasetNew,destStrAttsNew);    }  }}  }
class C{  protected void reverse(){  for (int i=0, j=size - 1; i < j; i++, j--) {    double tmpd=dists[j];    dists[j]=dists[i];    dists[i]=tmpd;    int tmpi=ids[j];    ids[j]=ids[i];    ids[i]=tmpi;  }}  }
class C{  public ExtensionHandler(ExtensionProfile profile,Class<? extends ExtensionPoint> extendedClass,Attributes attrs){  super(attrs);  this.extProfile=profile;  this.extendedClass=extendedClass;  this.extManifest=profile.getManifest(extendedClass);  if (this.extManifest != null) {    hasExtensions=true;  }  initializeArbitraryXml(extProfile,extendedClass,this);}  }
class C{  public static Joiner create(Index fromIndex) throws IOException {  Index toIndex=fromIndex.getReferencedIndex();  IndexCursor toCursor=CursorBuilder.createCursor(toIndex);  toCursor.setColumnMatcher(CaseInsensitiveColumnMatcher.INSTANCE);  return new Joiner(fromIndex,toCursor);}  }
class C{  public void testMaxTries(){  int numResources=100;  int maxTries=2;  int checkInterval=250;  AbsentResourceList list=new AbsentResourceList(numResources,maxTries,checkInterval,60000);  for (int i=0; i < maxTries; i++) {    this.markResourcesAbsent(list,numResources);  }  this.testResourcesAbsent(list,numResources);  list.setMaxTries(maxTries + 1);  try {    Thread.sleep((long)(1.01 * checkInterval));    this.testResourcesNotAbsent(list,numResources);  } catch (  InterruptedException e) {    e.printStackTrace();  }  this.markResourcesAbsent(list,numResources);  this.testResourcesAbsent(list,numResources);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:59.701 -0500",hash_original_method="E65DB6002059E528D4BC27B10F44D1B3",hash_generated_method="04F30CD712B1F5D8C17B33B7D01643F1") public static void checkDNS(String dns) throws IOException {  String string=dns.toLowerCase(Locale.US);  int length=string.length();  boolean first_letter=true;  for (int i=0; i < length; i++) {    char ch=string.charAt(i);    if (first_letter) {      if ((length > 2) && (ch == '*') && (string.charAt(1) == '.')) {        first_letter=false;        continue;      }      if ((ch > 'z' || ch < 'a') && (ch < '0' || ch > '9')) {        throw new IOException("DNS name must start with a letter: " + dns);      }      first_letter=false;      continue;    }    if (!((ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9') || (ch == '-')|| (ch == '.'))) {      throw new IOException("Incorrect DNS name: " + dns);    }    if (ch == '.') {      if (string.charAt(i - 1) == '-') {        throw new IOException("Incorrect DNS name: label ends with '-': " + dns);      }      first_letter=true;    }  }}  }
class C{  public File resourceRtfFile(@NotNull String resourceName,@NotNull BigDecimal version){  String fn=resourceName + "-" + version.toPlainString()+ ".rtf";  return dataFile(RESOURCES_DIR + "/" + resourceName+ "/"+ fn);}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  ViewGroup.LayoutParams lyp=v.getLayoutParams();  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  if (lyp != null) {    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));    fl.setLayoutParams(new LayoutParams(lyp.width,lyp.height));  }  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void readProfiles(){  ArrayList<ProfilesModel.Profile> profiles=mProfilesModel.getProfiles();  for (  ProfilesModel.Profile profile : profiles) {    mArrayAdapter.add((CharSequence)profile.mProfileName);  }}  }
class C{  public JavaPairRDD<Envelope,HashSet<Envelope>> SpatialJoinQueryUsingIndex(RectangleRDD objectRDD,RectangleRDD rectangleRDD){  if (objectRDD.indexedRDD == null) {    throw new NullPointerException("Need to invoke buildIndex() first, indexedRDD is null");  }  if (objectRDD.gridRectangleRDD == null) {    throw new NullPointerException("Need to do spatial partitioning first, gridedSRDD is null");  }  JavaPairRDD<Integer,Tuple2<Iterable<STRtree>,Iterable<Envelope>>> cogroupResult=objectRDD.indexedRDD.cogroup(this.rectangleRDD.gridRectangleRDD);  JavaPairRDD<Envelope,HashSet<Envelope>> joinResultWithDuplicates=cogroupResult.flatMapToPair(new RectangleByRectangleJudgementUsingIndex(objectRDD.grids.size()));  JavaPairRDD<Envelope,HashSet<Envelope>> joinListResultAfterAggregation=aggregateJoinResultRectangleByRectangle(joinResultWithDuplicates);  return joinListResultAfterAggregation;}  }
class C{  public void addRaster(float lt,float ln,ImageIcon ii,LinkProperties properties) throws IOException, InterruptedException {  LinkRaster.write(lt,ln,ii,properties,link.dos);}  }
class C{  public PointLayer(Coord position,String name,Image icon){  super(position);  this.name=name;  this.icon=icon;}  }
class C{  @Override public int hashCode(){  int result;  long temp;  temp=Double.doubleToLongBits(this.x0);  result=(int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.x1);  result=29 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.y0);  result=29 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.y1);  result=29 * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  public static boolean hasJspOrHtmlExtension(IResource resource){  String extension=resource.getFileExtension();  return ("jsp".equalsIgnoreCase(extension) || "html".equalsIgnoreCase(extension));}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (entrypoint: ");  result.append(entrypoint);  result.append(')');  return result.toString();}  }
class C{  public static Map<String,List<List<Distributable>>> nodeBlockTaskMapping(List<Distributable> blockInfos,int noOfNodesInput,int parallelism,List<String> activeNode){  Map<String,List<Distributable>> mapOfNodes=CarbonLoaderUtil.nodeBlockMapping(blockInfos,noOfNodesInput,activeNode);  int taskPerNode=parallelism / mapOfNodes.size();  int noOfTasksPerNode=taskPerNode == 0 ? 1 : taskPerNode;  return assignBlocksToTasksPerNode(mapOfNodes,noOfTasksPerNode);}  }
class C{  public int findEventPositionNearestTime(Time time,long id){  if (mRowInfo == null) {    return 0;  }  long millis=time.toMillis(false);  long minDistance=Integer.MAX_VALUE;  long idFoundMinDistance=Integer.MAX_VALUE;  int minIndex=0;  int idFoundMinIndex=0;  int eventInTimeIndex=-1;  int allDayEventInTimeIndex=-1;  int allDayEventDay=0;  int minDay=0;  boolean idFound=false;  int len=mRowInfo.size();  for (int index=0; index < len; index++) {    RowInfo row=mRowInfo.get(index);    if (row.mType == TYPE_DAY) {      continue;    }    if (row.mEventId == id) {      if (row.mEventStartTimeMilli == millis) {        return index;      }      long distance=Math.abs(millis - row.mEventStartTimeMilli);      if (distance < idFoundMinDistance) {        idFoundMinDistance=distance;        idFoundMinIndex=index;      }      idFound=true;    }    if (!idFound) {      if (millis >= row.mEventStartTimeMilli && millis <= row.mEventEndTimeMilli) {        if (row.mAllDay) {          if (allDayEventInTimeIndex == -1) {            allDayEventInTimeIndex=index;            allDayEventDay=row.mDay;          }        } else         if (eventInTimeIndex == -1) {          eventInTimeIndex=index;        }      } else       if (eventInTimeIndex == -1) {        long distance=Math.abs(millis - row.mEventStartTimeMilli);        if (distance < minDistance) {          minDistance=distance;          minIndex=index;          minDay=row.mDay;        }      }    }  }  if (idFound) {    return idFoundMinIndex;  }  if (eventInTimeIndex != -1) {    return eventInTimeIndex;  } else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) {    return allDayEventInTimeIndex;  }  return minIndex;}  }
class C{  public char next(char c) throws JSONException {  char n=this.next();  if (n != c) {    throw this.syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public Builder vertexLabelKey(final String vertexLabelKey){  this.vertexLabelKey=vertexLabelKey;  return this;}  }
class C{  public String encode(final Resource v){  return ((GPO)m_owner).encode(v);}  }
class C{  public void walk(AdvancedModelRenderer box,float speed,float degree,boolean invert,float offset,float weight,float walk,float walkAmount){  box.walk(speed,degree,invert,offset,weight,walk,walkAmount);}  }
class C{  public static Toast showToast(Context ctx,CharSequence msg){  return showToast(ctx,msg,Toast.LENGTH_LONG);}  }
class C{  public object addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public String toString(){  return "(ew = " + eigenvalue + ", ev = ["+ FormatUtil.format(eigenvector)+ "])";}  }
class C{  private static void printCloudletList(List<ContainerCloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  DecimalFormat dft=new DecimalFormat("###.##");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatusString() == "Success") {      Log.print("SUCCESS");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  private void advance() throws IOException {  close();  if (it.hasNext()) {    in=it.next().openStream();  }}  }
class C{  public final void testNextBytesbyteArray01(){  try {    sr.nextBytes(null);    fail("unexpected: nextBytes(null) :: No NullPointerException");  } catch (  NullPointerException e) {  }}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  @Override protected void createMatrixAxes(DataMatrix merge){  for (  AxisValues ax : left.getAxes()) {    merge.add(ax);    if (joinRight != null && ax.getAxis().equals(join)) {      merge.add(joinRight);    }  }}  }
class C{  public static DateTimeFormatter hourMinute(){  if (hm == null) {    hm=new DateTimeFormatterBuilder().append(hourElement()).append(minuteElement()).toFormatter();  }  return hm;}  }
class C{  public static void wrapContentAgain(ViewGroup subTreeRoot,boolean relayoutAllNodes){  wrapContentAgain(subTreeRoot,relayoutAllNodes,MeasureSpec.UNSPECIFIED,MeasureSpec.UNSPECIFIED);}  }
class C{  public static String convertBytesToHex(byte[] value){  return convertBytesToHex(value,value.length);}  }
class C{  public void deleteGroupFileTransfers() throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteGroupFileTransfers();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public boolean isServiceSuspended(){  VOService sel_service=getService();  if (sel_service == null) {    return false;  }  return sel_service.getStatus().equals(ServiceStatus.SUSPENDED);}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    expression.visit(v);  }}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    removeAt(i);  }}  }
class C{  public static boolean isExternalStorageWritable(){  return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());}  }
class C{  int readCorner4(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  private void handleCacheDistributionAdvisee(CacheDistributionAdvisee cda,boolean isRealRegion){  if (cda == null) {    if (logger.isDebugEnabled()) {      logger.debug("<lclRgn is null> {}",this);    }    return;  }  String errorMsg=null;  if (isRealRegion) {    errorMsg=checkCompatibility(cda,this.profile);  }  if (errorMsg != null) {    this.incompatible=true;    if (logger.isDebugEnabled()) {      logger.debug("{} <replyProfile not set because errorMsg={}",this,errorMsg);    }    this.replyException=new ReplyException(new IllegalStateException(errorMsg));  } else {    if (isRealRegion) {      if (isLocalAccessor(cda) && this.profile.isPersistent) {        if (cda instanceof DistributedRegion) {          DistributedRegion dr=(DistributedRegion)cda;          if (!dr.getDataPolicy().withPersistence()) {            dr.setGeneratedVersionTag(false);          }        }        assert cda instanceof LocalRegion;        LocalRegion lr=(LocalRegion)cda;        lr.enableConcurrencyChecks();      }    }    cda.getDistributionAdvisor().putProfile(this.profile);    if (isRealRegion) {      this.replyProfile=(CacheProfile)cda.getProfile();      if (cda instanceof PartitionedRegion) {        PartitionedRegion pr=(PartitionedRegion)cda;        this.replyBucketProfiles=pr.getRegionAdvisor().getBucketRegionProfiles();      } else       if (((LocalRegion)cda).isUsedForPartitionedRegionBucket()) {        this.eventState=((LocalRegion)cda).getEventState();      }    }  }}  }
class C{  @SuppressWarnings("ConstantConditions") public static ExternalResources initialize(@NonNull Context context,@NonNull String baseUrl){  if (null == context) {    throw new IllegalArgumentException("Context must not be null.");  }  if (null == baseUrl) {    throw new IllegalArgumentException("URL must not be null.");  }synchronized (ExternalResources.class) {    if (null != singleton) {      throw new IllegalStateException("Singleton instance already exists.");    }    singleton=new Builder(context,new DefaultUrl(baseUrl)).build();  }  return singleton;}  }
class C{  @LargeTest public void testThumbnailForH263QCIF() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_256kbps_AACLC_32kHz_128kbps_s_0_26.3gp";  final int atTime=0;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=(mediaVideoItem.getWidth() / 2);  final int outHeight=mediaVideoItem.getHeight();  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  public ParsedQuery(TupleExpr tupleExpr,Dataset dataset){  this(null,tupleExpr,dataset);}  }
class C{  public DataAsyncHttpResponseHandler(){  super();}  }
class C{  protected LayerPane(String title){  super();  this.layer=com.bbn.openmap.layer.SinkLayer.getSharedInstance();  GridBagLayout gridbag=new GridBagLayout();  GridBagConstraints c=new GridBagConstraints();  setLayout(gridbag);  JSeparator sep=new JSeparator();  sep.setToolTipText(title);  c.anchor=GridBagConstraints.WEST;  c.weightx=1;  c.fill=GridBagConstraints.HORIZONTAL;  gridbag.setConstraints(sep,c);  add(sep);}  }
class C{  private static String cleanUri(final String uri){  String result=uri.trim();  if (!StringUtils.isEmpty(uri)) {    final int endIndex=result.length() - 1;    if (result.lastIndexOf('/') == endIndex) {      result=result.substring(0,endIndex);    }  }  return result;}  }
class C{  public static void validateVolumeNoReplica(Volume volume,VolumeGroup application,DbClient dbClient){  boolean hasReplica=volume.getFullCopies() != null && !volume.getFullCopies().isEmpty() || volume.getMirrors() != null && !volume.getMirrors().isEmpty();  if (!hasReplica) {    Volume snapSource=volume;    if (volume.isVPlexVolume(dbClient)) {      snapSource=VPlexUtil.getVPLEXBackendVolume(volume,true,dbClient);      if (snapSource == null || snapSource.getInactive()) {        return;      }    }    hasReplica=ControllerUtils.checkIfVolumeHasSnapshot(snapSource,dbClient);    if (!hasReplica && snapSource.isVmax3Volume(dbClient)) {      hasReplica=ControllerUtils.checkIfVolumeHasSnapshotSession(snapSource.getId(),dbClient);      String rgName=snapSource.getReplicationGroupInstance();      if (!hasReplica && NullColumnValueGetter.isNotNullValue(rgName)) {        URI cgURI=snapSource.getConsistencyGroup();        List<BlockSnapshotSession> sessionsList=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,BlockSnapshotSession.class,ContainmentConstraint.Factory.getBlockSnapshotSessionByConsistencyGroup(cgURI));        for (        BlockSnapshotSession session : sessionsList) {          if (rgName.equals(session.getReplicationGroupInstance())) {            hasReplica=true;            break;          }        }      }    }  }  if (hasReplica) {    throw APIException.badRequests.volumeGroupCantBeUpdated(application.getLabel(),String.format("the volume %s has replica. please remove all replicas from the volume",volume.getLabel()));  }}  }
class C{  public FbBlob openBlob(long blob_id,boolean segmented) throws SQLException {  BlobParameterBuffer blobParameterBuffer=database.createBlobParameterBuffer();  blobParameterBuffer.addArgument(BlobParameterBuffer.TYPE,segmented ? BlobParameterBuffer.TYPE_SEGMENTED : BlobParameterBuffer.TYPE_STREAM);  FbBlob blob=database.createBlobForInput(getCurrentTransaction(),blobParameterBuffer,blob_id);  blob.open();  return blob;}  }
class C{  void dispose(){  file.dispose();  file=null;}  }
class C{  @VisibleForTesting boolean checkIsSystemInstall(Context context){  return ((context.getApplicationInfo().flags & ApplicationInfo.FLAG_SYSTEM) != 0);}  }
class C{  public byte[] generateSignature() throws OpenStegoException {  if (!this.plugin.getPurposes().contains(OpenStegoPlugin.Purpose.WATERMARKING)) {    throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.PLUGIN_DOES_NOT_SUPPORT_WM);  }  if (this.config.getPassword() == null || this.config.getPassword().trim().length() == 0) {    throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.PWD_MANDATORY_FOR_GENSIG);  }  return this.plugin.generateSignature();}  }
class C{  public static void printUserBlogs(BloggerService myService) throws ServiceException, IOException {  final URL feedUrl=new URL(METAFEED_URL);  Feed resultFeed=myService.getFeed(feedUrl,Feed.class);  System.out.println(resultFeed.getTitle().getPlainText());  for (int i=0; i < resultFeed.getEntries().size(); i++) {    Entry entry=resultFeed.getEntries().get(i);    System.out.println("\t" + entry.getTitle().getPlainText());  }  System.out.println();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public static boolean hasIncorrectMaskPathForVplex(UnManagedExportMask mask,ExportMask exportMask,DbClient dbClient){  StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,mask.getStorageSystemUri());  boolean checkMaskPathForVplex=storageSystem != null && ConnectivityUtil.isAVPlex(storageSystem);  if (checkMaskPathForVplex && (exportMask.getNativeId() != null && !exportMask.getNativeId().equalsIgnoreCase(mask.getNativeId()))) {    _logger.info("found an existing mask with the same name or initiators {}, but the mask view paths are different. " + "UnManagedExportMask: {} Existing ExportMask: {}",mask.getMaskName(),mask.getNativeId(),exportMask.getNativeId());    return true;  }  return false;}  }
class C{  public FormPtrElement(String name,String uri){  super(name,uri);}  }
class C{  public EncodedImage scaledEncoded(int width,int height){  if (width == getWidth() && height == getHeight()) {    return this;  }  if (width < 0) {    float ratio=((float)height) / ((float)getHeight());    width=Math.max(1,(int)(getWidth() * ratio));  } else {    if (height < 0) {      float ratio=((float)width) / ((float)getWidth());      height=Math.max(1,(int)(getHeight() * ratio));    }  }  try {    ImageIO io=ImageIO.getImageIO();    if (io != null) {      String format=ImageIO.FORMAT_PNG;      if (isOpaque() || !io.isFormatSupported(ImageIO.FORMAT_PNG)) {        if (io.isFormatSupported(ImageIO.FORMAT_JPEG)) {          format=ImageIO.FORMAT_JPEG;        }      }      if (io.isFormatSupported(format)) {        ByteArrayOutputStream bo=new ByteArrayOutputStream();        io.save(new ByteArrayInputStream(getImageData()),bo,format,width,height,0.9f);        Util.cleanup(bo);        EncodedImage img=EncodedImage.create(bo.toByteArray());        img.opaque=opaque;        img.opaqueChecked=opaqueChecked;        if (width > -1 && height > -1) {          img.width=width;          img.height=height;        }        return img;      }    }  } catch (  IOException err) {    err.printStackTrace();  }  return null;}  }
class C{  public boolean vectorMult(GF2Polynomial b) throws RuntimeException {  int i;  int h;  boolean result=false;  if (len != b.len) {    throw new RuntimeException();  }  for (i=0; i < blocks; i++) {    h=value[i] & b.value[i];    result^=parity[h & 0x000000ff];    result^=parity[(h >>> 8) & 0x000000ff];    result^=parity[(h >>> 16) & 0x000000ff];    result^=parity[(h >>> 24) & 0x000000ff];  }  return result;}  }
class C{  protected boolean afterDelete(boolean success){  if (success)   delete_Tree(MTree_Base.TREETYPE_Project);  return success;}  }
class C{  public void updateTransformFullScreen(Matrix matrix,float aspectRatio){  aspectRatio=aspectRatio < 1 ? 1 / aspectRatio : aspectRatio;  if (aspectRatio != mAspectRatio) {    setAspectRatio(aspectRatio);  }  mPreview.setTransform(matrix);  mPreviewArea=mCaptureLayoutHelper.getPreviewRect();  onPreviewAreaChanged(mPreviewArea);}  }
class C{  public String toString(){  return "null";}  }
class C{  public void writeTo(OutputStream os) throws IOException {  os.write(udhIei_.getValue());  os.write(udhIeiData_.length);  os.write(udhIeiData_);}  }
class C{  public Camera(Matrix intr){  intrinsics=intr;  distCoeffs=new Matrix(new double[]{0,0,0,0},1);  invIntrinsics=intr.inverse();  cx=intrinsics.get(0,2);  cy=intrinsics.get(1,2);  fx=intrinsics.get(0,0);  fy=intrinsics.get(1,1);  k1=k2=p1=p2=0;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void output(OutputStream out){  m_html.output(out);}  }
class C{  public UnsupportedOperationException(){}  }
class C{  public static EqualityExpression gte(String propertyName,Object value){  return new EqualityExpression(Operator.GREATER_THAN_OR_EQUAL,propertyName,value);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.JS_DOC_NODE__MARKERS:    return getMarkers();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private synchronized boolean initFilterIfNeeded(AllRequestFilter filter) throws ServletException {  boolean ret=true;  if (filters.contains(filter)) {    if (!initializedFilters.contains(filter)) {      filter.init(filterConfig);      initializedFilters.add(filter);    }  } else {    ret=false;  }  return ret;}  }
class C{  public LSSVM(LSSVM toCopy){  super(toCopy.getKernel().clone(),toCopy.getCacheMode());  this.b_low=toCopy.b_low;  this.b_up=toCopy.b_up;  this.i_up=toCopy.i_up;  this.i_low=toCopy.i_low;  this.C=toCopy.C;  if (toCopy.alphas != null)   this.alphas=Arrays.copyOf(toCopy.alphas,toCopy.alphas.length);  if (toCopy.fcache != null)   this.fcache=Arrays.copyOf(toCopy.fcache,toCopy.fcache.length);}  }
class C{  public GruntProcess(ExecutorService executorService,File workDir,String baseURL,GruntRunnerConfiguration gruntRunnerConfiguration,GruntRunner gruntRunner){  super();  this.executorService=executorService;  this.workDir=workDir;  this.baseURL=baseURL;  this.gruntRunnerConfiguration=gruntRunnerConfiguration;  this.gruntRunner=gruntRunner;}  }
class C{  private Set<URI> processUnManagedClones(StorageVolume driverVolume,UnManagedVolume unManagedParentVolume,com.emc.storageos.db.client.model.StorageSystem storageSystem,com.emc.storageos.db.client.model.StoragePool storagePool,List<UnManagedVolume> unManagedVolumesToCreate,List<UnManagedVolume> unManagedVolumesToUpdate,Set<URI> allCurrentUnManagedCgURIs,Map<String,UnManagedConsistencyGroup> unManagedCGToUpdateMap,Map<String,URI> unManagedVolumeNativeIdToUriMap,Map<String,List<HostExportInfo>> hostToUnManagedVolumeExportInfoMap,BlockStorageDriver driver,DbClient dbClient) throws Exception {  log.info("Processing clones for volume {} ",unManagedParentVolume.getNativeGuid());  Set<URI> cloneUris=new HashSet<>();  List<VolumeClone> driverClones=driver.getVolumeClones(driverVolume);  if (driverClones == null || driverClones.isEmpty()) {    log.info("There are no clones for volume {} ",unManagedParentVolume.getNativeGuid());  } else {    log.info("Clones for unManaged volume {}:" + Joiner.on("\t").join(driverClones),unManagedParentVolume.getNativeGuid());    StringSet unManagedClones=new StringSet();    for (    VolumeClone driverClone : driverClones) {      String managedCloneNativeGuid=NativeGUIDGenerator.generateNativeGuidForVolumeOrBlockSnapShot(storageSystem.getNativeGuid(),driverClone.getNativeId());      Volume systemClone=DiscoveryUtils.checkStorageVolumeExistsInDB(dbClient,managedCloneNativeGuid);      if (null != systemClone) {        log.info("Skipping clone {} as it is already managed by the system.",managedCloneNativeGuid);        continue;      }      String unManagedCloneNatvieGuid=NativeGUIDGenerator.generateNativeGuidForPreExistingVolume(storageSystem.getNativeGuid(),driverClone.getNativeId());      UnManagedVolume unManagedClone=createUnManagedClone(driverClone,unManagedParentVolume,storageSystem,storagePool,unManagedVolumesToCreate,unManagedVolumesToUpdate,dbClient);      cloneUris.add(unManagedClone.getId());      unManagedClones.add(unManagedCloneNatvieGuid);      String isParentVolumeInCG=unManagedParentVolume.getVolumeCharacterstics().get(UnManagedVolume.SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString());      if (isParentVolumeInCG.equals(Boolean.TRUE.toString())) {        log.info("Clone {} is for volume in CG. ",managedCloneNativeGuid);        addObjectToUnManagedConsistencyGroup(storageSystem,driverVolume.getConsistencyGroup(),unManagedClone,allCurrentUnManagedCgURIs,unManagedCGToUpdateMap,driver,dbClient);      }      unManagedVolumeNativeIdToUriMap.put(driverClone.getNativeId(),unManagedClone.getId());      getCloneExportInfo(driver,driverClone,hostToUnManagedVolumeExportInfoMap);    }    if (!unManagedClones.isEmpty()) {      unManagedParentVolume.getVolumeCharacterstics().put(UnManagedVolume.SupportedVolumeCharacterstics.HAS_REPLICAS.toString(),TRUE);      StringSetMap unManagedVolumeInformation=unManagedParentVolume.getVolumeInformation();      log.info("New unManaged clones for unManaged volume {}:" + Joiner.on("\t").join(unManagedClones),unManagedParentVolume.getNativeGuid());      if (unManagedVolumeInformation.containsKey(UnManagedVolume.SupportedVolumeInformation.FULL_COPIES.toString())) {        log.info("Old unManaged clones for unManaged volume {}:" + Joiner.on("\t").join(unManagedVolumeInformation.get(UnManagedVolume.SupportedVolumeInformation.FULL_COPIES.toString())),unManagedParentVolume.getNativeGuid());        unManagedVolumeInformation.get(UnManagedVolume.SupportedVolumeInformation.FULL_COPIES.toString()).replace(unManagedClones);        log.info("Replaced clones :" + Joiner.on("\t").join(unManagedVolumeInformation.get(UnManagedVolume.SupportedVolumeInformation.FULL_COPIES.toString())));      } else {        unManagedVolumeInformation.put(UnManagedVolume.SupportedVolumeInformation.FULL_COPIES.toString(),unManagedClones);      }    } else {      log.info("All clones for volume {} are already managed.",unManagedParentVolume.getNativeGuid());    }  }  return cloneUris;}  }
class C{  public void testGetNotBefore(){  if (this.cert == null) {    return;  }  assertEquals("The NotBefore date is not correct.",tbt_cert.getNotBefore(),cert.getNotBefore());}  }
class C{  public void addFileTransferListener(final FileTransferListener li){  if (listeners == null) {    initListeners();  }synchronized (this.listeners) {    listeners.add(li);  }}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public boolean containsFeature(String feature){  for (Iterator<Feature> it=getFeatures(); it.hasNext(); ) {    if (feature.equals(it.next().getVar()))     return true;  }  return false;}  }
class C{  private void initializeReader() throws IOException {  close();  long startOffset=this.csvParserVo.getBlockDetailsList().get(blockCounter).getBlockOffset();  FileType fileType=FileFactory.getFileType(this.csvParserVo.getBlockDetailsList().get(blockCounter).getFilePath());  long endOffset=this.csvParserVo.getBlockDetailsList().get(blockCounter).getBlockLength() + startOffset;  DataInputStream dataInputStream=FileFactory.getDataInputStream(this.csvParserVo.getBlockDetailsList().get(blockCounter).getFilePath(),fileType,bufferSize,startOffset);  if (startOffset != 0) {    LineReader lineReader=new LineReader(dataInputStream,1);    startOffset+=lineReader.readLine(new Text(),0);  }  inputStreamReader=new BufferedReader(new InputStreamReader(new CustomDataStream(dataInputStream,endOffset - startOffset)));}  }
class C{  public void testRemove(){  LinkedBlockingQueue q=populatedQueue(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.remove());  }  try {    q.remove();    shouldThrow();  } catch (  NoSuchElementException success) {  }}  }
class C{  public CompoundStringBuilder(StringBuilder stringBuilder,int capacity){  if (stringBuilder == null) {    String message=Logging.getMessage("nullValue.StringBuilderIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (capacity < 1) {    String message=Logging.getMessage("generic.CapacityIsInvalid",capacity);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.buffer=stringBuilder;  this.capacity=capacity;  this.offsets=new int[this.capacity];  this.lengths=new int[this.capacity];}  }
class C{  public static long toLongValue(boolean b){  return (b ? 1L : 0L);}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public static CstShort make(short value){  return new CstShort(value);}  }
class C{  public void commit() throws SQLException {  checkClosed();  if (isInGlobalTx()) {    throw SQLError.createSQLException("Can't call commit() on an XAConnection associated with a global transaction",SQLError.SQL_STATE_INVALID_TRANSACTION_TERMINATION,MysqlErrorNumbers.ER_XA_RMERR,this.exceptionInterceptor);  }  try {    this.mc.commit();  } catch (  SQLException sqlException) {    checkAndFireConnectionError(sqlException);  }}  }
class C{  public boolean isDSeparatedFrom(Node node1,Node node2,List<Node> z){  return !isDConnectedTo(node1,node2,z);}  }
class C{  public static String addSalt(String origin,String salt){  Pattern p=Pattern.compile("\\d{2}:\\d{2}:\\d{2}");  Matcher m=p.matcher(salt);  if (m.find() != true)   assert (false);  return origin + revertString(m.group().replaceFirst(":","-"));}  }
class C{  public TOMSender(){}  }
class C{  public int sizeLastElement(){  return currentLastElement + 1;}  }
class C{  public void beforeInsertAllOfFromTo(int index,ObjectArrayList other,int from,int to){  int length=to - from + 1;  this.beforeInsertDummies(index,length);  this.replaceFromToWithFrom(index,index + length - 1,other,from);}  }
class C{  protected void generateElements(){  String name=getCurrentChoice().getSelectedItem();  Generator<E> gen=map.get(name);  String[] params=gen.parameters();  String[] values=new String[labels.length];  for (int i=0; i < labels.length; i++) {    if (labels[i].isVisible()) {      values[i]=fields[i].getText();    }  }  String[] args=new String[params.length];  System.arraycopy(values,0,args,0,params.length);  Generator<E> realOne;  try {    realOne=gen.construct(args);  } catch (  Exception e) {    out.error("Unable to construct generator");    out.error(e.getMessage());    return;  }  try {    int size=Integer.valueOf(getNumField().getText());    E[] items=realOne.generate(size);    for (    IGeneratorManager<E> mgr : managers) {      mgr.generate(items);    }  } catch (  NumberFormatException e) {    java.awt.Toolkit.getDefaultToolkit().beep();    out.error(getNumField().getText() + " is not a number!");  }}  }
class C{  public final static <T,R>R mapReduce(final Stream<T> stream,final Function<? super T,? extends R> mapper,final Monoid<R> reducer){  return reducer.reduce(stream.map(mapper));}  }
class C{  public SwingProperties(final GUIFactory currentGUI){  speech=(Speech)currentGUI.getPdfDecoder().getExternalHandler(Options.SpeechEngine);  showPreferenceWindow(currentGUI);}  }
class C{  public CInstructionFilterExpression(final List<INaviView> views){  m_views=views;}  }
class C{  public Path uptoSegment(int count){  if (count == 0)   return new Path(device,NO_SEGMENTS,separators & (HAS_LEADING | IS_UNC));  if (count >= segments.length)   return this;  checkArgument(count > 0,"Invalid parameter to Path.uptoSegment");  String[] newSegments=new String[count];  System.arraycopy(segments,0,newSegments,0,count);  return new Path(device,newSegments,separators);}  }
class C{  private final void ensureCapacity(int len){  if (value.length < len) {    value=new int[len];    offset=0;    intLen=len;  }}  }
class C{  public ShapeFile(String name) throws IOException {  raf=new RandomAccessFile(name,"rw");  recHdr=new byte[ShapeUtils.SHAPE_FILE_RECORD_HEADER_LENGTH];  recBuf=new byte[DEFAULT_RECORD_BUFFER_SIZE];  initHeader();}  }
class C{  private boolean valueInBounds(BytesRef packedValue,byte[] minPackedValue,byte[] maxPackedValue){  for (int dim=0; dim < numDims; dim++) {    int offset=bytesPerDim * dim;    if (StringHelper.compare(bytesPerDim,packedValue.bytes,packedValue.offset + offset,minPackedValue,offset) < 0) {      return false;    }    if (StringHelper.compare(bytesPerDim,packedValue.bytes,packedValue.offset + offset,maxPackedValue,offset) > 0) {      return false;    }  }  return true;}  }
class C{  public GemFireConfigException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void validatePeers(DataPageMain dpMain) throws IOException {  DataPageMain prevMain=_dataPages.get(dpMain._prevPageNumber);  if (prevMain != null) {    if (prevMain._nextPageNumber != dpMain._pageNumber) {      throw new IllegalStateException(withErrorContext("Prev page " + prevMain + " does not ref "+ dpMain));    }    validatePeerStatus(dpMain,prevMain);  }  DataPageMain nextMain=_dataPages.get(dpMain._nextPageNumber);  if (nextMain != null) {    if (nextMain._prevPageNumber != dpMain._pageNumber) {      throw new IllegalStateException(withErrorContext("Next page " + nextMain + " does not ref "+ dpMain));    }    validatePeerStatus(dpMain,nextMain);  }}  }
class C{  public void addResultChangedListener(ResultChangedListener l){  m_Listeners.add(l);}  }
class C{  public boolean isAnimationStarted(){  return mAnimationStarted;}  }
class C{  public ConsistencyCheckMD5(int id,Table table,int rowFrom,int rowLimit,boolean checkColumnNames,boolean checkColumnTypes,boolean usePKForLimit){  super(id,table,ConsistencyCheck.Method.MD5PK);  this.rowFrom=rowFrom;  this.rowLimit=rowLimit;  this.checkColumnNames=checkColumnNames;  this.checkColumnTypes=checkColumnTypes;  this.usePKForLimit=true;}  }
class C{  public void putField(String className,String fieldName,Object conc_receiver,ReferenceExpression symb_receiver,Expression<?> symb_value){  Map<ReferenceExpression,Expression<?>> symb_field=getOrCreateSymbolicField(className,fieldName);  if (symb_value == null || !symb_value.containsSymbolicVariable()) {    symb_field.remove(symb_receiver);  } else {    symb_field.put(symb_receiver,symb_value);  }}  }
class C{  private static void manageDeletion(AccessStructure struct){  JPlagCentral.cancelSubmission(struct);  System.out.println("[" + new Date() + "] MemoryManager: Submission \""+ struct.getTitle()+ "\" from user \""+ struct.getUsername()+ "\" with submissionID "+ struct.getSubmissionID()+ " saved on "+ new Date(struct.getDate())+ " has been deleted");}  }
class C{  public long enqueue(Request request){  RequestBatch batch=request.asBatch();  long batchId=insert(batch);  request.setBatchId(batchId);  return insert(request);}  }
class C{  public static double median(double[] x,int[] indices){  int pos=x.length / 2;  if (x.length % 2 == 1) {    return x[indices[pos]];  } else {    return (x[indices[pos - 1]] + x[indices[pos]]) / 2.0;  }}  }
class C{  private int gcd(int x,int y){  return y == 0 ? x : gcd(y,x % y);}  }
class C{  protected Query newDefaultQuery(String text){  BooleanQuery.Builder bq=new BooleanQuery.Builder();  for (  Map.Entry<String,Float> entry : weights.entrySet()) {    Query q=createBooleanQuery(entry.getKey(),text,defaultOperator);    if (q != null) {      float boost=entry.getValue();      if (boost != 1f) {        q=new BoostQuery(q,boost);      }      bq.add(q,BooleanClause.Occur.SHOULD);    }  }  return simplify(bq.build());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.389 -0500",hash_original_method="E3916159B459B4D862132868895E3375",hash_generated_method="59C3AF75A47101C071B91073FA092953") public static void cursorShortToContentValuesIfPresent(Cursor cursor,ContentValues values,String column){  final int index=cursor.getColumnIndex(column);  if (index != -1 && !cursor.isNull(index)) {    values.put(column,cursor.getShort(index));  }}  }
class C{  public byte receiveOneByte(){  Log.d(TAG,"receiveOneByte() entrance");  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    Log.d(TAG,"receive: " + (0 + mReceivePacket.getData()[0]));    return mReceivePacket.getData()[0];  } catch (  IOException e) {    e.printStackTrace();  }  return Byte.MIN_VALUE;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=getArg0AsNode(xctxt);  if (DTM.NULL == context)   return XString.EMPTYSTRING;  DTM dtm=xctxt.getDTM(context);  String s=(context != DTM.NULL) ? dtm.getLocalName(context) : "";  if (s.startsWith("#") || s.equals("xmlns"))   return XString.EMPTYSTRING;  return new XString(s);}  }
class C{  public Object clone(){  InterfaceModel newModel=new InterfaceModel();  newModel.setBackgroundColor(getBackgroundColor().getRGB());  newModel.setConstraint(new Rectangle(getConstraint()));  newModel.setForegroundColor(getForegroundColor().getRGB());  newModel.setName(getName());  newModel.setSimpleName(getSimpleName());  newModel.setParent(getParent());  newModel.setShowIcon(isShowIcon());  newModel.setStereoType(getStereoType());  List<AbstractUMLModel> children=getChildren();  for (int i=0; i < children.size(); i++) {    AbstractUMLModel child=children.get(i);    if (child instanceof AttributeModel) {      newModel.addChild((AttributeModel)((AttributeModel)child).clone());    } else     if (child instanceof OperationModel) {      newModel.addChild((OperationModel)((OperationModel)child).clone());    }  }  return newModel;}  }
class C{  private String readFile(String filePath) throws IOException {  BufferedReader br=new BufferedReader(new FileReader(filePath));  try {    StringBuilder sb=new StringBuilder();    String line=br.readLine();    while (line != null) {      sb.append(line);      sb.append("\n");      line=br.readLine();    }    return sb.toString();  }  finally {    br.close();  }}  }
class C{  private void writeEnd(){  long now=System.nanoTime();  writeTime+=now - lastTs;  lastTs=now;}  }
class C{  public void waitForSignal(){synchronized (mInternalLock) {    if (this.mTriggerState) {      return;    }    try {      mInternalLock.wait();    } catch (    final InterruptedException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public BufferedFile(String filename,String mode) throws IOException {  this(filename,mode,BufferedFile.DEFAULT_BUFFER_SIZE);}  }
class C{  static String generateNodeName(final String hostName,final String hostPort,final String hostContext){  try {    return hostName + ':' + hostPort+ '_'+ URLEncoder.encode(trimLeadingAndTrailingSlashes(hostContext),"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new Error("JVM Does not seem to support UTF-8",e);  }}  }
class C{  public void update(String datum){  if (datum == null || datum.isEmpty()) {    return;  }  byte[] data=datum.getBytes(UTF_8);  updateWithHash(hash(data,DEFAULT_UPDATE_SEED));}  }
class C{  public boolean hasNetworkConnection(){  if (configuration.getConnectivityManager() == null) {    throw new IllegalStateException("Connectivity manager is null, library was not properly initialized!");  }  NetworkInfo networkInfo=configuration.getConnectivityManager().getActiveNetworkInfo();  return networkInfo != null && networkInfo.isConnected();}  }
class C{  public void initialise(double[] kernelWidths){  dimensions=kernelWidths.length;  this.suppliedKernelWidths=new double[dimensions];  for (int d=0; d < dimensions; d++) {    this.suppliedKernelWidths[d]=kernelWidths[d];  }  finishInitialisation();}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  load();  return super.viewToModel(x,y,a,bias);}  }
class C{  public static BufferedImage createPattern(String pattern,float scale,Color lineColor,Color backColor){  return createPattern(pattern,defaultDimension,scale,lineColor,backColor);}  }
class C{  public void updateDistribution(final EvolutionState state,final Subpopulation subpop){  Arrays.sort(subpop.individuals);  SimpleMatrix artmp=new SimpleMatrix(genomeSize,mu);  SimpleMatrix xold=xmean;  xmean=new SimpleMatrix(genomeSize,1);  for (int i=0; i < mu; i++) {    DoubleVectorIndividual dvind=(DoubleVectorIndividual)(subpop.individuals[i]);    SimpleMatrix arz=new SimpleMatrix(genomeSize,1,true,dvind.genome);    arz=(arz.minus(xold).divide(sigma));    for (int j=0; j < genomeSize; j++) {      xmean.set(j,0,xmean.get(j,0) + weights[i] * dvind.genome[j]);      artmp.set(j,i,arz.get(j,0));    }  }  SimpleMatrix y=xmean.minus(xold).divide(sigma);  SimpleMatrix bz=invsqrtC.mult(y);  SimpleMatrix bz_scaled=bz.scale(Math.sqrt(cs * (2.0 - cs) * mueff));  ps=ps.scale(1.0 - cs).plus(bz_scaled);  double h_sigma_value=((ps.dot(ps) / (1.0 - Math.pow(1.0 - cs,2.0 * (state.generation + 1)))) / genomeSize);  int hsig=(h_sigma_value < (2.0 + (4.0 / (genomeSize + 1)))) ? 1 : 0;  SimpleMatrix y_scaled=y.scale(hsig * Math.sqrt(cc * (2.0 - cc) * mueff));  pc=pc.scale(1.0 - cc).plus(y_scaled);  c=c.scale(1.0 - c1 - cmu);  c=c.plus(pc.mult(pc.transpose()).plus(c.scale((1.0 - hsig) * cc * (2.0 - cc))).scale(c1));  c=c.plus((artmp.mult(SimpleMatrix.diag(weights).mult(artmp.transpose()))).scale(cmu));  sigma=sigma * Math.exp((cs / damps) * (ps.normF() / chiN - 1.0));  if ((state.generation - lastEigenDecompositionGeneration) > 1.0 / ((c1 + cmu) * genomeSize * 10.0)) {    lastEigenDecompositionGeneration=state.generation;    for (int i=0; i < genomeSize; i++)     for (int j=0; j < i; j++)     c.set(j,i,c.get(i,j));    DenseMatrix64F copy=c.copy().getMatrix();    EigenDecomposition<DenseMatrix64F> eig=DecompositionFactory.eig(genomeSize,true,true);    if (eig.decompose(copy)) {      SimpleMatrix dinv=new SimpleMatrix(genomeSize,genomeSize);      for (int i=0; i < genomeSize; i++) {        double eigrt=Math.sqrt(eig.getEigenvalue(i).real);        d.set(i,i,eigrt);        dinv.set(i,i,1 / eigrt);        CommonOps.insert(eig.getEigenVector(i),b.getMatrix(),0,i);      }      invsqrtC=b.mult(dinv.mult(b.transpose()));      CommonOps.mult(b.getMatrix(),d.getMatrix(),bd);    } else {      state.output.fatal("CMA-ES eigendecomposition failed. ");    }  }  CommonOps.scale(sigma,bd,sbd);  if (useAltTermination && CommonOps.elementMax(d.extractDiag().getMatrix()) > 1e7 * CommonOps.elementMin(d.extractDiag().getMatrix())) {    state.evaluator.setRunComplete("CMAESSpecies: Stopped because matrix condition exceeded limit.");  }}  }
class C{  private static byte randomByte(){  return (byte)(127 - new Random().nextInt(256));}  }
class C{  public static Scenario createScenario(final Config config){  if (config == null) {    throw new NullPointerException("config must not be null!");  }  return new ScenarioImplPops(config);}  }
class C{  public void addDelta(Delta<T> delta){  deltas.add(delta);}  }
class C{  @RequestMapping(value="/SAML2/Metadata") public void metadataDefaultTenantBindingError(Locale locale,HttpServletResponse response) throws IOException {  logger.info("Metadata binding error! The client locale is {}, DEFAULT tenant",locale.toString());  ValidationResult vr=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,"BadRequest","Binding");  String message=vr.getMessage(messageSource,locale);  response.sendError(vr.getResponseCode(),message);  logger.info("Responded with ERROR " + vr.getResponseCode() + ", message "+ message);}  }
class C{  public void dispose(){  rightTopWI.dispose();  super.dispose();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.773 -0400",hash_original_method="B16C5D9D64AA8FA72E850F62C51D59E8",hash_generated_method="AA82A7700C9928612B83A82845811489") private void onDeviceDisappeared(String address){  Intent intent=new Intent(BluetoothDevice.ACTION_DISAPPEARED);  intent.putExtra(BluetoothDevice.EXTRA_DEVICE,mAdapter.getRemoteDevice(address));  mContext.sendBroadcast(intent,BLUETOOTH_PERM);}  }
class C{  public boolean isReallyDeadEnd(){  return (x == fullX);}  }
class C{  public void run(){  return;}  }
class C{  public VOTechnicalService createTechnicalServiceWithOperationsAndOperationParameters(String technicalProductId,ServiceProvisioningService service) throws Exception {  String tsxml=TSXMLForWebService.createTSXMLWithOpsAndOpParams(technicalProductId);  voTechnicalServiceWithOperations=WebserviceTestBase.createTechnicalService(tsxml,technicalProductId,service);  return voTechnicalServiceWithOperations;}  }
class C{  public MonthDay addToCopy(int valueToAdd){  int[] newValues=iBase.getValues();  newValues=getField().add(iBase,iFieldIndex,newValues,valueToAdd);  return new MonthDay(iBase,newValues);}  }
class C{  public static void deleteResourceEvents(DbClient dbClient,URI resourceId){  List<ActionableEvent> events=findResourceEvents(dbClient,resourceId);  log.info("Deleting actionable events for resource " + resourceId);  for (  ActionableEvent event : events) {    log.info("Deleting Actionable Event: " + event.getId() + " Tenant: "+ event.getTenant()+ " Description: "+ event.getDescription()+ " Warning: "+ event.getWarning()+ " Event Status: "+ event.getEventStatus()+ " Resource: "+ event.getResource()+ " Event Code: "+ event.getEventCode());    dbClient.markForDeletion(event);  }}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final NodeVersion version){  serializer.writeString(label,version.toString());}  }
class C{  private static double hackyAdjuster(double f){  double tmp=Math.sqrt(1.0 - f);  return (f <= 0.5) ? tmp : tmp + (0.01 * (f - 0.5));}  }
class C{  public void on(boolean on){  isOn=on;}  }
class C{  public List<operators> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  private void parseMethod() throws IOException {  int accessFlags=readShort();  int nameIndex=readShort();  int descriptorIndex=readShort();  JavaMethod method=new JavaMethod(_loader);  method.setJavaClass(_class);  method.setName(_cp.getUtf8(nameIndex).getValue());  method.setDescriptor(_cp.getUtf8(descriptorIndex).getValue());  method.setAccessFlags(accessFlags);  int attributesCount=readShort();  for (int i=0; i < attributesCount; i++) {    Attribute attr=parseAttribute();    method.addAttribute(attr);    if (attr instanceof ExceptionsAttribute) {      ExceptionsAttribute exn=(ExceptionsAttribute)attr;      ArrayList<String> exnNames=exn.getExceptionList();      if (exnNames.size() > 0) {        JClass[] exnClasses=new JClass[exnNames.size()];        for (int j=0; j < exnNames.size(); j++) {          String exnName=exnNames.get(j).replace('/','.');          exnClasses[j]=_loader.forName(exnName);        }        method.setExceptionTypes(exnClasses);      }    }  }  _class.addMethod(method);}  }
class C{  public static boolean isWeakKey(byte[] key,int offset){  if (key.length - offset < DES_KEY_LENGTH) {    throw new IllegalArgumentException("key material too short.");  }  nextkey:   for (int i=0; i < N_DES_WEAK_KEYS; i++) {    for (int j=0; j < DES_KEY_LENGTH; j++) {      if (key[j + offset] != DES_weak_keys[i * DES_KEY_LENGTH + j]) {        continue nextkey;      }    }    return true;  }  return false;}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  public void destroy(){  if (mIsClosed) {    return;  }  if (mState != STATE_STOPPED) {    mDestroyDelayed=true;    return;  }  mIsClosed=true;  PlaybackService.unregisterListener(getContext(),mInternalListener);  mInternalListener=null;  mApplicationContext.clear();  mApplicationContext=null;  mClientKey=null;  mPlayerPlaylist=null;  mCheerleaderPlayerListeners.clear();}  }
class C{  public void pause(){  if (isInitialized()) {    resetSyncParams();    audioTrack.pause();  }}  }
class C{  public void generateRss(XmlWriter w) throws IOException {  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(3);  if (rel != null && rel.equals("enclosure")) {    if (type != null) {      attrs.add(new XmlWriter.Attribute("type",type));    }    if (href != null) {      attrs.add(new XmlWriter.Attribute("url",href));    }    if (length != -1) {      attrs.add(new XmlWriter.Attribute("length",String.valueOf(length)));    }    w.simpleElement(Namespaces.rssNs,"enclosure",attrs,null);  } else   if ("comments".equals(rel)) {    w.simpleElement(Namespaces.rssNs,"comments",null,href);  } else   if (Rel.ALTERNATE.equals(rel)) {    w.simpleElement(Namespaces.rssNs,"link",null,href);  } else   if (Rel.VIA.equals(rel)) {    if (href != null) {      attrs.add(new XmlWriter.Attribute("url",href));      w.simpleElement(Namespaces.rssNs,"source",attrs,null);    }  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public ClusterGroupEmptyCheckedException(){  super("Cluster group is empty.");}  }
class C{  public List<IComment> appendGlobalComment(final String comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException, com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException {  try {    return m_edge.appendGlobalComment(comment);  } catch (  final CouldntSaveDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException(exception);  }catch (  final CouldntLoadDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException(exception);  }}  }
class C{  public void addObjects(final List<?> toAdd){  for (  Object object : toAdd) {    if (object instanceof Neuron) {      Neuron neuron=(Neuron)object;      addNeuron(neuron);    } else     if (object instanceof Synapse) {      Synapse synapse=(Synapse)object;      addSynapse(synapse);    } else     if (object instanceof NetworkTextObject) {      addText((NetworkTextObject)object);    } else     if (object instanceof NeuronGroup) {      addGroup((NeuronGroup)object);    }  }}  }
class C{  public void flush(){  if (!preambleWritten) {    if (this.declaration) {      writeln("<?xml version=" + quote("1.0") + " encoding="+ quote(this.charset)+ "?>");    }    writeln("<java version=" + quote(System.getProperty("java.version")) + " class="+ quote(XMLDecoder.class.getName())+ ">");    preambleWritten=true;  }  indentation++;  List<Statement> statements=statementList(this);  while (!statements.isEmpty()) {    Statement s=statements.remove(0);    if ("writeObject".equals(s.getMethodName())) {      outputValue(s.getArguments()[0],this,true);    } else {      outputStatement(s,this,false);    }  }  indentation--;  Statement statement=getMissedStatement();  while (statement != null) {    outputStatement(statement,this,false);    statement=getMissedStatement();  }  try {    out.flush();  } catch (  IOException e) {    getExceptionListener().exceptionThrown(e);  }  clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.210 -0500",hash_original_method="932CA0951C2BB2888D24DE8156E5EAB6",hash_generated_method="BC090058BFA5B6988029F7C8CFDF2182") public void shutdownOutput() throws IOException {  implCreateIfNeeded();  impl.shutdownOutput();}  }
class C{  public static String makeLabel(List<String> asList){  return FCZoneReference.makeEndpointsKey(asList.get(0),asList.get(1)) + "_" + asList.get(2);}  }
class C{  protected String doIt() throws Exception {  log.info("M_InOut_ID=" + p_M_InOut_ID + ", Type="+ p_ConfirmType);  MInOut shipment=new MInOut(getCtx(),p_M_InOut_ID,get_TrxName());  if (shipment.get_ID() == 0)   throw new IllegalArgumentException("Not found M_InOut_ID=" + p_M_InOut_ID);  MInOutConfirm confirm=MInOutConfirm.create(shipment,p_ConfirmType,true);  if (confirm == null)   throw new Exception("Cannot create Confirmation for " + shipment.getDocumentNo());  return confirm.getDocumentNo();}  }
class C{  public void detachImageViewFromImageTask(ImageTask imageTask,CubeImageView imageView){  imageTask.removeImageView(imageView);  if (imageTask.isLoading()) {    if (!imageTask.isPreLoad() && !imageTask.stillHasRelatedImageView()) {      LoadImageTask task=mLoadWorkList.get(imageTask.getIdentityKey());      if (task != null) {        task.cancel();      }      if (DEBUG) {        CLog.d(LOG_TAG,"%s previous work is cancelled.",imageTask);      }    }  }  if (!imageTask.stillHasRelatedImageView()) {    imageTask.tryToRecycle();  }}  }
class C{  public SpanOrQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public static void main(String[] args){  runFilter(new Center(),args);}  }
class C{  public void removeEntry(T entry){  if (entry == null) {    return;  }  if (mViewHolderController.removeEntry(entry)) {    notifyDataSetChanged();  }}  }
class C{  public static void nioCopy(File source,File target,FilenameFilter filter,boolean replaceIfExists) throws IOException {  copy(source,target,filter,true,replaceIfExists);}  }
class C{  public X500Principal(String name){  if (name == null) {    throw new NullPointerException("name == null");  }  try {    dn=new Name(name);  } catch (  IOException e) {    throw incorrectInputName(e,name);  }}  }
class C{  public String debugTipText(){  return "Set debug mode. If true then the new attribute will be named with " + "the postfix parse of the supplied expression.";}  }
class C{  public void flush() throws IOException {  closeStartIfNecessary();}  }
class C{  @Override public List<FileInfo> execute(String[] params){  try {    FileInfo fileInfo=new FileInfo();    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String minBId=commandLine.getOptionValue("min-batch-id");    LOGGER.debug("minimum-batch-id is " + minBId);    String maxBId=commandLine.getOptionValue("max-batch-id");    LOGGER.debug("maximum-batch-id is " + maxBId);    fileInfo.setMinBatch(Long.parseLong(minBId));    fileInfo.setMaxBatch(Long.parseLong(maxBId));    return fileDAO.getFiles(Long.parseLong(minBId),Long.parseLong(maxBId));  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (cv != null) {    return cv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public static boolean isDefaultFileDeploymentEnabled(){  return DEFAULT_FILE_DEPLOYMENT_ENABLED;}  }
class C{  private boolean checkForDoubleSpendAgainstPending(Transaction tx,boolean takeAction){  checkState(lock.isHeldByCurrentThread());  HashSet<TransactionOutPoint> outpoints=new HashSet<TransactionOutPoint>();  for (  TransactionInput input : tx.getInputs()) {    outpoints.add(input.getOutpoint());  }  LinkedList<Transaction> doubleSpentTxns=Lists.newLinkedList();  for (  Transaction p : pending.values()) {    for (    TransactionInput input : p.getInputs()) {      TransactionOutPoint outpoint=input.getOutpoint();      if (outpoints.contains(outpoint)) {        if (!doubleSpentTxns.isEmpty() && doubleSpentTxns.getLast() == p)         continue;        doubleSpentTxns.add(p);      }    }  }  if (takeAction && !doubleSpentTxns.isEmpty()) {    killTx(tx,doubleSpentTxns);  }  return !doubleSpentTxns.isEmpty();}  }
class C{  public boolean isEventsEnabled(){  return eventsEnabled;}  }
class C{  public boolean isRunning(){  stateLock.readLock().lock();  try {    return running;  }  finally {    stateLock.readLock().unlock();  }}  }
class C{  public ZapToggleButton(String text,Icon icon){  super(text,icon,false);}  }
class C{  public boolean want(Edge e){  return e.isInstance();}  }
class C{  public void testReadAllBytesOnCustomFS() throws IOException {  Path myfile=PassThroughFileSystem.create().getPath("myfile");  try {    int size=0;    while (size <= 1024) {      byte[] b1=genBytes(size);      Files.write(myfile,b1);      byte[] b2=Files.readAllBytes(myfile);      assertTrue(Arrays.equals(b1,b2),"bytes not equal");      size+=512;    }  }  finally {    Files.deleteIfExists(myfile);  }}  }
class C{  public static Point2D intersection(final Line2D l1,final Line2D l2){  Point2D p0=l1.getP1();  Point2D d0=new Point2D.Double(l1.getX2() - p0.getX(),l1.getY2() - p0.getY());  Point2D p1=l2.getP1();  Point2D d1=new Point2D.Double(l2.getX2() - p1.getX(),l2.getY2() - p1.getY());  Point2D e=new Point2D.Double(p1.getX() - p0.getX(),p1.getY() - p0.getY());  double kross=d0.getX() * d1.getY() - d0.getY() * d1.getX();  double sqrKross=kross * kross;  double sqrLen0=d0.distanceSq(0.0,0.0);  double sqrLen1=d1.distanceSq(0.0,0.0);  if (sqrKross > EPSILON_SQ * sqrLen0 * sqrLen1) {    double s=(e.getX() * d1.getY() - e.getY() * d1.getX()) / kross;    if (s < 0d || s > 1d) {      return null;    }    double t=(e.getX() * d0.getY() - e.getY() * d0.getX()) / kross;    if (t < 0d || t > 1d) {      return null;    }    return new Point2D.Double(p0.getX() + s * d0.getX(),p0.getY() + s * d0.getY());  }  return null;}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length < 2) {    System.err.println(JSParseFilter.class.getName() + " file.js baseURL");    return;  }  InputStream in=new FileInputStream(args[0]);  BufferedReader br=new BufferedReader(new InputStreamReader(in,"UTF-8"));  StringBuffer sb=new StringBuffer();  String line=null;  while ((line=br.readLine()) != null)   sb.append(line + "\n");  JSParseFilter parseFilter=new JSParseFilter();  parseFilter.setConf(NutchConfiguration.create());  Outlink[] links=parseFilter.getJSLinks(sb.toString(),"",args[1]);  System.out.println("Outlinks extracted: " + links.length);  for (int i=0; i < links.length; i++)   System.out.println(" - " + links[i]);}  }
class C{  public String leafPredictionStrategyTipText(){  return "The leaf prediction strategy to use";}  }
class C{  public static boolean isIPv6Address(String address){  return strToIPv6(address) != null;}  }
class C{  private void stubAlwaysWarn(String warning){  if (warnings.add(warning)) {    processingEnv.getMessager().printMessage(javax.tools.Diagnostic.Kind.WARNING,"StubParser: " + warning);  }}  }
class C{  private void drawTriangle(Canvas canvas,Paint paint,float[] path,float x,float y){  path[0]=x;  path[1]=y - size - size / 2;  path[2]=x - size;  path[3]=y + size;  path[4]=x + size;  path[5]=path[3];  drawPath(canvas,path,paint,true);}  }
class C{  @SuppressWarnings("unchecked") @Nullable public T put(Map<AttributeKey,Object> a,@Nullable T value){  if (value == null && !isNullValueAllowed) {    throw new NullPointerException("Null value not allowed for AttributeKey " + key);  }  return (T)a.put(this,value);}  }
class C{  public String globalInfo(){  return "Class implementing the BallTree/Metric Tree algorithm for " + "nearest neighbour search.\n" + "The connection to dataset is only a reference. For the tree "+ "structure the indexes are stored in an array.\n"+ "See the implementing classes of different construction methods of "+ "the trees for details on its construction.\n\n"+ "For more information see also:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  m_Missing.input(instance);  m_Missing.batchFinished();  instance=m_Missing.output();  if (!m_onlyNumeric && m_NominalToBinary != null) {    m_NominalToBinary.input(instance);    m_NominalToBinary.batchFinished();    instance=m_NominalToBinary.output();  }  if (m_Filter != null) {    m_Filter.input(instance);    m_Filter.batchFinished();    instance=m_Filter.output();  }  double result=m_optimizer.SVMOutput(instance);  return result * m_x1 + m_x0;}  }
class C{  public WriteMemoryParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_WRITE_MEMORY_SUCC);}  }
class C{  @Override public int size(){  return size;}  }
class C{  public boolean equals(Object objectToCompare){  if (this == objectToCompare) {    return true;  }  if (objectToCompare == null) {    return false;  }  if (objectToCompare instanceof Decode) {    if (null == this.getCode())     return false;    if (this.getCode().equals(((Decode)objectToCompare).getCode())) {      return true;    }  }  return false;}  }
class C{  public StringConverter(final Map<String,String> map){  this(map,LENGTH_LIMIT);}  }
class C{  public List query(Envelope searchEnv){  return super.query(searchEnv);}  }
class C{  private List extractColumnKeys(String line){  List keys=new java.util.ArrayList();  int fieldIndex=0;  int start=0;  for (int i=0; i < line.length(); i++) {    if (line.charAt(i) == this.fieldDelimiter) {      if (fieldIndex > 0) {        String key=line.substring(start,i);        keys.add(removeStringDelimiters(key));      }      start=i + 1;      fieldIndex++;    }  }  String key=line.substring(start,line.length());  keys.add(removeStringDelimiters(key));  return keys;}  }
class C{  public BaseAdapterHelper linkify(int viewId){  TextView view=retrieveView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  public void subtract(double value1[],double value2[]){  if ((value1 == null) || (value2 == null)) {    throw new NullPointerException();  }  if (value1.length != value2.length) {    throw new IllegalArgumentException("Arrays must be of the same length");  }  for (int i=0; i < value1.length; i++) {    subtract(value1[i],value2[i]);  }}  }
class C{  public static String quoteRemarkSQL(String sql){  sql=replaceAll(sql,"*/","++/");  return replaceAll(sql,"/*","/++");}  }
class C{  public int[][] f2e(){  int fDim=srcEndExclusive - srcStartInclusive;  int[][] f2e=new int[fDim][];  for (int i=srcStartInclusive; i < srcEndExclusive; ++i) {    int localIdx=i - srcStartInclusive;    int[] f2eI=sentencePair.f2e(i);    int tgtAlignDim=f2eI.length;    f2e[localIdx]=new int[tgtAlignDim];    if (tgtAlignDim > 0) {      System.arraycopy(f2eI,0,f2e[localIdx],0,f2e[localIdx].length);      for (int j=0; j < f2e[localIdx].length; ++j) {        f2e[localIdx][j]-=tgtStartInclusive;      }    }  }  return f2e;}  }
class C{  public static void addColTimes(Matrix matrix,long diag,long fromRow,long col,double factor){  long rows=matrix.getRowCount();  for (long row=fromRow; row < rows; row++) {    matrix.setAsDouble(matrix.getAsDouble(row,col) - factor * matrix.getAsDouble(row,diag),row,col);  }}  }
class C{  public boolean isDisabled(){  return false;}  }
class C{  public MaybeStoreMessageCommand(String source,String target,String message){  this.source=source;  this.target=target;  this.message=message;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.143 -0400",hash_original_method="31D7AE397CFF252A33936405586C7B59",hash_generated_method="57535DE803B1480D862171A96E69BC63") public String decode(String pString) throws DecoderException {  if (pString == null) {    return null;  }  try {    return decodeText(pString);  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  private static Territory findASeaTerritoryToPlaceOn(final Territory landTerr,final GameData data,final PlayerID player,final boolean tFirst){  final CompositeMatch<Territory> ourSeaTerr=new CompositeMatchAnd<>(Matches.TerritoryIsWater,Matches.territoryHasUnitsOwnedBy(player));  final CompositeMatch<Unit> seaUnit=new CompositeMatchAnd<>(Matches.unitIsOwnedBy(player),Matches.UnitIsSea);  final CompositeMatch<Unit> airUnit=new CompositeMatchAnd<>(Matches.unitIsOwnedBy(player),Matches.UnitIsAir);  final CompositeMatch<Unit> seaAirUnit=new CompositeMatchOr<>(seaUnit,airUnit);  Territory seaPlaceAt=null, bestSeaPlaceAt=null;  Territory xPlace=null;  if (landTerr == null) {    return seaPlaceAt;  }  final Set<Territory> seaNeighbors=data.getMap().getNeighbors(landTerr,ourSeaTerr);  float minStrength=1000.0F, maxStrength=-1000.0F;  for (  final Territory t : seaNeighbors) {    float enemyStrength=getStrengthOfPotentialAttackers(t,data,player,tFirst,true,null);    final float extraEnemy=strength(t.getUnits().getMatches(Matches.enemyUnit(player,data)),true,true,tFirst);    enemyStrength+=extraEnemy;    float ourStrength=strength(t.getUnits().getMatches(seaAirUnit),false,true,tFirst);    final float existingStrength=strength(t.getUnits().getMatches(Matches.alliedUnit(player,data)),false,true,tFirst);    ourStrength+=existingStrength;    final float strengthDiff=enemyStrength - ourStrength;    if (strengthDiff < minStrength && ourStrength > 0.0F) {      seaPlaceAt=t;      minStrength=strengthDiff;    }    if (strengthDiff > maxStrength && strengthDiff < 3.0F && (ourStrength > 0.0F || existingStrength > 0.0F)) {      bestSeaPlaceAt=t;      maxStrength=strengthDiff;    }  }  if (seaPlaceAt == null && bestSeaPlaceAt == null) {    final Set<Territory> seaNeighbors2=data.getMap().getNeighbors(landTerr,Matches.TerritoryIsWater);    for (    final Territory t : seaNeighbors2) {      final float enemyStrength=getStrengthOfPotentialAttackers(t,data,player,tFirst,true,null);      final float ourStrength=strength(t.getUnits().getMatches(seaAirUnit),false,true,tFirst);      if (t.getUnits().someMatch(Matches.enemyUnit(player,data))) {        xPlace=t;        continue;      }      if ((enemyStrength - ourStrength) < minStrength) {        seaPlaceAt=t;        minStrength=enemyStrength - ourStrength;      }    }  }  if (seaPlaceAt == null && bestSeaPlaceAt == null && xPlace != null) {    seaPlaceAt=xPlace;  }  if (bestSeaPlaceAt == null) {    return seaPlaceAt;  } else {    return bestSeaPlaceAt;  }}  }
class C{  public JobDataMap(){  super(15);}  }
class C{  public void updateNClob(String columnLabel,Reader reader) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mMain=new TransparencyTestMain();  setMain(mMain,"gvr.xml");}  }
class C{  public Point2D translateScreenToJava2D(Point screenPoint){  Insets insets=getInsets();  double x=(screenPoint.getX() - insets.left) / this.scaleX;  double y=(screenPoint.getY() - insets.top) / this.scaleY;  return new Point2D.Double(x,y);}  }
class C{  private void dynInit(){  processField=new Listbox();  KeyNamePair[] keyNamePair=getProcessData();  for (int i=0; i < keyNamePair.length; i++)   processField.appendItem(keyNamePair[i].getName(),keyNamePair[i]);  tableField=new Listbox();  keyNamePair=getTableData();  for (int i=0; i < keyNamePair.length; i++)   tableField.appendItem(keyNamePair[i].getName(),keyNamePair[i]);  createdByQField=new Listbox();  keyNamePair=getUserData();  for (int i=0; i < keyNamePair.length; i++)   createdByQField.appendItem(keyNamePair[i].getName(),keyNamePair[i]);  MLookup lookup=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2762,DisplayType.Search);  bPartnerField=new WSearchEditor(lookup,Msg.translate(Env.getCtx(),"C_BPartner_ID"),"",true,false,true);}  }
class C{  public void postSuggest(long tookInNanos){  currentMetric.dec();  suggestMetric.inc(tookInNanos);}  }
class C{  @Override public void write(int b){  int newcount=count + 1;  if (newcount > buf.length) {    buf=Utils.copyOf(buf,Math.max(buf.length << 1,newcount));  }  buf[count]=(byte)b;  count=newcount;}  }
class C{  @SuppressWarnings("unchecked") public void add(String key,String value){  if (key != null && value != null) {    Object params=urlParamsWithObjects.get(key);    if (params == null) {      params=new HashSet<String>();      this.put(key,params);    }    if (params instanceof List) {      ((List<Object>)params).add(value);    } else     if (params instanceof Set) {      ((Set<Object>)params).add(value);    }  }}  }
class C{  protected void addWalletExtensions() throws Exception {}  }
class C{  @SuppressWarnings("unused") public StreamingViewAsIterable(DataflowRunner runner,View.AsIterable<T> transform){}  }
class C{  public String dump(Object data){  List<Object> list=new ArrayList<Object>(1);  list.add(data);  return dumpAll(list.iterator());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.WORD_BOUNDARY__NOT:    setNot((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public SpeechletException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean rejectIt(){  log.info(toString());  setIsApproved(false);  return true;}  }
class C{  private Point estimateContentSize(){  Point screenSize=new Point();  WindowManager wm=(WindowManager)mApplication.getSystemService(Context.WINDOW_SERVICE);  wm.getDefaultDisplay().getSize(screenSize);  Resources resources=mApplication.getResources();  int statusBarId=resources.getIdentifier("status_bar_height","dimen","android");  int navigationBarId=resources.getIdentifier("navigation_bar_height","dimen","android");  try {    screenSize.y-=resources.getDimensionPixelSize(R.dimen.custom_tabs_control_container_height);    screenSize.y-=resources.getDimensionPixelSize(statusBarId);    screenSize.y-=resources.getDimensionPixelSize(navigationBarId);  } catch (  Resources.NotFoundException e) {  }  return screenSize;}  }
class C{  public Builder(ClusterService clusterService,ClusterState clusterState){  version=clusterState.routingTable().version();  for (  ObjectObjectCursor<String,IndexMetaData> entry : clusterState.metaData().getIndices()) {    IndexRoutingTable.Builder indexRoutingTableBuilder=new IndexRoutingTable.Builder(entry.key,clusterService,clusterState);    indicesRouting.put(entry.key,indexRoutingTableBuilder);  }}  }
class C{  public void clear(){  getEditables().clear();  gpm.clear();}  }
class C{  public void finishSpan(){  TraceState ts=traceState.get();  if (ts != null) {    Span span=ts.popSpan();    if (log.isLoggable(Level.FINEST)) {      log.finest("Finish span = " + span + " trace state = "+ ts);    }    span.finish();    if (ts.isFinished()) {      if (log.isLoggable(Level.FINEST)) {        log.finest("Remove trace state = " + ts);      }      traceState.remove();    }  } else   if (log.isLoggable(Level.FINEST)) {    log.finest("Finish span requested but no trace state");  }}  }
class C{  synchronized void writeState(Bundle state){  if (LOGV_ENABLED) {    Log.v(LOGTAG,"Saving crash recovery state");  }  Parcel p=Parcel.obtain();  try {    state.writeToParcel(p,0);    File stateJournal=new File(mContext.getCacheDir(),STATE_FILE + ".journal");    FileOutputStream fout=new FileOutputStream(stateJournal);    fout.write(p.marshall());    fout.close();    File stateFile=new File(mContext.getCacheDir(),STATE_FILE);    if (!stateJournal.renameTo(stateFile)) {      stateFile.delete();      stateJournal.renameTo(stateFile);    }  } catch (  Throwable e) {    Log.i(LOGTAG,"Failed to save persistent state",e);  } finally {    p.recycle();  }}  }
class C{  public ApplyLayoutAction(final NetworkPanel networkPanel,Layout layout,String name){  super(networkPanel,name,EnablingCondition.NEURONS);  this.layout=layout;  putValue(SHORT_DESCRIPTION,"Apply the " + name + " layout to selected neurons");}  }
class C{  public void incrementInUseCount(){  mInUseLength++;}  }
class C{  public boolean isSnapToGrid(){  return snapToGrid;}  }
class C{  public CMSSignedData generate(String eContentType,CMSProcessable content,boolean encapsulate,Provider sigProvider) throws NoSuchAlgorithmException, CMSException {  return generate(eContentType,content,encapsulate,sigProvider,true);}  }
class C{  public long term(){  return term;}  }
class C{  private String findHighestToVersion(String toVersion){  if (versionChanges.get(toVersion) == null) {    List<String> toVersions=new ArrayList<String>(versionChanges.keySet());    Collections.sort(toVersions,Collections.reverseOrder());    for (    String version : toVersions) {      if (version.compareTo(toVersion) <= 0) {        return version;      }    }    throw new IllegalArgumentException("No version found in rules that matches the given to-version:" + toVersion);  } else {    return toVersion;  }}  }
class C{  protected Pair<Class<? extends Page>,PageParameters> determineCancelTarget(boolean isCheckout,final Customer customer){  return determineSuccessTarget(isCheckout,customer);}  }
class C{  public int[] toArray(){  int[] result=new int[size];  System.arraycopy(array,0,result,0,size);  return result;}  }
class C{  public static TaskResourceRep createFailedTaskOnSnapshotSession(DbClient dbClient,BlockSnapshotSession session,ResourceOperationTypeEnum opr,ServiceCoded sc){  String taskId=UUID.randomUUID().toString();  Operation op=new Operation();  op.setResourceType(opr);  dbClient.createTaskOpStatus(BlockSnapshotSession.class,session.getId(),taskId,op);  session=dbClient.queryObject(BlockSnapshotSession.class,session.getId());  op=session.getOpStatus().get(taskId);  op.error(sc);  session.getOpStatus().updateTaskStatus(taskId,op);  dbClient.updateObject(session);  return TaskMapper.toTask(session,taskId,op);}  }
class C{  public static String join(Object... strings){  return join(Arrays.asList(strings));}  }
class C{  public void collapsed(boolean collapsed){  this.collapsed=collapsed;  if (collapsed) {    Assert.IsNull(entryLookup);    entryLookup=new ConsoleEntryLookupTable();  } else {    entryLookup=null;  }  applyFilter();}  }
class C{  private void removePendingDismisses(int originalHeight){  Collections.sort(pendingDismisses);  int[] dismissPositions=new int[pendingDismisses.size()];  for (int i=pendingDismisses.size() - 1; i >= 0; i--) {    dismissPositions[i]=pendingDismisses.get(i).position;  }  swipeListView.onDismiss(dismissPositions);  ViewGroup.LayoutParams lp;  for (  PendingDismissData pendingDismiss : pendingDismisses) {    if (pendingDismiss.view != null) {      ViewCompat.setAlpha(pendingDismiss.view,1f);      ViewCompat.setTranslationX(pendingDismiss.view,0);      lp=pendingDismiss.view.getLayoutParams();      lp.height=originalHeight;      pendingDismiss.view.setLayoutParams(lp);    }  }  resetPendingDismisses();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Pe(int id,PeProvisioner peProvisioner){  setId(id);  setPeProvisioner(peProvisioner);  status=FREE;}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  r=(r - 30 < 0) ? 0 : r - 30;  g=(g - 30 < 0) ? 0 : g - 30;  b=(b - 30 < 0) ? 0 : b - 30;  return Color.rgb(r,g,b);}  }
class C{  @SuppressWarnings(SUPPRESS_UNCHECKED) public static Repository toRepository(Vector<Object> xmlRpcParameters){  Repository repository=null;  if (!xmlRpcParameters.isEmpty()) {    log.debug("Extracting repository from XML-RPC parameters %s",xmlRpcParameters);    repository=Repository.newInstance((String)xmlRpcParameters.get(REPOSITORY_UID_IDX));    repository.setProject(toProject((Vector<Object>)xmlRpcParameters.get(REPOSITORY_PROJECT_IDX)));    repository.setType(toRepositoryType((Vector<Object>)xmlRpcParameters.get(REPOSITORY_TYPE_IDX)));    repository.setName((String)xmlRpcParameters.get(REPOSITORY_NAME_IDX));    repository.setContentType(ContentType.getInstance((String)xmlRpcParameters.get(REPOSITORY_CONTENTTYPE_IDX)));    repository.setBaseUrl((String)xmlRpcParameters.get(REPOSITORY_BASE_URL_IDX));    repository.setBaseRepositoryUrl((String)xmlRpcParameters.get(REPOSITORY_BASEREPO_URL_IDX));    repository.setBaseTestUrl((String)xmlRpcParameters.get(REPOSITORY_BASETEST_URL_IDX));    repository.setUsername(StringUtils.stripToNull((String)xmlRpcParameters.get(REPOSITORY_USERNAME_IDX)));    repository.setPassword(StringUtils.stripToNull((String)xmlRpcParameters.get(REPOSITORY_PASSWORD_IDX)));    repository.setMaxUsers((Integer)xmlRpcParameters.get(REPOSITORY_MAX_USERS_IDX));  }  return repository;}  }
class C{  public String toName(Character uc){  for (int i=0; i < ntables; i++) {    String name=tables[i].toName(uc);    if (name != null)     return (name);  }  return (null);}  }
class C{  public InflaterInputStream(InputStream in){  this(in,new Inflater());  usesDefaultInflater=true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:24.314 -0500",hash_original_method="D7ECC5727F84FF288304F35202B3A04B",hash_generated_method="4AF2550EA09BF8C55F64BB98239623ED") private Object[] ensureCapacity(int minCapacity){  if (tmp.length < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) Object[] newArray=new Object[newSize];    tmp=newArray;  }  return tmp;}  }
class C{  @SuppressWarnings("unchecked") private void rehash(HashEntry<K,V> node){  HashEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  int newCapacity=oldCapacity << 1;  threshold=(int)(newCapacity * loadFactor);  HashEntry<K,V>[] newTable=(HashEntry<K,V>[])new HashEntry<?,?>[newCapacity];  int sizeMask=newCapacity - 1;  for (int i=0; i < oldCapacity; i++) {    HashEntry<K,V> e=oldTable[i];    if (e != null) {      HashEntry<K,V> next=e.next;      int idx=e.hash & sizeMask;      if (next == null)       newTable[idx]=e; else {        HashEntry<K,V> lastRun=e;        int lastIdx=idx;        for (HashEntry<K,V> last=next; last != null; last=last.next) {          int k=last.hash & sizeMask;          if (k != lastIdx) {            lastIdx=k;            lastRun=last;          }        }        newTable[lastIdx]=lastRun;        for (HashEntry<K,V> p=e; p != lastRun; p=p.next) {          V v=p.value;          int h=p.hash;          int k=h & sizeMask;          HashEntry<K,V> n=newTable[k];          newTable[k]=new HashEntry<K,V>(h,p.key,v,n);        }      }    }  }  int nodeIndex=node.hash & sizeMask;  node.setNext(newTable[nodeIndex]);  newTable[nodeIndex]=node;  table=newTable;}  }
class C{  protected void clearCurrent(){  assert current != -1;  final byte[] key=sourceTuple[current].getKey();  for (int i=current + 1; i < n; i++) {    if (sourceTuple[i] == null) {      continue;    }    final byte[] tmp=sourceTuple[i].getKey();    final int ret=BytesUtil.compareBytes(key,tmp);    if (ret == 0) {      sourceTuple[i]=null;    }  }  sourceTuple[current]=null;  current=-1;}  }
class C{  public BigIntegerConverter(){  super(false);}  }
class C{  private boolean isLocalId(String localId){  if (!localId.startsWith("local_")) {    return false;  }  for (int i=6; i < localId.length(); ++i) {    char c=localId.charAt(i);    if (!(c >= '0' && c <= '9') && !(c >= 'a' && c <= 'f')) {      return false;    }  }  return true;}  }
class C{  public static Mosaic createMosaic(final String namespaceId,final String name){  return new Mosaic(createMosaicId(namespaceId,name),new Quantity(1000));}  }
class C{  public static void main(String[] args){  Enumeration<?> names;  String name;  Vector<String> sorted;  System.out.println("\nExplorer defaults:");  names=PROPERTIES.propertyNames();  sorted=new Vector<String>();  while (names.hasMoreElements()) {    sorted.add(names.nextElement().toString());  }  Collections.sort(sorted);  names=sorted.elements();  while (names.hasMoreElements()) {    name=names.nextElement().toString();    System.out.println("- " + name + ": "+ PROPERTIES.getProperty(name,""));  }  System.out.println();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:18.888 -0500",hash_original_method="B7CAA5254DC76CE96F66DEC8EF811F93",hash_generated_method="C8138A9E2D479ADC662923C60CBB32D3") @Override protected void makeFinished(){  byte[] verify_data;  boolean isTLS=(serverHello.server_version[1] == 1);  if (isTLS) {    verify_data=new byte[12];    computerVerifyDataTLS("server finished",verify_data);  } else {    verify_data=new byte[36];    computerVerifyDataSSLv3(SSLv3Constants.server,verify_data);  }  serverFinished=new Finished(verify_data);  send(serverFinished);  if (isResuming) {    if (isTLS) {      computerReferenceVerifyDataTLS("client finished");    } else {      computerReferenceVerifyDataSSLv3(SSLv3Constants.client);    }    status=NEED_UNWRAP;  } else {    session.lastAccessedTime=System.currentTimeMillis();    status=FINISHED;  }}  }
class C{  public void wrap(){  col=0;  row++;}  }
class C{  public Global includedAttributes(String... includedAttributes){  for (  String attribute : includedAttributes)   global.attributes.add(new LocalAttribute(attribute).toXStream());  return this;}  }
class C{  public void mark(){  mark(1);}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  if (params == null) {    return false;  }  final RPAction add=new RPAction();  add.put("type","sentence");  add.put("value",remainder);  ClientSingletonRepository.getClientFramework().send(add);  return true;}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  int moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  int matrixWidth=(right - left + 1) / moduleSize;  int matrixHeight=(bottom - top + 1) / moduleSize;  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=moduleSize >> 1;  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + y * moduleSize;    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + x * moduleSize,iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public CacheProfile(){}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return CURSOR_ID;case 4:return CLOSE;default :return null;}}  }
class C{  public boolean isOperational(){  return channel.isOperational();}  }
class C{  public CallInfoParser(String callInfo){  super(callInfo);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testXmlNeighborReplacement(){  final String file="target/bindings-jboss-beans.xml";  final String old="<property name=\"port\">@cargo.rmi.port@</property>";  final String permanent="<property name=\"port\">@cargo.jboss.naming.port@</property>";  final String new1="<property name=\"port\">test1</property>";  this.fileHandler.copyFile("src/test/resources/bindings-jboss-beans.xml",file,true);  String read=this.fileHandler.readTextFile(file,"UTF-8");  assertTrue("File " + file + " does not contain: "+ old,read.contains(old));  assertTrue("File " + file + " does not contain: "+ permanent,read.contains(permanent));  XmlReplacement xmlReplacement=new XmlReplacement(file,"//deployment/bean[@name='StandardBindings']/constructor/parameter/set/bean" + "/property[@name='serviceName' and text()='jboss:service=Naming']/.." + "/property[@name='bindingName' and text()='Port']/.."+ "/property[@name='port']",null,false,"test1");  this.fileHandler.replaceInXmlFile(xmlReplacement);  read=this.fileHandler.readTextFile(file,"UTF-8");  assertFalse("File " + file + " still contains: "+ old,read.contains(old));  assertTrue("File " + file + " does not contain: "+ new1,read.contains(new1));  assertTrue("File " + file + " does not contain anymore: "+ permanent,read.contains(permanent));}  }
class C{  public boolean mouseMoved(MouseEvent e){  if (wantsEvents()) {    if (omdtmm != null) {      omdtmm.mouseMoved(e);      return consumeEvents;    } else     if (thingToCreate != null) {      omdtmm=activateDrawingTool(thingToCreate);      return consumeEvents;    } else {      return false;    }  } else {    return super.mouseMoved(e);  }}  }
class C{  public MyHashMap(int initialCapacity,float loadFactorThreshold){  if (initialCapacity > MAMIMUM_CAPACITY)   this.capacity=MAMIMUM_CAPACITY; else   this.capacity=trimToPowerOf2(initialCapacity);  this.loadFactorThreshold=loadFactorThreshold;  table=new ArrayList<>();  for (int i=0; i < capacity; i++) {    table.add(null);  }}  }
class C{  public static void main(String[] args) throws Exception {  ToolRunner.run(HBaseConfiguration.create(),new HBaseSpanViewerServer(),args);}  }
class C{  @After public void tearDown() throws Exception {  TradestrategyTest.clearDBData();}  }
class C{  public void initialize(){}  }
class C{  public int loadAttributeValues(HttpServletRequest request){  if (get_ID() == 0)   save();  int count=0;  MRegistrationAttribute[] attributes=getAttributes();  for (int i=0; i < attributes.length; i++) {    MRegistrationAttribute attribute=attributes[i];    String value=WebUtil.getParameter(request,attribute.getName());    if (value == null)     continue;    MRegistrationValue regValue=new MRegistrationValue(this,attribute.getA_RegistrationAttribute_ID(),value);    if (regValue.save())     count++;  }  log.fine("loadAttributeValues - #" + count + " (of "+ attributes.length+ ")");  return count;}  }
class C{  public ObjectInputStream deserialize(ClassLoader loader,byte[] data) throws OperationsException {  if (data == null) {    throw new RuntimeOperationsException(new IllegalArgumentException(),"Null data passed in parameter");  }  if (data.length == 0) {    throw new RuntimeOperationsException(new IllegalArgumentException(),"Empty data passed in parameter");  }  ByteArrayInputStream bIn;  ObjectInputStream objIn;  bIn=new ByteArrayInputStream(data);  try {    objIn=new ObjectInputStreamWithLoader(bIn,loader);  } catch (  IOException e) {    throw new OperationsException("An IOException occurred trying to de-serialize the data");  }  return objIn;}  }
class C{  private static boolean isMethodInvocationConvertible(Class formal,Class actual){  if (actual == null && !formal.isPrimitive()) {    return true;  }  if (actual != null && formal.isAssignableFrom(actual)) {    return true;  }  if (formal.isPrimitive()) {    if (formal == Boolean.TYPE && actual == Boolean.class)     return true;    if (formal == Character.TYPE && actual == Character.class)     return true;    if (formal == Byte.TYPE && actual == Byte.class)     return true;    if (formal == Short.TYPE && (actual == Short.class || actual == Byte.class))     return true;    if (formal == Integer.TYPE && (actual == Integer.class || actual == Short.class || actual == Byte.class))     return true;    if (formal == Long.TYPE && (actual == Long.class || actual == Integer.class || actual == Short.class || actual == Byte.class))     return true;    if (formal == Float.TYPE && (actual == Float.class || actual == Long.class || actual == Integer.class || actual == Short.class || actual == Byte.class))     return true;    if (formal == Double.TYPE && (actual == Double.class || actual == Float.class || actual == Long.class || actual == Integer.class || actual == Short.class || actual == Byte.class))     return true;  }  return false;}  }
class C{  private void handleStateLeft(InetAddress endpoint,String[] pieces){  assert pieces.length >= 2;  Collection<Token> tokens=getTokensFor(endpoint);  if (logger.isDebugEnabled())   logger.debug("Node {} state left, tokens {}",endpoint,tokens);  excise(tokens,endpoint,extractExpireTime(pieces));}  }
class C{  public final AssertSubscriber<T> assertSubscribed(){  int s=subscriptionCount;  if (s == 0) {    throw new AssertionError("OnSubscribe not called",null);  }  if (s > 1) {    throw new AssertionError("OnSubscribe called multiple times: " + s,null);  }  return this;}  }
class C{  public boolean specifiesRPProtection(){  return (recoverPoint != null && (recoverPoint.getCopies() != null && !recoverPoint.getCopies().isEmpty()));}  }
class C{  public MutableInterval(ReadableInstant start,ReadableInstant end){  super(start,end);}  }
class C{  SerializableImpl(){}  }
class C{  public static void error(String message){  errors++;  err(NL + message);}  }
class C{  public final void expectEof() throws IOException {  expectToken(TokenType.TOKEN_EOF,"End of file expected");}  }
class C{  Builder addLenient(String name,String value){  namesAndValues.add(name);  namesAndValues.add(value.trim());  return this;}  }
class C{  private static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  public boolean hasCategory(String category){  if (category == null) {    return false;  }  return categories.contains(StringUtil.toLowerCase(category));}  }
class C{  @SuppressWarnings("unchecked") public <T>T callFunction(String name,Object... args){  try {    return (T)invocableEngine.invokeFunction(name,args);  } catch (  Exception e) {    throw new IllegalArgumentException("Function call failed: " + e);  }}  }
class C{  public boolean parseKMLStream(InputStream stream,ZipFile kmzContainer){  KmlSaxHandler handler=new KmlSaxHandler(mLocalFile,kmzContainer);  boolean ok;  try {    SAXParser parser=SAXParserFactory.newInstance().newSAXParser();    parser.parse(stream,handler);    mKmlRoot=handler.mKmlRoot;    ok=true;  } catch (  Exception e) {    e.printStackTrace();    ok=false;  }  return ok;}  }
class C{  public static void assertValid(ObjectReference ref){  if (ref.isNull())   return;  assert ref.toAddress().toWord().and(Word.fromIntZeroExtend(0x3)).EQ(Word.zero()) : ref + " is incorrectly aligned for an object reference";  assert ObjectModel.hasValidId(ref) : ref + " does not have a valid Object ID";  if (ENFORCE_OBJECT_SANITY) {    getObjectTable().assertValid(ref);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.667 -0500",hash_original_method="359991759D26E2A3F33ACAEA17758D18",hash_generated_method="DF397C0487B7030073A58781A19C1EEE") public Object clone(){  try {    Class<?> clazz=this.getClass();    Constructor<?> cons=clazz.getConstructor((Class[])null);    SIPHeaderList<HDR> retval=(SIPHeaderList<HDR>)cons.newInstance((Object[])null);    retval.headerName=this.headerName;    retval.myClass=this.myClass;    return retval.clonehlist(this.hlist);  } catch (  Exception ex) {    throw new RuntimeException("Could not clone!",ex);  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private static void primitive2b(MethodVisitor mv,ClassNode type){  Label trueLabel=new Label();  Label falseLabel=new Label();  if (type == ClassHelper.double_TYPE) {    mv.visitInsn(DCONST_0);    mv.visitInsn(DCMPL);  } else   if (type == ClassHelper.long_TYPE) {    mv.visitInsn(LCONST_0);    mv.visitInsn(LCMP);  } else   if (type == ClassHelper.float_TYPE) {    mv.visitInsn(FCONST_0);    mv.visitInsn(FCMPL);  } else   if (type == ClassHelper.int_TYPE) {  }  mv.visitJumpInsn(IFEQ,falseLabel);  mv.visitInsn(ICONST_1);  mv.visitJumpInsn(GOTO,trueLabel);  mv.visitLabel(falseLabel);  mv.visitInsn(ICONST_0);  mv.visitLabel(trueLabel);}  }
class C{  public static void doubleCenterSymmetric(double[][] m){  final int size=m.length;  double[] means=new double[size];  for (int x=0; x < m.length; x++) {    final double[] rowx=m[x];    double rmean=means[x] - means[x] / (x + 1);    for (int y=x + 1; y < rowx.length; y++) {      final double nv=rowx[y];      final double dx=nv - rmean, dy=nv - means[y];      rmean+=dx / (y + 1);      means[y]+=dy / (x + 1);    }    means[x]=rmean;  }  double mean=means[0];  for (int x=1; x < size; x++) {    double dm=means[x] - mean;    mean+=dm / (x + 1);  }  for (int x=0; x < size; x++) {    m[x][x]=-2. * means[x] + mean;    for (int y=x + 1; y < size; y++) {      final double nv=m[x][y] - means[x] - means[y] + mean;      m[x][y]=nv;      m[y][x]=nv;    }  }}  }
class C{  public final synchronized boolean stopSearch(){  searchRequest=null;switch (engineState.state) {case SEARCH:case PONDER:case ANALYZE:    uciEngine.writeLineToEngine("stop");  engineState.setState(MainState.STOP_SEARCH);return true;default :return false;}}  }
class C{  public void ready(){  ready("Operation completed successfully");}  }
class C{  public BayesPm(Graph graph){  if (graph == null) {    throw new NullPointerException("The graph must not be null.");  }  this.dag=new EdgeListGraph(graph);  this.nodesToVariables=new HashMap<>();  boolean allDiscreteVars=true;  for (  Node node : graph.getNodes()) {    if (!(node instanceof DiscreteVariable)) {      allDiscreteVars=false;      break;    }  }  if (!allDiscreteVars) {    initializeValues(2,2);  } else {    for (    Node node : dag.getNodes()) {      nodesToVariables.put(node,(DiscreteVariable)node);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void drawVerticalItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,StatisticalCategoryDataset dataset,int visibleRow,int row,int column){  double rectX=calculateBarW0(plot,PlotOrientation.VERTICAL,dataArea,domainAxis,state,visibleRow,column);  Number meanValue=dataset.getMeanValue(row,column);  if (meanValue == null) {    return;  }  double value=meanValue.doubleValue();  double base=0.0;  double lclip=getLowerClip();  double uclip=getUpperClip();  if (uclip <= 0.0) {    if (value >= uclip) {      return;    }    base=uclip;    if (value <= lclip) {      value=lclip;    }  } else   if (lclip <= 0.0) {    if (value >= uclip) {      value=uclip;    } else {      if (value <= lclip) {        value=lclip;      }    }  } else {    if (value <= lclip) {      return;    }    base=getLowerClip();    if (value >= uclip) {      value=uclip;    }  }  RectangleEdge yAxisLocation=plot.getRangeAxisEdge();  double transY1=rangeAxis.valueToJava2D(base,dataArea,yAxisLocation);  double transY2=rangeAxis.valueToJava2D(value,dataArea,yAxisLocation);  double rectY=Math.min(transY2,transY1);  double rectWidth=state.getBarWidth();  double rectHeight=Math.abs(transY2 - transY1);  Rectangle2D bar=new Rectangle2D.Double(rectX,rectY,rectWidth,rectHeight);  Paint itemPaint=getItemPaint(row,column);  GradientPaintTransformer t=getGradientPaintTransformer();  if (t != null && itemPaint instanceof GradientPaint) {    itemPaint=t.transform((GradientPaint)itemPaint,bar);  }  g2.setPaint(itemPaint);  g2.fill(bar);  if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {    Stroke stroke=getItemOutlineStroke(row,column);    Paint paint=getItemOutlinePaint(row,column);    if (stroke != null && paint != null) {      g2.setStroke(stroke);      g2.setPaint(paint);      g2.draw(bar);    }  }  Number n=dataset.getStdDevValue(row,column);  if (n != null) {    double valueDelta=n.doubleValue();    double highVal=rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta,dataArea,yAxisLocation);    double lowVal=rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta,dataArea,yAxisLocation);    if (this.errorIndicatorPaint != null) {      g2.setPaint(this.errorIndicatorPaint);    } else {      g2.setPaint(getItemOutlinePaint(row,column));    }    if (this.errorIndicatorStroke != null) {      g2.setStroke(this.errorIndicatorStroke);    } else {      g2.setStroke(getItemOutlineStroke(row,column));    }    Line2D line;    line=new Line2D.Double(rectX + rectWidth / 2.0d,lowVal,rectX + rectWidth / 2.0d,highVal);    g2.draw(line);    line=new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d,highVal,rectX + rectWidth / 2.0d + 5.0d,highVal);    g2.draw(line);    line=new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d,lowVal,rectX + rectWidth / 2.0d + 5.0d,lowVal);    g2.draw(line);  }  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);  if (generator != null && isItemLabelVisible(row,column)) {    drawItemLabel(g2,dataset,row,column,plot,generator,bar,(value < 0.0));  }  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addItemEntity(entities,dataset,row,column,bar);  }}  }
class C{  public FractionAtom(Atom num,Atom den,float defFactor,int numAlign,int denomAlign){  this(num,den,true,numAlign,denomAlign);  this.defFactor=defFactor;  defFactorSet=true;}  }
class C{  public SlideLogic copy(){  SlideLogic sl=new SlideLogic();  sl.state=state;  return sl;}  }
class C{  void layout(int delta,boolean animate){  if (mDataChanged) {    handleDataChanged();  }  if (getCount() == 0) {    resetList();    return;  }  if (mNextSelectedPosition >= 0) {    setSelectedPositionInt(mNextSelectedPosition);  }  recycleAllViews();  detachAllViewsFromParent();  int count=getAdapter().getCount();  float angleUnit=360.0f / count;  float angleOffset=mSelectedPosition * angleUnit;  for (int i=0; i < getAdapter().getCount(); i++) {    float angle=angleUnit * i - angleOffset;    if (angle < 0.0f)     angle=360.0f + angle;    makeAndAddView(i,angle);  }  mRecycler.clear();  invalidate();  setNextSelectedPositionInt(mSelectedPosition);  checkSelectionChanged();  mNeedSync=false;  updateSelectedItemMetadata();}  }
class C{  public void calculateExclusiveMax(double max){  exclusiveMax=Math.max(exclusiveMax,max);}  }
class C{  @Override public void onMessage(javax.jms.Message aMessage){  try {    javax.jms.TextMessage textMessage=(javax.jms.TextMessage)aMessage;    try {      String string=textMessage.getText();      System.out.println(string);    } catch (    javax.jms.JMSException jmse) {      jmse.printStackTrace();    }  } catch (  java.lang.RuntimeException rte) {    rte.printStackTrace();  }}  }
class C{  public void testQuorumFail(){  quorum.fail();  quorum.fail();  quorum.succeed();  assertEquals(callbackResult.get(),0);  quorum.fail();  assertEquals(callbackResult.get(),2);}  }
class C{  public String fillLockMutation(MutationBatch m,Long time,Integer ttl){  if (lockColumn != null) {    if (!lockColumn.equals(prefix + lockId)) {      throw new IllegalStateException("Can't change prefix or lockId after acquiring the lock");    }  } else {    lockColumn=prefix + lockId;  }  Long timeoutValue=(time == null) ? Long.valueOf(0) : time + TimeUnit.MICROSECONDS.convert(timeout,timeoutUnits);  m.withRow(columnFamily,key).putColumn(lockColumn,generateTimeoutValue(timeoutValue),ttl);  return lockColumn;}  }
class C{  public boolean isR_CVV2Match(){  Object oo=get_Value(COLUMNNAME_R_CVV2Match);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isStoreAlive(BitSet fact,int local){  return fact.get(local);}  }
class C{  public boolean showDialog(){  setVisible(true);  return continueQueue;}  }
class C{  @SuppressWarnings("unchecked") public static Object evaluate(Map<String,? extends Object> context,String expression,Class expectedType){  ELContext elContext=new ReadOnlyContext(context);  ValueExpression ve=exprFactory.createValueExpression(elContext,expression,expectedType);  return ve.getValue(elContext);}  }
class C{  public ParserHandler(int hostID,DTN2Events eventsHandler,String consoleHost,int consolePort){  this.host_id=hostID;  this.events=eventsHandler;  this.c_host=consoleHost;  this.c_port=consolePort;}  }
class C{  @Override public void clearAnswer(){  DateTime ldt=new DateTime();  mTimePicker.setCurrentHour(ldt.getHourOfDay());  mTimePicker.setCurrentMinute(ldt.getMinuteOfHour());}  }
class C{  public void addSubtitle(Title subtitle){  ParamChecks.nullNotPermitted(subtitle,"subtitle");  this.subtitles.add(subtitle);  subtitle.addChangeListener(this);  fireChartChanged();}  }
class C{  public LogisticGrowthN0Model(Parameter N0Parameter,Parameter growthRateParameter,Parameter t50Parameter,Type units,boolean usingGrowthRate){  this(LogisticGrowthN0ModelParser.LOGISTIC_GROWTH_MODEL,N0Parameter,growthRateParameter,t50Parameter,units,usingGrowthRate);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public final boolean isValid(){  return !Float.isNaN(x) && !Float.isInfinite(x) && !Float.isNaN(y)&& !Float.isInfinite(y);}  }
class C{  public BasicStroke(Cap cap,Join join,float miter,float[] intervals,float phase){  mCap=cap;  mJoin=join;  mMiter=miter;  mIntervals=intervals;}  }
class C{  public static boolean startsWithIgnoreCase(final String base,final String start){  if (base.length() < start.length()) {    return false;  }  return base.regionMatches(true,0,start,0,start.length());}  }
class C{  public void merge(Context context,Writer writer) throws ResourceNotFoundException, ParseErrorException, MethodInvocationException, Exception {  if (errorCondition != null) {    throw errorCondition;  }  if (data != null) {    InternalContextAdapterImpl ica=new InternalContextAdapterImpl(context);    try {      ica.pushCurrentTemplateName(name);      ica.setCurrentResource(this);      ((SimpleNode)data).render(ica,writer);    }  finally {      ica.popCurrentTemplateName();      ica.setCurrentResource(null);    }  } else {    String msg="Template.merge() failure. The document is null, " + "most likely due to parsing error.";    rsvc.error(msg);    throw new Exception(msg);  }}  }
class C{  public DragSourceDropEvent(DragSourceContext dsc){  super(dsc);  dropSuccess=false;}  }
class C{  @Override @Unpreemptible public void run(){  while (true) {    if (Options.verbose.getValue() >= 5)     Log.writeln("[STWController: Waiting for request...]");    waitForRequest();    if (Options.verbose.getValue() >= 5)     Log.writeln("[STWController: Request recieved.]");    long startTime=VM.statistics.nanoTime();    if (concurrentCollection) {      if (Options.verbose.getValue() >= 5)       Log.writeln("[STWController: Stopping concurrent collectors...]");      Plan.concurrentWorkers.abortCycle();      Plan.concurrentWorkers.waitForCycle();      Phase.clearConcurrentPhase();      concurrentCollection=false;    }    if (Options.verbose.getValue() >= 5)     Log.writeln("[STWController: Stopping the world...]");    VM.collection.stopAllMutators();    boolean userTriggeredCollection=Plan.isUserTriggeredCollection();    boolean internalTriggeredCollection=Plan.isInternalTriggeredCollection();    clearRequest();    if (Options.verbose.getValue() >= 5)     Log.writeln("[STWController: Triggering worker threads...]");    workers.triggerCycle();    workers.waitForCycle();    if (Options.verbose.getValue() >= 5)     Log.writeln("[STWController: Worker threads complete!]");    long elapsedTime=VM.statistics.nanoTime() - startTime;    HeapGrowthManager.recordGCTime(VM.statistics.nanosToMillis(elapsedTime));    if (VM.activePlan.global().lastCollectionFullHeap() && !internalTriggeredCollection) {      if (Options.variableSizeHeap.getValue() && !userTriggeredCollection) {        if (Options.verbose.getValue() >= 5)         Log.writeln("[STWController: Considering heap size.]");        HeapGrowthManager.considerHeapSize();      }      HeapGrowthManager.reset();    }    Plan.resetCollectionTrigger();    if (Options.verbose.getValue() >= 5)     Log.writeln("[STWController: Resuming mutators...]");    VM.collection.resumeAllMutators();    if (concurrentCollection) {      if (Options.verbose.getValue() >= 5)       Log.writeln("[STWController: Triggering concurrent collectors...]");      Plan.concurrentWorkers.triggerCycle();    }  }}  }
class C{  public SurfacePolygon(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.529 -0500",hash_original_method="801E6F065AC6A60CFB0DADB1E074F98E",hash_generated_method="FE89B3D9E111D9452617D72FD1A81EFB") public boolean isFillViewport(){  return mFillViewport;}  }
class C{  @WorkerThread public boolean playNonRxy(@NonNull final PlayConfig config,final MediaPlayer.OnCompletionListener onCompletionListener,final MediaPlayer.OnErrorListener onErrorListener){  stopPlay();  if (config.mType == PlayConfig.TYPE_FILE && config.mAudioFile != null && config.mAudioFile.exists()) {    Log.d(TAG,"MediaPlayer to start play: " + config.mAudioFile.getName());    mPlayer=new MediaPlayer();    try {      mPlayer.setDataSource(config.mAudioFile.getAbsolutePath());      setMediaPlayerListener(onCompletionListener,onErrorListener);      mPlayer.setVolume(config.mLeftVolume,config.mRightVolume);      mPlayer.setAudioStreamType(config.mStreamType);      mPlayer.setLooping(config.mLooping);      mPlayer.prepare();      mPlayer.start();      return true;    } catch (    IllegalArgumentException|IOException e) {      Log.w(TAG,"startPlay fail, IllegalArgumentException: " + e.getMessage());      stopPlay();      return false;    }  } else   if (config.mType == PlayConfig.TYPE_RES && config.mAudioResource > 0 && config.mContext != null) {    Log.d(TAG,"MediaPlayer to start play: " + config.mAudioResource);    mPlayer=MediaPlayer.create(config.mContext,config.mAudioResource);    try {      setMediaPlayerListener(onCompletionListener,onErrorListener);      mPlayer.setVolume(config.mLeftVolume,config.mRightVolume);      mPlayer.setLooping(config.mLooping);      mPlayer.start();      return true;    } catch (    IllegalStateException e) {      Log.w(TAG,"startPlay fail, IllegalStateException: " + e.getMessage());      stopPlay();      return false;    }  } else {    return false;  }}  }
class C{  public void load(Element element,Object o){  Editor p=(Editor)o;  int nCol=2;  try {    nCol=element.getAttribute("colWidth").getIntValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert colWidth attribute");  }  MemoryInputIcon l=new MemoryInputIcon(nCol,p);  loadTextInfo(l,element);  String name;  Attribute attr=element.getAttribute("memory");  if (attr == null) {    log.error("incorrect information for a memory location; must use memory name");    p.loadFailed();    return;  } else {    name=attr.getValue();  }  Memory m=jmri.InstanceManager.memoryManagerInstance().getMemory(name);  if (m != null) {    l.setMemory(name);  } else {    log.error("Memory named '" + attr.getValue() + "' not found.");    p.loadFailed();    return;  }  p.putItem(l);  loadCommonAttributes(l,Editor.MEMORIES,element);  javax.swing.JComponent textField=l.getTextComponent();  jmri.jmrit.display.PositionablePopupUtil util=l.getPopupUtility();  if (util.hasBackground()) {    textField.setBackground(util.getBackground());  } else {    textField.setBackground(null);    textField.setOpaque(false);  }}  }
class C{  public static Float[] nullToEmpty(Float[] array){  if (array == null || array.length == 0) {    return EMPTY_FLOAT_OBJECT_ARRAY;  }  return array;}  }
class C{  protected void gameLoop(){  Graphics2D g=(Graphics2D)this.canvas.getBufferStrategy().getDrawGraphics();  AffineTransform yFlip=AffineTransform.getScaleInstance(1,-1);  AffineTransform move=AffineTransform.getTranslateInstance(400,-300);  g.transform(yFlip);  g.transform(move);  this.render(g);  g.dispose();  BufferStrategy strategy=this.canvas.getBufferStrategy();  if (!strategy.contentsLost()) {    strategy.show();  }  Toolkit.getDefaultToolkit().sync();  long time=System.nanoTime();  long diff=time - this.last;  this.last=time;  double elapsedTime=diff / NANO_TO_BASE;  this.world.update(elapsedTime);}  }
class C{  public static boolean isValidName(String name){  if (name.length() == 0)   return false;  char ch=name.charAt(0);  if (isNameStart(ch) == false)   return false;  for (int i=1; i < name.length(); i++) {    ch=name.charAt(i);    if (isName(ch) == false) {      return false;    }  }  return true;}  }
class C{  public void execute(StepInstance stepInstance,String temporaryFileDirectory){  InputStream is=null;  final String fileName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,proDomBinaryOutputFileName);  Set<RawProtein<ProDomRawMatch>> rawProteins;  int count=0;  RawMatch represantiveRawMatch=null;  try {    is=new FileInputStream(fileName);    rawProteins=parser.parse(is);    for (    RawProtein<ProDomRawMatch> rawProtein : rawProteins) {      count+=rawProtein.getMatches().size();      if (represantiveRawMatch == null) {        if (rawProtein.getMatches().size() > 0) {          represantiveRawMatch=rawProtein.getMatches().iterator().next();        }      }    }    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Parsed out " + rawProteins.size() + " proteins with matches from file "+ fileName);      LOGGER.debug("A total of " + count + " matches from file "+ fileName);    }  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to parse " + fileName,e);  } finally {    try {      if (is != null) {        is.close();      }    } catch (    IOException e) {      LOGGER.warn("Error closing input stream",e);    }  }  if (rawProteins != null && rawProteins.size() > 0) {    rawMatchDAO.persist(rawProteins);    Long now=System.currentTimeMillis();    if (count > 0) {      int matchesFound=0;      int waitTimeFactor=Utilities.getWaitTimeFactor(count).intValue();      if (represantiveRawMatch != null) {        Utilities.verboseLog("represantiveRawMatch :" + represantiveRawMatch.toString());        String signatureLibraryRelease=represantiveRawMatch.getSignatureLibraryRelease();        Utilities.sleep(waitTimeFactor * 1000);      } else {        LOGGER.warn("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);        Utilities.verboseLog("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);      }      Long timeTaken=System.currentTimeMillis() - now;      Utilities.verboseLog("ParseStep: count: " + count + " represantiveRawMatch : "+ represantiveRawMatch.toString()+ " time taken: "+ timeTaken);    }  } else {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("No ProDom matches were persisted as none were found in the ProDom binary output file: " + fileName);    }  }}  }
class C{  private void computeAccessTimes(){  StreetRouter streetRouter=new StreetRouter(network.streetLayer);  EnumSet<LegMode> modes=request.accessModes;  if (modes.contains(LegMode.CAR))   streetRouter.streetMode=StreetMode.CAR; else   if (modes.contains(LegMode.BICYCLE))   streetRouter.streetMode=StreetMode.BICYCLE; else   streetRouter.streetMode=StreetMode.WALK;  streetRouter.profileRequest=request;  streetRouter.distanceLimitMeters=TransitLayer.DISTANCE_TABLE_SIZE_METERS;  streetRouter.setOrigin(request.fromLat,request.fromLon);  streetRouter.route();  accessTimes=streetRouter.getReachedStops();}  }
class C{  public void deleteParkingSLOStorageGroupsIfEmpty(StorageSystem storage,Set<CIMInstance> parkingSLOStorageGroups){  String currentHeldLockName=null;  CloseableIterator<CIMObjectPath> volumeIterator=null;  try {    for (    CIMInstance seDeviceMaskingInstance : parkingSLOStorageGroups) {      CIMProperty elementNameProperty=seDeviceMaskingInstance.getProperty(SmisConstants.CP_ELEMENT_NAME);      String groupName=elementNameProperty.getValue().toString();      String lockName=generateParkingSLOSGLockName(storage,groupName);      if (_locker.acquireLock(lockName,PARKING_SLO_SG_LOCK_WAIT_SECS)) {        currentHeldLockName=lockName;        volumeIterator=getAssociatorNames(storage,seDeviceMaskingInstance.getObjectPath(),null,CIM_STORAGE_VOLUME,null,null);        if (volumeIterator != null && !volumeIterator.hasNext()) {          deleteMaskingGroup(storage,groupName,MASKING_GROUP_TYPE.SE_DeviceMaskingGroup);          volumeIterator.close();          volumeIterator=null;        }        _locker.releaseLock(lockName);        currentHeldLockName=null;      } else {        currentHeldLockName=null;        _log.warn(String.format("Could not get lock %s while trying to deleteParkingSLOStorageGroupsIfEmpty",lockName));        throw DeviceControllerException.exceptions.failedToAcquireLock(lockName,"deleteParkingSLOStorageGroupsIfEmpty");      }    }    callRefreshSystem(storage,null);  } catch (  Exception e) {    _log.error("An exception while processing deleteParkingSLOStorageGroupsIfEmpty",e);  } finally {    if (volumeIterator != null) {      volumeIterator.close();    }    if (currentHeldLockName != null) {      _locker.releaseLock(currentHeldLockName);    }  }}  }
class C{  @Override public String toStringNoWeight(int afterDecimalPoint){  StringBuffer text=new StringBuffer();  for (int i=0; i < m_AttValues.length; i++) {    if (i > 0) {      text.append(",");    }    text.append(toString(i,afterDecimalPoint));  }  return text.toString();}  }
class C{  public static List<Object[]> fetchScanQueryRows(VisorQueryCursor<Cache.Entry<Object,Object>> cur,int pageSize){  List<Object[]> rows=new ArrayList<>();  int cnt=0;  while (cur.hasNext() && cnt < pageSize) {    Cache.Entry<Object,Object> next=cur.next();    Object k=next.getKey();    Object v=next.getValue();    rows.add(new Object[]{typeOf(k),valueOf(k),typeOf(v),valueOf(v)});    cnt++;  }  return rows;}  }
class C{  public void updateLonerPort(int newPort){  this.logger.config(LocalizedStrings.LonerDistributionmanager_CHANGING_PORT_FROM_TO,new Object[]{this.lonerPort,newPort,getId()});  this.lonerPort=newPort;  this.getId().setPort(this.lonerPort);}  }
class C{  private void decrementWorkerCount(){  do {  } while (!compareAndDecrementWorkerCount(ctl.get()));}  }
class C{  public byte[] booleanRepresentation(int ind,int n){  byte[] rep=new byte[n];  for (int i=0; i < n; i++) {    rep[i]=(byte)0;  }  for (int i=0; i < n; i++) {    int rem=ind % 2;    if (rem == 1) {      rep[n - i - 1]=(byte)1;      ind-=1;    }    ind/=2;  }  return rep;}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[35];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 22; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }      }    }  }  for (int i=0; i < 35; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  protected void revalidate(){  if (valid) {    return;  }  valid=true;  missing=false;  malformed=false;  String s=getValueAsString();  boolean isEmpty=s != null && s.length() == 0;  if (s == null || isEmpty && !emptyAllowed) {    missing=true;    return;  }  if (isEmpty) {    itemList=new ArrayList(1);  } else {    try {      ListBuilder builder=new ListBuilder();      doParse(s,builder);      if (builder.getList() != null) {        clear(itemList);      }      itemList=builder.getList();    } catch (    ParseException e) {      itemList=new ArrayList(1);      valid=true;      malformed=true;    }  }}  }
class C{  public static ReilInstruction createUndef(final long offset,final OperandSize size,final String value){  final ReilOperand firstOperand=createOperand(OperandSize.EMPTY,"");  final ReilOperand secondOperand=createOperand(OperandSize.EMPTY,"");  final ReilOperand thirdOperand=createOperand(size,value);  return new ReilInstruction(new CAddress(offset),ReilHelpers.OPCODE_UNDEF,firstOperand,secondOperand,thirdOperand);}  }
class C{  @Override public int compareTo(S2Loop other){  if (numVertices() != other.numVertices()) {    return this.numVertices() - other.numVertices();  }  int maxVertices=numVertices();  int iThis=firstLogicalVertex;  int iOther=other.firstLogicalVertex;  for (int i=0; i < maxVertices; ++i, ++iThis, ++iOther) {    int compare=vertex(iThis).compareTo(other.vertex(iOther));    if (compare != 0) {      return compare;    }  }  return 0;}  }
class C{  public static <T>Response fromFoResponse(FoResponse<T> foResponse,ContainerRequestContext context){  if (!foResponse.isSuccessful() && FEC_NOT_LOGIN_YET.equals(foResponse.getErr().getErrorCode())) {    return buildNotLoginRestResponse(context);  }  return fromFoResponse(foResponse,FO_SC_BIZ_ERROR);}  }
class C{  private ZonedDateTime resolveInstant(LocalDateTime newDateTime){  return ofInstant(newDateTime,offset,zone);}  }
class C{  public CompetitiveNetworkNode(NetworkPanel networkPanel,CompetitiveNetwork group){  super(networkPanel,group);  setContextMenu();}  }
class C{  public static Vec4[] clipToFrustum(Vec4 pa,Vec4 pb,Frustum frustum){  return clipToFrustum(pa,pb,frustum,1);}  }
class C{  public java.security.cert.Certificate engineGenerateCertificate(InputStream in) throws CertificateException {  if (currentStream == null) {    currentStream=in;    sData=null;    sDataObjectCount=0;  } else   if (currentStream != in) {    currentStream=in;    sData=null;    sDataObjectCount=0;  }  try {    if (sData != null) {      if (sDataObjectCount != sData.size()) {        return getCertificate();      } else {        sData=null;        sDataObjectCount=0;        return null;      }    }    PushbackInputStream pis=new PushbackInputStream(in);    int tag=pis.read();    if (tag == -1) {      return null;    }    pis.unread(tag);    if (tag != 0x30) {      return readPEMCertificate(pis);    } else {      return readDERCertificate(new ASN1InputStream(pis));    }  } catch (  Exception e) {    throw new ExCertificateException(e);  }}  }
class C{  public void addRecentFile(final File f){  if (f != null) {    recentFiles.add(f);  }  makeRecentMenu();}  }
class C{  public Token next(){  if (!hasNext())   throw new NoSuchElementException();  Token t=this.tok;  this.tok=null;  return t;}  }
class C{  public int addFlattenedColumn(Object o,int[] dims) throws FitsException {  return addFlattenedColumn(o,dims,false);}  }
class C{  public void testQuoting(){  String input;  String output;  input="blahblah";  output=Utils.quote(input);  assertTrue("No quoting necessary",!output.startsWith("'") && !output.endsWith("'"));  input="";  output=Utils.quote(input);  assertTrue("Empty string quoted",output.startsWith("'") && output.endsWith("'"));  assertTrue("Empty string restored",input.equals(Utils.unquote(output)));  input=" ";  output=Utils.quote(input);  assertTrue("Blank quoted",output.startsWith("'") && output.endsWith("'"));  assertTrue("Blank restored",input.equals(Utils.unquote(output)));  input="{";  output=Utils.quote(input);  assertTrue(">" + input + "< quoted",output.startsWith("'") && output.endsWith("'"));  assertTrue(">" + input + "< restored",input.equals(Utils.unquote(output)));  input="}";  output=Utils.quote(input);  assertTrue(">" + input + "< quoted",output.startsWith("'") && output.endsWith("'"));  assertTrue(">" + input + "< restored",input.equals(Utils.unquote(output)));  input=",";  output=Utils.quote(input);  assertTrue(">" + input + "< quoted",output.startsWith("'") && output.endsWith("'"));  assertTrue(">" + input + "< restored",input.equals(Utils.unquote(output)));  input="?";  output=Utils.quote(input);  assertTrue(">" + input + "< quoted",output.startsWith("'") && output.endsWith("'"));  assertTrue(">" + input + "< restored",input.equals(Utils.unquote(output)));  input="\r\n\t'\"%";  output=Utils.quote(input);  assertTrue(">" + input + "< quoted",output.startsWith("'") && output.endsWith("'"));  assertTrue(">" + input + "< restored",input.equals(Utils.unquote(output)));}  }
class C{  private static void readAnswer(Node answerNode,long challengeId,List<Answer> answerList) throws UnexpectedElementException {  if (!answerNode.getNodeName().equals("answer")) {    throw new UnexpectedElementException(answerNode.getNodeName());  }  NamedNodeMap attributes=answerNode.getAttributes();  Node textNode=attributes.getNamedItem("text");  Node answerCorrectNode=attributes.getNamedItem("correct");  String text=textNode.getNodeValue();  String answerCorrectString=answerCorrectNode.getNodeValue();  boolean answerCorrect;  if (answerCorrectString.equals("true")) {    answerCorrect=true;  } else   if (answerCorrectString.equals("false")) {    answerCorrect=false;  } else {    throw new UnexpectedElementException(answerCorrectString);  }  answerList.add(new Answer(null,text,answerCorrect,challengeId));}  }
class C{  @Override public void createFieldEditors(){}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  private int indexOf(int tabId){  return mTabIdList.indexOf(tabId);}  }
class C{  public static void disableAllView(final BackEndDebuggerProvider debuggerProvider,final INaviView view){  Preconditions.checkNotNull(debuggerProvider,"IE01889: Debugger provider argument can not be null");  Preconditions.checkNotNull(view,"IE02009: View argument can't be null");  for (  final IDebugger debugger : debuggerProvider) {    final BreakpointManager manager=debugger.getBreakpointManager();    final Set<BreakpointAddress> addressesToDisable=new HashSet<BreakpointAddress>();    for (int i=0; i < manager.getNumberOfBreakpoints(BreakpointType.REGULAR); i++) {      final BreakpointAddress address=manager.getBreakpoint(BreakpointType.REGULAR,i).getAddress();      if (CViewHelpers.containsAddress(view,address.getAddress())) {        addressesToDisable.add(address);      }    }    manager.setBreakpointStatus(addressesToDisable,BreakpointType.REGULAR,BreakpointStatus.BREAKPOINT_DISABLED);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:03.083 -0500",hash_original_method="7DD57EC723991E6F8C51D4D9D2500308",hash_generated_method="6F25A8B5DECEABA945AC7BA918121214") public ProgramFragmentFixedFunction create(){  mRS.validate();  int[] tmp=new int[(mInputCount + mOutputCount + mConstantCount+ mTextureCount) * 2];  int idx=0;  for (int i=0; i < mInputCount; i++) {    tmp[idx++]=ProgramParam.INPUT.mID;    tmp[idx++]=mInputs[i].getID();  }  for (int i=0; i < mOutputCount; i++) {    tmp[idx++]=ProgramParam.OUTPUT.mID;    tmp[idx++]=mOutputs[i].getID();  }  for (int i=0; i < mConstantCount; i++) {    tmp[idx++]=ProgramParam.CONSTANT.mID;    tmp[idx++]=mConstants[i].getID();  }  for (int i=0; i < mTextureCount; i++) {    tmp[idx++]=ProgramParam.TEXTURE_TYPE.mID;    tmp[idx++]=mTextureTypes[i].mID;  }  int id=mRS.nProgramFragmentCreate(mShader,tmp);  ProgramFragmentFixedFunction pf=new ProgramFragmentFixedFunction(id,mRS);  initProgram(pf);  return pf;}  }
class C{  private boolean executePageToBuildView(FacesContext context,UIViewRoot viewToExecute) throws IOException {  if (null == context) {    String message=MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"context");    throw new NullPointerException(message);  }  if (null == viewToExecute) {    String message=MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"viewToExecute");    throw new NullPointerException(message);  }  ExternalContext extContext=context.getExternalContext();  Map<String,Object> stateMap=RequestStateManager.getStateMap(context);  if ("/*".equals(stateMap.get(RequestStateManager.INVOCATION_PATH))) {    throw new FacesException(MessageUtils.getExceptionMessageString(MessageUtils.FACES_SERVLET_MAPPING_INCORRECT_ID));  }  String requestURI=viewToExecute.getViewId();  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.fine("About to execute view " + requestURI);  }  if (extContext.getRequest() instanceof ServletRequest) {    Config.set((ServletRequest)extContext.getRequest(),Config.FMT_LOCALE,context.getViewRoot().getLocale());  }  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.fine("Before dispacthMessage to viewId " + requestURI);  }  Object originalResponse=extContext.getResponse();  ViewHandlerResponseWrapper wrapped=getWrapper(extContext);  extContext.setResponse(wrapped);  extContext.dispatch(requestURI);  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.fine("After dispacthMessage to viewId " + requestURI);  }  extContext.setResponse(originalResponse);  if (wrapped.getStatus() < 200 || wrapped.getStatus() > 299) {    wrapped.flushContentToWrappedResponse();    return true;  }  stateMap.put(RequestStateManager.AFTER_VIEW_CONTENT,wrapped);  return false;}  }
class C{  private void readCode(final MethodVisitor mv,final Context context,int u){  byte[] b=this.b;  char[] c=context.buffer;  int maxStack=readUnsignedShort(u);  int maxLocals=readUnsignedShort(u + 2);  int codeLength=readInt(u + 4);  u+=8;  int codeStart=u;  int codeEnd=u + codeLength;  Label[] labels=context.labels=new Label[codeLength + 2];  readLabel(codeLength + 1,labels);  while (u < codeEnd) {    int offset=u - codeStart;    int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:case ClassWriter.IMPLVAR_INSN:      u+=1;    break;case ClassWriter.LABEL_INSN:  readLabel(offset + readShort(u + 1),labels);u+=3;break;case ClassWriter.LABELW_INSN:readLabel(offset + readInt(u + 1),labels);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {u+=6;} else {u+=4;}break;case ClassWriter.TABL_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=4;}u+=12;break;case ClassWriter.LOOK_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 4); i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=8;}u+=8;break;case ClassWriter.VAR_INSN:case ClassWriter.SBYTE_INSN:case ClassWriter.LDC_INSN:u+=2;break;case ClassWriter.SHORT_INSN:case ClassWriter.LDCW_INSN:case ClassWriter.FIELDORMETH_INSN:case ClassWriter.TYPE_INSN:case ClassWriter.IINC_INSN:u+=3;break;case ClassWriter.ITFMETH_INSN:case ClassWriter.INDYMETH_INSN:u+=5;break;default :u+=4;break;}}for (int i=readUnsignedShort(u); i > 0; --i) {Label start=readLabel(readUnsignedShort(u + 2),labels);Label end=readLabel(readUnsignedShort(u + 4),labels);Label handler=readLabel(readUnsignedShort(u + 6),labels);String type=readUTF8(items[readUnsignedShort(u + 8)],c);mv.visitTryCatchBlock(start,end,handler,type);u+=8;}u+=2;int[] tanns=null;int[] itanns=null;int tann=0;int itann=0;int ntoff=-1;int nitoff=-1;int varTable=0;int varTypeTable=0;boolean zip=true;boolean unzip=(context.flags & EXPAND_FRAMES) != 0;int stackMap=0;int stackMapSize=0;int frameCount=0;Context frame=null;Attribute attributes=null;for (int i=readUnsignedShort(u); i > 0; --i) {String attrName=readUTF8(u + 2,c);if ("LocalVariableTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {varTable=u + 8;for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}label+=readUnsignedShort(v + 12);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}v+=10;}}} else if ("LocalVariableTypeTable".equals(attrName)) {varTypeTable=u + 8;} else if ("LineNumberTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}Label l=labels[label];while (l.line > 0) {if (l.next == null) {l.next=new Label();}l=l.next;}l.line=readUnsignedShort(v + 12);v+=4;}}} else if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {tanns=readTypeAnnotations(mv,context,u + 8,true);ntoff=tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1 : readUnsignedShort(tanns[0] + 1);} else if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {itanns=readTypeAnnotations(mv,context,u + 8,false);nitoff=itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1 : readUnsignedShort(itanns[0] + 1);} else if (FRAMES && "StackMapTable".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else if (FRAMES && "StackMap".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {zip=false;stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else {for (int j=0; j < context.attrs.length; ++j) {if (context.attrs[j].type.equals(attrName)) {Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);if (attr != null) {attr.next=attributes;attributes=attr;}}}}u+=6 + readInt(u + 4);}u+=2;if (FRAMES && stackMap != 0) {frame=context;frame.offset=-1;frame.mode=0;frame.localCount=0;frame.localDiff=0;frame.stackCount=0;frame.local=new Object[maxLocals];frame.stack=new Object[maxStack];if (unzip) {getImplicitFrame(context);}for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {if (b[i] == 8) {int v=readUnsignedShort(i + 1);if (v >= 0 && v < codeLength) {if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {readLabel(v,labels);}}}}}u=codeStart;while (u < codeEnd) {int offset=u - codeStart;Label l=labels[offset];if (l != null) {Label next=l.next;l.next=null;mv.visitLabel(l);if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {mv.visitLineNumber(l.line,l);while (next != null) {mv.visitLineNumber(next.line,l);next=next.next;}}}while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {if (frame.offset != -1) {if (!zip || unzip) {mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);} else {mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);}}if (frameCount > 0) {stackMap=readFrame(stackMap,zip,unzip,frame);--frameCount;} else {frame=null;}}int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:mv.visitInsn(opcode);u+=1;break;case ClassWriter.IMPLVAR_INSN:if (opcode > Opcodes.ISTORE) {opcode-=59;mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);} else {opcode-=26;mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);}u+=1;break;case ClassWriter.LABEL_INSN:mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);u+=3;break;case ClassWriter.LABELW_INSN:mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));u+=6;} else {mv.visitVarInsn(opcode,readUnsignedShort(u + 2));u+=4;}break;case ClassWriter.TABL_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int min=readInt(u + 4);int max=readInt(u + 8);Label[] table=new Label[max - min + 1];u+=12;for (int i=0; i < table.length; ++i) {table[i]=labels[offset + readInt(u)];u+=4;}mv.visitTableSwitchInsn(min,max,labels[label],table);break;}case ClassWriter.LOOK_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int len=readInt(u + 4);int[] keys=new int[len];Label[] values=new Label[len];u+=8;for (int i=0; i < len; ++i) {keys[i]=readInt(u);values[i]=labels[offset + readInt(u + 4)];u+=8;}mv.visitLookupSwitchInsn(labels[label],keys,values);break;}case ClassWriter.VAR_INSN:mv.visitVarInsn(opcode,b[u + 1] & 0xFF);u+=2;break;case ClassWriter.SBYTE_INSN:mv.visitIntInsn(opcode,b[u + 1]);u+=2;break;case ClassWriter.SHORT_INSN:mv.visitIntInsn(opcode,readShort(u + 1));u+=3;break;case ClassWriter.LDC_INSN:mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));u+=2;break;case ClassWriter.LDCW_INSN:mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));u+=3;break;case ClassWriter.FIELDORMETH_INSN:case ClassWriter.ITFMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];boolean itf=b[cpIndex - 1] == ClassWriter.IMETH;String iowner=readClass(cpIndex,c);cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);if (opcode < Opcodes.INVOKEVIRTUAL) {mv.visitFieldInsn(opcode,iowner,iname,idesc);} else {mv.visitMethodInsn(opcode,iowner,iname,idesc,itf);}if (opcode == Opcodes.INVOKEINTERFACE) {u+=5;} else {u+=3;}break;}case ClassWriter.INDYMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);int bsmArgCount=readUnsignedShort(bsmIndex + 2);Object[] bsmArgs=new Object[bsmArgCount];bsmIndex+=4;for (int i=0; i < bsmArgCount; i++) {bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);bsmIndex+=2;}cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);u+=5;break;}case ClassWriter.TYPE_INSN:mv.visitTypeInsn(opcode,readClass(u + 1,c));u+=3;break;case ClassWriter.IINC_INSN:mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);u+=3;break;default :mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);u+=4;break;}while (tanns != null && tann < tanns.length && ntoff <= offset) {if (ntoff == offset) {int v=readAnnotationTarget(context,tanns[tann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));}ntoff=++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1 : readUnsignedShort(tanns[tann] + 1);}while (itanns != null && itann < itanns.length && nitoff <= offset) {if (nitoff == offset) {int v=readAnnotationTarget(context,itanns[itann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));}nitoff=++itann >= itanns.length || readByte(itanns[itann]) < 0x43 ? -1 : readUnsignedShort(itanns[itann] + 1);}}if (labels[codeLength] != null) {mv.visitLabel(labels[codeLength]);}if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {int[] typeTable=null;if (varTypeTable != 0) {u=varTypeTable + 2;typeTable=new int[readUnsignedShort(varTypeTable) * 3];for (int i=typeTable.length; i > 0; ) {typeTable[--i]=u + 6;typeTable[--i]=readUnsignedShort(u + 8);typeTable[--i]=readUnsignedShort(u);u+=10;}}u=varTable + 2;for (int i=readUnsignedShort(varTable); i > 0; --i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);int index=readUnsignedShort(u + 8);String vsignature=null;if (typeTable != null) {for (int j=0; j < typeTable.length; j+=3) {if (typeTable[j] == start && typeTable[j + 1] == index) {vsignature=readUTF8(typeTable[j + 2],c);break;}}}mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);u+=10;}}if (tanns != null) {for (int i=0; i < tanns.length; ++i) {if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,tanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),true));}}}if (itanns != null) {for (int i=0; i < itanns.length; ++i) {if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,itanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),false));}}}while (attributes != null) {Attribute attr=attributes.next;attributes.next=null;mv.visitAttribute(attributes);attributes=attr;}mv.visitMaxs(maxStack,maxLocals);}  }
class C{  public static void removeSourceHandleFrom(final PNode node){  if (node == null) {    throw new IllegalArgumentException("node must not be null");  }  Collection handlesToRemove=new ArrayList();  for (Iterator i=node.getChildrenIterator(); i.hasNext(); ) {    PNode n=(PNode)i.next();    if (n instanceof SourceHandle) {      handlesToRemove.add(n);    }  }  node.removeChildren(handlesToRemove);}  }
class C{  static void releaseContext(SeaGlassContext context){synchronized (contextMap) {    List instances=(List)contextMap.get(context.getClass());    if (instances == null) {      instances=new ArrayList(5);      contextMap.put(context.getClass(),instances);    }    instances.add(context);  }}  }
class C{  public boolean checkRange(long expected,long actual,long rangePercent){  long range=0;  range=(100 * actual) / expected;  Log.i("checkRange","Range = " + range);  if ((range > (100 - rangePercent)) && (range < (100 + rangePercent))) {    return true;  } else {    return false;  }}  }
class C{  public Access passwordScopeAuth() throws IOException {  InputStreamReader reader=null;  BufferedReader bufReader=null;  try {    JSONObject user=new JSONObject();    user.put("id",mUserId);    user.put("password",mPassword);    JSONObject password=new JSONObject();    password.put("user",user);    JSONArray methods=new JSONArray();    methods.add("password");    JSONObject identity=new JSONObject();    identity.put("methods",methods);    identity.put("password",password);    JSONObject project=new JSONObject();    project.put("id",mProjectId);    JSONObject scope=new JSONObject();    scope.put("project",project);    JSONObject auth=new JSONObject();    auth.put("identity",identity);    auth.put("scope",scope);    JSONObject requestBody=new JSONObject();    requestBody.put("auth",auth);    HttpURLConnection connection=(HttpURLConnection)new URL(mAuthUrl).openConnection();    connection.setDoOutput(true);    connection.setRequestProperty("Accept","application/json");    connection.setRequestProperty("Content-Type","application/json");    OutputStream output=connection.getOutputStream();    output.write(requestBody.toString().getBytes());    int status=connection.getResponseCode();    if (status != 201) {      return null;    }    reader=new InputStreamReader(connection.getInputStream());    bufReader=new BufferedReader(reader);    String res=bufReader.readLine();    JSONParser parser=new JSONParser();    JSONObject jsonResponse=(JSONObject)parser.parse(res);    String token=connection.getHeaderField("X-Subject-Token");    PasswordScopeAccess access=new PasswordScopeAccess(jsonResponse,token,mPrefferedRegion);    bufReader.close();    reader.close();    connection.disconnect();    return access;  } catch (  Exception e) {    if (bufReader != null) {      bufReader.close();    }    if (reader != null) {      reader.close();    }    throw new IOException(e);  }}  }
class C{  private <T>void testKeyValQuery(final String cacheName,final T key1,final T key2){  testKeyQuery(cacheName,key1,key2);  testValQuery(cacheName + "-val",key1,key2);}  }
class C{  private Bundle createRegistrationBundle(GoogleApiClient googleApiClient){  final Person currentPerson=Plus.PeopleApi.getCurrentPerson(googleApiClient);  final String displayName;  final String profilePictureUrl;  Bundle registration=new Bundle();  if (currentPerson != null) {    displayName=currentPerson.getDisplayName();    profilePictureUrl=currentPerson.getImage().getUrl();  } else {    Log.e(TAG,"Couldn't load person. Falling back to default.");    Log.d(TAG,"Make sure that the Google+ API is enabled for your project.");    Log.d(TAG,"More information can be found here: " + "https://developers.google.com/+/mobile/android/" + "getting-started#step_1_enable_the_google_api");    displayName="Anonymous Kitten";    profilePictureUrl="http://placekitten.com/g/500/500";  }  registration.putString(PingerKeys.ACTION,GcmAction.REGISTER_NEW_CLIENT);  registration.putString(PingerKeys.NAME,displayName);  registration.putString(PingerKeys.PICTURE_URL,profilePictureUrl);  return registration;}  }
class C{  public EvictionAttributesImpl(EvictionAttributesImpl other){  this.algorithm=other.algorithm;  this.sizer=other.sizer;  this.maximum=other.maximum;  this.action=other.action;}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        this.myArrayList.add(JSONObject.NULL);      } else {        x.back();        this.myArrayList.add(x.nextValue());      }switch (x.nextClean()) {case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw x.syntaxError("Expected a ',' or ']'");}}}}  }
class C{  public boolean matches(final ConversationStates state,final Expression trigger){  if (state == this.state) {    for (    Expression triggerExpr : this.triggers) {      if (trigger.matches(triggerExpr)) {        return true;      }    }  }  return false;}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  public ModelMBeanOperationInfo(String name,String description,MBeanParameterInfo[] signature,String type,int impact){  super(name,description,signature,type,impact);  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanOperationInfo.class.getName(),"ModelMBeanOperationInfo(" + "String,String,MBeanParameterInfo[],String,int)","Entry");  }  operationDescriptor=validDescriptor(null);}  }
class C{  public static void main(String[] args){  try {    NotificacionImpl not=new NotificacionImpl();    not.setDescripcion("Desc");    not.setDEU("DEU_121212");    not.setExpediente("EXP/247");    not.setFechaNotificacion(new Timestamp(2007,9,3,12,12,12,0));    not.setHitoId("ND7055600FA511DC8000DEEDF807A148");    not.setNotificacionId("100");    not.setServicioNotificacionesId("__");    GestorConsulta.altaNotificacion(not,"");  } catch (  Exception e) {    e.printStackTrace();  }  String numeroExpediente="1";}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  MergeX.sort(a);  show(a);}  }
class C{  public void testGetColorsByNameWithoutAccents(){  try {    for (    String colorName : MaterialPalettes.ALL_COLOR_NAMES) {      List<Integer> colors=MaterialPalettes.getColorsByName(colorName,false);      assertEquals(MaterialPalettes.NON_ACCENT_COLOR_LEVELS.length,colors.size());    }  } catch (  IllegalAccessException iae) {    fail();  }  try {    List<Integer> colors=MaterialPalettes.getColorsByName("",false);    fail();  } catch (  IllegalArgumentException iae) {  }catch (  IllegalAccessException iae1) {    fail();  }  try {    List<Integer> colors=MaterialPalettes.getColorsByName(null,false);    fail();  } catch (  IllegalArgumentException iae) {  }catch (  IllegalAccessException iae1) {    fail();  }}  }
class C{  public List<Item> contents(){  if (contents == null) {    return new LinkedList<>();  }  return contents;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public Bundle callFromPackage(String callingPackage,String method,String request,Bundle args){  int callingUser=UserHandle.getCallingUserId();  if (args != null) {    int reqUser=args.getInt(Settings.CALL_METHOD_USER_KEY,callingUser);    if (reqUser != callingUser) {      callingUser=ActivityManager.handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),reqUser,false,true,"get/set setting for user",null);      if (LOCAL_LOGV)       Slog.v(TAG,"   access setting for user " + callingUser);    }  }  DatabaseHelper dbHelper;  SettingsCache cache;  if (Settings.CALL_METHOD_GET_SYSTEM.equals(method)) {    if (LOCAL_LOGV)     Slog.v(TAG,"call(system:" + request + ") for "+ callingUser);    dbHelper=getOrEstablishDatabase(callingUser);    cache=sSystemCaches.get(callingUser);    return lookupValue(dbHelper,TABLE_SYSTEM,cache,request);  }  if (Settings.CALL_METHOD_GET_SECURE.equals(method)) {    if (LOCAL_LOGV)     Slog.v(TAG,"call(secure:" + request + ") for "+ callingUser);    dbHelper=getOrEstablishDatabase(callingUser);    cache=sSecureCaches.get(callingUser);    return lookupValue(dbHelper,TABLE_SECURE,cache,request);  }  if (Settings.CALL_METHOD_GET_GLOBAL.equals(method)) {    if (LOCAL_LOGV)     Slog.v(TAG,"call(global:" + request + ") for "+ callingUser);    return lookupValue(getOrEstablishDatabase(UserHandle.USER_OWNER),TABLE_GLOBAL,sGlobalCache,request);  }  final String newValue=(args == null) ? null : args.getString(Settings.NameValueTable.VALUE);  if (getContext().checkCallingOrSelfPermission(android.Manifest.permission.WRITE_SETTINGS) != PackageManager.PERMISSION_GRANTED) {    throw new SecurityException(String.format("Permission denial: writing to settings requires %1$s",android.Manifest.permission.WRITE_SETTINGS));  }  if (getAppOpsManager().noteOp(AppOpsManager.OP_WRITE_SETTINGS,Binder.getCallingUid(),callingPackage) != AppOpsManager.MODE_ALLOWED) {    return null;  }  final ContentValues values=new ContentValues();  values.put(Settings.NameValueTable.NAME,request);  values.put(Settings.NameValueTable.VALUE,newValue);  if (Settings.CALL_METHOD_PUT_SYSTEM.equals(method)) {    if (LOCAL_LOGV)     Slog.v(TAG,"call_put(system:" + request + "="+ newValue+ ") for "+ callingUser);    insertForUser(Settings.System.CONTENT_URI,values,callingUser);  } else   if (Settings.CALL_METHOD_PUT_SECURE.equals(method)) {    if (LOCAL_LOGV)     Slog.v(TAG,"call_put(secure:" + request + "="+ newValue+ ") for "+ callingUser);    insertForUser(Settings.Secure.CONTENT_URI,values,callingUser);  } else   if (Settings.CALL_METHOD_PUT_GLOBAL.equals(method)) {    if (LOCAL_LOGV)     Slog.v(TAG,"call_put(global:" + request + "="+ newValue+ ") for "+ callingUser);    insertForUser(Settings.Global.CONTENT_URI,values,callingUser);  } else {    Slog.w(TAG,"call() with invalid method: " + method);  }  return null;}  }
class C{  public static JPanel createDialogButtonPanel(JButton jbPositive,JButton jbNegative,boolean resizable){  return createDialogButtonPanel((jbPositive == null ? null : new JButton[]{jbPositive}),jbNegative,resizable);}  }
class C{  private static synchronized void maybeInitialize(){  if (currentAddon != null) {    UIManager.getLookAndFeelDefaults();    if (!UIManager.getBoolean(APPCONTEXT_INITIALIZED)) {      setAddon(currentAddon);    }  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private final PrivateKey constructPrivateKey(byte[] encodedKey,String encodedKeyAlgorithm) throws InvalidKeyException, NoSuchAlgorithmException {  PrivateKey key=null;  try {    KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm,SunJCE.getInstance());    PKCS8EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(encodedKey);    return keyFactory.generatePrivate(keySpec);  } catch (  NoSuchAlgorithmException nsae) {    try {      KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm);      PKCS8EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(encodedKey);      key=keyFactory.generatePrivate(keySpec);    } catch (    NoSuchAlgorithmException nsae2) {      throw new NoSuchAlgorithmException("No installed providers " + "can create keys for the " + encodedKeyAlgorithm + "algorithm");    }catch (    InvalidKeySpecException ikse2) {    }  }catch (  InvalidKeySpecException ikse) {  }  return key;}  }
class C{  public boolean routeIsFree(){  for (int i=0; i < _savedOrders.size(); i++) {    OBlock block=_savedOrders.get(i).getBlock();    if (!block.isFree()) {      return false;    }  }  return true;}  }
class C{  UserManagerService(Context context,PackageManagerService pm,Object installLock,Object packagesLock){  this(context,pm,installLock,packagesLock,Environment.getDataDirectory(),new File(Environment.getDataDirectory(),"user"));}  }
class C{  static void addManifestReference(Manifest manifest,String uri) throws Exception {  manifest.addDocument(null,"#" + uri,null,DEFAULT_DIGEST_ALGORITHM_URI,null,null);}  }
class C{  public static <T>SerializableComparator<T> naturalOrder(){  return (SerializableComparator<T>)NATURAL_ORDER_COMPARATOR;}  }
class C{  public boolean dirty(){  return holder().dirty;}  }
class C{  public void testUserConfiguresXADataSourceAsResource() throws MalformedURLException {  ResourceFixture fixture=ConfigurationFixtureFactory.createXADataSourceAsResource();  addResourceToConfigurationViaProperty(fixture);  testWar("xadatasource");}  }
class C{  public static void v(String tag,String msg,Object... args){  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  public Coordinate_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_coordinateValue=jcas.getRequiredFeatureDE(casType,"coordinateValue","uima.cas.String",featOkTst);  casFeatCode_coordinateValue=(null == casFeat_coordinateValue) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_coordinateValue).getCode();}  }
class C{  public void ungetToken(String tk){  byte token[]=tk.getBytes(UTF8);  for (int i=0; i < token.length; i++) {    buffer.insertElementAt(Integer.valueOf(token[token.length - i - 1]),0);  }}  }
class C{  public AudioEntry(BaseEntry<?> sourceEntry){  super(sourceEntry);}  }
class C{  public static ErrorHandler defaultErrorHandler(){  return new ErrHandler();}  }
class C{  public static void initialize(Context context){  ImagePipelineFactory.initialize(context);  initializeDrawee(context);}  }
class C{  private void buildScene(){  world.rx.setAngle(-90);  world.ry.setAngle(180);  getRoot().getChildren().add(world);}  }
class C{  public synchronized String toString(){  if (curFile == null)   return "(no position set)"; else   return curFile.getName() + ":" + curOffset;}  }
class C{  public InputStream openInputStream(final serverObjects post,final LoaderDispatcher loader,final boolean auth,DigestURL url) throws IOException {  InputStream inStream=null;  if (url != null) {    try {      String agentName=post.get("agentName",auth ? ClientIdentification.yacyIntranetCrawlerAgentName : ClientIdentification.yacyInternetCrawlerAgentName);      ClientIdentification.Agent agent=ClientIdentification.getAgent(agentName);      inStream=loader.openInputStream(loader.request(url,false,true),CacheStrategy.IFEXIST,BlacklistType.SEARCH,agent);    } catch (    final IOException e) {      ConcurrentLog.fine("ImageViewer","cannot load image. URL : " + url.toNormalform(true));      throw e;    }  }  if (inStream == null) {    throw new IOException("Input stream could no be open");  }  return inStream;}  }
class C{  @Override public void startDrawing(int par1){  if (this.isDrawing) {    throw new IllegalStateException("Already tesselating!");  } else {    this.isDrawing=true;    this.reset();    this.drawMode=par1;    this.hasNormals=false;    this.hasColor=false;    this.hasTexture=false;    this.hasBrightness=false;    this.isColorDisabled=false;  }}  }
class C{  public void addData(final int dataSourceIndex,final double time,final double value){  getDataset().getSeries(dataSourceIndex).add(time,value);}  }
class C{  private static Object parse(XMLTokener x,boolean arrayForm,JSONArray ja) throws JSONException {  String attribute;  char c;  String closeTag=null;  int i;  JSONArray newja=null;  JSONObject newjo=null;  Object token;  String tagName=null;  while (true) {    if (!x.more()) {      throw x.syntaxError("Bad XML");    }    token=x.nextContent();    if (token == XML.LT) {      token=x.nextToken();      if (token instanceof Character) {        if (token == XML.SLASH) {          token=x.nextToken();          if (!(token instanceof String)) {            throw new JSONException("Expected a closing name instead of '" + token + "'.");          }          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped close tag");          }          return token;        } else         if (token == XML.BANG) {          c=x.next();          if (c == '-') {            if (x.next() == '-') {              x.skipPast("-->");            } else {              x.back();            }          } else           if (c == '[') {            token=x.nextToken();            if (token.equals("CDATA") && x.next() == '[') {              if (ja != null) {                ja.put(x.nextCDATA());              }            } else {              throw x.syntaxError("Expected 'CDATA['");            }          } else {            i=1;            do {              token=x.nextMeta();              if (token == null) {                throw x.syntaxError("Missing '>' after '<!'.");              } else               if (token == XML.LT) {                i+=1;              } else               if (token == XML.GT) {                i-=1;              }            } while (i > 0);          }        } else         if (token == XML.QUEST) {          x.skipPast("?>");        } else {          throw x.syntaxError("Misshaped tag");        }      } else {        if (!(token instanceof String)) {          throw x.syntaxError("Bad tagName '" + token + "'.");        }        tagName=(String)token;        newja=new JSONArray();        newjo=new JSONObject();        if (arrayForm) {          newja.put(tagName);          if (ja != null) {            ja.put(newja);          }        } else {          newjo.put("tagName",tagName);          if (ja != null) {            ja.put(newjo);          }        }        token=null;        for (; ; ) {          if (token == null) {            token=x.nextToken();          }          if (token == null) {            throw x.syntaxError("Misshaped tag");          }          if (!(token instanceof String)) {            break;          }          attribute=(String)token;          if (!arrayForm && ("tagName".equals(attribute) || "childNode".equals(attribute))) {            throw x.syntaxError("Reserved attribute.");          }          token=x.nextToken();          if (token == XML.EQ) {            token=x.nextToken();            if (!(token instanceof String)) {              throw x.syntaxError("Missing value");            }            newjo.accumulate(attribute,XML.stringToValue((String)token));            token=null;          } else {            newjo.accumulate(attribute,"");          }        }        if (arrayForm && newjo.length() > 0) {          newja.put(newjo);        }        if (token == XML.SLASH) {          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          if (ja == null) {            if (arrayForm) {              return newja;            } else {              return newjo;            }          }        } else {          if (token != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          closeTag=(String)parse(x,arrayForm,newja);          if (closeTag != null) {            if (!closeTag.equals(tagName)) {              throw x.syntaxError("Mismatched '" + tagName + "' and '"+ closeTag+ "'");            }            tagName=null;            if (!arrayForm && newja.length() > 0) {              newjo.put("childNodes",newja);            }            if (ja == null) {              if (arrayForm) {                return newja;              } else {                return newjo;              }            }          }        }      }    } else {      if (ja != null) {        ja.put(token instanceof String ? XML.stringToValue((String)token) : token);      }    }  }}  }
class C{  public final boolean sendEmptyMessageAtTime(int what,long uptimeMillis){  return mExec.sendEmptyMessageAtTime(what,uptimeMillis);}  }
class C{  public double relativeFill(){  double acc=0.0;  final int cols=widths.size();  final int rows=heights.size();{    for (int y=0; y < rows; y++) {      for (int x=0; x < cols; x++) {        if (usage.get(y).get(x) != null) {          acc+=widths.get(x) * heights.get(y);        }      }    }  }  return acc / (twidth * theight);}  }
class C{  public Cube(Column column,int cubeY){  this.world=column.getCubicWorld();  this.column=column;  this.coords=new CubePos(column.getX(),cubeY,column.getZ());  this.tickets=new TicketList();  this.entities=new EntityContainer();  this.tileEntityMap=new HashMap<>();  this.tileEntityPosQueue=new ConcurrentLinkedQueue<>();}  }
class C{  public boolean equals(Object obj){  if (obj instanceof MenuShortcut) {    return equals((MenuShortcut)obj);  }  return false;}  }
class C{  private void updateNeuronNodes(Collection<Neuron> neurons){  for (  Neuron neuron : neurons) {    NeuronNode neuronNode=((NeuronNode)objectNodeMap.get(neuron));    if (neuronNode != null) {      neuronNode.update();    }  }  timeLabel.update();  updateComplete.decrementAndGet();}  }
class C{  private void trace(){  glUseProgram(rayTracingProgram);  if (mouseDown) {    currRotationAboutY=rotationAboutY + (mouseX - mouseDownX) * 0.01f;  } else {    currRotationAboutY=rotationAboutY;  }  cameraPosition.set((float)sin(-currRotationAboutY) * 3.0f,2.0f,(float)cos(-currRotationAboutY) * 3.0f);  viewMatrix.setLookAt(cameraPosition,cameraLookAt,cameraUp);  if (resetFramebuffer) {    projMatrix.setPerspective((float)Math.toRadians(60.0f),(float)width / height,1f,2f);    resizeFramebufferTexture();    resetFramebuffer=false;  }  projMatrix.invertPerspectiveView(viewMatrix,invViewProjMatrix);  long thisTime=System.nanoTime();  float elapsedSeconds=(thisTime - firstTime) / 1E9f;  glUniform1f(timeUniform,elapsedSeconds);  float blendFactor=frameNumber / (frameNumber + 1.0f);  glUniform1f(blendFactorUniform,blendFactor);  glUniform1i(bounceCountUniform,bounceCount);  glUniform3f(eyeUniform,cameraPosition.x,cameraPosition.y,cameraPosition.z);  invViewProjMatrix.transformProject(tmpVector.set(-1,-1,0)).sub(cameraPosition);  glUniform3f(ray00Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(-1,1,0)).sub(cameraPosition);  glUniform3f(ray01Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(1,-1,0)).sub(cameraPosition);  glUniform3f(ray10Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(1,1,0)).sub(cameraPosition);  glUniform3f(ray11Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  glUniform1f(widthUniform,width);  glUniform1f(heightUniform,height);  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  glBindVertexArray(vao);  glBindTexture(GL_TEXTURE_2D,tex);  glBindSampler(0,this.sampler);  glDrawArrays(GL_TRIANGLES,0,6);  glBindSampler(0,0);  glBindTexture(GL_TEXTURE_2D,0);  glBindVertexArray(0);  glBindFramebuffer(GL_FRAMEBUFFER,0);  glUseProgram(0);  frameNumber++;}  }
class C{  public CharSetMap(InputStream input) throws IOException {  this();  mappers[MAP_PROG]=loadStream(input);}  }
class C{  Map<String,ClassReader> findIncludes(Map<String,ClassReader> zipClasses) throws LogAbortException {  TreeMap<String,ClassReader> found=new TreeMap<String,ClassReader>();  mLog.debug("Find classes to include.");  for (  String s : mIncludeGlobs) {    findGlobs(s,zipClasses,found);  }  for (  String s : mDeriveFrom) {    findClassesDerivingFrom(s,zipClasses,found);  }  return found;}  }
class C{  public boolean isExclude(){  Object oo=get_Value(COLUMNNAME_IsExclude);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void add(Signature sig,Type[] exceptions){  signatures.put(sig,exceptions);}  }
class C{  private boolean conditionC0(String value,int index){  if (contains(value,index,4,"CHIA")) {    return true;  } else   if (index <= 1) {    return false;  } else   if (isVowel(charAt(value,index - 2))) {    return false;  } else   if (!contains(value,index - 1,3,"ACH")) {    return false;  } else {    char c=charAt(value,index + 2);    return (c != 'I' && c != 'E') || contains(value,index - 2,6,"BACHER","MACHER");  }}  }
class C{  public Bundler putChar(String key,char value){  bundle.putChar(key,value);  return this;}  }
class C{  protected void checkAndFireConnectionError(SQLException sqlEx) throws SQLException {  if (this.pooledConnection != null) {    if (SQLError.SQL_STATE_COMMUNICATION_LINK_FAILURE.equals(sqlEx.getSQLState())) {      this.pooledConnection.callConnectionEventListeners(MysqlPooledConnection.CONNECTION_ERROR_EVENT,sqlEx);    }  }  throw sqlEx;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.800 -0500",hash_original_method="BC680BBCF0406870088BFC77978994BB",hash_generated_method="FFE885D5C9B076C775282870959EC876") public boolean canContain(Element other){  return theType.canContain(other.theType);}  }
class C{  public static boolean isWritable(final File file,final boolean makeDirs){  if (file == null) {    Log.e(FileUtils.class,"isWritable(): Null or Empty parameter given");    return false;  }  final String fileParentDir=file.getParent();  if (!TextUtils.isEmpty(fileParentDir)) {    final File fileDir=new File(fileParentDir);    if (!fileDir.exists()) {      if (makeDirs)       return makeDirsForFile(file); else       return false;    }  }  boolean isWritable=true;  if (file.exists())   isWritable=file.canWrite(); else {    try {      isWritable=file.createNewFile();    } catch (    IOException e) {    }    if (isWritable)     isWritable=file.delete();  }  return isWritable;}  }
class C{  private void clearSourceAndTargetVolumes(List<VolumeDescriptor> sourceDescriptors,List<VolumeDescriptor> targetDescriptors){  List<URI> sourceURIs=VolumeDescriptor.getVolumeURIs(sourceDescriptors);  List<URI> targetURIs=VolumeDescriptor.getVolumeURIs(targetDescriptors);  URI vpoolChangeUri=getVirtualPoolChangeVolume(sourceDescriptors);  for (  URI sourceUri : sourceURIs) {    Volume sourceVolume=dbClient.queryObject(Volume.class,sourceUri);    if (null != sourceVolume) {      log.info("Clearing source volume {}-->{}",sourceVolume.getNativeGuid(),sourceVolume.getId());      if (null == vpoolChangeUri) {        sourceVolume.setPersonality(NullColumnValueGetter.getNullStr());        sourceVolume.setAccessState(Volume.VolumeAccessState.READWRITE.name());        sourceVolume.setInactive(true);        sourceVolume.setConsistencyGroup(NullColumnValueGetter.getNullURI());      }      if (null != sourceVolume.getSrdfTargets()) {        sourceVolume.getSrdfTargets().clear();      }      dbClient.updateAndReindexObject(sourceVolume);    }  }  for (  URI targetUri : targetURIs) {    Volume targetVolume=dbClient.queryObject(Volume.class,targetUri);    if (null != targetVolume) {      log.info("Clearing target volume {}-->{}",targetVolume.getNativeGuid(),targetVolume.getId());      targetVolume.setPersonality(NullColumnValueGetter.getNullStr());      targetVolume.setAccessState(Volume.VolumeAccessState.READWRITE.name());      targetVolume.setSrdfParent(new NamedURI(NullColumnValueGetter.getNullURI(),NullColumnValueGetter.getNullStr()));      targetVolume.setSrdfCopyMode(NullColumnValueGetter.getNullStr());      targetVolume.setSrdfGroup(NullColumnValueGetter.getNullURI());      targetVolume.setConsistencyGroup(NullColumnValueGetter.getNullURI());      targetVolume.setInactive(true);      dbClient.updateAndReindexObject(targetVolume);    }  }}  }
class C{  @Override public SerializationConfig without(Feature... features){  int flags=_featureFlags;  for (  Feature f : features) {    flags&=~f.getMask();  }  return new SerializationConfig(this,flags);}  }
class C{  public final long size(){  return this.size;}  }
class C{  protected void update(Comparable x,Object y){  int index=indexOf(x);  if (index < 0) {    throw new SeriesException("No observation for x = " + x);  } else {    ComparableObjectItem item=getDataItem(index);    item.setObject(y);    fireSeriesChanged();  }}  }
class C{  public ExternalEvent nextEvent(){  ExternalEvent event=this.nextEvent;  if (this.updates.size() == 0) {    this.nextEvent=new ExternalEvent(Double.MAX_VALUE);  } else {    this.nextEvent=this.updates.remove(0);  }  return event;}  }
class C{  public void removePropertyChangeListener(final PropertyChangeListener listener){  m_PropertyChangeSupport.removePropertyChangeListener(listener);}  }
class C{  public void removeListener(UpdateListener listener){  if (listener == null) {    throw new IllegalArgumentException("Null listener reference supplied");  }  statementListenerSet.removeListener(listener);  statementContext.getStatementResultService().setUpdateListeners(statementListenerSet,false);  if (statementLifecycleSvc != null) {    statementLifecycleSvc.dispatchStatementLifecycleEvent(new StatementLifecycleEvent(this,StatementLifecycleEvent.LifecycleEventType.LISTENER_REMOVE,listener));  }}  }
class C{  private void signalNotEmpty(){  final ReentrantLock takeLock=this.takeLock;  takeLock.lock();  try {    notEmpty.signal();  }  finally {    takeLock.unlock();  }}  }
class C{  private ListenableFuture<Void> _processDatabases(QualifiedName catalogName,List<QualifiedName> databaseNames){  ListenableFuture<Void> resultFuture=null;  log.info("Full refresh of catalog {} for databases({}): {}",catalogName,databaseNames.size(),databaseNames);  List<ListenableFuture<DatabaseDto>> getDatabaseFutures=databaseNames.stream().map(null).collect(Collectors.toList());  if (getDatabaseFutures != null && !getDatabaseFutures.isEmpty()) {    resultFuture=Futures.transformAsync(Futures.successfulAsList(getDatabaseFutures),null);  }  return resultFuture;}  }
class C{  public void removeAnnotatedType(TypeWithAnnotations type){  if (null == annotatedTypes) {    return;  }  annotatedTypes.remove(type);}  }
class C{  public CorePlusExtensionsParser(Analyzer analyzer,QueryParser parser){  this(null,analyzer,parser);}  }
class C{  public LBHttpSolrServer.Rsp makeLoadBalancedRequest(final QueryRequest req,List<String> urls) throws SolrServerException, IOException {  return loadbalancer.request(new LBHttpSolrServer.Req(req,urls));}  }
class C{  public java.lang.StringBuffer insert(int offset,double d){  internal.insert(offset,d);  return this;}  }
class C{  private Workflow.Method rollbackUpgradeVirtualVolumeLocalToDistributedMethod(URI vplexURI,String virtualVolumeName,String virtualVolumePath,String executeStepId){  return new Workflow.Method(RB_UPGRADE_VIRTUAL_VOLUME_LOCAL_TO_DISTRIBUUTED_METHOD_NAME,vplexURI,virtualVolumeName,executeStepId);}  }
class C{  public static final ArrayList readThisListXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, java.io.IOException {  ArrayList list=new ArrayList();  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      Object val=readThisValueXml(parser,name);      list.add(val);    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return list;      }      throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  @Inline static void compilePutfieldBarrierFloat(Assembler asm,GPR offset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,offset,locationMetadata,Entrypoints.floatFieldWriteBarrierMethod);}  }
class C{  public UrlBasedViewResolverRegistration viewNames(String... viewNames){  this.viewResolver.setViewNames(viewNames);  return this;}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  public SassValue invoke(List<?> arguments){  try {    ArrayList<Object> values=new ArrayList<>(argumentConverters.size());    for (    ArgumentConverter argumentConverter : argumentConverters) {      Object value=argumentConverter.convert(arguments,importStack,context);      values.add(value);    }    Object result=method.invoke(object,values.toArray());    return TypeUtils.convertToSassValue(result);  } catch (  Throwable throwable) {    StringWriter stringWriter=new StringWriter();    PrintWriter printWriter=new PrintWriter(stringWriter);    String message=throwable.getMessage();    if (StringUtils.isNotEmpty(message)) {      printWriter.append(message).append(System.lineSeparator());    }    throwable.printStackTrace(printWriter);    return new SassError(stringWriter.toString());  }}  }
class C{  public void send(String message){  if (session == null || !session.isOpen()) {    Discord4J.LOGGER.error(LogMarkers.VOICE_WEBSOCKET,"Socket attempting to send a message ({}) without a valid session!",message);    return;  }  if (isConnected.get()) {    try {      session.getRemote().sendString(message);    } catch (    IOException e) {      Discord4J.LOGGER.error(LogMarkers.VOICE_WEBSOCKET,"Error caught attempting to send a websocket message",e);    }  }}  }
class C{  int[] findNearestVacantArea(int pixelX,int pixelY,int minSpanX,int minSpanY,int spanX,int spanY,int[] result,int[] resultSpan){  return findNearestVacantArea(pixelX,pixelY,minSpanX,minSpanY,spanX,spanY,null,result,resultSpan);}  }
class C{  public boolean update(K key){  Long curr=new Long(System.currentTimeMillis());  Long prev=cache.putIfAbsent(key,curr);  if (prev == null) {    return false;  }  if (curr - prev > this.timeoutInterval) {    if (cache.replace(key,prev,curr)) {      return false;    }  }  return true;}  }
class C{  public void unpause() throws IOException {  in.read(new byte[in.available()]);  paused=false;}  }
class C{  public List<T_ENTITY> findFiltered(ViewFilterType viewFilter){  List<T_ENTITY> results=null;  EntityManager em=getEntityManager();  try {    begin();    if (!viewFilter.equals(ViewFilterType.ALL)) {      CriteriaBuilder cb=em.getCriteriaBuilder();      CriteriaQuery<T_ENTITY> query=cb.createQuery(entityClass);      Root<T_ENTITY> root=query.from(entityClass);      query.select(root);      query.where(cb.greaterThan(root.<Date>get(BaseEntity.PROPERTY_CREATE),ViewFilterType.getViewFilterDate(viewFilter)));      query.orderBy(cb.desc(root.get(BaseEntity.PROPERTY_CREATE)));      results=em.createQuery(query).getResultList();    } else {      CriteriaBuilder cb=em.getCriteriaBuilder();      CriteriaQuery<T_ENTITY> query=cb.createQuery(entityClass);      Root<T_ENTITY> root=query.from(entityClass);      query.select(root);      query.orderBy(cb.desc(root.get(BaseEntity.PROPERTY_CREATE)));      results=em.createQuery(query).getResultList();    }    commit();  } catch (  Exception e) {    rollback();    e.printStackTrace();    throw new RuntimeException(e);  } finally {    cleanup();  }  return results;}  }
class C{  private void updateFab(int selectedPage){switch (selectedPage) {case MainPagerAdapter.ALL_POS:    materialSheetFab.showFab();  break;case MainPagerAdapter.SHARED_POS:materialSheetFab.showFab(0,-getResources().getDimensionPixelSize(R.dimen.snackbar_height));break;case MainPagerAdapter.FAVORITES_POS:default :materialSheetFab.hideSheetThenFab();break;}}  }
class C{  public void addEntry(int severity,String msg,RefactoringStatusContext context,String pluginId,int code,Object data){  fEntries.add(new RefactoringStatusEntry(severity,msg,context,pluginId,code,data));  fSeverity=Math.max(fSeverity,severity);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS:    getAnnotations().clear();  return;}super.eUnset(featureID);}  }
class C{  public static Encrypted encrypt(byte[] buffer,PublicKey userPublicKey,byte[] userAuth,int padSize) throws NoSuchProviderException, NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeyException, NoSuchPaddingException, BadPaddingException, IllegalBlockSizeException, InvalidKeySpecException, IOException {  ECNamedCurveParameterSpec parameterSpec=ECNamedCurveTable.getParameterSpec("prime256v1");  KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance("ECDH","BC");  keyPairGenerator.initialize(parameterSpec);  KeyPair serverKey=keyPairGenerator.generateKeyPair();  Map<String,KeyPair> keys=new HashMap<>();  keys.put("server-key-id",serverKey);  Map<String,String> labels=new HashMap<>();  labels.put("server-key-id","P-256");  byte[] salt=SecureRandom.getSeed(16);  HttpEce httpEce=new HttpEce(keys,labels);  byte[] ciphertext=httpEce.encrypt(buffer,salt,null,"server-key-id",userPublicKey,userAuth,padSize);  return new Encrypted.Builder().withSalt(salt).withPublicKey(serverKey.getPublic()).withCiphertext(ciphertext).build();}  }
class C{  public static Session serializableInstance(){  return new Session("X");}  }
class C{  static final void computeVisibleRect(Component c,Rectangle visibleRect){  Container p=c.getParent();  Rectangle bounds=c.getBounds();  if (p == null || p instanceof Window || p instanceof Applet) {    visibleRect.setBounds(0,0,bounds.width,bounds.height);  } else {    computeVisibleRect(p,visibleRect);    visibleRect.x-=bounds.x;    visibleRect.y-=bounds.y;    SwingUtilities.computeIntersection(0,0,bounds.width,bounds.height,visibleRect);  }}  }
class C{  public boolean isFilteringEnabled(){  return mFilterData;}  }
class C{  public static Boolean[] nullToEmpty(Boolean[] array){  if (array == null || array.length == 0) {    return EMPTY_BOOLEAN_OBJECT_ARRAY;  }  return array;}  }
class C{  private boolean isVplex(Volume volume){  boolean isVplex=false;  VirtualPool vpool=dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());  isVplex=VirtualPool.vPoolSpecifiesHighAvailability(vpool);  return isVplex;}  }
class C{  public boolean isQueryActive(){  if (m_query != null)   return m_query.isActive();  return false;}  }
class C{  protected boolean beforeDelete(){  return delete_Accounting("C_Tax_Acct");}  }
class C{  public InvalidStreamException(){}  }
class C{  public static String escapeText(String text){  String result=StringUtil.gsub("&","&amp;",text);  result=StringUtil.gsub("<","&lt;",result);  result=StringUtil.gsub(">","&gt;",result);  return result;}  }
class C{  @Override public double transform(double value){  if (value <= 0.0d) {    throw new IllegalArgumentException("Cannot apply log scaling to a value less than or equal to zero.");  }  return Math.log10(value);}  }
class C{  public String toStringMatrix(){  StringBuffer result;  String[][] cells;  int i;  int j;  int n;  int size;  result=new StringBuffer();  cells=toArray();  result.append("\\begin{table}[thb]\n\\caption{\\label{labelname}" + "Table Caption}\n");  if (!getShowStdDev())   result.append("\\footnotesize\n"); else   result.append("\\scriptsize\n");  if (!getShowStdDev()) {    result.append("{\\centering \\begin{tabular}{" + "l" + ""+ "r");  } else {    result.append("{\\centering \\begin{tabular}{" + "l" + ""+ "r"+ "@{\\hspace{0cm}}"+ "c"+ "@{\\hspace{0cm}}"+ "r");  }  for (j=1; j < getColCount(); j++) {    if (getColHidden(j))     continue;    if (!getShowStdDev())     result.append("r" + "@{\\hspace{0.1cm}}" + "c"); else     result.append("r" + "@{\\hspace{0cm}}" + "c"+ "@{\\hspace{0cm}}"+ "r"+ "@{\\hspace{0.1cm}}"+ "c");  }  result.append("}\n\\\\\n\\hline\n");  if (!getShowStdDev())   result.append("Dataset & " + cells[0][1]); else   result.append("Dataset & \\multicolumn{3}{c}{" + cells[0][1] + "}");  for (j=2; j < cells[0].length; j++) {    if (!isMean(j))     continue;    if (!getShowStdDev())     result.append("& " + cells[0][j] + " & "); else     result.append("& \\multicolumn{4}{c}{" + cells[0][j] + "} ");  }  result.append("\\\\\n\\hline\n");  for (i=1; i < cells.length; i++)   cells[i][0]=cells[i][0].replace('_','-');  for (n=1; n < cells[0].length; n++) {    size=getColSize(cells,n);    for (i=1; i < cells.length; i++)     cells[i][n]=padString(cells[i][n],size,true);  }  for (i=1; i < cells.length - 1; i++) {    if (isAverage(i))     result.append("\\hline\n");    for (n=0; n < cells[0].length; n++) {      if (n == 0) {        result.append(padString(cells[i][n],getRowNameWidth()));      } else {        if (getShowStdDev()) {          if (isMean(n - 1)) {            if (!cells[i][n].trim().equals(""))             result.append(" & $\\pm$ & "); else             result.append(" &       & ");          } else           result.append(" & ");        } else {          result.append(" & ");        }        result.append(cells[i][n]);      }    }    result.append("\\\\\n");  }  result.append("\\hline\n\\multicolumn{" + cells[0].length + "}{c}{$\\circ$, $\\bullet$"+ " statistically significant improvement or degradation}"+ "\\\\\n\\end{tabular} ");  if (!getShowStdDev())   result.append("\\footnotesize "); else   result.append("\\scriptsize ");  result.append("\\par}\n\\end{table}" + "\n");  return result.toString();}  }
class C{  @Override public void writeVertexProperty(final OutputStream outputStream,final VertexProperty vp) throws IOException {  throw Io.Exceptions.writerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  protected Caret createCaret(){  return new WindowsTextUI.WindowsCaret();}  }
class C{  public void updateQualifiers(P presentationModel){  for (  A source : presentationModel.getAttributes()) {    if (null == source.getQualifier())     continue;    for (    A target : getModelStore().findAllAttributesByQualifier(source.getQualifier())) {      if (target.getTag() != source.getTag())       continue;      target.setValue(source.getValue());    }  }}  }
class C{  @Override protected void sendFunctionGroup4(){  int data=0x00 | (f16 ? 0x08 : 0) | (f15 ? 0x04 : 0)| (f14 ? 0x02 : 0)| (f13 ? 0x01 : 0);  data=data + 0xD0;  MrcMessage m=MrcMessage.getSendFunction(4,addressLo,addressHi,data);  if (m != null) {    tc.sendMrcMessage(m);  }  data=0x00 | (f20 ? 0x08 : 0) | (f19 ? 0x04 : 0)| (f18 ? 0x02 : 0)| (f17 ? 0x01 : 0);  data=data + 0xC0;  m=MrcMessage.getSendFunction(5,addressLo,addressHi,data);  if (m != null) {    tc.sendMrcMessage(m);  }}  }
class C{  @Override protected void checkForNoAccess(){  if (this.requiresReliabilityCheck && this.isMissingRequiredRoles) {    if (getMembershipAttributes().getLossAction().isNoAccess()) {synchronized (this.missingRequiredRoles) {        if (!this.isMissingRequiredRoles)         return;        Set roles=Collections.unmodifiableSet(new HashSet(this.missingRequiredRoles));        throw new RegionAccessException(LocalizedStrings.DistributedRegion_OPERATION_IS_DISALLOWED_BY_LOSSACTION_0_BECAUSE_THESE_REQUIRED_ROLES_ARE_MISSING_1.toLocalizedString(new Object[]{getMembershipAttributes().getLossAction(),roles}),getFullPath(),roles);      }    }  }}  }
class C{  public void remove(Value value){  Key subKey=makeSubKey(value);  List<byte[]> digestList=getDigestList();  int index=digestList.indexOf(subKey.digest);  client.delete(this.policy,subKey);  client.operate(this.policy,this.key,ListOperation.remove(this.binNameString,index));}  }
class C{  public static String toHumanReadableString(final String iso8601Duration){  String str="";  if (iso8601Duration.matches("P\\d+[YMD].+")) {    str="inf.";  } else {    String hours=getHours(iso8601Duration), minutes=getMinutes(iso8601Duration), seconds=getSeconds(iso8601Duration);    if (hours != null) {      str=hours;      if (minutes != null && minutes.length() == 1) {        minutes="0" + minutes;      }    }    if (str.isEmpty())     str=minutes; else     str+=":" + minutes;    if (str.isEmpty())     str=seconds; else     str+=":" + seconds;  }  return str;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.301 -0500",hash_original_method="804A7034A2DFDDBE0ECC495815CB31BB",hash_generated_method="AF55D3E5BEB87EC30C54BBF4C006354C") public Enumeration<URL> findResources(String name){  ArrayList<URL> result=new ArrayList<URL>();  for (  Element element : dexElements) {    URL url=element.findResource(name);    if (url != null) {      result.add(url);    }  }  return Collections.enumeration(result);}  }
class C{  private void syncHdrIndicator(){  ButtonManager buttonManager=mController.getButtonManager();  if (buttonManager.isEnabled(ButtonManager.BUTTON_HDR_PLUS) && buttonManager.isVisible(ButtonManager.BUTTON_HDR_PLUS)) {    setIndicatorState(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_HDR_PLUS,mHdrIndicator,mHdrPlusIndicatorIcons,false);  } else   if (buttonManager.isEnabled(ButtonManager.BUTTON_HDR) && buttonManager.isVisible(ButtonManager.BUTTON_HDR)) {    setIndicatorState(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_HDR,mHdrIndicator,mHdrIndicatorIcons,false);  } else {    changeVisibility(mHdrIndicator,View.GONE);  }}  }
class C{  public void addCoupling(final Coupling<?> coupling){  try {    manager.addCoupling(coupling);  } catch (  UmatchedAttributesException e) {    e.printStackTrace();  }}  }
class C{  public void output(Vertex output){  if (!isEnabled()) {    return;  }  Vertex sense=output.mostConscious(Primitive.SENSE);  if ((sense == null) || (!getPrimitive().equals(sense.getData()))) {    return;  }  try {    if (getListener() != null) {      log("Output:",Bot.FINE,output);      ChatEvent message=new ChatEvent();      if (output.hasRelationship(Primitive.ASSOCIATED,Primitive.WHISPER)) {        message.setWhisper(true);      }      message.setNick(getNick(output));      message.setMessage(printInput(output));      getListener().sendMessage(message);      addLastUser(getNick());    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  protected <E extends Identifiable>void deleteEntity(EntityManager em,E entity){  requireArgument(em != null,"The entity manager cannot be null.");  requireArgument(entity != null,"The entity cannot be null.");  if (!em.contains(entity)) {    Identifiable attached=findEntity(em,entity.getId(),entity.getClass());    _deleteGlobalRecords(attached,em);    em.remove(attached);  } else {    _deleteGlobalRecords(entity,em);    em.remove(entity);  }}  }
class C{  public void deleteInstanceAt(int rowIndex,boolean notify){  if ((rowIndex >= 0) && (rowIndex < getRowCount())) {    if (!m_IgnoreChanges) {      addUndoPoint();    }    m_Data.delete(rowIndex);    if (notify) {      notifyListener(new TableModelEvent(this,rowIndex,rowIndex,TableModelEvent.ALL_COLUMNS,TableModelEvent.DELETE));    }  }}  }
class C{  public Example<Instance> nextInstance(){  return stream.nextInstance();}  }
class C{  private boolean accept(final Value arg,final Value parg,final Value farg){  if (debug) {    log.debug("regex var: " + arg);    log.debug("regex pattern: " + parg);    log.debug("regex flags: " + farg);    log.debug(QueryHints.REGEX_MATCH_NON_STRING + ": " + this.getProperty(QueryHints.REGEX_MATCH_NON_STRING,QueryHints.DEFAULT_REGEX_MATCH_NON_STRING));    log.debug("matchNonString:  " + this.matchNonString);  }  if (QueryEvaluationUtil.isPlainLiteral(arg) || matchNonString) {    final String text;    if (QueryEvaluationUtil.isPlainLiteral(arg)) {      text=((Literal)arg).getLabel();    } else {      text=arg.stringValue();    }    if (debug) {      log.debug("regex text:  " + text);    }    try {      Pattern pattern=(Pattern)getProperty(Annotations.PATTERN);      if (pattern == null) {        pattern=getPattern(parg,farg);      }      if (Thread.interrupted()) {        throw new RuntimeException(new InterruptedException());      }      final boolean result=pattern.matcher(text).find();      return result;    } catch (    IllegalArgumentException ex) {      throw new SparqlTypeErrorException();    }  } else {    if (debug) {      log.debug("Unknown type:  " + arg);    }    throw new SparqlTypeErrorException();  }}  }
class C{  public boolean LE(Word w2){  return value.LE(w2.value);}  }
class C{  public static String generateSHA256(final byte[] message){  return hashString(message,"SHA-256");}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public DataLogicReceipts(){}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public float estimateRuleCost(List<FeatureFunction> models){  if (null == models)   return 0.0f;  if (this.estimatedCost <= Float.NEGATIVE_INFINITY) {    this.estimatedCost=0.0f;    for (    FeatureFunction ff : models) {      float val=ff.estimateCost(this);      this.estimatedCost+=val;    }  }  return estimatedCost;}  }
class C{  public EEXECEncryption(OutputStream out,int r,int n){  this.out=out;  this.c1=C1;  this.c2=C2;  this.r=r;  this.n=n;}  }
class C{  public Bundler putStringArrayList(String key,ArrayList<String> value){  bundle.putStringArrayList(key,value);  return this;}  }
class C{  protected boolean updateAttachmentPoint(){  boolean moved=false;  this.oldAPs=attachmentPoints;  if (attachmentPoints == null || attachmentPoints.isEmpty())   return false;  List<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();  if (attachmentPoints != null)   apList.addAll(attachmentPoints);  Map<DatapathId,AttachmentPoint> newMap=getAPMap(apList);  if (newMap == null || newMap.size() != apList.size()) {    moved=true;  }  if (moved) {    log.info("updateAttachmentPoint: ap {}  newmap {} ",attachmentPoints,newMap);    List<AttachmentPoint> newAPList=new ArrayList<AttachmentPoint>();    if (newMap != null)     newAPList.addAll(newMap.values());    this.attachmentPoints=newAPList;  }  return moved;}  }
class C{  public synchronized AttributeSet removeAttributes(AttributeSet old,Enumeration<?> names){  if (old.getAttributeCount() <= getCompressionThreshold()) {    search.removeAttributes(search);    search.addAttributes(old);    search.removeAttributes(names);    reclaim(old);    return getImmutableUniqueSet();  }  MutableAttributeSet ma=getMutableAttributeSet(old);  ma.removeAttributes(names);  return ma;}  }
class C{  public static final Polygon flipAlongTheYAxis(Polygon polygon,Vector2 point){  return Geometry.flip(polygon,Vector2.Y_AXIS,point);}  }
class C{  public NegativeArraySizeException(){  super();}  }
class C{  @Override public boolean isErrorEnabled(){  return logger.isLoggable(Level.SEVERE);}  }
class C{  public static SpanObserver subscribe(String name,SpanObserver observer){  if (observers.containsKey(name)) {    log.warn("Overwriting existing SpanObserver with name {} by new observer: {}",name,observer);  }  if (observers.size() >= 5) {    log.warn("Five or more SpanObservers registered: {}",observers.keySet());  }  return observers.put(name,observer);}  }
class C{  private void testMultiPartForeignKeys() throws SQLException {  Connection conn=getConnection("trigger");  Statement stat=conn.createStatement();  stat.execute("DROP TABLE IF EXISTS TEST1");  stat.execute("DROP TABLE IF EXISTS TEST2");  stat.execute("create table test1(id int primary key, col1 int)");  stat.execute("alter table test1 add constraint unique_test1 " + "unique (id,col1)");  stat.execute("create table test2(id int primary key, col1 int)");  stat.execute("alter table test2 add constraint fk_test2 " + "foreign key(id,col1) references test1 (id,col1)");  stat.execute("insert into test1 values (1,1)");  stat.execute("insert into test1 values (2,2)");  stat.execute("insert into test1 values (3,3)");  stat.execute("insert into test2 values (1,1)");  assertThrows(23506,stat).execute("insert into test2 values (2,1)");  assertSingleValue(stat,"select count(*) from test1",3);  assertSingleValue(stat,"select count(*) from test2",1);  stat.execute("drop table test1");  stat.execute("drop table test2");  conn.close();}  }
class C{  public static void main(String[] args) throws Throwable {  startTime=System.currentTimeMillis();  Agent localAgent=createAgent(9090,false);  localAgent.setNominationStrategy(NominationStrategy.NOMINATE_HIGHEST_PRIO);  Agent remotePeer=createAgent(6060,false);  localAgent.addStateChangeListener(new IceProcessingListener());  localAgent.setControlling(true);  remotePeer.setControlling(false);  long endTime=System.currentTimeMillis();  transferRemoteCandidates(localAgent,remotePeer);  for (  IceMediaStream stream : localAgent.getStreams()) {    stream.setRemoteUfrag(remotePeer.getLocalUfrag());    stream.setRemotePassword(remotePeer.getLocalPassword());  }  if (START_CONNECTIVITY_ESTABLISHMENT_OF_REMOTE_PEER)   transferRemoteCandidates(remotePeer,localAgent);  for (  IceMediaStream stream : remotePeer.getStreams()) {    stream.setRemoteUfrag(localAgent.getLocalUfrag());    stream.setRemotePassword(localAgent.getLocalPassword());  }  logger.info("Total candidate gathering time: " + (endTime - startTime) + "ms");  logger.info("LocalAgent:\n" + localAgent);  localAgent.startConnectivityEstablishment();  if (START_CONNECTIVITY_ESTABLISHMENT_OF_REMOTE_PEER)   remotePeer.startConnectivityEstablishment();  logger.info("Local audio clist:\n" + localAgent.getStream("audio").getCheckList());  IceMediaStream videoStream=localAgent.getStream("video");  if (videoStream != null)   logger.info("Local video clist:\n" + videoStream.getCheckList());  Thread.sleep(60000);}  }
class C{  @Util public static void addBreadCrumb(List<BreadCrumb> breadcrumbs,String title){  breadcrumbs.add(new BreadCrumb("","",title,""));}  }
class C{  public StateTree(){  tree=new BalancedTree<INode,INode>(comp);  tree.setAllowDuplicates(true);}  }
class C{  private BitVector[] executeCallablesAndCollect(final ExecutorService executorService,final List<Callable<BitVectorWrapper>> solvers){  int retry=0;  final CompletionService<BitVectorWrapper> ecs=new ExecutorCompletionService<BitVectorWrapper>(executorService);  for (int i=0; i < solvers.size(); i++) {    final Callable<BitVectorWrapper> s=solvers.get(i);    try {      ecs.submit(s);      retry=0;    } catch (    RejectedExecutionException e) {      if (retry++ < 3 && !executorService.isShutdown()) {        int sleep=1 + rnd.nextInt(5);        LOGGER.log(Level.FINE,"{0}. time throttleing task submission due to overload during FPSetManager callable execution #{1} for {2} seconds",new Object[]{retry,i});        try {          Thread.sleep(sleep * 1000L);        } catch (        InterruptedException e1) {          e1.printStackTrace();        }        i-=1;        continue;      } else {        throw e;      }    }  }  final BitVector[] res=new BitVector[solvers.size()];  for (int i=0; i < res.length; i++) {    try {      final BitVectorWrapper indexBitVector=ecs.take().get();      final int index=indexBitVector.getIndex();      Assert.check(res[index] == null,EC.GENERAL);      res[index]=indexBitVector.getBitVector();    } catch (    InterruptedException e) {      e.printStackTrace();    }catch (    ExecutionException e) {      e.printStackTrace();    }  }  return res;}  }
class C{  public boolean isEquation(){  return hasRelationship(Primitive.INSTANTIATION,Primitive.EQUATION);}  }
class C{  public static Signature sign(final KeyPair keyPair,final byte[] data){  final byte[] hash=Hashes.sha3_512(toByteArray(keyPair.getPrivateKey().getRaw()));  final byte[] a=Arrays.copyOfRange(hash,0,32);  a[31]&=0x7F;  a[31]|=0x40;  a[0]&=0xF8;  final Ed25519EncodedFieldElement r=new Ed25519EncodedFieldElement(Hashes.sha3_512(Arrays.copyOfRange(hash,32,64),data));  final Ed25519EncodedFieldElement rReduced=reduceModGroupOrder(r);  final Ed25519GroupElement R=scalarMultiplyGroupElement(Ed25519Group.BASE_POINT,toFieldElement(toBigInteger(rReduced)));  final Ed25519EncodedFieldElement h=new Ed25519EncodedFieldElement(Hashes.sha3_512(R.encode().getRaw(),keyPair.getPublicKey().getRaw(),data));  final Ed25519EncodedFieldElement hReduced=reduceModGroupOrder(h);  final BigInteger S=toBigInteger(rReduced).add(toBigInteger(hReduced).multiply(toBigInteger(a))).mod(Ed25519Group.GROUP_ORDER);  return new Signature(R.encode().getRaw(),toByteArray(S));}  }
class C{  public FilePath append(List<String> subElements){  for (  String subElement : subElements) {    appendSub(subElement);  }  return this;}  }
class C{  private void createPiedPiper(){  piedpiper=new SpeakerNPC("Pied Piper");  TPPQuestHelperFunctions.setupPiper(piedpiper);  fullpathin=PathsBuildHelper.getAdosIncomingPath();  fullpathout=PathsBuildHelper.getAdosTownHallBackwardPath();  leadNPC();}  }
class C{  public ArraySet(){  this(3);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Vector generateRandomVector(VectorType type,int dimension,int numEntries,Random random){  if (2 * numEntries > dimension && !type.equals(VectorType.COMPLEX) && !(numEntries == dimension)) {    throw new RuntimeException("Requested " + numEntries + " to be filled in sparse "+ "vector of dimension "+ dimension+ ". This is not sparse and may cause problems.");  }switch (type) {case BINARY:    return binaryInstance.generateRandomVector(dimension,numEntries,random);case REAL:  return realInstance.generateRandomVector(dimension,numEntries,random);case COMPLEX:if (!ComplexVector.getDominantMode().equals(Mode.HERMITIAN)) ComplexVector.setDominantMode(Mode.POLAR_DENSE);return complexInstance.generateRandomVector(dimension,numEntries,random);case COMPLEXFLAT:ComplexVector.setDominantMode(Mode.CARTESIAN);return complexInstance.generateRandomVector(dimension,numEntries,random);default :throw new IllegalArgumentException("Unrecognized VectorType: " + type);}}  }
class C{  public void checkForUpdate(){  lastVersion=getLastVersion();  if (lastVersion != null) {    int i=new Version(currentVersion).compareTo(new Version(lastVersion));    outdated=i == -1;    if (lastVersion.equalsIgnoreCase("1.7.1") && currentVersion.startsWith("1.1"))     outdated=false;  } else   outdated=false;  if (outdated) {    Bukkit.getOnlinePlayers().stream().filter((Predicate<Player>)null).forEachOrdered(null);  }}  }
class C{  public void commit(Object config) throws ConfigurationException {  assert (config.getClass() == configClass) : ("coding error: configuration " + config.getClass() + " != template "+ configClass);  Set<String> done=new HashSet<String>();  for (Iterator<String> vars=varList.iterator(); vars.hasNext(); ) {    String var=vars.next();    if (varMap.containsKey(var)) {      commitVariable(config,var,done);    }  }  for (Iterator<String> reqs=requiredList.iterator(); reqs.hasNext(); ) {    String req=reqs.next();    if (!committed.contains(req)) {      throw new ConfigurationException.MissingRequirement(req,null,null,-1);    }  }}  }
class C{  public GBC pad(int padx,int pady){  ipadx=padx;  ipady=pady;  return this;}  }
class C{  public static void clearFreeLists(){  while (_freeStandard.allocate() != null) {  }  while (_freeSmall.allocate() != null) {  }  while (_freeLarge.allocate() != null) {  }}  }
class C{  protected FinalizableSoftReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  protected void readConstraintsForChild(final Element element,final LwComponent component){  if (myLayoutSerializer != null) {    final Element constraintsElement=LwXmlReader.getRequiredChild(element,"constraints");    myLayoutSerializer.readChildConstraints(constraintsElement,component);  }}  }
class C{  protected void nodeConnected(short nodeId,Channel channel){  logger.debug("[{}->{}] Connection established",syncManager.getLocalNodeId(),nodeId);synchronized (connections) {    NodeConnection c=connections.get(nodeId);    if (c == null) {      connections.put(nodeId,c=new NodeConnection());    }    c.nodeChannel=channel;    c.state=NodeConnectionState.CONNECTED;  }}  }
class C{  public Json removePadding(String padding){  String text=getFirstSourceText();  XTokenQueue tokenQueue=new XTokenQueue(text);  tokenQueue.consumeWhitespace();  tokenQueue.consume(padding);  tokenQueue.consumeWhitespace();  String chompBalanced=tokenQueue.chompBalancedNotInQuotes('(',')');  return new Json(chompBalanced);}  }
class C{  public static boolean deleteDir(final Path self){  if (!Files.exists(self))   return true;  if (!Files.isDirectory(self))   return false;  try (DirectoryStream<Path> stream=Files.newDirectoryStream(self)){    for (    Path path : stream) {      if (Files.isDirectory(path)) {        if (!deleteDir(path)) {          return false;        }      } else {        Files.delete(path);      }    }    Files.delete(self);    return true;  } catch (  IOException e) {    return false;  }}  }
class C{  public IntHashMap(int initialCapacity){  this(initialCapacity,0.75f);}  }
class C{  public void reduce(Text key,Iterator<ObjectWritable> values,OutputCollector<Text,LinkDatum> output,Reporter reporter) throws IOException {  String fromUrl=key.toString();  List<LinkDatum> outlinks=new ArrayList<LinkDatum>();  Node node=null;  LoopSet loops=null;  while (values.hasNext()) {    ObjectWritable write=values.next();    Object obj=write.get();    if (obj instanceof Node) {      node=(Node)obj;    } else     if (obj instanceof LinkDatum) {      outlinks.add((LinkDatum)WritableUtils.clone((LinkDatum)obj,conf));    } else     if (obj instanceof LoopSet) {      loops=(LoopSet)obj;    }  }  if (node == null && loops != null) {    LOG.warn("LoopSet without Node object received for " + key.toString() + " . You should either not use Loops as input of the LinkRank program or rerun the Loops program over the WebGraph.");    return;  }  int numOutlinks=node.getNumOutlinks();  float inlinkScore=node.getInlinkScore();  float outlinkScore=node.getOutlinkScore();  LOG.debug(fromUrl + ": num outlinks " + numOutlinks);  if (numOutlinks > 0) {    Set<String> loopSet=(loops != null) ? loops.getLoopSet() : null;    for (int i=0; i < outlinks.size(); i++) {      LinkDatum outlink=outlinks.get(i);      String toUrl=outlink.getUrl();      if (loopSet != null && loopSet.contains(toUrl)) {        LOG.debug(fromUrl + ": Skipping inverting inlink from loop " + toUrl);        continue;      }      outlink.setUrl(fromUrl);      outlink.setScore(outlinkScore);      output.collect(new Text(toUrl),outlink);      LOG.debug(toUrl + ": inverting inlink from " + fromUrl+ " origscore: "+ inlinkScore+ " numOutlinks: "+ numOutlinks+ " inlinkscore: "+ outlinkScore);    }  }}  }
class C{  private void handleHtmlSearchNotebooks(PageWrapper pageWrapper,RequestAndResponse requestAndResponse,String query,String paneId) throws IOException, ServletException {  pageWrapper.addPageIntroText(servletText.introTextSearchNotebooks(false),servletText.introTextSearchNotebooks(true));  try {    final StringBuilder result=new StringBuilder();    User queryUser=null;    if (null != (queryUser=canUserSeeUsersData(requestAndResponse,true))) {      final ResultsPaginator paginator=new ResultsPaginator(requestAndResponse,servletText.sentenceThereWereNoMatches(),result,servletText);      try {        final List<?> results=dbLogic.searchEntriesForUserByNotebookTitle(queryUser.getId(),query,paginator.getStartPosition(),paginator.getMaxResults());        entryListToHtmlAndJson(paneId,result,paginator,results);      } catch (      EmptyQueryException e) {        requestAndResponse.print(servletText.errorNeedLongerQuery());      }    }    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    requestAndResponse.print(servletText.errorInternalDatabase());  }}  }
class C{  @Override @SuppressFBWarnings(value="BC_UNCONFIRMED_CAST",justification="The ServletRequest is cast to an HttpServletRequest which is always the case since all requests use the HTTP protocol.") public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain) throws IOException, ServletException {  doHttpFilter((HttpServletRequest)servletRequest,(HttpServletResponse)servletResponse,filterChain);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (StringUtils.isBlank(idLista))   errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ErrorKeys.ERROR_DESCRIPCION_EXPORTAR_DEF_NO_ENCONTRADA,request.getLocale())));  return errors;}  }
class C{  private static Pointer computePointer(FloatBuffer buffer){  Pointer result=null;  if (buffer.isDirect()) {    int oldPosition=buffer.position();    buffer.position(0);    result=Pointer.to(buffer.slice()).withByteOffset(oldPosition * Sizeof.FLOAT);    buffer.position(oldPosition);  } else   if (buffer.hasArray()) {    FloatBuffer t=FloatBuffer.wrap(buffer.array());    int elementOffset=buffer.position() + buffer.arrayOffset();    result=Pointer.to(t).withByteOffset(elementOffset * Sizeof.FLOAT);  }  return result;}  }
class C{  public static BaseBlock transform(BaseBlock block,Transform transform,BlockRegistry registry){  return transform(block,transform,registry,block);}  }
class C{  public Builder autoCommitBufferSize(int kb){  return set("autoCommitBufferSize",kb);}  }
class C{  public void prepareToBuild(){  descriptor().state().properties().forEach(null);  descriptor().state().associations().forEach(null);  descriptor().state().manyAssociations().forEach(null);  descriptor().state().namedAssociations().forEach(null);}  }
class C{  public Shape3DPortrayal3D(Shape3D shape,Appearance appearance){  this.appearance=appearance;  shape=(Shape3D)(shape.cloneTree(true));  Geometry g=shape.getGeometry();  if (g instanceof CompressedGeometry)   ((CompressedGeometry)g).setCapability(CompressedGeometry.ALLOW_GEOMETRY_READ);  setShape3DFlags(shape);  shape.setAppearance(appearance);  group=shape;}  }
class C{  private List<String> matches(String value,String valueToFound,int start,boolean attr){  int pos=value.indexOf(valueToFound,start);  if (pos >= 0) {    List<String> result=new ArrayList<String>();    if (valueToFound.length() < 3 && (value.length() != valueToFound.length() - start)) {      result.add(value);      return result;    }    String firstPart=null;    if (pos > 0) {      firstPart=value.substring(0,pos);    }    String secondPart=value.substring(pos,pos + valueToFound.length());    String thirdPart=null;    if (pos + valueToFound.length() < value.length()) {      thirdPart=value.substring(pos + valueToFound.length());    }    if (firstPart != null && !firstPart.isEmpty()) {      if (attr) {        result.addAll(compactAttributeValue(firstPart,start));      } else {        result.addAll(compactExtension(firstPart,start));      }    }    result.add(secondPart);    if (thirdPart != null && !thirdPart.isEmpty()) {      if (attr) {        result.addAll(compactAttributeValue(thirdPart,0));      } else {        result.addAll(compactExtension(thirdPart,0));      }    }    return result;  } else {    return null;  }}  }
class C{  @Override public double[][] processDatabase(Relation<? extends NumberVector> database){  return CovarianceMatrix.make(database).destroyToNaiveMatrix();}  }
class C{  public void threadAttach(HGTransactionContext tContext){  tcontext.set(tContext);}  }
class C{  public static void addChemicalCrystallizerRecipe(GasStack input,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addChemicalCrystallizerRecipe",GasStack.class,ItemStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public JSONObject optJSONObject(String key){  Object object=this.opt(key);  return object instanceof JSONObject ? (JSONObject)object : null;}  }
class C{  default String renderImports(Generator gen,M model){  return gen.onEach(model.getImports()).distinct().sorted().collect(joinIfNotEmpty(nl(),"",dnl()));}  }
class C{  public int update(Calendar calendar){  return updateTableRow(Calendar.uri,calendar);}  }
class C{  public void testBug58728() throws Exception {  createTable("testbug58728","(Id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY, txt VARCHAR(50))","InnoDB");  this.stmt.executeUpdate("INSERT INTO testbug58728 VALUES (NULL, 'Text 1'), (NULL, 'Text 2')");  MysqlConnectionPoolDataSource pds=new MysqlConnectionPoolDataSource();  pds.setUrl(dbUrl);  Statement stmt1=pds.getPooledConnection().getConnection().createStatement();  stmt1.executeUpdate("UPDATE testbug58728 SET txt = 'New text' WHERE Id > 0");  ResultSet rs1=stmt1.getResultSet();  stmt1.close();  if (rs1 != null) {    rs1.close();  }}  }
class C{  @Override public void addTab(Tab tab,int index,TabLaunchType type){  try {    TraceEvent.begin("TabModelBase.addTab");    for (    TabModelObserver obs : mObservers)     obs.willAddTab(tab,type);    boolean selectTab=mOrderController.willOpenInForeground(type,isIncognito());    index=mOrderController.determineInsertionIndex(type,index,tab);    assert index <= mTabs.size();    assert tab.isIncognito() == isIncognito();    commitAllTabClosures();    if (index < 0 || index > mTabs.size()) {      mTabs.add(tab);    } else {      mTabs.add(index,tab);      if (index <= mIndex) {        mIndex++;      }    }    if (!isCurrentModel()) {      mIndex=Math.max(mIndex,0);    }    mRewoundList.resetRewoundState();    int newIndex=indexOf(tab);    tabAddedToModel(tab);    for (    TabModelObserver obs : mObservers)     obs.didAddTab(tab,type);    if (selectTab) {      mModelDelegate.selectModel(isIncognito());      setIndex(newIndex,TabModel.TabSelectionType.FROM_NEW);    }  }  finally {    TraceEvent.end("TabModelBase.addTab");  }}  }
class C{  protected Object[] makeCopies(Object obj,int num) throws Exception {  if (obj == null) {    throw new Exception("No object set");  }  Object[] objs=new Object[num];  SerializedObject so=new SerializedObject(obj);  for (int i=0; i < objs.length; i++) {    objs[i]=so.getObject();  }  return objs;}  }
class C{  public String toStringPretty(){  String ret="";  for (int i=0; i < args.size(); i++) {    if (i > 0)     ret+="|";    ret+=args.get(i).toStringPretty();  }  return ret;}  }
class C{  public static boolean isEmpty(Object s){  return s == null || (s instanceof String && ((String)s).length() == 0);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testResourceELEvalAfterPrematureClosureOfStream() throws Exception {  ResourceHandler handler=getFacesContext().getApplication().getResourceHandler();  handler.createResource("simple-with-el.css").getInputStream().close();  testResourceELEval();}  }
class C{  public MultiplicativeExpression createMultiplicativeExpression(){  MultiplicativeExpressionImpl multiplicativeExpression=new MultiplicativeExpressionImpl();  return multiplicativeExpression;}  }
class C{  protected void makeDataFlavors(){  try {    _positionableDataFlavor=new DataFlavor(POSITIONABLE_FLAVOR);    _namedIconDataFlavor=new DataFlavor(ImageIndexEditor.IconDataFlavorMime);    _positionableListDataFlavor=new DataFlavor(List.class,"JComponentList");  } catch (  ClassNotFoundException cnfe) {    cnfe.printStackTrace();  }  new DropTarget(this,DnDConstants.ACTION_COPY_OR_MOVE,this);}  }
class C{  public T caseReaction(Reaction object){  return null;}  }
class C{  public void addRaptorWindowItem(final RaptorWindowItem item,boolean isAsynch){  addRaptorWindowItem(item,isAsynch,true);}  }
class C{  @Override public int compareTo(IntIntPair other){  int fdiff=this.first - other.first;  if (fdiff != 0) {    return fdiff;  }  return this.second - other.second;}  }
class C{  private void computeIFDOffset(){  long bytesPerRow=(long)Math.ceil((sampleSize[0] / 8.0) * tileWidth * numBands);  long bytesPerTile=bytesPerRow * tileLength;  long lastTile=bytesPerTile;  if (!isTiled) {    long lastStripRows=length - (tileLength * (numTiles - 1));    lastTile=lastStripRows * bytesPerRow;  }  long totalBytesOfData=bytesPerTile * (numTiles - 1) + lastTile;  firstIFDOffset=8 + totalBytesOfData;  if ((firstIFDOffset % 2) != 0) {    firstIFDOffset++;  }}  }
class C{  public static String readString(ByteBuffer buff){  int size=readVarInt(buff);  byte[] bytes=new byte[size];  buff.get(bytes);  return new String(bytes,StandardCharsets.UTF_8);}  }
class C{  public void addPages(){  page=new UmpleWizardPage(selection);  addPage(page);}  }
class C{  @ObjectiveCName("buildGlobalSearchModel") public SearchValueModel<SearchResult> buildGlobalSearchModel(){  return modules.getSearchModule().buildSearchModel();}  }
class C{  public boolean isMarkBlacklistedSeen(){  return fieldMarkBlacklistedSeen;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public HaltReply(final int packetId,final int tid,final int errorCode){  super(packetId,errorCode);  activeThreadId=tid;}  }
class C{  public static void print(int[][] array){  System.out.println("The random array is");  for (int i=0; i < array.length; i++) {    for (int j=0; j < array[i].length; j++) {      System.out.print(array[i][j]);    }    System.out.println();  }}  }
class C{  void addNamedParameter(String parameterName,int startIndex,int endIndex){  this.parameterNames.add(parameterName);  this.parameterIndexes.add(new int[]{startIndex,endIndex});}  }
class C{  private void onDisconnectFromDownstreamContainer(final ProtonConnection con){  LOG.warn("lost connection to downstream container [{}]",downstreamContainerHost);  activeSenders.clear();  con.disconnectHandler(null);  con.disconnect();  ProtonClientOptions clientOptions=createClientOptions();  if (clientOptions.getReconnectAttempts() != 0) {    vertx.setTimer(300,null);  }}  }
class C{  public String message(){  return message;}  }
class C{  public base32(String alphabet,boolean padding,boolean lowercase){  this.alphabet=alphabet;  this.padding=padding;  this.lowercase=lowercase;}  }
class C{  private void removeUnneededPrefPages(){  PreferenceManager pm=PlatformUI.getWorkbench().getPreferenceManager();  String[] prefPageIDsToRemove=new String[]{"org.eclipse.datatools.connectivity.ui.preferences.dataNode","org.eclipse.birt.report.designer.ui.preferences","org.eclipse.birt.chart.ui.swt.fieldassist.preferences.FieldAssistPreferencePage"};  Set<String> idSet=new HashSet<String>();  for (  String s : prefPageIDsToRemove) {    idSet.add(s);  }  for (  IPreferenceNode node : pm.getRootSubNodes()) {    if (idSet.contains(node.getId())) {      pm.remove(node);    }  }}  }
class C{  public static Object fromString(String value){  XStream xstream=new XStream();  return xstream.fromXML(value);}  }
class C{  public int copyLinesFrom(MCommission otherCom){  if (otherCom == null)   return 0;  MCommissionLine[] fromLines=otherCom.getLines();  int count=0;  for (int i=0; i < fromLines.length; i++) {    MCommissionLine line=new MCommissionLine(getCtx(),0,get_TrxName());    PO.copyValues(fromLines[i],line,getAD_Client_ID(),getAD_Org_ID());    line.setC_Commission_ID(getC_Commission_ID());    if (line.save())     count++;  }  if (fromLines.length != count)   log.log(Level.SEVERE,"copyLinesFrom - Line difference - From=" + fromLines.length + " <> Saved="+ count);  return count;}  }
class C{  private void tryRippleExit(){  if (mRipple != null) {    if (mExitingRipples == null) {      mExitingRipples=new RippleForeground[MAX_RIPPLES];    }    mExitingRipples[mExitingRipplesCount++]=mRipple;    mRipple.exit();    mRipple=null;  }}  }
class C{  private void saveBinaryDataIntoDB(byte[] inflatedData){  if (inflatedData == null || inflatedData.length == 0)   throw new IllegalArgumentException("InflatedData is NULL");  m_inflated=new Integer(inflatedData.length);  ByteArrayOutputStream out=new ByteArrayOutputStream();  ZipOutputStream zip=new ZipOutputStream(out);  zip.setMethod(ZipOutputStream.DEFLATED);  zip.setLevel(Deflater.BEST_COMPRESSION);  zip.setComment("adempiere");  byte[] deflatedData=null;  try {    ZipEntry entry=new ZipEntry("AdempiereArchive");    entry.setTime(System.currentTimeMillis());    entry.setMethod(ZipEntry.DEFLATED);    zip.putNextEntry(entry);    zip.write(inflatedData,0,inflatedData.length);    zip.closeEntry();    log.fine(entry.getCompressedSize() + " (" + entry.getSize()+ ") "+ (entry.getCompressedSize() * 100 / entry.getSize())+ "%");    zip.close();    deflatedData=out.toByteArray();    log.fine("Length=" + inflatedData.length);    m_deflated=new Integer(deflatedData.length);  } catch (  Exception e) {    log.log(Level.SEVERE,"saveLOBData",e);    deflatedData=null;    m_deflated=null;  }  super.setBinaryData(deflatedData);}  }
class C{  public void preDeregister() throws Exception {}  }
class C{  BasicBlockLE(int loc,InlineSequence position,ControlFlowGraph cfg){  block=new BasicBlock(loc,position,cfg);  low=loc;  high=loc;}  }
class C{  public String mergeValueRangeTipText(){  return "The range of values to merge.";}  }
class C{  private void processFile(File file,String p1,String p2){  if (file == null)   return; else   if (!file.exists())   return; else   if (file.isDirectory()) {    File[] dirFiles=file.listFiles(m_filter);    for (int i=0; i < dirFiles.length; i++)     processFile(dirFiles[i],p1,p2);  } else {    System.out.println(" ProcessFile=" + file.getAbsolutePath());    m_count++;    processFileAction(file,p1,p2);  }}  }
class C{  public static <R,A,B>CompletionStage<R> combine(CompletionStage<A> a,CompletionStage<B> b,BiFunction<A,B,R> function){  return a.thenCombine(b,function);}  }
class C{  public void putResponseGetAllResources(List<String> resources){  logger.debug("ResourceSet from ZeppelinServer");  ResourceSet resourceSet=new ResourceSet();  for (  String res : resources) {    RemoteResource resource=gson.fromJson(res,RemoteResource.class);    resource.setResourcePoolConnector(this);    resourceSet.add(resource);  }synchronized (getAllResourceResponse) {    getAllResourceResponse.add(resourceSet);    getAllResourceResponse.notify();  }}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  int n=sampleSize();  int xi=latents.indexOf(x);  int yi=latents.indexOf(y);  int nA=clustering.get(xi).size();  int nB=clustering.get(yi).size();  for (int i=0; i < z.size(); i++) {    int s=latents.indexOf(z.get(i));    int m=clustering.get(s).size() / 2;    nA+=m;    nB+=m;  }  int[] A=new int[nA];  int[] B=new int[nB];  int a=0;  int b=0;  for (int i=0; i < clustering.get(xi).size(); i++) {    A[i]=variables.indexOf(clustering.get(xi).get(i));    a++;  }  for (int i=0; i < clustering.get(yi).size(); i++) {    B[i]=variables.indexOf(clustering.get(yi).get(i));    b++;  }  for (int i=0; i < z.size(); i++) {    int s=latents.indexOf(z.get(i));    int m=clustering.get(s).size() / 2;    for (int j=1; j <= m; j++) {      A[a]=variables.indexOf(clustering.get(s).get(j - 1));      a++;      B[b]=variables.indexOf(clustering.get(s).get(m + j - 1));      b++;    }  }  double[][] CovMatrix=covMatrix.getMatrix().toArray();  int rank=new EstimateRank().Estimate(A,B,CovMatrix,n,alpha);  boolean independent=rank <= z.size();  return independent;}  }
class C{  Node(T t,String id,double percentX,double percentY,double percentWidth,double percentHeight){  super(t,id);  this.type=ElementType.NODE;  this.percentX=percentX;  this.percentY=percentY;  this.percentWidth=percentWidth;  this.percentHeight=percentHeight;}  }
class C{  private List<Map<String,Object>> prepareResultsforDisplay(Collection<ScoredResult> scoredResults){  ArrayList<Map<String,Object>> output=new ArrayList<Map<String,Object>>(scoredResults.size());  for (  ScoredResult result : scoredResults) {    Map<String,Object> resultMap=new HashMap<String,Object>();    if (result.track != null) {      prepareTrackForDisplay(result.track,resultMap);    } else {      prepareMarkerForDisplay(result.waypoint,resultMap);    }    output.add(resultMap);  }  return output;}  }
class C{  private void startServer(int portno) throws Exception {  port=portno;  SocketConnector listener=new SocketConnector();  listener.setHost("127.0.0.1");  listener.setPort(port);  server.addConnector(listener);  server.start();}  }
class C{  public static void logInitialization(final Logger logger){  logger.logMessage(Level.INFO,"DiffTool initialized [LogLevel: " + logger.getLogLevel() + "]");}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public void objectChanged(NamingEvent namingEvent){  objectRemoved(namingEvent);  objectAdded(namingEvent);}  }
class C{  public static byte[] hexStreamToByteArray(String hexStream){  int length=hexStream.length();  byte[] data=new byte[length / 2];  for (int i=0; i < length; i+=2) {    data[i / 2]=(byte)((Character.digit(hexStream.charAt(i),16) << 4) + Character.digit(hexStream.charAt(i + 1),16));  }  return data;}  }
class C{  private static ValueLob createBlob(InputStream in,long length,DataHandler handler){  try {    if (handler == null) {      byte[] data=IOUtils.readBytesAndClose(in,(int)length);      return createSmallLob(Value.BLOB,data);    }    long remaining=Long.MAX_VALUE;    boolean compress=handler.getLobCompressionAlgorithm(Value.BLOB) != null;    if (length >= 0 && length < remaining) {      remaining=length;    }    int len=getBufferSize(handler,compress,remaining);    byte[] buff;    if (len >= Integer.MAX_VALUE) {      buff=IOUtils.readBytesAndClose(in,-1);      len=buff.length;    } else {      buff=DataUtils.newBytes(len);      len=IOUtils.readFully(in,buff,len);    }    if (len <= handler.getMaxLengthInplaceLob()) {      byte[] small=DataUtils.newBytes(len);      System.arraycopy(buff,0,small,0,len);      return ValueLob.createSmallLob(Value.BLOB,small);    }    ValueLob lob=new ValueLob(Value.BLOB,null);    lob.createFromStream(buff,len,in,remaining,handler);    return lob;  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  private static void usage(){  System.out.println("Usage: java AppsForYourDomainMigrationClient" + " --username <username> --password <password> --domain <domain>\n" + " [--destination_user <destination_user>] [--data_file <file>]");  System.out.println();  System.out.println("A simple application that demonstrates how to migrate" + " email mesages to a Google Apps email account.  Authenticates using" + " the provided login credentials, then migrates a sample message to"+ " your own account (if you are a user) or to the specified"+ " destination account (if you are a domain administrator).");  System.out.println();  System.out.println("If --data_file is specified, an RFC822 message will be" + " read from the given file; otherwise, a sample message will be" + "used.");  System.out.println();  System.out.println("Specify username and destination_user as just the name," + " not email address.  For example, to migrate mail to joe@example.com" + " use these options:  --username joe --password your_password"+ " --domain example.com");}  }
class C{  public static <S>TableColumn<S,Boolean> booleanColumn(String colName,String propName,String tip){  TableColumn<S,Boolean> col=tableColumn(colName,propName,tip,50,50,true);  col.setCellFactory(CheckBoxTableCellEx.<S>cellFactory());  return col;}  }
class C{  public boolean isPrimaryKey(){  return this.isPrimaryKey;}  }
class C{  public void testGetCallBackHandler(){  CallbackHandler cbh=new tmpCallbackHandler();  KeyStore.CallbackHandlerProtection ksCBH=new KeyStore.CallbackHandlerProtection(cbh);  assertEquals("Incorrect CallbackHandler",cbh,ksCBH.getCallbackHandler());}  }
class C{  FiringPlan[] calcFiringPlansUnderHeat(Entity shooter,FiringPlan alphaStrike){  int maxHeat=alphaStrike.getHeat();  if (maxHeat < 0) {    maxHeat=0;  }  Targetable target=alphaStrike.getTarget();  boolean isAero=(shooter instanceof Aero);  int heatTolerance=calcHeatTolerance(shooter,isAero);  FiringPlan[] bestPlans;  if (shooter instanceof Infantry || shooter instanceof BattleArmor) {    bestPlans=new FiringPlan[maxHeat + 4];  } else {    bestPlans=new FiringPlan[maxHeat + 1];  }  bestPlans[0]=new FiringPlan(target);  FiringPlan nonZeroHeatOptions=new FiringPlan(target);  FiringPlan swarmAttack=new FiringPlan(target);  FiringPlan legAttack=new FiringPlan(target);  FiringPlan fieldGuns=new FiringPlan(target);  double fieldGunMassAlreadyFired=0.0;  for (  WeaponFireInfo weaponFireInfo : alphaStrike) {    if (shooter instanceof Infantry || shooter instanceof BattleArmor) {      if (((WeaponType)weaponFireInfo.getWeapon().getType()).getInternalName().equals(Infantry.LEG_ATTACK)) {        legAttack.add(weaponFireInfo);        continue;      } else       if (((WeaponType)weaponFireInfo.getWeapon().getType()).getInternalName().equals(Infantry.SWARM_MEK)) {        swarmAttack.add(weaponFireInfo);        continue;      } else       if (((WeaponType)weaponFireInfo.getWeapon().getType()) instanceof StopSwarmAttack) {        continue;      } else       if (!(shooter instanceof BattleArmor) && weaponFireInfo.getWeapon().getLocation() == Infantry.LOC_FIELD_GUNS) {        double fieldGunMass=weaponFireInfo.getWeapon().getType().getTonnage(shooter);        if (fieldGunMassAlreadyFired + fieldGunMass <= ((Infantry)shooter).getShootingStrength()) {          fieldGuns.add(weaponFireInfo);          fieldGunMassAlreadyFired+=fieldGunMass;        }        continue;      }    }    if (weaponFireInfo.getHeat() == 0) {      bestPlans[0].add(weaponFireInfo);    } else {      nonZeroHeatOptions.add(weaponFireInfo);    }  }  calculateUtility(bestPlans[0],heatTolerance,isAero);  if (shooter instanceof Infantry || shooter instanceof BattleArmor) {    calculateUtility(swarmAttack,heatTolerance,isAero);    calculateUtility(legAttack,heatTolerance,isAero);    calculateUtility(fieldGuns,heatTolerance,isAero);    bestPlans[maxHeat + 1]=swarmAttack;    bestPlans[maxHeat + 2]=legAttack;    bestPlans[maxHeat + 3]=fieldGuns;  }  for (int heatLevel=1; heatLevel <= maxHeat; heatLevel++) {    bestPlans[heatLevel]=new FiringPlan(target);    bestPlans[heatLevel].addAll(bestPlans[heatLevel - 1]);    calculateUtility(bestPlans[heatLevel],heatTolerance,isAero);    for (    WeaponFireInfo weaponFireInfo : nonZeroHeatOptions) {      int leftoverHeatCapacity=heatLevel - weaponFireInfo.getHeat();      if ((leftoverHeatCapacity >= 0) && !bestPlans[leftoverHeatCapacity].containsWeapon(weaponFireInfo.getWeapon())) {        FiringPlan testPlan=new FiringPlan(target);        testPlan.addAll(bestPlans[heatLevel - weaponFireInfo.getHeat()]);        testPlan.add(weaponFireInfo);        calculateUtility(testPlan,heatTolerance,isAero);        if (testPlan.getUtility() > bestPlans[heatLevel].getUtility()) {          bestPlans[heatLevel]=testPlan;        }      }    }  }  return bestPlans;}  }
class C{  public AWTGlyphGeometryCache(int c){  table=new Entry[c];}  }
class C{  public Long decr(final byte[] key){  checkIsInMulti();  client.decr(key);  return client.getIntegerReply();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void addPanListener(PanListener listener){  mTouchHandler.addPanListener(listener);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SWI");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset++));}  }
class C{  public TermsBuilder minDocCount(long minDocCount){  bucketCountThresholds.setMinDocCount(minDocCount);  return this;}  }
class C{  public Matcher useTransparentBounds(boolean b){  transparentBounds=b;  return this;}  }
class C{  public IOException(){}  }
class C{  public void testUnAckedMessageAreNotConsumedOnSessionClose() throws Exception {  connection.start();  dontAck=true;  Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  Queue queue=session.createQueue("test");  MessageProducer producer=session.createProducer(queue);  producer.send(session.createTextMessage("Hello"));  MessageConsumer consumer=session.createConsumer(queue);  consumer.setMessageListener(this);  session.close();  Thread.sleep(10000);  session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  consumer=session.createConsumer(queue);  Message msg=consumer.receive(2000);  assertNotNull(msg);  msg.acknowledge();  session.close();}  }
class C{  public static void record(byte compiler,NormalMethod method,CompiledMethod compiledMethod){  recordCompilation(compiler,method.getBytecodeLength(),compiledMethod.numberOfInstructions(),compiledMethod.getCompilationTime());  if (VM.BuildForAdaptiveSystem) {    if (AOSLogging.logger.booted()) {      AOSLogging.logger.recordUpdatedCompilationRates(compiler,method,method.getBytecodeLength(),totalBCLength[compiler],compiledMethod.numberOfInstructions(),totalMCLength[compiler],compiledMethod.getCompilationTime(),totalCompTime[compiler],totalLogOfRates[compiler],totalLogValueMethods[compiler],totalMethods[compiler]);    }  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TMember.class) {switch (baseOperationID) {case TypesPackage.TMEMBER___GET_MEMBER_ACCESS_MODIFIER:      return TypesPackage.TSTRUCT_FIELD___GET_MEMBER_ACCESS_MODIFIER;case TypesPackage.TMEMBER___IS_STATIC:    return TypesPackage.TSTRUCT_FIELD___IS_STATIC;default :  return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TMemberWithAccessModifier.class) {switch (baseOperationID) {case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER___GET_MEMBER_ACCESS_MODIFIER:return TypesPackage.TSTRUCT_FIELD___GET_MEMBER_ACCESS_MODIFIER;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TField.class) {switch (baseOperationID) {case TypesPackage.TFIELD___IS_STATIC:return TypesPackage.TSTRUCT_FIELD___IS_STATIC;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TStructMember.class) {switch (baseOperationID) {case TypesPackage.TSTRUCT_MEMBER___GET_DEFAULT_MEMBER_ACCESS_MODIFIER:return TypesPackage.TSTRUCT_FIELD___GET_DEFAULT_MEMBER_ACCESS_MODIFIER;case TypesPackage.TSTRUCT_MEMBER___IS_STATIC:return TypesPackage.TSTRUCT_FIELD___IS_STATIC;case TypesPackage.TSTRUCT_MEMBER___GET_MEMBER_ACCESS_MODIFIER:return TypesPackage.TSTRUCT_FIELD___GET_MEMBER_ACCESS_MODIFIER;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public final void checkAccess(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkAccess(this);  }}  }
class C{  void calcMarginalProbabilities(){  int[] values=new int[m_nNodes.length];  int[] order=new int[m_bayesNet.getNrOfNodes()];  m_MarginalP=new double[m_nNodes.length][];  for (int iNode=0; iNode < m_nNodes.length; iNode++) {    order[m_nNodes[iNode]]=iNode;    m_MarginalP[iNode]=new double[m_bayesNet.getCardinality(m_nNodes[iNode])];  }  for (int iPos=0; iPos < m_nCardinality; iPos++) {    int iNodeCPT=getCPT(m_nNodes,m_nNodes.length,values,order,m_bayesNet);    for (int iNode=0; iNode < m_nNodes.length; iNode++) {      m_MarginalP[iNode][values[iNode]]+=m_P[iNodeCPT];    }    int i=0;    values[i]++;    while (i < m_nNodes.length && values[i] == m_bayesNet.getCardinality(m_nNodes[i])) {      values[i]=0;      i++;      if (i < m_nNodes.length) {        values[i]++;      }    }  }  for (int iNode=0; iNode < m_nNodes.length; iNode++) {    m_Margins[m_nNodes[iNode]]=m_MarginalP[iNode];  }}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  public static boolean isAnimated(InputStream source){  final byte[] buffer=new byte[FRAME_HEADER_SIZE];  try {    source.read(buffer,0,FRAME_HEADER_SIZE);    int offset=0;    int frameHeaders=0;    while (source.read(buffer,offset,1) > 0) {      if (circularBufferMatchesBytePattern(buffer,offset + 1,FRAME_HEADER_START) && (circularBufferMatchesBytePattern(buffer,offset + 9,FRAME_HEADER_END_1) || circularBufferMatchesBytePattern(buffer,offset + 9,FRAME_HEADER_END_2))) {        frameHeaders++;        if (frameHeaders > 1) {          return true;        }      }      offset=(offset + 1) % buffer.length;    }  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }  return false;}  }
class C{  private Targetable chooseTarget(Coords pos){  Targetable choice=null;  Iterator<Entity> choices=clientgui.getClient().getGame().getEntities(pos);  List<Targetable> targets=new ArrayList<Targetable>();  while (choices.hasNext()) {    choice=choices.next();    if (!ce().equals(choice)) {      targets.add(choice);    }  }  Building bldg=clientgui.getClient().getGame().getBoard().getBuildingAt(pos);  if (bldg != null) {    targets.add(new BuildingTarget(pos,clientgui.getClient().getGame().getBoard(),false));  }  if (ce().getPosition().equals(pos)) {    Iterator<INarcPod> pods=ce().getINarcPodsAttached();    while (pods.hasNext()) {      choice=pods.next();      targets.add(choice);    }  }  if (targets.size() == 1) {    choice=targets.get(0);  } else   if (targets.size() > 1) {    String input=(String)JOptionPane.showInputDialog(clientgui,Messages.getString("PhysicalDisplay.ChooseTargetDialog.message",new Object[]{pos.getBoardNum()}),Messages.getString("PhysicalDisplay.ChooseTargetDialog.title"),JOptionPane.QUESTION_MESSAGE,null,SharedUtility.getDisplayArray(targets),null);    choice=SharedUtility.getTargetPicked(targets,input);  }  return choice;}  }
class C{  public Rfci(IndependenceTest independenceTest){  if (independenceTest == null || knowledge == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;  this.variables.addAll(independenceTest.getVariables());}  }
class C{  public WeakReference(T r,ReferenceQueue<? super T> q){  super(r,q);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.472 -0400",hash_original_method="D521A7CE64679A779C6680051467F6C8",hash_generated_method="50F30F812F18CCF52365DD659E124B74") protected boolean isValidLine(String line){  return true;}  }
class C{  public DoubleMatrix3D like(int slices,int rows,int columns){  return new SparseDoubleMatrix3D(slices,rows,columns);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:36.318 -0500",hash_original_method="9AC5D8EF15BD7837ACD785C0772615A1",hash_generated_method="8989A8C3AFF2A9F4B72793CB60A6C44F") public void checkAccess(){}  }
class C{  public void writeRaw(final long offset,final ByteBuffer transfer) throws IOException {  if (log.isDebugEnabled())   log.debug("writeRaw: " + offset);  final Lock lock=m_extensionLock.readLock();  lock.lock();  try {    FileChannelUtility.writeAll(m_reopener,transfer,offset);  }  finally {    lock.unlock();  }}  }
class C{  public AutotaggingLibrary(final File autotaggingPath){  this.vocabularies=new ConcurrentHashMap<String,Tagging>();  this.autotaggingPath=autotaggingPath;  this.allTags=new ConcurrentHashMap<String,Object>();  if (this.autotaggingPath == null || !this.autotaggingPath.exists()) {    return;  }  final String[] files=this.autotaggingPath.list();  for (  final String f : files) {    if (f.endsWith(".vocabulary")) {      try {        File ff=new File(this.autotaggingPath,f);        String vocName=ff.getName();        vocName=vocName.substring(0,vocName.length() - 11);        Tagging voc=new Tagging(vocName,ff);        this.vocabularies.put(vocName,voc);        for (        String t : voc.tags()) {          this.allTags.put(t,PRESENT);        }      } catch (      final IOException e) {        log.warn(e.getMessage(),e);      }    }  }}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ZERO_OR_ONE,null));}  }
class C{  public static Map<String,Object> makeValidContext(ModelService model,String mode,Map<String,? extends Object> context) throws GenericServiceException {  Map<String,Object> newContext;  int modeInt=0;  if (mode.equalsIgnoreCase("in")) {    modeInt=1;  } else   if (mode.equalsIgnoreCase("out")) {    modeInt=2;  }  if (model == null) {    throw new GenericServiceException("Model service is null! Should never happen.");  } else {switch (modeInt) {case 2:      newContext=model.makeValid(context,ModelService.OUT_PARAM,true,null);    break;case 1:  newContext=model.makeValid(context,ModelService.IN_PARAM,true,null);break;default :throw new GenericServiceException("Invalid mode, should be either IN or OUT");}return newContext;}}  }
class C{  void clearBufferedImage(BufferedImage image){  int len=image.getHeight() * image.getWidth();  WritableRaster raster=image.getRaster();  int[] data=new int[len];  for (int i=0; i < len; i++) {    data[i]=0;  }  raster.setDataElements(0,0,image.getWidth(),image.getHeight(),data);}  }
class C{  public Boolean isAllowReducedRedundancy(){  return allowReducedRedundancy;}  }
class C{  private void shutdown(){  log("Shutting down capture.");  mAlarmManager.cancel(mCaptureIntent);  stopForeground(true);  mStartTime=0;  broadcastStatus();}  }
class C{  public SoftReference(T referent){  super(referent);  this.timestamp=clock;}  }
class C{  @Override public void removeAttribute(String key){  channel.removeAttribute(key);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getLine() == 0) {    String sql="SELECT COALESCE(MAX(Line),0)+10 FROM GL_DistributionLine WHERE GL_Distribution_ID=?";    int ii=DB.getSQLValue(get_TrxName(),sql,getGL_Distribution_ID());    setLine(ii);  }  if (!isOverwriteAcct() && getAccount_ID() != 0)   setAccount_ID(0);  if (!isOverwriteActivity() && getC_Activity_ID() != 0)   setC_Activity_ID(0);  if (!isOverwriteBPartner() && getC_BPartner_ID() != 0)   setC_BPartner_ID(0);  if (!isOverwriteCampaign() && getC_Campaign_ID() != 0)   setC_Campaign_ID(0);  if (!isOverwriteLocFrom() && getC_LocFrom_ID() != 0)   setC_LocFrom_ID(0);  if (!isOverwriteLocTo() && getC_LocTo_ID() != 0)   setC_LocTo_ID(0);  if (!isOverwriteOrg() && getOrg_ID() != 0)   setOrg_ID(0);  if (!isOverwriteOrgTrx() && getAD_OrgTrx_ID() != 0)   setAD_OrgTrx_ID(0);  if (!isOverwriteProduct() && getM_Product_ID() != 0)   setM_Product_ID(0);  if (!isOverwriteProject() && getC_Project_ID() != 0)   setC_Project_ID(0);  if (!isOverwriteSalesRegion() && getC_SalesRegion_ID() != 0)   setC_SalesRegion_ID(0);  if (!isOverwriteUser1() && getUser1_ID() != 0)   setUser1_ID(0);  if (!isOverwriteUser2() && getUser2_ID() != 0)   setUser2_ID(0);  if (isOverwriteAcct() && getAccount_ID() == 0) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@Account_ID@ = 0"));    return false;  }  if (isOverwriteOrg() && getOrg_ID() == 0) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@Org_ID@ = 0"));    return false;  }  return true;}  }
class C{  private void retrievePostLinkToken(String encodedSharedLink) throws IOException {  final String postFormUrl=this.mShaarliUrl + "?post=" + encodedSharedLink;  Connection.Response postFormPage=this.createShaarliConnection(postFormUrl,false).execute();  final Element postFormBody=postFormPage.parse().body();  this.mToken=postFormBody.select("input[name=token]").first().attr("value");  this.mDatePostLink=postFormBody.select("input[name=lf_linkdate]").first().attr("value");  this.mSharedUrl=postFormBody.select("input[name=lf_url]").first().attr("value");}  }
class C{  @LargeTest public void testAudioTrackLooping() throws Exception {  final String audioFileName=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack",audioFileName);  mVideoEditor.addAudioTrack(audioTrack);  assertFalse("Audio Looping",audioTrack.isLooping());  audioTrack.enableLoop();  assertTrue("Audio Looping",audioTrack.isLooping());  audioTrack.disableLoop();  assertFalse("Audio Looping",audioTrack.isLooping());}  }
class C{  public Dimension minimumLayoutSize(Container container){  int minPrimary=0;  int minSecondary=0;  Insets insets=splitPane.getInsets();  for (int counter=0; counter < 3; counter++) {    if (components[counter] != null) {      Dimension minSize=components[counter].getMinimumSize();      int secSize=getSizeForSecondaryAxis(minSize);      minPrimary+=getSizeForPrimaryAxis(minSize);      if (secSize > minSecondary)       minSecondary=secSize;    }  }  if (insets != null) {    minPrimary+=getSizeForPrimaryAxis(insets,true) + getSizeForPrimaryAxis(insets,false);    minSecondary+=getSizeForSecondaryAxis(insets,true) + getSizeForSecondaryAxis(insets,false);  }  if (axis == 0) {    return new Dimension(minPrimary,minSecondary);  }  return new Dimension(minSecondary,minPrimary);}  }
class C{  public void joinActiveDirectory(String user,String password,String domain,String orgUnit) throws Exception {  getService().joinActiveDirectory(user,password,domain,orgUnit,this.getServiceContext());}  }
class C{  protected TableHolder(CoverageTable ct){  coverageTable=ct;}  }
class C{  public void overwriteCRS(CoordinateReferenceSystem crs){  this.crs=crs;  this.srid=CRSUtils.getSRID(crs);  for (  Zone<?> zone : zones) {    zone.getGeometry().setSRID(srid);  }}  }
class C{  public SymbolTableEntryOriginal basicGetDelegationBaseType(){  return delegationBaseType;}  }
class C{  public boolean reverseAccrualIt(){  log.info("reverseAccrualIt - " + toString());  return false;}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  private Object executeExponent(PageContext pc,SQL sql,Query qr,Operation2 expression,int row) throws PageException {  return Integer.valueOf(Caster.toIntValue(executeExp(pc,sql,qr,expression.getLeft(),row)) ^ Caster.toIntValue(executeExp(pc,sql,qr,expression.getRight(),row)));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.266 -0500",hash_original_method="288EA55C0FFC9E81469649B581E59F71",hash_generated_method="F55F59D5712F53A7811C6D777FB2784B") public SubjectHeader createSubjectHeader(String subject) throws ParseException {  if (subject == null)   throw new NullPointerException("null subject arg");  Subject s=new Subject();  s.setSubject(subject);  return s;}  }
class C{  private void selectAndForward(SelectAndForwardRequest body,Operation op,NodeGroupState localState){  String keyValue=body.key != null ? body.key : body.targetPath;  SelectOwnerResponse response=new SelectOwnerResponse();  response.key=keyValue;  body.associatedOp=op;  if (queueRequestIfNodeGroupIsUnavailable(localState,body)) {    return;  }  if (this.cachedState.replicationFactor == null && body.options != null && body.options.contains(ForwardingOption.BROADCAST)) {    response.selectedNodes=localState.nodes.values();    if (body.options.contains(ForwardingOption.REPLICATE)) {      replicateRequest(op,body,response);      return;    }    broadcast(op,body,response);    return;  }  selectNodes(op,response,localState);  if (body.targetPath == null) {    op.setBodyNoCloning(response).complete();    return;  }  if (body.options != null && body.options.contains(ForwardingOption.BROADCAST)) {    if (body.options.contains(ForwardingOption.REPLICATE)) {      if (op.getAction() == Action.DELETE) {        response.selectedNodes=localState.nodes.values();      }      replicateRequest(op,body,response);    } else {      broadcast(op,body,response);    }    return;  }  URI remoteService=UriUtils.buildUri(response.ownerNodeGroupReference.getScheme(),response.ownerNodeGroupReference.getHost(),response.ownerNodeGroupReference.getPort(),body.targetPath,body.targetQuery);  Operation fwdOp=op.clone().setCompletion(null);  getHost().getClient().send(fwdOp.setUri(remoteService));}  }
class C{  public boolean isFdr(){  return fdr;}  }
class C{  public static void openFileIntent(Context context,File openFile){  if (context != null && openFile.exists()) {    try {      Intent intent=getFileIntent(context,openFile);      context.startActivity(intent);    } catch (    Exception e) {      GlobalUtils.logThis(TAG,"openFileIntent Exception",e);    }  }}  }
class C{  public AtomicTypePanel(final Component parent,final TypeManager typeManager,final BaseType existingType){  super(parent,typeManager,existingType);  createControls();  populateControls();}  }
class C{  public FilterParseException(String message){  super(message);}  }
class C{  public static void divideRowBy(Matrix matrix,long aRow,long fromCol,double value){  long cols=matrix.getColumnCount();  for (long col=fromCol; col < cols; col++) {    matrix.setAsDouble(matrix.getAsDouble(aRow,col) / value,aRow,col);  }}  }
class C{  protected final void preInsertHook(){  if (hashIndexSetProperties.size > hashIndexSetProperties.maxSize || hashIndexSetProperties.free == 0 || TEST_ALWAYS_REHASH) {    rehash(arraySize(hashIndexSetProperties.size + 1,_loadFactor));    computeMaxSize(capacity(),_loadFactor);    hashIndexSetProperties.free=hashIndexSetProperties.computeNumFree();  } else   if (hashIndexSetProperties.removedTokens > hashIndexSetProperties.maxSize * CONDITIONAL_REMOVED_TOKEN_REHASH_FACTOR) {    compact();  }}  }
class C{  public void destroy(){  this.filterConfig=null;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_AD_FORMAT_UNSIGNED_INT8:    return "CU_AD_FORMAT_UNSIGNED_INT8";case CU_AD_FORMAT_UNSIGNED_INT16:  return "CU_AD_FORMAT_UNSIGNED_INT16";case CU_AD_FORMAT_UNSIGNED_INT32:return "CU_AD_FORMAT_UNSIGNED_INT32";case CU_AD_FORMAT_SIGNED_INT8:return "CU_AD_FORMAT_SIGNED_INT8";case CU_AD_FORMAT_SIGNED_INT16:return "CU_AD_FORMAT_SIGNED_INT16";case CU_AD_FORMAT_SIGNED_INT32:return "CU_AD_FORMAT_SIGNED_INT32";case CU_AD_FORMAT_HALF:return "CU_AD_FORMAT_HALF";case CU_AD_FORMAT_FLOAT:return "CU_AD_FORMAT_FLOAT";}return "INVALID CUarray_format: " + n;}  }
class C{  public QueryFirstResponse clone(){  QueryFirstResponse result=new QueryFirstResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  if (QueryDataSets != null) {    result.QueryDataSets=new QueryDataSet[QueryDataSets.length];    for (int i=0; i < QueryDataSets.length; i++)     result.QueryDataSets[i]=QueryDataSets[i].clone();  }  result.ContinuationPoint=ContinuationPoint;  if (ParsingResults != null) {    result.ParsingResults=new ParsingResult[ParsingResults.length];    for (int i=0; i < ParsingResults.length; i++)     result.ParsingResults[i]=ParsingResults[i].clone();  }  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  result.FilterResult=FilterResult == null ? null : FilterResult.clone();  return result;}  }
class C{  void showInterstitialNotification(){  NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  CharSequence from="Dianne";  CharSequence message;switch ((new Random().nextInt()) % 3) {case 0:    message="i am ready for some dinner";  break;case 1:message="how about thai down the block?";break;default :message="meet u soon. dont b late!";break;}Intent intent=new Intent(this,IncomingMessageInterstitial.class);intent.putExtra(IncomingMessageView.KEY_FROM,from);intent.putExtra(IncomingMessageView.KEY_MESSAGE,message);intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);PendingIntent contentIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_CANCEL_CURRENT);String tickerText=getString(R.string.imcoming_message_ticker_text,message);Notification.Builder notifBuilder=new Notification.Builder(this).setSmallIcon(R.drawable.stat_sample).setTicker(tickerText).setWhen(System.currentTimeMillis()).setContentTitle(from).setContentText(message).setContentIntent(contentIntent);notifBuilder.setDefaults(Notification.DEFAULT_ALL);nm.notify(R.string.imcoming_message_ticker_text,notifBuilder.build());}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",Integer.valueOf(source.length),Integer.valueOf(srcOffset)));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",Integer.valueOf(destination.length),Integer.valueOf(destOffset)));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public DTMIterator createDTMIterator(int whatToShow,DTMFilter filter,boolean entityReferenceExpansion){  return m_dtmManager.createDTMIterator(whatToShow,filter,entityReferenceExpansion);}  }
class C{  @Override public Object copy(){  return new BinarySparseInstance(this);}  }
class C{  public void append(CSSSACMediaQuery item){  if (item == null)   item=QUERY_NOT_ALL;  if (length == list.length) {    CSSSACMediaQuery[] tmp=list;    list=new CSSSACMediaQuery[1 + list.length + list.length / 2];    System.arraycopy(tmp,0,list,0,tmp.length);  }  list[length++]=item;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TFUNCTION___IS_CALLABLE_CONSTRUCTOR:    return isCallableConstructor();case TypesPackage.TFUNCTION___GET_FPAR_FOR_ARG_IDX__INT:  return getFparForArgIdx((Integer)arguments.get(0));case TypesPackage.TFUNCTION___GET_FUNCTION_AS_STRING:return getFunctionAsString();case TypesPackage.TFUNCTION___IS_FINAL:return isFinal();}return super.eInvoke(operationID,arguments);}  }
class C{  private void checkBasecodeOption() throws jplag.ExitException {  if (useBasecode) {    if (basecode == null || basecode.equals("")) {      throw new ExitException("Basecode option used but none " + "specified!",ExitException.BAD_PARAMETER);    }    String baseC=root_dir + File.separator + basecode;    if (!(new File(root_dir)).exists()) {      throw new ExitException("Root directory \"" + root_dir + "\" doesn't exist!",ExitException.BAD_PARAMETER);    }    File f=new File(baseC);    if (!f.exists()) {      throw new ExitException("Basecode directory \"" + baseC + "\" doesn't exist!",ExitException.BAD_PARAMETER);    }    if (sub_dir != null && sub_dir.length() != 0) {      f=new File(baseC,sub_dir);      if (!f.exists()) {        throw new ExitException("Basecode directory doesn't contain" + " the subdirectory \"" + sub_dir + "\"!",ExitException.BAD_PARAMETER);      }    }    System.out.println("Basecode directory \"" + baseC + "\" will be used");  }}  }
class C{  protected static void storeProperty(final String propertyKey,final String propertyValue,final String fileName) throws ServerException {  String filePath=Paths.get(fileName).toAbsolutePath().toString();  Properties properties=new Properties();  try (FileInputStream in=new FileInputStream(filePath)){    properties.load(in);  } catch (  IOException e) {    LOG.error(e.getLocalizedMessage());    throw new ServerException(e.getLocalizedMessage());  }  try (FileOutputStream out=new FileOutputStream(fileName)){    properties.setProperty(propertyKey,propertyValue);    properties.store(out,null);  } catch (  IOException e) {    LOG.error(e.getLocalizedMessage());    throw new ServerException(e.getLocalizedMessage());  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.699 -0500",hash_original_method="5570DD5E3DA486C8E4D5DC9CDBA5E092",hash_generated_method="B73400D0D4481274464946AB0B36C034") public static long min(long l1,long l2){  return l1 < l2 ? l1 : l2;}  }
class C{  public boolean areMutableImagesFast(){  return impl.areMutableImagesFast();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.STRING_EXPR___NAME_1:    return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.STRING_EXPR___EQUALITY_OP_1:  return equalityOp_1 != null && !equalityOp_1.isEmpty();case UmplePackage.STRING_EXPR___STRING_LIT_1:return stringLit_1 != null && !stringLit_1.isEmpty();case UmplePackage.STRING_EXPR___INDEX_1:return INDEX_1_EDEFAULT == null ? index_1 != null : !INDEX_1_EDEFAULT.equals(index_1);}return super.eIsSet(featureID);}  }
class C{  @Override public boolean offer(final T data){  if (!open)   throw new ClosedQueueException();  try {    final boolean result=producerWait.offer(null);    if (sizeSignal != null)     this.sizeSignal.set(queue.size());    return result;  } catch (  final InterruptedException e) {    Thread.currentThread().interrupt();    throw ExceptionSoftener.throwSoftenedException(e);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void leftShift(ObjectOutputStream self,Object value) throws IOException {  self.writeObject(value);}  }
class C{  public void testGetF16(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF16();  assertEquals(expResult,result);}  }
class C{  @Override protected void loadCoreListeners(){  final PlansScoring plansScoring=createPlansScoring();  this.addControlerListener(plansScoring);  final StrategyManager strategyManager=createStrategyManager();  throw new RuntimeException("This doesn't work anymore. Come to MZ, who will gladly help you repair it.");}  }
class C{  public OrderedThreadPoolExecutor(int maximumPoolSize){  this(DEFAULT_INITIAL_THREAD_POOL_SIZE,maximumPoolSize,DEFAULT_KEEP_ALIVE,TimeUnit.SECONDS,Executors.defaultThreadFactory(),null);}  }
class C{  private void registerTopScript(DebuggableScript topScript,String source){  if (!topScript.isTopLevel()) {    throw new IllegalArgumentException();  }  String url=getNormalizedUrl(topScript);  DebuggableScript[] functions=getAllFunctions(topScript);  if (sourceProvider != null) {    final String providedSource=sourceProvider.getSource(topScript);    if (providedSource != null) {      source=providedSource;    }  }  final SourceInfo sourceInfo=new SourceInfo(source,functions,url);synchronized (urlToSourceInfo) {    SourceInfo old=urlToSourceInfo.get(url);    if (old != null) {      sourceInfo.copyBreakpointsFrom(old);    }    urlToSourceInfo.put(url,sourceInfo);    for (int i=0; i != sourceInfo.functionSourcesTop(); ++i) {      FunctionSource fsource=sourceInfo.functionSource(i);      String name=fsource.name();      if (name.length() != 0) {        functionNames.put(name,fsource);      }    }  }synchronized (functionToSource) {    for (int i=0; i != functions.length; ++i) {      FunctionSource fsource=sourceInfo.functionSource(i);      functionToSource.put(functions[i],fsource);    }  }  callback.updateSourceText(sourceInfo);}  }
class C{  @SuppressLint("SetJavaScriptEnabled") public static void enableJavaScript(WebView webView,boolean enabled){  if (webView != null) {    webView.getSettings().setJavaScriptEnabled(enabled);  }}  }
class C{  public void forceGrantorRecovery(String serviceName){synchronized (this) {    GrantorInfo gi=(GrantorInfo)this.nameToInfo.get(serviceName);    if (gi.isInitiatingTransfer()) {      throw new IllegalStateException(LocalizedStrings.ElderState_CANNOT_FORCE_GRANTOR_RECOVERY_FOR_GRANTOR_THAT_IS_TRANSFERRING.toLocalizedString());    }    this.nameToInfo.put(serviceName,new GrantorInfo(gi.getId(),gi.getVersionId(),gi.getSerialNumber(),true));  }}  }
class C{  public final byte[] allocReadIOBuffer(){  if (_readIOBuffer != null) {    throw new IllegalStateException("Trying to call allocReadIOBuffer() second time");  }  _readIOBuffer=_bufferRecycler.allocByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER);  return _readIOBuffer;}  }
class C{  public void addHelpMenu(String ref,boolean direct){  JMenuBar bar=getJMenuBar();  if (bar == null) {    bar=new JMenuBar();  }  bar.add(new WindowMenu(this));  jmri.util.HelpUtil.helpMenu(bar,ref,direct);  setJMenuBar(bar);}  }
class C{  private ImageView createBlankSpace(){  ImageView view=new ImageView(getContext());  TableRow.LayoutParams params=new TableRow.LayoutParams(mSwatchLength,mSwatchLength);  params.setMargins(mMarginSize,mMarginSize,mMarginSize,mMarginSize);  view.setLayoutParams(params);  return view;}  }
class C{  public JSONStringer key(String s) throws JSONException {  if (s == null) {    throw new JSONException("Null key.");  }  if (this.mode == 'k') {    if (this.comma) {      this.sb.append(',');    }    this.sb.append(JSONObject.quote(s));    this.sb.append(':');    this.comma=false;    this.mode='o';    return this;  }  throw new JSONException("Misplaced key.");}  }
class C{  private static void deleteTask(Taskqueue taskQueue,Task task) throws IOException {  System.out.println("Deleting task:" + task.getId());  String DeletePrefix="s~";  String projectIdFormattedForDelete=String.format("%s%s",DeletePrefix,projectId);  Taskqueue.Tasks.Delete request=taskQueue.tasks().delete(projectIdFormattedForDelete,taskQueueName,task.getId());  request.execute();}  }
class C{  public Message onMessage(final Message message,final String type,final String tenant,final String virtualHost){  checkContentTypeJson(message);  final SecurityContext oldContext=SecurityContextHolder.getContext();  try {    final MessageType messageType=MessageType.valueOf(type);switch (messageType) {case THING_CREATED:      setTenantSecurityContext(tenant);    registerTarget(message,virtualHost);  break;case EVENT:setTenantSecurityContext(tenant);final String topicValue=getStringHeaderKey(message,MessageHeaderKey.TOPIC,"EventTopic is null");final EventTopic eventTopic=EventTopic.valueOf(topicValue);handleIncomingEvent(message,eventTopic);break;default :logAndThrowMessageError(message,"No handle method was found for the given message type.");}} catch (final IllegalArgumentException ex) {throw new AmqpRejectAndDontRequeueException("Invalid message!",ex);}catch (final TenantNotExistException|TooManyStatusEntriesException e) {throw new AmqpRejectAndDontRequeueException(e);} finally {SecurityContextHolder.setContext(oldContext);}return null;}  }
class C{  public static void assertInstanceOf(Class<?> expectedClassType,Object actualObject){  try {    Verify.assertInstanceOf(actualObject.getClass().getName(),expectedClassType,actualObject);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public static void removeExplorerProps(String installedPackageName){  try {    Properties expProps=new Properties();    String explorerProps=getPackageHome().getAbsolutePath() + File.separator + installedPackageName+ File.separator+ "Explorer.props";    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(explorerProps));    expProps.load(bi);    bi.close();    bi=null;    Set<Object> keys=expProps.keySet();    Iterator<Object> keysI=keys.iterator();    while (keysI.hasNext()) {      String key=(String)keysI.next();      if (!key.endsWith("Policy")) {        String existingVal=ExplorerDefaults.get(key,"");        String toRemove=expProps.getProperty(key);        if (existingVal.length() > 0) {          existingVal=existingVal.replace(toRemove + ",","");          existingVal=existingVal.replace("," + toRemove,"");          ExplorerDefaults.set(key,existingVal);        }      }    }  } catch (  Exception ex) {  }}  }
class C{  public static PropertyValuesHolder ofInt(String propertyName,int... values){  return new IntPropertyValuesHolder(propertyName,values);}  }
class C{  public ObjectReader withType(java.lang.reflect.Type valueType){  return withType(_config.getTypeFactory().constructType(valueType));}  }
class C{  public String toString(){  return image;}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TFloatLongHashMap)) {    return false;  }  TFloatLongHashMap that=(TFloatLongHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  protected void doExtended(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.414 -0500",hash_original_method="45E7CB171B397E7ACAF01FE08BEFF46E",hash_generated_method="4ABBE9BFD747132A545B2A21176E1B5C") protected void finalize(){}  }
class C{  public void init() throws ServletException {}  }
class C{  private void align() throws Exception {  int require=names.size();  int size=indexes.size();  if (require > size) {    indexes.add(1);  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="FE_FLOATING_POINT_EQUALITY") public void notifyChangedSlot(LocoNetSlot pSlot){  if (slot != pSlot) {    log.error("notified of change in different slot");  }  layout_spd=slot.speed();  layout_dirf=slot.dirf();  layout_snd=slot.snd();  if (this.speedSetting != floatSpeed(slot.speed())) {    Float newSpeed=Float.valueOf(floatSpeed(slot.speed()));    log.debug("notifyChangedSlot: old speed: " + this.speedSetting + " new Speed: "+ newSpeed);    notifyPropertyChangeListener("SpeedSetting",Float.valueOf(this.speedSetting),newSpeed);    this.speedSetting=newSpeed.floatValue();  }  boolean temp;  if (this.isForward != slot.isForward()) {    temp=this.isForward;    this.isForward=slot.isForward();    notifyPropertyChangeListener("IsForward",Boolean.valueOf(temp),Boolean.valueOf(slot.isForward()));  }  if (slotStatus != slot.slotStatus()) {    int newStat=slot.slotStatus();    if (log.isDebugEnabled()) {      log.debug("Slot status changed from " + LnConstants.LOCO_STAT(slotStatus) + " to "+ LnConstants.LOCO_STAT(newStat));    }    notifyPropertyChangeListener("ThrottleConnected",(slotStatus & LnConstants.LOCOSTAT_MASK) == LnConstants.LOCO_IN_USE,!((slotStatus & LnConstants.LOCOSTAT_MASK) == LnConstants.LOCO_IN_USE));    slotStatus=newStat;  }  if (slot == null) {    return;  }  if (this.f0 != slot.isF0()) {    temp=this.f0;    this.f0=slot.isF0();    notifyPropertyChangeListener(Throttle.F0,Boolean.valueOf(temp),Boolean.valueOf(slot.isF0()));  }  if (this.f1 != slot.isF1()) {    temp=this.f1;    this.f1=slot.isF1();    notifyPropertyChangeListener(Throttle.F1,Boolean.valueOf(temp),Boolean.valueOf(slot.isF1()));  }  if (this.f2 != slot.isF2()) {    temp=this.f2;    this.f2=slot.isF2();    notifyPropertyChangeListener(Throttle.F2,Boolean.valueOf(temp),Boolean.valueOf(slot.isF2()));  }  if (this.f3 != slot.isF3()) {    temp=this.f3;    this.f3=slot.isF3();    notifyPropertyChangeListener(Throttle.F3,Boolean.valueOf(temp),Boolean.valueOf(slot.isF3()));  }  if (this.f4 != slot.isF4()) {    temp=this.f4;    this.f4=slot.isF4();    notifyPropertyChangeListener(Throttle.F4,Boolean.valueOf(temp),Boolean.valueOf(slot.isF4()));  }  if (this.f5 != slot.isF5()) {    temp=this.f5;    this.f5=slot.isF5();    notifyPropertyChangeListener(Throttle.F5,Boolean.valueOf(temp),Boolean.valueOf(slot.isF5()));  }  if (this.f6 != slot.isF6()) {    temp=this.f6;    this.f6=slot.isF6();    notifyPropertyChangeListener(Throttle.F6,Boolean.valueOf(temp),Boolean.valueOf(slot.isF6()));  }  if (this.f7 != slot.isF7()) {    temp=this.f7;    this.f7=slot.isF7();    notifyPropertyChangeListener(Throttle.F7,Boolean.valueOf(temp),Boolean.valueOf(slot.isF7()));  }  if (this.f8 != slot.isF8()) {    temp=this.f8;    this.f8=slot.isF8();    notifyPropertyChangeListener(Throttle.F8,Boolean.valueOf(temp),Boolean.valueOf(slot.isF8()));  }  if (this.f9 != slot.isF9()) {    temp=this.f9;    this.f9=slot.isF9();    notifyPropertyChangeListener(Throttle.F9,Boolean.valueOf(temp),Boolean.valueOf(slot.isF9()));  }  if (this.f10 != slot.isF10()) {    temp=this.f10;    this.f10=slot.isF10();    notifyPropertyChangeListener(Throttle.F10,Boolean.valueOf(temp),Boolean.valueOf(slot.isF10()));  }  if (this.f11 != slot.isF11()) {    temp=this.f11;    this.f11=slot.isF11();    notifyPropertyChangeListener(Throttle.F11,Boolean.valueOf(temp),Boolean.valueOf(slot.isF11()));  }  if (this.f12 != slot.isF12()) {    temp=this.f12;    this.f12=slot.isF12();    notifyPropertyChangeListener(Throttle.F12,Boolean.valueOf(temp),Boolean.valueOf(slot.isF12()));  }  if (this.f13 != slot.isF13()) {    temp=this.f13;    this.f13=slot.isF13();    notifyPropertyChangeListener(Throttle.F13,Boolean.valueOf(temp),Boolean.valueOf(slot.isF13()));  }  if (this.f14 != slot.isF14()) {    temp=this.f14;    this.f14=slot.isF14();    notifyPropertyChangeListener(Throttle.F14,Boolean.valueOf(temp),Boolean.valueOf(slot.isF14()));  }  if (this.f15 != slot.isF15()) {    temp=this.f15;    this.f15=slot.isF15();    notifyPropertyChangeListener(Throttle.F15,Boolean.valueOf(temp),Boolean.valueOf(slot.isF15()));  }  if (this.f16 != slot.isF16()) {    temp=this.f16;    this.f16=slot.isF16();    notifyPropertyChangeListener(Throttle.F16,Boolean.valueOf(temp),Boolean.valueOf(slot.isF16()));  }  if (this.f17 != slot.isF17()) {    temp=this.f17;    this.f17=slot.isF17();    notifyPropertyChangeListener(Throttle.F17,Boolean.valueOf(temp),Boolean.valueOf(slot.isF17()));  }  if (this.f18 != slot.isF18()) {    temp=this.f18;    this.f18=slot.isF18();    notifyPropertyChangeListener(Throttle.F18,Boolean.valueOf(temp),Boolean.valueOf(slot.isF18()));  }  if (this.f19 != slot.isF19()) {    temp=this.f19;    this.f19=slot.isF19();    notifyPropertyChangeListener(Throttle.F19,Boolean.valueOf(temp),Boolean.valueOf(slot.isF19()));  }  if (this.f20 != slot.isF20()) {    temp=this.f20;    this.f20=slot.isF20();    notifyPropertyChangeListener(Throttle.F20,Boolean.valueOf(temp),Boolean.valueOf(slot.isF20()));  }  if (this.f21 != slot.isF21()) {    temp=this.f21;    this.f21=slot.isF21();    notifyPropertyChangeListener(Throttle.F21,Boolean.valueOf(temp),Boolean.valueOf(slot.isF21()));  }  if (this.f22 != slot.isF22()) {    temp=this.f22;    this.f22=slot.isF22();    notifyPropertyChangeListener(Throttle.F22,Boolean.valueOf(temp),Boolean.valueOf(slot.isF22()));  }  if (this.f23 != slot.isF23()) {    temp=this.f23;    this.f23=slot.isF23();    notifyPropertyChangeListener(Throttle.F23,Boolean.valueOf(temp),Boolean.valueOf(slot.isF23()));  }  if (this.f24 != slot.isF24()) {    temp=this.f24;    this.f24=slot.isF24();    notifyPropertyChangeListener(Throttle.F24,Boolean.valueOf(temp),Boolean.valueOf(slot.isF24()));  }  if (this.f25 != slot.isF25()) {    temp=this.f25;    this.f25=slot.isF25();    notifyPropertyChangeListener(Throttle.F25,Boolean.valueOf(temp),Boolean.valueOf(slot.isF25()));  }  if (this.f26 != slot.isF26()) {    temp=this.f26;    this.f26=slot.isF26();    notifyPropertyChangeListener(Throttle.F26,Boolean.valueOf(temp),Boolean.valueOf(slot.isF26()));  }  if (this.f27 != slot.isF27()) {    temp=this.f27;    this.f27=slot.isF27();    notifyPropertyChangeListener(Throttle.F27,Boolean.valueOf(temp),Boolean.valueOf(slot.isF27()));  }  if (this.f28 != slot.isF28()) {    temp=this.f28;    this.f28=slot.isF28();    notifyPropertyChangeListener(Throttle.F28,Boolean.valueOf(temp),Boolean.valueOf(slot.isF28()));  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.ASSIGNMENT_EXPRESSION__VAR_REF:    setVarRef((Expression)null);  return;case ExpressionsPackage.ASSIGNMENT_EXPRESSION__OPERATOR:setOperator(OPERATOR_EDEFAULT);return;case ExpressionsPackage.ASSIGNMENT_EXPRESSION__EXPRESSION:setExpression((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public Object findInjectableValue(DeserializationContext context,Object beanInstance){  if (_injectableValueId == null) {    throw new IllegalStateException("Property '" + getName() + "' (type "+ getClass().getName()+ ") has no injectable value id configured");  }  return context.findInjectableValue(_injectableValueId,this,beanInstance);}  }
class C{  private void checkParser(){  if (iParser == null) {    throw new UnsupportedOperationException("Parsing not supported");  }}  }
class C{  public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass){  return CollectionType.construct(collectionClass,unknownType());}  }
class C{  public static boolean predicate(String jsonpath,Object data){  if (jsonpath == null || jsonpath.trim().isEmpty()) {    return false;  }  String json=serialize(data);  if (json != null) {    Object result=JsonPath.parse(json).read(jsonpath);    if (result != null) {      if (result.getClass() == Boolean.class) {        return (Boolean)result;      } else       if (result.getClass() == String.class) {        return Boolean.valueOf((String)result);      } else       if (result.getClass() == JSONArray.class) {        return !((JSONArray)result).isEmpty();      }    }  }  return false;}  }
class C{  @Override public byte[] qualityData(){  return mLeft ? mLeftQuality : mRightQuality;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:50.444 -0500",hash_original_method="1B0888B6F2590EE27349101E4345456E",hash_generated_method="2DF0FFA4A93FF56C0F67A3426C6CBE19") public String readLine(){  try {    return reader.readLine();  } catch (  IOException e) {    throw new IOError(e);  }}  }
class C{  public boolean isCurrentFilter(long filterVersion){  if (filterVersion < stmtFilterVersion) {    if (filterVersion + 100000 < stmtFilterVersion && stmtFilterVersion != Long.MAX_VALUE) {      stmtFilterVersion=filterVersion;    }    return false;  }  return true;}  }
class C{  public ServiceCompatibilityException(String message,Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());  bean.setReason(reason);}  }
class C{  @SuppressWarnings("unchecked") public void putEncodeable(String fieldName,IEncodeable s) throws EncodingException {  Class<IEncodeable> clazz=(Class<IEncodeable>)s.getClass();  ctx.encodeableSerializer.calcEncodeable(clazz,s,this);}  }
class C{  protected void paintVerticalLine(Graphics g,JComponent c,int x,int top,int bottom){  if (lineTypeDashed) {    drawDashedVerticalLine(g,x,top,bottom);  } else {    g.drawLine(x,top,x,bottom);  }}  }
class C{  private void processAnnotations(){  try {    Map<String,String> annotations=AnnotationUtil.parseAnnotations(step_description);    if (annotations.containsKey(JobStepAnnotations.RUN_IN_PARALLEL.name())) {      run_in_parallel=AnnotationUtil.parseValue(JobStepAnnotations.RUN_IN_PARALLEL,annotations.get(JobStepAnnotations.RUN_IN_PARALLEL.name()),Boolean.class);    }    if (annotations.containsKey(JobStepAnnotations.JOB_STEP_TIMEOUT.name())) {      job_step_timeout=AnnotationUtil.parseValue(JobStepAnnotations.JOB_STEP_TIMEOUT,annotations.get(JobStepAnnotations.JOB_STEP_TIMEOUT.name()),Long.class);    }    if (annotations.containsKey(JobStepAnnotations.DATABASE_NAME.name())) {      database_name=AnnotationUtil.parseValue(JobStepAnnotations.DATABASE_NAME,annotations.get(JobStepAnnotations.DATABASE_NAME.name()),String.class);    }    if (annotations.containsKey(JobStepAnnotations.DATABASE_HOST.name())) {      database_host=AnnotationUtil.parseValue(JobStepAnnotations.DATABASE_HOST,annotations.get(JobStepAnnotations.DATABASE_HOST.name()),String.class);    }    if (annotations.containsKey(JobStepAnnotations.DATABASE_LOGIN.name())) {      database_login=AnnotationUtil.parseValue(JobStepAnnotations.DATABASE_LOGIN,annotations.get(JobStepAnnotations.DATABASE_LOGIN.name()),String.class);    }    if (annotations.containsKey(JobStepAnnotations.DATABASE_PASSWORD.name())) {      database_password=AnnotationUtil.parseValue(JobStepAnnotations.DATABASE_PASSWORD,annotations.get(JobStepAnnotations.DATABASE_PASSWORD.name()),String.class);    }    if (annotations.containsKey(JobStepAnnotations.DATABASE_AUTH_QUERY.name())) {      database_auth_query=AnnotationUtil.parseValue(JobStepAnnotations.DATABASE_AUTH_QUERY,annotations.get(JobStepAnnotations.DATABASE_AUTH_QUERY.name()),String.class);    }    if (annotations.containsKey(JobStepAnnotations.EMAIL_ON.name())) {      for (      String email_on_string : AnnotationUtil.parseValue(JobStepAnnotations.EMAIL_ON,annotations.get(JobStepAnnotations.EMAIL_ON.name()),String.class).split(";")) {        email_on.add(StepStatus.valueOf(email_on_string));      }    }    if (annotations.containsKey(JobStepAnnotations.EMAIL_TO.name())) {      email_to=AnnotationUtil.parseValue(JobStepAnnotations.EMAIL_TO,annotations.get(JobStepAnnotations.EMAIL_TO.name()),String.class).split(";");    }    if (annotations.containsKey(JobStepAnnotations.EMAIL_SUBJECT.name())) {      email_subject=AnnotationUtil.parseValue(JobStepAnnotations.EMAIL_SUBJECT,annotations.get(JobStepAnnotations.EMAIL_SUBJECT.name()),String.class);    }    if (annotations.containsKey(JobStepAnnotations.EMAIL_BODY.name())) {      email_body=AnnotationUtil.parseValue(JobStepAnnotations.EMAIL_BODY,annotations.get(JobStepAnnotations.EMAIL_BODY.name()),String.class);    }  } catch (  Exception e) {    Config.INSTANCE.logger.error("An issue with the annotations on job_id/job_step_id: " + job.getJobId() + "/"+ step_id+ "  has stopped them from being processed.");  }  Config.INSTANCE.logger.debug("JobStep instantiation complete.");}  }
class C{  public String formatStringToFixedLength(String str,final int fixedLength){  if (LOGGER.isInfoEnabled())   LOGGER.info("insidde formatStringToFixedLength");  str=str == null ? "&nbsp;" : str.trim().equalsIgnoreCase("") ? "&nbsp;" : str;  if (str.equalsIgnoreCase("&nbsp;") || str.length() <= fixedLength)   return str;  int sIndex=0;  String formattedString="";  while (sIndex < str.length()) {    if (sIndex + fixedLength >= str.length())     formattedString=formattedString + str.substring(sIndex,str.length()); else     formattedString=formattedString + str.substring(sIndex,sIndex + fixedLength) + "<BR>";    sIndex=sIndex + fixedLength;  }  return formattedString;}  }
class C{  private void deriveCastsFromVarchar(){  final TClass COMMON=MString.VARCHAR;  Set<TClass> tClasses=castsBySource.keySet();  for (  Map.Entry<TClass,Map<TClass,TCast>> entry : castsBySource.entrySet()) {    TClass source=entry.getKey();    Map<TClass,TCast> castsByTarget=entry.getValue();    for (    TClass target : tClasses) {      if (target == source || castsByTarget.containsKey(target))       continue;      TCast sourceToVarchar=cast(source,COMMON);      if (sourceToVarchar == null)       continue;      TCast varcharToTarget=cast(COMMON,target);      if (varcharToTarget == null)       continue;      TCast derived=new ChainedCast(sourceToVarchar,varcharToTarget);      castsByTarget.put(target,derived);    }  }}  }
class C{  public BigInteger generateBlindingFactor(){  if (key == null) {    throw new IllegalStateException("generator not initialised");  }  BigInteger m=key.getModulus();  int length=m.bitLength() - 1;  BigInteger factor;  BigInteger gcd;  do {    factor=new BigInteger(length,random);    gcd=factor.gcd(m);  } while (factor.equals(ZERO) || factor.equals(ONE) || !gcd.equals(ONE));  return factor;}  }
class C{  private void updateView(){  if (rebuildItems()) {    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);    layout(getWidth(),getHeight());  }}  }
class C{  static JFrame prepare(JFrame frame){  if (frame == null) {    GraphicsConfiguration gc=MouseInfo.getPointerInfo().getDevice().getDefaultConfiguration();    frame=new JFrame(gc);    frame.setLocationByPlatform(true);  }  setTitle(frame);  setIcon(frame);  WindowUtils.trackLocation(frame,"main",true);  frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);  WindowUtils.closeOnEscape(frame);  return frame;}  }
class C{  public ClassPathResource(String mimetype,String path){  this(ClassPathResource.class.getClassLoader(),mimetype,path);}  }
class C{  private void establishTransactionalWriter(){  tWriter=(TransactionalWriter)provider.getRowSetWriter();}  }
class C{  private void readObject(final java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (m_currentStepMutex == null) {    m_currentStepMutex=new Object();  }}  }
class C{  private static double Internalgamma(double z){  double sum=0.0;  double[] c={1.0,0.5772156649015329,-0.6558780715202538,-0.0420026350340952,0.1665386113822915,-0.0421977345555443,-0.0096219715278770,0.0072189432466630,-0.0011651675918591,-0.0002152416741149,0.0001280502823882,-0.0000201348547807,-0.0000012504934821,0.0000011330272320,-0.0000002056338417,0.0000000061160950,0.0000000050020075,-0.0000000011812746,0.0000000001043427,0.0000000000077823,-0.0000000000036968,0.0000000000005100,-0.0000000000000206,-0.0000000000000054,0.0000000000000014,0.0000000000000001};  for (int i=0; i < c.length; i++) {    sum+=c[i] * Math.pow(z,(double)(i + 1));  }  return (1.0 / sum);}  }
class C{  protected Resource parseCollection() throws IOException, RDFParseException, RDFHandlerException {  verifyCharacterOrFail(readCodePoint(),"(");  int c=skipWSC();  if (c == ')') {    readCodePoint();    return RDF.NIL;  } else {    BNode listRoot=createBNode();    Resource oldSubject=subject;    IRI oldPredicate=predicate;    subject=listRoot;    predicate=RDF.FIRST;    parseObject();    BNode bNode=listRoot;    while (skipWSC() != ')') {      BNode newNode=createBNode();      reportStatement(bNode,RDF.REST,newNode);      subject=bNode=newNode;      parseObject();    }    readCodePoint();    reportStatement(bNode,RDF.REST,RDF.NIL);    subject=oldSubject;    predicate=oldPredicate;    return listRoot;  }}  }
class C{  public void testMultiplePartitionsWithStatementPattern(){  final StatementPatternNode spn1=stmtPatternWithVar("x1");  final StatementPatternNode spn2=stmtPatternWithVar("x2");  final StatementPatternNode spn3Opt=stmtPatternWithVarOptional("x3");  final StatementPatternNode spn4=stmtPatternWithVar("x4");  final StatementPatternNode spn5Opt=stmtPatternWithVarOptional("x5");  final StatementPatternNode spn6=stmtPatternWithVar("x6");  final StatementPatternNode spn7Opt=stmtPatternWithVarOptional("x7");  final StatementPatternNode spn8=stmtPatternWithVar("x8");  final List<IGroupMemberNode> nodes=new ArrayList<IGroupMemberNode>();  nodes.add(spn1);  nodes.add(spn2);  nodes.add(spn3Opt);  nodes.add(spn4);  nodes.add(spn5Opt);  nodes.add(spn6);  nodes.add(spn7Opt);  nodes.add(spn8);  final GroupNodeVarBindingInfoMap bindingInfo=new GroupNodeVarBindingInfoMap(nodes,statisAnalysisForNodes(nodes),null);  final Set<IVariable<?>> external=new HashSet<IVariable<?>>();  external.add(Var.var("y"));  final ASTJoinGroupPartitions partitions=new ASTJoinGroupPartitions(nodes,bindingInfo,external);  assertEquals(4,partitions.getPartitionList().size());  assertEquals(nodes,partitions.extractNodeList(true));  final ASTJoinGroupPartition p1=partitions.getPartitionList().get(0);  final List<IGroupMemberNode> p1Exp=new ArrayList<IGroupMemberNode>();  p1Exp.add(spn1);  p1Exp.add(spn2);  p1Exp.add(spn3Opt);  assertEquals(p1Exp,p1.extractNodeList(true));  assertEquals(spn3Opt,p1.optionalOrMinus);  assertEquals(varSet("y","x1","x2"),p1.definitelyProduced);  final ASTJoinGroupPartition p2=partitions.getPartitionList().get(1);  final List<IGroupMemberNode> p2Exp=new ArrayList<IGroupMemberNode>();  p2Exp.add(spn4);  p2Exp.add(spn5Opt);  assertEquals(p2Exp,p2.extractNodeList(true));  assertEquals(spn5Opt,p2.optionalOrMinus);  assertEquals(varSet("y","x1","x2","x4"),p2.definitelyProduced);  final ASTJoinGroupPartition p3=partitions.getPartitionList().get(2);  final List<IGroupMemberNode> p3Exp=new ArrayList<IGroupMemberNode>();  p3Exp.add(spn6);  p3Exp.add(spn7Opt);  assertEquals(p3Exp,p3.extractNodeList(true));  assertEquals(spn7Opt,p3.optionalOrMinus);  assertEquals(varSet("y","x1","x2","x4","x6"),p3.definitelyProduced);  final ASTJoinGroupPartition p4=partitions.getPartitionList().get(3);  final List<IGroupMemberNode> p4Exp=new ArrayList<IGroupMemberNode>();  p4Exp.add(spn8);  assertEquals(p4Exp,p4.extractNodeList(true));  assertNull(p4.optionalOrMinus);  assertEquals(varSet("y","x1","x2","x4","x6","x8"),p4.definitelyProduced);}  }
class C{  private static int CallStaticIntMethodA(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticIntMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,0,methodID,argAddress,TypeReference.Int,true);  return Reflection.unwrapInt(returnObj);}  }
class C{  public void updateNewsBulletin(int msgId,int msgType,String message,String origExchange){  _log.debug("updateNewsBulletin: " + msgId + " "+ msgType+ " "+ message+ " "+ origExchange);}  }
class C{  private String generateConfigPathParameter(JobInstance jobInstance){  InstallationRecord record=installFinder.getAllInstalledJobs().get(jobInstance);  return String.format(CONFIG_PATH_PARAM_FORMAT,record.getConfigFilePath());}  }
class C{  @Inline @Override public final char charRead(ObjectReference objref,Word offset,Word location,int mode){  return Magic.getCharAtOffset(objref.toObject(),offset.toOffset());}  }
class C{  public static double[] placeDataIntoBins(ArrayList<Double> data,HistogramBins hbins){  final double[] result=new double[hbins.get_NBINS()];  final double binSize=(hbins.get_LOGMAX() - hbins.get_LOGMIN()) / hbins.get_NBINS();  for (  double d : data) {    int bin=(int)((d - hbins.get_LOGMIN()) / binSize);    if (bin < 0) {    } else     if (bin >= hbins.get_NBINS()) {    } else {      result[bin]+=1.0;    }  }  return result;}  }
class C{  public static Typeface walkwayObliqueSemiBold(Context context){  return FontSourceProcessor.process(R.raw.walkway_oblique_semibold,context);}  }
class C{  public int optInt(int index){  return this.optInt(index,0);}  }
class C{  protected void addPendingJoin(InternalDistributedMember id){synchronized (this.pendingJoinsLock) {    List oldPendingJoins=this.pendingJoins;    if (!oldPendingJoins.contains(id)) {      List newPendingJoins=new ArrayList(oldPendingJoins);      newPendingJoins.add(id);      this.pendingJoins=newPendingJoins;    }  }}  }
class C{  private void deleteLine(HttpServletRequest request,WebBasket wb){  try {    String enc=request.getCharacterEncoding();    if (enc == null)     request.setCharacterEncoding(WebEnv.ENCODING);  } catch (  Exception e) {    log.log(Level.SEVERE,"Set CharacterEncoding=" + WebEnv.ENCODING,e);  }  Enumeration en=request.getParameterNames();  while (en.hasMoreElements()) {    String parameter=(String)en.nextElement();    if (parameter.startsWith("Delete_")) {      try {        int line=Integer.parseInt(parameter.substring(7));        log.fine("Delete parameter=" + parameter + " -> "+ line);        wb.delete(line);      } catch (      NumberFormatException ex) {        log.warning("ParseError for " + parameter + " - "+ ex.toString());      }    }  }}  }
class C{  public static void assertEquals(Formatter message,Object expected,Object actual){  if (!expected.equals(actual)) {    throw new AssertionException(message);  }}  }
class C{  public static boolean isVisorNodeStartProperty(String name){  return IGNITE_SSH_HOST.equals(name) || IGNITE_SSH_USER_NAME.equals(name);}  }
class C{  public void tableChanged(WTableModelEvent e){  if (e.getColumn() != 0)   return;  log.config("Row=" + e.getFirstRow() + "-"+ e.getLastRow()+ ", Col="+ e.getColumn()+ ", Type="+ e.getType());  int matchedRow=xMatchedTable.getSelectedRow();  KeyNamePair Product=(KeyNamePair)xMatchedTable.getValueAt(matchedRow,5);  double qty=0.0;  int noRows=0;  for (int row=0; row < xMatchedToTable.getRowCount(); row++) {    IDColumn id=(IDColumn)xMatchedToTable.getValueAt(row,0);    if (id != null && id.isSelected()) {      KeyNamePair ProductCompare=(KeyNamePair)xMatchedToTable.getValueAt(row,5);      if (Product.getKey() != ProductCompare.getKey()) {        id.setSelected(false);      } else {        if (matchMode.getSelectedIndex() == MODE_NOTMATCHED)         qty+=((Double)xMatchedToTable.getValueAt(row,I_QTY)).doubleValue();        qty-=((Double)xMatchedToTable.getValueAt(row,I_MATCHED)).doubleValue();        noRows++;      }    }  }  m_xMatchedTo=new BigDecimal(qty);  xMatchedTo.setValue(m_xMatchedTo);  difference.setValue(m_xMatched.subtract(m_xMatchedTo));  bProcess.setEnabled(noRows != 0);  statusBar.setStatusDB(noRows + "");}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  protected void collectRequiresFromPsi(PsiFile psiFile,Set<VirtualFile> includedVirtualFiles){  for (  PsiElement importStatement : PsiTreeUtil.<PsiElement>findChildrenOfAnyType(psiFile,PerlUseStatement.class,PerlDoExpr.class)) {    VirtualFile virtualFile=null;    if (importStatement instanceof PerlUseStatement) {      String packageName=((PerlUseStatement)importStatement).getPackageName();      if (packageName != null) {        virtualFile=PerlPackageUtil.resolvePackageNameToVirtualFile(this,packageName);      }    } else     if (importStatement instanceof PerlDoExpr) {      String importPath=((PerlDoExpr)importStatement).getImportPath();      if (importPath != null) {        virtualFile=PerlPackageUtil.resolveRelativePathToVirtualFile(this,((PerlDoExpr)importStatement).getImportPath());      }    }    if (virtualFile != null) {      collectRequiresFromVirtualFile(virtualFile,includedVirtualFiles);    }  }}  }
class C{  public String shortString(){  return new StringBuilder(Long.toHexString(locId)).reverse().toString();}  }
class C{  @Override public int hashCode(){  int result=HashCodeUtil.SEED;  result=HashCodeUtil.hash(result,maxY);  result=HashCodeUtil.hash(result,maxX);  result=HashCodeUtil.hash(result,minY);  result=HashCodeUtil.hash(result,minX);  return result;}  }
class C{  public AddStatementOperation(Resource subj,IRI pred,Value obj,Resource... contexts){  super(contexts);  assert subj != null : "subj must not be null";  assert pred != null : "pred must not be null";  assert obj != null : "obj must not be null";  setSubject(subj);  setPredicate(pred);  setObject(obj);}  }
class C{  private Set unionIPRange(byte[] ipWithSubmask1,byte[] ipWithSubmask2){  Set set=new HashSet();  if (Arrays.areEqual(ipWithSubmask1,ipWithSubmask2)) {    set.add(ipWithSubmask1);  } else {    set.add(ipWithSubmask1);    set.add(ipWithSubmask2);  }  return set;}  }
class C{  @Override public String toString(){  return String.format("Function Node ['%s']",m_node.getFunction().getName());}  }
class C{  public In(String name){  if (name == null)   throw new NullPointerException("argument is null");  try {    File file=new File(name);    if (file.exists()) {      FileInputStream fis=new FileInputStream(file);      scanner=new Scanner(new BufferedInputStream(fis),CHARSET_NAME);      scanner.useLocale(LOCALE);      return;    }    URL url=getClass().getResource(name);    if (url == null) {      url=new URL(name);    }    URLConnection site=url.openConnection();    InputStream is=site.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    throw new IllegalArgumentException("Could not open " + name);  }}  }
class C{  public void addParameterURI(String name,Object value){  if (parametersURIs == null) {    parametersURIs=new HashMap<String,Object>();  }  parametersURIs.put(name,value);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.BOOL_EXPR___LITERAL_1:    setLiteral_1((String)newValue);  return;case UmplePackage.BOOL_EXPR___NAME_1:setName_1((String)newValue);return;case UmplePackage.BOOL_EXPR___EQUALITY_OP_1:getEqualityOp_1().clear();getEqualityOp_1().addAll((Collection<? extends EqualityOp_>)newValue);return;case UmplePackage.BOOL_EXPR___INDEX_1:setIndex_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public JMXProviderException(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementsbytagnameaccessnodelist.class,args);}  }
class C{  public void testSortedNumericField() throws Exception {  Directory dir=newDirectory();  IndexWriter iw=new IndexWriter(dir,newIndexWriterConfig(null));  Document doc=new Document();  doc.add(new SortedNumericDocValuesField("foo",3));  iw.addDocument(doc);  DirectoryReader dr=DirectoryReader.open(iw);  LeafReader r=getOnlyLeafReader(dr);  assertNotNull(DocValues.getSortedNumeric(r,"foo"));  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  dr.close();  iw.close();  dir.close();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float slope;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p, q;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double eightGridRes=8 * gridRes;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          curv=Zxx * Zxx + 2 * Zxy * Zxy + Zyy * Zyy;          outputFile.setValue(row,col,curv * radToDeg * 100);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void fireNodeAdded(SessionNode node){  SessionEvent event=new SessionEvent(this.source,node,SessionEvent.NODE_ADDED);  fireSessionEvent(event);}  }
class C{  public void mouseDragged(MouseEvent e){  VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();  MutableTransformer vt=vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.VIEW);  if (vt instanceof LensTransformer) {    vt=((LensTransformer)vt).getDelegate();  }  Point2D p=vt.inverseTransform(e.getPoint());  boolean accepted=checkModifiers(e);  if (accepted) {    MutableTransformer modelTransformer=vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT);    vv.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));    if (dragOnLens) {      setViewCenter(modelTransformer,p);      setViewCenter(vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.VIEW),p);      e.consume();      vv.repaint();    } else     if (dragOnEdge) {      setViewRadius(modelTransformer,p);      setViewRadius(vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.VIEW),p);      e.consume();      vv.repaint();    } else {      MutableTransformer mt=vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT);      Point2D iq=vt.inverseTransform(down);      iq=mt.inverseTransform(iq);      Point2D ip=vt.inverseTransform(e.getPoint());      ip=mt.inverseTransform(ip);      float dx=(float)(ip.getX() - iq.getX());      float dy=(float)(ip.getY() - iq.getY());      modelTransformer.translate(dx,dy);      down.x=e.getX();      down.y=e.getY();    }  }}  }
class C{  public final CC hideMode(int mode){  setHideMode(mode);  return this;}  }
class C{  public boolean isSetNewNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NEWNODEID_ISSET_ID);}  }
class C{  public DefaultBlueprintsValueFactory(final ValueFactory vf,final String graphNamespace,final String vertexNamespace,final String edgeNamespace,final URI type,final URI vertex,final URI edge,final URI label){  this.vf=vf;  this.GRAPH_NAMESPACE=graphNamespace;  this.VERTEX_NAMESPACE=vertexNamespace;  this.EDGE_NAMESPACE=edgeNamespace;  this.TYPE=type;  this.VERTEX=vertex;  this.EDGE=edge;  this.LABEL=label;}  }
class C{  public static String generateUniqueString(){  return Environment.get(UniqueID) + (counter++);}  }
class C{  public boolean hasSkip(){  return false;}  }
class C{  public void clearSomeChat(Document doc){  int count=doc.getDefaultRootElement().getElementCount();  if (count > MAX_NUMBER_LINES) {    removeFirstLines(doc,10);  }}  }
class C{  private RecyclerView.ItemDecoration parseTransforms(String raw){  if (raw == null) {    return null;  }  float scaleX=0f, scaleY=0f;  int translateX=0, translateY=0;  float opacity=0f;  int rotate=0;  Matcher matcher=transformPattern.matcher(raw);  while (matcher.find()) {    String match=matcher.group();    String name=matcher.group(1);    try {switch (name) {case "scale":        scaleX=Float.parseFloat(matcher.group(2));      scaleY=Float.parseFloat(matcher.group(3));    break;case "translate":  translateX=Integer.parseInt(matcher.group(2));translateY=Integer.parseInt(matcher.group(3));break;case "opacity":opacity=Float.parseFloat(matcher.group(2));break;case "rotate":rotate=Integer.parseInt(matcher.group(2));break;default :WXLogUtils.e(TAG,"Invaild transform expression:" + match);break;}} catch (NumberFormatException e) {WXLogUtils.e("",e);WXLogUtils.e(TAG,"Invaild transform expression:" + match);}}return new TransformItemDecoration(getOrientation() == Constants.Orientation.VERTICAL,opacity,translateX,translateY,rotate,scaleX,scaleY);}  }
class C{  public MySqlCreateProcedureStatement parseCreateProcedure(){  MySqlCreateProcedureStatement stmt=new MySqlCreateProcedureStatement();  accept(Token.CREATE);  if (lexer.token() == Token.OR) {    lexer.nextToken();    accept(Token.REPLACE);    stmt.setOrReplace(true);  }  accept(Token.PROCEDURE);  stmt.setName(this.exprParser.name());  if (lexer.token() == Token.LPAREN) {    lexer.nextToken();    parserParameters(stmt.getParameters());    accept(Token.RPAREN);  }  MySqlBlockStatement block=this.parseBlock();  stmt.setBlock(block);  return stmt;}  }
class C{  public synchronized void release(long gen) throws IOException {  super.releaseGen(gen);  persist();}  }
class C{  protected int[] readColorTable(final int ncolors){  final int nbytes=3 * ncolors;  int[] tab=null;  final byte[] c=new byte[nbytes];  try {    rawData.get(c);    tab=new int[256];    int i=0;    int j=0;    while (i < ncolors) {      final int r=(c[j++]) & 0xff;      final int g=(c[j++]) & 0xff;      final int b=(c[j++]) & 0xff;      tab[i++]=0xff000000 | (r << 16) | (g << 8)| b;    }  } catch (  final BufferUnderflowException e) {    Log.w(TAG,"Format Error Reading Color Table",e);    status=STATUS_FORMAT_ERROR;  }  return tab;}  }
class C{  public SecurityException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public SimpleMetadataReaderFactory(ClassLoader classLoader){  this.resourceLoader=(classLoader != null ? new DefaultResourceLoader(classLoader) : new DefaultResourceLoader());}  }
class C{  private VideoStorageUtils(){  throw new AssertionError();}  }
class C{  public Builder data(String data){  return data(toBytes(data));}  }
class C{  public YesNoNull(final String itemOne,final String itemTwo){  super();  addItem(itemOne);  addItem(itemTwo);}  }
class C{  public final Key unwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  if (!(this instanceof NullCipher)) {    if (!initialized) {      throw new IllegalStateException("Cipher not initialized");    }    if (opmode != Cipher.UNWRAP_MODE) {      throw new IllegalStateException("Cipher not initialized " + "for unwrapping keys");    }  }  if ((wrappedKeyType != SECRET_KEY) && (wrappedKeyType != PRIVATE_KEY) && (wrappedKeyType != PUBLIC_KEY)) {    throw new InvalidParameterException("Invalid key type");  }  chooseFirstProvider();  return spi.engineUnwrap(wrappedKey,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  public static Operator indexScan_Default(IndexRowType indexType,boolean reverse,IndexKeyRange indexKeyRange,TableRowType innerJoinUntilRowType){  Ordering ordering=new Ordering();  int fields=indexType.nFields();  for (int f=0; f < fields; f++) {    ordering.append(new TPreparedField(indexType.typeAt(f),f),!reverse);  }  return indexScan_Default(indexType,indexKeyRange,ordering,innerJoinUntilRowType);}  }
class C{  public static String random(int count){  return random(count,false,false);}  }
class C{  public static org.oscm.vo.VOServiceLocalization convertToApi(org.oscm.internal.vo.VOServiceLocalization oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOServiceLocalization newVO=new org.oscm.vo.VOServiceLocalization();  newVO.setNames(convertToVOLocalizedText(oldVO.getNames()));  newVO.setDescriptions(convertToVOLocalizedText(oldVO.getDescriptions()));  newVO.setShortDescriptions(convertToVOLocalizedText(oldVO.getShortDescriptions()));  newVO.setCustomTabNames(convertToVOLocalizedText(oldVO.getCustomTabNames()));  return newVO;}  }
class C{  @Override public Value convertTo(int t){  if (t == type) {    return this;  } else   if (t == Value.CLOB) {    ValueLob copy=ValueLob.createClob(getReader(),-1);    return copy;  } else   if (t == Value.BLOB) {    ValueLob copy=ValueLob.createBlob(getInputStream(),-1);    return copy;  }  return super.convertTo(t);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.VARIABLE_DEFINITION__INITIAL_VALUE:    return initialValue != null;}return super.eIsSet(featureID);}  }
class C{  public void testNegative() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document document=new Document();  BigInteger negative=BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64)).negate();  document.add(new BigIntegerPoint("field",negative));  writer.addDocument(document);  IndexReader reader=writer.getReader();  IndexSearcher searcher=newSearcher(reader);  assertEquals(1,searcher.count(BigIntegerPoint.newExactQuery("field",negative)));  assertEquals(1,searcher.count(BigIntegerPoint.newRangeQuery("field",negative.subtract(BigInteger.ONE),negative.add(BigInteger.ONE))));  reader.close();  writer.close();  dir.close();}  }
class C{  public static List<org.oscm.vo.VOLocalizedText> convertToVOLocalizedText(List<org.oscm.internal.vo.VOLocalizedText> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOLocalizedText> newVO=new ArrayList<org.oscm.vo.VOLocalizedText>();  for (  org.oscm.internal.vo.VOLocalizedText tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public PublicKey(final Deserializer deserializer){  this.value=deserializer.readBytes("value");}  }
class C{  void makeReadyForRecording(){  if (this.bitSet == null) {    this.bitSet=new BitSet(BIT_SET_WIDTH);    this.bitSetVersion=this.version;    this.bitSet.set(0);  }}  }
class C{  public ServiceCall<Void> deleteWord(String customizationId,String wordName){  Validator.notNull(customizationId,"customizationId cannot be null");  Validator.notNull(wordName,"words cannot be null");  RequestBuilder requestBuilder=RequestBuilder.delete(String.format(PATH_WORD,customizationId,wordName));  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getVoid());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public RrdDef(String path,long startTime,long step,int version){  this(path,startTime,step);  if (startTime < 0) {    throw new IllegalArgumentException("Invalid RRD start time specified: " + startTime);  }  this.version=version;}  }
class C{  void updateCache(int iAttributeHead,int nNrOfAtts,ParentSet parentSet){  double fBaseScore=calcNodeScore(iAttributeHead);  int nNrOfParents=parentSet.getNrOfParents();  for (int iAttributeTail=0; iAttributeTail < nNrOfAtts; iAttributeTail++) {    if (iAttributeTail != iAttributeHead) {      if (!parentSet.contains(iAttributeTail)) {        if (nNrOfParents < m_nMaxNrOfParents) {          Operation oOperation=new Operation(iAttributeTail,iAttributeHead,Operation.OPERATION_ADD);          m_Cache.put(oOperation,calcScoreWithExtraParent(iAttributeHead,iAttributeTail) - fBaseScore);        }      } else {        Operation oOperation=new Operation(iAttributeTail,iAttributeHead,Operation.OPERATION_DEL);        m_Cache.put(oOperation,calcScoreWithMissingParent(iAttributeHead,iAttributeTail) - fBaseScore);      }    }  }}  }
class C{  public synchronized void zoomAbs(final Point2D p,double scale){  ;  double zx=p.getX(), zy=p.getY();  damageReport();  m_transform.translate(zx,zy);  m_transform.scale(scale,scale);  m_transform.translate(-zx,-zy);  try {    m_itransform=m_transform.createInverse();  } catch (  Exception e) {  }}  }
class C{  public static double[] diagonalHessian(MultivariateFunction f,double[] x){  int len=f.getNumArguments();  double[] result=new double[len];  for (int i=0; i < len; i++) {    double h=MachineAccuracy.SQRT_SQRT_EPSILON * (Math.abs(x[i]) + 1.0);    double oldx=x[i];    x[i]=oldx + h;    double fxplus=f.evaluate(x);    x[i]=oldx - h;    double fxminus=f.evaluate(x);    x[i]=oldx;    double fx=f.evaluate(x);    result[i]=(fxplus - 2.0 * fx + fxminus) / (h * h);  }  return result;}  }
class C{  public void performRestartOperationAsync(final String vmId,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/restart",getBasePath(),vmId);  createObjectAsync(path,null,responseCallback);}  }
class C{  public void runNextPendingCommand(){  Runnable runnable=deltaQueue.pop();  runnable.run();}  }
class C{  private void seekForward(){switch (mMediaPlayerState) {case MediaPlayerState.STATE_PAUSED:case MediaPlayerState.STATE_PLAYING:    long seekTo=Long.parseLong(PreferenceManager.getDefaultSharedPreferences(this).getString(getString(R.string.pref_key_skip_forward),"30")) * 1000;  seekPlayerBy(seekTo);break;default :Timber.w("Trying to play an episode, but player is in state: %s",mPlaybackState);break;}}  }
class C{  @Override public String decode(String sequence,String encodedAlignment,int start,int end){  if (sequence == null) {    throw new NullPointerException("Sequence must not be null");  }  if (encodedAlignment == null) {    throw new NullPointerException("Alignment must not be null");  }  if (start < 1) {    throw new IllegalArgumentException("Start position must be 1 or greater");  }  if (end < 1) {    throw new IllegalArgumentException("Stop position must be 1 or greater");  }  if (start > end) {    throw new IllegalArgumentException("Start position must be equal to or less than stop position");  }  String sequenceRegion=sequence.substring(start - 1,end);  return decode(sequenceRegion,encodedAlignment);}  }
class C{  public void checkMentions(){  if (!getReplyToMentions()) {    return;  }  try {    log("Checking mentions",Level.FINE);    Network memory=getBot().memory().newMemory();    Vertex twitter=memory.createVertex(getPrimitive());    Vertex vertex=twitter.getRelationship(Primitive.LASTMENTION);    long last=0;    if (vertex != null) {      last=((Number)vertex.getData()).longValue();    }    long max=0;    ResponseList<Status> mentions=null;    boolean more=true;    int page=1;    while (more) {      if (last == 0) {        mentions=getConnection().getMentionsTimeline();        more=false;      } else {        Paging paging=new Paging(page,last);        mentions=getConnection().getMentionsTimeline(paging);        if ((mentions == null) || (mentions.size() < 20)) {          more=false;        }        page++;      }      if ((mentions == null) || mentions.isEmpty()) {        break;      }      log("Processing mentions",Level.FINE,mentions.size());      for (int index=mentions.size() - 1; index >= 0; index--) {        Status tweet=mentions.get(index);        long statusTime=tweet.getCreatedAt().getTime();        long statusId=tweet.getId();        if (statusId > max) {          max=statusId;        }        if ((System.currentTimeMillis() - statusTime) > DAY) {          log("Day old mention",Level.INFO,statusId,statusTime);          more=false;          continue;        }        if (tweet.getUser().getScreenName().equals(getUserName())) {          continue;        }        if (statusId > last) {          log("Processing mention",Level.INFO,tweet.getText(),tweet.getUser().getScreenName());          input(tweet);          Utils.sleep(100);        } else {          log("Old mention",Level.INFO,statusId,statusTime);        }      }    }    if (max != 0) {      twitter.setRelationship(Primitive.LASTMENTION,memory.createVertex(max));      memory.save();    }  } catch (  Exception exception) {    log(exception);  }  int count=0;  while (count < 60 && !getBot().memory().getActiveMemory().isEmpty()) {    Utils.sleep(1000);  }  this.languageState=LanguageState.Discussion;}  }
class C{  private synchronized void switchAddedToStore(IOFSwitch sw){  if (floodlightProvider.getRole() != HARole.STANDBY) {    return;  }  DatapathId dpid=sw.getId();  IOFSwitch oldSw=syncedSwitches.put(dpid,sw);  if (oldSw == null) {    addUpdateToQueue(new SwitchUpdate(dpid,SwitchUpdateType.ADDED));  } else {    sendNotificationsIfSwitchDiffers(oldSw,sw);  }}  }
class C{  public static String session(){  final TwitterSession session=TwitterCore.getInstance().getSessionManager().getActiveSession();  return TwitterSessionHelper.serialize(session);}  }
class C{  public void update(byte[] input,int inOff,int length){  digest.update(input,inOff,length);}  }
class C{  private ScServerHba findServerHba(String ssn,String iqnOrWwn){  ScServerHba result=null;  PayloadFilter filter=new PayloadFilter();  filter.append("scSerialNumber",ssn);  filter.append("instanceName",iqnOrWwn);  RestResult rr=restClient.post("StorageCenter/ScServerHba/GetList",filter.toJson());  if (checkResults(rr)) {    ScServerHba[] hbas=gson.fromJson(rr.getResult(),ScServerHba[].class);    for (    ScServerHba hba : hbas) {      result=hba;      break;    }  }  return result;}  }
class C{  private static void processArgs(String[] args){  for (int i=0; i < args.length; i++) {    String arg=args[i];    if (arg.equals("-o")) {      outputDir=args[++i];    } else     if (arg.equals("-spec")) {      unicodeData=args[++i];    } else     if (arg.equals("-language")) {      language=args[++i];    } else     if (arg.equals("-country")) {      country=args[++i];    } else     if (arg.equals("-valiant")) {      valiant=args[++i];    } else {      usage();    }  }  localeName=getLocaleName();}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  elementsLocalNameStack.pop();  for (int i=0, len=currentSection.activeHandlers.size(); i < len; i++)   ((ContentHandler)(currentSection.activeHandlers.elementAt(i))).endElement(uri,localName,qName);  currentSection.depth--;  if (currentSection.contextDependent)   currentSection.context.pop();  if (currentSection.depth == 0) {    for (int i=0, len=currentSection.placeholderHandlers.size(); i < len; i++) {      ContentHandler handler=(ContentHandler)(currentSection.placeholderHandlers.elementAt(i));      handler.endPrefixMapping("");      handler.endElement("http://purl.oclc.org/dsdl/nvdl/ns/instance/1.0","placeholder","placeholder");    }    endSection();  }}  }
class C{  public String convertMemberListToString(EDataType eDataType,Object instanceValue){  return super.convertToString(instanceValue);}  }
class C{  public EventHit eventLabel(String value){  setString(EVENT_LABEL,value);  return this;}  }
class C{  private void clearClientCookieJar(){  NettyHttpServiceClient client=(NettyHttpServiceClient)this.host.getClient();  client.clearCookieJar();}  }
class C{  public static void addAnnotationToXML(Element annotationsElement,String name,String value){  if (value == null) {    deleteAnnotationFromXML(annotationsElement,name);  } else {    final Document doc=annotationsElement.getOwnerDocument();    Element elem=doc.createElement("annotation");    annotationsElement.appendChild(elem);    elem.setAttribute("key",name);    elem.setTextContent(value);  }}  }
class C{  public int calculate(boolean enabled,PropertyChangeEvent evt){  if (log.isTraceEnabled()) {    log.trace("calculate starts for " + getSystemName());  }  if (_variableList.size() == 0) {    setState(Conditional.UNKNOWN);    return _currentState;  }  boolean result=true;switch (_logicType) {case Conditional.ALL_AND:    for (int i=0; (i < _variableList.size()) && result; i++) {      result=_variableList.get(i).evaluate();    }  break;case Conditional.ALL_OR:result=false;for (int k=0; (k < _variableList.size()) && !result; k++) {result=_variableList.get(k).evaluate();}break;case Conditional.MIXED:char[] ch=_antecedent.toCharArray();int n=0;for (int j=0; j < ch.length; j++) {if (ch[j] != ' ') {if (ch[j] == '{' || ch[j] == '[') {ch[j]='(';} else if (ch[j] == '}' || ch[j] == ']') {ch[j]=')';}ch[n++]=ch[j];}}try {DataPair dp=parseCalculate(new String(ch,0,n),_variableList);result=dp.result;} catch (NumberFormatException nfe) {result=false;log.error(getDisplayName() + " parseCalculation error antecedent= " + _antecedent+ ", ex= "+ nfe);}catch (IndexOutOfBoundsException ioob) {result=false;log.error(getDisplayName() + " parseCalculation error antecedent= " + _antecedent+ ", ex= "+ ioob);}catch (JmriException je) {result=false;log.error(getDisplayName() + " parseCalculation error antecedent= " + _antecedent+ ", ex= "+ je);}break;default :log.warn("Conditional " + getSystemName() + " fell through switch in calculate");break;}int newState=FALSE;if (log.isDebugEnabled()) {log.debug("Conditional \"" + getUserName() + "\" ("+ getSystemName()+ ") has calculated its state to be "+ result+ ". current state is "+ _currentState+ ".  enabled= "+ enabled);}if (PARKS_DEBUG) {System.out.println("Conditional \"" + getUserName() + "\" ("+ getSystemName()+ ") has calculated its state to be "+ result+ ". current state is "+ _currentState+ ".  enabled= "+ enabled);}if (result) {newState=TRUE;}if (log.isTraceEnabled()) {log.trace("   enabled starts at " + enabled);}if (enabled) {if (evt != null) {enabled=wantsToTrigger(evt);if (log.isTraceEnabled()) {log.trace("   wantsToTrigger sets enabled to " + enabled);}}}if (_triggerActionsOnChange) {if (newState == _currentState) {enabled=false;if (log.isTraceEnabled()) {log.trace("   _triggerActionsOnChange sets enabled to false");}}}setState(newState);if (enabled) {takeActionIfNeeded();}return _currentState;}  }
class C{  public boolean moveToNext(){  boolean newLine=false;  mChar++;  if (mChar == mOcrResult.getBlocks()[mBlock].getLines()[mLine].getChars().length) {    mChar=0;    mLine++;    newLine=true;    if (mLine == mOcrResult.getBlocks()[mBlock].getLines().length) {      mLine=0;      mBlock++;    }  }  return newLine;}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  private void writeCategoricalColumn(CategoricalColumn catCol,JsonWriter writer) throws IOException {  if (catCol.getPreference() != null) {    writer.name(PREFERENCE);    writer.beginArray();    for (    final String pref : catCol.getPreference()) {      writer.value(pref);    }    writer.endArray();  }  if (catCol.getRange() != null) {    writer.name(RANGE);    writer.beginArray();    for (    final String value : catCol.getRange()) {      writer.value(value);    }    writer.endArray();  }}  }
class C{  public void addResult(URIMetadataNode resultEntry,final long score){  if (resultEntry == null)   return;  final long ranking=(score * 128) + postRanking(resultEntry,this.ref);  resultEntry.setScore(ranking);  this.resultList.put(new ReverseElement<URIMetadataNode>(resultEntry,ranking));  if (pollImmediately)   this.resultList.poll();  this.addTopics(resultEntry);}  }
class C{  public ClientBuilder withToken(String token){  this.botToken=token;  isBot=true;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.557 -0500",hash_original_method="CFCCE7E1C39F0D41098F0FE9085A25D2",hash_generated_method="7EB0212B4AD686539ED06577A5369771") protected void removeMessageProcessor(MessageProcessor oldMessageProcessor){synchronized (messageProcessors) {    if (messageProcessors.remove(oldMessageProcessor)) {      oldMessageProcessor.stop();    }  }}  }
class C{  public TGetter createTGetter(){  TGetterImpl tGetter=new TGetterImpl();  return tGetter;}  }
class C{  public static Middleware<AsyncHandler<?>,AsyncHandler<Response<ByteString>>> serialize(Serializer serializer){  return null;}  }
class C{  @Override public boolean matches(SolrDocument doc){  Object v=doc.getFieldValue(this.key.getSolrFieldName());  if (v == null)   return false;  return v.toString().matches(this.value ? "true" : "false");}  }
class C{  public boolean isGetAll(){  return getAll;}  }
class C{  public boolean removeElement(int s){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  return super.removeElement(s);}  }
class C{  protected S_IfImpl(){  super();}  }
class C{  public void onUserLoginFailure(Exception ex,String accessToken,String backend){  tryToSetUIInteraction(true);  logger.error(ex);  SocialFactory.SOCIAL_SOURCE_TYPE socialType=SocialFactory.SOCIAL_SOURCE_TYPE.fromString(backend);  updateUIOnSocialLoginToEdxFailure(socialType,accessToken);}  }
class C{  public static long stringToTimestampInMilliseconds(String s,DateFormat formatter){  Date d=stringToDate(s,formatter);  return d == null ? 0 : d.getTime();}  }
class C{  public static byte[] randomBytes(int length){  byte[] bytes=new byte[length];  SEEDED_RANDOM.nextBytes(bytes);  return bytes;}  }
class C{  public void requestShowToolTip(InfoDisplayEvent event){  fireRequestToolTip(new InfoDisplayEvent(this,event.getInformation()));}  }
class C{  public void purchase(String sku){  throw new RuntimeException("Unsupported");}  }
class C{  public FillinOptionNotSupportedException(Reason reason){  super(reason.toString());  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public DelimitedTextTableWriter(String delimiter,boolean printHeader){  m_delim=delimiter;  m_printHeader=printHeader;}  }
class C{  public boolean hasSucceededKeys(){  return this.succeededKeys.size() > 0;}  }
class C{  public static Document createXMLDistReg(List list,Integer bookID,int fdrid,Locale locale){  shortFormatter=new SimpleDateFormat(RBUtil.getInstance(locale).getProperty(I18N_DATE_SHORTFORMAT));  Document document=DocumentHelper.createDocument();  Element root=document.addElement(XML_SICRESLIST_TEXT);  addContext(list.size(),locale,root);  addHeadMinuta(locale,root);  addBodyMinuta(locale,root);  DtrFdrResults result=null;  int i=0;  for (Iterator it=list.iterator(); it.hasNext(); ) {    result=(DtrFdrResults)it.next();    addMinuta(i++,bookID,fdrid,result,locale,root);  }  return document;}  }
class C{  static private String calcThreshold(double scoreThreshold,double lambda){  final double logProbThreshold=Math.log(1 - scoreThreshold / 0.999);  int maxNum=1000000;  if (calcLogProb(maxNum,false,lambda) > logProbThreshold) {    return ">1e6";  }  int minNum=1;  while (minNum < maxNum) {    final int midNum=(maxNum + minNum) / 2;    final boolean passThreshold=calcLogProb(midNum,false,lambda) <= logProbThreshold;    if (passThreshold) {      maxNum=midNum;    } else {      if (midNum == minNum) {        break;      }      minNum=midNum;    }  }  return Integer.toString(maxNum);}  }
class C{  public static int convertToLongArray(final byte[] src,final int sFrom,final int sTo,final long[] dest,final int dFrom,final int dTo){  final int length=sTo - sFrom;  checkSource(length,8);  checkDestination(length,dTo - dFrom,8);  return convertToLongArrayInternal(src,sFrom,sTo,dest,dFrom);}  }
class C{  int compile(){  int nFiles=ziFiles.size();  int status=0;  Mappings maps=new Mappings();  BackEnd backend=BackEnd.getBackEnd();  for (int i=0; i < nFiles; i++) {    Zoneinfo frontend=Zoneinfo.parse(ziFiles.get(i));    for (    String key : frontend.getZones().keySet()) {      info(key);      Timezone tz=frontend.phase2(key);      status|=backend.processZoneinfo(tz);    }    maps.add(frontend);  }  Zone.addMET();  maps.resolve();  status|=backend.generateSrc(maps);  return status;}  }
class C{  public MessageBuilder withCode(String language,String content){  this.content="";  return appendCode(language,content);}  }
class C{  public void addOwnedDashboardId(BigInteger id){  this.getOwnedDashboardIds().add(id);}  }
class C{  public void removeFromAggregate(int row,VisualItem member){  validRowCheck(row,true);  int ar=getAggregatedRow(row,member);  if (ar >= 0) {    m_aggregated.removeRow(ar);    fireTableEvent(row,row,EventConstants.ALL_COLUMNS,EventConstants.UPDATE);  }}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.CONSTRAINT_RULE;}  }
class C{  protected Author(ElementKey<?,?> key){  super(key);}  }
class C{  public Id<ActivityFacility> sampleBiasedOriginNode(String activityType,Random random){  Map<Id<ActivityFacility>,Integer> weightMap;  if (originWeightMaps.get(activityType) == null) {    weightMap=new HashMap<Id<ActivityFacility>,Integer>();    for (    Tuple<Pair<Id<ActivityFacility>>,Pair<String>> tuple : this.weights.keySet()) {      if (tuple.getSecond().getFirst().equalsIgnoreCase(activityType)) {        Id<ActivityFacility> major=tuple.getFirst().getFirst();        if (!weightMap.containsKey(major)) {          weightMap.put(major,this.weights.get(tuple));        } else {          weightMap.put(major,weightMap.get(major) + this.weights.get(tuple));        }      }    }    originWeightMaps.put(activityType,weightMap);  } else {    weightMap=originWeightMaps.get(activityType);  }  WeightedChoice<Id<ActivityFacility>> vertexWeights=new WeightedChoice<Id<ActivityFacility>>(weightMap,random);  return vertexWeights.nextItem();}  }
class C{  private void delayRetry(int multiplier){  debug("Sleeping before next retry...");  try {    Thread.sleep(1000 * multiplier);  } catch (  InterruptedException e) {    warn(e,"Thread sleeping failed.\nContinuing with the next retry.");  }}  }
class C{  public static void main(String[] args){  runCLIApplication(VisualizePairwiseGainMatrix.class,args);}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final byte[] array,final Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.474 -0500",hash_original_method="5A760B13A1AFBF26A6FD734F92230AFD",hash_generated_method="928DEC2A742CD522D662AA38D6FC8C80") public static byte[] decode(byte[] data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,0,data.length,bOut);  } catch (  IOException e) {    throw new RuntimeException("exception decoding Hex string: " + e);  }  return bOut.toByteArray();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static int countVarOccurrencesOutsideProjections(final BOp op,final IVariable inputVar){  if (op == null || inputVar == null) {    return 0;  }  int innerNodesTotal=0;  final List<IVariable> vars=toList(op,IVariable.class);  for (  IVariable var : vars) {    if (inputVar.equals(var))     innerNodesTotal++;  }  int innerNodesInProj=0;  final List<ProjectionNode> projs=toList(op,ProjectionNode.class);  for (  ProjectionNode proj : projs) {    final List<IVariable> innerVars=toList(proj,IVariable.class);    for (    IVariable innerVar : innerVars) {      if (inputVar.equals(innerVar))       innerNodesInProj++;    }  }  return innerNodesTotal - innerNodesInProj;}  }
class C{  protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource,String subPattern) throws IOException {  URLConnection con=rootDirResource.getURL().openConnection();  JarFile jarFile;  String jarFileUrl;  String rootEntryPath;  boolean newJarFile=false;  if (con instanceof JarURLConnection) {    JarURLConnection jarCon=(JarURLConnection)con;    ResourceUtils.useCachesIfNecessary(jarCon);    jarFile=jarCon.getJarFile();    jarFileUrl=jarCon.getJarFileURL().toExternalForm();    JarEntry jarEntry=jarCon.getJarEntry();    rootEntryPath=(jarEntry != null ? jarEntry.getName() : "");  } else {    String urlFile=rootDirResource.getURL().getFile();    int separatorIndex=urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR);    if (separatorIndex != -1) {      jarFileUrl=urlFile.substring(0,separatorIndex);      rootEntryPath=urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length());      jarFile=getJarFile(jarFileUrl);    } else {      jarFile=new JarFile(urlFile);      jarFileUrl=urlFile;      rootEntryPath="";    }    newJarFile=true;  }  try {    if (logger.isDebugEnabled()) {      logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]");    }    if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {      rootEntryPath=rootEntryPath + "/";    }    Set<Resource> result=new LinkedHashSet<Resource>(8);    for (Enumeration<JarEntry> entries=jarFile.entries(); entries.hasMoreElements(); ) {      JarEntry entry=entries.nextElement();      String entryPath=entry.getName();      if (entryPath.startsWith(rootEntryPath)) {        String relativePath=entryPath.substring(rootEntryPath.length());        if (getPathMatcher().match(subPattern,relativePath)) {          result.add(rootDirResource.createRelative(relativePath));        }      }    }    return result;  }  finally {    if (newJarFile) {      jarFile.close();    }  }}  }
class C{  public void add(int primaryCode,int[] codes){  mTypedWord.append((char)primaryCode);  correctPrimaryJuxtapos(primaryCode,codes);  correctCodesCase(codes);  mCodes.add(codes);  if (Character.isUpperCase((char)primaryCode))   mCapsCount++;}  }
class C{  public void test_parkFor_3() throws Exception {  CyclicBarrier barrier=new CyclicBarrier(1);  Parker parker=new Parker(barrier,false,1000);  Thread parkerThread=new Thread(parker);  UNSAFE.unpark(parkerThread);  parkerThread.start();  parker.assertDurationIsInRange(0);  parkerThread.join();}  }
class C{  private static boolean doTestEc2(){  try {    URLConnection conn=new URL(EC2_TEST_URL).openConnection();    conn.setConnectTimeout(500);    conn.getContent();    return true;  } catch (  Exception exc) {    return false;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypeRefsPackage.WILDCARD__DECLARED_UPPER_BOUND:    setDeclaredUpperBound((TypeRef)null);  return;case TypeRefsPackage.WILDCARD__DECLARED_LOWER_BOUND:setDeclaredLowerBound((TypeRef)null);return;case TypeRefsPackage.WILDCARD__USING_IN_OUT_NOTATION:setUsingInOutNotation(USING_IN_OUT_NOTATION_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public boolean isHotGrowable(){  return hotGrowable;}  }
class C{  private String createData(String path,byte[] data,CreateMode mode) throws KeeperException, InterruptedException {  for (; ; ) {    try {      return zookeeper.create(path,data,acl,mode,true);    } catch (    KeeperException.NoNodeException e) {      try {        zookeeper.create(dir,new byte[0],acl,CreateMode.PERSISTENT,true);      } catch (      KeeperException.NodeExistsException ne) {      }    }  }}  }
class C{  public void onCallEnd(){  if (isAppInBackground() && mIsCallingInBackground) {    Log.d(LOG_TAG,"onCallEnd : Suspend the events thread because the call was ended whereas the application was in background");    suspendApp();  }  mIsCallingInBackground=false;}  }
class C{  public <K,V>IgniteInternalCache<K,V> utilityCache(){  return internalCacheEx(CU.UTILITY_CACHE_NAME);}  }
class C{  public void testGetBytes(){  byte[] expectedResult={1,2,3};  byte[] bytes={3,0,0,1,1,2,3};  MySQLPacket array=new MySQLPacket(bytes.length - MySQLPacket.HEADER_LENGTH,bytes,(byte)1);  compareBytes(expectedResult,array.getBytes(3));}  }
class C{  public static MemoryBlock fromByteArray(final byte[] array){  return new MemoryBlock(array,PlatformDependent.BYTE_ARRAY_OFFSET,array.length);}  }
class C{  public void enableDebug(){  this.debug=true;}  }
class C{  public SQLDataException(Throwable cause){  super(cause);}  }
class C{  public AcelaSignalHead(String systemName,String userName,AcelaSystemConnectionMemo memo){  super(systemName,userName);  _memo=memo;  tSystemName=systemName;  int num=AcelaAddress.getBitFromSystemName(systemName);  addr=num;  AcelaNode tNode=AcelaAddress.getNodeFromSystemName(tSystemName,_memo);  if (tNode == null) {    log.error("Can't find new Acela Signal with name '" + tSystemName);    return;  }  tNode.setOutputSpecial(addr,1);  tNode.setOutputSignalHeadType(addr,AcelaNode.UKNOWN);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.885 -0400",hash_original_method="E8BF2980C2AE9F97BC40AD9BD64230F5",hash_generated_method="332D7CF4AFFBB9DC362C5899EF1D09F7") public static IOFileFilter magicNumberFileFilter(byte[] magicNumber,long offset){  return new MagicNumberFileFilter(magicNumber,offset);}  }
class C{  public DiscoveryNode findByInetAddress(InetAddress address){  for (  ObjectCursor<DiscoveryNode> cursor : nodes.values()) {    DiscoveryNode node=cursor.value;    if (node.getInetAddress().equals(address)) {      return node;    }  }  return null;}  }
class C{  Node<K,V> findNear(K kkey,int rel){  Comparable<? super K> key=comparable(kkey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return ((rel & LT) == 0 || b.isBaseHeader()) ? null : b;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if ((c == 0 && (rel & EQ) != 0) || (c < 0 && (rel & LT) == 0))       return n;      if (c <= 0 && (rel & LT) != 0)       return b.isBaseHeader() ? null : b;      b=n;      n=f;    }  }}  }
class C{  private SolrQueryResponse makeRequest(PingRequestHandler handler,SolrQueryRequest req) throws Exception {  SolrQueryResponse rsp=new SolrQueryResponse();  try {    handler.handleRequestBody(req,rsp);  }  finally {    req.close();  }  return rsp;}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final DMSLatLonPoint pt=(DMSLatLonPoint)obj;  return (pt.lat_isnegative == lat_isnegative && pt.lat_degrees == lat_degrees && pt.lat_minutes == lat_degrees && pt.lat_seconds == lat_seconds && pt.lon_isnegative == lon_isnegative && pt.lon_degrees == lon_degrees && pt.lon_minutes == lon_minutes && pt.lon_seconds == lon_seconds);}  }
class C{  public ClientMessage createMessage(String body){  ClientMessage message=createMessage();  if (body != null) {    message.writeBodyBufferString(body);  }  return message;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void passingTD(Team offense,PlayerWR selWR,int[] selWRStats,int yardsGain){  if (gamePoss) {    homeScore+=6;    HomeQBStats[2]++;    selWRStats[3]++;  } else {    awayScore+=6;    AwayQBStats[2]++;    selWRStats[3]++;  }  tdInfo=offense.abbr + " QB " + offense.getQB(0).name+ " threw a "+ yardsGain+ " yard TD to "+ selWR.name+ ".";  offense.getQB(0).statsTD++;  selWR.statsTD++;}  }
class C{  protected static void print(String msg){  System.out.print(msg);}  }
class C{  private void fillInBaseTimelineExclusionsAsExceptions(SegmentedTimeline timeline,long from,long to){  timeline.addBaseTimelineExclusions(from,to);  for (SegmentedTimeline.Segment segment1=timeline.getBaseTimeline().getSegment(from); segment1.getSegmentStart() <= to; segment1.inc()) {    if (segment1.inExcludeSegments()) {      for (SegmentedTimeline.Segment segment2=timeline.getSegment(segment1.getSegmentStart()); segment2.getSegmentStart() <= segment1.getSegmentEnd(); segment2.inc()) {        if (!segment2.inExcludeSegments()) {          assertTrue(segment2.inExceptionSegments());        }      }    }  }}  }
class C{  void backupFiles(){  long backupDelay=DateTime.DAY * settings.getLong("backupDelay");  backup.performBackup((int)backupDelay,(int)settings.getLong("backupCount"));}  }
class C{  @Override public int compareTo(SimpleStructuralDatabase that){  if (this == that) {    return 0;  }  return this.dataSource.name().compareTo(that.getDataSource().name());}  }
class C{  public synchronized void remove(String title,String game){  StatusHistoryEntry entry=new StatusHistoryEntry(title,game,-1,-1,false);  entries.remove(entry);}  }
class C{  protected boolean hasUncompressedStrip(){  return mStripBytes.size() != 0;}  }
class C{  AddNewBookmark(Context context){  super(context);  setWillNotDraw(false);  LayoutInflater factory=LayoutInflater.from(context);  factory.inflate(R.layout.add_new_bookmark,this);  mUrlText=(TextView)findViewById(R.id.url);}  }
class C{  public void decreaseRefcount(){  refcount--;}  }
class C{  public boolean isStyleLarge(){  return mIsStyleLarge;}  }
class C{  public static void assertNull(String message,Object object){  Assert.assertNull(message,object);}  }
class C{  static public int ceil(float x){  return (int)(x + BIG_ENOUGH_CEIL) - BIG_ENOUGH_INT;}  }
class C{  public static void main(final String[] args) throws IOException {  final InputStreamReader input=new InputStreamReader(System.in);  int c;  while ((c=input.read()) != -1) {    if (c >= 'A' && c <= 'M' || c >= 'a' && c <= 'm') {      c+='N' - 'A';    } else     if (c >= 'N' && c <= 'Z' || c >= 'n' && c <= 'z') {      c-='N' - 'A';    }    System.out.print((char)c);  }}  }
class C{  public boolean doesParkingGetFullInInterval(double startTime,double endTime){  GeneralLib.errorIfNot24HourProjectedTime(startTime);  GeneralLib.errorIfNot24HourProjectedTime(endTime);  if (list.isEmpty()) {    return false;  }  for (int i=0; i < list.size() - 1; i++) {    if (GeneralLib.isIn24HourInterval(list.get(i).getEndTime(),list.get(i + 1).getStartTime(),startTime) && GeneralLib.isIn24HourInterval(list.get(i).getEndTime(),list.get(i + 1).getStartTime(),endTime)) {      return false;    }  }  if (GeneralLib.isIn24HourInterval(list.get(list.size() - 1).getEndTime(),list.get(0).getStartTime(),startTime) && GeneralLib.isIn24HourInterval(list.get(list.size() - 1).getEndTime(),list.get(0).getStartTime(),endTime)) {    return false;  }  return true;}  }
class C{  public static Map<Unit,Collection<Unit>> transporting(final Collection<Unit> units){  final Map<Unit,Collection<Unit>> returnVal=new HashMap<>();  for (  final Unit transported : units) {    final Unit transport=transportedBy(transported);    Collection<Unit> transporting=null;    if (transport != null) {      transporting=transporting(transport);    }    if (transporting != null) {      returnVal.put(transport,transporting);    }  }  return returnVal;}  }
class C{  protected static ArrayList<? extends Position> subdividePositions(Globe globe,ArrayList<? extends Position> positions,double maxLength,boolean followTerrain,int pathType){  return subdividePositions(globe,positions,maxLength,followTerrain,pathType,0,positions.size());}  }
class C{  public BinaryPoint(String name,byte[]... point){  super(name,pack(point),getType(point));}  }
class C{  public static void enableBarColoring(Window window,@ColorRes int colorID){  enableBarColoring(window);  updateBarsColor(window,colorID);}  }
class C{  public void revert(){  if (canRevert()) {switch (mode) {case MakeMovesOnMaster:      throw new UnsupportedOperationException("This operation is not supported in mode " + mode);case MakeMovesOnMasterSetCursorToLast:    throw new UnsupportedOperationException("This operation is not supported in mode " + mode);case MakeMovesOnCursor:  master=masterBackup;masterBackup=null;isInCursorSubline=false;setCursor(cursorPositionBeforeCursorMoves);break;}}}  }
class C{  void updateItem(Barcode barcode){  mBarcode=barcode;  postInvalidate();}  }
class C{  public static void log(IStatus status){  getDefault().getLog().log(status);}  }
class C{  protected T duplicateObject(T a){  if (a == null) {    return null;  }  if (primitive) {    logger.log(Level.FINE,"Returning primitive as duplicate");    return a;  }  T obj=null;  if (cloneable) {    try {      obj=(T)a.getClass().getMethod("clone").invoke(a);      logger.log(Level.FINE,"Cloned object {0} to {1}",new Object[]{a,obj});    } catch (    IllegalAccessException ex) {      Exceptions.printStackTrace(ex);    }catch (    IllegalArgumentException ex) {      Exceptions.printStackTrace(ex);    }catch (    InvocationTargetException ex) {      Exceptions.printStackTrace(ex);    }catch (    NoSuchMethodException ex) {      Exceptions.printStackTrace(ex);    }catch (    SecurityException ex) {      Exceptions.printStackTrace(ex);    }  } else   if (instantiable) {    try {      obj=(T)a.getClass().getConstructor(a.getClass()).newInstance(a);      logger.log(Level.FINE,"Instantiated new object from {0} to {1}",new Object[]{a,obj});    } catch (    InstantiationException ex) {      Exceptions.printStackTrace(ex);    }catch (    IllegalAccessException ex) {      Exceptions.printStackTrace(ex);    }catch (    IllegalArgumentException ex) {      Exceptions.printStackTrace(ex);    }catch (    InvocationTargetException ex) {      Exceptions.printStackTrace(ex);    }catch (    NoSuchMethodException ex) {      Exceptions.printStackTrace(ex);    }catch (    SecurityException ex) {      Exceptions.printStackTrace(ex);    }  }  if (obj == null) {    logger.log(Level.FINE,"Simply returning non-primitive {0} as duplicate",new Object[]{a});    return a;  }  return obj;}  }
class C{  public static double[] readDoubleArray(ByteBuffer buffer,int numEntries){  if (buffer == null) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double[] array=new double[numEntries];  for (int i=0; i < numEntries; i++) {    array[i]=buffer.getDouble();  }  return array;}  }
class C{  private void validate(List<ValidationRemark> remarks,FieldDefinition fieldDef,boolean throwError){  String field=forceUpperCase ? fieldDef.columnName.toUpperCase() : fieldDef.columnName;  if (!columns.containsKey(field)) {    remarks.add(error(table,fieldDef,"Does not exist in database!").throwError(throwError));    return;  }  ColumnInspector col=columns.get(field);  Class<?> fieldClass=fieldDef.field.getType();  Class<?> jdbcClass=ModelUtils.getClassForSqlType(col.type,dateTimeClass);  if (fieldDef.dataType.equals("VARCHAR") && (fieldClass != String.class)) {    remarks.add(error(table,fieldDef,"JaQu does not currently implement support for " + fieldClass.getName()).throwError(throwError));  }  if (!fieldClass.equals(jdbcClass)) {    if (Number.class.isAssignableFrom(fieldClass)) {      remarks.add(warn(table,col,MessageFormat.format("Precision mismatch: ModelObject={0}, ColumnObject={1}",fieldClass.getSimpleName(),jdbcClass.getSimpleName())));    } else {      if (!Date.class.isAssignableFrom(jdbcClass)) {        remarks.add(warn(table,col,MessageFormat.format("Object Mismatch: ModelObject={0}, ColumnObject={1}",fieldClass.getSimpleName(),jdbcClass.getSimpleName())));      }    }  }  if (fieldClass == String.class) {    if ((fieldDef.maxLength != col.size) && (col.size < Integer.MAX_VALUE)) {      remarks.add(warn(table,col,MessageFormat.format("{0}.maxLength={1}, ColumnMaxLength={2}",JQColumn.class.getSimpleName(),fieldDef.maxLength,col.size)));    }    if (fieldDef.maxLength > 0 && !fieldDef.trimString) {      remarks.add(consider(table,col,MessageFormat.format("{0}.truncateToMaxLength=true" + " will prevent RuntimeExceptions on" + " INSERT or UPDATE, but will clip data!",JQColumn.class.getSimpleName())));    }  }  if (fieldDef.isAutoIncrement != col.isAutoIncrement) {    remarks.add(warn(table,col,MessageFormat.format("{0}.isAutoIncrement={1}" + " while Column autoIncrement={2}",JQColumn.class.getSimpleName(),fieldDef.isAutoIncrement,col.isAutoIncrement)));  }  if (!col.isAutoIncrement && !col.isPrimaryKey) {    if (!ModelUtils.isProperlyFormattedDefaultValue(fieldDef.defaultValue)) {      remarks.add(error(table,col,MessageFormat.format("{0}.defaultValue=\"{1}\"" + " is improperly formatted!",JQColumn.class.getSimpleName(),fieldDef.defaultValue)).throwError(throwError));      return;    }    if (StringUtils.isNullOrEmpty(fieldDef.defaultValue) && !StringUtils.isNullOrEmpty(col.defaultValue)) {      remarks.add(warn(table,col,MessageFormat.format("{0}.defaultValue=\"\"" + " while column default=\"{1}\"",JQColumn.class.getSimpleName(),col.defaultValue)));    } else     if (!StringUtils.isNullOrEmpty(fieldDef.defaultValue) && StringUtils.isNullOrEmpty(col.defaultValue)) {      remarks.add(warn(table,col,MessageFormat.format("{0}.defaultValue=\"{1}\"" + " while column default=\"\"",JQColumn.class.getSimpleName(),fieldDef.defaultValue)));    } else     if (!StringUtils.isNullOrEmpty(fieldDef.defaultValue) && !StringUtils.isNullOrEmpty(col.defaultValue)) {      if (!fieldDef.defaultValue.equals(col.defaultValue)) {        remarks.add(warn(table,col,MessageFormat.format("{0}.defaultValue=\"{1}\"" + " while column default=\"{2}\"",JQColumn.class.getSimpleName(),fieldDef.defaultValue,col.defaultValue)));      }    }    if (!ModelUtils.isValidDefaultValue(fieldDef.field.getType(),fieldDef.defaultValue)) {      remarks.add(error(table,col,MessageFormat.format("{0}.defaultValue=\"{1}\" is invalid!",JQColumn.class.getSimpleName(),fieldDef.defaultValue)));    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static int maxArmorPoints(Entity aero,double tonnage){  long eType=aero.getEntityType();  if (eType == Entity.ETYPE_CONV_FIGHTER) {    return (int)(tonnage * 1);  } else   if (eType == Entity.ETYPE_AERO) {    return (int)(tonnage * 8);  } else {    return 0;  }}  }
class C{  public JSControl(String script){  parser=new JavaScriptParser(script);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  private int nextChar(){  while (buf.remaining() > 0) {    char c=(char)buf.get();    if (!PDFFile.isWhiteSpace(c)) {      return c;    }  }  return -1;}  }
class C{  private static Map<String,Id<Link>> createIdMap(){  Map<String,Id<Link>> idMap=new TreeMap<String,Id<Link>>();  BufferedReader r=IOUtils.getBufferedReader(CSIdFILE);  try {    String line=r.readLine();    while ((line=r.readLine()) != null) {      String[] splittedLine=line.split(";");      String cs_id=splittedLine[0];      String link_id=splittedLine[1];      if (cs_id != null) {        if (link_id.equalsIgnoreCase("") == false) {          if (idMap.containsKey(cs_id) == false) {            idMap.put(cs_id,Id.create(link_id,Link.class));            System.out.println("added to map: " + cs_id);          } else {            System.out.println("key already exists!");          }        } else {          System.out.println("CS with Id has no linkId: " + cs_id);        }      }    }  } catch (  IOException e) {    e.printStackTrace();  }  return idMap;}  }
class C{  protected void pageLeft(){  if (LOG.isDebugEnabled()) {    LOG.debug("Page left...");  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null)   stack.getUIMgr().savePrefs();  Sage.savePrefs();  return null;}  }
class C{  protected HashSetModifiableDBIDs unionDBIDs(final DBIDs[] parts,int start,int end){  int sum=0;  for (int i=start; i < end; i++) {    sum+=parts[i].size();  }  HashSetModifiableDBIDs sids=DBIDUtil.newHashSet(sum);  for (int i=start; i < end; i++) {    sids.addDBIDs(parts[i]);  }  return sids;}  }
class C{  private static void checkUpdateU(String message,String update,boolean shouldSucceed){  try {    String m=(null == message) ? "" : message + " ";    if (shouldSucceed) {      String response=restTestHarness.validateUpdate(update);      if (response != null)       fail(m + "update was not successful: " + response);    } else {      String response=restTestHarness.validateErrorUpdate(update);      if (response != null)       fail(m + "update succeeded, but should have failed: " + response);    }  } catch (  SAXException e) {    throw new RuntimeException("Invalid XML",e);  }}  }
class C{  public void flush(){  diskStore.flush();}  }
class C{  public Base64InputStream(InputStream in,int flags){  this(in,flags,false);}  }
class C{  public MinusIteration(Iteration<? extends E,X> leftArg,Iteration<? extends E,X> rightArg){  this(leftArg,rightArg,false);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return DPID;case 2:  return PORT;default :return null;}}  }
class C{  public void testNegPosFirstLonger(){  String numA="-2837462783428374767845648748973847593874837948575684767";  String numB="293478573489347658763745839457637";  String res="-2837462783428374767845615168483972194300564226167553532";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public String toString(){  return new String(b,0,i_end);}  }
class C{  public void transformValues(TLongFunction function){  for (int i=_pos; i-- > 0; ) {    _data[i]=function.execute(_data[i]);  }}  }
class C{  public boolean isValidName(){  throw new UnsupportedOperationException();}  }
class C{  public static int convertSQLTypeToValueType(int sqlType){switch (sqlType) {case Types.CHAR:case Types.NCHAR:    return Value.STRING_FIXED;case Types.VARCHAR:case Types.LONGVARCHAR:case Types.NVARCHAR:case Types.LONGNVARCHAR:  return Value.STRING;case Types.NUMERIC:case Types.DECIMAL:return Value.DECIMAL;case Types.BIT:case Types.BOOLEAN:return Value.BOOLEAN;case Types.INTEGER:return Value.INT;case Types.SMALLINT:return Value.SHORT;case Types.TINYINT:return Value.BYTE;case Types.BIGINT:return Value.LONG;case Types.REAL:return Value.FLOAT;case Types.DOUBLE:case Types.FLOAT:return Value.DOUBLE;case Types.BINARY:case Types.VARBINARY:case Types.LONGVARBINARY:return Value.BYTES;case Types.OTHER:case Types.JAVA_OBJECT:return Value.JAVA_OBJECT;case Types.DATE:return Value.DATE;case Types.TIME:return Value.TIME;case Types.TIMESTAMP:return Value.TIMESTAMP;case Types.BLOB:return Value.BLOB;case Types.CLOB:case Types.NCLOB:return Value.CLOB;case Types.NULL:return Value.NULL;case Types.ARRAY:return Value.ARRAY;case DataType.TYPE_RESULT_SET:return Value.RESULT_SET;default :throw DbException.get(ErrorCode.UNKNOWN_DATA_TYPE_1,"" + sqlType);}}  }
class C{  public T caseStringLiteralForSTE(StringLiteralForSTE object){  return null;}  }
class C{  public boolean isDryRun(){  return dryRun;}  }
class C{  public static void covarianceDiag(Vec means,Vec diag,DataSet dataset){  final int n=dataset.getSampleSize();  final int d=dataset.getNumNumericalVars();  int[] nnzCounts=new int[d];  double sumOfWeights=0;  for (int i=0; i < n; i++) {    DataPoint dp=dataset.getDataPoint(i);    double w=dp.getWeight();    sumOfWeights+=w;    Vec x=dataset.getDataPoint(i).getNumericalValues();    for (    IndexValue iv : x) {      int indx=iv.getIndex();      nnzCounts[indx]++;      diag.increment(indx,w * pow(iv.getValue() - means.get(indx),2));    }  }  for (int i=0; i < nnzCounts.length; i++)   diag.increment(i,pow(means.get(i),2) * (n - nnzCounts[i]));  diag.mutableDivide(sumOfWeights);}  }
class C{  private void initComputeProgram(){  glUseProgram(computeProgram);  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);  workGroupSizeX=workGroupSize.get(0);  workGroupSizeY=workGroupSize.get(1);  eyeUniform=glGetUniformLocation(computeProgram,"eye");  ray00Uniform=glGetUniformLocation(computeProgram,"ray00");  ray10Uniform=glGetUniformLocation(computeProgram,"ray10");  ray01Uniform=glGetUniformLocation(computeProgram,"ray01");  ray11Uniform=glGetUniformLocation(computeProgram,"ray11");  blendFactorUniform=glGetUniformLocation(computeProgram,"blendFactor");  bounceCountUniform=glGetUniformLocation(computeProgram,"bounceCount");  IntBuffer params=BufferUtils.createIntBuffer(1);  int loc=glGetUniformLocation(computeProgram,"framebufferImage");  glGetUniformiv(computeProgram,loc,params);  framebufferImageBinding=params.get(0);  glUseProgram(0);}  }
class C{  public RemoteVideoInfo(RemoteVideoInfo other){  this(other.title,other.durationMillis,other.state,other.currentTimeMillis,other.errorMessage);}  }
class C{  private Combined(){}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public void add(RegularTimePeriod period,BigDecimal MACD,BigDecimal signalLine,BigDecimal MACDHistogram){  if (!this.isEmpty()) {    MACDItem item0=(MACDItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new MACDItem(period,MACD,signalLine,MACDHistogram),true);}  }
class C{  public boolean isComposite(){  return false;}  }
class C{  public boolean isOpen(){  return m_open;}  }
class C{  @Override public double[] projectRenderToScaled(double[] v){  return proj.applyInverse(v);}  }
class C{  private void assertEmpty(Map map){  assertEquals(Collections.emptyMap(),map);}  }
class C{  public static boolean mkdir(String path){  File f=new File(path);  return f.mkdir();}  }
class C{  public boolean isWinVista(){  return System.getProperty("os.name").indexOf("Vista") >= 0;}  }
class C{  private void logBugLocally(LocalClientInfo info){  File f=BugSettings.BUG_LOG_FILE.getValue();  FileUtils.setWriteable(f);  OutputStream os=null;  try {synchronized (WRITE_LOCK) {      if (f.length() > BugSettings.MAX_BUGFILE_SIZE.getValue())       f.delete();      os=new BufferedOutputStream(new FileOutputStream(f.getPath(),true));      os.write((new Date().toString() + "\n").getBytes());      os.write(info.toBugReport().getBytes());      os.write(SEPARATOR);      os.flush();    }  } catch (  IOException ignored) {  } finally {    IOUtils.closeQuietly(os);  }}  }
class C{  private void deleteField(){  AttributeFieldTableModel fieldModel=(AttributeFieldTableModel)fieldTable.getModel();  int fieldCount=fieldModel.getRowCount();  Object[] selectionOptions=new Object[fieldCount];  for (int i=0; i < fieldCount; i++) {    SelectionIdentifier wrapper=new SelectionIdentifier(i,fieldModel.getValueAt(i,fieldModel.findColumn(AttributeFieldTableModel.ColumnName.NAME.toString())));    selectionOptions[i]=wrapper;  }  Object selection=JOptionPane.showInputDialog(this,messages.getString("SelectFieldToDelete"),bundle.getString("DeleteField"),JOptionPane.OK_CANCEL_OPTION,null,selectionOptions,null);  if (selection != null) {    int selectionIndex=((SelectionIdentifier)selection).getIndex();    fieldModel.deleteField(selectionIndex);    AttributeFileTableModel dataModel=(AttributeFileTableModel)dataTable.getModel();    dataModel.hideColumn(selectionIndex);  }}  }
class C{  public static void addConfigurationToClass(String path,Global global,List<Attribute> attributes,Class<?> aClass) throws NoSuchFieldException, IOException {  writeFile(new File(path),linesToWrite(path,global,attributes,aClass));}  }
class C{  protected void addRemainderField(String s){  try {    Field f=inClazz.getDeclaredField(s);    TypeInfo t=new TypeInfo(f.getName(),ClassUtils.primitiveToWrapper(f.getType()));    t.getter=PojoUtils.createGetter(inClazz,t.name,t.type);    t.setter=PojoUtils.createSetter(remainderClazz,t.name,t.type);    remainderFields.add(t);  } catch (  NoSuchFieldException e) {    throw new RuntimeException("Field " + s + " not found in class "+ inClazz,e);  }}  }
class C{  public Connection(Address to,String group,byte type) throws IOException, SocketException {  this(to,group,type,null,30000);}  }
class C{  public EntityMigrationBuilder removeNamedAssociation(String association,Map<String,String> defaultReferences){  migrationBuilder.builder.entityMigrationRules().addRule(new EntityMigrationRule(migrationBuilder.fromVersion,migrationBuilder.toVersion,entityTypes,new RemoveNamedAssociation(association,defaultReferences)));  return this;}  }
class C{  public synchronized boolean isPaused(){  return uploadState.equals(UploadState.PAUSED);}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  this.put(d);  return this;}  }
class C{  public T caseMoreOp_(MoreOp_ object){  return null;}  }
class C{  public static void main(final String[] args){  new SdfSplitter().mainExit(args);}  }
class C{  public void back(){  appiumDriver.navigate().back();}  }
class C{  public void testEncodingRegression() throws Exception {  Properties props=new Properties();  props.put("characterEncoding","UTF-8");  props.put("useUnicode","true");  DriverManager.getConnection(dbUrl,props).close();}  }
class C{  public boolean isEmpty(){  return !hasContent();}  }
class C{  private void logFailedStatementSQL(String sql,SQLException ex){  try {    String log="Statement failed: " + sql;    if (log.length() > maxSQLLogLength)     log=log.substring(0,maxSQLLogLength);    logger.error(log);    if (ex != null && ex.getCause() != null && ex.getCause() instanceof SQLException) {      SQLException nextException=((SQLException)ex.getCause()).getNextException();      if (nextException != null) {        logger.error(nextException.getMessage());      }    }  } catch (  Exception e) {    if (logger.isDebugEnabled())     logger.debug("logFailedStatementSQL failed to log, because: " + e.getMessage());  }}  }
class C{  private boolean isBlack(int rgbPixel){  Color color=new Color(rgbPixel,true);  int r=color.getRed();  int g=color.getGreen();  int b=color.getBlue();  int a=color.getAlpha();switch (getImageQuantizationMethod()) {case CHECK_LUMA:    if (a < getLumaThreshold()) {      return false;    }  int luma=((r * 299) + (g * 587) + (b * 114)) / 1000;return luma < getLumaThreshold();case CHECK_ALPHA:return a > getAlphaThreshold();case CHECK_BLACK:default :return color.equals(Color.BLACK);}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private long insertSearchesInTransaction(SQLiteDatabase db,ContentValues values){  String search=values.getAsString(Searches.SEARCH);  if (TextUtils.isEmpty(search)) {    throw new IllegalArgumentException("Must include the SEARCH field");  }  Cursor cursor=null;  try {    cursor=db.query(TABLE_SEARCHES,new String[]{Searches._ID},Searches.SEARCH + "=?",new String[]{search},null,null,null);    if (cursor.moveToNext()) {      long id=cursor.getLong(0);      db.update(TABLE_SEARCHES,values,Searches._ID + "=?",new String[]{Long.toString(id)});      return id;    } else {      return db.insertOrThrow(TABLE_SEARCHES,Searches.SEARCH,values);    }  }  finally {    if (cursor != null)     cursor.close();  }}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  protected SpeakerNPC instantiate(final String name){  return new SpeakerNPC(name);}  }
class C{  public ClassDefsSection(DexFile file){  super("class_defs",file,4);  classDefs=new TreeMap<Type,ClassDefItem>();  orderedDefs=null;}  }
class C{  public static DomainResource persistDeletedDomain(String domainName,DateTime deletionTime){  return persistDomainAsDeleted(newDomainResource(domainName),deletionTime);}  }
class C{  private static boolean validSubstring(String text,int startPos,int len){  return text != null && startPos + len <= text.length();}  }
class C{  public AdjacencyList(List<List<Vertex>> list){  mStepList=new ArrayList<BuildStep>();  mOrigList=list;  buildList(list,0,null);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.239 -0500",hash_original_method="05C528C2066045A21E9535AE6FF4CD3D",hash_generated_method="7FC6F678059DC4C8F2D7F453905F534B") private View fillUp(int pos,int nextBottom){  View selectedView=null;  int end=0;  if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {    end=mListPadding.top;  }  while (nextBottom > end && pos >= 0) {    boolean selected=pos == mSelectedPosition;    View child=makeAndAddView(pos,nextBottom,false,mListPadding.left,selected);    nextBottom=child.getTop() - mDividerHeight;    if (selected) {      selectedView=child;    }    pos--;  }  mFirstPosition=pos + 1;  return selectedView;}  }
class C{  public boolean isDragRegion(int x,int y){  if (getMenuBar().isDragRegion(x,y)) {    return true;  }  Container actual=getActualPane();  Component c=actual.getComponentAt(x,y);  return c != null && c.isDragRegion(x,y);}  }
class C{  public void subdivide(double t,Quadradic q0,Quadradic q1){  Point2D.Double np=eval(t);  Point2D.Double npd=evalDt(t);  if (q0 != null) {    q0.p1.x=p1.x;    q0.p1.y=p1.y;    q0.p2.x=np.x - (npd.x * t * .5);    q0.p2.y=np.y - (npd.y * t * .5);    q0.p3.x=np.x;    q0.p3.y=np.y;  }  if (q1 != null) {    q1.p1.x=np.x;    q1.p1.y=np.y;    q1.p2.x=np.x + (npd.x * (1 - t) * .5);    q1.p2.y=np.y + (npd.y * (1 - t) * .5);    q1.p3.x=p3.x;    q1.p3.y=p3.y;  }}  }
class C{  public IptcReader(byte[] data){  _data=data;}  }
class C{  private boolean mayAccessKeyRing(Entity entity){  if (!(entity instanceof Player)) {    return false;  }  Player player=(Player)entity;  return (player.getFeature("keyring") != null);}  }
class C{  public TargetInformationSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public boolean match(Certificate certificate){  if (!(certificate instanceof X509Certificate)) {    return false;  }  X509Certificate cert=(X509Certificate)certificate;  if ((certificateEquals != null) && !certificateEquals.equals(cert)) {    return false;  }  if ((serialNumber != null) && !serialNumber.equals(cert.getSerialNumber())) {    return false;  }  if ((issuer != null) && !issuer.equals(cert.getIssuerX500Principal())) {    return false;  }  if ((subject != null) && !subject.equals(cert.getSubjectX500Principal())) {    return false;  }  if ((subjectKeyIdentifier != null) && !Arrays.equals(subjectKeyIdentifier,getExtensionValue(cert,"2.5.29.14"))) {    return false;  }  if ((authorityKeyIdentifier != null) && !Arrays.equals(authorityKeyIdentifier,getExtensionValue(cert,"2.5.29.35"))) {    return false;  }  if (certificateValid != null) {    try {      cert.checkValidity(certificateValid);    } catch (    CertificateExpiredException e) {      return false;    }catch (    CertificateNotYetValidException e) {      return false;    }  }  if (privateKeyValid != null) {    try {      byte[] bytes=getExtensionValue(cert,"2.5.29.16");      if (bytes == null) {        return false;      }      PrivateKeyUsagePeriod pkup=(PrivateKeyUsagePeriod)PrivateKeyUsagePeriod.ASN1.decode(bytes);      Date notBefore=pkup.getNotBefore();      Date notAfter=pkup.getNotAfter();      if ((notBefore == null) && (notAfter == null)) {        return false;      }      if ((notBefore != null) && notBefore.compareTo(privateKeyValid) > 0) {        return false;      }      if ((notAfter != null) && notAfter.compareTo(privateKeyValid) < 0) {        return false;      }    } catch (    IOException e) {      return false;    }  }  if (subjectPublicKeyAlgID != null) {    try {      byte[] encoding=cert.getPublicKey().getEncoded();      AlgorithmIdentifier ai=((SubjectPublicKeyInfo)SubjectPublicKeyInfo.ASN1.decode(encoding)).getAlgorithmIdentifier();      if (!subjectPublicKeyAlgID.equals(ai.getAlgorithm())) {        return false;      }    } catch (    IOException e) {      e.printStackTrace();      return false;    }  }  if (subjectPublicKey != null) {    if (!Arrays.equals(subjectPublicKey,cert.getPublicKey().getEncoded())) {      return false;    }  }  if (keyUsage != null) {    boolean[] ku=cert.getKeyUsage();    if (ku != null) {      int i=0;      int min_length=(ku.length < keyUsage.length) ? ku.length : keyUsage.length;      for (; i < min_length; i++) {        if (keyUsage[i] && !ku[i]) {          return false;        }      }      for (; i < keyUsage.length; i++) {        if (keyUsage[i]) {          return false;        }      }    }  }  if (extendedKeyUsage != null) {    try {      List keyUsage=cert.getExtendedKeyUsage();      if (keyUsage != null) {        if (!keyUsage.containsAll(extendedKeyUsage)) {          return false;        }      }    } catch (    CertificateParsingException e) {      return false;    }  }  if (pathLen != -1) {    int p_len=cert.getBasicConstraints();    if ((pathLen < 0) && (p_len >= 0)) {      return false;    }    if ((pathLen > 0) && (pathLen > p_len)) {      return false;    }  }  if (subjectAltNames != null) {    PASSED:     try {      byte[] bytes=getExtensionValue(cert,"2.5.29.17");      if (bytes == null) {        return false;      }      List<GeneralName> sans=((GeneralNames)GeneralNames.ASN1.decode(bytes)).getNames();      if ((sans == null) || (sans.size() == 0)) {        return false;      }      boolean[][] map=new boolean[9][];      for (int i=0; i < 9; i++) {        map[i]=(subjectAltNames[i] == null) ? EmptyArray.BOOLEAN : new boolean[subjectAltNames[i].size()];      }      for (      GeneralName name : sans) {        int tag=name.getTag();        for (int i=0; i < map[tag].length; i++) {          if (subjectAltNames[tag].get(i).equals(name)) {            if (!matchAllNames) {              break PASSED;            }            map[tag][i]=true;          }        }      }      if (!matchAllNames) {        return false;      }      for (int tag=0; tag < 9; tag++) {        for (int name=0; name < map[tag].length; name++) {          if (!map[tag][name]) {            return false;          }        }      }    } catch (    IOException e) {      e.printStackTrace();      return false;    }  }  if (nameConstraints != null) {    if (!nameConstraints.isAcceptable(cert)) {      return false;    }  }  if (policies != null) {    byte[] bytes=getExtensionValue(cert,"2.5.29.32");    if (bytes == null) {      return false;    }    if (policies.size() == 0) {      return true;    }    PASSED:     try {      List<PolicyInformation> policyInformations=((CertificatePolicies)CertificatePolicies.ASN1.decode(bytes)).getPolicyInformations();      for (      PolicyInformation policyInformation : policyInformations) {        if (policies.contains(policyInformation.getPolicyIdentifier())) {          break PASSED;        }      }      return false;    } catch (    IOException e) {      return false;    }  }  if (pathToNames != null) {    byte[] bytes=getExtensionValue(cert,"2.5.29.30");    if (bytes != null) {      NameConstraints nameConstraints;      try {        nameConstraints=(NameConstraints)NameConstraints.ASN1.decode(bytes);      } catch (      IOException e) {        return false;      }      if (!nameConstraints.isAcceptable(pathToNames)) {        return false;      }    }  }  return true;}  }
class C{  public frameset addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public String toString(boolean displayPendingRequests){  StringBuffer sb=new StringBuffer("DLockGrantToken");  sb.append("@").append(Integer.toHexString(hashCode()));synchronized (this) {    sb.append(" {name: ").append(getName());    sb.append(", isGranted: ").append(isLeaseHeld());    sb.append(", isDestroyed: ").append(this.destroyed);    sb.append(", accessCount: ").append(this.accessCount);    sb.append(", lessee: ").append(this.lessee);    sb.append(", leaseExpireTime: ").append(this.leaseExpireTime);    sb.append(", leaseId: ").append(this.leaseId);    sb.append(", lesseeThread: ").append(this.lesseeThread);    if (displayPendingRequests) {      sb.append(", pendingRequests: ").append(pendingRequestsToString());    }    sb.append("}");  }  return sb.toString();}  }
class C{  public Pattern pattern(){  return parentPattern;}  }
class C{  public void refresh(){  if (mUser.isLogin()) {    scanAll();  } else {    scanSta();  }}  }
class C{  public static org.w3c.dom.Document loadDocument(InputStream xmlStream){  try {    return getDocumentBuilderFactory().newDocumentBuilder().parse(xmlStream);  } catch (  UnsupportedEncodingException e) {    throw new Error("UTF-8 must be supported");  }catch (  Exception e) {    throw new XmlException(e);  }}  }
class C{  public void initializeRanges(int upper){  m_outputTypes.setUpper(upper);}  }
class C{  public boolean isPostConstructCalled(){  return this.postConstructCalled;}  }
class C{  public static void requireLoad(){  loadTask.requireLoaded();}  }
class C{  public static byte[] floatToRegisters(float f){  return intToRegisters(Float.floatToIntBits(f));}  }
class C{  public void addRenderingHints(Map<?,?> hints){  boolean customHintPresent=false;  Iterator<?> iter=hints.keySet().iterator();  while (iter.hasNext()) {    Object key=iter.next();    if (key == SunHints.KEY_RENDERING || key == SunHints.KEY_ANTIALIASING || key == SunHints.KEY_TEXT_ANTIALIASING || key == SunHints.KEY_FRACTIONALMETRICS || key == SunHints.KEY_TEXT_ANTIALIAS_LCD_CONTRAST || key == SunHints.KEY_STROKE_CONTROL || key == SunHints.KEY_INTERPOLATION) {      setRenderingHint((Key)key,hints.get(key));    } else {      customHintPresent=true;    }  }  if (customHintPresent) {    if (this.hints == null) {      this.hints=makeHints(hints);    } else {      this.hints.putAll(hints);    }  }}  }
class C{  protected byte[] streamToByteArray(InputStream inputStream) throws IOException {  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    byte[] buffer=new byte[40960];    int bytesRead;    while ((bytesRead=inputStream.read(buffer)) != -1) {      baos.write(buffer,0,bytesRead);    }    return baos.toByteArray();  }  finally {    if (inputStream != null) {      inputStream.close();    }  }}  }
class C{  private void checkState(){  if (!start) {    throw new IllegalStateException("Cannot visit member before visit has been called.");  }  if (end) {    throw new IllegalStateException("Cannot visit member after visitEnd has been called.");  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  if (this instanceof Cloneable) {    return super.clone();  } else {    throw new CloneNotSupportedException();  }}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  private void parsePresenceWatcher(Node node){}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public ClassClassPath(Class c){  thisClass=c;}  }
class C{  public A next(){  A x=elems.head;  if (!elems.isEmpty()) {    elems=elems.tail;    if (elems.isEmpty())     last=null;    count--;  }  return x;}  }
class C{  public OMRaster(double lt,double ln,int w,int h,int[] pix){  super(RENDERTYPE_LATLON,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  setColorModel(COLORMODEL_DIRECT);  lat=lt;  lon=ln;  width=w;  height=h;  pixels=pix;  if (pixels == null || pixels.length == 0)   pixels=new int[height * width];}  }
class C{  @SideEffectFree public InputSource(String systemId){  setSystemId(systemId);}  }
class C{  @Override public void collectMetaInformation(final GamlProperties meta){}  }
class C{  @Override public FileLock tryLock(long position,long size,boolean shared) throws IOException {  throw new IOException("Method is unsupported.");}  }
class C{  public boolean isSetError(){  return this.error != null;}  }
class C{  public String generateMATSimConfig(){  Config config=new Config();  ConfigGroup ippcm=config.createModule(MatrixBasedPtRouterConfigGroup.GROUP_NAME);  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_STOPS,this.ptStops);  ippcm.addParam(MatrixBasedPtRouterConfigGroup.USING_PT_STOPS,this.usePtStops);  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_TIMES,this.ptTravelTimes);  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_DISTANCES,this.ptTravelDistances);  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH,this.useTravelTimesAndDistances);  ConfigGroup acm=config.createModule(AccessibilityConfigGroup.GROUP_NAME);  acm.addParam(AccessibilityConfigGroup.TIME_OF_DAY,this.timeOfDay + "");  ChangeModeConfigGroup changeModeConfig=ConfigUtils.addOrGetModule(config,ChangeModeConfigGroup.CONFIG_MODULE,ChangeModeConfigGroup.class);  String[] str={"car","pt"};  changeModeConfig.setModes(str);  ConfigGroup strategyModule=config.createModule(strategyModuleName);  strategyModule.addParam(startegyModule4ProbabilityPramName,startegyModuleProbabilityValue + "");  strategyModule.addParam(startegyModule4ParamName,DefaultPlanStrategiesModule.DefaultStrategy.ChangeLegMode.toString());  ConfigGroup networkModule=config.createModule(NetworkConfigGroup.GROUP_NAME);  networkModule.addParam(networkParamName,this.getNetworkInputFileName());  ConfigGroup contolerModule=config.createModule(ControlerConfigGroup.GROUP_NAME);  contolerModule.addParam(controlerFirstIterationPramName,Long.toString(getFirstIteration()));  contolerModule.addParam(controlerLastIterationPramName,Long.toString(lastIteration));  ConfigGroup planCalcScoreModule=config.createModule(PlanCalcScoreConfigGroup.GROUP_NAME);  planCalcScoreModule.addParam(activityType0ParamName,"home");  planCalcScoreModule.addParam(activityTypicalDuration0ParamName,activityTypicalDuration0Value);  planCalcScoreModule.addParam(activityType1ParamName,"work");  planCalcScoreModule.addParam(activityTypicalDuration1ParamName,activityTypicalDuration1Value);  planCalcScoreModule.addParam(activityOpeningTime1ParamName,activityTypicalDuration1Value);  planCalcScoreModule.addParam(activityLatestStartTime1ParamName,activityLatestStartTime1Value);  ConfigGroup plansModule=config.createModule(PlansConfigGroup.GROUP_NAME);  plansModule.addParam(plansPramName,inputPlansFileName);  ConfigGroup qsimModule=config.createModule(QSimConfigGroup.GROUP_NAME);  qsimModule.addParam(qsimNumberOfThreadsPramName,qsimNumberOfThreadsValue + "");  qsimModule.addParam(flowCapacityFactorParamName,flowCapacityFactorValue + "");  qsimModule.addParam(storageCapacityFactorParamName,storageCapacityFactorValue + "");  qsimModule.addParam(stuckTimeParamName,stuckTimeValue + "");  qsimModule.addParam(endTimeParamName,endTimeValue);  ConfigGroup planCalcRouteModule=config.createModule(PlansCalcRouteConfigGroup.GROUP_NAME);  planCalcRouteModule.addParam(beelineDistanceFactorParamName,beelineDistanceFactorValue + "");  planCalcRouteModule.addParam(teleportedModeSpeedWalkParamName,teleportedModeSpeedWalkValue + "");  planCalcRouteModule.addParam(teleportedModeSpeedBikeParamName,teleportedModeSpeedBikeValue + "");  planCalcRouteModule.addParam(teleportedModeSpeedPtParamName,teleportedModeSpeedPtValue + "");  return writeConfigFile(config);}  }
class C{  public RegisterSpec specForRegister(int reg){  int sz=size();  for (int i=0; i < sz; i++) {    RegisterSpec rs;    rs=get(i);    if (rs.getReg() == reg) {      return rs;    }  }  return null;}  }
class C{  public void stopMonitoring(){  m_Monitoring=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.612 -0500",hash_original_method="E928D18936C3E8793DB3C75F90F53AE7",hash_generated_method="5BDA2AC05092C85B7B80EFD5084E8B80") public boolean decodeXWapInitiatorURI(int startIndex){  return decodeTextString(startIndex);}  }
class C{  public final IntGrid2D add(IntGrid2D withThis){  checkBounds(withThis);  int[][] ofield=withThis.field;  int[] ofieldx=null;  int[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    ofieldx=ofield[x];    for (int y=0; y < height; y++) {      assert sim.util.LocationLog.it(this,new Int2D(x,y));      fieldx[y]+=ofieldx[y];    }  }  return this;}  }
class C{  @HLEFunction(nid=0x48B602B7,version=271) public int sceJpegDeleteMJpeg(){  return 0;}  }
class C{  public ProfileOptions build(){  return new ProfileOptions(this);}  }
class C{  V readValueUnderLock(HashEntry<V> e){  lock();  try {    return e.value;  }  finally {    unlock();  }}  }
class C{  public void handleLocationUpdates(){  getUngzipedResponseContent();  if (_bytes == null || _bytes.length < 18)   return;  ByteArrayOutputStream baos=new ByteArrayOutputStream(_bytes.length + 20);  int bytesOffset=0;  for (int i=0; i + 17 < _bytes.length; i++) {    if (_bytes[i] == 'd' && _bytes[i + 1] == 'o' && _bytes[i + 2] == 'c' && _bytes[i + 3] == 'u' && _bytes[i + 4] == 'm' && _bytes[i + 5] == 'e' && _bytes[i + 6] == 'n' && _bytes[i + 7] == 't' && _bytes[i + 8] == '.' && _bytes[i + 9] == 'd' && _bytes[i + 10] == 'o' && _bytes[i + 11] == 'm' && _bytes[i + 12] == 'a' && _bytes[i + 13] == 'i' && _bytes[i + 14] == 'n' && ((_bytes[i + 15] == '=' && _bytes[i + 16] != '=') || (_bytes[i + 15] == ' ' && _bytes[i + 16] == '=' && _bytes[i + 17] != '='))) {      int len=i - bytesOffset;      baos.write(_bytes,bytesOffset,len);      bytesOffset+=len;      baos.write(IFRAME_DOMAIN_TOO,0,IFRAME_DOMAIN_TOO.length);      i=i + (_bytes[i + 15] == ' ' ? 17 : 16);      continue;    }  }  if (baos.size() > 0) {    int len=_bytes.length - bytesOffset;    baos.write(_bytes,bytesOffset,len);    bytesOffset+=len;    _bytes=baos.toByteArray();    try {      ByteArrayOutputStream oByteArr=new ByteArrayOutputStream(_bytes.length * 3 / 4);      OutputStream oGzip=new GZIPOutputStream(oByteArr);      oGzip.write(_bytes);      oGzip.close();      _gzipedBytes=oByteArr.toByteArray();      _isGziped=true;      _isDeflated=false;    } catch (    IOException exc) {      _gzipedBytes=null;      _isGziped=false;      _isDeflated=false;    }  }}  }
class C{  public RopMethod process(){  int szBlocks=blocks.size();  BitSet toDelete=new BitSet(blocks.getMaxLabel());  for (int bindex=0; bindex < szBlocks; bindex++) {    BasicBlock b=blocks.get(bindex);    if (toDelete.get(b.getLabel())) {      continue;    }    IntList preds=ropMethod.labelToPredecessors(b.getLabel());    int szPreds=preds.size();    for (int i=0; i < szPreds; i++) {      int iLabel=preds.get(i);      BasicBlock iBlock=blocks.labelToBlock(iLabel);      if (toDelete.get(iLabel) || iBlock.getSuccessors().size() > 1 || iBlock.getFirstInsn().getOpcode().getOpcode() == RegOps.MOVE_RESULT) {        continue;      }      IntList toCombine=new IntList();      for (int j=i + 1; j < szPreds; j++) {        int jLabel=preds.get(j);        BasicBlock jBlock=blocks.labelToBlock(jLabel);        if (jBlock.getSuccessors().size() == 1 && compareInsns(iBlock,jBlock)) {          toCombine.add(jLabel);          toDelete.set(jLabel);        }      }      combineBlocks(iLabel,toCombine);    }  }  for (int i=szBlocks - 1; i >= 0; i--) {    if (toDelete.get(newBlocks.get(i).getLabel())) {      newBlocks.set(i,null);    }  }  newBlocks.shrinkToFit();  newBlocks.setImmutable();  return new RopMethod(newBlocks,ropMethod.getFirstLabel());}  }
class C{  public static PrettyPrint indentWithTabs(){  return new PrettyPrint(new char[]{'\t'});}  }
class C{  @Experimental public boolean hasThrowable(){  Object o=state.get();  return nl.isError(o);}  }
class C{  private void append(StringBuffer result,String string,FieldDelegate delegate,FieldPosition[] positions,Format.Field signAttribute){  int start=result.length();  if (string.length() > 0) {    result.append(string);    for (int counter=0, max=positions.length; counter < max; counter++) {      FieldPosition fp=positions[counter];      Format.Field attribute=fp.getFieldAttribute();      if (attribute == Field.SIGN) {        attribute=signAttribute;      }      delegate.formatted(attribute,attribute,start + fp.getBeginIndex(),start + fp.getEndIndex(),result);    }  }}  }
class C{  public BufferedImage buildBufferedImage(Dimension size){  return new BufferedImage(size.width,size.height,BufferedImage.TYPE_INT_ARGB);}  }
class C{  @SuppressWarnings("unchecked") private MapSettings(MapSettings other){  boardWidth=other.getBoardWidth();  boardHeight=other.getBoardHeight();  mapWidth=other.getMapWidth();  mapHeight=other.getMapHeight();  medium=other.getMedium();  boardsSelected=(ArrayList<String>)other.getBoardsSelectedVector().clone();  boardsAvailable=(ArrayList<String>)other.getBoardsAvailableVector().clone();  invertNegativeTerrain=other.getInvertNegativeTerrain();  mountainHeightMin=other.getMountainHeightMin();  mountainHeightMax=other.getMountainHeightMax();  mountainPeaks=other.getMountainPeaks();  mountainStyle=other.getMountainStyle();  mountainWidthMin=other.getMountainWidthMin();  mountainWidthMax=other.getMountainWidthMax();  hilliness=other.getHilliness();  cliffs=other.getCliffs();  range=other.getRange();  probInvert=other.getProbInvert();  minWaterSpots=other.getMinWaterSpots();  maxWaterSpots=other.getMaxWaterSpots();  minWaterSize=other.getMinWaterSize();  maxWaterSize=other.getMaxWaterSize();  probDeep=other.getProbDeep();  minForestSpots=other.getMinForestSpots();  maxForestSpots=other.getMaxForestSpots();  minForestSize=other.getMinForestSize();  maxForestSize=other.getMaxForestSize();  probHeavy=other.getProbHeavy();  minRoughSpots=other.getMinRoughSpots();  maxRoughSpots=other.getMaxRoughSpots();  minRoughSize=other.getMinRoughSize();  maxRoughSize=other.getMaxRoughSize();  minSandSpots=other.getMinSandSpots();  maxSandSpots=other.getMaxSandSpots();  minSandSize=other.getMinSandSize();  maxSandSize=other.getMaxSandSize();  minPlantedFieldSpots=other.getMinPlantedFieldSpots();  maxPlantedFieldSpots=other.getMaxPlantedFieldSpots();  minPlantedFieldSize=other.getMinPlantedFieldSize();  maxPlantedFieldSize=other.getMaxPlantedFieldSize();  minSwampSpots=other.getMinSwampSpots();  maxSwampSpots=other.getMaxSwampSpots();  minSwampSize=other.getMinSwampSize();  maxSwampSize=other.getMaxSwampSize();  minPavementSpots=other.getMinPavementSpots();  maxPavementSpots=other.getMaxPavementSpots();  minPavementSize=other.getMinPavementSize();  maxPavementSize=other.getMaxPavementSize();  minRubbleSpots=other.getMinRubbleSpots();  maxRubbleSpots=other.getMaxRubbleSpots();  minRubbleSize=other.getMinRubbleSize();  maxRubbleSize=other.getMaxRubbleSize();  minFortifiedSpots=other.getMinFortifiedSpots();  maxFortifiedSpots=other.getMaxFortifiedSpots();  minFortifiedSize=other.getMinFortifiedSize();  maxFortifiedSize=other.getMaxFortifiedSize();  minIceSpots=other.getMinIceSpots();  maxIceSpots=other.getMaxIceSpots();  minIceSize=other.getMinIceSize();  maxIceSize=other.getMaxIceSize();  probRoad=other.getProbRoad();  probRiver=other.getProbRiver();  probCrater=other.getProbCrater();  minRadius=other.getMinRadius();  maxRadius=other.getMaxRadius();  minCraters=other.getMinCraters();  maxCraters=other.getMaxCraters();  algorithmToUse=other.getAlgorithmToUse();  theme=other.getTheme();  probFlood=other.getProbFlood();  probForestFire=other.getProbForestFire();  probFreeze=other.getProbFreeze();  probDrought=other.getProbDrought();  fxMod=other.getFxMod();  cityBlocks=other.getCityBlocks();  cityType=other.getCityType();  cityMinCF=other.getCityMinCF();  cityMaxCF=other.getCityMaxCF();  cityMinFloors=other.getCityMinFloors();  cityMaxFloors=other.getCityMaxFloors();  cityDensity=other.getCityDensity();  boardBuildings=other.getBoardBuildings();  townSize=other.getTownSize();}  }
class C{  protected void valueChanged(){  setPresentsDefaultValue(false);  boolean oldState=isValid;  refreshValidState();  if (isValid != oldState) {    fireStateChanged(IS_VALID,oldState,isValid);  }  String newValue=textField.getText();  if (!newValue.equals(oldValue)) {    fireValueChanged(VALUE,oldValue,newValue);    oldValue=newValue;  }}  }
class C{  @Uninterruptible @Pure public static GPR lookup(int num){  return vals[num];}  }
class C{  public boolean isLoaded(){  return !areas.isEmpty();}  }
class C{  private static BeanInfo findExplicitBeanInfo(Class<?> beanClass){  return ThreadGroupContext.getContext().getBeanInfoFinder().find(beanClass);}  }
class C{  public static String addCvDescription(String toolTip,String cvDescription,String mask){  String descString=cvDescription;  String temp=getMaskDescription(mask);  if (temp.length() > 0) {    descString=descString + " " + temp;  }  if (PaneProgFrame.getShowCvNumbers() && (descString != null)) {    if (toolTip == null) {      toolTip=descString;    } else {      toolTip=addTextHTMLaware(toolTip," (" + descString + ")");    }  } else   if (toolTip == null) {    toolTip="";  }  return toolTip;}  }
class C{  XSLTElementDef(Class classObject,XSLTElementProcessor contentHandler,int type){  this.m_classObject=classObject;  this.m_type=type;  setElementProcessor(contentHandler);}  }
class C{  public void load(Element element,Object o){  LayoutEditor p=(LayoutEditor)o;  String name=element.getAttribute("ident").getValue();  int type=PositionablePoint.ANCHOR;  double x=0.0;  double y=0.0;  try {    x=element.getAttribute("x").getFloatValue();    y=element.getAttribute("y").getFloatValue();    type=element.getAttribute("type").getIntValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert positionablepoint attribute");  }  PositionablePoint l=new PositionablePoint(name,type,new Point2D.Double(x,y),p);  Attribute a=element.getAttribute("connect1name");  if (a != null) {    l.trackSegment1Name=a.getValue();  }  a=element.getAttribute("connect2name");  if (a != null) {    l.trackSegment2Name=a.getValue();  }  a=element.getAttribute("eastboundsignal");  if (a != null) {    l.setEastBoundSignal(a.getValue());  }  a=element.getAttribute("westboundsignal");  if (a != null) {    l.setWestBoundSignal(a.getValue());  }  a=element.getAttribute("eastboundsignalmast");  if (a != null) {    l.setEastBoundSignalMast(a.getValue());  }  a=element.getAttribute("westboundsignalmast");  if (a != null) {    l.setWestBoundSignalMast(a.getValue());  }  a=element.getAttribute("eastboundsensor");  if (a != null) {    l.setEastBoundSensor(a.getValue());  }  a=element.getAttribute("westboundsensor");  if (a != null) {    l.setWestBoundSensor(a.getValue());  }  if (type == PositionablePoint.EDGE_CONNECTOR && element.getAttribute("linkedpanel") != null && element.getAttribute("linkpointid") != null) {    String linkedEditorName=element.getAttribute("linkedpanel").getValue();    LayoutEditor linkedEditor=(LayoutEditor)jmri.jmrit.display.PanelMenu.instance().getEditorByName(linkedEditorName);    if (linkedEditor != null) {      String linkedPoint=element.getAttribute("linkpointid").getValue();      for (      PositionablePoint point : linkedEditor.pointList) {        if (point.getType() == PositionablePoint.EDGE_CONNECTOR && point.getID().equals(linkedPoint)) {          point.setLinkedPoint(l);          l.setLinkedPoint(point);          break;        }      }    }  }  p.pointList.add(l);}  }
class C{  public static boolean validateVersion(String version){  return version.matches("\\d+\\.\\d+(\\.\\d+)?");}  }
class C{  public void visitCode(){  if (mv != null) {    mv.visitCode();  }}  }
class C{  public boolean isBadPin(String pin){  final int len=pin.length();  if (len == 4) {    final int start=Integer.parseInt(pin.subSequence(0,2).toString());    final int end=Integer.parseInt(pin.subSequence(2,4).toString());    if (start == 19 || (start == 20 && end < 30)) {      return true;    }    if (start == end) {      return true;    }  }  if (len % 2 == 0) {    boolean paired=true;    for (int i=0; i < len - 1; i+=2) {      if (pin.charAt(i) != pin.charAt(i + 1)) {        paired=false;      }    }    if (paired) {      return true;    }  }  if (isNumericalRun(pin)) {    return true;  }  if (isIncompleteNumericalRun(pin)) {    return true;  }  for (  final String blacklisted : BLACKLISTED_PINS) {    if (blacklisted.equals(pin)) {      return true;    }  }  return false;}  }
class C{  public static void sort(char[] array){  sort(0,array.length,array);}  }
class C{  public boolean isCompound(){  return (fEventType & COMPOUND) != 0;}  }
class C{  public void testProviderConfig() throws Exception {  ObjectMapper mapper=new ObjectMapper();  assertEquals(0,mapper.getSerializerProvider().cachedSerializersCount());  Map<String,Object> result=this.writeAndMap(mapper,new AnnoBean());  assertEquals(2,result.size());  assertEquals(Integer.valueOf(1),result.get("x"));  assertEquals(Integer.valueOf(2),result.get("y"));  int count=mapper.getSerializerProvider().cachedSerializersCount();  if (count < 2) {    fail("Should have at least 2 cached serializers, got " + count);  }  mapper.getSerializerProvider().flushCachedSerializers();  assertEquals(0,mapper.getSerializerProvider().cachedSerializersCount());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  public boolean isPublic(){  return Modifier.isPublic(getAccessFlags());}  }
class C{  public static Bitmap decodeBitmapFromBytes(byte[] bytes,int sampleSize){  final BitmapFactory.Options options;  if (sampleSize <= 1) {    options=null;  } else {    options=new BitmapFactory.Options();    options.inSampleSize=sampleSize;  }  return BitmapFactory.decodeByteArray(bytes,0,bytes.length,options);}  }
class C{  private RecordBuffer<R> onTakeSuccess(RecordBuffer<R> buffer,long elapsed){  queuedRecords-=buffer.sizeRecords();  queuedBytes-=buffer.sizeBytesWithOverhead();  checkPendingRecords();  totalTakenBuffers.incrementAndGet();  notFull.signal();  return buffer;}  }
class C{  public AmusePark(){  super();}  }
class C{  public void addPoint(Vector3 point1,Vector3 controlPoint1,Vector3 controlPoint2,Vector3 point2){  mPoint1=point1;  mControlPoint1=controlPoint1;  mControlPoint2=controlPoint2;  mPoint2=point2;}  }
class C{  public void annotateTo(AnnotatedOutput out,String prefix){  out.annotate(0,prefix + "visibility: " + annotation.getVisibility().toHuman());  out.annotate(0,prefix + "type: " + annotation.getType().toHuman());  for (  NameValuePair pair : annotation.getNameValuePairs()) {    CstString name=pair.getName();    Constant value=pair.getValue();    out.annotate(0,prefix + name.toHuman() + ": "+ ValueEncoder.constantToHuman(value));  }}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public FtpServer() throws IOException {  this(21);}  }
class C{  public boolean isVersionStrict(){  return versionStrict;}  }
class C{  public X509AttributeCertificateHolder(AttributeCertificate attrCert){  this.attrCert=attrCert;  this.extensions=attrCert.getAcinfo().getExtensions();}  }
class C{  public void onLongPress(long time,float x,float y){  getActiveStripLayoutHelper().onLongPress(time,x,y);}  }
class C{  private ICloseableIterator<IBindingSet> doBigdataServiceCall(final BigdataServiceCall serviceCall,final IBindingSet left[]) throws Exception {  return serviceCall.call(left);}  }
class C{  public void savePreferences(final boolean flush){  saveMusicPreferences(flush);  saveSoundPreferences(flush);}  }
class C{  public final void resetElems(){  for (int i=0; i < this.nodes.length; i++) {    int[] node=this.nodes[i];    if (node != null) {      for (int j=3; j < node.length; j+=getElemLength()) {        node[j]&=0x7FFFFFFF;      }    }  }}  }
class C{  public static void close(PrintStream writer){  writer.println("</server>");  writer.close();}  }
class C{  private void selectArrowTools(){  addDirectedEdge.setEnabled(true);  addBidirectedEdge.setEnabled(true);}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  static public Class<?> unbox(final Class<?> type){  return UNBOX.get(type);}  }
class C{  public static void shutDownWithErrMsg(String errorMsg){  if (errorMsg != null) {    LOG.error(errorMsg);  }  LOG.info("Shutting down ApexUnit");  Thread.dumpStack();  System.exit(-1);}  }
class C{  public void verify(PublicKey publicKey,int responseCode,String signedData,String signature){  String userId=null;  ResponseData data=null;  if (responseCode == LICENSED || responseCode == NOT_LICENSED || responseCode == LICENSED_OLD_KEY) {    try {      Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);      sig.initVerify(publicKey);      sig.update(signedData.getBytes());      if (!sig.verify(Base64.decode(signature))) {        Log.e(TAG,"Signature verification failed.");        handleInvalidResponse();        return;      }    } catch (    Base64DecoderException e) {      Log.e(TAG,"Could not Base64-decode signature.");      handleInvalidResponse();      return;    }catch (    Exception e) {      throw new RuntimeException(e);    }    try {      data=ResponseData.parse(signedData);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Could not parse response.");      handleInvalidResponse();      return;    }    if (data.responseCode != responseCode) {      Log.e(TAG,"Response codes don't match.");      handleInvalidResponse();      return;    }    if (data.nonce != mNonce) {      Log.e(TAG,"Nonce doesn't match.");      handleInvalidResponse();      return;    }    if (!data.packageName.equals(mPackageName)) {      Log.e(TAG,"Package name doesn't match.");      handleInvalidResponse();      return;    }    if (!data.versionCode.equals(mVersionCode)) {      Log.e(TAG,"Version codes don't match.");      handleInvalidResponse();      return;    }    userId=data.userId;    if (TextUtils.isEmpty(userId)) {      Log.e(TAG,"User identifier is empty.");      handleInvalidResponse();      return;    }  }switch (RANDOM ^ ~responseCode) {case RANDOM ^ ~LICENSED:case RANDOM ^ ~LICENSED_OLD_KEY:    int limiterResponse=mDeviceLimiter.isDeviceAllowed(userId);  handleResponse(limiterResponse,data);break;case RANDOM ^ ~NOT_LICENSED:handleResponse(Policy.NOT_LICENSED,data);break;case RANDOM ^ ~ERROR_CONTACTING_SERVER:Log.w(TAG,"Error contacting licensing server.");handleResponse(Policy.RETRY,data);break;case RANDOM ^ ~ERROR_SERVER_FAILURE:Log.w(TAG,"An error has occurred on the licensing server.");handleResponse(Policy.RETRY,data);break;case RANDOM ^ ~ERROR_OVER_QUOTA:Log.w(TAG,"Licensing server is refusing to talk to this device, over quota.");handleResponse(Policy.RETRY,data);break;case RANDOM ^ ~ERROR_INVALID_PACKAGE_NAME:handleApplicationError(LicenseCheckerCallback.ERROR_INVALID_PACKAGE_NAME);break;case RANDOM ^ ~ERROR_NON_MATCHING_UID:handleApplicationError(LicenseCheckerCallback.ERROR_NON_MATCHING_UID);break;case RANDOM ^ ~ERROR_NOT_MARKET_MANAGED:handleApplicationError(LicenseCheckerCallback.ERROR_NOT_MARKET_MANAGED);break;default :Log.e(TAG,"Unknown response code for license check.");handleInvalidResponse();}}  }
class C{  public static Object convert(final Class<?> targetType,final Object value){  if (targetType.isInstance(value) == true) {    return value;  }  return ConverterBean.getInstance().convert(value,targetType);}  }
class C{  private void markCGForDeletion(BlockConsistencyGroup consistencyGroup){  if (!consistencyGroup.getInactive()) {    consistencyGroup.setStorageController(null);    consistencyGroup.setInactive(true);    _dbClient.updateObject(consistencyGroup);  }}  }
class C{  public Matrix predictMean(Matrix xstar){  if (alpha == null || L == null) {    System.out.println("GP needs to be trained first..");    System.exit(-1);  }  if (xstar.getColumnDimension() != X.getColumnDimension())   throw new IllegalArgumentException("Wrong size of the input" + xstar.getColumnDimension() + " instead of "+ X.getColumnDimension());  Matrix[] star=covFunction.compute(logtheta,X,xstar);  Matrix Kstar=star[1];  Matrix ystar=Kstar.transpose().times(alpha);  return ystar;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public CloudSimShutdown(String name,int numUser) throws Exception {  super(name);  this.numUser=numUser;}  }
class C{  public synchronized void parse(InputStream in,String baseURI) throws IOException, RDFParseException, RDFHandlerException {  if (in == null) {    throw new IllegalArgumentException("Input stream must not be 'null'");  }  try {    parse(new InputStreamReader(new BOMInputStream(in,false),"UTF-8"),baseURI);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public void testHasAttributes1() throws Throwable {  Document doc;  NodeList addrList;  Node addrNode;  boolean state;  doc=(Document)load("staff",builder);  addrList=doc.getElementsByTagName("name");  addrNode=addrList.item(0);  state=addrNode.hasAttributes();  assertFalse("throw_False",state);}  }
class C{  public Vector positive(){  return new Vector(Math.abs(x),Math.abs(y),Math.abs(z));}  }
class C{  public void removeUser(String name) throws UsersRepositoryException {  EntityManager entityManager=entityManagerFactory.createEntityManager();  final EntityTransaction transaction=entityManager.getTransaction();  try {    transaction.begin();    if (entityManager.createNamedQuery("deleteUserByName").setParameter("name",name).executeUpdate() < 1) {      transaction.commit();      throw new UsersRepositoryException("User " + name + " does not exist");    } else {      transaction.commit();    }  } catch (  PersistenceException e) {    getLogger().debug("Failed to remove user",e);    if (transaction.isActive()) {      transaction.rollback();    }    throw new UsersRepositoryException("Failed to remove user " + name,e);  } finally {    entityManager.close();  }}  }
class C{  public StringAttributeRule(String name,String description,boolean optional){  this(name,description,null,optional,0,Integer.MAX_VALUE);}  }
class C{  @Override public void registerContentObserver(Uri uri,boolean notifyForDescendants,IContentObserver observer,int userHandle){  if (observer == null || uri == null) {    throw new IllegalArgumentException("You must pass a valid uri and observer");  }  final int callingUser=UserHandle.getCallingUserId();  if (callingUser != userHandle) {    mContext.enforceCallingOrSelfPermission(Manifest.permission.INTERACT_ACROSS_USERS_FULL,"no permission to observe other users' provider view");  }  if (userHandle < 0) {    if (userHandle == UserHandle.USER_CURRENT) {      userHandle=ActivityManager.getCurrentUser();    } else     if (userHandle != UserHandle.USER_ALL) {      throw new InvalidParameterException("Bad user handle for registerContentObserver: " + userHandle);    }  }synchronized (mRootNode) {    mRootNode.addObserverLocked(uri,observer,notifyForDescendants,mRootNode,Binder.getCallingUid(),Binder.getCallingPid(),userHandle);    if (false)     Log.v(TAG,"Registered observer " + observer + " at "+ uri+ " with notifyForDescendants "+ notifyForDescendants);  }}  }
class C{  public PM(double probability,double distributionIndex){  super();  this.probability=probability;  this.distributionIndex=distributionIndex;}  }
