class C{  public PKCS9Attribute(String name,Object value) throws IllegalArgumentException {  ObjectIdentifier oid=getOID(name);  if (oid == null)   throw new IllegalArgumentException("Unrecognized attribute name " + name + " constructing PKCS9Attribute.");  init(oid,value);}  }
class C{  public synchronized void reset() throws IOException {  getBufIfOpen();  if (markpos < 0) {    throw new IOException("Resetting to invalid mark");  }  pos=markpos;}  }
class C{  public int size(int access){  return keys(access).length;}  }
class C{  public NameResolutionException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static void assertBillingEventsForResource(EppResource resource,BillingEvent... expected) throws Exception {  assertThat(FluentIterable.from(getBillingEvents(resource)).transform(BILLING_EVENT_ID_STRIPPER)).containsExactlyElementsIn(FluentIterable.from(asList(expected)).transform(BILLING_EVENT_ID_STRIPPER));}  }
class C{  @Override protected void reloadSummaries(){  super.reloadSummaries();  int local, global;  local=mDPM.getPasswordQuality(mDeviceAdminSample);  global=mDPM.getPasswordQuality(null);  mPasswordQuality.setSummary(localGlobalSummary(qualityValueToString(local),qualityValueToString(global)));  local=mDPM.getPasswordMinimumLength(mDeviceAdminSample);  global=mDPM.getPasswordMinimumLength(null);  mMinLength.setSummary(localGlobalSummary(local,global));  local=mDPM.getPasswordMinimumLetters(mDeviceAdminSample);  global=mDPM.getPasswordMinimumLetters(null);  mMinLetters.setSummary(localGlobalSummary(local,global));  local=mDPM.getPasswordMinimumNumeric(mDeviceAdminSample);  global=mDPM.getPasswordMinimumNumeric(null);  mMinNumeric.setSummary(localGlobalSummary(local,global));  local=mDPM.getPasswordMinimumLowerCase(mDeviceAdminSample);  global=mDPM.getPasswordMinimumLowerCase(null);  mMinLowerCase.setSummary(localGlobalSummary(local,global));  local=mDPM.getPasswordMinimumUpperCase(mDeviceAdminSample);  global=mDPM.getPasswordMinimumUpperCase(null);  mMinUpperCase.setSummary(localGlobalSummary(local,global));  local=mDPM.getPasswordMinimumSymbols(mDeviceAdminSample);  global=mDPM.getPasswordMinimumSymbols(null);  mMinSymbols.setSummary(localGlobalSummary(local,global));  local=mDPM.getPasswordMinimumNonLetter(mDeviceAdminSample);  global=mDPM.getPasswordMinimumNonLetter(null);  mMinNonLetter.setSummary(localGlobalSummary(local,global));}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/failover-cancel") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList failoverCancel(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,BlockConsistencyGroup.class,"id");  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  final BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)queryResource(id);  if (!consistencyGroup.created()) {    throw APIException.badRequests.consistencyGroupNotCreated();  }  List<Copy> copies=param.getCopies();  if (copies.size() > 1) {    throw APIException.badRequests.failOverCancelCopiesParamCanOnlyBeOne();  }  Copy copy=copies.get(0);  ArgValidator.checkFieldUriType(copy.getCopyID(),VirtualArray.class,"copyId");  ArgValidator.checkFieldNotEmpty(copy.getType(),"type");  if (TechnologyType.RP.name().equalsIgnoreCase(copy.getType())) {    taskResp=performProtectionAction(id,copy,ProtectionOp.FAILOVER_CANCEL.getRestOp());    taskList.getTaskList().add(taskResp);  } else   if (TechnologyType.SRDF.name().equalsIgnoreCase(copy.getType())) {    taskResp=performSRDFProtectionAction(id,copy,ProtectionOp.FAILOVER_CANCEL.getRestOp());    taskList.getTaskList().add(taskResp);  } else {    throw APIException.badRequests.invalidCopyType(copy.getType());  }  return taskList;}  }
class C{  public static InputStream openFileOrResourceStream(String fileName,Class c){  if (fileName == null) {    String msg=Logging.getMessage("nullValue.FileIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Object streamOrException=WWIO.getFileOrResourceAsStream(fileName,c);  if (streamOrException instanceof Exception) {    String msg=Logging.getMessage("generic.CannotOpenFile",fileName);    throw new WWRuntimeException(msg,(Exception)streamOrException);  }  return (InputStream)streamOrException;}  }
class C{  public String toXML(){  return this.xmlString;}  }
class C{  void register(PhysicalObject2D objCol){  EndPoint epStart=new EndPoint(objCol,true,0);  EndPoint epEnd=new EndPoint(objCol,false,0);  arDimEPBags[0].add(epStart);  arDimEPBags[0].add(epEnd);  epStart=new EndPoint(objCol,true,1);  epEnd=new EndPoint(objCol,false,1);  arDimEPBags[1].add(epStart);  arDimEPBags[1].add(epEnd);  int index=objCol.getIndex();  if (index == 0)   arOS.add(null); else {    arOS.add(new OverlapStatus[index]);    for (int i=0; i < index; i++) {      OverlapStatus[] arTmp=(OverlapStatus[])arOS.objs[index];      arTmp[i]=new OverlapStatus();      arTmp[i].dimension[0]=false;      arTmp[i].dimension[1]=false;    }  }  insertionSort(0);  insertionSort(1);}  }
class C{  public KMLPointPlacemarkImpl(KMLTraversalContext tc,KMLPlacemark placemark,KMLAbstractGeometry geom){  super(((KMLPoint)geom).getCoordinates());  if (tc == null) {    String msg=Logging.getMessage("nullValue.TraversalContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (placemark == null) {    String msg=Logging.getMessage("nullValue.ParentIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.parent=placemark;  KMLPoint point=(KMLPoint)geom;  this.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  if (point.isExtrude())   this.setLineEnabled(true);  String altMode=point.getAltitudeMode();  if (!WWUtil.isEmpty(altMode)) {    if ("clampToGround".equals(altMode))     this.setAltitudeMode(WorldWind.CLAMP_TO_GROUND); else     if ("relativeToGround".equals(altMode))     this.setAltitudeMode(WorldWind.RELATIVE_TO_GROUND); else     if ("absolute".equals(altMode))     this.setAltitudeMode(WorldWind.ABSOLUTE);  }  if (this.parent.getVisibility() != null)   this.setVisible(this.parent.getVisibility());  if (placemark.getName() != null) {    this.setLabelText(placemark.getName());    this.setValue(AVKey.DISPLAY_NAME,placemark.getName());  }  String description=placemark.getDescription();  if (description != null)   this.setValue(AVKey.DESCRIPTION,description);  if (placemark.getSnippetText() != null)   this.setValue(AVKey.SHORT_DESCRIPTION,placemark.getSnippetText());  this.setValue(AVKey.CONTEXT,this.parent);}  }
class C{  @Override public VertexDecorator<V> createVertex(V delegate){  return new VertexDecorator<V>(delegate);}  }
class C{  public void putR8(double r8){  long bits=Double.doubleToLongBits(r8);  putINT64(bits);}  }
class C{  String normalizeString(String str){  return str.replaceAll("^[\\s]+|[\\s]+$","").replaceAll("\\s+"," ");}  }
class C{  private static void error(String cname){  System.err.println("BCEL class compatibility error.");  System.err.println("The version of class " + cname + " found was not compatible with\n"+ "FindBugs.  Please remove any BCEL libraries that may be interfering.  This may happen\n"+ "if you have an old version of BCEL or a library that includes an old version of BCEL\n"+ "in an \"endorsed\" directory.");}  }
class C{  int requestEndComm(){  return (writeTelegram(tgmEmpty,CMD_END_COMM,null));}  }
class C{  public void addInternalMenuBar(){  toolbars.add("North",NetworkMenuBar.getAppletMenuBar(this));}  }
class C{  public int executeRefresh(DatabaseConnection databaseConnection,T data,ObjectCache objectCache) throws SQLException {  @SuppressWarnings("unchecked") ID id=(ID)idField.extractJavaFieldValue(data);  T result=super.execute(databaseConnection,id,null);  if (result == null) {    return 0;  }  for (  FieldType fieldType : resultsFieldTypes) {    if (fieldType != idField) {      fieldType.assignField(data,fieldType.extractJavaFieldValue(result),false,objectCache);    }  }  return 1;}  }
class C{  public static <E extends Comparable<E>>boolean isLoopPresent(SingleLinkedList<E> list){  SingleLinkedNode<E> slow=list.head, fast=slow.next;  while (fast != null && fast.next != null) {    if (slow == fast) {      return true;    }    slow=slow.next;    fast=fast.next.next;  }  return false;}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public String toString(){  return "BadAttributeValueException: " + val;}  }
class C{  public String[] readNext() throws IOException {  String nextLine=getNextLine();  return hasNext ? parseLine(nextLine) : null;}  }
class C{  public int[] toIntArray(){  int[] result=new int[this.size()];  this.forEachWithIndex((IntIntProcedure)null);  return result;}  }
class C{  public static void writeln(String s){  writeln(s,true);}  }
class C{  public boolean isOverdue(){  return DUETYPE_Overdue.equals(getDueType());}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  private void openLink(){  if (article.url == null || article.url.length() == 0)   return;  String url=article.url;  if (article.url.contains(" ") || article.url.contains("\n"))   url=url.trim();  try {    Intent i=new Intent(Intent.ACTION_VIEW);    i.setData(Uri.parse(url));    startActivity(i);  } catch (  ActivityNotFoundException e) {    Log.e(TAG,"Couldn't find a suitable activity for the uri: " + url);  }}  }
class C{  public void dup2X2(){  mv.visitInsn(Opcodes.DUP2_X2);}  }
class C{  public static final String osVersion(){  return m_osVersion;}  }
class C{  private static boolean useHighContrastTheme(){  if (isWindows() && useSystemFonts()) {    Boolean highContrast=(Boolean)Toolkit.getDefaultToolkit().getDesktopProperty("win.highContrast.on");    return (highContrast == null) ? false : highContrast.booleanValue();  }  return false;}  }
class C{  public boolean containsLineFeeds(){  return isIsFirstWhiteSpace() || getLineFeeds() > 0;}  }
class C{  public OMGraphicList evaluateDbf(OMGraphicList retList,Projection mapProj){  if (dbf != null) {    OMGraphicList labels=new OMGraphicList();    retList.add(labels);    OMGraphicList testList=new OMGraphicList();    for (    OMGraphic omg : retList) {      if (omg != null) {        omg=dbf.evaluate(omg,labels,mapProj);        if (mapProj != null) {          omg.generate(mapProj);        }        testList.add(omg);      }    }    retList=testList;  }  return retList;}  }
class C{  public void clear(){  int h=head;  int t=tail;  if (h != t) {    head=tail=0;    int i=h;    int mask=elements.length - 1;    do {      elements[i]=null;      i=(i + 1) & mask;    } while (i != t);  }}  }
class C{  public static Path jobFile(Configuration conf,String usr,JobID jobId){  return new Path(stagingAreaDir(conf,usr),jobId.toString() + Path.SEPARATOR + MRJobConfig.JOB_CONF_FILE);}  }
class C{  public String clearTextual(String text){  if (text == null || text.isEmpty()) {    return "Usage: /clearSetting <setting>";  }  String[] split=text.split(" ");  String setting=split[0];  if (isBooleanSetting(setting)) {    return "Boolean settings can't be cleared.";  }  if (isLongSetting(setting)) {    return "Numeric settings can't be cleared.";  }  if (isStringSetting(setting)) {    setString(setting,"");    return "Setting '" + setting + "' set to empty string.";  }  return settingInvalidMessage(setting);}  }
class C{  private void firstLaunchOrAccountChangedCheck(Set<ContactId> grantedContacts,Set<ContactId> blockedContacts) throws PayloadException {  final String publicUri=ImsModule.getImsUserProfile().getPublicUri();  try {    boolean logActivated=sLogger.isActivated();    if (logActivated) {      sLogger.debug("First launch or account change check procedure");    }    mContactManager.flushRcsContactProvider();    ContactId me=null;    PhoneNumber number=ContactUtil.getValidPhoneNumberFromUri(publicUri);    if (number == null) {      if (logActivated) {        sLogger.error("Cannot parse user contact ".concat(publicUri));      }    } else {      me=ContactUtil.createContactIdFromValidatedData(number);    }    for (    ContactId contact : grantedContacts) {      if (me != null && !contact.equals(me)) {        if (!PresenceUtils.isNumberInAddressBook(contact)) {          if (logActivated) {            sLogger.debug(new StringBuilder("The RCS number ").append(contact).append(" was not found in the address book: add it").toString());          }          PresenceUtils.createRcsContactIfNeeded(mCtx,contact);        }        mContactManager.updateRcsStatusOrCreateNewContact(contact,RcsStatus.PENDING_OUT);      }    }    for (    ContactId contact : blockedContacts) {      if (!PresenceUtils.isNumberInAddressBook(contact)) {        if (logActivated) {          sLogger.debug(new StringBuilder("The RCS number ").append(contact).append(" was not found in the address book: add it").toString());        }        PresenceUtils.createRcsContactIfNeeded(mCtx,contact);        mContactManager.blockContact(contact);        mContactManager.updateRcsStatusOrCreateNewContact(contact,RcsStatus.BLOCKED);      }    }  } catch (  OperationApplicationException e) {    throw new PayloadException(new StringBuilder("Failed creating contact for URI : ").append(publicUri).toString(),e);  }catch (  ContactManagerException e) {    throw new PayloadException(new StringBuilder("Failed creating contact for URI : ").append(publicUri).toString(),e);  }catch (  FileAccessException e) {    throw new PayloadException(new StringBuilder("Failed creating contact for URI : ").append(publicUri).toString(),e);  }catch (  RemoteException e) {    throw new PayloadException(new StringBuilder("Failed creating contact for URI : ").append(publicUri).toString(),e);  }}  }
class C{  private DefaultSelectorProvider(){}  }
class C{  public boolean isConfigVersion(){  return configVersion;}  }
class C{  private Set<String> extractIds(Node n,String nodeName){  Set<String> idsList=null;  if (nodeName.equals(n.getLocalName())) {    idsList=new HashSet<>();    NodeList ids=n.getChildNodes();    for (int k=0, klen=ids.getLength(); k < klen; k++) {      Node idNode=ids.item(k);      if (NAME.equals(idNode.getLocalName())) {        String id=getNodeText(idNode);        if (id != null) {          idsList.add(id);        }      }      if (OTHERS.equals(idNode.getLocalName())) {        if (id != null) {          idsList.add(OTHERS_KEY);        }      }    }  }  return idsList;}  }
class C{  public void start(BundleContext context) throws Exception {  DefaultCodenvyClient defaultCodenvyClient=new DefaultCodenvyClient();  this.previous=CodenvyAPI.setClient(defaultCodenvyClient);  Dictionary props=new Properties();  props.put(CodenvyClient.class.getName(),DefaultCodenvyClient.class.getName());  context.registerService(CodenvyClient.class.getName(),defaultCodenvyClient,props);}  }
class C{  public Boolean isDynDNS(){  return dynDNS;}  }
class C{  public TimeEvent basicGetTimeEvent(){  return timeEvent;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_11:    return ((InternalEList<?>)getAnonymous_linkingOp_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_21:  return ((InternalEList<?>)getAnonymous_linkingOp_2_1()).basicRemove(otherEnd,msgs);case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_31:return ((InternalEList<?>)getAnonymous_linkingOp_3_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void addStats(long[] msg1UniqueMsgIdStats,long[] msg1TotalStats,long[] msg2UniqueMsgIdStats,long[] msg2TotalStats){  m_numberOfIntervals+=msg1UniqueMsgIdStats.length;  for (int i=0; i < msg1UniqueMsgIdStats.length; i++) {    final long msg1UniqueMsgIdStat=msg1UniqueMsgIdStats[i];    final long msg1TotalStat=msg1TotalStats[i];    final long msg2UniqueMsgIdStat=msg2UniqueMsgIdStats[i];    final long msg2TotalStat=msg2TotalStats[i];    if (msg1UniqueMsgIdStat == 0) {      m_intervalWithZeroCounts++;    } else {      m_minMsg1UniqueMsgIdCount=Math.min(m_minMsg1UniqueMsgIdCount,msg1UniqueMsgIdStat);    }    m_maxMsg1UniqueMsgIdCount=Math.max(m_maxMsg1UniqueMsgIdCount,msg1UniqueMsgIdStat);    m_sumOfMsg1UniqueMsgIdCount+=msg1UniqueMsgIdStat;    m_sumOfMsg2UniqueMsgIdCount+=msg2UniqueMsgIdStat;    m_sumOfMsg1UniqueMsgIdCountSquare+=msg1UniqueMsgIdStat * msg1UniqueMsgIdStat;    m_msg1TotalCount+=msg1TotalStat;    m_msg2TotalCount+=msg2TotalStat;  }}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  public Vertex parseFormula(Vertex formula,TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  String name="Formula:";  stream.skipWhitespace();  ensureNext('"',stream);  int position=stream.getPosition();  String text=stream.nextQuotes();  Map<String,Vertex> cache=elements.get(FORMULA);  if (formula == null && cache != null) {    formula=cache.get(text);    if (formula != null) {      return formula;    }  }  try {    TextStream formulaStream=new TextStream(text);    if (formula == null) {      formula=network.createInstance(Primitive.FORMULA);    }    if (cache != null) {      cache.put(text,formula);    }    String token=formulaStream.nextWord();    char peek=formulaStream.peek();    int index=0;    Vertex space=network.createVertex(Primitive.SPACE);    formula.addRelationship(Primitive.TYPE,space);    while ((token != null) && ((!token.equals("\"") || (peek == '"')))) {      Vertex word=null;      if (token.equals("{")) {        word=parseElement(formulaStream,elements,debug,network);        formulaStream.skipWhitespace();        ensureNext('}',formulaStream);      } else {        word=network.createWord(token);      }      formula.addRelationship(Primitive.WORD,word,index);      if (token.equals("\"") && (peek == '"')) {        formulaStream.skip();      }      if (formulaStream.skipWhitespace()) {        index++;        formula.addRelationship(Primitive.WORD,space,index);      }      token=formulaStream.nextWord();      peek=formulaStream.peek();      index++;    }  } catch (  SelfParseException exception) {    int newPosition=stream.getPosition();    stream.setPosition(position);    exception.initFromStream(stream);    stream.setPosition(newPosition);    throw exception;  }  formula.setName(name + "\"" + text+ "\"");  return formula;}  }
class C{  private JSONWriter end(char mode,char c) throws JSONException {  if (this.mode != mode) {    throw new JSONException(mode == 'a' ? "Misplaced endArray." : "Misplaced endObject.");  }  this.pop(mode);  try {    this.writer.write(c);  } catch (  IOException e) {    throw new JSONException(e);  }  this.comma=true;  return this;}  }
class C{  public void moveDot(int dot){  moveDot(dot,Position.Bias.Forward);}  }
class C{  protected void onMeasureChild(View child,int position,int widthMeasureSpec,int heightMeasureSpec){  child.measure(widthMeasureSpec,heightMeasureSpec);}  }
class C{  public void checkLoadScript(){  if (se != null) {    throw se;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.413 -0500",hash_original_method="270AE27F27A3F7621C8092BA94DE298D",hash_generated_method="18BBEE17F7D24A9079B33AEDF2E4EF50") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public void disconnect() throws IOException {  super.disconnect();  _reader=null;  _writer=null;  _replyString=null;  _replyLines.setSize(0);  _newReplyString=false;}  }
class C{  public Stream<String> keys(){  return JCasUtil.select(jCas,Metadata.class).stream().map(null);}  }
class C{  public boolean experimentIndexExists() throws Exception {  return tableExists(EXP_INDEX_TABLE);}  }
class C{  public boolean isWrapperFor(Class<?> iface) throws SQLException {  boolean isInstance=iface.isInstance(this);  if (isInstance) {    return true;  }  String interfaceClassName=iface.getName();  return (interfaceClassName.equals("com.mysql.jdbc.Statement") || interfaceClassName.equals("java.sql.Statement") || interfaceClassName.equals("java.sql.Wrapper"));}  }
class C{  public mat4 translate(float x,float y,float z){  float[] m=this.m;  m[12]+=m[0] * x + m[4] * y + m[8] * z;  m[13]+=m[1] * x + m[5] * y + m[9] * z;  m[14]+=m[2] * x + m[6] * y + m[10] * z;  m[15]+=m[3] * x + m[7] * y + m[11] * z;  return this;}  }
class C{  public boolean containsValue(Object value){  return internalMap.containsValue(value);}  }
class C{  public vec2 copy(vec2 a){  this.m[0]=a.m[0];  this.m[1]=a.m[1];  return this;}  }
class C{  public void addImage(GliderImage image) throws IOException {  if (image == null) {    String message=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (this.imageTable.contains(image))   this.removeImage(image);  GliderImageLayer layer=new GliderImageLayer();  image.setValue(AVKey.LAYER,layer);  layer.setImage(image);  ApplicationTemplate.insertBeforeCompass(this,layer);  layer.addPropertyChangeListener(this.layerListener);  this.imageTable.add(image);  this.firePropertyChange(GliderImage.GLIDER_IMAGE_SOURCE,null,image);  this.repaint();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void v(String tag,String s,Object... args){  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,String.format(s,args));}  }
class C{  public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface.isInstance(this);}  }
class C{  public S2Point randomPoint(){  return S2Point.normalize(new S2Point(2 * rand.nextDouble() - 1,2 * rand.nextDouble() - 1,2 * rand.nextDouble() - 1));}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public ArrayList<Person> filterPeople(String filter){  ArrayList<Person> filteredPeople=new ArrayList<>();  filter=filter.toLowerCase();  for (  Person person : people) {    if (VorUtils.getName(person.getEmail()).toLowerCase().contains(filter)) {      filteredPeople.add(person);    }  }  return filteredPeople;}  }
class C{  @Override protected void heapifyUpComparator(int pos,Object cur){  while (pos > 0) {    final int parent=(pos - 1) >>> 1;    Object par=queue[parent];    if (comparator.compare(cur,par) >= 0) {      break;    }    queue[pos]=par;    index.put(par,pos);    pos=parent;  }  queue[pos]=cur;  index.put(cur,pos);}  }
class C{  public void start(String tag,ArrayList names,ArrayList values,int nattr){  tag(tag,names,values,nattr,false);}  }
class C{  public SampleVcpc(IndependenceTest independenceTest){  if (independenceTest == null) {    throw new NullPointerException();  }  if (!(independenceTest instanceof IndTestFisherZ)) {    throw new IllegalArgumentException("Need Fisher Z test to proceed with algorithm");  }  this.independenceTest=independenceTest;  this.dataSet=(DataSet)independenceTest.getData();  this.variables=dataSet.getVariables();  this.covMatrix=new CovarianceMatrix(dataSet);  List<Node> nodes=covMatrix.getVariables();  this.indexMap=indexMap(variables);  this.nameMap=mapNames(variables);  this.nodesToVariables=new HashMap<>();  this.variablesToNodes=new HashMap<>();}  }
class C{  Entry(K k,V v,Entry n){  key=k;  val=v;  next=n;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER:    setCharacter((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static final Color show(Component parent,Color initialColor,boolean alpha){  Window owner=ControlUtilities.getParentWindow(parent);  ColorDialog dialog=new ColorDialog(owner,initialColor,alpha);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    return dialog.pnlColor.getColor();  }  return null;}  }
class C{  public void appendRemainingComponent(String name){  if (name != null) {    try {      if (remainingName == null) {        remainingName=new CompositeName();      }      remainingName.add(name);    } catch (    NamingException e) {      throw new IllegalArgumentException(e.toString());    }  }}  }
class C{  @Override public void agg(double newVal){  aggVal+=newVal;  count++;  firstTime=false;}  }
class C{  public Class nativeClass(){  Class c;  if ((c=nativeClass) != null)   return c;synchronized (this) {    if ((c=nativeClass) != null)     return c;    nativeClass=c=createNativeClass();    return c;  }}  }
class C{  public final boolean isPublic(){  return Modifier.isPublic(getModifiers());}  }
class C{  public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public static void fillMatrix_3D(int n1,int n2,int n3,double[][][] m){  Random r=new Random(2);  for (int i=0; i < n1; i++) {    for (int j=0; j < n2; j++) {      for (int k=0; k < n3; k++) {        m[i][j][k]=r.nextDouble();      }    }  }}  }
class C{  public void testHotDeployFailureEar(){  java.io.File earFile=new java.io.File("target/test-artifacts/simple-ear.ear");  EAR ear=(EAR)factory.createDeployable("jonas4x",earFile.getAbsolutePath(),DeployableType.EAR);  ear.setName("test");  setupAdminHotDeploymentFailure();  try {    deployer.deploy(ear);    fail("No CargoException raised");  } catch (  CargoException expected) {    assertFalse(fileHandler.exists(deployer.getDeployableDir(ear) + "/simple-ear.ear"));    assertTrue(fileHandler.exists(deployer.getDeployableDir(ear) + "/test.ear"));  }}  }
class C{  public RTextScrollPane(RTextArea area,boolean lineNumbers,Color lineNumberColor){  super(area);  textArea=area;  Font defaultFont=new Font("Monospaced",Font.PLAIN,12);  gutter=new Gutter(textArea);  gutter.setLineNumberFont(defaultFont);  gutter.setLineNumberColor(lineNumberColor);  setLineNumbersEnabled(lineNumbers);  setVerticalScrollBarPolicy(VERTICAL_SCROLLBAR_ALWAYS);  setHorizontalScrollBarPolicy(HORIZONTAL_SCROLLBAR_AS_NEEDED);}  }
class C{  JarEntry(JarPath jarPath){  _jarPath=jarPath;}  }
class C{  public void toBed(OutputStream stream) throws IOException {  try (BedWriter bw=new BedWriter(stream)){    for (    Map.Entry<String,MergedIntervals> seq : mSequences.entrySet()) {      for (      Map.Entry<Integer,Integer> entry : seq.getValue().mIntervals.entrySet()) {        bw.write(new BedRecord(seq.getKey(),entry.getKey(),entry.getValue()));      }    }  } }  }
class C{  public PlaceableUnits(final String errorMessage){  m_errorMessage=errorMessage;}  }
class C{  public PaymentDeregistrationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void shiftBeans(BeanInstance toShiftTo,boolean save){  if (save) {    m_originalCoords=new Vector<Point>();  }  int targetX=toShiftTo.getX();  int targetY=toShiftTo.getY();  for (int i=0; i < m_subFlow.size(); i++) {    BeanInstance temp=(BeanInstance)m_subFlow.elementAt(i);    if (save) {      Point p=new Point(temp.getX() - targetX,temp.getY() - targetY);      m_originalCoords.add(p);    }    temp.setX(targetX);    temp.setY(targetY);  }}  }
class C{  public static <V>PropertyValuesHolder ofObject(Property property,TypeEvaluator<V> evaluator,V... values){  PropertyValuesHolder pvh=new PropertyValuesHolder(property);  pvh.setObjectValues(values);  pvh.setEvaluator(evaluator);  return pvh;}  }
class C{  private void onRoomTopicPreferenceChanged(){  if (null == mRoom) {    return;  }  String previousTopic=mRoom.getTopic();  String newTopic=mRoomTopicEditTxt.getText();  if (!TextUtils.equals(previousTopic,newTopic)) {    displayLoadingView();    Log.d(LOG_TAG,"## update topic to " + newTopic);    mRoom.updateTopic(newTopic,mUpdateCallback);  }}  }
class C{  protected String handleInteger(ResultSet rs,int columnIndex) throws SQLException {  int i=rs.getInt(columnIndex);  return rs.wasNull() ? "" : Integer.toString(i);}  }
class C{  public LogNetworkStreamMerger(LogRequest req,MediaType mediaType,LogSvcPropertiesLoader propertiesLoader){  logger.trace("In LogNetworkStreamMerger's constructor");  this.request=req;  this.mediaType=mediaType;  this.propertiesLoader=propertiesLoader;  List<LogNetworkReader> readers=getLogNetworkStreams();  int size=readers.size();  logHeads=new LogMessage[size];  this.logStreamList=new LogNetworkReader[size];  int index=0;  for (  LogNetworkReader reader : readers) {    logStreamList[index]=reader;    logHeads[index]=null;    index++;  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:12.934 -0500",hash_original_method="4D503F6FEFF5A6DB6E7618C8A28327D4",hash_generated_method="8635C59B06DF3DC5F17BCC78285185DA") @Override public SSLEngineResult wrap(ByteBuffer[] srcs,int offset,int len,ByteBuffer dst) throws SSLException {  if (engine_was_shutteddown) {    return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,0);  }  if ((srcs == null) || (dst == null)) {    throw new IllegalStateException("Some of the input parameters are null");  }  if (dst.isReadOnly()) {    throw new ReadOnlyBufferException();  }  if (!handshake_started) {    beginHandshake();  }  SSLEngineResult.HandshakeStatus handshakeStatus=getHandshakeStatus();  if ((session == null || engine_was_closed) && (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_UNWRAP) || handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_TASK))) {    return new SSLEngineResult(getEngineStatus(),handshakeStatus,0,0);  }  int capacity=dst.remaining();  int produced=0;  if (alertProtocol.hasAlert()) {    if (capacity < recordProtocol.getRecordSize(2)) {      return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);    }    byte[] alert_data=alertProtocol.wrap();    dst.put(alert_data);    if (alertProtocol.isFatalAlert()) {      alertProtocol.setProcessed();      if (session != null) {        session.invalidate();      }      shutdown();      return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,alert_data.length);    } else {      alertProtocol.setProcessed();      if (close_notify_was_sent && close_notify_was_received) {        shutdown();        return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,alert_data.length);      }      return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),0,alert_data.length);    }  }  if (capacity < recordProtocol.getMinRecordSize()) {    if (logger != null) {      logger.println("Capacity of the destination(" + capacity + ") < MIN_PACKET_SIZE("+ recordProtocol.getMinRecordSize()+ ")");    }    return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);  }  try {    if (!handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_WRAP)) {      dataStream.setSourceBuffers(srcs,offset,len);      if ((capacity < SSLRecordProtocol.MAX_SSL_PACKET_SIZE) && (capacity < recordProtocol.getRecordSize(dataStream.available()))) {        if (logger != null) {          logger.println("The destination buffer(" + capacity + ") can not take the resulting packet("+ recordProtocol.getRecordSize(dataStream.available())+ ")");        }        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);      }      if (remaining_wrapped_data == null) {        remaining_wrapped_data=recordProtocol.wrap(ContentType.APPLICATION_DATA,dataStream);      }      if (capacity < remaining_wrapped_data.length) {        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,dataStream.consumed(),0);      } else {        dst.put(remaining_wrapped_data);        produced=remaining_wrapped_data.length;        remaining_wrapped_data=null;        return new SSLEngineResult(getEngineStatus(),handshakeStatus,dataStream.consumed(),produced);      }    } else {      if (remaining_hsh_data == null) {        remaining_hsh_data=handshakeProtocol.wrap();      }      if (capacity < remaining_hsh_data.length) {        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);      } else {        dst.put(remaining_hsh_data);        produced=remaining_hsh_data.length;        remaining_hsh_data=null;        handshakeStatus=handshakeProtocol.getStatus();        if (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.FINISHED)) {          session=recordProtocol.getSession();        }      }      return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),0,produced);    }  } catch (  AlertException e) {    alertProtocol.alert(AlertProtocol.FATAL,e.getDescriptionCode());    engine_was_closed=true;    if (session != null) {      session.invalidate();    }    throw e.getReason();  }}  }
class C{  public void doHistory(KeyEvent e){  if (e.getSource() == m_Input) {switch (e.getKeyCode()) {case KeyEvent.VK_UP:      if (m_HistoryPos > 0) {        m_HistoryPos--;        String command=m_CommandHistory.elementAt(m_HistoryPos);        m_Input.setText(command);      }    break;case KeyEvent.VK_DOWN:  if (m_HistoryPos < m_CommandHistory.size()) {    m_HistoryPos++;    String command="";    if (m_HistoryPos < m_CommandHistory.size()) {      command=m_CommandHistory.elementAt(m_HistoryPos);    }    m_Input.setText(command);  }break;default :break;}}}  }
class C{  public int problemId(){  return ProblemReasons.NotFound;}  }
class C{  public static boolean loadLogbackForEvoSuite(){  LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();  boolean isOK=true;  if (isDefaultLoggingConfiguration(context)) {    isOK=changeLogbackFile(getLogbackFileName());    StatusPrinter.printInCaseOfErrorsOrWarnings(context);  }  return isOK;}  }
class C{  private int countBookmarks(){  int bookmarks=0;  for (  final IDebugger debugger : m_debuggerProvider) {    bookmarks+=debugger.getBookmarkManager().getNumberOfBookmarks();  }  return bookmarks;}  }
class C{  void init(PageBtree page1,SearchRow pivot,PageBtree page2){  entryCount=0;  childPageIds=new int[]{page1.getPos()};  rows=SearchRow.EMPTY_ARRAY;  offsets=Utils.EMPTY_INT_ARRAY;  addChild(0,page2.getPos(),pivot);  if (pageStoreInternalCount) {    rowCount=page1.getRowCount() + page2.getRowCount();  }  check();}  }
class C{  public OnvifDevice(String hostIp) throws ConnectException, SOAPException {  this(hostIp,null,null);}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) public Response receiveEvents(@Context final HttpServletRequest httpServletRequest,String jsonString){  logger.info("Received event, JSON string: " + jsonString);  try {    MonitorTriggerEvent[] event=mapper.readValue(jsonString,MonitorTriggerEvent[].class);    ArrayList<MonitorTriggerEvent> eventList=new ArrayList<MonitorTriggerEvent>();    for (int i=0; i < event.length; i++) {      eventList.add(event[i]);    }    ScalingEventManager.getInstance().postTriggerEvents(eventList);    return RestApiResponseHandler.getResponseOk("{}");  } catch (  IOException e) {    return RestApiResponseHandler.getResponseError(MESSAGE_KEY.RestResponseErrorMsg_build_JSON_error,e,httpServletRequest.getLocale());  }}  }
class C{  public void checkTransactionManagerToken(String xml) throws Exception {  XMLAssert.assertXpathEvaluatesTo("60","//Context/Transaction[@factory='org.objectweb.jotm.UserTransactionFactory']" + "/@jotm.timeout",xml);}  }
class C{  public static MobileDoc create(boolean plain){  return create(plain,null,false);}  }
class C{  private void handleOtherStatus(State state,InnerState innerState,int statusCode) throws StopRequest {  int finalStatus;  if (DownloaderService.isStatusError(statusCode)) {    finalStatus=statusCode;  } else   if (statusCode >= 300 && statusCode < 400) {    finalStatus=DownloaderService.STATUS_UNHANDLED_REDIRECT;  } else   if (innerState.mContinuingDownload && statusCode == DownloaderService.STATUS_SUCCESS) {    finalStatus=DownloaderService.STATUS_CANNOT_RESUME;  } else {    finalStatus=DownloaderService.STATUS_UNHANDLED_HTTP_CODE;  }  throw new StopRequest(finalStatus,"http error " + statusCode);}  }
class C{  public String sqlMetadata_uniqueTables(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_uniqueTables(catalogName,schemaName);}  }
class C{  public MockTokenFilter(TokenStream input,CharacterRunAutomaton filter){  super(input);  this.filter=filter;}  }
class C{  public AddThemeResource(java.awt.Component c,EditableResources res){  super((java.awt.Frame)SwingUtilities.windowForComponent(c),true);  initComponents();  ModifiableJOptionPane.reverseOKCancel(ok,cancel);  name.setText(AddResourceDialog.nextAvailableName(res,"Theme"));  try {    templateDetails.setPage(getClass().getResource("/templates/Native_Theme.html"));  } catch (  IOException ex) {    ex.printStackTrace();  }  pack();  setLocationRelativeTo(c);  setVisible(true);}  }
class C{  public Matrix4f mul(Matrix4fc right){  return mul(right,this);}  }
class C{  public GenericRawResults<Object[]> queryRaw(ConnectionSource connectionSource,String query,DataType[] columnTypes,String[] arguments,ObjectCache objectCache) throws SQLException {  logger.debug("executing raw query for: {}",query);  if (arguments.length > 0) {    logger.trace("query arguments: {}",(Object)arguments);  }  DatabaseConnection connection=connectionSource.getReadOnlyConnection();  CompiledStatement compiledStatement=null;  try {    compiledStatement=connection.compileStatement(query,StatementType.SELECT,noFieldTypes,DatabaseConnection.DEFAULT_RESULT_FLAGS);    assignStatementArguments(compiledStatement,arguments);    RawResultsImpl<Object[]> rawResults=new RawResultsImpl<Object[]>(connectionSource,connection,query,Object[].class,compiledStatement,new ObjectArrayRowMapper(columnTypes),objectCache);    compiledStatement=null;    connection=null;    return rawResults;  }  finally {    if (compiledStatement != null) {      compiledStatement.close();    }    if (connection != null) {      connectionSource.releaseConnection(connection);    }  }}  }
class C{  public static void main(String argv[]) throws Exception {}  }
class C{  public static void unregister(final JComponent comp){  assert INSTANCE != null : "Unregister asymmetrically called";  if (INSTANCE.detachFrom(comp) == 0) {    INSTANCE.hide();    INSTANCE=null;  }}  }
class C{  private void initPanel(){  if (coloringMethod.getSelectedItem() == "None") {    clearColoringPanel();    currentColoringPanel=getNonePanel();    baseColorButton.setVisible(true);    baseColorIndicator.setVisible(true);    mainPanel.add(currentColoringPanel);  } else   if (coloringMethod.getSelectedItem() == "DecayTrail") {    clearColoringPanel();    currentColoringPanel=getDecayTrailPanel();    baseColorButton.setVisible(true);    baseColorIndicator.setVisible(true);    mainPanel.add(currentColoringPanel);  } else   if (coloringMethod.getSelectedItem() == "Frequency") {    clearColoringPanel();    currentColoringPanel=getFrequencyPanel();    baseColorButton.setVisible(true);    baseColorIndicator.setVisible(true);    mainPanel.add(currentColoringPanel);  }  pack();  setLocationRelativeTo(null);}  }
class C{  public FastAdapterDialog<Item> move(int fromPosition,int toPosition){  mFastItemAdapter.move(fromPosition,toPosition);  return this;}  }
class C{  public Angle3D copy(){  return new Angle3D(angleX,angleY,angleZ);}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){  if (cv != null) {    return cv.visitField(access,name,desc,signature,value);  }  return null;}  }
class C{  public GroupGraphPattern(final GroupGraphPattern parent){  this(parent.context,parent.spScope);}  }
class C{  public static boolean isNameChar(int codePoint){  return isPN_CHARS(codePoint) || codePoint == '.' || codePoint == ':' | codePoint == '\\' || codePoint == '%';}  }
class C{  private void saveImpl(FileLocation loc) throws IOException {  OutputStream out=loc.getOutputStream();  PrintWriter w=new PrintWriter(new BufferedWriter(new UnicodeWriter(out,getEncoding())));  try {    write(w);  }  finally {    w.close();  }}  }
class C{  void update(final byte[] input,final int offset,final int length){  md5.update(input,offset,length);}  }
class C{  private String addCustomMethodsToParser(String grammarContent){  return replace(grammarContent,"@members {","@members {\n\n" + "// injected by AutomaticSemicolonInjector\n" + "protected boolean forcedRewind(int marker) { return true; } // overridden in subtype\n"+ "protected void promoteEOL() {} // overridden in subtype\n"+ "protected void addASIMessage() {} // overridden in subtype\n"+ "protected boolean hasDisallowedEOL() { return false; } // overridden in subtype\n"+ "// end of injection");}  }
class C{  public static void assertJPost(String request,String content,String... tests) throws Exception {  assertJPost(request,content,JSONTestUtil.DEFAULT_DELTA,tests);}  }
class C{  public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  protected int playMakeCallSounds(){  try {    float audioMaxVolume=audioManager.getStreamMaxVolume(AudioManager.STREAM_RING);    float audioCurrentVolume=audioManager.getStreamVolume(AudioManager.STREAM_RING);    float volumeRatio=audioCurrentVolume / audioMaxVolume;    audioManager.setMode(AudioManager.MODE_RINGTONE);    audioManager.setSpeakerphoneOn(false);    int id=soundPool.play(outgoing,0.3f,0.3f,1,-1,1);    return id;  } catch (  Exception e) {    return -1;  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public DefaultMapEntry(final Map.Entry entry){  super(entry.getKey(),entry.getValue());}  }
class C{  public void testIntMissing() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new IntPoint("value",-1));  doc.add(new StoredField("value",-1));  writer.addDocument(doc);  doc=new Document();  doc.add(new IntPoint("value",4));  doc.add(new StoredField("value",4));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.INTEGER_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  Sort sort=new Sort(new SortField("value",SortField.Type.INT));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.135 -0500",hash_original_method="371BFA4DC1A016D782A781EAD4A3EDE2",hash_generated_method="1C0A82A26D31EE8C406869302E86ACAA") public static void sort(char[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public static int octant(double dx,double dy){  if (dx == 0.0 && dy == 0.0)   throw new IllegalArgumentException("Cannot compute the octant for point ( " + dx + ", "+ dy+ " )");  double adx=Math.abs(dx);  double ady=Math.abs(dy);  if (dx >= 0) {    if (dy >= 0) {      if (adx >= ady)       return 0; else       return 1;    } else {      if (adx >= ady)       return 7; else       return 6;    }  } else {    if (dy >= 0) {      if (adx >= ady)       return 3; else       return 2;    } else {      if (adx >= ady)       return 4; else       return 5;    }  }}  }
class C{  public Bundler putBooleanArray(String key,boolean[] value){  bundle.putBooleanArray(key,value);  return this;}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  private void initReader(DataRowFactory factory,List<AttributeDataSource> attributeDataSources,int sampleSize,String separatorsRegExpr,boolean useQuotes,Charset encoding) throws IOException {  List<BufferedReader> readerList=new LinkedList<BufferedReader>();  Map<File,Integer> fileMap=new HashMap<File,Integer>();  Iterator<AttributeDataSource> i=attributeDataSources.iterator();  int attribute=0;  int greatestFileIndex=-1;  List<AtomicInteger> columnCounters=new ArrayList<AtomicInteger>();  while (i.hasNext()) {    AttributeDataSource ads=i.next();    attributes[attribute]=ads.getAttribute();    File file=ads.getFile();    Integer fileIndex=fileMap.get(file);    if (fileIndex == null) {      fileIndex=Integer.valueOf(++greatestFileIndex);      fileMap.put(file,fileIndex);      readerList.add(Tools.getReader(file,encoding));      columnCounters.add(new AtomicInteger(1));    } else {      AtomicInteger counter=columnCounters.get(fileIndex.intValue());      counter.incrementAndGet();    }    dataSourceIndex[attribute][FILE_NR]=fileIndex.intValue();    dataSourceIndex[attribute][COLUMN_NR]=ads.getColumn();    attribute++;  }  this.fileReader=new BufferedReader[readerList.size()];  readerList.toArray(this.fileReader);  currentData=new String[this.fileReader.length][];  expectedNumberOfColumns=new int[columnCounters.size()];  Iterator<AtomicInteger> j=columnCounters.iterator();  int k=0;  while (j.hasNext()) {    expectedNumberOfColumns[k++]=j.next().intValue();  }}  }
class C{  private boolean isDependencyField(Class<? extends Annotation> clazz){  return Uses.class.equals(clazz) || Service.class.equals(clazz);}  }
class C{  public void add(char ch){  if (i == b.length) {    char[] new_b=new char[i + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  b[i++]=ch;}  }
class C{  @Override public void updateClassifier(Instance instance) throws Exception {  updateClassifier(instance,true);}  }
class C{  private boolean readLine() throws IOException {  boolean eofReached=false;  boolean ok=false;  while (!ok) {    for (int i=0; i < fileReader.length; i++) {      currentData[i]=rapidMinerLineReader.readLine(fileReader[i],expectedNumberOfColumns[i]);      if (currentData[i] == null) {        eofReached=true;        break;      }    }    if ((eofReached) || (maxNumber != -1) || (sampleRatio == 1.0d)|| (random.nextDouble() < sampleRatio)) {      ok=true;    }  }  if (eofReached) {    for (int i=0; i < fileReader.length; i++) {      fileReader[i].close();    }    return false;  } else {    return true;  }}  }
class C{  public static int countOfOffsetSources(int[] sourcesOffsets){  int countOfSources=0;  for (int index=0; index < sourcesOffsets.length; index++) {    if (sourcesOffsets[index] != 0) {      countOfSources++;    }  }  return countOfSources;}  }
class C{  public static Point normalize(Point p,double length){  double len=Math.sqrt(p.x * p.x + p.y * p.y);  length=length / len;  return new Point(p.x * length,p.y * length);}  }
class C{  protected boolean equals(IPath path1,IPath path2){  return equalsOrNull(path1,path2);}  }
class C{  static Object find(String factoryId,String fallbackClassName) throws ConfigurationError {  ClassLoader classLoader=findClassLoader();  String systemProp=System.getProperty(factoryId);  if (systemProp != null && systemProp.length() > 0) {    if (debug)     debugPrintln("found " + systemProp + " in the system property "+ factoryId);    return newInstance(systemProp,classLoader);  }  try {    String javah=System.getProperty("java.home");    String configFile=javah + File.separator + "lib"+ File.separator+ "jaxp.properties";    String factoryClassName=null;    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          File f=new File(configFile);          firstTime=false;          if (f.exists()) {            if (debug)             debugPrintln("Read properties file " + f);            cacheProps.load(new FileInputStream(f));          }        }      }    }    factoryClassName=cacheProps.getProperty(factoryId);    if (debug)     debugPrintln("found " + factoryClassName + " in $java.home/jaxp.properties");    if (factoryClassName != null) {      return newInstance(factoryClassName,classLoader);    }  } catch (  Exception ex) {    if (debug) {      ex.printStackTrace();    }  }  Object provider=findJarServiceProvider(factoryId);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  if (debug)   debugPrintln("loaded from fallback value: " + fallbackClassName);  return newInstance(fallbackClassName,classLoader);}  }
class C{  public void resolveUrls(){  try {    pool=Executors.newFixedThreadPool(numThreads);    BufferedReader buffRead=new BufferedReader(new FileReader(new File(urlsFile)));    String urlStr=null;    while ((urlStr=buffRead.readLine()) != null) {      LOG.info("Starting: " + urlStr);      pool.execute(new ResolverThread(urlStr));    }    buffRead.close();    pool.awaitTermination(60,TimeUnit.SECONDS);  } catch (  Exception e) {    pool.shutdownNow();    LOG.info(StringUtils.stringifyException(e));  }  pool.shutdown();  LOG.info("Total: " + numTotal.get() + ", Resovled: "+ numResolved.get()+ ", Errored: "+ numErrored.get()+ ", Average Time: "+ totalTime.get() / numTotal.get());}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    if (ALLOW_BROKEN_PRNG) {      Log.w(PrngFixes.class.getSimpleName(),"Failed to seed OpenSSL PRNG",e);    } else {      throw new SecurityException("Failed to seed OpenSSL PRNG",e);    }  }}  }
class C{  public static <T>T[] emptyArray(Class<T> kind){  if (kind == Object.class) {    return (T[])EMPTY;  }  int bucket=((System.identityHashCode(kind) / 8) & 0x7FFFFFFF) % CACHE_SIZE;  Object cache=sCache[bucket];  if (cache == null || cache.getClass().getComponentType() != kind) {    cache=Array.newInstance(kind,0);    sCache[bucket]=cache;  }  return (T[])cache;}  }
class C{  public void add(int index,RoleUnresolved role) throws IllegalArgumentException, IndexOutOfBoundsException {  if (role == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  super.add(index,role);}  }
class C{  public void clear(){  mVariableReferences.clear();  mProcedureManager.clear();  mVariableNameManager.clearUsedNames();  mConnectionManager.clear();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public String toString(){  StringBuilder buff=new StringBuilder("ICE Agent (stream-count=");  buff.append(getStreamCount());  buff.append(" ice-pwd:").append(getLocalPassword());  buff.append(" ice-ufrag:").append(getLocalUfrag());  buff.append(" tie-breaker:").append(getTieBreaker());  buff.append("):\n");  for (  IceMediaStream stream : getStreams())   buff.append(stream).append("\n");  return buff.toString();}  }
class C{  public DataReadOnlyException(){  super();}  }
class C{  private void parseEntityAttributes(Entity entity,Element entityTag){  boolean commander=Boolean.parseBoolean(entityTag.getAttribute(COMMANDER));  entity.setCommander(commander);  try {    boolean isHidden=Boolean.parseBoolean(entityTag.getAttribute(HIDDEN));    entity.setHidden(isHidden);  } catch (  Exception e) {    entity.setHidden(false);  }  try {    boolean offBoard=Boolean.parseBoolean(entityTag.getAttribute(OFFBOARD));    if (offBoard) {      int distance=Integer.parseInt(entityTag.getAttribute(OFFBOARD_DISTANCE));      OffBoardDirection dir=OffBoardDirection.getDirection(Integer.parseInt(entityTag.getAttribute(OFFBOARD_DIRECTION)));      entity.setOffBoard(distance,dir);    }  } catch (  Exception e) {  }  try {    int deployround=Integer.parseInt(entityTag.getAttribute(DEPLOYMENT));    entity.setDeployRound(deployround);  } catch (  Exception e) {    entity.setDeployRound(0);  }  try {    int deployZone=Integer.parseInt(entityTag.getAttribute(DEPLOYMENT_ZONE));    entity.setStartingPos(deployZone);  } catch (  Exception e) {    entity.setDeployRound(Board.START_NONE);  }  try {    String ndeploy=entityTag.getAttribute(NEVER_DEPLOYED);    boolean wasNeverDeployed=Boolean.parseBoolean(entityTag.getAttribute(NEVER_DEPLOYED));    if (null == ndeploy || ndeploy.isEmpty()) {      wasNeverDeployed=true;    }    entity.setNeverDeployed(wasNeverDeployed);  } catch (  Exception e) {    entity.setNeverDeployed(true);  }  if (entity instanceof Aero) {    String velString=entityTag.getAttribute(VELOCITY);    String altString=entityTag.getAttribute(ALTITUDE);    Aero a=(Aero)entity;    if (velString.length() > 0) {      int velocity=Integer.parseInt(velString);      a.setCurrentVelocity(velocity);      a.setNextVelocity(velocity);    }    if (altString.length() > 0) {      int altitude=Integer.parseInt(altString);      if (altitude <= 0) {        a.land();      } else {        a.liftOff(altitude);      }    }  }  entity.setCamoCategory(entityTag.getAttribute(CAMO_CATEGORY).equals("") ? null : entityTag.getAttribute(CAMO_CATEGORY));  entity.setCamoFileName(entityTag.getAttribute(CAMO_FILENAME).equals("") ? null : entityTag.getAttribute(CAMO_FILENAME));  String extId=entityTag.getAttribute(EXT_ID);  if ((null == extId) || (extId.length() == 0)) {    extId="-1";  }  entity.setExternalIdAsString(extId);  if (entity instanceof MechWarrior) {    String pickUpId=entityTag.getAttribute(PICKUP_ID);    if ((null == pickUpId) || (pickUpId.length() == 0)) {      pickUpId="-1";    }    ((MechWarrior)entity).setPickedUpByExternalId(pickUpId);  }  String quirks=entityTag.getAttribute(QUIRKS);  if ((null != quirks) && (quirks.trim().length() > 0)) {    StringTokenizer st=new StringTokenizer(quirks,"::");    while (st.hasMoreTokens()) {      String quirk=st.nextToken();      String quirkName=Crew.parseAdvantageName(quirk);      Object value=Crew.parseAdvantageValue(quirk);      try {        entity.getQuirks().getOption(quirkName).setValue(value);      } catch (      Exception e) {        warning.append("Error restoring quirk: ").append(quirk).append(".\n");      }    }  }  String c3masteris=entityTag.getAttribute(C3MASTERIS);  if (c3masteris.length() > 0) {    entity.setC3MasterIsUUIDAsString(c3masteris);  }  String c3uuid=entityTag.getAttribute(C3UUID);  if (c3uuid.length() > 0) {    entity.setC3UUIDAsString(c3uuid);  }  if ((entity instanceof Infantry) && !(entity instanceof BattleArmor)) {    Infantry inf=(Infantry)entity;    String armorDiv=entityTag.getAttribute(ARMOR_DIVISOR);    if (armorDiv.length() > 0) {      inf.setDamageDivisor(Double.parseDouble(armorDiv));    }    if (entityTag.getAttribute(ARMOR_ENC).length() > 0) {      inf.setArmorEncumbering(true);    }    if (entityTag.getAttribute(SPACESUIT).length() > 0) {      inf.setSpaceSuit(true);    }    if (entityTag.getAttribute(DEST_ARMOR).length() > 0) {      inf.setDEST(true);    }    if (entityTag.getAttribute(SNEAK_CAMO).length() > 0) {      inf.setSneakCamo(true);    }    if (entityTag.getAttribute(SNEAK_IR).length() > 0) {      inf.setSneakIR(true);    }    if (entityTag.getAttribute(SNEAK_ECM).length() > 0) {      inf.setSneakECM(true);    }    String infSpec=entityTag.getAttribute(INF_SPEC);    if (infSpec.length() > 0) {      inf.setSpecializations(Integer.parseInt(infSpec));    }  }}  }
class C{  public static Atom findUtf8Atom(byte[] utf8){  return findOrCreate(utf8,false,null);}  }
class C{  public Collection<McRaptorState> route(){  if (request.transitModes == null || request.transitModes.isEmpty() || request.transitModes.contains(TransitModes.TRANSIT)) {    request.transitModes=EnumSet.allOf(TransitModes.class);  }  if (accessTimes == null)   computeAccessTimes();  LOG.info("Found {} access stops:\n{}",accessTimes.size(),dumpStops(accessTimes));  if (egressTimes != null)   LOG.info("Found {} egress stops:\n{}",egressTimes.size(),dumpStops(egressTimes));  long startTime=System.currentTimeMillis();  if (this.egressTimes != null) {    this.egressTimes.forEachKey(null);    LOG.info("{} patterns found near the destination",patternsNearDestination.cardinality());  }  List<McRaptorState> ret=new ArrayList<>();  int maxSamplingFrequency=2 * (request.toTime - request.fromTime) / NUMBER_OF_SEARCHES;  MersenneTwister mersenneTwister=new MersenneTwister((int)(request.fromLat * 1e9));  for (int departureTime=request.toTime - 60, n=0; departureTime > request.fromTime; departureTime-=mersenneTwister.nextInt(maxSamplingFrequency), n++) {    offsets.randomize();    bestStates.clear();    touchedPatterns.clear();    touchedStops.clear();    round=0;    final int finalDepartureTime=departureTime;    accessTimes.forEachEntry(null);    markPatterns();    round++;    while (doOneRound() && round < MAX_ROUNDS + 1)     ;    if (egressTimes != null) {      ret.addAll(doPropagationToDestination());    } else {      doPropagationToPointSet(departureTime);    }    if (n % 15 == 0)     LOG.info("minute {}, {} rounds",n,round);  }  if (egressTimes == null) {    propagatedTimesStore=new PropagatedTimesStore(pointSet.size());    BitSet includeInAverages=new BitSet();    includeInAverages.set(0,timesAtTargetsEachIteration.size());    propagatedTimesStore.setFromArray(timesAtTargetsEachIteration.toArray(new int[timesAtTargetsEachIteration.size()][]),includeInAverages,PropagatedTimesStore.ConfidenceCalculationMethod.MIN_MAX,request.reachabilityThreshold);  }  LOG.info("McRAPTOR took {}ms",System.currentTimeMillis() - startTime);  return ret;}  }
class C{  public void ReInit(CharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  public void testOverlappingMultiPolygonsNoHoleRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(2);  grid.setNumberRows(2);  MultiPolygon[] pt=new MultiPolygon[4];  STRUCT[] st=new STRUCT[8];  PolygonGenerator pgc=new PolygonGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setNumberPoints(10);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 8) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(MultiPolygon)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  for (int j=0; j < 4; j++) {    if (pt[j] != null)     st[i++]=ow.write(pt[j],getConnection());  }  OraReader or=new OraReader();  i=0;  while (i < 8 && pt[i % 4] != null) {    MultiPolygon pt2=(MultiPolygon)or.read(st[i]);    assertTrue("The input MultiPolygon is not the same as the output MultiPolygon",pt[i % 4].equals(pt2));    i++;  }}  }
class C{  private boolean checkConnect(short otherId){  if (otherId == 0)   return false;  if (otherId == 101 || otherId == 102 || otherId == 160 || otherId == 20 || otherId == 95)   return true;  return BlockTypes.get(otherId).getOcclusion() == BlockInfo.Occlusion.FULL;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  fullyLock();  try {    s.defaultWriteObject();    for (Node<E> p=head.next; p != null; p=p.next)     s.writeObject(p.item);    s.writeObject(null);  }  finally {    fullyUnlock();  }}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  canvas.drawRect(x,y - SHAPE_WIDTH / 2,x + SHAPE_WIDTH,y + SHAPE_WIDTH / 2,paint);}  }
class C{  public boolean isBusy(){  return impl.isBusy();}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public void loginWithAuthSubToken(String token) throws AuthenticationException, DocumentListException {  if (token == null) {    throw new DocumentListException("null login credentials");  }  service.setAuthSubToken(token);  spreadsheetsService.setAuthSubToken(token);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);}  }
class C{  protected void maybeMakeSound(){  maybeMakeSound(SOUND_PROBABILITY);}  }
class C{  public static <T>Object callMethod(Class<T> klass,T instance,String methodName,Object[] inputs,Class<?>[] types) throws Throwable {  if (klass == null) {    throw new IllegalArgumentException("No specified class");  }  if (methodName == null) {    throw new IllegalArgumentException("No specified method name");  }  if ((types == null && inputs != null) || (types != null && inputs == null) || (types != null && inputs != null && types.length != inputs.length)) {    throw new IllegalArgumentException("Mismatch between input parameters and their type description");  }  Method method=null;  try {    method=klass.getDeclaredMethod(methodName,types);  } catch (  NoSuchMethodException e) {    String message="Method " + methodName + " does not exist anymore";    if (shouldNotFailTest) {      throw new FalsePositiveException(message);    } else {      throw new IllegalArgumentException(message);    }  }  assert method != null;  method.setAccessible(true);  Object result=null;  try {    result=method.invoke(instance,inputs);  } catch (  IllegalAccessException e) {    throw new FalsePositiveException("Failed to call " + methodName + ": "+ e.toString());  }catch (  InvocationTargetException e) {    throw e.getTargetException();  }  return result;}  }
class C{  public void complete(){  dataTable=generateTable();}  }
class C{  protected void applyToTitle(Title title){  if (title instanceof TextTitle) {    TextTitle tt=(TextTitle)title;    tt.setFont(this.largeFont);    tt.setPaint(this.subtitlePaint);  } else   if (title instanceof LegendTitle) {    LegendTitle lt=(LegendTitle)title;    if (lt.getBackgroundPaint() != null) {      lt.setBackgroundPaint(this.legendBackgroundPaint);    }    lt.setItemFont(this.regularFont);    lt.setItemPaint(this.legendItemPaint);    if (lt.getWrapper() != null) {      applyToBlockContainer(lt.getWrapper());    }  } else   if (title instanceof PaintScaleLegend) {    PaintScaleLegend psl=(PaintScaleLegend)title;    psl.setBackgroundPaint(this.legendBackgroundPaint);    ValueAxis axis=psl.getAxis();    if (axis != null) {      applyToValueAxis(axis);    }  } else   if (title instanceof CompositeTitle) {    CompositeTitle ct=(CompositeTitle)title;    BlockContainer bc=ct.getContainer();    List blocks=bc.getBlocks();    Iterator iterator=blocks.iterator();    while (iterator.hasNext()) {      Block b=(Block)iterator.next();      if (b instanceof Title) {        applyToTitle((Title)b);      }    }  }}  }
class C{  private void updateFilterWrapperForGroup(ScriptFilter filter,boolean flag){  for (  SelectableWrapper<ScriptFilter> filterWrapper : getFilterWrappers()) {    if (filterWrapper.getEntity().getId() == filter.getId()) {      filterWrapper.setSelected(flag);      return;    }  }}  }
class C{  public synchronized void cachePackageInstallInfo(String packageName,UserHandleCompat user,Bitmap icon,CharSequence title){  removeFromMemCacheLocked(packageName,user);  ComponentKey cacheKey=getPackageKey(packageName,user);  CacheEntry entry=mCache.get(cacheKey);  if (entry == null) {    entry=new CacheEntry();    mCache.put(cacheKey,entry);  }  if (!TextUtils.isEmpty(title)) {    entry.title=title;  }  if (icon != null) {    entry.icon=Utilities.createIconBitmap(icon,mContext);  }}  }
class C{  public void addAnnotation(double x,double y,String annotation){  addAnnotation(x,y,annotation,-0.78f);}  }
class C{  public TLongDoubleHashMap(TLongHashingStrategy strategy){  super(strategy);}  }
class C{  private HttpMessage prepareRequestMessage(UsernamePasswordAuthenticationCredentials credentials) throws URIException, HttpMalformedHeaderException, DatabaseException {  String requestURL=loginRequestURL.replace(MSG_USER_PATTERN,encodeParameter(credentials.getUsername()));  requestURL=requestURL.replace(MSG_PASS_PATTERN,encodeParameter(credentials.getPassword()));  URI requestURI=new URI(requestURL,false);  String requestBody=null;  if (loginRequestBody != null && !loginRequestBody.isEmpty()) {    requestBody=loginRequestBody.replace(MSG_USER_PATTERN,encodeParameter(credentials.getUsername()));    requestBody=requestBody.replace(MSG_PASS_PATTERN,encodeParameter(credentials.getPassword()));  }  HttpMessage requestMessage;  if (this.loginSiteNode != null) {    requestMessage=loginSiteNode.getHistoryReference().getHttpMessage().cloneRequest();    requestMessage.getRequestHeader().setURI(requestURI);    if (requestBody != null) {      requestMessage.getRequestBody().setBody(requestBody);      requestMessage.getRequestHeader().setHeader(HttpHeader.CONTENT_LENGTH,null);    }  } else {    String method=(requestBody != null) ? HttpRequestHeader.POST : HttpRequestHeader.GET;    requestMessage=new HttpMessage();    requestMessage.setRequestHeader(new HttpRequestHeader(method,requestURI,HttpHeader.HTTP10,Model.getSingleton().getOptionsParam().getConnectionParam()));    if (requestBody != null) {      requestMessage.getRequestBody().setBody(requestBody);    }  }  return requestMessage;}  }
class C{  public void paintToolBarContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintToolBarContentBorder(context,g,x,y,w,h);}  }
class C{  public void endArray(){  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_END_ARRAY) {    stackSize--;    peeked=PEEKED_NONE;  } else {    throw createParseError("Expected END_ARRAY but was " + peek());  }}  }
class C{  public BufferUnderflowException(String message,Throwable exception){  super(message);  throwable=exception;}  }
class C{  default B addPatterns(final BannerMeta src){  final List<BannerPattern> effects=src.getPatterns();  if ((effects == null) || effects.isEmpty()) {    return this.getBuilder();  }  this.meta().addPatterns(effects);  return this.getBuilder();}  }
class C{  @Override public boolean onUsed(RPEntity user){  List<Item> itemList=generateItemList();  ShowItemListEvent event=new ShowItemListEvent(title,caption,itemList);  user.addEvent(event);  user.notifyWorldAboutChanges();  return true;}  }
class C{  public static long divide(long dividend,long divisor){  if (divisor < 0) {    if (compare(dividend,divisor) < 0) {      return 0;    } else {      return 1;    }  }  if (dividend >= 0) {    return dividend / divisor;  }  long quotient=((dividend >>> 1) / divisor) << 1;  long rem=dividend - quotient * divisor;  return quotient + (compare(rem,divisor) >= 0 ? 1 : 0);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void testDeployUndeployRedeployWarRemotely() throws Exception {  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/simple-war/index.jsp");  deployer.deploy(this.war);  PingUtils.assertPingTrue("simple war not correctly deployed",warPingURL,getLogger());  deployer.undeploy(this.war);  PingUtils.assertPingFalse("simple war not correctly undeployed",warPingURL,getLogger());  deployer.deploy(this.war);  PingUtils.assertPingTrue("simple war not correctly redeployed",warPingURL,getLogger());  if ("jonas4x".equals(getTestData().containerId)) {    return;  }  Deployable modifiedDeployable=modifyWar(this.war);  File modifiedWar=new File(modifiedDeployable.getFile());  if (!modifiedWar.isFile()) {    throw new FileNotFoundException("Modified WAR \"" + modifiedWar + "\" doesn't exist");  }  deployer.redeploy(modifiedDeployable);  URL newWarPingURL=new URL("http://localhost:" + getTestData().port + "/simple-war/some.html");  PingUtils.assertPingTrue("simple war not correctly redeployed",newWarPingURL,getLogger());}  }
class C{  public Token match(int tok) throws ParseException {  if (Debug.parserDebug) {    Debug.println("match " + tok);  }  if (tok > START && tok < END) {    if (tok == ID) {      if (!startsId())       throw new ParseException(buffer + "\nID expected",ptr);      String id=getNextId();      this.currentMatch=new Token();      this.currentMatch.tokenValue=id;      this.currentMatch.tokenType=ID;    } else     if (tok == SAFE) {      if (!startsSafeToken())       throw new ParseException(buffer + "\nID expected",ptr);      String id=ttokenSafe();      this.currentMatch=new Token();      this.currentMatch.tokenValue=id;      this.currentMatch.tokenType=SAFE;    } else {      String nexttok=getNextId();      Integer cur=(Integer)currentLexer.get(nexttok.toUpperCase());      if (cur == null || cur.intValue() != tok)       throw new ParseException(buffer + "\nUnexpected Token : " + nexttok,ptr);      this.currentMatch=new Token();      this.currentMatch.tokenValue=nexttok;      this.currentMatch.tokenType=tok;    }  } else   if (tok > END) {    char next=lookAhead(0);    if (tok == DIGIT) {      if (!isDigit(next))       throw new ParseException(buffer + "\nExpecting DIGIT",ptr);      this.currentMatch=new Token();      this.currentMatch.tokenValue=String.valueOf(next);      this.currentMatch.tokenType=tok;      consume(1);    } else     if (tok == ALPHA) {      if (!isAlpha(next))       throw new ParseException(buffer + "\nExpecting ALPHA",ptr);      this.currentMatch=new Token();      this.currentMatch.tokenValue=String.valueOf(next);      this.currentMatch.tokenType=tok;      consume(1);    }  } else {    char ch=(char)tok;    char next=lookAhead(0);    if (next == ch) {      consume(1);    } else     throw new ParseException(buffer + "\nExpecting  >>>" + ch+ "<<< got >>>"+ next+ "<<<",ptr);  }  return this.currentMatch;}  }
class C{  @Override public int nextInt(){  return (int)nextLong();}  }
class C{  @Override public synchronized boolean isClosed(){  return mBitmaps == null;}  }
class C{  public final boolean elementAt(final int id){  if (id >= max_size) {    return false;  } else {    return items[id];  }}  }
class C{  public Trie(){  super();  m_Root=new TrieNode(null);  m_RecalcHashCode=true;}  }
class C{  private void startTask(){synchronized (lock) {    if (shutdown) {      throw new RejectedExecutionException("Executor already shutdown");    }    runningTasks++;  }}  }
class C{  public static final int find(int[] a,int key){  for (int i=0; i < a.length; i++) {    if (a[i] == key) {      return i;    }  }  return -1;}  }
class C{  public boolean isFederatedNamespaceEnabled(){  return getBoolean(BKDL_FEDERATED_NAMESPACE_ENABLED,BKDL_FEDERATED_NAMESPACE_ENABLED_DEFAULT);}  }
class C{  public void addListener(final IToolbarPanelSynchronizerListener listener){  m_listeners.addListener(listener);}  }
class C{  private static Uri updateImage(Uri imageUri,ContentResolver resolver,String title,long date,Location location,int orientation,int jpegLength,String path,int width,int height,String mimeType){  ContentValues values=getContentValuesForData(title,date,location,orientation,jpegLength,path,width,height,mimeType);  Uri resultUri=imageUri;  if (Storage.isSessionUri(imageUri)) {    resultUri=addImageToMediaStore(resolver,title,date,location,orientation,jpegLength,path,width,height,mimeType);    sSessionsToContentUris.put(imageUri,resultUri);    sContentUrisToSessions.put(resultUri,imageUri);  } else {    resolver.update(imageUri,values,null,null);  }  return resultUri;}  }
class C{  private static boolean containsGreekLetter(String s){  Matcher m=biogreek.matcher(s);  return m.find();}  }
class C{  public static boolean isInOverflow(MenuItem item){  return !isActionButton(item);}  }
class C{  public void stopBotReconnect(){  reconnectStopped=true;}  }
class C{  public static int compareNull(boolean aNull,int sortType){  if ((sortType & NULLS_FIRST) != 0) {    return aNull ? -1 : 1;  } else   if ((sortType & NULLS_LAST) != 0) {    return aNull ? 1 : -1;  } else {    int comp=aNull ? DEFAULT_NULL_SORT : -DEFAULT_NULL_SORT;    return (sortType & DESCENDING) == 0 ? comp : -comp;  }}  }
class C{  private void clearLog(){synchronized (logLock) {    logBuffer.clear();  }}  }
class C{  public final void print(String string) throws IOException {  printLatin1(string);}  }
class C{  protected RandomShoot(List<Target> targets,Random rng){  super(targets);  this.targets=targets;  this.rng=rng;  if (fetchSubtargets(targets))   startRound();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TestDrawable)) {    return false;  }  return true;}  }
class C{  private static String randomPositiveMonetary(int length){  return NumericFunctions.randomPositiveFloat(length,2);}  }
class C{  public Transaction sendCoins(WalletData perWalletModelData,SendRequest sendRequest,CharSequence password) throws java.io.IOException, AddressFormatException, KeyCrypterException {  List<Peer> connectedPeers=peerGroup.getConnectedPeers();  boolean atLeastOnePingWorked=false;  if (connectedPeers != null) {    for (    Peer peer : connectedPeers) {      log.debug("Ping: {}",peer.getAddress().toString());      try {        ListenableFuture<Long> result=peer.ping();        result.get(4,TimeUnit.SECONDS);        atLeastOnePingWorked=true;        break;      } catch (      ProtocolException e) {        log.warn("Peer '" + peer.getAddress().toString() + "' failed ping test. Message was "+ e.getMessage());      }catch (      InterruptedException e) {        log.warn("Peer '" + peer.getAddress().toString() + "' failed ping test. Message was "+ e.getMessage());      }catch (      ExecutionException e) {        log.warn("Peer '" + peer.getAddress().toString() + "' failed ping test. Message was "+ e.getMessage());      }catch (      TimeoutException e) {        log.warn("Peer '" + peer.getAddress().toString() + "' failed ping test. Message was "+ e.getMessage());      }    }  }  if (!atLeastOnePingWorked) {    throw new IllegalStateException("All peers failed ping test (check network)");  }  log.debug("MultiBitService#sendCoins - Just about to send coins");  KeyParameter aesKey=null;  if (perWalletModelData.getWallet().getEncryptionType() != EncryptionType.UNENCRYPTED) {    aesKey=perWalletModelData.getWallet().getKeyCrypter().deriveKey(password);  }  sendRequest.aesKey=aesKey;  sendRequest.fee=BigInteger.ZERO;  sendRequest.feePerKb=BitcoinModel.SEND_FEE_PER_KB_DEFAULT;  sendRequest.tx.getConfidence().addEventListener(perWalletModelData.getWallet().getTxConfidenceListener());  try {    perWalletModelData.getWallet().sign(sendRequest);    perWalletModelData.getWallet().commitTx(sendRequest.tx);    peerGroup.broadcastTransaction(sendRequest.tx);    log.debug("Sending transaction '" + Utils.bytesToHexString(sendRequest.tx.bitcoinSerialize()) + "'");  } catch (  VerificationException e1) {    e1.printStackTrace();  }  Transaction sendTransaction=sendRequest.tx;  log.debug("MultiBitService#sendCoins - Sent coins has completed");  assert sendTransaction != null;  if (sendTransaction != null) {    log.debug("MultiBitService#sendCoins - Sent coins. Transaction hash is {}",sendTransaction.getHashAsString() + ", identityHashcode = " + System.identityHashCode(sendTransaction));    if (sendTransaction.getConfidence() != null) {      log.debug("Added bitcoinController " + System.identityHashCode(bitcoinController) + " as listener to tx = "+ sendTransaction.getHashAsString());      sendTransaction.getConfidence().addEventListener(bitcoinController);    } else {      log.debug("Cannot add bitcoinController as listener to tx = " + sendTransaction.getHashAsString() + " no transactionConfidence");    }    try {      bitcoinController.getFileHandler().savePerWalletModelData(perWalletModelData,false);    } catch (    WalletSaveException wse) {      log.error(wse.getClass().getCanonicalName() + " " + wse.getMessage());      MessageManager.INSTANCE.addMessage(new Message(wse.getClass().getCanonicalName() + " " + wse.getMessage()));    }catch (    WalletVersionException wse) {      log.error(wse.getClass().getCanonicalName() + " " + wse.getMessage());      MessageManager.INSTANCE.addMessage(new Message(wse.getClass().getCanonicalName() + " " + wse.getMessage()));    }    try {      List<WalletData> perWalletModelDataList=bitcoinController.getModel().getPerWalletModelDataList();      if (perWalletModelDataList != null) {        for (        WalletData loopPerWalletModelData : perWalletModelDataList) {          if (!perWalletModelData.getWalletFilename().equals(loopPerWalletModelData.getWalletFilename())) {            Wallet loopWallet=loopPerWalletModelData.getWallet();            if (loopWallet.isPendingTransactionRelevant(sendTransaction)) {              if (loopPerWalletModelData.getWalletInfo() != null) {synchronized (loopPerWalletModelData.getWalletInfo()) {                  loopPerWalletModelData.setDirty(true);                }              } else {                loopPerWalletModelData.setDirty(true);              }              if (loopWallet.getTransaction(sendTransaction.getHash()) == null) {                log.debug("MultiBit adding a new pending transaction for the wallet '" + loopPerWalletModelData.getWalletDescription() + "'\n"+ sendTransaction.toString());                loopWallet.receivePending(sendTransaction,null);              }            }          }        }      }    } catch (    ScriptException e) {      e.printStackTrace();    }catch (    VerificationException e) {      e.printStackTrace();    }  }  return sendTransaction;}  }
class C{  public static String byteArrayToHex(final byte[] data,final int offset,final int length){  final StringBuffer buf=new StringBuffer();  for (int i=offset; i < offset + length; i++) {    int halfbyte=(data[i] >>> 4) & 0x0F;    int twohalfs=0;    do {      if ((0 <= halfbyte) && (halfbyte <= 9)) {        buf.append((char)('0' + halfbyte));      } else {        buf.append((char)('a' + (halfbyte - 10)));      }      halfbyte=data[i] & 0x0F;    } while (twohalfs++ < 1);  }  return buf.toString();}  }
class C{  public static String guessType(InputMappingBlock mapping,ShaderNodeVariable left){  String type=left.getType();  int card=ShaderUtils.getCardinality(type,mapping.getRightVarSwizzle() == null ? "" : mapping.getRightVarSwizzle());  if (card > 0) {    if (card == 1) {      type="float";    } else {      type="vec" + card;    }  }  return type;}  }
class C{  public BooleanMemberValue(boolean b,ConstPool cp){  super('Z',cp);  setValue(b);}  }
class C{  private boolean isDeadNode(UUID uid){  return ctx.discovery().node(uid) == null || !ctx.discovery().pingNodeNoError(uid);}  }
class C{  private void prepareVolumes(StorageSystem storage,VolumeURIHLU[] volumeURIHLUs,List<StorageVolume> driverVolumes,Map<String,String> driverVolumeToHLUMap,Map<String,URI> volumeNativeIdToUriMap){  for (  VolumeURIHLU volumeURIHLU : volumeURIHLUs) {    URI volumeURI=volumeURIHLU.getVolumeURI();    BlockObject volume=(BlockObject)dbClient.queryObject(volumeURI);    StorageVolume driverVolume=createDriverVolume(storage,volume);    driverVolumes.add(driverVolume);    Integer decimalHLU;    if (volumeURIHLU.getHLU().equals(ExportGroup.LUN_UNASSIGNED_STR)) {      decimalHLU=ExportGroup.LUN_UNASSIGNED;    } else {      decimalHLU=Integer.parseInt(volumeURIHLU.getHLU(),16);    }    driverVolumeToHLUMap.put(driverVolume.getNativeId(),decimalHLU.toString());    volumeNativeIdToUriMap.put(driverVolume.getNativeId(),volumeURI);  }  log.info("prepareVolumes: volume-HLU pairs for driver: {}",driverVolumeToHLUMap);}  }
class C{  private <T>void writeBundle(XmlWriter<T> writer,List<T> elements,WritableByteChannel channel) throws Exception {  writer.prepareWrite(channel);  writer.writeHeader();  for (  T elem : elements) {    writer.write(elem);  }  writer.writeFooter();}  }
class C{  public EdgeEnd findEdgeEnd(Edge e){  for (Iterator i=getEdgeEnds().iterator(); i.hasNext(); ) {    EdgeEnd ee=(EdgeEnd)i.next();    if (ee.getEdge() == e)     return ee;  }  return null;}  }
class C{  public boolean doWindowDeActivated(){  if (m_tradingdays.isDirty()) {    setStatusBarMessage("Please Save or Refresh as changed are pending",BasePanel.WARNING);    return false;  }  if (null != deleteProgressMonitor) {    if (!deleteProgressMonitor.isDone())     return false;  }  return true;}  }
class C{  public void unsetCompression(){  if (getCompressionMode() != MODE_EXPLICIT) {    throw new IllegalStateException("Compression mode not MODE_EXPLICIT!");  }  this.compressionQuality=JPEG.DEFAULT_QUALITY;}  }
class C{  public synchronized void render(Graphics g){  if (renderPoint) {    super.render(g);  }}  }
class C{  protected void expand(boolean adjustTree){  if (!isExpanded() && !isLeaf()) {    boolean isFixed=isFixedRowHeight();    int startHeight=getPreferredHeight();    int originalRow=getRow();    expanded=true;    updatePreferredSize(originalRow);    if (!hasBeenExpanded) {      TreeStateNode newNode;      Object realNode=getValue();      TreeModel treeModel=getModel();      int count=treeModel.getChildCount(realNode);      hasBeenExpanded=true;      if (originalRow == -1) {        for (int i=0; i < count; i++) {          newNode=createNodeForValue(treeModel.getChild(realNode,i));          this.add(newNode);          newNode.updatePreferredSize(-1);        }      } else {        int offset=originalRow + 1;        for (int i=0; i < count; i++) {          newNode=createNodeForValue(treeModel.getChild(realNode,i));          this.add(newNode);          newNode.updatePreferredSize(offset);        }      }    }    int i=originalRow;    Enumeration cursor=preorderEnumeration();    cursor.nextElement();    int newYOrigin;    if (isFixed)     newYOrigin=0; else     if (this == root && !isRootVisible())     newYOrigin=0; else     newYOrigin=getYOrigin() + this.getPreferredHeight();    TreeStateNode aNode;    if (!isFixed) {      while (cursor.hasMoreElements()) {        aNode=(TreeStateNode)cursor.nextElement();        if (!updateNodeSizes && !aNode.hasValidSize())         aNode.updatePreferredSize(i + 1);        aNode.setYOrigin(newYOrigin);        newYOrigin+=aNode.getPreferredHeight();        visibleNodes.insertElementAt(aNode,++i);      }    } else {      while (cursor.hasMoreElements()) {        aNode=(TreeStateNode)cursor.nextElement();        visibleNodes.insertElementAt(aNode,++i);      }    }    if (adjustTree && (originalRow != i || getPreferredHeight() != startHeight)) {      if (!isFixed && ++i < getRowCount()) {        int counter;        int heightDiff=newYOrigin - (getYOrigin() + getPreferredHeight()) + (getPreferredHeight() - startHeight);        for (counter=visibleNodes.size() - 1; counter >= i; counter--)         ((TreeStateNode)visibleNodes.elementAt(counter)).shiftYOriginBy(heightDiff);      }      didAdjustTree();      visibleNodesChanged();    }    if (treeSelectionModel != null) {      treeSelectionModel.resetRowSelection();    }  }}  }
class C{  @Override public void acceptTestSet(TestSetEvent e){  Instances testSet=e.getTestSet();  DataSetEvent dse=new DataSetEvent(this,testSet);  acceptDataSet(dse);}  }
class C{  public void onItemPinned(int position){  final DialogFragment dialog=ItemPinnedMessageDialogFragment.newInstance(position);  getSupportFragmentManager().beginTransaction().add(dialog,FRAGMENT_TAG_ITEM_PINNED_DIALOG).commit();}  }
class C{  public static Class classForName(String className) throws ClassNotFoundException {  return classLoaderWrapper.classForName(className);}  }
class C{  @Override public void update(StepExecution modifiedInstance){synchronized (lockObject) {    super.update(modifiedInstance);  }}  }
class C{  public JobExecutionException(String msg,boolean refireImmediately){  super(msg);  refire=refireImmediately;}  }
class C{  public static DoubleUnaryOperator identity(){  return null;}  }
class C{  public static void clear(Color color){  offscreen.setColor(color);  offscreen.fillRect(0,0,width,height);  offscreen.setColor(penColor);  draw();}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    if (namespace != null) {      namespace.visit(v);    }    propName.visit(v);  }}  }
class C{  public void loadSharedConfigurationFromDisk() throws Exception {  Map<String,Configuration> sharedConfigurationMap=readSharedConfigurationFromDisk();  getConfigurationRegion().clear();  getConfigurationRegion().putAll(sharedConfigurationMap);}  }
class C{  public ColorDifference(){  Timer timer=new Timer(1000,this);  timer.start();  setPreferredSize(new Dimension(300,200));}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  private boolean isLoad(Location location){  Instruction ins=location.getHandle().getInstruction();  return (ins instanceof LoadInstruction) || (ins instanceof IINC);}  }
class C{  public TupleQueryResultFormat(String name,Collection<String> mimeTypes,Charset charset,Collection<String> fileExtensions){  super(name,mimeTypes,charset,fileExtensions);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.779 -0500",hash_original_method="5246336FD52DFE5F131EDCED707C7332",hash_generated_method="ED3C500AF22D7EC0F8DFCE04924B39D5") public boolean isSecure(){  return this.getScheme().equalsIgnoreCase(SIPS);}  }
class C{  private ExportMask initializeExportMask(StorageSystem storage,ExportGroup exportGroup,URI varrayURI,List<URI> initiatorURIs,Map<URI,Integer> volumeMap,String opId) throws Exception {  List<Initiator> initiators=_dbClient.queryObject(Initiator.class,initiatorURIs);  ExportPathParams pathParams=_blockScheduler.calculateExportPathParamForVolumes(volumeMap.keySet(),0,storage.getId(),exportGroup.getId());  if (exportGroup.getType() != null) {    pathParams.setExportGroupType(exportGroup.getType());  }  Map<URI,List<URI>> assignments=_blockScheduler.assignStoragePorts(storage,exportGroup,initiators,null,pathParams,volumeMap.keySet(),_networkDeviceController,varrayURI,opId);  List<URI> targets=BlockStorageScheduler.getTargetURIsFromAssignments(assignments);  String maskName=getComputedExportMaskName(storage,varrayURI,initiators,CustomConfigConstants.VPLEX_STORAGE_VIEW_NAME);  ExportMask exportMask=ExportMaskUtils.initializeExportMask(storage,exportGroup,initiators,volumeMap,targets,assignments,maskName,_dbClient);  _dbClient.updateObject(exportMask);  return exportMask;}  }
class C{  public Builder withTcpNoDelay(boolean tcpNoDelay){  properties.setProperty(NettyOptions.TCP_NO_DELAY,String.valueOf(tcpNoDelay));  return this;}  }
class C{  public LimitTokenCountAnalyzer(Analyzer delegate,int maxTokenCount){  this(delegate,maxTokenCount,false);}  }
class C{  public Population(Iterable<? extends Solution> iterable){  this();  addAll(iterable);}  }
class C{  private int composeEntry(int codePoint,int value){  return (codePoint << 8) | (value & 0xFF);}  }
class C{  public static boolean typeCheck(Class type,Object instance){  return type.isAssignableFrom(instance.getClass()) || isWrapperInstance(type,instance);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.880 -0500",hash_original_method="D5AF5503C90FCC35F15F05FB572F3FAB",hash_generated_method="134E4FBB2BB202128B0067BCEDC4F6B5") public final int countCategories(){  return mCategories != null ? mCategories.size() : 0;}  }
class C{  public String thresholdTipText(){  return "Set threshold by which attributes can be discarded. Default value " + "results in no attributes being discarded. Use either this option or " + "numToSelect to reduce the attribute set.";}  }
class C{  @Override public void intervalRemoved(ListDataEvent event){  calculatePositionArray();  setPreferredSize(calculatePreferredSize());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.METADATABLE__OWNED_METADATAS:    return ownedMetadatas != null && !ownedMetadatas.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private OperatorSymbol enterUnop(String name,Type arg,Type res,int opcode){  OperatorSymbol sym=new OperatorSymbol(makeOperatorName(name),new MethodType(List.of(arg),res,List.<Type>nil(),methodClass),opcode,predefClass);  predefClass.members().enter(sym);  return sym;}  }
class C{  public SilentExit(int exitCode){  this.exitCode=exitCode;}  }
class C{  private void addResourceCitation(Document doc,Eml eml) throws DocumentException {  if (exists(eml.getCitation())) {    Paragraph p=new Paragraph();    p.setAlignment(Element.ALIGN_JUSTIFIED);    p.setFont(font);    p.add(new Phrase(getText("eml.citation.citation"),fontTitle));    p.add(Chunk.NEWLINE);    p.add(Chunk.NEWLINE);    if (exists(eml.getCitation().getCitation())) {      p.add(eml.getCitation().getCitation().replace("\r\n","\n"));    }    if (exists(eml.getCitation().getIdentifier())) {      p.add(" ");      p.add(eml.getCitation().getIdentifier());    }    p.add(Chunk.NEWLINE);    doc.add(p);    p.clear();  }}  }
class C{  TemporalAccessor toResolved(ResolverStyle resolverStyle,Set<TemporalField> resolverFields){  Parsed parsed=currentParsed();  parsed.chrono=getEffectiveChronology();  parsed.zone=(parsed.zone != null ? parsed.zone : formatter.getZone());  return parsed.resolve(resolverStyle,resolverFields);}  }
class C{  public void numAnnotations(int num) throws IOException {  write16bit(num);}  }
class C{  public WrongParameterValueException(Parameter<?> parameter,String read,String reason,Throwable cause){  this("Wrong value of parameter " + parameter.getName() + ".\n"+ "Read: "+ read+ ".\n"+ "Expected: "+ parameter.getFullDescription()+ "\n"+ reason+ "\n"+ formatCause(cause),cause);}  }
class C{  public NSNumber(double d){  longValue=(long)(doubleValue=d);  type=REAL;}  }
class C{  public HAVING HAVING(String having){  return new HAVING(this,having);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.POSITION___ASSOCIATION_POSITION_1:    return getAssociationPosition_1();case UmplePackage.POSITION___ELEMENT_POSITION_1:  return getElementPosition_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public NextPollCounterUpdate(final Collection<AbstractSimulatedDevice> devices){  this.devices=devices;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.FEATURE_CALL__OWNER:    setOwner((Expression)null);  return;case ExpressionsPackage.FEATURE_CALL__FEATURE:setFeature((EObject)null);return;case ExpressionsPackage.FEATURE_CALL__OPERATION_CALL:setOperationCall(OPERATION_CALL_EDEFAULT);return;case ExpressionsPackage.FEATURE_CALL__ARGS:getArgs().clear();return;case ExpressionsPackage.FEATURE_CALL__ARRAY_SELECTOR:getArraySelector().clear();return;case ExpressionsPackage.FEATURE_CALL__ARRAY_ACCESS:setArrayAccess(ARRAY_ACCESS_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public boolean isIgnoreSensors(){  return sensors;}  }
class C{  private static int hash(int x,int level,int offset,int size){  x+=level * OFFSETS + offset;  x=((x >>> 16) ^ x) * 0x45d9f3b;  x=((x >>> 16) ^ x) * 0x45d9f3b;  x=(x >>> 16) ^ x;  return Math.abs(x % size);}  }
class C{  public boolean hasAlbum(){  return hasExtension(Album.class);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public IntSet(Collection<Integer> collection){  this();  for (  Integer integer : collection)   this.add(integer);}  }
class C{  static public boolean hasSupportedVideo(Tweet tweet){  final MediaEntity entity=getVideoEntity(tweet);  return entity != null && getSupportedVariant(entity) != null;}  }
class C{  public void reset(Reader reader){  this.reader=reader;  nextPos=0;  nextWrite=0;  count=0;  end=false;}  }
class C{  public static double toDegrees(double angrad){  if (USE_JDK_MATH) {    return Math.toDegrees(angrad);  }  return angrad * (180 / Math.PI);}  }
class C{  public ParameterTypeFile(String key,String description,boolean optional,String[] extensions){  super(key,description,null);  setOptional(optional);  this.extensions=extensions;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.358 -0500",hash_original_method="62DD7ED3C887DF9CAF781EDBA38B8A50",hash_generated_method="29C7770F294FC656D07D466B02A78774") private void ensureMatch(){  if (!matchFound) {    throw new IllegalStateException("No successful match so far");  }}  }
class C{  StyledString createTypeProposalLabel(CompletionProposal typeProposal){  char[] signature;  if (fContext != null && fContext.isInJavadoc())   signature=Signature.getTypeErasure(typeProposal.getSignature()); else   signature=typeProposal.getSignature();  char[] fullName=Signature.toCharArray(signature);  return createTypeProposalLabel(fullName);}  }
class C{  @Override public boolean equals(Object object){  return object == null || object == this;}  }
class C{  public DataSourceRegressionTest(String name){  super(name);}  }
class C{  public void stopPlotting(){  m_stopPlotting=true;  try {    m_plotThread.join(100);  } catch (  Exception e) {  }  ;}  }
class C{  public String openExternal(String url){  try {    Intent intent=null;    intent=new Intent(Intent.ACTION_VIEW);    Uri uri=Uri.parse(url);    if ("file".equals(uri.getScheme())) {      intent.setDataAndType(uri,webView.getResourceApi().getMimeType(uri));    } else {      intent.setData(uri);    }    this.cordova.getActivity().startActivity(intent);    return "";  } catch (  android.content.ActivityNotFoundException e) {    Log.d(LOG_TAG,"InAppBrowser: Error loading url " + url + ":"+ e.toString());    return e.toString();  }}  }
class C{  @Override public PowerLawDegreeEdgeRandomIterator resetForNode(int inputNode,int numSamplesToGet,Random randomGen){  super.resetForNode(inputNode);  this.numSamples=numSamplesToGet;  this.random=randomGen;  return this;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public static String start(Frame owner,String header,String script,boolean editable,int WindowNo){  Scriptlet scr=new Scriptlet(Scriptlet.VARIABLE,script,Env.getCtx(),WindowNo);  String value=Env.getContext(Env.getCtx(),WindowNo,"Value");  if (value != null && value.startsWith("groovy:")) {    GroovyEditor gv=new GroovyEditor(owner,header,script,WindowNo);    return gv.getScript();  } else {    BeanShellEditor se=new BeanShellEditor(owner,header,scr,WindowNo);    return scr.getScript();  }}  }
class C{  public Person(){  super(KEY);}  }
class C{  public static final String stripSpaces(final String data){  final StringBuilder text=new StringBuilder((data));  while (text.length() > 0) {    if (text.charAt(0) != ' ') {      break;    }    text.deleteCharAt(0);    int pointer2=text.length() - 1;    while (pointer2 > 0) {      if (text.charAt(pointer2) != ' ') {        break;      }      text.deleteCharAt(pointer2);      pointer2--;      if (pointer2 < 0) {        break;      }    }  }  return text.toString();}  }
class C{  public void onCancelOrder(TradeOrder tradeOrder) throws BrokerModelException {  try {    OrderState orderState=new OrderState();    orderState.m_status=OrderStatus.CANCELLED;    openOrder(tradeOrder.getOrderKey(),null,tradeOrder,orderState);  } catch (  Exception ex) {    throw new BrokerModelException(tradeOrder.getOrderKey(),3040,"Could not CancelOrder: " + ex.getMessage());  }}  }
class C{  static private String calcThreshold(double scoreThreshold,double lambda){  final double logProbThreshold=Math.log(1 - scoreThreshold / 0.999);  int maxNum=1000000;  if (calcLogProb(maxNum,lambda) > logProbThreshold) {    return ">1e6";  }  int minNum=1;  while (minNum < maxNum) {    final int midNum=(maxNum + minNum) / 2;    final boolean passThreshold=calcLogProb(midNum,lambda) <= logProbThreshold;    if (passThreshold) {      maxNum=midNum;    } else {      if (midNum == minNum) {        break;      }      minNum=midNum;    }  }  return Integer.toString(maxNum);}  }
class C{  private void putProfileValue(Object setValue){  Method profileSetMethod=getProfileSetMethod();  if (profileSetMethod != null) {    try {      profileSetMethod.invoke(ConfigurationManager.getCurrentProfile(),setValue);    } catch (    final Exception e) {      logger.error("storeValue: invoke 'set" + methodBase + "Excepion "+ e);    }  }}  }
class C{  public void asciiToCharMB() throws IOException {  print("asciiToCharMB",null);}  }
class C{  public void addButtonActionPerformed(){  String nodeAddress=readNodeAddress();  if (nodeAddress.equals("")) {    return;  }  curNode=(IEEE802154Node)itc.getNodeFromAddress(nodeAddress);  if (curNode != null) {    javax.swing.JOptionPane.showMessageDialog(this,Bundle.getMessage("Error1",nodeAddress),Bundle.getMessage("AddNodeErrorTitle"),JOptionPane.ERROR_MESSAGE);    log.error("Error creating IEEE802154 Node, Node exists.");    return;  }  curNode=itc.newNode();  if (curNode == null) {    javax.swing.JOptionPane.showMessageDialog(this,Bundle.getMessage("Error3"),Bundle.getMessage("AddNodeErrorTitle"),JOptionPane.ERROR_MESSAGE);    log.error("Error creating IEEE802154 Node, constructor returned null");    return;  }  this.dispatchEvent(new WindowEvent(this,WindowEvent.WINDOW_CLOSING));}  }
class C{  private Object writeReplace(){  return new SerializationProxy(this);}  }
class C{  public Main(){  this(null);}  }
class C{  public static void main(String[] args){  TransitSchedule schedule=ScheduleTools.readTransitSchedule(args[0]);  removeTransitRoutesWithoutLinkSequences(schedule);  removeNotUsedStopFacilities(schedule);  if (args.length == 1) {    ScheduleTools.writeTransitSchedule(schedule,args[0]);  } else   if (args.length == 2) {    ScheduleTools.writeTransitSchedule(schedule,args[1]);  } else {    throw new IllegalArgumentException("Wrong number of arguments given");  }}  }
class C{  public static boolean isLinux(){  return (OS_NAME.contains("linux"));}  }
class C{  @Override public boolean removeAll(Collection<?> collection){  boolean result=false;  if (size() <= collection.size()) {    Iterator<?> it=iterator();    while (it.hasNext()) {      if (collection.contains(it.next())) {        it.remove();        result=true;      }    }  } else {    Iterator<?> it=collection.iterator();    while (it.hasNext()) {      result=remove(it.next()) || result;    }  }  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean insert(int val){  Integer v=val;  boolean flag=list.contains(v);  list.add(v);  return !flag;}  }
class C{  public static void insertCriterium(final CCriteriumTree tree,final CCriteriumTreeNode parent,final ICriterium criterium){  tree.insertNode(parent,new CCriteriumTreeNode(criterium));}  }
class C{  @SuppressWarnings("unused") public BatchViewAsMap(DataflowRunner runner,View.AsMap<K,V> transform){  this.runner=runner;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord)   setAD_Column(getCtx(),this,get_TrxName());  int displayType=getAD_Reference_ID();  if (DisplayType.isLOB(displayType)) {    if (getFieldLength() != 0)     setFieldLength(0);  } else   if (getFieldLength() == 0) {    if (DisplayType.isID(displayType))     setFieldLength(10); else     if (DisplayType.isNumeric(displayType))     setFieldLength(14); else     if (DisplayType.isDate(displayType))     setFieldLength(7); else {      log.saveError("FillMandatory",Msg.getElement(getCtx(),"FieldLength"));      return false;    }  }  if (isIdentifier()) {    int cnt=DB.getSQLValue(get_TrxName(),"SELECT COUNT(*) FROM AD_Column " + "WHERE AD_Table_ID=?" + " AND AD_Column_ID!=?"+ " AND IsIdentifier='Y'"+ " AND SeqNo=?",new Object[]{getAD_Table_ID(),getAD_Column_ID(),getSeqNo()});    if (cnt > 0) {      log.saveError("SaveErrorNotUnique",Msg.getElement(getCtx(),COLUMNNAME_SeqNo));      return false;    }  }  if (isVirtualColumn()) {    if (isMandatory())     setIsMandatory(false);    if (isUpdateable())     setIsUpdateable(false);  }  if (isParent() || isKey())   setIsUpdateable(false);  if (isAlwaysUpdateable() && !isUpdateable())   setIsAlwaysUpdateable(false);  if (isEncrypted()) {    int dt=getAD_Reference_ID();    if (isKey() || isParent() || isStandardColumn()|| isVirtualColumn()|| isIdentifier()|| isTranslated()|| DisplayType.isLookup(dt)|| DisplayType.isLOB(dt)|| "DocumentNo".equalsIgnoreCase(getColumnName())|| "Value".equalsIgnoreCase(getColumnName())|| "Name".equalsIgnoreCase(getColumnName())) {      log.warning("Encryption not sensible - " + getColumnName());      setIsEncrypted(false);    }  }  if ((newRecord || is_ValueChanged("AD_Element_ID")) && getAD_Element_ID() != 0) {    M_Element element=new M_Element(getCtx(),getAD_Element_ID(),get_TrxName());    setColumnName(element.getColumnName());    setName(element.getName());    setDescription(element.getDescription());    setHelp(element.getHelp());  }  return true;}  }
class C{  private static Platform findPlatform(){  try {    try {      Class.forName("com.android.org.conscrypt.OpenSSLSocketImpl");    } catch (    ClassNotFoundException e) {      Class.forName("org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl");    }    OptionalMethod<Socket> setUseSessionTickets=new OptionalMethod<>(null,"setUseSessionTickets",boolean.class);    OptionalMethod<Socket> setHostname=new OptionalMethod<>(null,"setHostname",String.class);    Method trafficStatsTagSocket=null;    Method trafficStatsUntagSocket=null;    OptionalMethod<Socket> getAlpnSelectedProtocol=null;    OptionalMethod<Socket> setAlpnProtocols=null;    try {      Class<?> trafficStats=Class.forName("android.net.TrafficStats");      trafficStatsTagSocket=trafficStats.getMethod("tagSocket",Socket.class);      trafficStatsUntagSocket=trafficStats.getMethod("untagSocket",Socket.class);      try {        Class.forName("android.net.Network");        getAlpnSelectedProtocol=new OptionalMethod<>(byte[].class,"getAlpnSelectedProtocol");        setAlpnProtocols=new OptionalMethod<>(null,"setAlpnProtocols",byte[].class);      } catch (      ClassNotFoundException ignored) {      }    } catch (    ClassNotFoundException|NoSuchMethodException ignored) {    }    return new Android(setUseSessionTickets,setHostname,trafficStatsTagSocket,trafficStatsUntagSocket,getAlpnSelectedProtocol,setAlpnProtocols);  } catch (  ClassNotFoundException ignored) {  }  try {    String negoClassName="org.eclipse.jetty.alpn.ALPN";    Class<?> negoClass=Class.forName(negoClassName);    Class<?> providerClass=Class.forName(negoClassName + "$Provider");    Class<?> clientProviderClass=Class.forName(negoClassName + "$ClientProvider");    Class<?> serverProviderClass=Class.forName(negoClassName + "$ServerProvider");    Method putMethod=negoClass.getMethod("put",SSLSocket.class,providerClass);    Method getMethod=negoClass.getMethod("get",SSLSocket.class);    Method removeMethod=negoClass.getMethod("remove",SSLSocket.class);    return new JdkWithJettyBootPlatform(putMethod,getMethod,removeMethod,clientProviderClass,serverProviderClass);  } catch (  ClassNotFoundException|NoSuchMethodException ignored) {  }  return new Platform();}  }
class C{  public boolean isExtensionAuthorized(String ext){  return ext != null && !(EnrichCallingService.CALL_COMPOSER_FEATURE_TAG.equals(ext) && !isCallComposerSupported()) && !(EnrichCallingService.SHARED_MAP_SERVICE_ID.equals(ext) && !isSharedMapSupported()) && !(EnrichCallingService.SHARED_SKETCH_SERVICE_ID.equals(ext) && !isSharedSketchSupported()) && !(EnrichCallingService.POST_CALL_SERVICE_ID.equals(ext) && !isPostCallSupported());}  }
class C{  public void clear(){  this.size=0;}  }
class C{  public void addServiceType(ServiceType<?> serviceType){  services.add(serviceType);}  }
class C{  @Override public String toString(){  return "cudaArray[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  protected ArrayList<Choiceable> asyncGetResults(CharSequence constraint){  ArrayList<Choiceable> resultList=new ArrayList<Choiceable>();  for (  Choiceable c : backupList) {    if (c.getTitleText().toLowerCase().contains(constraint.toString().toLowerCase()) || EditTextUtil.removeAccents(c.getTitleText().toLowerCase()).contains(constraint.toString().toLowerCase())) {      resultList.add(c);    }  }  return resultList;}  }
class C{  @ApiOperation(value="Remove user from workspace",notes="Remove a user from a workspace by User ID. Roles allowed: account/owner, workspace/admin, workspace/developer." + "User who has only workspace/developer role can remove only his own memberships.") @ApiResponses(value={@ApiResponse(code=204,message="No Content"),@ApiResponse(code=403,message="User not authorized to perform this operation"),@ApiResponse(code=404,message="Not Found"),@ApiResponse(code=409,message="Cannot remove workspace/admin"),@ApiResponse(code=500,message="Internal Server Error")}) @DELETE @Path("/{id}/members/{userid}") @RolesAllowed({"account/owner","workspace/admin","workspace/developer"}) public void removeMember(@ApiParam(value="Workspace ID") @PathParam("id") String wsId,@ApiParam(value="User ID") @PathParam("userid") String userId,@Context SecurityContext context) throws NotFoundException, ServerException, ConflictException, ForbiddenException {  String currentUserId=EnvironmentContext.getCurrent().getUser().getId();  if (!context.isUserInRole("workspace/admin") && context.isUserInRole("workspace/developer") && !userId.equals(currentUserId)) {    throw new ForbiddenException("Access denied");  }  memberDao.remove(new Member().withUserId(userId).withWorkspaceId(wsId));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void put(String key,InputStream stream,String name,String contentType,boolean autoClose){  if (key != null && stream != null) {    streamParams.put(key,StreamWrapper.newInstance(stream,name,contentType,autoClose));  }}  }
class C{  GraphicsState(){  m_currentColor=Color.white;  m_currentFont=new Font("Courier",Font.PLAIN,11);  m_currentStroke=new BasicStroke();  m_xOffset=0;  m_yOffset=0;  m_xScale=1.0;  m_yScale=1.0;}  }
class C{  public void testDataSource() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/datasource-test/test");  final String expected="Got connection!";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof MapPanelChild && someObj instanceof Component) {    if (Debug.debugging("basic")) {      Debug.output("HotwashPanel: removing " + someObj.getClass().getName());    }    remove((Component)someObj);    invalidate();  }}  }
class C{  MiniEnumSet(Class<E> elementType,E[] enums){  super(elementType);  this.enums=enums;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  NodeList childList;  Node childNode;  Node clonedNode;  Node lastChildNode;  String childValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("salary");  childNode=elementList.item(1);  clonedNode=childNode.cloneNode(true);  lastChildNode=clonedNode.getLastChild();  childValue=lastChildNode.getNodeValue();  assertEquals("nodeCloneTrueCopyTextAssert1","35,000",childValue);}  }
class C{  public Command(){  msgQueue=new LinkedList<Message>();  msgQueue.clear();}  }
class C{  public static String clearCart(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  cart.clear();  HttpSession session=request.getSession();  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  if (userLogin != null && "anonymous".equals(userLogin.get("userLoginId"))) {    Locale locale=UtilHttp.getLocale(session);    session.invalidate();    session=request.getSession(true);    if (null != locale) {      UtilHttp.setLocale(session,locale);    }    request.setAttribute("temporaryAnonymousUserLogin",userLogin);    Debug.logInfo("Doing clearCart for anonymous user, so logging out but put anonymous userLogin in temporaryAnonymousUserLogin request attribute",module);  }  return "success";}  }
class C{  protected boolean beforeSave(boolean newRecord){  setDifferenceAmt(getOpenAmt().subtract(getPayAmt()).subtract(getDiscountAmt()));  return true;}  }
class C{  @Override public List<ReilInstruction> translate(final ITranslationEnvironment environment,final InstructionType instruction,final List<ITranslationExtension<InstructionType>> extensions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instruction,"Error: Argument instruction can't be null");  final String mnemonic=instruction.getMnemonic();  if (translators.containsKey(mnemonic)) {    final IInstructionTranslator translator=translators.get(mnemonic);    final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();    translator.translate(environment,instruction,instructions);    for (    final ITranslationExtension<InstructionType> extension : extensions) {      extension.postProcess(environment,instruction,instructions);    }    return instructions;  } else   if (mnemonic == null) {    return new ArrayList<ReilInstruction>();  } else {    System.out.println("Unknown mnemonic: " + mnemonic);    return Lists.newArrayList(ReilHelpers.createUnknown(ReilHelpers.toReilAddress(instruction.getAddress()).toLong()));  }}  }
class C{  public LineString toLineString(){  return factory.createLineString(getCoordinates());}  }
class C{  public final long deleteAllSession(){  return contentResolver.delete(ContentProvider.CONTENT_URI_SESSION,null,null);}  }
class C{  protected void init(String owner,MethodNode m) throws AnalyzerException {}  }
class C{  public List<Label> reattachLabels(MuninFoo muninFoo,MuninMaster oldMaster){  List<Label> toBeUpdated_labels=new ArrayList<>();  List<Label> labels=muninFoo.labels;  if (labels.isEmpty())   return toBeUpdated_labels;  for (  MuninNode node : oldMaster.getChildren()) {    for (    MuninPlugin plugin : node.getPlugins()) {      for (      Label label : labels) {        ArrayList<MuninPlugin> toBeRemoved=new ArrayList<>();        ArrayList<MuninPlugin> toBeAdded=new ArrayList<>();        for (        MuninPlugin labelPlugin : label.plugins) {          if (labelPlugin.equals(plugin)) {            MuninPlugin newPlugin=this.getNode(node.getUrl()).getPlugin(labelPlugin.getName());            toBeRemoved.add(labelPlugin);            toBeAdded.add(newPlugin);            if (!toBeUpdated_labels.contains(label))             toBeUpdated_labels.add(label);          }        }        label.plugins.removeAll(toBeRemoved);        label.plugins.addAll(toBeAdded);      }    }  }  return toBeUpdated_labels;}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  void updateItem(Barcode barcode){  mBarcode=barcode;  postInvalidate();}  }
class C{  public boolean isDrawInterior(){  return this.drawInterior;}  }
class C{  public Spring removeAllListeners(){  mListeners.clear();  return this;}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  private static void checkLanguage(){  Locale locale=new Locale("en");  Locale.setDefault(locale);  Configuration configuration=trackListActivity.getBaseContext().getResources().getConfiguration();  configuration.locale=locale;  language=instrumentation.getContext().getResources().getConfiguration().locale.getLanguage();}  }
class C{  public static <T>T checkNotNull(final T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ServiceReturnsFault(){  requestFileName="getstate.query";}  }
class C{  public static ZeroIndex createIndex(final long length) throws NegativeArraySizeException, IllegalArgumentException {  return new ZeroIndex(length,0);}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(etype);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,TAG_TYPE),temp);  if (salt != null) {    temp=new DerOutputStream();    if (KerberosString.MSNAME) {      temp.putOctetString(salt.getBytes("UTF8"));    } else {      temp.putOctetString(salt.getBytes());    }    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,TAG_VALUE),temp);  }  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  public static <V,E>double diameter(Hypergraph<V,E> g,Distance<V> d,boolean use_max){  double diameter=0;  Collection<V> vertices=g.getVertices();  for (  V v : vertices) {    for (    V w : vertices) {      if (v.equals(w) == false) {        Number dist=d.getDistance(v,w);        if (dist == null) {          if (!use_max)           return Double.POSITIVE_INFINITY;        } else         diameter=Math.max(diameter,dist.doubleValue());      }    }  }  return diameter;}  }
class C{  private Cluster<SubspaceModel> runFastDOC(Database database,Relation<V> relation,ArrayModifiableDBIDs S,int d,int n,int m,int r){  long[] D=null;  DBIDVar dV=DBIDUtil.newVar();  FiniteProgress iprogress=LOG.isVerbose() ? new FiniteProgress("Iteration progress for current cluster",m * n,LOG) : null;  Random random=rnd.getSingleThreadedRandom();  DBIDArrayIter iter=S.iter();  outer:   for (int i=0; i < n; ++i) {    iter.seek(random.nextInt(S.size()));    for (int j=0; j < m; ++j) {      DBIDs randomSet=DBIDUtil.randomSample(S,r,random);      long[] nD=BitsUtil.zero(d);      for (int k=0; k < d; ++k) {        if (dimensionIsRelevant(k,relation,randomSet)) {          BitsUtil.setI(nD,k);        }      }      if (D == null || BitsUtil.cardinality(nD) > BitsUtil.cardinality(D)) {        D=nD;        dV.set(iter);        if (BitsUtil.cardinality(D) >= d_zero) {          if (iprogress != null) {            iprogress.setProcessed(iprogress.getTotal(),LOG);          }          break outer;        }      }      LOG.incrementProcessed(iprogress);    }  }  LOG.ensureCompleted(iprogress);  if (D == null || BitsUtil.cardinality(D) == 0) {    return null;  }  SubspaceMaximumDistanceFunction df=new SubspaceMaximumDistanceFunction(D);  DistanceQuery<V> dq=database.getDistanceQuery(relation,df);  RangeQuery<V> rq=database.getRangeQuery(dq,DatabaseQuery.HINT_SINGLE);  DBIDs C=DBIDUtil.intersection(S,rq.getRangeForDBID(dV,w));  return (C.size() > 0) ? makeCluster(relation,C,D) : null;}  }
class C{  public byte[] toByteArray(){  ByteBuffer buffer=ByteBuffer.allocate(BYTES).order(ByteOrder.LITTLE_ENDIAN);  xStats.writeTo(buffer);  yStats.writeTo(buffer);  buffer.putDouble(sumOfProductsOfDeltas);  return buffer.array();}  }
class C{  public OAEPParameterSpec(String mdName,String mgfName,AlgorithmParameterSpec mgfSpec,PSource pSrc){  if (mdName == null) {    throw new NullPointerException("digest algorithm is null");  }  if (mgfName == null) {    throw new NullPointerException("mask generation function " + "algorithm is null");  }  if (pSrc == null) {    throw new NullPointerException("source of the encoding input " + "is null");  }  this.mdName=mdName;  this.mgfName=mgfName;  this.mgfSpec=mgfSpec;  this.pSrc=pSrc;}  }
class C{  public void processStop(String[] parts,int[] indices){  stops.put(parts[indices[0]],new Stop(new Coord(Double.parseDouble(parts[indices[1]]),Double.parseDouble(parts[indices[2]])),parts[indices[3]],true));}  }
class C{  public static void deleteLocalInstructionComment(final SQLProvider provider,final INaviCodeNode codeNode,final INaviInstruction instruction,final Integer commentId,final Integer userId) throws CouldntDeleteException {  Preconditions.checkNotNull(codeNode,"IE02432: codeNode argument can not be null");  Preconditions.checkNotNull(provider,"IE02433: provider argument can not be null");  Preconditions.checkNotNull(instruction,"IE02434: instruction argument can not be null");  Preconditions.checkNotNull(commentId,"IE02435: comment argument can not be null");  Preconditions.checkNotNull(userId,"IE02436: userId argument can not be null");  final String function=" { ? = call delete_local_instruction_comment(?, ?, ?, ?, ?) } ";  try {    final CallableStatement deleteCommentStatement=provider.getConnection().getConnection().prepareCall(function);    try {      deleteCommentStatement.registerOutParameter(1,Types.INTEGER);      deleteCommentStatement.setInt(2,instruction.getModule().getConfiguration().getId());      deleteCommentStatement.setInt(3,codeNode.getId());      deleteCommentStatement.setObject(4,instruction.getAddress().toBigInteger(),Types.BIGINT);      deleteCommentStatement.setInt(5,commentId);      deleteCommentStatement.setInt(6,userId);      deleteCommentStatement.execute();      deleteCommentStatement.getInt(1);      if (deleteCommentStatement.wasNull()) {        throw new IllegalArgumentException("Error: the comment id returned from the database was null");      }    }  finally {      deleteCommentStatement.close();    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  private boolean netWrite(CacheEvent event,int action,Set writeCandidateSet) throws CacheWriterException, TimeoutException {  if (writeCandidateSet == null || writeCandidateSet.isEmpty()) {    return false;  }  ArrayList list=new ArrayList(writeCandidateSet);  Collections.shuffle(list);  InternalDistributedMember[] writeCandidates=(InternalDistributedMember[])list.toArray(new InternalDistributedMember[list.size()]);  initRemainingTimeout();  int index=0;  do {    InternalDistributedMember next=writeCandidates[index++];    Set set=new HashSet();    set.add(next);    this.netWriteSucceeded=false;    this.requestInProgress=true;    this.remoteException=null;    NetWriteRequestMessage.sendMessage(this,this.regionName,this.remainingTimeout,event,set,action);    if (this.remainingTimeout <= 0) {      break;    }    waitForObject2(this.remainingTimeout);    if (this.netWriteSucceeded) {      this.netWrite=true;      break;    }    if (this.remoteException != null) {      Throwable cause;      if (this.remoteException instanceof TryAgainException) {        if (index < writeCandidates.length) {          continue;        } else {          break;        }      }      if (this.remoteException instanceof CacheWriterException && this.remoteException.getCause() != null) {        cause=this.remoteException.getCause();      } else {        cause=this.remoteException;      }      throw new CacheWriterException(LocalizedStrings.SearchLoadAndWriteProcessor_WHILE_INVOKING_A_REMOTE_NETWRITE_0.toLocalizedString(cause),cause);    }  } while (index < writeCandidates.length);  return this.netWriteSucceeded;}  }
class C{  public int increment(int offset){  CharSequence txt=getText();  int i;  if (txt != null) {    try {      i=Integer.parseInt(txt.toString());    } catch (    NumberFormatException e) {      i=0;    }  } else {    i=0;  }  i=i + offset;  setText(String.valueOf(i));  return i;}  }
class C{  @SuppressWarnings("unchecked") public static MIssue create(Properties ctx,String hexInput){  HashMap hmIn=null;  try {    byte[] byteArray=Secure.convertHexString(hexInput);    ByteArrayInputStream bIn=new ByteArrayInputStream(byteArray);    ObjectInputStream oIn=new ObjectInputStream(bIn);    hmIn=(HashMap)oIn.readObject();  } catch (  Exception e) {    s_log.log(Level.SEVERE,"",e);    return null;  }  MIssue issue=new MIssue(ctx,(HashMap<String,String>)hmIn);  return issue;}  }
class C{  public static String upper(String s){  return s.toUpperCase(Locale.ENGLISH);}  }
class C{  private static Intent createShareIntentForTag(Context context,final String shareText){  final Intent shareIntent=new Intent(Intent.ACTION_SEND);  shareIntent.putExtra(android.content.Intent.EXTRA_SUBJECT,context.getString(R.string.share_tag_subject));  shareIntent.putExtra(android.content.Intent.EXTRA_TEXT,shareText);  shareIntent.setType("text/plain");  return shareIntent;}  }
class C{  public SnmpGauge(Long v) throws IllegalArgumentException {  super(v);}  }
class C{  private void doDiscovery(){  if (D)   Log.d(TAG,"doDiscovery()");  setProgressBarIndeterminateVisibility(true);  setTitle(R.string.scanning);  findViewById(R.id.title_new_devices).setVisibility(View.VISIBLE);  if (mBtAdapter.isDiscovering()) {    mBtAdapter.cancelDiscovery();  }  mBtAdapter.startDiscovery();}  }
class C{  public static <T>T[] requireNonNullElements(T[] array){  requireNonNull(array,"The provided array is null.");  int len=array.length;  for (int i=0; i < len; i++) {    if (array[i] == null) {      throw new NullPointerException("Item " + i + " in the array "+ Arrays.toString(array)+ " is null");    }  }  return array;}  }
class C{  private boolean startEnvironment(){  Adempiere.startup(false);  log.info("");  MSession session=MSession.get(getCtx(),true);  session.setWebStoreSession(false);  session.setWebSession("Server");  session.saveEx();  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void doWindowActivated(){}  }
class C{  public ClassNotFoundException(){}  }
class C{  public CharSegment(char[] buffer,int offset,int length){  _buffer=buffer;  _offset=offset;  _length=length;}  }
class C{  public static Double parseToDouble(Object obj) throws InvalidParameterException {  Double ret;  if (obj == null) {    ret=null;  } else   if (Double.class.isAssignableFrom(obj.getClass())) {    ret=(Double)obj;  } else   if (Long.class.isAssignableFrom(obj.getClass())) {    Long l=(Long)obj;    ret=l.doubleValue();  } else   if (Integer.class.isAssignableFrom(obj.getClass())) {    Integer i=(Integer)obj;    ret=i.doubleValue();  } else   if (String.class.isAssignableFrom(obj.getClass())) {    try {      ret=Double.parseDouble((String)obj);    } catch (    NumberFormatException nfe) {      throw new InvalidParameterException("String is not numeric",nfe);    }  } else {    throw new InvalidParameterException("Object is not numeric");  }  return ret;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public T head(){  int index=iter.nextIndex();  if (index >= list.size()) {    throw new NoSuchElementException();  } else {    return list.get(index);  }}  }
class C{  private static void checkLeapYear(int year){  if (isLeapYear(year)) {    System.out.printf("%d is a leap year.\n",year);  } else {    System.out.printf("%d is not a leap year.\n",year);  }}  }
class C{  public final int computeSVD(GMatrix U,GMatrix W,GMatrix V){  if (nCol != V.nCol || nCol != V.nRow) {    throw new MatrixSizeException();  }  if (nRow != U.nRow || nRow != U.nCol) {    throw new MatrixSizeException();  }  if (nRow != W.nRow || nCol != W.nCol) {    throw new MatrixSizeException();  }  if (nRow == 2 && nCol == 2) {    if (values[1][0] == 0.0) {      U.identity();      V.identity();      if (values[0][1] == 0.0) {        return 2;      }      double[] sinl=new double[1];      double[] sinr=new double[1];      double[] cosl=new double[1];      double[] cosr=new double[1];      double[] single_values=new double[2];      single_values[0]=values[0][0];      single_values[1]=values[1][1];      compute_2X2(values[0][0],values[0][1],values[1][1],single_values,sinl,cosl,sinr,cosr,0);      update_u(0,U,cosl,sinl);      update_v(0,V,cosr,sinr);      return 2;    }  }  return computeSVD(this,U,W,V);}  }
class C{  public Iterable<Object> save(Iterable entities){  final List<Object> list=new LinkedList<>();  log.info("Going to save a number of entities in the underlying data store");  log.debug(entities);  for (  Object entity : entities) {    list.add(save(entity));  }  return list;}  }
class C{  private void saveState(Component c){  if (c == this) {    client.settings.setBoolean("maximized",isMaximized());  }}  }
class C{  public boolean canDockNorth(){  List constraints=dockPanel.getConstraints(getChildren());  return DockConstraint.canDockNorth(constraints);}  }
class C{  public Protomech(){  super();  setCritical(LOC_HEAD,0,new CriticalSlot(CriticalSlot.TYPE_SYSTEM,SYSTEM_HEADCRIT));  setCritical(LOC_HEAD,1,new CriticalSlot(CriticalSlot.TYPE_SYSTEM,SYSTEM_HEADCRIT));  setCritical(LOC_RARM,0,new CriticalSlot(CriticalSlot.TYPE_SYSTEM,SYSTEM_ARMCRIT));  setCritical(LOC_RARM,1,new CriticalSlot(CriticalSlot.TYPE_SYSTEM,SYSTEM_ARMCRIT));  setCritical(LOC_LARM,0,new CriticalSlot(CriticalSlot.TYPE_SYSTEM,SYSTEM_ARMCRIT));  setCritical(LOC_LARM,1,new CriticalSlot(CriticalSlot.TYPE_SYSTEM,SYSTEM_ARMCRIT));  setCritical(LOC_TORSO,0,new CriticalSlot(CriticalSlot.TYPE_SYSTEM,SYSTEM_TORSOCRIT));  setCritical(LOC_TORSO,1,new CriticalSlot(CriticalSlot.TYPE_SYSTEM,SYSTEM_TORSOCRIT));  setCritical(LOC_TORSO,2,new CriticalSlot(CriticalSlot.TYPE_SYSTEM,SYSTEM_TORSOCRIT));  setCritical(LOC_LEG,0,new CriticalSlot(CriticalSlot.TYPE_SYSTEM,SYSTEM_LEGCRIT));  setCritical(LOC_LEG,1,new CriticalSlot(CriticalSlot.TYPE_SYSTEM,SYSTEM_LEGCRIT));  setCritical(LOC_LEG,2,new CriticalSlot(CriticalSlot.TYPE_SYSTEM,SYSTEM_LEGCRIT));  bHasMainGun=false;  bHas2ndMainGun=false;  bHasRArmGun=false;  bHasLArmGun=false;  bHasTorsoAGun=false;  bHasTorsoBGun=false;  bHasTorsoCGun=false;  bHasTorsoDGun=false;  bHasTorsoEGun=false;  bHasTorsoFGun=false;  m_bHasNoMainGun=true;}  }
class C{  protected void addGlyph(char c){  Glyph glyph=new Glyph(c);  if (glyphCount == glyphs.length) {    glyphs=(Glyph[])PApplet.expand(glyphs);  }  if (glyphCount == 0) {    glyph.index=0;    glyphs[glyphCount]=glyph;    if (glyph.value < 128) {      ascii[glyph.value]=0;    }  } else   if (glyphs[glyphCount - 1].value < glyph.value) {    glyphs[glyphCount]=glyph;    if (glyph.value < 128) {      ascii[glyph.value]=glyphCount;    }  } else {    for (int i=0; i < glyphCount; i++) {      if (glyphs[i].value > c) {        for (int j=glyphCount; j > i; --j) {          glyphs[j]=glyphs[j - 1];          if (glyphs[j].value < 128) {            ascii[glyphs[j].value]=j;          }        }        glyph.index=i;        glyphs[i]=glyph;        if (c < 128)         ascii[c]=i;        break;      }    }  }  glyphCount++;}  }
class C{  public void stop(){  mTarget=mValue;  mVelocity=0.0f;}  }
class C{  private void readCode(final MethodVisitor mv,final Context context,int u){  byte[] b=this.b;  char[] c=context.buffer;  int maxStack=readUnsignedShort(u);  int maxLocals=readUnsignedShort(u + 2);  int codeLength=readInt(u + 4);  u+=8;  int codeStart=u;  int codeEnd=u + codeLength;  Label[] labels=context.labels=new Label[codeLength + 2];  readLabel(codeLength + 1,labels);  while (u < codeEnd) {    int offset=u - codeStart;    int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:case ClassWriter.IMPLVAR_INSN:      u+=1;    break;case ClassWriter.LABEL_INSN:  readLabel(offset + readShort(u + 1),labels);u+=3;break;case ClassWriter.LABELW_INSN:readLabel(offset + readInt(u + 1),labels);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {u+=6;} else {u+=4;}break;case ClassWriter.TABL_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=4;}u+=12;break;case ClassWriter.LOOK_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 4); i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=8;}u+=8;break;case ClassWriter.VAR_INSN:case ClassWriter.SBYTE_INSN:case ClassWriter.LDC_INSN:u+=2;break;case ClassWriter.SHORT_INSN:case ClassWriter.LDCW_INSN:case ClassWriter.FIELDORMETH_INSN:case ClassWriter.TYPE_INSN:case ClassWriter.IINC_INSN:u+=3;break;case ClassWriter.ITFMETH_INSN:case ClassWriter.INDYMETH_INSN:u+=5;break;default :u+=4;break;}}for (int i=readUnsignedShort(u); i > 0; --i) {Label start=readLabel(readUnsignedShort(u + 2),labels);Label end=readLabel(readUnsignedShort(u + 4),labels);Label handler=readLabel(readUnsignedShort(u + 6),labels);String type=readUTF8(items[readUnsignedShort(u + 8)],c);mv.visitTryCatchBlock(start,end,handler,type);u+=8;}u+=2;int[] tanns=null;int[] itanns=null;int tann=0;int itann=0;int ntoff=-1;int nitoff=-1;int varTable=0;int varTypeTable=0;boolean zip=true;boolean unzip=(context.flags & EXPAND_FRAMES) != 0;int stackMap=0;int stackMapSize=0;int frameCount=0;Context frame=null;Attribute attributes=null;for (int i=readUnsignedShort(u); i > 0; --i) {String attrName=readUTF8(u + 2,c);if ("LocalVariableTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {varTable=u + 8;for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}label+=readUnsignedShort(v + 12);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}v+=10;}}} else if ("LocalVariableTypeTable".equals(attrName)) {varTypeTable=u + 8;} else if ("LineNumberTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}Label l=labels[label];while (l.line > 0) {if (l.next == null) {l.next=new Label();}l=l.next;}l.line=readUnsignedShort(v + 12);v+=4;}}} else if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {tanns=readTypeAnnotations(mv,context,u + 8,true);ntoff=tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1 : readUnsignedShort(tanns[0] + 1);} else if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {itanns=readTypeAnnotations(mv,context,u + 8,false);nitoff=itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1 : readUnsignedShort(itanns[0] + 1);} else if (FRAMES && "StackMapTable".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else if (FRAMES && "StackMap".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {zip=false;stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else {for (int j=0; j < context.attrs.length; ++j) {if (context.attrs[j].type.equals(attrName)) {Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);if (attr != null) {attr.next=attributes;attributes=attr;}}}}u+=6 + readInt(u + 4);}u+=2;if (FRAMES && stackMap != 0) {frame=context;frame.offset=-1;frame.mode=0;frame.localCount=0;frame.localDiff=0;frame.stackCount=0;frame.local=new Object[maxLocals];frame.stack=new Object[maxStack];if (unzip) {getImplicitFrame(context);}for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {if (b[i] == 8) {int v=readUnsignedShort(i + 1);if (v >= 0 && v < codeLength) {if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {readLabel(v,labels);}}}}}u=codeStart;while (u < codeEnd) {int offset=u - codeStart;Label l=labels[offset];if (l != null) {Label next=l.next;l.next=null;mv.visitLabel(l);if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {mv.visitLineNumber(l.line,l);while (next != null) {mv.visitLineNumber(next.line,l);next=next.next;}}}while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {if (frame.offset != -1) {if (!zip || unzip) {mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);} else {mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);}}if (frameCount > 0) {stackMap=readFrame(stackMap,zip,unzip,frame);--frameCount;} else {frame=null;}}int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:mv.visitInsn(opcode);u+=1;break;case ClassWriter.IMPLVAR_INSN:if (opcode > Opcodes.ISTORE) {opcode-=59;mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);} else {opcode-=26;mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);}u+=1;break;case ClassWriter.LABEL_INSN:mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);u+=3;break;case ClassWriter.LABELW_INSN:mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));u+=6;} else {mv.visitVarInsn(opcode,readUnsignedShort(u + 2));u+=4;}break;case ClassWriter.TABL_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int min=readInt(u + 4);int max=readInt(u + 8);Label[] table=new Label[max - min + 1];u+=12;for (int i=0; i < table.length; ++i) {table[i]=labels[offset + readInt(u)];u+=4;}mv.visitTableSwitchInsn(min,max,labels[label],table);break;}case ClassWriter.LOOK_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int len=readInt(u + 4);int[] keys=new int[len];Label[] values=new Label[len];u+=8;for (int i=0; i < len; ++i) {keys[i]=readInt(u);values[i]=labels[offset + readInt(u + 4)];u+=8;}mv.visitLookupSwitchInsn(labels[label],keys,values);break;}case ClassWriter.VAR_INSN:mv.visitVarInsn(opcode,b[u + 1] & 0xFF);u+=2;break;case ClassWriter.SBYTE_INSN:mv.visitIntInsn(opcode,b[u + 1]);u+=2;break;case ClassWriter.SHORT_INSN:mv.visitIntInsn(opcode,readShort(u + 1));u+=3;break;case ClassWriter.LDC_INSN:mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));u+=2;break;case ClassWriter.LDCW_INSN:mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));u+=3;break;case ClassWriter.FIELDORMETH_INSN:case ClassWriter.ITFMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];boolean itf=b[cpIndex - 1] == ClassWriter.IMETH;String iowner=readClass(cpIndex,c);cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);if (opcode < Opcodes.INVOKEVIRTUAL) {mv.visitFieldInsn(opcode,iowner,iname,idesc);} else {mv.visitMethodInsn(opcode,iowner,iname,idesc,itf);}if (opcode == Opcodes.INVOKEINTERFACE) {u+=5;} else {u+=3;}break;}case ClassWriter.INDYMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);int bsmArgCount=readUnsignedShort(bsmIndex + 2);Object[] bsmArgs=new Object[bsmArgCount];bsmIndex+=4;for (int i=0; i < bsmArgCount; i++) {bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);bsmIndex+=2;}cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);u+=5;break;}case ClassWriter.TYPE_INSN:mv.visitTypeInsn(opcode,readClass(u + 1,c));u+=3;break;case ClassWriter.IINC_INSN:mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);u+=3;break;default :mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);u+=4;break;}while (tanns != null && tann < tanns.length && ntoff <= offset) {if (ntoff == offset) {int v=readAnnotationTarget(context,tanns[tann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));}ntoff=++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1 : readUnsignedShort(tanns[tann] + 1);}while (itanns != null && itann < itanns.length && nitoff <= offset) {if (nitoff == offset) {int v=readAnnotationTarget(context,itanns[itann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));}nitoff=++itann >= itanns.length || readByte(itanns[itann]) < 0x43 ? -1 : readUnsignedShort(itanns[itann] + 1);}}if (labels[codeLength] != null) {mv.visitLabel(labels[codeLength]);}if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {int[] typeTable=null;if (varTypeTable != 0) {u=varTypeTable + 2;typeTable=new int[readUnsignedShort(varTypeTable) * 3];for (int i=typeTable.length; i > 0; ) {typeTable[--i]=u + 6;typeTable[--i]=readUnsignedShort(u + 8);typeTable[--i]=readUnsignedShort(u);u+=10;}}u=varTable + 2;for (int i=readUnsignedShort(varTable); i > 0; --i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);int index=readUnsignedShort(u + 8);String vsignature=null;if (typeTable != null) {for (int j=0; j < typeTable.length; j+=3) {if (typeTable[j] == start && typeTable[j + 1] == index) {vsignature=readUTF8(typeTable[j + 2],c);break;}}}mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);u+=10;}}if (tanns != null) {for (int i=0; i < tanns.length; ++i) {if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,tanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),true));}}}if (itanns != null) {for (int i=0; i < itanns.length; ++i) {if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,itanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),false));}}}while (attributes != null) {Attribute attr=attributes.next;attributes.next=null;mv.visitAttribute(attributes);attributes=attr;}mv.visitMaxs(maxStack,maxLocals);}  }
class C{  protected double cluster(DataSet data,boolean doInit,int[] medioids,int[] assignments,List<Double> cacheAccel){  double totalDistance=0;  int changes=-1;  Arrays.fill(assignments,-1);  int[] bestMedCand=new int[medioids.length];  double[] bestMedCandDist=new double[medioids.length];  List<Vec> X=data.getDataVectors();  if (doInit) {    TrainableDistanceMetric.trainIfNeeded(dm,data);    cacheAccel=dm.getAccelerationCache(X);    selectIntialPoints(data,medoids,dm,cacheAccel,rand,seedSelection);  }  int iter=0;  do {    changes=0;    totalDistance=0.0;    for (int i=0; i < data.getSampleSize(); i++) {      Vec dpVec=data.getDataPoint(i).getNumericalValues();      int assignment=0;      double minDist=dm.dist(medioids[0],i,X,cacheAccel);      for (int k=1; k < medioids.length; k++) {        double dist=dm.dist(medioids[k],i,X,cacheAccel);        if (dist < minDist) {          minDist=dist;          assignment=k;        }      }      if (assignments[i] != assignment) {        changes++;        assignments[i]=assignment;      }      totalDistance+=minDist * minDist;    }    Arrays.fill(bestMedCandDist,Double.MAX_VALUE);    for (int i=0; i < data.getSampleSize(); i++) {      double thisCandidateDistance=0.0;      int clusterID=assignments[i];      final int medCandadate=i;      for (int j=0; j < data.getSampleSize(); j++) {        if (j == i || assignments[j] != clusterID)         continue;        thisCandidateDistance+=Math.pow(dm.dist(medCandadate,j,X,cacheAccel),2);      }      if (thisCandidateDistance < bestMedCandDist[clusterID]) {        bestMedCand[clusterID]=i;        bestMedCandDist[clusterID]=thisCandidateDistance;      }    }    System.arraycopy(bestMedCand,0,medioids,0,medioids.length);  } while (changes > 0 && iter++ < iterLimit);  return totalDistance;}  }
class C{  protected void addModuleScript(String jarFile,InstalledLocalContainer container,List<ScriptCommand> configurationScript){  String moduleName=WildFlyModuleUtils.getModuleName(container,jarFile);  boolean isModuleDeployed=WildFlyModuleUtils.isModuleDeployed(container,jarFile);  if (isModuleDeployed) {    getLogger().warn("Module " + moduleName + " already exists, skipping it.",this.getClass().getName());  } else {    List<String> dependencies=Arrays.asList("javax.api","javax.transaction.api");    configurationScript.add(getConfigurationFactory().addModuleScript(moduleName,Arrays.asList(jarFile),dependencies));  }}  }
class C{  public SWTStrokeCanvas(final Composite parent,final int style,final Image image){  this(parent,style);}  }
class C{  public void run(){  try {    while (mDatagramConnection != null) {      byte[] data=mDatagramConnection.receive();      Packet packet=new Packet();      packet.mData=data;      packet.mLength=data.length;      packet.mOffset=0;      packet.mReceivedAt=System.currentTimeMillis();      mStats.numRtcpPkts++;      mStats.numRtcpBytes+=packet.mLength;      parseRtcpPacket(packet);    }  } catch (  SocketTimeoutException e) {    if (sLogger.isActivated()) {      sLogger.debug(e.getMessage());    }    mStats.numBadRtcpPkts++;    notifyRtcpListenersOfTimeout();  }catch (  IOException e) {    if (!mIsInterrupted) {      if (sLogger.isActivated()) {        sLogger.debug(e.getMessage());      }    }    mStats.numBadRtcpPkts++;  }catch (  NetworkException e) {    if (!mIsInterrupted) {      if (sLogger.isActivated()) {        sLogger.debug(e.getMessage());      }    }    mStats.numBadRtcpPkts++;  }catch (  RuntimeException e) {    sLogger.error("Failed to establish datagramConnection!",e);    mStats.numBadRtcpPkts++;  }}  }
class C{  @Override public boolean conditionOk(Example example){  if (Double.isNaN(example.getValue(example.getAttributes().getLabel()))) {    return true;  } else {    return false;  }}  }
class C{  public MoreLikeThisQueryBuilder maxQueryTerms(int maxQueryTerms){  this.maxQueryTerms=maxQueryTerms;  return this;}  }
class C{  public SymbolAtom(String name,int type,boolean del){  this.name=name;  this.type=type;  if (type == TeXConstants.TYPE_BIG_OPERATOR)   this.type_limits=TeXConstants.SCRIPT_NORMAL;  delimiter=del;}  }
class C{  public Digraph(String fname) throws FileNotFoundException, IOException {  super(fname);}  }
class C{  @Override public net.floodlightcontroller.core.IListener.Command reconcileFlows(ArrayList<OFMatchReconcile> ofmRcList){  if (lds != null) {    links=new HashMap<Link,LinkInfo>();    if (lds.getLinks() != null)     links.putAll(lds.getLinks());    for (    OFMatchReconcile ofmr : ofmRcList) {      if (ofmr.rcAction.equals(OFMatchReconcile.ReconcileAction.UPDATE_PATH)) {        IOFSwitch sw=switchService.getSwitch(ofmr.ofmWithSwDpid.getDpid());        Map<OFPort,List<Match>> invalidBaseIngressAndMatches=new HashMap<OFPort,List<Match>>();        List<OFFlowStatsReply> flows=getFlows(sw,ofmr.outPort);        for (        OFFlowStatsReply flow : flows) {          for (          OFFlowStatsEntry entry : flow.getEntries()) {            Match match=entry.getMatch();            if (invalidBaseIngressAndMatches.containsKey(match.get(MatchField.IN_PORT)))             invalidBaseIngressAndMatches.get(match.get(MatchField.IN_PORT)).add(match); else {              List<Match> matches=new ArrayList<Match>();              matches.add(match);              invalidBaseIngressAndMatches.put(match.get(MatchField.IN_PORT),matches);            }          }        }        if (!flows.isEmpty()) {          log.debug("Removing flows on switch : " + sw.getId() + " with outport: "+ ofmr.outPort);          clearFlowMods(sw,ofmr.outPort);        }        Map<IOFSwitch,Map<OFPort,List<Match>>> neighborSwitches=new HashMap<IOFSwitch,Map<OFPort,List<Match>>>();        for (        Link link : links.keySet()) {          if (link.getDst() == sw.getId()) {            for (            Entry<OFPort,List<Match>> invalidBaseIngressAndMatch : invalidBaseIngressAndMatches.entrySet()) {              if (link.getDstPort() == invalidBaseIngressAndMatch.getKey()) {                Map<OFPort,List<Match>> invalidNeighborOutportAndMatch=new HashMap<OFPort,List<Match>>();                invalidNeighborOutportAndMatch.put(link.getSrcPort(),invalidBaseIngressAndMatch.getValue());                neighborSwitches.put(switchService.getSwitch(link.getSrc()),invalidNeighborOutportAndMatch);              }            }          }        }        log.debug("We have " + neighborSwitches.size() + " neighboring switches to deal with!");        for (        IOFSwitch neighborSwitch : neighborSwitches.keySet()) {          log.debug("NeighborSwitch ID : " + neighborSwitch.getId());          if (neighborSwitches.get(neighborSwitch) != null)           deleteInvalidFlows(neighborSwitch,neighborSwitches.get(neighborSwitch));        }      }      return Command.CONTINUE;    }  } else {    log.error("Link Discovery Service Is Null");  }  return Command.CONTINUE;}  }
class C{  @EventHandler public void onModuleLoadComplete(ModuleLoadCompleteEvent event){  Cardinal.getInstance().getMatchThreads().forEach(null);}  }
class C{  public boolean isSurfaceNormalVisible(){  return (surfaceNormalArrow.getSceneHints().getCullHint() != CullHint.Always);}  }
class C{  public boolean isUseProxyChainAuth(){  return useProxyChainAuth;}  }
class C{  public static boolean parseUnknownField(final CodedInputByteBufferNano input,final int tag) throws IOException {  return input.skipField(tag);}  }
class C{  private static Object constructAPIWrapper(String owner,String apiname,int version) throws APIUndefined, APIVersionUndefined, APIVersionRemoved {  if (apiCtors == null)   throw new RuntimeException("Something is broken. The LookingGlass API Provider hasn't constructed properly.");  Map<Integer,WrapperBuilder> ctors=apiCtors.get(apiname);  if (ctors == null)   throw new APIUndefined(apiname);  if (!ctors.containsKey(version))   throw new APIVersionUndefined(apiname + "-" + version);  WrapperBuilder ctor=ctors.get(version);  if (ctor == null)   throw new APIVersionRemoved(apiname + "-" + version);  try {    return ctor.newInstance(owner);  } catch (  Exception e) {    LoggerUtils.error("Caught an exception while building an API wrapper. Go kick XCompWiz.");    throw new RuntimeException("Caught an exception while building an API wrapper. Go kick XCompWiz.",e);  }}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  public MyString2 substring(int begin){  String b="";  for (int i=begin, j=0; i < s.length(); i++, j++) {    b+=s.charAt(i) + "";  }  return new MyString2(b);}  }
class C{  public void addToCluster(Cluster cluster){  clusters.add(cluster);}  }
class C{  private void processWorkerExit(Worker w,boolean completedAbruptly){  if (completedAbruptly)   decrementWorkerCount();  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    completedTaskCount+=w.completedTasks;    workers.remove(w);  }  finally {    mainLock.unlock();  }  tryTerminate();  int c=ctl.get();  if (runStateLessThan(c,STOP)) {    if (!completedAbruptly) {      int min=allowCoreThreadTimeOut ? 0 : corePoolSize;      if (min == 0 && !workQueue.isEmpty())       min=1;      if (workerCountOf(c) >= min)       return;    }    addWorker(null,false);  }}  }
class C{  public Comparator<? super K> keyComparator(){  return keyComparator;}  }
class C{  @Override public String toString(){  return _name;}  }
class C{  @Override protected boolean isSuccessful(final Player player){  final int random=Rand.roll1D100();  return random <= (FINDING_PROBABILITY + player.useKarma(FINDING_PROBABILITY)) * 100;}  }
class C{  @Override public boolean add(TimeSeriesConverter<T> converter,Collection<T> documents,SolrClient connection){  return SolrAddingService.add(converter,documents,connection);}  }
class C{  public Period(final int length,final TimeUnit units){  this.length=length;  this.units=units;}  }
class C{  public static double distance(LatLng point1,LatLng point2,LengthUnit unit){  return LatLngTool.distanceInRadians(point1,point2) * LatLngConfig.getEarthRadius(unit);}  }
class C{  public static void track(JTextComponent text){  new TextListener(text);}  }
class C{  public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  public InlineMenuRowBuilder<T> newRow(){  build();  return parent.newRow();}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(Class<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  @Override public void activate(){  request=getRequest();  reason=request.getParameter(AuthenticationHandler.FAILURE_REASON);}  }
class C{  public static DirectorAttribute valueOfAttribute(String name){  DirectorAttribute[] directorAtts=values();  for (int i=0; i < directorAtts.length; i++) {    if (directorAtts[i].getAttributeName().equals(name)) {      return directorAtts[i];    }  }  return null;}  }
class C{  private static boolean isTainted(Collection<?> c){  try {    checkTypeSafe(c);  } catch (  IllegalArgumentException e) {    return true;  }  return false;}  }
class C{  public static void main(String[] args){  new Main().doMain(args);}  }
class C{  public Action0 onSchedule(Action0 action){  return action;}  }
class C{  @Override public int compareTo(IntegerOrPercentage o){  if (mIsPercentage == o.mIsPercentage) {    return mValue - o.mValue;  } else {    return mIsPercentage ? -1 : 1;  }}  }
class C{  public static String toHexString(long l){  return toHexString(toByteArray(l));}  }
class C{  public ShiftExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public Phaser(int parties){  this(null,parties);}  }
class C{  public Fugue512(){  super();}  }
class C{  @Override public boolean load(Element shared,Element perNode){  InstanceManager.getDefault(jmri.AudioManager.class);  loadAudio(shared);  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image=null;  float progress=0;  int i;  double constantValue=0;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  double noData=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];      if (inputHeader == null) {        showFeedback("One or more of the input parameters have not been set properly.");        return;      }      image=new WhiteboxRaster(inputHeader,"r");      noData=image.getNoDataValue();    } else     if (i == 1) {      outputHeader=args[i];      if (outputHeader == null) {        showFeedback("One or more of the input parameters have not been set properly.");        return;      }    } else     if (i == 2) {      try {        if (args[i].toLowerCase().contains("nodata") || args[i].toLowerCase().contains("no data")) {          constantValue=noData;        } else {          constantValue=Double.parseDouble(args[i]);        }      } catch (      Exception e) {        constantValue=noData;      }    } else     if (i == 3) {      if (args[i].toLowerCase().contains("double")) {        dataType=WhiteboxRaster.DataType.DOUBLE;      } else       if (args[i].toLowerCase().contains("float")) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else       if (args[i].toLowerCase().contains("int")) {        dataType=WhiteboxRaster.DataType.INTEGER;      } else       if (args[i].toLowerCase().contains("byte")) {        dataType=WhiteboxRaster.DataType.BYTE;        if (constantValue > 127 || constantValue < -128) {          noData=-128;        }      }    }  }  try {    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,dataType,constantValue);    output.setNoDataValue(noData);    output.createNewDataFile();    output.setPreferredPalette(image.getPreferredPalette());    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void main(String[] arg){  SimpleCommandLineParser parser=new SimpleCommandLineParser(arg);  String username=parser.getValue("username");  String password=parser.getValue("password");  String domain=parser.getValue("domain");  String destinationUser=parser.getValue("destination_user");  String delegationEmailId=parser.getValue("delegationEmailId");  String setting=parser.getValue("setting");  boolean doGet=parser.containsKey("get");  boolean doDelete=parser.containsKey("delete");  boolean doAddOrUpdate=false;  boolean help=parser.containsKey("help");  boolean enable=!parser.containsKey("disable");  if (doGet && doDelete) {    System.out.println("Choose method as one of --get or --delete, or leave blank for create/update.\n");    printUsageAndExit();  } else   if (!doGet && !doDelete) {    doAddOrUpdate=true;  }  if (help || (username == null) || (password == null)|| (domain == null)|| (setting == null)|| (doGet && destinationUser == null)|| (setting.startsWith("delegation") && (doAddOrUpdate || doDelete) && (destinationUser == null || delegationEmailId == null))) {    printUsageAndExit();  }  setting=setting.trim().toLowerCase();  try {    GmailSettingsService settings=new GmailSettingsService("exampleCo-exampleApp-1",domain,username,password);    List<String> users=new ArrayList<String>();    users.add(destinationUser);    if (setting.startsWith("filter")) {      if (doGet) {        System.out.println("Retrieving filter settings is not supported.\n");        printUsageAndExit();      } else       if (doDelete) {        System.out.println("Deleting a filter is not supported.\n");      } else {        settings.createFilter(users,Defaults.FILTER_FROM,Defaults.FILTER_TO,Defaults.FILTER_SUBJECT,Defaults.FILTER_HAS_THE_WORD,Defaults.FILTER_DOES_NOT_HAVE_THE_WORD,Defaults.FILTER_HAS_ATTACHMENT,Defaults.FILTER_SHOULD_MARK_AS_READ,Defaults.FILTER_SHOULD_ARCHIVE,Defaults.FILTER_LABEL,Defaults.FILTER_FORWARD_TO,Defaults.FILTER_NEVER_SPAM,Defaults.FILTER_SHOULD_STAR,Defaults.FILTER_SHOULD_TRASH);      }    } else     if (setting.startsWith("sendas")) {      if (doGet) {        List<Map<String,String>> sendAsSettings=settings.retrieveSendAs(destinationUser);        if (sendAsSettings == null || sendAsSettings.size() == 0) {          System.out.println("No send-as alias found.");          return;        }        int count=0;        for (        Map<String,String> sendAsSetting : sendAsSettings) {          System.out.println("sendAs setting " + ++count + ":");          Set<Entry<String,String>> entries=sendAsSetting.entrySet();          for (          Entry<String,String> entry : entries)           System.out.println("\t" + entry.getKey() + ": "+ entry.getValue());        }      } else       if (doDelete) {        System.out.println("Removing a send-as alias is not supported.\n");      } else {        settings.createSendAs(users,Defaults.SEND_AS_NAME,Defaults.SEND_AS_ADDRESS,Defaults.SEND_AS_REPLY_TO,Defaults.SEND_AS_MAKE_DEFAULT);      }    } else     if (setting.startsWith("label")) {      if (doGet) {        List<Map<String,String>> labels=settings.retrieveLabels(destinationUser);        if (labels == null || labels.size() == 0) {          System.out.println("No email labels found.");          return;        }        int count=0;        for (        Map<String,String> label : labels) {          System.out.println("label " + ++count + ":");          Set<Entry<String,String>> entries=label.entrySet();          for (          Entry<String,String> entry : entries)           System.out.println("\t" + entry.getKey() + ": "+ entry.getValue());        }      } else       if (doDelete) {        System.out.println("Removing labels is not supported.\n");      } else {        settings.createLabel(users,Defaults.LABEL);      }    } else     if (setting.startsWith("forwarding")) {      if (doGet) {        Map<String,String> forwarding=settings.retrieveForwarding(destinationUser);        System.out.println("forwarding settings:");        for (        Entry<String,String> entry : forwarding.entrySet())         System.out.println("\t" + entry.getKey() + ": "+ entry.getValue());      } else       if (doDelete) {        System.out.println("Deleting forwarding settings is not possible. Consider " + "disabling forwarding by updating it.\n");      } else {        settings.changeForwarding(users,Defaults.FORWARDING_ENABLE,Defaults.FORWARDING_FORWARD_TO,Defaults.FORWARDING_ACTION);      }    } else     if (setting.startsWith("pop")) {      if (doGet) {        Map<String,String> pop=settings.retrievePop(destinationUser);        System.out.println("pop settings:");        for (        Entry<String,String> entry : pop.entrySet())         System.out.println("\t" + entry.getKey() + ": "+ entry.getValue());      } else       if (doDelete) {        System.out.println("Deleting POP settings is not possible. Consider " + "disabling POP by updating it.\n");      } else {        settings.changePop(users,Defaults.POP_ENABLE,Defaults.POP_ENABLE_FOR,Defaults.POP_ACTION);      }    } else     if (setting.startsWith("imap")) {      if (doGet) {        boolean imap=settings.retrieveImap(destinationUser);        System.out.println("imap settings:");        System.out.println("\tenabled: " + imap);      } else       if (doDelete) {        System.out.println("Deleting IMAP settings is not possible. Consider " + "disabling IMAP by updating it.\n");      } else {        settings.changeImap(users,Defaults.IMAP_ENABLE);      }    } else     if (setting.startsWith("vacation")) {      if (doGet) {        Map<String,String> vacation=settings.retrieveVacation(destinationUser);        System.out.println("vacation settings:");        for (        Entry<String,String> entry : vacation.entrySet())         System.out.println("\t" + entry.getKey() + ": "+ entry.getValue());      } else       if (doDelete) {        System.out.println("Deleting vacation settings is not possible. Consider " + "disabling the vacation auto-responder by updating it.\n");      } else {        settings.changeVacation(users,Defaults.VACATION_ENABLE,Defaults.VACATION_SUBJECT,Defaults.VACATION_MESSAGE,Defaults.VACATION_CONTACTS_ONLY);      }    } else     if (setting.startsWith("signature")) {      if (doGet) {        String signature=settings.retrieveSignature(destinationUser);        if (signature == null || signature.length() == 0) {          System.out.println("No signature has been set.");          return;        }        System.out.println("signature:");        System.out.println("\tvalue: " + signature);      } else       if (doDelete) {        System.out.println("Removing signature settings is not possible. " + "Consider changing the signature by updating it.\n");      } else {        settings.changeSignature(users,Defaults.SIGNATURE);      }    } else     if (setting.startsWith("general")) {      if (doGet) {        System.out.println("Retrieving general settings is not supported.\n");        printUsageAndExit();      } else       if (doDelete) {        System.out.println("Deleting general settings is not possible.\n");      } else {        settings.changeGeneral(users,Defaults.GENERAL_PAGE_SIZE,Defaults.GENERAL_ENABLE_SHORTCUTS,Defaults.GENERAL_ENABLE_ARROWS,Defaults.GENERAL_ENABLE_SNIPPETS,Defaults.GENERAL_ENABLE_UNICODE);      }    } else     if (setting.startsWith("language")) {      if (doGet) {        System.out.println("Retrieving language settings is not supported.\n");        printUsageAndExit();      } else       if (doDelete) {        System.out.println("Deleting language settings is not possible. Consider " + "changing the language by updating it.\n");      } else {        settings.changeLanguage(users,Defaults.LANGUAGE);      }    } else     if (setting.startsWith("webclip")) {      if (doGet) {        System.out.println("Retrieving webclip settings is not supported.\n");        printUsageAndExit();      } else       if (doDelete) {        System.out.println("Deleting webclip settings is not possible. " + "Consider disabling webclip by updating it.\n");      } else {        settings.changeWebClip(users,Defaults.WEBCLIP_ENABLE);      }    } else     if (setting.startsWith("delegation")) {      if (doGet) {        List<Map<String,String>> delegates=settings.retrieveEmailDelegates(destinationUser);        if (delegates == null || delegates.size() == 0) {          System.out.println("No email delegates found.");          return;        }        int count=0;        for (        Map<String,String> delegate : delegates) {          System.out.println("delegate " + ++count + ":");          Set<Entry<String,String>> entries=delegate.entrySet();          for (          Entry<String,String> entry : entries) {            System.out.println("\t" + entry.getKey() + ": "+ entry.getValue());          }        }      } else       if (doDelete) {        settings.deleteEmailDelegate(destinationUser,delegationEmailId);      } else {        settings.addEmailDelegate(destinationUser,delegationEmailId);      }    } else {      printUsageAndExit();    }  } catch (  AuthenticationException e) {    System.err.println(e);  }catch (  IllegalArgumentException e) {    System.err.println(e);  }catch (  ServiceException e) {    System.err.println(e);  }catch (  MalformedURLException e) {    System.err.println(e);  }catch (  IOException e) {    System.err.println(e);  }}  }
class C{  public void drawString(String s,float x,float y){  System.out.println("drawString(String)");}  }
class C{  public BughouseSuggestController(Game game,Connector connector,boolean isPartnerWhite){  super(game,connector);  this.isPartnerWhite=isPartnerWhite;}  }
class C{  public void clearCache(){  cachedRed=null;  cachedUsr2dev=null;  cachedGn2dev=null;  cachedBounds=null;}  }
class C{  public DateMidnight minus(ReadableDuration duration){  return withDurationAdded(duration,-1);}  }
class C{  public CUDA_MEMCPY3D(){}  }
class C{  public static DatabaseFieldConfig fromReader(BufferedReader reader) throws SQLException {  DatabaseFieldConfig config=new DatabaseFieldConfig();  boolean anything=false;  while (true) {    String line;    try {      line=reader.readLine();    } catch (    IOException e) {      throw SqlExceptionUtil.create("Could not read DatabaseFieldConfig from stream",e);    }    if (line == null) {      break;    }    if (line.equals(CONFIG_FILE_END_MARKER)) {      break;    }    if (line.length() == 0 || line.startsWith("#") || line.equals(CONFIG_FILE_START_MARKER)) {      continue;    }    String[] parts=line.split("=",-2);    if (parts.length != 2) {      throw new SQLException("DatabaseFieldConfig reading from stream cannot parse line: " + line);    }    readField(config,parts[0],parts[1]);    anything=true;  }  if (anything) {    return config;  } else {    return null;  }}  }
class C{  public ObdProt(){  paddingChr='0';  PidPvs.put(0,new EcuDataPv());  VidPvs.put(0,new EcuDataPv());  tCodes.put(0,new ObdCodeItem(0,"No trouble codes set"));}  }
class C{  private void nukeSymbols(){  _count=0;  Arrays.fill(_mainHash,0);  Arrays.fill(_mainNames,null);  Arrays.fill(_collList,null);  _collCount=0;  _collEnd=0;}  }
class C{  @Override public int hashCode(){  final long bits=Double.doubleToLongBits(value);  return (int)(bits ^ bits >>> 32);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.919 -0500",hash_original_method="85B2ECB0DBC9283B8022F29E2B26DB48",hash_generated_method="A8122BC610EA1EF78595F1EE0935AEEF") public SslError(int error,SslCertificate certificate,String url){  assert certificate != null;  assert url != null;  addError(error);  mCertificate=certificate;  mUrl=url;}  }
class C{  public int findFirstCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),true,false);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  protected int inscribedCircleRadius(int width,int height){  return (Math.min(height,width) / 2) + 1;}  }
class C{  public static UserIdentityToken createIssuedIdentityToken(EndpointDescription ep,byte[] senderNonce,byte[] issuedIdentityToken) throws ServiceResultException {  UserTokenPolicy policy=ep.findUserTokenPolicy(UserTokenType.IssuedToken);  if (policy == null)   throw new ServiceResultException(StatusCodes.Bad_IdentityTokenRejected,"IssuedToken not supported");  String securityPolicyUri=policy.getSecurityPolicyUri();  if (securityPolicyUri == null)   securityPolicyUri=ep.getSecurityPolicyUri();  SecurityPolicy securityPolicy=SecurityPolicy.getSecurityPolicy(securityPolicyUri);  if (securityPolicy == null)   securityPolicy=SecurityPolicy.NONE;  IssuedIdentityToken token=new IssuedIdentityToken();  token.setTokenData(issuedIdentityToken);  SecurityAlgorithm algorithmUri=securityPolicy.getAsymmetricEncryptionAlgorithm();  if (algorithmUri == null)   algorithmUri=SecurityAlgorithm.RsaOaep;  try {    Cipher cipher=Cipher.getInstance(algorithmUri.getStandardName());    Cert serverCert=new Cert(ep.getServerCertificate());    cipher.init(Cipher.ENCRYPT_MODE,serverCert.getCertificate());    byte[] tokenData=issuedIdentityToken;    if (senderNonce != null)     tokenData=ByteBufferUtils.concatenate(toArray(issuedIdentityToken.length + senderNonce.length),issuedIdentityToken,senderNonce);    token.setTokenData(cipher.doFinal(tokenData));    token.setEncryptionAlgorithm(algorithmUri.getUri());  } catch (  InvalidKeyException e) {    throw new ServiceResultException(StatusCodes.Bad_CertificateInvalid,"Server certificate in endpoint is invalid: " + e.getMessage());  }catch (  IllegalBlockSizeException e) {    throw new ServiceResultException(StatusCodes.Bad_SecurityPolicyRejected,e.getClass().getName() + ":" + e.getMessage());  }catch (  BadPaddingException e) {    throw new ServiceResultException(StatusCodes.Bad_CertificateInvalid,"Server certificate in endpoint is invalid: " + e.getMessage());  }catch (  NoSuchAlgorithmException e) {    throw new ServiceResultException(StatusCodes.Bad_InternalError,e);  }catch (  NoSuchPaddingException e) {    throw new ServiceResultException(StatusCodes.Bad_InternalError,e);  }  return token;}  }
class C{  public ImageCache(int maxPixelCount,int maxSingleImagePixelSize){  this.maxPixelCount=maxPixelCount;  this.maxSingleImagePixelSize=maxSingleImagePixelSize;}  }
class C{  static boolean shouldReconfigure(PropertyChangeEvent e){  if (e.getPropertyName() == null) {synchronized (AbstractAction.class) {      if (RECONFIGURE_ON_NULL == null) {        RECONFIGURE_ON_NULL=Boolean.valueOf(AccessController.doPrivileged(new GetPropertyAction("swing.actions.reconfigureOnNull","false")));      }      return RECONFIGURE_ON_NULL;    }  }  return false;}  }
class C{  private static UserAgentStaticProperties createInstance(){  if (GWT.isClient()) {    return GWT.create(UserAgentStaticProperties.class);  } else {    return new FirefoxImpl();  }}  }
class C{  public HoltWintersForecast(TSDBService tsdbService){  _tsdbService=tsdbService;}  }
class C{  public int find(String string){  if (string == null) {    return -1;  }  for (int i=0; i != m_stringOffsets.length; ++i) {    int offset=m_stringOffsets[i];    int length=getShort(m_strings,offset);    if (length != string.length()) {      continue;    }    int j=0;    for (; j != length; ++j) {      offset+=2;      if (string.charAt(j) != getShort(m_strings,offset)) {        break;      }    }    if (j == length) {      return i;    }  }  return -1;}  }
class C{  public Document parseDOM(final InputStream input) throws IOException, ParserConfigurationException {  CompressedXmlDomListener dom=new CompressedXmlDomListener();  parse(input,dom);  return dom.getDocument();}  }
class C{  protected int engineGetBlockSize(){  return AESConstants.AES_BLOCK_SIZE;}  }
class C{  public static Pattern likeToRegex(Pat pattern){  StringBuilder buf=new StringBuilder("^");  char[] charArray=pattern.s.toCharArray();  int slash=-2;  for (int i=0; i < charArray.length; i++) {    char c=charArray[i];    if (slash == i - 1) {      buf.append('[').append(c).append(']');    } else {switch (c) {case '\\':        slash=i;      break;case '%':    buf.append(".*");  break;case '[':buf.append("\\[");break;case ']':buf.append("\\]");break;default :buf.append('[').append(c).append(']');}}}buf.append("$");return Pattern.compile(buf.toString());}  }
class C{  public void testAlgorithmParameterGenerator09() throws NoSuchAlgorithmException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  AlgorithmParameterGenerator apg;  for (int i=0; i < algs.length; i++) {    apg=AlgorithmParameterGenerator.getInstance(algs[i],validProvider);    assertEquals("Incorrect algorithm",apg.getAlgorithm(),algs[i]);    assertEquals("Incorrect provider",apg.getProvider(),validProvider);  }}  }
class C{  public float nextFloat(){  return next(24) / ((float)(1 << 24));}  }
class C{  protected long copyCollection(CollectionId collectionId,long timestamp) throws InterruptedException {  AtomicLong docCount=new AtomicLong();  primaryClient.executeBlocking("sync '" + collectionId + "'",null);  return docCount.get();}  }
class C{  void traceError(Exception e){  if (trace) {    e.printStackTrace();  }}  }
class C{  public static boolean nonstaticSelect(JCTree tree){  tree=skipParens(tree);  if (!tree.hasTag(SELECT))   return false;  JCFieldAccess s=(JCFieldAccess)tree;  Symbol e=symbol(s.selected);  return e == null || (e.kind != Kinds.PCK && e.kind != Kinds.TYP);}  }
class C{  public static void start(){  if (!enabled) {    return;  }  if (samplingProfiler != null) {    Log.e(TAG,"SamplingProfilerIntegration already started at " + new Date(startMillis));    return;  }  ThreadGroup group=Thread.currentThread().getThreadGroup();  SamplingProfiler.ThreadSet threadSet=SamplingProfiler.newThreadGroupThreadSet(group);  samplingProfiler=new SamplingProfiler(samplingProfilerDepth,threadSet);  samplingProfiler.start(samplingProfilerMilliseconds);  startMillis=System.currentTimeMillis();}  }
class C{  @SubscribeEvent public static void onClientTick(TickEvent.ClientTickEvent event){  if (event.phase == TickEvent.Phase.END && MINECRAFT.thePlayer != null) {    final EntityPlayer player=MINECRAFT.thePlayer;    if (MINECRAFT.theWorld.getBlockState(new BlockPos(player).down()).getBlock() == Blocks.IRON_BLOCK) {      player.setAngles(5,0);    }  }}  }
class C{  void target(Targetable t){  target=t;  updateTarget();  ash.showDialog();}  }
class C{  private static int wordIndex(int bitIndex){  return bitIndex >> ADDRESS_BITS_PER_WORD;}  }
class C{  protected void displayError(String header,Object url,Object exception){  StringBuffer msg=new StringBuffer("<HTML><BODY>");  msg.append("<H1>").append(header).append("</H1>").append("<H3>URL=").append(url).append("</H3>").append("<H3>Error=").append(exception).append("</H3>").append("<p>&copy;&nbsp;Adempiere &nbsp; ").append("<A HREF=\"").append(BASE_URL).append("\">Online Help</A></p>").append("</BODY></HTML>");  setText(msg.toString());}  }
class C{  public PolicyMappings(Hashtable mappings){  ASN1EncodableVector dev=new ASN1EncodableVector();  Enumeration it=mappings.keys();  while (it.hasMoreElements()) {    String idp=(String)it.nextElement();    String sdp=(String)mappings.get(idp);    ASN1EncodableVector dv=new ASN1EncodableVector();    dv.add(new ASN1ObjectIdentifier(idp));    dv.add(new ASN1ObjectIdentifier(sdp));    dev.add(new DERSequence(dv));  }  seq=new DERSequence(dev);}  }
class C{  public DatabaseField clone(){  try {    return (DatabaseField)super.clone();  } catch (  CloneNotSupportedException exception) {    throw new InternalError(exception.getMessage());  }}  }
class C{  public void add(int id,DefineTag s) throws IllegalArgumentException {  Integer key=new Integer(id);  Tag t=ids.get(key);  if (t == null) {    ids.put(key,s);  } else {    if (t.equals(s))     throw new IllegalArgumentException("symbol " + id + " redefined by identical tag"); else     throw new IllegalArgumentException("symbol " + id + " redefined by different tag");  }}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PagesPerMinuteColor);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().play();  return null;}  }
class C{  static void unregister(Object value){  if (value != null) {    Map m=getRegistry();    if (m != null) {      m.remove(value);      if (m.isEmpty()) {        REGISTRY.set(null);      }    }  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private void allocateResolutionService(Operation op){  Operation startResolutionService=Operation.createPost(UriUtils.extendUri(getUri(),TransactionResolutionService.RESOLUTION_SUFFIX)).setCompletion(null);  getHost().startService(startResolutionService,new TransactionResolutionService(this));}  }
class C{  public UniformDistr(double min,double max,long seed){  this(min,max);  numGen.reseedRandomGenerator(seed);}  }
class C{  public void selectFeaturesByBox(BoundingBox box){switch (shapeType) {case POLYGON:case POLYGONZ:case POLYGONM:case POLYLINE:case POLYLINEZ:case POLYLINEM:    for (    ShapeFileRecord record : recs) {      BoundingBox bb=record.getGeometry().getBox();      if (bb.within(box)) {        setSelectedFeature(record.getRecordNumber());      }    }  break;case POINT:case POINTZ:case POINTM:double pointX, pointY;double[][] points;for (ShapeFileRecord record : recs) {points=record.getGeometry().getPoints();pointX=points[0][0];pointY=points[0][1];if (box.isPointInBox(pointX,pointY)) {setSelectedFeature(record.getRecordNumber());}}break;}}  }
class C{  protected SVGOMHandlerElement(){}  }
class C{  @Nullable public static <T extends DBPNamedObject>T findObject(@Nullable Collection<T> theList,String objectName){  if (theList != null && !theList.isEmpty()) {    for (    T object : theList) {      if (object.getName().equalsIgnoreCase(objectName)) {        return object;      }    }  }  return null;}  }
class C{  public static <T1,T2,R>Supplier<R> partial(final T1 t1,final Function<T1,R> func){  return null;}  }
class C{  public boolean isMeta(){  return hasRelationship(Primitive.INSTANTIATION,Primitive.META);}  }
class C{  public static int uniform(int N){  return random.nextInt(N);}  }
class C{  protected boolean isFull(){  return ntuples >= limit;}  }
class C{  public void testPrivateMode() throws Exception {  depMode=DeploymentMode.PRIVATE;  processTest(false,false);}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + n+ ","+ p+ ")";}  }
class C{  protected void cancelTradeBecauseOfLogout(){  if (tradeState == TradeState.NO_ACTIVE_TRADE) {    return;  }  Player partner=SingletonRepository.getRuleProcessor().getPlayer(partnerName);  if (partner != null) {    partner.sendPrivateText(player.getName() + " disappeared, cancelling the trade with you.");    partner.cancelTradeInternally(player.getName());  }  partnerName=null;}  }
class C{  public final void run(){  try {    final BufferedReader br=new BufferedReader(new InputStreamReader(is,"UTF-8"));    String line;    while ((line=br.readLine()) != null) {synchronized (outputFromExternalProgram) {        outputFromExternalProgram.append(line);      }    }  } catch (  IOException e) {    System.out.println(e);  }}  }
class C{  protected CRLNumberExtension(ObjectIdentifier extensionId,boolean isCritical,BigInteger crlNum,String extensionName,String extensionLabel) throws IOException {  this.extensionId=extensionId;  this.critical=isCritical;  this.crlNumber=crlNum;  this.extensionName=extensionName;  this.extensionLabel=extensionLabel;  encodeThis();}  }
class C{  private View createView(Context context,String name,AttributeSet attrs){  View view=null;  try {    if (-1 == name.indexOf('.')) {      if ("View".equals(name)) {        view=LayoutInflater.from(context).createView(name,"android.view.",attrs);      }      if (view == null) {        view=LayoutInflater.from(context).createView(name,"android.widget.",attrs);      }      if (view == null) {        view=LayoutInflater.from(context).createView(name,"android.webkit.",attrs);      }    } else {      view=LayoutInflater.from(context).createView(name,null,attrs);    }  } catch (  Exception e) {    L.e("error while create " + name + " : "+ e.getMessage());    view=null;  }  return view;}  }
class C{  @Override public int update(Uri uri,ContentValues values,String whereStatement,String[] whereStatementArgs){  int rowsUpdated;  final SQLiteDatabase db=mDatabaseHelper.getWritableDatabase();switch (sUriMatcher.match(uri)) {case WEATHER_VALUES_ITEMS:    rowsUpdated=db.update(WEATHER_VALUES_TABLE_NAME,values,whereStatement,whereStatementArgs);  break;case WEATHER_VALUES_ITEM:rowsUpdated=db.update(WEATHER_VALUES_TABLE_NAME,values,addKeyIdCheckToWhereStatement(whereStatement,ContentUris.parseId(uri)),whereStatementArgs);break;case WEATHER_CONDITIONS_ITEMS:rowsUpdated=db.update(WEATHER_CONDITIONS_TABLE_NAME,values,whereStatement,whereStatementArgs);break;case WEATHER_CONDITIONS_ITEM:rowsUpdated=db.update(WEATHER_CONDITIONS_TABLE_NAME,values,addKeyIdCheckToWhereStatement(whereStatement,ContentUris.parseId(uri)),whereStatementArgs);break;default :throw new IllegalArgumentException("Unknown URI " + uri);}getContext().getContentResolver().notifyChange(uri,null);getContext().getContentResolver().notifyChange(WeatherContract.ACCESS_ALL_DATA_FOR_LOCATION_URI,null);return rowsUpdated;}  }
class C{  private void markPatterns(){  this.touchedPatterns.clear();  for (int stop=touchedStops.nextSetBit(0); stop >= 0; stop=touchedStops.nextSetBit(stop + 1)) {    network.transitLayer.patternsForStop.get(stop).forEach(null);  }  this.touchedStops.clear();}  }
class C{  public ValueExp apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  Object result=getValue(name);  if (result instanceof String) {    return new StringValueExp((String)result);  } else {    throw new BadAttributeValueExpException(result);  }}  }
class C{  public void paintTabbedPaneTabAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return this.getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private void maybeProposeIndexedPropertyWrite(IJavaProject project,IMethod method,String propertyName,int invocationOffset,int indentationUnits,boolean isStatic,List<ICompletionProposal> proposals,int numCharsFilled,int numCharsToOverwrite) throws JavaModelException {  String[] parameterNames=method.getParameterNames();  if (parameterNames.length != 2) {    return;  }  String indexParameterType=method.getParameterTypes()[0];  if (isIndexType(indexParameterType)) {    String expression=createJsIndexedPropertyWriteExpression(propertyName,parameterNames[0],parameterNames[1],isStatic);    String code=createJsniBlock(project,expression,indentationUnits);    proposals.add(createProposal(method.getFlags(),code,invocationOffset,numCharsFilled,numCharsToOverwrite,expression));  }}  }
class C{  public List<String> findRelationsOfType(String relationTypeName) throws IllegalArgumentException, RelationTypeNotFoundException {  if (relationTypeName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"findRelationsOfType");  RelationType relType=getRelationType(relationTypeName);  List<String> result;synchronized (myRelType2RelIdsMap) {    List<String> result1=myRelType2RelIdsMap.get(relationTypeName);    if (result1 == null)     result=new ArrayList<String>(); else     result=new ArrayList<String>(result1);  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"findRelationsOfType");  return result;}  }
class C{  private void deactivateGhost(final Player player){  player.setGhost(false);  new GameEvent(player.getName(),GHOSTMODE,"off").raise();}  }
class C{  public void box(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    newInstance(boxed);    if (type.getSize() == 2) {      dupX2();      dupX2();      pop();    } else {      dupX1();      swap();    }    invokeConstructor(boxed,new Method("<init>",Type.VOID_TYPE,new Type[]{type}));  }}  }
class C{  public void testAddTransformer(){  for (int i=0; i < kTransformerSamples.length; i++) {    addTransformerToManager(fInst,kTransformerSamples[i]);  }  verifyTransformers(fInst);}  }
class C{  public LinkedIdentityHashMap(int initialCapacity){  super(initialCapacity);  accessOrder=false;}  }
class C{  public BottomGaugePanel(){  initComponents();  try {    commImage=ImageIO.read(getClass().getResourceAsStream("/com/codeminders/controltower/images/gaugeback_bottom2.png"));  } catch (  IOException ex) {    Logger.getLogger(ControlTower.class.getName()).error("{0}",ex);  }}  }
class C{  protected void initLaf(UIManager uim){  if (uim == getUIManager() && isInitialized()) {    return;  }  selectText=uim.localize("select","Select");  LookAndFeel laf=uim.getLookAndFeel();  animationSpeed=laf.getDefaultSmoothScrollingSpeed();  rtl=laf.isRTL();  tactileTouch=isFocusable();  tensileDragEnabled=laf.isDefaultTensileDrag();  snapToGrid=laf.isDefaultSnapToGrid();  alwaysTensile=laf.isDefaultAlwaysTensile();  tensileHighlightEnabled=laf.isDefaultTensileHighlight();  scrollOpacityChangeSpeed=laf.getFadeScrollBarSpeed();  isScrollVisible=laf.isScrollVisible();  if (tensileHighlightEnabled) {    tensileLength=3;  } else {    tensileLength=-1;  }}  }
class C{  private ListenableFuture<Void> processTables(QualifiedName databaseName,List<QualifiedName> tableNames){  List<List<QualifiedName>> tableNamesBatches=Lists.partition(tableNames,500);  List<ListenableFuture<Void>> processTablesBatchFutures=tableNamesBatches.stream().map(null).collect(Collectors.toList());  return Futures.transform(Futures.successfulAsList(processTablesBatchFutures),Functions.constant(null));}  }
class C{  public static Edge createAcceptEdge(State<?> src,Symbol symbol){  return new Edge(src,symbol,null,null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void signalNotFull(){  final ReentrantLock putLock=this.putLock;  putLock.lock();  try {    notFull.signal();  }  finally {    putLock.unlock();  }}  }
class C{  @Override public synchronized int reduce(final byte[] key,final Reducer reduce) throws IOException, SpaceExceededException {  int d=0;  for (  final blobItem bi : this.blobs) {    d+=bi.blob.reduce(key,reduce);  }  return d;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public final void checkAssert(final BiConsumer<A,B> property){  check(null);}  }
class C{  public void release(){  sweepConsumedBlocks(!EAGER_MARK_CLEAR);  inMSCollection=false;}  }
class C{  public void testNextGaussian(){  double f=ThreadLocalRandom.current().nextGaussian();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextGaussian() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  @Override protected void process(@NotNull WireIn inWire,@NotNull WireOut outWire,@NotNull SessionDetailsProvider sd){  inWire.readDocument(null,null);}  }
class C{  private void assertNullOrNotEmpty(final String s){  if (s != null) {    MoreAsserts.assertNotEqual(s,"");  }}  }
class C{  protected final XObject executeRelativePathPattern(XPathContext xctxt,DTM dtm,int currentNode) throws javax.xml.transform.TransformerException {  XObject score=NodeTest.SCORE_NONE;  int context=currentNode;  DTMAxisTraverser traverser;  traverser=dtm.getAxisTraverser(m_axis);  for (int relative=traverser.first(context); DTM.NULL != relative; relative=traverser.next(context,relative)) {    try {      xctxt.pushCurrentNode(relative);      score=execute(xctxt);      if (score != NodeTest.SCORE_NONE)       break;    }  finally {      xctxt.popCurrentNode();    }  }  return score;}  }
class C{  public boolean isRange(int start,int end,boolean value){  if (end < start) {    throw new IllegalArgumentException();  }  if (end == start) {    return true;  }  end--;  int firstInt=start / 32;  int lastInt=end / 32;  for (int i=firstInt; i <= lastInt; i++) {    int firstBit=i > firstInt ? 0 : start & 0x1F;    int lastBit=i < lastInt ? 31 : end & 0x1F;    int mask;    if (firstBit == 0 && lastBit == 31) {      mask=-1;    } else {      mask=0;      for (int j=firstBit; j <= lastBit; j++) {        mask|=1 << j;      }    }    if ((bits[i] & mask) != (value ? mask : 0)) {      return false;    }  }  return true;}  }
class C{  public void initializePython(){  if (!this.engines.containsKey(PYTHON)) {    InputStream is=FileUtil.findInputStream("python.properties",new String[]{FileUtil.getUserFilesPath(),FileUtil.getPreferencesPath(),FileUtil.getProgramPath()});    boolean execJython=false;    if (is != null) {      Properties properties;      try {        properties=new Properties(System.getProperties());        properties.setProperty("python.console.encoding","UTF-8");        properties.setProperty("python.cachedir",FileUtil.getAbsoluteFilename(properties.getProperty("python.cachedir","settings:jython/cache")));        properties.load(is);        String path=properties.getProperty("python.path","");        if (path.length() != 0) {          path=path.concat(File.pathSeparator);        }        properties.setProperty("python.path",path.concat(FileUtil.getScriptsPath().concat(File.pathSeparator).concat(FileUtil.getAbsoluteFilename("program:jython"))));        execJython=Boolean.valueOf(properties.getProperty("jython.exec",Boolean.toString(false)));      } catch (      IOException ex) {        log.error("Found, but unable to read python.properties: {}",ex.getMessage());        properties=null;      }      PySystemState.initialize(null,properties);      log.debug("Jython path is {}",PySystemState.getBaseProperties().getProperty("python.path"));    }    try {      log.debug("create interpreter");      ScriptEngine python=this.manager.getEngineByName(PYTHON);      python.setContext(this.context);      is=FileUtil.findInputStream(jythonDefaults,new String[]{FileUtil.getUserFilesPath(),FileUtil.getPreferencesPath()});      if (execJython) {        this.jython=new PythonInterpreter();      }      if (is != null) {        python.eval(new InputStreamReader(is));        if (this.jython != null) {          this.jython.execfile(is);        }      }      this.engines.put(PYTHON,python);    } catch (    ScriptException e) {      log.error("Exception creating jython system objects",e);    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.007 -0400",hash_original_method="A34146943A862D7F5ACB46C703939F78",hash_generated_method="1263F791E1FEB254368D39F5022D013F") public boolean offer(E e){  final ReentrantLock lock=this.lock;  lock.lock();  try {    q.offer(e);    if (q.peek() == e) {      leader=null;      available.signal();    }    return true;  }  finally {    lock.unlock();  }}  }
class C{  public String[] filteringAliases(){  return filteringAliases;}  }
class C{  public String[] split(String input,int limit){  return pattern.split(input,limit);}  }
class C{  public Object lookup(final Type type,final boolean secondary){  if (type instanceof ParameterizedType) {    return lookupParameterized((ParameterizedType)type,secondary);  }  if (!(type instanceof Class)) {    throw new IllegalArgumentException("Lookup for type (" + type + ") failed");  }  final Class<?> cls=(Class<?>)type;  if (cls.equals(boolean.class) || cls.equals(Boolean.class)) {    return secondary;  }  if (cls.equals(int.class) || cls.equals(Integer.class)) {    return secondary ? 1 : 2;  }  if (cls.equals(long.class) || cls.equals(Long.class)) {    return secondary ? 100L : 200L;  }  if (cls.equals(float.class) || cls.equals(Float.class)) {    return secondary ? 1.0F : 2.0F;  }  if (cls.equals(double.class) || cls.equals(Double.class)) {    return secondary ? 1.1D : 2.2D;  }  if (cls.equals(String.class)) {    return secondary ? "a" : "b";  }  if (cls.isEnum()) {    final Object[] constants=cls.getEnumConstants();    if (constants.length < 2) {      throw new IllegalArgumentException("Enum type (" + cls + ") has less than two constants");    }    return secondary ? constants[1] : constants[0];  }  if (cls.equals(UUID.class)) {    return secondary ? uuid1 : uuid2;  }  return lookupClass(cls,secondary).orElseGet(null);}  }
class C{  protected void onListItemClick(ListView l,View v,int position,long id){}  }
class C{  protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doPost(request,response);}  }
class C{  public static boolean alreadyAuthorized(){  return Twitter.getSessionManager().getActiveSession() != null;}  }
class C{  public static jMatrix identity(int m,int n){  jMatrix A=new jMatrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=(i == j ? 1.0 : 0.0);    }  }  return A;}  }
class C{  public static byte[] generate(byte[] password,byte[] salt,int cost){  if (password == null || salt == null) {    throw new IllegalArgumentException("Password and salt are required");  }  if (salt.length != SALT_SIZE_BYTES) {    throw new IllegalArgumentException("BCrypt salt must be 128 bits");  }  if (password.length > MAX_PASSWORD_BYTES) {    throw new IllegalArgumentException("BCrypt password must be <= 72 bytes");  }  if (cost < MIN_COST || cost > MAX_COST) {    throw new IllegalArgumentException("BCrypt cost must be from 4..31");  }  return INSTANCE.deriveRawKey(cost,salt,password);}  }
class C{  public static boolean isJava6OnMac(){  return isMac() && isJava6();}  }
class C{  public boolean insert_redundant_casts(){  return soot.PhaseOptions.getBoolean(options,"insert-redundant-casts");}  }
class C{  public ZipError(String s){  super(s);}  }
class C{  public MicroHessianOutput(){}  }
class C{  @Override public long toTimelineValue(long millisecond){  long result;  long rawMilliseconds=millisecond - this.startTime;  long groupMilliseconds=rawMilliseconds % this.segmentsGroupSize;  long groupIndex=rawMilliseconds / this.segmentsGroupSize;  if (groupMilliseconds >= this.segmentsIncludedSize) {    result=toTimelineValue(this.startTime + this.segmentsGroupSize * (groupIndex + 1));  } else {    Segment segment=getSegment(millisecond);    if (segment.inExceptionSegments()) {      int p;      while ((p=binarySearchExceptionSegments(segment)) >= 0) {        segment=getSegment(millisecond=((Segment)this.exceptionSegments.get(p)).getSegmentEnd() + 1);      }      result=toTimelineValue(millisecond);    } else {      long shiftedSegmentedValue=millisecond - this.startTime;      long x=shiftedSegmentedValue % this.segmentsGroupSize;      long y=shiftedSegmentedValue / this.segmentsGroupSize;      long wholeExceptionsBeforeDomainValue=getExceptionSegmentCount(this.startTime,millisecond - 1);      if (x < this.segmentsIncludedSize) {        result=this.segmentsIncludedSize * y + x - wholeExceptionsBeforeDomainValue * this.segmentSize;      } else {        result=this.segmentsIncludedSize * (y + 1) - wholeExceptionsBeforeDomainValue * this.segmentSize;      }    }  }  return result;}  }
class C{  public CombinedXYChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,String[] types){  super(dataset,renderer);  int length=types.length;  mCharts=new XYChart[length];  for (int i=0; i < length; i++) {    try {      mCharts[i]=getXYChart(types[i]);    } catch (    Exception e) {    }    if (mCharts[i] == null) {      throw new IllegalArgumentException("Unknown chart type " + types[i]);    } else {      XYMultipleSeriesDataset newDataset=new XYMultipleSeriesDataset();      newDataset.addSeries(dataset.getSeriesAt(i));      XYMultipleSeriesRenderer newRenderer=new XYMultipleSeriesRenderer();      newRenderer.setBarSpacing(renderer.getBarSpacing());      newRenderer.setPointSize(renderer.getPointSize());      int scale=dataset.getSeriesAt(i).getScaleNumber();      if (renderer.isMinXSet(scale)) {        newRenderer.setXAxisMin(renderer.getXAxisMin(scale));      }      if (renderer.isMaxXSet(scale)) {        newRenderer.setXAxisMax(renderer.getXAxisMax(scale));      }      if (renderer.isMinYSet(scale)) {        newRenderer.setYAxisMin(renderer.getYAxisMin(scale));      }      if (renderer.isMaxYSet(scale)) {        newRenderer.setYAxisMax(renderer.getYAxisMax(scale));      }      newRenderer.addSeriesRenderer(renderer.getSeriesRendererAt(i));      mCharts[i].setDatasetRenderer(newDataset,newRenderer);    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.EXEC_MODULE__EXEC_MODULE:    return getExecModule();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Account(final String username,final String password){  super();  this.username=username;  this.password=password;}  }
class C{  private void verifyUpdateRight(Entity entity){  LOG.debug("VERIFYING UPDATE RIGHT FOR " + entity);}  }
class C{  public double train(double X_[][],int batchSize) throws Exception {  initWeights(X_);  X_=MatrixUtils.addBias(X_);  int N=X_.length;  if (batchSize == N)   return train(X_);  int N_n=(int)Math.ceil(N * 1. / batchSize);  Matrix X_n[]=new Matrix[N_n];  for (int n=0, i=0; n < N; n+=batchSize, i++) {    X_n[i]=new Matrix(Arrays.copyOfRange(X_,n,Math.min(n + batchSize,N)));  }  for (int e=0; e < m_E; e++) {    for (    Matrix X : X_n) {      update(X,1. / N_n);    }  }  return 1.0;}  }
class C{  @Override public CategoricalTable toDiscrete(){  Map<Value,Double> map=new HashMap<Value,Double>();  map.put(value,1.0);  return new CategoricalTable(variable,map);}  }
class C{  private Object readResolve() throws ObjectStreamException {  ItemLabelAnchor result=null;  if (this.equals(ItemLabelAnchor.CENTER)) {    result=ItemLabelAnchor.CENTER;  } else   if (this.equals(ItemLabelAnchor.INSIDE1)) {    result=ItemLabelAnchor.INSIDE1;  } else   if (this.equals(ItemLabelAnchor.INSIDE2)) {    result=ItemLabelAnchor.INSIDE2;  } else   if (this.equals(ItemLabelAnchor.INSIDE3)) {    result=ItemLabelAnchor.INSIDE3;  } else   if (this.equals(ItemLabelAnchor.INSIDE4)) {    result=ItemLabelAnchor.INSIDE4;  } else   if (this.equals(ItemLabelAnchor.INSIDE5)) {    result=ItemLabelAnchor.INSIDE5;  } else   if (this.equals(ItemLabelAnchor.INSIDE6)) {    result=ItemLabelAnchor.INSIDE6;  } else   if (this.equals(ItemLabelAnchor.INSIDE7)) {    result=ItemLabelAnchor.INSIDE7;  } else   if (this.equals(ItemLabelAnchor.INSIDE8)) {    result=ItemLabelAnchor.INSIDE8;  } else   if (this.equals(ItemLabelAnchor.INSIDE9)) {    result=ItemLabelAnchor.INSIDE9;  } else   if (this.equals(ItemLabelAnchor.INSIDE10)) {    result=ItemLabelAnchor.INSIDE10;  } else   if (this.equals(ItemLabelAnchor.INSIDE11)) {    result=ItemLabelAnchor.INSIDE11;  } else   if (this.equals(ItemLabelAnchor.INSIDE12)) {    result=ItemLabelAnchor.INSIDE12;  } else   if (this.equals(ItemLabelAnchor.OUTSIDE1)) {    result=ItemLabelAnchor.OUTSIDE1;  } else   if (this.equals(ItemLabelAnchor.OUTSIDE2)) {    result=ItemLabelAnchor.OUTSIDE2;  } else   if (this.equals(ItemLabelAnchor.OUTSIDE3)) {    result=ItemLabelAnchor.OUTSIDE3;  } else   if (this.equals(ItemLabelAnchor.OUTSIDE4)) {    result=ItemLabelAnchor.OUTSIDE4;  } else   if (this.equals(ItemLabelAnchor.OUTSIDE5)) {    result=ItemLabelAnchor.OUTSIDE5;  } else   if (this.equals(ItemLabelAnchor.OUTSIDE6)) {    result=ItemLabelAnchor.OUTSIDE6;  } else   if (this.equals(ItemLabelAnchor.OUTSIDE7)) {    result=ItemLabelAnchor.OUTSIDE7;  } else   if (this.equals(ItemLabelAnchor.OUTSIDE8)) {    result=ItemLabelAnchor.OUTSIDE8;  } else   if (this.equals(ItemLabelAnchor.OUTSIDE9)) {    result=ItemLabelAnchor.OUTSIDE9;  } else   if (this.equals(ItemLabelAnchor.OUTSIDE10)) {    result=ItemLabelAnchor.OUTSIDE10;  } else   if (this.equals(ItemLabelAnchor.OUTSIDE11)) {    result=ItemLabelAnchor.OUTSIDE11;  } else   if (this.equals(ItemLabelAnchor.OUTSIDE12)) {    result=ItemLabelAnchor.OUTSIDE12;  }  return result;}  }
class C{  public void connectionLost(java.lang.Throwable cause){  int rc=-1;  led.setAmber();  led.setFlash();  setTitleText("Connection Lost!....Reconnecting");synchronized (this) {    writeLogln("MQTT Connection Lost!....Reconnecting to " + mqtt.getServerURI());  }  try {    while ((rc == -1) && connected) {      try {synchronized (connLostWait) {          connLostWait.wait(10000);        }      } catch (      InterruptedException iex) {      }synchronized (this) {        if (connected) {          writeLog("MQTT reconnecting......");          try {            connect(mqtt.getServerURI(),optionsComp.isPersistenceSelected());            rc=0;          } catch (          MqttException mqte) {            rc=-1;          }          if (rc == -1) {            writeLogln("failed");          } else {            writeLogln("success !");          }        }      }    }    setTitleText("");  } catch (  Exception ex) {    setTitleText("MQTT connection broken !");    ex.printStackTrace();    disconnect();  } finally {    if (led.isFlashing()) {      led.setFlash();    }  }  if (connected) {    led.setGreen();    setConnected(true);  } else {    led.setRed();    setConnected(false);  }}  }
class C{  private boolean fetchSubtargets(List<Target> targets){  subtargets.clear();  currentSubtargets.clear();  boolean foundTarget=false;  for (  final Target target : targets) {    for (    final TargetRegion region : target.getRegions()) {      if (region.getAllTags().containsKey("subtarget")) {        subtargets.add(region.getTag("subtarget"));        foundTarget=true;      }    }    if (foundTarget) {      selectedTarget=target;      break;    }  }  if (foundTarget && subtargets.size() > 0) {    return true;  } else {    TrainingExerciseBase.playSound(new File("sounds/voice/shootoff-subtargets-warning.wav"));    return false;  }}  }
class C{  private void fetchDrawableFromAttr(TypedArray ta){  if (mConf == null) {    return;  }  mConf.setOffDrawable(fetchDrawable(ta,R.styleable.SwitchButton_offDrawable,R.styleable.SwitchButton_offColor,Configuration.Default.DEFAULT_OFF_COLOR));  mConf.setOnDrawable(fetchDrawable(ta,R.styleable.SwitchButton_onDrawable,R.styleable.SwitchButton_onColor,Configuration.Default.DEFAULT_ON_COLOR));  mConf.setThumbDrawable(fetchThumbDrawable(ta));}  }
class C{  public static <E extends ODataException>void visitProperties(EntityDataModel entityDataModel,StructuredType structType,PropertyVisitor<E> visitor) throws E {  String baseTypeName=structType.getBaseTypeName();  if (!isNullOrEmpty(baseTypeName)) {    visitProperties(entityDataModel,(StructuredType)entityDataModel.getType(baseTypeName),visitor);  }  for (  StructuralProperty property : structType.getStructuralProperties()) {    visitor.visit(property);  }}  }
class C{  private static byte[] consume(final InputStream input) throws IOException {  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  final byte[] buf=new byte[4096];  try {    while (true) {      final int bytes=input.read(buf);      if (bytes < 0) {        break;      }      baos.write(buf,0,bytes);    }  }  finally {    input.close();  }  return baos.toByteArray();}  }
class C{  public QDataWriter appendWithSize(byte[] bytes) throws IOException {  writeInt32(bytes.length);  out.write(bytes);  return this;}  }
class C{  @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  private void disconnect(){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  c.changeConnectionStatus(ConnectionStatus.DISCONNECTED);  String actionTaken=context.getString(R.string.toast_disconnected);  c.addAction(actionTaken);}  }
class C{  public ParallelGatewaySenderQueue(AbstractGatewaySender sender,Set<Region> userRegions,int idx,int nDispatcher){  this(sender,userRegions,idx,nDispatcher,new MetaRegionFactory());}  }
class C{  public boolean isPrune(){  return prune;}  }
class C{  private MethodTemplate generateCodePath(final String codePath,List<Fingerprint.Filter> filters,List<Fingerprint.Payload> payloads){  String methodName=Template.asJavaIdentifier(codePath);  FilterExpression filter=new FilterExpression(filters);  MethodTemplate method=new MethodTemplate().setScopeName(codePath).setArgumentList(getDefaultArguments()).setMethodName(methodName);  ConditionalBlock block=new ConditionalBlock().setExpression(filter);  generateCodePath(methodName,block,payloads);  method.setMethodConditionalBody(block);  return method;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.021 -0500",hash_original_method="9B0DDD6C675DEF6700311B055DE9E01B",hash_generated_method="A9299B19BB59DB39888BE5B675AC053F") public static void fill(char[] array,char value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS__NEGATED:    return negated != NEGATED_EDEFAULT;case RegularExpressionPackage.CHARACTER_CLASS__ELEMENTS:  return elements != null && !elements.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public String printBody() throws IOException {  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  this.printBody(baos);  return new Utf8String(baos.toByteArray()).string();}  }
class C{  @NamespacePermission(fields="#businessObjectDataStorageFilesCreateRequest.namespace",permissions=NamespacePermissionEnum.WRITE) @Override @Transactional(propagation=Propagation.REQUIRES_NEW) public BusinessObjectDataStorageFilesCreateResponse createBusinessObjectDataStorageFiles(BusinessObjectDataStorageFilesCreateRequest businessObjectDataStorageFilesCreateRequest){  return createBusinessObjectDataStorageFilesImpl(businessObjectDataStorageFilesCreateRequest);}  }
class C{  public a addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @After public void teardown(){  if (server != null) {    logger.info("Shutting down echo server...");    server.shutdown();  }}  }
class C{  void locateAllPluginsAt(File root){  final ClassPathManager manager=this.pluginManager.getClassPathManager();  final ClassPathLocator locator=manager.getLocator();  final Collection<AbstractClassPathLocation> locations=locator.findBelow(root.toURI());  for (  AbstractClassPathLocation location : locations) {    manager.registerLocation(location);    Collection<String> subclasses=null;    if (location instanceof JARClasspathLocation) {      final JARClasspathLocation jarLocation=(JARClasspathLocation)location;      subclasses=jarLocation.getPredefinedPluginList();    }    if (subclasses == null)     subclasses=manager.findSubclassesFor(location,Plugin.class);    for (    String string : subclasses) {      tryToLoadClassAsPlugin(location,string);    }  }}  }
class C{  public void updateRow(Value[] current,Value[] updateRow) throws SQLException {  StatementBuilder buff=new StatementBuilder("UPDATE ");  appendTableName(buff);  buff.append(" SET ");  appendColumnList(buff,true);  appendKeyCondition(buff);  PreparedStatement prep=conn.prepareStatement(buff.toString());  int j=1;  for (int i=0; i < columnCount; i++) {    Value v=updateRow[i];    if (v == null) {      v=current[i];    }    v.set(prep,j++);  }  setKey(prep,j,current);  int count=prep.executeUpdate();  if (count != 1) {    throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);  }}  }
class C{  private void handleFeatureFriday(String json){  int set=parseFeatureFriday(json);  if (set == -1) {    featureFridaySet=-1;    clearFeatureFridayEmotes();    LOGGER.info(String.format("[FFZ] No Feature Friday found: %s",StringUtil.trim(StringUtil.removeLinebreakCharacters(StringUtil.shortenTo(json,100)))));  } else {    if (featureFridaySet != set) {      clearFeatureFridayEmotes();    }    featureFridaySet=set;    request(Type.FEATURE_FRIDAY,String.valueOf(set),true);  }}  }
class C{  public void addValue(double v,double pi){  if (windowSize != INFINITE_WINDOW) {    if (getN() == windowSize) {      piValues.addElementRolling(pi);    } else     if (getN() < windowSize) {      piValues.addElement(pi);    }  } else {    piValues.addElement(pi);  }  super.addValue(v);}  }
class C{  public InMemoryTransactionalQueueApplier(){}  }
class C{  PointComparator(int dimension){  this.dimension=dimension;}  }
class C{  private void tryScrollBackToTopAbortRefresh(){  tryScrollBackToTop();}  }
class C{  public ModelBuilder subject(Resource subject){  this.currentSubject=subject;  return this;}  }
class C{  public void addComboBoxLastSelection(String comboBoxName,String lastValue){  if (getComboBoxLastSelection(comboBoxName) == null) {    ComboBoxLastSelection combo=new ComboBoxLastSelection(comboBoxName,lastValue);    _comboBoxLastSelection.add(combo);  } else {    setComboBoxLastSelection(comboBoxName,lastValue);  }  setChangeMade(false);}  }
class C{  public void testMoveFileDestinationRoot() throws Exception {  create(igfs,paths(DIR,SUBDIR),paths(FILE));  igfs.rename(FILE,IgfsPath.ROOT);  checkExist(igfs,igfsSecondary,new IgfsPath("/" + FILE.name()));  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  private void restoreWidget(Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking widget " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  Widget widget=unpackProto(new Widget(),buffer,dataSize);  if (DEBUG)   Log.d(TAG,"unpacked " + widget.provider);  if (widget.icon.data != null) {    Bitmap icon=BitmapFactory.decodeByteArray(widget.icon.data,0,widget.icon.data.length);    if (icon == null) {      Log.w(TAG,"failed to unpack widget icon for " + key.name);    } else {      IconCache.preloadIcon(mContext,ComponentName.unflattenFromString(widget.provider),icon,widget.icon.dpi);    }  }}  }
class C{  public void testSimple() throws Exception {  Analyzer a=new MockAnalyzer(random(),MockTokenizer.SIMPLE,true);  assertAnalyzesTo(a,"a-bc123 defg+hijklmn567opqrstuv78wxy_z ",new String[]{"a","bc","defg","hijklmn","opqrstuv","wxy","z"});  assertAnalyzesTo(a,"aba4cadaba-Shazam",new String[]{"aba","cadaba","shazam"});  assertAnalyzesTo(a,"break+on/Letters",new String[]{"break","on","letters"});}  }
class C{  private void closeCurrentSequenceFilePair() throws IOException {  if (mCurrentSeq != null) {    mCurrentSeq.close();    mSeqIndex.incrementSize(mCurrentSeq.valuesWritten());    mSeqIndex.writeEntry();  }}  }
class C{  byte[] nextBytes(int n){  ByteBuffer buf=ByteBuffer.allocate(n);  while (buf.hasRemaining()) {    ByteBuffer cbuf=ByteBuffer.allocate(seed.length + 4);    cbuf.put(seed);    cbuf.putInt(counter);    byte[] array=cbuf.array();    byte[] hash=new byte[hashAlg.getDigestSize()];    hashAlg.update(array,0,array.length);    hashAlg.doFinal(hash,0);    if (buf.remaining() < hash.length) {      buf.put(hash,0,buf.remaining());    } else {      buf.put(hash);    }    counter++;  }  return buf.array();}  }
class C{  @Override protected boolean makeFigure(MouseEvent event){  ControlPanelEditor ed=_parent.getEditor();  Rectangle r=ed.getSelectRect();  if (r != null) {    _width=r.width;    _height=r.height;    Rectangle2D.Double rr=new Rectangle2D.Double(0,0,_width,_height);    PositionableRectangle ps=new PositionableRectangle(ed,rr);    ps.setLocation(r.x,r.y);    ps.setDisplayLevel(ControlPanelEditor.MARKERS);    setPositionableParams(ps);    ps.updateSize();    ed.putItem(ps);  }  return true;}  }
class C{  protected boolean saveTGA(OutputStream output){  byte header[]=new byte[18];  if (format == ALPHA) {    header[2]=0x0B;    header[16]=0x08;    header[17]=0x28;  } else   if (format == RGB) {    header[2]=0x0A;    header[16]=24;    header[17]=0x20;  } else   if (format == ARGB) {    header[2]=0x0A;    header[16]=32;    header[17]=0x28;  } else {    throw new RuntimeException("Image format not recognized inside save()");  }  header[12]=(byte)(width & 0xff);  header[13]=(byte)(width >> 8);  header[14]=(byte)(height & 0xff);  header[15]=(byte)(height >> 8);  try {    output.write(header);    int maxLen=height * width;    int index=0;    int col;    int[] currChunk=new int[128];    if (format == ALPHA) {      while (index < maxLen) {        boolean isRLE=false;        int rle=1;        currChunk[0]=col=pixels[index] & 0xff;        while (index + rle < maxLen) {          if (col != (pixels[index + rle] & 0xff) || rle == 128) {            isRLE=(rle > 1);            break;          }          rle++;        }        if (isRLE) {          output.write(0x80 | (rle - 1));          output.write(col);        } else {          rle=1;          while (index + rle < maxLen) {            int cscan=pixels[index + rle] & 0xff;            if ((col != cscan && rle < 128) || rle < 3) {              currChunk[rle]=col=cscan;            } else {              if (col == cscan)               rle-=2;              break;            }            rle++;          }          output.write(rle - 1);          for (int i=0; i < rle; i++)           output.write(currChunk[i]);        }        index+=rle;      }    } else {      while (index < maxLen) {        boolean isRLE=false;        currChunk[0]=col=pixels[index];        int rle=1;        while (index + rle < maxLen) {          if (col != pixels[index + rle] || rle == 128) {            isRLE=(rle > 1);            break;          }          rle++;        }        if (isRLE) {          output.write(128 | (rle - 1));          output.write(col & 0xff);          output.write(col >> 8 & 0xff);          output.write(col >> 16 & 0xff);          if (format == ARGB)           output.write(col >>> 24 & 0xff);        } else {          rle=1;          while (index + rle < maxLen) {            if ((col != pixels[index + rle] && rle < 128) || rle < 3) {              currChunk[rle]=col=pixels[index + rle];            } else {              if (col == pixels[index + rle])               rle-=2;              break;            }            rle++;          }          output.write(rle - 1);          if (format == ARGB) {            for (int i=0; i < rle; i++) {              col=currChunk[i];              output.write(col & 0xff);              output.write(col >> 8 & 0xff);              output.write(col >> 16 & 0xff);              output.write(col >>> 24 & 0xff);            }          } else {            for (int i=0; i < rle; i++) {              col=currChunk[i];              output.write(col & 0xff);              output.write(col >> 8 & 0xff);              output.write(col >> 16 & 0xff);            }          }        }        index+=rle;      }    }    output.flush();    return true;  } catch (  IOException e) {    e.printStackTrace();    return false;  }}  }
class C{  @Override public void onAction(){  onAction(ActionType.LOOK_CLOSELY);}  }
class C{  protected void assertSingleValue(Statement stat,String sql,int expected) throws SQLException {  ResultSet rs=stat.executeQuery(sql);  assertTrue(rs.next());  assertEquals(expected,rs.getInt(1));  assertFalse(rs.next());}  }
class C{  @SuppressWarnings("rawtypes") public TdfResourceLocation(UriInfo uriInfo,Service service,Class statusResource,Class serviceResource,Class commandResource){  String parentPath=this.getParentPath(service).toString();  parentPath=(parentPath == null) ? "." : parentPath;  this.statusUrl=UriBuilder.fromUri(uriInfo.getBaseUri()).path(statusResource).path(parentPath).path(service.getName()).build();  this.location=UriBuilder.fromUri(uriInfo.getBaseUri()).path(serviceResource).path(parentPath).path(service.getName()).build();  this.commandUrl=UriBuilder.fromUri(uriInfo.getBaseUri()).path(commandResource).path(parentPath).path(service.getName()).build();  this.statusUrl=UriBuilder.fromPath(this.statusUrl.getPath()).build();  this.location=UriBuilder.fromPath(this.location.getPath()).build();  this.commandUrl=UriBuilder.fromPath(this.commandUrl.getPath()).build();}  }
class C{  @Override public void readFields(DataInput in) throws IOException {  this.initialCapacity=in.readInt();  this.value.readFields(in);  this.meta.readFields(in);}  }
class C{  protected Process launch(final CommandLine command,final Map<String,String> env,final File dir) throws IOException {  if (this.launcher == null) {    throw new IllegalStateException("CommandLauncher can not be null");  }  if (dir != null && !dir.exists()) {    throw new IOException(dir + " doesn't exist.");  }  return this.launcher.exec(command,env,dir);}  }
class C{  @Override public ExampleSet performPrediction(ExampleSet exampleSet,Attribute predictedLabel) throws OperatorException {  final Attribute[] specialAttributes=this.createSpecialAttributes(exampleSet);  this.initIntermediateResultAttributes(exampleSet,specialAttributes);  for (int i=0; i < this.getNumberOfModels(); i++) {    Model model=this.getModel(i);    ExampleSet clonedExampleSet=(ExampleSet)exampleSet.clone();    clonedExampleSet=model.apply(clonedExampleSet);    this.updateEstimates(clonedExampleSet,this.getContingencyMatrix(i),specialAttributes);    PredictionModel.removePredictedLabel(clonedExampleSet);  }  Iterator<Example> reader=exampleSet.iterator();  while (reader.hasNext()) {    Example example=reader.next();    this.translateOddsIntoPredictions(example,specialAttributes,getTrainingHeader().getAttributes().getLabel());  }  this.cleanUpSpecialAttributes(exampleSet,specialAttributes);  return exampleSet;}  }
class C{  public void requestFileSystem() throws DebugException {  try {    m_debugger.requestFileSystem();  } catch (  final DebugExceptionWrapper exception) {    throw new DebugException(exception);  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  if (publicId.equals(StatisticsTypeXml.publicId) || systemId.equals(StatisticsTypeXml.systemId) || systemId.endsWith(DTD)) {    String location="/org/apache/geode/" + DTD;    InputStream stream=ClassPathLoader.getLatest().getResourceAsStream(getClass(),location);    if (stream != null) {      return new InputSource(stream);    } else {      throw new SAXNotRecognizedException(LocalizedStrings.StatisticsTypeXml_DTD_NOT_FOUND_0.toLocalizedString(location));    }  } else {    throw new SAXNotRecognizedException(LocalizedStrings.StatisticsTypeXml_INVALID_PUBLIC_ID_0.toLocalizedString(publicId));  }}  }
class C{  private void reassign(){  if (member.type() == Member.Type.ACTIVE && !member.equals(context.getLeader())) {    int index=1;    for (    MemberState member : getActiveMemberStates(null)) {      if (!member.getMember().equals(context.getLeader())) {        if (this.member.id() < member.getMember().id()) {          index++;        } else {          break;        }      }    }    List<MemberState> sortedPassiveMembers=getPassiveMemberStates(null);    assignedMembers=assignMembers(index,sortedPassiveMembers);  } else {    assignedMembers=new ArrayList<>(0);  }}  }
class C{  private void installDefaults(){  setFont(UIManager.getFont("InternalFrame.titleFont",getLocale()));}  }
class C{  public static ArrayList<Post> ParsePosts(JSONObject jsonTotalObject){  ArrayList<Post> posts=new ArrayList<>();  try {    JSONArray postArray=jsonTotalObject.getJSONArray("posts");    for (int i=0; i < postArray.length(); i++) {      JSONObject object=postArray.getJSONObject(i);      Post post=new Post();      post.setTitle(object.optString("title"));      post.setId(object.optInt("id"));      post.setThumbnailUrl(Settings.DEFAULT_THUMBNAIL_URL);      post.setUrl(object.optString("url"));      post.setCommentCount(object.optInt("comment_count",0));      post.setDate(object.optString("date","N/A"));      post.setExcerpt(object.optString("excerpt","N/A"));      post.setContent(object.optString("content","N/A"));      JSONObject author=object.getJSONObject("author");      post.setAuthor(author.optString("name","N/A"));      JSONObject featuredImages=object.optJSONObject("thumbnail_images");      if (featuredImages != null) {        post.setFeaturedImageUrl(featuredImages.optJSONObject("full").optString("url",Settings.DEFAULT_THUMBNAIL_URL));      }      posts.add(post);    }    return posts;  } catch (  JSONException e) {    Log.e(TAG,"JSONException when loading Posts",e);    e.printStackTrace();    return null;  }}  }
class C{  public static Object transform(JsonNode node){  if (node instanceof NullNode) {    return null;  }  if (node instanceof MissingNode) {    return null;  }  if (node instanceof IntNode) {    return ((IntNode)node).intValue();  }  if (node instanceof BigIntegerNode) {    return ((BigIntegerNode)node).bigIntegerValue();  }  if (node instanceof BinaryNode) {    return ((BinaryNode)node).binaryValue();  }  if (node instanceof BooleanNode) {    return ((BooleanNode)node).booleanValue();  }  if (node instanceof DecimalNode) {    return ((DecimalNode)node).decimalValue();  }  if (node instanceof DoubleNode) {    return ((DoubleNode)node).doubleValue();  }  if (node instanceof LongNode) {    return ((LongNode)node).longValue();  }  if (node instanceof NumericNode) {    return ((NumericNode)node).numberValue();  }  if (node instanceof POJONode) {    return ((POJONode)node).getPojo();  }  if (node instanceof TextNode) {    return ((TextNode)node).textValue();  }  if (node instanceof ArrayNode) {    List<Object> resultList=new ArrayList<>();    for (    JsonNode subnode : node) {      Object result=transform(subnode);      if (result != null) {        resultList.add(result);      }    }    return resultList;  }  if (node instanceof ObjectNode) {    Map<String,Object> resultMap=new HashMap<String,Object>();    Iterator<Map.Entry<String,JsonNode>> iterator=node.fields();    while (iterator.hasNext()) {      Map.Entry<String,JsonNode> subnodeEntry=iterator.next();      Object result=transform(subnodeEntry.getValue());      if (result != null) {        resultMap.put(subnodeEntry.getKey(),result);      }    }    return resultMap;  }  return null;}  }
class C{  public static PlusMult plusDiv(final double constant){  return new PlusMult(1 / constant);}  }
class C{  @Nonnull public ExternalScriptTO saveOrUpdateExternalScript(@Nonnull ExternalScriptTO script) throws RestServiceException, UniformInterfaceException {  WebResource webResource=client.resource(urlBuilder.buildUrl(ScriptService.METHOD_EXTERNAL_SCRIPT));  ClientResponse response=webResource.accept(MediaType.APPLICATION_XML_TYPE,MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,script);  exceptionHandler.checkStatusCode(response);  String loc=response.getHeaders().getFirst("location");  webResource=client.resource(loc);  response=webResource.accept(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);  exceptionHandler.checkStatusCode(response);  return response.getEntity(ExternalScriptTO.class);}  }
class C{  private void fakeParameterTypes(boolean isReallyProcedure) throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    Field[] fields=new Field[13];    fields[0]=new Field("","PROCEDURE_CAT",Types.CHAR,0);    fields[1]=new Field("","PROCEDURE_SCHEM",Types.CHAR,0);    fields[2]=new Field("","PROCEDURE_NAME",Types.CHAR,0);    fields[3]=new Field("","COLUMN_NAME",Types.CHAR,0);    fields[4]=new Field("","COLUMN_TYPE",Types.CHAR,0);    fields[5]=new Field("","DATA_TYPE",Types.SMALLINT,0);    fields[6]=new Field("","TYPE_NAME",Types.CHAR,0);    fields[7]=new Field("","PRECISION",Types.INTEGER,0);    fields[8]=new Field("","LENGTH",Types.INTEGER,0);    fields[9]=new Field("","SCALE",Types.SMALLINT,0);    fields[10]=new Field("","RADIX",Types.SMALLINT,0);    fields[11]=new Field("","NULLABLE",Types.SMALLINT,0);    fields[12]=new Field("","REMARKS",Types.CHAR,0);    String procName=isReallyProcedure ? extractProcedureName() : null;    byte[] procNameAsBytes=null;    try {      procNameAsBytes=procName == null ? null : StringUtils.getBytes(procName,"UTF-8");    } catch (    UnsupportedEncodingException ueEx) {      procNameAsBytes=StringUtils.s2b(procName,this.connection);    }    ArrayList<ResultSetRow> resultRows=new ArrayList<ResultSetRow>();    for (int i=0; i < this.parameterCount; i++) {      byte[][] row=new byte[13][];      row[0]=null;      row[1]=null;      row[2]=procNameAsBytes;      row[3]=StringUtils.s2b(String.valueOf(i),this.connection);      row[4]=StringUtils.s2b(String.valueOf(java.sql.DatabaseMetaData.procedureColumnIn),this.connection);      row[5]=StringUtils.s2b(String.valueOf(Types.VARCHAR),this.connection);      row[6]=StringUtils.s2b("VARCHAR",this.connection);      row[7]=StringUtils.s2b(Integer.toString(65535),this.connection);      row[8]=StringUtils.s2b(Integer.toString(65535),this.connection);      row[9]=StringUtils.s2b(Integer.toString(0),this.connection);      row[10]=StringUtils.s2b(Integer.toString(10),this.connection);      row[11]=StringUtils.s2b(Integer.toString(java.sql.DatabaseMetaData.procedureNullableUnknown),this.connection);      row[12]=null;      resultRows.add(new ByteArrayRow(row,getExceptionInterceptor()));    }    java.sql.ResultSet paramTypesRs=DatabaseMetaData.buildResultSet(fields,resultRows,this.connection);    convertGetProcedureColumnsToInternalDescriptors(paramTypesRs);  }}  }
class C{  public static Predicates2<String,String> startsWith(){  return STARTS_WITH;}  }
class C{  public boolean isSettingsLoaded(){  return isSettingsLoaded;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static double julianCenturies(Date date){  double jd=calculateJulianDay(date);  double delta=jd - 2451545.0;  return delta / 36525.0;}  }
class C{  public SwaggerAssert satisfiesContract(String expectedLocation){  return satisfiesContract(new SwaggerParser().read(expectedLocation));}  }
class C{  protected static void print(Object o){  System.out.print(o);}  }
class C{  protected void createFieldEditors(){  for (int i=1; i <= NUM_STATUS_COLORS; i++) {    addField(new ColorFieldEditor(getMainColorPrefName(i),"Color " + i,getFieldEditorParent()));    addField(new ComboFieldEditor(getColorPredPrefName(i),"Predicate",ColorPredicate.PREDEFINED_MACROS,getFieldEditorParent()));    addField(new BooleanFieldEditor(getLeafSideBarPrefName(i),"Show Leaf Steps in Side Bar",getFieldEditorParent()));    addField(new BooleanFieldEditor(getAppliesToLeafPrefName(i),"Applies to Leaf Steps Only",getFieldEditorParent()));  }}  }
class C{  public void stopListening(){  try {    sService.stopListening(mHostId,mContext.getUserId());  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }  clearViews();}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.SettingsUser);  MessageResources rsc=getResources(request);  ManagerSettingsForm frm=(ManagerSettingsForm)form;  String op=frm.getOp();  if (op == null) {    op=request.getParameter("op");    if (op == null) {      frm.setOp("List");      op="List";    }  }  if (op.equals(rsc.getMessage("button.cancelUpdateSetting"))) {    frm.reset(mapping,request);    frm.setOp("List");  }  if (op.equals("Edit")) {    Settings s=SettingsDAO.getInstance().get(Long.valueOf(request.getParameter("id")));    frm.setOp("Edit");    frm.setAllowedValues(s.getAllowedValues());    frm.setKey(s.getKey());    frm.setName(s.getDescription());    frm.setDefaultValue(s.getDefaultValue());    frm.setValue(sessionContext.getUser().getProperty(s.getKey(),s.getDefaultValue()));    return mapping.findForward("editManagerSettings");  }  if (op.equals(rsc.getMessage("button.updateSetting"))) {    ActionMessages errors=frm.validate(mapping,request);    if (errors.size() > 0) {      saveErrors(request,errors);      frm.setOp("Edit");    } else {      sessionContext.getUser().setProperty(frm.getKey(),frm.getValue());    }  }  getSettingsList(request);  return mapping.findForward("showManagerSettings");}  }
class C{  private void populateCharacterList(){  dataList=new ArrayList<CharacterBean>();  CharacterBean item=new CharacterBean();  item.setName("Gandalf");  item.setSpecies(speciesPropertyMap.get("Istari"));  dataList.add(item);  item=new CharacterBean();  item.setName("Frodo");  item.setSpecies(speciesPropertyMap.get("Hobbit"));  dataList.add(item);  item=new CharacterBean();  item.setName("Legolas");  item.setSpecies(speciesPropertyMap.get("Elf"));  dataList.add(item);}  }
class C{  @Override public int compareTo(Comparable<?> other){  if (other instanceof Region) {    Region r=(Region)other;    if (this.start < r.start) {      return -1;    } else     if (this.end > r.end) {      return 1;    } else {      return 0;    }  } else   if (other instanceof Long) {    Long l=(Long)other;    if (l > end) {      return -1;    } else     if (l < start) {      return 1;    } else {      return 0;    }  } else {    throw new AssertionError();  }}  }
class C{  Operation(Proc process,LoadedClass loadedClass,long startTimeNanos,int index,Type type){  this.process=process;  this.loadedClass=loadedClass;  this.startTimeNanos=startTimeNanos;  this.index=index;  this.type=type;}  }
class C{  public boolean deleteAll(){  return dbHelper.getWritableDatabase().delete(YouTubePlaylistEntry.TABLE_NAME,"1",null) > 0;}  }
class C{  public void print(char x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).print(x);  flush();}  }
class C{  public void start(final InputStream in) throws SAXException, IOException, ParserConfigurationException {  SAXParserFactory factory=SAXParserFactory.newInstance();  SAXParser saxParser=factory.newSAXParser();  saxParser.parse(in,this);}  }
class C{  public boolean hasMaidenName(){  return hasExtension(MaidenName.class);}  }
class C{  public InlineConstantDescriptor(){  super(IJavaRefactorings.INLINE_CONSTANT);}  }
class C{  private void fetchValue(){  SimpleKey key=this.possibleSimpleKeys.remove(this.flowLevel);  if (key != null) {    this.tokens.add(key.getTokenNumber() - this.tokensTaken,new KeyToken(key.getMark(),key.getMark()));    if (this.flowLevel == 0) {      if (addIndent(key.getColumn())) {        this.tokens.add(key.getTokenNumber() - this.tokensTaken,new BlockMappingStartToken(key.getMark(),key.getMark()));      }    }    this.allowSimpleKey=false;  } else {    if (this.flowLevel == 0) {      if (!this.allowSimpleKey) {        throw new ScannerException(null,null,"mapping values are not allowed here",reader.getMark());      }    }    if (flowLevel == 0) {      if (addIndent(reader.getColumn())) {        Mark mark=reader.getMark();        this.tokens.add(new BlockMappingStartToken(mark,mark));      }    }    allowSimpleKey=flowLevel == 0;    removePossibleSimpleKey();  }  Mark startMark=reader.getMark();  reader.forward();  Mark endMark=reader.getMark();  Token token=new ValueToken(startMark,endMark);  this.tokens.add(token);}  }
class C{  public static DataOutputStream newDataOutputStream(Path self) throws IOException {  return new DataOutputStream(Files.newOutputStream(self));}  }
class C{  public static MOrg updateOrCreateOrganisation(Properties ctx,OrgBean bean,String trxName) throws OperationException, WarehouseAlreadyExistsException {  Integer ad_org_id=bean.getOrgId();  MOrg org=null;  String address1=bean.getAddress1() == null ? "" : bean.getAddress1();  String address2=bean.getAddress2() == null ? "" : bean.getAddress2();  if (ad_org_id == null || ad_org_id == 0) {    org=createOrganisation(ctx,bean.getOrgName(),bean.getDescription(),bean.getIsActive(),trxName);    MLocation location=LocationManager.createLocation(ctx,org.get_ID(),address1,address2,bean.getPostalAddress(),bean.getCity(),0,bean.getCountryId(),trxName);    BPartnerManager.createLinkedBPartner(ctx,org.getAD_Org_ID(),0,org.getName(),"",true,true,false,false,location.getAddress1(),location.getPostal(),location.getCity(),null,location.getC_Country_ID(),trxName);    MBPartner salesRepBPartner=BPartnerManager.createBPartner(ctx,org.get_ID(),org.getLinkedC_BPartner_ID(trxName),org.getName() + " Sales Rep"," ",false,false,true,true,location.getAddress1(),location.getPostal(),location.getCity()," ",location.getC_Country_ID(),trxName);    MUser salesRepUser=new MUser(ctx,0,trxName);    salesRepUser.setC_BPartner_ID(salesRepBPartner.get_ID());    salesRepUser.setName(org.getName() + " " + "Sales Rep");    PoManager.save(salesRepUser);    String warehouseName=org.getName() + " Warehouse";    MWarehouse warehouse=WarehouseManager.createWarehouse(ctx,org.get_ID(),warehouseName,address1,location.getPostal(),location.getCity(),location.getC_Region_ID(),location.getC_Country_ID(),trxName);    String hostUrl="http://www." + org.getName() + ".com/";    StoreManager.createStore(ctx,org.getName(),org.getName() + " pos",org.getAD_Org_ID(),Env.getContextAsInt(ctx,UdiConstants.PRICELIST_CTX_PARAM),salesRepUser.getAD_User_ID(),warehouse.getM_Warehouse_ID(),"pos",hostUrl,trxName);    MOrgInfo orgInfo=org.getInfo();    orgInfo.set_TrxName(trxName);    orgInfo.setC_Location_ID(location.getC_Location_ID());    orgInfo.setM_Warehouse_ID(warehouse.getM_Warehouse_ID());    orgInfo.setReceiptFooterMsg(bean.getReceiptFooterMsg());    PoManager.save(orgInfo);    String cashBookName=org.getName() + " Cash Book";    MAcctSchema[] acctSchema=MAcctSchema.getClientAcctSchema(ctx,org.getAD_Client_ID());    int currencyId=acctSchema[0].getC_Currency_ID();    MCashBook cashBook=CashManager.createCashBook(ctx,org.get_ID(),cashBookName,currencyId,trxName);    MBPartner defCashBPartner=BPartnerManager.saveBPartner(ctx,org.getAD_Org_ID(),0,org.getLinkedC_BPartner_ID(trxName),org.getName() + " Standard Customer"," ",true,false,false,false," "," ",location.getPostal(),location.getC_Region_ID(),location.getCity(),"","","",location.getC_Country_ID(),true,true,trxName);    MBank bank=new MBank(ctx,0,trxName);    bank.setAD_Org_ID(org.getAD_Org_ID());    bank.setName(org.getName() + " Bank");    bank.setRoutingNo("123456789");    bank.setC_Location_ID(orgInfo.getC_Location_ID());    PoManager.save(bank);    MBankAccount bankAccount=new MBankAccount(ctx,0,trxName);    bankAccount.setAD_Org_ID(org.getAD_Org_ID());    bankAccount.setC_Bank_ID(bank.get_ID());    bankAccount.setBankAccountType(MBankAccount.BANKACCOUNTTYPE_Checking);    bankAccount.setC_Currency_ID(currencyId);    bankAccount.setAccountNo("123456789");    bankAccount.setIsDefault(true);    PoManager.save(bankAccount);  } else {    org=editOrganisation(ctx,ad_org_id,bean.getOrgName(),bean.getDescription(),address1,address2,bean.getCity(),bean.getCountryId(),bean.getPostalAddress(),bean.getIsActive(),bean.getReceiptFooterMsg(),trxName);  }  return org;}  }
class C{  private static boolean isLineBreak(final Character c){  return c != null && isLineBreak(c.charValue());}  }
class C{  public void addEllipse(float latPoint,float lonPoint,int w,int h,float rotateAngle,LinkProperties properties) throws IOException {  LinkEllipse.write(latPoint,lonPoint,w,h,rotateAngle,properties,link.dos);}  }
class C{  private void notifyListeners(String key,Object newValue){  List<ModuleCommunicationListener> list;  if (this.listeners == null) {    return;  }  list=this.listeners.get(key);  if (list == null) {    return;  }  for (  ModuleCommunicationListener mcl : list) {    mcl.moduleValueChanged(key,newValue);  }}  }
class C{  public static String stringFor(int m){switch (m) {case cudaAddressModeWrap:    return "cudaAddressModeWrap";case cudaAddressModeClamp:  return "cudaAddressModeClamp";}return "INVALID cudaTextureAddressMode: " + m;}  }
class C{  public Builder backgroundDrawable(Drawable sliderBackgroundDrawable){  this.sliderBackgroundDrawable=sliderBackgroundDrawable;  return this;}  }
class C{  public static boolean isTurboEmoteset(int emoteSet){  return emoteSet == 33 || emoteSet == 42 || emoteSet == 457 || emoteSet == 793 || emoteSet == 19194;}  }
class C{  public static <S extends HasDropHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DropEvent event=new DropEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  private Transform matchURL(Class type) throws Exception {  if (type == URL.class) {    return new URLTransform();  }  return null;}  }
class C{  public byte readByte(){  char c=readChar();  byte x=(byte)(c & 0xff);  return x;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.251 -0500",hash_original_method="B87CA02CD99C2C81A6ADCC153DE8BF7D",hash_generated_method="6E1202B80C2DA1B5A16421696D8F1FD1") public final boolean hasWaiters(ConditionObject condition){  return (((getTaintInt() + condition.getTaintInt())) == 1);}  }
class C{  public boolean isWrapper(){  return isWrapper;}  }
class C{  public static ExpressionsFactory init(){  try {    ExpressionsFactory theExpressionsFactory=(ExpressionsFactory)EPackage.Registry.INSTANCE.getEFactory(ExpressionsPackage.eNS_URI);    if (theExpressionsFactory != null) {      return theExpressionsFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new ExpressionsFactoryImpl();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("DocLine_Allocation[");  sb.append(get_ID()).append(",Amt=").append(getAmtSource()).append(",Discount=").append(getDiscountAmt()).append(",WriteOff=").append(getWriteOffAmt()).append(",OverUnderAmt=").append(getOverUnderAmt()).append(" - C_Payment_ID=").append(m_C_Payment_ID).append(",C_CashLine_ID=").append(m_C_CashLine_ID).append(",C_Invoice_ID=").append(m_C_Invoice_ID).append("]");  return sb.toString();}  }
class C{  public Object nextToken() throws JSONException {  char c;  char q;  StringBuffer sb;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped element");case '<':  throw syntaxError("Misplaced '<'");case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;sb=new StringBuffer();for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return sb.toString();}if (c == '&') {sb.append(nextEntity(c));} else {sb.append(c);}}default :sb=new StringBuffer();for (; ; ) {sb.append(c);c=next();if (Character.isWhitespace(c)) {return sb.toString();}switch (c) {case 0:return sb.toString();case '>':case '/':case '=':case '!':case '?':case '[':case ']':back();return sb.toString();case '<':case '"':case '\'':throw syntaxError("Bad character in a name");}}}}  }
class C{  protected TraceItem_Impl(){  super();}  }
class C{  public String mapInvokeDynamicMethodName(String name,String desc){  return name;}  }
class C{  private void removeCoordinator(CompositeCoordinator coord){synchronized (shutdownSynchronizer_) {synchronized (getLatch(coord.getCoordinatorId().intern())) {      rootToCoordinatorMap_.remove(coord.getCoordinatorId().intern());    }    if (rootToCoordinatorMap_.isEmpty())     shutdownSynchronizer_.notifyAll();  }}  }
class C{  private ITag injectMetaCue(IMetaCue meta,ITag tag){  Output out=new Output(IoBuffer.allocate(1000));  Serializer ser=new Serializer();  ser.serialize(out,"onCuePoint");  ser.serialize(out,meta);  IoBuffer tmpBody=out.buf().flip();  int tmpBodySize=out.buf().limit();  int tmpPreviousTagSize=tag.getPreviousTagSize();  int tmpTimestamp=getTimeInMilliseconds(meta);  return new Tag(IoConstants.TYPE_METADATA,tmpTimestamp,tmpBodySize,tmpBody,tmpPreviousTagSize);}  }
class C{  @SuppressWarnings("resource") @NonNull public static <T>PersistentResource<T> loadRecord(Class<T> loadClass,String id,RequestScope requestScope) throws InvalidObjectIdentifierException {  Preconditions.checkNotNull(loadClass);  Preconditions.checkNotNull(id);  Preconditions.checkNotNull(requestScope);  DataStoreTransaction tx=requestScope.getTransaction();  EntityDictionary dictionary=requestScope.getDictionary();  ObjectEntityCache cache=requestScope.getObjectEntityCache();  @SuppressWarnings("unchecked") T obj=(T)cache.get(dictionary.getJsonAliasFor(loadClass),id);  if (obj == null) {    Optional<FilterExpression> permissionFilter=getPermissionFilterExpression(loadClass,requestScope);    Class<?> idType=dictionary.getIdType(loadClass);    obj=tx.loadObject(loadClass,(Serializable)CoerceUtil.coerce(id,idType),permissionFilter);    if (obj == null) {      throw new InvalidObjectIdentifierException(id,loadClass.getSimpleName());    }  }  PersistentResource<T> resource=new PersistentResource<>(obj,requestScope);  if (!requestScope.getNewResources().contains(resource)) {    resource.checkFieldAwarePermissions(ReadPermission.class);  }  requestScope.queueCommitTrigger(resource);  return resource;}  }
class C{  public SieveRepositoryException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Tween target(float targetValue1,float targetValue2,float targetValue3){  targetValues[0]=targetValue1;  targetValues[1]=targetValue2;  targetValues[2]=targetValue3;  return this;}  }
class C{  static boolean sync(@NonNull final FileOutputStream stream){  try {    stream.getFD().sync();    return true;  } catch (  IOException e) {    LogHelper.e(TAG,e,"IO Error");  }  return false;}  }
class C{  protected boolean canDetectDefaultSystemLibraries(File javaHome,File javaExecutable){  LibraryLocation[] locations=getDefaultLibraryLocations(javaHome);  String version=getVMVersion(javaHome,javaExecutable);  return locations.length > 0 && !version.startsWith("1.1");}  }
class C{  static <T extends Predicate<String>>StringCustomValidator<T> create(T predicate){  return new StringCustomValidatorImpl<>(predicate);}  }
class C{  @Nonnull public String buildUrl(@Nullable String methodName,@Nullable Object... parameters){  StringBuilder sb=new StringBuilder(baseUrl);  if (methodName != null) {    if (!methodName.startsWith("/")) {      sb.append('/');    }    sb.append(StringUtils.removeEnd(methodName,"/"));  }  if (parameters != null) {    for (    Object parameter : parameters) {      if (parameter != null) {        String s=parameter.toString();        if (!s.startsWith("/")) {          sb.append('/');        }        sb.append(s);      }    }  }  return sb.toString();}  }
class C{  public EntryItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void decode(ByteBuffer buffer,int stride,Format fmt) throws IOException {  final int offset=buffer.position();  final int lineSize=((width * bitdepth + 7) / 8) * bytesPerPixel;  byte[] curLine=new byte[lineSize + 1];  byte[] prevLine=new byte[lineSize + 1];  byte[] palLine=(bitdepth < 8) ? new byte[width + 1] : null;  byte[] data=JTranscZlibTemp.uncompress(idat.toByteArray(),(lineSize + 1) * height);  for (int y=0; y < height; y++) {    FastMemory.copy(data,y * (lineSize + 1),curLine,0,(lineSize + 1));    unfilter(curLine,prevLine);    buffer.position(offset + y * stride);switch (colorType) {case COLOR_TRUECOLOR:switch (fmt) {case ABGR:        copyRGBtoABGR(buffer,curLine);      break;case RGBA:    copyRGBtoRGBA(buffer,curLine);  break;case BGRA:copyRGBtoBGRA(buffer,curLine);break;case RGB:copy(buffer,curLine);break;default :throw new UnsupportedOperationException("Unsupported format for this image");}break;case COLOR_TRUEALPHA:switch (fmt) {case ABGR:copyRGBAtoABGR(buffer,curLine);break;case RGBA:copy(buffer,curLine);break;case BGRA:copyRGBAtoBGRA(buffer,curLine);break;case RGB:copyRGBAtoRGB(buffer,curLine);break;default :throw new UnsupportedOperationException("Unsupported format for this image");}break;case COLOR_GREYSCALE:switch (fmt) {case LUMINANCE:case ALPHA:copy(buffer,curLine);break;default :throw new UnsupportedOperationException("Unsupported format for this image");}break;case COLOR_GREYALPHA:switch (fmt) {case LUMINANCE_ALPHA:copy(buffer,curLine);break;default :throw new UnsupportedOperationException("Unsupported format for this image");}break;case COLOR_INDEXED:switch (bitdepth) {case 8:palLine=curLine;break;case 4:expand4(curLine,palLine);break;case 2:expand2(curLine,palLine);break;case 1:expand1(curLine,palLine);break;default :throw new UnsupportedOperationException("Unsupported bitdepth for this image");}switch (fmt) {case ABGR:copyPALtoABGR(buffer,palLine);break;case RGBA:copyPALtoRGBA(buffer,palLine);break;case BGRA:copyPALtoBGRA(buffer,palLine);break;default :throw new UnsupportedOperationException("Unsupported format for this image");}break;default :throw new UnsupportedOperationException("Not yet implemented");}byte[] tmp=curLine;curLine=prevLine;prevLine=tmp;}}  }
class C{  static boolean isRegistered(final Object lhs,final Object rhs){  final Set<Pair<IDKey,IDKey>> registry=getRegistry();  final Pair<IDKey,IDKey> pair=getRegisterPair(lhs,rhs);  final Pair<IDKey,IDKey> swappedPair=Pair.of(pair.getLeft(),pair.getRight());  return registry != null && (registry.contains(pair) || registry.contains(swappedPair));}  }
class C{  public String numFoldsTipText(){  return "Number of folds to use in cross validation.";}  }
class C{  public void append(int inner,int outer,int name,int flags){  byte[] data=get();  int len=data.length;  byte[] newData=new byte[len + 8];  for (int i=2; i < len; ++i)   newData[i]=data[i];  int n=ByteArray.readU16bit(data,0);  ByteArray.write16bit(n + 1,newData,0);  ByteArray.write16bit(inner,newData,len);  ByteArray.write16bit(outer,newData,len + 2);  ByteArray.write16bit(name,newData,len + 4);  ByteArray.write16bit(flags,newData,len + 6);  set(newData);}  }
class C{  public void upper(){  for (int i=0; i < count; i++) {    if (data[i] != null) {      data[i]=data[i].toUpperCase();    }  }}  }
class C{  public OutputBitStream(final File file) throws FileNotFoundException {  this(new FileOutputStream(file),DEFAULT_BUFFER_SIZE);}  }
class C{  public boolean addMessage(String msg,double priority){  checkPriority(priority);  String msgPriorityKey=MESSAGE_PRIORITY_KEY + msg;  final double MIN_PRIORITY=-1.0f;  boolean found=!(store.getDouble(msgPriorityKey,NOT_FOUND) < MIN_PRIORITY);  if (found) {    return false;  }  String binKey=getBinKeyForPriority(priority);  Set<String> msgs=store.getSet(binKey);  if (msgs == null) {    msgs=new HashSet<String>();  }  store.putDouble(msgPriorityKey,priority);  msgs.add(msg);  store.putSet(binKey,msgs);  Intent intent=new Intent();  intent.setAction(NEW_MESSAGE);  mContext.sendBroadcast(intent);  return true;}  }
class C{  public String main_class(){  return manifest.package_name + "." + name;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public void init(int i){  this.secId=new Integer(rng.nextInt(NUM_OF_SECURITIES)).toString();  this.qty=new Double(i).doubleValue();  this.mktValue=new Double(rng.nextDouble() * MAX_PRICE).doubleValue();}  }
class C{  private TransactionServiceImp(String name,StateRecoveryManager recoverymanager,UniqueIdMgr tidmgr,long maxtimeout,boolean checkorphans,int maxActives,boolean single_threaded_2pc,RecoveryLog recoveryLog){  maxNumberOfActiveTransactions_=maxActives;  if (!checkorphans)   otsOverride_=true; else   otsOverride_=false;  initialized_=false;  recoverymanager_=recoverymanager;  tidmgr_=tidmgr;  tidToTransactionMap_=new Hashtable<String,CompositeTransaction>();  shutdownSynchronizer_=new Object();  rootToCoordinatorMap_=new Hashtable<String,CoordinatorImp>();  rootLatches_=new Object[NUMLATCHES];  for (int i=0; i < NUMLATCHES; i++) {    rootLatches_[i]=new Object();  }  maxTimeout_=maxtimeout;  tmUniqueName_=name;  tsListeners_=new Vector<TransactionServicePlugin>();  single_threaded_2pc_=single_threaded_2pc;  this.recoveryLog=recoveryLog;}  }
class C{  public static Number toNumber(String str,Number defaultValue){  try {    if (str.indexOf('.') != -1) {      return new BigDecimal(str);    }    BigInteger bi=new BigInteger(str);    int l=bi.bitLength();    if (l < 32)     return new Integer(bi.intValue());    if (l < 64)     return new Long(bi.longValue());    return bi;  } catch (  Throwable t) {    return defaultValue;  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== PrimerPack ======================\n");  sb.append(this.header.toString());  sb.append(this.localTagEntryBatch.toString());  return sb.toString();}  }
class C{  public void show(){  show(false,null);}  }
class C{  public ClusterOrder run(){  for (DBIDIter iditer=ids.iter(); iditer.valid(); iditer.advance()) {    if (processedIDs.contains(iditer)) {      continue;    }    expandClusterOrder(iditer);  }  LOG.ensureCompleted(progress);  return clusterOrder;}  }
class C{  public void repaint(Rectangle r){  repaint(0,r.x,r.y,r.width,r.height);}  }
class C{  public String putImage(String theFolder,String theImageName,Bitmap theBitmap){  if (theFolder == null || theImageName == null || theBitmap == null)   return null;  this.DEFAULT_APP_IMAGEDATA_DIRECTORY=theFolder;  String mFullPath=setupFullPath(theImageName);  if (!mFullPath.equals("")) {    lastImagePath=mFullPath;    saveBitmap(mFullPath,theBitmap);  }  return mFullPath;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputHeader=null;  WhiteboxRasterInfo[] images=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  double z;  int numClasses;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[][] data;  double noData=-32768;  double[][] classCentres;  double[][] imageMetaData;  long[] numPixelsInEachClass;  int maxIterations=100;  double dist, minDist;  int whichClass;  double minAdjustment=10;  byte initializationMode=0;  long numCellsChanged=0;  long totalNumCells=0;  boolean totalNumCellsCounted=false;  double percentChanged=0;  double percentChangedThreshold=1.0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputHeader=args[1];  numClasses=Integer.parseInt(args[2]);  maxIterations=Integer.parseInt(args[3]);  percentChangedThreshold=Double.parseDouble(args[4]);  if (args[5].toLowerCase().contains("random")) {    initializationMode=1;  } else {    initializationMode=0;  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    images=new WhiteboxRasterInfo[numImages];    imageMetaData=new double[numImages][3];    for (i=0; i < numImages; i++) {      images[i]=new WhiteboxRasterInfo(imageFiles[i]);      if (i == 0) {        nCols=images[i].getNumberColumns();        nRows=images[i].getNumberRows();        noData=images[i].getNoDataValue();      } else {        if (images[i].getNumberColumns() != nCols || images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      imageMetaData[i][0]=images[i].getNoDataValue();      imageMetaData[i][1]=images[i].getMinimumValue();      imageMetaData[i][2]=images[i].getMaximumValue();    }    data=new double[numImages][];    numPixelsInEachClass=new long[numImages];    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.INTEGER,0);    output.setDataScale(DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (initializationMode == 1) {      Random generator=new Random();      double range;      classCentres=new double[numClasses][numImages];      for (a=0; a < numClasses; a++) {        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          classCentres[a][i]=imageMetaData[i][1] + generator.nextDouble() * range;        }      }    } else {      double range, spacing;      classCentres=new double[numClasses][numImages];      for (a=0; a < numClasses; a++) {        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          spacing=range / numClasses;          classCentres[a][i]=imageMetaData[i][1] + spacing * a;        }      }    }    j=0;    whichClass=0;    do {      j++;      updateProgress("Loop " + j,1);      double[][] classCentreData=new double[numClasses][numImages];      numPixelsInEachClass=new long[numClasses];      numCellsChanged=0;      for (row=0; row < nRows; row++) {        for (i=0; i < numImages; i++) {          data[i]=images[i].getRowValues(row);        }        for (col=0; col < nCols; col++) {          if (data[0][col] != noData) {            if (!totalNumCellsCounted) {              totalNumCells++;            }            minDist=Double.POSITIVE_INFINITY;            for (a=0; a < numClasses; a++) {              dist=0;              for (i=0; i < numImages; i++) {                dist+=(data[i][col] - classCentres[a][i]) * (data[i][col] - classCentres[a][i]);              }              if (dist < minDist) {                minDist=dist;                whichClass=a;              }            }            z=output.getValue(row,col);            if ((int)z != whichClass) {              numCellsChanged++;            }            output.setValue(row,col,whichClass);            numPixelsInEachClass[whichClass]++;            for (i=0; i < numImages; i++) {              classCentreData[whichClass][i]+=data[i][col];            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Loop " + j,progress);      }      totalNumCellsCounted=true;      for (a=0; a < numClasses; a++) {        if (numPixelsInEachClass[a] > 0) {          double[] newClassCentre=new double[numImages];          for (i=0; i < numImages; i++) {            newClassCentre[i]=classCentreData[a][i] / numPixelsInEachClass[a];          }          for (i=0; i < numImages; i++) {            classCentres[a][i]=newClassCentre[i];          }        }      }      percentChanged=(double)numCellsChanged / totalNumCells * 100;    } while ((percentChanged > percentChangedThreshold) && (j < maxIterations));    double[] totalDeviations=new double[numClasses];    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        if (data[0][col] != noData) {          whichClass=(int)(output.getValue(row,col));          dist=0;          for (i=0; i < numImages; i++) {            dist+=(data[i][col] - classCentres[whichClass][i]) * (data[i][col] - classCentres[whichClass][i]);          }          totalDeviations[whichClass]+=dist;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Loop " + j,progress);    }    double[] standardDeviations=new double[numClasses];    for (a=0; a < numClasses; a++) {      standardDeviations[a]=Math.sqrt(totalDeviations[a] / (numPixelsInEachClass[a] - 1));    }    DecimalFormat df;    df=new DecimalFormat("0.00");    String retStr="k-Means Classification Report\n\n";    retStr+="     \tCentroid Vector\n";    retStr+="     \t";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + "\t";    }    retStr+="SD\tPixels\t% Area\n";    for (a=0; a < numClasses; a++) {      String str="";      for (i=0; i < numImages; i++) {        str+=df.format(classCentres[a][i]) + "\t";      }      retStr+="Cluster " + a + "\t"+ str+ df.format(standardDeviations[a])+ "\t"+ numPixelsInEachClass[a]+ "\t"+ df.format((double)numPixelsInEachClass[a] / totalNumCells * 100)+ "\n";    }    retStr+="\n";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + " = "+ images[i].getShortHeaderFile()+ "\n";    }    retStr+="\nCluster Centroid Distance Analysis:\n";    for (a=0; a < numClasses; a++) {      retStr+="\tClus. " + a;    }    retStr+="\n";    for (a=0; a < numClasses; a++) {      retStr+="Cluster " + a;      for (int b=0; b < numClasses; b++) {        if (b >= a) {          dist=0;          for (i=0; i < numImages; i++) {            dist+=(classCentres[a][i] - classCentres[b][i]) * (classCentres[a][i] - classCentres[b][i]);          }          retStr+="\t" + df.format(Math.sqrt(dist));        } else {          retStr+="\t";        }      }      retStr+="\n";    }    returnData(retStr);    Dendrogram plot=new Dendrogram(classCentres,numPixelsInEachClass);    returnData(plot);    for (i=0; i < numImages; i++) {      images[i].close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private char[] promptForKeyPass(String alias,String orig,char[] origPass) throws Exception {  if (P12KEYSTORE.equalsIgnoreCase(storetype)) {    return origPass;  } else   if (!token && !protectedPath) {    int count;    for (count=0; count < 3; count++) {      MessageFormat form=new MessageFormat(rb.getString("Enter.key.password.for.alias."));      Object[] source={alias};      System.err.println(form.format(source));      if (orig == null) {        System.err.print(rb.getString(".RETURN.if.same.as.keystore.password."));      } else {        form=new MessageFormat(rb.getString(".RETURN.if.same.as.for.otherAlias."));        Object[] src={orig};        System.err.print(form.format(src));      }      System.err.flush();      char[] entered=Password.readPassword(System.in);      passwords.add(entered);      if (entered == null) {        return origPass;      } else       if (entered.length >= 6) {        System.err.print(rb.getString("Re.enter.new.password."));        char[] passAgain=Password.readPassword(System.in);        passwords.add(passAgain);        if (!Arrays.equals(entered,passAgain)) {          System.err.println(rb.getString("They.don.t.match.Try.again"));          continue;        }        return entered;      } else {        System.err.println(rb.getString("Key.password.is.too.short.must.be.at.least.6.characters"));      }    }    if (count == 3) {      if (command == KEYCLONE) {        throw new Exception(rb.getString("Too.many.failures.Key.entry.not.cloned"));      } else {        throw new Exception(rb.getString("Too.many.failures.key.not.added.to.keystore"));      }    }  }  return null;}  }
class C{  public Wildcards matchOn(Wildcards.Flag... setFlags){  int flags=this.flags;  for (  Wildcards.Flag flag : setFlags)   flags=flag.matchOn(flags);  if (flags == this.flags)   return this; else   return new Wildcards(flags);}  }
class C{  public PluginSortedWrapper(final Element element,final int sortOrder){  super(element,sortOrder);}  }
class C{  public void clearHighlights(){  areas=null;  hasHighlightAreasUpdated=true;}  }
class C{  @Override protected void configure(final HttpSecurity http) throws Exception {  http.csrf().disable();  http.requestCache().requestCache(new NullRequestCache());  http.formLogin().loginProcessingUrl(VideoSvcApi.LOGIN_PATH).successHandler(NO_REDIRECT_SUCCESS_HANDLER).permitAll();  http.logout().logoutUrl(VideoSvcApi.LOGOUT_PATH).logoutSuccessHandler(JSON_LOGOUT_SUCCESS_HANDLER).permitAll();  http.authorizeRequests().anyRequest().authenticated();}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public DefinedParamType(String type){  this.type=type;  this.direction=Optional.empty();}  }
class C{  public static Bitmap resizeBitmap(final Bitmap input,int destWidth,int destHeight,int rotation) throws OutOfMemoryError {  int dstWidth=destWidth;  int dstHeight=destHeight;  final int srcWidth=input.getWidth();  final int srcHeight=input.getHeight();  if (rotation == 90 || rotation == 270) {    dstWidth=destHeight;    dstHeight=destWidth;  }  boolean needsResize=false;  float p;  if ((srcWidth > dstWidth) || (srcHeight > dstHeight)) {    needsResize=true;    if ((srcWidth > srcHeight) && (srcWidth > dstWidth)) {      p=(float)dstWidth / (float)srcWidth;      dstHeight=(int)(srcHeight * p);    } else {      p=(float)dstHeight / (float)srcHeight;      dstWidth=(int)(srcWidth * p);    }  } else {    dstWidth=srcWidth;    dstHeight=srcHeight;  }  if (needsResize || rotation != 0) {    Bitmap output;    if (rotation == 0) {      output=Bitmap.createScaledBitmap(input,dstWidth,dstHeight,true);    } else {      Matrix matrix=new Matrix();      matrix.postScale((float)dstWidth / srcWidth,(float)dstHeight / srcHeight);      matrix.postRotate(rotation);      output=Bitmap.createBitmap(input,0,0,srcWidth,srcHeight,matrix,true);    }    return output;  } else   return input;}  }
class C{  public static void addToInvokeLater(final Runnable runnable){  final Application application=ApplicationManager.getApplication();  if (application.isHeadlessEnvironment() && !application.isUnitTestMode()) {    runnable.run();  } else {    UIUtil.invokeLaterIfNeeded(runnable);  }}  }
class C{  private static Pair<Integer,Long> parseTkhd(ParsableByteArray tkhd){  tkhd.setPosition(ATOM_HEADER_SIZE);  int fullAtom=tkhd.readInt();  int version=parseFullAtomVersion(fullAtom);  tkhd.skip(version == 0 ? 8 : 16);  int trackId=tkhd.readInt();  tkhd.skip(4);  long duration=version == 0 ? tkhd.readUnsignedInt() : tkhd.readUnsignedLongToLong();  return Pair.create(trackId,duration);}  }
class C{  public MongoClient clientForMembers(List<ServerAddress> seedAddresses){  return connections.computeIfAbsent(seedAddresses,null);}  }
class C{  public String globalInfo(){  return "A data generator for the simple 'Mexian Hat' function:\n" + "   y = sin|x| / |x|\n" + "In addition to this simple function, the amplitude can be changed and "+ "gaussian noise can be added.";}  }
class C{  public <A extends Annotation>FilterExpression buildAnyFieldFilterExpression(Class<?> resourceClass,RequestScope requestScope){  Class<? extends Annotation> annotationClass=ReadPermission.class;  ParseTree classPermissions=entityDictionary.getPermissionsForClass(resourceClass,annotationClass);  FilterExpression entityFilterExpression=filterExpressionFromParseTree(classPermissions,resourceClass,requestScope);  if (entityFilterExpression == FALSE_USER_CHECK_EXPRESSION || entityFilterExpression == NO_EVALUATION_EXPRESSION) {    entityFilterExpression=null;  }  FilterExpression allFieldsFilterExpression=entityFilterExpression;  List<String> fields=entityDictionary.getAllFields(resourceClass);  for (  String field : fields) {    ParseTree fieldPermissions=entityDictionary.getPermissionsForField(resourceClass,field,annotationClass);    FilterExpression fieldExpression=filterExpressionFromParseTree(fieldPermissions,resourceClass,requestScope);    if (fieldExpression == null || fieldExpression == FALSE_USER_CHECK_EXPRESSION) {      if (entityFilterExpression == null) {        return null;      }      continue;    }    if (fieldExpression == NO_EVALUATION_EXPRESSION) {      return null;    }    if (allFieldsFilterExpression == null) {      allFieldsFilterExpression=fieldExpression;    } else {      allFieldsFilterExpression=new OrFilterExpression(allFieldsFilterExpression,fieldExpression);    }  }  return allFieldsFilterExpression;}  }
class C{  synchronized public void createEmptyDB(){  mOpenHelper.createEmptyDB(mOpenHelper.getWritableDatabase());}  }
class C{  static void test2() throws Exception {  server=new ServerSocket();  InetSocketAddress sadr=new InetSocketAddress(ia4addr,0);  server.bind(sadr);  dprintln("server bound to " + sadr);  int port=server.getLocalPort();  InetSocketAddress sadr6=new InetSocketAddress(ia6addr,port);  c1=new Socket(ia4addr,port);  try {    dprintln("connecting to " + ia6addr);    c2=new Socket();    c2.connect(sadr6,1000);    throw new RuntimeException("connect to IPv6 address should be refused");  } catch (  IOException e) {  }  server.close();  c1.close();  server=new ServerSocket();  sadr=new InetSocketAddress(ia6addr,0);  dprintln("binding to " + sadr);  server.bind(sadr);  port=server.getLocalPort();  c1=new Socket(ia6addr,port);  try {    c2=new Socket(ia4addr,port);    throw new RuntimeException("connect to IPv4 address should be refused");  } catch (  IOException e) {  }  server.close();  c1.close();  server=new ServerSocket();  sadr=new InetSocketAddress(ia6addr,5200);  server.bind(sadr);  port=server.getLocalPort();  t_assert(port == 5200);  c1=new Socket(ia6addr,port);  try {    c2=new Socket(ia4addr,port);    throw new RuntimeException("connect to IPv4 address should be refused");  } catch (  IOException e) {  }  server.close();  c1.close();  server=new ServerSocket();  sadr=new InetSocketAddress(ia4addr,5200);  server.bind(sadr);  port=server.getLocalPort();  t_assert(port == 5200);  c1=new Socket(ia4addr,port);  try {    c2=new Socket(ia6addr,port);    throw new RuntimeException("connect to IPv6 address should be refused");  } catch (  IOException e) {  }  server.accept().close();  c1.close();  server.close();  System.out.println("Test2: OK");}  }
class C{  protected void createChildrenWidgets(SourcePrinter out,WidgetCreatorContext context){  JSONArray children=ensureChildren(context.getWidgetElement(),true,context.getWidgetId());  if (children != null) {    for (int i=0; i < children.length(); i++) {      JSONObject child=children.optJSONObject(i);      if (isWidget(child)) {        String childWidget=createChildWidget(out,child,context);        boolean childPartialSupport=hasChildPartialSupport(child);        if (childPartialSupport) {          out.println("if (" + getChildWidgetClassName(child) + ".isSupported()){");        }        out.println(context.getWidget() + ".addAndReplaceElement(" + childWidget+ ", "+ EscapeUtils.quote(ViewFactoryUtils.getEnclosingPanelPrefix())+ "+"+ getViewVariable()+ ".getPrefix()+"+ EscapeUtils.quote(child.optString("id"))+ ");");        if (childPartialSupport) {          out.println("}");        }      }    }  }}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (dataProvider != null) {    JLabel qrCodeLabel=dataProvider.getURIImage();    final Clipboard clipboard=qrCodeLabel.getTopLevelAncestor().getToolkit().getSystemClipboard();    TransferHandler handler=qrCodeLabel.getTransferHandler();    handler.exportToClipboard(qrCodeLabel,clipboard,TransferHandler.COPY);  }}  }
class C{  public boolean add(Object obj,boolean allowRepeated){  add((Coordinate)obj,allowRepeated);  return true;}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (resultCode == Activity.RESULT_OK) {    if (requestCode == DOWNLOAD_IMAGE_REQUEST) {      Intent intent=makeGalleryIntent(data.getDataString());      startActivity(intent);    }  } else   if (resultCode == Activity.RESULT_CANCELED)   UiUtils.showToast(this,"failed to download " + getUrl().toString());  mProcessButtonClick=true;}  }
class C{  protected Component wrapViewComponent(View p){  JComponent c=p.getComponent();  if (getModel() != null) {    LinkedList<Action> toolBarActions=new LinkedList<Action>();    int id=0;    for (    JToolBar tb : new ReversedList<JToolBar>(getModel().createToolBars(this,p))) {      id++;      JPanel panel=new JPanel(new BorderLayout());      panel.add(tb,BorderLayout.NORTH);      panel.add(c,BorderLayout.CENTER);      c=panel;      PreferencesUtil.installToolBarPrefsHandler(prefs,"toolbar." + id,tb);      toolBarActions.addFirst(new ToggleVisibleAction(tb,tb.getName()));    }    p.getComponent().putClientProperty("toolBarActions",toolBarActions);  }  return c;}  }
class C{  public void addItem(double value,double lower,double upper,Comparable rowKey,Comparable columnKey){  addItem(new Double(value),new Double(lower),new Double(upper),rowKey,columnKey);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public ColorList clusterSort(AccessCriteria clusterCriteria,AccessCriteria subClusterCriteria,int numClusters,boolean isReversed){  ArrayList<TColor> sorted=new ArrayList<TColor>(colors);  Collections.sort(sorted,clusterCriteria);  Collections.reverse(sorted);  ArrayList<TColor> clusters=new ArrayList<TColor>();  float d=1;  int i=0;  int num=sorted.size();  for (int j=0; j < num; j++) {    ReadonlyTColor c=sorted.get(j);    if (c.getComponentValue(clusterCriteria) < d) {      ArrayList<TColor> slice=new ArrayList<TColor>();      slice.addAll(sorted.subList(i,j));      Collections.sort(slice,subClusterCriteria);      clusters.addAll(slice);      d-=1.0f / numClusters;      i=j;    }  }  ArrayList<TColor> slice=new ArrayList<TColor>();  slice.addAll(sorted.subList(i,sorted.size()));  Collections.sort(slice,subClusterCriteria);  clusters.addAll(slice);  if (isReversed) {    Collections.reverse(clusters);  }  colors=clusters;  return this;}  }
class C{  private void deleteFile(){  if (sLogger.isActivated()) {    sLogger.debug("Delete incomplete received file");  }  try {    getContent().deleteFile();  } catch (  IOException e) {    if (sLogger.isActivated()) {      sLogger.error("Can't delete received file",e);    }  }}  }
class C{  private void parseEntityReference() throws IOException {  int pos=strpos;  if ((ch=in.read()) == '#') {    int n=0;    ch=in.read();    if (((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z'))) {      addString('#');    } else {      while ((ch >= '0') && (ch <= '9')) {        n=(n * 10) + ch - '0';        ch=in.read();      }      if ((ch == ';') || (ch == '\n')) {        ch=in.read();      }      addString(n);      return;    }  }  while (true) {switch (ch) {case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':case '.':case '-':      addString(ch);    ch=in.read();  break;default :if (strpos == pos) {  addString('&');  return;}String nm=getString(pos);Entity ent=dtd.getEntity(nm);if (ent == null) {error("undef.entref" + nm);return;}if ((ch == ';') || (ch == '\n')) {ch=in.read();}char data[]=ent.getData();for (int i=0; i < data.length; i++) {addString(data[i]);}return;}}}  }
class C{  public Attribute lock(){  locked=true;  return this;}  }
class C{  public void endDrawing(GL10 gl){  gl.glDisable(GL10.GL_ALPHA_TEST);  gl.glMatrixMode(GL10.GL_PROJECTION);  gl.glPopMatrix();  gl.glMatrixMode(GL10.GL_MODELVIEW);  gl.glPopMatrix();  gl.glDisable(GL10.GL_TEXTURE_2D);  gl.glColor4x(FixedPoint.ONE,FixedPoint.ONE,FixedPoint.ONE,FixedPoint.ONE);}  }
class C{  Value locateParentForNamed(long id,String name,boolean traverseProto) throws PlayerDebugException {  StringBuilder sb=new StringBuilder();  Variable var=null;  Value val=null;  try {    var=memberNamed(id,name);    while (var == null && traverseProto) {      Variable proto=memberNamed(id,"__proto__");      sb.append("__proto__");      if (proto == null)       traverseProto=false; else {        id=proto.getValue().getId();        var=memberNamed(id,name);        if (var == null)         sb.append('.');      }    }  } catch (  NoSuchVariableException nsv) {  }catch (  NullPointerException npe) {  }  if (var != null) {    pushName(sb.toString());    val=getSession().getWorkerSession(m_isolateId).getValue(id);  }  return val;}  }
class C{  @Override public DeviceInfo deviceInfo(){  return DeviceInfo.getDeviceInfo();}  }
class C{  public void testMid() throws Exception {  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A:B",new String[]{"A:B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A::B",new String[]{"A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1.2",new String[]{"1.2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A.B",new String[]{"A.B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1..2",new String[]{"1","2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A..B",new String[]{"A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1,2",new String[]{"1,2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1,,2",new String[]{"1","2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A.:B",new String[]{"A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A:.B",new String[]{"A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1,.2",new String[]{"1","2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1.,2",new String[]{"1","2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A:B_A:B",new String[]{"A:B_A:B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A:B_A::B",new String[]{"A:B_A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1.2_1.2",new String[]{"1.2_1.2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A.B_A.B",new String[]{"A.B_A.B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1.2_1..2",new String[]{"1.2_1","2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"A.B_A..B",new String[]{"A.B_A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1,2_1,2",new String[]{"1,2_1,2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"1,2_1,,2",new String[]{"1,2_1","2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"C_A.:B",new String[]{"C_A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"C_A:.B",new String[]{"C_A","B"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"3_1,.2",new String[]{"3_1","2"});  BaseTokenStreamTestCase.assertAnalyzesTo(a,"3_1.,2",new String[]{"3_1","2"});}  }
class C{  private BigDecimal audit(){  if (intCompact == INFLATED) {    if (intVal == null) {      print("audit",this);      throw new AssertionError("null intVal");    }    if (precision > 0 && precision != bigDigitLength(intVal)) {      print("audit",this);      throw new AssertionError("precision mismatch");    }  } else {    if (intVal != null) {      long val=intVal.longValue();      if (val != intCompact) {        print("audit",this);        throw new AssertionError("Inconsistent state, intCompact=" + intCompact + "\t intVal="+ val);      }    }    if (precision > 0 && precision != longDigitLength(intCompact)) {      print("audit",this);      throw new AssertionError("precision mismatch");    }  }  return this;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.INT_LITERAL__VALUE:    setValue((Integer)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected static List<String> expandArgFiles(final List<File> files){  final List<String> content=new ArrayList<String>();  for (  final File file : files) {    try {      content.addAll(PluginUtil.readFile(file));    } catch (    final IOException exc) {      throw new RuntimeException("Could not open file: " + file.getAbsolutePath(),exc);    }  }  return content;}  }
class C{  public int adjustForMetaData(int pages,Address begin){  if (getRegionStart(begin).plus(metaDataPagesPerRegion << LOG_BYTES_IN_PAGE).EQ(begin)) {    pages+=metaDataPagesPerRegion;  }  return pages;}  }
class C{  public static boolean isDB2(DbConnection conn) throws IeciTdException {  if (conn.getEngine() == DbEngine.DB2)   return true;  return false;}  }
class C{  public static double[] linearEquation(double[][] a,double[] b){  if (a[0][0] * a[1][1] - a[0][1] * a[1][0] == 0)   return null;  double[] r=new double[2];  r[0]=(b[0] * a[1][1] - b[1] * a[0][1]) / (a[0][0] * a[1][1] - a[0][1] * a[1][0]);  r[1]=(b[1] * a[0][0] - b[0] * a[1][0]) / (a[0][0] * a[1][1] - a[0][1] * a[1][0]);  return r;}  }
class C{  @Override public P readPage(int pageID){  try {    countRead();    long offset=((long)(header.getReservedPages() + pageID)) * (long)pageSize;    byte[] buffer=new byte[pageSize];    file.seek(offset);    file.read(buffer);    return byteArrayToPage(buffer);  } catch (  IOException e) {    throw new RuntimeException("IOException occurred during reading of page " + pageID + "\n",e);  }}  }
class C{  public void writeFacilityCoordinates(String file){  log.info("Writing facility coordinates to " + file);  BufferedWriter bw=IOUtils.getBufferedWriter(file);  try {    bw.write("FacilityId,Long,Lat,Type");    bw.newLine();    for (    Id<ActivityFacility> id : this.landuse.getFacilities().keySet()) {      ActivityFacility facility=this.landuse.getFacilities().get(id);      bw.write(id.toString());      bw.write(",");      bw.write(String.format("%.0f,%.0f\n",facility.getCoord().getX(),facility.getCoord().getY()));    }  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + file);  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + file);    }  }  log.info("Done writing coordinates to file.");}  }
class C{  private static void checkEquals(double actual,double expected,String label,double eps){  if (Math.abs(expected - actual) <= eps * Math.max(expected,actual)) {    System.out.println("PASS: " + label + ": Expected "+ expected+ " and you gave "+ actual);  } else {    System.out.println("FAIL: " + label + ": Expected "+ expected+ " and you gave "+ actual);  }}  }
class C{  public boolean isEmpty(){  return firstEvents.isEmpty();}  }
class C{  public List<Order> fetchOrders(int startIndex){  try {    Thread.sleep(50);  } catch (  InterruptedException e) {    e.printStackTrace();  }  return fetchOrders(startIndex,45);}  }
class C{  public static boolean wasAccessed(){  return wasAccessed;}  }
class C{  public PLViewParameters(){  super();  this.reset();}  }
class C{  static private boolean isInsideCharClass(String s,int pos){  boolean openBracketFound=false;  boolean closeBracketFound=false;  String s2=s.substring(0,pos);  int posOpen=pos;  while ((posOpen=s2.lastIndexOf('[',posOpen - 1)) != -1) {    if (!isEscapedChar(s2,posOpen)) {      openBracketFound=true;      break;    }  }  if (openBracketFound) {    String s3=s.substring(posOpen,pos);    int posClose=-1;    while ((posClose=s3.indexOf(']',posClose + 1)) != -1) {      if (!isEscapedChar(s3,posClose)) {        closeBracketFound=true;        break;      }    }  }  return openBracketFound && !closeBracketFound;}  }
class C{  public IndexedAccessExpression createIndexedAccessExpression(){  IndexedAccessExpressionImpl indexedAccessExpression=new IndexedAccessExpressionImpl();  return indexedAccessExpression;}  }
class C{  @Override public void putAll(Map<? extends Integer,? extends Long> map){  Iterator<? extends Entry<? extends Integer,? extends Long>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Integer,? extends Long> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public void ping(){  checkSocket();  this.socket.sendTextMessage("ping");}  }
class C{  @SuppressWarnings("unchecked") @Override public void initGui(){  Keyboard.enableRepeatEvents(true);  buttonList.clear();  buttonList.add(new GuiButton(0,width / 2 - 100,60,"Change Key"));  buttonList.add(new GuiButton(1,width / 2 - 100,height / 4 + 72,"Save"));  buttonList.add(new GuiButton(2,width / 2 - 100,height / 4 + 96,"Cancel"));  commandBox=new GuiTextField(0,fontRendererObj,width / 2 - 100,100,200,20);  commandBox.setMaxStringLength(128);  commandBox.setFocused(true);  if (entry != null)   commandBox.setText(entry.getValue());}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (cv != null) {    return cv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  private void validateImageWidth(){  BufferedImage oldBufferedImage=bufferedImage;  int height=oldBufferedImage.getHeight();  int width=oldBufferedImage.getWidth();  if (width % 8 != 0) {    int newWidth=(width / 8 + 1) * 8;    BufferedImage newBufferedImage=new BufferedImage(newWidth,height,BufferedImage.TYPE_INT_ARGB);    Graphics2D g=newBufferedImage.createGraphics();    g.drawImage(oldBufferedImage,0,0,null);    g.dispose();    setBufferedImage(newBufferedImage);    init();  }}  }
class C{  public ObjectVector(int blocksize,int increaseSize){  m_blocksize=increaseSize;  m_mapSize=blocksize;  m_map=new Object[blocksize];}  }
class C{  String sendCommandToPython(String cmd){  String output="";  LOG.debug("Sending : \n" + (cmd.length() > 200 ? cmd.substring(0,200) + "..." : cmd));  try {    output=process.sendAndGetResult(cmd);  } catch (  IOException e) {    LOG.error("Error when sending commands to python process",e);  }  LOG.debug("Got : \n" + output);  return output;}  }
class C{  public static int valueOf(String name){  for (int opcode=0; opcode < nameArray.length; ++opcode) {    if (name.equalsIgnoreCase(nameArray[opcode])) {      return opcode;    }  }  throw new IllegalArgumentException("No opcode for " + name);}  }
class C{  public void testLayout2(){  final GridBagLayout layoutManager=new GridBagLayout();  final JPanel panel=new JPanel(layoutManager);  final JButton button1=new JButton();  button1.setMinimumSize(new Dimension(9,7));  button1.setPreferredSize(new Dimension(50,10));  final JButton button2=new JButton();  button2.setMinimumSize(new Dimension(15,6));  button2.setPreferredSize(new Dimension(50,10));  GridBagConverter converter=new GridBagConverter();  final GridConstraints button1Constraints=new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK,null,null,null,0);  converter.addComponent(button1,button1Constraints);  final GridConstraints button2Constraints=new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0);  converter.addComponent(button2,button2Constraints);  applyConversionResults(panel,converter);  assertEquals(20,panel.getPreferredSize().height);  assertEquals(50,panel.getPreferredSize().width);  assertEquals(17,panel.getMinimumSize().height);  assertEquals(50,panel.getMinimumSize().width);  panel.setSize(new Dimension(500,100));  panel.doLayout();  assertEquals(50,button1.getHeight());  assertEquals(50,button2.getHeight());}  }
class C{  public void updateComponentDataMemberDefaultAccess(String strAccess) throws SecurityException, ApplicationException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update component setting");  Element scope=_getRootElement("component");  if (StringUtil.isEmpty(strAccess)) {    scope.setAttribute("data-member-default-access","");  } else {    scope.setAttribute("data-member-default-access",ComponentUtil.toStringAccess(ComponentUtil.toIntAccess(strAccess)));  }}  }
class C{  public ComboBox(ListModel<T> model){  super(model);  super.setUIID("ComboBox");  ((DefaultListCellRenderer)super.getRenderer()).setShowNumbers(false);  setInputOnFocus(false);  setIsScrollVisible(false);  setFixedSelection(FIXED_NONE_CYCLIC);  ListCellRenderer<T> r=getRenderer();  if (r instanceof Component) {    Component c=(Component)getRenderer();    c.setUIID("ComboBoxItem");  }  Component c=getRenderer().getListFocusComponent(this);  if (c != null) {    c.setUIID("ComboBoxFocus");  }}  }
class C{  public static Set notifyListeners(Set cacheOpReceivers,Set adjunctRecipients,FilterRoutingInfo filterRoutingInfo,PartitionedRegion r,EntryEventImpl event,DirectReplyProcessor processor){  DestroyMessage msg=new DestroyMessage(Collections.EMPTY_SET,true,r.getPRId(),processor,event,null);  msg.versionTag=event.getVersionTag();  return msg.relayToListeners(cacheOpReceivers,adjunctRecipients,filterRoutingInfo,event,r,processor);}  }
class C{  @Override public void run(){  amIActive=true;  try {    String inputFilesString=null;    String sagaHeaderFile=null;    String sagaDataFile=null;    String whiteboxHeaderFile=null;    String whiteboxDataFile=null;    WhiteboxRaster output=null;    int i=0;    int row, col, rows, cols;    String[] imageFiles;    int numImages=0;    double noData=-32768;    int progress=0;    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      sagaHeaderFile=whiteboxHeaderFile.replace(".dep",".sgrd");      sagaDataFile=whiteboxHeaderFile.replace(".dep",".sdat");      (new File(sagaHeaderFile)).delete();      (new File(sagaDataFile)).delete();      WhiteboxRaster.DataType dataType;      if (wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        dataType=WhiteboxRaster.DataType.DOUBLE;      } else       if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else       if (wbr.getDataType() == WhiteboxRaster.DataType.INTEGER) {        dataType=WhiteboxRaster.DataType.INTEGER;      } else {        dataType=WhiteboxRaster.DataType.BYTE;      }      output=new WhiteboxRaster(whiteboxHeaderFile.replace(".dep","_temp.dep"),"rw",whiteboxHeaderFile,dataType,noData);      output.setNoDataValue(noData);      whiteboxDataFile=whiteboxHeaderFile.replace(".dep","_temp.tas");      double[] data=null;      for (row=0; row < rows; row++) {        data=wbr.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(rows - row - 1,col,data[col]);          } else {            output.setValue(rows - row - 1,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      output.close();      File dataFile=new File(whiteboxDataFile);      File sagaFile=new File(sagaDataFile);      dataFile.renameTo(sagaFile);      if (!createHeaderFile(wbr,sagaHeaderFile)) {        showFeedback("SAGA header file was not written properly. " + "Tool failed to export");        return;      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void ok(){  cancelClicked=false;  setVisible(false);}  }
class C{  @Override public ServiceExceptionClosed rethrow(String msg){  return new ServiceExceptionClosed(msg,this);}  }
class C{  public double compute(Collection<? extends Number> dataset){  return computeInPlace(Doubles.toArray(dataset));}  }
class C{  public TreeModelEvent(Object source,Object[] path){  this(source,(path == null) ? null : new TreePath(path));}  }
class C{  public void add(NumberSetParameter numberSetParameter){  parameters.add(numberSetParameter);}  }
class C{  public String mapFieldName(String owner,String name,String desc){  return name;}  }
class C{  protected FileObject wrap(FileObject fileObject){  return fileObject;}  }
class C{  @Override public synchronized void clear(){  super.clear();  firePvChanged(new PvChangeEvent(this,null,null,PvChangeEvent.PV_CLEARED));}  }
class C{  private static void registerJavaContext(ContributionContextTypeRegistry registry,String id,TemplateContextType parent){  TemplateContextType contextType=registry.getContextType(id);  Iterator<TemplateVariableResolver> iter=parent.resolvers();  while (iter.hasNext())   contextType.addResolver(iter.next());}  }
class C{  private static SuperReflect on(Method method,Object object,Object... args) throws SuperReflectException {  try {    accessible(method);    if (method.getReturnType() == void.class) {      method.invoke(object,args);      return on(object);    } else {      return on(method.invoke(object,args));    }  } catch (  Exception e) {    throw new SuperReflectException(e);  }}  }
class C{  public Builder readPartitions(final List<String> readPartitions){  this.readPartitions.addAll(readPartitions);  return this;}  }
class C{  public static void initCore(ProfilerSection section){  ProfilerSection section1=section.section("CoreJava");  section1.start("Init");  for (  Object core : coreObjects) {    try {      core.getClass().getDeclaredMethod("init").invoke(core);    } catch (    Throwable e) {    }  }  section1.stop("Init");}  }
class C{  @Override public String toString(){  return getDescriptor();}  }
class C{  public void addReadReg(final String reg){  m_readRegs.add(Preconditions.checkNotNull(reg,"Error: Register argument can not be null"));}  }
class C{  public static void write(RegressionDataSet data,OutputStream os){  PrintWriter writer=new PrintWriter(os);  for (int i=0; i < data.getSampleSize(); i++) {    double pred=data.getTargetValue(i);    Vec vals=data.getDataPoint(i).getNumericalValues();    writer.write(pred + " ");    for (    IndexValue iv : vals) {      double val=iv.getValue();      if (Math.rint(val) == val)       writer.write((iv.getIndex() + 1) + ":" + (long)val+ " "); else       writer.write((iv.getIndex() + 1) + ":" + val+ " ");    }    writer.write("\n");  }  writer.flush();  writer.close();}  }
class C{  private ResultPoint correctTopRightRectangular(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimensionTop,int dimensionRight){  float corr=distance(bottomLeft,bottomRight) / (float)dimensionTop;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimensionRight;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(dimensionTop - transitionsBetween(topLeft,c2).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c2).getTransitions());  if (l1 <= l2) {    return c1;  }  return c2;}  }
class C{  public NodeSetDTM(int node,DTMManager dtmManager){  super();  m_manager=dtmManager;  addNode(node);}  }
class C{  public static @EnsuresNonNull("#1") <T extends Object>T[][][][] castNonNullDeep(T[][][][] arr){  return (T[][][][])castNonNullArray(arr);}  }
class C{  public void resizeWindow(final int width,final int height){  try {    TestLogging.logWebStep("Resize browser window to width " + width + " height "+ height,false);    Dimension size=new Dimension(width,height);    driver.manage().window().setPosition(new Point(0,0));    driver.manage().window().setSize(size);  } catch (  Exception ex) {  }}  }
class C{  FocusRingRenderer(Invalidator invalidator,Paint ringPaint,float enterDurationMillis,float exitDurationMillis){  mInvalidator=invalidator;  mRingPaint=ringPaint;  mEnterDurationMillis=enterDurationMillis;  mExitDurationMillis=exitDurationMillis;  mEnterOpacityCurve=UnitCurves.FAST_OUT_SLOW_IN;  mExitOpacityCurve=UnitCurves.FAST_OUT_LINEAR_IN;  mHardExitOpacityCurve=UnitCurves.FAST_OUT_LINEAR_IN;  mRingRadius=new DampedSpring();}  }
class C{  public static String normalizeInt(String value){  return normalizeIntegerValue(value,"-2147483648","2147483647");}  }
class C{  public void put(final K key,final V value){  final Collection<V> c=putBase(key);  try {    c.add(value);  } catch (  final UnsupportedOperationException e) {    final Collection<V> temp=mFactory.createCollection();    temp.addAll(c);    temp.add(value);    mMap.put(key,temp);  }}  }
class C{  public synchronized long size(){  return size;}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  if (mPreview != null) {    mPreview.release();  }}  }
class C{  public void printStackTrace(java.io.PrintWriter s){  if (s == null) {    s=new java.io.PrintWriter(System.err,true);  }  try {    String locInfo=getLocationAsString();    if (null != locInfo) {      s.println(locInfo);    }    super.printStackTrace(s);  } catch (  Throwable e) {  }}  }
class C{  public void addNotificationListener(ObjectName name,NotificationListener listener,NotificationFilter filter,Object handback) throws InstanceNotFoundException {  mbsInterceptor.addNotificationListener(cloneObjectName(name),listener,filter,handback);}  }
class C{  public StorageEntity createStorageEntity(){  return createStorageEntity("StorageTest" + AbstractDaoTest.getRandomSuffix());}  }
class C{  public SearchQueryBinding(TupleSet ts,String field){  this(ts,field,new PrefixSearchTupleSet());}  }
class C{  public int size(){  return creatures.size();}  }
class C{  private int nextHost(int currHostIdx,boolean vouchForPrimaryHost){  int nextHostIdx=(currHostIdx + 1) % this.hostList.size();  if (isPrimaryHostIndex(nextHostIdx) && isConnected() && !vouchForPrimaryHost&& this.enableFallBackToPrimaryHost&& !readyToFallBackToPrimaryHost()) {    nextHostIdx=nextHost(nextHostIdx,vouchForPrimaryHost);  }  return nextHostIdx;}  }
class C{  public DelegatingServletInputStream(InputStream sourceStream){  this.sourceStream=sourceStream;}  }
class C{  private void createNewToAllocMap(){  newToAllocNodeMap=HashBiMap.create();  allAllocNodes=new LinkedHashSet<AllocNode>();  Map<SootClass,Integer> nodeCount=new LinkedHashMap<SootClass,Integer>();  int realSize=0;  for (  AllocNode node : ptsProvider.getAllocNodes()) {    if (!(node instanceof InsensitiveAllocNode)) {      logger.error("Found non-insensitive node in ptsProvider.getAllocNodes()");      System.exit(1);    }    InsensitiveAllocNode insNode=(InsensitiveAllocNode)node;    newToAllocNodeMap.put(node.getNewExpr(),insNode);    realSize++;    allAllocNodes.add(node);    for (    Map.Entry<Context,ObjectSensitiveAllocNode> entry : insNode.getContextNodeMap().entrySet()) {      allAllocNodes.add(entry.getValue());    }  }  System.out.println("Alloc node size (insensitive objects): " + realSize);}  }
class C{  @SuppressWarnings("unchecked") private boolean restoreExtracted(ServiceNode service){  boolean found=false;  JoinGroupNode g=(JoinGroupNode)service.getGraphPattern();  final List<BOp> extractedList=(List<BOp>)service.annotations().get(LabelServiceExtractOptimizer.EXTRACTOR_ANNOTATION);  if (extractedList != null && !extractedList.isEmpty()) {    for (    BOp st : extractedList) {      g.addArg(st);    }    found=true;  }  service.annotations().remove(LabelServiceExtractOptimizer.EXTRACTOR_ANNOTATION);  return found;}  }
class C{  public Group findByName(@Nonnull String name){  String prefix="x";  NamedParameter parameter=new NamedParameter(Group.PROPERTY_NAME,"name",name);  StringBuilder sb=new StringBuilder();  sb.append(buildQlSelect(prefix)).append(startWhere()).append(buildWhereClause(Operation.EQUALS,prefix,parameter));  return super.findOneWithJQL(sb.toString(),parameter);}  }
class C{  public static void execute(ExecutablePool pool,String cqName){  AbstractOp op=new CloseCQOpImpl(cqName);  pool.executeOnAllQueueServers(op);}  }
class C{  private void generateJspFragment(Node n,String tagHandlerVar) throws JasperException {  FragmentHelperClass.Fragment fragment=fragmentHelperClass.openFragment(n,tagHandlerVar,methodNesting);  ServletWriter outSave=out;  out=fragment.getGenBuffer().getOut();  String tmpParent=parent;  parent="_jspx_parent";  boolean isSimpleTagParentSave=isSimpleTagParent;  isSimpleTagParent=true;  boolean tmpIsFragment=isFragment;  isFragment=true;  String pushBodyCountVarSave=pushBodyCountVar;  if (pushBodyCountVar != null) {    pushBodyCountVar="_jspx_push_body_count";  }  boolean genBytesSave=genBytes;  genBytes=false;  visitBody(n);  genBytes=genBytesSave;  out=outSave;  parent=tmpParent;  isSimpleTagParent=isSimpleTagParentSave;  isFragment=tmpIsFragment;  pushBodyCountVar=pushBodyCountVarSave;  fragmentHelperClass.closeFragment(fragment,methodNesting);  out.print("new " + fragmentHelperClass.getClassName() + "( "+ fragment.getId()+ ", _jspx_page_context, "+ tagHandlerVar+ ", "+ pushBodyCountVar+ ")");}  }
class C{  public void addHistogram(String histStr){  if (histStr.length() > 0) {    final String[] values=histStr.split("\t");    for (int i=values.length - 1; i >= 0; i--) {      final long val=Long.parseLong(values[i]);      if (val > 0) {        increment(i,val);      }    }  }}  }
class C{  @Inline private boolean testAndMark(ObjectReference object){  byte oldValue, markBits, newValue;  oldValue=VM.objectModel.readAvailableByte(object);  markBits=(byte)(oldValue & MARK_COUNT_MASK);  if (markBits == markState)   return false;  newValue=(byte)((oldValue & ~MARK_COUNT_MASK) | markState);  if (HeaderByte.NEEDS_UNLOGGED_BIT)   newValue|=HeaderByte.UNLOGGED_BIT;  VM.objectModel.writeAvailableByte(object,newValue);  return true;}  }
class C{  org.jdom2.Element store(){  org.jdom2.Element e=new org.jdom2.Element("consist");  e.setAttribute("id",getId());  e.setAttribute("consistNumber",getConsistNumber());  e.setAttribute("roadNumber",getRoadNumber());  e.setAttribute("roadName",getRoadName());  e.setAttribute("model",getModel());  e.setAttribute("comment",getComment());  org.jdom2.Element loco1=new org.jdom2.Element("loco");  loco1.setAttribute("locoName","lead");  loco1.setAttribute("dccLocoAddress",getLoco1DccAddress());  loco1.setAttribute("longAddress",isLoco1LongAddress() ? "yes" : "no");  loco1.setAttribute("locoDir",getLoco1Direction());  e.addContent(loco1);  org.jdom2.Element loco2=new org.jdom2.Element("loco");  loco2.setAttribute("locoName","rear");  loco2.setAttribute("dccLocoAddress",getLoco2DccAddress());  loco2.setAttribute("longAddress",isLoco2LongAddress() ? "yes" : "no");  loco2.setAttribute("locoDir",getLoco2Direction());  e.addContent(loco2);  if (!getLoco3DccAddress().equals("")) {    org.jdom2.Element loco3=new org.jdom2.Element("loco");    loco3.setAttribute("locoName","mid");    loco3.setAttribute("locoMidNumber","1");    loco3.setAttribute("dccLocoAddress",getLoco3DccAddress());    loco3.setAttribute("longAddress",isLoco3LongAddress() ? "yes" : "no");    loco3.setAttribute("locoDir",getLoco3Direction());    e.addContent(loco3);  }  if (!getLoco4DccAddress().equals("")) {    org.jdom2.Element loco4=new org.jdom2.Element("loco");    loco4.setAttribute("locoName","mid");    loco4.setAttribute("locoMidNumber","2");    loco4.setAttribute("dccLocoAddress",getLoco4DccAddress());    loco4.setAttribute("longAddress",isLoco4LongAddress() ? "yes" : "no");    loco4.setAttribute("locoDir",getLoco4Direction());    e.addContent(loco4);  }  if (!getLoco5DccAddress().equals("")) {    org.jdom2.Element loco5=new org.jdom2.Element("loco");    loco5.setAttribute("locoName","mid");    loco5.setAttribute("locoMidNumber","3");    loco5.setAttribute("dccLocoAddress",getLoco5DccAddress());    loco5.setAttribute("longAddress",isLoco5LongAddress() ? "yes" : "no");    loco5.setAttribute("locoDir",getLoco5Direction());    e.addContent(loco5);  }  if (!getLoco6DccAddress().equals("")) {    org.jdom2.Element loco6=new org.jdom2.Element("loco");    loco6.setAttribute("locoName","mid");    loco6.setAttribute("locoMidNumber","4");    loco6.setAttribute("dccLocoAddress",getLoco6DccAddress());    loco6.setAttribute("longAddress",isLoco6LongAddress() ? "yes" : "no");    loco6.setAttribute("locoDir",getLoco6Direction());    e.addContent(loco6);  }  return e;}  }
class C{  public static boolean renameHost(String host,String newHost){  Computer computer=ComputerHandler.getInstance().find(host);  return computer != null && computer.setHostname(newHost);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  @Deprecated public void initLogger(){  System.getProperties().put("log4j.configuration","config/log4j.properties");}  }
class C{  public boolean handleTouch(MotionEvent event){  int action=event.getAction();  if (mRenderer != null && action == MotionEvent.ACTION_MOVE) {    if (oldX >= 0 || oldY >= 0) {      float newX=event.getX(0);      float newY=event.getY(0);      if (event.getPointerCount() > 1 && (oldX2 >= 0 || oldY2 >= 0) && mRenderer.isZoomEnabled()) {        float newX2=event.getX(1);        float newY2=event.getY(1);        float newDeltaX=Math.abs(newX - newX2);        float newDeltaY=Math.abs(newY - newY2);        float oldDeltaX=Math.abs(oldX - oldX2);        float oldDeltaY=Math.abs(oldY - oldY2);        float zoomRate=1;        float tan1=Math.abs(newY - oldY) / Math.abs(newX - oldX);        float tan2=Math.abs(newY2 - oldY2) / Math.abs(newX2 - oldX2);        if (tan1 <= 0.25 && tan2 <= 0.25) {          zoomRate=newDeltaX / oldDeltaX;          applyZoom(zoomRate,Zoom.ZOOM_AXIS_X);        } else         if (tan1 >= 3.73 && tan2 >= 3.73) {          zoomRate=newDeltaY / oldDeltaY;          applyZoom(zoomRate,Zoom.ZOOM_AXIS_Y);        } else {          if (Math.abs(newX - oldX) >= Math.abs(newY - oldY)) {            zoomRate=newDeltaX / oldDeltaX;          } else {            zoomRate=newDeltaY / oldDeltaY;          }          applyZoom(zoomRate,Zoom.ZOOM_AXIS_XY);        }        oldX2=newX2;        oldY2=newY2;      } else       if (mRenderer.isPanEnabled()) {        mPan.apply(oldX,oldY,newX,newY);        oldX2=0;        oldY2=0;      }      oldX=newX;      oldY=newY;      graphicalView.repaint();      return true;    }  } else   if (action == MotionEvent.ACTION_DOWN) {    oldX=event.getX(0);    oldY=event.getY(0);    if (mRenderer != null && mRenderer.isZoomEnabled() && zoomR.contains(oldX,oldY)) {      if (oldX < zoomR.left + zoomR.width() / 3) {        graphicalView.zoomIn();      } else       if (oldX < zoomR.left + zoomR.width() * 2 / 3) {        graphicalView.zoomOut();      } else {        graphicalView.zoomReset();      }      return true;    }  } else   if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_POINTER_UP) {    oldX=0;    oldY=0;    oldX2=0;    oldY2=0;    if (action == MotionEvent.ACTION_POINTER_UP) {      oldX=-1;      oldY=-1;    }  }  return !mRenderer.isClickEnabled();}  }
class C{  public void testMultipleBinary() throws Exception {  String start="INSERT INTO foo VALUES(_binary'";  String middle="', _binary'";  String end="')";  byte[] nulls=new byte[]{0x5c,0x30,0x5c,0x30};  byte[] data=new byte[1000];  int length=copy(data,start.getBytes("UTF-8"),0);  length=copy(data,nulls,length);  length=copy(data,middle.getBytes("UTF-8"),length);  length=copy(data,nulls,length);  length=copy(data,end.getBytes("UTF-8"),length);  MySQLStatementTranslator translator=new MySQLStatementTranslator("UTF-8");  String output=translator.toJavaString(data,0,length);  System.out.println("Output: " + output);}  }
class C{  public boolean isDeleted(){  return isDeleted;}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitLocalVariable(name,desc,signature,start.getLabel(),end.getLabel(),index);}  }
class C{  public static void writePlainObject(BinaryWriterExImpl writer,Object val){  Byte flag=PLAIN_CLASS_TO_FLAG.get(val.getClass());  if (flag == null)   throw new IllegalArgumentException("Can't write object with type: " + val.getClass());switch (flag) {case GridBinaryMarshaller.BYTE:    writer.writeByte(flag);  writer.writeByte((Byte)val);break;case GridBinaryMarshaller.SHORT:writer.writeByte(flag);writer.writeShort((Short)val);break;case GridBinaryMarshaller.INT:writer.writeByte(flag);writer.writeInt((Integer)val);break;case GridBinaryMarshaller.LONG:writer.writeByte(flag);writer.writeLong((Long)val);break;case GridBinaryMarshaller.FLOAT:writer.writeByte(flag);writer.writeFloat((Float)val);break;case GridBinaryMarshaller.DOUBLE:writer.writeByte(flag);writer.writeDouble((Double)val);break;case GridBinaryMarshaller.CHAR:writer.writeByte(flag);writer.writeChar((Character)val);break;case GridBinaryMarshaller.BOOLEAN:writer.writeByte(flag);writer.writeBoolean((Boolean)val);break;case GridBinaryMarshaller.DECIMAL:writer.doWriteDecimal((BigDecimal)val);break;case GridBinaryMarshaller.STRING:writer.doWriteString((String)val);break;case GridBinaryMarshaller.UUID:writer.doWriteUuid((UUID)val);break;case GridBinaryMarshaller.DATE:writer.doWriteDate((Date)val);break;case GridBinaryMarshaller.TIMESTAMP:writer.doWriteTimestamp((Timestamp)val);break;case GridBinaryMarshaller.BYTE_ARR:writer.doWriteByteArray((byte[])val);break;case GridBinaryMarshaller.SHORT_ARR:writer.doWriteShortArray((short[])val);break;case GridBinaryMarshaller.INT_ARR:writer.doWriteIntArray((int[])val);break;case GridBinaryMarshaller.LONG_ARR:writer.doWriteLongArray((long[])val);break;case GridBinaryMarshaller.FLOAT_ARR:writer.doWriteFloatArray((float[])val);break;case GridBinaryMarshaller.DOUBLE_ARR:writer.doWriteDoubleArray((double[])val);break;case GridBinaryMarshaller.CHAR_ARR:writer.doWriteCharArray((char[])val);break;case GridBinaryMarshaller.BOOLEAN_ARR:writer.doWriteBooleanArray((boolean[])val);break;case GridBinaryMarshaller.DECIMAL_ARR:writer.doWriteDecimalArray((BigDecimal[])val);break;case GridBinaryMarshaller.STRING_ARR:writer.doWriteStringArray((String[])val);break;case GridBinaryMarshaller.UUID_ARR:writer.doWriteUuidArray((UUID[])val);break;case GridBinaryMarshaller.DATE_ARR:writer.doWriteDateArray((Date[])val);break;case GridBinaryMarshaller.TIMESTAMP_ARR:writer.doWriteTimestampArray((Timestamp[])val);break;default :throw new IllegalArgumentException("Can't write object with type: " + val.getClass());}}  }
class C{  public void finishedPaintingChildren(JSplitPane sp,Graphics g){  if (sp == splitPane && getLastDragLocation() != -1 && !isContinuousLayout() && !draggingHW) {    Dimension size=splitPane.getSize();    g.setColor(dividerDraggingColor);    if (orientation == JSplitPane.HORIZONTAL_SPLIT) {      g.fillRect(getLastDragLocation(),0,dividerSize - 1,size.height - 1);    } else {      g.fillRect(0,lastDragLocation,size.width - 1,dividerSize - 1);    }  }}  }
class C{  public final DccFileTransfer dccSendFile(File file,String nick,int timeout){  DccFileTransfer transfer=new DccFileTransfer(this,_dccManager,file,nick,timeout);  transfer.doSend(true);  return transfer;}  }
class C{  public long length(){  return len;}  }
class C{  public static Test suite(){  return new TestSuite(RandomSubsetTest.class);}  }
class C{  public static int findWordEnd(String line,int pos,String noWordSep){  char ch=line.charAt(pos);  if (noWordSep == null) {    noWordSep="";  }  boolean selectNoLetter=(!Character.isLetterOrDigit(ch) && noWordSep.indexOf(ch) == -1);  int wordEnd=line.length();  for (int i=pos; i < line.length(); i++) {    ch=line.charAt(i);    if (selectNoLetter ^ (!Character.isLetterOrDigit(ch) && noWordSep.indexOf(ch) == -1)) {      wordEnd=i;      break;    }  }  return wordEnd;}  }
class C{  public static String normalizeInet4Address(String ip4String){  final int[] octets=parseInet4Address(ip4String);  if (octets == null) {    return null;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < 4; i++) {    if (i > 0) {      sb.append('.');    }    sb.append(octets[i]);  }  return sb.toString();}  }
class C{  public static ArrayList<ASTNode> findDescendantElements(PsiElement element,IElementType toFind,ASTNode cursor){  return findDescendantElements(element,toFind,cursor,null);}  }
class C{  static int computeMaxMem(){  final long maxMemInMegabytes=Runtime.getRuntime().maxMemory() / (1024 * 1024);  final long maxMemoryToUse=(long)(maxMemInMegabytes * 0.90);  int ret;  if (maxMemoryToUse < Integer.MAX_VALUE) {    ret=(int)maxMemoryToUse;    if (ret < 1) {      ret=1;    }  } else {    ret=Integer.MAX_VALUE;  }  return ret;}  }
class C{  public FloppyDiskIcon(){  this.width=getOrigWidth();  this.height=getOrigHeight();}  }
class C{  public Observable<Integer> exerciseFlatMap(Observable<Movies> movies){  return movies.<Integer>flatMap(null);}  }
class C{  public void testExtFuncNotAllowed(){  Policy p=new SimplePolicy(new AllPermission());  Policy.setPolicy(p);  System.setSecurityManager(new SecurityManager());  TransformerFactory factory=TransformerFactory.newInstance();  try {    transform(factory);  } catch (  TransformerConfigurationException e) {    fail(e.getMessage());  }catch (  TransformerException ex) {    System.out.println("testExtFuncNotAllowed: OK");  } finally {    System.setSecurityManager(null);  }}  }
class C{  @Override public String toString(){  return ("multiquadric(sigma=" + sigma + ",shift="+ shift+ ")");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:17.801 -0500",hash_original_method="F3A93A83C93F754D4846FCC8297217FD",hash_generated_method="59A4FA9E9403F85D85E0377B015C2830") public CertificateVerify(byte[] hash){  if (hash == null || hash.length == 0) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR: incorrect certificate verify hash");  }  this.signedHash=hash;  length=hash.length + 2;}  }
class C{  public static ExtensionRegistry createRegistryWithDefaultExtensions(){  ExtensionRegistry extensionRegistry=new ExtensionRegistry(null);  DEFAULT_EXTENSIONS.forEach(null);  return extensionRegistry;}  }
class C{  private void buildFromByteArray(byte[] bytes){  if (bytes.length != 4) {    throw new IllegalArgumentException();  }  components=new long[4];  componentCount=4;  components[0]=(bytes[0] >= 0) ? bytes[0] : bytes[0] + 256;  components[1]=(bytes[1] >= 0) ? bytes[1] : bytes[1] + 256;  components[2]=(bytes[2] >= 0) ? bytes[2] : bytes[2] + 256;  components[3]=(bytes[3] >= 0) ? bytes[3] : bytes[3] + 256;}  }
class C{  public WrappedByteBuffer putUnsignedAt(int index,int v){  _checkForWriteAt(index,1);  byte b=(byte)(v & 0xFF);  return this.putAt(index,b);}  }
class C{  void read(BufferedReader isr) throws IOException {  String Line=isr.readLine();  if (Line == null)   return;  int delta=0;  for (int i=0; i < n; i++) {    int n1=fieldPosition[i] - delta;    int n2=fieldPosition[i + 1] - delta;    if (n1 > 80) {      delta+=80;      n1-=80;      n2-=80;      Line=isr.readLine();    }    String S;    if (Line == null) {      break;    }    if (n1 >= Line.length())     S=""; else     if (n2 < Line.length())     S=Line.substring(n1,n2); else     S=Line.substring(n1);    if (n2 > 80) {      delta+=80;      n2-=80;      Line=isr.readLine();      if (Line == null) {        break;      }      if (n2 < Line.length())       S+=Line.substring(0,n2); else {        S=Line;        Debug.message("e00","??" + S);      }    }    try {switch (fieldType[i]) {case 20:        stringField[i]=S;      break;case 30:case 50:    intField[i]=Integer.parseInt(S.trim());  break;case 60:floatField[i]=Float.parseFloat(S.trim());}} catch (NumberFormatException e) {if (!Line.startsWith("EOI")) {Debug.message("e00","E00:parserr " + i + " "+ fieldPosition[i]+ " "+ fieldPosition[i + 1]+ " "+ S);Debug.message("e00",">" + Line);}}}}  }
class C{  public IllegalClassFormatException(){  super();}  }
class C{  private List<U32> computeOurVersionBitmaps(Set<OFVersion> ofVersions){  if (ofVersions == null || ofVersions.isEmpty()) {    throw new IllegalStateException("OpenFlow version list should never be null or empty at this point. Make sure it's set in the OFSwitchManager.");  }  int pos=1;  int size=32;  int tempBitmap=0;  List<U32> bitmaps=new ArrayList<U32>();  ArrayList<OFVersion> sortedVersions=new ArrayList<OFVersion>(ofVersions);  Collections.sort(sortedVersions);  for (  OFVersion v : sortedVersions) {    if (v.getWireVersion() > pos * size - 1) {      bitmaps.add(U32.ofRaw(tempBitmap));      tempBitmap=0;      pos++;    }    tempBitmap=tempBitmap | (1 << (v.getWireVersion() % size));  }  if (tempBitmap != 0) {    bitmaps.add(U32.ofRaw(tempBitmap));  }  log.info("Computed OpenFlow version bitmap as {}",Arrays.asList(tempBitmap));  return bitmaps;}  }
class C{  public static final Vec3D fromXZTheta(float theta){  return new Vec3D((float)Math.cos(theta),0,(float)Math.sin(theta));}  }
class C{  void invalidConversion(Converter converter,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "'";  try {    Object result=converter.convert(getExpectedType(),value);    fail(msg + ", expected ConversionException, but result = '" + result+ "'");  } catch (  ConversionException ex) {  }}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.673 -0500",hash_original_method="FCBD3ECE23AA666BDE06756DAACE9219",hash_generated_method="562F7FD4E7CCD444CD48E6FB580E5C32") public int size(){  return hlist.size();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.875 -0400",hash_original_method="B92A5D5411F17E788E19D12E602D51DB",hash_generated_method="8F0275C0DB8FB8DDB36E0D0B06918D34") public static List<IOFileFilter> toList(IOFileFilter... filters){  if (filters == null) {    throw new IllegalArgumentException("The filters must not be null");  }  List<IOFileFilter> list=new ArrayList<IOFileFilter>(filters.length);  for (int i=0; i < filters.length; i++) {    if (filters[i] == null) {      throw new IllegalArgumentException("The filter[" + i + "] is null");    }    list.add(filters[i]);  }  return list;}  }
class C{  @Nullable public AffinityTopologyVersion topologyVersion(){  return releaseFut.isDone() ? null : topVer;}  }
class C{  public GEPConstantTerminalSymbol(){  super(null);  symbol="?";}  }
class C{  private CheckBoxPreference createProfilePreference(LocalBluetoothProfile profile){  CheckBoxPreference pref=new CheckBoxPreference(getActivity());  pref.setKey(profile.toString());  pref.setTitle(profile.getNameResource(mCachedDevice.getDevice()));  pref.setPersistent(false);  pref.setOrder(getProfilePreferenceIndex(profile.getOrdinal()));  pref.setOnPreferenceChangeListener(this);  int iconResource=profile.getDrawableResource(mCachedDevice.getBtClass());  if (iconResource != 0) {    pref.setIcon(getResources().getDrawable(iconResource));  }  pref.setEnabled(!mCachedDevice.isBusy());  refreshProfilePreference(pref,profile);  return pref;}  }
class C{  public void enumConstValue(int typeNameIndex,int constNameIndex) throws IOException {  output.write('e');  write16bit(typeNameIndex);  write16bit(constNameIndex);}  }
class C{  public void dropIndexes(AbstractSession session,Writer writer){  if (!session.getPlatform().supportsIndexes()) {    return;  }  if (session.getPlatform().shouldCreateIndicesForPrimaryKeys()) {    List<String> primKeyList=getPrimaryKeyFieldNames();    if (!primKeyList.isEmpty()) {      IndexDefinition index=buildIndex(session,primKeyList.get(0),primKeyList,false);      if (writer == null) {        try {          index.dropFromDatabase(session);        } catch (        Exception notThere) {        }      } else {        index.buildDeletionWriter(session,writer);        writeLineSeperator(session,writer);      }    }  }  if (session.getPlatform().shouldCreateIndicesOnUniqueKeys()) {    for (    UniqueKeyConstraint uniqueKey : getUniqueKeys()) {      IndexDefinition index=buildIndex(session,uniqueKey.getName(),uniqueKey.getSourceFields(),false);      if (writer == null) {        try {          index.dropFromDatabase(session);        } catch (        Exception notThere) {        }      } else {        index.buildDeletionWriter(session,writer);        writeLineSeperator(session,writer);      }    }    for (    FieldDefinition field : getFields()) {      if (field.isUnique()) {        List<String> columnAsList=new ArrayList<String>();        columnAsList.add(field.getName());        IndexDefinition index=buildIndex(session,field.getName(),columnAsList,true);        if (writer == null) {          try {            index.dropFromDatabase(session);          } catch (          Exception notThere) {          }        } else {          index.buildDeletionWriter(session,writer);          writeLineSeperator(session,writer);        }      }    }  }  if (session.getPlatform().shouldCreateIndicesOnForeignKeys()) {    for (    ForeignKeyConstraint foreignKey : getForeignKeys()) {      if (!foreignKey.isDisableForeignKey()) {        if (!foreignKey.isDisableForeignKey()) {          boolean alreadyIndexed=false;          List<String> primaryKeys=getPrimaryKeyFieldNames();          if ((primaryKeys.size() == foreignKey.getSourceFields().size()) && primaryKeys.containsAll(foreignKey.getSourceFields())) {            alreadyIndexed=true;          }          if (foreignKey.getSourceFields().size() == 1) {            FieldDefinition field=getField(foreignKey.getSourceFields().get(0));            if ((field != null) && field.isUnique()) {              alreadyIndexed=true;            }          }          for (          UniqueKeyConstraint uniqueConstraint : getUniqueKeys()) {            if ((uniqueConstraint.getSourceFields().size() == foreignKey.getSourceFields().size()) && uniqueConstraint.getSourceFields().containsAll(foreignKey.getSourceFields())) {              alreadyIndexed=true;            }          }          if (!alreadyIndexed) {            IndexDefinition index=buildIndex(session,foreignKey.getName(),foreignKey.getSourceFields(),false);            if (writer == null) {              try {                index.dropFromDatabase(session);              } catch (              Exception notThere) {              }            } else {              index.buildDeletionWriter(session,writer);              writeLineSeperator(session,writer);            }          }        }      }    }  }  for (  IndexDefinition index : getIndexes()) {    if (writer == null) {      try {        index.dropFromDatabase(session);      } catch (      Exception notThere) {      }    } else {      index.buildDeletionWriter(session,writer);      writeLineSeperator(session,writer);    }  }}  }
class C{  protected Vector computeGraphics(com.bbn.openmap.corba.CSpecialist.LLPoint ll1,com.bbn.openmap.corba.CSpecialist.LLPoint ll2){  if (spatialIndex == null) {    return new Vector();  }  Vector list=null;  if (ProjMath.isCrossingDateline(ll1.lon,ll2.lon,1000000f)) {    if (Debug.debugging("shape")) {      Debug.output("Dateline is on screen");    }    double ymin=(double)Math.min(ll1.lat,ll2.lat);    double ymax=(double)Math.max(ll1.lat,ll2.lat);    try {      ESRIRecord records1[]=spatialIndex.locateRecords(ll1.lon,ymin,180.0d,ymax);      ESRIRecord records2[]=spatialIndex.locateRecords(-180.0d,ymin,ll2.lon,ymax);      int nRecords1=records1.length;      int nRecords2=records2.length;      list=new Vector(nRecords1 + nRecords2);      for (int i=0; i < nRecords1; i++) {        ((ESRISpecialistRecord)records1[i]).writeGraphics(list,lineColor,fillColor);      }      for (int i=0; i < nRecords2; i++) {        ((ESRISpecialistRecord)records2[i]).writeGraphics(list,lineColor,fillColor);      }    } catch (    java.io.IOException ex) {      ex.printStackTrace();    }catch (    com.bbn.openmap.io.FormatException fe) {      fe.printStackTrace();    }  } else {    double xmin=(double)Math.min(ll1.lon,ll2.lon);    double xmax=(double)Math.max(ll1.lon,ll2.lon);    double ymin=(double)Math.min(ll1.lat,ll2.lat);    double ymax=(double)Math.max(ll1.lat,ll2.lat);    try {      ESRIRecord records[]=spatialIndex.locateRecords(xmin,ymin,xmax,ymax);      int nRecords=records.length;      list=new Vector(nRecords);      for (int i=0; i < nRecords; i++) {        ((ESRISpecialistRecord)records[i]).writeGraphics(list,lineColor,fillColor);      }    } catch (    java.io.IOException ex) {      ex.printStackTrace();    }catch (    com.bbn.openmap.io.FormatException fe) {      fe.printStackTrace();    }  }  return list;}  }
class C{  DisjunctionSumScorer(Weight weight,List<Scorer> subScorers,boolean needsScores){  super(weight,subScorers,needsScores);}  }
class C{  public void clearPrefs(){  this.instructors.clear();  this.instrPctShare.clear();  this.instrLead.clear();}  }
class C{  public static Object[] castDataArray(Object[] source){  List<?> dest=null;  Class<?> type=Object.class;  for (  Class<?> c : classes) {    if (source.length > 0 && c.isInstance(source[0])) {      type=c;      break;    }  }  dest=createListOfType(type);  for (  Object o : source) {    if (type.isInstance(o)) {      Method m;      try {        m=dest.getClass().getDeclaredMethod("add",new Class[]{Object.class});        m.invoke(dest,type.cast(o));      } catch (      SecurityException e) {        LOG.error(STD_ERR_MSG,e);      }catch (      NoSuchMethodException e) {        LOG.error(STD_ERR_MSG,e);      }catch (      IllegalArgumentException e) {        LOG.error(STD_ERR_MSG,e);      }catch (      IllegalAccessException e) {        LOG.error(STD_ERR_MSG,e);      }catch (      InvocationTargetException e) {        LOG.error(STD_ERR_MSG,e);      }    } else {      LOG.warn("DND source contains multiple types. Return an empty array");      return new Object[0];    }  }  return dest.toArray((Object[])Array.newInstance(type,dest.size()));}  }
class C{  @Override public void onCreate(SQLiteDatabase db){  db.execSQL("CREATE TABLE " + MainTable.TABLE_NAME + " ("+ MainTable._ID+ " INTEGER PRIMARY KEY,"+ MainTable.COLUMN_NAME_DATA+ " TEXT"+ ");");}  }
class C{  public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {  fsb().sendSAXComment(lh,m_start,m_length);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void validatePatchState(State startState,State patchState){  ValidationUtils.validatePatch(startState,patchState);  ValidationUtils.validateTaskStage(patchState.taskState);  ValidationUtils.validateTaskStageProgression(startState.taskState,patchState.taskState);}  }
class C{  public static boolean isWindows(){  String os=System.getProperty("os.name");  if (os != null && os.toLowerCase().indexOf("win") >= 0)   return true;  return false;}  }
class C{  @NotNull public TabBuilder scope(@NotNull Set<State> scopes){  this.scopes=scopes;  return this;}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    int n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (int i=0; i < n; ++i) {      TryCatchBlockNode tcb=tryCatchBlocks.get(i);      if (tcb.visibleTypeAnnotations != null && tcb.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (tcb.invisibleTypeAnnotations != null && tcb.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }    }    for (int i=0; i < instructions.size(); ++i) {      AbstractInsnNode insn=instructions.get(i);      if (insn.visibleTypeAnnotations != null && insn.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn.invisibleTypeAnnotations != null && insn.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn instanceof MethodInsnNode) {        boolean itf=((MethodInsnNode)insn).itf;        if (itf != (insn.opcode == Opcodes.INVOKEINTERFACE)) {          throw new RuntimeException();        }      }    }    if (visibleLocalVariableAnnotations != null && visibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleLocalVariableAnnotations != null && invisibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  private Set<String> flattenTopK(TreeMap<Double,Collection<String>> topk){  HashSet<String> topkMessages=new HashSet<String>();  for (  Collection<String> messages : topk.values()) {    for (    String m : messages) {      topkMessages.add(m);    }  }  return topkMessages;}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VinciLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public static boolean isVariable(String key){  if (StringUtils.isEmpty(key)) {    return false;  }  if (key.charAt(0) == identifierChar) {    return true;  }  return false;}  }
class C{  public boolean isFinal(){  return (accessFlags & AccessFlag.FINAL) != 0;}  }
class C{  public DNetscapeRevocationUrl(JDialog parent){  super(parent);  setTitle(res.getString("DNetscapeRevocationUrl.Title"));  initComponents();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node refChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node insertedNode;  doc=(Document)load("hc_staff",true);  newChild=doc.createElement("br");  refChild=doc.createElement("b");  elementList=doc.getElementsByTagName("p");  elementNode=elementList.item(1);{    boolean success=false;    try {      insertedNode=elementNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  int nextViewId(){  while (cache.get(++VIEW_ID) != null) {    if (VIEW_ID == Integer.MAX_VALUE) {      throw new IllegalStateException("Oops, it seems that we ran out of (mosby internal) view id's. It seems that your user has navigated more than " + Integer.MAX_VALUE + " times through your app. There is nothing you can do to fix that");    }  }  return VIEW_ID;}  }
class C{  public static int toIntFromNibbles(byte[] nibbles){  return toInt(nibbles[0],nibbles[1],nibbles[2],nibbles[3],nibbles[4],nibbles[5],nibbles[6],nibbles[7]);}  }
class C{  private String constructISCSINamesQuery(String systemId,List<HostStorageDomain> hsdList,String model){  Map<String,Object> attributeMap=new HashMap<String,Object>();  StorageArray array=new StorageArray(systemId);  Add addOp=new Add(HDSConstants.ISCSI_NAME_FOR_HSD_TARGET);  attributeMap.put(HDSConstants.STORAGEARRAY,array);  attributeMap.put(HDSConstants.ADD,addOp);  attributeMap.put(HDSConstants.MODEL,model);  attributeMap.put(HDSConstants.HOSTGROUP_LIST,hsdList);  String addWWNQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.BATCH_ADD_WWN_TO_HSD_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);  return addWWNQuery;}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  this.put(d);  return this;}  }
class C{  public void launchApp(){  appiumDriver.closeApp();  appiumDriver.launchApp();}  }
class C{  public TrackView(){  try {    car=ImageIO.read(TrackView.class.getResource("images/beetle_red.gif"));    track=ImageIO.read(TrackView.class.getResource("images/track.jpg"));  } catch (  Exception e) {    System.out.println("Problem loading track/car images: " + e);  }  carPosition=new Point(START_POS.x,START_POS.y);  carW=car.getWidth();  carH=car.getHeight();  carWHalf=carW / 2;  carHHalf=carH / 2;  trackW=track.getWidth();  trackH=track.getHeight();}  }
class C{  protected void showModal(){  setX(owner.getX() + owner.getWidth() / 2 - getWidth() / 2);  setY(owner.getY() + owner.getHeight() / 2 - getHeight() / 2);  showAndWait();}  }
class C{  public static int[] createStream(byte[] packet){  int i=0;  int mask=0x80;  int[] bitStream=new int[(packet.length * BITSTREAM_BITS_PER_BYTE) + preambleLength + 1];  int bitStreamIndex=0;  for (bitStreamIndex=0; bitStreamIndex < preambleLength; bitStreamIndex++) {    bitStream[bitStreamIndex]=1;  }  bitStream[bitStreamIndex++]=0;  for (i=0; i < packet.length; i++) {    mask=0x80;    while (mask > 0) {      bitStream[bitStreamIndex++]=(packet[i] & mask) != 0 ? 1 : 0;      mask=(mask >> 1);    }    bitStream[bitStreamIndex++]=0;  }  bitStream[--bitStreamIndex]=1;  return (bitStreamToSerialBytes(bitStream));}  }
class C{  public static float[] convertDoublesToFloats(double[] input){  if (input == null)   return null;  float[] output=new float[input.length];  for (int i=0; i < input.length; ++i) {    output[i]=(float)input[i];  }  return output;}  }
class C{  public String toString(){  if (root == null) {    return "()";  }  return formatNode(root);}  }
class C{  public Matrix4x3f rotateX(float ang){  return rotateX(ang,this);}  }
class C{  public final boolean changeWeightOfStrategy(final PlanStrategy strategy,final double newWeight,final Id populationId){  int idx=this.strategies.get(populationId).indexOf(strategy);  if (idx != -1) {    double oldWeight=this.weights.get(populationId).set(idx,Double.valueOf(newWeight)).doubleValue();    this.totalWeights.put(populationId,this.totalWeights.get(populationId) + (newWeight - oldWeight));    return true;  }  return false;}  }
class C{  private void doNonFailFastAlreadyExistsTest(GracePeriodStatus gracePeriodStatus) throws Exception {  persistContactsAndHosts();  clock.advanceOneMilli();  persistResource(newDomainResource(getUniqueIdFromCommand()).asBuilder().addGracePeriod(GracePeriod.create(gracePeriodStatus,END_OF_TIME,"",null)).build());  try {    runFlow();    assertWithMessage("Expected ResourceAlreadyExistsException to be thrown").fail();  } catch (  ResourceAlreadyExistsException e) {    assertThat(e.isFailfast()).isFalse();    assertAboutEppExceptions().that(e).marshalsToXml().and().hasMessage(String.format("Object with given ID (%s) already exists",getUniqueIdFromCommand()));  }}  }
class C{  private static byte randomByte(){  return (byte)(127 - new Random().nextInt(256));}  }
class C{  public int findPositionForTabWithId(@IdRes int tabId){  return getTabWithId(tabId).getIndexInTabContainer();}  }
class C{  protected SurfaceCircle createCircle(){  SurfaceCircle circle=new SurfaceCircle();  circle.setDelegateOwner(this.getActiveDelegateOwner());  circle.setAttributes(this.activeShapeAttributes);  return circle;}  }
class C{  @Inject DefaultAuditService(SystemConfiguration config){  super(null,config);}  }
class C{  public Message(MessageLevel level,Object sender,String[] senderParams,String id){  this(level,sender,senderParams,id,new String[0]);}  }
class C{  public void addDocumentListener(DocumentListener listener){  this.documentListeners.put(listener,listener);}  }
class C{  public void addRunnerId(@NotNull Long runnerId){  runnersId.add(runnerId);}  }
class C{  public void updateLists(){  MusicTrackListFragment musicTrackDetailFragment=(MusicTrackListFragment)getSupportFragmentManager().findFragmentById(R.id.track_detail_container);  if (musicTrackDetailFragment != null)   musicTrackDetailFragment.updateListView();}  }
class C{  public void resumeEncoding(){  suspendEncoding=false;}  }
class C{  protected boolean isKnownType(String type){  if (type.equals(LINESTRING)) {    return true;  } else   if (type.equals(MULTILINESTRING)) {    return true;  } else   if (type.equals(POINT)) {    return true;  } else {    return false;  }}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  public void transformTranslate(Object nativeTransform,float x,float y,float z){  ((AffineTransform)nativeTransform).translate(x,y);  clamp((AffineTransform)nativeTransform);}  }
class C{  @Override public void addToSelection(Collection<Figure> figures){  Set<Figure> oldSelection=new HashSet<Figure>(selectedFigures);  Set<Figure> newSelection=new HashSet<Figure>(selectedFigures);  boolean selectionChanged=false;  Rectangle invalidatedArea=null;  for (  Figure figure : figures) {    if (selectedFigures.add(figure)) {      selectionChanged=true;      newSelection.add(figure);      figure.addFigureListener(handleInvalidator);      if (handlesAreValid && getEditor() != null) {        for (        Handle h : figure.createHandles(detailLevel)) {          h.setView(this);          selectionHandles.add(h);          h.addHandleListener(eventHandler);          if (invalidatedArea == null) {            invalidatedArea=h.getDrawingArea();          } else {            invalidatedArea.add(h.getDrawingArea());          }        }      }    }  }  if (selectionChanged) {    fireSelectionChanged(oldSelection,newSelection);    if (invalidatedArea != null) {      repaint(invalidatedArea);    }  }}  }
class C{  public GridConcurrentPhantomHashSet(Collection<E> c){  this(c.size());  addAll(c);}  }
class C{  public void testFormatIpv4Address() throws Exception {  assertEquals("127.0.0.1",formatIpAddress(new byte[]{127,0,0,1}));}  }
class C{  public RegexConstraint(String regex,String errorMessage){  this.regex=new RE(regex);  this.errorMessage=errorMessage;}  }
class C{  public WarehouseIdToEntityConverter(final GenericDAO<Warehouse,Long> warehouseLongGenericDAO){  super(warehouseLongGenericDAO);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(localName02.class,args);}  }
class C{  public String dump(String prefix){  StringWriter out=new StringWriter(256);  try {    dump(prefix,out);    return out.toString();  } catch (  IOException e) {    throw new RuntimeException("Unexpected I/O error while writing to StringWriter",e);  }}  }
class C{  public static <T,PT extends ObjectIntProcedure<? super T>>void forEachWithIndex(Iterable<T> iterable,PT procedure,int minForkSize,int taskCount){  PassThruObjectIntProcedureFactory<PT> procedureFactory=new PassThruObjectIntProcedureFactory<>(procedure);  PassThruCombiner<PT> combiner=new PassThruCombiner<>();  FJIterate.forEachWithIndex(iterable,procedureFactory,combiner,minForkSize,taskCount);}  }
class C{  public final String toPGN(PGNOptions options){  PgnText pgnText=new PgnText();  options.exp.pgnPromotions=true;  options.exp.pieceType=PGNOptions.PT_ENGLISH;  pgnTreeWalker(options,pgnText);  return pgnText.getPgnString();}  }
class C{  public void testDuplicateEntries() throws Exception {  String name1="test_file_name1";  String name2="test_file_name2";  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ZipOutputStream out=new ZipOutputStream(baos);  out.putNextEntry(new ZipEntry(name2));  out.closeEntry();  out.putNextEntry(new ZipEntry(name1));  out.closeEntry();  out.close();  byte[] buffer=baos.toByteArray();  replaceBytes(buffer,name2.getBytes(),name1.getBytes());  File badZip=createTemporaryZipFile();  writeBytes(badZip,buffer);  try {    ZipFile bad=new ZipFile(badZip);    fail();  } catch (  ZipException expected) {  }}  }
class C{  public Object poll(){  if (isEmpty())   return null;  Object minItem=items.get(1);  items.set(1,items.get(size));  size-=1;  reorder(1);  return minItem;}  }
class C{  @Override public boolean isEnabled(){  return super.isEnabled();}  }
class C{  @Override public final int dump(final File file) throws IOException {  final Iterator<Row.Entry> i=this.index.rows(true,null);  OutputStream os;  try {    os=new BufferedOutputStream(new FileOutputStream(file),1024 * 1024);  } catch (  final OutOfMemoryError e) {    os=new FileOutputStream(file);  }  int c=0;  while (i.hasNext()) {    os.write(i.next().bytes());    c++;  }  os.flush();  os.close();  return c;}  }
class C{  private void reverseTransactions(ArrayList<DataStore> restoreList,Throwable cause){  for (  DataStore dataStore : restoreList) {    try (DataStoreTransaction transaction=dataStore.beginTransaction()){      List<Object> list=dirtyObjects.get(dataStore);      for (      Object dirtyObject : list == null ? Collections.emptyList() : list) {        Object cloned=clonedObjects.get(dirtyObject);        if (cloned == NEWLY_CREATED_OBJECT) {          transaction.delete(dirtyObject);        } else {          transaction.save(cloned);        }      }      transaction.commit();    } catch (    RuntimeException|IOException e) {      cause.addSuppressed(e);    }  }}  }
class C{  public MarkdownDialog(Dialog owner,String title,ModalityType modality){  super(owner,title,modality);}  }
class C{  public TitlePaneIconifyButtonWindowNotFocusedState(){  super("WindowNotFocused");}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean hasTransaction(){  return mTransactionStack != null;}  }
class C{  public MalformedChunkCodingException(){  super();}  }
class C{  public static final double[][] copy(double P[][]){  double X[][]=new double[P.length][P[0].length];  for (int i=0; i < P.length; i++) {    for (int j=0; j < P[i].length; j++) {      X[i][j]=P[i][j];    }  }  return X;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public boolean isPolicyMappingInhibited(){  return policyMappingInhibited;}  }
class C{  public String verboseTipText(){  return "If enabled the algorithm will be run in verbose mode.";}  }
class C{  public void handleAxisFlags(){  if (minAxisFlag == AT_MINOR_TICK) {    if (minAxis + minTick <= minData) {      while ((minAxis + minTick) <= minData) {        minAxis+=minTick;      }      majorTickCount--;      minTick*=10;    }  }  if (maxAxisFlag == AT_MINOR_TICK) {    if (maxAxis - (maxTick / 10) >= maxData) {      majorTickCount--;      maxTick/=10;      while ((maxAxis - maxTick) >= maxData) {        maxAxis-=maxTick;      }    }  }}  }
class C{  public void removeColumn(Comparable columnKey){  int index=getColumnIndex(columnKey);  if (index < 0) {    throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");  }  Iterator iterator=this.rows.iterator();  while (iterator.hasNext()) {    KeyedObjects rowData=(KeyedObjects)iterator.next();    int i=rowData.getIndex(columnKey);    if (i >= 0) {      rowData.removeValue(i);    }  }  this.columnKeys.remove(columnKey);}  }
class C{  @Override public R reduce(List<ComputeJobResult> results){  return null;}  }
class C{  private void update(){  try (RandomAccessFile inout=new RandomAccessFile("AddressBook.dat","rw")){    inout.seek(count * 91 - 91);    write(inout);  } catch (  FileNotFoundException ex) {  }catch (  IOException ex) {  }}  }
class C{  public MusicTrackDataSource(PlayMusicManager playMusicManager){  super(playMusicManager);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (null != m_attributeSetsNames) {    applyAttrSets(transformer,getStylesheetRoot(),m_attributeSetsNames);  }}  }
class C{  public String resolveFont(java.awt.Font font){  String ret="-*";  ret=ret.concat("-" + font.getName());  if (font.isBold())   ret=ret.concat("-bold"); else   ret=ret.concat("-normal");  if (font.isItalic())   ret=ret.concat("-i"); else   ret=ret.concat("-o");  ret=ret.concat("-normal");  ret=ret.concat("--" + font.getSize());  ret=ret.concat("-*");  ret=ret.concat("-*");  ret=ret.concat("-*");  ret=ret.concat("-*");  ret=ret.concat("-*");  ret=ret.concat("-*");  return ret;}  }
class C{  public MediaFileInformationFetcherTask(MediaFile mediaFile,MediaEntity mediaEntity,boolean forceUpdate){  this.mediaFiles=new ArrayList<MediaFile>();  this.mediaFiles.add(mediaFile);  this.mediaEntity=mediaEntity;  this.forceUpdate=forceUpdate;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tSets the range of attributes to convert (default last).","C",1,"-C <col>"));  return result.elements();}  }
class C{  public void addElement(E element){  int index=delegate.size();  delegate.addElement(element);  fireIntervalAdded(this,index,index);}  }
class C{  public void stopMonitoring(){  m_Monitor.stopMonitoring();}  }
class C{  public RegularTimePeriod createInstance(Date millisecond,TimeZone zone){  return createInstance(millisecond,zone,Locale.getDefault());}  }
class C{  @Override public boolean onTouch(final View v,final MotionEvent event){  if (!lollipopAndAbove()) switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    gradientDrawable=new GradientDrawable();  gradientDrawable.setShape(GradientDrawable.OVAL);gradientDrawable.setSize(mOriginalThumbHeight / 2,mOriginalThumbHeight / 2);gradientDrawable.setColor(mIsEnabled ? mThumbColor : Color.LTGRAY);gradientDrawable.setDither(true);gradientDrawable.setAlpha(mThumbAlpha);setThumb(gradientDrawable);break;case MotionEvent.ACTION_UP:gradientDrawable=new GradientDrawable();gradientDrawable.setShape(GradientDrawable.OVAL);gradientDrawable.setSize(mOriginalThumbHeight / 3,mOriginalThumbHeight / 3);gradientDrawable.setColor(mIsEnabled ? mThumbColor : Color.LTGRAY);gradientDrawable.setDither(true);gradientDrawable.setAlpha(mThumbAlpha);setThumb(gradientDrawable);break;}return false;}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 190) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public boolean isVlanMtuSupported(){  return vlanMtuSupported;}  }
class C{  public SimpleInputRegister(){}  }
class C{  public PointCloud3D center(){  return center(null);}  }
class C{  @Override public Iterator<Field> iterator(){  return createFieldList().iterator();}  }
class C{  public boolean equals(symbol_set other){  if (other == null || other.size() != size())   return false;  try {    return is_subset_of(other);  } catch (  internal_error e) {    e.crash();    return false;  }}  }
class C{  public static boolean parseBracedCastContent(PsiBuilder b,int l){  assert b instanceof PerlBuilder;  boolean oldInterpolatedState=((PerlBuilder)b).setIsInterpolated(false);  boolean oldRegexState=((PerlBuilder)b).setIsRegex(false);  boolean r=PerlParserImpl.block_content(b,l);  ((PerlBuilder)b).setIsInterpolated(oldInterpolatedState);  ((PerlBuilder)b).setIsRegex(oldRegexState);  return r;}  }
class C{  public void success(JSONArray message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  public boolean isDirectDebitDisabled(){  return (isPersistedType(PaymentInfoType.DIRECT_DEBIT) && isDirectDebitAvailable()) ? true : false;}  }
class C{  public <E extends Entry>E createEntry(ElementKey<?,E> entryKey){  E entry;  try {    entry=Element.createElement(entryKey);  } catch (  ContentCreationException cce) {    throw new IllegalStateException(cce);  }  if (feedState.service != null) {    entry.setService(feedState.service);  }  return entry;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().setVolume(getFloat(stack));  return null;}  }
class C{  public String fontName(){  return null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.956 -0500",hash_original_method="BCD1A4E1E4B160F1064A009F1000860C",hash_generated_method="AED934F64C2AF3A3AA68C1BE35325EE1") private boolean processSelectItem(CommandDetails cmdDet,List<ComprehensionTlv> ctlvs) throws ResultException {  CatLog.d(this,"process SelectItem");  Menu menu=new Menu();  IconId titleIconId=null;  ItemsIconId itemsIconId=null;  Iterator<ComprehensionTlv> iter=ctlvs.iterator();  ComprehensionTlv ctlv=searchForTag(ComprehensionTlvTag.ALPHA_ID,ctlvs);  if (ctlv != null) {    menu.title=ValueParser.retrieveAlphaId(ctlv);  }  while (true) {    ctlv=searchForNextTag(ComprehensionTlvTag.ITEM,iter);    if (ctlv != null) {      menu.items.add(ValueParser.retrieveItem(ctlv));    } else {      break;    }  }  if (menu.items.size() == 0) {    throw new ResultException(ResultCode.REQUIRED_VALUES_MISSING);  }  ctlv=searchForTag(ComprehensionTlvTag.ITEM_ID,ctlvs);  if (ctlv != null) {    menu.defaultItem=ValueParser.retrieveItemId(ctlv) - 1;  }  ctlv=searchForTag(ComprehensionTlvTag.ICON_ID,ctlvs);  if (ctlv != null) {    mIconLoadState=LOAD_SINGLE_ICON;    titleIconId=ValueParser.retrieveIconId(ctlv);    menu.titleIconSelfExplanatory=titleIconId.selfExplanatory;  }  ctlv=searchForTag(ComprehensionTlvTag.ITEM_ICON_ID_LIST,ctlvs);  if (ctlv != null) {    mIconLoadState=LOAD_MULTI_ICONS;    itemsIconId=ValueParser.retrieveItemsIconId(ctlv);    menu.itemsIconSelfExplanatory=itemsIconId.selfExplanatory;  }  boolean presentTypeSpecified=(cmdDet.commandQualifier & 0x01) != 0;  if (presentTypeSpecified) {    if ((cmdDet.commandQualifier & 0x02) == 0) {      menu.presentationType=PresentationType.DATA_VALUES;    } else {      menu.presentationType=PresentationType.NAVIGATION_OPTIONS;    }  }  menu.softKeyPreferred=(cmdDet.commandQualifier & 0x04) != 0;  menu.helpAvailable=(cmdDet.commandQualifier & 0x80) != 0;  mCmdParams=new SelectItemParams(cmdDet,menu,titleIconId != null);switch (mIconLoadState) {case LOAD_NO_ICON:    return false;case LOAD_SINGLE_ICON:  mIconLoader.loadIcon(titleIconId.recordNumber,this.obtainMessage(MSG_ID_LOAD_ICON_DONE));break;case LOAD_MULTI_ICONS:int[] recordNumbers=itemsIconId.recordNumbers;if (titleIconId != null) {recordNumbers=new int[itemsIconId.recordNumbers.length + 1];recordNumbers[0]=titleIconId.recordNumber;System.arraycopy(itemsIconId.recordNumbers,0,recordNumbers,1,itemsIconId.recordNumbers.length);}mIconLoader.loadIcons(recordNumbers,this.obtainMessage(MSG_ID_LOAD_ICON_DONE));break;}return true;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return NODE_ID;case 3:return AUTH_SCHEME;case 4:return AUTH_CHALLENGE_RESPONSE;default :return null;}}  }
class C{  protected void emit_N4GetterDeclaration_SemicolonKeyword_2_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public final void print(long i) throws IOException {  if (i == 0x8000000000000000L) {    print("-9223372036854775808");    return;  }  if (_bytes == null) {    _bytes=new byte[32];  }  if (i < 0) {    write('-');    i=-i;  } else   if (i == 0) {    write('0');    return;  }  int j=31;  while (i > 0) {    _bytes[--j]=(byte)((i % 10) + '0');    i/=10;  }  write(_bytes,j,31 - j);}  }
class C{  void recordScope(ASTNode astNode,BlockScope blockScope){}  }
class C{  public void readState(DataInputStream stream) throws IOException {  int len=mt.length;  for (int x=0; x < len; x++)   mt[x]=stream.readInt();  len=mag01.length;  for (int x=0; x < len; x++)   mag01[x]=stream.readInt();  mti=stream.readInt();  __nextNextGaussian=stream.readDouble();  __haveNextNextGaussian=stream.readBoolean();}  }
class C{  public static String toString(final InputStream input) throws IOException {  return IOUtils.toString(input,Charset.defaultCharset());}  }
class C{  private void updateDebuggersComboBox(){  if (m_debuggerCombo != null) {    m_debuggerCombo.setSelectedDebugger(m_module.getConfiguration().getDebuggerTemplate());  }}  }
class C{  public void flush(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        mDiskLruCache.flush();        if (debug) {          Log.d(TAG,"Disk cache flushed");        }      } catch (      IOException e) {        Log.e(TAG,"flush - " + e);      }    }  }}  }
class C{  public void pickDevice(ConnectableDevice device){  this.device=device;}  }
class C{  public void stop(){  if (sLogger.isActivated()) {    sLogger.info("Stop the activity manager");  }  stopTimer();}  }
class C{  private static boolean isRegistered(Class<?> from,Class<?> to){  return REGISTRY.get(new Pair<Class<?>,Class<?>>(from,to)) != null;}  }
class C{  public void fatalError(SAXParseException exception) throws SAXException {  throw exception;}  }
class C{  public void selectByLoop(final int loop){  final XTableModel model=table.getXTableModel();  for (int i=table.getRowCount() - 1; i >= 0; i--) {    final Event e=(Event)model.getValueAt(table.convertRowIndexToModel(i),eventColIdx);    if (e.loop <= loop) {      programmaticSelection=true;      table.getSelectionModel().setSelectionInterval(i,i);      table.scrollRectToVisible(table.getCellRect(i,i,true));      programmaticSelection=false;      break;    }  }}  }
class C{  protected String doIt() throws Exception {  String where=" Password IS NOT NULL AND Salt IS NULL ";  int count=0;  boolean isEncrypted=MColumn.isEncrypted(417);  List<MUser> users=MTable.get(getCtx(),MUser.Table_ID).createQuery(where,get_TrxName()).list();  for (  MUser user : users) {    if (user.getAD_User_ID() == 0) {      String password=DB.getSQLValueString(get_TrxName(),"SELECT Password FROM AD_User WHERE AD_User_ID=?",0);      if (isEncrypted)       password=SecureEngine.decrypt(password);      user.setPassword(password);      String sql="UPDATE AD_User SET Updated=SysDate, UpdatedBy=" + getAD_User_ID();      if (!Util.isEmpty(password)) {        sql+=", Password=" + DB.TO_STRING(isEncrypted ? SecureEngine.encrypt(user.getPassword()) : user.getPassword());        sql+=", Salt=" + DB.TO_STRING(user.getSalt());      }      sql+=" WHERE AD_User_ID=0";      DB.executeUpdateEx(sql,get_TrxName());      count++;    } else {      user.setPassword(user.getPassword());      count++;      user.saveEx();    }  }  return "@Updated@ " + count;}  }
class C{  public String toString(){  return super.toString() + "\nStatus: " + getStatus();}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof DelegationPermission))   return false;  DelegationPermission that=(DelegationPermission)obj;  return implies(that);}  }
class C{  @Override public Message handle(Message msg,DTNHost host){  String type=(String)msg.getProperty("type");  if (type == null)   return msg;  if (msg.getTo() == host && type.equalsIgnoreCase("ping")) {    String id="pong" + SimClock.getIntTime() + "-"+ host.getAddress();    Message m=new Message(host,msg.getFrom(),id,getPongSize());    m.addProperty("type","pong");    m.setAppID(APP_ID);    host.createNewMessage(m);    super.sendEventToListeners("GotPing",null,host);    super.sendEventToListeners("SentPong",null,host);  }  if (msg.getTo() == host && type.equalsIgnoreCase("pong")) {    super.sendEventToListeners("GotPong",null,host);  }  return msg;}  }
class C{  private static MatrixBlock computeMatrixInverse(Array2DRowRealMatrix in) throws DMLRuntimeException {  if (!in.isSquare())   throw new DMLRuntimeException("Input to inv() must be square matrix -- given: a " + in.getRowDimension() + "x"+ in.getColumnDimension()+ " matrix.");  QRDecomposition qrdecompose=new QRDecomposition(in);  DecompositionSolver solver=qrdecompose.getSolver();  RealMatrix inverseMatrix=solver.getInverse();  return DataConverter.convertToMatrixBlock(inverseMatrix.getData());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:13.693 -0400",hash_original_method="89519989C64AB37C48D4072AC076DB7C",hash_generated_method="A439B0DB4788FA6A803A254DC7A5267C") public boolean isActive(){  try {    if (interfaceFlags.contains("up")) {      for (      byte b : addr.getAddress().getAddress()) {        if (b != 0)         return true;      }    }  } catch (  NullPointerException e) {    return false;  }  return false;}  }
class C{  public TypeRef resolveType(RuleEnvironment G,TypeArgument typeArgument){  return tsh.resolveType(G,typeArgument);}  }
class C{  @SuppressWarnings("ThrowableResultOfMethodCallIgnored") public static void writeError(Throwable ex,BinaryRawWriterEx writer){  writer.writeObjectDetached(ex.getClass().getName());  writer.writeObjectDetached(ex.getMessage());  writer.writeObjectDetached(X.getFullStackTrace(ex));  PlatformNativeException nativeCause=X.cause(ex,PlatformNativeException.class);  if (nativeCause != null) {    writer.writeBoolean(true);    writer.writeObjectDetached(nativeCause.cause());  } else   writer.writeBoolean(false);}  }
class C{  public long sum(){  long sum=0L;  for (  AtomicLong value : map.values()) {    sum=sum + value.get();  }  return sum;}  }
class C{  public synchronized Object firstElement(){  if (elementCount == 0) {    throw new NoSuchElementException();  }  return elementData[0];}  }
class C{  public static separadortodas newInstance(String param1,String param2){  separadortodas fragment=new separadortodas();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public GFElement invert() throws ArithmeticException {  GF2nONBElement result=new GF2nONBElement(this);  result.invertThis();  return result;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static mat4 createScale(float x,float y,float z){  mat4 result=new mat4();  result.m[0]=x;  result.m[5]=y;  result.m[10]=z;  return result;}  }
class C{  public boolean hasChat(){  if (m_Chats == null)   loadChats();  if (m_Chats == null || m_Chats.isEmpty())   return false;  Integer key=new Integer(m_mTable.getKeyID(m_currentRow));  return m_Chats.containsKey(key);}  }
class C{  public void onResourceCompleted(SamzaResourceStatus containerStatus){  String containerIdStr=containerStatus.getResourceID();  int containerId=-1;  for (  Map.Entry<Integer,SamzaResource> entry : state.runningContainers.entrySet()) {    if (entry.getValue().getResourceID().equals(containerStatus.getResourceID())) {      log.info("Matching container ID found " + entry.getKey() + " "+ entry.getValue());      containerId=entry.getKey();      break;    }  }  if (containerId == -1) {    log.info("No matching container id found for " + containerStatus.toString());  }  state.runningContainers.remove(containerId);  int exitStatus=containerStatus.getExitCode();switch (exitStatus) {case SamzaResourceStatus.SUCCESS:    log.info("Container {} completed successfully.",containerIdStr);  state.completedContainers.incrementAndGet();if (containerId != -1) {  state.finishedContainers.incrementAndGet();  containerFailures.remove(containerId);}if (state.completedContainers.get() == state.containerCount.get()) {log.info("Setting job status to SUCCEEDED, since all containers have been marked as completed.");state.status=SamzaApplicationState.SamzaAppStatus.SUCCEEDED;}break;case SamzaResourceStatus.DISK_FAIL:case SamzaResourceStatus.ABORTED:case SamzaResourceStatus.PREEMPTED:log.info("Got an exit code of {}. This means that container {} was " + "killed by YARN, either due to being released by the application " + "master or being 'lost' due to node failures etc. or due to preemption by the RM",exitStatus,containerIdStr);state.releasedContainers.incrementAndGet();if (containerId != -1) {log.info("Released container {} was assigned task group ID {}. Requesting a refactor container for the task group.",containerIdStr,containerId);state.neededContainers.incrementAndGet();state.jobHealthy.set(false);containerAllocator.requestResource(containerId,ResourceRequestState.ANY_HOST);}break;default :log.info("Container failed for some reason. Let's start it again");log.info("Container " + containerIdStr + " failed with exit code . "+ exitStatus+ " - "+ containerStatus.getDiagnostics()+ " containerID is "+ containerId);state.failedContainers.incrementAndGet();state.failedContainersStatus.put(containerIdStr,containerStatus);state.jobHealthy.set(false);if (containerId != -1) {state.neededContainers.incrementAndGet();String lastSeenOn=state.jobModelManager.jobModel().getContainerToHostValue(containerId,SetContainerHostMapping.HOST_KEY);if (!hostAffinityEnabled || lastSeenOn == null) {lastSeenOn=ResourceRequestState.ANY_HOST;}log.info("Container was last seen on " + lastSeenOn);int retryCount=clusterManagerConfig.getContainerRetryCount();int retryWindowMs=clusterManagerConfig.getContainerRetryWindowMs();if (retryCount == 0) {log.error("Container ID {} ({}) failed, and retry count is set to 0, so shutting down the application master, and marking the job as failed.",containerId,containerIdStr);tooManyFailedContainers=true;} else if (retryCount > 0) {int currentFailCount;long lastFailureTime;if (containerFailures.containsKey(containerId)) {ResourceFailure failure=containerFailures.get(containerId);currentFailCount=failure.getCount() + 1;lastFailureTime=failure.getLastFailure();} else {currentFailCount=1;lastFailureTime=0L;}if (currentFailCount >= retryCount) {long lastFailureMsDiff=System.currentTimeMillis() - lastFailureTime;if (lastFailureMsDiff < retryWindowMs) {log.error("Container ID " + containerId + "("+ containerIdStr+ ") has failed "+ currentFailCount+ " times, with last failure "+ lastFailureMsDiff+ "ms ago. This is greater than retry count of "+ retryCount+ " and window of "+ retryWindowMs+ "ms , so shutting down the application master, and marking the job as failed.");tooManyFailedContainers=true;state.status=SamzaApplicationState.SamzaAppStatus.FAILED;} else {log.info("Resetting fail count for container ID {} back to 1, since last container failure ({}) for " + "this container ID was outside the bounds of the retry window.",containerId,containerIdStr);containerFailures.put(containerId,new ResourceFailure(1,System.currentTimeMillis()));}} else {log.info("Current fail count for container ID {} is {}.",containerId,currentFailCount);containerFailures.put(containerId,new ResourceFailure(currentFailCount,System.currentTimeMillis()));}}if (!tooManyFailedContainers) {log.info("Requesting a refactor container ");containerAllocator.requestResource(containerId,lastSeenOn);}}}}  }
class C{  protected void releaseResources(){  if (readOnly)   return;  assert lock.isHeldByCurrentThread();  if (!isComplete()) {    throw new IllegalStateException();  }  indices.clear();}  }
class C{  public boolean containsValue(int val){  Object[] keys=_set;  int[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  private int randomLevel(){  int x=randomSeed;  x^=x << 13;  x^=x >>> 17;  randomSeed=x^=x << 5;  if ((x & 0x80000001) != 0)   return 0;  int level=1;  while (((x>>>=1) & 1) != 0)   ++level;  return level;}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {  if (m_inExternalDTD)   return;  try {    DTDprolog();    outputEntityDecl(name,value);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public void marcarCajasConErroresCotejoExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String[] ids=request.getParameterValues("revisada");  if (!ArrayUtils.isEmpty(ids)) {    RelacionEntregaVO relacionEntrega=(RelacionEntregaVO)getFromTemporalSession(request,TransferenciasConstants.RELACION_KEY);    getGestionRelacionesBI(request).updateEstadoUnidadesInstalacion(ids,EstadoCotejo.ERRORES.getIdentificador(),relacionEntrega);  }  goLastClientExecuteLogic(mappings,form,request,response);}  }
class C{  protected int indexFirstOf(final String s,final String delims,int offset){  if (s == null || s.length() == 0) {    return -1;  }  if (delims == null || delims.length() == 0) {    return -1;  }  if (offset < 0) {    offset=0;  } else   if (offset > s.length()) {    return -1;  }  int min=s.length();  final char[] delim=delims.toCharArray();  for (int i=0; i < delim.length; i++) {    final int at=s.indexOf(delim[i],offset);    if (at >= 0 && at < min) {      min=at;    }  }  return (min == s.length()) ? -1 : min;}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (!(other instanceof LockGrantorId))   return false;  final LockGrantorId that=(LockGrantorId)other;  if (this.lockGrantorMember != that.lockGrantorMember && !(this.lockGrantorMember != null && this.lockGrantorMember.equals(that.lockGrantorMember)))   return false;  if (this.lockGrantorVersion != that.lockGrantorVersion)   return false;  if (this.lockGrantorSerialNumber != that.lockGrantorSerialNumber)   return false;  return true;}  }
class C{  public void testExportImportOneWithMarker_gpx(){  testExportImportOneWithMarker(TrackFileFormat.GPX);}  }
class C{  public void addContour(Iterable<? extends LatLon> contour){  if (contour == null) {    String msg=Logging.getMessage("nullValue.IterableIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.contours.addContour(contour);}  }
class C{  public boolean isLockSyssuperuser(){  boolean isLockSyssuperuser=false;  try {    String qual="WHERE " + UasDaoUserTbl.CD_ID.getName() + " =0";    int stat=DbSelectFns.selectLongInteger(null,"IUSERUSERHDR","STAT",qual);    if (stat > 0)     isLockSyssuperuser=true;  } catch (  Exception e) {    _logger.debug(e);  } finally {    System.out.println();  }  return isLockSyssuperuser;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.SETTER_DECLARATION__DEFINED_SETTER:    return definedSetter != null;case N4JSPackage.SETTER_DECLARATION__FPAR:  return fpar != null;}return super.eIsSet(featureID);}  }
class C{  public ThrowStatement createThrowStatement(){  ThrowStatementImpl throwStatement=new ThrowStatementImpl();  return throwStatement;}  }
class C{  private Object readResolve() throws ObjectStreamException {  Object result=null;  if (this.equals(TickType.MAJOR)) {    result=TickType.MAJOR;  } else   if (this.equals(TickType.MINOR)) {    result=TickType.MINOR;  }  return result;}  }
class C{  public int next(){  final int node=_currentNode;  if (node != NULL) {    _currentNode=getNextAttributeIdentity(node);    return returnNode(makeNodeHandle(node));  }  return NULL;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ORDINAL_OP___GREATER_OP_1:    getGreaterOp_1().clear();  return;case UmplePackage.ORDINAL_OP___LESS_OP_1:getLessOp_1().clear();return;case UmplePackage.ORDINAL_OP___MORE_OP_1:getMoreOp_1().clear();return;case UmplePackage.ORDINAL_OP___SMALLER_OP_1:getSmallerOp_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void testConstantIndegree(){  int indegree=RandomUtil.getInstance().nextInt(8) + 2;  int mlag=RandomUtil.getInstance().nextInt(9) + 1;  double percentHousekeeping=RandomUtil.getInstance().nextDouble() * 20.0;  SimpleRandomizer simpleRandomizer=new SimpleRandomizer(indegree,SimpleRandomizer.CONSTANT,mlag,percentHousekeeping);  simpleRandomizer.initialize(this.lagGraph);  SortedSet factors=lagGraph.getFactors();  for (Iterator it=factors.iterator(); it.hasNext(); ) {    String factor=(String)it.next();    SortedSet parents=lagGraph.getParents(factor);    if (1 != parents.size()) {      assertEquals(indegree,parents.size());    }  }}  }
class C{  public X509CertImpl(InputStream in) throws CertificateException {  try {    this.certificate=(Certificate)Certificate.ASN1.decode(in);    this.tbsCert=certificate.getTbsCertificate();    this.extensions=tbsCert.getExtensions();  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  @POST @Path("storage/properties") @Consumes(MediaType.APPLICATION_JSON) @ApiResponses(value={@ApiResponse(code=200,message="OK"),@ApiResponse(code=500,message="Unexpected error occurred")}) @ApiOperation(value="Inserts new properties into the storage and update existed") public Response insertStorageProperties(Map<String,String> properties){  try {    facade.storeStorageProperties(properties);    return Response.ok().build();  } catch (  Exception e) {    return handleException(e);  }}  }
class C{  private void restoreDynamicRemove(FacesContext context,ComponentStruct struct){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.finest("FaceletPartialStateManagementStrategy.restoreDynamicRemove");  }  UIComponent child=locateComponentByClientId(context,context.getViewRoot(),struct.clientId);  if (child != null) {    StateContext stateContext=StateContext.getStateContext(context);    stateContext.getDynamicComponents().put(struct.clientId,child);    UIComponent parent=child.getParent();    parent.getChildren().remove(child);  }}  }
class C{  public RecyclerDividerDecorator(Context context){  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);  mDivider=styledAttributes.getDrawable(0);  styledAttributes.recycle();  this.marginHorizontal=context.getResources().getDimensionPixelSize(R.dimen.base_recycler_margin);}  }
class C{  public final LC align(String ax,String ay){  if (ax != null)   alignX(ax);  if (ay != null)   alignY(ay);  return this;}  }
class C{  public NotificationChain basicSetSecond(Expression newSecond,NotificationChain msgs){  Expression oldSecond=second;  second=newSecond;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.TYPE_INFO__SECOND,oldSecond,newSecond);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  static boolean test(ImplicitType implicitType,AnnoType annoType) throws IOException {  System.err.println("test  implicit=" + implicitType + "  anno="+ annoType);  a_class.delete();  b_class.delete();  processorServices.delete();  List<String> opts=new ArrayList<String>();  opts.addAll(Arrays.asList("-d",".","-sourcepath",testSrc,"-classpath",testClasses,"-source","1.6","-Xlint:-options"));  if (implicitType.opt != null)   opts.add(implicitType.opt);switch (annoType) {case SERVICE:    createProcessorServices(Anno.class.getName());  break;case SPECIFY:opts.addAll(Arrays.asList("-processor",Anno.class.getName()));break;}JavaCompiler javac=ToolProvider.getSystemJavaCompiler();MyDiagListener dl=new MyDiagListener();StandardJavaFileManager fm=javac.getStandardFileManager(dl,null,null);File file=(implicitType != ImplicitType.NONE) ? a_java : b_java;Iterable<? extends JavaFileObject> files=fm.getJavaFileObjects(file);boolean ok=javac.getTask(null,fm,dl,opts,null,files).call();if (!ok) {error("compilation failed");return false;}if (implicitType != ImplicitType.NONE) {boolean expectClass=(implicitType != ImplicitType.OPT_NONE);if (b_class.exists() != expectClass) {if (b_class.exists()) error("B implicitly compiled unexpectedly"); else error("B not impliictly compiled");return false;}}String expectKey=null;if (implicitType == ImplicitType.OPT_UNSET) {switch (annoType) {case SERVICE:expectKey="compiler.warn.proc.use.proc.or.implicit";break;case SPECIFY:expectKey="compiler.warn.proc.use.implicit";break;}}if (expectKey == null) {if (dl.diagCodes.size() != 0) {error("no diagnostics expected");return false;}} else {if (!(dl.diagCodes.size() == 1 && dl.diagCodes.get(0).equals(expectKey))) {error("unexpected diagnostics generated");return false;}}return true;}  }
class C{  @Override public Object create(final ConfigurableFactoryContext ctx){  CreatureProtectionArea area;  area=new CreatureProtectionArea(getWidth(ctx),getHeight(ctx),getBlockedDefault(ctx));  defineCreatures(area,ctx);  return area;}  }
class C{  public HeaderCard(String key,String value,String comment,boolean nullable) throws HeaderCardException {  this(key,value,comment,nullable,true);}  }
class C{  public static void filterPeriodical(Image inputImg,int inStart,int inLen,int inStep,Image outputImg,int outStart,int outLen,int outStep,Filter filter){  int fStart=0;  int fEnd=0;  int iStart=0;  for (int i=0; i < outLen; i++) {    fStart=filter.getStart();    fEnd=filter.getEnd();    iStart=CommonUtil.mod(((2 * i) - fStart),inLen);    for (int j=fStart; j <= fEnd; j++) {      outputImg.getData()[outStart + i * outStep]+=filter.getData()[j - fStart] * inputImg.getData()[inStart + iStart * inStep];      iStart--;      if (iStart < 0) {        iStart+=inLen;      }    }  }}  }
class C{  public FileStorageTransferServer(RevenoClusterConfiguration config,FileSystemStorage storage){  this.config=config;  this.storage=storage;  this.executor=Executors.newFixedThreadPool(config.revenoDataSync().threadPoolSize(),new NamedThreadFactory("stf"));  this.mainListener=Executors.newSingleThreadExecutor(new NamedThreadFactory("stf-main"));}  }
class C{  protected void newEvent(){  if (this.outputInterval <= 0) {    return;  }  if (getSimTime() > this.lastReportTime + this.outputInterval) {    done();    init();  }}  }
class C{  private void parseMenu(XmlPullParser parser,AttributeSet attrs,IconData menu) throws XmlPullParserException, IOException {  MenuState menuState=new MenuState(menu);  int eventType=parser.getEventType();  String tagName;  boolean lookingForEndOfUnknownTag=false;  String unknownTagName=null;  do {    if (eventType == XmlPullParser.START_TAG) {      tagName=parser.getName();      if (tagName.equals(XML_MENU)) {        eventType=parser.next();        break;      }      throw new RuntimeException("Expecting menu, got " + tagName);    }    eventType=parser.next();  } while (eventType != XmlPullParser.END_DOCUMENT);  boolean reachedEndOfMenu=false;  while (!reachedEndOfMenu) {switch (eventType) {case XmlPullParser.START_TAG:      if (lookingForEndOfUnknownTag) {        break;      }    tagName=parser.getName();  if (tagName.equals(XML_GROUP)) {    menuState.readGroup(attrs);  } else   if (tagName.equals(XML_ITEM)) {    menuState.readItem(attrs);  } else   if (tagName.equals(XML_MENU)) {    IconData subMenu=menuState.addSubMenuItem();    parseMenu(parser,attrs,subMenu);  } else {    lookingForEndOfUnknownTag=true;    unknownTagName=tagName;  }break;case XmlPullParser.END_TAG:tagName=parser.getName();if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {lookingForEndOfUnknownTag=false;unknownTagName=null;} else if (tagName.equals(XML_GROUP)) {menuState.resetGroup();} else if (tagName.equals(XML_ITEM)) {if (!menuState.hasAddedItem()) {menuState.addItem();}} else if (tagName.equals(XML_MENU)) {reachedEndOfMenu=true;}break;case XmlPullParser.END_DOCUMENT:throw new RuntimeException("Unexpected end of document");}eventType=parser.next();}}  }
class C{  public void warning(SAXParseException exception) throws SAXException {  PrintWriter pw=getErrorWriter();  printLocation(pw,exception);  pw.println("Parser warning: " + exception.getMessage());}  }
class C{  private Collection<CLIQUEUnit<V>> initOneDimensionalUnits(Relation<V> database){  int dimensionality=RelationUtil.dimensionality(database);  double[] minima=new double[dimensionality];  double[] maxima=new double[dimensionality];  for (int d=0; d < dimensionality; d++) {    maxima[d]=-Double.MAX_VALUE;    minima[d]=Double.MAX_VALUE;  }  for (DBIDIter it=database.iterDBIDs(); it.valid(); it.advance()) {    V featureVector=database.get(it);    updateMinMax(featureVector,minima,maxima);  }  for (int i=0; i < maxima.length; i++) {    maxima[i]+=0.0001;  }  double[] unit_lengths=new double[dimensionality];  for (int d=0; d < dimensionality; d++) {    unit_lengths[d]=(maxima[d] - minima[d]) / xsi;  }  if (LOG.isDebuggingFiner()) {    StringBuilder msg=new StringBuilder();    msg.append("   minima: ").append(FormatUtil.format(minima,", ",FormatUtil.NF2));    msg.append("\n   maxima: ").append(FormatUtil.format(maxima,", ",FormatUtil.NF2));    msg.append("\n   unit lengths: ").append(FormatUtil.format(unit_lengths,", ",FormatUtil.NF2));    LOG.debugFiner(msg.toString());  }  double[][] unit_bounds=new double[xsi + 1][dimensionality];  for (int x=0; x <= xsi; x++) {    for (int d=0; d < dimensionality; d++) {      if (x < xsi) {        unit_bounds[x][d]=minima[d] + x * unit_lengths[d];      } else {        unit_bounds[x][d]=maxima[d];      }    }  }  if (LOG.isDebuggingFiner()) {    StringBuilder msg=new StringBuilder();    msg.append("   unit bounds ").append(FormatUtil.format(unit_bounds,"   "));    LOG.debugFiner(msg.toString());  }  List<CLIQUEUnit<V>> units=new ArrayList<>((xsi * dimensionality));  for (int x=0; x < xsi; x++) {    for (int d=0; d < dimensionality; d++) {      units.add(new CLIQUEUnit<V>(new CLIQUEInterval(d,unit_bounds[x][d],unit_bounds[x + 1][d])));    }  }  if (LOG.isDebuggingFiner()) {    StringBuilder msg=new StringBuilder();    msg.append("   total number of 1-dim units: ").append(units.size());    LOG.debugFiner(msg.toString());  }  return units;}  }
class C{  public synchronized Queue<T> buildQueue(){  checkMemoryManager();  OffHeapQueue<T> queue=new OffHeapQueue<T>(memoryManager,capacity,serializer);  return queue;}  }
class C{  void appendLocalizedValues(Document xmldoc,LocalizerServiceLocal localizer,Element parent,LocalizedObjectTypes localizedType,long key,String nodeName){  List<VOLocalizedText> localizedValues=localizer.getLocalizedValues(key,localizedType);  for (  VOLocalizedText text : localizedValues) {    Element element=xmldoc.createElement(nodeName);    element.setTextContent(text.getText());    element.setAttribute("locale",text.getLocale());    parent.appendChild(element);  }}  }
class C{  protected void notifyDataUpdated(DataChangeEvent... events){  List<DataListener> listeners=new LinkedList<DataListener>(dataListeners);  for (  DataListener dataListener : listeners) {    dataListener.dataUpdated(this,events);  }}  }
class C{  public boolean removeReminder(Reminder reminder){  return super.removeElement(reminder);}  }
class C{  public String register(String coreName,final CoreDescriptor desc,boolean skipRecovery) throws Exception {  return register(coreName,desc,false,false,skipRecovery);}  }
class C{  @NotNull default B append8bit(@NotNull CharSequence cs) throws BufferOverflowException, BufferUnderflowException {  return append8bit(cs,0,cs.length());}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.PROPERTY_ASSIGNMENT;}  }
class C{  public <T>T createDtoFromJson(String json,Class<T> dtoInterface){  return getDtoProvider(dtoInterface).fromJson(json);}  }
class C{  public void testIdWithADotAndASlash(){  String jndiName="jdbc.app1/DataSource";  String propertyString=DatasourcePropertySet.JNDI_LOCATION + "=" + jndiName;  DataSource ds=dataSourceConverter.fromPropertyString(propertyString);  assertEquals("DataSource",ds.getId());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private CompiledStatement assignStatementArguments(CompiledStatement stmt) throws SQLException {  boolean ok=false;  try {    if (limit != null) {      stmt.setMaxRows(limit.intValue());    }    Object[] argValues=null;    if (logger.isLevelEnabled(Level.TRACE) && argHolders.length > 0) {      argValues=new Object[argHolders.length];    }    for (int i=0; i < argHolders.length; i++) {      Object argValue=argHolders[i].getSqlArgValue();      FieldType fieldType=argFieldTypes[i];      SqlType sqlType;      if (fieldType == null) {        sqlType=argHolders[i].getSqlType();      } else {        sqlType=fieldType.getSqlType();      }      stmt.setObject(i,argValue,sqlType);      if (argValues != null) {        argValues[i]=argValue;      }    }    logger.debug("prepared statement '{}' with {} args",statement,argHolders.length);    if (argValues != null) {      logger.trace("prepared statement arguments: {}",(Object)argValues);    }    ok=true;    return stmt;  }  finally {    if (!ok) {      stmt.close();    }  }}  }
class C{  public void addAnnotation(String annotation,int index,double x,double y){  mAnnotations.add(index,annotation);  while (mStringXY.get(x) != null) {    x+=getPadding(x);  }  mStringXY.put(x,y);}  }
class C{  public Stage stage(){  return this.stage;}  }
class C{  protected boolean useSudo(){  return true;}  }
class C{  public IVariableBinding resolveVariable(){  return this.ast.getBindingResolver().resolveVariable(this);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public RAFDirectory(Path path,LockFactory lockFactory) throws IOException {  super(path,lockFactory);  path.toFile();}  }
class C{  private void writeClearRecord(DiskRegionView dr,RegionVersionVector rvv){  try {    HeapDataOutputStream hdos=new HeapDataOutputStream(32,Version.CURRENT);    hdos.write(IFREC_CLEAR_REGION_WITH_RVV_ID);    writeDiskRegionID(hdos,dr.getId());    Map<DiskStoreID,RegionVersionHolder> memberToVersion=rvv.getMemberToVersion();    hdos.writeInt(memberToVersion.size());    for (    Map.Entry<DiskStoreID,RegionVersionHolder> entry : memberToVersion.entrySet()) {      InternalDataSerializer.invokeToData(entry.getKey(),hdos);synchronized (entry.getValue()) {        InternalDataSerializer.invokeToData(entry.getValue(),hdos);      }    }    hdos.write(END_OF_RECORD_ID);    writeIFRecord(hdos,false);  } catch (  IOException ex) {    DiskAccessException dae=new DiskAccessException(LocalizedStrings.DiskInitFile_FAILED_INIT_FILE_WRITE_BECAUSE_0.toLocalizedString(ex),this.parent);    if (!this.compactInProgress) {      this.parent.handleDiskAccessException(dae);    }    throw dae;  }}  }
class C{  public CommandAPDU(int cla,int ins,int p1,int p2,int ne){  this(cla,ins,p1,p2,null,0,0,ne);}  }
class C{  public static boolean isValidQName(String value){  String[] split=value.split(":",-2);  if (split.length != 2) {    return false;  }  String prefix=split[0];  if (!"".equals(prefix)) {    if (!isPrefixStartChar(prefix.charAt(0))) {      return false;    }    for (int i=1; i < prefix.length(); i++) {      if (!isNameChar(prefix.charAt(i))) {        return false;      }    }  }  String name=split[1];  if (!"".equals(name)) {    if (!isNameStartChar(name.charAt(0))) {      return false;    }    for (int i=1; i < name.length(); i++) {      if (!isNameChar(name.charAt(i))) {        return false;      }    }  }  return true;}  }
class C{  public InlineQueryResultGif.InlineQueryResultGifBuilder gifWidth(int gifWidth){  this.gif_width=gifWidth;  return this;}  }
class C{  public static void goBack(){  if (verbose) {    log("goBack()");  }  Form f=Display.getInstance().getCurrent();  Command c=f.getBackCommand();  assertBool(c != null,"The current form doesn't have a back command at this moment! for form name " + f.getName());  f.dispatchCommand(c,new ActionEvent(c,ActionEvent.Type.Command));  waitFor(20);}  }
class C{  public PostConstructApplicationEvent(Application application){  super(application);}  }
class C{  private boolean isRegexUtil(String receiver){  return receiver.equals("RegexUtil") || receiver.endsWith(".RegexUtil");}  }
class C{  private static InterestResultPolicyImpl readInterestResultPolicy(DataInput in) throws IOException, ClassNotFoundException {  byte ordinal=in.readByte();  return (InterestResultPolicyImpl)InterestResultPolicy.fromOrdinal(ordinal);}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.CONFIGURATION_SOURCE;}  }
class C{  public void startDocument() throws SAXException {  try {    if (null == m_resultContentHandler)     createResultContentHandler(m_result);  } catch (  TransformerException te) {    throw new SAXException(te.getMessage(),te);  }  m_flushedStartDoc=false;  m_foundFirstElement=false;}  }
class C{  @Override public Element store(Object o){  Element e=new Element("fileLocations");  storeLocation(e,"defaultScriptLocation",FileUtil.getScriptsPath());  storeUserFilesLocation(e,FileUtil.getUserFilesPath());  e.setAttribute("class",this.getClass().getName());  return e;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public int readInt() throws IOException {  int ch1=in.read();  int ch2=in.read();  int ch3=in.read();  int ch4=in.read();  if ((ch1 | ch2 | ch3| ch4) < 0)   throw new EOFException();  return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8)+ (ch4));}  }
class C{  public static String leftBack(String source,String searchFor){  int index=source.lastIndexOf(searchFor);  if (index <= 0) {    return "";  }  return source.substring(0,index);}  }
class C{  public void testToArray2(){  LinkedBlockingDeque<Integer> q=populatedDeque(SIZE);  Integer[] ints=new Integer[SIZE];  Integer[] array=q.toArray(ints);  assertSame(ints,array);  for (int i=0; i < ints.length; i++)   assertSame(ints[i],q.remove());}  }
class C{  public void decode(int[] received,int twoS) throws ReedSolomonException {  GenericGFPoly poly=new GenericGFPoly(field,received);  int[] syndromeCoefficients=new int[twoS];  boolean noError=true;  for (int i=0; i < twoS; i++) {    int eval=poly.evaluateAt(field.exp(i + field.getGeneratorBase()));    syndromeCoefficients[syndromeCoefficients.length - 1 - i]=eval;    if (eval != 0) {      noError=false;    }  }  if (noError) {    return;  }  GenericGFPoly syndrome=new GenericGFPoly(field,syndromeCoefficients);  GenericGFPoly[] sigmaOmega=runEuclideanAlgorithm(field.buildMonomial(twoS,1),syndrome,twoS);  GenericGFPoly sigma=sigmaOmega[0];  GenericGFPoly omega=sigmaOmega[1];  int[] errorLocations=findErrorLocations(sigma);  int[] errorMagnitudes=findErrorMagnitudes(omega,errorLocations);  for (int i=0; i < errorLocations.length; i++) {    int position=received.length - 1 - field.log(errorLocations[i]);    if (position < 0) {      throw new ReedSolomonException("Bad error location");    }    received[position]=GenericGF.addOrSubtract(received[position],errorMagnitudes[i]);  }}  }
class C{  public MWMSectionDetail(Properties ctx,int WM_Section_Detail_ID,String trxName){  super(ctx,WM_Section_Detail_ID,trxName);  if (WM_Section_Detail_ID == 0) {  }}  }
class C{  public JSONArray put(int value){  this.put(new Integer(value));  return this;}  }
class C{  protected void onStore(int len){}  }
class C{  public String debugDump(){  return debugDump(0);}  }
class C{  public GenericTagHandler(Graphics2D graphics){  super();  this.graphics=graphics;  this.clearedText=new StringBuffer();  this.tags=new Hashtable<String,Integer>();}  }
class C{  public void invokeStatic(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKESTATIC,owner,method);}  }
class C{  private void abstactAskService(final String... args) throws IOException {  setMethodisPostUrlEncodedData();  serviceRequest("update","PREFIX eg: <http://example.com/a#> INSERT { eg:a eg:p \"rs123\" ; eg:q 123, 100 } WHERE {}");  final StringBuilder bld=new StringBuilder();  bld.append("base <");  bld.append(m_serviceURL);  bld.append("/sparql>");  for (  String arg : args) {    bld.append('\n');    bld.append(arg);  }  if (log.isInfoEnabled())   log.info(bld.toString());  final String result=serviceRequest("query",bld.toString());  if (log.isInfoEnabled())   log.info(result);  assertTrue(result.contains("true"));}  }
class C{  public void stopBlock(boolean sndMsgs){synchronized (this) {    blockP=null;    blockCls.clear();    blockP=null;    if (sndMsgs) {      for (      T2<ClusterNode,GridIoMessage> msg : blockedMsgs) {        try {          ignite.log().info("Send blocked message [node=" + msg.get1().id() + ", msg="+ msg.get2().message()+ ']');          super.sendMessage(msg.get1(),msg.get2());        } catch (        Throwable e) {          U.error(ignite.log(),"Failed to send blocked message: " + msg,e);        }      }    }    blockedMsgs.clear();  }}  }
class C{  public static Integer appendSectionComment(final SQLProvider provider,final int moduleId,final int sectionId,final String commentText,final Integer userId) throws CouldntSaveDataException {  Preconditions.checkArgument(moduleId > 0,"Error: module id must be greater then zero");  Preconditions.checkArgument(sectionId >= 0,"Error: section id must be greater or equal than zero");  Preconditions.checkNotNull(commentText,"Error: comment text argument can not be null");  Preconditions.checkNotNull(userId,"Error: user id argument can not be null");  final CConnection connection=provider.getConnection();  final String function=" { ? = call append_section_comment(?, ?, ?, ?) } ";  try (CallableStatement appendCommentFunction=connection.getConnection().prepareCall(function)){    appendCommentFunction.registerOutParameter(1,Types.INTEGER);    appendCommentFunction.setInt(2,moduleId);    appendCommentFunction.setInt(3,sectionId);    appendCommentFunction.setInt(4,userId);    appendCommentFunction.setString(5,commentText);    appendCommentFunction.execute();    final int commentId=appendCommentFunction.getInt(1);    if (appendCommentFunction.wasNull()) {      throw new CouldntSaveDataException("Error: Got an comment id of null from the database");    }    return commentId;  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  protected void recordFeedback(DrawContext dc,WWIcon icon,Vec4 modelPoint,Rectangle screenRect){  if (!this.isFeedbackEnabled(dc,icon))   return;  this.doRecordFeedback(dc,icon,modelPoint,screenRect);}  }
class C{  protected TemplateModelException(Throwable cause,Environment env,String description,boolean preventAmbiguity){  super(description,cause,env);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Matrixf4x4(){  this.matrix=new float[16];  Matrix.setIdentityM(this.matrix,0);  matrixValid=true;}  }
class C{  public void transform(Source source) throws TransformerException {  transform(source,true);}  }
class C{  boolean isDragEnabled(){  return dragEnabled;}  }
class C{  public WaferMapRenderer(){  this(null,null);}  }
class C{  private void dealBody(String html){  html.replaceAll(Config.IMAGE_REG,"");}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public void addCaretListener(final ICaretListener listener){  Preconditions.checkNotNull(listener,"Error: Listener can't be null");  if (!m_listeners.contains(listener)) {    m_listeners.add(listener);  }}  }
class C{  public String toSource(String className) throws Exception {  StringBuffer text=new StringBuffer("class ");  Attribute c=m_Instances.classAttribute();  text.append(className).append(" {\n" + "  public static double classify(Object[] i) {\n");  text.append("    /* " + m_Instances.attribute(m_AttIndex).name() + " */\n");  text.append("    if (i[").append(m_AttIndex);  text.append("] == null) { return ");  text.append(sourceClass(c,m_Distribution[2])).append(";");  if (m_Instances.attribute(m_AttIndex).isNominal()) {    text.append(" } else if (((String)i[").append(m_AttIndex);    text.append("]).equals(\"");    text.append(m_Instances.attribute(m_AttIndex).value((int)m_SplitPoint));    text.append("\")");  } else {    text.append(" } else if (((Double)i[").append(m_AttIndex);    text.append("]).doubleValue() <= ").append(m_SplitPoint);  }  text.append(") { return ");  text.append(sourceClass(c,m_Distribution[0])).append(";");  text.append(" } else { return ");  text.append(sourceClass(c,m_Distribution[1])).append(";");  text.append(" }\n  }\n}\n");  return text.toString();}  }
class C{  private Object readResolve() throws java.io.ObjectStreamException {switch (rule) {case RULE_OVER:    return OVER;case RULE_IN:  return IN;case RULE_OUT:return OUT;case RULE_ATOP:return ATOP;case RULE_XOR:return XOR;case RULE_ARITHMETIC:return this;case RULE_MULTIPLY:return MULTIPLY;case RULE_SCREEN:return SCREEN;case RULE_DARKEN:return DARKEN;case RULE_LIGHTEN:return LIGHTEN;default :throw new Error("Unknown Composite Rule type");}}  }
class C{  private void handleSubscriptionError(AzureAllocationContext ctx,String namespace,Throwable e){  if (e instanceof CloudException) {    CloudException ce=(CloudException)e;    CloudError body=ce.getBody();    if (body != null) {      String code=body.getCode();      if (MISSING_SUBSCRIPTION_CODE.equals(code)) {        registerSubscription(ctx,namespace);        return;      }    }  }  handleError(ctx,e);}  }
class C{  public View newGroupView(boolean isExpanded,ViewGroup parent){  return mInflater.inflate((isExpanded) ? mExpandedGroupLayout : mCollapsedGroupLayout,parent,false);}  }
class C{  protected void sequence_ParameterizedTypeRefStructural_TStructMemberList_TypeRef_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Vector3d zero(){  x=0.0;  y=0.0;  z=0.0;  return this;}  }
class C{  BarcodeRow(int width){  this.row=new byte[width];  currentLocation=0;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public Comment_ createComment_(){  Comment_Impl comment_=new Comment_Impl();  return comment_;}  }
class C{  private int computeChannel(int c1,int c2,float percent){  return c1 + (int)((percent * (c2 - c1)) + .5);}  }
class C{  @Override public int read() throws IOException {  if (newLineWasRead) {    line+=1;    column=1;    newLineWasRead=false;  }  int charRead=super.read();  if (charRead > -1) {    char c=(char)charRead;    if (c == '\r' || c == '\n') {      newLineWasRead=true;      if (c == '\r') {        mark(1);        c=(char)super.read();        if (c != '\n') {          reset();        }      }    } else {      column+=1;    }  }  return charRead;}  }
class C{  public ConnectionResult connect(Map<Sha256Hash,Transaction> transactions,ConnectMode mode){  Transaction tx=transactions.get(outpoint.getHash());  if (tx == null) {    return TransactionInput.ConnectionResult.NO_SUCH_TX;  }  return connect(tx,mode);}  }
class C{  public void fireTableStructureChanged(){  fireTableChanged(new TableModelEvent(this,TableModelEvent.HEADER_ROW));}  }
class C{  public FrequentItemsetsResult run(Database db,final Relation<BitVector> relation){  final int dim=RelationUtil.dimensionality(relation);  final VectorFieldTypeInformation<BitVector> meta=RelationUtil.assumeVectorField(relation);  final int minsupp=getMinimumSupport(relation.size());  LOG.verbose("Build 1-dimensional transaction lists.");  Duration ctime=LOG.newDuration(STAT + "eclat.transposition.time").begin();  DBIDs[] idx=buildIndex(relation,dim,minsupp);  LOG.statistics(ctime.end());  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Building frequent itemsets",idx.length,LOG) : null;  Duration etime=LOG.newDuration(STAT + "eclat.extraction.time").begin();  final List<Itemset> solution=new ArrayList<>();  for (int i=0; i < idx.length; i++) {    LOG.incrementProcessed(prog);    extractItemsets(idx,i,minsupp,solution);  }  LOG.ensureCompleted(prog);  Collections.sort(solution);  LOG.statistics(etime.end());  LOG.statistics(new LongStatistic(STAT + "frequent-itemsets",solution.size()));  return new FrequentItemsetsResult("Eclat","eclat",solution,meta);}  }
class C{  protected void testPatch() throws Throwable {  Operation op=Operation.createPatch(URI.create(echoServiceUri));  testEchoOperation(op);}  }
class C{  private void createTargetCollection() throws Exception {  List<String> nodeNames=this.startServers(shardCount * replicationFactor);  this.collectionToNodeNames.put(TARGET_COLLECTION,nodeNames);  this.createCollection(TARGET_COLLECTION);  this.waitForRecoveriesToFinish(TARGET_COLLECTION,true);  this.updateMappingsFromZk(TARGET_COLLECTION);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImp;  DOMImplementation domImpl;  DocumentType docType;  DocumentType docTypeNull=null;  NamedNodeMap nodeMap;  Entity entity4;  Entity entityImp4;  Element element;  CharacterData cdata;  ProcessingInstruction pi;  NodeList childList;  NodeList elemchildList;  String ent4Name;  String ent4ImpName;  String cdataVal;  String piTargetVal;  String piDataVal;  doc=(Document)load("staffNS",true);  domImpl=doc.getImplementation();  docType=doc.getDoctype();  docImp=domImpl.createDocument("http://www.w3.org/DOM/Test","a:b",docTypeNull);  nodeMap=docType.getEntities();  entity4=(Entity)nodeMap.getNamedItem("ent4");  entityImp4=(Entity)docImp.importNode(entity4,true);  childList=entityImp4.getChildNodes();  element=(Element)childList.item(0);  elemchildList=element.getChildNodes();  cdata=(CharacterData)elemchildList.item(0);  pi=(ProcessingInstruction)childList.item(1);  ent4Name=entity4.getNodeName();  ent4ImpName=entityImp4.getNodeName();  cdataVal=cdata.getData();  piTargetVal=pi.getTarget();  piDataVal=pi.getData();  assertEquals("documentimportnode20_Ent4NodeName",ent4Name,ent4ImpName);  assertEquals("documentimportnode20_Cdata","Element data",cdataVal);  assertEquals("documentimportnode20_PITarget","PItarget",piTargetVal);  assertEquals("documentimportnode20_PIData","PIdata",piDataVal);}  }
class C{  public void executeAnalysis(DashboardAnalysis analysis,QueryWriter writer,boolean lazy) throws ComputingException, InterruptedException {  try {    long start=System.currentTimeMillis();    logger.info("start of sql generation");    List<MeasureGroup> groups=analysis.getGroups();    if (groups.isEmpty()) {      SimpleQuery query=this.genSimpleQuery(analysis);      long stop=System.currentTimeMillis();      logger.info("task=" + this.getClass().getName() + " method=executeAnalysis.SQLGeneration"+ " duration="+ (stop - start)+ " error=false status=done");      try {        String sql=query.render();        SQLStats queryLog=new SQLStats(query.toString(),"executeAnalysis.SQLGeneration",sql,(stop - start),analysis.getUniverse().getProject().getId().getProjectId());        queryLog.setError(false);        PerfDB.INSTANCE.save(queryLog);      } catch (      RenderingException e) {        e.printStackTrace();      }      QueryRunner runner=new QueryRunner(universe.getContext(),query,lazy,writer,analysis.getJobId());      runner.run();    } else {      if (groups.size() != 1) {        throw new ComputingException("the analysis cannot be exported in a single query - try removing some metrics");      }      MeasureGroup group=groups.get(0);      SimpleQuery query=genAnalysisQueryWithSoftFiltering(analysis,group,false,false);      QueryRunner runner=new QueryRunner(universe.getContext(),query,lazy,writer,analysis.getJobId());      runner.run();    }  } catch (  ScopeException e) {    throw new ComputingException(e);  }catch (  SQLScopeException e) {    throw new ComputingException(e);  }}  }
class C{  private void synchronizeDBSequencesDropUnused(){  resetDBObjects(DBObject_Sequence.class);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"synchronizeDBSequencesDropUnused",new Object[]{m_objectTypes,m_direction});  m_counterDrp=new Integer(0);  m_totalDrp=new Integer(0);  if (m_targetMap != null && m_targetMap.size() > 0) {    for (Iterator<String> it=m_targetMap.keySet().iterator(); it.hasNext(); ) {      String key=it.next();      DBObject targetObj=m_targetMap.get(key);      if (!m_target.isObjectExists(targetObj.getName(),m_sourceMap)) {        if (targetObj.getCustomizationLevel() == s_parameters.CUSTOMNONE) {          if (targetObj.drop())           m_counterDrp=new Integer(m_counterDrp.intValue() + 1);          m_totalDrp=new Integer(m_totalDrp.intValue() + 1);        }      }    }  }  logResults();}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.ENUM_MAPPING_RULE;}  }
class C{  public double intercept(){  return alpha;}  }
class C{  public static DetachedBaggage decode(String encodedContext,StringEncoding encoding){  byte[] bytes=null;  try {    bytes=encoding.encoder.decode(encodedContext);  } catch (  Throwable t) {  }  return deserialize(bytes);}  }
class C{  private static FDBigInteger valueOfPow2(int p2){  int wordcount=p2 >> 5;  int bitcount=p2 & 0x1f;  return new FDBigInteger(new int[]{1 << bitcount},wordcount);}  }
class C{  public DataRow removeDataRow(int index){  return dataList.remove(index);}  }
class C{  public StringBody(final String text,final String mimeType,Charset charset) throws UnsupportedEncodingException {  super(mimeType);  if (text == null) {    throw new IllegalArgumentException("Text may not be null");  }  if (charset == null) {    charset=Charset.forName(HTTP.UTF_8);  }  this.content=text.getBytes(charset.name());  this.charset=charset;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN_NODE_TABLE\"";  db.execSQL(sql);}  }
class C{  @SuppressWarnings("unchecked") public T remove(int x,int y,int z){  int index=getIndex(x,y,z);  XYZAddressable bucket=this.buckets[index];  while (bucket != null) {    if (bucket.getX() == x && bucket.getY() == y && bucket.getZ() == z) {      this.collapseBucket(index);      return (T)bucket;    }    index=getNextIndex(index);    bucket=this.buckets[index];  }  return null;}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  append(m_doc.createProcessingInstruction(target,data));}  }
class C{  @Override protected List<Trip> routes2Trips(String path2InpFile,String notUsed,String notUsedToo){  final List<Trip> trips=new ArrayList<Trip>();  try {    final BufferedReader in=IOUtils.getBufferedReader(path2InpFile);    String line=in.readLine();    Pattern rdPattern=Pattern.compile("ROUTING_DECISION .*");    Pattern rPattern=Pattern.compile(" +ROUTE .*");    Pattern oPattern=Pattern.compile(" +OVER .*");    Pattern nPattern=Pattern.compile(" *");    Pattern numPattern=Pattern.compile(" +\\d+.*");    String routingDecision="";    Trip currentTrip=null;    boolean inTrip=false;    while (line != null) {      if (rdPattern.matcher(line).matches()) {        String[] lineVals=line.split(" +");        routingDecision=lineVals[1];      }      if (rPattern.matcher(line).matches()) {        String[] lineVals=line.split(" +");        if (currentTrip != null) {          trips.add(currentTrip);        }        currentTrip=new Trip(Id.create(routingDecision + "-" + lineVals[2],Trip.class),0.0);        inTrip=true;      }      if (inTrip) {        if (oPattern.matcher(line).matches()) {          String[] lineVals=line.split(" +");          for (int i=2; i < lineVals.length; i++) {            currentTrip.links.add(Id.create(Long.parseLong(lineVals[i]),Link.class));          }        } else         if (nPattern.matcher(line).matches()) {          trips.add(currentTrip);          currentTrip=null;          inTrip=false;        } else         if (numPattern.matcher(line).matches()) {          String[] lineVals=line.split(" +");          for (int i=1; i < lineVals.length; i++) {            currentTrip.links.add(Id.create(Long.parseLong(lineVals[i]),Link.class));          }        }      }      line=in.readLine();    }  } catch (  IOException e) {    System.out.println("Reading of " + path2InpFile + " failed.");    e.printStackTrace();  }  return trips;}  }
class C{  public void testPeekLast(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=SIZE - 1; i >= 0; --i) {    assertEquals(i,q.peekLast());    assertEquals(i,q.pollLast());    assertTrue(q.peekLast() == null || !q.peekLast().equals(i));  }  assertNull(q.peekLast());}  }
class C{  public <T>void cleanNullReferencesAll(){  for (  Map<Object,Reference<Object>> objectMap : classMaps.values()) {    cleanMap(objectMap);  }}  }
class C{  public void post(Runnable runnable){  send(runnable);}  }
class C{  public Object lookup(String name) throws NamingException {  checkIsDestroyed();  try {    return lookup(nameParser.parse(name));  } catch (  NameNotFoundException e) {    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (writer.infoEnabled())     writer.info(LocalizedStrings.ContextImpl_CONTEXTIMPL_LOOKUP_ERROR_WHILE_LOOKING_UP_0,name,e);    throw new NameNotFoundException(LocalizedStrings.ContextImpl_NAME_0_NOT_FOUND.toLocalizedString(new Object[]{name}));  }}  }
class C{  public static NumericDolphinBinder<Long> bindLong(Property<Long> property){  requireNonNull(property,"property");  return new LongDolphinBinder(property);}  }
class C{  private void validateBusinessObjectData(BusinessObjectDataEntity businessObjectDataEntity,BusinessObjectDataKey businessObjectDataKey){  Assert.isTrue(StoragePolicySelectorServiceImpl.SUPPORTED_BUSINESS_OBJECT_DATA_STATUSES.contains(businessObjectDataEntity.getStatus().getCode()),String.format("Business object data status \"%s\" is not supported by the storage policy feature. Business object data: {%s}",businessObjectDataEntity.getStatus().getCode(),businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));}  }
class C{  public void load() throws SAXException, IOException {  final GroupsXMLLoader groupsLoader=new GroupsXMLLoader(uri);  final List<URI> zoneGroups=groupsLoader.load();  for (  final URI tempUri : zoneGroups) {    LOGGER.debug("Loading zone group [" + tempUri + "]");    final ZonesXMLLoader loader=new ZonesXMLLoader(tempUri);    try {      loader.load();    } catch (    final SAXException ex) {      LOGGER.error("Error loading zone group: " + tempUri,ex);    }catch (    final IOException ex) {      LOGGER.error("Error loading zone group: " + tempUri,ex);    }  }}  }
class C{  public static IJavaSearchScope createHierarchyScope(IType type,WorkingCopyOwner owner) throws JavaModelException {  return BasicSearchEngine.createHierarchyScope(type,owner);}  }
class C{  private static void trySetRenderArgs(Map<String,Promise<?>> promises){  for (  Map.Entry<String,Promise<?>> entry : promises.entrySet()) {    trySetRenderArg(entry.getKey(),entry.getValue());  }}  }
class C{  public static int rgbFromCmyk(float[] cmyk){  float cyan=cmyk[0];  float magenta=cmyk[1];  float yellow=cmyk[2];  float black=cmyk[3];  int red=(int)((1.0f - Math.min(1.0f,cyan * (1.0f - black) + black)) * 255);  int green=(int)((1.0f - Math.min(1.0f,magenta * (1.0f - black) + black)) * 255);  int blue=(int)((1.0f - Math.min(1.0f,yellow * (1.0f - black) + black)) * 255);  return ((0xff & red) << 16) + ((0xff & green) << 8) + (0xff & blue);}  }
class C{  public DefaultIoEventSizeEstimator(){  class2size.put(boolean.class,4);  class2size.put(byte.class,1);  class2size.put(char.class,2);  class2size.put(int.class,4);  class2size.put(short.class,2);  class2size.put(long.class,8);  class2size.put(float.class,4);  class2size.put(double.class,8);  class2size.put(void.class,0);}  }
class C{  public boolean textboxKeyTyped(char p_146201_1_,int p_146201_2_){  if (!field_146213_o)   return false; else switch (p_146201_1_) {case 1:    func_146202_e();  func_146199_i(0);return true;case 3:GuiScreen.setClipboardString(func_146207_c());return true;case 22:if (field_146226_p) func_146191_b(GuiScreen.getClipboardString());return true;case 24:GuiScreen.setClipboardString(func_146207_c());if (field_146226_p) func_146191_b("");return true;default :switch (p_146201_2_) {case 14:if (GuiScreen.isCtrlKeyDown()) {if (field_146226_p) func_146177_a(-1);} else if (field_146226_p) func_146175_b(-1);return true;case 199:if (GuiScreen.isShiftKeyDown()) func_146199_i(0); else func_146196_d();return true;case 203:if (GuiScreen.isShiftKeyDown()) {if (GuiScreen.isCtrlKeyDown()) func_146199_i(func_146183_a(-1,func_146186_n())); else func_146199_i(func_146186_n() - 1);} else if (GuiScreen.isCtrlKeyDown()) func_146190_e(func_146187_c(-1)); else func_146182_d(-1);return true;case 205:if (GuiScreen.isShiftKeyDown()) {if (GuiScreen.isCtrlKeyDown()) func_146199_i(func_146183_a(1,func_146186_n())); else func_146199_i(func_146186_n() + 1);} else if (GuiScreen.isCtrlKeyDown()) func_146190_e(func_146187_c(1)); else func_146182_d(1);return true;case 207:if (GuiScreen.isShiftKeyDown()) func_146199_i(field_146216_j.length()); else func_146202_e();return true;case 211:if (GuiScreen.isCtrlKeyDown()) {if (field_146226_p) func_146177_a(1);} else if (field_146226_p) func_146175_b(1);return true;default :if (ChatAllowedCharacters.isAllowedCharacter(p_146201_1_)) {if (field_146226_p) func_146191_b(Character.toString(p_146201_1_));return true;} else return false;}}}  }
class C{  public static String hash(String value){  return Hash.sha256(value).substring(0,24);}  }
class C{  public int findLastVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,false,true);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public static Test suite(){  return new TestSuite(TestMeasurementSimulator.class);}  }
class C{  public synchronized void exitIfErrors(){  if (errors) {    println(a("SYSTEM EXITING FROM ERRORS\n"),ALL_MESSAGE_LOGS,true);    exitWithError(this,error.toString(),throwsErrors);  }}  }
class C{  public Object parse(Map params,URL url,String charset){  return parseURL(url,params,charset);}  }
class C{  @Override public void registerByteSizeObserver(RawUnionValue union,ElementByteSizeObserver observer,Context context) throws Exception {  int index=getIndexForEncoding(union);  observer.update(VarInt.getLength(index));  @SuppressWarnings("unchecked") Coder<Object> coder=(Coder<Object>)elementCoders.get(index);  coder.registerByteSizeObserver(union.getValue(),observer,context);}  }
class C{  public final int ordinal(){  return ordinal;}  }
class C{  public LogKillEventCommand(Entity killed,Killer killer){  this.frozenKilled=(Entity)killed.clone();  this.frozenKiller=(Killer)killer.clone();}  }
class C{  private void removeFromPriceModel(){  VOPriceModel priceModel=priceModelBean.getPriceModel();  List<VOSteppedPrice> steps=priceModelBean.getSteppedPrices();  if (steps != null && index >= 0 && index < steps.size()) {    steps.remove(index);    if (steps.size() == 1) {      priceModel.setPricePerUserAssignment(steps.get(0).getPrice());      steps.remove(0);    }  }}  }
class C{  public Lex(String s){  lastChar=-1;  textBuffer=new StringBuffer();  currentToken=new Token();  lookAheadTokens=null;  input=s;  position=0;  maxlen=s.length();  lineNumber=0;}  }
class C{  @Override protected void onFinishInflate(){  super.onFinishInflate();  if (!isInEditMode()) {    inflateView();    configDragViewHelper();  }}  }
class C{  public static Object stringToValue(String string){  Double d;  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=string.charAt(0);  if ((b >= '0' && b <= '9') || b == '-') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1) {        d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (string.equals(myLong.toString())) {          if (myLong == myLong.intValue()) {            return myLong.intValue();          }          return myLong;        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
class C{  protected void generateOpenNetworkConfig(){  if (security != SECURITY_NONE)   throw new IllegalStateException();  if (mConfig != null)   return;  mConfig=new WifiConfiguration();  mConfig.SSID=AccessPoint.convertToQuotedString(ssid);  mConfig.allowedKeyManagement.set(KeyMgmt.NONE);}  }
class C{  public ForumPostConfig create(ForumPostConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/create-forum-post",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    ForumPostConfig post=new ForumPostConfig();    post.parseXML(root);    return post;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public static DeleteSessionsForSessionIdResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteSessionsForSessionIdResponseE object=new DeleteSessionsForSessionIdResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","deleteSessionsForSessionIdResponse").equals(reader.getName())) {          object.setDeleteSessionsForSessionIdResponse(DeleteSessionsForSessionIdResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public static boolean isReallyWellFormedSmsAddress(String address){  String networkPortion=PhoneNumberUtils.extractNetworkPortion(address);  return (!(networkPortion.equals("+") || TextUtils.isEmpty(networkPortion))) && isReallyDialable(networkPortion);}  }
class C{  public Builder deletePhotos(){  deleteFields.add("photos");  return this;}  }
class C{  public ParcelFileDescriptor openDownloadedFile(long id) throws FileNotFoundException {  return mResolver.openFileDescriptor(getDownloadUri(id),"r");}  }
class C{  public HtmlReporter(OutputStream out,String title){  this.out=out;  this.title=title;}  }
class C{  public static boolean canDockWest(List constraints){  for (Iterator iter=constraints.iterator(); iter.hasNext(); ) {    DockConstraint dc=(DockConstraint)iter.next();    if (!dc.canDockWest())     return false;  }  return true;}  }
class C{  private void createQuadProgram() throws IOException {  int program=glCreateProgram();  int vshader=AtomicDemo.createShader("org/lwjgl/demo/opengl/raytracing/quad.vs",GL_VERTEX_SHADER,"330");  int fshader=AtomicDemo.createShader("org/lwjgl/demo/opengl/raytracing/quad.fs",GL_FRAGMENT_SHADER,"330");  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertex");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.quadProgram=program;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ParseFile(File file,String contentType){  this(new State.Builder().name(file.getName()).mimeType(contentType).build());  this.file=file;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:50.904 -0500",hash_original_method="0DC00ECED2377219DA9814104C103031",hash_generated_method="A20D525512F1D32F192CDD5423DF454C") public static byte[] encode(BearerData bData){  bData.hasUserDataHeader=((bData.userData != null) && (bData.userData.userDataHeader != null));  try {    BitwiseOutputStream outStream=new BitwiseOutputStream(200);    outStream.write(8,SUBPARAM_MESSAGE_IDENTIFIER);    encodeMessageId(bData,outStream);    if (bData.userData != null) {      outStream.write(8,SUBPARAM_USER_DATA);      encodeUserData(bData,outStream);    }    if (bData.callbackNumber != null) {      outStream.write(8,SUBPARAM_CALLBACK_NUMBER);      encodeCallbackNumber(bData,outStream);    }    if (bData.userAckReq || bData.deliveryAckReq || bData.readAckReq|| bData.reportReq) {      outStream.write(8,SUBPARAM_REPLY_OPTION);      encodeReplyOption(bData,outStream);    }    if (bData.numberOfMessages != 0) {      outStream.write(8,SUBPARAM_NUMBER_OF_MESSAGES);      encodeMsgCount(bData,outStream);    }    if (bData.validityPeriodRelativeSet) {      outStream.write(8,SUBPARAM_VALIDITY_PERIOD_RELATIVE);      encodeValidityPeriodRel(bData,outStream);    }    if (bData.privacyIndicatorSet) {      outStream.write(8,SUBPARAM_PRIVACY_INDICATOR);      encodePrivacyIndicator(bData,outStream);    }    if (bData.languageIndicatorSet) {      outStream.write(8,SUBPARAM_LANGUAGE_INDICATOR);      encodeLanguageIndicator(bData,outStream);    }    if (bData.displayModeSet) {      outStream.write(8,SUBPARAM_MESSAGE_DISPLAY_MODE);      encodeDisplayMode(bData,outStream);    }    if (bData.priorityIndicatorSet) {      outStream.write(8,SUBPARAM_PRIORITY_INDICATOR);      encodePriorityIndicator(bData,outStream);    }    if (bData.alertIndicatorSet) {      outStream.write(8,SUBPARAM_ALERT_ON_MESSAGE_DELIVERY);      encodeMsgDeliveryAlert(bData,outStream);    }    if (bData.messageStatusSet) {      outStream.write(8,SUBPARAM_MESSAGE_STATUS);      encodeMsgStatus(bData,outStream);    }    return outStream.toByteArray();  } catch (  BitwiseOutputStream.AccessException ex) {    Log.e(LOG_TAG,"BearerData encode failed: " + ex);  }catch (  CodingException ex) {    Log.e(LOG_TAG,"BearerData encode failed: " + ex);  }  return null;}  }
