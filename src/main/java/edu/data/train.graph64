class C{  public List<Entity> entities(){  return entities;}  }
class C{  public static RenameParticipant[] loadRenameParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,RenameArguments arguments,String[] affectedNatures,SharableParticipants shared){  return loadRenameParticipants(status,processor,element,arguments,null,affectedNatures,shared);}  }
class C{  @Override public boolean isResetted(){  return (lastTime == 0 && shakePosition.isResetted() && shakeLastPosition.isResetted());}  }
class C{  @Override public String toString(){  return toString(0);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int which=getArg0AsNode(xctxt);  if (DTM.NULL != which) {    return new XString("N" + Integer.toHexString(which).toUpperCase());  } else   return XString.EMPTYSTRING;}  }
class C{  @Override public int length(){  return subeffects.size();}  }
class C{  public static void UF9(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  int count3=0;  double sum1=0.0;  double sum2=0.0;  double sum3=0.0;  double yj;  double E=0.1;  for (int j=3; j <= nx; j++) {    yj=x[j - 1] - 2.0 * x[1] * Math.sin(2.0 * PI * x[0] + j * PI / nx);    if (j % 3 == 1) {      sum1+=yj * yj;      count1++;    } else     if (j % 3 == 2) {      sum2+=yj * yj;      count2++;    } else {      sum3+=yj * yj;      count3++;    }  }  yj=(1.0 + E) * (1.0 - 4.0 * (2.0 * x[0] - 1.0) * (2.0 * x[0] - 1.0));  if (yj < 0.0) {    yj=0.0;  }  f[0]=0.5 * (yj + 2 * x[0]) * x[1] + 2.0 * sum1 / (double)count1;  f[1]=0.5 * (yj - 2 * x[0] + 2.0) * x[1] + 2.0 * sum2 / (double)count2;  f[2]=1.0 - x[1] + 2.0 * sum3 / (double)count3;}  }
class C{  public GroupingSearch(String groupField){  this(groupField,null,null,null);}  }
class C{  @Interruptible private static void printPhaseStatXml(Counter c,int p,Phase phase){  openStatXml(c.getName());  Xml.attribute("suffix",c.getColumnSuffix());  Xml.openAttribute("value");  if (phase == Phase.COMBINED) {    c.printCount(p);  } else {    c.printCount(p);    Xml.closeAttribute();    Xml.openAttribute("phase");    Log.write(phase.name);  }  Xml.closeAttribute();  closeStatXml();}  }
class C{  public void mouseReleased(MouseEvent evt){  if (evt.isPopupTrigger()) {    createPopup(evt.getPoint());  }}  }
class C{  public final boolean isApplicable() throws CoreException {  return getProcessor().isApplicable();}  }
class C{  private void cmd_dialog(){  Integer oldValue=0;  try {    oldValue=(Integer)getValue();  } catch (  Exception npe) {  }  int oldValueInt=oldValue == null ? 0 : oldValue.intValue();  int M_AttributeSetInstance_ID=oldValueInt;  int M_Product_ID=0;  int M_ProductBOM_ID=0;  if (m_GridTab != null) {    M_Product_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,m_GridTab.getTabNo(),"M_Product_ID");    M_ProductBOM_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,m_GridTab.getTabNo(),"M_ProductBOM_ID");  } else {    M_Product_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"M_Product_ID");    M_ProductBOM_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"M_ProductBOM_ID");  }  int M_Locator_ID=-1;  log.config("M_Product_ID=" + M_Product_ID + "/"+ M_ProductBOM_ID+ ",M_AttributeSetInstance_ID="+ M_AttributeSetInstance_ID);  boolean productWindow=m_AD_Column_ID == MColumn.getColumn_ID(MProduct.Table_Name,MProduct.COLUMNNAME_M_AttributeSetInstance_ID);  boolean exclude=true;  if (M_Product_ID != 0) {    MProduct product=MProduct.get(Env.getCtx(),M_Product_ID);    int M_AttributeSet_ID=product.getM_AttributeSet_ID();    if (M_AttributeSet_ID != 0) {      MAttributeSet mas=MAttributeSet.get(Env.getCtx(),M_AttributeSet_ID);      exclude=mas.excludeEntry(m_AD_Column_ID,Env.isSOTrx(Env.getCtx(),m_WindowNo));    }  }  boolean changed=false;  if (M_ProductBOM_ID != 0)   M_Product_ID=M_ProductBOM_ID;  if (m_searchOnly) {    Component me=((Component)this.component.getParent());    while (me != null) {      if (me instanceof InfoProductPanel)       break;      me=me.getParent();    }    InfoPAttributePanel ia=new InfoPAttributePanel((Window)me);    m_pAttributeWhere=ia.getWhereClause();    String oldText=getComponent().getText();    getComponent().setText(ia.getDisplay());    String curText=getComponent().getText();    ValueChangeEvent changeEvent=new ValueChangeEvent(this,this.getColumnName(),oldText,curText);    this.fireValueChange(changeEvent);  } else {    if (!productWindow && (M_Product_ID == 0 || exclude)) {      changed=true;      getComponent().setText(null);      M_AttributeSetInstance_ID=0;    } else {      WPAttributeDialog vad=new WPAttributeDialog(M_AttributeSetInstance_ID,M_Product_ID,m_C_BPartner_ID,productWindow,gridField.getAD_Column_ID(),m_WindowNo);      if (vad.isChanged()) {        getComponent().setText(vad.getM_AttributeSetInstanceName());        M_AttributeSetInstance_ID=vad.getM_AttributeSetInstance_ID();        if (m_GridTab != null && !productWindow && vad.getM_Locator_ID() > 0)         m_GridTab.setValue("M_Locator_ID",vad.getM_Locator_ID());        changed=true;      }    }  }  if (changed) {    log.finest("Changed M_AttributeSetInstance_ID=" + M_AttributeSetInstance_ID);    m_value=new Object();    if (M_AttributeSetInstance_ID == 0)     setValue(null); else     setValue(new Integer(M_AttributeSetInstance_ID));    if (m_GridTab != null && M_Locator_ID > 0) {      log.finest("Change M_Locator_ID=" + M_Locator_ID);      m_GridTab.setValue("M_Locator_ID",M_Locator_ID);    }    String columnName="M_AttributeSetInstance_ID";    if (m_GridField != null) {      columnName=m_GridField.getColumnName();    }    ValueChangeEvent vce=new ValueChangeEvent(this,columnName,new Object(),getValue());    fireValueChange(vce);    if (M_AttributeSetInstance_ID == oldValueInt && m_GridTab != null && gridField != null) {      m_GridTab.processFieldChange(gridField);    }  }}  }
class C{  public void install(RSyntaxTextArea textArea){  if (this.textArea != null) {    uninstall();  }  this.textArea=textArea;  textArea.addCaretListener(this);}  }
class C{  public JSONObject optJSONObject(String key){  Object o=opt(key);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  public BinaryCode(byte data[],BinaryConstantPool cpool,Environment env){  DataInputStream in=new DataInputStream(new ByteArrayInputStream(data));  try {    this.cpool=cpool;    this.maxStack=in.readUnsignedShort();    this.maxLocals=in.readUnsignedShort();    int code_length=in.readInt();    this.code=new byte[code_length];    in.read(this.code);    int exception_count=in.readUnsignedShort();    this.exceptionHandlers=new BinaryExceptionHandler[exception_count];    for (int i=0; i < exception_count; i++) {      int start=in.readUnsignedShort();      int end=in.readUnsignedShort();      int handler=in.readUnsignedShort();      ClassDeclaration xclass=cpool.getDeclaration(env,in.readUnsignedShort());      this.exceptionHandlers[i]=new BinaryExceptionHandler(start,end,handler,xclass);    }    this.atts=BinaryAttribute.load(in,cpool,~0);    if (in.available() != 0) {      System.err.println("Should have exhausted input stream!");    }  } catch (  IOException e) {    throw new CompilerError(e);  }}  }
class C{  private void prepareSimple(String key) throws Exception {  for (int i=0; i < INIT_GRID_NUM; i++)   assert startGrid(i) != null;  for (int i=0; i < INIT_GRID_NUM; i++)   assert PARTITIONED == grid(i).cache(null).getConfiguration(CacheConfiguration.class).getCacheMode();  try (Transaction tx=grid(0).transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){    grid(0).cache(null).put(key,INIT_GRID_NUM);    tx.commit();  } }  }
class C{  public Duration minusDays(long daysToSubtract){  return (daysToSubtract == Long.MIN_VALUE ? plusDays(Long.MAX_VALUE).plusDays(1) : plusDays(-daysToSubtract));}  }
class C{  public PageViewEdge(PageViewEdge other){  __isset_bitfield=other.__isset_bitfield;  if (other.is_set_person()) {    this.person=new PersonID(other.person);  }  if (other.is_set_page()) {    this.page=new PageID(other.page);  }  this.nonce=other.nonce;}  }
class C{  public boolean isUsesScientificNotation(){  return usesScientificNotation;}  }
class C{  public void removeObserver(ExecutionObserver observer){  if (observers.contains(observer)) {    logger.debug("Removing observer");    observers.remove(observer);  }}  }
class C{  protected boolean doMatch(String path,boolean fullMatch,boolean isCaseSensitive){  if (path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {    return false;  }  String[] pathDirs=tokenizeToStringArray(path,this.pathSeparator);  int pattIdxStart=0;  int pattIdxEnd=pattDirs.length - 1;  int pathIdxStart=0;  int pathIdxEnd=pathDirs.length - 1;  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {    String patDir=pattDirs[pattIdxStart];    if ("**".equals(patDir)) {      break;    }    if (!matchStrings(patDir,pathDirs[pathIdxStart],isCaseSensitive)) {      return false;    }    pattIdxStart++;    pathIdxStart++;  }  if (pathIdxStart > pathIdxEnd) {    if (pattIdxStart > pattIdxEnd) {      return pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) : !path.endsWith(this.pathSeparator);    }    if (!fullMatch) {      return true;    }    if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals("*") && path.endsWith(this.pathSeparator)) {      return true;    }    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {      if (!pattDirs[i].equals("**")) {        return false;      }    }    return true;  } else   if (pattIdxStart > pattIdxEnd) {    return false;  } else   if (!fullMatch && "**".equals(pattDirs[pattIdxStart])) {    return true;  }  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {    String patDir=pattDirs[pattIdxEnd];    if (patDir.equals("**")) {      break;    }    if (!matchStrings(patDir,pathDirs[pathIdxEnd],isCaseSensitive)) {      return false;    }    pattIdxEnd--;    pathIdxEnd--;  }  if (pathIdxStart > pathIdxEnd) {    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {      if (!pattDirs[i].equals("**")) {        return false;      }    }    return true;  }  while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {    int patIdxTmp=-1;    for (int i=pattIdxStart + 1; i <= pattIdxEnd; i++) {      if (pattDirs[i].equals("**")) {        patIdxTmp=i;        break;      }    }    if (patIdxTmp == pattIdxStart + 1) {      pattIdxStart++;      continue;    }    int patLength=patIdxTmp - pattIdxStart - 1;    int strLength=pathIdxEnd - pathIdxStart + 1;    int foundIdx=-1;    strLoop:     for (int i=0; i <= strLength - patLength; i++) {      for (int j=0; j < patLength; j++) {        String subPat=pattDirs[pattIdxStart + j + 1];        String subStr=pathDirs[pathIdxStart + i + j];        if (!matchStrings(subPat,subStr,isCaseSensitive)) {          continue strLoop;        }      }      foundIdx=pathIdxStart + i;      break;    }    if (foundIdx == -1) {      return false;    }    pattIdxStart=patIdxTmp;    pathIdxStart=foundIdx + patLength;  }  for (int i=pattIdxStart; i <= pattIdxEnd; i++) {    if (!pattDirs[i].equals("**")) {      return false;    }  }  return true;}  }
class C{  private void doSignalAll(Node first){  lastWaiter=firstWaiter=null;  do {    Node next=first.nextWaiter;    first.nextWaiter=null;    transferForSignal(first);    first=next;  } while (first != null);}  }
class C{  public static void drop(final PsiBuilder.Marker... markers){  for (  PsiBuilder.Marker marker : markers) {    if (marker != null)     marker.drop();  }}  }
class C{  private static ParserBolt createParserBolt(String zookeeperUrl,String brokerUrl,String sensorType,ParserConfigurations configs,SensorParserConfig parserConfig){  MessageParser<JSONObject> parser=ReflectionUtils.createInstance(parserConfig.getParserClassName());  parser.configure(parserConfig.getParserConfig());  AbstractWriter writer=parserConfig.getWriterClassName() == null ? new KafkaWriter(brokerUrl).withTopic(Constants.ENRICHMENT_TOPIC) : ReflectionUtils.createInstance(parserConfig.getWriterClassName());  writer.configure(sensorType,new ParserWriterConfiguration(configs));  WriterHandler writerHandler=createWriterHandler(writer);  return new ParserBolt(zookeeperUrl,sensorType,parser,writerHandler);}  }
class C{  private void paintNode(final Canvas canvas,final Node node,boolean hwAccelarationWorkaround){  int lat=node.getLat();  int lon=node.getLon();  boolean isSelected=false;  BoundingBox viewBox=getViewBox();  float x=GeoMath.lonE7ToX(getWidth(),viewBox,lon);  float y=GeoMath.latE7ToY(getHeight(),getWidth(),viewBox,lat);  boolean isTagged=node.isTagged();  if (tmpDrawingInEditRange) {    if (prefs.isToleranceVisible() && tmpClickableElements == null) {      drawNodeTolerance(canvas,node.getState(),lat,lon,isTagged,x,y);    } else     if (tmpClickableElements != null && tmpClickableElements.contains(node)) {      drawNodeTolerance2(canvas,node.getState(),lat,lon,isTagged,x,y);    }  }  String featureKey;  String featureKeyThin;  String featureKeyTagged;  if (tmpDrawingSelectedNodes != null && tmpDrawingSelectedNodes.contains(node) && tmpDrawingInEditRange) {    featureKey=DataStyle.SELECTED_NODE;    featureKeyThin=DataStyle.SELECTED_NODE_THIN;    featureKeyTagged=DataStyle.SELECTED_NODE_TAGGED;    if (tmpDrawingSelectedNodes.size() == 1 && tmpDrawingSelectedWays == null && prefs.largeDragArea()) {      canvas.drawCircle(x,y,DataStyle.getCurrent().largDragToleranceRadius,DataStyle.getCurrent(DataStyle.NODE_DRAG_RADIUS).getPaint());    }    isSelected=true;  } else   if ((tmpDrawingSelectedRelationNodes != null && tmpDrawingSelectedRelationNodes.contains(node)) && tmpDrawingInEditRange) {    featureKey=DataStyle.SELECTED_RELATION_NODE;    featureKeyThin=DataStyle.SELECTED_RELATION_NODE_THIN;    featureKeyTagged=DataStyle.SELECTED_RELATION_NODE_TAGGED;    isSelected=true;  } else   if (node.hasProblem(context)) {    featureKey=DataStyle.PROBLEM_NODE;    featureKeyThin=DataStyle.PROBLEM_NODE_THIN;    featureKeyTagged=DataStyle.PROBLEM_NODE_TAGGED;  } else {    featureKey=DataStyle.NODE;    featureKeyThin=DataStyle.NODE_THIN;    featureKeyTagged=DataStyle.NODE_TAGGED;  }  boolean noIcon=true;  boolean isTaggedAndInZoomLimit=isTagged && inNodeIconZoomRange;  if (isTaggedAndInZoomLimit && showIcons) {    noIcon=tmpPresets == null || !paintNodeIcon(node,canvas,x,y,isSelected ? featureKeyTagged : null);    if (noIcon) {      String houseNumber=node.getTagWithKey(Tags.KEY_ADDR_HOUSENUMBER);      if (houseNumber != null && !"".equals(houseNumber)) {        paintHouseNumber(x,y,canvas,featureKeyThin,houseNumber);        return;      }    }  }  if (noIcon) {    Paint p=DataStyle.getCurrent(isTagged ? featureKeyTagged : featureKey).getPaint();    float strokeWidth=p.getStrokeWidth();    if (hwAccelarationWorkaround) {      canvas.drawCircle(x,y,strokeWidth / 2,p);    } else {      canvas.drawPoint(x,y,p);    }    if (isTaggedAndInZoomLimit) {      paintNodeLabel(x,y,canvas,featureKeyThin,strokeWidth,node);    }  }}  }
class C{  public String toString(){  return type.toString();}  }
class C{  public SpdyFrameDecoder(SpdyVersion spdyVersion,SpdyFrameDecoderDelegate delegate,int maxChunkSize,int minChunkSize){  if (spdyVersion == null) {    throw new NullPointerException("spdyVersion");  }  if (delegate == null) {    throw new NullPointerException("delegate");  }  if (maxChunkSize <= 0) {    throw new IllegalArgumentException("maxChunkSize must be a positive integer: " + maxChunkSize);  }  this.headerBlockDecoder=new SpdyHeaderBlockZlibDecoder(spdyVersion,delegate,4096);  this.spdyVersion=spdyVersion.getVersion();  this.delegate=delegate;  this.maxChunkSize=maxChunkSize;  this.minChunkSize=minChunkSize;  state=State.READ_COMMON_HEADER;}  }
class C{  public GridBoundedConcurrentOrderedSet(int max,SortedSet<E> s){  super(s);  assert max > 0;  this.max=max;}  }
class C{  public DoubleMatrix(int m,int n,Dimension dim,double... values){  this(m,n);  this.setMatrix(dim,values);}  }
class C{  public AssertionError(boolean detailMessage){  this(String.valueOf(detailMessage));}  }
class C{  private float[] transformDoubleArray(Object[] doubleObjectArray){  float[] floatArray=null;  if (doubleObjectArray != null) {    floatArray=new float[doubleObjectArray.length];    for (int i=0; i < doubleObjectArray.length; i++) {      floatArray[i]=((Double)doubleObjectArray[i]).floatValue();    }  }  return floatArray;}  }
class C{  static Object adaptValue(Object value,boolean classValuesAsString,boolean nestedAnnotationsAsMap){  if (classValuesAsString) {    if (value instanceof Class) {      value=((Class<?>)value).getName();    } else     if (value instanceof Class[]) {      Class<?>[] clazzArray=(Class[])value;      String[] newValue=new String[clazzArray.length];      for (int i=0; i < clazzArray.length; i++) {        newValue[i]=clazzArray[i].getName();      }      value=newValue;    }  }  if (nestedAnnotationsAsMap && value instanceof Annotation) {    return getAnnotationAttributes((Annotation)value,classValuesAsString,true);  } else   if (nestedAnnotationsAsMap && value instanceof Annotation[]) {    Annotation[] realAnnotations=(Annotation[])value;    AnnotationAttributes[] mappedAnnotations=new AnnotationAttributes[realAnnotations.length];    for (int i=0; i < realAnnotations.length; i++) {      mappedAnnotations[i]=getAnnotationAttributes(realAnnotations[i],classValuesAsString,true);    }    return mappedAnnotations;  } else {    return value;  }}  }
class C{  private void growByOne(){  int adding=0;  if (capacityIncrement <= 0) {    if ((adding=elementData.length) == 0) {      adding=1;    }  } else {    adding=capacityIncrement;  }  E[] newData=newElementArray(elementData.length + adding);  System.arraycopy(elementData,0,newData,0,elementCount);  elementData=newData;}  }
class C{  public Agent(String ufragPrefix){  this(Level.INFO,ufragPrefix);}  }
class C{  public ContainerRequest createContainerRequest(ContainerStartRequest csr,boolean first){  int priority=csr.container.getResourceRequestPriority();  String[] nodes=null;  String[] racks=null;  String host=getHost(csr,first);  Resource capability=Records.newRecord(Resource.class);  capability.setMemory(csr.container.getRequiredMemoryMB());  capability.setVirtualCores(csr.container.getRequiredVCores());  if (host == INVALID_HOST) {    return null;  }  if (host != null) {    nodes=new String[]{host};    return new ContainerRequest(capability,nodes,racks,Priority.newInstance(priority),false);  }  return new ContainerRequest(capability,nodes,racks,Priority.newInstance(priority));}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearFetchInterval(){  fieldSetFlags()[4]=false;  return this;}  }
class C{  public static String constructBasicAuth(String name,String password){  String userPass=String.format("%s:%s",name,password);  byte[] bytes=Base64.getEncoder().encode(userPass.getBytes(StandardCharsets.UTF_8));  String encodedUserPass=new String(bytes,StandardCharsets.UTF_8);  String basicAuth="Basic " + encodedUserPass;  return basicAuth;}  }
class C{  public DSAParameterGenerationParameters(int L,int N,int certainty,SecureRandom random){  this(L,N,certainty,random,-1);}  }
class C{  public InvalidContentTypeException(String message){  super(message);}  }
class C{  public void put(KeyStroke keyStroke,Object actionMapKey){  if (keyStroke == null) {    return;  }  if (actionMapKey == null) {    remove(keyStroke);  } else {    if (arrayTable == null) {      arrayTable=new ArrayTable();    }    arrayTable.put(keyStroke,actionMapKey);  }}  }
class C{  public void testDoConfigureSetsDefaultPort() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(ServletPropertySet.PORT),"//weblogic:listen-port",config);}  }
class C{  @Override public String toString(){  return "(" + exp1 + ") between ("+ exp2+ ") and ("+ exp3+ ")";}  }
class C{  public Iterator<OMGeometry> iteratorCopy(){  return new OMGeometryList(graphics).iterator();}  }
class C{  void init(){  absolute=true;  querySeparator=QUERY_SEPARATOR;  opaque=false;  port=-1;}  }
class C{  public static boolean isArithmeticImmediate(long imm){  return NumUtil.isInt(Math.abs(imm)) && isAimm((int)Math.abs(imm));}  }
class C{  private static long to_six_bit(long num){  return (((num << 26) & 0xfc000000fc000000L) | ((num << 12) & 0xfc000000fc0000L) | ((num >> 2) & 0xfc000000fc00L)| ((num >> 16) & 0xfc000000fcL));}  }
class C{  protected int exec(String command,StringList args){  try {    print(command);    StringList cmd=new StringList();    cmd=cmd.plus(command);    if (args != null) {      for (      String a : args) {        print(" " + a);      }      cmd.addAll(args);    }    println("");    ProcessBuilder pb=new ProcessBuilder();    pb.command(cmd.array());    pb.redirectErrorStream(true);    Process p=pb.start();    copyInThread(p.getInputStream(),quiet ? null : sysOut);    p.waitFor();    return p.exitValue();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public JGraphTabMenu(final JGraphTab tab,final CGraphPanel child){  add(new JMenuItem(new CActionClose(child)));  add(new JMenuItem(new CActionCloseOthers(tab,child)));}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  private boolean isRTLOrWhitespace(char c){  return (Display.getInstance().isRTL(c)) || c == ' ';}  }
class C{  @Override public NamedList<Object> request(@SuppressWarnings("rawtypes") SolrRequest request,String collection) throws SolrServerException, IOException {  if (this.solr0 != null)   return this.solr0.request(request,collection);  if (this.solr1 != null)   return this.solr1.request(request,collection);  return null;}  }
class C{  private Geometry createValidArea(Geometry rawAreaGeom){  if (isEnsureValidTopology)   return rawAreaGeom.buffer(0.0);  return rawAreaGeom;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.604 -0500",hash_original_method="A0F5694EA3978EBF3A8A4E5207628E80",hash_generated_method="A46B49E033C2A2CEFAE583A4DD53B3CE") private char readEscapeCharacter() throws JSONException {  char escaped=in.charAt(pos++);switch (escaped) {case 'u':    if (pos + 4 > in.length()) {      throw syntaxError("Unterminated escape sequence");    }  String hex=in.substring(pos,pos + 4);pos+=4;return (char)Integer.parseInt(hex,16);case 't':return '\t';case 'b':return '\b';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '\'':case '"':case '\\':default :return escaped;}}  }
class C{  public void toData(DataOutput out) throws IOException {  boolean isBagSetView=this.base instanceof Bag.SetView;  out.writeBoolean(isBagSetView);  if (isBagSetView) {    InternalDataSerializer.writeSet((Set)this.base,out);  } else {    DataSerializer.writeObject(this.base,out);  }  DataSerializer.writeObject(this.collectionType,out);  out.writeBoolean(this.modifiable);}  }
class C{  public DoubleVector(int len,double[] vect){  this.len=len;  this.vect=new double[len];  for (int i=0; i < len; i++) {    this.vect[i]=vect[i];  }}  }
class C{  public GuacamoleClientOverrunException(String message,Throwable cause){  super(message,cause);}  }
class C{  public int hashCode(){  return impl.hashCode();}  }
class C{  public static boolean isAbstract(int mod){  return (mod & ABSTRACT) != 0;}  }
class C{  public <T extends SuperModel>List<T> query(Class<T> cls,String sql,String[] selectionArgs){  Cursor cursor=rawQuery(sql,selectionArgs);  if (cursor != null && cursor.moveToFirst()) {    List<T> list=new ArrayList<>();    do {      try {        T model=cls.newInstance();        model.initValues(cursor);        list.add(model);      } catch (      Exception e) {        throw new RuntimeException(e);      }    } while (cursor.moveToNext());    return list;  }  return null;}  }
class C{  public void testNestedBuilderNotRegistered() throws Exception {  checkNestedBuilder(false);}  }
class C{  public void halfOpen(){  transitionTo(State.HALF_OPEN,onHalfOpen);}  }
class C{  public MutableDateTime toMutableDateTime(DateTimeZone zone){  Chronology chrono=DateTimeUtils.getChronology(getChronology());  chrono=chrono.withZone(zone);  return new MutableDateTime(getMillis(),chrono);}  }
class C{  private void createSwitches(){  switches=new ArrayList<NineSwitchesGameSwitch>();  for (int iRow=0; iRow < 3; iRow++) {    for (int iCol=0; iCol < 3; iCol++) {      NineSwitchesGameSwitch gameSwitch=new NineSwitchesGameSwitch(this);      gameSwitch.setPosition(x + iCol,y + iRow);      zone.add(gameSwitch);      switches.add(gameSwitch);    }  }  resetBoard();}  }
class C{  public void printDialog(){  if (m_PrinterJob.printDialog()) {    m_PrinterJob.setPrintable(this,m_PageFormat);    try {      m_PrinterJob.print();    } catch (    PrinterException printerException) {      m_PageStartY=0;      m_PageEndY=0;      m_CurrentPage=-1;      System.out.println("Error Printing Document");    }  }}  }
class C{  @SuppressWarnings("unused") private ParticipantLink(){}  }
class C{  public boolean shouldPrintHelp(){  return cmd != null && cmd.hasOption(Messages.HELP_SHORT_OPT);}  }
class C{  public boolean hasNext(){  return nextLine != null;}  }
class C{  public void finalize(){}  }
class C{  public static void run(AdSense service,int maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.println("Testing error handling");  System.out.println("=================================================================");  try {    service.adclients().list().setMaxResults(maxPageSize).execute();    System.out.println("The call succeeded. Please use an invalid, disapproved or " + "approval-pending AdSense account to test error handling.");    System.out.println();  } catch (  GoogleJsonResponseException e) {    List<ErrorInfo> errors=e.getDetails().getErrors();    for (    ErrorInfo error : errors) {      if (error.getReason().equals("noAdSenseAccount")) {        System.out.println("Error handled! No AdSense account for this user.");      } else       if (error.getReason().equals("disapprovedAccount")) {        System.out.println("Error handled! This account is disapproved.");      } else       if (error.getReason().equals("accountPendingReview")) {        System.out.println("Error handled! This account is pending review.");      } else {        System.out.println("Unrecognized error, showing system message:");        System.out.println(error.getMessage());      }    }  }}  }
class C{  public static double[][] loadTextFile(InputStream stream) throws IOException {  Scanner scan=new Scanner(stream);  ArrayList rows=new ArrayList();  int width=-1;  while (scan.hasNextLine()) {    String srow=scan.nextLine().trim();    if (srow.length() > 0) {      int w=0;      if (width == -1) {        ArrayList firstRow=new ArrayList();        Scanner rowScan=new Scanner(new StringReader(srow));        while (rowScan.hasNextDouble()) {          firstRow.add(new Double(rowScan.nextDouble()));          w++;        }        width=w;        double[] row=new double[width];        for (int i=0; i < width; i++)         row[i]=((Double)(firstRow.get(i))).doubleValue();        rows.add(row);      } else {        double[] row=new double[width];        Scanner rowScan=new Scanner(new StringReader(srow));        while (rowScan.hasNextDouble()) {          if (w == width)           throw new IOException("Row lengths do not match in text file");          row[w]=rowScan.nextDouble();          w++;        }        if (w < width)         throw new IOException("Row lengths do not match in text file");        rows.add(row);      }    }  }  if (width == -1)   return new double[0][0];  double[][] fieldTransposed=new double[rows.size()][];  for (int i=0; i < rows.size(); i++)   fieldTransposed[i]=((double[])(rows.get(i)));  double[][] field=new double[width][fieldTransposed.length];  for (int i=0; i < field.length; i++)   for (int j=0; j < field[i].length; j++)   field[i][j]=fieldTransposed[j][i];  return field;}  }
class C{  protected AccountCreationRules(final String username,final String password,final String email){  this.username=username.trim();  this.password=password.trim();  this.email=email.trim();}  }
class C{  @Override public void write(byte[] b){  checkNotNull(b);}  }
class C{  public boolean isEnd(){  return end;}  }
class C{  private URI createEthernetStoragePort(Map<String,Object> keyMap,StoragePort port,String name,String portInstanceID,List<StoragePort> newPorts,List<StoragePort> existingPorts) throws IOException {  StoragePort portinMemory=(StoragePort)keyMap.get(portInstanceID);  if (null == port) {    portinMemory.setPortNetworkId(name);    portinMemory.setPortEndPointID(name);    String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(_dbClient,portinMemory);    portinMemory.setNativeGuid(portNativeGuid);    portinMemory.setLabel(portNativeGuid);    _dbClient.createObject(portinMemory);    newPorts.add(portinMemory);    return portinMemory.getId();  } else {    port.setPortName(portinMemory.getPortName());    port.setPortSpeed(portinMemory.getPortSpeed());    port.setPortEndPointID(name);    port.setCompatibilityStatus(portinMemory.getCompatibilityStatus());    port.setDiscoveryStatus(portinMemory.getDiscoveryStatus());    port.setOperationalStatus(portinMemory.getOperationalStatus());    port.setPortType(portinMemory.getPortType());    _dbClient.persistObject(port);    existingPorts.add(port);    return port.getId();  }}  }
class C{  public OpenSAMLTest(String testName) throws KeyStoreException, FileNotFoundException, CertificateException, IOException, NoSuchAlgorithmException {  super(testName);  PropertyConfigurator.configure(LOG_FILE);  ks=KeyStore.getInstance("JKS");  InputStream is=new FileInputStream(new File(path));  try {    ks.load(is,password);  }  finally {    if (is != null) {      is.close();    }  }}  }
class C{  public void executeFirst(Runnable task){synchronized (internalLock) {    queue.addFirst(task);  }  startQueueWorker();}  }
class C{  private static void stableStringSort(String[] arr,String[] src,String[] dst,int start,int end,int chId){  int length=end - start;  if (length < SIMPLE_LENGTH) {    if (src == arr) {      for (int i=start + 1; i < end; i++) {        String current=arr[i];        String prev=arr[i - 1];        if (current.compareTo(prev) < 0) {          int j=i;          do {            arr[j--]=prev;          } while (j > start && current.compareTo(prev=arr[j - 1]) < 0);          arr[j]=current;        }      }    } else {      int actualEnd=end - 1;      dst[start]=src[actualEnd--];      for (int i=start + 1; i < end; i++, actualEnd--) {        String current=src[actualEnd];        String prev;        int j=i;        while (j > start && current.compareTo(prev=dst[j - 1]) < 0) {          dst[j--]=prev;        }        dst[j]=current;      }    }    return;  }  int s;  int mid=start + length / 2;  int lo=start;  int hi=end - 1;  if (length > 40) {    s=length / 8;    lo=medChar(lo,lo + s,lo + s * 2,src,chId);    mid=medChar(mid - s,mid,mid + s,src,chId);    hi=medChar(hi,hi - s,hi - s * 2,src,chId);  }  mid=medChar(lo,mid,hi,src,chId);  int midVal=charAt(src[mid],chId);  int a, b, c;  a=b=start;  c=end - 1;  int cmp;  for (int i=start; i < end; i++) {    String el=src[i];    cmp=charAt(el,chId) - midVal;    if (cmp < 0) {      src[a]=el;      a++;    } else     if (cmp > 0) {      dst[c]=el;      c--;    } else {      dst[b]=el;      b++;    }  }  s=b - start;  if (s > 0) {    if (arr == src) {      System.arraycopy(dst,start,arr,a,s);    } else {      copySwap(dst,start,arr,a,s);    }    if (b >= end && midVal == -1) {      return;    }    stableStringSort(arr,arr,arr == dst ? src : dst,a,a + s,chId + 1);  }  s=a - start;  if (s > 0) {    stableStringSort(arr,src,dst,start,a,chId);  }  c++;  s=end - c;  if (s > 0) {    stableStringSort(arr,dst,src,c,end,chId);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public DeviceScannerException(){}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (qualifiedName: ");  result.append(qualifiedName);  result.append(", projectId: ");  result.append(projectId);  result.append(", vendorID: ");  result.append(vendorID);  result.append(", moduleLoader: ");  result.append(moduleLoader);  result.append(", n4jsdModule: ");  result.append(n4jsdModule);  result.append(", staticPolyfillModule: ");  result.append(staticPolyfillModule);  result.append(", staticPolyfillAware: ");  result.append(staticPolyfillAware);  result.append(", mainModule: ");  result.append(mainModule);  result.append(", preLinkingPhase: ");  result.append(preLinkingPhase);  result.append(')');  return result.toString();}  }
class C{  public final double calculateTreeLogLikelihood(Tree tree){  if (isSamplingOrigin() && x0() < tree.getNodeHeight(tree.getRoot())) {    return Double.NEGATIVE_INFINITY;  }  int n=0;  int m=0;  for (int i=0; i < tree.getExternalNodeCount(); i++) {    NodeRef node=tree.getExternalNode(i);    if (tree.getNodeHeight(node) == 0.0) {      n+=1;    } else {      m+=1;    }  }  if (!hasFinalSample && n < 1) {    throw new RuntimeException("For sampling-through-time model there must be at least one tip at time zero.");  }  double b=birth();  double p=p();  double logL;  if (isSamplingOrigin()) {    logL=-q(x0());  } else {    throw new RuntimeException("The origin must be sampled, as integrating it out is not implemented!");  }  if (hasFinalSample) {    logL+=n * Math.log(4.0 * p);  }  for (int i=0; i < tree.getInternalNodeCount(); i++) {    double x=tree.getNodeHeight(tree.getInternalNode(i));    logL+=Math.log(b) - q(x);  }  for (int i=0; i < tree.getExternalNodeCount(); i++) {    double y=tree.getNodeHeight(tree.getExternalNode(i));    if (y > 0.0) {      logL+=Math.log(psi()) + q(y);    } else     if (!hasFinalSample) {      logL+=Math.log(psi()) + q(y);    }  }  return logL;}  }
class C{  public int read(byte b[]) throws IOException {  return read(b,0,b.length);}  }
class C{  public void unbindService(NativeHub hub){  if (mIsBound) {    if (DEBUG)     Log.d(TAG,"Unbinding service " + mProviderName + "...");    mContext.unbindService(this);    Intent i=new Intent();    i.setClassName(mPackage,mServiceName);    mContext.stopService(i);    mIsBound=false;  }}  }
class C{  public boolean isReportingAvailable(){  return (getApplicationBean().isReportingAvailable() && isLoggedInAndAdmin());}  }
class C{  public void mousePressed(MouseEvent event){  hideTipWindow();  enterTimer.stop();  showImmediately=false;  insideComponent=null;  mouseEvent=null;}  }
class C{  public void resetStructure(){  m_structure=null;  m_datasetPseudoInc=null;  m_oldStructure=null;  m_rowCount=0;  m_counter=0;  m_choice=0;  m_firstTime=true;  setRetrieval(NONE);}  }
class C{  private void verifyUserPermisions(IpInterface ipInterface){  Host host=queryObject(Host.class,ipInterface.getHost(),false);  verifyAuthorizedInTenantOrg(host.getTenant(),getUserFromContext());}  }
class C{  public static int largestRow(int[][] m){  int maxRowIndex=0;  int max=0;  for (int i=0; i < m.length; i++) {    int count=0;    for (int j=0; j < m[i].length; j++) {      if (m[i][j] == 1)       count++;    }    if (count > max) {      max=count;      maxRowIndex=i;    }  }  return maxRowIndex;}  }
class C{  private void storeKVTabularData(ScanData scanData,MetricsGroup mg,String key,Map<String,String> kvPairs,int queryTime) throws SQLException {  if (mg == null)   return;  if (mg.isStoreInCommonTable()) {    storeKVTabularDataGeneric(scanData,mg,kvPairs,queryTime);    return;  }  if (mg.getSubGroups() != null && mg.getSubGroups().size() > 0) {    for (    MetricsGroup subGrp : mg.getSubGroups()) {      recordUserAlertsFromMetricsData(scanData,subGrp,kvPairs);      if (!subGrp.isAuto()) {        if (!mg.isAuto()) {          if (!this.frameworkContext.getMetricsDef().getUdmManager().isMetricsGroupSubscribed(scanData.dbinfo.getDbGroupName(),scanData.dbinfo.getHostName(),mg.getGroupName(),subGrp.getGroupName()))           continue;        }      }      MetricsBuffer mbuf=retrieveMetricsBuffer(scanData,mg,subGrp);      if (mbuf != null) {        ByteBuffer buf=mbuf.recordOneRowByMetricsMap(kvPairs,scanData.snap_id,scanData.startTimestamp,queryTime);        if (buf != null)         this.frameworkContext.getMetricDb().putData(subGrp,key,buf);      }    }  } else {    recordUserAlertsFromMetricsData(scanData,mg,kvPairs);    MetricsBuffer mbuf=retrieveMetricsBuffer(scanData,mg,null);    if (mbuf != null) {      ByteBuffer buf=mbuf.recordOneRowByMetricsMap(kvPairs,scanData.snap_id,scanData.startTimestamp,queryTime);      if (buf != null)       this.frameworkContext.getMetricDb().putData(mg,key,buf);    }  }  List<String> attachedUDMs=this.frameworkContext.getMetricsDef().getUdmManager().getUDMsAttachedToBuiltinMetrics(mg.getGroupName(),scanData.dbinfo.getDbGroupName(),scanData.dbinfo.getHostName());  if (attachedUDMs == null || attachedUDMs.size() == 0)   return;  for (  String s : attachedUDMs) {    UserDefinedMetrics udm=this.frameworkContext.getMetricsDef().getUdmManager().getUDMByName(s);    if (udm == null || udm.getMetricsGroup() == null)     continue;    MetricsGroup udmG=udm.getMetricsGroup();    MetricsBuffer mbuf=retrieveMetricsBuffer(scanData,udmG,null);    if (mbuf != null) {      ByteBuffer buf=mbuf.recordOneRowByMetricsMap(kvPairs,scanData.snap_id,scanData.startTimestamp,queryTime);      if (buf != null)       this.frameworkContext.getMetricDb().putData(udmG,key,buf);    }  }}  }
class C{  private synchronized void failOver(int failedHostIdx) throws SQLException {  int prevHostIndex=this.currentHostIndex;  int nextHostIndex=nextHost(failedHostIdx,false);  int firstHostIndexTried=nextHostIndex;  SQLException lastExceptionCaught=null;  int attempts=0;  boolean gotConnection=false;  boolean firstConnOrPassedByPrimaryHost=prevHostIndex == NO_CONNECTION_INDEX || isPrimaryHostIndex(prevHostIndex);  do {    try {      firstConnOrPassedByPrimaryHost=firstConnOrPassedByPrimaryHost || isPrimaryHostIndex(nextHostIndex);      connectTo(nextHostIndex);      if (firstConnOrPassedByPrimaryHost && connectedToSecondaryHost()) {        resetAutoFallBackCounters();      }      gotConnection=true;    } catch (    SQLException e) {      lastExceptionCaught=e;      if (shouldExceptionTriggerConnectionSwitch(e)) {        int newNextHostIndex=nextHost(nextHostIndex,attempts > 0);        if (newNextHostIndex == firstHostIndexTried && newNextHostIndex == (newNextHostIndex=nextHost(nextHostIndex,true))) {          attempts++;          try {            Thread.sleep(250);          } catch (          InterruptedException ie) {          }        }        nextHostIndex=newNextHostIndex;      } else {        throw e;      }    }  } while (attempts < this.retriesAllDown && !gotConnection);  if (!gotConnection) {    throw lastExceptionCaught;  }}  }
class C{  public String toString(){  return getName() + " " + getDescriptor();}  }
class C{  public void cancel() throws SQLException {  if (!this.statementExecuting.get()) {    return;  }  if (!this.isClosed && this.connection != null && this.connection.versionMeetsMinimum(5,0,0)) {    Connection cancelConn=null;    java.sql.Statement cancelStmt=null;    try {      cancelConn=this.connection.duplicate();      cancelStmt=cancelConn.createStatement();      cancelStmt.execute("KILL QUERY " + this.connection.getIO().getThreadId());      this.wasCancelled=true;    }  finally {      if (cancelStmt != null) {        cancelStmt.close();      }      if (cancelConn != null) {        cancelConn.close();      }    }  }}  }
class C{  public void zoomOut(){  if (mZoomOut != null) {    mZoomOut.apply(Zoom.ZOOM_AXIS_XY);    repaint();  }}  }
class C{  protected void assertTerminated(Phaser phaser,int maxPhase,int parties){  assertTrue(phaser.isTerminated());  int expectedPhase=maxPhase + Integer.MIN_VALUE;  assertEquals(expectedPhase,phaser.getPhase());  assertEquals(parties,phaser.getRegisteredParties());  assertEquals(expectedPhase,phaser.register());  assertEquals(expectedPhase,phaser.arrive());  assertEquals(expectedPhase,phaser.arriveAndDeregister());}  }
class C{  public static int dragViewToX(InstrumentationTestCase test,View v,int gravity,int toX){  int[] xy=new int[2];  getStartLocation(v,gravity,xy);  final int fromX=xy[0];  final int fromY=xy[1];  int deltaX=fromX - toX;  drag(test,fromX,toX,fromY,fromY,deltaX);  return deltaX;}  }
class C{  public Builder updatePreferredLanguage(String preferredLanguage){  this.preferredLanguage=preferredLanguage;  return this;}  }
class C{  public SymbolTableEntryInternal steFor_get(){  return getSymbolTableEntryInternal("get",true);}  }
class C{  public static String toBinaryString(int i){  return toBinaryString(toByteArray(i));}  }
class C{  public FoldingDescriptor(@NotNull ASTNode node,@NotNull TextRange range,@Nullable FoldingGroup group,Set<Object> dependencies){  this(node,range,group,dependencies,false);}  }
class C{  private void updateStyle(JTableHeader c){  SeaGlassContext context=getContext(c,ENABLED);  SynthStyle oldStyle=style;  style=SeaGlassLookAndFeel.updateStyle(context,this);  if (style != oldStyle) {    if (oldStyle != null) {      uninstallKeyboardActions();      installKeyboardActions();    }  }  context.dispose();}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  public int countNumSpillElements(){  int count=0;  for (  RegSpillListElement elem : regSpillList) {    if (elem.isSpill()) {      count++;    }  }  return count;}  }
class C{  public CategoricalDistribution gibbsAsk(RandomVariable[] X,AssignmentProposition[] e,BayesianNetwork bn,int Nsamples){  double[] N=new double[ProbUtil.expectedSizeOfCategoricalDistribution(X)];  Set<RandomVariable> Z=new LinkedHashSet<RandomVariable>(bn.getVariablesInTopologicalOrder());  for (  AssignmentProposition ap : e) {    Z.remove(ap.getTermVariable());  }  Map<RandomVariable,Object> x=new LinkedHashMap<RandomVariable,Object>();  for (  AssignmentProposition ap : e) {    x.put(ap.getTermVariable(),ap.getValue());  }  for (  RandomVariable Zi : Z) {    x.put(Zi,ProbUtil.randomSample(bn.getNode(Zi),x,randomizer));  }  for (int j=0; j < Nsamples; j++) {    for (    RandomVariable Zi : Z) {      x.put(Zi,ProbUtil.mbRandomSample(bn.getNode(Zi),x,randomizer));    }    N[ProbUtil.indexOf(X,x)]+=1.0;  }  return new ProbabilityTable(N,X).normalize();}  }
class C{  static void checkInternalName(final String name,final int start,final int end,final String msg){  int max=end == -1 ? name.length() : end;  try {    int begin=start;    int slash;    do {      slash=name.indexOf('/',begin + 1);      if (slash == -1 || slash > max) {        slash=max;      }      checkIdentifier(name,begin,slash,null);      begin=slash + 1;    } while (slash != max);  } catch (  IllegalArgumentException unused) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a fully qualified class name in internal form): "+ name);  }}  }
class C{  public Configurator recordDataToFile(String filenamePrefix){  if (filenamePrefix == null)   throw new IllegalArgumentException("The filename prefix may not be null");  dataRecorderFilenameRoot=filenamePrefix;  dataWriterFactory=null;  return this;}  }
class C{  public ExpressionsEditPlugin(){  super(new ResourceLocator[]{BaseEditPlugin.INSTANCE,TypesEditPlugin.INSTANCE});}  }
class C{  public static void main(String[] args){  SimpleCommandLineParser parser=new SimpleCommandLineParser(args);  String username=parser.getValue("username","user","u");  String password=parser.getValue("password","pass","p");  boolean help=parser.containsKey("help","h");  boolean authenticated=(username != null) && (password != null);  if (help) {    printUsage();    System.exit(1);  }  BooksService service=new BooksService("gdataSample-Books-1");  if (authenticated) {    try {      service.setUserCredentials(username,password);    } catch (    AuthenticationException e) {      System.out.println("Invalid login credentials.");      System.exit(1);    }  }  while (true) {    try {      printMenu();      int choice=readInt();switch (choice) {case 1:        searchVolumes(service,authenticated);      break;case 2:    if (authenticated) {      showUserLibrary(service);    } else {      System.out.println("You need to specify a user account");      printUsage();    }  break;case 3:if (authenticated) {  showUserAnnotations(service);} else {  System.out.println("You need to specify a user account");  printUsage();}break;case 0:default :System.out.println("Bye!");System.exit(0);}} catch (IOException e) {System.err.println("There was a problem communicating with the service.");e.printStackTrace();}catch (ServiceException e) {System.err.println("The server had a problem handling your request.");e.printStackTrace();}}}  }
class C{  public void go(File file) throws IOException, TransformerException {  createXCardDocument().write(file,outputProperties);}  }
class C{  public Plantation(){  super();}  }
class C{  protected List createCommandList(Vector commands){  List l=new List(commands);  l.setUIID("CommandList");  Component c=(Component)l.getRenderer();  c.setUIID("Command");  c=l.getRenderer().getListFocusComponent(l);  c.setUIID("CommandFocus");  l.setFixedSelection(List.FIXED_NONE_CYCLIC);  if (parent.getUIManager().isThemeConstant("menuPrefSizeBool",false)) {    l.setListSizeCalculationSampleCount(50);  }  return l;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:40.039 -0500",hash_original_method="1739217E9A1947F1CFB7C279AA20D847",hash_generated_method="370CDD77A726AB43F9E87328F1C24D07") public static String bytesToHexString(byte[] bytes){  if (bytes == null)   return null;  StringBuilder ret=new StringBuilder(2 * bytes.length);  for (int i=0; i < bytes.length; i++) {    int b;    b=0x0f & (bytes[i] >> 4);    ret.append("0123456789abcdef".charAt(b));    b=0x0f & bytes[i];    ret.append("0123456789abcdef".charAt(b));  }  return ret.toString();}  }
class C{  private String findTaskIdFromWorkflowStepId(String stepId){  Workflow workflow=workflowService.getWorkflowFromStepId(stepId);  if (workflow != null && isWorkflowStepId(workflow.getOrchTaskId())) {    return findTaskIdFromWorkflowStepId(workflow.getOrchTaskId());  }  return (workflow == null) ? null : workflow.getOrchTaskId();}  }
class C{  public static long convertAddr(final int addr){  final long laddr=addr;  if (laddr < 0) {    final long ret=(-laddr) << ALLOCATION_SCALEUP;    return ret;  } else {    return laddr & 0xFFFFFFF0;  }}  }
class C{  private boolean addWorker(Runnable firstTask,boolean core){  retry:   for (; ; ) {    int c=ctl.get();    int rs=runStateOf(c);    if (rs >= SHUTDOWN && !(rs == SHUTDOWN && firstTask == null && !workQueue.isEmpty()))     return false;    for (; ; ) {      int wc=workerCountOf(c);      if (wc >= CAPACITY || wc >= (core ? corePoolSize : maximumPoolSize))       return false;      if (compareAndIncrementWorkerCount(c))       break retry;      c=ctl.get();      if (runStateOf(c) != rs)       continue retry;    }  }  boolean workerStarted=false;  boolean workerAdded=false;  Worker w=null;  try {    w=new Worker(firstTask);    final Thread t=w.thread;    if (t != null) {      final ReentrantLock mainLock=this.mainLock;      mainLock.lock();      try {        int rs=runStateOf(ctl.get());        if (rs < SHUTDOWN || (rs == SHUTDOWN && firstTask == null)) {          if (t.isAlive())           throw new IllegalThreadStateException();          workers.add(w);          int s=workers.size();          if (s > largestPoolSize)           largestPoolSize=s;          workerAdded=true;        }      }  finally {        mainLock.unlock();      }      if (workerAdded) {        t.start();        workerStarted=true;      }    }  }  finally {    if (!workerStarted)     addWorkerFailed(w);  }  return workerStarted;}  }
class C{  public static Automaton randomAutomaton(Random random){  Automaton a1=randomSingleAutomaton(random);  Automaton a2=randomSingleAutomaton(random);switch (random.nextInt(4)) {case 0:    return Operations.concatenate(a1,a2);case 1:  return Operations.union(a1,a2);case 2:return Operations.intersection(a1,a2);default :return Operations.minus(a1,a2,DEFAULT_MAX_DETERMINIZED_STATES);}}  }
class C{  public LBHttpSolrClient.Rsp makeLoadBalancedRequest(final QueryRequest req,List<String> urls) throws SolrServerException, IOException {  return loadbalancer.request(new LBHttpSolrClient.Req(req,urls));}  }
class C{  public String accepts(RollingStock rs){  if (!acceptsTypeName(rs.getTypeName())) {    log.debug("Rolling stock ({}) type ({}) not accepted at location ({}, {}) wrong type",rs.toString(),rs.getTypeName(),getLocation().getName(),getName());    return TYPE + " (" + rs.getTypeName()+ ")";  }  if (!acceptsRoadName(rs.getRoadName())) {    log.debug("Rolling stock ({}) road ({}) not accepted at location ({}, {}) wrong road",rs.toString(),rs.getRoadName(),getLocation().getName(),getName());    return ROAD + " (" + rs.getRoadName()+ ")";  }  int length=rs.getTotalLength();  try {    Integer.parseInt(rs.getLength());  } catch (  Exception e) {    return LENGTH + " (" + rs.getLength()+ ")";  }  if (Car.class.isInstance(rs)) {    Car car=(Car)rs;    if (!acceptsDestination(car.getFinalDestination())) {      return DESTINATION + " (" + car.getFinalDestinationName()+ ") "+ MessageFormat.format(Bundle.getMessage("carIsNotAllowed"),new Object[]{getName()});    }    if (getTrackType().equals(INTERCHANGE) && isOnlyCarsWithFinalDestinationEnabled() && car.getFinalDestination() == null) {      return NO_FINAL_DESTINATION;    }    if (car.getKernel() != null && car.getKernel().isLead(car)) {      length=0;      for (      Car c : car.getKernel().getCars()) {        if (c.getTrack() != null && c.getTrack().equals(this) || c.getDestinationTrack() != null && c.getDestinationTrack().equals(this)) {          continue;        }        length+=c.getTotalLength();      }    }    if (!acceptsLoad(car.getLoadName(),car.getTypeName())) {      log.debug("Car ({}) load ({}) not accepted at location ({}, {})",rs.toString(),car.getLoadName(),getLocation(),getName());      return LOAD + " (" + car.getLoadName()+ ")";    }  }  if (Engine.class.isInstance(rs)) {    Engine eng=(Engine)rs;    if (eng.getConsist() != null && eng.getConsist().isLead(eng)) {      length=0;      for (      Engine e : eng.getConsist().getEngines()) {        if (e.getTrack() != null && e.getTrack().equals(this) || e.getDestinationTrack() != null && e.getDestinationTrack().equals(this)) {          continue;        }        length=length + Integer.parseInt(e.getLength()) + RollingStock.COUPLER;      }    }  }  if (rs.getTrack() != this && rs.getDestinationTrack() != this && (getUsedLength() + getReserved() + length) > getLength()) {    if (getPool() != null && getPool().requestTrackLength(this,length)) {      return OKAY;    }    if (checkPlannedPickUps(length)) {      return OKAY;    }    if ((getLength() < length && getPool() == null) || (getPool() != null && getPool().getTotalLengthTracks() < length)) {      return MessageFormat.format(Bundle.getMessage("capacityIssue"),new Object[]{CAPACITY,length,Setup.getLengthUnit().toLowerCase(),getLength()});    }    log.debug("Rolling stock ({}) not accepted at location ({}, {}) no room!",rs.toString(),getLocation().getName(),getName());    return MessageFormat.format(Bundle.getMessage("lengthIssue"),new Object[]{LENGTH,length,Setup.getLengthUnit().toLowerCase(),getLength() - (getUsedLength() * (100 - getIgnoreUsedLengthPercentage()) / 100 + getReserved())});  }  return OKAY;}  }
class C{  public static void pad(double[] y,double[] ypadded){  if (y.length < ypadded.length) {    Arrays.fill(ypadded,0.0f);    System.arraycopy(y,0,ypadded,0,y.length);  } else {    System.arraycopy(y,0,ypadded,0,ypadded.length);  }}  }
class C{  public int size(){  return map.size();}  }
class C{  void migrateCerts(android.security.KeyStore keyStore){  String client=getFieldValue(CLIENT_CERT_KEY,CLIENT_CERT_PREFIX);  if (!TextUtils.isEmpty(client)) {    if (!keyStore.contains(Credentials.USER_PRIVATE_KEY + client,Process.WIFI_UID)) {      keyStore.duplicate(Credentials.USER_PRIVATE_KEY + client,-1,Credentials.USER_PRIVATE_KEY + client,Process.WIFI_UID);      keyStore.duplicate(Credentials.USER_CERTIFICATE + client,-1,Credentials.USER_CERTIFICATE + client,Process.WIFI_UID);    }  }  String ca=getFieldValue(CA_CERT_KEY,CA_CERT_PREFIX);  if (!TextUtils.isEmpty(ca)) {    if (!keyStore.contains(Credentials.CA_CERTIFICATE + ca,Process.WIFI_UID)) {      keyStore.duplicate(Credentials.CA_CERTIFICATE + ca,-1,Credentials.CA_CERTIFICATE + ca,Process.WIFI_UID);    }  }}  }
class C{  public void run(){  ActivationLibrary.deactivate(this,getID());}  }
class C{  protected Coordinate[] toCoordinateArray(Stack stack){  Coordinate[] coordinates=new Coordinate[stack.size()];  for (int i=0; i < stack.size(); i++) {    Coordinate coordinate=(Coordinate)stack.get(i);    coordinates[i]=coordinate;  }  return coordinates;}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public BodyContent push(){  if (current.after == null) {    current.after=new Entry(current,new BodyContentImpl(current.body == null ? (JspWriter)base : current.body));  } else {    current.after.doDevNull=false;    current.after.body.init(current.body == null ? (JspWriter)base : current.body);  }  current=current.after;  return current.body;}  }
class C{  public static Rethrowing rethrow(){  return rethrow;}  }
class C{  private String readCurrentTime(){  SimpleDateFormat sdf=new SimpleDateFormat(CarbonCommonConstants.CARBON_TIMESTAMP);  String date=null;  date=sdf.format(new Date());  return date;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:54.771 -0500",hash_original_method="F8FDE5CCF948AA765FD3A63854787123",hash_generated_method="B265104B01E034D703A46D2765BEA6C5") public TimeStamp(long ntpTime){  this.ntpTime=ntpTime;}  }
class C{  public void updateFloat(String columnName,float x) throws SQLException {  checkUpdatable();  getField(columnName).setFloat(x);}  }
class C{  private void writePasswordFileToVM(){  CreateContainerResponse exec=dockerClient.createContainerCmd(ALPINE).withBinds(new Bind(SECRET_FOLDER,new Volume(SECRET_FOLDER),AccessMode.rw)).withCmd("rm","-r",SECRET_FOLDER).exec();  dockerClient.startContainerCmd(exec.getId()).exec();  exec=dockerClient.createContainerCmd(ALPINE).withBinds(new Bind(SECRET_FOLDER,new Volume(SECRET_FOLDER),AccessMode.rw)).withCmd("sh","-c","echo -n testRole secret | tee -a " + SECRET_FOLDER + SECRET).exec();  dockerClient.startContainerCmd(exec.getId()).exec();  exec=dockerClient.createContainerCmd(ALPINE).withBinds(new Bind(SECRET_FOLDER,new Volume(SECRET_FOLDER),AccessMode.rw)).withCmd("sh","-c","echo -n secret | tee -a " + SECRET_FOLDER + FRAMEWORKPASSWD).exec();  dockerClient.startContainerCmd(exec.getId()).exec();}  }
class C{  public final double doOperation(){  int index=MathUtils.nextInt(links.getDimension());  int oldGroup=(int)assignments.getParameterValue(index);  int minEmp=minEmpty(modelLikelihood.getLogLikelihoodsVector());  links.setParameterValue(index,index);  int[] visited=connected(index,links);  int ii=0;  while (visited[ii] != 0) {    assignments.setParameterValue(visited[ii] - 1,minEmp);    ii++;  }  modelLikelihood.setLogLikelihoodsVector(oldGroup,modelLikelihood.getLogLikGroup(oldGroup));  modelLikelihood.setLogLikelihoodsVector(minEmp,modelLikelihood.getLogLikGroup(minEmp));  int maxFull=maxFull(modelLikelihood.getLogLikelihoodsVector());  double[] liks=modelLikelihood.getLogLikelihoodsVector();  double[] crossedLiks=new double[maxFull + 1];  for (int ll=0; ll < maxFull + 1; ll++) {    if (ll != minEmp) {      crossedLiks[ll]=getLogLik2Group(ll,minEmp);    }  }  double[] logP=new double[links.getDimension()];  for (int jj=0; jj < links.getDimension(); jj++) {    logP[jj]+=depMatrix[index][jj];    int n=(int)assignments.getParameterValue(jj);    if (n != minEmp) {      logP[jj]+=crossedLiks[n] - liks[n] - liks[minEmp];    }  }  logP[index]=Math.log(chiParameter.getParameterValue(0));  this.rescale(logP);  this.exp(logP);  int k=MathUtils.randomChoicePDF(logP);  links.setParameterValue(index,k);  int newGroup=(int)assignments.getParameterValue(k);  ii=0;  while (visited[ii] != 0) {    assignments.setParameterValue(visited[ii] - 1,newGroup);    ii++;  }  modelLikelihood.setLogLikelihoodsVector(newGroup,modelLikelihood.getLogLikGroup(newGroup));  if (newGroup != minEmp) {    modelLikelihood.setLogLikelihoodsVector(minEmp,0);  }  sampleMeans(maxFull);  return 0.0;}  }
class C{  public SchemaOrgParserAccessor(Element root){  this(root,(TimingInfo)null);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isFollowing(final String followerId,final String followingId){  try {    return followRepository.exists(followerId,followingId);  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Determines following failed[followerId=" + followerId + ", followingId="+ followingId+ ']',e);    return false;  }}  }
class C{  public void add(IOIterator<? extends SequenceNameLocus> reader) throws IOException {  while (reader.hasNext()) {    add(reader.next());  }}  }
class C{  public void testSet(){  String[] values=null;  Metadata meta=new Metadata();  values=meta.getValues(CONTENTTYPE);  assertEquals(0,values.length);  meta.set(CONTENTTYPE,"value1");  values=meta.getValues(CONTENTTYPE);  assertEquals(1,values.length);  assertEquals("value1",values[0]);  meta.set(CONTENTTYPE,"value2");  values=meta.getValues(CONTENTTYPE);  assertEquals(1,values.length);  assertEquals("value2",values[0]);  meta.set(CONTENTTYPE,"new value 1");  meta.add("contenttype","new value 2");  values=meta.getValues(CONTENTTYPE);  assertEquals(2,values.length);  assertEquals("new value 1",values[0]);  assertEquals("new value 2",values[1]);}  }
class C{  private int decodeCodeTableIndexes(){  if (ctx.usedQuantUnits == 0) {    return 0;  }  ctx.useFullTable=br.readBool();  for (int chNum=0; chNum < numChannels; chNum++) {    Arrays.fill(ctx.channels[chNum].quTabIdx,0);    int ret=decodeChannelCodeTab(chNum);    if (ret < 0) {      return ret;    }  }  return 0;}  }
class C{  public void removeVplexVolumesFromSRDFTargetCG(URI vplexURI,List<URI> vplexVolumeURIs,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    Volume protoVolume=dbClient.queryObject(Volume.class,vplexVolumeURIs.get(0));    if (NullColumnValueGetter.isNullURI(protoVolume.getConsistencyGroup())) {      WorkflowStepCompleter.stepSucceded(stepId);      return;    }    BlockConsistencyGroup consistencyGroup=dbClient.queryObject(BlockConsistencyGroup.class,protoVolume.getConsistencyGroup());    if (consistencyGroup == null) {      WorkflowStepCompleter.stepSucceded(stepId);      return;    }    ServiceCoded codedError=removeVolumesFromCGInternal(vplexURI,protoVolume.getConsistencyGroup(),vplexVolumeURIs);    if (codedError != null) {      WorkflowStepCompleter.stepFailed(stepId,codedError);      return;    }    List<Volume> vplexVolumesInCG=BlockConsistencyGroupUtils.getActiveVplexVolumesInCG(consistencyGroup,dbClient,null);    if (vplexVolumesInCG.isEmpty()) {      ClusterConsistencyGroupWrapper clusterCGWrapper=getClusterConsistencyGroup(protoVolume,consistencyGroup);      deleteCG(vplexURI,consistencyGroup.getId(),clusterCGWrapper.getCgName(),clusterCGWrapper.getClusterName(),false,stepId);    } else {      WorkflowStepCompleter.stepSucceded(stepId);    }  } catch (  Exception ex) {    log.info("Exception removing Vplex volumes from SRDF Target CG: " + ex.getMessage(),ex);    ServiceError svcError=VPlexApiException.errors.jobFailed(ex);    WorkflowStepCompleter.stepFailed(stepId,svcError);  }}  }
class C{  public int readUnsignedFixedPoint1616(){  int result=shiftIntoInt(data,position,2);  position+=4;  return result;}  }
class C{  public static JsonArray array(float... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JsonArray array=new JsonArray();  for (  float value : values) {    array.add(value);  }  return array;}  }
class C{  private static int med3(long[] x,int a,int b,int c){  return (x[a] < x[b] ? (x[b] < x[c] ? b : x[a] < x[c] ? c : a) : (x[b] > x[c] ? b : x[a] > x[c] ? c : a));}  }
class C{  @Override public void start(){  GridNioFilter ref=tail.nextFilter();  while (ref != head) {    ref.start();    ref=ref.nextFilter();  }}  }
class C{  public boolean isThisHost(){  return thisHost;}  }
class C{  protected String doIt() throws Exception {  MClient client=MClient.get(getCtx(),p_AD_Client_ID);  log.info(client.toString());  String clientTest=client.testEMail();  addLog(0,null,null,client.getName() + ": " + clientTest);  if (!Ini.isClient()) {    String documentDir=client.getDocumentDir();    if (documentDir == null || documentDir.length() == 0)     documentDir=".";    File file=new File(documentDir);    if (file.exists() && file.isDirectory())     addLog(0,null,null,"Found Directory: " + client.getDocumentDir()); else     addLog(0,null,null,"Not Found Directory: " + client.getDocumentDir());  }  MStore[] wstores=MStore.getOfClient(client);  for (int i=0; i < wstores.length; i++) {    MStore store=wstores[i];    String test=store.testEMail();    addLog(0,null,null,store.getName() + ": " + test);  }  return clientTest;}  }
class C{  public XMLString xstr(){  return this;}  }
class C{  private void attachFragment(View rootView,SimpleFragment fragment){  ((SimpleFragmentContainerKey)fragment.getKey()).attach(this,rootView,fragment);}  }
class C{  public NewFilterWizardPage(IStructuredSelection selection){  super("NewFilterWizardPage");  setTitle("New Filter");  setDescription("Create a new display filter for the indicator outline view.");  Object element=selection.getFirstElement();  if (element instanceof TreeElement<?,?>) {    Object data=((TreeElement<?,?>)element).getData();    if (data instanceof JsonElement && ((JsonElement)data).isJsonObject()) {      this.jsonObject=(JsonObject)data;      this.filterFields=Utils.getFilterFields(jsonObject).toArray(new String[0]);    }  }}  }
class C{  public static Timestamp stringToTimeStamp(String dateTimeString,String dateTimeFormat,TimeZone tz,Locale locale) throws ParseException {  DateFormat dateFormat=toDateTimeFormat(dateTimeFormat,tz,locale);  Date parsedDate=dateFormat.parse(dateTimeString);  return new Timestamp(parsedDate.getTime());}  }
class C{  public SelectionInputDialog(Window owner,String key,boolean editable,T[] selectionValues,T initialSelectionValue,Object... keyArguments){  this(owner,key,selectionValues,initialSelectionValue,keyArguments);  comboBox.setEditable(editable);}  }
class C{  public static LogWriterLogger create(final String name,final boolean isSecure){  return create(name,null,isSecure);}  }
class C{  public static void broadcastData(Context context,String data,String action,String custompermission){  Intent i=new Intent();  i.putExtra("data",data);  i.setAction(action);  context.sendBroadcast(i,custompermission);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__BINDING:    setBinding((Boolean)newValue);  return;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__DECLARED_TYPE:setDeclaredType((TFunction)newValue);return;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__DECLARED_THIS_TYPE:setDeclaredThisType((TypeRef)newValue);return;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__OWNED_TYPE_VARS:getOwnedTypeVars().clear();getOwnedTypeVars().addAll((Collection<? extends TypeVariable>)newValue);return;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__UNBOUND_TYPE_VARS:getUnboundTypeVars().clear();getUnboundTypeVars().addAll((Collection<? extends TypeVariable>)newValue);return;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__UNBOUND_TYPE_VARS_UPPER_BOUNDS:getUnboundTypeVarsUpperBounds().clear();getUnboundTypeVarsUpperBounds().addAll((Collection<? extends TypeRef>)newValue);return;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__FPARS:getFpars().clear();getFpars().addAll((Collection<? extends TFormalParameter>)newValue);return;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__RETURN_TYPE_REF:setReturnTypeRef((TypeRef)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void handleBindings(final ASTQuery astQuery,final QueryBase queryRoot) throws VisitorException {  final ASTBindingsClause bindingsClause=astQuery.getBindingsClause();  if (bindingsClause == null)   return;  final BindingsClause bindingSets=visit(bindingsClause,null);  if (bindingSets.getBindingSetsCount() > 0) {    queryRoot.setBindingsClause(bindingSets);  }}  }
class C{  public static int indexOf(int[] array,int[] sub){  return indexOf(array,sub,0,array.length);}  }
class C{  @Nullable public ECKey findKeyFromPubKey(byte[] pubkey){  lock.lock();  try {    for (    ECKey key : keychain) {      if (Arrays.equals(key.getPubKey(),pubkey))       return key;    }    return null;  }  finally {    lock.unlock();  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.ENTITY_SOURCE__MODEL:    setModel((Entity)null);  return;}super.eUnset(featureID);}  }
class C{  private static String geoToGmlUseJtsLib(Geometry geo){  int srid=geo.getSRID();  GMLWriter gmlWriter=new GMLWriter();  gmlWriter.setNamespace(false);  gmlWriter.setPrefix(null);  if (srid != -1 || srid != 0) {    gmlWriter.setSrsName("EPSG:" + geo.getSRID());  }  String gml=gmlWriter.write(geo);  return gml.replace("outerBoundaryIs","exterior");}  }
class C{  private void resize(int rows,int cols){  Number[][] _data=new Number[rows][cols];  for (int i=0; i < _data.length; i++) {    for (int j=0; j < _data[0].length; j++) {      if (i < data.length && j < data[0].length) {        _data[i][j]=data[i][j];      } else {        _data[i][j]=null;      }    }  }  data=_data;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FLASHCARDS'";  db.execSQL(sql);}  }
class C{  public ColladaFloatOrParam(String namespaceURI){  super(namespaceURI);}  }
class C{  protected long processOutLong(int type) throws IgniteCheckedException {  return throwUnsupported(type);}  }
class C{  public DateTime withDurationAdded(long durationToAdd,int scalar){  if (durationToAdd == 0 || scalar == 0) {    return this;  }  long instant=getChronology().add(getMillis(),durationToAdd,scalar);  return withMillis(instant);}  }
class C{  public EncryptedKey itemEncryptedKey(int i) throws XMLSecurityException {  if (encryptedKeys != null) {    return encryptedKeys.get(i);  }  Element e=XMLUtils.selectXencNode(this.constructionElement.getFirstChild(),EncryptionConstants._TAG_ENCRYPTEDKEY,i);  if (e != null) {    XMLCipher cipher=XMLCipher.getInstance();    cipher.init(XMLCipher.UNWRAP_MODE,null);    return cipher.loadEncryptedKey(e);  }  return null;}  }
class C{  public T caseTestedProjects(TestedProjects object){  return null;}  }
class C{  public static void main(String[] args) throws TestFailed, ClassNotFoundException {  testFailLoadAndGc();}  }
class C{  @NotNull @ObjectiveCName("doCompleteAuth:") public Promise<Boolean> doCompleteAuth(AuthRes authRes){  return modules.getAuthModule().doCompleteAuth(authRes);}  }
class C{  public void elementRepeated(TimedElement e,int i,float t){}  }
class C{  public void addVerificationMethod(VerificationMethod method){  addRepeatingExtension(method);}  }
class C{  public void header(int version,long length,int twipsWidth,int twipsHeight,int frameRate,int frameCount) throws IOException {}  }
class C{  private static void appendNamedCollection(StringBuffer sb,String name,Collection<String> collection){  if (collection.size() > 0) {    sb.append(name).append("=(");    for (    String value : collection) {      sb.append("\"").append(value).append("\", ");    }    sb.append(") ");  }}  }
class C{  public static float smoothStep(float a,float b,float x){  if (x < a)   return 0;  if (x >= b)   return 1;  x=(x - a) / (b - a);  return x * x * (3 - 2 * x);}  }
class C{  public static String generateNativeGuid(DbClient dbClient,StoragePool pool) throws IOException {  StorageSystem device=dbClient.queryObject(StorageSystem.class,pool.getStorageDevice());  return getNativeGuidforPool(_deviceTypeMap.get(device.getSystemType()),device.getSerialNumber(),pool.getNativeId());}  }
class C{  public void replaceQueueFactory(QueueFactory factory){  this.queueFactory=factory;}  }
class C{  @Override public void vertex(Object vertexData){  GLU.gluTessVertex(this.tess,(double[])vertexData,0,vertexData);}  }
class C{  public void maxLocal(Vector3f other){  x=other.x > x ? other.x : x;  y=other.y > y ? other.y : y;  z=other.z > z ? other.z : z;}  }
class C{  protected boolean removePositionablePoint(PositionablePoint o){  if (o.getConnect1() != null || o.getConnect2() != null) {    if (!noWarnPositionablePoint) {      int selectedValue=JOptionPane.showOptionDialog(this,rb.getString("Question2"),Bundle.getMessage("WarningTitle"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage("ButtonYes"),Bundle.getMessage("ButtonNo"),rb.getString("ButtonYesPlus")},Bundle.getMessage("ButtonNo"));      if (selectedValue == 1) {        return (false);      }      if (selectedValue == 2) {        noWarnPositionablePoint=true;      }    }    if (selectedObject == o) {      selectedObject=null;    }    if (prevSelectedObject == o) {      prevSelectedObject=null;    }    TrackSegment t=o.getConnect1();    if (t != null) {      removeTrackSegment(t);    }    t=o.getConnect2();    if (t != null) {      removeTrackSegment(t);    }  }  for (int i=0; i < pointList.size(); i++) {    PositionablePoint p=pointList.get(i);    if (p == o) {      pointList.remove(i);      setDirty(true);      repaint();      return (true);    }  }  return (false);}  }
class C{  public IntLiteral createIntLiteral(){  IntLiteralImpl intLiteral=new IntLiteralImpl();  return intLiteral;}  }
class C{  public boolean isIdentical(final double x,final double y,final double z){  return Math.abs(this.x - x) < MINIMUM_RESOLUTION && Math.abs(this.y - y) < MINIMUM_RESOLUTION && Math.abs(this.z - z) < MINIMUM_RESOLUTION;}  }
class C{  public void removeTagDefinition(int tagId){  getTagInfo().delete(tagId);}  }
class C{  @Override protected void search(BayesNet bayesNet,Instances instances) throws Exception {  if (getDescendantPopulationSize() < getPopulationSize()) {    throw new Exception("Descendant PopulationSize should be at least Population Size");  }  if (!getUseCrossOver() && !getUseMutation()) {    throw new Exception("At least one of mutation or cross-over should be used");  }  m_random=new Random(m_nSeed);  BayesNet bestBayesNet;  double fBestScore=calcScore(bayesNet);  bestBayesNet=new BayesNet();  bestBayesNet.m_Instances=instances;  bestBayesNet.initStructure();  copyParentSets(bestBayesNet,bayesNet);  BayesNetRepresentation[] population=new BayesNetRepresentation[getPopulationSize()];  for (int i=0; i < getPopulationSize(); i++) {    population[i]=new BayesNetRepresentation(instances.numAttributes());    population[i].randomInit();    if (population[i].getScore() > fBestScore) {      copyParentSets(bestBayesNet,bayesNet);      fBestScore=population[i].getScore();    }  }  for (int iRun=0; iRun < m_nRuns; iRun++) {    BayesNetRepresentation[] descendantPopulation=new BayesNetRepresentation[getDescendantPopulationSize()];    for (int i=0; i < getDescendantPopulationSize(); i++) {      descendantPopulation[i]=population[m_random.nextInt(getPopulationSize())].copy();      if (getUseMutation()) {        if (getUseCrossOver() && m_random.nextBoolean()) {          descendantPopulation[i].crossOver(population[m_random.nextInt(getPopulationSize())]);        } else {          descendantPopulation[i].mutate();        }      } else {        descendantPopulation[i].crossOver(population[m_random.nextInt(getPopulationSize())]);      }      if (descendantPopulation[i].getScore() > fBestScore) {        copyParentSets(bestBayesNet,bayesNet);        fBestScore=descendantPopulation[i].getScore();      }    }    boolean[] bSelected=new boolean[getDescendantPopulationSize()];    for (int i=0; i < getPopulationSize(); i++) {      int iSelected=0;      if (m_bUseTournamentSelection) {        iSelected=m_random.nextInt(getDescendantPopulationSize());        while (bSelected[iSelected]) {          iSelected=(iSelected + 1) % getDescendantPopulationSize();        }        int iSelected2=m_random.nextInt(getDescendantPopulationSize());        while (bSelected[iSelected2]) {          iSelected2=(iSelected2 + 1) % getDescendantPopulationSize();        }        if (descendantPopulation[iSelected2].getScore() > descendantPopulation[iSelected].getScore()) {          iSelected=iSelected2;        }      } else {        while (bSelected[iSelected]) {          iSelected++;        }        double fScore=descendantPopulation[iSelected].getScore();        for (int j=0; j < getDescendantPopulationSize(); j++) {          if (!bSelected[j] && descendantPopulation[j].getScore() > fScore) {            fScore=descendantPopulation[j].getScore();            iSelected=j;          }        }      }      population[i]=descendantPopulation[iSelected];      bSelected[iSelected]=true;    }  }  copyParentSets(bayesNet,bestBayesNet);  bestBayesNet=null;}  }
class C{  public static void deleteFiles(Directory dir,Collection<String> names) throws IOException {  Throwable th=null;  for (  String name : names) {    if (name != null) {      try {        dir.deleteFile(name);      } catch (      Throwable t) {        addSuppressed(th,t);        if (th == null) {          th=t;        }      }    }  }  reThrow(th);}  }
class C{  protected ByteBuffer convert(AudioPacket packet){  if (packet.hasAudioBuffer()) {    float[] samples=packet.getAudioBuffer().getSamples();    ByteBuffer buffer=ByteBuffer.allocate(samples.length * 2).order(ByteOrder.LITTLE_ENDIAN);    ShortBuffer shortBuffer=buffer.asShortBuffer();    for (    float sample : samples) {      shortBuffer.put((short)(sample * Short.MAX_VALUE));    }    return buffer;  }  return null;}  }
class C{  @Override public int hashCode(){  int hash=1;  hash=hash * 31 + (null == name ? 0 : name.hashCode());  hash=hash * 31 + (null == type ? 0 : type.hashCode());  hash=hash * 31 + (null == containerClass ? 0 : containerClass.hashCode());  return hash;}  }
class C{  public boolean hasChildNodes(){  return (null != m_firstChild);}  }
class C{  public static int sum(int[] ints){  int sum=0;  for (int i=0; i < ints.length; i++) {    sum+=ints[i];  }  return sum;}  }
class C{  public OnlyOneIsAllowedToBeSetGlobalConstraint(List<Parameter<?>> params){  parameters=params;}  }
class C{  protected Object entryValue(HashEntry entry){  return entry.value;}  }
class C{  public PackageMember createPackageMember(){  PackageMemberImpl packageMember=new PackageMemberImpl();  return packageMember;}  }
class C{  public void valueChanged(TreeSelectionEvent e){  Node node=(Node)_tree.getLastSelectedPathComponent();  if (node == null) {    return;  }  _elemPropPanel.setForElement(node);}  }
class C{  public GF2Polynomial shiftLeft(){  GF2Polynomial result=new GF2Polynomial(len + 1,value);  int i;  for (i=result.blocks - 1; i >= 1; i--) {    result.value[i]<<=1;    result.value[i]|=result.value[i - 1] >>> 31;  }  result.value[0]<<=1;  return result;}  }
class C{  public String trimUserName(String text){  TextStream stream=new TextStream(text);  StringWriter writer=new StringWriter();  while (!stream.atEnd()) {    char next=stream.next();    if (Character.isLetter(next)) {      writer.append(next);    }  }  return writer.toString().toLowerCase();}  }
class C{  public synchronized String toString(){  return super.toString();}  }
class C{  private void bufferActivityData(byte[] value){  if (activityStruct.hasRoomFor(value)) {    if (activityStruct.isValidData(value)) {      activityStruct.buffer(value);      if (activityStruct.isBufferFull()) {        flushActivityDataHolder();      }    } else {      LOG.warn("GOT UNEXPECTED ACTIVITY DATA WITH LENGTH: " + value.length + ", EXPECTED LENGTH: "+ activityStruct.activityDataRemainingBytes);      getSupport().logMessageContent(value);    }  } else {    GB.toast(getContext(),"error buffering activity data: remaining bytes: " + activityStruct.activityDataRemainingBytes + ", received: "+ value.length,Toast.LENGTH_LONG,GB.ERROR);    try {      TransactionBuilder builder=performInitialized("send stop sync data");      builder.write(getCharacteristic(MiBandService.UUID_CHARACTERISTIC_CONTROL_POINT),new byte[]{MiBandService.COMMAND_STOP_SYNC_DATA});      builder.queue(getQueue());      GB.updateTransferNotification("Data transfer failed",false,0,getContext());      handleActivityFetchFinish();    } catch (    IOException e) {      LOG.error("error stopping activity sync",e);    }  }}  }
class C{  protected void registerLabelAttributes(){  addAttributeProcessor(new EllipsisLmlAttribute(),"ellipsis");  addAttributeProcessor(new LabelAlignmentLmlAttribute(),"labelAlign","labelAlignment");  addAttributeProcessor(new LineAlignmentLmlAttribute(),"lineAlign","lineAlignment");  addAttributeProcessor(new TextAlignmentLmlAttribute(),"textAlign","textAlignment");  addAttributeProcessor(new WrapLmlAttribute(),"wrap");}  }
class C{  public ServerHello(ProtocolVersion version,Random random,SessionId sessionId,CipherSuite cipherSuite,CompressionMethod compressionMethod,HelloExtensions extensions,InetSocketAddress peerAddress){  super(peerAddress);  if (version == null) {    throw new NullPointerException("Negotiated protocol version must not be null");  }  if (random == null) {    throw new NullPointerException("ServerHello message must contain a random");  }  if (sessionId == null) {    throw new NullPointerException("ServerHello must be associated with a session ID");  }  if (cipherSuite == null) {    throw new NullPointerException("Negotiated cipher suite must not be null");  }  if (compressionMethod == null) {    throw new NullPointerException("Negotiated compression method must not be null");  }  this.serverVersion=version;  this.random=random;  this.sessionId=sessionId;  this.cipherSuite=cipherSuite;  this.compressionMethod=compressionMethod;  this.extensions=extensions;}  }
class C{  public IOperandTreeNode current(){  return m_traversalStack.lastElement().first();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String errorPlotPointSizeProportionalToMarginTipText(){  return "Set the point size proportional to the prediction " + "margin for classification error plots";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.817 -0500",hash_original_method="AE5755A8BB0D3254AAC992CD2FDD3EF1",hash_generated_method="FBFE82AEDC329B60ECFDFFBAE6E4971B") public boolean selectPreviousArticle(ArticlePointer pointer) throws IOException {  if (!NNTPReply.isPositiveCompletion(last()))   return false;  if (pointer != null)   __parseArticlePointer(getReplyString(),pointer);  return true;}  }
class C{  @Override protected void flush(Buffer data,boolean isEnd){  if (isClosed()) {    throw new IllegalStateException();  }  _request.outProxy().write(_request,data,isEnd);}  }
class C{  public int read() throws IOException {  if (pos >= 0) {    int cur=pos % BUFF_SIZE;    if (cur < bar) {      pos++;      return buff[cur];    }    if (cur != end) {      buff[cur]=inStream.read();      bar=cur + 1;      pos++;      return buff[cur];    } else {      pos=-1;    }  }  return inStream.read();}  }
class C{  private boolean loadTabData(){  log.config("");  if (m_vo.Tabs == null)   return false;  for (int t=0; t < m_vo.Tabs.size(); t++) {    GridTabVO mTabVO=(GridTabVO)m_vo.Tabs.get(t);    if (mTabVO != null) {      GridTab mTab=new GridTab(mTabVO,this,m_virtual);      m_tabs.add(mTab);    }  }  return true;}  }
class C{  @After public void after(){  ReflectionTestUtils.setField(emrDao,"emrOperations",originalEmrOperations);  ReflectionTestUtils.setField(emrDao,"ec2Dao",originalEc2Dao);}  }
class C{  static double[] RGBtoHLS(int rgb,double H,double L,double S){  int colorR=(rgb & 0x00FF0000) >> 16;  int colorG=(rgb & 0x0000FF00) >> 8;  int colorB=rgb & 0x000000FF;  int n_cmax=Math.max(colorR,Math.max(colorG,colorB));  int n_cmin=Math.min(colorR,Math.min(colorG,colorB));  L=(n_cmax + n_cmin) / 2.0 / 255.0;  if (n_cmax == n_cmin) {    S=0.0;    H=0.0;    return new double[]{H,L,S};  }  double r=colorR / 255.0, g=colorG / 255.0, b=colorB / 255.0, cmax=n_cmax / 255.0, cmin=n_cmin / 255.0, delta=cmax - cmin;  if (L < 0.5)   S=delta / (cmax + cmin); else   S=delta / (2.0 - cmax - cmin);  if (colorR == n_cmax)   H=(g - b) / delta; else   if (colorG == n_cmax)   H=2.0 + (b - r) / delta; else   H=4.0 + (r - g) / delta;  H/=6.0;  if (H < 0.0)   H+=1.0;  return new double[]{H,L,S};}  }
class C{  public static void logWarning(ILog log,String message){  log(log,IStatus.WARNING,IStatus.OK,message,null);}  }
class C{  protected void deleteSessionVariables(String sessionId,String... varNames){  if (sessionId.equals("")) {    return;  }  Key key=keyFactory.newKey(sessionId);  Transaction transaction=datastore.newTransaction();  try {    Entity stateEntity=transaction.get(key);    Entity.Builder builder=Entity.builder(stateEntity);    StringBuilder delNames=new StringBuilder();    for (    String varName : varNames) {      delNames.append(varName + " ");      builder=builder.remove(varName);    }    datastore.update(builder.build());  } catch (  NullPointerException e) {  } finally {    if (transaction.active()) {      transaction.rollback();    }  }}  }
class C{  @Override protected void onStop(){  super.onStop();  if (mAlertDialog != null && mAlertDialog.isShowing()) {    mAlertDialog.dismiss();  }}  }
class C{  public double normalizedKernel(char[] s,char[] t){  double k1=unnormalizedKernel(s,s);  double k2=unnormalizedKernel(t,t);  double normTerm=Math.sqrt(k1 * k2);  return unnormalizedKernel(s,t) / normTerm;}  }
class C{  private static boolean verifyPermissions(int... grantResults){  for (  int result : grantResults) {    if (result != PackageManager.PERMISSION_GRANTED) {      return false;    }  }  return true;}  }
class C{  protected void changeTablesAndRecordInHistory(SourceInfo source,Callable<Void> changeFunction) throws SQLException {  StringBuilder ddl=new StringBuilder();  tables().drainChanges();  Tables copy=tables().clone();  try {    changeFunction.call();  } catch (  Exception e) {    this.tables=copy;    if (e instanceof SQLException)     throw (SQLException)e;    this.logger.error("Unexpected error whle changing model of MySQL schemas: {}",e.getMessage(),e);  }  refreshSchemas();  tables().drainChanges().forEach(null);  dbHistory.record(source.partition(),source.offset(),"",tables(),ddl.toString());}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int height=0;  for (int i=0; i < getChildCount(); i++) {    View child=getChildAt(i);    child.measure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));    int h=child.getMeasuredHeight();    if (h > height)     height=h;  }  heightMeasureSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY);  super.onMeasure(widthMeasureSpec,heightMeasureSpec);}  }
class C{  private PDFObject readArray(int objNum,int objGen,PDFDecrypter decrypter) throws IOException {  ArrayList<PDFObject> ary=new ArrayList<PDFObject>();  PDFObject obj;  while ((obj=readObject(objNum,objGen,decrypter)) != null) {    ary.add(obj);  }  if (buf.get() != ']') {    throw new PDFParseException("Array should end with ']'");  }  PDFObject[] objlist=new PDFObject[ary.size()];  for (int i=0; i < objlist.length; i++) {    objlist[i]=(PDFObject)ary.get(i);  }  return new PDFObject(this,PDFObject.ARRAY,objlist);}  }
class C{  protected String doIt() throws java.lang.Exception {  StringBuffer sql=null;  if (m_DeleteOldImported) {    int no=0;    for (    X_I_Movement move : getRecords(true,false)) {      move.deleteEx(true);      no++;    }    log.fine("Delete Old Impored =" + no);  }  fillIDValues();  importRecords();  return "Imported: " + imported + ", Not imported: "+ notimported;}  }
class C{  public void addMouseHandler(MouseHandlerFX handler){  if (!this.hasUniqueID(handler)) {    throw new IllegalArgumentException("There is already a handler with that ID (" + handler.getID() + ").");  }  this.availableMouseHandlers.add(handler);}  }
class C{  private BigDecimal findLatestPublishedVersion(Resource resource){  if (resource != null) {    List<VersionHistory> history=resource.getVersionHistory();    if (!history.isEmpty()) {      return new BigDecimal(history.get(0).getVersion());    } else {      return resource.getEmlVersion();    }  }  return null;}  }
class C{  public static Matrix fromModelLookAt(Vec4 eye,Vec4 center,Vec4 up){  if (eye == null || center == null || up == null) {    String msg=Logging.getMessage("nullValue.Vec4IsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (eye.distanceTo3(center) <= EPSILON) {    String msg=Logging.getMessage("Geom.EyeAndCenterInvalid",eye,center);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4 forward=center.subtract3(eye);  Vec4 f=forward.normalize3();  Vec4 s=up.cross3(f);  s=s.normalize3();  if (s.getLength3() <= EPSILON) {    String msg=Logging.getMessage("Geom.UpAndLineOfSightInvalid",up,forward);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4 u=f.cross3(s);  u=u.normalize3();  Matrix mAxes=new Matrix(s.x,u.x,f.x,0.0,s.y,u.y,f.y,0.0,s.z,u.z,f.z,0.0,0.0,0.0,0.0,1.0,true);  Matrix mEye=Matrix.fromTranslation(eye.x,eye.y,eye.z);  return mEye.multiply(mAxes);}  }
class C{  public void addWarning(String message,DiagnosticPosition pos){  ast.printMessage(Diagnostic.Kind.WARNING,message,null,pos,false);}  }
class C{  public MoreLikeThisQueryBuilder minTermFreq(int minTermFreq){  this.minTermFreq=minTermFreq;  return this;}  }
class C{  public static void warn(int WindowNo,Container c,String AD_Message,String msg){  log.info(AD_Message + " - " + msg);  Properties ctx=Env.getCtx();  StringBuffer out=new StringBuffer();  if (AD_Message != null && !AD_Message.equals(""))   out.append(Msg.getMsg(ctx,AD_Message));  if (msg != null && msg.length() > 0)   out.append("\n").append(msg);  Window parent=Env.getParent(c);  if (parent == null)   parent=Env.getWindow(WindowNo);  if (showDialog && parent != null) {    if (parent instanceof JFrame)     new ADialogDialog((JFrame)parent,Env.getHeader(ctx,WindowNo),out.toString(),JOptionPane.WARNING_MESSAGE); else     new ADialogDialog((JDialog)parent,Env.getHeader(ctx,WindowNo),out.toString(),JOptionPane.WARNING_MESSAGE);  } else   JOptionPane.showMessageDialog(parent,out.toString() + "\n",Env.getHeader(ctx,WindowNo),JOptionPane.WARNING_MESSAGE);}  }
class C{  public void removeEffect(PostProcessorEffect effect){  effectsManager.remove(effect);}  }
class C{  static void checkSignedShort(final int value,final String msg){  if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {    throw new IllegalArgumentException(msg + " (must be a signed short): " + value);  }}  }
class C{  @Override public int compare(SceKernelThreadInfo o1,SceKernelThreadInfo o2){  return o1.currentPriority - o2.currentPriority;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  MediaFile mf=Wizard.getInstance().getPlayableMediaFile(s);  return mf;}  }
class C{  public static LandingpageProduct toLandingpageProduct(VOLandingpageService voObj) throws ValidationException {  final LandingpageProduct domObj=new LandingpageProduct();  validate(voObj);  domObj.setPosition(voObj.getPosition());  return domObj;}  }
class C{  public void fireControlerShutdownEvent(final boolean unexpected){  ShutdownEvent event=new ShutdownEvent(this.controler,unexpected);  ShutdownListener[] listener=this.coreListenerList.getListeners(ShutdownListener.class);  for (  ShutdownListener aListener : listener) {    log.info("calling notifyShutdown on " + aListener.getClass().getCanonicalName());    aListener.notifyShutdown(event);  }  listener=this.listenerList.getListeners(ShutdownListener.class);  for (  ShutdownListener aListener : listener) {    log.info("calling notifyShutdown on " + aListener.getClass().getCanonicalName());    aListener.notifyShutdown(event);  }  log.info("all ControlerShutdownListeners called.");}  }
class C{  private static Type[] unrollBounds(final Map<TypeVariable<?>,Type> typeArguments,final Type[] bounds){  Type[] result=bounds;  int i=0;  for (; i < result.length; i++) {    final Type unrolled=unrollVariables(typeArguments,result[i]);    if (unrolled == null) {      result=ArrayUtils.remove(result,i--);    } else {      result[i]=unrolled;    }  }  return result;}  }
class C{  @Override public String createEmrCluster(String clusterName,EmrClusterDefinition emrClusterDefinition,AwsParamsDto awsParams){  return emrOperations.runEmrJobFlow(getEmrClient(awsParams),getRunJobFlowRequest(clusterName,emrClusterDefinition));}  }
class C{  protected static boolean isManagePaymentTypesPage(HttpServletRequest httpRequest){  return httpRequest.getServletPath().startsWith(BaseBean.MANAGE_PAYMENT_TYPES_PAGE) || httpRequest.getServletPath().startsWith(BaseBean.MANAGE_PAYMENT_TYPES_PAGE_XHTML);}  }
class C{  public static int hashIt(Object o){  return HashCodeUtil.hash(0,o);}  }
class C{  public Builder colorFromResources(@ColorRes int colorResId){  mColor=mContext.getResources().getColor(colorResId);  return this;}  }
class C{  public void onReset(){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onReset();    }  }}  }
class C{  public RegistrationMessage(Instantiator s){  this.instantiatorClass=s.getClass();  this.instantiatedClass=s.getInstantiatedClass();  this.id=s.getId();  this.eventId=(EventID)s.getEventId();}  }
class C{  protected void checkForDml(String sql,char firstStatementChar) throws SQLException {  if ((firstStatementChar == 'I') || (firstStatementChar == 'U') || (firstStatementChar == 'D')|| (firstStatementChar == 'A')|| (firstStatementChar == 'C')|| (firstStatementChar == 'T')|| (firstStatementChar == 'R')) {    String noCommentSql=StringUtils.stripComments(sql,"'\"","'\"",true,false,true,true);    if (StringUtils.startsWithIgnoreCaseAndWs(noCommentSql,"INSERT") || StringUtils.startsWithIgnoreCaseAndWs(noCommentSql,"UPDATE") || StringUtils.startsWithIgnoreCaseAndWs(noCommentSql,"DELETE")|| StringUtils.startsWithIgnoreCaseAndWs(noCommentSql,"DROP")|| StringUtils.startsWithIgnoreCaseAndWs(noCommentSql,"CREATE")|| StringUtils.startsWithIgnoreCaseAndWs(noCommentSql,"ALTER")|| StringUtils.startsWithIgnoreCaseAndWs(noCommentSql,"TRUNCATE")|| StringUtils.startsWithIgnoreCaseAndWs(noCommentSql,"RENAME")) {      throw SQLError.createSQLException(Messages.getString("Statement.57"),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());    }  }}  }
class C{  private void markRec(final LevelNode n,final int height){  if (n == null)   return;  n.level=height;  markRec((LevelNode)n.left,height + 1);  markRec((LevelNode)n.right,height + 1);}  }
class C{  public String previewNextToken(){  matcher.find();  String nextOne=matcher.group();  updateMatcher();  return nextOne;}  }
class C{  public void addChildren(List newChildren){  if (newChildren != null) {    for (    Object child : newChildren) {      addChild(child);    }  }}  }
class C{  public boolean shouldSplitAgain(){  return splitAgain;}  }
class C{  public static boolean isRelevant(int actual,int limit){  return actual <= limit;}  }
class C{  public void testContainsClassEmpty() throws Exception {  WarArchive war=new DefaultWarArchive(getResourcePath(PACKAGE_PATH + "empty.war"));  assertTrue(!war.containsClass("test.Test"));}  }
class C{  public void put(String key,char value){  super.put(key,Character.valueOf(value));}  }
class C{  public static Bitmap createViewBitmap(View view,Matrix matrix,RectF bounds){  Bitmap bitmap=null;  int bitmapWidth=Math.round(bounds.width());  int bitmapHeight=Math.round(bounds.height());  if (bitmapWidth > 0 && bitmapHeight > 0) {    float scale=Math.min(1f,((float)MAX_IMAGE_SIZE) / (bitmapWidth * bitmapHeight));    bitmapWidth*=scale;    bitmapHeight*=scale;    matrix.postTranslate(-bounds.left,-bounds.top);    matrix.postScale(scale,scale);    bitmap=Bitmap.createBitmap(bitmapWidth,bitmapHeight,Bitmap.Config.ARGB_8888);    Canvas canvas=new Canvas(bitmap);    canvas.concat(matrix);    view.draw(canvas);  }  return bitmap;}  }
class C{  public CodeAttribute toCodeAttribute(){  return new CodeAttribute(constPool,maxStack,maxLocals,get(),tryblocks);}  }
class C{  protected RequestHandle sendRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){  if (uriRequest == null) {    throw new IllegalArgumentException("HttpUriRequest must not be null");  }  if (responseHandler == null) {    throw new IllegalArgumentException("ResponseHandler must not be null");  }  if (responseHandler.getUseSynchronousMode() && !responseHandler.getUsePoolThread()) {    throw new IllegalArgumentException("Synchronous ResponseHandler used in AsyncHttpClient. You should create your response handler in a looper thread or use SyncHttpClient instead.");  }  if (contentType != null) {    if (uriRequest instanceof HttpEntityEnclosingRequestBase && ((HttpEntityEnclosingRequestBase)uriRequest).getEntity() != null && uriRequest.containsHeader(HEADER_CONTENT_TYPE)) {    } else {      uriRequest.setHeader(HEADER_CONTENT_TYPE,contentType);    }  }  responseHandler.setRequestHeaders(uriRequest.getAllHeaders());  responseHandler.setRequestURI(uriRequest.getURI());  AsyncHttpRequest request=newAsyncHttpRequest(client,httpContext,uriRequest,contentType,responseHandler,context);  threadPool.submit(request);  RequestHandle requestHandle=new RequestHandle(request);  if (context != null) {    List<RequestHandle> requestList;synchronized (requestMap) {      requestList=requestMap.get(context);      if (requestList == null) {        requestList=Collections.synchronizedList(new LinkedList<RequestHandle>());        requestMap.put(context,requestList);      }    }    requestList.add(requestHandle);    Iterator<RequestHandle> iterator=requestList.iterator();    while (iterator.hasNext()) {      if (iterator.next().shouldBeGarbageCollected()) {        iterator.remove();      }    }  }  return requestHandle;}  }
class C{  @Override public boolean acceptsURL(String url){  if (url != null) {    if (url.startsWith(Constants.START_URL)) {      return true;    } else     if (url.equals(DEFAULT_URL)) {      return DEFAULT_CONNECTION.get() != null;    }  }  return false;}  }
class C{  public static String hexCodeString(byte[] code){  if (code == null) {    return "";  } else {    StringBuilder sb=new StringBuilder(code.length * 2);    for (    int b : code) {      String hex=Integer.toHexString(b & 0xff);      if (hex.length() == 1) {        sb.append('0');      }      sb.append(hex);    }    return sb.toString();  }}  }
class C{  public void modifyShare(String id,String zoneName,IsilonSMBShare s) throws IsilonException {  String uriWithZoneName=getURIWithZoneName(id,zoneName);  modify(_baseUrl.resolve(URI_SMB_SHARES),uriWithZoneName,"share",s);}  }
class C{  @Override public Generator<IPoint> construct(String[] args){  return new UniqueGenerator();}  }
class C{  public static ImmutableMap<?,?> deepDiff(Map<?,?> a,Map<?,?> b,boolean ignoreNullToCollection){  ImmutableMap.Builder<Object,Object> diff=new ImmutableMap.Builder<>();  for (  Object key : Sets.union(a.keySet(),b.keySet())) {    Object aValue=a.get(key);    Object bValue=b.get(key);    if (Objects.equals(aValue,bValue)) {    } else     if (ignoreNullToCollection && aValue == null && bValue instanceof Collection && ((Collection<?>)bValue).isEmpty()) {    } else {      if (aValue instanceof String && bValue instanceof String && a.toString().contains("\n")&& b.toString().contains("\n")) {        aValue=stringToMap((String)aValue);        bValue=stringToMap((String)bValue);      } else       if (aValue instanceof Set && bValue instanceof Set) {      } else       if (aValue instanceof Iterable && bValue instanceof Iterable) {        aValue=iterableToSortedMap((Iterable<?>)aValue);        bValue=iterableToSortedMap((Iterable<?>)bValue);      }      diff.put(key,(aValue instanceof Map && bValue instanceof Map) ? deepDiff((Map<?,?>)aValue,(Map<?,?>)bValue,ignoreNullToCollection) : new DiffPair(aValue,bValue));    }  }  return diff.build();}  }
class C{  @NoInline @NoOptCompile public int unlockCompletely(){  int result=recCount;  recCount=0;  holderSlot=-1;  sysCall.sysMonitorExit(monitor);  return result;}  }
class C{  public void handlePlacementFailure(List<Volume> volumesList){  Map<URI,StoragePool> uriToStoragePool=new HashMap<>();  Map<URI,List<String>> storagePoolUriToVolumes=new HashMap<>();  for (  Volume volume : volumesList) {    volume.setInactive(true);    URI storagePoolUri=volume.getPool();    if (!(URIUtil.isNull(storagePoolUri) || URIUtil.isNull(volume.getId()))) {      List<String> poolVolumes=storagePoolUriToVolumes.get(storagePoolUri);      if (poolVolumes == null) {        poolVolumes=new ArrayList<>();        storagePoolUriToVolumes.put(storagePoolUri,poolVolumes);        StoragePool storagePool=_dbClient.queryObject(StoragePool.class,storagePoolUri);        if (storagePool != null) {          uriToStoragePool.put(storagePoolUri,storagePool);        }      }      poolVolumes.add(volume.getId().toString());    }  }  _dbClient.updateObject(volumesList);  for (  URI poolUri : uriToStoragePool.keySet()) {    StoragePool pool=uriToStoragePool.get(poolUri);    List<String> volumes=storagePoolUriToVolumes.get(poolUri);    pool.removeReservedCapacityForVolumes(volumes);    _dbClient.updateObject(pool);  }}  }
class C{  public void buildClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  data=new Instances(data);  data.deleteWithMissingClass();  m_ReplaceMissingValues=new ReplaceMissingValues();  m_ReplaceMissingValues.setInputFormat(data);  data=Filter.useFilter(data,m_ReplaceMissingValues);  m_NominalToBinary=new NominalToBinary();  m_NominalToBinary.setInputFormat(data);  data=Filter.useFilter(data,m_NominalToBinary);  m_boostedModel=new LogisticBase(m_numBoostingIterations,m_useCrossValidation,m_errorOnProbabilities);  m_boostedModel.setMaxIterations(m_maxBoostingIterations);  m_boostedModel.setHeuristicStop(m_heuristicStop);  m_boostedModel.setWeightTrimBeta(m_weightTrimBeta);  m_boostedModel.setUseAIC(m_useAIC);  m_boostedModel.buildClassifier(data);}  }
class C{  public static CCMenuItemImage item(String value,String value2,CCNode t,String s){  return item(value,value2,null,t,s);}  }
class C{  public TermCriteria(int type,int maxCount,double epsilon){  this.type=type;  this.maxCount=maxCount;  this.epsilon=epsilon;}  }
class C{  boolean validIndex(long index){  assertSegmentOpen();  return !isEmpty() && index >= firstIndex() && index <= lastIndex();}  }
class C{  public <T>JsonArray<T> createListDtoFromJson(InputStream json,Class<T> dtoInterface) throws IOException {  return createListDtoFromJson(new InputStreamReader(json),dtoInterface);}  }
class C{  public void prepare(){  flushAvailableBlocks();}  }
class C{  public PublisherConcatArray<T> concatAdditionalSourceLast(Publisher<? extends T> source){  int n=array.length;  @SuppressWarnings("unchecked") Publisher<? extends T>[] newArray=new Publisher[n + 1];  System.arraycopy(array,0,newArray,0,n);  newArray[n]=source;  return new PublisherConcatArray<>(delayError,newArray);}  }
class C{  public Matrix U(){  final Matrix U=new Matrix(n,n);  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++) {      if (i <= j) {        U.$[U.addr.op(i,j)]=LU.$[LU.addr.op(i,j)];      }    }  }  return U;}  }
class C{  protected void doRender(RenderingContext c,Layer root){  Graphics2D g=((Java2DOutputDevice)c.getOutputDevice()).getGraphics();  if (!(g instanceof PrinterGraphics) && isOpaque()) {    g.setColor(getBackground());    g.fillRect(0,0,getWidth(),getHeight());  }  AffineTransform current=g.getTransform();  PaintingInfo pI=root.getMaster().getPaintingInfo();  Dimension layoutSize=pI.getOuterMarginCorner();  calculateScaleAccordingToPolicy(layoutSize);  if (lastLayoutSize == null) {    lastLayoutSize=layoutSize;    setPreferredSize(new Dimension((int)(lastLayoutSize.width * scale),(int)(lastLayoutSize.height * scale)));    revalidate();  }  g.transform(AffineTransform.getScaleInstance(scale,scale));  super.doRender(c,root);  g.setTransform(current);}  }
class C{  public OMRect(double lt1,double ln1,int px1,int py1,int px2,int py2){  super(RENDERTYPE_OFFSET,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  lat1=lt1;  lon1=ln1;  x1=px1;  y1=py1;  x2=px2;  y2=py2;}  }
class C{  public static void bindProgress(final ConnectionRequest source,final Slider s){  if (source == null) {    bindProgress((ConnectionRequest[])null,s);  } else {    bindProgress(new ConnectionRequest[]{source},s);  }}  }
class C{  private Command processPacketInMessage(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  OFPort inPort=(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT));  Match m=createMatchFromPacket(sw,inPort,cntx);  MacAddress sourceMac=m.get(MatchField.ETH_SRC);  MacAddress destMac=m.get(MatchField.ETH_DST);  VlanVid vlan=m.get(MatchField.VLAN_VID) == null ? VlanVid.ZERO : m.get(MatchField.VLAN_VID).getVlanVid();  if (sourceMac == null) {    sourceMac=MacAddress.NONE;  }  if (destMac == null) {    destMac=MacAddress.NONE;  }  if (vlan == null) {    vlan=VlanVid.ZERO;  }  if ((destMac.getLong() & 0xfffffffffff0L) == 0x0180c2000000L) {    if (log.isTraceEnabled()) {      log.trace("ignoring packet addressed to 802.1D/Q reserved addr: switch {} vlan {} dest MAC {}",new Object[]{sw,vlan,destMac.toString()});    }    return Command.STOP;  }  if ((sourceMac.getLong() & 0x010000000000L) == 0) {    this.addToPortMap(sw,sourceMac,vlan,inPort);  }  OFPort outPort=getFromPortMap(sw,destMac,vlan);  if (outPort == null) {    this.writePacketOutForPacketIn(sw,pi,OFPort.FLOOD);  } else   if (outPort.equals(inPort)) {    log.trace("ignoring packet that arrived on same port as learned destination:" + " switch {} vlan {} dest MAC {} port {}",new Object[]{sw,vlan,destMac.toString(),outPort.getPortNumber()});  } else {    this.pushPacket(sw,m,pi,outPort);    this.writeFlowMod(sw,OFFlowModCommand.ADD,OFBufferId.NO_BUFFER,m,outPort);    if (LEARNING_SWITCH_REVERSE_FLOW) {      Match.Builder mb=m.createBuilder();      mb.setExact(MatchField.ETH_SRC,m.get(MatchField.ETH_DST)).setExact(MatchField.ETH_DST,m.get(MatchField.ETH_SRC)).setExact(MatchField.IN_PORT,outPort);      if (m.get(MatchField.VLAN_VID) != null) {        mb.setExact(MatchField.VLAN_VID,m.get(MatchField.VLAN_VID));      }      this.writeFlowMod(sw,OFFlowModCommand.ADD,OFBufferId.NO_BUFFER,mb.build(),inPort);    }  }  return Command.CONTINUE;}  }
class C{  public Builder delay(long duration,TimeUnit timeUnit){  this.delay=timeUnit.toSeconds(duration);  return this;}  }
class C{  public void put(E e) throws InterruptedException {  checkNotNull(e);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    while (count == items.length)     notFull.await();    enqueue(e);  }  finally {    lock.unlock();  }}  }
class C{  public RecyclerListAdapter(){}  }
class C{  public MekaTable(TableModel dm){  super(dm);  initGUI();}  }
class C{  void purgeLastArticles(int amountToPurge){  if (!isDBAvailable())   return;  long time=System.currentTimeMillis();  String query="_id IN ( SELECT _id FROM " + TABLE_ARTICLES + " WHERE isPublished=0 AND isStarred=0 ORDER BY updateDate DESC LIMIT -1 OFFSET "+ (Utils.ARTICLE_LIMIT - amountToPurge + ")");  safelyDeleteArticles(query,null);  Log.d(TAG,"purgeLastArticles took " + (System.currentTimeMillis() - time) + "ms");}  }
class C{  public void prepareTransition(View viewToShow){  assert mViewToHide == null && mViewToShow == null;  assert getChildCount() <= 2;  if (hasChildView()) {    mViewToHide=getChildAt(CONTENT_INDEX);  }  mViewToShow=viewToShow;  assert mViewToHide != null || mViewToShow != null;  assert mViewToHide != mViewToShow;}  }
class C{  public BaseAdapterHelper linkify(int viewId){  TextView view=retrieveView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  public void loadLinkTargets(){  String targetTypeId=null;  try {    if (getSelectedLinkType() != null) {      Set<HuiRelation> huiRelationSet=getEntityType().getPossibleRelations();      for (      HuiRelation huiRelation : huiRelationSet) {        if (getSelectedLinkType().equals(getLinkTypeLabel(huiRelation))) {          targetTypeId=huiRelation.getTo();          break;        }      }      if (LOG.isDebugEnabled()) {        LOG.debug("loadLinkTargets(), targetTypeId: " + targetTypeId);      }      if (targetTypeId != null) {        LoadElementByTypeId command=new LoadElementByTypeId(targetTypeId,RetrieveInfo.getPropertyInstance());        command=getCommandService().executeCommand(command);        setLinkTargetList(command.getElementList());        setLinkTargetNameList(new ArrayList<String>(linkTargetList.size()));        for (        CnATreeElement linkTarget : linkTargetList) {          linkTargetNameList.add(linkTarget.getTitle());        }        Collections.sort(linkTargetNameList);      }    }  } catch (  Exception t) {    LOG.error("Error while loading link targets, targetTypeId: " + targetTypeId,t);    ExceptionHandler.handle(t);  }}  }
class C{  public void logDebug(Object message){  logInternal(DEBUG,message,null);}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void runQueue(){synchronized (sync) {    while (!queue.isEmpty()) {      Runnable r=queue.poll();      if (r != null) {        try {          r.run();        } catch (        Exception e) {          LoggingUtil.exception(e);        }      } else {        LoggingUtil.warning("Tried to run a 'null' Object.");      }    }  }}  }
class C{  public static String random(int count,String chars){  if (chars == null) {    return random(count,0,0,false,false,null,RANDOM);  }  return random(count,chars.toCharArray());}  }
class C{  public boolean isMapped(){  return isMapped;}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public boolean optBoolean(String key){  return this.optBoolean(key,false);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int a;  int i;  float progress=0;  int range;  boolean blnTextOutput=false;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnTextOutput=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    int minVal=(int)image.getMinimumValue();    int maxVal=(int)image.getMaximumValue();    range=maxVal - minVal;    long[] totalColumns=new long[range + 1];    long[] totalRows=new long[range + 1];    long[] totalN=new long[range + 1];    double[] data=null;    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)data[col] - minVal;          totalColumns[a]+=col;          totalRows[a]+=row;          totalN[a]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress((int)progress);    }    for (a=0; a <= range; a++) {      if (totalN[a] > 0) {        col=(int)(totalColumns[a] / totalN[a]);        row=(int)(totalRows[a] / totalN[a]);        output.setValue(row,col,a + minVal);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    if (blnTextOutput) {      String retstr="Patch Centroid\nPatch ID\tColumn\tRow";      for (a=0; a <= range; a++) {        if (totalN[a] > 0) {          retstr=retstr + "\n" + (a + minVal)+ "\t"+ ((float)totalColumns[a] / totalN[a])+ "\t"+ ((float)totalRows[a] / totalN[a]);        }      }      returnData(retstr);    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void removeListener(NotificationListener listener){  CENTER.removeListener(listener);}  }
class C{  public int length(){  return length;}  }
class C{  public void addName(String type,String name){  if (containsName(type,name)) {    return;  }  List<CarLoad> loads=listCarLoads.get(type);  if (loads == null) {    log.debug("car type ({}) does not exist",type);    return;  }  loads.add(0,new CarLoad(name));  maxNameLength=0;  setDirtyAndFirePropertyChange(LOAD_CHANGED_PROPERTY,null,name);}  }
class C{  protected final ResultActions oauthPerform(Account user,MockHttpServletRequestBuilder requestBuilder) throws Exception {  String token=prepareClientAppUserAccessToken(user);  return mockMvc.perform(requestBuilder.header(HttpHeaders.AUTHORIZATION,"Bearer " + token).header(HttpHeaders.CONTENT_TYPE,"application/json;charset=UTF-8"));}  }
class C{  public void move(){  x+=vx;  y+=vy;}  }
class C{  public void cleanup() throws DBException {  _db.cleanup();}  }
class C{  public static @Nullable RequestBody createGzip(final MediaType mediaType,final String body){  ByteArrayOutputStream gzipByteArrayOutputStream=new ByteArrayOutputStream();  try {    OutputStream gzipOutputStream=new GZIPOutputStream(gzipByteArrayOutputStream);    gzipOutputStream.write(body.getBytes());    gzipOutputStream.close();  } catch (  IOException e) {    return null;  }  return RequestBody.create(mediaType,gzipByteArrayOutputStream.toByteArray());}  }
class C{  public LauncherScroller(Context context){  this(context,null);}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  return errors;}  }
class C{  public void abort(){  abort=true;  if (request != null && !request.isAborted()) {    request.abort();  }}  }
class C{  protected void forwardCommandChangeToLayout(int s){  if ((s & Turnout.CLOSED) != 0) {    if ((s & Turnout.THROWN) != 0) {      log.error("Cannot command both CLOSED and THROWN " + s);      return;    } else {      sendMessage(true ^ getInverted());    }  } else {    sendMessage(false ^ getInverted());  }}  }
class C{  private void showImage(final boolean createImage){  if (imageData != null) {    imageCanvas.setCursor(imageCanvas.getDisplay().getSystemCursor(SWT.CURSOR_WAIT));    try {      if (createImage || image == null) {        if (image != null && !image.isDisposed()) {          image.dispose();          image=null;        }        image=new Image(imageCanvas.getDisplay(),imageData);      }      final Rectangle imageSize=image.getBounds();      final Point newSize=new Point((int)(imageSize.width * zoomFactor),(int)(imageSize.height * zoomFactor));      resizeCanvas(newSize);      scroll.redraw();    }  finally {      imageCanvas.setCursor(null);    }  }}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,Math.pow(z1,z2));          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,Math.pow(z1,constant2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,Math.pow(constant1,z2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int hashCode(){  return (color.hashCode() << 31 ^ media.hashCode() << 24 ^ orientationRequested.hashCode() << 23 ^ origin.hashCode() << 22 ^ printQuality.hashCode() << 20 ^ printerResolution[2] >> 2 << 19 ^ printerResolution[1] << 10 ^ printerResolution[0]);}  }
class C{  public static SemOptimizerRegression serializableInstance(){  return new SemOptimizerRegression();}  }
class C{  private void startContainer(StartRequest request) throws Throwable {  String handleId=request.getParameter("handleId",true);  String containerId=request.getParameter("containerId",true);  String containerHome=request.getParameter("containerHome",false);  String installerZipUrl=request.getParameter("installerZipUrl",false);  String installerZipFile=request.getParameter("installerZipFile",false);  String configurationHome=request.getParameter("configurationHome",false);  String configurationType=request.getParameter("configurationType",true);  String containerOutputFile=request.getParameter("containerOutput",false);  String containerLogFile=request.getParameter("containerLogFile",false);  String containerLogLevel=request.getParameter("containerLogLevel",false);  boolean containerAppend="on".equals(request.getParameter("containerAppend",false));  String autostart=request.getParameter("autostart",false);  String timeout=request.getParameter("timeout",false);  PropertyTable containerProperties=request.getProperties("containerProperties",false);  PropertyTable configurationProperties=request.getProperties("configurationProperties",false);  List<PropertyTable> configurationFileProperties=request.getPropertiesList("configurationFileProperties",false);  List<String> configurationFiles=request.getStringList("configurationFiles",false);  List<PropertyTable> deployableFiles=request.getPropertiesList("deployableFiles",false);  List<PropertyTable> xmlReplacements=request.getPropertiesList("xmlReplacements",false);  InputStream installerZipInputStream=request.getFile("installerZipFileData",false);  List<String> extraFiles=request.getStringList("extraFiles",false);  List<String> sharedFiles=request.getStringList("sharedFiles",false);  List<String> extraClasspath=request.getStringList("extraClasspath",false);  List<String> sharedClasspath=request.getStringList("sharedClasspath",false);  List<String> additionalClasspath=request.getStringList("additionalClasspath",false);  Handle handle;  InstalledLocalContainer previousContainer=null;synchronized (handles) {    handle=handles.get(handleId);    if (handle == null) {      handle=new Handle();      handle.setId(handleId);      handle.setForceStop(false);      handles.put(handleId,handle);    } else {      previousContainer=handle.getContainer();    }  }synchronized (handle) {    if (configurationHome == null || configurationHome.isEmpty()) {      configurationHome=fileManager.getConfigurationDirectory(handleId);    }    ConfigurationType parsedConfigurationType=ConfigurationType.toType(configurationType);    LocalConfiguration configuration=(LocalConfiguration)CONFIGURATION_FACTORY.createConfiguration(containerId,ContainerType.INSTALLED,parsedConfigurationType,configurationHome);    if (request.isSave()) {      fileManager.deleteWorkspaceDirectory(handleId);    }    configuration.getProperties().putAll(configurationProperties);    if (configuration instanceof StandaloneLocalConfiguration) {      StandaloneLocalConfiguration standaloneConfiguration=(StandaloneLocalConfiguration)configuration;      for (      PropertyTable xmlReplacement : xmlReplacements) {        String file=xmlReplacement.get("file",true);        String xpathExpression=xmlReplacement.get("xpathExpression",true);        String attributeName=xmlReplacement.get("attributeName",false);        if (attributeName != null && attributeName.isEmpty()) {          attributeName=null;        }        String value=xmlReplacement.get("value",true);        Boolean ignoreIfNonExisting;        String ignoreIfNonExistingString=xmlReplacement.get("ignoreIfNonExisting",false);        if (ignoreIfNonExistingString == null) {          ignoreIfNonExisting=Boolean.FALSE;        } else {          ignoreIfNonExisting=Boolean.valueOf(ignoreIfNonExistingString);        }        XmlReplacement xmlReplacementObject=new XmlReplacement(file,xpathExpression,attributeName,ignoreIfNonExisting,value);        standaloneConfiguration.addXmlReplacement(xmlReplacementObject);      }    }    InstalledLocalContainer container=(InstalledLocalContainer)CONTAINER_FACTORY.createContainer(containerId,ContainerType.INSTALLED,configuration);    additionalClasspath=setupAdditionalClasspath(additionalClasspath,handleId);    container.setJvmLauncherFactory(new DaemonJvmLauncherFactory(additionalClasspath));    if (timeout != null && !timeout.isEmpty()) {      container.setTimeout(Long.parseLong(timeout));    }    container.setHome(containerHome);    container.setSystemProperties(containerProperties);    if (containerLogFile == null || containerLogFile.isEmpty()) {      containerLogFile="cargo.log";    }    containerLogFile=fileManager.getLogFile(handleId,containerLogFile);    Logger logger=new FileLogger(containerLogFile,containerAppend);    if (containerLogLevel != null && !containerLogLevel.isEmpty()) {      logger.setLevel(LogLevel.toLevel(containerLogLevel));    }    container.setLogger(logger);    if (containerOutputFile == null || containerOutputFile.isEmpty()) {      containerOutputFile="container.log";    }    containerOutputFile=fileManager.getLogFile(handleId,containerOutputFile);    container.setOutput(containerOutputFile);    container.setAppend(containerAppend);    if (installerZipFile != null && installerZipInputStream != null) {      fileManager.saveFile(installerZipFile,installerZipInputStream);    }    if (installerZipUrl != null || installerZipFile != null) {      containerHome=installContainer(installerZipUrl,installerZipFile);    }    if (containerHome != null) {      container.setHome(containerHome);    }    if (request.isSave()) {      saveConfigurationFiles(configurationFiles,handleId,request);    }    setupConfigurationFiles(handleId,configuration,configurationFileProperties,request);    setupDeployableFiles(handleId,containerId,deployableFiles,configuration,request);    if (container instanceof InstalledLocalContainer) {      if (request.isSave()) {        saveExtraFiles(extraFiles,handleId,request);        saveSharedFiles(sharedFiles,handleId,request);      }      setupExtraClasspath((InstalledLocalContainer)container,extraClasspath,handleId);      setupSharedClasspath((InstalledLocalContainer)container,sharedClasspath,handleId);    }    handle.setConfiguration(configuration);    handle.setContainer(container);    handle.setContainerOutputPath(containerOutputFile);    handle.setContainerLogPath(containerLogFile);    if (request.isSave()) {      handle.setAutostart("on".equals(autostart) || "true".equals(autostart));      handle.addProperties(request.getParameters());      fileManager.saveHandleDatabase(handles);    }    if (previousContainer != null) {      try {        previousContainer.stop();        Thread.sleep(5000);      } catch (      Throwable ignored) {      }    }    try {      container.start();    } catch (    Throwable t) {      try {        container.stop();      } catch (      Throwable ignored) {      }      throw t;    }  }}  }
class C{  public UnicastServerRef2(LiveRef ref){  super(ref);}  }
class C{  public ConfirmPanel(){  this(false,false,false,false,false,false);}  }
class C{  private boolean action_OK(){  m_location.setAddress1(txtAddress1.getValue());  m_location.setAddress2(txtAddress2.getValue());  m_location.setAddress3(txtAddress3.getValue());  m_location.setAddress4(txtAddress4.getValue());  m_location.setC_City_ID(txtCity.getC_City_ID());  m_location.setCity(txtCity.getValue());  m_location.setPostal(txtPostal.getValue());  MCountry country=(MCountry)lstCountry.getSelectedItem().getValue();  m_location.setCountry(country);  if (country.isHasRegion() && lstRegion.getSelectedItem() != null) {    MRegion r=(MRegion)lstRegion.getSelectedItem().getValue();    m_location.setRegion(r);  } else {    m_location.setC_Region_ID(0);  }  if (m_location.save()) {    return true;  } else {    return false;  }}  }
class C{  public boolean isBroadcast(){  try {    return channel.socket().getBroadcast();  } catch (  SocketException e) {    throw new RuntimeIoException(e);  }}  }
class C{  @Override public int executeUpdate(String sql,int autoGeneratedKeys) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("executeUpdate(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    }    return executeUpdateInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public UF1(){  this(30);}  }
class C{  public void error(SAXParseException exception) throws SAXException {  throw exception;}  }
class C{  public static void storeWeightValue(Context context,String displayValue){  double value;  try {    value=Double.parseDouble(displayValue);    if (!isMetricUnits(context)) {      value=value * UnitConversions.LB_TO_KG;    }  } catch (  NumberFormatException e) {    Log.e(TAG,"invalid value " + displayValue);    value=getDefaultWeight(context);  }  setFloat(context,R.string.weight_key,(float)value);}  }
class C{  public void addProperty(String property,String value){  add(property,createJsonElement(value));}  }
class C{  protected Rect rotateBoundingBox(Rect box,OrientationManager.DeviceOrientation orientation){  if (orientation == OrientationManager.DeviceOrientation.CLOCKWISE_0 || orientation == OrientationManager.DeviceOrientation.CLOCKWISE_180) {    return new Rect(box);  } else {    return new Rect(box.top,box.left,box.bottom,box.right);  }}  }
class C{  public TransactionOutput duplicateDetached(){  return new TransactionOutput(params,null,Coin.valueOf(value),org.spongycastle.util.Arrays.clone(scriptBytes));}  }
class C{  public void evaluateModelOnce(double prediction,Instance instance) throws Exception {  evaluateModelOnce(makeDistribution(prediction),instance);}  }
class C{  public static <T>List<T> unpatch(List<T> revised,Patch<T> patch){  return patch.restore(revised);}  }
class C{  public static void main(String[] args){  GetETLDriver fc=new GetETLDriver();  GetETLDriverInfo getETLDriverInfo=fc.execute(args);  OozieUtil oozieUtil=new OozieUtil();  try {    oozieUtil.persistBeanData(getETLDriverInfo,false);  } catch (  Exception e) {    LOGGER.error(e);    throw new MetadataException(e);  }}  }
class C{  public String absUrl(String name){  String url=element.absUrl(name);  if (url.length() == 0) {    url=element.attr(name);  }  return url;}  }
class C{  public String toString(boolean includeCompositeClass){  if (value == null)   return "(null)";  String classStr="";  String valueStr;  if (isArray()) {    if (includeCompositeClass) {      int[] d=getArrayDimensions();      StringBuilder sb=new StringBuilder();      sb.append(d[0]);      for (int i=1; i < getDimension(); i++)       sb.append(",").append(d[i]);      classStr=String.format("(%s[%s]) ",compositeClassToString(),sb.toString());    }    valueStr=MultiDimensionArrayUtils.toString(value);  } else {    if (includeCompositeClass)     classStr=String.format("(%s) ",compositeClassToString());    valueStr=MultiDimensionArrayUtils.toString(value);  }  return classStr + valueStr;}  }
class C{  @Override public WebViewMapFragment build(){  if (options == null) {    options=new MapboxWebMapType(accessToken,mapId);  }  if (options instanceof MapboxWebMapType) {    return MapboxWebViewMapFragment.newInstance(options);  }  throw new IllegalStateException("Unable to build MapboxWebMapViewFragment." + "  options == '" + options + "'");}  }
class C{  @Override public void init(FilterConfig filterConfig) throws ServletException {  this.filterConfig=filterConfig;  String value;  String loginClassName=filterConfig.getInitParameter(PARAM_LOGIN_CLASS);  if (ADMStringUtils.isBlank(loginClassName)) {    throw new ServletException("The filter init-param " + PARAM_LOGIN_CLASS + " is missing!");  }  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();  if (classLoader == null) {    classLoader=getClass().getClassLoader();  }  try {    Class<?> c=classLoader.loadClass(loginClassName);    loginMethod=c.getMethod("login",new Class[]{String.class,char[].class,String.class,HttpServletRequest.class,HttpServletResponse.class});    filterConfig.getServletContext().setAttribute(Constants.CTX_ATTR_LOGIN_METHOD,loginMethod);    logger.logDebug("loginClassName=" + loginClassName);  } catch (  Exception e) {    logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_INITIALIZE_LOGIN_METHOD_FAILED);  }  value=filterConfig.getInitParameter(PARAM_LOGIN_PAGE);  loginPage=checkPage(value,loginPage);  logger.logDebug("loginPage=" + loginPage);  value=filterConfig.getInitParameter(PARAM_PWD_PAGE);  pwdPage=checkPage(value,pwdPage);  logger.logDebug("pwdPage=" + pwdPage);  realm=filterConfig.getInitParameter(PARAM_REALM);  if (ADMStringUtils.isBlank(realm)) {    throw new ServletException("The filter init-param " + PARAM_REALM + " is missing!");  }  logger.logDebug("realm=" + realm);  value=filterConfig.getInitParameter(PARAM_ERROR_PAGE);  errorPage=checkPage(value,errorPage);  logger.logDebug("errorPage=" + errorPage);  publicUrlPattern=filterConfig.getInitParameter(PARAM_PUBLIC_URL_PATTERN);  logger.logDebug("publicUrlPattern=" + publicUrlPattern);  ServiceAccess serviceAccess=new EJBServiceAccess();  ConfigurationService cfgService=serviceAccess.getService(ConfigurationService.class);  TenantService tenantService=serviceAccess.getService(TenantService.class);  authSettings=new AuthenticationSettings(tenantService,cfgService);  try {    authSettings.init(null);  } catch (  NotExistentTenantException e) {  }}  }
class C{  public void onTcpReadable(PseudoTCPBase tcp){  if (logger.isLoggable(Level.FINER)) {    logger.log(Level.FINER,"TCP READABLE data available for reading: " + tcp.getAvailable());  }synchronized (read_notify) {    read_notify.notifyAll();  }}  }
class C{  PlainSocketImpl(){  if (useDualStackImpl) {    impl=new DualStackPlainSocketImpl(exclusiveBind);  } else {    impl=new TwoStacksPlainSocketImpl(exclusiveBind);  }}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.845 -0500",hash_original_method="C779AD4EE203E642C9A6B93773CE1027",hash_generated_method="3518CD312AFC52DA7EF5346FA10E1FB5") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.REPLACES_TO);    Replaces replaces=new Replaces();    this.lexer.SPorHT();    String callId=lexer.byteStringNoSemicolon();    this.lexer.SPorHT();    super.parse(replaces);    replaces.setCallId(callId);    return replaces;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  public void addContainerRequest(Map<StreamingContainerAgent.ContainerStartRequest,MutablePair<Integer,ContainerRequest>> requestedResources,int loopCounter,List<ContainerRequest> containerRequests,StreamingContainerAgent.ContainerStartRequest csr,ContainerRequest cr){  MutablePair<Integer,ContainerRequest> pair=new MutablePair<Integer,ContainerRequest>(loopCounter,cr);  requestedResources.put(csr,pair);  containerRequests.add(cr);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String streamHeadsHeader=null;  String elevationModifiedHeader=null;  String correctedDemHeader=null;  List<StreamHead> streamHeadList=new ArrayList<>();  int counter=0;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      streamHeadsHeader=args[i];    } else     if (i == 2) {      elevationModifiedHeader=args[i];    } else     if (i == 3) {      correctedDemHeader=args[i];    } else     if (i == 4) {      maxRadius=Double.parseDouble(args[i]);    }  }  if ((demHeader == null) || (streamHeadsHeader == null) || (elevationModifiedHeader == null)|| (correctedDemHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    streamHeads=new WhiteboxRaster(streamHeadsHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    elevationModified=new WhiteboxRaster(elevationModifiedHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    elevationModified.setPreferredPalette("blueyellow.pal");    elevationModified.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    elevationModified.setZUnits("dimensionless");    correctedDEM=new WhiteboxRaster(correctedDemHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    correctedDEM.setPreferredPalette("blueyellow.pal");    correctedDEM.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    correctedDEM.setZUnits("dimensionless");    if (streamHeads.getNumberColumns() != numCols || streamHeads.getNumberRows() != numRows) {      showFeedback("Input images must have the same dimensions.");      return;    }    updateProgress("Loop 1 of 4:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (dem.getValue(row,col) != noData) {          elevationModified.setValue(row,col,0);        } else {          elevationModified.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 4:",(int)progress);    }    updateProgress("Loop 2 of 4:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (streamHeads.getValue(row,col) == 1) {          streamHeadList.add(new StreamHead(col,row,dem.getValue(row,col)));        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 4:",(int)progress);    }    streamHeadList=OrderStreamHeads(streamHeadList);    updateProgress("Loop 3 of 4:",0);    for (    StreamHead streamHead : streamHeadList) {      CheckFlowPath(streamHead.GetXCoord(),streamHead.GetYCoord());      counter=counter + 1;      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * counter / streamHeadList.size());      updateProgress("Loop 3 of 4:",(int)progress);    }    updateProgress("Loop 4 of 4:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (elevationModified.getValue(row,col) != noData) {          correctedDEM.setValue(row,col,dem.getValue(row,col) - elevationModified.getValue(row,col));        } else {          correctedDEM.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 4 of 4:",(int)progress);    }    elevationModified.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    elevationModified.addMetadataEntry("Created on " + new Date());    correctedDEM.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    correctedDEM.addMetadataEntry("Created on " + new Date());    dem.close();    streamHeads.close();    elevationModified.close();    correctedDEM.close();    returnData(correctedDemHeader);  } catch (  Exception e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public BaseAdapterHelper linkify(int viewId){  TextView view=retrieveView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  public void actionPerformed(ActionEvent e){  Caret c=textArea.getCaret();  if (c.getDot() != c.getMark()) {    return;  }  RSyntaxDocument doc=(RSyntaxDocument)textArea.getDocument();  doc.readLock();  try {    removeHighlights();    int line=textArea.getCaretLineNumber();    Token tokenList=textArea.getTokenListForLine(line);    int dot=c.getDot();    Token t=RSyntaxUtilities.getTokenAtOffset(tokenList,dot);    if (t == null || !isValidType(t) || isNonWordChar(t)) {      dot--;      try {        if (dot >= textArea.getLineStartOffset(line)) {          t=RSyntaxUtilities.getTokenAtOffset(tokenList,dot);        }      } catch (      BadLocationException ble) {        ble.printStackTrace();      }    }    if (t != null && isValidType(t) && !isNonWordChar(t)) {      RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter();      String lexeme=t.getLexeme();      int type=t.type;      for (int i=0; i < textArea.getLineCount(); i++) {        Token temp=textArea.getTokenListForLine(i);        while (temp != null && temp.isPaintable()) {          if (temp.is(type,lexeme)) {            try {              int end=temp.offset + temp.textCount;              Object tag=h.addMarkedOccurrenceHighlight(temp.offset,end,p);              tags.add(tag);            } catch (            BadLocationException ble) {              ble.printStackTrace();            }          }          temp=temp.getNextToken();        }      }    }  }  finally {    doc.readUnlock();  }  textArea.fireMarkedOccurrencesChanged();}  }
class C{  public static IFile createFile(IPath path,String contents) throws CoreException, UnsupportedEncodingException {  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(contents.getBytes("UTF-8"));  return createFile(path,byteArrayInputStream);}  }
class C{  public byte[] wrap(byte[] outgoing,int offset,int len) throws SaslException {  throw new IllegalStateException("wrap: QOP has neither integrity nor privacy>");}  }
class C{  public Rating(){  super(KEY);}  }
class C{  private static MapperPriority groupPriority(HadoopMapReducePlanGroup grp,@Nullable Collection<UUID> affIds,@Nullable UUID prioAffId){  assert F.isEmpty(affIds) ? prioAffId == null : prioAffId == F.first(affIds);  assert grp != null;  MapperPriority prio=MapperPriority.NORMAL;  if (!F.isEmpty(affIds)) {    for (int i=0; i < grp.nodeCount(); i++) {      UUID id=grp.nodeId(i);      if (affIds.contains(id)) {        prio=MapperPriority.HIGH;        if (F.eq(prioAffId,id)) {          prio=MapperPriority.HIGHEST;          break;        }      }    }  }  return prio;}  }
class C{  public void environmentConfigure(EnvironmentClassLoader loader){}  }
class C{  private VPlexMigrationInfo migrateLocalVirtualVolume(String migrationName,VPlexVirtualVolumeInfo virtualVolumeInfo,Map<VolumeInfo,VPlexStorageVolumeInfo> storageVolumeInfoMap,boolean startNow,boolean isRemote,boolean useDeviceMigration,String transferSize) throws VPlexApiException {  if (isRemote || useDeviceMigration) {    return migrateLocalVirtualVolumeDevice(migrationName,virtualVolumeInfo,storageVolumeInfoMap,startNow,transferSize);  } else {    return migrateLocalVirtualVolumeExtent(migrationName,virtualVolumeInfo,storageVolumeInfoMap,startNow,transferSize);  }}  }
class C{  public static double[][] divide(double[][] v1,double v){  double[][] array=new double[v1.length][v1[0].length];  for (int i=0; i < v1.length; i++)   for (int j=0; j < v1[i].length; j++)   array[i][j]=v1[i][j] / v;  return array;}  }
class C{  public void testAcceptOffer(){  SystemClock.sleep(1000);  Matcher<View> cardTitleView=allOf(withId(R.id.offer_title),withText("Recharge Data"));  onView(allOf(withId(R.id.accept),hasSibling(cardTitleView))).perform(click());  onView(cardTitleView).check(ViewAssertions.doesNotExist());}  }
class C{  public PeriodFormatter withParseType(PeriodType type){  if (type == iParseType) {    return this;  }  return new PeriodFormatter(iPrinter,iParser,iLocale,type);}  }
class C{  public static Exception parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  Exception object=new Exception();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"Exception".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (Exception)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","Exception").equals(reader.getName())) {      object.setException(org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(reader,ExtensionMapper.class));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public G generate(int numVertices,double p,long randomSeed){  G g=builder.createGraph();  for (int i=0; i < numVertices; i++)   builder.addVertex(g);  return generate(g,p,randomSeed);}  }
class C{  public static boolean isValid(Cursor cursor){  return cursor != null && !cursor.isClosed();}  }
class C{  public void add(AbstractMergeNode block){  if (workList == null) {    allocate();  } else   if (workListIndex == workList.length) {    grow();  }  workList[workListIndex++]=block;}  }
class C{  public Properties toProperties(){  if (keyStoreLocation == null) {    throw new IllegalStateException("Key store location required!");  }  if (trustStoreLocation == null) {    throw new IllegalStateException("Trust store location required!");  }  Properties props=new Properties();  props.put(KEY_STORE,keyStoreLocation);  if (keyStorePassword != null) {    props.put(KEY_STORE_PWD,new String(keyStorePassword));  }  props.put(TRUST_STORE,trustStoreLocation);  if (trustStorePassword != null) {    props.put(TRUST_STORE_PWD,new String(trustStorePassword));  }  return props;}  }
class C{  public Packed64(int packedIntsVersion,DataInput in,int valueCount,int bitsPerValue) throws IOException {  super(valueCount,bitsPerValue);  final PackedInts.Format format=PackedInts.Format.PACKED;  final long byteCount=format.byteCount(packedIntsVersion,valueCount,bitsPerValue);  final int longCount=format.longCount(PackedInts.VERSION_CURRENT,valueCount,bitsPerValue);  blocks=new long[longCount];  for (int i=0; i < byteCount / 8; ++i) {    blocks[i]=in.readLong();  }  final int remaining=(int)(byteCount % 8);  if (remaining != 0) {    long lastLong=0;    for (int i=0; i < remaining; ++i) {      lastLong|=(in.readByte() & 0xFFL) << (56 - i * 8);    }    blocks[blocks.length - 1]=lastLong;  }  maskRight=~0L << (BLOCK_SIZE - bitsPerValue) >>> (BLOCK_SIZE - bitsPerValue);  bpvMinusBlockSize=bitsPerValue - BLOCK_SIZE;}  }
class C{  public static void w(String tag,Throwable tr){  w(tag,null,tr);}  }
class C{  @Override protected void update(){  super.update();  if (ideaChanged) {    ideaChanged=false;    detachSprite(ideaSprite);    ideaSprite=getIdeaSprite();    if (ideaSprite != null) {      attachSprite(ideaSprite,HorizontalAlignment.RIGHT,VerticalAlignment.TOP,8,-8);    }  }}  }
class C{  @Override public void updateCharacterStream(String columnLabel,Reader x) throws SQLException {  updateCharacterStream(columnLabel,x,-1);}  }
class C{  private void readObject(){}  }
class C{  protected void initMatrixStorage(){  this.A=new short[(this.n * (this.n + 1) / 2)];}  }
class C{  private boolean checkCompletion(AFTPClient client) throws ApplicationException {  boolean isPositiveCompletion=client.isPositiveCompletion();  if (isPositiveCompletion)   return false;  if (count++ < retrycount)   return true;  if (stoponerror) {    throw new lucee.runtime.exp.FTPException(action,client);  }  return false;}  }
class C{  public void deleteAllEntries(){  mLocalContentResolver.delete(GroupChatData.CONTENT_URI,null,null);  mLocalContentResolver.delete(MessageData.CONTENT_URI,null,null);  mLocalContentResolver.delete(FileTransferData.CONTENT_URI,null,null);  mLocalContentResolver.delete(GroupDeliveryInfoData.CONTENT_URI,null,null);}  }
class C{  public boolean similar(Object other){  try {    if (!(other instanceof JSONObject)) {      return false;    }    Set<String> set=this.keySet();    if (!set.equals(((JSONObject)other).keySet())) {      return false;    }    Iterator<String> iterator=set.iterator();    while (iterator.hasNext()) {      String name=iterator.next();      Object valueThis=this.get(name);      Object valueOther=((JSONObject)other).get(name);      if (valueThis instanceof JSONObject) {        if (!((JSONObject)valueThis).similar(valueOther)) {          return false;        }      } else       if (valueThis instanceof JSONArray) {        if (!((JSONArray)valueThis).similar(valueOther)) {          return false;        }      } else       if (!valueThis.equals(valueOther)) {        return false;      }    }    return true;  } catch (  Throwable exception) {    return false;  }}  }
class C{  public static String[] splitSentences(String mrgContents){  String[] contents=mrgContents.split("(?=\\(\\s*\\()");  if (contents.length > 1) {    if (contents.length > 0 && contents[0].trim().equals("")) {      String[] returnValues=new String[contents.length - 1];      System.arraycopy(contents,1,returnValues,0,returnValues.length);      return returnValues;    } else {      String[] returnValues=new String[contents.length];      System.arraycopy(contents,0,returnValues,0,returnValues.length);      return returnValues;    }  }  String[] lines=mrgContents.split("\r?\n");  for (  String line : lines) {    if (!parensMatch(line)) {      throw new IllegalArgumentException("Parentheses counts do not match for treebank sentence: " + line);    }  }  return lines;}  }
class C{  public TaskHandle launchNewBackup(String queue,String name,String gcsBucket,ImmutableSet<String> kinds){  return getQueue(queue).add(makeTaskOptions(queue,name,gcsBucket,kinds));}  }
class C{  @Override public void parse(final LmReaderCallback<LongRef> callback){  readFromFiles(callback);}  }
class C{  public final Vec3D floor(){  x=MathUtils.floor(x);  y=MathUtils.floor(y);  z=MathUtils.floor(z);  return this;}  }
class C{  private static boolean isComponentDisplayable(final Component c){  if (!c.isVisible()) {    return false;  }  final Container parent=c.getParent();  if (parent == null) {    return false;  }  if (parent instanceof Window) {    final Window w=(Window)parent;    return w.isDisplayable();  }  return isComponentDisplayable(parent);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TYPE_PARAMETER__BOUND:    return bound != null;}return super.eIsSet(featureID);}  }
class C{  @Override public void load(Element element,Object o){  log.debug("Warning: loading of TrainIcon not implemented, TrainIcons will be placed by Operations");}  }
class C{  public String mangleString(String str){  LOGGER.debug("Converting " + str);  for (  String spec : specialChars.keySet()) {    str=str.replace(spec,specialChars.get(spec));  }  LOGGER.debug("   to " + str);  return str;}  }
class C{  protected void drawArrow(Graphics g,int nPosX1,int nPosY1,int nPosX2,int nPosY2){  g.drawLine(nPosX1,nPosY1,nPosX2,nPosY2);  if (nPosX1 == nPosX2) {    if (nPosY1 < nPosY2) {      g.drawLine(nPosX2,nPosY2,nPosX2 + 4,nPosY2 - 8);      g.drawLine(nPosX2,nPosY2,nPosX2 - 4,nPosY2 - 8);    } else {      g.drawLine(nPosX2,nPosY2,nPosX2 + 4,nPosY2 + 8);      g.drawLine(nPosX2,nPosY2,nPosX2 - 4,nPosY2 + 8);    }  } else {    double hyp=0, base=0, perp=0, theta, beta;    int nPosX3=0, nPosY3=0;    if (nPosX2 < nPosX1) {      base=nPosX1 - nPosX2;      hyp=Math.sqrt((nPosX2 - nPosX1) * (nPosX2 - nPosX1) + (nPosY2 - nPosY1) * (nPosY2 - nPosY1));      theta=Math.acos(base / hyp);    } else {      base=nPosX1 - nPosX2;      hyp=Math.sqrt((nPosX2 - nPosX1) * (nPosX2 - nPosX1) + (nPosY2 - nPosY1) * (nPosY2 - nPosY1));      theta=Math.acos(base / hyp);    }    beta=30 * Math.PI / 180;    hyp=8;    base=Math.cos(theta - beta) * hyp;    perp=Math.sin(theta - beta) * hyp;    nPosX3=(int)(nPosX2 + base);    if (nPosY1 < nPosY2) {      nPosY3=(int)(nPosY2 - perp);    } else {      nPosY3=(int)(nPosY2 + perp);    }    g.drawLine(nPosX2,nPosY2,nPosX3,nPosY3);    base=Math.cos(theta + beta) * hyp;    perp=Math.sin(theta + beta) * hyp;    nPosX3=(int)(nPosX2 + base);    if (nPosY1 < nPosY2) {      nPosY3=(int)(nPosY2 - perp);    } else {      nPosY3=(int)(nPosY2 + perp);    }    g.drawLine(nPosX2,nPosY2,nPosX3,nPosY3);  }}  }
class C{  public boolean canAeroTurn(IGame game){  Entity en=getEntity();  if (!(en instanceof Aero)) {    return false;  }  if (dueFreeTurn()) {    return true;  }  if (isManeuver()) {    return true;  }  if (en instanceof ConvFighter) {    return false;  }  if (game.getBoard().onGround()) {    if (distance < 8) {      return false;    }  } else   if (distance == 0) {    return false;  }  return getNTurns() == 0;}  }
class C{  public List<BurpCertificate> cloneCertificateChain(List<BurpCertificate> certificateChain){  List<BurpCertificate> certificates=new LinkedList<>();  Collections.reverse(certificateChain);  BurpCertificate currentCertificate=null;  BurpCertificate previousCertificate=null;  for (  BurpCertificate c : certificateChain) {    if (previousCertificate == null) {      currentCertificate=cloneCertificate(c,new BurpCertificateBuilder(c.getSubject()));    } else {      currentCertificate=cloneAndSignCertificate(c,new BurpCertificateBuilder(c.getSubject()),previousCertificate);    }    burpCertificateStore.removeCertificate(currentCertificate);    certificates.add(currentCertificate);    previousCertificate=currentCertificate;  }  Collections.reverse(certificates);  burpCertificateStore.addCertificateChain(certificates);  setStatus("Certificate chain cloned");  setCertificateTree();  return certificates;}  }
class C{  private void synchronizeDebugger(final IDebugger oldDebugger,final IDebugger newDebugger){  if (oldDebugger != null) {    m_breakpointSynchronizer.dispose();    m_threadEventSynchronizer.dispose();  }  if (newDebugger != null) {    m_breakpointSynchronizer=new CBreakpointSynchronizer(newDebugger.getBreakpointManager(),m_graph);    m_threadEventSynchronizer=new CThreadEventSynchronizer(newDebugger,m_graph);    new CNodeSynchronizer(newDebugger.getBreakpointManager(),m_graph,m_debugPerspective);  }}  }
class C{  public static AlignedImage alignImage(BufferedImage sourceImage,float[] latitudes,float[] longitudes,Sector sector,Dimension dimension) throws InterruptedException {  if (sourceImage == null) {    String message=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  if (latitudes == null || longitudes == null || latitudes.length != longitudes.length) {    String message=Logging.getMessage("ImageUtil.FieldArrayInvalid");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  int sourceWidth=sourceImage.getWidth();  int sourceHeight=sourceImage.getHeight();  if (sourceWidth < 1 || sourceHeight < 1) {    String message=Logging.getMessage("ImageUtil.EmptyImage");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  if (longitudes.length < sourceWidth * sourceHeight || latitudes.length < sourceWidth * sourceHeight) {    String message=Logging.getMessage("ImageUtil.FieldArrayTooShort");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  GeographicImageInterpolator grid=new GeographicImageInterpolator(new Dimension(sourceWidth,sourceHeight),longitudes,latitudes,10,1);  if (sector == null) {    sector=grid.getSector();  }  if (dimension == null) {    double maxDimension=Math.max(sourceWidth,sourceHeight);    double maxSectorDelta=Math.max(sector.getDeltaLonDegrees(),sector.getDeltaLatDegrees());    double pixelsPerDegree=maxDimension / maxSectorDelta;    dimension=new Dimension((int)Math.round(pixelsPerDegree * sector.getDeltaLonDegrees()),(int)Math.round(pixelsPerDegree * sector.getDeltaLatDegrees()));  }  int[] sourceColors=sourceImage.getRGB(0,0,sourceWidth,sourceHeight,null,0,sourceWidth);  int[] destColors=new int[dimension.width * dimension.height];  double dLon=sector.getDeltaLonDegrees() / dimension.width;  double dLat=sector.getDeltaLatDegrees() / dimension.height;  for (int j=0; j < dimension.height; j++) {    Thread.sleep(0);    float lat=(float)(sector.getMaxLatitude().degrees - j * dLat - dLon / 2d);    for (int i=0; i < dimension.width; i++) {      float lon=(float)(sector.getMinLongitude().degrees + i * dLon + dLat / 2d);      ImageInterpolator.ContainingCell cell=grid.findContainingCell(lon,lat);      if (cell != null) {        int color=interpolateColor(cell.uv[0],cell.uv[1],sourceColors[cell.fieldIndices[0]],sourceColors[cell.fieldIndices[1]],sourceColors[cell.fieldIndices[3]],sourceColors[cell.fieldIndices[2]]);        destColors[j * dimension.width + i]=color;      }    }  }  sourceColors=null;  grid=null;  BufferedImage destImage=new BufferedImage(dimension.width,dimension.height,BufferedImage.TYPE_4BYTE_ABGR);  destImage.setRGB(0,0,dimension.width,dimension.height,destColors,0,dimension.width);  return new AlignedImage(destImage,sector);}  }
class C{  protected void processLineTerminator(int pos,int endPos){  if (scannerDebug)   System.out.println("processTerminator(" + pos + ","+ endPos+ ")=|"+ new String(reader.getRawCharacters(pos,endPos))+ "|");}  }
class C{  public Anonymous_numExpr_3_ createAnonymous_numExpr_3_(){  Anonymous_numExpr_3_Impl anonymous_numExpr_3_=new Anonymous_numExpr_3_Impl();  return anonymous_numExpr_3_;}  }
class C{  public synchronized void clear(){  freeSpace.clear();  freeSpace.add(new BlockRange(firstFreeBlock,Integer.MAX_VALUE - firstFreeBlock));}  }
class C{  public void addMenuKeyListener(MenuKeyListener l){  listenerList.add(MenuKeyListener.class,l);}  }
class C{  protected void softCommitTransaction() throws SyncFailedException, IOException {  rollBackOut.flush();  rollBackFileOut.getFD().sync();  if (softModeSavedRows.size() != 0) {    RandomAccessFile rbRaf=new RandomAccessFile(getRollBackFile(),"rws");    rbRaf.seek(SOFT_COMMIT_NUM_ROWS_INDEX);    rbRaf.writeInt(softModeSavedRows.size());    rbRaf.getFD().sync();    rbRaf.close();  }  rollBackOut.close();  rollBackOut=null;  rollBackFileOut=null;  hardWriteMode=true;}  }
class C{  private <T>void validateAndFailIfSucceeds(XmlSink.Bound<T> sink,Class<? extends Exception> expected){  thrown.expect(expected);  PipelineOptions options=PipelineOptionsFactory.create();  sink.validate(options);}  }
class C{  @Override public ContinuousDistribution toContinuous(){  return toDiscrete().toContinuous();}  }
class C{  private synchronized void saveProperties(){  boolean error=false;  File tempFile=null;  Writer writer=null;  try {    tempFile=new File(file.getParentFile(),file.getName() + ".tmp");    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile),"UTF-8"));    OutputFormat prettyPrinter=OutputFormat.createPrettyPrint();    XMLWriter xmlWriter=new XMLWriter(writer,prettyPrinter);    xmlWriter.write(document);  } catch (  Exception e) {    Log.error(e.getMessage(),e);    error=true;  } finally {    if (writer != null) {      try {        writer.close();      } catch (      IOException e1) {        Log.error(e1.getMessage(),e1);        error=true;      }    }  }  if (!error) {    if (!file.delete()) {      Log.error("Error deleting property file: " + file.getAbsolutePath());      return;    }    try {      copy(tempFile,file);    } catch (    Exception e) {      Log.error(e.getMessage(),e);      error=true;    }    if (!error) {      tempFile.delete();    }  }}  }
class C{  public ShardId shardId(){  return this.shardId;}  }
class C{  public SourceDebugExtensionAttr(String debug){  this.debug=debug;}  }
class C{  public void testExchangePartition() throws Exception {  if (versionMeetsMinimum(5,6,6)) {    createTable("testExchangePartition1","(id int(11) NOT NULL AUTO_INCREMENT, year year(4) DEFAULT NULL," + " modified timestamp NOT NULL, PRIMARY KEY (id)) ENGINE=InnoDB ROW_FORMAT=COMPACT PARTITION BY HASH (id) PARTITIONS 2");    createTable("testExchangePartition2","LIKE testExchangePartition1");    this.stmt.executeUpdate("ALTER TABLE testExchangePartition2 REMOVE PARTITIONING");    if (versionMeetsMinimum(5,7,4)) {      this.stmt.executeUpdate("ALTER TABLE testExchangePartition1 EXCHANGE PARTITION p1 WITH TABLE testExchangePartition2");    } else {      this.stmt.executeUpdate("ALTER IGNORE TABLE testExchangePartition1 EXCHANGE PARTITION p1 WITH TABLE testExchangePartition2");    }    if (versionMeetsMinimum(5,7,4)) {      this.pstmt=this.conn.prepareStatement("ALTER TABLE testExchangePartition1 EXCHANGE PARTITION p1 WITH TABLE testExchangePartition2");    } else {      this.pstmt=this.conn.prepareStatement("ALTER IGNORE TABLE testExchangePartition1 " + "EXCHANGE PARTITION p1 WITH TABLE testExchangePartition2");    }    assertEquals(Util.isJdbc4() ? Class.forName(Util.isJdbc42() ? "com.mysql.jdbc.JDBC42PreparedStatement" : "com.mysql.jdbc.JDBC4PreparedStatement") : com.mysql.jdbc.PreparedStatement.class,this.pstmt.getClass());    this.pstmt.executeUpdate();    Connection testConn=null;    try {      testConn=getConnectionWithProps("useServerPrepStmts=true,emulateUnsupportedPstmts=false");      if (versionMeetsMinimum(5,7,4)) {        this.pstmt=testConn.prepareStatement("ALTER TABLE testExchangePartition1 EXCHANGE PARTITION p1 WITH TABLE testExchangePartition2");      } else {        this.pstmt=testConn.prepareStatement("ALTER IGNORE TABLE testExchangePartition1 " + "EXCHANGE PARTITION p1 WITH TABLE testExchangePartition2");      }      assertEquals(Util.isJdbc4() ? Class.forName(Util.isJdbc42() ? "com.mysql.jdbc.JDBC42ServerPreparedStatement" : "com.mysql.jdbc.JDBC4ServerPreparedStatement") : com.mysql.jdbc.ServerPreparedStatement.class,this.pstmt.getClass());      this.pstmt.executeUpdate();    }  finally {      if (testConn != null) {        testConn.close();      }    }  }}  }
class C{  public ReusableInternalIdToLongIterator initializeRightInternalIdToLongIterator(){  return new NodeMetadataInternalIdToLongIterator(getLeftNodesToIndexBiMap(),getLeftNodesToMetadataMap(),edgeTypeMask);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ERROR_CODE:    return isSetErrorCode();case MESSAGE:  return isSetMessage();}throw new IllegalStateException();}  }
class C{  public static <T>ArrayList<T> readGZip(String fileName,ITransformer<String,T> transformer) throws IOException {  ArrayList<T> list=new ArrayList<>();  GZIPInputStream zipin;  if (IOUtils.exists(fileName))   zipin=new GZIPInputStream(new FileInputStream(fileName)); else   zipin=new GZIPInputStream(LineIO.class.getClassLoader().getResourceAsStream(fileName.substring(fileName.lastIndexOf('/') + 1)));  BufferedReader reader=new BufferedReader(new InputStreamReader(zipin));  String line;  while ((line=reader.readLine()) != null) {    list.add(transformer.transform(line));  }  zipin.close();  return list;}  }
class C{  public static void filterFile(Filter filter,String[] options) throws Exception {  boolean debug=false;  Instances data=null;  DataSource input=null;  PrintWriter output=null;  boolean helpRequest;  String sourceCode="";  try {    helpRequest=Utils.getFlag('h',options);    if (Utils.getFlag('d',options)) {      debug=true;    }    String infileName=Utils.getOption('i',options);    String outfileName=Utils.getOption('o',options);    String classIndex=Utils.getOption('c',options);    if (filter instanceof Sourcable) {      sourceCode=Utils.getOption('z',options);    }    if (filter instanceof OptionHandler) {      ((OptionHandler)filter).setOptions(options);    }    Utils.checkForRemainingOptions(options);    if (helpRequest) {      throw new Exception("Help requested.\n");    }    if (infileName.length() != 0) {      input=new DataSource(infileName);    } else {      input=new DataSource(System.in);    }    if (outfileName.length() != 0) {      output=new PrintWriter(new FileOutputStream(outfileName));    } else {      output=new PrintWriter(System.out);    }    data=input.getStructure();    if (classIndex.length() != 0) {      if (classIndex.equals("first")) {        data.setClassIndex(0);      } else       if (classIndex.equals("last")) {        data.setClassIndex(data.numAttributes() - 1);      } else {        data.setClassIndex(Integer.parseInt(classIndex) - 1);      }    }  } catch (  Exception ex) {    String filterOptions="";    if (filter instanceof OptionHandler) {      filterOptions+="\nFilter options:\n\n";      Enumeration<Option> enu=((OptionHandler)filter).listOptions();      while (enu.hasMoreElements()) {        Option option=enu.nextElement();        filterOptions+=option.synopsis() + '\n' + option.description()+ "\n";      }    }    String genericOptions="\nGeneral options:\n\n" + "-h\n" + "\tGet help on available options.\n"+ "\t(use -b -h for help on batch mode.)\n"+ "-i <file>\n"+ "\tThe name of the file containing input instances.\n"+ "\tIf not supplied then instances will be read from stdin.\n"+ "-o <file>\n"+ "\tThe name of the file output instances will be written to.\n"+ "\tIf not supplied then instances will be written to stdout.\n"+ "-c <class index>\n"+ "\tThe number of the attribute to use as the class.\n"+ "\t\"first\" and \"last\" are also valid entries.\n"+ "\tIf not supplied then no class is assigned.\n";    if (filter instanceof Sourcable) {      genericOptions+="-z <class name>\n" + "\tOutputs the source code representing the trained filter.\n";    }    throw new Exception('\n' + ex.getMessage() + filterOptions+ genericOptions);  }  if (debug) {    System.err.println("Setting input format");  }  boolean printedHeader=false;  if (filter.setInputFormat(data)) {    if (debug) {      System.err.println("Getting output format");    }    output.println(filter.getOutputFormat().toString());    printedHeader=true;  }  Instance inst;  while (input.hasMoreElements(data)) {    inst=input.nextElement(data);    if (debug) {      System.err.println("Input instance to filter");    }    if (filter.input(inst)) {      if (debug) {        System.err.println("Filter said collect immediately");      }      if (!printedHeader) {        throw new Error("Filter didn't return true from setInputFormat() " + "earlier!");      }      if (debug) {        System.err.println("Getting output instance");      }      output.println(filter.output().toString());    }  }  if (debug) {    System.err.println("Setting end of batch");  }  if (filter.batchFinished()) {    if (debug) {      System.err.println("Filter said collect output");    }    if (!printedHeader) {      if (debug) {        System.err.println("Getting output format");      }      output.println(filter.getOutputFormat().toString());    }    if (debug) {      System.err.println("Getting output instance");    }    while (filter.numPendingOutput() > 0) {      output.println(filter.output().toString());      if (debug) {        System.err.println("Getting output instance");      }    }  }  if (debug) {    System.err.println("Done");  }  if (output != null) {    output.close();  }  if (sourceCode.length() != 0) {    System.out.println(wekaStaticWrapper((Sourcable)filter,sourceCode,data,filter.getOutputFormat()));  }}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  private void decreaseKey(FibonacciHeapNode<T> x,int k){  if (k > x.key) {    throw new IllegalArgumentException("decreaseKey() got larger key value");  }  x.key=k;  FibonacciHeapNode<T> y=x.parent;  if ((y != null) && (x.key < y.key)) {    cut(x,y);    cascadingCut(y);  }  if (x.key < minNode.key) {    minNode=x;  }}  }
class C{  private static File[] listAllFiles(File directory){  if (directory == null || !directory.exists()) {    return new File[0];  }  List<File> fileList=new ArrayList<File>();  for (  File file : directory.listFiles()) {    if (file.isDirectory()) {      fileList.addAll(Arrays.asList(listAllFiles(file)));    } else {      fileList.add(file);    }  }  return fileList.toArray(new File[0]);}  }
class C{  private Set<GHBranch> branchesToCheck(String branch,@Nonnull GHRepository remoteRepo,GitHubBranchRepository localRepository) throws IOException {  final LinkedHashSet<GHBranch> ghBranches=new LinkedHashSet<>();  if (branch != null) {    final GHBranch ghBranch=remoteRepo.getBranches().get(branch);    if (ghBranch != null) {      ghBranches.add(ghBranch);    }  } else {    ghBranches.addAll(remoteRepo.getBranches().values());  }  return ghBranches;}  }
class C{  public NewsletterAspect(final TaskExecutor taskExecutor,final MailService mailService,final MailComposer mailComposer,final ThemeService themeService){  super(taskExecutor);  this.mailService=mailService;  this.mailComposer=mailComposer;  this.themeService=themeService;}  }
class C{  public static DataStorage newDataStorage(Properties properties) throws IllegalDataStorageTypeException {  String storageType=(String)properties.get(EAGLE_STORAGE_TYPE);  if (storageType == null) {    LOG.error(EAGLE_STORAGE_TYPE + " is null");    throw new IllegalDataStorageTypeException(EAGLE_STORAGE_TYPE + " is null");  }  return newDataStorage(storageType);}  }
class C{  public int readInteger(String key,int defaultValue){  return preferences.getInt(key,defaultValue);}  }
class C{  void onDragDismissed(){}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  public ExtraCode_ createExtraCode_(){  ExtraCode_Impl extraCode_=new ExtraCode_Impl();  return extraCode_;}  }
class C{  public void testNullStoredBytesRefField() throws Exception {  Directory dir=newDirectory();  Analyzer analyzer=new MockAnalyzer(random());  IndexWriter iw=new IndexWriter(dir,new IndexWriterConfig(analyzer));  Document doc=new Document();  iw.addDocument(doc);  expectThrows(IllegalArgumentException.class,null);  assertNull(iw.getTragicException());  iw.close();  DirectoryReader r=DirectoryReader.open(dir);  assertEquals(1,r.numDocs());  r.close();  dir.close();}  }
class C{  private synchronized void notifyZoomListeners(ZoomEvent e){  for (  ZoomListener listener : mZoomListeners) {    listener.zoomApplied(e);  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  int sourceNode=transformer.getXPathContext().getCurrentNode();  String countString=getCountString(transformer,sourceNode);  try {    transformer.getResultTreeHandler().characters(countString.toCharArray(),0,countString.length());  } catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public static void main(String args[]){  VagTestFrame frm=new VagTestFrame();  frm.setVisible(true);  if (args.length > 0) {    try {      ser.setDeviceName(args[0]);      if (args.length > 1) {        frm.setControllerAddress(Integer.parseInt(args[1],16));      }    } catch (    Exception ex) {      JOptionPane.showMessageDialog(frm,args[0],ex.toString(),JOptionPane.ERROR_MESSAGE);    }  } else {    prt.simulation.start();  }}  }
class C{  public void unblock(Subnet subnet){  if (subnet == null) {    throw new IllegalArgumentException("Subnet can not be null");  }  blacklist.remove(subnet);}  }
class C{  public JsonObject(JsonObject object){  this(object,false);}  }
class C{  public static final Instance deleteAttributesAt(Instance x,int indicesToRemove[]){  Arrays.sort(indicesToRemove);  for (int j=indicesToRemove.length - 1; j >= 0; j--) {    x.deleteAttributeAt(indicesToRemove[j]);  }  return x;}  }
class C{  public boolean isArray(){  return false;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMLAD");  translateAll(environment,instruction,"SMLAD",instructions);}  }
class C{  public static String formatNumberToE164(String phoneNumber,String defaultCountryIso){  PhoneNumberUtil util=PhoneNumberUtil.getInstance();  String result=null;  try {    PhoneNumber pn=util.parse(phoneNumber,defaultCountryIso);    if (util.isValidNumber(pn)) {      result=util.format(pn,PhoneNumberFormat.E164);    }  } catch (  NumberParseException e) {  }  return result;}  }
class C{  public static double normalizeZeroTwoPiFast(double angle){  if ((angle >= 0.0) && (angle <= 2 * Math.PI)) {    return angle;  }  double angleMinusPiPiOrSo=remainderTwoPiFast(angle);  if (angleMinusPiPiOrSo < 0.0) {    return angleMinusPiPiOrSo + 2 * Math.PI;  } else {    return angleMinusPiPiOrSo;  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  CompassPlot clone=(CompassPlot)super.clone();  if (this.circle1 != null) {    clone.circle1=(Ellipse2D)this.circle1.clone();  }  if (this.circle2 != null) {    clone.circle2=(Ellipse2D)this.circle2.clone();  }  if (this.a1 != null) {    clone.a1=(Area)this.a1.clone();  }  if (this.a2 != null) {    clone.a2=(Area)this.a2.clone();  }  if (this.rect1 != null) {    clone.rect1=(Rectangle2D)this.rect1.clone();  }  clone.datasets=(ValueDataset[])this.datasets.clone();  clone.seriesNeedle=(MeterNeedle[])this.seriesNeedle.clone();  for (int i=0; i < this.datasets.length; ++i) {    if (clone.datasets[i] != null) {      clone.datasets[i].addChangeListener(clone);    }  }  return clone;}  }
class C{  public static String encode(byte[] a){  if (a == null || a.length == 0) {    return "x";  }  int[] cnt=new int[256];  for (int i=0; i < a.length; i++) {    cnt[a[i] & 0xff]++;  }  int shift=1;  int nEscapes=a.length;  for (int i=1; i < 256; i++) {    if (i == '\'') {      continue;    }    int sum=cnt[i] + cnt[(i + 1) & 0xff] + cnt[(i + '\'') & 0xff];    if (sum < nEscapes) {      nEscapes=sum;      shift=i;      if (nEscapes == 0) {        break;      }    }  }  int outLen=a.length + nEscapes + 1;  StringBuffer out=new StringBuffer(outLen);  out.append((char)shift);  for (int i=0; i < a.length; i++) {    char c=(char)((a[i] - shift) & 0xff);    if (c == 0) {      out.append((char)1);      out.append((char)1);    } else     if (c == 1) {      out.append((char)1);      out.append((char)2);    } else     if (c == '\'') {      out.append((char)1);      out.append((char)3);    } else {      out.append(c);    }  }  return out.toString();}  }
class C{  public boolean finished(){  return this.readInt < 0;}  }
class C{  public Long addRoomWithModerationAndQuestions(String SID,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Boolean appointment,Boolean isDemoRoom,Integer demoTime,Boolean isModeratedRoom,Boolean allowUserQuestions){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    return roommanagement.addRoom(user_level,name,roomtypes_id,comment,numberOfPartizipants,ispublic,null,appointment,isDemoRoom,demoTime,isModeratedRoom,null,allowUserQuestions,false,false,"","","",null,null,null,false,false,false,false,false,false,false,false);  } catch (  Exception err) {    log.error("[addRoomWithModerationAndQuestions] ",err);  }  return new Long(-1);}  }
class C{  public void prepare(){  markState=(byte)(GC_MARK_BIT_MASK - markState);}  }
class C{  private final Deliver<M> deliver(){  return _deliver;}  }
class C{  public static ASTQueryContainer parseQuery(final String query) throws TokenMgrError, ParseException {  final SyntaxTreeBuilder stb=new SyntaxTreeBuilder(new StringReader(query));  stb.jj_input_stream.setTabSize(1);  final ASTQueryContainer container=stb.QueryContainer();  container.setSourceString(query);  return container;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.EXACT_QUANTIFIER__MIN:    return min != MIN_EDEFAULT;case RegularExpressionPackage.EXACT_QUANTIFIER__MAX:  return max != MAX_EDEFAULT;case RegularExpressionPackage.EXACT_QUANTIFIER__UNBOUNDED_MAX:return unboundedMax != UNBOUNDED_MAX_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  static ConstantSize dluY(int value){  return new ConstantSize(value,DLUY);}  }
class C{  private static String safeGetSystemProperty(String key,String def){  try {    return System.getProperty(key,def);  } catch (  SecurityException t) {  }catch (  NullPointerException t) {  }catch (  IllegalArgumentException t) {  }  return def;}  }
class C{  protected Class<?> findClass(String className) throws ClassNotFoundException {  throw new ClassNotFoundException("Can not find class " + className);}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public static String toFileContent(Properties props){  try {    StringWriter writer=new StringWriter();    props.store(writer,"");    return writer.toString();  } catch (  IOException ioe) {    throw new IllegalStateException(ioe);  }}  }
class C{  public static VOSubscription toVOSubscription(Subscription subscription,LocalizerFacade facade,PerformanceHint scope){  if (subscription == null) {    return null;  }  VOSubscription voSubscription=new VOSubscription();switch (scope) {case ONLY_IDENTIFYING_FIELDS:    fillIdentifyingFields(voSubscription,subscription);  break;case ONLY_FIELDS_FOR_LISTINGS:fillBaseFields(voSubscription,subscription);break;default :fillAllFields(voSubscription,subscription,facade);}updateValueObject(voSubscription,subscription);return voSubscription;}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  @Override public Iterator<String[]> iterator(){  try {    return new CSVIterator(this);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public NotificationChain basicSetValue(Literal newValue,NotificationChain msgs){  Literal oldValue=value;  value=newValue;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.PRIMITIVE_VALUE_EXPRESSION__VALUE,oldValue,newValue);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private static String toString(int ch){  if (ch < SUPPLEMENTARY_MIN_VALUE) {    return String.valueOf((char)ch);  }  StringBuffer result=new StringBuffer();  result.append(getLeadSurrogate(ch));  result.append(getTrailSurrogate(ch));  return result.toString();}  }
class C{  public ProjectComparisonEntry compareModules(TModule apiImplModule){  Optional<String> implID=getImplementationID(apiImplModule);  if (implID.isPresent()) {    return compareModules(apiImplModule,implID.get());  }  return null;}  }
class C{  @Override public byte toByteArray()[]{  return count == buf.length ? buf : Utils.copyOf(buf,count);}  }
class C{  public void error(String msg){  System.out.println("DOM ERROR! class: " + this.getClass().getName());  throw new RuntimeException(XMLMessages.createXMLMessage(msg,null));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.MODEL__NAME:    return getName();case GamlPackage.MODEL__PRAGMAS:  return getPragmas();case GamlPackage.MODEL__IMPORTS:return getImports();case GamlPackage.MODEL__BLOCK:return getBlock();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Word_ createWord_(){  Word_Impl word_=new Word_Impl();  return word_;}  }
class C{  private void initialize(){  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(225,145);  }  this.addMouseListener(componentMaximiserML);}  }
class C{  private static void printUsage(Options options){  HelpFormatter help=new HelpFormatter();  help.printHelp("arbiter",options);  System.exit(0);}  }
class C{  @GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/clusters") public ClusterList listClusters(@PathParam("id") URI id) throws DatabaseException {  getTenantById(id,false);  verifyAuthorizedInTenantOrg(id,getUserFromContext());  ClusterList list=new ClusterList();  list.setClusters(map(ResourceTypeEnum.CLUSTER,listChildren(id,Cluster.class,"label","tenant")));  return list;}  }
class C{  public static <T>NamedAssociationContainsNamePredicate<T> containsName(NamedAssociation<T> namedAssoc,String name){  return new NamedAssociationContainsNamePredicate<>(namedAssociation(namedAssoc),name);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.393 -0500",hash_original_method="F93FD4BCC6C0F6B375A42EEFE25B9408",hash_generated_method="A63D90834E46605F01C8E0E058E7A7BF") public void asyncConnect(Context srcContext,Handler srcHandler){  mAsyncChannel.connect(srcContext,srcHandler,getMessenger());}  }
class C{  public static FileResource createFileResourceBySha1(final String sha1){  final FileResource resource=new FileResource();  resource.sha1=sha1;  return resource;}  }
class C{  public ResolvableMethod name(String methodName){  this.methodName=methodName;  return this;}  }
class C{  public void applyChanges(){  this.health.setDistributedSystemHealthConfig(this);}  }
class C{  public boolean isUnique(){  return unique;}  }
class C{  public static Victor victor(int pwmPort){  return pwmRegistrar.fetch(pwmPort,Victor.class,null);}  }
class C{  protected IntegerLiteral(BigInteger value,IRI datatype){  super(value.toString(),datatype);  this.value=value;}  }
class C{  public static final void drawCircle(GL2 gl,Circle c,boolean points,boolean line){  double r=c.getRadius();  Vector2 ce=c.getCenter();  double cx=ce.x;  double cy=ce.y;  RenderUtilities.drawCircleFromCenter(gl,r,cx,cy,points,line);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_CLASSIFIER_DEFINITION;}  }
class C{  private void checkInputfields(HttpServletRequest request,ActionErrors errors,SimpleItypeConfig sic,String lblMax,boolean unlimited){  int mxlpc=sic.getMaxLimitPerClass();  int mnlpc=sic.getMinLimitPerClass();  int nc=sic.getNumClasses();  int nr=sic.getNumRooms();  int mpw=sic.getMinPerWeek();  float rc=sic.getRoomRatio();  String lblSubpart=" for <u>" + sic.getItype().getDesc() + "</u>";  long indx=sic.getId();  int ct=errors.size();  if (!unlimited) {    if (mxlpc < 0)     errors.add("subparts" + indx,new ActionMessage("errors.integerGtEq",lblMax + " per class" + lblSubpart,"0")); else {      if (mxlpc > limit && ApplicationProperty.ConfigEditCheckLimits.isTrue()) {        if (nc > 1)         errors.add("subparts" + indx,new ActionMessage("errors.integerLtEq",lblMax + " per class of " + mxlpc+ lblSubpart," Configuration limit of " + limit));      } else {        if (request.getParameter("varLimits") == null) {          mnlpc=mxlpc;        }        if (mnlpc < 0)         errors.add("subparts" + indx,new ActionMessage("errors.integerGtEq","Min limit per class" + lblSubpart,"0"));        if (mnlpc > mxlpc)         errors.add("subparts" + indx,new ActionMessage("errors.integerLtEq","Min limit per class" + lblSubpart,"Max limit per class"));        if (nc <= 0)         errors.add("subparts" + indx,new ActionMessage("errors.integerGt","Number of classes" + lblSubpart,"0"));        if (nc > ApplicationProperty.SubpartMaxNumClasses.intValue())         errors.add("subparts" + indx,new ActionMessage("errors.integerLtEq","Number of classes" + lblSubpart,ApplicationProperty.SubpartMaxNumClasses.value()));        if (nr < 0)         errors.add("subparts" + indx,new ActionMessage("errors.integerGtEq","Number of rooms" + lblSubpart,"0"));        if (mpw < 0)         errors.add("subparts" + indx,new ActionMessage("errors.integerGtEq","Minutes per week" + lblSubpart,"0"));        if (mpw == 0 && nr != 0)         errors.add("subparts" + indx,new ActionMessage("errors.generic","Minutes per week " + lblSubpart + " can be 0 only if number of rooms is 0"));        if (rc < 0)         errors.add("subparts" + indx,new ActionMessage("errors.integerGtEq","Room ratio" + lblSubpart,"0.0"));      }    }  } else {    if (nc <= 0)     errors.add("subparts" + indx,new ActionMessage("errors.integerGt","Number of classes" + lblSubpart,"0"));    if (nc > ApplicationProperty.SubpartMaxNumClasses.intValue())     errors.add("subparts" + indx,new ActionMessage("errors.integerLtEq","Number of classes" + lblSubpart,ApplicationProperty.SubpartMaxNumClasses.value()));    if (mpw < 0)     errors.add("subparts" + indx,new ActionMessage("errors.integerGtEq","Minutes per week" + lblSubpart,"0"));  }  if (errors.size() > ct)   sic.setHasError(true);}  }
class C{  public CDebuggerSelectionPanel(final BackEndDebuggerProvider provider,final CDebugPerspectiveModel debugPerspectiveModel){  super(new BorderLayout());  Preconditions.checkNotNull(provider,"IE01364: Provider can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE01365: Debug perspective model can not be null");  m_debuggerBox=new CDebuggerComboBox(provider);  add(m_debuggerBox);  m_synchronizer=new CDebuggerSelectionPanelSynchronizer(m_debuggerBox,debugPerspectiveModel);}  }
class C{  public static void assertSameExchange(Exchange expected,Exchange actual){  if (expected == null) {    assertThat("Actual exchange should be null",actual,nullValue());  } else {    assertThat("Actual exchange should not be null",actual,notNullValue());    assertThat("Expected request: " + expected.getRequest() + ", Actual request: "+ actual.getRequest(),expected.getRequest().getUrl(),equalTo(actual.getRequest().getUrl()));    assertThat("Expected request: " + expected.getRequest() + ", Actual request: "+ actual.getRequest(),expected.getRequest().getMethod(),equalTo(actual.getRequest().getMethod()));    assertThat("Expected request: " + expected.getRequest() + ", Actual request: "+ actual.getRequest(),expected.getRequest().getHeaders(),equalTo(actual.getRequest().getHeaders()));    if (expected.getRequest().getBody() != null && actual.getRequest().getBody() != null) {      assertThat("Actual request body should be null. Actual request: " + actual.getRequest(),expected.getRequest().getBody(),notNullValue());      assertThat("Actual request body should not be null. Expected request: " + expected.getRequest(),actual.getRequest().getBody(),notNullValue());      assertThat("Request body do not match. Expected request: " + expected.getRequest() + ", Actual request: "+ actual.getRequest(),expected.getRequest().getBody(),SameJSONAs.sameJSONObjectAs(actual.getRequest().getBody()));    }    assertThat("Expected response: " + expected.getResponse() + ", Actual response: "+ actual.getResponse(),expected.getResponse().getStatusCode(),equalTo(actual.getResponse().getStatusCode()));    assertThat("Expected response: " + expected.getResponse() + ", Actual response: "+ actual.getResponse(),expected.getResponse().getHeaders(),equalTo(actual.getResponse().getHeaders()));    if (expected.getResponse().getBody() != null && actual.getResponse().getBody() != null) {      assertThat("Actual response body should be null. Actual response: " + actual.getResponse(),expected.getResponse().getBody(),notNullValue());      assertThat("Actual response body should not be null. Expected response: " + expected.getResponse(),actual.getResponse().getBody(),notNullValue());      assertThat("Response body do not match. Expected response: " + expected.getResponse() + ", Actual response: "+ actual.getResponse(),expected.getResponse().getBody(),SameJSONAs.sameJSONObjectAs(actual.getRequest().getBody()));    }    assertThat(expected.getRequest().getUrl(),equalTo(actual.getRequest().getUrl()));  }}  }
class C{  public RenameFieldProcessor(IField field){  this(field,new TextChangeManager(true),null);  fIsComposite=false;}  }
class C{  private static boolean isIndependentMajorityFdr(List<IndependenceTest> independenceTests,Node x,Node y,List<Node> condSet){  List<Double> allPValues=getAvailablePValues(independenceTests,x,y,condSet);  Collections.sort(allPValues);  int c=0;  while (c < allPValues.size() && allPValues.get(c) < independenceTests.get(0).getAlpha() * (c + 1.) / allPValues.size()) {    c++;  }  boolean independent=c < allPValues.size() / 2;  if (independent) {    TetradLogger.getInstance().log("independence","***FDR judges " + SearchLogUtils.independenceFact(x,y,condSet) + " independent");    TetradLogger.getInstance().log("independence","c = " + c);  } else {    TetradLogger.getInstance().log("independence","###FDR judges " + SearchLogUtils.independenceFact(x,y,condSet) + " dependent");    TetradLogger.getInstance().log("independence","c = " + c);  }  return independent;}  }
class C{  @Override public String toString(){  if (buffer != null) {    return "Pointer[" + "buffer=" + buffer + ","+ "byteOffset="+ byteOffset+ "]";  } else   if (pointers != null) {    return "Pointer[" + "pointers=" + Arrays.toString(pointers) + ","+ "byteOffset="+ byteOffset+ "]";  } else {    return "Pointer[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + ","+ "byteOffset="+ byteOffset+ "]";  }}  }
class C{  protected void addIncomingTransitionsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Vertex_incomingTransitions_feature"),getString("_UI_PropertyDescriptor_description","_UI_Vertex_incomingTransitions_feature","_UI_Vertex_type"),SGraphPackage.Literals.VERTEX__INCOMING_TRANSITIONS,true,false,true,null,null,null));}  }
class C{  public static IPackageFragmentRoot addRTJar(IJavaProject jproject) throws CoreException {  IPath[] rtJarPath=findRtJar(RT_STUBS_15);  set15CompilerOptions(jproject);  return addLibrary(jproject,rtJarPath[0],rtJarPath[1],rtJarPath[2]);}  }
class C{  public Element parseDocument() throws ParseException {  return parseDocument(null);}  }
class C{  static LineEnding fromEol(EOL eol){switch (eol) {case CRLF:    return LineEnding.WINDOWS;case LF:  return LineEnding.UNIX;case NATIVE:return LineEnding.PLATFORM_NATIVE;default :throw Unhandled.enumException(eol);}}  }
class C{  private String addCreateBlockSnapshotStep(Workflow workflow,String waitFor,URI storageURI,List<URI> snapshotList,Boolean createInactive,Boolean readOnly,ProtectionSystem rpSystem) throws InternalException {  String stepId=workflow.createStepId();  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storageURI);  Workflow.Method createBlockSnapshotMethod=new Workflow.Method(METHOD_CREATE_BLOCK_SNAPSHOT_STEP,storageURI,snapshotList,createInactive,readOnly);  Workflow.Method rollbackCreateBlockSnapshotMethod=new Workflow.Method(METHOD_ROLLBACK_CREATE_BLOCK_SNAPSHOT);  workflow.createStep(STEP_CREATE_BLOCK_SNAPSHOT,"Create Block Snapshot subtask for RP: ",waitFor,storageSystem.getId(),storageSystem.getSystemType(),this.getClass(),createBlockSnapshotMethod,rollbackCreateBlockSnapshotMethod,stepId);  _log.info(String.format("Added createBlockSnapshot step [%s] in workflow",stepId));  return STEP_CREATE_BLOCK_SNAPSHOT;}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  private void graphTree(StringBuffer text) throws Exception {  for (int i=0; i < m_sons.length; i++) {    text.append("N" + m_id + "->"+ "N"+ m_sons[i].m_id+ " [label=\""+ Utils.backQuoteChars(m_localModel.rightSide(i,m_train).trim())+ "\"]\n");    if (m_sons[i].m_isLeaf) {      text.append("N" + m_sons[i].m_id + " [label=\""+ "NB Model"+ "\" "+ "shape=box style=filled ");      if (m_train != null && m_train.numInstances() > 0) {        text.append("data =\n" + m_sons[i].m_train + "\n");        text.append(",\n");      }      text.append("]\n");    } else {      text.append("N" + m_sons[i].m_id + " [label=\""+ Utils.backQuoteChars(m_sons[i].m_localModel.leftSide(m_train))+ "\" ");      if (m_train != null && m_train.numInstances() > 0) {        text.append("data =\n" + m_sons[i].m_train + "\n");        text.append(",\n");      }      text.append("]\n");      ((NBTreeClassifierTree)m_sons[i]).graphTree(text);    }  }}  }
class C{  public static void stopTimer(String name){  long stopTime=System.nanoTime();  Long startTime=openTimers.remove(name);  if (startTime == null) {    throw new IllegalArgumentException("timer does not exist");  }  SummaryStatistics statistics=data.get(name);  if (statistics == null) {    statistics=new SummaryStatistics();    data.put(name,statistics);  }  statistics.addValue(stopTime - startTime);}  }
class C{  public void flushAndCloseCsvFiles() throws ReplicatorException {  for (  CsvKey key : csvFiles.keySet()) {    CsvFile csvFile=csvFiles.get(key);    try {      CsvWriter writer=csvFile.getWriter();      writer.flush();      writer.getWriter().close();    } catch (    CsvException e) {      throw new ReplicatorException("Unable to close CSV file: " + csvFile.getFile().getAbsolutePath(),e);    }catch (    IOException e) {      throw new ReplicatorException("Unable to close CSV file: " + csvFile.getFile().getAbsolutePath());    }  }}  }
class C{  public void restoreDumpDatabase(Date date){  File retorationDir=new File(cfgManager.getDatabaseConfiguration().getDumpPath(),String.format("dump-%020d",date.getTime()));  if (!(retorationDir.exists() && retorationDir.isDirectory())) {    throw new DHusDumpException("Dump of \"" + date + "\" not found");  }  try {    String path=retorationDir.getAbsolutePath();    SolrConfiguration solrConfig=cfgManager.getSolrConfiguration();    FileWriter writer=new FileWriter(RESTORATION_PROPERTIES);    writer.append("dhus.db.backup=").append(path).append("/").append(BACKUP_DATABASE_NAME).append(".tar.gz");    writer.append('\n');    writer.append("dhus.db.location=").append(getDBDirectory());    writer.append('\n');    writer.append("dhus.solr.backup.name=").append(BACKUP_INDEX_NAME);    writer.append('\n');    writer.append("dhus.solr.backup.location=").append(path);    writer.append('\n');    writer.append("dhus.solr.core.name=").append(solrConfig.getCore());    writer.append('\n');    writer.append("dhus.solr.home=").append(solrConfig.getPath());    writer.append('\n');    writer.flush();    writer.close();  } catch (  IOException e) {    logger.warn("Can not perform restoration.",e);    return;  }  DHuS.stop(8);}  }
class C{  public static EObject commonAncestor(EObject o1,EObject o2){  List<EObject> o1Anchestors=collectAncestors(o1,new ArrayList<EObject>());  List<EObject> o2Anchestors=collectAncestors(o2,new ArrayList<EObject>());  return findCommonAncestor(o1Anchestors,o2Anchestors);}  }
class C{  public void test_deleteFromSolutions_03() throws Exception {  if (!isSolutionSetUpdateEnabled()) {    return;  }  loadDataset(packagePath + "dataset-01.trig");{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("INSERT INTO %namedSet1\n");    sb.append("SELECT ?x ?name\n");    sb.append("WHERE {\n");    sb.append("  ?x rdf:type foaf:Person .\n");    sb.append("  ?x rdfs:label ?name .\n");    sb.append("}\n");    con.prepareUpdate(QueryLanguage.SPARQL,sb.toString()).execute();  }{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("DELETE FROM %namedSet1\n");    sb.append("SELECT ?x ?name\n");    sb.append("WHERE { \n");    sb.append("  ?x rdfs:label ?name .\n");    sb.append("  FILTER (?x = <http://www.bigdata.com/Bryan> ) .\n");    sb.append("}\n");    con.prepareUpdate(QueryLanguage.SPARQL,sb.toString()).execute();  }{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("SELECT ?x ?name\n");    sb.append("WHERE {\n");    sb.append("  INCLUDE %namedSet1 .\n");    sb.append("}\n");    final TupleQueryResult ret=con.prepareTupleQuery(QueryLanguage.SPARQL,sb.toString()).evaluate();    final TupleQueryResult expected=readExpectedTupleQueryResult(packagePath + "test_deleteFromSolutions_03.srx");    compareTupleQueryResults(ret,expected);  }}  }
class C{  private long tryIncReaderOverflow(long s){  if ((s & ABITS) == RFULL) {    if (U.compareAndSwapLong(this,STATE,s,s | RBITS)) {      ++readerOverflow;      state=s;      return s;    }  } else   if ((ThreadLocalRandom.current().nextInt() & OVERFLOW_YIELD_RATE) == 0)   Thread.yield();  return 0L;}  }
class C{  public CActionDelete(final JFrame parent,final ITraceListProvider traceListProvider,final int[] traces){  super("Delete");  m_parent=Preconditions.checkNotNull(parent,"IE01376: Parent argument can't be null");  m_traceListProvider=Preconditions.checkNotNull(traceListProvider,"IE01377: Trace list provider argument can't be null");  m_traces=Preconditions.checkNotNull(traces,"IE01378: Traces argument can't be null");}  }
class C{  public EditorTab(GUIFrame frame){  setLayout(new BorderLayout());  this.frame=frame;  listModel=new DomainFilesModel();  JList<String> listBox=new JList<String>(listModel);  listBox.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  ListListener listener=new ListListener();  listBox.addListSelectionListener(listener);  listBox.setBorder(BorderFactory.createTitledBorder("XML File(s):"));  listBox.addMouseListener(frame.new ClickListener());  editor=new JEditorPane();  DomainEditorKit kit=new DomainEditorKit();  editor.setEditorKit(kit);  JScrollPane scroller=new JScrollPane(editor);  JSplitPane topPanel=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,listBox,scroller);  topPanel.setDividerLocation(200);  Action undoredo=new UndoRedoAction();  editor.getActionMap().put("Undo",undoredo);  editor.getActionMap().put("Redo",undoredo);  int mask=Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();  KeyStroke undoKey=KeyStroke.getKeyStroke(KeyEvent.VK_Z,mask);  KeyStroke redoKey=KeyStroke.getKeyStroke(KeyEvent.VK_Y,mask);  editor.getInputMap().put(undoKey,"Undo");  editor.getInputMap().put(redoKey,"Redo");  add(topPanel);  refresh();}  }
class C{  public int readUnsignedByteLE() throws IOException {  return inputStream.readUnsignedByte();}  }
class C{  public static <T>T newBean(BeanManager bm,Class<T> clazz){  Set<Bean<?>> beans=bm.getBeans(clazz);  final Bean<T> bean=(Bean<T>)bm.resolve(beans);  final CreationalContext<T> ctx=bm.createCreationalContext(bean);  return (T)bm.getReference(bean,clazz,ctx);}  }
class C{  @Deprecated public HyperLogLog(int log2m,RegisterSet registerSet){  validateLog2m(log2m);  this.registerSet=registerSet;  this.log2m=log2m;  int m=1 << this.log2m;  alphaMM=getAlphaMM(log2m,m);}  }
class C{  public NioDatagramConnector(IoProcessor<NioSession> processor){  super(new DefaultDatagramSessionConfig(),processor);}  }
class C{  public static String formatMillis(int millis){  String result="";  int hr=millis / 3600000;  millis%=3600000;  int min=millis / 60000;  millis%=60000;  int sec=millis / 1000;  if (hr > 0) {    result+=hr + ":";  }  if (min >= 0) {    if (min > 9) {      result+=min + ":";    } else {      result+="0" + min + ":";    }  }  if (sec > 9) {    result+=sec;  } else {    result+="0" + sec;  }  return result;}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION;}  }
class C{  public AdaDelta(){  this(0.95);}  }
class C{  private boolean readGZIPFile(final File fl) throws IOException, FileNotFoundException {  boolean success=false;  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(fl))));    int line=1;    String readLine=null;    while (reader.ready() && (readLine=reader.readLine()) != null) {      parseValue(readLine,line);      line++;    }    reader.close();    success=true;  }  finally {    if (reader != null) {      reader.close();    }  }  return success;}  }
class C{  public JCardParseException(String message,JsonToken expected,JsonToken actual){  super(message);  this.expected=expected;  this.actual=actual;}  }
class C{  public static JSONPathExtractor json(String query){  return new JSONPathExtractor(query);}  }
class C{  private void updateValueRange(){  PlotConfiguration plotConfig=engine.getPlotInstance().getMasterPlotConfiguration();  Plot plot=engine.getChartPanel().getChart().getPlot();  int index=rangeAxisSelectionCombobox.getSelectedIndex();  if (index == -1) {    index=0;  }  if (plotConfig.getRangeAxisConfigs().size() > index) {    RangeAxisConfig config=plotConfig.getRangeAxisConfigs().get(index);    double valueLowerBound;    double valueUpperBound;    if (plot instanceof XYPlot) {      ValueAxis rangeAxis=((XYPlot)plot).getRangeAxis(index);      if (rangeAxis != null) {        Range range=rangeAxis.getRange();        valueLowerBound=range.getLowerBound();        valueUpperBound=range.getUpperBound();      } else {        valueLowerBound=engine.getPlotInstance().getPlotData().getRangeAxisData(config).getLowerViewBound();        valueUpperBound=engine.getPlotInstance().getPlotData().getRangeAxisData(config).getUpperViewBound();      }    } else     if (plot instanceof CategoryPlot) {      ValueAxis rangeAxis=((CategoryPlot)plot).getRangeAxis(index);      if (rangeAxis != null) {        Range range=rangeAxis.getRange();        valueLowerBound=range.getLowerBound();        valueUpperBound=range.getUpperBound();      } else {        valueLowerBound=engine.getPlotInstance().getPlotData().getRangeAxisData(config).getLowerViewBound();        valueUpperBound=engine.getPlotInstance().getPlotData().getRangeAxisData(config).getUpperViewBound();      }    } else {      valueLowerBound=engine.getPlotInstance().getPlotData().getRangeAxisData(config).getLowerViewBound();      valueUpperBound=engine.getPlotInstance().getPlotData().getRangeAxisData(config).getUpperViewBound();    }    valueRangeLowerBoundField.setText(String.valueOf(valueLowerBound));    valueRangeUpperBoundField.setText(String.valueOf(valueUpperBound));  }}  }
class C{  default String formatFieldName(final String fieldName){  return fieldName;}  }
class C{  public void refresh(TreeMap<Object,Object> sortedEvents,int currentSize,int maxSize){  updateObserver.updated(this);  this.sortedEvents=sortedEvents;  this.currentSize=currentSize;  this.iterator=null;  this.cacheFilledTo=0;  if (cache == null || cache.length < maxSize) {    cache=new EventBean[maxSize];  }}  }
class C{  @Override public final String name(){  return this.name;}  }
class C{  static TypeLiteral<?> fromSuperclassTypeParameter(Class<?> subclass){  return new TypeLiteral<Object>(getSuperclassTypeParameter(subclass));}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (semPm == null) {    throw new NullPointerException();  }}  }
class C{  public T image(String url){  return image(url,true,true,0,0);}  }
class C{  public RpcClient peerWith(InetSocketAddress remoteAddress,Bootstrap bootstrap,Map<String,Object> attributes) throws IOException {  if (remoteAddress == null) {    throw new NullPointerException("remotedAddress");  }  InetSocketAddress localAddress=null;  if (clientInfo.getHostName() != null) {    localAddress=new InetSocketAddress(clientInfo.getHostName(),clientInfo.getPort());  }  ChannelFuture connectFuture=bootstrap.connect(remoteAddress,localAddress).awaitUninterruptibly();  if (!connectFuture.isSuccess()) {    throw new IOException("Failed to connect to " + remoteAddress,connectFuture.cause());  }  Channel channel=connectFuture.channel();  InetSocketAddress connectedAddress=(InetSocketAddress)channel.localAddress();  PeerInfo effectiveClientInfo=new PeerInfo(clientInfo.getHostName() == null ? connectedAddress.getHostName() : clientInfo.getHostName(),connectedAddress.getPort(),clientInfo.getPid());  ConnectRequest connectRequest=ConnectRequest.newBuilder().setClientHostName(effectiveClientInfo.getHostName()).setClientPort(effectiveClientInfo.getPort()).setClientPID(effectiveClientInfo.getPid()).setCorrelationId(correlationId.incrementAndGet()).setCompress(isCompression()).build();  WirePayload payload=WirePayload.newBuilder().setConnectRequest(connectRequest).build();  if (log.isDebugEnabled()) {    log.debug("Sending [" + connectRequest.getCorrelationId() + "]ConnectRequest.");  }  channel.writeAndFlush(payload);  ClientConnectResponseHandler connectResponseHandler=(ClientConnectResponseHandler)channel.pipeline().get(Handler.CLIENT_CONNECT);  if (connectResponseHandler == null) {    throw new IllegalStateException("No connectReponse handler in channel pipeline.");  }  ConnectResponse connectResponse=connectResponseHandler.getConnectResponse(connectResponseTimeoutMillis);  if (connectResponse == null) {    connectFuture.channel().close().awaitUninterruptibly();    throw new IOException("No Channel response received before " + connectResponseTimeoutMillis + " millis timeout.");  }  if (connectResponse.hasErrorCode()) {    connectFuture.channel().close().awaitUninterruptibly();    throw new IOException("DuplexTcpServer CONNECT_RESPONSE indicated error " + connectResponse.getErrorCode());  }  if (!connectResponse.hasCorrelationId()) {    connectFuture.channel().close().awaitUninterruptibly();    throw new IOException("DuplexTcpServer CONNECT_RESPONSE missing correlationId.");  }  if (connectResponse.getCorrelationId() != connectRequest.getCorrelationId()) {    connectFuture.channel().close().awaitUninterruptibly();    throw new IOException("DuplexTcpServer CONNECT_RESPONSE correlationId mismatch. TcpClient sent " + connectRequest.getCorrelationId() + " received "+ connectResponse.getCorrelationId()+ " from TcpServer.");  }  PeerInfo serverInfo=null;  if (connectResponse.hasServerPID()) {    serverInfo=new PeerInfo(remoteAddress.getHostName(),remoteAddress.getPort(),connectResponse.getServerPID());  } else {    serverInfo=new PeerInfo(remoteAddress.getHostName(),remoteAddress.getPort());  }  RpcClient rpcClient=new RpcClient(channel,effectiveClientInfo,serverInfo,connectResponse.getCompress(),getRpcLogger(),getExtensionRegistry());  if (attributes != null) {    for (    Entry<String,Object> attr : attributes.entrySet()) {      rpcClient.setAttribute(attr.getKey(),attr.getValue());    }  }  RpcClientHandler rpcClientHandler=completePipeline(rpcClient);  rpcClientHandler.notifyOpened();  if (!getRpcClientRegistry().registerRpcClient(rpcClient)) {    log.warn("Client RpcClient already registered. Bug??");  }  return rpcClient;}  }
class C{  public boolean isChannelIdEnabled(){  return channelIdEnabled;}  }
class C{  @SuppressWarnings("unchecked") public CreateIndexRequest mapping(String type,Map source){  if (mappings.containsKey(type)) {    throw new IllegalStateException("mappings for type \"" + type + "\" were already defined");  }  if (source.size() != 1 || !source.containsKey(type)) {    source=MapBuilder.<String,Object>newMapBuilder().put(type,source).map();  }  try {    XContentBuilder builder=XContentFactory.contentBuilder(XContentType.JSON);    builder.map(source);    return mapping(type,builder.string());  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + source + "]",e);  }}  }
class C{  public void testBug60598() throws Exception {  String expected=versionMeetsMinimum(5,6,4) ? "SELECT '2001-02-03 04:05:06' , '2001-02-03 04:05:06.007' , '11:22:33.444'" : "SELECT '2001-02-03 04:05:06' , '2001-02-03 04:05:06' , '11:22:33'";  Connection conn_nolegacy=null;  Connection conn_legacy=null;  Connection conn_legacy_tz=null;  try {    Properties props=new Properties();    props.setProperty("serverTimezone",TimeZone.getDefault().getID() + "");    props.setProperty("useLegacyDatetimeCode","false");    conn_nolegacy=getConnectionWithProps(props);    props.setProperty("useLegacyDatetimeCode","true");    conn_legacy=getConnectionWithProps(props);    props.setProperty("useLegacyDatetimeCode","true");    props.setProperty("useTimezone","true");    props.setProperty("useJDBCCompliantTimezoneShift","true");    conn_legacy_tz=getConnectionWithProps(props);    String input="SELECT {ts '2001-02-03 04:05:06' } , {ts '2001-02-03 04:05:06.007' } , {t '11:22:33.444' }";    String output=conn_nolegacy.nativeSQL(input);    assertEquals(expected,output);    output=conn_legacy.nativeSQL(input);    assertEquals(expected,output);    output=conn_legacy_tz.nativeSQL(input);    assertEquals(expected,output);  }  finally {    if (conn_nolegacy != null) {      conn_nolegacy.close();    }    if (conn_legacy != null) {      conn_legacy.close();    }    if (conn_legacy_tz != null) {      conn_legacy_tz.close();    }  }}  }
class C{  public static void startAndRemove(String flowName){  Flow flow=sFlowMap.get(flowName);  if (flow != null) {    flow.start();    sFlowMap.remove(flowName);  }}  }
class C{  public boolean isMyCountryCodeDefined(){  return mCtx.getResources().getConfiguration().mcc != MCC_UNDEFINED;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private View moveSelection(int delta,int childrenTop,int childrenBottom){  final int fadingEdgeLength=getVerticalFadingEdgeLength();  final int selectedPosition=mSelectedPosition;  final int numColumns=mNumColumns;  final int verticalSpacing=mVerticalSpacing;  int oldRowStart;  int rowStart;  int rowEnd=-1;  if (!mStackFromBottom) {    oldRowStart=(selectedPosition - delta) - ((selectedPosition - delta) % numColumns);    rowStart=selectedPosition - (selectedPosition % numColumns);  } else {    int invertedSelection=mItemCount - 1 - selectedPosition;    rowEnd=mItemCount - 1 - (invertedSelection - (invertedSelection % numColumns));    rowStart=Math.max(0,rowEnd - numColumns + 1);    invertedSelection=mItemCount - 1 - (selectedPosition - delta);    oldRowStart=mItemCount - 1 - (invertedSelection - (invertedSelection % numColumns));    oldRowStart=Math.max(0,oldRowStart - numColumns + 1);  }  final int rowDelta=rowStart - oldRowStart;  final int topSelectionPixel=getTopSelectionPixel(childrenTop,fadingEdgeLength,rowStart);  final int bottomSelectionPixel=getBottomSelectionPixel(childrenBottom,fadingEdgeLength,numColumns,rowStart);  mFirstPosition=rowStart;  View sel;  View referenceView;  if (rowDelta > 0) {    final int oldBottom=mReferenceViewInSelectedRow == null ? 0 : mReferenceViewInSelectedRow.getBottom();    sel=makeRow(mStackFromBottom ? rowEnd : rowStart,oldBottom + verticalSpacing,true);    referenceView=mReferenceView;    adjustForBottomFadingEdge(referenceView,topSelectionPixel,bottomSelectionPixel);  } else   if (rowDelta < 0) {    final int oldTop=mReferenceViewInSelectedRow == null ? 0 : mReferenceViewInSelectedRow.getTop();    sel=makeRow(mStackFromBottom ? rowEnd : rowStart,oldTop - verticalSpacing,false);    referenceView=mReferenceView;    adjustForTopFadingEdge(referenceView,topSelectionPixel,bottomSelectionPixel);  } else {    final int oldTop=mReferenceViewInSelectedRow == null ? 0 : mReferenceViewInSelectedRow.getTop();    sel=makeRow(mStackFromBottom ? rowEnd : rowStart,oldTop,true);    referenceView=mReferenceView;  }  if (!mStackFromBottom) {    fillUp(rowStart - numColumns,referenceView.getTop() - verticalSpacing);    adjustViewsUpOrDown();    fillDown(rowStart + numColumns,referenceView.getBottom() + verticalSpacing);  } else {    fillDown(rowEnd + numColumns,referenceView.getBottom() + verticalSpacing);    adjustViewsUpOrDown();    fillUp(rowStart - 1,referenceView.getTop() - verticalSpacing);  }  return sel;}  }
class C{  public AccountHeaderBuilder withOnAccountHeaderItemLongClickListener(AccountHeader.OnAccountHeaderItemLongClickListener onAccountHeaderItemLongClickListener){  this.mOnAccountHeaderItemLongClickListener=onAccountHeaderItemLongClickListener;  return this;}  }
class C{  public static Code valueOf(final int value){  int classCode=getCodeClass(value);  int detailCode=getCodeDetail(value);  if (classCode > 0) {    throw new MessageFormatException(String.format("Not a CoAP request code: %s",formatCode(classCode,detailCode)));  }switch (detailCode) {case 1:    return GET;case 2:  return POST;case 3:return PUT;case 4:return DELETE;default :throw new MessageFormatException(String.format("Unknown CoAP request code: %s",formatCode(classCode,detailCode)));}}  }
class C{  @Override protected void addTestJob(final IResource target){  IJavaElement element=JavaCore.create(target);  if (element == null) {    return;  }  IJavaElement packageElement=element.getParent();  String packageName=packageElement.getElementName();  final String targetClass=(!packageName.isEmpty() ? packageName + "." : "") + target.getName().replace(".java","").replace(File.separator,".");  System.out.println("Building new job for " + targetClass);  job=new TestGenerationJob(shell,target,targetClass);  job.setPriority(Job.DECORATE);  job.schedule();}  }
class C{  public void tagGeneratorFont(byte[] data) throws IOException {  startTag(SWFConstants.TAG_GEN_EXTERNAL_FONT,false);  out.write(data);  completeTag();}  }
class C{  public static boolean isCancelled(int status){  return status == CANCELED;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Object castToType(int t,XPathContext support) throws javax.xml.transform.TransformerException {  Object result;switch (t) {case CLASS_STRING:    result=str();  break;case CLASS_NUMBER:result=new Double(num());break;case CLASS_NODESET:result=iter();break;case CLASS_BOOLEAN:result=new Boolean(bool());break;case CLASS_UNKNOWN:result=m_obj;break;default :error(XPATHErrorResources.ER_CANT_CONVERT_TO_TYPE,new Object[]{getTypeString(),Integer.toString(t)});result=null;}return result;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.970 -0500",hash_original_method="D5F82E7B8136CE61250AF5358F628FEE",hash_generated_method="7692D23DABDAD6D43E67AD377007F3FC") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof byte[])) {    throw new EncoderException("Parameter supplied to Base64 encode is not a byte[]");  }  return encode((byte[])pObject);}  }
class C{  void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XMLString s1=getArg0AsString(xctxt);  return (XString)s1.fixWhiteSpace(true,true,false);}  }
class C{  public void startElement(String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  NamespaceSupport nssupport=this.getNamespaceSupport();  nssupport.pushContext();  int n=m_prefixMappings.size();  for (int i=0; i < n; i++) {    String prefix=(String)m_prefixMappings.elementAt(i++);    String nsURI=(String)m_prefixMappings.elementAt(i);    nssupport.declarePrefix(prefix,nsURI);  }  m_prefixMappings.removeAllElements();  m_elementID++;  checkForFragmentID(attributes);  if (!m_shouldProcess)   return;  flushCharacters();  pushSpaceHandling(attributes);  XSLTElementProcessor elemProcessor=getProcessorFor(uri,localName,rawName);  if (null != elemProcessor) {    this.pushProcessor(elemProcessor);    elemProcessor.startElement(this,uri,localName,rawName,attributes);  } else {    m_shouldProcess=false;    popSpaceHandling();  }}  }
class C{  public void clear(){  for (int i=0; i < table.length; i++) {    table[i]=null;  }  count=0;}  }
class C{  private void addSupertypeEdges(ClassVertex vertex,LinkedList<XClass> workList){  XClass xclass=vertex.getXClass();  ClassDescriptor superclassDescriptor=xclass.getSuperclassDescriptor();  if (superclassDescriptor != null) {    addInheritanceEdge(vertex,superclassDescriptor,false,workList);  }  for (  ClassDescriptor ifaceDesc : xclass.getInterfaceDescriptorList()) {    addInheritanceEdge(vertex,ifaceDesc,true,workList);  }}  }
class C{  public void add(String category,String[] titles,double[] values){  mCategories.add(category);  mTitles.add(titles);  mValues.add(values);}  }
class C{  @Override public void receiveChangeCipherSpec(){  if (isResuming) {    if (serverFinished == null) {      unexpectedMessage();    } else {      changeCipherSpecReceived=true;    }  } else {    if ((parameters.getNeedClientAuth() && clientCert == null) || clientKeyExchange == null || (clientCert != null && clientCert.certs.length > 0 && !clientKeyExchange.isEmpty() && certificateVerify == null)) {      unexpectedMessage();    } else {      changeCipherSpecReceived=true;    }    if (serverHello.server_version[1] == 1) {      computerReferenceVerifyDataTLS("client finished");    } else {      computerReferenceVerifyDataSSLv3(SSLv3Constants.client);    }  }}  }
class C{  private int placeFFDInstance(ArrayList<Container> containers,PackingPlan.InstancePlan instancePlan,Resource containerCapacity){  boolean placed=false;  int containerId=0;  for (int i=0; i < containers.size() && !placed; i++) {    if (containers.get(i).add(instancePlan)) {      placed=true;      containerId=i + 1;    }  }  if (!placed) {    containerId=PackingUtils.allocateNewContainer(containers,containerCapacity,this.paddingPercentage);    containers.get(containerId - 1).add(instancePlan);  }  return containerId;}  }
class C{  private boolean recovery(OBlock block){  if (_occupies.size() == 0) {    Iterator<OBlock> it=_headRange.iterator();    while (it.hasNext()) {      OBlock b=it.next();      if ((b.getState() & (OBlock.DARK | OBlock.OCCUPIED)) != 0) {        _lostRange.add(b);        if (log.isDebugEnabled()) {          log.debug("  _lostRange.add " + b.getDisplayName() + " value= "+ b.getValue());        }      }    }    it=_tailRange.iterator();    while (it.hasNext()) {      OBlock b=it.next();      if ((b.getState() & (OBlock.DARK | OBlock.OCCUPIED)) != 0) {        _lostRange.add(b);        if (log.isDebugEnabled()) {          log.debug("  _lostRange.add " + b.getDisplayName() + " value= "+ b.getValue());        }      }    }  }  if (log.isDebugEnabled()) {    log.debug("recovery( " + block.getDisplayName() + ") + _lostRange.size()= "+ _lostRange.size());  }  if (_lostRange == null || _lostRange.size() == 0) {    return false;  }  OBlock blk=(OBlock)JOptionPane.showInputDialog(null,Bundle.getMessage("TrackerNoCurrentBlock",_trainName,block.getDisplayName()) + "\n" + Bundle.getMessage("PossibleLocation"),Bundle.getMessage("WarningTitle"),JOptionPane.INFORMATION_MESSAGE,null,_lostRange.toArray(),null);  if (blk != null) {    _occupies.addFirst(blk);    showBlockValue(blk);  } else {    return false;  }  setupCheck();  return true;}  }
class C{  public double nextDouble(){  return (((long)next(26) << 27) + next(27)) / (double)(1L << 53);}  }
class C{  public ModelConfig(String configFileName,FilenameToStream resolver){  if (resolver != null) {    this.resolver=resolver;  } else {    this.resolver=new SimpleFilenameToStream();  }  ModelValue.init();  this.configFileName=configFileName;  this.configTbl=new Hashtable();  Vect temp=new Vect();  this.configTbl.put(Constant,temp);  this.configTbl.put(Constants,temp);  temp=new Vect();  this.configTbl.put(Constraint,temp);  this.configTbl.put(Constraints,temp);  temp=new Vect();  this.configTbl.put(ActionConstraint,temp);  this.configTbl.put(ActionConstraints,temp);  temp=new Vect();  this.configTbl.put(Invariant,temp);  this.configTbl.put(Invariants,temp);  this.configTbl.put(Init,"");  this.configTbl.put(Next,"");  this.configTbl.put(View,"");  this.configTbl.put(Symmetry,"");  this.configTbl.put(Spec,"");  temp=new Vect();  this.configTbl.put(Prop,temp);  this.configTbl.put(Props,temp);  this.configTbl.put(Type,"");  this.configTbl.put(TypeConstraint,"");  this.modConstants=new Hashtable();  this.modOverrides=new Hashtable();  this.overrides=new Hashtable();}  }
class C{  protected void createLocation(List recordList,QuadTree<Location> qt){  String name=tokenToString(recordList,nameIndex,"");  double lat=tokenToDouble(recordList,latIndex,0.0);  double lon=tokenToDouble(recordList,lonIndex,0.0,eastIsNeg);  String iconURL=tokenToString(recordList,iconIndex,defaultIconURL);  qt.put(lat,lon,createLocation(lat,lon,name,iconURL,recordList));}  }
class C{  protected void updateHeaderAndList(){  calculateProfiles();  buildProfiles();  if (mSelectionListShown) {    buildDrawerSelectionList();  }}  }
class C{  public void run(String username,String password) throws AuthenticationException {  for (  String s : WELCOME_MESSAGE) {    out.println(s);  }  BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));  login(username,password);  try {    loadSheet(reader);  } catch (  Exception e) {    e.printStackTrace();  }  while (executeCommand(reader)) {  }}  }
class C{  public void remove(){  throw new UnsupportedOperationException("Can't remove keys from KeyStore");}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  return result;}  }
class C{  private void searchForBookmarks(URI protectionDevice,Set<URI> snapshots){  ProtectionSystem rpSystem=getRPSystem(protectionDevice);  RecoverPointClient rpClient=RPHelper.getRecoverPointClient(rpSystem);  Set<Integer> cgIDs=null;  boolean bookmarkExists;  Map<Integer,List<BlockSnapshot>> cgSnaps=new HashMap<Integer,List<BlockSnapshot>>();  for (  URI snapshotID : snapshots) {    cgIDs=new HashSet<Integer>();    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotID);    Volume volume=_dbClient.queryObject(Volume.class,snapshot.getParent().getURI());    ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,volume.getProtectionSet());    Integer cgID=null;    try {      cgID=Integer.valueOf(protectionSet.getProtectionId());    } catch (    NumberFormatException nfe) {      throw DeviceControllerExceptions.recoverpoint.exceptionLookingForBookmarks(nfe);    }    cgIDs.add(cgID);    if (cgSnaps.get(cgID) == null) {      cgSnaps.put(cgID,new ArrayList<BlockSnapshot>());    }    cgSnaps.get(cgID).add(snapshot);  }  GetBookmarksResponse bookmarkResponse=rpClient.getRPBookmarks(cgIDs);  for (  Integer cgID : cgSnaps.keySet()) {    for (    BlockSnapshot snapshot : cgSnaps.get(cgID)) {      bookmarkExists=false;      if (bookmarkResponse.getCgBookmarkMap() != null && !bookmarkResponse.getCgBookmarkMap().isEmpty()) {        List<RPBookmark> rpBookmarks=bookmarkResponse.getCgBookmarkMap().get(cgID);        if (rpBookmarks != null && !rpBookmarks.isEmpty()) {          for (          RPBookmark rpBookmark : rpBookmarks) {            if (rpBookmark.getBookmarkName().equals(snapshot.getEmName())) {              bookmarkExists=true;            }          }        }      }      if (!bookmarkExists) {        throw DeviceControllerExceptions.recoverpoint.failedToFindExpectedBookmarks();      }    }  }}  }
class C{  public static boolean isToday(long milli){  long inMilli=toMilliseconds(milli);  return getStartOfDay(new Date(inMilli)) == getStartOfDay(new Date());}  }
class C{  protected void updateBoundariesAndWeights(){  double[] values=new double[m_TM.size()];  double[] weights=new double[m_TM.size()];  Iterator<Map.Entry<Double,Double>> itr=m_TM.entrySet().iterator();  int j=0;  while (itr.hasNext()) {    Map.Entry<Double,Double> entry=itr.next();    values[j]=entry.getKey();    weights[j]=entry.getValue();    j++;  }  double freq=m_SumOfWeights / m_NumBins;  double[] cutPoints=new double[m_NumBins - 1];  double[] binWeights=new double[m_NumBins];  double sumOfWeights=m_SumOfWeights;  double weightSumSoFar=0, lastWeightSum=0;  int cpindex=0, lastIndex=-1;  for (int i=0; i < values.length - 1; i++) {    weightSumSoFar+=weights[i];    sumOfWeights-=weights[i];    if (weightSumSoFar >= freq) {      if (((freq - lastWeightSum) < (weightSumSoFar - freq)) && (lastIndex != -1)) {        cutPoints[cpindex]=(values[lastIndex] + values[lastIndex + 1]) / 2;        weightSumSoFar-=lastWeightSum;        binWeights[cpindex]=lastWeightSum;        lastWeightSum=weightSumSoFar;        lastIndex=i;      } else {        cutPoints[cpindex]=(values[i] + values[i + 1]) / 2;        binWeights[cpindex]=weightSumSoFar;        weightSumSoFar=0;        lastWeightSum=0;        lastIndex=-1;      }      cpindex++;      freq=(sumOfWeights + weightSumSoFar) / ((cutPoints.length + 1) - cpindex);    } else {      lastIndex=i;      lastWeightSum=weightSumSoFar;    }  }  if ((cpindex < cutPoints.length) && (lastIndex != -1)) {    cutPoints[cpindex]=(values[lastIndex] + values[lastIndex + 1]) / 2;    binWeights[cpindex]=lastWeightSum;    cpindex++;    binWeights[cpindex]=weightSumSoFar - lastWeightSum;  } else {    binWeights[cpindex]=weightSumSoFar;  }  if (cpindex == 0) {    m_Boundaries=null;    m_Weights=null;  } else {    binWeights[cpindex]+=weights[values.length - 1];    m_Boundaries=new double[cpindex + 2];    m_Boundaries[0]=m_TM.firstKey();    m_Boundaries[cpindex + 1]=m_TM.lastKey();    System.arraycopy(cutPoints,0,m_Boundaries,1,cpindex);    m_Weights=new double[cpindex + 1];    System.arraycopy(binWeights,0,m_Weights,0,cpindex + 1);  }}  }
class C{  private boolean authNProviderExistsForDomain(String domain){  URIQueryResultList providers=new URIQueryResultList();  try {    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getAuthnProviderDomainConstraint(domain),providers);  } catch (  DatabaseException ex) {    _log.error("Could not query for authn providers to check for existing domain {}",domain,ex.getStackTrace());    throw ex;  }  boolean bExist=false;  Iterator<URI> it=providers.iterator();  while (it.hasNext()) {    URI providerURI=it.next();    AuthnProvider provider=_dbClient.queryObject(AuthnProvider.class,providerURI);    if (provider != null && provider.getDisable() == false) {      bExist=true;      break;    }  }  return bExist;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getInstance().getCurrRecordMediaFile(getCapDev(stack));}  }
class C{  @Override public int findColumn(String columnLabel) throws SQLException {  try {    debugCodeCall("findColumn",columnLabel);    return getColumnIndex(columnLabel);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void remove(String containerRelativePath,IPath indexedContainer){  request(new RemoveFromIndex(containerRelativePath,indexedContainer,this));}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == VariableDeclarationContainer.class) {switch (baseFeatureID) {case N4JSPackage.VARIABLE_DECLARATION_CONTAINER__VAR_DECLS_OR_BINDINGS:      return N4JSPackage.VARIABLE_STATEMENT__VAR_DECLS_OR_BINDINGS;case N4JSPackage.VARIABLE_DECLARATION_CONTAINER__VAR_STMT_KEYWORD:    return N4JSPackage.VARIABLE_STATEMENT__VAR_STMT_KEYWORD;default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  @After public void tearDown(){  List<HashMap> financialActivities=this.financialActivityAccountHelper.getAllFinancialActivityAccounts(this.responseSpec);  for (  HashMap financialActivity : financialActivities) {    Integer financialActivityAccountId=(Integer)financialActivity.get("id");    Integer deletedFinancialActivityAccountId=this.financialActivityAccountHelper.deleteFinancialActivityAccount(financialActivityAccountId,this.responseSpec,CommonConstants.RESPONSE_RESOURCE_ID);    Assert.assertNotNull(deletedFinancialActivityAccountId);    Assert.assertEquals(financialActivityAccountId,deletedFinancialActivityAccountId);  }}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/unassign-vnas-servers") @CheckPermission(roles={Role.SYSTEM_ADMIN},acls={ACL.ALL,ACL.OWN}) public Response unassignVNasServersFromProject(@PathParam("id") URI id,VirtualNasParam param){  checkCompatibleVersion();  Project project=getProjectById(id,true);  Set<String> vNasIds=param.getVnasServers();  if (vNasIds != null && !vNasIds.isEmpty()) {    StringSet vnasServers=project.getAssignedVNasServers();    if (!vnasServers.containsAll(vNasIds)) {      throw APIException.badRequests.vNasServersNotAssociatedToProject();    }    if (vnasServers != null && !vnasServers.isEmpty()) {      for (      String vId : vNasIds) {        URI vnasURI=URI.create(vId);        VirtualNAS vnas=_permissionsHelper.getObjectById(vnasURI,VirtualNAS.class);        ArgValidator.checkEntity(vnas,vnasURI,isIdEmbeddedInURL(vnasURI));        if (vnasServers.contains(vId)) {          vnas.dissociateProject(id.toString());          _dbClient.updateObject(vnas);          project.getAssignedVNasServers().remove(vId);        }      }      _dbClient.updateObject(project);      _log.info("Successfully unassigned the VNAS servers from project : {} ",project.getLabel());    } else {      throw APIException.badRequests.noVNasServersAssociatedToProject(project.getLabel());    }  } else {    throw APIException.badRequests.invalidEntryForProjectVNAS();  }  return Response.ok().build();}  }
class C{  public final boolean isEarlierThan(UplevelReference other){  if (isClientOuterField()) {    return true;  } else   if (other.isClientOuterField()) {    return false;  }  LocalMember target2=other.target;  Identifier name=target.getName();  Identifier name2=target2.getName();  int cmp=name.toString().compareTo(name2.toString());  if (cmp != 0) {    return cmp < 0;  }  Identifier cname=target.getClassDefinition().getName();  Identifier cname2=target2.getClassDefinition().getName();  int ccmp=cname.toString().compareTo(cname2.toString());  return ccmp < 0;}  }
class C{  public SafeCloseDatagramSocket(DatagramSocket delegate) throws SocketException {  super(delegate);}  }
class C{  public Element(String tagName){  this.name=tagName;}  }
class C{  private static boolean isGwtProject(Model pom){  List<Plugin> plugins=pom.getBuild().getPlugins();  for (  Plugin plugin : plugins) {    if (Constants.GWT_MAVEN_PLUGIN_ARTIFACT_ID.equals(plugin.getArtifactId())) {      return true;    }  }  return false;}  }
class C{  static double checkDouble(double d) throws JSONException {  if (Double.isInfinite(d) || Double.isNaN(d)) {    throw new JSONException("Forbidden numeric value: " + d);  }  return d;}  }
class C{  public void stringLength() throws IOException {  writeCode(STRING_LENGTH);}  }
class C{  public void store(DataOutput os) throws IOException {  os.writeBoolean(forward);  os.writeInt(root);  os.writeInt(cmds.size());  for (  CharSequence cmd : cmds)   os.writeUTF(cmd.toString());  os.writeInt(rows.size());  for (  Row row : rows)   row.store(os);}  }
class C{  public boolean isEnabled(){  return isEnabled;}  }
class C{  public static ValueLob openUnlinked(int type,int tableId,int objectId,long precision,String fileName){  return new ValueLob(type,fileName,tableId,objectId,false,precision);}  }
class C{  public void recordFileSystemOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){  try {    boolean opStatus=(Operation.Status.ready == status) ? true : false;    String evType;    evType=opType.getEvType(opStatus);    String evDesc=opType.getDescription();    String opStage=AuditLogManager.AUDITOP_END;    _logger.info("opType: {} detail: {}",opType.toString(),evType.toString() + ':' + evDesc);    URI uri=(URI)extParam[0];    recordBourneFileSystemEvent(dbClient,evType,status,evDesc,uri);    auditFile(dbClient,opType,opStatus,opStage,uri.toString());  } catch (  Exception e) {    _logger.error("Failed to record filesystem operation {}, err:",opType.toString(),e);  }}  }
class C{  public void unload(Paragraph paragraph,String appId){  executor.execute(new UnloadApplication(paragraph,appId));}  }
class C{  public Object clone(){  ExtendedPKIXBuilderParameters params=null;  try {    params=new ExtendedPKIXBuilderParameters(getTrustAnchors(),getTargetConstraints());  } catch (  Exception e) {    throw new RuntimeException(e.getMessage());  }  params.setParams(this);  return params;}  }
class C{  public void interruptAllThreads(){  for (  Thread t : threads)   U.interrupt(t);  try {    for (    Thread t : threads)     U.join(t);  } catch (  IgniteInterruptedCheckedException ignored) {  }}  }
class C{  private void putRow(HSSFCellStyle cellStyle,HSSFCellStyle cellStyleD,HSSFCellStyle cellStyleN,HSSFSheet sheet,HSSFRow row,int fila,ReportTO rpt){  HSSFRichTextString text;  short col=0;  cellStyle.setAlignment(HSSFCellStyle.ALIGN_RIGHT);  text=new HSSFRichTextString(rpt.getName());  HSSFCell cell=row.createCell(col++);  cell.setCellStyle(cellStyleN);  cell.setCellValue(text);  text=new HSSFRichTextString(rpt.getDescription());  cell.setCellStyle(cellStyleD);  cell=row.createCell(col++);  cell.setCellValue(text);  if (cols >= 3) {    text=new HSSFRichTextString(formatValue(rpt.getCol_0()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 4) {    text=new HSSFRichTextString(formatValue(rpt.getCol_1()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 5) {    text=new HSSFRichTextString(formatValue(rpt.getCol_2()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 6) {    text=new HSSFRichTextString(formatValue(rpt.getCol_3()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 7) {    text=new HSSFRichTextString(formatValue(rpt.getCol_4()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 8) {    text=new HSSFRichTextString(formatValue(rpt.getCol_5()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 9) {    text=new HSSFRichTextString(formatValue(rpt.getCol_6()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 10) {    text=new HSSFRichTextString(formatValue(rpt.getCol_7()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 11) {    text=new HSSFRichTextString(formatValue(rpt.getCol_8()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 12) {    text=new HSSFRichTextString(formatValue(rpt.getCol_9()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 13) {    text=new HSSFRichTextString(formatValue(rpt.getCol_10()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 14) {    text=new HSSFRichTextString(formatValue(rpt.getCol_11()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 15) {    text=new HSSFRichTextString(formatValue(rpt.getCol_12()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 16) {    text=new HSSFRichTextString(formatValue(rpt.getCol_13()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 17) {    text=new HSSFRichTextString(formatValue(rpt.getCol_14()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 18) {    text=new HSSFRichTextString(formatValue(rpt.getCol_15()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 19) {    text=new HSSFRichTextString(formatValue(rpt.getCol_16()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 20) {    text=new HSSFRichTextString(formatValue(rpt.getCol_17()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 21) {    text=new HSSFRichTextString(formatValue(rpt.getCol_18()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 22) {    text=new HSSFRichTextString(formatValue(rpt.getCol_19()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }  if (cols >= 23) {    text=new HSSFRichTextString(formatValue(rpt.getCol_20()));    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellValue(text);  }}  }
class C{  private Directory(String clusterName,String memberName) throws ResourceException, DirectoryNotFoundException {  this.clusterName=clusterName;  this.memberName=memberName;  rootNode=new ResourceNode(new RootResource());  setRootNode(rootNode);  String sessionID=UUID.randomUUID().toString();  systemSessionID=connect(memberName,0L,sessionID);  systemSessionID=sessionID;  ResourceNode defaultService=ResourceFactory.addInstance(ResourceType.CLUSTER,clusterName,getRootNode(),this,systemSessionID);  ResourceNode host=ResourceFactory.addInstance(ResourceType.MANAGER,memberName,defaultService,this,systemSessionID);  ResourceNode confFolder=ResourceFactory.addInstance(ResourceType.FOLDER,"conf",host,this,systemSessionID);  ResourceNode serviceFolder=ResourceFactory.addInstance(ResourceType.FOLDER,ResourceType.SERVICE.toString().toLowerCase(),confFolder,this,systemSessionID);  servicesFolders.put(memberName,serviceFolder);}  }
class C{  @Override public boolean domainMatch(final String host,String domain){  if (host.equals(domain)) {    return true;  }  if (!domain.startsWith(".")) {    domain="." + domain;  }  return host.endsWith(domain) || host.equals(domain.substring(1));}  }
class C{  private void destroyInMultiplePartitionedRegion(int startIndexForRegion,int endIndexForRegion,int startIndexForDestroy,int endIndexForDestroy) throws Throwable {  prPrefix="testMemoryOfPartitionRegion";  int AsyncInvocationArrSize=4;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  int delta=(endIndexForDestroy - startIndexForDestroy) / 4;  async[0]=vm[0].invokeAsync(destroyInMultiplePartitionRegion(prPrefix,startIndexForDestroy,startIndexForDestroy + 1 * delta,startIndexForRegion,endIndexForRegion));  async[1]=vm[1].invokeAsync(destroyInMultiplePartitionRegion(prPrefix,startIndexForDestroy + 1 * delta,startIndexForDestroy + 2 * delta,startIndexForRegion,endIndexForRegion));  async[2]=vm[2].invokeAsync(destroyInMultiplePartitionRegion(prPrefix,startIndexForDestroy + 2 * delta,startIndexForDestroy + 3 * delta,startIndexForRegion,endIndexForRegion));  async[3]=vm[3].invokeAsync(destroyInMultiplePartitionRegion(prPrefix,startIndexForDestroy + 3 * delta,endIndexForDestroy,startIndexForRegion,endIndexForRegion));  for (int count=0; count < AsyncInvocationArrSize; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=0; count < AsyncInvocationArrSize; count++) {    if (async[count].exceptionOccurred()) {      Assert.fail("Exception during " + count,async[count].getException());    }  }}  }
class C{  @Override public Future<BoxedUnit> advanceCommitPosition(DLSN newPosition){  if (null == lastCommittedPosition.get() || (newPosition.compareTo(lastCommittedPosition.get()) > 0)) {    lastCommittedPosition.set(newPosition);    return Utils.zkAsyncCreateFullPathOptimisticAndSetData(zooKeeperClient,zkPath,newPosition.serialize().getBytes(Charsets.UTF_8),zooKeeperClient.getDefaultACL(),CreateMode.PERSISTENT);  } else {    return Future.Done();  }}  }
class C{  public SynchronizeSdkWebappClasspathMarkerResolution(UpdateWebInfFolderCommand updateWebInfLibFolderCommand){  this.updateWebInfLibFolderCommand=updateWebInfLibFolderCommand;}  }
class C{  public void closeServer() throws IOException {  if (serverIsOpen()) {    closeMessage();    issueCommand("QUIT\r\n",221);    super.closeServer();  }}  }
class C{  @Override public void genNCollisions(int n,StringBuilder sb,boolean useNamespace){  try {    InputStream is=getClass().getResourceAsStream("/DJBX33XCollisions/DJBX33XCollisions.txt");    BufferedReader br=new BufferedReader(new InputStreamReader(is));    String prefix="";    if (useNamespace == true) {      prefix="xmlns:";    }    String strLine;    sb.append("");    long k=0;    while (k < n && (strLine=br.readLine()) != null) {      sb.append(prefix + strLine + "=\""+ k+ "\" ");      k++;    }    br.close();  } catch (  Exception e) {    System.err.println("Error: " + e.getMessage());  }}  }
class C{  public void zoomToCamera(float camZ){  renderer.zoomToCamera(camZ);}  }
class C{  private static void initializeWithDefaultSettings(){  final String defaultURL="https://textsecure-service.whispersystems.org";  SettingsService.setURL(defaultURL);  LOGGER.debug("Setting server URL to [{}].",defaultURL);  SettingsService.setLanguage(AvailableLanguage.getDefaultLanguage());}  }
class C{  public static void wtf(String tag,Throwable tr){  wtf(tag,null,tr);}  }
class C{  public static final long labelsId(byte[] key,GeoTimeSerie gts){  return labelsId(key,gts.getLabels());}  }
class C{  @Override public void sendResponse(Exchange exchange,Response response){  if (exchange.getFailedTransmissionCount() > 0) {    super.sendResponse(exchange,response);  } else   if (processMessage(exchange,response)) {    checkAging(exchange);    super.sendResponse(exchange,response);  }}  }
class C{  void addUpdateAction(UpdateAction action){  archivedActions.add(getArchivedAction(action));}  }
class C{  public void executeRace(WorkerThread wt){  if (verbose)   System.out.println(wt.getName() + ": executeRace() called");}  }
class C{  @Deprecated public void visitMethodInsn(int opcode,String owner,String name,String desc){  if (api >= Opcodes.ASM5) {    boolean itf=opcode == Opcodes.INVOKEINTERFACE;    visitMethodInsn(opcode,owner,name,desc,itf);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Sage.removeNode(getString(stack));  return null;}  }
class C{  public static float[] insert(float[] dest,float[] src,int offset){  float[] temp=new float[dest.length + src.length];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset,temp,src.length + offset,dest.length - offset);  return temp;}  }
class C{  public HeaderCardBuilder value(boolean newValue) throws HeaderCardException {  if (this.card == null) {    this.card=new HeaderCard(this.key.key(),newValue,null);    this.header.addLine(this.card);  } else {    this.card.setValue(newValue);  }  return this;}  }
class C{  @Override public void destroyVServer(PropertyHandler paramHandler) throws Exception {  LServerClient vserverClient=getLServerClient(paramHandler);  vserverClient.destroy();  paramHandler.getIaasContext().clear();}  }
class C{  public static int sanToPiece(char shortAlgebraicPiece){switch (shortAlgebraicPiece) {case 'P':case 'p':    return GameConstants.PAWN;case 'N':case 'n':  return GameConstants.KNIGHT;case 'B':case 'b':return GameConstants.BISHOP;case 'R':case 'r':return GameConstants.ROOK;case 'Q':case 'q':return GameConstants.QUEEN;case 'K':case 'k':return GameConstants.KING;default :return -1;}}  }
class C{  void cancelDisplayTaskFor(ImageAware imageAware){  cacheKeysForImageAwares.remove(imageAware.getId());}  }
class C{  private ECDHECryptography(String supportedGroup) throws GeneralSecurityException {  createKeys(new ECGenParameterSpec(supportedGroup));}  }
class C{  public String nodeType(){  return "record";}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  @Override public void readEntityFromNBT(NBTTagCompound tagCompound){  this.blockPos=new BlockPos(tagCompound.getShort("xTile"),tagCompound.getShort("yTile"),tagCompound.getShort("zTile"));  if (tagCompound.hasKey("damage",99)) {    this.damage=tagCompound.getFloat("damage");  }  if (tagCompound.hasKey("ticksInAir",99)) {    this.distanceTraveled=tagCompound.getInteger("distanceTraveled");  }  if (tagCompound.hasKey("life",99)) {    this.life=tagCompound.getInteger("life");  }  if (tagCompound.hasKey("color",99)) {    this.color=tagCompound.getInteger("color");  }}  }
class C{  @Override public boolean isPunctuationWord(String str){  return chineseCommaAcceptFilter().accept(str) || chineseEndSentenceAcceptFilter().accept(str) || chineseDouHaoAcceptFilter().accept(str)|| chineseQuoteMarkAcceptFilter().accept(str)|| chineseParenthesisAcceptFilter().accept(str)|| chineseColonAcceptFilter().accept(str)|| chineseDashAcceptFilter().accept(str)|| chineseOtherAcceptFilter().accept(str);}  }
class C{  public HyperGeometric(int N,int s,int n,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(N,s,n);}  }
class C{  public void run(){  final long now=System.currentTimeMillis();  int runStatus=99999;  super.run();  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("inVmWorkers min:" + getConcurrentInVmWorkerCount() + " max: "+ getMaxConcurrentInVmWorkerCount());  }  String threadName="[masterRun] ";  System.out.println(Utilities.getTimeNow() + " Interproscan 5 Master process running on: " + tcpUri);  Long timeLastDisplayedStatsAndUpdatedClusterState=System.currentTimeMillis();  boolean displayStats=true;  Utilities.verboseLog=verboseLog;  Utilities.verboseLogLevel=verboseLogLevel;  Utilities.mode="distributed";  runStatus=11;  if (Utilities.verboseLog) {    Utilities.verboseLog("DEBUG " + "inVmWorkers min:" + getConcurrentInVmWorkerCount() + " max: "+ getMaxConcurrentInVmWorkerCount());    Utilities.verboseLog("DEBUG " + "Available processors: " + Runtime.getRuntime().availableProcessors());    Utilities.verboseLog("DEBUG " + "Memory free: " + Runtime.getRuntime().freeMemory() / MEGA + "MB total: " + Runtime.getRuntime().totalMemory() / MEGA + "MB max: " + Runtime.getRuntime().maxMemory() / MEGA + "MB");    Utilities.verboseLog("DEBUG " + "tcpUri: " + tcpUri);  }  try {    loadInMemoryDatabase();    runStatus=21;    int stepInstancesCreatedByLoadStep=createStepInstances();    int minimumStepsExpected=getMinimumStepsExpected();    runStatus=31;    if (verboseLog) {      Utilities.verboseLog("Initial Step instance count: " + stepInstanceDAO.count());    }    startNewWorker();    ScheduledExecutorService scheduledExecutorService=updateClusterState();    if (ftMode) {      monitorFailedJobs();    }    boolean controlledLogging=false;    boolean isRemoteJobsCountSet=false;    int printSerialGroups=0;    while (!shutdownCalled) {      if (verboseLogLevel >= 10) {        Utilities.verboseLog("[Distributed Master] [main loop]:  run() - start of main loop");      }      final long timeNowInMainLoop=System.currentTimeMillis();      boolean completed=true;      runStatus=41;      Map<Long,String> submittedSteps=new ConcurrentHashMap<>();      List<StepInstance> unfinishedStepInstances=stepInstanceDAO.retrieveUnfinishedStepInstances();      if (verboseLogLevel >= 10) {        Utilities.verboseLog(threadName + "[Distributed Master] [main loop]  totalUnfinishedStepInstances: " + unfinishedStepInstances.size());      }      for (      StepInstance stepInstance : unfinishedStepInstances) {        Utilities.verboseLog(10,"[Distributed Master] [main loop] [Iterate over unfinished StepInstances]: Currently on " + stepInstance);        if (LOGGER.isTraceEnabled()) {          LOGGER.trace("Iterating over StepInstances: Currently on " + stepInstance);        }        runStatus=51;        if (stepInstance.hasFailedPermanently(jobs)) {          messageSender.sendShutDownMessage();          Thread.sleep(1 * 10 * 1000);          unrecoverableErrorStrategy.failed(stepInstance,jobs);        }        completed&=stepInstance.haveFinished(jobs);        final boolean canBeSubmitted=stepInstance.canBeSubmitted(jobs);        final boolean canBeSubmittedAfterUnknownfailure=isCandidateForResubmission(stepInstance);        final boolean serialGroupCanRun=stepInstanceDAO.serialGroupCanRun(stepInstance,jobs);        if (canBeSubmittedAfterUnknownfailure) {          LOGGER.warn("Step being considered for submitting after unkown failure:" + stepInstance);        }        if ((canBeSubmitted || canBeSubmittedAfterUnknownfailure) && serialGroupCanRun) {          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("Step submitted:" + stepInstance);          }          runStatus=61;          final boolean resubmission=stepInstance.getExecutions().size() > 0;          if (resubmission) {            LOGGER.warn("StepInstance " + stepInstance.getId() + " is being re-run following a failure.");          }          final Step step=stepInstance.getStep(jobs);          final boolean canRunRemotely=!step.isRequiresDatabaseAccess();          boolean debugSubmission=true;          final boolean highMemory=(resubmission) && workerRunnerHighMemory != null && canRunRemotely;          if (highMemory && resubmission) {            LOGGER.warn("StepInstance " + stepInstance.getId() + " ("+ step.getId()+ ") will be re-run in a high-memory worker.");          }          int priority=LOW_PRIORITY;          if (step instanceof RunPsScanStep) {            priority=HIGHER_PRIORITY;          } else           if (step.getSerialGroup() == null || step instanceof WriteFastaFileStep) {            priority=LOW_PRIORITY;          } else {            priority=HIGH_PRIORITY;          }          if (canBeSubmittedAfterUnknownfailure) {            stepInstance.setStateUnknown(true);          }          messageSender.sendMessage(stepInstance,highMemory,priority,canRunRemotely);          statsUtil.addToSubmittedStepInstances(stepInstance);          submittedSteps.put(stepInstance.getId(),stepInstance.getStepId());          if (canBeSubmittedAfterUnknownfailure) {            LOGGER.warn("Step submitted after unkown failure:" + stepInstance);            stepInstance.setStateUnknown(false);            failedStepExecutions.remove(stepInstance.getId());          }          runStatus=71;          if (canRunRemotely) {            if (!isRemoteJobsCountSet) {              updateRemoteJobsCount();              isRemoteJobsCountSet=true;            }            remoteJobs.incrementAndGet();            if (LOGGER.isDebugEnabled()) {              LOGGER.debug("Remote jobs: added one more:  " + remoteJobs.get());            }          } else {            localJobs.incrementAndGet();            if (LOGGER.isDebugEnabled()) {              LOGGER.debug("Local jobs: added one more:  " + localJobs.get());            }          }          controlledLogging=false;        } else {          printStepInstanceState(stepInstance,canBeSubmitted,serialGroupCanRun,unfinishedStepInstances.size());        }        Utilities.verboseLog(10,"[Distributed Master] [main loop] [End of Iterate over unfinished StepInstances]: " + " step instance canbesubmitted: " + canBeSubmitted + " serialGroupCanRun: "+ serialGroupCanRun);      }      runStatus=91;      Utilities.verboseLog("[main loop] time taken to loop over instances : " + (System.currentTimeMillis() - timeNowInMainLoop) + " mills");      Long totalStepInstances=stepInstanceDAO.count();      int totalUnfinishedStepInstances=stepInstanceDAO.retrieveUnfinishedStepInstances().size();      if (verboseLogLevel >= 10) {        Utilities.verboseLog(threadName + "[Distributed Master] [main loop] unfinishedStepInstances -- : " + totalUnfinishedStepInstances);        Utilities.verboseLog("Submitted the following jobs ");        for (        Long jobId : submittedSteps.keySet()) {          Utilities.verboseLog("Job jobId:, " + jobId + " : "+ submittedSteps.get(jobId));        }      }      statsUtil.setTotalJobs(totalStepInstances);      statsUtil.setUnfinishedJobs(totalUnfinishedStepInstances);      if (verboseLog && verboseLogLevel > 4) {        int submitted=statsUtil.getSubmittedStepInstancesCount();        int notAcknowledged=statsUtil.getNonAcknowledgedSubmittedStepInstances().size();        Utilities.verboseLog("Distributed Master:  ofl - totalSteps: " + totalStepInstances + " steps left: "+ totalUnfinishedStepInstances+ " submitted: "+ submitted+ " notFinished: "+ statsUtil.getUnfinishedJobs()+ " notAcknowledged: "+ notAcknowledged);      }      if (completed && totalStepInstances == statsUtil.getSubmittedStepInstancesCount() && statsUtil.getSubmittedStepInstancesCount() >= minimumStepsExpected && totalUnfinishedStepInstances == 0 && totalStepInstances > stepInstancesCreatedByLoadStep && totalStepInstances >= minimumStepsExpected) {        Utilities.verboseLog("stepInstanceDAO.count() " + totalStepInstances + " stepInstancesCreatedByLoadStep : "+ stepInstancesCreatedByLoadStep+ " minimumStepsExpected : "+ minimumStepsExpected+ " SubmittedStepInstancesCount : "+ statsUtil.getSubmittedStepInstancesCount()+ " unfinishedSteps "+ totalUnfinishedStepInstances);        if (totalStepInstances > stepInstancesCreatedByLoadStep && totalUnfinishedStepInstances == 0) {          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("There are no step instances left to run, so about to break out of loop in Master.\n\nStatistics: ");            LOGGER.debug("Step instances left to run: " + totalUnfinishedStepInstances);            LOGGER.debug("Total StepInstances: " + totalStepInstances);          }          if (verboseLogLevel >= 10) {            Utilities.verboseLog(threadName + "completed && totalUnfinishedStepInstances == 0 " + " -- exit master loop");          }          runStatus=0;          break;        } else {          LOGGER.info("Apparently have no more unfinished StepInstances, however it looks like there should be...");          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("Step instances left to run: " + totalUnfinishedStepInstances);            LOGGER.debug("Total StepInstances: " + totalStepInstances);          }        }      }      if (System.currentTimeMillis() - timeLastDisplayedStatsAndUpdatedClusterState > 30 * 60 * 1000) {        displayStats=true;        timeLastDisplayedStatsAndUpdatedClusterState=System.currentTimeMillis();        if (gridName.equals("lsf") && !clusterStateUpdatedRecently()) {          scheduledExecutorService.shutdownNow();          scheduledExecutorService=updateClusterState();          LOGGER.debug("Restarted scheduledExecutorService for updating ClusterState");          Utilities.verboseLog(threadName + "Restarted scheduledExecutorService for updating ClusterState");        }      } else {        displayStats=false;      }      if (!controlledLogging) {        if (LOGGER.isDebugEnabled()) {          LOGGER.debug("Distributed Master waiting for step instances to complete ... more step instances may get scheduled ");          LOGGER.debug("Total Remote Step instances sent on the queue: " + remoteJobs.get());          LOGGER.debug("Total Local Step instances sent on the queue: " + localJobs.get());          LOGGER.debug("Total StepInstances to run: " + totalStepInstances);          LOGGER.debug("Step instances left to run: " + totalUnfinishedStepInstances);        }        controlledLogging=true;      }      if (verboseLog && displayStats) {        Utilities.verboseLog("Distributed Master waiting for step instances to complete ... more step instances may get scheduled ");        Utilities.verboseLog("Total Remote Step instances sent on the queue: " + remoteJobs.get());        Utilities.verboseLog("Total Local Step instances sent on the queue: " + localJobs.get());        Utilities.verboseLog("Step instances currently running on master: " + statsUtil.getRunningJobs().size());        statsUtil.displayRunningJobs();        Utilities.verboseLog("Total StepInstances to run: " + totalStepInstances);        Utilities.verboseLog("Step instances left to run: " + totalUnfinishedStepInstances);      }      if (verboseLog && totalUnfinishedStepInstances == 0) {        Utilities.verboseLog("There are no step instances left to run");      }      statsUtil.displayMasterProgress();      Thread.sleep(1 * 1 * 500);      if (verboseLogLevel >= 10) {        Utilities.verboseLog("[Distributed Master] [[main loop]:  run() - end of main loop");      }    }    shutdownCalled=true;    messageSender.sendShutDownMessage();    if (verboseLog) {      Utilities.verboseLog("Distributed Master:  all computations completed , entering shutdown mode");    }    if (runStatus == 0) {      System.out.println(Utilities.getTimeNow() + " 100% done:  InterProScan analyses completed");    } else {      LOGGER.error("InterProScan analyses failed, check log details for the errors - " + runStatus);    }    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Remote jobs: " + remoteJobs.get());    }    final long executionTime=System.currentTimeMillis() - now;    if (verboseLog) {      Utilities.verboseLog("Computation Time (s) for Master: " + String.format("%d min, %d sec",TimeUnit.MILLISECONDS.toMinutes(executionTime),TimeUnit.MILLISECONDS.toSeconds(executionTime) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(executionTime))));    }    runStatus=0;  } catch (  JMSException e) {    LOGGER.error("JMSException thrown by DistributedBlackBoxMaster: ",e);    systemExit(999);  }catch (  Exception e) {    LOGGER.error("Exception thrown by DistributedBlackBoxMaster: ",e);    systemExit(999);  }  systemExit(runStatus);}  }
class C{  public CNF convertToCNF(Sentence aSentence){  Sentence implicationsOut=(Sentence)aSentence.accept(new ImplicationsOut(),null);  Sentence negationsIn=(Sentence)implicationsOut.accept(new NegationsIn(),null);  Sentence saQuantifiers=(Sentence)negationsIn.accept(new StandardizeQuantiferVariables(substVisitor),new LinkedHashSet<Variable>());  Sentence andsAndOrs=(Sentence)saQuantifiers.accept(new RemoveQuantifiers(parser),new LinkedHashSet<Variable>());  Sentence orDistributedOverAnd=(Sentence)andsAndOrs.accept(new DistributeOrOverAnd(),null);  return (new CNFConstructor()).construct(orDistributedOverAnd);}  }
class C{  public static Object[] create(RFunction function,RCaller call,MaterializedFrame callerFrame,Object[] evaluatedArgs,ArgumentsSignature suppliedSignature,MaterializedFrame enclosingFrame,DispatchArgs dispatchArgs){  assert suppliedSignature.getLength() == evaluatedArgs.length : "suppliedSignature should match the evaluatedArgs (see Java docs).";  assert evaluatedArgs != null : "RArguments.create evaluatedArgs is null";  assert call != null : "RArguments.create call is null";  Object[] a=new Object[MINIMAL_ARRAY_LENGTH + evaluatedArgs.length];  a[INDEX_ENVIRONMENT]=null;  a[INDEX_FUNCTION]=function;  a[INDEX_CALL]=call;  a[INDEX_CALLER_FRAME]=callerFrame;  a[INDEX_ENCLOSING_FRAME]=enclosingFrame;  a[INDEX_DISPATCH_ARGS]=dispatchArgs;  a[INDEX_IS_IRREGULAR]=false;  a[INDEX_SUPPLIED_SIGNATURE]=suppliedSignature;  System.arraycopy(evaluatedArgs,0,a,INDEX_ARGUMENTS,evaluatedArgs.length);  return a;}  }
class C{  public Builder play(Animator anim){  if (anim != null) {    mNeedsSort=true;    return new Builder(anim);  }  return null;}  }
class C{  ChildIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,false);  initNodeTest(DTMFilter.SHOW_ALL);}  }
class C{  PreparedStatement prepareAutoCloseStatement(String sql) throws SQLException {  try {    int id=getNextId(TraceObject.PREPARED_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("PreparedStatement",TraceObject.PREPARED_STATEMENT,id,"prepareStatement(" + quote(sql) + ")");    }    checkClosed();    sql=translateSQL(sql);    return new JdbcPreparedStatement(this,sql,id,ResultSet.TYPE_FORWARD_ONLY,Constants.DEFAULT_RESULT_SET_CONCURRENCY,true);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  void store(String seqnoFileName,ReplDBMSHeader header,long appliedLatency,boolean mustExist) throws ReplicatorException {  TungstenProperties props=new TungstenProperties();  props.setLong("seqno",header.getSeqno());  props.setInt("fragno",header.getFragno());  props.setBoolean("lastFrag",header.getLastFrag());  props.setString("sourceId",header.getSourceId());  props.setLong("epochNumber",header.getEpochNumber());  props.setString("eventId",header.getEventId());  props.setString("shardId",header.getShardId());  props.setLong("extractedTstamp",header.getExtractedTstamp().getTime());  props.setLong("appliedLatency",appliedLatency);  FilePath seqnoFile=new FilePath(serviceDir,seqnoFileName);  if (mustExist && !fileIO.exists(seqnoFile)) {    throw new ReplicatorException("Unable to update seqno position for non-existent channel: file=" + seqnoFileName + " props="+ props.toString());  }  try {    String json=props.toJSON(true);    fileIO.write(seqnoFile,json,"UTF-8");  } catch (  Exception e) {    throw new ReplicatorException("Unable to write seqno position: file=" + seqnoFileName + " props="+ props.toString(),e);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.GUARD__EXPRESSION:    setExpression((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static int parseFullAtomVersion(int fullAtomInt){  return 0x000000FF & (fullAtomInt >> 24);}  }
class C{  private void processTypes(final RoundEnvironment env){  final List<? extends Element> types=sortElements(env,type.class);  for (  final Element e : types) {    final type t=e.getAnnotation(type.class);    final StringBuilder sb=new StringBuilder();    sb.append(TYPE_PREFIX);    sb.append(t.name()).append(SEP);    sb.append(t.id()).append(SEP);    sb.append(t.kind()).append(SEP);    sb.append(rawNameOf(e));    List<? extends TypeMirror> wraps=Collections.EMPTY_LIST;    try {      t.wraps();    } catch (    final MirroredTypesException ex) {      try {        wraps=ex.getTypeMirrors();      } catch (      final MirroredTypeException ex2) {        wraps=Arrays.asList(ex2.getTypeMirror());      }    }    for (    final TypeMirror tm : wraps) {      sb.append(SEP).append(rawNameOf(tm));    }    final doc[] docs=t.doc();    doc doc;    if (docs.length == 0) {      doc=e.getAnnotation(doc.class);    } else {      doc=docs[0];    }    if (doc == null) {      emitWarning("GAML: type '" + t.name() + "' is not documented",e);    }    gp.put(sb.toString(),"");  }}  }
class C{  public TemplateFilter(HashSet<String> whiteList,HashSet<String> whitePrefixList,HashSet<String> blackList,HashSet<String> blackPrefixList){  this.whiteList=whiteList;  this.whitePrefixList=whitePrefixList;  this.blackList=blackList;  this.blackPrefixList=blackPrefixList;}  }
class C{  public String label(){  return mLabel;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap notations;  DocumentType docType;  Node retval;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    notations=docType.getNotations();    assertNotNull("notationsNotNull",notations);{      boolean success=false;      try {        retval=notations.removeNamedItem("notation1");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);      }      assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);    }  }}  }
class C{  public boolean teardown(){  setTeardownRequested(true);  return (setEnableApn(mApnType,false) != PhoneConstants.APN_REQUEST_FAILED);}  }
class C{  public boolean isRemoteDiscovery(){  return remoteDiscovery;}  }
class C{  @Override protected MkCoPTreeNode<O> createNewLeafNode(){  return new MkCoPTreeNode<>(leafCapacity,true);}  }
class C{  protected void doOsSetup(final File vstsDirectory,final String ideLocation){  if (Platform.isWindows()) {    logger.debug("Windows operating system detected");    WindowsStartup.startup();  } else   if (Platform.isMac()) {    logger.debug("Mac operating system detected");    cacheIdeLocation(vstsDirectory,ideLocation + MAC_EXE_DIR);    MacStartup.startup();  } else {    logger.debug("Linux operating system detected ");    cacheIdeLocation(vstsDirectory,ideLocation + LINUX_EXE_DIR);    LinuxStartup.startup();  }}  }
class C{  public void mouseDragged(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());  }}  }
class C{  protected static boolean hasResourceParam(ActionInvocation invocation){  return invocation.getInvocationContext().getParameters().containsKey(Constants.REQ_PARAM_RESOURCE);}  }
class C{  public static double score(AddressWrapper wrapper){  int runs=2000;  int bits=8192;  int mask=bits * 2 - 1;  int[] collisions=new int[runs];  for (int t=0; t < runs; t++) {    Set<Integer> maskedhashs=new HashSet<>();    byte[] init=new byte[bits / 8];    NativeBytes b=NativeBytes.nativeBytes(init.length);    SecureRandom rand=new SecureRandom();    rand.nextBytes(init);    if (t % 2 == 0) {      byte[] init2=new byte[bits / 8];      rand.nextBytes(init2);      for (int i=0; i < init.length; i++)       init[i]&=init2[i];    }    wrapper.setAddress(b.address(0),b.realCapacity());    b.clear();    b.write(init);    for (int i=0; i < bits; i++) {      int index=i >> 6 << 3;      long prev=b.readLong(index);      b.writeLong(index,prev ^ (1L << i));      b.readLimit(bits / 8);      maskedhashs.add((int)(wrapper.hash() & mask));      b.writeLong(index,prev);    }    collisions[t]=(bits - maskedhashs.size());  }  Arrays.sort(collisions);  int score=collisions[runs * 99 / 100];  System.out.println("Mask of Hash: 99%tile collisions: " + score);  return score;}  }
class C{  public HandleException(String message,Object... args){  super(format(message,args));}  }
class C{  @Override protected String createProcessTree(int indent,String selfPrefix,String childPrefix,Operator markOperator,String mark){  StringBuilder treeBuilder=new StringBuilder(super.createProcessTree(indent,selfPrefix,childPrefix,markOperator,mark));  for (int i=0; i < subprocesses.length; i++) {    List<String> processTreeList=subprocesses[i].createProcessTreeList(indent,childPrefix + "+- ",childPrefix + (i < subprocesses.length - 1 ? "|  " : "   "),markOperator,mark);    for (    String entry : processTreeList) {      treeBuilder.append(Tools.getLineSeparator());      treeBuilder.append(entry);    }  }  return treeBuilder.toString();}  }
class C{  private boolean containsNullValue(){  Entry<K,V>[] tab=getTable();  for (int i=tab.length; i-- > 0; )   for (Entry<K,V> e=tab[i]; e != null; e=e.next)   if (e.value == null)   return true;  return false;}  }
class C{  public boolean addRule(Rule r){  if (!super.validRule(r) || !validRule(r)) {    return false;  }  rules.add(r);  return true;}  }
class C{  public PrinterMessageFromOperator(String message,Locale locale){  super(message,locale);}  }
class C{  private void connectRandom(SynapseGroup synapseGroup){  currentOrderingIndices=new int[sourceNeurons.length];  int numTars=synapseGroup.isRecurrent() && !selfConnectionAllowed ? (sourceNeurons.length - 1) : targetNeurons.length;  synapseGroup.preAllocateSynapses((int)(sourceNeurons.length * numTars * connectionDensity));  for (int i=0, n=sourceNeurons.length; i < n; i++) {    currentOrderingIndices[i]=BinomialGen.nextInt(SimbrainMath.DEFAULT_RANDOM_STREAM,numTars,connectionDensity);    Neuron src=sourceNeurons[i];    Neuron tar;    int tarLen=targetNeurons.length - 1;    int[] o=null;    if (sourceNeurons == targetNeurons && !selfConnectionAllowed) {      o=SimbrainMath.randPermuteWithExclusion(0,tarLen + 1,i);    } else {      o=SimbrainMath.randPermute(0,tarLen + 1);    }    for (int j=0; j < currentOrderingIndices[i]; j++) {      tar=targetNeurons[o[j]];      Synapse s=new Synapse(src,tar);      synapseGroup.addNewSynapse(s);    }  }}  }
class C{  public boolean isSupported(String feature,String version){  return false;}  }
class C{  public static AlwaysOnBranchProfile create(){  return new AlwaysOnBranchProfile();}  }
class C{  private DoubleMatrix2D XXXsolveBuggy(DoubleMatrix2D B){  cern.jet.math.Functions F=cern.jet.math.Functions.functions;  if (B.rows() != n) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!isSymmetricPositiveDefinite) {    throw new IllegalArgumentException("Matrix is not symmetric positive definite.");  }  DoubleMatrix2D X=B.copy();  int nx=B.columns();  DoubleMatrix1D[] Xrows=new DoubleMatrix1D[n];  for (int k=0; k < n; k++)   Xrows[k]=X.viewRow(k);  for (int k=0; k < n; k++) {    for (int i=k + 1; i < n; i++) {      Xrows[i].assign(Xrows[k],F.minusMult(L.getQuick(i,k)));    }    Xrows[k].assign(F.div(L.getQuick(k,k)));  }  for (int k=n - 1; k >= 0; k--) {    Xrows[k].assign(F.div(L.getQuick(k,k)));    for (int i=0; i < k; i++) {      Xrows[i].assign(Xrows[k],F.minusMult(L.getQuick(k,i)));    }  }  return X;}  }
class C{  public Matrix computeDerivatives(Matrix loghyper,Matrix X,int index){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  if (index > numParameters() - 1)   throw new IllegalArgumentException("Wrong hyperparameters index " + index + " it should be smaller or equal to "+ (numParameters() - 1));  final double it2=Math.exp(-2 * loghyper.get(0,0));  Matrix A=X.times(X.transpose());  return addValue(A,1).times(-2 * it2);}  }
class C{  public void tellAllPlayers(NotificationType notificationType,final String message){  onlinePlayers.tellAllOnlinePlayers(notificationType,message);}  }
class C{  public boolean shouldBeConflated(){  return this.conflate;}  }
class C{  public OdorWorldMenu(final OdorWorldPanel world){  parentWorld=world;}  }
class C{  public void error(final String message,final Throwable throwable,final LogEvent event){  System.err.println("Logging Error: " + message);  if (null != throwable) {    throwable.printStackTrace();  }}  }
class C{  public static Explanation match(float value,String description,Collection<Explanation> details){  return new Explanation(true,value,description,details);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("Post from " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  Properties ctx=JSPEnv.getCtx(request);  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  if (wu == null) {    log.warning("No web user");    response.sendRedirect("loginServlet?ForwardTo=expense.jsp");    return;  }  int W_Expense_ID=WebUtil.getParameterAsInt(request,P_Expense_ID);  String method=WebUtil.getParameter(request,P_SubmitType_Name);  if (method.startsWith("Save")) {  } else   if (method.startsWith("Submit")) {  } else {  }  WebUtil.createForwardPage(response,"Web Expense Under Construction","expenses.jsp",0);}  }
class C{  public void unsetCreateTime(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,CREATETIME_ISSET_ID);}  }
class C{  @Override public void close() throws IOException {  try {    finish();  }  finally {    this.writer.close();  }}  }
class C{  public SubqueryInExpression(Expression expression,EPStatementObjectModel model,boolean isNotIn){  this.getChildren().add(expression);  this.model=model;  this.notIn=isNotIn;}  }
class C{  public static void putDoubleLE(byte[] arr,long off,double val){  long longVal=Double.doubleToLongBits(val);  if (UNALIGNED)   UNSAFE.putLong(arr,off,Long.reverseBytes(longVal)); else   putLongByByte(arr,off,longVal,false);}  }
class C{  private Settings(){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public final MutableDouble3D add(final MutableDouble3D other1,final MutableDouble3D other2){  x=other1.x + other2.x;  y=other1.y + other2.y;  z=other1.z + other2.z;  return this;}  }
class C{  public final int readUnsignedByte() throws IOException {  int ch=in.read();  if (ch < 0)   throw new EOFException();  return ch;}  }
class C{  @Override public void stop(SamzaApplicationState.SamzaAppStatus status){  log.info("Stopping AM client ");  lifecycle.onShutdown(status);  amClient.stop();  log.info("Stopping the AM service ");  service.onShutdown();  metrics.stop();  if (status != SamzaApplicationState.SamzaAppStatus.UNDEFINED) {    cleanupStagingDir();  }}  }
class C{  public static String prettyPrintFeatureArgs(String featureArgs){  ArrayList<String> names=new ArrayList<String>();  String[] splittedArgs=featureArgs.substring(1,featureArgs.length() - 1).split(",");  for (int i=0; i < splittedArgs.length; i+=2) {    String argName=splittedArgs[i].trim();    String argVal=splittedArgs[i + 1].trim();    String fullArg=argName + ":" + argVal;    names.add(fullArg);  }  return StringUtils.join(names,", ");}  }
class C{  public String globalInfo(){  return "The class that constructs a ball tree bottom up.";}  }
class C{  @Override public Object createFromString(EDataType eDataType,String initialValue){switch (eDataType.getClassifierID()) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF_ITERABLE:    return createParameterizedTypeRefIterableFromString(eDataType,initialValue);default :  throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  private List<FacetResult> facetsOnly() throws IOException {  DirectoryReader indexReader=DirectoryReader.open(indexDir);  IndexSearcher searcher=new IndexSearcher(indexReader);  TaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoDir);  FacetsCollector fc=new FacetsCollector();  searcher.search(new MatchAllDocsQuery(),fc);  List<FacetResult> results=new ArrayList<>();  Facets facets=new FastTaxonomyFacetCounts(taxoReader,config,fc);  results.add(facets.getTopChildren(10,"Author"));  results.add(facets.getTopChildren(10,"Publish Date"));  indexReader.close();  taxoReader.close();  return results;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.SDECLARATION__NAME:    setName((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected void drawLinear(Canvas c,LineDataSet dataSet,List<Entry> entries){  int dataSetIndex=mChart.getLineData().getIndexOfDataSet(dataSet);  Transformer trans=mChart.getTransformer(dataSet.getAxisDependency());  float phaseX=mAnimator.getPhaseX();  float phaseY=mAnimator.getPhaseY();  mRenderPaint.setStyle(Paint.Style.STROKE);  Canvas canvas=null;  if (dataSet.isDashedLineEnabled()) {    canvas=mBitmapCanvas;  } else {    canvas=c;  }  Entry entryFrom=dataSet.getEntryForXIndex(mMinX);  Entry entryTo=dataSet.getEntryForXIndex(mMaxX);  int minx=dataSet.getEntryPosition(entryFrom);  int maxx=Math.min(dataSet.getEntryPosition(entryTo) + 1,entries.size());  int range=(maxx - minx) * 4 - 4;  LineBuffer buffer=mLineBuffers[dataSetIndex];  buffer.setPhases(phaseX,phaseY);  buffer.limitFrom(minx);  buffer.limitTo(maxx);  buffer.feed(entries);  trans.pointValuesToPixel(buffer.buffer);  if (dataSet.getColors().size() > 1) {    for (int j=0; j < range; j+=4) {      if (!mViewPortHandler.isInBoundsRight(buffer.buffer[j]))       break;      if (!mViewPortHandler.isInBoundsLeft(buffer.buffer[j + 2]) || (!mViewPortHandler.isInBoundsTop(buffer.buffer[j + 1]) && !mViewPortHandler.isInBoundsBottom(buffer.buffer[j + 3])) || (!mViewPortHandler.isInBoundsTop(buffer.buffer[j + 1]) && !mViewPortHandler.isInBoundsBottom(buffer.buffer[j + 3])))       continue;      mRenderPaint.setColor(dataSet.getColor(j / 4 + minx));      canvas.drawLine(buffer.buffer[j],buffer.buffer[j + 1],buffer.buffer[j + 2],buffer.buffer[j + 3],mRenderPaint);    }  } else {    mRenderPaint.setColor(dataSet.getColor());    canvas.drawLines(buffer.buffer,0,range,mRenderPaint);  }  mRenderPaint.setPathEffect(null);  if (dataSet.isDrawFilledEnabled() && entries.size() > 0) {    drawLinearFill(c,dataSet,entries,minx,maxx,trans);  }}  }
class C{  public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){  if (mv != null) {    mv.visitTableSwitchInsn(min,max,dflt,labels);  }}  }
class C{  @Override public String valueToString(Object value) throws ParseException {  if (value == null && allowsNullValue) {    return "";  }  StringBuilder buf=new StringBuilder();  if (value instanceof Double) {    double v=((Double)value).doubleValue();    v=v * multiplier;    String str;    BigDecimal big=new BigDecimal(v);    int exponent=big.scale() >= 0 ? big.precision() - big.scale() : -big.scale();    if (!usesScientificNotation || exponent > minNegativeExponent && exponent < minPositiveExponent) {      str=decimalFormat.format(v);    } else {      str=scientificFormat.format(v);    }    buf.append(str);  } else   if (value instanceof Float) {    float v=((Float)value).floatValue();    v=(float)(v * multiplier);    String str;    BigDecimal big=new BigDecimal(v);    int exponent=big.scale() >= 0 ? big.precision() - big.scale() : -big.scale();    if (!usesScientificNotation || exponent > minNegativeExponent && exponent < minPositiveExponent) {      str=decimalFormat.format(v);    } else {      str=scientificFormat.format(v);    }    buf.append(str);  } else   if (value instanceof Long) {    long v=((Long)value).longValue();    v=(long)(v * multiplier);    buf.append(Long.toString(v));  } else   if (value instanceof Integer) {    int v=((Integer)value).intValue();    v=(int)(v * multiplier);    buf.append(Integer.toString(v));  } else   if (value instanceof Byte) {    byte v=((Byte)value).byteValue();    v=(byte)(v * multiplier);    buf.append(Byte.toString(v));  } else   if (value instanceof Short) {    short v=((Short)value).shortValue();    v=(short)(v * multiplier);    buf.append(Short.toString(v));  }  if (buf.length() != 0) {    if (unit != null) {      buf.append(unit);    }    return buf.toString();  }  throw new ParseException("Value is of unsupported class " + value,0);}  }
class C{  private <R>GridClientFutureAdapter<R> makeRequest(GridClientMessage msg,UUID destId) throws GridClientConnectionResetException, GridClientClosedException {  return makeRequest(msg,destId,false);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.FULL_TYPE_REFERENCE__MODULE_NAME:    setModuleName(MODULE_NAME_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public String pack(Iterator<Integer> it){  StringBuilder sb=new StringBuilder("");  while (it.hasNext()) {    sb.append(it.next() + ",");  }  if (sb.length() > 0) {    sb.deleteCharAt(sb.length() - 1);  }  return sb.toString();}  }
class C{  public void addCommentToMove(int halfMoveIndex,String text,boolean coloring){  int origCaretPos=textPanel.getCaretOffset();  int start=moveNodes.get(halfMoveIndex);  int length=moveNodesLengths.get(halfMoveIndex);  textPanel.setCaretOffset(start + length);  textPanel.insert(" " + text);  StyleRange styleRange=new StyleRange();  styleRange.start=start + length;  styleRange.length=text.length() + 1;  styleRange.fontStyle=SWT.ITALIC;  if (coloring)   styleRange.foreground=Display.getCurrent().getSystemColor(SWT.COLOR_RED);  textPanel.setStyleRange(styleRange);  textPanel.setCaretOffset(origCaretPos);  int moveIndex=halfMoveIndex + 1;  while (moveIndex < moveNodes.size()) {    moveNodes.set(moveIndex,moveNodes.get(moveIndex) + text.length() + 1);    moveIndex++;  }}  }
class C{  public JavaFormatter(String lineDelimiter,int initialIndentLevel,boolean useCodeFormatter,IJavaProject project){  fLineDelimiter=lineDelimiter;  fUseCodeFormatter=useCodeFormatter;  fInitialIndentLevel=initialIndentLevel;  fProject=project;}  }
class C{  public static Date createTimeAgoFromOrigin(double age,Type units,double origin){  return new Date(age,units,true,origin);}  }
class C{  public OscarCandidate(String category){  this.category=category;}  }
class C{  public void writeField(final String name,final int value) throws java.io.IOException {  writeField(name,Integer.toString(value));}  }
class C{  protected PapeResponse(){  set("auth_policies",AUTH_POLICY_NONE);  if (DEBUG)   _log.debug("Created empty PAPE response.");}  }
class C{  @Deprecated public GenericQueryBuilder treeAgg(boolean treeAgg){  if (treeAgg)   LOG.warn("Parameter \"treeAgg\" is deprecated, ignore");  return this;}  }
class C{  public void scale(float scale){  if (scale != 1.0f) {    left=(int)(left * scale + 0.5f);    top=(int)(top * scale + 0.5f);    right=(int)(right * scale + 0.5f);    bottom=(int)(bottom * scale + 0.5f);  }}  }
class C{  public static void copyParentPropToChild(final Configuration config,final String parentPropertyName){  final String parentValue=config.get(parentPropertyName,"");  config.set(parentPropertyName + MergeTool.CHILD_SUFFIX,parentValue);}  }
class C{  static void validateHeaderName(CharSequence name){  if (name == null) {    throw new NullPointerException("name");  }  if (name.length() == 0) {    throw new IllegalArgumentException("name cannot be length zero");  }  if (name.length() > SPDY_MAX_NV_LENGTH) {    throw new IllegalArgumentException("name exceeds allowable length: " + name);  }  for (int i=0; i < name.length(); i++) {    char c=name.charAt(i);    if (c == 0) {      throw new IllegalArgumentException("name contains null character: " + name);    }    if (c > 127) {      throw new IllegalArgumentException("name contains non-ascii character: " + name);    }  }}  }
class C{  private void onWaypointEnd() throws SAXException {  addWaypoint(WaypointType.STATISTICS.name().equals(waypointType) ? WaypointType.STATISTICS : WaypointType.WAYPOINT);}  }
class C{  public boolean isAtWar(final PlayerID p1,final PlayerID p2){  return Matches.RelationshipTypeIsAtWar.match((getRelationshipType(p1,p2)));}  }
class C{  public static GeoTimeSerie relabel(GeoTimeSerie gts,Map<String,String> newlabels){  Map<String,String> labels=new HashMap<String,String>();  if (!newlabels.containsValue(null)) {    labels.putAll(gts.getLabels());  }  for (  String name : newlabels.keySet()) {    String value=newlabels.get(name);    if (null == value || "".equals(value)) {      labels.remove(name);      continue;    }    if (null != name) {      labels.put(name,value);    }  }  gts.setLabels(labels);  return gts;}  }
class C{  public void addFeature(FeatureVectorBuffer fvb){  idxList.addAll(fvb.idxList);  valList.addAll(fvb.valList);}  }
class C{  public boolean isTitleEnabled(){  return mCollapsingTitleEnabled;}  }
class C{  public void addEventListenerNS(String namespaceURI,String type,EventListener listener,boolean useCapture,Object group){  HashTable listeners;  if (useCapture) {    if (capturingListeners == null) {      capturingListeners=new HashTable();    }    listeners=capturingListeners;  } else {    if (bubblingListeners == null) {      bubblingListeners=new HashTable();    }    listeners=bubblingListeners;  }  EventListenerList list=(EventListenerList)listeners.get(type);  if (list == null) {    list=new EventListenerList();    listeners.put(type,list);  }  list.addListener(namespaceURI,group,listener);}  }
class C{  public String printFlags(){  StringBuffer sb=new StringBuffer();  for (int i=0; i < 16; i++)   if (validFlag(i) && getFlag(i)) {    sb.append(Flags.string(i));    sb.append(" ");  }  return sb.toString();}  }
class C{  public int next(){  final int startNode=_startNode;  if (startNode == NULL) {    return NULL;  }  if (_includeSelf && (_currentNode + 1) == startNode)   return returnNode(makeNodeHandle(++_currentNode));  int node=_currentNode;  int type;  if (startNode == ROOTNODE) {    int eType;    do {      node++;      eType=_exptype2(node);      if (NULL == eType) {        _currentNode=NULL;        return END;      }    } while (eType == TEXT_NODE || (type=m_extendedTypes[eType].getNodeType()) == ATTRIBUTE_NODE || type == NAMESPACE_NODE);  } else {    do {      node++;      type=_type2(node);      if (NULL == type || !isDescendant(node)) {        _currentNode=NULL;        return END;      }    } while (ATTRIBUTE_NODE == type || TEXT_NODE == type || NAMESPACE_NODE == type);  }  _currentNode=node;  return returnNode(makeNodeHandle(node));}  }
class C{  public void addPropertiesFromString(String[] properties){  try {    ArrayList<Integer> dimCombinations=new ArrayList<Integer>();    HashMap<String,HashSet<AggregateOperation>> valOpTypes=new HashMap<String,HashSet<AggregateOperation>>();    String type=null;    for (    String inputs : properties) {      String[] split=inputs.split("=",2);      if (split[0].toLowerCase().equals("timebucket")) {        int timeBucket=LogstreamUtil.extractTimeBucket(split[1]);        if (timeBucket == 0) {          logger.error("invalid time bucket",split[1]);        }        timeBucketFlags|=timeBucket;      } else       if (split[0].toLowerCase().equals("values")) {        String[] values=split[1].split(":");        for (        String value : values) {          String[] valueNames=value.split("\\.");          String valueName=valueNames[0];          String valueType=valueNames[1];          if (valueType.toLowerCase().equals("sum")) {            if (valOpTypes.containsKey(valueName)) {              valOpTypes.get(valueName).add(AggregateOperation.SUM);            } else {              HashSet<AggregateOperation> valueTypeList=new HashSet<AggregateOperation>();              valueTypeList.add(AggregateOperation.SUM);              valOpTypes.put(valueName,valueTypeList);            }          } else           if (valueType.equals("avg") || valueType.equals("average")) {            if (valOpTypes.containsKey(valueName)) {              valOpTypes.get(valueName).add(AggregateOperation.AVERAGE);              valOpTypes.get(valueName).add(AggregateOperation.COUNT);            } else {              HashSet<AggregateOperation> valueTypeList=new HashSet<AggregateOperation>();              valueTypeList.add(AggregateOperation.AVERAGE);              valueTypeList.add(AggregateOperation.COUNT);              valOpTypes.put(valueName,valueTypeList);            }          } else           if (valueType.equals("count")) {            if (valOpTypes.containsKey(valueName)) {              valOpTypes.get(valueName).add(AggregateOperation.COUNT);            } else {              HashSet<AggregateOperation> valueTypeList=new HashSet<AggregateOperation>();              valueTypeList.add(AggregateOperation.COUNT);              valOpTypes.put(valueName,valueTypeList);            }          }        }      } else       if (split[0].toLowerCase().equals("type")) {        type=split[1];      } else       if (split[0].toLowerCase().equals("dimensions")) {        String dimensions=split[1];        int dim=registry.bind("DIMENSION",dimensions);        dimCombinations.add(dim);      } else {        throw new ValidationException("Invalid input property string " + Arrays.toString(properties));      }    }    dimensionCombinationList.put(registry.getIndex(LogstreamUtil.LOG_TYPE,type),dimCombinations);    valueOperations.put(registry.getIndex(LogstreamUtil.LOG_TYPE,type),valOpTypes);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public ScriptRecorder(final String classname) throws IOException {  this.classname=classname;  filename=System.getProperty("java.io.tmpdir") + "/" + classname+ ".java";  j2DClient.get().addEventLine(new StandardEventLine("Starting recoding to " + filename));  lastTimestamp=0;  ps=new PrintStream(filename,"UTF-8");}  }
class C{  public void buildSpanningTree(Node root){  super.clearEdges();  super.setRoot(root);  LinkedList q=new LinkedList();  BitSet visit=new BitSet();  q.add(root);  visit.set(root.getRow());  Table edges=getEdgeTable();  while (!q.isEmpty()) {    Node p=(Node)q.removeFirst();    for (Iterator iter=p.edges(); iter.hasNext(); ) {      Edge e=(Edge)iter.next();      Node n=e.getAdjacentNode(p);      if (!visit.get(n.getRow())) {        q.add(n);        visit.set(n.getRow());        int er=super.addChildEdge(p.getRow(),n.getRow());        edges.setInt(er,SOURCE_EDGE,e.getRow());      }    }  }}  }
class C{  @Override protected void attackImplementationHook(RequestResponsePair original){  analysisData=new AnalysisDataCollector();  wrappingOracle=new WrappingOracle(signatureManager.getDocument(),signatureManager.getPayloads(),usedSchemaAnalyser);  int signedElements=wrappingOracle.getCountSignedElements();  int elementsByID=wrappingOracle.getCountElementsReferedByID();  int elementsByXPath=wrappingOracle.getCountElementsReferedByXPath();  int elementsByFastXPath=wrappingOracle.getCountElementsReferedByFastXPath();  int elementsByPrefixfreeTransformedFastXPath=wrappingOracle.getCountElementsReferedByPrefixfreeTransformedFastXPath();  important(String.format("%d signed Elements:\n--> %d by ID\n--> %d by XPath\n  `--> %d by FastXPath\n  `--> %d by prefix free FastXPath (best)",signedElements,elementsByID,elementsByXPath,elementsByFastXPath,elementsByPrefixfreeTransformedFastXPath));  String searchString=optionManager.getOptionTheContainedString().getValue();  boolean search=(!searchString.isEmpty() && optionManager.getOptionMustContainString().isOn());  SoapHttpClient client=SoapHttpClientFactory.createSoapHttpClient(original.getWsdlRequest());  int successCounter=0;  int max=wrappingOracle.maxPossibilities();  Document attackDocument;  info("Found " + max + " wrapping possibilites.");  for (int i=0; i < max; ++i) {    info("Trying possibility " + (i + 1) + "/"+ max);    try {      attackDocument=wrappingOracle.getPossibility(i);    } catch (    InvalidWeaknessException e) {      log().warn("Could not abuse the weakness. " + e.getMessage());      continue;    }catch (    Exception e) {      log().error("Unknown error. " + e.getMessage());      continue;    }    info(WeaknessLog.representation());    String attackDocumentAsString=DomUtilities.domToString(attackDocument);    SoapResponse response;    try {      response=client.sendSoap(attackDocumentAsString);    } catch (    IOException ex) {      log().warn("Could not submit the request. Trying next one. ",ex);      continue;    }    String responseContent=null;    if (response != null) {      responseContent=response.getBody();    } else {      info("Error: Got empty SOAP response.");    }    if (responseContent == null) {      trace("Request:\n" + DomUtilities.showOnlyImportant(attackDocumentAsString));      important("The server's answer was empty. Server misconfiguration?");      analysisData.add(ANALYSISDATA_NULL_STRING,i,"");      continue;    }    try {      SoapVersion soapVersion=original.getWsdlRequest().getOperation().getInterface().getSoapVersion();      if (SoapUtils.isSoapFault(responseContent,soapVersion)) {        trace("Request:\n" + DomUtilities.showOnlyImportant(attackDocumentAsString));        info("Server does not accept the message, you got a SOAP error.");        trace("Response:\n" + DomUtilities.showOnlyImportant(responseContent));        String xpath;        if (soapVersion.equals(SoapVersion.Soap11)) {          xpath="/*[local-name()='Envelope'][1]/*[local-name()='Body'][1]/*[local-name()='Fault'][1]/*[local-name()='faultstring'][1]";        } else {          xpath="/*[local-name()='Envelope'][1]/*[local-name()='Body'][1]/*[local-name()='Fault'][1]/*[local-name()='Reason'][1]/*[local-name()='Text'][1]";        }        Document doc;        try {          doc=DomUtilities.stringToDom(responseContent);          List<Element> match;          try {            match=(List<Element>)DomUtilities.evaluateXPath(doc,xpath);            StringBuilder sb=new StringBuilder();            for (            Element ele : match) {              sb.append(ele.getTextContent()).append(" ");            }            if (sb.length() > 0) {              analysisData.add(sb.toString(),i,responseContent);            }          } catch (          XPathExpressionException ex) {            java.util.logging.Logger.getLogger(SignatureWrapping.class.getName()).log(java.util.logging.Level.SEVERE,null,ex);          }        } catch (        SAXException ex) {          java.util.logging.Logger.getLogger(SignatureWrapping.class.getName()).log(java.util.logging.Level.SEVERE,null,ex);        }        continue;      }    } catch (    XmlException e) {      trace("Request:\n" + DomUtilities.showOnlyImportant(attackDocumentAsString));      info("The answer is not valid XML. Server missconfiguration?");      analysisData.add(ANALYSISDATA_NONXML_STRING,i,responseContent);      continue;    }    if (search) {      int index=responseContent.indexOf(searchString);      if (index < 0) {        info("The answer does not contain the searchstring:\n" + searchString);        analysisData.add(ANALYSISDATA_NOFAULT_STRING,i,responseContent);        continue;      } else {        important("The answer contains the searchstring:\n" + searchString);        analysisData.add(ANALYSISDATA_SUCCESSFUL_STRING,i,responseContent);      }    } else {      analysisData.add(ANALYSISDATA_SUCCESSFUL_STRING,i,responseContent);    }    critical("Server Accepted the Request with Possibility " + (i + 1) + ".");    important(String.format("Attack-Vector:\n\n%s\nRequest:\n%s",WeaknessLog.representation(),DomUtilities.showOnlyImportant(attackDocumentAsString)));    info("Response:\n" + DomUtilities.showOnlyImportant(responseContent));    setCurrentPoints(getMaxPoints());    ++successCounter;    if (optionManager.getAbortOnFirstSuccess().isOn()) {      break;    }  }  String message="";  if (getCurrentPoints() >= successThreashold) {    message="CRITICAL: Server could be successfully attacked!";  } else   if (signedElements == elementsByPrefixfreeTransformedFastXPath) {    setCurrentPoints(0);    message="Everything is Okay: Server uses transformed prefix-free FastXPath. Best practices.";  } else   if (signedElements == elementsByFastXPath) {    setCurrentPoints(10);    message="Good: Server uses FastXPath.";  } else   if (signedElements == elementsByXPath) {    setCurrentPoints(20);    message="Okay: Server uses XPaths, but could not be successfully attacked.";  } else   if (elementsByXPath > 0 && elementsByID > 0) {    setCurrentPoints(20);    message="Warning: Server uses ID References and XPaths mixed. Only XPaths are recommended.";  } else   if (signedElements == elementsByID) {    setCurrentPoints(20);    message="Warning: Server uses ID References but could not be successfully attacked.";  } else {    message="### This is a not expected result";  }  if (getCurrentPoints() < successThreashold) {    important(message);  } else {    critical(message);  }  if (successCounter > 0 && !optionManager.getAbortOnFirstSuccess().isOn()) {    important(String.format("Found %d of %d working XSW messages.",successCounter,max));  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public SchemaViolationException(String explanation){  super(explanation);}  }
class C{  public Node(final Node left,final Node right,final LongArrayBitVector path){  this.left=left;  this.right=right;  this.path=path;  prefixLeft=prefixRight=MAX_PREFIX;}  }
class C{  public static Match.Builder createForgetfulBuilder(Match m){  return OFFactories.getFactory(m.getVersion()).buildMatch();}  }
class C{  @Override public void update(int i,int j,double mij){  this.m_totalSum-=get(i,j);  this.m_totalSum+=mij;  super.update(i,j,mij);}  }
class C{  public BitmapDrawable createBitmapDrawable(Resources resources,Bitmap bitmap){  if (bitmap == null) {    return null;  }  BitmapDrawable drawable=null;  if (bitmap != null) {    if (Version.hasHoneycomb()) {      drawable=new BitmapDrawable(resources,bitmap);    } else {      drawable=new RecyclingBitmapDrawable(resources,bitmap);    }  }  return drawable;}  }
class C{  public static boolean isArray(Object o){  if (o instanceof Array)   return true;  if (o instanceof List)   return true;  if (isNativeArray(o))   return true;  if (o instanceof ObjectWrap) {    return isArray(((ObjectWrap)o).getEmbededObject(null));  }  return false;}  }
class C{  private MiBandSupport pair(TransactionBuilder transaction){  Prefs prefs=GBApplication.getPrefs();  if (prefs.getBoolean(MiBandConst.PREF_MIBAND_DONT_ACK_TRANSFER,false)) {    LOG.info("Attempting to pair MI device...");    BluetoothGattCharacteristic characteristic=getCharacteristic(MiBandService.UUID_CHARACTERISTIC_PAIR);    if (characteristic != null) {      transaction.write(characteristic,new byte[]{2});    } else {      LOG.info("Unable to pair MI device -- characteristic not available");    }  }  return this;}  }
class C{  public LongColumn(int nrows,int capacity,long defaultValue){  super(long.class,new Long(defaultValue));  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_values=new long[capacity];  Arrays.fill(m_values,defaultValue);  m_size=nrows;}  }
class C{  final public SyntaxTreeNode Assumption() throws ParseException {  SyntaxTreeNode tn;  SyntaxTreeNode zn=null;  Token t;  bpa("Assumption");  expecting="ASSUM...";switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case ASSUMPTION:    t=jj_consume_token(ASSUMPTION);  break;case ASSUME:t=jj_consume_token(ASSUME);break;default :jj_la1[38]=jj_gen;jj_consume_token(-1);throw new ParseException();}addHeir(new SyntaxTreeNode(mn,t));if (jj_2_15(2)) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case DEFBREAK:t=jj_consume_token(DEFBREAK);break;default :jj_la1[39]=jj_gen;;}tn=Identifier();addHeir(tn);expecting="==";t=jj_consume_token(DEF);addHeir(new SyntaxTreeNode(mn,t));} else {;}belchDEF();expecting="Expression";tn=Expression();addHeir(tn);SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_Assumption,zn,sn);}throw new Error("Missing return statement in function");}  }
class C{  public static byte[] unhexlify(String argbuf){  int arglen=argbuf.length();  if (arglen % 2 != 0)   throw new RuntimeException("Odd-length string");  byte[] retbuf=new byte[arglen / 2];  for (int i=0; i < arglen; i+=2) {    int top=Character.digit(argbuf.charAt(i),16);    int bot=Character.digit(argbuf.charAt(i + 1),16);    if (top == -1 || bot == -1)     throw new RuntimeException("Non-hexadecimal digit found");    retbuf[i / 2]=(byte)((top << 4) + bot);  }  return retbuf;}  }
class C{  void add(final int index,final int[] frameIndexes,final int[] frameDelays){  animations.put(Integer.valueOf(index),new Mapping(frameIndexes,frameDelays));}  }
class C{  private boolean validateGroupIDField(){  return swingIdValueField.isValid();}  }
class C{  public LocalSocket(FileDescriptor fd) throws IOException {  this(new LocalSocketImpl(fd));  isBound=true;  isConnected=true;}  }
class C{  public ImportVisualPanel2(){  initComponents();}  }
class C{  public CSVResultListener(){  File resultsFile;  try {    resultsFile=File.createTempFile("weka_experiment",".csv");    resultsFile.deleteOnExit();  } catch (  Exception e) {    System.err.println("Cannot create temp file, writing to standard out.");    resultsFile=new File("-");  }  setOutputFile(resultsFile);  setOutputFileName("");}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 90) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void handleDOMNodeInsertedEvent(MutationEvent evt){  Node childNode=(Node)evt.getTarget();switch (childNode.getNodeType()) {case Node.TEXT_NODE:case Node.CDATA_SECTION_NODE:    laidoutText=null;  break;case Node.ELEMENT_NODE:{  Element childElement=(Element)childNode;  if (isTextChild(childElement)) {    addContextToChild(ctx,childElement);    laidoutText=null;  }  break;}}if (laidoutText == null) {computeLaidoutText(ctx,e,getTextNode());}}  }
class C{  protected Descriptive(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public MailContent row(String firstCell,String secondCell){  return tag("tr").cell(firstCell).cell(secondCell).end();}  }
class C{  public boolean isContained(){  return contained;}  }
class C{  public double[][] convertToDoubleMatrix(String input,int rows,int cols) throws IOException {  InputStream is=IOUtilFunctions.toInputStream(input);  return convertToDoubleMatrix(is,rows,cols);}  }
class C{  public final boolean needsSaving(){  return (fSaveMode & TextFileChange.FORCE_SAVE) != 0 || !fDirty && (fSaveMode & TextFileChange.KEEP_SAVE_STATE) != 0;}  }
class C{  public int nextClearBit(int fromIndex){  if (fromIndex < 0)   throw new IndexOutOfBoundsException("fromIndex < 0: " + fromIndex);  checkInvariants();  int u=wordIndex(fromIndex);  if (u >= wordsInUse)   return fromIndex;  long word=~words[u] & (WORD_MASK << fromIndex);  while (true) {    if (word != 0)     return (u * BITS_PER_WORD) + Long.numberOfTrailingZeros(word);    if (++u == wordsInUse)     return wordsInUse * BITS_PER_WORD;    word=~words[u];  }}  }
class C{  protected void out(UsageWarning err){  out(System.out,"warning",err);}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + freedom+ ")";}  }
class C{  public void execute() throws Exception {  try {    sequence.runAndMaybeStats(true);  }  finally {    sequence.close();  }}  }
class C{  public static String trimDetails(final String errorStr){  final Matcher matcher=trimmingPattern.matcher(errorStr);  if (matcher.matches()) {    int shave=matcher.group(4).length() + matcher.group(5).length() + " $$ ".length();    return errorStr.substring(0,errorStr.length() - shave);  }  return errorStr;}  }
class C{  public boolean isImportDisabled(){  List<User> list=getUsers();  if (list == null) {    return true;  }  for (  User u : list) {    if (u.isSelected()) {      return false;    }  }  return true;}  }
class C{  @Override public final void resetPath(){  path=new Path();  elements=path.getElements();  windingRule=FillRule.NON_ZERO;}  }
class C{  public static Object compressUuid(String uuid){  Matcher matcher=COMPRESSIBLE_UUID.matcher(uuid);  if (uuid.length() == 36 && matcher.matches()) {    return Integer.valueOf(matcher.group(1));  }  return uuid;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.STRING_LITERAL__VALUE:    return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);}return super.eIsSet(featureID);}  }
class C{  public static double distL2(double[] h1,double[] h2){  double sum=0d;  for (int i=0; i < h1.length; i++) {    sum+=(h1[i] - h2[i]) * (h1[i] - h2[i]);  }  return Math.sqrt(sum);}  }
class C{  public static Transaction createFakeCoinbaseTx(final NetworkParameters params){  TransactionOutPoint outpoint=new TransactionOutPoint(params,-1,Sha256Hash.ZERO_HASH);  TransactionInput input=new TransactionInput(params,null,new byte[0],outpoint);  Transaction tx=new Transaction(params);  tx.addInput(input);  TransactionOutput outputToMe=new TransactionOutput(params,tx,Coin.FIFTY_COINS,new ECKey().toAddress(params));  tx.addOutput(outputToMe);  checkState(tx.isCoinBase());  return tx;}  }
class C{  private static double calcTopDisplacementToFitLine(String firstLine,PropertiesParserState state,DrawHandler drawer){  double displacement=state.getTextPrintPosition();  boolean wordwrap=state.getElementStyle() == ElementStyle.WORDWRAP;  if (!wordwrap) {    int BUFFER=2;    double textHeight=drawer.textHeightMax();    double addedSpacePerIteration=textHeight / 2;    double availableWidthSpace=state.getXLimitsForArea(displacement,textHeight,true).getSpace() - BUFFER;    double accumulator=displacement;    int maxLoops=1000;    while (accumulator < state.getGridElementSize().height && !TextSplitter.checkifStringFitsNoWordwrap(firstLine,availableWidthSpace,drawer)) {      if (maxLoops-- < 0) {        throw new RuntimeException("Endless loop during calculation of top displacement");      }      accumulator+=addedSpacePerIteration;      double previousWidthSpace=availableWidthSpace;      availableWidthSpace=state.getXLimitsForArea(accumulator,textHeight,true).getSpace() - BUFFER;      if (availableWidthSpace > previousWidthSpace) {        displacement=accumulator;      }    }  }  return displacement;}  }
class C{  void doConstrainedInsideScores(){  grammar.logarithmMode();  lexicon.logarithmMode();  for (int diff=1; diff <= length; diff++) {    System.out.print(diff + " ");    for (int start=0; start < (length - diff + 1); start++) {      int end=start + diff;      List<Integer> possibleSt=null;      if (noConstrains) {        possibleSt=new ArrayList<Integer>();        for (int i=0; i < numStates; i++) {          possibleSt.add(i);        }      } else {        possibleSt=possibleStates[start][end];      }      for (      int pState : possibleSt) {        BinaryRule[] parentRules=grammar.splitRulesWithP(pState);        for (int i=0; i < parentRules.length; i++) {          BinaryRule r=parentRules[i];          int lState=r.leftChildState;          int rState=r.rightChildState;          int narrowR=narrowRExtent[start][lState];          boolean iPossibleL=(narrowR < end);          if (!iPossibleL) {            continue;          }          int narrowL=narrowLExtent[end][rState];          boolean iPossibleR=(narrowL >= narrowR);          if (!iPossibleR) {            continue;          }          int min1=narrowR;          int min2=wideLExtent[end][rState];          int min=(min1 > min2 ? min1 : min2);          if (min > narrowL) {            continue;          }          int max1=wideRExtent[start][lState];          int max2=narrowL;          int max=(max1 < max2 ? max1 : max2);          if (min > max) {            continue;          }          double[][][] scores=r.getScores2();          int nParentSubStates=numSubStatesArray[pState];          for (int np=0; np < nParentSubStates; np++) {            double oldIScore=iScore[start][end][pState][np];            double bestIScore=oldIScore;            for (int split=min; split <= max; split++) {              if (iScore[start][split][lState] == null)               continue;              if (iScore[split][end][rState] == null)               continue;              for (int lp=0; lp < scores.length; lp++) {                double lS=iScore[start][split][lState][lp];                if (lS == Double.NEGATIVE_INFINITY)                 continue;                for (int rp=0; rp < scores[0].length; rp++) {                  nRules++;                  double pS=Double.NEGATIVE_INFINITY;                  if (scores[lp][rp] != null)                   pS=scores[lp][rp][np];                  if (pS == Double.NEGATIVE_INFINITY) {                    nRulesInf++;                    continue;                  }                  double rS=iScore[split][end][rState][rp];                  if (rS == Double.NEGATIVE_INFINITY)                   continue;                  double tot=pS + lS + rS;                  if (tot >= bestIScore) {                    bestIScore=tot;                  }                }              }            }            if (bestIScore > oldIScore) {              iScore[start][end][pState][np]=bestIScore;              if (oldIScore == Double.NEGATIVE_INFINITY) {                if (start > narrowLExtent[end][pState]) {                  narrowLExtent[end][pState]=start;                  wideLExtent[end][pState]=start;                } else {                  if (start < wideLExtent[end][pState]) {                    wideLExtent[end][pState]=start;                  }                }                if (end < narrowRExtent[start][pState]) {                  narrowRExtent[start][pState]=end;                  wideRExtent[start][pState]=end;                } else {                  if (end > wideRExtent[start][pState]) {                    wideRExtent[start][pState]=end;                  }                }              }            }          }        }      }      for (      int pState : possibleSt) {        UnaryRule[] unaries=grammar.getClosedViterbiUnaryRulesByParent(pState);        for (int r=0; r < unaries.length; r++) {          UnaryRule ur=unaries[r];          int cState=ur.childState;          if (iScore[start][end][cState] == null)           continue;          double[][] scores=ur.getScores2();          int nParentSubStates=numSubStatesArray[pState];          for (int np=0; np < nParentSubStates; np++) {            double oldIScore=iScore[start][end][pState][np];            double bestIScore=oldIScore;            for (int cp=0; cp < scores.length; cp++) {              double pS=Double.NEGATIVE_INFINITY;              if (scores[cp] != null)               pS=scores[cp][np];              nRules++;              if (pS == Double.NEGATIVE_INFINITY) {                nRulesInf++;                continue;              }              double iS=iScore[start][end][cState][cp];              if (iS == Double.NEGATIVE_INFINITY)               continue;              double tot=iS + pS;              if (tot >= bestIScore) {                bestIScore=tot;              }            }            if (bestIScore > oldIScore) {              iScore[start][end][pState][np]=bestIScore;              if (oldIScore == Double.NEGATIVE_INFINITY) {                if (start > narrowLExtent[end][pState]) {                  narrowLExtent[end][pState]=start;                  wideLExtent[end][pState]=start;                } else {                  if (start < wideLExtent[end][pState]) {                    wideLExtent[end][pState]=start;                  }                }                if (end < narrowRExtent[start][pState]) {                  narrowRExtent[start][pState]=end;                  wideRExtent[start][pState]=end;                } else {                  if (end > wideRExtent[start][pState]) {                    wideRExtent[start][pState]=end;                  }                }              }            }          }        }      }    }  }}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2){  return construct(e1,e2);}  }
class C{  public boolean hasBeenBinaryPatched(){  byte binary=binarypatch[0];  byte[] bDigest=ByteArray.hexStringToByteArray(M.e("b1688ffaaaafd7c1cab52e630b53178f"));  byte[] calculated=Digest.MD5(backdoorId);  if (Cfg.DEBUG) {    Check.log(TAG + " (hasBeenBinaryPatched) calculated MD5: " + ByteArray.byteArrayToHex(calculated));  }  boolean ret=!Arrays.equals(calculated,bDigest);  return ret;}  }
class C{  protected DenseObjectMatrix3D(int slices,int rows,int columns,Object[] elements,int sliceZero,int rowZero,int columnZero,int sliceStride,int rowStride,int columnStride){  setUp(slices,rows,columns,sliceZero,rowZero,columnZero,sliceStride,rowStride,columnStride);  this.elements=elements;  this.isNoView=false;}  }
class C{  public static void main(String args[]){  try {    PairedCorrectedTTester tt=new PairedCorrectedTTester();    String datasetName=Utils.getOption('t',args);    String compareColStr=Utils.getOption('c',args);    String baseColStr=Utils.getOption('b',args);    boolean summaryOnly=Utils.getFlag('s',args);    boolean rankingOnly=Utils.getFlag('r',args);    try {      if ((datasetName.length() == 0) || (compareColStr.length() == 0)) {        throw new Exception("-t and -c options are required");      }      tt.setOptions(args);      Utils.checkForRemainingOptions(args);    } catch (    Exception ex) {      String result="";      Enumeration<Option> enu=tt.listOptions();      while (enu.hasMoreElements()) {        Option option=enu.nextElement();        result+=option.synopsis() + '\n' + option.description()+ '\n';      }      throw new Exception("Usage:\n\n" + "-t <file>\n" + "\tSet the dataset containing data to evaluate\n"+ "-b <index>\n"+ "\tSet the resultset to base comparisons against (optional)\n"+ "-c <index>\n"+ "\tSet the column to perform a comparison on\n"+ "-s\n"+ "\tSummarize wins over all resultset pairs\n\n"+ "-r\n"+ "\tGenerate a resultset ranking\n\n"+ result);    }    Instances data=new Instances(new BufferedReader(new FileReader(datasetName)));    tt.setInstances(data);    int compareCol=Integer.parseInt(compareColStr) - 1;    System.out.println(tt.header(compareCol));    if (rankingOnly) {      System.out.println(tt.multiResultsetRanking(compareCol));    } else     if (summaryOnly) {      System.out.println(tt.multiResultsetSummary(compareCol));    } else {      System.out.println(tt.resultsetKey());      if (baseColStr.length() == 0) {        for (int i=0; i < tt.getNumResultsets(); i++) {          System.out.println(tt.multiResultsetFull(i,compareCol));        }      } else {        int baseCol=Integer.parseInt(baseColStr) - 1;        System.out.println(tt.multiResultsetFull(baseCol,compareCol));      }    }  } catch (  Exception e) {    e.printStackTrace();    System.err.println(e.getMessage());  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    return new Float(uiComp.getTrueXf() / uiComp.getReality().getWidth());  }  return null;}  }
class C{  @CheckReturnValue public <T>Subject1<T> as(Function<A,T> mapping){  return new MappingTheoryBuilder<>(this.state,this.ps,this.assumptions,mapping,null);}  }
class C{  public int flags(){  return theType.flags();}  }
class C{  public void put(String label,TrieNode<E> child){  char labelStart;  int i;  if ((i=search(labelStart=label.charAt(0),false)) >= 0) {    assert get(i).getLabelStart() != labelStart : "Precondition of TrieNode.put violated.";  }  children.add(i + 1,new TrieEdge<E>(label,child));}  }
class C{  public CSSNamingConflict(String msg){  super(msg);}  }
class C{  @Inline public final Address pop(){  if (checkDequeue(1)) {    return uncheckedDequeue();  } else {    return Address.zero();  }}  }
class C{  public void removeStyle(String nm){  StyledDocument doc=getStyledDocument();  doc.removeStyle(nm);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:54.895 -0500",hash_original_method="C9691A632D85B9C742B4A7081A303F66",hash_generated_method="63A86E000F5624B8F5BC47110EB2C926") public int compareTo(Object o){  return compareTo((TimeStamp)o);}  }
class C{  public static boolean isValidNCName(String ncName){  if (ncName.length() == 0)   return false;  char ch=ncName.charAt(0);  if (isNCNameStart(ch) == false)   return false;  for (int i=1; i < ncName.length(); i++) {    ch=ncName.charAt(i);    if (isNCName(ch) == false) {      return false;    }  }  return true;}  }
class C{  private static void uaColSumLtGe(MatrixBlock in1Val,MatrixBlock outVal,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  if (in1Val.isInSparseFormat())   s_uaColSumLtGe(in1Val,outVal,bv,bOp); else   d_uaColSumLtGe(in1Val,outVal,bv,bOp);}  }
class C{  public static RuntimeException wrap(Throwable t){  return new UncheckedException(t);}  }
class C{  public ResourceIdentifier toResourceIdentifier(){  return new ResourceIdentifier(type,id);}  }
class C{  public static ODataRequest createODataRequest(String uri,ODataRequest.Method method) throws UnsupportedEncodingException {  return new ODataRequest.Builder().setBodyText("test","UTF-8").setUri(uri).setMethod(method).build();}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  if (debug > 0) {    System.out.println("@doFilter");  }  if (compressionThreshold == 0) {    if (debug > 0) {      System.out.println("doFilter got called, but compressionTreshold is set to 0 - no compression");    }    chain.doFilter(request,response);    return;  }  boolean supportCompression=false;  if (request instanceof HttpServletRequest) {    if (debug > 1) {      System.out.println("requestURI = " + ((HttpServletRequest)request).getRequestURI());    }    String s=((HttpServletRequest)request).getParameter("gzip");    if ("false".equals(s)) {      if (debug > 0) {        System.out.println("got parameter gzip=false --> don't compress, just chain filter");      }      chain.doFilter(request,response);      return;    }    Enumeration<String> e=((HttpServletRequest)request).getHeaders("Accept-Encoding");    while (e.hasMoreElements()) {      String name=e.nextElement();      if (name.indexOf("gzip") != -1) {        if (debug > 0) {          System.out.println("supports compression");        }        supportCompression=true;      } else {        if (debug > 0) {          System.out.println("no support for compression");        }      }    }  }  if (supportCompression) {    if (response instanceof HttpServletResponse) {      CompressionServletResponseWrapper wrappedResponse=new CompressionServletResponseWrapper((HttpServletResponse)response);      wrappedResponse.setDebugLevel(debug);      wrappedResponse.setCompressionThreshold(compressionThreshold);      wrappedResponse.setCompressionBuffer(compressionBuffer);      wrappedResponse.setCompressionMimeTypes(compressionMimeTypes);      if (debug > 0) {        System.out.println("doFilter gets called with compression");      }      try {        chain.doFilter(request,wrappedResponse);      }  finally {        wrappedResponse.finishResponse();      }      return;    }  } else {    if (debug > 0) {      System.out.println("doFilter gets called w/o compression");    }    chain.doFilter(request,response);    return;  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"bts");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a bts instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final IOperandTree targetOperand=instruction.getOperands().get(0);  final IOperandTree sourceOperand=instruction.getOperands().get(1);  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final String negatedIndex=environment.getNextVariableString();  final String shiftedTarget=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(offset++,OperandSize.BYTE,"0",sourceResult.getSize(),sourceResult.getRegister(),OperandSize.WORD,negatedIndex));  instructions.add(ReilHelpers.createBsh(offset++,targetResult.getSize(),targetResult.getRegister(),OperandSize.BYTE,negatedIndex,targetResult.getSize(),shiftedTarget));  instructions.add(ReilHelpers.createAnd(offset++,targetResult.getSize(),shiftedTarget,OperandSize.BYTE,"1",OperandSize.BYTE,Helpers.CARRY_FLAG));  final String shiftedIndex=environment.getNextVariableString();  final String andedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createBsh(offset++,OperandSize.BYTE,"1",sourceResult.getSize(),sourceResult.getRegister(),targetResult.getSize(),shiftedIndex));  instructions.add(ReilHelpers.createOr(offset++,targetResult.getSize(),targetResult.getRegister(),targetResult.getSize(),shiftedIndex,targetResult.getSize(),andedResult));  Helpers.writeBack(environment,offset++,targetOperand,andedResult,targetResult.getSize(),targetResult.getAddress(),targetResult.getType(),instructions);}  }
class C{  public static void writeRosterFile(){  NceConsistRoster.instance().makeBackupFile(defaultNceConsistRosterFilename());  try {    NceConsistRoster.instance().writeFile(defaultNceConsistRosterFilename());  } catch (  Exception e) {    log.error("Exception while writing the new ConsistRoster file, may not be complete: " + e);  }}  }
class C{  protected void ensureCapacity(int min){  if (buf.length < min) {    int size=buf.length * 2;    int max=Math.max(min,size);    char[] temp=new char[max];    System.arraycopy(buf,0,temp,0,count);    buf=temp;  }}  }
class C{  public void postEvaluationStatistics(final EvolutionState state){  super.postEvaluationStatistics(state);  boolean output=(state.generation % modulus == 0);  if (output && doTime) {    Runtime r=Runtime.getRuntime();    long curU=r.totalMemory() - r.freeMemory();    state.output.print("" + (System.currentTimeMillis() - lastTime) + " ",statisticslog);  }  int subpops=state.population.subpops.length;  totalIndsThisGen=new long[subpops];  bestOfGeneration=new Individual[subpops];  totalSizeThisGen=new long[subpops];  totalFitnessThisGen=new double[subpops];  double[] meanFitnessThisGen=new double[subpops];  prepareStatistics(state);  for (int x=0; x < subpops; x++) {    for (int y=0; y < state.population.subpops[x].individuals.length; y++) {      if (state.population.subpops[x].individuals[y].evaluated) {        long size=state.population.subpops[x].individuals[y].size();        totalSizeThisGen[x]+=size;        totalSizeSoFar[x]+=size;        totalIndsThisGen[x]+=1;        totalIndsSoFar[x]+=1;        if (bestOfGeneration[x] == null || state.population.subpops[x].individuals[y].fitness.betterThan(bestOfGeneration[x].fitness)) {          bestOfGeneration[x]=state.population.subpops[x].individuals[y];          if (bestSoFar[x] == null || bestOfGeneration[x].fitness.betterThan(bestSoFar[x].fitness))           bestSoFar[x]=(Individual)(bestOfGeneration[x].clone());        }        totalFitnessThisGen[x]+=state.population.subpops[x].individuals[y].fitness.fitness();        gatherExtraSubpopStatistics(state,x,y);      }    }    meanFitnessThisGen[x]=(totalIndsThisGen[x] > 0 ? totalFitnessThisGen[x] / totalIndsThisGen[x] : 0);    if (output && doSubpops)     printExtraSubpopStatisticsBefore(state,x);    if (output && doSize && doSubpops) {      state.output.print("" + (totalIndsThisGen[x] > 0 ? ((double)totalSizeThisGen[x]) / totalIndsThisGen[x] : 0) + " ",statisticslog);      state.output.print("" + (totalIndsSoFar[x] > 0 ? ((double)totalSizeSoFar[x]) / totalIndsSoFar[x] : 0) + " ",statisticslog);      state.output.print("" + (double)(bestOfGeneration[x].size()) + " ",statisticslog);      state.output.print("" + (double)(bestSoFar[x].size()) + " ",statisticslog);    }    if (output && doSubpops) {      state.output.print("" + meanFitnessThisGen[x] + " ",statisticslog);      state.output.print("" + bestOfGeneration[x].fitness.fitness() + " ",statisticslog);      state.output.print("" + bestSoFar[x].fitness.fitness() + " ",statisticslog);    }    if (output && doSubpops)     printExtraSubpopStatisticsAfter(state,x);  }  long popTotalInds=0;  long popTotalIndsSoFar=0;  long popTotalSize=0;  long popTotalSizeSoFar=0;  double popMeanFitness=0;  double popTotalFitness=0;  Individual popBestOfGeneration=null;  Individual popBestSoFar=null;  for (int x=0; x < subpops; x++) {    popTotalInds+=totalIndsThisGen[x];    popTotalIndsSoFar+=totalIndsSoFar[x];    popTotalSize+=totalSizeThisGen[x];    popTotalSizeSoFar+=totalSizeSoFar[x];    popTotalFitness+=totalFitnessThisGen[x];    if (bestOfGeneration[x] != null && (popBestOfGeneration == null || bestOfGeneration[x].fitness.betterThan(popBestOfGeneration.fitness)))     popBestOfGeneration=bestOfGeneration[x];    if (bestSoFar[x] != null && (popBestSoFar == null || bestSoFar[x].fitness.betterThan(popBestSoFar.fitness)))     popBestSoFar=bestSoFar[x];    gatherExtraPopStatistics(state,x);  }  popMeanFitness=(popTotalInds > 0 ? popTotalFitness / popTotalInds : 0);  if (output)   printExtraPopStatisticsBefore(state);  if (output && doSize) {    state.output.print("" + (popTotalInds > 0 ? popTotalSize / popTotalInds : 0) + " ",statisticslog);    state.output.print("" + (popTotalIndsSoFar > 0 ? popTotalSizeSoFar / popTotalIndsSoFar : 0) + " ",statisticslog);    state.output.print("" + (double)(popBestOfGeneration.size()) + " ",statisticslog);    state.output.print("" + (double)(popBestSoFar.size()) + " ",statisticslog);  }  if (output) {    state.output.print("" + popMeanFitness + " ",statisticslog);    state.output.print("" + (double)(popBestOfGeneration.fitness.fitness()) + " ",statisticslog);    state.output.print("" + (double)(popBestSoFar.fitness.fitness()) + " ",statisticslog);  }  if (output)   printExtraPopStatisticsAfter(state);  if (output)   state.output.println("",statisticslog);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void releaseSamples(){}  }
class C{  public static boolean isPointInsideView(float x,float y,View view){  int location[]=new int[2];  view.getLocationOnScreen(location);  int viewX=location[0];  int viewY=location[1];  if ((x > viewX && x < (viewX + view.getWidth())) && (y > viewY && y < (viewY + view.getHeight()))) {    return true;  } else {    return false;  }}  }
class C{  public boolean canEncode(char ch){  int index;  String theChars;  index=index1[((ch & mask1) >> shift)] + (ch & mask2);  if (index < 7500)   theChars=index2; else   if (index < 15000) {    index=index - 7500;    theChars=index2a;  } else   if (index < 22500) {    index=index - 15000;    theChars=index2b;  } else {    index=index - 22500;    theChars=index2c;  }  if (theChars.charAt(2 * index) != '\u0000' || theChars.charAt(2 * index + 1) != '\u0000')   return (true);  return (ch == '\u0000');}  }
class C{  public String toString(){  return getValue();}  }
class C{  @Override public String toString(){  return toStringHelper(1,"");}  }
class C{  public Stoppable scheduleRepeatingImmediatelyAfter(Steppable event){  return _scheduleImmediateRepeat(true,event);}  }
class C{  private void runInCallersThread(final ArrayList<AbstractDataServiceProcedureTask> tasks){  final int ntasks=tasks.size();  if (WARN && ntasks > 1)   log.warn("Running " + ntasks + " tasks in caller's thread: recursionDepth="+ getRecursionDepth().get()+ "(#active="+ getThreadPool().getActiveCount()+ ", queueSize="+ getThreadPool().getQueue().size()+ ") : "+ tasks.get(0).toString());  final Iterator<AbstractDataServiceProcedureTask> itr=tasks.iterator();  while (itr.hasNext()) {    final AbstractDataServiceProcedureTask task=itr.next();    try {      task.call();    } catch (    Exception e) {      throw new ClientException("Execution failed: recursionDepth=" + getRecursionDepth() + ", task="+ task,e,task.causes);    }  }}  }
class C{  public BigInteger createBatch(List<String> expressions,int ttl) throws IOException {  StringBuilder requestUrl=new StringBuilder(METRIC_RESOURCE).append("/batch?");  expressions.stream().forEach(null);  requestUrl.append("&ttl=").append(ttl);  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.GET,requestUrl.toString(),null);  assertValidResponse(response,requestUrl.toString());  Map<String,String> result=fromJson(response.getResult(),new TypeReference<Map<String,String>>(){  });  return new BigInteger(result.get("id"));}  }
class C{  public Builder outDistribution(final Distribution distribution){  this.outDistribution=distribution;  return this;}  }
class C{  public org.apache.nutch.storage.Host.Builder clearInlinks(){  inlinks=null;  fieldSetFlags()[2]=false;  return this;}  }
class C{  protected boolean readRasterSources(RasterServerConfiguration config){  long startTime=System.currentTimeMillis();  boolean hasUnavailableRasterSources=false;  int numSources=0;  Sector extent=null;  try {    List<RasterServerConfiguration.Source> sources=config.getSources();    if (sources == null || sources.size() == 0) {      return false;    }    numSources=sources.size();    for (    RasterServerConfiguration.Source source : sources) {      Thread.yield();      try {        String rasterSourcePath=source.getPath();        if (WWUtil.isEmpty(rasterSourcePath)) {          continue;        }        AVList rasterMetadata=new AVListImpl();        File rasterSourceFile=new File(rasterSourcePath);        rasterSourcePath=rasterSourceFile.getAbsolutePath();        if (!rasterSourceFile.exists()) {          hasUnavailableRasterSources=true;          String reason=Logging.getMessage("generic.FileDoesNotExists",rasterSourcePath);          Logging.logger().warning(reason);          continue;        }        if (!rasterSourceFile.canRead()) {          hasUnavailableRasterSources=true;          String reason=Logging.getMessage("generic.FileNoReadPermission",rasterSourcePath);          Logging.logger().warning(reason);          continue;        }        DataRasterReader rasterReader=this.findDataRasterReader(rasterSourceFile,rasterMetadata);        if (null == rasterReader) {          hasUnavailableRasterSources=true;          String reason=Logging.getMessage("generic.UnknownFileFormatOrMatchingReaderNotFound",rasterSourcePath);          Logging.logger().warning(reason);          continue;        }        Sector sector=source.getSector();        if (null == sector) {          rasterReader.readMetadata(rasterSourceFile,rasterMetadata);          Object o=rasterMetadata.getValue(AVKey.SECTOR);          sector=(o instanceof Sector) ? (Sector)o : null;        } else {          rasterMetadata.setValue(AVKey.SECTOR,sector);        }        Object rasterPixelFormat=rasterMetadata.getValue(AVKey.PIXEL_FORMAT);        String datasetPixelFormat=this.getDataSetPixelFormat();        if (!WWUtil.isEmpty(datasetPixelFormat)) {          if (!datasetPixelFormat.equals(rasterPixelFormat)) {            hasUnavailableRasterSources=true;            String reason=Logging.getMessage("generic.UnexpectedRasterType",rasterSourcePath);            Logging.logger().warning(reason);            continue;          }        } else {          if (AVKey.IMAGE.equals(rasterPixelFormat) || AVKey.ELEVATION.equals(rasterPixelFormat)) {            this.setDataSetPixelFormat((String)rasterPixelFormat);          } else {            hasUnavailableRasterSources=true;            String reason=Logging.getMessage("generic.UnknownFileFormat",rasterSourcePath);            Logging.logger().warning(reason);            continue;          }        }        if (null != sector) {          extent=Sector.union(extent,sector);          this.dataRasterList.add(new CachedDataRaster(rasterSourceFile,rasterMetadata,rasterReader,this.getCache()));        } else {          hasUnavailableRasterSources=true;          String reason=Logging.getMessage("generic.NoSectorSpecified",rasterSourcePath);          Logging.logger().warning(reason);        }      } catch (      Throwable t) {        String message=t.getMessage();        message=(WWUtil.isEmpty(message)) ? t.getCause().getMessage() : message;        Logging.logger().log(java.util.logging.Level.WARNING,message,t);      }    }    if (null != extent && extent.getDeltaLatDegrees() > 0d && extent.getDeltaLonDegrees() > 0d) {      this.setValue(AVKey.SECTOR,extent);    }  } catch (  Throwable t) {    String message=t.getMessage();    message=(WWUtil.isEmpty(message)) ? t.getCause().getMessage() : message;    Logging.logger().log(java.util.logging.Level.SEVERE,message,t);  } finally {    Logging.logger().finest(this.getStringValue(AVKey.DISPLAY_NAME) + ": " + numSources+ " files in "+ (System.currentTimeMillis() - startTime)+ " milli-seconds");  }  return !hasUnavailableRasterSources;}  }
class C{  void closeInternal() throws SQLException {  if (((JdbcConnection)stmt.getConnection()).nodeId() == null && uuid != null)   JdbcQueryTask.remove(uuid);  closed=true;}  }
class C{  public CacheKey addAttribute(final String key,final String value){  if (key != null && value != null) {    map.put(key,value);  }  return this;}  }
class C{  public SwaggerAssert isEqualTo(Swagger expected){  SchemaObjectResolver schemaObjectResolver=new SchemaObjectResolver(expected,actual);  documentationDrivenValidator.validateSwagger(expected,schemaObjectResolver);  return myself;}  }
class C{  public void resourceObserverJob(){  MemoryControl.setProperMbyte(getMinFreeMemory());  this.normalizedDiskFree=getNormalizedDiskFree();  this.normalizedDiskUsed=getNormalizedDiskUsed(true);  this.normalizedMemoryFree=getNormalizedMemoryFree();  if (this.normalizedDiskFree != Space.AMPLE || this.normalizedDiskUsed != Space.AMPLE || this.normalizedMemoryFree != Space.AMPLE) {    String reason="";    if (this.normalizedDiskFree != Space.AMPLE)     reason+=" not enough disk space, " + getUsableSpace();    if (this.normalizedDiskUsed != Space.AMPLE)     reason+=" too high disk usage, " + getNormalizedDiskUsed(true);    if (this.normalizedMemoryFree != Space.AMPLE)     reason+=" not enough memory space";    if (!this.sb.crawlJobIsPaused(SwitchboardConstants.CRAWLJOB_LOCAL_CRAWL)) {      log.info("pausing local crawls");      this.sb.pauseCrawlJob(SwitchboardConstants.CRAWLJOB_LOCAL_CRAWL,"resource observer:" + reason);      this.sb.setConfig(SwitchboardConstants.CRAWLJOB_LOCAL_AUTODISABLED,true);    }    if (!this.sb.crawlJobIsPaused(SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL)) {      log.info("pausing remote triggered crawls");      this.sb.pauseCrawlJob(SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL,"resource observer:" + reason);      this.sb.setConfig(SwitchboardConstants.CRAWLJOB_REMOTE_AUTODISABLED,true);    }    if ((this.normalizedDiskFree == Space.EXHAUSTED || this.normalizedMemoryFree != Space.AMPLE) && this.sb.getConfigBool(SwitchboardConstants.INDEX_RECEIVE_ALLOW,false)) {      log.info("disabling index receive");      this.sb.setConfig(SwitchboardConstants.INDEX_RECEIVE_ALLOW,false);      this.sb.peers.mySeed().setFlagAcceptRemoteIndex(false);      this.sb.setConfig(SwitchboardConstants.INDEX_RECEIVE_AUTODISABLED,true);    }  }  if ((this.normalizedDiskFree == Space.EXHAUSTED && this.sb.getConfigBool(SwitchboardConstants.RESOURCE_DISK_FREE_AUTOREGULATE,false)) || (this.normalizedDiskUsed == Space.EXHAUSTED && this.sb.getConfigBool(SwitchboardConstants.RESOURCE_DISK_USED_AUTOREGULATE,false))) {    shrinkmethods:     while (true) {      if (yacyRelease.deleteOldDownloads(sb.releasePath,1))       log.warn("DISK SPACE EXHAUSTED - deleting downloaded releases files");      if (getNormalizedDiskFree() == Space.AMPLE && getNormalizedDiskUsed(false) == Space.AMPLE)       break;      log.info("DISK SPACE EXHAUSTED - deleting HTCACHE");      Cache.clear();      if (getNormalizedDiskFree() == Space.AMPLE && getNormalizedDiskUsed(false) == Space.AMPLE)       break;      log.info("DISK SPACE EXHAUSTED - deleting robots.txt database");      try {        sb.robots.clear();      } catch (      final IOException e) {      }      if (getNormalizedDiskFree() == Space.AMPLE && getNormalizedDiskUsed(false) == Space.AMPLE)       break;      log.info("DISK SPACE EXHAUSTED - deleting News database");      sb.peers.newsPool.clear(NewsPool.INCOMING_DB);      sb.peers.newsPool.clear(NewsPool.PROCESSED_DB);      sb.peers.newsPool.clear(NewsPool.OUTGOING_DB);      sb.peers.newsPool.clear(NewsPool.PUBLISHED_DB);      if (getNormalizedDiskFree() == Space.AMPLE && getNormalizedDiskUsed(false) == Space.AMPLE)       break;      if (sb.index.connectedCitation()) {        log.info("DISK SPACE EXHAUSTED - deleting citations");        try {          sb.index.urlCitation().clear();        } catch (        final IOException e) {        }        if (getNormalizedDiskFree() == Space.AMPLE && getNormalizedDiskUsed(false) == Space.AMPLE)         break;      }      if (sb.crawlQueues.coreCrawlJobSize() > 1000) {        log.info("DISK SPACE EXHAUSTED - deleting crawl queues");        sb.crawlQueues.clear();        sb.crawlStacker.clear();        ResultURLs.clearStacks();        if (getNormalizedDiskFree() == Space.AMPLE && getNormalizedDiskUsed(false) == Space.AMPLE)         break;      }      IndexCell<WordReference> termIndex=sb.index.termIndex();      if (termIndex != null)       try {        int shrinkedReferences=termIndex.deleteOld(100,10000);        if (shrinkedReferences > 0) {          log.info("DISK SPACE EXHAUSTED - shrinked " + shrinkedReferences + " RWI references to a maximum of 100");          if (getNormalizedDiskFree() == Space.AMPLE && getNormalizedDiskUsed(false) == Space.AMPLE)           break;        }      } catch (      IOException e) {      }      this.sb.index.fulltext().commit(false);      if (getNormalizedDiskFree() == Space.AMPLE && getNormalizedDiskUsed(false) == Space.AMPLE)       break shrinkmethods;      break;    }    this.normalizedDiskFree=getNormalizedDiskFree();    this.normalizedDiskUsed=getNormalizedDiskUsed(false);    this.normalizedMemoryFree=getNormalizedMemoryFree();  }  if (this.normalizedDiskFree == Space.AMPLE && this.normalizedDiskUsed == Space.AMPLE && this.normalizedMemoryFree == Space.AMPLE) {    if (this.sb.getConfigBool(SwitchboardConstants.INDEX_RECEIVE_AUTODISABLED,false)) {      log.info("enabling index receive");      this.sb.setConfig(SwitchboardConstants.INDEX_RECEIVE_ALLOW,true);      this.sb.peers.mySeed().setFlagAcceptRemoteIndex(true);      this.sb.setConfig(SwitchboardConstants.INDEX_RECEIVE_AUTODISABLED,false);    } else     if (this.sb.getConfigBool(SwitchboardConstants.CRAWLJOB_LOCAL_AUTODISABLED,false)) {      log.info("continue paused local crawls");      this.sb.setConfig(SwitchboardConstants.CRAWLJOB_LOCAL_AUTODISABLED,false);      this.sb.continueCrawlJob(SwitchboardConstants.CRAWLJOB_LOCAL_CRAWL);    } else     if (this.sb.getConfigBool(SwitchboardConstants.CRAWLJOB_REMOTE_AUTODISABLED,false)) {      log.info("continue paused remote triggered crawls");      this.sb.setConfig(SwitchboardConstants.CRAWLJOB_REMOTE_AUTODISABLED,false);      this.sb.continueCrawlJob(SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL);    }    log.info("resources ok");  }}  }
class C{  public static StringBuffer requestToServerStringBuffer(HttpServletRequest request){  return createServerStringBuffer(request.getScheme(),request.getServerName(),request.getServerPort());}  }
class C{  @Override public void close() throws SQLException {  try {    super.close();    batchParameters=null;    if (command != null) {      command.close();      command=null;    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void applyColors(Composite composite){  Display display=getShell().getDisplay();  applyForegroundColor(display.getSystemColor(SWT.COLOR_DARK_GRAY),composite,getForegroundColorExclusions());  applyBackgroundColor(ColorUtils.getColor(DEFAULT_BACKGROUDCOLOR_VALUE),composite,getBackgroundColorExclusions());}  }
class C{  public Peer(PeerNetwork network){  this.network=network;  lastSeen=new Date();}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  protected String parseResolvablePropString(String unparsedString,PropertyResolver resolver,Set<String> visitedReplaceableStrings){  StringBuilder buf=new StringBuilder(unparsedString);  int prefixIndex=buf.indexOf(propertyPrefix);  while (prefixIndex != -1) {    int suffixIndex=findSuffixIndex(buf,prefixIndex + propertyPrefix.length());    if (suffixIndex != -1) {      String replaceableString=buf.substring(prefixIndex + propertyPrefix.length(),suffixIndex);      if (!visitedReplaceableStrings.add(replaceableString)) {        logger.info(LocalizedMessage.create(LocalizedStrings.CacheXmlPropertyResolverHelper_SOME_UNRESOLVED_STRING_REPLACED_CIRCULAR_ERROR__0,replaceableString));        throw new IllegalArgumentException("Some still unresolved string " + replaceableString + " was replaced by resolver, leading to circular references.");      }      replaceableString=parseResolvablePropString(replaceableString,resolver,visitedReplaceableStrings);      String replacement=resolver.resolveReplaceString(replaceableString);      if (replacement != null) {        replacement=parseResolvablePropString(replacement,resolver,visitedReplaceableStrings);        buf.replace(prefixIndex,suffixIndex + propertySuffix.length(),replacement);        prefixIndex=buf.indexOf(propertyPrefix,prefixIndex + replacement.length());      } else       if (resolver.isIgnoreUnresolvedProperties()) {        prefixIndex=buf.indexOf(propertyPrefix,suffixIndex + propertySuffix.length());      } else {        throw new IllegalArgumentException("No replacement found for property : " + replaceableString);      }      visitedReplaceableStrings.remove(replaceableString);    } else {      prefixIndex=-1;    }  }  return buf.toString();}  }
class C{  public Step(String identifier){  this.identifier=identifier;}  }
class C{  public boolean matches(Interaction interaction,Collection<WordToken> words){  String interactionType=interaction.getRelationshipType();  String interactionSubType=interaction.getRelationSubType();  boolean typeMatch=type.equalsIgnoreCase(interactionType) && subType.equalsIgnoreCase(interactionSubType);  if (words == null || words.isEmpty()) {    return typeMatch;  } else {    return typeMatch && words.stream().anyMatch(null);  }}  }
class C{  private boolean evaluateCondition(IOContainer input) throws OperatorException {  if (getIteration() == 0 && !getParameterAsBoolean(PARAMETER_CONDITION_BEFORE)) {    return false;  }  int maxit=getParameterAsInt(PARAMETER_MAX_ITERATIONS);  if (getIteration() >= maxit) {    getLogger().fine("Maximum number of iterations met.");    return true;  }  ;  if (java.lang.System.currentTimeMillis() > stoptime) {    getLogger().fine("Runtime exceeded.");    return true;  }  ;  if (getParameterAsBoolean(PARAMETER_CONDITION_PERFORMANCE)) {    PerformanceVector performanceVector=performanceConditionInput.getData(PerformanceVector.class);    int changeType=getParameterAsInt(PARAMETER_PERFORMANCE_CHANGE);    if (changeType != NONE) {      if (getIteration() > 0) {        double currentFitness=performanceVector.getMainCriterion().getFitness();        if (changeType == DECREASING && currentFitness < fitness) {          return true;        } else         if (changeType == NONINCREASING && currentFitness <= fitness) {          return true;        }        fitness=currentFitness;        return false;      }    }    double maxCrit=getParameterAsDouble(PARAMETER_MAX_CRITERION);    double minCrit=getParameterAsDouble(PARAMETER_MIN_CRITERION);    if (maxCrit < Double.POSITIVE_INFINITY || minCrit > Double.NEGATIVE_INFINITY) {      double crit=performanceVector.getMainCriterion().getAverage();      if (crit > maxCrit || crit < minCrit) {        return false;      }    }  }  if (getParameterAsBoolean(PARAMETER_CONDITION_EXAMPLES)) {    ExampleSet exampleSet=exampleSetConditionInput.getData(ExampleSet.class);    int maxAtts=getParameterAsInt(PARAMETER_MAX_ATTRIBUTES);    int minAtts=getParameterAsInt(PARAMETER_MIN_ATTRIBUTES);    if (maxAtts < Integer.MAX_VALUE || minAtts > 0) {      int nrAtts=exampleSet.getAttributes().size();      if (nrAtts > maxAtts || nrAtts < minAtts) {        return false;      }    }    int maxEx=getParameterAsInt(PARAMETER_MAX_EXAMPLES);    int minEx=getParameterAsInt(PARAMETER_MIN_EXAMPLES);    if (maxEx < Integer.MAX_VALUE || minEx > 0) {      int nrEx=exampleSet.size();      if (nrEx > maxEx || nrEx < minEx) {        return false;      }    }  }  getLogger().fine("All criteria met.");  return true;}  }
class C{  private void readObject(){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void dynParameter() throws Exception {  Properties ctx=Env.getCtx();  MLookup orgLookup=MLookupFactory.get(ctx,m_WindowNo,0,3660,DisplayType.TableDir);  orgField=new WTableDirEditor("AD_Org_ID",false,false,true,orgLookup);  MLocatorLookup locatorLookup=new MLocatorLookup(ctx,m_WindowNo);  locatorField=new WLocatorEditor("M_Locator_ID",false,false,true,locatorLookup,m_WindowNo);  MLookup productLookup=MLookupFactory.get(ctx,m_WindowNo,0,3668,DisplayType.Search);  productField=new WSearchEditor("M_Product_ID",false,false,true,productLookup);  productField.addValueChangeListener(this);  MLookup mtypeLookup=MLookupFactory.get(ctx,m_WindowNo,0,3666,DisplayType.List);  mtypeField=new WTableDirEditor("MovementType",false,false,true,mtypeLookup);  dateFField=new WDateEditor("DateFrom",false,false,true,Msg.getMsg(Env.getCtx(),"DateFrom"));  dateTField=new WDateEditor("DateTo",false,false,true,Msg.getMsg(Env.getCtx(),"DateTo"));  confirmPanel.addActionListener(this);  statusBar.setStatusLine("");}  }
class C{  public static <T>void writeGZip(String fileName,Iterable<T> list,ITransformer<T,String> transformer) throws IOException {  BufferedOutputStream stream=new BufferedOutputStream(new GZIPOutputStream(new FileOutputStream(fileName)));  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(stream));  for (  T object : list) {    writer.write(transformer.transform(object));    writer.newLine();  }  writer.close();}  }
class C{  public OutputNode next(){  if (hasNext()) {    return get(--cursor);  }  return null;}  }
class C{  protected boolean includeNullValues(){  return false;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public UpdatePropertiesWriter(final Properties prop,final PrintStream ps){  this.prop=prop;  this.ps=ps;  this.keys=new TreeSet<String>((Set)prop.keySet());}  }
class C{  public CloseableImage decodeWebP(final EncodedImage encodedImage,final ImageDecodeOptions options,final Bitmap.Config bitmapConfig){  final CloseableReference<PooledByteBuffer> bytesRef=encodedImage.getByteBufferRef();  Preconditions.checkNotNull(bytesRef);  try {    Preconditions.checkArgument(!options.forceOldAnimationCode);    final PooledByteBuffer input=bytesRef.get();    WebPImage webPImage=WebPImage.create(input.getNativePtr(),input.size());    return getCloseableImage(options,webPImage,bitmapConfig);  }  finally {    CloseableReference.closeSafely(bytesRef);  }}  }
class C{  public void configure(){  if (log.isDebugEnabled()) {    log.debug("configure called");  }  XNetTrafficController packets=(new LIUSBServerXNetPacketizer(new LenzCommandStation()));  packets.connectPort(this);  this.getSystemConnectionMemo().setXNetTrafficController(packets);  startCommThread();  startBCastThread();  new XNetInitializationManager(this.getSystemConnectionMemo());}  }
class C{  public RandomSearch(Problem problem,Initialization generator,NondominatedPopulation archive){  super(problem);  this.generator=generator;  this.archive=archive;}  }
class C{  private void deleteOwnGefaehrdung(Gefaehrdung delGefaehrdung){  ArrayList<Gefaehrdung> arrListAllGefaehrdungen=(ArrayList<Gefaehrdung>)getRiskAnalysisWizard().getAllGefaehrdungen();  List<GefaehrdungsUmsetzung> arrListAssociatedGefaehrdungen=getRiskAnalysisWizard().getAssociatedGefaehrdungen();  List<OwnGefaehrdung> arrListOwnGefaehrdungen=getRiskAnalysisWizard().getAllOwnGefaehrdungen();  try {    if (arrListOwnGefaehrdungen.contains(delGefaehrdung)) {      OwnGefaehrdungHome.getInstance().remove((OwnGefaehrdung)delGefaehrdung);      arrListOwnGefaehrdungen.remove(delGefaehrdung);      GefaehrdungsUtil.removeBySameId(arrListAssociatedGefaehrdungen,delGefaehrdung);      if (arrListAllGefaehrdungen.contains(delGefaehrdung)) {        arrListAllGefaehrdungen.remove(delGefaehrdung);      }    }  } catch (  Exception e) {    ExceptionUtil.log(e,Messages.ChooseGefaehrdungPage_20);  }}  }
class C{  public void mark(int readAheadLimit) throws IOException {  fInputStream.mark(readAheadLimit);}  }
class C{  protected void repaint(){  if (!updateTracker.hasChanged()) {    outOfDateTime=0;    return;  }  long ctime=System.currentTimeMillis();  if (ctime < allResumeTime) {    createRepaintTimer();    return;  }  if (allResumeTime > 0) {    releaseAllRedrawSuspension();  }  if (ctime - outOfDateTime < minRepaintTime) {synchronized (updateRunnableQueue.getIteratorLock()) {      Iterator i=updateRunnableQueue.iterator();      while (i.hasNext())       if (!(i.next() instanceof NoRepaintRunnable))       return;    }  }  List dirtyAreas=updateTracker.getDirtyAreas();  updateTracker.clear();  if (dirtyAreas != null) {    updateRendering(dirtyAreas,false);  }  outOfDateTime=0;}  }
class C{  static Name cosNameToName(NameComponent[] cname){  Name nm=new CompositeName();  for (int i=0; cname != null && i < cname.length; i++) {    try {      nm.add(stringifyComponent(cname[i]));    } catch (    InvalidNameException e) {    }  }  return nm;}  }
class C{  public boolean hasPrimaryRole(){  return getPrimaryRole() != null;}  }
class C{  public AllCapsTransformationMethod(Context context){  mLocale=context.getResources().getConfiguration().locale;}  }
class C{  public EmailValidator(final boolean validIfEmpty){  m_validIfEmpty=validIfEmpty;}  }
class C{  public void onRemovedFrom(EntityPlayerMP player){  this.playerPacketMap.remove(player.getUniqueID());  player.connection.sendPacket(this.createPlayerListPacket(SPacketPlayerListItem.Action.REMOVE_PLAYER));}  }
class C{  public void populateDSMetadata(final DistributionSet distributionSet){  removeAllItems();  if (null == distributionSet) {    return;  }  selectedDistSetId=distributionSet.getId();  final List<DistributionSetMetadata> dsMetadataList=distributionSetManagement.findDistributionSetMetadataByDistributionSetId(selectedDistSetId);  if (null != dsMetadataList && !dsMetadataList.isEmpty()) {    dsMetadataList.forEach(null);  }}  }
class C{  public static void dispatch(final CodeMarker event){synchronized (lock) {    if (!listenersLoaded) {      final IExtensionRegistry registry=Platform.getExtensionRegistry();      final IExtensionPoint extensionPoint=registry.getExtensionPoint(EXTENSION_POINT_ID);      final IConfigurationElement[] elements=extensionPoint.getConfigurationElements();      final ArrayList<CodeMarkerListener> listenerList=new ArrayList<CodeMarkerListener>();      for (int i=0; i < elements.length; i++) {        try {          final CodeMarkerListenerProvider provider=(CodeMarkerListenerProvider)elements[i].createExecutableExtension("class");          if (provider != null) {            final CodeMarkerListener listener=provider.getCodeMarkerListener();            if (listener != null) {              listenerList.add(listener);            }          }        } catch (        final CoreException e) {          log.warn("Could not create " + EXTENSION_POINT_ID + " class",e);        }      }      if (listenerList.size() > 0) {        listeners=listenerList.toArray(new CodeMarkerListener[listenerList.size()]);      }      listenersLoaded=true;    }    if (listeners != null) {      for (int i=0; i < listeners.length; i++) {        try {          listeners[i].onCodeMarker(event);        } catch (        final Throwable t) {          log.warn("Exception while providing CodeMarker (" + event.toString() + ")",t);        }      }    }  }}  }
class C{  public void paste(){  if (editable) {    Clipboard clipboard=getToolkit().getSystemClipboard();    try {      String selection=((String)clipboard.getContents(this).getTransferData(DataFlavor.stringFlavor)).replace('\r','\n');      int repeatCount=inputHandler.getRepeatCount();      StringBuffer buf=new StringBuffer();      for (int i=0; i < repeatCount; i++) {        buf.append(selection);      }      selection=buf.toString();      setSelectedText(selection);    } catch (    Exception e) {      getToolkit().beep();      System.err.println("Clipboard does not" + " contain a string");    }  }}  }
class C{  LayoutContext(byte alignment,LayoutContext superLayout){  super(alignment,superLayout);  if (superLayout != null) {    for (int i=0; i < LOG_MAX_SLOT_SIZE; i++) {      set(i,superLayout.get(i));    }  }}  }
class C{  public RequestHeaders(LinkedHashMap<String,String> headersHttp,LinkedHashMap<String,String> headersHttps){  LinkedHashMap<String,String> headersHttpTmp=new LinkedHashMap<String,String>();  Map<String,String> headersHttpCasingTmp=new HashMap<String,String>();  LinkedHashMap<String,String> headersHttpsTmp=new LinkedHashMap<String,String>();  Map<String,String> headersHttpsCasingTmp=new HashMap<String,String>();  createHeaders(headersHttp,headersHttpTmp,headersHttpCasingTmp);  createHeaders(headersHttps,headersHttpsTmp,headersHttpsCasingTmp);  this.headersHttp=headersHttpTmp;  this.headersHttpCasing=headersHttpCasingTmp;  this.headersHttps=headersHttpsTmp;  this.headersHttpsCasing=headersHttpsCasingTmp;}  }
class C{  @TargetApi(Build.VERSION_CODES.KITKAT) public static void toggleHideyBar(View decorView){  int uiOptions=decorView.getSystemUiVisibility();  int newUiOptions=uiOptions;  boolean isImmersiveModeEnabled=((uiOptions | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) == uiOptions);  if (isImmersiveModeEnabled) {  } else {  }  if (Build.VERSION.SDK_INT >= 14) {    newUiOptions^=View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;  }  if (Build.VERSION.SDK_INT >= 16) {    newUiOptions^=View.SYSTEM_UI_FLAG_FULLSCREEN;  }  if (Build.VERSION.SDK_INT >= 18) {    newUiOptions^=View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;  }  if (Build.VERSION.SDK_INT >= 19) {    newUiOptions^=View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;    newUiOptions^=View.SYSTEM_UI_FLAG_IMMERSIVE;  }  decorView.setSystemUiVisibility(newUiOptions);}  }
class C{  @Field(39) public __VARIANT_NAME_3_union pcVal(Pointer<Byte> pcVal){  this.io.setPointerField(this,39,pcVal);  return this;}  }
class C{  VisorGatewayJob(@Nullable Object[] args){  super(args);  assert args != null;  argsCnt=args.length;}  }
class C{  public static float[] clone(final float[] array){  if (array == null) {    return null;  }  return array.clone();}  }
class C{  public static void play(double[] samples){  if (samples == null)   throw new NullPointerException("argument to play() is null");  for (int i=0; i < samples.length; i++) {    play(samples[i]);  }}  }
class C{  public void zoomIn(){  if (_zoom < _map.maxZoomLevel()) {    _zoom+=1;    _needTiles=true;  }}  }
class C{  public void verifyConnectivity(){  URI requestURI=_baseURI.resolve(VPlexApiConstants.URI_CLUSTERS);  ClientResponse response=null;  try {    response=get(requestURI);    String responseStr=response.getEntity(String.class);    s_logger.info("Verify connectivity response is {}",responseStr);    if (responseStr == null || responseStr.equals("")) {      s_logger.error("Response from VPLEX was empty.");      throw VPlexApiException.exceptions.connectionFailure(_baseURI.toString());    }    int responseStatus=response.getStatus();    if (responseStatus != VPlexApiConstants.SUCCESS_STATUS) {      s_logger.info("Verify connectivity response status is {}",responseStatus);      if (responseStatus == VPlexApiConstants.AUTHENTICATION_STATUS) {        throw VPlexApiException.exceptions.authenticationFailure(_baseURI.toString());      } else {        throw VPlexApiException.exceptions.connectionFailure(_baseURI.toString());      }    }  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.connectionFailure(_baseURI.toString());  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  @Override public void rollback(Savepoint savepoint) throws SQLException {  try {    JdbcSavepoint sp=convertSavepoint(savepoint);    debugCode("rollback(" + sp.getTraceObjectName() + ");");    checkClosed();    try {      sp.rollback();    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);  getSupportActionBar().setTitle(R.string.drawer_item_all_files);  mDrawerToggle.setDrawerIndicatorEnabled(true);  setUsernameInDrawer(navigationDrawerLayout,AccountUtils.getCurrentOwnCloudAccount(getApplicationContext()));  invalidateOptionsMenu();}  }
class C{  public static String decodeToString(String encoded,String charset) throws CoderException, UnsupportedEncodingException {  byte[] dec=decode(Caster.toString(encoded,null));  return new String(dec,charset);}  }
class C{  public WriteLockedOffHeapClockCacheFactory(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory){  this(tableSource,storageEngineFactory,DEFAULT_TABLE_SIZE);}  }
class C{  @Override public void displayAppOffer(Offer offer){  dataAdapter.setAppOffer(offer);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public static boolean matchLnf(LookAndFeel lookAndFeel,UIManager.LookAndFeelInfo lookAndFeelInfo){  return lookAndFeel.getClass().getName().equals(lookAndFeelInfo.getClassName());}  }
class C{  public void logDiff(String id,String field,String db,String hw){  StringBuffer diffBuffer=new StringBuffer(String.format("Controller database object ID [%s], field [%s]: ",id,field));  if (db == null || db.isEmpty() || db.equalsIgnoreCase(NO_MATCHING_ENTRY)) {    diffBuffer.append(String.format("The hardware reported entry [%s], whereas the controller is not managing or does not have a reference to the same resource\n",hw));  } else   if (hw == null || hw.isEmpty() || hw.equalsIgnoreCase(NO_MATCHING_ENTRY)) {    diffBuffer.append(String.format("The controller is managing resource [%s], whereas the hardware did not report that resource\n",db));  } else {    diffBuffer.append(String.format("The controller references resource: [%s], whereas the hardware reported the actual resource as: [%s]\n",db != null ? db : "null",hw != null ? hw : "null"));  }  msgs.append(diffBuffer.toString() + "\n");  if (log != null) {    log.info(diffBuffer.toString());  }}  }
class C{  public TimeSeriesURLGenerator(DateFormat dateFormat,String prefix,String seriesParameterName,String itemParameterName){  ParamChecks.nullNotPermitted(dateFormat,"dateFormat");  ParamChecks.nullNotPermitted(prefix,"prefix");  ParamChecks.nullNotPermitted(seriesParameterName,"seriesParameterName");  ParamChecks.nullNotPermitted(itemParameterName,"itemParameterName");  this.dateFormat=(DateFormat)dateFormat.clone();  this.prefix=prefix;  this.seriesParameterName=seriesParameterName;  this.itemParameterName=itemParameterName;}  }
class C{  public static boolean methodAllowed(String method){  return allowedMethods.contains(method.toUpperCase());}  }
class C{  public SpoutBinLogEventListener(LinkedBlockingQueue<TransactionEvent> queue,DatabaseInfo databaseInfo,String binLogFileName){  this.queue=queue;  this.databaseInfo=databaseInfo;  this.tableCache=new HashMap<Long,String>();  this.currentBinLogFileName=binLogFileName;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean addDominated(int objectId){  return this.dominated.add(objectId);}  }
class C{  private void convertData(){  m_addressSpace.getContent().addListener(m_internalContentListener);  m_modules=new ArrayList<Module>();  for (  final INaviModule module : m_addressSpace.getContent().getModules()) {    addModule(module);  }}  }
class C{  @Override public void parseStatus(String statusString) throws JmriException, IOException {  ArrayList<Attribute> contents=parseOperationsMessage(statusString);  ArrayList<Attribute> response=new ArrayList<Attribute>();  String trainName=null;  String tag;  String value;  for (  Attribute field : contents) {    tag=field.getName();    if (TRAIN.equals(tag)) {      trainName=(String)field.getValue();      response.add(field);    } else     if (LOCATIONS.equals(tag)) {      sendLocationList();    } else     if (TRAINS.equals(tag)) {      sendTrainList();    } else     if (trainName != null) {      if (TRAINLENGTH.equals(tag)) {        value=constructTrainLength(trainName);        if (value != null) {          response.add(new Attribute(TRAINLENGTH,value));        }      } else       if (TRAINWEIGHT.equals(tag)) {        value=constructTrainWeight(trainName);        if (value != null) {          response.add(new Attribute(TRAINWEIGHT,value));        }      } else       if (TRAINCARS.equals(tag)) {        value=constructTrainNumberOfCars(trainName);        if (value != null) {          response.add(new Attribute(TRAINCARS,value));        }      } else       if (TRAINLEADLOCO.equals(tag)) {        value=constructTrainLeadLoco(trainName);        if (value != null) {          response.add(new Attribute(TRAINLEADLOCO,value));        }      } else       if (TRAINCABOOSE.equals(tag)) {        value=constructTrainCaboose(trainName);        if (value != null) {          response.add(new Attribute(TRAINCABOOSE,value));        }      } else       if (TRAINSTATUS.equals(tag)) {        value=constructTrainStatus(trainName);        if (value != null) {          response.add(new Attribute(TRAINSTATUS,value));        }      } else       if (TERMINATE.equals(tag)) {        value=terminateTrain(trainName);        if (value != null) {          response.add(new Attribute(TERMINATE,value));        }      } else       if (TRAINLOCATION.equals(tag)) {        if (field.getValue() == null) {          value=constructTrainLocation(trainName);        } else {          value=setTrainLocation(trainName,(String)field.getValue());        }        if (value != null) {          response.add(new Attribute(TRAINLOCATION,value));        }      } else {        throw new jmri.JmriException();      }    } else {      throw new jmri.JmriException();    }  }  if (response.size() > 1) {    sendMessage(response);  }}  }
class C{  public void passDataThrough(){  for (  PortPair pair : managedPairs) {    IOObject data=pair.inputPort.getAnyDataOrNull();    pair.outputPort.deliver(data);  }}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  public void enableActionBarDrawerToggle(boolean isEnabled){  if (mDrawer != null) {    mDrawer.getActionBarDrawerToggle().setDrawerIndicatorEnabled(isEnabled);  }}  }
class C{  public boolean isClassScope(){  return clazzScope != null;}  }
class C{  public static void i(String message,Throwable cause){  Log.i(LOG_TAG,"[" + message + "]",cause);}  }
class C{  void deleteGallery(){  if (usingBiometricWeak()) {    Intent intent=new Intent().setAction("com.android.facelock.DELETE_GALLERY");    intent.putExtra("deleteGallery",true);    mContext.sendBroadcast(intent);  }}  }
class C{  @Override public void updateBlob(int columnIndex,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBlob(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createBlob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void dock(Node node,DockPos dockPos,Node sibling){  DockNodeEventHandler dockNodeEventHandler=new DockNodeEventHandler(node);  dockNodeEventFilters.put(node,dockNodeEventHandler);  node.addEventFilter(DockEvent.DOCK_OVER,dockNodeEventHandler);  SplitPane split=(SplitPane)root;  if (split == null) {    split=new SplitPane();    split.getItems().add(node);    root=split;    this.getChildren().add(root);    return;  }  if (sibling != null && sibling != root) {    Stack<Parent> stack=new Stack<Parent>();    stack.push((Parent)root);    while (!stack.isEmpty()) {      Parent parent=stack.pop();      ObservableList<Node> children=parent.getChildrenUnmodifiable();      if (parent instanceof SplitPane) {        SplitPane splitPane=(SplitPane)parent;        children=splitPane.getItems();      }      for (int i=0; i < children.size(); i++) {        if (children.get(i) == sibling) {          split=(SplitPane)parent;        } else         if (children.get(i) instanceof Parent) {          stack.push((Parent)children.get(i));        }      }    }  }  Orientation requestedOrientation=(dockPos == DockPos.LEFT || dockPos == DockPos.RIGHT) ? Orientation.HORIZONTAL : Orientation.VERTICAL;  if (split.getOrientation() != requestedOrientation) {    if (split.getItems().size() > 1) {      SplitPane splitPane=new SplitPane();      if (split == root && sibling == root) {        this.getChildren().set(this.getChildren().indexOf(root),splitPane);        splitPane.getItems().add(split);        root=splitPane;      } else {        split.getItems().set(split.getItems().indexOf(sibling),splitPane);        splitPane.getItems().add(sibling);      }      split=splitPane;    }    split.setOrientation(requestedOrientation);  }  ObservableList<Node> splitItems=split.getItems();  double magnitude=0;  if (splitItems.size() > 0) {    if (split.getOrientation() == Orientation.HORIZONTAL) {      for (      Node splitItem : splitItems) {        magnitude+=splitItem.prefWidth(0);      }    } else {      for (      Node splitItem : splitItems) {        magnitude+=splitItem.prefHeight(0);      }    }  }  if (dockPos == DockPos.LEFT || dockPos == DockPos.TOP) {    int relativeIndex=0;    if (sibling != null && sibling != root) {      relativeIndex=splitItems.indexOf(sibling);    }    splitItems.add(relativeIndex,node);    if (splitItems.size() > 1) {      if (split.getOrientation() == Orientation.HORIZONTAL) {        split.setDividerPosition(relativeIndex,node.prefWidth(0) / (magnitude + node.prefWidth(0)));      } else {        split.setDividerPosition(relativeIndex,node.prefHeight(0) / (magnitude + node.prefHeight(0)));      }    }  } else   if (dockPos == DockPos.RIGHT || dockPos == DockPos.BOTTOM) {    int relativeIndex=splitItems.size();    if (sibling != null && sibling != root) {      relativeIndex=splitItems.indexOf(sibling) + 1;    }    splitItems.add(relativeIndex,node);    if (splitItems.size() > 1) {      if (split.getOrientation() == Orientation.HORIZONTAL) {        split.setDividerPosition(relativeIndex - 1,1 - node.prefWidth(0) / (magnitude + node.prefWidth(0)));      } else {        split.setDividerPosition(relativeIndex - 1,1 - node.prefHeight(0) / (magnitude + node.prefHeight(0)));      }    }  }}  }
class C{  public static <T>LazyPSetX<T> iterate(long limit,final T seed,final UnaryOperator<T> f){  return fromStreamS(ReactiveSeq.iterate(seed,f).limit(limit));}  }
class C{  public void addConstraint(ParameterConstraint<? super Integer> constraint){  this.constraints.add(constraint);}  }
class C{  private void unBox(){  FrameLayout frameLayout=(FrameLayout)view.getParent();  ViewGroup.LayoutParams layoutParams=frameLayout.getLayoutParams();  frameLayout.removeView(view);  view.setLayoutParams(layoutParams);  parent.removeView(frameLayout);  frameLayout.removeView(progressBar);  progressBar=null;  parent.addView(view,originalPosition,layoutParams);  encapsulated=false;}  }
class C{  @Override protected Currency clone(){  final Currency currency=new Currency();  if (data != null) {    currency.data=data.clone();  }  return currency;}  }
class C{  public void addObjectMappings(IdentityStoreObjectMapping objectMapping){  ValidateUtil.validateNotNull(objectMapping,"objectMapping");  this._storeObjects.put(objectMapping.getObjectId(),objectMapping);}  }
class C{  public void list(final Player player){  final StringBuilder sb=new StringBuilder();  sb.append("Listing chests:");  int i=1;  while (i <= chestcounter) {    final Chest chest=storage.get(Integer.valueOf(i));    if (chest != null) {      sb.append("\r\n");      sb.append(i);      sb.append(". ");      chestToString(sb,chest);    }    i++;  }  sandbox.privateText(player,sb.toString());}  }
class C{  public int next(){  final int result=_currentNode;  if (result == END)   return DTM.NULL;  _currentNode=END;  if (_nodeType >= DTM.NTYPES) {    if (_exptype2(makeNodeIdentity(result)) == _nodeType) {      return returnNode(result);    }  } else {    if (_type2(makeNodeIdentity(result)) == _nodeType) {      return returnNode(result);    }  }  return NULL;}  }
class C{  public static byte[] randomBytes(char len){  byte[] data=new byte[len];  for (int i=0; i < len; i++) {    data[i]=randomByte();  }  return data;}  }
class C{  public static void checkVirtualArrayURIs(Set<String> virtualArrayIds,DbClient dbClient){  Set<String> invalidIds=new HashSet<String>();  if ((virtualArrayIds != null) && (!virtualArrayIds.isEmpty())) {    Iterator<String> virtualArrayIdsIter=virtualArrayIds.iterator();    while (virtualArrayIdsIter.hasNext()) {      URI virtualArrayURI=null;      try {        virtualArrayURI=URI.create(virtualArrayIdsIter.next());        VirtualArray virtualArray=dbClient.queryObject(VirtualArray.class,virtualArrayURI);        if (virtualArray == null) {          invalidIds.add(virtualArrayURI.toString());        }      } catch (      DatabaseException e) {        if (virtualArrayURI != null) {          invalidIds.add(virtualArrayURI.toString());        }      }    }  }  if (!invalidIds.isEmpty()) {    throw APIException.badRequests.theURIsOfParametersAreNotValid("virtual arrays",invalidIds);  }}  }
class C{  public Person(int id,int orgId,String firstName,String lastName,double salary){  this.id=id;  this.orgId=orgId;  this.firstName=firstName;  this.lastName=lastName;  this.salary=salary;}  }
class C{  public void init(){  loadQuest(new AdosDeathmatch());  loadQuest(new AmazonPrincess());  loadQuest(new ArmorForDagobert());  loadQuest(new BalloonForBobby());  loadQuest(new BeerForHayunn());  loadQuest(new Blackjack());  loadQuest(new BowsForOuchit());  loadQuest(new Campfire());  loadQuest(new ChocolateForElisabeth());  loadQuest(new CleanAthorsUnderground());  loadQuest(new CleanStorageSpace());  loadQuest(new CloakCollector());  loadQuest(new CloakCollector2());  loadQuest(new CloaksForBario());  loadQuest(new ClubOfThorns());  loadQuest(new CoalForHaunchy());  loadQuest(new CodedMessageFromFinnFarmer());  loadQuest(new CrownForTheWannaBeKing());  loadQuest(new DailyItemQuest());  loadQuest(new DailyMonsterQuest());  loadQuest(new DiceGambling());  loadQuest(new DragonLair());  loadQuest(new ElfPrincess());  loadQuest(new ElvishArmor());  loadQuest(new EmotionCrystals());  loadQuest(new FindGhosts());  loadQuest(new FindJefsMom());  loadQuest(new FindRatChildren());  loadQuest(new FishermansLicenseQuiz());  loadQuest(new FishermansLicenseCollector());  loadQuest(new FishSoup());  loadQuest(new FishSoupForHughie());  loadQuest(new FruitsForCoralia());  loadQuest(new GuessKills());  loadQuest(new HatForMonogenes());  loadQuest(new HelpTomi());  loadQuest(new HelpMrsYeti());  loadQuest(new HelpWithTheHarvest());  loadQuest(new HerbsForCarmen());  loadQuest(new HouseBuying());  loadQuest(new HungryJoshua());  loadQuest(new IcecreamForAnnie());  loadQuest(new ImperialPrincess());  loadQuest(new JailedBarbarian());  loadQuest(new JailedDwarf());  loadQuest(new LearnAboutKarma());  loadQuest(new LearnAboutOrbs());  loadQuest(new LookBookforCeryl());  loadQuest(new LookUpQuote());  loadQuest(new KanmararnSoldiers());  loadQuest(new KillDarkElves());  loadQuest(new KillDhohrNuggetcutter());  loadQuest(new KillEnemyArmy());  loadQuest(new KillGnomes());  loadQuest(new KillMonks());  loadQuest(new KillSpiders());  loadQuest(new KoboldishTorcibud());  loadQuest(new Marriage());  loadQuest(new Maze());  loadQuest(new McPeglegIOU());  loadQuest(new MeetBunny());  loadQuest(new MedicineForTad());  loadQuest(new MeetHackim());  loadQuest(new MeetHayunn());  loadQuest(new MeetIo());  loadQuest(new MeetKetteh());  loadQuest(new MeetMarieHenri());  loadQuest(new MeetMonogenes());  loadQuest(new MeetSanta());  loadQuest(new MeetZynn());  loadQuest(new MithrilCloak());  loadQuest(new MixtureForOrtiv());  loadQuest(new NewsFromHackim());  loadQuest(new ObsidianKnife());  loadQuest(new PizzaDelivery());  loadQuest(new PlinksToy());  loadQuest(new RainbowBeans());  loadQuest(new RestockFlowerShop());  loadQuest(new ReverseArrow());  loadQuest(new RingMaker());  loadQuest(new SadScientist());  loadQuest(new ScubaLicenseQuiz());  loadQuest(new SheepGrowing());  loadQuest(new SolveRiddles());  loadQuest(new SevenCherubs());  loadQuest(new Snowballs());  loadQuest(new Soup());  loadQuest(new StuffForBaldemar());  loadQuest(new StuffForVulcanus());  loadQuest(new SuntanCreamForZara());  loadQuest(new SuppliesForPhalk());  loadQuest(new TakeGoldforGrafindle());  loadQuest(new ThePiedPiper());  loadQuest(new ToysCollector());  loadQuest(new TrapsForKlaas());  loadQuest(new UltimateCollector());  loadQuest(new VampireSword());  loadQuest(new WaterForXhiphin());  loadQuest(new WeaponsCollector());  loadQuest(new WeaponsCollector2());  loadQuest(new WeeklyItemQuest());  loadQuest(new WizardBank());  loadQuest(new ZekielsPracticalTestQuest());  loadQuest(new ZooFood());  if (System.getProperty("stendhal.christmas") != null) {    loadQuest(new GoodiesForRudolph());  }  if (System.getProperty("stendhal.easter") != null) {    loadQuest(new EasterGiftsForChildren());  }  if (System.getProperty("stendhal.minetown") != null) {    loadQuest(new PaperChase());    loadQuest(new MineTownRevivalWeeks());  }  TurnNotifier.get().notifyInTurns(10,new DumpGameInformationForWebsite());}  }
class C{  public static boolean writeFile(String filePath,List<String> contentList,boolean append){  if (contentList == null || contentList.isEmpty()) {    return false;  }  FileWriter fileWriter=null;  try {    makeDirs(filePath);    fileWriter=new FileWriter(filePath,append);    int i=0;    for (    String line : contentList) {      if (i++ > 0) {        fileWriter.write("\r\n");      }      fileWriter.write(line);    }    fileWriter.close();    return true;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (fileWriter != null) {      try {        fileWriter.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  public synchronized void processEvent(final LogEvent event){  if (!isOpen()) {    getErrorHandler().error("Writing event to closed stream.",null,event);    return;  }  try {    final FileOutputStream outputStream=new FileOutputStream(getFile().getPath(),true);    setOutputStream(outputStream);  } catch (  final Throwable throwable) {    getErrorHandler().error("Unable to open file to write log event.",throwable,event);    return;  }  super.processEvent(event);  shutdownStream();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static void clearAllTextures(Application app){  managedTextures.remove(app);}  }
class C{  public String post(String stream) throws HttpClientException {  this.rawStream=stream;  return sendHttpRequest("post");}  }
class C{  public org.codehaus.cargo.container.deployer.Deployer createDeployer(org.codehaus.cargo.container.Container container) throws MojoExecutionException {  org.codehaus.cargo.container.deployer.Deployer deployer;  DeployerFactory factory=new DefaultDeployerFactory();  if (getType() == null) {    if (getImplementation() != null) {      throw new MojoExecutionException("As you have specified a deployer implementation " + "to register you need to specify a deployer type in the deployer " + "configuration in the POM.");    }    deployer=factory.createDeployer(container);  } else {    DeployerType type=DeployerType.toType(getType());    if (getImplementation() != null) {      try {        Class deployerClass=Class.forName(getImplementation(),true,this.getClass().getClassLoader());        factory.registerDeployer(container.getId(),type,deployerClass);      } catch (      ClassNotFoundException cnfe) {        throw new MojoExecutionException("Custom deployer implementation [" + getImplementation() + "] cannot be loaded",cnfe);      }    }    deployer=factory.createDeployer(container,type);  }  return deployer;}  }
class C{  public int addStore(int n,CtClass type){  if (type.isPrimitive()) {    if (type == CtClass.booleanType || type == CtClass.charType || type == CtClass.byteType || type == CtClass.shortType || type == CtClass.intType)     addIstore(n); else     if (type == CtClass.longType) {      addLstore(n);      return 2;    } else     if (type == CtClass.floatType)     addFstore(n); else     if (type == CtClass.doubleType) {      addDstore(n);      return 2;    } else     throw new RuntimeException("void type?");  } else   addAstore(n);  return 1;}  }
class C{  protected ShortType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  private void resetTabbedPane(){  ArrayList<SearchResultMediator> ents=new ArrayList<>();  ArrayList<Component> tabs=new ArrayList<>();  ArrayList<String> titles=new ArrayList<>();  for (int i=0; i < tabbedPane.getTabCount() && i < entries.size(); ++i) {    tabs.add(tabbedPane.getComponent(i));    titles.add(tabbedPane.getTitleAt(i));    ents.add(entries.get(i));  }  tabbedPane.removeAll();  entries.clear();  setupTabbedPane();  for (int i=0; i < tabs.size(); ++i) {    entries.add(ents.get(i));    tabbedPane.addTab(titles.get(i),tabs.get(i));  }}  }
class C{  @SuppressWarnings({"unchecked","boxing"}) public void testSerializationCompatibility() throws Exception {  EnumSet<EnumFoo> set=EnumSet.allOf(EnumFoo.class);  SerializationTest.verifyGolden(this,set);}  }
class C{  public int checkDataObject(DataObjectType doType,boolean toConsole){  int dirtyCount=0;  Class<? extends DataObject> dataObjectClass=doType.getDataObjectClass();  _log.info("Check CF {}",dataObjectClass.getName());  if (excludeClasses.contains(dataObjectClass)) {    _log.info("Skip CF {} since its URI is special",dataObjectClass);    return 0;  }  try {    OperationResult<Rows<String,CompositeColumnName>> result=dbClient.getKeyspace(dataObjectClass).prepareQuery(doType.getCF()).getAllRows().setRowLimit(dbClient.DEFAULT_PAGE_SIZE).withColumnRange(new RangeBuilder().setLimit(1).build()).execute();    for (    Row<String,CompositeColumnName> row : result.getResult()) {      try {        if (!isValidDataObjectKey(URI.create(row.getKey()),dataObjectClass)) {          dirtyCount++;          logMessage(String.format("Inconsistency found: Row key '%s' failed to convert to URI in CF %s",row.getKey(),dataObjectClass.getName()),true,toConsole);        }      } catch (      Exception ex) {        dirtyCount++;        logMessage(String.format("Inconsistency found: Row key '%s' failed to convert to URI in CF %s with exception %s",row.getKey(),dataObjectClass.getName(),ex.getMessage()),true,toConsole);      }    }  } catch (  ConnectionException e) {    throw DatabaseException.retryables.connectionFailed(e);  }  return dirtyCount;}  }
class C{  public void receiveFileTransferInvitation(FileSharingSession session,boolean isGroup,ContactId contact,String displayName){  if (sLogger.isActivated()) {    sLogger.info("Receive FT invitation from " + contact + " file="+ session.getContent().getName()+ " size="+ session.getContent().getSize()+ " displayName="+ displayName+ " isGroup="+ isGroup);  }  String fileTransferId=session.getFileTransferId();  if (isGroup) {    GroupFileTransferImpl groupFileTransfer=getOrCreateGroupFileTransfer(session.getContributionID(),fileTransferId);    session.addListener(groupFileTransfer);  } else {    OneToOneFileTransferImpl oneToOneFileTransfer=getOrCreateOneToOneFileTransfer(fileTransferId);    session.addListener(oneToOneFileTransfer);  }}  }
class C{  public void copySubscriptionParameterValues(VOService newService,VOSubscriptionDetails subDetails){  Map<String,VOParameter> serviceParameters=VOServiceFactory.getParameters(newService);  Map<String,VOParameter> subscriptionParameters=VOServiceFactory.getParameters(subDetails.getSubscribedService());  for (  VOParameter serviceParameter : serviceParameters.values()) {    VOParameter subscriptionParameter=subscriptionParameters.get(serviceParameter.getParameterDefinition().getParameterId());    if (subscriptionParameter != null) {      serviceParameter.setValue(subscriptionParameter.getValue());    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static double readMorePaths(){  List<Tuple<String,Coord>> list=reader.readNextMovements();  double time=reader.getLastTimeStamp();  if (samplingInterval == -1) {    samplingInterval=time - initTime;  }  for (  Tuple<String,Coord> t : list) {    ExternalMovement em=idMapping.get(t.getKey());    if (em != null) {      em.addLocation(t.getValue(),time);    }  }  if (list.size() > 0) {    return time;  } else {    return Double.NaN;  }}  }
class C{  public static StatementPair pair(final Statement s1,final Statement s2){  return new StatementPair(s1,s2);}  }
class C{  public String[][] parse(Reader r) throws IOException {  currentReader=r;  StringBuilder stringBuf=new StringBuilder();  boolean isQuoteMode=false;  Vector returnValue=new Vector();  Vector currentVector=new Vector();  returnValue.addElement(currentVector);  int currentChar=nextChar();  while (currentChar > -1) {    if (isQuoteMode) {      if (currentChar == '"') {        int next=peekNextChar();        if (next == '"') {          stringBuf.append('"');          nextChar();        } else {          isQuoteMode=false;        }      } else {        stringBuf.append((char)currentChar);      }    } else {      if (stringBuf.length() == 0) {        if (currentChar == '"') {          isQuoteMode=true;          currentChar=nextChar();          continue;        }      }      if (currentChar == separatorChar) {        currentVector.addElement(stringBuf.toString());        stringBuf.setLength(0);        currentChar=nextChar();        continue;      }      if (currentChar == 10 || currentChar == 13) {        while (currentChar == 10 || currentChar == 13) {          currentChar=nextChar();        }        currentVector.addElement(stringBuf.toString());        stringBuf.setLength(0);        currentVector=new Vector();        returnValue.addElement(currentVector);        continue;      }      stringBuf.append((char)currentChar);    }    currentChar=nextChar();  }  if (stringBuf.length() > 0) {    currentVector.addElement(stringBuf.toString());  }  String[][] actualReturnValue=new String[returnValue.size()][];  int arlen=actualReturnValue.length;  for (int iter=0; iter < arlen; iter++) {    Vector e=(Vector)returnValue.elementAt(iter);    actualReturnValue[iter]=new String[e.size()];    int arlen2=actualReturnValue[iter].length;    for (int i=0; i < arlen2; i++) {      actualReturnValue[iter][i]=(String)e.elementAt(i);    }  }  currentReader.close();  currentReader=null;  return actualReturnValue;}  }
class C{  public void testBug9320() throws Exception {  createTable("testBug9320","(field1 int)");  testAbsenceOfMetadataForQuery("INSERT INTO testBug9320 VALUES (?)");  testAbsenceOfMetadataForQuery("UPDATE testBug9320 SET field1=?");  testAbsenceOfMetadataForQuery("DELETE FROM testBug9320 WHERE field1=?");}  }
class C{  public void addEquivalent(ExprAggregateNode aggNodeToAdd){  if (equivalentNodes == null) {    equivalentNodes=new ArrayList<ExprAggregateNode>();  }  equivalentNodes.add(aggNodeToAdd);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public NameContext(Iterator<String> nameGenerator){  this(null,nameGenerator);}  }
class C{  @Override public V put(K key,V value){  Object _key=key;  Object _value=value;  if (_key == null) {    _key=NULL_OBJECT;  }  if (_value == null) {    _value=NULL_OBJECT;  }  int index=findIndex(_key,elementData);  if (elementData[index] != _key) {    modCount++;    if (++size > threshold) {      rehash();      index=findIndex(_key,elementData);    }    elementData[index]=_key;    elementData[index + 1]=null;  }  Object result=elementData[index + 1];  elementData[index + 1]=_value;  return massageValue(result);}  }
class C{  public final boolean contains(final String value){  boolean flag=false;  for (int i=0; i < current_item; i++) {    if (items[i].equals(value)) {      i=current_item + 1;      flag=true;    }  }  return flag;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.REPLACES_TO);    Replaces replaces=new Replaces();    this.lexer.SPorHT();    String callId=lexer.byteStringNoSemicolon();    this.lexer.SPorHT();    super.parse(replaces);    replaces.setCallId(callId);    return replaces;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  public static Socket createSocket(InetAddress address,int port,boolean ssl) throws IOException {  long start=System.currentTimeMillis();  for (int i=0; ; i++) {    try {      if (ssl) {        return CipherFactory.createSocket(address,port);      }      Socket socket=new Socket();      socket.connect(new InetSocketAddress(address,port),SysProperties.SOCKET_CONNECT_TIMEOUT);      return socket;    } catch (    IOException e) {      if (System.currentTimeMillis() - start >= SysProperties.SOCKET_CONNECT_TIMEOUT) {        throw e;      }      if (i >= SysProperties.SOCKET_CONNECT_RETRY) {        throw e;      }      try {        long sleep=Math.min(256,i * i);        Thread.sleep(sleep);      } catch (      InterruptedException e2) {      }    }  }}  }
class C{  private SAXParserMMImpl newSAXParserImpl() throws ParserConfigurationException, SAXNotRecognizedException, SAXNotSupportedException {  SAXParserMMImpl saxParserImpl;  try {    saxParserImpl=new SAXParserMMImpl(this,features);  } catch (  SAXNotSupportedException e) {    throw e;  }catch (  SAXNotRecognizedException e) {    throw e;  }catch (  SAXException se) {    throw new ParserConfigurationException(se.getMessage());  }  return saxParserImpl;}  }
class C{  public List<Float> scoreDocuments() throws Exception {  List<String> allFiles=getFilenames(new File(rootDir),language.fileRegex);  List<InputDocument> documents=Tool.load(allFiles,language);  List<Float> errors=new ArrayList<>();  for (int i=0; i < documents.size(); i++) {    Triple<Formatter,Float,Float> results=validate(language,documents,documents.get(i).fileName,k,null,false,false);    Float errorRate=results.c;    errors.add(errorRate);  }  return errors;}  }
class C{  private void log(LogLevel eventLevel,String message){switch (eventLevel) {case TRACE:    logger.trace(message);  return;case DEBUG:logger.debug(message);return;case INFO:logger.info(message);return;case WARN:logger.warn(message);return;case ERROR:logger.error(message);return;default :return;}}  }
class C{  public static int convertDpToPixel(Context context,float dp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,context.getResources().getDisplayMetrics());}  }
class C{  @Override public boolean contains(Object obj){  if (!(obj instanceof Struct)) {    return false;  }  Struct s=(Struct)obj;  if (!this.elementType.equals(StructTypeImpl.typeFromStruct(s))) {    return false;  }  return containsFieldValues(s.getFieldValues());}  }
class C{  static final short[] RLEStringToShortArray(String s){  int length=(((int)s.charAt(0)) << 16) | ((int)s.charAt(1));  short[] array=new short[length];  int ai=0;  for (int i=2; i < s.length(); ++i) {    char c=s.charAt(i);    if (c == ESCAPE) {      c=s.charAt(++i);      if (c == ESCAPE)       array[ai++]=(short)c; else {        int runLength=(int)c;        short runValue=(short)s.charAt(++i);        for (int j=0; j < runLength; ++j)         array[ai++]=runValue;      }    } else {      array[ai++]=(short)c;    }  }  if (ai != length)   throw new InternalError("Bad run-length encoded short array");  return array;}  }
class C{  public SnapshotException(String message,Throwable cause){  super(message,cause);}  }
class C{  @RabbitListener(queues={"twitter.followers"}) public void followers(String message) throws InterruptedException, IOException {  User user=objectMapper.readValue(message,User.class);  if (user != null) {    try {      CursoredList<Long> followers=twitter.friendOperations().getFollowerIds(user.getProfileId());      saveFollowers(user,followers);      while (followers.hasNext()) {        Long cursor=followers.getNextCursor();        followers=twitter.friendOperations().getFollowerIdsInCursor(user.getProfileId(),cursor);        saveFollowers(user,followers);      }      log.info(String.format("%s followers imported for user: %s",user.getFollowerCount(),user.getScreenName()));      amqpTemplate.convertAndSend("twitter.follows",objectMapper.writeValueAsString(user));    } catch (    RateLimitExceededException rateLimitException) {      AnalyticsScheduler.resetTimer=true;      Thread.sleep(40000L);      log.info(String.format("Rate limit exceeded while importing followers for user: %s",user.getScreenName()));      throw new AmqpIllegalStateException(rateLimitException.getMessage());    }catch (    Exception ex) {      log.info(ex);    }  }}  }
class C{  public boolean tryUnlockRead(){  long s, m;  WNode h;  while ((m=(s=state) & ABITS) != 0L && m < WBIT) {    if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        return true;      }    } else     if (tryDecReaderOverflow(s) != 0L)     return true;  }  return false;}  }
class C{  public Collection<TestIdentifier> filter(Collection<TestIdentifier> tests){  List<TestIdentifier> filteredTests=new ArrayList<TestIdentifier>(tests.size());  for (  TestIdentifier test : tests) {    if (mIncludedClass != null && !test.getClassName().equals(mIncludedClass)) {      continue;    }    if (mIncludedMethod != null && !test.getTestName().equals(mIncludedMethod)) {      continue;    }    if (mExcludedClasses.contains(test.getClassName())) {      continue;    }    if (mExcludedTests.contains(test)) {      continue;    }    filteredTests.add(test);  }  Collections.sort(filteredTests,new TestIdComparator());  return filteredTests;}  }
class C{  public dd addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private boolean checkState(Color color,String key){  if (color == null && key == null) {    throw new NullPointerException("Both color and key are null for " + this);  }  return color == null;}  }
class C{  public void popContext(){  Context2 parentContext=currentContext.getParent();  if (parentContext == null)   throw new EmptyStackException(); else   currentContext=parentContext;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"inc");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not an inc instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final IOperandTree operand=instruction.getOperands().get(0);  final TranslationResult result=Helpers.translateOperand(environment,offset,operand,true);  instructions.addAll(result.getInstructions());  offset=baseOffset + instructions.size();  final String loadedRegister=result.getRegister();  final OperandSize registerSize=result.getSize();  final OperandSize nextSize=TranslationHelpers.getNextSize(registerSize);  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(registerSize));  final String shiftMsbLsbMask=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(registerSize));  final String truncMask=String.valueOf(TranslationHelpers.getAllBitsMask(registerSize));  final String maskedMsb=environment.getNextVariableString();  final String addResult=environment.getNextVariableString();  final String maskedMsbResult=environment.getNextVariableString();  final String maskedMsbNeg=environment.getNextVariableString();  final String tempOF=environment.getNextVariableString();  final String truncatedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset,registerSize,loadedRegister,registerSize,msbMask,registerSize,maskedMsb));  instructions.add(ReilHelpers.createAdd(offset + 1,registerSize,loadedRegister,registerSize,"1",nextSize,addResult));  instructions.add(ReilHelpers.createAnd(offset + 2,nextSize,addResult,registerSize,msbMask,registerSize,maskedMsbResult));  instructions.add(ReilHelpers.createBsh(offset + 3,registerSize,maskedMsbResult,registerSize,shiftMsbLsbMask,OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createXor(offset + 4,registerSize,maskedMsb,registerSize,msbMask,registerSize,maskedMsbNeg));  instructions.add(ReilHelpers.createAnd(offset + 5,registerSize,maskedMsbResult,registerSize,maskedMsbNeg,registerSize,tempOF));  instructions.add(ReilHelpers.createBsh(offset + 6,registerSize,tempOF,registerSize,shiftMsbLsbMask,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 7,nextSize,addResult,registerSize,truncMask,registerSize,truncatedResult));  instructions.add(ReilHelpers.createBisz(offset + 8,registerSize,truncatedResult,OperandSize.BYTE,Helpers.ZERO_FLAG));  Helpers.writeBack(environment,offset + 9,operand,truncatedResult,registerSize,result.getAddress(),result.getType(),instructions);}  }
class C{  public void printString(String s) throws IOException {  for (int i=0; i < s.length(); i++) {    printCharacter(s.charAt(i));  }}  }
class C{  public static NoEdgesToSelf serializableInstance(){  return new NoEdgesToSelf();}  }
class C{  public void testParseEnumMixedCase() throws Exception {  String[] enumDefinition=new String[2];  enumDefinition[0]="enum('EMAILADDRESS','PHONENUMBER','WEBSITE','12345678901234567890123456789012345678901234567890')";  enumDefinition[1]="ENUM('EMAILADDRESS','PHONENUMBER','WEBSITE','12345678901234567890123456789012345678901234567890')";  for (int i=0; i < 2; i++) {    String[] elements=EnumToStringFilter.parseEnumeration(enumDefinition[i]);    Assert.assertEquals(errorMsgMismatch,"EMAILADDRESS",elements[0]);    Assert.assertEquals(errorMsgMismatch,"PHONENUMBER",elements[1]);    Assert.assertEquals(errorMsgMismatch,"WEBSITE",elements[2]);    Assert.assertEquals(errorMsgMismatch,"12345678901234567890123456789012345678901234567890",elements[3]);  }}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Object invoke(java.lang.Object,java.lang.Object[])")) {    java_lang_reflect_Method_invoke(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  static void updateLeafRounding(DrawableParent parent,@Nullable RoundingParams roundingParams,Resources resources){  parent=findDrawableParentForLeaf(parent);  Drawable child=parent.getDrawable();  if (roundingParams != null && roundingParams.getRoundingMethod() == RoundingParams.RoundingMethod.BITMAP_ONLY) {    if (child instanceof Rounded) {      Rounded rounded=(Rounded)child;      applyRoundingParams(rounded,roundingParams);    } else     if (child != null) {      parent.setDrawable(sEmptyDrawable);      Drawable rounded=applyLeafRounding(child,roundingParams,resources);      parent.setDrawable(rounded);    }  } else   if (child instanceof Rounded) {    resetRoundingParams((Rounded)child);  }}  }
class C{  public boolean hasEvictionOffHeap(){  return this.evictionOffHeapSet;}  }
class C{  private Bitmap createIconBitmap(Drawable icon){  int width=mIconWidth;  int height=mIconHeight;  if (icon instanceof PaintDrawable) {    PaintDrawable painter=(PaintDrawable)icon;    painter.setIntrinsicWidth(width);    painter.setIntrinsicHeight(height);  } else   if (icon instanceof BitmapDrawable) {    BitmapDrawable bitmapDrawable=(BitmapDrawable)icon;    Bitmap bitmap=bitmapDrawable.getBitmap();    if (bitmap.getDensity() == Bitmap.DENSITY_NONE) {      bitmapDrawable.setTargetDensity(mDisplayMetrics);    }  }  int sourceWidth=icon.getIntrinsicWidth();  int sourceHeight=icon.getIntrinsicHeight();  if (sourceWidth > 0 && sourceHeight > 0) {    if (width < sourceWidth || height < sourceHeight) {      final float ratio=(float)sourceWidth / sourceHeight;      if (sourceWidth > sourceHeight) {        height=(int)(width / ratio);      } else       if (sourceHeight > sourceWidth) {        width=(int)(height * ratio);      }    } else     if (sourceWidth < width && sourceHeight < height) {      width=sourceWidth;      height=sourceHeight;    }  }  int textureWidth=mIconTextureWidth;  int textureHeight=mIconTextureHeight;  final Bitmap bitmap=Bitmap.createBitmap(textureWidth,textureHeight,Bitmap.Config.ARGB_8888);  final Canvas canvas=mCanvas;  canvas.setBitmap(bitmap);  final int left=(textureWidth - width) / 2;  final int top=(textureHeight - height) / 2;  if (false) {    canvas.drawColor(sColors[mColorIndex]);    if (++mColorIndex >= sColors.length)     mColorIndex=0;    Paint debugPaint=new Paint();    debugPaint.setColor(0xffcccc00);    canvas.drawRect(left,top,left + width,top + height,debugPaint);  }  mOldBounds.set(icon.getBounds());  icon.setBounds(left,top,left + width,top + height);  icon.draw(canvas);  icon.setBounds(mOldBounds);  return bitmap;}  }
class C{  public void renderAllCurrentlyVisibleFrames(PilotStack pilotStack){  List<PilotFrame> framesToRender=getCurrentlyVisibleFrames(pilotStack,false);  for (int i=framesToRender.size() - 1; i >= 0; i--)   topVisibleFrameUpdated(framesToRender.get(i),Direction.FORWARD);}  }
class C{  static public InetSocketAddress[] parse(final String specs,final String defaultAddr,final int defaultPort){  final List<InetSocketAddress> result=new LinkedList<InetSocketAddress>();  if (specs == null) {    result.add(new InetSocketAddress(defaultAddr,defaultPort));  } else {    final String[] specStrings=specs.split("[ ,]+");    for (    String specString : specStrings) {      final int colon=specString.indexOf(':');      if (colon < 0 || colon == specString.length() - 1) {        result.add(new InetSocketAddress(specString,defaultPort));      } else {        final String hostname=specString.substring(0,colon);        final int port=Integer.parseInt(specString.substring(colon + 1));        result.add(new InetSocketAddress(hostname,port));      }    }  }  return result.toArray(new InetSocketAddress[result.size()]);}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {}  }
class C{  public void testNegativeRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_ar:[\u062F TO \u0698]","sort","id asc"),"//*[@numFound='0']");}  }
class C{  private static String geoToGmlRough(Geometry geo){  final Geometries theType=org.geotools.geometry.jts.Geometries.get(geo);switch (theType) {case POINT:    return geoToGml((Point)geo);case LINESTRING:  return geoToGml((LineString)geo);case POLYGON:return geoToGml((Polygon)geo);case MULTIPOINT:case MULTILINESTRING:case MULTIPOLYGON:default :throw new Error("No code to convert to GML for this type: " + theType);}}  }
class C{  public static String format(final Calendar calendar,final String pattern,final Locale locale){  return format(calendar,pattern,null,locale);}  }
class C{  @Override public void publish(final Message message) throws JMSException {  session.lock();  try {    if (ActiveMQRATopicPublisher.trace) {      ActiveMQRALogger.LOGGER.trace("send " + this + " message="+ message);    }    checkState();    ((TopicPublisher)producer).publish(message);    if (ActiveMQRATopicPublisher.trace) {      ActiveMQRALogger.LOGGER.trace("sent " + this + " result="+ message);    }  }  finally {    session.unlock();  }}  }
class C{  public RrdGraphDefTemplate(File xmlFile) throws IOException {  super(xmlFile);}  }
class C{  public static void pageTransition(@AnalyticsCnsts.Page String src,@AnalyticsCnsts.Page String dst,long dwellTime){  Date date=new Date();  Timestamp curTime=new Timestamp(date.getTime());  String json=gson.toJson(new AnalyticsPageTransition(src,dst,curTime),AnalyticsPageTransition.class);  JSONObject jsonObject=null;  try {    jsonObject=new JSONObject(json);    jsonObject.put("_activity","pageTransition");    String dwellField=src + "_dwellTime";    double dwellTimeSeconds=(double)dwellTime / 1000;    jsonObject.put(dwellField,dwellTimeSeconds);    Log.i("TEST","PAGE_TRANSITION : " + jsonObject.toString());    WLAnalytics.log("Page transition recorded.",jsonObject);    WLAnalytics.send();  } catch (  JSONException e) {    e.printStackTrace();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.796 -0400",hash_original_method="BAAA4823804BB5CB2EEDF6C02F45111E",hash_generated_method="98583567604BD3CBED5704BEDCFDEBC7") private void onRequestPasskeyConfirmation(String objectPath,int passkey,int nativeData){  String address=checkPairingRequestAndGetAddress(objectPath,nativeData);  if (address == null)   return;  mWakeLock.acquire();  Intent intent=new Intent(BluetoothDevice.ACTION_PAIRING_REQUEST);  intent.putExtra(BluetoothDevice.EXTRA_DEVICE,mAdapter.getRemoteDevice(address));  intent.putExtra(BluetoothDevice.EXTRA_PAIRING_KEY,passkey);  intent.putExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT,BluetoothDevice.PAIRING_VARIANT_PASSKEY_CONFIRMATION);  mContext.sendBroadcast(intent,BLUETOOTH_ADMIN_PERM);  mWakeLock.release();  return;}  }
class C{  public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){  this.subject=subject;  this.callbackHandler=callbackHandler;  this.sharedState=sharedState;  this.options=options;  debug="true".equalsIgnoreCase((String)options.get("debug"));  debugNative="true".equalsIgnoreCase((String)options.get("debugNative"));  if (debugNative == true) {    debug=true;  }}  }
class C{  protected void prepare(){  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals(I_M_Movement.COLUMNNAME_MovementDate)) {      movementDate=para.getParameterAsTimestamp();      if (movementDate == null)       throw new AdempiereException("@MovementDate@ @NotFound@");    }  }  int locatorId=Env.getContextAsInt(Env.getCtx(),getProcessInfo().getWindowNo(),"mc.M_Locator_ID");  if (locatorId > 0)   locator=new MLocator(getCtx(),locatorId,get_TrxName());  if (locator == null)   throw new AdempiereException("@M_Locator_ID@ @NotFound@");}  }
class C{  static void register(Object value){  if (value != null) {    Map m=getRegistry();    if (m == null) {      m=new WeakHashMap();      REGISTRY.set(m);    }    m.put(value,null);  }}  }
class C{  int encryptFinal(byte[] plain,int plainOffset,int plainLen,byte[] cipher,int cipherOffset){  int oddBytes=plainLen % numBytes;  int len=encrypt(plain,plainOffset,(plainLen - oddBytes),cipher,cipherOffset);  plainOffset+=len;  cipherOffset+=len;  if (oddBytes != 0) {    embeddedCipher.encryptBlock(register,0,k,0);    for (int i=0; i < oddBytes; i++) {      cipher[i + cipherOffset]=(byte)(k[i] ^ plain[i + plainOffset]);    }  }  return plainLen;}  }
class C{  public void addForceField(Double2D forceField){  forceFields=forceFields.add(forceField);}  }
class C{  public void remove(Annotation... annotations){  remove(Arrays.asList(annotations));}  }
class C{  private Collection<McRaptorState> doPropagationToDestination(){  McRaptorStateBag bag=createStateBag();  egressTimes.forEachEntry(null);  return bag.getBestStates();}  }
class C{  public static RecurrenceIterator join(RecurrenceIterator first,RecurrenceIterator... rest){  List<RecurrenceIterator> all=new ArrayList<RecurrenceIterator>();  all.add(first);  all.addAll(Arrays.asList(rest));  return new CompoundIteratorImpl(all,Collections.<RecurrenceIterator>emptyList());}  }
class C{  private int accumDefaultEscape(Writer writer,char ch,int i,char[] chars,int len,boolean fromTextNode,boolean escLF) throws IOException {  int pos=accumDefaultEntity(writer,ch,i,chars,len,fromTextNode,escLF);  if (i == pos) {    if (Encodings.isHighUTF16Surrogate(ch)) {      char next;      int codePoint=0;      if (i + 1 >= len) {        throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString(ch)}));      } else {        next=chars[++i];        if (!(Encodings.isLowUTF16Surrogate(next)))         throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString(ch) + " " + Integer.toHexString(next)}));        codePoint=Encodings.toCodePoint(ch,next);      }      writer.write("&#");      writer.write(Integer.toString(codePoint));      writer.write(';');      pos+=2;    } else {      if (isCharacterInC0orC1Range(ch) || isNELorLSEPCharacter(ch)) {        writer.write("&#");        writer.write(Integer.toString(ch));        writer.write(';');      } else       if ((!escapingNotNeeded(ch) || ((fromTextNode && m_charInfo.shouldMapTextChar(ch)) || (!fromTextNode && m_charInfo.shouldMapAttrChar(ch)))) && m_elemContext.m_currentElemDepth > 0) {        writer.write("&#");        writer.write(Integer.toString(ch));        writer.write(';');      } else {        writer.write(ch);      }      pos++;    }  }  return pos;}  }
class C{  public void startVibration(VibrationMode mode){  checkConnection();  byte[] protocal;switch (mode) {case VIBRATION_WITH_LED:    protocal=Protocol.VIBRATION_WITH_LED;  break;case VIBRATION_UNTIL_CALL_STOP:protocal=Protocol.VIBRATION_UNTIL_CALL_STOP;break;case VIBRATION_WITHOUT_LED:protocal=Protocol.VIBRATION_WITHOUT_LED;break;case VIBRATION_NEW_FIRMWARE:protocal=Protocol.VIBRATION_NEW_FIRMWARE;break;default :return;}final List<BLEAction> list=new ArrayList<>();list.add(new WriteAction(Profile.UUID_SERVICE_VIBRATE,Profile.UUID_CHAR_ALERT_LEVEL,protocal));queue(list);}  }
class C{  private String generateSQLStatementForDataInTable(Map<String,Set<Integer>> dataSourceToUse,String tableToWrite){  StringBuffer output=new StringBuffer();  for (  Entry<String,Set<Integer>> e : dataSourceToUse.entrySet()) {    String curTemplateName=e.getKey();    Set<Integer> curPageIds=e.getValue();    if (!curTemplateName.isEmpty() && !curPageIds.isEmpty()) {      String id="LAST_INSERT_ID()";      if (!tplNameToTplId.containsKey(curTemplateName)) {        output.append("INSERT INTO " + GeneratorConstants.TABLE_TPLID_TPLNAME + " (templateName) VALUES ('"+ curTemplateName+ "');");        output.append("\r\n");      } else {        id=tplNameToTplId.get(curTemplateName).toString();      }      StringBuilder curValues=new StringBuilder();      for (      Integer pId : curPageIds) {        if (curValues.length() > 0) {          curValues.append(",");        }        curValues.append("(" + id + ", ");        curValues.append(pId);        curValues.append(")");      }      output.append("REPLACE INTO " + tableToWrite + " VALUES "+ curValues+ ";");      output.append("\r\n");    }  }  return output.toString();}  }
class C{  public final void writeFloat(float val) throws IOException {  writeInt(Float.floatToIntBits(val));}  }
class C{  final void signal(){synchronized (this) {    if (state == State.READY) {      state=State.SIGNALLED;      watcher.enqueueKey(this);    }  }}  }
class C{  public void testGetSingleSecurityRole() throws Exception {  String xml=WEBAPP_TEST_HEADER + "" + "  <security-role>".trim()+ "    <role-name>r1</role-name>".trim()+ "  </security-role>".trim()+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertTrue(WebXmlUtils.hasSecurityRole(webXml,"r1"));  Element securityRoleElement=WebXmlUtils.getSecurityRole(webXml,"r1");  assertNotNull(securityRoleElement);  assertEquals("security-role",securityRoleElement.getName());  assertEquals("role-name",((Element)securityRoleElement.getChildren().get(0)).getName());  assertEquals("r1",((Element)securityRoleElement.getChildren().get(0)).getText());  List<String> securityRoleNames=WebXmlUtils.getSecurityRoleNames(webXml);  assertEquals(1,securityRoleNames.size());  assertEquals("r1",securityRoleNames.get(0));}  }
class C{  public static Intent createOpenMapSearchIntent(double latitude,double longitude,String addressOrPlaceName){  final String uri;  if (TextUtils.isEmpty(addressOrPlaceName)) {    uri="geo:" + latitude + ","+ longitude;  } else {    uri="geo:" + latitude + ","+ longitude+ "?q="+ Uri.encode(addressOrPlaceName);  }  return createGeoUriIntent(uri);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public final char readChar() throws IOException {  int ch1=this.read();  int ch2=this.read();  if ((ch1 | ch2) < 0) {    throw new EOFException();  }  if (bigEndian) {    return (char)((ch1 << 8) + (ch2));  } else {    return (char)((ch2 << 8) + (ch1));  }}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  HasNameView(Document parent,Map<String,Object> data,Class<? extends Document> mainInterface){  super(parent,data,mainInterface);}  }
class C{  public XStringForChars(char[] val,int start,int length){  super(val);  m_start=start;  m_length=length;  if (null == val)   throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FASTSTRINGBUFFER_CANNOT_BE_NULL,null));}  }
class C{  public static boolean hasReadyMobile4gRadio(Context context){  if (!NetworkPolicyEditor.ENABLE_SPLIT_POLICIES) {    return false;  }  if (TEST_RADIOS) {    return SystemProperties.get(TEST_RADIOS_PROP).contains("4g");  }  final ConnectivityManager conn=ConnectivityManager.from(context);  final TelephonyManager tele=TelephonyManager.from(context);  final boolean hasWimax=conn.isNetworkSupported(TYPE_WIMAX);  final boolean hasLte=(tele.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) && hasReadyMobileRadio(context);  return hasWimax || hasLte;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Builder withTextSize(float textSize){  this.textSize=textSize;  return this;}  }
class C{  public ScaleAndIndex index(int index){  return new ScaleAndIndex(scale,index);}  }
class C{  public Node replaceChild(Node newChild,Node oldChild) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public NSData(String base64) throws IOException {  String data=base64.replaceAll("\\s+","");  bytes=Base64.decode(data);}  }
class C{  @CheckReturnValue @Nonnull static public String hexStringFromBytes(@Nonnull byte[] bytes){  StringBuilder sb=new StringBuilder();  for (int i=0; i < bytes.length; i++) {    sb.append(HEX_CHARS[(bytes[i] & 0xF0) >> 4]);    sb.append(HEX_CHARS[bytes[i] & 0x0F]);    sb.append(' ');  }  return sb.toString();}  }
class C{  @RequestProcessing(value="/notifications",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void navigateNotifications(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final JSONObject currentUser=userQueryService.getCurrentUser(request);  if (null == currentUser) {    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  final String userId=currentUser.optString(Keys.OBJECT_ID);  final int unreadCommentedNotificationCnt=notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_COMMENTED);  if (unreadCommentedNotificationCnt > 0) {    response.sendRedirect("/notifications/commented");    return;  }  final int unreadAtNotificationCnt=notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_AT);  if (unreadAtNotificationCnt > 0) {    response.sendRedirect("/notifications/at");    return;  }  final int unreadPointNotificationCnt=notificationQueryService.getUnreadPointNotificationCount(userId);  if (unreadPointNotificationCnt > 0) {    response.sendRedirect("/notifications/point");    return;  }  final int unreadFollowingUserNotificationCnt=notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_FOLLOWING_USER);  if (unreadFollowingUserNotificationCnt > 0) {    response.sendRedirect("/notifications/following-user");    return;  }  final int unreadBroadcastCnt=notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_BROADCAST);  if (unreadBroadcastCnt > 0) {    response.sendRedirect("/notifications/broadcast");    return;  }  response.sendRedirect("/notifications/commented");}  }
class C{  public VNXeCommandJob createLunsInConsistencyGroup(List<String> names,String poolId,Long size,boolean isThin,String tieringPolicy,String cgId){  _logger.info("creating luns in the consistencyGroup group: {}",cgId);  LunGroupModifyParam param=new LunGroupModifyParam();  List<LunCreateParam> lunCreates=new ArrayList<LunCreateParam>();  boolean isPolicyOn=false;  FastVPParam fastVP=new FastVPParam();  if (tieringPolicy != null && !tieringPolicy.isEmpty()) {    TieringPolicyEnum tierValue=TieringPolicyEnum.valueOf(tieringPolicy);    if (tierValue != null) {      fastVP.setTieringPolicy(tierValue.getValue());      isPolicyOn=true;    }  }  for (  String lunName : names) {    LunParam lunParam=new LunParam();    lunParam.setIsThinEnabled(isThin);    lunParam.setSize(size);    lunParam.setPool(new VNXeBase(poolId));    LunCreateParam createParam=new LunCreateParam();    createParam.setName(lunName);    createParam.setLunParameters(lunParam);    if (isPolicyOn) {      lunParam.setFastVPParameters(fastVP);    }    lunCreates.add(createParam);  }  param.setLunCreate(lunCreates);  ConsistencyGroupRequests req=new ConsistencyGroupRequests(_khClient);  return req.modifyConsistencyGroupAsync(cgId,param);}  }
class C{  public boolean isValueTypeLong(){  return valueType == ParameterValueType.LONG;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:10.720 -0500",hash_original_method="AA69245AF9AD4BDD3C62F81B883F32CE",hash_generated_method="1B275A6F39C10C052D7EF49093FFA34B") public final void cancel(){  mResult=false;  wakeUp();}  }
class C{  public int read() throws IOException {  if (pos >= 0) {    int cur=pos % BUFF_SIZE;    if (cur < bar) {      pos++;      return buff[cur];    }    if (cur != end) {      buff[cur]=inStream.read();      bar=cur + 1;      pos++;      return buff[cur];    } else {      pos=-1;    }  }  return inStream.read();}  }
class C{  private JComponent createMenuTitle(String title){  JLabel label=new JLabel(title);  label.setBorder(BorderFactory.createEmptyBorder(5,4,10,0));  return label;}  }
class C{  private boolean typesMatch(TypeTuple inputTypes,List<ReferenceValue> valueTuple){  if (inputTypes.size() != valueTuple.size()) {    return false;  }  Substitution<ReferenceType> substitution=new Substitution<>();  int i=0;  while (i < inputTypes.size()) {    Type inputType=inputTypes.get(i);    ReferenceType valueType=valueTuple.get(i).getType();    if (inputType.isGeneric()) {      if (valueType instanceof ClassOrInterfaceType) {        ClassOrInterfaceType classType=(ClassOrInterfaceType)valueType;        InstantiatedType superType=classType.getMatchingSupertype((GenericClassType)inputTypes.get(i));        if (superType == null) {          return false;        }        Substitution<ReferenceType> subst=superType.getTypeSubstitution();        if (!substitution.isConsistentWith(subst)) {          return false;        }        substitution=substitution.extend(subst);      } else {        return false;      }    } else     if (!inputType.isAssignableFrom(valueType)) {      return false;    }    i++;  }  return true;}  }
class C{  private static void unpack(final File nar,final File workingDirectory,final byte[] hash) throws IOException {  try (JarFile jarFile=new JarFile(nar)){    Enumeration<JarEntry> jarEntries=jarFile.entries();    while (jarEntries.hasMoreElements()) {      JarEntry jarEntry=jarEntries.nextElement();      String name=jarEntry.getName();      File f=new File(workingDirectory,name);      if (jarEntry.isDirectory()) {        FileUtils.ensureDirectoryExistAndCanAccess(f);      } else {        makeFile(jarFile.getInputStream(jarEntry),f);      }    }  }   final File hashFile=new File(workingDirectory,HASH_FILENAME);  try (final FileOutputStream fos=new FileOutputStream(hashFile)){    fos.write(hash);  } }  }
class C{  @Override public void messageReceived(NextFilter nextFilter,IoSession session,Object message) throws Exception {  if (profileMessageReceived) {    long start=timeNow();    nextFilter.messageReceived(session,message);    long end=timeNow();    messageReceivedTimerWorker.addNewDuration(end - start);  } else {    nextFilter.messageReceived(session,message);  }}  }
class C{  protected void addImports(Stylesheet stylesheet,boolean addToList,Vector importList){  int n=stylesheet.getImportCount();  if (n > 0) {    for (int i=0; i < n; i++) {      Stylesheet imported=stylesheet.getImport(i);      addImports(imported,true,importList);    }  }  n=stylesheet.getIncludeCount();  if (n > 0) {    for (int i=0; i < n; i++) {      Stylesheet included=stylesheet.getInclude(i);      addImports(included,false,importList);    }  }  if (addToList)   importList.addElement(stylesheet);}  }
class C{  public long hash1(char c){  final long p=1099511628211L;  long hash=0xcbf29ce484222325L;  hash=(hash ^ (c & 0x00FF)) * p;  hash=(hash ^ (c >> 8)) * p;  hash+=hash << 13;  hash^=hash >> 7;  hash+=hash << 3;  hash^=hash >> 17;  hash+=hash << 5;  return hash;}  }
class C{  public boolean canWriteTiles(){  return canWriteTiles;}  }
class C{  public boolean removeEntry(long rowIndex){  return db.delete(mDefaultTable,KEY_ID + "=" + rowIndex,null) > 0;}  }
class C{  public void clearTextLabels(){  clearXTextLabels();}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null)   return containsNullValue();  Entry<K,V>[] tab=getTable();  for (int i=tab.length; i-- > 0; )   for (Entry<K,V> e=tab[i]; e != null; e=e.next)   if (value.equals(e.value))   return true;  return false;}  }
class C{  public void initialize(){  _waitingThread=null;  _waitingForSectionExit=false;  _targetTransitSection=null;  _waitingForBlock=false;  _waitingForSensor=false;  _triggerSensor=null;  _sensorListener=null;}  }
class C{  public static Assignment extractSample(BNetwork network,Collection<String> queryVars){  Query query=new Query.ProbQuery(network,queryVars,new Assignment());  LikelihoodWeighting isquery=new LikelihoodWeighting(query,1,Settings.maxSamplingTime);  List<Sample> samples=isquery.getSamples();  if (samples.isEmpty()) {    throw new RuntimeException("could not extract sample");  } else {    return samples.get(0).getTrimmed(query.getQueryVars());  }}  }
class C{  @Override public V put(K key,V value){  Object _key=key;  Object _value=value;  if (_key == null) {    _key=NULL_OBJECT;  }  if (_value == null) {    _value=NULL_OBJECT;  }  int index=findIndex(_key,elementData);  if (elementData[index] != _key) {    modCount++;    if (++size > threshold) {      rehash();      index=findIndex(_key,elementData);    }    elementData[index]=_key;    elementData[index + 1]=null;  }  Object result=elementData[index + 1];  elementData[index + 1]=_value;  return massageValue(result);}  }
class C{  private void computeDisjointIM(IntersectionMatrix im){  Geometry ga=arg[0].getGeometry();  if (!ga.isEmpty()) {    im.set(Location.INTERIOR,Location.EXTERIOR,ga.getDimension());    im.set(Location.BOUNDARY,Location.EXTERIOR,ga.getBoundaryDimension());  }  Geometry gb=arg[1].getGeometry();  if (!gb.isEmpty()) {    im.set(Location.EXTERIOR,Location.INTERIOR,gb.getDimension());    im.set(Location.EXTERIOR,Location.BOUNDARY,gb.getBoundaryDimension());  }}  }
class C{  public MathematicalExpressionTest(String name){  super(name);}  }
class C{  public static Scale quartiles(){  return scale(4);}  }
class C{  public synchronized void ruleComplete(Tradestrategy tradestrategy){synchronized (lockBackTestWorker) {    ruleComplete.getAndIncrement();    lockBackTestWorker.notifyAll();  }}  }
class C{  @Override public final boolean equals(Object socketAddr){  if (this == socketAddr) {    return true;  }  if (!(socketAddr instanceof InetSocketAddress)) {    return false;  }  InetSocketAddress iSockAddr=(InetSocketAddress)socketAddr;  if (port != iSockAddr.port) {    return false;  }  if ((addr == null) && (iSockAddr.addr == null)) {    return hostname.equals(iSockAddr.hostname);  }  if (addr == null) {    return false;  }  return addr.equals(iSockAddr.addr);}  }
class C{  public LegendItem(String label,String description,String toolTipText,String urlText,Shape shape,Paint fillPaint){  this(label,description,toolTipText,urlText,true,shape,true,fillPaint,false,Color.black,UNUSED_STROKE,false,UNUSED_SHAPE,UNUSED_STROKE,Color.black);}  }
class C{  public PolishAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public static String stringOfChar(char ch,int count){  StringBuffer buf=new StringBuffer();  for (int i=0; i < count; i++) {    buf.append(ch);  }  return buf.toString();}  }
class C{  public TemplateModelException(String description){  this(description,null);}  }
class C{  public static <R extends ParseObject>Observable<R> all(ParseQuery<R> query,int count){  final int limit=1000;  query.setSkip(0);  query.setLimit(limit);  Observable<R> find=find(query);  for (int i=limit; i < count; i+=limit) {    if (i >= 10000)     break;    query.setSkip(i);    query.setLimit(limit);    find.concatWith(find(query));  }  return find.distinct(null);}  }
class C{  @NamespacePermission(fields="#customDdlKey.namespace",permissions=NamespacePermissionEnum.WRITE) @Override public CustomDdl deleteCustomDdl(CustomDdlKey customDdlKey){  customDdlHelper.validateCustomDdlKey(customDdlKey);  CustomDdlEntity customDdlEntity=customDdlDaoHelper.getCustomDdlEntity(customDdlKey);  customDdlDao.delete(customDdlEntity);  return createCustomDdlFromEntity(customDdlEntity);}  }
class C{  public final int elementAt(int i){  return m_map[i];}  }
class C{  public Vertex discover(Vertex source,Vertex vertex,Vertex vertex2){  return discover(source,vertex,vertex2,null,null,null);}  }
class C{  @Override public boolean equals(Object other){  if (other == null) {    return false;  } else   if (other.getClass() != this.getClass()) {    return false;  } else   if (((Peer)other).getNetwork() == null) {    return this.getNetwork() == null;  }  return ((Peer)other).getNetwork().equals(this.getNetwork());}  }
class C{  public void addProperty(String key,Object value) throws SimError {  if (this.properties != null && this.properties.containsKey(key)) {    throw new SimError("Message " + this + " already contains value "+ "for a key "+ key);  }  this.updateProperty(key,value);}  }
class C{  public Vec3[] clip(Vec3 pointA,Vec3 pointB){  if (pointA == null || pointB == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Plane","clip","missingPoint"));  }  if (pointA.equals(pointB)) {    return null;  }  Line line=new Line().setToSegment(pointA,pointB);  double lDotV=this.normal.dot(line.direction);  if (lDotV == 0) {    double lDotS=this.dot(line.origin);    if (lDotS == 0) {      return new Vec3[]{pointA,pointB};    } else {      return null;    }  }  double t=-this.dot(line.origin) / lDotV;  if (t < 0 || t > 1) {    return null;  }  Vec3 p=line.pointAt(t,new Vec3());  if (lDotV > 0) {    return new Vec3[]{p,pointB};  } else {    return new Vec3[]{pointA,p};  }}  }
class C{  private final long[] allocate(final int length){  return new long[length];}  }
class C{  public boolean isMachineRunning(){  return isMachineRunning;}  }
class C{  protected void initializeView(){  if (view != null) {    return;  }  view=CoreView.getInstance();}  }
class C{  protected void onCreateAnimator(ValueAnimator animator){  animator.setDuration(2000);  animator.setRepeatCount(ValueAnimator.INFINITE);  animator.setInterpolator(new LinearInterpolator());}  }
class C{  protected void initRequestLoggingFilter(ServletContext servletContext){  FilterRegistration.Dynamic filterRegistration=servletContext.addFilter("requestLoggingFilter",new RequestLoggingFilter());  filterRegistration.addMappingForUrlPatterns(null,true,"/rest/*");}  }
class C{  public boolean isIncompatibleWith(VariableSource variableSource){  List<Node> variables1=getVariableSource().getVariables();  List<Node> variables2=variableSource.getVariables();  return !variables1.equals(variables2);}  }
class C{  public boolean isPrimitive(){  return primitive;}  }
class C{  @Override public Object clone(){  EgDemandDetails clone=null;  try {    clone=(EgDemandDetails)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e.toString());  }  clone.setId(null);  clone.setEgwStatus(null);  clone.setEgdmCollectedReceipts(new HashSet<EgdmCollectedReceipt>());  return clone;}  }
class C{  private void processSymbolWord(StringTokenizer st,OMPoint omg){  st.nextToken();  Integer.parseInt(st.nextToken());  Color color=convertColor(Integer.parseInt(st.nextToken()));  Integer.parseInt(st.nextToken());  omg.setFillPaint(color);}  }
class C{  static boolean isBshAssignable(Class toType,Class fromType){  try {    return castObject(toType,fromType,null,ASSIGNMENT,true) == VALID_CAST;  } catch (  UtilEvalError e) {    throw new InterpreterError("err in cast check: " + e);  }}  }
class C{  public static void tapView(InstrumentationTestCase test,View v){  int[] xy=new int[2];  v.getLocationOnScreen(xy);  final int viewWidth=v.getWidth();  final int viewHeight=v.getHeight();  final float x=xy[0] + (viewWidth / 2.0f);  float y=xy[1] + (viewHeight / 2.0f);  Instrumentation inst=test.getInstrumentation();  long downTime=SystemClock.uptimeMillis();  long eventTime=SystemClock.uptimeMillis();  MotionEvent event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_DOWN,x,y,0);  inst.sendPointerSync(event);  inst.waitForIdleSync();  eventTime=SystemClock.uptimeMillis();  final int touchSlop=ViewConfiguration.get(v.getContext()).getScaledTouchSlop();  event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_MOVE,x + (touchSlop / 2.0f),y + (touchSlop / 2.0f),0);  inst.sendPointerSync(event);  inst.waitForIdleSync();  eventTime=SystemClock.uptimeMillis();  event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_UP,x,y,0);  inst.sendPointerSync(event);  inst.waitForIdleSync();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void put(E e) throws InterruptedException {  checkNotNull(e);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    while (count == items.length)     notFull.await();    enqueue(e);  }  finally {    lock.unlock();  }}  }
class C{  public void ifNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNULL,label);}  }
class C{  @HLEFunction(nid=0xD7763699,version=150) public int sceWlanGetSwitchState(){  return Wlan.getSwitchState();}  }
class C{  public double distance(){  if (geom[0] == null || geom[1] == null)   throw new IllegalArgumentException("null geometries are not supported");  if (geom[0].isEmpty() || geom[1].isEmpty())   return 0.0;  computeMinDistance();  return minDistance;}  }
class C{  @Override public int compare(Map.Entry<String,HierarchicalAggregateEntity> e1,Map.Entry<String,HierarchicalAggregateEntity> e2){  int r=0;  String key1=e1.getKey();  List<Double> valueList1=e1.getValue().getValues();  String key2=e2.getKey();  List<Double> valueList2=e2.getValue().getValues();  for (  SortOption so : sortOptions) {    int index=so.getIndex();    if (index == -1) {      continue;    }    if (!so.isInGroupby()) {      Double value1=valueList1.get(index);      Double value2=valueList2.get(index);      r=value1.compareTo(value2);    }    if (r == 0)     continue;    if (!so.isAscendant()) {      r=-r;    }    return r;  }  if (r == 0) {    return key1.compareTo(key2);  }  return r;}  }
class C{  public DataInputBuffer(ByteBuffer buff){  this.buff=buff;}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  if (!learningphase) {    return;  }  relearned=true;  int num_classes=(int)(0.5 * numClasses);  int num_features=(int)(0.5 * numFeatures);  double[] data=new double[numFeatures];  double[] labels=new double[numClasses];  int numChanges=0;  if (!instance.classIsMissing()) {    for (int j=0; j < num_features; j++) {      data[j]=instance.value(num_classes + j);      data[j + num_features]=1 - data[j];    }    for (int j=0; j < num_classes; j++) {      labels[j]=instance.value(j);      labels[j + num_classes]=1 - labels[j];    }    SortPair[] cateacti=ARTActivateCategories(data);    java.util.Arrays.sort(cateacti);    boolean resonance=false;    int currentSortedIndex=0;    int currentCategory=-1;    double matchA=0;    double matchB=0;    while (!resonance) {      currentCategory=cateacti[currentSortedIndex].getOriginalIndex();      matchA=ART_Calculate_Match(data,weightsA[currentCategory]);      if (sumArray(weightsB[currentCategory]) == 0) {        matchB=1;      } else {        matchB=ART_Calculate_Match(labels,weightsB[currentCategory]);      }      if (matchA >= roa && matchB >= rob) {        if (currentCategory == numCategories - 1) {          if (currentSortedIndex == maxNumCategories) {            System.out.println("WARNING: The maximum number of categories has been reached.");            resonance=true;          } else {            for (int j=0; j < data.length; j++) {              weightsA[currentCategory][j]=data[j];            }            for (int j=0; j < weightsB[currentCategory].length; j++) {              weightsB[currentCategory][j]=labels[j];            }            ARAMm_Add_New_Category();            numChanges=numChanges + 1;            resonance=true;          }        } else {          double weightChange=ARAMm_Update_Weights(data,labels,currentCategory);          if (weightChange == 1) {            numChanges+=1;          }          resonance=true;        }      } else {        currentSortedIndex+=1;        resonance=false;      }    }  }}  }
class C{  private void tracePostRequest(Response response,TraceEvent traceEvent){  long time=new Date().getTime();  if (traceEvent != null) {    TraceEvent clientEndTraceEvent=new TraceEvent(TracingConstants.CLIENT_TRACE_END,traceEvent.getTraceId(),traceEvent.getOriginId(),time);    clientEndTraceEvent.setStatusCode(response.status());    if (log.isDebugEnabled()) {      log.debug("ClientEndTraceEvent: " + ModelUtils.toString(clientEndTraceEvent));    }    TracingUtil.pushToDAS(clientEndTraceEvent,dasUrl);  }}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm uses tabu search for finding a well scoring " + "Bayes network structure. Tabu search is hill climbing till an optimum is reached. The " + "following step is the least worst possible step. The last X steps are kept in a list and "+ "none of the steps in this so called tabu list is considered in taking the next step. "+ "The best network found in this traversal is returned.\n\n"+ "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public void generateRestServicesMap(){  try {    File metaInfFile=getMetaInfFile();    File serviceMapFile=new File(metaInfFile,"crux-rest");    if (serviceMapFile.exists() && !isOverride()) {      logger.info("REST Service map already exists. Skipping generation...");      return;    }    initializeScannerURLs();    Set<String> restServices=ClassScanner.searchClassesByAnnotation(RestService.class);    Properties cruxRest=new Properties();    if (restServices != null) {      for (      String service : restServices) {        try {          Class<?> serviceClass=Class.forName(service);          RestService annot=serviceClass.getAnnotation(RestService.class);          if (cruxRest.containsKey(annot.value())) {            throw new ServiceMapperException("Duplicated rest service [{" + annot.value() + "}]. Overiding previous registration...");          }          cruxRest.put(annot.value(),service);        } catch (        ClassNotFoundException e) {          throw new ServiceMapperException("Error initializing rest service class.",e);        }      }    }    cruxRest.store(new FileOutputStream(serviceMapFile),"Crux RestServices implementations");  } catch (  IOException e) {    throw new ServiceMapperException("Error creating rest service map",e);  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static Locale toLocale(String strLocale) throws ExpressionException {  return LocaleFactory.getLocale(strLocale);}  }
class C{  public void addHeaders(List<String> headers){  getHeaders().addAll(headers);}  }
class C{  @SuppressWarnings("unchecked") public void writeInt(int x) throws SQLException {  attribs.add(Integer.valueOf(x));}  }
class C{  protected void notifyObserverRelations(final ObserveRelationFilter filter){  notificationOrderer.getNextObserveNumber();  for (  ObserveRelation relation : observeRelations) {    if (null == filter || filter.accept(relation))     relation.notifyObservers();  }}  }
class C{  public synchronized void log(Level msgLevel,String sourceClass,String sourceMethod,String msg,Object[] params){  LogRecord record=new LogRecord(msgLevel,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(params);  log(record);}  }
class C{  private void initRange(){  mMinValue=MathHelper.NULL_VALUE;  mMaxValue=MathHelper.NULL_VALUE;  int length=getItemCount();  for (int k=0; k < length; k++) {    updateRange(getValue(k));  }}  }
class C{  public boolean exportSelected(){  return exportSelected;}  }
class C{  public static int sqrt(int x){  if (x < 0)   return -1;  if (x == 0)   return 0;  int left=1;  int right=x;  int mid;  while (left <= right) {    mid=left + (right - left) / 2;    if (mid == x / mid)     return mid; else     if (mid > x / mid)     right=mid - 1; else     left=mid + 1;  }  return right;}  }
class C{  public Complex divide(Complex c){  Complex ret=new Complex(real,imag);  ret.mutableDivide(c);  return ret;}  }
class C{  public Configuration configuration(){  return cfg;}  }
class C{  public static String[] sha256md5Hashes(byte[] data) throws NoSuchAlgorithmException {  return sha256md5Hashes(data,data.length);}  }
class C{  private void appendCommand(long index,CompletableFuture<CommandResponse> future){  appender.appendEntries(index).whenComplete(null);}  }
class C{  private DateTime handleDateTime(LinuxSyslogLineParser lineParser){  final DateTime dateTime=lineParser.getLastDeterminedDateTime();  if (dateTime != null && !m_adeExtProperties.isGmtOffsetDefined()) {    updateGmtOffset(dateTime);  }  return dateTime;}  }
class C{  public void run(){  super.run();  LOGGER.debug("Started Production Master run() method.");  try {    startNewWorker();    while (!shutdownCalled) {      for (      StepInstance stepInstance : stepInstanceDAO.retrieveUnfinishedStepInstances()) {        if (LOGGER.isTraceEnabled()) {          LOGGER.trace("Iterating over StepInstances: Currently on " + stepInstance);        }        if (stepInstance.hasFailedPermanently(jobs)) {          unrecoverableErrorStrategy.failed(stepInstance,jobs);        }        if (stepInstance.canBeSubmitted(jobs) && stepInstanceDAO.serialGroupCanRun(stepInstance,jobs)) {          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("Step submitted:" + stepInstance);          }          final boolean resubmission=stepInstance.getExecutions().size() > 0;          if (resubmission) {            LOGGER.warn("StepInstance " + stepInstance.getId() + " is being re-run following a failure.");          }          final Step step=stepInstance.getStep(jobs);          final boolean canRunRemotely=true;          final int priority=step.getSerialGroup() == null || step instanceof WriteFastaFileStep ? 4 : 8;          final boolean useHighMemoryWorker=resubmission && workerRunnerHighMemory != null && canRunRemotely;          messageSender.sendMessage(stepInstance,useHighMemoryWorker,priority,canRunRemotely);          statsUtil.addToSubmittedStepInstances(stepInstance);        }      }      progressReport();      Thread.sleep(1000);      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("Step instance statistics");        LOGGER.debug("Step instances left to run: " + stepInstanceDAO.retrieveUnfinishedStepInstances().size());        LOGGER.debug("Total StepInstances: " + stepInstanceDAO.count());      }      statsUtil.setTotalJobs(stepInstanceDAO.count());      statsUtil.setUnfinishedJobs(stepInstanceDAO.retrieveUnfinishedStepInstances().size());      statsUtil.displayMasterProgress();    }  } catch (  JMSException e) {    LOGGER.error("JMSException thrown by ProductionMaster: ",e);  }catch (  Exception e) {    LOGGER.error("Exception thrown by ProductionMaster: ",e);  }  LOGGER.debug("Ending");}  }
class C{  private static boolean canCompleteNodePath(Entity start,Entity end,ArrayList<Entity> network,int startPosition,List<ECMInfo> allECMInfo){  Entity spotter=network.get(startPosition);  ECMInfo spotterStartECM=ComputeECM.getECMEffects(spotter,start.getPosition(),spotter.getPosition(),true,allECMInfo);  boolean isC3BDefeated=start.hasBoostedC3() && (spotterStartECM != null) && spotterStartECM.isAngelECM();  boolean isNovaDefeated=start.hasNovaCEWS() && (spotterStartECM != null) && spotterStartECM.isNovaECM();  boolean isC3Defeated=!(start.hasBoostedC3() || start.hasNovaCEWS()) && (spotterStartECM != null) && spotterStartECM.isECM();  if (isC3BDefeated || isNovaDefeated || isC3Defeated) {    return false;  }  ECMInfo spotterEndECM=ComputeECM.getECMEffects(spotter,spotter.getPosition(),end.getPosition(),true,allECMInfo);  isC3BDefeated=start.hasBoostedC3() && (spotterEndECM != null) && spotterEndECM.isAngelECM();  isNovaDefeated=start.hasNovaCEWS() && (spotterEndECM != null) && spotterEndECM.isNovaECM();  isC3Defeated=!(start.hasBoostedC3() || start.hasNovaCEWS()) && (spotterEndECM != null) && spotterEndECM.isECM();  if (!(isC3BDefeated || isNovaDefeated || isC3Defeated)) {    return true;  }  for (++startPosition; startPosition < network.size(); startPosition++) {    if (Compute.canCompleteNodePath(spotter,end,network,startPosition,allECMInfo)) {      return true;    }  }  return false;}  }
class C{  public void show(FragmentManager manager,String tag){  mDismissed=false;  mShownByMe=true;  FragmentTransaction ft=manager.beginTransaction();  ft.add(this,tag);  ft.commit();}  }
class C{  public final void removeCallbacksAndMessages(Object token){  mExec.removeCallbacksAndMessages(token);}  }
class C{  public UpdateWorkingSetModificationStraregy(final IWorkingSet oldValue,final IWorkingSet newValue){  this.oldValue=oldValue;  this.newValue=newValue;}  }
class C{  public LruMap(int maxEntries){  super(maxEntries,0.75f,true);  this.maxEntries=maxEntries;}  }
class C{  public static Map<String,Point> readOneToOneCenters(final InputStream stream) throws IOException {  final Map<String,Point> mapping=new HashMap<>();  try (InputStreamReader inputStreamReader=new InputStreamReader(stream);LineNumberReader reader=new LineNumberReader(inputStreamReader)){    String current=reader.readLine();    while (current != null) {      if (current.trim().length() != 0) {        readSingle(current,mapping);      }      current=reader.readLine();    }  }  finally {    stream.close();  }  return mapping;}  }
class C{  public static void main(String[] args){  Tailor tailor=new Tailor();  try {    tailor.configuration=new Configuration(args);    if (tailor.configuration.shouldPrintHelp()) {      tailor.configuration.printHelp();      System.exit(ExitCode.success());    }    if (tailor.configuration.shouldPrintVersion()) {      System.out.println(new ConfigProperties().getVersion());      System.exit(ExitCode.success());    }    if (tailor.configuration.shouldPrintRules()) {      Printer.printRules();      System.exit(ExitCode.success());    }    String xcodeprojPath=tailor.configuration.getXcodeprojPath();    if (xcodeprojPath != null) {      System.exit(XcodeIntegrator.setupXcode(xcodeprojPath));    }    Set<String> fileNames=tailor.configuration.getFilesToAnalyze();    if (fileNames.size() == 0) {      tailor.exitWithNoSourceFilesError();    }    if (tailor.configuration.shouldListFiles()) {      System.out.println(Messages.FILES_TO_BE_ANALYZED);      fileNames.forEach(null);      System.exit(ExitCode.success());    }    tailor.analyzeFiles(fileNames);  } catch (  ParseException|CLIArgumentParserException e) {    Tailor.handleCLIException(e);  }catch (  YAMLException e) {    Tailor.handleYAMLException(e);  }catch (  IOException e) {    Tailor.handleIOException(e);  }}  }
class C{  private void requestTime(UUID rmtNodeId){  ClusterNode node=ctx.discovery().node(rmtNodeId);  if (node != null) {    InetAddress addr=node.attribute(ATTR_TIME_SERVER_HOST);    int port=node.attribute(ATTR_TIME_SERVER_PORT);    try {      GridClockMessage req=new GridClockMessage(ctx.localNodeId(),rmtNodeId,currentTime(),0);      srv.sendPacket(req,addr,port);    } catch (    IgniteCheckedException e) {      LT.error(log,e,"Failed to send time request to remote node [rmtNodeId=" + rmtNodeId + ", addr="+ addr+ ", port="+ port+ ']');    }  } else   onNodeLeft(rmtNodeId);}  }
class C{  protected GitlabUrl subfolder(String subfolder){  this.subfolder=subfolder;  return this;}  }
class C{  protected Object createEntranceTransition(){  return null;}  }
class C{  public Class<? extends Annotation> annotationType(){  return annotationType;}  }
class C{  private void cleanUp(){  if (rehash()) {    return;  }  if (size == 0) {    return;  }  int index=clean;  Object[] table=this.table;  for (int counter=table.length; counter > 0; counter>>=1, index=next(index)) {    Object k=table[index];    if (k == TOMBSTONE || k == null) {      continue;    }    @SuppressWarnings("unchecked") Reference<ThreadLocal<?>> reference=(Reference<ThreadLocal<?>>)k;    if (reference.get() == null) {      table[index]=TOMBSTONE;      table[index + 1]=null;      tombstones++;      size--;    }  }  clean=index;}  }
class C{  public boolean hasUri(){  return hasExtension(Uri.class);}  }
class C{  public Chunk(final Seed dhtTarget){  super();  this.dhtTarget=dhtTarget;  this.containers=new ReferenceContainerCache<WordReference>(Segment.wordReferenceFactory,Segment.wordOrder,Word.commonHashLength);  this.references=new RowHandleSet(WordReferenceRow.urlEntryRow.primaryKeyLength,WordReferenceRow.urlEntryRow.objectOrder,0);  this.badReferences=new RowHandleSet(WordReferenceRow.urlEntryRow.primaryKeyLength,WordReferenceRow.urlEntryRow.objectOrder,0);}  }
class C{  public void layoutContainer(Container parent){  Insets insets=parent.getInsets();  int width=insets.left;  int height=insets.top;  if (needLayout(parent)) {    int x=5;    int y=5;    for (int i=0; i < parent.getComponentCount(); i++) {      Component comp=parent.getComponent(i);      if (comp.isVisible() && comp instanceof WFNode) {        Dimension ps=comp.getPreferredSize();        comp.setLocation(x,y);        comp.setBounds(x,y,ps.width,ps.height);        width=x + ps.width;        height=y + ps.height;        if (x == 5)         x=230; else {          x=5;          y+=100;        }      }    }  } else {    for (int i=0; i < parent.getComponentCount(); i++) {      Component comp=parent.getComponent(i);      if (comp.isVisible() && comp instanceof WFNode) {        Dimension ps=comp.getPreferredSize();        Point loc=comp.getLocation();        int maxWidth=comp.getX() + ps.width;        int maxHeight=comp.getY() + ps.height;        if (width < maxWidth)         width=maxWidth;        if (height < maxHeight)         height=maxHeight;        comp.setBounds(loc.x,loc.y,ps.width,ps.height);      }    }  }  WFContentPanel panel=(WFContentPanel)parent;  panel.createLines();  width+=insets.right;  height+=insets.bottom;  m_size=new Dimension(width,height);  log.finer("Size=" + m_size);}  }
class C{  public double computeAverageLocal(int states[][],int sourceCol,int destCol,int[] othersAbsolute){  initialise();  addObservations(states,sourceCol,destCol,othersAbsolute);  return computeAverageLocalOfObservations();}  }
class C{  public final void testRemoveConstraint(){  Constraint<CharSequence> constraint1=Constraints.containsNumber();  Constraint<CharSequence> constraint2=Constraints.containsLetter();  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addConstraint(constraint1);  passwordEditText.addConstraint(constraint2);  passwordEditText.removeConstraint(constraint1);  passwordEditText.removeConstraint(constraint1);  assertEquals(1,passwordEditText.getConstraints().size());  assertEquals(constraint2,passwordEditText.getConstraints().iterator().next());}  }
class C{  public static CTag findTag(final ITreeNode<CTag> rootTag,final int tagId){  for (  final ITreeNode<CTag> c : BreadthFirstSorter.getSortedList(rootTag)) {    if (tagId == c.getObject().getId()) {      return c.getObject();    }  }  return null;}  }
class C{  @Override public int numCacheHits(){  return 0;}  }
class C{  protected EquationDefinitionImpl(){  super();}  }
class C{  private Path2D createIntermediateShape(double x,double width,double h){  int offset=10;  Path2D path=new Path2D.Double();  path.append(new Line2D.Double(x,h,x + offset,0),true);  path.append(new Line2D.Double(x + offset,0,x + width + offset,0),true);  path.append(new Line2D.Double(x + width + offset,0,x + width,h),true);  path.append(new Line2D.Double(x + width,h,x,h),true);  return path;}  }
class C{  public String toString(){  super.toString();  StringBuffer sb=new StringBuffer("SystemError: ");  sb.append(getLocalizedMessage());  if (m_detail != null)   sb.append(" (").append(m_detail).append(")");  return sb.toString();}  }
class C{  private void registerNS(Assertion assertion,String uri,String prefix){  assert assertion != null;  assert uri != null;  assert prefix != null;  assertion.getNamespaceManager().registerNamespace(new Namespace(uri,prefix));}  }
class C{  public static double ceil(double value){  if (USE_JDK_MATH) {    return Math.ceil(value);  }  return -FastMath.floor(-value);}  }
class C{  public void processTag(Token<HtmlTokenType> start,Token<HtmlTokenType> end,List<AttrStub> attrStubs){  if (CajaTreeBuilder.DEBUG) {    System.err.println("processTag(" + start + ", "+ end+ ")");  }  boolean isEndTag=CajaTreeBuilder.isEndTag(start.text);  String tagName=start.text.substring(isEndTag ? 2 : 1);  boolean isHtml=checkName(tagName);  if (isHtml) {    tagName=Strings.lower(tagName);  }  HtmlAttributes htmlAttrs=new HtmlAttributes(AttributeName.HTML);  boolean hasXmlns=false;  List<Attr> attrs=Lists.newArrayList();  if (!attrStubs.isEmpty()) {    for (    AttrStub as : attrStubs) {      String qname=as.nameTok.text;      Attr attrNode;      boolean isAttrHtml;      try {        String name;        if ("xmlns".equals(qname)) {          if (!Namespaces.HTML_NAMESPACE_URI.equals(as.value)) {            mq.addMessage(MessageType.CANNOT_OVERRIDE_DEFAULT_NAMESPACE_IN_HTML,as.nameTok.pos);          } else {            hasXmlns=true;          }          continue;        } else {          isAttrHtml=isHtml && checkName(qname);          if (isAttrHtml) {            name=Strings.lower(qname);            attrNode=maybeCreateAttributeNs(Namespaces.HTML_NAMESPACE_URI,name,as);            if (attrNode == null) {              continue;            }          } else {            name=AttributeNameFixup.fixupNameFromQname(qname);            attrNode=maybeCreateAttribute(name,as);            if (attrNode == null) {              continue;            }          }        }        attrNode.setValue(as.value);        if (needsDebugData) {          Nodes.setFilePositionFor(attrNode,as.nameTok.pos);          Nodes.setFilePositionForValue(attrNode,as.valueTok.pos);          Nodes.setRawValue(attrNode,as.valueTok.text);        }        attrs.add(attrNode);        try {          htmlAttrs.addAttribute(AttributeName.nameByString(name),as.value,XmlViolationPolicy.ALLOW);        } catch (        SAXException ex) {          if (CajaTreeBuilder.DEBUG) {            ex.printStackTrace();          }        }      } catch (      DOMException ex) {        ex.printStackTrace();        mq.addMessage(MessageType.INVALID_IDENTIFIER,MessageLevel.WARNING,as.nameTok.pos,MessagePart.Factory.valueOf(as.nameTok.text));      }    }  }  ElementName elName=elNames.get(tagName);  if (elName == null) {    elName=ElementName.elementNameByString(tagName);    if (!checkElementNameIsValid(elName,start.pos)) {      return;    }    elNames.put(tagName,elName);  }  if (processingFirstTag && elName == ElementName.HTML && !isEndTag) {    topLevelHtmlFromInput=true;  }  processingFirstTag=false;  try {    if (builder.needsDebugData) {      if (isEndTag) {        if (elName == ElementName.HTML) {          Token<HtmlTokenType> tok=Token.instance("",HtmlTokenType.TAGEND,FilePosition.startOf(start.pos));          if (!builder.wasOpened("frameset")) {            builder.setTokenContext(tok,tok);            if (!builder.wasOpened("body")) {              if (!builder.wasOpened("head")) {                builder.startTag(ElementName.HEAD,HtmlAttributes.EMPTY_ATTRIBUTES,false);                builder.endTag(ElementName.HEAD);              }              builder.headClosed();              builder.startTag(ElementName.BODY,HtmlAttributes.EMPTY_ATTRIBUTES,false);              builder.endTag(ElementName.BODY);            }            builder.bodyClosed();          }        }      }      builder.setTokenContext(start,end);    }    if (isEndTag) {      builder.endTag(elName);      if (builder.needsDebugData) {        if (elName == ElementName.BODY) {          builder.bodyClosed();        } else         if (elName == ElementName.HEAD) {          builder.headClosed();        }      }    } else {      if (hasXmlns) {        attrs.add(XMLNS_ATTR_MARKER);      }      builder.startTag(elName,toHtmlAttributes(attrs,htmlAttrs),end.text.equals("/>"));    }  } catch (  SAXException ex) {    throw new SomethingWidgyHappenedError(ex);  }}  }
class C{  private void checkVcenterUsage(Vcenter vcenter,ACLAssignmentChanges changes){  List<ACLEntry> existingAclEntries=_permissionsHelper.convertToACLEntries(vcenter.getAcls());  if (CollectionUtils.isEmpty(existingAclEntries)) {    _log.debug("vCenter {} does not have any existing acls",vcenter.getLabel());    return;  }  if (CollectionUtils.isEmpty(changes.getRemove())) {    _log.debug("There are not acls to remove from vCenter {}",vcenter.getLabel());    return;  }  Set<String> tenantsInUse=new HashSet<String>();  Set<URI> removingTenants=_permissionsHelper.getUsageURIsFromAclEntries(changes.getRemove());  Set<URI> existingTenants=_permissionsHelper.getUsageURIsFromAclEntries(existingAclEntries);  Iterator<URI> removingTenantsIterator=removingTenants.iterator();  while (removingTenantsIterator.hasNext()) {    URI removingTenant=removingTenantsIterator.next();    if (!existingTenants.contains(removingTenant)) {      continue;    }    if (ComputeSystemHelper.isVcenterInUseForTheTenant(_dbClient,vcenter.getId(),removingTenant)) {      TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,removingTenant);      tenantsInUse.add(tenant.getLabel());    }  }  if (!CollectionUtils.isEmpty(tenantsInUse)) {    throw APIException.badRequests.cannotRemoveTenant("vCener",vcenter.getLabel(),tenantsInUse);  }}  }
class C{  static public Object stringToValue(String s){  if (s.equals("")) {    return s;  }  if (s.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (s.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (s.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=s.charAt(0);  if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {    if (b == '0' && s.length() > 2 && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {      try {        return new Integer(Integer.parseInt(s.substring(2),16));      } catch (      Exception ignore) {      }    }    try {      if (s.indexOf('.') > -1 || s.indexOf('e') > -1 || s.indexOf('E') > -1) {        return Double.valueOf(s);      } else {        Long myLong=new Long(s);        if (myLong.longValue() == myLong.intValue()) {          return new Integer(myLong.intValue());        } else {          return myLong;        }      }    } catch (    Exception ignore) {    }  }  return s;}  }
class C{  public void initialize(){  super.initialize();  setScalingEnabled(false);}  }
class C{  public SVGPath verticalLineTo(double y){  if (y > Double.NEGATIVE_INFINITY && y < Double.POSITIVE_INFINITY) {    append(SVGConstants.PATH_VERTICAL_LINE_TO,y);  }  return this;}  }
class C{  public void addClassLevelLiteral(ClassOrInterfaceType type,Sequence seq){  if (classLiterals == null) {    classLiterals=new ClassLiterals();  }  classLiterals.addSequence(type,seq);}  }
class C{  private void enableButtons(){  m_M_AttributeSetInstance_ID=-1;  m_M_AttributeSetInstanceName=null;  m_M_Locator_ID=0;  int row=m_table.getSelectedRow();  boolean enabled=row != -1;  if (enabled) {    Integer ID=m_table.getSelectedRowKey();    if (ID != null) {      m_M_AttributeSetInstance_ID=ID.intValue();      m_M_AttributeSetInstanceName=(String)m_table.getValueAt(row,1);      Object oo=m_table.getValueAt(row,5);      if (oo instanceof KeyNamePair) {        KeyNamePair pp=(KeyNamePair)oo;        m_M_Locator_ID=pp.getKey();      }    }  }  confirmPanel.getOKButton().setEnabled(enabled);  log.fine("M_AttributeSetInstance_ID=" + m_M_AttributeSetInstance_ID + " - "+ m_M_AttributeSetInstanceName+ "; M_Locator_ID="+ m_M_Locator_ID);}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public static final Instances keepAttributesAt(Instances D,int indicesToRemove[],int lim){  return deleteAttributesAt(D,A.invert(indicesToRemove,lim));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private Label resolveElement(Class type){  while (type != null) {    Label label=get(type);    if (label != null) {      return label;    }    type=type.getSuperclass();  }  return null;}  }
class C{  public ReliableLog(String dirPath,LogHandler handler) throws IOException {  this(dirPath,handler,false);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  default String renderName(Generator gen,M model){  return model.getName();}  }
class C{  @Override public void onThreadBegin(){  _threadCount.incrementAndGet();  int startCount=_startingCount.decrementAndGet();  if (startCount < 0) {    _startingCount.set(0);    new IllegalStateException().printStackTrace();  }  _createCountTotal.incrementAndGet();  update();}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec05(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,null,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  protected void addEscapedCharSequence(String charSequence,String escapedVersion){  charSequencesToEscape.put(charSequence,escapedVersion);}  }
class C{  public static String[] append(String buffer[],String newElement){  String[] t=resize(buffer,buffer.length + 1);  t[buffer.length]=newElement;  return t;}  }
class C{  private static Result loginByAjaxRequest(){  Form<AuthInfo> authInfoForm=form(AuthInfo.class).bindFromRequest();  if (authInfoForm.hasErrors()) {    return badRequest(getObjectNodeWithMessage("user.login.required"));  }  User sourceUser=User.findByLoginKey(authInfoForm.get().loginIdOrEmail);  if (isUseSignUpConfirm()) {    if (User.findByLoginId(sourceUser.loginId).state == UserState.LOCKED) {      return forbidden(getObjectNodeWithMessage("user.locked"));    }  }  if (User.findByLoginId(sourceUser.loginId).state == UserState.DELETED) {    return notFound(getObjectNodeWithMessage("user.deleted"));  }  User user=authenticateWithPlainPassword(sourceUser.loginId,authInfoForm.get().password);  if (!user.isAnonymous()) {    if (authInfoForm.get().rememberMe) {      setupRememberMe(user);    }    user.lang=play.mvc.Http.Context.current().lang().code();    user.update();    addUserInfoToSession(user);    return ok("{}");  }  return forbidden(getObjectNodeWithMessage("user.login.invalid"));}  }
class C{  public ArrayBasedSet(E[] A){  this(A,null);}  }
class C{  public final boolean equals(Object o){  if (!(o instanceof Knowledge2))   return false;  Knowledge2 that=(Knowledge2)o;  return this.forbiddenRulesSpecs.equals(that.forbiddenRulesSpecs) && this.requiredRulesSpecs.equals(that.requiredRulesSpecs) && this.tierSpecs.equals(that.tierSpecs);}  }
class C{  private boolean tryPopup(final MouseEvent e){  if (e.isPopupTrigger()) {    int idx=getIndexForPoint(e.getX(),e.getY());    if (idx != -1) {      try {        tabbedPane.setSelectedIndex(idx);      } catch (      ArrayIndexOutOfBoundsException aioobe) {        resetTabbedPane();        tabbedPane.setSelectedIndex(idx);      }    }    showMenu(e);    return true;  }  return false;}  }
class C{  public IThumbnailRequest buildRequest(){  return buildRequest(getOptions());}  }
class C{  public void testLoadSearchResults_hidesSpinnerWhenRequested(){  mController.loadSearchResults(false);  verify(mFragmentMockUi,times(0)).showSpinner(true);}  }
class C{  public char last(){  if (chars.length > 0) {    pos=chars.length - 1;  } else {    pos=0;  }  return current();}  }
class C{  public static BigDecimal calculateLiFo(MProduct product,int M_AttributeSetInstance_ID,MAcctSchema as,int AD_Org_ID){  String sql="SELECT t.MovementQty, mi.Qty, il.QtyInvoiced, il.PriceActual," + " i.C_Currency_ID, i.DateAcct, i.C_ConversionType_ID, i.AD_Client_ID, i.AD_Org_ID, t.M_Transaction_ID " + "FROM M_Transaction t"+ " INNER JOIN M_MatchInv mi ON (t.M_InOutLine_ID=mi.M_InOutLine_ID)"+ " INNER JOIN C_InvoiceLine il ON (mi.C_InvoiceLine_ID=il.C_InvoiceLine_ID)"+ " INNER JOIN C_Invoice i ON (il.C_Invoice_ID=i.C_Invoice_ID) "+ "WHERE t.M_Product_ID=?";  if (AD_Org_ID != 0)   sql+=" AND t.AD_Org_ID=?"; else   if (M_AttributeSetInstance_ID != 0)   sql+=" AND t.M_AttributeSetInstance_ID=?";  sql+=" ORDER BY t.M_Transaction_ID DESC";  PreparedStatement pstmt=null;  ResultSet rs=null;  int oldTransaction_ID=0;  ArrayList<QtyCost> lifo=new ArrayList<QtyCost>();  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,product.getM_Product_ID());    if (AD_Org_ID != 0)     pstmt.setInt(2,AD_Org_ID); else     if (M_AttributeSetInstance_ID != 0)     pstmt.setInt(2,M_AttributeSetInstance_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      BigDecimal movementQty=rs.getBigDecimal(1);      int M_Transaction_ID=rs.getInt(10);      if (M_Transaction_ID == oldTransaction_ID)       continue;      M_Transaction_ID=oldTransaction_ID;      BigDecimal matchQty=rs.getBigDecimal(2);      if (matchQty == null) {        if (lifo.size() > 0) {          QtyCost pp=(QtyCost)lifo.get(lifo.size() - 1);          pp.Qty=pp.Qty.add(movementQty);          BigDecimal remainder=pp.Qty;          if (remainder.signum() == 0)           lifo.remove(lifo.size() - 1); else {            while (remainder.signum() != 0) {              if (lifo.size() == 1) {                pp.Cost=Env.ZERO;                remainder=Env.ZERO;              } else {                lifo.remove(lifo.size() - 1);                pp=(QtyCost)lifo.get(lifo.size() - 1);                pp.Qty=pp.Qty.add(movementQty);                remainder=pp.Qty;              }            }          }        } else {          QtyCost pp=new QtyCost(movementQty,Env.ZERO);          lifo.add(pp);        }        s_log.finer("Movement=" + movementQty + ", Size="+ lifo.size());        continue;      }      BigDecimal price=rs.getBigDecimal(4);      int C_Currency_ID=rs.getInt(5);      Timestamp DateAcct=rs.getTimestamp(6);      int C_ConversionType_ID=rs.getInt(7);      int Client_ID=rs.getInt(8);      int Org_ID=rs.getInt(9);      BigDecimal cost=MConversionRate.convert(product.getCtx(),price,C_Currency_ID,as.getC_Currency_ID(),DateAcct,C_ConversionType_ID,Client_ID,Org_ID);      QtyCost pp=new QtyCost(movementQty,cost);      lifo.add(pp);      s_log.finer("Movement=" + movementQty + ", Size="+ lifo.size());    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (lifo.size() == 0) {    return null;  }  QtyCost pp=(QtyCost)lifo.get(lifo.size() - 1);  s_log.finer(product.getName() + " = " + pp.Cost);  return pp.Cost;}  }
class C{  protected static void removeAllTriggers(Connection conn,String prefix) throws SQLException {  Statement stat=conn.createStatement();  ResultSet rs=stat.executeQuery("SELECT * FROM INFORMATION_SCHEMA.TRIGGERS");  Statement stat2=conn.createStatement();  while (rs.next()) {    String schema=rs.getString("TRIGGER_SCHEMA");    String name=rs.getString("TRIGGER_NAME");    if (name.startsWith(prefix)) {      name=StringUtils.quoteIdentifier(schema) + "." + StringUtils.quoteIdentifier(name);      stat2.execute("DROP TRIGGER " + name);    }  }}  }
class C{  public List<LocalTime> top(int n){  List<LocalTime> top=new ArrayList<>();  int[] values=data.toIntArray();  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());  for (int i=0; i < n && i < values.length; i++) {    top.add(PackedLocalTime.asLocalTime(values[i]));  }  return top;}  }
class C{  public Import(URI importUri,URI absoluteUri){  this(importUri,absoluteUri,null,null);}  }
class C{  public TechPanel(final GameData data,final MapPanel map){  super(data,map);}  }
class C{  public List<String> compactAttributeValue(String value){  return compactAttributeValue(value,0);}  }
class C{  public void accept(String key,String val,Long arg) throws ConfigurationException {}  }
class C{  static void phaseTransition(String phase){  CompilationStatistics.clear(phase);}  }
class C{  public boolean isPanEnabled(){  return mPanEnabled;}  }
class C{  private double logNormalDens(double x,double mean,double stdDev){  double diff=x - mean;  return -(diff * diff / (2 * stdDev * stdDev)) - m_normConst - Math.log(stdDev);}  }
class C{  public double evaluate(double x){  double retval=a[order];  for (int i=order - 1; i >= 0; i--) {    retval=x * retval + a[i];  }  return retval;}  }
class C{  public Theater(){  super();}  }
class C{  public AbstractSimpleState(S id,PseudoState<S,E> pseudoState){  this(id,null,null,null,pseudoState);}  }
class C{  public String[] toVTT(){  return new FormatVTT().toFile(this);}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
