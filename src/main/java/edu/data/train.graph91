class C{  public void addSessionListener(SessionListener l){  getSessionSupport().addSessionListener(l);}  }
class C{  public void processServerResponse(int response,com.google.android.vending.licensing.ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(Long.toString(System.currentTimeMillis() + MILLIS_PER_MINUTE));    Set<String> keys=extras.keySet();    for (    String key : keys) {      if (key.equals("VT")) {        setValidityTimestamp(extras.get(key));      } else       if (key.equals("GT")) {        setRetryUntil(extras.get(key));      } else       if (key.equals("GR")) {        setMaxRetries(extras.get(key));      } else       if (key.startsWith("FILE_URL")) {        int index=Integer.parseInt(key.substring("FILE_URL".length())) - 1;        setExpansionURL(index,extras.get(key));      } else       if (key.startsWith("FILE_NAME")) {        int index=Integer.parseInt(key.substring("FILE_NAME".length())) - 1;        setExpansionFileName(index,extras.get(key));      } else       if (key.startsWith("FILE_SIZE")) {        int index=Integer.parseInt(key.substring("FILE_SIZE".length())) - 1;        setExpansionFileSize(index,Long.parseLong(extras.get(key)));      }    }  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  public final long docFreq(){  return docFreq;}  }
class C{  private static final long yearOffset(final int year){  return yearOffset[year - 1900];}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.269 -0500",hash_original_method="03A3B0C88D7350527C9A84271D66FB59",hash_generated_method="2A0D691EF18D2CA6B1BC62CDF9C5FDF8") public TFTPClient(){  __maxTimeouts=DEFAULT_MAX_TIMEOUTS;}  }
class C{  void coreInitialized(){  startTimer();}  }
class C{  public void retainAll(Collection<T> items){  mItems.retainAll(items);  notifyDataSetChanged();}  }
class C{  public int sizeHot(){  int x=0;  for (  Segment<V> s : segments) {    x+=s.mapSize - s.queueSize - s.queue2Size;  }  return x;}  }
class C{  protected void sequence_TStructMemberList_ThisTypeRefStructural_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.200 -0400",hash_original_method="FC93D084C129233C65899CC07B40F7F6",hash_generated_method="A7160D8EBDF0300F5521F7DDE1FA928A") public LockableFileWriter(String fileName,boolean append) throws IOException {  this(fileName,append,null);}  }
class C{  @ObjectiveCName("doCallWithUid:") public Command<Long> doCall(int uid){  return modules.getCallsModule().makeCall(Peer.user(uid),false);}  }
class C{  private void handleChatEvents(){  try {    for (    final RPObject object : worldObjects.values()) {      if (object.getRPClass().subclassOf("creature") || !object.has("name")) {        continue;      }      String name=object.get("name");      for (      final RPEvent event : object.events()) {        if (event.getName().equals("private_text")) {          String text=event.get("text");          NotificationType type;          try {            type=NotificationType.valueOf(event.get("texttype"));          } catch (          final RuntimeException e) {            type=NotificationType.PRIVMSG;          }          ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(text,type));        } else         if (event.getName().equals("text")) {          ClientSingletonRepository.getUserInterface().addEventLine(new StandardHeaderedEventLine(name,event.get("text")));        }      }      if (object.has("text")) {        ClientSingletonRepository.getUserInterface().addEventLine(new StandardHeaderedEventLine(name,object.get("text")));      }    }  } catch (  final Exception e) {    e.printStackTrace();  }}  }
class C{  public static void main(String[] args){  GeometricObject[] array={new Circle(5),new Circle(8),new Rectangle(3,4),new Rectangle(4,2)};  System.out.println("Total area of elements in array: " + sumArea(array));}  }
class C{  public void close(){  if (tran != null) {    tran.close();  }}  }
class C{  protected boolean hasOutstandingChanges(){  return (txt1.hasChanged() || txt2.hasChanged() || txt3.hasChanged()|| txt4.hasChanged());}  }
class C{  public void create(int symbol,double x,double y,double size){  this.symbol=symbol;  this.x=x;  this.y=y;  this.size=size;switch (symbol) {case VectorGraphicsConstants.SYMBOL_VLINE:    createVLine(x,y,size);  break;case VectorGraphicsConstants.SYMBOL_HLINE:createHLine(x,y,size);break;case VectorGraphicsConstants.SYMBOL_PLUS:createPlus(x,y,size);break;case VectorGraphicsConstants.SYMBOL_CROSS:createCross(x,y,size);break;case VectorGraphicsConstants.SYMBOL_STAR:createStar(x,y,size);break;case VectorGraphicsConstants.SYMBOL_BOX:createBox(x,y,size);break;case VectorGraphicsConstants.SYMBOL_UP_TRIANGLE:createUpTriangle(x,y,size);break;case VectorGraphicsConstants.SYMBOL_DN_TRIANGLE:createDownTriangle(x,y,size);break;case VectorGraphicsConstants.SYMBOL_DIAMOND:createDiamond(x,y,size);break;}}  }
class C{  @Deprecated protected XmlPullParser createParser(){  Exception exception=null;  try {    return (XmlPullParser)Class.forName("org.xmlpull.mxp1.MXParser",true,XmlPullParser.class.getClassLoader()).newInstance();  } catch (  final InstantiationException e) {    exception=e;  }catch (  final IllegalAccessException e) {    exception=e;  }catch (  final ClassNotFoundException e) {    exception=e;  }  throw new StreamException("Cannot create Xpp3 parser instance.",exception);}  }
class C{  public String renderXML(String rootElementName,EventBean theEvent){  return renderXML(rootElementName,theEvent,new XMLRenderingOptions());}  }
class C{  private void updateRoomHeaderMembersStatus(){  if (null != mActionBarHeaderActiveMembers) {    if (mActionBarCustomTitle.getVisibility() == View.GONE) {      if ((null != mRoom) || (null != sRoomPreviewData)) {        int joinedMembersCount=0;        int activeMembersCount=0;        RoomState roomState=(null != sRoomPreviewData) ? sRoomPreviewData.getRoomState() : mRoom.getState();        if (null != roomState) {          Collection<RoomMember> members=roomState.getDisplayableMembers();          for (          RoomMember member : members) {            if (TextUtils.equals(member.membership,RoomMember.MEMBERSHIP_JOIN)) {              joinedMembersCount++;              User user=mSession.getDataHandler().getStore().getUser(member.getUserId());              if ((null != user) && user.isActive()) {                activeMembersCount++;              }            }          }          if ((roomState instanceof PublicRoom) && (0 == joinedMembersCount)) {            activeMembersCount=joinedMembersCount=((PublicRoom)roomState).numJoinedMembers;          }          boolean displayInvite=TextUtils.isEmpty(mEventId) && (null == sRoomPreviewData) && (1 == joinedMembersCount);          if (displayInvite) {            mActionBarHeaderActiveMembers.setVisibility(View.GONE);            mActionBarHeaderInviteMemberView.setVisibility(View.VISIBLE);          } else {            mActionBarHeaderInviteMemberView.setVisibility(View.GONE);            String text=null;            if (null != sRoomPreviewData) {              if (joinedMembersCount == 1) {                text=getResources().getString(R.string.room_title_one_member);              } else               if (joinedMembersCount > 0) {                text=getResources().getString(R.string.room_title_members,joinedMembersCount);              }            } else {              text=getString(R.string.room_header_active_members,activeMembersCount,joinedMembersCount);            }            if (!TextUtils.isEmpty(text)) {              mActionBarHeaderActiveMembers.setText(text);              mActionBarHeaderActiveMembers.setVisibility(View.VISIBLE);            } else {              mActionBarHeaderActiveMembers.setVisibility(View.GONE);            }          }        } else {          mActionBarHeaderActiveMembers.setVisibility(View.GONE);          mActionBarHeaderActiveMembers.setVisibility(View.GONE);        }      }    } else {      mActionBarHeaderActiveMembers.setVisibility(View.GONE);    }  }}  }
class C{  static Agent create(boolean preferJdwp){  Agent agent=null;  try {    if (preferJdwp) {      agent=JDWPAgent.get();    } else {      agent=JVMAgent.get();    }  } catch (  Throwable t) {    System.err.printf("Unable to create %s dynamic instrumentation agent\n",preferJdwp ? "JDWP" : "JVM");    t.printStackTrace();  }  if (agent == null) {    try {      if (preferJdwp) {        agent=JVMAgent.get();      } else {        agent=JDWPAgent.get();      }    } catch (    Throwable t) {      System.err.printf("Unable to create %s dynamic instrumentation agent\n",preferJdwp ? "JVM" : "JDWP");      t.printStackTrace();    }  }  return agent;}  }
class C{  public static Typeface create(final Context context,final String name){  Typeface result=SimpleCache.getCache(TAG).get(name);  if (result == null) {    final String fontNameOrAssetPathOrFilePath=ParamUtil.getFileNameWithPostfix(name,"ttf");    result=createFromAsset(context,fontNameOrAssetPathOrFilePath);    if (result == null) {      result=createFromFile(fontNameOrAssetPathOrFilePath);    }    if (result == null) {      result=createByName(fontNameOrAssetPathOrFilePath);    }  }  SimpleCache.getCache(TAG_TYPEFACE_NAME).put(result,name);  return SimpleCache.getCache(TAG).put(name,result);}  }
class C{  public void testIsDefaultNamespaceNull_XercesBugs(){  String message="isDefaultNamespace() should be consistent with lookupNamespaceURI(null)";  assertTrue(message,doctype.isDefaultNamespace(null));  if (sp != null) {    assertTrue(message,sp.isDefaultNamespace(null));  }  if (png != null) {    assertTrue(message,png.isDefaultNamespace(null));  }}  }
class C{  public static PatternFilterExpr filter(String eventTypeName,String tagName){  return new PatternFilterExpr(Filter.create(eventTypeName),tagName);}  }
class C{  @CanIgnoreReturnValue public static long copy(InputStream from,OutputStream to) throws IOException {  checkNotNull(from);  checkNotNull(to);  byte[] buf=createBuffer();  long total=0;  while (true) {    int r=from.read(buf);    if (r == -1) {      break;    }    to.write(buf,0,r);    total+=r;  }  return total;}  }
class C{  private void upgradeToDistributed(URI vplexURI,Volume vplexVolume,VirtualPool vpool,String transferSpeed,String taskId) throws InternalException {  try {    VirtualArray neighborhood=_dbClient.queryObject(VirtualArray.class,vplexVolume.getVirtualArray());    Set<URI> vplexes=new HashSet<URI>();    vplexes.add(vplexURI);    if (null == vplexVolume.getAssociatedVolumes() || vplexVolume.getAssociatedVolumes().isEmpty()) {      s_logger.error("VPLEX volume {} has no backend volumes.",vplexVolume.forDisplay());      throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(vplexVolume.forDisplay());    }    Iterator<String> assocIter=vplexVolume.getAssociatedVolumes().iterator();    URI existingVolumeURI=new URI(assocIter.next());    Volume existingVolume=_dbClient.queryObject(Volume.class,existingVolumeURI);    if (existingVolume == null || existingVolume.getInactive() == true) {      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,"Existing volume inactive",new Object[]{});    }    VirtualPoolCapabilityValuesWrapper cosCapabilities=new VirtualPoolCapabilityValuesWrapper();    cosCapabilities.put(VirtualPoolCapabilityValuesWrapper.SIZE,getVolumeCapacity(existingVolume));    cosCapabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,new Integer(1));    cosCapabilities.put(VirtualPoolCapabilityValuesWrapper.THIN_PROVISIONING,existingVolume.getThinlyProvisioned());    List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();    Volume createVolume=null;    VirtualArray requestedHaVarray=null;    VirtualPool requestedHaVirtualPool=vpool;    if (vpool.getHaVarrayVpoolMap() != null && !vpool.getHaVarrayVpoolMap().isEmpty()) {      for (      String haNH : vpool.getHaVarrayVpoolMap().keySet()) {        if (haNH.equals(NullColumnValueGetter.getNullURI().toString())) {          continue;        }        requestedHaVarray=_dbClient.queryObject(VirtualArray.class,new URI(haNH));        String haVirtualPool=vpool.getHaVarrayVpoolMap().get(haNH);        if (haVirtualPool.equals(NullColumnValueGetter.getNullURI().toString())) {          continue;        }        requestedHaVirtualPool=_dbClient.queryObject(VirtualPool.class,new URI(haVirtualPool));        break;      }    }    List<Recommendation> recommendations=getBlockScheduler().scheduleStorageForImport(neighborhood,vplexes,requestedHaVarray,requestedHaVirtualPool,cosCapabilities);    if (recommendations.isEmpty()) {      throw APIException.badRequests.noStorageFoundForVolumeMigration(requestedHaVirtualPool.getLabel(),requestedHaVarray.getLabel(),existingVolume.getId());    }    Recommendation recommendation=recommendations.get(0);    VPlexRecommendation vplexRecommendation=(VPlexRecommendation)recommendation;    if (false == vplexURI.equals(vplexRecommendation.getVPlexStorageSystem())) {      APIException.badRequests.vplexPlacementError(vplexVolume.getId());    }    StorageSystem vplexSystem=_dbClient.queryObject(StorageSystem.class,vplexURI);    Project vplexProject=getVplexProject(vplexSystem,_dbClient,_tenantsService);    VirtualArray haVirtualArray=_dbClient.queryObject(VirtualArray.class,vplexRecommendation.getVirtualArray());    createVolume=prepareVolumeForRequest(getVolumeCapacity(existingVolume),vplexProject,haVirtualArray,requestedHaVirtualPool,vplexRecommendation.getSourceStorageSystem(),vplexRecommendation.getSourceStoragePool(),vplexVolume.getLabel() + "-1",ResourceOperationTypeEnum.CREATE_BLOCK_VOLUME,taskId,_dbClient);    createVolume.addInternalFlags(Flag.INTERNAL_OBJECT);    _dbClient.updateObject(createVolume);    VolumeDescriptor desc=new VolumeDescriptor(VolumeDescriptor.Type.BLOCK_DATA,createVolume.getStorageController(),createVolume.getId(),createVolume.getPool(),cosCapabilities);    descriptors.add(desc);    desc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,vplexVolume.getStorageController(),vplexVolume.getId(),vplexVolume.getPool(),cosCapabilities);    descriptors.add(desc);    try {      s_logger.info("Calling VPlex controller.");      VPlexController controller=getController();      controller.importVolume(vplexURI,descriptors,null,null,vpool.getId(),null,transferSpeed,Boolean.TRUE,taskId);    } catch (    InternalException ex) {      s_logger.error("ControllerException on upgradeToDistributed",ex);      String errMsg=String.format("ControllerException: %s",ex.getMessage());      Operation statusUpdate=new Operation(Operation.Status.error.name(),errMsg);      _dbClient.updateTaskOpStatus(Volume.class,vplexVolume.getId(),taskId,statusUpdate);      throw ex;    }  } catch (  URISyntaxException ex) {    s_logger.debug("URISyntaxException",ex);  }}  }
class C{  public static DetailsFragment newInstance(int index){  DetailsFragment f=new DetailsFragment();  Bundle args=new Bundle();  args.putInt("index",index);  f.setArguments(args);  return f;}  }
class C{  public void init(){  if (!this.isInit) {    this.isInit=true;  }}  }
class C{  private void writeRawCounter(){  mPrefsManager.setContextualSearchTapTriggeredPromoCount(mCounter);}  }
class C{  public void initializeActiveSlotsList(final List<String> slotList){}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.SINGLE_IS_A__EXTENDS_NAME_1:    return EXTENDS_NAME_1_EDEFAULT == null ? extendsName_1 != null : !EXTENDS_NAME_1_EDEFAULT.equals(extendsName_1);case UmplePackage.SINGLE_IS_A__ANONYMOUS_SINGLE_IS_A11:  return anonymous_singleIsA_1_1 != null && !anonymous_singleIsA_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public List<Poi> queryForBackendId(String backendId){  return poiDao.queryForBackendId(backendId);}  }
class C{  public static void clear(Color color){  offscreen.setColor(color);  offscreen.fillRect(0,0,width,height);  offscreen.setColor(penColor);  draw();}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Class[] getClassContext()")) {    java_lang_SecurityManager_getClassContext(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.ClassLoader currentClassLoader0()")) {    java_lang_SecurityManager_currentClassLoader0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class currentLoadedClass0()")) {    java_lang_SecurityManager_currentLoadedClass0(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public boolean isExcludeSerNo(int AD_Column_ID,boolean isSOTrx){  getMAttributeSet();  if (m_mas != null)   return m_mas.isExcludeSerNo(AD_Column_ID,isSOTrx);  return false;}  }
class C{  public final Mat22 addLocal(final Mat22 B){  ex.x+=B.ex.x;  ex.y+=B.ex.y;  ey.x+=B.ey.x;  ey.y+=B.ey.y;  return this;}  }
class C{  private static void thresholdBlock(byte[] luminances,int xoffset,int yoffset,int threshold,int stride,BitMatrix matrix){  for (int y=0, offset=yoffset * stride + xoffset; y < BLOCK_SIZE; y++, offset+=stride) {    for (int x=0; x < BLOCK_SIZE; x++) {      if ((luminances[offset + x] & 0xFF) <= threshold) {        matrix.set(xoffset + x,yoffset + y);      }    }  }}  }
class C{  public void sendBlockEntityChange(Location location,GlowBlockEntity type,CompoundTag nbt){  checkNotNull(location,"Location cannot be null");  checkNotNull(type,"Type cannot be null");  checkNotNull(nbt,"NBT cannot be null");  afterBlockChanges.add(new UpdateBlockEntityMessage(location.getBlockX(),location.getBlockY(),location.getBlockZ(),type.getValue(),nbt));}  }
class C{  public String toSourceCode(DoubleMatrix1D matrix){  Formatter copy=(Formatter)this.clone();  copy.setPrintShape(false);  copy.setColumnSeparator(", ");  String lead="{";  String trail="};";  return lead + copy.toString(matrix) + trail;}  }
class C{  public void updateTarget(){  setFireEnabled(false);  IGame game=clientgui.getClient().getGame();  if ((ce() != null) && ce().canSpot() && (target != null)&& game.getOptions().booleanOption("indirect_fire")) {    boolean hasLos=LosEffects.calculateLos(game,cen,target).canSee();    if (game.getOptions().booleanOption("double_blind") && !Compute.inVisualRange(game,ce(),target) && !Compute.inSensorRange(game,ce(),target,null)) {      hasLos=false;    }    setSpotEnabled(hasLos);  } else {    setSpotEnabled(false);  }  final int weaponId=clientgui.mechD.wPan.getSelectedWeaponNum();  if (isStrafing && weaponId != -1) {    clientgui.mechD.wPan.wTargetR.setText(Messages.getString("FiringDisplay.Strafing.TargetLabel"));    updateStrafingTargets();  } else   if ((target != null) && (target.getPosition() != null) && (weaponId != -1)&& (ce() != null)) {    ToHitData toHit;    if (ash.inAimingMode()) {      Mounted weapon=ce().getEquipment(weaponId);      boolean aiming=ash.isAimingAtLocation() && ash.allowAimedShotWith(weapon);      ash.setEnableAll(aiming);      if (aiming) {        toHit=WeaponAttackAction.toHit(game,cen,target,weaponId,ash.getAimingAt(),ash.getAimingMode(),false);        clientgui.mechD.wPan.wTargetR.setText(target.getDisplayName() + " (" + ash.getAimingLocation()+ ")");      } else {        toHit=WeaponAttackAction.toHit(game,cen,target,weaponId,Entity.LOC_NONE,IAimingModes.AIM_MODE_NONE,false);        clientgui.mechD.wPan.wTargetR.setText(target.getDisplayName());      }      ash.setPartialCover(toHit.getCover());    } else {      toHit=WeaponAttackAction.toHit(game,cen,target,weaponId,Entity.LOC_NONE,IAimingModes.AIM_MODE_NONE,false);      clientgui.mechD.wPan.wTargetR.setText(target.getDisplayName());    }    int effectiveDistance=Compute.effectiveDistance(game,ce(),target);    clientgui.mechD.wPan.wRangeR.setText("" + effectiveDistance);    Mounted m=ce().getEquipment(weaponId);    if (m.getType().hasFlag(WeaponType.F_CWS)) {      clientgui.mechD.wPan.selectWeapon(weaponId);    }    if (m.isUsedThisRound()) {      clientgui.mechD.wPan.wToHitR.setText(Messages.getString("FiringDisplay.alreadyFired"));      setFireEnabled(false);    } else     if (m.getType().hasFlag(WeaponType.F_AUTO_TARGET)) {      clientgui.mechD.wPan.wToHitR.setText(Messages.getString("FiringDisplay.autoFiringWeapon"));      setFireEnabled(false);    } else     if (toHit.getValue() == TargetRoll.IMPOSSIBLE) {      clientgui.mechD.wPan.wToHitR.setText(toHit.getValueAsString());      setFireEnabled(false);    } else     if (toHit.getValue() == TargetRoll.AUTOMATIC_FAIL) {      clientgui.mechD.wPan.wToHitR.setText(toHit.getValueAsString());      setFireEnabled(true);    } else {      boolean natAptGunnery=ce().getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_GUNNERY);      clientgui.mechD.wPan.wToHitR.setText(toHit.getValueAsString() + " (" + Compute.oddsAbove(toHit.getValue(),natAptGunnery)+ "%)");      setFireEnabled(true);    }    clientgui.mechD.wPan.toHitText.setText(toHit.getDesc());    setSkipEnabled(true);  } else {    clientgui.mechD.wPan.wTargetR.setText("---");    clientgui.mechD.wPan.wRangeR.setText("---");    clientgui.mechD.wPan.wToHitR.setText("---");    clientgui.mechD.wPan.toHitText.setText("");  }  if ((weaponId != -1) && (ce() != null) && !isStrafing) {    Mounted m=ce().getEquipment(weaponId);    setFireModeEnabled(m.isModeSwitchable());  }  updateSearchlight();  if ((ce() != null) && ce().isHidden()) {    setFireEnabled(false);    setTwistEnabled(false);    setFindClubEnabled(false);    setFlipArmsEnabled(false);    setStrafeEnabled(false);    clientgui.mechD.wPan.toHitText.setText("Hidden units are only allowed to spot!");  }}  }
class C{  public static CompiereLabelUI createUI(JComponent c){  return adempiereLabelUI;}  }
class C{  private int connectionStatus(final URLConnection connection) throws IOException, RestException {  int statusCode;  if (connection instanceof HttpsURLConnection) {    final HttpsURLConnection httpsURLConnection=(HttpsURLConnection)connection;    statusCode=httpsURLConnection.getResponseCode();  } else   if (connection instanceof HttpURLConnection) {    final HttpURLConnection httpURLConnection=(HttpURLConnection)connection;    statusCode=httpURLConnection.getResponseCode();  } else {    final String className=connection != null ? connection.getClass().getName() : "null";    throw new RestException("Expecting a URLConnection of type " + HttpURLConnection.class.getName() + " or "+ HttpsURLConnection.class.getName()+ ", found "+ className);  }  return statusCode;}  }
class C{  public Implementation(){  super();  plugin=this;}  }
class C{  private DayOfWeek toISOfromCalendarDOW(int i){  return DayOfWeek.of(Math.floorMod(i - 2,7) + 1);}  }
class C{  public static void editGlobalEdgeComment(final AbstractSQLProvider provider,final INaviEdge edge,final Integer commentId,final Integer userId,final String newComment) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE00533: provider argument can not be null");  Preconditions.checkNotNull(edge,"IE00560: codeNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE00561: comment argument can not be null");  Preconditions.checkNotNull(userId,"IE00562: userId argument can not be null");  PostgreSQLCommentFunctions.editComment(provider,commentId,userId,newComment);}  }
class C{  @Override public Adapter adapt(Notifier notifier,Object type){  return super.adapt(notifier,this);}  }
class C{  protected String doIt() throws Exception {  log.info("M_Warehouse_ID=" + p_M_Warehouse_ID + ", C_BPartner_ID="+ p_C_BPartner_ID+ " - ReplenishmentCreate="+ p_ReplenishmentCreate+ ", C_DocType_ID="+ p_C_DocType_ID);  if (p_ReplenishmentCreate != null && p_C_DocType_ID == 0)   throw new AdempiereUserError("@FillMandatory@ @C_DocType_ID@");  MWarehouse wh=MWarehouse.get(getCtx(),p_M_Warehouse_ID);  if (wh.get_ID() == 0)   throw new AdempiereSystemError("@FillMandatory@ @M_Warehouse_ID@");  prepareTable();  fillTable(wh);  if (p_ReplenishmentCreate == null)   return "OK";  MDocType dt=MDocType.get(getCtx(),p_C_DocType_ID);  if (!dt.getDocBaseType().equals(p_ReplenishmentCreate))   throw new AdempiereSystemError("@C_DocType_ID@=" + dt.getName() + " <> "+ p_ReplenishmentCreate);  if (p_ReplenishmentCreate.equals("POO"))   createPO(); else   if (p_ReplenishmentCreate.equals("POR"))   createRequisition(); else   if (p_ReplenishmentCreate.equals("MMM"))   createMovements(); else   if (p_ReplenishmentCreate.equals("DOO"))   createDO();  return m_info;}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes atts) throws org.xml.sax.SAXException {  if (Start_Doc == 0) {    init();  }  String elementValue=null;  if ("".equals(uri))   elementValue=qName; else   elementValue=uri + localName;  if (elementValue.equals("adempiereAD")) {    log.info("adempiereAD updateMode=" + m_UpdateMode);    AttributesImpl attsOut=new AttributesImpl();    logDocument.startElement("","","adempiereDocument",attsOut);    logDocument.startElement("","","header",attsOut);    logDocument.characters((atts.getValue("Name") + " Install Log").toCharArray(),0,(atts.getValue("Name") + " Install Log").length());    logDocument.endElement("","","header");    logDocument.startElement("","","H3",attsOut);    logDocument.characters(("Package Name:").toCharArray(),0,("Package Name:").length());    logDocument.endElement("","","H3");    logDocument.startElement("","","packagename4log",attsOut);    logDocument.characters(atts.getValue("Name").toCharArray(),0,atts.getValue("Name").length());    logDocument.endElement("","","packagename4log");    logDocument.startElement("","","H3",attsOut);    logDocument.characters(("Version:").toCharArray(),0,("Version:").length());    logDocument.endElement("","","H3");    logDocument.startElement("","","Version",attsOut);    logDocument.characters(atts.getValue("Version").toCharArray(),0,atts.getValue("Version").length());    logDocument.endElement("","","Version");    logDocument.startElement("","","H3",attsOut);    logDocument.characters(("Package Install Date:").toCharArray(),0,("Package Install Date:").length());    logDocument.endElement("","","H3");    logDocument.startElement("","","installDate",attsOut);    logDocument.characters(logDate.toCharArray(),0,logDate.length());    logDocument.endElement("","","installDate");    logDocument.startElement("","","H3",attsOut);    logDocument.characters(("Min. Compiere Version:").toCharArray(),0,("Min. Compiere Version:").length());    logDocument.endElement("","","H3");    logDocument.startElement("","","CompVer",attsOut);    logDocument.characters(atts.getValue("CompVer").toCharArray(),0,atts.getValue("CompVer").length());    logDocument.endElement("","","CompVer");    logDocument.startElement("","","H3",attsOut);    logDocument.characters(("Min. Database Date:").toCharArray(),0,("Min. Database Date:").length());    logDocument.endElement("","","H3");    logDocument.startElement("","","DataBase",attsOut);    logDocument.characters(atts.getValue("DataBase").toCharArray(),0,atts.getValue("DataBase").length());    logDocument.endElement("","","DataBase");    createImp_Sum_table("AD_Package_Imp_Backup");    createImp_Sum_table("AD_Package_Imp");    createImp_Sum_table("AD_Package_Imp_Inst");    createImp_Sum_table("AD_Package_Imp_Detail");    String sql2="SELECT AD_PACKAGE_IMP_INST_ID FROM AD_PACKAGE_IMP_INST WHERE NAME =" + "'" + atts.getValue("Name") + "' AND PK_VERSION ='"+ atts.getValue("Version")+ "'";    int PK_preInstalled=DB.getSQLValue(m_trxName,sql2);    AD_Package_Imp_ID=DB.getNextID(Env.getAD_Client_ID(m_ctx),"AD_Package_Imp",null);    StringBuffer sqlB=new StringBuffer("INSERT INTO AD_Package_Imp").append("(AD_Client_ID, AD_Org_ID, CreatedBy, UpdatedBy, ").append("AD_PACKAGE_IMP_ID, RELEASENO, PK_VERSION, VERSION ").append(", DESCRIPTION, NAME, CREATOR").append(", CREATORCONTACT, CREATEDDATE,UPDATEDDATE,PK_STATUS)").append("VALUES(").append(" " + Env.getAD_Client_ID(m_ctx)).append(", " + Env.getAD_Org_ID(m_ctx)).append(", " + Env.getAD_User_ID(m_ctx)).append(", " + Env.getAD_User_ID(m_ctx)).append(", " + AD_Package_Imp_ID).append(", '" + atts.getValue("CompVer")).append("', '" + atts.getValue("Version")).append("', '" + atts.getValue("DataBase")).append("', '" + atts.getValue("Description").replaceAll("'","''")).append("', '" + atts.getValue("Name")).append("', '" + atts.getValue("creator")).append("', '" + atts.getValue("creatorcontact")).append("', '" + atts.getValue("createddate")).append("', '" + atts.getValue("updateddate")).append("', '" + PK_Status).append("')");    Env.getAD_User_ID(m_ctx);    int no=DB.executeUpdate(sqlB.toString(),m_trxName);    if (no == -1)     log.info("Insert to Package import failed");    if (PK_preInstalled == -1) {      AD_Package_Imp_Inst_ID=DB.getNextID(Env.getAD_Client_ID(m_ctx),"AD_Package_Imp_Inst",null);      sqlB=new StringBuffer("INSERT INTO AD_Package_Imp_Inst").append("(AD_Client_ID, AD_Org_ID, CreatedBy, UpdatedBy, ").append("AD_PACKAGE_IMP_INST_ID, RELEASENO, PK_VERSION, VERSION ").append(", DESCRIPTION, NAME, CREATOR").append(", CREATORCONTACT, CREATEDDATE,UPDATEDDATE,PK_STATUS)").append("VALUES(").append(" " + Env.getAD_Client_ID(m_ctx)).append(", " + Env.getAD_Org_ID(m_ctx)).append(", " + Env.getAD_User_ID(m_ctx)).append(", " + Env.getAD_User_ID(m_ctx)).append(", " + AD_Package_Imp_Inst_ID).append(", '" + atts.getValue("CompVer")).append("', '" + atts.getValue("Version")).append("', '" + atts.getValue("DataBase")).append("', '" + atts.getValue("Description").replaceAll("'","''")).append("', '" + atts.getValue("Name")).append("', '" + atts.getValue("creator")).append("', '" + atts.getValue("creatorcontact")).append("', '" + atts.getValue("createddate")).append("', '" + atts.getValue("updateddate")).append("', '" + PK_Status).append("')");      Env.getAD_User_ID(m_ctx);      no=DB.executeUpdate(sqlB.toString(),m_trxName);      if (no == -1)       log.info("Insert to Package List import failed");    } else {      AD_Package_Imp_Inst_ID=PK_preInstalled;      sqlB=new StringBuffer("UPDATE AD_Package_Imp_Inst " + "SET PK_Status = '" + PK_Status + "' WHERE AD_Package_Imp_Inst_ID = "+ AD_Package_Imp_Inst_ID);      no=DB.executeUpdate(sqlB.toString(),m_trxName);      if (no == -1)       log.info("Update to package summary failed");    }    Env.setContext(m_ctx,"AD_Package_Imp_ID",AD_Package_Imp_ID);    Env.setContext(m_ctx,"UpdateMode",m_UpdateMode);    Env.setContext(m_ctx,"TrxName",m_trxName);    Env.setContext(m_ctx,"PackageDirectory",packageDirectory);    m_ctx.put("LogDocument",logDocument);    m_ctx.put("PackInProcess",packIn);  } else   if (elementValue.equals("menu")) {    Element e=new Element(uri,localName,qName,new AttributesImpl(atts));    if (stack.size() > 0)     e.parent=stack.peek();    stack.push(e);    menus.add(e);  } else {    Element e=new Element(uri,localName,qName,new AttributesImpl(atts));    if (stack.size() > 0)     e.parent=stack.peek();    stack.push(e);    if (elementValue.equals("workflow")) {      workflow.add(e);    }    if (elementValue.equals("workflowNode")) {      nodes.add(e);    }    ElementHandler handler=handlers.get(elementValue);    if (handler != null)     handler.startElement(m_ctx,e);    if (e.defer) {      defer.add(new DeferEntry(e,true));    }  }}  }
class C{  public boolean isReadOnly(){  Object oo=get_Value(COLUMNNAME_IsReadOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public UpdateResponse commit(boolean waitFlush,boolean waitSearcher,boolean softCommit) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.commit(waitFlush,waitSearcher,softCommit);  if (this.solr1 != null)   ur=this.solr1.commit(waitFlush,waitSearcher,softCommit);  return ur;}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatasubstringvalue.class,args);}  }
class C{  public void addAll(List<Offer> appOffers){  this.appOffers=appOffers;  notifyBinderDataSetChanged();}  }
class C{  Calendar toCalendar(String value,String pattern,Locale locale){  Calendar calendar=null;  try {    DateFormat format=(locale == null) ? new SimpleDateFormat(pattern) : new SimpleDateFormat(pattern,locale);    format.setLenient(false);    format.parse(value);    calendar=format.getCalendar();  } catch (  Exception e) {    fail("Error creating Calendar value ='" + value + ", pattern='"+ pattern+ "' "+ e.toString());  }  return calendar;}  }
class C{  @Inject public BranchPresenter(BranchView view,DtoFactory dtoFactory,GitServiceClient service,GitLocalizationConstant constant,AppContext appContext,NotificationManager notificationManager,GitOutputConsoleFactory gitOutputConsoleFactory,ProcessesPanelPresenter processesPanelPresenter,DialogFactory dialogFactory){  this.view=view;  this.dtoFactory=dtoFactory;  this.gitOutputConsoleFactory=gitOutputConsoleFactory;  this.consolesPanelPresenter=processesPanelPresenter;  this.dialogFactory=dialogFactory;  this.view.setDelegate(this);  this.service=service;  this.constant=constant;  this.appContext=appContext;  this.notificationManager=notificationManager;}  }
class C{  protected void toString(StringBuilder sb,int indent,TreeNode node){  int indent2=indent + 2;  for (int i=0; i < indent; i++)   sb.append(' ');  sb.append('<');  sb.append(node.getName());  Iterator names=node.findAttributes();  while (names.hasNext()) {    sb.append(' ');    String name=(String)names.next();    sb.append(name);    sb.append("=\"");    String value=node.findAttribute(name);    sb.append(value);    sb.append("\"");  }  sb.append(">\n");  String body=node.getBody();  if ((body != null) && (body.length() > 0)) {    for (int i=0; i < indent2; i++)     sb.append(' ');    sb.append(body);    sb.append("\n");  }  Iterator<TreeNode> children=node.findChildren();  while (children.hasNext()) {    TreeNode child=children.next();    toString(sb,indent2,child);  }  for (int i=0; i < indent; i++)   sb.append(' ');  sb.append("</");  sb.append(node.getName());  sb.append(">\n");}  }
class C{  public static Color parseColorFromProperties(Properties p,String propName,String dfault,boolean forceAlpha) throws NumberFormatException {  return ColorFactory.parseColorFromProperties(p,propName,dfault,forceAlpha);}  }
class C{  public void close(){  send("exit");  this.getSession().disconnect();}  }
class C{  public static void removeAllViews(ViewGroup viewGroup){  if (viewGroup != null) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {      if (viewGroup.isInLayout()) {        viewGroup.removeAllViewsInLayout();      } else {        viewGroup.removeAllViews();      }    } else {      viewGroup.removeAllViews();    }  }}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    this.put(key,value);  }  return this;}  }
class C{  public T caseParenthesizedExpression(ParenthesizedExpression object){  return null;}  }
class C{  public void releaseMap(){  if (tiles != null) {    tiles=null;  }  if (atlasIndexArray_ != null) {    atlasIndexArray_=null;  }}  }
class C{  public static CharacterReference lookup(String kernel,int start,int end){  CharacterReferenceEx probe;  probe=new CharacterReferenceEx();  probe.setKernel(kernel);  probe.setStart(start);  probe.setEnd(end);  return (lookup(probe));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.333 -0500",hash_original_method="FC3CFC9E56AD635CFF4ED177A60462DA",hash_generated_method="F40A8ABA2D3BE916A4E7D7B2894B30DE") public int size(){  return count.get();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public AztecDetectorResult detect() throws NotFoundException {  Point pCenter=getMatrixCenter();  Point[] bullEyeCornerPoints=getBullEyeCornerPoints(pCenter);  extractParameters(bullEyeCornerPoints);  ResultPoint[] corners=getMatrixCornerPoints(bullEyeCornerPoints);  BitMatrix bits=sampleGrid(image,corners[shift % 4],corners[(shift + 3) % 4],corners[(shift + 2) % 4],corners[(shift + 1) % 4]);  return new AztecDetectorResult(bits,corners,compact,nbDataBlocks,nbLayers);}  }
class C{  public void testManagedBean() throws Exception {  String beanName="com.sun.faces.TestBean";  ManagedBeanInfo beanInfo=new ManagedBeanInfo(beanName,beanName,"session",null,null,null,null);  ApplicationFactory aFactory=(ApplicationFactory)FactoryFinder.getFactory(FactoryFinder.APPLICATION_FACTORY);  ApplicationImpl application=(ApplicationImpl)aFactory.getApplication();  ApplicationAssociate associate=ApplicationAssociate.getCurrentInstance();  BeanManager manager=associate.getBeanManager();  manager.register(beanInfo);  VariableResolver variableResolver=application.getVariableResolver();  Object result=variableResolver.resolveVariable(getFacesContext(),beanName);  assertTrue(result instanceof TestBean);}  }
class C{  public static void fitViewToBounds(Display display,Rectangle2D bounds,long duration){  fitViewToBounds(display,bounds,null,duration);}  }
class C{  private String startSetToString(){  StringBuffer FString=new StringBuffer();  boolean didPrint;  if (m_starting == null) {    return getStartSet();  }  for (int i=0; i < m_starting.length; i++) {    didPrint=false;    if ((m_hasClass == false) || (m_hasClass == true && i != m_classIndex)) {      FString.append((m_starting[i] + 1));      didPrint=true;    }    if (i == (m_starting.length - 1)) {      FString.append("");    } else {      if (didPrint) {        FString.append(",");      }    }  }  return FString.toString();}  }
class C{  public boolean saveViewState(ContentValues values){  WebView web=getWebView();  if (web == null)   return false;  String filename=UUID.randomUUID().toString();  SaveCallback callback=new SaveCallback();  try {synchronized (callback) {      web.saveViewState(filename,callback);      callback.wait();    }  } catch (  Exception e) {    Log.w(LOGTAG,"Failed to save view state",e);    String path=callback.getPath();    if (path != null) {      File file=mContext.getFileStreamPath(path);      if (file.exists() && !file.delete()) {        file.deleteOnExit();      }    }    return false;  }  String path=callback.getPath();  if (path == null) {    return false;  }  File savedFile=new File(path);  if (!savedFile.exists()) {    return false;  }  values.put(Snapshots.VIEWSTATE_PATH,path.substring(path.lastIndexOf('/') + 1));  values.put(Snapshots.VIEWSTATE_SIZE,savedFile.length());  return true;}  }
class C{  public boolean reverseCorrectIt(){  log.info("reverseCorrectIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  return false;}  }
class C{  public boolean displayNotification(){  return true;}  }
class C{  public static void quickSort(short[] a,int fromIndex,int toIndex,ShortComparator c){  rangeCheck(a.length,fromIndex,toIndex);  quickSort1(a,fromIndex,toIndex - fromIndex,c);}  }
class C{  public IssueMatcher at(int expectedLineNumber,int expectedColumn){  return lineNumber(expectedLineNumber).column(expectedColumn);}  }
class C{  @Snippet public static Object instanceofDynamic(KlassPointer hub,Object object,Object trueValue,Object falseValue,@ConstantParameter boolean allowNull){  if (probability(NOT_FREQUENT_PROBABILITY,object == null)) {    isNull.inc();    if (allowNull) {      return trueValue;    } else {      return falseValue;    }  }  GuardingNode anchorNode=SnippetAnchorNode.anchor();  KlassPointer objectHub=loadHubIntrinsic(PiNode.piCastNonNull(object,anchorNode));  if (hub.isNull() || !checkUnknownSubType(hub,objectHub)) {    return falseValue;  }  return trueValue;}  }
class C{  public DBMSData(){}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_METHOD_DECLARATION__BODY:    return basicSetBody(null,msgs);case N4JSPackage.N4_METHOD_DECLARATION__LOK:  return basicSet_lok(null,msgs);case N4JSPackage.N4_METHOD_DECLARATION__FPARS:return ((InternalEList<?>)getFpars()).basicRemove(otherEnd,msgs);case N4JSPackage.N4_METHOD_DECLARATION__RETURN_TYPE_REF:return basicSetReturnTypeRef(null,msgs);case N4JSPackage.N4_METHOD_DECLARATION__TYPE_VARS:return ((InternalEList<?>)getTypeVars()).basicRemove(otherEnd,msgs);case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_TYPE_REF:return basicSetDeclaredTypeRef(null,msgs);case N4JSPackage.N4_METHOD_DECLARATION__BOGUS_TYPE_REF:return basicSetBogusTypeRef(null,msgs);case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_NAME:return basicSetDeclaredName(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Notification create(){  setAlarmAndSaveOrShow();  Log.i("ReactSystemNotification","Notification Created: " + id);  return this;}  }
class C{  @Override public void connect(){  try {    client=new AerospikeClient(node,port);    logger.debug("Aerospike connection Success");  } catch (  AerospikeException ex) {    throw new RuntimeException("closing database resource",ex);  }catch (  Throwable t) {    DTThrowable.rethrow(t);  }}  }
class C{  protected void paintClock(){  double clockRadius=Math.min(w,h) * 0.8 * 0.5;  double centerX=w / 2;  double centerY=h / 2;  Circle circle=new Circle(centerX,centerY,clockRadius);  circle.setFill(Color.WHITE);  circle.setStroke(Color.BLACK);  Text t1=new Text(centerX - 5,centerY - clockRadius + 12,"12");  Text t2=new Text(centerX - clockRadius + 3,centerY + 5,"9");  Text t3=new Text(centerX + clockRadius - 10,centerY + 3,"3");  Text t4=new Text(centerX - 3,centerY + clockRadius - 3,"6");  double sLength=clockRadius * 0.8;  double secondX=centerX + sLength * Math.sin(second * (2 * Math.PI / 60));  double secondY=centerY - sLength * Math.cos(second * (2 * Math.PI / 60));  Line sLine=new Line(centerX,centerY,secondX,secondY);  sLine.setStroke(Color.RED);  double mLength=clockRadius * 0.65;  double xMinute=centerX + mLength * Math.sin(minute * (2 * Math.PI / 60));  double minuteY=centerY - mLength * Math.cos(minute * (2 * Math.PI / 60));  Line mLine=new Line(centerX,centerY,xMinute,minuteY);  mLine.setStroke(Color.BLUE);  double hLength=clockRadius * 0.5;  double hourX=centerX + hLength * Math.sin((hour % 12 + minute / 60.0) * (2 * Math.PI / 12));  double hourY=centerY - hLength * Math.cos((hour % 12 + minute / 60.0) * (2 * Math.PI / 12));  Line hLine=new Line(centerX,centerY,hourX,hourY);  hLine.setStroke(Color.GREEN);  getChildren().clear();  getChildren().addAll(circle,t1,t2,t3,t4);  if (secondHandVisible)   getChildren().add(sLine);  if (minuteHandVisible)   getChildren().add(mLine);  if (hourHandVisible)   getChildren().add(hLine);}  }
class C{  public boolean isEmbeddedForeignKeysNamed(){  return embeddedForeignKeysNamed;}  }
class C{  private static void createThumbnailFromEXIF(@Nullable final String filePath,final int targetSize,final int maxPixels,@NonNull final SizedThumbnailBitmap sizedThumbBitmap){  if (filePath == null) {    return;  }  ExifInterface exif;  byte[] thumbData=null;  try {    exif=new ExifInterface(filePath);    thumbData=exif.getThumbnail();  } catch (  IOException ex) {    Log.w(TAG,ex);  }  BitmapFactory.Options fullOptions=new BitmapFactory.Options();  BitmapFactory.Options exifOptions=new BitmapFactory.Options();  int exifThumbWidth=0;  int fullThumbWidth=0;  if (thumbData != null) {    exifOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(thumbData,0,thumbData.length,exifOptions);    exifOptions.inSampleSize=computeSampleSize(exifOptions,targetSize,maxPixels);    exifThumbWidth=exifOptions.outWidth / exifOptions.inSampleSize;  }  fullOptions.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filePath,fullOptions);  fullOptions.inSampleSize=computeSampleSize(fullOptions,targetSize,maxPixels);  fullThumbWidth=fullOptions.outWidth / fullOptions.inSampleSize;  if (thumbData != null && exifThumbWidth >= fullThumbWidth) {    int width=exifOptions.outWidth;    int height=exifOptions.outHeight;    exifOptions.inJustDecodeBounds=false;    sizedThumbBitmap.mBitmap=BitmapFactory.decodeByteArray(thumbData,0,thumbData.length,exifOptions);    if (sizedThumbBitmap.mBitmap != null) {      sizedThumbBitmap.mThumbnailData=thumbData;      sizedThumbBitmap.mThumbnailWidth=width;      sizedThumbBitmap.mThumbnailHeight=height;    }  } else {    fullOptions.inJustDecodeBounds=false;    sizedThumbBitmap.mBitmap=BitmapFactory.decodeFile(filePath,fullOptions);  }}  }
class C{  public void testExclude() throws IOException {  CharArraySet exclusionSet=new CharArraySet(asSet("peledakan"),false);  Analyzer a=new IndonesianAnalyzer(IndonesianAnalyzer.getDefaultStopSet(),exclusionSet);  checkOneTerm(a,"peledakan","peledakan");  checkOneTerm(a,"pembunuhan","bunuh");  a.close();}  }
class C{  public static void execute(final Object[] args,final PdfDecoderInt decode_pdf){  try {    final Map<Integer,Object> map=new HashMap<Integer,Object>();    map.put(JPedalSettings.REPLACEMENT_COLOR_THRESHOLD,args[0]);    decode_pdf.modifyNonstaticJPedalParameters(map);  } catch (  final PdfException e2) {    e2.printStackTrace();  }}  }
class C{  public boolean generate(Projection proj){  Debug.message("eomgdetail","EditableOMRect.generate()");  if (rect != null)   rect.generate(proj);  for (int i=0; i < gPoints.length; i++) {    GrabPoint gp=gPoints[i];    if (gp != null) {      gp.generate(proj);    }  }  return true;}  }
class C{  public boolean teardown(){  mTeardownRequested.set(true);  NetworkUtils.stopDhcp(mIface);  return true;}  }
class C{  public List<SelectItem> parseStringIntoArrayList(String value,Converter converter){  if (value == null) {    return null;  }  String[] splitOptions=value.split(",");  ArrayList<SelectItem> optionsList=new ArrayList<SelectItem>((splitOptions.length) + 1);  for (  String optionKey : splitOptions) {    String optionLabel;    try {      optionLabel=resources.getString(optionKey);    } catch (    MissingResourceException e) {      optionLabel=optionKey;    }    if (null != converter) {    } else {      optionsList.add(new SelectItem(optionKey,optionLabel));    }  }  return optionsList;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.download_layout);  mAddDownloadTaskButton=(Button)findViewById(R.id.add_download_task1);  mDownloadListView=(ListView)findViewById(R.id.download_list1);  mDownloadAdapter=new DownloadAdapter();  mDownloadListView.setAdapter(mDownloadAdapter);  mDownloadListView.setOnItemClickListener(this);  mAddDownloadTaskButton.setOnClickListener(this);}  }
class C{  void dispatchOnLauncherTransitionStart(View v,boolean animated,boolean toWorkspace){  if (v instanceof LauncherTransitionable) {    ((LauncherTransitionable)v).onLauncherTransitionStart(mLauncher,animated,toWorkspace);  }  dispatchOnLauncherTransitionStep(v,0f);}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public void switchReadOnlyConnection(Boolean mustBeReadOnly) throws QueryException {  if (urlParser.getOptions().assureReadOnly && currentReadOnlyAsked != mustBeReadOnly) {    proxy.lock.lock();    try {      if (currentReadOnlyAsked != mustBeReadOnly) {        currentReadOnlyAsked=mustBeReadOnly;        setSessionReadOnly(mustBeReadOnly,currentProtocol);      }    }  finally {      proxy.lock.unlock();    }  }}  }
class C{  private Value readInstance(Type type,Class real,NodeMap node) throws Exception {  Node entry=node.remove(mark);  if (entry == null) {    return readReference(type,real,node);  }  String key=entry.getValue();  if (containsKey(key)) {    throw new CycleException("Element '%s' already exists",key);  }  return readValue(type,real,node,key);}  }
class C{  public String toString(){  return getStatus();}  }
class C{  public int limit(){  return limit;}  }
class C{  protected void addToMaintenanceQueue(NodePortTuple npt){  if (maintenanceQueue.contains(npt) == false) {    maintenanceQueue.add(npt);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("XXX","1.0");  assertFalse("throw_False",state);}  }
class C{  protected void Basis() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  int axesType;  if (lookahead("::",1)) {    axesType=AxisName();    nextToken();    nextToken();  } else   if (tokenIs('@')) {    axesType=OpCodes.FROM_ATTRIBUTES;    appendOp(2,axesType);    nextToken();  } else {    axesType=OpCodes.FROM_CHILDREN;    appendOp(2,axesType);  }  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  NodeTest(axesType);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 1,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public void up(){  if (!currentCompiledMethod.up(this)) {    upOneFrame();  }}  }
class C{  @Subscribe public void targetCancelAssignmentToDistributionSet(final CancelTargetAssignmentEvent cancelTargetAssignmentDistributionSetEvent){  final String controllerId=cancelTargetAssignmentDistributionSetEvent.getTarget().getControllerId();  final Long actionId=cancelTargetAssignmentDistributionSetEvent.getActionId();  final Message message=getMessageConverter().toMessage(actionId,createConnectorMessageProperties(cancelTargetAssignmentDistributionSetEvent.getTenant(),controllerId,EventTopic.CANCEL_DOWNLOAD));  amqpSenderService.sendMessage(message,cancelTargetAssignmentDistributionSetEvent.getTarget().getTargetInfo().getAddress());}  }
class C{  public void temporarilyDisconnectSource(){  if (isSource()) {    s_logger.log(Level.CONFIG,"tempCloseConnection",getDirection());    if (m_connection != null) {      rollbackChanges();      try {        m_connection.close();        m_connection=null;        m_isTempDisconnected=true;      } catch (      SQLException e) {        s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"closeConnectionError",new Object[]{getDirection(),e.getMessage()});      }    }    s_logger.log(Level.CONFIG,"tempConnectionClosed");  }}  }
class C{  private void flushFields() throws SQLException {  for (int i=0; i < isParamSet.length; i++) {    FBField field=getField(i + 1);    if (!(field instanceof FBFlushableField))     continue;    ((FBFlushableField)field).flushCachedData();  }}  }
class C{  public Long del(final byte[]... keys){  checkIsInMulti();  client.del(keys);  return client.getIntegerReply();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public void testBug9040() throws Exception {  createTable("testBug9040","(primary_key int not null primary key, data mediumblob)");  this.pstmt=this.conn.prepareStatement("replace into testBug9040 (primary_key, data) values(?,?)");  int primaryKey=1;  byte[] data="First Row".getBytes();  this.pstmt.setInt(1,primaryKey);  this.pstmt.setBinaryStream(2,new ByteArrayInputStream(data),data.length);  this.pstmt.addBatch();  primaryKey=2;  data="Second Row".getBytes();  this.pstmt.setInt(1,primaryKey);  this.pstmt.setBinaryStream(2,new ByteArrayInputStream(data),data.length);  this.pstmt.addBatch();  this.pstmt.executeBatch();}  }
class C{  public T caseExecutionEvent(ExecutionEvent object){  return null;}  }
class C{  boolean containsOption(String cmd){  return Pattern.compile(OPTION_PATTERN).matcher(cmd).find();}  }
class C{  public static URL installClassInCodebase(String className,String codebase) throws MalformedURLException {  return installClassInCodebase(className,codebase,true);}  }
class C{  public Prototype withFirstParameter(Type param){  String newDesc="(" + param.getDescriptor() + descriptor.substring(1);  StdTypeList newParams=parameterTypes.withFirst(param);  newParams.setImmutable();  Prototype result=new Prototype(newDesc,returnType,newParams);  return putIntern(result);}  }
class C{  void redrawAllEntities(){  int numEntities=game.getNoOfEntities();  numEntities=Math.max(1,numEntities);  Queue<EntitySprite> newSprites=new PriorityQueue<EntitySprite>(numEntities);  Queue<IsometricSprite> newIsometricSprites=new PriorityQueue<>(numEntities);  Map<List<Integer>,EntitySprite> newSpriteIds=new HashMap<>(numEntities);  Map<List<Integer>,IsometricSprite> newIsoSpriteIds=new HashMap<>(numEntities);  ArrayList<WreckSprite> newWrecks=new ArrayList<>();  ArrayList<IsometricWreckSprite> newIsometricWrecks=new ArrayList<>();  Enumeration<Entity> e=game.getWreckedEntities();  while (e.hasMoreElements()) {    Entity entity=e.nextElement();    if (!(entity instanceof Infantry) && (entity.getPosition() != null)) {      WreckSprite ws;      IsometricWreckSprite iws;      if (entity.getSecondaryPositions().isEmpty()) {        ws=new WreckSprite(this,entity,-1);        newWrecks.add(ws);        iws=new IsometricWreckSprite(this,entity,-1);        newIsometricWrecks.add(iws);      } else {        for (        int secondaryPos : entity.getSecondaryPositions().keySet()) {          ws=new WreckSprite(this,entity,secondaryPos);          newWrecks.add(ws);          iws=new IsometricWreckSprite(this,entity,secondaryPos);          newIsometricWrecks.add(iws);        }      }    }  }  clearC3Networks();  clearFlyOverPaths();  for (  Entity entity : game.getEntitiesVector()) {    if (entity.getPosition() == null) {      continue;    }    if ((localPlayer != null) && game.getOptions().booleanOption("double_blind") && entity.getOwner().isEnemyOf(localPlayer)&& !entity.hasSeenEntity(localPlayer)&& !entity.hasDetectedEntity(localPlayer)) {      continue;    }    if ((localPlayer != null) && game.getOptions().booleanOption("hidden_units") && entity.getOwner().isEnemyOf(localPlayer)&& entity.isHidden()) {      continue;    }    if (entity.getSecondaryPositions().isEmpty()) {      EntitySprite sprite=new EntitySprite(this,entity,-1,radarBlipImage);      newSprites.add(sprite);      newSpriteIds.put(getIdAndLoc(entity.getId(),-1),sprite);      IsometricSprite isosprite=new IsometricSprite(this,entity,-1,radarBlipImage);      newIsometricSprites.add(isosprite);      newIsoSpriteIds.put(getIdAndLoc(entity.getId(),-1),isosprite);    } else {      for (      int secondaryPos : entity.getSecondaryPositions().keySet()) {        EntitySprite sprite=new EntitySprite(this,entity,secondaryPos,radarBlipImage);        newSprites.add(sprite);        newSpriteIds.put(getIdAndLoc(entity.getId(),secondaryPos),sprite);        IsometricSprite isosprite=new IsometricSprite(this,entity,secondaryPos,radarBlipImage);        newIsometricSprites.add(isosprite);        newIsoSpriteIds.put(getIdAndLoc(entity.getId(),secondaryPos),isosprite);      }    }    if (entity.hasC3() || entity.hasC3i() || entity.hasActiveNovaCEWS()) {      addC3Link(entity);    }    if (entity.isAirborne() && (entity.getPassedThrough().size() > 1)) {      addFlyOverPath(entity);    }  }  entitySprites=newSprites;  entitySpriteIds=newSpriteIds;  isometricSprites=newIsometricSprites;  isometricSpriteIds=newIsoSpriteIds;  wreckSprites=newWrecks;  isometricWreckSprites=newIsometricWrecks;  updateEcmList();  highlightSelectedEntity();  scheduleRedraw();}  }
class C{  public void createHelmet(final int x,final int y){  final Item helmet=SingletonRepository.getEntityManager().getItem("trophy helmet");  helmet.setDescription("This is the grand prize for Deathmatch winners. The defense will increase by 1 for every deathmatch completed.");  helmet.setPosition(x,y);  zone.add(helmet,false);}  }
class C{  public Vector3f mult(Vector3f vec){  return mult(vec,null);}  }
class C{  public void removeEmail(EmailEntity email){  emails.remove(email);}  }
class C{  public User findByApiToken(@Nonnull String apiToken){  String prefix="x";  NamedParameter parameter=new NamedParameter(User.PROPERTY_TOKEN,"token",apiToken);  StringBuilder sb=new StringBuilder();  sb.append(buildQlSelect(prefix)).append(startWhere()).append(buildWhereClause(Operation.EQUALS,prefix,parameter));  return super.findOneWithJQL(sb.toString(),parameter);}  }
class C{  private String rewriteSetCookie(String value){  Matcher matcher=sessionPattern.matcher(value);  String rewritten=matcher.replaceAll("$1$2" + serverId);  if (log.isDebugEnabled() && !rewritten.equals(value)) {    log.debug("Session found and rewritten \"" + value + "\" >> "+ rewritten);  }  return rewritten;}  }
class C{  public Integer integer_attribute(String name) throws InvalidPropertiesFormatException {  String val=get_attr(name);  if (val == null)   return null;  try {    return Integer.parseInt(val);  } catch (  NumberFormatException e) {    throw new InvalidPropertiesFormatException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.279 -0400",hash_original_method="A294BF825FE516E958C00EDA16E1C69E",hash_generated_method="6AD7317BC080EB6E3AE796A7D15C25B1") public Object encode(Object value) throws EncoderException {  if (value == null) {    return null;  } else   if (value instanceof String) {    return encode((String)value);  } else {    throw new EncoderException("Objects of type " + value.getClass().getName() + " cannot be encoded using BCodec");  }}  }
class C{  public boolean remove(Object o){  for (int index=0; index < size; index++) {    if (o == elementData[index]) {      fastRemove(index);      return true;    }  }  return false;}  }
class C{  private synchronized void cacheForeignTokenArtifacts(final Token token,final StorageOSUserDAO user){  long now=System.currentTimeMillis() / (MIN_TO_MSECS);  InterProcessLock tokenLock=null;  try {    tokenLock=coordinator.getLock(token.getId().toString());    if (tokenLock == null) {      log.error("Could not acquire lock for token caching");      throw SecurityException.fatals.couldNotAcquireLockTokenCaching();    }    tokenLock.acquire();    StorageOSUserDAO userToPersist=dbClient.queryObject(StorageOSUserDAO.class,user.getId());    userToPersist=(userToPersist == null) ? new StorageOSUserDAO() : userToPersist;    userToPersist.setAttributes(user.getAttributes());    userToPersist.setCreationTime(user.getCreationTime());    userToPersist.setDistinguishedName(user.getDistinguishedName());    userToPersist.setGroups(user.getGroups());    userToPersist.setId(user.getId());    userToPersist.setIsLocal(user.getIsLocal());    userToPersist.setTenantId(user.getTenantId());    userToPersist.setUserName(user.getUserName());    dbClient.persistObject(userToPersist);    Token tokenToPersist=dbClient.queryObject(Token.class,token.getId());    tokenToPersist=(tokenToPersist == null) ? new Token() : tokenToPersist;    if ((token.getExpirationTime() - now) > maxLifeValuesHolder.getForeignTokenCacheExpirationInMins()) {      tokenToPersist.setCacheExpirationTime(now + maxLifeValuesHolder.getForeignTokenCacheExpirationInMins());    } else {      tokenToPersist.setCacheExpirationTime(token.getExpirationTime());    }    tokenToPersist.setId(token.getId());    tokenToPersist.setUserId(user.getId());    tokenToPersist.setIssuedTime(token.getIssuedTime());    tokenToPersist.setLastAccessTime(now);    tokenToPersist.setExpirationTime(token.getExpirationTime());    tokenToPersist.setIndexed(true);    tokenToPersist.setZoneId(token.getZoneId());    dbClient.persistObject(tokenToPersist);    log.info("Cached user {} and token",user.getUserName());  } catch (  Exception ex) {    log.error("Could not acquire lock while trying to get a proxy token.",ex);  } finally {    try {      if (tokenLock != null) {        tokenLock.release();      }    } catch (    Exception ex) {      log.error("Unable to release token caching lock",ex);    }  }}  }
class C{  public int hashCode(){  int result=HASH_SEED;  for (int i=0; i < size(); i++) {    result=HASH_OFFSET * result + getWordID(i);  }  return result;}  }
class C{  public int[] lookupPixel(int[] src,int[] dst){  if (dst == null) {    dst=new int[src.length];  }  if (numComponents == 1) {    for (int i=0; i < src.length; i++) {      int s=src[i] - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=(int)data[0][s];    }  } else {    for (int i=0; i < src.length; i++) {      int s=src[i] - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=(int)data[i][s];    }  }  return dst;}  }
class C{  public E remove(int index){  rangeCheck(index);  modCount++;  E oldValue=elementData(index);  int numMoved=size - index - 1;  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);  elementData[--size]=null;  return oldValue;}  }
class C{  protected boolean yIsSame(int pointIndex){  return ((getFlag(pointIndex) & 0x20) != 0);}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw this.syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  private static <E>ListIterator<E> constrainedListIterator(ListIterator<E> listIterator,Constraint<? super E> constraint){  return new ConstrainedListIterator<E>(listIterator,constraint);}  }
class C{  private boolean isTag(String field){  return _ed.isTag(field);}  }
class C{  public void skippedEntity(String ent) throws SAXException {  throw new SAXException("Don't know how to skip entities");}  }
class C{  @Override public void traceException(String tag,String message,Exception e){  if (traceCallbackId != null) {    Bundle dataBundle=new Bundle();    dataBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.TRACE_ACTION);    dataBundle.putString(MqttServiceConstants.CALLBACK_TRACE_SEVERITY,MqttServiceConstants.TRACE_EXCEPTION);    dataBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,message);    dataBundle.putSerializable(MqttServiceConstants.CALLBACK_EXCEPTION,e);    dataBundle.putString(MqttServiceConstants.CALLBACK_TRACE_TAG,tag);    callbackToActivity(traceCallbackId,Status.ERROR,dataBundle);  }}  }
class C{  final void run(final Iterable<? extends HasPlansAndId<T,I>> persons,ObjectAttributes subPopLookup,final ReplanningContext replanningContext){  for (  GenericPlanStrategy<T,I> strategy : distinctStrategies()) {    strategy.init(replanningContext);  }  for (  HasPlansAndId<T,I> person : persons) {    if ((this.maxPlansPerAgent > 0) && (person.getPlans().size() > this.maxPlansPerAgent)) {      removePlans(person,this.maxPlansPerAgent);    }    String subpopName=null;    if (this.subpopulationAttributeName != null) {      subpopName=(String)subPopLookup.getAttribute(person.getId().toString(),this.subpopulationAttributeName);    }    GenericPlanStrategy<T,I> strategy=this.chooseStrategy(subpopName);    if (strategy == null) {      throw new RuntimeException("No strategy found! Have you defined at least one replanning strategy per subpopulation?");    }    strategy.run(person);  }  for (  GenericPlanStrategy<T,I> strategy : distinctStrategies()) {    strategy.finish();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void addTypeName(String type){  if (type == null || _listTypes.contains(type)) {    return;  }  _listTypes.add(0,type);  log.debug("Location ({}) add rolling stock type ({})",getName(),type);  setDirtyAndFirePropertyChange(TYPES_CHANGED_PROPERTY,_listTypes.size() - 1,_listTypes.size());}  }
class C{  public void testConstructorBytesNegative1(){  byte aBytes[]={-12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte rBytes[]={-12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public Class<?> loadClass(String className) throws ClassNotFoundException {  return loadClass(className,false);}  }
class C{  public void buttonViewChanged(){  IconManager.instance().wipeButtonIconCache();  updateButtonView(getAppFrame());}  }
class C{  public static void reverse(Object array){  int length=Array.getLength(array);  for (int i=0; i < length / 2; i++) {    Object x=Array.get(array,i);    Object y=Array.get(array,length - 1 - i);    Array.set(array,i,y);    Array.set(array,length - i - 1,x);  }}  }
class C{  public static String osArchitecture(){  return osArch;}  }
class C{  public ExecutionFlow createExecutionFlow(){  ExecutionFlowImpl executionFlow=new ExecutionFlowImpl();  return executionFlow;}  }
class C{  private static void initializeChooserFrame(){  JFrame chooserFrame=new JFrame("Joshua Derivation Tree Browser");  chooserFrame.setLayout(new BorderLayout());  searchBox=new JTextField("search");  searchBox.getDocument().addDocumentListener(new SearchListener());  searchBox.addActionListener(null);  oneBestList=new JList(new DefaultListModel());  oneBestList.setFixedCellWidth(200);  oneBestList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  oneBestList.addListSelectionListener(null);  chooserFrame.getContentPane().add(searchBox,BorderLayout.NORTH);  chooserFrame.getContentPane().add(new JScrollPane(oneBestList),BorderLayout.CENTER);  refreshLists();  chooserFrame.setSize(DEFAULT_WIDTH,DEFAULT_HEIGHT);  chooserFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  activeFrame=new ArrayList<>();  int numNBestFiles=translations.get(0).translations().size();  for (int i=0; i < numNBestFiles; i++)   activeFrame.add(new DerivationTreeFrame(i,oneBestList));  chooserFrame.setVisible(true);}  }
class C{  public Object retrieve(int id){  Object o=null;  if (this.useWeakRefs) {    final WeakReference<?> ref=(WeakReference<?>)this.map.get(id);    if (ref != null) {      o=ref.get();      if (o == null) {        this.map.remove(id,ref);      }    }  } else {    o=this.map.get(id);  }  return o;}  }
class C{  public boolean isReverse(){  return true;}  }
class C{  public boolean isShowAcct(){  Object oo=get_Value(COLUMNNAME_IsShowAcct);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void doRefresh(){  try {    this.clearStatusBarMessage();    this.strategies=this.tradePersistentModel.findStrategies();    refreshTree();  } catch (  Exception ex) {    this.setErrorMessage("Error finding rule.",ex.getMessage(),ex);  }}  }
class C{  public static void validateCopiesNotNull(List<CreateCopyParams> prodCopies,List<CreateCopyParams> localCopies,List<CreateCopyParams> remoteCopies) throws RecoverPointException {  if (prodCopies == null) {    throw RecoverPointException.exceptions.didNotFindProductionCopyWWNs();  }  if (localCopies == null && remoteCopies == null) {    throw RecoverPointException.exceptions.didNotFindLocalRemoteCopyWWNs();  }}  }
class C{  public void testVersion_2_2_1() throws Exception {  verifyLog("tungsten-replicator-2.2.1-403");}  }
class C{  public static String colorToString(Color col){  return colorToString(col.getRGB());}  }
class C{  @Override public boolean addAll(int arg0,Collection<? extends T> arg1){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  public void addExcludedTest(TestIdentifier test){  mExcludedTests.add(test);}  }
class C{  public void addPipeline(String name,String stages,String storeNames,String serviceNames){  conf.setString(ReplicatorConf.PIPELINES,name);  conf.setString(ReplicatorConf.PIPELINE_ROOT + "." + name,stages);  if (storeNames != null)   conf.setString(ReplicatorConf.PIPELINE_ROOT + "." + name+ ".stores",storeNames);  if (serviceNames != null)   conf.setString(ReplicatorConf.PIPELINE_ROOT + "." + name+ ".services",serviceNames);}  }
class C{  public boolean isSetCount(){  return EncodingUtils.testBit(__isset_bitfield,__COUNT_ISSET_ID);}  }
class C{  public GitRefNotFoundException(Throwable cause){  super(cause);}  }
class C{  private void subscribe(Throwable exception){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  String action=context.getString(R.string.toast_sub_failed,(Object[])additionalArgs);  c.addAction(action);  Notify.toast(context,action,Toast.LENGTH_SHORT);  System.out.print(action);}  }
class C{  public Rectangle2D intersection(Rectangle2D r){  return intersection(r.x,r.y,r.size.getWidth(),r.size.getHeight());}  }
class C{  public static boolean propertyValueEqualsIgnoreCase(String resource,String name,String compareString){  String value=getPropertyValue(resource,name);  if (value == null)   return false;  return value.trim().equalsIgnoreCase(compareString);}  }
class C{  public static Intent craftIntent(Context context,Bitmap hero,String albumRef,ProviderIdentifier provider,int backColor){  Intent intent=new Intent(context,AlbumActivity.class);  intent.putExtra(EXTRA_ALBUM,albumRef);  intent.putExtra(EXTRA_PROVIDER,provider.serialize());  intent.putExtra(EXTRA_BACKGROUND_COLOR,backColor);  Utils.queueBitmap(BITMAP_ALBUM_HERO,hero);  return intent;}  }
class C{  public void reopen(){  lock.lock();  try {    if (open) {      return;    }    try {      this.open=true;      reopenChannel();      counters.openCount++;      if (fed != null) {        openCloseEvent=new Event(fed,new EventResource(indexMetadata,file),EventType.IndexSegmentStoreOpenClose).start();      }    } catch (    Throwable t) {      _close();      throw new RuntimeException("Could not (re-) open: file=" + file,t);    }  }  finally {    lock.unlock();  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static Function<String,String> fold(final int width){  return fold(width,Fold.LINE_SEPARATOR);}  }
class C{  public boolean areReadingAll(){  return telegram.getStringExtra(INTENT_EXTRA_ACTION).equals(INTENT_EXTRA_READ_ALL);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] shapefiles;  int numFiles;  String outputFile;  String shortFileName;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFile=args[1];  if ((inputFilesString == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  shapefiles=inputFilesString.split(";");  numFiles=shapefiles.length;  if (numFiles < 2) {    showFeedback("At least two input vector files must be specified.");    return;  }  try {    ShapeFile output=null;    DBFWriter writer=null;    FID=0;    for (int k=0; k < numFiles; k++) {      ShapeFile input=new ShapeFile(shapefiles[k]);      shapeType=input.getShapeType();      numRecs=input.getNumberOfRecords();      shortFileName=input.getShortName();      if (shortFileName.length() > 25) {        String tempString=shortFileName.substring(0,24);        shortFileName=tempString;      }      if (k == 0) {        outputShapeType=shapeType;        output=new ShapeFile(outputFile,outputShapeType);        output.setProjectionStringFromOtherShapefile(new ShapeFile(shapefiles[0]));        DBFField fields[]=new DBFField[3];        fields[0]=new DBFField();        fields[0].setName("FID");        fields[0].setDataType(DBFField.DBFDataType.NUMERIC);        fields[0].setFieldLength(10);        fields[0].setDecimalCount(0);        fields[1]=new DBFField();        fields[1].setName("PARENTFILE");        fields[1].setDataType(DBFField.DBFDataType.STRING);        fields[1].setFieldLength(25);        fields[2]=new DBFField();        fields[2].setName("PFILE_ID");        fields[2].setDataType(DBFField.DBFDataType.NUMERIC);        fields[2].setFieldLength(10);        fields[2].setDecimalCount(0);        String DBFName=output.getDatabaseFile();        writer=new DBFWriter(new File(DBFName));        writer.setFields(fields);      }      if (shapeType != outputShapeType) {        showFeedback("This tool can only work when each input shapefile " + "is of the same type.");        return;      }      oneHundredthTotal=numRecs / 100;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        output.addRecord(record.getGeometry());        FID++;        Object[] rowData=new Object[3];        rowData[0]=new Double(FID);        rowData[1]=shortFileName;        rowData[2]=new Double(k + 1);        writer.addRecord(rowData);        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public InMemorySchemaPartition(SchemaManager schemaManager){  super(schemaManager);}  }
class C{  void sendFriendList(ArrayList<XmppFriend> list){  for (  XmppFriend xmppFriend : list) {    Intent intent=new Intent(MainService.ACTION_XMPP_PRESENCE_CHANGED);    intent.putExtra("userid",xmppFriend.mId);    intent.putExtra("name",xmppFriend.mName == null ? xmppFriend.mId : xmppFriend.mName);    intent.putExtra("status",xmppFriend.mStatus);    intent.putExtra("state",xmppFriend.mState);    sContext.sendBroadcast(intent);  }}  }
class C{  private void findViews(){  this.etNumber=null;  this.optColombian=null;  this.optExpresso=null;  this.optDecaf=null;  this.chkCream=null;  this.chkSugar=null;  this.btnCancel=null;  this.btnOrder=null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationfeaturecore.class,args);}  }
class C{  public void writeWithoutAlpha(OutStream out) throws IOException {  super.write(out);}  }
class C{  public boolean isSetOperation(){  return this.operation != null;}  }
class C{  public Transform(Document doc,String algorithmURI,Element contextChild) throws InvalidTransformException {  super(doc);  HelperNodeList contextNodes=null;  if (contextChild != null) {    contextNodes=new HelperNodeList();    XMLUtils.addReturnToElement(doc,contextNodes);    contextNodes.appendChild(contextChild);    XMLUtils.addReturnToElement(doc,contextNodes);  }  transformSpi=initializeTransform(algorithmURI,contextNodes);}  }
class C{  private TaskResourceRep performSRDFProtectionAction(URI id,Copy copy,String op) throws InternalException {  URI copyID=copy.getCopyID();  ArgValidator.checkFieldUriType(copyID,Volume.class,"copyID");  Volume volume=queryVolumeResource(id);  Volume copyVolume=null;  if (null == copyID) {    copyVolume=volume;  } else {    copyVolume=queryVolumeResource(copyID);  }  ArgValidator.checkEntity(volume,id,true);  ArgValidator.checkEntity(copyVolume,copyID,true);  if (!copyVolume.getSrdfParent().getURI().equals(id) && !copyVolume.getId().equals(id)) {    throw APIException.badRequests.protectionVolumeInvalidTargetOfVolume(copyID,id);  }  checkForPendingTasks(Arrays.asList(volume.getTenant().getURI()),Arrays.asList(volume));  String task=UUID.randomUUID().toString();  Operation status=new Operation();  status.setResourceType(ProtectionOp.getResourceOperationTypeEnum(op));  _dbClient.createTaskOpStatus(Volume.class,volume.getId(),task,status);  if (Volume.isSRDFProtectedVolume(copyVolume)) {    if (op.equalsIgnoreCase(ProtectionOp.FAILOVER_TEST_CANCEL.getRestOp()) || op.equalsIgnoreCase(ProtectionOp.FAILOVER_TEST.getRestOp())) {      _dbClient.ready(Volume.class,volume.getId(),task);      return toTask(volume,task,status);    }    if (PersonalityTypes.SOURCE.name().equalsIgnoreCase(copyVolume.getPersonality())) {      if (op.equalsIgnoreCase(ProtectionOp.FAILOVER_CANCEL.getRestOp()) || op.equalsIgnoreCase(ProtectionOp.FAILOVER.getRestOp()) || op.equalsIgnoreCase(ProtectionOp.SWAP.getRestOp())) {        throw new ServiceCodeException(ServiceCode.IO_ERROR,"Expected SRDF Target R2 volume, instead R1 {0} is being passed, hence cannot proceed with failover or failback.",new Object[]{copyVolume.getNativeGuid()});      } else       if (copyVolume.getSrdfTargets() == null || copyVolume.getSrdfTargets().isEmpty()) {        throw new ServiceCodeException(ServiceCode.IO_ERROR,"Target Volume Empty for a given source R1 {0}, hence cannot proceed with failover or failback.",new Object[]{copyVolume.getNativeGuid()});      } else       if (PersonalityTypes.TARGET.name().equalsIgnoreCase(copyVolume.getPersonality()) && RemoteDirectorGroup.SupportedCopyModes.ADAPTIVECOPY.name().equalsIgnoreCase(copyVolume.getSrdfCopyMode())) {        if (ProtectionOp.CHANGE_COPY_MODE.getRestOp().equalsIgnoreCase(op)) {          validateVpoolCopyModeSetting(volume,copy.getCopyMode());        }      }    }    if (op.equalsIgnoreCase(ProtectionOp.SYNC.getRestOp()) && SOURCE_TO_TARGET.toString().equalsIgnoreCase(copy.getSyncDirection())) {      op=ProtectionOp.RESUME.getRestOp();    } else     if (isSuspendCopyRequest(op,copy)) {      op=ProtectionOp.SUSPEND.getRestOp();    }    ProtectionOrchestrationController protectionController=getController(ProtectionOrchestrationController.class,ProtectionOrchestrationController.PROTECTION_ORCHESTRATION_DEVICE);    StorageSystem system=_dbClient.queryObject(StorageSystem.class,copyVolume.getStorageController());    protectionController.performSRDFProtectionOperation(system.getId(),copy,op,task);  } else {    throw new ServiceCodeException(ServiceCode.IO_ERROR,"Volume {0} is not SRDF protected",new Object[]{copyVolume.getNativeGuid()});  }  return toTask(volume,task,status);}  }
class C{  public Source resolveURI(String base,String urlString,SourceLocator locator) throws TransformerException, IOException {  Source source=null;  if (null != m_uriResolver) {    source=m_uriResolver.resolve(urlString,base);  }  if (null == source) {    String uri=SystemIDResolver.getAbsoluteURI(urlString,base);    source=new StreamSource(uri);  }  return source;}  }
class C{  protected void calculatePitch(){  if (audioChannel != null) {    audioChannel.setPitch(this.getPitch());  }}  }
class C{  public JREContainer(IVMInstallType vm,IPath path,JavaProject project){  fVMInstall=vm;  fPath=path;  fProject=project;}  }
class C{  public void validate(final Map<String,Set<AuthorizableConfigBean>> aceConfig) throws InvalidGroupNameException {  for (  final Entry<String,Set<AuthorizableConfigBean>> aceConfigEntry : aceConfig.entrySet()) {    final String groupName=aceConfigEntry.getKey();    final AuthorizableConfigBean group=aceConfigEntry.getValue().iterator().next();    final String[] members=group.getMembers();    if ((members == null) || (members.length == 0)) {      continue;    }    for (    final String member : members) {      boolean isAnonymousUser=Constants.USER_ANONYMOUS.equals(member);      if (isAnonymousUser) {        continue;      }      boolean memberContainedInConfig=aceConfig.containsKey(member);      if (!memberContainedInConfig) {        throw new InvalidGroupNameException(String.format("Group %s defined as member in group %s is not specified.",member,groupName));      }      aceConfig.get(member).iterator().next().addMemberOf(groupName);    }  }}  }
class C{  public boolean isTextFieldEditable(){  return true;}  }
class C{  private void constructTestingEnvironment(){  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();  for (  File file : this.pennFileList) {    String filename=file.getAbsolutePath();    DocumentBuilder builder=null;    try {      builder=builderFactory.newDocumentBuilder();    } catch (    Exception e) {      e.printStackTrace();    }    ArrayList<String[]> dataLists=new ArrayList<String[]>();    try {      System.out.println("Constructing testing data set for file " + file.getName());      Document document=builder.parse(new FileInputStream(filename));      NodeList nodes=document.getElementsByTagName("fs");      for (int i=0; i < nodes.getLength(); i++) {        HashMap<String,String> map=new HashMap<String,String>();        Element ele=(Element)nodes.item(i);        NodeList subnodes=ele.getElementsByTagName("f");        boolean valid=true;        for (int j=0; j < subnodes.getLength(); j++) {          String tag=((Element)subnodes.item(j)).getAttribute("name");          if (Objects.equals(tag,"subkind") || Objects.equals(tag,"position")) {            valid=false;            break;          } else {            map.put(tag,((Element)subnodes.item(j)).getAttribute("value"));          }        }        if (valid) {          String dataList[]=new String[3];          try {            dataList[0]=map.get("string").toLowerCase();            dataList[1]=map.get("msd");            dataList[2]=map.get("base").toLowerCase();            dataLists.add(dataList);          } catch (          Exception ignored) {          }        }      }    } catch (    SAXException|IOException e) {      e.printStackTrace();    }    this.testData.put(filename,dataLists);  }}  }
class C{  public void sendMountFacingChange(int nEntity,int nEquip,int nFacing){  Object[] data={new Integer(nEntity),new Integer(nEquip),new Integer(nFacing)};  send(new Packet(Packet.COMMAND_ENTITY_MOUNTED_FACINGCHANGE,data));}  }
class C{  public void testTestBitPositive1(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=7;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertTrue(!aNumber.testBit(number));}  }
class C{  public Tokenizer(InputStream is){  if (!(is instanceof BufferedInputStream))   is=new BufferedInputStream(is);  this.is=new PushbackInputStream(is,2);  ungottenToken=false;  multiline=0;  quoting=false;  delimiters=delim;  current=new Token();  sb=new StringBuffer();  filename="<none>";  line=1;}  }
class C{  public void testInputSeek() throws Exception {  int size=5000000;  File f=this.initFile("testInputResources");  writeAscendingIntFile(f,size);  int jumps=size / 5000;  int jumpSize=size / jumps;  int jumpOffset=jumpSize * 4;  logger.info("Seeking forward...");  BufferedFileDataInput bfdi=new BufferedFileDataInput(f);  for (int i=0; i < jumps; i++) {    int value=i * jumpSize;    long offset=i * jumpOffset;    bfdi.seek(offset);    String position="i: " + i;    assertEquals(position,offset,bfdi.getOffset());    assertEquals(position,value,bfdi.readInt());  }  bfdi.close();  logger.info("Seeking backward...");  bfdi=new BufferedFileDataInput(f);  for (int i=(jumps - 1); i >= 0; i--) {    int value=i * jumpSize;    long offset=i * jumpOffset;    bfdi.seek(offset);    String position="i: " + i;    assertEquals(position,offset,bfdi.getOffset());    assertEquals(position,value,bfdi.readInt());  }  bfdi.close();  f.delete();}  }
class C{  public void removeAction(CCAction action){  if (action == null)   return;  HashElement element=targets.get(action.getOriginalTarget());  if (element != null) {    int i;synchronized (element.actions) {      i=element.actions.indexOf(action);      if (i != -1) {        removeAction(i,element);      }    }  } else {    Log.w(LOG_TAG,"removeAction: target not found");  }}  }
class C{  public WeightedAnnotationPair_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_weight=jcas.getRequiredFeatureDE(casType,"weight","uima.cas.Double",featOkTst);  casFeatCode_weight=(null == casFeat_weight) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_weight).getCode();}  }
class C{  public static void log_diffs(Logger log,List<Unit> orig_chain,SootMethod meth){  if (!log.isInfoEnabled())   return;  Chain<Unit> new_chain=meth.getActiveBody().getUnits();  boolean modified=new_chain.size() != orig_chain.size();  if (!modified) {    Iterator<Unit> newit=new_chain.iterator();    for (    Unit orig_u : orig_chain) {      Unit new_u=newit.next();      modified=orig_u != new_u;      if (modified)       break;    }  }  if (modified) {    log.info("Modified method {}",meth.getName());    log.info("Original Method:");    for (    Unit u : orig_chain)     log.info("  {}",u);    log.info("New Method");    for (    Unit u : new_chain) {      log.info("  {}",u);    }  }}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void analyze4(CompilationUnit unit,TypeTable typeTable){}  }
class C{  public CLEvent copyTo(CLQueue queue,CLBuffer destination,CLEvent... eventsToWaitFor){  return copyBytesTo(queue,destination,0,0,getByteCount(),eventsToWaitFor);}  }
class C{  public int lookAhead() throws IOException {  if (lookaheadChar == UNDEFINED) {    lookaheadChar=super.read();  }  return lookaheadChar;}  }
class C{  public static byte[] asciiHexToBytes(String hex) throws DecoderException {  return Hex.decodeHex(hex.toCharArray());}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static String toJsArgsList(Object... aJSArgs){  StringBuilder js=KCUtil.getThreadSafeStringBuilder();  if (aJSArgs != null) {    int length=aJSArgs.length;    for (int i=0; i < length; ++i) {      Object obj=aJSArgs[i];      if (obj != null) {        if (obj instanceof String) {          js.append("'");          js.append(obj.toString());          js.append("'");        } else         if (obj instanceof Collection) {          JSONArray jsonarray=new JSONArray((Collection)obj);          js.append(jsonarray.toString());        } else         if (obj instanceof Map) {          JSONObject jsonObject=new JSONObject((Map)obj);          js.append(jsonObject);        } else {          js.append(obj.toString());        }      } else {        js.append("null");      }      if (i < length - 1) {        js.append(',');      }    }  }  return js.toString();}  }
class C{  private ActiveMQMessageConsumer internalCreateSharedConsumer(final ActiveMQDestination dest,final String subscriptionName,String selectorString,ConsumerDurability durability) throws JMSException {  try {    if (dest.isQueue()) {      throw new RuntimeException("Internal error: createSharedConsumer is only meant for Topics");    }    if (subscriptionName == null) {      throw ActiveMQJMSClientBundle.BUNDLE.invalidSubscriptionName();    }    selectorString="".equals(selectorString) ? null : selectorString;    SimpleString coreFilterString=null;    if (selectorString != null) {      coreFilterString=new SimpleString(SelectorTranslator.convertToActiveMQFilterString(selectorString));    }    ClientConsumer consumer;    SimpleString autoDeleteQueueName=null;    AddressQuery response=session.addressQuery(dest.getSimpleAddress());    if (!response.isExists()) {      throw ActiveMQJMSClientBundle.BUNDLE.destinationDoesNotExist(dest.getSimpleAddress());    }    SimpleString queueName;    if (dest.isTemporary() && durability == ConsumerDurability.DURABLE) {      throw new InvalidDestinationException("Cannot create a durable subscription on a temporary topic");    }    queueName=new SimpleString(ActiveMQDestination.createQueueNameForDurableSubscription(durability == ConsumerDurability.DURABLE,connection.getClientID(),subscriptionName));    if (durability == ConsumerDurability.DURABLE) {      try {        session.createSharedQueue(dest.getSimpleAddress(),queueName,coreFilterString,true);      } catch (      ActiveMQQueueExistsException ignored) {      }    } else {      session.createSharedQueue(dest.getSimpleAddress(),queueName,coreFilterString,false);    }    consumer=session.createConsumer(queueName,null,false);    ActiveMQMessageConsumer jbc=new ActiveMQMessageConsumer(options,connection,this,consumer,false,dest,selectorString,autoDeleteQueueName);    consumers.add(jbc);    return jbc;  } catch (  ActiveMQException e) {    throw JMSExceptionHelper.convertFromActiveMQException(e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapinvalidtype1.class,args);}  }
class C{  public final void addCategory(String category){  if (mCategories == null)   mCategories=new ArrayList<String>();  if (!mCategories.contains(category)) {    mCategories.add(category.intern());  }}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  if (!getItemVisible(row,column)) {    return;  }  if (!(dataset instanceof BoxAndWhiskerCategoryDataset)) {    throw new IllegalArgumentException("BoxAndWhiskerRenderer.drawItem() : the data should be " + "of type BoxAndWhiskerCategoryDataset only.");  }  PlotOrientation orientation=plot.getOrientation();  if (orientation == PlotOrientation.HORIZONTAL) {    drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column);  } else   if (orientation == PlotOrientation.VERTICAL) {    drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column);  }}  }
class C{  public static Associator[] makeCopies(Associator model,int num) throws Exception {  if (model == null) {    throw new Exception("No model associator set");  }  Associator[] associators=new Associator[num];  SerializedObject so=new SerializedObject(model);  for (int i=0; i < associators.length; i++) {    associators[i]=(Associator)so.getObject();  }  return associators;}  }
class C{  public void parse(Element element,ElementMetadata<?,?> metadata,Object value) throws ParseException {  if (sources.isEmpty()) {    return;  }  MetadataKey<?> source=sources.get(0);  if (source instanceof ElementKey<?,?>) {    ElementKey<?,?> childKey=(ElementKey<?,?>)source;    ElementMetadata<?,?> childMeta=metadata.bindElement(childKey);    Element child=element.getElement(childKey);    if (child == null) {      try {        child=childMeta.createElement();      } catch (      ContentCreationException e) {        throw new ParseException(e);      }      element.addElement(childKey,child);    }    childMeta.parseValue(child,childMeta,value);  } else {    AttributeKey<?> attKey=(AttributeKey<?>)source;    AttributeMetadata<?> attMeta=metadata.bindAttribute(attKey);    attMeta.parseValue(element,metadata,value);  }}  }
class C{  @Override public void close() throws IOException {  if (debug) {    if (cachingEnabled) {      StringBuilder sb=new StringBuilder();      sb.append("Closing ").append(name);      for (      SolrCache cache : cacheList) {        sb.append("\n\t");        sb.append(cache);      }      log.debug(sb.toString());    } else {      if (debug)       log.debug("Closing " + name);    }  }  core.getInfoRegistry().remove(name);  long cpg=reader.getIndexCommit().getGeneration();  try {    if (closeReader)     reader.decRef();  } catch (  Exception e) {    SolrException.log(log,"Problem dec ref'ing reader",e);  }  if (directoryFactory.searchersReserveCommitPoints()) {    core.getDeletionPolicy().releaseCommitPoint(cpg);  }  for (  SolrCache cache : cacheList) {    cache.close();  }  if (reserveDirectory) {    directoryFactory.release(getIndexReader().directory());  }  if (createdDirectory) {    directoryFactory.release(getIndexReader().directory());  }  numCloses.incrementAndGet();}  }
class C{  public void enableHelp(MenuItem comp,@NotNull String id,HelpSet hs){  CSH.setHelpIDString(comp,id);  if (hs != null) {    CSH.setHelpSet(comp,hs);  }}  }
class C{  public static boolean isGoingToSplash(Activity activity,String sessionId,String roomId){  if (Matrix.hasValidSessions()) {    List<MXSession> sessions=Matrix.getInstance(activity).getSessions();    for (    MXSession session : sessions) {      if (session.isAlive() && !session.getDataHandler().getStore().isReady()) {        Intent intent=new Intent(activity,SplashActivity.class);        if ((null != sessionId) && (null != roomId)) {          intent.putExtra(SplashActivity.EXTRA_MATRIX_ID,sessionId);          intent.putExtra(SplashActivity.EXTRA_ROOM_ID,roomId);        }        activity.startActivity(intent);        activity.finish();        return true;      }    }  }  return false;}  }
class C{  public Cursor queryAllPurchasedItems(){  return mDb.query(PURCHASED_ITEMS_TABLE_NAME,PURCHASED_COLUMNS,null,null,null,null,null);}  }
class C{  public String globalInfo(){  return "Voted ML-ARAM. " + "For more information see:\n" + getTechnicalInformation().toString();}  }
class C{  public double[][] selectionMatrixOfWeakEigenvectors(){  return e_hat;}  }
class C{  public void testCertStore11() throws InvalidAlgorithmParameterException, NoSuchAlgorithmException {  if (!initParams()) {    return;  }  Provider provider=null;  for (int i=0; i < dValid.length; i++) {    try {      CertStore.getInstance(dValid[i],dParams,provider);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public static int intersectShape(Shape s,double x,double y,double w,double h){  if (!s.getBounds().intersects((int)x,(int)y,(int)w,(int)h)) {    return 0;  }  return intersectPath(s.getPathIterator(null),x,y,w,h);}  }
class C{  public boolean checkDeviceUsesAdBlock(){  return AdBlockUtils.isAdBlockActive();}  }
class C{  @Override public void clear(){  this._set.clear();}  }
class C{  static public int roundPositive(float x){  return (int)(x + 0.5f);}  }
class C{  protected static void resetID(){  PRINTED_NODES=0;}  }
class C{  public void revertKeyClassName(){  keyClsNameProp.set(keyClsNamePrev);}  }
class C{  @Override public Blorp deleteBack(){  Node back=getBackNode();  if (back == sentinel) {    return null;  }  Node p=sentinel;  while (p.next != back) {    p=p.next;  }  p.next=null;  return back.item;}  }
class C{  protected CRLDistributionPointsExtension(ObjectIdentifier extensionId,Boolean critical,Object value,String extensionName) throws IOException {  this.extensionId=extensionId;  this.critical=critical.booleanValue();  if (!(value instanceof byte[])) {    throw new IOException("Illegal argument type");  }  extensionValue=(byte[])value;  DerValue val=new DerValue(extensionValue);  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding for " + extensionName + " extension.");  }  distributionPoints=new ArrayList<DistributionPoint>();  while (val.data.available() != 0) {    DerValue seq=val.data.getDerValue();    DistributionPoint point=new DistributionPoint(seq);    distributionPoints.add(point);  }  this.extensionName=extensionName;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void test_DELETE_accessPath_delete_p_o_Literal() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(null,RDFS.LABEL,new LiteralImpl("Bryan"));  assertEquals(1,mutationResult);}  }
class C{  public static double[] toNativeArray(Collection<Double> values){  return toNativeArray(values,true,true,true);}  }
class C{  private void checkColType(int SQLType) throws SQLException {  try {    Class<?> c=java.sql.Types.class;    Field[] publicFields=c.getFields();    int fieldValue=0;    for (int i=0; i < publicFields.length; i++) {      fieldValue=publicFields[i].getInt(c);      if (fieldValue == SQLType) {        return;      }    }  } catch (  Exception e) {    throw new SQLException(e.getMessage());  }  throw new SQLException("Invalid SQL type for column");}  }
class C{  @Inline @Override public final void offsetWrite(ObjectReference ref,Offset target,Word offset,Word location,int mode){  Magic.setOffsetAtOffset(ref.toObject(),offset.toOffset(),target,location.toInt());}  }
class C{  public List<NamedRelatedResourceRep> listByConsistencyGroup(URI consistencyGroupId){  return getList(getByConsistencyGroupUrl(),consistencyGroupId);}  }
class C{  @Override public int compareTo(MethodContainer o){  return priority > o.priority ? -1 : priority == o.priority ? 0 : 1;}  }
class C{  public static String allowedConfiguration(String key){  return ALLOWED_CONFIGURATION.get(key);}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  protected UnitGraph(Body body){  this.body=body;  unitChain=body.getUnits();  method=body.getMethod();  if (Options.v().verbose())   G.v().out.println("[" + method.getName() + "]     Constructing "+ this.getClass().getName()+ "...");}  }
class C{  public static void send(int src,int dest,double delay,int tag,Object data){  if (delay < 0) {    throw new IllegalArgumentException("Send delay can't be negative.");  }  SimEvent e=new SimEvent(SimEvent.SEND,clock + delay,src,dest,tag,data);  future.addEvent(e);}  }
class C{  private boolean isSpurious(TempCluster clus,boolean isCore){  return clus != null ? clus.isSpurious(minClSize) : (minClSize > 1 || !isCore);}  }
class C{  public static void main(String... args) throws Exception {  String in="src/docsrc/help/help.csv";  String out="src/main/org/h2/res/help.csv";  Csv csv=new Csv();  csv.setLineCommentCharacter('#');  ResultSet rs=csv.read(in,null,null);  SimpleResultSet rs2=new SimpleResultSet();  ResultSetMetaData meta=rs.getMetaData();  int columnCount=meta.getColumnCount() - 1;  for (int i=0; i < columnCount; i++) {    rs2.addColumn(meta.getColumnLabel(1 + i),Types.VARCHAR,0,0);  }  while (rs.next()) {    Object[] row=new Object[columnCount];    for (int i=0; i < columnCount; i++) {      String s=rs.getString(1 + i);      if (i == 3) {        int dot=s.indexOf('.');        if (dot >= 0) {          s=s.substring(0,dot + 1);        }      }      row[i]=s;    }    rs2.addRow(row);  }  BufferedWriter writer=new BufferedWriter(new FileWriter(out));  writer.write("# Copyright 2004-2014 H2 Group. " + "Multiple-Licensed under the MPL 2.0,\n" + "# and the EPL 1.0 "+ "(http://h2database.com/html/license.html).\n"+ "# Initial Developer: H2 Group)\n");  csv=new Csv();  csv.setLineSeparator("\n");  csv.write(writer,rs2);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public BlockVirtualPoolRestRep updateBlockVirtualPool(@PathParam("id") URI id,BlockVirtualPoolUpdateParam param){  VirtualPool vpool=null;  ArgValidator.checkFieldUriType(id,VirtualPool.class,"id");  vpool=_dbClient.queryObject(VirtualPool.class,id);  ArgValidator.checkEntity(vpool,id,isIdEmbeddedInURL(id));  if (!vpool.getType().equals(VirtualPool.Type.block.name())) {    throw APIException.badRequests.providedVirtualPoolNotCorrectType();  }  QosSpecification qosSpecification=QosService.getQos(vpool.getId(),_dbClient);  URIQueryResultList resultList=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getVirtualPoolVolumeConstraint(id),resultList);  boolean isActiveVolumePartOfPool=false;  for (  URI uri : resultList) {    Volume volume=_dbClient.queryObject(Volume.class,uri);    if (!volume.getInactive()) {      isActiveVolumePartOfPool=true;      break;    }  }  if (isActiveVolumePartOfPool && checkAttributeValuesChanged(param,vpool)) {    throw APIException.badRequests.updateVirtualPoolOnlyAllowedToChange();  }  populateCommonVirtualPoolUpdateParams(vpool,param);  if (null != param.getSystemType()) {    if (vpool.getArrayInfo() == null) {      vpool.setArrayInfo(new StringSetMap());    }    if (vpool.getArrayInfo().containsKey(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE)) {      for (      String systemType : vpool.getArrayInfo().get(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE)) {        vpool.getArrayInfo().remove(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE,systemType);      }    }    if (!(VirtualPool.SystemType.NONE.name().equalsIgnoreCase(param.getSystemType()) || VirtualPool.SystemType.isBlockTypeSystem(param.getSystemType()))) {      throw APIException.badRequests.invalidSystemType("Block");    }    if (VirtualPool.SystemType.vnxblock.name().equalsIgnoreCase(param.getSystemType())) {      Integer thinVolumePreAllocation=vpool.getThinVolumePreAllocationPercentage();      Integer thinVolumePreAllocationParam=param.getThinVolumePreAllocationPercentage();      if (thinVolumePreAllocation != null && thinVolumePreAllocation > 0 && (thinVolumePreAllocationParam == null || thinVolumePreAllocationParam > 0)) {        throw APIException.badRequests.thinVolumePreallocationPercentageOnlyApplicableToVMAX();      }    }    vpool.getArrayInfo().put(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE,param.getSystemType());  } else {    if (vpool.getArrayInfo() == null) {      vpool.setArrayInfo(new StringSetMap());      vpool.getArrayInfo().put(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE,NONE);    }  }  if (null != param.getRaidLevelChanges()) {    if (null != param.getRaidLevelChanges().getAdd()) {      for (      String raidLevel : param.getRaidLevelChanges().getAdd().getRaidLevels()) {        vpool.getArrayInfo().put(VirtualPoolCapabilityValuesWrapper.RAID_LEVEL,raidLevel);      }    }    if (null != param.getRaidLevelChanges().getRemove()) {      for (      String raidLevel : param.getRaidLevelChanges().getRemove().getRaidLevels()) {        vpool.getArrayInfo().remove(VirtualPoolCapabilityValuesWrapper.RAID_LEVEL,raidLevel);      }    }  }  if (null != param.getAutoTieringPolicyName()) {    if (param.getAutoTieringPolicyName().isEmpty()) {      vpool.setAutoTierPolicyName(NONE);    } else {      vpool.setAutoTierPolicyName(param.getAutoTieringPolicyName());    }  }  if (null != param.getCompressionEnabled()) {    vpool.setCompressionEnabled(param.getCompressionEnabled());  }  vpool.setHostIOLimitBandwidth(param.getHostIOLimitBandwidth());  vpool.setHostIOLimitIOPs(param.getHostIOLimitIOPs());  if (null != param.getDriveType()) {    vpool.setDriveType(param.getDriveType());  } else {    vpool.setDriveType(NONE);  }  validateAndSetPathParams(vpool,param.getMaxPaths(),param.getMinPaths(),param.getPathsPerInitiator());  if (param.getThinVolumePreAllocationPercentage() != null) {    vpool.setThinVolumePreAllocationPercentage(param.getThinVolumePreAllocationPercentage());  }  if (param.getMultiVolumeConsistency() != null) {    vpool.setMultivolumeConsistency(param.getMultiVolumeConsistency());  }  if (null != param.getExpandable()) {    vpool.setExpandable(param.getExpandable());  }  if (param.getFastExpansion() != null) {    vpool.setFastExpansion(param.getFastExpansion());  }  if (null != param.getUniquePolicyNames()) {    vpool.setUniquePolicyNames(param.getUniquePolicyNames());  }  if (null != param.getHighAvailability()) {    updateHAParametersForVirtualPool(vpool,param.getHighAvailability());  }  if (null != param.getProtection()) {    updateProtectionParamsForVirtualPool(vpool,param.getProtection(),param.getHighAvailability());  }  if (param.getPlacementPolicy() != null) {    vpool.setPlacementPolicy(param.getPlacementPolicy());  }  if (null != param.getDedupCapable()) {    if (vpool.getDedupCapable() != null && !vpool.getDedupCapable() && param.getDedupCapable()) {      ArgValidator.checkReference(VirtualPool.class,id,checkForDelete(vpool));    }    vpool.setDedupCapable(param.getDedupCapable());  }  VirtualPoolUtil.validateBlockVirtualPoolUpdateParams(vpool,param,_dbClient);  StringBuffer errorMessage=new StringBuffer();  ImplicitPoolMatcher.matchVirtualPoolWithAllStoragePools(vpool,_dbClient,_coordinator,errorMessage);  if (null != vpool.getMatchedStoragePools() || null != vpool.getInvalidMatchedPools()) {    Set<URI> allSrdfTargetVPools=SRDFUtils.fetchSRDFTargetVirtualPools(_dbClient);    Set<URI> allRpTargetVPools=RPHelper.fetchRPTargetVirtualPools(_dbClient);    ImplicitUnManagedObjectsMatcher.matchVirtualPoolsWithUnManagedVolumes(vpool,allSrdfTargetVPools,allRpTargetVPools,_dbClient,true);  }  if (vpool.getMirrorVirtualPool() != null && !NullColumnValueGetter.isNullURI(URI.create(vpool.getMirrorVirtualPool()))) {    VirtualPool protectionMirrorVPool=_permissionsHelper.getObjectById(URI.create(vpool.getMirrorVirtualPool()),VirtualPool.class);    validateMirrorVpool(vpool.getHighAvailability(),protectionMirrorVPool);  }  if (vpool.getMaxNativeContinuousCopies() != null) {    validateMaxNativeContinuousCopies(vpool.getMaxNativeContinuousCopies(),vpool.getHighAvailability());  }  _dbClient.updateObject(vpool);  QosService.updateQos(vpool,qosSpecification,_dbClient);  recordOperation(OperationTypeEnum.UPDATE_VPOOL,VPOOL_UPDATED_DESCRIPTION,vpool);  return toBlockVirtualPool(_dbClient,vpool,VirtualPool.getProtectionSettings(vpool,_dbClient),VirtualPool.getRemoteProtectionSettings(vpool,_dbClient));}  }
class C{  @ExceptionHandler(value=MethodNotAllowedException.class) @ResponseStatus(HttpStatus.METHOD_NOT_ALLOWED) @ResponseBody public ErrorInformation handleOperationNotAllowedException(RuntimeException exception){  return getErrorInformation(HttpStatus.METHOD_NOT_ALLOWED,exception);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  try {    super.execute(mapping,form,request,response);    ClassEditForm frm=(ClassEditForm)form;    MessageResources rsc=getResources(request);    ActionMessages errors=new ActionMessages();    String classId=request.getParameter("cid") == null ? request.getAttribute("cid") != null ? request.getAttribute("cid").toString() : null : request.getParameter("cid");    String reloadCause=request.getParameter("reloadCause");    String op=frm.getOp();    if (request.getParameter("op2") != null && request.getParameter("op2").length() > 0)     op=request.getParameter("op2");    if (op.equals(MSG.actionAddTimePreference()) || op.equals(MSG.actionAddRoomPreference()) || op.equals(MSG.actionAddBuildingPreference())|| op.equals(MSG.actionAddRoomFeaturePreference())|| op.equals(MSG.actionAddDistributionPreference())|| op.equals(MSG.actionAddInstructor())|| op.equals(MSG.actionUpdatePreferences())|| op.equals(MSG.actionAddDatePatternPreference())|| op.equals(rsc.getMessage("button.cancel"))|| op.equals(MSG.actionClearClassPreferences())|| op.equals(MSG.actionRemoveBuildingPreference())|| op.equals(MSG.actionRemoveDistributionPreference())|| op.equals(MSG.actionRemoveRoomFeaturePreference())|| op.equals(MSG.actionRemoveRoomGroupPreference())|| op.equals(MSG.actionRemoveRoomPreference())|| op.equals(MSG.actionRemoveDatePatternPreference())|| op.equals(MSG.actionRemoveTimePattern())|| op.equals(MSG.actionRemoveInstructor())|| op.equals(rsc.getMessage("button.changeOwner"))|| op.equals(MSG.actionAddRoomGroupPreference())|| op.equals(MSG.actionBackToDetail())|| op.equals(MSG.actionNextClass())|| op.equals(MSG.actionPreviousClass())|| op.equals("updateDatePattern")|| op.equals("updatePref")) {      classId=frm.getClassId().toString();    }    if (op == null || op.trim().length() == 0 || (request.getAttribute("cs") != null && request.getAttribute("cs").toString().equals("classOwnerChange"))) {      op="init";    }    if (op == null || op.trim() == "")     throw new Exception(MSG.errorNullOperationNotSupported());    boolean timeVertical=CommonValues.VerticalGrid.eq(sessionContext.getUser().getProperty(UserProperty.GridOrientation));    Debug.debug("op: " + op);    Debug.debug("class: " + classId);    Debug.debug("reload cause: " + reloadCause);    if (classId == null || classId.trim().length() == 0) {      if (BackTracker.doBack(request,response))       return null; else       throw new Exception(MSG.errorClassInfoNotSupplied());    }    sessionContext.checkPermission(classId,"Class_",Right.ClassEdit);    if (op.equals(rsc.getMessage("button.changeOwner")) && classId != null && classId.trim().length() != 0) {      request.setAttribute("classId",classId);      return mapping.findForward("changeClassOwner");    }    if (op.equals(MSG.actionBackToDetail()) && classId != null && classId.trim().length() != 0) {      ActionRedirect redirect=new ActionRedirect(mapping.findForward("displayClassDetail"));      redirect.addParameter("cid",classId);      return redirect;    }    Class_DAO cdao=new Class_DAO();    Class_ c=cdao.get(new Long(classId));    if (op.equals(MSG.actionAddDistributionPreference())) {      sessionContext.checkPermission(c,Right.DistributionPreferenceClass);      SchedulingSubpart ss=c.getSchedulingSubpart();      CourseOffering cco=ss.getInstrOfferingConfig().getControllingCourseOffering();      request.setAttribute("subjectAreaId",cco.getSubjectArea().getUniqueId().toString());      request.setAttribute("schedSubpartId",ss.getUniqueId().toString());      request.setAttribute("courseOffrId",cco.getUniqueId().toString());      request.setAttribute("classId",c.getUniqueId().toString());      return mapping.findForward("addDistributionPrefs");    }    if (op.equals(MSG.actionAddInstructor()))     addInstructor(request,frm,errors);    if (op.equals(MSG.actionRemoveInstructor()) && request.getParameter("deleteType") != null && request.getParameter("deleteType").equals("instructor"))     deleteInstructor(request,frm);    if (op.equals(MSG.actionClearClassPreferences())) {      sessionContext.checkPermission(c,Right.ClassEditClearPreferences);      Set s=c.getPreferences();      s.clear();      c.setPreferences(s);      cdao.update(c);      op="init";      ChangeLog.addChange(null,sessionContext,c,ChangeLog.Source.CLASS_EDIT,ChangeLog.Operation.CLEAR_PREF,c.getSchedulingSubpart().getInstrOfferingConfig().getInstructionalOffering().getControllingCourseOffering().getSubjectArea(),c.getManagingDept());      ActionRedirect redirect=new ActionRedirect(mapping.findForward("displayClassDetail"));      redirect.addParameter("cid",classId);      return redirect;    }    if (op.equals("init")) {      frm.reset(mapping,request);    }    doLoad(request,frm,c,op);    if (op.equals(MSG.actionUpdatePreferences()) || op.equals(MSG.actionNextClass()) || op.equals(MSG.actionPreviousClass())) {      errors=frm.validate(mapping,request);      if (errors.size() == 0) {        org.hibernate.Session hibSession=cdao.getSession();        Transaction tx=hibSession.beginTransaction();        try {          Set s=c.getPreferences();          s.clear();          doUpdate(request,frm,c,hibSession);          super.doUpdate(request,frm,c,s,timeVertical);          hibSession.saveOrUpdate(c);          tx.commit();          String className=ApplicationProperty.ExternalActionClassEdit.value();          if (className != null && className.trim().length() > 0) {            ExternalClassEditAction editAction=(ExternalClassEditAction)(Class.forName(className).newInstance());            editAction.performExternalClassEditAction(c,hibSession);          }          if (op.equals(MSG.actionNextClass())) {            response.sendRedirect(response.encodeURL("classEdit.do?cid=" + frm.getNextId()));            return null;          }          if (op.equals(MSG.actionPreviousClass())) {            response.sendRedirect(response.encodeURL("classEdit.do?cid=" + frm.getPreviousId()));            return null;          }          ActionRedirect redirect=new ActionRedirect(mapping.findForward("displayClassDetail"));          redirect.addParameter("cid",classId);          return redirect;        } catch (        Exception e) {          tx.rollback();          throw e;        }      } else {        saveErrors(request,errors);      }    }    Vector leadInstructors=new Vector();    if (op.equals("updatePref")) {      try {        List instrLead=frm.getInstrLead();        List instructors=frm.getInstructors();        for (int i=0; i < instructors.size(); i++) {          String instrId=instructors.get(i).toString();          if (Preference.BLANK_PREF_VALUE.equals(instrId))           continue;          boolean lead="on".equals(instrLead.get(i));          if (lead)           leadInstructors.add((new DepartmentalInstructorDAO()).get(new Long(instrId)));        }        op="init";      } catch (      NumberFormatException e) {      }    }    if (op.equals("updateDatePattern")) {      initPrefs(frm,c,leadInstructors,true);      frm.getDatePatternPrefs().clear();      frm.getDatePatternPrefLevels().clear();      DatePattern selectedDatePattern=(frm.getDatePattern() < 0 ? c.getSchedulingSubpart().effectiveDatePattern() : DatePatternDAO.getInstance().get(frm.getDatePattern()));      if (selectedDatePattern != null) {        for (        DatePattern dp : selectedDatePattern.findChildren()) {          boolean found=false;          for (          DatePatternPref dpp : (Set<DatePatternPref>)c.getPreferences(DatePatternPref.class)) {            if (dp.equals(dpp.getDatePattern())) {              frm.addToDatePatternPrefs(dp.getUniqueId().toString(),dpp.getPrefLevel().getUniqueId().toString());              found=true;            }          }          if (!found)           for (          DatePatternPref dpp : (Set<DatePatternPref>)c.getSchedulingSubpart().getPreferences(DatePatternPref.class)) {            if (dp.equals(dpp.getDatePattern())) {              frm.addToDatePatternPrefs(dp.getUniqueId().toString(),dpp.getPrefLevel().getUniqueId().toString());              found=true;            }          }          if (!found)           frm.addToDatePatternPrefs(dp.getUniqueId().toString(),PreferenceLevel.PREF_LEVEL_NEUTRAL);        }      }    }    frm.setAvailableTimePatterns(TimePattern.findApplicable(sessionContext.getUser(),c.getSchedulingSubpart().getMinutesPerWk(),(frm.getDatePattern() < 0 ? c.getSchedulingSubpart().effectiveDatePattern() : DatePatternDAO.getInstance().get(frm.getDatePattern())),c.getSchedulingSubpart().getInstrOfferingConfig().getDurationModel(),true,c.getManagingDept()));    Set timePatterns=null;    if (op.equals("init")) {      initPrefs(frm,c,leadInstructors,true);      timePatterns=c.effectiveTimePatterns();      DatePattern selectedDatePattern=c.effectiveDatePattern();      if (selectedDatePattern != null) {        for (        DatePattern dp : selectedDatePattern.findChildren()) {          if (!frm.getDatePatternPrefs().contains(dp.getUniqueId().toString())) {            frm.addToDatePatternPrefs(dp.getUniqueId().toString(),PreferenceLevel.PREF_LEVEL_NEUTRAL);          }        }      }    }    processPrefAction(request,frm,errors);    super.generateTimePatternGrids(request,frm,c,c.getSchedulingSubpart().getMinutesPerWk(),c.getSchedulingSubpart().getInstrOfferingConfig().getDurationModel(),(frm.getDatePattern() < 0 ? c.getSchedulingSubpart().effectiveDatePattern() : DatePatternDAO.getInstance().get(frm.getDatePattern())),timePatterns,op,timeVertical,true,leadInstructors);    setupInstructors(request,frm,c);    setupChildren(frm,request,c);    LookupTables.setupDatePatterns(request,sessionContext.getUser(),"Default",c.getSchedulingSubpart().effectiveDatePattern(),c.getManagingDept(),c.effectiveDatePattern());    LookupTables.setupRooms(request,c);    LookupTables.setupBldgs(request,c);    LookupTables.setupRoomFeatures(request,c);    LookupTables.setupRoomGroups(request,c);    frm.setAllowHardPrefs(sessionContext.hasPermission(c,Right.CanUseHardRoomPrefs));    BackTracker.markForBack(request,"classDetail.do?cid=" + frm.getClassId(),MSG.backClass(frm.getClassName()),true,false);    return mapping.findForward("editClass");  } catch (  Exception e) {    Debug.error(e);    throw e;  }}  }
class C{  public String GetImage(){  if (bufpos >= tokenBegin)   return new String(buffer,tokenBegin,bufpos - tokenBegin + 1); else   return new String(buffer,tokenBegin,bufsize - tokenBegin) + new String(buffer,0,bufpos + 1);}  }
class C{  public long readULong(int index){  return 0xffffffffL & (this.readUByte(index) << 24 | this.readUByte(index + 1) << 16 | this.readUByte(index + 2) << 8 | this.readUByte(index + 3));}  }
class C{  public static void sort(char[] a){  doSort(a,0,a.length - 1);}  }
class C{  public FolderTokenDocument findByName(String name) throws Exception {  int idx;  FolderTokenDocument doc=null;  idx=super.findIndexByName(name);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  doc=get(idx);  return doc;}  }
class C{  public static String normalize(String oid){  return oid.startsWith("OID.") ? oid.substring(4) : oid;}  }
class C{  public static byte[] insert(byte[] dest,byte[] src,int offset){  byte[] temp=new byte[dest.length + src.length];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset,temp,src.length + offset,dest.length - offset);  return temp;}  }
class C{  public EncoderTestSuiteBuilder valid(int min,int max){  _valid.set(min,max + 1);  _invalid.clear(min,max + 1);  _encoded.clear(min,max + 1);  return this;}  }
class C{  @DSComment("internet access") @DSSpec(DSCat.INTERNET) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.999 -0500",hash_original_method="CE8305B2F50479AC170D47319F9570C8",hash_generated_method="3017661F6403C8D54CDAF2BA856FA17A") public ThreadSafeClientConnManager(HttpParams params,SchemeRegistry schreg){  if (params == null) {    throw new IllegalArgumentException("HTTP parameters may not be null");  }  this.schemeRegistry=schreg;  this.connOperator=createConnectionOperator(schreg);  this.connectionPool=createConnectionPool(params);}  }
class C{  public static String unescapeDot(String identifierToUnescape){  int indexof=identifierToUnescape.indexOf(".");  if (indexof == -1) {    return identifierToUnescape;  }  indexof=identifierToUnescape.indexOf("\\");  if (indexof == -1) {    return identifierToUnescape;  }  StringBuilder builder=new StringBuilder();  int index=-1;  int max=identifierToUnescape.length() - 1;  do {    index++;    char c=identifierToUnescape.charAt(index);    if (c != '\\') {      builder.append(c);      continue;    }    if (index < identifierToUnescape.length() - 1) {      if (identifierToUnescape.charAt(index + 1) == '.') {        builder.append('.');        index++;      }    }  } while (index < max);  return builder.toString();}  }
class C{  public boolean isSimpleName(){  return isSimpleName;}  }
class C{  public static IRI decodeURI(String encodedValue,ValueFactory valueFactory){  if (encodedValue != null) {    return NTriplesUtil.parseURI(encodedValue,valueFactory);  }  return null;}  }
class C{  public final boolean isOperationRunning(@NonNull final String tag){  return mChronosListener.isRunning(tag);}  }
class C{  public void checkDateValidation(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return;  I_HR_JobOpening jobOpening=GridTabWrapper.create(mTab,I_HR_JobOpening.class);  Timestamp validFrom=jobOpening.getValidFrom();  Timestamp validTo=jobOpening.getValidTo();  if (validFrom != null && validTo != null) {    if (validFrom.after(validTo)) {      jobOpening.setValidTo(null);      mTab.fireDataStatusEEvent(Msg.parseTranslation(ctx,"@ValidFrom@") + " " + Msg.getMsg(ctx,"ShouldNotBeGreaterThan")+ " "+ Msg.parseTranslation(ctx,"@ValidTo@"),"",true);    }  }}  }
class C{  public BasicIconPart(Shape shape,DrawingAttributes da){  this(shape,(AffineTransform)null,da);}  }
class C{  public DuplicateUserException(String message){  super(message);}  }
class C{  public static boolean looksLikeAColor(String val){  return COLOR_MAP.get(val) != null || (val.startsWith("#") && (val.length() == 7 || val.length() == 4)) || val.startsWith("rgb");}  }
class C{  public DViewCertificate(Window parent,String title,X509Certificate[] certs,KseFrame kseFrame,int importExport) throws CryptoException {  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  this.kseFrame=kseFrame;  this.importExport=importExport;  initComponents(certs);}  }
class C{  public static String rename(String desc,String oldname,String newname){  if (desc.indexOf(oldname) < 0)   return desc;  StringBuffer newdesc=new StringBuffer();  int head=0;  int i=0;  for (; ; ) {    int j=desc.indexOf('L',i);    if (j < 0)     break; else     if (desc.startsWith(oldname,j + 1) && desc.charAt(j + oldname.length() + 1) == ';') {      newdesc.append(desc.substring(head,j));      newdesc.append('L');      newdesc.append(newname);      newdesc.append(';');      head=i=j + oldname.length() + 2;    } else {      i=desc.indexOf(';',j) + 1;      if (i < 1)       break;    }  }  if (head == 0)   return desc; else {    int len=desc.length();    if (head < len)     newdesc.append(desc.substring(head,len));    return newdesc.toString();  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof AreaRenderer)) {    return false;  }  AreaRenderer that=(AreaRenderer)obj;  if (!this.endType.equals(that.endType)) {    return false;  }  return super.equals(obj);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void endElement(String name) throws IOException {  if (name == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"name"));  }  if ("script".equalsIgnoreCase(name)) {    withinScript=false;  }  if ("style".equalsIgnoreCase(name)) {    withinStyle=false;  }  if (!withinScript && !withinStyle) {    dontEscape=false;  }  isXhtml=getContentType().equals(RIConstants.XHTML_CONTENT_TYPE);  if (isScriptOrStyle(name) && !scriptOrStyleSrc && writer instanceof FastStringWriter) {    String result=((FastStringWriter)writer).getBuffer().toString();    writer=origWriter;    if (result != null) {      String trim=result.trim();      if (isXhtml) {        if (isScript) {          Matcher cdataStartSlashSlash=CDATA_START_SLASH_SLASH.matcher(trim), cdataEndSlashSlash=CDATA_END_SLASH_SLASH.matcher(trim), cdataStartSlashStar=CDATA_START_SLASH_STAR.matcher(trim), cdataEndSlashStar=CDATA_END_SLASH_STAR.matcher(trim);          int trimLen=trim.length(), start, end;          if (cdataStartSlashSlash.find() && cdataEndSlashSlash.find()) {            start=cdataStartSlashSlash.end() - cdataStartSlashSlash.start();            end=trimLen - (cdataEndSlashSlash.end() - cdataEndSlashSlash.start());            writer.write(trim.substring(start,end));          } else           if ((null != cdataStartSlashSlash.reset() && cdataStartSlashSlash.find()) && cdataEndSlashStar.find()) {            start=cdataStartSlashSlash.end() - cdataStartSlashSlash.start();            end=trimLen - (cdataEndSlashStar.end() - cdataEndSlashStar.start());            writer.write(trim.substring(start,end));          } else           if (cdataStartSlashStar.find() && (null != cdataEndSlashStar.reset() && cdataEndSlashStar.find())) {            start=cdataStartSlashStar.end() - cdataStartSlashStar.start();            end=trimLen - (cdataEndSlashStar.end() - cdataEndSlashStar.start());            writer.write(trim.substring(start,end));          } else           if ((null != cdataStartSlashStar.reset() && cdataStartSlashStar.find()) && (null != cdataEndSlashStar.reset() && cdataEndSlashSlash.find())) {            start=cdataStartSlashStar.end() - cdataStartSlashStar.start();            end=trimLen - (cdataEndSlashSlash.end() - cdataEndSlashSlash.start());            writer.write(trim.substring(start,end));          } else {            writer.write(result);          }        } else {          if (trim.startsWith("<![CDATA[") && trim.endsWith("]]>")) {            writer.write(trim.substring(9,trim.length() - 3));          } else {            writer.write(result);          }        }      } else {        if (trim.startsWith("<!--") && trim.endsWith("//-->")) {          writer.write(trim.substring(4,trim.length() - 5));        } else {          writer.write(result);        }      }    }    if (isXhtml) {      if (!writingCdata) {        if (isScript) {          writer.write("\n//]]>\n");        } else {          writer.write("\n]]>\n");        }      }    } else {      if (isScriptHidingEnabled) {        writer.write("\n//-->\n");      }    }  }  isScript=false;  isStyle=false;  dontEscape=false;  if ("cdata".equalsIgnoreCase(name)) {    endCDATA();    return;  }  if (closeStart) {    boolean isEmptyElement=HtmlUtils.isEmptyElement(name);    if (isEmptyElement) {      flushAttributes();      writer.write(" />");      closeStart=false;      popElementName(name);      return;    }    flushAttributes();    writer.write('>');    closeStart=false;  }  writer.write("</");  writer.write(popElementName(name));  writer.write('>');}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  protected Object skipProjectPackageFragmentRoot(IPackageFragmentRoot root){  if (isProjectPackageFragmentRoot(root))   return root.getParent();  return root;}  }
class C{  private PlatformUser createOnBehalfUser(String password,PlatformUser currentUser,Organization customer) throws NonUniqueBusinessKeyException {  VOUserDetails voUserDetails=UserDataAssembler.toVOUserDetails(currentUser);  voUserDetails.setOrganizationId(customer.getOrganizationId());  PlatformUser customerUser=null;  int retryCount=0;  boolean isSAML=cs.isServiceProvider();  while (customerUser == null) {    try {      if (isSAML) {        voUserDetails.setUserId(password);      } else {        voUserDetails.setUserId(IdGenerator.generateArtificialIdentifier());      }      customerUser=addPlatformUser(voUserDetails,customer,password,UserAccountStatus.ACTIVE,false,true,null,false);      OnBehalfUserReference onBehalf=new OnBehalfUserReference();      onBehalf.setMasterUser(currentUser);      onBehalf.setSlaveUser(customerUser);      dm.persist(onBehalf);    } catch (    NonUniqueBusinessKeyException e) {      if (isSAML) {        logger.logDebug("User with the userId " + password + " already exists. But this is not a problem"+ " as you creating on behalf user.");        PlatformUser findTemplate=new PlatformUser();        findTemplate.setUserId(password);        try {          customerUser=(PlatformUser)dm.getReferenceByBusinessKey(findTemplate);        } catch (        ObjectNotFoundException e1) {        }        break;      }      retryCount++;      if (retryCount > 10) {        logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_NON_UNIQUE_BUSINESS_KEY);        throw e;      }    }catch (    MailOperationException e) {      SaaSSystemException se=new SaaSSystemException("A mail operation failed although we didn't try to send a mail '" + currentUser.getOrganization() + "'.",e);      logger.logError(Log4jLogger.SYSTEM_LOG,se,LogMessageIdentifier.ERROR_MAIL_OPERATION_FAILED);      throw se;    }catch (    ValidationException e) {      SaaSSystemException se=new SaaSSystemException("The user creation failed with a validation exception.",e);      logger.logError(Log4jLogger.SYSTEM_LOG,se,LogMessageIdentifier.ERROR_USER_CREATION_FAILED_WITH_VALIDATION_ERROR);      throw se;    }catch (    UserRoleAssignmentException e) {      SaaSSystemException se=new SaaSSystemException("The user creation failed with a user role assignment exception.",e);      logger.logError(Log4jLogger.SYSTEM_LOG,se,LogMessageIdentifier.ERROR_USER_CREATION_FAILED_WITH_VALIDATION_ERROR);      throw se;    }  }  return customerUser;}  }
class C{  public void onFinishSend(UUID nodeId,long threadId){  ThreadFinishSync threadSync=threadMap.get(threadId);  if (threadSync == null)   threadSync=F.addIfAbsent(threadMap,threadId,new ThreadFinishSync(threadId));  threadSync.onSend(nodeId);}  }
class C{  public static float min(float a,float b,float c){  return min(min(a,b),c);}  }
class C{  public static int mod(int a,int b){  int n=a / b;  a-=n * b;  if (a < 0)   return a + b;  return a;}  }
class C{  public void exit(Object monitor){  if (monitor == null) {    throw new NullPointerException();  }  ListIterator it=monitors.listIterator(monitors.size());  while (it.hasPrevious()) {    Object prev=it.previous();    if (monitor == prev) {      it.remove();      return;    }  }  throw new IllegalArgumentException();}  }
class C{  public boolean reloadIsModified(){  if (_classIsModified) {    return true;  }  if (!_hasJNIReload || !_classPath.canRead()) {    return true;  }  try {    long length=_classPath.length();    Class<?> cl=_clRef != null ? _clRef.get() : null;    if (cl == null) {      return false;    }    byte[] bytecode=new byte[(int)length];    try (InputStream is=_classPath.inputStream()){      IoUtil.readAll(is,bytecode,0,bytecode.length);    }     int result=reloadNative(cl,bytecode,0,bytecode.length);    if (result != 0) {      _classIsModified=true;      return true;    }    if (_sourcePath != null) {      _sourceLastModified=_sourcePath.getLastModified();      _sourceLength=_sourcePath.length();    }    log.info("Reloading " + cl.getName());    return false;  } catch (  Exception e) {    log.log(Level.WARNING,e.toString(),e);    _classIsModified=true;    return true;  }}  }
class C{  public GitRefNotFoundException(String message){  super(message);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TSTRUCT_METHOD;}  }
class C{  public View findViewById(int id){  return mRootView.findViewById(id);}  }
class C{  public static void writeStandardAnalyzerIndices() throws Exception {  File files=new File(fileFolder);  for (  File file : files.listFiles()) {    if (file.getName().startsWith(".")) {      continue;    }    if (file.isDirectory()) {      continue;    }    writeIndex(file.getName(),new StandardAnalyzer(),"standard");  }}  }
class C{  @Override public void propertyChange(final PropertyChangeEvent event){  if (event.getProperty().startsWith(UIPreferenceConstants.LABEL_DECORATION_PREF_PREFIX)) {    refresh();  }}  }
class C{  public void submit(final Collection<Callable<T>> callables) throws Exception {  Validate.notNull(callables);  final StopWatch watch=new StopWatch();  watch.start("init");  final long start=System.currentTimeMillis();  final AtomicLong totalTime=new AtomicLong();  LOG.debug("running {} tasks",callables.size());  if (callables.size() == 1) {    final T result=callables.iterator().next().call();    onResultAvailable(result);  } else {    LOG.debug("Running tasks in parallel");    watch.stop();    watch.start("submit tasks");    for (    final Callable<T> callable : callables) {      getCompletionService().submit(decorate(callable,totalTime));    }    watch.stop();    watch.start("consume results");    for (int i=0; i < callables.size(); i++) {      doConsumeResult();    }  }  watch.stop();  destroy();  LOG.debug("Number of Tasks: {}",callables.size());  final long averageExecutionTime=callables.size() != 0 ? totalTime.longValue() / callables.size() : 0;  LOG.debug("Average Execution Time: {}",averageExecutionTime);  LOG.debug("Total Task Time: {}",totalTime);  LOG.debug("Grand Total Execution Time: {}",System.currentTimeMillis() - start);  LOG.debug(watch.prettyPrint());}  }
class C{  public static boolean openConfirm(Shell parent,String title,String message){  return open(CONFIRM,parent,title,message,SWT.NONE);}  }
class C{  public static boolean calculateIndividualFormatForEachItem(DimensionConfig domainConfig,DimensionConfig dimensionConfig){  if (dimensionConfig == null) {    return false;  }  if (dimensionConfig.isGrouping()) {    return false;  } else {    if (domainConfig.isGrouping()) {      return false;    } else {      return true;    }  }}  }
class C{  protected void continueDrag(MouseEvent e){  dragDividerTo(positionForMouseEvent(e));}  }
class C{  private void reportProgress(State state,InnerState innerState){  long now=System.currentTimeMillis();  if (innerState.mBytesSoFar - innerState.mBytesNotified > Constants.MIN_PROGRESS_STEP && now - innerState.mTimeLastNotification > Constants.MIN_PROGRESS_TIME) {    mInfo.mCurrentBytes=innerState.mBytesSoFar;    mDB.updateDownloadCurrentBytes(mInfo);    innerState.mBytesNotified=innerState.mBytesSoFar;    innerState.mTimeLastNotification=now;    long totalBytesSoFar=innerState.mBytesThisSession + mService.mBytesSoFar;    if (Constants.LOGVV) {      Log.v(Constants.TAG,"downloaded " + mInfo.mCurrentBytes + " out of "+ mInfo.mTotalBytes);      Log.v(Constants.TAG,"     total " + totalBytesSoFar + " out of "+ mService.mTotalLength);    }    mService.notifyUpdateBytes(totalBytesSoFar);  }}  }
class C{  public ArrayIndexOutOfBoundsException(@Nullable String s){  super(s);}  }
class C{  @Override protected void reloadSummaries(){  super.reloadSummaries();  int local, global;  local=mDPM.getPasswordHistoryLength(mDeviceAdminSample);  global=mDPM.getPasswordHistoryLength(null);  mHistory.setSummary(localGlobalSummary(local,global));  long localLong, globalLong;  localLong=mDPM.getPasswordExpirationTimeout(mDeviceAdminSample);  globalLong=mDPM.getPasswordExpirationTimeout(null);  mExpirationTimeout.setSummary(localGlobalSummary(localLong / MS_PER_MINUTE,globalLong / MS_PER_MINUTE));  String expirationStatus=getExpirationStatus();  mExpirationStatus.setSummary(expirationStatus);}  }
class C{  private static BitMatrix removeDashedLines(BitMatrix matrix){  int nbDashed=1 + 2 * ((matrix.getWidth() - 1) / 2 / 16);  BitMatrix newMatrix=new BitMatrix(matrix.getWidth() - nbDashed,matrix.getHeight() - nbDashed);  int nx=0;  for (int x=0; x < matrix.getWidth(); x++) {    if ((matrix.getWidth() / 2 - x) % 16 == 0) {      continue;    }    int ny=0;    for (int y=0; y < matrix.getHeight(); y++) {      if ((matrix.getWidth() / 2 - y) % 16 == 0) {        continue;      }      if (matrix.get(x,y)) {        newMatrix.set(nx,ny);      }      ny++;    }    nx++;  }  return newMatrix;}  }
class C{  private void parseName(){  if (this.name == null) {    String name=getFileHandler().getName(getFile());    int nameIndex=name.toLowerCase().lastIndexOf(".ear");    if (nameIndex >= 0) {      name=name.substring(0,nameIndex);    }    getLogger().debug("Parsed EAR name = [" + name + "]",this.getClass().getName());    setName(name);  }}  }
class C{  public void writeThin(StreamOutput out) throws IOException {  super.writeTo(out);  out.writeVInt(bytes.length());}  }
class C{  protected MBeanServerConnection createConnection(Hashtable<String,Object> props) throws Exception {  if (jaasEntry != null) {    System.setProperty(Context.INITIAL_CONTEXT_FACTORY,initialContextFactory);    System.setProperty("java.security.auth.login.config",jaasFile);    new LoginContext(jaasEntry,this).login();  }  jndiContext=new InitialContext(props);  Object objref=jndiContext.lookup(mejbJndiPath);  ManagementHome home=(ManagementHome)PortableRemoteObject.narrow(objref,javax.management.j2ee.ManagementHome.class);  final Management mejb=home.create();  return new MEJBProxy(mejb,this);}  }
class C{  String repairImages(String html){  if (!Utils.getUseRicheditor(activity)) {    return html;  }  if (html == null || html.trim().length() == 0) {    return null;  }  final StringBuilder repaired=new StringBuilder(html);  int start=0;  while ((start=html.indexOf("<img src",start)) != -1) {    int withoutTag=start + 10;    int endOfImage=html.indexOf("\"",withoutTag);    int startOfAltContent=endOfImage + 7;    int endOfAlt=html.indexOf("\"",startOfAltContent);    String altContent=html.substring(startOfAltContent,endOfAlt);    start=endOfAlt;    repaired.replace(withoutTag,endOfImage,base64Images.get(altContent));  }  return repaired.toString();}  }
class C{  private static boolean isAlpha(char p_char){  return ((p_char >= 'a' && p_char <= 'z') || (p_char >= 'A' && p_char <= 'Z'));}  }
class C{  public void testPreferredUnitsRecording_stats(){  testPreferredUnitsRecording(R.string.track_detail_stats_tab);}  }
class C{  protected Path createPath(Position start,Position end){  Path path=new Path(start,end);  path.setFollowTerrain(true);  path.setPathType(AVKey.GREAT_CIRCLE);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setDelegateOwner(this.getActiveDelegateOwner());  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  @Override public void addToRequestQueue(Request<?> request){  if (queue == null) {    queue=new RequestQueue();    queue.start();  }  queue.add(request);}  }
class C{  public void stop(){  if (asyncPortTask != null && !asyncPortTask.isCancelled())   asyncPortTask.cancel(true);}  }
class C{  public int nextInt(){  return nextInt(this.mean);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value={"NO_NOTIFY_NOT_NOTIFYALL"},justification="Notify is used because Having more than one thread waiting on xmtHandler is an error.") synchronized public void sendXpaMessage(XpaMessage m,XpaListener reply){  if (log.isDebugEnabled()) {    log.debug("sendXpaMessage message: [" + m + "]");  }  lastSender=reply;  notifyMessage(m,reply);  int len=m.getNumDataElements();  int cr=1;  byte msg[]=new byte[len + cr];  for (int i=0; i < len; i++) {    msg[i]=(byte)m.getElement(i);  }  msg[len]=0x0d;synchronized (xmtHandler) {    xmtList.addLast(msg);    xmtHandler.notify();  }}  }
class C{  public void initComponents() throws Exception {  super.initComponents();  setSprogModeButton.setVisible(false);  addHelpMenu("package.jmri.jmrix.sprog.update.Sprogv4UpdateFrame",true);  _memo.getSprogVersionQuery().requestVersion(this);}  }
class C{  public static FilterResolverIntf resolveFilter(Expression filterExpression,AbsoluteTableIdentifier absoluteTableIdentifier){  try {    FilterExpressionProcessor filterExpressionProcessor=new FilterExpressionProcessor();    return filterExpressionProcessor.getFilterResolver(filterExpression,absoluteTableIdentifier);  } catch (  Exception e) {    throw new RuntimeException("Error while resolving filter expression",e);  }}  }
class C{  private void popAddr(GPR reg){  asm.emitLAddr(reg,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_ADDRESS,FP);  discardSlot();}  }
class C{  private final void ensure(int capacity){  if (null != this.buffer && this.buffer.remaining() >= capacity) {    return;  }  byte[] buf=null;  int off=0;  if (null == this.buffer) {    buf=new byte[Math.max(bufsize,capacity)];    this.buffer=ByteBuffer.wrap(buf);  } else {    buf=new byte[Math.max(this.buffer.remaining() + bufsize,capacity)];    ByteBuffer bb=ByteBuffer.wrap(buf);    off=this.buffer.remaining();    this.buffer.get(buf,0,this.buffer.remaining());    this.buffer=bb;  }  this.buffer.position(0);  try {    int len=this.stream.read(buf,off,this.buffer.limit());    if (len > 0) {      this.offset+=len;    }    this.buffer.limit(off + (len > 0 ? len : 0));  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  private void parseFont(String baseFont) throws IOException {  if (props == null) {    props=new Properties();    try {      props.load(BuiltinFont.class.getResourceAsStream("res/BaseFonts.properties"));    } catch (    NullPointerException e) {      props.load(resources.openRawResource(resources.getIdentifier("basefonts","raw",pkg)));    }  }  if (!props.containsKey(baseFont + ".file")) {    throw new IllegalArgumentException("Unknown Base Font: " + baseFont);  }  String file=props.getProperty(baseFont + ".file");  int length=Integer.parseInt(props.getProperty(baseFont + ".length"));  int length1=0;  int length2=0;  byte[] data=new byte[length];  InputStream fontStream=BuiltinFont.class.getResourceAsStream("res/" + file);  if (fontStream == null) {    fontStream=resources.openRawResource(resources.getIdentifier(file.substring(0,file.indexOf('.')),"raw",pkg));  }  int cur=0;  while (cur < length) {    cur+=fontStream.read(data,cur,length - cur);  }  fontStream.close();  if ((data[0] & 0xff) == 0x80) {    length1=(data[2] & 0xff);    length1|=(data[3] & 0xff) << 8;    length1|=(data[4] & 0xff) << 16;    length1|=(data[5] & 0xff) << 24;    length1+=6;    length2=(data[length1 + 2] & 0xff);    length2|=(data[length1 + 3] & 0xff) << 8;    length2|=(data[length1 + 4] & 0xff) << 16;    length2|=(data[length1 + 5] & 0xff) << 24;    length1+=6;  } else {    length1=Integer.parseInt(props.getProperty(baseFont + ".length1"));    if (props.containsKey(baseFont + ".length2")) {      length2=Integer.parseInt(props.getProperty(baseFont + ".lenth2"));    } else {      length2=length - length1;    }  }  parseFont(data,length1,length2);}  }
class C{  public void addIndex(Index index){  indexes.add(index);}  }
class C{  public boolean isEmpty(){  return internalMap.isEmpty();}  }
class C{  public boolean useActivityChain(DigicoreChain chain,int dayType,List<Integer> abnormalDays){  boolean result=false;  if (dayType == chain.getChainStartDay(abnormalDays)) {    result=true;  }  return result;}  }
class C{  public int subtreeDepth(){  throw new UnsupportedOperationException("subtreeDepth() not supported for generic OtherName");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void initialise(AttributeSet attrs){  this.isChecked=false;  this.checkableViews=new ArrayList<Checkable>(5);}  }
class C{  protected IIOMetadata updateMetadata(IIOMetadata meta,ImageWriterParams params){  final String stdmeta="javax_imageio_1.0";  if (meta.isStandardMetadataFormatSupported()) {    IIOMetadataNode root=(IIOMetadataNode)meta.getAsTree(stdmeta);    IIOMetadataNode dim=getChildNode(root,"Dimension");    IIOMetadataNode child;    if (params.getResolution() != null) {      child=getChildNode(dim,"HorizontalPixelSize");      if (child == null) {        child=new IIOMetadataNode("HorizontalPixelSize");        dim.appendChild(child);      }      child.setAttribute("value",Double.toString(params.getResolution().doubleValue() / 25.4));      child=getChildNode(dim,"VerticalPixelSize");      if (child == null) {        child=new IIOMetadataNode("VerticalPixelSize");        dim.appendChild(child);      }      child.setAttribute("value",Double.toString(params.getResolution().doubleValue() / 25.4));    }    try {      meta.mergeTree(stdmeta,root);    } catch (    IIOInvalidTreeException e) {      throw new RuntimeException("Cannot update image metadata: " + e.getMessage());    }  }  return meta;}  }
class C{  private void angularBind(String name,Object o,String noteId){  AngularObjectRegistry registry=interpreterContext.getAngularObjectRegistry();  if (registry.get(name,noteId,null) == null) {    registry.add(name,o,noteId,null);  } else {    registry.get(name,noteId,null).set(o);  }}  }
class C{  public void toEPL(StringWriter writer,EPStatementFormatter formatter,boolean isTopLevel,boolean andDelete){  formatter.beginSelect(writer,isTopLevel);  writer.write("select ");  if (andDelete) {    writer.write("and delete ");  }  if (distinct) {    writer.write("distinct ");  }  if (streamSelector == StreamSelector.ISTREAM_ONLY) {  } else   if (streamSelector == StreamSelector.RSTREAM_ONLY) {    writer.write("rstream ");  } else   if (streamSelector == StreamSelector.RSTREAM_ISTREAM_BOTH) {    writer.write("irstream ");  }  if (selectList != null && !selectList.isEmpty()) {    String delimiter="";    for (    SelectClauseElement element : selectList) {      writer.write(delimiter);      element.toEPLElement(writer);      delimiter=", ";    }  } else {    writer.write('*');  }}  }
class C{  private void deletePlayerAchievementFromDB(final String ach,final String name){  Connection conn=getSQLConnection();  try (PreparedStatement prep=conn.prepareStatement("DELETE FROM " + tablePrefix + "achievements WHERE playername = ? AND achievement = ?")){    prep.setString(1,name);    prep.setString(2,ach);    prep.execute();  } catch (  SQLException e) {    plugin.getLogger().log(Level.SEVERE,"SQL error while deleting achievement: ",e);  }}  }
class C{  public String processAndMerge(final List<Resource> resources,final ProcessingCriteria criteria) throws IOException {  notNull(criteria);  LOG.debug("criteria: {}",criteria);  callbackRegistry.onBeforeMerge();  try {    notNull(resources);    LOG.debug("process and merge resources: {}",resources);    final StringBuffer result=new StringBuffer();    if (shouldRunInParallel(resources)) {      result.append(runInParallel(resources,criteria));    } else {      for (      final Resource resource : resources) {        LOG.debug("\tmerging resource: {}",resource);        result.append(applyPreProcessors(resource,criteria));      }    }    return result.toString();  }  finally {    callbackRegistry.onAfterMerge();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.195 -0500",hash_original_method="2A4A3BCA46AEDD234384156D1F68427A",hash_generated_method="3BAC9879A5FBA4BFDDA379AD480B0F37") public synchronized boolean shouldStop(){  return fStop;}  }
class C{  public void testSimpleLiterals() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream();  SmileGenerator gen=smileGenerator(out,false);  gen.writeBoolean(true);  gen.close();  _verifyBytes(out.toByteArray(),SmileConstants.TOKEN_LITERAL_TRUE);  out=new ByteArrayOutputStream();  gen=smileGenerator(out,false);  gen.writeBoolean(false);  gen.close();  _verifyBytes(out.toByteArray(),SmileConstants.TOKEN_LITERAL_FALSE);  out=new ByteArrayOutputStream();  gen=smileGenerator(out,false);  gen.writeNull();  gen.close();  _verifyBytes(out.toByteArray(),SmileConstants.TOKEN_LITERAL_NULL);  out=new ByteArrayOutputStream();  gen=smileGenerator(out,true);  gen.writeBoolean(true);  gen.close();  int b4=HEADER_BYTE_4 | SmileConstants.HEADER_BIT_HAS_SHARED_NAMES;  _verifyBytes(out.toByteArray(),HEADER_BYTE_1,HEADER_BYTE_2,HEADER_BYTE_3,(byte)b4,SmileConstants.TOKEN_LITERAL_TRUE);  out=new ByteArrayOutputStream();  gen=smileGenerator(out,true);  gen.enable(SmileGenerator.Feature.WRITE_END_MARKER);  gen.writeNull();  gen.close();  _verifyBytes(out.toByteArray(),HEADER_BYTE_1,HEADER_BYTE_2,HEADER_BYTE_3,(byte)b4,TOKEN_LITERAL_NULL,BYTE_MARKER_END_OF_CONTENT);}  }
class C{  public static Observable<Integer> hotStream(){  return Observable.create(null).subscribeOn(Schedulers.newThread());}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  public DailyTimeIntervalScheduleBuilder onEveryDay(){  this.daysOfWeek=ALL_DAYS_OF_THE_WEEK;  return this;}  }
class C{  public boolean isValidating(){  return getFeature(XmlPullParser.FEATURE_VALIDATION);}  }
class C{  public <T extends Comparable<T>>List<T> sortDocsUsingDocQuery(List<T> recentItems,List<T> sortItems,QueryTransform<T> docTransform,Set<T> exclusions){  lock.readLock().lock();  try {    boolean useRank=false;    boolean bestScore=false;    boolean useThreshold=false;    double threshold=0.999;    List<T> result=new ArrayList<>();    Map<Vector,T> sortVectors=new HashMap<>();    Map<Vector,Double> scores=new HashMap<>();    boolean comparisonsMade=false;    boolean foundItemsToSort=false;    List<T> alreadySeen=new ArrayList<>();    List<T> notFound=new ArrayList<>();    for (    T item : sortItems) {      if (!recentItems.contains(item) && !exclusions.contains(item)) {        Vector v=docVecReader.getVector(docTransform.toSV(item));        if (v != null && !v.isZeroVector()) {          foundItemsToSort=true;          sortVectors.put(v,item);          scores.put(v,0D);        } else {          notFound.add(item);          logger.warn("Can't find vector for sort item " + item);        }      } else {        if (logger.isDebugEnabled())         logger.debug("Not sorting already seen article " + item);        alreadySeen.add(item);      }    }    if (!foundItemsToSort) {      logger.debug("No sort items so returning empty list");      return new ArrayList<>();    }    for (    T recent : recentItems) {      if (logger.isDebugEnabled())       logger.debug("Recent item " + recent);      String recentDoc=docTransform.toSV(recent);      Vector vectorRecent=docVecReader.getVector(recentDoc);      if (vectorRecent != null && !vectorRecent.isZeroVector()) {        comparisonsMade=true;        if (useRank) {          Map<Vector,Double> scoresLocal=new HashMap<>();          for (          Map.Entry<Vector,T> e : sortVectors.entrySet())           scoresLocal.put(e.getKey(),vectorRecent.measureOverlap(e.getKey()));          List<Vector> orderedLocal=CollectionTools.sortMapAndLimitToList(scoresLocal,scoresLocal.size());          double count=1;          for (          Vector vOrdered : orderedLocal) {            scores.put(vOrdered,scores.get(vOrdered) + count);            count++;          }        } else {          for (          Map.Entry<Vector,T> e : sortVectors.entrySet()) {            double overlap=vectorRecent.measureOverlap(e.getKey());            double current=scores.get(e.getKey());            if (!Double.isNaN(overlap)) {              if (logger.isDebugEnabled())               logger.debug("Overlap with " + e.getValue() + " is "+ overlap);              if (bestScore) {                if (overlap > current)                 scores.put(e.getKey(),overlap);              } else {                if (useThreshold) {                  if (current < threshold && overlap > current)                   scores.put(e.getKey(),overlap); else                   if (current > threshold && overlap > threshold)                   scores.put(e.getKey(),overlap + current);                } else                 scores.put(e.getKey(),overlap + current);              }            }          }        }      } else       logger.warn("Can't get vector for recent item " + recent);    }    if (comparisonsMade) {      List<Vector> ordered;      if (useRank)       ordered=CollectionTools.sortMapAndLimitToList(scores,scores.size(),false); else       ordered=CollectionTools.sortMapAndLimitToList(scores,scores.size());      for (      Vector vOrdered : ordered) {        if (logger.isDebugEnabled())         logger.debug("Item " + sortVectors.get(vOrdered) + " has score "+ scores.get(vOrdered));        result.add(sortVectors.get(vOrdered));      }      for (      T seenItem : alreadySeen) {        if (logger.isDebugEnabled())         logger.debug("Adding already seen item " + seenItem + " to end of list");        result.add(seenItem);      }      for (      T notFoundItem : notFound) {        if (logger.isDebugEnabled())         logger.debug("Adding not found item " + notFoundItem + " to end of list");        result.add(notFoundItem);      }      return result;    } else {      logger.debug("No comparisons made so returning empty list");      return new ArrayList<>();    }  }  finally {    lock.readLock().unlock();  }}  }
class C{  public boolean isDone(){  return false;}  }
class C{  private void testPoundSymbolInColumnName() throws SQLException {  deleteDb("oracle");  Connection conn=getConnection("oracle;MODE=Oracle");  Statement stat=conn.createStatement();  stat.execute("CREATE TABLE TEST(ID INT PRIMARY KEY, U##NAME VARCHAR(255))");  stat.execute("INSERT INTO TEST VALUES(1, 'Hello'), (2, 'HelloWorld'), (3, 'HelloWorldWorld')");  assertResult("1",stat,"SELECT ID FROM TEST where U##NAME ='Hello'");  conn.close();}  }
class C{  public static boolean isWildcardCompositeSubtype(String subtype){  return subtype.endsWith("+*");}  }
class C{  protected Enum_Impl(){  super();}  }
class C{  protected void report_shift_reduce(lalr_item red_itm,int conflict_sym) throws internal_error {  lalr_item itm;  symbol shift_sym;  System.err.println("*** Shift/Reduce conflict found in state #" + index());  System.err.print("  between ");  System.err.println(red_itm.to_simple_string());  for (Enumeration itms=items().all(); itms.hasMoreElements(); ) {    itm=(lalr_item)itms.nextElement();    if (itm != red_itm && !itm.dot_at_end()) {      shift_sym=itm.symbol_after_dot();      if (!shift_sym.is_non_term() && shift_sym.index() == conflict_sym) {        System.err.println("  and     " + itm.to_simple_string());      }    }  }  System.err.println("  under symbol " + terminal.find(conflict_sym).name());  System.err.println("  Resolved in favor of shifting.\n");  emit.num_conflicts++;  lexer.warning_count++;}  }
class C{  public void reset(){  startThreadMillis=SystemClock.currentThreadTimeMillis();  startRealtimeMillis=SystemClock.elapsedRealtime();  startUptimeMillis=SystemClock.uptimeMillis();}  }
class C{  public TypeVariableBV typeVariable(){  int id=typeVariableList.size();  typeVariableList.add(null);  TypeVariableBV result=new TypeVariableBV(id,this);  typeVariableList.set(id,result);  return result;}  }
class C{  public void showMigrationCling(){  mIsVisible=true;  mLauncher.hideWorkspaceSearchAndHotseat();  ViewGroup root=(ViewGroup)mLauncher.findViewById(R.id.launcher);  View inflated=mInflater.inflate(R.layout.migration_cling,root);  inflated.findViewById(R.id.cling_dismiss_migration_copy_apps).setOnClickListener(this);  inflated.findViewById(R.id.cling_dismiss_migration_use_default).setOnClickListener(this);}  }
class C{  public static Function avg(Object column){  return new Function(format("avg(%s)",column));}  }
class C{  private char[] convertToVararg(char[] typeName){  if (typeName == null)   return typeName;  final int len=typeName.length;  if (len < 2)   return typeName;  if (typeName[len - 1] != ']')   return typeName;  if (typeName[len - 2] != '[')   return typeName;  char[] vararg=new char[len + 1];  System.arraycopy(typeName,0,vararg,0,len - 2);  vararg[len - 2]='.';  vararg[len - 1]='.';  vararg[len]='.';  return vararg;}  }
class C{  public RegisteredProject updateProject(ProjectConfig newConfig) throws ForbiddenException, ServerException, NotFoundException, ConflictException {  String path=newConfig.getPath();  if (path == null) {    throw new ConflictException("Project path is not defined");  }  final FolderEntry baseFolder=asFolder(path);  if (baseFolder == null) {    throw new NotFoundException(String.format("Folder '%s' doesn't exist.",path));  }  ProjectConfig oldConfig=projectRegistry.getProject(path);  final RegisteredProject project=projectRegistry.putProject(newConfig,baseFolder,true,false);  if (!project.getProblems().isEmpty()) {    projectRegistry.putProject(oldConfig,baseFolder,false,false);    throw new ServerException("Problems occured: " + project.getProblemsStr());  }  workspaceProjectsHolder.sync(projectRegistry);  projectRegistry.fireInitHandlers(project);  reindexProject(project);  return project;}  }
class C{  public Writer buildConstraintCreationWriter(AbstractSession session,ForeignKeyConstraint foreignKey,Writer writer) throws ValidationException {  try {    writer.write("ALTER TABLE " + getFullName());    writer.write(" ADD CONSTRAINT ");    if (!session.getPlatform().shouldPrintConstraintNameAfter()) {      writer.write(foreignKey.getName() + " ");    }    foreignKey.appendDBString(writer,session);    if (session.getPlatform().shouldPrintConstraintNameAfter()) {      writer.write(" CONSTRAINT " + foreignKey.getName());    }  } catch (  IOException ioException) {    throw ValidationException.fileError(ioException);  }  return writer;}  }
class C{  @Override public void flush() throws IOException {synchronized (lock) {    checkNotClosed();    flushInternal();    out.flush();  }}  }
class C{  public final void propertyChange(PropertyChangeEvent evt){  String name=evt.getPropertyName();  if ("selected".equals(name)) {    if (Boolean.FALSE.equals(evt.getNewValue())) {      setSelected(false);    }  }}  }
class C{  String waitForCompletion(ClientResponse asyncResponse,int maxRetries) throws VPlexApiException {  MultivaluedMap<String,String> headers=asyncResponse.getHeaders();  String taskResourceStr=headers.getFirst(VPlexApiConstants.LOCATION_HEADER);  if (taskResourceStr == null) {    throw new VPlexApiException("Can't find location for asynchronous reponse.");  }  s_logger.info("Waiting for task {} to complete",taskResourceStr);  int retries=0;  while (retries++ < maxRetries) {    ClientResponse taskResponse=get(URI.create(taskResourceStr));    String responseStr=taskResponse.getEntity(String.class);    s_logger.info("Wait for completion response is {}",responseStr);    int taskStatus=taskResponse.getStatus();    taskResponse.close();    if (taskStatus == VPlexApiConstants.SUCCESS_STATUS) {      s_logger.info("Task {} completed successfully",taskResourceStr);      return responseStr;    } else     if (taskStatus != VPlexApiConstants.TASK_PENDING_STATUS) {      throw new VPlexApiException(String.format("Task %s did not complete successfully",taskResourceStr));    } else {      VPlexApiUtils.pauseThread(VPlexApiConstants.TASK_PENDING_WAIT_TIME);    }  }  throw VPlexApiException.exceptions.timeoutWaitingForAsyncOperationToComplete(taskResourceStr);}  }
class C{  @RequestMapping(value="/renewals",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @RolesAllowed(AuthoritiesConstants.USER) @Transactional public ResponseEntity<Void> update(@RequestBody Renewal renewal) throws URISyntaxException {  log.debug("REST request to update Renewal : {}",renewal);  ownerService.checkOldOwner(renewalRepository,renewal.getId());  ownerService.checkNewOwner(renewal);  renewal=renewalRepository.save(renewal);  return ResponseEntity.ok().build();}  }
class C{  @Override public EntityFactory register(String id,Supplier<Entity> constructor){  return register(new EntityFactory(id,constructor));}  }
class C{  public static boolean isRemoteProcess(){  return false;}  }
class C{  public void putLenBytes(byte[] bytes){  ensureCapacity(9 + bytes.length);  putFieldLength(bytes.length);  System.arraycopy(bytes,0,this.byteBuffer,this.position,bytes.length);  this.position+=bytes.length;}  }
class C{  public Map<Long,Double> recommend(String recommenderType,long userId,Integer group,Set<Integer> dimensions,int numRecommendations,Set<Long> exclusions,boolean includeShortTermClusters,double longTermWeight,double shortTermWeight,double decay,int minNumItems,Integer dim2){  boolean checkDimension=!(dimensions.isEmpty() || (dimensions.size() == 1 && dimensions.iterator().next() == Constants.DEFAULT_DIMENSION));  int minAllowed=minNumItems < numRecommendations ? minNumItems : numRecommendations;  if (logger.isDebugEnabled())   logger.debug("Recommend for user clusters - dimension " + StringUtils.join(dimensions,",") + " num recomendations "+ numRecommendations+ "minAllowed:"+ minAllowed+ " client "+ client+ " user "+ userId);  List<UserCluster> clusters;  List<UserCluster> shortTermClusters;  if (userId == Constants.ANONYMOUS_USER) {    clusters=new ArrayList<>();    shortTermClusters=new ArrayList<>();  } else {    clusters=getClusters(userId,group);    if (includeShortTermClusters)     shortTermClusters=getShortTermClusters(userId,group); else     shortTermClusters=new ArrayList<>();  }  Set<Integer> referrerClusters=getReferrerClusters();  if (referrerClusters == null || referrerClusters.size() == 0) {    if (!includeShortTermClusters && clusters.size() == 0) {      logger.debug("User has no long term clusters and we are not including short term clusters - so returning empty recommendations");      return new HashMap<>();    } else     if (includeShortTermClusters && clusters.size() == 0 && shortTermClusters.size() == 0) {      logger.debug("User has no long or short term clusters - so returning empty recommendations");      return new HashMap<>();    }  }  List<Long> res=null;  Map<Long,Double> counts=new HashMap<>();  int numTopCounts=numRecommendations * 5;  if (logger.isDebugEnabled())   logger.debug("recommending using long term cluster weight of " + longTermWeight + " and short term cluster weight "+ shortTermWeight+ " decay "+ decay);  for (  UserCluster cluster : clusters) {    updateCounts(recommenderType,userId,cluster,dimensions,checkDimension,numTopCounts,exclusions,counts,longTermWeight,decay,dim2);  }  for (  UserCluster cluster : shortTermClusters) {    updateCounts(recommenderType,userId,cluster,dimensions,checkDimension,numTopCounts,exclusions,counts,shortTermWeight,decay,dim2);  }  if (referrerClusters != null) {    if (logger.isDebugEnabled())     logger.debug("Adding " + referrerClusters.size() + " referrer clusters to counts for user "+ userId+ " client "+ client);    for (    Integer c : referrerClusters) {      UserCluster uc=new UserCluster(userId,c,1.0,0,0);      updateCounts(recommenderType,userId,uc,dimensions,checkDimension,numTopCounts,exclusions,counts,longTermWeight,decay,dim2);    }  }  if (counts.keySet().size() < minAllowed) {    if (logger.isDebugEnabled())     logger.debug("Number of items found " + counts.keySet().size() + " is less than "+ minAllowed+ " so returning empty recommendation for user "+ userId+ " client "+ client);    return new HashMap<>();  }  return RecommendationUtils.rescaleScoresToOne(counts,numRecommendations);}  }
class C{  public Period plusWeeks(int weeks){  if (weeks == 0) {    return this;  }  int[] values=getValues();  getPeriodType().addIndexedField(this,PeriodType.WEEK_INDEX,values,weeks);  return new Period(values,getPeriodType());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:06.977 -0500",hash_original_method="A33837A6F28FD62D569A3757B4A4C37F",hash_generated_method="7E82179D365BB9B32C1C6D4717B3AF47") private String openFileChooser(String acceptType){  Uri uri=mCallbackProxy.openFileChooser(acceptType);  if (uri != null) {    String filePath="";    Cursor cursor=mContext.getContentResolver().query(uri,new String[]{MediaStore.Images.Media.DATA},null,null,null);    if (cursor != null) {      try {        if (cursor.moveToNext()) {          filePath=cursor.getString(0);        }      }  finally {        cursor.close();      }    } else {      filePath=uri.getLastPathSegment();    }    String uriString=uri.toString();    BrowserFrame.sJavaBridge.storeFilePathForContentUri(filePath,uriString);    return uriString;  }  return "";}  }
class C{  private boolean isLatticeFilterSatisfied(final RelOptLattice lattice,final Filter filter,final StarTable.StarTableScan scan){  if (lattice.lattice.filter == null) {    return true;  }  RexExecutorImpl rexImpl=(RexExecutorImpl)(scan.getCluster().getPlanner().getExecutor());  RexImplicationChecker solver=new RexImplicationChecker(scan.getCluster().getRexBuilder(),rexImpl,scan.getRowType());  try {    return solver.implies(filter.getCondition(),lattice.lattice.filter);  } catch (  Exception e) {    LOG.debug("Exception thrown while solving " + filter.getCondition() + "  =>  "+ lattice.lattice.filter);    return false;  }}  }
class C{  public Iterator<E> iterator(){  return new Itr();}  }
class C{  public String nextTo(char delimiter) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public <T>SendPacket<T> send(SendPacket<T> entity){  entity.setBlinkConn(this);synchronized (mSendQueue) {    mSendQueue.add(entity);  }  return entity;}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  public void releaseAllocatedSection(AllocatedSection as,boolean terminatingTrain){  if (!terminatingTrain && (as.getSection().getOccupancy() == Section.OCCUPIED)) {    int selectedValue=JOptionPane.showOptionDialog(dispatcherFrame,java.text.MessageFormat.format(rb.getString("Question5"),new Object[]{as.getSectionName()}),rb.getString("WarningTitle"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{rb.getString("ButtonYesX"),rb.getString("ButtonNoX")},rb.getString("ButtonNoX"));    if (selectedValue == 1) {      return;    }  }  for (int i=allocatedSections.size(); i > 0; i--) {    if (as == allocatedSections.get(i - 1)) {      allocatedSections.remove(i - 1);    }  }  as.getSection().setState(Section.FREE);  as.getActiveTrain().removeAllocatedSection(as);  as.dispose();  if (allocatedSectionTableModel != null) {    allocatedSectionTableModel.fireTableDataChanged();  }  allocationRequestTableModel.fireTableDataChanged();  activeTrainsTableModel.fireTableDataChanged();  if (_AutoAllocate) {    autoAllocate.scanAllocationRequestList(allocationRequests);  }}  }
class C{  public void installAppFromUpdateRow(List<UpdateRow> rows){  UpdatesResponse.UpdateApk apk;  for (  UpdateRow row : rows) {    apk=new UpdatesResponse.UpdateApk();    apk.name=row.appName;    apk.packageName=row.packageName;    apk.versionName=row.versionName;    apk.md5sum=row.md5sum;    apk.icon=row.icon;    apk.apk=new UpdatesResponse.UpdateApk.Apk();    apk.apk.path=row.path;    apk.apk.path_alt=row.path_alt;    apk.apk.filesize=row.fileSize;    apk.size=row.fileSize;    apk.id=row.id;    downloadFromV7(apk,false);  }}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public ManagedStopFilterFactory(Map<String,String> args){  super(args);}  }
class C{  public IntDataBox(int rows,int cols){  this.data=new int[rows][cols];  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      data[i][j]=-99;    }  }}  }
class C{  private static boolean matchModels(List<? extends Statement> model1,Iterable<? extends Statement> model2,Map<BNode,BNode> bNodeMapping,int idx){  boolean result=false;  if (idx < model1.size()) {    Statement st1=model1.get(idx);    List<Statement> matchingStats=findMatchingStatements(st1,model2,bNodeMapping);    for (    Statement st2 : matchingStats) {      Map<BNode,BNode> newBNodeMapping=new HashMap<BNode,BNode>(bNodeMapping);      if (st1.getSubject() instanceof BNode && st2.getSubject() instanceof BNode) {        newBNodeMapping.put((BNode)st1.getSubject(),(BNode)st2.getSubject());      }      if (st1.getObject() instanceof BNode && st2.getObject() instanceof BNode) {        newBNodeMapping.put((BNode)st1.getObject(),(BNode)st2.getObject());      }      result=matchModels(model1,model2,newBNodeMapping,idx + 1);      if (result == true) {        break;      }    }  } else {    result=true;  }  return result;}  }
class C{  public void start(Xid xid,int flags) throws XAException {  if (flags != TMJOIN && flags != TMRESUME && flags != TMNOFLAGS) {    throw new XAException(XAException.XAER_INVAL);  }  if (flags == TMJOIN && connection.getPinGlobalTxToPhysicalConnection()) {    flags=TMRESUME;  }  execute("XA START " + xidToString(xid) + " "+ flagsToString(flags));}  }
class C{  protected void translateFields(ClassDescriptor clonedDescriptor,AbstractSession session){  Vector fieldsToTranslate=(Vector)clonedDescriptor.getFields().clone();  for (Iterator qkIterator=clonedDescriptor.getQueryKeys().values().iterator(); qkIterator.hasNext(); ) {    QueryKey queryKey=(QueryKey)qkIterator.next();    if (queryKey.isDirectQueryKey()) {      DatabaseField field=((DirectQueryKey)queryKey).getField();      fieldsToTranslate.add(field);    }  }  if (!clonedDescriptor.getObjectBuilder().isSimple()) {    for (Iterator dcIterator=clonedDescriptor.getMappings().iterator(); dcIterator.hasNext(); ) {      DatabaseMapping mapping=(DatabaseMapping)dcIterator.next();      if (mapping.isForeignReferenceMapping()) {        Collection fkFields=((ForeignReferenceMapping)mapping).getFieldsForTranslationInAggregate();        if (fkFields != null && !fkFields.isEmpty()) {          fieldsToTranslate.addAll(fkFields);        }      }    }  }  for (Iterator entry=fieldsToTranslate.iterator(); entry.hasNext(); ) {    DatabaseField field=(DatabaseField)entry.next();    translateField(getAggregateToSourceFields().get(field.getName()),field,clonedDescriptor);  }  clonedDescriptor.rehashFieldDependancies(session);}  }
class C{  public void testConsumeReadData(){  int lCount=100;  ByteFifoBuffer instance=new ByteFifoBuffer(lCount);  instance.write(getWData(lCount),lCount);  instance.consumeReadData(lCount / 2);  instance.consumeReadData(lCount / 2);  try {    instance.consumeReadData(1);    fail();  } catch (  BufferUnderflowException e) {  }}  }
class C{  public IdNotAvailableException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public void write(final int c) throws IOException {  if ((this.binaryUnsuspect) && (binaryHint((char)c))) {    this.binaryUnsuspect=false;    if (this.passbyIfBinarySuspect)     close();  }  if (this.binaryUnsuspect || !this.passbyIfBinarySuspect) {    char[] filtered;    if (this.inSingleQuote) {      this.buffer.append(c);      if (c == singlequote)       this.inSingleQuote=false;      if ((c == rb) && (this.buffer.length() > 0 && this.buffer.charAt(0) == lb)) {        this.inSingleQuote=false;        filtered=tokenProcessor(this.buffer.getChars(),singlequote);        if (this.out != null) {          this.out.write(filtered);        }        this.buffer.reset();      }    } else     if (this.inDoubleQuote) {      this.buffer.append(c);      if (c == doublequote)       this.inDoubleQuote=false;      if (c == rb && this.buffer.length() > 0 && this.buffer.charAt(0) == lb) {        this.inDoubleQuote=false;        filtered=tokenProcessor(this.buffer.getChars(),doublequote);        if (this.out != null)         this.out.write(filtered);        this.buffer.reset();      }    } else     if (this.inComment) {      this.buffer.append(c);      if (c == rb && this.buffer.length() > 6 && this.buffer.charAt(this.buffer.length() - 3) == dash) {        this.inComment=false;        final char[] comment=this.buffer.getChars();        if (this.scraper != null)         this.scraper.scrapeComment(comment);        if (this.out != null)         this.out.write(comment);        this.buffer.reset();      }    } else {      if (this.buffer.isEmpty()) {        if (c == rb) {          if (this.out != null)           this.out.write(c);        } else {          this.buffer.append(c);        }      } else       if (this.buffer.length() > 0 && this.buffer.charAt(0) == lb) {        if (c == singlequote)         this.inSingleQuote=true;        if (c == doublequote)         this.inDoubleQuote=true;        if ((this.buffer.length() >= 3) && (this.buffer.charAt(1) == excl) && (this.buffer.charAt(2) == dash)&& (c == dash)) {          this.inComment=true;          this.buffer.append(c);        } else         if (c == rb) {          this.buffer.append(c);          filtered=tokenProcessor(this.buffer.getChars(),doublequote);          if (this.out != null)           this.out.write(filtered);          this.buffer.reset();        } else         if (c == lb) {          if (this.buffer.length() > 0) {            filtered=tokenProcessor(this.buffer.getChars(),doublequote);            if (this.out != null)             this.out.write(filtered);          }          this.buffer.reset();          this.buffer.append(c);        } else {          this.buffer.append(c);        }      } else {        if (c == lb) {          if (this.buffer.length() > 0) {            filtered=tokenProcessor(this.buffer.getChars(),doublequote);            if (this.out != null)             this.out.write(filtered);          }          this.buffer.reset();          this.buffer.append(c);        } else {          this.buffer.append(c);        }      }    }  } else {    this.out.write(c);  }}  }
class C{  public DeviceAutomator pressDPadLeft(){  mDevice.pressDPadLeft();  return this;}  }
class C{  public static GF2nONBElement ZERO(GF2nONBField gf2n){  long[] polynomial=new long[gf2n.getONBLength()];  return new GF2nONBElement(gf2n,polynomial);}  }
class C{  public void refine(RVMMethod target,boolean isPreciseTarget){  this.target=target;  if (isPreciseTarget) {    this.isPreciseTarget=isPreciseTarget;  } else {    setPreciseTarget();  }}  }
class C{  @ObjectiveCName("toggleCallMuteWithCallId:") public void toggleCallMute(long callId){  if (modules.getCallsModule().getCall(callId).getIsAudioEnabled().get()) {    modules.getCallsModule().muteCall(callId);  } else {    modules.getCallsModule().unmuteCall(callId);  }}  }
class C{  private static byte[] createMessage(int len){  byte[] res=new byte[len];  for (int i=0; i < len; i++)   res[i]=(byte)i;  return res;}  }
class C{  void goToAnchor(String anchorName){  Label anchorCmp=(Label)anchors.get(anchorName);  if (anchorCmp != null) {    int cx=anchorCmp.getX();    int cy=anchorCmp.getY();    int h=getHeight();    if (anchorCmp.getAbsoluteY() - getY() + h > getPreferredH()) {      h=getPreferredH() - (anchorCmp.getAbsoluteY() - getY());    }    scrollRectToVisible(cx,cy,getWidth(),h,anchorCmp);  }}  }
class C{  private void initListViewAdapter(boolean initViewParams){  if (initViewParams) {    mInitListViewParams=false;    if (mApp.getCurrentTheme() == Common.DARK_THEME) {      mListView.setDivider(mContext.getResources().getDrawable(R.drawable.list_divider));    } else {      mListView.setDivider(mContext.getResources().getDrawable(R.drawable.list_divider_light));    }    mListView.setDividerHeight(1);    mListView.setFastScrollEnabled(true);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {      int navigationBarHeight=0;      int resourceId=getResources().getIdentifier("navigation_bar_height","dimen","android");      if (resourceId > 0) {        navigationBarHeight=getResources().getDimensionPixelSize(resourceId);      }      mListView.setClipToPadding(false);      mListView.setPadding(0,0,0,navigationBarHeight);    }  }  mListViewAdapter=new QueueDrawerAdapter(mContext,mApp.getService().getPlaybackIndecesList());  mListView.setAdapter(mListViewAdapter);  mListView.setOnItemClickListener(onClick);  mListView.setDropListener(onDrop);  mListView.setRemoveListener(onRemove);  SimpleFloatViewManager simpleFloatViewManager=new SimpleFloatViewManager(mListView);  simpleFloatViewManager.setBackgroundColor(Color.TRANSPARENT);  mListView.setFloatViewManager(simpleFloatViewManager);  mListView.setVisibility(View.VISIBLE);  mEmptyInfoText.setVisibility(View.INVISIBLE);  if (!isDrawerOpen())   mListView.setSelection(mApp.getService().getCurrentSongIndex());}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  public static String formatQuantity(Double quantity){  if (quantity == null)   return ""; else   return formatQuantity(quantity.doubleValue());}  }
class C{  public static VLookup createBPartner(int WindowNo){  int AD_Column_ID=3499;  try {    Lookup lookup=MLookupFactory.get(Env.getCtx(),WindowNo,0,AD_Column_ID,DisplayType.Search);    return new VLookup("C_BPartner_ID",false,false,true,lookup);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  return null;}  }
class C{  public String toXML(boolean headline){  XmlTextBuilder bdr;  String tagName="Registry";  bdr=new XmlTextBuilder();  if (headline)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("RegistryNumber",registryNumber);  bdr.addSimpleElement("RegistryDate",registryDate.toString());  bdr.addSimpleElement("SenderId",senderId);  bdr.addSimpleElement("Name",name);  bdr.addSimpleElement("EMail",eMail);  bdr.addSimpleElement("Topic",topic);  bdr.addSimpleElement("Addressee",addressee);  bdr.addSimpleElement("Status",Integer.toString(status));  bdr.addSimpleElement("SenderIdType",Integer.toString(senderIdType));  bdr.addSimpleElement("RepresentedName",representedName);  bdr.addSimpleElement("RepresentedId",representedId);  bdr.addSimpleElement("Oficina",oficina);  bdr.addSimpleElement("NumeroExpediente",numeroExpediente);  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private boolean matchesSearchCriteria(ExportMask exportMask,List<String> initiatorNames,boolean mustHaveAllPorts){  if (!mustHaveAllPorts) {    return true;  }  Set<String> exportMaskInitiators=new HashSet<String>();  if (exportMask.getExistingInitiators() != null) {    exportMaskInitiators.addAll(exportMask.getExistingInitiators());  }  if (exportMask.getUserAddedInitiators() != null) {    exportMaskInitiators.addAll(exportMask.getUserAddedInitiators().keySet());  }  if (exportMaskInitiators.size() == initiatorNames.size()) {    exportMaskInitiators.removeAll(initiatorNames);    if (exportMaskInitiators.isEmpty()) {      return true;    }  }  return false;}  }
class C{  private void removeSession(final Session session){  SESSIONS.remove(session);  final String articleId=(String)Channels.getHttpParameter(session,Article.ARTICLE_T_ID);  if (StringUtils.isBlank(articleId)) {    return;  }synchronized (ARTICLE_VIEWS) {    if (!ARTICLE_VIEWS.containsKey(articleId)) {      return;    }    final int count=ARTICLE_VIEWS.get(articleId);    final int newCount=count - 1;    if (newCount < 1) {      ARTICLE_VIEWS.remove(articleId);    } else {      ARTICLE_VIEWS.put(articleId,newCount);    }  }  final JSONObject message=new JSONObject();  message.put(Article.ARTICLE_T_ID,articleId);  message.put(Common.OPERATION,"-");  ArticleListChannel.notifyHeat(message);  notifyHeat(message);  final JSONObject user=(JSONObject)Channels.getHttpSessionAttribute(session,User.USER);  if (null == user) {    return;  }  final String userName=user.optString(User.USER_NAME);  final LatkeBeanManager beanManager=LatkeBeanManagerImpl.getInstance();  final ArticleRepository articleRepository=beanManager.getReference(ArticleRepository.class);  final LangPropsService langPropsService=beanManager.getReference(LangPropsServiceImpl.class);  final TimelineMgmtService timelineMgmtService=beanManager.getReference(TimelineMgmtService.class);  try {    final JSONObject article=articleRepository.get(articleId);    String articleTitle=Jsoup.parse(article.optString(Article.ARTICLE_TITLE)).text();    articleTitle=Emotions.convert(articleTitle);    final String articlePermalink=Latkes.getServePath() + article.optString(Article.ARTICLE_PERMALINK);    final JSONObject timeline=new JSONObject();    timeline.put(Common.TYPE,Article.ARTICLE);    String content=langPropsService.get("timelineOutArticleLabel");    content=content.replace("{user}","<a target='_blank' rel='nofollow' href='" + Latkes.getServePath() + "/member/"+ userName+ "'>"+ userName+ "</a>").replace("{article}","<a target='_blank' rel='nofollow' href='" + articlePermalink + "'>"+ articleTitle+ "</a>");    timeline.put(Common.CONTENT,content);    timelineMgmtService.addTimeline(timeline);  } catch (  final Exception e) {    LOGGER.log(Level.ERROR,"Timeline error",e);  } finally {    JdbcRepository.dispose();  }}  }
class C{  public Boolean isActive(){  return active;}  }
class C{  @Deprecated private void launchAnimBackupOld(){  if (!backupRoundTripFirstLaunched) {    currentBackupDrawable.stop();    if (backupRoundTrip.getLevel() == 1) {      backupRoundTrip.setLevel(0);    } else {      backupRoundTrip.setLevel(1);    }  } else {    backupRoundTripFirstLaunched=false;  }  currentBackupDrawable=(AnimatedVectorDrawable)backupRoundTrip.getCurrent();  currentBackupDrawable.start();}  }
class C{  public static boolean checkIfActive(Entity entity){  if (entity.worldObj.isRemote || !entity.addedToChunk || entity instanceof EntityFireworkRocket) {    return true;  }  long currentTick=entity.worldObj.getWorldInfo().getWorldTotalTime();  IModData_Activation spongeEntity=(IModData_Activation)entity;  boolean isActive=spongeEntity.getActivatedTick() >= currentTick || spongeEntity.getDefaultActivationState();  if (!isActive) {    if ((currentTick - spongeEntity.getActivatedTick() - 1) % 20 == 0) {      if (checkEntityImmunities(entity)) {        spongeEntity.setActivatedTick(currentTick + 20);      }      isActive=true;    }  } else   if (!spongeEntity.getDefaultActivationState() && entity.ticksExisted % 4 == 0 && !checkEntityImmunities(entity)) {    isActive=false;  }  int x=MathHelper.floor_double(entity.posX);  int z=MathHelper.floor_double(entity.posZ);  Chunk chunk=isActive ? ((IMixinChunkProviderServer)entity.worldObj.getChunkProvider()).getLoadedChunkWithoutMarkingActive(x >> 4,z >> 4) : null;  if (isActive && !(chunk != null && ((IMixinChunk)chunk).areNeighborsLoaded())) {    isActive=false;  }  return isActive;}  }
class C{  private String generateLabelFromAssociatedVolume(String baseName,Volume assocVolume){  final int baseNameLen=baseName.length();  String suffix=assocVolume.getLabel().substring(baseNameLen + 2);  StringBuilder builder=new StringBuilder();  builder.append(baseName);  suffix=suffix.replaceAll("-source","");  builder.append(suffix);  s_logger.info("generateLabelFromAssociatedVolume: " + builder.toString());  return builder.toString();}  }
class C{  public boolean hasSubjects(){  return hasRepeatingExtension(Subject.class);}  }
class C{  private byte[][] computeParityShards(byte[][] dataShards,ReedSolomon codec){  final int shardSize=dataShards[0].length;  final int totalShardCount=codec.getTotalShardCount();  final int dataShardCount=codec.getDataShardCount();  final int parityShardCount=codec.getParityShardCount();  final byte[][] parityShards=new byte[parityShardCount][shardSize];  final byte[][] allShards=new byte[totalShardCount][];  for (int iShard=0; iShard < totalShardCount; iShard++) {    if (iShard < dataShardCount) {      allShards[iShard]=dataShards[iShard];    } else {      allShards[iShard]=parityShards[iShard - dataShardCount];    }  }  codec.encodeParity(allShards,0,shardSize);  byte[] tempBuffer=new byte[shardSize];  allShards[parityShardCount - 1][0]+=1;  assertFalse(codec.isParityCorrect(allShards,0,shardSize));  assertFalse(codec.isParityCorrect(allShards,0,shardSize,tempBuffer));  allShards[parityShardCount - 1][0]-=1;  assertTrue(codec.isParityCorrect(allShards,0,shardSize));  assertTrue(codec.isParityCorrect(allShards,0,shardSize,tempBuffer));  return parityShards;}  }
class C{  public WebElement findElement(By by){  return driver.findElement(by);}  }
class C{  public TObjectDoubleHashMap(int initialCapacity,float loadFactor,TObjectHashingStrategy<K> strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  private void cleanupList(){  Iterator<PlayerPositionEntry> itr=playerPositions.iterator();  while (itr.hasNext()) {    PlayerPositionEntry entry=itr.next();    if (entry.hasPlayerMovedAway()) {      itr.remove();    }  }}  }
class C{  public static ChannelBuffer pingHeader(){  return pingHeader.duplicate();}  }
class C{  public SpecificMessage(String m,int l){  super(m,l);}  }
class C{  public static boolean assertEquals(final int a,final int b){  if (a == b) {    return true;  }  throw new ExamException(a + " != " + b);}  }
class C{  protected void report(Throwable e,boolean child){  println(">>> a serious error occurred: " + e.getMessage());  stacktrace(e,true);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.isNonLocalClient() ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public VideoNavigatorView(){}  }
class C{  public void insert(Instruction inst,List<RegSpillListElement> regList){  GCIRMapElement item=new GCIRMapElement(inst,regList);  if (DEBUG) {    System.out.println("Inserting new item: " + item);  }  list.add(item);}  }
class C{  private void readData() throws IOException {  byte[] block=new byte[kBlockSize];  int rcvd=0;  do {    rcvd=receiver.recv(block,block.length);    if (rcvd > 0) {      recv_stream.write(block,rcvd);      if (logger.isLoggable(Level.FINE)) {        logger.log(Level.FINE,"Receivied: " + recv_stream.getBuffered());      }    }  } while (rcvd > 0);}  }
class C{  public static String sanitizeFilename(String name){  return FileUtilSupport.getDefault().sanitizeFilename(name);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public BezierFigure(boolean isClosed){  path=new BezierPath();  set(PATH_CLOSED,isClosed);}  }
class C{  public UIInputTestCase(String name){  super(name);}  }
class C{  static void checkTypeRefAndPath(int typeRef,TypePath typePath){  int mask=0;switch (typeRef >>> 24) {case TypeReference.CLASS_TYPE_PARAMETER:case TypeReference.METHOD_TYPE_PARAMETER:case TypeReference.METHOD_FORMAL_PARAMETER:    mask=0xFFFF0000;  break;case TypeReference.FIELD:case TypeReference.METHOD_RETURN:case TypeReference.METHOD_RECEIVER:case TypeReference.LOCAL_VARIABLE:case TypeReference.RESOURCE_VARIABLE:case TypeReference.INSTANCEOF:case TypeReference.NEW:case TypeReference.CONSTRUCTOR_REFERENCE:case TypeReference.METHOD_REFERENCE:mask=0xFF000000;break;case TypeReference.CLASS_EXTENDS:case TypeReference.CLASS_TYPE_PARAMETER_BOUND:case TypeReference.METHOD_TYPE_PARAMETER_BOUND:case TypeReference.THROWS:case TypeReference.EXCEPTION_PARAMETER:mask=0xFFFFFF00;break;case TypeReference.CAST:case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:mask=0xFF0000FF;break;default :throw new IllegalArgumentException("Invalid type reference sort 0x" + Integer.toHexString(typeRef >>> 24));}if ((typeRef & ~mask) != 0) {throw new IllegalArgumentException("Invalid type reference 0x" + Integer.toHexString(typeRef));}if (typePath != null) {for (int i=0; i < typePath.getLength(); ++i) {int step=typePath.getStep(i);if (step != TypePath.ARRAY_ELEMENT && step != TypePath.INNER_TYPE && step != TypePath.TYPE_ARGUMENT && step != TypePath.WILDCARD_BOUND) {throw new IllegalArgumentException("Invalid type path step " + i + " in "+ typePath);}if (step != TypePath.TYPE_ARGUMENT && typePath.getStepArgument(i) != 0) {throw new IllegalArgumentException("Invalid type path step argument for step " + i + " in "+ typePath);}}}}  }
class C{  public Dimension maximumLayoutSize(Container target){  return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);}  }
class C{  public ExtendedNode replace(ExtendedNode n,ExtendedNode o){  if (o == firstChild) {    ExtendedNode t=(ExtendedNode)firstChild.getNextSibling();    n.setNextSibling(t);    if (o == lastChild) {      lastChild=n;    } else {      t.setPreviousSibling(n);    }    firstChild.setNextSibling(null);    firstChild=n;    if (o.getNodeType() == Node.ELEMENT_NODE) {      elementChildren--;    }    if (n.getNodeType() == Node.ELEMENT_NODE) {      elementChildren++;    }    return o;  }  if (o == lastChild) {    ExtendedNode t=(ExtendedNode)lastChild.getPreviousSibling();    n.setPreviousSibling(t);    t.setNextSibling(n);    lastChild.setPreviousSibling(null);    lastChild=n;    if (o.getNodeType() == Node.ELEMENT_NODE) {      elementChildren--;    }    if (n.getNodeType() == Node.ELEMENT_NODE) {      elementChildren++;    }    return o;  }  ExtendedNode ps=(ExtendedNode)o.getPreviousSibling();  ExtendedNode ns=(ExtendedNode)o.getNextSibling();  if ((ps.getNextSibling() == o) && (ns.getPreviousSibling() == o) && (ps.getParentNode() == o.getParentNode())&& (ns.getParentNode() == o.getParentNode())) {    ps.setNextSibling(n);    n.setPreviousSibling(ps);    n.setNextSibling(ns);    ns.setPreviousSibling(n);    o.setPreviousSibling(null);    o.setNextSibling(null);    if (o.getNodeType() == Node.ELEMENT_NODE) {      elementChildren--;    }    if (n.getNodeType() == Node.ELEMENT_NODE) {      elementChildren++;    }    return o;  }  throw createDOMException(DOMException.NOT_FOUND_ERR,"child.missing",new Object[]{new Integer(o.getNodeType()),o.getNodeName()});}  }
class C{  @Override public void execute(){  primaryKeyTarget.removePrimaryKeyRelationship(relationship,true);  foreignKeySource.removeForeignKeyRelationship(relationship,true);  relationship.setForeignKeyEntity(null);  relationship.setPrimaryKeyEntity(null);}  }
class C{  protected List<String> findUnusedUnits(Set<UnitInterface> units){  Set<String> usedUnits=new HashSet<String>();  List<String> result=new ArrayList<String>();  for (  UnitInterface unit : units) {    if (unit.getFileName().toLowerCase().endsWith(".pas")) {      result.add(unit.getName().toLowerCase());      allUnits.add(unit);    }    for (    String usedUnit : unit.getIncludes()) {      usedUnits.add(usedUnit.toLowerCase());    }  }  result.removeAll(usedUnits);  return result;}  }
class C{  public VCardReader(InputStream in){  this(in,VCardVersion.V2_1);}  }
class C{  public static int verifyRotation(final String label,final int rotateHint){  boolean hasCJK=false;  boolean hasMustRotate=false;  final int len=label.length();  final char[] data=new char[len];  char ch;  label.getChars(0,len,data,0);  for (int i=0; i < len; i++) {    ch=data[i];    if ((ch >= '\u4E00' && ch <= '\u9FFF') || (ch >= '\u3400' && ch <= '\u4DFF') || (ch >= '\uF900' && ch <= '\uFAFF')|| (ch >= '\u3040' && ch <= '\u309F')|| (ch >= '\u30A0' && ch <= '\u30FF')) {      hasCJK=true;    }    if ((ch >= '\u0590' && ch <= '\u05FF') || (ch >= '\u0600' && ch <= '\u06FF') || (ch >= '\u0700' && ch <= '\u074F')) {      hasMustRotate=true;    }  }  if (hasCJK) {    return DEFAULT_CJK;  }  final int legal=hasMustRotate ? LEGAL_MUST_ROTATE : LEGAL_ROMAN;  if ((rotateHint & legal) > 0) {    return rotateHint;  }  return hasMustRotate ? DEFAULT_MUST_ROTATE : DEFAULT_ROMAN;}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity is about to be \"paused\")");}  }
class C{  public DecoderPro3Action(String pName,boolean allowQuit){  super(pName);  this.allowQuit=allowQuit;}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  public static synchronized boolean isEmpty(){  return services.isEmpty();}  }
class C{  @Override public boolean isLocalServer(String server){  return "localhost".equalsIgnoreCase(server);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public static RawHeaders fromBytes(InputStream in) throws IOException {  RawHeaders headers;  do {    headers=new RawHeaders();    headers.setStatusLine(Util.readAsciiLine(in));    readHeaders(in,headers);  } while (headers.getResponseCode() == HttpEngine.HTTP_CONTINUE);  return headers;}  }
class C{  @SuppressWarnings("deprecation") public SMIMESignedGenerator createGenerator() throws CertStoreException, SMIMEException {  SMIMESignedGenerator generator=new SMIMESignedGenerator();  generator.addSigner(this.privateKey,this.certificate,SMIMESignedGenerator.DIGEST_SHA1);  generator.addCertificatesAndCRLs(this.certStore);  return generator;}  }
class C{  public void removePoint(DataPoint dp,int targetClass){  removePoint(dp.getWeight(),targetClass);}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  @Override public synchronized void parse(Reader reader,String baseURI) throws IOException, RDFParseException, RDFHandlerException {  if (reader == null) {    throw new IllegalArgumentException("Reader cannot be 'null'");  }  if (baseURI == null) {    throw new IllegalArgumentException("Base URI cannot be 'null'");  }  InputSource inputSource=new InputSource(reader);  inputSource.setSystemId(baseURI);  parse(inputSource);}  }
class C{  public void saveChargesToIncomeOrLiabilityAccountMappings(final JsonCommand command,final JsonElement element,final Long productId,final Map<String,Object> changes,final PortfolioProductType portfolioProductType,final boolean isPenalty){  String arrayName;  if (isPenalty) {    arrayName=LOAN_PRODUCT_ACCOUNTING_PARAMS.PENALTY_INCOME_ACCOUNT_MAPPING.getValue();  } else {    arrayName=LOAN_PRODUCT_ACCOUNTING_PARAMS.FEE_INCOME_ACCOUNT_MAPPING.getValue();  }  final JsonArray chargeToIncomeAccountMappingArray=this.fromApiJsonHelper.extractJsonArrayNamed(arrayName,element);  if (chargeToIncomeAccountMappingArray != null) {    if (changes != null) {      changes.put(LOAN_PRODUCT_ACCOUNTING_PARAMS.FEE_INCOME_ACCOUNT_MAPPING.getValue(),command.jsonFragment(LOAN_PRODUCT_ACCOUNTING_PARAMS.FEE_INCOME_ACCOUNT_MAPPING.getValue()));    }    for (int i=0; i < chargeToIncomeAccountMappingArray.size(); i++) {      final JsonObject jsonObject=chargeToIncomeAccountMappingArray.get(i).getAsJsonObject();      final Long chargeId=jsonObject.get(LOAN_PRODUCT_ACCOUNTING_PARAMS.CHARGE_ID.getValue()).getAsLong();      final Long incomeAccountId=jsonObject.get(LOAN_PRODUCT_ACCOUNTING_PARAMS.INCOME_ACCOUNT_ID.getValue()).getAsLong();      saveChargeToFundSourceMapping(productId,chargeId,incomeAccountId,portfolioProductType,isPenalty);    }  }}  }
class C{  private void drawDeployment(Graphics g){  Rectangle view=g.getClipBounds();  int drawX=(view.x / (int)(HEX_WC * scale)) - 1;  int drawY=(view.y / (int)(HEX_H * scale)) - 1;  int drawWidth=(view.width / (int)(HEX_WC * scale)) + 3;  int drawHeight=(view.height / (int)(HEX_H * scale)) + 3;  IBoard board=game.getBoard();  for (int i=0; i < drawHeight; i++) {    for (int j=0; j < drawWidth; j++) {      Coords c=new Coords(j + drawX,i + drawY);      if (board.isLegalDeployment(c,en_Deployer.getStartingPos())) {        drawHexBorder(g,getHexLocation(c),Color.yellow);      }    }  }}  }
class C{  public void unregisterSource(ProgressSource pi){synchronized (progressSourceList) {    if (progressSourceList.contains(pi) == false)     return;    pi.close();    progressSourceList.remove(pi);  }  if (progressListenerList.size() > 0) {    ArrayList<ProgressListener> listeners=new ArrayList<ProgressListener>();synchronized (progressListenerList) {      for (Iterator<ProgressListener> iter=progressListenerList.iterator(); iter.hasNext(); ) {        listeners.add(iter.next());      }    }    for (Iterator<ProgressListener> iter=listeners.iterator(); iter.hasNext(); ) {      ProgressListener pl=iter.next();      ProgressEvent pe=new ProgressEvent(pi,pi.getURL(),pi.getMethod(),pi.getContentType(),pi.getState(),pi.getProgress(),pi.getExpected());      pl.progressFinish(pe);    }  }}  }
class C{  public void visit(String name,Object value){  if (av != null) {    av.visit(name,value);  }}  }
class C{  protected void endNode(Node node) throws org.xml.sax.SAXException {switch (node.getNodeType()) {case Node.DOCUMENT_NODE:    break;case Node.ELEMENT_NODE:  String ns=m_dh.getNamespaceOfNode(node);if (null == ns) ns="";this.m_contentHandler.endElement(ns,m_dh.getLocalNameOfNode(node),node.getNodeName());if (m_Serializer == null) {Element elem_node=(Element)node;NamedNodeMap atts=elem_node.getAttributes();int nAttrs=atts.getLength();for (int i=(nAttrs - 1); 0 <= i; i--) {final Node attr=atts.item(i);final String attrName=attr.getNodeName();final int colon=attrName.indexOf(':');final String prefix;if (attrName.equals("xmlns") || attrName.startsWith("xmlns:")) {  if (colon < 0)   prefix=""; else   prefix=attrName.substring(colon + 1);  this.m_contentHandler.endPrefixMapping(prefix);} else if (colon > 0) {  prefix=attrName.substring(0,colon);  this.m_contentHandler.endPrefixMapping(prefix);}}{String uri=elem_node.getNamespaceURI();if (uri != null) {  String prefix=elem_node.getPrefix();  if (prefix == null)   prefix="";  this.m_contentHandler.endPrefixMapping(prefix);}}}break;case Node.CDATA_SECTION_NODE:break;case Node.ENTITY_REFERENCE_NODE:{EntityReference eref=(EntityReference)node;if (m_contentHandler instanceof LexicalHandler) {LexicalHandler lh=((LexicalHandler)this.m_contentHandler);lh.endEntity(eref.getNodeName());}}break;default :}}  }
class C{  protected void assertRevTrees(Project.NameKey proj,Map<Branch.NameKey,RevTree> trees) throws Exception {  TestRepository<?> localRepo=cloneProject(proj);  GitUtil.fetch(localRepo,"refs/*:refs/*");  Map<String,Ref> refs=localRepo.getRepository().getAllRefs();  Map<Branch.NameKey,RevTree> refValues=new HashMap<>();  for (  Branch.NameKey b : trees.keySet()) {    if (!b.getParentKey().equals(proj)) {      continue;    }    Ref r=refs.get(b.get());    assertThat(r).isNotNull();    RevWalk rw=localRepo.getRevWalk();    RevCommit c=rw.parseCommit(r.getObjectId());    refValues.put(b,c.getTree());    assertThat(trees.get(b)).isEqualTo(refValues.get(b));  }  assertThat(refValues.keySet()).containsAnyIn(trees.keySet());}  }
class C{  public String toString(){  return perm;}  }
class C{  @Override public void run(){  amIActive=true;  String redHeader, greenHeader, blueHeader, intensityHeader, saturationHeader, hueHeader;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  intensityHeader=args[0];  hueHeader=args[1];  saturationHeader=args[2];  redHeader=args[3];  greenHeader=args[4];  blueHeader=args[5];  if (redHeader.isEmpty() || greenHeader.isEmpty() || blueHeader == null || intensityHeader.isEmpty() || hueHeader.isEmpty() || saturationHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redMin, greenMin, blueMin;    double r, g, b;    double i, s, h;    float progress;    WhiteboxRasterInfo intensity=new WhiteboxRasterInfo(intensityHeader);    int rows=intensity.getNumberRows();    int cols=intensity.getNumberColumns();    WhiteboxRasterInfo hue=new WhiteboxRasterInfo(hueHeader);    if (hue.getNumberRows() != rows || hue.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    WhiteboxRasterInfo saturation=new WhiteboxRasterInfo(saturationHeader);    if (saturation.getNumberRows() != rows || saturation.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    double iNoData=intensity.getNoDataValue();    double hNoData=hue.getNoDataValue();    double sNoData=saturation.getNoDataValue();    WhiteboxRaster red=new WhiteboxRaster(redHeader,"rw",intensityHeader,WhiteboxRaster.DataType.FLOAT,iNoData);    WhiteboxRaster green=new WhiteboxRaster(greenHeader,"rw",intensityHeader,WhiteboxRaster.DataType.FLOAT,iNoData);    WhiteboxRaster blue=new WhiteboxRaster(blueHeader,"rw",intensityHeader,WhiteboxRaster.DataType.FLOAT,iNoData);    double[] dataI, dataH, dataS;    for (row=0; row < rows; row++) {      dataI=intensity.getRowValues(row);      dataH=hue.getRowValues(row);      dataS=saturation.getRowValues(row);      for (col=0; col < cols; col++) {        i=dataI[col];        h=dataH[col];        s=dataS[col];        if ((i != iNoData) && (h != hNoData) && (s != sNoData)) {          if (h <= 1) {            r=i * (1 + 2 * s - 3 * s * h) / 3;            g=i * (1 - s + 3 * s * h) / 3;            b=i * (1 - s) / 3;          } else           if (h <= 2) {            r=i * (1 - s) / 3;            g=i * (1 + 2 * s - 3 * s * (h - 1)) / 3;            b=i * (1 - s + 3 * s * (h - 1)) / 3;          } else {            r=i * (1 - s + 3 * s * (h - 2)) / 3;            g=i * (1 - s) / 3;            b=i * (1 + 2 * s - 3 * s * (h - 2)) / 3;          }          red.setValue(row,col,r * 255);          green.setValue(row,col,g * 255);          blue.setValue(row,col,b * 255);        } else {          red.setValue(row,col,iNoData);          green.setValue(row,col,iNoData);          blue.setValue(row,col,iNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    intensity.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    intensity.addMetadataEntry("Created on " + new Date());    intensity.close();    hue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    hue.addMetadataEntry("Created on " + new Date());    hue.close();    saturation.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    saturation.addMetadataEntry("Created on " + new Date());    saturation.close();    red.close();    green.close();    blue.close();    returnData(redHeader);    returnData(greenHeader);    returnData(blueHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void sortChildrenByContent(Comparator<? super T> comparator){  Comparator<TreeNode<T>> byContent=Comparator.comparing(null,comparator);  sortChildrenByNode(byContent);}  }
class C{  public APISharingProfileWrapper(APISharingProfile apiSharingProfile){  this.apiSharingProfile=apiSharingProfile;}  }
class C{  protected void showDialog(){  m_DbDialog=new DatabaseConnectionDialog(m_Parent,getURL(),getUser(),false);  m_DbDialog.setVisible(true);  if (m_DbDialog.getReturnValue() == JOptionPane.OK_OPTION) {    setURL(m_DbDialog.getURL());    setUser(m_DbDialog.getUsername());    setPassword(m_DbDialog.getPassword());  }  setButtons();}  }
class C{  private void siftUp(int k,RunnableScheduledFuture<?> key){  while (k > 0) {    int parent=(k - 1) >>> 1;    RunnableScheduledFuture<?> e=queue[parent];    if (key.compareTo(e) >= 0)     break;    queue[k]=e;    setIndex(e,k);    k=parent;  }  queue[k]=key;  setIndex(key,k);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,z1 * z1);        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String taskClassName(){  return taskClsName;}  }
class C{  public CustomSwitchPreference(Context context){  super(context,null);}  }
class C{  static SwaggerType toSwaggerType(final String type){  if (INTEGER_TYPES.contains(type))   return SwaggerType.INTEGER;  if (DOUBLE_TYPES.contains(type))   return SwaggerType.NUMBER;  if (BOOLEAN.equals(type) || PRIMITIVE_BOOLEAN.equals(type))   return SwaggerType.BOOLEAN;  if (STRING.equals(type))   return SwaggerType.STRING;  return SwaggerType.OBJECT;}  }
class C{  @Provides @Config("announcementsEmail") public static String provideAnnouncementsEmail(RegistryEnvironment environment){  return "announcements@example.com";}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  @Deprecated public static int fromFloat(float d){  if (d == 0.0f)   return 0; else {    float d2=Math.signum(d) * Math.abs(d) / (1f + Math.abs(d));    int d3=Math.round(Integer.MAX_VALUE * d2);    return d3;  }}  }
class C{  public SobolAnalysis(){  super();}  }
class C{  public final void info(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {    log(SimpleLog.LOG_LEVEL_INFO,message,t);  }}  }
class C{  private static void flush(Region region){  ((LocalRegion)region).getDiskRegion().flushForTesting();}  }
class C{  public FciDsepLegalPairsCfci(Graph graph,Set<Triple> unfaithfulTriples){  if (graph == null) {    throw new NullPointerException();  }  this.graph=graph;  this.ambiguousTriples=unfaithfulTriples;}  }
class C{  public void shutdown(){  this.shutdown=true;}  }
class C{  public int softDeviceImageSize(){  return softDeviceSize;}  }
class C{  private void searchDeviceOrOpenBluetooth(){  if (!BtUtil.isOpen(bluetoothAdapter)) {    Intent enableBtIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);    startActivityForResult(enableBtIntent,OPEN_BLUETOOTH_REQUEST);  } else {    BtUtil.searchDevices(bluetoothAdapter);  }}  }
class C{  @Override public QueueConnection createQueueConnection() throws JMSException {  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createQueueConnection()");  }  ActiveMQRASessionFactoryImpl s=new ActiveMQRASessionFactoryImpl(mcf,cm,getResourceAdapter().getTM(),ActiveMQRAConnectionFactory.QUEUE_CONNECTION);  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("Created queue connection: " + s);  }  return s;}  }
class C{  public void dispose(){  m_perspectiveModel.removeListener(m_listener);  m_leftPanel.delete();  m_debugLeftPanel.dispose();}  }
class C{  public BlockingClientManager(SocketFactory socketFactory){  this.socketFactory=checkNotNull(socketFactory);}  }
class C{  public static long length(URL url) throws IOException {  HTTPResponse http=HTTPEngine.head(url,null,null,-1,true,null,Constants.NAME,null,null);  return http.getContentLength();}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  @Deprecated public ClientBuilder withLogin(String email,String password){  loginInfo=new String[]{email,password};  return this;}  }
class C{  public SearchView(final String id){  super(id);}  }
class C{  private void delete(){  for (int i=0; i < IgfsUtils.TRASH_CONCURRENCY; i++)   delete(IgfsUtils.trashId(i));}  }
class C{  public static UpdateStatement orFail(CharSequence table){  return produce(table,"FAIL");}  }
class C{  public Vector3 scale(float scalarX,float scalarY,float scalarZ){  x*=scalarX;  y*=scalarY;  z*=scalarZ;  return this;}  }
class C{  protected void updateRadioLinks(){  m_CVBut.setEnabled(true);  m_CVText.setEnabled(m_CVBut.isSelected());  m_CVLab.setEnabled(m_CVBut.isSelected());  m_SeedText.setEnabled(m_CVBut.isSelected());  m_SeedLab.setEnabled(m_CVBut.isSelected());  if (m_AttributeEvaluatorEditor.getValue() instanceof AttributeTransformer) {    m_CVBut.setSelected(false);    m_CVBut.setEnabled(false);    m_CVText.setEnabled(false);    m_CVLab.setEnabled(false);    m_SeedText.setEnabled(false);    m_SeedLab.setEnabled(false);    m_TrainBut.setSelected(true);  }}  }
class C{  private boolean checkActualReceiver(){  mv.visitInsn(Opcodes.DUP);  mv.visitVarInsn(Opcodes.ALOAD,localsMap[0]);  mv.visitMethodInsn(Opcodes.INVOKESTATIC,MHI,"assertSame",LLV_SIG,false);  return true;}  }
class C{  protected void postClosingEvent(JInternalFrame frame){  InternalFrameEvent e=new InternalFrameEvent(frame,InternalFrameEvent.INTERNAL_FRAME_CLOSING);  try {    Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(e);  } catch (  SecurityException se) {    frame.dispatchEvent(e);  }}  }
class C{  public static Color showDialog(Component component,String title,Color initialColor) throws HeadlessException {  final JColorChooser pane=new JColorChooser(initialColor != null ? initialColor : Color.white);  ColorTracker ok=new ColorTracker(pane);  JDialog dialog=createDialog(component,title,true,pane,ok,null);  dialog.addComponentListener(new ColorChooserDialog.DisposeOnClose());  dialog.show();  return ok.getColor();}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  public long readLongShiftedGamma() throws IOException {  int preComp;  if ((fill >= 16 || refill() >= 16) && (preComp=SHIFTED_GAMMA[current >> (fill - 16) & 0xFFFF]) != 0) {    readBits+=preComp >> 16;    fill-=preComp >> 16;    return preComp & 0xFFFF;  }  final int msb=readUnary() - 1;  return msb == -1 ? 0 : ((1L << msb) | readLong(msb));}  }
class C{  public Builder restrictedPackageName(String value){  restrictedPackageName=value;  return this;}  }
class C{  public static void ignorePermission(String permission){  if (!isIgnoredPermission(permission)) {    ArrayList<String> ignoredPermissions=getIgnoredPermissions();    ignoredPermissions.add(permission);    Set<String> set=new HashSet<String>();    set.addAll(ignoredPermissions);    sharedPreferences.edit().putStringSet(KEY_IGNORED_PERMISSIONS,set).apply();  }}  }
class C{  private Iterator<Edge> logicalPredecessorEdgeIterator(BasicBlock block){  return isForwards ? cfg.incomingEdgeIterator(block) : cfg.outgoingEdgeIterator(block);}  }
class C{  @Override public void bindView(SimpleImageItem.ViewHolder viewHolder,List payloads){  super.bindView(viewHolder,payloads);  Context ctx=viewHolder.itemView.getContext();  viewHolder.imageName.setText(mName);  viewHolder.imageDescription.setText(mDescription);  viewHolder.imageView.setImageBitmap(null);  int color=UIUtils.getThemeColor(ctx,R.attr.colorPrimary);  viewHolder.view.setForeground(FastAdapterUIUtils.getSelectablePressedBackground(ctx,FastAdapterUIUtils.adjustAlpha(color,100),50,true));  Glide.clear(viewHolder.imageView);  Glide.with(ctx).load(mImageUrl).animate(R.anim.alpha_on).into(viewHolder.imageView);}  }
class C{  private void generatePatternBitmap(){  if (getBounds().width() <= 0 || getBounds().height() <= 0) {    return;  }  mBitmap=Bitmap.createBitmap(getBounds().width(),getBounds().height(),Config.ARGB_8888);  Canvas canvas=new Canvas(mBitmap);  Rect r=new Rect();  boolean verticalStartWhite=true;  for (int i=0; i <= numRectanglesVertical; i++) {    boolean isWhite=verticalStartWhite;    for (int j=0; j <= numRectanglesHorizontal; j++) {      r.top=i * mRectangleSize;      r.left=j * mRectangleSize;      r.bottom=r.top + mRectangleSize;      r.right=r.left + mRectangleSize;      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);      isWhite=!isWhite;    }    verticalStartWhite=!verticalStartWhite;  }}  }
class C{  private synchronized void startEditing(Activity activity,TextAreaData textArea,String initialText,int codenameOneInputType){  int txty=lastTextAreaY=textArea.getAbsoluteY() + textArea.getScrollY();  int txtx=lastTextAreaX=textArea.getAbsoluteX() + textArea.getScrollX();  lastTextAreaWidth=textArea.getWidth();  lastTextAreaHeight=textArea.getHeight();  int paddingTop=0;  int paddingLeft=textArea.paddingLeft;  int paddingRight=textArea.paddingRight;  int paddingBottom=textArea.paddingBottom;  if (textArea.isTextField) {switch (textArea.getVerticalAlignment()) {case Component.BOTTOM:      paddingTop=textArea.getHeight() - textArea.paddingBottom - textArea.fontHeight;    break;case Component.CENTER:  paddingTop=textArea.getHeight() / 2 - textArea.fontHeight / 2;break;default :paddingTop=textArea.paddingTop;break;}} else {paddingTop=textArea.paddingTop;}int id=activity.getResources().getIdentifier("cn1Style","attr",activity.getApplicationInfo().packageName);mEditText=new EditView(activity,textArea.textArea,this,id);mEditText.addTextChangedListener(mEditText.mTextWatcher);mEditText.setBackgroundDrawable(null);mEditText.setFocusableInTouchMode(true);mEditLayoutParams=new FrameLayout.LayoutParams(0,0);mEditLayoutParams.gravity=Gravity.LEFT | Gravity.TOP;mEditLayoutParams.setMargins(txtx,txty,0,0);mEditLayoutParams.width=textArea.getWidth();mEditLayoutParams.height=textArea.getHeight();mEditText.setLayoutParams(mEditLayoutParams);if (textArea.isRTL()) {mEditText.setGravity(Gravity.RIGHT | Gravity.TOP);} else {mEditText.setGravity(Gravity.LEFT | Gravity.TOP);}mEditText.setPadding(paddingLeft,paddingTop,paddingRight,paddingBottom);Component nextDown=textArea.nextDown;boolean imeOptionTaken=true;int ime=EditorInfo.IME_FLAG_NO_EXTRACT_UI;if (textArea.isSingleLineTextArea()) {if (textArea.getClientProperty("searchField") != null) {mEditText.setImeOptions(ime | EditorInfo.IME_ACTION_SEARCH);} else {if (textArea.getClientProperty("sendButton") != null) {mEditText.setImeOptions(ime | EditorInfo.IME_ACTION_SEND);} else {if (textArea.getClientProperty("goButton") != null) {mEditText.setImeOptions(ime | EditorInfo.IME_ACTION_GO);} else {if (textArea.isTextField && textArea.getDoneListener() != null) {mEditText.setImeOptions(ime | EditorInfo.IME_ACTION_DONE);} else if (nextDown != null && nextDown instanceof TextArea && ((TextArea)nextDown).isEditable() && ((TextArea)nextDown).isEnabled()) {mEditText.setImeOptions(ime | EditorInfo.IME_ACTION_NEXT);} else {mEditText.setImeOptions(ime | EditorInfo.IME_ACTION_DONE);imeOptionTaken=false;}}}}}mEditText.setSingleLine(textArea.isSingleLineTextArea());mEditText.setAdapter((ArrayAdapter<String>)null);mEditText.setText(initialText);if (!textArea.isSingleLineTextArea() && textArea.textArea.isGrowByContent() && textArea.textArea.getGrowLimit() > -1) {mEditText.setMaxLines(textArea.textArea.getGrowLimit());}if (textArea.nativeHintBool && textArea.getHint() != null) {mEditText.setHint(textArea.getHint());}addView(mEditText,mEditLayoutParams);invalidate();setVisibility(VISIBLE);bringToFront();mEditText.requestFocus();Object nativeFont=textArea.nativeFont;if (nativeFont == null) {nativeFont=impl.getDefaultFont();}Paint p=(Paint)((AndroidImplementation.NativeFont)nativeFont).font;mEditText.setTypeface(p.getTypeface());mEditText.setTextScaleX(p.getTextScaleX());mEditText.setTextSize(TypedValue.COMPLEX_UNIT_PX,p.getTextSize());int fgColor=textArea.fgColor;mEditText.setTextColor(Color.rgb(fgColor >> 16,(fgColor & 0x00ff00) >> 8,(fgColor & 0x0000ff)));boolean password=false;if ((codenameOneInputType & TextArea.PASSWORD) == TextArea.PASSWORD) {codenameOneInputType=codenameOneInputType ^ TextArea.PASSWORD;password=true;}if (textArea.isSingleLineTextArea()) {mEditText.setInputType(getAndroidInputType(codenameOneInputType));if (!imeOptionTaken && codenameOneInputType == TextArea.ANY) {mEditText.setInputType(getAndroidInputType(codenameOneInputType) | InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE);}if (Display.getInstance().getProperty("andAddComma","false").equals("true") && (codenameOneInputType & TextArea.DECIMAL) == TextArea.DECIMAL) {mEditText.setKeyListener(DigitsKeyListener.getInstance("0123456789.,"));}}if (password) {int type=mInputTypeMap.get(codenameOneInputType,InputType.TYPE_CLASS_TEXT);if ((type & InputType.TYPE_TEXT_FLAG_CAP_SENTENCES) == InputType.TYPE_TEXT_FLAG_CAP_SENTENCES) {type=type ^ InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;}mEditText.setInputType(type | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);mEditText.setTransformationMethod(new MyPasswordTransformationMethod());}int maxLength=textArea.maxSize;InputFilter[] FilterArray=new InputFilter[1];FilterArray[0]=new InputFilter.LengthFilter(maxLength);mEditText.setFilters(FilterArray);mEditText.setSelection(mEditText.getText().length());showVirtualKeyboard(true);}  }
class C{  public RtpSocket(){  mCacheSize=00;  mBufferCount=300;  mBuffers=new byte[mBufferCount][];  mPackets=new DatagramPacket[mBufferCount];  mReport=new SenderReport();  mAverageBitrate=new AverageBitrate();  resetFifo();  for (int i=0; i < mBufferCount; i++) {    mBuffers[i]=new byte[MTU];    mPackets[i]=new DatagramPacket(mBuffers[i],1);    mBuffers[i][0]=(byte)Integer.parseInt("10000000",2);    mBuffers[i][1]=(byte)96;  }  try {    mSocket=new MulticastSocket();  } catch (  Exception e) {    throw new RuntimeException(e.getMessage());  }}  }
class C{  private void traverse(GroovySourceAST t){  if (t == null) {    return;  }  if (unvisitedNodes != null) {    unvisitedNodes.add(t);  }  GroovySourceAST child=(GroovySourceAST)t.getFirstChild();  if (child != null) {    traverse(child);  }  GroovySourceAST sibling=(GroovySourceAST)t.getNextSibling();  if (sibling != null) {    traverse(sibling);  }}  }
class C{  public static void validate(VOPublicLandingpage voObj) throws ValidationException {  BLValidator.isNotNull("marketplaceId",voObj.getMarketplaceId());  BLValidator.isNonNegativeNumber("numberServices",voObj.getNumberServices());  BLValidator.isNotNull("fillinCriterion",voObj.getFillinCriterion());  BLValidator.isNotNull("landingpageServices",voObj.getLandingpageServices());}  }
class C{  public static String buildTarArchiveName(final String fileName,final boolean archiveHtmlAndSVGOutput,final boolean compressHtmlOutput,final FileOutputFormat outputFormat){  if (fileName == null) {    throw new IllegalStateException("HTML/SVG output file name was NULL");  } else   if (fileName.length() == 0) {    throw new IllegalStateException("HTML/SVG output file name was empty");  }  StringBuffer fileExtension=new StringBuffer();  if (outputFormat.equals(FileOutputFormat.SVG)) {    fileExtension.append(archiveHtmlAndSVGOutput ? ".tar" : "");    fileExtension.append((archiveHtmlAndSVGOutput && compressHtmlOutput) ? ".gz" : "");  } else   if (outputFormat.equals(FileOutputFormat.HTML)) {    fileExtension.append(compressHtmlOutput ? ".tar.gz" : ".tar");  }  if (fileName.endsWith(fileExtension.toString())) {    return fileName;  }  return fileName + fileExtension.toString();}  }
class C{  public static char convertByte2Uint8(byte b){  return (char)(b & 0xff);}  }
class C{  public byte[] crypt_raw(byte password[],byte salt[],int log_rounds,int cdata[]){  int rounds, i, j;  int clen=cdata.length;  byte ret[];  if (log_rounds < 4 || log_rounds > 30) {    throw new IllegalArgumentException("Bad number of rounds");  }  rounds=1 << log_rounds;  if (salt.length != BCRYPT_SALT_LEN) {    throw new IllegalArgumentException("Bad salt length");  }  init_key();  ekskey(salt,password);  for (i=0; i != rounds; i++) {    key(password);    key(salt);  }  for (i=0; i < 64; i++) {    for (j=0; j < (clen >> 1); j++) {      encipher(cdata,j << 1);    }  }  ret=new byte[clen * 4];  for (i=0, j=0; i < clen; i++) {    ret[j++]=(byte)((cdata[i] >> 24) & 0xff);    ret[j++]=(byte)((cdata[i] >> 16) & 0xff);    ret[j++]=(byte)((cdata[i] >> 8) & 0xff);    ret[j++]=(byte)(cdata[i] & 0xff);  }  return ret;}  }
class C{  public static BufferedImage scaleImage(BufferedImage image,int maxSideLength){  assert (maxSideLength > 0);  double originalWidth=image.getWidth();  double originalHeight=image.getHeight();  double scaleFactor=0.0;  if (originalWidth > originalHeight) {    scaleFactor=((double)maxSideLength / originalWidth);  } else {    scaleFactor=((double)maxSideLength / originalHeight);  }  if (scaleFactor < 1 && (int)Math.round(originalWidth * scaleFactor) > 1 && (int)Math.round(originalHeight * scaleFactor) > 1) {    BufferedImage img=new BufferedImage((int)Math.round(originalWidth * scaleFactor),(int)Math.round(originalHeight * scaleFactor),image.getType());    Graphics g=img.getGraphics();    ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);    g.drawImage(image,0,0,img.getWidth(),img.getHeight(),null);    return img;  } else   return image;}  }
class C{  public MqttMessageLogParser() throws XMLException {  super(LoggedMqttMessage.class);}  }
class C{  private void jbInit() throws Exception {  CompiereColor.setBackground(panel);  mainPanel.setLayout(mainLayout);  parameterPanel.setLayout(parameterLayout);  labelBankAccount.setText(Msg.translate(Env.getCtx(),"C_BankAccount_ID"));  fieldBankAccount.addActionListener(this);  labelBPartner.setText(Msg.translate(Env.getCtx(),"C_BPartner_ID"));  fieldBPartner=new VLookup("C_BPartner_ID",false,false,true,MLookupFactory.get(Env.getCtx(),m_WindowNo,0,MColumn.getColumn_ID(MBPartner.Table_Name,MBPartner.COLUMNNAME_C_BPartner_ID),DisplayType.Search));  fieldBPartner.addActionListener(this);  bRefresh.addActionListener(this);  labelDtype.setText(Msg.translate(Env.getCtx(),"C_DocType_ID"));  fieldDtype.addActionListener(this);  labelPayDate.setText(Msg.translate(Env.getCtx(),"PayDate"));  fieldPayDate.addActionListener(this);  labelPaymentRule.setText(Msg.translate(Env.getCtx(),"PaymentRule"));  fieldPaymentRule.addActionListener(this);  labelBankBalance.setText(Msg.translate(Env.getCtx(),"CurrentBalance"));  labelBalance.setText("0");  onlyDue.setText(Msg.getMsg(Env.getCtx(),"OnlyDue"));  onlyDue.addActionListener(this);  dataStatus.setText(" ");  checkAutoQuery.setText(Msg.getMsg(Env.getCtx(),"AutoRefresh"));  checkAutoQuery.setToolTipText(Msg.getMsg(Env.getCtx(),"AutoRefresh"));  checkAutoQuery.setName("AutoQuery");  checkAutoQuery.setSelected(MSysConfig.getValue(SYSCONFIG_INFO_AUTO_QUERY,"Y",Env.getAD_Client_ID(Env.getCtx())).equals("Y"));  checkAutoQuery.addActionListener(this);  bGenerate.addActionListener(this);  bCancel.addActionListener(this);  miniTable.addPropertyChangeListener(this);  mainPanel.add(parameterPanel,BorderLayout.NORTH);  mainPanel.setPreferredSize(new Dimension(SCREEN_WIDTH,SCREEN_HEIGHT));  parameterPanel.add(labelBankAccount,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldBankAccount,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  parameterPanel.add(labelBankBalance,new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(labelCurrency,new GridBagConstraints(4,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,0,5,5),0,0));  parameterPanel.add(labelBalance,new GridBagConstraints(3,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(labelBPartner,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldBPartner,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  parameterPanel.add(labelDtype,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldDtype,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  parameterPanel.add(labelPaymentRule,new GridBagConstraints(2,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldPaymentRule,new GridBagConstraints(3,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(checkAutoQuery,new GridBagConstraints(4,2,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(labelPayDate,new GridBagConstraints(0,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fieldPayDate,new GridBagConstraints(1,3,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  parameterPanel.add(onlyDue,new GridBagConstraints(3,3,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(bRefresh,new GridBagConstraints(4,3,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  mainPanel.add(dataStatus,BorderLayout.SOUTH);  mainPanel.add(dataPane,BorderLayout.CENTER);  dataPane.getViewport().add(miniTable,null);  commandPanel.setLayout(commandLayout);  commandLayout.setAlignment(FlowLayout.RIGHT);  commandLayout.setHgap(10);  commandPanel.add(bCancel,null);  commandPanel.add(bGenerate,null);  m_frame.getContentPane().add(commandPanel,BorderLayout.SOUTH);  m_frame.getContentPane().add(mainPanel,BorderLayout.CENTER);}  }
class C{  private void showGradeElevation(){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_settings),true);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.track_detail_stats_tab));  String gradeElevation=trackListActivity.getString(R.string.settings_stats_grade_elevation);  if (!EndToEndTestUtils.SOLO.isCheckBoxChecked(gradeElevation)) {    EndToEndTestUtils.SOLO.clickOnText(gradeElevation);  }  EndToEndTestUtils.SOLO.goBack();  EndToEndTestUtils.SOLO.goBack();}  }
class C{  protected void optimize(final AST2BOpContext ctx,final StaticAnalysis sa,final GraphPatternGroup<? extends IGroupMemberNode> group,final PropertyPathInfo ppInfo,final PathSequence pathSeq,final ArbitraryLengthPathNode alpNode,final Properties queryHints,final PropertyPathNode ppNode){  if (pathSeq.arity() == 0) {    return;  }  if (pathSeq.arity() == 1) {    final PathElt pathElt=(PathElt)pathSeq.get(0);    optimize(ctx,sa,group,ppInfo,pathElt,alpNode,queryHints,ppNode);  } else {    for (int i=0; i < pathSeq.arity(); i++) {      final PathElt pathElt=(PathElt)pathSeq.get(i);      final PathMod mod=pathElt.getMod();      if (i < (pathSeq.arity() - 1) && (mod == PathMod.ZERO_OR_ONE || mod == PathMod.ZERO_OR_MORE)) {        final ArrayList<PathElt> newSeq=new ArrayList<PathElt>(i + 1);        final ArrayList<PathElt> with=new ArrayList<PathElt>(pathSeq.arity() - i);        final ArrayList<PathElt> without=new ArrayList<PathElt>(pathSeq.arity() - i - 1);        for (int j=0; j < pathSeq.arity(); j++) {          final PathElt elt=(PathElt)pathSeq.get(j);          if (j < i) {            newSeq.add(elt);          } else           if (j == i) {            final PathElt _pathElt=new PathElt(pathElt);            if (mod == PathMod.ZERO_OR_ONE) {              _pathElt.setMod(null);            } else {              _pathElt.setMod(PathMod.ONE_OR_MORE);            }            with.add(_pathElt);          } else {            with.add(new PathElt(elt));            without.add(new PathElt(elt));          }        }        newSeq.add(new PathElt(new PathAlternative(new PathSequence((PathElt[])with.toArray(new PathElt[with.size()])),new PathSequence((PathElt[])without.toArray(new PathElt[without.size()])))));        final PathSequence pathSeq2=new PathSequence(newSeq.toArray(new PathElt[newSeq.size()]));        optimize(ctx,sa,group,ppInfo,pathSeq2,alpNode,queryHints,ppNode);        return;      }    }    TermNode last=ppInfo.s;    for (int i=0; i < pathSeq.arity(); i++) {      TermNode next;      if (i == (pathSeq.arity() - 1)) {        next=ppInfo.o;      } else {        final VarNode anon=anonVar();        if (alpNode != null) {          alpNode.addDropVar(anon);        }        next=anon;      }      final PropertyPathInfo _ppInfo=new PropertyPathInfo(last,next,ppInfo);      final PathElt pathElt=(PathElt)pathSeq.get(i);      optimize(ctx,sa,group,_ppInfo,pathElt,alpNode,queryHints,ppNode);      last=next;    }  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildXavkas(zone);}  }
class C{  protected RegexPrompt(String pattern){  this(Pattern.compile(pattern));}  }
class C{  @CheckReturnValue public <T>Subject5<A,B,C,D,T> asWithPrecursor(Function4<A,B,C,D,T> mapping,Function<T,String> typeToString){  final Shrink<Tuple5<A,B,C,D,T>> shrink=null;  final AsString<Tuple5<A,B,C,D,T>> desc=null;  final Source<Tuple5<A,B,C,D,T>> gen=Source.of(generatePrecursorValueTuple(mapping)).withShrinker(shrink).describedAs(desc);  return new PrecursorTheoryBuilder4<A,B,C,D,T>(this.state,gen,this.assumptions);}  }
class C{  public void testResourcesAvailable(){  new PersianAnalyzer().close();}  }
class C{  public BigdataGraphAccessor(final IIndexManager indexManager){  this(indexManager,BigdataSail.Options.DEFAULT_NAMESPACE,indexManager.getLastCommitTime());}  }
class C{  public double empiricalHSICincompleteCholeskyOLD(TetradMatrix Gy,TetradMatrix Gx,TetradMatrix Gz,int m){  int ky=Gy.columns();  int kx=Gx.columns();  int kz=Gz.columns();  TetradMatrix H=KernelUtils.constructH(m);  TetradMatrix Gcy=H.times(Gy);  TetradMatrix Gcx=H.times(Gx);  TetradMatrix Gcz=H.times(Gz);  TetradMatrix Gcyt=Gcy.transpose();  TetradMatrix A=Gcyt.times(Gcx);  TetradMatrix B=Gcy.times(A);  TetradMatrix Gcxt=Gcx.transpose();  TetradMatrix Kyx=B.times(Gcxt);  double empHSIC=0.0;  double xy=0.0;  for (int i=0; i < m; i++) {    empHSIC+=matrixProductEntry(B,Gcxt,i,i);  }  TetradMatrix Gytz=Gcyt.times(Gcz);  TetradMatrix Gztx=new TetradMatrix(kz,kx);  TetradMatrix Gczt=Gcz.transpose();  Gztx=Gczt.times(Gcx);  TetradMatrix Gztz=Gczt.times(Gcz);  TetradMatrix Gztzztx=Gztz.times(Gztx);  TetradMatrix Gytzztzztx=Gytz.times(Gztzztx);  TetradMatrix Gyytzztzztx=Gcy.times(Gytzztzztx);  double second=0.0;  for (int i=0; i < m; i++) {    second+=matrixProductEntry(Gyytzztzztx,Gcxt,i,i);  }  TetradMatrix Gztzr=Gztz.copy();  for (int i=0; i < kz; i++) {    Gztzr.set(i,i,Gztz.get(i,i) + this.regularizer);  }  TetradMatrix ZI=Gztzr.inverse();  TetradMatrix GzGZI=Gcz.times(ZI);  TetradMatrix GzGZIGzt=GzGZI.times(Gczt);  double inv=0.0;  for (int i=0; i < m; i++) {    for (int j=0; j < m; j++) {      GzGZIGzt.set(i,j,GzGZIGzt.get(i,j) * (-1 / this.regularizer));    }  }  for (int i=0; i < m; i++) {    GzGZIGzt.set(i,i,GzGZIGzt.get(i,i) + (1 / this.regularizer));  }  for (int i=0; i < m; i++) {    inv+=GzGZIGzt.get(i,i);  }  System.out.println("inv " + inv);  inv=0.0;  TetradMatrix ZI2=GzGZIGzt.times(GzGZIGzt);  for (int i=0; i < m; i++) {    inv+=ZI2.get(i,i);  }  System.out.println("inv " + inv);  TetradMatrix Gyytz=Gcy.times(Gytz);  TetradMatrix Gyytzzt=Gyytz.times(Gczt);  TetradMatrix Gzztx=Gcz.times(Gztx);  TetradMatrix Gzztxxt=Gzztx.times(Gcxt);  TetradMatrix GyzZI=Gyytzzt.times(ZI2);  TetradMatrix GyzZIzx=GyzZI.times(Gzztxxt);  double sec=0.0;  for (int i=0; i < m; i++) {    sec+=GyzZIzx.get(i,i);  }  System.out.println("sec " + sec);  TetradMatrix Gytzztz=Gytz.times(Gztz);  TetradMatrix GytzztzZI=Gytzztz.times(ZI);  TetradMatrix GytzztzZIztzztx=GytzztzZI.times(Gztzztx);  TetradMatrix GyytzztzZIztzztx=Gcy.times(GytzztzZIztzztx);  double s1=0.0;  for (int i=0; i < m; i++) {    s1+=matrixProductEntry(GyytzztzZIztzztx,Gcxt,i,i);  }  second-=2 * s1;  TetradMatrix GZIztzztx=ZI.times(Gztzztx);  TetradMatrix GytzztzZIztz=GytzztzZI.times(Gztz);  TetradMatrix GytzztzZIztzZIztzztx=GytzztzZIztz.times(GZIztzztx);  TetradMatrix GyytzztzZIztzZIztzztx=Gcy.times(GytzztzZIztzZIztzztx);  for (int i=0; i < m; i++) {    second+=matrixProductEntry(GyytzztzZIztzZIztzztx,Gcxt,i,i);  }  double reg2=Math.pow(this.regularizer,2);  empHSIC-=(2 / reg2) * second;  TetradMatrix Gxtz=Gcxt.times(Gcz);  TetradMatrix Gxtzztz=Gxtz.times(Gztz);  TetradMatrix Gxtzztzzt=Gxtzztz.times(Gczt);  TetradMatrix GxtzztzZI=Gxtzztz.times(ZI);  TetradMatrix GxtzztzZIztz=GxtzztzZI.times(Gztz);  TetradMatrix GxtzztzZIztzzt=GxtzztzZIztz.times(Gczt);  TetradMatrix GxtzztzZIztzZI=GxtzztzZIztz.times(ZI);  TetradMatrix GxtzztzZIztzZIztz=GxtzztzZIztzZI.times(Gztz);  TetradMatrix GxtzztzZIztzZIztzzt=GxtzztzZIztzZIztz.times(Gczt);  double third=0.0;  for (int i=0; i < m; i++) {    third+=matrixProductEntry(GyytzztzZIztzztx,Gxtzztzzt,i,i);    third+=matrixProductEntry(GyytzztzZIztzztx,GxtzztzZIztzZIztzzt,i,i);    third+=matrixProductEntry(Gyytzztzztx,GxtzztzZIztzzt,i,i);    third+=matrixProductEntry(GyytzztzZIztzZIztzztx,GxtzztzZIztzzt,i,i);  }  third*=-2;  for (int i=0; i < m; i++) {    third+=matrixProductEntry(Gyytzztzztx,Gxtzztzzt,i,i);    third+=matrixProductEntry(GyytzztzZIztzZIztzztx,Gxtzztzzt,i,i);    third+=matrixProductEntry(Gyytzztzztx,GxtzztzZIztzZIztzzt,i,i);    third+=matrixProductEntry(GyytzztzZIztzZIztzztx,GxtzztzZIztzZIztzzt,i,i);  }  double t1=0.0;  for (int i=0; i < m; i++) {    t1+=matrixProductEntry(GyytzztzZIztzztx,GxtzztzZIztzzt,i,i);  }  third+=4 * t1;  empHSIC+=third / Math.pow(reg2,2);  double betaz=0.0;  for (int i=0; i < (m - 1); i++) {    for (int j=(i + 1); j < m; j++) {      betaz+=Math.pow(matrixProductEntry(Gcz,Gczt,i,j),2);      betaz+=Math.pow(matrixProductEntry(Gcz,Gczt,j,i),2);    }  }  empHSIC*=(m / (betaz * (m - 1)));  return empHSIC;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public OneSheeldDevice(String address,String name,boolean isTypePlus){  checkBluetoothAddress(address);  this.name=name;  this.address=address;  this.isPaired=false;  this.isTypePlus=isTypePlus;  initialize();}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  cipher.processBlock(cfbV,0,cfbOutV,0);  for (int i=0; i < blockSize; i++) {    out[outOff + i]=(byte)(cfbOutV[i] ^ in[inOff + i]);  }  System.arraycopy(cfbV,blockSize,cfbV,0,cfbV.length - blockSize);  System.arraycopy(out,outOff,cfbV,cfbV.length - blockSize,blockSize);  return blockSize;}  }
class C{  public static long toLong(ByteString bs){  return bs.asReadOnlyByteBuffer().getLong();}  }
class C{  public static int putIntegerByWidth(byte[] destination,int destinationIndex,int width,long value){switch (width) {case 0:    break;case 1:  putByte(destination,destinationIndex,(byte)value);break;case 2:putShort(destination,destinationIndex,(short)value);break;case 3:putMediumInt(destination,destinationIndex,(int)value);break;case 4:putInt(destination,destinationIndex,(int)value);break;case 8:putLong(destination,destinationIndex,value);break;default :throw new IllegalArgumentException(UNEXPECTED_SIGNED_WIDTH_MSG + width);}return width;}  }
class C{  private int lengthOf(){  int length=Bytecodes.lengthOf(opcode);  if (length == 0) {switch (opcode) {case Bytecodes.TABLESWITCH:{        return new BytecodeTableSwitch(this,curBCI).size();      }case Bytecodes.LOOKUPSWITCH:{      return new BytecodeLookupSwitch(this,curBCI).size();    }case Bytecodes.WIDE:{    int opc=Bytes.beU1(code,curBCI + 1);    if (opc == Bytecodes.RET) {      return 4;    } else     if (opc == Bytecodes.IINC) {      return 6;    } else {      return 4;    }  }default :throw new Error("unknown variable-length bytecode: " + opcode);}}return length;}  }
class C{  protected BooleanControl(Type type,boolean initialValue,String trueStateLabel,String falseStateLabel){  super(type);  this.value=initialValue;  this.trueStateLabel=trueStateLabel;  this.falseStateLabel=falseStateLabel;}  }
class C{  protected String metaDataTableNameForPrimaryKeys(Table table){  return table.getName();}  }
class C{  public boolean performAnswerCheck(){  boolean answerCorrect=true;  for (  ButtonViewHolder vh : mButtons) {    if (!vh.performAnswerCheck()) {      answerCorrect=false;    }  }  return answerCorrect;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getEqualityOp_();}  }
class C{  public static <T>SortedSet<T> minus(SortedSet<T> self,Object removeMe){  return (SortedSet<T>)minus((Set<T>)self,removeMe);}  }
class C{  public void addSelectionListener(final SelectionListener listener){  addListener(SWT.Selection,new TypedListener(listener));}  }
class C{  public static Properties loadSrcConfig(String configName){  InputStream in=ConfigUtil.class.getResourceAsStream("/" + configName + ".properties");  return load(in,"caused by under the src ,config =" + configName + ".properties load failed or File Not Found !");}  }
class C{  private Appender createConsoleAppender(Level maxLevel){  String fmt="[%d{ABSOLUTE}][%-5p][%t][%c{1}] %m%n";  Appender app=new ConsoleAppender(new PatternLayout(fmt),ConsoleAppender.SYSTEM_OUT);  LevelRangeFilter lvlFilter=new LevelRangeFilter();  lvlFilter.setLevelMin(Level.TRACE);  lvlFilter.setLevelMax(maxLevel);  app.addFilter(lvlFilter);  return app;}  }
class C{  public void initContext(Object context) throws Exception {}  }
class C{  public static DragSourceListener remove(DragSourceListener l,DragSourceListener oldl){  return (DragSourceListener)removeInternal(l,oldl);}  }
class C{  @Override public void dispose(){  m_graphSynchronizer.dispose();  m_bottomPanel.dispose();  m_centerPanel.dispose();  m_model.dispose();  final INaviView view=m_model.getGraph().getRawView();  view.close();  m_menuBar.dipose();  m_toolBar.dispose();  m_menuBar.removeAll();  m_toolBar.removeAll();  m_menuBar=null;  m_toolBar=null;  m_rightPanel.dispose();  m_leftPanel.dispose();  m_dialogs.dispose();  removeAll();}  }
class C{  public static <T>T[] append(T[] base,T element){  T[] newArray=copyFrom(base,base.length + 1);  newArray[base.length]=element;  return newArray;}  }
class C{  private static void debugOut(String msg){  if (testing) {    System.out.println(msg);  }}  }
class C{  public void put(String key,Object value){  globalScope.put(key,value);}  }
class C{  public void addPriorityUnit(int id){  priorityUnitTargets.add(id);}  }
class C{  public static ContentSigner createDefaultContentSigner(PrivateKey key) throws OperatorCreationException {  return createContentSigner(SystemProperties.getDefaultSignatureAlgorithm(),key);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int d, x2, y2;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentValue=0;    double currentOrder=0;    double maxStreamOrder=noData;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentOrder=1;            output.setValue(y,x,currentOrder);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > currentOrder) {                    flag=false;                    break;                  }                  if (currentValue == currentOrder) {                    numNeighbouringStreamCells=0;                    for (d=0; d < 8; d++) {                      x2=x + dX[d];                      y2=y + dY[d];                      if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d] && output.getValue(y2,x2) == currentOrder) {                        numNeighbouringStreamCells++;                      }                    }                    if (numNeighbouringStreamCells >= 2) {                      currentOrder++;                      if (currentOrder > maxStreamOrder) {                        maxStreamOrder=currentOrder;                      }                    } else {                      flag=false;                      break;                    }                  }                  if (currentValue < currentOrder) {                    output.setValue(y,x,currentOrder);                  }                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,output.getValue(y,x) + 1);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    double streamsID=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == noData && pntr.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                streamsID=z;                flag=true;              }            } else {              streamsID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,streamsID);          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,streamsID);          } while (!flag);        } else         if (pntr.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public RangeQueryBinding(TupleSet ts,String field){  this(ts,field,false);}  }
class C{  public void resetAll(){  try {    getService().resetAll();  } catch (  RemoteException e) {    Log.e(TAG,e.getLocalizedMessage(),e);  }catch (  SecurityException e) {    Log.e(TAG,e.getLocalizedMessage(),e);  }}  }
class C{  public Element store(Object o){  VirtualSignalHead p=(VirtualSignalHead)o;  Element element=new Element("signalhead");  element.setAttribute("class",this.getClass().getName());  element.setAttribute("systemName",p.getSystemName());  element.addContent(new Element("systemName").addContent(p.getSystemName()));  storeCommon(p,element);  return element;}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public ProcessBuilder prepareMainModuleResolveProcessBuilder(File packageRoot){  final Builder<String> builder=ImmutableList.<String>builder();  NodeJsBinary nodeBinary=nodeBinaryProvider.get();  if (isWindows()) {    builder.add(WIN_SHELL_COMAMNDS);    builder.add(escapeBinaryPath(nodeBinary.getBinaryAbsolutePath()));    builder.add("-e");    builder.add("console.log(require.resolve('" + packageRoot.getName() + "'));");  } else {    builder.add(NIX_SHELL_COMAMNDS);    builder.add(escapeBinaryPath(nodeBinary.getBinaryAbsolutePath()) + " -e \"console.log(require.resolve('" + packageRoot.getName()+ "'));\"");  }  return create(builder.build(),nodeBinary,packageRoot,false);}  }
class C{  @MediumTest public void testPreconditions(){  assertTrue("center button should be right of left button",mLeftButton.getRight() < mCenterButton.getLeft());  assertTrue("right button should be right of center button",mCenterButton.getRight() < mRightButton.getLeft());  assertTrue("left button should be focused",mLeftButton.isFocused());}  }
class C{  private void run(AsyncResponse asyncResponse,Callable work){  executorService.submit(null);}  }
class C{  public static WebDialog create(String dialogTitle,String htmlFileName,int accentColor){  WebDialog dialog=new WebDialog();  Bundle args=new Bundle();  args.putString("dialogTitle",dialogTitle);  args.putString("htmlFileName",htmlFileName);  args.putInt("accentColor",accentColor);  dialog.setArguments(args);  return dialog;}  }
class C{  protected AbstractRable(Filter src,Map props){  init(src,props);}  }
class C{  public void testGetDeployableDir(){  assertEquals(JONAS_BASE + "/deploy",deployer.getDeployableDir(null));}  }
class C{  public static double log2MultipleHypergeometric(double[][] matrix){  double sum=0, sumForRow, sumForColumn, total=0;  for (int i=0; i < matrix.length; i++) {    sumForRow=0;    for (int j=0; j < matrix[i].length; j++) {      sumForRow+=matrix[i][j];    }    sum+=SpecialFunctions.lnFactorial(sumForRow);    total+=sumForRow;  }  for (int j=0; j < matrix[0].length; j++) {    sumForColumn=0;    for (int i=0; i < matrix.length; i++) {      sumForColumn+=matrix[i][j];    }    sum+=SpecialFunctions.lnFactorial(sumForColumn);  }  for (int i=0; i < matrix.length; i++) {    for (int j=0; j < matrix[i].length; j++) {      sum-=SpecialFunctions.lnFactorial(matrix[i][j]);    }  }  sum-=SpecialFunctions.lnFactorial(total);  return -sum / log2;}  }
class C{  private String determineSubscriptionId(long triggerProcessKey) throws Exception {  ResourceHolder holder=getTriggerProcessParameters(triggerProcessKey);  ResultSet triggerProcessParameters=holder.getRs();  while (triggerProcessParameters.next()) {    String parameterName=triggerProcessParameters.getString("name");    if (TriggerProcessParameterName.SUBSCRIPTION.name().equals(parameterName)) {      Object entry=getObjectFromXML(triggerProcessParameters,Object.class);      holder.close();      if (entry instanceof String) {        return (String)entry;      } else       if (entry instanceof VOSubscription) {        return ((VOSubscription)entry).getSubscriptionId();      }    }  }  throw new Exception("Migration failed, no product entry found for trigger process!");}  }
class C{  public static boolean isOrSubOf(Object obj,Object parentObject){  Class<?> parentClass=parentObject.getClass();  return isOrSubOf(obj,parentClass);}  }
class C{  public boolean isDataFlavorSupported(DataFlavor flavor){  for (int i=0; i < flavors.length; i++) {    if (flavor.equals(flavors[i])) {      return true;    }  }  return false;}  }
class C{  public void testToArray2() throws InterruptedException {  LinkedBlockingQueue<Integer> q=populatedQueue(SIZE);  Integer[] ints=new Integer[SIZE];  Integer[] array=q.toArray(ints);  assertSame(ints,array);  for (int i=0; i < ints.length; i++)   assertSame(ints[i],q.poll());}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  HttpSession sess=request.getSession(true);  sess.setMaxInactiveInterval(WebEnv.TIMEOUT);  StringBuffer output=new StringBuffer();  resetInternalMediaURL(request);  if (configLoaded && !fatalError) {    String acceptLanguage=request.getHeader("Accept-Language");    String acceptCharset=request.getHeader("Accept-Charset");    LocaleHandler lhandler=new LocaleHandler(acceptLanguage,acceptCharset);    RequestAnalyzer thisRequest=new RequestAnalyzer(this,request,false,"");    StringBuffer xmlCode=new StringBuffer();    StringBuffer xmlAppend=new StringBuffer();    if (thisRequest.getWebProject() != null)     externalMediaURL=getExternalMediaURL(thisRequest.getWebProject().get_ID()); else     externalMediaURL=getInternalMediaURL();    sess.setAttribute("ctx",getCtx());    if (thisRequest.getProcClassName() != null) {      try {        org.compiere.cm.Extend thisProcessor=thisRequest.getProcClass();        thisProcessor.doIt();        xmlAppend.append(thisProcessor.getXML());        if (thisProcessor.getRedirectURL() != null)         thisRequest.setRedirectURL(thisProcessor.getRedirectURL());      } catch (      Exception ex) {        ex.printStackTrace();      }    }    if (thisRequest.getIsRedirect()) {      response.sendRedirect(thisRequest.getRedirectURL());    } else {      Generator thisXMLGen=new Generator(this,request,thisRequest,xmlAppend);      xmlCode.append(thisXMLGen.get());      String xslCode=templateCache.getCM_Template(thisRequest.getCM_Container().getCM_Template_ID(),thisRequest.getWebProject().get_ID()).getPreBuildTemplate().toString();      try {        output.append(XSLTProcessor.run(request,xslCode,xmlCode.toString()));      } catch (      Exception E) {        response.sendError(500);      }      response.setContentType("text/html; charset=UTF-8");      response.setHeader("CMBuild",buildDate);      PrintWriter out;      out=response.getWriter();      out.print(output.toString());      out.close();      if (thisRequest.getWebProject() != null) {        AccessLogger thisAccessLogger=new AccessLogger(request,this,thisRequest);        thisAccessLogger.setFileSize(new java.math.BigDecimal(output.length()));        thisAccessLogger.start();      }    }  } else   if (fatalError) {    PrintWriter out;    out=response.getWriter();    out.print("<H1>Fatal Error:" + ErrorMessage + "</H1>");    out.close();  }}  }
class C{  public Inspector removeInspector(Inspector i){  int len=inspectors.size();  int x=0;  for (x=0; x < len; x++)   if (inspectors.get(x) == i)   break;  if (x == len)   return null;  tabs.removeTabAt(x);  return (Inspector)(inspectors.remove(x));}  }
class C{  public static <T extends Entity>T create(Cursor cursor,Class<T> cls,String... projection){  try {    T entity=cls.newInstance();    Field[] fields=new Field[projection.length];    for (int i=0, size=projection.length; i < size; i++) {      fields[i]=getColumnField(projection[i],entity);    }    return create(entity,cursor,cls,fields);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  private void invokeInsn(final int opcode,final Type type,final Method method,final boolean itf){  String owner=type.getSort() == Type.ARRAY ? type.getDescriptor() : type.getInternalName();  mv.visitMethodInsn(opcode,owner,method.getName(),method.getDescriptor(),itf);}  }
class C{  private PaletteUtils(){  DEFAULT=getString(R.string.default_palette);  SKY=getString(R.string.sky_palette);  SKY_LIGHT=getString(R.string.sky_light_palette);  INTERIOR=getString(R.string.interior_palette);  INTERIOR_LIGHT=getString(R.string.interior_light_palette);  WATER=getString(R.string.water_palette);  WATER_LIGHT=getString(R.string.water_light_palette);  WOOD=getString(R.string.wood_palette);  WOOD_LIGHT=getString(R.string.wood_light_palette);  palettes=new LinkedHashMap<>();  addPalette(DEFAULT,R.color.dust_note,R.color.grey_white,R.color.icon_dark,R.color.grey_medium);  addPalette(SKY,R.color.sky,R.color.sky_light,R.color.icon_light,R.color.white);  addPalette(SKY_LIGHT,R.color.sky_light,R.color.sky_bright,R.color.icon_light,R.color.white);  addPalette(INTERIOR,R.color.interior,R.color.interior_light,R.color.icon_light,R.color.white);  addPalette(INTERIOR_LIGHT,R.color.interior_light,R.color.interior_bright,R.color.icon_dark,R.color.white);  addPalette(WATER,R.color.water,R.color.water_light,R.color.icon_light,R.color.white);  addPalette(WATER_LIGHT,R.color.water_light,R.color.water_bright,R.color.icon_dark,R.color.white);  addPalette(WOOD,R.color.wood,R.color.wood_light,R.color.icon_light,R.color.white);  addPalette(WOOD_LIGHT,R.color.wood_light,R.color.wood_bright,R.color.icon_light,R.color.white);}  }
class C{  public FindServersResponse FindServers(RequestHeader RequestHeader,String EndpointUrl,String[] LocaleIds,String... ServerUris) throws ServiceFaultException, ServiceResultException {  FindServersRequest req=new FindServersRequest(RequestHeader,EndpointUrl,LocaleIds,ServerUris);  return (FindServersResponse)channel.serviceRequest(req);}  }
class C{  public CNodeChooserMouseListener(final CNodeChooserTable table,final ZyGraph graph){  Preconditions.checkNotNull(table,"IE01766: Table argument can not be null");  Preconditions.checkNotNull(graph,"IE01767: Graph argument can not be null");  m_table=table;  m_graph=graph;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.MULTILINE_COMMENT___MULTILINE_COMMENT_1:    return MULTILINE_COMMENT_1_EDEFAULT == null ? multilineComment_1 != null : !MULTILINE_COMMENT_1_EDEFAULT.equals(multilineComment_1);}return super.eIsSet(featureID);}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert (digester.peek() instanceof FacesConfigBean);  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[RenderKitRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  RenderKitBean rkb=(RenderKitBean)clazz.newInstance();  digester.push(rkb);}  }
class C{  public MultiMatchQueryBuilder operator(MatchQueryBuilder.Operator operator){  this.operator=operator;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:06.896 -0500",hash_original_method="3DA77438EDE7E493B793AF2E840B43CD",hash_generated_method="D01D31263CC47F8D2C2E50DB6F92AA06") public boolean isExpanded(){  return groupMetadata != null;}  }
class C{  private static JFreeChart createBarChart3D(){  Number[][] data=new Integer[][]{{new Integer(-3),new Integer(-2)},{new Integer(-1),new Integer(1)},{new Integer(2),new Integer(3)}};  CategoryDataset dataset=DatasetUtilities.createCategoryDataset("S","C",data);  return ChartFactory.createBarChart3D("Bar Chart 3D","Domain","Range",dataset,PlotOrientation.HORIZONTAL,true,true,true);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected void finalize() throws Throwable {  ray=hitPoint=points=null;  super.finalize();}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mVelocityViewPager == null)) {    result=specSize;  } else {    final int count=mVelocityViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public Object[] toArray(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] arr=new Object[size];    int i=0;    for (    TenantQueue q : qs.values()) {      Object[] qarr=q.toArray();      System.arraycopy(qarr,0,arr,i,qarr.length);      i+=qarr.length;    }    return arr;  }  finally {    lock.unlock();  }}  }
class C{  private static String buildMessage(String systemID,int lineNr,Exception e,String msg,boolean reportParams){  String str=msg;  if (reportParams) {    if (systemID != null) {      str+=", SystemID='" + systemID + "'";    }    if (lineNr >= 0) {      str+=", Line=" + lineNr;    }    if (e != null) {      str+=", Exception: " + e;    }  }  return str;}  }
class C{  @Override public void onPageScrollStateChanged(int state){  this.isIdle=state != ViewPager.SCROLL_STATE_SETTLING;  if (this.isIdle)   this.resourceCallback.onTransitionToIdle();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private int calculateLeft(View child,boolean duringLayout){  int mWidth=duringLayout ? getMeasuredWidth() : getWidth();  int childWidth=duringLayout ? child.getMeasuredWidth() : child.getWidth();  int childLeft=0;switch (mGravity) {case Gravity.LEFT:    childLeft=mSpinnerPadding.left;  break;case Gravity.CENTER_HORIZONTAL:int availableSpace=mWidth - mSpinnerPadding.right - mSpinnerPadding.left- childWidth;childLeft=mSpinnerPadding.left + (availableSpace / 2);break;case Gravity.RIGHT:childLeft=mWidth - mSpinnerPadding.right - childWidth;break;}return childLeft;}  }
class C{  SegmentCheckParameters expectedCols(int expectedColumns){  this.expectedColumns=expectedColumns;  return this;}  }
class C{  private static int ModifiedDepth(int var,PCalLocation pos,boolean movingForward,MappingObject[][] tpMap){  int amt=0;  int type=ObjectAt(pos,tpMap).getType();  if (type == MappingObject.LEFT_PAREN) {    amt=1;  } else   if (type == MappingObject.RIGHT_PAREN) {    amt=-1;  }  return var + (movingForward ? amt : -amt);}  }
class C{  public boolean isAnyAxisInverted(){  if (mAxisLeft.isInverted())   return true;  if (mAxisRight.isInverted())   return true;  return false;}  }
class C{  public AppEvent(EventType type,Object data,String token){  this(type,data);  this.token=token;  historyEvent=true;}  }
class C{  static Object generateTextValue(Element element,ElementMetadata<?,?> metadata){  if (metadata != null) {    return metadata.generateValue(element,metadata);  }  return element.getTextValue();}  }
class C{  public static MockAccountLookup createWithAccounts(final Account... accounts){  final MockAccountLookup accountLookup=new MockAccountLookup();  for (  final Account account : accounts) {    accountLookup.setMockAccount(account);  }  return accountLookup;}  }
class C{  private static boolean isFiringFromArmAlready(IGame game,int weaponId,final Entity attacker,int armLoc){  int torsoLoc=Mech.getInnerLocation(armLoc);  for (Enumeration<EntityAction> i=game.getActions(); i.hasMoreElements(); ) {    EntityAction ea=i.nextElement();    if (!(ea instanceof WeaponAttackAction)) {      continue;    }    WeaponAttackAction prevAttack=(WeaponAttackAction)ea;    if ((prevAttack.getEntityId() == attacker.getId()) && (prevAttack.getWeaponId() == weaponId)) {      break;    }    if (((prevAttack.getEntityId() == attacker.getId()) && (attacker.getEquipment(prevAttack.getWeaponId()).getLocation() == armLoc)) || ((prevAttack.getEntityId() == attacker.getId()) && (attacker.getEquipment(prevAttack.getWeaponId()).getLocation() == torsoLoc) && attacker.getEquipment(prevAttack.getWeaponId()).isSplit())) {      return true;    }  }  return false;}  }
class C{  public E put(int key,E value){  if (value == null) {    throw new NullPointerException();  }synchronized (this) {    Object[] arr=array;    E prev;    if (key < arr.length) {      prev=(E)arr[key];    } else {      arr=Arrays.copyOf(arr,key * 3 / 2 + 1);      prev=null;    }    if (prev == null) {      size++;    }    arr[key]=value;    array=arr;    return prev;  }}  }
class C{  private void updateEnabled(boolean interrupted){  ((Menubar)getJMenuBar()).updateEnabled(interrupted);  for (int ci=0, cc=toolBar.getComponentCount(); ci < cc; ci++) {    boolean enableButton;    if (ci == 0) {      enableButton=!interrupted;    } else {      enableButton=interrupted;    }    toolBar.getComponent(ci).setEnabled(enableButton);  }  if (interrupted) {    toolBar.setEnabled(true);    int state=getExtendedState();    if (state == Frame.ICONIFIED) {      setExtendedState(Frame.NORMAL);    }    toFront();    context.setEnabled(true);  } else {    if (currentWindow != null)     currentWindow.setPosition(-1);    context.setEnabled(false);  }}  }
class C{  public void testServerShutdownOutput() throws Exception {  testServerClosesOutput(SHUTDOWN_OUTPUT_AT_END);}  }
class C{  private List<TreeElement<JsonElement,JsonElement>> applyFilter(List<TreeElement<JsonElement,JsonElement>> roots,Filter filter){  List<TreeElement<JsonElement,JsonElement>> results=new ArrayList<TreeElement<JsonElement,JsonElement>>();  for (  TreeElement<JsonElement,JsonElement> root : roots) {    if (!isFiltered(root,filter)) {      applyFilterToChildren(root,filter);      results.add(root);    }  }  return results;}  }
class C{  public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException {  factorySpi.engineInit(spec);}  }
class C{  @Override public void fillPolygon(int[] xPoints,int[] yPoints,int nPoints){}  }
class C{  public int readInt(int bci){  return Bytes.beS4(code,bci);}  }
class C{  public boolean contains(String name){  return store.containsKey(name);}  }
class C{  public void onFinish(){}  }
class C{  public BasicTacticalGraphicAttributes(TacticalGraphicAttributes attributes){  if (attributes == null) {    String message=Logging.getMessage("nullValue.AttributesIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.scale=attributes.getScale();  this.font=attributes.getTextModifierFont();  this.textMaterial=attributes.getTextModifierMaterial();  this.interiorMaterial=attributes.getInteriorMaterial();  this.outlineMaterial=attributes.getOutlineMaterial();  this.interiorOpacity=attributes.getInteriorOpacity();  this.outlineOpacity=attributes.getOutlineOpacity();  this.outlineWidth=attributes.getOutlineWidth();}  }
class C{  @Override public final void preTearDown() throws Exception {  vm0.invoke(null);  vm1.invoke(null);}  }
class C{  public InvisibleMemberDescription(IEObjectDescription delegate){  super(delegate);}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:28.569 -0500",hash_original_method="16EE9E8EF08EFD3BA0284B735E7BCC13",hash_generated_method="252211F4AF72D0C8A67752AE95853AA0") public void transferFrom(Surface o){  addTaint(o.getTaint());}  }
class C{  public void writeTo(OutputStream os) throws IOException {  os.write(getEncoded());}  }
class C{  public GVTGlyphVector createGlyphVector(FontRenderContext frc,char[] chars){  StringCharacterIterator sci=new StringCharacterIterator(new String(chars));  return createGlyphVector(frc,sci);}  }
class C{  public boolean isSent(){  return is(SENT);}  }
class C{  @Override public void cancelClicked(){  view.hide();}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_create_widget_day);}  }
class C{  private String[] diff_halfMatchI(String longtext,String shorttext,int i){  String seed=longtext.substring(i,i + longtext.length() / 4);  int j=-1;  String best_common="";  String best_longtext_a="", best_longtext_b="";  String best_shorttext_a="", best_shorttext_b="";  while ((j=shorttext.indexOf(seed,j + 1)) != -1) {    int prefixLength=diff_commonPrefix(longtext.substring(i),shorttext.substring(j));    int suffixLength=diff_commonSuffix(longtext.substring(0,i),shorttext.substring(0,j));    if (best_common.length() < suffixLength + prefixLength) {      best_common=shorttext.substring(j - suffixLength,j) + shorttext.substring(j,j + prefixLength);      best_longtext_a=longtext.substring(0,i - suffixLength);      best_longtext_b=longtext.substring(i + prefixLength);      best_shorttext_a=shorttext.substring(0,j - suffixLength);      best_shorttext_b=shorttext.substring(j + prefixLength);    }  }  if (best_common.length() * 2 >= longtext.length()) {    return new String[]{best_longtext_a,best_longtext_b,best_shorttext_a,best_shorttext_b,best_common};  } else {    return null;  }}  }
class C{  public static boolean isMacOSX(){  return _isMacOSX;}  }
class C{  public DPolicyInformationChooser(JFrame parent,String title,PolicyInformation policyInformation) throws IOException {  super(parent,title,ModalityType.DOCUMENT_MODAL);  initComponents(policyInformation);}  }
class C{  @Override protected void drawNeedle(Graphics2D g2,Rectangle2D plotArea,Point2D rotate,double angle){  GeneralPath shape1=new GeneralPath();  GeneralPath shape2=new GeneralPath();  float minX=(float)plotArea.getMinX();  float minY=(float)plotArea.getMinY();  float maxX=(float)plotArea.getMaxX();  float maxY=(float)plotArea.getMaxY();  float midX=(float)(minX + (plotArea.getWidth() / 2));  float midY=(float)(minY + (plotArea.getHeight() / 2));  shape1.moveTo(minX,midY);  shape1.lineTo(midX,minY);  shape1.lineTo(maxX,midY);  shape1.closePath();  shape2.moveTo(minX,midY);  shape2.lineTo(midX,maxY);  shape2.lineTo(maxX,midY);  shape2.closePath();  if ((rotate != null) && (angle != 0)) {    getTransform().setToRotation(angle,rotate.getX(),rotate.getY());    shape1.transform(getTransform());    shape2.transform(getTransform());  }  if (getFillPaint() != null) {    g2.setPaint(getFillPaint());    g2.fill(shape1);  }  if (getHighlightPaint() != null) {    g2.setPaint(getHighlightPaint());    g2.fill(shape2);  }  if (getOutlinePaint() != null) {    g2.setStroke(getOutlineStroke());    g2.setPaint(getOutlinePaint());    g2.draw(shape1);    g2.draw(shape2);  }}  }
class C{  protected void doAdd(){  Assignment formula=doEditFormula((Assignment)null);  if (formula != null) {    Vector input=((Vector)tableViewer.getInput());    input.add(formula);    tableViewer.setInput(input);    this.doMakeDirty();  }}  }
class C{  private boolean updateAlphas(float ratio){  boolean done=true;  for (int i=0; i < mLayers.length; i++) {    int dir=mIsLayerOn[i] ? +1 : -1;    mAlphas[i]=(int)(mStartAlphas[i] + dir * 255 * ratio);    if (mAlphas[i] < 0) {      mAlphas[i]=0;    }    if (mAlphas[i] > 255) {      mAlphas[i]=255;    }    if (mIsLayerOn[i] && mAlphas[i] < 255) {      done=false;    }    if (!mIsLayerOn[i] && mAlphas[i] > 0) {      done=false;    }  }  return done;}  }
class C{  public Condition convertToCondition(){  Relation r=(negated) ? Relation.UNEQUAL : Relation.EQUAL;  return new BasicCondition(variableLabel + "'",variableValue,r);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:02.464 -0500",hash_original_method="E49204FD271E895B10D86A1AFEA21B04",hash_generated_method="59B3C6A592AE63BEE2BC1CC1723B36DF") private Settings(){}  }
class C{  protected void paintBorder(Graphics g){  if (isBorderPainted()) {    super.paintBorder(g);  }}  }
class C{  protected int addHeaderToOutput(byte[] msg,AbstractMRMessage m){  msg[0]=(byte)0xFF;  msg[1]=(byte)0xFF;  msg[2]=(byte)0x02;  return 3;}  }
class C{  public String toXMLBIF03(){  if (m_Instances == null) {    return ("<!--No model built yet-->");  }  StringBuffer text=new StringBuffer();  text.append(getBIFHeader());  text.append("\n");  text.append("\n");  text.append("<BIF VERSION=\"0.3\">\n");  text.append("<NETWORK>\n");  text.append("<NAME>" + XMLNormalize(m_Instances.relationName()) + "</NAME>\n");  for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {    text.append("<VARIABLE TYPE=\"nature\">\n");    text.append("<NAME>" + XMLNormalize(m_Instances.attribute(iAttribute).name()) + "</NAME>\n");    for (int iValue=0; iValue < m_Instances.attribute(iAttribute).numValues(); iValue++) {      text.append("<OUTCOME>" + XMLNormalize(m_Instances.attribute(iAttribute).value(iValue)) + "</OUTCOME>\n");    }    text.append("</VARIABLE>\n");  }  for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {    text.append("<DEFINITION>\n");    text.append("<FOR>" + XMLNormalize(m_Instances.attribute(iAttribute).name()) + "</FOR>\n");    for (int iParent=0; iParent < m_ParentSets[iAttribute].getNrOfParents(); iParent++) {      text.append("<GIVEN>" + XMLNormalize(m_Instances.attribute(m_ParentSets[iAttribute].getParent(iParent)).name()) + "</GIVEN>\n");    }    text.append("<TABLE>\n");    for (int iParent=0; iParent < m_ParentSets[iAttribute].getCardinalityOfParents(); iParent++) {      for (int iValue=0; iValue < m_Instances.attribute(iAttribute).numValues(); iValue++) {        text.append(m_Distributions[iAttribute][iParent].getProbability(iValue));        text.append(' ');      }      text.append('\n');    }    text.append("</TABLE>\n");    text.append("</DEFINITION>\n");  }  text.append("</NETWORK>\n");  text.append("</BIF>\n");  return text.toString();}  }
class C{  public boolean putImageWithFullPath(String fullPath,Bitmap theBitmap){  return !(fullPath == null || theBitmap == null) && saveBitmap(fullPath,theBitmap);}  }
class C{  public List<A> appendList(List<A> x){  return x.prependList(this);}  }
class C{  public static Offset fromFraction(double xFraction,double yFraction){  return new Offset(xFraction,yFraction,AVKey.FRACTION,AVKey.FRACTION);}  }
class C{  public static void printCloudletList(List<Cloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="\t";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Resource ID"+ indent+ "VM ID"+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  DecimalFormat dft=new DecimalFormat("###.##");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId());    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.printLine(indent + "SUCCESS" + indent+ indent+ cloudlet.getResourceId()+ indent+ cloudlet.getVmId()+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  protected GPNode findFairSizeNode(ArrayList nodeToSubtrees,HashMap sizeToNodes,GPNode parent1SelectedNode,GPTree tree2,EvolutionState state,int thread){  GPNode selectedNode=null;  int parent1SubTrees=parent1SelectedNode.numNodes(GPNode.NODESEARCH_NONTERMINALS);  int maxmatesublen=(parent1SubTrees == 0) ? 0 : 2 * parent1SubTrees + 1;  boolean[] mateSizeAvailable=new boolean[maxmatesublen + 1];  for (int i=0; i < maxmatesublen; i++)   mateSizeAvailable[i]=false;  for (int i=0; i < nodeToSubtrees.size(); i++) {    NodeInfo nodeInfo=(NodeInfo)nodeToSubtrees.get(i);    int subtree=nodeInfo.numberOfSubTreesBeneath;    if (subtree <= maxmatesublen)     mateSizeAvailable[subtree]=true;  }  int countOfPositives=0;  int countOfNegatives=0;  int sumOfPositives=0;  int sumOfNegatives=0;  int l;  for (l=1; l < parent1SubTrees; l++)   if (mateSizeAvailable[l]) {    countOfNegatives++;    sumOfNegatives+=parent1SubTrees - l;  }  for (l=parent1SubTrees + 1; l <= maxmatesublen; l++)   if (mateSizeAvailable[l]) {    countOfPositives++;    sumOfPositives+=l - parent1SubTrees;  }  int mateSublengthSelected=0;  if (sumOfPositives == 0 || sumOfNegatives == 0) {    if (mateSizeAvailable[parent1SubTrees]) {      mateSublengthSelected=parent1SubTrees;    }  } else {    double pzero=(mateSizeAvailable[parent1SubTrees]) ? 1.0 / parent1SubTrees : 0.0;    double ppositive=(1.0 - pzero) / (countOfPositives + ((double)(countOfNegatives * sumOfPositives) / (sumOfNegatives)));    double pnegative=(1.0 - pzero) / (countOfNegatives + ((double)(countOfPositives * sumOfNegatives) / (sumOfPositives)));    double total=countOfNegatives * pnegative + pzero + countOfPositives * ppositive;    RouletteWheelSelector wheel=new RouletteWheelSelector(maxmatesublen);    for (l=1; l < parent1SubTrees; l++)     if (mateSizeAvailable[l])     wheel.add(pnegative,l);    if (mateSizeAvailable[parent1SubTrees])     wheel.add(pzero,parent1SubTrees);    for (l=parent1SubTrees + 1; l <= maxmatesublen; l++)     if (mateSizeAvailable[l])     wheel.add(ppositive,l);    mateSublengthSelected=wheel.roulette(state,thread);  }  LinkedList listOfNodes=(LinkedList)(sizeToNodes.get(Integer.valueOf(mateSublengthSelected)));  if (listOfNodes == null) {    state.output.fatal("In SizeFairCrossoverPipeline, nodes for tree length " + mateSublengthSelected + " is null, indicates some serious error");  }  int chosenNode=0;  if (!homologous) {    chosenNode=state.random[thread].nextInt(listOfNodes.size());  } else {    if (listOfNodes.size() > 1) {      GPInitializer initializer=((GPInitializer)state.initializer);      int currentMinDistance=Integer.MAX_VALUE;      for (int i=0; i < listOfNodes.size(); i++) {        GPNode selectedMateNode=((NodeInfo)listOfNodes.get(i)).node;        GPNode currentMateNode=selectedMateNode;        GPNode currentParent1Node=parent1SelectedNode;        boolean foundAMatchInAncestor=false;        int distance=0;        while (currentMateNode.parent != null && currentMateNode.parent instanceof GPNode && currentParent1Node.parent != null && currentParent1Node.parent instanceof GPNode && !foundAMatchInAncestor) {          GPNode parent1=(GPNode)currentParent1Node.parent;          GPNode parent2=(GPNode)currentMateNode.parent;          if (parent1.swapCompatibleWith(initializer,parent2)) {            foundAMatchInAncestor=true;            break;          } else {            currentMateNode=parent2;            currentParent1Node=parent1;            distance=distance + 1;          }        }        if (distance < currentMinDistance) {          currentMinDistance=distance;          chosenNode=i;        }      }    }  }  NodeInfo nodeInfoSelected=(NodeInfo)listOfNodes.get(chosenNode);  selectedNode=nodeInfoSelected.node;  return selectedNode;}  }
class C{  static final int material(Position pos){  return pos.wMtrl - pos.bMtrl;}  }
class C{  @Override public void parseAtom(ExtensionProfile extProfile,Reader reader) throws IOException, ParseException {  FeedHandler handler=new FeedHandler(extProfile);  new XmlParser().parse(reader,handler,Namespaces.atom,"feed");}  }
class C{  @Procedure @PerformsWrites @Description("apoc.refactor.to(rel, endNode) redirect relationship to use new end-node") public Stream<RelationshipRefactorResult> to(@Name("relationship") Relationship rel,@Name("newNode") Node newNode){  RelationshipRefactorResult result=new RelationshipRefactorResult(rel.getId());  try {    Relationship newRel=rel.getStartNode().createRelationshipTo(newNode,rel.getType());    copyProperties(rel,newRel);    rel.delete();    return Stream.of(result.withOther(newRel));  } catch (  Exception e) {    return Stream.of(result.withError(e));  }}  }
class C{  public Population breedPopulation(EvolutionState state){  Population newpop=null;  if (clonePipelineAndPopulation)   newpop=(Population)state.population.emptyClone(); else {    if (backupPopulation == null)     backupPopulation=(Population)state.population.emptyClone();    newpop=backupPopulation;    newpop.clear();    backupPopulation=state.population;  }  for (int i=0; i < state.population.subpops.length; i++) {    if (reduceBy[i] > 0) {      int prospectiveSize=Math.max(Math.max(state.population.subpops[i].individuals.length - reduceBy[i],minimumSize[i]),numElites(state,i));      if (prospectiveSize < state.population.subpops[i].individuals.length) {        state.output.message("Subpop " + i + " reduced "+ state.population.subpops[i].individuals.length+ " -> "+ prospectiveSize);        newpop.subpops[i].resize(prospectiveSize);      }    }  }  loadElites(state,newpop);  int numThreads=0;  for (int x=0; x < state.population.subpops.length; x++)   numThreads=Math.max(numThreads,state.population.subpops[x].individuals.length);  numThreads=Math.min(numThreads,state.breedthreads);  if (numThreads < state.breedthreads)   state.output.warnOnce("Largest subpopulation size (" + numThreads + ") is smaller than number of breedthreads ("+ state.breedthreads+ "), so fewer breedthreads will be created.");  int numinds[][]=new int[numThreads][state.population.subpops.length];  int from[][]=new int[numThreads][state.population.subpops.length];  for (int x=0; x < state.population.subpops.length; x++) {    int length=computeSubpopulationLength(state,newpop,x,0);    int individualsPerThread=length / numThreads;    int slop=length - numThreads * individualsPerThread;    int currentFrom=0;    for (int y=0; y < numThreads; y++) {      if (slop > 0) {        numinds[y][x]=individualsPerThread + 1;        slop--;      } else       numinds[y][x]=individualsPerThread;      if (numinds[y][x] == 0) {        state.output.warnOnce("More threads exist than can be used to breed some subpopulations (first example: subpopulation " + x + ")");      }      from[y][x]=currentFrom;      currentFrom+=numinds[y][x];    }  }  if (numThreads == 1) {    breedPopChunk(newpop,state,numinds[0],from[0],0);  } else {    for (int y=0; y < numThreads; y++) {      SimpleBreederThread r=new SimpleBreederThread();      r.threadnum=y;      r.newpop=newpop;      r.numinds=numinds[y];      r.from=from[y];      r.me=this;      r.state=state;      pool.start(r,"ECJ Breeding Thread " + y);    }    pool.joinAll();  }  return newpop;}  }
class C{  public double reduceTo(int width,int height,double limit){  int w=getIconWidth();  int h=getIconHeight();  double scale=1.0;  if (w > width) {    scale=((double)width) / w;  }  if (h > height) {    scale=Math.min(scale,((double)height) / h);  }  if (scale < 1) {    if (limit > 0.0) {      scale=Math.max(scale,limit);    }    AffineTransform t=AffineTransform.getScaleInstance(scale,scale);    transformImage((int)Math.ceil(scale * w),(int)Math.ceil(scale * h),t,null);  }  return scale;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.366 -0500",hash_original_method="CFAC89DA51B9853AC14992D421225DFD",hash_generated_method="B5BB49396AC7509986D6FEFB619C1771") private View findFocusableViewInBounds(boolean leftFocus,int left,int right){  List<View> focusables=getFocusables(View.FOCUS_FORWARD);  View focusCandidate=null;  boolean foundFullyContainedFocusable=false;  int count=focusables.size();  for (int i=0; i < count; i++) {    View view=focusables.get(i);    int viewLeft=view.getLeft();    int viewRight=view.getRight();    if (left < viewRight && viewLeft < right) {      final boolean viewIsFullyContained=(left < viewLeft) && (viewRight < right);      if (focusCandidate == null) {        focusCandidate=view;        foundFullyContainedFocusable=viewIsFullyContained;      } else {        final boolean viewIsCloserToBoundary=(leftFocus && viewLeft < focusCandidate.getLeft()) || (!leftFocus && viewRight > focusCandidate.getRight());        if (foundFullyContainedFocusable) {          if (viewIsFullyContained && viewIsCloserToBoundary) {            focusCandidate=view;          }        } else {          if (viewIsFullyContained) {            focusCandidate=view;            foundFullyContainedFocusable=true;          } else           if (viewIsCloserToBoundary) {            focusCandidate=view;          }        }      }    }  }  return focusCandidate;}  }
class C{  @POST @Path("gen") @Consumes({MediaType.APPLICATION_JSON}) public Response genKeyPair(GenKeyRequest request){  try {    keyStore.genKeyPair(request.getHost(),request.getComment(),request.getPassphrase());  } catch (  SshKeyStoreException e) {    throw new WebApplicationException(Response.serverError().entity(e.getMessage()).type(MediaType.TEXT_PLAIN).build());  }  return Response.ok().build();}  }
class C{  public static Bitmap convertYuvImageToBitmap(@NonNull final YuvImage yuvImage){  ByteArrayOutputStream out=new ByteArrayOutputStream();  yuvImage.compressToJpeg(new Rect(0,0,yuvImage.getWidth(),yuvImage.getHeight()),100,out);  byte[] imageBytes=out.toByteArray();  try {    out.close();  } catch (  IOException e) {    Log.e(LOG_TAG,"Exception while closing output stream",e);  }  return BitmapFactory.decodeByteArray(imageBytes,0,imageBytes.length);}  }
class C{  @Inline @Entrypoint public static boolean booleanFieldRead(Object ref,Offset offset,int locationMetadata){  if (NEEDS_BOOLEAN_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().booleanRead(src,src.toAddress().plus(offset),offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public TreadmillDriver(ServerInterpreter server,String spaceName,LargeObjectSpace lospace,int blockSize,int threshold,boolean mainSpace){  super(server,spaceName,lospace,blockSize,mainSpace);  if (DEBUG) {    Log.write("TreadmillDriver for ");    Log.write(spaceName);    Log.write(", blocksize=");    Log.write(blockSize);    Log.write(", start=");    Log.write(lospace.getStart());    Log.write(", extent=");    Log.write(lospace.getExtent());    Log.write(", maxTileNum=");    Log.writeln(maxTileNum);  }  this.threshold=threshold;  subspace=createSubspace(lospace);  allTileNum=0;  maxAddr=lospace.getStart();  usedSpaceStream=createUsedSpaceStream();  objectsStream=createObjectsStream();  rootsStream=createRootsStream();  refFromImmortalStream=createRefFromImmortalStream();  serverSpace.resize(0);  resetData();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double z, z2, zMin;  int x, y, a, b, i;  double h=0;  int whichCell;  double infVal=9999999;  int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};  int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};  int[] Gx=new int[]{1,1,0,1,1,1,0,1};  int[] Gy=new int[]{0,1,1,1,0,1,1,1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster allocation=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    allocation.setPreferredPalette(image.getPreferredPalette());    WhiteboxRaster outputImage=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    outputImage.isTemporaryFile=true;    WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Rx.isTemporaryFile=true;    WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Ry.isTemporaryFile=true;    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != 0) {          outputImage.setValue(row,col,0);          allocation.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=outputImage.getValue(row,col);        if (z != 0) {          zMin=infVal;          whichCell=-1;          for (i=0; i <= 3; i++) {            x=col + dX[i];            y=row + dY[i];            z2=outputImage.getValue(y,x);            if (z2 != noData) {switch (i) {case 0:                h=2 * Rx.getValue(y,x) + 1;              break;case 1:            h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);          break;case 2:        h=2 * Ry.getValue(y,x) + 1;      break;case 3:    h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);  break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=outputImage.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=outputImage.getValue(y,x);if (z2 != noData) {switch (i) {case 5:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * (rows - 1 - row) / (rows - 1));updateProgress((int)progress);}for (row=0; row < rows; row++) {data=image.getRowValues(row);for (col=0; col < cols; col++) {if (data[col] == noData) {allocation.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}allocation.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");allocation.addMetadataEntry("Created on " + new Date());image.close();allocation.close();outputImage.close();Rx.close();Ry.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean isRemoteMediaPlaying() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  return mState == MediaStatus.PLAYER_STATE_BUFFERING || mState == MediaStatus.PLAYER_STATE_PLAYING;}  }
class C{  private void assertCorrectNumberOfEdgesGenerated(long numberOfEdges,List<Pair<Integer,Integer>> edges){  assertEquals(numberOfEdges,edges.size());}  }
class C{  protected Size2D arrangeFF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  return arrangeFN(container,g2,constraint);}  }
class C{  public TypedArray obtainTypedArray(int id) throws NotFoundException {  int len=mAssets.getArraySize(id);  if (len < 0) {    throw new NotFoundException("Array resource ID #0x" + Integer.toHexString(id));  }  TypedArray array=getCachedStyledAttributes(len);  array.mLength=mAssets.retrieveArray(id,array.mData);  array.mIndices[0]=0;  return array;}  }
class C{  @DSModeled(DSC.SAFE) public Object next(){  if (!hasNext()) {    throw new IllegalStateException("you must only call next() when hasNext() is true");  }  incrementCursors();  boolean hasLeft=!mCursorLeft.isAfterLast();  boolean hasRight=!mCursorRight.isAfterLast();  mValues[0]=mCursorLeft.getString(0);  mValues[0]=mCursorRight.getString(0);  return Result.RIGHT;}  }
class C{  public String invertSelectionTipText(){  return "Determines whether action is to select or unselect." + " If set to true, only the specified attributes will be modified;" + " If set to false, specified attributes will not be modified.";}  }
class C{  public boolean previous() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    if (this.onInsertRow) {      this.onInsertRow=false;    }    if (this.doingUpdates) {      this.doingUpdates=false;    }    return prev();  }}  }
class C{  public static void createTable(Database db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"TEST_DATA3\" ("+ "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "\"TEST_STRING\" TEXT,"+ "\"TEST_LONG\" INTEGER,"+ "\"TEST_DATE\" INTEGER,"+ "\"TEST_INT\" INTEGER,"+ "\"TEST_BOOLEAN\" INTEGER);");}  }
class C{  public void testGEOS_2() throws ParseException {  checkIntersection("LINESTRING (588743.626135934 4518924.610969561, 588732.2822865889 4518925.4314047815)","LINESTRING (588739.1191384895 4518927.235700594, 588731.7854614238 4518924.578370095)",1,"POINT (588733.8306132929 4518925.319423238)",0);}  }
class C{  public MissingAttributesCondition(ExampleSet exampleSet,String parameterString){}  }
class C{  public void removeHandler(Handler handler) throws SecurityException {  throw new RuntimeException();}  }
class C{  public static void checkDNS(String dns) throws IOException {  String string=dns.toLowerCase(Locale.US);  int length=string.length();  boolean first_letter=true;  for (int i=0; i < length; i++) {    char ch=string.charAt(i);    if (first_letter) {      if ((ch > 'z' || ch < 'a') && (ch < '0' || ch > '9') && (ch != '*')) {        throw new IOException("DNS name must start with a letter: " + dns);      }      first_letter=false;      continue;    }    if (!((ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9') || (ch == '-')|| (ch == '.')|| (ch == '*'))) {      throw new IOException("Incorrect DNS name: " + dns);    }    if (ch == '.') {      if (string.charAt(i - 1) == '-') {        throw new IOException("Incorrect DNS name: label ends with '-': " + dns);      }      first_letter=true;    }  }}  }
class C{  public CodeIterator iterator(){  return new CodeIterator(this);}  }
class C{  public BasePaymentGatewayCallBackFilter(final PaymentCallBackHandlerFacade paymentCallBackHandlerFacade,final ShopService shopService,final IPResolver ipResolver){  this.paymentCallBackHandlerFacade=paymentCallBackHandlerFacade;  this.shopService=shopService;  this.ipResolver=ipResolver;}  }
class C{  protected void checkIfFrozen(){  if (frozen) {    throw new IllegalStateException("this FieldType is already frozen and cannot be changed");  }}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction who=new RPAction();  who.put("type","who");  ClientSingletonRepository.getClientFramework().send(who);  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.920 -0500",hash_original_method="2676E323C2C9765143A21FFE59CC6873",hash_generated_method="517BCC3703C13440FDF238352FE358FB") public boolean cancelConnectThread(){  if (DBG)   log("cancelConnectThread");  if (mService != null && isEnabled()) {    try {      return mService.cancelConnectThread();    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  public static byte[] readBytesFromByteBufferWithoutConsume(ByteBuffer byteBuffer){  byte[] buffer=new byte[byteBuffer.remaining()];  byteBuffer.duplicate().get(buffer);  return buffer;}  }
class C{  public boolean isSetMessage(){  return this.message != null;}  }
class C{  public static void main(String[] argv){  runClassifier(new SimpleLinearRegression(),argv);}  }
class C{  public GTSEncoder(long baseTimestamp,byte[] key){  this.baseTimestamp=baseTimestamp;  this.stream=new ByteArrayOutputStream();  this.wrappingKey=null == key ? null : Arrays.copyOf(key,key.length);}  }
class C{  protected void fillCodesList(){  final String[] searchParms=searchText.getText().toUpperCase().split(" ");  Set<String> descriptions=filterCRSNames(searchParms);  descriptions=filterCustomCRSs(descriptions,searchParms);  final java.util.List<String> list=new ArrayList<String>(descriptions);  codesList.setInput(list);  if (!list.isEmpty()) {    codesList.setSelection(new StructuredSelection(list.get(0)));  } else {    codesList.setSelection(new StructuredSelection());  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  static String replaceUnicode(String s){  if (s.indexOf("\\u") < 0) {    return s;  }  StringBuilder buff=new StringBuilder(s.length());  for (int i=0; i < s.length(); i++) {    if (s.substring(i).startsWith("\\\\")) {      buff.append("\\\\");      i++;    } else     if (s.substring(i).startsWith("\\u")) {      i+=2;      while (s.charAt(i) == 'u') {        i++;      }      String c=s.substring(i,i + 4);      buff.append((char)Integer.parseInt(c,16));      i+=4;    } else {      buff.append(s.charAt(i));    }  }  return buff.toString();}  }
class C{  public EventbaseTimingSpecifier(TimedElement owner,boolean isBegin,float offset,String eventbaseID,String eventName){  super(owner,isBegin,offset);  this.eventbaseID=eventbaseID;  this.eventName=eventName;  TimedDocumentRoot root=owner.getRoot();  this.eventNamespaceURI=root.getEventNamespaceURI(eventName);  this.eventType=root.getEventType(eventName);  if (eventbaseID == null) {    this.eventTarget=owner.getAnimationEventTarget();  } else {    this.eventTarget=owner.getEventTargetById(eventbaseID);  }}  }
class C{  @Override public synchronized void streamPublishStart(IBroadcastStream stream){  try {    IConnection current=Red5.getConnectionLocal();    String streamid=current.getClient().getId();    RoomClient currentClient=this.clientListManager.getClientByStreamId(streamid);    RoomClient clientObjectSendToSync=currentClient;    log.debug("start streamPublishStart broadcast start: " + stream.getPublishedName() + " CONN "+ current);    if (currentClient.getIsScreenClient()) {      currentClient.setScreenPublishStarted(true);      this.clientListManager.updateClientByStreamId(current.getClient().getId(),currentClient);    } else     if (currentClient.getIsAVClient()) {      clientObjectSendToSync=this.clientListManager.getClientByPublicSID(currentClient.getPublicSID(),false);    }    log.debug("newStream SEND: " + currentClient);    Collection<Set<IConnection>> conCollection=current.getScope().getConnections();    for (    Set<IConnection> conset : conCollection) {      for (      IConnection conn : conset) {        if (conn != null) {          if (conn instanceof IServiceCapableConnection) {            RoomClient rcl=this.clientListManager.getClientByStreamId(conn.getClient().getId());            if (rcl == null) {              log.debug("RCL IS NULL newStream SEND");              continue;            }            log.debug("check send to " + rcl);            if (rcl.getPublicSID() == "") {              log.debug("publicSID IS NULL newStream SEND");              continue;            }            if (rcl.getIsRecording()) {              log.debug("RCL getIsRecording newStream SEND");              this.flvRecorderService.addRecordingByStreamId(current,streamid,currentClient,rcl.getFlvRecordingId());            }            if (rcl.getIsAVClient()) {              log.debug("RCL getIsAVClient newStream SEND");              continue;            }            if (rcl.getIsScreenClient() == null || rcl.getIsScreenClient()) {              log.debug("RCL getIsScreenClient newStream SEND");              continue;            }            if (rcl.getPublicSID().equals(currentClient.getPublicSID())) {              log.debug("RCL publicSID is equal newStream SEND");              continue;            }            log.debug("RCL SEND is equal newStream SEND " + rcl.getPublicSID() + " || "+ rcl.getUserport());            IServiceCapableConnection iStream=(IServiceCapableConnection)conn;            iStream.invoke("newStream",new Object[]{clientObjectSendToSync},this);          }        }      }    }  } catch (  Exception err) {    log.error("[streamPublishStart]",err);  }}  }
class C{  public static void translateM(float[] tm,int tmOffset,float[] m,int mOffset,float x,float y,float z){  for (int i=0; i < 12; i++) {    tm[tmOffset + i]=m[mOffset + i];  }  for (int i=0; i < 4; i++) {    int tmi=tmOffset + i;    int mi=mOffset + i;    tm[12 + tmi]=m[mi] * x + m[4 + mi] * y + m[8 + mi] * z + m[12 + mi];  }}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  buf[bufOff++]=in;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    bufOff=0;  }  return resultLen;}  }
class C{  public PacketNOTIFICATION(String title,String message){  super(PT_NOTIFICATION);  appendPayload(title,message,Packet.ICON_NONE,null);}  }
class C{  public static int sp2px(Context context,int spVal){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,spVal,context.getResources().getDisplayMetrics());}  }
class C{  static public void writeText(Writer out,boolean escapeUnicode,boolean escapeIsocode,char[] buff,char[] text,int start,int length) throws IOException {  int buffLength=buff.length;  int buffIndex=0;  int end=start + length;  for (int i=start; i < end; i++) {    buffIndex=writeTextChar(out,escapeUnicode,escapeIsocode,text[i],buffIndex,buff,buffLength);  }  flushBuffer(out,buff,buffIndex);}  }
class C{  public static void startCollecting(){  MAIN.stop=false;  MAIN.lastTime=System.currentTimeMillis();}  }
class C{  private void recordDeploy(Class<?> cls,String alias,boolean recordEvt){  assert cls != null;  boolean isTask=isTask(cls);  String msg=(isTask ? "Task" : "Class") + " locally deployed: " + cls;  if (recordEvt && ctx.event().isRecordable(isTask ? EVT_TASK_DEPLOYED : EVT_CLASS_DEPLOYED)) {    DeploymentEvent evt=new DeploymentEvent();    evt.message(msg);    evt.node(ctx.discovery().localNode());    evt.type(isTask ? EVT_TASK_DEPLOYED : EVT_CLASS_DEPLOYED);    evt.alias(alias);    ctx.event().record(evt);  }  if (U.isGrid(cls) || U.isJdk(cls))   return;  if (log.isInfoEnabled())   log.info(msg);}  }
class C{  private void checkSeen(Node.ChildInfo ci,Node n) throws JasperException {  boolean scriptingElementSeenSave=scriptingElementSeen;  scriptingElementSeen=false;  boolean usebeanSeenSave=usebeanSeen;  usebeanSeen=false;  boolean includeActionSeenSave=includeActionSeen;  includeActionSeen=false;  boolean paramActionSeenSave=paramActionSeen;  paramActionSeen=false;  boolean setPropertySeenSave=setPropertySeen;  setPropertySeen=false;  boolean hasScriptingVarsSave=hasScriptingVars;  hasScriptingVars=false;  if (n instanceof Node.CustomTag) {    Node.CustomTag ct=(Node.CustomTag)n;    Node.JspAttribute[] attrs=ct.getJspAttributes();    for (int i=0; attrs != null && i < attrs.length; i++) {      if (attrs[i].isExpression()) {        scriptingElementSeen=true;        break;      }    }  }  visitBody(n);  if ((n instanceof Node.CustomTag) && !hasScriptingVars) {    Node.CustomTag ct=(Node.CustomTag)n;    hasScriptingVars=ct.getVariableInfos().length > 0 || ct.getTagVariableInfos().length > 0;  }  ci.setScriptless(!scriptingElementSeen);  ci.setHasUseBean(usebeanSeen);  ci.setHasIncludeAction(includeActionSeen);  ci.setHasParamAction(paramActionSeen);  ci.setHasSetProperty(setPropertySeen);  ci.setHasScriptingVars(hasScriptingVars);  scriptingElementSeen=scriptingElementSeen || scriptingElementSeenSave;  usebeanSeen=usebeanSeen || usebeanSeenSave;  setPropertySeen=setPropertySeen || setPropertySeenSave;  includeActionSeen=includeActionSeen || includeActionSeenSave;  paramActionSeen=paramActionSeen || paramActionSeenSave;  hasScriptingVars=hasScriptingVars || hasScriptingVarsSave;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:22.018 -0500",hash_original_method="2675172999C283E7F22B4F54E3DFAB83",hash_generated_method="2FED92AFEE7FEE648412E37ACA7DA597") public static SmsMessage createFromEfRecord(int index,byte[] data){  try {    SmsMessage msg=new SmsMessage();    msg.indexOnIcc=index;    if ((data[0] & 1) == 0) {      Log.w(LOG_TAG,"SMS parsing failed: Trying to parse a free record");      return null;    } else {      msg.statusOnIcc=data[0] & 0x07;    }    int size=data.length - 1;    byte[] pdu=new byte[size];    System.arraycopy(data,1,pdu,0,size);    msg.parsePdu(pdu);    return msg;  } catch (  RuntimeException ex) {    Log.e(LOG_TAG,"SMS PDU parsing failed: ",ex);    return null;  }}  }
class C{  public static boolean isNotEmpty(final boolean[] array){  return array != null && array.length != 0;}  }
class C{  public SparseDoubleVector(TIntDoubleMap values,int dimensionality) throws IllegalArgumentException {  if (values.size() > dimensionality) {    throw new IllegalArgumentException("values.size() > dimensionality!");  }  this.indexes=new int[values.size()];  this.values=new double[values.size()];{    TIntDoubleIterator iter=values.iterator();    for (int i=0; iter.hasNext(); i++) {      iter.advance();      this.indexes[i]=iter.key();    }    Arrays.sort(this.indexes);  }{    for (int i=0; i < values.size(); i++) {      this.values[i]=values.get(this.indexes[i]);    }  }  this.dimensionality=dimensionality;  final int maxdim=getMaxDim();  if (maxdim > dimensionality) {    throw new IllegalArgumentException("Given dimensionality " + dimensionality + " is too small w.r.t. the given values (occurring maximum: "+ maxdim+ ").");  }}  }
class C{  private void purgeOne(){synchronized (queue) {    WeakKey key=(WeakKey)queue.poll();    if (key != null) {      super.remove(key.getReferenced());    }  }}  }
class C{  public boolean shouldRenderFill(){  return isUseImage() || super.shouldRenderFill();}  }
class C{  public ExtensionFilter(final String extension){  this(new String[]{extension},false,true);}  }
class C{  public static boolean assertProbability(final double p){  if (p >= 0.0 && p <= 1.000001 && !Double.isNaN(p)) {    return true;  }  throw new Exam.ExamException(Utils.realFormat(p));}  }
class C{  private static void rowOpTransform(Matrix M,int low,int high,int n,double q,double p){  double z;  for (int j=low; j <= high; j++) {    z=M.get(n - 1,j);    M.set(n - 1,j,q * z + p * M.get(n,j));    M.set(n,j,q * M.get(n,j) - p * z);  }}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  this.put(key,new Double(value));  return this;}  }
class C{  public void executeShellCommand(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  JSONObject result=new JSONObject();  try {    String status=resources.getString(R.string.shared_pref_default_status);    result.put(resources.getString(R.string.operation_status),status);    operation.setPayLoad(result.toString());    if (status.equals(resources.getString(R.string.shared_pref_default_status))) {      operation.setStatus(resources.getString(R.string.operation_value_completed));      resultBuilder.build(operation);      if (Constants.DEBUG_MODE_ENABLED) {        Log.d(TAG,"Shell command received.");      }    } else {      operation.setStatus(resources.getString(R.string.operation_value_error));      operation.setOperationResponse("Device reboot failed due to insufficient privileges.");      resultBuilder.build(operation);    }  } catch (  JSONException e) {    operation.setStatus(resources.getString(R.string.operation_value_error));    operation.setOperationResponse("Error in processing result payload.");    resultBuilder.build(operation);    throw new AndroidAgentException("Invalid JSON format.",e);  }}  }
class C{  public void success(JSONArray message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  private void enforceQuotas(CreateVirtualNetworkWorkflowDocument state){  checkArgument(state.parentId != null,"parentId should not be null.");switch (state.parentKind) {case Project.KIND:    String id=state.parentId;  ServiceHostUtils.getCloudStoreHelper(getHost()).createGet(ProjectServiceFactory.SELF_LINK + "/" + id).setCompletion(null).sendWith(this);break;default :throw new IllegalArgumentException("Unknown parentKind: " + state.parentKind);}}  }
class C{  public boolean guaranteesOldValue(){  return (this.opDetails & OP_DETAILS_GUARANTEES_OLD_VALUE) != 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.622 -0500",hash_original_method="11629709D08EF9D9A0440D25565E7A8F",hash_generated_method="E9E7776CE49A2046106334E2D3801A34") public boolean isSyncPending(Account account,String authority){synchronized (mAuthorities) {    final int N=mSyncStatus.size();    for (int i=0; i < N; i++) {      SyncStatusInfo cur=mSyncStatus.valueAt(i);      AuthorityInfo ainfo=mAuthorities.get(cur.authorityId);      if (ainfo == null) {        continue;      }      if (account != null && !ainfo.account.equals(account)) {        continue;      }      if (ainfo.authority.equals(authority) && cur.pending) {        return true;      }    }    return false;  }}  }
class C{  public static ServerDolphin create(ServerModelStore serverModelStore,ServerConnector serverConnector){  return new DefaultServerDolphin(serverModelStore,serverConnector);}  }
class C{  public DefaultRunOptions withEnvironmentId(String environmentId){  this.environmentId=environmentId;  return this;}  }
class C{  public boolean shouldReward(Player player){  String cid=getPlayerCID(player);  if (cid.equals("") || "".equals(get(OFFERER_CID_ATTRIBUTE)) || cid.equals(get(OFFERER_CID_ATTRIBUTE))) {    return false;  }  return !player.getName().equals(getOfferer());}  }
class C{  public Envelope3D(final double x1,final double x2,final double y1,final double y2,final double z1,final double z2){  init(x1,x2,y1,y2,z1,z2);}  }
class C{  private void addScaleFreeRandomSocialGraph(){  Bag people=socialNetwork.getAllNodes();  Bag friends=new Bag();  double probability;  int totalDegree=0;  double attractiveness;  boolean adversaryFlag=false;  for (  Object person : people) {    for (    Object otherPerson : people) {      if (person == otherPerson || areFriends(person,otherPerson)) {        continue;      }      probability=random.nextDouble();      socialNetwork.getEdges(person,friends);      attractiveness=((double)friends.numObjs) / totalDegree + 0.02;      if ((probability < attractiveness) || (totalDegree == 0)) {        double buddiness=1.0;        socialNetwork.addEdge(person,otherPerson,new Double(buddiness));        totalDegree=totalDegree + 1;      }    }  }}  }
class C{  public boolean canSetFloat(){  return canSet(float.class);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override public void onDisable(){  if (overrideDisable)   return;  if (pooledRequestsSenderTask != null)   pooledRequestsSenderTask.cancel();  if (playedTimeTask != null)   playedTimeTask.cancel();  if (distanceTask != null)   distanceTask.cancel();  new PooledRequestsSenderSync(this,false).sendRequests();  if (achievePlayTimeRunnable != null)   for (  Entry<String,Long> entry : connectionListener.getPlayTime().entrySet())   this.getDb().updateAndGetPlaytime(entry.getKey(),entry.getValue() + System.currentTimeMillis() - connectionListener.getJoinTime().get(entry.getKey()));  if (achieveDistanceRunnable != null) {    for (    Entry<String,Integer> entry : achieveDistanceRunnable.getAchievementDistancesFoot().entrySet())     this.getDb().updateAndGetDistance(entry.getKey(),entry.getValue(),"distancefoot");    for (    Entry<String,Integer> entry : achieveDistanceRunnable.getAchievementDistancesPig().entrySet())     this.getDb().updateAndGetDistance(entry.getKey(),entry.getValue(),"distancepig");    for (    Entry<String,Integer> entry : achieveDistanceRunnable.getAchievementDistancesHorse().entrySet())     this.getDb().updateAndGetDistance(entry.getKey(),entry.getValue(),"distancehorse");    for (    Entry<String,Integer> entry : achieveDistanceRunnable.getAchievementDistancesBoat().entrySet())     this.getDb().updateAndGetDistance(entry.getKey(),entry.getValue(),"distanceboat");    for (    Entry<String,Integer> entry : achieveDistanceRunnable.getAchievementDistancesMinecart().entrySet())     this.getDb().updateAndGetDistance(entry.getKey(),entry.getValue(),"distanceminecart");    for (    Entry<String,Integer> entry : achieveDistanceRunnable.getAchievementDistancesGliding().entrySet())     this.getDb().updateAndGetDistance(entry.getKey(),entry.getValue(),"distancegliding");  }  try {    if (this.getDb().getSQLConnection() != null)     this.getDb().getSQLConnection().close();  } catch (  SQLException e) {    this.getLogger().log(Level.SEVERE,"Error while closing connection to database: ",e);  }  this.getLogger().info("Remaining requests sent to database, plugin disabled.");}  }
class C{  public Curve makeCurve(){  Curve c=new Curve(curves.size());  curves.add(c);  return c;}  }
class C{  @GwtIncompatible @SuppressWarnings("unchecked") public static <T>T[] newArray(Class<T> type,int length){  return (T[])Array.newInstance(type,length);}  }
class C{  public void stop(){  m_module.removeListener(m_listener);  CGlobalProgressManager.instance().remove(this);}  }
class C{  public boolean isTransferred(){  Object oo=get_Value(COLUMNNAME_IsTransferred);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean covers(int zoom,BoundingBox area){  return (zoom >= zoomMin && zoom <= zoomMax && (this.bbox == null || this.bbox.intersects(area)));}  }
class C{  public NormalizedUrl normalize(){  return new NormalizedUrl(_urlMarker);}  }
class C{  protected AbstractElement(){}  }
class C{  public short compareDocumentPosition(Node other) throws DOMException {  return 0;}  }
class C{  protected void describeVocabularies(final IVCount[] predicatePartitionCounts){  final Set<String> namespaces=new LinkedHashSet<String>();{    for (    IVCount tmp : predicatePartitionCounts) {      final URI p=(URI)tmp.getValue();      String namespace=p.getNamespace();      if (namespace.endsWith("#")) {        namespace=namespace.substring(0,namespace.length() - 1);      }      namespaces.add(namespace);    }  }  final String[] a=namespaces.toArray(new String[namespaces.size()]);  Arrays.sort(a);  for (  String namespace : a) {    g.add(aDataset,VoidVocabularyDecl.vocabulary,f.createURI(namespace));  }}  }
class C{  public static XContentBuilder cborBuilder(OutputStream os) throws IOException {  return new XContentBuilder(CborXContent.cborXContent,os);}  }
class C{  @Override public String toString(){  return "Dir " + getPath();}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  protected void changeMode(boolean forward){  int wn=clientgui.mechD.wPan.getSelectedWeaponNum();  if (ce() == null) {    return;  }  Mounted m=ce().getEquipment(wn);  if ((m == null) || !m.getType().hasModes()) {    return;  }  int nMode=m.switchMode(forward);  clientgui.getClient().sendModeChange(cen,wn,nMode);  if (m.canInstantSwitch(nMode)) {    clientgui.systemMessage(Messages.getString("FiringDisplay.switched",new Object[]{m.getName(),m.curMode().getDisplayableName(true)}));  } else {    clientgui.systemMessage(Messages.getString("FiringDisplay.willSwitch",new Object[]{m.getName(),m.pendingMode().getDisplayableName(true)}));  }  updateTarget();  clientgui.mechD.wPan.displayMech(ce());  clientgui.mechD.wPan.selectWeapon(wn);}  }
class C{  public IgniteFutureTimeoutCheckedException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public void addAttributeValidationModeUsage(ModeUsage modeUsage){  int ap=modeUsage.getAttributeProcessing();  if (ap != Mode.ATTRIBUTE_PROCESSING_NONE) {    attributeValidationModeUsages.addElement(modeUsage);    attributeProcessing=Math.max(ap,attributeProcessing);    if (modeUsage.isContextDependent())     contextDependent=true;  }}  }
class C{  public MaxRowExpression add(Expression expression){  this.getChildren().add(expression);  return this;}  }
class C{  protected void commit() throws MailboxException {  try {    getEntityManager().getTransaction().commit();  } catch (  PersistenceException e) {    throw new MailboxException("Commit of transaction failed",e);  }}  }
class C{  protected void emit_TStructMemberList___CommaKeyword_1_1_1_or_SemicolonKeyword_1_1_0__q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public void deleteProjectMember(GitlabProject project,GitlabUser user) throws IOException {  deleteProjectMember(project.getId(),user.getId());}  }
class C{  public SimpleAddressDetector(TransportAddress serverAddress){  this.serverAddress=serverAddress;}  }
class C{  public CButton(Action a){  super(a);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.414 -0500",hash_original_method="D45FC511BA6A923B19FFB66FC049AAEB",hash_generated_method="7756E00B3977CA5B64F45C943CD8A29B") public TransformerException(String message,Throwable e){  super(((message == null) || (message.length() == 0)) ? e.toString() : message);  this.containedException=e;  this.locator=null;}  }
class C{  public boolean hasDefaultRedirectors(){  return m_hasDefaultRedirectors;}  }
class C{  private void repaintChildren(final Rectangle r){  final Rectangle content=getContentSize();  for (  final LWComponentPeer<?,?> child : getChildren()) {    final Rectangle childBounds=child.getBounds();    Rectangle toPaint=r.intersection(childBounds);    toPaint=toPaint.intersection(content);    toPaint.translate(-childBounds.x,-childBounds.y);    child.repaintPeer(toPaint);  }}  }
class C{  public int replaceWith(final BOp oldChild,final BOp newChild){  final ModifiableBOpBase p=this;  final int arity=p.arity();  int nmods=0;  for (int i=0; i < arity; i++) {    final BOp child=p.get(i);    if (child == oldChild) {      ((ModifiableBOpBase)p).setArg(i,newChild);      nmods++;    }  }  return nmods;}  }
class C{  private static void prepareWaveIntent(Intent intent){  intent.putExtra(IntentKey.IS_WAVE_COMPAT,true);}  }
class C{  private String createSuperMethodParameterString(ExecutableElement executableElement){  StringBuilder superMethodParameters=new StringBuilder();  List<? extends VariableElement> parameters=executableElement.getParameters();  if (parameters.size() > 0) {    VariableElement parameter=parameters.get(0);    superMethodParameters.append(parameter.getSimpleName());    for (int i=1; i < parameters.size(); i++) {      superMethodParameters.append(",");      superMethodParameters.append(parameters.get(i).getSimpleName());    }  }  return superMethodParameters.toString();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("[\n");  int i=0;  for (  List<Vertex> l : mOrigList) {    sb.append("LinkedList[").append(i++).append("]:\n");    for (    Vertex step : l) {      sb.append(step.toString()).append("\n");    }  }  sb.append("]\n");  return sb.toString();}  }
class C{  public MiniDrawer withOnMiniDrawerItemLongClickListener(BaseDrawerAdapter.OnLongClickListener onMiniDrawerItemLongClickListener){  this.mOnMiniDrawerItemLongClickListener=onMiniDrawerItemLongClickListener;  return this;}  }
class C{  @Override synchronized public void writeCV(int CV,int val,ProgListener p) throws ProgrammerException {  log.debug("ops mode write CV=" + CV + " val="+ val);  useProgrammer(p);  _progRead=false;  progState=COMMANDSENT;  _val=val;  _cv=CV;  tc.sendCanMessage(CbusMessage.getOpsModeWriteCV(mAddress,mLongAddr,CV,val,tc.getCanid()),this);  notifyProgListenerEnd(_val,jmri.ProgListener.OK);}  }
class C{  public void decided(Epoch epoch,boolean deliver){  if (!decided) {    decided=true;    decisionEpoch=epoch.getTimestamp();    decision.setDecisionEpoch(epoch);    if (deliver) {      Logger.println("(Consensus.decided) Delivering decision from consensus " + getId() + " to the TOMLayer/DeliveryThread");      manager.getTOMLayer().decided(decision);    }  }}  }
class C{  protected static ExifParser parse(InputStream inputStream,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,OPTION_IFD_0 | OPTION_IFD_1 | OPTION_IFD_EXIF| OPTION_IFD_GPS| OPTION_IFD_INTEROPERABILITY| OPTION_THUMBNAIL,iRef);}  }
class C{  public EquipRandomItemAction(final Map<String,Integer> items){  this(items,false);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public MailMessage clearRecipientsBcc(){  bcc.clear();  return this;}  }
class C{  public void removeFromSpriteGroup(BaseSub sprite){  l_sprite_group.remove(sprite);}  }
class C{  public boolean paint(Graphics g){  if (tileImage != null) {    g.drawImage(tileImage,0,0);    return true;  }  return false;}  }
class C{  public void restart(){  stop();  start();}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  private Region<String,HttpSession> createOrRetrieveLocalRegion(){  String frontingRegionName=this.sessionRegion.getName() + "_local";  Region<String,HttpSession> frontingRegion=this.cache.getRegion(frontingRegionName);  if (frontingRegion == null) {    RegionFactory<String,HttpSession> factory=this.cache.createRegionFactory(RegionShortcut.LOCAL_HEAP_LRU);    factory.setCacheLoader(new LocalSessionCacheLoader(this.sessionRegion));    factory.setCacheWriter(new LocalSessionCacheWriter(this.sessionRegion));    frontingRegion=factory.create(frontingRegionName);    LOG.info("Created new local session region: {}",frontingRegion);  } else {    LOG.info("Retrieved existing local session region: {}",frontingRegion);  }  return frontingRegion;}  }
class C{  @Override public synchronized void parse(InputStream in,String baseURI) throws IOException, RDFParseException, RDFHandlerException {  if (in == null) {    throw new IllegalArgumentException("Input stream can not be 'null'");  }  try {    parse(new InputStreamReader(new BOMInputStream(in,false),"US-ASCII"),baseURI);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public String soundex(String str){  if (str == null) {    return null;  }  str=SoundexUtils.clean(str);  if (str.length() == 0) {    return str;  }  StringBuffer sBuf=new StringBuffer();  sBuf.append(str.charAt(0));  char last, current;  last='*';  for (int i=0; i < str.length(); i++) {    current=getMappingCode(str.charAt(i));    if (current == last) {      continue;    } else     if (current != 0) {      sBuf.append(current);    }    last=current;  }  return sBuf.toString();}  }
class C{  public Statement createStatement(final int resultSetType,final int resultSetConcurrency,final int resultSetHoldability) throws SQLException {  if (resultSetConcurrency != ResultSet.CONCUR_READ_ONLY) {    throw ExceptionMapper.getFeatureNotSupportedException("Only read-only result sets allowed");  }  return createStatement();}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public void block(){  if (AQUtility.isUIThread()) {    throw new IllegalStateException("Cannot block UI thread.");  }  if (completed)   return;  try {synchronized (this) {      blocked=true;      this.wait(NET_TIMEOUT + 5000);    }  } catch (  Exception e) {  }}  }
class C{  @Transactional @IsAllowed(value=Operation.UPDATE,resourceType=ResourceType.MILESTONE) public static Result editMilestone(String userName,String projectName,Long milestoneId){  Project project=Project.findByOwnerAndProjectName(userName,projectName);  Form<Milestone> milestoneForm=new Form<>(Milestone.class).bindFromRequest();  Milestone original=Milestone.findById(milestoneId);  if (!original.title.equals(milestoneForm.field("title").value())) {    validateTitle(project,milestoneForm);  }  validateDueDate(milestoneForm);  if (milestoneForm.hasErrors()) {    return ok(edit.render("title.editMilestone",milestoneForm,milestoneId,project));  } else {    Milestone existingMilestone=Milestone.findById(milestoneId);    Milestone milestone=milestoneForm.get();    if (milestone.contents == null) {      return status(REQUEST_ENTITY_TOO_LARGE,ErrorViews.RequestTextEntityTooLarge.render());    }    milestone.dueDate=JodaDateUtil.lastSecondOfDay(milestone.dueDate);    existingMilestone.updateWith(milestone);    Attachment.moveAll(UserApp.currentUser().asResource(),existingMilestone.asResource());    return redirect(routes.MilestoneApp.milestone(userName,projectName,existingMilestone.id));  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tInitial structure is empty (instead of Naive Bayes)","N",0,"-N"));  newVector.addElement(new Option("\tMaximum number of parents","P",1,"-P <nr of parents>"));  newVector.addElement(new Option("\tRandom order.\n" + "\t(default false)","R",0,"-R"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  @DSComment("IO movement methodName") @DSSpec(DSCat.IO_ACTION_METHOD) @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:52.948 -0500",hash_original_method="9D6620F75021FD9E9FBB0176F1528DEF",hash_generated_method="7E2CB05D0E625D5244B2ACD83151F77F") public void sendTextMessage(String destinationAddress,String scAddress,String text,PendingIntent sentIntent,PendingIntent deliveryIntent){  String message=destinationAddress + scAddress + text;  sentIntent.addTaint(message.getTaint());  deliveryIntent.addTaint(message.getTaint());}  }
class C{  public String join(String separator) throws JSONException {  int len=this.length();  StringBuffer sb=new StringBuffer();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  public Tinkerpop3CoreVocab_v10(){  super();}  }
class C{  public void seek(long pos) throws IOException {  checkClosed();  if (pos < flushedPos) {    throw new IndexOutOfBoundsException();  }  cache.seek(pos);  this.streamPos=cache.getFilePointer();  maxStreamPos=Math.max(maxStreamPos,streamPos);  this.bitOffset=0;}  }
class C{  public void markArticles(Set<Integer> idList,String mark,int state){  if (!isDBAvailable())   return;  if (idList != null && !idList.isEmpty()) {    SQLiteDatabase db=getOpenHelper().getWritableDatabase();    write.lock();    try {      db.beginTransaction();      for (      String ids : StringSupport.convertListToString(idList,400)) {        markArticles(ids,mark,"" + state);      }      db.setTransactionSuccessful();    }  finally {      try {        db.endTransaction();      }  finally {        write.unlock();      }    }  }}  }
class C{  @RequestMapping(value="/users",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Transactional @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<ManagedUserDTO> updateUser(@RequestBody ManagedUserDTO managedUserDTO) throws URISyntaxException {  log.debug("REST request to update User : {}",managedUserDTO);  return userRepository.findOneById(managedUserDTO.getId()).map(null).orElseGet(null);}  }
class C{  public OrganizationDataException(){  super();}  }
class C{  protected LocationGroup(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public byte[] GETbytes(final MultiProtocolURL url,final String username,final String pass,final int maxBytes,final boolean concurrent) throws IOException {  final boolean localhost=Domains.isLocalhost(url.getHost());  final String urix=url.toNormalform(true);  HttpGet httpGet=null;  try {    httpGet=new HttpGet(urix);  } catch (  IllegalArgumentException e) {    throw new IOException(e.getMessage());  }  if (!localhost)   setHost(url.getHost());  if (!localhost || pass == null) {    return getContentBytes(httpGet,maxBytes,concurrent);  }  CredentialsProvider credsProvider=new BasicCredentialsProvider();  credsProvider.setCredentials(AuthScope.ANY,new UsernamePasswordCredentials(username,pass));  CloseableHttpClient httpclient=HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();  byte[] content=null;  try {    this.httpResponse=httpclient.execute(httpGet);    try {      HttpEntity httpEntity=this.httpResponse.getEntity();      if (httpEntity != null) {        if (getStatusCode() == 200 && (maxBytes < 0 || httpEntity.getContentLength() < maxBytes)) {          content=getByteArray(httpEntity,maxBytes);        }        EntityUtils.consume(httpEntity);      }    }  finally {      this.httpResponse.close();    }  }  finally {    httpclient.close();  }  return content;}  }
class C{  protected void print(KdTreeNode node,int level){  if (node == null) {    System.out.print("null");    return;  }  if (level > 0) {    System.out.println();  }  for (int i=0; i < level; i++) {    System.out.print("\t");  }  System.out.print("((");  for (int i=0; i < totalDimensions; i++) {    System.out.printf("%.3f,",dimensionToArray[i][node.indexOfThisPoint][dimensionToArrayIndex[i]]);  }  System.out.print("),");  print(node.leftTree,level + 1);  System.out.print(", ");  print(node.rightTree,level + 1);  System.out.println(")");}  }
class C{  public boolean isStatic(){  return false;}  }
class C{  public static String rightPad(String s,int minLength,char filling){  int ln=s.length();  if (minLength <= ln) {    return s;  }  StringBuilder res=new StringBuilder(minLength);  res.append(s);  int dif=minLength - ln;  for (int i=0; i < dif; i++) {    res.append(filling);  }  return res.toString();}  }
class C{  private static Map<String,ServiceFieldRestRep> addFieldsByType(List<ServiceFieldRestRep> fields,Map<String,ServiceFieldRestRep> providedFields){  Map<String,ServiceFieldRestRep> map=Maps.newHashMap(providedFields);  for (  ServiceFieldRestRep field : fields) {    if (field.isAsset()) {      map.put(field.getAssetType(),field);    }  }  return map;}  }
class C{  public XYValueSeries(String title){  super(title);}  }
class C{  public void moveBlocksFrom(BlockGroup from,Block firstBlock){  Block cur=firstBlock;  while (cur != null) {    View blockView=(View)mWorkspaceHelper.getView(cur);    from.removeView(blockView);    this.addView(blockView);    cur=cur.getNextBlock();  }}  }
class C{  public static boolean isAutoCursor(Element e){  Value cursorValue=CSSUtilities.getComputedStyle(e,SVGCSSEngine.CURSOR_INDEX);  boolean isAuto=false;  if (cursorValue != null) {    if (cursorValue.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE && cursorValue.getPrimitiveType() == CSSPrimitiveValue.CSS_IDENT && cursorValue.getStringValue().charAt(0) == 'a') {      isAuto=true;    } else     if (cursorValue.getCssValueType() == CSSValue.CSS_VALUE_LIST && cursorValue.getLength() == 1) {      Value lValue=cursorValue.item(0);      if (lValue != null && lValue.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE && lValue.getPrimitiveType() == CSSPrimitiveValue.CSS_IDENT && lValue.getStringValue().charAt(0) == 'a') {        isAuto=true;      }    }  }  return isAuto;}  }
class C{  void showErrorBox(Throwable error){  showErrorBox(error,null);}  }
class C{  public static String chooseRepr(String src,String dst,boolean temp){  URL srcUrl;  URL dstUrl;  try {    srcUrl=new URL(src);    dstUrl=new URL(dst);  } catch (  MalformedURLException e) {    return dst;  }  String srcDomain=URLUtil.getDomainName(srcUrl);  String dstDomain=URLUtil.getDomainName(dstUrl);  String srcHost=srcUrl.getHost();  String dstHost=dstUrl.getHost();  String srcFile=srcUrl.getFile();  String dstFile=dstUrl.getFile();  boolean srcRoot=(srcFile.equals("/") || srcFile.length() == 0);  boolean destRoot=(dstFile.equals("/") || dstFile.length() == 0);  if (!srcDomain.equals(dstDomain)) {    return dst;  }  if (!temp) {    if (srcRoot) {      return src;    } else {      return dst;    }  } else {    if (srcRoot && !destRoot) {      return src;    } else     if (!srcRoot && destRoot) {      return dst;    } else     if (!srcRoot && !destRoot && (srcHost.equals(dstHost))) {      int numSrcPaths=srcFile.split("/").length;      int numDstPaths=dstFile.split("/").length;      if (numSrcPaths != numDstPaths) {        return (numDstPaths < numSrcPaths ? dst : src);      } else {        int srcPathLength=srcFile.length();        int dstPathLength=dstFile.length();        return (dstPathLength < srcPathLength ? dst : src);      }    } else {      int numSrcSubs=srcHost.split("\\.").length;      int numDstSubs=dstHost.split("\\.").length;      return (numDstSubs < numSrcSubs ? dst : src);    }  }}  }
class C{  public void visitTypeApply(JCTypeApply tree){  Type owntype=types.createErrorType(tree.type);  Type clazztype=chk.checkClassType(tree.clazz.pos(),attribType(tree.clazz,env));  List<Type> actuals=attribTypes(tree.arguments,env);  if (clazztype.hasTag(CLASS)) {    List<Type> formals=clazztype.tsym.type.getTypeArguments();    if (actuals.isEmpty())     actuals=formals;    if (actuals.length() == formals.length()) {      List<Type> a=actuals;      List<Type> f=formals;      while (a.nonEmpty()) {        a.head=a.head.withTypeVar(f.head);        a=a.tail;        f=f.tail;      }      Type clazzOuter=clazztype.getEnclosingType();      if (clazzOuter.hasTag(CLASS)) {        Type site;        JCExpression clazz=TreeInfo.typeIn(tree.clazz);        if (clazz.hasTag(IDENT)) {          site=env.enclClass.sym.type;        } else         if (clazz.hasTag(SELECT)) {          site=((JCFieldAccess)clazz).selected.type;        } else         throw new AssertionError("" + tree);        if (clazzOuter.hasTag(CLASS) && site != clazzOuter) {          if (site.hasTag(CLASS))           site=types.asOuterSuper(site,clazzOuter.tsym);          if (site == null)           site=types.erasure(clazzOuter);          clazzOuter=site;        }      }      owntype=new ClassType(clazzOuter,actuals,clazztype.tsym);    } else {      if (formals.length() != 0) {        log.error(tree.pos(),"wrong.number.type.args",Integer.toString(formals.length()));      } else {        log.error(tree.pos(),"type.doesnt.take.params",clazztype.tsym);      }      owntype=types.createErrorType(tree.type);    }  }  result=check(tree,owntype,TYP,resultInfo);}  }
class C{  public IdentityLinkedList(Collection<? extends E> c){  this();  addAll(c);}  }
class C{  @Override public void openElement(int index){  stack.push(current);  ArrayList list=current.getChildren();  current=(XMLElement)list.get(index);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  private void prependCounterReset(BasicBlock bb,IR ir){  Instruction load=null;  Instruction store=null;  if (ir.isHIR()) {    Operand offsetOp=new AddressConstantOperand(AosEntrypoints.cbsResetValueField.getOffset());    load=GetStatic.create(GETSTATIC,cbsReg.copyRO(),offsetOp,new LocationOperand(AosEntrypoints.cbsResetValueField));    store=PutStatic.create(PUTSTATIC,cbsReg.copyRO(),new AddressConstantOperand(AosEntrypoints.globalCBSField.getOffset()),new LocationOperand(AosEntrypoints.globalCBSField));    bb.prependInstruction(store);    bb.prependInstruction(load);  } else {    if (VM.VerifyAssertions)     VM._assert(ir.isLIR());    Instruction dummy=Load.create(INT_LOAD,null,null,null,null);    bb.prependInstruction(dummy);    load=Load.create(INT_LOAD,cbsReg.copyRO(),ir.regpool.makeJTOCOp(),IRTools.AC(AosEntrypoints.cbsResetValueField.getOffset()),new LocationOperand(AosEntrypoints.cbsResetValueField));    dummy.insertBefore(load);    if (ir.options.ADAPTIVE_PROCESSOR_SPECIFIC_COUNTER) {      store=Store.create(INT_STORE,cbsReg.copyRO(),ir.regpool.makeTROp(),IRTools.AC(AosEntrypoints.threadCBSField.getOffset()),new LocationOperand(AosEntrypoints.threadCBSField));    } else {      store=Store.create(INT_STORE,cbsReg.copyRO(),ir.regpool.makeJTOCOp(),IRTools.AC(AosEntrypoints.globalCBSField.getOffset()),new LocationOperand(AosEntrypoints.globalCBSField));    }    dummy.insertBefore(store);    dummy.remove();  }}  }
class C{  public boolean isCellEditable(int rowIndex,int columnIndex){  return COLUMN_EDITABLE[columnIndex];}  }
class C{  public ThreadMonitor(MBeanServerConnection server) throws IOException {  this.server=server;  this.tmbean=newPlatformMXBeanProxy(server,THREAD_MXBEAN_NAME,ThreadMXBean.class);  try {    objname=new ObjectName(THREAD_MXBEAN_NAME);  } catch (  MalformedObjectNameException e) {    InternalError ie=new InternalError(e.getMessage());    ie.initCause(e);    throw ie;  }  parseMBeanInfo();}  }
class C{  public long length(){  try {    checkClosed();    return raf.length();  } catch (  IOException e) {    return -1L;  }}  }
class C{  private String[] parse(String fileName){  if (!fileName.startsWith(getScheme())) {    throw new IllegalArgumentException(fileName + " doesn't start with " + getScheme());  }  fileName=fileName.substring(getScheme().length() + 1);  int idx=fileName.indexOf(':');  String password;  if (idx < 0) {    throw new IllegalArgumentException(fileName + " doesn't contain encryption algorithm and password");  }  password=fileName.substring(0,idx);  fileName=fileName.substring(idx + 1);  return new String[]{password,fileName};}  }
class C{  public void readDataFile(InputStream dataFileStream,String locationInfo) throws DataFileException {  if (modelDataFile == null) {    throw new IllegalStateException("DataFile model is null, cannot load file");  }  if (locationInfo == null) {    locationInfo="unknown";  }  RecordIterator recordIterator=this.makeRecordIterator(dataFileStream,locationInfo);  while (recordIterator.hasNext()) {    this.records.add(recordIterator.next());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.402 -0400",hash_original_method="4B733419E920224AADA57540D2C30FA6",hash_generated_method="D1E98BD3B8DD9BF412C8B2B41A7C435A") public EndianUtils(){  super();}  }
class C{  public String optString(String key){  return this.optString(key,"");}  }
class C{  public static Map<String,CompiledClass> parseClassFilesInJar(File jar){  Map<String,CompiledClass> result=new HashMap<String,CompiledClass>();  try {    JarFile jarfile=new JarFile(jar);    for (Enumeration<JarEntry> entries=jarfile.entries(); entries.hasMoreElements(); ) {      JarEntry entry=entries.nextElement();      if (entry.getName().endsWith(".class")) {        try {          CompiledClass parsed=CompiledClass.getInstance(jarfile.getInputStream(entry));          if (!parsed.isInterface()) {            result.put(parsed.fullyQualifiedName(),parsed);          }        } catch (        IOException e) {          System.err.println("Exception while parsing " + entry.getName() + ": "+ e.getMessage());        }      }    }  } catch (  IOException e) {    System.err.println("Error opening jar file:");    e.printStackTrace(System.err);  }  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean add(Map<ContextKey,ContextValue<?>> context){  if (context == null) {    return false;  }  List<String> contextKeys=new ArrayList<String>();  List<String> contextValues=new ArrayList<String>();  for (  ContextKey key : context.keySet()) {    if (key != null) {      if (!key.equals(ContextKey.SERVICE_PARAMETERS)) {        ContextValueString stringValue=(ContextValueString)context.get(key);        String value=stringValue.getValue();        if (value != null && !value.isEmpty()) {          contextKeys.add(key.name());          contextValues.add(value);        }      } else {        Map<String,String> parameterMap=getParameterMap(key,context);        if (parameterMap != null) {          for (          String parameterName : parameterMap.keySet()) {            if (parameterName != null && !parameterName.isEmpty()) {              String parameterValue=parameterMap.get(parameterName);              if (parameterValue != null && !parameterValue.isEmpty()) {                contextKeys.add(key.name() + "_" + parameterName);                contextValues.add(parameterValue);              }            }          }        }      }    }  }  if (contextKeys.size() > 0 && contextValues.size() > 0) {    map.put(CONTEXT_KEYS_PARAMETER,contextKeys);    map.put(CONTEXT_VALUES_PARAMETER,contextValues);    return true;  } else {    return false;  }}  }
class C{  public static boolean isEquals(Object actual,Object expected){  return actual == expected || (actual == null ? expected == null : actual.equals(expected));}  }
class C{  private void tagStart() throws IOException {  saveCurrent();  go();  if (isAllRead()) {    return;  }  String originalTagName=identifier();  String tagName=transformations.getTagName(originalTagName);  if (tagName != null) {    ITagInfoProvider tagInfoProvider=cleaner.getTagInfoProvider();    TagInfo tagInfo=tagInfoProvider.getTagInfo(tagName);    if ((tagInfo == null && !props.isOmitUnknownTags() && props.isTreatUnknownTagsAsContent() && !isReservedTag(tagName) && !props.isNamespacesAware()) || (tagInfo != null && tagInfo.isDeprecated() && !props.isOmitDeprecatedTags() && props.isTreatDeprecatedTagsAsContent())) {      content();      return;    }  }  TagNode tagNode=new TagNode(tagName);  tagNode.setTrimAttributeValues(props.isTrimAttributeValues());  _currentTagToken=tagNode;  if (_asExpected) {    skipWhitespaces();    tagAttributes();    if (tagName != null) {      if (transformations != null) {        tagNode.setAttributes(transformations.transformAttributes(originalTagName,tagNode.getAttributesInLowerCase()));      }      addToken(_currentTagToken);    }    if (isChar('>')) {      go();      if (props.isUseCdataFor(tagName)) {        _isSpecialContext=true;        _isSpecialContextName=tagName;      }    } else     if (startsWith("/>")) {      go(2);      addToken(new EndTagToken(tagName));    }    _currentTagToken=null;  } else {    addSavedAsContent();  }}  }
class C{  public GeoRssPoint(Double lat,Double lon){  super(Namespaces.GEO_RSS_NAMESPACE,NAME,lat,lon);}  }
class C{  public ImageException(String message){  super(message);}  }
class C{  public static org.eclipse.jdt.core.util.IClassFileDisassembler createDefaultClassFileDisassembler(){class DeprecatedDisassembler extends Disassembler implements org.eclipse.jdt.core.util.IClassFileDisassembler {  }  return new DeprecatedDisassembler();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static int findGCD(final int a,final int b){  if (b == 0) {    return a;  }  return findGCD(b,a % b);}  }
class C{  public boolean doRewrite(final HttpServletRequest hsRequest,final HttpServletResponse hsResponse,final FilterChain chain) throws IOException, ServletException {  boolean requestRewritten=false;  String target=getTarget();  if (log.isTraceEnabled()) {    log.trace("doRewrite called");  }  if (rewriteMatch != null) {    rewriteMatch.execute(hsRequest,hsResponse);  }  if (stopFilterChain) {    log.trace("stopping filter chain");    requestRewritten=true;  } else   if (isNoSubstitution()) {    log.trace("no substitution");    requestRewritten=false;  } else   if (isForward()) {    if (hsResponse.isCommitted()) {      log.error("response is comitted cannot forward to " + target + " (check you haven't done anything to the response (ie, written to it) before here)");    } else {      final RequestDispatcher rq=getRequestDispatcher(hsRequest,target,targetContext);      rq.forward(hsRequest,hsResponse);      if (log.isTraceEnabled())       log.trace("forwarded to " + target);    }    requestRewritten=true;  } else   if (isPreInclude()) {    final RequestDispatcher rq=getRequestDispatcher(hsRequest,target,targetContext);    rq.include(hsRequest,hsResponse);    chain.doFilter(hsRequest,hsResponse);    requestRewritten=true;    if (log.isTraceEnabled())     log.trace("preinclded " + target);  } else   if (isPostInclude()) {    final RequestDispatcher rq=getRequestDispatcher(hsRequest,target,targetContext);    chain.doFilter(hsRequest,hsResponse);    rq.include(hsRequest,hsResponse);    requestRewritten=true;    if (log.isTraceEnabled())     log.trace("postinclded " + target);  } else   if (isRedirect()) {    if (hsResponse.isCommitted()) {      log.error("response is comitted cannot redirect to " + target + " (check you haven't done anything to the response (ie, written to it) before here)");    } else {      if (isEncode()) {        target=hsResponse.encodeRedirectURL(target);      }      hsResponse.sendRedirect(target);      if (log.isTraceEnabled())       log.trace("redirected to " + target);    }    requestRewritten=true;  } else   if (isTemporaryRedirect()) {    if (hsResponse.isCommitted()) {      log.error("response is comitted cannot temporary redirect to " + target + " (check you haven't done anything to the response (ie, written to it) before here)");    } else {      if (isEncode()) {        target=hsResponse.encodeRedirectURL(target);      }      hsResponse.setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);      hsResponse.setHeader("Location",target);      if (log.isTraceEnabled())       log.trace("temporarily redirected to " + target);    }    requestRewritten=true;  } else   if (isPermanentRedirect()) {    if (hsResponse.isCommitted()) {      log.error("response is comitted cannot permanent redirect " + target + " (check you haven't done anything to the response (ie, written to it) before here)");    } else {      if (isEncode()) {        target=hsResponse.encodeRedirectURL(target);      }      hsResponse.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY);      hsResponse.setHeader("Location",target);      if (log.isTraceEnabled())       log.trace("permanently redirected to " + target);    }    requestRewritten=true;  } else   if (isProxy()) {    if (hsResponse.isCommitted()) {      log.error("response is committed. cannot proxy " + target + ". Check that you havn't written to the response before.");    } else {      RequestProxy.execute(target,hsRequest,hsResponse);      if (log.isTraceEnabled()) {        log.trace("Proxied request to " + target);      }    }    requestRewritten=true;  }  return requestRewritten;}  }
class C{  private static List<INaviInstruction> collectInstructions(final INaviCodeNode codenode,final INaviInstruction instruction){  final List<INaviInstruction> naviinstrlist=new ArrayList<INaviInstruction>();  for (  final IInstruction instr : codenode.getInstructions()) {    if (instr instanceof INaviInstruction) {      final INaviInstruction naviinstr=(INaviInstruction)instr;      if (instruction.getAddress().equals(naviinstr.getAddress()) && !naviinstrlist.contains(naviinstr)) {        if (naviinstr != instruction) {          naviinstrlist.add(naviinstr);        }      }    }  }  return naviinstrlist;}  }
class C{  protected int insertionIndex(double val){  byte[] states=_states;  double[] set=_set;  int length=states.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (states[index] == FREE) {    return index;  } else   if (states[index] == FULL && set[index] == val) {    return -index - 1;  } else {    int probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (states[index] == FULL && set[index] != val);    if (states[index] == REMOVED) {      int firstRemoved=index;      while (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {        index-=probe;        if (index < 0) {          index+=length;        }      }      return states[index] == FULL ? -index - 1 : firstRemoved;    }    return states[index] == FULL ? -index - 1 : index;  }}  }
class C{  void reset(){  System.arraycopy(iv,0,k,0,blockSize);}  }
class C{  protected boolean visitIntersectionSupertype(AnnotatedTypeMirror subtype,AnnotatedIntersectionType supertype,VisitHistory visited){  if (visited.contains(subtype,supertype)) {    return true;  }  visited.add(subtype,supertype);  return isSubtypeOfAll(subtype,supertype.directSuperTypes(),visited);}  }
class C{  public void scale(float s){  showMissingWarning("scale");}  }
class C{  public WriteException(Collection<WriteRequest> requests,String s){  super(s);  this.requests=asRequestList(requests);}  }
class C{  protected static Map<String,String> options(String[] args){  Map<String,String> options=new HashMap<String,String>();  int i=0;  while (i < args.length) {    if (!args[i].startsWith("-")) {      throw new IllegalArgumentException("Invalid option name '" + args[i] + '\'');    } else     if ((i + 1) >= args.length) {      throw new IllegalArgumentException("Missing value for option '" + args[i] + '\'');    }    options.put(args[i],args[i + 1]);    i+=2;  }  return (options);}  }
class C{  public SummaryRanges(){  before=new HashMap<Integer,Interval>();  end=new HashMap<Integer,Interval>();  finish=new HashMap<Integer,Integer>();  list=new ArrayList<>();}  }
class C{  public AsynchronousComputationException(Throwable cause){  super(cause);}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String xoredFlags=environment.getNextVariableString();  final String negatedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createXor(offset,OperandSize.BYTE,Helpers.OVERFLOW_FLAG,OperandSize.BYTE,Helpers.SIGN_FLAG,OperandSize.BYTE,xoredFlags));  instructions.add(ReilHelpers.createBisz(offset + 1,OperandSize.BYTE,xoredFlags,OperandSize.BYTE,negatedResult));  return new Pair<OperandSize,String>(OperandSize.BYTE,negatedResult);}  }
class C{  private boolean isFailed(final AsyncOperationStatus status){  return status.status.equalsIgnoreCase("failed");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.847 -0500",hash_original_method="8C7DABCA9CC2734F7706D99DB6CDC33D",hash_generated_method="C9D992D64EB4504B5FE85C2D793B4F9E") public static void stopMethodTracing(){  VMDebug.stopMethodTracing();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i, c;  double numInNeighbours;  boolean flag=false;  boolean logTransform=false;  String outputType=null;  double flowDir;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputHeader=args[0];    outputHeader=args[1];    outputType=args[2].toLowerCase();    logTransform=Boolean.parseBoolean(args[3]);    if ((inputHeader == null) || (outputHeader == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    pointer=new WhiteboxRaster(inputHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    noData=pointer.getNoDataValue();    gridRes=pointer.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,1);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    int loopNum=1;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        flowDir=pointer.getValue(row,col);        if (flowDir != noData) {          i=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            flowDir=pointer.getValue(y,x);            if (flowDir >= 0 && flowDir <= 360) {              if (c != 3) {                if (flowDir > startFD[c] && flowDir < endFD[c]) {                  i++;                }              } else {                if (flowDir > startFD[c] || flowDir < endFD[c]) {                  i++;                }              }            }          }          tmpGrid.setValue(row,col,i);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop " + loopNum + ":",(int)progress);    }    boolean somethingDone;    do {      loopNum++;      updateProgress("Loop " + loopNum + ":",0);      somethingDone=false;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (tmpGrid.getValue(row,col) == 0) {            currentDepth=0;            somethingDone=true;            DinfAccum(row,col);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } while (somethingDone);    loopNum++;    updateProgress("Loop " + loopNum + ":",0);    if (outputType.equals("specific catchment area (sca)")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=pointer.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridRes);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else     if (outputType.equals("total catchment area")) {      double gridCellArea=gridRes * gridRes;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridCellArea);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    }    if (logTransform) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,Math.log(output.getValue(row,col)));          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else {      output.setNonlinearity(0.2);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pointer.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String negatedSign=environment.getNextVariableString();  instructions.add(ReilHelpers.createBisz(offset,OperandSize.BYTE,Helpers.SIGN_FLAG,OperandSize.BYTE,negatedSign));  return new Pair<OperandSize,String>(OperandSize.BYTE,negatedSign);}  }
class C{  protected void systemsMenu(JMenuBar menuBar,JFrame frame){  menuBar.add(new jmri.jmrix.SystemsMenu());}  }
class C{  private static void createDirectories(String filename){  File file=new File(filename);  File parentDir=file.getParentFile();  if ((parentDir != null) && !parentDir.isDirectory()) {    parentDir.mkdirs();  }}  }
class C{  public void doneWithParameters(){  if (info.parameterCount == VAR_ARGS) {    int len=varArgs.size();    checkParameterCount(len);    args=new Expression[len];    varArgs.toArray(args);    varArgs=null;  } else {    int len=args.length;    if (len > 0 && args[len - 1] == null) {      throw DbException.get(ErrorCode.INVALID_PARAMETER_COUNT_2,info.name,"" + len);    }  }}  }
class C{  public static double min(Array array) throws PageException {  if (array.getDimension() > 1)   throw new ExpressionException("can only get max value from 1 dimensional arrays");  if (array.size() == 0)   return 0;  double rtn=_toDoubleValue(array,1);  int len=array.size();  try {    for (int i=2; i <= len; i++) {      double v=_toDoubleValue(array,i);      if (rtn > v)       rtn=v;    }  } catch (  PageException e) {    throw new ExpressionException("exception while execute array operation: " + e.getMessage());  }  return rtn;}  }
class C{  public StopHandler(Looper looper){  super(looper);}  }
class C{  public DepthFirstSearch(int bound){  this.depthBound=bound;}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws NotSerializableException {  throw new NotSerializableException("Not serializable.");}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addControllerListener(ControllerInterface listener){  if (listeners == null) {    listeners=new ArrayList<ControllerInterface>(1);  }  if (!listeners.contains(listener)) {    listeners.add(listener);  }}  }
class C{  private boolean advance(){  if (storeData.next()) {    MemoryStore.unpackKey(storeData);    lastKeyGen=storeData.persistitKey.getGeneration();    return true;  }  return false;}  }
class C{  private static String format(int number,int format){  String retVal="" + number;  while (retVal.length() < format) {    retVal="0" + retVal;  }  return retVal;}  }
class C{  public CredentialsNotAvailableException(){  super();}  }
class C{  @Override public boolean shouldRetryWithErrorAndTries(int tries,MockApiErrorResponse error,HttpResponse httpResponse){  return false;}  }
class C{  public void addHexListener(final IHexPanelListener listener){  Preconditions.checkNotNull(listener,"Error: Listener can't be null");  if (!m_listeners.contains(listener)) {    m_listeners.add(listener);  }}  }
class C{  @NotNull public static List<PsiMethod> overrideOrImplementMethod(PsiClass aClass,PsiMethod method,boolean toCopyJavaDoc) throws IncorrectOperationException {  final PsiClass containingClass=method.getContainingClass();  LOG.assertTrue(containingClass != null);  PsiSubstitutor substitutor=aClass.isInheritor(containingClass,true) ? TypeConversionUtil.getSuperClassSubstitutor(containingClass,aClass,PsiSubstitutor.EMPTY) : PsiSubstitutor.EMPTY;  return overrideOrImplementMethod(aClass,method,substitutor,toCopyJavaDoc,CodeStyleSettingsManager.getSettings(aClass.getProject()).INSERT_OVERRIDE_ANNOTATION);}  }
class C{  @Override public void releaseChannel(TunerChannelSource source){  if (source != null) {    removeListener((Listener<ComplexBuffer>)source);    getController().releaseChannel(source);  }}  }
class C{  public GenericEntry createAccountInfoRequest(String user) throws AppsForYourDomainException, IOException, ServiceException {  URL url=new URL(BASE_URL + "account/" + domain+ "/"+ user);  return insert(url,new GenericEntry());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ValidationPackage.VALIDATION_MARKER__DELEGATE_RESOURCE:    return DELEGATE_RESOURCE_EDEFAULT == null ? delegateResource != null : !DELEGATE_RESOURCE_EDEFAULT.equals(delegateResource);}return super.eIsSet(featureID);}  }
class C{  DOMStringListImpl(){  fStrings=new Vector();}  }
class C{  public boolean arrowScroll(int direction){  View currentFocused=findFocus();  if (currentFocused == this)   currentFocused=null;  View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,direction);  final int maxJump=getMaxScrollAmount();  if (nextFocused != null && isWithinDeltaOfScreen(nextFocused,maxJump,getHeight())) {    nextFocused.getDrawingRect(mTempRect);    offsetDescendantRectToMyCoords(nextFocused,mTempRect);    int scrollDelta=computeScrollDeltaToGetChildRectOnScreen(mTempRect);    doScrollY(scrollDelta);    nextFocused.requestFocus(direction);  } else {    int scrollDelta=maxJump;    if (direction == View.FOCUS_UP && getScrollY() < scrollDelta) {      scrollDelta=getScrollY();    } else     if (direction == View.FOCUS_DOWN) {      if (getChildCount() > 0) {        int daBottom=getChildAt(0).getBottom();        int screenBottom=getScrollY() + getHeight() - mPaddingBottom;        if (daBottom - screenBottom < maxJump) {          scrollDelta=daBottom - screenBottom;        }      }    }    if (scrollDelta == 0) {      return false;    }    doScrollY(direction == View.FOCUS_DOWN ? scrollDelta : -scrollDelta);  }  if (currentFocused != null && currentFocused.isFocused() && isOffScreen(currentFocused)) {    final int descendantFocusability=getDescendantFocusability();    setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);    requestFocus();    setDescendantFocusability(descendantFocusability);  }  return true;}  }
class C{  public void clearProgressListeners(){  getProgressSupport().clear();}  }
class C{  public long[] readLongArray(final int items,final JBBPByteOrder byteOrder) throws IOException {  int pos=0;  if (items < 0) {    long[] buffer=new long[INITIAL_ARRAY_BUFFER_SIZE];    while (hasAvailableData()) {      final long next=readLong(byteOrder);      if (buffer.length == pos) {        final long[] newbuffer=new long[buffer.length << 1];        System.arraycopy(buffer,0,newbuffer,0,buffer.length);        buffer=newbuffer;      }      buffer[pos++]=next;    }    if (buffer.length == pos) {      return buffer;    }    final long[] result=new long[pos];    System.arraycopy(buffer,0,result,0,pos);    return result;  } else {    final long[] buffer=new long[items];    for (int i=0; i < items; i++) {      buffer[i]=readLong(byteOrder);    }    return buffer;  }}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public String close(){  String string=new String(buffer(),0,length());  free();  return string;}  }
class C{  public static ParseOperationSet fromRest(JSONObject json,ParseDecoder decoder) throws JSONException {  Iterator<String> keysIter=json.keys();  String[] keys=new String[json.length()];  int index=0;  while (keysIter.hasNext()) {    String key=keysIter.next();    keys[index++]=key;  }  JSONObject jsonCopy=new JSONObject(json,keys);  String uuid=(String)jsonCopy.remove(REST_KEY_UUID);  ParseOperationSet operationSet=(uuid == null ? new ParseOperationSet() : new ParseOperationSet(uuid));  boolean isSaveEventually=jsonCopy.optBoolean(REST_KEY_IS_SAVE_EVENTUALLY);  jsonCopy.remove(REST_KEY_IS_SAVE_EVENTUALLY);  operationSet.setIsSaveEventually(isSaveEventually);  Iterator<?> opKeys=jsonCopy.keys();  while (opKeys.hasNext()) {    String opKey=(String)opKeys.next();    Object value=decoder.decode(jsonCopy.get(opKey));    ParseFieldOperation fieldOp;    if (opKey.equals("ACL")) {      value=ParseACL.createACLFromJSONObject(jsonCopy.getJSONObject(opKey),decoder);    }    if (value instanceof ParseFieldOperation) {      fieldOp=(ParseFieldOperation)value;    } else {      fieldOp=new ParseSetOperation(value);    }    operationSet.put(opKey,fieldOp);  }  return operationSet;}  }
class C{  public BeanContextSupport(BeanContext peer,Locale locale,boolean designTime){  this(peer,locale,designTime,true);}  }
class C{  public void put(K k,V v){  if (containsKey(k)) {    getValues(k).add(v);  } else {    boxedHashMap.put(k,new LinkedList<V>());    put(k,v);  }}  }
class C{  public void checkCompatibility(Collection<FieldMapper> newFieldMappers,boolean updateAllTypes){  for (  FieldMapper fieldMapper : newFieldMappers) {    MappedFieldTypeReference ref=fullNameToFieldType.get(fieldMapper.fieldType().names().fullName());    if (ref != null) {      List<String> conflicts=new ArrayList<>();      ref.get().checkTypeName(fieldMapper.fieldType(),conflicts);      if (conflicts.isEmpty()) {        boolean strict=updateAllTypes == false;        ref.get().checkCompatibility(fieldMapper.fieldType(),conflicts,strict);      }      if (conflicts.isEmpty() == false) {        throw new IllegalArgumentException("Mapper for [" + fieldMapper.fieldType().names().fullName() + "] conflicts with existing mapping in other types:\n"+ conflicts.toString());      }    }    MappedFieldTypeReference indexNameRef=indexNameToFieldType.get(fieldMapper.fieldType().names().indexName());    if (indexNameRef != null) {      List<String> conflicts=new ArrayList<>();      indexNameRef.get().checkTypeName(fieldMapper.fieldType(),conflicts);      if (conflicts.isEmpty()) {        boolean strict=updateAllTypes == false;        indexNameRef.get().checkCompatibility(fieldMapper.fieldType(),conflicts,strict);      }      if (conflicts.isEmpty() == false) {        throw new IllegalArgumentException("Mapper for [" + fieldMapper.fieldType().names().fullName() + "] conflicts with mapping with the same index name in other types"+ conflicts.toString());      }    }  }}  }
class C{  private void updateParentEntry(CacheDataPage parentDataPage,CacheDataPage childDataPage,Entry oldEntry,Entry newEntry,UpdateType upType) throws IOException {  DataPageMain childMain=childDataPage._main;  DataPageExtra parentExtra=parentDataPage._extra;  if (childMain.isTail() && (upType != UpdateType.REMOVE)) {    updateParentTail(parentDataPage,childDataPage,upType);  }  if (oldEntry != null) {    oldEntry=oldEntry.asNodeEntry(childMain._pageNumber);  }  if (newEntry != null) {    newEntry=newEntry.asNodeEntry(childMain._pageNumber);  }  boolean expectFound=true;  int idx=0;switch (upType) {case ADD:    expectFound=false;  idx=parentExtra._entryView.find(newEntry);break;case REPLACE:case REMOVE:idx=parentExtra._entryView.find(oldEntry);break;default :throw new RuntimeException(withErrorContext("unknown update type " + upType));}if (idx < 0) {if (expectFound) {throw new IllegalStateException(withErrorContext("Could not find child entry in parent; childEntry " + oldEntry + "; parent "+ parentDataPage));}idx=missingIndexToInsertionPoint(idx);} else {if (!expectFound) {throw new IllegalStateException(withErrorContext("Unexpectedly found child entry in parent; childEntry " + newEntry + "; parent "+ parentDataPage));}}updateEntry(parentDataPage,idx,newEntry,upType);if (childMain.isTail() && (upType == UpdateType.REMOVE)) {updateParentTail(parentDataPage,childDataPage,upType);}}  }
class C{  public StopSpec(double lon,double lat){  this.lat=lat;  this.lon=lon;}  }
class C{  public Response updateChatRoom(MUCRoomEntity chatRoom){  return restClient.put("chatrooms/" + chatRoom.getRoomName(),chatRoom,new HashMap<String,String>());}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){switch (requestCode) {case REQUEST_STORAGE_WRITE_ACCESS_PERMISSION:    if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {      saveCroppedImage();    }  break;default :super.onRequestPermissionsResult(requestCode,permissions,grantResults);}}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public boolean recordParamNames(CodeAttribute ca,int numOfLocalVars) throws CompileError {  LocalVariableAttribute va=(LocalVariableAttribute)ca.getAttribute(LocalVariableAttribute.tag);  if (va == null)   return false;  int n=va.tableLength();  for (int i=0; i < n; ++i) {    int index=va.index(i);    if (index < numOfLocalVars)     gen.recordVariable(va.descriptor(i),va.variableName(i),index,stable);  }  return true;}  }
class C{  static Object instantiate(Class<?> sibling,String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  ClassLoader cl=sibling.getClassLoader();  Class<?> cls=ClassFinder.findClass(className,cl);  return cls.newInstance();}  }
class C{  @Deprecated public static <N>ImmutableGraph<N> copyOf(ImmutableGraph<N> graph){  return checkNotNull(graph);}  }
class C{  public static int toIntHex(String num,int defaultValue){  try {    if (num != null && num.startsWith("#")) {      num=num.substring(1);    }    return Integer.parseInt(num,16);  } catch (  NumberFormatException e) {    logger.trace("",e);    return defaultValue;  }}  }
class C{  public static boolean isCompatibleWithThrowsClause(Throwable ex,Class<?>... declaredExceptions){  if (!isCheckedException(ex)) {    return true;  }  if (declaredExceptions != null) {    for (    Class<?> declaredException : declaredExceptions) {      if (declaredException.isInstance(ex)) {        return true;      }    }  }  return false;}  }
class C{  public void hasNetworkConnection(NetworkRequestCheckListener listener){  if (hasNetworkConnection()) {    testNetworkRequest(listener);  } else {    listener.onNoResponse();  }}  }
class C{  public ConfigBuilder withLogging(Logging logging){  this.logging=logging;  return this;}  }
class C{  public boolean isAutoStart(){  return mAutoStart;}  }
class C{  protected String doIt() throws Exception {  ArrayList<Object> params=new ArrayList<Object>();  String sql="SELECT p.M_Product_ID FROM M_Product p WHERE p.AD_Client_ID=?";  params.add(m_AD_Client_ID);  if (p_M_Product_Category_ID > 0) {    sql+=" AND p.M_Product_Category_ID=?";    params.add(p_M_Product_Category_ID);  }  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    DB.setParameters(pstmt,params);    rs=pstmt.executeQuery();    while (rs.next()) {      int M_Product_ID=rs.getInt(1);      createPlanning(M_Product_ID);    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return "@Created@ #" + count_created + " @Updated@ #"+ count_updated+ " @Error@ #"+ count_error;}  }
class C{  private void checkRelease(){  List<PartitionReader> toRelease=new ArrayList<PartitionReader>();  for (  PartitionReader p : hold) {    if (!p.isTaken()) {      toRelease.add(p);      finish(p);    }  }  hold.removeAll(toRelease);}  }
class C{  public boolean isExtensionSupported(String tag){  return mExtensions.contains(tag);}  }
class C{  public static boolean isResetUnitStateAtStart(final GameData data){  final boolean isReset;  data.acquireReadLock();  try {    final String prop=data.getSequence().getStep().getProperties().getProperty(GameStep.PROPERTY_resetUnitStateAtStart);    if (prop != null) {      isReset=Boolean.parseBoolean(prop);    } else {      isReset=false;    }  }  finally {    data.releaseReadLock();  }  return isReset;}  }
class C{  public InputStream fetchCifsServerParams(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating CIFS Server Params Query");  InputStream iStream=null;  try {    String moverId=(String)keyMap.get(VNXFileConstants.MOVER_ID);    String isVDM=(String)keyMap.get(VNXFileConstants.ISVDM);    CifsServerQueryParams cifsQuery=new CifsServerQueryParams();    MoverOrVdmRef mover=new MoverOrVdmRef();    Boolean moverIsVdm=new Boolean(false);    if (moverId != null) {      mover.setMover(moverId);      if (isVDM != null) {        if (isVDM.equalsIgnoreCase("true")) {          moverIsVdm=new Boolean(true);        }      }      mover.setMoverIdIsVdm(moverIsVdm);      cifsQuery.setMoverOrVdm(mover);    }    Query query=new Query();    query.getQueryRequestChoice().add(cifsQuery);    iStream=_vnxFileInputRequestBuilder.getQueryParamPacket(cifsQuery,false);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for  Cifs server info",jaxbException.getCause());  }  return iStream;}  }
class C{  private PaymentType findPaymentType(String typeId) throws ObjectNotFoundException {  PaymentType paymentType=new PaymentType();  paymentType.setPaymentTypeId(typeId);  paymentType=(PaymentType)dm.getReferenceByBusinessKey(paymentType);  return paymentType;}  }
class C{  public ResultSet executeQuery(final PreparedStatement statement) throws SQLException {  Preconditions.checkNotNull(statement,"Statement argument can not be null");  return statement.executeQuery();}  }
class C{  public DockMapPanel(boolean delayCreation){  this(null,delayCreation);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Interval reverseThis(){  return Interval.fromToBy(this.to,this.from,-this.step);}  }
class C{  public void authorize(Context ctx,Provider provider){  currentProvider=provider;  Log.d("SocialAuthAdapter","Selected provider is " + currentProvider);  if (socialAuthManager != null) {    if (socialAuthManager.getConnectedProvidersIds().contains(currentProvider.toString())) {      Log.d("SocialAuthAdapter","Provider already connected");      Bundle bundle=new Bundle();      bundle.putString(SocialAuthAdapter.PROVIDER,currentProvider.toString());      dialogListener.onComplete(bundle);    } else {      connectProvider(ctx,provider);    }  } else {    Log.d("SocialAuthAdapter","Loading keys and secrets from configuration");    socialAuthManager=new SocialAuthManager();    try {      loadConfig(ctx);    } catch (    Exception e) {      Log.d("SocialAuthAdapter","Could not load configuration");    }    connectProvider(ctx,provider);  }  if (!Util.isNetworkAvailable(ctx)) {    dialogListener.onError(new SocialAuthError("Please check your Internet connection",new Exception("")));  }}  }
class C{  private static boolean isAppropriateMixer(Mixer mixer,Line.Info lineInfo,boolean isMixingRequired){  if (!mixer.isLineSupported(lineInfo)) {    return false;  }  Class lineClass=lineInfo.getLineClass();  if (isMixingRequired && (SourceDataLine.class.isAssignableFrom(lineClass) || Clip.class.isAssignableFrom(lineClass))) {    int maxLines=mixer.getMaxLines(lineInfo);    return ((maxLines == NOT_SPECIFIED) || (maxLines > 1));  }  return true;}  }
class C{  protected void readErrorCodeHeaders(Object connection) throws IOException {}  }
class C{  public boolean isList_1(){  return list_1;}  }
class C{  public void executionStarted(SessionEvent event){  Object model=getModel();  for (  Class clazz : modelClasses) {    Object param=getParam(clazz);    if (param instanceof ExecutionRestarter) {      ExecutionRestarter restarter=(ExecutionRestarter)param;      restarter.newExecution();    }  }  getSessionSupport().fireSessionEvent(event);}  }
class C{  public static Properties extractMapping(Node mainNode){  Properties settings=new Properties();  NodeList firstElements=mainNode.getChildNodes();  for (int j=0; j < firstElements.getLength(); j++) {    Node node=firstElements.item(j);    if (!node.getNodeName().equals("#text") && !node.getNodeName().equals("#comment")) {      String propName=node.getNodeName().trim();      settings.put(propName,node.getTextContent());    }  }  return settings;}  }
class C{  private int unsignedToSigned(int unsigned,int size){  if ((unsigned & (1 << size - 1)) != 0) {    unsigned=-1 * ((1 << size - 1) - (unsigned & ((1 << size - 1) - 1)));  }  return unsigned;}  }
class C{  public String city(){  return city;}  }
class C{  public static LabelSet[] cover(LabelSet y,HashMap<LabelSet,Integer> map){  Integer count=map.get(y);  if (count != null && count >= 1) {    return new LabelSet[]{y};  } else {    Comparator cmp=new LabelSetComparator(map);    SortedSet<LabelSet> allS=getSortedSubsets(y,map.keySet(),cmp);    Set<LabelSet> covS=cover(y,allS,cmp);    return covS.toArray(new LabelSet[0]);  }}  }
class C{  public boolean IsPasswordAuthEnabled(){  return this._passwordAuthEnabled;}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3});}  }
class C{  public void enablePopupMenu(boolean popupMenu){  this.popupMenu=popupMenu;}  }
class C{  public Boolean isBackgroundSnapshotsEnabled(){  return backgroundSnapshotsEnabled;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  m_functionExpr.fixupVariables(vars,globalsSize);}  }
class C{  public void testDoConfigureSetsDefaultAdminServer() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(WebLogicPropertySet.SERVER),"//weblogic:admin-server-name",config);}  }
class C{  private static URI refragUri(URI uri,String frag) throws URISyntaxException {  return new URI(uri.getScheme(),uri.getSchemeSpecificPart(),frag);}  }
class C{  public boolean isSame(StoreFileMetaData other){  if (checksum == null || other.checksum == null) {    return false;  }  return length == other.length && checksum.equals(other.checksum) && hash.equals(other.hash);}  }
class C{  public PrintJobAttributeEvent(DocPrintJob source,PrintJobAttributeSet attributes){  super(source);  this.attributes=AttributeSetUtilities.unmodifiableView(attributes);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SISTER_CACHE'";  db.execSQL(sql);}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.BASE_TYPE_REF;}  }
class C{  public Matrix3d lerp(Matrix3dc other,double t){  return lerp(other,t,this);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  RoomFeatureListForm roomFeatureListForm=(RoomFeatureListForm)form;  sessionContext.checkPermission(Right.RoomFeatures);  ActionMessages errors=new ActionMessages();  String deptCode=(String)request.getAttribute("deptCode");  if (deptCode != null) {    roomFeatureListForm.setDeptCodeX(deptCode);  }  if (sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom) != null && roomFeatureListForm.getDeptCodeX() == null) {    deptCode=(String)sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom);    if (deptCode != null && ("All".equals(deptCode) || deptCode.matches("Exam[0-9]*")))     roomFeatureListForm.setDeptCodeX((String)sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom));  }  if (roomFeatureListForm.getDeptCodeX() != null && !roomFeatureListForm.getDeptCodeX().isEmpty())   sessionContext.setAttribute(SessionAttribute.DepartmentCodeRoom,roomFeatureListForm.getDeptCodeX());  errors=roomFeatureListForm.validate(mapping,request);  LookupTables.setupDepartments(request,sessionContext,true);  LookupTables.setupExamTypes(request,sessionContext.getUser(),DepartmentStatusType.Status.ExamView,DepartmentStatusType.Status.ExamTimetable);  if (errors.size() > 0) {    saveErrors(request,errors);    return mapping.findForward("showRoomFeatureSearch");  }  roomFeatureListForm.setGlobalRoomFeatures(RoomFeature.getAllGlobalRoomFeatures(sessionContext.getUser().getCurrentAcademicSessionId()));  Set<DepartmentRoomFeature> departmentRoomFeatures=new TreeSet<DepartmentRoomFeature>();  for (  Department d : Department.getUserDepartments(sessionContext.getUser())) {    if ("All".equals(roomFeatureListForm.getDeptCodeX()) || d.getDeptCode().equals(roomFeatureListForm.getDeptCodeX()))     departmentRoomFeatures.addAll(RoomFeature.getAllDepartmentRoomFeatures(d));  }  if (roomFeatureListForm.getDeptCodeX() != null && !roomFeatureListForm.getDeptCodeX().isEmpty() && !"All".equals(roomFeatureListForm.getDeptCodeX()) && !roomFeatureListForm.getDeptCodeX().matches("Exam[0-9]*")) {    Department department=Department.findByDeptCode(roomFeatureListForm.getDeptCodeX(),sessionContext.getUser().getCurrentAcademicSessionId());    if (department != null && department.isExternalManager())     departmentRoomFeatures.addAll(RoomFeature.getAllDepartmentRoomFeatures(department));  }  roomFeatureListForm.setDepartmentRoomFeatures(departmentRoomFeatures);  buildFeatureTable(request,roomFeatureListForm);  if ("Export PDF".equals(request.getParameter("op"))) {    sessionContext.checkPermission(Right.RoomFeaturesExportPdf);    OutputStream out=ExportUtils.getPdfOutputStream(response,"roomFeatures");    printPdfFeatureTable(out,sessionContext,roomFeatureListForm);    out.flush();    out.close();    return null;  }  return mapping.findForward("showRoomFeatureList");}  }
class C{  public StringParameter(OptionID optionID){  super(optionID);}  }
class C{  @Override public Object clone(){  GraphicsState cState=new GraphicsState();  cState.cliprgn=null;  cState.cap=cap;  cState.join=join;  cState.strokePaint=strokePaint;  cState.fillPaint=fillPaint;  cState.xform=new Matrix(xform);  cState.lineWidth=lineWidth;  cState.miterLimit=miterLimit;  return cState;}  }
class C{  public Object remove(int posn) throws InvalidNameException {  unparsed=null;  return rdns.remove(posn).toString();}  }
class C{  public Cuboid(World world,int x1,int y1,int z1,int x2,int y2,int z2){  this.worldName=world.getName();  this.x1=Math.min(x1,x2);  this.x2=Math.max(x1,x2);  this.y1=Math.min(y1,y2);  this.y2=Math.max(y1,y2);  this.z1=Math.min(z1,z2);  this.z2=Math.max(z1,z2);}  }
class C{  boolean shouldDiskNameBeVisible(String diskName){  return diskName.startsWith(mFilePrefix);}  }
class C{  public static void main(String[] args){  StdDraw.square(.2,.8,.1);  StdDraw.filledSquare(.8,.8,.2);  StdDraw.circle(.8,.2,.2);  StdDraw.setPenColor(StdDraw.BOOK_RED);  StdDraw.setPenRadius(.02);  StdDraw.arc(.8,.2,.1,200,45);  StdDraw.setPenRadius();  StdDraw.setPenColor(StdDraw.BOOK_BLUE);  double[] x={.1,.2,.3,.2};  double[] y={.2,.3,.2,.1};  StdDraw.filledPolygon(x,y);  StdDraw.setPenColor(StdDraw.BLACK);  StdDraw.text(0.2,0.5,"black text");  StdDraw.setPenColor(StdDraw.WHITE);  StdDraw.text(0.8,0.8,"white text");}  }
class C{  @Override public boolean execute(String sql,int autoGeneratedKeys) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("execute(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    }    return executeInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public DefaultRefactoringDescriptorProxy(final String description,final String project,final long stamp){  Assert.isTrue(project == null || !"".equals(project));  Assert.isTrue(description != null && !"".equals(description));  fDescription=description.intern();  fProject=project != null ? project.intern() : null;  fTimeStamp=stamp;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  protected void sequence_ActionRef(ISerializationContext context,ActionRef semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.ACTION_REF__REF) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.ACTION_REF__REF));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getActionRefAccess().getRefActionDefinitionValid_IDParserRuleCall_1_0_1(),semanticObject.getRef());  feeder.finish();}  }
class C{  protected void logError(String message,Exception exception){  if (isLoggingEnabled()) {    LOGGER.error(message,exception);  }}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:29.033 -0500",hash_original_method="474327607EE56B056BCE4043FE865D8B",hash_generated_method="A8CB8980488C2FCB5B884E352F4D3527") public ParcelFileDescriptor dup() throws IOException {  return dup(getFileDescriptor());}  }
class C{  public static final void drawWeldJoint(GL2 gl,WeldJoint joint){  gl.glColor4f(0.3f,0.3f,0.3f,1.0f);  Vector2 anchor=joint.getAnchor1();  final double d=0.025;  gl.glBegin(GL.GL_LINES);  gl.glVertex2d(anchor.x - d,anchor.y - d);  gl.glVertex2d(anchor.x + d,anchor.y + d);  gl.glVertex2d(anchor.x - d,anchor.y + d);  gl.glVertex2d(anchor.x + d,anchor.y - d);  gl.glEnd();}  }
class C{  public QueueEvent peek(long wait) throws KeeperException, InterruptedException {  TimerContext time=null;  if (wait == Long.MAX_VALUE) {    time=stats.time(dir + "_peek_wait_forever");  } else {    time=stats.time(dir + "_peek_wait" + wait);  }  try {    if (wait == 0) {      return element();    }    Map<Long,String> orderedChildren=getChildren(wait);    for (    String headNode : orderedChildren.values()) {      String path=dir + "/" + headNode;      try {        byte[] data=zookeeper.getData(path,null,null,true);        return new QueueEvent(path,data,null);      } catch (      KeeperException.NoNodeException e) {      }    }    return null;  }  finally {    time.stop();  }}  }
class C{  public void putBytes(int key,byte value[]){  map.put(key,value);}  }
class C{  protected synchronized void computeParameters(){  int w, h;  if (ul == null)   ul=new Point(0,0);  maxscale=CADRG_calc_maxscale();  if (scale > maxscale)   scale=maxscale;  double adrgscale=1000000.0 / scale;  if (adrgscale > CADRG_SCALE_LIMIT) {    Debug.message("proj","CADRG: adrgscale > CADRG_SCALE_LIMIT");    adrgscale=CADRG_SCALE_LIMIT;  }  y_pix_constant=CADRG_y_pix_constant(adrgscale);  if (Debug.debugging("proj")) {    Debug.output("Y pix constant = " + y_pix_constant);  }  double ppd=y_pix_constant / 90.0;  if (upper_zone_extents == null || lower_zone_extents == null) {    upper_zone_extents=new double[CADRG_get_zone_old_extents.length];    lower_zone_extents=new double[CADRG_get_zone_old_extents.length + 1];    lower_zone_extents[0]=0f;    lower_zone_extents[8]=80f;    upper_zone_extents[8]=90f;    for (int x=0; x < CADRG_get_zone_old_extents.length - 1; x++) {      double pivot=Math.floor(ppd * CADRG_get_zone_old_extents[x] / 1536.0);      lower_zone_extents[x + 1]=pivot * 1536.0 / ppd;      pivot++;      upper_zone_extents[x]=pivot * 1536.0 / ppd;      Debug.message("proj","lower_zone_extents[" + x + "] = "+ lower_zone_extents[x]);      Debug.message("proj","upper_zone_extents[" + x + "] = "+ upper_zone_extents[x]);    }  }  if (scale > 60000000) {    zone=1;  } else {    zone=getZone(ProjMath.radToDeg(centerY),y_pix_constant);  }  if (Debug.debugging("proj")) {    Debug.output("Zone = " + zone);  }  x_pix_constant=CADRG_x_pix_constant(adrgscale,zone);  if (width >= x_pix_constant) {    x_pix_constant=width + 1;  }  if (Debug.debugging("proj")) {    Debug.output("x_pix_constant = " + x_pix_constant);  }  if (world == null)   world=new Point(0,0);  world.x=(int)ProjMath.roundAdjust(x_pix_constant);  world.y=(int)ProjMath.roundAdjust(y_pix_constant * 4.0 / 2.0);  Debug.message("proj","world = " + world.x + ","+ world.y);  spps_x=(double)x_pix_constant / MoreMath.TWO_PI;  spps_y=(double)y_pix_constant / MoreMath.HALF_PI;  Debug.message("proj","spps = " + spps_x + ","+ spps_y);  if (width > world.x) {    Debug.message("proj","CADRG: fixing small world");    w=world.x;  } else {    w=width;  }  if (height > world.y) {    h=(int)world.y;    oy=(int)ProjMath.roundAdjust((height - h) / 2.0);  } else {    h=height;    oy=0;  }  long temp=(long)ProjMath.roundAdjust(spps_y * centerY);  if (Debug.debugging("proj")) {    Debug.output("CADRG.temp = " + temp);  }  if (ul == null)   ul=new Point(0,0);  ul.x=(int)ProjMath.roundAdjust(-w / 2.0);  if ((temp != 0) && (oy != 0)) {    ul.y=(int)ProjMath.roundAdjust(h / 2.0);  } else {    ul.y=(int)temp + (int)ProjMath.roundAdjust(h / 2.0);  }  if (Debug.debugging("proj")) {    Debug.output("CADRG: ul = " + ul.x + ","+ ul.y);    Debug.output(" oy = " + oy);  }  half_world=world.x / 2;  if (scale > maxscale) {    scale=maxscale;  }  Debug.message("proj","CADRG.computeParameters(): maxscale: " + maxscale);}  }
class C{  public String removeMask(String value){  return formatter.removeMask(displayHints.getMask(),value);}  }
class C{  public static JSONObject createRule(String name,String description,String membershipRule) throws JSONException {  JSONObject rule=new JSONObject();  rule.put(JSON_FIELD_NAME,name);  rule.put(JSON_FIELD_DESCRIPTION,description);  rule.put(JSON_FIELD_RULE,membershipRule);  return rule;}  }
class C{  public ServiceCall<Void> deleteWord(CustomVoiceModel model,CustomTranslation translation){  Validator.notEmpty(model.getId(),"model id must not be empty");  Validator.notEmpty(translation.getWord(),"word must not be empty");  final String path=String.format(PATH_WORD,model.getId(),RequestUtils.encode(translation.getWord()));  final Request request=RequestBuilder.delete(path).build();  return createServiceCall(request,ResponseConverterUtils.getVoid());}  }
class C{  public static boolean supportsEs2(Context context){  final ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  final ConfigurationInfo configurationInfo=activityManager.getDeviceConfigurationInfo();  final boolean supportsEs2=configurationInfo.reqGlEsVersion >= 0x20000;  return supportsEs2;}  }
class C{  public static boolean contains(SpatialComparable box,double[] point){  final int dim=box.getDimensionality();  if (dim != point.length) {    throw new IllegalArgumentException("This HyperBoundingBox and the given point need same dimensionality");  }  for (int i=0; i < dim; i++) {    if (box.getMin(i) > point[i] || box.getMax(i) < point[i]) {      return false;    }  }  return true;}  }
class C{  public boolean hasSignature(){  return fieldSetFlags()[12];}  }
class C{  public GOCDataBuilder withEventName(final String smEventNamec){  this.smEventNamec=smEventNamec;  return this;}  }
class C{  public static double log10(double val){  if (val > 0.0)   return Math.log10(val);  return HUGE_NEGATIVE;}  }
class C{  public void initialize(File file){  super.initialize(file);  String fullPath=file.getPath();  try {    fullPath=file.getCanonicalPath();  } catch (  IOException ioe) {  }  _name=initializer.getName();  _type="";  if (!file.isDirectory()) {    int index=_name.lastIndexOf(".");    int index2=fullPath.lastIndexOf(File.separator);    _path=fullPath.substring(0,index2);    if (index != -1 && index != 0) {      _type=_name.substring(index + 1);      _name=_name.substring(0,index);    }  } else {    _path=fullPath;  }  if (initializer.isFile()) {    _size=initializer.length();    _sizeHolder=new SizeHolder(_size);  } else {    _sizeHolder=ZERO_SIZED_HOLDER;  }  this.lastModified=new Date(initializer.lastModified());  this.actionsHolder=new LibraryActionsHolder(this,false);  this.nameCell=new NameHolder(_name);  if (initializer != null && initializer.isFile() && FilenameUtils.getExtension(initializer.getName()) != null && FilenameUtils.getExtension(initializer.getName()).toLowerCase().endsWith("torrent")) {    BTInfoAdditionalMetadataHolder additionalMetadataHolder=null;    try {      additionalMetadataHolder=new BTInfoAdditionalMetadataHolder(initializer,initializer.getName());    } catch (    Throwable t) {      System.err.println("[InvalidTorrent] Can't create BTInfoAdditionalMetadataholder out of " + initializer.getAbsolutePath());      t.printStackTrace();    }    boolean hasLicense=additionalMetadataHolder != null && additionalMetadataHolder.getLicenseBroker() != null;    boolean hasPaymentOptions=additionalMetadataHolder != null && additionalMetadataHolder.getPaymentOptions() != null;    if (hasLicense) {      System.out.println(initializer);      license=additionalMetadataHolder.getLicenseBroker().getLicenseName();    } else {      license="";    }    if (hasPaymentOptions) {      paymentOptions=additionalMetadataHolder.getPaymentOptions();    } else {      paymentOptions=new PaymentOptions(null,null);    }    paymentOptions.setItemName(_name);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.071 -0500",hash_original_method="6A7026A9D9DABE2CFEC525523BE2256F",hash_generated_method="454135273088C4BA6B3CEA5E93C7CB5F") @DSSafe(DSCat.SAFE_OTHERS) public static byte[] sha512(String data){  return sha512(getBytesUtf8(data));}  }
class C{  protected void listExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de listExecuteLogic");  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  List areas=descripcionService.getAreas();  request.setAttribute(ControlAccesoConstants.LISTA_AREAS,areas);  ClientInvocation invocation=saveCurrentInvocation(KeysClientsInvocations.AREAS_LISTADO,request);  invocation.setAsReturnPoint(true);  setReturnActionFordward(request,mapping.findForward("list"));}  }
class C{  private void enableDisableSpacingFields(){  if (manuallySetNumColumns.isSelected()) {    tfNumColumns.setEnabled(true);  } else {    tfNumColumns.setEnabled(false);  }}  }
class C{  public void clear(){  this.bodies.clear();  this.joints.clear();  this.contactConstraints.clear();}  }
class C{  public static <E>List<E> of(E e1,E e2,E e3){  return new ImmutableCollections.ListN<E>(e1,e2,e3);}  }
class C{  public int compareTo(final int x,final int leftRadius,final int rightRadius){  if (this == EMPTY_INTERVAL)   throw new IllegalArgumentException();  if (x < left - leftRadius)   return -1;  if (x > right + rightRadius)   return 1;  return 0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void update(){  matrix.removeAll();  List<SystemConnectionMemo> connList=InstanceManager.getList(SystemConnectionMemo.class);  if (!connList.isEmpty()) {    log.debug("update of {} connections",connList.size());    reloadConnections(connList);  } else {    log.debug("update with no new-form system connections configured");    matrix.add(new JLabel("No new-form system connections configured"));  }}  }
class C{  private Instruction pushCopy(Operand op1){  if (VM.VerifyAssertions)   opt_assert(op1.instruction == null);  if (op1 instanceof RegisterOperand) {    RegisterOperand reg=(RegisterOperand)op1;    if (!reg.getRegister().isLocal()) {      lastInstr=null;    }    stack.push(reg.copy());  } else {    stack.push(op1.copy());  }  return null;}  }
class C{  public static long decodeEntityAt(char[] chars,int offset,int limit){  char ch=chars[offset];  if ('&' != ch) {    return ((offset + 1L) << 32) | ch;  }  int entityLimit=Math.min(limit,offset + 10);  int end=-1;  for (int i=offset + 1; i < entityLimit; ++i) {    if (';' == chars[i]) {      end=i;      break;    }  }  if (end < 0 || offset + 2 >= end) {    return ((offset + 1L) << 32) | '&';  }  char ch1=chars[offset + 1];  char ch2=chars[offset + 2];  int codepoint=-1;  if ('#' == ch1) {    if ('x' == ch2 || 'X' == ch2) {      codepoint=0;      digloop:       for (int i=offset + 3; i < end; ++i) {        char digit=chars[i];switch (digit & 0xfff8) {case 0x30:case 0x38:          int decDig=digit & 0xf;        if (decDig < 10) {          codepoint=(codepoint << 4) | decDig;        } else {          codepoint=-1;          break digloop;        }      break;case 0x40:case 0x60:    int hexDig=(digit & 0x7);  if (hexDig != 0 && hexDig < 7) {    codepoint=(codepoint << 4) | (hexDig + 9);  } else {    codepoint=-1;    break digloop;  }break;default :codepoint=-1;break digloop;}}} else {codepoint=0;digloop: for (int i=offset + 2; i < end; ++i) {char digit=chars[i];switch (digit & 0xfff8) {case 0x30:case 0x38:int decDig=digit - '0';if (decDig < 10) {codepoint=(codepoint * 10) + decDig;} else {codepoint=-1;break digloop;}break;default :codepoint=-1;break digloop;}}}} else {PunctuationTrie<Integer> t=HtmlEntities.ENTITY_TRIE;for (int i=offset + 1; i < end; ++i) {char nameChar=chars[i];t=t.lookup(nameChar);if (t == null) {break;}}if (t == null) {t=HtmlEntities.ENTITY_TRIE;for (int i=offset + 1; i < end; ++i) {char nameChar=chars[i];if ('Z' >= nameChar && nameChar >= 'A') {nameChar|=32;}t=t.lookup(nameChar);if (t == null) {break;}}}if (t != null && t.isTerminal()) {codepoint=t.getValue().intValue();}}if (codepoint < 0) {return ((offset + 1L) << 32) | '&';} else {return ((end + 1L) << 32) | codepoint;}}  }
class C{  public static void triggerSync(Context context){  Bundle settingsBundle=new Bundle();  settingsBundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);  settingsBundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);  Account account=AuthUtils.getAccount(context);  ContentResolver.requestSync(account,context.getString(R.string.stub_content_authority),settingsBundle);}  }
class C{  public TObjectDoubleHashMap(int initialCapacity,TObjectHashingStrategy<K> strategy){  super(initialCapacity,strategy);}  }
class C{  public static void checkSecurityLevel(byte msgFlags) throws SnmpBadSecurityLevelException {  int secLevel=msgFlags & SnmpDefinitions.authPriv;  if ((secLevel & SnmpDefinitions.privMask) != 0)   if ((secLevel & SnmpDefinitions.authMask) == 0) {    throw new SnmpBadSecurityLevelException("Security level:" + " noAuthPriv!!!");  }}  }
class C{  public void sendRtpPacket(Buffer buffer) throws IOException {  RtpPacket packet=buildRtpPacket(buffer);  if (packet == null) {    return;  }  int size=packet.calcLength();  packet.assemble(size);  transmit(packet);}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_StateA:    return stateVector[0] == State.main_region_StateA;case main_region_StateB:  return stateVector[0].ordinal() >= State.main_region_StateB.ordinal() && stateVector[0].ordinal() <= State.main_region_StateB_r1_StateB.ordinal();case main_region_StateB_r1_StateA:return stateVector[0] == State.main_region_StateB_r1_StateA;case main_region_StateB_r1_StateB:return stateVector[0] == State.main_region_StateB_r1_StateB;default :return false;}}  }
class C{  public Object remove(Object key){  processQueue();  return ValueCell.strip(hash.remove(key),true);}  }
class C{  public BinarySearchST(int capacity){  keys=(Key[])new Comparable[capacity];  vals=(Value[])new Object[capacity];}  }
class C{  public static BinaryMetadata mergeMetadata(@Nullable BinaryMetadata oldMeta,BinaryMetadata newMeta){  assert newMeta != null;  if (oldMeta == null)   return newMeta; else {    assert oldMeta.typeId() == newMeta.typeId();    if (!F.eq(oldMeta.typeName(),newMeta.typeName())) {      throw new BinaryObjectException("Two binary types have duplicate type ID [" + "typeId=" + oldMeta.typeId() + ", typeName1="+ oldMeta.typeName()+ ", typeName2="+ newMeta.typeName()+ ']');    }    if (!F.eq(oldMeta.affinityKeyFieldName(),newMeta.affinityKeyFieldName())) {      throw new BinaryObjectException("Binary type has different affinity key fields [" + "typeName=" + newMeta.typeName() + ", affKeyFieldName1="+ oldMeta.affinityKeyFieldName()+ ", affKeyFieldName2="+ newMeta.affinityKeyFieldName()+ ']');    }    if (oldMeta.isEnum() != newMeta.isEnum()) {      if (oldMeta.isEnum())       throw new BinaryObjectException("Binary type already registered as enum: " + newMeta.typeName()); else       throw new BinaryObjectException("Binary type already registered as non-enum: " + newMeta.typeName());    }    boolean changed=false;    Map<String,Integer> mergedFields=new HashMap<>(oldMeta.fieldsMap());    Map<String,Integer> newFields=newMeta.fieldsMap();    for (    Map.Entry<String,Integer> newField : newFields.entrySet()) {      Integer oldFieldType=mergedFields.put(newField.getKey(),newField.getValue());      if (oldFieldType == null)       changed=true; else {        String oldFieldTypeName=fieldTypeName(oldFieldType);        String newFieldTypeName=fieldTypeName(newField.getValue());        if (!F.eq(oldFieldTypeName,newFieldTypeName)) {          throw new BinaryObjectException("Binary type has different field types [" + "typeName=" + oldMeta.typeName() + ", fieldName="+ newField.getKey()+ ", fieldTypeName1="+ oldFieldTypeName+ ", fieldTypeName2="+ newFieldTypeName+ ']');        }      }    }    Collection<BinarySchema> mergedSchemas=new HashSet<>(oldMeta.schemas());    for (    BinarySchema newSchema : newMeta.schemas()) {      if (mergedSchemas.add(newSchema))       changed=true;    }    return changed ? new BinaryMetadata(oldMeta.typeId(),oldMeta.typeName(),mergedFields,oldMeta.affinityKeyFieldName(),mergedSchemas,oldMeta.isEnum()) : oldMeta;  }}  }
class C{  public SQLSyntaxErrorException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public EOFException(java.lang.String s){}  }
class C{  public SelectOneManyEnumITCase(String name){  super(name);}  }
class C{  public final boolean containsIgnoreCase(String s){  if (null == s)   return false;  for (int i=0; i < m_firstFree; i++) {    if (m_map[i].equalsIgnoreCase(s))     return true;  }  return false;}  }
class C{  protected final void ATTEMPT_LONG_IFCMP(MemoryOperand mo,Operand oldValue,Operand newValue,ConditionOperand cond,BranchOperand target,BranchProfileOperand bp){  if (VM.VerifyAssertions)   opt_assert(VM.BuildFor64Addr,"Expansion of ifcmp of attempt_long NYI for 32-bit addressing!");  RegisterOperand temp=regpool.makeTempLong();  EMIT(MIR_Move.create(IA32_MOV,temp,newValue.copy()));  EMIT(MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Long),oldValue.copy()));  EMIT(MIR_CompareExchange.create(IA32_LOCK_CMPXCHG,new RegisterOperand(getEAX(),TypeReference.Long),mo,temp.copyRO()));  EMIT(MIR_CondBranch.create(IA32_JCC,COND(cond),target.copy().asBranch(),(BranchProfileOperand)bp.copy()));}  }
class C{  public void prepareSecretKeyGeneration(SecretKeyType secretKeyType){  try {    keyGen=KeyGenerator.getInstance(secretKeyType.jce());  } catch (  NoSuchAlgorithmException e) {    LOG.error("Error preparing Secret Key generator",e);  }}  }
class C{  public NSObject objectAtIndex(int i){  return array[i];}  }
class C{  public int numberOfFiles(){  return numberOfFiles;}  }
class C{  public String doNotMakeSplitPointActualValueTipText(){  return "If true, the split point is not relocated to an actual data value." + " This can yield substantial speed-ups for large datasets with numeric attributes.";}  }
class C{  public void manageChildren(int viewTag,@Nullable ReadableArray moveFrom,@Nullable ReadableArray moveTo,@Nullable ReadableArray addChildTags,@Nullable ReadableArray addAtIndices,@Nullable ReadableArray removeFrom){  ReactShadowNode cssNodeToManage=mShadowNodeRegistry.getNode(viewTag);  int numToMove=moveFrom == null ? 0 : moveFrom.size();  int numToAdd=addChildTags == null ? 0 : addChildTags.size();  int numToRemove=removeFrom == null ? 0 : removeFrom.size();  if (numToMove != 0 && (moveTo == null || numToMove != moveTo.size())) {    throw new IllegalViewOperationException("Size of moveFrom != size of moveTo!");  }  if (numToAdd != 0 && (addAtIndices == null || numToAdd != addAtIndices.size())) {    throw new IllegalViewOperationException("Size of addChildTags != size of addAtIndices!");  }  ViewAtIndex[] viewsToAdd=new ViewAtIndex[numToMove + numToAdd];  int[] indicesToRemove=new int[numToMove + numToRemove];  int[] tagsToRemove=new int[indicesToRemove.length];  int[] tagsToDelete=new int[numToRemove];  if (numToMove > 0) {    Assertions.assertNotNull(moveFrom);    Assertions.assertNotNull(moveTo);    for (int i=0; i < numToMove; i++) {      int moveFromIndex=moveFrom.getInt(i);      int tagToMove=cssNodeToManage.getChildAt(moveFromIndex).getReactTag();      viewsToAdd[i]=new ViewAtIndex(tagToMove,moveTo.getInt(i));      indicesToRemove[i]=moveFromIndex;      tagsToRemove[i]=tagToMove;    }  }  if (numToAdd > 0) {    Assertions.assertNotNull(addChildTags);    Assertions.assertNotNull(addAtIndices);    for (int i=0; i < numToAdd; i++) {      int viewTagToAdd=addChildTags.getInt(i);      int indexToAddAt=addAtIndices.getInt(i);      viewsToAdd[numToMove + i]=new ViewAtIndex(viewTagToAdd,indexToAddAt);    }  }  if (numToRemove > 0) {    Assertions.assertNotNull(removeFrom);    for (int i=0; i < numToRemove; i++) {      int indexToRemove=removeFrom.getInt(i);      int tagToRemove=cssNodeToManage.getChildAt(indexToRemove).getReactTag();      indicesToRemove[numToMove + i]=indexToRemove;      tagsToRemove[numToMove + i]=tagToRemove;      tagsToDelete[i]=tagToRemove;    }  }  Arrays.sort(viewsToAdd,ViewAtIndex.COMPARATOR);  Arrays.sort(indicesToRemove);  int lastIndexRemoved=-1;  for (int i=indicesToRemove.length - 1; i >= 0; i--) {    int indexToRemove=indicesToRemove[i];    if (indexToRemove == lastIndexRemoved) {      throw new IllegalViewOperationException("Repeated indices in Removal list for view tag: " + viewTag);    }    cssNodeToManage.removeChildAt(indicesToRemove[i]);    lastIndexRemoved=indicesToRemove[i];  }  for (int i=0; i < viewsToAdd.length; i++) {    ViewAtIndex viewAtIndex=viewsToAdd[i];    ReactShadowNode cssNodeToAdd=mShadowNodeRegistry.getNode(viewAtIndex.mTag);    if (cssNodeToAdd == null) {      throw new IllegalViewOperationException("Trying to add unknown view tag: " + viewAtIndex.mTag);    }    cssNodeToManage.addChildAt(cssNodeToAdd,viewAtIndex.mIndex);  }  if (!cssNodeToManage.isVirtual() && !cssNodeToManage.isVirtualAnchor()) {    mNativeViewHierarchyOptimizer.handleManageChildren(cssNodeToManage,indicesToRemove,tagsToRemove,viewsToAdd,tagsToDelete);  }  for (int i=0; i < tagsToDelete.length; i++) {    removeShadowNode(mShadowNodeRegistry.getNode(tagsToDelete[i]));  }}  }
class C{  protected CatchVariableImpl(){  super();}  }
class C{  protected String computeAlternateCloseQuote(String openQuote){  return openQuote;}  }
class C{  public boolean isGenerator(){  return generator;}  }
class C{  public HessianSerializerInput(){  super(null);}  }
class C{  protected void forwardCommandChangeToLayout(int s){  CanMessage m;  if (s == Turnout.THROWN) {    m=addrThrown.makeMessage(tc.getCanid());    tc.sendCanMessage(m,this);  } else   if (s == Turnout.CLOSED) {    m=addrClosed.makeMessage(tc.getCanid());    tc.sendCanMessage(m,this);  }}  }
class C{  public DecoderResult decode(boolean[][] image,Map<DecodeHintType,?> hints) throws ChecksumException, FormatException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits,hints);}  }
class C{  public Section createNewSection(String systemName,String userName){  if ((systemName == null) || (systemName.length() < 1)) {    return null;  }  String sysName=systemName;  if ((sysName.length() < 2) || (!sysName.substring(0,2).equals("IY"))) {    sysName="IY" + sysName;  }  Section y;  if (userName != null && !userName.equals("")) {    y=getByUserName(userName);    if (y != null) {      return null;    }  }  String sName=sysName.toUpperCase().trim();  y=getBySystemName(sysName);  if (y == null) {    y=getBySystemName(sName);  }  if (y != null) {    return null;  }  y=new Section(sName,userName);  register(y);  if (systemName.startsWith("IY:AUTO:")) {    try {      int autoNumber=Integer.parseInt(systemName.substring(8));      if (autoNumber > lastAutoSectionRef) {        lastAutoSectionRef=autoNumber;      }    } catch (    NumberFormatException e) {      log.warn("Auto generated SystemName " + systemName + " is not in the correct format");    }  }  return y;}  }
class C{  public static boolean verify(byte[] hash,byte[] signature,byte[] pub){  ASN1InputStream asn1=new ASN1InputStream(signature);  try {    ECDSASigner signer=new ECDSASigner();    signer.init(false,new ECPublicKeyParameters(curve.getCurve().decodePoint(pub),domain));    DLSequence seq=(DLSequence)asn1.readObject();    BigInteger r=((ASN1Integer)seq.getObjectAt(0)).getPositiveValue();    BigInteger s=((ASN1Integer)seq.getObjectAt(1)).getPositiveValue();    return signer.verifySignature(hash,r,s);  } catch (  Exception e) {    return false;  } finally {    try {      asn1.close();    } catch (    IOException e) {    }  }}  }
class C{  private void ensureRawAvailable(int size){  if (rawCount + size > rawData.length) {    int used=rawCount - rawPos;    if (used + size > rawData.length) {      byte tmp[]=new byte[used + size];      if (used > 0) {        System.arraycopy(rawData,rawPos,tmp,0,used);      }      rawData=tmp;    } else {      if (used > 0) {        System.arraycopy(rawData,rawPos,rawData,0,used);      }    }    rawCount=used;    rawPos=0;  }}  }
class C{  private void initThreadPool(){  fillUpThreadPool(initialThreadPoolSize);}  }
class C{  public void elementActivated(TimedElement e,float t){}  }
class C{  protected Trigger(){  super(null);}  }
class C{  public void java_lang_Object_getClass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  private void editSubscriptions(){  String packageName=getPackageName();  Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse("market://details?id=" + packageName));  startActivity(i);}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(trType));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  temp=new DerOutputStream();  temp.putOctetString(contents);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  @Override public void drawEmbeddedText(final float[][] Trm,final int fontSize,final PdfGlyph embeddedGlyph,final Object javaGlyph,final int type,final GraphicsState gs,final double[] textScaling,final String glyf,final PdfFont currentFontData,final float glyfWidth){  if (type == DynamicVectorRenderer.TYPE3) {    return;  }  if (embeddedGlyph == null && javaGlyph == null) {    final Text t=new Text(glyf);    final Font f=Font.font(currentFontData.getGlyphData().font_family_name,fontSize);    t.setFont(f);    setFXParams(t,GraphicsState.FILL,gs,textColor != null);    if ((gs.getTextRenderType() & GraphicsState.STROKE) == GraphicsState.STROKE) {      setFXParams(t,GraphicsState.STROKE,gs,textColor != null);    }    setBlendMode(gs,t);    if (type != DynamicVectorRenderer.TRUETYPE) {      final double r=1d / fontSize;      t.getTransforms().add(Transform.affine(textScaling[0] * r,textScaling[1] * r,textScaling[2] * r,textScaling[3] * r,Trm[2][0],Trm[2][1]));    } else {      final double r=1d / fontSize;      t.getTransforms().setAll(Transform.affine(Trm[0][0] * r,Trm[0][1] * r,Trm[1][0] * r,Trm[1][1] * r,Trm[2][0],Trm[2][1]));    }    final float[] transform={Trm[0][0],Trm[1][0],Trm[0][1],Trm[1][1],Trm[2][0],Trm[2][1]};    final Shape clip=gs.getFXClippingShape();    if (clip != null && !clip.contains(Trm[2][0],Trm[2][1])) {      setClip(gs,transform,t);    }    pageObjects.addElement(t);    addToScene(t);  } else {    final Path path=(Path)embeddedGlyph.getPath();    if (path == null) {      if (LogWriter.isRunningFromIDE) {        System.out.println("Null FX path in " + embeddedGlyph);      }      return;    }    path.setFillRule(FillRule.EVEN_ODD);    if (type != DynamicVectorRenderer.TRUETYPE) {      path.getTransforms().setAll(Transform.affine(textScaling[0],textScaling[1],textScaling[2],textScaling[3],textScaling[4],textScaling[5]));    } else {      final double r=1d / 100d;      if (!TTGlyph.useHinting) {        path.getTransforms().setAll(Transform.affine(textScaling[0],textScaling[1],textScaling[2],textScaling[3],textScaling[4],textScaling[5]));      } else {        path.getTransforms().setAll(Transform.affine(textScaling[0] * r,textScaling[1] * r,textScaling[2] * r,textScaling[3] * r,textScaling[4],textScaling[5]));      }    }    setFXParams(path,gs.getTextRenderType(),gs,textColor != null);    setBlendMode(gs,path);    final float[] transform={Trm[0][0],Trm[1][0],Trm[0][1],Trm[1][1],Trm[2][0],Trm[2][1]};    final Shape clip=gs.getFXClippingShape();    if (clip != null && !clip.contains(Trm[2][0],Trm[2][1])) {      setClip(gs,transform,path);    }    pageObjects.addElement(path);    addToScene(path);  }  objectType.addElement(type);  if (type < 0) {    areas.addElement(null);  } else {    if (javaGlyph != null) {      final int[] rectParams={(int)(Trm[2][0]),(int)Trm[2][1],fontSize,fontSize};      areas.addElement(rectParams);    } else {      int realSize=fontSize;      if (realSize < 0) {        realSize=-realSize;      }      final int[] area={(int)(Trm[2][0]),(int)Trm[2][1],realSize,realSize};      areas.addElement(area);    }  }  currentItem++;}  }
class C{  public static Object evaluateTimePeriod(String objectName,MatchedEventMap beginState,ExprTimePeriod timePeriod,MatchedEventConvertor convertor,ExprEvaluatorContext exprEvaluatorContext) throws EPException {  EventBean[] eventsPerStream=convertor.convert(beginState);  try {    return timePeriod.evaluateGetTimePeriod(eventsPerStream,true,exprEvaluatorContext);  } catch (  RuntimeException ex) {    throw handleRuntimeEx(ex,objectName);  }}  }
class C{  @Deprecated public VSDecoder(String id,String name){  config=new VSDConfig();  config.setProfileName(name);  config.setID(id);  sound_list=new HashMap<String,VSDSound>();  trigger_list=new HashMap<String,Trigger>();  event_list=new HashMap<String,SoundEvent>();  initialized=_init();}  }
class C{  public AjaxBehaviorEvent(FacesContext facesContext,UIComponent component,Behavior behavior){  super(facesContext,component,behavior);}  }
class C{  public void sendLogout() throws IOException {  prepare(txMessage,Logout);  send(txMessage);}  }
class C{  private MapNode createOrUpdateNode(Coord c,MapNode previous){  MapNode n=null;  n=nodes.get(c);  if (n == null) {    n=new MapNode(c);    nodes.put(c,n);  }  if (previous != null) {    n.addNeighbor(previous);    if (bidirectionalPaths) {      previous.addNeighbor(n);    }  }  if (nodeType != -1) {    n.addType(nodeType);  }  return n;}  }
class C{  public void updateStyleElement(Document document,Element style){  StringBuilder buf=new StringBuilder();  serialize(buf);  Text cont=document.createTextNode(buf.toString());  while (style.hasChildNodes()) {    style.removeChild(style.getFirstChild());  }  style.appendChild(cont);}  }
class C{  public void testCapitalization12() throws Exception {  Reader reader=new StringReader("1st 2nd third");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Capitalization","keep","and the it BIG","onlyFirstWord","false","minWordLength","3","okPrefix","McK","forceFirstLetter","false").create(stream);  assertTokenStreamContents(stream,new String[]{"1st","2nd","Third"});}  }
class C{  public boolean isReliable(){  return true;}  }
class C{  private List<String> generateSubscriptionPriceModelData(List<SubscriptionPriceModelTableEntry> tableEntries){  List<String> priceModelData=new ArrayList<String>();  if (tableEntries.size() == 0) {    return priceModelData;  }  String pmUuid="";  for (  SubscriptionPriceModelTableEntry entry : tableEntries) {    String uuid=entry.getPriceModelUUID();    if (pmUuid.isEmpty() && !uuid.isEmpty()) {      pmUuid=uuid;      priceModelData.add(pmUuid);    }    String locale=entry.getLocale();    String fileType=entry.getFileType();    String fileName=entry.getFileName();    if (!uuid.isEmpty() && uuid.equals(pmUuid) && !locale.isEmpty()&& !fileType.isEmpty()&& !fileName.isEmpty()) {      priceModelData.add(locale);      priceModelData.add(fileType);      priceModelData.add(fileName);      priceModelData.add("");    }  }  return priceModelData;}  }
class C{  public static void formatTooltips(Container container){  for (int i=0; i < container.getComponentCount(); i++) {    Component component=container.getComponent(i);    if (component instanceof JComponent)     formatTooltip((JComponent)component);    if (component instanceof Container)     formatTooltips((Container)component);  }}  }
class C{  public static boolean hasSuperProperty(Property subProperty,Property superProperty){  return getAllSuperProperties(subProperty).contains(superProperty);}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] enclosingRectangle=image.getEnclosingRectangle();  if (enclosingRectangle == null) {    throw NotFoundException.getNotFoundInstance();  }  int left=enclosingRectangle[0];  int top=enclosingRectangle[1];  int width=enclosingRectangle[2];  int height=enclosingRectangle[3];  BitMatrix bits=new BitMatrix(MATRIX_WIDTH,MATRIX_HEIGHT);  for (int y=0; y < MATRIX_HEIGHT; y++) {    int iy=top + (y * height + height / 2) / MATRIX_HEIGHT;    for (int x=0; x < MATRIX_WIDTH; x++) {      int ix=left + (x * width + width / 2 + (y & 0x01) * width / 2) / MATRIX_WIDTH;      if (image.get(ix,iy)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public static long timeTasks(int nThreads,Runnable task) throws InterruptedException {  return timeTasks(nThreads,task,"Thread");}  }
class C{  public static long decode(BinaryVariable binary){  int numberOfBits=binary.getNumberOfBits();  if ((numberOfBits < 1) || (numberOfBits > 63)) {    throw new IllegalArgumentException(INVALID_BITS);  }  long value=0;  for (int i=0; i < numberOfBits; i++) {    if (binary.get(i)) {      value|=(1L << i);    }  }  return value;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textsplittexttwo.class,args);}  }
class C{  public static String[] toArrayElement(String s){  return (s == null || s.length() == 0) ? new String[0] : new String[]{s};}  }
class C{  public Shipping(String country,Collection<String> regions,String service,float price,String currency){  this.country=country;  if (regions != null) {    this.regions=ImmutableList.copyOf(regions);  } else {    this.regions=Collections.emptySet();  }  this.price=price;  this.service=service;  this.currency=currency;}  }
class C{  long totalLength(){  return mTotalLength;}  }
class C{  private Function createCreateCopyFromInit(Function meth,TaggedTypeRef instanceStruct){  String name=meth.getName().toString();  if (!name.matches("^init([A-Z].*|)$")) {    return null;  }  Function createCopy=meth.clone();  createCopy.setCommentBefore("Factory method");  createCopy.addToCommentBefore("@see #" + meth.computeSignature(SignatureType.JavaStyle));  createCopy.setName(ident("create" + name.substring("init".length())));  createCopy.addModifiers(ModifierType.Public,ModifierType.Static);  createCopy.reorganizeModifiers();  Expression[] args=new Expression[meth.getArgs().size()];  int i=0;  for (  Arg arg : meth.getArgs()) {    args[i++]=varRef(arg.getName());  }  Expression val=methodCall(methodCall(methodCall(null,null,classInstanceGetterName),Expression.MemberRefStyle.Dot,"alloc"),Expression.MemberRefStyle.Dot,meth.getName().toString(),args);  if (AUTO_RELEASE_IN_FACTORIES) {    val=methodCall(val,MemberRefStyle.Dot,"autorelease");    val=methodCall(expr(typeRef(Rococoa.class)),MemberRefStyle.Dot,"cast",val,memberRef(expr(typeRef(instanceStruct.getTag())),MemberRefStyle.Dot,"class"));  }  createCopy.setBody(new Block(new Statement.Return(val)));  return createCopy;}  }
class C{  private boolean isFileSizeExceeded(long size){  try {    long maxSize=mFileTransferService.getConfiguration().getMaxSize();    return (maxSize > 0 && size > maxSize);  } catch (  RcsServiceException e) {    showException(e);    return false;  }}  }
class C{  public static <T extends ViewDataBinding>DataBoundViewHolder<T> create(ViewGroup parent,@LayoutRes int layoutId){  T binding=DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()),layoutId,parent,false);  return new DataBoundViewHolder<>(binding);}  }
class C{  protected int next(int bits){  return 0;}  }
class C{  public void addInterfacesToImplement(Set<DeclaredTypeName> interfaces){}  }
class C{  public ElisionFilterFactory(Map<String,String> args){  super(args);  articlesFile=get(args,"articles");  ignoreCase=getBoolean(args,"ignoreCase",false);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void start(){  oplet.start();}  }
class C{  private static Point2D.Float parsePoint(final String text){  final int i=text.indexOf(',');  final int j=text.indexOf(',',i + 1);  return new Point2D.Float(Float.parseFloat(text.substring(0,i)),Float.parseFloat(text.substring(i + 1,j)));}  }
class C{  public static void reloadInstance(){  dispose();  initiateInstance();}  }
class C{  private void verifyImagePresentOnImageServer(ComputeSystem cs,ComputeImage img) throws APIException {  URI imageServerURI=cs.getComputeImageServer();  _log.info("Verify if selected image {} exists on imageServer {}",img.getLabel(),imageServerURI);  if (NullColumnValueGetter.isNullURI(imageServerURI)) {    _log.info("Compute system {} does not have an image server associated with it. Cannot proceed with OS install.",img.getLabel());    throw APIException.badRequests.noImageServerAssociatedToComputeSystem(cs.getLabel());  } else {    ComputeImageServer imageServer=queryObject(ComputeImageServer.class,imageServerURI,true);    StringSet computeImagesSet=imageServer.getComputeImages();    if (computeImagesSet == null || !computeImagesSet.contains(img.getId().toString())) {      _log.info("Selected image {} does not exist on imageServer {}",img.getLabel(),imageServer.getLabel());      throw APIException.badRequests.imageNotPresentOnComputeImageServer(img.getLabel(),imageServer.getLabel());    }    _log.info("Selected image {} exists on imageServer {}",img.getLabel(),imageServer.getLabel());  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.047 -0500",hash_original_method="392D71CF093044293F2B368B3C851863",hash_generated_method="37315607D83E4BDAF9961621E8257316") public static UnicodeBlock of(char c){  return of((int)c);}  }
class C{  public void reserve(){  if (this.capacity - this.length < JSONzip.substringLimit) {    int from=0;    int to=0;    this.root=new Node();    while (from < this.capacity) {      if (this.uses[from] > 1) {        Kim kim=this.kims[from];        int thru=this.thrus[from];        Node node=this.root;        for (int at=this.froms[from]; at < thru; at+=1) {          Node next=node.vet(kim.get(at));          node=next;        }        node.integer=to;        this.uses[to]=age(this.uses[from]);        this.froms[to]=this.froms[from];        this.thrus[to]=thru;        this.kims[to]=kim;        to+=1;      }      from+=1;    }    if (this.capacity - to < JSONzip.substringLimit) {      this.power=0;      this.root=new Node();      to=0;    }    this.length=to;    while (to < this.capacity) {      this.uses[to]=0;      this.kims[to]=null;      this.froms[to]=0;      this.thrus[to]=0;      to+=1;    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Float(Ministry.getInstance().getJobPercentComplete(getInt(stack)));}  }
class C{  public T caseReturnObjectType(ReturnObjectType object){  return null;}  }
class C{  public EPDataFlowInstantiationOptions dataFlowInstanceId(String dataFlowInstanceId){  this.dataFlowInstanceId=dataFlowInstanceId;  return this;}  }
class C{  private synchronized void changeOfAddress(){  if (addrSelector.getAddress() != null) {    profileAddress=addrSelector.getAddress().getNumber();    profileIsLong=addrSelector.getAddress().isLongAddress();    setTitle();  } else {    profileAddress=0;    profileIsLong=true;  }}  }
class C{  private ModelMap queryParamsToModelAttr(HttpServletRequest request,ModelMap model){  Map params=request.getParameterMap();  Iterator paramIterator=params.entrySet().iterator();  while (paramIterator.hasNext()) {    Entry param=(Entry)paramIterator.next();    String key=(String)param.getKey();    String[] value=(String[])param.getValue();    model.addAttribute(key,value[0]);  }  return model;}  }
class C{  public static String dumpRequest(final HttpServletRequest request){  final StringBuilder stringBuilder=new StringBuilder();  if (request == null) {    stringBuilder.append("#dumpRequest request is null");  } else {    dumpParamsAndAttrs(request,stringBuilder);    dumpHeaders(request,stringBuilder);    dumpCookies(request,stringBuilder);  }  return stringBuilder.toString();}  }
class C{  public boolean isTextList(){  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputTextFile=null;  String inputRasterFiles=null;  String outputTextFile=null;  boolean interpolateValues=false;  boolean includeStatistics=false;  String[] gatHeaderFile;  List<WhiteboxRaster> gatGrids=new ArrayList<>();  String fileName;  int numberOfLines=0;  int counter;  String tempLine;  String[] line;  int id;  double xCoord;  double yCoord;  String name;  int xGridcell;  int yGridcell;  double deltaX;  double deltaY;  int dXi;  int dYi;  double average;  double w;  double[] ww=new double[4];  double value;  int[] xd=new int[]{0,-1,-1,-1,0,1,1,1};  int[] yd=new int[]{-1,-1,0,1,1,1,0,-1};  double min;  double max;  double sum;  int sumCount;  double mean=0;  double neighbourValue;  FileWriter streamWriter=null;  String outputLine;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputTextFile=args[i];    } else     if (i == 1) {      inputRasterFiles=args[i];    } else     if (i == 2) {      outputTextFile=args[i];    } else     if (i == 3) {      interpolateValues=Boolean.parseBoolean(args[i]);    } else     if (i == 4) {      includeStatistics=Boolean.parseBoolean(args[i]);    }  }  if ((inputTextFile == null) || (inputRasterFiles == null) || (outputTextFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    gatHeaderFile=inputRasterFiles.split(";");    for (int i=0; i <= gatHeaderFile.length - 1; i++) {      WhiteboxRaster gatGrid=new WhiteboxRaster(gatHeaderFile[i],"r");      gatGrids.add(gatGrid);    }    BufferedReader bufferedReader=new BufferedReader(new FileReader(inputTextFile));    streamWriter=new FileWriter(outputTextFile,false);    outputLine="ID" + "\t" + "X"+ "\t"+ "Y";    for (    WhiteboxRaster gatGrid : gatGrids) {      fileName=gatGrid.getShortHeaderFile();      outputLine=outputLine + "\t" + fileName;      if (includeStatistics) {        outputLine=outputLine + "\t" + fileName+ "_min"+ "\t"+ fileName+ "_max"+ "\t"+ fileName+ "_mean";      }    }    outputLine=outputLine + "\t" + "Name";    streamWriter.write(outputLine + System.lineSeparator());    while ((tempLine=bufferedReader.readLine()) != null) {      numberOfLines=numberOfLines + 1;    }    bufferedReader.close();    bufferedReader=new BufferedReader(new FileReader(inputTextFile));    tempLine=bufferedReader.readLine();    counter=1;    while ((tempLine=bufferedReader.readLine()) != null) {      line=tempLine.split("\t");      counter=counter + 1;      if ((line.length != 3) && (line.length != 4)) {        JOptionPane.showMessageDialog(null,"Error in input file. Line " + counter + " contains an unexpected number of elements.");        return;      }      if (!IsInteger(line[0]) || !IsDouble(line[1]) || !IsDouble(line[2])) {        JOptionPane.showMessageDialog(null,"Error in input file. Line " + counter + " contains a value of an expected type.");        return;      }      id=Integer.parseInt(line[0]);      xCoord=Double.parseDouble(line[1]);      yCoord=Double.parseDouble(line[2]);      if (line.length == 4) {        name=line[3];      } else {        name="";      }      outputLine=id + "\t" + xCoord+ "\t"+ yCoord;      for (      WhiteboxRaster gatGrid : gatGrids) {        gridRes=gatGrid.getCellSizeX();        xGridcell=(int)((xCoord - gatGrid.getWest()) / gridRes);        yGridcell=(int)((yCoord - gatGrid.getSouth()) / gridRes);        deltaX=xCoord - ((xGridcell + 0.5) * gridRes + gatGrid.getWest());        deltaY=yCoord - ((yGridcell + 0.5) * gridRes + gatGrid.getSouth());        yGridcell=InvertYCoord(gatGrid,yGridcell);        if (deltaX > 0) {          dXi=1;        } else {          dXi=-1;        }        if (deltaY > 0) {          dYi=-1;        } else {          dYi=1;        }        deltaX=Math.abs(deltaX);        deltaY=Math.abs(deltaY);        if (interpolateValues) {          if ((gatGrid.getValue(yGridcell,xGridcell) == gatGrid.getNoDataValue()) || (gatGrid.getValue(yGridcell + dYi,xGridcell) == gatGrid.getNoDataValue()) || (gatGrid.getValue(yGridcell,xGridcell + dXi) == gatGrid.getNoDataValue())|| (gatGrid.getValue(yGridcell + dYi,xGridcell + dXi) == gatGrid.getNoDataValue())) {            value=gatGrid.getNoDataValue();          } else           if (deltaX == 0 && deltaY == 0) {            value=gatGrid.getValue(yGridcell,xGridcell);          } else {            ww[0]=1 / Math.sqrt(Math.pow(deltaX,2) + Math.pow(deltaY,2));            average=gatGrid.getValue(yGridcell,xGridcell) * ww[0];            w=ww[0];            ww[1]=1 / Math.sqrt(Math.pow(deltaX,2) + Math.pow(gridRes - deltaY,2));            average=average + gatGrid.getValue(yGridcell + dYi,xGridcell) * ww[1];            w=w + ww[1];            ww[2]=1 / Math.sqrt(Math.pow(gridRes - deltaX,2) + Math.pow(deltaY,2));            average=average + gatGrid.getValue(yGridcell,xGridcell + dXi) * ww[2];            w=w + ww[2];            ww[3]=1 / Math.sqrt(Math.pow(gridRes - deltaX,2) + Math.pow(gridRes - deltaY,2));            average=average + gatGrid.getValue(yGridcell + dYi,xGridcell + dXi) * ww[3];            w=w + ww[3];            value=average / w;          }        } else {          value=gatGrid.getValue(yGridcell,xGridcell);        }        outputLine=outputLine + "\t" + value;        if (includeStatistics) {          value=gatGrid.getValue(yGridcell,xGridcell);          if (value == gatGrid.getNoDataValue()) {            min=Double.MAX_VALUE;            max=Double.MIN_VALUE;            sum=0;            sumCount=0;            mean=gatGrid.getNoDataValue();          } else {            min=value;            max=value;            sum=value;            sumCount=1;          }          for (int c=0; c < 8; c++) {            neighbourValue=gatGrid.getValue(yGridcell + yd[c],xGridcell + xd[c]);            if (neighbourValue != gatGrid.getNoDataValue()) {              if (neighbourValue < min) {                min=neighbourValue;              }              if (neighbourValue > max) {                max=neighbourValue;              }              sum=sum + neighbourValue;              sumCount=sumCount + 1;            }          }          if (sumCount == 0) {            min=gatGrid.getNoDataValue();            max=gatGrid.getNoDataValue();          } else {            mean=sum / sumCount;          }          outputLine=outputLine + "\t" + min+ "\t"+ max+ "\t"+ mean;        }      }      if (name != "") {        outputLine=outputLine + "\t" + name;      }      streamWriter.write(outputLine + System.lineSeparator());      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * counter / numberOfLines);      updateProgress("",(int)progress);    }    for (    WhiteboxRaster gatGrid : gatGrids) {      gatGrid.close();    }    streamWriter.close();  } catch (  IOException|HeadlessException|NumberFormatException e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Element addElementToRegistry(String value){  if (value == null)   return (this);  addElementToRegistry(new StringElement(value));  return (this);}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){switch (requestCode) {case REQUEST_STORAGE_WRITE_ACCESS_PERMISSION:    if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {      saveCroppedImage();    }  break;default :super.onRequestPermissionsResult(requestCode,permissions,grantResults);}}  }
class C{  public ProjectPrivilegeObject(ProjectPrivilegeObject parent){  this.id=parent.getId();  this.userId=parent.getUserId();  this.projectId=parent.getProjectId();  this.isAdmin=parent.getIsAdmin();}  }
class C{  public SText(LLPoint ll1,short x1,short y1,String data,java.awt.Font font,short justify){  super(GraphicType.GT_Text,RenderType.RT_Offset,LineType.LT_Unknown,DeclutterType.DC_None);  ll1_=ll1;  p1_=new XYPoint(x1,y1);  data_=data;  realFont_=font;  justify_=justify;}  }
class C{  public static org.oscm.vo.VOOrganizationPaymentConfiguration convertToApi(org.oscm.internal.vo.VOOrganizationPaymentConfiguration oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOOrganizationPaymentConfiguration newVO=new org.oscm.vo.VOOrganizationPaymentConfiguration();  newVO.setOrganization(convertToApi(oldVO.getOrganization()));  newVO.setEnabledPaymentTypes(convertToApiVOPaymentType(oldVO.getEnabledPaymentTypes()));  return newVO;}  }
class C{  protected int calcOffsetToNextView(int direction){  int spanCount=getSpanCount();  int orientation=getOrientation();  if (orientation == VERTICAL) {switch (direction) {case View.FOCUS_DOWN:      return spanCount;case View.FOCUS_UP:    return -spanCount;case View.FOCUS_RIGHT:  return 1;case View.FOCUS_LEFT:return -1;}} else if (orientation == HORIZONTAL) {switch (direction) {case View.FOCUS_DOWN:return 1;case View.FOCUS_UP:return -1;case View.FOCUS_RIGHT:return spanCount;case View.FOCUS_LEFT:return -spanCount;}}return 0;}  }
class C{  @Provides @Config("rdeGhostrydeBufferSize") public static Integer provideRdeGhostrydeBufferSize(){  return 64 * 1024;}  }
class C{  public static boolean isConditionalJump(final ReilInstruction instruction){  Preconditions.checkNotNull(instruction,"Argument instruction can't be null.");  return instruction.getMnemonic().equals(OPCODE_JCC) && (instruction.getFirstOperand().getType() == OperandType.REGISTER);}  }
class C{  public boolean isPrinted(){  return _printed;}  }
class C{  private void createAndAttachMenus(){  menuBar=new JMenuBar();  menuBar.add(createFileMenu());  menuBar.add(networkPanel.createEditMenu());  menuBar.add(networkPanel.createInsertMenu());  menuBar.add(networkPanel.createViewMenu());  menuBar.add(NetworkScriptMenu.getNetworkScriptMenu(this.getNetworkPanel()));  menuBar.add(networkPanel.createHelpMenu());  getParentFrame().setJMenuBar(menuBar);}  }
class C{  public MonetaryFormat shift(int shift){  if (shift == this.shift)   return this; else   return new MonetaryFormat(negativeSign,positiveSign,zeroDigit,decimalMark,minDecimals,decimalGroups,shift,roundingMode,codes,codeSeparator,codePrefixed);}  }
class C{  private void disposeDecoder(IoSession session){  ProtocolDecoder decoder=(ProtocolDecoder)session.removeAttribute(DECODER);  if (decoder == null) {    return;  }  try {    decoder.dispose(session);  } catch (  Exception e) {    LOGGER.warn("Failed to dispose: " + decoder.getClass().getName() + " ("+ decoder+ ')');  }}  }
class C{  public void testVerifyJBossHomeWhenMissingDirectory() throws Exception {  this.fsManager.resolveFile("ram:///jboss/bin/run.jar").createFile();  this.fsManager.resolveFile("ram:///jboss/bin/shutdown.jar").createFile();  this.fsManager.resolveFile("ram:///jboss/lib/something").createFile();  this.fsManager.resolveFile("ram:///jboss/lib/endorsed/something").createFile();  this.fsManager.resolveFile("ram:///jboss/server/something").createFile();  try {    this.container.verifyJBossHome();    fail("Should have thrown an exception here");  } catch (  ContainerException expected) {    assertEquals("Invalid JBoss installation. The [ram:///jboss/client] directory doesn't " + "exist. Make sure the JBoss container home directory you have specified points " + "to the right location (It's currently pointing to [ram:///jboss])",expected.getMessage());  }}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  throw new InvalidObjectException("can't deserialize enum");}  }
class C{  private void changeDisplay(){  if (checkBox.isChecked()) {    checkbox_display.setText("Checked");  } else {    checkbox_display.setText("Unchecked");  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);  nombreObjetoAmbito=new String[0];  idObjetoAmbito=new String[0];  tipoObjetoAmbito=new String[0];  niveles=new String[0];  estados=new String[0];  booleano=new String[0];  abrirpar=new String[0];  campo=new String[0];  tipoCampo=new Integer[0];  operador=new String[0];  cerrarpar=new String[0];  formatoFechaSel1=new String[0];  formatoFecha1=new String[0];  valor1=new String[0];  valor1D=new String[0];  valor1M=new String[0];  valor1A=new String[0];  valor1S=new String[0];  valor2=new String[0];  valor2D=new String[0];  valor2M=new String[0];  valor2A=new String[0];  valor2S=new String[0];  formatoFechaSel2=new String[0];  formatoFecha2=new String[0];  nombreDesc=new String[0];}  }
class C{  public boolean isImageIsAttached(){  Object oo=get_Value(COLUMNNAME_ImageIsAttached);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public PLTokenizer(){  super();}  }
class C{  @Override public void tableChanged(TableModelEvent e){  m_propSupport.firePropertyChange(null,null,null);}  }
class C{  private void waitDbsvcStarted() throws Exception {  log.info("Wait dbsvc and geodbsvc get started..");  waitHibernateNodeStarted();  validateClusterStatus();}  }
class C{  protected void writeHeader(String enc) throws IOException {  writer.write("<?xml");  writeAttribute("version","1.0");  if (enc != null) {    writeAttribute("encoding",enc);  }  if (standalone != null) {    writeAttribute("standalone",(standalone ? "yes" : "no"));  }  writer.write("?>");}  }
class C{  public BasicLayerFactory(){}  }
class C{  protected boolean isRegionActive(KMLTraversalContext tc,DrawContext dc){  return this.isRegionVisible(dc) && this.meetsLodCriteria(tc,dc);}  }
class C{  public void updateAuthorizedKey2(String sshKey) throws Exception {  SSHKeyUpdateParam key=new SSHKeyUpdateParam();  key.setSshKey(sshKey);  client.put(String.class,key,UPDATE_AUTH_KEY_URL);}  }
class C{  protected Account(final KeyPair keyPair,final Address address){  this.keyPair=keyPair;  this.address=address;}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public static void printStack(){  printStack(true,true);}  }
class C{  @Override public void make(){synchronized (this) {    if (CurrentTime.currentTime() < _lastMakeTime + 2000)     return;    try {      makeImpl();    } catch (    Exception e) {      log.log(Level.FINER,e.toString(),e);    }    _lastMakeTime=CurrentTime.currentTime();  }}  }
class C{  public long lastAccessTime(){  return lastAccessTime;}  }
class C{  public Builder newBuilder(){  return new Builder(this);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void incomingStarted(){  incomingStarted=true;}  }
class C{  public String seedTipText(){  return "The randomization seed";}  }
class C{  public void addOwnGefaehrdungen(){  for (  OwnGefaehrdung element : allOwnGefaehrdungen) {    if (!(allGefaehrdungen.contains(element))) {      allGefaehrdungen.add(element);    }  }}  }
class C{  public ChartEvent(Object source){  super(source);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.395 -0500",hash_original_method="AC6018F42404EC47E77B301174745A45",hash_generated_method="BB8D8D43C66405027B782098B2A65121") public static void cursorFloatToContentValuesIfPresent(Cursor cursor,ContentValues values,String column){  final int index=cursor.getColumnIndex(column);  if (index != -1 && !cursor.isNull(index)) {    values.put(column,cursor.getFloat(index));  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  init();}  }
class C{  public void startSpan(SpanBuilder spanBuilder,String id){  doStartSpanWithParent(spanBuilder,id);}  }
class C{  public Anonymous_constantDeclaration_2_ createAnonymous_constantDeclaration_2_(){  Anonymous_constantDeclaration_2_Impl anonymous_constantDeclaration_2_=new Anonymous_constantDeclaration_2_Impl();  return anonymous_constantDeclaration_2_;}  }
class C{  public static String removeFromEndOfString(String source,String stringToRemove){  if (stringToRemove == null) {    return source;  }  String result=source;  if (source != null && source.endsWith(stringToRemove)) {    result=source.substring(0,source.length() - 1);  }  return result;}  }
class C{  public void removeMouseHandler(MouseHandlerFX handler){  this.availableMouseHandlers.remove(handler);}  }
class C{  public void addHistoryChangedListener(HistoryChangedListener l){  m_HistoryChangedListeners.add(l);}  }
class C{  public BlockingIOPbrpcClientSocketPool(final Config poolConfig,final PbrpcClientConfiguration clientConfig,final String host,int port,int connTimeout,int readTimeout,Codec codec,HeaderResolver headerResolver){  super(poolConfig,new BlockingIOPbrpcClientSocketFactory(clientConfig,host,port,connTimeout,readTimeout,codec,headerResolver));  LOG.info("Init connection pool done but connections will not be established until you start using the pool");}  }
class C{  protected void selectionChanged(){  if (getSelectionProvider() == null) {    return;  }}  }
class C{  public static double quantile(double q,double[] x,int[] indices){  if (q < 0.0 || q > 1.0)   throw new IllegalArgumentException("Quantile out of range");  if (q == 0.0) {    return x[indices[0]] - 1.0;  }  return x[indices[(int)Math.ceil(q * indices.length) - 1]];}  }
class C{  private void addItemToPlaylist(){  if (MainApplication.getInstance().PlayerQueue == null) {    MainApplication.getInstance().PlayerQueue=new Playlist();  }  if (MainApplication.getInstance().PlayerQueue.PlaylistItems == null) {    MainApplication.getInstance().PlayerQueue.PlaylistItems=new ArrayList<>();  }  if (mItem.getRecursiveItemCount() != null && mItem.getRecursiveItemCount() > 0) {    ItemQuery query=new ItemQuery();    query.setParentId(mItem.getId());    query.setUserId(MainApplication.getInstance().API.getCurrentUserId());    query.setRecursive(true);    query.setIncludeItemTypes(new String[]{"audio"});    MainApplication.getInstance().API.GetItemsAsync(query,getAllRecursiveChildrenResponse);  } else {    addItemToPlaylistInternal(mItem);  }}  }
class C{  @Override public String toString(){  return "[" + _instr + "]";}  }
class C{  public void add(EventBean theEvent){  if (theEvent == null) {    throw new IllegalArgumentException("Null event not allowed");  }  if (firstEvent == null) {    firstEvent=theEvent;    return;  }  if (additionalEvents == null) {    additionalEvents=new ArrayDeque<EventBean>();  }  additionalEvents.add(theEvent);}  }
class C{  public Source<T> nTimesThenSwitchTo(int n,Source<T> after){  return Compositions.ntimesThen(n,this,after);}  }
class C{  public void testUpdateNString() throws Exception {  createTable("testUpdateNString","(c1 CHAR(10) PRIMARY KEY, c2 NATIONAL CHARACTER(10)) default character set sjis");  Properties props1=new Properties();  props1.put("useServerPrepStmts","true");  props1.put("characterEncoding","UTF-8");  Connection conn1=getConnectionWithProps(props1);  PreparedStatement pstmt1=conn1.prepareStatement("INSERT INTO testUpdateNString (c1, c2) VALUES (?, ?)");  pstmt1.setString(1,"1");  pstmt1.setNString(2,"aaa");  pstmt1.execute();  Statement stmt1=conn1.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE);  ResultSet rs1=stmt1.executeQuery("SELECT c1, c2 FROM testUpdateNString");  rs1.next();  rs1.updateNString("c2","bbb");  rs1.updateRow();  rs1.moveToInsertRow();  rs1.updateString("c1","2");  rs1.updateNString("c2","ccc");  rs1.insertRow();  ResultSet rs2=stmt1.executeQuery("SELECT c1, c2 FROM testUpdateNString");  rs2.next();  assertEquals("1",rs2.getString("c1"));  assertEquals("bbb",rs2.getNString("c2"));  rs2.next();  assertEquals("2",rs2.getString("c1"));  assertEquals("ccc",rs2.getNString("c2"));  pstmt1.close();  stmt1.close();  conn1.close();  createTable("testUpdateNString","(c1 CHAR(10) PRIMARY KEY, c2 CHAR(10)) default character set sjis");  Properties props2=new Properties();  props2.put("useServerPrepStmts","true");  props2.put("characterEncoding","SJIS");  Connection conn2=getConnectionWithProps(props2);  PreparedStatement pstmt2=conn2.prepareStatement("INSERT INTO testUpdateNString (c1, c2) VALUES (?, ?)");  pstmt2.setString(1,"1");  pstmt2.setString(2,"aaa");  pstmt2.execute();  Statement stmt2=conn2.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE);  ResultSet rs3=stmt2.executeQuery("SELECT c1, c2 FROM testUpdateNString");  rs3.next();  try {    rs3.updateNString("c2","bbb");    fail();  } catch (  SQLException ex) {    assertEquals("Can not call updateNString() when field's character set isn't UTF-8",ex.getMessage());  }  rs3.close();  pstmt2.close();  stmt2.close();  conn2.close();}  }
class C{  public static void main(String[] args){  OutputStep.setDefaultHandlerWriter();  runCLIApplication(KDDCLIApplication.class,args);}  }
class C{  public void compile(){  BaselineCompiler comp;  if (VM.BuildForIA32) {    comp=new org.jikesrvm.compilers.baseline.ia32.BaselineCompilerImpl(this,localFixedLocations,localFloatLocations);  } else {    if (VM.VerifyAssertions)     VM._assert(VM.BuildForPowerPC);    comp=new org.jikesrvm.compilers.baseline.ppc.BaselineCompilerImpl(this,localFixedLocations,localFloatLocations);  }  comp.compile();  this.lastFixedStackRegister=comp.getLastFixedStackRegister();  this.lastFloatStackRegister=comp.getLastFloatStackRegister();}  }
class C{  public static void sort(short[] a){  doSort(a,0,a.length - 1);}  }
class C{  @Override public boolean onPrepareOptionsMenu(Menu menu){  MenuItem item;  updateNavigationViewEntryVisibilities();  if ((item=menu.findItem(R.id.action_notifications)) != null) {    LayerDrawable icon=(LayerDrawable)item.getIcon();    BadgeDrawable.setBadgeCount(this,icon,podUserProfile.getNotificationCount());  }  if ((item=menu.findItem(R.id.action_conversations)) != null) {    LayerDrawable icon=(LayerDrawable)item.getIcon();    BadgeDrawable.setBadgeCount(this,icon,podUserProfile.getUnreadMessagesCount());  }  return super.onPrepareOptionsMenu(menu);}  }
class C{  public Observable<TypesViewHolder<DataType>> bindRecyclerView(@NonNull final RecyclerView recyclerView,@NonNull final List<ViewHolderInfo> viewHolderInfoList,@NonNull final OnGetItemViewType viewTypeCallback){  mRxAdapter=null;  mRxAdapterForTypes=new RxAdapterForTypes<>(mDataSet,viewHolderInfoList,viewTypeCallback);  recyclerView.setAdapter(mRxAdapterForTypes);  return mRxAdapterForTypes.asObservable();}  }
class C{  public boolean isDirectPrint(){  Object oo=get_Value(COLUMNNAME_IsDirectPrint);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean validSystemNameConfig(String systemName,char type){  if (!validSystemNameFormat(systemName,type)) {    return false;  }  return true;}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int itemHeight=getItemHeight();  int count=scrollingOffset / itemHeight;  int pos=currentItem - count;  int itemCount=viewAdapter.getItemsCount();  int fixPos=scrollingOffset % itemHeight;  if (Math.abs(fixPos) <= itemHeight / 2) {    fixPos=0;  }  if (isCyclic && itemCount > 0) {    if (fixPos > 0) {      pos--;      count++;    } else     if (fixPos < 0) {      pos++;      count--;    }    while (pos < 0) {      pos+=itemCount;    }    pos%=itemCount;  } else {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= itemCount) {      count=currentItem - itemCount + 1;      pos=itemCount - 1;    } else     if (pos > 0 && fixPos > 0) {      pos--;      count++;    } else     if (pos < itemCount - 1 && fixPos < 0) {      pos++;      count--;    }  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * itemHeight;  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:25.400 -0500",hash_original_method="A1B9AE6202C436A7C194238B45D86066",hash_generated_method="2CC1E2DA13B47C46DCCB446A48AA4134") private int next(int index){  return (index + 2) & mask;}  }
class C{  public float scalar(){  return get(0);}  }
class C{  public static int computeScalarHeaderSize(RVMClass type){  return SCALAR_HEADER_SIZE;}  }
class C{  public boolean isStaleCheckingEnabled(){  return getBooleanParameter(STALE_CONNECTION_CHECK,true);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  private void checkIfInstanceFromInnerInstanceClass(final Object receiver){  if (!(receiver instanceof Class)) {    final Class<?> receiverClass=receiver.getClass();    final Class<?> enclosingClass=receiverClass.getEnclosingClass();    if (enclosingClass == null) {      return;    } else {      if (!receiverClass.isAnonymousClass() && !Modifier.isStatic(receiverClass.getModifiers())) {        try {          final Field this$0=receiverClass.getDeclaredField("this$0");          this$0.setAccessible(true);          final Object outerInstance=this$0.get(receiver);          final int receiverOID=System.identityHashCode(receiver);          final int initRecNo=this.oidRecMapping.get(receiverOID);          this.oidDependencies.set(initRecNo,System.identityHashCode(outerInstance));        } catch (        final Exception e) {          logger.info("An error occurred while obtaining the enclosing object of an inner non-static class instance. " + "FIELDS: " + Arrays.toString(receiverClass.getDeclaredFields()),e);        }      }    }  }}  }
class C{  public Tasks<BlockConsistencyGroupRestRep> swap(URI consistencyGroupId,CopiesParam input){  final String url=getIdUrl() + "/protection/continuous-copies/swap";  return postTasks(input,url,consistencyGroupId);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getConstraint_();}  }
class C{  public static String convertByte2HexString(byte b){  char u8=convertByte2Uint8(b);  return Integer.toHexString(u8);}  }
class C{  JCERSAPrivateCrtKey(RSAPrivateKey key){  this.modulus=key.getModulus();  this.publicExponent=key.getPublicExponent();  this.privateExponent=key.getPrivateExponent();  this.primeP=key.getPrime1();  this.primeQ=key.getPrime2();  this.primeExponentP=key.getExponent1();  this.primeExponentQ=key.getExponent2();  this.crtCoefficient=key.getCoefficient();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_SETTER_DECLARATION___GET_DEFINED_TYPE_ELEMENT:    return getDefinedTypeElement();case N4JSPackage.N4_SETTER_DECLARATION___IS_ABSTRACT:  return isAbstract();case N4JSPackage.N4_SETTER_DECLARATION___IS_VALID_NAME:return isValidName();case N4JSPackage.N4_SETTER_DECLARATION___GET_ANNOTATIONS:return getAnnotations();case N4JSPackage.N4_SETTER_DECLARATION___IS_DECLARED_STATIC:return isDeclaredStatic();case N4JSPackage.N4_SETTER_DECLARATION___IS_STATIC:return isStatic();case N4JSPackage.N4_SETTER_DECLARATION___IS_DECLARED_FINAL:return isDeclaredFinal();case N4JSPackage.N4_SETTER_DECLARATION___IS_FINAL:return isFinal();case N4JSPackage.N4_SETTER_DECLARATION___IS_CONSTRUCTOR:return isConstructor();case N4JSPackage.N4_SETTER_DECLARATION___IS_CALLABLE_CONSTRUCTOR:return isCallableConstructor();}return super.eInvoke(operationID,arguments);}  }
class C{  public Iterator<AbstractPage> childIterator(final boolean dirtyNodesOnly){  if (dirtyNodesOnly) {    return new DirtyChildIterator(this);  } else {    return new ChildIterator();  }}  }
class C{  public void test_Password(){  String prompt="promptTest";  char[] psw1="testPassword".toCharArray();  char[] psw2="newPassword".toCharArray();  PasswordCallback pc=new PasswordCallback(prompt,true);  try {    assertNull(pc.getPassword());    pc.setPassword(psw1);    assertEquals(psw1.length,pc.getPassword().length);    pc.setPassword(null);    assertNull(pc.getPassword());    pc.setPassword(psw2);    char[] res=pc.getPassword();    assertEquals(psw2.length,res.length);    for (int i=0; i < res.length; i++) {      assertEquals("Incorrect password was returned",psw2[i],res[i]);    }    pc.clearPassword();    res=pc.getPassword();    if (res.equals(psw2)) {      fail("Incorrect password was returned after clear");    }    pc.setPassword(psw1);    res=pc.getPassword();    assertEquals(psw1.length,res.length);    for (int i=0; i < res.length; i++) {      assertEquals("Incorrect result",psw1[i],res[i]);    }  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }}  }
class C{  public void expandRefresh(TreeTableNode moved){  if (moved instanceof TaskNode) {    Task movedTask=(Task)moved.getUserObject();    if (movedTask.getExpand()) {      getTreeTable().getTree().expandPath(TreeUtil.createPath(moved));    }    for (int i=0; i < moved.getChildCount(); i++) {      expandRefresh(moved.getChildAt(i));    }  }}  }
class C{  public static CANTalon canTalon(int canID){  return canRegistrar.fetch(canID,CANTalon.class,null);}  }
class C{  public boolean contains(S2LatLng ll){  return (lat.contains(ll.lat().radians()) && lng.contains(ll.lng().radians()));}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  script_IMEClass=createEClass(SCRIPT_IM);  createEReference(script_IMEClass,SCRIPT_IM__SYMBOL_TABLE);  symbolTableEClass=createEClass(SYMBOL_TABLE);  createEReference(symbolTableEClass,SYMBOL_TABLE__ENTRIES);  symbolTableEntryEClass=createEClass(SYMBOL_TABLE_ENTRY);  createEAttribute(symbolTableEntryEClass,SYMBOL_TABLE_ENTRY__NAME);  createEReference(symbolTableEntryEClass,SYMBOL_TABLE_ENTRY__ELEMENTS_OF_THIS_NAME);  createEReference(symbolTableEntryEClass,SYMBOL_TABLE_ENTRY__REFERENCING_ELEMENTS);  symbolTableEntryOriginalEClass=createEClass(SYMBOL_TABLE_ENTRY_ORIGINAL);  createEReference(symbolTableEntryOriginalEClass,SYMBOL_TABLE_ENTRY_ORIGINAL__ORIGINAL_TARGET);  createEReference(symbolTableEntryOriginalEClass,SYMBOL_TABLE_ENTRY_ORIGINAL__IMPORT_SPECIFIER);  createEOperation(symbolTableEntryOriginalEClass,SYMBOL_TABLE_ENTRY_ORIGINAL___EXPORTED_NAME);  symbolTableEntryIMOnlyEClass=createEClass(SYMBOL_TABLE_ENTRY_IM_ONLY);  symbolTableEntryInternalEClass=createEClass(SYMBOL_TABLE_ENTRY_INTERNAL);  referencingElement_IMEClass=createEClass(REFERENCING_ELEMENT_IM);  createEReference(referencingElement_IMEClass,REFERENCING_ELEMENT_IM__REWIRED_TARGET);  createEOperation(referencingElement_IMEClass,REFERENCING_ELEMENT_IM___GET_ORIGINAL_TARGET_OF_REWIRED_TARGET);  referencingElementExpression_IMEClass=createEClass(REFERENCING_ELEMENT_EXPRESSION_IM);  identifierRef_IMEClass=createEClass(IDENTIFIER_REF_IM);  createEOperation(identifierRef_IMEClass,IDENTIFIER_REF_IM___GET_ID_IM);  createEOperation(identifierRef_IMEClass,IDENTIFIER_REF_IM___SET_ID_IM__SYMBOLTABLEENTRY);  createEOperation(identifierRef_IMEClass,IDENTIFIER_REF_IM___GET_ID);  createEOperation(identifierRef_IMEClass,IDENTIFIER_REF_IM___SET_ID__IDENTIFIABLEELEMENT);  parameterizedPropertyAccessExpression_IMEClass=createEClass(PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM);  createEAttribute(parameterizedPropertyAccessExpression_IMEClass,PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__ANY_PLUS_ACCESS);  createEAttribute(parameterizedPropertyAccessExpression_IMEClass,PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__NAME_OF_ANY_PLUS_PROPERTY);  createEOperation(parameterizedPropertyAccessExpression_IMEClass,PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM___GET_PROPERTY_IM);  createEOperation(parameterizedPropertyAccessExpression_IMEClass,PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM___SET_PROPERTY_IM__SYMBOLTABLEENTRY);  createEOperation(parameterizedPropertyAccessExpression_IMEClass,PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM___GET_PROPERTY_NAME);  createEOperation(parameterizedPropertyAccessExpression_IMEClass,PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM___GET_PROPERTY);  createEOperation(parameterizedPropertyAccessExpression_IMEClass,PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM___SET_PROPERTY__IDENTIFIABLEELEMENT);  parameterizedTypeRef_IMEClass=createEClass(PARAMETERIZED_TYPE_REF_IM);  createEOperation(parameterizedTypeRef_IMEClass,PARAMETERIZED_TYPE_REF_IM___GET_DECLARED_TYPE_IM);  createEOperation(parameterizedTypeRef_IMEClass,PARAMETERIZED_TYPE_REF_IM___SET_DECLARED_TYPE_IM__SYMBOLTABLEENTRY);  createEOperation(parameterizedTypeRef_IMEClass,PARAMETERIZED_TYPE_REF_IM___GET_DECLARED_TYPE);  createEOperation(parameterizedTypeRef_IMEClass,PARAMETERIZED_TYPE_REF_IM___SET_DECLARED_TYPE__TYPE);  parameterizedTypeRefStructural_IMEClass=createEClass(PARAMETERIZED_TYPE_REF_STRUCTURAL_IM);  createEOperation(parameterizedTypeRefStructural_IMEClass,PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_DECLARED_TYPE_IM);  createEOperation(parameterizedTypeRefStructural_IMEClass,PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___SET_DECLARED_TYPE_IM__SYMBOLTABLEENTRY);  createEOperation(parameterizedTypeRefStructural_IMEClass,PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_DECLARED_TYPE);  createEOperation(parameterizedTypeRefStructural_IMEClass,PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___SET_DECLARED_TYPE__TYPE);  snippetEClass=createEClass(SNIPPET);  createEAttribute(snippetEClass,SNIPPET__CODE);  delegatingMemberEClass=createEClass(DELEGATING_MEMBER);  createEReference(delegatingMemberEClass,DELEGATING_MEMBER__DELEGATION_BASE_TYPE);  createEAttribute(delegatingMemberEClass,DELEGATING_MEMBER__DELEGATION_SUPER_CLASS_STEPS);  createEReference(delegatingMemberEClass,DELEGATING_MEMBER__DELEGATION_TARGET);  createEAttribute(delegatingMemberEClass,DELEGATING_MEMBER__DELEGATION_TARGET_IS_ABSTRACT);  delegatingGetterDeclarationEClass=createEClass(DELEGATING_GETTER_DECLARATION);  delegatingSetterDeclarationEClass=createEClass(DELEGATING_SETTER_DECLARATION);  delegatingMethodDeclarationEClass=createEClass(DELEGATING_METHOD_DECLARATION);  stringLiteralForSTEEClass=createEClass(STRING_LITERAL_FOR_STE);  createEReference(stringLiteralForSTEEClass,STRING_LITERAL_FOR_STE__ENTRY);  createEAttribute(stringLiteralForSTEEClass,STRING_LITERAL_FOR_STE__USE_EXPORTED_NAME);  createEOperation(stringLiteralForSTEEClass,STRING_LITERAL_FOR_STE___GET_VALUE_AS_STRING);}  }
class C{  public EquivEdge(EquivEdge other){  if (other.is_set_id1()) {    this.id1=new PersonID(other.id1);  }  if (other.is_set_id2()) {    this.id2=new PersonID(other.id2);  }}  }
class C{  public boolean isServerProcess(){  Object oo=get_Value(COLUMNNAME_IsServerProcess);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int correctIDColumnSize(String vendorName,String columnName,String dataType,int size){  int i=size;  if (columnName.toUpperCase().endsWith("_ID")) {    int dataTypeID=getDataTypeID(vendorName,dataType);    if (dataTypeID >= NUMERIC && dataTypeID <= NUMBER)     i=10;  }  return i;}  }
class C{  public boolean isEmpty(){  return (size == 0);}  }
class C{  public BreakpointManager(final com.google.security.zynamics.binnavi.debug.models.breakpoints.BreakpointManager breakpointManager){  this.breakpointManager=breakpointManager;  breakpointManager.addListener(internalListener);  for (  final com.google.security.zynamics.binnavi.debug.models.breakpoints.Breakpoint breakpoint : breakpointManager.getBreakpoints(BreakpointType.REGULAR)) {    breakpointMap.put(breakpoint,new Breakpoint(breakpoint));  }  for (  final com.google.security.zynamics.binnavi.debug.models.breakpoints.Breakpoint breakpoint : breakpointManager.getBreakpoints(BreakpointType.ECHO)) {    echoBreakpointMap.put(breakpoint,new Breakpoint(breakpoint));  }}  }
class C{  public boolean dismissPopup(){  if (isShowingPopup()) {    getListPopupWindow().dismiss();    ViewTreeObserver viewTreeObserver=getViewTreeObserver();    if (viewTreeObserver.isAlive()) {      viewTreeObserver.removeGlobalOnLayoutListener(mOnGlobalLayoutListener);    }  }  return true;}  }
class C{  private boolean isInternalSupported(String extension){  return internalSupport.containsKey(extension);}  }
class C{  public String plus(String value){  checkNumericString(value);  BigDecimal augend=new BigDecimal(value);  return amount.add(augend).toString();}  }
class C{  public CModulesPanel(final CDebugPerspectiveModel debugPerspectiveModel){  super(new BorderLayout());  Preconditions.checkNotNull(debugPerspectiveModel,"IE01251: Debug perspective model argument can not be null");  m_debugPerspectiveModel=debugPerspectiveModel;  add(new CModulesCheckBoxPanel(m_table.getTreeTableModel()),BorderLayout.NORTH);  add(new CTablePanel<MemoryModule>(m_table,new CMemoryModuleFilterCreator(),new CMemoryModuleFilterHelp()));  m_synchronizer=new CModulesTableModelSynchronizer(m_table,debugPerspectiveModel);  m_table.addMouseListener(new InternalMouseListener());}  }
class C{  public static void e(Exception exception,String string){  if (sIsLogEnabled) {    Log.e(sApplicationTag,getContent(getCurrentStackTraceElement()) + "\n>" + exception.getMessage()+ "\n>"+ exception.getStackTrace()+ "   "+ string);    exception.printStackTrace();  }}  }
class C{  public double surfaceArea(){  return (2 * size().getX() * size().getZ()) + (2 * size().getX() * size().getY()) + (2 * size().getZ() * size().getY());}  }
class C{  public static boolean refreshDeviceCache(BluetoothGatt gatt){  try {    final Method refresh=BluetoothGatt.class.getMethod("refresh");    if (refresh != null) {      final boolean success=(Boolean)refresh.invoke(gatt);      BleLog.i(TAG,"Refreshing result: " + success);      return success;    }  } catch (  Exception e) {    BleLog.e(TAG,"An exception occured while refreshing device");  }  return false;}  }
class C{  @CloudUnitSecurable @ResponseBody @RequestMapping(value="/stop",method=RequestMethod.POST) public JsonResponse stopApplication(@RequestBody JsonInput input) throws ServiceException, CheckException {  if (logger.isDebugEnabled()) {    logger.debug(input.toString());  }  String name=input.getApplicationName();  User user=authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,name);  authentificationUtils.canStartNewAction(user,application,Locale.ENGLISH);  applicationEventPublisher.publishEvent(new ApplicationPendingEvent(application));  applicationService.stop(application);  applicationEventPublisher.publishEvent(new ApplicationStopEvent(application));  return new HttpOk();}  }
