class C{  public boolean isSplitWhenDifference(){  Object oo=get_Value(COLUMNNAME_IsSplitWhenDifference);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void reconcileFlow(OFMatchReconcile ofmRcIn,EventPriority priority){  if (ofmRcIn == null)   return;  OFMatchReconcile myOfmRc=new OFMatchReconcile(ofmRcIn);  flowQueue.offer(myOfmRc,priority);  ctrFlowReconcileRequest.increment();  Date currTime=new Date();  long delay=0;  if (currTime.after(new Date(lastReconcileTime.getTime() + 1000))) {    delay=0;  } else {    delay=FLOW_RECONCILE_DELAY_MILLISEC;  }  flowReconcileTask.reschedule(delay,TimeUnit.MILLISECONDS);  if (logger.isTraceEnabled()) {    logger.trace("Reconciling flow: {}, total: {}",myOfmRc.toString(),flowQueue.size());  }}  }
class C{  public void sendPacket(byte[] packet,int count){  NceMessage m;  if (NmraPacket.isAccSignalDecoderPkt(packet)) {    int addr=NmraPacket.getAccSignalDecoderPktAddress(packet);    int aspect=packet[2];    m=NceMessage.createAccySignalMacroMessage(this,5,addr,aspect);  } else {    m=NceMessage.sendPacketMessage(this,packet);  }  this.sendNceMessage(m,null);}  }
class C{  private ShortLookupTable createShortLut(float scale[],float off[],int nBands,int nElems){  short[][] lutData=new short[scale.length][nElems];  for (int band=0; band < scale.length; band++) {    float bandScale=scale[band];    float bandOff=off[band];    short[] bandLutData=lutData[band];    for (int i=0; i < nElems; i++) {      int val=(int)(i * bandScale + bandOff);      if ((val & 0xffff0000) != 0) {        if (val < 0) {          val=0;        } else {          val=65535;        }      }      bandLutData[i]=(short)val;    }  }  return new ShortLookupTable(0,lutData);}  }
class C{  public void addArgument(byte data){  arguments.add(new byte[]{data});}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,int nbatches,int ncycles) throws Exception {  for (int i=0; i < nbatches; i++) {    sbuf.reset();    for (int j=0; j < ncycles; j++) {      oout.writeByte(0);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readByte();    }  }}  }
class C{  public byte[] toByteArray(){  if (index > 0xFFFF) {    throw new RuntimeException("Class file too large!");  }  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=(FieldWriter)fb.fv;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=(MethodWriter)mb.mv;  }  int attributeCount=0;  if (bootstrapMethods != null) {    ++attributeCount;    size+=8 + bootstrapMethods.length;    newUTF8("BootstrapMethods");  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 6;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;      size+=6;      newUTF8("Synthetic");    }  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;    size+=8 + tanns.getSize();    newUTF8("RuntimeVisibleTypeAnnotations");  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;    size+=8 + itanns.getSize();    newUTF8("RuntimeInvisibleTypeAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC);  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=(FieldWriter)fb.fv;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=(MethodWriter)mb.mv;  }  out.putShort(attributeCount);  if (bootstrapMethods != null) {    out.putShort(newUTF8("BootstrapMethods"));    out.putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodsCount);    out.putByteArray(bootstrapMethods.data,0,bootstrapMethods.length);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,0,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(newUTF8("Synthetic")).putInt(0);    }  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    anns=null;    ianns=null;    attrs=null;    innerClassesCount=0;    innerClasses=null;    bootstrapMethodsCount=0;    bootstrapMethods=null;    firstField=null;    lastField=null;    firstMethod=null;    lastMethod=null;    computeMaxs=false;    computeFrames=true;    invalidFrames=false;    new ClassReader(out.data).accept(this,ClassReader.SKIP_FRAMES);    return toByteArray();  }  return out.data;}  }
class C{  protected IssuesEntry makeNewIssue(){  Person author=new Person();  author.setName(username);  Owner owner=new Owner();  owner.setUsername(new Username(username));  Cc cc=new Cc();  cc.setUsername(new Username(username));  IssuesEntry entry=new IssuesEntry();  entry.getAuthors().add(author);  entry.setContent(new HtmlTextConstruct("issue description"));  entry.setTitle(new PlainTextConstruct("issue summary"));  entry.setStatus(new Status("New"));  entry.addLabel(new Label("Priority-High"));  entry.addLabel(new Label("Milestone-2009"));  entry.addCc(cc);  entry.setSendEmail(new SendEmail("False"));  return entry;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length < 3) {    printUsage();    return;  }  if (args[0].equals("c")) {    final File archive=new File(args[1]);    final File[] input=new File[args.length - 2];    for (int i=0; i < input.length; i++) {      input[i]=new File(args[i + 2]);    }    writeArchive(archive,input);  } else   if (args[0].equals("d")) {    final File archive=new File(args[1]);    final File output=new File(args[2]);    unpackArchive(archive,output);  } else {    printUsage();  }}  }
class C{  public void cleanUp(){  try {    this.dis.close();    this.dos.close();  } catch (  IOException ioe) {  }  this.dis=null;  this.dos=null;}  }
class C{  public ClientHello(HandshakeIODataStream in,int length) throws IOException {  client_version=new byte[2];  client_version[0]=(byte)in.readUint8();  client_version[1]=(byte)in.readUint8();  Streams.readFully(in,random);  int size=in.read();  session_id=new byte[size];  in.read(session_id,0,size);  int l=in.readUint16();  if ((l & 0x01) == 0x01) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ClientHello");  }  size=l >> 1;  cipher_suites=new CipherSuite[size];  for (int i=0; i < size; i++) {    byte b0=(byte)in.read();    byte b1=(byte)in.read();    cipher_suites[i]=CipherSuite.getByCode(b0,b1);  }  size=in.read();  compression_methods=new byte[size];  in.read(compression_methods,0,size);  this.length=38 + session_id.length + (cipher_suites.length << 1)+ compression_methods.length;  if (this.length > length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ClientHello");  }  if (this.length < length) {    in.skip(length - this.length);    this.length=length;  }}  }
class C{  public static boolean hasQueryComponents(String url){  return (url.lastIndexOf('?') != -1);}  }
class C{  public static void hideKeyboard(Activity act){  if (act != null && act.getCurrentFocus() != null) {    InputMethodManager inputMethodManager=(InputMethodManager)act.getSystemService(Activity.INPUT_METHOD_SERVICE);    inputMethodManager.hideSoftInputFromWindow(act.getCurrentFocus().getWindowToken(),0);  }}  }
class C{  public RepeatedFieldBuilder<MType,BType,IType> addMessage(int index,MType message){  if (message == null) {    throw new NullPointerException();  }  ensureMutableMessageList();  messages.add(index,message);  if (builders != null) {    builders.add(index,null);  }  onChanged();  incrementModCounts();  return this;}  }
class C{  public Constraint createConstraint(){  return new Constraint();}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof EagerForeignCollection)) {    return false;  }  @SuppressWarnings("rawtypes") EagerForeignCollection other=(EagerForeignCollection)obj;  return results.equals(other.results);}  }
class C{  public Configuration allowFrontendRegister(String SID){  return cfgManagement.getConfKey(3,"allow_frontend_register");}  }
class C{  public BlockDenseDoubleMatrix2D(final double[][] values,final int blockStripeSize,final BlockOrder blockOrder){  this(values.length,values[0].length,blockStripeSize,blockOrder);  fill(values);}  }
class C{  public static ArtistsListFragment newInstance(){  return new ArtistsListFragment();}  }
class C{  public XMLString xstr(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_XSTR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  public <T extends Annotation>boolean hasParameterAnnotation(Class<T> annotationType){  return (getParameterAnnotation(annotationType) != null);}  }
class C{  public Cursor fetchLexisBest(String title,String language,String difficulty){  return mDb.query(TABLE_SCORES,new String[]{_ROWID,KEY_GAME_TITLE,KEY_GAME_DIFFICULTY,KEY_GAME_MOVES,KEY_GAME_TIME},KEY_GAME_TITLE + "= '" + title+ "'"+ " "+ "AND "+ KEY_GAME_DIFFICULTY+ "= '"+ difficulty+ "'"+ "AND "+ KEY_GAME_SUBTITLE+ "= '"+ language+ "'",null,null,null,KEY_GAME_MOVES + " ASC",null);}  }
class C{  public StringElement addElement(String element){  addElement(Integer.toString(element.hashCode()),element);  return (this);}  }
class C{  protected void onRemoveChannelLimit(String channel,String sourceNick,String sourceLogin,String sourceHostname){}  }
class C{  public RC2ParameterSpec(int effectiveKeyBits,byte[] iv){  if (iv == null) {    throw new IllegalArgumentException("iv == null");  }  if (iv.length < 8) {    throw new IllegalArgumentException("iv.length < 8");  }  this.effectiveKeyBits=effectiveKeyBits;  this.iv=new byte[8];  System.arraycopy(iv,0,this.iv,0,8);}  }
class C{  public static Extractors on(String html){  return new Extractors(html);}  }
class C{  public String backupFileName(String name){  String f=name + ".bak";  if (log.isDebugEnabled()) {    log.debug("backup file name is: " + f);  }  return f;}  }
class C{  public MyHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_MAX_LOAD_FACTOR);}  }
class C{  private Public(){  super("PUBLIC");}  }
class C{  public void substract() throws IOException {  print("substract",null);}  }
class C{  public final void testSetPasswordVerificationPrefixWithStringParameter(){  String prefix="prefix";  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.setPasswordVerificationPrefix(prefix);  assertEquals(prefix,passwordEditText.getPasswordVerificationPrefix());}  }
class C{  @PUT @Path("/{uuid}/initstandby") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN},blockProxies=true) @ExcludeLicenseCheck public Response syncSites(SiteConfigParam configParam){  log.info("sync sites from active site");  return initStandby(configParam);}  }
class C{  public static void partialURLEncodeVal(Appendable dest,String val) throws IOException {  for (int i=0; i < val.length(); i++) {    char ch=val.charAt(i);    if (ch < 32) {      dest.append('%');      if (ch < 0x10)       dest.append('0');      dest.append(Integer.toHexString(ch));    } else {switch (ch) {case ' ':        dest.append('+');      break;case '&':    dest.append("%26");  break;case '%':dest.append("%25");break;case '=':dest.append("%3D");break;case '+':dest.append("%2B");break;default :dest.append(ch);break;}}}}  }
class C{  private void register() throws JSONException, IOException {  retrofit2.Response<UserConfigurationResponse> response=app.getZulipServices().register(true).execute();  if (response.isSuccessful()) {    UserConfigurationResponse res=response.body();    app.tester=app.getEventQueueId();    app.setEventQueueId(res.getQueueId());    app.setLastEventId(res.getLastEventId());    app.setPointer(res.getPointer());    app.setMaxMessageId(res.getMaxMessageId());    registeredOrGotEventsThisRun=true;    processRegister(res);  }}  }
class C{  private void onAppEnterBackground(){  mAppForeground=false;  stopWearableService();}  }
class C{  private void initRange(){  mMinValue=MathHelper.NULL_VALUE;  mMaxValue=MathHelper.NULL_VALUE;  int length=getItemCount();  for (int k=0; k < length; k++) {    updateRange(getValue(k));  }}  }
class C{  public static Result exec(long timeout,String... args){  return exec(timeout,null,args);}  }
class C{  public static synchronized Offset allocateReferenceSlot(boolean field){  int slot=nextReferenceSlot;  nextReferenceSlot+=getReferenceSlotSize();  if (nextReferenceSlot >= slots.length) {    enlargeTable();  }  return slotAsOffset(slot);}  }
class C{  @Nullable private String readAttribute(IXMLElement elem,String attributeName,@Nullable String defaultValue){  if (elem.hasAttribute(attributeName,SVG_NAMESPACE)) {    String value=elem.getAttribute(attributeName,SVG_NAMESPACE,null);    if (value.equals("inherit")) {      return readAttribute(elem.getParent(),attributeName,defaultValue);    } else {      return value;    }  } else   if (elem.hasAttribute(attributeName)) {    String value=elem.getAttribute(attributeName,null);    if (value.equals("inherit")) {      return readAttribute(elem.getParent(),attributeName,defaultValue);    } else {      return value;    }  } else {    return defaultValue;  }}  }
class C{  @NotNull public static String normalize(@NotNull String path){  int start=0;  boolean separator=false;  if (SystemInfo.isWindows) {    if (path.startsWith("//")) {      start=2;      separator=true;    } else     if (path.startsWith("\\\\")) {      return normalizeTail(0,path,false);    }  }  for (int i=start; i < path.length(); ++i) {    final char c=path.charAt(i);    if (c == '/') {      if (separator) {        return normalizeTail(i,path,true);      }      separator=true;    } else     if (c == '\\') {      return normalizeTail(i,path,separator);    } else {      separator=false;    }  }  return path;}  }
class C{  public static long[] insertAt(long[] dest,long[] src,int offset){  long[] temp=new long[dest.length + src.length - 1];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset + 1,temp,src.length + offset,dest.length - offset - 1);  return temp;}  }
class C{  public static final float sin(float theta){  theta=reduceAngle(theta);  if (abs(theta) <= QUARTER_PI) {    return (float)fastSin(theta);  }  return (float)fastCos(HALF_PI - theta);}  }
class C{  public Document read(InputStream in) throws DocumentException, IOException, XmlPullParserException {  return read(createReader(in));}  }
class C{  public static int[] cs_randperm(int n,int seed){  int p[], k, j, t;  if (seed == 0)   return (null);  p=new int[n];  for (k=0; k < n; k++)   p[k]=n - k - 1;  if (seed == -1)   return (p);  Random r=new Random(seed);  for (k=0; k < n; k++) {    j=k + r.nextInt(n - k);    t=p[j];    p[j]=p[k];    p[k]=t;  }  return (p);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public UserTimeline build(){  return new UserTimeline(tweetUi,userId,screenName,maxItemsPerRequest,includeReplies,includeRetweets);}  }
class C{  protected long parseDate() throws IOException {  if (_utcCalendar == null)   _utcCalendar=Calendar.getInstance(TimeZone.getTimeZone("UTC"));  return parseDate(_utcCalendar);}  }
class C{  public boolean isFinished(){  return finished;}  }
class C{  public Object clone() throws CloneNotSupportedException {  try {    UnicastRemoteObject cloned=(UnicastRemoteObject)super.clone();    cloned.reexport();    return cloned;  } catch (  RemoteException e) {    throw new ServerCloneException("Clone failed",e);  }}  }
class C{  public JumpingSolitaireState(boolean[] pre){  for (int i=0; i < filled.length; i++) {    filled[i]=pre[i];  }}  }
class C{  protected void addExitpointPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ExitPointSpec_exitpoint_feature"),getString("_UI_PropertyDescriptor_description","_UI_ExitPointSpec_exitpoint_feature","_UI_ExitPointSpec_type"),StextPackage.Literals.EXIT_POINT_SPEC__EXITPOINT,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public void writeAll(List<String[]> allLines){  writeAll((Iterable<String[]>)allLines);}  }
class C{  private boolean isCollectionQueryable(SolrCore core) throws ReplicationFailureException {  try {    int size=SolrInteractionUtils.fetchCollectionSize(core.name,core.host);    logger.info("Collection size is " + size);    return true;  } catch (  Exception e) {    throw new ReplicationFailureException("Cannot query collection size");  }}  }
class C{  static CountingFragment newInstance(int num){  CountingFragment f=new CountingFragment();  Bundle args=new Bundle();  args.putInt("num",num);  f.setArguments(args);  return f;}  }
class C{  void putFile(String relativePath,Codebase codebase){  try {    File dest=new File(rootDirectory.getAbsolutePath(),relativePath);    File src=codebase.getFile(relativePath);    boolean srcExists=filesystem.exists(src);    boolean destExists=filesystem.exists(dest);    boolean srcExecutable=filesystem.isExecutable(src);    boolean destExecutable=filesystem.isExecutable(dest);    if (!srcExists && !destExists) {      throw new MoeProblem("Neither src nor dests exists. Unreachable code:%n%s%n%s%n%s",relativePath,src,dest);    }    if (!srcExists) {      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"rm",relativePath);      return;    }    try {      filesystem.makeDirsForFile(dest);      filesystem.copyFile(src,dest);    } catch (    IOException e) {      throw new MoeProblem(e.getMessage());    }    if (!destExists) {      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"add","--parents",relativePath);    }    String mimeType=guessMimeType(relativePath);    if (mimeType != null) {      try {        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"propset","svn:mime-type",mimeType,relativePath);      } catch (      CommandRunner.CommandException e) {        ui.message("Error setting mime-type for %s",relativePath);      }    }    if (destExecutable != srcExecutable) {      if (srcExecutable) {        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"propset","svn:executable","*",relativePath);      } else {        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"propdel","svn:executable",relativePath);      }    }  } catch (  CommandRunner.CommandException e) {    throw new MoeProblem("problem occurred while running svn: " + e.stderr);  }}  }
class C{  private void handleShowOnFirstLaunch(){  if (mActivity != null && mDrawerLayout != null && mShowDrawerOnFirstLaunch) {    SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(mActivity);    if (!preferences.getBoolean(Drawer.PREF_USER_LEARNED_DRAWER,false)) {      mDrawerLayout.openDrawer(mSliderLayout);      SharedPreferences.Editor editor=preferences.edit();      editor.putBoolean(Drawer.PREF_USER_LEARNED_DRAWER,true);      editor.apply();    }  }}  }
class C{  public void testWithProperties() throws Exception {  Path file=getWorkDir().resolve("one-line");  String specialField="mySpecialField";  createRegularLineFileWithMoreFields(file,specialField);  doIndexAndSearchTest(file,null,specialField);}  }
class C{  private StartPOS(){}  }
class C{  public boolean removeKey(ECKey key){  keyChainGroupLock.lock();  try {    return keyChainGroup.removeImportedKey(key);  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  protected void addOptionalPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_FeatureParameter_optional_feature"),getString("_UI_PropertyDescriptor_description","_UI_FeatureParameter_optional_feature","_UI_FeatureParameter_type"),SGenPackage.Literals.FEATURE_PARAMETER__OPTIONAL,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public void reportTestFailure(TestIdentifier test,CtsTestStatus status,String trace){  Test result=findTest(test);  result.setResultStatus(status);  result.setStackTrace(trace);}  }
class C{  void endOptional(){  this.optional--;}  }
class C{  public Predictor(InputStream in) throws IOException {  ModelReader reader=new ModelReader(in);  mparam=new ModelParam(reader);  name_obj=reader.readString();  name_gbm=reader.readString();  initObjGbm();  gbm.loadModel(reader,mparam.saved_with_pbuffer != 0);}  }
class C{  @DSComment("parameter is from IO") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.621 -0500",hash_original_method="F589E4069755916CEDC29D447D78E1F5",hash_generated_method="00DC1AEE141141E3911D24487E76D6D2") public InputSource(Reader characterStream){  setCharacterStream(characterStream);}  }
class C{  public void createGaugePanel(){  if (gaugePanel == null) {    Item[] items=new Item[1];    items[0]=gauge;    Form f=new Form("Progress",items);    gaugePanel=f;  }}  }
class C{  public static Exception createRedirectException(Symbol error,String message,ErrorCondition condition){  Exception result=null;  Map<?,?> info=condition.getInfo();  if (info == null) {    result=new IOException(message + " : Redirection information not set.");  } else {    String hostname=(String)info.get(OPEN_HOSTNAME);    String networkHost=(String)info.get(NETWORK_HOST);    if (networkHost == null || networkHost.isEmpty()) {      result=new IOException(message + " : Redirection information not set.");    }    int port=0;    try {      port=Integer.valueOf(info.get(PORT).toString());    } catch (    Exception ex) {      result=new IOException(message + " : Redirection information not set.");    }    result=new AmqpRedirectedException(message,hostname,networkHost,port);  }  return result;}  }
class C{  protected void prepare(){  pRecordId=getRecord_ID();  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals(MLandedCost.COLUMNNAME_LandedCostDistribution))     pLandedCostDistribution=(String)para.getParameter(); else     if (name.equals(MLandedCost.COLUMNNAME_M_CostElement_ID))     pCostElementId=para.getParameterAsInt(); else     if (name.equals("CreateByProduct"))     pCreateByProduct=para.getParameterAsBoolean(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  private synchronized boolean _restart() throws ServletException {  if (singelton != null)   singelton.reset();  initEngine();  System.gc();  return true;}  }
class C{  @SuppressWarnings("ConstantConditions") public void testMkdirsParentRoot() throws Exception {  Map<String,String> props=properties(null,null,"0555");  igfs.mkdirs(DIR,props);  checkExist(igfs,igfsSecondary,DIR);  if (permissionsSupported()) {    if (dual)     assertEquals(props.get(IgfsUtils.PROP_PERMISSION),igfsSecondary.permissions(DIR.toString()));    assertEquals(props.get(IgfsUtils.PROP_PERMISSION),igfs.info(DIR).properties().get(IgfsUtils.PROP_PERMISSION));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:35.336 -0500",hash_original_method="F2493C84F4B47990AC80947C22ED747B",hash_generated_method="4EA61198BF5CD6785DDD89329CD6CAE1") public static String defaultLanguageForMcc(int mcc){  MccEntry entry;  entry=entryForMcc(mcc);  if (entry == null) {    return null;  } else {    return entry.language;  }}  }
class C{  public void startEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  super.startEntity(name,identifier,encoding,augs);  if (!name.equals("[xml]") && fEntityScanner.isExternal()) {    setScannerState(SCANNER_STATE_TEXT_DECL);  }  if (fDocumentHandler != null && name.equals("[xml]")) {    fDocumentHandler.startDocument(fEntityScanner,encoding,fNamespaceContext,null);  }}  }
class C{  public void run(String paragraphId){  Paragraph p=getParagraph(paragraphId);  p.setListener(jobListenerFactory.getParagraphJobListener(this));  String requiredReplName=p.getRequiredReplName();  Interpreter intp=factory.getInterpreter(p.getUser(),getId(),requiredReplName);  if (intp == null) {    String intpExceptionMsg=p.getJobName() + "'s Interpreter " + requiredReplName+ " not found";    InterpreterException intpException=new InterpreterException(intpExceptionMsg);    InterpreterResult intpResult=new InterpreterResult(InterpreterResult.Code.ERROR,intpException.getMessage());    p.setReturn(intpResult,intpException);    p.setStatus(Job.Status.ERROR);    throw intpException;  }  if (p.getConfig().get("enabled") == null || (Boolean)p.getConfig().get("enabled")) {    p.setAuthenticationInfo(p.getAuthenticationInfo());    intp.getScheduler().submit(p);  }}  }
class C{  public Line1D intersect(Line1D other,boolean nanPriority){  Double maxLeft=low;  Double minRight=high;  if (nanPriority) {    if (other.low.equals(Double.NaN) || other.low > low) {      maxLeft=other.low;    }    if (other.high.equals(Double.NaN) || other.high < high) {      minRight=other.high;    }  } else {    if (low.equals(Double.NaN) || other.low > low) {      maxLeft=other.low;    }    if (high.equals(Double.NaN) || other.high < high) {      minRight=other.high;    }  }  return new Line1D(maxLeft,minRight);}  }
class C{  public Coin fiatToCoin(Fiat convertFiat){  checkArgument(convertFiat.currencyCode.equals(fiat.currencyCode),"Currency mismatch: %s vs %s",convertFiat.currencyCode,fiat.currencyCode);  final BigInteger converted=BigInteger.valueOf(convertFiat.value).multiply(BigInteger.valueOf(coin.value)).divide(BigInteger.valueOf(fiat.value));  if (converted.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || converted.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0)   throw new ArithmeticException("Overflow");  try {    return Coin.valueOf(converted.longValue());  } catch (  IllegalArgumentException x) {    throw new ArithmeticException("Overflow: " + x.getMessage());  }}  }
class C{  protected void installComponents(){  if ((rendererPane=createCellRendererPane()) != null) {    tree.add(rendererPane);  }}  }
class C{  public LocalDate addToCopy(int value){  return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(),value));}  }
class C{  public Enumeration oids(){  return ordering.elements();}  }
class C{  public void addExcludedSubtree(GeneralSubtree subtree){  GeneralName base=subtree.getBase();switch (base.getTagNo()) {case 1:    excludedSubtreesEmail=unionEmail(excludedSubtreesEmail,extractNameAsString(base));  break;case 2:excludedSubtreesDNS=unionDNS(excludedSubtreesDNS,extractNameAsString(base));break;case 4:excludedSubtreesDN=unionDN(excludedSubtreesDN,(ASN1Sequence)base.getName().toASN1Primitive());break;case 6:excludedSubtreesURI=unionURI(excludedSubtreesURI,extractNameAsString(base));break;case 7:excludedSubtreesIP=unionIP(excludedSubtreesIP,ASN1OctetString.getInstance(base.getName()).getOctets());break;}}  }
class C{  private void sendStageProgressPatch(State current,TaskState.TaskStage stage,TaskState.SubStage subStage){  if (current.isSelfProgressionDisabled) {    return;  }  sendSelfPatch(buildPatch(stage,subStage,null));}  }
class C{  public PeerNetwork clone(){  PeerNetwork clone=new BluetoothLEPeerNetwork(mBluetoothLEDevice);  return clone;}  }
class C{  public BasicListHeaderIterator(List headers,String name){  if (headers == null) {    throw new IllegalArgumentException("Header list must not be null.");  }  this.allHeaders=headers;  this.headerName=name;  this.currentIndex=findNext(-1);  this.lastIndex=-1;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSComment("IO movement methodName") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.560 -0500",hash_original_method="649E6082D773CF70C752E5716C5CC7C1",hash_generated_method="EAB1D91353181ABAEA72D7E1487AC34B") public void print(Object obj){  addTaint(obj.getTaint());}  }
class C{  protected void startActivityForResult(Intent intent,int code){  if (fragment == null) {    activity.startActivityForResult(intent,code);  } else {    fragment.startActivityForResult(intent,code);  }}  }
class C{  public Map<String,String> convertDataToStrings(Map<String,Object> data){  Map<String,String> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      Object object=data.get(key);      if (object instanceof WebAuthenticationDetails) {        WebAuthenticationDetails authenticationDetails=(WebAuthenticationDetails)object;        results.put("remoteAddress",authenticationDetails.getRemoteAddress());        results.put("sessionId",authenticationDetails.getSessionId());      } else       if (object != null) {        results.put(key,object.toString());      } else {        results.put(key,"null");      }    }  }  return results;}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:52.100 -0500",hash_original_method="F6BD36F7AA33E2CDDBD8ECFA17198BE9",hash_generated_method="F6BD36F7AA33E2CDDBD8ECFA17198BE9") void clear(){  mSealed=false;  mBooleanProperties=0;  mCurrentItemIndex=UNDEFINED;  mItemCount=UNDEFINED;  mFromIndex=UNDEFINED;  mToIndex=UNDEFINED;  mScrollX=UNDEFINED;  mScrollY=UNDEFINED;  mMaxScrollX=UNDEFINED;  mMaxScrollY=UNDEFINED;  mAddedCount=UNDEFINED;  mRemovedCount=UNDEFINED;  mClassName=null;  mContentDescription=null;  mBeforeText=null;  mParcelableData=null;  mText.clear();  mSourceViewId=UNDEFINED;  mSourceWindowId=UNDEFINED;  mConnectionId=UNDEFINED;}  }
class C{  public boolean isAddOnUpdateIssues(){  return addOnUpdateIssues;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.211 -0500",hash_original_method="C6D368F9A631ACABA788A2C236A29B4D",hash_generated_method="B538328CDE3330B9B227E3BE8EDDED53") public static boolean isIncomingCallIntent(Intent intent){  if (intent == null)   return false;  String callId=getCallId(intent);  String offerSd=getOfferSessionDescription(intent);  return ((callId != null) && (offerSd != null));}  }
class C{  public void columnMoved(TableColumnModelEvent e){  if (e.getFromIndex() == e.getToIndex())   return;  LimeTableColumn from=getFromColumn(e);  LimeTableColumn to=getToColumn(e);  setOrder(from,e.getFromIndex());  setOrder(to,e.getToIndex());  save();}  }
class C{  private static String normalizePath(final String path){  return path.replace("%7E","~").replace(" ","%20");}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public GridBoundedConcurrentLinkedHashSet(int max,int initCap,float loadFactor,int concurLvl,QueuePolicy qPlc){  super(new GridBoundedConcurrentLinkedHashMap<E,Object>(max,initCap,loadFactor,concurLvl,qPlc));}  }
class C{  public static boolean isXtremIOVolume(Volume volume,DbClient dbClient){  StorageSystem storage=dbClient.queryObject(StorageSystem.class,volume.getStorageController());  return storage != null && storage.deviceIsType(Type.xtremio);}  }
class C{  private void readCoordinate() throws IOException {  for (int i=0; i < inputDimension; i++) {    if (i <= 1) {      ordValues[i]=precisionModel.makePrecise(dis.readDouble());    } else {      ordValues[i]=dis.readDouble();    }  }}  }
class C{  public long longValue(){  return lb.get(0);}  }
class C{  public static void unlockFabric(String fabricId,InterProcessLock lock){  try {    if (lock != null) {      lock.release();    }  } catch (  Exception ex) {    _log.error("Exception unlocking fabric: " + fabricId);    throw NetworkDeviceControllerException.exceptions.exceptionReleasingFabricLock(fabricId,ex);  }}  }
class C{  public static char reverseBytes(char c){  return (char)((c << 8) | (c >> 8));}  }
class C{  private void jbInit() throws Exception {  setWidth("410px");  setHeight("410px");  Borderlayout layout=new Borderlayout();  Center center=new Center();  layout.appendChild(center);  center.setFlex(true);  center.setAutoscroll(true);  center.setStyle("border: none");  this.appendChild(layout);  South south=new South();  layout.appendChild(south);  Grid grid=new Grid();  grid.setWidth("400px");  grid.setStyle("margin:0; padding:0;");  grid.makeNoStrip();  grid.setOddRowSclass("even");  center.appendChild(grid);  rows=new Rows();  grid.appendChild(rows);  confirmPanel.addActionListener(this);  south.appendChild(confirmPanel);}  }
class C{  private RedBlackNode rotate(Comparable item,RedBlackNode parent){  if (compare(item,parent) < 0)   return parent.left=compare(item,parent.left) < 0 ? rotateWithLeftChild(parent.left) : rotateWithRightChild(parent.left); else   return parent.right=compare(item,parent.right) < 0 ? rotateWithLeftChild(parent.right) : rotateWithRightChild(parent.right);}  }
class C{  public ImageMaster(String propertiesFile){  Properties props=new Properties();  loadProperties(props,propertiesFile);  setProperties(props);}  }
class C{  private void loadPaySelectInfo(){  log.info("VPayPrint.loadPaySelectInfo");  if (m_C_PaySelection_ID <= 0)   return;  loadPaySelectInfo(m_C_PaySelection_ID);  fBank.setText(bank);  fCurrency.setText(currency);  fBalance.setValue(balance);  m_frame.pack();  loadPaymentRule();}  }
class C{  private void emitLFtoc(Operator operator,Register RT,RVMField field){  Register JTOC=regpool.getPhysicalRegisterSet().asPPC().getJTOC();  Offset offset=field.getOffset();  int valueLow=PPCMaskLower16(offset);  Instruction s;  if (fits(offset,16)) {    s=MIR_Load.create(operator,D(RT),A(JTOC),IC(valueLow));    EMIT(s);  } else {    int valueHigh=PPCMaskUpper16(offset);    if (VM.VerifyAssertions)     VM._assert(fits(offset,32));    Register reg=regpool.getAddress();    EMIT(MIR_Binary.create(PPC_ADDIS,A(reg),A(JTOC),IC(valueHigh)));    s=MIR_Load.create(operator,D(RT),A(reg),IC(valueLow));    EMIT(s);  }}  }
class C{  private Utf8Constant parseUtf8Constant(int index) throws IOException {  int length=readShort();  StringBuilder cb=new StringBuilder();  for (int i=0; i < length; i++) {    int ch=read();    if (ch < 0x80) {      cb.append((char)ch);    } else     if ((ch & 0xe0) == 0xc0) {      int ch2=read();      i++;      cb.append((char)(((ch & 0x1f) << 6) + (ch2 & 0x3f)));    } else {      int ch2=read();      int ch3=read();      i+=2;      cb.append((char)(((ch & 0xf) << 12) + ((ch2 & 0x3f) << 6) + ((ch3 & 0x3f))));    }  }  return new Utf8Constant(_class.getConstantPool(),index,cb.toString());}  }
class C{  protected IndexedEnumVariableValue(){}  }
class C{  public boolean saveLeague(File saveFile){  StringBuilder sb=new StringBuilder();  if (isHardMode) {    sb.append((2016 + leagueHistory.size()) + ": " + userTeam.abbr+ " ("+ (userTeam.totalWins - userTeam.wins)+ "-"+ (userTeam.totalLosses - userTeam.losses)+ ") "+ userTeam.totalCCs+ " CCs, "+ userTeam.totalNCs+ " NCs>[HARD]%\n");  } else {    sb.append((2016 + leagueHistory.size()) + ": " + userTeam.abbr+ " ("+ (userTeam.totalWins - userTeam.wins)+ "-"+ (userTeam.totalLosses - userTeam.losses)+ ") "+ userTeam.totalCCs+ " CCs, "+ userTeam.totalNCs+ " NCs>[EASY]%\n");  }  for (int i=0; i < leagueHistory.size(); ++i) {    for (int j=0; j < leagueHistory.get(i).length; ++j) {      sb.append(leagueHistory.get(i)[j] + "%");    }    sb.append("\n");  }  sb.append("END_LEAGUE_HIST\n");  for (int i=0; i < leagueHistory.size(); ++i) {    sb.append(heismanHistory.get(i) + "\n");  }  sb.append("END_HEISMAN_HIST\n");  for (  Team t : teamList) {    sb.append(t.conference + "," + t.name+ ","+ t.abbr+ ","+ t.teamPrestige+ ","+ (t.totalWins - t.wins)+ ","+ (t.totalLosses - t.losses)+ ","+ t.totalCCs+ ","+ t.totalNCs+ ","+ t.rivalTeam+ ","+ t.totalNCLosses+ ","+ t.totalCCLosses+ ","+ t.totalBowls+ ","+ t.totalBowlLosses+ ","+ t.teamStratOffNum+ ","+ t.teamStratDefNum+ ","+ (t.showPopups ? 1 : 0)+ ","+ t.yearStartWinStreak.getStreakCSV()+ ","+ t.teamTVDeal+ ","+ t.confTVDeal+ "%"+ t.evenYearHomeOpp+ "%\n");    sb.append(t.getPlayerInfoSaveFile());    sb.append("END_PLAYERS\n");  }  sb.append(userTeam.name + "\n");  for (  String s : userTeam.teamHistory) {    sb.append(s + "\n");  }  sb.append("END_USER_TEAM\n");  if (saveBless != null) {    sb.append(saveBless.abbr + "\n");    sb.append("END_BLESS_TEAM\n");  } else {    sb.append("NULL\n");    sb.append("END_BLESS_TEAM\n");  }  if (saveCurse != null) {    sb.append(saveCurse.abbr + "\n");    sb.append("END_CURSE_TEAM\n");  } else {    sb.append("NULL\n");    sb.append("END_CURSE_TEAM\n");  }  sb.append(leagueRecords.getRecordsStr());  sb.append("END_LEAGUE_RECORDS\n");  sb.append(yearStartLongestWinStreak.getStreakCSV());  sb.append("\nEND_LEAGUE_WIN_STREAK\n");  sb.append(userTeamRecords.getRecordsStr());  sb.append("END_USER_TEAM_RECORDS\n");  for (  String s : userTeam.hallOfFame) {    sb.append(s + "\n");  }  sb.append("END_HALL_OF_FAME\n");  try (Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(saveFile),"utf-8"))){    writer.write(sb.toString());    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public void testGetAndPut(){  MySQLPacket array=new MySQLPacket(16,(byte)1);  byte oneByte=127;  byte[] moreBytes={0,-7,7,-12,12};  int oneInt=65278;  int oneLongInt=16777215;  int oneLong=2147483647;  long oneLongLong=2104061312563890L;  String oneString="abcdef";  array.putByte(oneByte);  array.putBytes(moreBytes);  array.putInt16(oneInt);  array.putLenBytes(moreBytes);  array.putInt32(oneLong);  array.putInt24(oneLongInt);  array.putLong(oneLongLong);  array.putString(oneString);  array.reset();  assertEquals(oneByte,array.getByte());  compareBytes(moreBytes,array.getBytes(moreBytes.length));  assertEquals(oneInt,array.getUnsignedShort());  compareBytes(moreBytes,array.getLenEncodedBytes());  assertEquals(oneLong,array.getInt32());  assertEquals(oneLongInt,array.getUnsignedInt24());  assertEquals(oneLongLong,array.getLong());  assertEquals(oneString,array.getString());}  }
class C{  private void parseHeader(){  byte[] frameData=headerScratchBytes.data;  if (mediaFormat == null) {    mediaFormat=DtsUtil.parseDtsFormat(frameData,null,C.UNKNOWN_TIME_US,null);    output.format(mediaFormat);  }  sampleSize=DtsUtil.getDtsFrameSize(frameData);  sampleDurationUs=(int)(C.MICROS_PER_SECOND * DtsUtil.parseDtsAudioSampleCount(frameData) / mediaFormat.sampleRate);}  }
class C{  @Override protected int computeHorizontalScrollRange(){  if (!mHorizontal) {    return super.computeHorizontalScrollRange();  }  final int count=getChildCount();  final int contentWidth=getWidth() - getPaddingRight() - getPaddingLeft();  if (count == 0) {    return contentWidth;  }  int scrollRange=getChildAt(0).getRight();  final int scrollX=getScrollX();  final int overscrollBottom=Math.max(0,scrollRange - contentWidth);  if (scrollX < 0) {    scrollRange-=scrollX;  } else   if (scrollX > overscrollBottom) {    scrollRange+=scrollX - overscrollBottom;  }  return scrollRange;}  }
class C{  protected void engineInit(int keysize,SecureRandom random){  if (keysize != 56) {    throw new InvalidParameterException("Wrong keysize: must " + "be equal to 56");  }  this.engineInit(random);}  }
class C{  public static void fill(double[] array,double value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  @Override public void onUIRefreshPrepare(PtrFrameLayout frame){}  }
class C{  public SIPDialog(SipProviderImpl sipProvider,SIPResponse sipResponse){  this(sipProvider);  this.sipStack=(SIPTransactionStack)sipProvider.getSipStack();  this.setLastResponse(null,sipResponse);  this.localSequenceNumber=sipResponse.getCSeq().getSeqNumber();  this.originalLocalSequenceNumber=localSequenceNumber;  this.myTag=sipResponse.getFrom().getTag();  this.hisTag=sipResponse.getTo().getTag();  this.localParty=sipResponse.getFrom().getAddress();  this.remoteParty=sipResponse.getTo().getAddress();  this.method=sipResponse.getCSeq().getMethod();  this.callIdHeader=sipResponse.getCallId();  this.serverTransactionFlag=false;  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("Creating a dialog : " + this);    sipStack.getStackLogger().logStackTrace();  }  this.isBackToBackUserAgent=sipStack.isBackToBackUserAgent;  addEventListener(sipStack);}  }
class C{  public static StackMapTable make(ClassPool classes,MethodInfo minfo) throws BadBytecode {  CodeAttribute ca=minfo.getCodeAttribute();  if (ca == null)   return null;  TypedBlock[] blocks;  try {    blocks=TypedBlock.makeBlocks(minfo,ca,true);  } catch (  BasicBlock.JsrBytecode e) {    return null;  }  if (blocks == null)   return null;  MapMaker mm=new MapMaker(classes,minfo,ca);  try {    mm.make(blocks,ca.getCode());  } catch (  BadBytecode bb) {    throw new BadBytecode(minfo,bb);  }  return mm.toStackMap(blocks);}  }
class C{  private void createMissingValues(){  String sql="SELECT ra.A_RegistrationAttribute_ID " + "FROM A_RegistrationAttribute ra" + " LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)"+ " LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) "+ "WHERE r.A_Registration_ID=?"+ " AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v "+ "WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getA_Registration_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),"?");      v.saveEx();    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,null,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }}  }
class C{  public boolean isEqual(char[] charArray,int itemIndex){  short hashIndex=getWordItemTableIndex(charArray[0]);  return Utility.compareArray(charArray,1,wordItem_charArrayTable[wordIndexTable[hashIndex]][itemIndex],0) == 0;}  }
class C{  public TestSubscriber(Subscriber<? super Payload> actual){  this(actual,null);}  }
class C{  private void cmd_archive(){  boolean success=false;  byte[] data=Document.getPDFAsArray(m_reportEngine.getLayout().getPageable(false));  if (data != null) {    MArchive archive=new MArchive(Env.getCtx(),m_reportEngine.getPrintInfo(),null);    archive.setBinaryData(data);    success=archive.save();  }  if (success)   ADialog.info(m_WindowNo,this,"Archived"); else   ADialog.error(m_WindowNo,this,"ArchiveError");}  }
class C{  public static void main(String[] args){  try {    if (args.length < 2) {      System.out.println("Arguments not valid : {model, folder}.");    } else {      URI modelURI=URI.createFileURI(args[0]);      File folder=new File(args[1]);      List<String> arguments=new ArrayList<String>();      GenerateSwitchyard generator=new GenerateSwitchyard(modelURI,folder,arguments);      for (int i=2; i < args.length; i++) {        generator.addPropertiesFile(args[i]);      }      generator.doGenerate(new BasicMonitor());    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static FireworkEffectBuilder builder(){  return new FireworkEffectBuilder(FireworkEffectType.BALL);}  }
class C{  public static String readPascal(final DataBuffer dataBuffer) throws IOException {  final int len=dataBuffer.readInt();  if (len < 0 || len > 65536) {    return null;  }  final byte[] payload=new byte[len];  dataBuffer.read(payload);  return WChar.getString(payload,true);}  }
class C{  public static void replaceContents(String id,Element with){  Element parent=getElementById(id);  replaceContents(parent,with);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.260 -0500",hash_original_method="6368B146C50DA8D7E84E7623E4D72233",hash_generated_method="B7D1CA39FA0521F03A0F238F949058BF") public Object clone(){  GenericObjectList retval=(GenericObjectList)super.clone();  for (ListIterator<GenericObject> iter=retval.listIterator(); iter.hasNext(); ) {    GenericObject obj=(GenericObject)((GenericObject)iter.next()).clone();    iter.set(obj);  }  return retval;}  }
class C{  private void drawClusters(Clustering<OPTICSModel> clustering,Hierarchy.Iter<Cluster<OPTICSModel>> clusters,int depth,Map<Cluster<?>,String> colormap){  final double scale=StyleLibrary.SCALE;  for (; clusters.valid(); clusters.advance()) {    Cluster<OPTICSModel> cluster=clusters.get();    try {      OPTICSModel model=cluster.getModel();      final double x1=plotwidth * ((model.getStartIndex() + .25) / this.optics.getResult().size());      final double x2=plotwidth * ((model.getEndIndex() + .75) / this.optics.getResult().size());      final double y=plotheight + depth * scale * 0.01;      Element e=svgp.svgLine(x1,y,x2,y);      SVGUtil.addCSSClass(e,CSS_BRACKET);      String color=colormap.get(cluster);      if (color != null) {        SVGUtil.setAtt(e,SVGConstants.SVG_STYLE_ATTRIBUTE,SVGConstants.CSS_STROKE_PROPERTY + ":" + color);      }      layer.appendChild(e);    } catch (    ClassCastException e) {      LOG.warning("Expected OPTICSModel, got: " + cluster.getModel().getClass().getSimpleName());    }    final Hierarchy.Iter<Cluster<OPTICSModel>> children=clustering.getClusterHierarchy().iterChildren(cluster);    if (children != null) {      drawClusters(clustering,children,depth + 1,colormap);    }  }}  }
class C{  public static void splash(final Image image){  if ((instance == null) && (image != null)) {    Frame f=new Frame();    instance=new SplashWindow(f,image);    instance.setVisible(true);    if (!EventQueue.isDispatchThread() && (Runtime.getRuntime().availableProcessors() == 1)) {synchronized (instance) {        while (!instance.paintCalled) {          try {            instance.wait();          } catch (          InterruptedException e) {          }        }      }    }  }}  }
class C{  private void refillBuffer() throws IOException, EOFException {  firstbyteoffset+=(curptr + bytesinbuffer);  int err=super.read(buffer,0,buffer.length);  curptr=0;  if (err == -1)   throw new EOFException();  bytesinbuffer=err;}  }
class C{  public CFunctionNodeInlineAction(final JFrame parent,final ZyGraph graph,final INaviFunctionNode node){  super(String.format("Inline function %s",node.getFunction().getName()));  Preconditions.checkNotNull(parent,"IE02158: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE02159: Graph argument can not be null");  Preconditions.checkNotNull(node,"IE02288: Node argument can not be null");  m_parent=parent;  m_graph=graph;  m_node=node;}  }
class C{  public static <T>LazyPBagX<T> fromIterable(Reducer<PBag<T>> collector,Iterable<T> it){  if (it instanceof LazyPBagX)   return (LazyPBagX<T>)it;  if (it instanceof PBag)   return new LazyPBagX<T>((PBag<T>)it,collector);  return new LazyPBagX<T>(Flux.fromIterable(it),collector);}  }
class C{  @Override public boolean isCommandStationConsistPossible(){  return true;}  }
class C{  private void init(){  histogramConsumer=new AttributeType(this,"Histogram","getValue",double[].class,true);  addConsumerType(histogramConsumer);}  }
class C{  private void unselectNodes(final List<NaviNode> toUnselect){  m_graph.removeListener(m_graphSelectionListener);  m_graph.selectNodes(toUnselect,false);  m_graph.addListener(m_graphSelectionListener);}  }
class C{  String capitalise(String s){  if (s.length() == 0) {    return s;  }  StringBuffer s1=new StringBuffer(s);  if (Character.isLowerCase(s1.charAt(0))) {    s1.setCharAt(0,Character.toUpperCase(s1.charAt(0)));  }  for (int j=1; j < s1.length(); j++) {    if (Character.isUpperCase(s1.charAt(j))) {      s1.setCharAt(j,Character.toLowerCase(s1.charAt(j)));    }  }  return s1.toString();}  }
class C{  public boolean equals(Object objectToCompare){  if (super.equals(objectToCompare))   return true;  if (!(objectToCompare instanceof PortfolioAccount))   return false;  PortfolioAccount theOtherOrder=(PortfolioAccount)objectToCompare;  if (!theOtherOrder.getAccount().getAccountNumber().equals((this.getAccount().getAccountNumber()))) {    return false;  }  if (!theOtherOrder.getPortfolio().getName().equals((this.getPortfolio().getName()))) {    return false;  }  return true;}  }
class C{  @Override public void close() throws IOException {  close(false);}  }
class C{  public LRParserSerialization(String strFileName){  fFileName=strFileName;}  }
class C{  void advance(){  Moment m=stack.peek();  while (m != null) {    if (m.phase == done) {      stack.pop();      if (stack.isEmpty()) {        break;      }      m=stack.peek();      m.phase=advancePhase(m.phase);    } else     if (m.phase == left) {      if (m.node.above != null) {        m=new Moment(m.node.above,left);        stack.push(m);      } else {        m.phase=advancePhase(m.phase);      }    } else     if (m.phase == self) {      m.phase=advancePhase(m.phase);      break;    } else {      if (m.node.below != null) {        m=new Moment(m.node.below,left);        stack.push(m);      } else {        m.phase=advancePhase(m.phase);      }    }  }}  }
class C{  @Override public void editCut(){}  }
class C{  private static boolean isUnsignedPlugin(ProtectionDomain domain){  if (!(domain.getClassLoader() instanceof PluginClassLoader)) {    return false;  }  if (key == null) {    return true;  }  if (domain.getCodeSource() == null) {    return true;  }  if (RapidMiner.getVersion().isSnapshot() && !isSecurityEnforced()) {    return false;  }  if (domain.getCodeSource().getCertificates() == null) {    return true;  }  try {    verifyCertificates(domain.getCodeSource().getCertificates());    return false;  } catch (  GeneralSecurityException e) {    LogService.getRoot().log(Level.WARNING,"Invalid certificate for " + domain.getCodeSource().getLocation());    return true;  }catch (  Exception e) {    LogService.getRoot().log(Level.WARNING,"Error verifying certificate for " + domain.getCodeSource().getLocation(),e);    return true;  }}  }
class C{  public TestManagedBeanFactory(){  super("TestManagedBeanFactory");}  }
class C{  public boolean supportsFullJoin(){  return supportedJOINs[JoinRowSet.FULL_JOIN];}  }
class C{  public boolean canSpawn(World world,Chunk chunk,BlockPos pos,IBlockState blockState,IBlockState surfaceBlockState){  return surfaceBlockState.isNormalCube();}  }
class C{  static String valueAndClass(Object o){  if (o != null) {    return o + " (class: " + o.getClass().getSimpleName()+ ")";  }  return "null";}  }
class C{  static Map<URI,List<Initiator>> makeNet2InitiatorsMap(List<Initiator> initiators,int lowNet,int highNet){  HashMap<URI,List<Initiator>> map=new HashMap<URI,List<Initiator>>();  for (int i=lowNet; i <= highNet; i++) {    URI net=(URI.create("net" + i));    map.put(net,new ArrayList<Initiator>());  }  int numNetworks=highNet - lowNet + 1;  for (int i=0; i < initiators.size(); i++) {    Initiator initiator=initiators.get(i);    int index=i % numNetworks;    URI net=URI.create("net" + (index + lowNet));    map.get(net).add(initiator);  }  return map;}  }
class C{  public void startTag(String name,HashMap<String,String> parameters) throws IOException {  startTag(name,parameters,true);  tab++;}  }
class C{  @Override public void run(int connId,String[] args){  if (!(server.getGame().getOptions().booleanOption("really_allow_nukes") && server.getGame().getOptions().booleanOption("allow_nukes"))) {    server.sendServerChat(connId,"Command-line nukes are not enabled in this game.");    return;  }  if (args.length == 4) {    try {      int[] nuke=new int[3];      for (int i=1; i < 4; i++) {        nuke[i - 1]=Integer.parseInt(args[i]);      }      if (!server.getGame().getBoard().contains(nuke[0] - 1,nuke[1] - 1)) {        server.sendServerChat(connId,"Specified hex is not on the board.");        return;      }      server.addScheduledNuke(nuke);      server.sendServerChat(connId,"A nuke is incoming!  Take cover!");    } catch (    Exception e) {      server.sendServerChat(connId,"Nuke command failed (1).  Proper format is \"/nuke <x> <y> <type>\" or \"/nuke <x> <y> <damage> <degredation> <secondary radius> <craterdepth>\" where type is 0-4 (0: Davy-Crockett-I, 1: Davy-Crockett-M, 2: Alamo, 3: Santa Ana, 4: Peacemaker) and hex x,y is x=column number and y=row number (hex 0923 would be x=9 and y=23)");    }  } else   if (args.length == 7) {    try {      int[] nuke=new int[6];      for (int i=1; i < 7; i++) {        nuke[i - 1]=Integer.parseInt(args[i]);      }      if (!server.getGame().getBoard().contains(nuke[0] - 1,nuke[1] - 1)) {        server.sendServerChat(connId,"Specified hex is not on the board.");        return;      }      server.addScheduledNuke(nuke);      server.sendServerChat(connId,"A nuke is incoming!  Take cover!");    } catch (    Exception e) {      server.sendServerChat(connId,"Nuke command failed (2).  Proper format is \"/nuke <x> <y> <type>\" or \"/nuke <x> <y> <damage> <degredation> <secondary radius> <craterdepth>\"");    }  } else {    server.sendServerChat(connId,"Nuke command failed (3).  Proper format is \"/nuke <x> <y> <type>\" or \"/nuke <x> <y> <damage> <degredation> <secondary radius> <craterdepth>\" where type is 0-4 (0: Davy-Crockett-I, 1: Davy-Crockett-M, 2: Alamo, 3: Santa Ana, 4: Peacemaker) and hex x,y is x=column number and y=row number (hex 0923 would be x=9 and y=23)");  }}  }
class C{  public final void recalculateVisibleLines(){  if (painter == null) {    return;  }  int height=painter.getHeight();  int lineHeight=painter.getFontMetrics().getHeight();  int oldVisibleLines=visibleLines;  visibleLines=height / lineHeight;  updateScrollBars();}  }
class C{  public static <T>Stream<T> stream(final Adapter<T> adapter){  return adapter.stream();}  }
class C{  private void move(final Player player,final RPAction action){  if (action.has(X) && action.has(Y)) {    final int x=action.getInt(X);    final int y=action.getInt(Y);    if (player.has(TELECLICKMODE) && action.has("double_click")) {      final StendhalRPZone zone=player.getZone();      if (!player.stopped() && Testing.MOVEMENT) {        player.stop();      }      player.teleport(zone,x,y,null,null);    } else {      final List<Node> path=Path.searchPath(player,x,y);      extendPathForZoneChangeIfRequested(action,path);      player.setPath(new FixedPath(path,false));    }  }}  }
class C{  public void addMapping(String facetId,String facetValueId){  setAttribute(facetId,facetValueId);}  }
class C{  private String match(X_I_BankStatement ibs){  if (m_matchers == null || ibs == null || ibs.getC_Payment_ID() != 0)   return "--";  log.fine("" + ibs);  BankStatementMatchInfo info=null;  for (int i=0; i < m_matchers.length; i++) {    if (m_matchers[i].isMatcherValid()) {      info=m_matchers[i].getMatcher().findMatch(ibs);      if (info != null && info.isMatched()) {        if (info.getC_Payment_ID() > 0)         ibs.setC_Payment_ID(info.getC_Payment_ID());        if (info.getC_Invoice_ID() > 0)         ibs.setC_Invoice_ID(info.getC_Invoice_ID());        if (info.getC_BPartner_ID() > 0)         ibs.setC_BPartner_ID(info.getC_BPartner_ID());        ibs.saveEx();        return "OK";      }    }  }  return "--";}  }
class C{  public NodeMetadataLeftIndexedMultiSegmentBipartiteGraph(int maxNumSegments,int maxNumEdgesPerSegment,BipartiteGraphSegmentProvider<NodeMetadataLeftIndexedBipartiteGraphSegment> bipartiteGraphSegmentProvider,MultiSegmentReaderAccessibleInfoProvider<NodeMetadataLeftIndexedBipartiteGraphSegment> multiSegmentReaderAccessibleInfoProvider,StatsReceiver statsReceiver){  super(maxNumSegments,maxNumEdgesPerSegment,bipartiteGraphSegmentProvider,multiSegmentReaderAccessibleInfoProvider,statsReceiver.scope("NodeMetadataLeftIndexedMultiSegmentBipartiteGraph"));}  }
class C{  public Node beforeDecode(mxCodec dec,Node node,Object into){  if (node instanceof Element) {    Element elt=(Element)node;    mxGraphModel model=null;    if (into instanceof mxGraphModel) {      model=(mxGraphModel)into;    } else {      model=new mxGraphModel();    }    Node root=elt.getElementsByTagName("root").item(0);    mxICell rootCell=null;    if (root != null) {      Node tmp=root.getFirstChild();      while (tmp != null) {        mxICell cell=dec.decodeCell(tmp,true);        if (cell != null && cell.getParent() == null) {          rootCell=cell;        }        tmp=tmp.getNextSibling();      }      root.getParentNode().removeChild(root);    }    if (rootCell != null) {      model.setRoot(rootCell);    }  }  return node;}  }
class C{  public ContainsConditionBuilder docValues(Boolean docValues){  this.docValues=docValues;  return this;}  }
class C{  public static long scaleLargeTimestamp(long timestamp,long multiplier,long divisor){  if (divisor >= multiplier && (divisor % multiplier) == 0) {    long divisionFactor=divisor / multiplier;    return timestamp / divisionFactor;  } else   if (divisor < multiplier && (multiplier % divisor) == 0) {    long multiplicationFactor=multiplier / divisor;    return timestamp * multiplicationFactor;  } else {    double multiplicationFactor=(double)multiplier / divisor;    return (long)(timestamp * multiplicationFactor);  }}  }
class C{  private CompletionFlags(){}  }
class C{  public static Id parse(final String str){  final Id r=new Id();  r.fromString(str);  return r;}  }
class C{  @Deprecated public static boolean equals(final char[] a1,final char a2[]){  int i=a1.length;  if (i != a2.length)   return false;  while (i-- != 0)   if (!((a1[i]) == (a2[i])))   return false;  return true;}  }
class C{  public static boolean saveWifiConfiguration(Context context,WifiConfiguration wifiConfiguration){  WifiManager wifiManager=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);  if (wifiConfiguration.networkId == -1) {    int networkId=wifiManager.addNetwork(wifiConfiguration);    if (networkId != -1) {      if (wifiManager.saveConfiguration()) {        return true;      } else {        wifiManager.removeNetwork(networkId);      }    }  } else {    int networkId=wifiManager.updateNetwork(wifiConfiguration);    if (networkId != -1) {      if (wifiManager.saveConfiguration()) {        return true;      }    }  }  return false;}  }
class C{  static void bailout(String errorMsg,boolean showUsageInfo,int exitCode){  final String highlight="***************************************************************";  if (showUsageInfo) {    usageInfo(false);  }  System.out.println(highlight + "\nError: " + errorMsg);  if (showUsageInfo) {    System.out.println("See program parameters above");  }  System.out.println(highlight);  System.exit(exitCode);}  }
class C{  public String index(){  return this.index;}  }
class C{  public boolean retainAll(AbstractIntList other){  if (!(other instanceof IntArrayList))   return super.retainAll(other);  int limit=other.size() - 1;  int j=0;  int[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    IntArrayList sortedList=(IntArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static void downto(BigInteger self,Number to,@ClosureParams(FirstParam.class) Closure closure){  if (to instanceof BigDecimal) {    final BigDecimal one=BigDecimal.valueOf(10,1);    final BigDecimal to1=(BigDecimal)to;    final BigDecimal selfD=new BigDecimal(self);    if (selfD.compareTo(to1) >= 0) {      for (BigDecimal i=selfD; i.compareTo(to1) >= 0; i=i.subtract(one)) {        closure.call(i.toBigInteger());      }    } else     throw new GroovyRuntimeException(MessageFormat.format("The argument ({0}) to downto() cannot be greater than the value ({1}) it''s called on.",to,self));  } else   if (to instanceof BigInteger) {    final BigInteger one=BigInteger.valueOf(1);    final BigInteger to1=(BigInteger)to;    if (self.compareTo(to1) >= 0) {      for (BigInteger i=self; i.compareTo(to1) >= 0; i=i.subtract(one)) {        closure.call(i);      }    } else     throw new GroovyRuntimeException(MessageFormat.format("The argument ({0}) to downto() cannot be greater than the value ({1}) it''s called on.",to,self));  } else {    final BigInteger one=BigInteger.valueOf(1);    final BigInteger to1=new BigInteger(to.toString());    if (self.compareTo(to1) >= 0) {      for (BigInteger i=self; i.compareTo(to1) >= 0; i=i.subtract(one)) {        closure.call(i);      }    } else     throw new GroovyRuntimeException(MessageFormat.format("The argument ({0}) to downto() cannot be greater than the value ({1}) it''s called on.",to,self));  }}  }
class C{  private void reloadSnapshot(){  int selectedRow=table.getSelectedRow();  if (selectedRow != -1 && selectedRow < getModel().getBreakpoints().size() && getModel().isNewlyReceived(selectedRow)) {    Breakpoint breakpoint=getModel().getBreakpoints().get(selectedRow);    if (breakpoint != null && table.getSelectedRows().length == 1) {      selectSnapshot(breakpoint,true);    }  }}  }
class C{  public void writeText(Object text,String componentPropertyName) throws IOException {  if (text == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  closeStartIfNecessary();  if (dontEscape) {    writer.write(text.toString());  } else {    Util.writeText(writer,buffer,text.toString());  }}  }
class C{  protected void validateSupportedBlock(java.lang.String[] param){}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  public Message(){}  }
class C{  public static boolean canRemoveParentheses(Expression expression,ASTNode parent,StructuralPropertyDescriptor locationInParent){  if (!(expression instanceof ParenthesizedExpression)) {    return false;  }  return !needsParentheses(getExpression((ParenthesizedExpression)expression),parent,locationInParent);}  }
class C{  @Override public void start() throws RunnerException {  if (process != null) {    throw new IllegalStateException("Process is already started");  }  try {    process=Runtime.getRuntime().exec(new CommandLine("gulp").add("serve:app").toShellCommand(),null,workDir);  } catch (  IOException e) {    throw new RunnerException(e.getCause());  }}  }
class C{  public Format(int id){  this.mId=id;}  }
class C{  public AnchorUpdateControl(Layout layout,String action){  this(new Layout[]{layout},action);}  }
class C{  public static PickerIDAttribute encodeRaypickColorId(GameObject go){  PickerIDAttribute goIDa=new PickerIDAttribute();  encodeRaypickColorId(go.id,goIDa);  return goIDa;}  }
class C{  public FastBufferedReader(final Reader r,final int bufferSize){  this(bufferSize);  this.reader=r;}  }
class C{  public void afterCacheCreate(SystemMemberCacheEvent event){  adminDS.handleCacheCreateEvent(event);}  }
class C{  private void loadCacheToUpdateList(){  JenkinsUpdater jenkinsUpdater=JenkinsUpdater.getInstance();  Collection<CommitItem> running=CommitItemUtils.getRunning();  if (running.size() > 0) {    VerigreenLogger.get().log(getClass().getName(),RuntimeUtils.getCurrentMethodName(),String.format("Updating JenkinsUpdater with %d running processes from cache",running.size()));  }  for (  CommitItem commitItem : running) {    jenkinsUpdater.getObservers().add(CollectorApi.getCommitItemContainer().get(commitItem.getKey()));  }}  }
class C{  public final boolean assertOffset(final long offset){  if (offset < 0 || offset > maxOffset) {    throw new IllegalArgumentException("Maximum offset exceeded: offset must be in [0:" + maxOffset + "], but was "+ offset);  }  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return SGenPackage.Literals.FEATURE_TYPE;}  }
class C{  public static List<TStream<JsonObject>> splitAlert(TStream<JsonObject> alertStream,int wellId){  List<TStream<JsonObject>> allStreams=alertStream.split(5,null);  return allStreams;}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  LOGGER.info("Starting step with Id " + this.getId());  InputStream stream=null;  try {    final String outputFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,outputFileNameTemplate);    stream=new FileInputStream(outputFilePath);    final PantherMatchParser parser=this.parser;    Set<RawProtein<PantherRawMatch>> parsedResults=parser.parse(stream);    RawMatch represantiveRawMatch=null;    int matchCount=0;    for (    final RawProtein<PantherRawMatch> rawProtein : parsedResults) {      matchCount+=rawProtein.getMatches().size();      if (represantiveRawMatch == null) {        if (rawProtein.getMatches().size() > 0) {          represantiveRawMatch=rawProtein.getMatches().iterator().next();        }      }    }    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("PANTHER: Retrieved " + parsedResults.size() + " proteins.");      LOGGER.debug("PANTHER: A total of " + matchCount + " raw matches.");    }    LOGGER.info("Persisting parsed raw matches...");    rawMatchDAO.insertProteinMatches(parsedResults);    Long now=System.currentTimeMillis();    if (matchCount > 0) {      int matchesFound=0;      int waitTimeFactor=Utilities.getWaitTimeFactor(matchCount).intValue();      if (represantiveRawMatch != null) {        Utilities.verboseLog("represantiveRawMatch :" + represantiveRawMatch.toString());        String signatureLibraryRelease=represantiveRawMatch.getSignatureLibraryRelease();        while (matchesFound < matchCount) {          Utilities.sleep(waitTimeFactor * 1000);          matchesFound=rawMatchDAO.getActualRawMatchesForProteinIdsInRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease).size();          if (matchesFound < matchCount) {            LOGGER.warn("Raw matches not yet committed - sleep for 5 seconds , count: " + matchCount);            Utilities.verboseLog("Raw matches not yet committed - sleep for " + waitTimeFactor + " seconds, matches found: "+ matchesFound+ " matchesCount expected: "+ matchCount);          }          Long timeTaken=System.currentTimeMillis() - now;          if (timeTaken > (waitTimeFactor * waitTimeFactor * 100* 1000)) {            LOGGER.warn("H2 database problem: failed to verify " + matchCount + " matches in database for "+ represantiveRawMatch.getSignatureLibrary().getName()+ " after "+ timeTaken+ " ms "+ " - matches found : "+ matchesFound);            break;          }        }      } else {        LOGGER.warn("Check if Raw matches committed " + matchCount + " rm: "+ represantiveRawMatch);        Utilities.verboseLog("Check if Raw matches committed " + matchCount + " rm: "+ represantiveRawMatch);      }      Long timeTaken=System.currentTimeMillis() - now;      Utilities.verboseLog("ParseStep: count: " + matchCount + " represantiveRawMatch : "+ represantiveRawMatch.toString()+ " time taken: "+ timeTaken);    }  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to parse Panther file " + outputFileNameTemplate,e);  } finally {    if (stream != null) {      try {        stream.close();      } catch (      IOException e) {        LOGGER.error("Unable to close connection to the Panther output file located at " + outputFileNameTemplate,e);      }    }  }  LOGGER.info("Step with Id " + this.getId() + " finished.");}  }
class C{  public boolean resume(){  if (log == null)   log=CLogger.getCLogger(getClass());  if (isSuspended()) {    m_state=STATE_Running;    log.info("resuming ...");    return true;  }  String msg="resume failed: Not Suspended (" + getState() + ")";  if (m_throwException)   throw new IllegalStateException(msg);  log.warning(msg);  return false;}  }
class C{  private static void LOGD(final String tag,String message){  if (Log.isLoggable(tag,Log.DEBUG)) {    Log.d(tag,message);  }}  }
class C{  public void write(char chars[],int start,int length) throws java.io.IOException {  int n=length + start;  for (int i=start; i < n; i++) {    m_os.write(chars[i]);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private synchronized void resetReceiveWindow(){  receivedRecordsVector=0;  receiveWindowUpperBoundary=RECEIVE_WINDOW_SIZE - 1;  receiveWindowLowerBoundary=0;}  }
class C{  public ZkNodeProps(Map<String,Object> propMap){  this.propMap=propMap;}  }
class C{  public static final int parseInt(char[] array,int start,int length) throws NumberFormatException {  if (length == 1) {    int result=array[start] - '0';    if (result < 0 || result > 9) {      throw new NumberFormatException("invalid digit");    }    return result;  } else {    return Integer.parseInt(new String(array,start,length));  }}  }
class C{  protected final synchronized boolean isPresentImpl(Object key){  if (!map.containsKey(key))   return false;  Object o=map.get(key);  if (o == null)   return true;  SoftReference sr=(SoftReference)o;  o=sr.get();  if (o != null)   return true;  clearImpl(key);  return false;}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected AbstractAnimation createAnimation(AnimationTarget target){  AnimatableValue to=parseAnimatableValue(SVG_TO_ATTRIBUTE);  return new SetAnimation(timedElement,this,to);}  }
class C{  public static int hash(int aSeed,Object aObject){  int result=aSeed;  if (aObject == null) {    result=hash(result,0);  } else   if (!isArray(aObject)) {    result=hash(result,aObject.hashCode());  } else {    int length=Array.getLength(aObject);    for (int idx=0; idx < length; ++idx) {      Object item=Array.get(aObject,idx);      result=hash(result,item);    }  }  return result;}  }
class C{  public MOEAD(Problem problem,int neighborhoodSize,Initialization initialization,Variation variation,double delta,double eta,int updateUtility){  super(problem);  this.neighborhoodSize=neighborhoodSize;  this.initialization=initialization;  this.variation=variation;  this.delta=delta;  this.eta=eta;  this.updateUtility=updateUtility;}  }
class C{  private void deleteEclipseResourcesWorkingSets(){  final Iterator<IWorkingSet> itr=getAllEclipseResourceWorkingSetsIterator();  final IWorkingSetManager manager=getWorkbench().getWorkingSetManager();  while (itr.hasNext()) {    final IWorkingSet next=itr.next();    manager.removeWorkingSet(next);  }}  }
class C{  @Override public void init(final Coordinate p){  init(p.x,p.x,p.y,p.y,p.z,p.z);}  }
class C{  public CharBox(Char c){  cf=c.getCharFont();  size=c.getMetrics().getSize();  width=c.getWidth();  height=c.getHeight();  depth=c.getDepth();}  }
class C{  static Values createEconomicValuesForTest1(){  Values economicValues=new Values();{    ValuesForAMode roadValues=economicValues.getByMode(Mode.road);{      Attributes pvValues=roadValues.getByDemandSegment(DemandSegment.PV_NON_COMMERCIAL);      pvValues.setByEntry(Attribute.km,-0.23);      pvValues.setByEntry(Attribute.hrs,-5.00);    }{      Attributes gvValues=roadValues.getByDemandSegment(DemandSegment.GV);      gvValues.setByEntry(Attribute.km,-1.00);      gvValues.setByEntry(Attribute.hrs,-0.00);    }  }{    ValuesForAMode railValues=economicValues.getByMode(Mode.rail);{      Attributes pvValues=railValues.getByDemandSegment(DemandSegment.PV_NON_COMMERCIAL);      pvValues.setByEntry(Attribute.km,-0.1);      pvValues.setByEntry(Attribute.hrs,-5.00);    }{      Attributes gvValues=railValues.getByDemandSegment(DemandSegment.GV);      gvValues.setByEntry(Attribute.km,-0.1);      gvValues.setByEntry(Attribute.hrs,-0.00);    }  }  return economicValues;}  }
class C{  public boolean lessThan(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.greaterThan(this);  return this.num() < obj2.num();}  }
class C{  public static void upDateCounters(ArrayList<Object> itemSets,Instances instancesNoClass,Instances instancesClass){  for (int i=0; i < instancesNoClass.numInstances(); i++) {    Enumeration<Object> enu=new WekaEnumeration<Object>(itemSets);    while (enu.hasMoreElements()) {      ((LabeledItemSet)enu.nextElement()).upDateCounter(instancesNoClass.instance(i),instancesClass.instance(i));    }  }}  }
class C{  private static void resetWorkbench(){  try {    IWorkbench workbench=PlatformUI.getWorkbench();    IWorkbenchWindow workbenchWindow=workbench.getActiveWorkbenchWindow();    IWorkbenchPage page=workbenchWindow.getActivePage();    Shell activeShell=Display.getCurrent().getActiveShell();    if (activeShell != null && activeShell != workbenchWindow.getShell()) {      activeShell.close();    }    page.closeAllEditors(false);    page.resetPerspective();    String defaultPerspectiveId=workbench.getPerspectiveRegistry().getDefaultPerspective();    workbench.showPerspective(defaultPerspectiveId,workbenchWindow);    page.resetPerspective();    page.showView("org.eclipse.ui.internal.introview");  } catch (  WorkbenchException e) {    throw new RuntimeException(e);  }}  }
class C{  public String doubleMetaphone(String value){  return doubleMetaphone(value,false);}  }
class C{  void optimizeAcrossPartitions(final JoinGroupNode joinGroup,final ASTJoinGroupPartitions partitions,final GroupNodeVarBindingInfoMap bindingInfoMap,final Set<IVariable<?>> externallyKnownProduced){  final List<ASTJoinGroupPartition> partitionList=partitions.getPartitionList();  final List<Set<IVariable<?>>> definitelyProducedUpToPartition=new ArrayList<Set<IVariable<?>>>(partitionList.size());  final Set<IVariable<?>> producedUpToPartition=new HashSet<IVariable<?>>(externallyKnownProduced);  for (int i=0; i < partitionList.size(); i++) {    if (i > 0) {      producedUpToPartition.addAll(partitionList.get(i - 1).getDefinitelyProduced());    }    definitelyProducedUpToPartition.add(new HashSet<IVariable<?>>(producedUpToPartition));  }  for (int i=1; i < partitionList.size(); i++) {    final ASTJoinGroupPartition partition=partitionList.get(i);    final List<IGroupMemberNode> unmovableNodes=new ArrayList<IGroupMemberNode>();    for (    IGroupMemberNode candidate : partition.nonOptionalNonMinusNodes) {      Integer partitionForCandidate=null;      for (int j=i - 1; j >= 0; j--) {        final ASTJoinGroupPartition candidatePartition=partitionList.get(j);        final Set<IVariable<?>> conflictingVars;        if (candidatePartition.optionalOrMinus == null) {          conflictingVars=new HashSet<IVariable<?>>();        } else {          conflictingVars=new HashSet<IVariable<?>>(bindingInfoMap.get(candidatePartition.optionalOrMinus).getMaybeProduced());        }        final GroupNodeVarBindingInfo candidateBindingInfo=bindingInfoMap.get(candidate);        conflictingVars.retainAll(candidateBindingInfo.getMaybeProduced());        conflictingVars.removeAll(definitelyProducedUpToPartition.get(j + 1));        if (conflictingVars.isEmpty() && definitelyProducedUpToPartition.get(j).containsAll(candidateBindingInfo.getRequiredBound())) {          partitionForCandidate=j;        } else {          final ExplainHint explainHint=new JoinOrderExplainHint(JoinOrderExplainHint.ACROSS_PARTITION_REORDERING_PROBLEM,candidate);          joinGroup.addExplainHint(explainHint);          break;        }      }      if (partitionForCandidate != null) {        final ASTJoinGroupPartition partitionToMove=partitionList.get(partitionForCandidate);        partitionToMove.addNonOptionalNonMinusNodeToPartition(candidate);        for (int k=partitionForCandidate + 1; k <= i; k++) {          definitelyProducedUpToPartition.get(k).addAll(bindingInfoMap.get(candidate).getDefinitelyProduced());        }      } else {        unmovableNodes.add(candidate);      }    }    partition.replaceNonOptionalNonMinusNodesWith(unmovableNodes,true);  }}  }
class C{  public MenuLockLayer(CloseMenuHandler closeMenuCallback){  this(closeMenuCallback,0);}  }
class C{  public GBC fill(){  return fill(BOTH);}  }
class C{  public URI(String scheme,String authority,String path,String query,String fragment) throws URISyntaxException {  if (scheme != null && path != null && !path.isEmpty() && path.charAt(0) != '/') {    throw new URISyntaxException(path,"Relative path");  }  StringBuilder uri=new StringBuilder();  if (scheme != null) {    uri.append(scheme);    uri.append(':');  }  if (authority != null) {    uri.append("//");    AUTHORITY_ENCODER.appendEncoded(uri,authority);  }  if (path != null) {    PATH_ENCODER.appendEncoded(uri,path);  }  if (query != null) {    uri.append('?');    ALL_LEGAL_ENCODER.appendEncoded(uri,query);  }  if (fragment != null) {    uri.append('#');    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);  }  parseURI(uri.toString(),false);}  }
class C{  @SuppressWarnings("unchecked") private void addDeviceGroupNamesToSetUsedInVerifyingExistence(String policyRuleName,Map<String,Object> keyMap,String provisioningType){  List<String> deviceNamesExistence=(List<String>)keyMap.get(Constants.USED_IN_CHECKING_GROUPNAMES_EXISTENCE);  if (AutoTieringPolicy.ProvisioningType.ThicklyProvisioned.toString().equalsIgnoreCase(provisioningType)) {    deviceNamesExistence.add(policyRuleName + Constants.HYPHEN + Constants.THICKDEVICEGROUP);  } else   if (AutoTieringPolicy.ProvisioningType.ThinlyProvisioned.toString().equalsIgnoreCase(provisioningType)) {    deviceNamesExistence.add(policyRuleName + Constants.HYPHEN + Constants.THINDEVICEGROUP);  } else   if (AutoTieringPolicy.ProvisioningType.All.toString().equalsIgnoreCase(provisioningType)) {    deviceNamesExistence.add(policyRuleName + Constants.HYPHEN + Constants.THINANDTHICKDEVICEGROUP);  }}  }
class C{  public String readToken(String delimiters) throws IOException {  int space=0;  char ch, ch2, quoteChar='\0';  boolean done=false, first=true, quoted=false, isSpace;  nextCharacter();  StringBuffer token=new StringBuffer();  while (!done) {    ch=read();    try {      isSpace=Character.isWhitespace(ch);      if (quoted && ch == quoteChar) {        ch2=read();        if (ch == ch2) {          token.append(ch);        } else {          lastDelimiter=' ';          unreadCharacter(ch2);          done=true;          quoted=false;        }      } else       if (first && (ch == '\'' || ch == '"')) {        quoted=true;        quoteChar=ch;        first=false;        space=0;      } else       if (ch == startComment || ch == lineComment) {        skipComments(ch);        lastDelimiter=' ';        done=true;      } else {        if (quoted) {          if (isSpace) {            space++;            ch=' ';          } else {            space=0;          }          if (space < 2) {            token.append(ch);          }        } else         if (isSpace) {          lastDelimiter=' ';          done=true;        } else         if (delimiters.indexOf(ch) != -1) {          done=true;          lastDelimiter=ch;        } else {          token.append(ch);          first=false;        }      }    } catch (    EOFException e) {      done=true;    }  }  if (Character.isWhitespace((char)lastDelimiter)) {    ch=nextCharacter();    while (Character.isWhitespace(ch)) {      read();      ch=nextCharacter();    }    if (delimiters.indexOf(ch) != -1) {      lastDelimiter=readCharacter();    }  }  return token.toString();}  }
class C{  ProcessStreamGrabber(InputStream streamToGrab,@Nullable IgniteInClosure<String> printC){  this.streamToGrab=streamToGrab;  this.printC=printC;}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher,int macSizeInBits,BlockCipherPadding padding){  if ((macSizeInBits % 8) != 0) {    throw new IllegalArgumentException("MAC size must be multiple of 8");  }  this.cipher=new CBCBlockCipher(cipher);  this.padding=padding;  this.macSize=macSizeInBits / 8;  mac=new byte[cipher.getBlockSize()];  buf=new byte[cipher.getBlockSize()];  bufOff=0;}  }
class C{  private void unshuffle64(LongArrayPointer a,int n,int n2,long[] tmp){  int i;  int nhalf;  LongArrayPointer p1, p2, pt;  nhalf=n + 1 >> 1;  pt=new LongArrayPointer(tmp);  p1=a.copy(n2 * nhalf);  for (i=nhalf; i < n; i++) {    pt.set(p1.get());    p1.offset+=n2;    pt.offset+=1;  }  p2=a.copy(n2 * (nhalf - 1));  p1=a.copy(n2 * (nhalf - 1) << 1);  for (i=nhalf - 1; i >= 0; i--) {    p1.set(p2.get());    p2.offset-=n2;    p1.offset-=n2 + n2;  }  pt=new LongArrayPointer(tmp);  p1=a.copy(n2);  for (i=1; i < n; i+=2) {    p1.set(pt.get());    p1.offset+=n2 + n2;    pt.offset+=1;  }}  }
class C{  public static final double emptyVectors(int Y[][]){  int N=Y.length;  int L=Y[0].length;  double sum=0.0;  for (int i=0; i < N; i++) {    if (Utils.sum(Y[i]) <= 0.0)     sum++;  }  return (double)sum / (double)N;}  }
class C{  protected void configureJettyConnectors() throws ClassNotFoundException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {  Class selectConnectorClass=getClassLoader().loadClass("org.mortbay.jetty.nio.SelectChannelConnector");  Object connector=selectConnectorClass.newInstance();  selectConnectorClass.getMethod("setPort",new Class[]{int.class}).invoke(connector,new Object[]{new Integer(getConfiguration().getPropertyValue(ServletPropertySet.PORT))});  Class connectorClass=getClassLoader().loadClass("org.mortbay.jetty.Connector");  Object connectorArray=Array.newInstance(connectorClass,1);  Array.set(connectorArray,0,connector);  getServer().getClass().getMethod("addConnector",new Class[]{connectorClass}).invoke(getServer(),new Object[]{connector});}  }
class C{  public static boolean nullEquals(String s1,String s2){  return (s1 == null ? s2 == null : s1.equals(s2));}  }
class C{  private void dispatchMethod(MicroservicesRegistryImpl currentMicroservicesRegistry,Request request,Response response) throws Exception {  HttpUtil.setConnectionHeader(request,response);  PatternPathRouter.RoutableDestination<HttpResourceModel> destination=currentMicroservicesRegistry.getMetadata().getDestinationMethod(request.getUri(),request.getHttpMethod(),request.getContentType(),request.getAcceptTypes());  HttpResourceModel resourceModel=destination.getDestination();  response.setMediaType(Util.getResponseType(request.getAcceptTypes(),resourceModel.getProducesMediaTypes()));  InterceptorExecutor interceptorExecutor=new InterceptorExecutor(resourceModel,request,response,currentMicroservicesRegistry.getInterceptors());  if (interceptorExecutor.execPreCalls()) {    HttpMethodInfoBuilder httpMethodInfoBuilder=new HttpMethodInfoBuilder().httpResourceModel(resourceModel).httpRequest(request).httpResponder(response).requestInfo(destination.getGroupNameValues());    HttpMethodInfo httpMethodInfo=httpMethodInfoBuilder.build();    if (httpMethodInfo.isStreamingSupported()) {      while (!(request.isEmpty() && request.isEomAdded())) {        httpMethodInfo.chunk(request.getMessageBody());      }      httpMethodInfo.end();    } else {      httpMethodInfo.invoke(request,destination);    }    interceptorExecutor.execPostCalls(response.getStatusCode());  }}  }
class C{  private int addCommodity(final String HOME_LINK,final String TARGET_LINK,final int START_TIME,final int DURATION,final int CARS_PER_HOUR,final String ROUTE,int CURRENT_ID){  int homeEndtime=0;  final Link start=network.getLinks().get(Id.create(HOME_LINK,Link.class));  final Link target=network.getLinks().get(Id.create(TARGET_LINK,Link.class));  final int visPlaces=2000;  final Coord startCoord=start.getToNode().getCoord();  final Coord targetCoord=target.getFromNode().getCoord();  final Coord homeCoord=new Coord(startCoord.getX() - visPlaces,startCoord.getY() + visPlaces);  final Coord workCoord=new Coord(targetCoord.getX() + visPlaces,targetCoord.getY() - visPlaces);  final int AMOUNT_OF_CARS=(int)((CARS_PER_HOUR * DURATION * 1.0) / 3600);  final int MAX_ID=CURRENT_ID + 1 + AMOUNT_OF_CARS;  for (int i=CURRENT_ID + 1; i <= MAX_ID; i++) {    homeEndtime=START_TIME;    Person p=PopulationUtils.getFactory().createPerson(Id.create(i,Person.class));    Plan plan=PopulationUtils.createPlan(p);    p.addPlan(plan);    homeEndtime+=Math.floor(Math.random() * DURATION);    Activity a=PopulationUtils.createAndAddActivityFromCoord(plan,(String)"h",homeCoord);    a.setLinkId(start.getId());    a.setEndTime(homeEndtime);    Leg leg=PopulationUtils.createAndAddLeg(plan,(String)TransportMode.car);    NetworkRoute route=new LinkNetworkRouteImpl(start.getId(),target.getId());    route.setLinkIds(start.getId(),NetworkUtils.getLinkIds(RouteUtils.getLinksFromNodes(NetworkUtils.getNodes(network,ROUTE))),target.getId());    leg.setRoute(route);    a=PopulationUtils.createAndAddActivityFromCoord(plan,(String)"w",workCoord);    a.setLinkId(target.getId());    this.plans.addPerson(p);  }  return MAX_ID;}  }
class C{  @Override public void map(Fact fact,NullWritable nw,Context context) throws IOException, InterruptedException {  if (Schema.isSchemaTriple(fact.getTriple())) {    context.write(NullWritable.get(),fact);  }}  }
class C{  private void process_invoke(SootClass cn,SootMethod m,VirtualInvokeExpr expr,Activity activity) throws UnsupportedIdiomException {  if (!(expr.getBase().getType() instanceof RefType))   return;  if (!expr.getMethodRef().name().equals("setContentView"))   return;  try {    Set<SootMethod> calling=SootUtils.getTargetsCHA(expr);    SootMethod setContentView=Scene.v().getMethod("<android.app.Activity: void setContentView(int)>");    if (calling.contains(setContentView)) {      if (!(expr.getArgs().get(0) instanceof IntConstant)) {        logger.error("Found call to setContentView(int) with non-constant argument: {}",expr.getArgs().get(0));        AnalysisReport.v().addEntry("Found call to setContentView(int) with non-constant argument.",JimpleRelationships.v().getEnclosingStmt(expr),AnalysisReport.Level.HIGH);        logger.error("static class {} ",expr.getMethodRef().declaringClass());        return;      }      int resource_id=((IntConstant)expr.getArgs().get(0)).value;      logger.info("Multiple setContentView calls in one Activity: {} {}",cn,m);      activity.content_views.add(new Integer(resource_id));      logger.info("  setContentView ({} -> {})",resource_id,resource_info.get(resource_id));      String resource_name=resource_info.get(resource_id);      if (resource_name == null) {        AnalysisReport.v().addEntry("Resource id not found in setContentView().",JimpleRelationships.v().getEnclosingStmt(expr),AnalysisReport.Level.HIGH);        bad_idiom(cn,m,"Resource id %08X not found",resource_id);      }      String layout_name=resource_name.replace("layout.","");      Layout layout=find_layout_by_name(layout_name);      if (layout == null) {        AnalysisReport.v().addEntry("Could not find layout associated with resource ID for setContentView().",JimpleRelationships.v().getEnclosingStmt(expr),AnalysisReport.Level.HIGH);        logger.warn("Couldn't find layout {} ",layout_name);        return;      }      layout.activities.add(activity);      layout.classes.add(cn);      logger.info("Found activity/class {}/{} for layout {}\n",activity,cn,layout.name);    }  } catch (  Exception e) {    logger.debug("Cannot resolve method dispatch in Resources: {}",expr);  }}  }
class C{  public NotificationChain basicSetHistoryVector(StateVector newHistoryVector,NotificationChain msgs){  StateVector oldHistoryVector=historyVector;  historyVector=newHistoryVector;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_REGION__HISTORY_VECTOR,oldHistoryVector,newHistoryVector);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private boolean analyseMultipartPartMessage(Part part,Mail mail) throws Exception {  if (part.isMimeType("multipart/*")) {    try {      Multipart multipart=(Multipart)part.getContent();      boolean atLeastOneRemoved=false;      int numParts=multipart.getCount();      for (int i=0; i < numParts; i++) {        Part p=multipart.getBodyPart(i);        if (p.isMimeType("multipart/*")) {          atLeastOneRemoved|=analyseMultipartPartMessage(p,mail);        } else {          boolean removed=checkMessageRemoved(p,mail);          if (removed) {            multipart.removeBodyPart(i);            atLeastOneRemoved=true;            i--;            numParts--;          }        }      }      if (atLeastOneRemoved) {        part.setContent(multipart);        if (part instanceof Message) {          ((Message)part).saveChanges();        }      }      return atLeastOneRemoved;    } catch (    Exception e) {      log("Could not analyse part.",e);    }  }  return false;}  }
class C{  public void enableCopyImage(FunctionalAPIImpl impl,RPCopyRequestParams copyToEnableTo,boolean failover) throws RecoverPointException {  String bookmarkName=copyToEnableTo.getBookmarkName();  Date apitTime=copyToEnableTo.getApitTime();  ConsistencyGroupCopyUID cgCopyUID=RecoverPointUtils.mapRPVolumeProtectionInfoToCGCopyUID(copyToEnableTo.getCopyVolumeInfo());  if (bookmarkName != null) {    logger.info("Enable copy to bookmark : " + bookmarkName);  } else   if (apitTime != null) {    logger.info("Enable copy to APIT : " + apitTime.toString());  } else {    logger.info("Enable copy to most recent image");  }  RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();  if (!imageManager.verifyCopyCapableOfEnableImageAccess(impl,cgCopyUID,copyToEnableTo.getBookmarkName(),failover)) {    try {      String cgCopyName=impl.getGroupCopyName(cgCopyUID);      String cgName=impl.getGroupName(cgCopyUID.getGroupUID());      logger.info("Copy " + cgCopyName + " of group "+ cgName+ " is in a mode that disallows enabling the CG copy.");      throw RecoverPointException.exceptions.notAllowedToEnableImageAccessToCG(cgName,cgCopyName);    } catch (    FunctionalAPIActionFailedException_Exception e) {      throw RecoverPointException.exceptions.notAllowedToEnableImageAccessToCGException(e);    }catch (    FunctionalAPIInternalError_Exception e) {      throw RecoverPointException.exceptions.notAllowedToEnableImageAccessToCGException(e);    }  }  boolean waitForLinkState=false;  imageManager.enableCGCopy(impl,cgCopyUID,waitForLinkState,ImageAccessMode.LOGGED_ACCESS,bookmarkName,apitTime);}  }
class C{  public void execute() throws BuildException {  DirectoryScanner scanner;  String[] list;  String[] dirs;  if (baseDir == null) {    baseDir=project.resolveFile(".");  }  if (destDir == null) {    String msg="destdir attribute must be set!";    throw new BuildException(msg);  }  if (style == null) {    throw new BuildException("style attribute must be set!");  }  if (velocityPropertiesFile == null) {    velocityPropertiesFile=new File("velocity.properties");  }  if (!velocityPropertiesFile.exists() && templatePath == null) {    throw new BuildException("No template path and could not " + "locate velocity.properties file: " + velocityPropertiesFile.getAbsolutePath());  }  log("Transforming into: " + destDir.getAbsolutePath(),Project.MSG_INFO);  if (projectAttribute != null && projectAttribute.length() > 0) {    projectFile=new File(baseDir,projectAttribute);    if (projectFile.exists()) {      projectFileLastModified=projectFile.lastModified();    } else {      log("Project file is defined, but could not be located: " + projectFile.getAbsolutePath(),Project.MSG_INFO);      projectFile=null;    }  }  Document projectDocument=null;  try {    if (velocityPropertiesFile.exists()) {      ve.init(velocityPropertiesFile.getAbsolutePath());    } else     if (templatePath != null && templatePath.length() > 0) {      ve.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH,templatePath);      ve.init();    }    styleSheetLastModified=ve.getTemplate(style).getLastModified();    if (projectFile != null) {      projectDocument=builder.build(projectFile);    }  } catch (  Exception e) {    log("Error: " + e.toString(),Project.MSG_INFO);    throw new BuildException(e);  }  scanner=getDirectoryScanner(baseDir);  list=scanner.getIncludedFiles();  for (int i=0; i < list.length; ++i) {    process(baseDir,list[i],destDir,projectDocument);  }}  }
class C{  public String addStepsForPromoteMirrors(Workflow workflow,String waitFor,URI vplexURI,List<URI> mirrors,List<URI> promotees,String taskId) throws ControllerException {  try {    for (    URI mirrorURI : mirrors) {      Volume promotedVolumeForMirror=findPromotedVolumeForMirror(mirrorURI,promotees);      waitFor=addStepsForDetachMirror(workflow,waitFor,vplexURI,mirrorURI,promotedVolumeForMirror.getId(),taskId);      if (promotedVolumeForMirror == null) {        throw new IllegalStateException("No volume available for the promotion of mirror " + mirrorURI);      }      String stepId=workflow.createStepId();      waitFor=workflow.createStep(PROMOTE_MIRROR_STEP,String.format("Promote mirror: %s",mirrorURI),waitFor,vplexURI,DiscoveredDataObject.Type.vplex.name(),this.getClass(),promoteMirrorMethod(vplexURI,mirrorURI,promotedVolumeForMirror.getId()),rollbackPromoteMirrorMethod(vplexURI,mirrorURI,promotedVolumeForMirror.getId(),stepId),stepId);    }    return waitFor;  } catch (  Exception ex) {    throw VPlexApiException.exceptions.addStepsForPromoteMirrors(ex);  }}  }
class C{  protected void addTwoCandidateClusters(LinkedList<Set<V>> candidates,Map<V,double[]> voltage_ranks){  try {    List<Map<V,double[]>> clusters=new ArrayList<Map<V,double[]>>(kmc.cluster(voltage_ranks,3));    boolean b01=clusters.get(0).size() > clusters.get(1).size();    boolean b02=clusters.get(0).size() > clusters.get(2).size();    boolean b12=clusters.get(1).size() > clusters.get(2).size();    if (b01 && b02) {      candidates.add(clusters.get(1).keySet());      candidates.add(clusters.get(2).keySet());    } else     if (!b01 && b12) {      candidates.add(clusters.get(0).keySet());      candidates.add(clusters.get(2).keySet());    } else     if (!b02 && !b12) {      candidates.add(clusters.get(0).keySet());      candidates.add(clusters.get(1).keySet());    }  } catch (  NotEnoughClustersException e) {  }}  }
class C{  private void insertThrowingInsnBefore(SsaInsn insn,RegisterSpecList newSources,RegisterSpec newResult,int newOpcode,Constant cst){  Insn origRopInsn=insn.getOriginalRopInsn();  Rop newRop=Rops.ropFor(newOpcode,newResult,newSources,cst);  Insn newRopInsn;  if (cst == null) {    newRopInsn=new ThrowingInsn(newRop,origRopInsn.getPosition(),newSources,StdTypeList.EMPTY);  } else {    newRopInsn=new ThrowingCstInsn(newRop,origRopInsn.getPosition(),newSources,StdTypeList.EMPTY,cst);  }  NormalSsaInsn newInsn=new NormalSsaInsn(newRopInsn,insn.getBlock());  List<SsaInsn> insns=insn.getBlock().getInsns();  insns.add(insns.lastIndexOf(insn),newInsn);  ssaMeth.onInsnAdded(newInsn);}  }
class C{  public String putPageContent(String payload,Boolean auth,String authStringEnc) throws IOException {  String result=null;  try {    HttpURLConnection connection=(HttpURLConnection)fURL.openConnection();    connection.setRequestMethod("POST");    if (auth != false) {      connection.setRequestProperty("Authorization","Basic " + authStringEnc);    }    connection.setDoInput(true);    connection.setDoOutput(true);    connection.setRequestProperty("Content-Type","application/json");    connection.connect();    OutputStreamWriter out=new OutputStreamWriter(connection.getOutputStream());    if (payload == "") {      Log.logger.log(Level.FINE,"Putting: replaydestination=MyDestination");      out.write("replaydestination=MyDestination");    } else {      Log.logger.log(Level.FINE,"Putting: " + payload);      out.write(payload);    }    out.close();    BufferedReader br=new BufferedReader(new InputStreamReader(connection.getInputStream()));    while (br.ready()) {      result=br.readLine();      Log.logger.log(Level.FINE,result);    }    br.close();  } catch (  IOException ex) {    Log.logger.log(Level.SEVERE,"Cannot open connection to " + fURL.toString());    throw ex;  }  return result;}  }
class C{  public void addExample(IInstance instance,IStructure goldStructure){  this.instanceList.add(instance);  this.goldStructureList.add(goldStructure);}  }
class C{  public BusinessObjectDefinitionColumnEntity createBusinessObjectDefinitionColumnEntity(BusinessObjectDefinitionColumnKey businessObjectDefinitionColumnKey,String businessObjectDefinitionColumnDescription){  BusinessObjectDefinitionKey businessObjectDefinitionKey=new BusinessObjectDefinitionKey(businessObjectDefinitionColumnKey.getNamespace(),businessObjectDefinitionColumnKey.getBusinessObjectDefinitionName());  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDao.getBusinessObjectDefinitionByKey(businessObjectDefinitionKey);  if (businessObjectDefinitionEntity == null) {    businessObjectDefinitionEntity=businessObjectDefinitionDaoTestHelper.createBusinessObjectDefinitionEntity(businessObjectDefinitionKey,AbstractDaoTest.DATA_PROVIDER_NAME,AbstractDaoTest.DESCRIPTION);  }  return createBusinessObjectDefinitionColumnEntity(businessObjectDefinitionEntity,businessObjectDefinitionColumnKey.getBusinessObjectDefinitionColumnName(),businessObjectDefinitionColumnDescription);}  }
class C{  public static long toLong(int[] ints,int start){  return toLong(ints[start],ints[start + 1]);}  }
class C{  public KDTree(final int nDimensions,final SpatialCollectionUtils.Coordinate<T> coord){  this(false,nDimensions,coord);}  }
class C{  private Player createTestPlayer(final String name){  final Player player=PlayerTestHelper.createPlayer(name);  player.setPosition(10,5);  SingletonRepository.getRPWorld().getRPZone(ZONE_NAME).assignRPObjectID(player);  SingletonRepository.getRPWorld().getRPZone(ZONE_NAME).add(player);  return player;}  }
class C{  public static Object stringToValue(String string){  Double d;  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=string.charAt(0);  if ((b >= '0' && b <= '9') || b == '-') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1) {        d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (string.equals(myLong.toString())) {          if (myLong == myLong.intValue()) {            return myLong.intValue();          } else {            return myLong;          }        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
class C{  public MinimizeAwareProcessorDecorator(final Object processor,final boolean minimize){  super(processor);  this.minimize=minimize;}  }
class C{  protected GenericDelegator(){}  }
class C{  public void addLocalEventListener(GridLocalEventListener lsnr,int[] types){  assert lsnr != null;  assert types != null;  assert types.length > 0;  if (!enterBusy())   return;  try {    for (    int t : types) {      getOrCreate(t).add(lsnr);      if (!isRecordable(t))       U.warn(log,"Added listener for disabled event type: " + U.gridEventName(t));    }  }  finally {    leaveBusy();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.798 -0400",hash_original_method="6705494FBD0F88EB9D780508EB911135",hash_generated_method="A0F7E1F62CE80902A6DBB69B361C771B") private void onRequestPasskey(String objectPath,int nativeData){  String address=checkPairingRequestAndGetAddress(objectPath,nativeData);  if (address == null)   return;  mWakeLock.acquire();  Intent intent=new Intent(BluetoothDevice.ACTION_PAIRING_REQUEST);  intent.putExtra(BluetoothDevice.EXTRA_DEVICE,mAdapter.getRemoteDevice(address));  intent.putExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT,BluetoothDevice.PAIRING_VARIANT_PASSKEY);  mContext.sendBroadcast(intent,BLUETOOTH_ADMIN_PERM);  mWakeLock.release();  return;}  }
class C{  public ExportFileAction(Application app,@Nullable View view){  this(app,view,false);}  }
class C{  public static GeoTimeSerie fromGTSWrapperToGTS(GTSWrapper wrapper){  Metadata metadata=wrapper.getMetadata();  GeoTimeSerie gts=null;  if (null != wrapper.getEncoded()) {    byte[] bytes=null;    if (wrapper.isCompressed()) {      bytes=unwrapEncoded(wrapper);    } else {      bytes=wrapper.getEncoded();    }    ByteBuffer bb=ByteBuffer.wrap(bytes);    GTSDecoder decoder=new GTSDecoder(wrapper.getBase(),bb);    decoder.setCount(0 != wrapper.getCount() ? wrapper.getCount() : bytes.length / 10);    gts=decoder.decode();  } else {    gts=new GeoTimeSerie();  }  if (null == metadata) {    metadata=new Metadata();  }  if (wrapper.isSetBucketcount()) {    gts.bucketcount=(int)wrapper.getBucketcount();  }  if (wrapper.isSetBucketspan()) {    gts.bucketspan=wrapper.getBucketspan();  }  if (wrapper.isSetLastbucket()) {    gts.lastbucket=wrapper.getLastbucket();  }  gts.setMetadata(metadata);  return gts;}  }
class C{  public void configure(JobConf conf){  this.conf=conf;  ignoreHost=conf.getBoolean("link.ignore.internal.host",true);  ignoreDomain=conf.getBoolean("link.ignore.internal.domain",true);  limitPages=conf.getBoolean("link.ignore.limit.page",true);  limitDomains=conf.getBoolean("link.ignore.limit.domain",true);  normalize=conf.getBoolean(URL_NORMALIZING,false);  filter=conf.getBoolean(URL_FILTERING,false);  if (normalize) {    urlNormalizers=new URLNormalizers(conf,URLNormalizers.SCOPE_DEFAULT);  }  if (filter) {    filters=new URLFilters(conf);  }}  }
class C{  @Override public void encodeBegin(FacesContext context,UIComponent component) throws IOException {  context.getResponseWriter().write("<div>");  super.encodeBegin(context,component);}  }
class C{  public StrongholdPacket(String s){  x=y=z=0;  username=s;}  }
class C{  public static InterpreterResult buildErrorResult(Throwable e){  StringBuilder sb=new StringBuilder(e.getMessage());  while ((e=e.getCause()) != null) {    String errMsg=e.getMessage();    if (errMsg != null) {      sb.append('\n').append(errMsg);    }  }  return new InterpreterResult(InterpreterResult.Code.ERROR,sb.toString());}  }
class C{  public void paintTableBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private void drawBorder(Graphics2D g,int width,int height,Color color,float size){  int max=(int)(Math.min((height - 2) * size,height / 2.0f) + 0.5);  int alphaDelta=color.getAlpha() / max;  for (int i=0; i < max; i++) {    Shape s=shapeGenerator.createRoundRectangle(i,i,width - 2 * i - 1,height - 2 * i - 1,CornerSize.CHECKBOX_INTERIOR);    Color newColor=new Color(color.getRed(),color.getGreen(),color.getBlue(),color.getAlpha() - i * alphaDelta);    g.setPaint(newColor);    g.draw(s);  }}  }
class C{  public static MPayment createARReceipt(Properties ctx,MInvoice invoice,BigDecimal amount,String trxName) throws OperationException {  String tenderType=getTenderType(invoice.getPaymentRule());  return createPayment(ctx,invoice,MDocType.DOCBASETYPE_ARReceipt,tenderType,amount,invoice.get_TrxName());}  }
class C{  public void toggleExtensionCriticality(String oid){  if (criticalExtensions.containsKey(oid)) {    byte[] value=criticalExtensions.remove(oid);    nonCriticalExtensions.put(oid,value);  } else   if (nonCriticalExtensions.containsKey(oid)) {    byte[] value=nonCriticalExtensions.remove(oid);    criticalExtensions.put(oid,value);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String outletHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag=false;  double flowDir=0;  double outletID=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outletHeader=args[1];  outputHeader=args[2];  if (inputHeader.isEmpty() || outputHeader.isEmpty() || outletHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster outlet;    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    if (outletHeader.toLowerCase().endsWith(".shp")) {      ArrayList<Double> outletXs=new ArrayList<>();      ArrayList<Double> outletYs=new ArrayList<>();      ShapeFile input=new ShapeFile(outletHeader);      if (input.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The input pour point vector should be \n" + "of a Point or MultiPoint ShapeType.");        return;      }      for (      ShapeFileRecord record : input.records) {        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      outletXs.add(vertices[0][0]);    outletYs.add(vertices[0][1]);  break;case POINTZ:PointZ recPointZ=(PointZ)(record.getGeometry());vertices=recPointZ.getPoints();outletXs.add(vertices[0][0]);outletYs.add(vertices[0][1]);break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());vertices=recPointM.getPoints();outletXs.add(vertices[0][0]);outletYs.add(vertices[0][1]);break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)(record.getGeometry());vertices=recMultiPoint.getPoints();for (int j=0; j < vertices.length; j++) {outletXs.add(vertices[j][0]);outletYs.add(vertices[j][1]);}break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)(record.getGeometry());vertices=recMultiPointZ.getPoints();for (int j=0; j < vertices.length; j++) {outletXs.add(vertices[j][0]);outletYs.add(vertices[j][1]);}break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)(record.getGeometry());vertices=recMultiPointM.getPoints();for (int j=0; j < vertices.length; j++) {outletXs.add(vertices[j][0]);outletYs.add(vertices[j][1]);}break;}}outlet=new WhiteboxRaster(outletHeader.replace(".shp",".dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);outlet.isTemporaryFile=true;int numOutlets=outletXs.size();double outletX, outletY;int outletCol, outletRow;int outletNum=1;for (int a=0; a < numOutlets; a++) {outletX=outletXs.get(a);outletY=outletYs.get(a);outletRow=outlet.getRowFromYCoordinate(outletY);outletCol=outlet.getColumnFromXCoordinate(outletX);outlet.setValue(outletRow,outletCol,outletNum);outletNum++;}} else if (outletHeader.toLowerCase().endsWith(".dep")) {outlet=new WhiteboxRaster(outletHeader,"r");if (outlet.getNumberRows() != rows || outlet.getNumberColumns() != cols) {showFeedback("The input images must be of the same dimensions.");return;}} else {showFeedback("Unrecognized input outlets file type.");return;}WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);output.setDataScale(WhiteboxRasterBase.DataScale.CATEGORICAL);output.setPreferredPalette("categorical1.pal");for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=outlet.getValue(row,col);if (z != 0 && z != noData) {output.setValue(row,col,z);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress("Loop 1 of 2:",(int)progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {if (output.getValue(row,col) == -999 && pntr.getValue(row,col) != noData) {flag=false;x=col;y=row;do {flowDir=pntr.getValue(y,x);if (flowDir > 0) {c=(int)(Math.log(flowDir) / LnOf2);x+=dX[c];y+=dY[c];z=output.getValue(y,x);if (z != -999) {outletID=z;flag=true;}} else {outletID=noData;flag=true;}} while (!flag);flag=false;x=col;y=row;output.setValue(y,x,outletID);do {flowDir=pntr.getValue(y,x);if (flowDir > 0) {c=(int)(Math.log(flowDir) / LnOf2);x+=dX[c];y+=dY[c];z=output.getValue(y,x);if (z != -999) {flag=true;}} else {flag=true;}output.setValue(y,x,outletID);} while (!flag);} else if (pntr.getValue(row,col) == noData) {output.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress("Loop 2 of 2:",(int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());pntr.close();outlet.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void selected(SelectEvent event){  if (event.isLeftClick()) {    Object topObject=event.getTopObject();    if (topObject instanceof TreeNode) {      Object context=((TreeNode)topObject).getValue(AVKey.CONTEXT);      if (context instanceof KMLAbstractFeature) {        this.onFeatureSelected((KMLAbstractFeature)context);      }    }  } else   if (event.isRollover()) {    Object topObject=event.getTopObject();    if (this.highlightedNode == topObject) {      return;    }    if (this.highlightedNode != null) {      this.highlightedNode=null;      this.setCursor(null);    }    if (topObject instanceof TreeNode) {      TreeNode treeNode=(TreeNode)topObject;      Object context=treeNode.getValue(AVKey.CONTEXT);      if (context instanceof KMLAbstractFeature && this.canSelect((KMLAbstractFeature)context)) {        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));        this.highlightedNode=treeNode;      }    }  }}  }
class C{  int height(){  int maxHeight=1;  if (below != null) {    int h=1 + below.height();    if (h > maxHeight) {      maxHeight=h;    }  }  if (above != null) {    int h=1 + above.height();    if (h > maxHeight) {      maxHeight=h;    }  }  return maxHeight;}  }
class C{  public ValuedProperty(T value){  setValue(value);}  }
class C{  public SqeNotification(String type,Object source,long sequenceNumber,long timeStamp,String message){  super(type,source,sequenceNumber,timeStamp,message);}  }
class C{  public final void show(){  Log.write("cursor = ");  Log.write(cursor);  if (allowScanning) {    Log.write(" region = ");    Log.write(region);  }  Log.write(" limit = ");  Log.writeln(limit);}  }
class C{  @DSComment("View state info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.298 -0500",hash_original_method="BEA45F3FF1A12FCE09D72D148357CE2C",hash_generated_method="FD3F79F70B251E4A14F02A622C256052") public boolean isFocusable(){  return getBooleanProperty(PROPERTY_FOCUSABLE);}  }
class C{  @Override public void expandFileSystem(List<FileDescriptor> fileDescriptors,String taskId) throws ControllerException {  String waitFor=null;  List<URI> fileShareUris=FileDescriptor.getFileSystemURIs(fileDescriptors);  FileWorkflowCompleter completer=new FileWorkflowCompleter(fileShareUris,taskId);  Workflow workflow=null;  try {    workflow=_workflowService.getNewWorkflow(this,EXPAND_FILESYSTEMS_WF_NAME,false,taskId);    waitFor=_fileDeviceController.addStepsForExpandFileSystems(workflow,waitFor,fileDescriptors,taskId);    String successMessage="Expand FileShares successful for: " + fileShareUris.toString();    Object[] callbackArgs=new Object[]{fileShareUris};    workflow.executePlan(completer,successMessage,new WorkflowCallback(),callbackArgs,null,null);  } catch (  Exception ex) {    s_logger.error("Could not Expand FileShares: " + fileShareUris,ex);    releaseWorkflowLocks(workflow);    String opName=ResourceOperationTypeEnum.EXPORT_FILE_SYSTEM.getName();    ServiceError serviceError=DeviceControllerException.errors.expandFileShareFailed(fileShareUris.toString(),opName,ex);    completer.error(s_dbClient,_locker,serviceError);  }}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){  deployerFactory.registerDeployer("geronimo1x",DeployerType.INSTALLED,GeronimoInstalledLocalDeployer.class);  deployerFactory.registerDeployer("geronimo2x",DeployerType.INSTALLED,GeronimoInstalledLocalDeployer.class);  deployerFactory.registerDeployer("geronimo3x",DeployerType.INSTALLED,GeronimoInstalledLocalDeployer.class);}  }
class C{  @SuppressWarnings("TypeMayBeWeakened") public static void dump(Collection<Item> que){  if (que == null)   return;  int start=-1;  int x=0;  for (  Item i : que) {    if (x++ > start)     System.out.println(i);  }}  }
class C{  public CircleFlowIndicator(Context context,AttributeSet attrs){  super(context,attrs);  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CircleFlowIndicator);  int activeType=a.getInt(R.styleable.CircleFlowIndicator_activeType,STYLE_FILL);  int activeDefaultColor=0xFFFFFFFF;  int activeColor=a.getColor(R.styleable.CircleFlowIndicator_activeColor,activeDefaultColor);  int inactiveType=a.getInt(R.styleable.CircleFlowIndicator_inactiveType,STYLE_STROKE);  int inactiveDefaultColor=0x44FFFFFF;  int inactiveColor=a.getColor(R.styleable.CircleFlowIndicator_inactiveColor,inactiveDefaultColor);  mRadius=a.getDimension(R.styleable.CircleFlowIndicator_radius,4.0f);  mRadiusActive=mRadius;  mRadiusInactive=mRadius;  spacing=a.getDimension(R.styleable.CircleFlowIndicator_spacing,4.0f);  spacing+=2 * mRadiusActive;  fadeOutTime=a.getInt(R.styleable.CircleFlowIndicator_fadeOut,0);  mCentered=a.getBoolean(R.styleable.CircleFlowIndicator_centered,false);  mSnap=a.getBoolean(R.styleable.CircleFlowIndicator_snap,false);  initColors(activeColor,inactiveColor,activeType,inactiveType);}  }
class C{  public VoiceResult(String match,float confidence){  mMatch=match;  mConfidence=confidence;}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      this.putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  public boolean attempt(ObjectReference old,ObjectReference value){  return false;}  }
class C{  public static ReferenceRanges<String> createExplicitReferenceRange(SAMFileHeader header,SamRegionRestriction... regions){  final ReferenceRanges.Accumulator<String> acc=new ReferenceRanges.Accumulator<>();  for (  SamRegionRestriction region : regions) {    final SequenceNameLocus resolved=resolveRestriction(header.getSequenceDictionary(),region);    acc.addRangeData(resolved.getSequenceName(),new RangeList.RangeData<>(resolved,region.toString()));  }  final ReferenceRanges<String> ranges=acc.getReferenceRanges();  ranges.setIdMap(SamUtils.getSequenceIdLookup(header.getSequenceDictionary()));  return ranges;}  }
class C{  static void runBootstrappers(final CoreEarlyComponent early,final List<HeroicBootstrap> bootstrappers) throws Exception {  for (  final HeroicBootstrap bootstrap : bootstrappers) {    try {      bootstrap.run(early);    } catch (    Exception e) {      throw new Exception("Failed to run bootstrapper " + bootstrap,e);    }  }}  }
class C{  private List<Leg> convertPathsToLegs(DgCommodity com,Id<Link> matsimStartLinkId,Id<Link> matsimEndLinkId){  List<Leg> legs=new ArrayList<>();  for (  TtPath path : com.getPaths().values()) {    List<Id<Link>> matsimLinks=new ArrayList<>();    for (    Id<DgStreet> street : path.getPath()) {      Id<Link> linkId=null;      boolean lights=false;      try {        linkId=this.idConverter.convertStreetId2LinkId(street);      } catch (      IllegalStateException e) {        lights=true;      }      if (!this.network.getLinks().containsKey(linkId)) {        lights=true;      }      if (!lights && !linkId.equals(matsimEndLinkId)) {        matsimLinks.add(linkId);      }    }    Route route=new LinkNetworkRouteImpl(matsimStartLinkId,matsimLinks,matsimEndLinkId);    Leg leg=this.population.getFactory().createLeg(TransportMode.car);    leg.setRoute(route);    legs.add(leg);  }  return legs;}  }
class C{  public static void main(String[] args){  SimpleCommandLineParser parser=new SimpleCommandLineParser(args);  String userName=parser.getValue("username","user","u");  String userPassword=parser.getValue("password","pass","p");  boolean help=parser.containsKey("help","h");  if (help || (userName == null) || (userPassword == null)) {    usage();    System.exit(1);  }  WebmasterToolsService myService=new WebmasterToolsService("exampleCo-exampleApp-1");  try {    myService.setUserCredentials(userName,userPassword);  } catch (  AuthenticationException e) {    System.out.println("The username or password entered are not valid");    System.exit(1);  }  System.out.println("Running with user: " + userName);  try {    runExamples(myService);  } catch (  ServiceException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  System.out.println("Sample run completed.");}  }
class C{  public void building(){  this.routePackages=$().applicationConfig().getRoutePkgs();  this.interceptorPackage=$().applicationConfig().getInterceptorPkg();  if (null != routePackages && routePackages.length > 0) {    this.buildRoute(routePackages);  }  if (StringKit.isNotBlank(interceptorPackage)) {    this.buildInterceptor(interceptorPackage);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.400 -0500",hash_original_method="22489CF328AA5B68E3D4CD4685E1B0FF",hash_generated_method="A172382E464D8A38BCB04CD76602C7D8") private final int moveTempStateStackToStateStack(){  int startingIndex=mStateStackTopIndex + 1;  int i=mTempStateStackCount - 1;  int j=startingIndex;  while (i >= 0) {    if (mDbg)     Log.d(TAG,"moveTempStackToStateStack: i=" + i + ",j="+ j);    mStateStack[j]=mTempStateStack[i];    j+=1;    i-=1;  }  mStateStackTopIndex=j - 1;  if (mDbg) {    Log.d(TAG,"moveTempStackToStateStack: X mStateStackTop=" + mStateStackTopIndex + ",startingIndex="+ startingIndex+ ",Top="+ mStateStack[mStateStackTopIndex].state.getName());  }  return startingIndex;}  }
class C{  public String toString(){  return "null";}  }
class C{  public boolean hasPayload(){  boolean hasPayload=true;  if (payloadElement == null) {    hasPayload=false;  } else   if (payloadElement.isEqualNode(signedElement)) {    hasPayload=false;  }  return hasPayload;}  }
class C{  public HMACParameterSpec(int outputLength){  this.outputLength=outputLength;}  }
class C{  public final void parseFile(Errors errors,boolean firstCall) throws AbortException {  if (parseStamp > nis.sourceFile().lastModified())   return;  if (!nis.sourceFile().exists()) {    errors.addAbort("Error: source file '" + nis.getName() + "' has apparently been deleted.");  }  if (ToolIO.getMode() == ToolIO.SYSTEM) {    ToolIO.out.println("Parsing file " + nis.sourceFile());  } else {    ToolIO.out.println("Parsing module " + nis.getModuleName() + " in file "+ nis.sourceFile());  }  boolean parseSuccess;  try {    parseTree=new tla2sany.parser.TLAplusParser(nis);    parseSuccess=parseTree.parse();    parseStamp=System.currentTimeMillis();  }  finally {    try {      nis.close();    } catch (    IOException e) {    }  }  if (!parseSuccess) {    errors.addAbort(Location.moduleLocation(nis.getModuleName()),"Could not parse module " + nis.getModuleName() + " from file "+ nis.getName(),true);  }  if (firstCall) {    spec.setName(getParseTree().heirs()[0].heirs()[1].getImage());  }  rootModule=new ModulePointer(spec,this,getParseTree());  determineModuleRelationships(rootModule,null);  verifyEquivalenceOfFileAndModuleNames(errors);  if (System.getProperty("TLA-Print","off").equals("file")) {    writeParseTreeToFile(true,errors);  } else   if (System.getProperty("TLA-Print","off").equals("on")) {    writeParseTreeToFile(false,errors);  }}  }
class C{  static WindowsPath createFromNormalizedPath(WindowsFileSystem fs,String path){  return createFromNormalizedPath(fs,path,null);}  }
class C{  public PendingInstallShortcutInfo(LauncherActivityInfoCompat info,Context context){  this.data=null;  mContext=context;  activityInfo=info;  user=info.getUser();  launchIntent=AppInfo.makeLaunchIntent(context,info,user);  label=info.getLabel().toString();}  }
class C{  public void testXPathExpression() throws Exception {  XPathNamespaceContext ctx=new XPathNamespaceContext();  ctx.addPrefix("n0","samples:schemas:simpleSchema");  Node node=SupportXML.getDocument().getDocumentElement();  XPath pathOne=XPathFactory.newInstance().newXPath();  pathOne.setNamespaceContext(ctx);  XPathExpression pathExprOne=pathOne.compile("/n0:simpleEvent/n0:nested1");  Node result=(Node)pathExprOne.evaluate(node,XPathConstants.NODE);  XPath pathTwo=XPathFactory.newInstance().newXPath();  pathTwo.setNamespaceContext(ctx);  XPathExpression pathExprTwo=pathTwo.compile("/n0:simpleEvent/n0:nested1/n0:prop1");  String resultTwo=(String)pathExprTwo.evaluate(result,XPathConstants.STRING);  XPath pathThree=XPathFactory.newInstance().newXPath();  pathThree.setNamespaceContext(ctx);  XPathExpression pathExprThree=pathThree.compile("/n0:simpleEvent/n0:nested3");  String resultThress=(String)pathExprThree.evaluate(result,XPathConstants.STRING);}  }
class C{  public void appendExceptFirst(String s){  if (index++ > 0) {    builder.append(s);  }}  }
class C{  public ManagedConnection createManagedConnection(Subject subject,ConnectionRequestInfo cri) throws ResourceException {  start();  return new FBManagedConnection(subject,cri,this);}  }
class C{  protected boolean canTriggerWalking(){  return false;}  }
class C{  public Queue<Pair<Env<AttrContext>,JCClassDecl>> desugar(Queue<Env<AttrContext>> envs){  ListBuffer<Pair<Env<AttrContext>,JCClassDecl>> results=new ListBuffer<>();  for (  Env<AttrContext> env : envs)   desugar(env,results);  return stopIfError(CompileState.FLOW,results);}  }
class C{  public static String formatInteger(int number){  return intFormat.format(number);}  }
class C{  public void remapIndexes(int start){  int end=getRowCount();  for (int i=start; i < end; i++) {    _indexes.put(get(i).getInitializeObject(),new Integer(i));  }}  }
class C{  public static void rectangle(double x,double y,double halfWidth,double halfHeight){  if (halfWidth < 0)   throw new IllegalArgumentException("half width must be nonnegative");  if (halfHeight < 0)   throw new IllegalArgumentException("half height must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfWidth);  double hs=factorY(2 * halfHeight);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public static boolean hasActiveSession(){synchronized (sSessions) {    final Collection<NgnAVSession> mysessions=sSessions.values();    for (    NgnAVSession session : mysessions) {      if (session.isActive()) {        return true;      }    }  }  return false;}  }
class C{  private void initializeKeys() throws CacheException {  if (tailKey.get() != -1) {    return;  }synchronized (this) {    long largestKey=-1;    long largestKeyLessThanHalfMax=-1;    long smallestKey=-1;    long smallestKeyGreaterThanHalfMax=-1;    Set<Long> keySet=this.region.keySet();    for (    Long key : keySet) {      long k=key.longValue();      if (k > largestKey) {        largestKey=k;      }      if (k > largestKeyLessThanHalfMax && k < MAXIMUM_KEY / 2) {        largestKeyLessThanHalfMax=k;      }      if (k < smallestKey || smallestKey == -1) {        smallestKey=k;      }      if ((k < smallestKeyGreaterThanHalfMax || smallestKeyGreaterThanHalfMax == -1) && k > MAXIMUM_KEY / 2) {        smallestKeyGreaterThanHalfMax=k;      }    }    if (smallestKeyGreaterThanHalfMax != -1 && largestKeyLessThanHalfMax != -1 && (smallestKeyGreaterThanHalfMax - largestKeyLessThanHalfMax) > MAXIMUM_KEY / 2) {      this.headKey=smallestKeyGreaterThanHalfMax;      this.tailKey.set(inc(largestKeyLessThanHalfMax));      logger.info(LocalizedMessage.create(LocalizedStrings.SingleWriteSingleReadRegionQueue_0_DURING_FAILOVER_DETECTED_THAT_KEYS_HAVE_WRAPPED,new Object[]{this,this.tailKey,Long.valueOf(this.headKey)}));    } else {      this.headKey=smallestKey == -1 ? 0 : smallestKey;      this.tailKey.set(inc(largestKey));    }    if (logger.isDebugEnabled()) {      logger.debug("{}: Initialized tail key to: {}, head key to: {}",this,this.tailKey,this.headKey);    }  }}  }
class C{  public ParsableBitArray(byte[] data){  this(data,data.length);}  }
class C{  public boolean finalLaunchCheck(ILaunchConfiguration configuration,String mode,IProgressMonitor monitor) throws CoreException {  monitor.beginTask("Verifying model files",4);  final Model model=configuration.getAdapter(Model.class);  IProject project=ResourceHelper.getProject(specName);  IFolder launchDir=project.getFolder(modelName);  IFile rootModule=launchDir.getFile(ModelHelper.FILE_TLA);  monitor.worked(1);  IParseResult parseResult=ToolboxHandle.parseModule(rootModule,new SubProgressMonitor(monitor,1),false,false);  Vector<TLAMarkerInformationHolder> detectedErrors=parseResult.getDetectedErrors();  boolean status=!AdapterFactory.isProblemStatus(parseResult.getStatus());  monitor.worked(1);  model.removeMarkers(Model.TLC_MODEL_ERROR_MARKER_SANY);  monitor.worked(1);  if (!detectedErrors.isEmpty()) {    TLCActivator.logDebug("Errors in model file found " + rootModule.getLocation());  }  FileEditorInput fileEditorInput=new FileEditorInput((IFile)rootModule);  FileDocumentProvider fileDocumentProvider=new FileDocumentProvider();  try {    fileDocumentProvider.connect(fileEditorInput);    IDocument document=fileDocumentProvider.getDocument(fileEditorInput);    FindReplaceDocumentAdapter searchAdapter=new FindReplaceDocumentAdapter(document);    for (int i=0; i < detectedErrors.size(); i++) {      TLAMarkerInformationHolder markerHolder=(TLAMarkerInformationHolder)detectedErrors.get(i);      String message=markerHolder.getMessage();      if (markerHolder.getModuleName() != null) {        if (markerHolder.getModuleName().equals(rootModule.getName())) {          int severity=markerHolder.getSeverityError();          int[] coordinates=markerHolder.getCoordinates();          Hashtable props=ModelHelper.createMarkerDescription(document,searchAdapter,message,severity,coordinates);          if (props != null) {            model.setMarker(props,Model.TLC_MODEL_ERROR_MARKER_SANY);          }        } else {          throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,"Fatal error during validation of the model. " + "SANY discovered an error somewhere else than the MC file. " + "This is a bug. The error message was " + message + " in the module "+ markerHolder.getModuleName()));        }      } else {        throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,"Fatal error during validation of the model. " + "SANY discovered an error somewhere else than the MC file. " + "This is a bug. The error message was " + message + "."));      }    }  }  finally {    fileDocumentProvider.disconnect(fileEditorInput);    monitor.done();  }  if (MODE_GENERATE.equals(mode)) {    return false;  } else {    TLCActivator.logDebug("Final check for the " + mode + " mode. The result of the check is "+ status);    return status;  }}  }
class C{  @Override public String toString(){  ToStringOperation operation=new ToStringOperation();  processOperation(operation);  return operation.toString();}  }
class C{  public static Chain mergeChains(Chain chain1,Chain chain2){  if (chain2 == null)   return chain1;  if (chain1 == null)   return chain2;  Assert.check(chain1.state.stacksize == chain2.state.stacksize && chain1.state.nlocks == chain2.state.nlocks);  if (chain1.pc < chain2.pc)   return new Chain(chain2.pc,mergeChains(chain1,chain2.next),chain2.state);  return new Chain(chain1.pc,mergeChains(chain1.next,chain2),chain1.state);}  }
class C{  public boolean isFilledRectangle(){  Object oo=get_Value(COLUMNNAME_IsFilledRectangle);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected short readShort() throws IOException, ReplicatorException, InterruptedException {  assertReadMode();  return dataInput.readShort();}  }
class C{  public int read() throws IOException {  return 0;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.899 -0500",hash_original_method="EB05E0A242CB818854C5BC92B57FA752",hash_generated_method="E915A8BE7FBA81DC7C0DB04A0C473549") public void dump(Printer pw,String prefix){  pw.println(prefix + "type: " + type);  pw.println(prefix + "packageName: " + packageName);  pw.println(prefix + "installerPackageName: " + installerPackageName);  pw.println(prefix + "processName: " + processName);  pw.println(prefix + "time: " + time);  pw.println(prefix + "systemApp: " + systemApp);switch (type) {case TYPE_CRASH:    crashInfo.dump(pw,prefix);  break;case TYPE_ANR:anrInfo.dump(pw,prefix);break;case TYPE_BATTERY:batteryInfo.dump(pw,prefix);break;case TYPE_RUNNING_SERVICE:runningServiceInfo.dump(pw,prefix);break;}}  }
class C{  public boolean hasCalendarId(){  return calendarId != NO_ID;}  }
class C{  private void createFromAssets(String myDBName,File dbfile,InputStream assetFileInputStream){  OutputStream out=null;  try {    String dbPath=dbfile.getAbsolutePath();    dbPath=dbPath.substring(0,dbPath.lastIndexOf("/") + 1);    File dbPathFile=new File(dbPath);    if (!dbPathFile.exists())     dbPathFile.mkdirs();    File newDbFile=new File(dbPath + myDBName);    out=new FileOutputStream(newDbFile);    byte[] buf=new byte[1024];    int len;    while ((len=assetFileInputStream.read(buf)) > 0)     out.write(buf,0,len);    Log.v("info","Copied pre-populated DB content to: " + newDbFile.getAbsolutePath());  } catch (  IOException ex) {    Log.v("createFromAssets","No pre-populated DB found, error=" + ex.getMessage());  } finally {    if (out != null) {      try {        out.close();      } catch (      IOException ignored) {      }    }  }}  }
class C{  public CLoaderThread(final CRemoteFileBrowser browser,final IDebugger debugger,final String path){  m_debugger=debugger;  m_path=path;  m_listener=new CDebuggerListener(browser,this);  m_debugger.addListener(m_listener);}  }
class C{  private void copyDataBase() throws IOException {  InputStream myInput=context.getAssets().open(ASSETS_NAME);  String outFileName=dbPath;  OutputStream myOutput=new FileOutputStream(outFileName);  byte[] buffer=new byte[1024];  int length;  while ((length=myInput.read(buffer)) > 0) {    myOutput.write(buffer,0,length);  }  myOutput.flush();  myOutput.close();  myInput.close();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void defineProgressBars(UIDefaults d){  d.put("ProgressBar.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("ProgressBar.States","Enabled,Disabled,Indeterminate,Finished");  d.put("ProgressBar.tileWhenIndeterminate",Boolean.TRUE);  d.put("ProgressBar.paintOutsideClip",Boolean.TRUE);  d.put("ProgressBar.rotateText",Boolean.TRUE);  d.put("ProgressBar.vertictalSize",new DimensionUIResource(19,150));  d.put("ProgressBar.horizontalSize",new DimensionUIResource(150,19));  addColor(d,"ProgressBar[Disabled].textForeground","seaGlassDisabledText",0.0f,0.0f,0.0f,0);  d.put("ProgressBar[Disabled+Indeterminate].progressPadding",new Integer(3));  d.put("progressBarTrackInterior",Color.WHITE);  d.put("progressBarTrackBase",new Color(0x4076bf));  d.put("ProgressBar.Indeterminate",new ProgressBarIndeterminateState());  d.put("ProgressBar.Finished",new ProgressBarFinishedState());  String p="ProgressBar";  String c=PAINTER_PREFIX + "ProgressBarPainter";  d.put(p + ".cycleTime",500);  d.put(p + ".progressPadding",new Integer(3));  d.put(p + ".trackThickness",new Integer(19));  d.put(p + ".tileWidth",new Integer(24));  d.put(p + ".backgroundFillColor",Color.WHITE);  d.put(p + ".font",new DerivedFont("defaultFont",0.769f,null,null));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,ProgressBarPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,ProgressBarPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].foregroundPainter",new LazyPainter(c,ProgressBarPainter.Which.FOREGROUND_ENABLED));  d.put(p + "[Enabled+Finished].foregroundPainter",new LazyPainter(c,ProgressBarPainter.Which.FOREGROUND_ENABLED_FINISHED));  d.put(p + "[Enabled+Indeterminate].foregroundPainter",new LazyPainter(c,ProgressBarPainter.Which.FOREGROUND_ENABLED_INDETERMINATE));  d.put(p + "[Disabled].foregroundPainter",new LazyPainter(c,ProgressBarPainter.Which.FOREGROUND_DISABLED));  d.put(p + "[Disabled+Finished].foregroundPainter",new LazyPainter(c,ProgressBarPainter.Which.FOREGROUND_DISABLED_FINISHED));  d.put(p + "[Disabled+Indeterminate].foregroundPainter",new LazyPainter(c,ProgressBarPainter.Which.FOREGROUND_DISABLED_INDETERMINATE));}  }
class C{  public static Request createBindingRequest(long priority) throws StunException {  Request bindingRequest=createBindingRequest();  PriorityAttribute attribute=AttributeFactory.createPriorityAttribute(priority);  bindingRequest.putAttribute(attribute);  return bindingRequest;}  }
class C{  void addReporter(String textReporter,int xx,int yy){  ReporterIcon l=new ReporterIcon(this);  l.setReporter(textReporter);  l.setLocation(xx,yy);  l.setSize(l.getPreferredSize().width,l.getPreferredSize().height);  l.setDisplayLevel(LABELS);  setDirty(true);  putItem(l);}  }
class C{  public void addDataChangedListener(DataChangedListener d){  listeners.addListener(d);}  }
class C{  @NotNull public static NativeBytesStore<Void> nativeStore(long capacity) throws IllegalArgumentException {  return of(capacity,true,true);}  }
class C{  public void testSuccessWithFailureRatio(){  CircuitBreaker breaker=new CircuitBreaker().withFailureThreshold(3,4);  breaker.close();  ClosedState state=new ClosedState(breaker);  assertTrue(breaker.isClosed());  for (int i=0; i < 20; i++) {    state.recordSuccess();    state.recordFailure();    assertTrue(breaker.isClosed());  }}  }
class C{  public static String displayMap(String mapName,Map<String,Object> map){  StringBuilder sb=new StringBuilder();  sb.append(mapName);  sb.append(":\n");  Set<String> keys=map.keySet();  if (keys.isEmpty()) {    sb.append("None\n");  } else {    int count=0;    for (    String key : keys) {      sb.append("  [");      sb.append(++count);      sb.append("] ");      sb.append(key);      sb.append(": ");      sb.append(map.get(key));      sb.append("\n");    }  }  return sb.toString();}  }
class C{  public void writeToStream(final ByteArrayOutputStream bos) throws IOException {  final ObjectOutput os=new ObjectOutputStream(bos);  os.writeObject(max_size);  for (int i=0; i < max_size; i++) {    final Object nextObj=items[i];    if (nextObj instanceof BasicStroke) {      os.writeObject(BASICSTROKE);      final BasicStroke stroke=(BasicStroke)items[i];      os.writeFloat(stroke.getLineWidth());      os.writeInt(stroke.getEndCap());      os.writeInt(stroke.getLineJoin());      os.writeFloat(stroke.getMiterLimit());      os.writeObject(stroke.getDashArray());      os.writeFloat(stroke.getDashPhase());    } else     if (nextObj instanceof Rectangle2D) {      os.writeObject(RECT);      final Rectangle2D rect=(Rectangle2D)items[i];      os.writeDouble(rect.getBounds2D().getX());      os.writeDouble(rect.getBounds2D().getY());      os.writeDouble(rect.getBounds2D().getWidth());      os.writeDouble(rect.getBounds2D().getHeight());    } else     if (nextObj instanceof BufferedImage) {      os.writeObject(BUFFERED_IMAGE);      final ByteArrayOutputStream baos=new ByteArrayOutputStream();      ImageIO.write((RenderedImage)nextObj,"png",baos);      os.writeObject(baos.toByteArray());    } else     if (nextObj instanceof GeneralPath) {      os.writeObject(Vector_Object.GENERAL_PATH);      PathSerializer.serializePath(os,((Shape)items[i]).getPathIterator(new AffineTransform()));    } else     if (nextObj instanceof T1Glyph) {      os.writeObject(T1GLYPH);      ((T1Glyph)nextObj).flushArea();      os.writeObject(nextObj);      ((T1Glyph)nextObj).writePathsToStream(os);    } else     if (nextObj instanceof TTGlyph) {      os.writeObject(TTGLYPH);      ((TTGlyph)nextObj).flushArea();      os.writeObject(nextObj);      ((TTGlyph)nextObj).writePathsToStream(os);    } else     if (nextObj instanceof T3Glyph) {      os.writeObject(T3GLYPH);      ((T3Glyph)nextObj).writePathsToStream(os);    } else     if (nextObj instanceof PdfTexturePaint) {      os.writeObject(TEXTUREDPAINT);      final ByteArrayOutputStream baos=new ByteArrayOutputStream();      ImageIO.write(((TexturePaint)nextObj).getImage(),"png",baos);      os.writeObject(baos.toByteArray());      final Rectangle2D rect=((TexturePaint)nextObj).getAnchorRect();      os.writeDouble(rect.getBounds2D().getX());      os.writeDouble(rect.getBounds2D().getY());      os.writeDouble(rect.getBounds2D().getWidth());      os.writeDouble(rect.getBounds2D().getHeight());    } else     if (nextObj instanceof Area) {      os.writeObject(AREA);      final Area area=(Area)items[i];      final PathIterator pathIterator=area.getPathIterator(new AffineTransform());      PathSerializer.serializePath(os,pathIterator);    } else {      try {        os.writeObject(GENERIC);        os.writeObject(nextObj);      } catch (      final Exception e) {        LogWriter.writeLog("Exception: " + e.getMessage());      }    }  }  os.close();}  }
class C{  public <T>T to(Class<T> type) throws Exception {  T instance=type.newInstance();  for (  Pair<String,String> kv : entries)   setKV(instance,kv.getKey(),kv.getValue());  return instance;}  }
class C{  public double localScore(int i,int parent){  double sum=0.0;  for (  BDeuScore score : scores) {    sum+=score.localScore(i,parent);  }  return sum / scores.size();}  }
class C{  boolean isAssignableAsBlankFinal(VarSymbol v,Env<AttrContext> env){  Symbol owner=env.info.scope.owner;  return v.owner == owner || ((owner.name == names.init || owner.kind == VAR || (owner.flags() & BLOCK) != 0) && v.owner == owner.owner && ((v.flags() & STATIC) != 0) == Resolve.isStatic(env));}  }
class C{  @Override public ODataResponse readEntity(GetEntityUriInfo uri_info,String content_type) throws ODataException {  ODataResponse rsp=null;  String targetName=uri_info.getTargetEntitySet().getName();  Map<String,Object> data=V1Model.getEntitySet(targetName).getEntityResponse(uri_info,makeLink().toString());  ExpandSelectTreeCreator creator=new ExpandSelectTreeCreator(uri_info.getSelect(),uri_info.getExpand());  EntityProviderWriteProperties p=EntityProviderWriteProperties.serviceRoot(makeLink()).expandSelectTree(creator.create()).callbacks(V1Model.getEntitySet(targetName).getCallbacks(makeLink(false))).build();  rsp=EntityProvider.writeEntry(content_type,uri_info.getTargetEntitySet(),data,p);  return rsp;}  }
class C{  public static void reset(){synchronized (lock) {    reset=true;  }}  }
class C{  public void initCourse(boolean isRestarted){  for (  Lesson lesson : getLessons()) {    lesson.initLesson(this,isRestarted);  }}  }
class C{  private void enableOkBtn(){  if (okButton != null) {    if (txtName.getText().trim().isEmpty() || txtKey.getText().trim().isEmpty()) {      okButton.setEnabled(false);    } else {      okButton.setEnabled(true);    }  }}  }
class C{  @Override public void removeTableModelListener(TableModelListener l){  m_Listeners.remove(l);}  }
class C{  protected void loadAndWrite(File file) throws HelpException {  FileReader fr=null;  BufferedReader br=null;  try {    fr=new FileReader(file);    br=new BufferedReader(fr);    String line;    while ((line=br.readLine()) != null) {      out.println(line);    }    out.flush();  } catch (  IOException e) {  } finally {    if (fr != null) {      try {        fr.close();      } catch (      IOException e) {      }    }    if (br != null)     try {      br.close();    } catch (    IOException e) {    }  }}  }
class C{  public Executor withAlgorithm(String algorithmName){  this.algorithmName=algorithmName;  return this;}  }
class C{  protected void addToPortMap(IOFSwitch sw,MacAddress mac,VlanVid vlan,OFPort portVal){  Map<MacVlanPair,OFPort> swMap=macVlanToSwitchPortMap.get(sw);  if (vlan == VlanVid.FULL_MASK || vlan == null) {    vlan=VlanVid.ofVlan(0);  }  if (swMap == null) {    swMap=Collections.synchronizedMap(new LRULinkedHashMap<MacVlanPair,OFPort>(MAX_MACS_PER_SWITCH));    macVlanToSwitchPortMap.put(sw,swMap);  }  swMap.put(new MacVlanPair(mac,vlan),portVal);}  }
class C{  protected boolean createTunnelToProxy(HttpRoute route,int hop,HttpContext context) throws HttpException, IOException {  throw new UnsupportedOperationException("Proxy chains are not supported.");}  }
class C{  public boolean isAllow_Info_InOut(){  Object oo=get_Value(COLUMNNAME_Allow_Info_InOut);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void visitJumpInsn(int opcode,Label label){  if (mv != null) {    mv.visitJumpInsn(opcode,label);  }}  }
class C{  public static void main(String[] args) throws Exception {  ServerSocketChannelThread serverThread=new ServerSocketChannelThread("SendUrgentDataServer");  serverThread.start();  boolean b=serverThread.isAlive();  String host=null;  int port=0;  boolean inline=false;  if (args.length > 0 && args[0].equals("-server")) {    System.out.println(serverThread.getAddress());    Thread.currentThread().suspend();  } else {    if (args.length > 0 && args[0].equals("-client")) {      host=args[1];      port=Integer.parseInt(args[2]);      if (args.length > 3) {        inline=args[2].equals("-inline");      }    } else {      host="localhost";      port=serverThread.getAddress().getPort();      if (args.length > 0) {        inline=args[0].equals("-inline");      }    }  }  System.out.println("OOB Inline : " + inline);  SocketAddress sa=new InetSocketAddress(host,port);  try (SocketChannel sc=SocketChannel.open(sa)){    sc.configureBlocking(false);    sc.socket().setOOBInline(inline);    sc.socket().sendUrgentData(0);    System.out.println("wrote 1 OOB byte");    ByteBuffer bb=ByteBuffer.wrap(new byte[100 * 1000]);    int blocked=0;    long total=0;    int n;    do {      n=sc.write(bb);      if (n == 0) {        System.out.println("blocked, wrote " + total + " so far");        if (++blocked == 10) {          break;        }        Thread.sleep(100);      } else {        total+=n;        bb.rewind();      }    } while (n > 0);    long attempted=0;    while (attempted < total) {      bb.rewind();      n=sc.write(bb);      System.out.println("wrote " + n + " normal bytes");      attempted+=bb.capacity();      String osName=System.getProperty("os.name").toLowerCase();      try {        sc.socket().sendUrgentData(0);      } catch (      IOException ex) {        if (osName.contains("linux")) {          if (!ex.getMessage().contains("Socket buffer full")) {            throw new RuntimeException("Unexpected message",ex);          }        } else         if (osName.contains("os x") || osName.contains("mac")) {          if (!ex.getMessage().equals("No buffer space available")) {            throw new RuntimeException("Unexpected message",ex);          }        } else         if (osName.contains("windows")) {          if (!(ex instanceof SocketException)) {            throw new RuntimeException("Unexpected exception",ex);          } else           if (!ex.getMessage().contains("Resource temporarily unavailable")) {            throw new RuntimeException("Unexpected message",ex);          }        } else {          throw new RuntimeException("Unexpected IOException",ex);        }      }      try {        Thread.sleep(100);      } catch (      InterruptedException ex) {        ex.printStackTrace();        break;      }    }  }  finally {    serverThread.close();  }}  }
class C{  public void addIntegratedItems(){  if (hooks.MetallurgyCoreLoaded) {    try {      String[] setNames={"base","precious","nether","fantasy","ender","utility"};      for (      String setName : setNames) {        for (        IOreInfo oreInfo : MetallurgyAPI.getMetalSet(setName).getOreList().values()) {switch (oreInfo.getType()) {case ALLOY:{              if (oreInfo.getIngot() != null && oreInfo.getDust() != null) {                RecipeHandler.addCrusherRecipe(MekanismUtils.size(oreInfo.getIngot(),1),MekanismUtils.size(oreInfo.getDust(),1));              }              break;            }case DROP:{            ItemStack ore=oreInfo.getOre();            ItemStack drop=oreInfo.getDrop();            if (drop != null && ore != null) {              RecipeHandler.addEnrichmentChamberRecipe(MekanismUtils.size(ore,1),MekanismUtils.size(drop,12));            }            break;          }default :{          ItemStack ore=oreInfo.getOre();          ItemStack dust=oreInfo.getDust();          ItemStack ingot=oreInfo.getIngot();          if (ore != null && dust != null) {            RecipeHandler.addEnrichmentChamberRecipe(MekanismUtils.size(ore,1),MekanismUtils.size(dust,2));            RecipeHandler.addCombinerRecipe(MekanismUtils.size(dust,8),MekanismUtils.size(ore,1));          }          if (ingot != null && dust != null) {            RecipeHandler.addCrusherRecipe(MekanismUtils.size(ingot,1),MekanismUtils.size(dust,1));          }          break;        }    }  }}} catch (Exception e) {}}}  }
class C{  public void disable(){  RequestParameters params=new RequestParameters();  params.add("enable","false");  this.getServices().post(params,new StringHandle("{}"));}  }
class C{  public void load(File file){  BufferedImage i=null;  try {    i=ImageIO.read(file);  } catch (  Exception e) {    throw new RuntimeException("Cannot load image file " + file + " because of error:\n\n"+ e);  }  int width=i.getWidth(null);  int height=i.getHeight(null);  int type=BufferedImage.TYPE_INT_ARGB;  original=new BufferedImage(width,height,type);  image=new BufferedImage(width,height,type);  original.flush();  image.flush();  clear();  Graphics2D g=(Graphics2D)(original.getGraphics());  g.drawImage(i,0,0,null);  g.dispose();}  }
class C{  @Override public String globalInfo(){  return "Maps the output of a multi-label classifier to a known label combination using the hamming distance." + "For more information see:\n" + getTechnicalInformation().toString();}  }
class C{  public final void testDEFAULTmdName(){  assertEquals("SHA-1",PSSParameterSpec.DEFAULT.getDigestAlgorithm());}  }
class C{  private double computeHeight(){  return hitBoxes.stream().mapToDouble(null).max().orElse(0);}  }
class C{  public void buildClassifier(Instances instances) throws Exception {  if (!(m_Classifier instanceof WeightedInstancesHandler)) {    throw new IllegalArgumentException("Classifier must be a " + "WeightedInstancesHandler!");  }  getCapabilities().testWithFail(instances);  instances=new Instances(instances);  instances.deleteWithMissingClass();  if (instances.numAttributes() == 1) {    System.err.println("Cannot build model (only class attribute present in data!), " + "using ZeroR model instead!");    m_ZeroR=new weka.classifiers.rules.ZeroR();    m_ZeroR.buildClassifier(instances);    return;  } else {    m_ZeroR=null;  }  m_Train=new Instances(instances,0,instances.numInstances());  m_NNSearch.setInstances(m_Train);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr attribute;  String attrName;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  attribute=testAddr.getAttributeNodeNS("http://www.nist.gov","domestic");  attrName=attribute.getNodeName();  assertEquals("attrName","emp:domestic",attrName);}  }
class C{  public SwitchPoint(){  this.mcs=new MutableCallSite(K_true);  this.mcsInvoker=mcs.dynamicInvoker();}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("geronimo1x",J2EEContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("geronimo2x",J2EEContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("geronimo3x",Geronimo3xContainerCapability.class);}  }
class C{  public PrintFileAction(Application app,@Nullable View view){  super(app,view);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public boolean isLargeModel(){  return largeModel;}  }
class C{  public static CoffeeEntry createCappuccinoEntry(SkuDetails cappuccinoDetails){  return new CoffeeEntry(cappuccinoDetails,CAPPUCCINO_CAFFEINE_RATE,CAPPUCCINO_ENERGY_RATE,CAPPUCCINO_CANDYNESS_RATE);}  }
class C{  public static boolean equals(Object[] array1,Object[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    Object e1=array1[i], e2=array2[i];    if (!(e1 == null ? e2 == null : e1.equals(e2))) {      return false;    }  }  return true;}  }
class C{  public OutlierResult run(Database database,Relation<N> spatial,Relation<O> relation){  final NeighborSetPredicate npred=getNeighborSetPredicateFactory().instantiate(database,spatial);  DistanceQuery<O> distFunc=getNonSpatialDistanceFunction().instantiate(relation);  WritableDoubleDataStore lrds=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_TEMP | DataStoreFactory.HINT_HOT);  WritableDoubleDataStore lofs=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  DoubleMinMax lofminmax=new DoubleMinMax();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    DBIDs neighbors=npred.getNeighborDBIDs(iditer);    double avg=0;    for (DBIDIter iter=neighbors.iter(); iter.valid(); iter.advance()) {      avg+=distFunc.distance(iditer,iter);    }    double lrd=1 / (avg / neighbors.size());    if (Double.isNaN(lrd)) {      lrd=0;    }    lrds.putDouble(iditer,lrd);  }  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    DBIDs neighbors=npred.getNeighborDBIDs(iditer);    double avg=0;    for (DBIDIter iter=neighbors.iter(); iter.valid(); iter.advance()) {      avg+=lrds.doubleValue(iter);    }    final double lrd=(avg / neighbors.size()) / lrds.doubleValue(iditer);    if (!Double.isNaN(lrd)) {      lofs.putDouble(iditer,lrd);      lofminmax.put(lrd);    } else {      lofs.putDouble(iditer,0.0);    }  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("Spatial Outlier Factor","sof-outlier",lofs,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new QuotientOutlierScoreMeta(lofminmax.getMin(),lofminmax.getMax(),0.0,Double.POSITIVE_INFINITY,1.0);  OutlierResult or=new OutlierResult(scoreMeta,scoreResult);  or.addChildResult(npred);  return or;}  }
class C{  @Override public void stopMonitoringStaleSystem(){  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  Iterator<Map.Entry<String,DistributedQueueItemProcessedCallback>> iter=VNXFILE_CACHE.entrySet().iterator();  StorageSystem storageDevice=null;  while (iter.hasNext()) {    Map.Entry<String,DistributedQueueItemProcessedCallback> entry=iter.next();    String storageDeviceURI=entry.getKey();    _logger.debug("storageDeviceURI :{}",storageDeviceURI);    try {      storageDevice=_dbClient.queryObject(StorageSystem.class,URI.create(storageDeviceURI));    } catch (    DatabaseException e) {      _logger.error(e.getMessage(),e);    }    if (null == storageDevice || storageDevice.getInactive()) {      _logger.info("Stale vnxfiler {} has been removed from monitoring",storageDeviceURI);      _connectionFactory.unsubscribeSMIProviderConnection(storageDeviceURI);      try {        entry.getValue().itemProcessed();      } catch (      Exception e) {        _logger.error("Exception occurred while removing monitoringJob token from ZooKeeper queue",e);      } finally {        iter.remove();        FAILED_VNXFILE_SUBSCRIPTION.remove(storageDeviceURI);      }    }  }  _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  public Task<R> refresh(){  task=TaskUtil.refresh(client,task);  return this;}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length < 1) {    System.err.println("usage: java edu.berkeley.nlp.io." + "PTBTokenizer [-cr] filename");    return;  }  PTBTokenizer tokenizer=new PTBTokenizer(new FileReader(args[args.length - 1]),"-cr".equals(args[0]));  List words=tokenizer.tokenize();  for (int i=0; i < words.size(); i++)   System.out.println(words.get(i));}  }
class C{  public SQLiteCustomFunction(String name,int numArgs,SQLiteDatabase.CustomFunction callback){  if (name == null) {    throw new IllegalArgumentException("name must not be null.");  }  this.name=name;  this.numArgs=numArgs;  this.callback=callback;}  }
class C{  public EqualityOperator createEqualityOperatorFromString(EDataType eDataType,String initialValue){  EqualityOperator result=EqualityOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public static boolean isLevelFiner(){  return Level.FINER.intValue() >= s_currentLevel.intValue();}  }
class C{  public static String escapeString(String str){  if (str == null) {    return str;  }  int sz=str.length();  StringBuilder stringBuilder=new StringBuilder(str.length());  for (int i=0; i < sz; i++) {    char ch=str.charAt(i);    if (ch > 0xfff) {      stringBuilder.append("\\u").append(hex(ch));    } else     if (ch > 0xff) {      stringBuilder.append("\\u0").append(hex(ch));    } else     if (ch > 0x7f) {      stringBuilder.append("\\u00").append(hex(ch));    } else     if (ch < 32) {switch (ch) {case '\b':        stringBuilder.append('\\').append('b');      break;case '\n':    stringBuilder.append('\\').append('n');  break;case '\t':stringBuilder.append('\\').append('t');break;case '\f':stringBuilder.append('\\').append('f');break;case '\r':stringBuilder.append('\\').append('r');break;default :if (ch > 0xf) {stringBuilder.append("\\u00").append(hex(ch));} else {stringBuilder.append("\\u000").append(hex(ch));}break;}} else {switch (ch) {case '\'':stringBuilder.append('\\').append('\'');break;case '"':stringBuilder.append('\\').append('"');break;case '\\':stringBuilder.append('\\').append('\\');break;case '/':stringBuilder.append('\\').append('/');break;default :stringBuilder.append(ch);break;}}}return stringBuilder.toString();}  }
class C{  public static double logFactorial(int n){  if (n < 0)   throw new IllegalArgumentException(); else   if (n <= 1)   return 0; else   return (n * Math.log(n)) - n + (0.5 * Math.log(2 * Math.PI * n));}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("batchstatus") @Valid BatchStatus batchStatus,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.BatchStatus jpaBatchStatus=new com.wipro.ats.bdre.md.dao.jpa.BatchStatus();    jpaBatchStatus.setBatchStateId(batchStatus.getBatchStateId());    jpaBatchStatus.setDescription(batchStatus.getDescription());    batchStatusDAO.update(jpaBatchStatus);    LOGGER.debug("Updating Batch State Id" + jpaBatchStatus.getBatchStateId());    restWrapper=new RestWrapper(batchStatus,RestWrapper.OK);    LOGGER.info(RECORDWITHID + batchStatus.getBatchStateId() + " updated in BatchStatus by User:"+ principal.getName()+ batchStatus);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.CONSTRAINT_TOKEN___CONSTRAINT_1:    getConstraint_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public boolean match(EnumDeclaration node,Object other){  if (!(other instanceof EnumDeclaration)) {    return false;  }  EnumDeclaration o=(EnumDeclaration)other;  return (safeSubtreeMatch(node.getJavadoc(),o.getJavadoc()) && safeSubtreeListMatch(node.modifiers(),o.modifiers()) && safeSubtreeMatch(node.getName(),o.getName())&& safeSubtreeListMatch(node.superInterfaceTypes(),o.superInterfaceTypes())&& safeSubtreeListMatch(node.enumConstants(),o.enumConstants())&& safeSubtreeListMatch(node.bodyDeclarations(),o.bodyDeclarations()));}  }
class C{  public static GeneralPath cardinalSpline(float pts[],int start,int npoints,float slack,boolean closed){  GeneralPath path=new GeneralPath();  path.moveTo(pts[start],pts[start + 1]);  return cardinalSpline(path,pts,start,npoints,slack,closed,0f,0f);}  }
class C{  public World loadWorld(UUID loader,@NonNull String worldName,@NonNull World.Environment environment) throws WorldDoesNotExistException {  World existingWorld=Bukkit.getWorld(worldName);  if (existingWorld == null) {    File worldDirectory=new File(Bukkit.getWorldContainer(),worldName);    if (!worldDirectory.exists() && loader != null) {      if (loader.toString().equalsIgnoreCase(WorldDimension.getBaseWorldName(worldName)))       throw new WorldDoesNotExistException();    }    if (worldDirectory.exists() && !worldDirectory.isDirectory()) {      throw new IllegalArgumentException(worldDirectory.getPath() + " exists, but is not a directory.");    }    World world=new WorldCreator(worldName).environment(environment).createWorld();    initializeWorld(world);    Bukkit.getScheduler().runTaskAsynchronously(core.getOriginObject(),null);    return world;  } else {    return existingWorld;  }}  }
class C{  public String str(){  if (Double.isNaN(m_val)) {    return "NaN";  } else   if (Double.isInfinite(m_val)) {    if (m_val > 0)     return "Infinity"; else     return "-Infinity";  }  double num=m_val;  String s=Double.toString(num);  int len=s.length();  if (s.charAt(len - 2) == '.' && s.charAt(len - 1) == '0') {    s=s.substring(0,len - 2);    if (s.equals("-0"))     return "0";    return s;  }  int e=s.indexOf('E');  if (e < 0) {    if (s.charAt(len - 1) == '0')     return s.substring(0,len - 1); else     return s;  }  int exp=Integer.parseInt(s.substring(e + 1));  String sign;  if (s.charAt(0) == '-') {    sign="-";    s=s.substring(1);    --e;  } else   sign="";  int nDigits=e - 2;  if (exp >= nDigits)   return sign + s.substring(0,1) + s.substring(2,e)+ zeros(exp - nDigits);  while (s.charAt(e - 1) == '0')   e--;  if (exp > 0)   return sign + s.substring(0,1) + s.substring(2,2 + exp)+ "."+ s.substring(2 + exp,e);  return sign + "0." + zeros(-1 - exp)+ s.substring(0,1)+ s.substring(2,e);}  }
class C{  public static void showCenterWindow(Window parent,Window window){  positionCenterWindow(parent,window);  showWindow(window);}  }
class C{  public static double interpolateZ(Coordinate p,Coordinate v0,Coordinate v1,Coordinate v2){  double x0=v0.x;  double y0=v0.y;  double a=v1.x - x0;  double b=v2.x - x0;  double c=v1.y - y0;  double d=v2.y - y0;  double det=a * d - b * c;  double dx=p.x - x0;  double dy=p.y - y0;  double t=(d * dx - b * dy) / det;  double u=(-c * dx + a * dy) / det;  double z=v0.z + t * (v1.z - v0.z) + u * (v2.z - v0.z);  return z;}  }
class C{  public boolean isNonZero(){  return this.encode().isNonZero();}  }
class C{  public final synchronized int[] elementAt(final int id){  if (id >= max_size) {    return null;  } else {    final int[] rectParams=new int[4];    System.arraycopy(items[id],0,rectParams,0,rectParams.length);    return rectParams;  }}  }
class C{  public static List<Series> listSeries(){  List<Series> result=new LinkedList<Series>();  List<String> ids=new LinkedList<String>();  PreparedStatement statement=DatabaseRequest.ALL_SERIES.getStatement();  try {    ResultSet set=statement.executeQuery();    while (set.next()) {      String id=set.getString("id");      if (!ids.contains(id)) {        ids.add(id);        result.add(new Series(id,set.getString("name"),set.getString("serie_sort")));      }    }  } catch (  SQLException e) {    logger.error("listSeries: " + e);    sqlException+=(2 ^ 8);  }  return result;}  }
class C{  static public List<PastCourse> compress(List<PastCourse> pastCourseList) throws Exception {  HashMap<String,List<PastCourse>> courseMap=new HashMap<>();  for (  PastCourse c : pastCourseList) {    if (courseMap.containsKey(c.getInstructor())) {      try {        List<PastCourse> instructorList=courseMap.get(c.getInstructor());        boolean hasAdded=false;        for (        PastCourse cls : instructorList) {          if (cls.isHonor() == c.isHonor()) {            cls.add(c);            hasAdded=true;          }        }        if (!hasAdded)         instructorList.add(c);      } catch (      Exception e) {        System.out.println(e);        throw new Exception("List contains different courses");      }    } else {      List<PastCourse> newList=new ArrayList<>();      newList.add(c);      courseMap.put(c.getInstructor(),newList);    }  }  List<PastCourse> compressedList=new ArrayList<>();  for (  List<PastCourse> list : courseMap.values()) {    for (    PastCourse c : list) {      compressedList.add(c);    }  }  return compressedList;}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TLongIntHashMap)) {    return false;  }  TLongIntHashMap that=(TLongIntHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public void testBuildScenario_List(){  System.out.println("buildScenario with several Url");  List<String> urlList=new LinkedList<>();  String url1="http://www.test1.org";  String url2="http://www.test2.org";  String url3="http://www.test3.org";  String url4="http://www.test4.org";  urlList.add(url1);  urlList.add(url2);  urlList.add(url3);  urlList.add(url4);  String expResult="" + "{" + "\"seleniumVersion\":\"2\","+ "\"formatVersion\":1,"+ "\"steps\":"+ "["+ "{"+ "\"type\":\"get\","+ "\"url\":\"http://www.test1.org\""+ "}"+ ","+ "{"+ "\"type\":\"get\","+ "\"url\":\"http://www.test2.org\""+ "}"+ ","+ "{"+ "\"type\":\"get\","+ "\"url\":\"http://www.test3.org\""+ "}"+ ","+ "{"+ "\"type\":\"get\","+ "\"url\":\"http://www.test4.org\""+ "}"+ "]"+ "}";  String result=ScenarioBuilder.buildScenario(urlList);  assertEquals(expResult,result);}  }
class C{  public final MutableDouble3D subtractIn(Double3D other){  x=x - other.x;  y=y - other.y;  z=z - other.z;  return this;}  }
class C{  public static boolean isEmpty(CharSequence str){  return TextUtils.isEmpty(str);}  }
class C{  public static void d(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  public static void destroyForcefullyAndWait(SystemProcess process,long timeout,TimeUnit unit) throws IOException, InterruptedException, TimeoutException {  Stopwatch sw=Stopwatch.createStarted();  process.destroyForcefully();  waitFor(process,sw,timeout,unit,"Destroyed {} forcefully","Could not destroy %s forcefully");}  }
class C{  public static void notifyToolkitThreadBusy(){  getInstance().setToolkitBusy(true);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean hasCommentCountExt(){  return hasExtension(GphotoCommentCount.class);}  }
class C{  public boolean hasFreeArguments(){  return containsArguments;}  }
class C{  @Override public DeserializationConfig createUnshared(SubtypeResolver subtypeResolver){  HashMap<ClassKey,Class<?>> mixins=_mixInAnnotations;  _mixInAnnotationsShared=true;  return new DeserializationConfig(this,mixins,subtypeResolver);}  }
class C{  protected void initTableSchema(ClassDescriptor baseDescriptor){  DBRelationalDescriptor descriptor=(DBRelationalDescriptor)baseDescriptor;  LinkedList<Entity> intrinsicEntity=new LinkedList<>();  if (descriptor.getAccessor() instanceof EntitySpecAccessor) {    intrinsicEntity.add(((EntitySpecAccessor)descriptor.getAccessor()).getEntity());  } else {    throw new IllegalStateException("Invalid getAccessor Type : " + descriptor.getAccessor());  }  TableDefinition tableDefintion=null;  if (descriptor.hasTablePerClassPolicy() && descriptor.isAbstract()) {    return;  }  List<DatabaseTable> processTables=new ArrayList<>();  for (  DatabaseTable table : descriptor.getTables()) {    tableDefintion=getTableDefFromDBTable(intrinsicEntity.peek(),null,intrinsicEntity,table);    if (intrinsicEntity.peek().getTable(table.getName()) instanceof SecondaryTable) {      processTables.add(table);    }  }  processTables.add(descriptor.getDefaultTable());  Set<String> processTablesName=processTables.stream().map(null).collect(toSet());  Set<DatabaseField> remainingDatabaseFields=new HashSet<>(descriptor.getFields());  for (  DatabaseMapping databaseMapping : descriptor.getMappings()) {    LinkedList<Attribute> intrinsicAttribute;    ClassDescriptor refDescriptor=databaseMapping.getReferenceDescriptor();    List<DatabaseField> processDatabaseFields=new LinkedList<>();    if (databaseMapping.getFields() != null) {      processDatabaseFields.addAll(databaseMapping.getFields());    } else {      processDatabaseFields.add(databaseMapping.getField());    }    for (    DatabaseField dbField : processDatabaseFields) {      remainingDatabaseFields.remove(dbField);      intrinsicAttribute=new LinkedList<>();      Attribute managedAttribute=(Attribute)databaseMapping.getProperty(Attribute.class);      Boolean isInherited=(Boolean)databaseMapping.getProperty(Inheritance.class);      isInherited=isInherited == null ? false : isInherited;      intrinsicAttribute.add(managedAttribute);      Attribute attribute=getManagedAttribute(refDescriptor,dbField,intrinsicAttribute);      if (attribute != null) {        managedAttribute=attribute;      }      if (dbField.isCreatable()) {        boolean isPKField;        boolean isFKField=false;        boolean isInverse=false;        isPKField=descriptor.getPrimaryKeyFields().contains(dbField);        Map secondaryKeyMap=descriptor.getAdditionalTablePrimaryKeyFields().get(dbField.getTable());        if (secondaryKeyMap != null) {          isPKField=isPKField || secondaryKeyMap.containsValue(dbField);        }        isPKField=isPKField || dbField.isPrimaryKey();        if (managedAttribute instanceof RelationAttribute) {          isFKField=true;          isInverse=true;        }        FieldDefinition fieldDef=getFieldDefFromDBField(intrinsicEntity.get(0),intrinsicAttribute,managedAttribute,isInverse,isFKField,false,isInherited,false,false,false,dbField);        if (isPKField) {          fieldDef.setIsPrimaryKey(true);          String sequenceName=descriptor.getSequenceNumberName();          DatabaseLogin login=this.project.getLogin();          Sequence seq=login.getSequence(sequenceName);          if (seq instanceof DefaultSequence) {            seq=login.getDefaultSequence();          }          boolean isIdentity=seq instanceof NativeSequence && seq.shouldAcquireValueAfterInsert();          fieldDef.setIsIdentity(isIdentity);        }        tableDefintion=this.tableMap.get(dbField.getTableName());        if ((tableDefintion != null) && !tableDefintion.getFields().contains(fieldDef)) {          tableDefintion.addField(fieldDef);        }      }    }  }  for (  DatabaseField dbField : remainingDatabaseFields) {    boolean isFKField=false;    boolean isInverse=false;    if (!processTablesName.contains(dbField.getTable().getName())) {      continue;    }    FieldDefinition fieldDef;    if (intrinsicEntity.get(0).getDiscriminatorColumnName().equalsIgnoreCase(dbField.getNameDelimited(databasePlatform))) {      fieldDef=getFieldDefFromDBField(intrinsicEntity.get(0),null,null,isInverse,isFKField,false,false,true,false,false,dbField);    } else {      fieldDef=getFieldDefFromDBField(intrinsicEntity.get(0),null,null,isInverse,isFKField,false,false,false,true,false,dbField);    }    tableDefintion=this.tableMap.get(dbField.getTableName());    if ((tableDefintion != null) && !tableDefintion.getFields().contains(fieldDef)) {      tableDefintion.addField(fieldDef);    }  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public void testUppercase() throws Exception {  CharacterRunAutomaton single=new CharacterRunAutomaton(new RegExp("[A-Z][a-z]*").toAutomaton());  Analyzer a=new MockAnalyzer(random(),single,false);  assertAnalyzesTo(a,"FooBarBAZ",new String[]{"Foo","Bar","B","A","Z"},new int[]{0,3,6,7,8},new int[]{3,6,7,8,9});  assertAnalyzesTo(a,"aFooBar",new String[]{"Foo","Bar"},new int[]{1,4},new int[]{4,7});  checkRandomData(random(),a,100);}  }
class C{  public FastCharBuffer append(CharSequence csq){  append(csq,0,csq.length());  return this;}  }
class C{  private static final BitSet allDocs(final SolrClient c,final int maxDocIdExpected) throws Exception {  BitSet docs=new BitSet(maxDocIdExpected + 1);  String cursorMark=CURSOR_MARK_START;  int docsOnThisPage=Integer.MAX_VALUE;  while (0 < docsOnThisPage) {    final SolrParams p=params("q","*:*","rows","100","sort","id asc",CURSOR_MARK_PARAM,cursorMark);    QueryResponse rsp=c.query(p);    cursorMark=rsp.getNextCursorMark();    docsOnThisPage=0;    for (    SolrDocument doc : rsp.getResults()) {      docsOnThisPage++;      int id_i=((Integer)doc.get("id_i")).intValue();      assertTrue("found id_i bigger then expected " + maxDocIdExpected + ": "+ id_i,id_i <= maxDocIdExpected);      docs.set(id_i);    }    cursorMark=rsp.getNextCursorMark();  }  return docs;}  }
class C{  void mutate(){  do {    int iBit;    do {      iBit=m_random.nextInt(m_nNodes * m_nNodes);    } while (isSquare(iBit));    m_bits[iBit]=!m_bits[iBit];  } while (hasCycles());  calcGlobalScore();}  }
class C{  public void editar(Visitante visitante){  try {    String sql="UPDATE tb_visitantes SET nome=?, funcao=?, cidade=?, estado=?, pais=?, data_visita=?, descricao=?, tipo=? WHERE id_visitante=? ";    stm=conector.prepareStatement(sql);    stm.setString(1,visitante.getNome());    stm.setString(2,visitante.getFuncao());    stm.setString(3,visitante.getCidade());    stm.setString(4,visitante.getEstado());    stm.setString(5,visitante.getPais());    stm.setTimestamp(6,Tempo.toTimestamp(visitante.getDataVisita()));    stm.setString(7,visitante.getDescricao());    stm.setString(8,visitante.getTipo());    stm.setInt(9,visitante.getId());    stm.executeUpdate();    stm.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao atualizar visitante na base de dados! \n" + ex);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TENUM__AST_ELEMENT:    return astElement != null;case TypesPackage.TENUM__EXTERNAL:  return external != EXTERNAL_EDEFAULT;case TypesPackage.TENUM__LITERALS:return literals != null && !literals.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public GPUImageRGBDilationFilter(int radius){  this(getVertexShader(radius),getFragmentShader(radius));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static String do_eval(Context cx,StackFrame frame,String expr){  String resultString;  Debugger saved_debugger=cx.getDebugger();  Object saved_data=cx.getDebuggerContextData();  int saved_level=cx.getOptimizationLevel();  cx.setDebugger(null,null);  cx.setOptimizationLevel(-1);  cx.setGeneratingDebug(false);  try {    Callable script=(Callable)cx.compileString(expr,"",0,null);    Object result=script.call(cx,frame.scope,frame.thisObj,ScriptRuntime.emptyArgs);    if (result == Undefined.instance) {      resultString="";    } else {      resultString=ScriptRuntime.toString(result);    }  } catch (  Exception exc) {    resultString=exc.getMessage();  } finally {    cx.setGeneratingDebug(true);    cx.setOptimizationLevel(saved_level);    cx.setDebugger(saved_debugger,saved_data);  }  if (resultString == null) {    resultString="null";  }  return resultString;}  }
class C{  public static InsnList saveLocals(MarkerType markerType,StorageVariables storageVars,Frame<BasicValue> frame){  Validate.notNull(markerType);  Validate.notNull(storageVars);  Validate.notNull(frame);  Variable intsVar=storageVars.getIntStorageVar();  Variable floatsVar=storageVars.getFloatStorageVar();  Variable longsVar=storageVars.getLongStorageVar();  Variable doublesVar=storageVars.getDoubleStorageVar();  Variable objectsVar=storageVars.getObjectStorageVar();  int intsCounter=0;  int floatsCounter=0;  int longsCounter=0;  int doublesCounter=0;  int objectsCounter=0;  StorageSizes storageSizes=computeSizes(frame);  InsnList ret=new InsnList();  ret.add(merge(debugMarker(markerType,"Saving locals"),mergeIf(intsVar != null,null),mergeIf(floatsVar != null,null),mergeIf(longsVar != null,null),mergeIf(doublesVar != null,null),mergeIf(objectsVar != null,null)));  for (int i=0; i < frame.getLocals(); i++) {    BasicValue basicValue=frame.getLocal(i);    Type type=basicValue.getType();    if (type == null) {      ret.add(debugMarker(markerType,"Skipping uninitialized value at " + i));      continue;    }    if ("Lnull;".equals(type.getDescriptor())) {      ret.add(debugMarker(markerType,"Skipping null value at " + i));      continue;    }switch (type.getSort()) {case Type.BOOLEAN:case Type.BYTE:case Type.SHORT:case Type.CHAR:case Type.INT:      ret.add(debugMarker(markerType,"Inserting int at LVT index " + i + " to storage index "+ intsCounter));    ret.add(new VarInsnNode(Opcodes.ALOAD,intsVar.getIndex()));  ret.add(new LdcInsnNode(intsCounter));ret.add(new VarInsnNode(Opcodes.ILOAD,i));ret.add(new InsnNode(Opcodes.IASTORE));intsCounter++;break;case Type.FLOAT:ret.add(debugMarker(markerType,"Inserting float at LVT index " + i + " to storage index "+ floatsCounter));ret.add(new VarInsnNode(Opcodes.ALOAD,floatsVar.getIndex()));ret.add(new LdcInsnNode(floatsCounter));ret.add(new VarInsnNode(Opcodes.FLOAD,i));ret.add(new InsnNode(Opcodes.FASTORE));floatsCounter++;break;case Type.LONG:ret.add(debugMarker(markerType,"Inserting long at LVT index " + i + " to storage index "+ longsCounter));ret.add(new VarInsnNode(Opcodes.ALOAD,longsVar.getIndex()));ret.add(new LdcInsnNode(longsCounter));ret.add(new VarInsnNode(Opcodes.LLOAD,i));ret.add(new InsnNode(Opcodes.LASTORE));longsCounter++;break;case Type.DOUBLE:ret.add(debugMarker(markerType,"Inserting double at LVT index " + i + " to storage index "+ doublesCounter));ret.add(new VarInsnNode(Opcodes.ALOAD,doublesVar.getIndex()));ret.add(new LdcInsnNode(doublesCounter));ret.add(new VarInsnNode(Opcodes.DLOAD,i));ret.add(new InsnNode(Opcodes.DASTORE));doublesCounter++;break;case Type.ARRAY:case Type.OBJECT:ret.add(debugMarker(markerType,"Inserting object at LVT index " + i + " to storage index "+ objectsCounter));ret.add(new VarInsnNode(Opcodes.ALOAD,objectsVar.getIndex()));ret.add(new LdcInsnNode(objectsCounter));ret.add(new VarInsnNode(Opcodes.ALOAD,i));ret.add(new InsnNode(Opcodes.AASTORE));objectsCounter++;break;case Type.METHOD:case Type.VOID:default :throw new IllegalStateException();}}return ret;}  }
class C{  final public LoadStats loadData(final String resource,final String baseURL,final RDFFormat rdfFormat) throws IOException {  if (resource == null)   throw new IllegalArgumentException();  if (baseURL == null)   throw new IllegalArgumentException();  if (rdfFormat == null)   throw new IllegalArgumentException();  return loadData(new String[]{resource},new String[]{baseURL},new RDFFormat[]{rdfFormat});}  }
class C{  public boolean isNativeMethod(){  return lineNumber == -2;}  }
class C{  public void fadeToLayer(int index){  mTransitionState=TRANSITION_STARTING;  Arrays.fill(mIsLayerOn,false);  mIsLayerOn[index]=true;  invalidateSelf();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  protected static Object reDefineType(QueryColumnImpl column,Object value){  column.typeChecked=false;  if (value == null || column.type == Types.OTHER)   return value;  if (value instanceof String && ((String)value).isEmpty())   return null;switch (column.type) {case Types.DOUBLE:    return reDefineDouble(column,value);case Types.BIGINT:  return reDefineDecimal(column,value);case Types.NUMERIC:return reDefineDouble(column,value);case Types.INTEGER:return reDefineInteger(column,value);case Types.TINYINT:return reDefineTinyInt(column,value);case Types.FLOAT:return reDefineFloat(column,value);case Types.DECIMAL:return reDefineDecimal(column,value);case Types.REAL:return reDefineFloat(column,value);case Types.SMALLINT:return reDefineShort(column,value);case Types.TIMESTAMP:return reDefineDateTime(column,value);case Types.DATE:return reDefineDateTime(column,value);case Types.TIME:return reDefineDateTime(column,value);case Types.CHAR:return reDefineString(column,value);case Types.VARCHAR:return reDefineString(column,value);case Types.LONGVARCHAR:return reDefineString(column,value);case Types.CLOB:return reDefineClob(column,value);case Types.BOOLEAN:return reDefineBoolean(column,value);case Types.BIT:return reDefineBoolean(column,value);case Types.BINARY:return reDefineBinary(column,value);case Types.VARBINARY:return reDefineBinary(column,value);case Types.LONGVARBINARY:return reDefineBinary(column,value);case Types.BLOB:return reDefineBlob(column,value);case Types.ARRAY:return reDefineOther(column,value);case Types.DATALINK:return reDefineOther(column,value);case Types.DISTINCT:return reDefineOther(column,value);case Types.JAVA_OBJECT:return reDefineOther(column,value);case Types.NULL:return reDefineOther(column,value);case Types.STRUCT:return reDefineOther(column,value);case Types.REF:return reDefineOther(column,value);default :return value;}}  }
class C{  public boolean containsValue(int val){  byte[] states=_states;  int[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  private void materializeKNNAndRKNNs(ArrayDBIDs ids,FiniteProgress progress){  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    if (materialized_RkNN.get(iter) == null) {      materialized_RkNN.put(iter,new TreeSet<DoubleDBIDPair>());    }  }  List<? extends KNNList> kNNList=knnQuery.getKNNForBulkDBIDs(ids,k);  int i=0;  for (DBIDIter id=ids.iter(); id.valid(); id.advance(), i++) {    KNNList kNNs=kNNList.get(i);    storage.put(id,kNNs);    for (DoubleDBIDListIter iter=kNNs.iter(); iter.valid(); iter.advance()) {      TreeSet<DoubleDBIDPair> rknns=materialized_RkNN.get(iter);      rknns.add(makePair(iter,id));    }    getLogger().incrementProcessed(progress);  }  getLogger().ensureCompleted(progress);}  }
class C{  public Result decodeWithState(BinaryBitmap image) throws NotFoundException {  if (readers == null) {    setHints(null);  }  return decodeInternal(image);}  }
class C{  public Node item(int index){  int handle=m_firstChild;  while (--index >= 0 && handle != DTM.NULL) {    handle=m_parentDTM.getNextSibling(handle);  }  if (handle == DTM.NULL) {    return null;  }  return m_parentDTM.getNode(handle);}  }
class C{  public synchronized static boolean init(String[] commandLine,Class<?> root){  if (configState == INITIAL) {    if (commandLine != null && commandLine.length != 0) {      userConfigSupplied=true;      parmsInternal.readCommandLine(commandLine);    }    configState=LOADING;    try {      String configfile=parms.getString("hp");      if (configfile.length() > 0) {        try {          parmsInternal.readConfigFile(configfile);        } catch (        IOException e) {          logger.log(Level.WARNING,"Error reading file [" + configfile + "]",e);        }      }    } catch (    TypedPropertyException e) {    }    registerConfig();    if (userConfigSupplied) {      final StringBuilder sb=new StringBuilder();      for (      String s : commandLine)       sb.append(s).append(' ');      Log.logger.log(Level.FINEST,"Commandline:");      Log.logger.log(Level.FINEST,sb.toString());    }  }  if (root != null)   registerAnother(root);  return userConfigSupplied;}  }
class C{  protected Signature mergeSignatures(Signature first,Signature second,int numBins){  int d2=-1;  for (int i=0; i < second.spec.length; i+=2) {    if (second.spec[i] >= 0) {      assert (d2 == -1) : "Merging with non-1-signature?!?";      d2=i;    }  }  assert (d2 >= 0) : "Merging with empty signature?";  if (first.spec[d2] >= 0) {    return null;  }  final ModifiableDBIDs intersection=DBIDUtil.intersection(first.ids,second.ids);  final int support=intersection.size();  double width=(second.spec[d2 + 1] - second.spec[d2] + 1.) / (double)numBins;  double expect=first.ids.size() * width;  if (support <= expect || support < minClusterSize) {    return null;  }  final double test=PoissonDistribution.rawProbability(support,expect);  if ((poissonThreshold) <= test) {    return null;  }  int[] spec=first.spec.clone();  spec[d2]=second.spec[d2];  spec[d2 + 1]=second.spec[d2];  final Signature newsig=new Signature(spec,intersection);  if (LOG.isDebugging()) {    LOG.debug(newsig.toString());  }  return newsig;}  }
class C{  public SyncHttpClient(int httpPort,int httpsPort){  super(false,httpPort,httpsPort);}  }
class C{  public static boolean isBookSearchUrl(String url){  return url.startsWith("http://google.com/books") || url.startsWith("http://books.google.");}  }
class C{  private void verifyAllParameters(){  for (  String parameter : parameterValueMap.keySet()) {    verifyParameter(parameter);  }}  }
class C{  public MessageBuilder withContent(String content,Styles... styles){  this.content="";  return appendContent(content,styles);}  }
class C{  public void preProcess(final HttpRequest request,final HttpProcessor processor,final HttpContext context) throws HttpException, IOException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (processor == null) {    throw new IllegalArgumentException("HTTP processor may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  processor.process(request,context);}  }
class C{  public EigenvalueDecomposition eig(){  return new EigenvalueDecomposition(this);}  }
class C{  public static byte[] longToBytes(final long x){  final ByteBuffer buffer=ByteBuffer.allocate(8);  buffer.putLong(x);  return buffer.array();}  }
class C{  @SuppressWarnings("serial") public void testUnion(){  final UnionNode un1=(UnionNode)new Helper(){{      tmp=unionNode(joinGroupNode(statementPatternNode(varNode(x),constantNode(c),varNode(y))),joinGroupNode(bind(varNode(y),varNode(x))));    }  }.getTmp();  final UnionNode un2=(UnionNode)new Helper(){{      tmp=unionNode(joinGroupNode(bind(varNode(y),varNode(x))),joinGroupNode(statementPatternNode(varNode(x),constantNode(c),varNode(y))));    }  }.getTmp();  final Set<IVariable<?>> requiredBound=new HashSet<IVariable<?>>(){{      add(Var.var("y"));    }  };  final Set<IVariable<?>> desiredBound=new HashSet<IVariable<?>>(){{      add(Var.var("x"));      add(Var.var("y"));    }  };  final StaticAnalysis sa=new StaticAnalysis(new QueryRoot(QueryType.SELECT),null);  assertEquals(requiredBound,un1.getRequiredBound(sa));  assertEquals(desiredBound,un1.getDesiredBound(sa));  assertEquals(requiredBound,un2.getRequiredBound(sa));  assertEquals(desiredBound,un2.getDesiredBound(sa));}  }
class C{  private boolean isComputeHost(ComputeDescription computeDescription){  List<String> supportedChildren=computeDescription.supportedChildren;  return supportedChildren != null && supportedChildren.contains(ComputeType.VM_GUEST.name());}  }
class C{  public static AutomaticGainControl create(int audioSession){  AutomaticGainControl agc=null;  try {    agc=new AutomaticGainControl(audioSession);  } catch (  IllegalArgumentException e) {    Log.w(TAG,"not implemented on this device " + agc);  }catch (  UnsupportedOperationException e) {    Log.w(TAG,"not enough resources");  }catch (  RuntimeException e) {    Log.w(TAG,"not enough memory");  } finally {    return agc;  }}  }
class C{  public final void testGetEncoded(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  X509EncodedKeySpec eks=new X509EncodedKeySpec(encodedKey);  byte[] ek=eks.getEncoded();  assertTrue(Arrays.equals(encodedKey,ek));}  }
class C{  private static byte[] convertToByteArray(CharSequence charSequence){  checkNotNull(charSequence);  byte[] byteArray=new byte[charSequence.length() << 1];  for (int i=0; i < charSequence.length(); i++) {    int bytePosition=i << 1;    byteArray[bytePosition]=(byte)((charSequence.charAt(i) & 0xFF00) >> 8);    byteArray[bytePosition + 1]=(byte)(charSequence.charAt(i) & 0x00FF);  }  return byteArray;}  }
class C{  public Image scaled(int width,int height){  return scaledImpl(width,height);}  }
class C{  @Override public void clearBatch() throws SQLException {  try {    debugCodeCall("clearBatch");    checkClosed();    batchCommands=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean removeStatemachine(IStatemachine statemachine){  lock.writeLock().lock();  boolean ret=statemachineList.remove(statemachine);  lock.writeLock().unlock();  return ret;}  }
class C{  public static List<IUser> loadUsers(final SQLProvider provider) throws CouldntLoadDataException {  Preconditions.checkNotNull(provider,"IE00206: provider argument can not be null");  final CConnection connection=provider.getConnection();  final String query="SELECT user_id, user_name FROM " + CTableNames.USER_TABLE;  final ArrayList<IUser> users=new ArrayList<>();  try (ResultSet resultSet=connection.executeQuery(query,true)){    while (resultSet.next()) {      final int userId=resultSet.getInt(1);      final String userName=resultSet.getString(2);      users.add(new CUser(userId,userName));    }  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }  return users;}  }
class C{  public boolean isInsert(){  return isInsert;}  }
class C{  @SuppressWarnings("unchecked") public V asValue(final LexiconRelation lex){  if (literal == null) {    literal=(V)lex.getValueFactory().createLiteral(getLabel(),PACKED_LONG);    literal.setIV(this);  }  return literal;}  }
class C{  private CGraphDialogs(){}  }
class C{  public double weightedFalseNegativeRate(){  double[] classCounts=new double[m_NumClasses];  double classCountSum=0;  for (int i=0; i < m_NumClasses; i++) {    for (int j=0; j < m_NumClasses; j++) {      classCounts[i]+=m_ConfusionMatrix[i][j];    }    classCountSum+=classCounts[i];  }  double falseNegTotal=0;  for (int i=0; i < m_NumClasses; i++) {    double temp=falseNegativeRate(i);    falseNegTotal+=(temp * classCounts[i]);  }  return falseNegTotal / classCountSum;}  }
class C{  public static EvictionAlgorithm parseValue(int v){  if (v < 0 || v >= enumValueTable.length) {    return null;  } else {    return enumValueTable[v];  }}  }
class C{  public void modulo() throws IOException {  print("modulo",null);}  }
class C{  public void writeSwitchPageTag(byte page) throws IOException {  if (pageTagState != page) {    pageTagState=page;    write(WbXmlLiterals.SWTICH_PAGE);    write(pageTagState);  }}  }
class C{  public VPFFeatureTableFilter(){}  }
class C{  public boolean equals(Object obj){  if (obj == null || (obj.getClass() != getClass())) {    return false;  }  AbstractElementSelector s=(AbstractElementSelector)obj;  return (s.namespaceURI.equals(namespaceURI) && s.localName.equals(localName));}  }
class C{  @Override public final boolean incrementToken() throws IOException {  while (true) {    if (curTermBuffer == null) {      if (!input.incrementToken()) {        return false;      } else {        curTermBuffer=termAtt.buffer().clone();        curTermLength=termAtt.length();        curCodePointCount=Character.codePointCount(termAtt,0,termAtt.length());        curGramSize=minGram;        curPos=0;        curPosInc=posIncAtt.getPositionIncrement();        curPosLen=posLenAtt.getPositionLength();        tokStart=offsetAtt.startOffset();        tokEnd=offsetAtt.endOffset();      }    }    if (curGramSize > maxGram || (curPos + curGramSize) > curCodePointCount) {      ++curPos;      curGramSize=minGram;    }    if ((curPos + curGramSize) <= curCodePointCount) {      clearAttributes();      final int start=Character.offsetByCodePoints(curTermBuffer,0,curTermLength,0,curPos);      final int end=Character.offsetByCodePoints(curTermBuffer,0,curTermLength,start,curGramSize);      termAtt.copyBuffer(curTermBuffer,start,end - start);      posIncAtt.setPositionIncrement(curPosInc);      curPosInc=0;      posLenAtt.setPositionLength(curPosLen);      offsetAtt.setOffset(tokStart,tokEnd);      curGramSize++;      return true;    }    curTermBuffer=null;  }}  }
class C{  public static Complex add(double a,Complex c){  return new Complex(a + c.real,c.imag);}  }
class C{  @Override public double evaluate(){  return cutoff * super.evaluate();}  }
class C{  public void removeNeuronNode(NeuronNode node){  outlinedObjects.removeChild(node);}  }
class C{  private Map<URI,Volume> buildVolumeMap(List<VolumeDescriptor> descriptors,VolumeDescriptor.Type type){  Map<URI,Volume> volumeMap=new HashMap<URI,Volume>();  if (type != null) {    descriptors=VolumeDescriptor.filterByType(descriptors,new VolumeDescriptor.Type[]{type},new VolumeDescriptor.Type[]{});  }  for (  VolumeDescriptor desc : descriptors) {    if (volumeMap.containsKey(desc.getVolumeURI()) == false) {      Volume volume=getDataObject(Volume.class,desc.getVolumeURI(),_dbClient);      volumeMap.put(desc.getVolumeURI(),volume);    }  }  return volumeMap;}  }
class C{  public void addSeriesRenderer(int index,SimpleSeriesRenderer renderer){  mRenderers.add(index,renderer);}  }
class C{  public boolean isExistential(){  return true;}  }
class C{  static void verifyLaunchPhaseMatchesRegistryPhase(Registry registry,LaunchExtension launchExtension,DateTime now) throws EppException {  if (!Objects.equals(registry.getTldState(now),LAUNCH_PHASE_TO_TLD_STATE.get(launchExtension.getPhase()))) {    throw new LaunchPhaseMismatchException();  }}  }
class C{  @Override public void generate(CompilationUnit unit,SymbolTable symbolTable){}  }
class C{  public int addChannel(Channel channel){  int index=-1;switch (channel.getChannelType()) {case STANDARD:    mChannels.add(channel);  index=mChannels.size() - 1;fireTableRowsInserted(index,index);break;case TRAFFIC:mTrafficChannels.add(channel);index=mChannels.size() - 1;break;default :break;}broadcast(new ChannelEvent(channel,Event.NOTIFICATION_ADD));if (channel.getEnabled()) {broadcast(new ChannelEvent(channel,Event.REQUEST_ENABLE));}return index;}  }
class C{  public boolean hasBatchId(){  return hasExtension(BatchId.class);}  }
class C{  public static boolean hasUniqueObject(Collection collection){  if (isEmpty(collection)) {    return false;  }  boolean hasCandidate=false;  Object candidate=null;  for (Iterator it=collection.iterator(); it.hasNext(); ) {    Object elem=it.next();    if (!hasCandidate) {      hasCandidate=true;      candidate=elem;    } else     if (candidate != elem) {      return false;    }  }  return true;}  }
class C{  public long optLong(String key){  return this.optLong(key,0);}  }
class C{  protected String generateSamplesInfoText(String containerId) throws Exception {  String url=getContainerServerDownloadUrl(containerId);  if (url != null) {    StringBuilder output=new StringBuilder();    output.append("h3.Tested On");    output.append(LINE_SEPARATOR);    output.append("This container is automatically tested by the " + "[Continous Integration system|https://semaphoreci.com/codehaus-cargo/cargo] " + "every time there is a code change.");    output.append(LINE_SEPARATOR);    output.append("The server used for tests is downloaded from: ");    output.append(url);    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);    return output.toString();  } else {    return "";  }}  }
class C{  public final boolean isHeadersTransitionOnBackEnabled(){  return mHeadersBackStackEnabled;}  }
class C{  public boolean isErrorEnabled(){  return true;}  }
class C{  private void paintRoadblock(java.awt.Graphics2D g2,Roadblock block){  if (block.inEnvMap || block.inAgentMap) {    int x=(int)(0.2 * x(block.pos1) + 0.8 * x(block.pos2) - 4);    int y=(int)(0.2 * y(block.pos1) + 0.8 * y(block.pos2) - 4);    if (!block.inAgentMap)     g2.setColor(Color.blue); else     if (!block.inEnvMap)     g2.setColor(Color.red); else     g2.setColor(Color.lightGray);    g2.fillRect(x,y,9,9);  }}  }
class C{  public Vector2d zero(){  x=0.0;  y=0.0;  return this;}  }
class C{  static WindowsSecurityDescriptor create(List<AclEntry> acl) throws IOException {  return new WindowsSecurityDescriptor(acl);}  }
class C{  @BeforeClass public static void hibernateInit(){  getNewDatabaseManager();}  }
class C{  public OffsetIteration(Iteration<? extends E,X> iter,long offset){  super(iter);  assert offset >= 0;  this.offset=offset;  this.droppedResults=0;}  }
class C{  protected void sequence_IfStatement(ISerializationContext context,IfStatement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public HourlyView(Context context){  super(context);  this.initialize();}  }
class C{  @Override public void checkClientTrusted(X509Certificate[] cert,String authType) throws CertificateException {}  }
class C{  void doShiftRight(java.awt.event.ActionEvent e){  for (int i=nValues - 1; i > 0; i--) {    int value=_cvMap.get(cvList[i - 1]).getValue();    _cvMap.get(cvList[i]).setValue(value);  }}  }
class C{  public DateTime roundCeilingCopy(){  return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));}  }
class C{  public static String customDirectoryLogFileName(@Nullable String dir,String fileName){  assert fileName != null;  if (dir == null)   return fileName;  int sep=fileName.lastIndexOf(File.separator);  return dir + (sep < 0 ? File.separator + fileName : fileName.substring(sep));}  }
class C{  @Override public void destroy() throws Exception {  if (this.infinispanCache != null) {    this.infinispanCache.stop();  }}  }
class C{  static boolean containsMatchingLabel(Mark mark,String label){  for (  Trademark trademark : mark.getTrademarks()) {    if (trademark.getLabels().contains(label)) {      return true;    }  }  for (  ProtectedMark protectedMark : concat(mark.getTreatyOrStatuteMarks(),mark.getCourtMarks())) {    if (protectedMark.getLabels().contains(label)) {      return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:08.888 -0400",hash_original_method="1F05D34A2502A67AE3C0DAE6B443988B",hash_generated_method="72A39A6F445A48532946264EBD205A68") @Override public void close(){  try {    super.close();    if (this.socket != null) {      this.socket.close();      this.socket=null;    }  } catch (  Exception e) {    getErrorManager().error("Exception occurred when closing the socket handler",e,ErrorManager.CLOSE_FAILURE);  }}  }
class C{  public VNXeCommandJob createShareForSnapshot(CifsShareCreateForSnapParam createParam){  return postRequestAsync(createParam);}  }
class C{  public AtomicLongArray(int length){  array=new long[length];}  }
class C{  public Address loadAddress(){  return null;}  }
class C{  public String sqlObjectDetail_dropColumnDefault(String vendorName,String catalogName,String schemaName,String tableName,String columnName){  columnName=normalizeColumnName(vendorName,columnName);  return m_interfaces.get(getDBVendorID(vendorName)).sqlObjectDetail_dropColumnDefault(catalogName,schemaName,tableName,columnName);}  }
class C{  @Override public String toString(){  return "Body " + super.toString();}  }
class C{  public int compareTo(final DiffBlock b){  if (ab) {    return this.revAStart - b.revAStart;  } else {    return this.revBStart - b.revBStart;  }}  }
class C{  private static void execute(final String[] args) throws Exception {  List<String> instances;  if (args.length > 0) {    instances=Arrays.asList(args);  } else {    instances=ConfProxyHelper.availableInstances();  }  for (  String instance : instances) {    try {      ConfProxy proxy=new ConfProxy(instance);      proxy.execute();    } catch (    Exception ex) {      log.error("Error when executing configuration-proxy '{}': {}",instance,ex);    }  }}  }
class C{  int positionOfBookmarkId(BookmarkId id){  return positionOfItem(new Item(id));}  }
class C{  public boolean isMixed(){  return (!isLeftToRight() && !isRightToLeft());}  }
class C{  public static Throwable shouldFail(String script){  boolean failed=false;  Throwable th=null;  try {    GroovyShell shell=new GroovyShell();    shell.evaluate(script,genericScriptName());  } catch (  GroovyRuntimeException gre) {    failed=true;    th=ScriptBytecodeAdapter.unwrap(gre);  }catch (  Throwable e) {    failed=true;    th=e;  }  assertTrue("Script should have failed",failed);  return th;}  }
class C{  public NTRUSigningPublicKeyParameters(IntegerPolynomial h,NTRUSigningParameters params){  super(false);  this.h=h;  this.params=params;}  }
class C{  @Override public long remainingTime(){  return Math.max(0,this.approxdocs - this.count) / Math.max(1,speed());}  }
class C{  public void postDeserialize() throws MalformedJsonException {  observableDelegate=FXCollections.observableArrayList(delegate);  delegate.clear();  try {    createUnderlying();  } catch (  NullPointerException npe) {    throw new MalformedJsonException(npe.getMessage());  }}  }
class C{  private static void removeMarginTopOfContentChild(View mContentChild,int statusBarHeight){  if (mContentChild == null) {    return;  }  if (TAG_MARGIN_ADDED.equals(mContentChild.getTag())) {    FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mContentChild.getLayoutParams();    lp.topMargin-=statusBarHeight;    mContentChild.setLayoutParams(lp);    mContentChild.setTag(null);  }}  }
class C{  public static final Instance keepAttributesAt(Instance x,int indicesToRemove[],int lim){  return deleteAttributesAt(x,A.invert(indicesToRemove,lim));}  }
class C{  protected void resetAttribute(){  super.resetAttribute();  missing=false;  malformed=false;}  }
class C{  public boolean insert_redundant_casts(){  return soot.PhaseOptions.getBoolean(options,"insert-redundant-casts");}  }
class C{  public String shortenName(String name,int desiredLength){  int originalLength=name.length();  if ((desiredLength <= 0) || (originalLength <= desiredLength)) {    return name;  }  int delta=originalLength - desiredLength;  int startCut=desiredLength / 2;  StringBuffer result=new StringBuffer();  result.append(name.substring(0,startCut));  if (((startCut == 0) || (name.charAt(startCut - 1) != '_')) && ((startCut + delta + 1 == originalLength) || (name.charAt(startCut + delta + 1) != '_'))) {    result.append("_");  }  result.append(name.substring(startCut + delta + 1,originalLength));  return result.toString();}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void flip(boolean fullHeap){  DoublyLinkedList tmp=allocNursery;  allocNursery=collectNursery;  collectNursery=tmp;  if (fullHeap) {    tmp=fromSpace;    fromSpace=toSpace;    toSpace=tmp;  }}  }
class C{  public RSyntaxDocument(TokenMakerFactory tmf,String syntaxStyle){  super(new RGapContent());  putProperty(tabSizeAttribute,new Integer(5));  lastTokensOnLines=new DynamicIntArray(400);  lastTokensOnLines.add(Token.NULL);  s=new Segment();  setTokenMakerFactory(tmf);  setSyntaxStyle(syntaxStyle);}  }
class C{  public boolean isTraceEnabled(){  return false;}  }
class C{  private static String convertToQualifiedName(final String fileName){  final String replacedSeparators=fileName.replace(File.separatorChar,'.');  return replacedSeparators.substring(0,replacedSeparators.length() - ".class".length());}  }
class C{  @Override public int compareTo(MetaRecord other){  int c1=getCreateOrder();  int c2=other.getCreateOrder();  if (c1 != c2) {    return c1 - c2;  }  return getId() - other.getId();}  }
class C{  public static DecomposableMatchBuilder1<Boolean,Boolean> caseBoolean(MatchesAny b){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(any());  return new DecomposableMatchBuilder1<>(matchers,0,new PrimitiveFieldExtractor<>(Boolean.class));}  }
class C{  public final void signal(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignal(first);}  }
class C{  protected Reader stream2reader(InputStream stream,StringBuffer charsRead) throws IOException {  PushbackInputStream pbstream=new PushbackInputStream(stream);  int b=pbstream.read();switch (b) {case 0x00:case 0xFE:case 0xFF:    pbstream.unread(b);  return new InputStreamReader(pbstream,"UTF-16");case 0xEF:for (int i=0; i < 2; i++) {  pbstream.read();}return new InputStreamReader(pbstream,"UTF-8");case 0x3C:b=pbstream.read();charsRead.append('<');while ((b > 0) && (b != 0x3E)) {charsRead.append((char)b);b=pbstream.read();}if (b > 0) {charsRead.append((char)b);}String encoding=this.getEncoding(charsRead.toString());if (encoding == null) {return new InputStreamReader(pbstream,"UTF-8");}charsRead.setLength(0);try {return new InputStreamReader(pbstream,encoding);} catch (UnsupportedEncodingException e) {return new InputStreamReader(pbstream,"UTF-8");}default :charsRead.append((char)b);return new InputStreamReader(pbstream,"UTF-8");}}  }
class C{  private String substituteSubString(String input,String find,String replace){  int find_length=find.length();  int replace_length=replace.length();  StringBuilder output=new StringBuilder(input);  int index=input.indexOf(find);  int outputOffset=0;  while (index > -1) {    output.replace(index + outputOffset,index + outputOffset + find_length,replace);    outputOffset=outputOffset + (replace_length - find_length);    index=input.indexOf(find,index + find_length);  }  return output.toString();}  }
class C{  public boolean containedWithinBlock(Vector min,Vector max){  return getBlockX() >= min.getBlockX() && getBlockX() <= max.getBlockX() && getBlockY() >= min.getBlockY() && getBlockY() <= max.getBlockY() && getBlockZ() >= min.getBlockZ() && getBlockZ() <= max.getBlockZ();}  }
class C{  public List removeValue(Object value){  return universalRemove(value,backwardStore,forwardStore);}  }
class C{  public DownloadDispatcher(BlockingQueue<DownloadRequest> unFinishQueue,BlockingQueue<DownloadRequest> downloadQueue){  mUnFinishQueue=unFinishQueue;  mDownloadQueue=downloadQueue;}  }
class C{  @Override public void onPaymentProductCallComplete(PaymentProduct paymentProduct){  cachePaymentItem(paymentProduct);}  }
class C{  static int ceil_lg2(int x){  assert (x - 1 >= 0);  x-=1;  int lg=0;  while (x != 0) {    lg++;    x>>=1;  }  return lg;}  }
class C{  public HashDocAttributeSet(DocAttribute attribute){  super(attribute,DocAttribute.class);}  }
class C{  public boolean isFinal(){  return Modifier.isFinal(this.getModifiers());}  }
class C{  @Nullable public ECKey findOldestKeyAfter(long timeSecs){  lock.lock();  try {    ECKey oldest=null;    for (    ECKey key : hashToKeys.values()) {      final long keyTime=key.getCreationTimeSeconds();      if (keyTime > timeSecs) {        if (oldest == null || oldest.getCreationTimeSeconds() > keyTime)         oldest=key;      }    }    return oldest;  }  finally {    lock.unlock();  }}  }
class C{  public ElementRule(String name,Class type,String description){  this.name=name;  this.description=description;  this.rules=new XMLSyntaxRule[]{new ElementRule(type)};}  }
class C{  public static void deepRead(IonReader reader){  deepRead(reader,true);}  }
class C{  public String toString(){  String ret="S-" + (revision & 0xFF) + "-";  if (identifier_authority[0] != (byte)0 || identifier_authority[1] != (byte)0) {    ret+="0x";    ret+=Hexdump.toHexString(identifier_authority,0,6);  } else {    long shift=0;    long id=0;    for (int i=5; i > 1; i--) {      id+=(identifier_authority[i] & 0xFFL) << shift;      shift+=8;    }    ret+=id;  }  for (int i=0; i < sub_authority_count; i++)   ret+="-" + (sub_authority[i] & 0xFFFFFFFFL);  return ret;}  }
class C{  public HostInfo(String money,String host,String hostsequence){  m_sMoney=host;  m_sHost=host;  m_Hostsequence=hostsequence;}  }
class C{  private void fillPermissonHandled(){  IBaseDao<Addition,Integer> additionDao=getDaoFactory().getDAO(Addition.TYPE_ID);  hql=getQuery();  attachmentList=new ArrayList<Attachment>();  for (  Object o : additionDao.findByQuery(hql,paramNames,params)) {    if (o instanceof Attachment) {      attachmentList.add((Attachment)o);    }  }}  }
class C{  public String toString(){  return "P(n) + 3*S(n) where P(n) is the sum of the " + "\n" + "Manhattan distances that each tile is from \"home.\""+ "\n"+ "S(n) is a sequence score that checkes the non-"+ "\n"+ "central squares in turn, allotting 2 for every tile not"+ "\n"+ "followed by its proper successor and 0 for every "+ "\n"+ "other tile, except that a piece in the center scores 1.";}  }
class C{  public Boolean isForceAuthn(){  return forceAuthn;}  }
class C{  public CeylonRepoManagerBuilder config(CeylonConfig config){  this.config=config;  return this;}  }
class C{  private boolean isDarkThemeSet(){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(getActivity());  String key=getString(R.string.theme_preference_key);  String defaultValue=getString(R.string.theme_preference_default_value);  return Integer.valueOf(sharedPreferences.getString(key,defaultValue)) != 0;}  }
class C{  public String typeName(){  return "methodhandle";}  }
class C{  public static org.oscm.internal.types.exception.ObjectNotFoundException convertToUp(org.oscm.types.exceptions.ObjectNotFoundException oldEx){  org.oscm.internal.types.exception.beans.DomainObjectExceptionBean bean=convertBeanToUp(getFaultInfo(oldEx),org.oscm.internal.types.exception.beans.DomainObjectExceptionBean.class);  org.oscm.internal.types.exception.ObjectNotFoundException e=new org.oscm.internal.types.exception.ObjectNotFoundException(getExceptionMessage(oldEx),bean);  e.setStackTrace(oldEx.getStackTrace());  return e;}  }
class C{  public void layoutGraph(ArrayList<Integer> nPosX,ArrayList<Integer> nPosY){  if (m_bNeedsUndoAction) {    addUndoAction(new LayoutGraphAction(nPosX,nPosY));  }  m_nPositionX=nPosX;  m_nPositionY=nPosY;}  }
class C{  public void addCharEntity(String symbol,int code){  if (userDefinedCharEntities == null) {    userDefinedCharEntities=new Hashtable();  }  userDefinedCharEntities.put(trimCharEntity(symbol),new Integer(code));}  }
class C{  private String generateXMLDescriptorPath(){  return String.format(METADATA_RESOURCE_PATH,providerClass.getName());}  }
class C{  public final CC shrinkX(float w){  hor.setShrink(new Float(w));  return this;}  }
class C{  public void lock(@Nullable Object o){  getLock(o).lock();}  }
class C{  public CbusAddress[] split(){  if (aString.endsWith(";")) {    return null;  }  String[] pStrings=aString.split(";");  CbusAddress[] retval=new CbusAddress[pStrings.length];  for (int i=0; i < pStrings.length; i++) {    if (pStrings[i].equals("")) {      return null;    }    if (!hCode.reset(pStrings[i]).matches()) {      return null;    }    retval[i]=new CbusAddress(pStrings[i]);    if (retval[i] == null) {      return null;    }  }  return retval;}  }
class C{  public int size(){  return mSize;}  }
class C{  @Override public double addEstimateBytesAndMaybeBreak(long bytes,String label) throws CircuitBreakingException {  if (memoryBytesLimit == 0) {    circuitBreak(label,bytes);  }  long newUsed;  if (this.memoryBytesLimit == -1) {    newUsed=this.used.addAndGet(bytes);    if (logger.isTraceEnabled()) {      logger.trace("Adding [{}][{}] to used bytes [new used: [{}], limit: [-1b]]",new ByteSizeValue(bytes),label,new ByteSizeValue(newUsed));    }    return newUsed;  }  long currentUsed;  do {    currentUsed=this.used.get();    newUsed=currentUsed + bytes;    long newUsedWithOverhead=(long)(newUsed * overheadConstant);    if (logger.isTraceEnabled()) {      logger.trace("Adding [{}][{}] to used bytes [new used: [{}], limit: {} [{}], estimate: {} [{}]]",new ByteSizeValue(bytes),label,new ByteSizeValue(newUsed),memoryBytesLimit,new ByteSizeValue(memoryBytesLimit),newUsedWithOverhead,new ByteSizeValue(newUsedWithOverhead));    }    if (memoryBytesLimit > 0 && newUsedWithOverhead > memoryBytesLimit) {      logger.warn("New used memory {} [{}] from field [{}] would be larger than configured breaker: {} [{}], breaking",newUsedWithOverhead,new ByteSizeValue(newUsedWithOverhead),label,memoryBytesLimit,new ByteSizeValue(memoryBytesLimit));      circuitBreak(label,newUsedWithOverhead);    }  } while (!this.used.compareAndSet(currentUsed,newUsed));  return newUsed;}  }
class C{  public void markForTesting(){  type=Report.TESTING;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.add(new Option("\tTreat missing values as zero.","M",0,"-M"));  result.add(new Option("\tAdd a dummy first value for nominal attributes.","F",0,"-F"));  return result.elements();}  }
class C{  @Deprecated public static ScriptSortBuilder scriptSort(String script,String type){  return new ScriptSortBuilder(script,type);}  }
class C{  public String name(){  return name;}  }
class C{  public void printTo(Writer out,ReadableInstant instant) throws IOException {  long millis=DateTimeUtils.getInstantMillis(instant);  Chronology chrono=DateTimeUtils.getInstantChronology(instant);  printTo(out,millis,chrono);}  }
class C{  public String name(){  return classnamestub();}  }
class C{  private void handleLeftBarItemSelection(AdapterView<?> parent,View view,int position,long id){  try {    Log.d(MainActivity.class.getName(),"HandleLeftBarItemSelection: selected position " + position);    Fragment fragment=(Fragment)Class.forName(((LeftBarItemsListAdapter)parent.getAdapter()).getItem(position).className).getConstructor().newInstance();    setActiveFragment(fragment);  } catch (  Exception e) {    StringWriter errors=new StringWriter();    e.printStackTrace(new PrintWriter(errors));    String errorReason=errors.toString();    Log.d(MainActivity.class.getName(),"HandleLeftBarItemSelection: Exception: \n" + errorReason);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:36.585 -0500",hash_original_method="E3EF862BAAD83B9956A8AA3297016E01",hash_generated_method="13E58C66E850EA7B48861D473E69E03D") public boolean match(Object matchObj){  if (matchObj == null)   return true; else   if (!matchObj.getClass().equals(this.getClass())) {    return false;  } else   if (matchObj == this)   return true;  SIPResponse that=(SIPResponse)matchObj;  StatusLine rline=that.statusLine;  if (this.statusLine == null && rline != null)   return false; else   if (this.statusLine == rline)   return super.match(matchObj); else {    return statusLine.match(that.statusLine) && super.match(matchObj);  }}  }
class C{  protected void populate(){  this.putAll(Offset.BOTTOM_CENTER,C2GM_GNL_PNT_USW_UH2_BCON,C2GM_GNL_PNT_USW_UH2_LCON,C2GM_GNL_PNT_USW_UH2_SNK,C2GM_GNL_PNT_USW_SNBY,C2GM_GNL_PNT_USW_SNBY_BT,C2GM_GNL_PNT_REFPNT_PNTINR,C2GM_GNL_PNT_WPN_ENTPNT,C2GM_GNL_PNT_WPN_GRDZRO,C2GM_GNL_PNT_WPN_MSLPNT,C2GM_GNL_PNT_ACTPNT,C2GM_GNL_PNT_ACTPNT_CHKPNT,C2GM_GNL_PNT_ACTPNT_CONPNT,C2GM_GNL_PNT_ACTPNT_LNKUPT,C2GM_GNL_PNT_ACTPNT_PSSPNT,C2GM_GNL_PNT_ACTPNT_RAYPNT,C2GM_GNL_PNT_ACTPNT_RELPNT,C2GM_GNL_PNT_ACTPNT_STRPNT,C2GM_GNL_PNT_ACTPNT_AMNPNT,C2GM_AVN_PNT_DAPP,C2GM_OFF_PNT_PNTD,MOBSU_OBST_ATO_TDTSM_FIXPFD,MOBSU_OBST_ATO_TDTSM_MVB,MOBSU_OBST_ATO_TDTSM_MVBPFD,MOBSU_OBST_AVN_TWR_LOW,MOBSU_OBST_AVN_TWR_HIGH,MOBSU_OBSTBP_CSGSTE_ERP,MOBSU_CBRN_NDGZ,MOBSU_CBRN_FAOTP,MOBSU_CBRN_REEVNT_BIO,MOBSU_CBRN_REEVNT_CML,MOBSU_CBRN_DECONP_USP,MOBSU_CBRN_DECONP_ALTUSP,MOBSU_CBRN_DECONP_TRP,MOBSU_CBRN_DECONP_EQT,MOBSU_CBRN_DECONP_EQTTRP,MOBSU_CBRN_DECONP_OPDECN,MOBSU_CBRN_DECONP_TRGH,FSUPP_PNT_C2PNT_SCP,FSUPP_PNT_C2PNT_FP,FSUPP_PNT_C2PNT_RP,FSUPP_PNT_C2PNT_HP,FSUPP_PNT_C2PNT_LP,CSS_PNT_AEP,CSS_PNT_CBNP,CSS_PNT_CCP,CSS_PNT_CVP,CSS_PNT_DCP,CSS_PNT_EPWCP,CSS_PNT_LRP,CSS_PNT_MCP,CSS_PNT_RRRP,CSS_PNT_ROM,CSS_PNT_TCP,CSS_PNT_TTP,CSS_PNT_UMC,CSS_PNT_SPT_GNL,CSS_PNT_SPT_CLS1,CSS_PNT_SPT_CLS2,CSS_PNT_SPT_CLS3,CSS_PNT_SPT_CLS4,CSS_PNT_SPT_CLS5,CSS_PNT_SPT_CLS6,CSS_PNT_SPT_CLS7,CSS_PNT_SPT_CLS8,CSS_PNT_SPT_CLS9,CSS_PNT_SPT_CLS10,CSS_PNT_AP_ASP,CSS_PNT_AP_ATP,OTH_ER_DTHAC,OTH_ER_PIW,OTH_ER_DSTVES,OTH_SSUBSR_BTMRTN,OTH_SSUBSR_BTMRTN_INS,OTH_SSUBSR_BTMRTN_SBRSOO,OTH_SSUBSR_SA,EmsSidc.NATEVT_GEO_AVL,EmsSidc.NATEVT_GEO_LNDSLD,EmsSidc.NATEVT_GEO_SBSDNC,EmsSidc.NATEVT_GEO_VLCTHT,EmsSidc.NATEVT_HYDMET_DRGHT,EmsSidc.NATEVT_HYDMET_FLD,EmsSidc.NATEVT_HYDMET_INV,EmsSidc.NATEVT_HYDMET_TSNMI,EmsSidc.NATEVT_INFST_BIRD,EmsSidc.NATEVT_INFST_INSCT,EmsSidc.NATEVT_INFST_MICROB,EmsSidc.NATEVT_INFST_REPT,EmsSidc.NATEVT_INFST_RDNT);  this.putAll(OFFSET_BOTTOM_QUARTER,C2GM_GNL_PNT_USW_SNBY,C2GM_GNL_PNT_USW_SNBY_PTNCTR,C2GM_GNL_PNT_USW_SNBY_DIFAR,C2GM_GNL_PNT_USW_SNBY_LOFAR,C2GM_GNL_PNT_USW_SNBY_CASS,C2GM_GNL_PNT_USW_SNBY_DICASS,C2GM_GNL_PNT_USW_SNBY_BT,C2GM_GNL_PNT_USW_SNBY_ANM,C2GM_GNL_PNT_USW_SNBY_VLAD,C2GM_GNL_PNT_USW_SNBY_ATAC,C2GM_GNL_PNT_USW_SNBY_RO,C2GM_GNL_PNT_USW_SNBY_KGP,C2GM_GNL_PNT_USW_SNBY_EXP,MOBSU_OBST_BBY,MOBSU_OBST_MNE_ATMDIR);  this.offsets.put(C2GM_GNL_PNT_WPN_DRPPNT,OFFSET_C2GM_GNL_PNT_WPN_DRPPNT);  this.offsets.put(MOBSU_OBST_MNE_ATMAHD,OFFSET_MOBSU_OBST_MNE_ATMAHD);  this.offsets.put(MOBSU_OBST_MNE_APMNE,OFFSET_MOBSU_OBST_MNE_APMNE);  this.offsets.put(MOBSU_OBST_MNE_WAMNE,OFFSET_MOBSU_OBST_MNE_WAMNE);  this.offsets.put(OTH_HAZ_SML,OFFSET_OTH_HAZ_SML);  this.offsets.put(OTH_SSUBSR_MARLFE,Offset.LEFT_CENTER);}  }
class C{  private void resetSamplingState(){  numLoadedPoints=0;  firstSeenLocationId=-1L;  lastSeenLocationId=-1L;}  }
class C{  private void computeImplicitBackwardDependencesUse(Register r,DepGraphNode destNode){  DepGraphNode sourceNode=getDepGraphNode(r);  if (sourceNode != null) {    destNode.insertOutEdge(sourceNode,REG_ANTI);  }}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public boolean canDraw(){  return true;}  }
class C{  public static void perpendicular(Vector3fc v,Vector3f dest1,Vector3f dest2){  perpendicular(v.x(),v.y(),v.z(),dest1,dest2);}  }
class C{  public static void sort(char[] array){  sort(0,array.length,array);}  }
class C{  public CompletionProposalLabelProvider(){}  }
class C{  public void close(){}  }
class C{  public boolean isConnected(){  return isConnected;}  }
class C{  public boolean validateMutationFee(String assessmentNo,BigDecimal paymentAmount){  boolean validFee=true;  PropertyMutation propertyMutation=getLatestPropertyMutationByAssesmentNo(assessmentNo);  if (propertyMutation != null) {    if (paymentAmount.compareTo(propertyMutation.getMutationFee()) > 0) {      validFee=false;    }  } else {    validFee=false;  }  return validFee;}  }
class C{  protected void checkColumn(int column){  if (column < 0 || column >= columns)   throw new IndexOutOfBoundsException("Attempted to access " + toStringShort() + " at column="+ column);}  }
class C{  @Override public void sendMessage(ClientMessage message){  sendMessage(address,message);}  }
class C{  private static DomainResource fakeDomain(String domainName,ImmutableSet<HostResource> nameservers,int numDsRecords){  ImmutableSet.Builder<DelegationSignerData> dsDataBuilder=new ImmutableSet.Builder<>();  for (int i=0; i < numDsRecords; i++) {    dsDataBuilder.add(DelegationSignerData.create(i,DS_DATA.getAlgorithm(),DS_DATA.getDigestType(),DS_DATA.getDigest()));  }  ImmutableSet.Builder<Key<HostResource>> hostResourceRefBuilder=new ImmutableSet.Builder<>();  for (  HostResource nameserver : nameservers) {    hostResourceRefBuilder.add(Key.create(nameserver));  }  return newDomainResource(domainName).asBuilder().setNameservers(hostResourceRefBuilder.build()).setDsData(dsDataBuilder.build()).build();}  }
class C{  public UpdateExecutionException(String msg){  super(msg);}  }
class C{  protected boolean canMoveTo(KMLAbstractFeature feature){  return (feature.getView() != null) || feature instanceof KMLPlacemark || feature instanceof KMLGroundOverlay;}  }
class C{  public StructImplKey(int type){  if (type == TYPE_LINKED)   _map=new LinkedHashMap<Collection.Key,Object>(); else   if (type == TYPE_WEAKED)   _map=new java.util.WeakHashMap<Collection.Key,Object>(); else   if (type == TYPE_SYNC)   _map=MapFactory.<Collection.Key,Object>getConcurrentMap(); else   _map=new HashMap<Collection.Key,Object>();}  }
class C{  public static void v(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  public AttributeMetaData(AttributeRole role,ExampleSet exampleSet){  this(role,exampleSet,false);}  }
class C{  public T caseProperty(Property object){  return null;}  }
class C{  @ApiOperation(value="Login",notes="Login to a Codenvy account. Either auth token or cookie are used",response=Token.class,position=2) @ApiResponses(value={@ApiResponse(code=200,message="OK"),@ApiResponse(code=400,message="Authentication error")}) @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path("/login") public Response authenticate(Credentials credentials,@ApiParam(value="Existing auth cookie. It is used to get deleted to a obtain new cookie") @CookieParam("session-access-key") Cookie tokenAccessCookie,@Context UriInfo uriInfo) throws AuthenticationException {  return dao.login(credentials,tokenAccessCookie,uriInfo);}  }
class C{  private String newSentence(Random r,int maxSentenceLength){  StringBuilder sb=new StringBuilder();  int numElements=TestUtil.nextInt(r,1,maxSentenceLength);  for (int i=0; i < numElements; i++) {    if (sb.length() > 0) {      sb.append(' ');      sb.append((char)TestUtil.nextInt(r,'a','z'));    } else {      sb.append((char)TestUtil.nextInt(r,'A','Z'));    }  }  sb.append(". ");  return sb.toString();}  }
class C{  public SignatureVisitor visitExceptionType(){  return this;}  }
class C{  final void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE| ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (methodParameters != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      size+=8 + ctanns.getSize();    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      size+=8 + ictanns.getSize();    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));      ctanns.put(out);    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));      ictanns.put(out);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (methodParameters != null) {    out.putShort(cw.newUTF8("MethodParameters"));    out.putInt(methodParameters.length + 1).putByte(methodParametersCount);    out.putByteArray(methodParameters.data,0,methodParameters.length);  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public int countLinesInFile(String filename) throws IOException {  InputStream is=new BufferedInputStream(new FileInputStream(filename));  try {    byte[] c=new byte[1024];    int count=0;    int readChars=0;    while ((readChars=is.read(c)) != -1) {      for (int i=0; i < readChars; ++i) {        if (c[i] == '\n') {          ++count;        }      }    }    return count;  }  finally {    is.close();  }}  }
class C{  public static void clearBitmapCache(){  bitmapCache.clear();}  }
class C{  public static byte[] splitUint8To2bytes(char uint8){  if (uint8 < 0 || uint8 > 0xff) {    throw new RuntimeException("Out of Boundary");  }  String hexString=Integer.toHexString(uint8);  byte low;  byte high;  if (hexString.length() > 1) {    high=(byte)Integer.parseInt(hexString.substring(0,1),16);    low=(byte)Integer.parseInt(hexString.substring(1,2),16);  } else {    high=0;    low=(byte)Integer.parseInt(hexString.substring(0,1),16);  }  byte[] result=new byte[]{high,low};  return result;}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";}  }
class C{  public Activity runAfter(String beforeKey,String afterKey){  Activity before=get(beforeKey);  Activity after=get(afterKey);  if (before != null && after != null)   ActivityManager.scheduleAfter(before,after);  return after;}  }
class C{  public ConstantOptionletVolatility(final Date referenceDate,final Calendar cal,final BusinessDayConvention bdc,final double vol,final DayCounter dc){  super(referenceDate,cal,bdc,dc);  volatility_=new Handle<Quote>(new SimpleQuote(vol));}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:05.679 -0500",hash_original_method="9AF939262FB3DB6E45968B076173B00B",hash_generated_method="11463A3BFE88B5F071F1874A4BF48D6F") public static Bitmap parseToRGB(byte[] data,int length,boolean transparency,byte[] clut){  int valueIndex=0;  int width=data[valueIndex++] & 0xFF;  int height=data[valueIndex++] & 0xFF;  int bitsPerImg=data[valueIndex++] & 0xFF;  int numOfClutEntries=data[valueIndex++] & 0xFF;  if (true == transparency) {    clut[numOfClutEntries - 1]=Color.TRANSPARENT;  }  int numOfPixels=width * height;  int[] pixels=new int[numOfPixels];  valueIndex=6;  int pixelIndex=0;  int bitsStartOffset=8 - bitsPerImg;  int bitIndex=bitsStartOffset;  byte currentByte=data[valueIndex++];  int mask=getMask(bitsPerImg);  boolean bitsOverlaps=(8 % bitsPerImg == 0);  while (pixelIndex < numOfPixels) {    if (bitIndex < 0) {      currentByte=data[valueIndex++];      bitIndex=bitsOverlaps ? (bitsStartOffset) : (bitIndex * -1);    }    int clutEntry=((currentByte >> bitIndex) & mask);    int clutIndex=clutEntry * CLUT_ENTRY_SIZE;    pixels[pixelIndex++]=Color.rgb(clut[clutIndex],clut[clutIndex + 1],clut[clutIndex + 2]);    bitIndex-=bitsPerImg;  }  return Bitmap.createBitmap(pixels,width,height,Bitmap.Config.ARGB_8888);}  }
class C{  private FieldSpec generateRxMappingMethod(ObjectMappableAnnotatedClass clazz){  String objectVarName="item";  String cursorVarName="cursor";  TypeName elementType=ClassName.get(clazz.getElement().asType());  CodeBlock.Builder initBlockBuilder=CodeBlock.builder().add("new $L<$L, $L>() {\n",Func1.class.getSimpleName(),Cursor.class.getSimpleName(),elementType).indent().add("@Override public $L call($L cursor) {\n",elementType,Cursor.class.getSimpleName()).indent();  generateColumnIndexCode(initBlockBuilder,clazz.getColumnAnnotatedElements(),cursorVarName);  initBlockBuilder.addStatement("$T $L = new $T()",elementType,objectVarName,elementType);  for (  ColumnAnnotateable e : clazz.getColumnAnnotatedElements()) {    String indexVaName=e.getColumnName() + "Index";    initBlockBuilder.beginControlFlow("if ($L >= 0)",indexVaName);    e.generateAssignStatement(initBlockBuilder,objectVarName,cursorVarName,indexVaName);    initBlockBuilder.endControlFlow();  }  initBlockBuilder.addStatement("return $L",objectVarName).unindent().add("}\n").unindent().add("}").build();  ParameterizedTypeName fieldType=ParameterizedTypeName.get(ClassName.get(Func1.class),ClassName.get(Cursor.class),elementType);  return FieldSpec.builder(fieldType,"MAPPER",Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL).initializer(initBlockBuilder.build()).build();}  }
class C{  public List<Patch> readJsonApiPatchExtDoc(String doc) throws IOException {  return mapper.readValue(doc,mapper.getTypeFactory().constructCollectionType(List.class,Patch.class));}  }
class C{  public void endVisit(SuperFieldAccess node){}  }
class C{  void updateParameterDefinition(String id,ParameterValueType valueType,String mandatory,String defaultValue,String minValue,String maxValue,String configurable,String modificationType) throws UpdateConstraintException, ImportException {  boolean isDirty=false;  if (paramDef.getValueType() != valueType) {    paramDef.setValueType(valueType);    isDirty=true;  }  if (!isBlank(mandatory)) {    boolean flag=Boolean.parseBoolean(mandatory);    if (paramDef.isMandatory() != flag) {      paramDef.setMandatory(flag);      isDirty=true;    }  } else {    if (paramDef.isMandatory()) {      paramDef.setMandatory(false);      isDirty=true;    }  }  if (!isBlank(configurable)) {    boolean flag=Boolean.parseBoolean(configurable);    if (paramDef.isConfigurable() != flag) {      paramDef.setConfigurable(flag);      isDirty=true;    }  } else {    if (!paramDef.isConfigurable()) {      paramDef.setConfigurable(true);      isDirty=true;    }  }  if (isBlank(modificationType)) {    modificationType=ParameterModificationType.STANDARD.name();  }  UpdateParameterCheck.updateParameterDefinition(paramDef,techProduct,modificationType);  if (isNewValue(paramDef.getModificationType().name(),modificationType)) {    paramDef.setModificationType(ParameterModificationType.valueOf(modificationType));    isDirty=true;  }  if (isNewValue(paramDef.getDefaultValue(),defaultValue)) {    setDefaultValue(defaultValue,minValue,maxValue,valueType);    isDirty=true;  } else   if (valueType == ParameterValueType.ENUMERATION) {    tempDefaultValueForEnumeration=defaultValue;  }  Long val=null;  if (!isBlank(minValue)) {    val=Long.valueOf(minValue);  }  if (isNewValue(paramDef.getMinimumValue(),val)) {    paramDef.setMinimumValue(val);    isDirty=true;  }  val=null;  if (!isBlank(maxValue)) {    val=Long.valueOf(maxValue);  }  if (isNewValue(paramDef.getMaximumValue(),val)) {    paramDef.setMaximumValue(val);    isDirty=true;  }  if (isDirty & paramDef.definesParametersOfUndeletedProduct()) {    UpdateConstraintException e=new UpdateConstraintException(ClassEnum.TECHNICAL_SERVICE,getTechProductBusinessKey());    throw e;  }  setCreateAction(false);}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  if (rawClass == null) {    oos.writeObject(null);  } else {    oos.writeObject(rawClass.getName());    if (type instanceof ParameterizedType) {      oos.writeObject(Boolean.TRUE);      ParameterizedType pt=(ParameterizedType)type;      oos.writeObject(new GenericClass(pt.getOwnerType()));      List<GenericClass> parameterClasses=new ArrayList<GenericClass>();      for (      Type parameterType : pt.getActualTypeArguments()) {        parameterClasses.add(new GenericClass(parameterType));      }      oos.writeObject(parameterClasses);    } else {      oos.writeObject(Boolean.FALSE);    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(Seeker.getInstance().getAvailVideoDiskspace());}  }
class C{  public static IntVector wrapArray(int[] vals){  final IntVector v=new IntVector();  v.mValues=vals;  return v;}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.465 -0500",hash_original_method="0F8D3938F71F1CBC0AF93312AEF5DBAF",hash_generated_method="B6977BA11CBD13188A6EE2314F4AAB8E") public Intent putExtra(String name,int value){  mExtras.put(name,value);  return this;}  }
class C{  protected void saveSelection(){  if (null == shell) {    return;  }  NewRelationSetWizard wizard=new NewRelationSetWizard(buildRelationSet());  WizardDialog dialog=new WizardDialog(shell,wizard);  dialog.open();}  }
class C{  public InGameWindow(String title){  this(title,WindowDecor.ALL);}  }
class C{  @Override public void onDestroyView(){  mIsWebViewAvailable=false;  super.onDestroyView();}  }
class C{  public int hashCode(){  int retval=0;  byte[] b1=getEncoded();  for (int i=1; i < b1.length; i++) {    retval+=b1[i] * i;  }  return (retval);}  }
class C{  public String sqlObjectDetail_setColumnDefault(String vendorName,String catalogName,String schemaName,String tableName,String columnName,String defaultValue){  columnName=normalizeColumnName(vendorName,columnName);  if (defaultValue == null)   defaultValue="NULL";  return m_interfaces.get(getDBVendorID(vendorName)).sqlObjectDetail_setColumnDefault(catalogName,schemaName,tableName,columnName,defaultValue);}  }
class C{  public void removeSchemaObject(Session session,SchemaObject obj){  int type=obj.getType();  if (type == DbObject.TABLE_OR_VIEW) {    Table table=(Table)obj;    if (table.isTemporary() && !table.isGlobalTemporary()) {      session.removeLocalTempTable(table);      return;    }  } else   if (type == DbObject.INDEX) {    Index index=(Index)obj;    Table table=index.getTable();    if (table.isTemporary() && !table.isGlobalTemporary()) {      session.removeLocalTempTableIndex(index);      return;    }  } else   if (type == DbObject.CONSTRAINT) {    Constraint constraint=(Constraint)obj;    Table table=constraint.getTable();    if (table.isTemporary() && !table.isGlobalTemporary()) {      session.removeLocalTempTableConstraint(constraint);      return;    }  }  checkWritingAllowed();  lockMeta(session);synchronized (this) {    Comment comment=findComment(obj);    if (comment != null) {      removeDatabaseObject(session,comment);    }    obj.getSchema().remove(obj);    int id=obj.getId();    if (!starting) {      Table t=getDependentTable(obj,null);      if (t != null) {        obj.getSchema().add(obj);        throw DbException.get(ErrorCode.CANNOT_DROP_2,obj.getSQL(),t.getSQL());      }      obj.removeChildrenAndResources(session);    }    removeMeta(session,id);  }}  }
class C{  public void compile(){  compile(compileTargetPhase);}  }
class C{  private void exportChannel(final By by,final OutputStream stream) throws IOException {  final ZipOutputStream zos=new ZipOutputStream(stream);  initExportFile(zos);  this.channelService.accessRun(by,ReadableChannel.class,null);  this.channelService.accessRun(by,TriggeredChannel.class,null);  zos.finish();}  }
class C{  public static String joinOptions(String[] optionArray){  String optionString="";  for (int i=0; i < optionArray.length; i++) {    if (optionArray[i].equals("")) {      continue;    }    boolean escape=false;    for (int n=0; n < optionArray[i].length(); n++) {      if (Character.isWhitespace(optionArray[i].charAt(n))) {        escape=true;        break;      }    }    if (escape) {      optionString+='"' + backQuoteChars(optionArray[i]) + '"';    } else {      optionString+=optionArray[i];    }    optionString+=" ";  }  return optionString.trim();}  }
class C{  public void resetFromPrimary(CacheObject val,GridCacheVersion ver){  value(val);  this.ver=ver;}  }
class C{  public int available() throws IOException {  return (ofinish - ostart);}  }
class C{  public Matrix4f(float m00,float m01,float m02,float m03,float m10,float m11,float m12,float m13,float m20,float m21,float m22,float m23,float m30,float m31,float m32,float m33){  this._m00(m00);  this._m01(m01);  this._m02(m02);  this._m03(m03);  this._m10(m10);  this._m11(m11);  this._m12(m12);  this._m13(m13);  this._m20(m20);  this._m21(m21);  this._m22(m22);  this._m23(m23);  this._m30(m30);  this._m31(m31);  this._m32(m32);  this._m33(m33);  properties=0;}  }
class C{  public synchronized void revertAll(){  for (  ListEntryModel entryModel : list) {    entryModel.revert();  }  fireTableDataChanged();}  }
class C{  private Collection<UUID> affinityNodesForSplit(HadoopInputSplit split,HadoopMapReducePlanTopology top) throws IgniteCheckedException {  Collection<UUID> igfsNodeIds=igfsAffinityNodesForSplit(split);  if (igfsNodeIds != null)   return igfsNodeIds;  Map<NodeIdAndLength,UUID> res=new TreeMap<>();  for (  String host : split.hosts()) {    long len=split instanceof HadoopFileBlock ? ((HadoopFileBlock)split).length() : 0L;    HadoopMapReducePlanGroup grp=top.groupForHost(host);    if (grp != null) {      for (int i=0; i < grp.nodeCount(); i++) {        UUID nodeId=grp.nodeId(i);        res.put(new NodeIdAndLength(nodeId,len),nodeId);      }    }  }  return new LinkedHashSet<>(res.values());}  }
class C{  public PuzzleBuildingBlock(String zoneName,String name,PuzzleEntity entity){  this.zoneName=zoneName;  this.name=name;  this.entity=entity;  this.dependencies=new LinkedList<>();}  }
class C{  public static void main(String[] args){  info("SimplePostTool version " + VERSION_OF_THIS_TOOL);  if (0 < args.length && ("-help".equals(args[0]) || "--help".equals(args[0]) || "-h".equals(args[0]))) {    usage();  } else {    final SimplePostTool t=parseArgsAndInit(args);    t.execute();  }}  }
class C{  public double[] computeLocal(int states[][],int sourceCol,int destCol,int[] othersAbsolute){  initialise();  int[] cleanedOthers=cleanAbsoluteOthers(othersAbsolute,sourceCol,destCol,k > 0);  addObservations(states,sourceCol,destCol,cleanedOthers,true);  return computeLocalFromPreviousObservations(states,sourceCol,destCol,cleanedOthers,true);}  }
class C{  @Override public void updateNCharacterStream(int columnIndex,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateNCharacterStream(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  WorkerThread(SimpleThreadPool tp,ThreadGroup threadGroup,String name,int prio,boolean isDaemon,Runnable runnable){  super(threadGroup,name);  this.tp=tp;  this.runnable=runnable;  if (runnable != null)   runOnce=true;  setPriority(prio);  setDaemon(isDaemon);}  }
class C{  public void accept(final MethodVisitor mv){  int i, j, n;  n=parameters == null ? 0 : parameters.size();  for (i=0; i < n; i++) {    ParameterNode parameter=parameters.get(i);    mv.visitParameter(parameter.name,parameter.access);  }  if (annotationDefault != null) {    AnnotationVisitor av=mv.visitAnnotationDefault();    AnnotationNode.accept(av,null,annotationDefault);    if (av != null) {      av.visitEnd();    }  }  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=visibleParameterAnnotations == null ? 0 : visibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=visibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,true));    }  }  n=invisibleParameterAnnotations == null ? 0 : invisibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=invisibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,false));    }  }  if (visited) {    instructions.resetLabels();  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    mv.visitAttribute(attrs.get(i));  }  if (instructions.size() > 0) {    mv.visitCode();    n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (i=0; i < n; ++i) {      tryCatchBlocks.get(i).updateIndex(i);      tryCatchBlocks.get(i).accept(mv);    }    instructions.accept(mv);    n=localVariables == null ? 0 : localVariables.size();    for (i=0; i < n; ++i) {      localVariables.get(i).accept(mv);    }    n=visibleLocalVariableAnnotations == null ? 0 : visibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      visibleLocalVariableAnnotations.get(i).accept(mv,true);    }    n=invisibleLocalVariableAnnotations == null ? 0 : invisibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      invisibleLocalVariableAnnotations.get(i).accept(mv,false);    }    mv.visitMaxs(maxStack,maxLocals);    visited=true;  }  mv.visitEnd();}  }
class C{  public static double tTest(double t,double nu){  double a=nu / 2.0;  double b=0.5;  double x=nu / (nu + t * t);  return 1.0 - betai(a,b,x);}  }
class C{  public void rotateAround(Vector3 axis,double angle,boolean append){  if (append) {    mTmpOrientation.fromAngleAxis(axis,angle);    mOrientation.multiply(mTmpOrientation);  } else {    mOrientation.fromAngleAxis(axis,angle);  }  markModelMatrixDirty();}  }
class C{  public static byte[] sumHmac(byte[] key,byte[] data) throws NoSuchAlgorithmException, InvalidKeyException {  Mac mac=Mac.getInstance("HmacSHA256");  mac.init(new SecretKeySpec(key,"HmacSHA256"));  mac.update(data);  return mac.doFinal();}  }
class C{  @Override public void removeEventListener3(IGroupChatListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  try {synchronized (mLock) {      mGroupChatEventBroadcaster.removeGroupChatEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public DefaultImportCustomizerProvider(){  this.extraImports.addAll(staticExtraImports);  this.extraStaticImports.addAll(staticExtraStaticImports);}  }
class C{  public boolean isCompatibleDomainAxis(ValueAxis axis){  return true;}  }
class C{  private static PhraseChunk findSmallest(Collection<PhraseChunk> covering){  return covering.stream().sorted(SHORTEST_FIRST).findFirst().get();}  }
class C{  public RectangleConstraint toUnconstrainedWidth(){  if (this.widthConstraintType == LengthConstraintType.NONE) {    return this;  } else {    return new RectangleConstraint(this.width,this.widthRange,LengthConstraintType.NONE,this.height,this.heightRange,this.heightConstraintType);  }}  }
class C{  public static AttributeValue clone(AttributeValue val,IdentityHashMap<AttributeValue,AttributeValue> sourceDestinationMap){  if (val == null) {    return null;  }  if (sourceDestinationMap.containsKey(val)) {    return sourceDestinationMap.get(val);  }  AttributeValue clonedVal=new AttributeValue();  sourceDestinationMap.put(val,clonedVal);  if (val.getN() != null) {    clonedVal.setN(val.getN());  } else   if (val.getS() != null) {    clonedVal.setS(val.getS());  } else   if (val.getB() != null) {    clonedVal.setB(val.getB());  } else   if (val.getNS() != null) {    clonedVal.setNS(val.getNS());  } else   if (val.getSS() != null) {    clonedVal.setSS(val.getSS());  } else   if (val.getBS() != null) {    clonedVal.setBS(val.getBS());  } else   if (val.getBOOL() != null) {    clonedVal.setBOOL(val.getBOOL());  } else   if (val.getNULL() != null) {    clonedVal.setNULL(val.getNULL());  } else   if (val.getL() != null) {    List<AttributeValue> list=new ArrayList<>(val.getL().size());    for (    AttributeValue listItemValue : val.getL()) {      if (!sourceDestinationMap.containsKey(listItemValue)) {        sourceDestinationMap.put(listItemValue,clone(listItemValue,sourceDestinationMap));      }      list.add(sourceDestinationMap.get(listItemValue));    }    clonedVal.setL(list);  } else   if (val.getM() != null) {    Map<String,AttributeValue> map=new HashMap<>(val.getM().size());    for (    Entry<String,AttributeValue> pair : val.getM().entrySet()) {      if (!sourceDestinationMap.containsKey(pair.getValue())) {        sourceDestinationMap.put(pair.getValue(),clone(pair.getValue(),sourceDestinationMap));      }      map.put(pair.getKey(),sourceDestinationMap.get(pair.getValue()));    }    clonedVal.setM(map);  }  return clonedVal;}  }
class C{  public static char[] append(char buffer[],char newElement){  char[] t=resize(buffer,buffer.length + 1);  t[buffer.length]=newElement;  return t;}  }
class C{  public String globalInfo(){  return "This is ARAM.";}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object obj=stack.pop();  if (obj == null)   return Boolean.TRUE; else   if (obj instanceof MetaImage)   return Boolean.valueOf(((MetaImage)obj).isNullOrFailed()); else   if (obj.toString().equals("0") || obj.toString().equals("0.0"))   return Boolean.TRUE; else   if (obj instanceof java.util.Collection)   return Boolean.valueOf(((java.util.Collection)obj).isEmpty()); else   if (obj instanceof java.util.Map)   return Boolean.valueOf(((java.util.Map)obj).isEmpty()); else   if (obj.getClass().isArray())   return Boolean.valueOf(java.lang.reflect.Array.getLength(obj) == 0); else   return Boolean.valueOf(obj.toString().length() == 0);}  }
class C{  protected void checkFileValidity(final File image) throws TwitterException {  if (!image.exists())   throw new TwitterException(new FileNotFoundException(image + " is not found."));  if (!image.isFile())   throw new TwitterException(new IOException(image + " is not a file."));}  }
class C{  private boolean findNextItem(){  if (eof) {    return false;  }  if (currentItem != null) {    currentItem.close();    currentItem=null;  }  for (; ; ) {    boolean nextPart;    if (skipPreamble) {      nextPart=multi.skipPreamble();    } else {      nextPart=multi.readBoundary();    }    if (!nextPart) {      if (currentFieldName == null) {        eof=true;        return false;      }      multi.setBoundary(boundary);      currentFieldName=null;      continue;    }    FormItemHeader headers=getParsedHeaders(multi.readHeaders());    if (currentFieldName == null) {      String fieldName=getFieldName(headers);      if (fieldName != null) {        String subContentType=headers.getHeader(CONTENT_TYPE);        if (subContentType != null && subContentType.toLowerCase(Locale.ENGLISH).startsWith(MULTIPART_MIXED)) {          currentFieldName=fieldName;          byte[] subBoundary=getBoundary(subContentType);          multi.setBoundary(subBoundary);          skipPreamble=true;          continue;        }        String fileName=getFileName(headers);        currentItem=new FormItem(fileName,fieldName,headers.getHeader(CONTENT_TYPE),fileName == null,getContentLength(headers),multi);        currentItem.setHeaders(headers);        itemValid=true;        return true;      }    } else {      String fileName=getFileName(headers);      if (fileName != null) {        currentItem=new FormItem(fileName,currentFieldName,headers.getHeader(CONTENT_TYPE),false,getContentLength(headers),multi);        currentItem.setHeaders(headers);        itemValid=true;        return true;      }    }    multi.discardBodyData();  }}  }
class C{  public void put(final int pPriority,final T pItem) throws IllegalArgumentException, InterruptedException {  if (pItem == null) {    throw new IllegalArgumentException("pItem must not be null.");  }  final ReentrantLock lock=this.mLock;  final Condition notFullCondition=this.mNotFullConditions.get(pPriority);  lock.lockInterruptibly();  try {    final IList<T> queue=this.mQueues.get(pPriority);    if (queue == null) {      throw new IllegalArgumentException("No queue found for pPriority: '" + pPriority + "'.");    }    final int queueCapacity=this.mQueueCapacities.get(pPriority);    try {      while (queue.size() == queueCapacity) {        notFullCondition.await();      }    } catch (    final InterruptedException e) {      notFullCondition.signal();      throw e;    }    insert(pPriority,pItem);  }  finally {    lock.unlock();  }}  }
class C{  private int insertKeyForNull(){  int index=0;  int firstRemoved=-1;  for (  Object o : _set) {    if (o == REMOVED && firstRemoved == -1)     firstRemoved=index;    if (o == FREE) {      if (firstRemoved != -1) {        _set[firstRemoved]=null;        return firstRemoved;      } else {        consumeFreeSlot=true;        _set[index]=null;        return index;      }    }    if (o == null) {      return -index - 1;    }    index++;  }  if (firstRemoved != -1) {    _set[firstRemoved]=null;    return firstRemoved;  }  throw new IllegalStateException("Could not find insertion index for null key. Key set full!?!!");}  }
class C{  @Override protected void initData(){  this.resourcesTV.setText(ResourcesUtils.getStringId(this,"app_label"));  this.resourcesTV.setTextColor(ResourcesUtils.getColor(this,ResourcesUtils.getColorId(this,"colorAccent")));  this.resourcesIV.setImageResource(ResourcesUtils.getMipmapId(this,"img_mm_1"));}  }
class C{  public static void startApp(Context context,String packageName){  PackageInfo packageinfo=null;  try {    packageinfo=context.getPackageManager().getPackageInfo(packageName,0);  } catch (  PackageManager.NameNotFoundException e) {    e.printStackTrace();  }  if (packageinfo == null) {    return;  }  Intent resolveIntent=new Intent(Intent.ACTION_MAIN,null);  resolveIntent.addCategory(Intent.CATEGORY_LAUNCHER);  resolveIntent.setPackage(packageinfo.packageName);  List<ResolveInfo> resolveinfoList=context.getPackageManager().queryIntentActivities(resolveIntent,0);  ResolveInfo resolveinfo=resolveinfoList.iterator().next();  if (resolveinfo != null) {    String pkgName=resolveinfo.activityInfo.packageName;    String className=resolveinfo.activityInfo.name;    Intent intent=new Intent(Intent.ACTION_MAIN);    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    intent.addCategory(Intent.CATEGORY_LAUNCHER);    ComponentName cn=new ComponentName(pkgName,className);    intent.setComponent(cn);    context.startActivity(intent);  }}  }
class C{  public void testCallbacks(){  long totalUsedQuota=0;  final long quotaIncrease=WebStorageSizeManager.QUOTA_INCREASE_STEP;  mDiskInfo.setTotalSizeBytes(bytes(75));  mDiskInfo.setFreeSpaceSizeBytes(bytes(24));  mAppCacheInfo.setAppCacheSizeBytes(0);  WebStorageSizeManager manager=new WebStorageSizeManager(getContext(),mDiskInfo,mAppCacheInfo);  long origin1Quota=0;  long origin1EstimatedSize=bytes(3.5);  manager.onExceededDatabaseQuota("1","1",origin1Quota,origin1EstimatedSize,totalUsedQuota,mQuotaUpdater);  assertEquals(origin1EstimatedSize,mNewQuota);  origin1Quota=mNewQuota;  totalUsedQuota+=origin1Quota;  long origin2Quota=0;  long origin2EstimatedSize=bytes(2.5);  manager.onExceededDatabaseQuota("2","2",origin2Quota,origin2EstimatedSize,totalUsedQuota,mQuotaUpdater);  assertEquals(origin2EstimatedSize,mNewQuota);  origin2Quota=mNewQuota;  totalUsedQuota+=origin2Quota;  manager.onExceededDatabaseQuota("1","1",origin1Quota,0,totalUsedQuota,mQuotaUpdater);  assertEquals(origin1EstimatedSize + quotaIncrease,mNewQuota);  totalUsedQuota-=origin1Quota;  origin1Quota=mNewQuota;  totalUsedQuota+=origin1Quota;  manager.onExceededDatabaseQuota("2","2",origin2Quota,0,totalUsedQuota,mQuotaUpdater);  assertEquals(origin2EstimatedSize + quotaIncrease,mNewQuota);  totalUsedQuota-=origin2Quota;  origin2Quota=mNewQuota;  totalUsedQuota+=origin2Quota;  long origin3Quota=0;  long origin3EstimatedSize=bytes(5);  manager.onExceededDatabaseQuota("3","3",origin3Quota,origin3EstimatedSize,totalUsedQuota,mQuotaUpdater);  assertEquals(0,mNewQuota);  origin3Quota=mNewQuota;  totalUsedQuota+=origin3Quota;  manager.onExceededDatabaseQuota("1","1",origin1Quota,0,totalUsedQuota,mQuotaUpdater);  assertEquals(origin1Quota + quotaIncrease,mNewQuota);  totalUsedQuota-=origin1Quota;  origin1Quota=mNewQuota;  totalUsedQuota+=origin1Quota;  manager.onExceededDatabaseQuota("1","1",origin1Quota,0,totalUsedQuota,mQuotaUpdater);  assertEquals(origin1Quota,mNewQuota);  manager.onExceededDatabaseQuota("4","4",0,bytes(1),totalUsedQuota,mQuotaUpdater);  assertEquals(0,mNewQuota);  mAppCacheInfo.setAppCacheSizeBytes(bytes(2));  manager.onReachedMaxAppCacheSize(bytes(2),totalUsedQuota,mQuotaUpdater);  assertEquals(0,mNewQuota);  totalUsedQuota-=origin2Quota;  origin2Quota=0;  manager.onReachedMaxAppCacheSize(bytes(1.5),totalUsedQuota,mQuotaUpdater);  mAppCacheInfo.setAppCacheSizeBytes(mAppCacheInfo.getAppCacheSizeBytes() + bytes(2.5));  assertEquals(mAppCacheInfo.getAppCacheSizeBytes(),mNewQuota - WebStorageSizeManager.APPCACHE_MAXSIZE_PADDING);  long origin4Quota=0;  long origin4EstimatedSize=bytes(1.5);  manager.onExceededDatabaseQuota("4","4",origin4Quota,origin4EstimatedSize,totalUsedQuota,mQuotaUpdater);  assertEquals(bytes(1.5),mNewQuota);  origin4Quota=mNewQuota;  totalUsedQuota+=origin4Quota;}  }
class C{  public static void subtractInPlace(double[] first,double[] second) throws Exception {  if (first.length != second.length) {    throw new Exception("Lengths of arrays are not equal");  }  for (int i=0; i < first.length; i++) {    first[i]=first[i] - second[i];  }}  }
class C{  void processServerHelloDone(){  PrivateKey clientKey=null;  if (serverCert != null) {    if (session.cipherSuite.isAnonymous()) {      unexpectedMessage();      return;    }    verifyServerCert();  } else {    if (!session.cipherSuite.isAnonymous()) {      unexpectedMessage();      return;    }  }  if (certificateRequest != null) {    X509Certificate[] certs=null;    String alias=null;    String[] certTypes=certificateRequest.getTypesAsString();    X500Principal[] issuers=certificateRequest.certificate_authorities;    X509KeyManager km=parameters.getKeyManager();    if (km instanceof X509ExtendedKeyManager) {      X509ExtendedKeyManager ekm=(X509ExtendedKeyManager)km;      if (this.socketOwner != null) {        alias=ekm.chooseClientAlias(certTypes,issuers,this.socketOwner);      } else {        alias=ekm.chooseEngineClientAlias(certTypes,issuers,this.engineOwner);      }      if (alias != null) {        certs=ekm.getCertificateChain(alias);      }    } else {      alias=km.chooseClientAlias(certTypes,issuers,this.socketOwner);      if (alias != null) {        certs=km.getCertificateChain(alias);      }    }    session.localCertificates=certs;    clientCert=new CertificateMessage(certs);    clientKey=km.getPrivateKey(alias);    send(clientCert);  }  if (session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {    Cipher c;    try {      c=Cipher.getInstance("RSA/ECB/PKCS1Padding");      if (serverKeyExchange != null) {        if (!session.cipherSuite.isAnonymous()) {          DigitalSignature ds=new DigitalSignature(serverCert.getAuthType());          ds.init(serverCert.certs[0]);          ds.update(clientHello.getRandom());          ds.update(serverHello.getRandom());          if (!serverKeyExchange.verifySignature(ds)) {            fatalAlert(AlertProtocol.DECRYPT_ERROR,"Cannot verify RSA params");            return;          }        }        c.init(Cipher.WRAP_MODE,serverKeyExchange.getRSAPublicKey());      } else {        c.init(Cipher.WRAP_MODE,serverCert.certs[0]);      }    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);      return;    }    preMasterSecret=new byte[48];    parameters.getSecureRandom().nextBytes(preMasterSecret);    System.arraycopy(clientHello.client_version,0,preMasterSecret,0,2);    try {      clientKeyExchange=new ClientKeyExchange(c.wrap(new SecretKeySpec(preMasterSecret,"preMasterSecret")),serverHello.server_version[1] == 1);    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);      return;    }  } else   if (session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS_EXPORT || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA_EXPORT || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon_EXPORT) {    if (serverKeyExchange == null) {      fatalAlert(AlertProtocol.UNEXPECTED_MESSAGE,"Expected ServerKeyExchange");      return;    }    if (session.cipherSuite.isAnonymous() != serverKeyExchange.isAnonymous()) {      fatalAlert(AlertProtocol.DECRYPT_ERROR,"Wrong type in ServerKeyExchange");      return;    }    try {      if (!session.cipherSuite.isAnonymous()) {        DigitalSignature ds=new DigitalSignature(serverCert.getAuthType());        ds.init(serverCert.certs[0]);        ds.update(clientHello.getRandom());        ds.update(serverHello.getRandom());        if (!serverKeyExchange.verifySignature(ds)) {          fatalAlert(AlertProtocol.DECRYPT_ERROR,"Cannot verify DH params");          return;        }      }      KeyFactory kf=KeyFactory.getInstance("DH");      KeyAgreement agreement=KeyAgreement.getInstance("DH");      KeyPairGenerator kpg=KeyPairGenerator.getInstance("DH");      PublicKey serverDhPublic=kf.generatePublic(new DHPublicKeySpec(serverKeyExchange.par3,serverKeyExchange.par1,serverKeyExchange.par2));      DHParameterSpec spec=new DHParameterSpec(serverKeyExchange.par1,serverKeyExchange.par2);      kpg.initialize(spec);      KeyPair kp=kpg.generateKeyPair();      DHPublicKey pubDhKey=(DHPublicKey)kp.getPublic();      clientKeyExchange=new ClientKeyExchange(pubDhKey.getY());      PrivateKey privDhKey=kp.getPrivate();      agreement.init(privDhKey);      agreement.doPhase(serverDhPublic,true);      preMasterSecret=agreement.generateSecret();    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);      return;    }  } else {    fatalAlert(AlertProtocol.DECRYPT_ERROR,"Unsupported handshake type");    return;  }  if (clientKeyExchange != null) {    send(clientKeyExchange);  }  computerMasterSecret();  if (clientCert != null && clientCert.certs.length > 0 && !clientKeyExchange.isEmpty()) {    String authType=clientKey.getAlgorithm();    DigitalSignature ds=new DigitalSignature(authType);    ds.init(clientKey);    if ("RSA".equals(authType)) {      ds.setMD5(io_stream.getDigestMD5());      ds.setSHA(io_stream.getDigestSHA());    } else     if ("DSA".equals(authType)) {      ds.setSHA(io_stream.getDigestSHA());    }    certificateVerify=new CertificateVerify(ds.sign());    send(certificateVerify);  }  sendChangeCipherSpec();}  }
class C{  public Element store(Object o){  PositionablePoint p=(PositionablePoint)o;  Element element=new Element("positionablepoint");  element.setAttribute("ident",p.getID());  element.setAttribute("type","" + p.getType());  Point2D coords=p.getCoords();  element.setAttribute("x","" + coords.getX());  element.setAttribute("y","" + coords.getY());  if (p.getConnect1() != null) {    element.setAttribute("connect1name",p.getConnect1().getID());  }  if (p.getConnect2() != null) {    element.setAttribute("connect2name",p.getConnect2().getID());  }  if (p.getEastBoundSignal().length() > 0) {    element.setAttribute("eastboundsignal",p.getEastBoundSignal());  }  if (p.getWestBoundSignal().length() > 0) {    element.setAttribute("westboundsignal",p.getWestBoundSignal());  }  if (p.getEastBoundSignalMastName().length() > 0) {    element.setAttribute("eastboundsignalmast",p.getEastBoundSignalMastName());  }  if (p.getWestBoundSignalMastName().length() > 0) {    element.setAttribute("westboundsignalmast",p.getWestBoundSignalMastName());  }  if (p.getEastBoundSensorName().length() > 0) {    element.setAttribute("eastboundsensor",p.getEastBoundSensorName());  }  if (p.getWestBoundSensorName().length() > 0) {    element.setAttribute("westboundsensor",p.getWestBoundSensorName());  }  if (p.getType() == PositionablePoint.EDGE_CONNECTOR) {    element.setAttribute("linkedpanel",p.getLinkEditorName());    element.setAttribute("linkpointid",p.getLinkedPointId());  }  element.setAttribute("class",getClass().getName());  return element;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_OPTIONS_1__TRACE_OPTION_1:    return getTraceOption_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public final static boolean isUnreserved(char c){  return isAlpha(c) || isDigit(c) || c == '-' || c == '.' || c == '_' || c == '~';}  }
class C{  public String storeAttachmentOnFileSystem(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  return "StoreAttachmentWarning";}  }
class C{  @Dev public AdminCondition(@Dev(defaultValue="5000") final int requiredAdminlevel){  this.requiredAdminlevel=requiredAdminlevel;}  }
class C{  public void addTunnel(UserTunnel tunnel){  tunnels.put(tunnel.getUUID().toString(),tunnel);}  }
class C{  public InvalidMpqArchiveException(final String message){  super(message);}  }
class C{  private void dumpTreeNB(int depth,StringBuffer text) throws Exception {  int i, j;  for (i=0; i < m_sons.length; i++) {    text.append("\n");    ;    for (j=0; j < depth; j++) {      text.append("|   ");    }    text.append(m_localModel.leftSide(m_train));    text.append(m_localModel.rightSide(i,m_train));    if (m_sons[i].m_isLeaf) {      text.append(": NB ");      text.append(m_sons[i].m_id);    } else {      ((NBTreeClassifierTree)m_sons[i]).dumpTreeNB(depth + 1,text);    }  }}  }
class C{  public float sideOfLine(CGPoint p,CGPoint l1,CGPoint l2){  CGPoint vp=CGPoint.ccpPerp(CGPoint.ccpSub(l1,l2));  CGPoint vx=CGPoint.ccpSub(p,l1);  return CGPoint.ccpDot(vx,vp);}  }
class C{  public static final void main(String[] args){  if (args.length != 1) {    System.err.println("A single argument -- a port -- is required");    System.exit(1);  }  int port=Integer.valueOf(args[0]).intValue();  System.out.println(Version.VERSION);  try {    new Server(port);  } catch (  Exception e) {    System.err.println("Failed to start server");    e.printStackTrace(System.err);  }}  }
class C{  protected ASN1Primitive buildObject(int tag,int tagNo,int length) throws IOException {  boolean isConstructed=(tag & CONSTRUCTED) != 0;  DefiniteLengthInputStream defIn=new DefiniteLengthInputStream(this,length);  if ((tag & APPLICATION) != 0) {    return new DERApplicationSpecific(isConstructed,tagNo,defIn.toByteArray());  }  if ((tag & TAGGED) != 0) {    return new ASN1StreamParser(defIn).readTaggedObject(isConstructed,tagNo);  }  if (isConstructed) {switch (tagNo) {case OCTET_STRING:      ASN1EncodableVector v=buildDEREncodableVector(defIn);    ASN1OctetString[] strings=new ASN1OctetString[v.size()];  for (int i=0; i != strings.length; i++) {    strings[i]=(ASN1OctetString)v.get(i);  }return new BEROctetString(strings);case SEQUENCE:if (lazyEvaluate) {return new LazyEncodedSequence(defIn.toByteArray());} else {return DERFactory.createSequence(buildDEREncodableVector(defIn));}case SET:return DERFactory.createSet(buildDEREncodableVector(defIn));case EXTERNAL:return new DERExternal(buildDEREncodableVector(defIn));default :throw new IOException("unknown tag " + tagNo + " encountered");}}return createPrimitiveDERObject(tagNo,defIn,tmpBuffers);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.183 -0400",hash_original_method="7AA5CFB77F71DE2C6FFA937BCE62ADAE",hash_generated_method="EA592F68FF426205AB076E6EA28F36A8") final Node predecessor() throws NullPointerException {  Node p=prev;  if (p == null)   throw new NullPointerException(); else   return p;}  }
class C{  @Override public void close() throws IOException {}  }
class C{  private void drawYAxis(Canvas canvas){  int x=getScrollX() + leftBorder;  int y=topBorder;  canvas.drawLine(x,y,x,y + effectiveHeight,axisPaint);  int markerXPosition=x - spacer;  for (int i=0; i < series.length; i++) {    int index=series.length - 1 - i;    ChartValueSeries chartValueSeries=series[index];    if (chartValueSeries.isEnabled() && chartValueSeries.hasData() || allowIfEmpty(index)) {      markerXPosition-=drawYAxisMarkers(chartValueSeries,canvas,markerXPosition) + spacer;    }  }}  }
class C{  protected boolean isImsConnected(){  return ServerApiUtils.isImsConnected();}  }
class C{  public Long addFolderSelf(String SID,Long parentFileExplorerItemId,String fileName,Long room_id,Boolean isOwner) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkUserLevel(user_level)) {      log.debug("addFolder " + parentFileExplorerItemId);      if (parentFileExplorerItemId == 0 && isOwner) {        return fileExplorerItemDao.add(fileName,"",parentFileExplorerItemId,users_id,room_id,users_id,true,false,false,"",false,false,0L,"");      } else {        return fileExplorerItemDao.add(fileName,"",parentFileExplorerItemId,null,room_id,users_id,true,false,false,"",false,false,0L,"");      }    }  } catch (  Exception err) {    log.error("[getFileExplorerByParent] ",err);  }  return null;}  }
class C{  public GPUImageBoxBlurFilter(){  this(1f);}  }
class C{  public PerlinNoiseGenerator(Random rand){  this.offsetX=rand.nextDouble() * 256;  this.offsetY=rand.nextDouble() * 256;  this.offsetZ=rand.nextDouble() * 256;  for (int i=0; i < 256; i++) {    this.perm[i]=rand.nextInt(256);  }  for (int i=0; i < 256; i++) {    int pos=rand.nextInt(256 - i) + i;    int old=this.perm[i];    this.perm[i]=this.perm[pos];    this.perm[pos]=old;    this.perm[i + 256]=this.perm[i];  }}  }
class C{  private StorageHADomain lookupVPlexDirectorByName(DbClient dbClient,StorageSystem storageSystem,String directorName){  String cacheKey=generateStorageHADomainKey(storageSystem,directorName);  StorageHADomain vplexDirector=(StorageHADomain)OBJECT_CACHE.get(cacheKey);  if (vplexDirector == null) {    vplexDirector=findStorageHADomainByNameInDB(dbClient,storageSystem,directorName);    if (vplexDirector != null) {      OBJECT_CACHE.put(cacheKey,vplexDirector);      return vplexDirector;    } else {    }  }  return vplexDirector;}  }
class C{  public ISO9797Alg3Mac(BlockCipher cipher,BlockCipherPadding padding){  this(cipher,cipher.getBlockSize() * 8,padding);}  }
class C{  @SuppressWarnings("unchecked") public T ackTimeout(TimeValue ackTimeout){  this.ackTimeout=ackTimeout;  return (T)this;}  }
class C{  public void testRecognizeRestrictedCone() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  Response testIResponse2=null;  Response testIResponse3=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  Response testIResponse4=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  responseServer.addMessage(testIResponse1);  responseServer.addMessage(testIResponse2);  responseServer.addMessage(testIResponse3);  responseServer.addMessage(testIResponse4);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.RESTRICTED_CONE_NAT);  expectedReturn.setPublicAddress(mappedClientAddress);  StunDiscoveryReport actualReturn=stunAddressDiscoverer.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  public NSSet(boolean ordered){  this.ordered=ordered;  if (!ordered)   set=new LinkedHashSet<NSObject>(); else   set=new TreeSet<NSObject>();}  }
class C{  public void save(){  getBot().log(this,"Saving",Bot.FINE,getShortTermMemory());  getLongTermMemory().merge(getShortTermMemory());  getShortTermMemory().resume();}  }
class C{  public Vector2f fma(float a,Vector2fc b){  x+=a * b.x();  y+=a * b.y();  return this;}  }
class C{  protected static <A,B>double[] computeBivariateRanks(NumberArrayAdapter<?,A> adapter1,A data1,NumberArrayAdapter<?,B> adapter2,B data2,int len){  double[] ret=new double[len];  for (int i=0; i < len; i++) {    for (int j=i + 1; j < len; j++) {      double xi=adapter1.getDouble(data1,i), xj=adapter1.getDouble(data1,j);      double yi=adapter2.getDouble(data2,i), yj=adapter2.getDouble(data2,j);      if (xi < xj) {        ret[j]+=(yi < yj) ? 1 : (yi == yj) ? .5 : 0;      } else       if (xj < xi) {        ret[i]+=(yj < yi) ? 1 : (yj == yi) ? .5 : 0;      } else {        if (yi < yj) {          ret[j]+=.5;        } else         if (yj < yi) {          ret[i]+=.5;        } else {          ret[i]+=.25;          ret[j]+=.25;        }      }    }  }  return ret;}  }
class C{  void addCaselessMatches(int codePoint,String uppercaseMapping,String lowercaseMapping,String titlecaseMapping){  if ((null != uppercaseMapping && uppercaseMapping.length() > 0) || (null != lowercaseMapping && lowercaseMapping.length() > 0) || (null != titlecaseMapping && titlecaseMapping.length() > 0)) {    Integer upper=null;    if (null != uppercaseMapping && uppercaseMapping.length() > 0)     upper=Integer.valueOf(uppercaseMapping,16); else     uppercaseMapping=null;    Integer lower=null;    if (null != lowercaseMapping && lowercaseMapping.length() > 0)     lower=Integer.valueOf(lowercaseMapping,16); else     lowercaseMapping=null;    Integer title=null;    if (null != titlecaseMapping && titlecaseMapping.length() > 0)     title=Integer.valueOf(titlecaseMapping,16); else     titlecaseMapping=null;    SortedSet<Integer> partition=caselessMatchPartitions.get(codePoint);    if (null == partition) {      if (null != uppercaseMapping)       partition=caselessMatchPartitions.get(upper);      if (null == partition && null != lowercaseMapping)       partition=caselessMatchPartitions.get(lower);      if (null == partition && null != titlecaseMapping)       partition=caselessMatchPartitions.get(title);      if (null == partition) {        partition=new TreeSet<Integer>();      }    }    partition.add(codePoint);    caselessMatchPartitions.put(codePoint,partition);    if (null != uppercaseMapping) {      partition.add(upper);      caselessMatchPartitions.put(upper,partition);    }    if (null != lowercaseMapping) {      partition.add(lower);      caselessMatchPartitions.put(lower,partition);    }    if (null != titlecaseMapping) {      partition.add(title);      caselessMatchPartitions.put(title,partition);    }    if (partition.size() > caselessMatchPartitionSize) {      caselessMatchPartitionSize=partition.size();    }  }}  }
class C{  protected boolean isEqualValue(Object value1,Object value2){  return (value1 == value2 || value1.equals(value2));}  }
class C{  @Override public String toString(){  return "CUDA_ARRAY3D_DESCRIPTOR[" + "Width=" + Width + ","+ "Height="+ Height+ ","+ "Depth="+ Depth+ ","+ "CUarray_format_Format="+ Format+ ","+ "NumChannels="+ NumChannels+ "]";}  }
class C{  @Override protected double solveImpl(final Derivative f,final double xAccuracy){  double froot, dfroot, dx;  froot=f.op(root);  dfroot=f.derivative(root);  evaluationNumber++;  while (evaluationNumber <= getMaxEvaluations()) {    dx=froot / dfroot;    root-=dx;    if ((xMin - root) * (root - xMax) < 0.0) {      final NewtonSafe s=new NewtonSafe();      s.setMaxEvaluations(getMaxEvaluations() - evaluationNumber);      return s.solve(f,xAccuracy,root + dx,xMin,xMax);    }    if (Math.abs(dx) < xAccuracy)     return root;    froot=f.op(root);    dfroot=f.derivative(root);    evaluationNumber++;  }  throw new ArithmeticException("maximum number of function evaluations exceeded");}  }
class C{  private void initSizeBasedStuff(){  if (mCircleSize == 0) {    initSizeMeasureIconHeight();  }  mPaintFont.setTextSize(mCircleSize / 2f);  float strokeWidth=mCircleSize / 6.5f;  mPaintRed.setStrokeWidth(strokeWidth);  mPaintSystem.setStrokeWidth(strokeWidth);  mPaintGray.setStrokeWidth(strokeWidth / 3.5f);  int pLeft=getPaddingLeft();  mRectLeft=new RectF(pLeft + strokeWidth / 2.0f,0 + strokeWidth / 2.0f,mCircleSize - strokeWidth / 2.0f + pLeft,mCircleSize - strokeWidth / 2.0f);  Rect bounds=new Rect();  mPaintFont.getTextBounds("99",0,"99".length(),bounds);  mTextLeftX=mCircleSize / 2.0f + pLeft;  mTextY=mCircleSize / 2.0f + (bounds.bottom - bounds.top) / 2.0f - strokeWidth / 2.0f + 1;  onMeasure(0,0);}  }
class C{  private void search(){  if (m_modeBox.getSelectedIndex() == 0) {    searchText();  } else {    searchHex();  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  ((Expression)m_obj).fixupVariables(vars,globalsSize);}  }
class C{  public void testGetSpeed_float(){  AbstractThrottle instance=new AbstractThrottleImpl();  assertEquals("Full Speed",127,instance.intSpeed(1.0F));}  }
class C{  public boolean isParameter(){  return (type & PARAMETER) != 0;}  }
class C{  public void shuffleFromTo(int from,int to){  if (size == 0) {    return;  }  checkRangeFromTo(from,to,size);  cern.jet.random.Uniform gen=new cern.jet.random.Uniform(new cern.jet.random.engine.DRand(new java.util.Date()));  char tmpElement;  char[] theElements=elements;  int random;  for (int i=from; i < to; i++) {    random=gen.nextIntFromTo(i,to);    tmpElement=theElements[random];    theElements[random]=theElements[i];    theElements[i]=tmpElement;  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void concat() throws IOException {  print("concat",null);}  }
class C{  public synchronized Set<Map.Entry<K,V>> entrySet(){  HashMap<K,V> map=new HashMap<K,V>();  for (  K k : keySet()) {    map.put(k,find(k).value);  }  return map.entrySet();}  }
class C{  public static List<DeterministicKeyChain> fromProtobuf(List<Protos.Key> keys,@Nullable KeyCrypter crypter,KeyChainFactory factory) throws UnreadableWalletException {  List<DeterministicKeyChain> chains=newLinkedList();  DeterministicSeed seed=null;  DeterministicKeyChain chain=null;  int lookaheadSize=-1;  int sigsRequiredToSpend=1;  PeekingIterator<Protos.Key> iter=Iterators.peekingIterator(keys.iterator());  while (iter.hasNext()) {    Protos.Key key=iter.next();    final Protos.Key.Type t=key.getType();    if (t == Protos.Key.Type.DETERMINISTIC_MNEMONIC) {      if (chain != null) {        checkState(lookaheadSize >= 0);        chain.setLookaheadSize(lookaheadSize);        chain.setSigsRequiredToSpend(sigsRequiredToSpend);        chain.maybeLookAhead();        chains.add(chain);        chain=null;      }      long timestamp=key.getCreationTimestamp() / 1000;      String passphrase=DEFAULT_PASSPHRASE_FOR_MNEMONIC;      if (key.hasSecretBytes()) {        if (key.hasEncryptedDeterministicSeed())         throw new UnreadableWalletException("Malformed key proto: " + key.toString());        byte[] seedBytes=null;        if (key.hasDeterministicSeed()) {          seedBytes=key.getDeterministicSeed().toByteArray();        }        seed=new DeterministicSeed(key.getSecretBytes().toStringUtf8(),seedBytes,passphrase,timestamp);      } else       if (key.hasEncryptedData()) {        if (key.hasDeterministicSeed())         throw new UnreadableWalletException("Malformed key proto: " + key.toString());        EncryptedData data=new EncryptedData(key.getEncryptedData().getInitialisationVector().toByteArray(),key.getEncryptedData().getEncryptedPrivateKey().toByteArray());        EncryptedData encryptedSeedBytes=null;        if (key.hasEncryptedDeterministicSeed()) {          Protos.EncryptedData encryptedSeed=key.getEncryptedDeterministicSeed();          encryptedSeedBytes=new EncryptedData(encryptedSeed.getInitialisationVector().toByteArray(),encryptedSeed.getEncryptedPrivateKey().toByteArray());        }        seed=new DeterministicSeed(data,encryptedSeedBytes,timestamp);      } else {        throw new UnreadableWalletException("Malformed key proto: " + key.toString());      }      if (log.isDebugEnabled())       log.debug("Deserializing: DETERMINISTIC_MNEMONIC: {}",seed);    } else     if (t == Protos.Key.Type.DETERMINISTIC_KEY) {      if (!key.hasDeterministicKey())       throw new UnreadableWalletException("Deterministic key missing extra data: " + key.toString());      byte[] chainCode=key.getDeterministicKey().getChainCode().toByteArray();      LinkedList<ChildNumber> path=newLinkedList();      for (      int i : key.getDeterministicKey().getPathList())       path.add(new ChildNumber(i));      LazyECPoint pubkey=new LazyECPoint(ECKey.CURVE.getCurve(),key.getPublicKey().toByteArray());      final ImmutableList<ChildNumber> immutablePath=ImmutableList.copyOf(path);      boolean isWatchingAccountKey=false;      boolean isFollowingKey=false;      if (key.getDeterministicKey().getIsFollowing()) {        if (chain != null) {          checkState(lookaheadSize >= 0);          chain.setLookaheadSize(lookaheadSize);          chain.setSigsRequiredToSpend(sigsRequiredToSpend);          chain.maybeLookAhead();          chains.add(chain);          chain=null;          seed=null;        }        isFollowingKey=true;      }      if (chain == null) {        boolean isMarried=!isFollowingKey && !chains.isEmpty() && chains.get(chains.size() - 1).isFollowing();        if (seed == null) {          DeterministicKey accountKey=new DeterministicKey(immutablePath,chainCode,pubkey,null,null);          accountKey.setCreationTimeSeconds(key.getCreationTimestamp() / 1000);          chain=factory.makeWatchingKeyChain(key,iter.peek(),accountKey,isFollowingKey,isMarried);          isWatchingAccountKey=true;        } else {          chain=factory.makeKeyChain(key,iter.peek(),seed,crypter,isMarried);          chain.lookaheadSize=LAZY_CALCULATE_LOOKAHEAD;        }      }      DeterministicKey parent=null;      if (!path.isEmpty() && !isWatchingAccountKey) {        ChildNumber index=path.removeLast();        parent=chain.hierarchy.get(path,false,false);        path.add(index);      }      DeterministicKey detkey;      if (key.hasSecretBytes()) {        final BigInteger priv=new BigInteger(1,key.getSecretBytes().toByteArray());        detkey=new DeterministicKey(immutablePath,chainCode,pubkey,priv,parent);      } else {        if (key.hasEncryptedData()) {          Protos.EncryptedData proto=key.getEncryptedData();          EncryptedData data=new EncryptedData(proto.getInitialisationVector().toByteArray(),proto.getEncryptedPrivateKey().toByteArray());          checkNotNull(crypter,"Encountered an encrypted key but no key crypter provided");          detkey=new DeterministicKey(immutablePath,chainCode,crypter,pubkey,data,parent);        } else {          detkey=new DeterministicKey(immutablePath,chainCode,pubkey,null,parent);        }      }      if (key.hasCreationTimestamp())       detkey.setCreationTimeSeconds(key.getCreationTimestamp() / 1000);      if (log.isDebugEnabled())       log.debug("Deserializing: DETERMINISTIC_KEY: {}",detkey);      if (!isWatchingAccountKey) {        if (path.size() == 0) {          if (chain.rootKey == null) {            chain.rootKey=detkey;            chain.hierarchy=new DeterministicHierarchy(detkey);          }        } else         if (path.size() == chain.getAccountPath().size() + 1) {          if (detkey.getChildNumber().num() == 0) {            chain.externalParentKey=detkey;            chain.issuedExternalKeys=key.getDeterministicKey().getIssuedSubkeys();            lookaheadSize=Math.max(lookaheadSize,key.getDeterministicKey().getLookaheadSize());            sigsRequiredToSpend=key.getDeterministicKey().getSigsRequiredToSpend();          } else           if (detkey.getChildNumber().num() == 1) {            chain.internalParentKey=detkey;            chain.issuedInternalKeys=key.getDeterministicKey().getIssuedSubkeys();          }        }      }      chain.hierarchy.putKey(detkey);      chain.basicKeyChain.importKey(detkey);    }  }  if (chain != null) {    checkState(lookaheadSize >= 0);    chain.setLookaheadSize(lookaheadSize);    chain.setSigsRequiredToSpend(sigsRequiredToSpend);    chain.maybeLookAhead();    chains.add(chain);  }  return chains;}  }
class C{  private void verifyBBConstruction(String where){  BasicBlock cur=cfg.firstInCodeOrder();  BasicBlock prev=null;  while (cur != null) {    if (cur.getPrev() != prev) {      verror(where,"Prev link of " + cur + " does not point to "+ prev);    }    Instruction s=cur.start;    Instruction e=cur.end;    if (s == null) {      verror(where,"Bblock " + cur + " has null start instruction");    }    if (e == null) {      verror(where,"Bblock " + cur + " has null end instruction");    }    if (!s.isBbFirst()) {      verror(where,"Instr " + s + " is first instr of "+ cur+ " but is not BB_FIRST");    }    if (s.getBasicBlock() != cur) {      verror(where,"Instr " + s + " is first instr of "+ cur+ " but points to BBlock "+ s.getBasicBlock());    }    if (!e.isBbLast()) {      verror(where,"Instr " + e + " is last instr of "+ cur+ " but is not BB_LAST");    }    if (e.getBasicBlock() != cur) {      verror(where,"Instr " + e + " is last instr of "+ cur+ " but points to BBlock "+ e.getBasicBlock());    }    if (s.getPrev() != null) {      verror(where,"Instr " + s + " is the first instr of "+ cur+ " but has a predecessor "+ s.getPrev());    }    if (e.getNext() != null) {      verror(where,"Instr " + s + " is the last instr of "+ cur+ " but has a successor "+ e.getNext());    }    Instruction pp=s;    Instruction p=s.getNext();    boolean foundBranch=false;    while (p != e) {      if (p == null) {        verror(where,"Fell off the instruction list in " + cur + " before finding "+ e);      }      if (p.getPrev() != pp) {        verror(where,"Instr " + pp + " has next "+ p+ " but "+ p+ " has prev "+ p.getPrev());      }      if (!p.isBbInside()) {        verror(where,"Instr " + p + " should be inside "+ cur+ " but is not BBInside");      }      if (foundBranch && !p.isBranch()) {        printInstructions();        verror(where,"Non branch " + p + " after branch "+ pp+ " in "+ cur);      }      if (p.isBranch() && p.operator() != LOWTABLESWITCH) {        foundBranch=true;        if (p.isUnconditionalBranch() && p.getNext() != e) {          printInstructions();          verror(where,"Unconditional branch " + p + " does not end its basic block "+ cur);        }      }      pp=p;      p=p.getNext();    }    if (p.getPrev() != pp) {      verror(where,"Instr " + pp + " has next "+ p+ " but "+ p+ " has prev "+ p.getPrev());    }    prev=cur;    cur=(BasicBlock)cur.getNext();  }}  }
class C{  public final void clear(){  clearExplicitKnowledge();  clearTiers();}  }
class C{  boolean continuesToLabel(String label){  return hasAlwaysKey(prefix("b",label));}  }
class C{  void error(String msg){  System.err.println(msg);  errors++;}  }
class C{  @Override public Class<?> loadClassImpl(String name,boolean resolve) throws ClassNotFoundException {  Class<?> cl=findLoadedClass(name);  if (cl != null) {    if (resolve)     resolveClass(cl);    return cl;  }  if (_classNotFoundCache.get(name) != null) {    return null;  }  try {    cl=super.loadClassImpl(name,resolve);  } catch (  ClassNotFoundException e) {    _classNotFoundCache.put(name,name);    throw e;  }  if (cl == null) {    _classNotFoundCache.put(name,name);  }  return cl;}  }
class C{  public static boolean mayAccessContainedEntity(Player player,Entity entity){  RPObject parent=entity.getContainer();  while ((parent != null) && (parent != entity)) {    EntitySlot slot=getContainingSlot(entity);    if ((slot == null) || !slot.isReachableForTakingThingsOutOfBy(player)) {      return false;    }    if (parent instanceof Item) {      entity=(Item)parent;      if (isItemBoundToOtherPlayer(player,entity)) {        return false;      }      parent=entity.getContainer();    } else     if (parent instanceof Corpse) {      Corpse corpse=(Corpse)parent;      if (!corpse.mayUse(player)) {        player.sendPrivateText("Only " + corpse.getCorpseOwner() + " may access the corpse for now.");        return false;      }      return true;    } else     if (parent instanceof Player) {      return player == parent;    } else     if (parent instanceof Chest) {      return true;    } else {      return false;    }  }  return true;}  }
class C{  public static String prettyPrintHTML(String html,boolean newlines,boolean trim,boolean isXHTML,boolean expandEmpty) throws java.io.IOException, java.io.UnsupportedEncodingException, org.dom4j.DocumentException {  StringWriter sw=new StringWriter();  OutputFormat format=OutputFormat.createPrettyPrint();  format.setNewlines(newlines);  format.setTrimText(trim);  format.setXHTML(isXHTML);  format.setExpandEmptyElements(expandEmpty);  HTMLWriter writer=new HTMLWriter(sw,format);  Document document=DocumentHelper.parseText(html);  writer.write(document);  writer.flush();  return sw.toString();}  }
class C{  private static void displayRSAConfig(RSAAgentConfig rsaConfig){  if (rsaConfig == null)   return;  displayParamNameAndValue(OPTION_RSA_LOGIN_GUIDE,rsaConfig.get_loginGuide());  displayParamNameAndValue(OPTION_RSA_LOG_LEVEL,rsaConfig.get_logLevel().toString());  displayParamNameAndValue(OPTION_RSA_LOG_FILE_SIZE,rsaConfig.get_logFileSize());  displayParamNameAndValue(OPTION_RSA_MAX_LOG_FILE_COUNT,rsaConfig.get_maxLogFileCount());  displayParamNameAndValue(OPTION_RSA_CONN_TIME_OUT,rsaConfig.get_connectionTimeOut());  displayParamNameAndValue(OPTION_RSA_READ_TIME_OUT,rsaConfig.get_readTimeOut());  displayParamNameAndValue(OPTION_RSA_ENC_ALG_LIST,rsaConfig.get_rsaEncAlgList().toString());  displayParamNameAndValue("idsUserIDAttributeMaps",rsaConfig.get_idsUserIDAttributeMap() == null ? null : rsaConfig.get_idsUserIDAttributeMap().toString());  displayRSASites(rsaConfig.get_instMap());}  }
class C{  public Reference<? extends T> remove() throws InterruptedException {  return remove(0L);}  }
class C{  private void updateLocationForPerson(@NonNull PeopleManager.Person person,float meterLocationX,float meterLocationY,int floor){  person.setFloor(floor);  person.setLocationInMeters(meterLocationX,meterLocationY);  Fragment activeFragment=getCurrentFragment();  if (activeFragment instanceof MapActivityFragment) {    ((MapActivityFragment)activeFragment).updateView(person);  } else   if (activeFragment instanceof PeopleFragment) {    ((PeopleFragment)activeFragment).updateView();  }}  }
class C{  public CallSpec<Void,HttpError> unlikePost(String postId){  return Resource.<Void,HttpError>newDeleteSpec(api,"/v1/groups/forums/posts/{post_id}/like",false).responseAs(Void.class).pathParam("post_id",postId).build();}  }
class C{  @After public void cleanEnv() throws IOException {  for (  S3FileTransferRequestParamsDto params : Arrays.asList(S3FileTransferRequestParamsDto.builder().s3BucketName(storageDaoTestHelper.getS3LoadingDockBucketName()).s3KeyPrefix(TEST_S3_KEY_PREFIX + "/").build(),S3FileTransferRequestParamsDto.builder().s3BucketName(storageDaoTestHelper.getS3ExternalBucketName()).s3KeyPrefix(TEST_S3_KEY_PREFIX + "/").build())) {    if (!s3Dao.listDirectory(params).isEmpty()) {      s3Dao.deleteDirectory(params);    }  }  s3Operations.rollback();}  }
class C{  public QueryBuilder<T,R> addOrder(Iterable<Ordering> orders){  for (  Ordering order : orders) {    orderings.add(order);  }  return this;}  }
class C{  public BuildQueueTask scheduleDependenciesAnalyze(String wsId,String project,String type,ServiceContext serviceContext,BuildOptions buildOptions) throws BuilderException {  checkStarted();  final ProjectDescriptor descriptor=getProjectDescription(wsId,project,serviceContext);  final User user=EnvironmentContext.getCurrent().getUser();  final DependencyRequest request=(DependencyRequest)DtoFactory.getInstance().createDto(DependencyRequest.class).withType(type).withWorkspace(wsId).withProject(project).withUserId(user == null ? "" : user.getName());  if (buildOptions != null) {    request.setBuilder(buildOptions.getBuilderName());    request.setOptions(buildOptions.getOptions());    request.setTargets(buildOptions.getTargets());    request.setIncludeDependencies(buildOptions.isIncludeDependencies());  }  fillRequestFromProjectDescriptor(descriptor,request);  if (!hasBuilder(request)) {    throw new BuilderException(String.format("Builder '%s' is not available for workspace '%s'.",request.getBuilder(),wsId));  }  final WorkspaceDescriptor workspace=getWorkspaceDescriptor(wsId,serviceContext);  request.setTimeout(getBuildTimeout(workspace));  final Callable<RemoteTask> callable=createTaskFor(request);  final Long id=sequence.getAndIncrement();  final InternalBuildTask future=new InternalBuildTask(ThreadLocalPropagateContext.wrap(callable),id,wsId,project,false);  request.setId(id);  final BuildQueueTask task=new BuildQueueTask(id,request,waitingTimeMillis,future,eventService,serviceContext.getServiceUriBuilder());  tasks.put(id,task);  executor.execute(future);  return task;}  }
class C{  public Set<Entry<K,Collection<V>>> entrySet(){  return mMap.entrySet();}  }
class C{  public static Pair<Agg,String> splitAgg(String varName){  if (varName.toUpperCase().equals(Agg.COUNT.toString())) {    return Pair.of(Agg.COUNT,"");  }  int splitIndex=varName.indexOf('(');  if (splitIndex < 0) {    return null;  }  try {    String var=varName.substring(splitIndex + 1,varName.length() - 1);    Agg agg=Agg.valueOf(varName.substring(0,splitIndex).toUpperCase());    return Pair.of(agg,var);  } catch (  Exception e) {    return null;  }}  }
class C{  public String upgrade() throws SaaSApplicationException {  String result=OUTCOME_SUCCESS;  VOSubscription rc=getSubscriptionService().upgradeSubscription(model.getSubscription(),model.getService().getVO(),model.getSelectedPaymentInfo(),model.getSelectedBillingContact(),new SubscriptionsHelper().getVoUdaFromUdaRows(model.getSubscriptionUdaRows(),model.getOrganizationUdaRows()));  model.setDirty(false);  menuBean.resetMenuVisibility();  if (rc == null) {    ui.handleProgress();    result=OUTCOME_PROCESS;  } else {    ui.handle(rc.getStatus().isPendingUpdOrSuspendedUpd() ? INFO_SUBSCRIPTION_ASYNC_UPGRADED : INFO_SUBSCRIPTION_UPGRADED,model.getSubscription().getSubscriptionId());    menuBean.setCurrentPageLink(MenuBean.LINK_SUBSCRIPTION_USERS);    sessionBean.setSelectedSubscriptionId(rc.getSubscriptionId());    sessionBean.setSelectedSubscriptionKey(rc.getKey());  }  conversation.end();  return result;}  }
class C{  public Stream<T> sample(int k){  if (!withReplacement) {    k=min(k,n);  }  List<T> sample=new ArrayList<>();  for (int t=0; t < k; t++) {    sample.add(sample());  }  return sample.stream();}  }
class C{  public List<Address> listAddresses(int confirmations) throws APIException, IOException {  Map<String,String> params=buildBasicRequest();  params.put("confirmations",String.valueOf(confirmations));  String response=HttpClient.getInstance().get(String.format("merchant/%s/list",identifier),params);  JsonObject topElem=parseResponse(response);  List<Address> addresses=new ArrayList<Address>();  for (  JsonElement jAddr : topElem.get("addresses").getAsJsonArray()) {    JsonObject a=jAddr.getAsJsonObject();    Address address=new Address(a.get("balance").getAsLong(),a.get("address").getAsString(),a.has("label") && !a.get("label").isJsonNull() ? a.get("label").getAsString() : null,a.get("total_received").getAsLong());    addresses.add(address);  }  return addresses;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.STEREO_TYPE_TARGET__NAME:    return getName();case MappingPackage.STEREO_TYPE_TARGET__ATTRIBUTES:  return getAttributes();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public byte readByteBE() throws IOException {  return inputStream.readByte();}  }
class C{  public void printUnits(){  units.printTotal();}  }
class C{  public void wallclock(Calendar time){  TimingSpecifier ts=new WallclockTimingSpecifier(owner,isBegin,time);  timingSpecifiers.add(ts);}  }
class C{  public static boolean isFileOlder(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileOlder(file,date.getTime());}  }
class C{  public PingWorker(int actorMaxOperationTimeoutSec,PingMeta pingMeta,String targetHost){  super();  this.actorMaxOperationTimeoutSec=actorMaxOperationTimeoutSec;  this.pingMeta=pingMeta;  this.targetHost=targetHost;}  }
class C{  JavaSourceFromString(String name,String code){  super(uriFromString("mfm:///" + name.replace('.','/') + Kind.SOURCE.extension),Kind.SOURCE);  this.code=code;}  }
class C{  private ReferenceFactory<?> createFactory(final Constructor<?> constructor){  return null;}  }
class C{  public Style addMenuItem(String description,PendingIntent pendingIntent){  menuItemArrayList.add(new MenuItem(description,pendingIntent));  return this;}  }
class C{  public AuditEvent convertToAuditEvent(PersistentAuditEvent persistentAuditEvent){  Instant instant=persistentAuditEvent.getAuditEventDate().atZone(ZoneId.systemDefault()).toInstant();  return new AuditEvent(Date.from(instant),persistentAuditEvent.getPrincipal(),persistentAuditEvent.getAuditEventType(),convertDataToObjects(persistentAuditEvent.getData()));}  }
class C{  private static void printVisitTimeOnSiteDetails(VisitTimeOnSiteDetails visitTimeOnSiteDetails){  System.out.println("Goal Type:  VISIT_TIME_ON_SITE");  System.out.println("VISIT_TIME_ON_SITE - Comparison Type: " + visitTimeOnSiteDetails.getComparisonType());  System.out.println("VISIT_TIME_ON_SITE - Comparison Value: " + visitTimeOnSiteDetails.getComparisonValue());}  }
class C{  public synchronized void pressPlay(){  if (getPlayState() == PS_STOPPED) {    startSimulation();    spawnPlayThread();    setPlayState(PS_PLAYING);  } else   if (getPlayState() == PS_PAUSED) {    if (!simulation.step())     pressStop();    refresh();  }}  }
class C{  public static void init(Context context){  sContext=context;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.192 -0500",hash_original_method="7418BC5D1CF727D38A2258A36F4B5C15",hash_generated_method="5E68F97A65859B3BEDCFD1D0A3F53164") public boolean isEmpty(){  return getTaintBoolean();}  }
class C{  private static int resolvePackageToCompare(List<String> superClassList){  for (int i=0; i < ACTIVITY_PACKAGE_NAMES.size(); i++) {    if (superClassList.contains(ACTIVITY_PACKAGE_NAMES.get(i)))     return ACTIVITY;  }  for (int i=0; i < FRAGMENT_PACKAGE_NAMES.size(); i++) {    if (superClassList.contains(FRAGMENT_PACKAGE_NAMES.get(i)))     return FRAGMENT;  }  return -1;}  }
class C{  protected void addItemToSection(FormToolkit toolkit,String sectionTitle,String text,int minColumnWidth){  if (sections.containsKey(sectionTitle)) {    Label label=toolkit.createLabel(sections.get(sectionTitle),text,SWT.LEFT);    label.setLayoutData(new GridData(minColumnWidth,SWT.DEFAULT));  }}  }
class C{  public void enqueue(final long[] list,final int action){synchronized (this) {    if (action == NEXT && mPlayPos + 1 < mPlayListLen) {      addToPlayList(list,mPlayPos + 1);      notifyChange(QUEUE_CHANGED);    } else {      addToPlayList(list,Integer.MAX_VALUE);      notifyChange(QUEUE_CHANGED);      if (action == NOW) {        mPlayPos=mPlayListLen - list.length;        openCurrentAndNext();        play();        notifyChange(META_CHANGED);        return;      }    }    if (mPlayPos < 0) {      mPlayPos=0;      openCurrentAndNext();      play();      notifyChange(META_CHANGED);    }  }}  }
class C{  private void tabMainStateChanged(javax.swing.event.ChangeEvent evt){  requestServiceForSelectedTab();}  }
class C{  public EsriShapeExport(EsriGraphicList list,DbfTableModel dbf,String pathToFile){  setGraphicList(list);  setMasterDBF(dbf);  filePath=pathToFile;  DEBUG=logger.isLoggable(Level.FINE);}  }
class C{  public void bind(int index,float value){  mPreparedStatement.bindDouble(index,value);}  }
class C{  private static void merge(Comparable[] a,int[] index,int[] aux,int lo,int mid,int hi){  for (int k=lo; k <= hi; k++) {    aux[k]=index[k];  }  int i=lo, j=mid + 1;  for (int k=lo; k <= hi; k++) {    if (i > mid)     index[k]=aux[j++]; else     if (j > hi)     index[k]=aux[i++]; else     if (less(a[aux[j]],a[aux[i]]))     index[k]=aux[j++]; else     index[k]=aux[i++];  }}  }
class C{  public static Type newType(AST ast,VariableDeclaration declaration){  return newType(ast,declaration,null,null);}  }
class C{  @GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("logout") public Response logout(@DefaultValue("false") @QueryParam("force") boolean force,@DefaultValue("false") @QueryParam("proxytokens") boolean includeProxyTokens,@QueryParam("username") String username,@DefaultValue("true") @QueryParam("notifyvdcs") boolean notifyVDCs){  StorageOSUser user=getUserFromContext();  if (user != null) {    if (StringUtils.isNotBlank(username)) {      boolean isTargetUserLocal=_localUsers.containsKey(username);      boolean hasRestrictedSecurityAdmin=_permissionsHelper.userHasGivenRole(user,URI.create(user.getTenantId()),Role.RESTRICTED_SECURITY_ADMIN);      boolean hasSecurityAdmin=_permissionsHelper.userHasGivenRole(user,URI.create(user.getTenantId()),Role.SECURITY_ADMIN);      if (hasSecurityAdmin || (isTargetUserLocal && hasRestrictedSecurityAdmin)) {        _tokenManager.deleteAllTokensForUser(username,includeProxyTokens);        if (notifyVDCs && !isTargetUserLocal) {          tokenNotificationHelper.broadcastLogoutForce(user.getToken(),username);        }        return Response.ok(new LoggedOut(username)).build();      } else {        throw APIException.forbidden.userNotPermittedToLogoutAnotherUser(user.getUserName());      }    } else {      if (force) {        _tokenManager.deleteAllTokensForUser(user.getUserName(),includeProxyTokens);        if (notifyVDCs && !user.isLocal()) {          tokenNotificationHelper.broadcastLogoutForce(user.getToken(),null);        }      } else {        _tokenManager.deleteToken(user.getToken());        if (notifyVDCs && !user.isLocal()) {          tokenNotificationHelper.notifyExternalVDCs(user.getToken());        }      }      return Response.ok(new LoggedOut(user.getUserName())).build();    }  }  throw APIException.unauthorized.tokenNotFoundOrInvalidTokenProvided();}  }
class C{  public void addBatch() throws SQLException {  ParameterHolder[] holder=new ParameterHolder[prepareResult.getParamCount()];  for (int i=0; i < holder.length; i++) {    holder[i]=parameters[i];    if (holder[i] == null) {      logger.error("You need to set exactly " + prepareResult.getParamCount() + " parameters on the prepared statement");      throw ExceptionMapper.getSqlException("You need to set exactly " + prepareResult.getParamCount() + " parameters on the prepared statement");    }  }  parameterList.add(holder);}  }
class C{  synchronized public void terminate(){  if (executorService != null) {    executorService.shutdownNow();    executorService=null;  }  if (dispatchService != null) {    dispatchService.shutdownNow();    dispatchService=null;  }}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.301 -0500",hash_original_method="CDD824836834585D009706CA2D2AF418",hash_generated_method="6D4D32194769A9F3D2B691D031B40991") public String encode(){  if (this.isEmpty())   return "";  StringBuffer encoding=new StringBuffer();  ListIterator iterator=this.listIterator();  if (iterator.hasNext()) {    while (true) {      Object obj=iterator.next();      if (obj instanceof GenericObject) {        GenericObject gobj=(GenericObject)obj;        encoding.append(gobj.encode());      } else {        encoding.append(obj.toString());      }      if (iterator.hasNext())       encoding.append(separator); else       break;    }  }  return encoding.toString();}  }
class C{  public byte[] build(String className){  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);  String internalClass=getInternalClassName(className);  String implName=getInternalClassName(_type.getRawClass().getName());  String superName;  if (_type.isInterface()) {    superName="java/lang/Object";    cw.visit(V1_5,ACC_PUBLIC + ACC_SUPER,internalClass,null,superName,new String[]{implName});  } else {    superName=implName;    cw.visit(V1_5,ACC_PUBLIC + ACC_SUPER,internalClass,null,implName,null);  }  cw.visitSource(className + ".java",null);  BeanBuilder.generateDefaultConstructor(cw,superName);  for (  POJOProperty prop : _beanProperties.values()) {    TypeDescription type=prop.selectType();    createField(cw,prop,type);    if (!prop.hasConcreteGetter()) {      createGetter(cw,internalClass,prop,type);    }    if (!prop.hasConcreteSetter()) {      createSetter(cw,internalClass,prop,type);    }  }  for (  Method m : _unsupportedMethods.values()) {    createUnimplementedMethod(cw,internalClass,m);  }  cw.visitEnd();  return cw.toByteArray();}  }
class C{  public Property centuryOfEra(){  return new Property(this,getChronology().centuryOfEra());}  }
class C{  private ArtMethod(){  try {    artMethod=VersionHelper.CURRENT.createArtMethod();  } catch (  Exception e) {    throw new RuntimeException("Can't create new ArtMethod, is this a system running Art?",e);  }}  }
class C{  public boolean isValid(){  Object oo=get_Value(COLUMNNAME_IsValid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static Sequence createCollection(ComponentManager componentManager,InstantiatedType collectionType){  List<TypeArgument> argumentList=collectionType.getTypeArguments();  assert argumentList.size() == 1 : "Collection classes should have one type argument";  TypeArgument argumentType=argumentList.get(0);  ReferenceType elementType;  assert argumentType instanceof ReferenceArgument : "type argument must be reference type, have " + argumentType;  elementType=((ReferenceArgument)argumentType).getReferenceType();  InstantiatedType implementingType=getImplementingType(collectionType);  int totStatements=0;  List<Sequence> inputSequences=new ArrayList<>();  List<Integer> variableIndices=new ArrayList<>();  Sequence creationSequence=createCollectionCreationSequence(implementingType,elementType);  if (creationSequence == null) {    return null;  }  inputSequences.add(creationSequence);  int creationIndex=totStatements + creationSequence.getLastVariable().index;  variableIndices.add(creationIndex);  totStatements+=creationSequence.size();  SimpleList<Sequence> candidates=componentManager.getSequencesForType(elementType);  int length=0;  if (!candidates.isEmpty()) {    length=Randomness.nextRandomInt(candidates.size()) + 1;  }  assert !candidates.isEmpty() || length == 0 : "if there are no candidates, length must be zero";  if (!elementType.isParameterized() && !(elementType.isArray() && ((ArrayType)elementType).hasParameterizedElementType())) {    Sequence inputSequence=createAnArray(candidates,elementType,length);    inputSequences.add(inputSequence);    variableIndices.add(totStatements + inputSequence.getLastVariable().index);    TypedOperation addOperation=getCollectionAddAllOperation(elementType);    return Sequence.createSequence(addOperation,inputSequences,variableIndices);  } else {    List<Integer> variables=new ArrayList<>();    createElementSequences(candidates,length,elementType,inputSequences,totStatements,variables);    Sequence addSequence=Sequence.concatenate(inputSequences);    for (    Integer index : variables) {      List<Variable> inputs=new ArrayList<>();      inputs.add(addSequence.getVariable(creationIndex));      inputs.add(addSequence.getVariable(index));      addSequence=addSequence.extend(getAddOperation(collectionType,elementType),inputs);    }    return addSequence;  }}  }
class C{  private String toLocalInteger(Object valueObj){  if (valueObj instanceof Integer) {    return toLocalNumber((Integer)valueObj);  } else {    String value=valueObj.toString();    try {      value=toLocalNumber(Integer.parseInt(value));    } catch (    NumberFormatException ex) {    }    return value;  }}  }
class C{  public SparseGraphBuilder(){  super(new SparseGraphFactory());}  }
class C{  public String write(Object value,Class type) throws Exception {  Transform transform=lookup(type);  if (transform == null) {    throw new TransformException("Transform of %s not supported",type);  }  return transform.write(value);}  }
class C{  public T caseEntityMappingRule(EntityMappingRule object){  return null;}  }
class C{  public void cancelButtonActionPerformed(){  curNode=null;  editButton.setVisible(true);  cancelButton.setVisible(false);  this.dispatchEvent(new WindowEvent(this,WindowEvent.WINDOW_CLOSING));}  }
class C{  public AssumptionViolatedException(String assumption,Throwable t){  super(assumption,t);}  }
class C{  public PixelInterleavedSampleModel(int dataType,int w,int h,int pixelStride,int scanlineStride,int bandOffsets[]){  super(dataType,w,h,pixelStride,scanlineStride,bandOffsets);  int minBandOff=this.bandOffsets[0];  int maxBandOff=this.bandOffsets[0];  for (int i=1; i < this.bandOffsets.length; i++) {    minBandOff=Math.min(minBandOff,this.bandOffsets[i]);    maxBandOff=Math.max(maxBandOff,this.bandOffsets[i]);  }  maxBandOff-=minBandOff;  if (maxBandOff > scanlineStride) {    throw new IllegalArgumentException("Offsets between bands must be" + " less than the scanline " + " stride");  }  if (pixelStride * w > scanlineStride) {    throw new IllegalArgumentException("Pixel stride times width " + "must be less than or " + "equal to the scanline "+ "stride");  }  if (pixelStride < maxBandOff) {    throw new IllegalArgumentException("Pixel stride must be greater" + " than or equal to the offsets" + " between bands");  }}  }
class C{  private void GetInstance03(int mode) throws NoSuchAlgorithmException, IllegalArgumentException, InvalidAlgorithmParameterException {  try {    KeyPairGenerator.getInstance(null,mProv);    fail("NullPointerException or KeyStoreException must be thrown");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyPairGenerator.getInstance(invalidValues[i],mProv);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    String alg=validValues[i].concat(post);    try {      KeyPairGenerator.getInstance(alg,prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(alg).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  KeyPairGenerator kpG;  for (int i=0; i < validValues.length; i++) {    String alg=validValues[i].concat(post);    kpG=KeyPairGenerator.getInstance(alg,mProv);    assertEquals("Incorrect algorithm",kpG.getAlgorithm().toUpperCase(),(mode <= 2 ? resAlg : alg).toUpperCase());    assertEquals("Incorrect provider",kpG.getProvider(),mProv);    checkResult(kpG,mode);  }}  }
class C{  protected ConditionList toConditions(ValueNode cnfClause) throws StandardException {  return toConditions(cnfClause,null);}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public ScVolume expandVolume(String instanceId,int newSize) throws StorageCenterAPIException {  LOG.debug("Expanding volume '{}' to {}GB",instanceId,newSize);  Parameters params=new Parameters();  params.add("NewSize",String.format("%d MB",newSize));  try {    RestResult result=restClient.post(String.format("StorageCenter/ScVolume/%s/ExpandToSize",instanceId),params.toJson());    if (checkResults(result)) {      return gson.fromJson(result.getResult(),ScVolume.class);    }    throw new StorageCenterAPIException(String.format("Failed to expande volume: %s",result.getErrorMsg()));  } catch (  Exception e) {    LOG.warn(String.format("Error expanding volume: %s",e));    throw new StorageCenterAPIException("Error expanding volume",e);  }}  }
class C{  public void incEventsDispatched(){  this._stats.incLong(_eventsDispatched,1);}  }
class C{  void dce(Method m){  Deque<Block> code=dfs(m.entry.to);  cp(code);  BitSet marked=new BitSet();  for (  Block b : code)   for (  Expr e : b)   if (hasSideEffect(e))   dce_mark(marked,e);  for (  Block b : code)   for (Iterator<Expr> i=b.iterator(); i.hasNext(); )   if (!marked.get(i.next().id)) {    i.remove();  }}  }
class C{  public JavacMessages(Context context){  this(defaultBundleName,context.get(Locale.class));  context.put(messagesKey,this);}  }
class C{  @FlashException(referrer={"edit","list"}) public static void addStorageSystems(String virtualArrayId,@As(",") String[] ids){  List<URI> storagePorts=Lists.newArrayList();  for (  URI storageSystemId : uris(ids)) {    List<StoragePortRestRep> ports=StoragePortUtils.getStoragePortsByStorageSystem(storageSystemId);    storagePorts.addAll(ResourceUtils.ids(ports));  }  if (!storagePorts.isEmpty()) {    VirtualArrayRestRep virtualArray=getVirtualArray(virtualArrayId);    updateStoragePorts(storagePorts,addVirtualArray(virtualArray));  }  edit(virtualArrayId);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(label.length() * 2);  sb.append('"');  sb.append(label);  sb.append('"');  if (Literals.isLanguageLiteral(this)) {    sb.append('@');    sb.append(language);  } else {    sb.append("^^<");    sb.append(datatype.toString());    sb.append(">");  }  return sb.toString();}  }
class C{  public SimpleArgumentsBundle(@NonNull Map<String,String> arguments,@NonNull DisplayMetrics metrics){  mArguments=arguments;  mMetrics=metrics;}  }
class C{  public void updateElementsStylesBasedOnTime(Time time){  updateShineOverlayBasedOnTime(time);  updateShadowGradientBasedOnTime(time);  updateShapeColorBasedOnTime();  updateBackgroundColorBasedOnTime();}  }
class C{  @Override public boolean check(final CertificateToken certToken){  List<String> extensionIdList=DSSASN1Utils.getQCStatementsIdList(certToken);  return extensionIdList.contains(qcStatementASN1Id);}  }
class C{  public XmlElement(String document){  if (document == null)   throw new IllegalArgumentException("value is null");  this.document=document;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean isUpperCase(Character self){  return Character.isUpperCase(self);}  }
class C{  private ScriptEngine newScriptEngine(File file) throws ScriptException {  String filename=file.getName();  int index=filename.lastIndexOf('.');  if ((index < 0) || (index >= filename.length() - 1)) {    throw new ScriptException("file has no extension");  }  String extension=filename.substring(index + 1);  ScriptEngineManager manager=new ScriptEngineManager();  ScriptEngine engine=manager.getEngineByExtension(extension);  if (engine == null) {    throw new ScriptException("no scripting engine for extension ." + extension);  }  return engine;}  }
class C{  public boolean isSelfIgnored(){  return selfIgnored;}  }
class C{  public boolean applyDSE0(TestSuiteChromosome individual){  logger.info("[DSE] Current test suite: " + individual.toString());  boolean wasSuccess=false;  TestSuiteChromosome expandedTests=individual.clone();  createPathConstraints(expandedTests);  double originalFitness=getFitness(individual);  while (hasNextBranchCondition() && !LocalSearchBudget.getInstance().isFinished()) {    logger.info("Branches remaining: " + unsolvedBranchConditions.size());    TestBranchPair next=getNextBranchCondition();    BranchCondition branch=next.branch;    List<BranchCondition> pathCondition=next.pathCondition;    List<Constraint<?>> reachingConstraints=new LinkedList<Constraint<?>>();    for (    BranchCondition b : pathCondition) {      reachingConstraints.addAll(b.getSupportingConstraints());      if (b == branch) {        break;      }      reachingConstraints.add(b.getConstraint());    }    List<Constraint<?>> constraints=new LinkedList<Constraint<?>>();    TestCase newTest=negateCondition(new HashSet<Constraint<?>>(reachingConstraints),branch.getConstraint(),next.test.getTestCase());    if (newTest != null) {      logger.info("Found new test: " + newTest.toCode());      TestChromosome newTestChromosome=new TestChromosome();      newTestChromosome.setTestCase(newTest);      expandedTests.addTest(newTestChromosome);      if (Properties.DSE_KEEP_ALL_TESTS) {        updatePathConstraints(newTestChromosome);        calculateUncoveredBranches();        individual.addTest(newTest);        wasSuccess=true;      } else {        if (getFitness(expandedTests) < originalFitness) {          logger.info("New test improves fitness to {}",getFitness(expandedTests));          DSEStats.getInstance().reportNewTestUseful();          wasSuccess=true;          updatePathConstraints(newTestChromosome);          calculateUncoveredBranches(newTestChromosome);          individual.addTest(newTest);          originalFitness=getFitness(expandedTests);        } else {          logger.info("New test does not improve fitness");          DSEStats.getInstance().reportNewTestUnuseful();          expandedTests.deleteTest(newTest);        }      }      success++;    } else {      unsolvableBranchConditions.add(branch);      failed++;      logger.info("Failed to find new test.");    }  }  logger.info("Finished DSE");  getFitness(individual);  LocalSearchBudget.getInstance().countLocalSearchOnTestSuite();  return wasSuccess;}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public void clearStorage(){  Util.getImplementation().clearStorage();  cache.clearAllCache();}  }
class C{  public void addElement(Node value){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if ((m_firstFree + 1) >= m_mapSize) {    if (null == m_map) {      m_map=new Node[m_blocksize];      m_mapSize=m_blocksize;    } else {      m_mapSize+=m_blocksize;      Node newMap[]=new Node[m_mapSize];      System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);      m_map=newMap;    }  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  private void labelIndicatorMouseExited(MouseEvent e){  JLabel label=((JLabel)e.getSource());  labelIndicatorSetColorsToDefaultState(label);}  }
class C{  public boolean isRunning(){  return (asyncPingTask != null && !asyncPingTask.isCancelled());}  }
class C{  public void rollback() throws IllegalStateException, SystemException {  LogWriterI18n writer=TransactionUtils.getLogWriterI18n();  try {    XAResource xar=null;    XAResource xar1=null;    int loop=0;synchronized (this.resourceMap) {      Iterator iterator=resourceMap.entrySet().iterator();      Boolean isActive=Boolean.FALSE;      Map.Entry entry;      while (iterator.hasNext()) {        try {          entry=(Map.Entry)iterator.next();          xar=(XAResource)entry.getKey();          isActive=(Boolean)entry.getValue();          if (loop == 0) {            xar1=xar;          }          loop++;          if (isActive.booleanValue()) {            xar.end(xid,XAResource.TMSUCCESS);            entry.setValue(Boolean.FALSE);          }        } catch (        Exception e) {          if (VERBOSE)           writer.info(LocalizedStrings.ONE_ARG,"GlobalTransaction::rollback:Exception in delisting XAResource",e);        }      }    }    if (xar1 != null)     xar1.rollback(xid);    status=Status.STATUS_ROLLEDBACK;    if (VERBOSE)     writer.fine("Transaction rolled back successfully");  } catch (  Exception e) {    status=Status.STATUS_ROLLEDBACK;    String exception=LocalizedStrings.GlobalTransaction_GLOBALTRANSACTION_ROLLBACK_ROLLBACK_NOT_SUCCESSFUL_DUE_TO_EXCEPTION_0_1.toLocalizedString(new Object[]{e," " + (e instanceof XAException ? ("Error Code =" + ((XAException)e).errorCode) : "")});    if (VERBOSE)     writer.fine(exception);    SystemException sysEx=new SystemException(exception);    sysEx.initCause(e);    throw sysEx;  } finally {    TransactionManagerImpl.getTransactionManager().cleanGlobalTransactionMap(transactions);    transactions.clear();  }}  }
class C{  @Override public float floatValue(){  return value;}  }
class C{  public DataModelConversionException(ICalProperty originalProperty){  this.originalProperty=originalProperty;}  }
class C{  public void error(Map headers,String message){  transmit(Command.ERROR,headers,message);}  }
class C{  private void updatePeekBuffer(int bytesConsumed){  peekBufferLength-=bytesConsumed;  peekBufferPosition=0;  System.arraycopy(peekBuffer,bytesConsumed,peekBuffer,0,peekBufferLength);}  }
class C{  @Override public E poll(){  E minValue;  if (isEmpty())   return null; else {    this.modCount++;    minValue=data[0];    if (classicalRemove) {      data[0]=data[heapSize - 1];      costs[0]=costs[heapSize - 1];      indices[this.getIndex(data[0])]=0;      indices[this.getIndex(minValue)]=-1;      heapSize--;      if (heapSize > 0)       siftDown(0);    } else {      siftDownUp(0);      indices[this.getIndex(minValue)]=-1;    }    return minValue;  }}  }
class C{  protected ComboPopup createPopup(){  AdempiereComboPopup newPopup=new AdempiereComboPopup(comboBox);  newPopup.getAccessibleContext().setAccessibleParent(comboBox);  return newPopup;}  }
class C{  public TableDataElement(String paramString,String s){  super("td",paramString,new StringElement(s));}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public IdentityProviderDTO create(IdentityProviderDTO identityProvider,@DefaultValue("false") @QueryParam("probe") boolean probe) throws DTOMapperException {  validateProviderType(identityProvider.getType());  validateAuthenticationType(identityProvider.getType(),identityProvider.getAuthenticationType());  try {    if (probe) {      validateProbeEssentials(identityProvider);      IIdentityStoreData identityStoreData=IdentityProviderMapper.getIdentityStoreData(identityProvider);      getIDMClient().probeProviderConnectivity(tenant,identityStoreData);      return IdentityProviderMapper.sanitizeProbeResponse(identityProvider);    } else {      IIdentityStoreData identityStoreData=IdentityProviderMapper.getIdentityStoreData(identityProvider);      getIDMClient().addProvider(tenant,identityStoreData);      return IdentityProviderMapper.getIdentityProviderDTO(getIDMClient().getProvider(tenant,identityProvider.getName()));    }  } catch (  NoSuchTenantException e) {    log.warn("Failed to {} identity provider '{}' for tenant '{}'",probe ? "probe" : "add",identityProvider.getName(),tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  MalformedURLException|NotBoundException|InvalidProviderException|ADIDSAlreadyExistException|IDMLoginException e) {    log.warn("Failed to {} identity provider '{}' for tenant '{}' due to a client side error",probe ? "probe" : "add",identityProvider.getName(),tenant,e);    throw new BadRequestException(sm.getString("res.provider.add.failed",identityProvider.getName(),tenant),e);  }catch (  Exception e) {    log.error("Failed to {} identity provider '{}' for tenant '{}' due to a server side error",probe ? "probe" : "add",identityProvider.getName(),tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public String subscribe(final String subscriptionName,final Object[] params,final ResultListener listener){  final String subscriptionId=uniqueID();  if (listener != null) {    mListeners.put(subscriptionId,listener);  }  final Map<String,Object> data=new HashMap<String,Object>();  data.put(Protocol.Field.MESSAGE,Protocol.Message.SUBSCRIBE);  data.put(Protocol.Field.NAME,subscriptionName);  data.put(Protocol.Field.ID,subscriptionId);  if (params != null) {    data.put(Protocol.Field.PARAMS,params);  }  send(subscriptionId,data);  return subscriptionId;}  }
class C{  protected void grow(int minCapacity,boolean auto){  int newCapacity=minCapacity;  if (auto) {    newCapacity=buf.length << 1;    if (newCapacity < minCapacity) {      newCapacity=minCapacity;    }  }  buf=Arrays.copyOf(buf,newCapacity);}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  Loger.debug("Cache cleared.");}  }
class C{  public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public void connect(int timeout,String host,int tcpPort) throws IOException {  connect(timeout,InetAddress.getByName(host),tcpPort,-1);}  }
class C{  public void visitMaxs(int maxStack,int maxLocals){  if (mv != null) {    mv.visitMaxs(maxStack,maxLocals);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @SuppressWarnings("deprecation") private void initCropFrameStyle(@NonNull TypedArray a){  int cropFrameStrokeSize=a.getDimensionPixelSize(R.styleable.ucrop_UCropView_ucrop_frame_stroke_size,getResources().getDimensionPixelSize(R.dimen.ucrop_default_crop_frame_stoke_width));  int cropFrameColor=a.getColor(R.styleable.ucrop_UCropView_ucrop_frame_color,getResources().getColor(R.color.ucrop_color_default_crop_frame));  mCropFramePaint.setStrokeWidth(cropFrameStrokeSize);  mCropFramePaint.setColor(cropFrameColor);  mCropFramePaint.setStyle(Paint.Style.STROKE);}  }
class C{  protected PublicKey engineGeneratePublic(KeySpec keySpec) throws InvalidKeySpecException {  try {    if (keySpec instanceof DHPublicKeySpec) {      DHPublicKeySpec dhPubKeySpec=(DHPublicKeySpec)keySpec;      return new DHPublicKey(dhPubKeySpec.getY(),dhPubKeySpec.getP(),dhPubKeySpec.getG());    } else     if (keySpec instanceof X509EncodedKeySpec) {      return new DHPublicKey(((X509EncodedKeySpec)keySpec).getEncoded());    } else {      throw new InvalidKeySpecException("Inappropriate key specification");    }  } catch (  InvalidKeyException e) {    throw new InvalidKeySpecException("Inappropriate key specification",e);  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new CompiereMenuItemUI();}  }
class C{  @Override public List<String> parseOutput(final String stdout,final String stderr){  super.throwIfError(stderr);  final List<String> filesAdded=new ArrayList<String>();  final String[] output=getLines(stdout);  String path=StringUtils.EMPTY;  for (  final String line : output) {    if (isFilePath(line)) {      path=line;    } else     if (StringUtils.isNotEmpty(line)) {      filesAdded.add(getFilePath(path,line,""));    }  }  return filesAdded;}  }
class C{  public static DAOStrategyManager newInstance(){  final DAOStrategyManager returnInstance=new DAOStrategyManager();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public static MethodSymbol findMethodDeclarationInType(Types types,TypeSymbol typeSymbol,String methodName,MethodType methodType,boolean overrides){  if (typeSymbol == null) {    return null;  }  if (typeSymbol.getEnclosedElements() != null) {    for (    Element element : typeSymbol.getEnclosedElements()) {      if ((element instanceof MethodSymbol) && (methodName.equals(element.getSimpleName().toString()) || ((MethodSymbol)element).getKind() == ElementKind.CONSTRUCTOR && "this".equals(methodName))) {        MethodSymbol methodSymbol=(MethodSymbol)element;        if (methodType == null) {          return methodSymbol;        }        if (overrides ? isInvocable(types,methodSymbol.type.asMethodType(),methodType) : isInvocable(types,methodType,methodSymbol.type.asMethodType())) {          return methodSymbol;        }      }    }  }  MethodSymbol result=null;  if (typeSymbol instanceof ClassSymbol && ((ClassSymbol)typeSymbol).getSuperclass() != null) {    result=findMethodDeclarationInType(types,((ClassSymbol)typeSymbol).getSuperclass().tsym,methodName,methodType);  }  if (result == null) {    if (typeSymbol instanceof ClassSymbol && ((ClassSymbol)typeSymbol).getInterfaces() != null) {      for (      Type t : ((ClassSymbol)typeSymbol).getInterfaces()) {        result=findMethodDeclarationInType(types,t.tsym,methodName,methodType);        if (result != null) {          break;        }      }    }  }  return result;}  }
class C{  public boolean hasWhoList(){  return super.hasElement(Who.KEY);}  }
class C{  public boolean isInfinite(){  return false;}  }
class C{  @Override public void execute(){  m_random=new Random(m_rowNumber * 11);  m_dataGenerator.setSeed(m_rowNumber * 11);  m_result=new RemoteResult(m_rowNumber,m_panelWidth);  m_status.setTaskResult(m_result);  m_status.setExecutionStatus(TaskStatusInfo.PROCESSING);  try {    m_numOfSamplesPerGenerator=(int)Math.pow(m_samplesBase,m_trainingData.numAttributes() - 3);    if (m_trainingData == null) {      throw new Exception("No training data set (BoundaryPanel)");    }    if (m_classifier == null) {      throw new Exception("No classifier set (BoundaryPanel)");    }    if (m_dataGenerator == null) {      throw new Exception("No data generator set (BoundaryPanel)");    }    if (m_trainingData.attribute(m_xAttribute).isNominal() || m_trainingData.attribute(m_yAttribute).isNominal()) {      throw new Exception("Visualization dimensions must be numeric " + "(RemoteBoundaryVisualizerSubTask)");    }    m_attsToWeightOn=new boolean[m_trainingData.numAttributes()];    m_attsToWeightOn[m_xAttribute]=true;    m_attsToWeightOn[m_yAttribute]=true;    m_weightingAttsValues=new double[m_attsToWeightOn.length];    m_vals=new double[m_trainingData.numAttributes()];    m_predInst=new DenseInstance(1.0,m_vals);    m_predInst.setDataset(m_trainingData);    System.err.println("Executing row number " + m_rowNumber);    for (int j=0; j < m_panelWidth; j++) {      double[] preds=calculateRegionProbs(j,m_rowNumber);      m_result.setLocationProbs(j,preds);      m_result.setPercentCompleted((int)(100 * ((double)j / (double)m_panelWidth)));    }  } catch (  Exception ex) {    m_status.setExecutionStatus(TaskStatusInfo.FAILED);    m_status.setStatusMessage("Row " + m_rowNumber + " failed.");    System.err.print(ex);    return;  }  m_status.setExecutionStatus(TaskStatusInfo.FINISHED);  m_status.setStatusMessage("Row " + m_rowNumber + " completed successfully.");}  }
class C{  @Nullable public static ShardId extractShardId(DirectoryReader reader){  final ElasticsearchDirectoryReader esReader=ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(reader);  if (esReader != null) {    return esReader.shardId();  }  throw new IllegalArgumentException("can't extract shard ID, can't unwrap ElasticsearchDirectoryReader");}  }
class C{  public static boolean isValidNcName(String name){  if (name == null || name.length() == 0)   return false;  CharacterIterator iter=new StringCharacterIterator(name);  char c=iter.first();  if (!isValidNcNameStart(c))   return false;  while (c != CharacterIterator.DONE) {    if (!isValidNcName(c))     return false;    c=iter.next();  }  return true;}  }
class C{  public void removeCustomTag(String virtual) throws SecurityException {  checkWriteAccess();  Element mappings=_getRootElement("custom-tag");  Element[] children=XMLConfigWebFactory.getChildren(mappings,"mapping");  for (int i=0; i < children.length; i++) {    if (virtual.equals(createVirtual(children[i])))     mappings.removeChild(children[i]);  }}  }
class C{  public int run(String[] args){  int result=0;  try {    basicRun(args);    String exitCode=System.getProperty(PROP_EXITCODE);    try {      result=exitCode == null ? 0 : Integer.parseInt(exitCode);    } catch (    NumberFormatException e) {      result=17;    }  } catch (  Throwable e) {    if (!"13".equals(System.getProperty(PROP_EXITCODE))) {      log("Exception launching the Eclipse Platform:");      log(e);      String message="An error has occurred";      if (logFile == null)       message+=" and could not be logged: \n" + e.getMessage(); else       message+=".  See the log file\n" + logFile.getAbsolutePath();      System.getProperties().put(PROP_EXITDATA,message);    }    result=13;  } finally {    takeDownSplash();    if (bridge != null)     bridge.uninitialize();  }  System.getProperties().put(PROP_EXITCODE,Integer.toString(result));  setExitData();  return result;}  }
class C{  public void store(Table metadata){  String key=generateKey(metadata.getSchema(),metadata.getName());  cache.put(key,metadata);}  }
class C{  private boolean hasValue(Object str){  return !isEmpty(str);}  }
class C{  @Override public void onDeviceStatusChanged(MidiDeviceStatus status){  if (status.isInputPortOpen(0) && !mSynthStarted) {    mSynthEngine.start();    mSynthStarted=true;  } else   if (!status.isInputPortOpen(0) && mSynthStarted) {    mSynthEngine.stop();    mSynthStarted=false;  }}  }
class C{  String renameTypeSignature(String sig){  if (sig == null) {    return null;  }  SignatureReader reader=new SignatureReader(sig);  SignatureWriter writer=new SignatureWriter();  reader.accept(new RenameSignatureAdapter(writer));  sig=writer.toString();  return sig;}  }
class C{  public boolean isStartsWithMode(){  return startsWithMode;}  }
class C{  public void removeEventListener(final DebugEventListener listener){  listeners.removeListener(listener);}  }
class C{  public int toInteger(){  return value;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Expression.class) {switch (baseOperationID) {case N4JSPackage.EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:      return N4JSPackage.INDEXED_ACCESS_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void internalEntityDecl(String arg0,String arg1) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.internalEntityDecl(arg0,arg1);}  }
class C{  public long lmst2Time(int sol,int hour,int minute,int second){  long earthTime=sol * secondsInADay + hour * secondsInAnHr + minute * secondsInAMin + second;  earthTime=(long)(earthTime * toEarth * 1000 + epoch + 0.5f);  return (earthTime);}  }
class C{  public List<PoiType> loadPoiTypesFromH2GeoDto(@NonNull H2GeoDto h2GeoDto){  List<PoiType> types=new ArrayList<>();  for (  Group<PoiTypeDto> group : h2GeoDto.getGroups()) {    types.addAll(poiTypeMapper.convert(group.getItems()));  }  return types;}  }
class C{  public void storeData(String key,Object data){  this.contextDataMap.put(key,data);}  }
class C{  private void renderHistoryTreeNode(final CSelectionHistoryTreeNode treeNode){  if (!treeNode.isRoot()) {    final List<NaviNode> nodes=treeNode.getSnapshot().getSelection();    final Pair<Integer,Integer> result=CNodeTypeCounter.count(nodes);    final int countAll=nodes.size();    final int selected=result.first();    final int unselected=countAll - selected;    final int invisible=result.second();    if (countAll == selected) {      setForeground(SELECTED_FONT_COLOR);    } else     if (countAll == unselected) {      setForeground(NORMAL_FONT_COLOR);    } else     if (countAll == invisible) {      setForeground(INVISIBLE_FONT_COLOR);    } else {      setForeground(MIXED_STATE_GROUP_NODE_COLOR);    }    setToolTipText(buildToolTip(nodes));  }}  }
class C{  @OnClose public void onClose(final Session session,final CloseReason closeReason){  SESSIONS.remove(session);}  }
class C{  private static void popTransactionStartStamp(){  ListOrderedMap map=(ListOrderedMap)suspendedTxStartStamps.get();  if (map.size() > 0) {    transactionStartStamp.set((Timestamp)map.remove(map.lastKey()));  } else {    Debug.logError("Error in transaction handling - no saved start stamp found - using NOW.",module);    transactionStartStamp.set(UtilDateTime.nowTimestamp());  }}  }
class C{  public void send(String message){  network.send(message);}  }
class C{  public boolean isOppositeSide(){  return oppositeSide;}  }
class C{  public void addComment(String line){  comments.add(line);}  }
class C{  private List<DeterministicKey> maybeLookAhead(DeterministicKey parent,int issued,int lookaheadSize,int lookaheadThreshold){  checkState(lock.isHeldByCurrentThread());  final int numChildren=hierarchy.getNumChildren(parent.getPath());  final int needed=issued + lookaheadSize + lookaheadThreshold - numChildren;  if (needed <= lookaheadThreshold)   return new ArrayList<DeterministicKey>();  log.info("{} keys needed for {} = {} issued + {} lookahead size + {} lookahead threshold - {} num children",needed,parent.getPathAsString(),issued,lookaheadSize,lookaheadThreshold,numChildren);  List<DeterministicKey> result=new ArrayList<DeterministicKey>(needed);  final Stopwatch watch=Stopwatch.createStarted();  int nextChild=numChildren;  for (int i=0; i < needed; i++) {    DeterministicKey key=HDKeyDerivation.deriveThisOrNextChildKey(parent,nextChild);    key=key.dropPrivateBytes();    hierarchy.putKey(key);    result.add(key);    nextChild=key.getChildNumber().num() + 1;  }  watch.stop();  log.info("Took {}",watch);  return result;}  }
class C{  public static void handleDeadlock(DeadlockException bug,String threadName,String message){  bug.printStackTrace();  System.err.println("Detail: " + message);  LocalClientInfo info=LimeWireModule.instance().getLimeWireGUIModule().getLimeWireGUI().getLocalClientInfoFactory().createLocalClientInfo(bug,threadName,message,false);  if (isSendableVersion() && (BugSettings.SEND_DEADLOCK_BUGS.getValue())) {    sendToServlet(info);  }}  }
class C{  public boolean isStatic(){  return false;}  }
class C{  private void checkEndPointsForExports(Collection<String> endpoints){  for (  String endpoint : endpoints) {    if (StorageProtocol.isFCEndpoint(endpoint) || iSCSIUtility.isValidIQNPortName(endpoint) || iSCSIUtility.isValidEUIPortName(endpoint)) {      _log.info("checkEndPointsForExports: checking endpoint {} is not in block export",endpoint);      NetworkUtil.checkNotUsedByActiveExportGroup(endpoint,_dbClient);    } else {      NetworkUtil.checkNotUsedByActiveFileExport(endpoint,_dbClient);      _log.info("checkEndPointsForExports: checking endpoint {} is not in file export",endpoint);    }  }}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  public void pause(){  pauseLock.lock();  try {    paused=true;  }  finally {    pauseLock.unlock();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double zFactor=0;  double slopeThreshold=0;  double profCurvThreshold=0;  double planCurvThreshold=0;  double radToDeg=180 / Math.PI;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      zFactor=Double.parseDouble(args[i]);    } else     if (i == 3) {      slopeThreshold=Double.parseDouble(args[i]);    } else     if (i == 4) {      profCurvThreshold=Double.parseDouble(args[i]);    } else     if (i == 5) {      planCurvThreshold=Double.parseDouble(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double Zx, Zy, Zxx, Zyy, Zxy, p, Zx2, q, Zy2;    double fx, fy;    double gridResTimes2=gridResX * 2;    double gridResSquared=gridResX * gridResX;    double fourTimesGridResSquared=gridResSquared * 4;    double planCurv, profCurv, slope;    double eightGridRes=8 * gridResX;    double[] N=new double[8];    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("landclass.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          z=z * zFactor;          for (c=0; c < 8; c++) {            N[c]=DEM.getValue(row + dY[c],col + dX[c]);            if (N[c] != noData) {              N[c]=N[c] * zFactor;            } else {              N[c]=z;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          q=p + 1;          if (p > 0) {            fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;            fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;            slope=Math.atan(Math.sqrt(fx * fx + fy * fy));            slope=slope * radToDeg;            planCurv=-1 * (Zxx * Zy2 - 2 * Zxy * Zx* Zy + Zyy * Zx2) / Math.pow(p,1.5);            planCurv=(planCurv * radToDeg);            profCurv=-1 * (Zxx * Zx2 + 2 * Zxy * Zx* Zy + Zyy * Zy2) / Math.pow(p * q,1.5);            profCurv=(profCurv * radToDeg);            if (profCurv < -profCurvThreshold && planCurv <= -planCurvThreshold & slope > slopeThreshold) {              output.setValue(row,col,1);            } else             if (profCurv < -profCurvThreshold && planCurv > planCurvThreshold && slope > slopeThreshold) {              output.setValue(row,col,2);            } else             if (profCurv > profCurvThreshold && planCurv <= planCurvThreshold && slope > slopeThreshold) {              output.setValue(row,col,3);            } else             if (profCurv > profCurvThreshold && planCurv > planCurvThreshold && slope > slopeThreshold) {              output.setValue(row,col,4);            } else             if (profCurv >= -profCurvThreshold && profCurv < profCurvThreshold && slope > slopeThreshold && planCurv <= -planCurvThreshold) {              output.setValue(row,col,5);            } else             if (profCurv >= -profCurvThreshold && profCurv < profCurvThreshold && slope > slopeThreshold && planCurv > planCurvThreshold) {              output.setValue(row,col,6);            } else             if (slope <= slopeThreshold) {              output.setValue(row,col,7);            } else {              output.setValue(row,col,noData);            }          } else {            output.setValue(row,col,noData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);    String retstr="LANDFORM CLASSIFICATION KEY\n";    retstr+="\nValue:\tClass";    retstr+="\n1\tConvergent Footslope";    retstr+="\n2\tDivergent Footslope";    retstr+="\n3\tConvergent Shoulder";    retstr+="\n4\tDivergent Shoulder";    retstr+="\n5\tConvergent Backslope";    retstr+="\n6\tDivergent Backslope";    retstr+="\n7\tLevel";    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void removeFromTag(){  parameters.delete(ParameterNames.FROM_TAG);}  }
class C{  public SVGOMFontFaceElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public ArrayBackedByteBuffer(final byte[] buf){  this(buf,0,0,(buf == null ? 0 : buf.length));}  }
class C{  public void reloadConf(){  long now=System.currentTimeMillis();  confReloadInProgress=true;  confReloadLastCheck=now;  log.debug("starting conf reload check");  long confFileCurrentTime=getConfFileLastModified();  if (confLastLoad < confFileCurrentTime) {    confLastLoad=System.currentTimeMillis();    log.info("conf file modified since last load, reloading");    try {      loadUrlRewriterLocal();    } catch (    Exception ex) {      log.error("Error in reloading the conf file. No rules to be applied for subsequent requests.",ex);    }  } else {    log.debug("conf is not modified");  }  confReloadInProgress=false;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void destroy(DistributedRegion r){  QueuedRegionData qrd=null;synchronized (this.regionMap) {    qrd=(QueuedRegionData)this.regionMap.remove(r);  }  if (qrd != null) {    qrd.destroy(r);  }}  }
class C{  public EsriPlugIn(String name,URL dbf,URL shp,URL shx){  this.dbf=dbf.toString();  this.shp=shp.toString();  this.shx=shx.toString();  _list=getGeometry(shp);  _model=getDbfTableModel(dbf);  _list.putAttribute(DBF_ATTRIBUTE,_model);  this.name=name;}  }
class C{  public static ArrayBasedEscaperMap create(Map<Character,String> replacements){  return new ArrayBasedEscaperMap(createReplacementArray(replacements));}  }
class C{  private static char[] createCharArray(final char c,final int count){  if (count <= 0) {    return new char[0];  }  final char[] result=new char[count];  Arrays.fill(result,0,result.length,c);  return result;}  }
class C{  @SuppressWarnings("UnusedReturnValue") public int deleteNoteAndSync(long id){  SQLiteDatabase db=this.getWritableDatabase();  ContentValues values=new ContentValues();  values.put(key_status,DBStatus.LOCAL_DELETED.getTitle());  int i=db.update(table_notes,values,key_id + " = ?",new String[]{String.valueOf(id)});  db.close();  getNoteServerSyncHelper().scheduleSync(true);  return i;}  }
class C{  public float remove(int offset){  float old=get(offset);  remove(offset,1);  return old;}  }
class C{  private static void createNetwork(Scenario scenario){  Network network=scenario.getNetwork();  NetworkFactory fac=network.getFactory();  Node node1=fac.createNode(Id.createNodeId(1),new Coord(-100.0,1.0));  Node node2=fac.createNode(Id.createNodeId(2),new Coord(100.0,1.0));  Node node3=fac.createNode(Id.createNodeId(3),new Coord(0.0,10.0));  Node node4=fac.createNode(Id.createNodeId(4),new Coord(-10.0,100.0));  network.addNode(node1);  network.addNode(node2);  network.addNode(node3);  network.addNode(node4);  Link link12=fac.createLink(Id.createLinkId("1_2"),node1,node2);  Link link21=fac.createLink(Id.createLinkId("2_1"),node2,node1);  Link link34=fac.createLink(Id.createLinkId("3_4"),node3,node4);  Link link43=fac.createLink(Id.createLinkId("4_3"),node4,node3);  Link link41=fac.createLink(Id.createLinkId("4_1"),node4,node1);  Link link14=fac.createLink(Id.createLinkId("1_4"),node1,node4);  Link link23=fac.createLink(Id.createLinkId("2_3"),node2,node3);  Link link32=fac.createLink(Id.createLinkId("3_2"),node3,node2);  network.addLink(link12);  network.addLink(link21);  network.addLink(link34);  network.addLink(link43);  network.addLink(link41);  network.addLink(link14);  network.addLink(link23);  network.addLink(link32);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  CharacterData entText;  EntityReference entReference;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entReference);  entText=(CharacterData)entReference.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      entText.insertData(1,"newArg");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public StoreMessageCommand(String source,String target,String message,String messagetype){  this.source=source;  this.target=target;  this.message=message;  this.messagetype=messagetype;}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  @DSComment("ViewAnimator, check callbacks modeled") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:26.369 -0500",hash_original_method="F846DD3340718784FB63764FD5BBF0F3",hash_generated_method="F7A27E564FD03DC11A20DB63764AFE91") @android.view.RemotableViewMethod public void showPrevious(){  setDisplayedChild(mWhichChild - 1);}  }
class C{  private void checkBucketName(String name) throws InvalidBucketNameException {  if (name == null) {    throw new InvalidBucketNameException(NULL_STRING,"null bucket name");  }  if (name.length() < 3 || name.length() > 63) {    String msg="bucket name must be at least 3 and no more than 63 characters long";    throw new InvalidBucketNameException(name,msg);  }  if (name.matches("\\.\\.")) {    String msg="bucket name cannot contain successive periods. For more information refer " + "http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html";    throw new InvalidBucketNameException(name,msg);  }  if (!name.matches("^[a-z0-9][a-z0-9\\.\\-]+[a-z0-9]$")) {    String msg="bucket name does not follow Amazon S3 standards. For more information refer " + "http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html";    throw new InvalidBucketNameException(name,msg);  }}  }
class C{  public void windowDeiconified(WindowEvent e){}  }
class C{  void unlink(Node<E> p,Node<E> trail){  p.setValue(null);  trail.next=p.next;  if (last == p)   last=trail;  if (count.getAndDecrement() == capacity)   notFull.signal();}  }
class C{  public static Label label(String text){  return new Label(text);}  }
class C{  @Override protected Control createContents(final Composite parent){  final Control composite=super.createContents(parent);  composite.setBackground(IGamaColors.WHITE.color());  return composite;}  }
class C{  public AddModuleScriptCommand(Configuration configuration,String resourcePath,String moduleName,List<String> jarFilePaths,List<String> moduleDependencies){  super(configuration,resourcePath);  this.moduleName=moduleName;  this.jarFilePaths=jarFilePaths;  this.moduleDependencies=moduleDependencies;}  }
class C{  public void subtract(final Number operand){  this.value-=operand.shortValue();}  }
class C{  public void testSortOrder() throws IOException {  Automaton a=new RegExp("((\uD866\uDF05)|\uFB94).*").toAutomaton();  assertAutomatonHits(2,a);}  }
class C{  public double optDouble(String key){  return this.optDouble(key,Double.NaN);}  }
class C{  public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){  final Uri CONTENT_URI=Uri.parse("content://sms/outbox");  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  TickUnits clone=(TickUnits)super.clone();  clone.tickUnits=new java.util.ArrayList(this.tickUnits);  return clone;}  }
class C{  public static DefUseCoverageTestFitness retrieveGoal(Definition def,Use use){  if (!goalMap.containsKey(def))   return null;  if (!goalMap.get(def).containsKey(use))   return null;  return goalMap.get(def).get(use);}  }
class C{  private static void checkNonDebugLabel(final Label label){  Field f=getLabelStatusField();  int status=0;  try {    status=f == null ? 0 : ((Integer)f.get(label)).intValue();  } catch (  IllegalAccessException e) {    throw new Error("Internal error");  }  if ((status & 0x01) != 0) {    throw new IllegalArgumentException("Labels used for debug info cannot be reused for control flow");  }}  }
class C{  public void run(String classname,String[] args) throws Throwable {  Class c=loadClass(classname);  try {    c.getDeclaredMethod("main",new Class[]{String[].class}).invoke(null,new Object[]{args});  } catch (  java.lang.reflect.InvocationTargetException e) {    throw e.getTargetException();  }}  }
class C{  public SampleVcpcRunner(Graph graph,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graph,params,knowledgeBoxModel);}  }
class C{  public BinaryBlockMatrix(DataFrame dataFrame){  this(dataFrame,new MatrixMetadata());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected boolean verboseBackup(){  return false;}  }
class C{  @Override public boolean hasValue(int index){  if (index < 0 || index >= mResourceData.length) {    return false;  }  return mResourceData[index] != null;}  }
class C{  public boolean isClass(){  return ((m_Flags & CLASS) == CLASS);}  }
class C{  public boolean addDominator(int objectId){  return this.dominator.add(objectId);}  }
class C{  public Feature(){  id=random.nextLong();}  }
class C{  private void writeAttr(String name,String val) throws IOException {  writeAttr(name,val,true);}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(Class<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  public String generateReply(JSONArray inputPayload,String registrationId){  JSONObject outerJson=new JSONObject();  JSONArray outerArr=new JSONArray();  try {    outerJson.put(LABEL_REG_ID,registrationId);    outerJson.put(LABEL_DATA,outerArr);  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON Exception - RegId." + e.toString());  }  for (int i=0; i < inputPayload.length(); i++) {    try {      String code=inputPayload.getJSONObject(i).getString(LABEL_CODE);      String messageId=inputPayload.getJSONObject(i).getString(LABEL_MESSAGE_ID);      JSONArray data=inputPayload.getJSONObject(i).getJSONArray(LABEL_DATA);      JSONObject dataArrContents=new JSONObject();      dataArrContents.put(LABEL_CODE,code);      JSONArray innerDataArr=new JSONArray();      JSONObject innerDataOb=new JSONObject();      innerDataOb.put(LABEL_MESSAGE_ID,messageId);      innerDataOb.put(LABEL_DATA,data);      innerDataArr.put(innerDataOb);      dataArrContents.put(LABEL_DATA,innerDataArr);      outerArr.put(dataArrContents);    } catch (    JSONException e) {      Log.d(TAG,"Invalid JSON Exception - Input payload " + e.toString());    }  }  return outerJson.toString();}  }
class C{  public void canStartNewAction(User user,Application application,Locale locale) throws CheckException {  if (user != null && user.getStatus().equals(User.STATUS_NOT_ALLOWED)) {    throw new CheckException("You have launched a backup or a restore operation and it is still performing. Please wait a moment to continue");  }  if (application != null && application.getStatus().equals(Status.PENDING)) {    throw new CheckException(this.messageSource.getMessage("app.pending",null,locale));  }}  }
class C{  public static float readFloat(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return (float)jsonArray.getDouble(index);  }  if (notNull && jsonArray.isNull(index)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));  }  float value=0.0f;  if (!jsonArray.isNull(index)) {    value=(float)jsonArray.getDouble(index);  }  return value;}  }
class C{  @Override public String loadOrGenerateKeys() throws GeneralSecurityException, IOException {  final SecretKeyWrapper wrapper=new SecretKeyWrapper(application,TAG);  if (!keyFile.exists()) {    final byte[] raw=new byte[DATA_KEY_LENGTH];    new SecureRandom().nextBytes(raw);    final SecretKey key=new SecretKeySpec(raw,"AES");    final byte[] wrapped=wrapper.wrap(key);    Utils.writeFully(keyFile,wrapped);  }  final byte[] wrapped=Utils.readFully(keyFile);  final SecretKey key=wrapper.unwrap(wrapped);  return Base64.encodeToString(key.getEncoded(),Base64.DEFAULT);}  }
class C{  public void visitClassType(String name){}  }
class C{  @Override public BufferedImage JPEGToRGBImage(final byte[] data,final int w,final int h,final int pX,final int pY){  return JPEGDecoder.grayJPEGToRGBImage(data,pX,pY);}  }
class C{  public byte[] array(){  return buffer;}  }
class C{  @Override public boolean isImmediate(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.220 -0400",hash_original_method="A41E02D575B1C0C7B40A96A2209ED20C",hash_generated_method="94856C096084B62D0C927E4FAE3932FE") public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {  if (bytes == null) {    return null;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b == ESCAPE_CHAR) {      try {        int u=Character.digit((char)bytes[++i],16);        int l=Character.digit((char)bytes[++i],16);        if (u == -1 || l == -1) {          throw new DecoderException("Invalid quoted-printable encoding");        }        buffer.write((char)((u << 4) + l));      } catch (      ArrayIndexOutOfBoundsException e) {        throw new DecoderException("Invalid quoted-printable encoding");      }    } else {      buffer.write(b);    }  }  return buffer.toByteArray();}  }
class C{  public SearchSourceBuilder from(int from){  this.from=from;  return this;}  }
class C{  public int[][] generateAllDistinctSets(int n,int p) throws Exception {  int numSets;  try {    numSets=MathsUtils.numOfSets(n,p);  } catch (  Exception e) {    throw new Exception("nCp too large");  }  int[][] sets=new int[numSets][p];  int[] workingSet=new int[p];  addToDistinctSets(sets,n,p,0,workingSet,0,0);  return sets;}  }
class C{  protected OMGraphic createPolygon(MysqlPolygon myPoly){  Vector v=myPoly.getRings();  int size=v.size();  OMGraphic ret=null;  OMPoly ompoly=null;  OMGraphicList subList=null;  if (size > 1) {    subList=new OMGraphicList();    ret=subList;  }  for (int i=0; i < size; i++) {    ompoly=new OMPoly((double[])v.elementAt(i),OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_STRAIGHT);    drawingAttributes.setTo(ompoly);    if (subList != null) {      subList.add(ompoly);    } else {      ret=ompoly;    }  }  return ret;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'FEED_SOURCE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'TITLE' TEXT NOT NULL ,"+ "'URL' TEXT,"+ "'DATE' INTEGER,"+ "'LINK' TEXT,"+ "'FAVICON' TEXT,"+ "'DESCRIPTION' TEXT,"+ "'RESERVED' TEXT,"+ "'FEED_ACCOUNT_ID' INTEGER NOT NULL );");}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  public boolean retryable(){  return this.retryable;}  }
class C{  private static void drawDashLine(GC gc,int x1,int y1,int x2,int y2,int tickLength,int spaceLength,int lineWidth){  if (x1 != x2 && y1 != y2) {    throw new IllegalArgumentException("Must satisfy either 'x1 == x2' or 'y1 == y2'");  }  if (x1 == x2) {    int times=Math.abs(y1 - y2) / (tickLength + spaceLength);    for (int i=0; i < times; i++) {      gc.drawLine(x1,i * (tickLength + spaceLength),x2,i * (tickLength + spaceLength) + tickLength);    }    int remainder=Math.abs(y1 - y2) % (tickLength + spaceLength);    if (remainder > 0) {      int length=remainder < tickLength ? remainder : tickLength;      gc.drawLine(x1,times * (tickLength + spaceLength),x2,times * (tickLength + spaceLength) + length);    }  } else {    int times=Math.abs(x1 - x2) / (tickLength + spaceLength);    for (int i=0; i < times; i++) {      gc.drawLine(i * (tickLength + spaceLength),y1,i * (tickLength + spaceLength) + tickLength,y2);    }    int remainder=Math.abs(x1 - x2) % (tickLength + spaceLength);    if (remainder > 0) {      int length=remainder < tickLength ? remainder : tickLength;      gc.drawLine(times * (tickLength + spaceLength),y1,times * (tickLength + spaceLength) + length,y2);    }  }}  }
class C{  private synchronized @Nullable Platform findMostPreferred(Capability capability){  Platform preferred=null;  Preference highest=null;  for (  Platform platform : platforms) {    Preference preference=platform.getCapabilities().get(capability);    if (preference != null && (highest == null || preference.isPreferredOver(highest))) {      preferred=platform;      highest=preference;    }  }  return preferred;}  }
class C{  protected boolean reclassifyDevice(Device device){  if (device == null) {    logger.debug("In reclassify for null device");    return false;  }  boolean needToReclassify=false;  for (  Entity entity : device.entities) {    IEntityClass entityClass=this.entityClassifier.classifyEntity(entity);    if (entityClass == null || device.getEntityClass() == null) {      needToReclassify=true;      break;    }    if (!entityClass.getName().equals(device.getEntityClass().getName())) {      needToReclassify=true;      break;    }  }  if (needToReclassify == false) {    return false;  }  cntDeviceReclassifyDelete.increment();  LinkedList<DeviceUpdate> deviceUpdates=new LinkedList<DeviceUpdate>();  this.deleteDevice(device);  deviceUpdates.add(new DeviceUpdate(device,DeviceUpdate.Change.DELETE,null));  if (!deviceUpdates.isEmpty())   processUpdates(deviceUpdates);  for (  Entity entity : device.entities) {    this.learnDeviceByEntity(entity);  }  debugEventService.flushEvents();  return true;}  }
class C{  public static void filledSquare(double x,double y,double halfLength){  if (!(halfLength >= 0))   throw new IllegalArgumentException("half length must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfLength);  double hs=factorY(2 * halfLength);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public void copyMetaDataFrom(EncodedImage encodedImage){  mImageFormat=encodedImage.getImageFormat();  mWidth=encodedImage.getWidth();  mHeight=encodedImage.getHeight();  mRotationAngle=encodedImage.getRotationAngle();  mSampleSize=encodedImage.getSampleSize();  mStreamSize=encodedImage.getSize();  mEncodedCacheKey=encodedImage.getEncodedCacheKey();}  }
class C{  protected static String quote(String s){  return StringUtils.quoteJavaString(s);}  }
class C{  public void onUnswap(String spaceName,CacheObject key,CacheObject val) throws IgniteCheckedException {  if (log.isDebugEnabled())   log.debug("Unswap [space=" + spaceName + ", key="+ key+ ", val="+ val+ "]");  if (ctx.indexing().enabled()) {    CacheObjectContext coctx=cacheObjectContext(spaceName);    ctx.indexing().onUnswap(spaceName,key.value(coctx,false),val.value(coctx,false));  }  if (idx == null)   return;  if (!busyLock.enterBusy())   throw new IllegalStateException("Failed to process swap event (grid is stopping).");  try {    idx.onUnswap(spaceName,key,val);  }  finally {    busyLock.leaveBusy();  }}  }
class C{  public static DynamicSchema parseFrom(InputStream schemaDescIn) throws DescriptorValidationException, IOException {  try {    int len;    byte[] buf=new byte[4096];    ByteArrayOutputStream baos=new ByteArrayOutputStream();    while ((len=schemaDescIn.read(buf)) > 0)     baos.write(buf,0,len);    return parseFrom(baos.toByteArray());  }  finally {    schemaDescIn.close();  }}  }
class C{  public void evaluate(DataStatusEvent e){  tabList.setItems(tabLabelList);  super.evaluate(e);}  }
class C{  public static MosaicDefinition createMosaicDefinition(final Account creator){  return createMosaicDefinition(creator,Utils.createMosaicId("alice.vouchers","alice's gift vouchers"),createMosaicProperties());}  }
class C{  private List<ObjectType> typeSection(String definitionName,Model model,MarkupDocBuilder docBuilder){  List<ObjectType> inlineDefinitions=new ArrayList<>();  Type modelType=ModelUtils.resolveRefType(ModelUtils.getType(model,globalContext.getSwagger().getDefinitions(),new DefinitionDocumentResolverFromDefinition()));  if (!(modelType instanceof ObjectType)) {    modelType=createInlineType(modelType,definitionName,definitionName + " " + "inline",inlineDefinitions);  }  if (modelType instanceof ObjectType) {    ObjectType objectType=(ObjectType)modelType;    MarkupDocBuilder typeInfos=copyMarkupDocBuilder();switch (objectType.getPolymorphism().getNature()) {case COMPOSITION:      typeInfos.italicText(POLYMORPHISM_COLUMN).textLine(COLON + POLYMORPHISM_NATURE.get(objectType.getPolymorphism().getNature()));    break;case INHERITANCE:  typeInfos.italicText(POLYMORPHISM_COLUMN).textLine(COLON + POLYMORPHISM_NATURE.get(objectType.getPolymorphism().getNature()));typeInfos.italicText(DISCRIMINATOR_COLUMN).textLine(COLON + objectType.getPolymorphism().getDiscriminator());break;case NONE:if (ALWAYS_DISPLAY_DISCRIMINATOR) {if (StringUtils.isNotBlank(objectType.getPolymorphism().getDiscriminator())) typeInfos.italicText(DISCRIMINATOR_COLUMN).textLine(COLON + objectType.getPolymorphism().getDiscriminator());}default :break;}String typeInfosString=typeInfos.toString();if (StringUtils.isNotBlank(typeInfosString)) docBuilder.paragraph(typeInfosString,true);inlineDefinitions.addAll(buildPropertiesTable(((ObjectType)modelType).getProperties(),definitionName,new DefinitionDocumentResolverFromDefinition(),docBuilder));} else if (modelType != null) {MarkupDocBuilder typeInfos=copyMarkupDocBuilder();typeInfos.italicText(TYPE_COLUMN).textLine(COLON + modelType.displaySchema(docBuilder));docBuilder.paragraph(typeInfos.toString());}return inlineDefinitions;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(ELEV);  builder.addAttribute(LABEL);  builder.addAttribute(LAT);  builder.addAttribute(LON);  builder.addAttribute(TIME);}  }
class C{  private void replaceOpenEditorAction(CompositeActionGroup actionGroup,GWTOpenEditorActionGroup newAction) throws Exception {  Field groupsField=CompositeActionGroup.class.getDeclaredField("fGroups");  groupsField.setAccessible(true);  ActionGroup[] actionGroups=(ActionGroup[])groupsField.get(actionGroup);  for (int i=0; i < actionGroups.length; i++) {    if (actionGroups[i] instanceof OpenEditorActionGroup) {      actionGroups[i]=newAction;      return;    }  }  throw new Exception("No existing OpenEditorActionGroup found");}  }
class C{  public static String convertTasksToCsv(List<TaskHandle> tasks,DateTime now,String columns){  String header=String.format("1,%s,%d\n%s\n",now,tasks.size(),columns);  StringBuilder csv=new StringBuilder(header);  for (  TaskHandle task : checkNotNull(tasks)) {    String payload=new String(task.getPayload());    if (!Strings.isNullOrEmpty(payload)) {      csv.append(payload).append("\n");    }  }  return csv.toString();}  }
class C{  public static LSOutput createLSOutput(DOMImplementationLS impl,OutputStream os,String encoding){  LSOutput out=impl.createLSOutput();  if (os != null) {    out.setByteStream(os);  }  if (encoding != null) {    out.setEncoding(encoding);  }  return out;}  }
class C{  static String formatPrice(Context context,long priceMicros){  return context.getString(R.string.price_format,priceMicros / 1000000d);}  }
class C{  public void encode(byte aBuffer[],OutputStream aStream) throws IOException {  ByteArrayInputStream inStream=new ByteArrayInputStream(aBuffer);  encode(inStream,aStream);}  }
class C{  private void processNamelessParameters(VCardParameters parameters){  List<String> namelessValues=parameters.removeAll(null);  for (  String value : namelessValues) {    String name=guessParameterName(value);    parameters.put(name,value);  }}  }
class C{  public void testExecuteNullRunnable(){  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    try {      @SuppressWarnings("unused") Future<?> future=e.submit((Runnable)null);      shouldThrow();    } catch (    NullPointerException success) {    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("DaoStatRow[");  buffer.append("FrId = ").append(m_fdrId);  buffer.append(", ArchId = ").append(m_archId);  buffer.append(", Stat = ").append(m_stat);  buffer.append(", UserId = ").append(m_userId);  buffer.append(", TimeStamp = ").append(m_ts);  buffer.append(", Flags = ").append(m_flags);  buffer.append("]");  return buffer.toString();}  }
class C{  public long when(){  return m_when;}  }
class C{  private void onActionDown(MotionEvent event){switch (this.mode) {case DRAW:case ERASER:    if ((this.drawer != Drawer.QUADRATIC_BEZIER) && (this.drawer != Drawer.QUBIC_BEZIER)) {      this.updateHistory(this.createPath(event));      this.isDown=true;    } else {      if ((this.startX == 0F) && (this.startY == 0F)) {        this.updateHistory(this.createPath(event));      } else {        this.controlX=event.getX();        this.controlY=event.getY();        this.isDown=true;      }    }  break;case TEXT:this.startX=event.getX();this.startY=event.getY();break;default :break;}}  }
class C{  public void testLogWritableNonExistent() throws Exception {  File logDir=new File("testLogWritableNonExistent");  if (logDir.exists()) {    for (    File f : logDir.listFiles()) {      f.delete();    }    logDir.delete();  }  assertFalse("Log dir does not exist",logDir.exists());  DiskLog log=new DiskLog();  log.setReadOnly(false);  log.setLogDir(logDir.getAbsolutePath());  log.prepare();  log.release();  assertTrue("Log dir exists",logDir.exists() && logDir.isDirectory());}  }
class C{  @SuppressWarnings("unchecked") WorkspaceComponent deserializeWorkspaceComponent(final ArchiveContents.ArchivedComponent archivedComponent,final InputStream input){  try {    Class<WorkspaceComponent> clazz=(Class<WorkspaceComponent>)Class.forName(archivedComponent.getClassName());    WorkspaceComponent wc=deserializeWorkspaceComponent(clazz,archivedComponent.getName(),input,null);    componentKeys.put(archivedComponent.getUri(),wc);    wc.setChangedSinceLastSave(false);    return wc;  } catch (  ClassNotFoundException e) {    throw new RuntimeException(e);  }}  }
class C{  public void testStemmers() throws IOException {  assertCorrectOutput("Danish","danish");  assertCorrectOutput("Dutch","dutch");  assertCorrectOutput("English","english");  assertCorrectOutput("Finnish","finnish");  assertCorrectOutput("French","french");  assertCorrectOutput("German","german");  assertCorrectOutput("German2","german2");  assertCorrectOutput("Hungarian","hungarian");  assertCorrectOutput("Italian","italian");  assertCorrectOutput("Kp","kraaij_pohlmann");  assertCorrectOutput("Lovins","lovins");  assertCorrectOutput("Norwegian","norwegian");  assertCorrectOutput("Porter","porter");  assertCorrectOutput("Portuguese","portuguese");  assertCorrectOutput("Romanian","romanian");  assertCorrectOutput("Russian","russian");  assertCorrectOutput("Spanish","spanish");  assertCorrectOutput("Swedish","swedish");  assertCorrectOutput("Turkish","turkish");}  }
class C{  public Date date(){  Date ret;  try {    final String c=this.record.get("date");    if (c == null) {      System.out.println("DEBUG - ERROR: date field missing in wikiBoard");      ret=new Date();    } else {synchronized (SimpleFormatter) {        ret=SimpleFormatter.parse(c);      }    }  } catch (  final ParseException e) {    ret=new Date();  }  return ret;}  }
class C{  public FileLinesBigList(final CharSequence filename,final String encoding,final int bufferSize) throws IOException {  this(filename,encoding,bufferSize,FastBufferedInputStream.ALL_TERMINATORS);}  }
class C{  public Categories addCategories(List<String> categories){  Categories prop=new Categories(categories);  addCategories(prop);  return prop;}  }
class C{  public static ETC1Texture createTexture(InputStream input) throws IOException {  int width=0;  int height=0;  byte[] ioBuffer=new byte[4096];{    if (input.read(ioBuffer,0,ETC1.ETC_PKM_HEADER_SIZE) != ETC1.ETC_PKM_HEADER_SIZE) {      throw new IOException("Unable to read PKM file header.");    }    ByteBuffer headerBuffer=ByteBuffer.allocateDirect(ETC1.ETC_PKM_HEADER_SIZE).order(ByteOrder.nativeOrder());    headerBuffer.put(ioBuffer,0,ETC1.ETC_PKM_HEADER_SIZE).position(0);    if (!ETC1.isValid(headerBuffer)) {      throw new IOException("Not a PKM file.");    }    width=ETC1.getWidth(headerBuffer);    height=ETC1.getHeight(headerBuffer);  }  int encodedSize=ETC1.getEncodedDataSize(width,height);  ByteBuffer dataBuffer=ByteBuffer.allocateDirect(encodedSize).order(ByteOrder.nativeOrder());  for (int i=0; i < encodedSize; ) {    int chunkSize=Math.min(ioBuffer.length,encodedSize - i);    if (input.read(ioBuffer,0,chunkSize) != chunkSize) {      throw new IOException("Unable to read PKM file data.");    }    dataBuffer.put(ioBuffer,0,chunkSize);    i+=chunkSize;  }  dataBuffer.position(0);  return new ETC1Texture(width,height,dataBuffer);}  }
class C{  public IllegalAccessException(java.lang.String s){}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void removeCustomFetchFilter(FetchFilter filter){  validateParameterNonNull(filter,"filter");  this.customFetchFilters.remove(filter);}  }
class C{  private void startDownloadImageActivity(Uri url){  if (url != null) {    if (!mProcessButtonClick)     UiUtils.showToast(this,"Already downloading image " + url); else     if (!URLUtil.isValidUrl(url.toString()))     UiUtils.showToast(this,"Invalid URL " + url.toString()); else {      mProcessButtonClick=false;      final Intent intent=DownloadImageActivity.makeIntent(url);      startActivityForResult(intent,DOWNLOAD_IMAGE_REQUEST);    }  }}  }
class C{  public int size(){  return this.size;}  }
class C{  public static boolean isPortrait(Context c){  return c.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT;}  }
class C{  public boolean removeVolumesFromConsistencyGroup(List<String> virtualVolumeNames,String cgName,boolean deleteCGWhenEmpty) throws VPlexApiException {  s_logger.info("Request to remove volumes from a consistency group on VPlex at {}",_baseURI);  return _cgMgr.removeVolumesFromConsistencyGroup(virtualVolumeNames,cgName,deleteCGWhenEmpty);}  }
class C{  public double pathDistance(final PlanetModel planetModel,final DistanceStyle distanceStyle,final double x,final double y,final double z){  if (!isWithin(x,y,z))   return Double.POSITIVE_INFINITY;  final double perpX=normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;  final double perpY=normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;  final double perpZ=normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;  final double magnitude=Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);  if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)   return distanceStyle.computeDistance(start,x,y,z);  final double normFactor=1.0 / magnitude;  final Plane normalizedPerpPlane=new Plane(perpX * normFactor,perpY * normFactor,perpZ * normFactor,0.0);  final GeoPoint[] intersectionPoints=normalizedConnectingPlane.findIntersections(planetModel,normalizedPerpPlane);  GeoPoint thePoint;  if (intersectionPoints.length == 0)   throw new RuntimeException("Can't find world intersection for point x=" + x + " y="+ y+ " z="+ z); else   if (intersectionPoints.length == 1)   thePoint=intersectionPoints[0]; else {    if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))     thePoint=intersectionPoints[0]; else     if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))     thePoint=intersectionPoints[1]; else     throw new RuntimeException("Can't find world intersection for point x=" + x + " y="+ y+ " z="+ z);  }  return distanceStyle.computeDistance(thePoint,x,y,z) + distanceStyle.computeDistance(start,thePoint.x,thePoint.y,thePoint.z);}  }
class C{  public static String gensalt(){  return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);}  }
class C{  public PrefsV1_5(){}  }
class C{  MiscWindow(SetupManager manager){  super(manager,I18n.tr("Miscellaneous Settings"),I18n.tr("Below, are several options that affect the functionality of FrostWire."));}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  public static OrganizationAlreadyBannedException convertToApi(org.oscm.internal.types.exception.OrganizationAlreadyBannedException oldEx){  return convertExceptionToApi(oldEx,OrganizationAlreadyBannedException.class);}  }
class C{  public XMLContent(InputStream content){  this(new XMLParser().parse(new InputStreamReader(content)));}  }
class C{  public Collection<T> asCollection(){  return this.list;}  }
class C{  @SuppressWarnings("unchecked") public void addControlerListener(final ControlerListener l){  for (  Class type : ClassUtils.getAllTypes(l.getClass())) {    if (ControlerListener.class.isAssignableFrom(type)) {      this.listenerList.add(type,l);    }  }}  }
class C{  public synchronized void flushClass(String classname){  classes.remove(classname);  softcache.remove(classname);}  }
class C{  public static void init(String className){  if (s_engine == null)   s_engine=new SecureEngine(className); else   if (className != null && !className.equals(getClassName())) {    String msg="Requested Security class = " + className + " is not the same as the active class = "+ getClassName()+ "\nMake sure to set the security class in the start script";    log.severe(msg);    System.err.println(msg);    System.exit(10);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int read(char cbuf[],int off,int len) throws IOException {synchronized (lock) {    ensureOpen();    if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {      throw new IndexOutOfBoundsException();    } else     if (len == 0) {      return 0;    }    if (next >= length)     return -1;    int n=Math.min(length - next,len);    str.getChars(next,next + n,cbuf,off);    next+=n;    return n;  }}  }
class C{  private void body(TagData data,Body body,boolean parseExpression,ExprTransformer transformer) throws TemplateException {  boolean parseLiteral=true;  comment(data.srcCode,false);  if (data.srcCode.isCurrent('<')) {    if (data.srcCode.isNext('/')) {      return;    }    parseLiteral=!tag(data,body,parseExpression);  }  if (parseLiteral) {    literal(data,body,parseExpression,transformer);  }  if (data.srcCode.isValidIndex())   body(data,body,parseExpression,transformer);}  }
class C{  private void updatePortsWithNewPortsByNumber(Map<Short,ImmutablePort> newPortsByNumber){  if (!lock.writeLock().isHeldByCurrentThread()) {    throw new IllegalStateException("Method called without " + "holding writeLock");  }  Map<String,ImmutablePort> newPortsByName=new HashMap<String,ImmutablePort>();  List<ImmutablePort> newPortList=new ArrayList<ImmutablePort>();  List<ImmutablePort> newEnabledPortList=new ArrayList<ImmutablePort>();  List<Short> newEnabledPortNumbers=new ArrayList<Short>();  for (  ImmutablePort p : newPortsByNumber.values()) {    newPortList.add(p);    newPortsByName.put(p.getName().toLowerCase(),p);    if (p.isEnabled()) {      newEnabledPortList.add(p);      newEnabledPortNumbers.add(p.getPortNumber());    }  }  portsByName=Collections.unmodifiableMap(newPortsByName);  portsByNumber=Collections.unmodifiableMap(newPortsByNumber);  enabledPortList=Collections.unmodifiableList(newEnabledPortList);  enabledPortNumbers=Collections.unmodifiableList(newEnabledPortNumbers);  portList=Collections.unmodifiableList(newPortList);}  }
class C{  public void prepareExpression(Session session){  if (defaultExpression != null) {    computeTableFilter=new TableFilter(session,table,null,false,null);    defaultExpression.mapColumns(computeTableFilter,0);    defaultExpression=defaultExpression.optimize(session);  }}  }
class C{  public SoftBevelBorder(int bevelType,Color highlight,Color shadow){  super(bevelType,highlight,shadow);}  }
class C{  private boolean isLikelyNamespace(JSDocInfo doc){  if (doc == null)   return false;  JSTypeExpression type=doc.getType();  if (type != null && type.getRoot().isString() && type.getRoot().getString().equals("Object")) {    return true;  }  return doc.hasConstAnnotation() && !doc.hasType();}  }
class C{  public StackImpl(Collection<T> initialContents){  this();  list.addAll(initialContents);}  }
class C{  public RequestParams(Map<String,String> source){  if (source != null) {    for (    Map.Entry<String,String> entry : source.entrySet()) {      put(entry.getKey(),entry.getValue());    }  }}  }
class C{  @Override public void run(){  ModbusUDPTransport transport;  try {    if (address == null) {      terminal=new UDPSlaveTerminal(InetAddress.getByAddress(new byte[]{0,0,0,0}));    } else {      terminal=new UDPSlaveTerminal(address);    }    terminal.setTimeout(timeout);    terminal.setPort(port);    terminal.activate();    transport=new ModbusUDPTransport(terminal);  } catch (  Exception e) {    error=String.format("Cannot start UDP listener - %s",e.getMessage());    listening=false;    return;  }  listening=true;  try {    while (listening) {      handleRequest(transport,this);    }  } catch (  ModbusIOException ex1) {    if (!ex1.isEOF()) {      logger.error("Exception occurred before EOF while handling request",ex1);    }  } finally {    try {      terminal.deactivate();      transport.close();    } catch (    Exception ex) {    }  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void removeSuit(ArmorSlot armorSlot){  if (!suitMap.containsKey(armorSlot)) {    suitMap.put(armorSlot,null);    return;  }  if (suitMap.get(armorSlot) == null) {    return;  }  suitMap.get(armorSlot).clear();  suitMap.put(armorSlot,null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DocumentType docType=null;  DOMImplementation domImpl;  Element element;  Element elementTest;  Element elementDoc;  Attr attribute;  Node setNode;  Node appendedChild;  NodeList elementList;  boolean hasAttributes;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","test",docType);  element=newDoc.createElementNS("http://www.w3.org/DOM/Test","dom:elem");  attribute=newDoc.createAttribute("attr");  setNode=element.setAttributeNode(attribute);  elementDoc=newDoc.getDocumentElement();  appendedChild=elementDoc.appendChild(element);  elementList=newDoc.getElementsByTagNameNS("http://www.w3.org/DOM/Test","elem");  elementTest=(Element)elementList.item(0);  hasAttributes=elementTest.hasAttributes();  assertTrue("nodehasattributes04",hasAttributes);}  }
class C{  private CTypeResultsHighlighter(){}  }
class C{  public PreOrderTraversal(Visitor visitor){  super(visitor);}  }
class C{  public boolean wasNull() throws SQLException {  return this.wasNullFlag;}  }
class C{  public static long nextLong(final long startInclusive,final long endExclusive){  Validate.isTrue(endExclusive >= startInclusive,"Start value must be smaller or equal to end value.");  Validate.isTrue(startInclusive >= 0,"Both range values must be non-negative.");  if (startInclusive == endExclusive) {    return startInclusive;  }  return (long)nextDouble(startInclusive,endExclusive);}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  @Override public boolean hasWindowFocus(){  return mHijackFocus || super.hasWindowFocus();}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    System.arraycopy(mKeys,i + 1,mKeys,i,mSize - (i + 1));    System.arraycopy(mValues,i + 1,mValues,i,mSize - (i + 1));    mSize--;  }}  }
class C{  public boolean isStackOverflow(){  return trapCode == RuntimeEntrypoints.TRAP_STACK_OVERFLOW;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  String nl=System.getProperty("line.separator");  buf.append("              Version: ").append(this.getVersion()).append(nl);  buf.append("             IssuerDN: ").append(this.getIssuerDN()).append(nl);  buf.append("          This update: ").append(this.getThisUpdate()).append(nl);  buf.append("          Next update: ").append(this.getNextUpdate()).append(nl);  buf.append("  Signature Algorithm: ").append(this.getSigAlgName()).append(nl);  byte[] sig=this.getSignature();  buf.append("            Signature: ").append(new String(Hex.encode(sig,0,20))).append(nl);  for (int i=20; i < sig.length; i+=20) {    if (i < sig.length - 20) {      buf.append("                       ").append(new String(Hex.encode(sig,i,20))).append(nl);    } else {      buf.append("                       ").append(new String(Hex.encode(sig,i,sig.length - i))).append(nl);    }  }  Extensions extensions=c.getTBSCertList().getExtensions();  if (extensions != null) {    Enumeration e=extensions.oids();    if (e.hasMoreElements()) {      buf.append("           Extensions: ").append(nl);    }    while (e.hasMoreElements()) {      ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)e.nextElement();      Extension ext=extensions.getExtension(oid);      if (ext.getExtnValue() != null) {        byte[] octs=ext.getExtnValue().getOctets();        ASN1InputStream dIn=new ASN1InputStream(octs);        buf.append("                       critical(").append(ext.isCritical()).append(") ");        try {          if (oid.equals(Extension.cRLNumber)) {            buf.append(new CRLNumber(ASN1Integer.getInstance(dIn.readObject()).getPositiveValue())).append(nl);          } else           if (oid.equals(Extension.deltaCRLIndicator)) {            buf.append("Base CRL: " + new CRLNumber(ASN1Integer.getInstance(dIn.readObject()).getPositiveValue())).append(nl);          } else           if (oid.equals(Extension.issuingDistributionPoint)) {            buf.append(IssuingDistributionPoint.getInstance(dIn.readObject())).append(nl);          } else           if (oid.equals(Extension.cRLDistributionPoints)) {            buf.append(CRLDistPoint.getInstance(dIn.readObject())).append(nl);          } else           if (oid.equals(Extension.freshestCRL)) {            buf.append(CRLDistPoint.getInstance(dIn.readObject())).append(nl);          } else {            buf.append(oid.getId());            buf.append(" value = ").append(ASN1Dump.dumpAsString(dIn.readObject())).append(nl);          }        } catch (        Exception ex) {          buf.append(oid.getId());          buf.append(" value = ").append("*****").append(nl);        }      } else {        buf.append(nl);      }    }  }  Set set=getRevokedCertificates();  if (set != null) {    Iterator it=set.iterator();    while (it.hasNext()) {      buf.append(it.next());      buf.append(nl);    }  }  return buf.toString();}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=this.opt(key);  if (value == null) {    this.put(key,1);  } else   if (value instanceof Integer) {    this.put(key,((Integer)value).intValue() + 1);  } else   if (value instanceof Long) {    this.put(key,((Long)value).longValue() + 1);  } else   if (value instanceof Double) {    this.put(key,((Double)value).doubleValue() + 1);  } else   if (value instanceof Float) {    this.put(key,((Float)value).floatValue() + 1);  } else {    throw new JSONException("Unable to increment [" + quote(key) + "].");  }  return this;}  }
class C{  void unbindCustomTabsService(Activity activity){  if (mConnection == null) {    return;  }  activity.unbindService(mConnection);  mClient=null;  mCustomTabsSession=null;  mConnection=null;}  }
class C{  public void validateBackendVolumesForVPlexVolume(String virtualVolumeName,String virtualVolumePath,Map<String,List<VolumeInfo>> nativeVolumeInfoMap) throws VPlexApiException {  s_logger.info("Validating backend volumes for VPLEX volume {}",virtualVolumeName);  VPlexVirtualVolumeInfo vvInfo=findVirtualVolume(virtualVolumeName,virtualVolumePath);  if (vvInfo == null) {    s_logger.error("Could not find VPLEX volume {} to validate its backend volumes",virtualVolumeName);    throw VPlexApiException.exceptions.couldNotFindVolumeForValidation(virtualVolumeName);  }  String supportingDeviceName=vvInfo.getSupportingDevice();  if ((supportingDeviceName == null) || (supportingDeviceName.isEmpty())) {    s_logger.error("VPLEX volume {} does not specify a supporting device",virtualVolumeName);    throw VPlexApiException.exceptions.noSupportingDeviceForValidation(virtualVolumeName);  }  String locality=vvInfo.getLocality();  Set<String> clusterNames=nativeVolumeInfoMap.keySet();  if (((VPlexVirtualVolumeInfo.Locality.distributed.name().equals(locality)) && (clusterNames.size() != 2)) || ((VPlexVirtualVolumeInfo.Locality.local.name().equals(locality)) && (clusterNames.size() != 1))) {    s_logger.error("Invalid native volume information passed for validation of VPLEX volume {}",virtualVolumeName);    throw VPlexApiException.exceptions.invalidVolumeInfoForValidation(virtualVolumeName,locality);  }  List<VPlexClusterInfo> clusterInfoList=getClusterInfoDetails();  Iterator<String> clusterNameIter=clusterNames.iterator();  while (clusterNameIter.hasNext()) {    String clusterName=clusterNameIter.next();    s_logger.info("Validating backend volumes on cluster {}",clusterName);    List<VolumeInfo> nativeVolumeInfoList=nativeVolumeInfoMap.get(clusterName);    List<VPlexStorageVolumeInfo> expectedStorageVolumeInfoList=new ArrayList<>();    for (    VPlexClusterInfo clusterInfo : clusterInfoList) {      if (clusterInfo.getName().equals(clusterName)) {        for (        VolumeInfo nativeVolumeInfo : nativeVolumeInfoList) {          VPlexStorageVolumeInfo expectedStorageVolumeInfo=clusterInfo.getStorageVolume(nativeVolumeInfo);          if (expectedStorageVolumeInfo != null) {            expectedStorageVolumeInfoList.add(expectedStorageVolumeInfo);          }        }      }    }    if (expectedStorageVolumeInfoList.size() != nativeVolumeInfoList.size()) {      s_logger.error("Did not find all expected backend volumes for VPLEX volume {}",virtualVolumeName);      throw VPlexApiException.exceptions.failFindingExpectedBackendVolumesForValidation(virtualVolumeName,nativeVolumeInfoList.size(),expectedStorageVolumeInfoList.size());    }    boolean hasMirror=(nativeVolumeInfoList.size() == 2);    List<VPlexStorageVolumeInfo> actualStorageVolumeInfoList=_discoveryMgr.getBackendVolumesForDeviceOnCluster(supportingDeviceName,locality,clusterName,hasMirror);    for (    VPlexStorageVolumeInfo expectedStorageVolumeInfo : expectedStorageVolumeInfoList) {      boolean volumeMatch=false;      String expectedStorageVolumeName=expectedStorageVolumeInfo.getName();      for (      VPlexStorageVolumeInfo actualStorageVolumeInfo : actualStorageVolumeInfoList) {        String actualStorageVolumeName=actualStorageVolumeInfo.getName();        if (expectedStorageVolumeName.equalsIgnoreCase(actualStorageVolumeName)) {          s_logger.info("Validated backend volume {}",expectedStorageVolumeName);          volumeMatch=true;          break;        }      }      if (!volumeMatch) {        s_logger.error("Failed to validate storage volume {}",expectedStorageVolumeName);        throw VPlexApiException.exceptions.storageVolumeFailedValidation(virtualVolumeName,expectedStorageVolumeName);      }    }  }}  }
class C{  void finishClass(JCClassDecl tree,Env<AttrContext> env){  if ((tree.mods.flags & Flags.ENUM) != 0 && (types.supertype(tree.sym.type).tsym.flags() & Flags.ENUM) == 0) {    addEnumMembers(tree,env);  }  memberEnter(tree.defs,env);}  }
class C{  public static void recycle(Bitmap bitmap){  if (bitmap == null || bitmap.isRecycled()) {    return;  }  bitmap.recycle();}  }
class C{  @RequestMapping(value="/businessObjectFormats/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}" + "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}" + "/businessObjectFormatVersions/{businessObjectFormatVersion}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_FORMATS_DELETE) public BusinessObjectFormat deleteBusinessObjectFormat(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion){  BusinessObjectFormatKey businessObjectFormatKey=new BusinessObjectFormatKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion);  return businessObjectFormatService.deleteBusinessObjectFormat(businessObjectFormatKey);}  }
class C{  public static PaymentFragment newInstance(String token,boolean isSelector,Card selectedCardForCheckout){  PaymentFragment fragment=new PaymentFragment();  Bundle args=new Bundle();  args.putString(USER_TOKEN,token);  args.putBoolean(IS_SELECTOR,isSelector);  args.putSerializable(SELECTED_CARD_FOR_CHECKOUT,selectedCardForCheckout);  fragment.setArguments(args);  return fragment;}  }
class C{  public QueryStringQueryBuilder lenient(Boolean lenient){  this.lenient=lenient;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.071 -0500",hash_original_method="119B944BAA4C5EE6E8AB8C1C74A61B19",hash_generated_method="A8E9502B09A98175D880412D3ACED0A2") public HttpResponse execute(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws IOException, HttpException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (conn == null) {    throw new IllegalArgumentException("Client connection may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  try {    HttpResponse response=doSendRequest(request,conn,context);    if (response == null) {      response=doReceiveResponse(request,conn,context);    }    return response;  } catch (  IOException ex) {    conn.close();    throw ex;  }catch (  HttpException ex) {    conn.close();    throw ex;  }catch (  RuntimeException ex) {    conn.close();    throw ex;  }}  }
class C{  public void zoomOut(){  Matrix save=mViewPortHandler.zoomOut(getWidth() / 2f,-(getHeight() / 2f));  mViewPortHandler.refresh(save,this,true);}  }
class C{  protected boolean sameContent(Element element1,Element element2){  List<Content> content1=getContentExceptComments(element1);  List<Content> content2=getContentExceptComments(element2);  if (content1.size() != content2.size()) {    return false;  }  for (int i=0; i < content1.size(); i++) {    String content1Value=content1.get(i).getValue();    String content2Value=content2.get(i).getValue();    if (content1Value == null || content2Value == null) {      return content1Value == content2Value;    }    if (!content1Value.equals(content2Value)) {      return false;    }  }  return true;}  }
class C{  public synchronized void deleteRR(Record r){  if (rrs.remove(r) && (r instanceof RRSIGRecord))   nsigs--;}  }
class C{  E emitField(String name,@Nullable String value){  stringBuilder.append(cleanse(name)).append(':');  if (!isNullOrEmpty(value)) {    stringBuilder.append(' ').append(cleanse(value));  }  return emitNewline();}  }
class C{  public com.lynden.gmapsfx.shapes.PolylineOptions convert(){  return options;}  }
class C{  @SafeVarargs private static Map<Pattern,Pass> asMap(final Map.Entry<Pattern,Pass>... entries){  final Map<Pattern,Pass> map=new HashMap<>(entries.length);  for (  final Map.Entry<Pattern,Pass> ent : entries) {    map.put(ent.getKey(),ent.getValue());  }  return map;}  }
class C{  public String invoice(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_Invoice_ID=(Integer)value;  if (isCalloutActive() || C_Invoice_ID == null || C_Invoice_ID.intValue() == 0)   return "";  mTab.setValue("C_Order_ID",null);  mTab.setValue("C_Charge_ID",null);  mTab.setValue("IsPrepayment",Boolean.FALSE);  mTab.setValue("DiscountAmt",Env.ZERO);  mTab.setValue("WriteOffAmt",Env.ZERO);  mTab.setValue("OverUnderAmt",Env.ZERO);  int C_InvoicePaySchedule_ID=0;  if (Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"C_Invoice_ID") == C_Invoice_ID.intValue() && Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"C_InvoicePaySchedule_ID") != 0) {    C_InvoicePaySchedule_ID=Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"C_InvoicePaySchedule_ID");  }  Timestamp ts=(Timestamp)mTab.getValue("DateTrx");  if (ts == null)   ts=new Timestamp(System.currentTimeMillis());  String sql="SELECT C_BPartner_ID,C_Currency_ID," + " invoiceOpen(C_Invoice_ID, ?)," + " invoiceDiscount(C_Invoice_ID,?,?), IsSOTrx "+ "FROM C_Invoice WHERE C_Invoice_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_InvoicePaySchedule_ID);    pstmt.setTimestamp(2,ts);    pstmt.setInt(3,C_InvoicePaySchedule_ID);    pstmt.setInt(4,C_Invoice_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      mTab.setValue("C_BPartner_ID",new Integer(rs.getInt(1)));      int C_Currency_ID=rs.getInt(2);      mTab.setValue("C_Currency_ID",new Integer(C_Currency_ID));      BigDecimal InvoiceOpen=rs.getBigDecimal(3);      if (InvoiceOpen == null)       InvoiceOpen=Env.ZERO;      BigDecimal DiscountAmt=rs.getBigDecimal(4);      if (DiscountAmt == null)       DiscountAmt=Env.ZERO;      mTab.setValue("PayAmt",InvoiceOpen.subtract(DiscountAmt));      mTab.setValue("DiscountAmt",DiscountAmt);      Env.setContext(ctx,WindowNo,"C_Invoice_ID",C_Invoice_ID.toString());      mTab.setValue("C_Invoice_ID",C_Invoice_ID);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);  }  return docType(ctx,WindowNo,mTab,mField,value);}  }
class C{  public BubbleChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);}  }
class C{  private UniqueString correctedStepNum(Token t){  String str=t.image;  if (str.substring(1,2).equals("*") || str.substring(1,2).equals("+")) {    int level=getProofLevel();    if ((level < 0) && (proofDepth > 0)) {      level=proofLevelStack[proofDepth - 1];    }    str="<" + level + str.substring(2);  } else {    str="<" + levelOfProofStepLexeme(t) + str.substring(str.indexOf('>'));  }  ;  return UniqueString.uniqueStringOf(str);}  }
class C{  public synchronized void write(String str){  insert(str,outputMark);  int len=str.length();  outputMark+=len;  select(outputMark,outputMark);}  }
class C{  public void updateUI(){  setUI((LabelUI)UIManager.getUI(this));}  }
class C{  public static <E>SortedSet<E> constrainedSortedSet(SortedSet<E> sortedSet,Constraint<? super E> constraint){  return new ConstrainedSortedSet<E>(sortedSet,constraint);}  }
class C{  public boolean isResourceId(){  return resourceId;}  }
class C{  private static String createSupplicantQuery(String uuid,String data){  StringBuffer sb=new StringBuffer();  sb.append("upnp ");  sb.append(String.format("%02x ",VERSION_1_0));  sb.append("uuid:");  sb.append(uuid);  if (data != null) {    sb.append("::");    sb.append(data);  }  return sb.toString();}  }
class C{  public void testAddEjbReferenceDescription() throws Exception {  String xml="<com.ibm.ejs.models.base.bindings.webappbnd:WebAppBinding " + "xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" " + "xmlns:com.ibm.ejs.models.base.bindings.webappbnd=\"webappbnd.xmi\" "+ "xmi:id=\"WebAppBinding_1082390762531\">"+ "</com.ibm.ejs.models.base.bindings.webappbnd:WebAppBinding>";  IbmWebBndXmi descr=IbmWebBndXmiIo.parseIbmWebBndXmi(new ByteArrayInputStream(xml.getBytes("UTF-8")));  EjbRef ref=new EjbRef();  ref.setName("foo");  ref.setJndiName("fee");  descr.addEjbReference(ref);  List<Element> nl=descr.getDocument().getRootElement().getChildren("ejbRefBindings");  Element n=nl.get(0);  assertEquals("fee",n.getAttribute("jndiName").getValue());  assertEquals(1,nl.size());  nl=n.getChildren("bindingEjbRef");  n=(Element)nl.get(0);  assertEquals("WEB-INF/web.xml#foo",n.getAttribute("href").getValue());  assertEquals(1,nl.size());}  }
class C{  private void createIndices() throws AdeException {  ConnectionWrapper.executeDmlDefaultCon("create index message_summaries_by_period_summary_internal_id on " + SQL.MESSAGE_SUMMARIES + " (PERIOD_SUMMARY_INTERNAL_ID)");  ConnectionWrapper.executeDmlDefaultCon("create index ANALYSIS_GROUP_INDEX on " + SQL.SOURCES + " (ANALYSIS_GROUP)");}  }
class C{  public final void testGetPrimeP(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.valueOf(5L),BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE);  assertTrue(BigInteger.valueOf(5L).equals(ks.getPrimeP()));}  }
class C{  public boolean contains(Rect r){  return this.left < this.right && this.top < this.bottom && left <= r.left && top <= r.top && right >= r.right && bottom >= r.bottom;}  }
class C{  public ConstraintVertex(Coordinate p){  super(p);}  }
class C{  @Override public void onFailure(Throwable cause){  LOG.error("Encountered failures on writing record as (lid = {}, eid = {}) :",new Object[]{currentLogSegmentSeqNo,currentEntryId,cause});  errorsFound.set(true);  syncLatch.countDown();}  }
class C{  protected void updateButtons(){  if (manager.hasBack()) {    root.actions.backward.setEnabled(true);  } else {    root.actions.backward.setEnabled(false);  }  if (manager.hasForward()) {    root.actions.forward.setEnabled(true);  } else {    root.actions.forward.setEnabled(false);  }  url.setText(manager.getBaseURL());}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void statistics(CharSequence message){  log(Level.STATISTICS,message);}  }
class C{  public boolean hasPassword(){  return O != null || U != null;}  }
class C{  public NoSuchPaddingException(){  super();}  }
class C{  public CassandraProtos.CassandraConfig toProto(){  CassandraProtos.CassandraConfig.Builder builder=CassandraProtos.CassandraConfig.newBuilder().setJmxPort(jmxPort).setVersion(version).setCpus(cpus).setDiskMb(diskMb).setDiskType(diskType.ordinal()).setMemoryMb(memoryMb).setReplaceIp(replaceIp).setHeap(heap.toProto()).setLocation(location.toProto()).setPublishDiscoveryInfo(publishDiscoveryInfo).setApplication(application.toByteString());  return builder.build();}  }
class C{  public static boolean isRawSuperType(Type type,Type superTypeCandidate){  return isRawSuperType(type,superTypeCandidate,new RecursionGuard<Type>());}  }
class C{  public static void killIOSApp(int processId){  Process p=null;  try {    String[] cmdStop={"ssh","-p","2222","root@localhost","kill",Integer.toString(processId)};    p=Runtime.getRuntime().exec(cmdStop);    p.waitFor();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static void main(String[] args){  try {    Stemming.useStemmer(new SnowballStemmer(),args);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public long readLong() throws IOException {  long v=dataInput.readLong();  offset+=8;  available-=8;  return v;}  }
class C{  public static RegisterSpec make(int reg,TypeBearer type,LocalItem local){  if (local == null) {    throw new NullPointerException("local  == null");  }  return intern(reg,type,local);}  }
class C{  public void add(RegularTimePeriod period,BigDecimal moneyFlowIndex){  if (!this.isEmpty()) {    MoneyFlowIndexItem item0=(MoneyFlowIndexItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new MoneyFlowIndexItem(period,moneyFlowIndex),true);}  }
class C{  public void addBitmapToCache(String data,Bitmap bitmap){  if (data == null || bitmap == null) {    return;  }synchronized (mMemoryCache) {    if (mMemoryCache.get(data) == null) {      VolleyLog.d(TAG,"Memory cache put - " + data);      mMemoryCache.put(data,bitmap);    }  }}  }
class C{  private void loginIn(String user,String pass,int message){  writeTextIntoTextBox(R.id.username_text_input,user);  writeTextIntoTextBox(R.id.password_text_input,pass);  clickId(R.id.login_button);  checkLoginMessage(message);  clickId(R.id.alt_button);  checkIfAtLogin();}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(MiniAdminTest.class);}  }
class C{  public static void throwAtomikosSQLException(String message,Throwable cause) throws AtomikosSQLException {  LOGGER.logWarning(message,cause);  throw new AtomikosSQLException(message,cause);}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  protected void add(Context context,Message message,String text){  Conversation conversation=message.getConversation();  String key=conversation.getId().toString();  long currentPosition=mPositions.getLong(key,Long.MIN_VALUE);  if (message.getPosition() <= currentPosition)   return;  String currentMessages=mMessages.getString(key,null);  try {    JSONObject messages=currentMessages == null ? new JSONObject() : new JSONObject(currentMessages);    String messageKey=message.getId().toString();    if (messages.has(messageKey))     return;    JSONObject messageEntry=new JSONObject();    messageEntry.put(KEY_POSITION,message.getPosition());    messageEntry.put(KEY_TEXT,text);    messages.put(messageKey,messageEntry);    mMessages.edit().putString(key,messages.toString()).commit();  } catch (  JSONException e) {    if (Log.isLoggable(Log.ERROR)) {      Log.e(e.getMessage(),e);    }    return;  }  update(context,conversation,message);}  }
class C{  public void enableMotor(boolean flag){  joint.enableMotor(flag);}  }
class C{  public HomekitRoot createBridge(HomekitAuthInfo authInfo,String label,String manufacturer,String model,String serialNumber) throws IOException {  HomekitRoot root=new HomekitRoot(label,http,localAddress,authInfo);  root.addAccessory(new HomekitBridge(label,serialNumber,model,manufacturer));  return root;}  }
class C{  public Document loadDocument(String uri) throws IOException {  Document ret=checkCache(uri);  if (ret != null)   return ret;  SVGDocument document=documentFactory.createSVGDocument(uri);  DocumentDescriptor desc=documentFactory.getDocumentDescriptor();  DocumentState state=new DocumentState(uri,document,desc);synchronized (cacheMap) {    cacheMap.put(uri,state);  }  return state.getDocument();}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  private void startStream(String[] encode) throws IOException {  if (dictionaryOpen) {    PDFName[] filters=decodeFilters(encode);    if (filters != null)     entry("Filter",filters);    super.close();    dictionaryOpen=false;    out.printPlain("stream\n");    byteCountStream=new CountedByteOutputStream(out);    stream=openFilters(byteCountStream,encode);  }}  }
class C{  public int addEdge(int s,int t){  long key1=getKey(s);  long key2=getKey(t);  Table edges=getEdgeTable();  int r=edges.addRow();  if (m_longKey) {    edges.setLong(r,m_skey,key1);    edges.setLong(r,m_tkey,key2);  } else {    edges.setInt(r,m_skey,(int)key1);    edges.setInt(r,m_tkey,(int)key2);  }  return r;}  }
class C{  public TitlePaneMaximizeButtonPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);}  }
class C{  private static boolean createBooleanSetting(final Map<String,String> rawSettings,final String settingName,final boolean defaultValue){  final String settingString=rawSettings.get(settingName);  if (settingString == null) {    return defaultValue;  } else {    try {      return Boolean.parseBoolean(settingString);    } catch (    final NumberFormatException exception) {      CUtilityFunctions.logException(exception);      return defaultValue;    }  }}  }
class C{  public PostRestoreStateEvent(UIComponent component){  super(component);}  }
class C{  public CAddressSelectionTableModel(final List<INaviModule> modules){  Preconditions.checkNotNull(modules,"IE01175: Modules argument can not be null");  m_modules=new ArrayList<INaviModule>(modules);}  }
class C{  public NumericPrediction(double actual,double predicted){  this(actual,predicted,1);}  }
class C{  public PreDeConModel(int pdim,SetDBIDs ids){  super();  this.pdim=pdim;  this.ids=ids;}  }
class C{  public void openWorkspace(){  SFileChooser simulationChooser=new SFileChooser(workspace.getCurrentDirectory(),"Zip Archive","zip");  File simFile=simulationChooser.showOpenDialog();  if (simFile != null) {    workspace.openWorkspace(simFile);    workspace.setCurrentDirectory(simulationChooser.getCurrentLocation());    workspace.setCurrentFile(simFile);  }}  }
class C{  private final Name _findDecodedMedium(int len) throws IOException, JsonParseException {{    int bufLen=(len + 3) >> 2;    if (bufLen > _quadBuffer.length) {      _quadBuffer=_growArrayTo(_quadBuffer,bufLen);    }  }  int offset=0;  int inPtr=_inputPtr;  final byte[] inBuf=_inputBuffer;  do {    int q=(inBuf[inPtr++] & 0xFF) << 8;    q|=inBuf[inPtr++] & 0xFF;    q<<=8;    q|=inBuf[inPtr++] & 0xFF;    q<<=8;    q|=inBuf[inPtr++] & 0xFF;    _quadBuffer[offset++]=q;  } while ((len-=4) > 3);  if (len > 0) {    int q=inBuf[inPtr] & 0xFF;    if (--len > 0) {      q=(q << 8) + (inBuf[++inPtr] & 0xFF);      if (--len > 0) {        q=(q << 8) + (inBuf[++inPtr] & 0xFF);      }    }    _quadBuffer[offset++]=q;  }  return _symbols.findName(_quadBuffer,offset);}  }
class C{  private Control createControl(Composite parent){  Composite topLevel=new Composite(parent,SWT.NONE);  GridLayout layout=new GridLayout(2,false);  topLevel.setLayout(layout);  Label labelId=new Label(topLevel,SWT.NONE);  id=new Text(topLevel,SWT.BORDER);  Label labelName=new Label(topLevel,SWT.NONE);  name=new Text(topLevel,SWT.BORDER);  Label labelDescription=new Label(topLevel,SWT.NONE);  description=new Text(topLevel,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);  Label labelQuarter=new Label(topLevel,SWT.NONE);  quarter=new Text(topLevel,SWT.BORDER);  Label labelUpdatedBy=new Label(topLevel,SWT.NONE);  updatedBy=new Text(topLevel,SWT.BORDER);  Label labelUpdateDate=new Label(topLevel,SWT.NONE);  updateDate=new DateTime(topLevel,SWT.CALENDAR);  Label labelEngineers=new Label(topLevel,SWT.None);  Control engineersEdit=createEngineersEditor(topLevel);  labelId.setText("ID");  labelName.setText("Name");  labelDescription.setText("Description");  labelQuarter.setText("Quarter");  labelUpdatedBy.setText("Updated by");  labelUpdateDate.setText("Updated date");  labelEngineers.setText("Engineers");  labelUpdateDate.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false));  labelDescription.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false));  labelEngineers.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false));  id.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));  name.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));  quarter.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));  updatedBy.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));  GridData descriptionLayout=new GridData(SWT.FILL,SWT.FILL,true,false);  descriptionLayout.heightHint=150;  description.setLayoutData(descriptionLayout);  engineersEdit.setLayoutData(descriptionLayout);  fillContent();  return topLevel;}  }
class C{  private Map<String,Object> handleRejection(Transaction transaction){  logger.warningfmt("Gateway rejection: %s",transaction.getGatewayRejectionReason());switch (transaction.getGatewayRejectionReason()) {case DUPLICATE:    return JsonResponseHelper.create(ERROR,"Payment rejected: Possible duplicate.");case AVS:  return JsonResponseHelper.create(ERROR,"Payment rejected: Invalid address.");case CVV:return JsonResponseHelper.create(ERROR,"Payment rejected: Invalid CVV code.");case AVS_AND_CVV:return JsonResponseHelper.create(ERROR,"Payment rejected: Invalid address and CVV code.");case FRAUD:return JsonResponseHelper.create(ERROR,"Our merchant gateway suspects this payment of fraud. Please contact support.");default :return JsonResponseHelper.create(ERROR,"Payment rejected: " + transaction.getGatewayRejectionReason());}}  }
class C{  public void enableAdvancedRouting(boolean boo){  if (boo == enableAdvancedRouting) {    return;  }  enableAdvancedRouting=boo;  if (boo && initialized) {    initializeLayoutBlockRouting();  }  firePropertyChange("advancedRoutingEnabled",!enableAdvancedRouting,enableAdvancedRouting);}  }
class C{  public void seek(int position){  if (position > getMaxProgress()) {    return;  }  int secondProgressSize=(int)((float)position / getMaxProgress() * getProgressWidth());  int thumbMargin=(int)((float)position / getMaxProgress() * getThumbProgressWidth());  if (mOrientation == HORIZONTAL) {    mSecondBarLp.width=mThumbRadius + secondProgressSize;    mThumbLp.leftMargin=thumbMargin;  } else   if (mOrientation == VERTICAL) {    mSecondBarLp.height=mThumbRadius + secondProgressSize;    mThumbLp.topMargin=thumbMargin;  }  updateViewLayout(mSecondBar,mSecondBarLp);  updateViewLayout(mThumb,mThumbLp);}  }
class C{  public void removeValue(int index){  this.keys.remove(index);  this.values.remove(index);  rebuildIndex();}  }
class C{  public void updateCustomTag(String virtual,String physical,String archive,String primary,short inspect) throws ExpressionException, SecurityException {  checkWriteAccess();  _updateCustomTag(virtual,physical,archive,primary,inspect);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.LESS_OP___LESS_OP_1:    return LESS_OP_1_EDEFAULT == null ? lessOp_1 != null : !LESS_OP_1_EDEFAULT.equals(lessOp_1);}return super.eIsSet(featureID);}  }
class C{  protected void crowdingDistanceAssignment(List<T> f){  int size=f.size();  if (size == 0)   return;  if (size == 1) {    f.get(0).setDistance(Double.POSITIVE_INFINITY);    return;  }  if (size == 2) {    f.get(0).setDistance(Double.POSITIVE_INFINITY);    f.get(1).setDistance(Double.POSITIVE_INFINITY);    return;  }  List<T> front=new ArrayList<T>(size);  front.addAll(f);  for (int i=0; i < size; i++)   front.get(i).setDistance(0.0);  double objetiveMaxn;  double objetiveMinn;  double distance;  for (  final FitnessFunction<?> ff : this.uncoveredGoals) {    Collections.sort(front,new SortByFitness(ff,true));    objetiveMinn=front.get(0).getFitness(ff);    objetiveMaxn=front.get(front.size() - 1).getFitness(ff);    front.get(0).setDistance(Double.POSITIVE_INFINITY);    front.get(size - 1).setDistance(Double.POSITIVE_INFINITY);    for (int j=1; j < size - 1; j++) {      distance=front.get(j + 1).getFitness(ff) - front.get(j - 1).getFitness(ff);      distance=distance / (objetiveMaxn - objetiveMinn);      distance+=front.get(j).getDistance();      front.get(j).setDistance(distance);    }  }}  }
class C{  public static RenderedImage cutQuickLook(RenderedImage input_image,double max_ratio,int margin){  ColorModel color_model=input_image.getColorModel();  if ((color_model == null) && (input_image.getSampleModel() != null)) {    color_model=ColorRenderer.createColorModel(input_image.getSampleModel());  }  BufferedImage quick_look;  try {    quick_look=PlanarImage.wrapRenderedImage(input_image).getAsBufferedImage(new Rectangle(input_image.getWidth(),input_image.getHeight()),color_model);  } catch (  Exception e) {    logger.error("Problem getting buffered image.",e);    throw new IllegalArgumentException("Problem getting buffered image",e);  }  if ((quick_look != null) && ((quick_look.getWidth() > 0) && (quick_look.getHeight() > 0))) {    int ql_width=quick_look.getWidth();    int ql_height=quick_look.getHeight();    int ratio=(int)Math.sqrt(Math.max(ql_width,ql_height) / Math.min(ql_width,ql_height));    if ((ratio < max_ratio) || (ratio <= 1))     return PlanarImage.wrapRenderedImage(quick_look);    int width=ql_width;    int height=ql_height;    if (ql_width < ql_height) {      width=(ql_width + margin) * ratio;      height=ql_height / ratio;    } else {      width=ql_width / ratio;      height=(ql_height + margin) * ratio;    }    BufferedImage quick_look_cut=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);    Graphics2D g2=quick_look_cut.createGraphics();    for (int k=0; k < ratio; k++) {      BufferedImage ql_band=null;      if (ql_width < ql_height) {        ql_band=quick_look.getSubimage(0,(k * ql_height) / ratio,ql_width,ql_height / ratio);        g2.drawImage(ql_band,null,k * (ql_width + margin),0);      } else {        ql_band=quick_look.getSubimage((k * ql_width) / ratio,0,ql_width / ratio,ql_height);        g2.drawImage(ql_band,null,0,k * (ql_height + margin));      }    }    g2.dispose();    return PlanarImage.wrapRenderedImage(quick_look_cut);  }  return PlanarImage.wrapRenderedImage(quick_look);}  }
class C{  private static boolean isShiftJis(String charsetName){  if (charsetName == null) {    return false;  }  int length=charsetName.length();  if (length != 4 && length != 9) {    return false;  }  return charsetName.equalsIgnoreCase("shift_jis") || charsetName.equalsIgnoreCase("shift-jis") || charsetName.equalsIgnoreCase("sjis");}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.SYSTEM_ADMIN}) public Response deleteSMISProvider(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,StorageProvider.class,"id");  StorageProvider provider=_dbClient.queryObject(StorageProvider.class,id);  ArgValidator.checkEntityNotNull(provider,id,isIdEmbeddedInURL(id));  StringSet providerStorageSystems=provider.getStorageSystems();  if (null != providerStorageSystems && !providerStorageSystems.isEmpty()) {    for (    String system : providerStorageSystems) {      StorageSystem storageSys=_dbClient.queryObject(StorageSystem.class,URI.create(system));      if (storageSys.getProviders().size() == 1) {        throw APIException.badRequests.cannotDeleteProviderWithManagedStorageSystems(storageSys.getId());      }    }    for (    String system : providerStorageSystems) {      StorageSystem storageSys=_dbClient.queryObject(StorageSystem.class,URI.create(system));      provider.removeStorageSystem(_dbClient,storageSys);    }  }  StringSet decommissionedSystems=provider.getDecommissionedSystems();  if (null != decommissionedSystems && !decommissionedSystems.isEmpty()) {    for (    String decommissioned : decommissionedSystems) {      DecommissionedResource oldRes=_dbClient.queryObject(DecommissionedResource.class,URI.create(decommissioned));      if (oldRes != null) {        _dbClient.markForDeletion(oldRes);      }    }  }  _dbClient.markForDeletion(provider);  auditOp(OperationTypeEnum.DELETE_SMISPROVIDER,true,null,provider.getId().toString(),provider.getLabel(),provider.getIPAddress(),provider.getPortNumber(),provider.getUserName());  return Response.ok().build();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.REGULAR_EXPRESSION_FLAGS__FLAGS:    return getFlags();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static String toInitialCase(String str,char[] delimiters){  if (str == null || str.trim().isEmpty())   return str;  if (!str.toUpperCase().equals(str) && !str.toLowerCase().equals(str))   return str;  char[] chars=str.toCharArray();  boolean upper=true;  for (int i=0; i < chars.length; i++) {    if (upper && Character.isLetter(chars[i])) {      chars[i]=Character.toUpperCase(chars[i]);      upper=false;    } else {      chars[i]=Character.toLowerCase(chars[i]);    }    if (!Character.isLetterOrDigit(chars[i]) && chars[i] != '\'') {      upper=true;    }    if (delimiters != null && delimiters.length > 0) {      for (int j=0; j < delimiters.length; j++) {        if (chars[i] == delimiters[j]) {          upper=true;          break;        }      }    }  }  str=new String(chars);  return str;}  }
class C{  public BosonNLPTest(String testName){  super(testName);}  }
class C{  public static Timestamp toTimestamp(LocalDate data){  return Timestamp.valueOf(data.atStartOfDay());}  }
class C{  public ControllerLookupException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void popCharAsInt(GPR reg){  asm.emitLHZ(reg,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_CHAR,FP);  discardSlot();}  }
class C{  public Matrix4d m02(double m02){  this.m02=m02;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);  return this;}  }
class C{  public GameData(){  super();  delegateList=new DelegateList(this);  properties.set(GAME_UUID,UUID.randomUUID().toString());}  }
class C{  public static int hash(int seed,char aChar){  return (PRIME * seed) + (int)aChar;}  }
class C{  public final void removeAllConstraints(@NonNull final Collection<Constraint<CharSequence>> constraints){  ensureNotNull(constraints,"The collection may not be null");  for (  Constraint<CharSequence> constraint : constraints) {    removeConstraint(constraint);  }}  }
class C{  public Boolean isDelayWhileIdle(){  return delayWhileIdle;}  }
class C{  public void removeListener(final ICodeBookmarkListener listener){  m_listeners.removeListener(listener);}  }
class C{  public void execute(){  final long startTime=System.currentTimeMillis();  if (DATA_MODE_FILES.equals(mode) && args.length > 0) {    doFilesMode();  } else   if (DATA_MODE_ARGS.equals(mode) && args.length > 0) {    doArgsMode();  } else   if (DATA_MODE_WEB.equals(mode) && args.length > 0) {    doWebMode();  } else   if (DATA_MODE_STDIN.equals(mode)) {    doStdinMode();  } else {    usageShort();    return;  }  if (commit)   commit();  if (optimize)   optimize();  final long endTime=System.currentTimeMillis();  displayTiming(endTime - startTime);}  }
class C{  public double dirtyPrice(final double yield,final DayCounter dc,final Compounding comp,final Frequency freq,Date settlementDate){  if (settlementDate.isNull()) {    settlementDate=settlementDate();  }  return dirtyPriceFromYield(notional(settlementDate),this.cashflows_,yield,dc,comp,freq,settlementDate);}  }
class C{  public Set<String> keySet(){  return this.map.keySet();}  }
class C{  public void recompose() throws TransformerException {  Vector recomposableElements=new Vector();  if (null == m_globalImportList) {    Vector importList=new Vector();    addImports(this,true,importList);    m_globalImportList=new StylesheetComposed[importList.size()];    for (int i=0, j=importList.size() - 1; i < importList.size(); i++) {      m_globalImportList[j]=(StylesheetComposed)importList.elementAt(i);      m_globalImportList[j].recomposeIncludes(m_globalImportList[j]);      m_globalImportList[j--].recomposeImports();    }  }  int n=getGlobalImportCount();  for (int i=0; i < n; i++) {    StylesheetComposed imported=getGlobalImport(i);    imported.recompose(recomposableElements);  }  QuickSort2(recomposableElements,0,recomposableElements.size() - 1);  m_outputProperties=new OutputProperties(org.apache.xml.serializer.Method.UNKNOWN);  m_attrSets=new HashMap();  m_decimalFormatSymbols=new Hashtable();  m_keyDecls=new Vector();  m_namespaceAliasComposed=new Hashtable();  m_templateList=new TemplateList();  m_variables=new Vector();  for (int i=recomposableElements.size() - 1; i >= 0; i--)   ((ElemTemplateElement)recomposableElements.elementAt(i)).recompose(this);  initComposeState();  m_templateList.compose(this);  m_outputProperties.compose(this);  m_outputProperties.endCompose(this);  n=getGlobalImportCount();  for (int i=0; i < n; i++) {    StylesheetComposed imported=this.getGlobalImport(i);    int includedCount=imported.getIncludeCountComposed();    for (int j=-1; j < includedCount; j++) {      Stylesheet included=imported.getIncludeComposed(j);      composeTemplates(included);    }  }  if (m_extNsMgr != null)   m_extNsMgr.registerUnregisteredNamespaces();  clearComposeState();}  }
class C{  private void createTypeChooser(){  typeLabel=new JLabel("Input type: ");  typeLabel.setBounds(10,80,130,25);  this.add(typeLabel);  typeChooser=new JComboBox();  typeChooser.setBounds(150,80,110,25);  typeChooser.addItem(InputType.XML);  if (this.controller.is7ZipEnabled()) {    typeChooser.addItem(InputType.SEVENZIP);  }  typeChooser.addItem(InputType.BZIP2);  this.add(typeChooser);}  }
class C{  @Override public Project convertFolderToProject(String workspace,String path,ProjectConfig projectConfig,String visibility) throws ConflictException, ForbiddenException, ServerException, NotFoundException {  final VirtualFileEntry projectEntry=getProjectsRoot(workspace).getChild(path);  if (projectEntry == null || !projectEntry.isFolder())   throw new NotFoundException("Not found or not a folder " + path);  FolderEntry projectFolder=(FolderEntry)projectEntry;  final Project project=new Project(projectFolder,this);  if (projectConfig != null && projectConfig.getTypeId() != null) {    Map<String,AttributeValue> estimateProject=estimateProject(workspace,path,projectConfig.getTypeId());    projectConfig.getAttributes().putAll(estimateProject);    project.updateConfig(projectConfig);  } else {    project.getConfig();  }  finalizeProjectCreation(project,visibility);  return project;}  }
class C{  public Segment(SegType type,Object... coordOrModifier){  this.type=type;  for (int i=0; i < coordOrModifier.length; i++) {    if (coordOrModifier[i] instanceof Double) {      coords[i]=(Double)coordOrModifier[i];    } else {      modifiers[i]=(String)coordOrModifier[i];    }  }}  }
class C{  private void createProgressBar(){  this.progressBar=new ProgressBar(this.composite,SWT.SMOOTH | SWT.HORIZONTAL);  this.progressBar.setMinimum(this.progressBarMinimumValue);  this.progressBar.setMaximum(this.progressBarMaximumValue);  this.progressBar.setSelection(this.progressBarValue);  this.progressBar.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));  final GridData gd=new GridData(GridData.FILL,GridData.FILL,true,false,1,1);  this.progressBar.setLayoutData(gd);}  }
class C{  public Vector2d add(Vector2dc v){  x+=v.x();  y+=v.y();  return this;}  }
class C{  public void textInput(String channel,String text){  if (text.isEmpty()) {    return;  }  if (text.startsWith("/")) {    commandInput(channel,text);  } else {    if (c.onChannel(channel)) {      sendMessage(channel,text);    } else     if (channel.startsWith("$")) {      w.whisperChannel(channel,text);    } else     if (channel.startsWith("*")) {      c.sendCommandMessage(channel,text,"> " + text);    } else {      g.printLine("Not in a channel");      if (Chatty.DEBUG) {        g.printMessage(channel,testUser,text,false,null,1);      }    }  }}  }
class C{  public void initializeReference(Object conc_object){  if (this.isInitialized) {    throw new IllegalStateException("Reference already initialized!");  }  this.concreteValue=conc_object;  this.concIdentityHashCode=System.identityHashCode(conc_object);  this.isInitialized=true;}  }
class C{  public static void validate(Source source) throws Exception {  validate(schema,source,ErrorCodes.X_MALFORMED_GLOBALCONF);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static byte[] generateAlternativeSeed(){  try {    ByteArrayOutputStream bout=new ByteArrayOutputStream();    DataOutputStream out=new DataOutputStream(bout);    out.writeLong(System.currentTimeMillis());    out.writeLong(System.nanoTime());    out.writeInt(new Object().hashCode());    Runtime runtime=Runtime.getRuntime();    out.writeLong(runtime.freeMemory());    out.writeLong(runtime.maxMemory());    out.writeLong(runtime.totalMemory());    try {      String s=System.getProperties().toString();      out.writeInt(s.length());      out.write(s.getBytes("UTF-8"));    } catch (    Exception e) {      warn("generateAlternativeSeed",e);    }    try {      Class<?> inetAddressClass=Class.forName("java.net.InetAddress");      Object localHost=inetAddressClass.getMethod("getLocalHost").invoke(null);      String hostName=inetAddressClass.getMethod("getHostName").invoke(localHost).toString();      out.writeUTF(hostName);      Object[] list=(Object[])inetAddressClass.getMethod("getAllByName",String.class).invoke(null,hostName);      Method getAddress=inetAddressClass.getMethod("getAddress");      for (      Object o : list) {        out.write((byte[])getAddress.invoke(o));      }    } catch (    Throwable e) {    }    for (int j=0; j < 16; j++) {      int i=0;      long end=System.currentTimeMillis();      while (end == System.currentTimeMillis()) {        i++;      }      out.writeInt(i);    }    out.close();    return bout.toByteArray();  } catch (  IOException e) {    warn("generateAlternativeSeed",e);    return new byte[1];  }}  }
class C{  protected void handleSplitAction(SolrQueryRequest adminReq,SolrQueryResponse rsp) throws IOException {  SolrParams params=adminReq.getParams();  List<DocRouter.Range> ranges=null;  String[] pathsArr=params.getParams("path");  String rangesStr=params.get(CoreAdminParams.RANGES);  if (rangesStr != null) {    String[] rangesArr=rangesStr.split(",");    if (rangesArr.length == 0) {      throw new SolrException(ErrorCode.BAD_REQUEST,"There must be at least one range specified to split an index");    } else {      ranges=new ArrayList<>(rangesArr.length);      for (      String r : rangesArr) {        try {          ranges.add(DocRouter.DEFAULT.fromString(r));        } catch (        Exception e) {          throw new SolrException(ErrorCode.BAD_REQUEST,"Exception parsing hexadecimal hash range: " + r,e);        }      }    }  }  String splitKey=params.get("split.key");  String[] newCoreNames=params.getParams("targetCore");  String cname=params.get(CoreAdminParams.CORE,"");  if ((pathsArr == null || pathsArr.length == 0) && (newCoreNames == null || newCoreNames.length == 0)) {    throw new SolrException(ErrorCode.BAD_REQUEST,"Either path or targetCore param must be specified");  }  log.info("Invoked split action for core: " + cname);  SolrCore core=coreContainer.getCore(cname);  SolrQueryRequest req=new LocalSolrQueryRequest(core,params);  List<SolrCore> newCores=null;  try {    List<String> paths=null;    int partitions=pathsArr != null ? pathsArr.length : newCoreNames.length;    DocRouter router=null;    String routeFieldName=null;    if (coreContainer.isZooKeeperAware()) {      ClusterState clusterState=coreContainer.getZkController().getClusterState();      String collectionName=req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName();      DocCollection collection=clusterState.getCollection(collectionName);      String sliceName=req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();      Slice slice=clusterState.getSlice(collectionName,sliceName);      router=collection.getRouter() != null ? collection.getRouter() : DocRouter.DEFAULT;      if (ranges == null) {        DocRouter.Range currentRange=slice.getRange();        ranges=currentRange != null ? router.partitionRange(partitions,currentRange) : null;      }      Object routerObj=collection.get(DOC_ROUTER);      if (routerObj != null && routerObj instanceof Map) {        Map routerProps=(Map)routerObj;        routeFieldName=(String)routerProps.get("field");      }    }    if (pathsArr == null) {      newCores=new ArrayList<>(partitions);      for (      String newCoreName : newCoreNames) {        SolrCore newcore=coreContainer.getCore(newCoreName);        if (newcore != null) {          newCores.add(newcore);        } else {          throw new SolrException(ErrorCode.BAD_REQUEST,"Core with core name " + newCoreName + " expected but doesn't exist.");        }      }    } else {      paths=Arrays.asList(pathsArr);    }    SplitIndexCommand cmd=new SplitIndexCommand(req,paths,newCores,ranges,router,routeFieldName,splitKey);    core.getUpdateHandler().split(cmd);  } catch (  Exception e) {    log.error("ERROR executing split:",e);    throw new RuntimeException(e);  } finally {    if (req != null)     req.close();    if (core != null)     core.close();    if (newCores != null) {      for (      SolrCore newCore : newCores) {        newCore.close();      }    }  }}  }
class C{  public RadialTreeLayout(String group){  super(group);  m_radiusInc=DEFAULT_RADIUS;  m_prevRoot=null;  m_theta1=0;  m_theta2=m_theta1 + MathLib.TWO_PI;}  }
class C{  public Bundle onCommand(String action,int x,int y,int z,Bundle extras,boolean resultRequested){  if (action.equals("android.wallpaper.tap")) {    if (mDrawer != null) {      mDrawer.tap(x,y);    }  }  return super.onCommand(action,x,y,z,extras,resultRequested);}  }
class C{  public boolean isValid(){  String value;  if (thisone == null) {    return false;  }  value=getText();  if (fieldType == FieldType.TEXT) {    if ((value.length() < 1) && (allow0Length == false)) {      return false;    } else     if (((allow0Length == true) && (value.length() == 0)) || (value.matches(validateRegExpr))) {      return true;    } else {      return false;    }  } else   if (fieldType == FieldType.INTEGRALNUMERIC) {    try {      if ((allow0Length == true) && (value.length() == 0)) {        return true;      } else       if (value.length() == 0) {        return false;      } else       if ((Integer.parseInt(value) >= minAllowedValue) && (Integer.parseInt(value) <= maxAllowedValue)) {        return true;      } else {        return false;      }    } catch (    Exception e) {      return false;    }  } else   if (fieldType == FieldType.INTEGRALNUMERICPLUSSTRING) {    Integer findLocation=999;    Integer location=999;    if ((allow0Length == true) && (value.length() == 0)) {      return true;    } else     if (value.length() == 0) {      return false;    }    location=value.indexOf('c');    if ((location != -1) && (location < findLocation)) {      findLocation=location;    }    location=value.indexOf('C');    if ((location != -1) && (location < findLocation)) {      findLocation=location;    }    location=value.indexOf('t');    if ((location != -1) && (location < findLocation)) {      findLocation=location;    }    location=value.indexOf('T');    if ((location != -1) && (location < findLocation)) {      findLocation=location;    }    if (findLocation == 999) {      return false;    }    try {      Integer address=Integer.parseInt(value.substring(0,findLocation));      if ((address < minAllowedValue) || (address > maxAllowedValue)) {        return false;      } else       if ((value.length() < 2) || (!value.matches(validateRegExpr))) {        return false;      } else {        return true;      }    } catch (    Exception e) {      return false;    }  } else   if (fieldType == FieldType.LIMITEDHEX) {    try {      if (value.length() == 0) {        return false;      } else       if ((Integer.parseInt(value,16) >= minAllowedValue) && (Integer.parseInt(value,16) <= maxAllowedValue)) {        return true;      } else {        return false;      }    } catch (    Exception e) {      return false;    }  } else {    return false;  }}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);}  }
class C{  public static final long longEncode(final double lon,final double lat,final int level){  final short msf=(short)(((12 - level) * 5) + MORTON_OFFSET);  return ((BitUtil.flipFlop(XGeoUtils.mortonHash(lon,lat)) >>> msf) << 4) | level;}  }
class C{  public void layout(){  int vis, maximum;  boolean vsbWasVisible;  int origVSBVal;  assert (target != null);  origVSBVal=vsb.getValue();  vis=itemsInWindow(false);  maximum=items.size() < vis ? vis : items.size();  vsb.setValues(vsb.getValue(),vis,vsb.getMinimum(),maximum);  vsbVis=vsbWasVisible=vsbIsVisible(false);  listHeight=height;  listWidth=getListWidth();  vis=listWidth - ((2 * SPACE) + (2 * MARGIN));  maximum=maxLength < vis ? vis : maxLength;  hsb.setValues(hsb.getValue(),vis,hsb.getMinimum(),maximum);  hsbVis=hsbIsVisible(vsbVis);  if (hsbVis) {    listHeight=height - SCROLLBAR_AREA;    vis=itemsInWindow(true);    maximum=items.size() < vis ? vis : items.size();    vsb.setValues(origVSBVal,vis,vsb.getMinimum(),maximum);    vsbVis=vsbIsVisible(true);  }  if (vsbWasVisible != vsbVis) {    listWidth=getListWidth();    vis=listWidth - ((2 * SPACE) + (2 * MARGIN));    maximum=maxLength < vis ? 0 : maxLength;    hsb.setValues(hsb.getValue(),vis,hsb.getMinimum(),maximum);    hsbVis=hsbIsVisible(vsbVis);  }  vsb.setSize(SCROLLBAR_WIDTH,listHeight);  hsb.setSize(listWidth,SCROLLBAR_WIDTH);  vsb.setBlockIncrement(itemsInWindow());  hsb.setBlockIncrement(width - ((2 * SPACE) + (2 * MARGIN) + (vsbVis ? SCROLLBAR_AREA : 0)));}  }
class C{  @FXML public void popOutDescription(){  String descriptionText=this.textFieldDescriptionId.getText().replace("<br/>","\n");  Dialog<String> descriptionDialog=new Dialog<>();  descriptionDialog.setTitle("Description");  descriptionDialog.setHeaderText("Description Text");  Label label=new Label("Description: ");  TextArea textArea=new TextArea(descriptionText);  textArea.setEditable(true);  textArea.setWrapText(true);  textArea.setMaxWidth(Double.MAX_VALUE);  textArea.setMaxHeight(Double.MAX_VALUE);  GridPane.setVgrow(textArea,Priority.ALWAYS);  GridPane.setHgrow(textArea,Priority.ALWAYS);  GridPane expContent=new GridPane();  expContent.setMaxWidth(Double.MAX_VALUE);  expContent.add(label,0,0);  expContent.add(textArea,0,1);  descriptionDialog.getDialogPane().setContent(expContent);  descriptionDialog.getDialogPane().getButtonTypes().addAll(ButtonType.OK,ButtonType.CANCEL);  descriptionDialog.setResultConverter(null);  descriptionDialog.showAndWait().ifPresent(null);}  }
class C{  public static Object executeScript(CompiledScript script,String functionName,ScriptContext scriptContext,Object[] args) throws ScriptException, NoSuchMethodException {  Assert.notNull("script",script,"scriptContext",scriptContext);  Object result=script.eval(scriptContext);  if (UtilValidate.isNotEmpty(functionName)) {    if (Debug.verboseOn()) {      Debug.logVerbose("Invoking function/method " + functionName,module);    }    ScriptEngine engine=script.getEngine();    try {      Invocable invocableEngine=(Invocable)engine;      result=invocableEngine.invokeFunction(functionName,args == null ? EMPTY_ARGS : args);    } catch (    ClassCastException e) {      throw new ScriptException("Script engine " + engine.getClass().getName() + " does not support function/method invocations");    }  }  return result;}  }
class C{  public void testNextLongBounded2(){  SplittableRandom sr=new SplittableRandom();  for (long least=-86028121; least < MAX_LONG_BOUND; least+=982451653L) {    for (long bound=least + 2; bound > least && bound < MAX_LONG_BOUND; bound+=Math.abs(bound * 7919)) {      long f=sr.nextLong(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      long j;      while (i < NCALLS && (j=sr.nextLong(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  public TransactionMetaData(final BlockHeight blockHeight,final Long id,final Hash hash){  this(blockHeight,id,hash,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public PBEKeySpec(char[] password,byte[] salt,int iterationCount,int keyLength){  if (salt == null) {    throw new NullPointerException("salt == null");  }  if (salt.length == 0) {    throw new IllegalArgumentException("salt.length == 0");  }  if (iterationCount <= 0) {    throw new IllegalArgumentException("iterationCount <= 0");  }  if (keyLength <= 0) {    throw new IllegalArgumentException("keyLength <= 0");  }  if (password == null) {    this.password=EmptyArray.CHAR;  } else {    this.password=new char[password.length];    System.arraycopy(password,0,this.password,0,password.length);  }  this.salt=new byte[salt.length];  System.arraycopy(salt,0,this.salt,0,salt.length);  this.iterationCount=iterationCount;  this.keyLength=keyLength;}  }
class C{  public CActionShowReilCode(final Window parent,final INaviInstruction instruction){  super("Show REIL Code");  m_parent=parent;  m_instruction=instruction;}  }
class C{  public Temporal_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  public void endVisit(SwitchStatement node){}  }
class C{  public CF10(int numberOfVariables){  super(numberOfVariables,3,1);}  }
