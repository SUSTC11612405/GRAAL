class C{  public void updateVVset(String volumeCGName,String volName,int actionValue) throws Exception {  _log.info("3PARDriver: updateVVset enter");  ClientResponse clientResp=null;  final String path=MessageFormat.format(URI_UPDATE_CG,volumeCGName);  String payload="{\"action\": " + actionValue + ", \"setmembers\": [ \""+ volName+ "\" ] }";  _log.info("3PARDriver:updateVVset running update VV Set with URI {} and payload {} ",path,payload);  try {    clientResp=put(path,payload);    if (clientResp == null) {      _log.error("3PARDriver:updateVVset There is no response from 3PAR");      throw new HP3PARException("There is no response from 3PAR");    } else     if (clientResp.getStatus() != 200) {      String errResp=getResponseDetails(clientResp);      throw new HP3PARException(errResp);    } else {      _log.info("3PARDriver: updateVVset success");    }  } catch (  Exception e) {    throw e;  } finally {    if (clientResp != null) {      clientResp.close();    }    _log.info("3PARDriver:updateVVset leave");  }}  }
class C{  public String sqlObject_dropSequence(String vendorName,String catalogName,String schemaName,String sequenceName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlObject_dropSequence(catalogName,schemaName,sequenceName);}  }
class C{  public static InsnList cast(final Type from,final Type to){  InsnList list=new InsnList();  if (from != to) {    if (from == Type.DOUBLE_TYPE) {      if (to == Type.FLOAT_TYPE) {        list.add(new InsnNode(Opcodes.D2F));      } else       if (to == Type.LONG_TYPE) {        list.add(new InsnNode(Opcodes.D2L));      } else {        list.add(new InsnNode(Opcodes.D2I));        list.add(cast(Type.INT_TYPE,to));      }    } else     if (from == Type.FLOAT_TYPE) {      if (to == Type.DOUBLE_TYPE) {        list.add(new InsnNode(Opcodes.F2D));      } else       if (to == Type.LONG_TYPE) {        list.add(new InsnNode(Opcodes.F2L));      } else {        list.add(new InsnNode(Opcodes.F2I));        list.add(cast(Type.INT_TYPE,to));      }    } else     if (from == Type.LONG_TYPE) {      if (to == Type.DOUBLE_TYPE) {        list.add(new InsnNode(Opcodes.L2D));      } else       if (to == Type.FLOAT_TYPE) {        list.add(new InsnNode(Opcodes.L2F));      } else {        list.add(new InsnNode(Opcodes.L2I));        list.add(cast(Type.INT_TYPE,to));      }    } else {      if (to == Type.BYTE_TYPE) {        list.add(new InsnNode(Opcodes.I2B));      } else       if (to == Type.CHAR_TYPE) {        list.add(new InsnNode(Opcodes.I2C));      } else       if (to == Type.DOUBLE_TYPE) {        list.add(new InsnNode(Opcodes.I2D));      } else       if (to == Type.FLOAT_TYPE) {        list.add(new InsnNode(Opcodes.I2F));      } else       if (to == Type.LONG_TYPE) {        list.add(new InsnNode(Opcodes.I2L));      } else       if (to == Type.SHORT_TYPE) {        list.add(new InsnNode(Opcodes.I2S));      }    }  }  return list;}  }
class C{  public static String clip(final String s,final int leftClip,final int rightClip){  return leftClip + rightClip >= s.length() ? "" : s.substring(leftClip,s.length() - rightClip);}  }
class C{  @Override public void changed(final Changes property,final boolean value){switch (property) {case CHANGE_CAMERA:    renderer.switchCamera();  break;case SPLIT_LAYER:final int nbLayers=this.getManager().getItems().size();int i=0;final Iterator<ILayer> it=this.getManager().getItems().iterator();while (it.hasNext()) {final ILayer curLayer=it.next();if (value) {curLayer.setElevation((double)i / nbLayers);} else {curLayer.setElevation(0.0);}i++;}updateDisplay(true);break;case THREED_VIEW:break;case CAMERA_POS:renderer.updateCameraPosition();break;default :break;}}  }
class C{  public void writeExif(String jpegFileName,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegFileName == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  is=new FileInputStream(jpegFileName);  writeExif(is,exifOutFileName);  is.close();}  }
class C{  public int append(String stringValue,boolean nullTerminated){  if (stringValue != null)   append(stringValue.getBytes());  if (nullTerminated)   append((byte)0);  return bytesLength;}  }
class C{  private String excludeDestinationStatement(String text){  int idx=-1;  if ((idx=text.indexOf("Destination will be")) != -1) {    text=text.substring(0,idx);  }  return text;}  }
class C{  @Override public boolean equals(Object other){  if (this == other) {    return true;  }  if (!(other instanceof BoundingBox)) {    return false;  }  BoundingBox that=(BoundingBox)other;  return (this.maxY == that.maxY) && (this.maxX == that.maxX) && (this.minY == that.minY)&& (this.minX == that.minX);}  }
class C{  public UserFeed(BaseFeed<?,?> sourceFeed){  super(sourceFeed);  getCategories().add(UserData.USER_CATEGORY);  this.delegate=new UserDataImpl(this);}  }
class C{  public void accept(ISourceType[] sourceTypes,PackageBinding packageBinding,AccessRestriction accessRestriction){  ISourceType sourceType=sourceTypes[0];  while (sourceType.getEnclosingType() != null)   sourceType=sourceType.getEnclosingType();  if (sourceType instanceof SourceTypeElementInfo) {    SourceTypeElementInfo elementInfo=(SourceTypeElementInfo)sourceType;    IType type=elementInfo.getHandle();    ICompilationUnit sourceUnit=(ICompilationUnit)type.getCompilationUnit();    accept(sourceUnit,accessRestriction);  } else {    CompilationResult result=new CompilationResult(sourceType.getFileName(),1,1,0);    CompilationUnitDeclaration unit=SourceTypeConverter.buildCompilationUnit(sourceTypes,SourceTypeConverter.FIELD_AND_METHOD | SourceTypeConverter.MEMBER_TYPE,this.lookupEnvironment.problemReporter,result);    this.lookupEnvironment.buildTypeBindings(unit,accessRestriction);    this.lookupEnvironment.completeTypeBindings(unit,true);  }}  }
class C{  public static Object[] toObjectArray(Object source){  if (source instanceof Object[]) {    return (Object[])source;  }  if (source == null) {    return new Object[0];  }  if (!source.getClass().isArray()) {    throw new IllegalArgumentException("Source is not an array: " + source);  }  int length=Array.getLength(source);  if (length == 0) {    return new Object[0];  }  Class wrapperType=Array.get(source,0).getClass();  Object[] newArray=(Object[])Array.newInstance(wrapperType,length);  for (int i=0; i < length; i++) {    newArray[i]=Array.get(source,i);  }  return newArray;}  }
class C{  public void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  append(m_doc.createProcessingInstruction("xslt-next-is-raw","formatter-to-dom"));  append(m_doc.createTextNode(s));}  }
class C{  private static String toCanonicalName(String className){  className=StringUtils.deleteWhitespace(className);  if (className == null) {    throw new NullArgumentException("className");  } else   if (className.endsWith("[]")) {    StrBuilder classNameBuffer=new StrBuilder();    while (className.endsWith("[]")) {      className=className.substring(0,className.length() - 2);      classNameBuffer.append("[");    }    String abbreviation=(String)abbreviationMap.get(className);    if (abbreviation != null) {      classNameBuffer.append(abbreviation);    } else {      classNameBuffer.append("L").append(className).append(";");    }    className=classNameBuffer.toString();  }  return className;}  }
class C{  public boolean isBiomeblackListed(BiomeGenBase biome){  return AdvancedRocketryBiomes.instance.getBlackListedBiomes().contains(biome.biomeID);}  }
class C{  public TaggedTemplateString createTaggedTemplateString(){  TaggedTemplateStringImpl taggedTemplateString=new TaggedTemplateStringImpl();  return taggedTemplateString;}  }
class C{  public Controler(final String[] args){  this.controler=new org.matsim.core.controler.Controler(args);  this.controler.addControlerListener(new CalibrationStatsListener(this.controler.getEvents(),SURVEY_FILES,1,"Travel Survey (Benchmark)","Red_Scheme",new HashSet<Id<Person>>()));}  }
class C{  public final void requestMutualAuth(boolean value) throws GSSException {  if (state == STATE_NEW && isInitiator()) {    mutualAuthState=value;  }}  }
class C{  public AbstractFileConverterTest(String name){  super(name);}  }
class C{  public void dispose(){  removeListeners();}  }
class C{  public void removeAllKeyBindings(){  bindings.clear();}  }
class C{  @Override public String globalInfo(){  return "For ensembles of multi-label methods.";}  }
class C{  @Contract(pure=true) private static boolean isCallback(@NonNull final Method method,@NonNull final Class<?> resultClass,@NonNull final String methodName){  if (method.getName().equals(methodName)) {    if (method.getReturnType() == Void.TYPE) {      final Class<?>[] parameters=method.getParameterTypes();      if (parameters.length == 1 && parameters[0].isAssignableFrom(resultClass)) {        return true;      }    }  }  return false;}  }
class C{  private Intent createSettingsIntent(){  return PreferencesLauncher.createIntentForSettingsPage(mApplicationContext,mAccountManagementFragment.getCanonicalName());}  }
class C{  @Override public boolean addAll(E... elements){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.FIELD_ACCESSOR__DECLARED_ABSTRACT:    return declaredAbstract != DECLARED_ABSTRACT_EDEFAULT;case TypesPackage.FIELD_ACCESSOR__DECLARED_THIS_TYPE:  return declaredThisType != null;}return super.eIsSet(featureID);}  }
class C{  private void barRemove(){  JToolBar parentBar=(JToolBar)m_buttonSelected.getParent();  Container parentPanel=null;  if (parentBar != null) {    parentPanel=parentBar.getParent();  }  for (  JToolBar jt : toolbar) {    jt.remove(m_buttonSelected);  }  if (parentPanel != null && parentBar.getComponentCount() == 1) {    bar.remove(parentPanel);    toolbarMap.values().remove(parentBar);  }  bar.validate();  bar.repaint();  barDBupdate(false,Integer.parseInt(m_buttonSelected.getActionCommand()));}  }
class C{  public final String peek(){  return (m_firstFree <= 0) ? null : m_map[m_firstFree - 1];}  }
class C{  public CompareToBuilder append(final double lhs,final double rhs){  if (comparison != 0) {    return this;  }  comparison=Double.compare(lhs,rhs);  return this;}  }
class C{  public static TDoubleDoubleHashMap createCumulativeHistogram(TDoubleDoubleHashMap histogram){  double[] keys=histogram.keys();  Arrays.sort(keys);  double sum=0;  for (  double key : keys) {    double val=histogram.get(key);    sum+=val;    histogram.put(key,sum);  }  return histogram;}  }
class C{  private IntIntPair totalPivotSearch(int k){  double max=0;  int i, j, pivotRow=k, pivotCol=k;  double absValue;  for (i=k; i < coeff.length; i++) {    for (j=k; j < coeff[0].length; j++) {      absValue=Math.abs(coeff[row[i]][col[j]]);      if (max < absValue) {        max=absValue;        pivotRow=i;        pivotCol=j;      }    }  }  return new IntIntPair(pivotRow,pivotCol);}  }
class C{  public void onSnackbarDismissed(Snackbar snackbar,@DismissEvent int dismissEvent){}  }
class C{  protected void dispatchEvent(AWTEvent event){  waitTimer.startTimer(event.getSource());  try {    super.dispatchEvent(event);  }  finally {    waitTimer.stopTimer();  }}  }
class C{  public void stop() throws Exception {  dbsvc.stop();  dbsvc=null;}  }
class C{  public static WaitingDialog createDialog(String title,String text){  return new WaitingDialog(title,text);}  }
class C{  private DateMatcher isDate(int year,int month,int dom,int hour,int minute,int second,int ms){  Calendar cal=Calendar.getInstance(TimeZone.getTimeZone("UTC"));  cal.clear();  cal.set(year,month - 1,dom,hour,minute,second);  cal.set(Calendar.MILLISECOND,ms);  return new DateMatcher(cal);}  }
class C{  public void run(){  try {    if (index == 0) {      sendMessageToUI("Starting Pump info request...",true);    }    if (wThread.retries >= MedtronicConstants.NUMBER_OF_RETRIES) {      mHandler3.removeCallbacks(wThread);synchronized (reader.sendingCommandLock) {        reader.sendingCommand=false;      }synchronized (reader.waitingCommandLock) {        reader.waitingCommand=false;        reader.lastCommandSend=null;      }synchronized (reader.processingCommandLock) {        reader.processingCommand=false;      }      sendMessageToUI("Timeout expired executing command list",false);synchronized (reader.processingCommandLock) {        reader.processingCommand=false;      }synchronized (reader.waitingCommandLock) {        reader.waitingCommand=false;        reader.lastCommandSend=null;      }      return;    }    if (index >= commandList.length) {synchronized (reader.processingCommandLock) {        reader.processingCommand=false;      }synchronized (reader.waitingCommandLock) {        reader.waitingCommand=false;        reader.lastCommandSend=null;      }      return;    }    if (withoutConfirmation <= 0) {synchronized (reader.waitingCommandLock) {        reader.waitingCommand=true;        reader.lastCommandSend=null;      }    } else {synchronized (reader.waitingCommandLock) {        reader.waitingCommand=false;        reader.lastCommandSend=null;      }    }    byte command=commandList[index];    wThread.retries=-1;    wThread.command=command;    wThread.instance=this;    mHandler3.post(wThread);    index++;  } catch (  Exception e) {    StringBuffer sb1=new StringBuffer("");    sb1.append("EXCEPTION!!!!!! " + e.getMessage() + " "+ e.getCause());    for (    StackTraceElement st : e.getStackTrace()) {      sb1.append(st.toString());    }    sendMessageToUI(sb1.toString(),false);  }}  }
class C{  public <T>CorsServiceBuilder preflightResponseHeader(final AsciiString name,final Iterable<T> values){  requireNonNull(name,"name");  requireNonNull(values,"values");  preflightResponseHeaders.put(name,new ConstantValueSupplier(values));  return this;}  }
class C{  public Path(String path){  this();  m_Elements=breakUp(path);}  }
class C{  public ReilInstruction(final com.google.security.zynamics.reil.ReilInstruction instruction){  m_instruction=instruction;  m_firstOperand=new ReilOperand(instruction.getFirstOperand());  m_secondOperand=new ReilOperand(instruction.getSecondOperand());  m_thirdOperand=new ReilOperand(instruction.getThirdOperand());}  }
class C{  public static SimpleCommand createCommandWithoutLogging(String command){  return new SimpleCommand(command,new LocalAgent(),null,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:55.746 -0500",hash_original_method="1E56C806D3B84E35689447C22D535D39",hash_generated_method="C66D6F971A7BE1AFC963389EBB6ACC76") public boolean append(T item){  if (mParcel == null) {    throw new IllegalStateException("ParceledListSlice has already been recycled");  }  item.writeToParcel(mParcel,PARCELABLE_WRITE_RETURN_VALUE);  mNumItems++;  return (((mParcel.dataSize() + MAX_IPC_SIZE)) == 1);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  int parseMonth(String month,int offset) throws ParseException {  if (month.length() < 3) {    return (parseNumber(month,offset,"month",1,12) - 1) + Calendar.JANUARY;  }  String months[]=getDateFormatSymbols().getMonths();  for (int i=0; i < months.length; i++) {    if (month.equalsIgnoreCase(months[i])) {      return i + Calendar.JANUARY;    }  }  months=getDateFormatSymbols().getShortMonths();  for (int i=0; i < months.length; i++) {    if (month.equalsIgnoreCase(months[i])) {      return i + Calendar.JANUARY;    }  }  return throwInvalid("month",offset);}  }
class C{  public Object convertToVertexId(final Graph graph,final String vertexName){  return convertToVertex(graph,vertexName).id();}  }
class C{  public FrequencyLimitException(long requestedFrequency,long frequencyLimit){  super("Requested frequency [" + requestedFrequency + "] exceeds the limit ["+ frequencyLimit+ "].  Tuned "+ "frequency was set to the limit value");  mRequestedFrequency=requestedFrequency;  mFrequencyLimit=frequencyLimit;}  }
class C{  @SuppressWarnings({"UnusedParameters"}) protected double doGetElevations(Sector sector,List<? extends LatLon> latlons,double targetResolution,double[] buffer,boolean mapMissingData){  if (sector == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (latlons == null) {    String msg=Logging.getMessage("nullValue.LatLonListIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (buffer == null) {    String msg=Logging.getMessage("nullValue.ElevationsBufferIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (buffer.length < latlons.size()) {    String msg=Logging.getMessage("ElevationModel.ElevationsBufferTooSmall",latlons.size());    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (this.intersects(sector) == -1)   return Double.MAX_VALUE;  this.setValue(AVKey.FRAME_TIMESTAMP,System.currentTimeMillis());  for (int i=0; i < latlons.size(); i++) {    LatLon ll=latlons.get(i);    if (ll == null)     continue;    if (!this.contains(ll.getLatitude(),ll.getLongitude()))     continue;    Double e=this.lookupElevation(ll.getLatitude().radians,ll.getLongitude().radians);    if (e != null && e != this.missingDataFlag)     buffer[i]=e;    if (e == null)     buffer[i]=this.getExtremeElevations(sector)[0]; else     if (mapMissingData && e == this.missingDataFlag)     buffer[i]=this.getMissingDataReplacement();  }  return this.getBestResolution(sector);}  }
class C{  public long show_bits_long(int n){  if (n <= MIN_CACHE_BITS)   return show_bits(n); else {    GetBitContext gb=makeCopy();    return gb.get_bits_long(n,"");  }}  }
class C{  @Inject public RegistryImpl(UpnpService upnpService){  log.fine("Creating Registry: " + getClass().getName());  this.upnpService=upnpService;  log.fine("Starting registry background maintenance...");  registryMaintainer=createRegistryMaintainer();  if (registryMaintainer != null) {    getConfiguration().getRegistryMaintainerExecutor().execute(registryMaintainer);  }}  }
class C{  private void resetDefaultBorders(){  try {    Field highLightColor=EtchedBorder.class.getDeclaredField("highlight");    highLightColor.setAccessible(true);    Field shadowcolor=EtchedBorder.class.getDeclaredField("shadow");    shadowcolor.setAccessible(true);    Border etchedBorder=BorderFactory.createEtchedBorder();    highLightColor.set(etchedBorder,null);    shadowcolor.set(etchedBorder,null);    Border raisedEtchedBorder=BorderFactory.createEtchedBorder(EtchedBorder.RAISED);    highLightColor.set(raisedEtchedBorder,null);    shadowcolor.set(raisedEtchedBorder,null);    Field highlightOuter=BevelBorder.class.getDeclaredField("highlightOuter");    highlightOuter.setAccessible(true);    Field highlightInner=BevelBorder.class.getDeclaredField("highlightInner");    highlightInner.setAccessible(true);    Field shadowOuter=BevelBorder.class.getDeclaredField("shadowOuter");    shadowOuter.setAccessible(true);    Field shadowInner=BevelBorder.class.getDeclaredField("shadowInner");    shadowInner.setAccessible(true);    Border loweredBevelBorder=BorderFactory.createLoweredBevelBorder();    highlightOuter.set(loweredBevelBorder,null);    highlightInner.set(loweredBevelBorder,null);    shadowOuter.set(loweredBevelBorder,null);    shadowInner.set(loweredBevelBorder,null);    Border raisedBevelBorder=BorderFactory.createRaisedBevelBorder();    highlightOuter.set(raisedBevelBorder,null);    highlightInner.set(raisedBevelBorder,null);    shadowOuter.set(raisedBevelBorder,null);    shadowInner.set(raisedBevelBorder,null);  } catch (  SecurityException e) {    e.printStackTrace();  }catch (  NoSuchFieldException e) {    e.printStackTrace();  }catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int V(){  return V;}  }
class C{  public static ExprDouble toExprDouble(Expression expr,Position start,Position end){  if (expr instanceof Literal) {    Double d=((Literal)expr).getDouble(null);    if (d != null) {      return expr.getFactory().createLitDouble(-d.doubleValue(),start,end);    }  }  return new OpNegateNumber(expr,start,end);}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public boolean isFillViewportX(){  return mFillViewportX;}  }
class C{  public boolean isPending(){  return getConfidence().getConfidenceType() == TransactionConfidence.ConfidenceType.PENDING;}  }
class C{  public DoubleMatrix jblas_cholesky(){  return org.jblas.Decompose.cholesky(new DoubleMatrix(this.getArray()));}  }
class C{  public void init() throws ServletException {}  }
class C{  public static SSLEngine createSslEngine(URI remote,SSLContext context,NettyTransportSslOptions options) throws Exception {  SSLEngine engine=null;  if (remote == null) {    engine=context.createSSLEngine();  } else {    engine=context.createSSLEngine(remote.getHost(),remote.getPort());  }  engine.setEnabledProtocols(buildEnabledProtocols(engine,options));  engine.setEnabledCipherSuites(buildEnabledCipherSuites(engine,options));  engine.setUseClientMode(true);  if (options.isVerifyHost()) {    SSLParameters sslParameters=engine.getSSLParameters();    sslParameters.setEndpointIdentificationAlgorithm("HTTPS");    engine.setSSLParameters(sslParameters);  }  return engine;}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static float valueInRange(float value,PLRange range){  return valueInRange(value,range.min,range.max);}  }
class C{  public static Vec solve(double eps,Matrix A,Vec x,Vec b){  if (!A.isSquare())   throw new ArithmeticException("A must be a square (symmetric & positive definite) matrix"); else   if (A.rows() != b.length() || A.rows() != x.length())   throw new ArithmeticException("Matrix A dimensions do not agree with x and b");  int k=0;  Vec r_k=b.subtract(A.multiply(x));  Vec p_k=r_k.clone();  Vec Apk;  double RdR=r_k.dot(r_k);  do {    Apk=A.multiply(p_k);    double alpha_k=RdR / p_k.dot(Apk);    x.mutableAdd(alpha_k,p_k);    r_k.mutableAdd(-alpha_k,Apk);    double newRdR=r_k.dot(r_k);    if (newRdR < eps * eps)     return x;    double beta_k=newRdR / RdR;    p_k.mutableMultiply(beta_k);    p_k.mutableAdd(r_k);    RdR=newRdR;  } while (k++ < A.rows());  return x;}  }
class C{  public void checkForUpdates(){  if (!GdtPreferences.areUpdateNotificationsEnabled()) {    return;  }synchronized (downloadJobs) {    if (downloadJobs.size() > 0) {      return;    }  }  if (!updateCheckStrategy.shouldCheckForUpdates(GdtPreferences.getLastUpdateTimeMillis())) {    return;  }  GdtPreferences.setLastUpdateTimeMillis(System.currentTimeMillis());  ExtensionQuery<DownloadJobCreator> extQuery=new ExtensionQuery<DownloadJobCreator>(GdtExtPlugin.PLUGIN_ID,"updatePing","class");  List<ExtensionQuery.Data<DownloadJobCreator>> dlCreators=extQuery.getData();  dlCreators.add(new Data<DownloadJobCreator>(this,null));  for (  Data<DownloadJobCreator> datum : dlCreators) {    try {      File tempFile=createTmpFile();      DownloadJobCreator dljc=datum.getExtensionPointData();      DownloadJob downloadJob=dljc.createDownloadJob(tempFile,urlGenerator);      addDownloadJob(downloadJob);    } catch (    Exception e) {      CorePluginLog.logError(e);    }  }}  }
class C{  public Object remove(int posn) throws InvalidNameException {  return impl.remove(posn);}  }
class C{  public static boolean hasBuilder(IProject project,String builderId) throws CoreException {  for (  ICommand builder : project.getDescription().getBuildSpec()) {    if (builder.getBuilderName().equals(builderId)) {      return true;    }  }  return false;}  }
class C{  public TextEditor(boolean tabsAsSpaces,boolean multiLineTab){  this(multiLineTab,tabsAsSpaces,false);}  }
class C{  public void clearProperties(Properties props){  m_props.clear(props);}  }
class C{  private String loadTemplate(){  String template="<no template>";  try {    File file=new File(templateFilename);    DataInputStream stream=new DataInputStream(new FileInputStream(file));    BufferedReader reader=new BufferedReader(new InputStreamReader(stream));    StringBuffer buffer=new StringBuffer();    int c;    while ((c=reader.read()) != -1) {      buffer.append((char)c);    }    template=buffer.toString();    reader.close();  } catch (  IOException e) {    System.out.println(e.getMessage());    messageAndExit("GenSwingBeanInfo: Couldn't load template: " + templateFilename + e);  }  return template;}  }
class C{  public void changeHighlight(Object tag,int p0,int p1) throws BadLocationException {  if (p0 < 0) {    throw new BadLocationException("Invalid beginning of the range",p0);  }  if (p1 < p0) {    throw new BadLocationException("Invalid end of the range",p1);  }  Document doc=component.getDocument();  if (tag instanceof LayeredHighlightInfo) {    LayeredHighlightInfo lhi=(LayeredHighlightInfo)tag;    if (lhi.width > 0 && lhi.height > 0) {      component.repaint(lhi.x,lhi.y,lhi.width,lhi.height);    }    lhi.width=lhi.height=0;    lhi.p0=doc.createPosition(p0);    lhi.p1=doc.createPosition(p1);    safeDamageRange(Math.min(p0,p1),Math.max(p0,p1));  } else {    HighlightInfo info=(HighlightInfo)tag;    int oldP0=info.p0.getOffset();    int oldP1=info.p1.getOffset();    if (p0 == oldP0) {      safeDamageRange(Math.min(oldP1,p1),Math.max(oldP1,p1));    } else     if (p1 == oldP1) {      safeDamageRange(Math.min(p0,oldP0),Math.max(p0,oldP0));    } else {      safeDamageRange(oldP0,oldP1);      safeDamageRange(p0,p1);    }    info.p0=doc.createPosition(p0);    info.p1=doc.createPosition(p1);  }}  }
class C{  @Override public TokenOnWire decode(String encodedToken) throws SecurityException {  try {    if (_tokenEncodingDisabler != null) {      return new TokenOnWire(URI.create(encodedToken));    }    byte[] decoded=Base64.decodeBase64(encodedToken.getBytes("UTF-8"));    SignedToken st=_serializer.fromByteArray(SignedToken.class,decoded);    TokenOnWire tw=_serializer.fromByteArray(TokenOnWire.class,st.getTokenBody());    SecretKey foreignKey=null;    String vdcId=URIUtil.parseVdcIdFromURI(tw.getTokenId());    if (vdcId == null) {      _log.info("Old token from ViPR 1.1 - treating token as local");    } else     if (!tw.isProxyToken() && !VdcUtil.getLocalShortVdcId().equals(vdcId)) {      foreignKey=getForeignKey(tw,encodedToken);    } else {      _log.info("Token VDCid {} matches that of this VDC {}",vdcId,VdcUtil.getLocalShortVdcId());    }    String key=tw.getEncryptionKeyId();    SecretKey skey=foreignKey == null ? _keyGenerator.getTokenSignatureKey(key) : foreignKey;    if (skey == null) {      String error=String.format("The key id %s provided in the token could not be matched to secret key",key);      _log.error(error);      throw SecurityException.fatals.keyIDCouldNotBeMatchedToSecretKey(key);    }    String signatureFromToken=st._signature;    String computedSignature=SignatureHelper.sign2(st._tokenBody,skey,TOKEN_SIGNING_ALGO);    if (!signatureFromToken.equals(computedSignature)) {      String error=String.format("The signature on the provided token does not validate");      _log.error(error);      throw APIException.unauthorized.unableToDecodeTokenTheSignatureDoesNotValidate();    }    return tw;  } catch (  Exception ex) {    throw APIException.unauthorized.unableToDecodeToken(ex);  }}  }
class C{  public HadoopDaemon(Runnable runnable){  super(runnable);  this.runnable=runnable;  this.setName(runnable.toString());  enqueueIfNeeded();}  }
class C{  public SolrCoreLoadException(String message){  super(message);}  }
class C{  protected int generateNextNewNodeId(){  int nextId=m_nextNewNodeId;  m_nextNewNodeId=m_nextNewNodeId - 1;  return nextId;}  }
class C{  public void serializeKey(Object key,DataOutput dataOutput) throws IOException {  serializeObject(key,dataOutput,false);}  }
class C{  public static String toListString(Collection arg,int maxSize,boolean safe){  return formatCollection(arg,false,maxSize,safe);}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  public boolean isMapAccessor(){  return getAccessibleObject().isSupportedMapClass(getRawClass());}  }
class C{  @Ignore @Test public final void signedAssertionTest(){  log.info("\nsignedAssertionTest: ");  this.assertionTestSuccess("signed-assertion.xml",false);}  }
class C{  public void consume(){  if (!hasBeenConsumed) {    try {      getSoapContent().close();    } catch (    Exception ignored) {      log.warn("Error closing SOAP content input stream: {}",ignored);    }  }}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  private static <T>T cast(Class<T> clazz,Object o){  if (!clazz.isInstance(o))   throw new IllegalArgumentException(o.toString());  return clazz.cast(o);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  List<PropertyChangeListener> l=Arrays.asList(listenerList.getListeners(PropertyChangeListener.class));  if (!l.contains(listener)) {    listenerList.add(PropertyChangeListener.class,listener);  }}  }
class C{  public String skipMeanTipText(){  return "If enabled, the mean is skipped, ie not output.";}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("hc_staff",true);  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        newNode=doc.createEntityReference("ent1");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {    newNode=doc.createEntityReference("ent1");    assertNotNull("createdEntRefNotNull",newNode);    newValue=newNode.getNodeValue();    assertNull("initiallyNull",newValue);    newNode.setNodeValue("This should have no effect");    newValue=newNode.getNodeValue();    assertNull("nullAfterAttemptedChange",newValue);  }}  }
class C{  public LineIterator(final Reader reader) throws IllegalArgumentException {  if (reader == null) {    throw new IllegalArgumentException("Reader must not be null");  }  if (reader instanceof BufferedReader) {    bufferedReader=(BufferedReader)reader;  } else {    bufferedReader=new BufferedReader(reader);  }}  }
class C{  @Override public synchronized void addConfigurationListener(ConfigurationListener cl){}  }
class C{  public GitHub connect() throws ServerException, UnauthorizedException {  try {    return GitHub.connectUsingOAuth(getToken());  } catch (  IOException e) {    throw new ServerException(e.getMessage());  }}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  @Override public void putAll(Map<? extends Float,? extends Integer> map){  Iterator<? extends Entry<? extends Float,? extends Integer>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Float,? extends Integer> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public GeometryCollectionIterator(Geometry parent){  this.parent=parent;  atStart=true;  index=0;  max=parent.getNumGeometries();}  }
class C{  public NewCookie(String name,String value,String path,String domain,String comment,int maxAge,boolean secure){  this(name,value,path,domain,DEFAULT_VERSION,comment,maxAge,secure,false);}  }
class C{  protected void doWriteObject(ObjectOutputStream out) throws IOException {  out.writeInt(keyType);  out.writeInt(valueType);  out.writeBoolean(purgeValues);  out.writeFloat(loadFactor);  out.writeInt(data.length);  for (MapIterator it=mapIterator(); it.hasNext(); ) {    out.writeObject(it.next());    out.writeObject(it.getValue());  }  out.writeObject(null);}  }
class C{  public static final double kilogramsToSlugs(double kilograms){  return kilograms * KILOGRAM_TO_SLUG;}  }
class C{  public int optInt(int index){  return optInt(index,0);}  }
class C{  JavaSourceFromString(@NotNull String name,String code){  super(URI.create("string:///" + name.replace('.','/') + Kind.SOURCE.extension),Kind.SOURCE);  this.code=code;}  }
class C{  public BugExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (m_removeFilter != null) {    m_removeFilter.input(instance);    Instance processed=m_removeFilter.output();    processed.setDataset(getOutputFormat());    copyValues(processed,false,instance.dataset(),getOutputFormat());    push(processed);    return true;  }  bufferInput(instance);  return false;}  }
class C{  public CompilationUnitChange createChange(String name,boolean generateGroups) throws CoreException {  CompilationUnitChange cuChange=new CompilationUnitChange(name,document);  MultiTextEdit multiEdit=new MultiTextEdit();  cuChange.setEdit(multiEdit);  return attachChange(cuChange,generateGroups);}  }
class C{  public LayerFactory(String[] args){  this.args=args;  pathStr=getClass().getProtectionDomain().getCodeSource().getLocation().getPath();  if (pathStr.toLowerCase().endsWith(".jar")) {    int p=pathStr.lastIndexOf('/');    pathStr=pathStr.substring(0,p + 1);  } else {    pathStr+="../";  }}  }
class C{  public static Collection<AnnotationValue> resolveTypeQualifierDefaults(Collection<AnnotationValue> values,ElementType elementType){  LinkedList<AnnotationValue> result=new LinkedList<AnnotationValue>();  for (  AnnotationValue value : values) {    resolveTypeQualifierDefaults(value,elementType,result);  }  return result;}  }
class C{  public void toEPL(StringWriter writer){  writer.append("into table ");  writer.append(tableName);  writer.append(" ");}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  setDeptName(request);}  }
class C{  Type toInt(Type type){  type.apply(this);  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr createdAttr;  doc=(Document)load("hc_staff",true);{    boolean success=false;    try {      createdAttr=doc.createAttribute("");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public PlatformException(){}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> map){  putAllImpl(map);}  }
class C{  private void calculateFitness(T c){  for (  FitnessFunction<T> fitnessFunction : this.uncoveredGoals) {    fitnessFunction.getFitness(c);  }  notifyEvaluation(c);}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public void clearCache(){  clearMemoryCache();  clearDiskCache();}  }
class C{  public static void enable(String item){  enable(Item.valueOf(item));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void printStackTrace(PrintStream stream){  super.printStackTrace(stream);  if (this.encapsulatedException != null) {    stream.println("*** Nested Exception:");    this.encapsulatedException.printStackTrace(stream);  }}  }
class C{  public MockResultSet(Object beans[]){  if (beans == null) {    throw new NullPointerException();  }  this.beans=beans;  this.clazz=beans.getClass().getComponentType();}  }
class C{  public Object put(String key,Object value){  final int len=key.length();  if (len > m_charBuffer.length) {    m_charBuffer=new char[len];  }  Node node=m_Root;  for (int i=0; i < len; i++) {    Node nextNode=node.m_nextChar[Character.toLowerCase(key.charAt(i))];    if (nextNode != null) {      node=nextNode;    } else {      for (; i < len; i++) {        Node newNode=new Node();        if (m_lowerCaseOnly) {          node.m_nextChar[Character.toLowerCase(key.charAt(i))]=newNode;        } else {          node.m_nextChar[Character.toUpperCase(key.charAt(i))]=newNode;          node.m_nextChar[Character.toLowerCase(key.charAt(i))]=newNode;        }        node=newNode;      }      break;    }  }  Object ret=node.m_Value;  node.m_Value=value;  return ret;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFilterElement(prefix,(AbstractDocument)doc);}  }
class C{  public void dispose(){  for (  final IProjectListener listener : m_wrappers) {    m_project.removeListener(listener);  }}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == treeField)   action_loadTree(); else   if (e.getSource() == bAddAll)   action_treeAddAll(); else   if (e.getSource() == bAdd)   action_treeAdd((ListItem)centerList.getSelectedValue()); else   if (e.getSource() == bDelete)   action_treeDelete((ListItem)centerList.getSelectedValue()); else   if (e.getSource() == bDeleteAll)   action_treeDeleteAll();}  }
class C{  public static Flow flowFromXml(Element doc){  Flow f=null;  String complexity=null;  NodeList elements=doc.getElementsByTagNameNS(HUB_NS,"complexity");  if (elements.getLength() == 1) {    complexity=elements.item(0).getTextContent();  }  if (complexity.equals(FlowComplexity.SIMPLE.toString())) {    f=new SimpleFlow(doc);  }  return f;}  }
class C{  public static boolean intersectSegments(Vector2 p1,Vector2 p2,Vector2 p3,Vector2 p4,Vector2 intersection){  float x1=p1.x, y1=p1.y, x2=p2.x, y2=p2.y, x3=p3.x, y3=p3.y, x4=p4.x, y4=p4.y;  float d=(y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);  if (d == 0)   return false;  float ua=((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / d;  float ub=((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / d;  if (ua < 0 || ua > 1)   return false;  if (ub < 0 || ub > 1)   return false;  if (intersection != null)   intersection.set(x1 + (x2 - x1) * ua,y1 + (y2 - y1) * ua);  return true;}  }
class C{  public static String meterToString(OFInstructionMeter inst,Logger log){  return Long.toString(inst.getMeterId());}  }
class C{  public static Mapping<BigInteger> bigInt(Constraint... constraints){  return new FieldMapping(InputMode.SINGLE,mkSimpleConverter(null),new MappingMeta("bitInteger",BigInteger.class)).constraint(checking(null,"error.bigint",true)).constraint(constraints);}  }
class C{  MetricCommitter(CollectionService colletionService,MonitorService monitorService,AtomicInteger jobCounter){  super(colletionService,monitorService,jobCounter);}  }
class C{  public void sendPluginResult(PluginResult result,String callbackId){  this.bridge.getMessageQueue().addPluginResult(result,callbackId);}  }
class C{  @Override public void generate(XmlWriter w,ExtensionProfile extProfile) throws IOException {  generateStartElement(w,Namespaces.GML_NAMESPACE,NAME,null,null);  generateExtensions(w,extProfile);  w.endElement(Namespaces.GML_NAMESPACE,NAME);}  }
class C{  public UnchangeableAllowingOnBehalfActingException(){}  }
class C{  @Override public void run(){  try {    for (    AsyncTaskWorker taskWorker : taskWorkers.values()) {      taskWorker.init();    }    long prevNs=System.nanoTime();    while (!shutdownNow) {      if (throwable != null) {        log.error("Caught throwable and stopping run loop",throwable);        throw new SamzaException(throwable);      }      long startNs=System.nanoTime();      IncomingMessageEnvelope envelope=chooseEnvelope();      long chooseNs=System.nanoTime();      containerMetrics.chooseNs().update(chooseNs - startNs);      runTasks(envelope);      long blockNs=System.nanoTime();      blockIfBusy(envelope);      long currentNs=System.nanoTime();      long activeNs=blockNs - chooseNs;      long totalNs=currentNs - prevNs;      prevNs=currentNs;      containerMetrics.blockNs().update(currentNs - blockNs);      containerMetrics.utilization().set(((double)activeNs) / totalNs);    }  }  finally {    workerTimer.shutdown();    callbackExecutor.shutdown();    if (callbackTimer != null)     callbackTimer.shutdown();  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.LITERAL_ANNOTATION_ARGUMENT__LITERAL:    return basicSetLiteral(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  static void register(final Object value){synchronized (HashCode.class) {    if (getRegistry() == null) {      REGISTRY.set(new HashSet<IDKey>());    }  }  getRegistry().add(new IDKey(value));}  }
class C{  public static void initUserInterface(){  if (ClientSingletonRepository.getUserInterface() == null) {    ClientSingletonRepository.setUserInterface(new MockUserInterface());  }}  }
class C{  private String parseVariable(String variable,PO po){  int index=po.get_ColumnIndex(variable);  if (index == -1)   return "@" + variable + "@";  Object value=po.get_Value(index);  if (value == null)   return "";  return value.toString();}  }
class C{  public final void start(Result<I> result){  _strategy.start(this,result);}  }
class C{  public AuthorityKeyIdentifier(byte[] keyIdentifier,GeneralNames name,BigInteger serialNumber){  this.keyidentifier=new DEROctetString(keyIdentifier);  this.certissuer=GeneralNames.getInstance(name.toASN1Primitive());  this.certserno=new ASN1Integer(serialNumber);}  }
class C{  private static double round2(double val){  return Math.floor(100 * val + 0.5) / 100;}  }
class C{  public boolean usesSingleTableInheritanceStrategy(){  return ((EntityAccessor)m_classAccessor).getInheritance().usesSingleTableStrategy();}  }
class C{  @Override protected double solveImpl(final Ops.DoubleOp f,final double xAccuracy){  double fxMid, froot, s, xMid, nextRoot;  final double xAccuracy_=xAccuracy / 100.0;  root=Constants.QL_MIN_POSITIVE_REAL;  while (evaluationNumber <= getMaxEvaluations()) {    xMid=0.5 * (xMin + xMax);    fxMid=f.op(xMid);    evaluationNumber++;    s=Math.sqrt(fxMid * fxMid - fxMin * fxMax);    if (s == 0.0)     return root;    nextRoot=xMid + (xMid - xMin) * ((fxMin >= fxMax ? 1.0 : -1.0) * fxMid / s);    if (Math.abs(nextRoot - root) <= xAccuracy_)     return root;    root=nextRoot;    froot=f.op(root);    evaluationNumber++;    if (froot == 0.0)     return root;    if (sign(fxMid,froot) != fxMid) {      xMin=xMid;      fxMin=fxMid;      xMax=root;      fxMax=froot;    } else     if (sign(fxMin,froot) != fxMin) {      xMax=root;      fxMax=froot;    } else     if (sign(fxMax,froot) != fxMax) {      xMin=root;      fxMin=froot;    } else     throw new LibraryException("internal error");    if (Math.abs(xMax - xMin) <= xAccuracy_)     return root;  }  throw new ArithmeticException("maximum number of function evaluations exceeded");}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  protected void cleanup(){  die(SET,true);  alive(SET,false);}  }
class C{  private void warpStraightLines(){  PathMeasure pmTemp=new PathMeasure();  for (int i=0; i < mConfig.complexity; i++) {    if (lineRifts[i].isStraight()) {      pmTemp.setPath(lineRifts[i],false);      lineRifts[i].setStartLength(pmTemp.getLength() / 2);      float[] pos=new float[2];      pmTemp.getPosTan(pmTemp.getLength() / 2,pos,null);      int xRandom=(int)(pos[0] + Utils.nextInt(-Utils.dp2px(1),Utils.dp2px(1)));      int yRandom=(int)(pos[1] + Utils.nextInt(-Utils.dp2px(1),Utils.dp2px(1)));      lineRifts[i].reset();      lineRifts[i].moveTo(0,0);      lineRifts[i].lineTo(xRandom,yRandom);      lineRifts[i].lineToEnd();    }  }}  }
class C{  public void textValueChanged(TextEvent e){  if (AWTEventMonitor.textListener_private != null) {    AWTEventMonitor.textListener_private.textValueChanged(e);  }}  }
class C{  public TransportChannelSettings(EndpointDescription description,EndpointConfiguration configuration,KeyPair keypair,CertificateValidator certValidator,X509HostnameVerifier hostnameVerifier) throws RuntimeServiceResultException {  super();  this.configuration=configuration;  this.description=description;  this.httpsSettings.setKeyPair(keypair);  this.httpsSettings.setCertificateValidator(certValidator);  this.httpsSettings.setHostnameVerifier(hostnameVerifier);}  }
class C{  public void noteReference(Environment env,Context ctx){  if (localField == null && !localArgumentAvailable(env,ctx)) {    makeLocalField(env);  }}  }
class C{  private boolean configureConnectionForHttpPost(HttpURLConnection connection) throws IOException {  String boundary=readBoundary();  if (boundary == null) {    return false;  }  connection.setDoOutput(true);  connection.setRequestProperty("Connection","Keep-Alive");  connection.setRequestProperty("Content-Encoding","gzip");  connection.setRequestProperty("Content-Type",String.format(CONTENT_TYPE_TMPL,boundary));  return true;}  }
class C{  protected boolean hasDividerBeforeChildAt(int childIndex){  if (childIndex == 0) {    return (mShowDividers & SHOW_DIVIDER_BEGINNING) != 0;  } else   if (childIndex == getChildCount()) {    return (mShowDividers & SHOW_DIVIDER_END) != 0;  } else   if ((mShowDividers & SHOW_DIVIDER_MIDDLE) != 0) {    boolean hasVisibleViewBefore=false;    for (int i=childIndex - 1; i >= 0; i--) {      if (getChildAt(i).getVisibility() != GONE) {        hasVisibleViewBefore=true;        break;      }    }    return hasVisibleViewBefore;  }  return false;}  }
class C{  public static ECKey fromPublicOnly(byte[] pub){  return new ECKey(null,CURVE.getCurve().decodePoint(pub));}  }
class C{  public void removeMapEventsListener(MapEventsListener listener){  if (mapEventsListeners != null) {    mapEventsListeners.remove(listener);  }}  }
class C{  public static void main(final String[] args){  try {    Preconditions.checkArgument(args.length == 1,"Please pass in the Google Cloud Storage bucket name to display");    String bucketName=args[0];    String content=listBucket(bucketName);    prettyPrintXml(bucketName,content);    System.exit(0);  } catch (  IOException e) {    System.err.println(e.getMessage());  }catch (  Throwable t) {    t.printStackTrace();  }  System.exit(1);}  }
class C{  @Override public void actionPerformed(ActionEvent e){  Object o;  o=e.getSource();  if (o == menuItemMean) {    calcMean();  } else   if (o == menuItemSetAllValues) {    setValues(menuItemSetAllValues);  } else   if (o == menuItemSetMissingValues) {    setValues(menuItemSetMissingValues);  } else   if (o == menuItemReplaceValues) {    setValues(menuItemReplaceValues);  } else   if (o == menuItemRenameAttribute) {    renameAttribute();  } else   if (o == menuItemAttributeAsClass) {    attributeAsClass();  } else   if (o == menuItemDeleteAttribute) {    deleteAttribute();  } else   if (o == menuItemDeleteAttributes) {    deleteAttributes();  } else   if (o == menuItemDeleteSelectedInstance) {    deleteInstance();  } else   if (o == menuItemDeleteAllSelectedInstances) {    deleteInstances();  } else   if (o == menuItemSortInstances) {    sortInstances();  } else   if (o == menuItemSearch) {    search();  } else   if (o == menuItemClearSearch) {    clearSearch();  } else   if (o == menuItemUndo) {    undo();  } else   if (o == menuItemCopy) {    copyContent();  } else   if (o == menuItemOptimalColWidth) {    setOptimalColWidth();  } else   if (o == menuItemOptimalColWidths) {    setOptimalColWidths();  }}  }
class C{  public Chronology withZone(DateTimeZone zone){  if (zone == null) {    zone=DateTimeZone.getDefault();  }  if (zone == getZone()) {    return this;  }  return getInstance(zone);}  }
class C{  public void timestamp(final String identifier){  ensureIdentifier(identifier);  this.currentIterationValues.put(identifier,Long.valueOf(System.currentTimeMillis()));}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGraphPackage.REGION__VERTICES:    getVertices().clear();  getVertices().addAll((Collection<? extends Vertex>)newValue);return;case SGraphPackage.REGION__COMPOSITE:setComposite((CompositeElement)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public DrawerBuilder withToolbar(@NonNull Toolbar toolbar){  this.mToolbar=toolbar;  return this;}  }
class C{  private boolean parseAutolink(){  String m;  if ((m=match(EMAIL_AUTOLINK)) != null) {    String dest=m.substring(1,m.length() - 1);    Link node=new Link("mailto:" + dest,null);    node.appendChild(new Text(dest));    appendNode(node);    return true;  } else   if ((m=match(AUTOLINK)) != null) {    String dest=m.substring(1,m.length() - 1);    Link node=new Link(dest,null);    node.appendChild(new Text(dest));    appendNode(node);    return true;  } else {    return false;  }}  }
class C{  public TransformerFactoryConfigurationError(){  this.exception=null;}  }
class C{  protected ForeignKeyConstraint buildForeignKeyConstraint(List<String> fkFieldNames,List<String> pkFieldNames,TableDefinition targetTable,DatabasePlatform platform){  assert fkFieldNames.size() > 0 && fkFieldNames.size() == pkFieldNames.size();  ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint();  for (int i=0; i < fkFieldNames.size(); i++) {    fkConstraint.getSourceFields().add(fkFieldNames.get(i));    fkConstraint.getTargetFields().add(pkFieldNames.get(i));  }  fkConstraint.setTargetTable(targetTable.getFullName());  String fkFieldName=fkFieldNames.get(0);  String name=buildForeignKeyConstraintName(this.getName(),fkFieldName,platform.getMaxForeignKeyNameSize(),platform);  fkConstraint.setName(name);  return fkConstraint;}  }
class C{  @Override public boolean willNotMoveInCurrentCollection(ObjectReference object){  return true;}  }
class C{  protected void findDomainLimits(){  long startL=getOldestTime().getFirstMillisecond(this.workingCalendar);  long endL;  if (this.domainIsPointsInTime) {    endL=getNewestTime().getFirstMillisecond(this.workingCalendar);  } else {    endL=getNewestTime().getLastMillisecond(this.workingCalendar);  }  this.domainStart=new Long(startL);  this.domainEnd=new Long(endL);  this.domainRange=new Range(startL,endL);}  }
class C{  public CertificateMessage(X509Certificate[] certs){  if (certs == null) {    this.certs=new X509Certificate[0];    encoded_certs=new byte[0][0];    length=3;    return;  }  this.certs=certs;  if (encoded_certs == null) {    encoded_certs=new byte[certs.length][];    for (int i=0; i < certs.length; i++) {      try {        encoded_certs[i]=certs[i].getEncoded();      } catch (      CertificateEncodingException e) {        fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);      }    }  }  length=3 + 3 * encoded_certs.length;  for (int i=0; i < encoded_certs.length; i++) {    length+=encoded_certs[i].length;  }}  }
class C{  public Vector3(){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.msg.SystemMessage sm=getSysMsg(stack);  if (sm != null)   return new Integer(sm.getRepeatCount()); else   return null;}  }
class C{  public final void removeAll(){  actionList.clear();  constraintsList.clear();  needSorting=true;}  }
class C{  public void closeAndDisconnectSocket(){  if (mSocket != null) {    LogCS.e("LOG","Closing socket");    mSocket.close();    mSocket.disconnect();    mSocket=null;    mListener=null;  }}  }
class C{  public RecordableHistoryEvent(String eventType,long timestamp,Recordable recordable,String referrer,String action){  this(eventType,timestamp,recordable,referrer,action,Collections.emptyMap());}  }
class C{  private int measureWidth(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)mTextPaint.measureText(mText) + getPaddingLeft() + getPaddingRight();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void ReInit(CharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  protected void update(){  T entity=this.entity;  if (entity == null) {    return;  }  if (representationChanged) {    representationChanged=false;    buildRepresentation(entity);  }  if (positionChanged) {    positionChanged=false;    x=(int)(IGameScreen.SIZE_UNIT_PIXELS * entity.getX());    y=(int)(IGameScreen.SIZE_UNIT_PIXELS * entity.getY());  }  if (visibilityChanged) {    visibilityChanged=false;    entityComposite=getComposite();  }  if (animatedChanged) {    animatedChanged=false;    setAnimation(getSprite());  }}  }
class C{  protected Object toType(Calendar value){  return value.getTime();}  }
class C{  public static void copy(byte[] in,File out) throws IOException {  Assert.notNull(in,"No input byte array specified");  Assert.notNull(out,"No output File specified");  ByteArrayInputStream inStream=new ByteArrayInputStream(in);  OutputStream outStream=new BufferedOutputStream(new FileOutputStream(out));  copy(inStream,outStream);}  }
class C{  protected void updateParticles(){  for (  ParticleBehavior3D b : behaviors) {    for (    VerletParticle3D p : particles) {      b.apply(p);    }  }  for (  VerletParticle3D p : particles) {    p.scaleVelocity(drag);    p.update();  }}  }
class C{  private static boolean isFastMobileNetwork(Context context){  TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephonyManager == null) {    return false;  }switch (telephonyManager.getNetworkType()) {case TelephonyManager.NETWORK_TYPE_1xRTT:    return false;case TelephonyManager.NETWORK_TYPE_CDMA:  return false;case TelephonyManager.NETWORK_TYPE_EDGE:return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:return false;default :return false;}}  }
class C{  public void testIntValue(){  DoubleAccumulator ai=new DoubleAccumulator(null,0.0);  assertEquals(0,ai.intValue());  ai.accumulate(1.0);  assertEquals(1,ai.intValue());}  }
class C{  public void remove(int index){  if (SysProperties.CHECK) {    if (index >= size) {      throw new ArrayIndexOutOfBoundsException("i=" + index + " size="+ size);    }  }  System.arraycopy(data,index + 1,data,index,size - index - 1);  size--;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.535 -0400",hash_original_method="49AC27A7F28BB7CC4CAE7796BC890A9C",hash_generated_method="D136B65B9337192EAEC3B1931FB40244") private static String doGetPath(String filename,int separatorAdd){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  int index=indexOfLastSeparator(filename);  int endIndex=index + separatorAdd;  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {    return "";  }  return filename.substring(prefix,endIndex);}  }
class C{  public static boolean checkCGVolumeCanBeAddedOrRemoved(BlockConsistencyGroup cg,Volume volume,DbClient dbClient){  StorageSystem storage=dbClient.queryObject(StorageSystem.class,volume.getStorageController());  if (storage != null) {    if (storage.deviceIsType(Type.vmax)) {      if (storage.getUsingSmis80()) {        return true;      }    } else     if (storage.deviceIsType(Type.vnxblock)) {      BlockConsistencyGroup consistencyGroup=cg;      if (consistencyGroup == null) {        consistencyGroup=dbClient.queryObject(BlockConsistencyGroup.class,volume.getConsistencyGroup());      }      if (consistencyGroup != null && !consistencyGroup.getInactive()) {        return !consistencyGroup.getArrayConsistency();      }    } else     if (storage.deviceIsType(Type.xtremio)) {      return true;    } else     if (storage.deviceIsType(Type.unity) && volume.checkForRp()) {      return true;    }    if (storage.deviceIsType(Type.vplex)) {      Set<Type> applicationSupported=Sets.newHashSet(Type.vmax,Type.vnxblock,Type.xtremio,Type.unity);      Set<Type> backendSystemTypes=new HashSet<>();      if (volume.getAssociatedVolumes() != null && !volume.getAssociatedVolumes().isEmpty()) {        for (        String associatedVolumeId : volume.getAssociatedVolumes()) {          Volume associatedVolume=dbClient.queryObject(Volume.class,URI.create(associatedVolumeId));          if (associatedVolume != null) {            StorageSystem backendSystem=dbClient.queryObject(StorageSystem.class,associatedVolume.getStorageController());            if (backendSystem != null && !Strings.isNullOrEmpty(backendSystem.getSystemType())) {              backendSystemTypes.add(Type.valueOf(backendSystem.getSystemType()));            }          }        }      }      if (volume.getApplication(dbClient) != null) {        return !Collections.disjoint(applicationSupported,backendSystemTypes);      } else       if (!Volume.checkForRP(dbClient,volume.getId())) {        return backendSystemTypes.contains(Type.vmax);      }    }  }  return false;}  }
class C{  private void paintTrack(java.awt.Graphics2D g2,Agent a){  Map map=getMapEnv().getMap();  Point2D lastPt=null;  g2.setColor(Color.red);  for (  String loc : getTrack(a)) {    Point2D pt=map.getPosition(loc);    if (pt != null && lastPt != null) {      g2.drawLine(x(pt),y(pt),x(lastPt),y(lastPt));    }    lastPt=pt;  }}  }
class C{  public static final String formatVector2(Vector2 v){  return MessageFormat.format(Messages.getString("canvas.vector.format"),v.x,v.y);}  }
class C{  public JOSMTolerantFastXMLReader(File file,boolean enableDateParsing,CompressionMethod compressionMethod){  this.file=file;  this.enableDateParsing=enableDateParsing;  this.compressionMethod=compressionMethod;}  }
class C{  public void absorbGlow(int x,int y,int oldX,int oldY,int rangeX,int rangeY){  if (rangeY > 0 || mHostView.getWebView().getOverScrollMode() == View.OVER_SCROLL_ALWAYS) {    if (y < 0 && oldY >= 0) {      mEdgeGlowTop.onAbsorb((int)mHostView.mScroller.getCurrVelocity());      if (!mEdgeGlowBottom.isFinished()) {        mEdgeGlowBottom.onRelease();      }    } else     if (y > rangeY && oldY <= rangeY) {      mEdgeGlowBottom.onAbsorb((int)mHostView.mScroller.getCurrVelocity());      if (!mEdgeGlowTop.isFinished()) {        mEdgeGlowTop.onRelease();      }    }  }  if (rangeX > 0) {    if (x < 0 && oldX >= 0) {      mEdgeGlowLeft.onAbsorb((int)mHostView.mScroller.getCurrVelocity());      if (!mEdgeGlowRight.isFinished()) {        mEdgeGlowRight.onRelease();      }    } else     if (x > rangeX && oldX <= rangeX) {      mEdgeGlowRight.onAbsorb((int)mHostView.mScroller.getCurrVelocity());      if (!mEdgeGlowLeft.isFinished()) {        mEdgeGlowLeft.onRelease();      }    }  }}  }
class C{  public boolean shouldVisitCode(Code obj){  return true;}  }
class C{  public static <T,P,R>Function<T,R> bind(Function2<? super T,? super P,? extends R> function,P parameter){  return new BindFunction2<>(function,parameter);}  }
class C{  private void checkAndCreateSiteSpecificSection() throws Exception {  if (isSiteSpecificSectionInited()) {    log.info("Site specific section for {} initialized",getSiteId());    return;  }  log.info("The site specific section has NOT been initialized");  InterProcessLock lock=getLock(ZkPath.SITES.name());  try {    lock.acquire();    if (!isSiteSpecificSectionInited()) {      createSiteSpecificSection();    }  } catch (  Exception e) {    log.error("Failed to initialize site specific area for {}.",ZkPath.SITES,e);    throw e;  } finally {    try {      lock.release();    } catch (    Exception e) {      log.error("Failed to release the lock for {}. Error {}",ZkPath.SITES,e);    }  }}  }
class C{  public CCTexture2D addImage(String path){  assert path != null : "TextureMgr: path must not be null";  WeakReference<CCTexture2D> texSR=textures.get(path);  CCTexture2D tex=null;  if (texSR != null)   tex=texSR.get();  if (tex == null) {    tex=createTextureFromFilePath(path);    textures.put(path,new WeakReference<CCTexture2D>(tex));  }  return tex;}  }
class C{  public EncryptedPdfException(String message,Throwable cause){  super(message,cause);}  }
class C{  private synchronized float updateOrResetReqRspAvgLstMin(int diff,boolean reset){  return updateOrResetSampledValues(diff,reset,_reqRspPerMin);}  }
class C{  private static Pair<String,String> immediateRotateZero(final String immediateNodeValue){  return new Pair<String,String>(immediateNodeValue,"C");}  }
class C{  public Builder(MemberRef member){  super(member);  type=member.type;}  }
class C{  public boolean isIncremental(){  return true;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void offsetChildrenTopAndBottom(int offset){  for (int i=getChildCount() - 1; i >= 0; i--) {    getChildAt(i).offsetTopAndBottom(offset);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {      getChildAt(i).invalidate();    }  }}  }
class C{  private <T extends AnnotatedTypeMirror>T castLub(T type,AnnotatedTypeMirror lub){  if (type.getKind() != lub.getKind()) {    ErrorReporter.errorAbort("AtmLubVisitor: unexpected type. Found: %s Required %s",lub.getKind(),type.getKind());  }  @SuppressWarnings("unchecked") T castedLub=(T)lub;  return castedLub;}  }
class C{  public static boolean isValidNmtoken(String nmtoken){  if (nmtoken.length() == 0)   return false;  for (int i=0; i < nmtoken.length(); i++) {    char ch=nmtoken.charAt(i);    if (!isName(ch)) {      return false;    }  }  return true;}  }
class C{  public static void validateLocaleAndFonts(Locale locale){}  }
class C{  private static boolean isUpdated(GHPullRequest remotePR,GitHubPRPullRequest localPR){  if (isNull(localPR)) {    return true;  }  try {    boolean prUpd=new CompareToBuilder().append(localPR.getPrUpdatedAt(),remotePR.getUpdatedAt()).build() < 0;    boolean issueUpd=new CompareToBuilder().append(localPR.getIssueUpdatedAt(),remotePR.getIssueUpdatedAt()).build() < 0;    boolean headUpd=!StringUtils.equals(localPR.getHeadSha(),remotePR.getHead().getSha());    boolean updated=prUpd || issueUpd || headUpd;    if (updated) {      LOGGER.info("Pull request #{} was updated at: {} by {}",localPR.getNumber(),localPR.getPrUpdatedAt(),localPR.getUserLogin());    }    return updated;  } catch (  IOException e) {    LOGGER.warn("Can't compare PR [#{} {}] with local copy for update",remotePR.getNumber(),remotePR.getTitle(),e);    return false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-05-05 09:46:51.838 -0400",hash_original_method="B04A2B3B6B1C783F73E39FBCC06ABA1D",hash_generated_method="83C9C378E9AEAA0B06DB29B5CA1E4601") void reverseChildren(){  if (child != null) {    ThreadContainer kid, prev, rest;    for (prev=null, kid=child, rest=kid.next; kid != null; prev=kid, kid=rest, rest=(rest == null ? null : rest.next)) {      kid.next=prev;    }    child=prev;    for (kid=child; kid != null; kid=kid.next) {      kid.reverseChildren();    }  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  private String buildMessage(Locale locale,String separator){  final StringBuilder sb=new StringBuilder();  int count=0;  final int len=msgPatterns.size();  for (int i=0; i < len; i++) {    final Localizable pat=msgPatterns.get(i);    final Object[] args=msgArguments.get(i);    final MessageFormat fmt=new MessageFormat(pat.getLocalizedString(locale),locale);    sb.append(fmt.format(args));    if (++count < len) {      sb.append(separator);    }  }  return sb.toString();}  }
class C{  public void checkPosition(){  int caretPosition=getCaretPosition();  if (caretPosition <= lineStart) {    setText(getText() + " ");    setCaretPosition(lineStart + 1);  }}  }
class C{  protected int directStep(RouteInfo plan,RouteInfo fact){  if (fact.getHopCount() > 1)   return UNREACHABLE;  if (!plan.getTargetHost().equals(fact.getTargetHost()))   return UNREACHABLE;  if (plan.isSecure() != fact.isSecure())   return UNREACHABLE;  if ((plan.getLocalAddress() != null) && !plan.getLocalAddress().equals(fact.getLocalAddress()))   return UNREACHABLE;  return COMPLETE;}  }
class C{  protected void readAlertDefinitionsAsSerializedObjects(){  StatAlertDefinition[] defns=new StatAlertDefinition[0];  File serFile=null;  FileInputStream foStr=null;  DataInputStream ooStr=null;  try {    serFile=new File(statAlertDefnSerFile);    if (!canWriteToFile(serFile)) {      canPersistStatAlertDefs=false;    }    if (!serFile.exists()) {      return;    }    if (logger.isDebugEnabled()) {      logger.debug("AdminDistributedSystemJmxImpl.readAlertDefinitionsAsSerializedObjects: File: {}",serFile.getPath());    }    foStr=new FileInputStream(serFile);    ooStr=new DataInputStream(foStr);    defns=(StatAlertDefinition[])DataSerializer.readObjectArray(ooStr);  } catch (  ClassNotFoundException cnfEx) {    logger.error(LocalizedMessage.create(LocalizedStrings.AdminDistributedSystem_ENCOUNTERED_A_0_WHILE_LOADING_STATALERTDEFINITIONS_1,new Object[]{cnfEx.getClass().getName(),statAlertDefnSerFile}),cnfEx);    canPersistStatAlertDefs=false;  }catch (  IOException ex) {    logger.error(LocalizedMessage.create(LocalizedStrings.AdminDistributedSystem_ENCOUNTERED_A_0_WHILE_LOADING_STATALERTDEFINITIONS_1_LOADING_ABORTED,new Object[]{ex.getClass().getName(),statAlertDefnSerFile}),ex);    canPersistStatAlertDefs=false;  } finally {    if (foStr != null) {      try {        foStr.close();      } catch (      IOException ex) {        ;      }    }    if (ooStr != null) {      try {        ooStr.close();      } catch (      IOException ex) {        ;      }    }  }  for (int i=0; i < defns.length; i++) {    updateAlertDefinition(defns[i]);  }}  }
class C{  public synchronized CLProgram build() throws CLBuildException {  if (built)   throw new IllegalThreadStateException("Program was already built !");  String contentSignature=null;  File cacheFile=null;  boolean readBinaries=false;  if (!loadedFromBinary && isCached()) {    try {      contentSignature=computeCacheSignature();      byte[] sha=java.security.MessageDigest.getInstance("MD5").digest(contentSignature.getBytes(textEncoding));      StringBuilder shab=new StringBuilder();      for (      byte b : sha)       shab.append(Integer.toHexString(b & 0xff));      String hash=shab.toString();      cacheFile=new File(JavaCL.userCacheDir,hash);      if (cacheFile.exists()) {        Pair<Map<CLDevice,byte[]>,String> bins=readBinaries(Arrays.asList(getDevices()),contentSignature,new FileInputStream(cacheFile));        setBinaries(bins.getFirst());        this.source=bins.getSecond();        assert log(Level.INFO,"Read binaries cache from '" + cacheFile + "'");        readBinaries=true;      }    } catch (    Throwable ex) {      assert log(Level.WARNING,"Failed to load cached program : " + ex.getMessage());      setEntity(0);    }  }  if (!isAllocated())   allocate();  Runnable deleteTempFiles=null;  if (!readBinaries)   try {    deleteTempFiles=copyIncludesToTemporaryDirectory();  } catch (  IOException ex) {    throw new CLBuildException(this,ex.toString(),Collections.EMPTY_LIST);  }  int nDevices=devices.length;  Pointer<SizeT> deviceIds=null;  if (nDevices != 0) {    deviceIds=allocateSizeTs(nDevices);    for (int i=0; i < nDevices; i++)     deviceIds.setSizeTAtIndex(i,devices[i].getEntity());  }  Pointer<Byte> pOptions=pointerToCString(getOptionsString());  int err=CL.clBuildProgram(getEntity(),nDevices,getPeer(deviceIds),getPeer(pOptions),0,0);  Pointer.release(pOptions);  Set<String> errors=getProgramBuildInfo(getEntity(),deviceIds);  if (err != CL_SUCCESS) {    throw new CLBuildException(this,"Compilation failure : " + errorString(err) + " (devices: "+ Arrays.asList(getDevices())+ ")",errors);  } else {    if (!errors.isEmpty())     JavaCL.log(Level.INFO,"Build info :\n\t" + StringUtils.implode(errors,"\n\t"));  }  built=true;  if (deleteTempFiles != null)   deleteTempFiles.run();  if (isCached() && !readBinaries && !loadedFromBinary) {    JavaCL.userCacheDir.mkdirs();    try {      Map<CLDevice,byte[]> binaries=getBinaries();      if (!binaries.isEmpty()) {        writeBinaries(getBinaries(),getSource(),contentSignature,new FileOutputStream(cacheFile));        assert log(Level.INFO,"Wrote binaries cache to '" + cacheFile + "'");      }    } catch (    Exception ex) {      new IOException("[JavaCL] Failed to cache program",ex).printStackTrace();    }  }  return this;}  }
class C{  private void nextState(){  State current=getState();  if (current == State.NOT_SELECTED) {    setState(State.SELECTED);  } else   if (current == State.SELECTED) {    setState(State.DONT_CARE);  } else   if (current == State.DONT_CARE) {    setState(State.NOT_SELECTED);  }}  }
class C{  private boolean metricIsInAwsDimensionSelectRegex(MetricRule rule,Metric metric){  Set<String> dimensionSelectRegexKeys=rule.awsDimensionSelectRegex.keySet();  for (  Dimension dimension : metric.getDimensions()) {    String dimensionName=dimension.getName();    String dimensionValue=dimension.getValue();    if (dimensionSelectRegexKeys.contains(dimensionName)) {      List<String> allowedDimensionValues=rule.awsDimensionSelectRegex.get(dimensionName);      if (!regexListMatch(allowedDimensionValues,dimensionValue)) {        return false;      }    }  }  return true;}  }
class C{  @Override public void comment(CharSequence comment){  strippedCharsCount+=comment.length() + 7;}  }
class C{  public SecretKeySpec(byte[] key,String algorithm){  if (key == null) {    throw new IllegalArgumentException("key == null");  }  if (key.length == 0) {    throw new IllegalArgumentException("key.length == 0");  }  if (algorithm == null) {    throw new IllegalArgumentException("algorithm == null");  }  this.algorithm=algorithm;  this.key=new byte[key.length];  System.arraycopy(key,0,this.key,0,key.length);}  }
class C{  public void useLayoutEditor(boolean boo,SignalMast destination) throws jmri.JmriException {  if (!destList.containsKey(destination)) {    return;  }  if (boo) {    log.debug("Set use layout editor");    ArrayList<LayoutEditor> layout=jmri.jmrit.display.PanelMenu.instance().getLayoutEditorPanelList();    log.debug("userLayoutEditor finds layout size is {}",Integer.toString(layout.size()));    for (int i=0; i < layout.size(); i++) {      if (log.isDebugEnabled()) {        log.debug(layout.get(i).getLayoutName());      }      if (facingBlock == null) {        facingBlock=InstanceManager.getDefault(LayoutBlockManager.class).getFacingBlockByMast(getSourceMast(),layout.get(i));      }    }  }  try {    destList.get(destination).useLayoutEditor(boo);  } catch (  jmri.JmriException e) {    throw e;  }}  }
class C{  public static String quoteHash(final String str){  if (str != null) {    final int idx=str.indexOf('#');    if ((idx != -1) && (str.indexOf(' ',idx) != -1) && (str.charAt(idx + 1) != '\'')) {      return str.substring(0,idx) + "#'" + str.substring(idx + 1)+ '\'';    }  }  return str;}  }
class C{  @Override public void writeDirect(final ByteBuffer bytes,final boolean sync,final IOCallback callback){  try {    checkOpened();  } catch (  Exception e) {    ActiveMQJournalLogger.LOGGER.warn(e.getMessage(),e);    callback.onError(-1,e.getMessage());    return;  }  final int bytesToWrite=factory.calculateBlockSize(bytes.limit());  final long positionToWrite=position.getAndAdd(bytesToWrite);  AIOSequentialFileFactory.AIOSequentialCallback runnableCallback=getCallback(callback,bytes);  runnableCallback.initWrite(positionToWrite,bytesToWrite);  if (writerExecutor != null) {    writerExecutor.execute(runnableCallback);  } else {    runnableCallback.run();  }}  }
class C{  public String description(){synchronized (this) {    if (messages == null) {      messages=ResourceBundle.getBundle("com.sun.tools.jdi.resources.jdi");    }  }  return messages.getString("socket_transportservice.description");}  }
class C{  public CorrelationMatrixRow2DataTableRowWrapper(NumericalMatrix matrix,int rowIndex){  this.matrix=matrix;  this.rowIndex=rowIndex;}  }
class C{  public static Mappable asMappable(final Object toCoerce){  return new CoercedMappable(toCoerce);}  }
class C{  private void acquireWakeLock(){  if (wakelock == null) {    PowerManager pm=(PowerManager)service.getSystemService(Service.POWER_SERVICE);    wakelock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,wakeLockTag);  }  wakelock.acquire();}  }
class C{  public Tasks<VolumeRestRep> failover(URI id,CopiesParam input){  return postTasks(input,getContinuousCopiesUrl() + "/failover",id);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.145 -0400",hash_original_method="592837949A664839EE3E21CA118C3F99",hash_generated_method="6C7D62B76C1F1170CAD1C14CE1FC488B") public Object decode(Object pObject) throws DecoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof String) {    return decode((String)pObject);  } else {    throw new DecoderException("Objects of type " + pObject.getClass().getName() + " cannot be decoded using Q codec");  }}  }
class C{  public JPanel generateContentPanelGroups(String title,String[][] groups,String help_title,String help_link,String icon){  JPanel panelContent=new JPanel(new BorderLayout());  JPanel header=new JPanel();  ImageIcon icon_image=generateIcon(icon);  header.add(new JLabel(title,icon_image,JLabel.CENTER)).setForeground(Color.WHITE);  header.setBackground(Color.decode("#5C6B84"));  panelContent.setBorder(BorderFactory.createLineBorder(Color.BLACK));  JPanel container=new JPanel();  container.setLayout(new BoxLayout(container,BoxLayout.Y_AXIS));  if (!(help_title.equals("") && help_link.equals(""))) {    container.add(new URLLabel(help_title,help_link));    container.add(new JLabel("   "));  }  JScrollPane data=new JScrollPane(container);  if (groups.length > 0) {    JTable group=generateTable("Group Name,Nested Groups,Criteria Count",groups);    container.add(group);    data.setViewportView(group);  } else {    container.add(new JLabel("    "));    JLabel text=new JLabel("<html>All of the smart groups in the JSS<br> are configured and optimized properly.</html>");    text.setHorizontalAlignment(SwingConstants.CENTER);    container.add(text);    data.setViewportView(container);  }  container.setBackground(Color.decode("#FFFFFF"));  panelContent.add(header,BorderLayout.NORTH);  panelContent.add(data,BorderLayout.CENTER);  data.getViewport().setBackground(Color.WHITE);  return panelContent;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.645 -0400",hash_original_method="CC91E58B4A98ADEB1A92B242C4B6A038",hash_generated_method="92B052998D9F9FF76FA827B72442D898") public static Charset toCharset(String charset){  return charset == null ? Charset.defaultCharset() : Charset.forName(charset);}  }
class C{  public DefaultTrigger createDefaultTrigger(){  DefaultTriggerImpl defaultTrigger=new DefaultTriggerImpl();  return defaultTrigger;}  }
class C{  public static void addSearchAlgorithm(String name,Search algo){  SEARCH_NAMES.add(name);  SEARCH_ALGOS.add(algo);}  }
class C{  public static String[] encodeContexts(Resource... contexts){  OpenRDFUtil.verifyContextNotNull(contexts);  String[] result=new String[contexts.length];  for (int index=0; index < contexts.length; index++) {    result[index]=encodeContext(contexts[index]);  }  return result;}  }
class C{  public WeakHashMap(){  this.loadFactor=DEFAULT_LOAD_FACTOR;  threshold=(int)(DEFAULT_INITIAL_CAPACITY);  table=new Entry[DEFAULT_INITIAL_CAPACITY];}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  @Realtime(limit=LINEAR) public void andNot(BitSet that){  long[] thatBits=that.toLongArray();  int n=MathLib.min(this.bits.length,thatBits.length);  for (int i=0; i < n; i++) {    this.bits[i]&=~thatBits[i];  }}  }
class C{  public void addObservations(int states[][],int offsetOfDestFromSources[]){  addObservations(states,offsetOfDestFromSources,false);}  }
class C{  public boolean areWaypointsVisible(){  return (waypointsVisible);}  }
class C{  boolean includes(Range r){  return (first <= r.first) && (r.last <= last);}  }
class C{  public Geo scale(double s){  return scale(s,new Geo());}  }
class C{  public GenericEntry retrieveOutboundGatewaySettings() throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return getEntry(new URL(emailBaseUrl + "gateway"),GenericEntry.class);}  }
class C{  protected static Properties loadProperty(final String propertiesFile){  final Properties prop=new Properties();  try {    final InputStream in=ExtPropertiesFileConfiguration.class.getResourceAsStream(propertiesFile);    prop.load(in);    in.close();  } catch (  final IOException e) {    throw new IllegalStateException("Cannot load property file at " + propertiesFile,e);  }  return prop;}  }
class C{  public void putSequence(DerValue[] seq) throws IOException {  DerOutputStream bytes=new DerOutputStream();  int i;  for (i=0; i < seq.length; i++)   seq[i].encode(bytes);  write(DerValue.tag_Sequence,bytes);}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  protected CCEaseRateAction(CCIntervalAction action,float aRate){  super(action);  rate=aRate;}  }
class C{  private void createPlaceIcons(){  publishProgress("Creating place icons...");  for (  Place place : this.places) {    Placemark placemark=new Placemark(place.position,null,place.name);    placemark.setLevelOfDetailSelector(new PlaceLevelOfDetailSelector(getResources(),place));    placemark.setEyeDistanceScaling(true);    placemark.setEyeDistanceScalingThreshold(PlaceLevelOfDetailSelector.LEVEL_1_DISTANCE);    this.placeLayer.addRenderable(placemark);    this.numPlacesCreated++;  }}  }
class C{  public int add(SearchResultDataLine dl){  return super.add(dl);}  }
class C{  public static synchronized ModbusSlave createTCPSlave(int port,int poolSize) throws ModbusException {  String key=ModbusSlaveType.TCP.getKey(port);  if (slaves.containsKey(key)) {    return slaves.get(key);  } else {    ModbusSlave slave=new ModbusSlave(port,poolSize);    slaves.put(key,slave);    return slave;  }}  }
class C{  public XMLDecoder(final Component o){  this();  this.owner=o;}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (fv != null) {    return fv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  private void fetchMovies(List<Movie> movies,String director){  movies.stream().filter(null).map(null).distinct().forEach(null);}  }
class C{  public boolean ignoreRecursion(){  return ignoreRecursion;}  }
class C{  public ParseHeaderState(HttpHeaders headers,StringBuilder logger){  Class<? extends HttpHeaders> clazz=headers.getClass();  this.context=Arrays.<Type>asList(clazz);  this.classInfo=ClassInfo.of(clazz,true);  this.logger=logger;  this.arrayValueMap=new ArrayValueMap(headers);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public static int[] expand(int[] n){  int[] n2=new int[n.length + 1];  extract(n2,1,n,0,n.length);  return n2;}  }
class C{  private void ensureOpen() throws IOException {  if (in == null) {    throw new IOException("Stream closed");  }}  }
class C{  public static boolean isNone(final LuaValue target){  return target != null && target.type() == LuaValue.TNONE;}  }
class C{  private int growAndAdd(Object[] a,T item){  boolean alloc;  int cap, stat;  if ((ctl & (ERROR | DISABLED)) != 0) {    cap=0;    stat=-1;    alloc=false;  } else   if (a == null || (cap=a.length) <= 0) {    cap=0;    stat=1;    alloc=true;  } else {    ForkJoinPool.MemBar.fullFence();    int h=head, t=tail, size=t + 1 - h;    if (cap >= size) {      a[(cap - 1) & t]=item;      tail=t + 1;      stat=size;      alloc=false;    } else     if (cap >= maxCapacity) {      stat=0;      alloc=false;    } else {      stat=cap + 1;      alloc=true;    }  }  if (alloc) {    int newCap=(cap > 0) ? cap << 1 : 1;    if (newCap <= cap)     stat=0; else {      Object[] newArray=null;      try {        newArray=new Object[newCap];      } catch (      Throwable ex) {      }      if (newArray == null) {        if (cap > 0)         maxCapacity=cap;        stat=0;      } else {        array=newArray;        int t=tail;        int newMask=newCap - 1;        if (a != null && cap > 0) {          int mask=cap - 1;          for (int j=head; j != t; ++j) {            long k=((long)(j & mask) << ASHIFT) + ABASE;            Object x=U.getObjectVolatile(a,k);            if (x != null && U.compareAndSwapObject(a,k,x,null))             newArray[j & newMask]=x;          }        }        newArray[t & newMask]=item;        tail=t + 1;      }    }  }  return stat;}  }
class C{  protected long reportReturn(String methodCall,long value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  public DDLScan(String url,String dbName,String user,String pass) throws ReplicatorException {  this.url=url;  this.user=user;  this.pass=pass;  this.dbName=dbName;}  }
class C{  public DuplicateException(String message){  super(message);}  }
class C{  public void add(String method,Object... args){  Object[] argsCopy=new Object[args.length];  System.arraycopy(args,0,argsCopy,0,args.length);  methods.add(method);  argLists.add(argsCopy);}  }
class C{  static void bindToGroup(AsynchronousChannelGroupImpl group){  myGroupAndInvokeCount.set(new GroupAndInvokeCount(group));}  }
class C{  public boolean shouldVisit(Page referringPage,WebURL url){  return true;}  }
class C{  public void ensureCapacity(int minCapacity){  this.elements.ensureCapacity(minCapacity);}  }
class C{  private void walk(TreeItem<String> treeItem,Expression expr){  String type;  try {    type=expr.inferType().prettyPrint();  } catch (  HaskellException e) {    type="?";  }  TreeItem<String> subTree=new TreeItem<>(String.format("%s :: %s",expr,type));  subTree.setExpanded(true);  for (  Expression child : expr.getChildren()) {    walk(subTree,child);  }  treeItem.getChildren().add(subTree);}  }
class C{  @Override public CallableStatement prepareCall(String sql,int resultSetType,int resultSetConcurrency) throws SQLException {  try {    int id=getNextId(TraceObject.CALLABLE_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("CallableStatement",TraceObject.CALLABLE_STATEMENT,id,"prepareCall(" + quote(sql) + ", "+ resultSetType+ ", "+ resultSetConcurrency+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkClosed();    sql=translateSQL(sql);    return new JdbcCallableStatement(this,sql,id,resultSetType,resultSetConcurrency);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public int exit_signal(){  return Integer.parseInt(fields[37]);}  }
class C{  public final void fatal(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {    log(SimpleLog.LOG_LEVEL_FATAL,message,t);  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_ELEMENT___GET_ANNOTATIONS:      return N4JSPackage.VARIABLE_DECLARATION___GET_ANNOTATIONS;default :    return -1;}}if (baseClass == TypeProvidingElement.class) {switch (baseOperationID) {case N4JSPackage.TYPE_PROVIDING_ELEMENT___GET_DECLARED_TYPE_REF:  return N4JSPackage.VARIABLE_DECLARATION___GET_DECLARED_TYPE_REF;default :return -1;}}if (baseClass == TypedElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == TypableElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == IdentifiableElement.class) {switch (baseOperationID) {case TypesPackage.IDENTIFIABLE_ELEMENT___GET_CONTAINING_MODULE:return N4JSPackage.VARIABLE_DECLARATION___GET_CONTAINING_MODULE;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:return N4JSPackage.VARIABLE_DECLARATION___GET_NAME;default :return -1;}}if (baseClass == Variable.class) {switch (baseOperationID) {case N4JSPackage.VARIABLE___IS_CONST:return N4JSPackage.VARIABLE_DECLARATION___IS_CONST;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public synchronized static void initialize(Connection connection) throws SQLException {  if (_layoutsInfo != null && _filePattherns != null) {    return;  }  String layoutQuery="SELECT * FROM dataset_partition_layout_pattern ORDER BY sort_id";  ResultSet resultSet=connection.createStatement().executeQuery(layoutQuery);  _layoutsInfo=new ArrayList<>();  while (resultSet.next()) {    Layout layout=new Layout(resultSet.getInt("layout_id"),resultSet.getString("regex"),resultSet.getString("mask"),resultSet.getInt("leading_path_index"),resultSet.getInt("partition_index"),resultSet.getString("partition_pattern_group"));    _layoutsInfo.add(layout);  }  String fileQuery="SELECT regex FROM filename_pattern";  ResultSet fpRs=connection.createStatement().executeQuery(fileQuery);  _filePattherns=new ArrayList<>();  while (fpRs.next()) {    _filePattherns.add(fpRs.getString("regex"));  }}  }
class C{  public static void clear(){  CurrentTime.testClear();}  }
class C{  public static <V>ClassLocal<V> withInitial(Function<Class,V> classVFunction){  return new ClassLocal<>(classVFunction);}  }
class C{  public static boolean diff(String a,String b){  boolean ret=!(a == null ? b == null ? true : false : b == null ? false : a.equals(b));  if (ret) {    Debug.log("  diff: '" + a + "' with '"+ b+ "'");  }  return ret;}  }
class C{  public NewVisionWorldAction(Workspace workspace){  super("Vision World (Beta)",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Glasses.png"));}  }
class C{  public boolean exportMusicTrack(MusicTrack musicTrack,String dest){  File directory=new File(dest).getParentFile();  String filename=new File(dest).getName();  return exportMusicTrack(musicTrack,Uri.fromFile(directory),filename);}  }
class C{  public void inc(){  inc(1);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void stop(String[] args){  LOG.info("Stopping Spring Application container");  System.exit(0);}  }
class C{  public void exec(String sql,Object[] params,Result<Object> result){  QueryBuilderKraken query=QueryParserKraken.parse(this,sql);  query.build(result.then(null));}  }
class C{  public static GTSWrapper rewrap(GTSWrapper wrapper,boolean compress,double compratio){  byte[] unwrapped=unwrapEncoded(wrapper);  GTSEncoder encoder=new GTSEncoder(wrapper.getBase(),null,unwrapped);  GTSWrapper tmp=fromGTSEncoderToGTSWrapper(encoder,compress,compratio);  GTSWrapper rewrapped=new GTSWrapper(wrapper);  rewrapped.setCompressed(tmp.isCompressed());  rewrapped.setCompressionPasses(tmp.getCompressionPasses());  rewrapped.setEncoded(tmp.getEncoded());  return rewrapped;}  }
class C{  public String doDeActivate() throws SaaSApplicationException {  List<VOServiceActivation> updateList=new ArrayList<VOServiceActivation>();  for (  Service prod : servicesForDeActivation) {    VOServiceActivation activation=null;    VOService service=prod.getVO();    if (prod.isModified()) {      activation=new VOServiceActivation();      activation.setService(service);      activation.setActive(prod.isSelected());      activation.setCatalogEntries(prod.getCatalogEntries());      updateList.add(activation);    }  }  try {    List<VOService> result=getProvisioningService().setActivationStates(updateList);    boolean operationCompleted=(result.size() == updateList.size());    addInfoOrProgressMessage(operationCompleted,INFO_SERVICE_STATE_SAVED,null);  } catch (  ServiceStateException e) {    String causedStatus=e.getMessageParams()[1];    if (causedStatus.equals(ServiceStatus.DELETED.name())) {      addMessage(null,FacesMessage.SEVERITY_ERROR,SERVICE_NO_LONGER_EXISTS);      return null;    } else     throw e;  } finally {    servicesForDeActivation=null;    services=null;  }  return OUTCOME_SUCCESS;}  }
class C{  public void map(Text key,Node node,OutputCollector<Text,FloatWritable> output,Reporter reporter) throws IOException {  float number=0;  if (inlinks) {    number=node.getNumInlinks();  } else   if (outlinks) {    number=node.getNumOutlinks();  } else {    number=node.getInlinkScore();  }  if (host) {    key.set(URLUtil.getHost(key.toString()));  } else {    key.set(URLUtil.getDomainName(key.toString()));  }  output.collect(key,new FloatWritable(number));}  }
class C{  public void addAllAuditory(Collection<? extends Integer> ids){  mAuditoryFeedback.addAll(ids);}  }
class C{  public double distance(final Int2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public static void doShowBreak(DebugCLI cli) throws NotConnectedException {  int isolateId=cli.getActiveIsolateId();  cli.waitTilHalted(isolateId);  try {    Session session=cli.getSession();    StringBuilder sb=new StringBuilder();    if (session.getWorkerSession(isolateId).isSuspended()) {      sb.append(getLocalizationManager().getLocalizedTextString("stopped"));      sb.append(' ');      appendBreakInfo(cli,sb,true,isolateId);    } else     sb.append(getLocalizationManager().getLocalizedTextString("key24"));    cli.out(sb.toString());  } catch (  NullPointerException npe) {    cli.err(getLocalizationManager().getLocalizedTextString("key25"));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.127 -0500",hash_original_method="008D98C2BCE518EEA7FDC1071598BCD6",hash_generated_method="ABFD836FB1AE1F876C0489EF4E0B4791") public void clearGrowthLimit(){}  }
class C{  private void skipToEnrollment(){  Intent intent=new Intent(context,ServerDetails.class);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  startActivity(intent);}  }
class C{  public byte[] toByteArray(){  final int outLen=nonce_.length + (Long.SIZE / Byte.SIZE);  final ByteBuffer out=ByteBuffer.allocate(outLen);  out.put(nonce_);  out.putLong(contentLength_);  return out.array();}  }
class C{  public void excl(int x){  Assert.check(currentState != BitsState.UNKNOWN);  Assert.check(x >= 0);  sizeTo((x >>> wordshift) + 1);  bits[x >>> wordshift]=bits[x >>> wordshift] & ~(1 << (x & wordmask));  currentState=BitsState.NORMAL;}  }
class C{  public static void incrBy(String counterName,int incVal){  com.twitter.heron.api.metric.GlobalMetrics.incrBy(counterName,incVal);}  }
class C{  public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {  if (m_needToCallStartDocument)   startDocumentInternal();  if (m_tracer != null) {    super.fireStartElem(elementName);    this.firePseudoAttributes();  }  return;}  }
class C{  public static short sArrayGet(short[] a,int i){  try {    return a[i];  } catch (  Throwable t) {    return a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)];  }}  }
class C{  public static boolean isReservedPort(int port){  return ((port >= FIXED_PORT_MIN) && (port <= FIXED_PORT_MAX) || (port == 1099));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:53.137 -0500",hash_original_method="903092ED2C38BF649D61CAF92AAF4DF4",hash_generated_method="E3D7390DD5E7DC8155A8D23ED2BD1064") private void clearResultLocked(){  mInteractionId=-1;  mFindAccessibilityNodeInfoResult=null;  mFindAccessibilityNodeInfosResult=null;  mPerformAccessibilityActionResult=false;}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:52.976 -0500",hash_original_method="E7AD2FCC9238E9621F78F9C99C389491",hash_generated_method="2A4F95874FEEFD0673FB865F1C81BEEE") public boolean updateMessageOnIcc(int messageIndex,int newStatus,byte[] pdu){  boolean success=false;  try {    ISms iccISms=ISms.Stub.asInterface(ServiceManager.getService("isms"));    if (iccISms != null) {      success=iccISms.updateMessageOnIccEf(messageIndex,newStatus,pdu);    }  } catch (  RemoteException ex) {  }  return success;}  }
class C{  public static SphericalPolarCoordinates interpolate(SphericalPolarCoordinates A,SphericalPolarCoordinates B,double alpha){  Vector3D from=A.getCartesianCoordinates().normalized();  Vector3D to=B.getCartesianCoordinates().normalized();  double cosang=from.dot(to);  if (cosang < 0) {    cosang=-cosang;    to.negate();    System.out.println("Argg");  }  double fracFrom, fracTo;  if (cosang > (0.999995)) {    fracFrom=alpha;    fracTo=1.0 - alpha;  } else {    double ang=Math.acos(cosang);    fracFrom=Math.sin(alpha * ang);    fracTo=Math.sin((1.0 - alpha) * ang);  }  Vector3D inbetween=from.mul(fracFrom).add(to.mul(fracTo)).normalized();  return new SphericalPolarCoordinates(inbetween,A.getRadius());}  }
class C{  public boolean isDvportSupported(){  return dvportSupported;}  }
class C{  public void test_MultipleUpdatesInOneTables() throws SQLException {  int id=1;  String field="field3";  String selectQuery="SELECT * FROM " + DatabaseCreator.TEST_TABLE1 + " WHERE id="+ id;  Statement statement=conn.createStatement();  ResultSet result=statement.executeQuery(selectQuery);  assertTrue("There is no records with id = " + id,result.next());  result.close();  for (int i=0; i < numThreads; i++) {    threadPool.runTask(createTask7(id,field));  }  threadPool.join();  double expectedVal=id + numThreads;  result=statement.executeQuery(selectQuery);  assertTrue("There is no records with id = " + id,result.next());  result.close();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeparentnodenull.class,args);}  }
class C{  public void prependBefore(String before){  String oldBefore=before();  if (oldBefore == null) {    oldBefore="";  }  setBefore(before + oldBefore);}  }
class C{  public Cipher(final BlockCipher cipher){  this.cipher=cipher;}  }
class C{  public ColumnVector add(final double scalar){  return this.transform(null);}  }
class C{  private void findRulesBruteForce() throws Exception {  ArrayList<Object>[] rules;  for (int j=1; j < m_Ls.size(); j++) {    ArrayList<Object> currentItemSets=m_Ls.get(j);    Enumeration<Object> enumItemSets=new WekaEnumeration<Object>(currentItemSets);    while (enumItemSets.hasMoreElements()) {      AprioriItemSet currentItemSet=(AprioriItemSet)enumItemSets.nextElement();      rules=currentItemSet.generateRulesBruteForce(m_minMetric,m_metricType,m_hashtables,j + 1,m_instances.numInstances(),m_significanceLevel);      for (int k=0; k < rules[0].size(); k++) {        m_allTheRules[0].add(rules[0].get(k));        m_allTheRules[1].add(rules[1].get(k));        m_allTheRules[2].add(rules[2].get(k));        m_allTheRules[3].add(rules[3].get(k));        m_allTheRules[4].add(rules[4].get(k));        m_allTheRules[5].add(rules[5].get(k));      }    }  }}  }
class C{  public String convertToLowerCase(String table){  return table.toLowerCase();}  }
class C{  public static CcdRunner serializableInstance(){  return new CcdRunner(DataWrapper.serializableInstance(),new Parameters());}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer("@");  buf.append(getTypeName());  if (members != null) {    buf.append("(");    Iterator mit=members.keySet().iterator();    while (mit.hasNext()) {      String name=(String)mit.next();      buf.append(name).append("=").append(getMemberValue(name));      if (mit.hasNext())       buf.append(", ");    }    buf.append(")");  }  return buf.toString();}  }
class C{  void compare(File f1,File f2,String p){  File f1p=(p == null ? f1 : new File(f1,p));  File f2p=(p == null ? f2 : new File(f2,p));  System.out.println("compare " + f1p + " "+ f2p);  if (f1p.isDirectory() && f2p.isDirectory()) {    Set<String> children=new HashSet<String>();    children.addAll(Arrays.asList(f1p.list()));    children.addAll(Arrays.asList(f2p.list()));    for (    String c : children) {      compare(f1,f2,new File(p,c).getPath());    }  } else   if (f1p.isFile() && f2p.isFile()) {    String s1=read(f1p);    if (isWindows) {      s1=s1.replaceAll("( [0-9]+)LL\n","$1i64\n");    }    String s2=read(f2p);    if (!s1.equals(s2)) {      System.out.println("File: " + f1p + "\n"+ s1);      System.out.println("File: " + f2p + "\n"+ s2);      error("Files differ: " + f1p + " "+ f2p);    }  } else   if (f1p.exists() && !f2p.exists())   error("Only in " + f1 + ": "+ p); else   if (f2p.exists() && !f1p.exists())   error("Only in " + f2 + ": "+ p); else   error("Files differ: " + f1p + " "+ f2p);}  }
class C{  public Pair<Element,Visualization> remove(PlotItem it,VisualizationTask task){  return map.remove(key(it,task));}  }
class C{  public int degree(){  return coefficients.length - 1;}  }
class C{  public BurlapSkeleton(Class apiClass){  super(apiClass);}  }
class C{  public void testLikeEscapeSequenceWithWhitespaces() throws Exception {  check("ESCAPE '\\'","{ '\\' }");  check("ESCAPE '\\'","{ escape '\\'}");  check("ESCAPE '\\'","{   '\\' }");  check("ESCAPE '\\'","{   escape   '\\' }");  check("ESCAPE '\\'","{ \n '\\' }");  check("ESCAPE '\\'","{ \n escape\n'\\' }");}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  protected static BigInteger convertLongToUlong(long longVal){  byte[] asBytes=new byte[8];  asBytes[7]=(byte)(longVal & 0xff);  asBytes[6]=(byte)(longVal >>> 8);  asBytes[5]=(byte)(longVal >>> 16);  asBytes[4]=(byte)(longVal >>> 24);  asBytes[3]=(byte)(longVal >>> 32);  asBytes[2]=(byte)(longVal >>> 40);  asBytes[1]=(byte)(longVal >>> 48);  asBytes[0]=(byte)(longVal >>> 56);  return new BigInteger(1,asBytes);}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("servers") @Valid Servers server,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.Servers jpaServers=new com.wipro.ats.bdre.md.dao.jpa.Servers();    jpaServers.setServerId(server.getServerId());    jpaServers.setServerName(server.getServerName());    jpaServers.setServerType(server.getServerType());    jpaServers.setServerIp(server.getServerIp());    jpaServers.setSshPrivateKey(server.getSshPrivateKey());    jpaServers.setLoginUser(server.getLoginUser());    jpaServers.setLoginPassword(server.getLoginPassword());    jpaServers.setServerMetainfo(server.getServerMetaInfo());    Integer serversId=serversDAO.insert(jpaServers);    server.setServerId(serversId);    restWrapper=new RestWrapper(server,RestWrapper.OK);    LOGGER.info("Record with ID:" + server.getServerId() + " inserted in Servers by User:"+ principal.getName()+ server);  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public VOUserDetails(long id,int version){  super(id,version);}  }
class C{  public void unknown(int code,byte[] data) throws IOException {  writeCode(code);  int length=(data != null) ? data.length : 0;  if (code >= 0x80 || length > 0) {    out.writeUI16(length);  }  if (length > 0) {    out.write(data);  }}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:04.916 -0500",hash_original_method="1AF05D3B3AC1A0BE6FEC3ED8E4AD92D7",hash_generated_method="602CBE64B37DDC68026D3CD1EA56EC7D") @DSVerified @DSSpec(DSCat.IO) public int read(byte buffer[]) throws IOException {  return read(buffer,0,buffer.length);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  stream.writeInt(this.store.size());  Set keys=this.store.keySet();  Iterator iterator=keys.iterator();  while (iterator.hasNext()) {    Comparable key=(Comparable)iterator.next();    stream.writeObject(key);    Paint paint=getPaint(key);    SerialUtilities.writePaint(paint,stream);  }}  }
class C{  public HeavyWeightWindow(Window parent){  super(parent);  setFocusableWindowState(true);  setName("###overrideRedirect###");  try {    setAlwaysOnTop(true);  } catch (  SecurityException se) {  }}  }
class C{  public boolean isProperty(){  return isProperty;}  }
class C{  private void initProduct(long key){  this.initProduct(key,ServiceAccessType.EXTERNAL);}  }
class C{  public BasicPermissionCollection(Class<?> clazz){  perms=new HashMap<String,Permission>(11);  all_allowed=false;  permClass=clazz;}  }
class C{  public void deleteGlobalCodeNodeComment(final IComment comment) throws CouldntDeleteException {  if (m_parentFunction != null) {    CommentManager.get(m_provider).deleteGlobalCodeNodeComment(m_codeNode,comment);  }}  }
class C{  NioDatagramSession(IoService service,DatagramChannel channel,IoProcessor<NioSession> processor,SocketAddress remoteAddress){  super(processor,service,channel);  config=new NioDatagramSessionConfig(channel);  config.setAll(service.getSessionConfig());  this.remoteAddress=(InetSocketAddress)remoteAddress;  this.localAddress=(InetSocketAddress)channel.socket().getLocalSocketAddress();}  }
class C{  protected void split(){  if (minSize != NO_MIN_SIZE) {    if (MoreMath.approximately_equal(bounds.north,bounds.south,minSize) && MoreMath.approximately_equal(bounds.east,bounds.west,minSize))     return;  }  double nsHalf=(bounds.north - (bounds.north - bounds.south) / 2.0);  double ewHalf=(bounds.east - (bounds.east - bounds.west) / 2.0);  children=new ArrayList<QuadTreeNode<T>>(4);  children.add(new QuadTreeNode<T>(bounds.north,bounds.west,nsHalf,ewHalf,maxItems));  children.add(new QuadTreeNode<T>(bounds.north,ewHalf,nsHalf,bounds.east,maxItems));  children.add(new QuadTreeNode<T>(nsHalf,ewHalf,bounds.south,bounds.east,maxItems));  children.add(new QuadTreeNode<T>(nsHalf,bounds.west,bounds.south,ewHalf,maxItems));  Collection<QuadTreeLeaf> temp=new ArrayList<QuadTreeLeaf>(items);  items.clear();  for (  QuadTreeLeaf leaf : temp) {    put(leaf);  }}  }
class C{  public static void handleHeaderView(DrawerBuilder drawer){  if (drawer.mAccountHeader != null) {    if (drawer.mAccountHeaderSticky) {      drawer.mStickyHeaderView=drawer.mAccountHeader.getView();    } else {      drawer.mHeaderView=drawer.mAccountHeader.getView();      drawer.mHeaderDivider=drawer.mAccountHeader.mAccountHeaderBuilder.mDividerBelowHeader;      drawer.mHeaderPadding=drawer.mAccountHeader.mAccountHeaderBuilder.mPaddingBelowHeader;    }  }  if (drawer.mStickyHeaderView != null) {    RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);    layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP,1);    drawer.mStickyHeaderView.setId(R.id.material_drawer_sticky_header);    drawer.mSliderLayout.addView(drawer.mStickyHeaderView,0,layoutParams);    RelativeLayout.LayoutParams layoutParamsListView=(RelativeLayout.LayoutParams)drawer.mRecyclerView.getLayoutParams();    layoutParamsListView.addRule(RelativeLayout.BELOW,R.id.material_drawer_sticky_header);    drawer.mRecyclerView.setLayoutParams(layoutParamsListView);    drawer.mStickyHeaderView.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(drawer.mActivity,R.attr.material_drawer_background,R.color.material_drawer_background));    if (drawer.mStickyHeaderShadow) {      if (Build.VERSION.SDK_INT >= 21) {        drawer.mStickyHeaderView.setElevation(UIUtils.convertDpToPixel(4,drawer.mActivity));      } else {        View view=new View(drawer.mActivity);        view.setBackgroundResource(R.drawable.material_drawer_shadow_bottom);        drawer.mSliderLayout.addView(view,RelativeLayout.LayoutParams.MATCH_PARENT,(int)UIUtils.convertDpToPixel(4,drawer.mActivity));        RelativeLayout.LayoutParams lps=(RelativeLayout.LayoutParams)view.getLayoutParams();        lps.addRule(RelativeLayout.BELOW,R.id.material_drawer_sticky_header);        view.setLayoutParams(lps);      }    }    drawer.mRecyclerView.setPadding(0,0,0,0);  }  if (drawer.mHeaderView != null) {    if (drawer.mRecyclerView == null) {      throw new RuntimeException("can't use a headerView without a recyclerView");    }    if (drawer.mHeaderPadding) {      drawer.getHeaderAdapter().add(new ContainerDrawerItem().withView(drawer.mHeaderView).withHeight(drawer.mHeiderHeight).withDivider(drawer.mHeaderDivider).withViewPosition(ContainerDrawerItem.Position.TOP));    } else {      drawer.getHeaderAdapter().add(new ContainerDrawerItem().withView(drawer.mHeaderView).withHeight(drawer.mHeiderHeight).withDivider(drawer.mHeaderDivider).withViewPosition(ContainerDrawerItem.Position.NONE));    }    drawer.mRecyclerView.setPadding(drawer.mRecyclerView.getPaddingLeft(),0,drawer.mRecyclerView.getPaddingRight(),drawer.mRecyclerView.getPaddingBottom());  }}  }
class C{  public void dispose(){  if (ownResources) {    owned1.dispose();    owned2.dispose();  }}  }
class C{  protected void incrementDropCount(int color,int piece){  if ((piece & PROMOTED_MASK) != 0) {    piece=PAWN;  }  dropCounts[color][piece]++;}  }
class C{  public void forceConnection(DTNHost anotherHost,String interfaceId,boolean up){  NetworkInterface ni;  NetworkInterface no;  if (interfaceId != null) {    ni=getInterface(interfaceId);    no=anotherHost.getInterface(interfaceId);    assert (ni != null) : "Tried to use a nonexisting interfacetype " + interfaceId;    assert (no != null) : "Tried to use a nonexisting interfacetype " + interfaceId;  } else {    ni=getInterface(1);    no=anotherHost.getInterface(1);    assert (ni.getInterfaceType().equals(no.getInterfaceType())) : "Interface types do not match.  Please specify interface type explicitly";  }  if (up) {    ni.createConnection(no);  } else {    ni.destroyConnection(no);  }}  }
class C{  public static final <E extends Collection<? super String>>E addNeighbors(String geohash,E neighbors){  return addNeighbors(geohash,geohash.length(),neighbors);}  }
class C{  public String toSummaryString(){  String result="Selected values: " + Utils.joinOptions(m_BestClassifierOptions);  return result + '\n';}  }
class C{  private UasMdoAuth(){}  }
class C{  public void beforeInsert(int index,char element){  if (index > size || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  ensureCapacity(size + 1);  System.arraycopy(elements,index,elements,index + 1,size - index);  elements[index]=element;  size++;}  }
class C{  public ArffTableModel(String filename,AbstractFileLoader... loaders){  this();  if ((filename != null) && (!filename.equals(""))) {    loadFile(filename,loaders);  }}  }
class C{  @Override public void peg(Calendar calendar){  this.firstMillisecond=getFirstMillisecond(calendar);}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (params.length == 2) {    if (params[1].startsWith("#")) {      throw new CommandException(service.getString(R.string.query_to_channel));    }    Conversation query=server.getConversation(params[1]);    if (query != null) {      throw new CommandException(service.getString(R.string.query_exists));    }    query=new Query(params[1]);    query.setHistorySize(service.getSettings().getHistorySize());    server.addConversation(query);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_NEW,server.getId(),query.getName());    service.sendBroadcast(intent);  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  public TwoStepsMWHCFunction<T> build() throws IOException {  if (built)   throw new IllegalStateException("This builder has been already used");  built=true;  if (transform == null) {    if (chunkedHashStore != null)     transform=chunkedHashStore.transform(); else     throw new IllegalArgumentException("You must specify a TransformationStrategy, either explicitly or via a given ChunkedHashStore");  }  return new TwoStepsMWHCFunction<T>(keys,transform,values,tempDir,chunkedHashStore);}  }
class C{  public void deregister(Schedule schedule){  if (schedule == null) {    return;  }  schedule.dispose();  Integer oldSize=Integer.valueOf(_scheduleHashTable.size());  _scheduleHashTable.remove(schedule.getId());  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_scheduleHashTable.size()));}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  private void reindexEntities(){  entityIds.clear();  lastEntityId=0;  if (entities != null) {    for (    Entity entity : entities) {      final int id=entity.getId();      entityIds.put(new Integer(id),entity);      if (id > lastEntityId) {        lastEntityId=id;      }    }    for (    Entity entity : entities) {      entity.setGame(this);    }  }}  }
class C{  public BooleanGlassFunction(LagGraph lagGraph,double lowerBound,double basalExpression){  if (lagGraph == null) {    throw new NullPointerException("Graph must not be null.");  }  if (lowerBound >= basalExpression) {    throw new IllegalArgumentException("Lower bound must be " + "less than basal " + "expression.");  }  this.lowerBound=lowerBound;  this.basalExpression=basalExpression;  this.connectivity=new IndexedLagGraph(lagGraph,true);  this.errorDistributions=new Distribution[this.connectivity.getNumFactors()];  for (int i=0; i < errorDistributions.length; i++) {    errorDistributions[i]=new Normal(0.0,0.05);  }  this.booleanFunctions=new BooleanFunction[this.connectivity.getNumFactors()];  for (int i=0; i < booleanFunctions.length; i++) {    if (this.connectivity.getNumParents(i) > 0) {      List parentList=new ArrayList();      for (int j=0; j < this.connectivity.getNumParents(i); j++) {        IndexedParent parent=this.connectivity.getParent(i,j);        parentList.add(parent);      }      IndexedParent[] parents=(IndexedParent[])parentList.toArray(new IndexedParent[0]);      booleanFunctions[i]=new BooleanFunction(parents);      do {        booleanFunctions[i].randomize();      } while (!booleanFunctions[i].isEffective());    } else {      booleanFunctions[i]=null;    }  }  setDecayRate(0.1);  setBooleanInfluenceRate(0.5);}  }
class C{  public Transaction(NetworkParameters params,byte[] msg,@Nullable Message parent,boolean parseLazy,boolean parseRetain,int length) throws ProtocolException {  super(params,msg,0,parent,parseLazy,parseRetain,length);}  }
class C{  protected Pair<ILogicalOperator,LogicalVariable> constructSubplanOperatorForBranch(ILogicalOperator inputOp,Mutable<ILogicalExpression> selectExpr,Expression branchExpression) throws AsterixException {  context.enterSubplan();  SubplanOperator subplanOp=new SubplanOperator();  subplanOp.getInputs().add(new MutableObject<>(inputOp));  Mutable<ILogicalOperator> nestedSource=new MutableObject<>(new NestedTupleSourceOperator(new MutableObject<>(subplanOp)));  SelectOperator select=new SelectOperator(selectExpr,false,null);  OperatorPropertiesUtil.markMovable(select,false);  select.getInputs().add(nestedSource);  Pair<ILogicalOperator,LogicalVariable> pBranch=branchExpression.accept(this,new MutableObject<>(select));  LogicalVariable branchVar=context.newVar();  AggregateOperator aggOp=new AggregateOperator(Collections.singletonList(branchVar),Collections.singletonList(new MutableObject<>(new AggregateFunctionCallExpression(FunctionUtil.getFunctionInfo(AsterixBuiltinFunctions.LISTIFY),false,Collections.singletonList(new MutableObject<>(new VariableReferenceExpression(pBranch.second)))))));  aggOp.getInputs().add(new MutableObject<>(pBranch.first));  ILogicalPlan planForBranch=new ALogicalPlanImpl(new MutableObject<>(aggOp));  subplanOp.getNestedPlans().add(planForBranch);  context.exitSubplan();  return new Pair<>(subplanOp,branchVar);}  }
class C{  private void releaseWaitLatch(){  waitLatch.countDown();}  }
class C{  public static CertificatePolicies fromExtensions(Extensions extensions){  return CertificatePolicies.getInstance(extensions.getExtensionParsedValue(Extension.certificatePolicies));}  }
class C{  public void testRenameDirectorySourceMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR),null);  create(igfs,null,null);  igfs.rename(SUBDIR,SUBDIR2);  checkExist(igfs,DIR);  checkExist(igfs,igfsSecondary,SUBDIR2);  checkNotExist(igfs,igfsSecondary,SUBDIR);}  }
class C{  public void testSampleToSampleError(){  setDefaultParameters();  this.simulator.setNumSamplesPerDish(1000);  this.simulator.setSampleSampleVariability(0.2);  this.simulator.setChipChipVariability(0.0001);  this.simulator.setPixelDigitalization(0.0001);  this.simulator.setStepsGenerated(2);  this.simulator.setNumCellsPerDish(100);  this.simulator.simulate(this.history);  double[][][] measuredData=this.simulator.getMeasuredData();  DoubleArrayList doubleArrayList=new DoubleArrayList(measuredData[1][0]);  double sum=Descriptive.sum(doubleArrayList);  double sumOfSquares=Descriptive.sumOfSquares(doubleArrayList);  double gene2time1sd=Descriptive.standardDeviation(Descriptive.variance(measuredData[1][0].length,sum,sumOfSquares));  DoubleArrayList doubleArrayList1=new DoubleArrayList(measuredData[2][0]);  double sum1=Descriptive.sum(doubleArrayList1);  double sumOfSquares1=Descriptive.sumOfSquares(doubleArrayList1);  double gene3time1sd=Descriptive.standardDeviation(Descriptive.variance(measuredData[2][0].length,sum1,sumOfSquares1));  assertEquals(0.2,gene2time1sd,0.02);  assertEquals(0.2,gene3time1sd,0.02);}  }
class C{  public static boolean checkPoolPropertiesChanged(Set<String> existingValue,Set<String> newValue){  boolean propertyChanged=false;  if (existingValue == null && (newValue != null && !newValue.isEmpty())) {    propertyChanged=true;  } else   if (newValue == null && (existingValue != null && !existingValue.isEmpty())) {    propertyChanged=true;  } else   if (existingValue != null && newValue != null) {    if (existingValue.size() != newValue.size() || !(existingValue.containsAll(newValue))) {      propertyChanged=true;    }  }  return propertyChanged;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public void clamp(){  IntegerVectorSpecies _species=(IntegerVectorSpecies)species;  for (int i=0; i < genomeLength(); i++) {    int minGene=(int)_species.minGene(i);    if (genome[i] < minGene)     genome[i]=minGene; else {      int maxGene=(int)_species.maxGene(i);      if (genome[i] > maxGene)       genome[i]=maxGene;    }  }}  }
class C{  public boolean isDynamic(){  return typeString.contains(SUFFIX_DYNAMIC);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  protected void skipElement(double version,String uri,String localName){  if (localName == null)   return;  FXGVersionHandler versionHandler=FXGVersionHandlerRegistry.getVersionHandler(version);  if (versionHandler != null) {    HashSet<String> skippedElements=new HashSet<String>(1);    skippedElements.add(localName);    versionHandler.registerSkippedElements(uri,skippedElements);  } else {    throw new FXGException("FXGVersionHandlerNotRegistered",version);  }}  }
class C{  GridResourceJobContextInjector(ComputeJobContext rsrc){  super(rsrc);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void populate(){  for (int i=0; i < ITLCModelLaunchDataPresenter.ALL_FIELDS.length; i++) {    informPresenter(ITLCModelLaunchDataPresenter.ALL_FIELDS[i]);  }}  }
class C{  public void update(){  final IPancheonRecipe recipe=getWorkingRecipe();  if (recipe != null) {    setTimeMax(recipe.getTime());    increaseTime();    if (time >= timeMax) {      resetTime();      commitRecipe();    }  } else {    if (resetTime())     markDirty();  }}  }
class C{  public void updateNClob(String columnLabel,Reader reader,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  protected final void CMOV_FMOV(Instruction s,RegisterOperand result,ConditionOperand cond,Operand trueValue,Operand falseValue){  RegisterOperand FP0=new RegisterOperand(burs.ir.regpool.getPhysicalRegisterSet().getFPR(0),result.getType());  if (falseValue.isRegister()) {    EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,FP0,trueValue)));    EMIT(MIR_CondMove.mutate(s,IA32_FCMOV,FP0.copyRO(),falseValue,COND(cond.flipCode())));  } else {    EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,FP0,falseValue)));    EMIT(MIR_CondMove.mutate(s,IA32_FCMOV,FP0.copyRO(),asReg(s,IA32_FMOV,trueValue),COND(cond)));  }  EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,result.copyRO(),FP0.copyRO())));}  }
class C{  public boolean checkDuplicate(T obj){  final int top=_top.get();  for (int i=top - 1; i >= 0; i--) {    if (_freeStack.get(i) == obj)     return true;  }  return false;}  }
class C{  public CryptoException(final String message){  super(message);}  }
class C{  @Override public void printCamera(){  camera.print();}  }
class C{  public Command(int offset,int length,String text,IDocumentListener owner){  if (offset < 0 || length < 0)   throw new IllegalArgumentException();  fOffset=offset;  fLength=length;  fText=text;  fOwner=owner;}  }
class C{  public void printEnumeration(List names) throws IOException {  writer.write('(');  Iterator it=names.iterator();  NameInfo ni=(NameInfo)it.next();  if (ni.space1 != null) {    printSpaces(ni.space1,true);  }  writer.write(ni.name);  if (ni.space2 != null) {    printSpaces(ni.space2,true);  }  while (it.hasNext()) {    writer.write('|');    ni=(NameInfo)it.next();    if (ni.space1 != null) {      printSpaces(ni.space1,true);    }    writer.write(ni.name);    if (ni.space2 != null) {      printSpaces(ni.space2,true);    }  }  writer.write(')');}  }
class C{  private void fixupBBSet(BasicBlockLE x){  if (DBG_BBSET)   db("fixing up tree after inserting " + x);  x.setRed();  while (x != root) {    BasicBlockLE xp=x.parent;    if (xp.isBlack()) {      break;    }    if (DBG_BBSET)     db(x + " and its parent " + xp+ " are both red");    BasicBlockLE xpp=xp.parent;    if (DBG_BBSET)     db(xp + "'s parent is " + xpp);    if (xp == xpp.left) {      BasicBlockLE y=xpp.right;      if ((y != null) && y.isRed()) {        xp.setBlack();        y.setBlack();        xpp.setRed();        x=xpp;      } else {        if (x == xp.right) {          x=xp;          leftRotateBBSet(xp);          xp=x.parent;          xpp=xp.parent;        }        xp.setBlack();        xpp.setRed();        rightRotateBBSet(xpp);      }    } else {      BasicBlockLE y=xpp.left;      if ((y != null) && y.isRed()) {        xp.setBlack();        y.setBlack();        xpp.setRed();        x=xpp;      } else {        if (x == xp.left) {          x=xp;          rightRotateBBSet(xp);          xp=x.parent;          xpp=xp.parent;        }        xp.setBlack();        xpp.setRed();        leftRotateBBSet(xpp);      }    }  }  root.setBlack();}  }
class C{  public int hashCode(){  long bits=left;  bits^=right * 31;  return (((int)bits) ^ ((int)(bits >> 32)));}  }
class C{  void keepOnlyPositiveCounts(){  int firstProbe=keys.length - 1;  while (states[firstProbe] > 0) {    firstProbe--;  }  for (int probe=firstProbe; probe-- > 0; ) {    if (states[probe] > 0 && values[probe] <= 0) {      hashDelete(probe);      numActive--;    }  }  for (int probe=keys.length; probe-- > firstProbe; ) {    if (states[probe] > 0 && values[probe] <= 0) {      hashDelete(probe);      numActive--;    }  }}  }
class C{  public Object clone(){  try {    Quantity other=(Quantity)super.clone();    return other;  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public void processBuildResult(boolean commentOnSuccess,boolean commentWithConsoleLinkOnFailure){  commenter.processBuildResult(commentOnSuccess,commentWithConsoleLinkOnFailure,runHarbormaster);}  }
class C{  @NotNull public static <T>List<T> asList(@Nullable final Collection<?> expression,@NotNull final Class<T> elementClass){  if ((expression == null) || expression.isEmpty()) {    return Collections.emptyList();  }  final List<T> result=new ArrayList<T>();  for (  final Object element : expression) {    final T toAdd=as(element,elementClass);    if (toAdd != null) {      result.add(toAdd);    }  }  return result;}  }
class C{  @SafeVarargs @SuppressWarnings("varargs") public static <K,V>Map<K,V> requireKeys(Map<K,V> map,K... requiredKeys){  requireNonNull(map);  requireNonNullElements(requiredKeys);  for (  final K key : requiredKeys) {    if (!map.containsKey(key)) {      throw new NoSuchElementException("The Map does not contain the key " + key);    }  }  return map;}  }
class C{  public void addTransition(int source,int dest,BytesRef term){  if (term == null) {    throw new NullPointerException("term should not be null");  }  builder.addTransition(source,dest,getTermID(term));}  }
class C{  public boolean finishComposingText(){  if (DEBUG)   Log.v(TAG,"finishComposingText");  final Editable content=getEditable();  if (content != null) {    beginBatchEdit();    removeComposingSpans(content);    endBatchEdit();    sendCurrentText();  }  return true;}  }
class C{  @Override public String graph() throws Exception {  if (m_Tree == null) {    throw new Exception("REPTree: No model built yet.");  }  StringBuffer resultBuff=new StringBuffer();  m_Tree.toGraph(resultBuff,0,null);  String result="digraph Tree {\n" + "edge [style=bold]\n" + resultBuff.toString() + "\n}\n";  return result;}  }
class C{  public double std(){  if (min == max || num == 0) {    return 0;  }  double m=mean();  return Math.sqrt(sigmax2 / num - m * m);}  }
class C{  public Document read(URL url) throws DocumentException, IOException, XmlPullParserException {  String systemID=url.toExternalForm();  return read(createReader(url.openStream()),systemID);}  }
class C{  @Override public int hashCode(){  return key().hashCode();}  }
class C{  public int readString(char[] buffer,int offset,int length) throws IOException {  int readLength=0;  if (_chunkLength == END_OF_DATA) {    _chunkLength=0;    return -1;  } else   if (_chunkLength == 0) {    int tag=read();switch (tag) {case 'N':      return -1;case 'S':case 's':case 'X':case 'x':    _isLastChunk=tag == 'S' || tag == 'X';  _chunkLength=(read() << 8) + read();break;default :throw new IOException("expected 'S' at " + (char)tag);}}while (length > 0) {if (_chunkLength > 0) {buffer[offset++]=(char)parseUTF8Char();_chunkLength--;length--;readLength++;} else if (_isLastChunk) {if (readLength == 0) return -1; else {_chunkLength=END_OF_DATA;return readLength;}} else {int tag=read();switch (tag) {case 'S':case 's':case 'X':case 'x':_isLastChunk=tag == 'S' || tag == 'X';_chunkLength=(read() << 8) + read();break;default :throw new IOException("expected 'S' at " + (char)tag);}}}if (readLength == 0) return -1; else if (_chunkLength > 0 || !_isLastChunk) return readLength; else {_chunkLength=END_OF_DATA;return readLength;}}  }
class C{  public int activeWitnessesInQuorumSetCount(){  int activeWitnessCount=0;  for (  ClusterMember member : potentialQuorumMembersSet.values()) {    if (member.isActiveWitness()) {      activeWitnessCount++;    }  }  return activeWitnessCount;}  }
class C{  public static UrlChannel run(AdSenseHost service,String adClientId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Adding URL channel to ad client %s\n",adClientId);  System.out.println("=================================================================");  UrlChannel newUrlChannel=new UrlChannel().setUrlPattern("www.example.com/" + AdSenseHostSample.getUniqueName());  UrlChannel urlChannel=service.urlchannels().insert(adClientId,newUrlChannel).execute();  System.out.printf("URL channel with id \"%s\" and URL pattern \"%s\" was created.\n",urlChannel.getId(),urlChannel.getUrlPattern());  System.out.println();  return urlChannel;}  }
class C{  public final void onResume(@NonNull final Object serviceListener){  logd("onResume");  mServiceListener=serviceListener;  mState=State.RESUMED;  if (!mStoredResults.isEmpty()) {    logd("has undelivered results");    final List<SoftReference<OperationDelivery<?>>> oldResults=new ArrayList<>(mStoredResults);    mStoredResults.clear();    for (    SoftReference<OperationDelivery<?>> result : oldResults) {      final OperationDelivery<?> delivery=result.get();      if (delivery != null) {        deliverResult(delivery);      }    }    logd("no more undelivered results");  } else {    logd("has no undelivered results");  }}  }
class C{  public void filesDropped(File[] files){  if (files == null) {    return;  }  if (files.length == 0) {    return;  }  File dest=files[0];  if (dropFolder != null) {    dest=new File(dropFolder + File.separatorChar + files[0].getName());    if (files[0].getParent().compareTo(dest.getParent()) != 0) {      try {        copyFile(files[0],dest);      } catch (      Exception ex) {        log.error("filesDropped: error while copying new file, using original file");        dest=files[0];      }    }  }  setImagePath(dest.getPath());}  }
class C{  public DTMDefaultBaseIterators(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing,int blocksize,boolean usePrevsib,boolean newNameTable){  super(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,blocksize,usePrevsib,newNameTable);}  }
class C{  public static String encodeUrl(final char[] buf){  return encode(buf,"%20");}  }
class C{  public GeneralAlgorithmRunner(DataWrapper dataWrapper,GraphSource graphSource,Parameters parameters,KnowledgeBoxModel knowledgeBoxModel,IndependenceFactsModel facts){  if (parameters == null) {    throw new NullPointerException();  }  this.parameters=parameters;  if (graphSource instanceof GeneralAlgorithmRunner) {    this.algorithm=((GeneralAlgorithmRunner)graphSource).getAlgorithm();  }  if (dataWrapper != null) {    this.dataWrapper=dataWrapper;    if (dataWrapper.getDataModelList().isEmpty() && dataWrapper instanceof Simulation) {      ((Simulation)dataWrapper).createSimulation();    }  }  if (graphSource != null) {    if (dataWrapper == null && graphSource instanceof DataWrapper) {      this.dataWrapper=(DataWrapper)graphSource;    } else {      this.sourceGraph=graphSource.getGraph();    }  }  if (dataWrapper != null) {    List<String> names=this.dataWrapper.getVariableNames();    transferVarNamesToParams(names);  }  if (knowledgeBoxModel != null) {    knowledge=knowledgeBoxModel.getKnowledge();  } else {    knowledge=new Knowledge2();  }  if (facts != null) {    getParameters().set("independenceFacts",facts.getFacts());  }}  }
class C{  public static void writeBadRequest(HttpServletResponse response){  response.setStatus(HttpServletResponse.SC_BAD_REQUEST);}  }
class C{  public static void d(String tag,String msg){  d(tag,msg,null);}  }
class C{  public RestArea(){  super();}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  }  try {    if (shouldIndent())     indent();    final java.io.Writer writer=m_writer;    writer.write('&');    writer.write(name);    writer.write(';');  } catch (  IOException e) {    throw new SAXException(e);  }  if (m_tracer != null)   super.fireEntityReference(name);}  }
class C{  @Override public String toString(){  return "<unreachable>";}  }
class C{  public Collection<String> simpleMatchToFullName(String pattern){  Set<String> fields=Sets.newHashSet();  for (  MappedFieldType fieldType : this) {    if (Regex.simpleMatch(pattern,fieldType.names().fullName())) {      fields.add(fieldType.names().fullName());    } else     if (Regex.simpleMatch(pattern,fieldType.names().indexName())) {      fields.add(fieldType.names().fullName());    }  }  return fields;}  }
class C{  public TransformerConfigurationException(String msg,Throwable e){  super(msg,e);}  }
class C{  public void addToTags(String newTag){  if (StringUtils.isBlank(newTag)) {    return;  }  for (  String tag : tags) {    if (tag.equals(newTag)) {      return;    }  }  tags.add(newTag);  firePropertyChange(TAG,null,newTag);  firePropertyChange(TAGS_AS_STRING,null,newTag);}  }
class C{  public NotAllowed(){  requestFileName="notAllowed.query";}  }
class C{  public static boolean validateData(String data){  return (data != null && data.replaceAll("[\n\r]","").startsWith(BEGIN_VCARD) && data.replaceAll("[\n\r]","").endsWith(END_VCARD));}  }
class C{  public static CCOrientedTransitionScene transition(float t,CCScene s,int o){  return new CCOrientedTransitionScene(t,s,o);}  }
class C{  private void drawContinuous(UncertainObject uo,MarkerLibrary ml,int cnum,double size,Random rand){  for (int i=0; i < samples; i++) {    double[] v=proj.fastProjectDataToRenderSpace(uo.drawSample(rand));    if (v[0] != v[0] || v[1] != v[1]) {      continue;    }    ml.useMarker(svgp,layer,v[0],v[1],cnum,size);  }}  }
class C{  private GridClientImpl createClient() throws Exception {  GridClientConfiguration cfg=new GridClientConfiguration();  cfg.setServers(Arrays.asList(U.getLocalHost().getHostAddress() + ":" + REST_TCP_PORT));  cfg.setBalancer(new GridClientRoundRobinBalancer());  GridSslBasicContextFactory factory=(GridSslBasicContextFactory)GridTestUtils.sslContextFactory();  factory.setTrustManagers(clientTrustMgr);  cfg.setSslContextFactory(factory);  return (GridClientImpl)GridClientFactory.start(cfg);}  }
class C{  public static Function<byte[],JsonObject> fromBytes(){  JsonParser jp=new JsonParser();  return null;}  }
class C{  public CorruptIndexException(String message,String resourceDescription,Throwable cause){  super(Objects.toString(message) + " (resource=" + resourceDescription+ ")",cause);  this.resourceDescription=resourceDescription;  this.message=message;}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.DECIMAL_ESCAPE_SEQUENCE;}  }
class C{  public boolean hasException(){  return lastExecutionResult == null ? false : !lastExecutionResult.noThrownExceptions();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.090 -0400",hash_original_method="B4818D933CC56645B2F628693C776087",hash_generated_method="EB66A018CEC1CD3EAD7267FB6683EFEB") public boolean isBroken(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return generation.broken;  }  finally {    lock.unlock();  }}  }
class C{  public Matrix4x3d m31(double m31){  this.m31=m31;  properties&=~(PROPERTY_IDENTITY);  return this;}  }
class C{  static String packageNameOf(TypeElement type){  while (true) {    Element enclosing=type.getEnclosingElement();    if (enclosing instanceof PackageElement) {      return ((PackageElement)enclosing).getQualifiedName().toString();    }    type=(TypeElement)enclosing;  }}  }
class C{  @Override public boolean acceptsURL(String url){  return UrlParser.acceptsUrl(url);}  }
class C{  public Element store(Object o){  getInstance(o);  Element e=new Element("connection");  storeCommon(e,adapter);  if (adapter.getMdnsConfigure() == true) {    if (adapter.getHostName() != null && !adapter.getHostName().equals("")) {      e.setAttribute("address",adapter.getHostName());    }    e.setAttribute("mdnsConfigure","true");    if (adapter.getAdvertisementName() != null) {      e.setAttribute("advertisementName",adapter.getAdvertisementName());    }    if (adapter.getServiceType() != null) {      e.setAttribute("serviceType",adapter.getServiceType());    }  } else {    e.setAttribute("mdnsConfigure","false");    if (adapter.getHostName() != null) {      e.setAttribute("address",adapter.getHostName());    } else {      e.setAttribute("address",rb.getString("noneSelected"));    }    if (adapter.getPort() != 0) {      e.setAttribute("port","" + adapter.getPort());    } else {      e.setAttribute("port",rb.getString("noneSelected"));    }  }  e.setAttribute("class",this.getClass().getName());  extendElement(e);  return e;}  }
class C{  public final void testGetPrivate01(){  KeyPair kp=new KeyPair(null,null);  assertNull(kp.getPrivate());}  }
class C{  public FlashELResolver(){}  }
class C{  public boolean containsCertificate(){  return this.lengthCertificate() > 0;}  }
class C{  @SuppressWarnings("unchecked") private Segment<K,V> segmentForHash(int h){  long u=(((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;  return (Segment<K,V>)UNSAFE.getObjectVolatile(segments,u);}  }
class C{  private void pruneStack(){  while (true) {    Entry<K,V> last=stack.stackPrev;    if (last.isHot()) {      break;    }    removeFromStack(last);  }}  }
class C{  private static Identity parse(final JsonObject json){  final Map<String,String> props=new HashMap<>(json.size());  props.put(PsTwitter.NAME,json.getString(PsTwitter.NAME));  props.put("picture",json.getString("profile_image_url"));  return new Identity.Simple(String.format("urn:twitter:%d",json.getInt("id")),props);}  }
class C{  public MediaInfoException(LinkageError e){  this(String.format("Unable to load %d-bit native library 'mediainfo'",Platform.is64Bit() ? 64 : 32),e);}  }
class C{  public static void initializeActionIntent(){  mScrobbleDroidIntent=null;  mScrobbleDroidIntent=new Intent("net.jjc1138.android.scrobbler.action.MUSIC_STATUS");}  }
class C{  public void read(ByteCodeParser in) throws IOException {  int length=in.readInt();  int exnCount=in.readShort();  for (int i=0; i < exnCount; i++) {    int index=in.readShort();    if (index == 0) {      _methods.add(null);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private CVCertificate(DERApplicationSpecific appSpe) throws IOException {  setPrivateData(appSpe);}  }
class C{  public Boolean isWritersCanInvite(){  WritersCanInvite writersCanInvite=getExtension(WritersCanInvite.class);  return writersCanInvite == null ? null : writersCanInvite.getValue();}  }
class C{  public IterableSearchResult(SolrClient client,SolrQuery query) throws SolrServerException, IOException {  Objects.requireNonNull(client);  Objects.requireNonNull(query);  this.client=client;  this.query=query;  this.query.setRows(FETCH_SIZE);  rsp=client.query(this.query,SolrRequest.METHOD.POST);}  }
class C{  public Matrix4f trapezoidCrop(float p0x,float p0y,float p1x,float p1y,float p2x,float p2y,float p3x,float p3y){  float aX=p1y - p0y, aY=p0x - p1x;  float m00=aY;  float m10=-aX;  float m30=aX * p0y - aY * p0x;  float m01=aX;  float m11=aY;  float m31=-(aX * p0x + aY * p0y);  float c3x=m00 * p3x + m10 * p3y + m30;  float c3y=m01 * p3x + m11 * p3y + m31;  float s=-c3x / c3y;  m00+=s * m01;  m10+=s * m11;  m30+=s * m31;  float d1x=m00 * p1x + m10 * p1y + m30;  float d2x=m00 * p2x + m10 * p2y + m30;  float d=d1x * c3y / (d2x - d1x);  m31+=d;  float sx=2.0f / d2x;  float sy=1.0f / (c3y + d);  float u=(sy + sy) * d / (1.0f - sy * d);  float m03=m01 * sy;  float m13=m11 * sy;  float m33=m31 * sy;  m01=(u + 1.0f) * m03;  m11=(u + 1.0f) * m13;  m31=(u + 1.0f) * m33 - u;  m00=sx * m00 - m03;  m10=sx * m10 - m13;  m30=sx * m30 - m33;  set(m00,m01,0,m03,m10,m11,0,m13,0,0,1,0,m30,m31,0,m33);  _properties(0);  return this;}  }
class C{  public JarInputStream(InputStream in,boolean verify) throws IOException {  super(in);  this.doVerify=verify;  JarEntry e=(JarEntry)super.getNextEntry();  if (e != null && e.getName().equalsIgnoreCase("META-INF/"))   e=(JarEntry)super.getNextEntry();  first=checkManifest(e);}  }
class C{  public Collection<String> l10NLocaleSet(String id){  return ((Hashtable<String,String>)resources.get(id)).keySet();}  }
class C{  public String[][] to2DStringArray(){  return MLContextConversionUtil.frameObjectTo2DStringArray(frameObject);}  }
class C{  public int intValue(){  return 0;}  }
class C{  public int readMapStart() throws IOException {  return parseTag();}  }
class C{  boolean checkPidMatches() throws IllegalStateException, IOException, PidUnavailableException {  final RuntimeMXBean proxy=ManagementFactory.newPlatformMXBeanProxy(this.server,ManagementFactory.RUNTIME_MXBEAN_NAME,RuntimeMXBean.class);  final int remotePid=ProcessUtils.identifyPid(proxy.getName());  if (remotePid != this.pid) {    throw new IllegalStateException("Process has different pid '" + remotePid + "' than expected pid '"+ this.pid+ "'");  } else {    return true;  }}  }
class C{  static TemplateSequenceModel sort(TemplateSequenceModel seq,String[] keyNames) throws TemplateModelException {  int ln=seq.size();  if (ln == 0)   return seq;  ArrayList res=new ArrayList(ln);  int keyNamesLn=keyNames == null ? 0 : keyNames.length;  int keyType=KEY_TYPE_NOT_YET_DETECTED;  Comparator keyComparator=null;  for (int i=0; i < ln; i++) {    final TemplateModel item=seq.get(i);    TemplateModel key=item;    for (int keyNameI=0; keyNameI < keyNamesLn; keyNameI++) {      try {        key=((TemplateHashModel)key).get(keyNames[keyNameI]);      } catch (      ClassCastException e) {        if (!(key instanceof TemplateHashModel)) {          throw new _TemplateModelException(startErrorMessage(keyNamesLn,i),(keyNameI == 0 ? "Sequence items must be hashes when using ?sort_by. " : "The " + StringUtil.jQuote(keyNames[keyNameI - 1]))," subvariable is not a hash, so ?sort_by ","can't proceed with getting the ",new _DelayedJQuote(keyNames[keyNameI])," subvariable.");        } else {          throw e;        }      }      if (key == null) {        throw new _TemplateModelException(startErrorMessage(keyNamesLn,i),"The " + StringUtil.jQuote(keyNames[keyNameI])," subvariable was not found.");      }    }    if (keyType == KEY_TYPE_NOT_YET_DETECTED) {      if (key instanceof TemplateScalarModel) {        keyType=KEY_TYPE_STRING;        keyComparator=new LexicalKVPComparator(Environment.getCurrentEnvironment().getCollator());      } else       if (key instanceof TemplateNumberModel) {        keyType=KEY_TYPE_NUMBER;        keyComparator=new NumericalKVPComparator(Environment.getCurrentEnvironment().getArithmeticEngine());      } else       if (key instanceof TemplateDateModel) {        keyType=KEY_TYPE_DATE;        keyComparator=new DateKVPComparator();      } else       if (key instanceof TemplateBooleanModel) {        keyType=KEY_TYPE_BOOLEAN;        keyComparator=new BooleanKVPComparator();      } else {        throw new _TemplateModelException(startErrorMessage(keyNamesLn,i),"Values used for sorting must be numbers, strings, date/times or booleans.");      }    }switch (keyType) {case KEY_TYPE_STRING:      try {        res.add(new KVP(((TemplateScalarModel)key).getAsString(),item));      } catch (      ClassCastException e) {        if (!(key instanceof TemplateScalarModel)) {          throw newInconsistentSortKeyTypeException(keyNamesLn,"string","strings",i,key);        } else {          throw e;        }      }    break;case KEY_TYPE_NUMBER:  try {    res.add(new KVP(((TemplateNumberModel)key).getAsNumber(),item));  } catch (  ClassCastException e) {    if (!(key instanceof TemplateNumberModel)) {      throw newInconsistentSortKeyTypeException(keyNamesLn,"number","numbers",i,key);    }  }break;case KEY_TYPE_DATE:try {res.add(new KVP(((TemplateDateModel)key).getAsDate(),item));} catch (ClassCastException e) {if (!(key instanceof TemplateDateModel)) {  throw newInconsistentSortKeyTypeException(keyNamesLn,"date/time","date/times",i,key);}}break;case KEY_TYPE_BOOLEAN:try {res.add(new KVP(Boolean.valueOf(((TemplateBooleanModel)key).getAsBoolean()),item));} catch (ClassCastException e) {if (!(key instanceof TemplateBooleanModel)) {throw newInconsistentSortKeyTypeException(keyNamesLn,"boolean","booleans",i,key);}}break;default :throw new BugException("Unexpected key type");}}try {Collections.sort(res,keyComparator);} catch (Exception exc) {throw new _TemplateModelException(exc,startErrorMessage(keyNamesLn),"Unexpected error while sorting:" + exc);}for (int i=0; i < ln; i++) {res.set(i,((KVP)res.get(i)).value);}return new TemplateModelListSequence(res);}  }
class C{  public <S>T manyToOne(T destination,final S source,final NullPointerControl nullPointerControl,final MappingType mtDestination,final MappingType mtSource){  try {    return this.<T,S>getJMapper(relationalManyToOneMapper,source).getDestination(destination,source,nullPointerControl,mtDestination,mtSource);  } catch (  Exception e) {    return logAndReturnNull(e);  }}  }
class C{  public final void testValidateWhenEmpty(){  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.LOWERCASE,false);  assertTrue(characterOrNumberValidator.validate(""));}  }
class C{  private ExprKraken parseSubQuery(){  return parseExpr();}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  DoubleDoublePair other=(DoubleDoublePair)obj;  return (this.first == other.first) && (this.second == other.second);}  }
class C{  public Builder(){  adapter=new BuilderStateMachineConfigurerAdapter<S,E>();  builder=new StateMachineConfigBuilder<S,E>();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private Paint decodeCornerGradient(Shape s){  Rectangle2D bounds=s.getBounds2D();  float w=(float)bounds.getWidth();  float h=(float)bounds.getHeight();  return createGradient(0,0,w - 1,h - 1,new float[]{0f,1f},new Color[]{cornerColor2,cornerColor1});}  }
class C{  private ContentValues unpackScreen(byte[] buffer,int dataSize) throws InvalidProtocolBufferNanoException {  Screen screen=unpackProto(new Screen(),buffer,dataSize);  ContentValues values=new ContentValues();  values.put(LauncherSettings.WorkspaceScreens._ID,screen.id);  values.put(LauncherSettings.WorkspaceScreens.SCREEN_RANK,screen.rank);  return values;}  }
class C{  public KNeighborhoodFilter(V rootNode,int radiusK,EdgeType edgeType){  this.rootNodes=new HashSet<V>();  this.rootNodes.add(rootNode);  this.radiusK=radiusK;  this.edgeType=edgeType;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:10.515 -0400",hash_original_method="C79872AE4872F7433275CC8E4AAFD964",hash_generated_method="EADB879FAE6AC062DF2BDE52D9E46E12") public boolean isBlocked(){  PrintService.throwIfNotCalledOnMainThread();  return getInfo().getState() == PrintJobInfo.STATE_BLOCKED;}  }
class C{  public void addField(FieldInfo finfo) throws DuplicateMemberException {  testExistingField(finfo.getName(),finfo.getDescriptor());  fields.add(finfo);}  }
class C{  public void reset(){  this.watchlist.clear();}  }
class C{  @Override public void propertyChange(PropertyChangeEvent e){  fireOverlayChanged();}  }
class C{  protected void verifyAuthorizedSystemOrTenantOrgUser(List<ACLEntry> aclEntries){  if (isSystemAdmin() || isSecurityAdmin()) {    return;  }  verifyAuthorizedInTenantOrg(aclEntries);}  }
class C{  public static void showEpisodesDownloadedNotification(Context context){  Notification.Builder builder=new Notification.Builder(context);  Set<String> episodeServerIds=AppPrefHelper.getInstance(context).getStringSet(AppPrefHelper.PROPERTY_DOWNLOAD_NOTIFICATIONS);  if (episodeServerIds == null || episodeServerIds.size() == 0) {    return;  }  List<Episode> episodeList=EpisodeModel.getEpisodesByGeneratedId(context,episodeServerIds);  if (episodeList.size() == 0) {    return;  } else   if (episodeList.size() == 1) {    builder.setContentTitle(context.getString(R.string.notification_title_episode_downloaded));  } else   if (episodeList.size() > 1) {    String title=String.format(context.getString(R.string.notification_title_episodes_downloaded),episodeList.size());    builder.setContentTitle(title);    builder.setStyle(buildEpisodesInboxStyle(context,title,episodeList));  }  builder.setContentText(Html.fromHtml(String.format("<b>%s</b> %s",episodeList.get(0).getChannelTitle(),episodeList.get(0).getTitle())));  builder.setContentIntent(PendingIntentHelper.getOpenPremoActivityIntent(context));  builder.setDeleteIntent(PendingIntentHelper.getNewDownloadsDeleteIntent(context));  builder.setSmallIcon(R.drawable.ic_stat_download);  builder.setPriority(Notification.PRIORITY_DEFAULT);  builder.setOngoing(false);  builder.setShowWhen(true);  builder.setAutoCancel(true);  getNotificationManager(context).notify(NOTIFICATION_ID_DOWNLOADED,builder.build());}  }
class C{  private int dowait(boolean timed,long nanos) throws InterruptedException, BrokenBarrierException, TimeoutException {  final ReentrantLock lock=this.lock;  lock.lock();  try {    final Generation g=generation;    if (g.broken)     throw new BrokenBarrierException();    if (Thread.interrupted()) {      breakBarrier();      throw new InterruptedException();    }    int index=--count;    if (index == 0) {      boolean ranAction=false;      try {        final Runnable command=barrierCommand;        if (command != null)         command.run();        ranAction=true;        nextGeneration();        return 0;      }  finally {        if (!ranAction)         breakBarrier();      }    }    for (; ; ) {      try {        if (!timed)         trip.await(); else         if (nanos > 0L)         nanos=trip.awaitNanos(nanos);      } catch (      InterruptedException ie) {        if (g == generation && !g.broken) {          breakBarrier();          throw ie;        } else {          Thread.currentThread().interrupt();        }      }      if (g.broken)       throw new BrokenBarrierException();      if (g != generation)       return index;      if (timed && nanos <= 0L) {        breakBarrier();        throw new TimeoutException();      }    }  }  finally {    lock.unlock();  }}  }
class C{  protected boolean isAnyTestPointInTarget(Geometry testGeom){  PointLocator locator=new PointLocator();  List coords=ComponentCoordinateExtracter.getCoordinates(testGeom);  for (Iterator i=coords.iterator(); i.hasNext(); ) {    Coordinate p=(Coordinate)i.next();    if (locator.intersects(p,prepLine.getGeometry()))     return true;  }  return false;}  }
class C{  static public SerialTrafficController instance(){  if (self == null) {    if (log.isDebugEnabled()) {      log.debug("creating a new SerialTrafficController object");    }    self=new SerialTrafficController();  }  return self;}  }
class C{  public JobStatus(Iterable<JobStatus> statuses){  for (  JobStatus status : statuses) {    this.total+=status.total;    this.complete+=status.complete;    this.incomplete+=status.incomplete;    this.queued+=status.queued;    this.redeliveryCount+=status.redeliveryCount;  }  this.jobId="ALL";  this.graphId="ALL";}  }
class C{  private void fillAboveAndBelow(View sel,int position){  final int dividerHeight=mDividerHeight;  if (!mStackFromBottom) {    fillUp(position - 1,sel.getTop() - dividerHeight);    adjustViewsUpOrDown();    fillDown(position + 1,sel.getBottom() + dividerHeight);  } else {    fillDown(position + 1,sel.getBottom() + dividerHeight);    adjustViewsUpOrDown();    fillUp(position - 1,sel.getTop() - dividerHeight);  }}  }
class C{  private ViewUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public void resetCounter(){  this.bitBuffer=0;  this.bitBufferCount=0;  this.byteCounter=0L;}  }
class C{  public static <T>Mono<T> maybeToMono(Maybe<T> source){  return new MaybeAsMono<>(source);}  }
class C{  public void removeUserRole(UserRoleType userRole){  userRoles.remove(userRole);}  }
class C{  private static void stableStringSort(String[] arr,int start,int end){  stableStringSort(arr,arr,new String[end],start,end,0);}  }
class C{  public void close(){  this._stats.close();}  }
class C{  public static PropertyValuesHolder ofInt(Property<?,Integer> property,int... values){  return new IntPropertyValuesHolder(property,values);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.469 -0400",hash_original_method="F78E06F1002DF6D1BD2F5054F702D564",hash_generated_method="AA5572773BF49D9A6D6CAEAEA25D4BD5") private boolean conditionM0(String value,int index){  if (charAt(value,index + 1) == 'M') {    return true;  }  return contains(value,index - 1,3,"UMB") && ((index + 1) == value.length() - 1 || contains(value,index + 2,2,"ER"));}  }
class C{  @SuppressWarnings({"HardCodedStringLiteral"}) public String toString(){  final StringBuffer buf=new StringBuffer();  buf.append("\nFile: ");  buf.append((file != null) ? file.getAbsolutePath() : "null");  buf.append("\nStatus is: ");  buf.append(getStatusString());  buf.append("\nWorking revision: ");  buf.append(workingRevision);  buf.append("\nRepository revision: ");  buf.append("\nSticky date: ");  buf.append(stickyDate);  buf.append("\nSticky options: ");  buf.append(stickyOptions);  buf.append("\nSticky tag: ");  buf.append(stickyTag);  if (tags != null && tags.size() > 0) {    buf.append("\nExisting Tags:");    for (Iterator it=tags.iterator(); it.hasNext(); ) {      buf.append("\n  ");      buf.append(it.next().toString());    }  }  return buf.toString();}  }
class C{  @SuppressWarnings("deprecation") private void reconfigurePartitions(Configuration conf,Path path) throws IOException {  FileSystem fs=path.getFileSystem(conf);  if (fs.exists(path)) {    try (SequenceFile.Reader reader=new SequenceFile.Reader(fs,path,conf)){      int partitionCount=0;      Writable key=(Writable)ReflectionUtils.newInstance(reader.getKeyClass(),conf);      Writable value=(Writable)ReflectionUtils.newInstance(reader.getValueClass(),conf);      while (reader.next(key,value)) {        partitionCount++;      }      TotalOrderPartitioner.setPartitionFile(job.getConfiguration(),path);      job.setNumReduceTasks(partitionCount + 1);    }   } else {    logger.info("File '" + path.toString() + " doesn't exist, will not reconfigure hfile Partitions");  }}  }
class C{  public MemStream(String uri,String id){  super(uri,id);  this.uri=uri;  this.id=id;}  }
class C{  private boolean isDecoTop(){switch (quadrant) {case IDecoration.TOP_LEFT:case IDecoration.TOP_RIGHT:    return true;default :  return false;}}  }
class C{  public Coord4D translate(int x,int y,int z){  xCoord+=x;  yCoord+=y;  zCoord+=z;  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double maxPatchValue=0;  int x, y;  boolean blnFoundNeighbour;  boolean blnIncludeDiagNeighbour=false;  boolean blnTreatZerosAsBackground=false;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnIncludeDiagNeighbour=Boolean.parseBoolean(args[i]);      if (!blnIncludeDiagNeighbour) {        dX=new int[]{0,1,0,-1};        dY=new int[]{-1,0,1,0};      }    } else     if (i == 3) {      blnTreatZerosAsBackground=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    numScanCells=dY.length;    image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    noData=image.getNoDataValue();    double initialValue=-1;    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,initialValue);    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (blnTreatZerosAsBackground) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (image.getValue(row,col) == 0) {            output.setValue(row,col,0);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      if (output.getValue(0,0) == -1) {        output.setValue(0,0,1);      }    } else {      output.setValue(0,0,0);    }    double patchValue=0;    double neighbourPatchValue=0;    double newPatchValue=0;    double imageValue=0;    int loopNum=1;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        imageValue=image.getValue(row,col);        if (imageValue != noData) {          patchValue=output.getValue(row,col);          if (patchValue == initialValue) {            blnFoundNeighbour=false;            for (i=0; i < numScanCells; i++) {              x=col + dX[i];              y=row + dY[i];              neighbourPatchValue=output.getValue(y,x);              if (neighbourPatchValue != initialValue && image.getValue(y,x) == imageValue) {                output.setValue(row,col,neighbourPatchValue);                newPatchValue=neighbourPatchValue;                blnFoundNeighbour=true;                break;              }            }            if (!blnFoundNeighbour) {              maxPatchValue++;              newPatchValue=maxPatchValue;              output.setValue(row,col,newPatchValue);            }            depth=0;            ScanConnectedCells(row,col,imageValue,initialValue,newPatchValue);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    boolean somethingDone;    double[] reclass=new double[(int)maxPatchValue + 1];    do {      loopNum++;      updateProgress("Loop " + loopNum + ":",0);      somethingDone=false;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          imageValue=image.getValue(row,col);          if (imageValue != noData) {            patchValue=output.getValue(row,col);            for (i=0; i < numScanCells; i++) {              x=col + dX[i];              y=row + dY[i];              neighbourPatchValue=output.getValue(y,x);              if (neighbourPatchValue != patchValue && image.getValue(y,x) == imageValue) {                somethingDone=true;                if (patchValue < neighbourPatchValue) {                  reclass[(int)neighbourPatchValue]=-1;                  output.setValue(y,x,patchValue);                  ScanConnectedCells(y,x,imageValue,neighbourPatchValue,patchValue);                } else {                  reclass[(int)patchValue]=-1;                  output.setValue(row,col,neighbourPatchValue);                  ScanConnectedCells(row,col,imageValue,patchValue,neighbourPatchValue);                  patchValue=neighbourPatchValue;                }              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } while (somethingDone);    i=0;    for (int a=0; a < maxPatchValue + 1; a++) {      if (reclass[a] != -1) {        reclass[a]=i;        i++;      }    }    loopNum++;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        patchValue=output.getValue(row,col);        if (patchValue != noData) {          output.setValue(row,col,reclass[(int)patchValue]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void writeVarInt(OutputStream out,int x) throws IOException {  while ((x & ~0x7f) != 0) {    out.write((byte)(0x80 | (x & 0x7f)));    x>>>=7;  }  out.write((byte)x);}  }
class C{  protected void fireDocumentChanged(DocumentEvent event){  updateDocumentStructures(event);  if (fStoppedListenerNotification == 0)   doFireDocumentChanged(event); else   fDeferredDocumentEvent=event;}  }
class C{  private boolean doDdpOrientation(Node d,Node a,Node b,Node c,Map<Node,Node> previous,Graph graph){  if (graph.isAdjacentTo(d,c)) {    throw new IllegalArgumentException();  }  List<Node> path=getPath(d,previous);  boolean ind=getSepsets().isIndependent(d,c,path);  List<Node> path2=new ArrayList<>(path);  path2.remove(b);  boolean ind2=getSepsets().isIndependent(d,c,path2);  if (!ind && !ind2) {    List<Node> sepset=getSepsets().getSepset(d,c);    if (sepset == null) {      System.out.println("Must be a sepset: " + d + " and "+ c+ "; they're non-adjacent.");      return false;    }    ind=sepset.contains(b);  }  if (ind) {    graph.setEndpoint(c,b,Endpoint.TAIL);    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Definite discriminating path d = " + d,graph.getEdge(b,c)));    System.out.println(SearchLogUtils.edgeOrientedMsg("Definite discriminating path d = " + d,graph.getEdge(b,c)));    changeFlag=true;    return true;  } else {    if (!isArrowpointAllowed(a,b,graph)) {      return false;    }    if (!isArrowpointAllowed(c,b,graph)) {      return false;    }    graph.setEndpoint(a,b,Endpoint.ARROW);    graph.setEndpoint(c,b,Endpoint.ARROW);    logger.log("impliedOrientations",SearchLogUtils.colliderOrientedMsg("Definite discriminating path.. d = " + d,a,b,c));    System.out.println(SearchLogUtils.colliderOrientedMsg("Definite discriminating path.. d = " + d,a,b,c));    changeFlag=true;    return true;  }}  }
class C{  public static void reset(){  if (API.manualAPI != null)   API.manualAPI.reset();}  }
class C{  public void generateOutput() throws Exception {  BufferedImage bi;  Graphics g;  bi=new BufferedImage(getComponent().getWidth(),getComponent().getHeight(),BufferedImage.TYPE_INT_RGB);  g=bi.getGraphics();  g.setPaintMode();  g.setColor(getBackground());  if (g instanceof Graphics2D)   ((Graphics2D)g).scale(getXScale(),getYScale());  g.fillRect(0,0,getComponent().getWidth(),getComponent().getHeight());  getComponent().printAll(g);  ImageIO.write(bi,"png",getFile());}  }
class C{  public boolean canRetryFor(Object result,Throwable failure){  for (  BiPredicate<Object,Throwable> predicate : retryConditions) {    if (predicate.test(result,failure))     return true;  }  return failure != null && !failuresChecked;}  }
class C{  public Y gt(String value){  if (value == null || value.trim().length() == 0) {    return super.gt((Long)null);  } else {    return super.gt(Long.parseLong(value.trim()));  }}  }
class C{  private Boolean visitCardinalityReduceOperator(ILogicalOperator op) throws AlgebricksException {  return visitTupleDiscardingOrCardinalityReduceOperator(op);}  }
class C{  @Override protected void initListeners(){}  }
class C{  @Override public void onManagedUpdate(float pSecondsElapsed){  super.onManagedUpdate(pSecondsElapsed);  if (_levelController == null) {    return;  }  if (_started) {    EulerAngles eulerAngles=_orientationProvider.getEulerAngles();    float roll=MathUtils.bringToBounds(-MAX_ORIENTATION_ANGLE,MAX_ORIENTATION_ANGLE,eulerAngles.getRoll());    float pitch=MathUtils.bringToBounds(-MAX_ORIENTATION_ANGLE,MAX_ORIENTATION_ANGLE,eulerAngles.getPitch());    float swap;switch (_screenRotation) {case Surface.ROTATION_0:      break;case Surface.ROTATION_270:    swap=pitch;  pitch=-roll;roll=swap;break;case Surface.ROTATION_180:pitch=-pitch;roll=-roll;break;case Surface.ROTATION_90:swap=pitch;pitch=roll;roll=-swap;break;}_gravity.set(_radToGravity * roll,_radToGravity * pitch);_gravity.add(_gravityCorrection);_physicsWorld.setGravity(_gravity);checkDestroyBall();if (_ball != null && !_isAnimating && !_isLevelCompleted) {_timePassed+=pSecondsElapsed;_physicsWorld.onUpdate(pSecondsElapsed);checkDestroyBall();if (_ball != null && !_isAnimating) {Vector2 ballPosition=_ball.getPosition();ballPosition.mul(PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT);_ballSprite.setPosition(ballPosition.x,ballPosition.y);}if (_levelDuration > 0) {updateTimer(pSecondsElapsed);}}}}  }
class C{  public static double mean(int... values){  MeanAccumulator accumulator=new MeanAccumulator();  for (  int value : values) {    accumulator.add(value);  }  return accumulator.mean();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void add(SubRange newRange){  if (newRange == null) {    return;  }  for (  SubRange range : data) {    if (range.inRange(newRange)) {      return;    }  }  data.add(newRange);}  }
class C{  public final boolean isEnabled(SmileParser.Feature f){  return (_smileParserFeatures & f.getMask()) != 0;}  }
class C{  private void establishHeidelTimePreconditions(JCas jcas){  establishPartOfSpeechInformation(jcas);}  }
class C{  public ClientMessage sendMessage(SimpleString address,String body){  ClientMessage message=createMessage(body);  sendMessage(address,message);  return message;}  }
class C{  void scrollVertical(int y){  if (log.isLoggable(PlatformLogger.Level.FINE)) {    log.fine("Scrolling vertically by " + y);  }  int itemsInWin=itemsInWindow();  int h=getItemHeight();  int pixelsToScroll=y * h;  if (vsb.getValue() < -y) {    y=-vsb.getValue();  }  vsb.setValue(vsb.getValue() + y);  Rectangle source=null;  Point distance=null;  int firstItem=0, lastItem=0;  int options=PAINT_HIDEFOCUS | PAINT_ITEMS | PAINT_VSCROLL| PAINT_FOCUS;  if (y > 0) {    if (y < itemsInWin) {      source=new Rectangle(MARGIN,MARGIN + pixelsToScroll,width - SCROLLBAR_AREA,h * (itemsInWin - y - 1) - 1);      distance=new Point(0,-pixelsToScroll);      options|=COPY_AREA;    }    firstItem=vsb.getValue() + itemsInWin - y - 1;    lastItem=vsb.getValue() + itemsInWin - 1;  } else   if (y < 0) {    if (y + itemsInWindow() > 0) {      source=new Rectangle(MARGIN,MARGIN,width - SCROLLBAR_AREA,h * (itemsInWin + y));      distance=new Point(0,-pixelsToScroll);      options|=COPY_AREA;    }    firstItem=vsb.getValue();    lastItem=Math.min(getLastVisibleItem(),vsb.getValue() + -y);  }  repaint(firstItem,lastItem,options,source,distance);}  }
class C{  public static int compareSize(Hop hop1,Hop hop2){  long size1=hop1.getDim1() * hop1.getDim2();  long size2=hop2.getDim1() * hop2.getDim2();  return Long.compare(size1,size2);}  }
class C{  private void updateActions(){  String label;  if (DEBUG)   System.out.println("UndoRedoManager@" + hashCode() + ".updateActions "+ editToBeUndone()+ " canUndo="+ canUndo()+ " canRedo="+ canRedo());  if (canUndo()) {    undoAction.setEnabled(true);    label=getUndoPresentationName();  } else {    undoAction.setEnabled(false);    label=labels.getString("edit.undo.text");  }  undoAction.putValue(Action.NAME,label);  undoAction.putValue(Action.SHORT_DESCRIPTION,label);  if (canRedo()) {    redoAction.setEnabled(true);    label=getRedoPresentationName();  } else {    redoAction.setEnabled(false);    label=labels.getString("edit.redo.text");  }  redoAction.putValue(Action.NAME,label);  redoAction.putValue(Action.SHORT_DESCRIPTION,label);}  }
class C{  public Instances generateExamples(int num,Random random,Instances format) throws Exception {  if (format == null) {    throw new Exception("Dataset format not defined.");  }  for (int i=0; i < num; i++) {    Instance example=generateExample(random,format);    boolean classDefined=classifyExample(example);    if (!classDefined) {      example=updateDecisionList(random,example);    }    example.setDataset(format);    format.add(example);  }  return (format);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int totalNQueens(int n){  ArrayList<ArrayList<Integer>> rst=new ArrayList<ArrayList<Integer>>();  if (n <= 0) {    return 0;  }  search(n,new ArrayList<Integer>(),rst);  return rst.size();}  }
class C{  public ComponentBuilder obfuscated(boolean obfuscated){  current.setObfuscated(obfuscated);  return this;}  }
class C{  @NoInline private static void write(Atom value){  value.sysWrite();}  }
class C{  public boolean isEmpty(){  return assocs.isEmpty();}  }
class C{  public static CCTMXMapInfo formatWithTMXFile(String tmxFile){  return new CCTMXMapInfo(tmxFile);}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.ACTIVE_STATE_REFERENCE_EXPRESSION;}  }
class C{  public List<BurpCertificate> importCertificateChain(String filename){  setStatus("Importing certificate chain...");  FileInputStream fis;  List<BurpCertificate> certificateChain=new LinkedList<>();  try {    fis=new FileInputStream(filename);    byte value[]=new byte[fis.available()];    fis.read(value);    ByteArrayInputStream bais=new ByteArrayInputStream(value);    fis.close();    CertificateFactory certFactory=CertificateFactory.getInstance("X.509");    for (    Certificate c : certFactory.generateCertificates(bais)) {      X509Certificate x509certificate=(X509Certificate)c;      BurpCertificate certificate=new BurpCertificate(x509certificate);      certificate.setPublicKey(x509certificate.getPublicKey());      certificate.setSource("Imported Chain");      certificateChain.add(certificate);    }    burpCertificateStore.addCertificateChain(certificateChain);    setCertificateTree();    setStatus("Certificate Chain imported");    return certificateChain;  } catch (  IOException|CertificateException e) {    setStatus("Error reading certificate chain. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  Exception e) {    setStatus("Error (" + e.getMessage() + ")");  }  return null;}  }
class C{  @Override public void onFinishInflate(){  if (!alreadyInflated_) {    alreadyInflated_=true;    inflate(getContext(),layout.gv_item,this);    onViewChangedNotifier_.notifyViewChanged(this);  }  super.onFinishInflate();}  }
class C{  public void didRollback(){synchronized (this) {    if (pending != null) {      pending.cancel(false);      pending=null;    }    docsSinceCommit.set(0);  }}  }
class C{  public CarTimeEstimator(){}  }
class C{  protected void notifyClickListenersAboutClick(int item){  if (clickingListeners.size() > 0) {    for (    OnWheelClickedListener listener : clickingListeners) {      listener.onItemClicked(this,item);    }  } else {    setCurrentItem(item,true,500);  }}  }
class C{  protected JSRInlinerAdapter(final int api,final MethodVisitor mv,final int access,final String name,final String desc,final String signature,final String[] exceptions){  super(api,access,name,desc,signature,exceptions);  this.mv=mv;}  }
class C{  static String validateOptionalString(Map<String,Object> map,String key,String errorPrefix) throws IOException {  Object value=map.get(key);  if (value == null) {    return null;  }  if (!(value instanceof String)) {    throw new IOException(String.format(VALUE_WRONG_TYPE_MESSAGE,errorPrefix,"string",key));  }  return (String)value;}  }
class C{  public boolean isExplicit(){  return explicit;}  }
class C{  protected void alias(final CommandName parent,final String name,final Class<? extends BaseCommand> clazz){  CommandMetaData meta=clazz.getAnnotation(CommandMetaData.class);  if (meta == null) {    throw new IllegalStateException("no CommandMetaData annotation found");  }  bind(Commands.key(parent,name,meta.description())).to(clazz);}  }
class C{  public static String encodeQuery(String query){  String retString;  retString=replaceString(query,"%","%25");  retString=replaceString(retString," ","%20");  return retString;}  }
class C{  public static void addAlignmentButtonsTo(JToolBar bar,final DrawingEditor editor){  addAlignmentButtonsTo(bar,editor,new LinkedList<Disposable>());}  }
class C{  @Override public void configure(ClientDetailsServiceConfigurer clients) throws Exception {  clients.inMemory().withClient("curl").authorities("ROLE_ADMIN").resourceIds("jaxenter").scopes("read","write").authorizedGrantTypes("client_credentials").secret("password").and().withClient("web").redirectUris("http://github.com/techdev-solutions/").resourceIds("jaxenter").scopes("read").authorizedGrantTypes("implicit");}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.728 -0400",hash_original_method="EE30809419C042C9133DA321A16F7DFD",hash_generated_method="108A0CC68AF0F1C128B1F7C2EFE7950F") @Override public void write(int idx) throws IOException {  out.write(idx);}  }
class C{  public final static String pieceAndSquareToString(int currentPieceType,int p,int sq){  StringBuilder ret=new StringBuilder();  if (currentPieceType == PGNOptions.PT_FIGURINE) {    ret.append(Piece.toUniCode(p));  } else {    boolean localized=(currentPieceType != PGNOptions.PT_ENGLISH);    if ((p == Piece.WPAWN) || (p == Piece.BPAWN))     ret.append(localized ? pieceNames[0] : "P"); else     ret.append(localized ? pieceToCharLocalized(p) : pieceToChar(p));  }  ret.append(squareToString(sq));  return ret.toString();}  }
class C{  public FireworkEffectBuilder withFlicker(){  this.flicker=true;  return this;}  }
class C{  @Override public void close() throws IOException {synchronized (searcherLock) {    ensureOpen();    closed=true;    if (searcher != null) {      searcher.getIndexReader().close();    }    searcher=null;  }}  }
class C{  @Override public String toString(){  StringBuilder strb=new StringBuilder("Concrete members, ordered:\nMembers: ");  strb.append(ownedAndMixedInConcreteMembers.stream().map(null).collect(Collectors.joining(";")));  strb.append("\nAccessors: ");  strb.append(concreteAccessorTuples.stream().map(null).collect(Collectors.joining(";")));  strb.append("\nFields: ");  strb.append(fieldsOverridingAccessors.stream().map(null).collect(Collectors.joining(";")));  return strb.toString();}  }
class C{  @Override synchronized public void merge(IndexWriter writer,MergeTrigger trigger,boolean newMergesFound) throws IOException {  while (true) {    MergePolicy.OneMerge merge=writer.getNextMerge();    if (merge == null)     break;    writer.merge(merge);  }}  }
class C{  protected void sequence_ArrayElement(ISerializationContext context,ArrayElement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void shutDown() throws PluginRuntimeException {}  }
class C{  protected GenericDelegator(String delegatorFullName) throws GenericEntityException {  this.setDelegatorNames(delegatorFullName);  this.delegatorInfo=EntityConfig.getInstance().getDelegator(delegatorBaseName);  String kekText;  if (UtilValidate.isNotEmpty(this.delegatorTenantId)) {    Delegator baseDelegator=DelegatorFactory.getDelegator(this.delegatorBaseName);    GenericValue tenant=EntityQuery.use(baseDelegator).from("Tenant").where("tenantId",this.delegatorTenantId).cache(true).queryOne();    if (tenant == null) {      throw new GenericEntityException("No Tenant record found for delegator [" + this.delegatorFullName + "] with tenantId ["+ this.delegatorTenantId+ "]");    } else     if ("Y".equals(tenant.getString("disabled"))) {      throw new GenericEntityException("No Tenant record found for delegator [" + this.delegatorFullName + "] with tenantId ["+ this.delegatorTenantId+ "]");    }    GenericValue kekValue=EntityQuery.use(baseDelegator).from("TenantKeyEncryptingKey").where("tenantId",getDelegatorTenantId()).cache(true).queryOne();    if (kekValue != null) {      kekText=kekValue.getString("kekText");    } else {      kekText=this.delegatorInfo.getKeyEncryptingKey();    }  } else {    kekText=this.delegatorInfo.getKeyEncryptingKey();  }  this.modelReader=ModelReader.getModelReader(delegatorBaseName);  this.modelGroupReader=ModelGroupReader.getModelGroupReader(delegatorBaseName);  cache=new Cache(delegatorFullName);  List<String> warningList=new LinkedList<String>();  Debug.logInfo("Doing entity definition check...",module);  ModelEntityChecker.checkEntities(this,warningList);  if (warningList.size() > 0) {    Debug.logWarning("=-=-=-=-= Found " + warningList.size() + " warnings when checking the entity definitions:",module);    for (    String warning : warningList) {      Debug.logWarning(warning,module);    }  }  Set<String> groupNames=getModelGroupReader().getGroupNames(delegatorBaseName);  List<Future<Void>> futures=new LinkedList<Future<Void>>();  for (  String groupName : groupNames) {    futures.add(ExecutionPool.GLOBAL_BATCH.submit(createHelperCallable(groupName)));  }  ExecutionPool.getAllFutures(futures);  this.crypto=new EntityCrypto(this,kekText);}  }
class C{  public void startExternalSubset(XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  startParameterEntity("[dtd]",null,null,augs);}  }
class C{  public void addAttachment(byte[] data,String type,String name){  ByteArrayDataSource byteArray=new ByteArrayDataSource(data,type).setName(name);  addAttachment(byteArray);}  }
class C{  public static int OS2IP(byte[] input,int inOff){  int result=(input[inOff++] & 0xff) << 24;  result|=(input[inOff++] & 0xff) << 16;  result|=(input[inOff++] & 0xff) << 8;  result|=input[inOff] & 0xff;  return result;}  }
class C{  public Location interpolateAlongPath(Location endLocation,@WorldWind.PathType int pathType,double amount,Location result){  if (endLocation == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","interpolateAlongPath","missingLocation"));  }  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","interpolateAlongPath","missingResult"));  }  if (this.equals(endLocation)) {    result.latitude=this.latitude;    result.longitude=this.longitude;    return this;  }  if (pathType == WorldWind.GREAT_CIRCLE) {    double azimuthDegrees=this.greatCircleAzimuth(endLocation);    double distanceRadians=this.greatCircleDistance(endLocation) * amount;    return this.greatCircleLocation(azimuthDegrees,distanceRadians,result);  } else   if (pathType == WorldWind.RHUMB_LINE) {    double azimuthDegrees=this.rhumbAzimuth(endLocation);    double distanceRadians=this.rhumbDistance(endLocation) * amount;    return this.rhumbLocation(azimuthDegrees,distanceRadians,result);  } else {    double azimuthDegrees=this.linearAzimuth(endLocation);    double distanceRadians=this.linearDistance(endLocation) * amount;    return this.linearLocation(azimuthDegrees,distanceRadians,result);  }}  }
class C{  public BillReceiptInfo executeCollection(Payment payment,String source){  if (!isCollectionPermitted()) {    throw new ApplicationRuntimeException("Collection is not allowed - current balance is zero and advance coll exists.");  }  List<PaymentInfo> paymentInfoList=preparePaymentInfo(payment);  LOG.debug("CollectionHelper.executeCollection(): collection is from the field...");  BillInfoImpl billInfo=prepareBillInfo(payment.getAmount(),COLLECTIONTYPE.F,source);  return SpringBeanUtil.getCollectionIntegrationService().createReceipt(billInfo,paymentInfoList);}  }
class C{  public static int surroundPixels(double stdDev){  return surroundPixels(stdDev,null);}  }
class C{  public synchronized boolean isDone(){  return (uploadResultFuture != null) && uploadResultFuture.isDone();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:49.582 -0500",hash_original_method="DE7C1D5317206A67C09F18E7BB17C60A",hash_generated_method="1AFC289BC5BEC6DC5DDE2665C4774E26") public UsbEndpoint(int address,int attributes,int maxPacketSize,int interval){  mAddress=address;  mAttributes=attributes;  mMaxPacketSize=maxPacketSize;  mInterval=interval;}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  public void loadFromDb(){  resetAllMedia(MediaLocTime.loadAllMediaLocTime());}  }
class C{  public static CharArraySet makeStopSet(String[] stopWords,boolean ignoreCase){  CharArraySet stopSet=new CharArraySet(stopWords.length,ignoreCase);  stopSet.addAll(Arrays.asList(stopWords));  return stopSet;}  }
class C{  public boolean wasCancelled(){  return wasCancelled;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public ContentTypeHeader createContentTypeHeader(String contentType,String contentSubType) throws ParseException {  if (contentType == null || contentSubType == null)   throw new NullPointerException("null contentType or subType");  ContentType c=new ContentType();  c.setContentType(contentType);  c.setContentSubType(contentSubType);  return c;}  }
class C{  public static Config mergeConfiguration(Config... configs) throws ConfigurationException {  return mergeConfiguration(Arrays.asList(configs));}  }
class C{  public static void deleteReference(final SQLProvider provider,final INaviOperandTreeNode node,final IAddress address,final ReferenceType type) throws CouldntDeleteException {  Preconditions.checkNotNull(provider,"IE00476: Provider argument can not be null");  Preconditions.checkNotNull(node,"IE00477: Node argument can not be null");  Preconditions.checkNotNull(address,"IE01619: Address argument can not be null");  Preconditions.checkNotNull(type,"IE00478: Type argument can not be null");  final CConnection connection=provider.getConnection();  final BigInteger instructionAddress=node.getInstructionAddress().toBigInteger();  final int position=node.getOperandPosition();  final int expressionId=node.getId();  final BigInteger targetAddress=address.toBigInteger();  final String deleteQuery="DELETE FROM " + CTableNames.ADDRESS_REFERENCES_TABLE + " WHERE address = ? AND position = ? AND expression_id = ? AND type = '"+ type.toString().toLowerCase()+ "' AND target = ?";  try {    final PreparedStatement deleteStatement=connection.getConnection().prepareStatement(deleteQuery);    try {      deleteStatement.setObject(1,instructionAddress,java.sql.Types.BIGINT);      deleteStatement.setInt(2,position);      deleteStatement.setInt(3,expressionId);      deleteStatement.setObject(4,targetAddress,java.sql.Types.BIGINT);      deleteStatement.execute();    } catch (    final SQLException exception) {      throw new CouldntDeleteException(exception);    } finally {      deleteStatement.close();    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.278 -0400",hash_original_method="A5789DEAABDFD4C8D732F9FE94502DA7",hash_generated_method="2A6109C914C6CBB7A381AD40D20E29DA") private void readObject(final java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  initialize();  HeadIndex<K,V> h=head;  Node<K,V> basepred=h.node;  ArrayList<Index<K,V>> preds=new ArrayList<Index<K,V>>();  for (int i=0; i <= h.level; ++i)   preds.add(null);  Index<K,V> q=h;  for (int i=h.level; i > 0; --i) {    preds.set(i,q);    q=q.down;  }  for (; ; ) {    Object k=s.readObject();    if (k == null)     break;    Object v=s.readObject();    if (v == null)     throw new NullPointerException();    K key=(K)k;    V val=(V)v;    int j=randomLevel();    if (j > h.level)     j=h.level + 1;    Node<K,V> z=new Node<K,V>(key,val,null);    basepred.next=z;    basepred=z;    if (j > 0) {      Index<K,V> idx=null;      for (int i=1; i <= j; ++i) {        idx=new Index<K,V>(z,idx,null);        if (i > h.level)         h=new HeadIndex<K,V>(h.node,h,idx,i);        if (i < preds.size()) {          preds.get(i).right=idx;          preds.set(i,idx);        } else         preds.add(idx);      }    }  }  head=h;}  }
class C{  public static String requestStringFromUrl(String url){  return requestStringFromUrl(url,null);}  }
class C{  protected void buildJMSResources() throws Exception {  destroyJMSResources(true);  if (cf == null) {    Log.logger.log(Level.FINE,"Getting ConnectionFactory");    cf=jmsProvider.lookupConnectionFactory(null);  }  Log.logger.log(Level.FINE,"Making connection");  connection=jmsProvider.getConnection(cf,this,String.valueOf(this.getThreadNum()));  connection.start();  Log.logger.log(Level.FINE,"Connection started {0}",connection);  session=connection.createSession(transacted,Config.parms.getInt("am"));  Log.logger.log(Level.FINE,"Session started {0}",session);}  }
class C{  public RepaintAction(){  super();}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public ValueExp apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  return this;}  }
class C{  private String nextUrlBaseToken(String url){  StringBuffer token=new StringBuffer();  while (urlBaseEndIndex < url.length()) {    char ch=url.charAt(urlBaseEndIndex++);    if (ch == ':' || ch == ';' || ch == '?') {      break;    }    if (ch == '/') {      if (urlBaseEndIndex < url.length() && url.charAt(urlBaseEndIndex) == '/') {        urlBaseEndIndex++;        continue;      } else {        break;      }    }    token.append(ch);  }  if (token.length() == 0)   return null; else   return token.toString();}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  m_curPDEvalue.append(ch,start,length);}  }
class C{  public Item withIdentifier(long identifier){  this.mIdentifier=identifier;  return (Item)this;}  }
class C{  public DrawerBuilder withSelectedItemByPosition(int selectedItemPosition){  this.mSelectedItemPosition=selectedItemPosition;  return this;}  }
class C{  public void modifyEnergyStored(int energy){  this.energy+=energy;  if (this.energy > capacity) {    this.energy=capacity;  } else   if (this.energy < 0) {    this.energy=0;  }}  }
class C{  public boolean subscribeVnxFileForIndication(String storageSystemURI){  _log.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  boolean isSuccess=false;  try {    _log.debug("storageSystemURI :{}",storageSystemURI);    StorageSystem storageDevice=_dbClient.queryObject(StorageSystem.class,URI.create(storageSystemURI));    CimConnection cimConnection=getConnection(storageDevice);    if (null != cimConnection) {      _connectionManager.subscribe(cimConnection);      isSuccess=true;    }  } catch (  Exception e) {    _log.error("subscription for the StoargeSystem {} is failed",storageSystemURI);    _log.error(e.getMessage(),e);  }  _log.debug("vnx file subscription status :{}",isSuccess);  _log.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());  return isSuccess;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_AFTER_CODE_1__CODE_LANG_1:    return getCodeLang_1();case UmplePackage.ANONYMOUS_AFTER_CODE_1__CODE_LANGS_1:  return getCodeLangs_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public VoltageScorer(Hypergraph<V,E> g,Map<V,? extends Number> source_voltages,Collection<V> sinks){  super(g);  this.source_voltages=source_voltages;  this.sinks=sinks;  this.edge_weights=new UniformDegreeWeight<V,E>(g);  initialize();}  }
class C{  public static byte[] mergeLocalFileDataData(ZipExtraField[] data){  int sum=4 * data.length;  for (int i=0; i < data.length; i++) {    sum+=data[i].getLocalFileDataLength().getValue();  }  byte[] result=new byte[sum];  int start=0;  for (int i=0; i < data.length; i++) {    System.arraycopy(data[i].getHeaderId().getBytes(),0,result,start,2);    System.arraycopy(data[i].getLocalFileDataLength().getBytes(),0,result,start + 2,2);    byte[] local=data[i].getLocalFileDataData();    System.arraycopy(local,0,result,start + 4,local.length);    start+=(local.length + 4);  }  return result;}  }
class C{  public static Namespace findByQualifier(EntityManager em,String qualifier){  SystemAssert.requireArgument(em != null,"EntityManager cannot be null.");  SystemAssert.requireArgument(qualifier != null && !qualifier.isEmpty(),"Namespace qualifier cannot be null or empty.");  TypedQuery<Namespace> query=em.createNamedQuery("Namespace.findByQualifier",Namespace.class);  try {    return query.setParameter("qualifier",qualifier).getSingleResult();  } catch (  NoResultException ex) {    return null;  }}  }
class C{  public void writeDetails(javax.xml.namespace.QName qname,org.apache.axis.encoding.SerializationContext context) throws java.io.IOException {  context.serialize(qname,null,this);}  }
class C{  @Override public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  private static long spin(long ms){  long start=threadMXBean.getCurrentThreadCpuTime();  do {    long durationMS=(threadMXBean.getCurrentThreadCpuTime() - start) / 1000;    if (durationMS >= ms) {      return durationMS;    }  } while (true);}  }
class C{  @SuppressWarnings({"HardCodedStringLiteral"}) public File generate() throws IOException {  File scriptPath=FileUtil.createTempFile(myPrefix,SCRIPT_EXT);  scriptPath.deleteOnExit();  PrintWriter out=new PrintWriter(new FileWriter(scriptPath));  try {    if (SystemInfo.isWindows) {      out.println("@echo off");    } else {      out.println("#!/bin/sh");    }    String line=commandLine();    if (SystemInfo.isWindows) {      line+=" %*";    } else {      line+=" \"$@\"";    }    out.println(line);  }  finally {    out.close();  }  FileUtil.setExecutableAttribute(scriptPath.getPath(),true);  return scriptPath;}  }
class C{  protected ZipEntry createZipEntry(String name){  JarEntry e=new JarEntry(name);  if (man != null) {    e.attr=man.getAttributes(name);  }  return e;}  }
class C{  public void printSnapShot(String names,Comparator<Monitor> comparator,boolean verbose,boolean showUnsupported,PrintStream out) throws MonitorException, PatternSyntaxException {  List<Monitor> items=monitoredVm.findByPattern(names);  Collections.sort(items,comparator);  printList(items,verbose,showUnsupported,out);}  }
class C{  public static void main(String[] args) throws Exception {  System.err.println("Running Jetty 9.0.0.M3");  Configs configs=new Configs();  configs.validation();  server=new Server();  initConnnector(server,configs);  initWebappContext(server,configs);  if (configs.getJettyXML() != null && !"".equals(configs.getJettyXML().trim())) {    System.err.println("Loading Jetty.xml:" + configs.getJettyXML());    try {      XmlConfiguration configuration=new XmlConfiguration(new File(configs.getJettyXML()).toURI().toURL());      configuration.configure(server);    } catch (    Exception ex) {      System.err.println("Exception happened when loading Jetty.xml:");      ex.printStackTrace();    }  }  if (configs.getEnablescanner())   initScanner(web,configs);  initEclipseListener(configs);  initCommandListener(configs);  try {    server.start();    server.join();  } catch (  Exception e) {    e.printStackTrace();    System.exit(100);  }  return;}  }
class C{  public final void testReadResolve(){  MyCertificate c1=new MyCertificate("TEST_TYPE",testEncoding);  MyCertificateRep rep=c1.new MyCertificateRep("TEST_TYPE",new byte[]{(byte)1,(byte)2,(byte)3});  try {    rep.readResolve();    fail("ObjectStreamException expected");  } catch (  ObjectStreamException e) {  }  MyCertificateRep rep1=c1.new MyCertificateRep("X509",TestUtils.getX509Certificate_v3());  try {    Certificate obj=(Certificate)rep1.readResolve();    assertEquals("0.3.5",obj.getPublicKey().getAlgorithm());    assertEquals("X.509",obj.getPublicKey().getFormat());    assertEquals("X.509",obj.getType());  } catch (  ObjectStreamException e) {    fail("Unexpected ObjectStreamException " + e.getMessage());  }}  }
class C{  protected void makeGeometry(ShapeData shapeData){  Object cacheKey=new Geometry.CacheKey(this.getClass(),"Cone0",this.subdivisions);  Geometry geom=(Geometry)this.getGeometryCache().getObject(cacheKey);  if (geom == null) {    makeUnitCone(this.subdivisions,shapeData.getMeshes());    for (int piece=0; piece < getFaceCount(); piece++) {      if (offsets.get(piece) == null)       offsets.put(piece,new OffsetsList());      cacheKey=new Geometry.CacheKey(this.getClass(),"Cone" + piece,this.subdivisions);      this.getGeometryCache().add(cacheKey,shapeData.getMesh(piece));    }  } else {    for (int piece=0; piece < getFaceCount(); piece++) {      if (offsets.get(piece) == null)       offsets.put(piece,new OffsetsList());      cacheKey=new Geometry.CacheKey(this.getClass(),"Cone" + piece,this.subdivisions);      geom=(Geometry)this.getGeometryCache().getObject(cacheKey);      shapeData.addMesh(piece,geom);    }  }}  }
class C{  protected void writeFullPath(final Writer w,final String path) throws IOException {  writePath(w,path,0);}  }
class C{  public static String version(){  return version("release");}  }
class C{  @Override public void process(ResponseBuilder rb) throws IOException {  if (rb.doFacets) {    ModifiableSolrParams params=new ModifiableSolrParams();    SolrParams origParams=rb.req.getParams();    Iterator<String> iter=origParams.getParameterNamesIterator();    while (iter.hasNext()) {      String paramName=iter.next();      if (paramName.startsWith(FacetParams.FACET) == false) {        params.add(paramName,origParams.getParams(paramName));        continue;      }      HashSet<String> deDupe=new LinkedHashSet<>(Arrays.asList(origParams.getParams(paramName)));      params.add(paramName,deDupe.toArray(new String[deDupe.size()]));    }    SimpleFacets f=new SimpleFacets(rb.req,rb.getResults().docSet,params,rb);    NamedList<Object> counts=f.getFacetCounts();    String[] pivots=params.getParams(FacetParams.FACET_PIVOT);    if (pivots != null && pivots.length > 0) {      PivotFacetProcessor pivotProcessor=new PivotFacetProcessor(rb.req,rb.getResults().docSet,params,rb);      SimpleOrderedMap<List<NamedList<Object>>> v=pivotProcessor.process(pivots);      if (v != null) {        counts.add(PIVOT_KEY,v);      }    }    rb.rsp.add("facet_counts",counts);  }}  }
class C{  public static String makeDirectory(String directory){  String dirname=directory + File.separator + Properties.CLASS_PREFIX.replace('.',File.separatorChar);  File dir=new File(dirname);  logger.debug("Target directory: " + dirname);  dir.mkdirs();  return dirname;}  }
class C{  private static List<List<TraceRegister>> loadTraceEventValues(final CConnection connection,final TraceList traceList) throws SQLException {  final List<List<TraceRegister>> values=new ArrayList<>();  final String query="select position, register_name, register_value, memory_value from " + CTableNames.TRACE_EVENT_VALUES_TABLE + " where trace_id = "+ traceList.getId()+ " order by position asc";  final ResultSet resultSet=connection.executeQuery(query,true);  int currentPosition=-1;  try {    List<TraceRegister> registers=new ArrayList<TraceRegister>();    while (resultSet.next()) {      final int position=resultSet.getInt("position");      if (position != currentPosition) {        if (!registers.isEmpty()) {          values.add(Lists.newArrayList(registers));          registers=new FilledList<TraceRegister>();        }        currentPosition=position;      }      final String name=PostgreSQLHelpers.readString(resultSet,"register_name");      final long value=resultSet.getLong("register_value");      final byte[] memory=resultSet.getBytes("memory_value");      registers.add(new TraceRegister(name,new CAddress(value),memory));    }    if (!registers.isEmpty()) {      values.add(Lists.newArrayList(registers));    }  }  finally {    resultSet.close();  }  return values;}  }
class C{  public SourceUnit(URL source,CompilerConfiguration configuration,GroovyClassLoader loader,ErrorCollector er){  this(source.toExternalForm(),new URLReaderSource(source,configuration),configuration,loader,er);}  }
class C{  public BasicUserImpl(){  _id=ISicresAdminDefsKeys.NULL_ID;  _name="(Vacio)";}  }
class C{  public void warn(String msg,Object arg0,Object arg1){  innerLog(Level.WARNING,null,msg,arg0,arg1,UNKNOWN_ARG,null);}  }
class C{  public void visitClassType(String name){}  }
class C{  public ProtocolNode(){  followingNodes=new ArrayList<ProtocolNode>();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public JsonNode remove(String fieldName){  if (_children != null) {    return _children.remove(fieldName);  }  return null;}  }
class C{  public IgniteFutureCancelledCheckedException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public void cleanup(){  if (dataSource != null) {    dataSource.close();  }}  }
class C{  public Zipper<A> toPosition(int index) throws NoSuchElementException {  Zipper<A> result=this;  while (index != result.position) {    result=result.position < index ? result.forwards() : result.backwards();  }  return result;}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public void add(final int series,final Number xValue,final List<? extends Number> item){  List<Tuple<Number,BoxAndWhiskerItem>> seriesItems=getItems(series);  seriesItems.add(new Tuple<Number,BoxAndWhiskerItem>(xValue,BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(item)));}  }
class C{  private void updateSelection(){  TreePath selectionPath=tree.getSelectionPath();  if (selectionPath != null) {    Entry selectedEntry=(Entry)selectionPath.getLastPathComponent();    if (!(selectedEntry instanceof Folder)) {      tree.setSelectionPath(selectionPath.getParentPath());    }  }}  }
class C{  private void generateDeepLinkResult(String packageName) throws IOException {  TypeSpec deepLinkResult=TypeSpec.classBuilder("DeepLinkResult").addModifiers(Modifier.PUBLIC,Modifier.FINAL).addField(TypeName.BOOLEAN,"successful",Modifier.PRIVATE,Modifier.FINAL).addField(ANDROID_URI,"uri",Modifier.PRIVATE,Modifier.FINAL).addField(ClassName.get(String.class),"error",Modifier.PRIVATE,Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addParameter(ParameterSpec.builder(TypeName.BOOLEAN,"successful").build()).addParameter(ParameterSpec.builder(ANDROID_URI,"uri").build()).addParameter(ParameterSpec.builder(ClassName.get(String.class),"error").build()).addStatement("this.successful = successful").addStatement("this.uri = uri").addStatement("this.error = error").build()).addMethod(MethodSpec.methodBuilder("isSuccessful").addModifiers(Modifier.PUBLIC).addJavadoc("@return whether or not the dispatch was a success.\n").returns(TypeName.BOOLEAN).addStatement("return successful").build()).addMethod(MethodSpec.methodBuilder("uri").addModifiers(Modifier.PUBLIC).addJavadoc("@return this result's uri, or {@code null} if there is none.\n").returns(ANDROID_URI).addStatement("return uri").build()).addMethod(MethodSpec.methodBuilder("error").addModifiers(Modifier.PUBLIC).addJavadoc("@return this result's error message, or {@code null} if there is none.\n").returns(ClassName.get(String.class)).addStatement("return error").build()).addMethod(MethodSpec.methodBuilder("equals").addModifiers(Modifier.PUBLIC).addAnnotation(Override.class).addParameter(ClassName.get(Object.class),"o").returns(TypeName.BOOLEAN).addCode("if (this == o) { return true; }").addCode("\n").addCode("if (o == null || getClass() != o.getClass()) { return false; }").addCode("\n").addCode("\n").addCode("DeepLinkResult that = (DeepLinkResult) o;").addCode("\n").addCode("\n").addCode("if (successful != that.successful) { return false; }").addCode("\n").addCode("if (uri != null ? !uri.equals(that.uri) : that.uri != null) { return false; " + "}").addCode("\n").addCode("return error != null ? error.equals(that.error) " + ": that.error == null;").build()).addMethod(MethodSpec.methodBuilder("hashCode").addModifiers(Modifier.PUBLIC).addAnnotation(Override.class).returns(TypeName.INT).addStatement("int result = (successful ? 1 : 0)").addStatement("result = 31 * result + (uri != null ? uri.hashCode() : 0)").addStatement("result = 31 * result + (error != null ? error.hashCode() " + ": 0)").addStatement("return result").build()).addMethod(MethodSpec.methodBuilder("toString").addModifiers(Modifier.PUBLIC).addAnnotation(Override.class).returns(ClassName.get(String.class)).addCode("return \"DeepLinkResult{\" +").addCode("\n").addCode("    \"successful=\" + successful +").addCode("\n").addCode("    \", uri=\" + uri +").addCode("\n").addCode("    \", error='\" + error + '\\'' +").addCode("\n").addCode("    '}';").build()).build();  JavaFile.builder(packageName,deepLinkResult).build().writeTo(filer);}  }
class C{  public Bits diffSet(Bits xs){  Assert.check(currentState != BitsState.UNKNOWN);  for (int i=0; i < bits.length; i++) {    if (i < xs.bits.length) {      bits[i]=bits[i] & ~xs.bits[i];    }  }  currentState=BitsState.NORMAL;  return this;}  }
class C{  static TokenStream wrap(String fieldName,Analyzer indexAnalyzer,String content,char splitChar) throws IOException {  if (indexAnalyzer.getOffsetGap(fieldName) != 1) {    throw new IllegalArgumentException("offset gap of the provided analyzer should be 1 (field " + fieldName + ")");  }  int splitCharIdx=content.indexOf(splitChar);  if (splitCharIdx == -1) {    return indexAnalyzer.tokenStream(fieldName,content);  }  TokenStream subTokenStream=indexAnalyzer.tokenStream(fieldName,content.substring(0,splitCharIdx));  return new MultiValueTokenStream(subTokenStream,fieldName,indexAnalyzer,content,splitChar,splitCharIdx);}  }
class C{  public PLRGBA(){  this(0.0f,0.0f,0.0f,1.0f);}  }
class C{  private byte[] PSHA(byte[] secret,String label,byte[] data,int offset,int length) throws ServiceResultException {  if (secret == null)   throw new IllegalArgumentException("ArgumentNullException: secret");  if (offset < 0)   throw new IllegalArgumentException("ArgumentOutOfRangeException: offset");  if (length < 0)   throw new IllegalArgumentException("ArgumentOutOfRangeException: offset");  byte[] seed=label != null && !label.isEmpty() ? label.getBytes(UTF8) : null;  if (data != null && data.length > 0) {    if (seed != null) {      ByteBuffer buf=ByteBuffer.allocate(seed.length + data.length);      buf.put(seed);      buf.put(data);      buf.rewind();      seed=buf.array();    } else {      seed=data;    }  }  if (seed == null) {    throw new ServiceResultException(StatusCodes.Bad_UnexpectedError,"The PSHA algorithm requires a non-null seed.");  }  SecurityPolicy policy=securityConfiguration.getSecurityPolicy();  Mac hmac=CryptoUtil.createMac(policy.getKeyDerivationAlgorithm(),secret);  hmac.update(seed);  byte[] keySeed=hmac.doFinal();  byte[] prfSeed=new byte[hmac.getMacLength() + seed.length];  System.arraycopy(keySeed,0,prfSeed,0,keySeed.length);  System.arraycopy(seed,0,prfSeed,keySeed.length,seed.length);  byte[] output=new byte[length];  int position=0;  do {    hmac.update(prfSeed);    byte[] hash=hmac.doFinal();    if (offset < hash.length) {      for (int ii=offset; position < length && ii < hash.length; ii++) {        output[position++]=hash[ii];      }    }    if (offset > hash.length) {      offset-=hash.length;    } else {      offset=0;    }    hmac.update(keySeed);    keySeed=hmac.doFinal();    System.arraycopy(keySeed,0,prfSeed,0,keySeed.length);  } while (position < length);  return output;}  }
class C{  public static GeneralPath stackSpline(GeneralPath p,float[] pts,float epsilon,float slack,boolean closed,float tx,float ty){  int npoints=0;  for (; npoints < pts.length; ++npoints)   if (Float.isNaN(pts[npoints]))   break;  return stackSpline(p,pts,0,npoints / 2,epsilon,slack,closed,tx,ty);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:17.021 -0400",hash_original_method="01933940D580ED8F19E6A1BB69556FC2",hash_generated_method="54C712F27FA0691D87F4814756698468") public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ECFieldF2m) {    ECFieldF2m o=(ECFieldF2m)obj;    if (this.m == o.m) {      if (this.rp == null) {        if (o.rp == null) {          return true;        }      } else {        return Arrays.equals(this.ks,o.ks);      }    }  }  return false;}  }
class C{  private void skip() throws XMLStreamException {  int depth=0;  reader.next();  if (reader.getEventType() != XMLStreamConstants.END_ELEMENT) {    depth++;    while (depth != 0) {      reader.next();      if (reader.getEventType() != XMLStreamConstants.START_ELEMENT)       depth++; else       if (reader.getEventType() != XMLStreamConstants.START_ELEMENT)       depth--;    }  }  reader.next();}  }
class C{  public static void main(String[] args){  TestConstantValuesPage tester=new TestConstantValuesPage();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String distanceOutputHeader=null;  int i;  int progress;  int row, col;  double z=0;  double distConvFactor=1.0;  double gridRes=0;  double currentVal=0;  double currentMaxVal=0;  double maxValDist=0;  double maxDist=0;  double lineSlope=0;  boolean saveDistance=false;  double azimuth=0;  double deltaX=0;  double deltaY=0;  double x=0;  int x1=0;  int x2=0;  double y=0;  int y1=0;  int y2=0;  double z1=0;  double z2=0;  double dist=0;  double slope=0;  double yIntercept=0;  int xStep=0;  int yStep=0;  double noData=0;  boolean flag=false;  double aSmallValue=-9999999;  maxDist=Double.MAX_VALUE;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  azimuth=Double.parseDouble(args[2]);  if (azimuth > 360 || azimuth < 0) {    azimuth=0.1;  }  if (azimuth == 0) {    azimuth=0.1;  }  if (azimuth == 180) {    azimuth=179.9;  }  if (azimuth == 360) {    azimuth=359.9;  }  if (azimuth < 180) {    lineSlope=Math.tan(Math.toRadians(90 - azimuth));  } else {    lineSlope=Math.tan(Math.toRadians(270 - azimuth));  }  if (!args[3].toLowerCase().equals("not specified")) {    maxDist=Double.parseDouble(args[3]);  }  if (!args[4].toLowerCase().equals("not specified")) {    saveDistance=true;    distanceOutputHeader=args[4];  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.setForceAllDataInMemory(true);    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    if (DEM.getXYUnits().toLowerCase().contains("deg") || DEM.getProjection().toLowerCase().contains("geog")) {      double midLat=(DEM.getNorth() - DEM.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        distConvFactor=(113200 * Math.cos(Math.toRadians(midLat)));      }    }    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2 * distConvFactor;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    output.setForceAllDataInMemory(true);    WhiteboxRaster outputDist=null;    if (saveDistance) {      outputDist=new WhiteboxRaster(distanceOutputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);      outputDist.setPreferredPalette("blue_white_red.pal");      outputDist.setForceAllDataInMemory(true);    }    if (azimuth > 0 && azimuth <= 90) {      xStep=1;      yStep=1;    } else     if (azimuth <= 180) {      xStep=1;      yStep=-1;    } else     if (azimuth <= 270) {      xStep=-1;      yStep=-1;    } else {      xStep=-1;      yStep=1;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        currentVal=DEM.getValue(row,col);        if (currentVal != noData) {          yIntercept=-row - lineSlope * col;          currentMaxVal=aSmallValue;          maxValDist=aSmallValue;          x=col;          flag=true;          do {            x=x + xStep;            if (x < 0 || x >= cols) {              flag=false;              break;            }            y=(lineSlope * x + yIntercept) * -1;            if (y < 0 || y >= rows) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            y1=(int)(y);            y2=y1 + yStep * -1;            z1=DEM.getValue(y1,(int)x);            z2=DEM.getValue(y2,(int)x);            z=z1 + (y - y1) * (z2 - z1);            slope=(z - currentVal) / dist;            if (slope > currentMaxVal) {              currentMaxVal=slope;              maxValDist=dist;            } else             if (currentMaxVal < 0) {              maxValDist=dist;            }          } while (flag);          y=-row;          flag=true;          do {            y=y + yStep;            if (-y < 0 || -y >= rows) {              flag=false;              break;            }            x=(y - yIntercept) / lineSlope;            if (x < 0 || x >= cols) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(-y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            x1=(int)x;            x2=x1 + xStep;            if (x2 < 0 || x2 >= cols) {              flag=false;              break;            }            z1=DEM.getValue((int)-y,x1);            z2=DEM.getValue((int)y,x2);            z=z1 + (x - x1) * (z2 - z1);            slope=(z - currentVal) / dist;            if (slope > currentMaxVal) {              currentMaxVal=slope;              maxValDist=dist;            } else             if (currentMaxVal < 0) {              maxValDist=dist;            }          } while (flag);          z=Math.toDegrees(Math.atan(currentMaxVal));          if (z < -89) {            z=0;          }          if (currentMaxVal != aSmallValue) {            output.setValue(row,col,z);            if (saveDistance) {              if (z < 0) {                maxValDist=maxValDist * -1;              }              outputDist.setValue(row,col,maxValDist);            }          } else {            output.setValue(row,col,noData);            if (saveDistance) {              outputDist.setValue(row,col,noData);            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    if (saveDistance) {      outputDist.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  append(m_doc.createProcessingInstruction(target,data));}  }
class C{  private void addHit(String cname,Class<?> c){  if (len == names.length) {    final int nl=(len << 1) + 1;    names=Arrays.copyOf(names,nl);    clazzes=Arrays.copyOf(clazzes,nl);  }  names[len]=cname;  clazzes[len]=c;  ++len;}  }
class C{  public String toString(){  return getName();}  }
class C{  protected Object writeReplace() throws java.io.ObjectStreamException {  return new ByteArrayCounterSnapshot(getName(),getUnits(),getVariability(),getFlags(),getVectorLength(),byteArrayValue());}  }
class C{  public TransitionGraphEvent(String data){  super(TRANSITION_GRAPH);  put(DATA,data);}  }
class C{  public static Validator<String> allowedChars(BiFunction<String,StringAllowedCharsValidator,? extends IllegalArgumentException> exception,char... chars){  return allowedChars(chars,exception);}  }
class C{  public String attr(String name){  return element.attr(name);}  }
class C{  public static FeatureExtractor<IString,String> factory(String featurizerName,boolean withGaps,String... featurizerSpecs){  return factory(featurizerName,withGaps,null,featurizerSpecs);}  }
class C{  public TypeResolver(){  this("java.lang.Object");}  }
class C{  public static String displayInputs(String name,Map<String,Object> map,LocalVariableMap symbolTable){  StringBuilder sb=new StringBuilder();  sb.append(name);  sb.append(":\n");  Set<String> keys=map.keySet();  if (keys.isEmpty()) {    sb.append("None\n");  } else {    int count=0;    for (    String key : keys) {      Object object=map.get(key);      @SuppressWarnings("rawtypes") Class clazz=object.getClass();      String type=clazz.getSimpleName();      if (object instanceof JavaRDD<?>) {        type="JavaRDD";      } else       if (object instanceof RDD<?>) {        type="RDD";      }      sb.append("  [");      sb.append(++count);      sb.append("]");      sb.append(" (");      sb.append(type);      if (doesSymbolTableContainMatrixObject(symbolTable,key)) {        sb.append(" as Matrix");      } else       if (doesSymbolTableContainFrameObject(symbolTable,key)) {        sb.append(" as Frame");      }      sb.append(") ");      sb.append(key);      sb.append(": ");      String str=object.toString();      str=StringUtils.abbreviate(str,100);      sb.append(str);      sb.append("\n");    }  }  return sb.toString();}  }
class C{  protected StandaloneBlockImpl(){  super();}  }
class C{  static private String formatExecStatus(TungstenProperties execStatus){  ExecuteQueryStatus status=(ExecuteQueryStatus)execStatus.getObject(STATUS_KEY);  String statusMessage=execStatus.getString(STATUS_MESSAGE_KEY);  return String.format("%s\n%s",status.toString(),statusMessage);}  }
class C{  private void clearNotificationInternal(){  NotificationManager notificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  notificationManager.cancel(Constants.WEAR_NOTIFICATION_ID);}  }
class C{  public void addTEVariablesAndDefinitions(TraceExpressionInformationHolder[] traceExpressionData,String attributeName,boolean addDefinitions){  if (traceExpressionData.length == 0) {    return;  }  StringBuffer variableDecls=new StringBuffer();  StringBuffer definitions=new StringBuffer();  for (int i=0; i < traceExpressionData.length; i++) {    TraceExpressionInformationHolder expressionInfo=traceExpressionData[i];    variableDecls.append(expressionInfo.getVariableName());    if (i != traceExpressionData.length - 1) {      variableDecls.append(COMMA);    }    if (addDefinitions) {      definitions.append(COMMENT).append("TRACE EXPLORER identifier definition ").append(ATTRIBUTE).append(attributeName).append(CR);      definitions.append(expressionInfo.getIdentifier()).append(DEFINES_CR).append(expressionInfo.getExpression()).append(CR);      definitions.append(SEP).append(CR).append(CR);    }  }  tlaBuffer.append(COMMENT).append("TRACE EXPLORER variable declaration ").append(ATTRIBUTE).append(attributeName).append(CR);  tlaBuffer.append("VARIABLES ").append(variableDecls.toString()).append(CR);  tlaBuffer.append(SEP).append(CR).append(CR);  if (addDefinitions) {    tlaBuffer.append(definitions.toString());  }}  }
class C{  public void enableSuperPickAxe(){  superPickaxe=true;}  }
class C{  private BTreeNode findLastLeafNode(IndexKey key,BTreeNode node){  int childNodeIndex;  int low=0;  int high=node.nodeSize() - 1;  int mid=0;  int compareRes=-1;  IndexKey[] nodeKeys=node.getNodeKeys();  while (low <= high) {    mid=(low + high) >>> 1;    compareRes=compareIndexes(key,nodeKeys[mid]);    if (compareRes < 0) {      high=mid - 1;    } else     if (compareRes > 0) {      low=mid + 1;    } else {      int currentPos=mid;      while (currentPos + 1 < node.nodeSize() && compareIndexes(key,nodeKeys[currentPos + 1]) == 0) {        currentPos++;      }      mid=currentPos;      break;    }  }  if (compareRes < 0) {    if (mid > 0) {      mid--;    }    childNodeIndex=mid;  } else {    childNodeIndex=mid;  }  node=node.getChild(childNodeIndex);  return node;}  }
class C{  public final double laplaceProb(int classIndex,int intIndex){  if (Utils.gr(m_perBag[intIndex],0)) {    return (m_perClassPerBag[intIndex][classIndex] + 1.0) / (m_perBag[intIndex] + m_perClass.length);  } else {    return laplaceProb(classIndex);  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="district";  String qualifiedName="emp:district";  Document doc;  NodeList elementList;  Element testAddr;  String attrValue;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  attrValue=testAddr.getAttributeNS(namespaceURI,localName);  assertEquals("attrValue","DISTRICT",attrValue);}  }
class C{  public ZeroSelectedObjectsAction(final NetworkPanel networkPanel){  super(networkPanel,"Set selected objects to zero",EnablingCondition.ALLITEMS);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Eraser.png"));  putValue(SHORT_DESCRIPTION,"Set selected neurons and synapses to zero (c)");  networkPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke('c'),this);  networkPanel.getActionMap().put(this,this);}  }
class C{  public void convertNumericAttToNominal(int index,ArrayList<String> newVals){  Instances miningSchemaI=getFieldsAsInstances();  if (miningSchemaI.attribute(index).isNominal()) {    throw new IllegalArgumentException("[MiningSchema] convertNumericAttToNominal: attribute is " + "already nominal!");  }  ArrayList<String> newValues=new ArrayList<String>();  for (int i=0; i < newVals.size(); i++) {    newValues.add(newVals.get(i));  }  ArrayList<Attribute> attInfo=new ArrayList<Attribute>();  for (int i=0; i < miningSchemaI.numAttributes(); i++) {    Attribute tempA=miningSchemaI.attribute(i);    if (i == index) {      Attribute newAtt=new Attribute(tempA.name(),newValues);      attInfo.add(newAtt);    } else {      attInfo.add(tempA);    }  }  Instances newI=new Instances("miningSchema",attInfo,0);  if (m_fieldInstancesStructure.classIndex() >= 0) {    newI.setClassIndex(m_fieldInstancesStructure.classIndex());  }  m_fieldInstancesStructure=newI;}  }
class C{  public MultiInputStream(Iterator<? extends ByteSource> it) throws IOException {  this.it=checkNotNull(it);  advance();}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  @Override public void onChange(boolean selfChange){  if (mActivityPaused) {    mMediaDataChangedDuringPause=true;  }}  }
class C{  private void lazyLoadInit(){  for (  ColumnField field : _lazyLoadedFields) {    ColumnField mappedByField=getColumnField(field.getMappedByField());    if (mappedByField != null) {      _mappedByToLazyLoadedField.put(mappedByField.getName(),field);    }  }  instrumentModelClasses();}  }
class C{  @Override public IdsQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public static boolean hasOptimizedTreeSetAddAll(){  return optimizedTreeSetAddAll;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.150 -0500",hash_original_method="0D7CECF6C48A29B817D7C281772463C0",hash_generated_method="EEA5A91DD76296BEF0E6F5D639F41BA4") public static void sort(int[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public void parse(AuthenticationHeader header) throws ParseException {  this.lexer.SPorHT();  lexer.match(TokenTypes.ID);  Token type=lexer.getNextToken();  this.lexer.SPorHT();  header.setScheme(type.getTokenValue());  try {    while (lexer.lookAhead(0) != '\n') {      this.parseParameter(header);      this.lexer.SPorHT();      char la=lexer.lookAhead(0);      if (la == '\n' || la == '\0')       break;      this.lexer.match(',');      this.lexer.SPorHT();    }  } catch (  ParseException ex) {    throw ex;  }}  }
class C{  public static boolean isDynamicAttribute(String name){  return name.startsWith("+");}  }
class C{  @Override public Object createValue() throws BasicException {  Object[] customer=new Object[26];  customer[0]=m_oId == null ? UUID.randomUUID().toString() : m_oId;  customer[1]=m_jTaxID.getText();  customer[2]=m_jSearchkey.getText();  customer[3]=m_jName.getText();  customer[4]=m_jNotes.getText();  customer[5]=m_jVisible.isSelected();  customer[6]=Formats.STRING.parseValue(jcard.getText());  customer[7]=Formats.CURRENCY.parseValue(txtMaxdebt.getText(),0.0);  customer[8]=Formats.TIMESTAMP.parseValue(txtCurdate.getText());  customer[9]=Formats.CURRENCY.parseValue(txtCurdebt.getText());  customer[10]=Formats.STRING.parseValue(txtFirstName.getText());  customer[11]=Formats.STRING.parseValue(txtLastName.getText());  customer[12]=Formats.STRING.parseValue(txtEmail.getText());  customer[13]=Formats.STRING.parseValue(txtPhone.getText());  customer[14]=Formats.STRING.parseValue(txtPhone2.getText());  customer[15]=Formats.STRING.parseValue(txtFax.getText());  customer[16]=Formats.STRING.parseValue(txtAddress.getText());  customer[17]=Formats.STRING.parseValue(txtAddress2.getText());  customer[18]=Formats.STRING.parseValue(txtPostal.getText());  customer[19]=Formats.STRING.parseValue(txtCity.getText());  customer[20]=Formats.STRING.parseValue(txtRegion.getText());  customer[21]=Formats.STRING.parseValue(txtCountry.getText());  customer[22]=m_CategoryModel.getSelectedKey();  customer[23]=m_jImage.getImage();  customer[24]=Formats.TIMESTAMP.parseValue(j_mDOB.getText());  customer[25]=Formats.PERCENT.parseValue(txtDiscount.getText());  return customer;}  }
class C{  public boolean hasParseIssues(){  return (_parseIssues != null && _parseIssues.size() > 0);}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  throw new RejectedExecutionException("Task " + r.toString() + " rejected from "+ e.toString());}  }
class C{  public void writeReportToLocal(String reportRootPath){  this.reportRootPath=reportRootPath;}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public int selectFeatureByLocation(double x,double y){  double minDist=Double.POSITIVE_INFINITY;  double dist, boxCentreX, boxCentreY;  int newSelectedFeatureNum=-1;switch (shapeType) {case POLYGON:case POLYGONZ:case POLYGONM:case POLYLINE:case POLYLINEZ:case POLYLINEM:    for (    ShapeFileRecord record : recs) {      BoundingBox bb=record.getGeometry().getBox();      if (bb.isPointInBox(x,y)) {        boxCentreX=bb.getMinX() + (bb.getMaxX() - bb.getMinX()) / 2;        boxCentreY=bb.getMinY() + (bb.getMaxY() - bb.getMinY()) / 2;        dist=(boxCentreX - x) * (boxCentreX - x) + (boxCentreY - y) * (boxCentreY - y);        if (dist < minDist) {          minDist=dist;          newSelectedFeatureNum=record.getRecordNumber();        }      }    }  break;case POINT:case POINTZ:case POINTM:double pointX, pointY;double[][] points;for (ShapeFileRecord record : recs) {points=record.getGeometry().getPoints();pointX=points[0][0];pointY=points[0][1];dist=(pointX - x) * (pointX - x) + (pointY - y) * (pointY - y);if (dist < minDist) {minDist=dist;newSelectedFeatureNum=record.getRecordNumber();}}break;case MULTIPOINT:case MULTIPOINTZ:case MULTIPOINTM:double x2, y2;double[][] points2;for (ShapeFileRecord record : recs) {points2=record.getGeometry().getPoints();for (int i=0; i < points2.length; i++) {x2=points2[0][0];y2=points2[0][1];dist=(x2 - x) * (x2 - x) + (y2 - y) * (y2 - y);if (dist < minDist) {minDist=dist;newSelectedFeatureNum=record.getRecordNumber();}}}break;}if (newSelectedFeatureNum >= 0) {setSelectedFeature(newSelectedFeatureNum);}return newSelectedFeatureNum;}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public AList(){  items=new int[100];  size=0;}  }
class C{  public LibertyInstalledLocalContainer(LocalConfiguration configuration){  super(configuration);}  }
class C{  protected static BufferedImage verticalFlip(BufferedImage img){  if (null == img)   return null;  int w=img.getWidth();  int h=img.getHeight();  BufferedImage flipImg=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  Graphics2D g2d=flipImg.createGraphics();  java.awt.Composite prevComposite=g2d.getComposite();  g2d.setComposite(java.awt.AlphaComposite.Src);  g2d.drawImage(img,0,0,w,h,0,h,w,0,null);  g2d.setComposite(prevComposite);  g2d.dispose();  return flipImg;}  }
class C{  protected int lengthOfByteStream(AbstractMRMessage m){  return m.getNumDataElements();}  }
class C{  public void addObservations(double[] observations) throws Exception {  if (vectorOfObservations == null) {    throw new RuntimeException("User did not call startAddObservations before addObservations");  }  if (observations.length <= k) {    return;  }  vectorOfObservations.add(observations);}  }
class C{  public Expression longToIntForHashCode(Expression ref1,Expression ref2,ASTNode source){  int pS=source.sourceStart, pE=source.sourceEnd;  IntLiteral int32=makeIntLiteral("32".toCharArray(),source);  BinaryExpression higherBits=new BinaryExpression(ref1,int32,OperatorIds.UNSIGNED_RIGHT_SHIFT);  setGeneratedBy(higherBits,source);  BinaryExpression xorParts=new BinaryExpression(ref2,higherBits,OperatorIds.XOR);  setGeneratedBy(xorParts,source);  TypeReference intRef=TypeReference.baseTypeReference(TypeIds.T_int,0);  intRef.sourceStart=pS;  intRef.sourceEnd=pE;  setGeneratedBy(intRef,source);  CastExpression expr=makeCastExpression(xorParts,intRef,source);  expr.sourceStart=pS;  expr.sourceEnd=pE;  return expr;}  }
class C{  public void writeObject(Object object) throws IOException {  if (object == null)   writeNull(); else   if (object instanceof String)   writeString((String)object); else   if (object instanceof Boolean)   writeBoolean(((Boolean)object).booleanValue()); else   if (object instanceof Integer)   writeInt(((Integer)object).intValue()); else   if (object instanceof Long)   writeLong(((Long)object).longValue()); else   if (object instanceof Date)   writeUTCDate(((Date)object).getTime()); else   if (object instanceof byte[]) {    byte[] data=(byte[])object;    writeBytes(data,0,data.length);  } else   if (object instanceof Vector) {    Vector vector=(Vector)object;    int size=vector.size();    writeListBegin(size,null);    for (int i=0; i < size; i++)     writeObject(vector.elementAt(i));    writeListEnd();  } else   if (object instanceof Hashtable) {    Hashtable hashtable=(Hashtable)object;    writeMapBegin(null);    Enumeration e=hashtable.keys();    while (e.hasMoreElements()) {      Object key=e.nextElement();      Object value=hashtable.get(key);      writeObject(key);      writeObject(value);    }    writeMapEnd();  } else   writeCustomObject(object);}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem())   return;  String s=new String(ch,start,length);  append(m_doc.createTextNode(s));}  }
class C{  @Deprecated public static void removeInvalidTransitRoutes(TransitScheduleValidator.ValidationResult result,TransitSchedule schedule){  Set<Tuple<Id<TransitLine>,Id<TransitRoute>>> toRemove=new HashSet<>();  for (  String error : result.getErrors()) {    String[] lineSplit=error.split(", route ");    String tranistLineId=lineSplit[0].substring(13);    String transitRouteId;    if (lineSplit[1].contains(" contains a link that is not part of the network")) {      transitRouteId=lineSplit[1].split(" contains a link that is not part of the network")[0];    } else     if (lineSplit[1].contains(" has inconsistent network route")) {      transitRouteId=lineSplit[1].split(" has inconsistent network route")[0];    } else     if (lineSplit[1].contains(" has no network route")) {      transitRouteId=lineSplit[1].split(" has no network route")[0];    } else     if (lineSplit[1].contains(" contains a link that is not part of the network: ")) {      transitRouteId=lineSplit[1].split(" contains a link that is not part of the network: ")[0];    } else     if (lineSplit[1].contains(": Stop ")) {      transitRouteId=lineSplit[1].split(": Stop ")[0];    } else     if (lineSplit[1].contains(" has no linkId, but is used by transit line ")) {      transitRouteId=lineSplit[1].split(" has no linkId, but is used by transit line ")[0];    } else     if (lineSplit[1].contains(" contains a stop ")) {      transitRouteId=lineSplit[1].split(" contains a stop ")[0];    } else     if (lineSplit[1].contains(": The ")) {      transitRouteId=lineSplit[1].split(": The ")[0];    } else {      throw new IllegalArgumentException("Error String from ValidationResult not recognised! (" + error + ")");    }    toRemove.add(new Tuple<>(Id.create(tranistLineId,TransitLine.class),Id.create(transitRouteId,TransitRoute.class)));  }  for (  Tuple<Id<TransitLine>,Id<TransitRoute>> t : toRemove) {    ScheduleCleaner.removeRoute(schedule,t.getFirst(),t.getSecond());  }}  }
class C{  public final void addElement(String value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    String newMap[]=new String[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  public T addNewSegment(int numEdgesInLiveSegment,Int2IntMap numEdgesInNonLiveSegmentsMap,StatsReceiver statsReceiver,BipartiteGraphSegmentProvider<T> bipartiteGraphSegmentProvider){  final Int2ObjectMap<T> segments=new Int2ObjectOpenHashMap<T>(multiSegmentReaderAccessibleInfo.getSegments());  numEdgesInNonLiveSegmentsMap.put(liveSegmentId,numEdgesInLiveSegment);  int oldestSegmentId=multiSegmentReaderAccessibleInfo.oldestSegmentId;  if (multiSegmentReaderAccessibleInfo.getSegments().size() == maxNumSegments) {    segments.remove(oldestSegmentId);    numEdgesInNonLiveSegmentsMap.remove(oldestSegmentId);    LOG.info("Removed segment " + oldestSegmentId);    oldestSegmentId++;  } else {    statsReceiver.counter("numSegments").incr();  }  int newLiveSegmentId=multiSegmentReaderAccessibleInfo.liveSegmentId + 1;  T liveSegment=bipartiteGraphSegmentProvider.generateNewSegment(newLiveSegmentId,maxNumEdgesPerSegment);  segments.put(newLiveSegmentId,liveSegment);  multiSegmentReaderAccessibleInfo=new MultiSegmentReaderAccessibleInfo<T>(segments,oldestSegmentId,newLiveSegmentId);  liveSegmentId=newLiveSegmentId;  numEdgesInNonLiveSegments=0;  for (  int segmentEdgeCount : numEdgesInNonLiveSegmentsMap.values()) {    numEdgesInNonLiveSegments+=segmentEdgeCount;  }  LOG.info("Total number of edges in graph = " + numEdgesInNonLiveSegments);  LOG.info("Created a new segment: oldestSegmentId = " + oldestSegmentId + ", and liveSegmentId = "+ liveSegmentId);  return liveSegment;}  }
class C{  public void start(){  isRotating=true;  mHandlerRotate.removeCallbacksAndMessages(null);  mHandlerRotate.postDelayed(mRunnableRotate,ROTATE_DELAY);  if (isAutoProgress) {    mHandlerProgress.removeCallbacksAndMessages(null);    mHandlerProgress.postDelayed(mRunnableProgress,PROGRESS_SECOND_MS);  }}  }
class C{  public void closeDiskCacheAsync(){  if (DEBUG) {    Log.d(TAG,"closeDiskCacheAsync");  }  new FileCacheTask(FileCacheTaskType.close_cache).excute();}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  private boolean mutateMoveToNop(Instruction s){  Operand result=MIR_Move.getResult(s);  Operand val=MIR_Move.getValue(s);  if (result.isStackLocation() && val.isStackLocation()) {    if (result.similar(val)) {      Empty.mutate(s,NOP);      return true;    }  }  return false;}  }
class C{  @Override public boolean isRowAvailable(){  if (scalar == null) {    return (false);  } else   if (index == 0) {    return (true);  } else {    return (false);  }}  }
class C{  public Geo3DDocValuesField(final String name,final double x,final double y,final double z){  super(name,TYPE);  setLocationValue(x,y,z);}  }
class C{  public static int generateInt16(int crc,int value){  crc=next(crc,(value >> 8));  crc=next(crc,(value >> 0));  return crc;}  }
class C{  public void testBasicUsage() throws Exception {  assertAnalyzesTo(analyzer,"Angelo",new String[]{"anZelo","andZelo","angelo","anhelo","anjelo","anxelo"},new int[]{0,0,0,0,0,0},new int[]{6,6,6,6,6,6},new int[]{1,0,0,0,0,0});  assertAnalyzesTo(analyzer,"D'Angelo",new String[]{"anZelo","andZelo","angelo","anhelo","anjelo","anxelo","danZelo","dandZelo","dangelo","danhelo","danjelo","danxelo"},new int[]{0,0,0,0,0,0,0,0,0,0,0,0},new int[]{8,8,8,8,8,8,8,8,8,8,8,8},new int[]{1,0,0,0,0,0,0,0,0,0,0,0});}  }
class C{  public boolean isDrawWireframe(){  return false;}  }
class C{  public static Boolean asBoolean(String str,Collection<String> trueWords,Collection<String> falseWords){  if (trueWords.stream().anyMatch(null)) {    return Boolean.TRUE;  }  if (falseWords.stream().anyMatch(null)) {    return Boolean.FALSE;  }  return null;}  }
class C{  private static final void appendEncodedByte(StringBuffer buffer,byte value,byte[] state){  if (state[0] != 0) {    char c=(char)((state[1] << 8) | (((int)value) & 0xFF));    buffer.append(c);    state[0]=0;  } else {    state[0]=1;    state[1]=value;  }}  }
class C{  public void reportFailedPasswordAttempt(){  getDevicePolicyManager().reportFailedPasswordAttempt(getCurrentOrCallingUserId());}  }
class C{  @Deprecated public void start(String url,OnFileDownloadStatusListener onFileDownloadStatusListener){  DownloadStatusConfiguration.Builder builder=new Builder();  builder.addListenUrl(url);  builder.configAutoRelease(true);  registerDownloadStatusListener(onFileDownloadStatusListener,builder.build());  start(url);}  }
class C{  protected void doInspectionTest(@NonNls @NotNull String[] testFiles,@NotNull Class inspectionClass,@NonNls @NotNull String quickFixName,boolean applyFix,boolean available){  myFixture.enableInspections(inspectionClass);  myFixture.configureByFiles(testFiles);  myFixture.checkHighlighting(true,false,false);  final IntentionAction intentionAction=myFixture.findSingleIntention(quickFixName);  if (available) {    assertNotNull(intentionAction);    if (applyFix) {      myFixture.launchAction(intentionAction);      myFixture.checkResultByFile(graftBeforeExt(testFiles[0],"_after"));    }  } else {    assertNull(intentionAction);  }}  }
class C{  public CustomerRegistrationAspect(final TaskExecutor taskExecutor,final PassPhrazeGenerator phrazeGenerator,final HashHelper passwordHashHelper,final MailService mailService,final MailComposer mailComposer,final ThemeService themeService){  super(taskExecutor);  this.passwordHashHelper=passwordHashHelper;  this.phrazeGenerator=phrazeGenerator;  this.mailService=mailService;  this.mailComposer=mailComposer;  this.themeService=themeService;}  }
class C{  public void testToBigIntegerPos3(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+45";  BigInteger bNumber=new BigInteger("123809648392384754573567356745735635678902957849027687876782870000000000000000");  BigDecimal aNumber=new BigDecimal(a);  BigInteger result=aNumber.toBigInteger();  assertTrue("incorrect value",result.equals(bNumber));}  }
class C{  public static Map<String,Object> createContent(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=createContentMethod(dctx,context);  return result;}  }
class C{  @SuppressWarnings("deprecation") @Override public void stop(){  Enumeration<String> en=m_listenees.keys();  while (en.hasMoreElements()) {    Object tempO=m_listenees.get(en.nextElement());    if (tempO instanceof BeanCommon) {      ((BeanCommon)tempO).stop();    }  }  if (m_buildThread != null) {    m_buildThread.interrupt();    m_buildThread.stop();    m_buildThread=null;    m_visual.setStatic();  }}  }
class C{  public final void increaseEntries(){  entries=Arrays.copyOf(entries,entries.length + 1);}  }
class C{  public static String[] enumStrings(Class<? extends Enum<?>> e){  Enum<?>[] values=e.getEnumConstants();  String[] strings=new String[values.length];  for (int i=0; i < values.length; i++)   strings[i]=values[i].toString();  return strings;}  }
class C{  IonSexpLite(ContainerlessContext context,Collection<? extends IonValue> elements) throws ContainedValueException {  super(context,elements);}  }
class C{  public ResultList<Map<String,Object>> fuzzyquery(final String indexName,final String fieldName,final String q,final int resultCount,final String sort_field,final String default_sort_type,final SortOrder sort_order,final Date since,final Date until,final String range_field){  BoolQueryBuilder suggest=QueryBuilders.boolQuery();  if (q != null && q.length() > 0) {    suggest.should(QueryBuilders.fuzzyQuery(fieldName,q).fuzziness(Fuzziness.fromEdits(2)));    suggest.should(QueryBuilders.moreLikeThisQuery(fieldName).like(q));    suggest.should(QueryBuilders.matchPhrasePrefixQuery(fieldName,q));    if (q.indexOf('*') >= 0 || q.indexOf('?') >= 0)     suggest.should(QueryBuilders.wildcardQuery(fieldName,q));    suggest.minimumNumberShouldMatch(1);  }  BoolQueryBuilder query;  if (range_field != null && range_field.length() > 0 && (since != null || until != null)) {    query=QueryBuilders.boolQuery();    if (q.length() > 0)     query.filter(suggest);    RangeQueryBuilder rangeQuery=QueryBuilders.rangeQuery(range_field);    if (since != null)     rangeQuery.from(since).includeLower(true);    if (until != null)     rangeQuery.to(until).includeUpper(true);    query.filter(rangeQuery);  } else {    query=suggest;  }  SearchRequestBuilder request=this.elasticsearchClient.prepareSearch(indexName).setSearchType(SearchType.QUERY_THEN_FETCH).setQuery(query).setFrom(0).setSize(resultCount).addSort(SortBuilders.fieldSort(sort_field).unmappedType(default_sort_type).order(sort_order));  SearchResponse response=request.execute().actionGet();  SearchHits rhits=response.getHits();  ResultList<Map<String,Object>> result=new ResultList<Map<String,Object>>();  SearchHit[] hits=rhits.getHits();  for (  SearchHit hit : hits) {    Map<String,Object> map=hit.getSource();    result.add(map);  }  result.setHits(rhits.getTotalHits());  return result;}  }
class C{  @Override public List<Object> visitValues(Values values,QueryState state){  List<Object> result=new ArrayList<Object>();  for (  Expression rowExpression : values.getRows()) {    if (rowExpression instanceof Row) {      Row row=(Row)rowExpression;      for (      Expression rowValue : row.getItems()) {        if (!(rowValue instanceof Literal)) {          state.addException("Unable to parse non-literal value : " + rowValue);          return result;        }        result.add(getObject((Literal)rowValue));      }    } else     if (rowExpression instanceof Literal) {      result.add(getObject((Literal)rowExpression));    } else {      state.addException("Unknown VALUES type " + rowExpression.getClass() + " encountered");      return null;    }  }  return result;}  }
class C{  public DefaultBoundZSetOperations(K key,RedisOperations<K,V> operations){  super(key,operations);  this.ops=operations.opsForZSet();}  }
class C{  public void allowDetachToRelease(boolean allowRelease){}  }
class C{  public PaymentResponse send(String toAddress,long amount,String fromAddress,Long fee,String note) throws APIException, IOException {  Map<String,Long> recipient=new HashMap<String,Long>();  recipient.put(toAddress,amount);  return sendMany(recipient,fromAddress,fee,note);}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  @Override public String toString(){  String msg=getLocalizedMessage();  String name=getClass().getName();  if (msg == null) {    return name;  }  return new StringBuffer(name.length() + 2 + msg.length()).append(name).append(": ").append(msg).toString();}  }
class C{  private synchronized void parseMessage(){  if (parsed)   return;  SharedFileInputStream tmpMsgIn=null;  try {    tmpMsgIn=new SharedFileInputStream(messageName.getFile());    bodyStartOctet=bodyStartOctet(tmpMsgIn);    MimeConfig config=MimeConfig.custom().setMaxLineLen(-1).build();    final MimeTokenStream parser=new MimeTokenStream(config,new DefaultBodyDescriptorBuilder());    parser.setRecursionMode(RecursionMode.M_NO_RECURSE);    parser.parse(tmpMsgIn.newStream(0,-1));    EntityState next=parser.next();    while (next != EntityState.T_BODY && next != EntityState.T_END_OF_STREAM && next != EntityState.T_START_MULTIPART) {      next=parser.next();    }    final MaximalBodyDescriptor descriptor=(MaximalBodyDescriptor)parser.getBodyDescriptor();    final String mediaType;    final String mediaTypeFromHeader=descriptor.getMediaType();    final String subType;    if (mediaTypeFromHeader == null) {      mediaType="text";      subType="plain";    } else {      mediaType=mediaTypeFromHeader;      subType=descriptor.getSubType();    }    propertyBuilder.setMediaType(mediaType);    propertyBuilder.setSubType(subType);    propertyBuilder.setContentID(descriptor.getContentId());    propertyBuilder.setContentDescription(descriptor.getContentDescription());    propertyBuilder.setContentLocation(descriptor.getContentLocation());    propertyBuilder.setContentMD5(descriptor.getContentMD5Raw());    propertyBuilder.setContentTransferEncoding(descriptor.getTransferEncoding());    propertyBuilder.setContentLanguage(descriptor.getContentLanguage());    propertyBuilder.setContentDispositionType(descriptor.getContentDispositionType());    propertyBuilder.setContentDispositionParameters(descriptor.getContentDispositionParameters());    propertyBuilder.setContentTypeParameters(descriptor.getContentTypeParameters());    final String codeset=descriptor.getCharset();    if (codeset == null) {      if ("TEXT".equalsIgnoreCase(mediaType)) {        propertyBuilder.setCharset("us-ascii");      }    } else {      propertyBuilder.setCharset(codeset);    }    final String boundary=descriptor.getBoundary();    if (boundary != null) {      propertyBuilder.setBoundary(boundary);    }    if ("text".equalsIgnoreCase(mediaType)) {      long lines=-1;      final CountingInputStream bodyStream=new CountingInputStream(parser.getInputStream());      try {        bodyStream.readAll();        lines=bodyStream.getLineCount();      }  finally {        IOUtils.closeQuietly(bodyStream);      }      next=parser.next();      if (next == EntityState.T_EPILOGUE) {        final CountingInputStream epilogueStream=new CountingInputStream(parser.getInputStream());        try {          epilogueStream.readAll();          lines+=epilogueStream.getLineCount();        }  finally {          IOUtils.closeQuietly(epilogueStream);        }      }      propertyBuilder.setTextualLineCount(lines);    }  } catch (  IOException e) {  }catch (  MimeException e) {  } finally {    if (tmpMsgIn != null) {      try {        tmpMsgIn.close();      } catch (      IOException e) {      }    }    parsed=true;  }}  }
class C{  @Override public void beginWindow(long windowId){  doemit=false;}  }
class C{  public void addData(String name,String filePath,String mimeType) throws IOException {  addData(name,FileSystemStorage.getInstance().openInputStream(filePath),FileSystemStorage.getInstance().getLength(filePath),mimeType);}  }
class C{  public String toString(){  return toStringValue(false);}  }
class C{  public void testArrayIdentityTransforms() throws Exception {  verifyByteArrayConversion(bytes(),byte[].class);  verifyShortArrayConversion(shorts(),short[].class);  verifyIntArrayConversion(ints(),int[].class);  verifyLongArrayConversion(longs(),long[].class);  verifyFloatArrayConversion(floats(),float[].class);  verifyDoubleArrayConversion(doubles(),float[].class);}  }
class C{  public void removeTreeExpansionListener(TreeExpansionListener tel){  listenerList.remove(TreeExpansionListener.class,tel);  if (uiTreeExpansionListener == tel) {    uiTreeExpansionListener=null;  }}  }
class C{  public DiffBlock(final int id,final int revAStart,final int revAEnd,final int revBStart,final int revBEnd,final boolean ab){  this.id=id;  this.revAStart=revAStart;  this.revAEnd=revAEnd;  this.revBStart=revBStart;  this.revBEnd=revBEnd;  this.ab=ab;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatagetlength.class,args);}  }
class C{  public String toString(cp_info constant_pool[]){  CONSTANT_Class_info cc=(CONSTANT_Class_info)(constant_pool[class_index]);  CONSTANT_NameAndType_info cn=(CONSTANT_NameAndType_info)(constant_pool[name_and_type_index]);  return cc.toString(constant_pool) + "." + cn.toString(constant_pool);}  }
class C{  public synchronized void incrementState(MentalState state){  if ((this.state.ordinal() < state.ordinal()) && (this.state != MentalState.UNCONSCIOUS)) {    setState(state);  }}  }
class C{  public WaveHeader(short format,short numChannels,int sampleRate,short bitsPerSample,int numBytes){  mFormat=format;  mSampleRate=sampleRate;  mNumChannels=numChannels;  mBitsPerSample=bitsPerSample;  mNumBytes=numBytes;}  }
class C{  public DelegatingSocket(Socket delegate){  this(delegate,(delegate == null) ? null : delegate.getChannel());}  }
class C{  void addOutQueue(Message message){  message.acquire();  outQueue.add(message);  outMessages.value++;  outBytes.value+=message.size;}  }
class C{  void addLayer(String layer,InputStream in) throws IOException, ClassNotFoundException {  if (layer.equals("collision")) {    collision=new CollisionDetection();    collision.setCollisionData(LayerDefinition.decode(in));  } else   if (layer.equals("protection")) {    protection=new CollisionDetection();    protection.setCollisionData(LayerDefinition.decode(in));  } else   if (layer.equals("tilesets")) {    TileStore store=new TileStore();    store.addTilesets(new InputSerializer(in));    tileset=store;  } else   if (layer.equals("data_map")) {    readDataLayer(in);  } else {    TileRenderer content=new TileRenderer();    content.setMapData(in);    layers.put(layer,content);  }  isValid=false;}  }
class C{  @Override public void startElement(){  if (this.length != null) {    getValueObject();  }}  }
class C{  public int numEntries(){  return pp;}  }
class C{  protected void startupNonTransactional() throws Exception {  mockStore();  configuration=PowerMock.createStrictMock(HGConfiguration.class);  EasyMock.expect(configuration.getHandleFactory()).andReturn((HGHandleFactory)Class.forName(HGHANDLEFACTORY_IMPLEMENTATION_CLASS_NAME).newInstance());  EasyMock.expect(configuration.isTransactional()).andReturn(false).times(2);  replay();  storage.startup(store,configuration);}  }
class C{  private void loadProtocolManagerFactories(Iterable<ProtocolManagerFactory> protocolManagerFactoryCollection){  for (  ProtocolManagerFactory next : protocolManagerFactoryCollection) {    String[] protocols=next.getProtocols();    for (    String protocol : protocols) {      ActiveMQServerLogger.LOGGER.addingProtocolSupport(protocol,next.getModuleName());      protocolMap.put(protocol,next);    }  }}  }
class C{  public static MPPProductPlanning find(Properties ctx,int AD_Org_ID,int M_Warehouse_ID,int S_Resource_ID,int M_Product_ID,String trxName){  final String whereClause="AD_Client_ID=? AND M_Product_ID=?" + " AND (AD_Org_ID IN (0,?) OR AD_Org_ID IS NULL)" + " AND (M_Warehouse_ID IN (0,?) OR M_Warehouse_ID IS NULL)"+ " AND (S_Resource_ID IN (0,?) OR S_Resource_ID IS NULL)";  return new Query(ctx,Table_Name,whereClause,trxName).setParameters(Env.getAD_Client_ID(ctx),M_Product_ID,AD_Org_ID,M_Warehouse_ID,S_Resource_ID).setOnlyActiveRecords(true).setOrderBy("COALESCE(AD_Org_ID, 0) DESC" + ", COALESCE(M_Warehouse_ID, 0) DESC" + ", COALESCE(S_Resource_ID, 0) DESC").first();}  }
class C{  public static WebSocketFrame createPingFrame(){  return new WebSocketFrame().setFin(true).setOpcode(PING);}  }
class C{  private GF2nPolynomialElement halfTrace() throws RuntimeException {  if ((mDegree & 0x01) == 0) {    throw new RuntimeException();  }  int i;  GF2nPolynomialElement h=new GF2nPolynomialElement(this);  for (i=1; i <= ((mDegree - 1) >> 1); i++) {    h.squareThis();    h.squareThis();    h.addToThis(this);  }  return h;}  }
class C{  public void pushStaticVipRoute(boolean inBound,Route route,IPClient client,LBMember member,IOFSwitch pinSwitch){  List<NodePortTuple> path=route.getPath();  if (path.size() > 0) {    for (int i=0; i < path.size(); i+=2) {      DatapathId sw=path.get(i).getNodeId();      String entryName;      Match.Builder mb=pinSwitch.getOFFactory().buildMatch();      ArrayList<OFAction> actions=new ArrayList<OFAction>();      OFFlowMod.Builder fmb=pinSwitch.getOFFactory().buildFlowAdd();      fmb.setIdleTimeout(FlowModUtils.INFINITE_TIMEOUT);      fmb.setHardTimeout(FlowModUtils.INFINITE_TIMEOUT);      fmb.setBufferId(OFBufferId.NO_BUFFER);      fmb.setOutPort(OFPort.ANY);      fmb.setCookie(U64.of(0));      fmb.setPriority(FlowModUtils.PRIORITY_MAX);      if (inBound) {        entryName="inbound-vip-" + member.vipId + "-client-"+ client.ipAddress+ "-port-"+ client.targetPort+ "-srcswitch-"+ path.get(0).getNodeId()+ "-sw-"+ sw;        mb.setExact(MatchField.ETH_TYPE,EthType.IPv4).setExact(MatchField.IP_PROTO,client.nw_proto).setExact(MatchField.IPV4_SRC,client.ipAddress).setExact(MatchField.IN_PORT,path.get(i).getPortId());        if (client.nw_proto.equals(IpProtocol.TCP)) {          mb.setExact(MatchField.TCP_SRC,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.UDP)) {          mb.setExact(MatchField.UDP_SRC,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.SCTP)) {          mb.setExact(MatchField.SCTP_SRC,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.ICMP)) {        } else {          log.error("Unknown IpProtocol {} detected during inbound static VIP route push.",client.nw_proto);        }        if (sw.equals(pinSwitch.getId())) {          if (pinSwitch.getOFFactory().getVersion().compareTo(OFVersion.OF_12) < 0) {            actions.add(pinSwitch.getOFFactory().actions().setDlDst(MacAddress.of(member.macString)));            actions.add(pinSwitch.getOFFactory().actions().setNwDst(IPv4Address.of(member.address)));            actions.add(pinSwitch.getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));          } else {            actions.add(pinSwitch.getOFFactory().actions().setField(pinSwitch.getOFFactory().oxms().ethDst(MacAddress.of(member.macString))));            actions.add(pinSwitch.getOFFactory().actions().setField(pinSwitch.getOFFactory().oxms().ipv4Dst(IPv4Address.of(member.address))));            actions.add(pinSwitch.getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));          }        } else {          actions.add(switchService.getSwitch(path.get(i + 1).getNodeId()).getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));        }      } else {        entryName="outbound-vip-" + member.vipId + "-client-"+ client.ipAddress+ "-port-"+ client.targetPort+ "-srcswitch-"+ path.get(0).getNodeId()+ "-sw-"+ sw;        mb.setExact(MatchField.ETH_TYPE,EthType.IPv4).setExact(MatchField.IP_PROTO,client.nw_proto).setExact(MatchField.IPV4_DST,client.ipAddress).setExact(MatchField.IN_PORT,path.get(i).getPortId());        if (client.nw_proto.equals(IpProtocol.TCP)) {          mb.setExact(MatchField.TCP_DST,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.UDP)) {          mb.setExact(MatchField.UDP_DST,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.SCTP)) {          mb.setExact(MatchField.SCTP_DST,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.ICMP)) {        } else {          log.error("Unknown IpProtocol {} detected during outbound static VIP route push.",client.nw_proto);        }        if (sw.equals(pinSwitch.getId())) {          if (pinSwitch.getOFFactory().getVersion().compareTo(OFVersion.OF_12) < 0) {            actions.add(pinSwitch.getOFFactory().actions().setDlSrc(vips.get(member.vipId).proxyMac));            actions.add(pinSwitch.getOFFactory().actions().setNwSrc(IPv4Address.of(vips.get(member.vipId).address)));            actions.add(pinSwitch.getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));          } else {            actions.add(pinSwitch.getOFFactory().actions().setField(pinSwitch.getOFFactory().oxms().ethSrc(vips.get(member.vipId).proxyMac)));            actions.add(pinSwitch.getOFFactory().actions().setField(pinSwitch.getOFFactory().oxms().ipv4Src(IPv4Address.of(vips.get(member.vipId).address))));            actions.add(pinSwitch.getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));          }        } else {          actions.add(switchService.getSwitch(path.get(i + 1).getNodeId()).getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));        }      }      fmb.setActions(actions);      fmb.setPriority(U16.t(LB_PRIORITY));      fmb.setMatch(mb.build());      sfpService.addFlow(entryName,fmb.build(),sw);    }  }  return;}  }
class C{  public void onPeriodicNotification(AudioTrack track){  if (playerCallback != null) {    int buffered=0;    try {      buffered=writtenTotal - track.getPlaybackHeadPosition() * channels;    } catch (    IllegalStateException e) {      Log.e(LOG,"onPeriodicNotification(): illegal state=" + track.getPlayState());      return;    }    int ms=samplesToMs(buffered,sampleRate,channels);    playerCallback.playerPCMFeedBuffer(isPlaying,ms,bufferSizeInMs);  }}  }
class C{  @SuppressWarnings("rawtypes") public void deleteAllRoomsOrganisationOfOrganisation(long organisation_id){  try {    List ll=this.getRoomsOrganisationByOrganisationId(3,organisation_id);    for (Iterator it=ll.iterator(); it.hasNext(); ) {      Rooms_Organisation rOrg=(Rooms_Organisation)it.next();      this.deleteRoomsOrganisation(rOrg);    }  } catch (  Exception ex2) {    log.error("[deleteAllRoomsOfOrganisation] ",ex2);  }}  }
class C{  public Node(final NodeIdentity identity,final NodeEndpoint endpoint,final NodeMetaData metaData){  this.identity=identity;  this.setEndpoint(endpoint);  this.setMetaData(getMetaData(metaData));  this.ensureValidity();}  }
class C{  public boolean enableImageAccessForCreateReplicaStep(URI protectionDevice,Class<? extends DataObject> clazz,List<URI> copyList,String bookmarkName,Set<String> volumeWWNs,String opId) throws ControllerException {  TaskCompleter completer=null;  try {    WorkflowStepCompleter.stepExecuting(opId);    _log.info(String.format("Activating bookmark %s on the RP CG(s)",bookmarkName));    completer=new RPCGCopyVolumeCompleter(clazz,copyList,opId);    ProtectionSystem system=_dbClient.queryObject(ProtectionSystem.class,protectionDevice);    if (system == null || system.getInactive()) {      throw DeviceControllerExceptions.recoverpoint.databaseExceptionActivateSnapshot(protectionDevice);    }    RecoverPointClient rp=RPHelper.getRecoverPointClient(system);    MultiCopyEnableImageRequestParams request=new MultiCopyEnableImageRequestParams();    request.setVolumeWWNSet(volumeWWNs);    request.setBookmark(bookmarkName);    MultiCopyEnableImageResponse response=rp.enableImageCopies(request);    if (response == null) {      throw DeviceControllerExceptions.recoverpoint.failedEnableAccessOnRP();    }    completer.ready(_dbClient);    WorkflowStepCompleter.stepSucceded(opId);    return true;  } catch (  InternalException e) {    _log.error("Operation failed with Exception: ",e);    if (completer != null) {      completer.error(_dbClient,e);    }    stepFailed(opId,"enableImageAccessStep: Failed to enable image");    return false;  }catch (  Exception e) {    _log.error("Operation failed with Exception: ",e);    if (completer != null) {      completer.error(_dbClient,DeviceControllerException.errors.jobFailed(e));    }    stepFailed(opId,"enableImageAccessStep: Failed to enable image");    return false;  }}  }
class C{  private void processInSyncFilterStatus(){  inSyncBtnClicked=!inSyncBtnClicked;  processCommonFilterStatus(TargetUpdateStatus.IN_SYNC,inSyncBtnClicked);}  }
class C{  public static int installSilent(Context context,String filePath){  return installSilent(context,filePath," -r " + getInstallLocationParams());}  }
class C{  private Diff decode(final int blockSize_C,final int blockSize_S,final int blockSize_E,final int blockSize_B,final int blockSize_L) throws UnsupportedEncodingException, DecodingException {  int code=r.read(blockSize_C);  Diff diff=new Diff();  while (code != -1) {switch (DiffAction.parse(code)) {case FULL_REVISION_UNCOMPRESSED:      diff.add(decodeFullRevision(blockSize_L));    break;case INSERT:  diff.add(decodeAdd(blockSize_S,blockSize_L));break;case DELETE:diff.add(decodeDelete(blockSize_S,blockSize_E));break;case REPLACE:diff.add(decodeReplace(blockSize_S,blockSize_E,blockSize_L));break;case CUT:diff.add(decodeCut(blockSize_S,blockSize_E,blockSize_B));break;case PASTE:diff.add(decodePaste(blockSize_S,blockSize_B,r));break;default :throw new DecodingException("Invalid block_c code: " + code);}code=r.read(blockSize_C);}return diff;}  }
class C{  public static XmlPullParser newPullParser(){  try {    KXmlParser parser=new KXmlParser();    parser.setFeature(XmlPullParser.FEATURE_PROCESS_DOCDECL,true);    parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,true);    return parser;  } catch (  XmlPullParserException e) {    throw new AssertionError();  }}  }
class C{  public static void testOneThird(){  Quaternionf q0=new Quaternionf().rotateX((float)Math.toRadians(90));  Quaternionf q1=new Quaternionf().rotateY((float)Math.toRadians(90));  Quaternionf q2=new Quaternionf().rotateZ((float)Math.toRadians(90));  Quaternionf dest=new Quaternionf();  QuaternionfInterpolator inter=new QuaternionfInterpolator();  inter.computeWeightedAverage(new Quaternionf[]{q0,q1,q2},new float[]{1.0f / 3.0f,1.0f / 3.0f,1.0f / 3.0f},30,dest);  Vector3f v=new Vector3f(0,0,1);  dest.transform(v);  assertEquals(1.0f,v.length(),1E-6f);  TestUtil.assertVector3fEquals(new Vector3f(2.0f / 3.0f,-1.0f / 3.0f,2.0f / 3.0f),v,1E-6f);}  }
class C{  public FeatureView(Context context){  super(context);  LayoutInflater layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  layoutInflater.inflate(R.layout.feature,this);}  }
class C{  public void prepareMatrixOffset(boolean inverted){  mMatrixOffset.reset();  if (!inverted)   mMatrixOffset.postTranslate(mViewPortHandler.offsetLeft(),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom()); else {    mMatrixOffset.setTranslate(mViewPortHandler.offsetLeft(),-mViewPortHandler.offsetTop());    mMatrixOffset.postScale(1.0f,-1.0f);  }}  }
class C{  public void owner(UserHostmask user){  if (user == null)   throw new IllegalArgumentException("Can't set owner on null user");  setMode("+q " + user.getNick());}  }
class C{  public void onReqManagedAccount() throws BrokerModelException {  if (m_client.isConnected()) {    m_client.reqManagedAccts();  } else {    throw new BrokerModelException(0,3010,"Not conected to TWS historical data cannot be retrieved");  }}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MPeriod.testPeriodOpen(getCtx(),getStatementDate(),MDocType.DOCBASETYPE_BankStatement,getAD_Org_ID());  MBankStatementLine[] lines=getLines(true);  if (lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  BigDecimal total=Env.ZERO;  Timestamp minDate=getStatementDate();  Timestamp maxDate=minDate;  for (int i=0; i < lines.length; i++) {    MBankStatementLine line=lines[i];    total=total.add(line.getStmtAmt());    if (line.getDateAcct().before(minDate))     minDate=line.getDateAcct();    if (line.getDateAcct().after(maxDate))     maxDate=line.getDateAcct();  }  setStatementDifference(total);  setEndingBalance(getBeginningBalance().add(total));  MPeriod.testPeriodOpen(getCtx(),minDate,MDocType.DOCBASETYPE_BankStatement,0);  MPeriod.testPeriodOpen(getCtx(),maxDate,MDocType.DOCBASETYPE_BankStatement,0);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  if (!DOCACTION_Complete.equals(getDocAction()))   setDocAction(DOCACTION_Complete);  return DocAction.STATUS_InProgress;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void initComponent(){  super.initComponent();  for (Enumeration e=accessKeys.keys(); e.hasMoreElements(); ) {    int keyCode=((Integer)e.nextElement()).intValue();    getComponentForm().addKeyListener(keyCode,this);  }}  }
class C{  public GridCacheVersion nextForLoad(){  return next(cctx.kernalContext().discovery().topologyVersion(),true,true,dataCenterId);}  }
class C{  public static synchronized KeyInfo addKey(String tokenId,String keyId,String publicKeyBase64){  log.trace("addKey({}, {})",tokenId,keyId);  Token token=findToken(tokenId);  Key key=new Key(token,keyId);  key.setPublicKey(publicKeyBase64);  token.addKey(key);  return key.toDTO();}  }
class C{  public MessageOnlyLogFilter(LogNode next){  mNext=next;}  }
class C{  public TestCase finalizeTestCase(){  Set<String> overridenMethods=Collections.emptySet();  delegate.setDelegate(new DefaultTestCase());  delegate.addStatements(getStaticInitializationBeforeClassMethods(overridenMethods));  delegate.addStatements(getInitializationCode());  delegate.addStatements(getBeforeMethods(overridenMethods));  if (testMethod == null) {    throw new RuntimeException("Test did not contain any statements!");  }  if (methodDefs.get(testMethod) == null) {    throw new RuntimeException("Error reading test method " + testMethod + "!");  }  delegate.addStatements(methodDefs.get(testMethod).getCode());  delegate.addStatements(getAfterMethods(overridenMethods));  delegate.addStatements(getAfterClassMethods(overridenMethods));  assert delegate.clone().toCode().equals(delegate.toCode());  return delegate;}  }
class C{  public void updateObject(String columnLabel,Object x,SQLType targetSqlType) throws SQLException {  throw new NotUpdatable();}  }
class C{  public Future<Void> updateViewEntityAsync(ViewEntity viewEntity,boolean commit){  updateViewEntity(viewEntity,commit);  return new AsyncResult<Void>(null);}  }
class C{  private void defineAquaSettings(UIDefaults d){  try {    Class<?> lnfClass=Class.forName(UIManager.getSystemLookAndFeelClassName(),true,Thread.currentThread().getContextClassLoader());    LookAndFeel aqua=(LookAndFeel)lnfClass.newInstance();    UIDefaults aquaDefaults=aqua.getDefaults();    d.put("MenuBarUI",aquaDefaults.get("MenuBarUI"));    d.put("MenuUI",aquaDefaults.get("MenuUI"));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static String decodeQueryValue(String query){  String retString;  retString=replaceString(query,"%25","%");  retString=replaceString(retString,"%20"," ");  retString=replaceString(retString,"%26","&");  retString=replaceString(retString,"%3F","?");  retString=replaceString(retString,"%3D","=");  return retString;}  }
class C{  private void invokeInsn(final int opcode,final Type type,final Method method,final boolean itf){  String owner=type.getSort() == Type.ARRAY ? type.getDescriptor() : type.getInternalName();  mv.visitMethodInsn(opcode,owner,method.getName(),method.getDescriptor(),itf);}  }
class C{  protected AffineTransform handleTransform(Element imageElement,double x,double y,double srcWidth,double srcHeight,double dstWidth,double dstHeight,SVGGeneratorContext generatorContext){  AffineTransform af=new AffineTransform();  double hRatio=dstWidth / srcWidth;  double vRatio=dstHeight / srcHeight;  af.translate(x,y);  if (hRatio != 1 || vRatio != 1) {    af.scale(hRatio,vRatio);  }  if (!af.isIdentity()) {    return af;  } else {    return null;  }}  }
class C{  public short[][] production_table(){  return _production_table;}  }
class C{  @Override public SetupDescriptor read(final Element element){  int x;  int y;  if (element.hasAttribute("x")) {    final String s=element.getAttribute("x");    try {      x=Integer.parseInt(s);    } catch (    final NumberFormatException ex) {      LOGGER.error("Invalid entity 'x' coordinate: " + s);      return null;    }  } else {    LOGGER.error("Entity without 'x' coordinate");    return null;  }  if (element.hasAttribute("y")) {    final String s=element.getAttribute("y");    try {      y=Integer.parseInt(s);    } catch (    final NumberFormatException ex) {      LOGGER.error("Invalid entity 'y' coordinate: " + s);      return null;    }  } else {    LOGGER.error("Entity without 'y' coordinate");    return null;  }  final EntitySetupDescriptor desc=read(element,x,y);  final List<Element> list=XMLUtil.getElements(element,"implementation");  if (!list.isEmpty()) {    if (list.size() > 1) {      LOGGER.warn("More than one implementation specified");    }    readImplementation(desc,list.get(0));  }  readAttributes(desc,element);  readConnector(desc,element);  return desc;}  }
class C{  public List<byte[]> blpop(final int timeout,final byte[]... keys){  checkIsInMulti();  final List<byte[]> args=new ArrayList<byte[]>();  for (  final byte[] arg : keys) {    args.add(arg);  }  args.add(Protocol.toByteArray(timeout));  client.blpop(args.toArray(new byte[args.size()][]));  client.setTimeoutInfinite();  final List<byte[]> multiBulkReply=client.getBinaryMultiBulkReply();  client.rollbackTimeout();  return multiBulkReply;}  }
class C{  private static byte char64(char x){  if (x > index_64.length) {    return -1;  }  return index_64[x];}  }
class C{  public int numBroadcastPeers(Sha256Hash txHash){  lock.lock();  try {    cleanTable();    WeakConfidenceReference entry=table.get(txHash);    if (entry == null) {      return 0;    } else {      TransactionConfidence confidence=entry.get();      if (confidence == null) {        table.remove(txHash);        return 0;      } else {        return confidence.numBroadcastPeers();      }    }  }  finally {    lock.unlock();  }}  }
class C{  public CommandException(String message){  super(message);}  }
class C{  protected void collapse(boolean adjustRows){  if (isExpanded) {    if (isVisible() && adjustRows) {      int childCount=getTotalChildCount();      isExpanded=false;      adjustRowCountBy(-childCount);      adjustRowBy(-childCount,0);    } else     isExpanded=false;    if (adjustRows && isVisible() && treeSelectionModel != null)     treeSelectionModel.resetRowSelection();  }}  }
class C{  private VOUserDetails retrieveUser(VOUser user){  VOUserDetails resultUser=null;  List<VOUserDetails> users=idMgmt.getUsersForOrganization();  for (  VOUserDetails ud : users) {    if (ud.getUserId().equals(user.getUserId()) && ud.getOrganizationId().equals(user.getOrganizationId())) {      resultUser=ud;    }  }  return resultUser;}  }
class C{  @SuppressWarnings("unchecked") @BeforeClass public void init(){  processor=mock(IIndexQueryRestrictionProcessor.class);  when(processor.areAllRestrictionsFulfilled(anyObject(),anyList())).thenReturn(true);}  }
class C{  public double denormalizeValue(double val){  return (val * getSampleStddev()) + getMean();}  }
class C{  public String toString(){  return toBitVector().toString();}  }
class C{  public void incNumSequenceViolated(){  this._stats.incLong(_numSequenceViolated,1);}  }
class C{  private static IMultiPoint[] randomPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble() * scale);      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  private boolean repeatingPreview(Object tag){  try {    CaptureRequest.Builder builder=mDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);    builder.addTarget(mPreviewSurface);    builder.set(CaptureRequest.CONTROL_MODE,CameraMetadata.CONTROL_MODE_AUTO);    addBaselineCaptureKeysToRequest(builder);    mCaptureSession.setRepeatingRequest(builder.build(),mCaptureCallback,mCameraHandler);    Log.v(TAG,String.format("Sent repeating Preview request, zoom = %.2f",mZoomValue));    return true;  } catch (  CameraAccessException ex) {    Log.e(TAG,"Could not access camera setting up preview.",ex);    return false;  }}  }
class C{  public void messageTransferred(Message m,DTNHost from,DTNHost to,boolean firstDelivery){  if (isWarmupID(m.getId()) || !firstDelivery) {    return;  }  InfoTuple info=this.creationInfos.remove(m.getId());  if (info == null) {    return;  }  report(m.getId(),info.getLoc1().distance(info.getLoc2()),getSimTime() - info.getTime(),m.getHops().size() - 1);}  }
class C{  public boolean isNullAt(int rowIndex,int columnIndex){  return (getValueAt(rowIndex,columnIndex) == null);}  }
class C{  public BufferedChecksum(Checksum in,int bufferSize){  this.in=in;  this.buffer=new byte[bufferSize];}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private void verifyErrorPayload(JavaResult javaResult) throws Exception {  EchoCommand command=javaResult.getBean(EchoCommand.class);  if (null == command || null == command.getStatus() || HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {    Error error=javaResult.getBean(Error.class);    log.info("Error response received from Hitachi server for messageID",command.getMessageID());    log.info("Hitachi command failed with error code:{} with message:{} for request:{}",new Object[]{error.getCode().toString(),error.getDescription(),error.getSource()});    throw HDSException.exceptions.errorResponseReceived(error.getCode(),error.getDescription());  }}  }
class C{  private void openClusterEditor(){  ClusterEditor clusterEditor=new ClusterEditor((Clusters)getParams().get("clusters",null),(java.util.List<String>)getParams().get("varNames",null));  JOptionPane.showMessageDialog(editClusters,clusterEditor);}  }
class C{  public boolean sensorReportsNearState(){  threadChecker.checkIsOnValidThread();  return lastStateReportIsNear;}  }
class C{  public RelationshipBuilder addColumns(String fromCol,String toCol){  _fromCols.add(fromCol);  _toCols.add(toCol);  return this;}  }
class C{  public static Pair<double[],Matrix[]> eig(Matrix m){  EigenvalueDecomposition ev=new EigenvalueDecomposition(m);  Pair<double[],Matrix[]> result=new Pair<>();  result.a=ev.getRealEigenvalues();  Matrix eigvs=ev.getV();  result.b=new Matrix[eigvs.getColumnDimension()];  double[] eigvsCols=eigvs.getColumnPackedCopy();  double[] oneColumn=new double[eigvs.getRowDimension()];  for (int i=0; i < eigvs.getColumnDimension(); i++) {    System.arraycopy(eigvsCols,i * oneColumn.length,oneColumn,0,oneColumn.length);    result.b[i]=new Matrix(oneColumn.length,1);    for (int row=0; row < oneColumn.length; row++) {      result.b[i].set(row,0,oneColumn[row]);    }  }  return result;}  }
class C{  private boolean readyToShow(){  return (getFile() != null && mAccount != null && mLayout == R.layout.file_details_fragment);}  }
class C{  @Nullable public static Block loadOneBlockFromXml(String xml,BlockFactory blockFactory) throws BlocklyParserException {  List<Block> result=new ArrayList<>();  loadBlocksFromXml(null,xml,blockFactory,null,result);  if (result.isEmpty()) {    return null;  }  return result.get(0);}  }
class C{  @SuppressWarnings("unchecked") public static List<Audit> findByEntityHostnameMessage(EntityManager em,JPAEntity entity,String hostName,String message){  boolean isAndrequired=false;  StringBuilder queryString=new StringBuilder("SELECT a FROM Audit a ");  if (entity != null) {    isAndrequired=true;    queryString.append(" WHERE a.entity=:entity ");  }  if (hostName != null && !hostName.isEmpty()) {    if (isAndrequired) {      queryString.append(" AND ");    } else {      isAndrequired=true;      queryString.append(" WHERE ");    }    queryString.append(" a.hostName = :hostName ");  }  if (message != null && !message.isEmpty()) {    if (isAndrequired) {      queryString.append(" AND ");    } else {      isAndrequired=true;      queryString.append(" WHERE ");    }    queryString.append(" a.message LIKE :message ");  }  Query query=em.createQuery(queryString.toString(),Audit.class);  if (entity != null) {    query.setParameter("entity",entity);  }  if (hostName != null && !hostName.isEmpty()) {    query.setParameter("hostName",hostName);  }  if (message != null && !message.isEmpty()) {    query.setParameter("message","%" + message + "%");  }  return query.getResultList();}  }
class C{  public static byte asByte(final int a){  if (a != (byte)a) {    throw new ArithmeticException("overflow: " + a);  }  return (byte)a;}  }
class C{  @org.junit.Test public void testResponseMatchingLearning(){  Bot bot=Bot.createInstance();  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("dog barks all night the");  String response=waitForOutput(output);  if (!response.equals("dog barks all night the")) {    fail("did not mimic: " + response);  }  text.input("let him in then");  response=waitForOutput(output);  if (!response.equals("let him in then")) {    fail("did not mimic: " + response);  }  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  text.input("ok");  response=waitForOutput(output);  text.input("dog barks all night the");  response=waitForOutput(output);  if (!response.equals("let him in then")) {    fail("did not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  text.input("xx barks all night");  response=waitForOutput(output);  if (!response.equals("let him in then")) {    fail("did not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  text.input("barks all");  response=waitForOutput(output);  if (!response.equals("let him in then")) {    fail("did not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  text.input("barks");  response=waitForOutput(output);  if (response.equals("let him in then")) {    fail("should not match: " + response);  }  bot.shutdown();}  }
class C{  static void checkLogDir(){  if (System.getProperty("solr.log.dir") == null) {    log.error("Missing Java Option solr.log.dir. Logging may be missing or incomplete.");  }}  }
class C{  public void printInstances(){  System.out.println(i);}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.266 -0400",hash_original_method="6659C26B9D2F6D845755120D9E3C542C",hash_generated_method="1D85046399E8D016E013E1B1E96055F2") @Override public void write(byte[] bts,int st,int end) throws IOException {  try {    beforeWrite(end);    out.write(bts,st,end);    afterWrite(end);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public static Test suite(){  return (new TestSuite(SelectComponentValueITCase.class));}  }
class C{  public InvalidMidiDataException(String message){  super(message);}  }
class C{  public boolean isBoolean(){  return false;}  }
class C{  public void testPessimistic() throws Exception {  testTransaction(cache,PESSIMISTIC,KEY_1,wrap(1));}  }
class C{  public synchronized void returnLogCursor(LogCursor logCursor){  logCursor.setLoaned(false);}  }
class C{  public static void addSubTileToCreativeMenu(String key){  subtilesForCreativeMenu.add(key);}  }
class C{  @EventHandler public void onMatchLoad(MatchLoadCompleteEvent event){  event.getMatch().getMatchThread().getPlayers().forEach(null);}  }
class C{  public boolean forEachValue(TObjectProcedure<V> procedure){  V[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (isFull(values,i) && !procedure.execute(unwrapNull(values[i]))) {      return false;    }  }  return true;}  }
class C{  public void postRun(List<Source> sources,List<CompilationUnit> units,ResourceContainer resources,SymbolTable symbolTable,CompilerSwcContext swcContext,NameMappings nameMappings,Configuration configuration){  LinkedList<Source> extraSources=new LinkedList<Source>();  LinkedList<String> mixins=new LinkedList<String>();  LinkedList<DefineTag> fonts=new LinkedList<DefineTag>();  Set<String> contributingSwcs=new HashSet<String>();  processResourceBundleNames(units,configuration);  processInitClass(units,configuration,extraSources,mixins,fonts,contributingSwcs,swcContext);  boolean generatedLoaderClass=processLoaderClass(units,configuration,extraSources,mixins,fonts,contributingSwcs,swcContext);  processCompiledResourceBundleInfoClass(units,configuration,extraSources,mixins,fonts,swcContext);  for (  Source extraSource : extraSources) {    sources.add(resources.addResource(extraSource));  }  CompilerConfiguration compilerConfiguration=configuration.getCompilerConfiguration();  int compatibilityVersion=compilerConfiguration.getCompatibilityVersion();  StandardDefs standardDefs=ThreadLocalToolkit.getStandardDefs();  TypeAnalyzer typeAnalyzer=symbolTable.getTypeAnalyzer();  assert (typeAnalyzer != null);  for (int i=0, length=units.size(); i < length; i++) {    CompilationUnit u=(CompilationUnit)units.get(i);    if (u.isRoot()) {      Source source=u.getSource();      source.disconnectLogger();      source.setPathResolver(null);    } else     if (generatedLoaderClass && !u.getSource().isInternal() && !u.getSource().isSwcScriptOwner()) {      if (typeAnalyzer != null) {        for (        QName qName : u.topLevelDefinitions) {          ClassInfo info=typeAnalyzer.getClassInfo(qName.toString());          checkForModuleOrApplication(standardDefs,typeAnalyzer,info,qName,configuration);        }      }    }    if (!u.getSource().isSwcScriptOwner() && compilerConfiguration.enableSwcVersionFiltering()) {      Set<Name> dependencies=new HashSet<Name>();      dependencies.addAll(u.inheritance);      dependencies.addAll(u.namespaces);      dependencies.addAll(u.expressions);      dependencies.addAll(u.types);      for (      Name name : dependencies) {        if (name instanceof QName) {          Source dependent=symbolTable.findSourceByQName((QName)name);          if (dependent.isSwcScriptOwner()) {            SwcScript swcScript=(SwcScript)dependent.getOwner();            Swc swc=swcScript.getLibrary().getSwc();            if (compatibilityVersion < swc.getVersions().getMinimumVersion()) {              DependencyNotCompatible message=new DependencyNotCompatible(swcScript.getName().replace('/','.'),swc.getLocation(),swc.getVersions().getMinimumVersionString(),compilerConfiguration.getCompatibilityVersionString());              ThreadLocalToolkit.log(message,u.getSource());            }          }        }      }    }  }}  }
class C{  private void addRow(Dimension dim,int rowWidth,int rowHeight){  dim.width=Math.max(dim.width,rowWidth);  if (dim.height > 0) {    dim.height+=getVgap();  }  dim.height+=rowHeight;}  }
class C{  @Override public CoapServer add(Resource... resources){  for (  Resource r : resources)   root.add(r);  return this;}  }
class C{  private void handleRelSetPickerChange(RelationSetDescriptor relationSet){  if (null != relationSet) {    selectRelations(buildRelations(relationSet));  }}  }
class C{  private String formatIntentMimeType(String featureTag){  String serviceId=CapabilityUtils.extractServiceId(featureTag);  return CapabilityService.EXTENSION_MIME_TYPE + "/" + serviceId;}  }
class C{  private byte[] calculateAdditionalAuthenticatedDataLength(byte[] additionalAuthenticatedData){  long lengthInBits=Long.valueOf(additionalAuthenticatedData.length) * 8;  byte[] al=ByteBuffer.allocate(8).putLong(lengthInBits).array();  return al;}  }
class C{  @Override public void refresh(){  init(url);}  }
class C{  public void onCordovaInit(PluginManager pluginManager){  this.pluginManager=pluginManager;  if (savedResult != null) {    onActivityResult(savedResult.requestCode,savedResult.resultCode,savedResult.intent);  }}  }
class C{  private double ARAMm_Update_Weights(HashMap<Integer,Double> data,HashMap<Integer,Double> labels,int category){  double weightChange=0;  sweightsA[category]=0;  Set<Integer> s1=new TreeSet<Integer>(data.keySet());  Set<Integer> s2=new HashSet<Integer>(weightsA[category].keySet());  int count=0;  for (  Integer i : s1) {    if (i >= snumFeatures) {      continue;    }    double da=data.get(i);    Double wa=(Double)weightsA[category].get(i);    if (wa != null) {      if (da < wa) {        wa=(learningRate * da) + (1 - learningRate) * wa;        if (wa == 0) {          weightsA[category].remove(i);        } else {          weightsA[category].put(i,wa);        }      }      sweightsA[category]+=wa;      s2.remove(i);    }    double dat=1 - da;    int j1=i + snumFeatures;    Double wat=(Double)weightsA[category].get(j1);    if (wat != null) {      wat=1 - wat;      if (dat < wat) {        wat=((learningRate * dat) + (1 - learningRate) * wat);        if (wat == 1) {          weightsA[category].remove(j1);          upweightsA[category].remove(j1);        } else {          weightsA[category].put(j1,1 - wat);          upweightsA[category].add(j1);          count+=1;        }      } else {        if (wat != 1) {          count+=1;        }      }      sweightsA[category]+=wat;      s2.remove(j1);    } else {      wat=(learningRate * dat);      if (wat == 1) {        weightsA[category].remove(j1);        upweightsA[category].remove(j1);      } else {        weightsA[category].put((Integer)j1,(Double)(1 - wat));        upweightsA[category].add(j1);        count+=1;      }      sweightsA[category]+=wat;    }  }  for (  Integer i : s2) {    if (i < snumFeatures) {      try {        weightsA[category].remove(i);        upweightsA[category].remove(i);      } catch (      Exception e) {        e.getClass();      }    } else {      double wat=1 - (Double)weightsA[category].get(i);      sweightsA[category]+=wat;      count+=1;    }  }  sweightsA[category]+=snumFeatures - count;  s1=labels.keySet();  for (  Integer i : s1) {    double lb=labels.get(i);    Double wb=(Double)weightsB[category].get(i);    if (wb != null) {      if (weightblearnmethod == 0) {        weightsB[category].put(i,lb + wb);        weightChange=1;      } else {        if (lb < wb) {          weightsB[category].put(i,(learningRate * lb) + (1 - learningRate) * wb);          weightChange=1;        }      }    }  }  return weightChange;}  }
class C{  private void appletSystemExit(){  if (factory.isStandalone())   System.exit(0);}  }
class C{  public SRaster(LLPoint ll1,short width,short height,short x_hot,short y_hot){  super(GraphicType.GT_Raster,RenderType.RT_LatLon,LineType.LT_Unknown,DeclutterType.DC_None);  p1_=new XYPoint((short)0,(short)0);  ll1_=ll1;  width_=width;  height_=height;  x_hot_=x_hot;  y_hot_=y_hot;  pixels_=new byte[height * width];  colorsTotal_=0;  transparent_=0;  ct_=new CTEntry[0];}  }
class C{  public void reverseMove(){  tmpCompodex.renameTo(odexFile);  tmpJar.renameTo(origJar);}  }
class C{  public static void waitForServerUpdate(){  Region r1=cache.getRegion(Region.SEPARATOR + REGION_NAME);  assertNotNull(r1);  final long maxWaitTime=60000;  final long start=System.currentTimeMillis();  for (; ; ) {    if (r1.getEntry("server-4").getValue().equals("val-4")) {      break;    }    assertTrue("Waited over " + maxWaitTime + " ms for entry to be refreshed",(System.currentTimeMillis() - start) < maxWaitTime);    sleep(1000);  }}  }
class C{  @Override public void step(SimState state){  SchellingSpace world=(SchellingSpace)state;  if (!acceptable(world)) {    moveRandomly(world);  }}  }
class C{  public String convertSystemNameToAlternate(String systemName){  int i=matchTentative(systemName);  if (i >= 0) {    return ((LightManager)getMgr(i)).convertSystemNameToAlternate(systemName);  }  return "";}  }
class C{  public boolean isEmpty(){  return (unitsInUse == 0);}  }
class C{  public void onUserActivity(int event,int uid){  if (DEBUG) {    Slog.d(TAG,"onUserActivity: event=" + event + ", uid="+ uid);  }  try {    mBatteryStats.noteUserActivity(uid,event);  } catch (  RemoteException ex) {  }synchronized (mLock) {    if (!mUserActivityPending) {      mUserActivityPending=true;      Message msg=mHandler.obtainMessage(MSG_USER_ACTIVITY);      msg.setAsynchronous(true);      mHandler.sendMessage(msg);    }  }}  }
class C{  public void test_GetGenerator(){  assertEquals("wrong generator was returned",ecpoint,ecps.getGenerator());}  }
class C{  public void trimToSize(){  modCount++;  int oldCapacity=elementData.length;  if (size < oldCapacity) {    elementData=Arrays.copyOf(elementData,size);  }}  }
class C{  public static Function<String> jsonType(Object json,String path){  return new JSONArgumentFunction<>("json_type",json,path);}  }
class C{  private void obtainHint(@NonNull final TypedArray typedArray){  setHint(typedArray.getText(R.styleable.Spinner_android_hint));}  }
class C{  private static void waitForLogin(){  try {    latch.await();  } catch (  final InterruptedException e) {    logger.error("Unexpected interrupt",e);    Thread.currentThread().interrupt();  }}  }
class C{  public VirtualMachineError(String message){  super(message);}  }
class C{  public void createSeries(CandleDataset source,int seriesIndex){  if (source.getSeries(seriesIndex) == null) {    throw new IllegalArgumentException("Null source (XYDataset).");  }  for (int i=0; i < source.getSeries(seriesIndex).getItemCount(); i++) {    this.updateSeries(source.getSeries(seriesIndex),i,true);  }}  }
class C{  public static <T>ImmutableSet<ImmutableSet<T>> immutablePowerSet(Set<T> set){  return powerSet(set).collect(null).toImmutable();}  }
class C{  @Override public int read() throws IOException {  if (closed) {    throw new IOException("Attempted read from closed stream.");  }  if (pos >= contentLength) {    return -1;  }  pos++;  return wrappedStream.read();}  }
class C{  protected static void initializePackageNames(){  Server bukkitServer=Bukkit.getServer();  if (bukkitServer != null) {    Class<?> craftServerClass=bukkitServer.getClass();    CRAFTBUKKIT_PACKAGE=trimPackageName(craftServerClass.getCanonicalName());    Matcher matcher=PACKAGE_VERSION_MATCHER.matcher(CRAFTBUKKIT_PACKAGE);    if (matcher.matches()) {      VERSION_TAG=matcher.group(1);    }    Class<?> craftEntityClass=getCraftEntityClass();    MethodAccessor<Object> getHandle=ClassTemplate.create(craftEntityClass).getMethod("getHandle");    MINECARFT_PACKAGE=trimPackageName(getHandle.getReturnType().getCanonicalName());    if (!MINECARFT_PACKAGE.startsWith(MINECARFT_PACKAGE_PREFIX)) {      if (MINECARFT_PACKAGE.equals(FORGE_ENTITY_PACKAGE)) {        try {          if (VERSION_TAG == null || VERSION_TAG == "") {            if (getClass("org.bukkit.plugin.java.PluginClassLoader") != null) {              ClassTemplate pluginClassLoader=ClassTemplate.create(getClass("org.bukkit.plugin.java.PluginClassLoader"));              MethodAccessor<String> getNativeVersion=pluginClassLoader.getMethod("getNativeVersion");              if (getNativeVersion != null) {                VERSION_TAG=getNativeVersion.invoke(null);              }            }          }        } catch (        Exception e) {          if (VERSION_TAG == null) {            EchoPet.LOG.warning("Version tag is null and it appears the server is modded but does not contain the expected method(s)! HoloAPI may not work correctly!");          }        }        MINECARFT_PACKAGE=combine(MINECARFT_PACKAGE_PREFIX,VERSION_TAG);      } else {        MINECARFT_PACKAGE_PREFIX=MINECARFT_PACKAGE;      }    }  } else {    throw new IllegalStateException("Failed to find Bukkit!");  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void configureManagers(){}  }
class C{  public static void picture(double x,double y,String s){  Image image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  int ws=image.getWidth(null);  int hs=image.getHeight(null);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),null);  draw();}  }
class C{  public void execute(){  int pcDepth=getParams().getInt("depth",-1);  Mbfs mbfs=new Mbfs(getIndependenceTest(),pcDepth);  Parameters params=getParams();  if (params instanceof Parameters) {    mbfs.setAggressivelyPreventCycles(params.getBoolean("aggressivelyPreventCycles",false));  }  IKnowledge knowledge=(IKnowledge)getParams().get("knowledge",new Knowledge2());  mbfs.setKnowledge(knowledge);  String targetName=getParams().getString("targetName",null);  Graph graph=mbfs.search(targetName);  setResultGraph(graph);  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (knowledge.isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,knowledge);  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  this.mbfs=mbfs;}  }
class C{  public void moveCaretPosition(int pos){  Document doc=getDocument();  if (doc != null) {    if (pos > doc.getLength() || pos < 0) {      throw new IllegalArgumentException("bad position: " + pos);    }    caret.moveDot(pos);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:12.956 -0500",hash_original_method="CF0E894E8F0E8260CA9CE5027C85CCBC",hash_generated_method="33D143EF85E8AD02E15A033090CF0D8D") private void connect(InetAddress anAddr,int aPort,int timeout) throws IOException {  InetAddress normalAddr=anAddr.isAnyLocalAddress() ? InetAddress.getLocalHost() : anAddr;  if (streaming && usingSocks()) {    socksConnect(anAddr,aPort,0);  } else {    IoBridge.connect(fd,normalAddr,aPort,timeout);  }  super.address=normalAddr;  super.port=aPort;}  }
class C{  public Constraints(Component c){  this.c=c;  setX(Spring.constant(c.getX()));  setY(Spring.constant(c.getY()));  setWidth(Spring.width(c));  setHeight(Spring.height(c));}  }
class C{  public void blockSet(int sx,int sy,int w,int h,int val,long style){  if (sx < 0 || sx + w > mColumns || sy < 0 || sy + h > mScreenRows) {    throw new IllegalArgumentException("Illegal arguments! blockSet(" + sx + ", "+ sy+ ", "+ w+ ", "+ h+ ", "+ val+ ", "+ mColumns+ ", "+ mScreenRows+ ")");  }  for (int y=0; y < h; y++)   for (int x=0; x < w; x++)   setChar(sx + x,sy + y,val,style);}  }
class C{  private boolean isSelfConnection(){  return (source.getNeuron() == target.getNeuron());}  }
class C{  private void drawXAxis(Canvas canvas){  int x=getScrollX() + leftBorder;  int y=topBorder + effectiveHeight;  canvas.drawLine(x,y,x + effectiveWidth,y,axisPaint);  String label=getXAxisLabel();  Rect rect=getRect(axisPaint,label);  int yOffset=(int)rect.height() / 2;  canvas.drawText(label,x + effectiveWidth + spacer,y + yOffset,axisPaint);  double interval=getXAxisInterval();  ArrayList<Double> markerPositions=getXAxisMarkerPositions(interval);  NumberFormat numberFormat=interval < 1 ? X_FRACTION_FORMAT : X_NUMBER_FORMAT;  for (int i=0; i < markerPositions.size(); i++) {    drawXAxisMarker(canvas,markerPositions.get(i),numberFormat,spacer + yOffset);  }}  }
class C{  private void readObject(){}  }
class C{  @Override public int hashCode(){  int result=41;  result=result + 37 * this.periodClass.hashCode();  result=result + 37 * this.dateFormat.hashCode();  return result;}  }
class C{  public void increaseTimer(int time){  int newTime=this.timer + time;  if (newTime <= this.duration && newTime >= 0) {    this.timer=newTime;  } else {    this.timer=newTime < 0 ? 0 : this.duration;  }}  }
class C{  public static void loadJarDoOnBean(String jarFile,DoOnBean action) throws java.io.IOException {  JarLoader jl=new JarLoader(jarFile);  JarInfo ji=jl.loadJar();  if (ji == null) {    System.err.println("JAR file " + jarFile + " did not load properly!");    System.err.println("Check for error messages possibly regarding");    System.err.println("problems defining classes");    return;  }  if (ji.getCount() == 0) {    System.err.println("Jar file " + jarFile + " didn't have any beans!");    if (!warnedAboutNoBeans) {      warnedAboutNoBeans=true;      System.err.println();      System.err.println("Each jar file needs to contain a manifest file describing which entries are");      System.err.println("beans.  You can should provide a suitable manifest when you create the jar.");      System.err.println();    }  }  for (int i=0; i < ji.getCount(); i++) {    String beanName=ji.getName(i);    BeanInfo bi=ji.getBeanInfo(i);    Class bc=ji.getBeanClass(i);    if (bi == null || bc == null) {      continue;    }    action.action(ji,bi,bc,beanName);  }}  }
class C{  public static void addPrecisionSawmillRecipe(ItemStack input,ItemStack primaryOutput){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addPrecisionSawmillRecipe",ItemStack.class,ItemStack.class);    m.invoke(null,input,primaryOutput);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public void testFailedOnInvalidCallProcSequence(){  checkFail("{callfunc1()}");  checkFail("select {call func1(field1, {call func2(field2), field3)} from SomeTable;");  checkFail("select {call func1(field1, call func2(field2)}, field3)} from SomeTable;");}  }
class C{  public void removeStatement(String statementName){  rwLock.acquireWriteLock();  try {    removedStatementNames.add(statementName);    if (removedStatementNames.size() > 1000) {      for (int i=0; i <= currentLastElement; i++) {        if (removedStatementNames.contains(statementNames[i])) {          statementNames[i]=null;        }      }      removedStatementNames.clear();    }  }  finally {    rwLock.releaseWriteLock();  }}  }
class C{  public static boolean isSameLength(char[] array1,char[] array2){  if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {    return false;  }  return true;}  }
class C{  @Override public String toString(){  final StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append("[\n");  for (  final Entry<GraphNode,LatticeElement> entry : mapping.entrySet()) {    stringBuilder.append(entry.getKey() + " -> " + entry.getValue());    stringBuilder.append('\n');  }  stringBuilder.append(']');  return stringBuilder.toString();}  }
class C{  @CanIgnoreReturnValue public Stopwatch stop(){  long tick=ticker.read();  checkState(isRunning,"This stopwatch is already stopped.");  isRunning=false;  elapsedNanos+=tick - startTick;  return this;}  }
class C{  @Override public List<ValidationError> validate(){  List<ValidationError> errorList=new ArrayList<ValidationError>();  removeEmptyRates();  if ((errorList=checkForNoRatesPresent()) != null)   return errorList;  if ((errorList=validateOverheadRates()) != null)   return errorList;  if ((errorList=validateDateRanges()) != null)   return errorList;  return errorList;}  }
class C{  public boolean isComposite(){  return false;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:01.734 -0500",hash_original_method="DC5C6AC2DFC5703884925E95380CED47",hash_generated_method="1DE3EAECC7BBF780F5F9D829D9A6954B") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public static boolean isNegativeTransient(int reply){  return (reply >= 400 && reply < 500);}  }
class C{  public boolean eatOptionalNewlines(){  return eatOptionalNewlines(-1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:47.299 -0400",hash_original_method="8767B0DB3A608CD14EAA847CE6E9F597",hash_generated_method="549477C92982AB36ECCE3FD77ABFF2F9") protected void addURL(URL url){  try {    originalUrls.add(url);    searchList.add(createSearchURL(url));  } catch (  MalformedURLException e) {  }}  }
class C{  @Override public boolean supportsResultSetConcurrency(int type,int concurrency){  if (isDebugEnabled()) {    debugCode("supportsResultSetConcurrency(" + type + ", "+ concurrency+ ");");  }  return type != ResultSet.TYPE_SCROLL_SENSITIVE;}  }
class C{  public void close(){  parser.close();}  }
class C{  public static <K,V>Map<K,V> synchronizedMap(Map<K,V> map){  if (map == null) {    throw new NullPointerException("map == null");  }  return new SynchronizedMap<K,V>(map);}  }
class C{  private void connectApis(){  try {    if (mRcsServiceControl.isServiceStarted()) {      for (      RcsServiceName service : mApis.keySet()) {        if (!isServiceConnected(service)) {          if (LogUtils.isActive) {            Log.d(LOGTAG,"Connect service ".concat(service.name()));          }          RcsService rcsService=mApis.get(service);          rcsService.connect();        }      }    }  } catch (  RcsServiceException e) {    Log.w(LOGTAG,"Cannot connect service API: ".concat(e.getMessage()));    mRetryCount++;    if (mRetryCount < MAX_RETRY_API_CNX) {      TimerUtils.setExactTimer(mAlarmManager,System.currentTimeMillis() + API_DELAY_TO_CONNECT,mCnxIntent);      if (LogUtils.isActive) {        Log.d(LOGTAG,"Set timer to retry API connection");      }    } else {      Log.e(LOGTAG,"Maximum attempts to connect API is reached");    }  }}  }
class C{  private void expandNext() throws DataLengthException {  int n=generatedBytes / hashLen + 1;  if (n >= 256) {    throw new DataLengthException("HKDF cannot generate more than 255 blocks of HashLen size");  }  if (generatedBytes != 0) {    hMacHash.update(currentT,0,hashLen);  }  hMacHash.update(info,0,info.length);  hMacHash.update((byte)n);  hMacHash.doFinal(currentT,0);}  }
class C{  ActionMap createActionMap(){  ActionMap map=new ActionMapUIResource();  map.put("showSystemMenu",new ShowSystemMenuAction(true));  map.put("hideSystemMenu",new ShowSystemMenuAction(false));  return map;}  }
class C{  public ClassicFilter(TokenStream in){  super(in);}  }
class C{  public void testNegatePositive(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  byte rBytes[]={-13,-57,-101,1,75,-90,-46,-92,-4,14,-36,-27,-4,-91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.negate();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertTrue("incorrect sign",result.signum() == -1);}  }
class C{  public SQLException(String theReason,String theSQLState,Throwable theCause){  super(theReason,theCause);  SQLState=theSQLState;}  }
class C{  public void removeFirst(){  if (undoList.size() > 0) {    undoList.removeFirst();  }}  }
class C{  protected static String quoteDate(java.sql.Date x){  if (x == null) {    return "null";  }  return "Date.valueOf(\"" + x.toString() + "\")";}  }
class C{  public boolean isValidInet6Address(String ipv6){  return INET_ADDRESS_VALIDATOR.isValidInet6Address(ipv6);}  }
class C{  public synchronized StringBuffer append(char[] chars,int start,int length){  append0(chars,start,length);  return this;}  }
class C{  public boolean forEach(IntProcedure procedure){  int[] theElements=elements;  int theSize=size;  for (int i=0; i < theSize; )   if (!procedure.apply(theElements[i++]))   return false;  return true;}  }
class C{  public static String convertClassToJsonSchema(ApiParameterMetadata clazz,String responseDescription,JavaDocStore javaDocStore){  if (clazz == null || clazz.equals(Void.class)) {    return "{}";  }  try {    ObjectMapper m=new ObjectMapper();    JsonSchema jsonSchema=extractSchemaInternal(clazz.getType(),clazz.getGenericType(),responseDescription,javaDocStore,m);    return m.writerWithDefaultPrettyPrinter().writeValueAsString(jsonSchema);  } catch (  Exception e) {    throw new IllegalStateException(e);  }}  }
class C{  private String textToPreishHtml(final String value,boolean nbsps){  if (value == null) {    return "";  }  String lines=StringEscapeUtils.escapeHtml4(value).replace("\n","<br>");  if (nbsps) {    return lines.replace(" ","&nbsp;");  }  return lines;}  }
class C{  public void putAllWithPrefix(TungstenProperties props,String prefix){  TungstenProperties newProps=new TungstenProperties();  if (props.isEmpty()) {    newProps.setObject(prefix,props);  } else {    for (    String key : props.keyNames()) {      newProps.setObject(prefix + key,props.getObject(key));    }  }  putAll(newProps);}  }
class C{  public boolean loadLocales(SharedPreferences sp){  String selectedLanguages=sp.getString(LatinIME.PREF_SELECTED_LANGUAGES,null);  String currentLanguage=sp.getString(LatinIME.PREF_INPUT_LANGUAGE,null);  if (selectedLanguages == null || selectedLanguages.length() < 1) {    loadDefaults();    if (mLocales.length == 0) {      return false;    }    mLocales=new Locale[0];    return true;  }  if (selectedLanguages.equals(mSelectedLanguages)) {    return false;  }  mSelectedLanguageArray=selectedLanguages.split(",");  mSelectedLanguages=selectedLanguages;  constructLocales();  mCurrentIndex=0;  if (currentLanguage != null) {    mCurrentIndex=0;    for (int i=0; i < mLocales.length; i++) {      if (mSelectedLanguageArray[i].equals(currentLanguage)) {        mCurrentIndex=i;        break;      }    }  }  return true;}  }
class C{  public static Character[] nullToEmpty(final Character[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;  }  return array;}  }
class C{  public ReflectionConverter(final Mapper mapper,final ReflectionProvider reflectionProvider,final Class<?> type){  this(mapper,reflectionProvider);  this.type=type;}  }
class C{  public void testLeakInputStream() throws IOException {  Path dir=wrap(createTempDir());  OutputStream file=Files.newOutputStream(dir.resolve("stillopen"));  file.write(5);  file.close();  InputStream leak=Files.newInputStream(dir.resolve("stillopen"));  try {    dir.getFileSystem().close();    fail("should have gotten exception");  } catch (  Exception e) {    assertTrue(e.getMessage().contains("file handle leaks"));  }  leak.close();}  }
class C{  @Override public String toString(){  String str=labelTemplate.toString();  if (negated) {    str+="!=";  } else   if (!exclusive) {    str+="+=";  } else {    str+=":=";  }  str+=valueTemplate.toString();  return str;}  }
class C{  public static OrderStatus newInstance(){  final OrderStatus returnInstance=new OrderStatus();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  <T>T random(T... choices){  return choices[rgen.nextInt(choices.length)];}  }
class C{  public ObjectId(String s){  this(s,false);}  }
class C{  public Object put(String key,Object value){  VMProxyArg vmpa=(VMProxyArg)vmproxyhash.get(key);  if (vmpa != null) {    return vmpa.setObject(wrappedContext,value);  } else {    if (localcontextscope) {      return localcontext.put(key,value);    } else {      if (localcontext.containsKey(key)) {        return localcontext.put(key,value);      } else {        return innerContext.put(key,value);      }    }  }}  }
class C{  public String toUrl(){  StringBuilder url=new StringBuilder(requestUrl).append("?");  for (  Map.Entry<String,String> param : params.entrySet()) {    url.append(param.getKey()).append("=").append(param.getValue()).append("&");  }  url.deleteCharAt(url.lastIndexOf("&"));  return url.toString();}  }
class C{  public double distance(int[] A,int[] B){  double d=Tool.weightedL0_Distance(FEATURES,A,B);  return d / maxDistanceCount;}  }
class C{  protected void doRenderGraphic(DrawContext dc){  for (  Path path : this.paths) {    path.render(dc);  }  if (this.arrowHead != null) {    this.arrowHead.render(dc);  }}  }
class C{  public void updateRow() throws SQLException {  checkUpdatable();  rowUpdater.updateRow();  fbFetcher.updateRow(rowUpdater.getNewRow());  notifyRowUpdater();}  }
class C{  private DocValuesProducer initDocValuesProducer() throws IOException {  final Directory dir=core.cfsReader != null ? core.cfsReader : si.info.dir;  if (!fieldInfos.hasDocValues()) {    return null;  } else   if (si.hasFieldUpdates()) {    return new SegmentDocValuesProducer(si,dir,core.coreFieldInfos,fieldInfos,segDocValues);  } else {    return segDocValues.getDocValuesProducer(-1L,si,dir,fieldInfos);  }}  }
class C{  @Override public VersionClient version(){  return new DefaultVersionClient(url,authenticationManager);}  }
class C{  private void switchEditorColorsProfile(){  if (!isChangeEditorColorsPossible()) {    return;  }  ClassLoader loader=Lookup.getDefault().lookup(ClassLoader.class);  if (loader == null) {    loader=Installer.class.getClassLoader();  }  try {    Class classz=loader.loadClass(COLOR_MODEL_CLASS_NAME);    Object colorModel=classz.newInstance();    Method method=classz.getDeclaredMethod("setCurrentProfile",String.class);    method.invoke(colorModel,DarculaLaf.NAME);    method=classz.getDeclaredMethod("getAnnotations",String.class);    Object acs=method.invoke(colorModel,DarculaLaf.NAME);    method=classz.getDeclaredMethod("setAnnotations",String.class,Collection.class);    method.invoke(colorModel,DarculaLaf.NAME,acs);  } catch (  Exception ex) {    Logger.getLogger(Installer.class.getName()).log(Level.INFO,"Cannot change editors colors profile.",ex);  }}  }
class C{  public EventServiceCallbackHandler(Object clientData){  this.clientData=clientData;}  }
class C{  public static void showComplex_1D(String format,double[] x,String title){  System.out.println(title);  System.out.println("-------------------");  for (int i=0; i < x.length; i=i + 2) {    if (x[i + 1] == 0) {      System.out.println(String.format(format,x[i]));      continue;    }    if (x[i] == 0) {      System.out.println(String.format(format,x[i + 1]) + "i");      continue;    }    if (x[i + 1] < 0) {      System.out.println(String.format(format,x[i]) + " - " + (String.format(format,-x[i + 1]))+ "i");      continue;    }    System.out.println(String.format(format,x[i]) + " + " + (String.format(format,x[i + 1]))+ "i");  }  System.out.println();}  }
class C{  public void testFollowerRejectsPollWhenLogNotUpToDate() throws Throwable {  runOnServer(null);}  }
class C{  public TraceEndRunCycle createTraceEndRunCycle(){  TraceEndRunCycleImpl traceEndRunCycle=new TraceEndRunCycleImpl();  return traceEndRunCycle;}  }
class C{  public Matrix33(){  new Matrix33(0,0,0,0,0,0,0,0,0);}  }
class C{  public void addTailArg(String arg){  _tailArgs.add(arg);}  }
class C{  public ClusterConfig(List<Node> nodes,short thisNodeId) throws SyncException {  init(nodes,thisNodeId,AuthScheme.NO_AUTH,null,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.718 -0400",hash_original_method="F95CEBBCA311BD93B971DCD0A421E5DC",hash_generated_method="3DE9CC338BC26C5299037CD3D98482D5") private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  lock.lock();  try {    q=new PriorityQueue<E>(Math.max(size,1),comparator);    q.addAll(this);    s.defaultWriteObject();  }  finally {    q=null;    lock.unlock();  }}  }
class C{  public synchronized void removePropertyChangeListener(PropertyChangeListener listener){  if (changeSupport != null) {    changeSupport.removePropertyChangeListener(listener);  }}  }
class C{  public SQLSyntaxErrorException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public Command prepareLocal(String sql){  if (closed) {    throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"session closed");  }  Command command;  if (queryCacheSize > 0) {    if (queryCache == null) {      queryCache=SmallLRUCache.newInstance(queryCacheSize);      modificationMetaID=database.getModificationMetaId();    } else {      long newModificationMetaID=database.getModificationMetaId();      if (newModificationMetaID != modificationMetaID) {        queryCache.clear();        modificationMetaID=newModificationMetaID;      }      command=queryCache.get(sql);      if (command != null && command.canReuse()) {        command.reuse();        return command;      }    }  }  Parser parser=new Parser(this);  try {    command=parser.prepareCommand(sql);  }  finally {    subQueryIndexCache=null;  }  command.prepareJoinBatch();  if (queryCache != null) {    if (command.isCacheable()) {      queryCache.put(sql,command);    }  }  return command;}  }
class C{  public boolean decodeXWapApplicationId(int startIndex){  if (decodeIntegerValue(startIndex) == true) {    stringValue=null;    return true;  }  return decodeTextString(startIndex);}  }
class C{  private void disposeCiphers(){synchronized (readLock) {    readCipher.dispose();  }  writeLock.lock();  try {    writeCipher.dispose();  }  finally {    writeLock.unlock();  }}  }
class C{  public static Paint newBackgroundPaint(Context context){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(DEFAULT_BACKGROUND_COLOR_ID));  return paint;}  }
class C{  private SimpleItypeConfig searchR(SimpleItypeConfig sic,String id,boolean clearErrorFlags){  if (sic.getId() == Long.parseLong(id))   return sic;  Vector v=sic.getSubparts();  SimpleItypeConfig result=null;  for (int i=0; i < v.size(); i++) {    SimpleItypeConfig sic1=(SimpleItypeConfig)v.elementAt(i);    if (clearErrorFlags)     sic1.setHasError(false);    result=searchR(sic1,id,clearErrorFlags);    if (result != null)     break;  }  return result;}  }
class C{  public HeapSnapshot(){  Traversal.traverse(this);}  }
class C{  public static boolean locationContainment(Location loc1,Location loc2){  if ((loc1.beginLine() < loc2.beginLine()) || ((loc1.beginLine() == loc2.beginLine()) && (loc1.beginColumn() < loc2.beginColumn()))) {    return false;  }  return (loc1.endLine() < loc2.endLine()) || ((loc1.endLine() == loc2.endLine()) && (loc1.endColumn() <= loc2.endColumn()));}  }
class C{  public static Object sum(Object[] self,Object initialValue,Closure closure){  return sum(toList(self),initialValue,closure,false);}  }
class C{  private void outputDataRecord(ProcessContext c,KV<KV<K,W>,WindowedValue<V>> value,long keyIndex){  IsmRecord<WindowedValue<V>> ismRecord=IsmRecord.of(ImmutableList.of(value.getKey().getKey(),value.getKey().getValue(),keyIndex),value.getValue());  c.output(ismRecord);}  }
class C{  public int convertBetweenPositionAndId(int value){  return -2 - value;}  }
class C{  public PrivilegedActionException(Exception exception){  super((Throwable)null);  this.exception=exception;}  }
class C{  public static int[] maxIndices(double M[][]){  double max=Double.MIN_VALUE;  int i_max=-1;  int j_max=-1;  for (int i=0; i < M.length; i++) {    for (int j=0; j < M[i].length; j++) {      if (M[i][j] > max) {        max=M[i][j];        i_max=i;        j_max=j;      }    }  }  return new int[]{i_max,j_max};}  }
class C{  public static void saveCurrentBugCollection(IProject project,IProgressMonitor monitor) throws CoreException {  if (isBugCollectionDirty(project)) {    SortedBugCollection bugCollection=(SortedBugCollection)project.getSessionProperty(SESSION_PROPERTY_BUG_COLLECTION);    if (bugCollection != null) {      writeBugCollection(project,bugCollection,monitor);    }  }}  }
class C{  protected IntOption(OptionSet set,String name,String desc,int defaultValue){  super(set,INT_OPTION,name,desc);  this.value=this.defaultValue=defaultValue;}  }
class C{  public StackedAreaRenderer(boolean renderAsPercentages){  super();  this.renderAsPercentages=renderAsPercentages;}  }
class C{  @Override public void onClick(AjaxRequestTarget aTarget){  editor.reset(aTarget);  aTarget.addChildren(getPage(),FeedbackPanel.class);  List<SourceDocument> listOfSourceDocuements=getListOfDocs();  int currentDocumentIndex=listOfSourceDocuements.indexOf(bModel.getDocument());  if (currentDocumentIndex == 0) {    aTarget.appendJavaScript("alert('This is the first document!')");  } else {    bModel.setDocumentName(listOfSourceDocuements.get(currentDocumentIndex - 1).getName());    bModel.setDocument(listOfSourceDocuements.get(currentDocumentIndex - 1));    try {      loadDocumentAction(aTarget);      setCurationSegmentBeginEnd();      update(aTarget);    } catch (    UIMAException e) {      error(ExceptionUtils.getRootCause(e));    }catch (    ClassNotFoundException e) {      error(ExceptionUtils.getRootCause(e));    }catch (    IOException e) {      error(ExceptionUtils.getRootCause(e));    }catch (    BratAnnotationException e) {      aTarget.addChildren(getPage(),FeedbackPanel.class);      error(e.getMessage());    }    finish.setModelObject(bModel);    aTarget.add(finish.setOutputMarkupId(true));    aTarget.add(documentNamePanel);    annotator.bratRenderLater(aTarget);  }}  }
class C{  public static byte[] hash(byte[] data){  return hash(data,0,data.length);}  }
class C{  public boolean hasAlias(){  return !m_columnName.equals(m_alias);}  }
class C{  protected double calculateMultiplier(Instance inst,int index){  double result;  double value;  value=inst.value(m_AttributeIndices[index]);  result=(value - m_Median[index]) / m_IQR[index];  return result;}  }
class C{  public void uninstallKeyboardActions(JComponent c){  SwingUtilities.replaceUIInputMap(c,JComponent.WHEN_IN_FOCUSED_WINDOW,null);  SwingUtilities.replaceUIInputMap(c,JComponent.WHEN_FOCUSED,null);  SwingUtilities.replaceUIActionMap(c,null);}  }
class C{  public String toString(Charset encoding){  StringBuilder out=new StringBuilder();  appendTo(out,encoding);  return out.toString();}  }
class C{  public DERSet(ASN1Encodable[] a){  super(a,true);}  }
class C{  public void findAndInit(Object someObj){  navPanel.findAndInit(someObj);  zoomPanel.findAndInit(someObj);  scaleField.findAndInit(someObj);}  }
class C{  public static void removeDebugger(final AbstractSQLProvider provider,final INaviProject project,final DebuggerTemplate debugger) throws CouldntSaveDataException {  checkArguments(provider,project);  Preconditions.checkNotNull(debugger,"IE00524: Debugger argument can not be null");  Preconditions.checkArgument(debugger.inSameDatabase(provider),"IE00525: Debugger is not part of this database");  final String query=String.format("delete from " + CTableNames.PROJECT_DEBUGGERS_TABLE + " where project_id = %d and debugger_id = %d",project.getConfiguration().getId(),debugger.getId());  try {    provider.getConnection().executeUpdate(query,true);  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }  PostgreSQLHelpers.updateModificationDate(provider.getConnection(),"" + CTableNames.PROJECTS_TABLE + "",project.getConfiguration().getId());}  }
class C{  public CalendarIntervalScheduleBuilder skipDayIfHourDoesNotExist(boolean skipDay){  this.skipDayIfHourDoesNotExist=skipDay;  return this;}  }
class C{  public CoverageTable(String path,String covtype){  this.covtype=covtype;  tablepath=path + "/" + covtype+ "/";  doAntarcticaWorkaround=(tablepath.indexOf("browse") >= 0);  internSchema();  loadIntVDT();  loadCharVDT();  featureTypeInfo=getFeatureTypeInfo();}  }
class C{  public boolean isIncludeInReceiverChannel(){  return includeInReceiverChannel;}  }
class C{  public void writingRequestHeaders(){  if (sentRequestMillis != -1)   throw new IllegalStateException();  sentRequestMillis=System.currentTimeMillis();}  }
class C{  public static void enable(){  active=true;}  }
class C{  private EndlessHelperWrapper(final IProgressThread thread){  m_thread=thread;}  }
class C{  public final void readFully(byte[] b,int off,int len) throws java.io.IOException {  if (len < 0) {    throw new IndexOutOfBoundsException();  }  int n=0;  while (n < len) {    int count=read(b,off + n,len - n);    if (count < 0) {      throw new EOFException();    }    n+=count;  }}  }
class C{  @ExceptionHandler({MalformedJsonException.class}) @ResponseBody @ResponseStatus(HttpStatus.BAD_REQUEST) public String handleException(final RuntimeException e){  return convertErrorAsJson(e.getMessage());}  }
class C{  public void init() throws MessagingException {  passThrough=(getInitParameter("passThrough","true").compareToIgnoreCase("true") == 0);  String targetUrl=getInitParameter("url");  parameterKey=getInitParameter("parameterKey");  parameterValue=getInitParameter("parameterValue");  String m=getInitParameter("MessageKeyName");  if (m != null) {    messageKeyName=m;  }  if (targetUrl == null || targetUrl.equals("")) {    throw new MessagingException("Please configure a targetUrl (\"url\")");  } else {    try {      url=new URL(targetUrl).toExternalForm();    } catch (    MalformedURLException e) {      throw new MessagingException("Unable to contruct URL object from url");    }  }  log("I will attempt to deliver serialised messages to " + targetUrl + " as "+ messageKeyName+ ". "+ (parameterKey == null || parameterKey.length() < 2 ? "I will not add any fields to the post. " : "I will prepend: " + parameterKey + "="+ parameterValue+ ". ")+ (passThrough ? "Messages will pass through." : "Messages will be ghosted."));}  }
class C{  private Component createPanel(final String description,final JComponent component){  final JPanel panel=new JPanel(new GridLayout(1,2));  panel.add(new JLabel(description));  panel.add(component);  return panel;}  }
class C{  public void testConstrCharIntInt(){  char value[]={'-','1','2','3','8','0','.','4','7','3','8','E','-','4','2','3'};  int offset=3;  int len=12;  BigDecimal result=new BigDecimal(value,offset,len);  String res="3.804738E-40";  int resScale=46;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());  try {    new BigDecimal(new char[]{},0,0);    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }}  }
class C{  @Override protected void initComponent(){  super.initComponent();  getComponentForm().registerAnimated(iconAnimation);}  }
class C{  public static void closeCache(){  if (cache != null && !cache.isClosed()) {    cache.close();    cache.getDistributedSystem().disconnect();  }}  }
class C{  public boolean canAcceptConnection(Class<?> listenerClass){  for (int i=0; i < m_inputs.size(); i++) {    BeanInstance input=(BeanInstance)m_inputs.elementAt(i);    if (listenerClass.isInstance(input.getBean())) {      return true;    }  }  return false;}  }
class C{  private static Options createOptions(){  Options options=new Options();  OptionGroup grp=new OptionGroup();  grp.setRequired(true);  Option cfg=new Option(OPTION_CFG,null,true,"path to Spring XML configuration file.");  cfg.setArgName("file");  Option n=new Option(null,OPTION_N,true,"nodes count.");  n.setValueSeparator('=');  n.setType(Integer.class);  grp.addOption(cfg);  grp.addOption(n);  options.addOptionGroup(grp);  return options;}  }
class C{  public String optString(String key){  return this.optString(key,"");}  }
class C{  private TrieNode<V> fetch(String prefix){  TrieNode<V> node=root;  for (int i=0; i < prefix.length(); ) {    TrieEdge<V> edge=node.get(prefix.charAt(i));    if (edge == null)     return null;    String label=edge.getLabel();    int j=match(prefix,i,prefix.length(),label);    assert j != 0 : "Label didn't start with prefix[0].";    if (j != -1)     return null;    i+=label.length();    node=edge.getChild();  }  return node;}  }
class C{  private void checkNode(Node node) throws DOMException {  if (node == null) {    return;  }  if (!(node instanceof IIOMetadataNode)) {    throw new IIODOMException(DOMException.WRONG_DOCUMENT_ERR,"Node not an IIOMetadataNode!");  }}  }
class C{  public boolean isIncluded(String endpoint){  for (int i=0; i < inclusions.size(); i++) {    if (inclusions.get(i).test(endpoint)) {      return true;    }  }  return false;}  }
class C{  public synchronized int nextValue(){  int curValue=value++;  if (curValue == Integer.MAX_VALUE) {    value=1;  }  return curValue;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:11.194 -0500",hash_original_method="983E273AE559F45D4EDE298176308BF7",hash_generated_method="6876FAA0A14C8DDB8A1888D1F6A2F700") protected ConnectionStateTLS(SSLSessionImpl session){  try {    CipherSuite cipherSuite=session.cipherSuite;    hash_size=cipherSuite.getMACLength();    boolean is_exportabe=cipherSuite.isExportable();    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;    int iv_size=cipherSuite.ivSize;    block_size=cipherSuite.getBlockSize();    String algName=cipherSuite.getBulkEncryptionAlgorithm();    String macName=cipherSuite.getHmacName();    if (logger != null) {      logger.println("ConnectionStateTLS.create:");      logger.println("  cipher suite name: " + cipherSuite.getName());      logger.println("  encryption alg name: " + algName);      logger.println("  mac alg name: " + macName);      logger.println("  hash size: " + hash_size);      logger.println("  block size: " + block_size);      logger.println("  IV size:" + iv_size);      logger.println("  key size: " + key_size);    }    byte[] clientRandom=session.clientRandom;    byte[] serverRandom=session.serverRandom;    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];    byte[] seed=new byte[clientRandom.length + serverRandom.length];    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);    PRF.computePRF(key_block,session.master_secret,KEY_EXPANSION_LABEL,seed);    byte[] client_mac_secret=new byte[hash_size];    byte[] server_mac_secret=new byte[hash_size];    byte[] client_key=new byte[key_size];    byte[] server_key=new byte[key_size];    boolean is_client=!session.isServer;    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);    IvParameterSpec clientIV=null;    IvParameterSpec serverIV=null;    if (is_exportabe) {      System.arraycopy(clientRandom,0,seed,0,clientRandom.length);      System.arraycopy(serverRandom,0,seed,clientRandom.length,serverRandom.length);      byte[] final_client_key=new byte[cipherSuite.expandedKeyMaterial];      byte[] final_server_key=new byte[cipherSuite.expandedKeyMaterial];      PRF.computePRF(final_client_key,client_key,CLIENT_WRITE_KEY_LABEL,seed);      PRF.computePRF(final_server_key,server_key,SERVER_WRITE_KEY_LABEL,seed);      client_key=final_client_key;      server_key=final_server_key;      if (block_size != 0) {        byte[] iv_block=new byte[2 * iv_size];        PRF.computePRF(iv_block,null,IV_BLOCK_LABEL,seed);        clientIV=new IvParameterSpec(iv_block,0,iv_size);        serverIV=new IvParameterSpec(iv_block,iv_size,iv_size);      }    } else     if (block_size != 0) {      clientIV=new IvParameterSpec(key_block,2 * (hash_size + key_size),iv_size);      serverIV=new IvParameterSpec(key_block,2 * (hash_size + key_size) + iv_size,iv_size);    }    if (logger != null) {      logger.println("is exportable: " + is_exportabe);      logger.println("master_secret");      logger.print(session.master_secret);      logger.println("client_random");      logger.print(clientRandom);      logger.println("server_random");      logger.print(serverRandom);      logger.println("client_mac_secret");      logger.print(client_mac_secret);      logger.println("server_mac_secret");      logger.print(server_mac_secret);      logger.println("client_key");      logger.print(client_key);      logger.println("server_key");      logger.print(server_key);      if (clientIV == null) {        logger.println("no IV.");      } else {        logger.println("client_iv");        logger.print(clientIV.getIV());        logger.println("server_iv");        logger.print(serverIV.getIV());      }    }    if (algName == null) {      encCipher=new NullCipher();      decCipher=new NullCipher();    } else {      encCipher=Cipher.getInstance(algName);      decCipher=Cipher.getInstance(algName);      if (is_client) {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,algName),clientIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,algName),serverIV);      } else {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,algName),serverIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,algName),clientIV);      }    }    encMac=Mac.getInstance(macName);    decMac=Mac.getInstance(macName);    if (is_client) {      encMac.init(new SecretKeySpec(client_mac_secret,macName));      decMac.init(new SecretKeySpec(server_mac_secret,macName));    } else {      encMac.init(new SecretKeySpec(server_mac_secret,macName));      decMac.init(new SecretKeySpec(client_mac_secret,macName));    }  } catch (  Exception e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during computation of security parameters"));  }}  }
class C{  public void process(Set<MultiKey<EventBean>> newEvents,Set<MultiKey<EventBean>> oldEvents,ExprEvaluatorContext exprEvaluatorContext){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".process Received update, " + "  newData.length==" + ((newEvents == null) ? 0 : newEvents.size()) + "  oldData.length=="+ ((oldEvents == null) ? 0 : oldEvents.size()));  }  boolean isGenerateSynthetic=parent.getStatementResultService().isMakeSynthetic();  boolean isGenerateNatural=parent.getStatementResultService().isMakeNatural();  UniformPair<EventBean[]> newOldEvents=resultSetProcessor.processJoinResult(newEvents,oldEvents,isGenerateSynthetic);  if (!checkAfterCondition(newOldEvents,parent.getStatementContext())) {    return;  }  if (parent.isDistinct() && newOldEvents != null) {    newOldEvents.setFirst(EventBeanUtility.getDistinctByProp(newOldEvents.getFirst(),parent.getEventBeanReader()));    newOldEvents.setSecond(EventBeanUtility.getDistinctByProp(newOldEvents.getSecond(),parent.getEventBeanReader()));  }  if ((!isGenerateSynthetic) && (!isGenerateNatural)) {    if (AuditPath.isAuditEnabled) {      OutputStrategyUtil.indicateEarlyReturn(parent.getStatementContext(),newOldEvents);    }    return;  }  if (newOldEvents == null) {    return;  }  if (childView != null) {    postProcess(false,newOldEvents,childView);  }}  }
class C{  public ECDSASignature(BigInteger r,BigInteger s){  this.r=r;  this.s=s;}  }
class C{  private ValueRange rangeByWeek(TemporalAccessor temporal,TemporalField field){  int dow=localizedDayOfWeek(temporal);  int offset=startOfWeekOffset(temporal.get(field),dow);  ValueRange fieldRange=temporal.range(field);  return ValueRange.of(computeWeek(offset,(int)fieldRange.getMinimum()),computeWeek(offset,(int)fieldRange.getMaximum()));}  }
class C{  public DateTimeFormatterBuilder appendTwoDigitYear(int pivot,boolean lenientParse){  return append0(new TwoDigitYear(DateTimeFieldType.year(),pivot,lenientParse));}  }
class C{  public void flush() throws IOException {  out.flush();}  }
class C{  public CallableStatement putIfNone(CallableStatementCacheKey key,CallableStatement value){  if (!containsKey(key)) {    put(key,value);  }  return value;}  }
class C{  public final static char[] encodeToChar(byte[] arr,boolean lineSeparator){  int len=arr != null ? arr.length : 0;  if (len == 0) {    return new char[0];  }  int evenlen=(len / 3) * 3;  int cnt=((len - 1) / 3 + 1) << 2;  int destLen=cnt + (lineSeparator ? (cnt - 1) / 76 << 1 : 0);  char[] dest=new char[destLen];  for (int s=0, d=0, cc=0; s < evenlen; ) {    int i=(arr[s++] & 0xff) << 16 | (arr[s++] & 0xff) << 8 | (arr[s++] & 0xff);    dest[d++]=CHARS[(i >>> 18) & 0x3f];    dest[d++]=CHARS[(i >>> 12) & 0x3f];    dest[d++]=CHARS[(i >>> 6) & 0x3f];    dest[d++]=CHARS[i & 0x3f];    if (lineSeparator && (++cc == 19) && (d < (destLen - 2))) {      dest[d++]='\r';      dest[d++]='\n';      cc=0;    }  }  int left=len - evenlen;  if (left > 0) {    int i=((arr[evenlen] & 0xff) << 10) | (left == 2 ? ((arr[len - 1] & 0xff) << 2) : 0);    dest[destLen - 4]=CHARS[i >> 12];    dest[destLen - 3]=CHARS[(i >>> 6) & 0x3f];    dest[destLen - 2]=left == 2 ? CHARS[i & 0x3f] : '=';    dest[destLen - 1]='=';  }  return dest;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.881 -0500",hash_original_method="EFA51A9FDBB21A92ADDA18D4726F0F4C",hash_generated_method="C329B553BB6D77E6F880C9B4AA68DD08") static public void runAndWait(Test suite){  TestRunner aTestRunner=new TestRunner();  aTestRunner.doRun(suite,true);}  }
class C{  public void close(){  try {    interrupt();  } catch (  Exception e) {  }  if (datagramConnection != null) {    try {      isClosed=true;      datagramConnection.close();    } catch (    Exception e) {    }    datagramConnection=null;  }}  }
class C{  public static void resetRandom(){  random=new Random(DEFAULT_RANDOM_SEED);}  }
class C{  public void reload(){  reloadChildren();  if (mSkybox != null)   mSkybox.reload();  reloadPlugins();  mReloadPickerInfo=true;}  }
class C{  IgfsIpcHandler(IgfsContext igfsCtx,IgfsIpcEndpointConfiguration endpointCfg,boolean mgmt){  assert igfsCtx != null;  ctx=igfsCtx.kernalContext();  igfs=igfsCtx.igfs();  bufSize=igfsCtx.configuration().getBlockSize() * 2;  int threadCnt=endpointCfg.getThreadCount();  String prefix="igfs-" + igfsCtx.igfs().name() + (mgmt ? "mgmt-" : "")+ "-ipc";  pool=new IgniteThreadPoolExecutor(prefix,igfsCtx.kernalContext().gridName(),threadCnt,threadCnt,Long.MAX_VALUE,new LinkedBlockingQueue<Runnable>());  log=ctx.log(IgfsIpcHandler.class);}  }
class C{  public void updateUI(){  setUI((SliderUI)UIManager.getUI(this));  updateLabelUIs();}  }
class C{  public JBInsets(int top,int left,int bottom,int right){  super(scale(top),scale(left),scale(bottom),scale(right));}  }
class C{  private State buildPatch(TaskState.TaskStage stage,@Nullable Throwable e){  State state=new State();  state.taskState=new TaskState();  state.taskState.stage=stage;  if (null != e) {    state.taskState.failure=Utils.toServiceErrorResponse(e);  }  return state;}  }
class C{  public TerminalSize withRows(int rows){  if (this.rows == rows) {    return this;  }  if (rows == 0 && this.columns == 0) {    return ZERO;  }  return new TerminalSize(this.columns,rows);}  }
class C{  @Override public void acceptDataSet(DataSetEvent e){  m_receivedStopNotification=false;  TestSetEvent tse=new TestSetEvent(this,e.getDataSet());  tse.m_setNumber=1;  tse.m_maxSetNumber=1;  notifyTestSetProduced(tse);}  }
class C{  public void addBlocksDownloadedEventListener(BlocksDownloadedEventListener listener){  addBlocksDownloadedEventListener(Threading.USER_THREAD,listener);}  }
class C{  public void reset(){  for (  WeightingStrategy s : strategies_)   s.reset();}  }
class C{  public static XField createXField(PreorderVisitor visitor){  JavaClass javaClass=visitor.getThisClass();  Field field=visitor.getField();  XField f=createXField(javaClass,field);  return f;}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  super.startElement(uri,localName,qName,attributes);  xmlBaseHandler.startElement();  String xmlBase=attributes.getValue(WellKnownNamespaces.XML,"base");  if (xmlBase != null)   xmlBaseHandler.xmlBaseAttribute(xmlBase);  if (!NVDL_URI.equals(uri) || foreignDepth > 0) {    foreignDepth++;    return;  }  if (ceh.getHadErrorOrFatalError())   return;  if (localName.equals("rules"))   parseRules(attributes); else   if (localName.equals("mode")) {    String parent=(String)nvdlStack.peek();    if ("rules".equals(parent))     parseMode(attributes); else     if ("mode".equals(parent))     parseIncludedMode(attributes); else     parseNestedMode(attributes);  } else   if (localName.equals("namespace"))   parseNamespace(attributes); else   if (localName.equals("anyNamespace"))   parseAnyNamespace(attributes); else   if (localName.equals("validate"))   parseValidate(attributes); else   if (localName.equals("reject"))   parseReject(attributes); else   if (localName.equals("attach"))   parseAttach(attributes); else   if (localName.equals("unwrap"))   parseUnwrap(attributes); else   if (localName.equals("attachPlaceholder"))   parseAttachPlaceholder(attributes); else   if (localName.equals("allow"))   parseAllow(attributes); else   if (localName.equals("context"))   parseContext(attributes); else   if (localName.equals("option"))   parseOption(attributes); else   if (localName.equals("trigger"))   parseTrigger(attributes); else   if (localName.equals("schema"))   error("embedded_schemas"); else   if (localName.equals("cancelNestedActions"))   parseCancelNestedActions(attributes); else   if (localName.equals("message"))   ; else   throw new RuntimeException("unexpected element \"" + localName + "\"");  nvdlStack.push(localName);}  }
class C{  public boolean equals(MenuShortcut s){  return (s != null && (s.getKey() == key) && (s.usesShiftModifier() == usesShift));}  }
class C{  @HLEFunction(nid=0xF79472D7,version=150) public int sceNetAdhocMatchingSendData(@CheckArgument("checkMatchingId") int matchingId,pspNetMacAddress macAddress,int dataLen,TPointer data){  if (log.isTraceEnabled()) {    log.trace(String.format("Send data: %s",Utilities.getMemoryDump(data.getAddress(),dataLen)));  }  return matchingObjects.get(matchingId).send(macAddress,dataLen,data.getAddress());}  }
class C{  protected void requestResult(RequestType type,String url,String result,int responseCode,String error,String encoding){  int length=-1;  if (result != null) {    length=result.length();  }  String encodingText=encoding == null ? "" : ", " + encoding;  LOGGER.info("GOT (" + responseCode + ", "+ length+ encodingText+ "): "+ url+ (error != null ? " [" + error + "]" : ""));  String stream=removeRequest(url);  if (type == RequestType.STREAM) {    streamInfoManager.requestResult(url,result,responseCode,stream);  } else   if (type == RequestType.STREAMS) {    streamInfoManager.requestResultStreams(url,result,responseCode);  } else   if (type == RequestType.EMOTICONS) {    emoticonManager.emoticonsReceived(result,stream);  } else   if (type == RequestType.CHAT_ICONS) {    if (result == null) {      LOGGER.warning("Error requesting stream icons: " + result);      return;    }    List<Usericon> icons=parseChatIcons(result,stream);    if (icons == null) {      LOGGER.warning("Error parsing stream icons: " + result);      return;    } else {      resultListener.receivedUsericons(icons);      requestedChatIcons.add(stream);    }  } else   if (type == RequestType.GLOBAL_BADGES) {    resultListener.receivedUsericons(badgeManager.handleGlobalBadgesResult(result));  } else   if (type == RequestType.ROOM_BADGES) {    resultListener.receivedUsericons(badgeManager.handleRoomBadgesResult(result,stream));  } else   if (type == RequestType.CHANNEL || type == RequestType.CHANNEL_PUT) {    handleChannelInfoResult(type,url,result,responseCode,stream);  } else   if (type == RequestType.GAME_SEARCH) {    if (result == null) {      LOGGER.warning("Error searching for game");      return;    }    Set<String> games=parseGameSearch(result);    if (games == null) {      LOGGER.warning("Error parsing game search result");      return;    }    resultListener.gameSearchResult(games);  } else   if (type == RequestType.FOLLOWERS) {    followerManager.received(responseCode,stream,result);  } else   if (type == RequestType.SUBSCRIBERS) {    subscriberManager.received(responseCode,stream,result);  } else   if (type == RequestType.USERINFO) {    String displayName=parseNameFromUserInfo(result);    resultListener.receivedDisplayName(StringUtil.toLowerCase(stream),displayName);  } else   if (type == RequestType.CHAT_SERVER) {    resultListener.receivedServer(stream,parseServer(result));  } else   if (type == RequestType.CHAT_INFO) {    resultListener.receivedChatInfo(ChatInfo.decode(stream,result));  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.STATE_ROOT__DEF:    setDef((StateSpecification)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public EnclosingMethodAttribute(ConstPool cp,String className){  super(cp,tag);  int ci=cp.addClassInfo(className);  int ni=0;  byte[] bvalue=new byte[4];  bvalue[0]=(byte)(ci >>> 8);  bvalue[1]=(byte)ci;  bvalue[2]=(byte)(ni >>> 8);  bvalue[3]=(byte)ni;  set(bvalue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:00.635 -0500",hash_original_method="E27B65887C9418FA89109125506244DE",hash_generated_method="C0EBA0A96B7D50D39A4319F2C61949A8") public GeocoderParams(Context context,Locale locale){  mLocale=locale;  mPackageName=context.getPackageName();}  }
class C{  private void constructLopsCovariance() throws HopsException, LopsException {  if (_op != OpOp3.COVARIANCE)   throw new HopsException("Unexpected operation: " + _op + ", expecting "+ OpOp3.COVARIANCE);  ExecType et=optFindExecType();  if (et == ExecType.MR) {    CombineTernary combine=CombineTernary.constructCombineLop(CombineTernary.OperationTypes.PreCovWeighted,getInput().get(0).constructLops(),getInput().get(1).constructLops(),getInput().get(2).constructLops(),DataType.MATRIX,getValueType());    combine.getOutputParameters().setDimensions(getInput().get(0).getDim1(),getInput().get(0).getDim2(),getInput().get(0).getRowsInBlock(),getInput().get(0).getColsInBlock(),getInput().get(0).getNnz());    CoVariance cov=new CoVariance(combine,DataType.MATRIX,getValueType(),et);    cov.getOutputParameters().setDimensions(1,1,0,0,-1);    setLineNumbers(cov);    UnaryCP unary1=new UnaryCP(cov,HopsOpOp1LopsUS.get(OpOp1.CAST_AS_SCALAR),getDataType(),getValueType());    unary1.getOutputParameters().setDimensions(0,0,0,0,-1);    setLineNumbers(unary1);    setLops(unary1);  } else {    CoVariance cov=new CoVariance(getInput().get(0).constructLops(),getInput().get(1).constructLops(),getInput().get(2).constructLops(),getDataType(),getValueType(),et);    cov.getOutputParameters().setDimensions(0,0,0,0,-1);    setLineNumbers(cov);    setLops(cov);  }}  }
class C{  public Modulo3Equation add(final int variable){  return add(variable,1);}  }
class C{  @LogMessageDoc(level="WARN",message="Module {module} not found or loaded. " + "Not adding configuration option {key} = {value}",explanation="Ignoring a configuration parameter for a " + "module that is not loaded.") protected void parseConfigParameters(Properties prop){  if (prop == null)   return;  Enumeration<?> e=prop.propertyNames();  while (e.hasMoreElements()) {    String key=(String)e.nextElement();    if (key.equals(FLOODLIGHT_MODULES_KEY)) {      continue;    }    String configValue=null;    int lastPeriod=key.lastIndexOf(".");    String moduleName=key.substring(0,lastPeriod);    String configKey=key.substring(lastPeriod + 1);    String systemKey=System.getProperty(key);    if (systemKey != null) {      configValue=systemKey;    } else {      configValue=prop.getProperty(key);    }    IFloodlightModule mod=moduleNameMap.get(moduleName);    if (mod == null) {      logger.warn("Module {} not found or loaded. " + "Not adding configuration option {} = {}",new Object[]{moduleName,configKey,configValue});    } else {      floodlightModuleContext.addConfigParam(mod,configKey,configValue);    }  }}  }
class C{  private ResultPoint findCornerFromCenter(int centerX,int deltaX,int left,int right,int centerY,int deltaY,int top,int bottom,int maxWhiteRun) throws NotFoundException {  int[] lastRange=null;  for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {    int[] range;    if (deltaX == 0) {      range=blackWhiteRange(y,maxWhiteRun,left,right,true);    } else {      range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);    }    if (range == null) {      if (lastRange == null) {        throw NotFoundException.getNotFoundInstance();      }      if (deltaX == 0) {        int lastY=y - deltaY;        if (lastRange[0] < centerX) {          if (lastRange[1] > centerX) {            return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);          }          return new ResultPoint(lastRange[0],lastY);        } else {          return new ResultPoint(lastRange[1],lastY);        }      } else {        int lastX=x - deltaX;        if (lastRange[0] < centerY) {          if (lastRange[1] > centerY) {            return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);          }          return new ResultPoint(lastX,lastRange[0]);        } else {          return new ResultPoint(lastX,lastRange[1]);        }      }    }    lastRange=range;  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  public static Sampler CLAMP_NEAREST(RenderScript rs){  if (rs.mSampler_CLAMP_NEAREST == null) {    Builder b=new Builder(rs);    b.setMinification(Value.NEAREST);    b.setMagnification(Value.NEAREST);    b.setWrapS(Value.CLAMP);    b.setWrapT(Value.CLAMP);    rs.mSampler_CLAMP_NEAREST=b.create();  }  return rs.mSampler_CLAMP_NEAREST;}  }
class C{  public void verifyAPICalls(){  if (!apiCalled) {    throw new RuntimeException("MonitorAgent expected API calls");  }}  }
class C{  public static String buildServicePath(Class<? extends Service> klass){  return klass.getName().replace('.','/');}  }
class C{  private void applyLocalSearch(TestSuiteChromosome suite,LocalSearchObjective<TestSuiteChromosome> objective){  final LocalSearchSuiteType localSearchType;  localSearchType=chooseLocalSearchSuiteType();  List<TestChromosome> originalTests=new ArrayList<TestChromosome>(suite.getTestChromosomes());  for (  final TestChromosome test : originalTests) {    if (test.hasLocalSearchBeenApplied()) {      TestCaseLocalSearch.randomizePrimitives(test.getTestCase());      updateFitness(suite,objective.getFitnessFunctions());    }    if (LocalSearchBudget.getInstance().isFinished()) {      logger.debug("Local search budget used up: " + Properties.LOCAL_SEARCH_BUDGET_TYPE);      break;    }    logger.debug("Local search budget not yet used up");    final double tossCoin=Randomness.nextDouble();    final boolean shouldApplyDSE=localSearchType == LocalSearchSuiteType.ALWAYS_DSE || (localSearchType == LocalSearchSuiteType.DSE_AND_AVM && tossCoin <= Properties.DSE_PROBABILITY);    TestChromosome clonedTest=(TestChromosome)test.clone();    suite.addTest(clonedTest);    final int lastIndex=suite.size() - 1;    final boolean improved;    if (shouldApplyDSE) {      improved=applyDSE(suite,lastIndex,clonedTest,objective);    } else {      improved=applyAVM(suite,lastIndex,clonedTest,objective);    }    if (improved) {      updateFitness(suite,objective.getFitnessFunctions());    } else {      suite.deleteTest(clonedTest);    }    test.setLocalSearchApplied(true);  }}  }
class C{  public Int3D(final Int2D p){  x=p.x;  y=p.y;  z=0;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Geo[] computeCorridor(Geo[] path,double radius,double err,boolean capp){  if (path == null || radius <= 0.0) {    return new Geo[]{};  }  int pl=path.length;  if (pl < 2)   return null;  ArrayList<Geo> right=new ArrayList<Geo>((int)(pl * 1.5));  ArrayList<Geo> left=new ArrayList<Geo>((int)(pl * 1.5));  Geo g0=null;  Geo n0=null;  Geo l0=null;  Geo r0=null;  Geo g1=path[0];  for (int i=1; i < pl; i++) {    Geo g2=path[i];    Geo n1=g1.crossNormalize(g2);    n1=n1.scale(radius);    Geo r1b=g1.add(n1);    Geo l1b=g1.subtract(n1);    if (n0 == null || g0 == null) {      if (capp && err > 0) {        Geo[] arc=approximateArc(g1,l1b,r1b,err);        for (int j=arc.length - 1; j >= 0; j--) {          right.add(arc[j]);        }      } else {        right.add(l1b);        left.add(r1b);      }      l0=l1b;      r0=r1b;    } else {      Geo r1a=g1.add(n0);      Geo l1a=g1.subtract(n0);      double handed=g0.cross(g1).dot(g2);      if (handed > 0) {        if (err > 0) {          Geo[] arc=approximateArc(g1,l1b,l1a,err);          for (int j=arc.length - 1; j >= 0; j--) {            right.add(arc[j]);          }        } else {          right.add(l1a);          right.add(l1b);        }        l0=l1b;        Geo ip=Intersection.segmentsIntersect(r0,r1a,r1b,g2.add(n1));        if (ip != null) {          left.add(ip);        } else {          left.add(r1a);          left.add(r1b);        }        r0=ip;      } else {        Geo ip=Intersection.segmentsIntersect(l0,l1a,l1b,g2.subtract(n1));        if (ip != null) {          right.add(ip);        } else {          right.add(l1a);          right.add(l1b);        }        l0=ip;        if (err > 0) {          Geo[] arc=approximateArc(g1,r1a,r1b,err);          for (int j=0; j < arc.length; j++) {            left.add(arc[j]);          }        } else {          left.add(r1a);          left.add(r1b);        }        r0=r1b;      }    }    g0=g1;    n0=n1;    g1=g2;  }  Geo rn=g1.subtract(n0);  Geo ln=g1.add(n0);  if (capp && err > 0) {    Geo[] arc=approximateArc(g1,ln,rn,err);    for (int j=arc.length - 1; j >= 0; j--) {      right.add(arc[j]);    }  } else {    right.add(rn);    left.add(ln);  }  int ll=right.size();  int rl=left.size();  Geo[] result=new Geo[ll + rl];  for (int i=0; i < ll; i++) {    result[i]=(Geo)right.get(i);  }  int j=ll;  for (int i=rl - 1; i >= 0; i--) {    result[j++]=(Geo)left.get(i);  }  return result;}  }
class C{  public void testloadPasswordsAsTungstenProperties() throws ConfigurationException {  PasswordManager pwd=new PasswordManager("sample.security.properties");  TungstenProperties passwdProps=pwd.loadPasswordsAsTungstenProperties();  assertEquals(true,passwdProps.size() != 0);  String goodPassword=passwdProps.get("tungsten");  assertNotNull(goodPassword);  AuthenticationInfo authInfo=pwd.getAuthenticationInfo();  authInfo.setPasswordFileLocation(authInfo.getPasswordFileLocation() + "_DOES_NOT_EXIST");  try {    passwdProps=pwd.loadPasswordsAsTungstenProperties();    assertTrue(false);  } catch (  ServerRuntimeException e) {    assertTrue(true);  }}  }
class C{  public Exponential(double lambda,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(lambda);}  }
class C{  public void testPBEKeySpec3(){  char[] password=new char[]{'1','2','3','4','5'};  byte[] salt=new byte[]{1,2,3,4,5};  int iterationCount=10;  try {    PBEKeySpec pbeks=new PBEKeySpec(null,salt,iterationCount);    assertTrue("An empty char[] should be used in case of null input " + "char array.",pbeks.getPassword().length == 0);  } catch (  IllegalArgumentException e) {    fail("Unexpected IllegalArgumentException was thrown.");  }catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }  try {    new PBEKeySpec(password,null,iterationCount);    fail("A NullPointerException should be was thrown " + "in the case of null salt.");  } catch (  IllegalArgumentException e) {    fail("Unexpected IllegalArgumentException was thrown.");  }catch (  NullPointerException e) {  }  try {    new PBEKeySpec(password,new byte[0],iterationCount);    fail("An IllegalArgumentException should be thrown " + "in the case of empty salt.");  } catch (  IllegalArgumentException e) {  }  try {    new PBEKeySpec(password,salt,-1);    fail("An IllegalArgumentException should be thrown " + "in the case of negative iterationCount.");  } catch (  IllegalArgumentException e) {  }  try {    new PBEKeySpec(password,salt,0);    fail("An IllegalArgumentException should be thrown " + "in the case of zero iterationCount.");  } catch (  IllegalArgumentException e) {  }  PBEKeySpec pbeks=new PBEKeySpec(password,salt,iterationCount);  password[0]++;  assertFalse("The change of password specified in the constructor " + "should not cause the change of internal array.",password[0] == pbeks.getPassword()[0]);  salt[0]++;  assertFalse("The change of salt specified in the constructor " + " should not cause the change of internal array.",salt[0] == pbeks.getSalt()[0]);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static void main(String... args){  check(new String(encode(new byte[]{})),"");  check(new String(encode("A".getBytes())),"QQ==");  check(new String(encode("AB".getBytes())),"QUI=");  check(new String(encode("ABC".getBytes())),"QUJD");  check(new String(encode("ABCD".getBytes())),"QUJDRA==");  check(new String(decode(new byte[]{})),"");  check(new String(decode("QQ==".getBytes())),"A");  check(new String(decode("QUI=".getBytes())),"AB");  check(new String(decode("QUJD".getBytes())),"ABC");  check(new String(decode("QUJDRA==".getBytes())),"ABCD");  int len=10000;  test(false,len);  test(true,len);  test(false,len);  test(true,len);}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + ro+ ","+ pk+ ")";}  }
class C{  public final static int caculateInSampleSize(BitmapFactory.Options options,int rqsW,int rqsH){  final int height=options.outHeight;  final int width=options.outWidth;  int inSampleSize=1;  if (rqsW == 0 || rqsH == 0)   return 1;  if (height > rqsH || width > rqsW) {    final int heightRatio=Math.round((float)height / (float)rqsH);    final int widthRatio=Math.round((float)width / (float)rqsW);    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;  }  return inSampleSize;}  }
class C{  public void callAsync(JSObject func,JSObject self,Object[] params,Callback callback){  callAsync(func.toJSPointer(),self,params,callback);}  }
class C{  public TestMonitoringFilterInit(){  super();  Utils.initialize();}  }
class C{  public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){  return super.viewToModel(fx,fy,adjustAllocation(a),bias);}  }
class C{  public GuacamoleClientException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void reset(){  i=0;  dirty=false;}  }
class C{  public void writeUBits(int numBits,long value) throws IOException {  if (numBits == 0) {    return;  }  if (bitPos == 0) {    bitPos=8;  }  int bitNum=numBits;  while (bitNum > 0) {    while (bitPos > 0 && bitNum > 0) {      if (getBit(bitNum,value)) {        bitBuf=setBit(bitPos,bitBuf);      }      bitNum--;      bitPos--;    }    if (bitPos == 0) {      writeUI8(bitBuf);      bitBuf=0;      if (bitNum > 0) {        bitPos=8;      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementsbytagnamens02.class,args);}  }
class C{  public ContextHandlerCollection createContexts(File temporaryDirectory,File sessionStoreDirectory) throws IOException {  final ExposedShutdownServletContextHandler htmlJsonContext=new ExposedShutdownServletContextHandler(ServletContextHandler.SESSIONS);  if (sessionStoreDirectory != null) {    sessionManager=((ExposedShutdownHashSessionManager)htmlJsonContext.getSessionHandler().getSessionManager());    sessionManager.setStoreDirectory(sessionStoreDirectory);    sessionManager.setSavePeriod(30);  }  htmlJsonContext.setContextPath("/");  final ServletHolder holder=new ServletHolder(this);  holder.getRegistration().setMultipartConfig(new MultipartConfigElement(temporaryDirectory.getPath()));  htmlJsonContext.addServlet(holder,"/");  final URL location=Servlet.class.getProtectionDomain().getCodeSource().getLocation();  final File installRootDirectory=new File(location.getFile());  isInJar=getClassResourceName().startsWith("jar:");  int dynamicContexExpiresInSeconds=2 * 60;  final ContextHandler cssContextHandler=createContextHandler("css",isInJar,installRootDirectory,dynamicContexExpiresInSeconds);  final ContextHandler jsContextHandler=createContextHandler("js",isInJar,installRootDirectory,dynamicContexExpiresInSeconds);  final ContextHandler imagesContextHandler=createContextHandler("images",isInJar,installRootDirectory,3600);  helpDirectoryResource=getDirectoryResource("doc",isInJar,installRootDirectory);  final ContextHandlerCollection contextHandlers=new ContextHandlerCollection();  contextHandlers.setHandlers(new Handler[]{imagesContextHandler,jsContextHandler,cssContextHandler,htmlJsonContext});  return contextHandlers;}  }
class C{  public void sendUdpMessage(RawMessage udpMessage,TransportAddress sendTo,TransportAddress sendThrough) throws StunException {  try {    getNetAccessManager().sendMessage(udpMessage.getBytes(),sendThrough,sendTo);  } catch (  IllegalArgumentException iaex) {    throw new StunException(StunException.ILLEGAL_ARGUMENT,"Failed to send STUN indication: " + udpMessage,iaex);  }catch (  IOException ioex) {    throw new StunException(StunException.NETWORK_ERROR,"Failed to send STUN indication: " + udpMessage,ioex);  }}  }
class C{  private void readTrailers() throws IOException {  this.exhaustInputStream();}  }
class C{  public void test_Provider_Properties() throws Exception {  Provider[] providers=Security.getProviders();  for (  Provider provider : providers) {    assertEquals(provider.getName(),provider.get("Provider.id name"));    assertEquals(String.valueOf(provider.getVersion()),provider.get("Provider.id version"));    assertEquals(provider.getInfo(),provider.get("Provider.id info"));    assertEquals(provider.getClass().getName(),provider.get("Provider.id className"));    Map<String,String> aliases=new HashMap<String,String>();    Map<String,String> implementations=new HashMap<String,String>();    for (    Entry<Object,Object> entry : provider.entrySet()) {      Object k=entry.getKey();      Object v=entry.getValue();      assertEquals(String.class,k.getClass());      assertEquals(String.class,v.getClass());      String key=(String)k;      String value=(String)v;      if (key.startsWith("Provider.id ")) {        continue;      }      if (key.indexOf(' ') != -1) {        continue;      }      Matcher m=alias.matcher(key);      if (m.find()) {        String type=m.group(1);        aliases.put(key,type + "." + value);      } else {        implementations.put(key,value);      }    }    for (    Entry<String,String> entry : implementations.entrySet()) {      String typeAndAlgorithm=entry.getKey();      String className=entry.getValue();      try {        assertNotNull(Class.forName(className,true,provider.getClass().getClassLoader()));      } catch (      ClassNotFoundException e) {        if (!className.equals("sun.security.pkcs11.P11MAC")) {          fail("Could not find class " + className + " for "+ typeAndAlgorithm);        }      }    }    for (    Entry<String,String> entry : aliases.entrySet()) {      String alias=entry.getKey();      String actual=entry.getValue();      assertTrue("Could not find implementation " + actual + " for alias "+ alias,implementations.containsKey(actual));    }  }}  }
class C{  private TaskSeriesCollection createCollection3(){  Task sub1=new Task("Sub1",new Date(11),new Date(111));  Task sub2=new Task("Sub2",new Date(22),new Date(222));  Task sub3=new Task("Sub3",new Date(33),new Date(333));  Task sub4=new Task("Sub4",new Date(44),new Date(444));  Task sub5=new Task("Sub5",new Date(55),new Date(555));  Task sub6=new Task("Sub6",new Date(66),new Date(666));  sub1.setPercentComplete(0.111);  sub2.setPercentComplete(0.222);  sub3.setPercentComplete(0.333);  sub4.setPercentComplete(0.444);  sub5.setPercentComplete(0.555);  sub6.setPercentComplete(0.666);  TaskSeries seriesA=new TaskSeries("Series A");  Task taskA1=new Task("Task 1",new SimpleTimePeriod(new Date(100),new Date(200)));  taskA1.setPercentComplete(0.1);  taskA1.addSubtask(sub1);  Task taskA2=new Task("Task 2",new SimpleTimePeriod(new Date(220),new Date(350)));  taskA2.setPercentComplete(0.2);  taskA2.addSubtask(sub2);  taskA2.addSubtask(sub3);  seriesA.add(taskA1);  seriesA.add(taskA2);  TaskSeries seriesB=new TaskSeries("Series B");  Task taskB2=new Task("Task 2",new SimpleTimePeriod(new Date(2220),new Date(3350)));  taskB2.setPercentComplete(0.3);  taskB2.addSubtask(sub4);  taskB2.addSubtask(sub5);  taskB2.addSubtask(sub6);  seriesB.add(taskB2);  TaskSeriesCollection tsc=new TaskSeriesCollection();  tsc.add(seriesA);  tsc.add(seriesB);  return tsc;}  }
class C{  public JColorChooser(){  this(Color.white);}  }
class C{  public static long sumDigits(long n){  int sum=0;  while (n > 0) {    sum+=n % 10;    n/=10;  }  return sum;}  }
class C{  @SuppressWarnings("deprecation") public static void activateApp(Context context,String applicationId){  if (context == null || applicationId == null) {    throw new IllegalArgumentException("Both context and applicationId must be non-null");  }  Settings.publishInstallAsync(context,applicationId);  AppEventsLogger logger=new AppEventsLogger(context,applicationId,null);  logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP);}  }
class C{  public boolean isNonExclusive(String variable){  boolean nonExclusive=false;  for (  BasicEffect e : subeffects) {    if (e.getVariable().equals(variable)) {      if (!e.isExclusive()) {        nonExclusive=true;      } else       if (e.getValue().length() > 0 && !e.isNegated()) {        return false;      }    }  }  return nonExclusive;}  }
class C{  @Override public void onMissing(Detector.Detections<T> detectionResults){  mOverlay.remove(mGraphic);}  }
class C{  public static boolean mprotect(Address address,Extent size,int prot){  if (VM.VerifyAssertions) {    VM._assert(isPageAligned(address) && isPageMultiple(size));  }  return SysCall.sysCall.sysMProtect(address,size,prot) == 0;}  }
class C{  public boolean isRed2Yellow(){  return red2Yellow;}  }
class C{  public void addToActionMap(JComponent component,int condition){  addToActionMap(component,null,condition);}  }
class C{  public Bindings add(String property,JTextArea textArea){  registerPropertyChangeListener(textArea);  return add(new JTextAreaBinding(property,textArea));}  }
class C{  public SWTPlotEditor(final Composite parent,final int style,final Plot plot){  super(parent,style);  final FillLayout layout=new FillLayout();  layout.marginHeight=layout.marginWidth=4;  setLayout(layout);  final Group plotType=new Group(this,SWT.NONE);  final FillLayout plotTypeLayout=new FillLayout();  plotTypeLayout.marginHeight=plotTypeLayout.marginWidth=4;  plotType.setLayout(plotTypeLayout);  plotType.setText(plot.getPlotType() + ":");  final TabFolder tabs=new TabFolder(plotType,SWT.NONE);  final TabItem item1=new TabItem(tabs,SWT.NONE);  item1.setText("Domain Axis");  Axis domainAxis=null;  if (plot instanceof CategoryPlot) {    domainAxis=((CategoryPlot)plot).getDomainAxis();  } else   if (plot instanceof XYPlot) {    domainAxis=((XYPlot)plot).getDomainAxis();  }  this.domainAxisPropertyPanel=SWTAxisEditor.getInstance(tabs,SWT.NONE,domainAxis);  item1.setControl(this.domainAxisPropertyPanel);  final TabItem item2=new TabItem(tabs,SWT.NONE);  item2.setText("Range Axis");  Axis rangeAxis=null;  if (plot instanceof CategoryPlot) {    rangeAxis=((CategoryPlot)plot).getRangeAxis();  } else   if (plot instanceof XYPlot) {    rangeAxis=((XYPlot)plot).getRangeAxis();  }  this.rangeAxisPropertyPanel=SWTAxisEditor.getInstance(tabs,SWT.NONE,rangeAxis);  item2.setControl(this.rangeAxisPropertyPanel);  final TabItem item3=new TabItem(tabs,SWT.NONE);  item3.setText("Appearance");  this.plotAppearance=new SWTPlotAppearanceEditor(tabs,SWT.NONE,plot);  item3.setControl(this.plotAppearance);}  }
class C{  public AtomicLongArray(long[] array){  this.array=array.clone();}  }
class C{  @Override public Value sample(){  return this.value;}  }
class C{  private void hideMenu(){  MenuSelectionManager menuSelectionManager=MenuSelectionManager.defaultManager();  menuSelectionManager.clearSelectedPath();}  }
class C{  private Map<IAccessRuleParticipant,IAccessRule[][]> collectRulesByParticipant(IAccessRuleParticipant[] participants,IVMInstallType vm,LibraryLocation[] libraries,IJavaProject project){  Map<IAccessRuleParticipant,IAccessRule[][]> map=new HashMap<IAccessRuleParticipant,IAccessRule[][]>();  for (int i=0; i < participants.length; i++) {    map.put(participants[i],participants[i].getAccessRules(this,vm,libraries,project));  }  return map;}  }
class C{  public static void save(Properties properties,MetalTheme theme){  log.config(CompiereColor.getDefaultBackground().toString());  properties.setProperty(P_Primary1,getColorAsString(theme.getPrimaryControlDarkShadow()));  properties.setProperty(P_Primary2,getColorAsString(theme.getPrimaryControlShadow()));  properties.setProperty(P_Primary3,getColorAsString(theme.getPrimaryControl()));  properties.setProperty(P_Secondary1,getColorAsString(theme.getControlDarkShadow()));  properties.setProperty(P_Secondary2,getColorAsString(theme.getControlShadow()));  properties.setProperty(P_Secondary3,getColorAsString(theme.getControl()));  properties.setProperty(P_Txt_OK,getColorAsString(theme.getUserTextColor()));  if (theme instanceof ExtendedTheme) {    ExtendedTheme e=(ExtendedTheme)theme;    properties.setProperty(P_Error,getColorAsString(e.getErrorBackground()));    properties.setProperty(P_Txt_Error,getColorAsString(e.getErrorForeground()));    properties.setProperty(P_Mandatory,getColorAsString(e.getMandatoryBackground()));    properties.setProperty(P_Inactive,getColorAsString(e.getInactiveBackground()));    properties.setProperty(P_White,getColorAsString(e.getWhite()));    properties.setProperty(P_Black,getColorAsString(e.getBlack()));    properties.setProperty(P_Info,getColorAsString(e.getInfoBackground()));  } else {    properties.setProperty(P_White,getColorAsString(Color.white));    properties.setProperty(P_Black,getColorAsString(Color.black));    properties.setProperty(P_Error,getColorAsString(ExtendedTheme.DEFAULT_ERROR_BG));    properties.setProperty(P_Txt_Error,getColorAsString(ExtendedTheme.DEFAULT_ERROR_FG));    properties.setProperty(P_Mandatory,getColorAsString(ExtendedTheme.DEFAULT_MANDATORY_BG));    properties.setProperty(P_Inactive,getColorAsString(ExtendedTheme.DEFAULT_INACTIVE_BG));    properties.setProperty(P_Info,getColorAsString(theme.getPrimaryControl()));  }  properties.setProperty(P_Control,(theme.getControlTextFont()).toString());  properties.setProperty(P_System,(theme.getSystemTextFont()).toString());  properties.setProperty(P_User,(theme.getUserTextFont()).toString());  properties.setProperty(P_Small,(theme.getSubTextFont()).toString());  properties.setProperty(P_Window,(theme.getWindowTitleFont()).toString());  properties.setProperty(P_Menu,(theme.getMenuTextFont()).toString());}  }
class C{  public void exit(){  cancel();  final int opacityDuration=(int)(1000 / WAVE_OPACITY_DECAY_VELOCITY + 0.5f);  final float outerSizeInfluence=constrain((mOuterRadius - WAVE_OUTER_SIZE_INFLUENCE_MIN * mDensity) / (WAVE_OUTER_SIZE_INFLUENCE_MAX * mDensity),0,1);  final float outerOpacityVelocity=Ripple.lerp(WAVE_OUTER_OPACITY_EXIT_VELOCITY_MIN,WAVE_OUTER_OPACITY_EXIT_VELOCITY_MAX,outerSizeInfluence);  final int inflectionDuration=Math.max(0,(int)(1000 * (1 - mOuterOpacity) / (WAVE_OPACITY_DECAY_VELOCITY + outerOpacityVelocity) + 0.5f));  final int inflectionOpacity=(int)(mColorAlpha * (mOuterOpacity + inflectionDuration * outerOpacityVelocity * outerSizeInfluence / 1000) + 0.5f);  exitSoftware(opacityDuration,inflectionDuration,inflectionOpacity);}  }
class C{  public DeleteSnapshotRequest(String repository){  this.repository=repository;}  }
class C{  public void testSplitSeq() throws Exception {  MultiPassIndexSplitter splitter=new MultiPassIndexSplitter();  Directory[] dirs=new Directory[]{newDirectory(),newDirectory(),newDirectory()};  splitter.split(input,dirs,true);  IndexReader ir;  ir=DirectoryReader.open(dirs[0]);  assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);  Document doc=ir.document(0);  assertEquals("0",doc.get("id"));  int start=ir.numDocs();  ir.close();  ir=DirectoryReader.open(dirs[1]);  assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);  doc=ir.document(0);  assertEquals(start + "",doc.get("id"));  start+=ir.numDocs();  ir.close();  ir=DirectoryReader.open(dirs[2]);  assertTrue(ir.numDocs() - NUM_DOCS / 3 <= 1);  doc=ir.document(0);  assertEquals(start + "",doc.get("id"));  TermsEnum te=MultiFields.getTerms(ir,"id").iterator();  Term t=new Term("id",(NUM_DOCS - 1) + "");  assertEquals(TermsEnum.SeekStatus.NOT_FOUND,te.seekCeil(new BytesRef(t.text())));  assertNotSame(t.text(),te.term().utf8ToString());  ir.close();  for (  Directory d : dirs)   d.close();}  }
class C{  public double distanceSq(final MutableDouble2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return (dx * dx + dy * dy);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:40.062 -0500",hash_original_method="EE241D81DC808707D5F785FD2863CDE3",hash_generated_method="EE241D81DC808707D5F785FD2863CDE3") boolean isDatabaseObjFree(SQLiteDatabase db){  return mPool.get(db.mConnectionNum - 1).isFree();}  }
class C{  public void recursivelyZipFiles(File inFolder,File outZipFile) throws IOException {  recursivelyZipFiles(null,false,inFolder,outZipFile,false);}  }
class C{  public final boolean isPublic(){  return Modifier.isPublic(getModifiers());}  }
class C{  private GCActivity gcActivity(int series,int item){  assert 0 <= series && series < checkpoint.gcTraceSize();  assert 0 <= item && item < checkpoint.size(series);  return gcActivitySet(series).get(item);}  }
class C{  static FactoryBean createIt(@JsonProperty("mixed") double xyz){  return null;}  }
class C{  public static void main(String[] args){  runCLIApplication(SimpleTextLoader.class,args);}  }
class C{  public static void xmlAttributeInexistent(String path,String attributeName,Class<?> aClass){  throw new XmlMappingAttributeDoesNotExistException(MSG.INSTANCE.message(xmlMappingAttributeDoesNotExistException2,attributeName,aClass.getSimpleName(),path));}  }
class C{  public final void testGetAffineX02(){  assertNull(ECPoint.POINT_INFINITY.getAffineX());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementsbytagnamens04.class,args);}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 3:    throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 2:  throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  @Override void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  if (length != DATA_LENGTH) {    throw new StunException("length invalid: " + length);  }  connectionIdValue=attributeValue[offset] & 0xff;  connectionIdValue=connectionIdValue << 8 | (attributeValue[offset + 1] & 0xff);  connectionIdValue=connectionIdValue << 8 | (attributeValue[offset + 2] & 0xff);  connectionIdValue=connectionIdValue << 8 | (attributeValue[offset + 3] & 0xff);}  }
class C{  public final void removeCallbacks(Runnable r,Object token){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable,token);  }}  }
class C{  public double rate(TimeUnit rateUnit){  return rate * (double)rateUnit.toNanos(1);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"cli");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a cli instruction (invalid number of operand)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  instructions.add(ReilHelpers.createStr(baseOffset,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.INTERRUPT_FLAG));}  }
class C{  @org.junit.Test public void testCompoundWords(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("My name is Joe");  String response=waitForOutput(output);  checkResponse(response,"Pleased to meet you Joe.");  text.input("My name is Joe Loves");  response=waitForOutput(output);  checkResponse(response,"Pleased to meet you Joe Loves.");  text.input("Joe Loves is tall");  response=waitForOutput(output);  assertKnown(response);  assertKeyword(response,"Joe Loves is tall");  text.input("Joe Loves is blue. Is Joe Loves blue?");  response=waitForOutput(output);  assertTrue(response);  assertKeyword(response,"Joe Loves is blue");  text.input("Joe Loves me");  response=waitForOutput(output);  assertKnown(response);  assertKeyword(response,"Joe Loves you");  bot.shutdown();}  }
class C{  private void readObject(){}  }
class C{  private void checkDestination(InetAddress destAddr,int dstPort){  if (dstPort < 0 || dstPort > 65535) {    throw new IllegalArgumentException("Port out of range: " + dstPort);  }}  }
class C{  static void testFileTypeMethods(Path tmpdir) throws IOException {  assertTrue(!isRegularFile(tmpdir));  assertTrue(!isRegularFile(tmpdir,NOFOLLOW_LINKS));  assertTrue(isDirectory(tmpdir));  assertTrue(isDirectory(tmpdir,NOFOLLOW_LINKS));  assertTrue(!isSymbolicLink(tmpdir));  Path file=createFile(tmpdir.resolve("foo"));  try {    assertTrue(isRegularFile(file));    assertTrue(isRegularFile(file,NOFOLLOW_LINKS));    assertTrue(!isDirectory(file));    assertTrue(!isDirectory(file,NOFOLLOW_LINKS));    assertTrue(!isSymbolicLink(file));    if (TestUtil.supportsLinks(tmpdir)) {      Path link=tmpdir.resolve("link");      createSymbolicLink(link,tmpdir);      try {        assertTrue(!isRegularFile(link));        assertTrue(!isRegularFile(link,NOFOLLOW_LINKS));        assertTrue(isDirectory(link));        assertTrue(!isDirectory(link,NOFOLLOW_LINKS));        assertTrue(isSymbolicLink(link));      }  finally {        delete(link);      }      createSymbolicLink(link,file);      try {        assertTrue(isRegularFile(link));        assertTrue(!isRegularFile(link,NOFOLLOW_LINKS));        assertTrue(!isDirectory(link));        assertTrue(!isDirectory(link,NOFOLLOW_LINKS));        assertTrue(isSymbolicLink(link));      }  finally {        delete(link);      }      createLink(link,file);      try {        assertTrue(isRegularFile(link));        assertTrue(isRegularFile(link,NOFOLLOW_LINKS));        assertTrue(!isDirectory(link));        assertTrue(!isDirectory(link,NOFOLLOW_LINKS));        assertTrue(!isSymbolicLink(link));      }  finally {        delete(link);      }    }  }  finally {    delete(file);  }}  }
class C{  public AccountId(final Deserializer deserializer){  this.address=Address.readFrom(deserializer,"account");  this.checkValidity();}  }
class C{  @PostConstruct void onPostConstruct(){  for (  MessageMapper<T> mapper : mappers) {    mappersMap.put(mapper.forType(),mapper);  }}  }
class C{  private boolean dimensionIsRelevant(int dimension,Relation<V> relation,DBIDs points){  double min=Double.POSITIVE_INFINITY, max=Double.NEGATIVE_INFINITY;  for (DBIDIter iter=points.iter(); iter.valid(); iter.advance()) {    double xV=relation.get(iter).doubleValue(dimension);    min=(xV < min) ? xV : min;    max=(xV > max) ? xV : max;    if (max - min > w) {      return false;    }  }  return true;}  }
class C{  public static TypeEvalContext codeAnalysis(@NotNull final Project project,@Nullable final PsiFile origin){  return getContextFromCache(project,new TypeEvalContext(false,false,false,origin));}  }
class C{  public String runFreshJenkinsContainer(DockerImagePullStrategy pullStrategy,boolean forceRefresh) throws IOException, SettingsBuildingException, InterruptedException {  LOG.debug("Entering run fresh jenkins container.");  pullImage(pullStrategy,JENKINS_DEFAULT.getDockerImageName());  final Map<String,String> labels=new HashMap<>();  labels.put("test.displayName",description.getDisplayName());  LOG.debug("Removing existed container before");  try {    final List<Container> containers=getDockerCli().listContainersCmd().withShowAll(true).exec();    for (    Container c : containers) {      if (c.getLabels().equals(labels)) {        LOG.debug("Removing {}, for labels: '{}'",c,labels);        getDockerCli().removeContainerCmd(c.getId()).withForce(true).exec();        break;      }    }  } catch (  NotFoundException ex) {    LOG.debug("Container wasn't found, that's ok");  }  LOG.debug("Recreating data container without data-image doesn't make sense, so reuse boolean.");  String dataContainerId=getDataContainerId(forceRefresh);  final String id=getDockerCli().createContainerCmd(JENKINS_DEFAULT.getDockerImageName()).withEnv(CONTAINER_JAVA_OPTS).withExposedPorts(new ExposedPort(JENKINS_DEFAULT.tcpPort)).withPortSpecs(String.format("%d/tcp",JENKINS_DEFAULT.tcpPort)).withPortBindings(PortBinding.parse("0.0.0.0:48000:48000")).withVolumesFrom(new VolumesFrom(dataContainerId)).withLabels(labels).withPublishAllPorts(true).exec().getId();  provisioned.add(id);  LOG.debug("Starting container");  getDockerCli().startContainerCmd(id).exec();  return id;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Sage.LINUX_OS)   return Sage.getFileSystemTypeX(getString(stack));  java.io.File rootDir=IOUtils.getRootDirectory(getFile(stack));  return rootDir != null ? Sage.getFileSystemTypeX(rootDir.toString()) : "";}  }
class C{  public void testEncode(){  assertTrue("encode failed",Arrays.equals(softwareAttribute.encode(),attributeBinValue));}  }
class C{  public static long jenkins(final BitVector bv){  return jenkins(bv,0);}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec06(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,null,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  protected boolean resetAttribute(String ns,String prefix,String ln){  AttributeInitializer ai=getAttributeInitializer();  if (ai == null) {    return false;  }  return ai.resetAttribute(this,ns,prefix,ln);}  }
class C{  public void show(){  mImpl.show();}  }
class C{  @Override public void verifyText(VerifyEvent event){  Text text=(Text)getCellEditor().getControl();  String oldText=text.getText();  String leftText=oldText.substring(0,event.start);  String rightText=oldText.substring(event.end,oldText.length());  GC gc=new GC(text);  if (leftText == null)   leftText="";  if (rightText == null)   rightText="";  String s=leftText + event.text + rightText;  Point size=gc.textExtent(leftText + event.text + rightText);  gc.dispose();  if (size.x != 0)   size=text.computeSize(size.x,SWT.DEFAULT); else {    size.x=size.y;  }  getCellEditor().getControl().setSize(size.x,size.y);}  }
class C{  public static boolean writeFile(String filePath,List<String> contentList,boolean append){  if (ListUtils.isEmpty(contentList)) {    return false;  }  FileWriter fileWriter=null;  try {    makeDirs(filePath);    fileWriter=new FileWriter(filePath,append);    int i=0;    for (    String line : contentList) {      if (i++ > 0) {        fileWriter.write("\r\n");      }      fileWriter.write(line);    }    fileWriter.close();    return true;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (fileWriter != null) {      try {        fileWriter.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  protected void decodeNode(mxCodec dec,Node node,Object obj){  if (node != null) {    decodeAttributes(dec,node,obj);    decodeChildren(dec,node,obj);  }}  }
class C{  public void _skip_instance(){switch (read_bits_int(8)) {case 0:{      final int length=_vint();      for (int i=0; i < length; i++)       _skip_instance();      break;    }case 1:  skipBytes((_vint() + 7) >> 3);break;case 2:skipBytes(_vint());break;case 3:_vint();_skip_instance();break;case 4:if (read_bits_int(8) != 0) _skip_instance();break;case 5:{final int length=_vint();for (int i=0; i < length; i++) {_vint();_skip_instance();}break;}case 6:skipBytes(1);break;case 7:skipBytes(4);break;case 8:skipBytes(8);break;case 9:_vint();break;}}  }
class C{  public Object[] lookupCflow(String name){  if (cflow == null)   cflow=new Hashtable();  return (Object[])cflow.get(name);}  }
class C{  public void afterPlace(GlowPlayer player,GlowBlock block,ItemStack holding,GlowBlockState oldState){  block.applyPhysics(oldState.getType(),block.getTypeId(),oldState.getRawData(),block.getData());}  }
class C{  public static void writeColumn(String fileName,CategoryColumn column) throws IOException {  int categoryCount=column.dictionaryMap().size();  try (FileOutputStream fos=new FileOutputStream(fileName);SnappyFramedOutputStream sos=new SnappyFramedOutputStream(fos);DataOutputStream dos=new DataOutputStream(sos)){    dos.writeInt(categoryCount);    SortedSet<Integer> keys=new TreeSet<>(column.dictionaryMap().keyToValueMap().keySet());    for (    int key : keys) {      dos.writeUTF(column.dictionaryMap().get(key));    }    dos.flush();    int i=0;    for (    int d : column.data()) {      dos.writeInt(d);      if (i % FLUSH_AFTER_ITERATIONS == 0) {        dos.flush();      }      i++;    }  } }  }
class C{  public void testDoCheckWithDefaultNotDetectionResult(){  LOGGER.debug("doCheckWithDefaultNotDetectionResult");  elements.add(element);  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("test.php");  mockTestSolutionHandler.addTestSolution(TestSolution.PASSED);  expectLastCall().once();  expect(mockNomenclature.getValueList()).andReturn(Arrays.asList("html"));  TextEndsWithChecker instance=new TextEndsWithChecker(mockTextElementBuilder,EXTENSION_NOM_NAME,DETECTION_MSG);  instance.setNomenclatureLoaderService(mockNomenclatureLoaderService);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService);}  }
class C{  public void exprAddChild(ExpressionNode n,int i){  appendChild((ElemTemplateElement)n);}  }
class C{  public static void checkArgument(boolean expression){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalArgumentException();  }}  }
class C{  public void or(BitSet set){  if (this == set) {    return;  }  ensureCapacity(set.unitsInUse);  int unitsInCommon=Math.min(unitsInUse,set.unitsInUse);  int i;  for (i=0; i < unitsInCommon; i++) {    bits[i]|=set.bits[i];  }  for (; i < set.unitsInUse; i++) {    bits[i]=set.bits[i];  }  if (unitsInUse < set.unitsInUse)   unitsInUse=set.unitsInUse;}  }
class C{  @Override public List<String> lrange(final String key,final long start,final long end){  checkIsInMultiOrPipeline();  client.lrange(key,start,end);  return client.getMultiBulkReply();}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  public GdiFont(){}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  private int bufferIndex(int index){  return FontMath.log2(index >> this.lowBits) + 1;}  }
class C{  public Iterator iterator(){  return new PartialOrderIterator(poNodes.values().iterator());}  }
class C{  private boolean isRespondingToEvents(){  return respondingToEvents;}  }
class C{  public void send(final KCWebView webView){  mState=OPENED;  KCLog.i(">>>> XHR send start");  if (mHttpRequest == null) {    KCXMLHttpRequestManager.freeXMLHttpRequestObject(webView,mId);    return;  }  if (mAborted) {    KCXMLHttpRequestManager.freeXMLHttpRequestObject(webView,mId);    return;  }  KerNet.newRequestRunner(webView.getContext()).startAsyn(mHttpRequest);}  }
class C{  @SuppressWarnings("unused") public long create_media_header_atom(MP4DataStream bitstream) throws IOException {  create_full_atom(bitstream);  if (version == 1) {    creationTime=createDate(bitstream.readBytes(8));    modificationTime=createDate(bitstream.readBytes(8));    timeScale=(int)bitstream.readBytes(4);    duration=bitstream.readBytes(8);    readed+=28;  } else {    creationTime=createDate(bitstream.readBytes(4));    modificationTime=createDate(bitstream.readBytes(4));    timeScale=(int)bitstream.readBytes(4);    duration=bitstream.readBytes(4);    readed+=16;  }  int packedLanguage=(int)bitstream.readBytes(2);  int qt_quality=(int)bitstream.readBytes(2);  readed+=4;  return readed;}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  if (!learningphase) {    return;  }  int num_classes=(int)(snumClasses);  SparseArray data=new SparseArray();  SparseArray labels=new SparseArray();  int numChanges=0;  int numCategories_1=numCategories - 1;  numinstances+=1;  if (!instance.classIsMissing()) {    for (Integer tj=0; tj < instance.numValues(); tj++) {      int j=instance.index(tj);      double da=instance.value(j);      if (da == 0) {        continue;      }      if (j < num_classes) {        labels.put(j,da);      } else {        data.put(j - num_classes,da);      }    }    SortPair2[] cateacti=ARTActivateCategories(data,labels);    java.util.Arrays.sort(cateacti);    boolean resonance=false;    int currentSortedIndex=0;    int currentCategory=-1;    double matchA=0;    while (!resonance && currentSortedIndex < cateacti.length) {      currentCategory=cateacti[currentSortedIndex].getOriginalIndex();      if (currentCategory == numCategories_1) {        matchA=1;      } else {        matchA=(cateacti[currentSortedIndex].getRawValue() / snumFeatures);      }      if (matchA >= roa) {        if (currentCategory == numCategories_1) {          if (currentSortedIndex == maxNumCategories) {            System.out.println("WARNING: The maximum number of categories has been reached.");            resonance=true;          } else {            sweightsA[currentCategory]=0;            int[] s1=data.getKeys();            int sit=data.size();            int count=0;            int j=0;            for (int jt=0; jt < sit; jt++) {              j=s1[jt];              Double da=data.get(j);              weightsA[currentCategory].put(j,da);              weightsA[currentCategory].put(j + snumFeatures,da);              upweightsA[currentCategory].put(j + snumFeatures,1.0);              sweightsA[currentCategory]+=da;              sweightsA[currentCategory]+=1 - da;              count+=1;            }            sweightsA[currentCategory]+=snumFeatures - count;            s1=labels.getKeys();            sit=labels.size();            for (int jt=0; jt < sit; jt++) {              j=s1[jt];              weightsB[currentCategory].put(j,labels.get(j));            }            String s=labels.getKeysString();            if (hmclasses.containsKey(s)) {              hmclasses.get(s).add(currentCategory);              hmclasses.put(s,hmclasses.get(s));            } else {              Vector<Integer> v=new Vector<Integer>();              v.add(currentCategory);              hmclasses.put(s,v);            }            ARAMm_Add_New_Category();            numChanges=numChanges + 1;            resonance=true;            break;          }        } else {          double weightChange=ARAMm_Update_Weights(data,labels,currentCategory);          if (weightChange == 1) {            numChanges+=1;          }          resonance=true;          break;        }      } else {        currentSortedIndex+=1;        resonance=false;      }    }    if (!resonance && currentSortedIndex >= cateacti.length) {      sweightsA[numCategories_1]=0;      int[] s1=data.getKeys();      int sit=data.size();      int j=0;      int count=0;      for (int jt=0; jt < sit; jt++) {        j=s1[jt];        double da=data.get(j);        weightsA[numCategories_1].put(j,da);        sweightsA[numCategories_1]+=da;        weightsA[numCategories_1].put(j + snumFeatures,da);        sweightsA[numCategories_1]+=1 - da;        upweightsA[numCategories_1].put(j + snumFeatures,1.0);        count+=1;      }      sweightsA[numCategories_1]+=snumFeatures - count;      s1=labels.getKeys();      sit=labels.size();      j=0;      for (int jt=0; jt < sit; jt++) {        j=s1[jt];        weightsB[numCategories_1].put(j,labels.get(j));      }      String s=labels.getKeysString();      if (hmclasses.containsKey(s)) {        hmclasses.get(s).add(numCategories_1);        hmclasses.put(s,hmclasses.get(s));      } else {        Vector<Integer> v=new Vector<Integer>();        v.add(numCategories_1);        hmclasses.put(s,v);      }      ARAMm_Add_New_Category();      numChanges=numChanges + 1;    }  }}  }
class C{  public MLContextException(String message,boolean suppressStacktrace){  super(message,null,suppressStacktrace,!suppressStacktrace);  this.suppressStacktrace=suppressStacktrace;}  }
class C{  public void run(){  reader.get().run(this);}  }
class C{  public static SegmentInfos readSegmentInfos(Directory directory) throws IOException {  return SegmentInfos.readLatestCommit(directory);}  }
